[
  {
    "start": "0",
    "end": "21000"
  },
  {
    "text": "ANNOUNCER: Open content is\nprovided under a creative commons license. Your support will help MIT\nOpenCourseWare continue to",
    "start": "0",
    "end": "6840"
  },
  {
    "text": "offer high-quality educational\nresources for free. To make a donation, or view\nadditional materials from",
    "start": "6840",
    "end": "13390"
  },
  {
    "text": "hundreds of MIT courses, visit\nMIT OpenCourseWare at ocw.mit.edu .",
    "start": "13390",
    "end": "19430"
  },
  {
    "text": "PROFESSOR ERIC GRIMSON: Last\ntime, we ended up, we sort of did this tag team thing,\nProfessor Guttag did the first",
    "start": "19430",
    "end": "25380"
  },
  {
    "start": "21000",
    "end": "128000"
  },
  {
    "text": "half, I did the second half of\nthe lecture, and the second half of the lecture, we\nstarted talking about complexity.",
    "start": "25380",
    "end": "30610"
  },
  {
    "text": "Efficiency. Orders of growth. And that's what we're going to\nspend today on, is talking about that topic.",
    "start": "30610",
    "end": "36080"
  },
  {
    "text": "I'm going to use it\nto build over the next couple of lectures. I want to remind you that we\nwere talking at a fairly high",
    "start": "36080",
    "end": "41530"
  },
  {
    "text": "level about complexity. We're going to get down into\nthe weeds in a second here. But the things we were trying\nto stress were that it's an",
    "start": "41530",
    "end": "47679"
  },
  {
    "text": "important design decision, when\nyou are coming up with a piece of code, as to what kind\nof efficiency your code has.",
    "start": "47680",
    "end": "54820"
  },
  {
    "text": "And the second thing that we\ntalked about is this idea that we want you to in fact learn\nhow to relate a choice you",
    "start": "54820",
    "end": "60629"
  },
  {
    "text": "make about a piece of\ncode to what the efficiency is going to be.",
    "start": "60630",
    "end": "65640"
  },
  {
    "text": "So in fact, over the next thirty\nor forty minutes, we're going to show you a set of\nexamples of sort of canonical",
    "start": "65640",
    "end": "70920"
  },
  {
    "text": "algorithms, and the different\nclasses of complexity. Because one of the things that\nyou want to do as a good",
    "start": "70920",
    "end": "75930"
  },
  {
    "text": "designer is to basically\nmap a new problem into a known domain. You want to take a new problem\nand say, what does",
    "start": "75930",
    "end": "83460"
  },
  {
    "text": "this most look like? What is the class of algorithm\nthat's-- that probably applies to this, and how do I pull\nsomething out of that, if you",
    "start": "83460",
    "end": "90380"
  },
  {
    "text": "like, a briefcase of possible\nalgorithms to solve? All right, having said that,\nlet's do some examples.",
    "start": "90380",
    "end": "96350"
  },
  {
    "text": "I'm going to show you a sequence\nof algorithms, they're mostly simple\nalgorithms, that's OK.",
    "start": "96350",
    "end": "101680"
  },
  {
    "text": "But I want you to take away from\nthis how we reason about the complexity of these\nalgorithms. And I'll remind",
    "start": "101680",
    "end": "107200"
  },
  {
    "text": "you, we said we're going to\nmostly talk about time. We're going to be counting the\nnumber of basic steps it takes to solve the problem.",
    "start": "107200",
    "end": "113150"
  },
  {
    "text": "So here's the first example\nI want to do. I'm going to write a function\nto compute integer power",
    "start": "113150",
    "end": "119390"
  },
  {
    "text": "exponents. a to the b where\nb is an integer. And I'm going to do it only\nusing multiplication and",
    "start": "119390",
    "end": "125210"
  },
  {
    "text": "addition and some simple tests. All right? And yeah, I know it comes built\nin, that's OK, what we",
    "start": "125210",
    "end": "130289"
  },
  {
    "start": "128000",
    "end": "1646000"
  },
  {
    "text": "want to do is use it as an\nexample to look at it. So I'm going to build something\nthat's going to do",
    "start": "130290",
    "end": "140960"
  },
  {
    "text": "iterative exponentiation. OK? And in fact, if you look at the\ncode up here, and it's on",
    "start": "140960",
    "end": "146980"
  },
  {
    "text": "your handout, the very first\none, x 1, right here-- if I could ask you to look at it--\nis a piece of code to do it.",
    "start": "146980",
    "end": "153400"
  },
  {
    "text": "And I'm less interested in the\ncode than how we're going to analyze it, but let's look\nat it for a second. All right, you can see that\nthis little piece of code,",
    "start": "153400",
    "end": "162300"
  },
  {
    "text": "it's got a loop in there,\nand what's it doing? It's basically cycling\nthrough the loop,",
    "start": "162300",
    "end": "167380"
  },
  {
    "text": "multiplying by a each time. So first time through the\nloop, the answer is 1. Second time it-- sorry, as it\nenters the loop, at the time",
    "start": "167380",
    "end": "173860"
  },
  {
    "text": "it enter-- exits,\nthe answer is a. Next time through the loop\nit goes to a squared. Next time through the loop\nit goes to a cubed.",
    "start": "173860",
    "end": "179620"
  },
  {
    "text": "And it's just gathering together\nthe multiplications while counting down\nthe exponent.",
    "start": "179620",
    "end": "185090"
  },
  {
    "text": "And you can see it when we get\ndown to the end test here, we're going to pop out of\nthere and we're going to return the answer.",
    "start": "185090",
    "end": "191190"
  },
  {
    "text": "I could run it, it'll\ndo the right thing. What I want to think about\nthough, is, how much",
    "start": "191190",
    "end": "196830"
  },
  {
    "text": "time does this take? How many steps does it take\nfor this function to run?",
    "start": "196830",
    "end": "202040"
  },
  {
    "text": "Well, you can kind of\nlook at it, right? The key part of that\nis that WHILE loop. And what are the steps\nI want to count?",
    "start": "202040",
    "end": "207450"
  },
  {
    "text": "They're inside that loop-- I've got the wrong glasses so\nI'm going to have to squint-- and we've got one test which\nis a comparison, we've got",
    "start": "207450",
    "end": "213640"
  },
  {
    "text": "another test which is a\nmultiplication-- sorry, not a test, we've got another step\nwhich is a multiplication--",
    "start": "213640",
    "end": "218850"
  },
  {
    "text": "and another step that\nis a subtraction. So each time through the loop,\nI'm doing three steps.",
    "start": "218850",
    "end": "224350"
  },
  {
    "text": "Three basic operations. How many times do I go\nthrough the loop? Somebody help me out.",
    "start": "224350",
    "end": "231329"
  },
  {
    "text": "Hand up? Sorry. b times. You're right. Because I keep counting down\neach time around-- mostly I've",
    "start": "231330",
    "end": "236706"
  },
  {
    "text": "got to unload this candy, which\nis driving me nuts, so-- thank you. b times. So I've got to go 3 b steps.",
    "start": "236706",
    "end": "243430"
  },
  {
    "text": "All right, I've got to go\nthrough the loop b times, I've got three steps each time, and\nthen when I pop out of the loop, I've got two more steps.",
    "start": "243430",
    "end": "249280"
  },
  {
    "text": "All right, I've got the\ninitiation of answer and the return of it. So I take 2 plus 3 b steps\nto go through this loop.",
    "start": "249280",
    "end": "259049"
  },
  {
    "text": "OK. So if b is 300, it takes 902\nsteps. b is 3000, it takes",
    "start": "259050",
    "end": "267910"
  },
  {
    "text": "9002 steps. b is 30,000\nyou get the point, it takes 90,002 steps.",
    "start": "267910",
    "end": "275520"
  },
  {
    "text": "OK. So the point here is, first of\nall, I can count these things, but the second thing you can\nsee is, as the size of the",
    "start": "275520",
    "end": "281750"
  },
  {
    "text": "problems get larger, that\nadditive constant, that 2, really doesn't matter.",
    "start": "281750",
    "end": "287599"
  },
  {
    "text": "All right? The difference between 90,000\nsteps and 90,002 steps, who cares about the 2, right?",
    "start": "287600",
    "end": "293210"
  },
  {
    "text": "So, and typically, we're not\ngoing to worry about those additive constants. The second one is, this\nmultiplicative constant here",
    "start": "293210",
    "end": "300260"
  },
  {
    "text": "is 3, in some sense also\nisn't all that crucial. Does it really matter to you\nwhether your code is going to",
    "start": "300260",
    "end": "306860"
  },
  {
    "text": "take 300 years or 900\nyears to run? Problem is, how big\nis that number?",
    "start": "306860",
    "end": "311880"
  },
  {
    "text": "So we're going to typically\nalso not worry about the multiplicative constants. This factor here.",
    "start": "311880",
    "end": "318280"
  },
  {
    "text": "What we really want to worry\nabout is, as the size of the problem gets larger, how\ndoes this thing grow?",
    "start": "318280",
    "end": "325170"
  },
  {
    "text": "How does the cost go up? And so what we're going to\nprimarily talk about as a consequence is the rate of\ngrowth as the size of the",
    "start": "325170",
    "end": "346310"
  },
  {
    "text": "problem grows. If it was, how much bigger does\nthis get as I make the",
    "start": "346310",
    "end": "353890"
  },
  {
    "text": "problem bigger? And what that really says is,\nthat we're going to use this using something we're\ngoing to just call asymptotic notation--",
    "start": "353890",
    "end": "362170"
  },
  {
    "text": "I love spelling this word--\nmeaning, as in the limit as",
    "start": "362170",
    "end": "368820"
  },
  {
    "text": "the size of the problem gets\nbigger, how do I characterize this growth? All right?",
    "start": "368820",
    "end": "373870"
  },
  {
    "text": "You'll find out, if you go on\nto some of the other classes in course 6, there are a lot of\ndifferent ways that you can measure this.",
    "start": "373870",
    "end": "378950"
  },
  {
    "text": "The most common one, and the\none we're going to use, is what's often called\nbig Oh notation.",
    "start": "378950",
    "end": "387990"
  },
  {
    "text": "This isn't big Oh as in, oh my\nGod I'm shocked the markets are collapsing, This is called\nbig Oh because we use the",
    "start": "387990",
    "end": "393130"
  },
  {
    "text": "Greek letter, capital letter,\nomicron to represent it. And the way we're going to do\nthis, or what this represents,",
    "start": "393130",
    "end": "398500"
  },
  {
    "text": "let me write this carefully for\nyou, big Oh notation is basically going to be an upper\nlimit to the growth of a",
    "start": "398500",
    "end": "413450"
  },
  {
    "text": "function as the input grow--\nas the input gets large.",
    "start": "413450",
    "end": "420690"
  },
  {
    "text": "Now we're going to see a bunch\nof examples, and I know those",
    "start": "420690",
    "end": "426020"
  },
  {
    "text": "are words, let me give\nyou an example. I would write f of x is in\nbig Oh of n squared.",
    "start": "426020",
    "end": "436689"
  },
  {
    "text": "And what does it say? It says that function, f of x,\nis bounded above, there's an upper limit on it, that this\ngrows no faster than quadratic",
    "start": "436690",
    "end": "445940"
  },
  {
    "text": "in n, n squared. OK. And first of all, you say,\nwait a minute, x and n?",
    "start": "445940",
    "end": "451190"
  },
  {
    "text": "Well, one of the things we're\ngoing to see is x is the input to this particular problem, n is\na measure of the size of x.",
    "start": "451190",
    "end": "458860"
  },
  {
    "text": "And we're going to talk about\nhow we come up with that. n measures the size of x.",
    "start": "458860",
    "end": "466830"
  },
  {
    "text": "OK. In this example I'd use b. All right, as b get-- b is the\nthing that's changing as I go",
    "start": "466830",
    "end": "472250"
  },
  {
    "text": "along here, but it could be\nthings like, how many elements are there in a list if the input\nis a list, could be how many digits are there in a\nstring if the input's a",
    "start": "472250",
    "end": "478699"
  },
  {
    "text": "string, it could be the size of\nthe integer as we go along. All right.? And what we want to do then, is\nwe want to basically come",
    "start": "478700",
    "end": "485810"
  },
  {
    "text": "up with, how do we characterize\nthe growth-- God bless you-- of this problem\nin terms of this",
    "start": "485810",
    "end": "491629"
  },
  {
    "text": "quadra-- sorry, terms of\nthis exponential growth Now, one last piece of math. I could cheat.",
    "start": "491630",
    "end": "497260"
  },
  {
    "text": "I said I just want\nan upper bound. I could get a really big upper\nbound, this thing grows exponentially.",
    "start": "497260",
    "end": "502720"
  },
  {
    "text": "That doesn't help me much. Usually what I want to talk\nabout is what's the smallest size class in which this\nfunction grows?",
    "start": "502720",
    "end": "510420"
  },
  {
    "text": "With all of that, what that\nsays, is that this we would write is order b. That algorithm is linear.",
    "start": "510420",
    "end": "520909"
  },
  {
    "text": "You can see it. I've said the product\nwas is 2 plus 3 b. As I make b really large, how\ndoes this thing grow?",
    "start": "520910",
    "end": "527070"
  },
  {
    "text": "It grows as b. The 3 doesn't matter, it's\njust a constant, it's growing linearly. Another way of saying it is,\nif I, for example, increase",
    "start": "527070",
    "end": "535570"
  },
  {
    "text": "the size of the input by\n10, the amount of time increases by 10. And that's a sign that\nit's linear.",
    "start": "535570",
    "end": "543610"
  },
  {
    "text": "OK. So there's one quick example. Let's look at another example. If you look at x 2, this one\nright here in your handout.",
    "start": "543610",
    "end": "552200"
  },
  {
    "text": "OK. This is another way of doing\nexponentiation, but this one's",
    "start": "552200",
    "end": "557360"
  },
  {
    "text": "a recursive function. All right? So again, let's look at it. What does it say to do? Well, it's basically saying\na similar thing.",
    "start": "557360",
    "end": "563220"
  },
  {
    "text": "It says, if I am in the base\ncase, if b is equal to 1, the answer is just a. I could have used if b is equal\nto 0, the answer is 1,",
    "start": "563220",
    "end": "570279"
  },
  {
    "text": "that would have also worked. Otherwise, what do I say? I say, ah, I'm in a nice\nrecursive way, a to the b is",
    "start": "570280",
    "end": "576600"
  },
  {
    "text": "the same as a times a\nto the b minus 1. And I've just reduced that\nproblem to a simpler version",
    "start": "576600",
    "end": "583610"
  },
  {
    "text": "of the same problem. OK, and you can see that this\nthing ought to unwrap, it's going to keep extending out\nthose multiplications until",
    "start": "583610",
    "end": "589560"
  },
  {
    "text": "gets down to the base\ncase, going to collapse them all together. OK. Now I want to know what's the\norder of growth here?",
    "start": "589560",
    "end": "597180"
  },
  {
    "text": "What's the complexity of this? Well, gee. It looks like it's pretty\nstraightforward, right?",
    "start": "597180",
    "end": "604170"
  },
  {
    "text": "I've got one test there, and\nthen I've just got one thing to do here, which has got\na subtraction and a",
    "start": "604170",
    "end": "609310"
  },
  {
    "text": "multiplication. Oh, but how do I know how\nlong it takes to do x 2?",
    "start": "609310",
    "end": "614470"
  },
  {
    "text": "All right, we were counting\nbasic steps. We don't know how long\nit takes to do x 2. So I'm going to show you\na little trick for",
    "start": "614470",
    "end": "621230"
  },
  {
    "text": "figuring that out. And in particular, I'm going to\ncheat slightly, I'm going to use a little bit of abusive\nmathematics, but I'm going to",
    "start": "621230",
    "end": "628200"
  },
  {
    "text": "show you a trick to\nfigure it out. In the case of a recursive\nexponentiator, I'm going to do",
    "start": "628200",
    "end": "636130"
  },
  {
    "text": "the following trick. I'm going to let t of b be the\nnumber of steps it takes to",
    "start": "636130",
    "end": "641890"
  },
  {
    "text": "solve the problem of size b. OK, and I can figure this out. I've got one test, I've got\na subtraction, I've got a",
    "start": "641890",
    "end": "649140"
  },
  {
    "text": "multiplication, that's three\nsteps, plus whatever number of",
    "start": "649140",
    "end": "655670"
  },
  {
    "text": "steps it takes to solve a\nproblem of size b minus 1. All right, this is what's called\na recurrence relation,",
    "start": "655670",
    "end": "662480"
  },
  {
    "text": "there are actually cool\nways to solve them. We can kind of eyeball it. In particular, how would I\nwrite an expression for",
    "start": "662480",
    "end": "670130"
  },
  {
    "text": "t of b minus 1? Well the same way. This is 3 plus 3 plus\nt of b minus 2.",
    "start": "670130",
    "end": "678230"
  },
  {
    "text": "Right? I'm using exactly the same\nform to reduce this. You know, you can see what's\ngoing to happen.",
    "start": "678230",
    "end": "683350"
  },
  {
    "text": "If I reduce that, it would be\n3 plus t of b minus 3, so in general, this is 3 k plus\nt of b minus k.",
    "start": "683350",
    "end": "693660"
  },
  {
    "text": "OK. I'm just expanding it out. When am I done? How do I stop this?",
    "start": "693660",
    "end": "700580"
  },
  {
    "text": "Any suggestions? Don't you hate it when\nprofessors ask questions? Yeah.",
    "start": "700580",
    "end": "708829"
  },
  {
    "text": "Actually, I think I want\nb minus k equal to 1. Right? When this gets down to t of\n1, I'm in the base case.",
    "start": "708830",
    "end": "715990"
  },
  {
    "text": "So I'm done when b minus\nk equals 1, or k",
    "start": "715990",
    "end": "721550"
  },
  {
    "text": "equals b minus 1. Right, that gets me down to the\nbase case, I'm solving a problem with size 1, and in that\ncase, I've got two more",
    "start": "721550",
    "end": "728800"
  },
  {
    "text": "operations to do, so I plug this\nall back in, I-- t of b is I'm going to put k for b\nminus 1 I get 3 b minus 1 plus",
    "start": "728800",
    "end": "739839"
  },
  {
    "text": "t of 1, so t of 1 is 2, so this\nis 3 b minus 1 plus 2, or",
    "start": "739840",
    "end": "746050"
  },
  {
    "text": "3 b minus 1. OK. A whole lot of work\nto basically say,",
    "start": "746050",
    "end": "754560"
  },
  {
    "text": "again, order b is linear. But that's also nice, it lets\nyou see how the recursive",
    "start": "754560",
    "end": "761510"
  },
  {
    "text": "thing is simply unwrapping but\nthe complexity in terms of the amount of time it takes is\ngoing to be the same. I owe you a candy.",
    "start": "761510",
    "end": "768310"
  },
  {
    "text": "Thank you. OK. At this point, if we stop,\nyou'll think all algorithms",
    "start": "768310",
    "end": "773440"
  },
  {
    "text": "are linear. This is really boring. But they're not. OK? So let me show you another way\nI could do exponentiation.",
    "start": "773440",
    "end": "780540"
  },
  {
    "text": "Taking an advantage\nof a trick. I want to solve a to the b.",
    "start": "780540",
    "end": "788200"
  },
  {
    "text": "Here's another way\nI could do that. OK. If b is even, then a to the b\nis the same as a squared all",
    "start": "788200",
    "end": "803040"
  },
  {
    "text": "to the b over 2. All right, just move\nthe 2's around. It's the same thing. You're saying, OK, so what?",
    "start": "803040",
    "end": "809269"
  },
  {
    "text": "Well gee, notice. This is a primitive operation. That's a primitive operation.",
    "start": "809270",
    "end": "815280"
  },
  {
    "text": "But in one step, I've reduced\nthis problem in half. I didn't just make\nit one smaller, I",
    "start": "815280",
    "end": "820339"
  },
  {
    "text": "made it a half smaller. That's a nice deal. OK. But I'm not always going\nto have b as even.",
    "start": "820340",
    "end": "825870"
  },
  {
    "text": "If b is odd, what do I do? Well, go back to what\nI did before.",
    "start": "825870",
    "end": "836490"
  },
  {
    "text": "Multiply a by a to\nthe b minus 1. You know, that's nice, right? Because if b was odd, then b\nminus one is even, which means",
    "start": "836490",
    "end": "843769"
  },
  {
    "text": "on the next step, I can cut\nthe problem in half again. OK? All right. x 3, as you can see\nright here, does exactly that.",
    "start": "843770",
    "end": "857160"
  },
  {
    "text": "OK? You can take a quick look at\nit, even with the wrong glasses on, it says if a--\nsorry, b is equal to 1, I'm",
    "start": "857160",
    "end": "862850"
  },
  {
    "text": "just going to return a. Otherwise there's that funky\nlittle test. I'll do the remainder multiplied by 2,\nbecause these are integers,",
    "start": "862850",
    "end": "869579"
  },
  {
    "text": "that gives me back an integer,\nI just check to see if it's equal to b, that tells me\nwhether it's even or odd. And in the even case, I'd\nsquare, divide by half, call",
    "start": "869580",
    "end": "878420"
  },
  {
    "text": "this again: in the odd case,\nI go b minus 1 and then multiply by a.",
    "start": "878420",
    "end": "884209"
  },
  {
    "text": "I'll let you chase it through,\nit does work. What I want to look\nat is, what's the order of growth here?",
    "start": "884210",
    "end": "891030"
  },
  {
    "text": "This is a little different,\nright? It's going to take a little bit\nmore work, so let's see if we can do it.",
    "start": "891030",
    "end": "898270"
  },
  {
    "text": "In the b even case, again I'm\ngoing to let t of b be the number of steps I want\nto go through.",
    "start": "898270",
    "end": "903750"
  },
  {
    "text": "And we can kind of eyeball\nthis thing, right? If b is even, I've got a test to\nsee if b is equal to 1, and",
    "start": "903750",
    "end": "909470"
  },
  {
    "text": "then I've got to do the\nremainder, the multiplication, and the test, I'm up to four. And then in the even case, I've\ngot to do a square and",
    "start": "909470",
    "end": "917240"
  },
  {
    "text": "the divide. So I've got six steps, plus\nwhatever it takes to solve the",
    "start": "917240",
    "end": "924670"
  },
  {
    "text": "problem size b over 2, right? Because that's the recursive\ncall. b as odd, well I can go",
    "start": "924670",
    "end": "933450"
  },
  {
    "text": "through the same\nkind of thing. I've got the same first four\nsteps, I've got a check to see is it 1, I got a check to see if\nit's even, and then in the",
    "start": "933450",
    "end": "940130"
  },
  {
    "text": "odd case, I've got to subtract 1\nfrom b, that's a fifth step, I've got to go off and solve\nthe recursive problem, and",
    "start": "940130",
    "end": "945560"
  },
  {
    "text": "then I'm going to do one more\nmultiplication, so it's 6 plus, in this case,\nt of b minus 1.",
    "start": "945560",
    "end": "952320"
  },
  {
    "text": "Because it's now solving\na one-smaller problem. On the next step though, this,\nwe get substituted by that.",
    "start": "952320",
    "end": "961240"
  },
  {
    "text": "Right, on the next step, I'm\nback in the even case, it's going to take six more steps,\nplus t of b minus 1.",
    "start": "961240",
    "end": "969150"
  },
  {
    "text": "Oops, sorry about\nthat, over 2. Because b minus 1 is now even.",
    "start": "969150",
    "end": "975490"
  },
  {
    "text": "Don't sweat the details here,\nI just want you to see the reason it goes through it. What I now have, though,\nis a nice thing. It says, in either case, in\ngeneral, t of b-- and this is",
    "start": "975490",
    "end": "985509"
  },
  {
    "text": "where I'm going to abuse\nnotation a little bit-- but I can basically bound it by t, 12\nsteps plus t of b over 2.",
    "start": "985510",
    "end": "993899"
  },
  {
    "text": "And the abuse is, you know,\nit's not quite right, it depends upon whether it's all\nready, but you can see in either case, after 12 steps, 2\nruns through this and down to",
    "start": "993900",
    "end": "999605"
  },
  {
    "text": "a problem size b over 2. Why's that nice? Well, that then says after\nanother 12 steps, we're down",
    "start": "999605",
    "end": "1009150"
  },
  {
    "text": "to a problem with size\nt of b over 4. And if I pull it out one more\nlevel, it's 12 plus 12 plus t",
    "start": "1009150",
    "end": "1019875"
  },
  {
    "text": "of b over 8, which in general is\ngoing to be, after k steps, 12 k because I'll have 12 of\nthose to add up, plus t of b",
    "start": "1019875",
    "end": "1028390"
  },
  {
    "text": "over 2 to the k.",
    "start": "1028390",
    "end": "1033569"
  },
  {
    "text": "When am I done? When do I get down\nto the base case?",
    "start": "1033570",
    "end": "1040059"
  },
  {
    "text": "Somebody help me out. What am I looking for?",
    "start": "1040060",
    "end": "1045350"
  },
  {
    "text": "Yeah. You're jumping slightly ahead of\nme, but basically, I'm done when this is equal\nto 1, right? Because I get down to the base\ncase, so I'm done when b u is",
    "start": "1045350",
    "end": "1052790"
  },
  {
    "text": "over 2 to the k is equal to 1,\nand you're absolutely right, that's when k is log\nbase 2 of b.",
    "start": "1052790",
    "end": "1064400"
  },
  {
    "text": "You're sitting a long ways back,\nI have no idea if I'll make it this far or not. Thank you.",
    "start": "1064400",
    "end": "1070040"
  },
  {
    "text": "OK. There's some constants\nin there, but this is order log b.",
    "start": "1070040",
    "end": "1077550"
  },
  {
    "text": "Logarithmic. This matters. This matters a lot. And I'm going to show you an\nexample in a second, just to",
    "start": "1077550",
    "end": "1083610"
  },
  {
    "text": "drive this home, but notice\nthe characteristics. In the first two cases,\nthe problem reduced",
    "start": "1083610",
    "end": "1089570"
  },
  {
    "text": "by 1 at each step. Whether it was recursive\nor iterative. That's a sign that it's\nprobably linear.",
    "start": "1089570",
    "end": "1095710"
  },
  {
    "text": "This case, I reduced the size\nof the problem in half. It's a good sign that this is\nlogarithmic, and I'm going to",
    "start": "1095710",
    "end": "1101920"
  },
  {
    "text": "come back in a second to why\nlogs are a great thing. Let me show you one more class,\nthough, about-- sorry,",
    "start": "1101920",
    "end": "1108410"
  },
  {
    "text": "let me show you two more classes\nof algorithms. Let's look at the next one g-- and\nthere's a bug in your handout, it should be g of n and m, I\napologize for that, I changed",
    "start": "1108410",
    "end": "1117210"
  },
  {
    "text": "it partway through and\ndidn't catch it. OK. Order of growth here.",
    "start": "1117210",
    "end": "1125530"
  },
  {
    "text": "Anybody want to volunteer\na guess? Other than the TAs, who know?",
    "start": "1125530",
    "end": "1133830"
  },
  {
    "text": "OK. Let's think it through. I've got two loops. All right? We already saw with one of the\nloops, you know, it looked",
    "start": "1133830",
    "end": "1141529"
  },
  {
    "text": "like it might be linear,\ndepending on what's inside of it, but let's think\nabout this. I got two loops with g. What's g do?",
    "start": "1141530",
    "end": "1147059"
  },
  {
    "text": "I've got an initialization of\nx, and then I say, for i in the range, so that's basically\nfrom 0 up to n minus",
    "start": "1147060",
    "end": "1152740"
  },
  {
    "text": "1, what do I do? Well, inside of there, I've got\nanother loop, for j in the range from 0 up to m minus 1.",
    "start": "1152740",
    "end": "1160870"
  },
  {
    "text": "What's the complexity\nof that inner loop? Sorry?",
    "start": "1160870",
    "end": "1166730"
  },
  {
    "text": "OK. You're doing the whole\nthing for me. What's the complexity just\nof this inner loop here? Just this piece. How many times do I go\nthrough that loop? m.",
    "start": "1166730",
    "end": "1176260"
  },
  {
    "text": "Right? I'm going to get back to your\nanswer in a second, because you're heading in the\nright direction. The inner loop, this part\nhere, I do m times.",
    "start": "1176260",
    "end": "1183440"
  },
  {
    "text": "There's one step inside of it. Right? How many times do I go\nthrough that loop?",
    "start": "1183440",
    "end": "1188900"
  },
  {
    "text": "Ah, n times, because for each\nvalue of i, I'm going to do that m thing, so that is, close\nto what you said, right?",
    "start": "1188900",
    "end": "1196830"
  },
  {
    "text": "The order complexity here, if\nI actually write it, would be-- sorry, order n times m, and\nif m was equal to n, that",
    "start": "1196830",
    "end": "1208529"
  },
  {
    "text": "would be order n squared,\nand this is quadratic.",
    "start": "1208530",
    "end": "1214860"
  },
  {
    "text": "And that's a different\nbehavior. OK.",
    "start": "1214860",
    "end": "1220180"
  },
  {
    "text": "What am I doing? Building up examples of\nalgorithms. Again, I want you to start seeing how to map the\ncharacteristics of the code--",
    "start": "1220180",
    "end": "1226460"
  },
  {
    "text": "the characteristics of the\nalgorithm, let's not call it the code-- to the complexity. I'm going to come back to that\nin a second with that, but I need to do one more example,\nand I've got to use my",
    "start": "1226460",
    "end": "1233850"
  },
  {
    "text": "high-tech really expensive\nprops. Right. So here's the fourth or fifth,\nwhatever we're up to, I guess",
    "start": "1233850",
    "end": "1239880"
  },
  {
    "text": "fifth example. This is an example of a problem called Towers of Hanoi. Anybody heard about\nthis problem? A few tentative hands.",
    "start": "1239880",
    "end": "1247520"
  },
  {
    "text": "OK. Here's the story as\nI am told it. There's a temple in the\nmiddle of Hanoi.",
    "start": "1247520",
    "end": "1253470"
  },
  {
    "text": "In that temple, there\nare three very large diamond-encrusted posts, and on\nthose posts are sixty-four",
    "start": "1253470",
    "end": "1260390"
  },
  {
    "text": "disks, all of a different\nsize. And they're, you know, covered\nwith jewels and all sorts of other really neat stuff.",
    "start": "1260390",
    "end": "1267170"
  },
  {
    "text": "There are a set of priests in\nthat temple, and their task is to move the entire stack of\nsixty-four disks from one post",
    "start": "1267170",
    "end": "1275470"
  },
  {
    "text": "to a second post. When they do\nthis, you know, the universe ends or they solve the financial\ncrisis in Washington",
    "start": "1275470",
    "end": "1281740"
  },
  {
    "text": "or something like that actually\ngood happens, right? Boy, none of you have 401k's,\nyou're not even wincing at that thing.",
    "start": "1281740",
    "end": "1288009"
  },
  {
    "text": "All right. The rules, though, are, they\ncan only move one disk at a time, and they can never cover\nup a smaller disk with a",
    "start": "1288010",
    "end": "1296500"
  },
  {
    "text": "larger disk. OK. Otherwise you'd just move the\nwhole darn stack, OK? So we want to solve\nthat problem.",
    "start": "1296500",
    "end": "1302030"
  },
  {
    "text": "We want to write a piece of\ncode that helps these guys out, so I'm going to show\nyou an example. Let's see if we can figure\nout how to do this.",
    "start": "1302030",
    "end": "1307490"
  },
  {
    "text": "So, we'll start with\nthe easy one. Moving a disk of size 1. OK, that's not so bad.",
    "start": "1307490",
    "end": "1313240"
  },
  {
    "text": "Moving a stack of size 2, if I\nwant to go there, I need to put this one temporarily over\nhere so I can move the bottom one before I move it over.",
    "start": "1313240",
    "end": "1320380"
  },
  {
    "text": "Moving a stack of size 3, again,\nif I want to go over there, I need to make sure I\ncan put the spare one over here before I move the bottom\none, I can't cover up any of",
    "start": "1320380",
    "end": "1326850"
  },
  {
    "text": "the smaller ones with\nthe larger one, but I can get it there. Stack of size 4, again I'm going\nthere, so I'm going to",
    "start": "1326850",
    "end": "1333110"
  },
  {
    "text": "do this initially, no I'm not,\nI'm going to start again. I'm going to go there initially,\nso I can move this over here, so I can get the base\npart of that over there,",
    "start": "1333110",
    "end": "1339980"
  },
  {
    "text": "I want to put that one there\nbefore I put this over here, finally I get to the point where\nI can move the bottom one over, now I've got to be\nreally careful to make sure",
    "start": "1339980",
    "end": "1346330"
  },
  {
    "text": "that I don't cover up the bottom\none in the wrong way before I get to the stage where\nI wish they were posts and there you go.",
    "start": "1346330",
    "end": "1351590"
  },
  {
    "text": "All right? [APPLAUSE] I mean, I can make money at\nHarvard Square doing this stuff, right?",
    "start": "1351590",
    "end": "1358420"
  },
  {
    "text": "All right, you ready\nto do five? Got the solution?",
    "start": "1358420",
    "end": "1363470"
  },
  {
    "text": "Not so easy to see. All right, but this is actually\na great one of those educational moments.",
    "start": "1363470",
    "end": "1369270"
  },
  {
    "text": "This is a great example\nto think recursively. If I wanted to think about this\nproblem recursively--",
    "start": "1369270",
    "end": "1374320"
  },
  {
    "text": "what do I mean by thinking\nrecursively? How do I reduce this to a\nsmaller-size problem in the same instant?",
    "start": "1374320",
    "end": "1380160"
  },
  {
    "text": "And so, if I do that, this\nnow becomes really easy. If I want to move this stack\nhere, I'm going to take a",
    "start": "1380160",
    "end": "1386070"
  },
  {
    "text": "stack of size n minus 1, move\nit to the spare spot, now I can move the base disk over,\nand then I'm going to move",
    "start": "1386070",
    "end": "1393970"
  },
  {
    "text": "that stack of size n\nminus 1 to there. That's literally\nwhat I did, OK?",
    "start": "1393970",
    "end": "1401270"
  },
  {
    "text": "So there's the code. Called towers. I'm just going to have you--\nlet you take a look at it. I'm giving it an argument,\nwhich is the size of the",
    "start": "1401270",
    "end": "1407990"
  },
  {
    "text": "stack, and then just labels\nfor the three posts. A from, a to, and a spare.",
    "start": "1407990",
    "end": "1413540"
  },
  {
    "text": "And in fact, if we look at\nthis-- let me just pop it over to the other side--",
    "start": "1413540",
    "end": "1418929"
  },
  {
    "text": "OK, I can move a tower, I'll say\nof size 2, from, to, and",
    "start": "1418930",
    "end": "1424400"
  },
  {
    "text": "spare, and that was\nwhat I did. And if I want to move towers,\nlet's say, size 5, from, to,",
    "start": "1424400",
    "end": "1435540"
  },
  {
    "text": "and spare, there are\nthe instructions",
    "start": "1435540",
    "end": "1441140"
  },
  {
    "text": "for how to move it. We ain't going to\ndo sixty-four. OK.",
    "start": "1441140",
    "end": "1446720"
  },
  {
    "text": "All right. So it's fun, and I got a little\nbit of applause out of it, which is always nice for me,\nbut I also showed you how",
    "start": "1446720",
    "end": "1453030"
  },
  {
    "text": "to think about it recursively. Once you hear that description,\nit's easy to write the code, in fact.",
    "start": "1453030",
    "end": "1458440"
  },
  {
    "text": "This is a place where the\nrecursive version of it is much easier to think about\nthan the iterative one. But what I really want to talk\nabout is, what's the order of",
    "start": "1458440",
    "end": "1465380"
  },
  {
    "text": "growth here? What's the complexity\nof this algorithm? And again, I'm going to do it\nwith a little bit of abusive",
    "start": "1465380",
    "end": "1471549"
  },
  {
    "text": "notation, and it's a little more\ncomplicated, but we can kind of look at. All right? Given the code up there, if I\nwant to move a tower of size",
    "start": "1471550",
    "end": "1480000"
  },
  {
    "text": "n, what do I have to do? I've got to test to see if I'm\nin the base case, and if I'm",
    "start": "1480000",
    "end": "1487049"
  },
  {
    "text": "not, then I need to move a tower\nof size n minus 1, I",
    "start": "1487050",
    "end": "1492230"
  },
  {
    "text": "need to move a tower of size\n1, and I need to move a second-- sorry about that--\na second tower of",
    "start": "1492230",
    "end": "1499049"
  },
  {
    "text": "size n minus 1. OK. t of 1 I can also reduce. In the case of a tower of size\n1, basically there are two",
    "start": "1499050",
    "end": "1506540"
  },
  {
    "text": "things to do, right? I've got to do the test, and\nthen I just do the move. So the general formula is that.",
    "start": "1506540",
    "end": "1516419"
  },
  {
    "text": "Now. You might look at that and say,\nwell that's just a lot like what we had over here.",
    "start": "1516420",
    "end": "1522450"
  },
  {
    "text": "Right? We had some additive constant\nplus a simpler version of the same problem reduced\nin size by 1.",
    "start": "1522450",
    "end": "1528070"
  },
  {
    "text": "But that two matters. So let's look at it. How do I rea-- replace the\nexpression FOR t of n minus 1?",
    "start": "1528070",
    "end": "1535900"
  },
  {
    "text": "Substitute it in again. t\nof n minus 1 is 3 plus 2 t of n minus 2.",
    "start": "1535900",
    "end": "1540950"
  },
  {
    "text": "So this is 3, plus 2 times\n3, plus 4 t minus 2.",
    "start": "1540950",
    "end": "1549889"
  },
  {
    "text": "OK. And if I substitute it again, I\nget 3 plus 2 times 3 plus 4",
    "start": "1549890",
    "end": "1556640"
  },
  {
    "text": "times 3 plus 8 t n minus 3.",
    "start": "1556640",
    "end": "1562850"
  },
  {
    "text": "This is going by a little\nfast. I'm just substituting in. I'm going to skip some steps.",
    "start": "1562850",
    "end": "1568090"
  },
  {
    "text": "But basically if I do this, I\nend up with 3 times 1 plus 2",
    "start": "1568090",
    "end": "1573210"
  },
  {
    "text": "plus 4 to 2 to the k\nminus 1 for all of those terms, plus 2--",
    "start": "1573210",
    "end": "1581120"
  },
  {
    "text": "I want to do this right, 2 to\nthe k, sorry-- t of n minus k.",
    "start": "1581120",
    "end": "1590960"
  },
  {
    "text": "OK. Don't sweat the details, I'm\njust expanding it out. What I want you to see is,\nbecause I've got two versions",
    "start": "1590960",
    "end": "1596720"
  },
  {
    "text": "of that problem. The next time down I've\ngot four versions. Next time down I've got\neight versions. And in fact, if I substitute, I\ncan solve for this, I'm done",
    "start": "1596720",
    "end": "1603510"
  },
  {
    "text": "when this is equal to 1. If you substitute it all\nin, you get basically",
    "start": "1603510",
    "end": "1609500"
  },
  {
    "text": "order 2 to the n.",
    "start": "1609500",
    "end": "1614850"
  },
  {
    "text": "Exponential. That's a problem. Now, it's also the case that\nthis is fundamentally what",
    "start": "1614850",
    "end": "1622250"
  },
  {
    "text": "class this algorithm falls\ninto, it is going to take exponential amount of time. But it grows pretty rapidly, as\nn goes up, and I'm going to",
    "start": "1622250",
    "end": "1630120"
  },
  {
    "text": "show you an example\nin a second. Again, what I want you\nto see is, notice the characteristic of that.",
    "start": "1630120",
    "end": "1635710"
  },
  {
    "text": "That this recursive call had two\nsub-problems of a smaller",
    "start": "1635710",
    "end": "1641240"
  },
  {
    "text": "size, not one. And that makes a\nbig difference. So just to show you how big a\ndifference it makes, let's run",
    "start": "1641240",
    "end": "1646530"
  },
  {
    "start": "1646000",
    "end": "2001000"
  },
  {
    "text": "a couple of numbers. Let's suppose n is 1000,\nand we're running",
    "start": "1646530",
    "end": "1653410"
  },
  {
    "text": "at nanosecond speed. We have seen log, linear,\nquadratic, and exponential.",
    "start": "1653410",
    "end": "1672550"
  },
  {
    "text": "So, again, there could be\nconstants in here, but just to give you a sense of this. If I'm running at nanosecond\nspeed, n, the size of the",
    "start": "1672550",
    "end": "1679850"
  },
  {
    "text": "problem, whatever it is, is\n1000, and I've got a log algorithm, it takes 10\nnanoseconds to complete.",
    "start": "1679850",
    "end": "1688940"
  },
  {
    "text": "If you blink, you miss it. If I'm running a linear\nalgorithm, it'll take one",
    "start": "1688940",
    "end": "1698769"
  },
  {
    "text": "microsecond to complete. If I'm running a quadratic\nalgorithm, it'll take one",
    "start": "1698770",
    "end": "1705570"
  },
  {
    "text": "millisecond to complete. And if I'm running\nan exponential",
    "start": "1705570",
    "end": "1712600"
  },
  {
    "text": "algorithm, any guesses? I hope Washington doesn't take\nthis long to fix my 401k plan.",
    "start": "1712600",
    "end": "1730309"
  },
  {
    "text": "All right? 10 to the 284 years. As Emeril would say, pow!",
    "start": "1730310",
    "end": "1736930"
  },
  {
    "text": "That's a some spicy whatever. All right. Bad jokes aside, what's\nthe point? You see, these classes have\nreally different performance.",
    "start": "1736930",
    "end": "1744700"
  },
  {
    "text": "Now this is a little\nmisleading. These are all really fast, so\njust to give you another set of examples, I'm not\ngoing to do the--",
    "start": "1744700",
    "end": "1750200"
  },
  {
    "text": "If I had a problem where the log\none took ten milliseconds,",
    "start": "1750200",
    "end": "1757600"
  },
  {
    "text": "then the linear one would take\na second, the quadratic one would take 16 minutes.",
    "start": "1757600",
    "end": "1766880"
  },
  {
    "text": "So you can see, even the\nquadratic ones can blow up in a hurry. And this goes back to\nthe point I tried to make last time.",
    "start": "1766880",
    "end": "1773130"
  },
  {
    "text": "Yes, the computers are really\nfast. But the problems can grow much faster than you can\nget a performance boost out of",
    "start": "1773130",
    "end": "1778910"
  },
  {
    "text": "the computer. And you really, wherever\npossible, want to avoid that exponential algorithm, because\nthat's really deadly.",
    "start": "1778910",
    "end": "1784760"
  },
  {
    "text": "Yes. All right.",
    "start": "1784760",
    "end": "1790520"
  },
  {
    "text": "The question is, is there a\npoint where it'll quit. Yeah, when the power goes out,\nor-- so let me not answer it",
    "start": "1790520",
    "end": "1796130"
  },
  {
    "text": "quite so facetiously. We'd be mostly talking\nabout time. In fact, if I ran one of these\nthings, it would just keep crunching away.",
    "start": "1796130",
    "end": "1801930"
  },
  {
    "text": "It will probably quit at some\npoint because of space issues, unless I'm writing an algorithm\nthat is using no",
    "start": "1801930",
    "end": "1807130"
  },
  {
    "text": "additional space. Right. Those things are going to stack\nup, and eventually it's going to run out of space. And that's more likely to\nhappen, but, you know.",
    "start": "1807130",
    "end": "1813730"
  },
  {
    "text": "The algorithm doesn't know that\nit's going to take this long to compute, it's just busy\ncrunching away, trying to",
    "start": "1813730",
    "end": "1819800"
  },
  {
    "text": "see if it can make it happen. OK. Good question, thank you. All right.",
    "start": "1819800",
    "end": "1826010"
  },
  {
    "text": "I want to do one more extended\nexample here., because we've got another piece to do, but I\nwant to capture this, because",
    "start": "1826010",
    "end": "1831670"
  },
  {
    "text": "it's important, so let me\nagain try and say it the following way. I want you to recognize classes\nof algorithms and",
    "start": "1831670",
    "end": "1837590"
  },
  {
    "text": "match what you see in the\nperformance of the algorithm to the complexity of\nthat algorithm.",
    "start": "1837590",
    "end": "1842680"
  },
  {
    "text": "All right? Linear algorithms tend to\nbe things where, at one pass-through, you reduce\nthe problem by a",
    "start": "1842680",
    "end": "1850100"
  },
  {
    "text": "constant amount, by one. If you reduce it by two, it's\ngoing to be the same thing. Where you go from problem of\nsize n to a problem of",
    "start": "1850100",
    "end": "1855399"
  },
  {
    "text": "size n minus 1. A log algorithm typically is one\nwhere you cut the size of",
    "start": "1855400",
    "end": "1861600"
  },
  {
    "text": "the problem down by some\nmultiplicative factor. You reduce it in half. You reduce it in third. All right?",
    "start": "1861600",
    "end": "1867660"
  },
  {
    "text": "Quadratic algorithms\ntend to have this-- I was about to say additive,\nwrong term-- but doubly-nested, triply-nested\nthings are likely to be",
    "start": "1867660",
    "end": "1875630"
  },
  {
    "text": "quadratic or cubic algorithms,\nall right, because you know-- let me not confuse things--\ndouble-loop quadratic algorithm, because you're doing\none set of things and",
    "start": "1875630",
    "end": "1883000"
  },
  {
    "text": "you're doing it some other\nnumber of times, and that's a typical signal that that's\nwhat you have there. OK.",
    "start": "1883000",
    "end": "1888390"
  },
  {
    "text": "And then the exponentials, as\nyou saw is when typically I reduce the problem of one size\ninto two or more sub-problems",
    "start": "1888390",
    "end": "1896200"
  },
  {
    "text": "of a smaller size. And you can imagine this gets\ncomplex and there's lots of interesting things to do to\nlook to the real form, but",
    "start": "1896200",
    "end": "1901580"
  },
  {
    "text": "those are the things that\nyou should see. Now. Two other things, before we\ndo this last example.",
    "start": "1901580",
    "end": "1907790"
  },
  {
    "text": "One is, I'll remind you, what\nwe're interested in is asymptotic growth. How does this thing grow as I\nmake the problem size big?",
    "start": "1907790",
    "end": "1915040"
  },
  {
    "text": "And I'll also remind you, and\nwe're going to see this in the next example, we talked\nabout looking at the worst case behavior.",
    "start": "1915040",
    "end": "1920530"
  },
  {
    "text": "In these cases there's no best\ncase worst case, it's just doing one computation. We're going to see an example\nof that in a second.",
    "start": "1920530",
    "end": "1925570"
  },
  {
    "text": "What we really want to worry\nabout, what's the worst case that happens. And the third thing I want you\nto keep in mind is, remember",
    "start": "1925570",
    "end": "1931410"
  },
  {
    "text": "these are orders of growth. It is certainly possible, for\nexample, that a quadratic",
    "start": "1931410",
    "end": "1937370"
  },
  {
    "text": "algorithm could run faster\nthan a linear algorithm. It depends on what the input is,\nit depends on, you know,",
    "start": "1937370",
    "end": "1944330"
  },
  {
    "text": "what the particular cases are. So it is not the case that,\non every input, a linear algorithm is always\ngoing to be better",
    "start": "1944330",
    "end": "1949590"
  },
  {
    "text": "than a quadratic algorithm. It is just in general that's\ngoing to hold true, and that's what I want you to see.",
    "start": "1949590",
    "end": "1955880"
  },
  {
    "text": "OK. I want to do one last example. I'm going to take a little bit\nmore time on it, because it's",
    "start": "1955880",
    "end": "1961170"
  },
  {
    "text": "going to both reinforce these\nideas, but it's also going to show us how we have to think\nabout what's a primitive",
    "start": "1961170",
    "end": "1966190"
  },
  {
    "text": "step., and in a particular,\nhow do data structures interact with this analysis?",
    "start": "1966190",
    "end": "1971760"
  },
  {
    "text": "Here I've just been running\nintegers, it's pretty simple, but if I have a data structure,\nI'm going to have to worry about that\na little bit more. So let's look at that.",
    "start": "1971760",
    "end": "1977130"
  },
  {
    "text": "And the example I want to look\nat is, suppose I want to search a list that I know is\nsorted, to see if an element's",
    "start": "1977130",
    "end": "1984360"
  },
  {
    "text": "in the list. OK? So the example I'm going to\ndo, I'm going to search a",
    "start": "1984360",
    "end": "1997875"
  },
  {
    "text": "sorted list. All right. If you flip to the second side\nof your handout, you'll see",
    "start": "1997875",
    "end": "2003250"
  },
  {
    "start": "2001000",
    "end": "2436000"
  },
  {
    "text": "that I have a piece of code\nthere, that does this-- let me, ah, I didn't want to\ndo that, let me back up",
    "start": "2003250",
    "end": "2008580"
  },
  {
    "text": "slightly-- this is the algorithm\ncalled search. And let's take a look at it.",
    "start": "2008580",
    "end": "2015020"
  },
  {
    "text": "OK? Basic idea, before I even look\nat the code, is pretty simple. If I've got a list that is\nsorted, in let's call it, just",
    "start": "2015020",
    "end": "2021960"
  },
  {
    "text": "in increasing order, and I\nhaven't said what's in the list, could be numbers, could\nbe other things, for now, we're going to just assume\nthey're integers. The easy thing to do would be\nthe following: start at the",
    "start": "2021960",
    "end": "2030140"
  },
  {
    "text": "front end of the list, check\nthe first element. If it's the thing I'm looking\nfor, I'm done. It's there. If not, move on to\nthe next element.",
    "start": "2030140",
    "end": "2037010"
  },
  {
    "text": "And keep doing that. But if, at any point, I get to\na place in the list where the thing I'm looking for is smaller\nthan the element in",
    "start": "2037010",
    "end": "2044240"
  },
  {
    "text": "the list, I know everything else\nin the rest of the list has to be bigger than that,\nI don't have to bother looking anymore.",
    "start": "2044240",
    "end": "2049710"
  },
  {
    "text": "It says the element's\nnot there. I can just stop. OK. So that's what this piece\nof code does here. Right.?",
    "start": "2049710",
    "end": "2055389"
  },
  {
    "text": "I'm going to set up a variable\nto say, what's the answer I want to return, is\nit there or not. Initially it's got that\nfunny value none.",
    "start": "2055390",
    "end": "2062200"
  },
  {
    "text": "I'm going to set up an index,\nwhich is going to tell me where to look, starting at the\nfirst part of the list, right?",
    "start": "2062200",
    "end": "2069990"
  },
  {
    "text": "And then, when I got-- I'm also going to count how many\ncomparisons I do, just so I can see how much work\nI do here, and then notice what it does.",
    "start": "2069990",
    "end": "2075010"
  },
  {
    "text": "It says while the index is\nsmaller than the size of the",
    "start": "2075010",
    "end": "2080330"
  },
  {
    "text": "list, I'm not at the end of the\nlist, and I don't have an answer yet, check.",
    "start": "2080330",
    "end": "2085960"
  },
  {
    "text": "So I'm going to check to see\nif-- really can't read that thing, let me do it this way--\nright, I'm going to increase",
    "start": "2085960",
    "end": "2091250"
  },
  {
    "text": "the number of compares, and I'm\ngoing to check to say, is the thing I'm looking for at\nthe i'th spot in the list?",
    "start": "2091250",
    "end": "2097250"
  },
  {
    "text": "Right, so s of i saying, given\nthe list, look at the i'th element, is it the same thing? If it is, OK.",
    "start": "2097250",
    "end": "2104700"
  },
  {
    "text": "Set the answer to true. Which means, next time through\nthe loop, that's going to pop",
    "start": "2104700",
    "end": "2109900"
  },
  {
    "text": "out and return an answer. If it's not, then check to see,\nis it smaller than that",
    "start": "2109900",
    "end": "2117490"
  },
  {
    "text": "element in the current\nspot of the list? And if that's true, it says\nagain, everything else in the list has to be bigger than this,\nthing can't possibly be",
    "start": "2117490",
    "end": "2124599"
  },
  {
    "text": "in the list, I'm taking\nadvantage of the ordering, I can set the answer to false,\nchange i to go to the next",
    "start": "2124600",
    "end": "2129880"
  },
  {
    "text": "one, and next time through the\nloop, I'm going to pop out and print it out. OK?",
    "start": "2129880",
    "end": "2136799"
  },
  {
    "text": "Right. Order of growth here. What do you think?",
    "start": "2136800",
    "end": "2146650"
  },
  {
    "text": "Even with these glasses on,\nI can see no hands up, any suggestions? Somebody help me out. What do you think the order\nof growth is here? I've got a list, walk you\nthrough it an element at a",
    "start": "2146650",
    "end": "2158300"
  },
  {
    "text": "time, do I look at each\nelement of the list more than once? Don't think so, right?",
    "start": "2158300",
    "end": "2164599"
  },
  {
    "text": "So, what does this suggest? Sorry? Constant.",
    "start": "2164600",
    "end": "2170420"
  },
  {
    "text": "Ooh, constant says, no matter\nwhat the length of the list is, I'm going to take the\nsame amount of time.",
    "start": "2170420",
    "end": "2176630"
  },
  {
    "text": "And I don't think that's\ntrue, right? If I have a list ten times\nlonger, it's going to take me more time, so-- not a\nbad guess, I'm still",
    "start": "2176630",
    "end": "2183890"
  },
  {
    "text": "reward you, thank you. Somebody else.",
    "start": "2183890",
    "end": "2189079"
  },
  {
    "text": "Yeah. Linear. Why? You're right, by the\nway, but why?",
    "start": "2189080",
    "end": "2199290"
  },
  {
    "text": "Yeah. All right, so the answer was\nit's linear, which is absolutely right. Although for a reason\nwe're going to",
    "start": "2199290",
    "end": "2204730"
  },
  {
    "text": "come back in a second. Oh, thank you, I hope your\nfriends help you out with that, thank you.",
    "start": "2204730",
    "end": "2209920"
  },
  {
    "text": "Right? You can see that this\nought to be linear, because what am I doing? I'm walking down the list. So\none of the things I didn't",
    "start": "2209920",
    "end": "2216220"
  },
  {
    "text": "say, it's sort of implicit here,\nis what is the thing I measuring the size of\nthe problem in? What's the size of the list?",
    "start": "2216220",
    "end": "2221450"
  },
  {
    "text": "And if I'm walking down the\nlist, this is probably order",
    "start": "2221450",
    "end": "2228230"
  },
  {
    "text": "of the length of the list s,\nbecause I'm looking at each element once. Now you might say,\nwait a minute.",
    "start": "2228230",
    "end": "2234839"
  },
  {
    "text": "Thing's ordered, if I stop part\nway through and I throw away half the list, doesn't\nthat help me? And the answer is yes, but it\ndoesn't change the complexity.",
    "start": "2234840",
    "end": "2242430"
  },
  {
    "text": "Because what did we say? We're measuring the\nworst case. The worst case here is, the\nthings not in the list, in",
    "start": "2242430",
    "end": "2248299"
  },
  {
    "text": "which case I've got to go all\nthe way through the list to get to the end. OK.",
    "start": "2248300",
    "end": "2253390"
  },
  {
    "text": "Now, having said that, and I've\nactually got a subtlety I'm going to come back to in a\nsecond, there ought to be a",
    "start": "2253390",
    "end": "2259500"
  },
  {
    "text": "better way to do this. OK? And here's the better\nway to think about.",
    "start": "2259500",
    "end": "2267180"
  },
  {
    "text": "I'll just draw out sort of a\nfunny representation of a list. These are sort of the\ncells, if you like, in memory",
    "start": "2267180",
    "end": "2275779"
  },
  {
    "text": "that are holding the elements\nof the list. What we've been saying is, I start\nhere and look. If it's there, I'm done.",
    "start": "2275780",
    "end": "2280900"
  },
  {
    "text": "If not, I go there. If it's there, I'm done, if not,\nI keep walking down, and I only stop when I get to a\nplace where the element I'm",
    "start": "2280900",
    "end": "2287240"
  },
  {
    "text": "looking for is smaller than\nthe value in the list., in which case I know the\nrest of this is too big and I can stop.",
    "start": "2287240",
    "end": "2293650"
  },
  {
    "text": "But I still have to go\nthrough the list. There's a better way to think\nabout this, and in fact Professor Guttag has already\nhinted at this in the last",
    "start": "2293650",
    "end": "2300600"
  },
  {
    "text": "couple of lectures. The better way to think about\nthis is, suppose, rather than starting at the beginning, I\njust grabbed some spot at",
    "start": "2300600",
    "end": "2306900"
  },
  {
    "text": "random, like this one. And I look at that value.",
    "start": "2306900",
    "end": "2312119"
  },
  {
    "text": "If it's the value I'm looking\nfor, boy, I ought to go to Vegas, I'm really lucky. And I'm done, right?",
    "start": "2312120",
    "end": "2317839"
  },
  {
    "text": "If not, what could I do? Well, I could look at the value\nhere, and compare it to the value I'm trying to find,\nand say the following; if the",
    "start": "2317840",
    "end": "2325690"
  },
  {
    "text": "value I'm looking for is bigger\nthan this value, where",
    "start": "2325690",
    "end": "2331010"
  },
  {
    "text": "do I need to look? Just here. All right?",
    "start": "2331010",
    "end": "2337940"
  },
  {
    "text": "Can't possibly be there,\nbecause I know this thing is over. On the other hand, if the value\nI'm looking for here--",
    "start": "2337940",
    "end": "2343460"
  },
  {
    "text": "sorry, the value I'm looking for\nis smaller than the value I see here, I just need\nto look here.",
    "start": "2343460",
    "end": "2350350"
  },
  {
    "text": "All right? Having done that, I could do the\nsame thing, so I suppose I",
    "start": "2350350",
    "end": "2357030"
  },
  {
    "text": "take this branch, I can pick a\nspot like, say, this one, and look there. Because there, I'm done,\nif not, I'm either",
    "start": "2357030",
    "end": "2363180"
  },
  {
    "text": "looking here or there. And I keep cutting\nthe problem down.",
    "start": "2363180",
    "end": "2371350"
  },
  {
    "text": "OK. Now, having said that, where\nshould I pick to look in this list?",
    "start": "2371350",
    "end": "2379220"
  },
  {
    "text": "I'm sorry? Halfway. Why? You're right, but why?",
    "start": "2379220",
    "end": "2390060"
  },
  {
    "text": "Yeah. So the answer, in case you\ndidn't hear it, was, again, if I'm a gambling person, I could\nstart like a way down here.",
    "start": "2390060",
    "end": "2395800"
  },
  {
    "text": "All right? If I'm gambling, I'm saying,\ngee, if I'm really lucky, it'll be only on this side, and\nI've got a little bit of",
    "start": "2395800",
    "end": "2401220"
  },
  {
    "text": "work to do, but if I'm unlucky,\nI'm scrawed, the past pluperfect of screwed, OK.,\nor a Boston fish.",
    "start": "2401220",
    "end": "2407690"
  },
  {
    "text": "I'll look at the rest of that\nbig chunk of the list, and that's a pain. So halfway is the right thing\nto do, because at each step,",
    "start": "2407690",
    "end": "2415480"
  },
  {
    "text": "I'm guaranteed to throw away at\nleast half the list. Right? And that's nice.",
    "start": "2415480",
    "end": "2420640"
  },
  {
    "text": "OK. What would you guess the order\nof growth here is? Yeah.",
    "start": "2420640",
    "end": "2426360"
  },
  {
    "text": "Why? Good. Exactly. Right? Again, if you didn't hear it,\nthe answer was it's log.",
    "start": "2426360",
    "end": "2433569"
  },
  {
    "text": "Because I'm cutting down the\nproblem in half at each time. You're right, but there's\nsomething we have to do to add",
    "start": "2433570",
    "end": "2438890"
  },
  {
    "start": "2436000",
    "end": "2736000"
  },
  {
    "text": "to that, and that's the last\nthing I want to pick up on. OK. Let's look at the code--\nactually, let's test this out first before we do it.",
    "start": "2438890",
    "end": "2445090"
  },
  {
    "text": "So I've added, as Professor\nGuttag did-- ah, should have said it this way, let's write\nthe code for it first, sorry",
    "start": "2445090",
    "end": "2451130"
  },
  {
    "text": "about that-- OK, I'm going to write a little\nthing called b search. I'm going to call it down here\nwith search, which is simply",
    "start": "2451130",
    "end": "2457680"
  },
  {
    "text": "going to call it, and then\nprint an answer out. In binary search-- ah, there's\nthat wonderful phrase, this is",
    "start": "2457680",
    "end": "2463240"
  },
  {
    "text": "called a version of binary\nsearch, just like you saw bin-- or bi-section methods,\nwhen we were doing numerical things-- in binary search, I\nneed to keep track of the",
    "start": "2463240",
    "end": "2471090"
  },
  {
    "text": "starting point and the\nending point of the list I'm looking at. Initially, it's the beginning\nand the end of it.",
    "start": "2471090",
    "end": "2476730"
  },
  {
    "text": "And when I do this test, what I\nwant to do, is say I'm going to pick the middle spot, and\ndepending on the test, if I",
    "start": "2476730",
    "end": "2481780"
  },
  {
    "text": "know it's in the upper half, I'm\ngoing to set my start at the mid point and the end stays\nthe same, if it's in the",
    "start": "2481780",
    "end": "2487710"
  },
  {
    "text": "front half I'm going to keep\nthe front the same and I'm going to change the endpoint. And you can see that\nin this code here.",
    "start": "2487710",
    "end": "2493350"
  },
  {
    "text": "Right? What does it say to do? It says, well I'm going to print\nout first and last, just so you can see it, and then I\nsay, gee, if last minus first",
    "start": "2493350",
    "end": "2501240"
  },
  {
    "text": "is less than 2, that is, if\nthere's no more than two elements left in the list, then\nI can just check those",
    "start": "2501240",
    "end": "2506710"
  },
  {
    "text": "two elements, and return\nthe answer. Otherwise, we find\nthe midpoint, and",
    "start": "2506710",
    "end": "2512700"
  },
  {
    "text": "notice what it does. First, it's pointing to the\nbeginning of the list, which initially might be down here at\n0 but after a while, might",
    "start": "2512700",
    "end": "2518160"
  },
  {
    "text": "be part way through. And to that, I simply\nadd a halfway",
    "start": "2518160",
    "end": "2523390"
  },
  {
    "text": "point, and then I check. If it's at that point, I'm done,\nif not, if it's greater",
    "start": "2523390",
    "end": "2528880"
  },
  {
    "text": "than the value I'm looking\nfor, I either take one half or the other.",
    "start": "2528880",
    "end": "2535180"
  },
  {
    "text": "OK. You can see that thing is\ncutting down the problem in half each time, which is good,\nbut there's one more thing I need to deal with. So let's step through this\nwith a little more care.",
    "start": "2535180",
    "end": "2542250"
  },
  {
    "text": "And I keep saying, before\nwe do it, let's just actually try it out. So I'm going to go over\nhere, and I'm going to type test search--",
    "start": "2542250",
    "end": "2549590"
  },
  {
    "text": "I can type-- and if you look at\nyour handout, it's just a sequence of tests that\nI'm going to do.",
    "start": "2549590",
    "end": "2556130"
  },
  {
    "text": "OK. So initially, I'm going to set\nup the list to be the first million integers. Yeah, it's kind of simple, but\nit gives me an ordered list of",
    "start": "2556130",
    "end": "2563140"
  },
  {
    "text": "these things, And let's run it. OK. So I'm first going to look for\nsomething that's not in the",
    "start": "2563140",
    "end": "2568310"
  },
  {
    "text": "list, I'm going to see, is minus\n1 in this list, so it's going to be at the far end,\nand if I do that in the basic case, bam.",
    "start": "2568310",
    "end": "2574510"
  },
  {
    "text": "Done. All right? The basic, that primary search,\nbecause it looks at the first element, says\nit's smaller than everything else, I'm done.",
    "start": "2574510",
    "end": "2580849"
  },
  {
    "text": "If I look in the binary case,\ntakes a little longer.",
    "start": "2580850",
    "end": "2586790"
  },
  {
    "text": "Notice the printout here. The printout is simply telling\nme, what are the ranges of the search. And you can see it wrapping its\nway down, cutting in half",
    "start": "2586790",
    "end": "2595030"
  },
  {
    "text": "at each time until it\ngets there, but it takes a while to find. All right. Let's search to see though now\nif a million is in this list,",
    "start": "2595030",
    "end": "2603220"
  },
  {
    "text": "or 10 million, whichever way\nI did this, it must be a million, right? In the basic case, oh,\ntook a little while.",
    "start": "2603220",
    "end": "2611150"
  },
  {
    "text": "Right, in the binary\ncase, bam. In fact, it took the same number\nof steps as it did in",
    "start": "2611150",
    "end": "2617280"
  },
  {
    "text": "the other case, because\neach time I'm cutting it down by a half. OK. That's nice. Now, let's do the following;\nif you look right here, I'm",
    "start": "2617280",
    "end": "2623930"
  },
  {
    "text": "going to set this now to-- I'm going to change my range\nto 10 million, I'm going to first say, gee, is a\nmillion in there,",
    "start": "2623930",
    "end": "2631070"
  },
  {
    "text": "using the basic search. It is.",
    "start": "2631070",
    "end": "2636190"
  },
  {
    "text": "Now, I'm going to say, is 10\nmillion in this, using the basic search.",
    "start": "2636190",
    "end": "2641310"
  },
  {
    "text": "We may test your hypothesis,\nabout how long does it take, if I time this really well, I\nought to be able to end when",
    "start": "2641310",
    "end": "2646579"
  },
  {
    "text": "it finds it, which should\nbe right about now. That was pure luck.",
    "start": "2646580",
    "end": "2653080"
  },
  {
    "text": "But notice how much\nlonger it took. On the other hand, watch what\nhappens with binary. Is the partway one there?",
    "start": "2653080",
    "end": "2658720"
  },
  {
    "text": "Yeah. Is the last one there? Wow. I think it took one more step.",
    "start": "2658720",
    "end": "2665480"
  },
  {
    "text": "Man, that's exactly what\nlogs should do, right? I make the problem ten times\nbigger, it takes one more step to do it.",
    "start": "2665480",
    "end": "2671680"
  },
  {
    "text": "Whereas in the linear case, I\nmake it ten times bigger, it takes ten times longer to run. OK.",
    "start": "2671680",
    "end": "2678480"
  },
  {
    "text": "So I keep saying I've got one\nthing hanging, it's the last thing I want to do, but I wanted\nyou see how much of a difference this makes. But let's look a little more\ncarefully at the code for",
    "start": "2678480",
    "end": "2686030"
  },
  {
    "text": "binary search-- for search 1. What's the complexity\nof search 1? Well, you might say it's\nconstant, right?",
    "start": "2686030",
    "end": "2692000"
  },
  {
    "text": "It's only got two things to do,\nexcept what it really says is, that the complexity of\nsearch 1 is the same as the complexity of b search,\nbecause that's",
    "start": "2692000",
    "end": "2698060"
  },
  {
    "text": "the call it's doing. So let's look at b search. All right? We've got the code for\nb search up there.",
    "start": "2698060",
    "end": "2705600"
  },
  {
    "text": "First step, constant, right? Nothing to do. Second step, hm.",
    "start": "2705600",
    "end": "2713680"
  },
  {
    "text": "That also looks constant,\nyou think? Oh but wait a minute.",
    "start": "2713680",
    "end": "2719280"
  },
  {
    "text": "I'm accessing s. I'm accessing a list. How long\ndoes it take for me to get the",
    "start": "2719280",
    "end": "2725290"
  },
  {
    "text": "nth element of a list? That might not be a\nprimitive step.",
    "start": "2725290",
    "end": "2731610"
  },
  {
    "text": "And in fact, it depends\non how I store a list. So, for example, in this case,\nI had lists that I knew were",
    "start": "2731610",
    "end": "2742619"
  },
  {
    "text": "made out of integers. As a consequence, I have\na list of ints.",
    "start": "2742620",
    "end": "2750820"
  },
  {
    "text": "I might know, for example,\nthat it takes four memory chunks to represent one\nint, just for example.",
    "start": "2750820",
    "end": "2756349"
  },
  {
    "text": "And to find the i'th element,\nI'm simply going to take the starting point, that point at\nthe beginning of memory where",
    "start": "2756350",
    "end": "2764240"
  },
  {
    "text": "the list is, plus 4 times i,\nthat would tell me how many",
    "start": "2764240",
    "end": "2770850"
  },
  {
    "text": "units over to go, and that's the\nmemory location I want to look for the i'th element\nof the list. And remember, we said we're\ngoing to assume a random",
    "start": "2770850",
    "end": "2777890"
  },
  {
    "text": "access model, which says, as\nlong as I know the location, it takes a constant amount of\ntime to get to that point.",
    "start": "2777890",
    "end": "2784680"
  },
  {
    "text": "So if the-- if I knew the\nlists were made of just integers, it'd be really\neasy to figure it out.",
    "start": "2784680",
    "end": "2790100"
  },
  {
    "text": "Another way of saying it is,\nthis takes constant amount of time to figure out where to\nlook, it takes constant amount of time to get there, so in fact\nI could treat indexing",
    "start": "2790100",
    "end": "2797860"
  },
  {
    "text": "into a list as being\na basic operation. But we know lists can be\ncomposed of anything.",
    "start": "2797860",
    "end": "2804660"
  },
  {
    "text": "Could be ints, could be floats,\ncould be a combination of things, some ints, some\nfloats, some lists, some strings, some lists of\nlists, whatever.",
    "start": "2804660",
    "end": "2811410"
  },
  {
    "text": "And in that case, in general\nlists, I need to figure out",
    "start": "2811410",
    "end": "2818970"
  },
  {
    "text": "what's the access time. And here I've got a choice. OK, one of the ways I could\ndo would be the following.",
    "start": "2818970",
    "end": "2825660"
  },
  {
    "text": "I could have a pointer to the\nbeginning of the list where the first element here is the\nactual value, and this would",
    "start": "2825660",
    "end": "2837550"
  },
  {
    "text": "point to the next element in\nthe list. Or another way of",
    "start": "2837550",
    "end": "2843810"
  },
  {
    "text": "saying it is, the first part\nof the cell could be some encoding of how many cells do\nI need to have to store the",
    "start": "2843810",
    "end": "2849070"
  },
  {
    "text": "value, and then I've got some\nway of telling me where to get the next element of the list.\nAnd this would point to value,",
    "start": "2849070",
    "end": "2855319"
  },
  {
    "text": "and this would point off\nsomeplace in memory.",
    "start": "2855320",
    "end": "2862730"
  },
  {
    "text": "Here's the problem with that\ntechnique, and by the way, a number of programming\nlanguages use this, including Lisp. The problem with that technique,\nwhile it's very",
    "start": "2862730",
    "end": "2868630"
  },
  {
    "text": "general, is how long does it\ntake me to find the i'th element of the list?",
    "start": "2868630",
    "end": "2874240"
  },
  {
    "text": "Oh fudge knuckle. OK. I've got to go to the first\nplace, figure out how far over to skip, go to the next place,\nfigure out how far over to",
    "start": "2874240",
    "end": "2881030"
  },
  {
    "text": "skip, eventually I'll\nbe out the door. I've got to count my way down,\nwhich means that the access would be linear in the length\nof the list to find the i'th",
    "start": "2881030",
    "end": "2889120"
  },
  {
    "text": "element of the list, and that's\ngoing to increase the complexity. There's an alternative, which\nis the last point I want to",
    "start": "2889120",
    "end": "2895290"
  },
  {
    "text": "make, which is instead what I\ncould do, I should have said",
    "start": "2895290",
    "end": "2902180"
  },
  {
    "text": "these things are called linked\nlists, we'll come back to those, another way to do it,\nis to have the start of the",
    "start": "2902180",
    "end": "2909540"
  },
  {
    "text": "list be at some point in memory,\nand to have each one",
    "start": "2909540",
    "end": "2916480"
  },
  {
    "text": "of the successive cells\nin memory point off to the actual value. Which may take up some arbitrary\namount of memory.",
    "start": "2916480",
    "end": "2923500"
  },
  {
    "text": "In that case, I'm back\nto this problem. And as a consequence, access\ntime in the list is constant,",
    "start": "2923500",
    "end": "2931569"
  },
  {
    "text": "which is what I want. Now, to my knowledge, most\nimplementations of Python use",
    "start": "2931570",
    "end": "2939010"
  },
  {
    "text": "this way of storing lists,\nwhereas Lisp and Scheme do not. The message I'm trying to get\nto here, because I'm running",
    "start": "2939010",
    "end": "2945950"
  },
  {
    "text": "you right up against time, is\nI have to be careful about what's a primitive step.",
    "start": "2945950",
    "end": "2951660"
  },
  {
    "text": "With this, if I can assume\nthat accessing the i'th element of a list is constant,\nthen you can't see that the",
    "start": "2951660",
    "end": "2957670"
  },
  {
    "text": "rest of that analysis looks just\nlike the log analysis I did before, and each step, no\nmatter which branch I'm",
    "start": "2957670",
    "end": "2963590"
  },
  {
    "text": "taking, I'm cutting the\nproblem down in half. And as a consequence,\nit is log. And the last piece of this, is\nas said, I have to make sure I",
    "start": "2963590",
    "end": "2975920"
  },
  {
    "text": "know what my primitive elements\nare, in terms of operations.",
    "start": "2975920",
    "end": "2981089"
  },
  {
    "text": "Summary: I want you to recognize\ndifferent classes of algorithms. I'm not going\nto repeat them.",
    "start": "2981090",
    "end": "2986359"
  },
  {
    "text": "We've seen log, we've seen\nlinear, we've seen quadratic, we've seen exponential. One of the things you should\nbegin to do, is to recognize",
    "start": "2986360",
    "end": "2993510"
  },
  {
    "text": "what identifies those classes of\nalgorithms, so you can map your problems into\nthose ranges.",
    "start": "2993510",
    "end": "2999420"
  },
  {
    "text": "And with that, good\nluck on Thursday. ",
    "start": "2999420",
    "end": "3002601"
  }
]