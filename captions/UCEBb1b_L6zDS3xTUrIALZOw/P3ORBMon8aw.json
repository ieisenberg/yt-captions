[
  {
    "text": " The following\ncontent is provided under a Creative\nCommons license. Your support will help MIT\nOpenCourseWare continue",
    "start": "0",
    "end": "6870"
  },
  {
    "text": "to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6870",
    "end": "13330"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13330",
    "end": "27210"
  },
  {
    "text": "PROFESSOR: OK, so welcome\nback to computational systems",
    "start": "27210",
    "end": "32940"
  },
  {
    "text": "biology, I'm David Gifford. I'm delighted to be with\nyou here here today.",
    "start": "32940",
    "end": "38100"
  },
  {
    "text": "And today we're going to be\ntalking about a topic that is central to modern high\nthroughput biology, which",
    "start": "38100",
    "end": "43710"
  },
  {
    "text": "is understanding how to do\nshort read alignment, sometimes called read mapping.",
    "start": "43710",
    "end": "49600"
  },
  {
    "text": "Now it's very important\nto me that you understand what I'm about to\nsay today, and so I'm",
    "start": "49600",
    "end": "55240"
  },
  {
    "text": "hopeful that you'll be\nuninhibited to raise your hand and ask questions about the\nfine points in today's lecture",
    "start": "55240",
    "end": "61270"
  },
  {
    "text": "if you have any, because I'd\nbe totally delighted to answer any questions and we\nhave enough time today",
    "start": "61270",
    "end": "67700"
  },
  {
    "text": "that we can spend time looking\nat one aspect of this problem and understand it thoroughly.",
    "start": "67700",
    "end": "74690"
  },
  {
    "text": "An associated topic is the\nquestion library complexity. How many people have heard of\nsequencing libraries before?",
    "start": "74690",
    "end": "81035"
  },
  {
    "text": "Let's see a show of hands. OK, how many people have heard\nof read alignment before, read",
    "start": "81035",
    "end": "86179"
  },
  {
    "text": "mapping? OK, great, fantastic. Let's start with\nwhat we're going",
    "start": "86180",
    "end": "92287"
  },
  {
    "text": "to be talking about today. We're going to first begin\ntalking about what a sequencing library is and what we\nmean by library complexity.",
    "start": "92287",
    "end": "99440"
  },
  {
    "text": "We'll then turn to what has been\ncalled a full text minute size index, sometimes called a\nburrows Wheeler transform",
    "start": "99440",
    "end": "107010"
  },
  {
    "text": "index, a BWT index,\nan FM index, but this is at the center of most\nmodern computational biology",
    "start": "107010",
    "end": "114670"
  },
  {
    "text": "algorithms for processing high\nthroughput sequencing data. And then we'll turn how\nto use that type of index",
    "start": "114670",
    "end": "122159"
  },
  {
    "text": "for read alignment. So let's start now with what\na sequencing library Is.",
    "start": "122160",
    "end": "127660"
  },
  {
    "text": "Let's just say that\nyou have a DNA sample, we'll be talking about various\nways of producing said samples",
    "start": "127660",
    "end": "134090"
  },
  {
    "text": "throughout the term. But we're going\nto assume that we have a bunch of\ndifferent DNA molecules.",
    "start": "134090",
    "end": "139870"
  },
  {
    "text": "And I'll illustrate the\ndifferent molecules here",
    "start": "139870",
    "end": "145140"
  },
  {
    "text": "in different colors. And we have three different\ntypes of molecules here. Some molecules are duplicated,\nbecause as you know,",
    "start": "145140",
    "end": "151510"
  },
  {
    "text": "typically, we're preparing DNA\nfrom an experiment where there are many cells and we can get\ncopies of DNA from those cells",
    "start": "151510",
    "end": "159549"
  },
  {
    "text": "or the DNA could\nbe amplified using PCR or some other technique. So we have this\ncollection of molecules,",
    "start": "159550",
    "end": "166970"
  },
  {
    "text": "and to make a library,\nwe're going to process it. And one of the\nthings that we'll do when we process the\nlibrary is we'll",
    "start": "166970",
    "end": "172360"
  },
  {
    "text": "put sequencing adapters on. These are short DNA\nsequences that we put on to the end\nof the molecules",
    "start": "172360",
    "end": "178760"
  },
  {
    "text": "to enable them to\nhave defined sequences at the ends which\npermits sequencing.",
    "start": "178760",
    "end": "184250"
  },
  {
    "text": " Now, if somebody hands you\na tube of DNA like this,",
    "start": "184250",
    "end": "190459"
  },
  {
    "text": "there are a couple\nquestions you could ask. You could check the DNA\nconcentration to find out how DNA is there,\nyou could run a gel",
    "start": "190459",
    "end": "196660"
  },
  {
    "text": "to look at the size\nof the fragments that you're sequencing. We'll be returning\nto that later, but these are typically\ncalled the insert sizes",
    "start": "196660",
    "end": "203787"
  },
  {
    "text": "of the library that\nyou're sequencing, the total length of the\nDNA excluding the adapters.",
    "start": "203787",
    "end": "210549"
  },
  {
    "text": "But we could also ask questions\nabout how complex this library is, because it's possible to run\nexperiments where you produce",
    "start": "210550",
    "end": "218410"
  },
  {
    "text": "libraries that are\nnot very complex, where they don't have very many\ndifferent types of molecules. Now that typically is a\nfailure of the experiment.",
    "start": "218410",
    "end": "225870"
  },
  {
    "text": "So an important part\nof quality control is characterizing the\nlibrary complexity",
    "start": "225870",
    "end": "230970"
  },
  {
    "text": "where we want to figure out\nhere complexity is equal to 3. There are three different\ntypes of molecules.",
    "start": "230970",
    "end": "237700"
  },
  {
    "text": "And we sample these molecules. And when we sample them, we get\na bunch of DNA sequence reads.",
    "start": "237700",
    "end": "246370"
  },
  {
    "text": "And typically the number\nof reads that we get is larger than the\ncomplexity of the library.",
    "start": "246370",
    "end": "253720"
  },
  {
    "text": "Here we have a total\nof 12 different reads. And when we sequence a library,\nwe're sampling from it.",
    "start": "253720",
    "end": "262990"
  },
  {
    "text": "And so the probability that we\nget any one particular molecule is going to be roughly\nspeaking equal to 1",
    "start": "262990",
    "end": "271310"
  },
  {
    "text": "over c, which is the complexity.  And thus, we could use\nthe binomial distribution",
    "start": "271310",
    "end": "277731"
  },
  {
    "text": "to figure out the\nlikelihood that we had exactly four of\nthese type one molecules.",
    "start": "277731",
    "end": "284200"
  },
  {
    "text": "However, as n the number\nof sequencing reads grows to be very large, typical\nnumbers are a hundred million",
    "start": "284200",
    "end": "290350"
  },
  {
    "text": "different reads,\nthe binomial becomes cumbersome to work with. And so we typically are\ngoing to characterize",
    "start": "290350",
    "end": "297720"
  },
  {
    "text": "this kind of selection\nprocess with a different kind of distribution.",
    "start": "297720",
    "end": "303440"
  },
  {
    "text": "So one idea is to\nuse a Poisson, where we say that the\nrate of sequencing",
    "start": "303440",
    "end": "308840"
  },
  {
    "text": "is going to be n over c. And we can see that\nhere shown on the slide",
    "start": "308840",
    "end": "318730"
  },
  {
    "text": "above is the same\nprocess where we have the ligation\nof the adapters. We have a library and we have\nreads coming from the library.",
    "start": "318730",
    "end": "326294"
  },
  {
    "text": " We have a characterized\nlibrary complexity here,",
    "start": "326295",
    "end": "332490"
  },
  {
    "text": "there are four different\ntypes of molecules. And the modeling\napproach is that assuming",
    "start": "332490",
    "end": "338490"
  },
  {
    "text": "that we have c different\nunique molecules, the probability that\nwe'll get any one of them when we're doing the\nsequencing is 1 over c.",
    "start": "338490",
    "end": "346370"
  },
  {
    "text": "And if we do end\nsequencing reads, we can find out the\nprobability that we'll",
    "start": "346370",
    "end": "352129"
  },
  {
    "text": "get a certain number of\neach type of molecule. Let's just stick with the\nfirst one to start, OK?",
    "start": "352130",
    "end": "359110"
  },
  {
    "text": "Now part of the challenge\nin analyzing sequencing data is that you don't see\nwhat you don't sequence.",
    "start": "359110",
    "end": "367730"
  },
  {
    "text": "So things that actually occur\n0 times in your sequencing data",
    "start": "367730",
    "end": "372760"
  },
  {
    "text": "still may be present\nin the library. And what we would like to do\nis from the observed sequencing",
    "start": "372760",
    "end": "377940"
  },
  {
    "text": "data, estimate the\nlibrary complexity. So we have all of\nthe sequencing data,",
    "start": "377940",
    "end": "383912"
  },
  {
    "text": "we just don't know how\nmany different molecules there are over here. So one way to do\nwith this is to say",
    "start": "383912",
    "end": "390620"
  },
  {
    "text": "that let us suppose that we\nmake a histogram of the number of times we see\ndistinct molecules",
    "start": "390620",
    "end": "398130"
  },
  {
    "text": "and we're going to say that\nwe can observe molecules that are sequenced or appear l\ntimes up through r times.",
    "start": "398130",
    "end": "405569"
  },
  {
    "text": "So we actually can\ncreate a version of the distribution\nthat characterizes",
    "start": "405570",
    "end": "413380"
  },
  {
    "text": "just a part of\nwhat we're seeing. So if we do this, we can\nbuild a Poisson model",
    "start": "413380",
    "end": "422080"
  },
  {
    "text": "and we can estimate lambda\nfrom what we can observe. We don't get to observe\nthings we don't see.",
    "start": "422080",
    "end": "428400"
  },
  {
    "text": "So for sure, we know\nwe can't observe the things that are\nsequenced 0 times. But for the things that are\nsequenced at least one time,",
    "start": "428400",
    "end": "436350"
  },
  {
    "text": "we can build an\nestimate of lambda. And from that\nestimate of lambda, we can build an estimate of C.",
    "start": "436350",
    "end": "445900"
  },
  {
    "text": "So one way to look\nat this is that if we",
    "start": "445900",
    "end": "451810"
  },
  {
    "text": "look at the total number\nof unique molecules that we sequence, which is\nequal to m, then the probability",
    "start": "451810",
    "end": "459530"
  },
  {
    "text": "that we observe between l\nand r occurrences of a given",
    "start": "459530",
    "end": "465090"
  },
  {
    "text": "individual sequence\ntimes c is going to be equal to the total\nnumber of unique molecules",
    "start": "465090",
    "end": "471890"
  },
  {
    "text": "that we observe. Another way to look at this\nis the very bottom equation",
    "start": "471890",
    "end": "477930"
  },
  {
    "text": "where we note that if we\nlook at the total complexity of the library and we multiply\nit by 1 minus the probability",
    "start": "477930",
    "end": "487280"
  },
  {
    "text": "that we don't observe\ncertain molecules, that will give an estimate\nof the total number of unique molecules\nthat we do see.",
    "start": "487280",
    "end": "494770"
  },
  {
    "text": "And thus we can\nmanipulate that to come up with an estimate\nof the complexity. Are there any questions about\nthe details of this so far?",
    "start": "494770",
    "end": "502270"
  },
  {
    "text": " OK, so this is a\nvery simple model",
    "start": "502270",
    "end": "507650"
  },
  {
    "text": "for estimating the\ncomplexity of a library based upon looking at the\ndistribution of reads",
    "start": "507650",
    "end": "512719"
  },
  {
    "text": "that we actually observe for\nquality control purposes. And let us suppose that\nwe apply this to thousands",
    "start": "512720",
    "end": "520928"
  },
  {
    "text": "genomes data, which is\npublic data on human. And suppose we want to test\nwhether this model works",
    "start": "520929",
    "end": "527889"
  },
  {
    "text": "or not, so what\nwe're going to do is we're going to estimate\nthe library complexity from 10 percent of the sequencing\nreads, so we'll",
    "start": "527890",
    "end": "533810"
  },
  {
    "text": "pick 10 percent of the reads\nof an individual at random, we'll estimate the\ncomplexity of the library,",
    "start": "533810",
    "end": "540280"
  },
  {
    "text": "and then we'll also take all\nof the region the individual and estimate the complexity.",
    "start": "540280",
    "end": "545910"
  },
  {
    "text": "And if our estimator\nis pretty good, we should get about\nthe same number, from 10 percent of the reads\nand from all of the reads.",
    "start": "545910",
    "end": "552080"
  },
  {
    "text": "Will people go along with that? Think that seems reasonable?",
    "start": "552080",
    "end": "557880"
  },
  {
    "text": "OK, so we do that. And this is what we get. And it's hard to see\nthe diagonal line here,",
    "start": "557880",
    "end": "565000"
  },
  {
    "text": "but there's a big oops here. And the big oops is that if we\nestimate the library complexity",
    "start": "565000",
    "end": "571640"
  },
  {
    "text": "from just 10 percent\nof the reads, it's grossly underestimating\nthe number of unique molecules we actually have.",
    "start": "571640",
    "end": "578900"
  },
  {
    "text": "In fact, it's off by typically\na factor of two or more. So for some reason,\neven though we're",
    "start": "578900",
    "end": "585100"
  },
  {
    "text": "examining millions of\nreads in this subsample, we're not getting\na good estimate of the complexity\nof the library.",
    "start": "585100",
    "end": "593389"
  },
  {
    "text": "Does anybody have any idea\nwhat could be going wrong here? Why is it that this\nvery simple model that",
    "start": "593390",
    "end": "600820"
  },
  {
    "text": "is attempting to estimate how\nmany different molecules we have here based upon what\nwe observe is broken?",
    "start": "600820",
    "end": "610312"
  },
  {
    "text": "Any ideas at all? And please say your name first. AUDIENCE: I'm Chris. PROFESSOR: Hi Chris. AUDIENCE: Is it because\nrepeated sequences,",
    "start": "610312",
    "end": "617375"
  },
  {
    "text": "so there could be a short\nsequence at the end of one molecule that's the beginning\nof another one, middle",
    "start": "617375",
    "end": "622810"
  },
  {
    "text": "of another one, so [INAUDIBLE]. PROFESSOR: Chris, you're\non the right track, OK? Because what we have\nassumed at the outset",
    "start": "622810",
    "end": "630870"
  },
  {
    "text": "was that all of these molecules\noccur with equal probability. Right? What would happen\nif in fact there",
    "start": "630870",
    "end": "638790"
  },
  {
    "text": "are four copies\nof this purple one and only two copies of\nthe other molecules? Then the probability\nof sampling this one",
    "start": "638790",
    "end": "645010"
  },
  {
    "text": "is going to be twice as high\nas the probability of sampling one of these. ",
    "start": "645010",
    "end": "650550"
  },
  {
    "text": "If there's non uniformity\nin the original population, that's going to mess\nup our model big time.",
    "start": "650550",
    "end": "658045"
  },
  {
    "text": "And that could happen\nfrom repeated sequences or other kinds of\nduplicated things, or it could be that there's\nunequal amplification.",
    "start": "658045",
    "end": "664360"
  },
  {
    "text": "It might be that\nPCR really loves a particular molecule, right,\nand amplifies that one a lot,",
    "start": "664360",
    "end": "670140"
  },
  {
    "text": "and doesn't amplify another one\nthat's difficult to amplify. So somewhere in our\nexperimental protocol pipeline,",
    "start": "670140",
    "end": "675930"
  },
  {
    "text": "it could be that\nthere's non uniformity and thus we're getting a\nskewness to our distribution here in our library.",
    "start": "675930",
    "end": "683210"
  },
  {
    "text": "So the other thing\nthat's true is in a Poisson, lambda,\nwhich is equal to the mean,",
    "start": "683210",
    "end": "689140"
  },
  {
    "text": "is also equal to the variance. And so our Poisson's\nonly one knob we could turn to fit\nthe distribution.",
    "start": "689140",
    "end": "694433"
  },
  {
    "text": " So coming back to this,\nwe talked about the idea that the library complexity\nstill may be four",
    "start": "694433",
    "end": "701730"
  },
  {
    "text": "but then there may\nbe different numbers of molecules of each type.",
    "start": "701730",
    "end": "707130"
  },
  {
    "text": "And here's an idea\nfor you, right? The idea is this. Imagine that the\ntop distributions",
    "start": "707130",
    "end": "714230"
  },
  {
    "text": "are the number of each type\nof molecule that are present. And it might be that our\noriginal assumption was",
    "start": "714230",
    "end": "719600"
  },
  {
    "text": "that it was like the very\ntop, that typically there are two copies of each molecule\nin the original sequencing",
    "start": "719600",
    "end": "725950"
  },
  {
    "text": "library, and that's a\nfairly tight distribution. But it could be, in fact,\nthat the number of molecules",
    "start": "725950",
    "end": "734140"
  },
  {
    "text": "of each type is very dispersed.",
    "start": "734140",
    "end": "739960"
  },
  {
    "text": "And so if we look at\neach one of those plots at the top, the\nfirst four, those are going to be our guesses\nabout the distribution",
    "start": "739960",
    "end": "749870"
  },
  {
    "text": "of the number of\ncopies of a molecule in the original library.",
    "start": "749870",
    "end": "756627"
  },
  {
    "text": "And we don't know\nwhat that is, right? That's something we can't\ndirectly observe, but imagine",
    "start": "756627",
    "end": "761870"
  },
  {
    "text": "that we took that\ndistribution and used it for lambda in our\nPoisson distribution",
    "start": "761870",
    "end": "768110"
  },
  {
    "text": "down below for sampling. So we have one distribution\nover the number of each type of\nmolecule we have and we",
    "start": "768110",
    "end": "774760"
  },
  {
    "text": "have the Poisson for\nsampling from that, and we put those two together.",
    "start": "774760",
    "end": "780910"
  },
  {
    "text": "And when we do that, we have\nthe Poisson distribution at the top, the\ngamma distribution is what we'll use\nfor representing",
    "start": "780910",
    "end": "787890"
  },
  {
    "text": "the number of different\nspecies over here and their relative copy number.",
    "start": "787890",
    "end": "793949"
  },
  {
    "text": "And when we actually put\nthose together as shown,",
    "start": "793950",
    "end": "799596"
  },
  {
    "text": "we wind up with what's\ncalled the negative binomial distribution, which is a\nmore flexible distribution,",
    "start": "799596",
    "end": "804829"
  },
  {
    "text": "it has two parameters. And that negative\nbinomial distribution can be used, once again,\nto estimate our library",
    "start": "804830",
    "end": "813980"
  },
  {
    "text": "complexity. And when we do so, we\nhave lamba be the same, but k is a new parameter.",
    "start": "813980",
    "end": "819565"
  },
  {
    "text": "It measures sort of the\nvariance or dispersion of this original\nsequencing library.",
    "start": "819565",
    "end": "826540"
  },
  {
    "text": "And then when we fit this\nnegative binomial distribution to that 1,000 genomes data, it's\ngoing to be hopefully better.",
    "start": "826540",
    "end": "835180"
  },
  {
    "text": "Let's start with\na smaller example. If we have a library that's\nartificial with a known million",
    "start": "835180",
    "end": "841280"
  },
  {
    "text": "unique molecules\nand we subsample, it gives you 100,000\nreads, you can see that with\ndifferent dispersions",
    "start": "841280",
    "end": "848035"
  },
  {
    "text": "here in the left, k\nwith different values from 0.1 to 20, the Poisson\nbegins to grossly underestimate",
    "start": "848035",
    "end": "854150"
  },
  {
    "text": "the complexity of the library\nas the dispersion gets larger, whereas the negative\nbinomial, otherwise known",
    "start": "854150",
    "end": "859790"
  },
  {
    "text": "as the GP or gamma Poisson,\ndoes a much better job. And furthermore,\nwhen we look at this,",
    "start": "859790",
    "end": "866860"
  },
  {
    "text": "in the context of the\nthousand genomes data, you can see when we fit this\nhow much better we are doing.",
    "start": "866860",
    "end": "874199"
  },
  {
    "text": "Almost all those points\nare almost exactly on the line, which means you\ncan take a small sampling run",
    "start": "874200",
    "end": "879890"
  },
  {
    "text": "and figure out from\nthat sampling run how complex your library is. And that allows us to tell\nsomething very important, which",
    "start": "879890",
    "end": "887399"
  },
  {
    "text": "is what is the marginal\nvalue of extra sequencing. So for example, if somebody\ncomes to you and they say,",
    "start": "887400",
    "end": "892540"
  },
  {
    "text": "well, I ran my experiment\nand all I could afford was 50 million reads.",
    "start": "892540",
    "end": "897839"
  },
  {
    "text": "Do you think I\nshould sequence more? Is there more information in my\nexperimental DNA preparation?",
    "start": "897840",
    "end": "906529"
  },
  {
    "text": "It's easy to tell now, right? Because you can actually\nanalyze the distribution of the reads that they got\nand you can go back",
    "start": "906530",
    "end": "912040"
  },
  {
    "text": "and you could estimate\nthe marginal value of additional sequencing. And the way you do that is you\ngo back to the distribution",
    "start": "912040",
    "end": "920305"
  },
  {
    "text": "that you fit this\nnegative binomial and ask if you\nhave r more reads,",
    "start": "920305",
    "end": "925320"
  },
  {
    "text": "how many more unique molecules\nare you going to get?",
    "start": "925320",
    "end": "930330"
  },
  {
    "text": "And the answer is\nthat you can see",
    "start": "930330",
    "end": "935890"
  },
  {
    "text": "that if you imagine that\nthis is artificial data,",
    "start": "935890",
    "end": "940937"
  },
  {
    "text": "but if you imagine that\nyou had a complexity of 10 to the 6 molecules, the\nnumber sequencing regions is",
    "start": "940937",
    "end": "946275"
  },
  {
    "text": "on the x-axis, the number of\nobserved distinct molecules is on the y-axis, and as you\nincrease the sequencing depth,",
    "start": "946275",
    "end": "954940"
  },
  {
    "text": "you get more and more\nback to the library. However, the important thing\nto note is that the more skewed",
    "start": "954940",
    "end": "960950"
  },
  {
    "text": "the library is, the less\nbenefit you get, right? So if you look at the various\nvalues of k, as k gets larger,",
    "start": "960950",
    "end": "967709"
  },
  {
    "text": "the sort of the\nskewness of the library increases, and you can see that\nyou get fewer unique molecules",
    "start": "967710",
    "end": "973150"
  },
  {
    "text": "as you increase the\nsequencing depth. Now I mention this\nto you because it's",
    "start": "973150",
    "end": "978890"
  },
  {
    "text": "important to think\nin a principled way about analyzing sequencing data.",
    "start": "978890",
    "end": "984590"
  },
  {
    "text": "If somebody drops 200 million\nreads on your desk and says, can you help me with\nthese, it's good to start",
    "start": "984590",
    "end": "991440"
  },
  {
    "text": "with some fundamental\nquestions, like just how complex is the original\nlibrary and you think",
    "start": "991440",
    "end": "996550"
  },
  {
    "text": "that these data are\nreally good or not, OK? Furthermore, this is a\nintroduction to the idea",
    "start": "996550",
    "end": "1002750"
  },
  {
    "text": "that certain kinds of\nvery simplistic models, like Poisson models\nof sequencing data can be wrong because\nthey're not adequately",
    "start": "1002750",
    "end": "1009600"
  },
  {
    "text": "taking into account\nthe over dispersion of the original\nsequencing count data.",
    "start": "1009600",
    "end": "1015620"
  },
  {
    "text": "OK, so that's all there is\nabout library complexity. Let's move on now to questions\nof how to deal with these",
    "start": "1015620",
    "end": "1025679"
  },
  {
    "text": "reads once we have them. So the fundamental\nchallenge is this.",
    "start": "1025680",
    "end": "1033890"
  },
  {
    "text": "I hand you a genome like human. ",
    "start": "1033890",
    "end": "1039529"
  },
  {
    "text": "3 times 10 to the ninth bases. This will be in fast\na format, let's say.",
    "start": "1039530",
    "end": "1048429"
  },
  {
    "text": "I had you reads. And this will be-- we'll\nhave, say, 200 base",
    "start": "1048430",
    "end": "1054980"
  },
  {
    "text": "pairs times 2 times 10 to\nthe eighth different reads.",
    "start": "1054980",
    "end": "1065309"
  },
  {
    "text": "And this will be\nin fast q format. ",
    "start": "1065310",
    "end": "1070520"
  },
  {
    "text": "The q means that there are--\nit's like fast a except that our quality\nscore's associated with each particular\nbase position.",
    "start": "1070520",
    "end": "1077100"
  },
  {
    "text": "And the PHRED score\nwhich is typically",
    "start": "1077100",
    "end": "1083283"
  },
  {
    "text": "used for these\nsorts of qualities, is minus p minus 10\ntimes log base 10",
    "start": "1083284",
    "end": "1091960"
  },
  {
    "text": "of the probability of an error. Right, so a PHRED score of\n10 means that there's a 1",
    "start": "1091960",
    "end": "1097440"
  },
  {
    "text": "in 10 chance that the bases is\nan error, a PHRED score of 20 means it's one in a\n100, and so forth.",
    "start": "1097440",
    "end": "1104470"
  },
  {
    "text": "And then the goal is\ntoday if I give you these data on a\nhard drive, your job",
    "start": "1104470",
    "end": "1113040"
  },
  {
    "text": "would be to produce a SAM\nfile, a Sequence Alignment and Mapping file,\nwhich tells us where",
    "start": "1113040",
    "end": "1119730"
  },
  {
    "text": "all these reads\nmap in the genome.  And more pictorially,\nthe idea is",
    "start": "1119730",
    "end": "1128010"
  },
  {
    "text": "that there are many\ndifferent reasons why we want to do this mapping. So one might be\nto do genotyping.",
    "start": "1128010",
    "end": "1135400"
  },
  {
    "text": "You and I differ in our\ngenomes by about one base in a thousand. So if I sequence your genome\nand I map it back or align it",
    "start": "1135400",
    "end": "1142544"
  },
  {
    "text": "to the human brain\nreference genome, I'm going to find differences\nbetween your genome and the human reference genome.",
    "start": "1142545",
    "end": "1148320"
  },
  {
    "text": "And you can see how this is\ndone at the very top where we have the aligned\nreads and there's a G, let's say, in the\nsample DNA, and there's",
    "start": "1148320",
    "end": "1155750"
  },
  {
    "text": "a C in the reference. But in order to figure out\nwhere the differences are, we have to take\nthose short reads",
    "start": "1155750",
    "end": "1161094"
  },
  {
    "text": "and align them to the genome. Another kind of\nexperimental protocol",
    "start": "1161094",
    "end": "1167610"
  },
  {
    "text": "uses DNA fragments\nthat are representative of some kind of\nbiological process.",
    "start": "1167610",
    "end": "1173490"
  },
  {
    "text": "So here the DNA being\nproduced are mapped back to the genome to look\nfor areas of enrichment",
    "start": "1173490",
    "end": "1178930"
  },
  {
    "text": "or what are sometimes\ncalled peaks. And there we want to actually\ndo exactly the same process,",
    "start": "1178930",
    "end": "1184909"
  },
  {
    "text": "but the post processing once\nthe alignment is complete is different. ",
    "start": "1184910",
    "end": "1190690"
  },
  {
    "text": "So both of these share the goal\nof taking hundreds of millions",
    "start": "1190690",
    "end": "1196990"
  },
  {
    "text": "of short reads and aligning\nthem to a very large genome.",
    "start": "1196990",
    "end": "1203480"
  },
  {
    "text": "And you heard about Smith\nWaterman from Professor Berg, and as you can tell, that\nreally isn't going to work,",
    "start": "1203480",
    "end": "1208780"
  },
  {
    "text": "because its time\ncomplexity is not going to be admissible for\nhundreds of millions of reads.",
    "start": "1208780",
    "end": "1216760"
  },
  {
    "text": "So we need to come up\nwith a different way of approaching this problem.",
    "start": "1216760",
    "end": "1222510"
  },
  {
    "text": "So finding this alignment is\nreally a performance bottleneck",
    "start": "1222510",
    "end": "1227620"
  },
  {
    "text": "for many computational\nbiology problems today.",
    "start": "1227620",
    "end": "1233309"
  },
  {
    "text": "And we have to talk a\nlittle bit about what we mean by a good alignment,\nbecause we're going to assume,",
    "start": "1233310",
    "end": "1241490"
  },
  {
    "text": "of course, fewer\nmismatches are better. And we're going to try and\nalign to high quality bases",
    "start": "1241490",
    "end": "1246900"
  },
  {
    "text": "as opposed to low quality\nbases and note that all we have in our input data are\nquality scores for the reads.",
    "start": "1246900",
    "end": "1256490"
  },
  {
    "text": "So we begin with an assumption\nthat the genome is the truth",
    "start": "1256490",
    "end": "1261770"
  },
  {
    "text": "and when we are\naligning, we are going to be more permissive\nof mismatches in read locations that have\nhigher likelihood of being",
    "start": "1261770",
    "end": "1269380"
  },
  {
    "text": "wrong.  So is everybody OK\nwith the set up so far?",
    "start": "1269380",
    "end": "1277820"
  },
  {
    "text": "You understand what\nthe problem is? Yes, all the way in the back\nrow, my back row consultants,",
    "start": "1277820",
    "end": "1283790"
  },
  {
    "text": "you're good on that? See, the back row\nis always the people I call on for consulting\nadvice, right?",
    "start": "1283790",
    "end": "1288870"
  },
  {
    "text": "So yeah. You're all good back there? Good, I like that, good,\nthat's good, I like that, OK.",
    "start": "1288870",
    "end": "1295350"
  },
  {
    "text": "All right. So now I'm going to\ntalk to you about what",
    "start": "1295350",
    "end": "1301608"
  },
  {
    "text": "are the most amazing\ntransforms I have seen. It's called the Burrows\nWheeler Transform.",
    "start": "1301608",
    "end": "1308860"
  },
  {
    "text": "And it is a transform\nthat we will do to the original\ngenome that allows",
    "start": "1308860",
    "end": "1313870"
  },
  {
    "text": "us to do this look up\nvery, very quickly. And it's worth understanding.",
    "start": "1313870",
    "end": "1321570"
  },
  {
    "text": "So here's the basic idea behind\nthe Burrows Wheeler Transform.",
    "start": "1321570",
    "end": "1326759"
  },
  {
    "text": "We take the original string that\nwe want to use as our target that we're going to\nlook things up in, OK,",
    "start": "1326760",
    "end": "1333340"
  },
  {
    "text": "so this is going to be the\ndictionary looking things up in and it's going to be\nthe genome sequence.",
    "start": "1333340",
    "end": "1338670"
  },
  {
    "text": "And you can see the sequence on\nthe left hand side, ACA, ACG, and the dollar sign represents\nthe end of string terminator.",
    "start": "1338670",
    "end": "1347270"
  },
  {
    "text": "OK. Now here's what\nwe're going to do. We take all possible\nrotations of this string, OK?",
    "start": "1347270",
    "end": "1358730"
  },
  {
    "text": "And we're going to sort them. And the result of\nsorting all the rotations",
    "start": "1358730",
    "end": "1364550"
  },
  {
    "text": "is shown in the next\nblock of characters. And you can see that the\nend of string character",
    "start": "1364550",
    "end": "1371220"
  },
  {
    "text": "has the shortest sorting\norder, followed by A, C, and G",
    "start": "1371220",
    "end": "1377263"
  },
  {
    "text": "and that all the strings\nare ordered lexically by all of their letters. So once again, we take\nthe original input string,",
    "start": "1377264",
    "end": "1385760"
  },
  {
    "text": "we do all of the\npossible rotations of it, and then we sort them and wind\nup with this Burrows Wheeler",
    "start": "1385760",
    "end": "1392820"
  },
  {
    "text": "Matrix as it's called\nin this slide, OK?",
    "start": "1392820",
    "end": "1398019"
  },
  {
    "text": "And we take the last\ncolumn of that matrix and that is the Burrows\nWheeler Transform.",
    "start": "1398020",
    "end": "1405139"
  },
  {
    "text": "Now yo might say, what on\nearth is going on here? Why would you want to\ntake a string or even",
    "start": "1405140",
    "end": "1412940"
  },
  {
    "text": "an entire genome? We actually do this\non entire genomes, OK?",
    "start": "1412940",
    "end": "1418520"
  },
  {
    "text": "Consider all the\nrotations of it, sort them, and then take the\nlast column of that matrix.",
    "start": "1418520",
    "end": "1425300"
  },
  {
    "text": "What could that be doing, OK? Here's a bit of\nintuition for you. The intuition is that that\nBurrows Wheeler Matrix",
    "start": "1425300",
    "end": "1433090"
  },
  {
    "text": "is representing all\nof the suffixes of t. OK, so all the red things are\nsuffixes of t in the matrix.",
    "start": "1433090",
    "end": "1444380"
  },
  {
    "text": "And when we are going\nto be matching a read, we're going to be matched\nit from its end going",
    "start": "1444380",
    "end": "1450159"
  },
  {
    "text": "towards the beginning\nof it, so we'll be matching suffixes of it. And I'm going to show you a\nvery neat way of using this",
    "start": "1450159",
    "end": "1456140"
  },
  {
    "text": "transform to do matching\nvery efficiently. But before I do that,\nI want you to observe",
    "start": "1456140",
    "end": "1463330"
  },
  {
    "text": "that it's not complicated. All we do is we take all\nthe possible rotations",
    "start": "1463330",
    "end": "1469010"
  },
  {
    "text": "and we sort them and we\ncome up with this transform. Yes.",
    "start": "1469010",
    "end": "1475330"
  },
  {
    "text": "AUDIENCE: What are you\nsorting them based on? PROFESSOR: OK, what\nwas your name again? AUDIENCE: I'm Samona. PROFESSOR: Samona.",
    "start": "1475331",
    "end": "1480740"
  },
  {
    "text": "What are we sorting\nthem based upon? We're just sorting\nthem alphabetically. AUDIENCE: OK. PROFESSOR: So you can see that\nif dollar sign is the lowest",
    "start": "1480740",
    "end": "1488420"
  },
  {
    "text": "alphabetical character,\nthat if you consider each one a word, that they're\nsorted alphabetically, OK?",
    "start": "1488420",
    "end": "1495910"
  },
  {
    "text": "So we have seven\ncharacters in each row and we sort them alphabetically.",
    "start": "1495910",
    "end": "1502070"
  },
  {
    "text": "Or a lexically. Good question. Any other questions like that? This is a great time\nto ask questions,",
    "start": "1502070",
    "end": "1508429"
  },
  {
    "text": "because what's\ngoing to happen is that in about the\nnext three minutes if you lose your attention\nspan of about 10 seconds,",
    "start": "1508430",
    "end": "1514680"
  },
  {
    "text": "you're going to look up and\nyou'll say, what just happened? Yes. AUDIENCE: Could you\nexplain the suffixes of t?",
    "start": "1514680",
    "end": "1521180"
  },
  {
    "text": "PROFESSOR: The suffixes of t? Sure. Let's talk about\nthe suffixes of tr.",
    "start": "1521180",
    "end": "1526650"
  },
  {
    "text": "They're all of the\nthings that end t. So a suffix of t would be\nG, or CG, or ACG, or AACG,",
    "start": "1526650",
    "end": "1535400"
  },
  {
    "text": "or CAACG, or the\nentire string t. Those are all of\nthe endings of t.",
    "start": "1535400",
    "end": "1540790"
  },
  {
    "text": "And if you look\nover on the right, you can see all of\nthose suffixes in red.",
    "start": "1540790",
    "end": "1546760"
  },
  {
    "text": "So one way to\nthink about this is that it's sorting all of the\nsuffixes of t in that matrix.",
    "start": "1546760",
    "end": "1554730"
  },
  {
    "text": "Because the rotations are\nexposing the suffixes, right, is what's going on.",
    "start": "1554730",
    "end": "1561134"
  },
  {
    "text": "Does that make sense to you?  Now keep me honest here in a\nminute, OK, you'll help me out?",
    "start": "1561134",
    "end": "1568280"
  },
  {
    "text": "Yes. Your name first? AUDIENCE: [INAUDIBLE]. [INAUDIBLE] PROFESSOR: [INAUDIBLE]. AUDIENCE: What is dollar sign?",
    "start": "1568280",
    "end": "1573954"
  },
  {
    "text": "PROFESSOR: Dollar sign is\nthe end of string character which has the lowest\nlexical sorting order.",
    "start": "1573954",
    "end": "1580010"
  },
  {
    "text": "So it's marking the end of t. That's how we know that\nwe're at the end of t.",
    "start": "1580010",
    "end": "1586177"
  },
  {
    "text": "Good question. Yes. AUDIENCE: Can you sort them\nnon-alphabetically, just different ways to sort\nthem [INAUDIBLE] algorithm?",
    "start": "1586177",
    "end": "1594002"
  },
  {
    "text": "PROFESSOR: The\nquestion is, can you sort them non alphabetically. You can sort them any way as\nlong as it's consistent, OK.",
    "start": "1594002",
    "end": "1602075"
  },
  {
    "text": "But let's stick with\nalphabetical lexical order today. It's really simple\nand it's all you need. Yes.",
    "start": "1602076",
    "end": "1607520"
  },
  {
    "text": " in red is the suffixes\nin the last colored",
    "start": "1607520",
    "end": "1616412"
  },
  {
    "text": "group on the right? PROFESSOR: No, no. AUDIENCE: What's in red? PROFESSOR: What's in\nred are all the suffixes",
    "start": "1616412",
    "end": "1621521"
  },
  {
    "text": "of T on the very far left. OK? AUDIENCE: On the right,\nlast column group? PROFESSOR: The right\nlast column group.",
    "start": "1621521",
    "end": "1628390"
  },
  {
    "text": "That last column in red, that is\nthe Burrows-Wheeler Transform, read from top to bottom. OK?",
    "start": "1628390",
    "end": "1633940"
  },
  {
    "text": "And I know you're\nlooking at that and saying, how could\nthat possibly be useful? We've taken our genome. We've shifted it all around.",
    "start": "1633940",
    "end": "1639610"
  },
  {
    "text": "We've sorted it, we\ntake this last thing. It looks like junk to me, right? But you're going to\nfind out that all",
    "start": "1639610",
    "end": "1646139"
  },
  {
    "text": "of the information in\nthe genome is contained in that last string\nin a very handy way. Hard to believe but true.",
    "start": "1646140",
    "end": "1652379"
  },
  {
    "text": "Hard to believe but true. Yes. Prepare to be amazed, all right?",
    "start": "1652379",
    "end": "1657850"
  },
  {
    "text": "These are all great questions. Any other questions\nof this sort? . OK.",
    "start": "1657850",
    "end": "1663240"
  },
  {
    "text": "So, I'm going to make a very\nimportant observation here",
    "start": "1663240",
    "end": "1668500"
  },
  {
    "text": "that is going to be crucial\nfor your understanding. So I have reproduced the\nmatrix down on this blackboard.",
    "start": "1668500",
    "end": "1677830"
  },
  {
    "text": "What? That's usually there under\nthat board, you know that. You guys haven't checked this\nclassroom before, have you?",
    "start": "1677830",
    "end": "1684250"
  },
  {
    "text": "No. It's always there. It's such a handy transform.",
    "start": "1684250",
    "end": "1689760"
  },
  {
    "text": "So this is the same\nmatrix as the matrix you see on the right. I'm going to make a very, very\nimportant assertion right now.",
    "start": "1689760",
    "end": "1696900"
  },
  {
    "text": "OK? The very important assertion\nis that if you consider",
    "start": "1696900",
    "end": "1705220"
  },
  {
    "text": "that this is the first a\nin the last column that is the same textual occurrence\nin the string as the first a",
    "start": "1705220",
    "end": "1714850"
  },
  {
    "text": "in the first column. And this is the second a\nin the last column, that's",
    "start": "1714850",
    "end": "1721460"
  },
  {
    "text": "the same as the second\na in the first column. And you're going to say,\nwhat does he mean by that? OK, do the following\nthought experiment.",
    "start": "1721460",
    "end": "1729200"
  },
  {
    "text": "Look at the matrix. OK? And in your mind, shift it\nleft and put all the characters",
    "start": "1729200",
    "end": "1734530"
  },
  {
    "text": "on the right hand side. OK? When you do that,\nwhat will happen",
    "start": "1734530",
    "end": "1739890"
  },
  {
    "text": "is that these\nthings will be used to sort the occurrences\na on the right hand side.",
    "start": "1739890",
    "end": "1749390"
  },
  {
    "text": "Once again, if you shift this\nwhole thing left and these pop over to the right, then the\noccurrence of these a's will",
    "start": "1749390",
    "end": "1756020"
  },
  {
    "text": "be sorted by these\nrows from here over.",
    "start": "1756020",
    "end": "1761140"
  },
  {
    "text": "But these are alphabetical. And therefore they're going\nto certain alphabetical order.",
    "start": "1761140",
    "end": "1767159"
  },
  {
    "text": "And therefore these a's\nwill sort in the same order here as they are over there. ",
    "start": "1767160",
    "end": "1774360"
  },
  {
    "text": "So that means that when\nwe do this rotation, that this textual\noccurrence of a will",
    "start": "1774360",
    "end": "1781169"
  },
  {
    "text": "have the same rank in the first\ncolumn and in the last column. And you can see I've annotated\nthe various bases here",
    "start": "1781170",
    "end": "1791220"
  },
  {
    "text": "with their ranks. This is the first g, the first\nc, the first end of line, end of string character.",
    "start": "1791220",
    "end": "1796730"
  },
  {
    "text": "First a, second a,\nthird a, second c. And correspondingly I\nhave the same annotations",
    "start": "1796730",
    "end": "1802910"
  },
  {
    "text": "over here and thus\nthe third a here is",
    "start": "1802910",
    "end": "1809930"
  },
  {
    "text": "the same lexical occurrence\nas the third a on the left",
    "start": "1809930",
    "end": "1816280"
  },
  {
    "text": "in the string, same\ntext occurrence. Now I'm going to let that\nsink in for a second,",
    "start": "1816280",
    "end": "1821776"
  },
  {
    "text": "and then when somebody\nasks a question, I'm going to explain it again\nbecause it's a little bit counterintuitive.",
    "start": "1821776",
    "end": "1827340"
  },
  {
    "text": "But the very important\nthing is if we think about textual recurrences\nof characters in that string t",
    "start": "1827340",
    "end": "1834070"
  },
  {
    "text": "and we put them\nin this framework, that the rank allows\nus to identify",
    "start": "1834070",
    "end": "1840470"
  },
  {
    "text": "identical textual\nrecurrences of a character.  Would somebody like\nto ask a question?",
    "start": "1840470",
    "end": "1847080"
  },
  {
    "text": "Yes. Say your name and\nthe question, please. AUDIENCE: Dan. PROFESSOR: Dan. AUDIENCE: So in\nyour original string though those won't\ncorrespond to the same order",
    "start": "1847080",
    "end": "1856190"
  },
  {
    "text": "in the transformed string. So like the a's in the\noriginal string in their order,",
    "start": "1856190",
    "end": "1862495"
  },
  {
    "text": "they don't correspond\nnumerically to the transformed string. PROFESSOR: That's correct.",
    "start": "1862495",
    "end": "1867860"
  },
  {
    "text": "Is that OK? The comment was that the\norder in BWT, the transform",
    "start": "1867860",
    "end": "1874240"
  },
  {
    "text": "is not the same as the order\nin the original string. And all I'm saying is that in\nthis particular matrix form,",
    "start": "1874240",
    "end": "1880460"
  },
  {
    "text": "that the order on\nthe last column is the same as the order\nin the first column for a particular character. And furthermore, that these are\nmatching textual occurrences,",
    "start": "1880460",
    "end": "1888420"
  },
  {
    "text": "right? Now if I look at\na2 here, we know",
    "start": "1888420",
    "end": "1895800"
  },
  {
    "text": "that c comes after it, then\na, then a, and c and g, right? ",
    "start": "1895800",
    "end": "1902170"
  },
  {
    "text": "Right. OK, so did that\nanswer your question that they're not\nexactly the same?",
    "start": "1902170",
    "end": "1907447"
  },
  {
    "text": "AUDIENCE: Yes. I don't understand how\nthey're useful yet. PROFESSOR: You don't\nunderstand how it's useful yet.",
    "start": "1907447",
    "end": "1912769"
  },
  {
    "text": "OK. Well, maybe we better\nget to the useful part and then you can-- OK.",
    "start": "1912770",
    "end": "1918180"
  },
  {
    "text": "So let us suppose that\nwe want to, from this,",
    "start": "1918180",
    "end": "1924020"
  },
  {
    "text": "reconstruct the original string. Does anybody have any\nideas about how to do that?",
    "start": "1924020",
    "end": "1930159"
  },
  {
    "start": "1930160",
    "end": "1940200"
  },
  {
    "text": "OK. Let me ask a different question. If we look at this g1, right?",
    "start": "1940200",
    "end": "1948960"
  },
  {
    "text": "And then this is the same\ntextual occurrence, right? And we know that\nthis g1 comes right",
    "start": "1948960",
    "end": "1954890"
  },
  {
    "text": "before the end of character,\nin end of string terminator, right? So if we look at the\nfirst row, we always",
    "start": "1954890",
    "end": "1961419"
  },
  {
    "text": "know what the last character\nwas in the original string. The last character is g1, right?",
    "start": "1961420",
    "end": "1974370"
  },
  {
    "text": "Fair enough? OK Where does g1 would\noccur over here? Right over here, right?",
    "start": "1974370",
    "end": "1980440"
  },
  {
    "text": "What's the character before g1? c2.",
    "start": "1980440",
    "end": "1985960"
  },
  {
    "text": "where is c2 over here? What's the character before c2? a3.",
    "start": "1985960",
    "end": "1993100"
  },
  {
    "text": "What's the character before a3? a1.",
    "start": "1993100",
    "end": "1998785"
  },
  {
    "text": "Uh, oh.  Let me just cheat a little\nbit here. a1 a3 c2 g1 $.",
    "start": "1998785",
    "end": "2007870"
  },
  {
    "start": "2007870",
    "end": "2013460"
  },
  {
    "text": "So we're at a1, right? What's the character before a1? ",
    "start": "2013460",
    "end": "2019330"
  },
  {
    "text": "c1, right? What's the character before c1? ",
    "start": "2019330",
    "end": "2028340"
  },
  {
    "text": "a2.  And what's the\ncharacter before a2?",
    "start": "2028340",
    "end": "2033720"
  },
  {
    "text": " That's the end of string. Is that the original\nstring that we had?",
    "start": "2033720",
    "end": "2041210"
  },
  {
    "text": "Magic. OK? Yes. AUDIENCE: Wouldn't it\nbe simpler to look at--",
    "start": "2041210",
    "end": "2047380"
  },
  {
    "text": "to just remove the\ndollar sign [INAUDIBLE]",
    "start": "2047380",
    "end": "2052570"
  },
  {
    "text": "or do you mean reconstruct\nfrom only the transformed? PROFESSOR: We're\nonly using this.",
    "start": "2052570",
    "end": "2058672"
  },
  {
    "text": "This is all we have. Because I actually didn't\nuse any of these characters.",
    "start": "2058672",
    "end": "2065210"
  },
  {
    "text": "I was only doing the matching\nso we would go to the right row. Right?",
    "start": "2065210",
    "end": "2070658"
  },
  {
    "text": "I didn't use any of this.  And so, but do people\nunderstand what's going on here?",
    "start": "2070659",
    "end": "2079260"
  },
  {
    "text": "If anybody has any questions,\nnow is a great time to raise your hand\nand say-- here we go.",
    "start": "2079260",
    "end": "2084365"
  },
  {
    "text": "We have a customer. Say your name and\nthe question, please. AUDIENCE: My name is Eric. PROFESSOR: Thanks, Eric. AUDIENCE: Can you illustrate\nhow you would do this",
    "start": "2084365",
    "end": "2090711"
  },
  {
    "text": "without using any\nof the elements to the left of the box? PROFESSOR: Absolutely, Eric.",
    "start": "2090711",
    "end": "2096638"
  },
  {
    "text": "I'm so glad you\nasked that question. That's the next thing\nwe're going to talk about. OK, but before I get to\nthere, I want to make sure,",
    "start": "2096639",
    "end": "2103232"
  },
  {
    "text": "are you comfortable doing\nit with all the stuff on the left hand side? You're happy about that?",
    "start": "2103232",
    "end": "2108265"
  },
  {
    "text": "OK. if anyone was unhappy about\nthat, now would be the time to say, I'm unhappy, help me.",
    "start": "2108265",
    "end": "2115230"
  },
  {
    "text": "How about the details? Everybody's happy? Yes. AUDIENCE: So, you have\nyour original string",
    "start": "2115230",
    "end": "2122673"
  },
  {
    "text": "in the first place,\nthough, so why do you want to create another\nstring of the same length? Like, how does this help\nyou match your read?",
    "start": "2122673",
    "end": "2131950"
  },
  {
    "text": "PROFESSOR: How does this\nhelp you match your read? How does this help you match\nyour read, was the question. What is was your name? AUDIENCE: Dan.",
    "start": "2131950",
    "end": "2137293"
  },
  {
    "text": "PROFESSOR: That's right, Dan. That's a great question. I'm so glad you asked it.",
    "start": "2137293",
    "end": "2142610"
  },
  {
    "text": "First we'll get\nto Eric's question and then we'll get to yours. Because I know if I don't give\nyou a good answer that you're",
    "start": "2142610",
    "end": "2147850"
  },
  {
    "text": "going to be very mad, right? OK? Let's talk about\nthe question of how",
    "start": "2147850",
    "end": "2154505"
  },
  {
    "text": "to do this without\nthe other things. So we're going to create\nsomething called the last to first function that maps\na character in the last row,",
    "start": "2154505",
    "end": "2164569"
  },
  {
    "text": "column, I should say,\nto the first column. And there is the\nfunction right there. It's called LF.",
    "start": "2164570",
    "end": "2170700"
  },
  {
    "text": "You give it a row number. The rows are zero origined. And you give it a\ncharacter and it tells you",
    "start": "2170700",
    "end": "2176829"
  },
  {
    "text": "what the corresponding place\nis in the first column. And it has two components.",
    "start": "2176830",
    "end": "2183650"
  },
  {
    "text": "The first is Occ, which tells\nyou how many characters are smaller than that\ncharacter lexically.",
    "start": "2183650",
    "end": "2189440"
  },
  {
    "text": "So tells you where, for example,\nthe a's start, the c's start, or the g's start. ",
    "start": "2189440",
    "end": "2196410"
  },
  {
    "text": "So in this case, for\nexample Occ of c is 4. That is the c's start at\n0, 1,2, 3, the fourth row.",
    "start": "2196410",
    "end": "2205900"
  },
  {
    "text": "OK? And then count tells you\nthe rank of c minus 1.",
    "start": "2205900",
    "end": "2213520"
  },
  {
    "text": "So it's going to\nessentially count how many times c occurs\nbefore the c at the row you're",
    "start": "2213520",
    "end": "2220180"
  },
  {
    "text": "pointing at. In this case, the\nanswer is 1 and you add 1 and that gets you\nto 5, which is this row.",
    "start": "2220180",
    "end": "2231369"
  },
  {
    "text": "So this c2 maps here to c2\nas we already discussed.",
    "start": "2231370",
    "end": "2238120"
  },
  {
    "text": "So this LF function is a\nway to map from the last row to the first row.",
    "start": "2238120",
    "end": "2243890"
  },
  {
    "text": " And we need to have\ntwo components. So we need to know Occ, which\nis very trivial to compute.",
    "start": "2243890",
    "end": "2252390"
  },
  {
    "text": "There are only five\nelements, one for each base and one for the end of line\nterminator, which is actually",
    "start": "2252390",
    "end": "2258190"
  },
  {
    "text": "zero. So it will only have\nintegers and count, which",
    "start": "2258190",
    "end": "2265079"
  },
  {
    "text": "is going to tell us the\nrank in the BWT transform and we'll talk about how\nto do that presently.",
    "start": "2265080",
    "end": "2271539"
  },
  {
    "text": "OK. So did that answer\nyour question, how to do this without\nthe rest of the matrix? Eric? AUDIENCE: Could you show us\nstep by step on the blackboard",
    "start": "2271540",
    "end": "2280042"
  },
  {
    "text": "how you would reconstruct it? PROFESSOR: How do\nwe reconstruct it? AUDIENCE: Yeah.",
    "start": "2280042",
    "end": "2286030"
  },
  {
    "text": "PROFESSOR: You mean\nsomething like this? Is this what you're suggesting?",
    "start": "2286030",
    "end": "2291936"
  },
  {
    "text": "AUDIENCE: Somehow\nI get a feeling that the first column\ndoesn't help us",
    "start": "2291936",
    "end": "2298866"
  },
  {
    "text": "in understanding how\nthe algorithm work only using the last column.",
    "start": "2298866",
    "end": "2304640"
  },
  {
    "text": "PROFESSOR: OK. Your comment, Eric,\nis that you feel like the first column\ndoesn't help us understand",
    "start": "2304640",
    "end": "2310140"
  },
  {
    "text": "how the algorithm works, only\nusing the last column, right? OK. ",
    "start": "2310140",
    "end": "2316536"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] going back\nto the first column of data.",
    "start": "2316536",
    "end": "2322692"
  },
  {
    "text": "PROFESSOR: OK.  Well let's compute the LF\nfunction of the character",
    "start": "2322692",
    "end": "2341180"
  },
  {
    "text": "and the row for each\none of these things, OK? And that might help\nyou, all right?",
    "start": "2341180",
    "end": "2347530"
  },
  {
    "text": "Because that's the central part\nof being able to reverse this transform.",
    "start": "2347530",
    "end": "2352590"
  },
  {
    "text": "So this is, to be more clear,\nI'll make it more explicit. This is LF of I and BWT of\ni, where i goes from 0 to 6.",
    "start": "2352590",
    "end": "2367810"
  },
  {
    "text": "So what is that value\nfor this one right here? Anybody know?",
    "start": "2367810",
    "end": "2373090"
  },
  {
    "text": " Well it would be Occ of\ng, which is 6, right?",
    "start": "2373090",
    "end": "2383309"
  },
  {
    "text": "Plus count of of 6 n g,\nwhich is going to be 0.",
    "start": "2383310",
    "end": "2397220"
  },
  {
    "text": "Or I can look right\nover here and see that in fact it's 6, right? Because this occurrence\nof g1 is right here.",
    "start": "2397220",
    "end": "2403450"
  },
  {
    "text": "So this LF value is, it's 6\n4 0 a1 is in 1, a2 is in 2,",
    "start": "2403450",
    "end": "2416280"
  },
  {
    "text": "a3 is in 3, c2 is in 5.",
    "start": "2416280",
    "end": "2422660"
  },
  {
    "text": "So this is the LF\nfunction, 6 4 0 1 2 3 5.",
    "start": "2422660",
    "end": "2428710"
  },
  {
    "text": "And I don't need any\nof this to compute it. Because it simply is equal\nto, going back one slide,",
    "start": "2428710",
    "end": "2436920"
  },
  {
    "text": "it's equal to Occ\nof c plus count. So it' going to be equal to\nwhere that particular character",
    "start": "2436920",
    "end": "2441960"
  },
  {
    "text": "starts on the left hand\nside and its rank minus 1.",
    "start": "2441960",
    "end": "2447730"
  },
  {
    "text": " And so these are\nthe values for LF.",
    "start": "2447730",
    "end": "2453100"
  },
  {
    "text": "This is what I need to be\nable to take this string and recompute the\noriginal string.",
    "start": "2453100",
    "end": "2459630"
  },
  {
    "text": "If I can compute this, I\ndon't need any of that. And to compute this,\nI need two things.",
    "start": "2459630",
    "end": "2467000"
  },
  {
    "text": "I need Occ and I need count. ",
    "start": "2467000",
    "end": "2473000"
  },
  {
    "text": "All right? Now, I can tell you're not\nquite completely satisfied yet.",
    "start": "2473000",
    "end": "2478310"
  },
  {
    "text": "So maybe you can ask\nme another question and it would be\nvery helpful to me. AUDIENCE: How did you get\nG1's last and first functions",
    "start": "2478310",
    "end": "2487530"
  },
  {
    "text": "score being 6? PROFESSOR: OK. Let's take that apart. ",
    "start": "2487530",
    "end": "2500260"
  },
  {
    "text": "We want to know what LF of\n6 and where was that G1?",
    "start": "2500260",
    "end": "2510040"
  },
  {
    "text": "G1 is 1 and 0, right? Sorry. LF of 1 and g is\nequal to, right?",
    "start": "2510040",
    "end": "2518490"
  },
  {
    "text": "Is that g and 1 or 0? Oop, sorry it's in 0. So this is what you like\nme to compute, right?",
    "start": "2518490",
    "end": "2525720"
  },
  {
    "text": "OK what's Occ of g? It's how many characters\nare less than g",
    "start": "2525720",
    "end": "2531140"
  },
  {
    "text": "in the original string? ",
    "start": "2531140",
    "end": "2539050"
  },
  {
    "text": "I'll give you a clue. It's 1, 2, 3, 4, 5, 6. AUDIENCE: [INAUDIBLE]. ",
    "start": "2539050",
    "end": "2547139"
  },
  {
    "text": "PROFESSOR: No, it's how many\ncharacters are less than g in the original string. How many things are going\nto distort underneath it?",
    "start": "2547139",
    "end": "2552560"
  },
  {
    "text": "Where do the g's begin\nin the sorted version? The g's begin in row 6.",
    "start": "2552560",
    "end": "2559380"
  },
  {
    "text": "OK? So OCC of g is 6.",
    "start": "2559380",
    "end": "2565560"
  },
  {
    "text": "Is that-- are you getting\nhung up on that point? AUDIENCE: Yes. How do you know that without\never referencing back",
    "start": "2565560",
    "end": "2571812"
  },
  {
    "text": "to the first 5 columns? PROFESSOR: Because when we\nbuild the index we remember.",
    "start": "2571812",
    "end": "2577486"
  },
  {
    "text": "AUDIENCE: Oh, OK. PROFESSOR: So we have to,\nI haven't told you this,",
    "start": "2577486",
    "end": "2582630"
  },
  {
    "text": "but I need to compute,\nI need to remember ways to compute Occ and\ncount really quickly.",
    "start": "2582630",
    "end": "2588829"
  },
  {
    "text": "Occ is represented\nby four values only. They're where the a's start,\nthe c's start, the t's start,",
    "start": "2588830",
    "end": "2594870"
  },
  {
    "text": "and the g's start. That's all I need to\nknow, four integers. OK? ",
    "start": "2594870",
    "end": "2601360"
  },
  {
    "text": "Are you happy with that?  Occ, the a's start at 1.",
    "start": "2601360",
    "end": "2607140"
  },
  {
    "text": "The c's start at 4 and\nthe g's start at 6. OK? That's all I need to remember.",
    "start": "2607140",
    "end": "2612880"
  },
  {
    "text": "But I precompute that. OK? Remember it. Are you happy with that no?",
    "start": "2612880",
    "end": "2617967"
  },
  {
    "text": "AUDIENCE: Yes. PROFESSOR: OK. And then this business over\nhere of count of zero and g.",
    "start": "2617967",
    "end": "2633471"
  },
  {
    "text": "Right?  Which is how many\ng's, what's the rank",
    "start": "2633471",
    "end": "2639500"
  },
  {
    "text": "of this g in the\nright hand side? ",
    "start": "2639500",
    "end": "2645160"
  },
  {
    "text": "1. Minus 1 is 0. So that's 0.",
    "start": "2645160",
    "end": "2650290"
  },
  {
    "text": " That's how we computed it. OK? ",
    "start": "2650290",
    "end": "2657302"
  },
  {
    "text": "These are great\nquestions because I think they're foundational. Yeah. AUDIENCE: Occ and count\nare both precomputed",
    "start": "2657302",
    "end": "2664244"
  },
  {
    "text": "as you're building on this\nlast column [INAUDIBLE].",
    "start": "2664244",
    "end": "2670731"
  },
  {
    "text": "PROFESSOR: They are\nprecomputed and well, I have not told you, see,\nyou're sort of ahead of things",
    "start": "2670731",
    "end": "2676890"
  },
  {
    "text": "a little bit in that I'd\nhoped to suspend disbelief and that I could actually\nbuild these very efficiently.",
    "start": "2676890",
    "end": "2682140"
  },
  {
    "text": "But yes, they're\nbuilt at the same time as the index is built. OK? But yes.",
    "start": "2682140",
    "end": "2687490"
  },
  {
    "text": "OK and if I have Occ and\ncount and I have the string, then I can get this. But I can still need to\nget to Dan's question",
    "start": "2687490",
    "end": "2693130"
  },
  {
    "text": "because he has been\nvery patient over there. He wants to know\nhow I can use this to find sequence\nregion of genome.",
    "start": "2693130",
    "end": "2699880"
  },
  {
    "text": "And he's just being\nso good over there. I really appreciate that, Dan. Thanks so much for that.",
    "start": "2699880",
    "end": "2705620"
  },
  {
    "text": "Are you happier? OK you're good. All right. So and this is what we just did.",
    "start": "2705620",
    "end": "2712599"
  },
  {
    "text": "The walk left algorithm\nactually inverts the BWT by using this\nfunction to walk left",
    "start": "2712600",
    "end": "2719340"
  },
  {
    "text": "and using that\nPython code up there, you can actually reconstruct\nthe original string",
    "start": "2719340",
    "end": "2724440"
  },
  {
    "text": "you started with. So it's just very simple.",
    "start": "2724440",
    "end": "2730390"
  },
  {
    "text": "And we went through\nit on the board. Are there any questions\nabout it at all?",
    "start": "2730390",
    "end": "2737117"
  },
  {
    "text": "AUDIENCE: Yes. Can you actually\ndo this any column?",
    "start": "2737117",
    "end": "2742155"
  },
  {
    "text": "Like, why are you using the\nlast column instead of like, why can't you just change\nit like the [INAUDIBLE],",
    "start": "2742155",
    "end": "2753490"
  },
  {
    "text": "the equation and\nmake it work for-- PROFESSOR: Because a\nvery important thing is that this is actually a\nvery important property right?",
    "start": "2753490",
    "end": "2760200"
  },
  {
    "text": "Which is all the\nsuffixes are sorted here. And if we didn't\ndo that though, I couldn't answer Dan's question.",
    "start": "2760200",
    "end": "2768300"
  },
  {
    "text": "And he'd be very upset. So please be respectful\nof his interest here.",
    "start": "2768300",
    "end": "2774200"
  },
  {
    "text": "Now, the thing is,\nthe beauty of this is, is that I have all\nthese suffixes sorted and what you're about to see is\nthe most amazing thing, which",
    "start": "2774200",
    "end": "2781210"
  },
  {
    "text": "is that we're going\nto snap our fingers and, bang, we can\nmap 200 million reads in no time at all. ",
    "start": "2781210",
    "end": "2787630"
  },
  {
    "text": "You like that? You're laughing. Oh, oh, that's not a good\nThat's not a good sign. ",
    "start": "2787630",
    "end": "2795190"
  },
  {
    "text": "Let's press ahead\nfearlessly, OK? And talk about how we're\ngoing to use this to map read. So we're going to\nfigure out how to use",
    "start": "2795190",
    "end": "2801720"
  },
  {
    "text": "this index and this\ntransform to rapidly aligned reads to a reference genome. And we're not talking about\none read or 10 reads or 1",
    "start": "2801720",
    "end": "2808190"
  },
  {
    "text": "million reads. We're talking about hundreds\nof millions of reads. So it has be very\nefficient indeed, OK?",
    "start": "2808190",
    "end": "2815270"
  },
  {
    "text": "So here's the essential idea. There's the core\nalgorithm on the slide.",
    "start": "2815270",
    "end": "2821710"
  },
  {
    "text": "Which is that what we do is we\ntake the original query that we have the read that\nwe're trying to match",
    "start": "2821710",
    "end": "2829200"
  },
  {
    "text": "and we're going to\nprocess it backwards from the end of\nthe read forwards.",
    "start": "2829200",
    "end": "2834700"
  },
  {
    "text": "And we begin by considering all\npossible suffixes from row zero to, in this case, it\nwould be row seven.",
    "start": "2834700",
    "end": "2841305"
  },
  {
    "text": " Which is the length of\nthe entire transform.",
    "start": "2841305",
    "end": "2848760"
  },
  {
    "text": "And we iterate and\nin each iteration",
    "start": "2848760",
    "end": "2856120"
  },
  {
    "text": "we consider suffixes\nthat match the query.",
    "start": "2856120",
    "end": "2861320"
  },
  {
    "text": "So in the first\nstep, right here, let me see if I can get my\npoint working, there we are.",
    "start": "2861320",
    "end": "2869060"
  },
  {
    "text": "So in the first step\nhere, we matching this c. OK?",
    "start": "2869060",
    "end": "2874450"
  },
  {
    "text": "And we compute the\nLF of the top, which is this row and of the bottom,\nwhich is down here pointing off",
    "start": "2874450",
    "end": "2881020"
  },
  {
    "text": "the end, and that takes\nus to the first d here and to this point.",
    "start": "2881020",
    "end": "2886740"
  },
  {
    "text": "Here are the two\nc's that could be possible matches to our\nquery, which ends in a c.",
    "start": "2886740",
    "end": "2894090"
  },
  {
    "text": " We then say, oh, the next\ncharacter we have to match",
    "start": "2894090",
    "end": "2901349"
  },
  {
    "text": "is an a. So we look here at the\na we need to match,",
    "start": "2901350",
    "end": "2907819"
  },
  {
    "text": "and starting from this\nrow, which is row four,",
    "start": "2907820",
    "end": "2913740"
  },
  {
    "text": "and this row, which is row six,\nwe compute the LF of each one of these to figure out what\nrows in a precedes these c's.",
    "start": "2913740",
    "end": "2925319"
  },
  {
    "text": " And the way we compute the LF\nis that we use the character a",
    "start": "2925320",
    "end": "2933530"
  },
  {
    "text": "to be able to figure out which\nrows have the a preceding the c.",
    "start": "2933530",
    "end": "2939630"
  },
  {
    "text": "You can see, when we\ncompute those LF functions, what we wind up with\nare these rows where",
    "start": "2939630",
    "end": "2946530"
  },
  {
    "text": "we have a followed by c. So we're beginning to\nmatch the end of our read,",
    "start": "2946530",
    "end": "2953529"
  },
  {
    "text": "as we go from right to left. We then compute the\nsame thing once again,",
    "start": "2953530",
    "end": "2959220"
  },
  {
    "text": "considering the\nfirst a and ask what rows are going to allow us to\nput this a in front of the ac",
    "start": "2959220",
    "end": "2972519"
  },
  {
    "text": "to form our entire read. And we compute the LF once\nagain of these things.",
    "start": "2972520",
    "end": "2981599"
  },
  {
    "text": "And you can see that\nhere it takes us to this specific row aac.",
    "start": "2981600",
    "end": "2988770"
  },
  {
    "text": "So that row represents\na suffix that",
    "start": "2988770",
    "end": "2994150"
  },
  {
    "text": "is matching our query exactly. So we iterate this loop\nto be able to match",
    "start": "2994150",
    "end": "3004570"
  },
  {
    "text": "a read against the index. And we're using the\nLF function to do it.",
    "start": "3004570",
    "end": "3013210"
  },
  {
    "text": "And it's a really\nbeautiful algorithm. And remember, we only\nhave the transform.",
    "start": "3013210",
    "end": "3019381"
  },
  {
    "text": "We don't have the\nrest of this matrix.  So before I press ahead and\ntalk about other details,",
    "start": "3019382",
    "end": "3029965"
  },
  {
    "text": "I think it's important to\nobserve a couple of things that are a little bit\ncounterintuitive about this.",
    "start": "3029966",
    "end": "3035480"
  },
  {
    "text": "One counterintuitive\naspect of it is, that when I'm over here\nfor example, and for example",
    "start": "3035480",
    "end": "3042820"
  },
  {
    "text": "when I'm computing the LF here,\nI'm computing the LF of row two",
    "start": "3042820",
    "end": "3048000"
  },
  {
    "text": "with respect to a. But there's a dollar sign there.",
    "start": "3048000",
    "end": "3053060"
  },
  {
    "text": "Right? So I'm using this\nto the LF function,",
    "start": "3053060",
    "end": "3058880"
  },
  {
    "text": "to tell me where a suffix\nwould be that actually follows",
    "start": "3058880",
    "end": "3067059"
  },
  {
    "text": "my constraint of having to\nhave an a be the prefix of ac, where I am right now.",
    "start": "3067060",
    "end": "3073710"
  },
  {
    "text": "This code is actually\nnot fake code. It's the actual code\nthat's in a matcher,",
    "start": "3073710",
    "end": "3079970"
  },
  {
    "text": "for matching a read\nagainst the index. ",
    "start": "3079970",
    "end": "3086830"
  },
  {
    "text": "Now let me just stop\nright here for a second and see if there\nany other questions. Dan is getting now his answer\nto his question, right?",
    "start": "3086830",
    "end": "3092640"
  },
  {
    "text": "About how you actually use\nthis for matching reads. You do this once for every read.",
    "start": "3092640",
    "end": "3097800"
  },
  {
    "text": "And it is linear time. Right? It's the length\nof the read itself",
    "start": "3097800",
    "end": "3104750"
  },
  {
    "text": "is all the time it takes\nto match in a huge genome. So once we've built the\nindex of the genome,",
    "start": "3104750",
    "end": "3111119"
  },
  {
    "text": "in fact, most of\nthe time when you're doing this sort of mapping,\nyou don't build the index.",
    "start": "3111120",
    "end": "3116130"
  },
  {
    "text": "You download the index\noff of a website. And so you don't have to pay for\nthe time to build this index.",
    "start": "3116130",
    "end": "3122760"
  },
  {
    "text": "You just download the index\nand you take your reads and the time to match\nall of your sequencing reads against a certain build\nof whatever genome you're using",
    "start": "3122760",
    "end": "3130930"
  },
  {
    "text": "is simply linear in the\nnumber of bases you have. Questions?",
    "start": "3130930",
    "end": "3136960"
  },
  {
    "text": "Yes. And say your name and\nthe question, please. AUDIENCE: How did\n[INAUDIBLE] come up with intuition [INAUDIBLE]?",
    "start": "3136960",
    "end": "3142595"
  },
  {
    "text": "It seems like they just\npulled it out of a hat. PROFESSOR: You know, I asked\nMike that the other day. I saw him in a meeting\nand he sort of surprised",
    "start": "3142595",
    "end": "3149470"
  },
  {
    "text": "at how this has taken off. And he told me some\nother interesting facts",
    "start": "3149470",
    "end": "3159217"
  },
  {
    "text": "about this, which you\nprobably could deduce. Which is that if you\nonly want to match reads that are\nfour long, you only",
    "start": "3159217",
    "end": "3165250"
  },
  {
    "text": "have to sort this matrix by\nthe first four characters. ",
    "start": "3165250",
    "end": "3170810"
  },
  {
    "text": "But there are other little\ntricks you can play here. Any other questions? Yes.",
    "start": "3170810",
    "end": "3176290"
  },
  {
    "text": "AUDIENCE: I'm Deborah. What is the FM index? PROFESSOR: What is the FM index.",
    "start": "3176290",
    "end": "3184070"
  },
  {
    "text": "Well, the guys who\nthought this up have the last\ninitials of F and M, but that's not\nwhat it stands for,",
    "start": "3184070",
    "end": "3189720"
  },
  {
    "text": "contrary to popular opinion. It stands for full\ntext minute size.",
    "start": "3189720",
    "end": "3196900"
  },
  {
    "text": "That's what they claim. So if you hear people talking\nabout full text minute size indices, or FM\nindices, the Fm index",
    "start": "3196900",
    "end": "3204800"
  },
  {
    "text": "is actually the part that was\nbeing asked over here, the Occ",
    "start": "3204800",
    "end": "3210060"
  },
  {
    "text": "part and the LF part, how you\nactually compute those quickly. That was what FNM contributed\nto this but, generically when",
    "start": "3210060",
    "end": "3217910"
  },
  {
    "text": "we're talking about\nthis style of indexing, it's called FM indexing or you\nmight hear, I'm using a BWT.",
    "start": "3217910",
    "end": "3224420"
  },
  {
    "text": "Some people will say that. But that's what FM stands for.",
    "start": "3224420",
    "end": "3230349"
  },
  {
    "text": "Does that answer your question? Excellent. OK. All right.",
    "start": "3230350",
    "end": "3235771"
  },
  {
    "text": "Any-- these are all\ngreat questions. Yes. AUDIENCE: [INAUDIBLE]. ",
    "start": "3235771",
    "end": "3248780"
  },
  {
    "text": "PROFESSOR: Oh, you\ndon't know that a and c are there,\nexcept that remember,",
    "start": "3248780",
    "end": "3255220"
  },
  {
    "text": "if you look at the way\nthat this is working,",
    "start": "3255220",
    "end": "3260440"
  },
  {
    "text": "is that you're not actually\nreconstructing strings, you're only trying to find them.",
    "start": "3260440",
    "end": "3267080"
  },
  {
    "text": "Right? And so at the end,\ntop and bottom are going to point to the row\nthat contains the suffix where",
    "start": "3267081",
    "end": "3273760"
  },
  {
    "text": "your original read was. And now your next\nquestion is going to be, where is that in the genome?",
    "start": "3273760",
    "end": "3278910"
  },
  {
    "text": "This doesn't do me any good. I mean, the number 1\ndoesn't help me out here, doesn't mean anything.",
    "start": "3278910",
    "end": "3286530"
  },
  {
    "text": "Not good, right? So where is it in the\ngenome is the next question.",
    "start": "3286530",
    "end": "3292230"
  },
  {
    "text": "So we'll get to\nthat in a second. What happens if you\ngive me a read that",
    "start": "3292230",
    "end": "3297700"
  },
  {
    "text": "doesn't match anywhere\nin this index? Well if you give me a read\nthat doesn't match anywhere",
    "start": "3297700",
    "end": "3303010"
  },
  {
    "text": "in this index, what happens\nis the top and bottom become the same. So on top and bottom become the\nsame, it's a failed look up.",
    "start": "3303010",
    "end": "3312710"
  },
  {
    "text": "All right?  And that's because the suffix\ndoesn't exist in the index.",
    "start": "3312710",
    "end": "3322290"
  },
  {
    "text": "And once top and\nbottom become the same, they remain the same\nthroughout that loop.",
    "start": "3322290",
    "end": "3327980"
  },
  {
    "text": "Yes. AUDIENCE: I'm Sally. My main question is\nthat this doesn't provide any leeway for errors.",
    "start": "3327980",
    "end": "3334866"
  },
  {
    "text": "You kind of have to be able\nto present all of your rates. PROFESSOR: Sally, you're\nabsolutely correct.",
    "start": "3334866",
    "end": "3340640"
  },
  {
    "text": "I'm so glad you\nasked that question. Your observation is\nit does not provide any leeway for mismatches.",
    "start": "3340640",
    "end": "3346880"
  },
  {
    "text": "And so unlike all the\nother algorithms we study, which had these very\nnice matrices and ability to assign weights\nto mismatches, this",
    "start": "3346880",
    "end": "3354400"
  },
  {
    "text": "is only doing exact matching. And so what you need\nhelp understanding is, how we can deal\nwith mismatches",
    "start": "3354400",
    "end": "3360320"
  },
  {
    "text": "in the presence of this. And I'll get to that in\nless than 10 minutes.",
    "start": "3360320",
    "end": "3365390"
  },
  {
    "text": "And it won't be quite as elegant\nas what you saw from Professor",
    "start": "3365390",
    "end": "3370569"
  },
  {
    "text": "Berg but it's what\neverybody does. So that's my only\nexcuse for it OK?",
    "start": "3370570",
    "end": "3378250"
  },
  {
    "text": "Yes. AUDIENCE: What is the\nbottom set of arrows doing? What's its significance?",
    "start": "3378250",
    "end": "3384260"
  },
  {
    "text": "PROFESSOR: The significance\nof top and bottom, that's a great question. What the significance\nof top and bottom?",
    "start": "3384260",
    "end": "3389270"
  },
  {
    "text": "Top and bottom bracket\nin that original matrix, the suffixes that are\nmatching the original query.",
    "start": "3389270",
    "end": "3398079"
  },
  {
    "text": "OK? And so between top\nand bottom minus 1 are all of the rows\nthat have a suffix that",
    "start": "3398080",
    "end": "3406000"
  },
  {
    "text": "match our original query. And if top equals bottom,\nthere are no matching suffixes.",
    "start": "3406000",
    "end": "3413250"
  },
  {
    "text": "But assuming there\nare matching suffixes, those are rows that\ncontain a matching suffix. And as we progress along,\ntop and bottom change",
    "start": "3413250",
    "end": "3420480"
  },
  {
    "text": "as the suffixes change\nas we expand the suffix to contain more and more bases.",
    "start": "3420480",
    "end": "3425789"
  },
  {
    "text": "OK? OK. Any other questions?",
    "start": "3425790",
    "end": "3431380"
  },
  {
    "text": "OK. So now back to the question\nover here, which is that OK,",
    "start": "3431380",
    "end": "3437410"
  },
  {
    "text": "I know that we've matched, and\nI know that we have this hit.",
    "start": "3437410",
    "end": "3442970"
  },
  {
    "text": "The question is, where is it\nin the Genome because the fact that it matched row\none of my BWT matrix",
    "start": "3442970",
    "end": "3451510"
  },
  {
    "text": "does me absolutely\nno good at all. Right? Anybody have any ideas about\nhow we could figure out",
    "start": "3451510",
    "end": "3457390"
  },
  {
    "text": "where it is the genome? Given what I've told you so far,\nwhich is that you have the BWT,",
    "start": "3457390",
    "end": "3462850"
  },
  {
    "text": "you have Occ, and\nyou have count, and you can compute\nthe LF function. ",
    "start": "3462850",
    "end": "3469619"
  },
  {
    "text": "Any ideas? Doesn't matter how slow it is. ",
    "start": "3469620",
    "end": "3481110"
  },
  {
    "text": "OK well how could\nI figure out what came before aac in the genome?",
    "start": "3481110",
    "end": "3486470"
  },
  {
    "text": "Yes. AUDIENCE: So, for,\nlike at the beginning, we rebuilt this whole\nstring, starting at the end.",
    "start": "3486470",
    "end": "3493082"
  },
  {
    "text": "You could rebuild the\nwhole string starting at, rebuild the whole genome\nstarting at the 1 and see--",
    "start": "3493082",
    "end": "3499150"
  },
  {
    "text": "PROFESSOR: You could rebuild\nthe entire genome that prepends or occurs\nbefore aac, right?",
    "start": "3499150",
    "end": "3504911"
  },
  {
    "text": "AUDIENCE: Exactly. PROFESSOR: Exactly. So that's what we can do. We could actually do\nour walk left algorithm.",
    "start": "3504911",
    "end": "3512730"
  },
  {
    "text": "We can walk left\nfrom there, find out that we go two steps\nuntil we hit dollar sign,",
    "start": "3512730",
    "end": "3518020"
  },
  {
    "text": "and therefore,\nthe offset is two, where it occurs in the genome.",
    "start": "3518020",
    "end": "3523070"
  },
  {
    "text": "So we can give a match\nposition by walking left. Does everybody see\nthat, that we could",
    "start": "3523070",
    "end": "3528720"
  },
  {
    "text": "walk left to figure where it is? It's not fast, but it works. Yes.",
    "start": "3528720",
    "end": "3534869"
  },
  {
    "text": "AUDIENCE: I'm Ted. PROFESSOR: Hi, Ted. AUDIENCE: So now our function\nfirst has to take the read",
    "start": "3534870",
    "end": "3542185"
  },
  {
    "text": "and it has to align\nit and the same, where the position is built\ninto the end of the function,",
    "start": "3542186",
    "end": "3553028"
  },
  {
    "text": "the speed of the function is now\ndependent on position as well.",
    "start": "3553028",
    "end": "3558873"
  },
  {
    "text": "Is that right? Because the longer it takes, PROFESSOR: I was\nbeing a little bit glib find if it matches\nor not this linear time.",
    "start": "3558873",
    "end": "3565720"
  },
  {
    "text": "Now you're saying,\nhey, wait a minute. I want to know where\nit is in the genome. That's a big bonus, right? And so you'd like to\nknow where that is?",
    "start": "3565720",
    "end": "3571500"
  },
  {
    "text": "Yes. But I still can do\nthat in linear time. And we'll show you how\nto do that in a second. This is not linear time.",
    "start": "3571500",
    "end": "3577970"
  },
  {
    "text": "This actually\nneeds to walk back, order the length of genome\nfor every single query. That's not good.",
    "start": "3577970",
    "end": "3583660"
  },
  {
    "text": "All right? Well, What we could do is, we could\nstore what's called a suffix",
    "start": "3583660",
    "end": "3589320"
  },
  {
    "text": "array with each row and\nsay, where in the genome that position is. Where that row starts.",
    "start": "3589320",
    "end": "3596780"
  },
  {
    "text": "And then maybe a simple look-up. That when you actually have\na hit in row one, ah, OK, start your position\ntwo of the genome.",
    "start": "3596780",
    "end": "3602410"
  },
  {
    "text": " But then the\nproblem with that is",
    "start": "3602410",
    "end": "3607810"
  },
  {
    "text": "that it actually\ntakes a lot of space.",
    "start": "3607810",
    "end": "3613170"
  },
  {
    "text": "And we want to have\ncompact indices. So the trick is what we\ndo is, instead of storing",
    "start": "3613170",
    "end": "3618799"
  },
  {
    "text": "that entire suffix\narray, we store every so many rows,\nlike every 25 rows.",
    "start": "3618800",
    "end": "3624630"
  },
  {
    "text": "And all we do is, we\nwalk left until we hit a row that\nactually has the value, and then we add how many times\nwe walked left, plus the value",
    "start": "3624630",
    "end": "3632860"
  },
  {
    "text": "and we know where we\nare in the genome. So we can sample\nthe suffix array,",
    "start": "3632860",
    "end": "3640119"
  },
  {
    "text": "and by sampling\nthe suffix array, we cut down our storage\nhugely and it's still",
    "start": "3640120",
    "end": "3646472"
  },
  {
    "text": "pretty efficient. Because what we\ncan do is, we just walk left until we hit a\nsample suffix array location",
    "start": "3646472",
    "end": "3651775"
  },
  {
    "text": "and then add the two\nnumbers together. All right? ",
    "start": "3651775",
    "end": "3658880"
  },
  {
    "text": "So that's how it's done. OK? So that's how we\nactually do the alignment",
    "start": "3658880",
    "end": "3668750"
  },
  {
    "text": "and figure out where things are. The one thing I\nhaven't told you about is how to compute\ncount efficiently.",
    "start": "3668750",
    "end": "3676170"
  },
  {
    "text": "Now remember what count does. Count is a function--\nbut this is putting it",
    "start": "3676170",
    "end": "3682450"
  },
  {
    "text": "all together where we're\nmatching this query, we do the steps. We get the match.",
    "start": "3682450",
    "end": "3688400"
  },
  {
    "text": "Then we do walk\nleft once and then we look at the suffix to\nfigure out where we are, right? ",
    "start": "3688400",
    "end": "3696359"
  },
  {
    "text": "The business about count\nis that what we need to do is to figure out the\nrank of a particular base",
    "start": "3696360",
    "end": "3704930"
  },
  {
    "text": "in a position in the transform. And one way to do that is\nto go backwards to the whole transform, counting how many\ng;s occur before this one,",
    "start": "3704930",
    "end": "3713099"
  },
  {
    "text": "and that's very expensive,\nto compute the rank of this particular g. Remember the rank is simply\nthe number of g's that",
    "start": "3713100",
    "end": "3719660"
  },
  {
    "text": "occur before this\none in the BWT. Very simple metric.",
    "start": "3719660",
    "end": "3725300"
  },
  {
    "text": "So instead of\ndoing that, what we can do is, we can build a\ndata structure that every once",
    "start": "3725300",
    "end": "3732500"
  },
  {
    "text": "in awhile, counts how\nmany a's, c's, g's, and t's have occurred\nbefore now in the BWT.",
    "start": "3732500",
    "end": "3739000"
  },
  {
    "text": "And so we're going to sample\nthis with these checkpoints, and then when you want to\ncompute count at any point,",
    "start": "3739000",
    "end": "3746039"
  },
  {
    "text": "you can go to the nearest\ncheckpoint, wherever that is, and make an\nadjustment by counting",
    "start": "3746040",
    "end": "3751340"
  },
  {
    "text": "the number of characters\nbetween you and that checkpoint. Very straightforward.",
    "start": "3751340",
    "end": "3756810"
  },
  {
    "text": "All Right So this, coming back to\nquestion, it's Time, right?",
    "start": "3756810",
    "end": "3763839"
  },
  {
    "text": "--asked you need to\nbuild this checkpointing mechanism at the same time you\nbuild the index, as well as",
    "start": "3763840",
    "end": "3769510"
  },
  {
    "text": "the sampling of\nthe suffix array. So a full index consists\nof the transform",
    "start": "3769510",
    "end": "3774960"
  },
  {
    "text": "itself, which is the genome\ntransformed into its BWT. ",
    "start": "3774960",
    "end": "3781250"
  },
  {
    "text": "And they literally take the\nentire genome and do this. Typically they'll put dollar\nsigns between the chromosomes.",
    "start": "3781250",
    "end": "3788910"
  },
  {
    "text": "So they'll transform\nthe whole thing. It takes a sampling\nof the suffix array we just saw and it takes\nthe checkpointing of the LF",
    "start": "3788910",
    "end": "3798550"
  },
  {
    "text": "function to make\na constant time. And that's what is\ninside of an FM index.",
    "start": "3798550",
    "end": "3806089"
  },
  {
    "text": "OK? Now it's small, which is\none of the nice things,",
    "start": "3806090",
    "end": "3812450"
  },
  {
    "text": "compared to things\nlike suffix tree, suffix arrays, or even other\nkinds of hash structures",
    "start": "3812450",
    "end": "3819610"
  },
  {
    "text": "for looking for seeds, it\nreally is not even twice the size of the genome.",
    "start": "3819610",
    "end": "3824810"
  },
  {
    "text": "So it's a very compact index\nthat is very, very efficient. And so it's a wonderful\ndata structure",
    "start": "3824810",
    "end": "3831250"
  },
  {
    "text": "for doing what we're\ndoing, except we have not dealt with mismatches\nyet, right?",
    "start": "3831250",
    "end": "3836850"
  },
  {
    "text": "And so once again,\nI want to put a plug in for BWA which is really\na marvelous aligner.",
    "start": "3836850",
    "end": "3842250"
  },
  {
    "text": "And we'll talk about\ntomorrow in recitation if you want to know all of the\ndetails of what it actually",
    "start": "3842250",
    "end": "3848140"
  },
  {
    "text": "takes to make this\nwork in practice. Now, it finds exactness\nmatches quickly,",
    "start": "3848140",
    "end": "3857160"
  },
  {
    "text": "but it doesn't really have\nany allowances for mismatches. And the way that bow tie and\nother aligners deal with this,",
    "start": "3857160",
    "end": "3865260"
  },
  {
    "text": "and they're all\npretty consistent, is in the following way, which\nis that they do backtracking.",
    "start": "3865260",
    "end": "3871130"
  },
  {
    "text": "Here's the idea. You try and match\nsomething or match a read",
    "start": "3871130",
    "end": "3879440"
  },
  {
    "text": "and you get to a particular\npoint in the read, and you can't go any further. Top is equal to bottom.",
    "start": "3879440",
    "end": "3886770"
  },
  {
    "text": "So you know that\nthere's no suffix in the genome that\nmatches your query.",
    "start": "3886770",
    "end": "3892370"
  },
  {
    "text": "So what do you do? Well, what you can do is you can\ntry all of the different bases",
    "start": "3892370",
    "end": "3898130"
  },
  {
    "text": "at that position\nbesides the one you tried to see whether\nit matches or not. I can see the horror\ncoming over people.",
    "start": "3898130",
    "end": "3904450"
  },
  {
    "text": "Oh, no, not\nbacktracking, not that. But sometimes it actually works.",
    "start": "3904450",
    "end": "3912640"
  },
  {
    "text": "And just to give you order of\nmagnitude idea about how this works in practice,\nwhen reads don't match,",
    "start": "3912640",
    "end": "3918370"
  },
  {
    "text": "they limit backtracking to about\n125 times in these aligners. so they try pretty hard\nto actually match things.",
    "start": "3918370",
    "end": "3925069"
  },
  {
    "text": "And yes, it is true that\neven with this backtracking, it's still a great approach.",
    "start": "3925070",
    "end": "3932450"
  },
  {
    "text": "And sometimes the first\nthing you try doesn't work, and you have to backtrack,\ntrying multiple bases",
    "start": "3932450",
    "end": "3938839"
  },
  {
    "text": "at that location until\nyou get one that matches. And then you can proceed. OK And you eventually\nwind up at the alignment",
    "start": "3938840",
    "end": "3946670"
  },
  {
    "text": "you see in the lower right\nhand corner, where you're substituting a g for an a,\nan a for a g, excuse me,",
    "start": "3946670",
    "end": "3954170"
  },
  {
    "text": "to make it go forward. Do people understand\nthe essential idea of this idea of backtracking?",
    "start": "3954170",
    "end": "3964370"
  },
  {
    "text": "Does anybody have any comments\nor questions about it?",
    "start": "3964370",
    "end": "3969540"
  },
  {
    "text": "Like ew, or ideas? Yes. AUDIENCE: What about gaps? PROFESSOR: What about gaps?",
    "start": "3969540",
    "end": "3975465"
  },
  {
    "text": " BWA, I believe, processes gaps.",
    "start": "3975465",
    "end": "3982680"
  },
  {
    "text": "But gaps are much, much less\nlikely than missed bases.",
    "start": "3982680",
    "end": "3987720"
  },
  {
    "text": "The other thing is that if\nyou're doing a sequencing library, and you have a read\nthat actually has a gap in it,",
    "start": "3987720",
    "end": "3995850"
  },
  {
    "text": "it's probably the case you\nhave another read that doesn't. For the same sequence.",
    "start": "3995850",
    "end": "4001460"
  },
  {
    "text": "So it is less important\nto process gaps than it is to\nprocess differences.",
    "start": "4001460",
    "end": "4008590"
  },
  {
    "text": "The reason is that\ndifferences mean that it might be a\ndifference of an allele.",
    "start": "4008590",
    "end": "4016069"
  },
  {
    "text": "In other words, it\nmight be that your base is different than\nthe reference genome. Indels are also possible.",
    "start": "4016070",
    "end": "4023484"
  },
  {
    "text": "And there are\ndifferent strategies of dealing with those. That would be a great question\nfor Hang tomorrow about gaps.",
    "start": "4023484",
    "end": "4029189"
  },
  {
    "text": "Because he can tell you\nin practice what they do. And we'll get into\na little bit of that at the end of today's lecture. Yes.",
    "start": "4029189",
    "end": "4034289"
  },
  {
    "text": "Question? AUDIENCE: I'm Levy. PROFESSOR: Hi, Levy. AUDIENCE: How do\nyou make sure when you're backtracking\nthat you end up with the best possible match?",
    "start": "4034289",
    "end": "4039638"
  },
  {
    "text": "Do you just go down the first-- PROFESSOR: The\nquestions is how do you guarantee you wind up with\nthe best possible match?",
    "start": "4039638",
    "end": "4046690"
  },
  {
    "text": "The short answer\nis that you don't. There's a longer\nanswer, which we're about to get to, about how\nwe try to approximate that.",
    "start": "4046690",
    "end": "4054200"
  },
  {
    "text": "And what judgment you would use\nto get to what we would think is a practically good match.",
    "start": "4054200",
    "end": "4060220"
  },
  {
    "text": "OK? But in terms of\ntheoretically optimal, the answer is, it doesn't\nattempt to do that.",
    "start": "4060220",
    "end": "4065632"
  },
  {
    "text": "That's a good question. Yes. AUDIENCE: In practice, does\nthis backtracking method at the same time as you're\ncomputing the matches or--",
    "start": "4065632",
    "end": "4074660"
  },
  {
    "text": "PROFESSOR: Yes. So what's happening is,\nyou remember that loop where we're going\naround, where we were moving the top\nand bottom pointers.",
    "start": "4074660",
    "end": "4080990"
  },
  {
    "text": "If you get to a point\nwhere they come together, then you would at that\npoint, begin backtracking",
    "start": "4080990",
    "end": "4087299"
  },
  {
    "text": "and try different bases. And if you look, I\nposted the BWA paper on the Stellar website.",
    "start": "4087300",
    "end": "4092400"
  },
  {
    "text": "And if you look in\none of the figures, the algorithm is there,\nAnd you'll actually see, if you can deconvolute\nwhat's going on,",
    "start": "4092400",
    "end": "4099210"
  },
  {
    "text": "that inside the loop, it's\nactually doing exactly that. Yes. Question.",
    "start": "4099210",
    "end": "4104689"
  },
  {
    "text": "AUDIENCE: In practice, is the\nnumber of errors is small, would it make sense\njust to use [INAUDIBLE]?",
    "start": "4104689",
    "end": "4109991"
  },
  {
    "text": " PROFESSOR: We're\ngoing to get to that. I think the question was, if\nthe number of errors is small,",
    "start": "4109991",
    "end": "4118369"
  },
  {
    "text": "would it be good to actually\nuse a different algorithm, drop into a different algorithm? So there are algorithms\non FM index assisted",
    "start": "4118370",
    "end": "4127170"
  },
  {
    "text": "Smith Waterman, for example. Where you get to\nthe neighborhood by a fast technique and\nthen you do a full search,",
    "start": "4127170",
    "end": "4134509"
  },
  {
    "text": "using a more in depth\nprinciples methodology, right? And so there's some papers\nI have in the slides here",
    "start": "4134510",
    "end": "4140549"
  },
  {
    "text": "that I referenced\nthat do exactly that. These are all great questions.",
    "start": "4140550",
    "end": "4146920"
  },
  {
    "text": "OK. Yes. AUDIENCE: If you're-- If\nyou only decide to backtrack a certain number of\ntimes, like 100 times,",
    "start": "4146920",
    "end": "4153580"
  },
  {
    "text": "then wouldn't like the alignment\nbe biased towards the end of the short read? PROFESSOR: I am so glad\nyou asked this question.",
    "start": "4153580",
    "end": "4160850"
  },
  {
    "text": "The question is, and\nwhat was your name again? AUDIENCE: Kevin. PROFESSOR: Kevin. Kevin asks, gee, if you're\nmatching from the right",
    "start": "4160850",
    "end": "4168509"
  },
  {
    "text": "to the left, and you're\ndoing backtracking, isn't this going to\nbe biased towards the right into the read,\nin some sense, right?",
    "start": "4168510",
    "end": "4175028"
  },
  {
    "text": "Because if the right into\nthe read doesn't match, then you're going\nto give up, right? In fact, what we know is\nthe left end of the read",
    "start": "4175029",
    "end": "4182399"
  },
  {
    "text": "is the better end of the read. Because sequences are done five\nprime to three prime and thus",
    "start": "4182399",
    "end": "4188568"
  },
  {
    "text": "typically, the highest quality\nscores or the best quality scores are in the left\nhand side of the read.",
    "start": "4188569",
    "end": "4195130"
  },
  {
    "text": "So do you have any idea about\nhow you would cope with that? AUDIENCE: You could just\nreverse one of them.",
    "start": "4195130",
    "end": "4201324"
  },
  {
    "text": "But you'd reverse-- PROFESSOR: Exactly what they do. They execute the entire genome\nand they reverse it and then they index that.",
    "start": "4201324",
    "end": "4208756"
  },
  {
    "text": "And so, when they create\nwhat's called a mirror index, they just reverse\nthe entire genome, and now you can\nmatch left to right,",
    "start": "4208756",
    "end": "4213889"
  },
  {
    "text": "as opposed to right to left. Pretty cool, huh? Yeah. ",
    "start": "4213889",
    "end": "4221090"
  },
  {
    "text": "So backtracking, just note that\nthere are different alignments",
    "start": "4221090",
    "end": "4226445"
  },
  {
    "text": "that can occur across\ndifferent backtracking paths. And this is not\noptimal in any sense.",
    "start": "4226445",
    "end": "4231849"
  },
  {
    "text": "And to your question\nabout how you actually go about picking a\nbacktracking strategy,",
    "start": "4231850",
    "end": "4238220"
  },
  {
    "text": "assuming we're matching\nfrom right to left again for a moment, what you can\ndo is, if you hit a mismatch,",
    "start": "4238220",
    "end": "4246510"
  },
  {
    "text": "you backtrack to the lowest\nquality based position, according to PHRED scores.",
    "start": "4246510",
    "end": "4251660"
  },
  {
    "text": "We talked about\nPHRED scores earlier, which are shown\nhere on the slide. And you backtrack there and\nyou try a different base",
    "start": "4251660",
    "end": "4258840"
  },
  {
    "text": "and you move forward from there. So you're assuming\nthat the read, which is the query, which is\nassociated quality scores,",
    "start": "4258840",
    "end": "4266220"
  },
  {
    "text": "is most suspect where the\nquality score is the lowest. So you backtrack to the right\nto the leftmost lowest quality",
    "start": "4266220",
    "end": "4275020"
  },
  {
    "text": "score. Now it's a very simple approach.",
    "start": "4275020",
    "end": "4281160"
  },
  {
    "text": "Right? And we talked a little\nbit about the idea that you don't necessarily want\nto match from the right side",
    "start": "4281160",
    "end": "4288080"
  },
  {
    "text": "and thus, typically the\nparameters to algorithms like this include,\nhow many mismatches",
    "start": "4288080",
    "end": "4293320"
  },
  {
    "text": "are allowed in the first L\nbases on the left end, the sum of the mismatch qualities\nyou're going to tolerate, and so forth.",
    "start": "4293320",
    "end": "4298579"
  },
  {
    "text": "And you'll find that these align\nyourself with a lot of switches that you can set. And you can consult\nwith your colleagues",
    "start": "4298580",
    "end": "4304025"
  },
  {
    "text": "about how to set switches,\nbecause it depends upon the particular type\nof data you're aligning, the length of the\nreads and so forth.",
    "start": "4304025",
    "end": "4310560"
  },
  {
    "text": "But suffice it to say,\nwhen you're doing this,",
    "start": "4310560",
    "end": "4315780"
  },
  {
    "text": "typically we create these mirror\nindices that actually reverse the entire genome\nand then index it.",
    "start": "4315780",
    "end": "4321300"
  },
  {
    "text": "So we can either match either\nright to left or left to right. And so for example, if\nyou have a mirror index,",
    "start": "4321300",
    "end": "4329650"
  },
  {
    "text": "and you only tolerate\nup to two errors, then you know that\neither, you're",
    "start": "4329650",
    "end": "4334946"
  },
  {
    "text": "going to get the\nfirst half right in one index or\nthe mirror index. And so you can use both indices\nin parallel, the forward",
    "start": "4334946",
    "end": "4342060"
  },
  {
    "text": "and the reverse\nindex of the genome, and then get pretty\nfar into the read before you have to\nstart backtracking.",
    "start": "4342060",
    "end": "4349990"
  },
  {
    "text": "There are all these\nsorts of techniques, shall we say, to\nactually overcome some the limitations of backtracking.",
    "start": "4349990",
    "end": "4356900"
  },
  {
    "text": "Any questions about\nbacktracking at all? Yes. AUDIENCE: Is it\ntrivial knowing the BWT",
    "start": "4356900",
    "end": "4364145"
  },
  {
    "text": "originally to find\nthe mirror BWT? Like for example, PROFESSOR: No, it's not trivial.",
    "start": "4364145",
    "end": "4370632"
  },
  {
    "text": "AUDIENCE: So it's not\nlike a simple matrix transforming [INAUDIBLE]. PROFESSOR: No. Not to my knowledge.",
    "start": "4370632",
    "end": "4375957"
  },
  {
    "text": "I think you start with the\noriginal genome, you reverse it and then you compute\nthe BWT with that. Right? That's pretty easy to do.",
    "start": "4375957",
    "end": "4382832"
  },
  {
    "text": "And Hang was\nexplaining to me today how you compute his new\nways of compute BWT, which don't actually involve\nsorting the entire thing.",
    "start": "4382832",
    "end": "4389880"
  },
  {
    "text": "There are insertion ways of\ncomputing the BWT that are very [INAUDIBLE], and you could\nask him this question tomorrow",
    "start": "4389880",
    "end": "4395060"
  },
  {
    "text": "if you care to come. All right just to give you an\nidea on how complex things are,",
    "start": "4395060",
    "end": "4400650"
  },
  {
    "text": "to build an index\nlike this, takes, for the entire\nhuman genome, we're",
    "start": "4400650",
    "end": "4405770"
  },
  {
    "text": "talking five hours\nof compute time to compute an index to give\nyou an order of magnitude",
    "start": "4405770",
    "end": "4412220"
  },
  {
    "text": "time for how to compute the BWT. the LF checkpoints, and\nthe suffix array sampling.",
    "start": "4412220",
    "end": "4419780"
  },
  {
    "text": "Something like that. So it's really not\ntoo bad to compute the index of the entire genome.",
    "start": "4419780",
    "end": "4426050"
  },
  {
    "text": "And to do searches, you\nknow, we're talking about, like on a four\nprocessor machine,",
    "start": "4426050",
    "end": "4431070"
  },
  {
    "text": "we're talking\nabout maybe upwards of 100 million rads\nper hour to map. So if you have 200\nmillion reads and you",
    "start": "4431070",
    "end": "4437400"
  },
  {
    "text": "want to map them to a genome,\nor align them as it's sometimes called, it's going to take\nyou a couple hours to do it.",
    "start": "4437400",
    "end": "4443969"
  },
  {
    "text": "So this is sort of the order of\nmagnitude of the time required to do these sorts of functions.",
    "start": "4443970",
    "end": "4450730"
  },
  {
    "text": "And there are a\ncouple fine points I wanted to end with today. The first is we haven't\ntalked at all about paired,",
    "start": "4450730",
    "end": "4456780"
  },
  {
    "text": "erred, and read alignment. ",
    "start": "4456780",
    "end": "4463190"
  },
  {
    "text": "In paired read alignment,\nyou get, for each molecule, you get two reads.",
    "start": "4463190",
    "end": "4469180"
  },
  {
    "text": "One starting at the five\nprime end on one side, , and one starting from the five\nprime end on the other side.",
    "start": "4469180",
    "end": "4475840"
  },
  {
    "text": "So typical read links might\nbe 100 base pairs on the left and 100 base pairs on the right.",
    "start": "4475840",
    "end": "4481490"
  },
  {
    "text": "What is called the insert\nsize is the total size of the molecule from five prime\nend to five prime end to read.",
    "start": "4481490",
    "end": "4489260"
  },
  {
    "text": "And the stuff in the\nmiddle is not observed. We actually don't\nknow what it is.",
    "start": "4489260",
    "end": "4494600"
  },
  {
    "text": "And we also don't\nknow how long it is. Now when these\nlibraries are prepared,",
    "start": "4494600",
    "end": "4500460"
  },
  {
    "text": "size selection is\ndone, so we get a rough idea of\nwhat it should be. We can actually\ncompute by looking",
    "start": "4500460",
    "end": "4506969"
  },
  {
    "text": "at where things align on the\ngenome, what it actually is. But we don't know absolutely.",
    "start": "4506970",
    "end": "4512190"
  },
  {
    "text": " If we were able to\nstrictly control",
    "start": "4512190",
    "end": "4518010"
  },
  {
    "text": "the length of the\nunobserved part, which is almost impossible to do, then\nwe would get molecular rulers.",
    "start": "4518010",
    "end": "4525370"
  },
  {
    "text": "And we would know\nexactly down to the base, whether or not there were\nindels between the left read",
    "start": "4525370",
    "end": "4530480"
  },
  {
    "text": "and the right read when\nwe did the alignment. We actually don't\nhave that today.",
    "start": "4530480",
    "end": "4535790"
  },
  {
    "text": "The sequencing\ninstrument actually identifies the read\npairs in its output. That's the only way to do this.",
    "start": "4535790",
    "end": "4541660"
  },
  {
    "text": "So when you get an output\nfile, like a fast Q file, from a sequencing\ninstrument, it will tell you,",
    "start": "4541660",
    "end": "4546920"
  },
  {
    "text": "for a given molecule,\nhere's the left read and here's the right read. Although left and right are\nreally sort of misnomers",
    "start": "4546920",
    "end": "4552480"
  },
  {
    "text": "because there really is\nno left and right, right? This is one end and then\nthis is the other end. ",
    "start": "4552480",
    "end": "4559056"
  },
  {
    "text": "Typical ways of\nprocessing these paired reads, first you align\nleft and right reads. And they could really\nonly be oriented",
    "start": "4559056",
    "end": "4565935"
  },
  {
    "text": "with respect to a\ngenome sequence where you say that one has a lower\ncoordinate than the other one when you're actually\ndoing the alignment.",
    "start": "4565935",
    "end": "4572680"
  },
  {
    "text": "And if one read fails to align\nuniquely, then what you can do is, you know what neighborhood\nyou're in because you know,",
    "start": "4572680",
    "end": "4578100"
  },
  {
    "text": "roughly speaking, what\nthe insert size is, so you can do Smith Waterman\nto actually try and locate",
    "start": "4578100",
    "end": "4584420"
  },
  {
    "text": "the other read in\nthat neighborhood. Or you can tolerate\nmultiply mapped reads.",
    "start": "4584420",
    "end": "4590970"
  },
  {
    "text": "One thing that I did not\nmention to you explicitly, is that when you match\nthe entire query,",
    "start": "4590970",
    "end": "4596380"
  },
  {
    "text": "and top and bottom are more\nthan one away from each other, that means you've got\nmany places in the genome",
    "start": "4596380",
    "end": "4601460"
  },
  {
    "text": "that things map. And thus you may report\nall of those locations or I might report the first one.",
    "start": "4601460",
    "end": "4609030"
  },
  {
    "text": "So that's one bit of insight\ninto how to do a map paired",
    "start": "4609030",
    "end": "4614699"
  },
  {
    "text": "reads. And these are becoming\nvery important because as sequencing\ncosts go down,",
    "start": "4614700",
    "end": "4619900"
  },
  {
    "text": "people are doing\nmore and more paired and sequencing\nbecause they give you",
    "start": "4619900",
    "end": "4625240"
  },
  {
    "text": "much more information about the\noriginal library you created and for certain protocols can\nallow you to localize events",
    "start": "4625240",
    "end": "4631609"
  },
  {
    "text": "in the genome far\nmore accurately.  Final piece of advice\non considerations",
    "start": "4631609",
    "end": "4638930"
  },
  {
    "text": "for read alignment. We talked about the idea that\nsome reads will map or align",
    "start": "4638930",
    "end": "4644780"
  },
  {
    "text": "uniquely to the genome\nand some will multimap.",
    "start": "4644780",
    "end": "4650389"
  },
  {
    "text": "You know that the genome is\nroughly 50% repeat sequence. And thus it's likely that if\nyou have a particular read",
    "start": "4650390",
    "end": "4658600"
  },
  {
    "text": "molecule, there's\na reasonable chance that it will map to\nmultiple locations.",
    "start": "4658600",
    "end": "4664029"
  },
  {
    "text": "Is there a question here? No. OK. You have to figure out what your\ndesired mismatch tolerance is",
    "start": "4664029",
    "end": "4669900"
  },
  {
    "text": "when you're doing alignment\nand set the parameters to your aligner carefully,\nafter reading the documentation",
    "start": "4669900",
    "end": "4676610"
  },
  {
    "text": "thoroughly, because\nas you could tell, there's no beautiful\nmatrix formulation like there is with a\nwell established basis",
    "start": "4676610",
    "end": "4685420"
  },
  {
    "text": "in the literature,\nrather it's more ad hoc. And you need to figure\nout what the desired",
    "start": "4685420",
    "end": "4690960"
  },
  {
    "text": "processing is for paired reads. So what we've talked\nabout today is",
    "start": "4690960",
    "end": "4696450"
  },
  {
    "text": "we started off talking about\nlibrary complexity and the idea that when we get a bunch\nof reads from a sequencer,",
    "start": "4696450",
    "end": "4703910"
  },
  {
    "text": "we can use that collection\nof reads to estimate the complexity of\nour original library and whether or\nnot something went",
    "start": "4703910",
    "end": "4710210"
  },
  {
    "text": "wrong in the biological\nprocessing that we were doing. Assuming it's a\ngood set of reads,",
    "start": "4710210",
    "end": "4715500"
  },
  {
    "text": "we need to figure out where\nthey align to the genome. So we talked about this idea\nof creating a full text minute",
    "start": "4715500",
    "end": "4721389"
  },
  {
    "text": "size index, which involves\na Burrows-Wheeler transform. And we saw how we can\ncompute that and throw away",
    "start": "4721390",
    "end": "4727650"
  },
  {
    "text": "almost everything else\nexcept for the BWT itself, the suffix array\ncheckpoints, and the FM index",
    "start": "4727650",
    "end": "4735340"
  },
  {
    "text": "checkpoints to be able\nto reconstruct this at a relatively modest increase\nin size over the genome",
    "start": "4735340",
    "end": "4742520"
  },
  {
    "text": "itself and do this very,\nvery rapid matching, albeit with more problematic\nmatching of mismatches.",
    "start": "4742520",
    "end": "4750470"
  },
  {
    "text": "And then we turned\nto the question of how to deal with those\nmismatches with backtracking",
    "start": "4750470",
    "end": "4755930"
  },
  {
    "text": "and some fine points on\npaired end alignment. So that is the end\nof today's lecture.",
    "start": "4755930",
    "end": "4766679"
  },
  {
    "text": "On Tuesday of next\nweek, we'll talk about how to actually construct\na reference genome, which",
    "start": "4766680",
    "end": "4773840"
  },
  {
    "text": "is a really neat thing\nto be able to do, take a whole bunch of reads, put\nthe puzzle back together again.",
    "start": "4773840",
    "end": "4780630"
  },
  {
    "text": "I would encourage you to\nmake sure you understand how this indexing\nstrategy works. Look at the slides.",
    "start": "4780630",
    "end": "4786250"
  },
  {
    "text": "Feel free to ask any of us. Thanks so much for\nyour attention. Welcome back. Have a great weekend.",
    "start": "4786250",
    "end": "4791800"
  },
  {
    "text": "We'll see you next Tuesday. ",
    "start": "4791800",
    "end": "4805902"
  }
]