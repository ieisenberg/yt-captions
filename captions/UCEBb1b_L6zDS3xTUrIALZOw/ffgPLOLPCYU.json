[
  {
    "text": "Let's take a closer look at how macros work\nin UASM.",
    "start": "1180",
    "end": "5490"
  },
  {
    "text": "Here we see the definition of the macro \"consec\"\nwhich has a single parameter \"n\".",
    "start": "5490",
    "end": "11020"
  },
  {
    "text": "The body of the macro is a sequence of four\nexpressions.",
    "start": "11020",
    "end": "15040"
  },
  {
    "text": "When there's an invocation of the \"consec\"\nmacro, in this example with the argument 37,",
    "start": "15040",
    "end": "20180"
  },
  {
    "text": "the body of the macro is expanded replacing\nall occurrences of \"n\" with the argument 37.",
    "start": "20180",
    "end": "27150"
  },
  {
    "text": "The resulting text is then processed as if\nit had appeared in place of the macro invocation.",
    "start": "27150",
    "end": "33480"
  },
  {
    "text": "In this example, the four expressions are\nevaluated to give a sequence of four values",
    "start": "33480",
    "end": "37980"
  },
  {
    "text": "that will be placed in the next four bytes\nof the output array.",
    "start": "37980",
    "end": "43040"
  },
  {
    "text": "Macro expansions may contain other macro invocations,\nwhich themselves will be expanded, continuing",
    "start": "43040",
    "end": "49010"
  },
  {
    "text": "until all that's left are expressions to be\nevaluated.",
    "start": "49010",
    "end": "52789"
  },
  {
    "text": "Here we see the macro definition for WORD,\nwhich assembles its argument into two consecutive",
    "start": "52790",
    "end": "57899"
  },
  {
    "text": "bytes.",
    "start": "57899",
    "end": "59170"
  },
  {
    "text": "And for the macro LONG, which assembles its\nargument into four consecutive bytes, using",
    "start": "59170",
    "end": "64430"
  },
  {
    "text": "the WORD macro to process the low 16 bits\nof the value, then the high 16 bits of the",
    "start": "64430",
    "end": "70000"
  },
  {
    "text": "value.",
    "start": "70000",
    "end": "71000"
  },
  {
    "text": "These two UASM statements cause the constant\n0xDEADBEEF to converted to 4 bytes, which",
    "start": "71000",
    "end": "77540"
  },
  {
    "text": "are then deposited in the output array starting\nat index 0x100.",
    "start": "77540",
    "end": "83190"
  },
  {
    "text": "Note that the Beta expects the least-significant\nbyte of a multi-byte value to be stored at",
    "start": "83190",
    "end": "87600"
  },
  {
    "text": "the lowest byte address.",
    "start": "87600",
    "end": "89850"
  },
  {
    "text": "So the least-significant byte 0xEF is placed\nat address 0x100 and the most-significant",
    "start": "89850",
    "end": "96048"
  },
  {
    "text": "byte 0xDE is placed at address 0x103.",
    "start": "96049",
    "end": "101330"
  },
  {
    "text": "This is the \"little-endian\" convention for\nmulti-byte values: the least-significant byte",
    "start": "101330",
    "end": "105799"
  },
  {
    "text": "comes first.",
    "start": "105799",
    "end": "107670"
  },
  {
    "text": "Intel's x86 architecture is also little-endian.",
    "start": "107670",
    "end": "112250"
  },
  {
    "text": "There is a symmetrical \"big-endian\" convention\nwhere the most-significant byte comes first.",
    "start": "112250",
    "end": "118110"
  },
  {
    "text": "Both conventions are in active use and, in\nfact, some ISAs can be configured to use either",
    "start": "118110",
    "end": "124299"
  },
  {
    "text": "convention!",
    "start": "124299",
    "end": "125409"
  },
  {
    "text": "There is no right answer for which convention\nto use, but the fact that there two conventions",
    "start": "125409",
    "end": "129890"
  },
  {
    "text": "means that we have to be alert for the need\nto convert the representation of multi-byte",
    "start": "129890",
    "end": "135189"
  },
  {
    "text": "values when moving values between one ISA\nand another, e.g., when we send a data file",
    "start": "135189",
    "end": "141999"
  },
  {
    "text": "to another user.",
    "start": "141999",
    "end": "144569"
  },
  {
    "text": "As you can imagine there are strong advocates\nfor both schemes who are happy to defend their",
    "start": "144569",
    "end": "148909"
  },
  {
    "text": "point of view at great length.",
    "start": "148909",
    "end": "150840"
  },
  {
    "text": "Given the heat of the discussion, it's appropriate\nthat the names for the conventions were drawn",
    "start": "150840",
    "end": "156400"
  },
  {
    "text": "from Jonathan Swift's \"Gulliver's Travels\"\nin which a civil war is fought over whether",
    "start": "156400",
    "end": "161900"
  },
  {
    "text": "to open a soft-boiled egg at its big end or\nits little end.",
    "start": "161900",
    "end": "167269"
  },
  {
    "text": "Let's look at the macros used to assemble\nBeta instructions.",
    "start": "167269",
    "end": "171829"
  },
  {
    "text": "The BETAOP helper macro supports the 3-register\ninstruction format, taking as arguments the",
    "start": "171829",
    "end": "177558"
  },
  {
    "text": "values to be placed in the OPCODE, Ra, Rb,\nand Rc fields.",
    "start": "177559",
    "end": "184109"
  },
  {
    "text": "The \".align 4\" directive is a bit of administrative\nbookkeeping to ensure that instructions will",
    "start": "184109",
    "end": "189019"
  },
  {
    "text": "have a byte address that's a multiple of 4,\ni.e., that they span exactly one 32-bit word",
    "start": "189019",
    "end": "195670"
  },
  {
    "text": "in memory.",
    "start": "195670",
    "end": "197640"
  },
  {
    "text": "That's followed by an invocation of the LONG\nmacro to generate the 4 bytes of binary data",
    "start": "197640",
    "end": "202819"
  },
  {
    "text": "representing the value of the expression shown\nhere.",
    "start": "202819",
    "end": "206760"
  },
  {
    "text": "The expression is where the actual assembly\nof the fields takes place.",
    "start": "206760",
    "end": "211269"
  },
  {
    "text": "Each field is limited to requisite number\nof bits using the modulo operator (%), then",
    "start": "211269",
    "end": "216260"
  },
  {
    "text": "shifted left (<<) to the correct position\nin the 32-bit word.",
    "start": "216260",
    "end": "221340"
  },
  {
    "text": "And here are the helper macros for the instructions\nthat use a 16-bit constant as the second operand.",
    "start": "221340",
    "end": "228290"
  },
  {
    "text": "Let's follow the assembly of an ADDC instruction\nto see how this works.",
    "start": "228290",
    "end": "232698"
  },
  {
    "text": "The ADDC macro expands into an invocation\nof the BETAOPC helper macro, passing along",
    "start": "232699",
    "end": "238689"
  },
  {
    "text": "the correct value for the ADDC opcode, along\nwith the three operands.",
    "start": "238689",
    "end": "244799"
  },
  {
    "text": "The BETAOPC macro does the following arithmetic:\nthe OP argument, in this case the value 0x30,",
    "start": "244799",
    "end": "251439"
  },
  {
    "text": "is shifted left to occupy the high-order 6\nbits of the instruction.",
    "start": "251439",
    "end": "256380"
  },
  {
    "text": "Then the RA argument, in this case 15, is\nplaced in its proper location.",
    "start": "256380",
    "end": "262370"
  },
  {
    "text": "The 16-bit constant -32768 is positioned in\nthe low 16 bits of the instruction.",
    "start": "262370",
    "end": "269470"
  },
  {
    "text": "And, finally, the Rc argument, in this case\n0, is positioned in the Rc field of the instruction.",
    "start": "269470",
    "end": "278080"
  },
  {
    "text": "You can see why we call this processing \"assembling\nan instruction\".",
    "start": "278080",
    "end": "282270"
  },
  {
    "text": "The binary representation of an instruction\nis assembled from the binary values for each",
    "start": "282270",
    "end": "286810"
  },
  {
    "text": "of the instruction fields.",
    "start": "286810",
    "end": "289220"
  },
  {
    "text": "It's not a complicated process, but it requires\na lot of shifting and masking, tasks that",
    "start": "289220",
    "end": "294940"
  },
  {
    "text": "we're happy to let a computer handle.",
    "start": "294940",
    "end": "297939"
  },
  {
    "text": "Here's the entire sequence of macro expansions\nthat assemble this ADDC instruction into an",
    "start": "297939",
    "end": "304069"
  },
  {
    "text": "appropriate 32-bit binary value in main memory.",
    "start": "304069",
    "end": "308460"
  },
  {
    "text": "You can see that the knowledge of Beta instruction\nformats and opcode values is built into the",
    "start": "308460",
    "end": "313310"
  },
  {
    "text": "bodies of the macro definitions.",
    "start": "313310",
    "end": "315680"
  },
  {
    "text": "The UASM processing is actually quite general.",
    "start": "315680",
    "end": "319280"
  },
  {
    "text": "With a different set of macro definitions\nit could process assembly language programs",
    "start": "319280",
    "end": "323310"
  },
  {
    "text": "for almost any ISA!",
    "start": "323310",
    "end": "327080"
  },
  {
    "text": "All the macro definitions for the Beta ISA\nare provided in the beta.uasm file, which",
    "start": "327080",
    "end": "332590"
  },
  {
    "text": "is included in each of the assembly language\nlab assignments.",
    "start": "332590",
    "end": "337319"
  },
  {
    "text": "Note that we include some convenience macros\nto define shorthand representations that provide",
    "start": "337319",
    "end": "342099"
  },
  {
    "text": "common default values for certain operands.",
    "start": "342099",
    "end": "345330"
  },
  {
    "text": "For example, except for procedure calls, we\ndon't care about the PC+4 value saved in the",
    "start": "345330",
    "end": "351110"
  },
  {
    "text": "destination register by branch instructions,\nso almost always would specify R31 as the",
    "start": "351110",
    "end": "358090"
  },
  {
    "text": "Rc register, effectively discarding the PC+4\nvalue saved by branches.",
    "start": "358090",
    "end": "364389"
  },
  {
    "text": "So we define two-argument branch macros that\nautomatically provide R31 as the destination",
    "start": "364389",
    "end": "369780"
  },
  {
    "text": "register.",
    "start": "369780",
    "end": "370780"
  },
  {
    "text": "Saves some typing, and, more importantly,\nit makes it easier to understand the assembly",
    "start": "370780",
    "end": "376060"
  },
  {
    "text": "language program.",
    "start": "376060",
    "end": "378449"
  },
  {
    "text": "Here are a whole set of convenience macros\nintended to make programs more readable.",
    "start": "378449",
    "end": "383300"
  },
  {
    "text": "For example, unconditional branches can be\nwritten using the BR() macro rather than the",
    "start": "383300",
    "end": "388340"
  },
  {
    "text": "more cumbersome BEQ(R31,...).",
    "start": "388340",
    "end": "392449"
  },
  {
    "text": "And it's more readable to use branch-false\n(BF) and branch-true (BT) macros when testing",
    "start": "392449",
    "end": "396930"
  },
  {
    "text": "the results of a compare instruction.",
    "start": "396930",
    "end": "400120"
  },
  {
    "text": "And note the PUSH and POP macros at the bottom\nof page.",
    "start": "400120",
    "end": "403669"
  },
  {
    "text": "These expand into multi-instruction sequences,\nin this case to add and remove values from",
    "start": "403669",
    "end": "408979"
  },
  {
    "text": "a stack data structure pointed to by the SP\nregister.",
    "start": "408979",
    "end": "414020"
  },
  {
    "text": "We call these macros \"pseudo instructions\"\nsince they let us provide the programmer with",
    "start": "414020",
    "end": "418560"
  },
  {
    "text": "what appears a larger instruction set,\nalthough underneath the covers we've just",
    "start": "418560",
    "end": "423249"
  },
  {
    "text": "using the same small instruction repertoire\ndeveloped in Lecture 9.",
    "start": "423249",
    "end": "428680"
  },
  {
    "text": "In this example we've rewritten the original\ncode we had for the factorial computation",
    "start": "428680",
    "end": "433960"
  },
  {
    "text": "using pseudo instructions.",
    "start": "433960",
    "end": "435960"
  },
  {
    "text": "For example, CMOVE is a pseudo instruction\nfor moving small constants into a register.",
    "start": "435960",
    "end": "442009"
  },
  {
    "text": "It's easier for us to read and understand\nthe intent of a \"constant move\" operation",
    "start": "442009",
    "end": "447080"
  },
  {
    "text": "than an \"add a value to 0\" operation provided\nby the ADDC expansion of CMOVE.",
    "start": "447080",
    "end": "453599"
  },
  {
    "text": "Anything we can do to remove the cognitive\nclutter will be very beneficial in the long",
    "start": "453599",
    "end": "458060"
  },
  {
    "text": "run.",
    "start": "458060",
    "end": "458330"
  }
]