[
  {
    "text": "Good morning.\nToday we're going to talk about",
    "start": "8000",
    "end": "14000"
  },
  {
    "text": "augmenting data structures. ",
    "start": "14000",
    "end": "27000"
  },
  {
    "text": "And this is a --\nNormally, rather than designing",
    "start": "27000",
    "end": "33000"
  },
  {
    "text": "data structures from scratch,\nyou tend to take existing data structures and build your\nfunctionality into them.",
    "start": "33000",
    "end": "40000"
  },
  {
    "text": "And that is a process we call\ndata-structure augmentation. And this also today marks sort\nof the start of the design phase",
    "start": "40000",
    "end": "48000"
  },
  {
    "text": "of the class.\nWe spent a lot of time doing analysis up to this point.\nAnd now we're still going to",
    "start": "48000",
    "end": "54000"
  },
  {
    "text": "learn some new analytical\ntechniques. But we're going to start\nturning our focus more toward",
    "start": "54000",
    "end": "61000"
  },
  {
    "text": "how is it that you design\nefficient data structures, efficient algorithms for\nvarious problems?",
    "start": "61000",
    "end": "68000"
  },
  {
    "text": "So this is a good example of\nthe design phase. It is a really good idea,\nat this point,",
    "start": "68000",
    "end": "74000"
  },
  {
    "text": "if you have not done so,\nto review the textbook Appendix B.\nYou should take that as",
    "start": "74000",
    "end": "80000"
  },
  {
    "text": "additional reading to make sure\nthat you are familiar, because over the next few weeks\nwe're going to hit almost every",
    "start": "80000",
    "end": "89000"
  },
  {
    "text": "topic in Appendix B.\nIt is going to be brought to bear on the subjects that we're\ntalking about.",
    "start": "89000",
    "end": "97000"
  },
  {
    "text": "If you're going to go scramble\nto learn that while you're also trying to learn the material,\nit will be more onerous than if",
    "start": "97000",
    "end": "105000"
  },
  {
    "text": "you just simply review the\nmaterial now. We're going to start with an\nillustration of the problem of",
    "start": "105000",
    "end": "112000"
  },
  {
    "text": "dynamic order statistics. ",
    "start": "112000",
    "end": "120000"
  },
  {
    "text": "We are familiar with finding\nthings like the median or the kth order statistic or whatever.\nNow we want to do the same",
    "start": "120000",
    "end": "128000"
  },
  {
    "text": "thing but we want to do it with\na dynamic set. Rather than being given all the\ndata upfront,",
    "start": "128000",
    "end": "134000"
  },
  {
    "text": "we're going to have a set.\nAnd then at some point somebody is going to be doing typically\ninsert and delete.",
    "start": "134000",
    "end": "141000"
  },
  {
    "text": "And at some point somebody is\ngoing to say OK, select for me the ith largest\nguy or the ith smallest guy --",
    "start": "141000",
    "end": "150000"
  },
  {
    "start": "150000",
    "end": "161000"
  },
  {
    "text": "-- in the dynamic set.\nOr, something like OS-Rank of",
    "start": "161000",
    "end": "178000"
  },
  {
    "text": "x.\nThe rank of x in the sorted",
    "start": "178000",
    "end": "185000"
  },
  {
    "text": "order of the set. ",
    "start": "185000",
    "end": "194000"
  },
  {
    "text": "So either I want to just say,\nfor example, if I gave n over 2,\nif I had n elements in the set and I said n over 2,\nI am asking for the median.",
    "start": "194000",
    "end": "202000"
  },
  {
    "text": "I could be asking for the mean.\nI could be asking for quartile. Here I take an element and say,\nOK, so where does that element",
    "start": "202000",
    "end": "209000"
  },
  {
    "text": "fall among all of the other\nelements in the set? And, in addition,\nthese are dynamic sets so I",
    "start": "209000",
    "end": "217000"
  },
  {
    "text": "want to be able to do insert and\ndelete, I want to be able to add",
    "start": "217000",
    "end": "225000"
  },
  {
    "text": "and remove elements.\nThe solution we are going to look at for this one,\nthe basic idea is to keep the",
    "start": "225000",
    "end": "236000"
  },
  {
    "text": "sizes of subtrees in the nodes\nof a red-black tree.",
    "start": "236000",
    "end": "243000"
  },
  {
    "text": " Let me draw a picture as an\nexample.",
    "start": "243000",
    "end": "252000"
  },
  {
    "start": "252000",
    "end": "270000"
  },
  {
    "text": "In this tree -- ",
    "start": "270000",
    "end": "277000"
  },
  {
    "text": "I didn't draw the NILs for\nthis. I am going to keep two values.\nI am going to keep the key.",
    "start": "277000",
    "end": "284000"
  },
  {
    "text": "And so for the keys,\nwhat I will do is just use letters of the alphabet.",
    "start": "284000",
    "end": "291000"
  },
  {
    "start": "291000",
    "end": "306000"
  },
  {
    "text": "And this is a red-black tree.\nJust for practice, how can I label this tree so\nit's a red-black tree?",
    "start": "306000",
    "end": "316000"
  },
  {
    "text": "I haven't shown the NILs.\nRemember the NILs are all black.\nHow can I label this,",
    "start": "316000",
    "end": "324000"
  },
  {
    "text": "red and black?\nMake sure it is a red-black tree.\nNot every tree can be labeled",
    "start": "324000",
    "end": "333000"
  },
  {
    "text": "as a red-black tree,\nright? This is good practice because\nthis sort of thing shows up on",
    "start": "333000",
    "end": "342000"
  },
  {
    "text": "quizzes.\nMake F red, good, and everything else black,\nthat is certainly a solution.",
    "start": "342000",
    "end": "351000"
  },
  {
    "text": "Because then that basically\nbrings the level of this guy up",
    "start": "351000",
    "end": "357000"
  },
  {
    "text": "to here.\nActually, I had a more complicated one because it\nseemed like more fun.",
    "start": "357000",
    "end": "366000"
  },
  {
    "text": "What I did was I made this guy\nblack and then these two guys",
    "start": "366000",
    "end": "372000"
  },
  {
    "text": "red and black and red,\nblack and red, black and black.\nBut your solution is perfectly",
    "start": "372000",
    "end": "381000"
  },
  {
    "text": "good as well.\nSo we don't have any two reds in a row on any path.\nAnd all the black height from",
    "start": "381000",
    "end": "391000"
  },
  {
    "text": "any particular point going down\nwe get the same number of blacks whichever way we go.\nGood.",
    "start": "391000",
    "end": "398000"
  },
  {
    "text": "The idea here now is that,\nwe're going to keep the subtree sizes, these are the keys that\nare stored in our dynamic set,",
    "start": "398000",
    "end": "407000"
  },
  {
    "text": "we're going to keep the subtree\nsizes in the red-black tree. For example,\nthis guy has size one.",
    "start": "407000",
    "end": "415000"
  },
  {
    "text": "These guys have size one\nbecause they're leaves. And then we can just work up.\nSo this has size three,",
    "start": "415000",
    "end": "428000"
  },
  {
    "text": "this guy has size five,\nthis guy has size three,",
    "start": "428000",
    "end": "436000"
  },
  {
    "text": "and this guy has five plus\nthree plus one is nine.",
    "start": "436000",
    "end": "445000"
  },
  {
    "text": "In general, we will have size\nof x is equal to size of left of",
    "start": "445000",
    "end": "455000"
  },
  {
    "text": "x plus the size of the right\nchild of x plus one.",
    "start": "455000",
    "end": "465000"
  },
  {
    "text": "That is how I compute it\nrecursively. A very simple formula for what\nthe size is.",
    "start": "465000",
    "end": "472000"
  },
  {
    "text": "It turns out that for the code\nthat we're going to want to",
    "start": "472000",
    "end": "478000"
  },
  {
    "text": "write to implement these\noperations, it is going to be convenient to be talking about\nthe size of NIL.",
    "start": "478000",
    "end": "489000"
  },
  {
    "text": "So what is the size of NIL?\nZero. Size of NIL,\nthere are no elements there.",
    "start": "489000",
    "end": "496000"
  },
  {
    "text": "However, in most program\nlanguages, if I take size of",
    "start": "496000",
    "end": "502000"
  },
  {
    "text": "NIL, what will happen?\nYou get an error. That is kind of inconvenient.\nWhat I have to do in my code is",
    "start": "502000",
    "end": "513000"
  },
  {
    "text": "that everywhere that I might\nwant to take size of NIL, or take the size of anything,\nI have to say,",
    "start": "513000",
    "end": "521000"
  },
  {
    "text": "well, if it's NIL then return\nzero, otherwise return the size field, etc.\nThere is an implementation",
    "start": "521000",
    "end": "529000"
  },
  {
    "text": "trick that we're going to use to\nsimplify that. It's called using a sentinel.",
    "start": "529000",
    "end": "536000"
  },
  {
    "text": " A sentinel is nothing more than\na dummy record.",
    "start": "536000",
    "end": "545000"
  },
  {
    "text": "Instead of using a NIL,\nwe will actually use a NIL sentinel.\nWe will use a dummy record for",
    "start": "545000",
    "end": "554000"
  },
  {
    "text": "NIL such that size of NIL is\nequal to zero. Instead of any place I would\nhave used NIL in the tree,",
    "start": "554000",
    "end": "564000"
  },
  {
    "text": "instead I will have a special\nrecord that I will call NIL.",
    "start": "564000",
    "end": "571000"
  },
  {
    "text": "But it will be a whole record.\nAnd that way I can set its size field to be zero,\nand then I don't have to check",
    "start": "571000",
    "end": "578000"
  },
  {
    "text": "that as a special case.\nThat is a very common type of programming trick to use,\nis to use sentinels to simplify",
    "start": "578000",
    "end": "586000"
  },
  {
    "text": "code so you don't have all these\nboundary cases or you don't have to write an extra function when\nall I want to do is just index",
    "start": "586000",
    "end": "595000"
  },
  {
    "text": "the size of something.\nEverybody with me on that? So let's write the code for\nOS-Select given this",
    "start": "595000",
    "end": "606000"
  },
  {
    "text": "representation. ",
    "start": "606000",
    "end": "617000"
  },
  {
    "text": "And this is going to basically\ngive us the ith smallest in the",
    "start": "617000",
    "end": "630000"
  },
  {
    "text": "subtree rooted at x.\nIt's actually going to be a",
    "start": "630000",
    "end": "637000"
  },
  {
    "text": "little bit more general.\nIf I want to implement the OS-Select i of up there,\nI basically give it the root",
    "start": "637000",
    "end": "647000"
  },
  {
    "text": "n_i.\nBut we're going to build this recursively so it's going to be\nhelpful to have the node in",
    "start": "647000",
    "end": "655000"
  },
  {
    "text": "which we're trying to find the\nsubtree. Here is the code.",
    "start": "655000",
    "end": "662000"
  },
  {
    "start": "662000",
    "end": "742000"
  },
  {
    "text": "This is the code.\nAnd let's just see how it works",
    "start": "742000",
    "end": "748000"
  },
  {
    "text": "and then we will argue why it\nworks.",
    "start": "748000",
    "end": "754000"
  },
  {
    "text": "As an example,\nlet's do OS-Select of the root",
    "start": "754000",
    "end": "761000"
  },
  {
    "text": "and 5.\nWe're going to find the fifth largest in the set.\nWe have OS-Select of the root",
    "start": "761000",
    "end": "774000"
  },
  {
    "text": "and 5.\nThis is inconvenient.",
    "start": "774000",
    "end": "780000"
  },
  {
    "text": "We start out at the top,\nwell, let's just switch the",
    "start": "780000",
    "end": "788000"
  },
  {
    "text": "boards.\nHere we go. We start at the top,\nand i is the root.",
    "start": "788000",
    "end": "797000"
  },
  {
    "text": "Excuse me, i is 5,\nsorry, and the root.",
    "start": "797000",
    "end": "803000"
  },
  {
    "text": "i=5.\nWe want to five the fifth largest.\nWe first compute this value k.\n147\n00:13:35 --> 1.\nk is the size of left of x plus\n148\n1. --> 00:13:39",
    "start": "803000",
    "end": "815000"
  },
  {
    "text": "What is that value?\nWhat is k anyway? What is it?\nWell, in this case it is 6.",
    "start": "819000",
    "end": "830000"
  },
  {
    "text": "Good.\nBut what is the meaning of k?",
    "start": "830000",
    "end": "836000"
  },
  {
    "start": "836000",
    "end": "842000"
  },
  {
    "text": "The order.\nThe rank. Good, the rank of the current\nnode. This is the rank of the current\nnode.",
    "start": "842000",
    "end": "850000"
  },
  {
    "text": "k is always the size of the\nleft subtree plus 1. That is just the rank of the\ncurrent node.",
    "start": "850000",
    "end": "859000"
  },
  {
    "text": "We look here and we say,\nwell, the rank is k. Now, if it is equal then we\nfound the element we want.",
    "start": "859000",
    "end": "870000"
  },
  {
    "text": "But, otherwise,\nif i is less, we know it's going to be in the\nleft subtree.",
    "start": "870000",
    "end": "876000"
  },
  {
    "text": "All we're doing then is\nrecursing in the left subtree.",
    "start": "876000",
    "end": "882000"
  },
  {
    "text": "And here we will recurse.\nWe will want the fifth largest one.\nAnd now this time k is going to",
    "start": "882000",
    "end": "890000"
  },
  {
    "text": "be equal to what?\nTwo. Now here we say,\nOK, this is bigger,",
    "start": "890000",
    "end": "896000"
  },
  {
    "text": "so therefore the element we\nwant is going to be in the right subtree.\nBut we don't want the ith",
    "start": "896000",
    "end": "906000"
  },
  {
    "text": "largest guy in the right\nsubtree, because we already know there are going to be two guys\nover here.",
    "start": "906000",
    "end": "915000"
  },
  {
    "text": "We want the third largest guy\nin this subtree. We have i equals 3 as we\nrecurse into this subtree.",
    "start": "915000",
    "end": "924000"
  },
  {
    "text": "And now we compute k for here.\nThis plus 1 is 2.",
    "start": "924000",
    "end": "930000"
  },
  {
    "text": "And that says we recursed right\nhere. And then we have i=1,\nk=1, and we return in this code",
    "start": "930000",
    "end": "939000"
  },
  {
    "text": "a pointer to this node. ",
    "start": "939000",
    "end": "955000"
  },
  {
    "text": "So this returns a pointer to\nthe node containing H whose key",
    "start": "955000",
    "end": "964000"
  },
  {
    "text": "is H.\nJust to make a comment here,",
    "start": "964000",
    "end": "970000"
  },
  {
    "text": "we discovered k is equal to the\nrank of x. Any questions about what is\ngoing on in this code?",
    "start": "970000",
    "end": "982000"
  },
  {
    "text": "OK.\nIt's basically just finding its way down.\nThe subtree sizes help it make",
    "start": "982000",
    "end": "993000"
  },
  {
    "text": "the decision as to which way it\nshould go to find which is the",
    "start": "993000",
    "end": "999000"
  },
  {
    "text": "ith largest.\nWe can do a quick analysis. On our red-black tree,\nhow long does OS-Select take to",
    "start": "999000",
    "end": "1009000"
  },
  {
    "text": "run?\nYeah? Yeah, order log n if there are\nn elements in the tree.",
    "start": "1009000",
    "end": "1017000"
  },
  {
    "text": "Because the red-black tree is a\nbalance tree. Its height is order log n.\nIn fact, this code will work on",
    "start": "1017000",
    "end": "1027000"
  },
  {
    "text": "any tree that has order log n\nthe height of the tree. And so if you have a guaranteed\nheight, the way that red-black",
    "start": "1027000",
    "end": "1039000"
  },
  {
    "text": "trees do, you're in good shape.\nOS-Rank, we won't do but it is",
    "start": "1039000",
    "end": "1045000"
  },
  {
    "text": "in the book, also gets order log\nn. Here is a question I want to\npose.",
    "start": "1045000",
    "end": "1055000"
  },
  {
    "text": "Why not just keep the ranks\nthemselves?",
    "start": "1055000",
    "end": "1062000"
  },
  {
    "start": "1062000",
    "end": "1078000"
  },
  {
    "text": "Yeah?\nIt's the node itself. Otherwise, you cannot take left\nof it.",
    "start": "1078000",
    "end": "1084000"
  },
  {
    "text": "I mean, if we were doing this\nin a decent language, strongly typed language there\nwould be no confusion.",
    "start": "1084000",
    "end": "1091000"
  },
  {
    "text": "But we're writing in this\npseudocode that is good because it's compact,\nwhich lets you focus on the",
    "start": "1091000",
    "end": "1098000"
  },
  {
    "text": "algorithm.\nBut, of course, it doesn't have a lot of the\nthings you would really want if",
    "start": "1098000",
    "end": "1104000"
  },
  {
    "text": "you were programming things of\nscale like type safety and so forth.\nYeah?",
    "start": "1104000",
    "end": "1113000"
  },
  {
    "start": "1113000",
    "end": "1121000"
  },
  {
    "text": "It is basically hard to\nmaintain when you modify it. For example,\nif we actually kept the ranks",
    "start": "1121000",
    "end": "1128000"
  },
  {
    "text": "in the nodes,\ncertainly it would be easy to find the element of a given\nrank. But all I have to do is insert\nthe smallest element,",
    "start": "1128000",
    "end": "1137000"
  },
  {
    "text": "an element that is smaller than\nall of the other elements.",
    "start": "1137000",
    "end": "1143000"
  },
  {
    "text": "And what happens?\nAll the ranks have to be changed.\nOrder n changes have to be made",
    "start": "1143000",
    "end": "1150000"
  },
  {
    "text": "if that's what I was\nmaintaining, whereas with subtree sizes that's a lot\neasier.",
    "start": "1150000",
    "end": "1158000"
  },
  {
    "text": "Because it's hard to maintain\n-- ",
    "start": "1158000",
    "end": "1167000"
  },
  {
    "text": "-- when the red-black tree is\nmodified.",
    "start": "1167000",
    "end": "1173000"
  },
  {
    "text": "And that is the other sort of\ntricky thing when you're augmenting a data structure.\nYou want to put in the things",
    "start": "1173000",
    "end": "1183000"
  },
  {
    "text": "that your operations go fast,\nbut you cannot forget that",
    "start": "1183000",
    "end": "1189000"
  },
  {
    "text": "there are already underlying\noperations on the data structure",
    "start": "1189000",
    "end": "1195000"
  },
  {
    "text": "that have to be maintained in\nsome way. Can we close this door,\nplease?",
    "start": "1195000",
    "end": "1203000"
  },
  {
    "text": "Thank you.\nWe have to look at what are the modifying operations and how do\nwe maintain them.",
    "start": "1203000",
    "end": "1214000"
  },
  {
    "text": "The modifying operations for\nred-black trees are insert and",
    "start": "1214000",
    "end": "1221000"
  },
  {
    "text": "delete.\nIf I were augmenting a binary heap, what operations would I\nhave to worry about?",
    "start": "1221000",
    "end": "1233000"
  },
  {
    "text": " If I were augmenting a heap,\nwhat are the modifying",
    "start": "1233000",
    "end": "1244000"
  },
  {
    "text": "operations?\nBinary min heap, for example,\nclassic priority queue?",
    "start": "1244000",
    "end": "1252000"
  },
  {
    "text": "Who remembers heaps?\nWhat are the operations on a",
    "start": "1252000",
    "end": "1258000"
  },
  {
    "text": "heap?\nThere's a good final question.",
    "start": "1258000",
    "end": "1264000"
  },
  {
    "text": "Take-home exam,\ndon't worry about it. Final, worry about it.\nWhat are the operations on a",
    "start": "1264000",
    "end": "1276000"
  },
  {
    "text": "heap?\nJust look it up on Books24 or whatever it is,\nright?",
    "start": "1276000",
    "end": "1283000"
  },
  {
    "text": "AnswerMan?\nWhat does AnswerMan say?",
    "start": "1283000",
    "end": "1290000"
  },
  {
    "text": "OK.\nAnd? If it's a min heap.\nIt's min, extract min,",
    "start": "1290000",
    "end": "1296000"
  },
  {
    "text": "typical operations and insert.\nAnd of those which are",
    "start": "1296000",
    "end": "1303000"
  },
  {
    "text": "modifying?\nInsert and extract min, OK?\nSo, min is not.",
    "start": "1303000",
    "end": "1310000"
  },
  {
    "text": "You don't have to worry about\nmin because all that is is a",
    "start": "1310000",
    "end": "1317000"
  },
  {
    "text": "query.\nYou want to distinguish operations on a dynamic data\nstructure those that modify and",
    "start": "1317000",
    "end": "1326000"
  },
  {
    "text": "those that don't,\nbecause the ones that don't modify the data structure are\nall perfectly fine as long as",
    "start": "1326000",
    "end": "1334000"
  },
  {
    "text": "you haven't destroyed\ninformation. The queries,\nthose are easy. But the operations that modify\nthe data structure,",
    "start": "1334000",
    "end": "1342000"
  },
  {
    "text": "those we're very concerned\nabout in making sure we can maintain.\nOur strategy for dealing with",
    "start": "1342000",
    "end": "1349000"
  },
  {
    "text": "insert and delete in this case\nis to update the subtree sizes --",
    "start": "1349000",
    "end": "1356000"
  },
  {
    "start": "1356000",
    "end": "1363000"
  },
  {
    "text": "-- when inserting or deleting.\nFor example,",
    "start": "1363000",
    "end": "1371000"
  },
  {
    "text": "let's look at what happens when\nI insert k.",
    "start": "1371000",
    "end": "1380000"
  },
  {
    "text": "Element key k.\nI am going to want to insert it",
    "start": "1380000",
    "end": "1387000"
  },
  {
    "text": "in here, right?\nWhat is going to happen to this",
    "start": "1387000",
    "end": "1394000"
  },
  {
    "text": "subtree size if I am inserting k\nin here?\n267\n00:23:20 --> 10.\nThis is going to increase to\n268\n10. --> 00:23:25",
    "start": "1394000",
    "end": "1400000"
  },
  {
    "text": "And then I go left.\nThis one is going to increase",
    "start": "1405000",
    "end": "1415000"
  },
  {
    "text": "to 6.\nHere it is going to increase to\n271\n00:23:41 --> 4.\n272\n4. --> 00:23:42\nHere 2.",
    "start": "1415000",
    "end": "1421000"
  },
  {
    "text": "And then I will put my k down\nthere with a 1.",
    "start": "1422000",
    "end": "1430000"
  },
  {
    "text": "So I just updated on the way\ndown.",
    "start": "1430000",
    "end": "1436000"
  },
  {
    "text": "Pretty easy.\nYeah? But now it's not a red-black\ntree anymore.",
    "start": "1436000",
    "end": "1444000"
  },
  {
    "text": "You have to rebalance,\nso you must also handle rebalancing.\nBecause, remember,",
    "start": "1444000",
    "end": "1452000"
  },
  {
    "text": "and this is something that\npeople tend to forget so it's always, I think,\nhelpful when I see patterns",
    "start": "1452000",
    "end": "1462000"
  },
  {
    "text": "going on to tell everybody what\nthe pattern is so that you can",
    "start": "1462000",
    "end": "1468000"
  },
  {
    "text": "be sure of it in your work that\nyou're not falling into that",
    "start": "1468000",
    "end": "1474000"
  },
  {
    "text": "pattern.\nWhat people tend to forget when they're doing red-black trees is\nthey tend to remember the tree",
    "start": "1474000",
    "end": "1483000"
  },
  {
    "text": "insert part of it,\nbut red-black insert, that RB insert procedure\nactually has two parts to it.",
    "start": "1483000",
    "end": "1490000"
  },
  {
    "text": "First you call tree insert and\nthen you have to rebalance. And so you've got to make sure\nyou do the whole of the",
    "start": "1490000",
    "end": "1498000"
  },
  {
    "text": "red-black insert.\nNot just the tree insert part. We just did the tree insert\npart.",
    "start": "1498000",
    "end": "1505000"
  },
  {
    "text": "That was easy.\nWe also have to handle rebalancing.\nSo there are two types of",
    "start": "1505000",
    "end": "1512000"
  },
  {
    "text": "things we have to worry about.\nOne is red-black color changes.",
    "start": "1512000",
    "end": "1518000"
  },
  {
    "text": "Well, unfortunately those have\nno effect on subtree sizes. If I change the colors of\nthings, no effect,",
    "start": "1518000",
    "end": "1527000"
  },
  {
    "text": "no problem.\nBut also the interesting one is",
    "start": "1527000",
    "end": "1534000"
  },
  {
    "text": "rotations.\nRotations, it turns out, are fairly easy to fix up.\nBecause when I do a rotation,",
    "start": "1534000",
    "end": "1546000"
  },
  {
    "text": "I can update the nodes based on\nthe children.",
    "start": "1546000",
    "end": "1552000"
  },
  {
    "text": "I will show you that.\nYou basically look at children",
    "start": "1552000",
    "end": "1559000"
  },
  {
    "text": "and fix up, in this case,\nin order one time per rotation.",
    "start": "1559000",
    "end": "1569000"
  },
  {
    "text": "For example,\nimagine that I had a piece of my tree that looked like this.",
    "start": "1569000",
    "end": "1576000"
  },
  {
    "start": "1576000",
    "end": "1583000"
  },
  {
    "text": "And let's say it was 7,\n3, 4, the subtree sizes. I'm not going to put the values\nin here.",
    "start": "1583000",
    "end": "1590000"
  },
  {
    "text": "And I did a right rotation on\nthat edge to put them the other",
    "start": "1590000",
    "end": "1596000"
  },
  {
    "text": "way.\nAnd so these guys get hooked up this way.\nAlways the three children stay",
    "start": "1596000",
    "end": "1605000"
  },
  {
    "text": "as three children.\nWe just swing this guy over to there and make this guy be the\nparent of the other one.",
    "start": "1605000",
    "end": "1618000"
  },
  {
    "text": "And so now the point is that I\ncan just simply update this guy to be, well, he's got 8,\n3 plus 4 plus 1 using our",
    "start": "1618000",
    "end": "1628000"
  },
  {
    "text": "formula for what the size is.\nAnd now, for this one, it's going to be 8 plus 7 plus\n1 is 16, or, if I think about",
    "start": "1628000",
    "end": "1639000"
  },
  {
    "text": "it, it's going to be whatever\nthat was before because I haven't changed this subtree\nsize with a rotation.",
    "start": "1639000",
    "end": "1650000"
  },
  {
    "text": "Everything beneath this edge is\nstill beneath this edge. And so I fixed it up in order\none time.",
    "start": "1650000",
    "end": "1656000"
  },
  {
    "text": "There are certain other types\nof operations sometimes that occur where this isn't the\nvalue.",
    "start": "1656000",
    "end": "1662000"
  },
  {
    "text": "If I wasn't doing subtree sizes\nbut was doing some other property of the subtree,\nit could be that this was no",
    "start": "1662000",
    "end": "1670000"
  },
  {
    "text": "longer 16 in which case the\neffect might propagate up towards the root.\nThere is a nice little lemma in",
    "start": "1670000",
    "end": "1678000"
  },
  {
    "text": "the book that shows the\nconditions under which you can make sure that the re-balancing\ndoesn't cost you too much.",
    "start": "1678000",
    "end": "1688000"
  },
  {
    "text": "So that was pretty good.\nNow, insert and delete, that is all we have to do for\nrotations, are therefore still",
    "start": "1688000",
    "end": "1698000"
  },
  {
    "text": "order log n time,\nbecause a red-black tree only has to do order one rotations.\nDo they normally take constant",
    "start": "1698000",
    "end": "1708000"
  },
  {
    "text": "time?\nWell, they still take constant time.\nThey just take a little bit",
    "start": "1708000",
    "end": "1715000"
  },
  {
    "text": "bigger constant.\nAnd so now we've been able to build this great data structure\nthat supports dynamic order",
    "start": "1715000",
    "end": "1725000"
  },
  {
    "text": "statistic queries and it works\nin order log n time for insert, delete and the various queries.\nOS-Select.",
    "start": "1725000",
    "end": "1734000"
  },
  {
    "text": "I can also just search for an\nelement. I have taken the basic data\nstructure and have added some",
    "start": "1734000",
    "end": "1745000"
  },
  {
    "text": "new operations on it.\nAny questions about what we did",
    "start": "1745000",
    "end": "1751000"
  },
  {
    "text": "here?\nDo people understand this reasonably well?\nOK. Then let's generalize,\nalways a dangerous thing.",
    "start": "1751000",
    "end": "1763000"
  },
  {
    "start": "1763000",
    "end": "1777000"
  },
  {
    "text": "Augmenting data structures.\nWhat I would like to do is give you a little methodology for how\nyou go about doing this safely",
    "start": "1777000",
    "end": "1787000"
  },
  {
    "text": "so you don't forget things.\nThe most common thing, by the way, if there is an\naugmentation problem on the",
    "start": "1787000",
    "end": "1796000"
  },
  {
    "text": "take-home or if there is one on\nthe final, I guarantee that probably a quarter of the class\nwill forget the rotations if",
    "start": "1796000",
    "end": "1807000"
  },
  {
    "text": "they augmented red-black tree.\nI guarantee it. Anyway, here is a little\nmethodology to check yourself.",
    "start": "1807000",
    "end": "1816000"
  },
  {
    "text": "As I mentioned,\nthe reason why this is so important is because this is,\nin practice,",
    "start": "1816000",
    "end": "1822000"
  },
  {
    "text": "the thing that you do most of\nthe time. You don't just use a data\nstructure as given.",
    "start": "1822000",
    "end": "1830000"
  },
  {
    "text": "You take a data structure.\nYou say I have my own operations I want to layer onto\nthis.",
    "start": "1830000",
    "end": "1837000"
  },
  {
    "text": "We're going to give a\nmethodology. And what I will do,\nas I go along,",
    "start": "1837000",
    "end": "1843000"
  },
  {
    "text": "is will use the example of\norder statistics trees to illustrate the methodology.\nIt is four steps.",
    "start": "1843000",
    "end": "1852000"
  },
  {
    "text": "The first is choose an\nunderlying data structure.",
    "start": "1852000",
    "end": "1858000"
  },
  {
    "start": "1858000",
    "end": "1864000"
  },
  {
    "text": "Which in the case of order\nstatistics tree was what? Red-black tree.",
    "start": "1864000",
    "end": "1871000"
  },
  {
    "start": "1871000",
    "end": "1879000"
  },
  {
    "text": "And the second thing we do is\nwe figure out what additional information we wish to maintain\nin that data structure.",
    "start": "1879000",
    "end": "1887000"
  },
  {
    "start": "1887000",
    "end": "1898000"
  },
  {
    "text": "Which in this case is the\nsubtree sizes. Subtree sizes is what we keep\nfor this one.",
    "start": "1898000",
    "end": "1909000"
  },
  {
    "text": "And when we did this we could\nmake mistakes,",
    "start": "1909000",
    "end": "1915000"
  },
  {
    "text": "right?\nWe could have said, oh, let's keep the rank.\nAnd we start playing with it",
    "start": "1915000",
    "end": "1925000"
  },
  {
    "text": "and discover we can do that.\nIt just goes really slowly. It takes some creativity to\nfigure out what is the",
    "start": "1925000",
    "end": "1934000"
  },
  {
    "text": "information that you're going to\nbe able to keep, but also to maintain the other\nproperties that you want.",
    "start": "1934000",
    "end": "1942000"
  },
  {
    "text": "The third step is verify that\nthe information can be maintained --",
    "start": "1942000",
    "end": "1949000"
  },
  {
    "text": " -- for the modifying operations\non the data structure.",
    "start": "1949000",
    "end": "1958000"
  },
  {
    "start": "1958000",
    "end": "1965000"
  },
  {
    "text": "And so in this case,\nfor OS trees, the modifying operations were\ninsert and delete.",
    "start": "1965000",
    "end": "1979000"
  },
  {
    "text": "And, of course,\nwe had to make sure we dealt with rotations. ",
    "start": "1979000",
    "end": "1990000"
  },
  {
    "text": "And because rotations are part\nof that we could break it down into the tree insert,\nthe tree delete and rotations.",
    "start": "1990000",
    "end": "1997000"
  },
  {
    "text": "And once we've did that\neverything was fine. We didn't, for this particular\nproblem, have to worry about",
    "start": "1997000",
    "end": "2004000"
  },
  {
    "text": "color changes.\nBut that's another thing that under some things you might have\nto worry about.",
    "start": "2004000",
    "end": "2012000"
  },
  {
    "text": "For some reason the color made\na difference. Usually that doesn't make a\ndifference.",
    "start": "2012000",
    "end": "2018000"
  },
  {
    "text": "And then the fourth step is to\ndevelop new operations. ",
    "start": "2018000",
    "end": "2030000"
  },
  {
    "text": "Presumably that use the info\nthat you have now stored.",
    "start": "2030000",
    "end": "2036000"
  },
  {
    "text": "And this was OS-Select and\nOS-Rank, which we didn't give",
    "start": "2036000",
    "end": "2042000"
  },
  {
    "text": "but which is there.\nAnd also it's a nice little puzzle to figure out yourself,\nhow you would build OS-Rank.",
    "start": "2042000",
    "end": "2052000"
  },
  {
    "text": "Not a hard piece of code.\nThis methodology is not actually the way you do this.\nThis is one of these things",
    "start": "2052000",
    "end": "2062000"
  },
  {
    "text": "that's more like a checklist,\nbecause you see whether or not you've got --\nWhen you're actually doing this",
    "start": "2062000",
    "end": "2071000"
  },
  {
    "text": "maybe you developed the new\noperations first. You've got to keep in mind the\nnew operations while you're",
    "start": "2071000",
    "end": "2077000"
  },
  {
    "text": "verifying that the information\nyou're storing can be here. Maybe you will then go back and\nchange this and sort of sort",
    "start": "2077000",
    "end": "2084000"
  },
  {
    "text": "through it.\nThis is more a checklist that when you're done this is how you\nwrite it up. This is how you document that\nwhat you've done is,",
    "start": "2084000",
    "end": "2092000"
  },
  {
    "text": "in fact, a good thing.\nYou have a checklist. Here is my underlying data\nstructure. Here is the addition\ninformation I need.",
    "start": "2092000",
    "end": "2100000"
  },
  {
    "text": "See, I can still support the\nmodifying operations that the data structure used to have and\nnow here are my new operations",
    "start": "2100000",
    "end": "2107000"
  },
  {
    "text": "and see what those are.\nIt's really a checklist. Not a prescription for the\norder in which you do things.",
    "start": "2107000",
    "end": "2113000"
  },
  {
    "text": "You must do all these steps,\nnot necessarily in this order. This is a guide for your\ndocumentation.",
    "start": "2113000",
    "end": "2119000"
  },
  {
    "text": "When we ask for you to augment\na data structure, generally we're asking you to\ntell us what the four steps are.",
    "start": "2119000",
    "end": "2125000"
  },
  {
    "text": "It will help you organize your\nthings. It will also help make sure you\ndon't forget some step along the",
    "start": "2125000",
    "end": "2133000"
  },
  {
    "text": "way.\nI've seen people who have added the information and developed\nnew operations but completely",
    "start": "2133000",
    "end": "2140000"
  },
  {
    "text": "forgot to verify that the\ninformation could be maintained. So you want to make sure that\nyou've done all those.",
    "start": "2140000",
    "end": "2148000"
  },
  {
    "text": "Usually you have to play -- ",
    "start": "2148000",
    "end": "2156000"
  },
  {
    "text": "-- with interactions -- ",
    "start": "2156000",
    "end": "2164000"
  },
  {
    "text": "-- between steps.\nIt's not just a do this, do this, do this.\nWe're going to do now a more",
    "start": "2164000",
    "end": "2172000"
  },
  {
    "text": "complicated data structure.\nIt's not that much more complicated, but its correctness\nis actually kind of challenging.",
    "start": "2172000",
    "end": "2184000"
  },
  {
    "start": "2184000",
    "end": "2193000"
  },
  {
    "text": "And it is actually a very\npractical and useful data structure.\nI am amazed at how many people",
    "start": "2193000",
    "end": "2200000"
  },
  {
    "text": "aren't aware that there are data\nstructures of this nature that are useful for them when I see\npeople writing really slow code.",
    "start": "2200000",
    "end": "2209000"
  },
  {
    "text": "And so the example we're going\nto do is interval trees.",
    "start": "2209000",
    "end": "2215000"
  },
  {
    "text": " And the idea of this is that we\nwant to maintain a set of",
    "start": "2215000",
    "end": "2228000"
  },
  {
    "text": "intervals.\nFor example, time intervals.\nI have a whole database of time",
    "start": "2228000",
    "end": "2238000"
  },
  {
    "text": "intervals that I'm trying to\nmaintain.",
    "start": "2238000",
    "end": "2244000"
  },
  {
    "text": "Let's just do an example here.",
    "start": "2244000",
    "end": "2250000"
  },
  {
    "start": "2250000",
    "end": "2280000"
  },
  {
    "text": "This is going from 7 to 10,\n5 to 11 and 4 to 8,",
    "start": "2280000",
    "end": "2288000"
  },
  {
    "text": "from 15 to 18,\n17 to 19 and 21 to 23.",
    "start": "2288000",
    "end": "2294000"
  },
  {
    "text": "This is a set of intervals.\nAnd if we have an interval i,",
    "start": "2294000",
    "end": "2304000"
  },
  {
    "text": "let's say this is interval i,\nwhich is 7,10.",
    "start": "2304000",
    "end": "2314000"
  },
  {
    "text": "We're going to call this\nendpoint the low endpoint of i and this we're going to call the\nhigh endpoint of i.",
    "start": "2314000",
    "end": "2321000"
  },
  {
    "text": "The reason I use low and high\nrather than left or right is because we're going to have a\ntree, and we're going to want",
    "start": "2321000",
    "end": "2330000"
  },
  {
    "text": "the left subtree and the right\nsubtree. So if I start saying left and\nright for intervals and left and",
    "start": "2330000",
    "end": "2338000"
  },
  {
    "text": "right for tree we're going to\nget really confused. This is also a tip.\nLet me say when you're coding,",
    "start": "2338000",
    "end": "2345000"
  },
  {
    "text": "you really have to think hard\nsometimes about the words that you're using for things,\nespecially things like left and",
    "start": "2345000",
    "end": "2352000"
  },
  {
    "text": "right because they get so\noverused throughout programming. It's a good idea to come up\nwith a whole wealth of synonyms",
    "start": "2352000",
    "end": "2358000"
  },
  {
    "text": "for different situations so that\nit is clear in any piece of code when you're talking,\nfor example,",
    "start": "2358000",
    "end": "2364000"
  },
  {
    "text": "about the intervals versus the\ntree, because we're going to have both going on here.\nAnd what we're going to do is",
    "start": "2364000",
    "end": "2373000"
  },
  {
    "text": "we want to support insertion and\ndeletion of intervals here.",
    "start": "2373000",
    "end": "2381000"
  },
  {
    "text": "And we're going to have a\nquery, which is going to be the",
    "start": "2381000",
    "end": "2389000"
  },
  {
    "text": "new operation we're going to\ndevelop, which is going to be to",
    "start": "2389000",
    "end": "2397000"
  },
  {
    "text": "find an interval,\nany interval in the set that",
    "start": "2397000",
    "end": "2403000"
  },
  {
    "text": "overlaps a given query interval.",
    "start": "2403000",
    "end": "2409000"
  },
  {
    "start": "2409000",
    "end": "2415000"
  },
  {
    "text": "So I give you a query interval\nlike say 6, 14 and you can",
    "start": "2415000",
    "end": "2423000"
  },
  {
    "text": "return this guy or this guy,\nthis guy, couldn't return any",
    "start": "2423000",
    "end": "2431000"
  },
  {
    "text": "of these because these are all\nless than 14.",
    "start": "2431000",
    "end": "2438000"
  },
  {
    "text": "So I can return any one of\nthose. I only have to return one.\nI just have to find one guy",
    "start": "2438000",
    "end": "2447000"
  },
  {
    "text": "that overlaps.\nAny question about what we're going to be setting up here?\nOK.",
    "start": "2447000",
    "end": "2455000"
  },
  {
    "text": "Our methodology is we're going\nto pick, first of all,",
    "start": "2455000",
    "end": "2461000"
  },
  {
    "text": "step one.\nAnd here is our methodology. Step one is we're going chose\nunderlying data structure.",
    "start": "2461000",
    "end": "2472000"
  },
  {
    "text": "Does anybody have a suggestion\nas to what data structure we",
    "start": "2472000",
    "end": "2478000"
  },
  {
    "text": "ought to use here to support\ninterval trees?",
    "start": "2478000",
    "end": "2484000"
  },
  {
    "start": "2484000",
    "end": "2492000"
  },
  {
    "text": "What data structure should we\ntry to start here to support",
    "start": "2492000",
    "end": "2498000"
  },
  {
    "text": "interval trees?\nAnybody have any idea? A red-black tree.\nA binary search tree.",
    "start": "2498000",
    "end": "2505000"
  },
  {
    "text": "Red-black tree.\nWe're going to use a red-black tree.",
    "start": "2505000",
    "end": "2512000"
  },
  {
    "text": " Oh, I've got to say what it is\nkeyed on.",
    "start": "2512000",
    "end": "2522000"
  },
  {
    "text": "What is going to be the key for\nmy red-black tree? For each interval,\nwhat should I use for a key?",
    "start": "2522000",
    "end": "2530000"
  },
  {
    "text": "This is where there are a bunch\nof options, right? Throw out some ideas.\nIt's always better to branch",
    "start": "2530000",
    "end": "2539000"
  },
  {
    "text": "than it is to prune.\nYou can always prune later, but if you don't branch you\nwill never get the chance to",
    "start": "2539000",
    "end": "2548000"
  },
  {
    "text": "prune.\nSo generation of ideas. You'll need that when you're\ndoing the design phase and doing",
    "start": "2548000",
    "end": "2557000"
  },
  {
    "text": "the take-home exam.\nYeah? We're calling that the low\nendpoint.",
    "start": "2557000",
    "end": "2563000"
  },
  {
    "text": "OK, you could do low endpoint.\nWhat other ideas are there? High end point.\nNow you can look at low",
    "start": "2563000",
    "end": "2572000"
  },
  {
    "text": "endpoint, high endpoint.\nWell, between low and high which is better?\nThat one is not going to",
    "start": "2572000",
    "end": "2582000"
  },
  {
    "text": "matter, right?\nSo doing high versus low, we don't have to consider that,\nbut there is another natural",
    "start": "2582000",
    "end": "2593000"
  },
  {
    "text": "point you want to think about\nusing like the median, the middle point.\nAt least that is symmetric.",
    "start": "2593000",
    "end": "2603000"
  },
  {
    "text": "What do you think?\nWhat else might I use? The length?\nI think the length doesn't feel",
    "start": "2603000",
    "end": "2612000"
  },
  {
    "text": "to me productive.\nThis is just purely a matter of intuition.\nIt doesn't feel productive,",
    "start": "2612000",
    "end": "2619000"
  },
  {
    "text": "because if I know the length I\ndon't know where it is so it's going to be hard to maintain\ninformation about where it is",
    "start": "2619000",
    "end": "2628000"
  },
  {
    "text": "for queries.\nIt turns out we're going to use the low left endpoint,\nbut I think to me that was sort",
    "start": "2628000",
    "end": "2635000"
  },
  {
    "text": "of a surprise that you'd want to\nuse that and not the middle one.",
    "start": "2635000",
    "end": "2642000"
  },
  {
    "text": "Because you're favoring one\nendpoint over the other. It turns out that's the right\nthing to do, surprisingly.",
    "start": "2642000",
    "end": "2651000"
  },
  {
    "text": "There is another strategy.\nActually, there's another type of tree called a segment tree.\nActually, what you do is you",
    "start": "2651000",
    "end": "2662000"
  },
  {
    "text": "store both the left and right\nendpoints separately in the tree.\nAnd then you maintain a data",
    "start": "2662000",
    "end": "2670000"
  },
  {
    "text": "structure where the line\nsegments go up through the tree on to the other.\nThere are lots of things you",
    "start": "2670000",
    "end": "2680000"
  },
  {
    "text": "can do, but we're just going to\nkeep it keyed on the low endpoint.\nThat's why this is a more",
    "start": "2680000",
    "end": "2687000"
  },
  {
    "text": "clever data structure in some\nways. Now, this is harder.\nThat is why this is a clever",
    "start": "2687000",
    "end": "2694000"
  },
  {
    "text": "data structure.\nWhat are we going to store in the --\nI think any of those ideas are",
    "start": "2694000",
    "end": "2703000"
  },
  {
    "text": "good ideas to throw out and look\nat. You don't know which one is\ngoing to work until you play",
    "start": "2703000",
    "end": "2714000"
  },
  {
    "text": "with it.\nThis one, though, is, I think,\nmuch harder to guess.",
    "start": "2714000",
    "end": "2722000"
  },
  {
    "text": "You're going to store in a node\nthe largest value,",
    "start": "2722000",
    "end": "2728000"
  },
  {
    "text": "I will call it m,\nin the subtree rooted at that node.",
    "start": "2728000",
    "end": "2736000"
  },
  {
    "start": "2736000",
    "end": "2745000"
  },
  {
    "text": "We'll draw it like this,\na node like this. We will put the interval here\nand we will put the m value",
    "start": "2745000",
    "end": "2752000"
  },
  {
    "text": "here. ",
    "start": "2752000",
    "end": "2762000"
  },
  {
    "text": "Let's draw a picture. ",
    "start": "2762000",
    "end": "2798000"
  },
  {
    "text": "Once again, I am not drawing\nthe NILs. ",
    "start": "2798000",
    "end": "2820000"
  },
  {
    "text": "I hope that that is a search\ntree that is keyed on the low left endpoint.\n4, 5, 7, 15,",
    "start": "2820000",
    "end": "2828000"
  },
  {
    "text": "17, 21.\nIt is keyed on the low left endpoint.\nIf this a red-black tree,",
    "start": "2828000",
    "end": "2835000"
  },
  {
    "text": "let's just do another practice.\nHow can I color this so that it",
    "start": "2835000",
    "end": "2841000"
  },
  {
    "text": "is a legal red-black tree?\nNot too relevant to what we're",
    "start": "2841000",
    "end": "2847000"
  },
  {
    "text": "doing right now\nBut a little drill doesn't hurt sometimes.\nRemember, the NILs are not",
    "start": "2847000",
    "end": "2855000"
  },
  {
    "text": "there and they are all black.\nAnd the root is black. I will give that one to you.",
    "start": "2855000",
    "end": "2862000"
  },
  {
    "start": "2862000",
    "end": "2872000"
  },
  {
    "text": "Good.\nThis will work. You sort of go through a little\npuzzle.",
    "start": "2872000",
    "end": "2880000"
  },
  {
    "text": "A logic puzzle.\nBecause this is really short so it better not have any reds in\nit.",
    "start": "2880000",
    "end": "2886000"
  },
  {
    "text": "This has got to be black.\nNow, if I'm going to balance the height, I have got to have a\nlayer of black here.",
    "start": "2886000",
    "end": "2895000"
  },
  {
    "text": "It couldn't be that one.\nIt's got to be these two. Good.\nNow let's compute the m value",
    "start": "2895000",
    "end": "2902000"
  },
  {
    "text": "for each of these.\nIt's the largest value in the subtree rooted at that node.\nWhat's the largest value in the\n577\n00:48:36 --> 10.\nsubtree rooted at this node?\n578\n10. --> 00:48:43\n579\n00:48:43 --> 18.\nAnd in this one?\n580\n18. --> 00:48:47\n581\n00:48:47 --> 8.\nIn this one?\n582\n8. --> 00:48:50\n583\n00:48:50 --> 18.\n584\n18. --> 00:49:00\nThat one is 23 and that is 23.",
    "start": "2902000",
    "end": "2916000"
  },
  {
    "text": "In general, m is going to be\nthe maximum of three possible",
    "start": "2940000",
    "end": "2952000"
  },
  {
    "text": "values.\nEither the high point of the",
    "start": "2952000",
    "end": "2960000"
  },
  {
    "text": "interval at x or m of the left\nof x or m of the right of x.",
    "start": "2960000",
    "end": "2974000"
  },
  {
    "start": "2974000",
    "end": "2980000"
  },
  {
    "text": "Does everybody see that?\nIt is going to be m of x for any node.\nI just have to look,",
    "start": "2980000",
    "end": "2986000"
  },
  {
    "text": "what is the maximum here,\nwhat is the maximum here and what is the high point of the\ninterval.",
    "start": "2986000",
    "end": "2993000"
  },
  {
    "text": "Whichever one of those is\nlargest, that's the largest for that subtree.",
    "start": "2993000",
    "end": "3000000"
  },
  {
    "start": "3000000",
    "end": "3015000"
  },
  {
    "text": "The modifying operations. ",
    "start": "3015000",
    "end": "3029000"
  },
  {
    "text": "Let's first do insert.\nHow can I do insert? There are two parts.\nThe first part is to do the",
    "start": "3029000",
    "end": "3038000"
  },
  {
    "text": "tree insert, just a normal\ninsert into a binary search",
    "start": "3038000",
    "end": "3044000"
  },
  {
    "text": "tree. ",
    "start": "3044000",
    "end": "3055000"
  },
  {
    "text": "What do I do?\nInsert a new interval?",
    "start": "3055000",
    "end": "3063000"
  },
  {
    "start": "3063000",
    "end": "3080000"
  },
  {
    "text": "Insert a new interval here?\nHow can I fix up the m's? ",
    "start": "3080000",
    "end": "3093000"
  },
  {
    "text": "That's right.\nYou just go down the tree and look at my current interval.\nAnd if it's got a bigger max,",
    "start": "3093000",
    "end": "3099000"
  },
  {
    "text": "this is something that is going\ninto that subtree. If its high endpoint is bigger\nthan the current max,",
    "start": "3099000",
    "end": "3106000"
  },
  {
    "text": "update the current max.\nI just do that as I'm going through the insertion,\nwherever it happens to land up",
    "start": "3106000",
    "end": "3114000"
  },
  {
    "text": "in every subtree that it hits,\nevery node that it hits on the way down.\nI just update it with the",
    "start": "3114000",
    "end": "3124000"
  },
  {
    "text": "maximum wherever it happens to\nfall.",
    "start": "3124000",
    "end": "3131000"
  },
  {
    "text": "Good.\nYou just fix them on the way",
    "start": "3131000",
    "end": "3137000"
  },
  {
    "text": "down. ",
    "start": "3137000",
    "end": "3145000"
  },
  {
    "text": "But we also have to do the\nother section. Also need to handle rotations.",
    "start": "3145000",
    "end": "3157000"
  },
  {
    "start": "3157000",
    "end": "3165000"
  },
  {
    "text": "So let's just see how we might\ndo rotations as an example.",
    "start": "3165000",
    "end": "3171000"
  },
  {
    "start": "3171000",
    "end": "3180000"
  },
  {
    "text": "Let's say this is 11, 15, 30. ",
    "start": "3180000",
    "end": "3194000"
  },
  {
    "text": "Let's say I'm doing a right\nrotation. This is coming off from\nsomewhere. ",
    "start": "3194000",
    "end": "3212000"
  },
  {
    "text": "That is coming off.\nThis is still going to be the child that has 30,\nthe one that 14 and the one",
    "start": "3212000",
    "end": "3223000"
  },
  {
    "text": "that has 19.\nAnd so now we've rotated this way, so this is the 11,\n15 and this is the 6,\n633\n00:53:53 --> 20.\n634\n20. --> 00:53:55\nFor this one,",
    "start": "3223000",
    "end": "3233000"
  },
  {
    "text": "I just use my formula here.\nI just look here and say which",
    "start": "3235000",
    "end": "3242000"
  },
  {
    "text": "is the biggest,\n14, 15 or 19?\n637\n00:54:04 --> 19.\n638\n19. --> 00:54:06\nAnd I look here. Which is the biggest?\n30, 19 or 20?\n640\n00:54:08 --> 30.\n641\n30. --> 00:54:10\nOr, once again,",
    "start": "3242000",
    "end": "3248000"
  },
  {
    "text": "it turns out,\nnot too hard to show, that it's always whatever was\nthere, because we're talking",
    "start": "3250000",
    "end": "3257000"
  },
  {
    "text": "about the biggest thing in the\nsubtree. And the membership of the\nsubtree hasn't changed when we",
    "start": "3257000",
    "end": "3264000"
  },
  {
    "text": "do the rotation.\nThat just took me order one time to fix up.",
    "start": "3264000",
    "end": "3271000"
  },
  {
    "start": "3271000",
    "end": "3291000"
  },
  {
    "text": "Fixing up the m's during\nrotation takes O(1) time.",
    "start": "3291000",
    "end": "3308000"
  },
  {
    "text": "So the total insert time is\nO(lg n).",
    "start": "3308000",
    "end": "3319000"
  },
  {
    "start": "3319000",
    "end": "3325000"
  },
  {
    "text": "Once I figured out that this is\nthe right information, of course we don't know what\nwe're using this information for yet.\nBut once I know that that is",
    "start": "3325000",
    "end": "3332000"
  },
  {
    "text": "the information,\nshowing you that it works in certain delete continuing work\nin order log n time is easy.",
    "start": "3332000",
    "end": "3341000"
  },
  {
    "text": "Now, delete is actually a\nlittle bit trickier but I will just say it is similar.\nBecause in delete you go",
    "start": "3341000",
    "end": "3350000"
  },
  {
    "text": "through and you find something,\nyou may have to go through the",
    "start": "3350000",
    "end": "3356000"
  },
  {
    "text": "whole business of swapping it.\nIf it's an internal node you've",
    "start": "3356000",
    "end": "3362000"
  },
  {
    "text": "got to swap it with its\nsuccessor or predecessor. And so there are a bunch of\nthings that have to be dealt",
    "start": "3362000",
    "end": "3368000"
  },
  {
    "text": "with, but it is all stuff where\nyou can update the information using this thing.\nAnd it's all essentially local",
    "start": "3368000",
    "end": "3375000"
  },
  {
    "text": "changes when you're updating\nthis information because you can do it essentially only on a path\nup from the root and most of the",
    "start": "3375000",
    "end": "3383000"
  },
  {
    "text": "tree is never dealt with.\nI will leave that for you folks to work out.\nIt's also in the book if you",
    "start": "3383000",
    "end": "3392000"
  },
  {
    "text": "want to cheat,\nbut it is a good exercise. Any questions about the first\nthree steps?",
    "start": "3392000",
    "end": "3401000"
  },
  {
    "text": "Fourth step is new operations. ",
    "start": "3401000",
    "end": "3438000"
  },
  {
    "text": "Interval search of i is going\nto find an interval that",
    "start": "3438000",
    "end": "3448000"
  },
  {
    "text": "overlaps the interval i.\nSo i here is an interval.",
    "start": "3448000",
    "end": "3455000"
  },
  {
    "text": "It's got two coordinates.\nAnd this, rather than writing recursively, we're going to\nwrite as, it's sort of going to",
    "start": "3455000",
    "end": "3463000"
  },
  {
    "text": "be recursive,\nbut we're going to write it with a while loop.\nYou could write it recursively.",
    "start": "3463000",
    "end": "3469000"
  },
  {
    "text": "The other one that we wrote,\nwe could have written as a while loop as well and not had\nthe recursive call.",
    "start": "3469000",
    "end": "3477000"
  },
  {
    "text": "Here we're going to basically\njust start x gets the root. And then while --",
    "start": "3477000",
    "end": "3485000"
  },
  {
    "start": "3485000",
    "end": "3587000"
  },
  {
    "text": "That is the code.\nLet's just see how it works.",
    "start": "3587000",
    "end": "3596000"
  },
  {
    "text": "Let's search for the interval\n14, 16 --",
    "start": "3596000",
    "end": "3605000"
  },
  {
    "start": "3605000",
    "end": "3612000"
  },
  {
    "text": "-- in this tree.\nLet's see. x starts out at the root.\nAnd while it is not NIL,",
    "start": "3612000",
    "end": "3621239"
  },
  {
    "text": "and it's not NIL because it's\nthe root, what is this doing?",
    "start": "3621239",
    "end": "3629000"
  },
  {
    "text": "Somebody tell me what that code\ndoes. ",
    "start": "3629000",
    "end": "3650000"
  },
  {
    "text": "Well, what is this doing?\nThis is testing something",
    "start": "3650000",
    "end": "3656000"
  },
  {
    "text": "between i and int of x.\nInt of x is the interval stored",
    "start": "3656000",
    "end": "3661952"
  },
  {
    "text": "at x.\nWhat is this testing for? ",
    "start": "3661952",
    "end": "3677000"
  },
  {
    "text": "I hope I got it right. ",
    "start": "3677000",
    "end": "3690000"
  },
  {
    "text": "What is this testing for? Yeah? ",
    "start": "3690000",
    "end": "3701000"
  },
  {
    "text": "Above or below?\nI need just simple words.",
    "start": "3701000",
    "end": "3706333"
  },
  {
    "text": "Test for overlaps.\nIn particular test whether they",
    "start": "3706333",
    "end": "3712866"
  },
  {
    "text": "do or don't? ",
    "start": "3712866",
    "end": "3720000"
  },
  {
    "text": "Do?\nDon't? If I get to this point,\nwhat do I know about i and int",
    "start": "3720000",
    "end": "3732251"
  },
  {
    "text": "of x?\nDon't overlap. They don't overlap because the\nhigh of one is smaller than the",
    "start": "3732251",
    "end": "3748058"
  },
  {
    "text": "low of the other.\nThe high of one is smaller than",
    "start": "3748059",
    "end": "3755417"
  },
  {
    "text": "the low of the other.\nThey don't overlap that way. Could they overlap the other\nway?",
    "start": "3755417",
    "end": "3761735"
  },
  {
    "text": "No because we're testing also\nwhether the low of the one is bigger than the high of the\nother.",
    "start": "3761735",
    "end": "3768832"
  },
  {
    "text": "They're saying it's either like\nthis or like this. This is testing not overlap.\nThat makes it simpler.",
    "start": "3768832",
    "end": "3776554"
  },
  {
    "text": "When I'm searching for 14,\n16, I check here. And I say do they overlap?\nAnd the answer is,",
    "start": "3776554",
    "end": "3784340"
  },
  {
    "text": "now we can understand it\nwithout having to go through all the arithmetic calculations,\nno they don't overlap.",
    "start": "3784340",
    "end": "3792387"
  },
  {
    "text": "If they did overlap,\nI found what I want. And what's going to happen?\nI am going to drop out of the",
    "start": "3792387",
    "end": "3799675"
  },
  {
    "text": "while loop and just return x,\nbecause I will return something that overlaps.\nThat is my goal.",
    "start": "3799675",
    "end": "3806507"
  },
  {
    "text": "Here it says they don't\noverlap. So then I say,\nwell, if left of x is not NIL,",
    "start": "3806507",
    "end": "3814731"
  },
  {
    "text": "in other words,\nI've got a left child and low of i is less than or equal to m\nof left of x,",
    "start": "3814731",
    "end": "3824192"
  },
  {
    "text": "then we go left.\nWhat happens in this case if I'm searching for 14,\n16?",
    "start": "3824193",
    "end": "3831505"
  },
  {
    "text": "Is the low of i less than or\nequal to m of left of x?",
    "start": "3831505",
    "end": "3837096"
  },
  {
    "text": "Low of i is 14.\nAnd I am searching.",
    "start": "3837096",
    "end": "3843181"
  },
  {
    "text": "And is it less than 18?\nYes. Therefore, what do I do?\nI go left and make x point to",
    "start": "3843181",
    "end": "3856576"
  },
  {
    "text": "this guy.\nNow I check. Does it overlap?\nNo.",
    "start": "3856576",
    "end": "3863274"
  },
  {
    "text": "I take a look at the left guy.\nIt is 8.",
    "start": "3863274",
    "end": "3869637"
  },
  {
    "text": "I compare 8 with 14,\nright?",
    "start": "3869637",
    "end": "3876000"
  },
  {
    "text": "And is it lower?\nNo, so I go right. And now I discover that I have\nan overlap here and it overlaps.",
    "start": "3876000",
    "end": "3888729"
  },
  {
    "text": "It returns then the 15,\n18 as an overlapping one.\n740\n1:04:55.093 --> 14.\nIf I were searching for 12,\n741\n14. --> 1:05:00",
    "start": "3888729",
    "end": "3895093"
  },
  {
    "start": "3900000",
    "end": "3912000"
  },
  {
    "text": "I would go up to the top.\nAnd I look, 12, 14, it doesn't overlap here.\nI look at the 18 and it is",
    "start": "3912000",
    "end": "3922708"
  },
  {
    "text": "greater so I go left.\nI then look here. Does it overlap?\nNo.",
    "start": "3922708",
    "end": "3930000"
  },
  {
    "text": "So then what happens?\nI look at the left. It says I go right.\nI look here.",
    "start": "3930000",
    "end": "3938414"
  },
  {
    "text": "Then I go and I look at the\nleft. It says, no,\ngo right.",
    "start": "3938414",
    "end": "3944696"
  },
  {
    "text": "I go here, which is NIL,\nand now it is NIL. I return NIL.\nAnd does 12,",
    "start": "3944696",
    "end": "3952637"
  },
  {
    "text": "14 overlap anything in the set?\nNo. So, therefore,\nit always works.",
    "start": "3952637",
    "end": "3962000"
  },
  {
    "text": "OK?\nOK. We're going to do correctness\nin a minute, but let's just do",
    "start": "3962000",
    "end": "3972520"
  },
  {
    "text": "our analysis first so we don't\nhave to do it because the",
    "start": "3972520",
    "end": "3981421"
  },
  {
    "text": "correctness is going to be a\nlittle bit tricky.",
    "start": "3981421",
    "end": "3990000"
  },
  {
    "text": "Time = O(lg n) because all I am\ndoing is going down the tree.",
    "start": "3990000",
    "end": "3996095"
  },
  {
    "text": "It takes time proportional to\nthe height of the tree.",
    "start": "3996095",
    "end": "4001377"
  },
  {
    "text": "That's pretty easy.\nIf I need to list all overlaps,",
    "start": "4001377",
    "end": "4006457"
  },
  {
    "text": "suppose I want to list all the\noverlaps, how quickly can I do",
    "start": "4006457",
    "end": "4012552"
  },
  {
    "text": "that?\nCan somebody suggest how I could use this as a subroutine\nto list all overlaps?",
    "start": "4012552",
    "end": "4022000"
  },
  {
    "start": "4022000",
    "end": "4033000"
  },
  {
    "text": "Suppose I have k overlaps,\nk intervals that overlap my query interval and I want to\nfind every single one of them,",
    "start": "4033000",
    "end": "4041043"
  },
  {
    "text": "how fast can I do that? ",
    "start": "4041043",
    "end": "4051000"
  },
  {
    "text": "How do I do it? ",
    "start": "4051000",
    "end": "4064000"
  },
  {
    "text": "How do I do it?\nIf I search a second time,",
    "start": "4064000",
    "end": "4069271"
  },
  {
    "text": "I might get the same value. ",
    "start": "4069271",
    "end": "4082000"
  },
  {
    "text": "Yeah, there you go.\nDo what? When you find it delete it.\nPut it over to the side.",
    "start": "4082000",
    "end": "4088932"
  },
  {
    "text": "Find the next one,\ndelete it until there are none left.\nAnd then, if I don't want to",
    "start": "4088933",
    "end": "4096132"
  },
  {
    "text": "modify the data structure,\ninsert them all back in. It costs me k lg n if they are\nk overlaps.",
    "start": "4096133",
    "end": "4104222"
  },
  {
    "text": "That's actually called an\noutput sensitive algorithm.",
    "start": "4104222",
    "end": "4110000"
  },
  {
    "text": "Because the running time of it\ndepends upon how much it outputs, so this is output\nsensitive.",
    "start": "4110000",
    "end": "4117000"
  },
  {
    "text": " The best to date for this\nproblem, by the way,",
    "start": "4117000",
    "end": "4127357"
  },
  {
    "text": "of listing all is O(k+lg n)\nwith a different data structure.",
    "start": "4127357",
    "end": "4134380"
  },
  {
    "text": "And, actually,\nthat was open for a while as an",
    "start": "4134380",
    "end": "4139737"
  },
  {
    "text": "open problem.\nOK. Correctness.",
    "start": "4139738",
    "end": "4147000"
  },
  {
    "text": " Why does this algorithm always\nwork correctly?",
    "start": "4147000",
    "end": "4156696"
  },
  {
    "text": "The key issue of the\ncorrectness is that I am picking",
    "start": "4156697",
    "end": "4162126"
  },
  {
    "text": "one way to go,\nleft or right. And that's great,\nas long as it is in that",
    "start": "4162126",
    "end": "4169328"
  },
  {
    "text": "subtree.\nBut how do I know that when I pick I decide I'm going to go\nleft that it might not be in the",
    "start": "4169329",
    "end": "4179181"
  },
  {
    "text": "right subtree and I went the\nwrong way? Or, if I went right,\nthat I accidentally left one",
    "start": "4179181",
    "end": "4187000"
  },
  {
    "text": "out on the left side?\nWe're always going just one direction.\nAnd that's sort of the",
    "start": "4187000",
    "end": "4194272"
  },
  {
    "text": "cleverness of the code.\nThe theorem is let's let L be the set of intervals i prime in\nthe left of a node x.",
    "start": "4194272",
    "end": "4205000"
  },
  {
    "text": "And R be the set of i primes in\nthe right of x.",
    "start": "4205000",
    "end": "4214106"
  },
  {
    "text": "And now there are two parts I\nam going to show.",
    "start": "4214106",
    "end": "4223213"
  },
  {
    "text": "If the search goes right then\nthe set of i prime in L,",
    "start": "4223213",
    "end": "4233705"
  },
  {
    "text": "such that i prime overlaps i is\nthe empty set.",
    "start": "4233705",
    "end": "4244000"
  },
  {
    "text": "That's the first thing I do.\nIf it goes right then there is nothing in the left subtree that\noverlaps.",
    "start": "4244000",
    "end": "4252250"
  },
  {
    "text": "It's always,\nwhenever the code goes right, no problem, because there was\nnothing in the left subtree to",
    "start": "4252250",
    "end": "4260583"
  },
  {
    "text": "be found.\nDoes everybody understand what that says?\nWe are going to prove this,",
    "start": "4260583",
    "end": "4265982"
  },
  {
    "text": "but I want to make sure people\nunderstand. Because the second one is going\nto be harder to understand so",
    "start": "4265982",
    "end": "4271986"
  },
  {
    "text": "you've got to make sure you\nunderstand this one first. Any questions about this?\nOK. If the search goes left --",
    "start": "4271986",
    "end": "4279000"
  },
  {
    "start": "4279000",
    "end": "4287000"
  },
  {
    "text": "-- then the set of i prime in L\nsuch that i prime overlaps i",
    "start": "4287000",
    "end": "4300808"
  },
  {
    "text": "empty set implies that i prime\n--",
    "start": "4300808",
    "end": "4309000"
  },
  {
    "start": "4309000",
    "end": "4320000"
  },
  {
    "text": "OK.\nWhat is this saying? If the search goes left,\nif the left was empty,",
    "start": "4320000",
    "end": "4326987"
  },
  {
    "text": "in other words,\nif you went left and you discovered that there was\nnothing in there to find,",
    "start": "4326987",
    "end": "4336000"
  },
  {
    "text": "no overlapping interval to find\nthen it is OK because it",
    "start": "4336000",
    "end": "4341569"
  },
  {
    "text": "wouldn't have helped me to go\nright anyway because there is",
    "start": "4341569",
    "end": "4347443"
  },
  {
    "text": "nothing in the right to be\nfound. So it is not guaranteeing that\nthere is nothing to be found in",
    "start": "4347443",
    "end": "4357809"
  },
  {
    "text": "the left, but if there happens\nto be nothing to find in the",
    "start": "4357809",
    "end": "4363333"
  },
  {
    "text": "left it is OK because there was\nnothing to be found in the right",
    "start": "4363333",
    "end": "4369333"
  },
  {
    "text": "either.\nThat is what the second one says.\nIn either case,",
    "start": "4369333",
    "end": "4374475"
  },
  {
    "text": "you're OK to go the way.\nSo let's do this proof.",
    "start": "4374476",
    "end": "4380000"
  },
  {
    "text": " Does everybody understand what\nthe proof says?",
    "start": "4380000",
    "end": "4389090"
  },
  {
    "text": "Understanding the proof is\ntricky. It's logic.\nLogic is tricky.",
    "start": "4389090",
    "end": "4394545"
  },
  {
    "text": "Suppose the search goes right.\nWe'll do the first one.",
    "start": "4394545",
    "end": "4400000"
  },
  {
    "start": "4400000",
    "end": "4407000"
  },
  {
    "text": "If left of x is NIL then we are\ndone since we proved what we",
    "start": "4407000",
    "end": "4417275"
  },
  {
    "text": "wanted to prove.\nIf we go right there are two",
    "start": "4417275",
    "end": "4424938"
  },
  {
    "text": "possibilities,\neither we have left of x be NIL",
    "start": "4424938",
    "end": "4432775"
  },
  {
    "text": "or left of x is not NIL.\nSo if it is NIL we are OK",
    "start": "4432775",
    "end": "4440388"
  },
  {
    "text": "because we said if it goes right\nI want to prove this,",
    "start": "4440389",
    "end": "4445455"
  },
  {
    "text": "that the things in the left\nsubtree that overlap is empty.",
    "start": "4445455",
    "end": "4450904"
  },
  {
    "text": "If there is nothing there,\nthere is clearly nothing there",
    "start": "4450904",
    "end": "4456257"
  },
  {
    "text": "that overlaps.\nOtherwise, the low of i is greater than m of the left of x.",
    "start": "4456257",
    "end": "4464000"
  },
  {
    "text": " If I look at x here,\neither x was NIL in the while",
    "start": "4464000",
    "end": "4474775"
  },
  {
    "text": "statement here or this is true.\nWe just said it is not NIL so",
    "start": "4474775",
    "end": "4481846"
  },
  {
    "text": "let's take a look at,\nexcuse me. I'm on the wrong line.\nI am in this loop.",
    "start": "4481847",
    "end": "4490216"
  },
  {
    "text": "Left of x was not NIL and the\nlow of i was this.",
    "start": "4490216",
    "end": "4495756"
  },
  {
    "text": "Which way am I going here?\nI am going right.",
    "start": "4495756",
    "end": "4501530"
  },
  {
    "text": "Therefore, this was not true.\nSo either left of x was not",
    "start": "4501530",
    "end": "4506572"
  },
  {
    "text": "NIL, which was the first one,\nor low of i is greater than m",
    "start": "4506572",
    "end": "4511794"
  },
  {
    "text": "of left of x if I am going\nright. If I'm going right one of those\ntwo had to be true.",
    "start": "4511794",
    "end": "4519176"
  },
  {
    "text": "The first one was easy.\nOtherwise, we have this, low of i is greater than m of\nleft of x.",
    "start": "4519176",
    "end": "4528000"
  },
  {
    "text": "Now this has got to be that\nvalue. m of left of x is the right\nendpoint, is the high endpoint",
    "start": "4528000",
    "end": "4538359"
  },
  {
    "text": "of some interval in that\nsubtree. This is equal to the high of j\nfor some j in L.",
    "start": "4538359",
    "end": "4547338"
  },
  {
    "text": "So m of left of x must be equal\nto the high of some endpoint",
    "start": "4547338",
    "end": "4554129"
  },
  {
    "text": "because that's how we're picking\nthe m's.",
    "start": "4554129",
    "end": "4560000"
  },
  {
    "text": "For some j in the left subtree.\nAnd no other interval in L has",
    "start": "4560000",
    "end": "4573863"
  },
  {
    "text": "a larger high endpoint --",
    "start": "4573863",
    "end": "4580000"
  },
  {
    "start": "4580000",
    "end": "4587000"
  },
  {
    "text": "-- than high of j.\nIf I draw a picture here,",
    "start": "4587000",
    "end": "4593456"
  },
  {
    "text": "I have over here i and this is\nthe low of i.",
    "start": "4593456",
    "end": "4599400"
  },
  {
    "text": "And I have j where we say its\nhigh endpoint is less than the",
    "start": "4599400",
    "end": "4607557"
  },
  {
    "text": "low of i.\nThis is j, and I don't know how",
    "start": "4607557",
    "end": "4613087"
  },
  {
    "text": "far over it goes.\nAnd this has high of j --",
    "start": "4613087",
    "end": "4620000"
  },
  {
    "start": "4620000",
    "end": "4628000"
  },
  {
    "text": "-- which is the highest one in\nthe left subtree. There is nobody else who has\ngot a higher right endpoint.",
    "start": "4628000",
    "end": "4638026"
  },
  {
    "text": "There is nobody else in this\nsubtree who could possibly",
    "start": "4638026",
    "end": "4643282"
  },
  {
    "text": "overlap I, because all of them\nend somewhere before this point.",
    "start": "4643283",
    "end": "4650000"
  },
  {
    "text": "This point is the highest one\nin a subtree.",
    "start": "4650000",
    "end": "4658076"
  },
  {
    "text": "Therefore, i prime in L such\nthat i prime overlaps i is the",
    "start": "4658076",
    "end": "4669230"
  },
  {
    "text": "empty set.\nAnd now the hard case.",
    "start": "4669230",
    "end": "4675384"
  },
  {
    "text": "Everybody stretch.\nHard case.",
    "start": "4675384",
    "end": "4680785"
  },
  {
    "text": "Does everybody follow this?\nThe point is that because this is the highest guy everybody\nelse has to be left,",
    "start": "4680786",
    "end": "4689039"
  },
  {
    "text": "so if you didn't overlap the\nhighest guy you're not going to overlap anybody.\nSuppose the search goes left --",
    "start": "4689039",
    "end": "4698000"
  },
  {
    "start": "4698000",
    "end": "4704000"
  },
  {
    "text": "-- and that there is nothing to\noverlap in the left subtree.",
    "start": "4704000",
    "end": "4714000"
  },
  {
    "text": "I went left here but I am not\ngoing to find anything. Now I want to prove that it\nwouldn't have helped me to go",
    "start": "4714000",
    "end": "4723922"
  },
  {
    "text": "right.\nThat's essentially what the theorem here says.\nThat if I assume this it",
    "start": "4723922",
    "end": "4730812"
  },
  {
    "text": "wouldn't have helped to go\nright. I want to show that there is\nnothing in the right subtree.",
    "start": "4730812",
    "end": "4740000"
  },
  {
    "text": "So going left was OK because I\nwasn't going to find anything",
    "start": "4740000",
    "end": "4747277"
  },
  {
    "text": "anyway.\nSimilarly, we go through a similar analysis.\nLow of i is less than or equal",
    "start": "4747277",
    "end": "4757145"
  },
  {
    "text": "to m of the left of x,\nwhich once again is equal to",
    "start": "4757145",
    "end": "4763312"
  },
  {
    "text": "the high of j for some j in L.\nWe are just saying if I go left",
    "start": "4763312",
    "end": "4774053"
  },
  {
    "text": "these things must be true.\nI went left.",
    "start": "4774053",
    "end": "4781473"
  },
  {
    "text": "Since j is in L it doesn't\noverlap i, because the set of",
    "start": "4781473",
    "end": "4792213"
  },
  {
    "text": "things that overlap i in L is\nempty set.",
    "start": "4792213",
    "end": "4801000"
  },
  {
    "text": "Since j doesn't overlap i that\nimplies that the high of i must",
    "start": "4801000",
    "end": "4814022"
  },
  {
    "text": "be less than the low of j.",
    "start": "4814022",
    "end": "4820000"
  },
  {
    "text": " Since j is in L and it doesn't\noverlap i, what are the",
    "start": "4820000",
    "end": "4831913"
  },
  {
    "text": "possibilities?\nWe essentially have here,",
    "start": "4831913",
    "end": "4838145"
  },
  {
    "text": "if I draw a picture,\nI have j and L and I have i",
    "start": "4838145",
    "end": "4845939"
  },
  {
    "text": "here.\nThe point is that it doesn't",
    "start": "4845939",
    "end": "4851412"
  },
  {
    "text": "overlap it, therefore,\nit must be to the left because",
    "start": "4851412",
    "end": "4860035"
  },
  {
    "text": "its low endpoint is less than\nthis.",
    "start": "4860035",
    "end": "4867000"
  },
  {
    "text": "But it doesn't overlap it,\ntherefore its high endpoint must be left of the low of this\none.",
    "start": "4867000",
    "end": "4875000"
  },
  {
    "start": "4875000",
    "end": "4888000"
  },
  {
    "text": "Now we will use the binary\nsearch tree property. ",
    "start": "4888000",
    "end": "4897000"
  },
  {
    "text": "That implies that for all i\nprime in R, everything in the",
    "start": "4897000",
    "end": "4904576"
  },
  {
    "text": "right subtree,\nwe have a low of j is less than",
    "start": "4904576",
    "end": "4910664"
  },
  {
    "text": "or equal to low of i prime,\nso we're sorted on the low",
    "start": "4910664",
    "end": "4917835"
  },
  {
    "text": "endpoints.\nEverything in the right subtree must have a low endpoint that\nstarts to the right of the low",
    "start": "4917835",
    "end": "4927081"
  },
  {
    "text": "endpoint of j because j in the\nleft subtree. And everything in the whole\ntree is sorted by low endpoints,",
    "start": "4927081",
    "end": "4935106"
  },
  {
    "text": "so anything in the right\nsubtree is going to start over here.\nThose are other things.",
    "start": "4935106",
    "end": "4941558"
  },
  {
    "text": "These are the i primes in R.\nWe don't know how many there are, but they all start to the\nright of this point.",
    "start": "4941558",
    "end": "4951000"
  },
  {
    "text": "So they cannot overlap i\neither, therefore,",
    "start": "4951000",
    "end": "4960333"
  },
  {
    "text": "there is nothing.\nAll the i primes in R is also",
    "start": "4960333",
    "end": "4970555"
  },
  {
    "text": "nobody. ",
    "start": "4970555",
    "end": "4977000"
  },
  {
    "text": "Just to go back again,\nthe basic idea is that since",
    "start": "4977000",
    "end": "4982942"
  },
  {
    "text": "this guy doesn't overlap the guy\nwho is in the left and everybody",
    "start": "4982942",
    "end": "4990547"
  },
  {
    "text": "to the right is going to be\nfurther to the right,",
    "start": "4990547",
    "end": "4996252"
  },
  {
    "text": "if I go left and don't find\nanything that's OK because I am",
    "start": "4996252",
    "end": "5003144"
  },
  {
    "text": "not going to find anything over\nhere anyway.",
    "start": "5003144",
    "end": "5008255"
  },
  {
    "text": "They are not going to overlap.\nData-structure augmentation,",
    "start": "5008255",
    "end": "5015147"
  },
  {
    "text": "great stuff.\nIt will give you a lot of rich,",
    "start": "5015147",
    "end": "5021652"
  },
  {
    "text": "rich data structures built on\nany ones you know,",
    "start": "5021652",
    "end": "5027189"
  },
  {
    "text": "hash tables,\nheaps, binary search trees and so forth.",
    "start": "5027189",
    "end": "5035000"
  }
]