[
  {
    "start": "0",
    "end": "43000"
  },
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help MIT\nOpenCourseWare continue to",
    "start": "0",
    "end": "6859"
  },
  {
    "text": "offer high quality educational\nresources for free. To make a donation or view\nadditional materials from",
    "start": "6860",
    "end": "13420"
  },
  {
    "text": "hundreds of MIT courses, visit\nMIT OpenCourseWare at ocw.mit.edu.",
    "start": "13420",
    "end": "18760"
  },
  {
    "text": " PROFESSOR: So we'll\nget started. So today we are going to\ndive into some parallel",
    "start": "18760",
    "end": "27240"
  },
  {
    "text": "architectures. So the way, if you look at the\nbig world, is there's --",
    "start": "27240",
    "end": "36070"
  },
  {
    "text": "just counting parallelism, you\ncan do it implicitly, either by hardware or the compiler. So the user won't see it.",
    "start": "36070",
    "end": "42220"
  },
  {
    "text": "It will be done behind the\nuser's back, but can be done by hardware or compiler. Or explicitly, visible\nto the user.",
    "start": "42220",
    "end": "48980"
  },
  {
    "start": "43000",
    "end": "43000"
  },
  {
    "text": "So the hardware part is done in\nsuperscalar processors, and all those things will have\nexplicitly parallel",
    "start": "48980",
    "end": "55550"
  },
  {
    "text": "architecture. So what I am going to do is\nspend some time just talking",
    "start": "55550",
    "end": "62010"
  },
  {
    "text": "about implicitly parallel\nsuperscalar processors. Because probably the entire time\nyou guys were born till",
    "start": "62010",
    "end": "68290"
  },
  {
    "text": "now, this has been the\nmainstream, people are building these things,\nand we are use to it. And now we are kind\nof doing a switch.",
    "start": "68290",
    "end": "74980"
  },
  {
    "text": "Then we'll go into explicit\nparallelism processors and kind of look at different types\nin there, and get a feel",
    "start": "74980",
    "end": "80310"
  },
  {
    "text": "for the big picture. So let's start at implicitly\nparallel superscalar",
    "start": "80310",
    "end": "86140"
  },
  {
    "text": "processors. So there are two types of\nsuperscalar processors. One is what we call statically\nscheduled. Those are kind of simpler ones,\nwhere you use compiler",
    "start": "86140",
    "end": "94330"
  },
  {
    "start": "87000",
    "end": "87000"
  },
  {
    "text": "techniques to figure out where\nthe parallelism is. And what happens is the computer\nkeeps executing,",
    "start": "94330",
    "end": "100280"
  },
  {
    "text": "intead of one instruction at a\ntime, the few instructions next to each other\nin one bunch. Like a bundle after\nbundle type thing.",
    "start": "100280",
    "end": "107180"
  },
  {
    "text": "On the other hand, dynamically\nscheduled processors -- things like the current Pentiums\n-- are a lot more",
    "start": "107180",
    "end": "112260"
  },
  {
    "text": "complicated. They have to extract instruction\nlevel parallelism. ILP doesn't mean integer linear\nprogramming, it's",
    "start": "112260",
    "end": "118020"
  },
  {
    "text": "instruction level parallelism. Schedule them as soon as\noperands become available,",
    "start": "118020",
    "end": "123840"
  },
  {
    "text": "when the data is able to\nrun these instructions. Then there's just a bunch of\nthings that get more about parallelism, things like rename\nregisters to eliminate",
    "start": "123840",
    "end": "130610"
  },
  {
    "text": "some dependences. You execute things\nout of order. If later instructions the\noperands become available",
    "start": "130610",
    "end": "136580"
  },
  {
    "text": "early, you'll get those things\ndone instead of waiting. You can speculate to execute. I'll go through a little bit in\ndetail to kind of explain",
    "start": "136580",
    "end": "143430"
  },
  {
    "text": "what these things might be.  Why is this not going down.",
    "start": "143430",
    "end": "149680"
  },
  {
    "text": "Oops. So if you look at a\nnormal pipeline.",
    "start": "149680",
    "end": "156540"
  },
  {
    "start": "152000",
    "end": "152000"
  },
  {
    "text": "So this is a 004\ntype pipeline. What I have is a very\nsimplistic four",
    "start": "156540",
    "end": "163790"
  },
  {
    "text": "stage pipeline in there. So a normal microprocessor,\na single-issue, will do something like this.",
    "start": "163790",
    "end": "170080"
  },
  {
    "text": "And if you look at it, there's\nstill a little bit of parallelism here. Because you don't wait till the\nfirst thing finishes to go",
    "start": "170080",
    "end": "176319"
  },
  {
    "text": "to the second thing. If you look at a superscalar,\nyou have something like this.",
    "start": "176320",
    "end": "181670"
  },
  {
    "start": "179000",
    "end": "179000"
  },
  {
    "text": "This is an in-order\nsuperscalar. What happens is in every cycle\ninstead of doing one, you",
    "start": "181670",
    "end": "187019"
  },
  {
    "text": "fetch two, you decode two,\nyou execute two, and so on and so forth.",
    "start": "187020",
    "end": "192080"
  },
  {
    "text": "In an out-of-order super-scalar,\nthese are not going in these very\nnice boundaries. You have a fetch unit that\nfetches like hundreds ahead,",
    "start": "192080",
    "end": "199930"
  },
  {
    "text": "and it keeps issuing as soon\nas things are fetched and decoded to the execute unit. And it's a lot more of a complex\npicture in there.",
    "start": "199930",
    "end": "206599"
  },
  {
    "text": "I'm not going to show too much\nof the picture there, because it's a very complicated thing.",
    "start": "206600",
    "end": "211830"
  },
  {
    "text": "So the first thing the processor\nhas to do is, it has to look for true data\ndependences.",
    "start": "211830",
    "end": "218890"
  },
  {
    "text": "True data dependence says that\nthis instruction in fact is using something produced\nby the previous guy.",
    "start": "218890",
    "end": "225990"
  },
  {
    "text": "So this is important because\nif the two instructions are data dependent, they cannot be\nexecuted simultaneously.",
    "start": "225990",
    "end": "233410"
  },
  {
    "start": "233000",
    "end": "233000"
  },
  {
    "text": "You to wait till the first\nguy finishes to get the second guy. It cannot be completely\noverlapped, and you can't",
    "start": "233410",
    "end": "238480"
  },
  {
    "text": "execute them in out-of-order. You have to make sure the\ndata comes in before you actually use it. ",
    "start": "238480",
    "end": "245189"
  },
  {
    "text": "In computer architecture jargon,\nthis is called a pipeline hazard.",
    "start": "245190",
    "end": "250340"
  },
  {
    "text": "And this is called a\nRead After Write hazard, or RAW hazard. What that means is that the\nwrite has to finish before you",
    "start": "250340",
    "end": "258370"
  },
  {
    "text": "can do the read. In a microprocessor, people try\nvery hard to minimize the",
    "start": "258370",
    "end": "263659"
  },
  {
    "text": "time you have to wait to do\nthat, and you really have to honor that. ",
    "start": "263660",
    "end": "272780"
  },
  {
    "start": "268000",
    "end": "268000"
  },
  {
    "text": "In hardware/software what you\nhave to do is you have to preserve this program\nordering.",
    "start": "272780",
    "end": "278330"
  },
  {
    "text": "The program has to be executed\nsequentially, determined by the source program. So if the source program says\nsome order of doing things,",
    "start": "278330",
    "end": "284560"
  },
  {
    "text": "you better -- if there's some reason for\ndoing that, you better actually adhere to that order. You can't go and just do things\nin a haphazard way.",
    "start": "284560",
    "end": "291390"
  },
  {
    "text": "And dependences are basically\na fact of the program, so what you got.",
    "start": "291390",
    "end": "296940"
  },
  {
    "text": "If you're lucky you'll get a\nprogram without too many dependences, but most probably\nyou'll get programs that have a lot of dependences.",
    "start": "296940",
    "end": "302010"
  },
  {
    "text": "That's normal.  There's a lot of importance\nof the data dependence.",
    "start": "302010",
    "end": "308169"
  },
  {
    "text": "It indicates the possibility\nof these hazards, how these dependences have to work. And it determines the order in\nwhich the results might be",
    "start": "308170",
    "end": "314020"
  },
  {
    "text": "calculated, because if you need\nthe result of that to do the next, you have what you\ncall a dependency chain.",
    "start": "314020",
    "end": "321700"
  },
  {
    "text": "And you have to excute\nthat in that order. And because of the dependency\nchain, it sets an upper bound",
    "start": "321700",
    "end": "326930"
  },
  {
    "text": "of how much parallelism that\ncan be possibly expected. If you can say in all your\nprogram there's nothing",
    "start": "326930",
    "end": "332230"
  },
  {
    "text": "dependent -- every instruction\njust can go any time -- then you can say the best\ncomputer will get done in one",
    "start": "332230",
    "end": "338390"
  },
  {
    "text": "cycle, because everything\ncan run. But if you say the next\ninstruction is dependent on the previous one, the next\ninstruction is dependent on",
    "start": "338390",
    "end": "344760"
  },
  {
    "text": "the previous one, you\nhave a chain. And no matter how good the\nhardware, you have to wait till that chain finishes.",
    "start": "344760",
    "end": "350580"
  },
  {
    "text": "And you don't get that\nmuch parallelism. So the goal is to exploit\nparallelism by preserving the",
    "start": "350580",
    "end": "357150"
  },
  {
    "text": "program order where it affects\nthe outcome of the program. So if we want to have a look and\nfeel like the program is",
    "start": "357150",
    "end": "364190"
  },
  {
    "text": "run on a nice single-issue\nmachine that does one instruction after another after\nanother, that's the",
    "start": "364190",
    "end": "369760"
  },
  {
    "text": "world we are looking in. And then we are doing all this\nunderneath to kind of get performance, but give\nthat abstraction.",
    "start": "369760",
    "end": "377540"
  },
  {
    "start": "377000",
    "end": "377000"
  },
  {
    "text": "So there are other dependences\nthat we can do better. There are two types of\nname dependences.",
    "start": "377540",
    "end": "383850"
  },
  {
    "text": "That means there's no real\nprogram use of data, but there",
    "start": "383850",
    "end": "389450"
  },
  {
    "text": "are limited resources\nin the program. And you have resource\ncontentions. So the two types of resources\nare registers and memory.",
    "start": "389450",
    "end": "398430"
  },
  {
    "text": "So linear resource\ncontentions. The first name dependence is\nwhat we call anti-dependence.",
    "start": "398430",
    "end": "405830"
  },
  {
    "text": "Anti-dependence means that -- ",
    "start": "405830",
    "end": "414840"
  },
  {
    "text": "what I need to do is, I want\nto write this register. But in the previous instruction\nI'm actually reading the register.",
    "start": "414840",
    "end": "422110"
  },
  {
    "text": "Because I'm writing the\nnext one, I'm not really using the value. But I cannot write it until\nI have read that value.",
    "start": "422110",
    "end": "428220"
  },
  {
    "text": "Because the minute I write it,\nI lose the previous value. And if I haven't used\nit, I'm out of luck.",
    "start": "428220",
    "end": "434270"
  },
  {
    "text": "So there might be a case that\nI have a register, that I'm reading the register and\nrewriting it some new value.",
    "start": "434270",
    "end": "440740"
  },
  {
    "text": "But I have to wait till the\nreading is done before I do this new write. And that's called\nanti-dependence.",
    "start": "440740",
    "end": "446180"
  },
  {
    "text": "So what that means is we have\nto wait to run this instruction until this is\nall -- you can't do",
    "start": "446180",
    "end": "453410"
  },
  {
    "text": "it all before that. So this is called a Write After\nRead, as I said, in the",
    "start": "453410",
    "end": "461229"
  },
  {
    "text": "architecture jargon. The other dependences have\nwhat you call output dependence.",
    "start": "461230",
    "end": "466470"
  },
  {
    "start": "462000",
    "end": "462000"
  },
  {
    "text": "Two guys are writing\nthe register, and then I'm reading it.",
    "start": "466470",
    "end": "471720"
  },
  {
    "text": "So I want to read the value\nthe last guy wrote. So if I reorder that,\nI get a wrong value.",
    "start": "471720",
    "end": "479080"
  },
  {
    "text": "Actually you can even\ndo better in here. How can you do better in here? AUDIENCE: You can eliminate I. PROFESSOR: Yeah. You can elimiate the first one,\nbecause nobody's using",
    "start": "479080",
    "end": "485580"
  },
  {
    "text": "that value. So you can go even further\nand further, but this is also a hazard.",
    "start": "485580",
    "end": "490680"
  },
  {
    "text": "This is called a Write\nAfter Write hazard.",
    "start": "490680",
    "end": "495729"
  },
  {
    "text": "And the interesting thing is\nby doing what you call register renaming, you can\neliminate these things.",
    "start": "495730",
    "end": "503650"
  },
  {
    "text": "So why do both have to use\nthe same register? In these two, if I use a\ndifferent register I don't",
    "start": "503650",
    "end": "509050"
  },
  {
    "text": "have that dependency. And so a lot of times in\nsoftware, and also in modern",
    "start": "509050",
    "end": "515719"
  },
  {
    "text": "superscalar hardware, there's\nthis huge amount of hardware resources that actually\ndo register renaming.",
    "start": "515720",
    "end": "521650"
  },
  {
    "text": "So they realized that\nanti-dependence is output dependent, and said\n-- \"Wait minute. Why do I even have to do that? I can use a different\nregister.\" So even",
    "start": "521650",
    "end": "527450"
  },
  {
    "text": "though you have -- Intel basically [UNINTELLIGIBLE] accessory only have\neight registers.",
    "start": "527450",
    "end": "534340"
  },
  {
    "text": "They are about 100\nregisters behind. Hardware registers just\nbasically let you do this reordering and renaming\n-- register renaming.",
    "start": "534340",
    "end": "541120"
  },
  {
    "text": " So the other type of depencence\nis control dependence.",
    "start": "541120",
    "end": "547170"
  },
  {
    "text": "So what that means is if you\nhave a program like this, you have to preserve the\nprogram ordering.",
    "start": "547170",
    "end": "553630"
  },
  {
    "text": "And what that means is S1 is\ncontrol dependent on p1.",
    "start": "553630",
    "end": "559300"
  },
  {
    "text": "Because depending on what p1 is,\nit will depend on this one to get excuted. S2 is control dependent\non p2, but not p1.",
    "start": "559300",
    "end": "567370"
  },
  {
    "text": "So it doesn't matter what p1\ndoes, S2 will execute only if",
    "start": "567370",
    "end": "572550"
  },
  {
    "text": "p2 is true. So there's a control dependence\nin there. ",
    "start": "572550",
    "end": "579880"
  },
  {
    "text": "Another interesting thing is\ncontrol dependence may -- you don't need to preserve\nit all the time.",
    "start": "579880",
    "end": "585190"
  },
  {
    "text": "You might be able to do things\nout of this order. Basically, what you can do is if\nyou are willing to do more",
    "start": "585190",
    "end": "591050"
  },
  {
    "text": "work, you can say -- \"Well,\nI will do this. I don't know that I really need\nit, because I don't know whether the p2 is true or not.",
    "start": "591050",
    "end": "596950"
  },
  {
    "text": "But I'll just keep doing it. And then if I really wanted,\nI'll actually have the results",
    "start": "596950",
    "end": "602800"
  },
  {
    "text": "ready for me.\" And that's called\nspeculative execution. So you can do speculation.",
    "start": "602800",
    "end": "608550"
  },
  {
    "text": "You speculatively think\nthat you will need something, and go do it. ",
    "start": "608550",
    "end": "614319"
  },
  {
    "text": "Speculation provides you with\na lot of increased ILP, because it can overcome\ncontrol dependence by",
    "start": "614320",
    "end": "621320"
  },
  {
    "text": "executing through branches,\nbefore even you know where the branch is going. And a lot of times you can go\nthrough both directions, and",
    "start": "621320",
    "end": "628120"
  },
  {
    "text": "say -- \"Wait a minute, I don't\nknow which way I'm going. I'll do both sides.\" And I know\nat least one side you are",
    "start": "628120",
    "end": "633210"
  },
  {
    "text": "going, and that will\nbe useful. And you can go more and more,\nand soon you see that you are doing so much more work than\nactually will be useful.",
    "start": "633210",
    "end": "639170"
  },
  {
    "text": " So the first level of\nspeculation is -- speculation",
    "start": "639170",
    "end": "645710"
  },
  {
    "text": "basically says, you go, you\nfetch, issue, and execute everything. You do the end of the thing\nwithout just committing your",
    "start": "645710",
    "end": "652060"
  },
  {
    "text": "weight into the commit to make\nsure that the right thing actually happened. So this is the full\nspeculation.",
    "start": "652060",
    "end": "658800"
  },
  {
    "text": "There's a little bit of less\nspeculation called dynamic scheduling. If you look at a microprocessor,\none of the",
    "start": "658800",
    "end": "664760"
  },
  {
    "text": "biggest problems is the pipeline\nstall is a branch. You can't keep even a pipeline\ngoing, even in a single-issue",
    "start": "664760",
    "end": "672430"
  },
  {
    "text": "machine, if there's a branch,\nbecause the branch condition gets resolved. Not after the next instruction\nhas to get fetched.",
    "start": "672430",
    "end": "678750"
  },
  {
    "text": "So if you do a normal thing,\nyou just have to reinstall the pipeline. So what dynamic scheduling or\na branch predictor sometimes",
    "start": "678750",
    "end": "689800"
  },
  {
    "text": "does is, it will say I\nwill predict where the branch is going. So I might not have fed board\ndirection, but I will",
    "start": "689800",
    "end": "695730"
  },
  {
    "text": "speculatively go fetch down\none path, because it looks like it which it's going. For many times, like for example\nin a loop, 99% of the",
    "start": "695730",
    "end": "702890"
  },
  {
    "text": "time you are going in the\nbackage, because you don't go through that. And then if you predict\nthat you are mostly [UNINTELLIGIBLE]. So the branch predictors are\npretty good at finding these",
    "start": "702890",
    "end": "709730"
  },
  {
    "text": "kind of cases. There are very few branches\nthat are kind of 50-50. Most branches have\na preferred path.",
    "start": "709730",
    "end": "716260"
  },
  {
    "text": "If you find the preferred path\nyou can go through that, and you don't pay any penalty. The penalty is if you made a\nmistake, you had to kind of",
    "start": "716260",
    "end": "721860"
  },
  {
    "text": "back up a few times. So you can at least do\nin one direction. Most hardware do that, even the\nsimplest things do that.",
    "start": "721860",
    "end": "728240"
  },
  {
    "text": "But if you do good speculation\nyou go both. You say -- \"Eh, there's a chance\nif I go down that path I'm going to lose a lot.",
    "start": "728240",
    "end": "733900"
  },
  {
    "text": "So I'll do that, too.\" So that\ndoes a lot of expensive stuff.",
    "start": "733900",
    "end": "738920"
  },
  {
    "text": "And basically this is more\nfor data flow model. So as soon as data get available\nyou don't think too",
    "start": "738920",
    "end": "746160"
  },
  {
    "text": "much about control, you\nkeep firing that. So today's superscalar\nprocessors have huge amount of",
    "start": "746160",
    "end": "756780"
  },
  {
    "text": "speculation. You speculate on everything. Branch prediction. You assume all the branches,\nmultilevel down you predict,",
    "start": "756780",
    "end": "762690"
  },
  {
    "text": "and go that. Value prediction. You look at it and say -- \"Hey,\nI think it's going to be two.\" And in fact there's a\npaper that says about 80% of",
    "start": "762690",
    "end": "770450"
  },
  {
    "text": "program values are zero.  And then you say -- \"OK.",
    "start": "770450",
    "end": "776060"
  },
  {
    "text": "I'll think it's zero,\nand it'll go on. And if it is not zero, I'll\nhave to come back and do that.\" So things like that. AUDIENCE: Do you know what\npercentage of the time it has",
    "start": "776060",
    "end": "782437"
  },
  {
    "text": "to go back? PROFESSOR: A lot of times I\nthink it is probably an 80-20",
    "start": "782437",
    "end": "788350"
  },
  {
    "text": "type thing, but if you do too\nmuch you're always backing up. But you can at least do\na few things down assuming it's zero.",
    "start": "788350",
    "end": "794650"
  },
  {
    "text": "So things like that. People, try to take advantage\nof the statistical nature of",
    "start": "794650",
    "end": "801530"
  },
  {
    "text": "programs. And you are\nmining every day. So basically there's no --",
    "start": "801530",
    "end": "809160"
  },
  {
    "text": "it's almost at the entropy. So every information is kind\nof taken advantage in the program, but what that means\nis you are wasting a lot of",
    "start": "809160",
    "end": "817370"
  },
  {
    "text": "time cycles. So the conventional\nwisdom was -- \"You have Moore's slope.",
    "start": "817370",
    "end": "822610"
  },
  {
    "text": "You keep getting these\ntransistors. There's nothing to do with it,\nso let me do more other work.",
    "start": "822610",
    "end": "827680"
  },
  {
    "text": "We'll predicate, we'll do\nadditional work, we'll go through multipe branches, we'll\nassume things are zero. Because what's wasted?",
    "start": "827680",
    "end": "834110"
  },
  {
    "text": "Because it's extra work, if it\nis wrong we just give it up.\" So that's the way it went, and\nthe thing is it's very",
    "start": "834110",
    "end": "840380"
  },
  {
    "text": "inefficient. Because a lot of times you are\ndoing -- think about even a simple cache. If you have 4-way as a cache.",
    "start": "840380",
    "end": "847580"
  },
  {
    "text": "Every cycle when you're doing\na memory fetch, you are fetching on all four, assuming\none of it will have hit.",
    "start": "847580",
    "end": "854140"
  },
  {
    "text": "Even if you have a cache hit\nwhere only one bank is hit, and all the other three\nbanks are not hit.",
    "start": "854140",
    "end": "859350"
  },
  {
    "text": "So you are just doing a\nlot more extra work just to get one thing. Of course because if you wait to\nfigure out which bank, it's",
    "start": "859350",
    "end": "866580"
  },
  {
    "text": "going to add a little\nbit more delay. So you won't do it parallelly. You know that's it's going to\nbe one of the lines, so you just go fetch everything\nand then later decide",
    "start": "866580",
    "end": "872899"
  },
  {
    "text": "which one you want. So things like that really\nwaste energy.",
    "start": "872900",
    "end": "878390"
  },
  {
    "text": "And what has been happening in\nthe last 10 years is you double the amount of\ntransistors, and you add 5%",
    "start": "878390",
    "end": "884320"
  },
  {
    "text": "more performance gain. Because statistically you have\nmined most of the lower",
    "start": "884320",
    "end": "889470"
  },
  {
    "text": "hanging fruit, there's\nnothing much left. So you're getting to a point\nthat has a little bit of a statistical significance,\nand you go after that.",
    "start": "889470",
    "end": "896279"
  },
  {
    "text": "So of course, most of\nthe time it's wrong. So this leads to this chart that\nactually yesterday I also",
    "start": "896280",
    "end": "903060"
  },
  {
    "text": "pointed out. So you are going from hot plate\nto nuclear reactor, to rocket nozzle.",
    "start": "903060",
    "end": "908790"
  },
  {
    "text": "We tend to be going\nin that direction. That is the path, because we\nare just doing all these wasteful things.",
    "start": "908790",
    "end": "914450"
  },
  {
    "text": "And right now, the power\nconsumption on processors is significant enough in both\nthings like laptops --",
    "start": "914450",
    "end": "921420"
  },
  {
    "text": "because the battery's not\ngetting faster -- as well as things like Google. So doing this extra\nuseless work is",
    "start": "921420",
    "end": "928360"
  },
  {
    "text": "actually starting to impact.  So for example, if you look\nat something like Pentium.",
    "start": "928360",
    "end": "934980"
  },
  {
    "text": "You have 11 stages\nof instructions.",
    "start": "934980",
    "end": "940310"
  },
  {
    "text": "You can execute 3 x86\ninstructions per cycle.",
    "start": "940310",
    "end": "945350"
  },
  {
    "text": "So you're doing this huge\nsuperscalar thing, but something that had been creeping\nin lately is also",
    "start": "945350",
    "end": "952750"
  },
  {
    "text": "some amount of explicit\nparallelism. So they introduced things like\nMMX and SSE instructions.",
    "start": "952750",
    "end": "958780"
  },
  {
    "text": "They are explicit parallelism,\nvisible to the user. So it's not hiding trying\nto get parallelism. So we have been slowly moving to\nthis kind of model, saying",
    "start": "958780",
    "end": "966980"
  },
  {
    "text": "if you want performance you have\nto do something manual. So people who really cared\nabout performance had to deal with that.",
    "start": "966980",
    "end": "972490"
  },
  {
    "text": "And of course, we put multiple\nchips together to build a multiprocessor --",
    "start": "972490",
    "end": "979250"
  },
  {
    "text": "it's not in a single chip --\nthat actually do parallel processing. So for about three, four years\nif you buy a workstation it",
    "start": "979250",
    "end": "988269"
  },
  {
    "text": "had two processors\nsitting in there. So dual processor, quad\nprocessor machines came about, and people started using that.",
    "start": "988270",
    "end": "993820"
  },
  {
    "text": "So it's not like we are doing\nthis shift abruptly, we have been going that direction.",
    "start": "993820",
    "end": "999770"
  },
  {
    "text": "For people who really cared\nabout performance, actually had to deal with that and were\nactually using that. ",
    "start": "999770",
    "end": "1006960"
  },
  {
    "text": "OK. So let's switch gears a little\nbit and do explicit parallelism. So this is kind of\nwhere we are --",
    "start": "1006960",
    "end": "1011980"
  },
  {
    "text": "where we are today, where\nwe are switching. So basically, these are the\nmachines that parallelism",
    "start": "1011980",
    "end": "1020740"
  },
  {
    "start": "1014000",
    "end": "1014000"
  },
  {
    "text": "exposed to software --\neither compiler. So you might not see it as a\nuser, but it exposes some",
    "start": "1020740",
    "end": "1025890"
  },
  {
    "text": "layer of software. And there are many different\nforms of it. From very loosely coupled\nmultiprocessors sitting on a",
    "start": "1025890",
    "end": "1035110"
  },
  {
    "text": "board, or even sitting on\nmultipe machines -- things like a cluster of\nworkstations --",
    "start": "1035110",
    "end": "1042459"
  },
  {
    "text": "to very tightly coupled\nmachines. So we'll go through, and figure\nout what are all the flavors of these things.",
    "start": "1042460",
    "end": "1047589"
  },
  {
    "text": "AUDIENCE: Excuse me. PROFESSOR: Mhmm? AUDIENCE: So does it mean that\nsince there being the level parallelism, the processor can\nexploit the fact that the",
    "start": "1047590",
    "end": "1055899"
  },
  {
    "text": "compiler knows the higher\nlevel instructions? Does that make any difference? PROFESSOR: It goes both ways. So what the processor knows is\nit know values for everything.",
    "start": "1055900",
    "end": "1065730"
  },
  {
    "text": "So it has full exact knowledge\nof what's going on. Compiler is an abstraction.",
    "start": "1065730",
    "end": "1071620"
  },
  {
    "text": "In that sense, processor\nwins in those. On the other hand, compile\ntime doesn't",
    "start": "1071620",
    "end": "1076730"
  },
  {
    "text": "affect the run time. So the compiler has a much\nbigger view of the world. ",
    "start": "1076730",
    "end": "1083440"
  },
  {
    "text": "Even the most aggressive\nprocessor can't look ahead more than 100 instructions. On the other hand, the compiler\nsees ahead of",
    "start": "1083440",
    "end": "1089759"
  },
  {
    "text": "millions of instructions. And so the compiler has the\nability to kind of get the big picture and do things --\nglobal kind of things.",
    "start": "1089760",
    "end": "1096960"
  },
  {
    "text": "But on the other hand, it loses\nout when it doesn't have information. Whereas when you do the hardware\nparallelism, you have",
    "start": "1096960",
    "end": "1103130"
  },
  {
    "text": "full information. AUDIENCE: You don't have\nto give up one at the loss of the other. PROFESSOR: The thing is, I don't\nthink we have a good way",
    "start": "1103130",
    "end": "1109490"
  },
  {
    "text": "of combining both very well. Because the thing is, sometimes\nglobal optimization needs local information,\nand that's not",
    "start": "1109490",
    "end": "1116140"
  },
  {
    "text": "available at run time. And global optimization is very\ncostly, so you can't say -- \"OK, I'm going to do it any\ntime.\" So I think it's kind of",
    "start": "1116140",
    "end": "1123860"
  },
  {
    "text": "even hybrid things. There's no nice mesh in there. ",
    "start": "1123860",
    "end": "1131960"
  },
  {
    "text": "So if you think a little bit\nabout parallelism, one interesting thing is\nthis Little's Law.",
    "start": "1131960",
    "end": "1138100"
  },
  {
    "text": "Little's Law says parallelism\nis a multiplication of",
    "start": "1138100",
    "end": "1145500"
  },
  {
    "text": "throughput vs. latency.  So the way to think about that\nis the parallelism is dictated",
    "start": "1145500",
    "end": "1154980"
  },
  {
    "text": "by the program in some sense. The program has a certain\namount of parallelism. So if you have a thing that has\na lot of latency to get to",
    "start": "1154980",
    "end": "1162735"
  },
  {
    "text": "the result, what that means is\nthere's a certain amount of",
    "start": "1162735",
    "end": "1167870"
  },
  {
    "text": "throughput you can satisfy. Whereas if you have a thing that\nhas a very low latency",
    "start": "1167870",
    "end": "1174380"
  },
  {
    "text": "operation, you can\ngo much wider. So if you look at Intel\nprocessors, what they have",
    "start": "1174380",
    "end": "1180460"
  },
  {
    "text": "done is the superscalars -- they have actually, to get\nthings faster they have a very long latency.",
    "start": "1180460",
    "end": "1186380"
  },
  {
    "text": "Because they know they\ncouldn't go more than three or four wide. So they went like 55 the\npipeline, three wide.",
    "start": "1186380",
    "end": "1192630"
  },
  {
    "text": " Because you can go fast,\nso they assume the",
    "start": "1192630",
    "end": "1198140"
  },
  {
    "text": "parallelism fits here. So still you need a lot\nof parallelism. So you say -- \"Three, why\nshould [UNINTELLIGIBLE] issue machine. [UNINTELLIGIBLE] three it's no\nbig deal.\" But no, if you have",
    "start": "1198140",
    "end": "1205600"
  },
  {
    "text": "55 the pipeline you need to have\n165 parallel instructions",
    "start": "1205600",
    "end": "1212210"
  },
  {
    "text": "on the fly any given time. So that's the thing. Even in the moder machine,\nthere's about hundreds of",
    "start": "1212210",
    "end": "1217960"
  },
  {
    "text": "instruction on the\nfly, because the pipeline is so large. So if you said 3-issue,\nit's not that.",
    "start": "1217960",
    "end": "1224250"
  },
  {
    "text": "I mean this happens in there. So this gives designers a lot\nof flexibiilty in where you",
    "start": "1224250",
    "end": "1229280"
  },
  {
    "text": "are expanding. And in some ways you\ncan have a lot --",
    "start": "1229280",
    "end": "1234380"
  },
  {
    "text": "there are some machines that\nare a lot wider, but the latency is -- For example, if you look\nat an Itanium.",
    "start": "1234380",
    "end": "1241019"
  },
  {
    "text": "It's clock cycle is about half\nthe time of the Pentium,",
    "start": "1241020",
    "end": "1246290"
  },
  {
    "text": "because it has a lot less\nlatency but a lot wider. So you can do these\nkind of tradeoffs.",
    "start": "1246290",
    "end": "1252580"
  },
  {
    "text": " Types of parallelism.",
    "start": "1252580",
    "end": "1257690"
  },
  {
    "text": "There are four categorizations\nhere. So one categorization is,\nyou have pipeline.",
    "start": "1257690",
    "end": "1263800"
  },
  {
    "text": "You do the same thing in\na pipeline fashion. So you do the same\ninstruction.",
    "start": "1263800",
    "end": "1269309"
  },
  {
    "text": "You do a little bit, and you\nstart another copy of another copy of another copy. So you kind of pipeline the\nsame thing down here.",
    "start": "1269310",
    "end": "1275710"
  },
  {
    "start": "1275000",
    "end": "1275000"
  },
  {
    "text": "Kind of a vector machine --\nwe'll go through categories that kind of fit in here. Another category is data-level\nparallelism.",
    "start": "1275710",
    "end": "1282390"
  },
  {
    "text": "What that means is, in a given\ncycle you do the same thing",
    "start": "1282390",
    "end": "1289130"
  },
  {
    "text": "many many many many -- the same instructions for\nmany many things. And then next cycle\nyou do something",
    "start": "1289130",
    "end": "1295620"
  },
  {
    "text": "different, stuff like that. Thread-level parallelism breaks\nin the other way. Thread-level parallelism\nsays --",
    "start": "1295620",
    "end": "1301360"
  },
  {
    "text": "\"I am not connecting the cycles,\nthey are independent. Each thread can go do something\ndifferent.\"",
    "start": "1301360",
    "end": "1308590"
  },
  {
    "text": "And instruction-level\nparallelism is kind of a combination. What you are doing is, you are\ndoing cycle by cycle -- they",
    "start": "1308590",
    "end": "1314865"
  },
  {
    "text": "are connected -- and each cycle\nyou do some kind of a combination of operations. So if you look at\nthis closely.",
    "start": "1314865",
    "end": "1321169"
  },
  {
    "text": "So pipelining hits here. Data parallel execution,\nthings like SIMD execution hits here.",
    "start": "1321170",
    "end": "1326870"
  },
  {
    "text": "Thread-level parallelism. Instruction-level parallelism. So before a models of\nparallelism, what software people see kind of fits also in\nthis architecture picture.",
    "start": "1326870",
    "end": "1338390"
  },
  {
    "text": "So when you are designing a\nparallel machine, what do you have to worry about? The first thing is\ncommunication.",
    "start": "1338390",
    "end": "1344700"
  },
  {
    "text": "That's the begin -- the problem in here. How do parallel operations\ncommunicate the data results?",
    "start": "1344700",
    "end": "1350930"
  },
  {
    "text": "Because it's not only an\nissue of bandwith, it's an issue of latency. The thing about bandwith is that\nhad been increasing by",
    "start": "1350930",
    "end": "1358300"
  },
  {
    "text": "Moore's Law. Latency, speed of light. So as I pointed out, there's\nno Moore's Law on speed of light, and you have\nto deal with that.",
    "start": "1358300",
    "end": "1366540"
  },
  {
    "text": "Synchronization. So when people do different\nthings, how do you synchronize at some point? Because you can't keep going\non different paths, at some",
    "start": "1366540",
    "end": "1373550"
  },
  {
    "text": "point you have to\ncome together. What's the cost? What are the processes\nof going it? Some stuff it's very\nexplicit --",
    "start": "1373550",
    "end": "1381669"
  },
  {
    "text": "you have to deal with that. Some machines it's built in,\nso every cycle you are",
    "start": "1381670",
    "end": "1386680"
  },
  {
    "text": "synchronizing. So sometimes it makes it easier\nfor you, sometimes it",
    "start": "1386680",
    "end": "1394299"
  },
  {
    "text": "makes it more inefficient. So you have to figure\nout what is in here. Resource management.",
    "start": "1394300",
    "end": "1400932"
  },
  {
    "text": "The thing about parallelism is\nyou have a lot of things going on, and managing that is\na very important issue.",
    "start": "1400932",
    "end": "1408480"
  },
  {
    "text": "Because sometimes if you put\nthings in the wrong place, the",
    "start": "1408480",
    "end": "1413970"
  },
  {
    "text": "cost of doing that might\nbe much higher. That really reduces the\nbenefit of doing that.",
    "start": "1413970",
    "end": "1420890"
  },
  {
    "text": "And finally the scalability. How do you build process\nthat not only can do 2x",
    "start": "1420890",
    "end": "1428070"
  },
  {
    "text": "parallelism, but can\ndo thousand? How can you keep growing\nwith Moore's Law. So there are some ways you can\nget really good numbers, small",
    "start": "1428070",
    "end": "1435960"
  },
  {
    "text": "numbers, but as you go bigger\nand bigger you can't scale. ",
    "start": "1435960",
    "end": "1441880"
  },
  {
    "text": "So here's a classic classification of parallel machines. This has been [? divided ?]\nup by Mike Flynn in 1966.",
    "start": "1441880",
    "end": "1447610"
  },
  {
    "text": "So he came up with four ways\nof classifying a machine. First he looked at how instruction and data is issued.",
    "start": "1447610",
    "end": "1455100"
  },
  {
    "text": "So one thing is single\ninstruction, single data. So there's single instruction\ngiven each cycle, and it",
    "start": "1455100",
    "end": "1461080"
  },
  {
    "text": "affects single data. This is your conventional\nuniprocessor. Then came a SIMD machine\n-- single",
    "start": "1461080",
    "end": "1468360"
  },
  {
    "text": "instruction, multiple data. So what that means is the given\ninstruction affects multiple data in here.",
    "start": "1468360",
    "end": "1474700"
  },
  {
    "text": "So things like -- there are two\ntypes, distributed memory and shared memory. I'll go to this distinction\nlater.",
    "start": "1474700",
    "end": "1481270"
  },
  {
    "text": "So there are a bunch\nof machines. In the good old times this was\na useful trick, because the sequencer -- or what ran the\ninstructions -- was a pretty",
    "start": "1481270",
    "end": "1488620"
  },
  {
    "text": "substantial piece of hardware. So you build one of them and\nuse it for many, many data.",
    "start": "1488620",
    "end": "1494780"
  },
  {
    "text": "Even today data in a Pentium\nif you are doing a SIMD instruction, you just issue one\ninstruction, it affects multiple data, and you\ncan get a nice reuse",
    "start": "1494780",
    "end": "1504400"
  },
  {
    "text": "of instruction decoding. Reduce the instruction bandwidth\nby doing SIMD.",
    "start": "1504400",
    "end": "1510919"
  },
  {
    "text": "Then you go to MIMD,\nwhich is Multiple Instruction, Multiple Data. So we have multiple instruction\nstreams each",
    "start": "1510920",
    "end": "1517600"
  },
  {
    "start": "1516000",
    "end": "1516000"
  },
  {
    "text": "affecting its own data. So each data streams,\ninstruction streams",
    "start": "1517600",
    "end": "1523240"
  },
  {
    "text": "separately. So things like message passing\nmachines, coherent and non-coherent shared memory.",
    "start": "1523240",
    "end": "1528390"
  },
  {
    "text": "I'll go into details\nof coherence and non-coherence later. There are multiple categories\nwithin that too.",
    "start": "1528390",
    "end": "1535060"
  },
  {
    "text": "And then finally, there's kind\nof a misnomer, MISD. There hasn't been a\nsingle machine. It doesn't make sense to have\nmultiple instructions work on",
    "start": "1535060",
    "end": "1541595"
  },
  {
    "text": "single data. So this classification,\nright now -- question? AUDIENCE: I've heard\nthat [INAUDIBLE]",
    "start": "1541595",
    "end": "1549070"
  },
  {
    "text": "PROFESSOR: Multiple instruction,\nsingle data? I don't know. You can try to fit something\nthere just to have something,",
    "start": "1549070",
    "end": "1555490"
  },
  {
    "text": "but it doesn't fit really well\ninto this kind of thinking. So I don't like that thinking.",
    "start": "1555490",
    "end": "1562340"
  },
  {
    "text": "I was thinking how should I do\nit, so I came up with a new way of classifying. So what my classification\nis, what's the last",
    "start": "1562340",
    "end": "1569390"
  },
  {
    "text": "thing you are sharing? Because when you are running\nsomething, if it is some single machine, some thing has\nto be shared, and some things",
    "start": "1569390",
    "end": "1576149"
  },
  {
    "start": "1574000",
    "end": "1574000"
  },
  {
    "text": "have to be separated. So are you sharing instructions,\nare you sharing the sequencer, are you sharing\nthe memory, are you sharing",
    "start": "1576150",
    "end": "1582740"
  },
  {
    "text": "the network? So this kind of fits many things\nnicely into this model. So let's go through\nthis model and see",
    "start": "1582740",
    "end": "1589670"
  },
  {
    "text": "different things in there. ",
    "start": "1589670",
    "end": "1594960"
  },
  {
    "text": "So let's look at shared\ninstruction processors. So there had been a lot of work\nin the good old days.",
    "start": "1594960",
    "end": "1603130"
  },
  {
    "text": "Did anybody know Goodyear\nactually made supercomputers?",
    "start": "1603130",
    "end": "1608290"
  },
  {
    "text": "Not only did they make tires,\nfor a long time they were actually making processors.",
    "start": "1608290",
    "end": "1613390"
  },
  {
    "text": "GE made processors,\nstuff like that. And so a long time ago this\nwas a very interesting",
    "start": "1613390",
    "end": "1620549"
  },
  {
    "text": "proposition, because there was a\nhuge amount of hardware that has to be dedicated to doing the\nsequence and running the",
    "start": "1620550",
    "end": "1628150"
  },
  {
    "text": "instruction. So just to share that was a\nreally interesting concept. So people built machines\nthat basically --",
    "start": "1628150",
    "end": "1634470"
  },
  {
    "text": "single instruction\nstream affecting multiple data in there. I think very well-known machines\nare things like",
    "start": "1634470",
    "end": "1641900"
  },
  {
    "text": "Thinking Machines CM-1,\nMaspar MP-1 -- which had 16,000 processors.",
    "start": "1641900",
    "end": "1651100"
  },
  {
    "text": "Small processors -- 4-bit processors, you can only\ndo 4-bit computation. And then every cycle you can\ndo 16,000 of them, 4-bit",
    "start": "1651100",
    "end": "1659100"
  },
  {
    "text": "things in here. It really fits in to the kind of\nthings they could build in hardware those days.",
    "start": "1659100",
    "end": "1665430"
  },
  {
    "text": "And there's one controller\nin there. So it is just a neat thing,\nbecause you can do a lot of work if you actually can\nmatch it in that form.",
    "start": "1665430",
    "end": "1671710"
  },
  {
    "text": " So the way you look at that is,\nto run this array you have",
    "start": "1671710",
    "end": "1678760"
  },
  {
    "text": "this array controller. And then you have processing\nelements, a",
    "start": "1678760",
    "end": "1684039"
  },
  {
    "text": "huge amount of them. And you have each processor\nmainly had distributed memory -- each has its own memory. And so given instruction,\neverybody did the same thing",
    "start": "1684040",
    "end": "1692150"
  },
  {
    "text": "to memory or arithmetic\nin there. And then you had also\ninterconnect network, so you",
    "start": "1692150",
    "end": "1698000"
  },
  {
    "text": "can actually send it. A lot of these things have\nthe [? near-enabled ?] communication. You can send data you near\nenable, so everybody kind of",
    "start": "1698000",
    "end": "1704860"
  },
  {
    "text": "shifts the 2-D or some kind\nof torus mapping in there.",
    "start": "1704860",
    "end": "1709900"
  },
  {
    "text": "And if you can program that,\nyou can get really good performance in there. ",
    "start": "1709900",
    "end": "1718150"
  },
  {
    "text": "And each cycle, it's\nvery synchronous. So each cycle everybody does\nthe same thing -- go to the next thing, do the same thing.",
    "start": "1718150",
    "end": "1723360"
  },
  {
    "text": " So the next very interesting\nmachine is this Cray-1.",
    "start": "1723360",
    "end": "1729840"
  },
  {
    "text": "I think this is one of\nthe first successful supercomputers out there. So here's the Cray-1, it is this\nkind of round seat type",
    "start": "1729840",
    "end": "1737250"
  },
  {
    "text": "thing sitting in here. Everybody know what was\nunder the seat? AUDIENCE: Cooling.",
    "start": "1737250",
    "end": "1743330"
  },
  {
    "text": "PROFESSOR: Cooling. So here's a photo. I don't think you can see that\n-- you can probably look at it when I put this on the\nweb -- was this",
    "start": "1743330",
    "end": "1749700"
  },
  {
    "text": "entire cooling mechanism. In fact Seymour Cray at one\ntime said one of his most important innovations\nin this machine is",
    "start": "1749700",
    "end": "1756505"
  },
  {
    "text": "how to cool the thing. And this is a generation,\nagain, that power was a big thing.",
    "start": "1756505",
    "end": "1762420"
  },
  {
    "text": "So each of these columns had\nthis huge amount of boards going, and in the middle had\nall the wiring going.",
    "start": "1762420",
    "end": "1768990"
  },
  {
    "text": "So we had this huge mess of\nwiring in the middle -- [UNINTELLIGIBLE] -- and then you had all\nthese boards in there in each of these.",
    "start": "1768990",
    "end": "1775130"
  },
  {
    "text": "So this is the Cray-1\nprocessor. AUDIENCE: Do you know\nyour little -- your laptop is way faster\nthan that Cray --",
    "start": "1775130",
    "end": "1783629"
  },
  {
    "text": "PROFESSOR: Yeah. Did you have the clock\nspeed in here?",
    "start": "1783630",
    "end": "1788655"
  },
  {
    "text": "[INTERPOSING VOICES] AUDIENCE: 80 MHz. PROFESSOR: So, yeah.",
    "start": "1788655",
    "end": "1794510"
  },
  {
    "text": "And that cost like $10 million\nor something like that at that time.",
    "start": "1794510",
    "end": "1801470"
  },
  {
    "text": "Moore's Law, it's\njust amazing. If you think if you apply\nMoore's Law to any other thing we have, it can't do\nthe comparison.",
    "start": "1801470",
    "end": "1808330"
  },
  {
    "text": "We are very fortunate to be\npart of that generation. AUDIENCE: But did it\nhave PowerPoint? PROFESSOR: So what it had,\nwas it had these",
    "start": "1808330",
    "end": "1816580"
  },
  {
    "text": "three type of registers. It had scalar registers,\naddress registers, and vector registers. The key thing there is\nthe vector register.",
    "start": "1816580",
    "end": "1823880"
  },
  {
    "text": "So if you want to do\nthings fast -- no, fast is not the word.",
    "start": "1823880",
    "end": "1829250"
  },
  {
    "text": "You can do a lot of computation\nin a short amount of time by using the\nvector registers.",
    "start": "1829250",
    "end": "1835840"
  },
  {
    "text": "So the way to look at that is\nnormally when you go to the execute stage you\ndo one thing.",
    "start": "1835840",
    "end": "1842350"
  },
  {
    "start": "1841000",
    "end": "1841000"
  },
  {
    "text": "In a vector register what\nhappens is it got pipelined. So execute state happened one\nword next, next, next.",
    "start": "1842350",
    "end": "1847790"
  },
  {
    "text": "You can do up to 64\nor even bigger. I think it was 64 length,\nlength 64 things.",
    "start": "1847790",
    "end": "1853380"
  },
  {
    "text": "So you can -- so that\ninstruction. So you do a few of these, and\nthen this state keeps going on",
    "start": "1853380",
    "end": "1858640"
  },
  {
    "text": "and on and on, for 64. And then you can pipeline in\nthe way that you can start another one.",
    "start": "1858640",
    "end": "1864170"
  },
  {
    "text": " Actually, this will use the same\nexecutioner, so you have to wait till that finishes\nto start.",
    "start": "1864170",
    "end": "1872230"
  },
  {
    "text": "So you can pipeline to get a\nhuge amount of things going through the pipeline. And so each cycle you can\ngraduate many, many",
    "start": "1872230",
    "end": "1880750"
  },
  {
    "text": "things going on. AUDIENCE: Can I ask you\na quick question? Something I'm trying to get\nstraight in my head. My notion -- and I don't think\nI'm right on this, that's why",
    "start": "1880750",
    "end": "1886960"
  },
  {
    "text": "I'm asking you -- is machines\nlike the Cray, I know you were talking about some of the vector\noperations, those were",
    "start": "1886960",
    "end": "1894285"
  },
  {
    "text": "by and large a relatively\nsmall set of operations. Like dot products, and\nvector time scalar.",
    "start": "1894285",
    "end": "1899840"
  },
  {
    "text": "On the other hand, when you\nlook at the SIMD machines, they had a much richer\nset of operations. PROFESSOR: I think with\nscatter-gather and things like",
    "start": "1899840",
    "end": "1909110"
  },
  {
    "text": "conditional execution, I think\nvector machines could be a fairly large --",
    "start": "1909110",
    "end": "1914670"
  },
  {
    "text": "I mean it's painful. AUDIENCE: [INAUDIBLE]",
    "start": "1914670",
    "end": "1921230"
  },
  {
    "text": "PROFESSOR: The SIMD instruction\nis Pentium. I think that is mainly targeting\nsingle processing",
    "start": "1921230",
    "end": "1928410"
  },
  {
    "text": "type stuff. ",
    "start": "1928410",
    "end": "1934050"
  },
  {
    "text": "They don't have real\nscatter-gather. AUDIENCE: And the\nCell processor? PROFESSOR: Cell is distributed\nmemory.",
    "start": "1934050",
    "end": "1940370"
  },
  {
    "text": "AUDIENCE: Yeah, but on one\nthe -- what do they call them, the -- PROFESSOR: I don't think you\ncan scatter-gather either.",
    "start": "1940370",
    "end": "1946140"
  },
  {
    "text": "It's just basically, you have\nto align words in, word out.",
    "start": "1946140",
    "end": "1951260"
  },
  {
    "text": "IBM is always about\ndoing align. So in even AltiVec, you can't\neven do unaligned access.",
    "start": "1951260",
    "end": "1957030"
  },
  {
    "text": "You had to do aligned access. So if there is no run align,\nyou had to pay a big penalty in there.",
    "start": "1957030",
    "end": "1963700"
  },
  {
    "text": "So if you look at how\nthis happens. So you have this entire\npipeline thing.",
    "start": "1963700",
    "end": "1969320"
  },
  {
    "text": "When things get started the\nfirst value is at this point done in one clock cycle. The next value is halfway\nthrough that.",
    "start": "1969320",
    "end": "1976250"
  },
  {
    "text": "Another value is in\nsome part of a -- is also pipelined, the\nalias pipeline. And other values are kind of\nfeeding nicely into that.",
    "start": "1976250",
    "end": "1983840"
  },
  {
    "text": "So if you have one -- this\nis called one lane. You can have multiple lanes,\nand then what you can do is",
    "start": "1983840",
    "end": "1990519"
  },
  {
    "text": "each cycle you get 40\n[UNINTELLIGIBLE] And the next ones are in\nthe middle of that, next ones are in middle.",
    "start": "1990520",
    "end": "1996020"
  },
  {
    "text": "So what you have is a very\npipelined machine, so you can kind of pipeline things\nin there.",
    "start": "1996020",
    "end": "2001290"
  },
  {
    "text": "So you can have either one\nlane, or multiple lanes pipeline coming out. So if you look at the\narchitecture, what you had is",
    "start": "2001290",
    "end": "2007720"
  },
  {
    "start": "2007000",
    "end": "2007000"
  },
  {
    "text": "you have some kind of vector\nregisters feeding into these kind of functional units. So at a given time, in this one\nyou might be able to get",
    "start": "2007720",
    "end": "2014909"
  },
  {
    "text": "eight results out, because\neverything gets pipelined. But the same thing is\nhappening in there.",
    "start": "2014910",
    "end": "2022330"
  },
  {
    "text": "Clear how vector\nmachines work? So it's not really parallelism,\nit's basically -- especially if you are one --\nit's a superpipelined thing.",
    "start": "2022330",
    "end": "2030780"
  },
  {
    "text": "But given one instruction, it\nwill crank out many, many, many things for that\ninstruction.",
    "start": "2030780",
    "end": "2037960"
  },
  {
    "text": "And doing parallelism is easy in\nhere too, because it's the same thing happening to very\nregular data sets. So there's no notion of\nasynchronizations and all",
    "start": "2037960",
    "end": "2045230"
  },
  {
    "text": "these weird things. It's just a very\nsimple pattern. So the next thing is the shared\nsequencer processor.",
    "start": "2045230",
    "end": "2053030"
  },
  {
    "start": "2048000",
    "end": "2048000"
  },
  {
    "text": "So here it's similar to the\nvector machines because each cycle you issue a single\ninstruction.",
    "start": "2053030",
    "end": "2060840"
  },
  {
    "text": "But the instruction is\na wide instruction. It had multiple operations in\nthese same instructions.",
    "start": "2060840",
    "end": "2068409"
  },
  {
    "text": "So what it says is -- \"I have multiple execution\nunits, I have memory in a separate unit, and each\ninstruction I will tell each",
    "start": "2068410",
    "end": "2075280"
  },
  {
    "text": "unit what to do.\" And so\nsomething you might have -- two integer units, two\nmemory/load store units, two",
    "start": "2075280",
    "end": "2083450"
  },
  {
    "text": "floating-point units. Each cycle you tell each\nof them what to do. So you just kind of keep issuing\nan instruction that",
    "start": "2083450",
    "end": "2089210"
  },
  {
    "text": "affects many of them. So sometimes what happens is if\nthis has latency of four,",
    "start": "2089210",
    "end": "2094429"
  },
  {
    "text": "you might have to wait till this\nis done to do the next instruction. So if one guy takes long,\neverybody has to kind",
    "start": "2094430",
    "end": "2099560"
  },
  {
    "text": "of wait till that. So it's very synchronous\ngoing. So things like synchronization\nstuff were not an issue in here.",
    "start": "2099560",
    "end": "2105401"
  },
  {
    "text": " So if you look at a pipeline,\nthis is what happens.",
    "start": "2105401",
    "end": "2112430"
  },
  {
    "text": "So you have this instruction. It's an instruction, but\nyou are fetching a wide instruction. You are not researching\na simple instruction.",
    "start": "2112430",
    "end": "2118430"
  },
  {
    "text": "You decode the entire thing,\nbut you can decode it separately. And then you go execute on\neach execution unit.",
    "start": "2118430",
    "end": "2123984"
  },
  {
    "text": " One interesting problem\nhere was this was not really scalable.",
    "start": "2123984",
    "end": "2131410"
  },
  {
    "text": "What happened here is each\nfunctional unit, if you had",
    "start": "2131410",
    "end": "2136530"
  },
  {
    "text": "one single register file, has\nto access the register file. So each function would say --\n\"I am using register R1,\" \"I",
    "start": "2136530",
    "end": "2142670"
  },
  {
    "text": "am using R3,\" \"I am using R5.\"\nSo what has to happen is the register file has to have --",
    "start": "2142670",
    "end": "2148990"
  },
  {
    "text": "basically, if you have eight\nfunctional units, 16 outports and 8 inports coming in.",
    "start": "2148990",
    "end": "2155190"
  },
  {
    "text": "And then of course, when you\nbuild a register file it has a scale, so it had huge\nscalability issues.",
    "start": "2155190",
    "end": "2161880"
  },
  {
    "text": "So it's a quadratically scalable\nregister function. Question? AUDIENCE: The sequencer\n[INAUDIBLE PHRASE]",
    "start": "2161880",
    "end": "2167540"
  },
  {
    "text": " PROFESSOR: Yeah. ",
    "start": "2167540",
    "end": "2173270"
  },
  {
    "text": "It's basically you had to wait\ntill everybody's done, there's nothing going out\nof any order. And memory also.",
    "start": "2173270",
    "end": "2179150"
  },
  {
    "text": "Since everybody's going to\nmemory, this is not scalable. So people try to build -- you\ncan do four, eight wide, but",
    "start": "2179150",
    "end": "2186880"
  },
  {
    "text": "beyond that this register and\nmemory interconnect became a big mess to build.",
    "start": "2186880",
    "end": "2192770"
  },
  {
    "text": "And so one kind of modification\nthing people did was called Clustered VLIW.",
    "start": "2192770",
    "end": "2199690"
  },
  {
    "start": "2196000",
    "end": "2196000"
  },
  {
    "text": "So what happens is you have a\nvery wide instruction in here. It goes to not one cluster,\nbut different clusters.",
    "start": "2199690",
    "end": "2206730"
  },
  {
    "text": "Each cluster has its own\nregister file, its own kind of memory interconnect\ngoing on there.",
    "start": "2206730",
    "end": "2212160"
  },
  {
    "text": "And what that means is if you\nwant to do intercluster communication, you have to\ngo to a very special",
    "start": "2212160",
    "end": "2218000"
  },
  {
    "text": "communication network. So you don't have this bandwidth\nexpansion register. So you only have, we'll say two\nexecution units, so you",
    "start": "2218000",
    "end": "2226180"
  },
  {
    "text": "only have to have four\nout and one in to the register filing cycle.",
    "start": "2226180",
    "end": "2231900"
  },
  {
    "text": "And then if you want other\ncommunication, you have a much lower bandwidth interconnect\nthat you'll have",
    "start": "2231900",
    "end": "2237600"
  },
  {
    "text": "to go through that. So what this does is you kind\nof expose more complexity to",
    "start": "2237600",
    "end": "2243069"
  },
  {
    "text": "the compiler and software, and\nthe rationale here is most",
    "start": "2243070",
    "end": "2248110"
  },
  {
    "text": "programs have locality. It's like everybody always wants\nto to communicate with",
    "start": "2248110",
    "end": "2253210"
  },
  {
    "text": "everybody else, so there are\nsome locality in here. So you can basically cluster\nthings that are local together",
    "start": "2253210",
    "end": "2258609"
  },
  {
    "text": "and put it in here, and then\nwhen other things have to be communicated you can use this\ncommunication and go about",
    "start": "2258610",
    "end": "2263880"
  },
  {
    "text": "doing that. So this is kind of the state of\nthe art in this technology. And something like --",
    "start": "2263880",
    "end": "2269510"
  },
  {
    "text": "what I didn't put -- Itanium kind of fits in here. Itanium processor.",
    "start": "2269510",
    "end": "2275830"
  },
  {
    "text": "So then we go to\nshared network. There has been a lot\nof work in here.",
    "start": "2275830",
    "end": "2281570"
  },
  {
    "text": "People have been building\nmultiprocessors for a long time, because it's a very\neasy thing to build.",
    "start": "2281570",
    "end": "2287000"
  },
  {
    "text": "So what you do is -- if you look at it, you have a\nprocessor unit that connects",
    "start": "2287000",
    "end": "2293490"
  },
  {
    "text": "its own memory. And it's like a multiple\n[UNINTELLIGIBLE] Then it has a very tightly\nconnected network interface",
    "start": "2293490",
    "end": "2299840"
  },
  {
    "text": "that goes to interconnect\nnetwork. So we can even think about a\nworkstation farm as this type",
    "start": "2299840",
    "end": "2306170"
  },
  {
    "text": "of a machine. But of course, the network is a\npretty slow one that requres",
    "start": "2306170",
    "end": "2313200"
  },
  {
    "text": "an ethernet connector. But people build things\nthat have much faster networks in there.",
    "start": "2313200",
    "end": "2319059"
  },
  {
    "text": "This was designed in a way you\ncan build hundreds and thousands of these things -- nodes in here.",
    "start": "2319060",
    "end": "2324610"
  },
  {
    "text": "So today if you look at the\ntop 500 supercomputers, a bunch of them fits into this\ncategory because it's very",
    "start": "2324610",
    "end": "2331530"
  },
  {
    "text": "easy to scale and build\nvery large. AUDIENCE: Are you doing\nSMPs in this list,",
    "start": "2331530",
    "end": "2336647"
  },
  {
    "text": "or some other place? PROFESSOR: SMP is mostly shared memory, so shared network.",
    "start": "2336647",
    "end": "2341750"
  },
  {
    "text": "I'll do shared memory next.  But there are problems\nwith it.",
    "start": "2341750",
    "end": "2349180"
  },
  {
    "text": "All the data layout has to be\nhandled by software, or by the programmer basically.",
    "start": "2349180",
    "end": "2355670"
  },
  {
    "text": "If you want something outside\nyour memory, you had to do very explicit communication. Not only you, the other guy who\nhas the data actually has",
    "start": "2355670",
    "end": "2361470"
  },
  {
    "text": "to cooperate to send\nit to you. And he needs to know that\nnow you have the data. All of that management\nis your problem.",
    "start": "2361470",
    "end": "2369480"
  },
  {
    "text": "And that makes programming\nthese kind of things very difficult, which you'll probably\nfigure out by the",
    "start": "2369480",
    "end": "2376040"
  },
  {
    "text": "time you're done with Cell. So Cell has a lot of\nthese issues, too.",
    "start": "2376040",
    "end": "2381930"
  },
  {
    "text": "The problem here is not dealing\nwith most of the data, but the kind of corner\ncases that you don't",
    "start": "2381930",
    "end": "2388200"
  },
  {
    "text": "know about that much. There's no nice safe way, of\nsaying -- \"I don't know where, who's going to access it. I'll let the hardware take\ncare of it.\" There's no",
    "start": "2388200",
    "end": "2394430"
  },
  {
    "text": "hardware, you have to\ntake of it yourself. And also message passing has\na very high overhead.",
    "start": "2394430",
    "end": "2402059"
  },
  {
    "start": "2402000",
    "end": "2402000"
  },
  {
    "text": "Most of the time in order to do\nmessage, you have to invoke some kind of a kernel thing. You have to actually do a kernel\nswitch that will call",
    "start": "2402060",
    "end": "2408240"
  },
  {
    "text": "the network -- it's operaing system involves a\nprocess, basically, to get a message in there.",
    "start": "2408240",
    "end": "2413850"
  },
  {
    "text": "And also when you get a message\nout you have to do some kind of interrupt or\npolling, and that's a bunch of",
    "start": "2413850",
    "end": "2421110"
  },
  {
    "text": "copies out of kernel. And this became a pretty\nexpensive proposition. So you can't send messages the\nsize of one [UNINTELLIGIBLE]",
    "start": "2421110",
    "end": "2427800"
  },
  {
    "text": "so you had to accumulate a huge\namount of things to send out to amortize the cost\nof doing that. ",
    "start": "2427800",
    "end": "2437430"
  },
  {
    "text": "Sending can be somewhat\ncheap, but receiving is a lot more expensive. Because receiving you\nhave to multiplex.",
    "start": "2437430",
    "end": "2442690"
  },
  {
    "text": "You have no idea who\nit's coming to. So you have to receive, you\nhave to figure out who is supposed to get it. Especially if you are running\nmultiple applications, it",
    "start": "2442690",
    "end": "2449454"
  },
  {
    "text": "might be for someone's\napplication. You had to contact\n[UNINTELLIGIBLE] So it's a big mess. ",
    "start": "2449455",
    "end": "2455640"
  },
  {
    "text": "That is where people went to\nshared memory processors, because it became easier\nmessage method to use.",
    "start": "2455640",
    "end": "2462040"
  },
  {
    "text": "So that is basically the SMPs\nAlan was talking about. ",
    "start": "2462040",
    "end": "2469350"
  },
  {
    "text": "The nice thing is it will work\nwith any data placement. It might work very slowly, but\nat least it will work.",
    "start": "2469350",
    "end": "2475390"
  },
  {
    "text": "So it makes it very easy to take\nyour existing application and first getting it working,\nbecause it's",
    "start": "2475390",
    "end": "2481200"
  },
  {
    "text": "just working there. You can choose to optimize\nonly critical sections. You can say -- \"OK,\nthis section I",
    "start": "2481200",
    "end": "2487210"
  },
  {
    "text": "know it's very important. I will do the right thing,\nI will place it properly everything.\" And the rest of it\nI can just leave alone, and",
    "start": "2487210",
    "end": "2493319"
  },
  {
    "text": "it will go and get the\ndata and do it right. You can run sequentially, of\ncourse, but at least the memory part I don't have\nto deal with it.",
    "start": "2493320",
    "end": "2499390"
  },
  {
    "text": "If some other memory just once\nin a while accesses that data that you have actually\nparallelized, it",
    "start": "2499390",
    "end": "2504940"
  },
  {
    "text": "will actually work. So you only have to worry about\nthe [UNINTELLIGIBLE] that you are parallelizing. ",
    "start": "2504940",
    "end": "2511130"
  },
  {
    "text": "And you can communicate using\nload store instructions. You don't have to get always\nin order to do that.",
    "start": "2511130",
    "end": "2516710"
  },
  {
    "text": "And it's a lot lower overhead. So 5 to 10 cycles, instead of\nhundreds to thousands cycles",
    "start": "2516710",
    "end": "2522000"
  },
  {
    "text": "to do that. And most of these messages\nactually stoplight some instructions to do this\ncommunication very fast.",
    "start": "2522000",
    "end": "2528230"
  },
  {
    "text": "There's a thing called fetch&op,\nand a thing called load linked/store conditional\noperations. There are these very special\noperations where if you are",
    "start": "2528230",
    "end": "2536125"
  },
  {
    "text": "waiting for somebody else, you\ncan do it very fast. So if two people are communicating.",
    "start": "2536125",
    "end": "2541430"
  },
  {
    "text": "So people came up with these\nvery fast operations that are low cost, as a last -- if the data's available it\nwill happen very fast.",
    "start": "2541430",
    "end": "2548230"
  },
  {
    "text": "Synchronization.  And when you are starting to\nbuild a large system, you can",
    "start": "2548230",
    "end": "2554820"
  },
  {
    "text": "actually give a logically shared\nview of memory, but the underlying hardware can be\nstill distributed memory.",
    "start": "2554820",
    "end": "2561120"
  },
  {
    "text": "So there's a thing called -- I will get into when you\ndo synchronization -- directory-based cache\ncoherence.",
    "start": "2561120",
    "end": "2566290"
  },
  {
    "text": "So you give a nice, simple\nview of memory. But of course memory is\nreally disbributed. So that kind of gives the\nbest of both worlds.",
    "start": "2566290",
    "end": "2572790"
  },
  {
    "text": "So you can keep scaling and\nbuild large machines, but the view is a very simple\nview of machines.",
    "start": "2572790",
    "end": "2579450"
  },
  {
    "text": "So there are two categories\nin here. One is non-cache coherent, and\nthen hardware cache coherence. So non-cache coherence kind of\ngives a view of memory as a",
    "start": "2579450",
    "end": "2588450"
  },
  {
    "text": "single address space. But you had to deal with that if\nyou write something to get there early to me, you had\nto explicitly say --",
    "start": "2588450",
    "end": "2594510"
  },
  {
    "text": "\"Now send it to that person.\"\nBut we're still in a single address space. It doesn't give the\nfull benefits of a",
    "start": "2594510",
    "end": "2601789"
  },
  {
    "text": "shared memory machine. It's kind of inbetween\ndistributed memory. In distributed memory basically\neverybody's in a different address space,\nso you had to map",
    "start": "2601790",
    "end": "2607830"
  },
  {
    "text": "by sending a message. Here, you just say I have\nto flush and send it to the other guy. ",
    "start": "2607830",
    "end": "2616360"
  },
  {
    "start": "2615000",
    "end": "2615000"
  },
  {
    "text": "Some of the early machines, as\nwell as some big machines, were no hardware cache\ncoherence.",
    "start": "2616360",
    "end": "2622070"
  },
  {
    "text": "Things like supercomputers were\nbuilt in this way because it's very easy to build. And the nice thing here is if\nyou know your applications",
    "start": "2622070",
    "end": "2629900"
  },
  {
    "text": "well, if you are running good\nparallel large applications, and you are actually knowing\nwhat the communication",
    "start": "2629900",
    "end": "2635980"
  },
  {
    "text": "patterns are -- you can\nactually do it. And you don't have to pay the\nhardware overhead to have this nice hardware support\nin there.",
    "start": "2635980",
    "end": "2642470"
  },
  {
    "text": "However, a lot of small scale\nmachines -- for example, most people's workstations are\nstuffy, it's probably now two",
    "start": "2642470",
    "end": "2652359"
  },
  {
    "text": "Pentium Quad machines -- actually add memory. Because if you are trying to\ndo the starting things it's",
    "start": "2652360",
    "end": "2660430"
  },
  {
    "text": "much easier to do\nshared memory. And also it's easier to bulid\nsmall shared memory machines. And people talk about using a\nbus-based machine, and also",
    "start": "2660430",
    "end": "2672480"
  },
  {
    "text": "using a large scale directory-based machine in here. ",
    "start": "2672480",
    "end": "2678170"
  },
  {
    "text": "So for bus-based machines, how\ndo you do shared memory? So there's a protocol, what we\ncall a snoopy cache protocol.",
    "start": "2678170",
    "end": "2686880"
  },
  {
    "text": "What that means is, every time\nyou modify your location somewhere -- so of course you\nhave that in your cache --",
    "start": "2686880",
    "end": "2694120"
  },
  {
    "text": "you tell everybody in the world\nwho's using a busing, \"I modified that.\" And then if\nsomebody else also has that",
    "start": "2694120",
    "end": "2703460"
  },
  {
    "text": "memory location. That person says, \"Oops, he\nmodified it.\" Either he invalidates it or gets\nthe modified copy.",
    "start": "2703460",
    "end": "2709160"
  },
  {
    "text": "If you are using something new,\nyou have to go and snoop. And you can ask everybody and\nsay -- \"Wait a minute, does",
    "start": "2709160",
    "end": "2715040"
  },
  {
    "text": "anybody have a copy of this?\"\nAnd some more complicated protocols have saying -- \"I\ndon't have any, I have a copy",
    "start": "2715040",
    "end": "2722680"
  },
  {
    "text": "but it's only read-only. So I'm just reading it, I'm\nnot modifying it.\" Then multiple people can have the\nsame copy, because everybody's",
    "start": "2722680",
    "end": "2728940"
  },
  {
    "text": "reading and it's OK. And then there's the next thing\n-- \"OK, I am actually trying to modify this thing.\"\nAnd then only I can have the copy.",
    "start": "2728940",
    "end": "2735080"
  },
  {
    "text": "So some data you can give to\nmultiple people as a read copy, and then when you are\ntrying to write everybody gets",
    "start": "2735080",
    "end": "2740380"
  },
  {
    "text": "disinvited, only the person\nwho has write has access to it. And there are a lot of\ncomplicated protocols how if you write it, and then somebody\nelse wants to write",
    "start": "2740380",
    "end": "2746869"
  },
  {
    "text": "it, how do you get\nto that person? And of course you have to keep\nit consistent with memory. So there is a lot of work in\nhow to get these things all",
    "start": "2746870",
    "end": "2753420"
  },
  {
    "text": "working, but that's the\nkind of basic idea. ",
    "start": "2753420",
    "end": "2759300"
  },
  {
    "text": "So directory-based machines\nare very different. In directory-based machines\nmainly there's a",
    "start": "2759300",
    "end": "2765060"
  },
  {
    "text": "notion of a home node. So everybody has local space in\nmemory, you keep some part",
    "start": "2765060",
    "end": "2770540"
  },
  {
    "text": "of your memory. And of course you have\na cache also. So you have a notion that this\nmemory belongs to you.",
    "start": "2770540",
    "end": "2776130"
  },
  {
    "text": "And every time I want to do\nsomething with that memory I had to ask you. I had to get your permission. \"I want that memory, can\nyou give it to me?\"",
    "start": "2776130",
    "end": "2782559"
  },
  {
    "text": "And so there are two things. That person has a directory\n[UNINTELLIGIBLE] say -- \"OK, this memory is in me.",
    "start": "2782560",
    "end": "2788150"
  },
  {
    "text": "I am the one who right now owns\nit, and I have the copy.\" Or it will say -- \"You want to copy that memory\nto this other guy to write,",
    "start": "2788150",
    "end": "2796119"
  },
  {
    "text": "and here is that person's\naddress or that machine's name.\" Or if multiple people\nhave taken this copy and are",
    "start": "2796120",
    "end": "2801650"
  },
  {
    "text": "reading it. So when somebody asks\nme for a copy -- assume you ask to\nread this copy.",
    "start": "2801650",
    "end": "2809220"
  },
  {
    "text": "And if I have given it to nobody\nto read, or if I have given it to other people\nto read, so I say --",
    "start": "2809220",
    "end": "2814410"
  },
  {
    "text": "\"OK, here's a copy. Go read.\" And I add that person\nis reading that, and I keep that in my directory.",
    "start": "2814410",
    "end": "2820190"
  },
  {
    "text": "Or if somebody's writing that. I say sure, \"I can't give it\nto read because somebody's writing that.\" So I\ncan do two things.",
    "start": "2820190",
    "end": "2825750"
  },
  {
    "text": "I can tell that person,\nsaying -- \"You have to get it from the\nperson who's writing.",
    "start": "2825750",
    "end": "2831350"
  },
  {
    "text": "So go directly get\nit from there. And I will mark that now you own\nit as a read value.\" Or, I can tell the person\nwho's writing --",
    "start": "2831350",
    "end": "2837630"
  },
  {
    "text": "\"Look, you have to give up\nyour write privilege. If you have modified it, give\nme the data back.\" And that person goes back to\nthe read or no",
    "start": "2837630",
    "end": "2843950"
  },
  {
    "text": "privileges with that data. When I get that data, I'll\nsend it back to this person and say -- \"Here, you can read.\" And the\nsame thing if you ask for",
    "start": "2843950",
    "end": "2849600"
  },
  {
    "text": "write permission. If anybody has [UNINTELLIGIBLE] I have to tell everybody -- \"Now you can't read\nit anymore.",
    "start": "2849600",
    "end": "2855250"
  },
  {
    "text": "Go invalidate, because\nsomebody's about to write.\" Get the invalidate request\ncoming back, and then when you've done that I say, \"OK,\nyou can write that.\" So",
    "start": "2855250",
    "end": "2862250"
  },
  {
    "text": "everybody keeps part of\nthe memory, and then all of that in there. So because of that you can\nreally scale this thing.",
    "start": "2862250",
    "end": "2868762"
  },
  {
    "text": " So if you look at a\nbus-based machine.",
    "start": "2868762",
    "end": "2874700"
  },
  {
    "text": "This is the kind of\nway it looks like. You have a cache in here,\nmicroprocessor, central memory, and you have\na bus in here.",
    "start": "2874700",
    "end": "2881119"
  },
  {
    "text": "And a lot of small machines,\nincluding most people's desktops, basically fit\nin this category.",
    "start": "2881120",
    "end": "2886770"
  },
  {
    "text": "And you have a snoopy\nbus in here. So a little bit of\na bigger machine, something like a Sun Starfire.",
    "start": "2886770",
    "end": "2892730"
  },
  {
    "text": "Basically it had four processors\nin the board, four caches, and had an interconnect\nthat actually has",
    "start": "2892730",
    "end": "2900250"
  },
  {
    "text": "multiple buses going. So it can actually get a little\nbit of scalability, because here's the bottleneck. The bus becomes the\nbottleneck.",
    "start": "2900250",
    "end": "2905780"
  },
  {
    "text": "Everybody has to go\nthrough the bus. And so you actually get\nmultiple buses to get bottleneck, and it actually had\nsome distributed memory",
    "start": "2905780",
    "end": "2912810"
  },
  {
    "text": "going through a crossbar here. So this cache coherent\nprotocol has to deal with that.",
    "start": "2912810",
    "end": "2918400"
  },
  {
    "text": "And going to the other extreme, something like SGI Origin. ",
    "start": "2918400",
    "end": "2926930"
  },
  {
    "start": "2919000",
    "end": "2919000"
  },
  {
    "text": "In this machine there are two\nprocessors, and it had actually a little bit of\nprocessors and a lot of memory",
    "start": "2926930",
    "end": "2932089"
  },
  {
    "text": "dealing with the directory. So you keep the data, and you\nactually keep all the directory information\nin there -- in this. And then it goes --",
    "start": "2932090",
    "end": "2938850"
  },
  {
    "text": "then after that it almost uses\na normal message passing type network to communicate\nwith that.",
    "start": "2938850",
    "end": "2945420"
  },
  {
    "text": "And they use the crane to\nconnect networks, so we can have a very large machine\nbuilt out of that. ",
    "start": "2945420",
    "end": "2952720"
  },
  {
    "text": "So now let's switch to\nmulticore processors. ",
    "start": "2952720",
    "end": "2958200"
  },
  {
    "text": "If you look at the way we have\nbeen dealing with VLSI, every generation we are getting more\nand more transistors.",
    "start": "2958200",
    "end": "2964920"
  },
  {
    "text": "So at the beginning when you\nhave enough transistors to deal with, people actually start\ndealing with bit-level parallelism.",
    "start": "2964920",
    "end": "2970960"
  },
  {
    "text": "So you didn't have -- you can\ndo 16-bit, 32-bit machines. You can do wider machines,\nbecause you have enough",
    "start": "2970960",
    "end": "2976990"
  },
  {
    "text": "transistors. Because at the beginning you\nhave like 8-bit processors, 16-bit, 32-bit. And then at some point that I\nhave still more transistors, I",
    "start": "2976990",
    "end": "2983790"
  },
  {
    "text": "start doing instruction-level\nparallelism in a die. So even in a bit-level\nparallelism, in order to get",
    "start": "2983790",
    "end": "2990079"
  },
  {
    "text": "64-bit you had to actually\nhave multiple chips. So in this regime in order to\nget parallelism, you need to",
    "start": "2990080",
    "end": "2997135"
  },
  {
    "text": "have multiple processors -- multiprocessors. So in the good old days you\nactually built a processsor,",
    "start": "2997135",
    "end": "3002860"
  },
  {
    "text": "things like a minicomputer. Basically you had one\nprocessor dealing with a 1-bit slice. So in the 4-bit slice, dealing\nwith that amount, you could",
    "start": "3002860",
    "end": "3010700"
  },
  {
    "text": "fit in a chip. And a multichip made\na single processor. Here a multichip made\na multiprocessor.",
    "start": "3010700",
    "end": "3017870"
  },
  {
    "text": "We are hitting a regime\nwhere a multichip -- what [? it ?] will be\nmultiprocessor -- now fits in one piece of silicon, because\nyou have more transistors.",
    "start": "3017870",
    "end": "3026030"
  },
  {
    "text": "So we are going into a time\nwhere multicore is basically multiple processors\non a die --",
    "start": "3026030",
    "end": "3031630"
  },
  {
    "text": "on a chip. So I showed this slide. We are getting there, and it's\ngetting pretty fast. You had",
    "start": "3031630",
    "end": "3039650"
  },
  {
    "text": "something like this, and\nsuddenly we accelerated. We added more and more\ncores on a die.",
    "start": "3039650",
    "end": "3046530"
  },
  {
    "text": "So I categorized multicores\nalso the way I categorized them previously. There are shared memory\nmulticores.",
    "start": "3046530",
    "end": "3054850"
  },
  {
    "text": "Here are some examples. Then there are shared\nnetwork multicores. Cell processor is one,\nand at MIT we are",
    "start": "3054850",
    "end": "3061930"
  },
  {
    "text": "building also Raw processor. And there is another part, what\nthey call crippled or",
    "start": "3061930",
    "end": "3067700"
  },
  {
    "text": "mini-cores. So the reason in this graph you\ncan have 512, is because",
    "start": "3067700",
    "end": "3075000"
  },
  {
    "text": "it's not Pentium sized things\nsitting in there. You are putting very simple\nsmall cores, and a",
    "start": "3075000",
    "end": "3080940"
  },
  {
    "text": "huge amount of them. So for some class replication,\nthat's also useful. So if you look at shared memory\nmulticores, basically",
    "start": "3080940",
    "end": "3089119"
  },
  {
    "text": "this is an evolution path\nfor current processors. So if you look at it, what they\ndid was they took their",
    "start": "3089120",
    "end": "3095890"
  },
  {
    "text": "years' worth of and billions\nof dollars worth of engineering building a single\nsuperscalar processor.",
    "start": "3095890",
    "end": "3102880"
  },
  {
    "text": "Then they slapped a few of them\non the same die, and said -- \"Hey, we've got a multicore.\"\nAnd of course they",
    "start": "3102880",
    "end": "3108390"
  },
  {
    "text": "were always doing shared memory\nat the network level.",
    "start": "3108390",
    "end": "3114450"
  },
  {
    "text": "They said -- \"OK, I'll put the\nshared memory bus also into the same die, and I got a\nmulticore.\" So this is basically what all these\nthings are all about.",
    "start": "3114450",
    "end": "3120440"
  },
  {
    "text": "So this is kind of gluing these\nthings together, it's a first generation. However, you didn't build a core\ncompletely from scratch.",
    "start": "3120440",
    "end": "3127740"
  },
  {
    "text": "You just kind of integrated what\nwe had in multiple chips into one chip, and basically\ngot that.",
    "start": "3127740",
    "end": "3135880"
  },
  {
    "text": "So to go a little bit beyond,\nI think you can do better. So for example, this\nAMD multicore.",
    "start": "3135880",
    "end": "3144260"
  },
  {
    "text": "Basically you have CPUs in\nthere, actually have a full",
    "start": "3144260",
    "end": "3151240"
  },
  {
    "text": "snoopy controller in there,\nand can have some other interface with that. So you can actually start\nbuilding more and more uni",
    "start": "3151240",
    "end": "3158900"
  },
  {
    "text": "CPU, thinking that you're\nbuilding a multicore. Instead of saying, \"I had this\nthing in my shelf, I'm going to plop it here, and then\nkind of [INAUDIBLE]",
    "start": "3158900",
    "end": "3165480"
  },
  {
    "text": "And you'll see, I\nthink, a lot of interesting things happening. Because now as they're connected\nclosely in the same",
    "start": "3165480",
    "end": "3172310"
  },
  {
    "text": "die, you can do more things than\nwhat you could do in a multiprocessor. So in the last lecture we talked\na little bit about what",
    "start": "3172310",
    "end": "3179300"
  },
  {
    "text": "the future could be in\nthis kind of regime. ",
    "start": "3179300",
    "end": "3190040"
  },
  {
    "text": "Come on.  OK. So one thing we have been doing\nat MIT for -- now this",
    "start": "3190040",
    "end": "3198560"
  },
  {
    "text": "practice is ended, we started\nabout eight years ago -- is to figure out when you have all the\nsilicon, how can you build",
    "start": "3198560",
    "end": "3208050"
  },
  {
    "text": "a multicore if you to\nstart from scratch. So we built this Raw processor\nwhere each --",
    "start": "3208050",
    "end": "3213119"
  },
  {
    "text": "we have 16, these small cores,\nidentical ones in here. And the interesting thing is\nwhat we said was, we have all",
    "start": "3213120",
    "end": "3220260"
  },
  {
    "text": "this bandwidth. It's not just going from pins\nto memory, we have all this bandwidth sitting next\nto each other.",
    "start": "3220260",
    "end": "3225580"
  },
  {
    "text": "So can we really take advantage\nof that to do a lot of communication? And also the other thing is that\nto build something like a",
    "start": "3225580",
    "end": "3232300"
  },
  {
    "text": "bus, you need a lot\nof long wires. And it's really hard to\nbuild long wires. So in Raw processor it's\nsomething like each chip, a",
    "start": "3232300",
    "end": "3240770"
  },
  {
    "start": "3238000",
    "end": "3238000"
  },
  {
    "text": "large amount of part, is into\nthis eight 32-bit buses. So you have a huge amount\nof communication",
    "start": "3240770",
    "end": "3246940"
  },
  {
    "text": "next to each other. And we don't have any kind of\nglobal memory because that requires, right now, either do\na directory, which you didn't",
    "start": "3246940",
    "end": "3252400"
  },
  {
    "text": "want to build, or have a bus,\nwhich will require long wires. So we did in a way that all\nwires -- no wires longer than",
    "start": "3252400",
    "end": "3259570"
  },
  {
    "text": "one of the cores. So we can do short wires, but\nwe came up with a lot of",
    "start": "3259570",
    "end": "3265980"
  },
  {
    "text": "communications for each of\nthese, what we called tile those days, are very\ntightly coupled.",
    "start": "3265980",
    "end": "3272170"
  },
  {
    "text": "So this is kind of a direction\nwhere people perhaps might go, because now we have all this\nbandwidth in here.",
    "start": "3272170",
    "end": "3279580"
  },
  {
    "text": "And how would you take advantage\nof that bandwidth? So this is a different way\nof looking at that. And in some sense the Cell fits\nsomewhere in this regime.",
    "start": "3279580",
    "end": "3287970"
  },
  {
    "text": "Because what Cell did was\ninstead of -- it says, \"I'm not building a bus,\nI am actually building a ring network.",
    "start": "3287970",
    "end": "3293750"
  },
  {
    "text": "I'm keeping distributed memory,\nand provide to Cell a ring.\" I'm not going to go\nthrough Cell, because actually",
    "start": "3293750",
    "end": "3298910"
  },
  {
    "text": "you had a full lecture the day\nbefore yesterday on this. AUDIENCE: Saman, can I\nask you a question?",
    "start": "3298910",
    "end": "3304888"
  },
  {
    "text": "Is there a conclusion that I\nshould be reaching in that I look at the multicores you can\nbuy today are still by and large two and four processors.",
    "start": "3304888",
    "end": "3311085"
  },
  {
    "text": "There are people that\nhave done more. The Verano has 16 and\nthe Dell has 8. And the conclusion that I want\nto reach is that as an",
    "start": "3311085",
    "end": "3319530"
  },
  {
    "text": "engineering tradeoff, if you\nthrow away the shared memory you can add processors. Is that a straightforward\ntradeoff? PROFESSOR: I don't think\nit's a shared memory.",
    "start": "3319530",
    "end": "3326140"
  },
  {
    "text": "You can still have things\nlike directory-based cache coherent things.",
    "start": "3326140",
    "end": "3332200"
  },
  {
    "text": "What's missing right now is what\npeople have done is just basically took parts in their\nshelves, and kind of put it",
    "start": "3332200",
    "end": "3337569"
  },
  {
    "text": "into the chip. If you look at it, if you put\ntwo chips next to each other",
    "start": "3337570",
    "end": "3343830"
  },
  {
    "text": "on a board, there's a certain\namount of communication bandwidth going here. And if you put those things\ninto the same die, there's",
    "start": "3343830",
    "end": "3351640"
  },
  {
    "text": "about five orders of magnitude\npossibility to communicate. We haven't figured out how to\ntake advantage of that.",
    "start": "3351640",
    "end": "3358079"
  },
  {
    "text": "In some sense, we can almost say\nI want to copy the entire cache from this machine to\nanother machine in the cycle.",
    "start": "3358080",
    "end": "3364180"
  },
  {
    "text": "I don't think you even would\nwant to do that, but you can have that level of huge amount\nof communication.",
    "start": "3364180",
    "end": "3369280"
  },
  {
    "text": "We are still kind of doing\nthis evolutionary path in there [UNINTELLIGIBLE] but I\ndon't think we know what cool",
    "start": "3369280",
    "end": "3375600"
  },
  {
    "text": "things we can do with that. There's a lot of opportunity\nin that in some sense. AUDIENCE: [INAUDIBLE]",
    "start": "3375600",
    "end": "3380760"
  },
  {
    "text": "PROFESSOR: Yeah, because the\ninteresting thing is -- the way I would say it is,\nin the good old days",
    "start": "3380760",
    "end": "3386920"
  },
  {
    "text": "parallelization sometimes\nwas a scary prospect. Because the minute you\ndistribute data, if you don't do it right it's a lot slower\nthan sequential execution.",
    "start": "3386920",
    "end": "3395610"
  },
  {
    "text": "Because your access time becomes\nso large, and you're basically dead in water. In this kind of machine\nyou don't have to.",
    "start": "3395610",
    "end": "3402610"
  },
  {
    "text": "There's so much bandwidth\nin here. Latency was still -- latency\nwould be better than going to the outside memory.",
    "start": "3402610",
    "end": "3409799"
  },
  {
    "text": "And we don't know how\nto take advantage of that bandwidth yet. And my feeling is as we go about\ntrying to rebuild from",
    "start": "3409800",
    "end": "3417310"
  },
  {
    "text": "scratch multicore processors,\nwe'll try to figure out",
    "start": "3417310",
    "end": "3422440"
  },
  {
    "text": "different ways. So for example, people are\ncoming up with much more rich",
    "start": "3422440",
    "end": "3430510"
  },
  {
    "text": "semantics for speculation and\nstuff like that, and we can take advantage of that.",
    "start": "3430510",
    "end": "3436580"
  },
  {
    "text": "So I think there's a lot of\ninteresting hardware, microprocessor, and then kind\nof programming research now.",
    "start": "3436580",
    "end": "3444910"
  },
  {
    "text": "Because I don't think anybody\nhad anything in there saying , \"Here's how we would take it\ndown to this bandwidth.\" I",
    "start": "3444910",
    "end": "3450130"
  },
  {
    "text": "think that'll happen. Now the next [? thing ?]\nis these mini-cores.",
    "start": "3450130",
    "end": "3455480"
  },
  {
    "text": "So for example, this PicoChip\nhas array of 322 processing elements. They have 16-bit RISC, so\nit's not even a 32-bit.",
    "start": "3455480",
    "end": "3463010"
  },
  {
    "start": "3458000",
    "end": "3458000"
  },
  {
    "text": "Piddling little things,\n3-way issue in. And they had like\n240 standard --",
    "start": "3463010",
    "end": "3468980"
  },
  {
    "text": "basically, nothing\nmore than just a multiplier, and add in there. 64 memory tiles, full control,\nand 14 some special",
    "start": "3468980",
    "end": "3476880"
  },
  {
    "text": "[UNINTELLIGIBLE] function\naccelerator. So this is kind of what people\ncall heterogeneous systems.",
    "start": "3476880",
    "end": "3483240"
  },
  {
    "text": "Where what this is -- you have\nall these cores, why do you make everything the same? I can make something that's good\ndoing graphics, something",
    "start": "3483240",
    "end": "3489450"
  },
  {
    "text": "that's good doing networking. So I can kind of customize\nin these things. Because what we have in\nexcess is silicon.",
    "start": "3489450",
    "end": "3495350"
  },
  {
    "text": "We don't have power in excess. So in the future you can't\nassume everything is working",
    "start": "3495350",
    "end": "3501250"
  },
  {
    "text": "all the time, because\nthat will still create too much heat. So you kind of say -- the best\nefficiencies, for each type of",
    "start": "3501250",
    "end": "3507710"
  },
  {
    "text": "computation you have some few\nspecial purpose units. So we kind of say if I'm doing\ngraphics, I fit to my graphics",
    "start": "3507710",
    "end": "3514680"
  },
  {
    "text": "optimized code. So I will do that. And the minute I want to do a\nlittle bit of arithmetic I'll switch to that. And sometimes I am doing TCP,\nI'll switch to my TCP offload.",
    "start": "3514680",
    "end": "3523190"
  },
  {
    "text": "Stuff like that. Can you do some kind\nof mixed in there? The problem there is you need to\nunderstand what the mix is.",
    "start": "3523190",
    "end": "3528880"
  },
  {
    "text": "So we need to have a good\nunderstanding of what that mix is. The advantage is it will be a\nlot more memory efficient.",
    "start": "3528880",
    "end": "3534359"
  },
  {
    "text": "So this is kind of going\nin that direction. And so in some sense, if you\nwant to communicate you have",
    "start": "3534360",
    "end": "3540550"
  },
  {
    "text": "these special communication\nelements. You have to go through that. And the processor can do some\nwork, and there are some",
    "start": "3540550",
    "end": "3546540"
  },
  {
    "text": "memory elements. So far and so forth. So that's one push, people are\npushing more for embedded very",
    "start": "3546540",
    "end": "3551950"
  },
  {
    "text": "low power in. AUDIENCE: Is this starting to\nlook more and more like FPGA, which is [UNINTELLIGIBLE] PROFESSOR: Yeah, it's a\nkind of a combination.",
    "start": "3551950",
    "end": "3560660"
  },
  {
    "text": "Because the thing about FPGA is,\nit's just done 1-bit lot. That doesn't make sense\nto do any arithmetic.",
    "start": "3560660",
    "end": "3567950"
  },
  {
    "text": "So this is saying -- \"Ok,\ninstead of 1 bit I am doing 16 bits.\" Because then I can\nvery efficiently build",
    "start": "3567950",
    "end": "3574660"
  },
  {
    "text": "[UNINTELLIGIBLE] Because I don't have to\nbuild [UNINTELLIGIBLE] out of scratch. So I think that an interesting\nconvergence is happening.",
    "start": "3574660",
    "end": "3582140"
  },
  {
    "text": "Because what happened, I think,\nfor a long time was things like architecture and\nprogramming languages, and",
    "start": "3582140",
    "end": "3587859"
  },
  {
    "text": "stuff like that, kind of\ngot stuck in a rut. Because things there are\nso very efficiently and incremental -- it's like doing\nresearch in airplanes.",
    "start": "3587860",
    "end": "3596270"
  },
  {
    "text": "Things are so efficient,\nso complex. Here AeroAstro can't build an\nairplane, because it's a $9",
    "start": "3596270",
    "end": "3605020"
  },
  {
    "text": "billion job to build a good\nairplane in there. And it became like that.",
    "start": "3605020",
    "end": "3611380"
  },
  {
    "text": "Universities could not build\nit because if you want to build a superscalar it's,\nagain, a $9 billion type",
    "start": "3611380",
    "end": "3616610"
  },
  {
    "text": "endeavor to do that -- thousands\nof people, was very, very customized. But now it's kind of hitting\nthe end of the road.",
    "start": "3616610",
    "end": "3622670"
  },
  {
    "text": "Everbody's going back and saying\n-- \"Jeez, what's the new thing?\" And I think there's\na lot of opportunity to kind of figure out is there\nsome radically different thing",
    "start": "3622670",
    "end": "3629270"
  },
  {
    "text": "you can do. So this is what I have\nfor my first lecture. Some conclusions basically.",
    "start": "3629270",
    "end": "3635130"
  },
  {
    "text": "I think for a lot of people who\nare programmers, there was a time that you never cared\nabout what's under the hood.",
    "start": "3635130",
    "end": "3642210"
  },
  {
    "text": "You knew it was going to\ngo fast, and in the air it will go faster. I think that's kind of\ncoming to an end.",
    "start": "3642210",
    "end": "3647420"
  },
  {
    "text": "And there's a lot of\nvariations/choices in hardware, and I think software\npeople should understand and know what they can\nchoose in here.",
    "start": "3647420",
    "end": "3654970"
  },
  {
    "text": "And many have performance\nimplications. And if you know these things you\nwill be able to get high",
    "start": "3654970",
    "end": "3661710"
  },
  {
    "text": "performance of software\nbuilt easy. You can't do high performance\nsoftware without knowing what it's running on.",
    "start": "3661710",
    "end": "3667190"
  },
  {
    "text": "However, there's a\nnote of caution. If you become too much attached\nto your hardware, we",
    "start": "3667190",
    "end": "3673550"
  },
  {
    "text": "go back to the old days of\nassembly language programming. So you say -- \"I got every\nperformance out of a -- now",
    "start": "3673550",
    "end": "3679910"
  },
  {
    "text": "the Cell says you have seven\nSPEs.\" So in two years, they come with 16 SPEs.",
    "start": "3679910",
    "end": "3685290"
  },
  {
    "text": "And what's going to happen? Your thing is still working on\nseven SPEs very well, but it might not work on 16 SPEs,\neven with that.",
    "start": "3685290",
    "end": "3691020"
  },
  {
    "text": "But of course, you really\ncustomize for Cell too. And I guarantee it will not\nrun good with the Intel --",
    "start": "3691020",
    "end": "3696780"
  },
  {
    "text": "probably Quad, Xeon processor\n-- because it will be doing something very different. And so there's this tension\nthat's coming back again.",
    "start": "3696780",
    "end": "3704950"
  },
  {
    "text": "How to do something that is\ngeneral, portable, malleable, and at the same time get good\nperformance with hardware",
    "start": "3704950",
    "end": "3712255"
  },
  {
    "text": "being exposed. I don't think there's\nan answer for that. And in this class we are going\nto go to one extreme. We are going to go low level\nand really understand the",
    "start": "3712255",
    "end": "3718710"
  },
  {
    "text": "hardware, and take advantage\nof that. But at some point we have to\nprobably come out of that and",
    "start": "3718710",
    "end": "3724340"
  },
  {
    "text": "figure out how to be,\nagain, high level. And I think that these\nare open questions. AUDIENCE: Do you have any\nthoughts, and this may be",
    "start": "3724340",
    "end": "3730964"
  },
  {
    "text": "unanswerable, but how could\nCell really [INAUDIBLE]. And not Cell only, but some of\nthese other ones that are out",
    "start": "3730965",
    "end": "3738970"
  },
  {
    "text": "there today, given how hard\nthey are to program. PROFESSOR: So I have\nthis talk that I'm",
    "start": "3738970",
    "end": "3745200"
  },
  {
    "text": "giving at all the places. I said the third software\ncrisis is due to multicore menace.",
    "start": "3745200",
    "end": "3750340"
  },
  {
    "text": "I termed it a menace, because it\nwill create this thing that people will have to change.",
    "start": "3750340",
    "end": "3756000"
  },
  {
    "text": "Something has to change,\nsomething has to give. I don't know who's\ngoing to give. Either people will say -- \"This\nis too complicated, I am",
    "start": "3756000",
    "end": "3762560"
  },
  {
    "text": "happy with the current\nperformance. I will live for the next 20\nyears at today's level of performance.\" I doubt\nthat will happen.",
    "start": "3762560",
    "end": "3771070"
  },
  {
    "text": "The other end is saying --\n\"Jeez, you know I am going to learn parallel programming, and\nI will deal with locks and",
    "start": "3771070",
    "end": "3776410"
  },
  {
    "text": "semaphores, and all\nthose things. And I am going to jump in\nthere.\" That's not going to happen either. So there has to be something\nin the middle.",
    "start": "3776410",
    "end": "3782790"
  },
  {
    "text": "And the neat thing is,\nI don't think anybody knows what it is. Being in industry, it makes them\nterrified, because they",
    "start": "3782790",
    "end": "3792119"
  },
  {
    "text": "have no idea what's happening. But in a university,\nit's a fun time. [LAUGHTER]",
    "start": "3792120",
    "end": "3797220"
  },
  {
    "text": "AUDIENCE: Good question. PROFESSOR: OK. So we'll take about a five\nminutes break, and switch gears into concurrent\nprogramming.",
    "start": "3797220",
    "end": "3804490"
  }
]