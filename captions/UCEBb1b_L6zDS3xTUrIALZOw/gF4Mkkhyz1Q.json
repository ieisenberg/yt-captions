[
  {
    "start": "0",
    "end": "437000"
  },
  {
    "text": " ANNOUNCER: The following content\nis provided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6860"
  },
  {
    "text": "continue to offer high-quality\neducational resources for free. To make a donation, or to\nview additional materials",
    "start": "6860",
    "end": "13490"
  },
  {
    "text": "from hundreds of\nMIT courses, visit MITOpenCourseWare\nat ocw.mit.edu.",
    "start": "13490",
    "end": "18830"
  },
  {
    "text": " TADGE DRYJA: So today\nI'm going to talk about",
    "start": "18830",
    "end": "24550"
  },
  {
    "text": "MAST, taproot, and graftroot. And these are pretty cool\nnew ideas in Bitcoin.",
    "start": "24550",
    "end": "31390"
  },
  {
    "text": "They're not really\nproduction ready. They're still sort\nof ideas, but it's",
    "start": "31390",
    "end": "38800"
  },
  {
    "text": "kind of neat to look at the\nfuture directions of how people are thinking about\nimproving these protocols.",
    "start": "38800",
    "end": "45970"
  },
  {
    "text": "So we're going to talk\nabout new types of scripts-- MAST, taproot, and graftroot--",
    "start": "45970",
    "end": "51730"
  },
  {
    "text": "and all those sort\nof interactions between these three things. I will define these, of course.",
    "start": "51730",
    "end": "58420"
  },
  {
    "text": "So so far we've\ntalked about scripts. And you've got up codes. You've got a stack.",
    "start": "58420",
    "end": "64330"
  },
  {
    "text": "I think with the homework\npeople sort of got the idea, OK, I can do OP_RETURN. I can do OP_CHECKSIG, and the\nbasic idea of how it works.",
    "start": "64330",
    "end": "74740"
  },
  {
    "text": "So right now in Bitcoin, it's\nmostly pay to pubkey hash. So most of the scripts\nthat you'll see-- mostly,",
    "start": "74740",
    "end": "81070"
  },
  {
    "text": "output scripts in an\noutput look like this. OP_DUP, OP_HASH160, thumb\npubkey hash OP_EQUALVERIFY,",
    "start": "81070",
    "end": "88790"
  },
  {
    "text": "OP_CHECKSIG. And then when you want\nto execute the script, you put a pubkey and a\nsignature as your input.",
    "start": "88790",
    "end": "97990"
  },
  {
    "text": "It duplicates the pubkey, hashes\nit, pushes this hash onto it,",
    "start": "97990",
    "end": "104320"
  },
  {
    "text": "checks that those\ntwo things are equal. And this also removes\nthose two things, leaving only the signature,\nand then checks the signature.",
    "start": "104320",
    "end": "111740"
  },
  {
    "text": "So if they're not\nequal-- if you try to sign with a different\npubkey than the one that is committed to in this pubkey\nhash, it'll fail at this point.",
    "start": "111740",
    "end": "119680"
  },
  {
    "text": "And if you put the right\npubkey but the wrong signature, it'll fail at this point.",
    "start": "119680",
    "end": "125200"
  },
  {
    "text": "Well, it'll the CHECKSIG will\nfail, put a 0 on the stack. And then the stack will have\na 0 on it, and that'll fail.",
    "start": "125200",
    "end": "131860"
  },
  {
    "text": "Verify means, immediately fail,\nif these things are not equal. And then in segwit,\nthey templated it.",
    "start": "131860",
    "end": "139430"
  },
  {
    "text": "So really, this entire script\nbecame OP_0, pubkey hash, which is confusing.",
    "start": "139430",
    "end": "145159"
  },
  {
    "text": "If you don't know\nwhat that means-- wait, OP_0 means just\nput a 0 on the stack,",
    "start": "145160",
    "end": "151010"
  },
  {
    "text": "and then put a pubkey\nhash on the stack, and anyone can spend this. But the idea in segwit\nis, yes, software",
    "start": "151010",
    "end": "157550"
  },
  {
    "text": "that is not aware of segwit\nwill see this as spendable by anyone without a signature.",
    "start": "157550",
    "end": "162830"
  },
  {
    "text": "Software that is aware of segwit\nknows that these two things are the same. So essentially, if you see\nthis, turn it into this.",
    "start": "162830",
    "end": "171379"
  },
  {
    "text": "Take the pubkey hash and\nfill in these OP codes. And that's actually\nwhat the code does,",
    "start": "171380",
    "end": "177080"
  },
  {
    "text": "for the script interpreter. It will say, oh, it\nmatches this template. It's OP_0 and a\n20-byte piece of data.",
    "start": "177080",
    "end": "183860"
  },
  {
    "text": "Turn it into this,\nand then execute it. So in this way, segwit\nsaves three bytes.",
    "start": "183860",
    "end": "189140"
  },
  {
    "text": "Because now you have one byte\nthere instead of 1, 2, 3, 4. You lose a couple more\nbytes elsewhere in segwit,",
    "start": "189140",
    "end": "196152"
  },
  {
    "text": "so it actually tends to\nlose a couple of bytes. But whatever. So this works.",
    "start": "196152",
    "end": "201630"
  },
  {
    "text": "This makes sense. Any questions about\npay to pubkey hash? It works OK?",
    "start": "201630",
    "end": "207480"
  },
  {
    "text": "And there's also\npay to script hash. This is the other thing you'll\nsee quite a bit of in Bitcoin",
    "start": "207480",
    "end": "213030"
  },
  {
    "text": "today. I don't know what\nthe ratios are. 80% pay to pubkey hash,\n20% pay to script hash--",
    "start": "213030",
    "end": "220170"
  },
  {
    "text": "something like that. So a minority, but significant.",
    "start": "220170",
    "end": "225510"
  },
  {
    "text": "And for pay to script\nhash, it looks like this-- also sort of template-y, right?",
    "start": "225510",
    "end": "232000"
  },
  {
    "text": "OP_HASH160, a script\nhash, OP_EQUAL. That's it. This also seems like,\nwait, all I have to do",
    "start": "232000",
    "end": "239970"
  },
  {
    "text": "is provide a pre-image\nof this, and then I'll be able to spend the coins.",
    "start": "239970",
    "end": "245070"
  },
  {
    "text": "But the script\ninterpreter knows-- no, actually what this means-- if you see this template,\nif you see this format--",
    "start": "245070",
    "end": "252210"
  },
  {
    "text": "verify that this\nis equal, and then execute whatever the\npre-image was, as a script.",
    "start": "252210",
    "end": "258778"
  },
  {
    "text": "So actually the first\ntime I started programming Bitcoin stuff, I did not know\nabout pay to script hash,",
    "start": "258779",
    "end": "264090"
  },
  {
    "text": "and I was just trying to\nmake my own transactions. And I used this. I just said, well, I want to\nsee that I can get the script",
    "start": "264090",
    "end": "270210"
  },
  {
    "text": "to execute right. I'll just take a\nrandom number, hash it, put it into this thing,\nand try to spend it.",
    "start": "270210",
    "end": "276270"
  },
  {
    "text": "And it never worked,\nand I didn't know why. And then a few days later, I\nread about pay to script hash.",
    "start": "276270",
    "end": "282450"
  },
  {
    "text": "Wait, it wasn't days later. I just put an OP. I put an OP, no OP, OP_HASH160,\nscript hash, OP_EQUAL.",
    "start": "282450",
    "end": "288258"
  },
  {
    "text": "And then it worked. And I was like, OK, I don't\nknow how Bitcoin works. This doesn't make any sense. I put a no OP, and\nthen it starts working.",
    "start": "288258",
    "end": "295680"
  },
  {
    "text": "And then a few days later I\nread about pay to script hash, and it was, oh, this actually\nhas a special meaning.",
    "start": "295680",
    "end": "302070"
  },
  {
    "text": "This is a template where if\nyou HASH160, a bunch of data, and OP_EQUAL, then it interprets\nthe pre-image as a script.",
    "start": "302070",
    "end": "310949"
  },
  {
    "text": "Does it have to be\n20 bytes, probably? Yeah, I don't know. There's actually a\nvulnerability here.",
    "start": "310950",
    "end": "320340"
  },
  {
    "text": "How pay to script\nhash got introduced is sort of an\ninteresting debate. There was OP_EVAL,\npay to script hash--",
    "start": "320340",
    "end": "326880"
  },
  {
    "text": "a bunch of argument about it. And this was in 2012,\nI think, or '11.",
    "start": "326880",
    "end": "332310"
  },
  {
    "text": "And it was sort of contentious,\nand people argue about it. And in retrospect this\nis actually insecure",
    "start": "332310",
    "end": "340770"
  },
  {
    "text": "because you're using\nOP_HASH160 160, which is 160-byte hash function.",
    "start": "340770",
    "end": "346110"
  },
  {
    "text": "It's basically SHA-256\nfollowed by RIPEMD-160.",
    "start": "346110",
    "end": "352560"
  },
  {
    "text": "This is not big enough. You're committing to a script\nhash, which is 20 bytes.",
    "start": "352560",
    "end": "358320"
  },
  {
    "text": "So normally you're like, yeah,\nwhatever, 160 bits is plenty.",
    "start": "358320",
    "end": "363840"
  },
  {
    "text": "You can have collision\nattacks, where if you're doing multisig\nwith someone else, they may be able to calculate\ndifferent pubkeys, so",
    "start": "363840",
    "end": "372330"
  },
  {
    "text": "that your pubkey-- they have a collision where\ntwo different 20-byte scripts",
    "start": "372330",
    "end": "378990"
  },
  {
    "text": "hash to the same thing. Sorry, two different scripts,\nhashed to the same 20 bytes.",
    "start": "378990",
    "end": "384347"
  },
  {
    "text": "This is possible\nbecause that's only 2 to the 80 work which\nis still a lot.",
    "start": "384347",
    "end": "389722"
  },
  {
    "text": "And used to be considered\nlike, no one can do-- 2 to the 80 is beyond\nany human endeavor.",
    "start": "389722",
    "end": "395400"
  },
  {
    "text": "But Bitcoin does 2 to the\n80 work every day, hour. I don't know, something\nfairly reasonable.",
    "start": "395400",
    "end": "401310"
  },
  {
    "text": "So it's like, wait, 2\nto the 80 is not enough. For the same security as\nBitcoin, which is generally a 2",
    "start": "401310",
    "end": "408570"
  },
  {
    "text": "to the 128 security\nparameter, we would need this to be\n256 bits instead of 160.",
    "start": "408570",
    "end": "414780"
  },
  {
    "text": "So when they upgraded the segwit\npay to witness script hash,",
    "start": "414780",
    "end": "419970"
  },
  {
    "text": "this has to be 32\nbytes, to eliminate any of those collision\nvulnerabilities.",
    "start": "419970",
    "end": "426357"
  },
  {
    "text": "So yeah, that's what\ndistinguishes it. So they look the same,\nRight it's just OP_0, piece of data,\nOP_0, piece of data.",
    "start": "426357",
    "end": "433725"
  },
  {
    "text": "But they do completely\ndifferent things based on how long this data is. OK, so that's pay\nto script hash.",
    "start": "433725",
    "end": "439790"
  },
  {
    "start": "437000",
    "end": "899000"
  },
  {
    "text": "Any questions about\nthe basic construction? OK, I want to make it so\nthat two of these three keys",
    "start": "439790",
    "end": "447810"
  },
  {
    "text": "must sign, in order\nto spend the coins. So I say, OP_2 push three public\nkeys OP_3, OP_CHECKMULTISIG.",
    "start": "447810",
    "end": "457380"
  },
  {
    "text": "So the idea is two of\nthese three must sign. So you can put OP_1, this OP_3.",
    "start": "457380",
    "end": "463470"
  },
  {
    "text": "You can OP_3-- this OP_3. If you put OP_4, three\nkeys, and then OP_3,",
    "start": "463470",
    "end": "468900"
  },
  {
    "text": "it probably will never be\nspendable and just never work. I'm pretty sure you have\nto put the signatures",
    "start": "468900",
    "end": "476010"
  },
  {
    "text": "in the correct order. So when you spend, you\nsay, OP_0, sigA, sigC.",
    "start": "476010",
    "end": "481682"
  },
  {
    "text": "And that's A, C. If you\nput sigC, sigA, it fails. ",
    "start": "481682",
    "end": "488940"
  },
  {
    "text": "This is a fun little part, where\nyou have to put in a 0 byte",
    "start": "488940",
    "end": "494250"
  },
  {
    "text": "before the signatures,\nwhen you want to spend. I'm not 100% sure\nhow that got in.",
    "start": "494250",
    "end": "499960"
  },
  {
    "text": "It was a screw up, and we\njust live with it forever. [LAUGHS] If you don't put\nthe OP_0, it doesn't work.",
    "start": "499960",
    "end": "508979"
  },
  {
    "text": "And it's somewhat confusing. It wastes a byte, which\nis not a huge deal. But it's just like, what?",
    "start": "508980",
    "end": "514719"
  },
  {
    "text": "And they didn't\nfix that in segwit. It just stays in there.",
    "start": "514720",
    "end": "519990"
  },
  {
    "text": "Who knows if it'll ever get out. So segwit was an\nopportunity to fix it. Yes, go ahead. AUDIENCE: Why didn't they just\nupdate that pretty quickly",
    "start": "519990",
    "end": "526040"
  },
  {
    "text": "when they realized you\nhave to put an OP_0 there? TADGE DRYJA: Hard fork. So you put this in.",
    "start": "526040",
    "end": "532200"
  },
  {
    "text": "And you could say,\nwait, that's stupid. Wait, you need a 0 in front\nwhen you put the signatures? Let's get rid of that.",
    "start": "532200",
    "end": "538130"
  },
  {
    "text": "So now the old software\nsays, no, I need a 0 here.",
    "start": "538130",
    "end": "543510"
  },
  {
    "text": "And then if you don't put the\n0, and you just put the two signatures, I fail this script. AUDIENCE: [INAUDIBLE]\ndoesn't have",
    "start": "543510",
    "end": "549068"
  },
  {
    "text": "to be a 0 until the [INAUDIBLE]? TADGE DRYJA: Right. It could be anything. It could just be any data.",
    "start": "549068",
    "end": "557370"
  },
  {
    "text": "And it was like any data the\nstack would get popped off. And then the two signatures.",
    "start": "557370",
    "end": "564532"
  },
  {
    "text": "So if you said, let's\neliminate that requirement that would actually be a\nhard fork, because it would be allowing scripts that\nwere previously invalid to now",
    "start": "564532",
    "end": "572050"
  },
  {
    "text": "become valid. And that's a huge undertaking,\nthat has sort of only happened once in Bitcoin,\nand that wasn't even planned.",
    "start": "572050",
    "end": "580459"
  },
  {
    "text": "And so it's just like,\nwhatever, leave it. They did soft fork it then. Is it soft forked or policy?",
    "start": "580460",
    "end": "585860"
  },
  {
    "text": "AUDIENCE: Soft fork. TADGE DRYJA: So they\ndid soft fork and say, it needs to be a 0. AUDIENCE: [INAUDIBLE]",
    "start": "585860",
    "end": "591360"
  },
  {
    "text": "TADGE DRYJA: Yeah, I'm not sure. So it could be non-standard, or\nit could be an actual consensus",
    "start": "591360",
    "end": "596830"
  },
  {
    "text": "rule, that that has to be a 0. It used to be anything,\nand now it should be a 0.",
    "start": "596830",
    "end": "602410"
  },
  {
    "text": "Put a 0 and then it'll work. But that remains in segwit\nas well, with multisig.",
    "start": "602410",
    "end": "608649"
  },
  {
    "text": "They could have fixed it. They didn't want to touch it. It was just like, whatever. ",
    "start": "608650",
    "end": "615660"
  },
  {
    "text": "When you see one of these,\nturn it into one of these, and just do the exact same\nthing you used to be doing. That's a lot simpler and easier.",
    "start": "615660",
    "end": "622510"
  },
  {
    "text": "So kind of weird,\nbut this works. People use this a lot,\nespecially exchanges.",
    "start": "622510",
    "end": "630270"
  },
  {
    "text": "Exchanges very often use\nthis kind of construction, because it helps\npeople manage keys.",
    "start": "630270",
    "end": "637990"
  },
  {
    "text": "If one key gets compromised,\nyou don't lose all your money. Usually, 2 of 3,\nsometimes 3 of 4.",
    "start": "637990",
    "end": "644769"
  },
  {
    "text": "3 of 3, 2 of 2-- all sorts of constructions\nwhere this is extremely useful. And actually, I'll be talking\nabout more powerful signature",
    "start": "644770",
    "end": "653770"
  },
  {
    "text": "aggregation and\nmultisig on Wednesday. But for now, this\nis what we use.",
    "start": "653770",
    "end": "659160"
  },
  {
    "text": "And, how can we\nmake this better? So one interesting thing-- pay to pubkey,\nwhich is not really",
    "start": "659160",
    "end": "667490"
  },
  {
    "text": "used anymore, but used to\nbe used more frequently, like in the early days. If you look at\ntransactions in 2009, 2010,",
    "start": "667490",
    "end": "674990"
  },
  {
    "text": "this is predominant, I think. And all the mining outputs\nfrom a long time ago looked",
    "start": "674990",
    "end": "681320"
  },
  {
    "text": "like this. And the output script\nwas just pubkey,",
    "start": "681320",
    "end": "686399"
  },
  {
    "text": "OP_CHECKSIG, which\nis really simple. And then the idea\nis when you want to spend it, you just push\na signature onto the stack.",
    "start": "686400",
    "end": "693350"
  },
  {
    "text": "Then you have signature,\npubkey, OP_CHECKSIG. That's it. It's really simple, and\nit actually saves space.",
    "start": "693350",
    "end": "702500"
  },
  {
    "text": "Your pubkey is 33 bytes,\nwhereas your pubkey hash script,",
    "start": "702500",
    "end": "709250"
  },
  {
    "text": "the pubkey hash is 20 bytes. So yeah, the pubkey\nhash is 12 bytes smaller",
    "start": "709250",
    "end": "714770"
  },
  {
    "text": "plus the extra OP codes makes it\n10 bytes savings for the output",
    "start": "714770",
    "end": "720590"
  },
  {
    "text": "script. However, when you spend\nwith data pubkey hash, you need to put the pubkey\nitself and the signature.",
    "start": "720590",
    "end": "729290"
  },
  {
    "text": "So you're putting the pubkey\ninto the network either way, eventually. So this is actually overall\nmore space efficient,",
    "start": "729290",
    "end": "736550"
  },
  {
    "text": "in that you're saving 23 bytes\nover the lifecycle of it. The output is a\nlittle bit bigger",
    "start": "736550",
    "end": "742550"
  },
  {
    "text": "but the input is significantly\nsmaller, so you end up saving. Why do we always use pubkey\nhashes instead of pubkeys?",
    "start": "742550",
    "end": "751670"
  },
  {
    "text": " There's a lot of\ndifferent opinions on it. You know, it's Bitcoin,\nthere's no \"answer.\"",
    "start": "751670",
    "end": "759150"
  },
  {
    "text": "People have different ideas\nof why these are better. Any ideas? AUDIENCE: [INAUDIBLE] put\ntheir pubkey out in public",
    "start": "759150",
    "end": "765899"
  },
  {
    "text": "before it got spent. TADGE DRYJA: Yeah, that's\nprobably the predominant one. And that's going\nto be a tricky one",
    "start": "765900",
    "end": "773040"
  },
  {
    "text": "to try to convince\npeople is not the case.  I'll get to that.",
    "start": "773040",
    "end": "778560"
  },
  {
    "text": "But people started\narguing about pubkey hash. When someone posted\nabout graftroot,",
    "start": "778560",
    "end": "784450"
  },
  {
    "text": "the discussion\ndevolved into a, wait, I don't want my\npubkey on the network.",
    "start": "784450",
    "end": "789930"
  },
  {
    "text": "And there's some arguments\nwhy you'd want a pubkey hash,",
    "start": "789930",
    "end": "795433"
  },
  {
    "text": "and it's more secure, but\nthere's a lot of arguments that it doesn't actually\nprovide any extra security. So that's a tricky one.",
    "start": "795433",
    "end": "802303"
  },
  {
    "text": "But that is one. That is probably a\nbig one people like. Other ideas why you\nuse pubkey hashes",
    "start": "802303",
    "end": "807350"
  },
  {
    "text": "instead of pubkeys themselves?  Size-- you want the\noutputs to be small.",
    "start": "807350",
    "end": "815420"
  },
  {
    "text": "Also, I'm pretty sure when\nSatoshi wrote all this, he did not know about\ncompressed public keys,",
    "start": "815420",
    "end": "823150"
  },
  {
    "text": "because that stuff was\nnot in there for a while. ",
    "start": "823150",
    "end": "828417"
  },
  {
    "text": "I think I mentioned this before. Did I mention compressed\nversus uncompressed pubkeys? Yeah, probably. OK, so review.",
    "start": "828417",
    "end": "834339"
  },
  {
    "text": "The idea is you've\ngot this whole curve kind of deal, kind of thing-- ",
    "start": "834340",
    "end": "841380"
  },
  {
    "text": "usually like that. Your public key is a\npoint on the curve.",
    "start": "841380",
    "end": "847290"
  },
  {
    "text": "You need an x and y-coordinate\nto represent the point. However, because\nit's symmetric, you",
    "start": "847290",
    "end": "852449"
  },
  {
    "text": "can just say, well, I'll\ntell you the x-coordinate. You know, x equals 7. I'm not going to tell\nyou the y-coordinate.",
    "start": "852450",
    "end": "858180"
  },
  {
    "text": "I'll just say y equals plus. So go up, or go down.",
    "start": "858180",
    "end": "863460"
  },
  {
    "text": "That way, I can do 32\nbytes for this and 1 bit for that, at the\ncost of a little bit",
    "start": "863460",
    "end": "870240"
  },
  {
    "text": "of extra computation. So I can say, maybe y is\nactually 5, or something.",
    "start": "870240",
    "end": "877270"
  },
  {
    "text": "So if I say, x equals 7,\ny equals 5, that's quick but it takes more space.",
    "start": "877270",
    "end": "882990"
  },
  {
    "text": "If I say x equals\n7, y equals plus, I now have to compute\nwhat y is when",
    "start": "882990",
    "end": "889050"
  },
  {
    "text": "I see this-- which is pretty\nquick, but take some time.",
    "start": "889050",
    "end": "894608"
  },
  {
    "text": "But it's a good tradeoff. Anyway, I don't think Satoshi\nknew about this idea-- or maybe thought of\nit, never put it in.",
    "start": "894608",
    "end": "901290"
  },
  {
    "start": "899000",
    "end": "971000"
  },
  {
    "text": "So the public keys\nwere actually 65 bytes. You want to keep\nthe output small,",
    "start": "901290",
    "end": "906300"
  },
  {
    "text": "because they're\nin the UTF subset. They're in the database. And you need to be able\nto think through this",
    "start": "906300",
    "end": "912029"
  },
  {
    "text": "and read it randomly. Like, you don't know when\nit's going to get spent. You don't know what transaction\nis going to query this.",
    "start": "912030",
    "end": "917190"
  },
  {
    "text": "So this has to go in an actual\ndatabase, key value store kind of thing. The signatures don't have\nto be in any database.",
    "start": "917190",
    "end": "923880"
  },
  {
    "text": "They're just in\nthese old blocks, and you read from them linearly. You basically read through\nthe whole block at a time.",
    "start": "923880",
    "end": "929910"
  },
  {
    "text": "And high latency is fine. There's never any\ntiming-critical reads for this. So basically, you\ncould store the blocks",
    "start": "929910",
    "end": "938340"
  },
  {
    "text": "as just files on\nyour hard drive. Block 1 dot dat, or\nwhatever-- block 2 dot dat--",
    "start": "938340",
    "end": "943710"
  },
  {
    "text": "and have 500,000 files, because\nyou basically always read them a block at a time.",
    "start": "943710",
    "end": "950670"
  },
  {
    "text": "And you only have\nto read them when other people are doing IBD-- initialization block download--\nand you're serving it to them.",
    "start": "950670",
    "end": "957630"
  },
  {
    "text": "So you can prune these, if you\nrun Bitcoin core with pruning. Anyway, so the main idea\nis, OK, even if it overall",
    "start": "957630",
    "end": "966650"
  },
  {
    "text": "increases the size\nof transactions, it does reduce the\nsize of the outputs--",
    "start": "966650",
    "end": "972180"
  },
  {
    "text": "which is the thing we\nreally want to minimize, for keeping the speed up.",
    "start": "972180",
    "end": "977480"
  },
  {
    "text": "Questions about that? Cool? OK. So similarly, same thing with\npay to pubkey hashes versus pay",
    "start": "977480",
    "end": "984890"
  },
  {
    "text": "to pubkey. Instead of pay to script hash,\nyou could put the whole script in an output--",
    "start": "984890",
    "end": "990750"
  },
  {
    "text": "like a multiset. You could just have\nall three of your keys in your output script.",
    "start": "990750",
    "end": "995850"
  },
  {
    "text": "And that would\nsave space overall. Your output is 20\nbytes, and then you reveal your whole\n100-byte script,",
    "start": "995850",
    "end": "1002180"
  },
  {
    "text": "so you save those 20 bytes. Same amount, but\nproportionately less, sorry.",
    "start": "1002180",
    "end": "1007435"
  },
  {
    "text": "It is some space\nsavings overall, but it's better to keep\nthe output size small.",
    "start": "1007435",
    "end": "1012800"
  },
  {
    "text": "[INAUDIBLE] If you do this,\ndoes it actually work? AUDIENCE: [INAUDIBLE] TADGE DRYJA: OK,\nit's not standard,",
    "start": "1012800",
    "end": "1018030"
  },
  {
    "text": "so it might not propagate. AUDIENCE: [INAUDIBLE] TADGE DRYJA: I wouldn't\nrecommend this.",
    "start": "1018030",
    "end": "1023730"
  },
  {
    "text": "It probably will\nnot really work. Maybe eventually it\nwill get confirmed, if you find people to\nconfirm it for you,",
    "start": "1023730",
    "end": "1030119"
  },
  {
    "text": "but most nodes will ignore\nthese kinds of things. OK, so the question for today--",
    "start": "1030119",
    "end": "1037240"
  },
  {
    "text": "what if we want really,\nreally big scripts? So 2 of 3 multisig is cool.",
    "start": "1037240",
    "end": "1042720"
  },
  {
    "text": "We can just show all three keys. And there's 33 bytes of data\nthat don't really get used.",
    "start": "1042720",
    "end": "1048630"
  },
  {
    "text": "If you're signing\nwith 2 of the 3 keys, well, that means one of\nthe keys never got used. It was sort of\nthere and pointless.",
    "start": "1048630",
    "end": "1055990"
  },
  {
    "text": "But whatever, it's 33 bytes. So what if you want to do,\nlike, 2 of 50 multisig? So here's 50 different keys.",
    "start": "1055990",
    "end": "1062160"
  },
  {
    "text": "Any two of these\npeople can sign. Maybe you're in a company. There's 50 employees.",
    "start": "1062160",
    "end": "1067799"
  },
  {
    "text": "And the policy is that,\nOK, any of these two people can use the coins for this\nspending to buy lunch,",
    "start": "1067800",
    "end": "1074700"
  },
  {
    "text": "or whatever.  So how would you\n2 of 250 multisig?",
    "start": "1074700",
    "end": "1081350"
  },
  {
    "text": "Any ideas? You commit, and only reveal\npart of a commitment. So the cause of and solution to\nall of blockchain's problems--",
    "start": "1081350",
    "end": "1089990"
  },
  {
    "text": "Merkle trees. That's sort of the\nsolution for all-- throw a Merkle tree\non it, which is sort of actually what\nI'm working on now,",
    "start": "1089990",
    "end": "1097360"
  },
  {
    "text": "for another thing. So you commit to\nsome kind of root, and then you reveal only part\nof what you've committed to.",
    "start": "1097360",
    "end": "1108440"
  },
  {
    "text": "So the idea, which is from-- ",
    "start": "1108440",
    "end": "1114240"
  },
  {
    "text": "there's debate about who\ncame up with this stuff-- MAST. Like Peter [? Wohl ?]\nwas into it, but then someone else said\nthey wrote a paper about it.",
    "start": "1114240",
    "end": "1121270"
  },
  {
    "text": "I don't know. It was like 2013, 2014. The original idea was make\na merkelized abstract syntax",
    "start": "1121270",
    "end": "1130020"
  },
  {
    "text": "tree. So if you have done any\nprogramming language courses,",
    "start": "1130020",
    "end": "1135270"
  },
  {
    "text": "you probably recognize the term\nabstract syntax tree asked, which is sort of\nhow compilers work.",
    "start": "1135270",
    "end": "1141510"
  },
  {
    "text": "They make this tree. So the idea is, OK, we'll\nmake every node in that tree like a Merkle root, so\nevery single OP code can",
    "start": "1141510",
    "end": "1149909"
  },
  {
    "text": "be revealed and be swapped out. And it's super crazy. That's sort of overkill.",
    "start": "1149910",
    "end": "1154919"
  },
  {
    "text": "So that was part of the\ninitial idea and paper. But a much simpler\nway to reason about it",
    "start": "1154920",
    "end": "1161340"
  },
  {
    "text": "and program it would\njust be something like, pay to script Merkle root. Where in my output\nscript I have a root,",
    "start": "1161340",
    "end": "1169830"
  },
  {
    "text": "and then I reveal that\nthere is a script that goes into that root, and\nthen execute that script.",
    "start": "1169830",
    "end": "1178290"
  },
  {
    "text": "So for example, I make\nfour different scripts. So this would be-- ",
    "start": "1178290",
    "end": "1186809"
  },
  {
    "text": "anyway, it's just four\ndifferent scripts. There's an O-2 choose\nn, that results in four.",
    "start": "1186810",
    "end": "1193080"
  },
  {
    "text": "I don't think so. But you know, this\nis Alice and Bob. This is Bob and Carol. This is Carol and Dave. This is Dave and\nEdna, or something.",
    "start": "1193080",
    "end": "1201570"
  },
  {
    "text": "And any of these two people,\nbut four different groups,",
    "start": "1201570",
    "end": "1206590"
  },
  {
    "text": "can sign.  And then this is\nwhat you actually put in your output script.",
    "start": "1206590",
    "end": "1212850"
  },
  {
    "text": "And then when you\nwant to spend, you say, OK, I'm going\nto provide a proof. So to spend, reveal\nwhich I'm spending.",
    "start": "1212850",
    "end": "1218759"
  },
  {
    "text": "So for example, I'm\nspending using script 3. And then I reveal\na path to the root,",
    "start": "1218760",
    "end": "1224220"
  },
  {
    "text": "which would be I reveal 4, and\nthis, and then you compute.",
    "start": "1224220",
    "end": "1231120"
  },
  {
    "text": "You say, OK, hash these two\nthings together, you get that. Hash of these two things\ntogether, you get that.",
    "start": "1231120",
    "end": "1238710"
  },
  {
    "text": "And confirm that the\nresult is equal to what was in the output script.",
    "start": "1238710",
    "end": "1243880"
  },
  {
    "text": "And if it is, OK, you've\nprovided a valid inclusion proof that script 3\nwas inside this root.",
    "start": "1243880",
    "end": "1253890"
  },
  {
    "text": "What's kind of\ncool-- in this case, you do not need the\nbinary tree to be perfect. You can have different\nheights, because you're not",
    "start": "1253890",
    "end": "1262490"
  },
  {
    "text": "committing to the height of the\ntree when you're sending to it. So the default\ncase could be here,",
    "start": "1262490",
    "end": "1271010"
  },
  {
    "text": "and then a really big tree\nthat goes down a lot over here. So in most cases it's going\nto be Alice and Bob signing.",
    "start": "1271010",
    "end": "1279080"
  },
  {
    "text": "And then Carol and Dave,\nand Edna and whatever, are unlikely.",
    "start": "1279080",
    "end": "1285380"
  },
  {
    "text": "So I'm going to put Alice\nand Bob here, and then have the tree sort\nof asymmetrically get longer over here.",
    "start": "1285380",
    "end": "1291470"
  },
  {
    "text": "So that when Alice and Bob\nsign, they can just reveal this. And then when the\nother people sign,",
    "start": "1291470",
    "end": "1296960"
  },
  {
    "text": "they're going to have\nto reveal this and this. And then I optimize my space\nfor the most likely case.",
    "start": "1296960",
    "end": "1304351"
  },
  {
    "text": "So that's kind of cool.  What else?",
    "start": "1304352",
    "end": "1310020"
  },
  {
    "text": "However, there are\na bunch of problems. One, OK, 2 of 50 is cool.",
    "start": "1310020",
    "end": "1315400"
  },
  {
    "text": "So in the case of 250,\nlet's just look through it. 50 choose 2-- I couldn't\nmake the little numbers",
    "start": "1315400",
    "end": "1321870"
  },
  {
    "text": "in parentheses the right-- whatever. So that's 1,225\ndifferent scripts.",
    "start": "1321870",
    "end": "1327960"
  },
  {
    "text": "And if you do a\nregular binary tree--",
    "start": "1327960",
    "end": "1334419"
  },
  {
    "text": "balanced-- I forget\nall the words-- you get a tree height of 11. Which is kind of like,\noh, it's so close, right?",
    "start": "1334420",
    "end": "1342779"
  },
  {
    "text": "If it was 1,024, it'd be\n10, but a little over.  And actually, since it\ndoesn't have to be symmetric,",
    "start": "1342780",
    "end": "1349860"
  },
  {
    "text": "you can get like tree\nheight 10 for most leaves, and then 11 for some of them. Anyway, so your\nproof size is going",
    "start": "1349860",
    "end": "1355020"
  },
  {
    "text": "to be 352 bytes, which is OK. And if you didn't use\nMAST, you can say, well,",
    "start": "1355020",
    "end": "1361620"
  },
  {
    "text": "I'm just going to have\na pay to script hash. And this script is just\ngoing to show all 50 keys,",
    "start": "1361620",
    "end": "1367380"
  },
  {
    "text": "and have OP_2,\nall 50 keys, OP_3. And that would be about plus 3,\nor something, but 1,650 bytes.",
    "start": "1367380",
    "end": "1376690"
  },
  {
    "text": "So MAST is an improvement. And it's sort of like,\nhey, I'm doing log n.",
    "start": "1376690",
    "end": "1382220"
  },
  {
    "text": "And for all the different\nscripts, I have log n. If I actually committed\nto all the 1,225 scripts",
    "start": "1382220",
    "end": "1387309"
  },
  {
    "text": "with each of the two\nkeys, it'd be much bigger. But I don't actually\nhave to, because I've got this whole 50 choose 2 in here.",
    "start": "1387310",
    "end": "1393520"
  },
  {
    "text": "So I've got two things. I've got this combinatorial\nthing, and then this log thing. And in balance, it's like,\nOK, meh-- like, better,",
    "start": "1393520",
    "end": "1400929"
  },
  {
    "text": "but not actually that awesome. You're going from\n1.6k to 350 bytes.",
    "start": "1400930",
    "end": "1407049"
  },
  {
    "text": "It gets worse. Let's say I want to do 25 of 50. Well, that's 50 choose 25,\nwhich is around 100 trillion",
    "start": "1407050",
    "end": "1412929"
  },
  {
    "text": "different combinations. The tree height would now be 47. The proof size is going to be--",
    "start": "1412930",
    "end": "1419960"
  },
  {
    "text": "wait, did I do that wrong? Hold on. ",
    "start": "1419960",
    "end": "1426400"
  },
  {
    "text": "47 by 32 is 1,504. OK, sorry, for some\nreason I have 22 there.",
    "start": "1426400",
    "end": "1433160"
  },
  {
    "text": "Sorry, I'll fix that. But that is correct. Yeah, 1,504.",
    "start": "1433160",
    "end": "1439070"
  },
  {
    "text": "So 1.5k, whereas the raw\nwould still be 1,650. These are about the same.",
    "start": "1439070",
    "end": "1444560"
  },
  {
    "text": "This is not a great\nspace savings. Your proofs are huge. In fact, I would say it's\nnot only not much better,",
    "start": "1444560",
    "end": "1452420"
  },
  {
    "text": "it's worse. You're going to have to compute\n200 trillion hashes in order to compute that root, as the\nperson creating the output",
    "start": "1452420",
    "end": "1458780"
  },
  {
    "text": "script. To verify inclusion,\nyou have to compute 47 hashes, which is fine.",
    "start": "1458780",
    "end": "1465050"
  },
  {
    "text": "200 trillion hashes\nis doable, but that's going to take a while. And that's annoying.",
    "start": "1465050",
    "end": "1472140"
  },
  {
    "text": "How long? Hours, days? I don't know. Doable, but not fun.",
    "start": "1472140",
    "end": "1478900"
  },
  {
    "text": "So MAST doesn't really\nget you necessarily what you want here, although\nthis is kind of a silly case.",
    "start": "1478900",
    "end": "1487020"
  },
  {
    "text": "None of the things\nreally get you what you want here,\nbecause of these sort of combinatorial problems.",
    "start": "1487020",
    "end": "1492809"
  },
  {
    "text": "Any questions, or oppositions\nif I have screwed up",
    "start": "1492810",
    "end": "1498380"
  },
  {
    "text": "some math somewhere? AUDIENCE: [INAUDIBLE]",
    "start": "1498380",
    "end": "1503679"
  },
  {
    "start": "1503680",
    "end": "1511290"
  },
  {
    "text": "TADGE DRYJA: So\ncompare these two. If I show a tree height of\n10 or 11, huh, that's weird.",
    "start": "1511290",
    "end": "1517600"
  },
  {
    "text": "There's like 1,000 different\nscripts around in this tree. If I show a tree height of\n47, that's really weird.",
    "start": "1517600",
    "end": "1524820"
  },
  {
    "text": "Someone either was\njust joking around and made this weird sparse\ntree with all these branches",
    "start": "1524820",
    "end": "1530220"
  },
  {
    "text": "to just screw around\nand have a height of 47, or there's 200 trillion\npossible spending outcomes.",
    "start": "1530220",
    "end": "1538560"
  },
  {
    "text": "So it reveals information about\nthe things that were not spent. Even though it doesn't\nreveal what the scripts were,",
    "start": "1538560",
    "end": "1544259"
  },
  {
    "text": "it to some extent reveals\nhow many there were. ",
    "start": "1544260",
    "end": "1552150"
  },
  {
    "text": "But still it is kind\nof useful, right? In the 2 of 50 case,\nyes, this is better. You have to compute a\nthousand-something hashes.",
    "start": "1552150",
    "end": "1559510"
  },
  {
    "text": "No big deal. You reduce your size\nfrom 1.6k to 353 bytes.",
    "start": "1559510",
    "end": "1564580"
  },
  {
    "text": "That's a good deal. Here kind of not, but this\nis also sort of a crazy--",
    "start": "1564580",
    "end": "1570340"
  },
  {
    "text": "there's other ways to address\nthis, but it's pretty good. There's sort of two, or\nmore than two different ways",
    "start": "1570340",
    "end": "1578650"
  },
  {
    "start": "1573000",
    "end": "1695000"
  },
  {
    "text": "to implement this. You could just say,\nOK, we're going to have pay to\nscript Merkle root, where you have a\ntemplate-- where",
    "start": "1578650",
    "end": "1585970"
  },
  {
    "text": "it's like OP_2, or OP_3, or\nsomething, and then some data.",
    "start": "1585970",
    "end": "1590973"
  },
  {
    "text": "And the idea is\nwhen you spend it, you have to provide a proof,\nand then the script itself. And then, you\nexecute the script.",
    "start": "1590973",
    "end": "1597340"
  },
  {
    "text": "Another way which is\nkind of cool-- and people were talking about\nit recently-- you have this tail call\nrecursion-looking thing.",
    "start": "1597340",
    "end": "1604510"
  },
  {
    "text": "Where the idea is, if\nyou evaluate your script and then there's two items\nleft on the stack at the end,",
    "start": "1604510",
    "end": "1611740"
  },
  {
    "text": "what you say is, OK-- whichever is bottom or top-- one of these items, the\nbottom one, is a Merkle root.",
    "start": "1611740",
    "end": "1621750"
  },
  {
    "text": "And then the other\nitem on the stack is the proof and arguments-- another script.",
    "start": "1621750",
    "end": "1627270"
  },
  {
    "text": "So you can sort of\nrecursively say, OK, well, I went down into this\nscript with this proof",
    "start": "1627270",
    "end": "1632875"
  },
  {
    "text": "and then executed it. And then things were\nleft on the stack, and it was another proof,\nfor another Merkle root.",
    "start": "1632875",
    "end": "1639600"
  },
  {
    "text": "So that's kind of cool. You can make all sorts of\ncrazy things with that.",
    "start": "1639600",
    "end": "1645010"
  },
  {
    "text": "I don't know how useful\nrecursion is in this case, but there could be cases. You're already in a binary tree.",
    "start": "1645010",
    "end": "1650780"
  },
  {
    "text": "So my personal thing is,\nwhy not just keep it simple and pay to a script Merkle root?",
    "start": "1650780",
    "end": "1656110"
  },
  {
    "text": "But there's people\nwho think, no, this should be more expressive, like\nprogramming language-y wise.",
    "start": "1656110",
    "end": "1663560"
  },
  {
    "text": "Anyway, so that's\nthe state of MAST. MAST has code. There's a pull\nrequest in bip, right?",
    "start": "1663560",
    "end": "1669880"
  },
  {
    "text": "Yeah. So there's some people\nwho are really into MAST. And like, let's get\nthis into Bitcoin.",
    "start": "1669880",
    "end": "1675130"
  },
  {
    "text": "Let's make a soft fork. And there's also people who are\nnot as enthusiastic about it.",
    "start": "1675130",
    "end": "1682100"
  },
  {
    "text": "And so it's like\nno one's opposed to it-- like, this is a bad\nidea, this will break Bitcoin.",
    "start": "1682100",
    "end": "1687380"
  },
  {
    "text": "But there's varying\nlevels of let's get this in, you can do all these\ncool things, versus eh,",
    "start": "1687380",
    "end": "1694250"
  },
  {
    "text": "is this really a priority? What are we going to use\nwith it, kind of thing. OK, any questions about this?",
    "start": "1694250",
    "end": "1699590"
  },
  {
    "start": "1695000",
    "end": "1865000"
  },
  {
    "text": "I think we have a quick\nbreak, and then I'll do OP_RETURN, which\nseems unconnected.",
    "start": "1699590",
    "end": "1708920"
  },
  {
    "text": "But I will show you\nhow this connects to these issues we have. OK, so OP_RETURN, it\nwas in the problem set.",
    "start": "1708920",
    "end": "1716419"
  },
  {
    "text": "You basically put this OP code\nin the front of your script, and that flags it as forever\nunspendable as an output.",
    "start": "1716420",
    "end": "1724350"
  },
  {
    "text": "So you shouldn't put much\nmoney into these outputs, because they are\nbasically destroyed.",
    "start": "1724350",
    "end": "1729940"
  },
  {
    "text": "OP_RETURN means you immediately\nreturn from the script evaluation, and\nyou return a false.",
    "start": "1729940",
    "end": "1736880"
  },
  {
    "text": "I think it used to\nbe return whatever is on the top of\nthe stack, which meant you could just spend\nanyone's money by using",
    "start": "1736880",
    "end": "1743690"
  },
  {
    "text": "OP_RETURN. So they soft forked that to\nsay, no, OP_RETURN always fails instead of\nOP_RETURN always",
    "start": "1743690",
    "end": "1750273"
  },
  {
    "text": "trivially succeeds-- which\nmeans you just put an OP_RETURN and take anyone's money. So they figured that\none out pretty quick.",
    "start": "1750273",
    "end": "1756860"
  },
  {
    "text": "So people use OP_RETURN to\nput data into the blockchain. Why do people do this?",
    "start": "1756860",
    "end": "1764480"
  },
  {
    "text": "You can't spend it. You can't do anything\nwith this data. But why do people do this?",
    "start": "1764480",
    "end": "1771600"
  },
  {
    "text": "It's kind of cool, right? To prove it's there. You want to put some data in.",
    "start": "1771600",
    "end": "1777528"
  },
  {
    "text": "And you just want to say,\nhey, I thought of this first, or I'm making a\npatent, whatever.",
    "start": "1777528",
    "end": "1783769"
  },
  {
    "text": "You put data. People use a lot of OP_RETURN. What was it? Like, 10%? AUDIENCE: [INAUDIBLE] set.",
    "start": "1783770",
    "end": "1792650"
  },
  {
    "text": "[INAUDIBLE] the current\n[INAUDIBLE] set, if you remove,",
    "start": "1792650",
    "end": "1798510"
  },
  {
    "text": "or if you don't for\nthe unspendables, it would account for about\n10% of [INAUDIBLE] data set.",
    "start": "1798510",
    "end": "1803718"
  },
  {
    "text": "TADGE DRYJA: So\nthat's a lot of data. People were using it. There is a better way.",
    "start": "1803718",
    "end": "1810970"
  },
  {
    "text": "So what if you wanted to\ndo a 0 byte OP_RETURN? It's not quite the same. Because an OP_RETURN,\neveryone can see it.",
    "start": "1810970",
    "end": "1818440"
  },
  {
    "text": "And in some cases,\nyou might want that. You might want to\nput an opportunity so it's publicly visible.",
    "start": "1818440",
    "end": "1824830"
  },
  {
    "text": "But in most cases, I\ndon't care about someone's",
    "start": "1824830",
    "end": "1829909"
  },
  {
    "text": "random OP_RETURN. Usually, what you're\nputting into OP_RETURNs are, like, hashes. Because you don't have\nmuch space anyway.",
    "start": "1829910",
    "end": "1835640"
  },
  {
    "text": "You have, like, 40\nbytes or something. So usually your space\nconstraint so you put the hash of some document.",
    "start": "1835640",
    "end": "1842420"
  },
  {
    "text": "And then someone\ncan prove, no, look, I put the document\non the blockchain, by putting the hash of it. That's a commitment to\nthat document itself.",
    "start": "1842420",
    "end": "1849170"
  },
  {
    "text": "So I show that I had\nthis data at some time before this block came out.",
    "start": "1849170",
    "end": "1854865"
  },
  {
    "text": "That's essentially\nwhat you're proving. You're proving you knew it\nbefore a certain time, which",
    "start": "1854865",
    "end": "1860990"
  },
  {
    "text": "is in many cases really useful. I mean, that's sort of the\nwhole point of the blockchain, to prove that you knew\nabout this transaction",
    "start": "1860990",
    "end": "1867170"
  },
  {
    "start": "1865000",
    "end": "1880000"
  },
  {
    "text": "before a future transaction\ntries to double spend it. You want to file a patent,\nand I had this idea first--",
    "start": "1867170",
    "end": "1873409"
  },
  {
    "text": "or prove these things. But how can we do this\nwith 0 bytes overhead? ",
    "start": "1873410",
    "end": "1881500"
  },
  {
    "start": "1880000",
    "end": "2309000"
  },
  {
    "text": "OK, it's not obvious. You put it in the signature. And this was not obvious,\nand no one thought of this",
    "start": "1881500",
    "end": "1887799"
  },
  {
    "text": "until a year or two ago. I think it was Andrew\nPoelstra, but I could be wrong.",
    "start": "1887800",
    "end": "1893590"
  },
  {
    "text": "But I just associate it with\nhim, because he worked on it. But I'm not 100% sure.",
    "start": "1893590",
    "end": "1899350"
  },
  {
    "text": "And he called it pay to contract\nhash, which is confusing. It's not at all the same\nas pay to script hash.",
    "start": "1899350",
    "end": "1907030"
  },
  {
    "text": "It's not at all the same\nas pay to pubkey hash. But it's called pay to\ncontract hash, which makes it really confusing.",
    "start": "1907030",
    "end": "1912133"
  },
  {
    "text": "Bitcoin has really confusing\nnames, like script pubkey.",
    "start": "1912133",
    "end": "1920440"
  },
  {
    "text": "Script pubkey does not have\nto have a pubkey in it. In most cases, it doesn't. It has a pubkey hash,\nor a script hash.",
    "start": "1920440",
    "end": "1927760"
  },
  {
    "text": "It doesn't have to\nhave anything in it, but it's called script pubkey. And then script sig usually\nhas signatures, but again,",
    "start": "1927760",
    "end": "1935830"
  },
  {
    "text": "not always. And there's all sorts\nof confusing names. Anyway, here's our\nnew contribution",
    "start": "1935830",
    "end": "1941240"
  },
  {
    "text": "to confusing names-- pay to contract hash, which is\nnot really paying to anything.",
    "start": "1941240",
    "end": "1946280"
  },
  {
    "text": "There doesn't have\nto be a contract. There is a hash involved. ",
    "start": "1946280",
    "end": "1952198"
  },
  {
    "text": "So it's a weird name,\nas you can't actually detect the contract,\nyou're not paying to it. But to review, I'm going\nto use Schnoor signatures.",
    "start": "1952198",
    "end": "1959690"
  },
  {
    "text": "This still works in ECDSA. But ECDSA is weird and\nannoying, and it also",
    "start": "1959690",
    "end": "1965355"
  },
  {
    "text": "makes more sense in\nSchnoor signatures, so I'll explain that. But it totally works in ECDSA.",
    "start": "1965355",
    "end": "1972110"
  },
  {
    "text": "The idea of the\nSchnoor signatures-- OK, this is my private key. This is the message\nI want to sign.",
    "start": "1972110",
    "end": "1978770"
  },
  {
    "text": "This is a random sort\nof temporary private key I come up with. And then this is that\ntemporary private key",
    "start": "1978770",
    "end": "1986150"
  },
  {
    "text": "turned into a public key. Multiply by G to get\nthe public key version. And then to verify\nthe signature,",
    "start": "1986150",
    "end": "1996830"
  },
  {
    "text": "the verifier multiplies\nboth sides by G. So you get s times G. k turns\nin R. Little a turns into big A.",
    "start": "1996830",
    "end": "2003190"
  },
  {
    "text": "This is just the 32-byte\nhash, so it stays the same.",
    "start": "2003190",
    "end": "2009080"
  },
  {
    "text": "So the R and s\nare the signature,",
    "start": "2009080",
    "end": "2014320"
  },
  {
    "text": "and the pub key is A,\nand the message is m. So that's the signing,\nor close enough",
    "start": "2014320",
    "end": "2019930"
  },
  {
    "text": "to the signing that's\nused in Bitcoin. So pay to contract\nhash says, OK, I",
    "start": "2019930",
    "end": "2025530"
  },
  {
    "text": "want to put arbitrary\ndata into my signature, in a way that I can\nprove it was there.",
    "start": "2025530",
    "end": "2031230"
  },
  {
    "text": "So here's the normal equation. Now, what if I redefine k.",
    "start": "2031230",
    "end": "2036350"
  },
  {
    "text": "Normally, k is just\na random number. But now I'm going to redefine k. k is now j.",
    "start": "2036350",
    "end": "2042590"
  },
  {
    "text": "So j is my new\nreal random number. And then I'm going\nto add the hash...",
    "start": "2042590",
    "end": "2050480"
  },
  {
    "text": "There's no G there, shoot. Anyway, G should not be\nthere, but it should be there. Sorry. ",
    "start": "2050480",
    "end": "2059310"
  },
  {
    "text": "So I redefine k as j, which\nis an actual random number, plus the hash of the data\nI want to commit to--",
    "start": "2059310",
    "end": "2067469"
  },
  {
    "text": "and j times G. You get the idea. That should have been there. ",
    "start": "2067469",
    "end": "2077408"
  },
  {
    "text": "And-- then the signature-- it's still the same equation. I'm just saying, OK, it's\nthis new k minus this thing.",
    "start": "2077409",
    "end": "2087760"
  },
  {
    "text": "And so nobody necessarily\nknows that I'm doing this. If I just tell you\ntell you R and s,",
    "start": "2087760",
    "end": "2096888"
  },
  {
    "text": "the equation still holds. It's just that k is\na little special. For anyone else, it looks\nlike a random number.",
    "start": "2096889",
    "end": "2104660"
  },
  {
    "text": "It's a random number\nplus this other hash-- not times G.",
    "start": "2104660",
    "end": "2110600"
  },
  {
    "text": "So it's a random\nnumber plus a hash. Which hashes look\npretty random-- so it's a random number plus\nsome other random number.",
    "start": "2110600",
    "end": "2116780"
  },
  {
    "text": "No one's going to tell that\nanything's weird about this. However, it is\nunique, in that I've",
    "start": "2116780",
    "end": "2122960"
  },
  {
    "text": "got this random number plus\nthe hash of that random number times G in it, and this\nextra data I've put in.",
    "start": "2122960",
    "end": "2131420"
  },
  {
    "text": "So to verify it, if I\ndon't tell you about this, verification looks the same. What if I do tell\nyou about it, though?",
    "start": "2131420",
    "end": "2138630"
  },
  {
    "text": "So normally the sig-- R, s-- pubkey is\nA, message is m. But the signer can\nprove that R is not kG--",
    "start": "2138630",
    "end": "2147119"
  },
  {
    "text": "that there's this other k. Well, it's k, but there's\nsomething else in R.",
    "start": "2147120",
    "end": "2152513"
  },
  {
    "text": "I can prove that R is special\nafter the fact, right? Everyone knows what R is. But I can then prove that\nsomething was in R. Also,",
    "start": "2152513",
    "end": "2159090"
  },
  {
    "text": "never reveal k,\neven after the fact. That will let you figure out\nthe person's private key.",
    "start": "2159090",
    "end": "2164250"
  },
  {
    "text": "So the idea is I can\nprove that R equals J plus the hash of\nthe data in J times G.",
    "start": "2164250",
    "end": "2174967"
  },
  {
    "text": "Here's where it's a\nlittle confusing, right? Because this is\nalready a pubkey, and you're multiplying\nby G again, right?",
    "start": "2174967",
    "end": "2180640"
  },
  {
    "text": "So it's a little weird? Anyone can compute this, right? Because I can say,\nhey, you already know",
    "start": "2180640",
    "end": "2187330"
  },
  {
    "text": "R. I can give you a J and\nsome data, such that j",
    "start": "2187330",
    "end": "2192790"
  },
  {
    "text": "plus the hash of this data,\nand j itself times G, equals R. And I can't forge this.",
    "start": "2192790",
    "end": "2200079"
  },
  {
    "text": "If I try to forge this,\nand I say after the fact-- I just made R randomly. I didn't have any actual data.",
    "start": "2200080",
    "end": "2207130"
  },
  {
    "text": "And then after the fact, I want\nto come up and lie, and say, I put this data in to this R.",
    "start": "2207130",
    "end": "2212890"
  },
  {
    "text": "OK, now we need to solve\nfor J. Because my proof is going to be J in this data. So I've got the data I want, and\nI want to figure out what J is.",
    "start": "2212890",
    "end": "2220369"
  },
  {
    "text": "So J is the hash of this data. And J times G minus\nR-- oh, shoot.",
    "start": "2220370",
    "end": "2227148"
  },
  {
    "text": "That would be the\nequation I have to solve, if I want to falsely prove\nthat this data went into it. The problem is\nI've got this thing",
    "start": "2227148",
    "end": "2233140"
  },
  {
    "text": "where it's like, J is defined\nin terms of the hash of J. That's going to be hard, right?",
    "start": "2233140",
    "end": "2240840"
  },
  {
    "text": "If I'm defining J in\nterms of the hash of J, then I'm stuck, because hash\nfunctions don't let me do that.",
    "start": "2240840",
    "end": "2247559"
  },
  {
    "text": "So this is actually\nkind of cool, because it's a proof that\nthere was some extra data that",
    "start": "2247560",
    "end": "2252809"
  },
  {
    "text": "went in to the random R point,\nbefore the signing happened. ",
    "start": "2252810",
    "end": "2260688"
  },
  {
    "text": "Yeah, it had to be\nbefore the signing happened, because the\nsignature has R in it, and S is a function of R.",
    "start": "2260688",
    "end": "2268522"
  },
  {
    "text": "And this is cool. Because if you\ndon't know about it, it just looks like a regular\nsignature with a regular R",
    "start": "2268522",
    "end": "2273640"
  },
  {
    "text": "value. But if I tell you about it-- like, yeah, when I\nsigned that, I actually put some extra data in here.",
    "start": "2273640",
    "end": "2279940"
  },
  {
    "text": "So that's kind of\nbetter than OP_RETURN. There's 0 bytes overhead. You were going to sign anyway.",
    "start": "2279940",
    "end": "2287410"
  },
  {
    "text": "So you can put data inside\na signature's R point. You can even do it with\nother people's signatures.",
    "start": "2287410",
    "end": "2293260"
  },
  {
    "text": "There's no real private\ninformation here. If I just hand you some\ndata, it's totally safe.",
    "start": "2293260",
    "end": "2299500"
  },
  {
    "text": "Hey, here's some data. OK, here's the J point,\nthat constructs this,",
    "start": "2299500",
    "end": "2304960"
  },
  {
    "text": "and the R. It's like,\nOK, sounds good. I can put someone\nelse's data into this. You just hand them the data.",
    "start": "2304960",
    "end": "2311349"
  },
  {
    "start": "2309000",
    "end": "2444000"
  },
  {
    "text": "They give you the proof,\nwhich in that case is just J. So it's OP_RETURN\nwith 0 byte overhead.",
    "start": "2311350",
    "end": "2317810"
  },
  {
    "text": "This is really cool. I believe this is being\nused for open timestamps now, as of a few--",
    "start": "2317810",
    "end": "2324520"
  },
  {
    "text": "I think, right? AUDIENCE: I wasn't\naware of that. TADGE DRYJA: I think\nthey got it in. I don't know. But it's also nice-- it's not\nlike a soft fork or anything.",
    "start": "2324520",
    "end": "2331718"
  },
  {
    "text": "This is just a fun trick you\ncan do with your signatures. So you could do this\ntoday if you wanted,",
    "start": "2331718",
    "end": "2337480"
  },
  {
    "text": "and then prove to people\nlater, that, hey, I put my name into my signature.",
    "start": "2337480",
    "end": "2342765"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] the\nhash, wouldn't proving one essentially refer to\nall in the batch stuff?",
    "start": "2342765",
    "end": "2349028"
  },
  {
    "text": " TADGE DRYJA: This is direct\nreplacement for the OP_RETURN. You commit to the root.",
    "start": "2349028",
    "end": "2356780"
  },
  {
    "text": "And in their case, this\ndata is a Merkle root. And then you can improve.",
    "start": "2356780",
    "end": "2363480"
  },
  {
    "text": "So you can put a\nMerkle root here. And then I prove that\nthere's a Merkle root inside my signature.",
    "start": "2363480",
    "end": "2369400"
  },
  {
    "text": "And then I also prove a\nbranch, so that the data is in the Merkle root, which\nis then in the R point-- which",
    "start": "2369400",
    "end": "2375600"
  },
  {
    "text": "is in the signature, which is in\nthe block's Merkle tree, which is in the blockchain. So you've got, like, four or\nfive different proofs going on,",
    "start": "2375600",
    "end": "2382920"
  },
  {
    "text": "but they should all be working. OK, so this is kind of cool.",
    "start": "2382920",
    "end": "2389130"
  },
  {
    "text": "Any idea why I was explaining\nall this in terms of MAST and multisig?",
    "start": "2389130",
    "end": "2394350"
  },
  {
    "text": "These seem totally\nunconnected, right? Any idea? ",
    "start": "2394350",
    "end": "2403220"
  },
  {
    "text": "It took Bitcoin people\nlike well over a year to see the, in retrospect,\nreally obvious connection,",
    "start": "2403220",
    "end": "2409760"
  },
  {
    "text": "and thing to do with this. But it took a year or two.",
    "start": "2409760",
    "end": "2414780"
  },
  {
    "text": "And then Greg posted on the\nmailing list in January-- like, hey wait, you can use\nthis for something else.",
    "start": "2414780",
    "end": "2421680"
  },
  {
    "text": "And then it was like, oh shoot,\nhow did no one think of that? So it's called\ntaproot, and I don't",
    "start": "2421680",
    "end": "2429750"
  },
  {
    "text": "know why Greg called it that. Greg Maxwell, he's a\nguy with a big beard, who works on Bitcoin. He's super smart and stuff.",
    "start": "2429750",
    "end": "2437160"
  },
  {
    "text": "And it uses this pay to\ncontract hash construction. And it's the same equation,\nbut it took us a year",
    "start": "2437160",
    "end": "2442710"
  },
  {
    "text": "or two to figure out\nthat you could do this. So the motivation here is\npay to pubkey hash and pay",
    "start": "2442710",
    "end": "2450990"
  },
  {
    "start": "2444000",
    "end": "2547000"
  },
  {
    "text": "to script hash look different. You can tell just\nlooking at the output, these are totally\ndifferent output scripts.",
    "start": "2450990",
    "end": "2458223"
  },
  {
    "text": "One of them has\ngot a pubkey hash. One of them has\ngot a script hash. Different is bad. We don't want everything\nto look different.",
    "start": "2458223",
    "end": "2464310"
  },
  {
    "text": "Then, you can sort\nof sort things. You can try to differentiate,\ntry to track people's coins,",
    "start": "2464310",
    "end": "2469362"
  },
  {
    "text": "things like that. You want it to all look uniform,\nto make it more anonymous.",
    "start": "2469362",
    "end": "2475170"
  },
  {
    "text": "So one thing you could\ndo is just use pay to script for everything. You can put a pubkey single--",
    "start": "2475170",
    "end": "2480930"
  },
  {
    "text": "essentially, 1 of 1 multisig, or\njust pay to pubkey hash script",
    "start": "2480930",
    "end": "2487460"
  },
  {
    "text": "in pay to script hash. You wouldn't do that. You'd have that you'd have\nthe direct pay to pubkey put",
    "start": "2487460",
    "end": "2496330"
  },
  {
    "text": "into a script hash. So that like it looks\nlike a script hash, and then the script is\npublic key OP_CHECKSIG.",
    "start": "2496330",
    "end": "2503089"
  },
  {
    "text": "It's actually not\nreally any overhead. I think you actually\nsave a byte or two.",
    "start": "2503090",
    "end": "2509849"
  },
  {
    "text": "Nobody does that. You could. That might solve like 80% of\nwhat this is trying to solve.",
    "start": "2509850",
    "end": "2517072"
  },
  {
    "text": "But it's kind of boring and\ndoesn't use cool math, so anyway. OK, the other observation is\nthat in most cases scripts--",
    "start": "2517072",
    "end": "2526930"
  },
  {
    "text": "you have these sort of scripts. And there's a hidden option,\nwhich is, or everyone signs.",
    "start": "2526930",
    "end": "2532780"
  },
  {
    "text": "So in the case of 2\nof 50 multisig-- well, if all 50 people sign,\nthat's OK, right?",
    "start": "2532780",
    "end": "2538750"
  },
  {
    "text": "That's no worse. So if it's 25 of 50 multisig,\nif all 50 people happen to sign, sure, that's no loss\nof security there.",
    "start": "2538750",
    "end": "2548109"
  },
  {
    "text": "The idea is you use\nthis pay to script, pay to contract\nhash construction",
    "start": "2548110",
    "end": "2553120"
  },
  {
    "text": "to merge pay to pubkey hash\nand pay to script hash, so that a single\noutput can do both.",
    "start": "2553120",
    "end": "2558565"
  },
  {
    "text": "The idea is you make a key,\nJ, and J is an actual key. Like, you have the\nprivate key for it.",
    "start": "2558565",
    "end": "2564160"
  },
  {
    "text": "It's a regular old pubkey. And you have a script z. And instead of sending\neither to the script",
    "start": "2564160",
    "end": "2571680"
  },
  {
    "text": "z, in a pay to script\nhash construction, or to hash this key J\ninside the pubkey hash,",
    "start": "2571680",
    "end": "2578050"
  },
  {
    "text": "you say, I'm going\nto compute key C-- which is J plus the hash of my\nscript, concatenated with J,",
    "start": "2578050",
    "end": "2585190"
  },
  {
    "text": "times G. So this is the same\nas the thing I just did with the OP_RETURN\nand 0 bytes, right?",
    "start": "2585190",
    "end": "2593160"
  },
  {
    "text": "And then I send money to it.  And then, what do I do?",
    "start": "2593160",
    "end": "2598960"
  },
  {
    "text": "I've sent money to this C point. Can I sign with C's private key?",
    "start": "2598960",
    "end": "2605780"
  },
  {
    "start": "2605780",
    "end": "2611270"
  },
  {
    "text": "I know I know a little j. That's a regular key. Do I know a little c?",
    "start": "2611270",
    "end": "2616470"
  },
  {
    "text": " Sure, yeah.",
    "start": "2616470",
    "end": "2624660"
  },
  {
    "text": "I know that little c is just the\nj private key plus this hash. ",
    "start": "2624660",
    "end": "2633820"
  },
  {
    "text": "So if I want to treat it as\na pay to pubkey hash, I just sign with little c.",
    "start": "2633820",
    "end": "2638880"
  },
  {
    "text": "I sign my transaction\nand I'm good. Nobody has to know\nthat I did this. However, if I want to make\nit into pay to script hash,",
    "start": "2638880",
    "end": "2646780"
  },
  {
    "text": "I reveal the script\nz and the subkey J.",
    "start": "2646780",
    "end": "2653800"
  },
  {
    "text": "And then I put some arguments\non, and then run the script. So if I don't want to show\nthat there was a script,",
    "start": "2653800",
    "end": "2661210"
  },
  {
    "text": "I don't have to. I just sign with this. Private key's that.",
    "start": "2661210",
    "end": "2666770"
  },
  {
    "text": "Nobody knows that there\nwas a script at all. So if everyone's using this,\n80% of the time that's what",
    "start": "2666770",
    "end": "2673010"
  },
  {
    "text": "happens. Maybe there was a\nscript in there. Maybe there wasn't. Can't tell, right?",
    "start": "2673010",
    "end": "2678530"
  },
  {
    "text": "However, if I want to reveal,\nhey, actually this time, I'm using the script. So I revealed J and z.",
    "start": "2678530",
    "end": "2686030"
  },
  {
    "text": "Everyone computes--\nOK, well, if I add J to the hash of z and J\ntimes g, does that equal",
    "start": "2686030",
    "end": "2694020"
  },
  {
    "text": "c-- the key that is in\nthe output script itself? And if it does, cool,\nthat was a valid proof",
    "start": "2694020",
    "end": "2699990"
  },
  {
    "text": "that you actually\ncommitted to z. And now I run the script z.",
    "start": "2699990",
    "end": "2706480"
  },
  {
    "text": "Any questions about this? Make sense? So it's actually pretty simple. It follows directly from the\nproofs, from the contract hash.",
    "start": "2706480",
    "end": "2715170"
  },
  {
    "text": "And it's really cool because-- oh, P. I thought I\nwas doing C. Oops.",
    "start": "2715170",
    "end": "2722180"
  },
  {
    "text": "Anyway. So what you can\ndo is you can make the sum of everyone's keys. And so in Schnoor\nsignatures we can do this,",
    "start": "2722180",
    "end": "2729070"
  },
  {
    "text": "and we can sign\nwithout revealing each other's private keys. So you can say,\nOK, what I'm going",
    "start": "2729070",
    "end": "2734470"
  },
  {
    "text": "to do is J is the sum of,\nlike, 50 different pubkeys.",
    "start": "2734470",
    "end": "2740560"
  },
  {
    "text": "And then z is that Merkle\ntree of 2 of 50 signatures.",
    "start": "2740560",
    "end": "2747880"
  },
  {
    "text": "So if I want to use 2\nof 50, I have to reveal, and then I have to do the proof. But if I can get all 50\nof 50 people to sign,",
    "start": "2747880",
    "end": "2755130"
  },
  {
    "text": "they can produce a signature\nwith private key little C. So when everyone's\ncooperating, you",
    "start": "2755130",
    "end": "2762560"
  },
  {
    "text": "don't even see that there\nwas a script involved. And you can do this\nSchnoor signatures.",
    "start": "2762560",
    "end": "2768440"
  },
  {
    "start": "2766000",
    "end": "2835000"
  },
  {
    "text": "You cannot do this with ECDSA. So probably this would\nbe put into Bitcoin",
    "start": "2768440",
    "end": "2776000"
  },
  {
    "text": "alongside a Schnoor signature\nkind of construction. This seems useful\nbecause in most",
    "start": "2776000",
    "end": "2781790"
  },
  {
    "text": "cases, most smart\ncontracts, most multisig does have sort of an\nall-participants-sign clause.",
    "start": "2781790",
    "end": "2787610"
  },
  {
    "text": "Even if we don't\ncode it in right now, it's generally the case. Like, 2 of 3 multisig--\nwell, 3 of 3 is good.",
    "start": "2787610",
    "end": "2794299"
  },
  {
    "text": "And if you do 3 of 3,\nhey, you don't even see that there was 2 of 3. And so that preserves privacy.",
    "start": "2794300",
    "end": "2800329"
  },
  {
    "text": "It saves space. And most of the time all the\nparticipants can be online.",
    "start": "2800330",
    "end": "2807109"
  },
  {
    "text": "So that's the same basic\nidea as in lightning. If everyone's co-operative,\nyou don't even",
    "start": "2807110",
    "end": "2813165"
  },
  {
    "text": "see that there was\na lightning channel. You just together broadcast\na transaction with just 2",
    "start": "2813165",
    "end": "2818750"
  },
  {
    "text": "of 2 multisig. But in lightning, you do see\nthat there was 2 of 2 multisig. So you can sort\nof see, oh, it was",
    "start": "2818750",
    "end": "2824329"
  },
  {
    "text": "either a channel or a multisig. But in this kind\nof construction, you wouldn't even show that.",
    "start": "2824330",
    "end": "2829350"
  },
  {
    "text": "You'd say, OK, this is\nactually 2 of 2 multisig, but we can merge them. ",
    "start": "2829350",
    "end": "2836520"
  },
  {
    "text": "Oh, other weird trick-- you can make a public\nkey, and prove that there",
    "start": "2836520",
    "end": "2842130"
  },
  {
    "text": "is no known private key. So what if I only\nwant this script z,",
    "start": "2842130",
    "end": "2849240"
  },
  {
    "text": "and there is no set\nof everyone signing? I don't want that\nto be a requirement.",
    "start": "2849240",
    "end": "2854430"
  },
  {
    "text": "What if I only want\nthe script hash? I can do that. Interactively, I can\nuse someone else's J.",
    "start": "2854430",
    "end": "2861930"
  },
  {
    "text": "If I'm sending you a script\nthat involves someone else, I say, hey, can you\ncome up with a key J?",
    "start": "2861930",
    "end": "2868200"
  },
  {
    "text": "I'm going to compute\na key C, that's J plus the hash of the\nscript comma J times G.",
    "start": "2868200",
    "end": "2875210"
  },
  {
    "text": "And then I can prove that\nto you after the fact. And you can say, OK,\nwell, I know it's my key. So interactive, I can show\nthat it's someone else's key.",
    "start": "2875210",
    "end": "2882600"
  },
  {
    "text": "Non-interactive, I\ncan just say, look, I know the pre-image of\nthe x-coordinate of J.",
    "start": "2882600",
    "end": "2889550"
  },
  {
    "text": "So basically, I can\nprove to you that there's no way I came up with\nthis point on the curve",
    "start": "2889550",
    "end": "2895370"
  },
  {
    "text": "in the normal multiply by G way. Because that sort of shows that\nI came up with the x-coordinate",
    "start": "2895370",
    "end": "2904190"
  },
  {
    "text": "by just hashing\na random number-- or a non-random number,\nif it's the hash of 0,",
    "start": "2904190",
    "end": "2909500"
  },
  {
    "text": "or if it's the hash of anything. The idea is I randomly\npicked an x-coordinate",
    "start": "2909500",
    "end": "2915530"
  },
  {
    "text": "on this curve, figured out\nwhat the y-coordinate was, turned that into\na point, and then used it in this construction.",
    "start": "2915530",
    "end": "2921920"
  },
  {
    "text": "If I do that, you\ncan be pretty sure that I don't know the\nprivate key for J, because I didn't compute\nit the right way.",
    "start": "2921920",
    "end": "2930040"
  },
  {
    "text": "Does that make sense? So you can do that. That's a way to then\nprove to other people",
    "start": "2930040",
    "end": "2938310"
  },
  {
    "text": "like there is no J. It's\na point on the curve, but it's a random\npoint on the curve. So there's no way\nI can sign with c.",
    "start": "2938310",
    "end": "2945640"
  },
  {
    "text": " I sent the pubkey c.",
    "start": "2945640",
    "end": "2951810"
  },
  {
    "text": "And I proved to you,\nlook, C is not a key that anyone can sign with. However, there is a point\nJ, and there's a script z,",
    "start": "2951810",
    "end": "2958799"
  },
  {
    "text": "and you can execute the script. So that's useful in\nmany cases, where you want to prove to\npeople that, look,",
    "start": "2958800",
    "end": "2965464"
  },
  {
    "text": "there is no key here. It's just a script. And then everyone will find\nout later when you spend it.",
    "start": "2965465",
    "end": "2971727"
  },
  {
    "text": "But they don't have to\nknow that there was no key. They just know that the\nscript got executed. So that's a nice sort of\npatch, where you can default.",
    "start": "2971727",
    "end": "2981640"
  },
  {
    "text": "If there's any use cases where\nin the current script hash you want that exact\nsame functionality",
    "start": "2981640",
    "end": "2987040"
  },
  {
    "text": "and you don't want\nthis new functionality, you can sort of get\nrid of it this way. ",
    "start": "2987040",
    "end": "2995070"
  },
  {
    "text": "AUDIENCE: So the\nidea of [INAUDIBLE] is that you are trying to\nmake your special transaction",
    "start": "2995070",
    "end": "3003950"
  },
  {
    "text": "scripts not stand\nout [INAUDIBLE].. The fear is that people will\nsee those and not put them",
    "start": "3003950",
    "end": "3010968"
  },
  {
    "text": "into blocks, or not\n[INAUDIBLE] them, or discriminate against them? TADGE DRYJA: Maybe a little. But it's more that--",
    "start": "3010968",
    "end": "3019309"
  },
  {
    "text": "let's say I have\nmy wallet software, and it always uses to\nP2WSH, P2SH, or something.",
    "start": "3019310",
    "end": "3024680"
  },
  {
    "text": "Then I can say, oh, I bet\nthis is the same person. I can try to track\nwho is spending them. AUDIENCE: [INAUDIBLE].",
    "start": "3024680",
    "end": "3030227"
  },
  {
    "text": "TADGE DRYJA: Yeah, a big\npart of it is privacy. Maybe they're discriminated\nagainst them like miners.",
    "start": "3030227",
    "end": "3036529"
  },
  {
    "text": "Probably, the miners don't care. But it's more like if\neveryone's using software that can create\nsimilar transactions,",
    "start": "3036530",
    "end": "3043650"
  },
  {
    "text": "then it becomes much harder\nto tell people apart, and it has more privacy\nfor the transactions.",
    "start": "3043650",
    "end": "3049100"
  },
  {
    "text": "AUDIENCE: Then this one,\nyou're putting in a script that can anybody can\npotentially execute it,",
    "start": "3049100",
    "end": "3057190"
  },
  {
    "text": "but they don't\nknow that they can?  TADGE DRYJA: They need\nto know both the script",
    "start": "3057190",
    "end": "3063090"
  },
  {
    "text": "and J, which is not\nobvious from C. C is the only thing you see on\nthe blockchain, in the output.",
    "start": "3063090",
    "end": "3069870"
  },
  {
    "text": "And so they just\nsaid, it's a key-- probably, someone\nknows the private key. Maybe there's some weird\nthing like this going on.",
    "start": "3069870",
    "end": "3077230"
  },
  {
    "text": "You don't have to\nuse this, right? And then, yeah, so they\nwon't know what J or z are.",
    "start": "3077230",
    "end": "3084051"
  },
  {
    "text": "AUDIENCE: Still\nyou're [INAUDIBLE].. TADGE DRYJA: Yeah. You can publicly publish\nit, if you want--",
    "start": "3084051",
    "end": "3092010"
  },
  {
    "text": "and tell everyone in\nthe world, hey, this C is actually this J\nplus this script z. They still can't spend it.",
    "start": "3092010",
    "end": "3098640"
  },
  {
    "text": "That can be public,\neven beforehand. And then they see, oh,\nthere's a script and a key.",
    "start": "3098640",
    "end": "3104310"
  },
  {
    "text": "And you can also, say,\nsign something, and prove that you know the private\nkey for J. So you can say,",
    "start": "3104310",
    "end": "3111070"
  },
  {
    "text": "I can prove that\nI'm not doing this-- there is no J kind of thing.",
    "start": "3111070",
    "end": "3117220"
  },
  {
    "text": "So you can prove all those\nthings, but you don't need to. For normal usage, you just\nsend a key C, spend from key C.",
    "start": "3117220",
    "end": "3124810"
  },
  {
    "text": "You're done. And if you want to\nspend from the script z, you just provide J, the script\n, and then execute the script.",
    "start": "3124810",
    "end": "3134020"
  },
  {
    "text": "So it's nice. And you might have had a script,\nand then you didn't use it, so you didn't reveal\nthat there was a script.",
    "start": "3134020",
    "end": "3140860"
  },
  {
    "text": " So it helps with privacy. It helps with efficiency\nin many cases,",
    "start": "3140860",
    "end": "3146940"
  },
  {
    "text": "because if you don't need to\nuse a script, you don't have to. So in a lot of cases you\nsay, all three of the 2 of 3",
    "start": "3146940",
    "end": "3156390"
  },
  {
    "text": "multisigs are on board, so let's\nuse C instead of the script z. ",
    "start": "3156390",
    "end": "3163090"
  },
  {
    "text": "So it's pretty cool. OK, so questions about this? Go to the next crazy thing.",
    "start": "3163090",
    "end": "3169460"
  },
  {
    "text": " Little notes about\ntaproot-- anyone",
    "start": "3169460",
    "end": "3174480"
  },
  {
    "text": "can make a key and\nscript and send to it. Only the pubkeys are needed. So if I want to send to\nsomething that's 3 of 3--",
    "start": "3174480",
    "end": "3183680"
  },
  {
    "text": "Alice, Bob, and Carol\nadded all together-- or 2 of the 3 of Alice,\nand Bob, and Carol--",
    "start": "3183680",
    "end": "3190010"
  },
  {
    "text": "I don't have to even ask\nAlice, Bob, and Carol. If I know they're\npublic keys, I can just compute all this myself,\nand send money to them.",
    "start": "3190010",
    "end": "3199600"
  },
  {
    "text": "And I can compute any\nconstruction I want. I can make it 1 of 3.",
    "start": "3199600",
    "end": "3204830"
  },
  {
    "text": "I know Alice, Bob, and\nCarol's public keys. And I can say, hey\nAlice, Bob, and Carol,",
    "start": "3204830",
    "end": "3210960"
  },
  {
    "text": "I'm giving you all money,\nand you can fight over it-- or you can cooperate. Like, any of you get it.",
    "start": "3210960",
    "end": "3216060"
  },
  {
    "text": "And so the idea is 1 of 3\nmultisig script goes into here, and then 3 of 3 is here.",
    "start": "3216060",
    "end": "3222250"
  },
  {
    "text": "So if you cooperate, you\nsave a little bit of space, and the fees are smaller. But if you don't cooperate, any\nof you can grab it immediately.",
    "start": "3222250",
    "end": "3230208"
  },
  {
    "text": "I don't know how useful that\nis, but you could do this. You don't need knowledge\nof any private keys",
    "start": "3230208",
    "end": "3235290"
  },
  {
    "text": "to construct C. Only\nthe pubkeys are needed.",
    "start": "3235290",
    "end": "3240520"
  },
  {
    "text": "That's actually really nice,\nbecause you're creating. So the same is currently\nthe case in Bitcoin.",
    "start": "3240520",
    "end": "3247770"
  },
  {
    "text": "If you're creating an\noutput script, like pay to pubkey hash,\npay to script hash, there's no private keys\ninvolved in that process.",
    "start": "3247770",
    "end": "3255059"
  },
  {
    "text": "You just tell everyone. OK, which differs, and is\nthe important distinction between the next cool\nthing, which is graftroot--",
    "start": "3255060",
    "end": "3263220"
  },
  {
    "text": "also Greg Maxwell, like a\nweek or two after taproot.",
    "start": "3263220",
    "end": "3268313"
  },
  {
    "text": "They're not actually\nthat similar. But it was like, wait-- people were sort of\ntalking about it. So the idea is allow\na lot of scripts",
    "start": "3268313",
    "end": "3275610"
  },
  {
    "text": "with a proof that goes up\nin size with 0 of 1-- aka",
    "start": "3275610",
    "end": "3280790"
  },
  {
    "text": "it doesn't go up in size. So the Merkle\nproofs-- the MAST-- go in log n.",
    "start": "3280790",
    "end": "3286140"
  },
  {
    "text": "So if you've got a\nmillion different scripts, you're going to take\nsomething like 20 hashes",
    "start": "3286140",
    "end": "3293599"
  },
  {
    "text": "or whatever to prove that. What's a proof that grows in\n0 of 1 of the number of things",
    "start": "3293600",
    "end": "3299553"
  },
  {
    "text": "being proven?  It's actually not--\nit's kind of obvious.",
    "start": "3299553",
    "end": "3306660"
  },
  {
    "text": "Like, I want to prove\nsomething, and the proof size",
    "start": "3306660",
    "end": "3313460"
  },
  {
    "text": "does not change regardless of\nhow many things I am proving. Well, it's just a signature.",
    "start": "3313460",
    "end": "3319339"
  },
  {
    "text": "If I make a million signatures,\nthey're all the same size. So I could, instead of\nmaking a Merkle route,",
    "start": "3319340",
    "end": "3324740"
  },
  {
    "text": "I just have all\nthese little leaves. And I just sign them all. And a leaf with a\nsignature is just as good.",
    "start": "3324740",
    "end": "3333720"
  },
  {
    "start": "3332000",
    "end": "3599000"
  },
  {
    "text": "So the idea is this\nis called graftroot. It's similar to taproot in that\nit's got sort of two execution",
    "start": "3333720",
    "end": "3342240"
  },
  {
    "text": "paths. You send to a key C, and there's\ntwo ways to spend from it.",
    "start": "3342240",
    "end": "3347310"
  },
  {
    "text": "So you can use the\nregular pay to pubkey hash mode, where you're\njust spending from C. You just sign with key\nC, your transaction--",
    "start": "3347310",
    "end": "3355650"
  },
  {
    "text": "same as in taproot, same as\nin regular Bitcoin right now. That's the easy one. The script version\nis I show a script s,",
    "start": "3355650",
    "end": "3364080"
  },
  {
    "text": "and a signature from\nkey C on the message s, and then I\nexecute that script.",
    "start": "3364080",
    "end": "3372530"
  },
  {
    "text": "So this is kind of cool, right? You say, look, I'm sending\nyou a key, and either that key",
    "start": "3372530",
    "end": "3378610"
  },
  {
    "text": "itself signs or that\nkey endorses a script to be executed.",
    "start": "3378610",
    "end": "3386369"
  },
  {
    "text": "And I can make as many\nof these as I want. So if I want 1,000\ndifferent scripts,",
    "start": "3386370",
    "end": "3392900"
  },
  {
    "text": "it's not like I have to prove\ninclusion in the three-- that's going to be height 22,\nor height 12, or whatever--",
    "start": "3392900",
    "end": "3399260"
  },
  {
    "text": "I just have a signature,\nsaying, OK, key C signed this to a 50 multisig.",
    "start": "3399260",
    "end": "3404900"
  },
  {
    "text": "Key C also signed the\nother two of 50 multisig. So the one that\nI'm actually using,",
    "start": "3404900",
    "end": "3411770"
  },
  {
    "text": "I just provide the proof. The proof of inclusion\nis just a signature. Questions about this?",
    "start": "3411770",
    "end": "3417700"
  },
  {
    "text": "Makes sense? Kind of weird?  It works. ",
    "start": "3417700",
    "end": "3426990"
  },
  {
    "text": "The real problem is there\nis this key C, right? So there's this sort of root key\nthat controls the whole thing.",
    "start": "3426990",
    "end": "3438700"
  },
  {
    "text": "The idea is key C endorses\nall the different leaves. So in the case of\nMAST you've got,",
    "start": "3438700",
    "end": "3445830"
  },
  {
    "text": "let's say, four different\nscripts that can execute. All four of those are committed\nto by the Merkle root.",
    "start": "3445830",
    "end": "3453180"
  },
  {
    "text": "In the case of\ngraftroot, let's say you have four different scripts. C signs all four of\nthose different scripts.",
    "start": "3453180",
    "end": "3460080"
  },
  {
    "text": "The thing is, C can\nsign 10 scripts. C has got total control\nover this output. Whereas before,\nin the MAST idea,",
    "start": "3460080",
    "end": "3469860"
  },
  {
    "text": "it can be different people. It could be Alice and Bob, Carol\nand Dave, Edna and Gertrude--",
    "start": "3469860",
    "end": "3476310"
  },
  {
    "text": "I don't know. And they might not be friends. No single entity there\nhas full control.",
    "start": "3476310",
    "end": "3482080"
  },
  {
    "text": "So the idea of\nthis is, well, you can combine a whole\nbunch of people.",
    "start": "3482080",
    "end": "3487109"
  },
  {
    "text": "The key C is\nessentially everyone, and they all have to sign off on\nall the different scripts that",
    "start": "3487110",
    "end": "3493380"
  },
  {
    "text": "could happen, and\nthen distribute those signatures on those\nscripts, which are proofs.",
    "start": "3493380",
    "end": "3502070"
  },
  {
    "text": "OK, basic idea make sense? This one's a little weirder.",
    "start": "3502070",
    "end": "3508420"
  },
  {
    "start": "3508420",
    "end": "3513740"
  },
  {
    "text": "In this one there is a way to\nprove that there is no key C.",
    "start": "3513740",
    "end": "3520280"
  },
  {
    "text": "So that's to sort of\nsay, look, it's only going to be this\nscript, and no one's",
    "start": "3520280",
    "end": "3525530"
  },
  {
    "text": "going to sign in the normal\njust the key signs method. There's also a way\nto do that here.",
    "start": "3525530",
    "end": "3532370"
  },
  {
    "text": "It's much less useful, though,\nbecause what you essentially do is you start with your\nscript, and then you",
    "start": "3532370",
    "end": "3539800"
  },
  {
    "text": "compute a signature on it-- but you also prove that\nthere was no private key that",
    "start": "3539800",
    "end": "3545860"
  },
  {
    "text": "made the signature. You have time. It's actually really fun. What you do is--",
    "start": "3545860",
    "end": "3552789"
  },
  {
    "text": "normally you say, OK, S equals\nk minus the hash of my message",
    "start": "3552790",
    "end": "3560090"
  },
  {
    "text": "and R times point a. What if I want to prove\nto you that there is no a?",
    "start": "3560090",
    "end": "3566545"
  },
  {
    "text": " SG equals R minus the hash\nof message R times pubkey A.",
    "start": "3566545",
    "end": "3576930"
  },
  {
    "text": "I want to prove that I do\nnot know that private key, and nobody knows it. ",
    "start": "3576930",
    "end": "3583065"
  },
  {
    "text": "Actually, I have to both. I say, OK, I know the\npre-image of the x-coordinate.",
    "start": "3583065",
    "end": "3591960"
  },
  {
    "text": "Same with R. Wait,\ncan I do this?",
    "start": "3591960",
    "end": "3598140"
  },
  {
    "text": "I forget how this\nis going to work. Anyway, basically what I do is\nI compute A public key randomly.",
    "start": "3598140",
    "end": "3605050"
  },
  {
    "text": "Or no, I first get the\nmessage I want to sign. I make a random R, and I\nshow that it's random--",
    "start": "3605050",
    "end": "3613150"
  },
  {
    "text": "I know the pre-image of its\ncoordinates, or something. I can prove that I\ndidn't construct this.",
    "start": "3613150",
    "end": "3618220"
  },
  {
    "text": "I don't know the private key. And then I solve for\nA and S, essentially.",
    "start": "3618220",
    "end": "3626400"
  },
  {
    "text": "So I can show, look,\nI've got a signature, but I can prove\nthat no one signed. ",
    "start": "3626400",
    "end": "3633110"
  },
  {
    "text": "I think I make a\nrandom s, and then I solve for big A. I make a random\ns, multiply by G, solve for A.",
    "start": "3633110",
    "end": "3645560"
  },
  {
    "text": "So A divided by hash of m, R--",
    "start": "3645560",
    "end": "3651410"
  },
  {
    "text": "wait, I can't do that, can I? Yeah, I can. This is [INAUDIBLE.]\nEquals R minus SG.",
    "start": "3651410",
    "end": "3667160"
  },
  {
    "text": "I come up with a random\nR, put it in here, come up with the message I want\nto sign, and then solve for A.",
    "start": "3667160",
    "end": "3677070"
  },
  {
    "text": "So I can do that,\nand I can prove that there was no\nreal A, because",
    "start": "3677070",
    "end": "3685450"
  },
  {
    "text": "of the way I constructed it. I know weird things\nabout R and A. And so I can show that this\nis not a real signature.",
    "start": "3685450",
    "end": "3694137"
  },
  {
    "text": "However, in this case,\nit's not that useful. In the case of\ntaproot, it's useful, because I might want to\nprove to people, look,",
    "start": "3694137",
    "end": "3699447"
  },
  {
    "text": "this is just a script. There is no key. In this case, I\ncan still do that.",
    "start": "3699447",
    "end": "3704984"
  },
  {
    "text": "I can say, there's\njust a script. There is no key. But then I can only do it once.",
    "start": "3704985",
    "end": "3713970"
  },
  {
    "text": "The whole idea of\ngraftroot is I can have a million\ndifferent scripts, that are all going into one key.",
    "start": "3713970",
    "end": "3720369"
  },
  {
    "text": "OK, so the problem is the root\nkey must sign every script. And now you need to use private\nkeys to create an address.",
    "start": "3720370",
    "end": "3727910"
  },
  {
    "text": "That's not great, right? It's maybe OK, but you\nhaven't had to do that before.",
    "start": "3727910",
    "end": "3736920"
  },
  {
    "text": "So now we have to sign\noff on every script that we're endorsing, in\norder to compute an address.",
    "start": "3736920",
    "end": "3743160"
  },
  {
    "text": "You can do this after\nthe fact, though. So that's kind of the\ninteresting thing about this, is you can say, OK, I'm\nsending the key C-- which",
    "start": "3743160",
    "end": "3749910"
  },
  {
    "text": "is this root key, that's\nall 50 participants. And then after the\nfact-- after it's gone been confirmed in\nthe blockchain-- those 50",
    "start": "3749910",
    "end": "3757170"
  },
  {
    "text": "participants can say, actually,\nyou know what, 2 of 50 is good. We're not suspending\nthe money right now.",
    "start": "3757170",
    "end": "3763560"
  },
  {
    "text": "But we're all agreeing\nthat, yeah, any two of us can spend this money later. And so they all get together,\nand all 50 sign with the root",
    "start": "3763560",
    "end": "3770940"
  },
  {
    "text": "key C all the different\nscripts-- those 1,225 scripts--",
    "start": "3770940",
    "end": "3776040"
  },
  {
    "text": "and then hand those\nsignatures out to the respective\npeople who would be",
    "start": "3776040",
    "end": "3781530"
  },
  {
    "text": "interested in that signature. So, oh, Alice and Bob, if\nyou want to spend the money, we all made a signature\nendorsing your 2 of 2,",
    "start": "3781530",
    "end": "3788170"
  },
  {
    "text": "2 of 50-- your two keys. And Bob and Carol, if you\ntwo want to spend the money, we've made a script that's\nendorsed by us saying,",
    "start": "3788170",
    "end": "3797160"
  },
  {
    "text": "your two keys can spend it. It's really cool. The overhead is one signature. So you can have that like\n100 trillion different--",
    "start": "3797160",
    "end": "3805320"
  },
  {
    "text": "50 choose 25, which\nis 100 trillion. Well, you've got to\nsign 100 trillion times,",
    "start": "3805320",
    "end": "3810360"
  },
  {
    "text": "but when you spend\nfrom it, it's small. It's an extra 33\nbytes of overhead.",
    "start": "3810360",
    "end": "3817130"
  },
  {
    "text": "Yeah, the overhead\nis just a signature. So you say, OK, here's key C.\nHere's a signature from it. Here's the script, to endorse\nthe script being executed.",
    "start": "3817130",
    "end": "3824019"
  },
  {
    "text": "It's not actually 64 bytes. You can get the\noverhead into 33 bytes, because you can aggregate the\nS values of the signature.",
    "start": "3824020",
    "end": "3833609"
  },
  {
    "text": "I'll talk about\nthis on Wednesday. I don't think I actually\ncame up with this, but Greg cites me\non it, and it's",
    "start": "3833610",
    "end": "3840060"
  },
  {
    "text": "like, I guess no\none thought of this. But there's a non-interactive\npartial aggregation",
    "start": "3840060",
    "end": "3845849"
  },
  {
    "text": "of these things,\nwhich I was really hoping would get\ninto Bitcoin itself,",
    "start": "3845850",
    "end": "3850950"
  },
  {
    "text": "but I think it's too slow. But in this case it's not that\nslow, so people are like, yeah, we'll use it here.",
    "start": "3850950",
    "end": "3856829"
  },
  {
    "text": "So this is kind of cool,\nbecause it's simple. It's just more scripts\ncan be added any time.",
    "start": "3856830",
    "end": "3863220"
  },
  {
    "text": "It's all one scaling. So if you have it a\nmillion different scripts, proving one of them takes 32\nbytes, or 33, or something.",
    "start": "3863220",
    "end": "3870540"
  },
  {
    "text": "C can be a threshold signature\nof many different parties. The signature can be aggregated\nwithin the transaction.",
    "start": "3870540",
    "end": "3876900"
  },
  {
    "text": "The downside is this interactive\nsetup, where you can't just take Alice, and Bob,\nand Carol's key,",
    "start": "3876900",
    "end": "3883530"
  },
  {
    "text": "and send to a graftroot\n2 of 3 multisig. Alice, and Bob, and Carol\nneed to sign something.",
    "start": "3883530",
    "end": "3890430"
  },
  {
    "text": "In some cases\nthat's no big deal. In some cases, you're connected\nto them over the internet, and all the participants\nare cooperating.",
    "start": "3890430",
    "end": "3897300"
  },
  {
    "text": "Sure, we'll sign. We'll create addresses. Or we'll pre-sign all sorts of\ndifferent addresses beforehand.",
    "start": "3897300",
    "end": "3904280"
  },
  {
    "text": "Doable, but sometimes you don't\nwant this interactive setup. Sometimes I want\nto be able to send to participants of my choosing,\nwithout their cooperation.",
    "start": "3904280",
    "end": "3914500"
  },
  {
    "text": "Really, usually for\nsending people money, they're OK with it, right? But sometimes you don't\nwant them to be online.",
    "start": "3914500",
    "end": "3922869"
  },
  {
    "text": "So put this all together. The goal for this, and I think\nthe way it's going to work",
    "start": "3922870",
    "end": "3930130"
  },
  {
    "text": "in Bitcoin-- but this\nis still research-- you have a unified\noutput script.",
    "start": "3930130",
    "end": "3935540"
  },
  {
    "text": "So let's say it's a\ntemplated with OP_5. And you say, OK, OP_5, pubkey.",
    "start": "3935540",
    "end": "3943510"
  },
  {
    "text": "Now, when I want to spend to\nit, I have a bunch of options. To spend, I can just put\na signature on the stack.",
    "start": "3943510",
    "end": "3949680"
  },
  {
    "text": "And then the program says,\noh, there's a signature. Let me check if the signature\nmatches the public key--",
    "start": "3949680",
    "end": "3957650"
  },
  {
    "text": "you know, this pubkey. And if it does, cool,\nthe money moves. That's pay to pubkey hash\nmode, except it's not hashed.",
    "start": "3957650",
    "end": "3965460"
  },
  {
    "text": "Another thing I could do\nis provide a point J-- a script-- and a series of\narguments for the script.",
    "start": "3965460",
    "end": "3973700"
  },
  {
    "text": "And that's taproot. I verify that J plus the hash\nof J in the script times G",
    "start": "3973700",
    "end": "3983299"
  },
  {
    "text": "is equal to that pubkey, and\nthen I execute that script. Another way to do it\nis if I've got this--",
    "start": "3983300",
    "end": "3989829"
  },
  {
    "text": "I've got C, which\nis also just a point and a signature on the script-- and then a script, and a bunch\nof arguments, then I say,",
    "start": "3989830",
    "end": "3996640"
  },
  {
    "text": "oh, this is graftroot. I'll verify this\nsignature on this script,",
    "start": "3996640",
    "end": "4003030"
  },
  {
    "text": "and then execute\nwith these arguments. So it would be cool if\nyou could do it just based",
    "start": "4003030",
    "end": "4010060"
  },
  {
    "text": "on the number of items pushed. But you might want to put\nlike a flag or something here,",
    "start": "4010060",
    "end": "4016000"
  },
  {
    "text": "to distinguish\nbetween these two. And with this, if\nthere's just one element, you can just quickly say,\nOK, it's pay to pubkey.",
    "start": "4016000",
    "end": "4022329"
  },
  {
    "text": "But to distinguish\nbetween these two there might be weird\nedge cases, where it's like, well,\none of the arguments could also look like a\nscript, and annoying things.",
    "start": "4022330",
    "end": "4029530"
  },
  {
    "text": "So you might put some, like,\nflag byte But anyway, it's kind of nice, in that when\nyou send to an output,",
    "start": "4029530",
    "end": "4037190"
  },
  {
    "text": "you send to an address, all\nthe addresses look the same. They just look like\npublic keys, but they",
    "start": "4037190",
    "end": "4043160"
  },
  {
    "text": "could be any of these\nthings, and you only find out after the fact. ",
    "start": "4043160",
    "end": "4050500"
  },
  {
    "text": "And not only that--\nyou could have the same key have a taproot\nand also have a graftroot.",
    "start": "4050500",
    "end": "4057790"
  },
  {
    "text": " So there could be an address. And I've gotten my wallet.",
    "start": "4057790",
    "end": "4062882"
  },
  {
    "text": "Well, there's three different\nways I can spend this. I can spend this with everyone--\nall 50 people-- signing.",
    "start": "4062883",
    "end": "4070270"
  },
  {
    "text": "Or I can spend it\nwith a single script that's been endorsed this\nway, that's got priority.",
    "start": "4070270",
    "end": "4076810"
  },
  {
    "text": "And then I can also\nspend it with one of the millions of scripts that\nhave been endorsed this way.",
    "start": "4076810",
    "end": "4083200"
  },
  {
    "text": "So I can use all three. This is a little\nbit more efficient, because you're just revealing\nthe script and a point.",
    "start": "4083200",
    "end": "4089080"
  },
  {
    "text": "This one, you have to reveal. Oh no, wait, sorry,\nthis is wrong.",
    "start": "4089080",
    "end": "4094170"
  },
  {
    "text": "There's no C. You already\nknow C. It's still a little more efficient. ",
    "start": "4094170",
    "end": "4101868"
  },
  {
    "text": "Yeah, there's no C there. You already know C. You just\nput the signature on the script. Yeah, OK, so that's [INAUDIBLE]",
    "start": "4101868",
    "end": "4110330"
  },
  {
    "text": "OK, so this is\ngraftroot, taproot. And then, also, part of\nthe script can be masked.",
    "start": "4110330",
    "end": "4115568"
  },
  {
    "text": "You can have a masked OP code. You can combine all these\nthings in crazy ways, and have like really\npowerful scripting that way.",
    "start": "4115569",
    "end": "4122710"
  },
  {
    "text": "So when this stuff was\nproposed, the argument was, hey, I don't want to\nspend to a public key.",
    "start": "4122710",
    "end": "4130479"
  },
  {
    "text": "I want to spend to\na public key hash. Because quantum\ncomputers are coming. And when the quantum computers\ncome, if you know my pubkey,",
    "start": "4130479",
    "end": "4138790"
  },
  {
    "text": "you can just calculate\nmy private key, and take all my money. But if you only know\nmy public key hash,",
    "start": "4138790",
    "end": "4144850"
  },
  {
    "text": "quantum computer\ndoesn't help you there. You're not going to be able to\ncompute the pre-image of a hash",
    "start": "4144850",
    "end": "4150818"
  },
  {
    "text": "with a quantum computer. ",
    "start": "4150819",
    "end": "4156750"
  },
  {
    "text": "All of those\nstatements are true, except in practice it's dumb.",
    "start": "4156750",
    "end": "4163318"
  },
  {
    "text": "Because if there's a\nquantum computer that can compute your private\nkey from your public key,",
    "start": "4163319",
    "end": "4170970"
  },
  {
    "text": "the only time\nusing pubkey hashes will help you is if somehow\nthat quantum computer takes a really long time to\ncompute your private key.",
    "start": "4170970",
    "end": "4180000"
  },
  {
    "text": "Because if it only takes\nthem a minute to compute it, well, you have to reveal your\npublic key to spend your money.",
    "start": "4180000",
    "end": "4187439"
  },
  {
    "text": "And then the attacker, who has\nthis nifty quantum computer, can just say, oh,\nthat's his public key.",
    "start": "4187439",
    "end": "4193729"
  },
  {
    "text": "I just saw it. And he signed. And using his public key, I\njust compute his private key, sign a different message,\nand broadcast it.",
    "start": "4193729",
    "end": "4200659"
  },
  {
    "text": "And maybe I attach a higher fee. Because I don't care,\nit's not my money. And the miners are\nlike, well, there's",
    "start": "4200660",
    "end": "4206563"
  },
  {
    "text": "two different transactions-- one sending over here,\none sending over here. This one has a much higher fee. I'll use this one.",
    "start": "4206563",
    "end": "4212050"
  },
  {
    "text": "And the attacker with\nthe quantum computer still takes all your money. They can't take it at rest.",
    "start": "4212050",
    "end": "4217280"
  },
  {
    "text": "They have to wait for you to\ntry to spend it and take it. But you could say,\nOK, well actually,",
    "start": "4217280",
    "end": "4223310"
  },
  {
    "text": "I'm doing OP_5, pubkey hash. And then for this, I have\nto reveal pubkey signature.",
    "start": "4223310",
    "end": "4229130"
  },
  {
    "text": "For this, I reveal j\ncomponent of pubkey script. For this, I reveal\nC and the sig.",
    "start": "4229130",
    "end": "4236120"
  },
  {
    "text": "But it's kind of ugly. It wastes space,\nand in most cases",
    "start": "4236120",
    "end": "4242100"
  },
  {
    "text": "doesn't provide a\nlot of protection. So there's hopefully better\nways to deal with this.",
    "start": "4242100",
    "end": "4250140"
  },
  {
    "text": "One thing that I have\nsort of been joking about, but would be kind of fun\nto put it into [INAUDIBLE]..",
    "start": "4250140",
    "end": "4255810"
  },
  {
    "text": "You can actually use\ntaproot to commit to a Lamport-like\nhash-based pubkey.",
    "start": "4255810",
    "end": "4263639"
  },
  {
    "text": "So in taproot this is\nactually quantum secure.",
    "start": "4263640",
    "end": "4273190"
  },
  {
    "text": "I hesitate to advertise this. But it is a commitment that the\nquantum computer cannot forge.",
    "start": "4273190",
    "end": "4282300"
  },
  {
    "start": "4282300",
    "end": "4288250"
  },
  {
    "text": "Where was I saying\nthe J equals hash of--",
    "start": "4288250",
    "end": "4296140"
  },
  {
    "text": "yeah, this thing is still a\nproblem for a quantum computer. I want to compute\na J such that J",
    "start": "4296140",
    "end": "4303070"
  },
  {
    "text": "equals this hash times G minus\nR. And J is in there as well.",
    "start": "4303070",
    "end": "4308770"
  },
  {
    "text": "Even with a quantum\ncomputer, maybe I can compute an arbitrary J and find its\ndiscrete lock-- you know,",
    "start": "4308770",
    "end": "4315159"
  },
  {
    "text": "find the private key-- but it's still not going\nto satisfy this equation. ",
    "start": "4315160",
    "end": "4321309"
  },
  {
    "text": "So I can't after the fact\nfind a script and a J",
    "start": "4321310",
    "end": "4327210"
  },
  {
    "text": "to compute this C. So that\nis safe, even if a quantum computer exists,\nbecause that's based",
    "start": "4327210",
    "end": "4333540"
  },
  {
    "text": "on the security\nthe hash function. So that's kind of an\ninteresting little tidbit-- like, hey, this taproot\nconstruction is hash based.",
    "start": "4333540",
    "end": "4343860"
  },
  {
    "text": "Quantum computer appears, and\nwe say, look, we no longer allow C. We no longer allow\nthe normal spend, where",
    "start": "4343860",
    "end": "4351900"
  },
  {
    "text": "you sign with key C,\nbecause signatures-- all this elliptic curve\nstuff, it's broken. However, we do\nallow you to prove",
    "start": "4351900",
    "end": "4359219"
  },
  {
    "text": "that there was a script\nz committed to in C.",
    "start": "4359220",
    "end": "4364440"
  },
  {
    "text": "And then maybe this script has\nlike a quantum-safe signature in it, and then we can use that.",
    "start": "4364440",
    "end": "4370710"
  },
  {
    "text": "What's nice about that is you\ncan start using it sooner, and without the overhead of\nall the extra space taken",
    "start": "4370710",
    "end": "4376020"
  },
  {
    "text": "by the quantum\nsignature, because it's sort of a backup plan. It's like, well,\nnormally I'm just signing with C, because I know\nthis is just my regular key--",
    "start": "4376020",
    "end": "4385350"
  },
  {
    "text": "and I do this. But worst-case scenario,\nif a quantum computer appears in 10 years, I've\ngot my other backup key here.",
    "start": "4385350",
    "end": "4393520"
  },
  {
    "text": "So that's kind of a cool thing. I don't know how useful\nit is in practice.",
    "start": "4393520",
    "end": "4399830"
  },
  {
    "text": "So yeah, you've got\nall these three things. The other thing about this is-- ",
    "start": "4399830",
    "end": "4407309"
  },
  {
    "text": "I don't know, big\nmultisig is one use case. It seems really\npowerful, and like, hey, I can make these millions\nof different scripts,",
    "start": "4407310",
    "end": "4414310"
  },
  {
    "text": "and Merkle trees of\ndifferent scripts, and taproot and graftroot. Not a ton of really good\nreal world use cases, though,",
    "start": "4414310",
    "end": "4423400"
  },
  {
    "text": "I think that would\nmotivate it a lot more. Because a lot of the hesitation\nfrom people working on Bitcoin",
    "start": "4423400",
    "end": "4428770"
  },
  {
    "text": "is like, OK, this\nis really cool, but what are we\ngoing to do with it?",
    "start": "4428770",
    "end": "4434530"
  },
  {
    "text": "As I'll talk about on\nWednesday, multisig itself is not the best motivation.",
    "start": "4434530",
    "end": "4440770"
  },
  {
    "text": "Because once we have\nSchnoor signatures and aggregate signatures there's\ndirect ways to do multisig,",
    "start": "4440770",
    "end": "4448810"
  },
  {
    "text": "that are actually more\nprivacy preserving and more space preserving. So we need to use cases.",
    "start": "4448810",
    "end": "4455120"
  },
  {
    "text": "And that's one of the\ndebates-- like, OK, what do we do with this? This is kind of cool. You can make all sorts\nof weird smart contracts,",
    "start": "4455120",
    "end": "4461140"
  },
  {
    "text": "but what are some\nreal-world use cases? There's also sort of argument-- OK, MAST versus\ngraftroot versus both.",
    "start": "4461140",
    "end": "4466870"
  },
  {
    "text": "Well, if you have graftroot, do\nyou really need MAST anymore? Instead of this big\nMerkle tree, you just",
    "start": "4466870",
    "end": "4474239"
  },
  {
    "text": "have the signatures\nendorsing the leaves. So it sort of seems\nbetter scalability there.",
    "start": "4474240",
    "end": "4479730"
  },
  {
    "text": "But graftroot is interactive,\nso maybe you still want MAST. Maybe you have both.",
    "start": "4479730",
    "end": "4485460"
  },
  {
    "text": "There's all sorts\nof debate on this. And so in practice that may mean\nthat since people are arguing",
    "start": "4485460",
    "end": "4491970"
  },
  {
    "text": "next year, the year after, it's\nhard to get everyone on board to do stuff.",
    "start": "4491970",
    "end": "4497580"
  },
  {
    "text": "There is code, though. Some things have code. A lot of it's sort of\nobvious enough, that like,",
    "start": "4497580",
    "end": "4504150"
  },
  {
    "text": "yeah, graftroot makes sense. Just have them sign. The taproot construction\nthere's code for.",
    "start": "4504150",
    "end": "4509250"
  },
  {
    "text": "But it's not all put together. There's no spec for\nall these things. So if people are interested in\nthis stuff, start coding it.",
    "start": "4509250",
    "end": "4515310"
  },
  {
    "text": "Start trying it out. Come up with cool\nuse cases, and maybe push for one thing\nor another to get in.",
    "start": "4515310",
    "end": "4521520"
  },
  {
    "text": "There's a full request open\nin Bitcoin right now for MAST. ",
    "start": "4521520",
    "end": "4527389"
  },
  {
    "text": "I know some people\nare really into it, and other people are\nlike, uh, I don't know.",
    "start": "4527390",
    "end": "4533150"
  },
  {
    "text": "Also, how to implement\nMAST exactly. So this is still\nresearch kind of level,",
    "start": "4533150",
    "end": "4538360"
  },
  {
    "text": "but it seems that\nthey're usable, and it may improve\nsmart-contract functionality.",
    "start": "4538360",
    "end": "4543570"
  },
  {
    "text": "So cool stuff here. Any questions about this? ",
    "start": "4543570",
    "end": "4551390"
  },
  {
    "text": "All right, cool. So I'll do office\nhours tomorrow at 4:00. We can talk about\nprojects and stuff.",
    "start": "4551390",
    "end": "4557659"
  },
  {
    "text": "And the next class\non Wednesday will be even more crazy\nelliptic curve stuff about aggregate signatures,\nSchnoor signatures,",
    "start": "4557660",
    "end": "4565070"
  },
  {
    "text": "multi signatures, threshold\nsignatures, things like that. And also, privacy--",
    "start": "4565070",
    "end": "4571192"
  },
  {
    "text": "I'm going to focus on\nthe signature part. I also put privacy and CoinJoin\nin there, which is related,",
    "start": "4571192",
    "end": "4576890"
  },
  {
    "text": "but might be squished\ntowards the end if I don't have a ton of time.",
    "start": "4576890",
    "end": "4582280"
  }
]