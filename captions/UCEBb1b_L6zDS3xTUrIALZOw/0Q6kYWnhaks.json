[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "Our first task is to work on the datapath\nlogic needed to execute ALU instructions with",
    "start": "459",
    "end": "5640"
  },
  {
    "text": "two register operands.",
    "start": "5640",
    "end": "8028"
  },
  {
    "text": "Each instruction requires the same processing\nsteps:",
    "start": "8029",
    "end": "10960"
  },
  {
    "text": "Fetch, where the 32-bit encoded instruction\nis read from main memory from the location",
    "start": "10960",
    "end": "15840"
  },
  {
    "text": "specified by the program counter (PC).",
    "start": "15840",
    "end": "18519"
  },
  {
    "text": "Decode, where the opcode field (instruction\nbits [31:26]) is used to determine the values",
    "start": "18519",
    "end": "25470"
  },
  {
    "text": "for the datapath control signals.",
    "start": "25470",
    "end": "27928"
  },
  {
    "text": "Read, where the contents of the registers\nspecified by the RA and RB fields (instruction",
    "start": "27929",
    "end": "34180"
  },
  {
    "text": "bits [20:16] and [15:11]) are read from the\nregister file.",
    "start": "34180",
    "end": "39329"
  },
  {
    "text": "Execute, where the requested operation is\nperformed on the two operand values.",
    "start": "39329",
    "end": "44100"
  },
  {
    "text": "We'll also need to compute the next value\nfor the PC.",
    "start": "44100",
    "end": "48010"
  },
  {
    "text": "And Write-back, where the result of the operation\nis written to the register file in the register",
    "start": "48010",
    "end": "53239"
  },
  {
    "text": "specified by the RC field (instruction bits\n[25:21]).",
    "start": "53240",
    "end": "58900"
  },
  {
    "text": "The system's clock signal is connected to\nthe register file and the PC register.",
    "start": "58900",
    "end": "63539"
  },
  {
    "text": "At the rising edge of the clock, the new values\ncomputed during the Execute phase are written",
    "start": "63539",
    "end": "68890"
  },
  {
    "text": "to these registers.",
    "start": "68890",
    "end": "71110"
  },
  {
    "text": "The rising clock edge thus marks the end of\nexecution for the current instruction and",
    "start": "71110",
    "end": "76110"
  },
  {
    "text": "the beginning of execution for the next instruction.",
    "start": "76110",
    "end": "79250"
  },
  {
    "text": "The period of the clock, i.e., the time between\nrising clock edges, needs to be long enough",
    "start": "79250",
    "end": "84090"
  },
  {
    "text": "to accommodate the cumulative propagation\ndelay of the logic that implements the 5 steps",
    "start": "84090",
    "end": "89938"
  },
  {
    "text": "described here.",
    "start": "89939",
    "end": "92280"
  },
  {
    "text": "Since one instruction is executed each clock\ncycle, the frequency of the clock tells us",
    "start": "92280",
    "end": "96850"
  },
  {
    "text": "the rate at which instructions are executed.",
    "start": "96850",
    "end": "99890"
  },
  {
    "text": "If the clock period was 10ns, the clock frequency\nwould be 100 MHz and our Beta would be executing",
    "start": "99890",
    "end": "106909"
  },
  {
    "text": "instructions at 100 MIPS!",
    "start": "106909",
    "end": "110289"
  },
  {
    "start": "110000",
    "end": "110000"
  },
  {
    "text": "Here's a sketch showing the hardware needed\nfor the Fetch and Decode steps.",
    "start": "110290",
    "end": "114820"
  },
  {
    "text": "The current value of the PC register is routed\nto main memory as the address of the instruction",
    "start": "114820",
    "end": "119841"
  },
  {
    "text": "to be fetched.",
    "start": "119841",
    "end": "121990"
  },
  {
    "text": "For ALU instructions, the address of the next\ninstruction is simply the address of the current",
    "start": "121990",
    "end": "126570"
  },
  {
    "text": "instruction plus 4.",
    "start": "126570",
    "end": "128450"
  },
  {
    "text": "There's an adder dedicated to performing the\n\"PC+4\" computation and that value is routed",
    "start": "128450",
    "end": "134110"
  },
  {
    "text": "back to be used as the next value of the PC.",
    "start": "134110",
    "end": "138110"
  },
  {
    "text": "We've also included a MUX used to select the\ninitial value for the PC when the RESET signal",
    "start": "138110",
    "end": "143770"
  },
  {
    "text": "is 1.",
    "start": "143770",
    "end": "145530"
  },
  {
    "text": "After the memory propagation delay, the instruction\nbits (ID[31:0]) are available and the processing",
    "start": "145530",
    "end": "152000"
  },
  {
    "text": "steps can begin.",
    "start": "152000",
    "end": "154300"
  },
  {
    "text": "Some of the instruction fields can be used\ndirectly as-is.",
    "start": "154300",
    "end": "157590"
  },
  {
    "text": "To determine the values for other control\nsignals, we'll need some logic that computes",
    "start": "157590",
    "end": "161720"
  },
  {
    "text": "their values from the bits of the opcode field.",
    "start": "161720",
    "end": "165230"
  },
  {
    "start": "165000",
    "end": "165000"
  },
  {
    "text": "Now let's fill in the datapath logic needed\nto execute ALU instructions with two register",
    "start": "165230",
    "end": "170610"
  },
  {
    "text": "operands.",
    "start": "170610",
    "end": "171900"
  },
  {
    "text": "The instruction bits for the 5-bit RA, RB\nand RC fields can be connected directly to",
    "start": "171900",
    "end": "177480"
  },
  {
    "text": "the appropriate address inputs of the register\nfile.",
    "start": "177480",
    "end": "180980"
  },
  {
    "text": "The RA and RB fields supply the addresses\nfor the two read ports and the RC field supplies",
    "start": "180980",
    "end": "186700"
  },
  {
    "text": "the address for the write port.",
    "start": "186700",
    "end": "189060"
  },
  {
    "text": "The outputs of the read data ports are routed\nto the inputs of the ALU to serve as the two",
    "start": "189060",
    "end": "193819"
  },
  {
    "text": "operands.",
    "start": "193820",
    "end": "195360"
  },
  {
    "text": "The ALUFN control signals tell the ALU what\noperation to perform.",
    "start": "195360",
    "end": "199980"
  },
  {
    "text": "These control signals are determined by the\ncontrol logic from the 6-bit opcode field.",
    "start": "199980",
    "end": "205050"
  },
  {
    "text": "For specificity, let's assume that the control\nlogic is implemented using a read-only memory",
    "start": "205050",
    "end": "211000"
  },
  {
    "text": "(ROM), where the opcode bits are used as the\nROM's address and the ROM's outputs are the",
    "start": "211000",
    "end": "216780"
  },
  {
    "text": "control signals.",
    "start": "216780",
    "end": "218450"
  },
  {
    "text": "Since there are 6 opcode bits, we'll need\n2^6 = 64 locations in the ROM.",
    "start": "218450",
    "end": "224760"
  },
  {
    "text": "We'll program the contents of the ROM to supply\nthe correct control signal values for each",
    "start": "224760",
    "end": "230180"
  },
  {
    "text": "of the 64 possible opcodes.",
    "start": "230180",
    "end": "234120"
  },
  {
    "text": "The output of the ALU is routed back to the\nwrite data port of the register file, to be",
    "start": "234120",
    "end": "239049"
  },
  {
    "text": "written into the RC register at the end of\nthe cycle.",
    "start": "239050",
    "end": "242890"
  },
  {
    "text": "We'll need another control signal, WERF (\"write-enable\nregister file\"), that should have the value",
    "start": "242890",
    "end": "248760"
  },
  {
    "text": "1 when we want to write into the RC register.",
    "start": "248760",
    "end": "252280"
  },
  {
    "text": "Let me introduce you to Werf, the 6.004 mascot,\nwho, of course, is named after her favorite",
    "start": "252280",
    "end": "257379"
  },
  {
    "text": "control signal, which she's constantly mentioning.",
    "start": "257379",
    "end": "260979"
  },
  {
    "text": "Let's follow the flow of data as we execute\nthe ALU instruction.",
    "start": "260979",
    "end": "265919"
  },
  {
    "text": "After the instruction has been fetched, supplying\nthe RA and RB instruction fields, the RA and",
    "start": "265919",
    "end": "271620"
  },
  {
    "text": "RB register values appear on the read data\nports of the register file.",
    "start": "271620",
    "end": "276820"
  },
  {
    "text": "The control logic has decoded the opcode bits\nand supplied the appropriate ALU function",
    "start": "276820",
    "end": "281900"
  },
  {
    "text": "code.",
    "start": "281900",
    "end": "282930"
  },
  {
    "text": "You can find a listing of the possible function\ncodes in the upper right-hand corner of the",
    "start": "282930",
    "end": "287860"
  },
  {
    "text": "Beta Diagram handout.",
    "start": "287860",
    "end": "289870"
  },
  {
    "text": "The result of the ALU's computation is sent\nback to the register file to be written into",
    "start": "289870",
    "end": "294490"
  },
  {
    "text": "the RC register.",
    "start": "294490",
    "end": "295830"
  },
  {
    "text": "Of course, we'll need to set WERF to 1 to\nenable the write.",
    "start": "295830",
    "end": "300020"
  },
  {
    "text": "5.oo Here we see one of the major advantages\nof a reduced-instruction set computer architecture:",
    "start": "300020",
    "end": "306229"
  },
  {
    "text": "the datapath logic required for execution\nis very straightforward!",
    "start": "306229",
    "end": "310889"
  },
  {
    "text": "The other form of ALU instructions uses a\nconstant as the second ALU operand.",
    "start": "310889",
    "end": "316240"
  },
  {
    "start": "311000",
    "end": "311000"
  },
  {
    "text": "The 32-bit operand is formed by sign-extending\nthe 16-bit two's complement constant stored",
    "start": "316240",
    "end": "321759"
  },
  {
    "text": "in the literal field (bits [15:0]) of the\ninstruction.",
    "start": "321759",
    "end": "326849"
  },
  {
    "text": "In order to select the sign-extended constant\nas the second operand, we added a MUX to the",
    "start": "326849",
    "end": "331949"
  },
  {
    "text": "datapath.",
    "start": "331949",
    "end": "333539"
  },
  {
    "text": "When its BSEL control signal is 0, the output\nof the register file is selected as the operand.",
    "start": "333539",
    "end": "339320"
  },
  {
    "text": "When BSEL is 1, the sign-extended constant\nis selected as the operand.",
    "start": "339320",
    "end": "344849"
  },
  {
    "text": "The rest of the datapath logic is the same\nas before.",
    "start": "344849",
    "end": "348949"
  },
  {
    "text": "Note that no logic gates are needed to perform\nsign-extension - it's all done with wiring!",
    "start": "348949",
    "end": "354860"
  },
  {
    "text": "To sign-extend a two's complement number,\nwe just need to replicate the high-order,",
    "start": "354860",
    "end": "359610"
  },
  {
    "text": "or sign, bit as many times as necessary.",
    "start": "359610",
    "end": "363288"
  },
  {
    "text": "You might find it useful to review the discussion\nof two's complement in Lecture 1 of Part 1",
    "start": "363289",
    "end": "367909"
  },
  {
    "text": "of the course.",
    "start": "367909",
    "end": "369460"
  },
  {
    "text": "So to form a 32-bit operand from a 16-bit\nconstant, we just replicate it's high-order",
    "start": "369460",
    "end": "375300"
  },
  {
    "text": "bit (ID[15]) sixteen times as we make the\nconnection to the BSEL MUX.",
    "start": "375300",
    "end": "382000"
  },
  {
    "text": "During execution of ALU-with-constant instructions,\nthe flow of data is much as it was before.",
    "start": "382000",
    "end": "388190"
  },
  {
    "text": "The one difference is that the control logic\nsets the BSEL control signal to 1, selecting",
    "start": "388190",
    "end": "393979"
  },
  {
    "text": "the sign-extended constant as the second ALU\noperand.",
    "start": "393979",
    "end": "398250"
  },
  {
    "text": "As before, the control logic generates the\nappropriate ALU function code and the output",
    "start": "398250",
    "end": "403350"
  },
  {
    "text": "of the ALU is routed to the register file\nto be written back to the RC register.",
    "start": "403350",
    "end": "409069"
  },
  {
    "text": "Amazingly, this datapath is sufficient to\nexecute most of the instructions in the Beta",
    "start": "409069",
    "end": "414139"
  },
  {
    "text": "ISA!",
    "start": "414139",
    "end": "415780"
  },
  {
    "text": "We just have the memory and branch instruction\nleft to implement.",
    "start": "415780",
    "end": "419490"
  },
  {
    "text": "That's our next task.",
    "start": "419490",
    "end": "420430"
  }
]