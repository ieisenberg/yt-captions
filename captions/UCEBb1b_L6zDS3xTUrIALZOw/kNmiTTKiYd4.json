[
  {
    "start": "0",
    "end": "5580"
  },
  {
    "text": "[MUSIC PLAYING]",
    "start": "5580",
    "end": "20180"
  },
  {
    "text": "PROFESSOR: Last time, we took a\nlook at an explicit control evaluator for Lisp, and that\nbridged the gap between all",
    "start": "20180",
    "end": "27280"
  },
  {
    "text": "these high-level languages\nlike Lisp and the query language and all of that stuff,\nbridged the gap between",
    "start": "27280",
    "end": "33329"
  },
  {
    "text": "that and a conventional\nregister machine. And in fact, you can think of\nthe explicit control evaluator",
    "start": "33330",
    "end": "40140"
  },
  {
    "text": "either as, say, the code for a\nLisp interpreter if you wanted to implement it in the assembly\nlanguage of some",
    "start": "40140",
    "end": "47680"
  },
  {
    "text": "conventional register transfer\nmachine, or, if you like, you can think of it as the microcode\nof some machine",
    "start": "47680",
    "end": "52770"
  },
  {
    "text": "that's going to be specially\ndesigned to run Lisp. In either case, what we're\ndoing is we're taking a",
    "start": "52770",
    "end": "58160"
  },
  {
    "text": "machine that speaks some\nlow-level language, and we're raising the machine to a\nhigh-level language like Lisp",
    "start": "58160",
    "end": "65250"
  },
  {
    "text": "by writing an interpreter. So for instance, here,\nconceptually, is a special",
    "start": "65250",
    "end": "81160"
  },
  {
    "text": "purpose machine for computing\nfactorials. It takes in five and\nputs out 120.",
    "start": "81160",
    "end": "89000"
  },
  {
    "text": "And what this special purpose\nmachine is is actually a Lisp interpreter that's configured\nitself to run factorials,",
    "start": "89000",
    "end": "98409"
  },
  {
    "text": "because you fit into\nit a description of the factorial machine. So that's what an\ninterpreter is.",
    "start": "98410",
    "end": "103610"
  },
  {
    "text": "It configures itself to emulate\na machine whose description you read in.",
    "start": "103610",
    "end": "110120"
  },
  {
    "text": "Now, inside the Lisp\ninterpreter, what's that? Well, that might be your general\nregister language interpreter that configures\nitself to behave like a Lisp",
    "start": "110120",
    "end": "119500"
  },
  {
    "text": "interpreter, because you\nput in a whole bunch of instructions in register\nlanguage. This is the explicit\ncontrol evaluator.",
    "start": "119500",
    "end": "127070"
  },
  {
    "text": "And then it also has some sort\nof library, a library of primitive operators and Lisp\noperations and all sorts of things like that.",
    "start": "127070",
    "end": "132780"
  },
  {
    "text": "That's the general strategy\nof interpretation. And the point is, what we're\ndoing is we're writing an",
    "start": "132780",
    "end": "139420"
  },
  {
    "text": "interpreter to raise the machine\nto the level of the programs that we\nwant to write.",
    "start": "139420",
    "end": "145430"
  },
  {
    "text": "Well, there's another strategy,\na different one, which is compilation. Compilation's a little\nbit different.",
    "start": "145430",
    "end": "151090"
  },
  {
    "text": "Here--here we might have\nproduced a special purpose",
    "start": "151090",
    "end": "157720"
  },
  {
    "text": "machine for, for computing\nfactorials, starting with some",
    "start": "157720",
    "end": "164430"
  },
  {
    "text": "sort of machine that speaks\nregister language, except we're going to do a different\nstrategy. We take our factorial program.",
    "start": "164430",
    "end": "171680"
  },
  {
    "text": "We use that as the source\ncode into a compiler. What the compiler will do is\ntranslate that factorial",
    "start": "171680",
    "end": "177090"
  },
  {
    "text": "program into some register\nmachine language. And this will now be not the\nexplicit control evaluator for",
    "start": "177090",
    "end": "183110"
  },
  {
    "text": "Lisp, this will be some\nregister language for computing factorials. So this is the translation\nof that.",
    "start": "183110",
    "end": "190459"
  },
  {
    "text": "That will go into some sort of\nloader which will combine this code with code selected from the\nlibrary to do things like",
    "start": "190460",
    "end": "197520"
  },
  {
    "text": "primitive multiplication. And then we'll produce a load\nmodule which configures the",
    "start": "197520",
    "end": "203190"
  },
  {
    "text": "register language machine\nto be a special purpose factorial machine.",
    "start": "203190",
    "end": "208319"
  },
  {
    "text": "So that's a, that's a\ndifferent strategy. In interpretation, we're raising\nthe machine to the",
    "start": "208320",
    "end": "213740"
  },
  {
    "text": "level of our language,\nlike Lisp. In compilation, we're taking our\nprogram and lowering it to the language that's spoken\nby the machine.",
    "start": "213740",
    "end": "222040"
  },
  {
    "text": "Well, how do these two\nstrategies compare? The compiler can produce code\nthat will execute more",
    "start": "222040",
    "end": "228890"
  },
  {
    "text": "efficiently.  The essential reason for that is\nthat if you think about the",
    "start": "228890",
    "end": "236820"
  },
  {
    "text": "register operations that are\nrunning, the interpreter has",
    "start": "236820",
    "end": "242870"
  },
  {
    "text": "to produce register operations\nwhich, in principle, are going to be general enough to execute\nany Lisp procedure.",
    "start": "242870",
    "end": "250260"
  },
  {
    "text": "Whereas the compiler only has\nto worry about producing a special bunch of register\noperations for, for doing the",
    "start": "250260",
    "end": "256028"
  },
  {
    "text": "particular Lisp procedure\nthat you've compiled. Or another way to say that is\nthat the interpreter is a",
    "start": "256029",
    "end": "263340"
  },
  {
    "text": "general purpose simulator, that\nwhen you read in a Lisp procedure, then those can\nsimulate the program described",
    "start": "263340",
    "end": "269820"
  },
  {
    "text": "by that, by that procedure. So the interpreter is worrying\nabout making a general purpose simulator, whereas the compiler,\nin effect, is",
    "start": "269820",
    "end": "276170"
  },
  {
    "text": "configuring the thing to\nbe the machine that the interpreter would have\nbeen simulating. So the compiler can be faster.",
    "start": "276170",
    "end": "281340"
  },
  {
    "start": "281340",
    "end": "292830"
  },
  {
    "text": "On the other hand, the\ninterpreter is a nicer environment for debugging.",
    "start": "292830",
    "end": "299340"
  },
  {
    "text": "And the reason for that is that\nwe've got the source code actually there. We're interpreting it. That's what we're\nworking with.",
    "start": "299340",
    "end": "306009"
  },
  {
    "text": "And we also have the\nlibrary around. See, the interpreter--the\nlibrary sitting there is part of the interpreter.",
    "start": "306010",
    "end": "311139"
  },
  {
    "text": "The compiler only pulls out from\nthe library what it needs to run the program. So if you're in the middle of\ndebugging, and you might like",
    "start": "311140",
    "end": "318710"
  },
  {
    "text": "to write a little extra program\nto examine some run time data structure or to\nproduce some computation that",
    "start": "318710",
    "end": "324450"
  },
  {
    "text": "you didn't think of when you\nwrote the program, the interpreter can do that\nperfectly well, whereas the compiler can't.",
    "start": "324450",
    "end": "329670"
  },
  {
    "text": "So there are sort of dual,\ndual advantages. The compiler will produce code\nthat executes faster.",
    "start": "329670",
    "end": "334720"
  },
  {
    "text": "The interpreter is a better\nenvironment for debugging. And most Lisp systems end up\nhaving both, end up being",
    "start": "334720",
    "end": "343520"
  },
  {
    "text": "configured so you have an\ninterpreter that you use when you're developing your code. Then you can speed it\nup by compiling.",
    "start": "343520",
    "end": "349060"
  },
  {
    "text": "And very often, you can arrange\nthat compiled code and interpreted code can\ncall each other.",
    "start": "349060",
    "end": "354810"
  },
  {
    "text": "We'll see how to do that. That's not hard. ",
    "start": "354810",
    "end": "361040"
  },
  {
    "text": "In fact, the way we'll--  in the compiler we're going to\nmake, the way we'll arrange",
    "start": "361040",
    "end": "366580"
  },
  {
    "text": "for compiled coding and\ninterpreted code to call, to call each other, is that we'll\nhave the compiler use exactly",
    "start": "366580",
    "end": "372220"
  },
  {
    "text": "the same register conventions\nas the interpreter. ",
    "start": "372220",
    "end": "378680"
  },
  {
    "text": "Well, the idea of a compiler is\nvery much like the idea of",
    "start": "378680",
    "end": "383900"
  },
  {
    "text": "an interpreter or evaluator. It's the same thing. See, the evaluator walks over\nthe code and performs some",
    "start": "383900",
    "end": "391460"
  },
  {
    "text": "register operations. That's what we did yesterday.",
    "start": "391460",
    "end": "397040"
  },
  {
    "text": "Well, the compiler essentially\nwould like to walk over the code and produce the register\noperations that the evaluator",
    "start": "397040",
    "end": "404000"
  },
  {
    "text": "would have done were it\nevaluating the thing. And that gives us a model\nfor how to implement a",
    "start": "404000",
    "end": "412000"
  },
  {
    "text": "zeroth-order compiler, a\nvery bad compiler but",
    "start": "412000",
    "end": "417150"
  },
  {
    "text": "essentially a compiler. A model for doing that is you\njust take the evaluator, you run it over the code, but\ninstead of executing the",
    "start": "417150",
    "end": "424970"
  },
  {
    "text": "actual operations, you\njust save them away. And that's your compiled code. So let me give you an\nexample of that.",
    "start": "424970",
    "end": "430140"
  },
  {
    "text": " Suppose we're going to\ncompile--suppose we want to",
    "start": "430140",
    "end": "435770"
  },
  {
    "text": "compile the expression f of x. ",
    "start": "435770",
    "end": "445100"
  },
  {
    "text": "So let's assume that we've got\nf of x in the x register and something in the environment\nregister.",
    "start": "445100",
    "end": "450169"
  },
  {
    "text": "And now imagine starting\nup the evaluator.  Well, it looks at the expression\nand it sees that",
    "start": "450170",
    "end": "456370"
  },
  {
    "text": "it's an application. And it branches to a place in\nthe evaluator code we saw",
    "start": "456370",
    "end": "463730"
  },
  {
    "text": "called ev-application.  And then it begins. It stores away the operands and\nunev, and then it's going",
    "start": "463730",
    "end": "470560"
  },
  {
    "text": "to put the operator in exp,\nand it's going to go recursively evaluate it. That's the process that\nwe walk through.",
    "start": "470560",
    "end": "476385"
  },
  {
    "text": "And if you start looking at\nthe code, you start seeing some register operations. You see assign to unev the\noperands, assign to exp the",
    "start": "476385",
    "end": "483370"
  },
  {
    "text": "operator, save the environment,\ngenerate that, and so on. ",
    "start": "483370",
    "end": "490310"
  },
  {
    "text": "Well, if we look on the overhead\nhere, we can see, we",
    "start": "490310",
    "end": "496220"
  },
  {
    "text": "can see those operations\nstarting to be produced. Here's sort of the first real\noperation that the evaluator",
    "start": "496220",
    "end": "504129"
  },
  {
    "text": "would have done. It pulls the operands out of the\nexp register and assigns it to unev. And then it assigns\nsomething to the",
    "start": "504130",
    "end": "511340"
  },
  {
    "text": "expression register, and it\nsaves continue, and it saves env. And all I'm doing here is\nwriting down the register",
    "start": "511340",
    "end": "518049"
  },
  {
    "text": "assignments that the evaluator\nwould have done in executing that code. And can zoom out a little bit.",
    "start": "518049",
    "end": "524280"
  },
  {
    "text": "Altogether, there are about\n19 operations there.",
    "start": "524280",
    "end": "529430"
  },
  {
    "text": "And this is the--this will be\nthe piece of code up until the point where the evaluator\nbranches off to",
    "start": "529430",
    "end": "536230"
  },
  {
    "text": "apply-dispatch. And in fact, in this compiler,\nwe're not going to worry about apply-dispatch at all.",
    "start": "536230",
    "end": "541450"
  },
  {
    "text": "We're going to have\neverything--we're going to have both interpreted code\nand compiled code. Always evaluate procedures,\nalways apply procedures by",
    "start": "541450",
    "end": "548670"
  },
  {
    "text": "going to apply-dispatch. That will easily allow\ninterpreted code and compiled code to call each other.",
    "start": "548670",
    "end": "553970"
  },
  {
    "text": " Well, in principle, that's\nall we need to do.",
    "start": "553970",
    "end": "561220"
  },
  {
    "text": "You just run the evaluator. So the compiler's a lot\nlike the evaluator. You run it, except it stashes\naway these operations instead",
    "start": "561220",
    "end": "566890"
  },
  {
    "text": "of actually executing them. Well, that's not, that's\nnot quite true.",
    "start": "566890",
    "end": "572680"
  },
  {
    "text": "There's only one little\nlie in that. What you have to worry about is\nif you have a, a predicate.",
    "start": "572680",
    "end": "580480"
  },
  {
    "text": "If you have some kind of test\nyou want to do, obviously, at the point when you're compiling\nit, you don't know",
    "start": "580480",
    "end": "587000"
  },
  {
    "text": "which branch of these--of a\nconditional like this you're going to do. So you can't say which one the\nevaluator would have done.",
    "start": "587000",
    "end": "595010"
  },
  {
    "text": "So all you do there\nis very simple. You compile both branches. So you compile a structure\nthat looks like this.",
    "start": "595010",
    "end": "602050"
  },
  {
    "text": "That'll compile into something\nthat says, the code, the code",
    "start": "602050",
    "end": "608430"
  },
  {
    "text": "for P. And it puts its results\nin, say, the val register.",
    "start": "608430",
    "end": "618140"
  },
  {
    "text": "So you walk the interpreter over\nthe predicate and make sure that the result would\ngo into the val register.",
    "start": "618140",
    "end": "624770"
  },
  {
    "text": "And then you compile an\ninstruction that says, branch",
    "start": "624770",
    "end": "630790"
  },
  {
    "text": "if, if val is true, to a place\nwe'll call label one.",
    "start": "630790",
    "end": "638670"
  },
  {
    "start": "638670",
    "end": "644950"
  },
  {
    "text": "Then we, we will put the\ncode for B to walk the interpreter--walk the\ninterpreter over B. And then",
    "start": "644950",
    "end": "654040"
  },
  {
    "text": "go to put in an instruction\nthat says, go to the next thing, whatever, whatever was\nsupposed to happen after this",
    "start": "654040",
    "end": "663820"
  },
  {
    "text": "thing was done. You put in that instruction. And here you put label one. ",
    "start": "663820",
    "end": "671521"
  },
  {
    "text": "And here you put the\ncode for A. And you",
    "start": "671521",
    "end": "679860"
  },
  {
    "text": "put go to next thing.",
    "start": "679860",
    "end": "685870"
  },
  {
    "start": "685870",
    "end": "691420"
  },
  {
    "text": "So that's how you treat\na conditional. You generate a little\nblock like that. And other than that, this\nzeroth-order compiler is the",
    "start": "691420",
    "end": "700550"
  },
  {
    "text": "same as the evaluator. It's just stashing away the\ninstructions instead of executing them.",
    "start": "700550",
    "end": "706380"
  },
  {
    "text": "That seems pretty simple,\nbut we've gained something by that. See, already that's\ngoing to be more efficient than the evaluator.",
    "start": "706380",
    "end": "713630"
  },
  {
    "text": "Because, if you watch the\nevaluator run, it's not only generating the register\noperations we wrote down, it's",
    "start": "713630",
    "end": "721410"
  },
  {
    "text": "also doing things to decide\nwhich ones to generate. So the very first thing it does,\nsay, here for instance,",
    "start": "721410",
    "end": "728480"
  },
  {
    "text": "is go do some tests and decide\nthat this is an application, and then branch off to the\nplace that, that handles",
    "start": "728480",
    "end": "735930"
  },
  {
    "text": "applications. In other words, what the\nevaluator's doing is simultaneously analyzing the\ncode to see what to do, and",
    "start": "735930",
    "end": "743720"
  },
  {
    "text": "running these operations. And when you-- if you run the evaluator a\nmillion times, that analysis",
    "start": "743720",
    "end": "748960"
  },
  {
    "text": "phase happens a million times,\nwhereas in the compiler, it's happened once, and then you\njust have the register operations themselves.",
    "start": "748960",
    "end": "754900"
  },
  {
    "text": " Ok, that's a, a zeroth-order\ncompiler, but it is a",
    "start": "754900",
    "end": "762310"
  },
  {
    "text": "wretched, wretched compiler. It's really dumb. Let's--let's go back and, and\nlook at this overhead.",
    "start": "762310",
    "end": "772040"
  },
  {
    "text": "So look at look at some\nof the operations this thing is doing. We're supposedly looking\nat the operations and",
    "start": "772040",
    "end": "781030"
  },
  {
    "text": "interpreting f of x. Now, look here what\nit's doing. For example, here it\nassigns to exp the",
    "start": "781030",
    "end": "790360"
  },
  {
    "text": "operator in fetch of exp. But see, there's no reason to\ndo that, because this is--",
    "start": "790360",
    "end": "796290"
  },
  {
    "text": "the compiler knows that the\noperator, fetch of exp, is f right here.",
    "start": "796290",
    "end": "803310"
  },
  {
    "text": "So there's no reason why this\ninstruction should say that. It should say, we'll\nassign to exp, f.",
    "start": "803310",
    "end": "809579"
  },
  {
    "text": "Or in fact, you don't\nneed exp at all. There's no reason it should\nhave exp at all. What, what did exp\nget used for?",
    "start": "809580",
    "end": "815170"
  },
  {
    "text": "Well, if we come down here,\nwe're going to assign to val,",
    "start": "815170",
    "end": "823190"
  },
  {
    "text": "look up the stuff in exp\nin the environment.",
    "start": "823190",
    "end": "828620"
  },
  {
    "text": "So what we really should do is\nget rid of the exp register altogether, and just change\nthis instruction to say, assign to val, look up the\nvariable value of the symbol f",
    "start": "828620",
    "end": "837600"
  },
  {
    "text": "in the environment.  Similarly, back up here, we\ndon't need unev at all,",
    "start": "837600",
    "end": "844800"
  },
  {
    "text": "because we know what the\noperands of fetch of exp are for this piece of code. It's the, it's the list x.",
    "start": "844800",
    "end": "850630"
  },
  {
    "text": " So in some sense, you don't\nwant unev and exp at all.",
    "start": "850630",
    "end": "859660"
  },
  {
    "text": "See, what they really are in\nsome sense, those aren't registers of the actual machine that's supposed to run.",
    "start": "859660",
    "end": "865230"
  },
  {
    "text": "Those are registers that have to\ndo with arranging the thing that can simulate\nthat machine.",
    "start": "865230",
    "end": "870760"
  },
  {
    "text": "So they're always going to hold\nexpressions which, from the compiler's point of view,\nare just constants, so can be",
    "start": "870760",
    "end": "877330"
  },
  {
    "text": "put right into the code. So you can forget about all the\noperations worrying about exp and unev and just\nuse those constants.",
    "start": "877330",
    "end": "884000"
  },
  {
    "text": "Similarly, again, if we go, go\nback and look here, there are things like assign to\ncontinue eval-args.",
    "start": "884000",
    "end": "890510"
  },
  {
    "text": " Now, that has nothing\nto do with anything. That was just the evaluator\nkeeping track of where it",
    "start": "890510",
    "end": "899280"
  },
  {
    "text": "should go next, to evaluate the\narguments in some, in some",
    "start": "899280",
    "end": "905150"
  },
  {
    "text": "application. But of course, that's irrelevant\nto the compiler, because you-- ",
    "start": "905150",
    "end": "911470"
  },
  {
    "text": "the analysis phase will have\nalready done that. So this is completely\nirrelevant.",
    "start": "911470",
    "end": "917680"
  },
  {
    "text": "So a lot of these, these\nassignments to continue have not to do where the running\nmachine is supposed to",
    "start": "917680",
    "end": "924070"
  },
  {
    "text": "continue in keeping track\nof its state. It has to, to do with where the\nevaluator analysis should continue, and those are\ncompletely irrelevant.",
    "start": "924070",
    "end": "930080"
  },
  {
    "text": "So we can get rid of them. ",
    "start": "930080",
    "end": "944330"
  },
  {
    "text": "Ok, well, if we, if we simply\ndo that, make those kinds of optimizations, get rid, get rid\nof worrying about exp and",
    "start": "944330",
    "end": "951380"
  },
  {
    "text": "unev, and get rid of these\nirrelevant register assignments to continue, then we\ncan take this literal code,",
    "start": "951380",
    "end": "961400"
  },
  {
    "text": "these sort of 19 instructions\nthat the, that the evaluator would have done, and\nthen replace them.",
    "start": "961400",
    "end": "968540"
  },
  {
    "text": "Let's look at the,\nat the slide.  Replace them by--we get rid\nof about half of them.",
    "start": "968540",
    "end": "975180"
  },
  {
    "text": " And again, this is just sort\nof filtering what the",
    "start": "975180",
    "end": "981470"
  },
  {
    "text": "evaluator would have done\nby getting rid of the irrelevant stuff. And you see, for instance, here\nthe--where the evaluator",
    "start": "981470",
    "end": "989450"
  },
  {
    "text": "said, assign val, look up\nvariable value, fetch of exp, here we have put in\nthe constant f.",
    "start": "989450",
    "end": "995470"
  },
  {
    "text": "Here we've put in\nthe constant x.  So there's a, there's a little\nbetter compiler.",
    "start": "995470",
    "end": "1003860"
  },
  {
    "text": "It's still pretty dumb. It's still doing a lot\nof dumb things.",
    "start": "1003860",
    "end": "1010560"
  },
  {
    "text": "Again, if we go look at the\nslide again, look at the very beginning here, we see a save\nthe environment, assign",
    "start": "1010560",
    "end": "1020149"
  },
  {
    "text": "something to the val register,\nand restore the environment. Where'd that come from? That came from the evaluator\nback here saying, oh, I'm in",
    "start": "1020150",
    "end": "1028199"
  },
  {
    "text": "the middle of evaluating\nan application. So I'm going to recursively\ncall eval dispatch.",
    "start": "1028200",
    "end": "1035939"
  },
  {
    "text": "So I'd better save the thing I'm\ngoing to need later, which is the environment. This was the result\nof recursively",
    "start": "1035940",
    "end": "1041609"
  },
  {
    "text": "calling eval dispatch. It was evaluating the symbol\nf in that case. Then it came back from eval\ndispatch, restored the",
    "start": "1041609",
    "end": "1048900"
  },
  {
    "text": "environment. But in fact, the actual thing\nit ended up doing in the",
    "start": "1048900",
    "end": "1055290"
  },
  {
    "text": "evaluation is not going to hurt\nthe environment at all. So there's no reason to be\nsaving the environment and",
    "start": "1055290",
    "end": "1060890"
  },
  {
    "text": "restoring the environment\nhere. ",
    "start": "1060890",
    "end": "1066020"
  },
  {
    "text": "Similarly, here I'm saving the\nargument list. That's a piece",
    "start": "1066020",
    "end": "1073690"
  },
  {
    "text": "of the argument evaluation\nloop, saving the argument list, and here you restore it. But the actual thing that you\nended up doing didn't trash",
    "start": "1073690",
    "end": "1081510"
  },
  {
    "text": "the argument list. So there\nwas no reason to save it. ",
    "start": "1081510",
    "end": "1088690"
  },
  {
    "text": "So another way to say, another\nway to say that is that the,",
    "start": "1088690",
    "end": "1094414"
  },
  {
    "text": "the evaluator has to be\nmaximally pessimistic, because",
    "start": "1094415",
    "end": "1099923"
  },
  {
    "text": "as far from its point of view\nit's just going off to evaluate something. So it better save what it's\ngoing to need later.",
    "start": "1099923",
    "end": "1106200"
  },
  {
    "text": "But once you've done the\nanalysis, the compiler is in a position to say, well, what\nactually did I need to save?",
    "start": "1106200",
    "end": "1112139"
  },
  {
    "text": "And doesn't need to do any--\nit doesn't need to be as careful as the evaluator,\nbecause it knows what it",
    "start": "1112140",
    "end": "1118060"
  },
  {
    "text": "actually needs. Well, in any case, if we do that\nand eliminate all those",
    "start": "1118060",
    "end": "1124240"
  },
  {
    "text": "redundant saves and restores,\nthen we can get it down to this.",
    "start": "1124240",
    "end": "1129400"
  },
  {
    "text": "And you see there are actually\nonly three instructions that we actually need, down from the\ninitial 11 or so, or the",
    "start": "1129400",
    "end": "1136230"
  },
  {
    "text": "initial 20 or so in\nthe original one. And that's just saying, of those\nregister operations,",
    "start": "1136230",
    "end": "1143259"
  },
  {
    "text": "which ones did we\nactually need? ",
    "start": "1143260",
    "end": "1149490"
  },
  {
    "text": "Let me just sort of summarize\nthat in another way, just to show you in a little\nbetter picture. ",
    "start": "1149490",
    "end": "1156010"
  },
  {
    "text": "Here's a picture of starting-- This is looking at all the\nsaves and restores. ",
    "start": "1156010",
    "end": "1163770"
  },
  {
    "text": "So here's the expression, f\nof x, and then this traces through, on the bottom here,\nthe various places in the",
    "start": "1163770",
    "end": "1170940"
  },
  {
    "text": "evaluator that were passed when\nthe evaluation happened.",
    "start": "1170940",
    "end": "1178159"
  },
  {
    "text": "And then here, here\nyou see arrows. Arrow down means\nregister saved. So the first thing that\nhappened is the",
    "start": "1178160",
    "end": "1183690"
  },
  {
    "text": "environment got saved. And over here, the environment\ngot restored. ",
    "start": "1183690",
    "end": "1192380"
  },
  {
    "text": "And these-- so there are all the\npairs of stack operations. Now, if you go ahead and say,\nwell, let's remember that we",
    "start": "1192380",
    "end": "1199461"
  },
  {
    "text": "don't--that unev, for instance,\nis a completely useless register. ",
    "start": "1199462",
    "end": "1207549"
  },
  {
    "text": "And if we use the constant\nstructure of the code, well, we don't need, we don't need\nto save unev. We don't need unev at all.",
    "start": "1207550",
    "end": "1213020"
  },
  {
    "text": " And then, depending on how we\nset up the discipline of",
    "start": "1213020",
    "end": "1218789"
  },
  {
    "text": "the--of calling other things\nthat apply, we may or may not need to save continue.",
    "start": "1218790",
    "end": "1223860"
  },
  {
    "text": " That's the first step I did. And then we can look and see\nwhat's actually, what's",
    "start": "1223860",
    "end": "1230116"
  },
  {
    "text": "actually needed. See, we don't-- didn't really\nneed to save env or",
    "start": "1230116",
    "end": "1236299"
  },
  {
    "text": "cross-evaluating f, because\nit wouldn't, it wouldn't trash it. So if we take advantage of that,\nand see the evaluation",
    "start": "1236300",
    "end": "1246720"
  },
  {
    "text": "of f here, doesn't really need\nto worry about, about hurting",
    "start": "1246720",
    "end": "1252280"
  },
  {
    "text": "env. And similarly, the\nevaluation of x here, when the",
    "start": "1252280",
    "end": "1257560"
  },
  {
    "text": "evaluator did that it said, oh,\nI'd better preserve the function register around that,\nbecause I might need it later.",
    "start": "1257560",
    "end": "1263320"
  },
  {
    "text": "And I better preserve\nthe argument list. Whereas the compiler is now in\na position to know, well, we",
    "start": "1263320",
    "end": "1269280"
  },
  {
    "text": "didn't really need\nto save-- to do those saves and restores. So in fact, all of the stack\noperations done by the",
    "start": "1269280",
    "end": "1275520"
  },
  {
    "text": "evaluator turned out to be\nunnecessary or overly pessimistic. And the compiler is in a\nposition to know that.",
    "start": "1275520",
    "end": "1281390"
  },
  {
    "start": "1281390",
    "end": "1287470"
  },
  {
    "text": "Well that's the basic idea. We take the evaluator, we\neliminate the things that you",
    "start": "1287470",
    "end": "1292600"
  },
  {
    "text": "don't need, that in some sense\nhave nothing to do with the compiler at all, just the\nevaluator, and then you see",
    "start": "1292600",
    "end": "1298480"
  },
  {
    "text": "which stack operations\nare unnecessary. That's the basic structure of\nthe compiler that's described",
    "start": "1298480",
    "end": "1304490"
  },
  {
    "text": "in the book. Let me just show you\nhow that examples a little bit too simple.",
    "start": "1304490",
    "end": "1311280"
  },
  {
    "text": "To see how you, how you actually\nsave a lot, let's look at a little bit more\ncomplicated expression. ",
    "start": "1311280",
    "end": "1318330"
  },
  {
    "text": "F of G of X and 1.",
    "start": "1318330",
    "end": "1323542"
  },
  {
    "text": "And I'm not going to go\nthrough all the code. There's a, there's a\nfair pile of it.",
    "start": "1323542",
    "end": "1329830"
  },
  {
    "text": "I think there are, there are\nsomething like 16 pairs of register saves and restores\nas the evaluator",
    "start": "1329830",
    "end": "1335440"
  },
  {
    "text": "walks through that. Here's a diagram of them.",
    "start": "1335440",
    "end": "1340680"
  },
  {
    "text": "Let's see. You see what's going on. You start out by--the evaluator\nsays, oh, I'm about to do an application.",
    "start": "1340680",
    "end": "1346480"
  },
  {
    "text": "I'll preserve the environment. I'll restore it here. Then I'm about to do\nthe first operand.",
    "start": "1346480",
    "end": "1353900"
  },
  {
    "text": " Here it recursively goes\nto the evaluator.",
    "start": "1353900",
    "end": "1358970"
  },
  {
    "text": "The evaluator says, oh, this is\nan application, I'll save the environment, do the operator\nof that combination,",
    "start": "1358970",
    "end": "1364090"
  },
  {
    "text": "restore it here. This save--this restore matches\nthat save. And so on.",
    "start": "1364090",
    "end": "1371720"
  },
  {
    "text": "There's unev here, which turns\nout to be completely unnecessary, continues getting\nbumped around here.",
    "start": "1371720",
    "end": "1377240"
  },
  {
    "text": "The function register is\ngetting, getting saved across the first operands, across\nthe operands.",
    "start": "1377240",
    "end": "1385330"
  },
  {
    "text": "All sorts of things\nare going on. But if you say, well, what of\nthose really were the business of the compiler as opposed to\nthe evaluator, you get rid of",
    "start": "1385330",
    "end": "1392770"
  },
  {
    "text": "a whole bunch. And then on top of that, if\nyou say things like, the",
    "start": "1392770",
    "end": "1399500"
  },
  {
    "text": "evaluation of F doesn't hurt the\nenvironment register, or",
    "start": "1399500",
    "end": "1404520"
  },
  {
    "text": "simply looking up the symbol X,\nyou don't have to protect",
    "start": "1404520",
    "end": "1410500"
  },
  {
    "text": "the function register\nagainst that. So you come down to just\na couple of, a",
    "start": "1410500",
    "end": "1416044"
  },
  {
    "text": "couple of pairs here.  And still, you can do\na little better.",
    "start": "1416044",
    "end": "1422160"
  },
  {
    "text": "Look what's going on here with\nthe environment register. The environment register comes\nalong and says, oh, here's a",
    "start": "1422160",
    "end": "1431350"
  },
  {
    "text": "combination.  This evaluator, by the way,\ndoesn't know anything about G.",
    "start": "1431350",
    "end": "1438580"
  },
  {
    "text": "So here it says, so it says,\nI'd better save the environment register, because\nevaluating G might be some",
    "start": "1438580",
    "end": "1445610"
  },
  {
    "text": "arbitrary piece of code that\nwould trash it, and I'm going to need it later, after\nthis argument, for",
    "start": "1445610",
    "end": "1452360"
  },
  {
    "text": "doing the second argument. So that's why this one didn't go\naway, because the compiler",
    "start": "1452360",
    "end": "1460580"
  },
  {
    "text": "made no assumptions about\nwhat G would do. On the other hand, if you look\nat what the second argument",
    "start": "1460580",
    "end": "1466170"
  },
  {
    "text": "is, that's just looking\nup one. That doesn't need this\nenvironment register. So there's no reason\nto save it.",
    "start": "1466170",
    "end": "1472070"
  },
  {
    "text": "So in fact, you can get\nrid of that one, too. And from this whole pile of, of\nregister operations, if you",
    "start": "1472070",
    "end": "1478290"
  },
  {
    "text": "simply do a little bit of\nreasoning like that, you get down to, I think, just two pairs\nof saves and restores.",
    "start": "1478290",
    "end": "1485169"
  },
  {
    "text": "And those, in fact, could go\naway further if you, if you knew something about G.",
    "start": "1485170",
    "end": "1496650"
  },
  {
    "text": "So again, the general idea is\nthat the reason the compiler can be better is that the\ninterpreter doesn't know what it's about to encounter.",
    "start": "1496650",
    "end": "1503310"
  },
  {
    "text": "It has to be maximally\npessimistic in saving things to protect itself. The compiler only has\nto deal with what",
    "start": "1503310",
    "end": "1510820"
  },
  {
    "text": "actually had to be saved. And there are two reasons\nthat something might not have to be saved.",
    "start": "1510820",
    "end": "1517920"
  },
  {
    "text": "One is that what you're\nprotecting it against, in fact, didn't trash the register,\nlike it was just a variable look-up.",
    "start": "1517920",
    "end": "1524210"
  },
  {
    "text": "And the other one is, that the\nthing that you were saving it for might turn out not\nto actually need it.",
    "start": "1524210",
    "end": "1530799"
  },
  {
    "text": "So those are the two basic\npieces of knowledge that the compiler can take advantage\nof in making",
    "start": "1530800",
    "end": "1537010"
  },
  {
    "text": "the code more efficient. ",
    "start": "1537010",
    "end": "1544570"
  },
  {
    "text": "Let's break for questions. ",
    "start": "1544570",
    "end": "1551279"
  },
  {
    "text": "AUDIENCE: You kept saying that\nthe uneval register, unev register didn't need\nto be used at all.",
    "start": "1551280",
    "end": "1556350"
  },
  {
    "text": "Does that mean that you\ncould just map a six-register machine? Or is that, in this particular\nexample, it didn't need to be used?",
    "start": "1556350",
    "end": "1561860"
  },
  {
    "text": "PROFESSOR: For the compiler,\nyou could generate code for the six-register, five, right?",
    "start": "1561860",
    "end": "1567580"
  },
  {
    "text": "Because that exp\ngoes away also.  Assuming--yeah, you can get\nrid of both exp and unev,",
    "start": "1567580",
    "end": "1574700"
  },
  {
    "text": "because, see, those are data\nstructures of the evaluator. Those are all things that would\nbe constants from the point of view of the compiler.",
    "start": "1574700",
    "end": "1581410"
  },
  {
    "text": "The only thing is this\nparticular compiler is set up so that interpreted code and\ncompiled code can coexist.",
    "start": "1581410",
    "end": "1589330"
  },
  {
    "text": "So the way to think about it is,\nis maybe you build a chip which is the evaluator, and what\nthe compiler might do is",
    "start": "1589330",
    "end": "1597419"
  },
  {
    "text": "generate code for that chip. It just wouldn't use two\nof the registers. ",
    "start": "1597420",
    "end": "1611158"
  },
  {
    "text": "All right, let's take a break. [MUSIC PLAYING]",
    "start": "1611158",
    "end": "1648576"
  },
  {
    "text": "We just looked at what the\ncompiler is supposed to do. Now let's very briefly look\nat how, how this gets",
    "start": "1648576",
    "end": "1656700"
  },
  {
    "text": "accomplished. And I'm going to give\nno details. There's, there's a giant pile of\ncode in the book that gives",
    "start": "1656700",
    "end": "1662580"
  },
  {
    "text": "all the details. But what I want to do is\njust show you the, the essential idea here.",
    "start": "1662580",
    "end": "1669590"
  },
  {
    "text": "Worry about the details\nsome other time. Let's imagine that we're\ncompiling an expression that",
    "start": "1669590",
    "end": "1675419"
  },
  {
    "text": "looks like there's some\noperator, and there are two arguments. ",
    "start": "1675420",
    "end": "1683660"
  },
  {
    "text": "Now, the-- what's the code that the\ncompiler should generate?",
    "start": "1683660",
    "end": "1688940"
  },
  {
    "text": "Well, first of all, it should\nrecursively go off and compile the operator.",
    "start": "1688940",
    "end": "1694192"
  },
  {
    "text": "So it says, I'll compile\nthe operator. ",
    "start": "1694192",
    "end": "1701250"
  },
  {
    "text": "And where I'm going to need that\nis to be in the function",
    "start": "1701250",
    "end": "1706600"
  },
  {
    "text": "register, eventually. So I'll compile some\ninstructions that will compile the operator and end up\nwith the result in",
    "start": "1706600",
    "end": "1717640"
  },
  {
    "text": "the function register. ",
    "start": "1717640",
    "end": "1725420"
  },
  {
    "text": "The next thing it's going to do,\nanother piece is to say, well, I have to compile\nthe first argument.",
    "start": "1725420",
    "end": "1735140"
  },
  {
    "text": "So it calls itself\nrecursively. And let's say the result\nwill go into val.",
    "start": "1735140",
    "end": "1743010"
  },
  {
    "start": "1743010",
    "end": "1749150"
  },
  {
    "text": "And then what it's going to need\nto do is start setting up the argument list. So it'll say,\nassign to argl cons of",
    "start": "1749150",
    "end": "1765059"
  },
  {
    "text": "fetch-- so it generates this\nliteral instruction-- fetch of val onto empty list.",
    "start": "1765060",
    "end": "1775430"
  },
  {
    "text": "However, it might\nhave to work--  when it gets here, it's going\nto need the environment.",
    "start": "1775430",
    "end": "1783950"
  },
  {
    "text": "It's going to need whatever\nenvironment was here in order to do this evaluation of\nthe first argument.",
    "start": "1783950",
    "end": "1789030"
  },
  {
    "text": "So it has to ensure that the\ncompilation of this operand,",
    "start": "1789030",
    "end": "1794990"
  },
  {
    "text": "or it has to protect the\nfunction register against whatever might happen in the\ncompilation of this operand.",
    "start": "1794990",
    "end": "1801220"
  },
  {
    "text": "So it puts a note here and says,\noh, this piece should be done preserving the environment\nregister.",
    "start": "1801220",
    "end": "1812649"
  },
  {
    "text": " Similarly, here, after it gets\ndone compiling the first",
    "start": "1812650",
    "end": "1822630"
  },
  {
    "text": "operand, it's going to say,\nI better compile-- I'm going to need to know\nthe environment for the second operand.",
    "start": "1822630",
    "end": "1827929"
  },
  {
    "text": "So it puts a little note here,\nsaying, yeah, this is also done preserving env. Now it goes\non and says, well, the",
    "start": "1827930",
    "end": "1841510"
  },
  {
    "text": "next chunk of code is the one\nthat's going to compile the",
    "start": "1841510",
    "end": "1848880"
  },
  {
    "text": "second argument. And let's say it'll compile\nit with a targeted to",
    "start": "1848880",
    "end": "1857840"
  },
  {
    "text": "val, as they say. ",
    "start": "1857840",
    "end": "1863940"
  },
  {
    "text": "And then it'll generate the\nliteral instruction, building up the argument list. So it'll\nsay, assign to argl cons of",
    "start": "1863940",
    "end": "1880860"
  },
  {
    "text": "the new value it just got onto\nthe old argument list.",
    "start": "1880860",
    "end": "1894059"
  },
  {
    "text": "However, in order to have the\nold argument list, it better have arranged that the argument\nlist didn't get",
    "start": "1894060",
    "end": "1900440"
  },
  {
    "text": "trashed by whatever\nhappened in here. So it puts a little note here\nand says, oh, this has to be",
    "start": "1900440",
    "end": "1906200"
  },
  {
    "text": "done preserving argl.",
    "start": "1906200",
    "end": "1911399"
  },
  {
    "text": " Now it's got the argument\nlist set up.",
    "start": "1911400",
    "end": "1918090"
  },
  {
    "text": "And it's all ready to go\nto apply dispatch. ",
    "start": "1918090",
    "end": "1926450"
  },
  {
    "text": "It generates this literal\ninstruction. ",
    "start": "1926450",
    "end": "1934990"
  },
  {
    "text": "Because now it's got the\narguments in argl and the operator in fun, but wait, it's\nonly got the operator in",
    "start": "1934990",
    "end": "1942360"
  },
  {
    "text": "fun if it had ensured that\nthis block of code didn't",
    "start": "1942360",
    "end": "1947520"
  },
  {
    "text": "trash what was in the\nfunction register. So it puts a little note here\nand says, oh, yes, all this stuff here had better\nbe done preserving",
    "start": "1947520",
    "end": "1959460"
  },
  {
    "text": "the function register. ",
    "start": "1959460",
    "end": "1966110"
  },
  {
    "text": "So that's the little--so when\nit starts ticking--so basically, what the compiler\ndoes is append a whole bunch",
    "start": "1966110",
    "end": "1971510"
  },
  {
    "text": "of code sequences. See, what it's got in it is\nlittle primitive pieces of",
    "start": "1971510",
    "end": "1978580"
  },
  {
    "text": "things, like how to look up\na symbol, how to do a conditional. Those are all little\npieces of things.",
    "start": "1978580",
    "end": "1985530"
  },
  {
    "text": "And then it appends them\ntogether in this sort of discipline. So the basic means of combining\nthings is to append",
    "start": "1985530",
    "end": "1991890"
  },
  {
    "text": "two code sequences. ",
    "start": "1991890",
    "end": "2001610"
  },
  {
    "text": "That's what's going on here.  And it's a little bit tricky.",
    "start": "2001610",
    "end": "2007590"
  },
  {
    "text": "The idea is that it appends\ntwo code sequences, taking care to preserve a register.",
    "start": "2007590",
    "end": "2015670"
  },
  {
    "text": "So the actual append operation\nlooks like this. What it wants to\ndo is say, if--",
    "start": "2015670",
    "end": "2021230"
  },
  {
    "text": "here's what it means to append\ntwo code sequences. So if sequence one\nneeds register--",
    "start": "2021230",
    "end": "2033684"
  },
  {
    "text": "I should change this. Append sequence one\nto sequence two, preserving some register.",
    "start": "2033685",
    "end": "2043815"
  },
  {
    "text": " Let me say, and.",
    "start": "2043815",
    "end": "2051080"
  },
  {
    "text": "So it's clear that sequence\none comes first. So if sequence two needs the\nregister and sequence one",
    "start": "2051080",
    "end": "2066449"
  },
  {
    "text": "modifies the register, then\nthe instructions that the",
    "start": "2066449",
    "end": "2075230"
  },
  {
    "text": "compiler spits out are,\nsave the register.",
    "start": "2075230",
    "end": "2083379"
  },
  {
    "text": "Here's the code. You generate this code. Save the register, and then you\nput out the recursively",
    "start": "2083380",
    "end": "2090860"
  },
  {
    "text": "compiled stuff for\nsequence one. And then you restore\nthe register. ",
    "start": "2090860",
    "end": "2100440"
  },
  {
    "text": "And then you put out the\nrecursively compiled stuff for sequence two.",
    "start": "2100440",
    "end": "2107330"
  },
  {
    "text": "That's in the case where\nyou need to do it. Sequence two actually needs the\nregister, and sequence one",
    "start": "2107330",
    "end": "2112700"
  },
  {
    "text": "actually clobbers it. So that's sort of if. Otherwise, all you spit out is\nsequence one followed by",
    "start": "2112700",
    "end": "2125820"
  },
  {
    "text": "sequence two. So that's the basic operation\nfor sticking together these",
    "start": "2125820",
    "end": "2131720"
  },
  {
    "text": "bits of code fragments,\nthese bits of instructions into a sequence.",
    "start": "2131720",
    "end": "2136960"
  },
  {
    "text": "And you see, from this point\nof view, the difference",
    "start": "2136960",
    "end": "2142839"
  },
  {
    "text": "between the interpreter and the\ncompiler, in some sense, is that where the compiler has\nthese preserving notes, and",
    "start": "2142840",
    "end": "2150220"
  },
  {
    "text": "says, maybe I'll actually\ngenerate the saves and restores and maybe I won't,\nthe interpreter being",
    "start": "2150220",
    "end": "2156220"
  },
  {
    "text": "maximally pessimistic always has\na save and restore here. That's the essential\ndifference.",
    "start": "2156220",
    "end": "2164140"
  },
  {
    "text": "Well, in order to do this, of\ncourse, the compiler needs some theory of what code\nsequences need",
    "start": "2164140",
    "end": "2170775"
  },
  {
    "text": "and modifier registers.  So the tiny little fragments\nthat you put in, like the",
    "start": "2170775",
    "end": "2177670"
  },
  {
    "text": "basic primitive code fragments,\nsay, what are the",
    "start": "2177670",
    "end": "2183339"
  },
  {
    "text": "operations that you do when\nyou look up a variable? What are the sequence of things\nthat you do when you",
    "start": "2183340",
    "end": "2189630"
  },
  {
    "text": "compile a constant or\napply a function? Those have little notations in\nthere about what they need and",
    "start": "2189630",
    "end": "2195599"
  },
  {
    "text": "what they modify.  So the bottom-level\ndata structures--",
    "start": "2195600",
    "end": "2202750"
  },
  {
    "text": "Well, I'll say this. A code sequence to the compiler\nlooks like this.",
    "start": "2202750",
    "end": "2208070"
  },
  {
    "text": "It has the actual sequence\nof instructions. ",
    "start": "2208070",
    "end": "2215780"
  },
  {
    "text": "And then, along with\nit, there's the set of registers modified.",
    "start": "2215780",
    "end": "2222195"
  },
  {
    "start": "2222195",
    "end": "2230630"
  },
  {
    "text": "And then there's the set\nof registers needed. ",
    "start": "2230630",
    "end": "2239910"
  },
  {
    "text": "So that's the information the\ncompiler has that it draws on in order to be able to\ndo this operation.",
    "start": "2239910",
    "end": "2245965"
  },
  {
    "text": " And where do those come from? Well, those come from, you might\nexpect, for the very",
    "start": "2245965",
    "end": "2254920"
  },
  {
    "text": "primitive ones, we're going\nto put them in by hand. And then, when we combine two\nsequences, we'll figure out what these things should be.",
    "start": "2254920",
    "end": "2262079"
  },
  {
    "text": "So for example, a very primitive\none, let's see.",
    "start": "2262080",
    "end": "2268460"
  },
  {
    "text": "How about doing a register\nassignment. So a primitive sequence might\nsay, oh, it's code fragment.",
    "start": "2268460",
    "end": "2276040"
  },
  {
    "text": "Its code instruction is assigned\nto R1, fetch of R2.",
    "start": "2276040",
    "end": "2283050"
  },
  {
    "text": "So this is an example. That might be an example of a\nsequence of instructions.",
    "start": "2283050",
    "end": "2288510"
  },
  {
    "text": "And along with that, it'll\nsay, oh, what I need to remember is that that modifies\nR1, and then it needs R2.",
    "start": "2288510",
    "end": "2300670"
  },
  {
    "text": " So when you're first building\nthis compiler, you put in",
    "start": "2300670",
    "end": "2307640"
  },
  {
    "text": "little fragments of\nstuff like that. And now, when it combines two\nsequences, if I'm going to",
    "start": "2307640",
    "end": "2317320"
  },
  {
    "text": "combine, let's say, sequence\none, that modifies a bunch of",
    "start": "2317320",
    "end": "2325990"
  },
  {
    "text": "registers M1, and needs a\nbunch of registers N1. ",
    "start": "2325990",
    "end": "2334940"
  },
  {
    "text": "And I'm going to combine\nthat with sequence two.",
    "start": "2334940",
    "end": "2340800"
  },
  {
    "text": "That modifies a bunch of\nregisters M2, and needs a",
    "start": "2340800",
    "end": "2347780"
  },
  {
    "text": "bunch of registers N2.  Then, well, we can\nreason it out.",
    "start": "2347780",
    "end": "2355035"
  },
  {
    "text": "The new code fragment,\nsequence one, and--",
    "start": "2355035",
    "end": "2360230"
  },
  {
    "text": "followed by sequence two, well,",
    "start": "2360230",
    "end": "2365270"
  },
  {
    "text": "what's it going to modify? The things that it will modify\nare the things that are modified either by sequence\none or sequence two.",
    "start": "2365270",
    "end": "2373990"
  },
  {
    "text": "So the union of these\ntwo sets are what the new thing modifies.",
    "start": "2373990",
    "end": "2380529"
  },
  {
    "text": "And then you say, well, what is\nthis--what registers is it",
    "start": "2380530",
    "end": "2385620"
  },
  {
    "text": "going to need? It's going to need the things\nthat are, first of all, needed",
    "start": "2385620",
    "end": "2390770"
  },
  {
    "text": "by sequence one. So what it needs is\nsequence one. And then, well, not quite all of\nthe ones that are needed by",
    "start": "2390770",
    "end": "2398820"
  },
  {
    "text": "sequence one. What it needs are the ones that\nare needed by sequence two that have not been set\nup by sequence one.",
    "start": "2398820",
    "end": "2408069"
  },
  {
    "text": "So it's sort of the union of the\nthings that sequence two needs minus the ones that\nsequence one modifies.",
    "start": "2408070",
    "end": "2419369"
  },
  {
    "text": "Because it worries about\nsetting them up.  So there's the basic structure\nof the compiler.",
    "start": "2419370",
    "end": "2426740"
  },
  {
    "text": "The way you do register\noptimizations is you have some strategies for what needs\nto be preserved.",
    "start": "2426740",
    "end": "2434010"
  },
  {
    "text": "That depends on a\ndata structure. Well, it depends on the\noperation of what it means to put things together.",
    "start": "2434010",
    "end": "2439080"
  },
  {
    "text": "Preserving something, that\ndepends on knowing what",
    "start": "2439080",
    "end": "2444710"
  },
  {
    "text": "registers are needed\nand modified by these code fragments. That depends on having little\ndata structures, which say, a",
    "start": "2444710",
    "end": "2452819"
  },
  {
    "text": "code sequence is the actual\ninstructions, what they modify and what they need. That comes from, at\nthe primitive",
    "start": "2452820",
    "end": "2458750"
  },
  {
    "text": "level, building it in. At the primitive level, it's\ngoing to be completely obvious what something needs\nand modifies.",
    "start": "2458750",
    "end": "2464850"
  },
  {
    "text": "Plus, this particular way that\nsays, when I build up bigger ones, here's how I generate\nthe new set of registers",
    "start": "2464850",
    "end": "2471130"
  },
  {
    "text": "modified and the new set\nof registers needed. And that's the whole-- well, I shouldn't say that's\nthe whole thing.",
    "start": "2471130",
    "end": "2477810"
  },
  {
    "text": "That's the whole thing except\nfor about 30 pages of details in the book. But it is a perfectly usable\nrudimentary compiler.",
    "start": "2477810",
    "end": "2488880"
  },
  {
    "text": "Let me kind of show\nyou what it does. Suppose we start out with\nrecursive factorial.",
    "start": "2488880",
    "end": "2496329"
  },
  {
    "text": "And these slides are going to\nbe much too small to read. I just want to flash through\nthe code and show you about how much it is.",
    "start": "2496330",
    "end": "2501620"
  },
  {
    "text": " That starts out with--here's a\nfirst block of it, where it compiles a procedure entry and\ndoes a bunch of assignments.",
    "start": "2501620",
    "end": "2508740"
  },
  {
    "text": "And this thing is basically up\nthrough the part where it sets up to do the predicate\nand test whether",
    "start": "2508740",
    "end": "2515500"
  },
  {
    "text": "the predicate's true. The second part is what\nresults from-- in the recursive call to\nfact of n minus one.",
    "start": "2515500",
    "end": "2524210"
  },
  {
    "text": "And this last part is coming\nback from that and then taking care of the constant case.",
    "start": "2524210",
    "end": "2529890"
  },
  {
    "text": "So that's about how\nmuch code it would produce for factorial. We could make this compiler\nmuch, much better, of course.",
    "start": "2529890",
    "end": "2538380"
  },
  {
    "text": "The main way we could make\nit better is to allow the compiler to make any assumptions\nat all about what",
    "start": "2538380",
    "end": "2544720"
  },
  {
    "text": "happens when you call\na procedure. So this compiler, for instance,\ndoesn't even know,",
    "start": "2544720",
    "end": "2550810"
  },
  {
    "text": "say, that multiplication\nis something that could be coded in line.",
    "start": "2550810",
    "end": "2556030"
  },
  {
    "text": "Instead, it sets up this\nwhole mechanism. It goes to apply-dispatch. ",
    "start": "2556030",
    "end": "2561430"
  },
  {
    "text": "That's a tremendous waste,\nbecause what you do every time you go to apply-dispatch is\nyou have to concept this argument list, because it's\na very general thing",
    "start": "2561430",
    "end": "2568640"
  },
  {
    "text": "you're going to. In any real compiler, of course,\nyou're going to have registers for holding\narguments.",
    "start": "2568640",
    "end": "2573830"
  },
  {
    "text": "And you're going to start\npreserving and saving the way you use those registers\nsimilar to the",
    "start": "2573830",
    "end": "2580510"
  },
  {
    "text": "same strategy here. So that's probably the very main\nway that this particular",
    "start": "2580510",
    "end": "2586700"
  },
  {
    "text": "compiler in the book\ncould be fixed. There are other things like\nlooking up variable values and",
    "start": "2586700",
    "end": "2592010"
  },
  {
    "text": "making more efficient primitive\noperations and all sorts of things. Essentially, a good Lisp\ncompiler can absorb an",
    "start": "2592010",
    "end": "2597260"
  },
  {
    "text": "arbitrary amount of effort. And probably one of the reasons\nthat Lisp is slow with",
    "start": "2597260",
    "end": "2603820"
  },
  {
    "text": "compared to languages like\nFORTRAN is that, if you look over history at the amount of\neffort that's gone into",
    "start": "2603820",
    "end": "2609859"
  },
  {
    "text": "building Lisp compilers, it's\nnowhere near the amount of effort that's gone into\nFORTRAN compilers. And maybe that's something that\nwill change over the next",
    "start": "2609860",
    "end": "2616910"
  },
  {
    "text": "couple of years. OK, let's break. ",
    "start": "2616910",
    "end": "2623950"
  },
  {
    "text": "Questions?  AUDIENCE: One of the very\nfirst classes--",
    "start": "2623950",
    "end": "2629590"
  },
  {
    "text": "I don't know if it was during\nclass or after class- you showed me the, say, addition has\na primitive that we don't",
    "start": "2629590",
    "end": "2637040"
  },
  {
    "text": "see, and-percent add or\nsomething like that. Is that because, if you're doing\ninline code you'd want",
    "start": "2637040",
    "end": "2643070"
  },
  {
    "text": "to just do it for two\noperators, operands?",
    "start": "2643070",
    "end": "2648540"
  },
  {
    "text": "But if you had more operands,\nyou'd want to do something special? PROFESSOR: Yeah, you're looking\nin the actual scheme",
    "start": "2648540",
    "end": "2655290"
  },
  {
    "text": "implementation. There's a plus, and a plus\nis some operator. And then if you go look inside\nthe code for plus, you see",
    "start": "2655290",
    "end": "2660630"
  },
  {
    "text": "something called-- I forget-- and-percent plus\nor something like that. And what's going on there is\nthat particular kind of",
    "start": "2660630",
    "end": "2667190"
  },
  {
    "text": "optimization. Because, see, general\nplus takes an arbitrary number of arguments. ",
    "start": "2667190",
    "end": "2674750"
  },
  {
    "text": "So the most general plus says,\noh, if I have an argument list, I'd better cons it up in\nsome list and then figure out",
    "start": "2674750",
    "end": "2682400"
  },
  {
    "text": "how many there were or\nsomething like that. That's terribly inefficient,\nespecially since most of the",
    "start": "2682400",
    "end": "2687819"
  },
  {
    "text": "time you're probably\nadding two numbers. You don't want to really have to\ncons this argument list. So what you'd like to do is build\nthe code for plus with a bunch",
    "start": "2687820",
    "end": "2697050"
  },
  {
    "text": "of entries. So most of what it's\ndoing is the same. However, there might be a\nspecial entry that you'd go to",
    "start": "2697050",
    "end": "2702630"
  },
  {
    "text": "if you knew there were\nonly two arguments. And those you'll put\nin registers. They won't be in an argument\nlist and you won't have to [UNINTELLIGIBLE].",
    "start": "2702630",
    "end": "2709080"
  },
  {
    "text": "That's how a lot of\nthese things work. OK, let's take a break. [MUSIC PLAYING]",
    "start": "2709080",
    "end": "2715696"
  },
  {
    "start": "2715696",
    "end": "2742911"
  }
]