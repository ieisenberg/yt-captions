[
  {
    "start": "0",
    "end": "480000"
  },
  {
    "text": " PROFESSOR: We're into\nchapter 11.",
    "start": "0",
    "end": "6120"
  },
  {
    "text": "I've asked Ashish to hand out\ntoday a revision of the previous version of chapter\n11, plus chapter 12 on the",
    "start": "6120",
    "end": "14140"
  },
  {
    "text": "sum-product algorithm,\nin case we get to it. I'm giving you a complete copy\nof the problem seven solutions",
    "start": "14140",
    "end": "21990"
  },
  {
    "text": "for both weeks, and to get back\non track, we're handing out problem set eight.",
    "start": "21990",
    "end": "28740"
  },
  {
    "text": "There probably will only\nbe one more problem set that you hand in.",
    "start": "28740",
    "end": "33830"
  },
  {
    "text": "All right. We've been getting to the\ncenterpiece of the second half",
    "start": "33830",
    "end": "40350"
  },
  {
    "text": "of the course which is codes\non graphs, which is the way we're going to get to\ncapacity-achieving codes by",
    "start": "40350",
    "end": "48430"
  },
  {
    "text": "building them on graphs of\nlinear complexity and decoding them on the graphs with\niterative decoding.",
    "start": "48430",
    "end": "56750"
  },
  {
    "text": "I frame this in the language\nof behavioral realizations. I say a graph is a realization\nof a code via a behavior,",
    "start": "56750",
    "end": "67180"
  },
  {
    "text": "which is the set of\nall the possible trajectories on the graph. So this is, again, putting it\nin system theory language.",
    "start": "67180",
    "end": "77030"
  },
  {
    "text": "I want to distinguish between\ntwo types of variables. The external ones,\nwhich communicate",
    "start": "77030",
    "end": "83890"
  },
  {
    "text": "with the outside world-- in our case, these will be the\nsymbols in a code word.",
    "start": "83890",
    "end": "89930"
  },
  {
    "text": "These are the ones that are\nactually involved in the code. So these are more or less\npre-specified for us when",
    "start": "89930",
    "end": "95900"
  },
  {
    "text": "we're trying to realize\na code. But we can adjoin auxiliary\nvariables, internal variables,",
    "start": "95900",
    "end": "102660"
  },
  {
    "text": "we often call them state\nvariables, hidden variables, latent variables, which are\nreally there for our",
    "start": "102660",
    "end": "108920"
  },
  {
    "text": "convenience. They're to make the realization\nsimpler, or more elegant in some way, or to have\nproperties, or whatever.",
    "start": "108920",
    "end": "117090"
  },
  {
    "text": "But these are free for us to\nhave because they're inside the box and the world\nnever sees them.",
    "start": "117090",
    "end": "125189"
  },
  {
    "text": "Now, we describe the behavior by\na set of constraints on the variables, which in our case,\nthese are local constraints",
    "start": "125190",
    "end": "133590"
  },
  {
    "text": "that only involves a few of\nthe variables, each one. The idea is to express a global\nbehavior via local",
    "start": "133590",
    "end": "141250"
  },
  {
    "text": "constraints on variables. And in our case, the constraints\nwill be expressed",
    "start": "141250",
    "end": "148410"
  },
  {
    "text": "by equations, as we've seen,\nor in a little bit more generality by little codes,\nwhich will go in to make up",
    "start": "148410",
    "end": "158000"
  },
  {
    "text": "this big code. So in some sense, you can think\nof codes on graphs as being making big codes out of\nlittle codes, making global",
    "start": "158000",
    "end": "165150"
  },
  {
    "text": "codes out of local codes. The behavior, then, is simply\ndefined as the set of all",
    "start": "165150",
    "end": "172290"
  },
  {
    "text": "combinations of variables, both\nexternal and internal, that satisfy all the\nconstraints.",
    "start": "172290",
    "end": "178700"
  },
  {
    "text": "If we can find a set of values\nfor all the variables such that all these local constraints\nare satisfied,",
    "start": "178700",
    "end": "185730"
  },
  {
    "text": "then that's called a valid\ntrajectory, or whatever.",
    "start": "185730",
    "end": "192430"
  },
  {
    "text": "And that's the entire\nbehavior. And the code is simply the set\nof all external variable",
    "start": "192430",
    "end": "201090"
  },
  {
    "text": "n-tuples that occur as parts\nof valid behaviors-- in other words, the projection\nof the behavior just onto the",
    "start": "201090",
    "end": "207370"
  },
  {
    "text": "external variables. All right, so it's an elegant\nand rather implicit way of",
    "start": "207370",
    "end": "212940"
  },
  {
    "text": "describing the code, but we'll\nsee it's very, very powerful. And last time, we talked\nabout various styles of",
    "start": "212940",
    "end": "222210"
  },
  {
    "text": "realizations. I gave you examples of generator\nrepresentations and",
    "start": "222210",
    "end": "229159"
  },
  {
    "text": "parity-check representations. This is really where it all\nstarted, with parity-check representations, where this\nstyle of graphical",
    "start": "229160",
    "end": "236610"
  },
  {
    "text": "representation is\nvery natural. You've got the symbols in the\ncode, those are the only",
    "start": "236610",
    "end": "245950"
  },
  {
    "text": "symbols you need, and you've\ngot parity checks, and the parity checks constrain\nthe symbols. If you've got n minus k parity\nchecks, you get n minus k",
    "start": "245950",
    "end": "253350"
  },
  {
    "text": "constraints. And it's a kernel representation\nin the language",
    "start": "253350",
    "end": "258609"
  },
  {
    "text": "of linear algebra. It's simply the set of all code\nn-tuples that satisfy all",
    "start": "258610",
    "end": "268120"
  },
  {
    "text": "the parity checks. That's it, we don't need\nany hidden variables. In a generator representation,\nthis is a more natural",
    "start": "268120",
    "end": "276620"
  },
  {
    "text": "representation, when we're\ntrying to generate or simulate a code. We want to run through a set\nof inputs that in effect",
    "start": "276620",
    "end": "287530"
  },
  {
    "text": "create all the outputs,\nall the code words. In this case, we don't actually\nsee the inputs as",
    "start": "287530",
    "end": "292720"
  },
  {
    "text": "part of the code words,\nnecessarily. We might, we might not. But we distinguish them in this\nrepresentation and we",
    "start": "292720",
    "end": "299400"
  },
  {
    "text": "regard the inputs as hidden\nvariables, or state variables, if you like. They're part of the realization,\nbut they don't",
    "start": "299400",
    "end": "306340"
  },
  {
    "text": "actually occur in the code\nwords, so they fit into the hidden category.",
    "start": "306340",
    "end": "311940"
  },
  {
    "text": "OK, and we talked about\ntwo styles of graphs.",
    "start": "311940",
    "end": "316990"
  },
  {
    "text": "Tanner graphs, which are older\nand more established. Tanner really wrote the\nfoundation paper in this",
    "start": "316990",
    "end": "322870"
  },
  {
    "text": "subject in 1981. I regard him as the\nfounder of the subject of codes on graphs.",
    "start": "322870",
    "end": "329340"
  },
  {
    "text": "However, like a lot of\ngood papers, his was completely ignored--",
    "start": "329340",
    "end": "334360"
  },
  {
    "text": "that's almost true--\nfor 15 years.",
    "start": "334360",
    "end": "345539"
  },
  {
    "text": "And then it was rediscovered\naround 1995, when people began to wake up to this\nsubject again.",
    "start": "345540",
    "end": "352120"
  },
  {
    "text": "And Tanner graphs really\ncome out of this idea. They were closely associated\nwith that.",
    "start": "352120",
    "end": "357569"
  },
  {
    "text": "We can generalize them\nto be more like this. But it's this simple idea. We have a bipartite graph, we\nmake one class of vertices",
    "start": "357570",
    "end": "365280"
  },
  {
    "text": "into the variables, one class\ninto the constraints, and we simply tie a variable to a\nconstraint when it's involved",
    "start": "365280",
    "end": "373170"
  },
  {
    "text": "in the constraint. And we can generalize it by\nmaking internal and external",
    "start": "373170",
    "end": "378280"
  },
  {
    "text": "variables, which we have\nto distinguish in the picture in some way. And the constraints, initially,\nthey were just",
    "start": "378280",
    "end": "387180"
  },
  {
    "text": "zero-sum constraints and\nparity-check codes. One of the things Tanner did was\nhe said, well, they could be any codes.",
    "start": "387180",
    "end": "392950"
  },
  {
    "text": "A single parity check is like\na single parity-check code.",
    "start": "392950",
    "end": "397970"
  },
  {
    "text": "And we can make any codes\nthe constraints. And the edges don't work very\nhard in the Tanner graph.",
    "start": "397970",
    "end": "404870"
  },
  {
    "text": "They implicitly carry the\nvariables to the constraints so we could label them\nwith the variables.",
    "start": "404870",
    "end": "411505"
  },
  {
    "text": "And we showed how a Tanner\ngraph could always be transformed to this normal\ngraph, which I think is",
    "start": "411506",
    "end": "418479"
  },
  {
    "text": "certainly in more complicated\nsituations, a cleaner way of explaining things, and cleaner\nin a variety of senses.",
    "start": "418480",
    "end": "426480"
  },
  {
    "text": "Here is our taxonomy. Vertices indicate constraints,\nhalf edges",
    "start": "426480",
    "end": "434370"
  },
  {
    "text": "indicate external variables. A half edge is something you can\ntie to another half edge",
    "start": "434370",
    "end": "439810"
  },
  {
    "text": "to form an I/O pad. Edges tie together\ntwo constraints.",
    "start": "439810",
    "end": "445170"
  },
  {
    "text": "They're internal, and\nso these represent the internal variables. And this is cleaner both\nanalytically--",
    "start": "445170",
    "end": "451760"
  },
  {
    "text": "there's this nice duality\ntheorem about normal graphs that I won't be presenting\nto you, and a",
    "start": "451760",
    "end": "456879"
  },
  {
    "text": "couple other things. They're cleaner when you\ncome to implement the sum-product algorithm.",
    "start": "456880",
    "end": "463670"
  },
  {
    "text": "I think they're just generally\ncleaner, but I may be biased. I want you to see both because\nthese still predominate the",
    "start": "463670",
    "end": "470490"
  },
  {
    "text": "literature, although more and\nmore people seem to be using this style of graph,\nand that's what I will use in the course.",
    "start": "470490",
    "end": "476433"
  },
  {
    "text": "All right? So that's a review\nof where we are.",
    "start": "476433",
    "end": "481820"
  },
  {
    "start": "480000",
    "end": "610000"
  },
  {
    "text": "OK. Today we're going to go on to\nother important styles of",
    "start": "481820",
    "end": "488419"
  },
  {
    "text": "realizations, and particularly\nthe next one we'll talk about",
    "start": "488420",
    "end": "494780"
  },
  {
    "text": "is trellis realizations. So this will tie back to all the\nwork we did in chapter 10.",
    "start": "494780",
    "end": "502550"
  },
  {
    "text": "And what did we discover\nin chapter 10? The key to a trellis\nrealization was a",
    "start": "502550",
    "end": "509330"
  },
  {
    "text": "trellis-oriented generator\nmatrix. And again, I will put up our\nfavorite matrix on the board,",
    "start": "509330",
    "end": "520929"
  },
  {
    "text": "the generator of the 8,\n4, 4 Reed-Muller code. ",
    "start": "520929",
    "end": "528440"
  },
  {
    "text": "And in the form we've come\nto know and love, it looks like this.",
    "start": "528440",
    "end": "534510"
  },
  {
    "text": "And what makes it\ntrellis-oriented is that all the starting times are different\nand all the ending",
    "start": "534510",
    "end": "540940"
  },
  {
    "text": "times are different. Therefore these generators\nare as short as possible. The main feature of this\ngenerator that we want to look",
    "start": "540940",
    "end": "548200"
  },
  {
    "text": "at is the spans, the active\nparts of the generators, which",
    "start": "548200",
    "end": "553580"
  },
  {
    "text": "we've made as short\nas possible. And let me explicitly write\nout what they are.",
    "start": "553580",
    "end": "560130"
  },
  {
    "text": "The first generator is active\nfrom symbol time 0 to symbol time 3.",
    "start": "560130",
    "end": "566080"
  },
  {
    "text": "This one is active\nfrom 1 to 6. This one is active\nfrom 2 to 5.",
    "start": "566080",
    "end": "575930"
  },
  {
    "text": "And this one is active\nfrom 4 to 7. OK, so those are the\nactive spans.",
    "start": "575930",
    "end": "582380"
  },
  {
    "text": "And we know from that, we can\nfind the dimensions of minimal state spaces and of minimal\nbranch spaces.",
    "start": "582380",
    "end": "590790"
  },
  {
    "text": "OK, we just count the number of\nactive generators at either of the state times, which are\nbetween the symbols, or the",
    "start": "590790",
    "end": "596690"
  },
  {
    "text": "symbol times themselves\nfor the branches. OK, again, quick review,\nespecially because we have a",
    "start": "596690",
    "end": "604220"
  },
  {
    "text": "few guests here who we haven't\nseen previously in the course. So that's where we've been.",
    "start": "604220",
    "end": "609620"
  },
  {
    "text": "All right. Once you have any generator\nmatrix, or in particular a",
    "start": "609620",
    "end": "617730"
  },
  {
    "start": "610000",
    "end": "1040000"
  },
  {
    "text": "trellis-oriented generator\nmatrix, the code is simply described as the set of all\nlinear combinations of the",
    "start": "617730",
    "end": "627250"
  },
  {
    "text": "matrix elements. And in particular, the code\nsymbol at every time is a",
    "start": "627250",
    "end": "632710"
  },
  {
    "text": "linear combination of the\nmatrix elements in a particular column.",
    "start": "632710",
    "end": "638889"
  },
  {
    "text": "All right, so let's use that to\nget a trellis realization. ",
    "start": "638890",
    "end": "645889"
  },
  {
    "text": "I've done this in\nvarious ways. I'm still not satisfied, though\nthe way that I do it in",
    "start": "645890",
    "end": "652940"
  },
  {
    "text": "the notes is quite notation\nheavy and mathematical.",
    "start": "652940",
    "end": "658830"
  },
  {
    "text": "I hope this picture of what\nwe're going to do is going to give you a totally transparent\nidea of what's going on.",
    "start": "658830",
    "end": "668570"
  },
  {
    "text": "OK, we're going to have\na trellis realization.",
    "start": "668570",
    "end": "675770"
  },
  {
    "text": "Let's write down the\nsymbol times. And I'll write them all the\nway across the board.",
    "start": "675770",
    "end": "681170"
  },
  {
    "text": "0, 1, 2, 3, 4, 5, 6, 7.",
    "start": "681170",
    "end": "686764"
  },
  {
    "text": " And let me save the\ncoefficients, ui, here.",
    "start": "686765",
    "end": "699509"
  },
  {
    "text": "And I'll write them as equality\nconstraints, but you can also think of them as a\nlittle binary shift register.",
    "start": "699510",
    "end": "708200"
  },
  {
    "text": "I'm going to need u1 at\nfour different times. I'm going to need u1 during\nits span at time",
    "start": "708200",
    "end": "715060"
  },
  {
    "text": "0, 1, 2, and 3. So I'll set up a set of\nconstraints here to propagate",
    "start": "715060",
    "end": "721459"
  },
  {
    "text": "u1 between these three times. And u1 is going to be an\ninternal variable.",
    "start": "721460",
    "end": "727470"
  },
  {
    "text": "Strictly, there are three\nreplicas of this internal variable here. And I can pull it out\nat each time, too.",
    "start": "727470",
    "end": "734080"
  },
  {
    "text": "So this is where I'm going\nto keep u1, in effect.",
    "start": "734080",
    "end": "741650"
  },
  {
    "text": "Similarly, u2 I'm going to keep\naround for all the times",
    "start": "741650",
    "end": "748540"
  },
  {
    "text": "that I need it, which\nis these six times. ",
    "start": "748540",
    "end": "759977"
  },
  {
    "text": "OK, so is that six? That's only five.",
    "start": "759978",
    "end": "765280"
  },
  {
    "text": "These are all the times that u2\nis actually involved in the",
    "start": "765280",
    "end": "771120"
  },
  {
    "text": "output symbols, so I'm going\nto have it when I need it. u3 I need for four times.",
    "start": "771120",
    "end": "777136"
  },
  {
    "start": "777136",
    "end": "786839"
  },
  {
    "text": "I've been inconsistent in\nwhether I write the variables or the values of\nthe variables.",
    "start": "786840",
    "end": "792730"
  },
  {
    "text": "In this case, I'm\nwriting values. And finally, u4.",
    "start": "792730",
    "end": "798769"
  },
  {
    "text": "I see I'm going to need more\nthan one board here. ",
    "start": "798770",
    "end": "812300"
  },
  {
    "text": "So now I've got everything\nI need at the time that I need it.",
    "start": "812300",
    "end": "819390"
  },
  {
    "text": "Now, this is going\nto be tricky. ",
    "start": "819390",
    "end": "825260"
  },
  {
    "text": "I'm simply going to have\na linear combination-- call it g0, g1, and so forth--",
    "start": "825260",
    "end": "833709"
  },
  {
    "text": "which is going to create my\noutput at time 0, or time 1,",
    "start": "833710",
    "end": "840810"
  },
  {
    "text": "or time 2, and so forth. ",
    "start": "840810",
    "end": "847170"
  },
  {
    "text": "And you'll agree from this\ngenerator matrix that the output at time 1 is some linear\ncombination of u1.",
    "start": "847170",
    "end": "855870"
  },
  {
    "text": " And the output at time 2 is\nsome linear combination of",
    "start": "855870",
    "end": "864390"
  },
  {
    "text": "these two guys. ",
    "start": "864390",
    "end": "869660"
  },
  {
    "text": "OK, and the output at time 3 is\nsome linear combination of",
    "start": "869660",
    "end": "876100"
  },
  {
    "text": "these three guys,\nand so forth.",
    "start": "876100",
    "end": "882610"
  },
  {
    "text": "You see what I'm doing? So I could describe these as\nsimply a linear constraint.",
    "start": "882610",
    "end": "888000"
  },
  {
    "text": "What are the possible\ncombinations of inputs and outputs in this constraint? And similarly--",
    "start": "888000",
    "end": "894060"
  },
  {
    "text": " and don't make me draw\nthe lines in.",
    "start": "894060",
    "end": "901620"
  },
  {
    "start": "901620",
    "end": "923100"
  },
  {
    "text": "OK, so I claim this is a\nrealization directly from this",
    "start": "923100",
    "end": "933310"
  },
  {
    "text": "trellis-oriented generator\nmatrix. Yes? AUDIENCE: In this example in\nthe generator, g has a 0",
    "start": "933310",
    "end": "942885"
  },
  {
    "text": "[UNINTELLIGIBLE]. PROFESSOR: Right. AUDIENCE: So before, the\ncomponent had to be 0 in the",
    "start": "942885",
    "end": "948450"
  },
  {
    "text": "linear combination? Or are you-- PROFESSOR: I can\ndo it that way.",
    "start": "948450",
    "end": "953710"
  },
  {
    "text": "Clearly, I don't need this\ninput at this time. So I could erase that.",
    "start": "953710",
    "end": "959360"
  },
  {
    "text": "Would that make you\nfeel better? Actually, that gives an\neven better picture.",
    "start": "959360",
    "end": "965840"
  },
  {
    "text": "It's not going to make any\nfundamental difference, but I'm doing this for a generic set\nof generators that cover",
    "start": "965840",
    "end": "972660"
  },
  {
    "text": "these spans. All right? For the particular ones we have\nhere, yes, I can make that further change and\neliminate those two inputs.",
    "start": "972660",
    "end": "982779"
  },
  {
    "text": "But I'm shortly going to\naggregate this and put it in a",
    "start": "982780",
    "end": "989170"
  },
  {
    "text": "more aggregated form. And what's happening internally\nhere then won't matter to us very much.",
    "start": "989170",
    "end": "996899"
  },
  {
    "text": "OK. And notice that I can regard\nthis as the branch",
    "start": "996900",
    "end": "1004970"
  },
  {
    "text": "space at this time. And it has the right dimension\nfor the branch space at each",
    "start": "1004970",
    "end": "1011269"
  },
  {
    "text": "of these times. And let me take it a\nlittle more slowly.",
    "start": "1011270",
    "end": "1016680"
  },
  {
    "text": "First, I claim it's\na realization. If I built that thing with\nthe appropriate linear",
    "start": "1016680",
    "end": "1021730"
  },
  {
    "text": "combinations here, then the\nbehavior of this is basically the set of all u's and y's\nthat satisfy all these",
    "start": "1021730",
    "end": "1030589"
  },
  {
    "text": "constraints. And if I just look at the\noutputs, that's the set of all code words.",
    "start": "1030589",
    "end": "1035949"
  },
  {
    "text": "So I've constructed a behavioral\nrealization in a certain way.",
    "start": "1035950",
    "end": "1042699"
  },
  {
    "start": "1040000",
    "end": "1230000"
  },
  {
    "text": "OK, and now I'm going to\nstart to aggregate. Aggregate just means drawing\nlines around sub-graphs.",
    "start": "1042700",
    "end": "1052016"
  },
  {
    "text": "Or sometimes in the notes, I\ncall this agglomeration. ",
    "start": "1052016",
    "end": "1058190"
  },
  {
    "text": "So I'm going to regard all this\nas one constraint on the",
    "start": "1058190",
    "end": "1063700"
  },
  {
    "text": "variables that come\nout of this. The constraints that are\naffected by this",
    "start": "1063700",
    "end": "1070140"
  },
  {
    "text": "agglomeration-- the variables that are affected\nare y0 and u1.",
    "start": "1070140",
    "end": "1075210"
  },
  {
    "text": "OK, so this I can draw-- let me draw it this way--",
    "start": "1075210",
    "end": "1082019"
  },
  {
    "text": "as a little constraint code\nwhich operates at time 0. And it's a linear 2, 1 code that\nbasically ties together",
    "start": "1082020",
    "end": "1091450"
  },
  {
    "text": "y0 and u1, whatever the\nrelationship between them is.",
    "start": "1091450",
    "end": "1098909"
  },
  {
    "text": "It probably is the\ny0 equals u1. ",
    "start": "1098910",
    "end": "1104399"
  },
  {
    "text": "The first generator starts\nat this time. That's about the only\nthing it could be. Similarly, I'm going to\naggregate all this part of the",
    "start": "1104400",
    "end": "1111990"
  },
  {
    "text": "realization here and consider\nit a big block, or a big constraint.",
    "start": "1111990",
    "end": "1117390"
  },
  {
    "text": " At time 1, there's some\nconstraint that affects",
    "start": "1117390",
    "end": "1123340"
  },
  {
    "text": "y1 and u1 and u2.",
    "start": "1123340",
    "end": "1130760"
  },
  {
    "text": "So this is a little\n4, 2 code on the four incident variables. One of the constraints is\nthat u1 on this side",
    "start": "1130760",
    "end": "1138640"
  },
  {
    "text": "equals u1 on this side. These are really two replicas\nof the same thing. So there's an equality\nconstraint",
    "start": "1138640",
    "end": "1144240"
  },
  {
    "text": "propagating through there. Then I have some function of y1\nas a function of u1, which",
    "start": "1144240",
    "end": "1150559"
  },
  {
    "text": "I'm going to regard as the\nstate at this time. And u1 and u2, let me call that\nstate space at time 1.",
    "start": "1150560",
    "end": "1159300"
  },
  {
    "text": "Let me call this at time 0,\nlet me call this the state space at time 1.",
    "start": "1159300",
    "end": "1164630"
  },
  {
    "text": "And I did go through a\ndevelopment where I showed that these u's could be regarded\nas the components of",
    "start": "1164630",
    "end": "1171580"
  },
  {
    "text": "the state spaces. This is a more constructive way\nof seeing the same thing.",
    "start": "1171580",
    "end": "1177730"
  },
  {
    "text": "And notice they have the\nright dimensions. So the states are what carry the\ninformation from time 0 to",
    "start": "1177730",
    "end": "1185330"
  },
  {
    "text": "time 1, just as we would want. They kind of embody the\nMarkov property. Yes?",
    "start": "1185330",
    "end": "1190662"
  },
  {
    "text": "AUDIENCE: Why is c0 length 2? PROFESSOR: Why is c0--",
    "start": "1190662",
    "end": "1196308"
  },
  {
    "text": "AUDIENCE: Length 2. PROFESSOR: Length 2. Because it affects two bits. AUDIENCE: Thank you. PROFESSOR: It affects\nthese two bits.",
    "start": "1196308",
    "end": "1202610"
  },
  {
    "text": " Let's see, how did I know that\nthere's only one possible",
    "start": "1202610",
    "end": "1210340"
  },
  {
    "text": "constraint here? Because that's the dimension\nof the branch space. It's really all determined\nby u1.",
    "start": "1210340",
    "end": "1218390"
  },
  {
    "text": "Over here, however, it's\ndetermined by u1 and u2. So the dimension is 2. u1 and\nu2 are free, And the others",
    "start": "1218390",
    "end": "1226550"
  },
  {
    "text": "are fixed once we know those. So I was a little ahead\nof myself there.",
    "start": "1226550",
    "end": "1232559"
  },
  {
    "start": "1230000",
    "end": "1580000"
  },
  {
    "text": "And similarly, let's keep\ndrawing in this fashion, here's a constraint code at\ntime 2 which relates these",
    "start": "1232560",
    "end": "1243660"
  },
  {
    "text": "possible variables, u1, u2, u3,\nwhich I'm going to call",
    "start": "1243660",
    "end": "1248840"
  },
  {
    "text": "the state space at time 2.",
    "start": "1248840",
    "end": "1254710"
  },
  {
    "text": "So my times are not\nwhat I expect.",
    "start": "1254710",
    "end": "1260710"
  },
  {
    "text": "But it's always really a problem\nto keep the indexes consistent.",
    "start": "1260710",
    "end": "1266440"
  },
  {
    "text": "We want state time 1 to occur\nafter the first symbol.",
    "start": "1266440",
    "end": "1274330"
  },
  {
    "text": "So this should be state time 2,\nthis should be state time 3 to be consistent with\nwhat's in the notes.",
    "start": "1274330",
    "end": "1281110"
  },
  {
    "text": "I'm sorry.  And so forth.",
    "start": "1281110",
    "end": "1286460"
  },
  {
    "text": "What is the length\nof this code? It's simply the number of bits\nthat it controls, which is 6.",
    "start": "1286460",
    "end": "1293960"
  },
  {
    "text": "1, 2, 3, 4, 5, 6. What's the dimension?",
    "start": "1293960",
    "end": "1299290"
  },
  {
    "text": "It's 3, because u1, u2, u3 are\nfree if I only look at this",
    "start": "1299290",
    "end": "1306710"
  },
  {
    "text": "constraint independent\nof everything else. ",
    "start": "1306710",
    "end": "1312056"
  },
  {
    "text": "OK, and continuing this way,\nat this point, you notice I only have u2 and u3.",
    "start": "1312056",
    "end": "1319320"
  },
  {
    "text": "So my state space at time 4 has\ngone down in dimension. ",
    "start": "1319320",
    "end": "1325620"
  },
  {
    "text": "And here I have c3, which is,\nagain, a 6, 3 code, and so",
    "start": "1325620",
    "end": "1332630"
  },
  {
    "text": "forth, as I go ahead. Let me just draw it.",
    "start": "1332630",
    "end": "1338900"
  },
  {
    "text": "This is also a 6, 3. ",
    "start": "1338900",
    "end": "1344059"
  },
  {
    "text": "This is time 5. ",
    "start": "1344060",
    "end": "1353288"
  },
  {
    "text": "I have the state space\nat time 6. ",
    "start": "1353288",
    "end": "1362740"
  },
  {
    "text": "This is back down to 1, 4.",
    "start": "1362740",
    "end": "1369250"
  },
  {
    "text": "It's symmetrical on this\nside, as you know. ",
    "start": "1369250",
    "end": "1387179"
  },
  {
    "text": "So that's my trellis\nrealization. And I claim this, too, is a\nrealization, in the sense that",
    "start": "1387180",
    "end": "1394780"
  },
  {
    "text": "any combination of u's and y's\nthat satisfy all of these constraints is a legitimate\ntrajectory.",
    "start": "1394780",
    "end": "1403300"
  },
  {
    "text": "And the set of all y's that are\npart of those legitimate trajectories form the code.",
    "start": "1403300",
    "end": "1409350"
  },
  {
    "text": "In fact, it's pretty explicit\nhere that the dimension of the",
    "start": "1409350",
    "end": "1414630"
  },
  {
    "text": "code is 4, corresponding\nto u1, u2, u3. So I have 8 outputs, I have\n16 possible behaviors.",
    "start": "1414630",
    "end": "1425039"
  },
  {
    "text": "I pick off the combinations of\nu's and y's that could make that, which is basically\ndetermined by this matrix.",
    "start": "1425040",
    "end": "1433430"
  },
  {
    "text": "And I just pick off the y's\nand that's my 8, 4 code. OK, so that's what trellis\nlooks like.",
    "start": "1433430",
    "end": "1443720"
  },
  {
    "text": "The constraint code really\nembodies the branches. ",
    "start": "1443720",
    "end": "1449760"
  },
  {
    "text": "This encapsulates everything\nthat can happen at time 0. This encapsulates everything\nthat could happen at time 1.",
    "start": "1449760",
    "end": "1457370"
  },
  {
    "text": "The u's are really\nmy state spaces. This constrains state, output,\nnext state, in nice linear",
    "start": "1457370",
    "end": "1467180"
  },
  {
    "text": "system theories style. This tells me what combinations\nof state, output, next state, I can have\nat time 2, and so",
    "start": "1467180",
    "end": "1475020"
  },
  {
    "text": "forth across the board. So the constraints are\nlocal constraints--",
    "start": "1475020",
    "end": "1480240"
  },
  {
    "text": "local in time, in this sense-- that constrain what can happen\nas you get to the next state.",
    "start": "1480240",
    "end": "1486470"
  },
  {
    "text": "Once you get to the next state,\nthis state has the Markov property. This is all that the memory you\nneed of the past in order",
    "start": "1486470",
    "end": "1492470"
  },
  {
    "text": "to determine the future, or\nthe whole set of future possibilities.",
    "start": "1492470",
    "end": "1498380"
  },
  {
    "text": "Each of these is a linear\nvector space",
    "start": "1498380",
    "end": "1503610"
  },
  {
    "text": "over the ground field. In fact, it's just the space\nof 1-tuples, 2-tuples, 3-tuples, 2-tuples,\nand so forth.",
    "start": "1503610",
    "end": "1510570"
  },
  {
    "text": "And it has certain dimension,\nin this case, equal to its size.",
    "start": "1510570",
    "end": "1516169"
  },
  {
    "text": "And if you calculate\nthe dimensions of-- call this the state space,\ncall this the branch",
    "start": "1516170",
    "end": "1524289"
  },
  {
    "text": "constraint code if you like,\nor the branch space, it's isomorphic, the dimensions are\nminimal here by construction",
    "start": "1524290",
    "end": "1533190"
  },
  {
    "text": "from the trellis-oriented\ngenerator matrix. If we want to know the minimal\nsize of the state space at",
    "start": "1533190",
    "end": "1541600"
  },
  {
    "text": "time 4 here in the center, we\njust calculate the number of",
    "start": "1541600",
    "end": "1548740"
  },
  {
    "text": "generators that are active at\ntime 4, and that's precisely what we're going to get over\nthere, too, by our",
    "start": "1548740",
    "end": "1553850"
  },
  {
    "text": "construction. If we want to compute the\ndimension of the branch space at time 3, it's the number\nof active generators",
    "start": "1553850",
    "end": "1561630"
  },
  {
    "text": "at symbol time 3. There are 3 active ones, and\nwe've just forced this to have",
    "start": "1561630",
    "end": "1566960"
  },
  {
    "text": "that structure. So this is a normal graph of a\nminimal trellis realization of",
    "start": "1566960",
    "end": "1577350"
  },
  {
    "text": "the 8, 4 code. OK? So we can clearly do that\nfor any code, right?",
    "start": "1577350",
    "end": "1584820"
  },
  {
    "text": "For any code, we can find a trellis-oriented generator matrix. We can go through these steps,\nand we'll always come up with",
    "start": "1584820",
    "end": "1590130"
  },
  {
    "text": "something that looks like\nthis down here.  OK, now, what are the properties\nof this graph?",
    "start": "1590130",
    "end": "1597990"
  },
  {
    "text": "Does it have cycles? ",
    "start": "1597990",
    "end": "1608600"
  },
  {
    "text": "Does this graph have cycles? Anybody? \"No,\" is one answer I get.",
    "start": "1608600",
    "end": "1614580"
  },
  {
    "text": "What's the other possible\nanswer? How many people say no, and\nhow many people say yes?",
    "start": "1614580",
    "end": "1620200"
  },
  {
    "text": "I want to see a show of hands. How many people think this\ngraph is cycle free? ",
    "start": "1620200",
    "end": "1627160"
  },
  {
    "text": "OK, and how many people think\nthat it has cycles?",
    "start": "1627160",
    "end": "1632430"
  },
  {
    "text": "OK, the majority is wrong. This graph clearly has cycles.",
    "start": "1632430",
    "end": "1637820"
  },
  {
    "text": "Here are two edges here,\nand here's a cycle. ",
    "start": "1637820",
    "end": "1644179"
  },
  {
    "text": "OK, so as a graph, it has cycles\nbecause it has multiple edges going between\nthese constraints.",
    "start": "1644180",
    "end": "1650525"
  },
  {
    "start": "1650000",
    "end": "2065000"
  },
  {
    "text": " All right, so a good thing\nto do is to make this a",
    "start": "1650525",
    "end": "1659080"
  },
  {
    "text": "cycle-free graph, and that's\njust a matter of regarding",
    "start": "1659080",
    "end": "1665860"
  },
  {
    "text": "this as instead of two binary\nvariables, we regard it as one quaternary variable.",
    "start": "1665860",
    "end": "1673149"
  },
  {
    "text": "All right, so we're going to\nregard this as a single binary",
    "start": "1673150",
    "end": "1682540"
  },
  {
    "text": "variable of dimension one. This is a quaternary\nstate space. There are 4 possible\nstates here.",
    "start": "1682540",
    "end": "1688910"
  },
  {
    "text": "So the dimension of the state\nspace at this time is 2. So when I draw abbreviations\nlike this, you can think of",
    "start": "1688910",
    "end": "1701050"
  },
  {
    "text": "them as being decomposable\ninto binary variables, if you like.",
    "start": "1701050",
    "end": "1707660"
  },
  {
    "text": "But the advantage of drawing\nthem as larger variables, higher-valued variables,\nis that now does this",
    "start": "1707660",
    "end": "1718460"
  },
  {
    "text": "graph have a cycle? ",
    "start": "1718460",
    "end": "1723789"
  },
  {
    "text": "No, this graph is cycle free. I've just gotten rid of all\nthe possible cycles.",
    "start": "1723790",
    "end": "1731880"
  },
  {
    "text": "How can you tell if a\ngraph is cycle free? Various ways.",
    "start": "1731880",
    "end": "1737500"
  },
  {
    "text": "I think the most elegant one is\nto say if every edge is by itself a cut-set, then the\ngraph is cycle free.",
    "start": "1737500",
    "end": "1743740"
  },
  {
    "text": "If I remove any edge,\nthen I decompose the graph into two parts.",
    "start": "1743740",
    "end": "1751010"
  },
  {
    "text": "And that's clearly true\nof this graph. We don't really have to\ntest the half edges. In fact, this is kind\nof the defining",
    "start": "1751010",
    "end": "1758160"
  },
  {
    "text": "concept of a state space. A state space is kind\nof a cut between the past and the future.",
    "start": "1758160",
    "end": "1764320"
  },
  {
    "text": "When we asked about the minimal\nstate space, we asked what's the minimal dimension of\nthe information, the state,",
    "start": "1764320",
    "end": "1771830"
  },
  {
    "text": "that we need to pass from\nthe past to the future? And so states correspond\nto cuts.",
    "start": "1771830",
    "end": "1779140"
  },
  {
    "text": "If we make each state space,\nif we consider it to be a",
    "start": "1779140",
    "end": "1785120"
  },
  {
    "text": "single variable, then we get\njust a chain graph on a",
    "start": "1785120",
    "end": "1793830"
  },
  {
    "text": "sequential time axis, as is\nconventional in system theory, as your conventional\ninteger-time axis for discrete",
    "start": "1793830",
    "end": "1802100"
  },
  {
    "text": "time systems. In this case, it only has a\nfinite number of times where anything happens.",
    "start": "1802100",
    "end": "1807380"
  },
  {
    "text": "But you can think of\nthis as part of the infinite set of integers. And so this is everything\nthat happens.",
    "start": "1807380",
    "end": "1813150"
  },
  {
    "text": "And a trellis is always going\nto be very boring. It's always going to\nlook like this. But the advantage of now we\nhave this cycle-free graph",
    "start": "1813150",
    "end": "1822270"
  },
  {
    "text": "realization, we'll find out that\nwe can do exact decoding of cycle-free realizations\nusing the sum-product",
    "start": "1822270",
    "end": "1829870"
  },
  {
    "text": "algorithm, or the min-sum\nalgorithm, which in this case",
    "start": "1829870",
    "end": "1835470"
  },
  {
    "text": "kind of reduces to the Viterbi\nalgorithm with an asterisk on it.",
    "start": "1835470",
    "end": "1840820"
  },
  {
    "text": "And the cost of doing that is\nthat now have to instead of",
    "start": "1840820",
    "end": "1846159"
  },
  {
    "text": "considering two binary variables\nhere, I have to consider a single variable that\nhas four possible states.",
    "start": "1846160",
    "end": "1852500"
  },
  {
    "text": "So basically, I'm going to be\ncarrying messages which are vectors indexed by the state\nspace across here.",
    "start": "1852500",
    "end": "1861370"
  },
  {
    "text": "And in this case, the vector is\ngoing to have to have four elements, which are going to be\nlikelihoods or metrics or",
    "start": "1861370",
    "end": "1867419"
  },
  {
    "text": "weights of some kind. It's basically telling me what's\nthe weight of each of",
    "start": "1867420",
    "end": "1873510"
  },
  {
    "text": "the four possible survivors,\nif you can think of the trellis that goes with this. Or here, I'm going to\nneed to carry a",
    "start": "1873510",
    "end": "1878820"
  },
  {
    "text": "vector with 8 elements. So it takes more to specify a\nvector with 8 elements than 3",
    "start": "1878820",
    "end": "1887960"
  },
  {
    "text": "vectors each with\ntwo elements. So by aggregating these, I've\ncreated a sort of exponential",
    "start": "1887960",
    "end": "1895220"
  },
  {
    "text": "complexity situation as these\nstate spaces get very big.",
    "start": "1895220",
    "end": "1900760"
  },
  {
    "text": "But on the other hand,\nI get cycle freedom. All right? Yeah. AUDIENCE: There's no real\ndifference between this and",
    "start": "1900760",
    "end": "1906270"
  },
  {
    "text": "what you had before, right?  PROFESSOR: As President Clinton\nmight have said, it",
    "start": "1906270",
    "end": "1913040"
  },
  {
    "text": "depends what the definition\nof \"real\" is. What do you mean by\nreal difference?",
    "start": "1913040",
    "end": "1919920"
  },
  {
    "text": "I mean, sure. We think of something u1, u2,\nyou can think of that as two",
    "start": "1919920",
    "end": "1927670"
  },
  {
    "text": "binary variables or a single\nquaternary variable. Is there any real difference\nbetween that?",
    "start": "1927670",
    "end": "1933539"
  },
  {
    "text": "Well, when we actually go to\nthe implement decoding algorithms, we'll find there is\na real difference in which attitude you take.",
    "start": "1933540",
    "end": "1940260"
  },
  {
    "text": "But mathematically, it's a\ndistinction with hardly any difference.",
    "start": "1940260",
    "end": "1945420"
  },
  {
    "text": "AUDIENCE: So then there's no\nfundamental difference between the cycle freeness\nand the cycle--",
    "start": "1945420",
    "end": "1951110"
  },
  {
    "text": "PROFESSOR: No, you'll see\nthis real difference-- ",
    "start": "1951110",
    "end": "1956570"
  },
  {
    "text": "there is another real,\nsignificant difference. If I drew this as two binary\nvariables, I have",
    "start": "1956570",
    "end": "1961662"
  },
  {
    "text": "a graph with cycles. And we'll find that I can't\ndo exact decoding with a",
    "start": "1961662",
    "end": "1967840"
  },
  {
    "text": "sum-product algorithm on\na graph with cycles. So if I tried to apply that\nalgorithm to this, I'd sort of",
    "start": "1967840",
    "end": "1975720"
  },
  {
    "text": "iterate around this\nlittle cycle. Whereas if I agglomerate them\ninto a single variable, I get",
    "start": "1975720",
    "end": "1982360"
  },
  {
    "text": "rid of that behavior. And I can summarize everything\nin four values.",
    "start": "1982360",
    "end": "1988940"
  },
  {
    "text": "So in that sense, it's\na huge difference. AUDIENCE: Can I always transform\nthis whole graph",
    "start": "1988940",
    "end": "1994559"
  },
  {
    "text": "into cycle-free graph using\nthis kind of technique? PROFESSOR: I didn't get the\nfirst part of your question.",
    "start": "1994560",
    "end": "2000070"
  },
  {
    "text": "AUDIENCE: Can I always transform\nthe graph with cycles to a cycle-free\ngraph using this--",
    "start": "2000070",
    "end": "2005659"
  },
  {
    "text": "combining those-- PROFESSOR: Yeah, OK. So this agglomeration technique\nof drawing lines",
    "start": "2005660",
    "end": "2015179"
  },
  {
    "text": "around sub-graphs and then\nconsidering everything inside there to be a constraint, and\nall the variables coming out--",
    "start": "2015180",
    "end": "2023480"
  },
  {
    "text": "well, it depends on their\ntopology, but I can group the variables coming out\nhowever I want--",
    "start": "2023480",
    "end": "2029420"
  },
  {
    "text": "yes, I can always do that. AUDIENCE: So we can always\ndo that for things [UNINTELLIGIBLE]",
    "start": "2029420",
    "end": "2036688"
  },
  {
    "text": "transform the graph\ninto cycle free. PROFESSOR: Right. But we may find that to make it\ncycle free, I then have to",
    "start": "2036688",
    "end": "2048020"
  },
  {
    "text": "aggregate all the edges into a\nsingle edge between any two parts of the graph.",
    "start": "2048020",
    "end": "2053480"
  },
  {
    "text": "And that may radically increase\nthe complexity. And I'll give you several\nexamples of that today.",
    "start": "2053480",
    "end": "2060530"
  },
  {
    "text": "So these little fine points\nall of a sudden loom large when we actually come\nto build something.",
    "start": "2060530",
    "end": "2067649"
  },
  {
    "start": "2065000",
    "end": "2240000"
  },
  {
    "text": "Let me give you another\nexample of that. A very fine example would\nbe to say, what does",
    "start": "2067650",
    "end": "2073109"
  },
  {
    "text": "sectionalization consist of? We talked about\nsectionalization. Suppose we want to get a trellis\ngraph for a 4-section",
    "start": "2073110",
    "end": "2084120"
  },
  {
    "text": "trellis, where we take\npairs of variables. Well, the graph realization of\nthat is simply obtained by",
    "start": "2084120",
    "end": "2092230"
  },
  {
    "text": "agglomerating pairs of these\nblocks, like that.",
    "start": "2092230",
    "end": "2099450"
  },
  {
    "text": "OK, so let me do that, and then\nlet me see what I've got.",
    "start": "2099450",
    "end": "2105250"
  },
  {
    "text": "I've now got here, a constraint that affects two variables.",
    "start": "2105250",
    "end": "2110580"
  },
  {
    "text": "Well, first of all, I've now got\nonly two visible bits in",
    "start": "2110580",
    "end": "2116100"
  },
  {
    "text": "each of the state variables. Here I have u1, u2, here\nI have u2, u3, here i have u3, u4.",
    "start": "2116100",
    "end": "2122960"
  },
  {
    "text": "So we get rid of some of\nthis state complexity.",
    "start": "2122960",
    "end": "2128830"
  },
  {
    "text": "We did this trick in another\nway before, by sectionalization. So we get rid of a lot of state\nspaces, including ones",
    "start": "2128830",
    "end": "2136240"
  },
  {
    "text": "that are big. Let's see, what do\nwe have here? This is now a code which has\ngot two bits coming in, two",
    "start": "2136240",
    "end": "2146160"
  },
  {
    "text": "bits coming out. It's a 4, 2 code. It's basically controlled\nby u1 and u2.",
    "start": "2146160",
    "end": "2151690"
  },
  {
    "text": "Probably y0 and y1 are\nsome simple linear function of u1 and u2.",
    "start": "2151690",
    "end": "2157319"
  },
  {
    "text": "So this is a 4, 2\nconstraint code. It controls these two bits and\nthese two state bits, these",
    "start": "2157320",
    "end": "2165870"
  },
  {
    "text": "two symbol bits, and these\ntwo state bits. What is this over here now? We've got 2, 2, 2.",
    "start": "2165870",
    "end": "2173530"
  },
  {
    "text": "So this is going to be\na code of length 6. And what dimension?",
    "start": "2173530",
    "end": "2179940"
  },
  {
    "text": "This is, remember, u2, u3. So this whole behavior here is\naffected by u1, u2, and u3, it",
    "start": "2179940",
    "end": "2186880"
  },
  {
    "text": "has dimension 3. Or there's a shortcut I can\ndo here, because this is a",
    "start": "2186880",
    "end": "2192200"
  },
  {
    "text": "self-dual code, all of\nthese little codes are going to be self-dual. Well, they're not going to be\nself-dual, but they're going",
    "start": "2192200",
    "end": "2198830"
  },
  {
    "text": "to be rate 1/2. Half as many bits here\nas they do here.",
    "start": "2198830",
    "end": "2204800"
  },
  {
    "text": " But that's another duality\ntheorem that we won't prove.",
    "start": "2204800",
    "end": "2212569"
  },
  {
    "text": "OK, and symmetrically, we get\nanother code here, which is a 6, 3 code, and another\none here.",
    "start": "2212570",
    "end": "2221350"
  },
  {
    "text": "So we can do this. The reason I call this styles\nof realization is there's",
    "start": "2221350",
    "end": "2227210"
  },
  {
    "text": "obviously a lot of freedom\nin how we want to depict the code. And depending on how we depict\nit, when we get to decoding",
    "start": "2227210",
    "end": "2234890"
  },
  {
    "text": "algorithms, it may affect the\ncomplexity of the algorithms. So we want to find a nice\nway of depicting it.",
    "start": "2234890",
    "end": "2240380"
  },
  {
    "text": "AUDIENCE: I don't understand why\nyou-- so you want the ... freedom ... is [INAUDIBLE],\nbecause you would only have two [UNINTELLIGIBLE] to be\nused [UNINTELLIGIBLE].",
    "start": "2240380",
    "end": "2246470"
  },
  {
    "text": "And then you have two\n[UNINTELLIGIBLE] u1 and u2. [UNINTELLIGIBLE] u2 and 3.",
    "start": "2246470",
    "end": "2251730"
  },
  {
    "text": "PROFESSOR: There are two\nbits here, two bits here, two bits here.",
    "start": "2251730",
    "end": "2257079"
  },
  {
    "text": "AUDIENCE: But that's 6. That's 6. [INAUDIBLE] PROFESSOR: Weight\n6, all right. AUDIENCE: [INAUDIBLE] freedom\nthat you talk about. PROFESSOR: How many\npossibilities are there for",
    "start": "2257080",
    "end": "2263780"
  },
  {
    "text": "these 6 bits? I've got to consider all\npossible combinations of u1, u2, and u3 to drive what's\nhappening in these two times.",
    "start": "2263780",
    "end": "2271810"
  },
  {
    "text": " If I go back here and look at\nthose two times, I see that",
    "start": "2271810",
    "end": "2278940"
  },
  {
    "text": "there are three generators that\nI've got to consider, these three.",
    "start": "2278940",
    "end": "2284890"
  },
  {
    "text": "All right, so for all eight\npossible linear combinations of those three generators,\nI'll get different",
    "start": "2284890",
    "end": "2292250"
  },
  {
    "text": "combinations of these\nsix bits here. ",
    "start": "2292250",
    "end": "2302650"
  },
  {
    "text": "And I can go further. Actually, at the end of the day,\nI concluded here, we said",
    "start": "2302650",
    "end": "2309050"
  },
  {
    "text": "the idea of sectionalization was\nto sectionalize as far as possible without increasing the\nbranch complexity, which",
    "start": "2309050",
    "end": "2316820"
  },
  {
    "text": "we've now translated into this\nconstraint code complexity. And so it's even better to\njust keep aggregating.",
    "start": "2316820",
    "end": "2325310"
  },
  {
    "text": "Consider the first half. And this is 1, 2, 3, 4,\ntwo bits there is",
    "start": "2325310",
    "end": "2330740"
  },
  {
    "text": "still only a 6, 3 code. And the second half is still\nonly a 6, 3 code.",
    "start": "2330740",
    "end": "2338390"
  },
  {
    "text": "When we get to the sum-product\nalgorithm, that means we have to compute eight things when\nwe get to this node.",
    "start": "2338390",
    "end": "2344560"
  },
  {
    "text": " Maybe it's a slightly more\ncomplicated thing, but as long",
    "start": "2344560",
    "end": "2350530"
  },
  {
    "text": "as we keep the dimension down to\n3, we're only going to have to compute eight things. So we haven't really increased\nthe decoding complexity at all",
    "start": "2350530",
    "end": "2358790"
  },
  {
    "text": "by doing this. So that we consider to be our\nbest sectionalization.",
    "start": "2358790",
    "end": "2365753"
  },
  {
    "text": "And if we tried to aggregate\nthese two, what would we get? We'd simply get the eight bits\nhere, we get a constraint that",
    "start": "2365753",
    "end": "2374020"
  },
  {
    "text": "says it's an 8, 4 constraint, it\nsays these eight bits have got to be in the code.",
    "start": "2374020",
    "end": "2380660"
  },
  {
    "text": "So we only go that far, because\nthat would increase the complexity to 16.",
    "start": "2380660",
    "end": "2386020"
  },
  {
    "text": "All right, so that's our\nminimal trellis. We call it a two-section trellis\nwhere the symbol bits",
    "start": "2386020",
    "end": "2394040"
  },
  {
    "text": "have been grouped\ninto 4-tuples. And for decoding, that's\nthe simplest one.",
    "start": "2394040",
    "end": "2401560"
  },
  {
    "start": "2400000",
    "end": "2465000"
  },
  {
    "start": "2401560",
    "end": "2407150"
  },
  {
    "text": "So you see what kind of games\nwe can play here. Yeah? AUDIENCE: At the beginning of\nthis process, you started at",
    "start": "2407150",
    "end": "2413043"
  },
  {
    "text": "the [UNINTELLIGIBLE]. PROFESSOR: Well, you remember\nin more detail how we",
    "start": "2413043",
    "end": "2421200"
  },
  {
    "text": "concluded this was the optimal\nsectionalization. We looked at time 3,\nin particular.",
    "start": "2421200",
    "end": "2426265"
  },
  {
    "text": "And we said there are three\ngenerators that are active at time 3. So I'm going to expand that as\nfar as I can without bringing",
    "start": "2426265",
    "end": "2433150"
  },
  {
    "text": "any more generators\ninto the picture. So I can't expand it over here,\nbecause I'll hit u4.",
    "start": "2433150",
    "end": "2438370"
  },
  {
    "text": "But I can expand it as far\nas I want over here. And that's the way\nwe sectionalize. AUDIENCE: So do you always start\nwith [UNINTELLIGIBLE]?",
    "start": "2438370",
    "end": "2444920"
  },
  {
    "text": "PROFESSOR: Well, there's\nsome art in this. Here it's kind of obvious\nwhere to do it.",
    "start": "2444920",
    "end": "2451480"
  },
  {
    "text": "And I give two heuristic\nalgorithms in the notes on sectionalization, which we'll\ncome up with basically the",
    "start": "2451480",
    "end": "2459020"
  },
  {
    "text": "same thing. But for simple codes, you\ncan just eyeball it.",
    "start": "2459020",
    "end": "2464320"
  },
  {
    "text": "OK, so let's see. That's another general and\nvery useful style of",
    "start": "2464320",
    "end": "2472630"
  },
  {
    "start": "2465000",
    "end": "2505000"
  },
  {
    "text": "realization. It's a trellis realization,\nor a sectionalized trellis realization. Is there anything else I wanted\nto say about that?",
    "start": "2472630",
    "end": "2480780"
  },
  {
    "text": "We can do it so that we get\nminimal branch and state spaces, or constraint\ncomplexities.",
    "start": "2480780",
    "end": "2488190"
  },
  {
    "text": "It's cycle free if we aggregate\nthe states into a single state space.",
    "start": "2488190",
    "end": "2494599"
  },
  {
    "text": "Sectionalization, we\ntalked about that. OK, so let me leave that up,\nbecause we're of course not",
    "start": "2494600",
    "end": "2501050"
  },
  {
    "text": "done with that.  Now let me talk about some\ngeneral properties of graph",
    "start": "2501050",
    "end": "2508100"
  },
  {
    "text": "realizations. ",
    "start": "2508100",
    "end": "2520610"
  },
  {
    "text": "And the most important thing I'm\ngoing to talk about here is the cut-set bound.",
    "start": "2520610",
    "end": "2526170"
  },
  {
    "text": " I want to get across the idea\nthat a graph really captures",
    "start": "2526170",
    "end": "2535950"
  },
  {
    "text": "dependency relationships. If variables are incident on\nthe same node, they're",
    "start": "2535950",
    "end": "2542500"
  },
  {
    "text": "obviously all dependent. Or if you think of larger sets\nof variables aggregated in this way, then they're\nsomehow dependent.",
    "start": "2542500",
    "end": "2550040"
  },
  {
    "text": "Variables that are very far\naway on the graph are less dependent on each other than\nones that are close to each",
    "start": "2550040",
    "end": "2555509"
  },
  {
    "text": "other on the graph. This is all kind of vague\nand woolly statements. Let's see if we can make\nthem more concrete.",
    "start": "2555510",
    "end": "2564190"
  },
  {
    "text": "First of all, there's a very\nsimple but important observation that --",
    "start": "2564190",
    "end": "2572598"
  },
  {
    "text": "I'll put it this way-- disconnected if and only\nif independent.",
    "start": "2572598",
    "end": "2583215"
  },
  {
    "text": "What does this mean? If I have a disconnected graph,\nlet's suppose I have",
    "start": "2583215",
    "end": "2590930"
  },
  {
    "text": "one graph over here with certain\nexternal variables. Let me aggregate them all into\ny1 and some constraint 1 over",
    "start": "2590930",
    "end": "2599420"
  },
  {
    "text": "here, and a completely separate\ngraph, some different",
    "start": "2599420",
    "end": "2605380"
  },
  {
    "text": "code over here, c2, constraining\nsome separate set of variables, y2.",
    "start": "2605380",
    "end": "2610570"
  },
  {
    "text": " OK, that's a disconnected\ngraph realization.",
    "start": "2610570",
    "end": "2617550"
  },
  {
    "text": "It has to look like\nthat, right? So we're aggregating the two\ndisconnected halves.",
    "start": "2617550",
    "end": "2624115"
  },
  {
    "text": "All right, what can I say? What code does this\ngraph realize? ",
    "start": "2624115",
    "end": "2632570"
  },
  {
    "text": "This graph, the code that it\nrealizes is simply the",
    "start": "2632570",
    "end": "2637960"
  },
  {
    "text": "Cartesian product\nof c1 and c2. In other words, this means the\nset of all pairs, c1, c2, or I",
    "start": "2637960",
    "end": "2647380"
  },
  {
    "text": "should say y1, y2--  y1, y2 such that y1 is in code\n1 and y2 is in code 2.",
    "start": "2647380",
    "end": "2659030"
  },
  {
    "text": " That is the set of all y1,\ny2 that satisfy all these",
    "start": "2659030",
    "end": "2667290"
  },
  {
    "text": "constraints, right? So it's a behavioral realization\nof a Cartesian product code.",
    "start": "2667290",
    "end": "2673060"
  },
  {
    "text": " Now this is really a notion\nof independence, right?",
    "start": "2673060",
    "end": "2683510"
  },
  {
    "text": "This independently realizes a\ncode word from c1 in this part",
    "start": "2683510",
    "end": "2689100"
  },
  {
    "text": "and a code word from\nc2 in this part. What would the generator\nmatrix look like? The generator matrix from this\nwould look like a generator",
    "start": "2689100",
    "end": "2697810"
  },
  {
    "text": "for c1, 0, this is a 0, and\na generator for c2.",
    "start": "2697810",
    "end": "2704100"
  },
  {
    "text": "So there's a generator matrix\nnotion of independence. In other words, these are just\ntwo independent codes that for some reason, we choose to\nregard as one code.",
    "start": "2704100",
    "end": "2712790"
  },
  {
    "text": "And the same thing is true that\nif we have a Cartesian product code, simply a code\nmade up of two independent",
    "start": "2712790",
    "end": "2721160"
  },
  {
    "text": "components, then we can always\nrealize it in this way, right? We just realize c1,\nrealize c2.",
    "start": "2721160",
    "end": "2728550"
  },
  {
    "text": "So that's elementary, but it\nbegins to get across the idea that graph properties have to do\nwith dependence properties.",
    "start": "2728550",
    "end": "2736740"
  },
  {
    "text": "And here's the most radical\nand simple form of that. If we have a disconnected graph,\nthen it really realizes",
    "start": "2736740",
    "end": "2743329"
  },
  {
    "text": "two independent codes. ",
    "start": "2743330",
    "end": "2748350"
  },
  {
    "start": "2745000",
    "end": "2805000"
  },
  {
    "text": "Now, more important than that\nis the cut-set bound.",
    "start": "2748350",
    "end": "2753840"
  },
  {
    "start": "2753840",
    "end": "2761100"
  },
  {
    "text": "What is a cut-set?  It's a set of edges.",
    "start": "2761100",
    "end": "2767230"
  },
  {
    "text": " Actually, in graph theory, it's\ndefined in various ways.",
    "start": "2767230",
    "end": "2773220"
  },
  {
    "text": "It could be vertices,\nit could be edges. Here, we're going to say it's\na set of edges whose removal",
    "start": "2773220",
    "end": "2779830"
  },
  {
    "text": "disconnects the graph. ",
    "start": "2779830",
    "end": "2791180"
  },
  {
    "text": "Probably there are people in\nthis room who know more graph theory than I do? Does anyone want to quibble\nor refine that in any way?",
    "start": "2791180",
    "end": "2799299"
  },
  {
    "text": "That's my idea of what\na cut-set is. Any elaboration? No?",
    "start": "2799300",
    "end": "2805155"
  },
  {
    "start": "2805000",
    "end": "2930000"
  },
  {
    "text": "All right. All right, so we have some\nlarge graph realization.",
    "start": "2805155",
    "end": "2814110"
  },
  {
    "text": "It's got vertices which I always\ndraw as blocks, its",
    "start": "2814110",
    "end": "2819200"
  },
  {
    "text": "constraint codes, they have\nvarious interrelationships.",
    "start": "2819200",
    "end": "2825032"
  },
  {
    "text": "I'm just showing one. We have various external\nvariables that we bring out of",
    "start": "2825032",
    "end": "2834770"
  },
  {
    "text": "that, and that's the\ngeneral graphical realization of the code. What are some cut-sets\nin here?",
    "start": "2834770",
    "end": "2842901"
  },
  {
    "text": "I've drawn this, I'm thinking\nof this as a cut set. If I take these two edges and\nremove them, then I've",
    "start": "2842902",
    "end": "2855190"
  },
  {
    "text": "disconnected the graph. So they form a cut-set. ",
    "start": "2855190",
    "end": "2860670"
  },
  {
    "text": "I've already mentioned the very\nclose connection between cut-sets and cycle-free graphs,\nwhich is the graph is",
    "start": "2860670",
    "end": "2869060"
  },
  {
    "text": "cycle-free if and only if by\nremoving any single edge, I disconnect the graph.",
    "start": "2869060",
    "end": "2874900"
  },
  {
    "text": "So every single edge is\nitself a cut-set. That's a very elegant\ncharacterization.",
    "start": "2874900",
    "end": "2881430"
  },
  {
    "text": "All right, so I'm thinking\nof a cut-set. I'm going to write it\nas chi for scissors.",
    "start": "2881430",
    "end": "2888710"
  },
  {
    "text": "And it's a set of edges. So in our cases, what\nare the edges?",
    "start": "2888710",
    "end": "2894850"
  },
  {
    "text": "It's a set of state spaces\nfor some index set. ",
    "start": "2894850",
    "end": "2901700"
  },
  {
    "text": "OK, so I'm going to select\nsome minimal set of state spaces that disconnects\nthe graph.",
    "start": "2901700",
    "end": "2909510"
  },
  {
    "text": "All my edges are internal\nvariables. We don't really need to worry\nabout these half edges out",
    "start": "2909510",
    "end": "2915099"
  },
  {
    "text": "here, as I've said before. They're always going to\ntrivially separate their",
    "start": "2915100",
    "end": "2922619"
  },
  {
    "text": "variables from the rest of the\ngraph, and it's just tedious to try to keep them in\nthe explanation.",
    "start": "2922620",
    "end": "2927690"
  },
  {
    "text": "So we're only talking about\nstate-edges here. All right, once I've done\nthat, let me now do my",
    "start": "2927690",
    "end": "2938369"
  },
  {
    "start": "2930000",
    "end": "2995000"
  },
  {
    "text": "agglomeration trick. ",
    "start": "2938370",
    "end": "2946330"
  },
  {
    "text": "Sorry, I'm trying to draw a\ndotted line around a part of",
    "start": "2946330",
    "end": "2953070"
  },
  {
    "text": "the graph that I'm going to\nleave outside the external variables that I still\nwant to be external.",
    "start": "2953070",
    "end": "2960220"
  },
  {
    "text": "I'm going to leave the state\nvariables, which I'm going to",
    "start": "2960220",
    "end": "2966570"
  },
  {
    "text": "remember were once connected. And let me reconnect them now. So I'm taking my original graph\nand I'm dividing it",
    "start": "2966570",
    "end": "2975150"
  },
  {
    "text": "according to this cut-set\ninto two parts. ",
    "start": "2975150",
    "end": "2981230"
  },
  {
    "text": "And I'm arbitrarily going to\ncall this the past, p-- arbitrarily but suggestively--",
    "start": "2981230",
    "end": "2987720"
  },
  {
    "text": "and the future, f. And it doesn't matter which one\nI call p and which one f. ",
    "start": "2987720",
    "end": "2995654"
  },
  {
    "start": "2995000",
    "end": "3105000"
  },
  {
    "text": "And I'm going to redraw this,\nso this is just a re-drawing",
    "start": "2995654",
    "end": "3001600"
  },
  {
    "text": "of that in a nicer form. I'm going to aggregate all of\nthese variables over here.",
    "start": "3001600",
    "end": "3009000"
  },
  {
    "text": "And I'm going to call that\nthe set of past external variables, y projected\non the past.",
    "start": "3009000",
    "end": "3014855"
  },
  {
    "text": " And similarly over here, I'll\nget the set of all external",
    "start": "3014855",
    "end": "3020930"
  },
  {
    "text": "variables projected\non the future. It was just the ones that occur\nwhen I make this kind of",
    "start": "3020930",
    "end": "3027680"
  },
  {
    "text": "cut through state edges. Some of the external variables\nwind up in the past side, and",
    "start": "3027680",
    "end": "3032750"
  },
  {
    "text": "some wind up connected\nto the future side. But there are obviously none\nconnected to both because the",
    "start": "3032750",
    "end": "3038810"
  },
  {
    "text": "definition of a cut-set. We've disconnected the graph. All right, so there's\nthe past. There's the future.",
    "start": "3038810",
    "end": "3045619"
  },
  {
    "text": "And here are the state\nvariables. Now I'm going to define these\nall together as a super-state",
    "start": "3045620",
    "end": "3055190"
  },
  {
    "text": "space as I did in the trellis\ngraph over there.",
    "start": "3055190",
    "end": "3060250"
  },
  {
    "text": "So let's see, here I labeled the\nedges by a set of states.",
    "start": "3060250",
    "end": "3065770"
  },
  {
    "text": "But what I mean here is that the\nsuper-state space is just the product of the component\nstate spaces.",
    "start": "3065770",
    "end": "3073385"
  },
  {
    "text": " It's elements s chi are just the\nset of sj, j, and sigma-j,",
    "start": "3073385",
    "end": "3089570"
  },
  {
    "text": "is that clear? In other words, I have a\nvector of states here.",
    "start": "3089570",
    "end": "3095040"
  },
  {
    "text": "And I consider the super-state\nspace to be just the Cartesian--",
    "start": "3095040",
    "end": "3100400"
  },
  {
    "text": "this, again, is the Cartesian\nproduct of all the state spaces. OK, and then I have\nconstraints.",
    "start": "3100400",
    "end": "3109930"
  },
  {
    "text": "So we'll call this the aggregate\npast constraint, and the aggregate future\nconstraint.",
    "start": "3109930",
    "end": "3115559"
  },
  {
    "text": " This constrains these variables\nin this state.",
    "start": "3115560",
    "end": "3121050"
  },
  {
    "text": "This constrains these variables\nin that state. ",
    "start": "3121050",
    "end": "3126060"
  },
  {
    "text": "OK, so that's where figure\n5 comes from. Every year, people say, how\ndid you get figure 5?",
    "start": "3126060",
    "end": "3132500"
  },
  {
    "text": "That's how I get figure 5. Is there any confusion\nabout that? ",
    "start": "3132500",
    "end": "3138319"
  },
  {
    "text": "Today I've been talking about\nagglomeration quite a bit, so maybe this year it'll\ncome through better",
    "start": "3138320",
    "end": "3145220"
  },
  {
    "text": "than in past years. AUDIENCE: [INAUDIBLE] that we see projected on it.",
    "start": "3145220",
    "end": "3150630"
  },
  {
    "text": "Or is it just-- PROFESSOR: It's just the\naggregate of all these",
    "start": "3150631",
    "end": "3156640"
  },
  {
    "text": "constraints. What does this say? It's the set of all the possible\nvalues of these",
    "start": "3156640",
    "end": "3162830"
  },
  {
    "text": "variables, and these variables\nthat can actually occur. That forms a linear space which\nwe call little code.",
    "start": "3162830",
    "end": "3169670"
  },
  {
    "text": "Anything consistent with that\nsatisfies this constraint. Anything else doesn't.",
    "start": "3169670",
    "end": "3175270"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] for the c's projection of\nthe code on the past?",
    "start": "3175270",
    "end": "3184180"
  },
  {
    "text": "PROFESSOR: No. The projection of the code on\nthe past would be you realize",
    "start": "3184180",
    "end": "3190769"
  },
  {
    "text": "the code and you just project\nonto these variables here. So no, this is just an index.",
    "start": "3190770",
    "end": "3196450"
  },
  {
    "text": "This is a constraint whose\nindex is the past. ",
    "start": "3196450",
    "end": "3203170"
  },
  {
    "text": "OK, well, all right. Oh, but this looks like\na trellis, like",
    "start": "3203170",
    "end": "3211589"
  },
  {
    "text": "a two-section trellis. It looks very much like\nthis thing right here. ",
    "start": "3211590",
    "end": "3217369"
  },
  {
    "text": "It has the same general form. And we can think of this\nsuper-state variable here, it",
    "start": "3217370",
    "end": "3226600"
  },
  {
    "text": "sort of has the Markov\nproperty. It, again, tells everything\nabout the past that is needed",
    "start": "3226600",
    "end": "3235910"
  },
  {
    "text": "to specify what possible\nfutures there could be. We're really interested in these\nup here, eventually.",
    "start": "3235910",
    "end": "3241670"
  },
  {
    "text": "But this is the whole set of\nconstraints that determine the futures along with-- there\nmay be some more free",
    "start": "3241670",
    "end": "3247160"
  },
  {
    "text": "variables over here. But these are the constraints\nwe get from this half of the",
    "start": "3247160",
    "end": "3253030"
  },
  {
    "text": "code on this half of the\ncode and vice versa. So again, a cut-set is related\nto a Markov property.",
    "start": "3253030",
    "end": "3263915"
  },
  {
    "text": " Let me try to state this\nproperty more explicitly.",
    "start": "3263915",
    "end": "3271619"
  },
  {
    "start": "3271620",
    "end": "3276990"
  },
  {
    "text": "The code by the behavioral\nrealization is simply the set",
    "start": "3276990",
    "end": "3283310"
  },
  {
    "text": "of all combinations of --  let me say, the behavior is the\nset of all past states and",
    "start": "3283310",
    "end": "3299460"
  },
  {
    "text": "futures that satisfy\nthe constraints. ",
    "start": "3299460",
    "end": "3313090"
  },
  {
    "text": "OK, so this gives me a certain\nset of pasts that are consistent with each possible\nvalue of the state variable.",
    "start": "3313090",
    "end": "3322849"
  },
  {
    "text": "Let's call that y projected on\nthe past that's consistent",
    "start": "3322850",
    "end": "3330180"
  },
  {
    "text": "with a particular value of\nthe state variable, the super-state, the vector\nof states here.",
    "start": "3330180",
    "end": "3338280"
  },
  {
    "text": "And these are the ones in the\nfuture that are consistent with that state variable.",
    "start": "3338280",
    "end": "3343450"
  },
  {
    "text": " We define that so the set of all\npossible past and future",
    "start": "3343450",
    "end": "3351640"
  },
  {
    "text": "y's is simply this Cartesian\nproduct. And we say that in a more\ngraph theoretic way.",
    "start": "3351640",
    "end": "3357760"
  },
  {
    "text": "If I specify the state here as\nsome particular value, sx, and",
    "start": "3357760",
    "end": "3362990"
  },
  {
    "text": "I fix that, I've really\ndisconnected the graph. ",
    "start": "3362990",
    "end": "3370940"
  },
  {
    "text": "For a fixed sx, I can just\nput that over here, put that over here.",
    "start": "3370940",
    "end": "3376170"
  },
  {
    "text": " And this realizes, this\nconnected graph that realizes",
    "start": "3376170",
    "end": "3382640"
  },
  {
    "text": "the Cartesian product of\nwhatever -- yp of sx.",
    "start": "3382640",
    "end": "3387710"
  },
  {
    "text": "This just comes through and\naffects that with yf of sx.",
    "start": "3387710",
    "end": "3394890"
  },
  {
    "text": "So for any particular value of\nthe state, I have a certain Cartesian product of pasts and\nfutures they can occur.",
    "start": "3394890",
    "end": "3403190"
  },
  {
    "text": "Any past that's connected with\nthat state can be connected to any future that's connected\nwith this state.",
    "start": "3403190",
    "end": "3409790"
  },
  {
    "text": "All the possible future\ncontinuations of any particular past in\nthis equivalence",
    "start": "3409790",
    "end": "3415650"
  },
  {
    "text": "class are the same. This should sound very much like\nthe kinds of things we",
    "start": "3415650",
    "end": "3421109"
  },
  {
    "text": "were talking about when we did\nthe state space theorem. ",
    "start": "3421110",
    "end": "3427750"
  },
  {
    "text": "And we get a sort of state space\ntheorem out of this. ",
    "start": "3427750",
    "end": "3445070"
  },
  {
    "start": "3445000",
    "end": "3600000"
  },
  {
    "text": "Just to draw this out, we kind\nof get a two section trellis",
    "start": "3445070",
    "end": "3450860"
  },
  {
    "text": "realization where we have the\nvarious states in the state",
    "start": "3450860",
    "end": "3460270"
  },
  {
    "text": "space here, s0, s1,\nand so forth.",
    "start": "3460270",
    "end": "3465300"
  },
  {
    "text": "We have the pasts that\nare connected with s0, s1, and so forth.",
    "start": "3465300",
    "end": "3472025"
  },
  {
    "start": "3472025",
    "end": "3479770"
  },
  {
    "text": "And we have the futures that\nare connected to s0, s1.",
    "start": "3479770",
    "end": "3485610"
  },
  {
    "start": "3485610",
    "end": "3494790"
  },
  {
    "text": "So we could get from this,\nthis picture of the two sectioned trellis.",
    "start": "3494790",
    "end": "3500040"
  },
  {
    "text": " This really represents a set of\nparallel transitions here.",
    "start": "3500040",
    "end": "3505700"
  },
  {
    "text": "These are all the possible pasts\nthat are consistent with that state.",
    "start": "3505700",
    "end": "3511109"
  },
  {
    "text": "These are all the\nfutures that are consistent with that state. We can tie them together, and\nthat realizes the code.",
    "start": "3511110",
    "end": "3518470"
  },
  {
    "text": "I should say explicitly, the\ncode now is the union over the",
    "start": "3518470",
    "end": "3525150"
  },
  {
    "text": "states in the state space, the\nsuper-state space of the pasts",
    "start": "3525150",
    "end": "3534225"
  },
  {
    "text": "there times the futures. They're consistent\nwith the state.",
    "start": "3534226",
    "end": "3540570"
  },
  {
    "text": "So it's a union of Cartesian\nproducts.  And that's expressed\nby this diagram.",
    "start": "3540570",
    "end": "3548015"
  },
  {
    "text": "This is one of them. This is another one. These are all of them. How many are there?",
    "start": "3548016",
    "end": "3553260"
  },
  {
    "text": "The size of the super state\nvariable, which by the way is the product of the sizes of the\nstate spaces of each of",
    "start": "3553260",
    "end": "3560200"
  },
  {
    "text": "these individual state spaces\nthat I had coming across here. ",
    "start": "3560200",
    "end": "3567770"
  },
  {
    "text": "OK.  What's the cut-set bound then?",
    "start": "3567770",
    "end": "3575025"
  },
  {
    "text": "For linear codes, it's basically\nthe same as the state space theorem. ",
    "start": "3575025",
    "end": "3589700"
  },
  {
    "text": "The state space theorem said\nthat the dimension of the",
    "start": "3589700",
    "end": "3601589"
  },
  {
    "text": "state space at any time -- well,\nlet me consider now this state space, the super-state\nvariable.",
    "start": "3601590",
    "end": "3607462"
  },
  {
    "text": "The dimension of this\nsuper-state variable has got to be greater than or equal to\nthe dimension of the code that",
    "start": "3607462",
    "end": "3615620"
  },
  {
    "text": "we're realizing minus the\ndimension of the --",
    "start": "3615620",
    "end": "3621630"
  },
  {
    "text": "this is going to be\nbad notation now.  Now I mean the sub-code, so I\nshould have written something",
    "start": "3621630",
    "end": "3629850"
  },
  {
    "text": "else for the constraint here. ",
    "start": "3629850",
    "end": "3636320"
  },
  {
    "text": "Minus the dimension of the\nsub-code whose support is entirely on the past, minus the\ndimension of the sub-code",
    "start": "3636320",
    "end": "3642550"
  },
  {
    "text": "whose support is entirely\non the future. And the state space\ntheorem still applies for this partition.",
    "start": "3642550",
    "end": "3651285"
  },
  {
    "text": "So that gives me a lower bound\non the total dimension of the",
    "start": "3651285",
    "end": "3659490"
  },
  {
    "text": "states in any cut-set. ",
    "start": "3659490",
    "end": "3670060"
  },
  {
    "text": "So for example, in the 8, 4\ncode, suppose we have any",
    "start": "3670060",
    "end": "3683410"
  },
  {
    "text": "realization, so some graph here,\nand any cut-set such",
    "start": "3683410",
    "end": "3698569"
  },
  {
    "text": "that the size of -- ",
    "start": "3698570",
    "end": "3706440"
  },
  {
    "text": "I should say the dimension. I really mean that there are\nfour external variables in the",
    "start": "3706440",
    "end": "3712940"
  },
  {
    "text": "past and in the future. This is dimension, dimension.",
    "start": "3712940",
    "end": "3719340"
  },
  {
    "text": "In other words, we have four\nvariables sticking out here, and four variables sticking out\nhere, and we have a cut",
    "start": "3719340",
    "end": "3727260"
  },
  {
    "text": "set somehow going\nthrough there.  So our picture now is going to\nlook something like this.",
    "start": "3727260",
    "end": "3737520"
  },
  {
    "text": "What's the minimum possible\ndimension of the total",
    "start": "3737520",
    "end": "3743050"
  },
  {
    "text": "dimension of the edges that\ncross this cut-set, the state",
    "start": "3743050",
    "end": "3748350"
  },
  {
    "text": "spaces that are in\nthis cut-set. We know this code\nvery well now. ",
    "start": "3748350",
    "end": "3757290"
  },
  {
    "text": "Let's do the Muder bound. What's the maximum dimension? The dimension of\nthe code is 4. What's the maximum dimension\nof any code that",
    "start": "3757290",
    "end": "3767690"
  },
  {
    "text": "lives on the past? It's 1, because such\na code has to have",
    "start": "3767690",
    "end": "3773050"
  },
  {
    "text": "minimum distance 4. So it can't have dimension\ngreater than the repetition",
    "start": "3773050",
    "end": "3778590"
  },
  {
    "text": "code of length 4. So 4 minus 1, same argument\nfor the future, equals 2.",
    "start": "3778590",
    "end": "3785410"
  },
  {
    "text": " So it says that however you do\nit, you're going to have to",
    "start": "3785410",
    "end": "3793470"
  },
  {
    "text": "have at least two binary edges\nor one quaternary edge crossing a cut-set that divides\nthe external variables",
    "start": "3793470",
    "end": "3803390"
  },
  {
    "text": "into two equal sized parts. ",
    "start": "3803390",
    "end": "3810180"
  },
  {
    "text": "So let's go further. Let's suppose we want\na cycle-free graph.",
    "start": "3810180",
    "end": "3817550"
  },
  {
    "text": "OK, if we have a cycle-free\ngraph, then all of the cut-sets are single edges.",
    "start": "3817550",
    "end": "3823640"
  },
  {
    "text": "All right, so in a cycle-free\ngraph, when we make a cut,",
    "start": "3823640",
    "end": "3829164"
  },
  {
    "text": "it's through a single edge. And we're saying the state space\nif there's a way you can",
    "start": "3829165",
    "end": "3836000"
  },
  {
    "text": "make a cut that divides this\ninto two equal parts, the state space has to have\ndimension 2, it has to have",
    "start": "3836000",
    "end": "3842000"
  },
  {
    "text": "size 4 for any cycle-free\ngraph. ",
    "start": "3842000",
    "end": "3852650"
  },
  {
    "text": "Similarly, if we have the 24,\n12, 8 code, we've proved that the minimum dimension of\nany central cut has",
    "start": "3852650",
    "end": "3864500"
  },
  {
    "text": "to be at least 6. No, in the center, it has\nto be at least 8, right?",
    "start": "3864500",
    "end": "3871630"
  },
  {
    "start": "3871630",
    "end": "3877869"
  },
  {
    "text": "Yeah, because the dimension of\nthe code is 12, and a sub-code",
    "start": "3877870",
    "end": "3885910"
  },
  {
    "text": "that has support on 12 can't\nhave dimension more than 2. This can't have dimension\nmore than 2.",
    "start": "3885910",
    "end": "3892250"
  },
  {
    "text": "So that would be 8. So for the 24, 12, 8 code, the\nset of edges that cross the",
    "start": "3892250",
    "end": "3901089"
  },
  {
    "text": "cut have to have total\ndimension at least 8. And if we want it to be cycle\nfree, then there has to be a",
    "start": "3901090",
    "end": "3908720"
  },
  {
    "text": "single edge that has\ndimension 8. ",
    "start": "3908720",
    "end": "3914090"
  },
  {
    "text": "So the general conclusions --",
    "start": "3914090",
    "end": "3930293"
  },
  {
    "start": "3930293",
    "end": "3937930"
  },
  {
    "text": "we first talked about trellis\nrealizations. We can generalize that any\ncycle-free realization--",
    "start": "3937930",
    "end": "3945940"
  },
  {
    "text": "and we're going to see that we\nhave strong motivation to keep our realization cycle-free,\nbecause then we can do exact",
    "start": "3945940",
    "end": "3955180"
  },
  {
    "text": "maximum likelihood decoding. So we'd like to have cycle-free\nrealizations.",
    "start": "3955180",
    "end": "3962610"
  },
  {
    "text": "But what have we just seen? We've just seen that the state\ncomplexity cannot be less than",
    "start": "3962610",
    "end": "3983180"
  },
  {
    "text": "that of a trellis realization\nwith a comparable cut.",
    "start": "3983180",
    "end": "4000119"
  },
  {
    "text": "In other words, one that divides\nthe past and future in the same way, divides the\nexternal variables",
    "start": "4000120",
    "end": "4007670"
  },
  {
    "text": "into the same size. OK, so we really can't beat the\ntrellis bounds, the Muder",
    "start": "4007670",
    "end": "4015960"
  },
  {
    "text": "bound, in particular. Now again, there's some\ngames we can play.",
    "start": "4015960",
    "end": "4022520"
  },
  {
    "text": "Let's ask about the\n24, 12, 8 cut. We've said if we want to realize\nit with the cycle-free",
    "start": "4022520",
    "end": "4031230"
  },
  {
    "text": "realization, this says, well, if\nwe have a cut that divides",
    "start": "4031230",
    "end": "4036750"
  },
  {
    "text": "the external variables into\ntwo parts of size 8, then",
    "start": "4036750",
    "end": "4043390"
  },
  {
    "text": "we're going to be stuck with a\nstate space of dimension 8 and a size 256.",
    "start": "4043390",
    "end": "4048490"
  },
  {
    "text": "No way around it. Here's a slight way around it.",
    "start": "4048490",
    "end": "4056700"
  },
  {
    "text": "Let me hypothesize\na realization that looks like this. ",
    "start": "4056700",
    "end": "4066840"
  },
  {
    "text": "This is a 14, 7 code. So is this.",
    "start": "4066840",
    "end": "4072490"
  },
  {
    "text": "So is this. We're going to divide the\nexternal variables into three",
    "start": "4072490",
    "end": "4079160"
  },
  {
    "text": "parts, each of size 8. ",
    "start": "4079160",
    "end": "4087790"
  },
  {
    "text": "And we're going to have three\ninternal state spaces, each of dimension 6.",
    "start": "4087790",
    "end": "4093780"
  },
  {
    "text": "And we're going to constrain\nthose by an 18, 9 code. And again, these all have rate\n1/2 because this code is dual.",
    "start": "4093780",
    "end": "4102068"
  },
  {
    "text": "Now, is there anything in what\nI've done that prevents this kind of realization? ",
    "start": "4102069",
    "end": "4108710"
  },
  {
    "text": "Let's test the cut-sets. Where are the cut-sets in-- well, A, is this cycle-free\nrealization?",
    "start": "4108710",
    "end": "4114330"
  },
  {
    "text": "Yes, OK, good. Let's test the cut-sets. It's kind of a three-way\nsymmetrical thing.",
    "start": "4114330",
    "end": "4122229"
  },
  {
    "text": "The internal cut-sets are\nhere, here, and here. Each of these cut-sets divides\nthe coordinates into one set",
    "start": "4122229",
    "end": "4132589"
  },
  {
    "text": "of size 8 and one\nset of size 16. ",
    "start": "4132590",
    "end": "4137899"
  },
  {
    "text": "In that case, what does the\nMuder bound give us? In that case, 8, 16, the\ndimension of the",
    "start": "4137899",
    "end": "4144589"
  },
  {
    "text": "code is still 12. The minimum dimension of a code\nof length 16 and minimum",
    "start": "4144590",
    "end": "4150850"
  },
  {
    "text": "distance 8 is 5. And one of length 8 and minimum\ndistance 8 is 1.",
    "start": "4150850",
    "end": "4158009"
  },
  {
    "text": "So as we did on the homework, we\nfind that we are permitted to have a state space--",
    "start": "4158010",
    "end": "4164399"
  },
  {
    "text": "the minimal state space here\ncould have dimension 6. So this possibly could occur.",
    "start": "4164399",
    "end": "4171180"
  },
  {
    "text": "Again, we're kind of\ncamouflaging some of the state space. You see there is no central\nstate space in this.",
    "start": "4171180",
    "end": "4176869"
  },
  {
    "text": "There is no cut-set that\npartitions it into 12 and 12. So by being a little bit clever,\nwe've got it down to",
    "start": "4176870",
    "end": "4183528"
  },
  {
    "text": "something where instead of a 256\ncentral state space, we've got three 64 state spaces.",
    "start": "4183529",
    "end": "4192099"
  },
  {
    "text": "And this is what we saw on the\ntrellis realization too, that if we sectionalize into three\nsections, then we get a 64",
    "start": "4192100",
    "end": "4199250"
  },
  {
    "text": "state and a 64 state at the\nboundaries between the three sections, but we still got the\nsame 512 branch complexity in",
    "start": "4199250",
    "end": "4207580"
  },
  {
    "text": "the middle. And what do you know? We still have a constraint\ncode with complexity 512 here, too.",
    "start": "4207580",
    "end": "4214090"
  },
  {
    "text": "So if you consider that the\nmore valid measure of complexity, the minimum\ndimension of any constraint",
    "start": "4214090",
    "end": "4220030"
  },
  {
    "text": "code or branch space, then\nwe haven't improved. So subject to these qualifiers,\nthis is a pretty",
    "start": "4220030",
    "end": "4228510"
  },
  {
    "text": "strong argument that by going\nbeyond trellis realizations to general cycle-free, graphical\nrealizations, we",
    "start": "4228510",
    "end": "4241090"
  },
  {
    "text": "can't gain very much. So the moral is to significantly\nreduce",
    "start": "4241090",
    "end": "4250469"
  },
  {
    "text": "complexity, we're going\nto need to go to graphs with cycles.",
    "start": "4250470",
    "end": "4256465"
  },
  {
    "start": "4256465",
    "end": "4264280"
  },
  {
    "text": "We must go to graphs\nwith cycles. ",
    "start": "4264280",
    "end": "4275910"
  },
  {
    "text": "OK, so you don't get much\nfor free in this life.",
    "start": "4275910",
    "end": "4282360"
  },
  {
    "text": "So when we get to our\nsum-product decoding algorithm, we're going to have\nto apply it to graphs with cycles where it's iterative,\nwhere it's not exact, where",
    "start": "4282360",
    "end": "4290340"
  },
  {
    "text": "it's just a lot less nice. So what do we do when we go\nto graphs with cycles?",
    "start": "4290340",
    "end": "4297210"
  },
  {
    "text": "Where is the potential gain? The potential gain is that now\nthis super-state variable",
    "start": "4297210",
    "end": "4305740"
  },
  {
    "text": "could be made up of a number\nof simpler variables.",
    "start": "4305740",
    "end": "4312680"
  },
  {
    "text": "We've got a certain minimum\ndimension that we're going to need any cut-set, like 8 for the\ncentral state space of the",
    "start": "4312680",
    "end": "4322264"
  },
  {
    "text": "Golay code. But now we can spread it\naround over two or more",
    "start": "4322265",
    "end": "4329290"
  },
  {
    "text": "sub-state variables. So for instance, maybe we can\nfind something where we now",
    "start": "4329290",
    "end": "4336260"
  },
  {
    "text": "have a graph with cycles where\nwe have two state spaces here. Here's the cycle again.",
    "start": "4336260",
    "end": "4343740"
  },
  {
    "text": "And the two state spaces\neach have size only 16.",
    "start": "4343740",
    "end": "4348880"
  },
  {
    "text": "That would still satisfy\nthis cut-set bound. So we greatly reduce the size of\nthe state spaces, which is",
    "start": "4348880",
    "end": "4361260"
  },
  {
    "text": "exponential in their dimension,\nbut at the cost of introducing a cycle. I insist that's a cycle.",
    "start": "4361260",
    "end": "4367560"
  },
  {
    "text": "Let's go over to this\ntrellis here. The next thing I might talk\nabout is tail-biting trellis",
    "start": "4367560",
    "end": "4373929"
  },
  {
    "text": "realizations. ",
    "start": "4373930",
    "end": "4380100"
  },
  {
    "text": "This is very simple. What's the first realization you\nwould think of on a graph",
    "start": "4380100",
    "end": "4385480"
  },
  {
    "text": "with a cycle? Well, here's a trellis\nrealization.",
    "start": "4385480",
    "end": "4390750"
  },
  {
    "text": "It's always going to\nlook like this.  And then let's just\nloop this around.",
    "start": "4390750",
    "end": "4398074"
  },
  {
    "text": "In other words, we make the last\nstate space equal to the first state space. We don't require they used\nto be trivial state",
    "start": "4398074",
    "end": "4405090"
  },
  {
    "text": "spaces of size 1. We allow them to have\nsome dimension. And here's a potential\nrealization on a",
    "start": "4405090",
    "end": "4412860"
  },
  {
    "text": "graph with a cycle. ",
    "start": "4412860",
    "end": "4418150"
  },
  {
    "text": "Cut-sets. Where are the cut-sets\nin this graph? ",
    "start": "4418150",
    "end": "4424288"
  },
  {
    "text": "Well, the cut-sets now\nlook like that. All the cut-sets involve\nat least two",
    "start": "4424288",
    "end": "4429460"
  },
  {
    "text": "edges, two state spaces. OK, so we potentially might\nget this kind of benefit.",
    "start": "4429460",
    "end": "4434840"
  },
  {
    "text": " Here's an example.",
    "start": "4434840",
    "end": "4440850"
  },
  {
    "text": "Suppose instead, go back to\nour very favorite example,",
    "start": "4440850",
    "end": "4446660"
  },
  {
    "text": "suppose we let u2 go across\nhere, and we bring out u3 out",
    "start": "4446660",
    "end": "4453680"
  },
  {
    "text": "of here, and we bring it all\nthe way back to here. ",
    "start": "4453680",
    "end": "4461870"
  },
  {
    "text": "Everything still good? It's obviously another\nrealization.",
    "start": "4461870",
    "end": "4468050"
  },
  {
    "text": "Now I've made it clear that\nwhen I draw u2 and u3 separately here, I've\nreally got a cycle.",
    "start": "4468050",
    "end": "4474240"
  },
  {
    "text": "I've made a big cycle.  And now what's the number of\nstates in this two-section",
    "start": "4474240",
    "end": "4482960"
  },
  {
    "text": "realization of the 8, 4 code? This is a two-state tail-biting\ntrellis, because",
    "start": "4482960",
    "end": "4489090"
  },
  {
    "text": "each of these is just a little\nbinary variable. ",
    "start": "4489090",
    "end": "4497770"
  },
  {
    "text": "So I get some kind of\ntwo-state trellis. If I were actually to draw out\nthe trellis, I would have two",
    "start": "4497770",
    "end": "4503330"
  },
  {
    "text": "states at time 0, two states\nat time 4, some kind of --",
    "start": "4503330",
    "end": "4510086"
  },
  {
    "text": "what have I got-- 6, 3. So I've got 8 branches that go\nback and forth, a couple of",
    "start": "4510086",
    "end": "4516210"
  },
  {
    "text": "parallel branches. It's going to look like that. ",
    "start": "4516210",
    "end": "4521679"
  },
  {
    "text": "Then same thing out to time 8.",
    "start": "4521680",
    "end": "4526940"
  },
  {
    "text": "I don't have a time 8. This is really time 0 again,\nwhere I identify these two",
    "start": "4526940",
    "end": "4537000"
  },
  {
    "text": "state spaces. This is really the same state as\nthis, and this is the same",
    "start": "4537000",
    "end": "4545130"
  },
  {
    "text": "one as that. So that's if I really drew out\nthe trellis in the style I",
    "start": "4545130",
    "end": "4550790"
  },
  {
    "text": "originally drew trellises,\nthis would be a picture of all the--",
    "start": "4550790",
    "end": "4557670"
  },
  {
    "text": "there's a 1-to-1 map between\nall the paths through this trellis that start and end in\nthe same state, because that's",
    "start": "4557670",
    "end": "4563969"
  },
  {
    "text": "what I mean when I identify the\nbeginning and end states. So if I start in this state,\nthere's a four-way branch",
    "start": "4563970",
    "end": "4573170"
  },
  {
    "text": "here, another four-way\nbranch there. Is that right?",
    "start": "4573170",
    "end": "4579369"
  },
  {
    "text": "No, there's only a two-way\nbranch such that I can get back to the initial state. So there are 8 possible paths\nthat start here and get back",
    "start": "4579370",
    "end": "4586870"
  },
  {
    "text": "to the same state, 8 possible\npaths that start out from here and get back to the\nsame state.",
    "start": "4586870",
    "end": "4592030"
  },
  {
    "text": "And they together correspond\n1-to-1 to all the code words.",
    "start": "4592030",
    "end": "4599820"
  },
  {
    "text": "OK, well, that's not\na very big deal. I was able to reduce a\nfour-state trellis to a",
    "start": "4599820",
    "end": "4604960"
  },
  {
    "text": "two-state trellis.  But suppose I do the same thing\nwith the Golay code.",
    "start": "4604960",
    "end": "4614145"
  },
  {
    "text": "In the Golay code, there's a\nvery beautiful tail-biting trellis realization.",
    "start": "4614145",
    "end": "4619410"
  },
  {
    "text": " It looks like this. It has 12 sections, so maybe I\nwon't draw all the sections.",
    "start": "4619410",
    "end": "4629440"
  },
  {
    "text": "It groups each of the output\nvariables into pairs and comes",
    "start": "4629440",
    "end": "4639110"
  },
  {
    "text": "around like that. And each of these state spaces\nhas dimension 4, or size 16.",
    "start": "4639110",
    "end": "4646860"
  },
  {
    "text": "And I give the generator matrix\nfor this in the notes. So this is for the 24, 12, 8\ncode, and now you test me.",
    "start": "4646860",
    "end": "4662350"
  },
  {
    "text": "Is this a possible--  use the cut-set bound.",
    "start": "4662350",
    "end": "4668090"
  },
  {
    "text": "See if this violates the\ncut-set bound anywhere. Does it for this code? ",
    "start": "4668090",
    "end": "4675416"
  },
  {
    "text": "No, it doesn't. Because every cut-set, no matter\nhow I draw it, we're going to get two edges, each\nwith dimension 4, adding up to",
    "start": "4675416",
    "end": "4683950"
  },
  {
    "text": "a super-state of dimension 8. And the state spaces at all the\neven times, notice I've",
    "start": "4683950",
    "end": "4692430"
  },
  {
    "text": "sectionalized here, so I only\nneed to look at even times. The state spaces at all even\ntimes in this code could have",
    "start": "4692430",
    "end": "4700420"
  },
  {
    "text": "dimensions as small as 8. Remember, at the odd times,\nthey go up to 9.",
    "start": "4700420",
    "end": "4707760"
  },
  {
    "text": "And these are all little-- 4, 4-- these are all\nlittle 10, 5 codes.",
    "start": "4707760",
    "end": "4713830"
  },
  {
    "text": "So the branch complexity\nis only 32. So this is very much simpler\nthan any of the conventional",
    "start": "4713830",
    "end": "4720520"
  },
  {
    "text": "trellises that I've-- than the minimal conventional\ntrellis that we were able to draw for this code.",
    "start": "4720520",
    "end": "4726210"
  },
  {
    "text": "Or if this funny little pinwheel\nwith three arms on it, which is also a cycle-free\nrealization, this code.",
    "start": "4726210",
    "end": "4733540"
  },
  {
    "text": "OK, so they're going\nto tail-biting. That's a significant advance.",
    "start": "4733540",
    "end": "4741079"
  },
  {
    "text": "An aside note-- if we just break this, it turns\nout we have a generator",
    "start": "4741080",
    "end": "4751040"
  },
  {
    "text": "matrix that has period 4, and\nlet this go on infinitely,",
    "start": "4751040",
    "end": "4756990"
  },
  {
    "text": "this is a realization of a rate\n1/2, 16 state, branch",
    "start": "4756990",
    "end": "4771310"
  },
  {
    "text": "complexity 32, as we expect-- perfectly conventional,\nexcept it's",
    "start": "4771310",
    "end": "4777160"
  },
  {
    "text": "periodically time varying-- ",
    "start": "4777160",
    "end": "4785390"
  },
  {
    "text": "linear convolutional code with\nabsolutely phenomenal",
    "start": "4785390",
    "end": "4791310"
  },
  {
    "text": "performance. Like the Golay code,\nit has d equals 8.",
    "start": "4791310",
    "end": "4797760"
  },
  {
    "text": "Therefore it has a nominal\ncoding gain of 4, 1/2",
    "start": "4797760",
    "end": "4803619"
  },
  {
    "text": "times 8, or 6 dB. This is with only a 16\nstate, rate 1/2 code.",
    "start": "4803620",
    "end": "4808860"
  },
  {
    "text": "Look at the ones on the table. This is significantly\nbetter than that.",
    "start": "4808860",
    "end": "4813910"
  },
  {
    "text": "And it's effective coding\ngain, I forget. But it's still very good,\nexcellent, for the complexity",
    "start": "4813910",
    "end": "4822720"
  },
  {
    "text": "of this code. So this is called the Golay\nconvolutional code.",
    "start": "4822720",
    "end": "4828405"
  },
  {
    "start": "4828405",
    "end": "4836710"
  },
  {
    "text": "And it's an interesting example\nof the interplay between this block coding stuff\nand the convolutional",
    "start": "4836710",
    "end": "4844360"
  },
  {
    "text": "coding stuff, in this case. Actually this code was first\ndiscovered in computer searches, but nobody realized\nhow wonderful it was.",
    "start": "4844360",
    "end": "4852710"
  },
  {
    "text": "And it was only when its\nconnection with this Golay code was recognized that people\nrealized this was",
    "start": "4852710",
    "end": "4858989"
  },
  {
    "text": "really a special code, both\nfrom a performance versus complexity point of view,\nand also algebraically.",
    "start": "4858990",
    "end": "4867550"
  },
  {
    "text": "OK, well that brings\nus to the end. There's actually one more style\nof graph realization",
    "start": "4867550",
    "end": "4873645"
  },
  {
    "text": "that I want to mention to you,\nfor the Reed-Muller codes. We know that they're basically\nbased on Hadamard transforms.",
    "start": "4873645",
    "end": "4881210"
  },
  {
    "text": "It's a very nice kind of Fourier\ntransform like graph realization of Hadamard\ntransforms.",
    "start": "4881210",
    "end": "4888179"
  },
  {
    "text": "So that gives us another style\nof realization of Reed-Muller codes that again, we can\naggregate to lead to a lot of",
    "start": "4888180",
    "end": "4895210"
  },
  {
    "text": "nice structures. Again, at the end of the day,\nunless we allow cycles, we",
    "start": "4895210",
    "end": "4905160"
  },
  {
    "text": "don't really gain anything. So I'll do that the first part\nof next time and then do the",
    "start": "4905160",
    "end": "4911260"
  },
  {
    "text": "sum-product algorithm. I hope I can do it\nin one lecture. ",
    "start": "4911260",
    "end": "4923903"
  }
]