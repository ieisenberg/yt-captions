[
  {
    "start": "0",
    "end": "63000"
  },
  {
    "text": " The following content is\nprovided under a Creative Commons license.",
    "start": "0",
    "end": "5310"
  },
  {
    "text": "Your support will help\nMIT OpenCourseWare continue to offer high quality\neducational resources for free.",
    "start": "5310",
    "end": "11610"
  },
  {
    "text": "To make a donation or to\nview additional materials from hundreds of MIT courses,\nvisit MIT OpenCourseWare",
    "start": "11610",
    "end": "18140"
  },
  {
    "text": "at ocw.mit.edu.  CHARLES LEISERSON:\nToday, we're going",
    "start": "18140",
    "end": "23490"
  },
  {
    "text": "to talk about analyzing\ntask parallel algorithms--",
    "start": "23490",
    "end": "29369"
  },
  {
    "text": "multi-threaded algorithms. And this is going\nto rely on the fact",
    "start": "29370",
    "end": "36810"
  },
  {
    "text": "that everybody has taken\nan algorithms class. ",
    "start": "36810",
    "end": "42000"
  },
  {
    "text": "And so I want to remind\nyou of some of the stuff you learned in your\nalgorithms class. And if you don't\nremember this, then it's",
    "start": "42000",
    "end": "48090"
  },
  {
    "text": "probably good to bone\nup on it a little bit, because it's going\nto be essential. And that is the topic of\ndivide-and-conquer recurrences.",
    "start": "48090",
    "end": "55440"
  },
  {
    "text": "Everybody remember divide\nand conquer recurrences? These are-- and there's a\ngeneral method for solving them",
    "start": "55440",
    "end": "62745"
  },
  {
    "text": "that will deal with most\nof the ones we want, called the Master Method. And it deals with recurrences\nin the form T of n",
    "start": "62745",
    "end": "70680"
  },
  {
    "start": "63000",
    "end": "63000"
  },
  {
    "text": "equals a times T of\nn over b plus f of n. And this is\ngenerally interpreted",
    "start": "70680",
    "end": "76050"
  },
  {
    "text": "as I have a problem of size n. I can solve it by solving a\nproblems of size n over b,",
    "start": "76050",
    "end": "84060"
  },
  {
    "text": "and it costs me f of n\nwork to do that division",
    "start": "84060",
    "end": "89250"
  },
  {
    "text": "and accumulate whatever\nthe results are of that to make my final result.",
    "start": "89250",
    "end": "97230"
  },
  {
    "text": "For all these recurrences,\nthe unstated base case is that this is a running time.",
    "start": "97230",
    "end": "103290"
  },
  {
    "text": "So T of n is constant\nif n is small.",
    "start": "103290",
    "end": "109050"
  },
  {
    "text": "So does that makes sense? Everybody familiar with this?",
    "start": "109050",
    "end": "114140"
  },
  {
    "text": "Right? Well we're going to\nreview it anyway, because I don't like to go ahead\nand just assume, and then leave",
    "start": "114140",
    "end": "121080"
  },
  {
    "text": "20% of you or more, or less,\nleft behind in the woods.",
    "start": "121080",
    "end": "126750"
  },
  {
    "text": "So let's just remind\nourselves of what this means. So it's easy to understand this\nin terms of a recursion tree.",
    "start": "126750",
    "end": "136020"
  },
  {
    "text": "I start out, and the\nidea is a recursion tree is to take the\nrunning time, here,",
    "start": "136020",
    "end": "143550"
  },
  {
    "start": "142000",
    "end": "142000"
  },
  {
    "text": "and to reexpress it\nusing the recurrence.",
    "start": "143550",
    "end": "148930"
  },
  {
    "text": "So if I reexpress\nthis and I've written it a little bit differently,\nthen I have an f of n.",
    "start": "148930",
    "end": "156000"
  },
  {
    "text": "I can put an f of n\nat the root, and have a copies of T of n over b. And that's exactly the same\namount of work as I had--",
    "start": "156000",
    "end": "164580"
  },
  {
    "text": "or running time as\nI had in the T of n. I've just simply expressed\nit with the right hand side.",
    "start": "164580",
    "end": "171190"
  },
  {
    "text": "And then I do it\nagain at every level. So I expand all the leaves.",
    "start": "171190",
    "end": "178079"
  },
  {
    "text": "I only expanded one here\nbecause I ran out of space. And you keep doing that\nuntil you get down to T of 1.",
    "start": "178080",
    "end": "188640"
  },
  {
    "text": "And so then the trick of\nlooking at these recurrences is to add across the rows.",
    "start": "188640",
    "end": "195640"
  },
  {
    "text": "So the first row\nadds up to f of n. The second row adds up\nto a times f of n over b.",
    "start": "195640",
    "end": "202770"
  },
  {
    "text": "The third one is a squared f of\nn over b squared, and so forth.",
    "start": "202770",
    "end": "207880"
  },
  {
    "text": "And the height here, now. Since I'm taking n and\ndividing it by b each time, how many times can I divide\nby b until I get to something",
    "start": "207880",
    "end": "216210"
  },
  {
    "text": "that's constant size? That's just log base b of n.",
    "start": "216210",
    "end": "223170"
  },
  {
    "text": "So, so far, review-- any questions here? For anybody?",
    "start": "223170",
    "end": "229140"
  },
  {
    "text": "OK. So I get the height, and\nthen I look at how many--",
    "start": "229140",
    "end": "234720"
  },
  {
    "text": "if I've got T of 1\nwork at every leaf, how many leaves are there? ",
    "start": "234720",
    "end": "243439"
  },
  {
    "text": "And for this analysis we're\ngoing to assume everything works out-- n is a perfect power\nof b and so forth.",
    "start": "243440",
    "end": "252330"
  },
  {
    "text": "So if I go down k levels,\nhow many sub problems are there at k levels?",
    "start": "252330",
    "end": "259009"
  },
  {
    "text": "a of the k. So how many levels\nam I going down? h, which is log base b of n.",
    "start": "259010",
    "end": "266570"
  },
  {
    "text": "So I end up with a to log\nbase b of n times what's",
    "start": "266570",
    "end": "272420"
  },
  {
    "text": "at the leaf, which is T of 1.  And T of 1 is constant.",
    "start": "272420",
    "end": "280990"
  },
  {
    "text": "a log base b of n-- that's the same as n\nto the log base b of a.",
    "start": "280990",
    "end": "287360"
  },
  {
    "text": "OK. That's just a little bit\nof exponential algebra.",
    "start": "287360",
    "end": "292840"
  },
  {
    "text": "And you can-- one\nway to see that is, take the log of both\nsides of both equations, and you realize that\nall that's used there",
    "start": "292840",
    "end": "298949"
  },
  {
    "text": "is the commutative law. Because if you\ntake the log base-- ",
    "start": "298950",
    "end": "306900"
  },
  {
    "text": "if you take log of a log bn,\nyou get log bn times log--",
    "start": "306900",
    "end": "314199"
  },
  {
    "text": "if you take a base b, log ba. And then you get the same thing\nif you take the log base b",
    "start": "314200",
    "end": "322780"
  },
  {
    "text": "of what I have as\nthe result. Then you get the exponent log base\nba times log base b of n.",
    "start": "322780",
    "end": "329770"
  },
  {
    "text": "So same thing, just\nin different orders. So that's just a little bit\nof math, because this is--",
    "start": "329770",
    "end": "335698"
  },
  {
    "text": "basically, we're interested\nin, what's the growth in n? So we prefer not to have\nlog n's in the denominator. We prefer to have n's--",
    "start": "335698",
    "end": "342280"
  },
  {
    "text": "sorry, in the exponent\nwe prefer to have n's. So that's basically\nthe number of things.",
    "start": "342280",
    "end": "349850"
  },
  {
    "text": "And so then the question\nis, how much work is there if I add up all of these\nguys all the way down there?",
    "start": "349850",
    "end": "359830"
  },
  {
    "text": "How much work is in\nall those levels? And it turns out\nthere's a trick,",
    "start": "359830",
    "end": "367810"
  },
  {
    "text": "and the trick is to compare n\nto log base b of a with f of n.",
    "start": "367810",
    "end": "376770"
  },
  {
    "text": "And there are three cases that\nare very commonly arising, and for the most part, that's\nwhat we're going to see,",
    "start": "376770",
    "end": "382090"
  },
  {
    "text": "is just these three cases. So case 1 is the case where\nn to the log base b of a",
    "start": "382090",
    "end": "395590"
  },
  {
    "text": "is much bigger than f of n. And by much bigger, I mean it's\nbigger by a polynomial amount.",
    "start": "395590",
    "end": "404509"
  },
  {
    "text": "In other words,\nthere's an epsilon such that the ratio between the two\nis at least n to the epsilon.",
    "start": "404510",
    "end": "410823"
  },
  {
    "text": "There's an epsilon\ngreater than 0. In other words, f of n\nis O of n to the log base b of a minus epsilon\nin the numerator",
    "start": "410823",
    "end": "419169"
  },
  {
    "text": "there, which is the\nsame as n log base b of a divided by\nn to the epsilon. In that case, this is\ngeometrically increasing,",
    "start": "419170",
    "end": "427870"
  },
  {
    "text": "and so all the weight-- the constant fraction\nof the weight-- is in the leaves.",
    "start": "427870",
    "end": "434880"
  },
  {
    "text": "So then the answer is T of n\nis n to the log base b of a.",
    "start": "434880",
    "end": "440570"
  },
  {
    "start": "436000",
    "end": "436000"
  },
  {
    "text": "So if n to log base b of\na is bigger than f of n, the answer is n\nto the log base b",
    "start": "440570",
    "end": "445800"
  },
  {
    "text": "of a, as long as it's bigger\nby a polynomial amount. ",
    "start": "445800",
    "end": "452129"
  },
  {
    "text": "Now, case 2 is the situation\nwhere n to the log base b of a",
    "start": "452130",
    "end": "462150"
  },
  {
    "text": "is approximately\nequal to f of n. They're very similar in growth.",
    "start": "462150",
    "end": "468510"
  },
  {
    "text": "And specifically, we're going\nto look at the case where f of n is n to the log base b of\na poly-logarithmic factor--",
    "start": "468510",
    "end": "478229"
  },
  {
    "text": "log to the k of n for some\nconstant k greater than or equal to 0.",
    "start": "478230",
    "end": "483240"
  },
  {
    "text": "That greater than or equal\nto 0 is very important. You can't do this\nfor negative k.",
    "start": "483240",
    "end": "489420"
  },
  {
    "text": "Even though negative k is\ndefined and meaningful, this is not the answer\nwhen k is negative.",
    "start": "489420",
    "end": "495150"
  },
  {
    "text": "But if k is greater\nthan or equal to 0, then it turns out\nthat what's happening is it's growing arithmetically\nfrom beginning to end.",
    "start": "495150",
    "end": "504520"
  },
  {
    "text": "And so when you solve\nit, what happens is, you essentially add\nan extra log term.",
    "start": "504520",
    "end": "510210"
  },
  {
    "text": "So the answer is, if f\nof n is n to the log base b of a log to the k n, the\nanswer is n to the log base",
    "start": "510210",
    "end": "518940"
  },
  {
    "text": "b of a log to the k plus 1 of n. So you kick in one extra log.",
    "start": "518940",
    "end": "527350"
  },
  {
    "text": "And basically, it's like-- on average, there's basically-- ",
    "start": "527350",
    "end": "533760"
  },
  {
    "text": "it's almost all equal,\nand there are log layers. That's not quite the math,\nbut it's good intuition",
    "start": "533760",
    "end": "541649"
  },
  {
    "text": "that they're almost all equal\nand there are log layers, so you tack on an extra log. ",
    "start": "541650",
    "end": "548610"
  },
  {
    "text": "And then finally, case 3 is the\ncase when no to the log base",
    "start": "548610",
    "end": "554459"
  },
  {
    "start": "551000",
    "end": "551000"
  },
  {
    "text": "b is much less than f\nof n, and specifically where it is smaller by, once\nagain, a polynomial factor--",
    "start": "554460",
    "end": "564060"
  },
  {
    "text": "by an n to the epsilon factor\nfor epsilon greater than 0. It's also the case\nhere that f has",
    "start": "564060",
    "end": "570210"
  },
  {
    "text": "to satisfy what's called\na regularity condition. And this is a condition\nthat's satisfied",
    "start": "570210",
    "end": "575970"
  },
  {
    "text": "by all the functions we're\ngoing to look at-- polynomials and polynomials\ntimes logarithms, and things of that nature.",
    "start": "575970",
    "end": "583320"
  },
  {
    "text": "It's not satisfied\nfor weird functions like sines and cosines\nand things like that.",
    "start": "583320",
    "end": "590380"
  },
  {
    "text": "It's also not-- more\nrelevantly, it's not satisfied if you have\nthings like exponentials.",
    "start": "590380",
    "end": "598530"
  },
  {
    "text": "So this is-- but for all the\nthings we're going to look at,",
    "start": "598530",
    "end": "604995"
  },
  {
    "text": "that's the case. And in that case, things are\ngeometrically decreasing, and so all the work\nis at the root.",
    "start": "604995",
    "end": "613949"
  },
  {
    "text": "And the root is\nbasically cos f of n, so the solution is theta f of n.",
    "start": "613950",
    "end": "620093"
  },
  {
    "text": " We're going to hand\nout a cheat sheet.",
    "start": "620093",
    "end": "628209"
  },
  {
    "text": "So if you could conscript\nsome of the TAs to get that distributed as\nquickly as possible.",
    "start": "628210",
    "end": "634940"
  },
  {
    "text": "OK. So let's do a\nlittle puzzle here.",
    "start": "634940",
    "end": "641579"
  },
  {
    "start": "640000",
    "end": "640000"
  },
  {
    "text": " So here's the cheat sheet. That's basically what's on it.",
    "start": "641580",
    "end": "647470"
  },
  {
    "text": " And we'll do a little\nin-class quiz, self-quiz.",
    "start": "647470",
    "end": "656350"
  },
  {
    "text": "So we have T of n is\n4T n over 2 plus n. And the solution is?",
    "start": "656350",
    "end": "661529"
  },
  {
    "start": "661530",
    "end": "667853"
  },
  {
    "text": "This is a thing that,\nas a computer scientist, you just memorize this so that\nyou can-- in any situation,",
    "start": "667853",
    "end": "673672"
  },
  {
    "text": "you don't have to even\nlook at the cheat sheet. You just know it. It's one of these basic things\nthat all computer scientists",
    "start": "673672",
    "end": "680780"
  },
  {
    "text": "should know. It's kind of like,\nwhat's 2 to the 15th? ",
    "start": "680780",
    "end": "688600"
  },
  {
    "text": "What is it? AUDIENCE: [INAUDIBLE] CHARLES LEISERSON: Yes. And interestingly,\nthat's my office number.",
    "start": "688600",
    "end": "695990"
  },
  {
    "text": "I'm in 32-G768.",
    "start": "695990",
    "end": "701160"
  },
  {
    "text": "I'm the only one in this data\ncenter with a power of 2 office number.",
    "start": "701160",
    "end": "706680"
  },
  {
    "text": "And that was totally unplanned. ",
    "start": "706680",
    "end": "713790"
  },
  {
    "text": "So if you need to remember my\noffice number, 2 to the 15th. ",
    "start": "713790",
    "end": "718950"
  },
  {
    "text": "OK, so what's the solution here? ",
    "start": "718950",
    "end": "724279"
  },
  {
    "text": "AUDIENCE: Case 1. CHARLES LEISERSON: It's case 1. And what's the solution? ",
    "start": "724280",
    "end": "732187"
  },
  {
    "text": "AUDIENCE: n squared? CHARLES LEISERSON: n squared. Very good. Yeah. So n to the log base b of a\nis n to the log base 2 of 4.",
    "start": "732187",
    "end": "741930"
  },
  {
    "text": "Log base 2 of 4 is 2,\nso that's n squared. That's much bigger than n. So it's case 1, and the\nanswer is theta n squared.",
    "start": "741930",
    "end": "751920"
  },
  {
    "text": "Pretty easy. How about this one? ",
    "start": "751920",
    "end": "762600"
  },
  {
    "text": "Yeah. AUDIENCE: [INAUDIBLE] CHARLES LEISERSON: Yeah. It's n squared log n. Once again, the first\npart is the same.",
    "start": "762600",
    "end": "768240"
  },
  {
    "text": "n to the log base b\nof a is n squared. n squared is n squared\nlog to the 0 n.",
    "start": "768240",
    "end": "775050"
  },
  {
    "text": "So it's case 2 with k\nequals 0, and so you just tack on an extra log factor.",
    "start": "775050",
    "end": "781620"
  },
  {
    "text": "So it's n squared log n. And then, of course,\nwe've got to do this one. ",
    "start": "781620",
    "end": "797190"
  },
  {
    "text": "Yeah. AUDIENCE: [INAUDIBLE] CHARLES LEISERSON: Yeah, n\ncubed, because once again, n to log base b\nof a is n squared.",
    "start": "797190",
    "end": "803730"
  },
  {
    "text": "That's much less than n\ncubed. n cubed's bigger, so that dominates. So we have theta n squared.",
    "start": "803730",
    "end": "810727"
  },
  {
    "text": "What about this one? ",
    "start": "810727",
    "end": "818245"
  },
  {
    "text": "Yeah. AUDIENCE: Theta of n squared. CHARLES LEISERSON: No. That's not the answer. ",
    "start": "818245",
    "end": "826460"
  },
  {
    "text": "Which case do you think it is? AUDIENCE: [INAUDIBLE] CHARLES LEISERSON: Case 2?",
    "start": "826460",
    "end": "831733"
  },
  {
    "text": "AUDIENCE: Yeah. CHARLES LEISERSON: OK. No.  Yeah. AUDIENCE: None of the cases?",
    "start": "831733",
    "end": "837300"
  },
  {
    "text": "CHARLES LEISERSON:\nIt's none of the cases. It's a trick question. Oh, I'm a nasty guy.",
    "start": "837300",
    "end": "843540"
  },
  {
    "text": "I'm a nasty guy. This is one where the master\nmethod does not apply.",
    "start": "843540",
    "end": "848820"
  },
  {
    "start": "846000",
    "end": "846000"
  },
  {
    "text": "This would be case\n2, but k has to be greater than or equal to\n0, and here k is minus 1.",
    "start": "848820",
    "end": "854440"
  },
  {
    "text": "So case two doesn't apply. And case 1 doesn't\napply, where we're",
    "start": "854440",
    "end": "863320"
  },
  {
    "text": "comparing n squared to\nn squared over log n, because the ratio there is\n1 over log n, and that--",
    "start": "863320",
    "end": "870210"
  },
  {
    "text": "sorry, the ratio there is log n,\nand log n is smaller than any n",
    "start": "870210",
    "end": "877860"
  },
  {
    "text": "to the epsilon. And you need to have an n\nto the epsilon separation. ",
    "start": "877860",
    "end": "884500"
  },
  {
    "text": "There's actually a more--\nthe actual answer is n squared log log n for that one,\nby the way, which you can prove",
    "start": "884500",
    "end": "891670"
  },
  {
    "text": "by the substitution method. And it uses the same idea.",
    "start": "891670",
    "end": "899259"
  },
  {
    "text": "You just do a little\nbit different math. There's a more general solution\nto this kind of recurrence called the Akra-Bazzi method.",
    "start": "899260",
    "end": "907540"
  },
  {
    "text": "But for most of what\nwe're going to see, it's sufficient to just-- applying the Akra-Bazzi\nmethod is more complicated",
    "start": "907540",
    "end": "913510"
  },
  {
    "text": "than simply doing the table\nlookup of which is bigger",
    "start": "913510",
    "end": "919210"
  },
  {
    "text": "and if sufficiently big,\nit's one or the other, or the common case where they're\nabout the same within a log",
    "start": "919210",
    "end": "925700"
  },
  {
    "text": "factor. So we're going to use\nthe master method, but there are more\ngeneral ways of solving these kinds of things.",
    "start": "925700",
    "end": "931670"
  },
  {
    "text": "OK. Let's talk about some\nmulti-threaded algorithms. First thing I want to\ndo is talk about loops,",
    "start": "931670",
    "end": "938500"
  },
  {
    "text": "because loops are a great\nthing to analyze and understand",
    "start": "938500",
    "end": "945490"
  },
  {
    "text": "because so many\nprograms have loops. Probably 90% or more of the\nprograms that are parallelized",
    "start": "945490",
    "end": "952990"
  },
  {
    "text": "are parallelized by\nmaking parallel loops. The spawn and sync\ntypes of parallelism,",
    "start": "952990",
    "end": "960640"
  },
  {
    "text": "the subroutine-type\nparallelism, is not done that frequently in code.",
    "start": "960640",
    "end": "966130"
  },
  {
    "text": "Usually, it's loops. So what we're going\nto look at is a code",
    "start": "966130",
    "end": "972370"
  },
  {
    "start": "969000",
    "end": "969000"
  },
  {
    "text": "to do an in-place\nmatrix transpose, as an example of this.",
    "start": "972370",
    "end": "978110"
  },
  {
    "text": "So if you look at\nthis code, I want to swap the lower\nside of the matrix with the upper\nside of the matrix,",
    "start": "978110",
    "end": "984459"
  },
  {
    "text": "and here's some\ncode to do it, where I parallelize the outer loop. ",
    "start": "984460",
    "end": "992980"
  },
  {
    "text": "So we're running the outer\nindex from i equals 1 to n.",
    "start": "992980",
    "end": "998649"
  },
  {
    "text": "I'm actually running the\nindexes from 0 to n minus 1.",
    "start": "998650",
    "end": "1003780"
  },
  {
    "text": "And then the inner loop\ngoes from 0 up to i minus 1.",
    "start": "1003780",
    "end": "1010170"
  },
  {
    "text": "Now, I've seen people\nwrite transpose code-- this is one of these\ntrick questions they give you in interviews,\nwhere they say, write",
    "start": "1010170",
    "end": "1017970"
  },
  {
    "text": "the transpose of a\nmatrix with nested loops.",
    "start": "1017970",
    "end": "1023079"
  },
  {
    "text": "And what many people will\ndo is, the inner loop, they'll run to n rather\nthan running to i.",
    "start": "1023080",
    "end": "1031869"
  },
  {
    "text": "And what happens if you\nrun the inner loop to n? ",
    "start": "1031869",
    "end": "1040059"
  },
  {
    "text": "It's a very expensive\nidentity function. And there's an\neasier, faster way",
    "start": "1040060",
    "end": "1046449"
  },
  {
    "text": "to compute identity than with\ndoubly nested loops where you swap everything and\nyou swap them all back.",
    "start": "1046450",
    "end": "1053920"
  },
  {
    "text": "So it's important that\nthe iteration space here, what's the shape\nof the iteration space? If you look at\nthe i and j values",
    "start": "1053920",
    "end": "1060820"
  },
  {
    "text": "and you map them out on a plane,\nwhat's the shape that you get? It's not a square,\nwhich it would",
    "start": "1060820",
    "end": "1066549"
  },
  {
    "text": "be if they were both going\nfrom 1 to n, or 0 to n minus 1.",
    "start": "1066550",
    "end": "1072955"
  },
  {
    "text": "What's the shape of\nthis iteration space?",
    "start": "1072955",
    "end": "1078279"
  },
  {
    "text": "Yeah, it's a triangle. It's basically-- we're\ngoing to run through all the things in this lower area.",
    "start": "1078280",
    "end": "1087550"
  },
  {
    "text": "That's the idea. And we're going to swap it with\nthe things in the upper one. But the iteration space\nruns through just the lower",
    "start": "1087550",
    "end": "1096460"
  },
  {
    "text": "triangle-- or,\ncorrespondingly, it runs through the\nupper triangle, if you want to view it from\nthat point of view.",
    "start": "1096460",
    "end": "1101487"
  },
  {
    "text": "But it doesn't go\nthrough both triangles, because then you\nwill get an identity. So anyway, that's just a tip\nwhen you're interviewing.",
    "start": "1101487",
    "end": "1109960"
  },
  {
    "text": "Double-check that\nthey've got the loop indices to be what\nthey ought to be. And here what we've done\nis, we've parallelized",
    "start": "1109960",
    "end": "1116620"
  },
  {
    "text": "the outer loop, which\nmeans, how much work is on each iteration of this loop?",
    "start": "1116620",
    "end": "1121960"
  },
  {
    "start": "1121960",
    "end": "1127299"
  },
  {
    "text": "How much time does it take to\nexecute each iteration of loop? For a given value\nof i, what does it",
    "start": "1127300",
    "end": "1134400"
  },
  {
    "text": "cost us to execute the loop?",
    "start": "1134400",
    "end": "1141580"
  },
  {
    "text": "Yeah. AUDIENCE: [INAUDIBLE] CHARLES LEISERSON: Yes. Theta i, which means that--",
    "start": "1141580",
    "end": "1147430"
  },
  {
    "text": "if you think about\nthis, if you've got a certain number\nof processors, you don't want to just chunk it\nup so that each processor gets",
    "start": "1147430",
    "end": "1155470"
  },
  {
    "text": "an equal range of i to work on. You need something that's\ngoing to load balance.",
    "start": "1155470",
    "end": "1163330"
  },
  {
    "text": "And this is where\nthe Cilk technology is best, is when there are these\nunbalanced things, because it",
    "start": "1163330",
    "end": "1172870"
  },
  {
    "text": "does the right\nthing, as we'll see. ",
    "start": "1172870",
    "end": "1180039"
  },
  {
    "text": "So let's talk a little bit\nabout how loops are actually implemented by the Open Cilk\ncompiler and runtime system.",
    "start": "1180040",
    "end": "1191390"
  },
  {
    "text": "So what happens is, we have\nthis doubly-nested loop here,",
    "start": "1191390",
    "end": "1197872"
  },
  {
    "text": "but the only one that\nwe're interested in is the outer loop, basically. And what it does is, it\ncreates this recursive program",
    "start": "1197872",
    "end": "1208640"
  },
  {
    "text": "for the loop. And what is this program doing?",
    "start": "1208640",
    "end": "1214030"
  },
  {
    "text": "I'm highlighting,\nessentially, this part. This is basically\nthe loop body here,",
    "start": "1214030",
    "end": "1219190"
  },
  {
    "text": "which has been lifted into\nthis recursive program.",
    "start": "1219190",
    "end": "1225379"
  },
  {
    "text": "And what it's doing is,\nit is finding a midpoint and then recursively\ncalling itself",
    "start": "1225380",
    "end": "1234740"
  },
  {
    "text": "on the two sides until it\ngets down to, in this case,",
    "start": "1234740",
    "end": "1240470"
  },
  {
    "text": "a one-element iteration. And then it executes the body\nof the loop, which in this case",
    "start": "1240470",
    "end": "1251059"
  },
  {
    "start": "1251000",
    "end": "1251000"
  },
  {
    "text": "is itself a for loop, but\nnot a parallel for loop. So it's doing\ndivide and conquer.",
    "start": "1251060",
    "end": "1257450"
  },
  {
    "text": "It's just basically\ntree splitting. ",
    "start": "1257450",
    "end": "1267269"
  },
  {
    "text": "So basically, it's got\nthis control on top of it. And if I take a look at what's\ngoing on in the control,",
    "start": "1267270",
    "end": "1273090"
  },
  {
    "start": "1272000",
    "end": "1272000"
  },
  {
    "text": "it looks something like this. So this is using the DAG\nmodel that we saw before.",
    "start": "1273090",
    "end": "1281770"
  },
  {
    "text": "And now what I have\nhere highlighted",
    "start": "1281770",
    "end": "1286806"
  },
  {
    "text": "is the lifted body of the loop-- sorry, of the control. And then down below in the\npurple, I have the lifted body.",
    "start": "1286806",
    "end": "1295090"
  },
  {
    "text": "And what it's doing\nis basically saying, let me divide it into two parts,\nand then I spawn one recurrence",
    "start": "1295090",
    "end": "1306180"
  },
  {
    "text": "and I call the other. And I just keep dividing\nlike that till I get down",
    "start": "1306180",
    "end": "1311220"
  },
  {
    "text": "to the base condition. And then the work\nthat I'm doing-- I've sort of illustrated here--",
    "start": "1311220",
    "end": "1317040"
  },
  {
    "text": "the work I'm doing in\neach iteration of the loop is growing from 1 to n.",
    "start": "1317040",
    "end": "1323330"
  },
  {
    "text": "I'm showing it for 8, but in\ngeneral, this is working from 1 to n for this particular one.",
    "start": "1323330",
    "end": "1330570"
  },
  {
    "text": "Is that clear? So that's what's\nactually going on. So the Open Cilk runtime system\ndoes not have a loop primitive.",
    "start": "1330570",
    "end": "1340070"
  },
  {
    "text": "It doesn't have loops. It only has, essentially, this\nability to spawn and so forth.",
    "start": "1340070",
    "end": "1347040"
  },
  {
    "text": "And so things, effectively,\nare translated into this divide and conquer, and\nthat's the way that you",
    "start": "1347040",
    "end": "1352200"
  },
  {
    "text": "need to think about loops when\nyou're thinking in parallel. Make sense?",
    "start": "1352200",
    "end": "1357430"
  },
  {
    "text": "And so one of the questions is,\nthat seems like a lot of code to write for a simple loop.",
    "start": "1357430",
    "end": "1363600"
  },
  {
    "text": "What do we pay for that? How much did that cost us? So let's analyze\nthis a little bit--",
    "start": "1363600",
    "end": "1369140"
  },
  {
    "text": "analyze parallel loops. So as you know,\nwe analyze things",
    "start": "1369140",
    "end": "1374220"
  },
  {
    "start": "1370000",
    "end": "1370000"
  },
  {
    "text": "in terms of work and span. So what is the work\nof this computation?",
    "start": "1374220",
    "end": "1381420"
  },
  {
    "text": " Well, what's the work\nbefore you get there? What's the work of the\noriginal computation--",
    "start": "1381420",
    "end": "1388900"
  },
  {
    "text": "the doubly-nested loop? If you just think about\nit in terms of loops,",
    "start": "1388900",
    "end": "1395537"
  },
  {
    "text": "if they were serial loops,\nhow much work would be there? ",
    "start": "1395537",
    "end": "1403440"
  },
  {
    "text": "Doubly-nested loop. In a loop, n iterations.",
    "start": "1403440",
    "end": "1409009"
  },
  {
    "text": "In your iteration,\nyou're doing i work. Sum of i.",
    "start": "1409010",
    "end": "1414919"
  },
  {
    "text": "i equals 1 to n. What do you get? AUDIENCE: [INAUDIBLE] CHARLES LEISERSON: Yes. Theta n squared.",
    "start": "1414920",
    "end": "1420799"
  },
  {
    "text": "Doubly-nested group. And although you're not\ndoing half the work, you are doing the other\nhalf of the work--",
    "start": "1420800",
    "end": "1428380"
  },
  {
    "text": "of the n squared work\nthat you might think was there if you wrote the\nunfortunate identity function.",
    "start": "1428380",
    "end": "1433850"
  },
  {
    "text": " So the question is,\nhow much work is",
    "start": "1433850",
    "end": "1439190"
  },
  {
    "text": "in this particular computation? Because now I've got this whole\ntree-spawning business going on",
    "start": "1439190",
    "end": "1445490"
  },
  {
    "text": "in addition to the work that\nI'm doing in the leaves.",
    "start": "1445490",
    "end": "1450530"
  },
  {
    "text": "So the leaf work\nhere, along the bottom here, that's all going to\nbe order n squared work,",
    "start": "1450530",
    "end": "1458990"
  },
  {
    "text": "because that's the same as\nin the serial loop case.",
    "start": "1458990",
    "end": "1464330"
  },
  {
    "text": "How much does that other\nstuff up top [INAUDIBLE]?? It looks huge. It's bigger than the\nother stuff, isn't it?",
    "start": "1464330",
    "end": "1472160"
  },
  {
    "text": "How much is there? ",
    "start": "1472160",
    "end": "1481220"
  },
  {
    "text": "Basic computer science.  AUDIENCE: Theta of n? CHARLES LEISERSON: Yeah.",
    "start": "1481220",
    "end": "1486715"
  },
  {
    "text": "It's theta of n. Why is it theta if\nn in the upper part? Yep. AUDIENCE: Because it's\ngeometrically decreasing",
    "start": "1486715",
    "end": "1493724"
  },
  {
    "text": "[INAUDIBLE]  CHARLES LEISERSON: Yeah. So going from the leaves to the\nroot, every level is halving,",
    "start": "1493724",
    "end": "1503180"
  },
  {
    "text": "so it's geometric. So it's the total\nnumber of leaves, because there's constant work\nin each of those phrases.",
    "start": "1503180",
    "end": "1509300"
  },
  {
    "text": "So the total amount\nis theta n squared. Another way of\nthinking about this",
    "start": "1509300",
    "end": "1514820"
  },
  {
    "text": "is, you've got a complete\nbinary tree that we've created with n leaves.",
    "start": "1514820",
    "end": "1520490"
  },
  {
    "text": "How many internal\nnodes are there in a complete binary\ntree with n leaves? In this case, there's\nactually n over--",
    "start": "1520490",
    "end": "1526567"
  },
  {
    "text": "let's just say there's n leaves. Yeah. How many internal\nnodes are there? If I have n leaves, how many\ninternal nodes to the tree--",
    "start": "1526567",
    "end": "1534943"
  },
  {
    "text": "that is, nodes\nthat have children?  There's exactly n minus 1.",
    "start": "1534943",
    "end": "1542320"
  },
  {
    "text": "That's a property that's true\nof any full binary tree-- that is, any binary tree\nin which every non-leaf has",
    "start": "1542320",
    "end": "1548770"
  },
  {
    "text": "two children. There's exactly n minus 1.",
    "start": "1548770",
    "end": "1553940"
  },
  {
    "text": "So nice tree properties, nice\ncomputer science properties, right? We like computer science. That's why we're here--",
    "start": "1553940",
    "end": "1559330"
  },
  {
    "text": "not because we're going\nto make a lot of money. ",
    "start": "1559330",
    "end": "1566880"
  },
  {
    "text": "OK. Let's look at the span of this. Hmm.",
    "start": "1566880",
    "end": "1572720"
  },
  {
    "text": "What's the span of\nthis calculation?",
    "start": "1572720",
    "end": "1579655"
  },
  {
    "text": "Because that's how we\nunderstand parallelism, is by understanding\nwork and span. ",
    "start": "1579655",
    "end": "1592680"
  },
  {
    "text": "I see some familiar hands. OK. AUDIENCE: Theta n.",
    "start": "1592680",
    "end": "1597930"
  },
  {
    "text": "CHARLES LEISERSON: Theta n. Yeah. How did you get that? ",
    "start": "1597930",
    "end": "1603264"
  },
  {
    "text": "AUDIENCE: The largest path\nwould be the [INAUDIBLE] node",
    "start": "1603264",
    "end": "1610000"
  },
  {
    "text": "is size theta n and [INAUDIBLE] CHARLES LEISERSON: Yeah.",
    "start": "1610000",
    "end": "1615090"
  },
  {
    "text": "So we're basically--\nthe longest path is basically going from\nhere down, down, down to 8,",
    "start": "1615090",
    "end": "1623220"
  },
  {
    "text": "and then back up. And so the eight is really\nn in the general case.",
    "start": "1623220",
    "end": "1630870"
  },
  {
    "text": "That's really n in\nthe general case. And so we basically\nare going down,",
    "start": "1630870",
    "end": "1636409"
  },
  {
    "text": "And so the span of the\nloop control is log n. And that's the\nkey takeaway here. The span of loop\ncontrol is log n.",
    "start": "1636410",
    "end": "1644550"
  },
  {
    "text": "When I do divide and\nconquer like that, if I had an infinite\nnumber of processors,",
    "start": "1644550",
    "end": "1649590"
  },
  {
    "text": "I could get it all done\nin logarithmic time. But the 8 there is linear.",
    "start": "1649590",
    "end": "1656800"
  },
  {
    "text": "That's order n. In this case, n is 8.",
    "start": "1656800",
    "end": "1662980"
  },
  {
    "text": "So that's order n. So then it's log\nn plus order log n, which is therefore order n.",
    "start": "1662980",
    "end": "1670180"
  },
  {
    "start": "1670180",
    "end": "1675880"
  },
  {
    "text": "So what's the parallelism here? ",
    "start": "1675880",
    "end": "1682868"
  },
  {
    "text": "AUDIENCE: Theta n. CHARLES LEISERSON: Theta n. It's the ratio of the two. The ratio of the two is theta n.",
    "start": "1682868",
    "end": "1689190"
  },
  {
    "text": "Is that good? AUDIENCE: Theta of n squared?",
    "start": "1689190",
    "end": "1694242"
  },
  {
    "text": "CHARLES LEISERSON:\nWell, parallelism of n squared, do you mean? Or-- is this good parallelism?",
    "start": "1694242",
    "end": "1700434"
  },
  {
    "text": " Yeah, that's pretty good.",
    "start": "1700434",
    "end": "1707780"
  },
  {
    "text": "That's pretty good,\nbecause typically, you're going to be working on\nsystems that have maybe--",
    "start": "1707780",
    "end": "1715400"
  },
  {
    "text": "if you are working\non a big, big system, you've got maybe 64 cores\nor 128 cores or something.",
    "start": "1715400",
    "end": "1723770"
  },
  {
    "text": "That's pretty big. Whereas this is saying,\nif you're doing that,",
    "start": "1723770",
    "end": "1729268"
  },
  {
    "text": "you better have a\nproblem that's really big that you're running it on. And so typically,\nn is way bigger",
    "start": "1729268",
    "end": "1736580"
  },
  {
    "text": "than the number of processors\nfor a problem like this.",
    "start": "1736580",
    "end": "1742110"
  },
  {
    "text": "Not always the case,\nbut here it is. Any questions about this? So we can use our\nwork and span analysis",
    "start": "1742110",
    "end": "1751710"
  },
  {
    "text": "to understand\nthat, hey, the work overhead is a constant factor.",
    "start": "1751710",
    "end": "1758279"
  },
  {
    "text": "And We're going to talk more\nabout the overhead of work. But basically, from an\nasymptotic point of view,",
    "start": "1758280",
    "end": "1766980"
  },
  {
    "text": "our work is n squared just\nlike the original code, and we have a fair\namount of parallelism.",
    "start": "1766980",
    "end": "1772260"
  },
  {
    "text": "We have order n parallelism. How about if we make the inner\nloop be parallel as well?",
    "start": "1772260",
    "end": "1783840"
  },
  {
    "start": "1777000",
    "end": "1777000"
  },
  {
    "text": "So rather than just\nparallelize the outer loop, we're also going to\nparallelize the inner loop.",
    "start": "1783840",
    "end": "1789810"
  },
  {
    "text": "So how much work do we\nhave for this situation? ",
    "start": "1789810",
    "end": "1802159"
  },
  {
    "text": "Hint-- all work questions are\ntrivial, or at least no harder than they were\nwhen you were doing",
    "start": "1802160",
    "end": "1810380"
  },
  {
    "text": "ordinary serial algorithms. ",
    "start": "1810380",
    "end": "1817029"
  },
  {
    "text": "Maybe we can come up with a\ntrick question on the exam where the work changes,\nbut almost always, the work",
    "start": "1817030",
    "end": "1824620"
  },
  {
    "text": "doesn't change. So what's the work? Yeah. n squared.",
    "start": "1824620",
    "end": "1830860"
  },
  {
    "text": "Parallelizing stuff\ndoesn't change the work. What it hopefully does is reduce\nthe span of the calculation.",
    "start": "1830860",
    "end": "1838750"
  },
  {
    "text": "And by reducing the span,\nwe get big parallelism. That's the idea. Now, sometimes it's the case\nwhen you parallelize stuff",
    "start": "1838750",
    "end": "1845530"
  },
  {
    "text": "that you add work, and\nthat's unfortunate, because it means that\neven if you end up taking your parallel program\nand running it on one processing",
    "start": "1845530",
    "end": "1854290"
  },
  {
    "text": "core, you're not going\nto get any speedup. It's going to be a\nslowdown compared",
    "start": "1854290",
    "end": "1859720"
  },
  {
    "text": "to the original algorithm. So we're actually\ninterested generally in work-efficient\nparallel algorithms, which",
    "start": "1859720",
    "end": "1865423"
  },
  {
    "text": "we'll talk more about later. So generally, we're\nafter work efficiency. OK. What's the span of this?",
    "start": "1865423",
    "end": "1871605"
  },
  {
    "text": "AUDIENCE: Is it theta n still? CHARLES LEISERSON: It\nis not still theta n. What was your thinking\nto say it was theta of n?",
    "start": "1871605",
    "end": "1879151"
  },
  {
    "text": "AUDIENCE: So the path would\nbe similar to 8, and then--",
    "start": "1879151",
    "end": "1885495"
  },
  {
    "text": "CHARLES LEISERSON:\nBut now notice that 8 is a for loop itself.",
    "start": "1885495",
    "end": "1890634"
  },
  {
    "text": "AUDIENCE: Yeah. I'm saying maybe you\ncould extend the path another n so it would be 2n.",
    "start": "1890634",
    "end": "1896270"
  },
  {
    "text": "CHARLES LEISERSON: OK. Not quite, but-- so\nthis man is commendable.",
    "start": "1896270",
    "end": "1903669"
  },
  {
    "text": " [APPLAUSE] Absolutely.",
    "start": "1903670",
    "end": "1910340"
  },
  {
    "text": "This is commendable,\nbecause this is-- this is why I try to have\na bit of a Socratic method in here, where I'm asking\nquestions as opposed to just",
    "start": "1910340",
    "end": "1919030"
  },
  {
    "text": "sitting here lecturing and\nhaving it go over your heads. You have the opportunity\nto ask questions,",
    "start": "1919030",
    "end": "1925720"
  },
  {
    "text": "and to have your particular\nmisunderstandings or whatever corrected. That's how you learn.",
    "start": "1925720",
    "end": "1932830"
  },
  {
    "text": "And so I'm really in\nfavor of anybody who wants to come here and learn.",
    "start": "1932830",
    "end": "1938860"
  },
  {
    "text": "That's my desire,\nand that's my job, is to teach people\nwho want to learn.",
    "start": "1938860",
    "end": "1944130"
  },
  {
    "text": "So I hope that this is a\nsafe space for you folks",
    "start": "1944130",
    "end": "1950650"
  },
  {
    "text": "to be willing to put\nyourself out there and not necessarily get stuff right.",
    "start": "1950650",
    "end": "1957230"
  },
  {
    "text": "I can't tell you how many\ntimes I've screwed up, and it's only by\nairing it and so forth",
    "start": "1957230",
    "end": "1962732"
  },
  {
    "text": "and having somebody say,\nno, I don't think it's like that, Charles. This is like this.",
    "start": "1962732",
    "end": "1968529"
  },
  {
    "text": "And I said, oh\nyeah, you're right. God, that was stupid. ",
    "start": "1968530",
    "end": "1974260"
  },
  {
    "text": "But the fact is that\nI no longer beat my head when I'm being stupid.",
    "start": "1974260",
    "end": "1979690"
  },
  {
    "text": "Our natural state is stupidity. We have to work hard\nnot to be stupid.",
    "start": "1979690",
    "end": "1986880"
  },
  {
    "text": "Right? It's hard work not to be stupid. Yeah, question.",
    "start": "1986880",
    "end": "1992330"
  },
  {
    "text": "AUDIENCE: It's not\nreally a question. My philosophy on\ntalking in mid-lecture is that I don't want to\nwaste other people's time.",
    "start": "1992330",
    "end": "1998688"
  },
  {
    "text": "CHARLES LEISERSON:\nYeah, but usually when-- my experience is-- and this\nis, let me tell you from--",
    "start": "1998688",
    "end": "2004350"
  },
  {
    "text": "I've been at MIT\nalmost 38 years. My experience is that one\nperson has a question,",
    "start": "2004350",
    "end": "2011570"
  },
  {
    "text": "there's all these other\npeople in the room who have the same question. And by you\narticulating it, you're",
    "start": "2011570",
    "end": "2017850"
  },
  {
    "text": "actually helping them out. If I think you're going to slow,\nif things are going too slow,",
    "start": "2017850",
    "end": "2023519"
  },
  {
    "text": "that we're wasting\npeople's time, that's my job as the lecturer to\nmake sure that doesn't happen.",
    "start": "2023520",
    "end": "2028787"
  },
  {
    "text": "And I'll say, let's\ntake this offline. We can talk after class. But I appreciate\nyour point of view,",
    "start": "2028787",
    "end": "2036030"
  },
  {
    "text": "because that's considerate. But actually, it's\nmore consideration",
    "start": "2036030",
    "end": "2041120"
  },
  {
    "text": "if you're willing to\nair what you think and have other people say, you\nknow, I had that same question.",
    "start": "2041120",
    "end": "2047914"
  },
  {
    "text": "Certainly there are going\nto be people in the class who, say, roll their\neyes or whatever.",
    "start": "2047915",
    "end": "2053070"
  },
  {
    "text": "But look, I don't\nteach to the top 10%. I try to teach to the top 90%.",
    "start": "2053070",
    "end": "2061169"
  },
  {
    "text": "And believe me-- [LAUGHTER] Believe me that I get\nfarther with students",
    "start": "2061170",
    "end": "2072329"
  },
  {
    "text": "and have more people\nenjoying the course and learning this stuff-- which is not\nnecessarily easy stuff.",
    "start": "2072330",
    "end": "2079620"
  },
  {
    "text": "After the fact, you're going\nto discover this is easy. But while you're learning\nit, it's not easy.",
    "start": "2079620",
    "end": "2086669"
  },
  {
    "text": "This is what Steven Pinker\ncalls the curse of knowledge.",
    "start": "2086670",
    "end": "2092250"
  },
  {
    "text": "Once you know something,\nyou have a really hard time putting yourself in\nthe position of what",
    "start": "2092250",
    "end": "2099150"
  },
  {
    "text": "it was like to not know it. ",
    "start": "2099150",
    "end": "2104190"
  },
  {
    "text": "And so it's very easy\nto learn something, and then when somebody\ndoesn't understand, it's like, oh, whatever.",
    "start": "2104190",
    "end": "2113000"
  },
  {
    "text": "But the fact of the matter\nis that most of us-- it's that empathy. That's what makes for you\nto be a good communicator.",
    "start": "2113000",
    "end": "2121410"
  },
  {
    "text": "And all of you I know\nare at some point going to have to\ndo communication with other people who\nare not as technically",
    "start": "2121410",
    "end": "2128910"
  },
  {
    "text": "sophisticated as you folks are. And so this is really\ngood to sort of appreciate",
    "start": "2128910",
    "end": "2136020"
  },
  {
    "text": "how important it is to\nrecognize that this stuff isn't",
    "start": "2136020",
    "end": "2142620"
  },
  {
    "text": "necessarily easy when\nyou're learning it. Later, you can learn it,\nand then it'll be easy.",
    "start": "2142620",
    "end": "2149194"
  },
  {
    "text": "But that doesn't mean it's\nnot so easy for somebody else. So those of you who think that\nsome of these answers are like,",
    "start": "2149195",
    "end": "2155820"
  },
  {
    "text": "come on, move along,\nmove along, please be patient with the other\npeople in the class.",
    "start": "2155820",
    "end": "2162842"
  },
  {
    "text": "If they learn\nbetter, they're going to be better teammates\non projects and so forth.",
    "start": "2162842",
    "end": "2169320"
  },
  {
    "text": "And we'll all learn. Nobody's in competition\nwith anybody here, for grades or anything.",
    "start": "2169320",
    "end": "2175710"
  },
  {
    "text": "Nobody's in competition. We all set it up so we're\ngoing against benchmarks and so forth. You're not in competition.",
    "start": "2175710",
    "end": "2181557"
  },
  {
    "text": "So we want to make this\nsomething where everybody helps everybody learn. I probably spent too much time\non that, but in some sense,",
    "start": "2181558",
    "end": "2187570"
  },
  {
    "text": "not nearly enough. OK. So the span is not order n.",
    "start": "2187570",
    "end": "2194590"
  },
  {
    "text": "We got that much. Who else would\nlike to hazard to-- OK. AUDIENCE: Is it log n?",
    "start": "2194590",
    "end": "2200488"
  },
  {
    "text": "CHARLES LEISERSON: It is log n. What's your reasoning? AUDIENCE: It's the normal\nlog n from the time before, but since we're\nexpanding the n--",
    "start": "2200488",
    "end": "2208076"
  },
  {
    "text": "CHARLES LEISERSON: Yup. AUDIENCE: --again into another\ntree, it's log n plus log n. CHARLES LEISERSON:\nLog n plus log n.",
    "start": "2208076",
    "end": "2213430"
  },
  {
    "text": "Good. AUDIENCE: [INAUDIBLE] CHARLES LEISERSON: And\nthen what about the leaves? AUDIENCE: [INAUDIBLE]",
    "start": "2213430",
    "end": "2219240"
  },
  {
    "text": "CHARLES LEISERSON: What's--\nyou got to add in the span of the leaves. That was just the\nspan of the control. AUDIENCE: The leaves are just 1.",
    "start": "2219240",
    "end": "2225370"
  },
  {
    "text": "CHARLES LEISERSON:\nThe leaves are just 1.  Boom. So the span of the outer\nloop is order log n.",
    "start": "2225370",
    "end": "2233369"
  },
  {
    "text": "The inner loop is order log n. And the span of the\nbody is order 1, because we're going\ndown to the body,",
    "start": "2233370",
    "end": "2239760"
  },
  {
    "text": "now it's just doing one\niteration of serial execution. It's not doing i iterations.",
    "start": "2239760",
    "end": "2244980"
  },
  {
    "text": "It's only doing one iteration. And so I add all that\ntogether, and I get log n. ",
    "start": "2244980",
    "end": "2252563"
  },
  {
    "text": "Does that makes sense? ",
    "start": "2252563",
    "end": "2258750"
  },
  {
    "text": "So the parallelism is? ",
    "start": "2258750",
    "end": "2269798"
  },
  {
    "text": "This one, I should--\nevery hand in the room should be up, waving to\ncall on me, call on me.",
    "start": "2269798",
    "end": "2275760"
  },
  {
    "text": "Sure. AUDIENCE: [INAUDIBLE] CHARLES LEISERSON: Yeah.\nn squared over log n. That's the ratio of the two.",
    "start": "2275760",
    "end": "2281220"
  },
  {
    "text": " Good. Any questions about that?",
    "start": "2281220",
    "end": "2287940"
  },
  {
    "text": "OK. So the parallelism is\nn squared over log n,",
    "start": "2287940",
    "end": "2294840"
  },
  {
    "text": "and this is more parallel\nthan the previous one.",
    "start": "2294840",
    "end": "2301710"
  },
  {
    "text": "But it turns out-- you've got to remember, even\nthough it's more parallel, is it a better\nalgorithm in practice?",
    "start": "2301710",
    "end": "2308070"
  },
  {
    "text": " Not necessarily,\nbecause parallelism is like a thresholding thing.",
    "start": "2308070",
    "end": "2314710"
  },
  {
    "text": "What you need is enough\nparallelism beyond the number of processors that you have--",
    "start": "2314710",
    "end": "2321050"
  },
  {
    "text": "the parallel\nslackness, remember? So you have to have the number--\nthe amount of parallelism,",
    "start": "2321050",
    "end": "2327580"
  },
  {
    "text": "if it's much greater than\nthe number of processors, you're good. So for something like this,\nif with order n parallelism",
    "start": "2327580",
    "end": "2337460"
  },
  {
    "text": "you're way bigger than\nthe number of processors, you don't need to\nparallelize the inner loop. ",
    "start": "2337460",
    "end": "2344845"
  },
  {
    "text": "You don't need to\nparallelize the inner loop. You'll be fine. And in fact, we're talking a\nlittle bit about overheads,",
    "start": "2344845",
    "end": "2351180"
  },
  {
    "text": "and I'm going to do\nthat with an example from using vector addition.",
    "start": "2351180",
    "end": "2357750"
  },
  {
    "start": "2353000",
    "end": "2353000"
  },
  {
    "text": "So here's a really\nsimple piece of code.",
    "start": "2357750",
    "end": "2362770"
  },
  {
    "text": "It's a vector-- add two\nvectors together, two arrays. And all it does is,\nit adds b into a.",
    "start": "2362770",
    "end": "2368220"
  },
  {
    "text": "You can see every\nposition as b into a. And I'm going to\nparallelize this",
    "start": "2368220",
    "end": "2374339"
  },
  {
    "text": "by putting a Cilk for in front,\nrather than an ordinary for. And what that does is,\nit gives us this divide",
    "start": "2374340",
    "end": "2380640"
  },
  {
    "text": "and conquer tree once\nagain, with n leaves.",
    "start": "2380640",
    "end": "2386849"
  },
  {
    "text": "And the work here is\norder n, because that's-- we've got n iterations\nof constant time.",
    "start": "2386850",
    "end": "2394930"
  },
  {
    "text": "And the span is\njust the control-- log n. And so the parallelism\nis n over log n.",
    "start": "2394930",
    "end": "2400200"
  },
  {
    "text": " So this is basically easier\nthan what we just did.",
    "start": "2400200",
    "end": "2409440"
  },
  {
    "text": "So now-- if I look at\nthis, though, the work here includes some\nsubstantial overhead,",
    "start": "2409440",
    "end": "2418818"
  },
  {
    "text": "because there are all\nthese function calls. It may be order n,\nand that's good enough",
    "start": "2418818",
    "end": "2424090"
  },
  {
    "text": "if you're certain\nkinds of theoreticians. This kind of theoretician,\nthat's not good enough.",
    "start": "2424090",
    "end": "2431230"
  },
  {
    "text": "I want to understand where\nthese overheads are going. So the first thing\nthat I might do",
    "start": "2431230",
    "end": "2440116"
  },
  {
    "text": "to get rid of that overhead-- so in this case,\nwhat I'm saying is",
    "start": "2440116",
    "end": "2446720"
  },
  {
    "text": "that as I do the\ndivide and conquer, if I go all the way\ndown to n equals 1,",
    "start": "2446720",
    "end": "2452090"
  },
  {
    "text": "what am I doing in a leaf? How much work is in one\nof these leaves here? ",
    "start": "2452090",
    "end": "2459964"
  },
  {
    "text": "It's an add. It's two memory fetches and\na memory store and an add.",
    "start": "2459964",
    "end": "2466887"
  },
  {
    "text": "The memory operations are going\nto be the most expensive thing there. That's all that's going on.",
    "start": "2466887",
    "end": "2473609"
  },
  {
    "text": "And yet, right before then,\nI've done a subroutine call--",
    "start": "2473610",
    "end": "2480250"
  },
  {
    "text": "a parallel subroutine\ncall, mind you-- and that's going to have\nsubstantial overhead.",
    "start": "2480250",
    "end": "2487975"
  },
  {
    "text": "And so the question is, do\nyou do a subroutine call to add two numbers together? ",
    "start": "2487975",
    "end": "2494060"
  },
  {
    "text": "That's pretty expensive. So let's take a look at\nhow we can optimize away some of this overhead.",
    "start": "2494060",
    "end": "2501060"
  },
  {
    "start": "2501000",
    "end": "2501000"
  },
  {
    "text": "And so this gets more into\nthe realm of engineering. So the Open Cilk\nsystem has a pragma.",
    "start": "2501060",
    "end": "2510319"
  },
  {
    "text": "Pragma is a compiler directive-- suggestion to the compiler-- where it can suggest, in this\ncase, that there be a grain",
    "start": "2510320",
    "end": "2518750"
  },
  {
    "text": "size up here of G, for\nwhatever you set G to.",
    "start": "2518750",
    "end": "2525990"
  },
  {
    "text": "And the grain size\nis essentially-- we're going to use-- and it shows up\nhere in the code--",
    "start": "2525990",
    "end": "2531230"
  },
  {
    "text": "as instead of\nending up-- it used to be high greater than\nlow plus 1, so that you ended with a single element.",
    "start": "2531230",
    "end": "2537470"
  },
  {
    "text": "Now it's going to be plus\nG, so that at the leaves, I'm going to have up\nto G elements per chunk",
    "start": "2537470",
    "end": "2545210"
  },
  {
    "text": "that I do when I'm doing\nmy divide and conquer. So therefore, I can take\nmy subroutine overhead",
    "start": "2545210",
    "end": "2551000"
  },
  {
    "text": "and amortize it\nacross G iterations rather than amortizing\nacross one iteration.",
    "start": "2551000",
    "end": "2557510"
  },
  {
    "text": "So that's coarsening. Now, if the grain size\npragma is not specified,",
    "start": "2557510",
    "end": "2564980"
  },
  {
    "text": "the Cilk runtime system\nmakes its best guess to minimize the overhead.",
    "start": "2564980",
    "end": "2570440"
  },
  {
    "text": "So what it actually\ndoes at runtime is, it figures out for the loop\nhow many cores it's running on,",
    "start": "2570440",
    "end": "2575890"
  },
  {
    "text": "and makes a good guess\nas to the actual-- how much to run\nserially at the leaves",
    "start": "2575890",
    "end": "2582460"
  },
  {
    "text": "and how much to do in parallel. Does that make sense? ",
    "start": "2582460",
    "end": "2588000"
  },
  {
    "text": "So it's basically\ntrying to overcome that. So let's analyze\nthis a little bit. ",
    "start": "2588000",
    "end": "2594760"
  },
  {
    "start": "2593000",
    "end": "2593000"
  },
  {
    "text": "Let's let i be the time for\none iteration of the loop body. So this is i for iteration.",
    "start": "2594760",
    "end": "2602590"
  },
  {
    "text": "This is of this\nparticular loop body-- so basically, the cost\nof those three memory",
    "start": "2602590",
    "end": "2608320"
  },
  {
    "text": "operations plus an add. And G is the grain size.",
    "start": "2608320",
    "end": "2616510"
  },
  {
    "text": "And now let's take a\nlook-- add another variable here, which is the time to\nperform a spawn and return.",
    "start": "2616510",
    "end": "2623069"
  },
  {
    "text": "I'm going to call\na spawn and return. It's basically the\noverhead for spawning. ",
    "start": "2623070",
    "end": "2630400"
  },
  {
    "text": "So if I look at the\nwork in this context, I can view it as I've\ngot T1 work, which",
    "start": "2630400",
    "end": "2642280"
  },
  {
    "text": "is n here times the\nnumber of iterations--",
    "start": "2642280",
    "end": "2647920"
  },
  {
    "text": "because I've got one, two,\nthree, up to n iterations. And then I have--",
    "start": "2647920",
    "end": "2655062"
  },
  {
    "text": "and those are just\nthe normal iterations. And then, since I have n over\nG minus 1-- there's n over G",
    "start": "2655062",
    "end": "2661210"
  },
  {
    "text": "leaves here of\nsize G. So I have n over G minus 1\ninternal nodes, which",
    "start": "2661210",
    "end": "2669130"
  },
  {
    "text": "are my subroutine overhead. That's S. So the total work\nis n times i plus n over G",
    "start": "2669130",
    "end": "2675609"
  },
  {
    "text": "minus 1 times S. Now, in the original code,\neffectively, the work is what?",
    "start": "2675610",
    "end": "2682390"
  },
  {
    "text": " If I had the code\nwithout the Cilk for loop, how much work is\nthere before I put in all",
    "start": "2682390",
    "end": "2696640"
  },
  {
    "text": "this parallel control stuff? What would the work be? Yeah. AUDIENCE: n i?",
    "start": "2696640",
    "end": "2702099"
  },
  {
    "text": "CHARLES LEISERSON: n times i. We're just doing n iterations. Yeah, there's a little\nbit of loop control,",
    "start": "2702100",
    "end": "2707170"
  },
  {
    "text": "but that loop control\nis really cheap. And on a modern\nout-of-order processor,",
    "start": "2707170",
    "end": "2715450"
  },
  {
    "text": "the cost of\nincrementing a variable and testing against its bound\nis dwarfed by the stuff going on",
    "start": "2715450",
    "end": "2721779"
  },
  {
    "text": "inside the loop. So it's ni. So this part here--",
    "start": "2721780",
    "end": "2727480"
  },
  {
    "text": "oops, what did I do? Oops, I went back. I see. So this part here--",
    "start": "2727480",
    "end": "2735570"
  },
  {
    "text": "this part here, there we go-- is all overhead. This is what it\ncosts-- this part here",
    "start": "2735570",
    "end": "2741869"
  },
  {
    "text": "is what cost me originally. ",
    "start": "2741870",
    "end": "2747170"
  },
  {
    "text": "So let's take a look\nat the span of this.",
    "start": "2747170",
    "end": "2753040"
  },
  {
    "text": "So the span is\ngoing to be, well,",
    "start": "2753040",
    "end": "2759940"
  },
  {
    "text": "if I add up what's at the\nleaves, that's just G times i.",
    "start": "2759940",
    "end": "2765079"
  },
  {
    "text": "And now I've got\nthe overhead here for any of these paths, which\nis basically proportional--",
    "start": "2765080",
    "end": "2771890"
  },
  {
    "text": "I'm ignoring constants\nhere to make it easier-- log of n over G times S,\nbecause it's going log levels.",
    "start": "2771890",
    "end": "2779650"
  },
  {
    "text": "And I've got n over G\nchunks, because each-- I've got G things at the\niterations of each leaf,",
    "start": "2779650",
    "end": "2786339"
  },
  {
    "text": "so therefore the number\nof leaves n over G. And I've got n\nminus 1 of those--",
    "start": "2786340",
    "end": "2794990"
  },
  {
    "text": "sorry, got log n of\nthose-- actually, 2 log n. 2 log n over G of those times\nS. Actually, maybe I don't.",
    "start": "2794990",
    "end": "2803020"
  },
  {
    "text": "Maybe I just have\nlog n, because I'm going to count it going\ndown and going up. So actually, constant\nof 1 is fine.",
    "start": "2803020",
    "end": "2809260"
  },
  {
    "text": "Who's confused? OK. Let's ask some questions.",
    "start": "2809260",
    "end": "2814609"
  },
  {
    "text": "You have a question? I know you're confused. Believe me, I spend--",
    "start": "2814610",
    "end": "2820760"
  },
  {
    "text": "one of my great\nsuccesses in life was discovering that, oh,\nconfusion is how I usually am.",
    "start": "2820760",
    "end": "2828440"
  },
  {
    "text": "And then it's getting\nconfused that is--",
    "start": "2828440",
    "end": "2833930"
  },
  {
    "text": "that's the thing, because\nI see so many people going through life thinking\nthey're not confused, but you know what,\nthey're confused.",
    "start": "2833930",
    "end": "2842240"
  },
  {
    "text": "And that's a worse\nstate of affairs to be in than knowing\nthat you're confused. Let's ask some questions.",
    "start": "2842240",
    "end": "2847490"
  },
  {
    "text": "People who are confused,\nlet's ask some questions, because I want to make sure\nthat everybody gets this.",
    "start": "2847490",
    "end": "2853650"
  },
  {
    "text": "And for those who you think\nknow it already, sometimes it helps them to know it\na little bit even better",
    "start": "2853650",
    "end": "2860359"
  },
  {
    "text": "when we go through a\ndiscussion like this. So somebody ask me a question. ",
    "start": "2860360",
    "end": "2866700"
  },
  {
    "text": "Yes. AUDIENCE: Could you explain the\nsecond half of that [INAUDIBLE] CHARLES LEISERSON: Yeah. OK. The second half\nof the work part.",
    "start": "2866700",
    "end": "2873390"
  },
  {
    "text": "OK. So the second half of the\nwork part, n over G minus 1. So the first thing is,\nif I've got G iterations",
    "start": "2873390",
    "end": "2879630"
  },
  {
    "text": "at the leaves of a binary\ntree, how many leaves do I have if I've got a\ntotal of n iterations?",
    "start": "2879630",
    "end": "2887287"
  },
  {
    "text": "AUDIENCE: Is it n over G? CHARLES LEISERSON: n over\nG. That's the first thing. The second thing is a\nfact about binary trees--",
    "start": "2887288",
    "end": "2894390"
  },
  {
    "text": "of any full binary tree, but\nin particular complete binary trees. How many internal\nnodes are there",
    "start": "2894390",
    "end": "2899799"
  },
  {
    "text": "in a complete binary tree? If n is the number of\nleaves, it's n minus 1.",
    "start": "2899800",
    "end": "2905410"
  },
  {
    "text": "Here, the number of\nleaves is n over G, so it's n over G minus 1.",
    "start": "2905410",
    "end": "2911214"
  },
  {
    "text": "That clear up something\nfor some people? OK, good.",
    "start": "2911215",
    "end": "2916420"
  },
  {
    "text": "So that's where that-- and now each of those,\nI've got to do those three colorful operations, which\nis what I'm calling S.",
    "start": "2916420",
    "end": "2924890"
  },
  {
    "text": "So you got the work down? OK. Who has a question about span? Span's my favorite.",
    "start": "2924890",
    "end": "2930618"
  },
  {
    "text": " Work is good right.",
    "start": "2930618",
    "end": "2936010"
  },
  {
    "text": "Work is more important,\nactually, in most contexts. But span is so cool.",
    "start": "2936010",
    "end": "2943170"
  },
  {
    "text": "Yeah. AUDIENCE: What did you mean\nwhen you said [INAUDIBLE]",
    "start": "2943170",
    "end": "2948755"
  },
  {
    "text": " CHARLES LEISERSON: So\nwhat I was saying-- well, I think what I was saying-- I think I was mis-saying\nsomething, probably, there.",
    "start": "2948756",
    "end": "2955480"
  },
  {
    "text": "But the point is that\nthe span is basically starting at the top here, and\ntaking any path down to a leaf",
    "start": "2955480",
    "end": "2961740"
  },
  {
    "text": "and then going back up. And so if I look at\nthat, that's going",
    "start": "2961740",
    "end": "2966900"
  },
  {
    "text": "to be then log of\nthe number of leaves. Well, the number of leaves,\nas we agreed, was n over G.",
    "start": "2966900",
    "end": "2973860"
  },
  {
    "text": "And then each of\nthose is, at most, S to do the subroutine calling\nand so forth that's bookkeeping",
    "start": "2973860",
    "end": "2982200"
  },
  {
    "text": "that's in that node. That make sense? Still I didn't\nanswer the question?",
    "start": "2982200",
    "end": "2988290"
  },
  {
    "text": "Or-- AUDIENCE: Why is that the span? Why shouldn't it be [INAUDIBLE]",
    "start": "2988290",
    "end": "2995140"
  },
  {
    "text": "CHARLES LEISERSON: It\ncould be any of the paths. But take a look at all the\npaths, go down, and back up.",
    "start": "2995140",
    "end": "3000950"
  },
  {
    "text": "There's no path that's\ngoing down and around and up and so forth. This is a DAG.",
    "start": "3000950",
    "end": "3006590"
  },
  {
    "text": "So if you just look at the\ndirections of the arrows. You got to follow the\ndirections of the arrows. You can't go down and up.",
    "start": "3006590",
    "end": "3013380"
  },
  {
    "text": "You're either going down,\nor you've started back up.",
    "start": "3013380",
    "end": "3018670"
  },
  {
    "text": "So it's always going\nto be, essentially, down through a set of\nsubroutines and back up through a set of subroutines.",
    "start": "3018670",
    "end": "3025402"
  },
  {
    "text": "Does that make sense? And if you think about the\ncode, the recursive code, what's",
    "start": "3025402",
    "end": "3031090"
  },
  {
    "text": "happening when you do\ndivide and conquer? If you were operating\nwith a stack, how many things would get\nstacked up and then unstacked?",
    "start": "3031090",
    "end": "3039070"
  },
  {
    "text": "So the path down and\nback up would also be logarithmic at most.",
    "start": "3039070",
    "end": "3046059"
  },
  {
    "text": " Does that makes sense?",
    "start": "3046060",
    "end": "3051200"
  },
  {
    "text": "So I don't have a-- if I had one subtree here,\nfor example, dependent on--",
    "start": "3051200",
    "end": "3057150"
  },
  {
    "text": "oops, that's not the mode\nI want to be in-- so one subtree here dependent\non another subtree,",
    "start": "3057150",
    "end": "3063880"
  },
  {
    "text": "then indeed, the\nspan would grow. But the whole point is not to\nhave these two things-- to make",
    "start": "3063880",
    "end": "3070360"
  },
  {
    "text": "these two things\nindependent, so I can run them at the same time. So there's no dependency there.",
    "start": "3070360",
    "end": "3077870"
  },
  {
    "text": "We good? OK. So here I have the\nwork and the span.",
    "start": "3077870",
    "end": "3085820"
  },
  {
    "text": "I have two things\nI want out of this. Number one, I want\nthe work to be small.",
    "start": "3085820",
    "end": "3091740"
  },
  {
    "text": "I want work to be close\nto the work of the n times",
    "start": "3091740",
    "end": "3097340"
  },
  {
    "text": "i, the work of the\nordinary serial algorithm.",
    "start": "3097340",
    "end": "3103310"
  },
  {
    "text": "And I want the span to be\nsmall, so it's as parallel as possible. Those things are working\nin opposite directions,",
    "start": "3103310",
    "end": "3110300"
  },
  {
    "text": "because if you look,\nthe dominant term for G in the first\nequation is dividing n.",
    "start": "3110300",
    "end": "3121400"
  },
  {
    "text": "So if I want the work to be\nsmall, I want G to be what?",
    "start": "3121400",
    "end": "3128190"
  },
  {
    "text": "Big.  The dominant term\nfor G in the span",
    "start": "3128190",
    "end": "3135050"
  },
  {
    "text": "is the G multiplied by the i. There is another term there,\nbut that's a lower-order term.",
    "start": "3135050",
    "end": "3142410"
  },
  {
    "text": "So if I want the span to be\nsmall, I want G to be small.",
    "start": "3142410",
    "end": "3149930"
  },
  {
    "text": "They're going in\nopposite directions. So what we're interested\nin is picking a--",
    "start": "3149930",
    "end": "3157539"
  },
  {
    "text": "finding a medium place. We want G to be-- and in particular, if you\nlook at this, what I want",
    "start": "3157540",
    "end": "3165760"
  },
  {
    "text": "is G to be at least S over i. Why? If I make G be much\nbigger than S over i--",
    "start": "3165760",
    "end": "3172975"
  },
  {
    "text": " so if G is bigger\nthan S over i--",
    "start": "3172975",
    "end": "3178819"
  },
  {
    "text": "then this term\nmultiplied by S ends up being much less than this term.",
    "start": "3178820",
    "end": "3186160"
  },
  {
    "text": "You see that? That's algebra. ",
    "start": "3186160",
    "end": "3191770"
  },
  {
    "text": "So do you see that\nif I make G be-- if G is much less\nthan S over i--",
    "start": "3191770",
    "end": "3198457"
  },
  {
    "text": "so get rid of the minus 1. That doesn't matter. So that's really n times S\nover G, so therefore S over G,",
    "start": "3198457",
    "end": "3208210"
  },
  {
    "text": "that's basically\nmuch smaller than i. So I end up with something\nwhere the result is",
    "start": "3208210",
    "end": "3214789"
  },
  {
    "text": "much smaller than n i. Does that make sense?",
    "start": "3214790",
    "end": "3221470"
  },
  {
    "text": "OK. How we doing on time? OK. I'm going to get\nthrough everything that I expect to get\nthrough, despite my rant.",
    "start": "3221470",
    "end": "3228130"
  },
  {
    "text": " OK. Does that make sense?",
    "start": "3228130",
    "end": "3233825"
  },
  {
    "text": "We want G to be much\ngreater than S over i. Then the overhead is\ngoing to be small,",
    "start": "3233825",
    "end": "3239350"
  },
  {
    "text": "because I'm going to do a\nwhole bunch of iterations that are going to make it so that\nthat function call was just",
    "start": "3239350",
    "end": "3245340"
  },
  {
    "text": "like, eh, who cares? That's the idea. ",
    "start": "3245340",
    "end": "3254340"
  },
  {
    "text": "So that's the goal. So let's take a look at-- let's see, what was the-- ",
    "start": "3254340",
    "end": "3267579"
  },
  {
    "text": "let me just see here. Did I-- somehow I feel like\nI have something out of order here, because now I have\nthe other implementation.",
    "start": "3267580",
    "end": "3285922"
  },
  {
    "text": " Huh. ",
    "start": "3285922",
    "end": "3295569"
  },
  {
    "text": "OK. I think-- maybe that\nis where I left it. OK. I think we come back to this. Let me see.",
    "start": "3295570",
    "end": "3301030"
  },
  {
    "text": "I'm going to lecture on. ",
    "start": "3301030",
    "end": "3307110"
  },
  {
    "start": "3302000",
    "end": "3302000"
  },
  {
    "text": "So here's another\nimplementation of the for loop",
    "start": "3307110",
    "end": "3313770"
  },
  {
    "text": "to add two vectors. And what this is going\nto use as a subroutine, I have this operator\ncalled v add,",
    "start": "3313770",
    "end": "3320340"
  },
  {
    "text": "which itself does just\na serial vector add. And now what I'm going to do\nis run through the loop here",
    "start": "3320340",
    "end": "3329310"
  },
  {
    "text": "and spawn off additions--",
    "start": "3329310",
    "end": "3334470"
  },
  {
    "text": "and the min there is just\nfor a boundary condition. I'm going to spin off\nthings in groups of G.",
    "start": "3334470",
    "end": "3343630"
  },
  {
    "text": "So I spin off, do a vector\nadd of size G, go on vector add of size G, vector add of\nsize G, jumping G each time.",
    "start": "3343630",
    "end": "3352810"
  },
  {
    "text": "So let's take a look at\nthe analysis of that. So now what I've got is, I've\ngot G iterations, each of which",
    "start": "3352810",
    "end": "3358930"
  },
  {
    "text": "costs me i. And this is the\nDAG structure I've got, because the\nfor loop here that",
    "start": "3358930",
    "end": "3367540"
  },
  {
    "text": "has the Cilk spawn\nin it is going along, and notice that the\nCilk spawn is in a loop.",
    "start": "3367540",
    "end": "3376330"
  },
  {
    "text": "And so it's basically going--\nit's spawning off G iterations. So it's spawning off\nthe vector add, which",
    "start": "3376330",
    "end": "3383170"
  },
  {
    "text": "is going to do G iterations-- because I'm giving basically G,\nbecause the boundary case let's",
    "start": "3383170",
    "end": "3388900"
  },
  {
    "text": "not worry about. And then spawn off G, spawn off\nG, spawn off G, and so forth.",
    "start": "3388900",
    "end": "3394220"
  },
  {
    "text": "So what's the work of this? Let's see. ",
    "start": "3394220",
    "end": "3401310"
  },
  {
    "text": "Well, let's make things\neasy to begin with. Let's assume G is\n1 and analyze it.",
    "start": "3401310",
    "end": "3408595"
  },
  {
    "text": "And this is a common\nthing, by the way, is you as assume\nthat grain size is 1 and analyze it, and then\nas a practical matter,",
    "start": "3408595",
    "end": "3415170"
  },
  {
    "text": "coarsen it to make\nit more efficient. So if G is 1, what's\nthe work of this?",
    "start": "3415170",
    "end": "3420492"
  },
  {
    "start": "3420492",
    "end": "3434760"
  },
  {
    "text": "Yeah. AUDIENCE: [INAUDIBLE] Yeah. It was order n, because those\nother two things are constant.",
    "start": "3434760",
    "end": "3442809"
  },
  {
    "text": "So exactly right. It's order n. In fact, this is a\ntechnique, by the way,",
    "start": "3442810",
    "end": "3451180"
  },
  {
    "text": "that's called strip\nmining, if you take away the parallel thing, where\nyou take a loop of length n.",
    "start": "3451180",
    "end": "3456970"
  },
  {
    "text": "And you really have\nnested loops here-- one that has n over G iterations\nand one that has G iterations--",
    "start": "3456970",
    "end": "3464200"
  },
  {
    "text": "and you're going through\nexactly the same stuff. And that's the same as\ngoing through n iterations.",
    "start": "3464200",
    "end": "3469512"
  },
  {
    "text": "But you're replacing\na singly-nested loop by a doubly-nested loop. And the only difference here\nis that in the inner loop,",
    "start": "3469512",
    "end": "3474820"
  },
  {
    "text": "I'm actually spawning off work. ",
    "start": "3474820",
    "end": "3479970"
  },
  {
    "text": "So here, the work is order\nn, because I basically-- if I'm spinning off\njust-- if G is 1,",
    "start": "3479970",
    "end": "3487080"
  },
  {
    "text": "then I'm spinning off\none piece of work, and I'm going to n minus\n1, spinning off one.",
    "start": "3487080",
    "end": "3492900"
  },
  {
    "text": "So I've got order\nn work up here, and order n work down below.",
    "start": "3492900",
    "end": "3498330"
  },
  {
    "text": "What's the span for this.  After all, I got in\nspans there now--",
    "start": "3498330",
    "end": "3504970"
  },
  {
    "text": "sorry, n spawns, not n spans. n spawns. ",
    "start": "3504970",
    "end": "3515640"
  },
  {
    "text": "What's the span going to be? Yeah. AUDIENCE: [INAUDIBLE] CHARLES LEISERSON: Sorry?",
    "start": "3515640",
    "end": "3521250"
  },
  {
    "text": "Sorry I, couldn't hear-- AUDIENCE: [INAUDIBLE] CHARLES LEISERSON: Theta S? No, it's bigger than that.",
    "start": "3521250",
    "end": "3528060"
  },
  {
    "text": "Yeah, you'd think,\ngee, I just have to do one thing to go down and up. But the span is the longest\npath in the whole DAG.",
    "start": "3528060",
    "end": "3534791"
  },
  {
    "start": "3534791",
    "end": "3546580"
  },
  {
    "text": "It's the longest path\nin the whole DAG.  Where's the longest path\nin the whole DAG start?",
    "start": "3546580",
    "end": "3554880"
  },
  {
    "text": "Upper left, right? And where does it end? Upper right. ",
    "start": "3554880",
    "end": "3562150"
  },
  {
    "text": "How long is that path? What's the longest one? It's going to go all the way\ndown the backbone of the top",
    "start": "3562150",
    "end": "3570640"
  },
  {
    "text": "there, and then flip\ndown and back up. So how many things are in the--",
    "start": "3570640",
    "end": "3576550"
  },
  {
    "text": "if G is 1, how many things\nare my spawning off there? n things, so the span is?",
    "start": "3576550",
    "end": "3582674"
  },
  {
    "start": "3582674",
    "end": "3588470"
  },
  {
    "text": "Order n?  So order n. It's long.",
    "start": "3588470",
    "end": "3594080"
  },
  {
    "text": "So what's the parallelism here? ",
    "start": "3594080",
    "end": "3601326"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] CHARLES LEISERSON: Yeah. It's order 1. And what do we call that?",
    "start": "3601326",
    "end": "3607644"
  },
  {
    "text": "AUDIENCE: Bad. CHARLES LEISERSON: Bad. Right. But there's a more\ntechnical name.",
    "start": "3607644",
    "end": "3615060"
  },
  {
    "text": "They call that puny. [LAUGHTER]  It's like, we went\nthrough all this work,",
    "start": "3615060",
    "end": "3621360"
  },
  {
    "text": "spawned off all that stuff,\nadded all this overhead, and it didn't go any faster. I can't tell you\nhow many times I've",
    "start": "3621360",
    "end": "3627540"
  },
  {
    "text": "seen people do this when they\nstart parallel programming.",
    "start": "3627540",
    "end": "3632640"
  },
  {
    "text": "Oh, but I spawned\noff all this stuff! Yeah, but you didn't\nreduce the span.",
    "start": "3632640",
    "end": "3638075"
  },
  {
    "start": "3638075",
    "end": "3645710"
  },
  {
    "text": "Let's now-- that was the\nanalyze it in terms of n--",
    "start": "3645710",
    "end": "3651560"
  },
  {
    "text": "sorry, in terms of G equals 1. Now let's increase\nthe grain size",
    "start": "3651560",
    "end": "3658220"
  },
  {
    "text": "and analyze it in terms\nof G. So once again, what's the work now?",
    "start": "3658220",
    "end": "3664700"
  },
  {
    "text": "Work is always a gimme. ",
    "start": "3664700",
    "end": "3671230"
  },
  {
    "text": "Yeah. AUDIENCE: Same as before, n. CHARLES LEISERSON: n. Same as before. n. The work doesn't change when you\nparallelize things differently",
    "start": "3671230",
    "end": "3677415"
  },
  {
    "text": "and stuff like that. I'm doing order n iterations. Oh, but what's the span?",
    "start": "3677415",
    "end": "3682885"
  },
  {
    "text": " This is a tricky one. Yeah.",
    "start": "3682885",
    "end": "3688329"
  },
  {
    "text": "AUDIENCE: n over G. CHARLES LEISERSON: Close. That's half right. ",
    "start": "3688330",
    "end": "3696560"
  },
  {
    "text": "That's half right. Good.",
    "start": "3696560",
    "end": "3701830"
  },
  {
    "text": "That's half right. Yeah. AUDIENCE: [INAUDIBLE] CHARLES LEISERSON:\nn over G plus G.",
    "start": "3701830",
    "end": "3708130"
  },
  {
    "text": "Don't forget that other term. So the path that we care\nabout goes along the top",
    "start": "3708130",
    "end": "3715000"
  },
  {
    "text": "here, and then goes down there. And this has span G.\nSo we've got n over G",
    "start": "3715000",
    "end": "3724630"
  },
  {
    "text": "here, because I'm doing\nchunks of G, plus G. So it's G plus n over\nG. And now, how can I",
    "start": "3724630",
    "end": "3733030"
  },
  {
    "text": "choose G to minimize the span? There's nothing to choose\nto minimize the work,",
    "start": "3733030",
    "end": "3738220"
  },
  {
    "text": "except there's\nsome work overhead that we're trying to do. But how can I choose G\nto minimize the span?",
    "start": "3738220",
    "end": "3745044"
  },
  {
    "text": " What's the best\nvalue for G here?",
    "start": "3745044",
    "end": "3751230"
  },
  {
    "text": "Yeah. AUDIENCE: [INAUDIBLE] CHARLES LEISERSON: You got it. Square root of n.",
    "start": "3751230",
    "end": "3756300"
  },
  {
    "text": "So one of these is increasing. If G is increasing, n\nover G is decreasing,",
    "start": "3756300",
    "end": "3763589"
  },
  {
    "text": "where do they cross? When they're equal. That's when G equals n over\nG, or G is square root of n.",
    "start": "3763590",
    "end": "3772410"
  },
  {
    "text": " So this actually has decent--",
    "start": "3772410",
    "end": "3777880"
  },
  {
    "text": "n big enough, square root\nof n, that's not bad. So it is OK to spawn\nthings off in chunks.",
    "start": "3777880",
    "end": "3784984"
  },
  {
    "text": "Just don't make the\nchunks real little. ",
    "start": "3784985",
    "end": "3790240"
  },
  {
    "text": "What's the parallelism? Once again, this\nis always a gimme. It's the ratio.",
    "start": "3790240",
    "end": "3795266"
  },
  {
    "text": "So square root of n.  Quiz on parallel loops.",
    "start": "3795267",
    "end": "3800460"
  },
  {
    "text": " I'm going to let you\nfolks do this offline.",
    "start": "3800460",
    "end": "3807760"
  },
  {
    "text": "Here's the answers. If you quickly\nwrite it down, you don't have to think about it.",
    "start": "3807760",
    "end": "3813346"
  },
  {
    "text": "[RAPID BREATHING]  OK.",
    "start": "3813346",
    "end": "3818650"
  },
  {
    "text": "[LAUGHTER]  OK.",
    "start": "3818650",
    "end": "3825609"
  },
  {
    "text": "So take a look at\nthe notes afterwards, and you can try to figure\nout why those things are so.",
    "start": "3825610",
    "end": "3831840"
  },
  {
    "text": "So there's some performance\ntips that make sense when you're programming with loops.",
    "start": "3831840",
    "end": "3837750"
  },
  {
    "text": "One is, minimize the span\nto maximize the parallelism, because the span's\nin the denominator.",
    "start": "3837750",
    "end": "3844002"
  },
  {
    "text": "And generally, you\nwant to generate 10 times more parallelism\nthan processors if you want near-perfect\nlinear speed-up.",
    "start": "3844002",
    "end": "3851082"
  },
  {
    "text": "So if you have a lot more\nparallelism than the number of processors-- we talked\nabout that last time-- you get good speed-up.",
    "start": "3851082",
    "end": "3857543"
  },
  {
    "text": "If you have plenty\nof parallelism, try to trade some of it off\nto reduce the work overhead.",
    "start": "3857543",
    "end": "3863580"
  },
  {
    "text": "So the idea was, for\nany of these things, you can fiddle with the\nnumbers, the grain size",
    "start": "3863580",
    "end": "3871050"
  },
  {
    "text": "in particular, to reduce-- it reduces the parallelism, but\nit also reduces the overhead.",
    "start": "3871050",
    "end": "3876720"
  },
  {
    "text": "And as long as you've got\nsufficient parallelism, your code is going to\nrun just fine parallel.",
    "start": "3876720",
    "end": "3882870"
  },
  {
    "text": "It's only when you're\nin the place where, ooh, don't have\nenough parallelism, and I don't want to\npay the overhead.",
    "start": "3882870",
    "end": "3888210"
  },
  {
    "text": "Those are the sticky ones. But most of the time, you're\ngoing to be in the case",
    "start": "3888210",
    "end": "3893760"
  },
  {
    "text": "where you've got way\nmore parallelism than you need, and the question is,\nhow can you reduce some of it in order to reduced\nthe work overhead?",
    "start": "3893760",
    "end": "3902580"
  },
  {
    "text": "Generally, you should use\ndivide and conquer recursion or parallel loops, rather\nthan spawning one small thing",
    "start": "3902580",
    "end": "3908940"
  },
  {
    "text": "after another. So it's better to\ndo the Cilk for, which already is doing divide\nand conquer parallelism,",
    "start": "3908940",
    "end": "3915029"
  },
  {
    "text": "than doing the spawn\noff one thing at a time type of strategy, unless\nyou can chunk them",
    "start": "3915030",
    "end": "3922950"
  },
  {
    "text": "so that you have\nrelatively few things that you're spawning off. This would be fine. The thing I say not-- this\nwould be fine if foo of i",
    "start": "3922950",
    "end": "3930180"
  },
  {
    "text": "was really expensive. Fine, then we'll have\nlots of parallelism,",
    "start": "3930180",
    "end": "3935559"
  },
  {
    "text": "because there's a\nlot of work there. But generally, it's better\nto do the divide and conquer.",
    "start": "3935560",
    "end": "3942460"
  },
  {
    "text": "Generally, you should\nmake sure that the work that you're doing per number of\nspawns is sufficiently large.",
    "start": "3942460",
    "end": "3948460"
  },
  {
    "text": "So the spawns say,\nwell, how much are you busting your work\ninto in terms of chunks?",
    "start": "3948460",
    "end": "3954580"
  },
  {
    "text": "Because the spawn has an\noverhead, and so the question is, well, how big is that?",
    "start": "3954580",
    "end": "3959770"
  },
  {
    "text": "And so you can coarsen\nby using function calls and in-lining near the leaves. Generally better to parallelize\nouter loops as opposed",
    "start": "3959770",
    "end": "3966970"
  },
  {
    "text": "to inner loops, if\nyou're forced to make a choice, because\nthe inner loops, they're the overhead you're\nincurring every single time.",
    "start": "3966970",
    "end": "3973900"
  },
  {
    "text": "The outer loop,\nyou can amortize it against the work\nthat's going on inside that doesn't have the overhead.",
    "start": "3973900",
    "end": "3980050"
  },
  {
    "text": "And watch out for\nscheduling overhead. So here's an example of two\ncodes that have parallelism 2,",
    "start": "3980050",
    "end": "3988859"
  },
  {
    "text": "and one of them is\nan efficient code, and the other one is lousy code.",
    "start": "3988860",
    "end": "3995240"
  },
  {
    "text": "The top one is\nefficient, because I have two iterations that I run\nin parallel, and each of them",
    "start": "3995240",
    "end": "4003920"
  },
  {
    "text": "does a lot of work. There's only one scheduling\noperation that happens.",
    "start": "4003920",
    "end": "4010099"
  },
  {
    "text": "The bottom one, I\nhave n iterations,",
    "start": "4010100",
    "end": "4015920"
  },
  {
    "text": "and each iteration\ndoes work, too, so I basically have n\niterations with overhead.",
    "start": "4015920",
    "end": "4023780"
  },
  {
    "text": "And so if you just look at\nthese, look at the overhead, you can see what\nthe difference is. OK.",
    "start": "4023780",
    "end": "4029458"
  },
  {
    "text": "I want to talk a little\nbit about actually, I have a whole\nbunch of things here that I'm not going\nto get to, but I didn't expect to get to them.",
    "start": "4029458",
    "end": "4034920"
  },
  {
    "text": "But I do want to get to some\nof matrix multiplication. People familiar\nwith this problem?",
    "start": "4034920",
    "end": "4042690"
  },
  {
    "text": "OK. We're going to\nassume for simplicity that n is a power of 2. So here's the typical way\nof parallelizing matrix",
    "start": "4042690",
    "end": "4049940"
  },
  {
    "text": "multiplication. I take the two outer loops\nand I parallelize them.",
    "start": "4049940",
    "end": "4056180"
  },
  {
    "text": "I can't easily parallelize the\ninner loop, because if I do, I get a race\ncondition, because I'll",
    "start": "4056180",
    "end": "4062089"
  },
  {
    "text": "have two iterations that are\nboth trying to update C of i, j.",
    "start": "4062090",
    "end": "4067450"
  },
  {
    "text": "So I can't just\nparallelize k, so I'm just going to parallelize i and j.",
    "start": "4067450",
    "end": "4073510"
  },
  {
    "text": "The work for this is what?  Triply-nested loop.",
    "start": "4073510",
    "end": "4078539"
  },
  {
    "text": " n cubed. Everybody knows--\nmatrix multiplication,",
    "start": "4078539",
    "end": "4085220"
  },
  {
    "text": "unless you do something\nclever like Strassen, or one of the more recent--",
    "start": "4085220",
    "end": "4091190"
  },
  {
    "text": "Virgie Williams\nalgorithm-- you know",
    "start": "4091190",
    "end": "4096290"
  },
  {
    "text": "that the running time for the\nstandard algorithm is n cubed. The span for this is what?",
    "start": "4096290",
    "end": "4103290"
  },
  {
    "text": "Yeah. That inner loop is linear size,\nand then you've got two log n's--",
    "start": "4103290",
    "end": "4108380"
  },
  {
    "text": "log n plus log n plus n-- so it's order n. So the parallelism\nis around n squared.",
    "start": "4108380",
    "end": "4117020"
  },
  {
    "text": "If I ignore\nconstants, and I said I was working on matrices of,\nsay, 1,000 by 1,000 or so,",
    "start": "4117020",
    "end": "4122960"
  },
  {
    "text": "the parallelism is\nsomething like n squared, which is about--",
    "start": "4122960",
    "end": "4129259"
  },
  {
    "text": "1,000 squared is a million. Wow.",
    "start": "4129260",
    "end": "4134350"
  },
  {
    "text": "That's a lot of parallelism. How many processors\nare you running on?",
    "start": "4134350",
    "end": "4139870"
  },
  {
    "text": "Is it bigger than 10 times\nthe number of processors? By a little bit.",
    "start": "4139870",
    "end": "4146528"
  },
  {
    "text": "Now, there's another\nstrategy that one can use, which is\ndivide and conquer, and this is the strategy\nthat's used in Strassen.",
    "start": "4146529",
    "end": "4152889"
  },
  {
    "text": "We're not going to do\nthe Strassen's algorithm. We're just going to use the\neight multiply version of this. For people who know\nStrassen, more power to you.",
    "start": "4152890",
    "end": "4158660"
  },
  {
    "text": "It's a great algorithm. Really surprising,\nreally amazing. And it's actually worthwhile\ndoing in practice, by the way,",
    "start": "4158660",
    "end": "4166109"
  },
  {
    "text": "for sufficiently large matrices. So the idea here is, I can\nmultiply two n by n matrices",
    "start": "4166109",
    "end": "4173739"
  },
  {
    "text": "by doing eight\nmultiplications of n over 2 by n over 2 matrices, and\nthen add two n by n matrices.",
    "start": "4173740",
    "end": "4181795"
  },
  {
    "start": "4181795",
    "end": "4187270"
  },
  {
    "text": "So when we start\ntalking matrices-- this is a little bit of a\ndiversion from the algorithms, but it's so important, because\nrepresentation of matrices",
    "start": "4187270",
    "end": "4195520"
  },
  {
    "text": "is one of the things that\ngets people into trouble when they're doing any kind of\ntwo-dimensional coding stuff.",
    "start": "4195520",
    "end": "4204160"
  },
  {
    "text": "And so I want to talk a\nlittle bit about index, and we're going to talk\nabout this more later when we do cache behavior and such.",
    "start": "4204160",
    "end": "4212360"
  },
  {
    "text": "So how do you\nrepresent sub-matrices? The standard way of\nrepresenting those either",
    "start": "4212360",
    "end": "4217390"
  },
  {
    "text": "in row-major or\ncolumn-major order, depending upon the\nlanguage you use. Fortran uses\ncolumn-major ordering,",
    "start": "4217390",
    "end": "4224260"
  },
  {
    "text": "so there are a\nlot of subroutines that are column-major. But for the most part, C, which\nwe're using, is row-major.",
    "start": "4224260",
    "end": "4233950"
  },
  {
    "text": "And so the question\nis, if I take a sub-matrix of a\nlarge matrix, how do I calculate where the i,\nj element of that matrix is?",
    "start": "4233950",
    "end": "4244540"
  },
  {
    "text": "Here I have the\ni, j element here. I've got a matrix M,\nwhich is embedded.",
    "start": "4244540",
    "end": "4251530"
  },
  {
    "text": "And by row major,\nremember, that means I just take row after row, and\nI just put them in linear order through the memory.",
    "start": "4251530",
    "end": "4258980"
  },
  {
    "text": "So every two-dimensional\nmatrix, you can index as a one-dimensional matrix,\nbecause all you have to do is--",
    "start": "4258980",
    "end": "4264679"
  },
  {
    "text": "which is exactly what\nthe code is doing-- you need to know the\nbeginning of the matrix. But if you have a sub-matrix,\nit's a little more complicated.",
    "start": "4264680",
    "end": "4273239"
  },
  {
    "text": "So here's the idea. Suppose that you have\na sub-matrix m-- so starting in location m\nof this outer matrix.",
    "start": "4273240",
    "end": "4282389"
  },
  {
    "text": "Here we have the outer matrix,\nwhich has length n sub M. This is the big matrix--",
    "start": "4282390",
    "end": "4289070"
  },
  {
    "text": "actually I should\nhave called that m.  I should not have called\nthis n instead of m.",
    "start": "4289070",
    "end": "4295755"
  },
  {
    "text": "I should have called it\nm sub something else, because this is my m that\nI'm interested in, which is this location here.",
    "start": "4295755",
    "end": "4301890"
  },
  {
    "text": " And what I'm interested\nin doing is finding out--",
    "start": "4301890",
    "end": "4310560"
  },
  {
    "text": "I named these\nvariables stupidly-- is finding out, where\nis the i, j-th element",
    "start": "4310560",
    "end": "4315750"
  },
  {
    "text": "of this sub-matrix M? If I tell you the beginning,\nwhat do I add to get to i, j?",
    "start": "4315750",
    "end": "4321450"
  },
  {
    "text": "And the answer is that I've\ngot to add the number of rows that comes down here. Well, that's i times the\nwidth of the full matrix",
    "start": "4321450",
    "end": "4329039"
  },
  {
    "text": "that you're taking it\nout of, not the width of your local sub-matrix.",
    "start": "4329040",
    "end": "4335670"
  },
  {
    "text": "And then you have\nto add in the-- and then you add in\nj from that point.",
    "start": "4335670",
    "end": "4343595"
  },
  {
    "text": "There we go. OK. So I have to add in the\nlength of the long matrix",
    "start": "4343595",
    "end": "4350099"
  },
  {
    "text": "plus j for each row i. Does that make sense?",
    "start": "4350100",
    "end": "4355938"
  },
  {
    "text": "Because it's embedded in there. You have to skip over full\nrows of the outer matrix. So you can't generally\njust pass a sub-matrix",
    "start": "4355938",
    "end": "4363410"
  },
  {
    "text": "and expect to do indexing\non that when it's embedded in a large matrix. If you make a copy,\nsure, then you",
    "start": "4363410",
    "end": "4369530"
  },
  {
    "text": "can index it according to\nwhatever the new copy is. But if you want to operate\nin place on matrices, which",
    "start": "4369530",
    "end": "4374719"
  },
  {
    "text": "is often the case, then you have\nto understand that every row, you have to jump a row\nof the outer matrix, not",
    "start": "4374720",
    "end": "4380930"
  },
  {
    "text": "a row of whatever your\nsub-matrix is, when you're doing the divide and conquer.",
    "start": "4380930",
    "end": "4386239"
  },
  {
    "text": "So when we look at doing\ndivide and conquer-- I have a matrix here\nwhich I want to now",
    "start": "4386240",
    "end": "4393200"
  },
  {
    "text": "divide into four sub-matrices\nof size M over 2. And the question is,\nwhere's the starting corners",
    "start": "4393200",
    "end": "4400820"
  },
  {
    "text": "of each of those matrices? So M 0, 0, that starts at the\nsame place as M. That upper",
    "start": "4400820",
    "end": "4409790"
  },
  {
    "text": "left one. Where does M 0, 1 start? ",
    "start": "4409790",
    "end": "4420230"
  },
  {
    "text": "Where's M 0, 1 start? ",
    "start": "4420230",
    "end": "4425685"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] CHARLES LEISERSON: Yeah. M plus n over 2. Where does M 1, 0 start?",
    "start": "4425685",
    "end": "4433101"
  },
  {
    "text": "This is the tricky one. ",
    "start": "4433101",
    "end": "4441559"
  },
  {
    "text": "Here's the answer. M plus the long\nmatrix times n over 2,",
    "start": "4441560",
    "end": "4447650"
  },
  {
    "text": "because I'm going\ndown m over 2 rows, and I've got to go\ndown the number of rows of the outer matrix.",
    "start": "4447650",
    "end": "4454489"
  },
  {
    "text": "And then M 1, 1 is the\nsame as the 2 there. So here's the-- in general, for\nrow and column being 0 and 1,",
    "start": "4454490",
    "end": "4464120"
  },
  {
    "text": "in some sense, this\nis a general formula that matches up with that, where\nI plug in 0 1 for each one.",
    "start": "4464120",
    "end": "4474710"
  },
  {
    "text": "And now here's my code. And I just want to point\nout a couple of things, and then we'll quit\nand I'll let you take a look at the rest\nof this on your own.",
    "start": "4474710",
    "end": "4483980"
  },
  {
    "text": " Here's my divide and\nconquer matrix multiply.",
    "start": "4483980",
    "end": "4489410"
  },
  {
    "text": "I use restrict. Everybody familiar\nwith restrict? It says, don't tell the\ncompiler these things",
    "start": "4489410",
    "end": "4495320"
  },
  {
    "text": "you can assume are not aliased,\nso that when you change one, you're not changing another. That lets the compiler\nproduce better code.",
    "start": "4495320",
    "end": "4503090"
  },
  {
    "text": "And then the row sizes are\ngoing to be n sub c, n sub a, and n sub b.",
    "start": "4503090",
    "end": "4509280"
  },
  {
    "text": "And then the matrices that\nwe're taking them out of, those are the sizes\nof the sub-matrix.",
    "start": "4509280",
    "end": "4514679"
  },
  {
    "text": "The outer matrix is going to\nhave size n by n, for which-- when I have my\nrecursion, I want to talk",
    "start": "4514680",
    "end": "4521219"
  },
  {
    "text": "about sub-matrices that\nare embedded in this larger outside matrix. Here is a great\npiece of bit tricks.",
    "start": "4521220",
    "end": "4530190"
  },
  {
    "text": "This says, n is a power of 2. ",
    "start": "4530190",
    "end": "4535630"
  },
  {
    "text": "So go back and remind yourself\nof what the bit tricks are, but that's a clever bit trick\nto say that n is a power of 2.",
    "start": "4535630",
    "end": "4542440"
  },
  {
    "text": "Very quick. And so take a look at that.",
    "start": "4542440",
    "end": "4547960"
  },
  {
    "text": "And then we're going to coarsen\nleaves with a base case. The base case just goes\nthrough and solves the problem",
    "start": "4547960",
    "end": "4553570"
  },
  {
    "text": "for small n, just with a\ntypical triply-nested loop.",
    "start": "4553570",
    "end": "4559239"
  },
  {
    "text": "And what we're going to do\nis allocate a temporary n by n array, and then we're going\nto define the temporary array",
    "start": "4559240",
    "end": "4567750"
  },
  {
    "text": "to having underlying row size n. And then here is this fabulous\nmacro that makes all the index",
    "start": "4567750",
    "end": "4577100"
  },
  {
    "text": "calculations easy. It uses the sharp\nsharp operator,",
    "start": "4577100",
    "end": "4582860"
  },
  {
    "text": "which pastes together tokens,\nso that I can paste n sub c. When I pass r and c, it passes--",
    "start": "4582860",
    "end": "4590219"
  },
  {
    "text": "whatever value I pass for\nthat, it pastes it together. So it allows me to do\nthe indexing of the--",
    "start": "4590220",
    "end": "4597050"
  },
  {
    "text": "and have the right thing, so\nthat for each of these address calculations, I'm able to\ndo them by just saying x of,",
    "start": "4597050",
    "end": "4606590"
  },
  {
    "text": "and just give the\nformulas these. Otherwise, you'd be driven\nnuts by the formula. So take a look at that macro,\nbecause that may help you",
    "start": "4606590",
    "end": "4614240"
  },
  {
    "text": "in some of your other things. And then I sync,\nand then add it up.",
    "start": "4614240",
    "end": "4620360"
  },
  {
    "text": "And the addition\nis just going to be a doubly-nested parallel\naddition, and then I free it.",
    "start": "4620360",
    "end": "4627650"
  },
  {
    "text": "So what I would like you to\ndo is go home and take a look at the analysis of this.",
    "start": "4627650",
    "end": "4633270"
  },
  {
    "text": "And it turns out this has way\nmore panels than you need, and if you reduce the\namount of parallelism,",
    "start": "4633270",
    "end": "4640220"
  },
  {
    "text": "you get much better performance. And there's several\nother algorithms I put in there as well.",
    "start": "4640220",
    "end": "4645650"
  },
  {
    "text": "so I'll try to get\nthis posted tonight. Thanks very much.",
    "start": "4645650",
    "end": "4651429"
  },
  {
    "start": "4651430",
    "end": "4653904"
  }
]