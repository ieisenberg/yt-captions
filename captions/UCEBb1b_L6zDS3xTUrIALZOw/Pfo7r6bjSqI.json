[
  {
    "text": "ANNOUNCER: Open content is\nprovided under a creative commons license. Your support will help MIT\nOpenCourseWare continue to",
    "start": "0",
    "end": "6840"
  },
  {
    "text": "offer high-quality educational\nresources for free. To make a donation, or view\nadditional materials from",
    "start": "6840",
    "end": "13389"
  },
  {
    "text": "hundreds of MIT courses, visit\nMIT OpenCourseWare at ocw.mit.edu . PROFESSOR JOHN GUTTAG:\nGood morning.",
    "start": "13390",
    "end": "24030"
  },
  {
    "text": "We should start with the\nconfession, for those of you looking at this on\nOpenCourseWare, that I'm",
    "start": "24030",
    "end": "29990"
  },
  {
    "text": "currently lecturing to\nan empty auditorium. The fifth lecture for 600 this\nterm, we ran into some",
    "start": "29990",
    "end": "38750"
  },
  {
    "text": "technical difficulties, which\nleft us with a recording we",
    "start": "38750",
    "end": "43810"
  },
  {
    "text": "weren't very satisfied with. So, I'm-- this is a redo, and if\nyou will hear no questions",
    "start": "43810",
    "end": "51220"
  },
  {
    "text": "from the audience and that's\nbecause there is no audience. Nevertheless I will do\nmy best to pretend.",
    "start": "51220",
    "end": "57860"
  },
  {
    "text": "I've been told this is a little\nbit like giving a speech before the US Congress\nwhen C-SPAN is",
    "start": "57860",
    "end": "64570"
  },
  {
    "text": "the only thing watching. OK.",
    "start": "64570",
    "end": "69840"
  },
  {
    "text": "Computers are supposed to be\ngood for crunching numbers. And we've looked a little bit\nat numbers this term, but I",
    "start": "69840",
    "end": "78600"
  },
  {
    "text": "now want to get into looking\nat them in more depth than we've been doing. Python has two different\nkinds of numbers.",
    "start": "78600",
    "end": "92090"
  },
  {
    "text": "So far, the only kind we've\nreally paid any attention to is type int.",
    "start": "92090",
    "end": "100450"
  },
  {
    "text": "And those were intended to\nmirror the integers, as we all learned about starting\nin elementary school.",
    "start": "100450",
    "end": "108930"
  },
  {
    "text": "And they're good for things\nthat you can count. Any place you'd use\nwhole numbers.",
    "start": "108930",
    "end": "115620"
  },
  {
    "text": "Interestingly, Python, unlike\nsome languages, has what are called arbitrary precision\nintegers.",
    "start": "115620",
    "end": "129520"
  },
  {
    "text": "By that, we mean, you can\nmake numbers as big as you want them to. Let's look at an example.",
    "start": "129520",
    "end": "137620"
  },
  {
    "text": "We'll just take a for a variable\nname, and we'll set a to be two raised to the\none-thousandth power.",
    "start": "137620",
    "end": "147049"
  },
  {
    "text": "That, by the way, is a\nreally big number. And now what happens if\nwe try and display it?",
    "start": "147050",
    "end": "154819"
  },
  {
    "text": "We get a lot of digits. You can see why I'm doing this\non the screen instead of writing it on the blackboard.",
    "start": "154820",
    "end": "163700"
  },
  {
    "text": "I'm not going to ask you whether\nyou believe this is the right answer, trust\nme, trust Python.",
    "start": "163700",
    "end": "168900"
  },
  {
    "text": "I would like you to notice, at\nthe very end of this is the letter L.",
    "start": "168900",
    "end": "175840"
  },
  {
    "text": "What does that mean? It means long.",
    "start": "175840",
    "end": "185480"
  },
  {
    "text": "That's telling us that it's\nrepresenting these-- this particular integer in\nwhat it calls it's",
    "start": "185480",
    "end": "193900"
  },
  {
    "text": "internal long format. You needn't worry about that.",
    "start": "193900",
    "end": "200439"
  },
  {
    "text": "The only thing to say about it\nis, when you're dealing with long integers, it's a lot less\nefficient than when you're",
    "start": "200440",
    "end": "206189"
  },
  {
    "text": "dealing with smaller numbers. And that's all it's kind of\nwarning you, by printing this",
    "start": "206190",
    "end": "211370"
  },
  {
    "text": "L. About two billion is\nthe magic number.",
    "start": "211370",
    "end": "218260"
  },
  {
    "text": "When you get over two billion,\nit's now going to deal with long integers, so if, for\nexample, you're trying to deal",
    "start": "218260",
    "end": "224480"
  },
  {
    "text": "with the US budget deficit, you\nwill need integers of type L.",
    "start": "224480",
    "end": "230390"
  },
  {
    "text": "OK. Let's look at another\ninteresting example. Suppose I said, b equal to two\nraised to the nine hundred",
    "start": "230390",
    "end": "240340"
  },
  {
    "text": "ninety-ninth power. I can display b, and it's a\ndifferent number, considerably",
    "start": "240340",
    "end": "250599"
  },
  {
    "text": "smaller, but again,\nending in an L. And now, what you think I'll get\nif we try a divided by b?",
    "start": "250600",
    "end": "261590"
  },
  {
    "text": "And remember, we're now doing\ninteger division. Well, let's see.",
    "start": "261590",
    "end": "267800"
  },
  {
    "text": "We get 2L. Well, you'd expect it to be\ntwo, because if you think",
    "start": "267800",
    "end": "274080"
  },
  {
    "text": "about the meaning of\nexponentiation, indeed, the difference between raising\nsomething to the nine hundred",
    "start": "274080",
    "end": "280939"
  },
  {
    "text": "ninety-ninth power and to the\none-thousandth power should be, in this case, two, since\nthat's what we're",
    "start": "280940",
    "end": "286990"
  },
  {
    "text": "raising to a power. Why does it say 2L, right?",
    "start": "286990",
    "end": "292370"
  },
  {
    "text": "Two is considerably less than\ntwo billion, and that's because once you get L, you\nstay L. Not particularly",
    "start": "292370",
    "end": "300870"
  },
  {
    "text": "important, but kind\nof worth knowing. Well, why am I bothering you\nwith this whole issue of how",
    "start": "300870",
    "end": "308479"
  },
  {
    "text": "numbers are represented\nin the computer? In an ideal world, you would\nignore this completely, and",
    "start": "308480",
    "end": "315940"
  },
  {
    "text": "just say, numbers do what\nnumbers are supposed to do. But as we're about to see,\nsometimes in Python, and in",
    "start": "315940",
    "end": "323880"
  },
  {
    "text": "fact in every programming\nlanguage, things behave contrary to what your\nintuition suggests.",
    "start": "323880",
    "end": "332420"
  },
  {
    "text": "And I want to spend a little\ntime helping you understand why this happens.",
    "start": "332420",
    "end": "338530"
  },
  {
    "text": "So let's look at a different\nkind of number. And now we're going to look at\nwhat Python, and almost every",
    "start": "338530",
    "end": "348620"
  },
  {
    "text": "other programming language,\ncalls type float. Which is short for\nfloating point.",
    "start": "348620",
    "end": "363169"
  },
  {
    "text": "And that's the way that\nprogramming languages typically represent what we\nthink of as real numbers.",
    "start": "363170",
    "end": "372390"
  },
  {
    "text": "So, let's look at an example. I'm going to set the variable\nx to be 0.1, 1/10, and now",
    "start": "372390",
    "end": "384159"
  },
  {
    "text": "we're going to display x. Huh?",
    "start": "384160",
    "end": "389750"
  },
  {
    "text": "Take a look at this. Why isn't it .1? Why is it 0.1, a whole bunch\nof zeros, and then this",
    "start": "389750",
    "end": "398770"
  },
  {
    "text": "mysterious one appearing\nat the end? Is it because Python just wants\nto be obnoxious and is",
    "start": "398770",
    "end": "405900"
  },
  {
    "text": "making life hard? No, it has to do with the way\nthe numbers are represented",
    "start": "405900",
    "end": "412660"
  },
  {
    "text": "inside the computer. Python, like almost every modern\nprogramming language,",
    "start": "412660",
    "end": "419800"
  },
  {
    "text": "represents numbers using the\ni triple e floating point",
    "start": "419800",
    "end": "425560"
  },
  {
    "text": "standard, and it's\ni triple e 754.",
    "start": "425560",
    "end": "440820"
  },
  {
    "text": "Never again will you have to\nremember that it's 754. I promise not to ask you that\nquestion on a quiz.",
    "start": "440820",
    "end": "447480"
  },
  {
    "text": "But that's what they do. This is a variant of scientific\nnotation.",
    "start": "447480",
    "end": "461860"
  },
  {
    "text": "Something you probably learned\nabout in high school, as a way to represent very\nlarge numbers.",
    "start": "461860",
    "end": "469220"
  },
  {
    "text": "Typically, the way we do that,\nis we represent the numbers in",
    "start": "469220",
    "end": "474320"
  },
  {
    "text": "the form of a mantissa\nand an exponent.",
    "start": "474320",
    "end": "487730"
  },
  {
    "text": "So we represent a floating point\nnumber as a pair, of a mantissa and an exponent.",
    "start": "487730",
    "end": "500259"
  },
  {
    "text": "And because computers work in\nthe binary system, it's unlike",
    "start": "500260",
    "end": "506110"
  },
  {
    "text": "what you probably learned in\nhigh school, where we raise ten to some power.",
    "start": "506110",
    "end": "511530"
  },
  {
    "text": "Here we'll always be raising\ntwo to some power. Maybe a little later in the\nterm, if we talk about",
    "start": "511530",
    "end": "517900"
  },
  {
    "text": "computer architecture, we'll get\naround to explaining why computers working binary, but\nfor now, just assume that they",
    "start": "517900",
    "end": "525720"
  },
  {
    "text": "do and in fact they always have. All right.",
    "start": "525720",
    "end": "530810"
  },
  {
    "text": "Purists manage to refer to the\nmantissa as a significant, but",
    "start": "530810",
    "end": "541460"
  },
  {
    "text": "I won't do that, because I'm\nan old guy and it was a mantissa when I first learned\nabout it and I just can't",
    "start": "541460",
    "end": "548140"
  },
  {
    "text": "break myself of the habit. All right. So how does this work?",
    "start": "548140",
    "end": "558520"
  },
  {
    "text": "Well, when we recognize so--\nwhen we represent something, the mantissa is between\none and two.",
    "start": "558520",
    "end": "575360"
  },
  {
    "text": "Whoops. Strictly less than two, greater\nthan or equal to one.",
    "start": "575360",
    "end": "582090"
  },
  {
    "text": "The exponent, is in the\nrange, -1022 to +1023.",
    "start": "582090",
    "end": "607420"
  },
  {
    "text": "So this lets us represent\nnumbers up to about 10 to the",
    "start": "607420",
    "end": "613329"
  },
  {
    "text": "308th, plus or minus 10 to\nthe 308th, plus or minus.",
    "start": "613330",
    "end": "619800"
  },
  {
    "text": "So, quite a large range\nof numbers. Where did these magic\nthings come from?",
    "start": "619800",
    "end": "626240"
  },
  {
    "text": "You know, what-- kind of a\nstrange numbers to see here. Well, it has to do with the fact\nthat computers typically",
    "start": "626240",
    "end": "637040"
  },
  {
    "text": "have words in them, and the\nwords today in a modern computer are 64 bits.",
    "start": "637040",
    "end": "646370"
  },
  {
    "text": "For many years they were 32\nbits, before that they were 16 bits, before that they were 8\nbits, they've continually",
    "start": "646370",
    "end": "654520"
  },
  {
    "text": "grown, but we've been at 64 for\na while and I think we'll be stuck at 64 for a while.",
    "start": "654520",
    "end": "662300"
  },
  {
    "text": "So as we do this, what we do\nis, we get one bit for the",
    "start": "662300",
    "end": "667880"
  },
  {
    "text": "sign-- is it a positive\nor negative number?--",
    "start": "667880",
    "end": "673220"
  },
  {
    "text": "11 for the exponent, and that\nleaves 52 for the mantissa.",
    "start": "673220",
    "end": "688220"
  },
  {
    "text": "And that basically tells us\nhow we're storing numbers. Hi, are you here for\nthe 600 lecture?",
    "start": "688220",
    "end": "694890"
  },
  {
    "text": "There is none today, because we\nhave a quiz this evening.",
    "start": "694890",
    "end": "700840"
  },
  {
    "text": "It's now the time that the\nlecture would normally have started, and a couple of\nstudents who forgot that we",
    "start": "700840",
    "end": "706450"
  },
  {
    "text": "have a quiz this evening,\ninstead of a lecture, just strolled in, and now\nstrolled out.",
    "start": "706450",
    "end": "713780"
  },
  {
    "text": "OK. You may never need to know these\nconstants again, but",
    "start": "713780",
    "end": "720260"
  },
  {
    "text": "it's worth knowing that they\nexist, and that basically, this gives us about the\nequivalent of seventeen",
    "start": "720260",
    "end": "728360"
  },
  {
    "text": "decimal digits of precision. So we can represent numbers\nup to seventeen",
    "start": "728360",
    "end": "736810"
  },
  {
    "text": "decimal digits long. This is an important concept to\nunderstand, that unlike the",
    "start": "736810",
    "end": "746410"
  },
  {
    "text": "long ints where they can grow\narbitrarily big, when we're dealing with floating points, if\nwe need something more than",
    "start": "746410",
    "end": "753930"
  },
  {
    "text": "seventeen decimal digits, in\nPython at least, we won't be able to get it.",
    "start": "753930",
    "end": "759570"
  },
  {
    "text": "And that's true in\nmany languages. Now the good news is, this is\nan enormous number, and it's",
    "start": "759570",
    "end": "765350"
  },
  {
    "text": "highly unlikely that ever in\nyour life, you will need more precision than that.",
    "start": "765350",
    "end": "771850"
  },
  {
    "text": "All right. Now, let's go back to the 0.1\nmystery that we started at,",
    "start": "771850",
    "end": "780610"
  },
  {
    "text": "and ask ourselves, why we have\na problem representing that",
    "start": "780610",
    "end": "786990"
  },
  {
    "text": "number in the computer, hence,\nwe get something funny out from we try and print it back.",
    "start": "786990",
    "end": "794700"
  },
  {
    "text": "Well, let's look at an easier\nproblem first. Let's look at representing the fraction 1/8.",
    "start": "794700",
    "end": "806420"
  },
  {
    "text": "That has a nice representation. That's equal in decimal to\n0.125, and we can represent it",
    "start": "806420",
    "end": "817060"
  },
  {
    "text": "conveniently in both\nbase 10 and base 2.",
    "start": "817060",
    "end": "822980"
  },
  {
    "text": "So if you want to represent\nit in base 10, what is it?",
    "start": "822980",
    "end": "833199"
  },
  {
    "text": "What is that equal to? Well, we'll take a mantissa,\n1.25, and now we need to",
    "start": "833200",
    "end": "842010"
  },
  {
    "text": "multiply it by something that\nwe can represent nicely, and",
    "start": "842010",
    "end": "849850"
  },
  {
    "text": "in fact that will be\ntimes 10 to the -1. So the exponent would simply\nbe -1, and we have a nice",
    "start": "849850",
    "end": "857880"
  },
  {
    "text": "representation. Suppose we want to represent\nit in base 2?",
    "start": "857880",
    "end": "864760"
  },
  {
    "text": "What would it be? 1.0 times-- anybody?--",
    "start": "864760",
    "end": "877210"
  },
  {
    "text": "Well, 2 to the -3.",
    "start": "877210",
    "end": "884040"
  },
  {
    "text": "So, in binary notation, that\nwould be written as 0.001.",
    "start": "884040",
    "end": "893380"
  },
  {
    "text": "So you see, 1/8 is kind\nof a nice number. We can represent it nicely in\neither base 10 or base 2.",
    "start": "893380",
    "end": "901850"
  },
  {
    "text": "But how about that pesky\nfraction 1/10?",
    "start": "901850",
    "end": "914970"
  },
  {
    "text": "Well, in base 10, we know\nhow to represent, it's",
    "start": "914970",
    "end": "920009"
  },
  {
    "text": "1 times 10 to the--",
    "start": "920010",
    "end": "927390"
  },
  {
    "text": "10 to the what?-- 10 to the 1? No.",
    "start": "927390",
    "end": "932930"
  },
  {
    "text": "But in base 2, it's a problem.",
    "start": "932930",
    "end": "941110"
  },
  {
    "text": "There is no finite binary number\nthat exactly represents",
    "start": "941110",
    "end": "947320"
  },
  {
    "text": "this decimal fraction. In fact, if we try and find\nthe binary number, what we",
    "start": "947320",
    "end": "955360"
  },
  {
    "text": "find is, we get an infinitely\nrepeating series. Zero zero zero one one zero\nzero one one zero",
    "start": "955360",
    "end": "966570"
  },
  {
    "text": "zero, and et cetera. Stop at any finite number of\nbits, and you get only an",
    "start": "966570",
    "end": "974500"
  },
  {
    "text": "approximation to the decimal\nfraction 1/10.",
    "start": "974500",
    "end": "980770"
  },
  {
    "text": "So on most computers, if you\nwere to print the decimal",
    "start": "980770",
    "end": "987250"
  },
  {
    "text": "value of the binary\napproximation-- and that's what we're printing here,\non this screen, right?",
    "start": "987250",
    "end": "993660"
  },
  {
    "text": "We think in decimal, so Python\nquite nicely for us is printing things in decimal--\nit would have to display--",
    "start": "993660",
    "end": "1003160"
  },
  {
    "text": "well I'm not going to write it,\nit's a very long number, lots of digits-- however, in\nPython, whenever we display",
    "start": "1003160",
    "end": "1015190"
  },
  {
    "text": "something, it uses the built-in\nfunction repr, short",
    "start": "1015190",
    "end": "1021130"
  },
  {
    "text": "for representation, that it\nconverts the internal representation in this case of\na number, to a string, and",
    "start": "1021130",
    "end": "1030689"
  },
  {
    "text": "then displays that string in\nthis case on the screen. For floats, it rounds it\nto seventeen digits.",
    "start": "1030690",
    "end": "1044040"
  },
  {
    "text": "There's that magic number\nseventeen again.",
    "start": "1044040",
    "end": "1051060"
  },
  {
    "text": "Hence, when it rounds it to\nseventeen digits, we get",
    "start": "1051060",
    "end": "1056470"
  },
  {
    "text": "exactly what you see in the\nbottom of the screen up there.",
    "start": "1056470",
    "end": "1064159"
  },
  {
    "text": "Answer to the mystery, why\ndoes it display this?",
    "start": "1064160",
    "end": "1069240"
  },
  {
    "text": "Now why should we care? Well, it's not so much that\nwe care about what gets",
    "start": "1069240",
    "end": "1074900"
  },
  {
    "text": "displayed, but we have to think\nabout the implications, at least sometimes we have to\nthink about the implications,",
    "start": "1074900",
    "end": "1082250"
  },
  {
    "text": "of what this inexact\nrepresentation of numbers means when we start doing\nmore-or-less complex",
    "start": "1082250",
    "end": "1089970"
  },
  {
    "text": "computations on those numbers. So let's look at a little\nexample here.",
    "start": "1089970",
    "end": "1097140"
  },
  {
    "text": "I'll start by starting the\nvariable s to 0.0 . Notice I'm being careful\nto make it a float.",
    "start": "1097140",
    "end": "1104320"
  },
  {
    "text": "And then for i in range, let's\nsee, let's take 10, we'll",
    "start": "1104320",
    "end": "1113960"
  },
  {
    "text": "increase s by 0.1 .",
    "start": "1113960",
    "end": "1124710"
  },
  {
    "text": "All right, we've done that,\nand now, what happens when I print s?",
    "start": "1124710",
    "end": "1132330"
  },
  {
    "text": "Well, again you don't get\nwhat your intuition says you should get.",
    "start": "1132330",
    "end": "1138230"
  },
  {
    "text": "Notice the last two digits,\nwhich are eight and nine.",
    "start": "1138230",
    "end": "1145470"
  },
  {
    "text": "Well, what's happening here? What's happened, is the\nerror has accumulated.",
    "start": "1145470",
    "end": "1153670"
  },
  {
    "text": "I had a small error when I\nstarted, but every time I added it, the error got bigger\nand it accumulates.",
    "start": "1153670",
    "end": "1162550"
  },
  {
    "text": "Sometimes you can get in trouble\nin a computation because of that.",
    "start": "1162550",
    "end": "1170410"
  },
  {
    "text": "Now what happens, by the\nway, if I print s? That's kind of an interesting\nquestion.",
    "start": "1170410",
    "end": "1176129"
  },
  {
    "text": "Notice that it prints one. And why is that?",
    "start": "1176130",
    "end": "1182550"
  },
  {
    "text": "It's because the print command\nhas done a rounding here. It automatically rounds.",
    "start": "1182550",
    "end": "1190360"
  },
  {
    "text": "And that's kind of good, but\nit's also kind of bad, because that means when you're debugging\nyour program, you",
    "start": "1190360",
    "end": "1196980"
  },
  {
    "text": "can get very confused. You say, it says it's one, why\nam I getting a different",
    "start": "1196980",
    "end": "1202470"
  },
  {
    "text": "answer when I do the\ncomputation? And that's because it's\nnot really one inside.",
    "start": "1202470",
    "end": "1208100"
  },
  {
    "text": "So you have to be careful. Now mostly, these round-off\nerrors balance each other out.",
    "start": "1208100",
    "end": "1216040"
  },
  {
    "text": "Some floats are slightly higher\nthan they're supposed to be, some are slightly\nlower, and in most",
    "start": "1216040",
    "end": "1221480"
  },
  {
    "text": "computations it all comes out\nin the wash and you get the right answer. Truth be told, most of the time,\nyou can avoid worrying",
    "start": "1221480",
    "end": "1230390"
  },
  {
    "text": "about these things. But, as we say in Latin,\ncaveat computor.",
    "start": "1230390",
    "end": "1237400"
  },
  {
    "text": "Sometimes you have to\nworry a little bit. Now there is one thing about\nfloating points about which",
    "start": "1237400",
    "end": "1244860"
  },
  {
    "text": "you should always worry. And that's really the point I\nwant to drive home, and that's",
    "start": "1244860",
    "end": "1254140"
  },
  {
    "text": "about the meaning\nof double equal.",
    "start": "1254140",
    "end": "1268260"
  },
  {
    "text": "Let's look at an example\nof this. So we've before seen the use\nof import, so I'm going to",
    "start": "1268260",
    "end": "1276700"
  },
  {
    "text": "import math, it gives me some\nuseful mathematical functions, then I'm going to set the\nvariable a to the",
    "start": "1276700",
    "end": "1284440"
  },
  {
    "text": "square root of two. Whoops.",
    "start": "1284440",
    "end": "1291590"
  },
  {
    "text": "Why didn't this work? Because what I should have\nsaid is math dot square root of two.",
    "start": "1291590",
    "end": "1302100"
  },
  {
    "text": "Explaining to the interpreter\nthat I want to get the function sqrt from\nthe module math.",
    "start": "1302100",
    "end": "1312600"
  },
  {
    "text": "So now I've got a here, and I\ncan look at what a is, yeah,",
    "start": "1312600",
    "end": "1319520"
  },
  {
    "text": "some approximation to the square\nroot about of two. Now here's the interesting\nquestion.",
    "start": "1319520",
    "end": "1324559"
  },
  {
    "text": "Suppose I ask about the Boolean\na times a equals",
    "start": "1324560",
    "end": "1330880"
  },
  {
    "text": "equals two. Now in my heart, I think, if\nI've taken the square root of",
    "start": "1330880",
    "end": "1336440"
  },
  {
    "text": "number and then I've multiplied\nit by itself, I could get the original\nnumber back.",
    "start": "1336440",
    "end": "1342060"
  },
  {
    "text": "After all, that's the meaning\nof square root. But by now, you won't be\nsurprised if the answer of",
    "start": "1342060",
    "end": "1348460"
  },
  {
    "text": "this is false, because we know\nwhat we've stored is only an approximation to the\nsquare root.",
    "start": "1348460",
    "end": "1357650"
  },
  {
    "text": "And that's kind of\ninteresting. So we can see that, by, if I\nlook at a times a, I'll get",
    "start": "1357650",
    "end": "1364460"
  },
  {
    "text": "two point a whole bunch\nof zeros and then a four at the end. So this means, if I've got a\ntest in my program, in some",
    "start": "1364460",
    "end": "1373150"
  },
  {
    "text": "sense it will give me the\nunexpected answer false.",
    "start": "1373150",
    "end": "1378870"
  },
  {
    "text": "What this tells us, is that it's\nvery risky to ever use",
    "start": "1378870",
    "end": "1384440"
  },
  {
    "text": "the built-in double--equals to\ncompare floating points, and in fact, you should never be\ntesting for equality, you",
    "start": "1384440",
    "end": "1393100"
  },
  {
    "text": "should always be testing\nfor close enough.",
    "start": "1393100",
    "end": "1398789"
  },
  {
    "text": "So typically, what you want to\ndo in your program, is ask the following question: is the\nabsolute value of a times a",
    "start": "1398790",
    "end": "1410529"
  },
  {
    "text": "minus 2.0 less than epsilon?",
    "start": "1410530",
    "end": "1420610"
  },
  {
    "text": "If we could easily type Greek,\nwe'd have written it that way, but we can't.",
    "start": "1420610",
    "end": "1426380"
  },
  {
    "text": "So that's some small value\nchosen to be appropriate for the application.",
    "start": "1426380",
    "end": "1432520"
  },
  {
    "text": "Saying, if these two things\nare within epsilon of each other, then I'm going to\ntreat them as equal.",
    "start": "1432520",
    "end": "1440870"
  },
  {
    "text": "And so what I typically do when\nI'm writing a Python code that's going to deal with\nfloating point numbers, and I",
    "start": "1440870",
    "end": "1446990"
  },
  {
    "text": "do this from time to time, is I\nintroduce a function called",
    "start": "1446990",
    "end": "1452040"
  },
  {
    "text": "almost equal, or near, or pick\nyour favorite word, that does",
    "start": "1452040",
    "end": "1458940"
  },
  {
    "text": "this for me. And wherever I would normally\nwritten double x equals y,",
    "start": "1458940",
    "end": "1464309"
  },
  {
    "text": "instead I write, near x,y, and\nit computes it for me.",
    "start": "1464310",
    "end": "1471960"
  },
  {
    "text": "Not a big deal, but keep this\nin mind, or as soon as you start dealing with numbers, you\nwill get very frustrated",
    "start": "1471960",
    "end": "1479390"
  },
  {
    "text": "in trying to understand what\nyour program does. OK.",
    "start": "1479390",
    "end": "1485940"
  },
  {
    "text": "Enough of numbers for a while,\nI'm sure some of you will find this a relief.",
    "start": "1485940",
    "end": "1492100"
  },
  {
    "text": "I now want to get away from\ndetails of floating point, and",
    "start": "1492100",
    "end": "1497380"
  },
  {
    "text": "talk about general methods\nagain, returning to the real theme of the course of solving\nproblems using computers.",
    "start": "1497380",
    "end": "1506769"
  },
  {
    "text": "Last week, we looked at the\nrather silly problem of finding the square root\nof a perfect square.",
    "start": "1506770",
    "end": "1515759"
  },
  {
    "text": "Well, that's not usually\nwhat you need.",
    "start": "1515760",
    "end": "1521640"
  },
  {
    "text": "Let's think about the more\nuseful problem of finding the square root of a real number.",
    "start": "1521640",
    "end": "1527640"
  },
  {
    "text": "Well, you've just seen\nhow you do that. You import math and\nyou call sqrt.",
    "start": "1527640",
    "end": "1532679"
  },
  {
    "text": "Let's pretend that we didn't\nknow that trick, or let's pretend it's your job to\nintroduce-- implement,",
    "start": "1532680",
    "end": "1539750"
  },
  {
    "text": "rather-- math. And so, you need to figure out\nhow to implement square root.",
    "start": "1539750",
    "end": "1546250"
  },
  {
    "text": "Why might this be a challenge? What are some of the issues?",
    "start": "1546250",
    "end": "1552230"
  },
  {
    "text": "And there are several. One is, what we've just seen\nmight not be an exact answer.",
    "start": "1552230",
    "end": "1569960"
  },
  {
    "text": "For example, the square\nroot of two.",
    "start": "1569960",
    "end": "1576460"
  },
  {
    "text": "So we need to worry about that,\nand clearly the way we're going to solve that, as\nwe'll see, is using a concept",
    "start": "1576460",
    "end": "1584980"
  },
  {
    "text": "similar to epsilon. In fact, we'll even\ncall it epsilon.",
    "start": "1584980",
    "end": "1593100"
  },
  {
    "text": "Another problem with the method\nwe looked at last time is, there we were doing\nexhaustive enumeration.",
    "start": "1593100",
    "end": "1600100"
  },
  {
    "text": "We were enumerating all the\npossible answers, checking each one, and if it was\ngood, stopping.",
    "start": "1600100",
    "end": "1607680"
  },
  {
    "text": "Well, the problem with reals, as\nopposed to integers, is we",
    "start": "1607680",
    "end": "1615380"
  },
  {
    "text": "can't enumerate all guesses.",
    "start": "1615380",
    "end": "1626310"
  },
  {
    "text": "And that's because the reals\nare uncountable.",
    "start": "1626310",
    "end": "1634540"
  },
  {
    "text": "If I ask you to enumerate the\npositive integers, you'll say one, two, three, four, five.",
    "start": "1634540",
    "end": "1642350"
  },
  {
    "text": "If I ask you to enumerate the\nreals, the positive reals,",
    "start": "1642350",
    "end": "1648880"
  },
  {
    "text": "where do you start? One over a billion,\nplus who knows? Now as we've just seen in fact,\nsince there's a limit to",
    "start": "1648880",
    "end": "1657610"
  },
  {
    "text": "the precision floating point,\ntechnically you can enumerate all the floating\npoint numbers.",
    "start": "1657610",
    "end": "1664970"
  },
  {
    "text": "And I say technically, because\nif you tried to do that, your computation would not terminate\nany time soon.",
    "start": "1664970",
    "end": "1673630"
  },
  {
    "text": "So even though in some, in\nprinciple you could enumerate them, in fact you\nreally can't.",
    "start": "1673630",
    "end": "1679780"
  },
  {
    "text": "And so we think of the floating\npoints, like the reals, as being innumerable.",
    "start": "1679780",
    "end": "1684900"
  },
  {
    "text": "Or not innumerable, as to say\nas being uncountable.",
    "start": "1684900",
    "end": "1690020"
  },
  {
    "text": "So we can't do that. So we have to find something\nclever, because we're now",
    "start": "1690020",
    "end": "1699450"
  },
  {
    "text": "searching a very large space\nof possible answers. What would, technically\nyou might call",
    "start": "1699450",
    "end": "1706502"
  },
  {
    "text": "a large state space. So we're going to take our\nprevious method of guess and",
    "start": "1706502",
    "end": "1713240"
  },
  {
    "text": "check, and replace it by\nsomething called guess, check,",
    "start": "1713240",
    "end": "1721850"
  },
  {
    "text": "and improve. Previously, we just generated\nguesses in some systematic",
    "start": "1721850",
    "end": "1730290"
  },
  {
    "text": "way, but without knowing\nthat we were getting closer to the answer. Think of the original barnyard\nproblem with the chickens and",
    "start": "1730290",
    "end": "1738270"
  },
  {
    "text": "the heads and the legs, we just\nenumerated possibilities, but we didn't know that one\nguess was better than the",
    "start": "1738270",
    "end": "1744440"
  },
  {
    "text": "previous guess. Now, we're going to find a way\nto do the enumeration where we",
    "start": "1744440",
    "end": "1752600"
  },
  {
    "text": "have good reason to believe,\nat least with high",
    "start": "1752600",
    "end": "1758190"
  },
  {
    "text": "probability, that each\nguess is better than the previous guess.",
    "start": "1758190",
    "end": "1765330"
  },
  {
    "text": "This is what's called successive\napproximation.",
    "start": "1765330",
    "end": "1781610"
  },
  {
    "text": "And that's a very important\nconcept. Many problems are solved\ncomputationally using",
    "start": "1781610",
    "end": "1790140"
  },
  {
    "text": "successive approximation.",
    "start": "1790140",
    "end": "1796150"
  },
  {
    "text": "Every successive approximation\nmethod has the same rough structure.",
    "start": "1796150",
    "end": "1803640"
  },
  {
    "text": "You start with some guess, which\nwould be the initial",
    "start": "1803640",
    "end": "1809490"
  },
  {
    "text": "guess, you then iterate-- and in\na minute I'll tell you why",
    "start": "1809490",
    "end": "1820030"
  },
  {
    "text": "I'm doing it this particular\nway, over some range.",
    "start": "1820030",
    "end": "1829630"
  },
  {
    "text": "I've chosen one hundred, but\ndoesn't have to be one hundred, just some number\nthere-- if f of x, that is to",
    "start": "1829630",
    "end": "1844549"
  },
  {
    "text": "say some some function of my-- Whoops, I shouldn't\nhave said x.",
    "start": "1844550",
    "end": "1850400"
  },
  {
    "text": "My notes say x, but it's the\nwrong thing-- if f of x, f of",
    "start": "1850400",
    "end": "1858340"
  },
  {
    "text": "the guess, is close enough, so\nfor example, if when I square",
    "start": "1858340",
    "end": "1865950"
  },
  {
    "text": "guess, I get close enough to\nthe number who's root I'm-- square root I'm looking for,\nthen I'll return the guess.",
    "start": "1865950",
    "end": "1880750"
  },
  {
    "text": "If it's not close enough,\nI'll get a better guess.",
    "start": "1880750",
    "end": "1899860"
  },
  {
    "text": "If I do my, in this case, one\nhundred iterations, and I've",
    "start": "1899860",
    "end": "1905080"
  },
  {
    "text": "not get-- gotten a guess that's\ngood enough, I'm going to quit with some error.",
    "start": "1905080",
    "end": "1914370"
  },
  {
    "text": "Saying, wow. I thought my method was good\nenough that a hundred guesses should've gotten me there.",
    "start": "1914370",
    "end": "1920740"
  },
  {
    "text": "If it didn't, I may be wrong. I always like to have some\nlimit, so that my program",
    "start": "1920740",
    "end": "1927070"
  },
  {
    "text": "can't spin off into the ether,\nguessing forever. OK.",
    "start": "1927070",
    "end": "1932560"
  },
  {
    "text": "Let's look at an example\nof that.",
    "start": "1932560",
    "end": "1955410"
  },
  {
    "text": "So here's a successive\napproximation",
    "start": "1955410",
    "end": "1960730"
  },
  {
    "text": "to the square root. I've called it square root bi.",
    "start": "1960730",
    "end": "1965930"
  },
  {
    "text": "The bi is not a reference to the\nsexual preferences of the function, but a reference to\nthe fact that this is an",
    "start": "1965930",
    "end": "1973020"
  },
  {
    "text": "example of what's called\na bi-section method.",
    "start": "1973020",
    "end": "1992950"
  },
  {
    "text": "The basic idea behind any\nbi-section method is the same,",
    "start": "1992950",
    "end": "1998000"
  },
  {
    "text": "and we'll see lots of examples\nof this semester, is that you have some linearly-arranged\nspace of possible answers.",
    "start": "1998000",
    "end": "2011540"
  },
  {
    "text": "And it has the property that if\nI take a guess somewhere, let's say there, I guess that's\nthe answer to the",
    "start": "2011540",
    "end": "2019929"
  },
  {
    "text": "question, if it turns out that's\nnot the answer, I can",
    "start": "2019930",
    "end": "2025590"
  },
  {
    "text": "easily determine whether the\nanswer lies to the left or the",
    "start": "2025590",
    "end": "2030750"
  },
  {
    "text": "right of the guess. So if I guess that 89.12 is the\nsquare root of a number,",
    "start": "2030750",
    "end": "2039679"
  },
  {
    "text": "and it turns out not to be the\nsquare root of the number, I have a way of saying, is 89.12\ntoo big or too small.",
    "start": "2039680",
    "end": "2048790"
  },
  {
    "text": "If it was too big, then I\nknow I'd better guess some number over here. It was too small, then\nI'd better guess",
    "start": "2048790",
    "end": "2056319"
  },
  {
    "text": "some number over here. Why do I call it bi-section?",
    "start": "2056320",
    "end": "2063810"
  },
  {
    "text": "Because I'm dividing it in half,\nand in general as we'll see, when I know what my space\nof answers is, I always, as my",
    "start": "2063810",
    "end": "2073330"
  },
  {
    "text": "next guess, choose something\nhalf-way along that line. So I made a guess, and let's say\nwas too small, and I know",
    "start": "2073330",
    "end": "2081750"
  },
  {
    "text": "the answer is between here and\nhere, this was too small, I now know that the answer is\nbetween here and here, so my",
    "start": "2081750",
    "end": "2089950"
  },
  {
    "text": "next guess will be\nin the middle. The beauty of always guessing\nin the middle is, at each",
    "start": "2089950",
    "end": "2096869"
  },
  {
    "text": "guess, if it's wrong, I\nget to throw out half of the state space.",
    "start": "2096870",
    "end": "2102420"
  },
  {
    "text": "So I know how long it's going\nto take me to search the possibilities in some sense,\nbecause I'm getting",
    "start": "2102420",
    "end": "2110780"
  },
  {
    "text": "logarithmically progressed.",
    "start": "2110780",
    "end": "2116410"
  },
  {
    "text": "This is exactly what we saw when\nwe looked at recursion in some sense, where we solved the\nproblem by, at each step,",
    "start": "2116410",
    "end": "2125790"
  },
  {
    "text": "solving a smaller problem. The same problem, but on a\nsmaller solution space.",
    "start": "2125790",
    "end": "2133140"
  },
  {
    "text": "Now as it happens, I'm not\nusing recursion in this implementation we have up on\nthe screen, I'm doing it",
    "start": "2133140",
    "end": "2138980"
  },
  {
    "text": "iteratively but the\nidea is the same. So we'll take a quick look at\nit now, then we'll quit and",
    "start": "2138980",
    "end": "2146660"
  },
  {
    "text": "we'll come back to in the next\nlecture a little more thoroughly. I'm going to warn you right\nnow, that there's a bug in",
    "start": "2146660",
    "end": "2153809"
  },
  {
    "text": "this code, and in the next\nlecture, we'll see if we can discover what that is.",
    "start": "2153810",
    "end": "2160480"
  },
  {
    "text": "So, it takes two arguments; x,\nthe number whose square root we're looking for,\nand epsilon, how",
    "start": "2160480",
    "end": "2167619"
  },
  {
    "text": "close we need to get. It assumes that x is\nnon-negative, and that epsilon",
    "start": "2167620",
    "end": "2175750"
  },
  {
    "text": "is greater than zero. Why do we need to assume\nthat's epsilon is greater than zero?",
    "start": "2175750",
    "end": "2181950"
  },
  {
    "text": "Well, if you made epsilon zero,\nand then say, we're looking for the square root\nof two, we know we'll never get an answer.",
    "start": "2181950",
    "end": "2189849"
  },
  {
    "text": "So, we want it to be positive,\nand then it returns y such",
    "start": "2189850",
    "end": "2195470"
  },
  {
    "text": "that y times y is within\nepsilon of x. It's near, to use the\nterminology we used before.",
    "start": "2195470",
    "end": "2204400"
  },
  {
    "text": "The next thing we see in the\nprogram, is two assert statements.",
    "start": "2204400",
    "end": "2209860"
  },
  {
    "text": "This is because I never trust\nthe people who call my functions to do the\nright thing.",
    "start": "2209860",
    "end": "2217360"
  },
  {
    "text": "Even though I said I'm going to\nassume certain things about x and epsilon, I'm actually\ngoing to test it.",
    "start": "2217360",
    "end": "2224240"
  },
  {
    "text": "And so, I'm going to assert\nthat x is greater than or equal to zero, and that epsilon\nis greater than zero.",
    "start": "2224240",
    "end": "2231710"
  },
  {
    "text": "What assert does, is it tests\nthe predicate, say x greater than or equal to zero, if it's\ntrue, it does nothing, just",
    "start": "2231710",
    "end": "2241450"
  },
  {
    "text": "goes on to the next statement. But if it's false, it prints a\nmessage, the string, which is",
    "start": "2241450",
    "end": "2248390"
  },
  {
    "text": "my second argument here, and\nthen the program just stops. So rather than my function going\noff and doing something",
    "start": "2248390",
    "end": "2255609"
  },
  {
    "text": "bizarre, for example running\nforever, it just stops with a message saying, you called me\nwith arguments you shouldn't",
    "start": "2255610",
    "end": "2262460"
  },
  {
    "text": "have called me with. All right, so that's the\nspecification and then my",
    "start": "2262460",
    "end": "2269569"
  },
  {
    "text": "check of the assumptions. The next thing it does, is it\nlooks for a range such that I",
    "start": "2269570",
    "end": "2279800"
  },
  {
    "text": "believe I am assured that my\nanswer lies between the ran-- these values, and I'm going to\nsay, well, my answer will be",
    "start": "2279800",
    "end": "2288260"
  },
  {
    "text": "no smaller than zero, and\nno bigger than x.",
    "start": "2288260",
    "end": "2293970"
  },
  {
    "text": "Now, is this the tightest\npossible range? Maybe not, but I'm not\ntoo fussy about that.",
    "start": "2293970",
    "end": "2299280"
  },
  {
    "text": "I'm just trying to make sure\nthat I cover the space.",
    "start": "2299280",
    "end": "2305010"
  },
  {
    "text": "Then I'll start with a guess,\nand again I'm not going to worry too much about the guess,\nI'm going to take low",
    "start": "2305010",
    "end": "2311630"
  },
  {
    "text": "plus high and divide by two,\nthat is to say, choose something in the middle of\nthis space, and then",
    "start": "2311630",
    "end": "2320240"
  },
  {
    "text": "essentially do what\nwe've got here. So it's a little bit more\ninvolved here, I'm going to",
    "start": "2320240",
    "end": "2326619"
  },
  {
    "text": "set my counter to one, just to\nkeep checking, then say, while",
    "start": "2326620",
    "end": "2332130"
  },
  {
    "text": "the absolute value of the\nguess squared minus x is greater than epsilon, that is\nto say, why my guess is not",
    "start": "2332130",
    "end": "2339339"
  },
  {
    "text": "yet good enough, and the counter\nis not greater than a hundred, I'll get\nthe next guess.",
    "start": "2339340",
    "end": "2349220"
  },
  {
    "text": "Notice by the way, I have a\nprint statement here which I've commented out, but I sort\nof figured that my program",
    "start": "2349220",
    "end": "2355119"
  },
  {
    "text": "would not work correctly the\nfirst time, and so, I, when I",
    "start": "2355120",
    "end": "2360500"
  },
  {
    "text": "first typed and put in a print\nstatement, it would let me see what was happening each\niteration through this loop,",
    "start": "2360500",
    "end": "2367100"
  },
  {
    "text": "so that if it didn't work, I\ncould get a sense of why not. In the next lecture, when we\nlook for the bug in this",
    "start": "2367100",
    "end": "2373760"
  },
  {
    "text": "program, you will see me\nuncomment out that print statement, but for now, we\ngo to the next thing.",
    "start": "2373760",
    "end": "2382720"
  },
  {
    "text": "And we're here, we know the\nguess wasn't good enough, so I now say, if the guess squared\nwas less than x, then I will",
    "start": "2382720",
    "end": "2392690"
  },
  {
    "text": "change the low bound\nto be the guess.",
    "start": "2392690",
    "end": "2398329"
  },
  {
    "text": "Otherwise, I'll change the high\nbound to be the guess. So I move either the low bound\nor I move the high bound,",
    "start": "2398330",
    "end": "2405960"
  },
  {
    "text": "either way I'm cutting\nthe search space in half each step. I'll get my new guess.",
    "start": "2405960",
    "end": "2413110"
  },
  {
    "text": "I'll increment my counter,\nand off I go. In the happy event that\neventually I get a good enough",
    "start": "2413110",
    "end": "2420440"
  },
  {
    "text": "guess, you'll see a-- I'll exit the loop.",
    "start": "2420440",
    "end": "2426160"
  },
  {
    "text": "When I exit the loop, I checked,\ndid I exit it because I exceeded the counter,\nI didn't have",
    "start": "2426160",
    "end": "2432530"
  },
  {
    "text": "a good-enough guess. If so, I'll print the message\niteration count exceeded.",
    "start": "2432530",
    "end": "2439140"
  },
  {
    "text": "Otherwise, I'll print the\nresult and return it.",
    "start": "2439140",
    "end": "2446299"
  },
  {
    "text": "Now again, if I were writing a\nsquare root function to be used in another program, I\nprobably wouldn't bother",
    "start": "2446300",
    "end": "2451570"
  },
  {
    "text": "printing the result and the\nnumber of iterations and all of that, but again, I'm doing\nthat here for, because we want",
    "start": "2451570",
    "end": "2457950"
  },
  {
    "text": "to see what it's doing. All right. We'll run it a couple times\nand then I'll let you out for the day.",
    "start": "2457950",
    "end": "2466420"
  },
  {
    "text": "Let's go do this.",
    "start": "2466420",
    "end": "2480599"
  },
  {
    "text": "All right. We're here. Well, notice when I run\nit, nothing happens. Why did nothing happen?",
    "start": "2480600",
    "end": "2486960"
  },
  {
    "text": "Well, nothing happens, it\nwas just a function. Functions don't do anything\nuntil I call them.",
    "start": "2486960",
    "end": "2493030"
  },
  {
    "text": "So let's call it. Let's call square root bi with\n40.001 Took only one at--",
    "start": "2493030",
    "end": "2509860"
  },
  {
    "text": "iteration, that was pretty\nfast, estimated two as an answer, we're pretty happy\nwith that answer.",
    "start": "2509860",
    "end": "2515720"
  },
  {
    "text": "Let's try another example. Let's look at nine.",
    "start": "2515720",
    "end": "2523320"
  },
  {
    "text": "I always like to, by the way,\nstart with questions whose answer I know.",
    "start": "2523320",
    "end": "2528690"
  },
  {
    "text": "We'll try and get a little\nbit more precise. Well, all right. Here it took eighteen\niterations.",
    "start": "2528690",
    "end": "2536620"
  },
  {
    "text": "Didn't actually give me the\nanswer three, which we know happens to be the answer, but it\ngave me something that was",
    "start": "2536620",
    "end": "2544099"
  },
  {
    "text": "within epsilon of three, so it\nmeets the specification, so I should be perfectly happy.",
    "start": "2544100",
    "end": "2552430"
  },
  {
    "text": "Let's look at another example.",
    "start": "2552430",
    "end": "2558690"
  },
  {
    "text": "Try a bigger number here.",
    "start": "2558690",
    "end": "2566960"
  },
  {
    "text": "All right? So I've looked for the square\nroot of a thousand, here it took twenty-nine iterations,\nwe're kind of creeping up",
    "start": "2566960",
    "end": "2573000"
  },
  {
    "text": "there, gave me an estimate. Ah, let's look at our infamous\nexample of two, see",
    "start": "2573000",
    "end": "2579280"
  },
  {
    "text": "what it does here.",
    "start": "2579280",
    "end": "2592200"
  },
  {
    "text": "Worked around. Now, we can see it's actually\nworking, and I'm getting",
    "start": "2592200",
    "end": "2600790"
  },
  {
    "text": "answers that we believe are\ngood-enough answers, but we also see that the speed of\nwhat we talk about as",
    "start": "2600790",
    "end": "2608250"
  },
  {
    "text": "convergence-- how many\niterations it takes, the number of iterations-- is\nvariable, and it seems to be",
    "start": "2608250",
    "end": "2615480"
  },
  {
    "text": "related to at least two things,\nand we'll see more about this in the\nnext lecture.",
    "start": "2615480",
    "end": "2620520"
  },
  {
    "text": "The size of the number whose\nsquare root we're looking for, and the precision to which\nI want the answer.",
    "start": "2620520",
    "end": "2629240"
  },
  {
    "text": "Next lecture, we'll look at a,\nwhat's wrong with this one,",
    "start": "2629240",
    "end": "2634869"
  },
  {
    "text": "and I would ask you to between\nnow and the next lecture, think about it, see if you can\nfind the bug yourself, we'll",
    "start": "2634870",
    "end": "2641829"
  },
  {
    "text": "look first for the bug, and then\nafter that, we'll look at a better method of finding\nthe answer.",
    "start": "2641830",
    "end": "2648820"
  },
  {
    "text": "Thank you. ",
    "start": "2648820",
    "end": "2652385"
  }
]