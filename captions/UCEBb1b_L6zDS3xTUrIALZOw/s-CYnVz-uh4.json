[
  {
    "start": "0",
    "end": "122000"
  },
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6350"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6350",
    "end": "13330"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13330",
    "end": "21730"
  },
  {
    "text": "PROFESSOR: Today we're going\nto introduce graph search in general and talk about\none algorithm, which is breadth-first search, and\nunderstand how in principle you",
    "start": "21730",
    "end": "29340"
  },
  {
    "text": "can solve a puzzle\nlike the Rubik's Cube. So before I get to\nRubik's Cubes let",
    "start": "29340",
    "end": "36190"
  },
  {
    "text": "me remind you of some\nbasic stuff about graphs.",
    "start": "36190",
    "end": "41941"
  },
  {
    "text": "Or I can tell you to start\nout with, graph search is",
    "start": "41942",
    "end": "50380"
  },
  {
    "text": "about exploring a graph. ",
    "start": "50380",
    "end": "55890"
  },
  {
    "text": "And there's many different\nnotions of exploring a graph. Maybe I give you some\nnode in a graph, s,",
    "start": "55890",
    "end": "61950"
  },
  {
    "text": "and some other\nnode in a graph, t, and I'd like to\nfind a path that's going to represent a\nproblem like I give you",
    "start": "61950",
    "end": "69390"
  },
  {
    "text": "a particular state of a\nRubik's Cube and I want to know is there some path that\ngets me into a solved state?",
    "start": "69390",
    "end": "76534"
  },
  {
    "text": "Do I really want to\nsolve this on stage? What the hell? We started.",
    "start": "76534",
    "end": "81650"
  },
  {
    "text": "So this is a particularly\neasy state to solve, which is why I set up this way.",
    "start": "81650",
    "end": "86816"
  },
  {
    "text": "All right, so there you go. Seven by seven by seven Rubik's\nCube solved in 10 seconds. Amazing.",
    "start": "86816",
    "end": "93650"
  },
  {
    "text": "New world record. So you're given some initial\nstate of the Rubik's Cube.",
    "start": "93650",
    "end": "99326"
  },
  {
    "text": "You're given the\ntargets that you know what solved looks like. You want to find this path.",
    "start": "99327",
    "end": "105000"
  },
  {
    "text": "Maybe you want to\nfind all paths from s. Maybe you just want to\nexplore all the nodes in a graph you can reach from s.",
    "start": "105000",
    "end": "111160"
  },
  {
    "text": "Maybe you want to explore all\nthe nodes in a graph or maybe all the edges in a graph. These are all\nexploration problems. They're all going to\nbe solved by algorithms",
    "start": "111160",
    "end": "117910"
  },
  {
    "text": "from this class and next class. So before we go\nfurther though, I",
    "start": "117910",
    "end": "124350"
  },
  {
    "start": "122000",
    "end": "195000"
  },
  {
    "text": "should remind you\nwhat a graph is and sort of basic\nfeatures of graphs",
    "start": "124350",
    "end": "130169"
  },
  {
    "text": "that we're going to be using. This is also 6042 material so\nyou should know it very well.",
    "start": "130169",
    "end": "135390"
  },
  {
    "text": "If you don't,\nthere's an appendix in the textbook about it. We have a set of vertices. We have a set of edges.",
    "start": "135390",
    "end": "141055"
  },
  {
    "start": "141055",
    "end": "153359"
  },
  {
    "text": "Edges are either\nunordered pairs--",
    "start": "153360",
    "end": "158655"
  },
  {
    "text": " some sets of two items--",
    "start": "158655",
    "end": "164240"
  },
  {
    "text": " or ordered pairs.",
    "start": "164240",
    "end": "170630"
  },
  {
    "start": "170630",
    "end": "178230"
  },
  {
    "text": "In this case, we call\nthe graph undirected. In this case, we call\nthe graph directed.",
    "start": "178230",
    "end": "184920"
  },
  {
    "text": "Usually, there's only one type. Either all the\nedges are directed or all the edges are undirected.",
    "start": "184920",
    "end": "191690"
  },
  {
    "text": "There is a study of\ngraphs that have both, but we are not doing that here. ",
    "start": "191690",
    "end": "198720"
  },
  {
    "start": "195000",
    "end": "256000"
  },
  {
    "text": "Some simple examples.  Here is a graph.",
    "start": "198720",
    "end": "204010"
  },
  {
    "start": "204010",
    "end": "209569"
  },
  {
    "text": "This is an undirected graph. ",
    "start": "209570",
    "end": "222819"
  },
  {
    "text": "This is a directed graph. ",
    "start": "222820",
    "end": "228490"
  },
  {
    "text": "The set of vertices\nhere is a, b, c, d. The set of vertices\nhere is a, b, c. The set of edges here is--",
    "start": "228490",
    "end": "235180"
  },
  {
    "text": "E is going to be things\nlike a, b; b, c; c, d--",
    "start": "235180",
    "end": "244250"
  },
  {
    "text": "I think you get the idea. ",
    "start": "244250",
    "end": "249780"
  },
  {
    "text": "Just for completeness,\nV is a, b, c, d. Just so you remember\nnotations and so on. ",
    "start": "249780",
    "end": "257213"
  },
  {
    "start": "256000",
    "end": "338000"
  },
  {
    "text": "One of the issues we're going\nto talk about in this class is how do you represent a graph\nlike this for an algorithm?",
    "start": "257214",
    "end": "263561"
  },
  {
    "text": "So it's all fine to say,\noh, this is a set of things. This is a set of things. An obvious representation\nis, you have",
    "start": "263562",
    "end": "268710"
  },
  {
    "text": "a list or an array of vertices. You have an array of edges. Each edge knows\nits two end points.",
    "start": "268710",
    "end": "274319"
  },
  {
    "text": "That would be a horrible\nrepresentation for a graph because if you're, I\ndon't know, at vertex, a,",
    "start": "274320",
    "end": "279919"
  },
  {
    "text": "and you want to know, well\nwhat are the neighbors of a? b and c. You'd have to go through\nthe entire edge list",
    "start": "279920",
    "end": "285290"
  },
  {
    "text": "to figure out the\nneighbors of a. So it's been linear time just\nto know where you can go from a.",
    "start": "285290",
    "end": "290424"
  },
  {
    "text": "So we're not going to\nuse that representation. We're going to use some\nbetter representations.",
    "start": "290424",
    "end": "295430"
  },
  {
    "text": "Something called\nan adjacency list. ",
    "start": "295430",
    "end": "301560"
  },
  {
    "text": "Over here, you've got things\nlike a, c; b, c; and c, b.",
    "start": "301560",
    "end": "307970"
  },
  {
    "text": "So you can have edges\nin both directions. What am I missing? b, a. ",
    "start": "307970",
    "end": "314892"
  },
  {
    "text": "So that's E, in that case. ",
    "start": "314892",
    "end": "322180"
  },
  {
    "text": "There are a whole lot of\napplications of graph search. I'll make you a little list\nto talk about few of them.",
    "start": "322180",
    "end": "328430"
  },
  {
    "text": " So we've got web crawling.",
    "start": "328430",
    "end": "335095"
  },
  {
    "text": " You're Google. You want to find all\nthe pages on the web.",
    "start": "335095",
    "end": "342100"
  },
  {
    "text": "Most people don't just tell\nyou, hey, I've got a new page, please index it. You have to just keep\nfollowing links--",
    "start": "342100",
    "end": "348520"
  },
  {
    "text": "in the early days of the\nweb, this was a big deal-- following links finding\neverything that's out there.",
    "start": "348520",
    "end": "353659"
  },
  {
    "text": "It's a little bit of an issue\nbecause if you define it wrong, the internet is infinite\nbecause of all those dynamically",
    "start": "353659",
    "end": "359690"
  },
  {
    "text": "generated pages. But to deal with\nthat, Google goes sort of breadth-first\nfor the most part.",
    "start": "359690",
    "end": "365349"
  },
  {
    "text": "It's prioritized You want\nto see all the things you can reach from pages you\nalready have and keep going.",
    "start": "365350",
    "end": "375440"
  },
  {
    "text": "At some point, you give up\nwhen you run out of time. Social networking.",
    "start": "375440",
    "end": "381130"
  },
  {
    "text": "You're on Facebook. You use Friend Finder. It tries to find the friends\nthat are nearest to you.",
    "start": "381130",
    "end": "386260"
  },
  {
    "text": "Or friends of friends is\nsort of a level to search. That's essentially a\ngraph search problem.",
    "start": "386260",
    "end": "393340"
  },
  {
    "text": "You want to know what's\ntwo levels or three levels of separation from you.",
    "start": "393340",
    "end": "399180"
  },
  {
    "text": "And then you loop over those\nand look for other signs that you might be good friends.",
    "start": "399180",
    "end": "404819"
  },
  {
    "text": " You are on a network like the\ninternet or some intranet.",
    "start": "404820",
    "end": "414460"
  },
  {
    "text": "You want to broadcast a message. So here's you. You want to send data out. That's essentially a\ngraph exploration problem.",
    "start": "414460",
    "end": "421830"
  },
  {
    "text": "That message, that packet, is\ngoing to explore the graph. ",
    "start": "421830",
    "end": "429460"
  },
  {
    "text": "Garbage collection.  I hope you all know that\nmodern languages have",
    "start": "429460",
    "end": "437369"
  },
  {
    "text": "garbage collection. This is why you don't have to\nworry about freeing things. Even in Python--\neven in CPython,",
    "start": "437369",
    "end": "443800"
  },
  {
    "text": "I learned-- there is a garbage\ncollector as of version two. But also in PyPy, and\nJPython and in Java--",
    "start": "443800",
    "end": "451590"
  },
  {
    "text": "pretty much every\nfairly modern language you have garbage collection.",
    "start": "451590",
    "end": "456729"
  },
  {
    "text": "Meaning, if there's some data\nthat's unreachable from-- So you have your variables.",
    "start": "456730",
    "end": "463820"
  },
  {
    "text": "Variables that can be\naccessed by the program. Everything that's reachable\nfrom there you have to keep. But if some data structure\nbecomes no longer reachable,",
    "start": "463820",
    "end": "472020"
  },
  {
    "text": "you can throw it away\nand regain memory.",
    "start": "472020",
    "end": "477895"
  },
  {
    "text": "So that's happening behind\nthe scenes all the time, and the way it's\nbeing done is with their breadth-first\nsearch, which",
    "start": "477895",
    "end": "483170"
  },
  {
    "text": "is what we're going\nto talk about today.  Another one.",
    "start": "483170",
    "end": "488449"
  },
  {
    "text": "Model checking. ",
    "start": "488450",
    "end": "494890"
  },
  {
    "text": "Model checking is-- you have\nsome finite model of either",
    "start": "494890",
    "end": "501250"
  },
  {
    "text": "a piece of code, or a\ncircuit, or chip, whatever, and you want to prove\nthat it actually does what you think it does.",
    "start": "501250",
    "end": "507620"
  },
  {
    "text": "And so you've drawn a graph. The graph is all\nthe possible states that your circuit or your\ncomputer program could reach,",
    "start": "507620",
    "end": "516000"
  },
  {
    "text": "or that it could possibly have. You start in some\ninitial state, and you want to know among all the\nstates that you can reach,",
    "start": "516000",
    "end": "522267"
  },
  {
    "text": "does it have some property. And so you need to visit\nall the vertices that are reachable from\na particular place.",
    "start": "522267",
    "end": "528500"
  },
  {
    "text": "And usually people do that\nusing breadth-first search.",
    "start": "528500",
    "end": "533720"
  },
  {
    "text": "I use breadth-first\nsearch a lot, myself, to check\nmathematical conjectures.",
    "start": "533720",
    "end": "539860"
  },
  {
    "text": "So if you're a mathematician,\nand you think something",
    "start": "539860",
    "end": "546269"
  },
  {
    "text": "is true. Like maybe-- It's hard to\ngive an example of that.",
    "start": "546270",
    "end": "551600"
  },
  {
    "text": "But you can imagine some graph\nof all the possible inputs to that theorem, and\nyou need to check them",
    "start": "551600",
    "end": "558330"
  },
  {
    "text": "for every possible input-- If this is true-- the\ntypical way to do that is breadth-first searching\nthrough that entire graph",
    "start": "558330",
    "end": "564480"
  },
  {
    "text": "of states. Usually, we're testing\nfinite, special cases",
    "start": "564480",
    "end": "569694"
  },
  {
    "text": "of a general conjecture, but\nif we find a counter-example, we're done. Don't have to work\non it anymore. If we don't find a\ncounter-example, usually then",
    "start": "569694",
    "end": "576590"
  },
  {
    "text": "we have to do the mathematics. It doesn't solve everything,\nbut it's helpful.",
    "start": "576590",
    "end": "582695"
  },
  {
    "text": " And then, the fun\nthing we're going",
    "start": "582695",
    "end": "592430"
  },
  {
    "text": "to talk about a\nlittle bit today, is if you want to solve\nsomething like a two by two by two Rubik's\nCube optimally,",
    "start": "592430",
    "end": "597939"
  },
  {
    "text": "you can do that using\nbreadth-first search. And you're going to do\nthat on your problem set. To do it solving this one\noptimally using breadth-first",
    "start": "597939",
    "end": "605340"
  },
  {
    "text": "search would probably-- would definitely-- take\nmore than the lifetime",
    "start": "605340",
    "end": "611140"
  },
  {
    "text": "of the universe. So don't try seven\nby seven by seven. ",
    "start": "611140",
    "end": "617610"
  },
  {
    "text": "Leave that to the\ncubing experts, I guess. I think no one will ever solve\na seven by seven by seven",
    "start": "617610",
    "end": "623610"
  },
  {
    "text": "Rubik's Cube optimally. There are ways to find a\nsolution just not the best one.",
    "start": "623610",
    "end": "630190"
  },
  {
    "start": "629000",
    "end": "862000"
  },
  {
    "text": "So let me tell you just\nfor fun, as an example. ",
    "start": "630190",
    "end": "636930"
  },
  {
    "text": "This Pocket Cube, which is a\ntwo by two by two Rubik's Cube. What we have in mind is\ncalled the configuration graph",
    "start": "636930",
    "end": "645780"
  },
  {
    "text": "or sometimes\nconfiguration space. But it's a graph, so\nwe'll call it a graph. ",
    "start": "645780",
    "end": "654040"
  },
  {
    "text": "This graph has a vertex for\neach possible state of the cube.",
    "start": "654040",
    "end": "661464"
  },
  {
    "start": "661465",
    "end": "670340"
  },
  {
    "text": "So this is a state.  This is a state.",
    "start": "670340",
    "end": "676820"
  },
  {
    "text": "This is a state. This is a state. Now I'm hopelessly lost. Anyone want to work on this?",
    "start": "676820",
    "end": "683540"
  },
  {
    "text": "Bored? No one? Alright, I'll leave\nit unsolved then. ",
    "start": "683540",
    "end": "691040"
  },
  {
    "text": "So all those are vertices. There's actually\na lot of vertices. There are 264 million\nvertices or so.",
    "start": "691040",
    "end": "698690"
  },
  {
    "text": "If you want. To the side here. Number of vertices is something\nlike 8 factorial times 3",
    "start": "698690",
    "end": "709300"
  },
  {
    "text": "to the 8. And one way to see that\nis to draw a two by two",
    "start": "709300",
    "end": "717637"
  },
  {
    "text": "by two Rubik's Cube.  So these are what you\nmight call cubelets,",
    "start": "717637",
    "end": "732890"
  },
  {
    "text": "or cubies I think is the\nstandard term in Rubik's Cube land. ",
    "start": "732890",
    "end": "741220"
  },
  {
    "text": "There's eight of them\nin a two by two by two. Two cubed. You can essentially permute\nthose cubies within the cube",
    "start": "741220",
    "end": "748452"
  },
  {
    "text": "however you like. That's 8 factorial. And then each of them has\nthree possible twists. It could be like this.",
    "start": "748452",
    "end": "754150"
  },
  {
    "text": "It could be like this. Or it could be like this. So you've got three for each.",
    "start": "754150",
    "end": "759356"
  },
  {
    "text": "And this is actually\nan accurate count. You're not over-counting the\nnumber of configurations. All of those are, at least\nin principle, conceivable.",
    "start": "759356",
    "end": "765760"
  },
  {
    "text": "If you take apart the\ncube, you can reassemble it in each of those states. And that number is\nabout 264 million.",
    "start": "765760",
    "end": "773930"
  },
  {
    "text": " Which is not so\nbad for computers.",
    "start": "773930",
    "end": "780000"
  },
  {
    "text": "You could search that. Life is a little bit easier. You get to divide by\n24 because there's 24 symmetries of the cube.",
    "start": "780000",
    "end": "786800"
  },
  {
    "text": "Eight times three. You can divide by three,\nalso, because only a third",
    "start": "786800",
    "end": "792329"
  },
  {
    "text": "of the configuration space\nis actually reachable. If you're not allowed\nto take the parts apart, if you have to get\nthere by a motion,",
    "start": "792329",
    "end": "797720"
  },
  {
    "text": "you can only get to 1/3\nof the two by two by two. So it's a little bit\nsmaller than that, if you're actually doing a\nbreadth-first search, which",
    "start": "797720",
    "end": "804550"
  },
  {
    "text": "is what you're going to be\ndoing on your problem set. But in any case, it's feasible. That was vertices.",
    "start": "804550",
    "end": "810370"
  },
  {
    "text": "We should talk about edges. ",
    "start": "810370",
    "end": "822240"
  },
  {
    "text": "For every move--\nevery move takes you",
    "start": "822240",
    "end": "827570"
  },
  {
    "text": "from one configuration\nto another. You could traverse it in one\ndirection and make that move.",
    "start": "827570",
    "end": "832960"
  },
  {
    "text": "You could also undo that move. Because every move is\nundoable in a Rubik's Cube, this graph is undirected.",
    "start": "832960",
    "end": "838940"
  },
  {
    "text": "Or you can think of it as every\nedge works in both directions. So this is a move. It's called a quarter twist.",
    "start": "838940",
    "end": "845829"
  },
  {
    "text": "This is a controversy\nif you will. Some people allow a whole\nhalf twist as a single move. Whether you define that as a\nsingle move or a double move",
    "start": "845830",
    "end": "853029"
  },
  {
    "text": "is not that big a deal. It just changes\nsome of the answers. But you're still exploring\nessentially the same graph.",
    "start": "853030",
    "end": "860970"
  },
  {
    "text": " So that's the graph\nand you'd like to know some\nproperties about it.",
    "start": "860970",
    "end": "866244"
  },
  {
    "start": "862000",
    "end": "1223000"
  },
  {
    "text": "So let me draw a\npicture of the graph. I'm not going to draw\nall 264 million vertices.",
    "start": "866244",
    "end": "871560"
  },
  {
    "text": "But in particular,\nthere's the solved state-- we kind of care\nabout that one, where",
    "start": "871560",
    "end": "877090"
  },
  {
    "text": "all the colors are aligned-- then there's all of\nthe configurations",
    "start": "877090",
    "end": "884100"
  },
  {
    "text": "you could reach by one move. So these are the possible\nmoves from the solved state.",
    "start": "884100",
    "end": "889949"
  },
  {
    "text": " And then from those\nconfigurations,",
    "start": "889950",
    "end": "895400"
  },
  {
    "text": "there's more places you can go. Maybe there's multiple ways\nto get to the same node.",
    "start": "895400",
    "end": "900448"
  },
  {
    "text": " But these would be\nall the configurations you can reach in two moves.",
    "start": "900448",
    "end": "907190"
  },
  {
    "start": "907190",
    "end": "915170"
  },
  {
    "text": "And so on. And at some point,\nyou run out of graph. So there might be a\nfew nodes out here.",
    "start": "915170",
    "end": "926250"
  },
  {
    "text": "The way I'm drawing\nthis, this is everything you can reach in one move, in\ntwo movies, in three moves. At the end, this\nwould be 11 moves,",
    "start": "926250",
    "end": "935010"
  },
  {
    "text": "if you allow half twists. And as puzzlers,\nwe're particularly",
    "start": "935010",
    "end": "941470"
  },
  {
    "text": "interested in this\nnumber, which you would call, as a graph theorist,\nthe diameter of the graph.",
    "start": "941470",
    "end": "950760"
  },
  {
    "text": "Puzzlers call it God's number. If you were God or some omni--",
    "start": "950760",
    "end": "957110"
  },
  {
    "text": "something being. You have the optimal algorithm\nfor solving the Rubik's Cube. How many moves do you\nneed If you always",
    "start": "957110",
    "end": "964220"
  },
  {
    "text": "follow the best path? And the answer is, in\nthe worst case, 11. So we're interested in the worst\ncase of the best algorithm.",
    "start": "964220",
    "end": "974130"
  },
  {
    "text": "For two by two by\ntwo, the answer is 11. For three by three by\nthree, the answer is 20.",
    "start": "974130",
    "end": "980050"
  },
  {
    "text": "That was just proved\nlast summer with a couple years of computer time. For four by four by four--",
    "start": "980050",
    "end": "985800"
  },
  {
    "text": "I don't have one here-- I think we'll never\nknow the answer. For five by five by five,\nwe'll never know the answer. For six, for seven, same deal.",
    "start": "985800",
    "end": "993820"
  },
  {
    "text": "But for two by two by\ntwo, you can compute it. You will compute it\non your problem set. And it's kind of nice\nto know because it",
    "start": "993820",
    "end": "1000399"
  },
  {
    "text": "says whatever configuration I'm\nin, I can solve it in 11 moves.",
    "start": "1000400",
    "end": "1006800"
  },
  {
    "text": "But the best known\nway to compute it, is basically to construct\nthis graph one layer at a time",
    "start": "1006800",
    "end": "1014220"
  },
  {
    "text": "until you're done. And then you know\nwhat the diameter is. The trouble is, in between\nhere this grows exponentially.",
    "start": "1014220",
    "end": "1020910"
  },
  {
    "text": "At some point, it\ndecreases a little bit. But getting over\nthat exponential hump is really hard.",
    "start": "1020910",
    "end": "1026563"
  },
  {
    "text": "And for three by three by\nthree, they used a lot of tricks to speed up the\nalgorithm, but in the end",
    "start": "1026564",
    "end": "1033490"
  },
  {
    "text": "it's essentially a\nbreadth-first search. What's a breadth-first search? This going layer by layer.",
    "start": "1033490",
    "end": "1039060"
  },
  {
    "text": "So we're going to\nformalize that in a moment. But that is the problem.",
    "start": "1039060",
    "end": "1045089"
  },
  {
    "text": "So just for fun,\nany guesses what",
    "start": "1045089",
    "end": "1057320"
  },
  {
    "text": "the right answer is for an\nn by n by n Rubik's cube? What's the diameter? Not an exact answer,\nbecause I think we'll never",
    "start": "1057320",
    "end": "1063720"
  },
  {
    "text": "know the exact answer. But if I want theta\nsomething, what do you think the something is?",
    "start": "1063720",
    "end": "1070280"
  },
  {
    "text": " How many people here have\nsolved the Rubik's Cube?",
    "start": "1070280",
    "end": "1076732"
  },
  {
    "text": "Ever? So you know what we're\ntalking about here. Most people have worked on it.",
    "start": "1076732",
    "end": "1084390"
  },
  {
    "text": "To think about an n by\nn by n Rubik's Cube, each side has area n squared.",
    "start": "1084390",
    "end": "1091420"
  },
  {
    "text": "So total surface\narea is 6 n squared. So there's, roughly, stata n\nsquared little cubies here.",
    "start": "1091420",
    "end": "1098718"
  },
  {
    "text": "So what do you think the right\n[INAUDIBLE] is for n by n by n? ",
    "start": "1098718",
    "end": "1106702"
  },
  {
    "text": "No guesses? ",
    "start": "1106702",
    "end": "1112095"
  },
  {
    "text": "AUDIENCE: n cubed? PROFESSOR: n cubed? Reasonable guess. But wrong.",
    "start": "1112095",
    "end": "1118045"
  },
  {
    "text": "It's an upper bounds. Why n cubed? ",
    "start": "1118045",
    "end": "1123432"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. ",
    "start": "1123432",
    "end": "1128834"
  },
  {
    "text": "PROFESSOR: Oh, you're\nguessing based on the numbers. Yeah. The numbers are\nmisleading, unfortunately. It's the law of small\nnumbers I guess.",
    "start": "1128834",
    "end": "1136466"
  },
  {
    "text": "It doesn't really look right. I know the answer. I know the answer\nbecause we just",
    "start": "1136466",
    "end": "1142010"
  },
  {
    "text": "wrote a paper with the answer. This is a new result.\nFrom this summer. But I'm curious.",
    "start": "1142010",
    "end": "1148330"
  },
  {
    "text": "To me the obvious answer is\nn squared because there's about n squared cubies. And it's not so hard to show\nin a constant number moves",
    "start": "1148330",
    "end": "1155340"
  },
  {
    "text": "you can solve a constant\nnumber of cubies. If you think about the\ngeneral algorithms,",
    "start": "1155340",
    "end": "1160760"
  },
  {
    "text": "like if you've ever\nlooked up professor's cube and how to solve it,\nyou're doing like 10 moves, and then maybe you\nswap two cubies",
    "start": "1160760",
    "end": "1167720"
  },
  {
    "text": "which you can use to\nsolve a couple of cubies in a constant number of moves. So n squared would be\nthe standard answer",
    "start": "1167720",
    "end": "1176400"
  },
  {
    "text": "if you're following\nstandard algorithms. But it turns out, you can\ndo a little bit better. And the right answer is n\nsquared divided by log n.",
    "start": "1176400",
    "end": "1183350"
  },
  {
    "text": "I think it's cool. Hopefully, you guys\ncan appreciate that. Not a lot of people can\nappreciate n squared divided",
    "start": "1183350",
    "end": "1188980"
  },
  {
    "text": "by log n, but here in\nalgorithms, we're all about n squared over log n. ",
    "start": "1188980",
    "end": "1197770"
  },
  {
    "text": "If you're interested, the\npaper's on my website. I think its called, Algorithms\nFor Solving Rubik's Cubes.",
    "start": "1197770",
    "end": "1203590"
  },
  {
    "text": "There's a constant there. Current constant is not so good. Let's say it's in the millions. [LAUGHTER]",
    "start": "1203590",
    "end": "1211759"
  },
  {
    "text": "You've got to start somewhere.  The next open problem\nwill be to improve",
    "start": "1211760",
    "end": "1217420"
  },
  {
    "text": "that constant to\nsomething reasonable that maybe is close to 20. But we're far from that.",
    "start": "1217420",
    "end": "1225250"
  },
  {
    "start": "1223000",
    "end": "1435000"
  },
  {
    "text": "Let's talk about\ngraph representation. ",
    "start": "1225250",
    "end": "1231289"
  },
  {
    "text": "Before we can talk\nabout exporting a graph, we need to know what\nwe're given as input.",
    "start": "1231289",
    "end": "1236679"
  },
  {
    "text": "And there's basically one\nstandard representation and a bunch of variations of it.",
    "start": "1236680",
    "end": "1243510"
  },
  {
    "text": "And they're called\nadjacency lists.  So the idea with\nan adjacency list,",
    "start": "1243510",
    "end": "1249720"
  },
  {
    "text": "is you have an array\ncalled Adj, for adjacency",
    "start": "1249720",
    "end": "1258435"
  },
  {
    "text": "of size V. Each\nelement in the array is a pointer to a linked list.",
    "start": "1258436",
    "end": "1263735"
  },
  {
    "text": " And the idea is that this\narray is indexed by a vertex.",
    "start": "1263735",
    "end": "1272260"
  },
  {
    "start": "1272260",
    "end": "1278960"
  },
  {
    "text": "So we're imagining\na world where we can index arrays by vertices. So maybe, you just\nlabel your vertices",
    "start": "1278960",
    "end": "1285960"
  },
  {
    "text": "zero through v minus 1. Then that's a regular array. Or, if you want\nto get fancy, you",
    "start": "1285960",
    "end": "1291802"
  },
  {
    "text": "can think of a vertex as an\narbitrary hashable thing, and Adj is actually\na hash table.",
    "start": "1291802",
    "end": "1297700"
  },
  {
    "text": "And that's how you\nprobably do it in Python. Maybe your vertices are\nobjects, and this is just",
    "start": "1297700",
    "end": "1302910"
  },
  {
    "text": "hashing based on the\naddress of the object. But we're not going\nto worry about that. We're just going\nto write Adj of u.",
    "start": "1302910",
    "end": "1308370"
  },
  {
    "text": "Assume that somehow you\ncan get to the linked list corresponding to that vertex. ",
    "start": "1308370",
    "end": "1320679"
  },
  {
    "text": "And the idea is,\nfor every vertex we just store its\nneighbors, namely",
    "start": "1320680",
    "end": "1326260"
  },
  {
    "text": "the vertices you can\nreach by one step from u. So I'm going to define that\na little more formally.",
    "start": "1326260",
    "end": "1333150"
  },
  {
    "text": "Adj of u is going to be\nthe set of all vertices, V, such that u, v is an edge.",
    "start": "1333150",
    "end": "1342429"
  },
  {
    "start": "1342430",
    "end": "1351320"
  },
  {
    "text": "So if I have a vertex\nlike b, Adj of b is going to be both a\nand c because in one step",
    "start": "1351320",
    "end": "1358684"
  },
  {
    "text": "there are outgoing edges\nfrom b to a and b to c. So Adj of b is a, c.",
    "start": "1358685",
    "end": "1364730"
  },
  {
    "start": "1364730",
    "end": "1372260"
  },
  {
    "text": "In that graph. I should have labeled the\nvertices something different. Adj of a is going to be\njust c because you can't",
    "start": "1372260",
    "end": "1382670"
  },
  {
    "text": "get with one step from a to b. The edge is in the\nwrong direction.",
    "start": "1382670",
    "end": "1388080"
  },
  {
    "text": "And Adj of c is b.",
    "start": "1388080",
    "end": "1393240"
  },
  {
    "text": " I think that definition's\npretty clear.",
    "start": "1393240",
    "end": "1399260"
  },
  {
    "text": "For undirected graphs,\nyou just put braces here. Which means you store--",
    "start": "1399260",
    "end": "1404710"
  },
  {
    "text": "I mean, it's the same thing. Here Adj of c is going\nto be a, b, and d, as you can get in one step from c to\na, from c to b, from c to d.",
    "start": "1404710",
    "end": "1413200"
  },
  {
    "text": "For pretty much every-- At least for graph\nexploration problems, this is the\nrepresentation you want.",
    "start": "1413200",
    "end": "1418580"
  },
  {
    "text": "Because you're at some\nvertex, and you want to know, where can I go next. And Adj of that vertex tells you\nexactly where you can go next.",
    "start": "1418580",
    "end": "1424560"
  },
  {
    "text": "So this is what you want. ",
    "start": "1424560",
    "end": "1430029"
  },
  {
    "text": "There's a lot of different\nways to actually implement adjacency lists.",
    "start": "1430030",
    "end": "1436540"
  },
  {
    "start": "1435000",
    "end": "1835000"
  },
  {
    "text": "I've talked about two of them. You could have the vertices\nlabeled zero to v minus 1,",
    "start": "1436540",
    "end": "1442720"
  },
  {
    "text": "and then this is,\nliterally, an array. And you have-- I guess I should draw.",
    "start": "1442720",
    "end": "1448460"
  },
  {
    "text": "In this picture,\nAdj is an array.",
    "start": "1448460",
    "end": "1453730"
  },
  {
    "text": "So you've got a, b, and c. Each one of them is a\npointer to a linked list.",
    "start": "1453730",
    "end": "1460490"
  },
  {
    "text": "This one's actually going\nto be a, c, and we're done.",
    "start": "1460490",
    "end": "1467510"
  },
  {
    "text": "Sorry, that was b. Who said it had to be\nalphabetical order?",
    "start": "1467510",
    "end": "1473519"
  },
  {
    "text": "A is a pointer to c,\nc is a pointer to b. That's explicitly how\nyou might represent it.",
    "start": "1473520",
    "end": "1480570"
  },
  {
    "text": "This might be a hash\ntable instead of an array, if you have weirder vertices.",
    "start": "1480570",
    "end": "1485870"
  },
  {
    "text": "You can also do it in a more\nobject-oriented fashion. ",
    "start": "1485870",
    "end": "1495590"
  },
  {
    "text": "For every vertex, v, you can\nmake the vertices objects, and v dot neighbors\ncould store what",
    "start": "1495590",
    "end": "1505929"
  },
  {
    "text": "we're defining over\nthere to be Adj of v. This would be the more\nobject-oriented way to do it",
    "start": "1505930",
    "end": "1513630"
  },
  {
    "text": "I've thought a lot about\nthis, and I like this, and usually when I implement\ngraphs this is what I do.",
    "start": "1513630",
    "end": "1519010"
  },
  {
    "text": "But it is actually convenient\nto have this representation. There's a reason the textbook\nuses this representation.",
    "start": "1519010",
    "end": "1525664"
  },
  {
    "text": "Because, if you've already\ngot some vertices lying around and you want to have multiple\ngraphs on those vertices,",
    "start": "1525665",
    "end": "1531150"
  },
  {
    "text": "this lets you do that. You can define multiple Adj\narrays, one for graph one, one",
    "start": "1531150",
    "end": "1537934"
  },
  {
    "text": "for graph two, one\nfor graph three but they can all talk\nabout the same vertices. Whereas here, vertex can\nonly belong to one graph.",
    "start": "1537934",
    "end": "1545410"
  },
  {
    "text": "It can only have one\nneighbor structure that says what happens. If you're only dealing\nwith one graph,",
    "start": "1545410",
    "end": "1551000"
  },
  {
    "text": "this is probably cleaner. But with multiple graphs, which\nwill happen even in this class,",
    "start": "1551000",
    "end": "1556220"
  },
  {
    "text": "adjacency lists are\nkind of the way to go. You can also do\nimplicitly-represented graphs.",
    "start": "1556220",
    "end": "1562450"
  },
  {
    "start": "1562450",
    "end": "1573580"
  },
  {
    "text": "Which would be to say,\nAdj of u is a function.",
    "start": "1573580",
    "end": "1580595"
  },
  {
    "text": " Or v dot neighbors is a\nmethod of the vertex class.",
    "start": "1580595",
    "end": "1596659"
  },
  {
    "text": "Meaning, it's not just\nstored there explicitly. Whenever you need it,\nyou call this function and it computes what you want.",
    "start": "1596660",
    "end": "1605500"
  },
  {
    "text": "This is useful because\nit uses less space. You could say this uses\nzero space or maybe v space.",
    "start": "1605500",
    "end": "1612030"
  },
  {
    "text": "One for each vertex. It depends. Maybe you don't even need\nto explicitly represent all the vertices.",
    "start": "1612030",
    "end": "1618080"
  },
  {
    "text": "You start with some vertex,\nand given a vertex, somehow",
    "start": "1618080",
    "end": "1623500"
  },
  {
    "text": "you know how to compute, let's\nsay in constant time or linear time or something, the\nneighbors of that vertex.",
    "start": "1623500",
    "end": "1630270"
  },
  {
    "text": "And then from\nthere, you can keep searching, keep\ncomputing neighbors, until you find what you want. Maybe you don't have to\nbuild the whole graph,",
    "start": "1630270",
    "end": "1636506"
  },
  {
    "text": "you just need to build enough of\nit until you find your answer. Whatever answer\nyou're searching for. Can you think of a situation\nwhere that might be the case?",
    "start": "1636506",
    "end": "1643850"
  },
  {
    "text": " Where implicit representation\nwould be a good idea?",
    "start": "1643850",
    "end": "1649330"
  },
  {
    "text": "Yes. Rubik's Cubes. They're really good. I never want to\nbuild this space. It has a bajillion states.",
    "start": "1649330",
    "end": "1656060"
  },
  {
    "text": "A bajillion vertices. It would take forever. There's more\nconfigurations of this cube",
    "start": "1656060",
    "end": "1661580"
  },
  {
    "text": "than there are particles\nin the known universe. I just computed that in my head.",
    "start": "1661580",
    "end": "1667700"
  },
  {
    "text": "[LAUGHTER] I have done this\ncomputation recently, and for five by five by five\nit's like 10 to the 40 states.",
    "start": "1667701",
    "end": "1675620"
  },
  {
    "text": "Or 10 to the 40, 10 to the 60. There's about 10 to the\n80 particles in the known universe.",
    "start": "1675620",
    "end": "1680940"
  },
  {
    "text": "10 to the 83 or something. So this is probably\n10 to the 200 or so.",
    "start": "1680940",
    "end": "1686750"
  },
  {
    "text": "It's a lot. You never want to build that. But, it's very easy to\nrepresent this state.",
    "start": "1686750",
    "end": "1691820"
  },
  {
    "text": "Just store where\nall the cubies are. And it's very easy to see what\nare all the configurations you can reach in one move.",
    "start": "1691820",
    "end": "1697640"
  },
  {
    "text": "Just try this move, try\nthis move, try this move. Put it back and\ntry the next move. And so on.",
    "start": "1697640",
    "end": "1702870"
  },
  {
    "text": " For an m by n by\nn cube in order n time, you can list all\nthe order n next states.",
    "start": "1702870",
    "end": "1710210"
  },
  {
    "text": "You can list all the\norder n neighbors. And so you can keep exploring,\nsearching for your state.",
    "start": "1710210",
    "end": "1715224"
  },
  {
    "text": "Now you don't want to explore\ntoo far for that cube, but at least you're\nnot hosed just",
    "start": "1715224",
    "end": "1721020"
  },
  {
    "text": "from the problem of\nrepresenting the graph. So even for two by\ntwo by two, it's",
    "start": "1721020",
    "end": "1726029"
  },
  {
    "text": "useful to do this\nmostly to save space. You're not really saving time. But you'd like to not have to\nstore all 264 million states",
    "start": "1726030",
    "end": "1734960"
  },
  {
    "text": "because it's going to be several\ngigabytes and it's annoying.",
    "start": "1734960",
    "end": "1741850"
  },
  {
    "text": "Speaking of space-- ignoring\nthe implicit representation-- how much space does this\nrepresentation require?",
    "start": "1741850",
    "end": "1748755"
  },
  {
    "start": "1748755",
    "end": "1759820"
  },
  {
    "text": "V plus E. This Is going\nto be the bread and butter of our graph algorithms. Most of the things we're going\nto talk about achieve V plus E",
    "start": "1759820",
    "end": "1767150"
  },
  {
    "text": "time. This is essentially optimal. It's linear in the\nsize of your graph.",
    "start": "1767150",
    "end": "1772162"
  },
  {
    "text": "You've got V vertices, E edges. Technically, in\ncase you're curious, this is really the size\nof V plus the size of E.",
    "start": "1772162",
    "end": "1780560"
  },
  {
    "text": "But in the textbook, and\nI guess in the world, we just omit those sizes of\nwhenever they're in a theta",
    "start": "1780560",
    "end": "1786980"
  },
  {
    "text": "notation or Big O notation. So number vertices\nplus number of edges. that sort of the\nbare minimum you",
    "start": "1786980",
    "end": "1792304"
  },
  {
    "text": "need if you want an explicit\nrepresentation of the graph. And we achieve\nthat because we've got we've got v space just to\nstore the vertices in an array.",
    "start": "1792304",
    "end": "1800880"
  },
  {
    "text": "And then if you add up-- Each of these is an edge.",
    "start": "1800880",
    "end": "1806677"
  },
  {
    "text": "You have to be a little careful. In undirected graphs, each\nof these is a half edge. So there's actually two\ntimes e nodes over here.",
    "start": "1806677",
    "end": "1815340"
  },
  {
    "text": "But it's theta E.\nSo theta V plus E is the amount of space we need.",
    "start": "1815340",
    "end": "1822140"
  },
  {
    "text": "And ideally, all our algorithms\nwill run in this much time. Because that's what you need\njust to look at the graph.",
    "start": "1822140",
    "end": "1828549"
  },
  {
    "start": "1828550",
    "end": "1866710"
  },
  {
    "start": "1835000",
    "end": "2695000"
  },
  {
    "text": "So let's do an actual algorithm,\nwhich is breadth-first search. ",
    "start": "1866710",
    "end": "1874919"
  },
  {
    "text": "So to the simplest algorithm\nyou can think of in graphs. I've already outlined\nit several times.",
    "start": "1874920",
    "end": "1881090"
  },
  {
    "text": "You start at some node. You look at all the nodes\nyou can get to from there. You look at all the nodes\nyou can get to from there.",
    "start": "1881090",
    "end": "1886976"
  },
  {
    "text": "Keep going until you're done. So this is going to explore\nall of the vertices that",
    "start": "1886976",
    "end": "1892110"
  },
  {
    "text": "are reachable from a node.  The challenge-- The\none annoying thing",
    "start": "1892110",
    "end": "1899270"
  },
  {
    "text": "about breadth-first search\nand why this is not trivial is that there can\nbe some edges that",
    "start": "1899270",
    "end": "1904280"
  },
  {
    "text": "go sort of backwards, like\nthat, to some previous layer.",
    "start": "1904280",
    "end": "1912340"
  },
  {
    "text": "Actually, that's\nnot true, is it? ",
    "start": "1912340",
    "end": "1918090"
  },
  {
    "text": "This can't happen. You see why? Because if that edge\nexisted, then from this node",
    "start": "1918090",
    "end": "1926280"
  },
  {
    "text": "you'd be able to get here. So in an undirected\ngraph, that can't happen. In a directed graph,\nyou could conceivably",
    "start": "1926280",
    "end": "1932520"
  },
  {
    "text": "have a back edge like that. You'd have to realize, oh,\nthat's a vertex I've already seen, I don't want to put\nit here, even though it's",
    "start": "1932520",
    "end": "1939450"
  },
  {
    "text": "something I can\nreach from this node, because I've already been there. We've got to worry\nabout things like that.",
    "start": "1939450",
    "end": "1944710"
  },
  {
    "text": " That's, I guess, the main\nthing to worry about.",
    "start": "1944710",
    "end": "1949970"
  },
  {
    "text": " So our goal is to\nvisit all the nodes--",
    "start": "1949970",
    "end": "1956615"
  },
  {
    "text": " the vertices-- reachable\nfrom given node, s.",
    "start": "1956615",
    "end": "1967554"
  },
  {
    "text": " We want to achieve\nV plus E time.",
    "start": "1967555",
    "end": "1974720"
  },
  {
    "start": "1974720",
    "end": "1980190"
  },
  {
    "text": "And the idea is to look\nat the nodes that are",
    "start": "1980190",
    "end": "1990529"
  },
  {
    "text": "reachable first in zero moves.",
    "start": "1990530",
    "end": "1995780"
  },
  {
    "text": "Zero moves. That's s.  Then in one move.",
    "start": "1995780",
    "end": "2003480"
  },
  {
    "text": "Well that's everything you\ncan reach from s in one step. That's adjacency of s.",
    "start": "2003480",
    "end": "2009430"
  },
  {
    "text": "And then two moves,\nand three moves, and so on until we run out of graph.",
    "start": "2009430",
    "end": "2016910"
  },
  {
    "text": "But we need to be careful\nto avoid duplicates.",
    "start": "2016910",
    "end": "2027800"
  },
  {
    "text": "We want to avoid\nrevisiting vertices for a couple of reasons. One is if we didn't, we\nwould spend infinite time.",
    "start": "2027800",
    "end": "2035110"
  },
  {
    "text": "Because we'd just go\nthere and come back, and go there and come back. As long as there's\nat least one cycle, you're going to keep\ngoing around the cycle",
    "start": "2035110",
    "end": "2040920"
  },
  {
    "text": "forever and ever if you don't\ntry to avoid duplicates.  So let me write down some\ncode for this algorithm.",
    "start": "2040920",
    "end": "2047790"
  },
  {
    "text": "It's pretty straightforward. So straightforward, we\ncan be completely explicit and write pseudocode.",
    "start": "2047790",
    "end": "2053829"
  },
  {
    "text": " There's a few different ways\nto implement this algorithm.",
    "start": "2053830",
    "end": "2061199"
  },
  {
    "text": "I'll show you my favorite. The textbook has a\ndifferent favorite. ",
    "start": "2061199",
    "end": "2082040"
  },
  {
    "text": "I'm going to write in\npure Python, I believe. ",
    "start": "2082040",
    "end": "2157370"
  },
  {
    "text": "Almost done. ",
    "start": "2157370",
    "end": "2190650"
  },
  {
    "text": "I think I got that right. So this is at the end\nof the while-loop.",
    "start": "2190650",
    "end": "2196594"
  },
  {
    "text": "And at that point\nwe should be done. We can do an actual\nexample, maybe. ",
    "start": "2196594",
    "end": "2236609"
  },
  {
    "text": "I'm going to do it on\nan undirected graph, but this algorithm works just as\nwell on directed and undirected",
    "start": "2236610",
    "end": "2242470"
  },
  {
    "text": "graphs. ",
    "start": "2242470",
    "end": "2248330"
  },
  {
    "text": "There's an undirected graph. We're given some\nstart vertex, s,",
    "start": "2248330",
    "end": "2254890"
  },
  {
    "text": "and we're given\nthe graph by being given the adjacency lists. So you could iterate over\nthe vertices of that thing.",
    "start": "2254890",
    "end": "2262600"
  },
  {
    "text": "Given a vertex, you\ncan list all the edges you can reach in one step. And then the top\nof the algorithm's",
    "start": "2262600",
    "end": "2268570"
  },
  {
    "text": "just some initialization. The basic structure-- We have this thing called the\nfrontier, which is what we just",
    "start": "2268570",
    "end": "2275890"
  },
  {
    "text": "reached on the previous level. I think that's going to\nbe level i minus one.",
    "start": "2275890",
    "end": "2284480"
  },
  {
    "text": "Just don't want to\nmake an index error.  These are going to be all the\nthings you can reach using",
    "start": "2284480",
    "end": "2291920"
  },
  {
    "text": "exactly i minus one moves. And then next is going\nto be all the things",
    "start": "2291920",
    "end": "2297020"
  },
  {
    "text": "you can reach in i moves.  So to get started,\nwhat we know is s.",
    "start": "2297020",
    "end": "2304976"
  },
  {
    "text": "s is what you can\nreach in zero moves. So we set the level\nof s to be zero.",
    "start": "2304976",
    "end": "2311540"
  },
  {
    "text": "That's the first\nline of the code. There's this other\nthing called the parent. We'll worry about that later.",
    "start": "2311540",
    "end": "2316650"
  },
  {
    "text": "It's optional. It gives us some\nother fun structure. We set i to be one because\nwe just finished level zero.",
    "start": "2316650",
    "end": "2324950"
  },
  {
    "text": "Frontier of what you can reach\nin level zero is just s itself. So we're going to\nput that on the list.",
    "start": "2324950",
    "end": "2331560"
  },
  {
    "text": "That is level zero. i equals\none So one minus one is zero. All good. And then we're going to iterate.",
    "start": "2331560",
    "end": "2337810"
  },
  {
    "text": "And this is going\nto be looking at-- The end of the iteration\nis to increment i. So you could also\ncall this a for-loop",
    "start": "2337810",
    "end": "2343930"
  },
  {
    "text": "except we don't know\nwhen it's going to end. So it's easier to\nthink of i incrementing",
    "start": "2343930",
    "end": "2349020"
  },
  {
    "text": "each step not knowing\nwhen we're going to stop. We're going to stop whenever\nwe run out of nodes. So whenever frontier\nis a non-empty list.",
    "start": "2349020",
    "end": "2356786"
  },
  {
    "text": "the bulk of the work\nhere is computing what the next level is. That's called next. It's going to be level i.",
    "start": "2356787",
    "end": "2362330"
  },
  {
    "text": "We do some computation. Eventually we have\nwhat's on the next level. Then we set frontier next.",
    "start": "2362330",
    "end": "2368172"
  },
  {
    "text": "Because that's our new level. We increment i, and then\ninvariant of frontier being level i minus 1 is preserved.",
    "start": "2368172",
    "end": "2375641"
  },
  {
    "text": "Right after here. And then we just keep going\ntill we run out of nodes. How do we compute next?",
    "start": "2375642",
    "end": "2382230"
  },
  {
    "text": "Well, we look at every\nnode in the frontier, and we look at all the nodes\nyou can reach from those nodes.",
    "start": "2382230",
    "end": "2387660"
  },
  {
    "text": "So every node, u, in the\nfrontier and then we look at-- So this means there\nis an edge from u",
    "start": "2387660",
    "end": "2393109"
  },
  {
    "text": "to v through the picture. We look at all the edges\nfrom all the frontier nodes",
    "start": "2393110",
    "end": "2398520"
  },
  {
    "text": "where you can go. And then the key thing is\nwe check for duplicates. We see, have we seen\nthis node before?",
    "start": "2398520",
    "end": "2404830"
  },
  {
    "text": "If we have, we would have set\nit's level to be something. If we haven't seen\nit, it will not",
    "start": "2404830",
    "end": "2409870"
  },
  {
    "text": "be in the level hash table\nor the level dictionary. And so if it's not in\nthere, we'll put it in there",
    "start": "2409870",
    "end": "2418349"
  },
  {
    "text": "and add it to the next layer. So that's how you\navoid duplicates. You set its level to make sure\nyou will never visit it again,",
    "start": "2418350",
    "end": "2425890"
  },
  {
    "text": "you add it to the next frontier,\nyou iterate, you're done. ",
    "start": "2425890",
    "end": "2431359"
  },
  {
    "text": "This is one version\nof what you might call a breadth-first search. And it achieves\nthis goal, visiting all the nodes reachable\nfrom s, in linear time.",
    "start": "2431359",
    "end": "2439220"
  },
  {
    "text": "Let's see how it works\non a real example. So first frontier is this thing. ",
    "start": "2439220",
    "end": "2446670"
  },
  {
    "text": "Frontier just has the node\ns, so we just look at s, and we look at all\nthe edges from s. We get a and x.",
    "start": "2446670",
    "end": "2452440"
  },
  {
    "text": "So those get added\nto the next frontier. Maybe before I go too\nfar, let me switch colors.",
    "start": "2452440",
    "end": "2461040"
  },
  {
    "text": " Multimedia here.",
    "start": "2461040",
    "end": "2468079"
  },
  {
    "text": "So here's level one. All of these guys, we're going\nto set their level to one.",
    "start": "2468080",
    "end": "2477270"
  },
  {
    "text": "They can be reached in one step. That's pretty clear. So now frontier is a and x.",
    "start": "2477270",
    "end": "2482570"
  },
  {
    "text": "That's what next becomes. Then frontier becomes next. And so we look at\nall the edges from a.",
    "start": "2482570",
    "end": "2488510"
  },
  {
    "text": "That's going to be s and z. s, we've already looked at,\nit already has a level set,",
    "start": "2488510",
    "end": "2493730"
  },
  {
    "text": "so we ignore that. So we look at z. Z does not have a\nlevel indicated here, so we're going to set\nit to i which happens",
    "start": "2493730",
    "end": "2500300"
  },
  {
    "text": "to be two at this point. And we look at x. It has neighbors s, d, and c. We look at s again.",
    "start": "2500300",
    "end": "2506329"
  },
  {
    "text": "We say, oh, we've already\nseen that yet again. So we're worried about\nthis taking a lot of time because we look at s\nthree times in total.",
    "start": "2506330",
    "end": "2514090"
  },
  {
    "text": "Then we look at d. d hasn't been set, so we set\nit to two. c hasn't been set,",
    "start": "2514090",
    "end": "2519240"
  },
  {
    "text": "so we set it to two. So the frontier at\nlevel two is that.",
    "start": "2519240",
    "end": "2525945"
  },
  {
    "text": "Then we look at all\nthe neighbors of z. There's a. a's already been set. Look at all the neighbors of d. There's x.",
    "start": "2525945",
    "end": "2531370"
  },
  {
    "text": "There's c. Those have been set. There's f. This one gets added.",
    "start": "2531370",
    "end": "2536440"
  },
  {
    "text": "Then we look at c. There's x. That's been done. d's been done. f's been done. v has not been done.",
    "start": "2536440",
    "end": "2543369"
  },
  {
    "text": "So this becomes a\nfrontier at level three. Then we look at level three.",
    "start": "2543370",
    "end": "2548930"
  },
  {
    "text": "There's f. D's been done, c's been\ndone, b's been done. We look at v. c's been\ndone. f's been done.",
    "start": "2548930",
    "end": "2554530"
  },
  {
    "text": "Nothing to add to next. Next becomes empty. Frontier becomes empty. The while-loop finishes. TA DA!",
    "start": "2554530",
    "end": "2560760"
  },
  {
    "text": "We've computed-- we've\nvisited all the vertices. Question. AUDIENCE: [INAUDIBLE]. ",
    "start": "2560760",
    "end": "2571325"
  },
  {
    "text": "What notation? PROFESSOR: This is\nPython notation. You may have heard of Python.",
    "start": "2571325",
    "end": "2576859"
  },
  {
    "text": "This is a dictionary\nwhich has one key value, s, and has one value, zero.",
    "start": "2576860",
    "end": "2583720"
  },
  {
    "text": "So you could-- That's shorthand in Python for-- Usually you have a\ncomma separated list.",
    "start": "2583720",
    "end": "2590440"
  },
  {
    "text": "The colon is specifying\nkey value pairs. ",
    "start": "2590440",
    "end": "2597300"
  },
  {
    "text": "I didn't talk about parent. We can do that for a little bit.",
    "start": "2597300",
    "end": "2603310"
  },
  {
    "text": "So parent we're initializing to\nsay, the parent of s is nobody, and then whenever we\nvisit a new vertex,",
    "start": "2603310",
    "end": "2610890"
  },
  {
    "text": "v, we set its parent to be\nthe vertex that we came from. So we had this vertex,\nv. We had an edge",
    "start": "2610890",
    "end": "2616650"
  },
  {
    "text": "to v from some vertex, u. We set the parent of v to be u. So let me add in\nwhat that becomes.",
    "start": "2616650",
    "end": "2624140"
  },
  {
    "text": "I'll change colors yet again. Although it gets hard to\nsee any color but red.",
    "start": "2624140",
    "end": "2631820"
  },
  {
    "text": "So we have s. When we visited a, then the\nparent of a would become s.",
    "start": "2631820",
    "end": "2640810"
  },
  {
    "text": "When we visited z, the\nparent of z would be a. Parent of x is going to be s.",
    "start": "2640810",
    "end": "2647640"
  },
  {
    "text": "Parent of d is going to be x. The parent of c\nis going to be x.",
    "start": "2647640",
    "end": "2652765"
  },
  {
    "text": "The parent of f-- it could have been either\nway, but the way I did it, d went first, and so\nthat became its parent.",
    "start": "2652765",
    "end": "2661200"
  },
  {
    "text": "And I think for v,\nc was its parent. So that's what the parent\npointers will look like.",
    "start": "2661200",
    "end": "2667410"
  },
  {
    "text": "They always follow edges. They actually follow\nedges backwards. If this was a directed\ngraph, the graph",
    "start": "2667410",
    "end": "2672620"
  },
  {
    "text": "might be directed that way\nbut the parent pointers go back along the edges. So it's a way to return.",
    "start": "2672620",
    "end": "2678390"
  },
  {
    "text": "It's a way to return to s. If you follow these pointers,\nall roads lead to s.",
    "start": "2678390",
    "end": "2684580"
  },
  {
    "text": " Because we started at s,\nthat's the property we have.",
    "start": "2684580",
    "end": "2690549"
  },
  {
    "text": "In fact, these pointers\nalways form a tree, and the root of the tree is s.",
    "start": "2690550",
    "end": "2696280"
  },
  {
    "start": "2695000",
    "end": "3047000"
  },
  {
    "text": "In fact, these pointers form\nwhat are called shortest paths. Let me write down a\nlittle bit about this.",
    "start": "2696280",
    "end": "2705730"
  },
  {
    "start": "2705730",
    "end": "2719970"
  },
  {
    "text": "Shortest path properties. ",
    "start": "2719970",
    "end": "2745910"
  },
  {
    "text": "If you take a node, and\nyou take its parent,",
    "start": "2745910",
    "end": "2751400"
  },
  {
    "text": "and you take the\nparent of the parent, and so on, eventually\nyou get to s.",
    "start": "2751400",
    "end": "2756599"
  },
  {
    "text": "And if you read it\nbackwards, that will actually be a path in the graph.",
    "start": "2756600",
    "end": "2761880"
  },
  {
    "text": "And it will be a shortest\npath, in the graph,",
    "start": "2761880",
    "end": "2769420"
  },
  {
    "text": "from s to v.\nMeaning, if you look",
    "start": "2769420",
    "end": "2774609"
  },
  {
    "text": "at all paths in the graph\nthat go from s to v-- So say we're going from\ns to v, how about that,",
    "start": "2774610",
    "end": "2781460"
  },
  {
    "text": "we compute this path out of BFS. Which is, follow a\nparent of v is c, parent of c is x, parent of x is s.",
    "start": "2781460",
    "end": "2787670"
  },
  {
    "text": "Read it backwards. That gives us a\npath from s to v. The claim is, that\nis the shortest way to get from s to v. It\nmight not be the only one.",
    "start": "2787670",
    "end": "2795420"
  },
  {
    "text": "Like if you're going from s\nto f, there's two short paths. There's this one\nof length three. There's this one\nof length three..",
    "start": "2795420",
    "end": "2802160"
  },
  {
    "text": "Uses three edges. Same length. And in the parent\npointers, we can only afford to encode\none of those paths",
    "start": "2802160",
    "end": "2808640"
  },
  {
    "text": "because in general there might\nbe exponentially many ways to get from one node to another. We find a shortest path, not\nnecessarily the only one.",
    "start": "2808640",
    "end": "2816940"
  },
  {
    "text": "And the length of that path-- So shortest here means that\nyou use the fewest edges.",
    "start": "2816940",
    "end": "2823750"
  },
  {
    "text": "And the length will\nbe level of v. That's what we're keeping track of.",
    "start": "2823750",
    "end": "2830729"
  },
  {
    "text": "If the level's zero, you can\nget there with zero steps. If the level's one, you\nget there with one steps. Because we're visiting\neverything you can possibly",
    "start": "2830729",
    "end": "2837143"
  },
  {
    "text": "get in k steps, the\nlevel is telling you what that shortest path distance is. And the parent\npointers are actually",
    "start": "2837143",
    "end": "2842910"
  },
  {
    "text": "giving you the shortest path. That's the cool thing about BFS. Yeah, BFS explores the vertices.",
    "start": "2842910",
    "end": "2848620"
  },
  {
    "text": "Sometimes, that's\nall you care about. But in some sense,\nwhat really matters, is it finds the shortest way to\nget from anywhere to anywhere.",
    "start": "2848620",
    "end": "2856200"
  },
  {
    "text": "For a Rubik's Cube,\nthat's nice because you run BFS from the start\nstate of the Rubik's Cube.",
    "start": "2856200",
    "end": "2863260"
  },
  {
    "text": "Then you say, oh,\nI'm in this state. You look up this state. You look at its level. It says, oh, you can\nget there in nine steps.",
    "start": "2863260",
    "end": "2870589"
  },
  {
    "text": "That's, I think, the average. So I'm guessing. I don't know how to\ndo this in nine steps. ",
    "start": "2870590",
    "end": "2878470"
  },
  {
    "text": "Great, so now you\nknow how to solve it. You just look at\nthe parent pointer. The parent pointer gives\nyou another configuration. You say, oh, what move was that?",
    "start": "2878470",
    "end": "2885030"
  },
  {
    "text": "And then you do that move. I'm not going to solve it. Then you look at the\nparent pointer of that. You do that move.",
    "start": "2885030",
    "end": "2890045"
  },
  {
    "text": "You look at the parent\npointer of that. You do that move. Eventually, you'll get\nto the solved state, and you will do it using\nthe fewest possible moves.",
    "start": "2890045",
    "end": "2896430"
  },
  {
    "text": "So if you can afford to put the\nwhole graph in memory, which you can't for a big Rubik's Cube\nbut you can for a small one,",
    "start": "2896430",
    "end": "2903450"
  },
  {
    "text": "then this will give you a\nstrategy, the optimal strategy, God's algorithm if you will,\nfor every configuration.",
    "start": "2903450",
    "end": "2912400"
  },
  {
    "text": "It solves all of them. Which is great. What is the running\ntime of this algorithm?",
    "start": "2912400",
    "end": "2917990"
  },
  {
    "text": "I claim it's order V plus E.\nBut it looked a little wasteful because it was checking\nvertices over and over and over.",
    "start": "2917990",
    "end": "2925300"
  },
  {
    "text": "But if you think\nabout it carefully, you're only looking-- what's the right\nway to say this--",
    "start": "2925300",
    "end": "2931270"
  },
  {
    "text": "you only check every edge once. Or in undirected graphs,\nyou check them twice,",
    "start": "2931270",
    "end": "2937500"
  },
  {
    "text": "once from each side. A vertex enters the\nfrontier only once.",
    "start": "2937500",
    "end": "2944290"
  },
  {
    "text": "Because once it's in the\nfrontier, it gets a level set. And once it has a level set,\nit'll never go in again.",
    "start": "2944290",
    "end": "2951450"
  },
  {
    "text": "It'll never get added to next. So s gets added once then we\ncheck all the neighbors of s.",
    "start": "2951450",
    "end": "2957440"
  },
  {
    "text": "a gets added once, then we\ncheck all the neighbors of a. Each of these guys\ngets added once. We check all the neighbors.",
    "start": "2957440",
    "end": "2962950"
  },
  {
    "text": "So the total running\ntime is going to be the sum over all\nvertices of the size of the adjacency list of v. So\nthis is the number of neighbors",
    "start": "2962950",
    "end": "2973530"
  },
  {
    "text": "that v has. And this is going to be? Answer? ",
    "start": "2973530",
    "end": "2982336"
  },
  {
    "text": "AUDIENCE: Two times\nthe number of edges. PROFESSOR: Sorry AUDIENCE: Double\nthe number of edges. PROFESSOR: Twice the number of\nedges for undirected graphs.",
    "start": "2982336",
    "end": "2988930"
  },
  {
    "text": "It's going to be the number\nof edges for directed graphs. This is the Handshaking Lemma. If you don't remember\nthe Handshaking Lemma,",
    "start": "2988930",
    "end": "2994670"
  },
  {
    "text": "you should read the textbook. Six o four two stuff. ",
    "start": "2994670",
    "end": "3003300"
  },
  {
    "text": "Basically you visit\nevery edge twice. For directed graphs, you\nvisit every edge once.",
    "start": "3003300",
    "end": "3010870"
  },
  {
    "text": "But it's order E. We\nalso spend order V because we touch every vertex. So the total running\ntime is order V plus E.",
    "start": "3010870",
    "end": "3018770"
  },
  {
    "text": "In fact, the way this is going,\nyou can be a little tighter and say it's order E. I just\nwant to mention in reality--",
    "start": "3018770",
    "end": "3026827"
  },
  {
    "text": "Sometimes you don't care about\njust what you can reach from s, you really want to\nvisit every vertex. Then you need another\nouter loop that's",
    "start": "3026827",
    "end": "3033710"
  },
  {
    "text": "iterating over all the vertices\nas potential choices for s. And you then can visit all the\nvertices in the entire graph",
    "start": "3033710",
    "end": "3041160"
  },
  {
    "text": "even if it's disconnected. We'll talk more about\nthat next class. That's it for BFS.",
    "start": "3041160",
    "end": "3046607"
  },
  {
    "start": "3046607",
    "end": "3047107"
  }
]