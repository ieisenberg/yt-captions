[
  {
    "start": "0",
    "end": "500"
  },
  {
    "text": "So, how can the memory system\narrange for the right data",
    "start": "500",
    "end": "3930"
  },
  {
    "text": "to be in the right\nplace at the right time?",
    "start": "3930",
    "end": "7060"
  },
  {
    "text": "Our goal is to have the\nfrequently-used data",
    "start": "7060",
    "end": "9559"
  },
  {
    "text": "in some fast SRAM.",
    "start": "9560",
    "end": "12030"
  },
  {
    "text": "That means the\nmemory system will",
    "start": "12030",
    "end": "13630"
  },
  {
    "text": "have to be able to predict\nwhich memory locations will",
    "start": "13630",
    "end": "16340"
  },
  {
    "text": "be accessed.",
    "start": "16340",
    "end": "17770"
  },
  {
    "text": "And to keep the overhead\nof moving data into and out",
    "start": "17770",
    "end": "20270"
  },
  {
    "text": "of SRAM manageable, we’d like\nto amortize the cost of the move",
    "start": "20270",
    "end": "24040"
  },
  {
    "text": "over many accesses.",
    "start": "24040",
    "end": "25610"
  },
  {
    "text": "In other words we\nwant any block of data",
    "start": "25610",
    "end": "27520"
  },
  {
    "text": "we move into SRAM to\nbe accessed many times.",
    "start": "27520",
    "end": "31920"
  },
  {
    "text": "When not in SRAM, data would\nlive in the larger, slower DRAM",
    "start": "31920",
    "end": "36770"
  },
  {
    "text": "that serves as main memory.",
    "start": "36770",
    "end": "38580"
  },
  {
    "text": "If the system is\nworking as planned,",
    "start": "38580",
    "end": "40310"
  },
  {
    "text": "DRAM accesses would\nhappen infrequently, e.g.,",
    "start": "40310",
    "end": "43280"
  },
  {
    "text": "only when it’s time to\nbring another block of data",
    "start": "43280",
    "end": "45710"
  },
  {
    "text": "into SRAM.",
    "start": "45710",
    "end": "48239"
  },
  {
    "text": "If we look at how\nprograms access memory,",
    "start": "48240",
    "end": "50720"
  },
  {
    "text": "it turns out we *can* make\naccurate predictions about",
    "start": "50720",
    "end": "54500"
  },
  {
    "text": "which memory locations\nwill be accessed.",
    "start": "54500",
    "end": "58040"
  },
  {
    "text": "The guiding principle is\n“locality of reference” which",
    "start": "58040",
    "end": "61790"
  },
  {
    "text": "tells us that if there’s an\naccess to address X at time t,",
    "start": "61790",
    "end": "66090"
  },
  {
    "text": "it’s very probable that the\nprogram will access a nearby",
    "start": "66090",
    "end": "69310"
  },
  {
    "text": "location in the near future.",
    "start": "69310",
    "end": "71829"
  },
  {
    "text": "To understand why programs\nexhibit locality of reference,",
    "start": "71830",
    "end": "75380"
  },
  {
    "text": "let’s look at how a running\nprogram accesses memory.",
    "start": "75380",
    "end": "79789"
  },
  {
    "text": "Instruction fetches\nare quite predictable.",
    "start": "79790",
    "end": "82290"
  },
  {
    "text": "Execution usually\nproceeds sequentially",
    "start": "82290",
    "end": "84770"
  },
  {
    "text": "since most of the time\nthe next instruction is",
    "start": "84770",
    "end": "87250"
  },
  {
    "text": "fetched from the\nlocation after that",
    "start": "87250",
    "end": "89050"
  },
  {
    "text": "of the current instruction.",
    "start": "89050",
    "end": "91430"
  },
  {
    "text": "Code that loops will\nrepeatedly fetch",
    "start": "91430",
    "end": "93500"
  },
  {
    "text": "the same sequence\nof instructions, as",
    "start": "93500",
    "end": "95650"
  },
  {
    "text": "shown here on the\nleft of the time line.",
    "start": "95650",
    "end": "99030"
  },
  {
    "text": "There will of course be branches\nand subroutine calls that",
    "start": "99030",
    "end": "101590"
  },
  {
    "text": "interrupt sequential execution,\nbut then we’re back to fetching",
    "start": "101590",
    "end": "104969"
  },
  {
    "text": "instructions from\nconsecutive locations.",
    "start": "104970",
    "end": "107720"
  },
  {
    "text": "Some programming\nconstructs, e.g.,",
    "start": "107720",
    "end": "109950"
  },
  {
    "text": "method dispatch in\nobject-oriented languages,",
    "start": "109950",
    "end": "112799"
  },
  {
    "text": "can produce scattered references\nto very short code sequences",
    "start": "112800",
    "end": "116370"
  },
  {
    "text": "(as shown on the right\nof the time line)",
    "start": "116370",
    "end": "118570"
  },
  {
    "text": "but order is quickly restored.",
    "start": "118570",
    "end": "121690"
  },
  {
    "text": "This agrees with our intuition\nabout program execution.",
    "start": "121690",
    "end": "125150"
  },
  {
    "text": "For example, once we execute\nthe first instruction",
    "start": "125150",
    "end": "127680"
  },
  {
    "text": "of a procedure, we’ll almost\ncertainly execute the remaining",
    "start": "127680",
    "end": "130410"
  },
  {
    "text": "instructions in the procedure.",
    "start": "130410",
    "end": "132500"
  },
  {
    "text": "So if we arranged for all the\ncode of a procedure to moved",
    "start": "132500",
    "end": "135890"
  },
  {
    "text": "to SRAM when the procedure’s\nfirst instruction was fetched,",
    "start": "135890",
    "end": "139300"
  },
  {
    "text": "we’d expect that many subsequent\ninstruction fetches could be",
    "start": "139300",
    "end": "142550"
  },
  {
    "text": "satisfied by the SRAM.",
    "start": "142550",
    "end": "144830"
  },
  {
    "text": "And although fetching the first\nword of a block from DRAM has",
    "start": "144830",
    "end": "148160"
  },
  {
    "text": "relatively long latency, the\nDRAM’s fast column accesses",
    "start": "148160",
    "end": "152170"
  },
  {
    "text": "will quickly stream the\nremaining words from sequential",
    "start": "152170",
    "end": "154950"
  },
  {
    "text": "addresses.",
    "start": "154950",
    "end": "156690"
  },
  {
    "text": "This will amortize the\ncost of the initial access",
    "start": "156690",
    "end": "159810"
  },
  {
    "text": "over the whole\nsequence of transfers.",
    "start": "159810",
    "end": "163900"
  },
  {
    "text": "The story is\nsimilar for accesses",
    "start": "163900",
    "end": "165790"
  },
  {
    "text": "by a procedure to its\narguments and local variables",
    "start": "165790",
    "end": "168360"
  },
  {
    "text": "in the current stack frame.",
    "start": "168360",
    "end": "170320"
  },
  {
    "text": "Again there will be many\naccesses to a small region",
    "start": "170320",
    "end": "173460"
  },
  {
    "text": "of memory during the span\nof time we’re executing",
    "start": "173460",
    "end": "175970"
  },
  {
    "text": "the procedure’s code.",
    "start": "175970",
    "end": "179090"
  },
  {
    "text": "Data accesses generated by\nLD and ST instructions also",
    "start": "179090",
    "end": "182760"
  },
  {
    "text": "exhibit locality.",
    "start": "182760",
    "end": "184409"
  },
  {
    "text": "The program may be accessing\nthe components of an object",
    "start": "184410",
    "end": "187490"
  },
  {
    "text": "or struct.",
    "start": "187490",
    "end": "188730"
  },
  {
    "text": "Or it may be stepping through\nthe elements of an array.",
    "start": "188730",
    "end": "192080"
  },
  {
    "text": "Sometimes information\nis moved from one array",
    "start": "192080",
    "end": "194770"
  },
  {
    "text": "or data object to another,\nas shown by the data",
    "start": "194770",
    "end": "197600"
  },
  {
    "text": "accesses on the right\nof the timeline.",
    "start": "197600",
    "end": "201110"
  },
  {
    "text": "Using simulations we\ncan estimate the number",
    "start": "201110",
    "end": "203800"
  },
  {
    "text": "of different locations\nthat will be accessed",
    "start": "203800",
    "end": "206210"
  },
  {
    "text": "over a particular span of time.",
    "start": "206210",
    "end": "208210"
  },
  {
    "text": "What we discover when we do\nthis is the notion of a “working",
    "start": "208210",
    "end": "210930"
  },
  {
    "text": "set” of locations that\nare accessed repeatedly.",
    "start": "210930",
    "end": "214689"
  },
  {
    "text": "If we plot the\nsize of the working",
    "start": "214690",
    "end": "216580"
  },
  {
    "text": "set as a function of the\nsize of the time interval,",
    "start": "216580",
    "end": "219230"
  },
  {
    "text": "we see that the size of\nthe working set levels off.",
    "start": "219230",
    "end": "222930"
  },
  {
    "text": "In other words once the time\ninterval reaches a certain size",
    "start": "222930",
    "end": "226489"
  },
  {
    "text": "the number of\nlocations accessed is",
    "start": "226490",
    "end": "228710"
  },
  {
    "text": "approximately the\nsame independent",
    "start": "228710",
    "end": "231200"
  },
  {
    "text": "of when in time the\ninterval occurs.",
    "start": "231200",
    "end": "235420"
  },
  {
    "text": "As we see in our\nplot to the left,",
    "start": "235420",
    "end": "237520"
  },
  {
    "text": "the actual addresses\naccessed will change,",
    "start": "237520",
    "end": "240620"
  },
  {
    "text": "but the number of *different*\naddresses during the time",
    "start": "240620",
    "end": "243430"
  },
  {
    "text": "interval will, on the average,\nremain relatively constant",
    "start": "243430",
    "end": "246620"
  },
  {
    "text": "and, surprisingly,\nnot all that large!",
    "start": "246620",
    "end": "250049"
  },
  {
    "text": "This means that if we\ncan arrange for our SRAM",
    "start": "250050",
    "end": "252470"
  },
  {
    "text": "to be large enough to hold the\nworking set of the program,",
    "start": "252470",
    "end": "255560"
  },
  {
    "text": "most accesses will be able\nto be satisfied by the SRAM.",
    "start": "255560",
    "end": "260370"
  },
  {
    "text": "We’ll occasionally have to move\nnew data into the SRAM and old",
    "start": "260370",
    "end": "263850"
  },
  {
    "text": "data back to DRAM, but the\nDRAM access will occur less",
    "start": "263850",
    "end": "268090"
  },
  {
    "text": "frequently than SRAM accesses.",
    "start": "268090",
    "end": "270960"
  },
  {
    "text": "We’ll work out the\nmathematics in a slide or two,",
    "start": "270960",
    "end": "273419"
  },
  {
    "text": "but you can see that thanks\nto locality of reference we’re",
    "start": "273420",
    "end": "276750"
  },
  {
    "text": "on track to build a memory\nout of a combination of SRAM",
    "start": "276750",
    "end": "280020"
  },
  {
    "text": "and DRAM that performs like\nan SRAM but has the capacity",
    "start": "280020",
    "end": "284190"
  },
  {
    "text": "of the DRAM.",
    "start": "284190",
    "end": "285790"
  },
  {
    "text": "The SRAM component of our\nhierarchical memory system is",
    "start": "285790",
    "end": "289240"
  },
  {
    "text": "called a “cache”.",
    "start": "289240",
    "end": "291090"
  },
  {
    "text": "It provides low-latency access\nto recently-accessed blocks",
    "start": "291090",
    "end": "294669"
  },
  {
    "text": "of data.",
    "start": "294670",
    "end": "296130"
  },
  {
    "text": "If the requested\ndata is in the cache,",
    "start": "296130",
    "end": "298360"
  },
  {
    "text": "we have a “cache hit” and the\ndata is supplied by the SRAM.",
    "start": "298360",
    "end": "303349"
  },
  {
    "text": "If the requested data\nis not in the cache,",
    "start": "303350",
    "end": "305780"
  },
  {
    "text": "we have a “cache miss” and\na block of data containing",
    "start": "305780",
    "end": "309110"
  },
  {
    "text": "the requested location will\nhave to be moved from DRAM",
    "start": "309110",
    "end": "311939"
  },
  {
    "text": "into the cache.",
    "start": "311940",
    "end": "313980"
  },
  {
    "text": "The locality principle\ntells us that we",
    "start": "313980",
    "end": "315980"
  },
  {
    "text": "should expect cache\nhits to occur much more",
    "start": "315980",
    "end": "318330"
  },
  {
    "text": "frequently than cache misses.",
    "start": "318330",
    "end": "321819"
  },
  {
    "text": "Modern computer systems\noften use multiple levels",
    "start": "321820",
    "end": "324500"
  },
  {
    "text": "of SRAM caches.",
    "start": "324500",
    "end": "326740"
  },
  {
    "text": "The levels closest to the CPU\nare smaller but very fast,",
    "start": "326740",
    "end": "330190"
  },
  {
    "text": "while the levels further\naway from the CPU",
    "start": "330190",
    "end": "332350"
  },
  {
    "text": "are larger and hence slower.",
    "start": "332350",
    "end": "335330"
  },
  {
    "text": "A miss at one level of the\ncache generates an access",
    "start": "335330",
    "end": "338030"
  },
  {
    "text": "to the next level, and so on\nuntil a DRAM access is needed",
    "start": "338030",
    "end": "342130"
  },
  {
    "text": "to satisfy the initial request.",
    "start": "342130",
    "end": "345580"
  },
  {
    "text": "Caching is used in\nmany applications",
    "start": "345580",
    "end": "347780"
  },
  {
    "text": "to speed up accesses to\nfrequently-accessed data.",
    "start": "347780",
    "end": "351990"
  },
  {
    "text": "For example, your\nbrowser maintains",
    "start": "351990",
    "end": "353880"
  },
  {
    "text": "a cache of\nfrequently-accessed web pages",
    "start": "353880",
    "end": "356210"
  },
  {
    "text": "and uses its local\ncopy of the web page",
    "start": "356210",
    "end": "358610"
  },
  {
    "text": "if it determines the\ndata is still valid,",
    "start": "358610",
    "end": "361039"
  },
  {
    "text": "avoiding the delay\nof transferring",
    "start": "361040",
    "end": "363120"
  },
  {
    "text": "the data over the Internet.",
    "start": "363120",
    "end": "365220"
  },
  {
    "text": "Here’s an example memory\nhierarchy that might be found",
    "start": "365220",
    "end": "367830"
  },
  {
    "text": "on a modern computer.",
    "start": "367830",
    "end": "369430"
  },
  {
    "text": "There are three levels\non-chip SRAM caches,",
    "start": "369430",
    "end": "372190"
  },
  {
    "text": "followed by DRAM main memory\nand a flash-memory cache",
    "start": "372190",
    "end": "376240"
  },
  {
    "text": "for the hard disk drive.",
    "start": "376240",
    "end": "378430"
  },
  {
    "text": "The compiler is\nresponsible for deciding",
    "start": "378430",
    "end": "380460"
  },
  {
    "text": "which data values are\nkept in the CPU registers",
    "start": "380460",
    "end": "383060"
  },
  {
    "text": "and which values require\nthe use of LDs and STs.",
    "start": "383060",
    "end": "387220"
  },
  {
    "text": "The 3-level cache\nand accesses to DRAM",
    "start": "387220",
    "end": "389370"
  },
  {
    "text": "are managed by circuity\nin the memory system.",
    "start": "389370",
    "end": "393190"
  },
  {
    "text": "After that the access\ntimes are long enough",
    "start": "393190",
    "end": "395810"
  },
  {
    "text": "(many hundreds of\ninstruction times)",
    "start": "395810",
    "end": "397840"
  },
  {
    "text": "that the job of managing\nthe movement of data",
    "start": "397840",
    "end": "400260"
  },
  {
    "text": "between the lower\nlevels of the hierarchy",
    "start": "400260",
    "end": "402380"
  },
  {
    "text": "is turned over to software.",
    "start": "402380",
    "end": "405370"
  },
  {
    "text": "Today we’re discussing how\nthe on-chip caches work.",
    "start": "405370",
    "end": "409370"
  },
  {
    "text": "In Part 3 of the course,\nwe’ll discuss how the software",
    "start": "409370",
    "end": "412590"
  },
  {
    "text": "manages main memory and\nnon-volatile storage devices.",
    "start": "412590",
    "end": "417240"
  },
  {
    "text": "Whether managed by\nhardware or software,",
    "start": "417240",
    "end": "419479"
  },
  {
    "text": "each layer of the\nmemory system is",
    "start": "419480",
    "end": "420990"
  },
  {
    "text": "designed to provide\nlower-latency access",
    "start": "420990",
    "end": "423810"
  },
  {
    "text": "to frequently-accessed locations\nin the next, slower layer.",
    "start": "423810",
    "end": "427570"
  },
  {
    "text": "But, as we’ll see, the\nimplementation strategies will",
    "start": "427570",
    "end": "430070"
  },
  {
    "text": "be quite different in the\nslower layers of the hierarchy.",
    "start": "430070",
    "end": "433650"
  }
]