[
  {
    "start": "0",
    "end": "121000"
  },
  {
    "start": "0",
    "end": "500"
  },
  {
    "text": "One last bit of housekeeping,\nthen we’re done!",
    "start": "500",
    "end": "3950"
  },
  {
    "text": "What should our hardware do if\nfor some reason an instruction",
    "start": "3950",
    "end": "7310"
  },
  {
    "text": "can’t be executed?",
    "start": "7310",
    "end": "9050"
  },
  {
    "text": "For example, if a programming\nerror has led to trying",
    "start": "9050",
    "end": "12250"
  },
  {
    "text": "to execute some piece of data\nas an instruction and the opcode",
    "start": "12250",
    "end": "16040"
  },
  {
    "text": "field doesn’t correspond to a\nBeta instruction (a so-called",
    "start": "16040",
    "end": "19480"
  },
  {
    "text": "“illop” or illegal operation).",
    "start": "19480",
    "end": "22619"
  },
  {
    "text": "Or maybe the memory address is\nlarger than the actual amount",
    "start": "22620",
    "end": "25610"
  },
  {
    "text": "main memory.",
    "start": "25610",
    "end": "27260"
  },
  {
    "text": "Or maybe one of\nthe operand values",
    "start": "27260",
    "end": "29120"
  },
  {
    "text": "is not acceptable,\ne.g., if the B operand",
    "start": "29120",
    "end": "32880"
  },
  {
    "text": "for a DIV instruction is 0.",
    "start": "32880",
    "end": "36910"
  },
  {
    "text": "In modern computers,\nthe accepted strategy",
    "start": "36910",
    "end": "39210"
  },
  {
    "text": "is cease execution of\nthe running program",
    "start": "39210",
    "end": "41840"
  },
  {
    "text": "and transfer control to\nsome error handler code.",
    "start": "41840",
    "end": "45720"
  },
  {
    "text": "The error handler might\nstore the program state",
    "start": "45720",
    "end": "48130"
  },
  {
    "text": "onto disk for later debugging.",
    "start": "48130",
    "end": "50520"
  },
  {
    "text": "Or, for an unimplemented\nbut legal opcode,",
    "start": "50520",
    "end": "53680"
  },
  {
    "text": "it might emulate the missing\ninstruction in software",
    "start": "53680",
    "end": "56900"
  },
  {
    "text": "and resume execution as\nif the instruction had",
    "start": "56900",
    "end": "59580"
  },
  {
    "text": "been implemented in hardware!",
    "start": "59580",
    "end": "62860"
  },
  {
    "text": "There’s also the need to\ndeal with external events,",
    "start": "62860",
    "end": "65750"
  },
  {
    "text": "like those associated\nwith input and output.",
    "start": "65750",
    "end": "69050"
  },
  {
    "text": "Here we’d like to interrupt\nthe execution of the current",
    "start": "69050",
    "end": "71540"
  },
  {
    "text": "program, run some code to\ndeal with the external event,",
    "start": "71540",
    "end": "75200"
  },
  {
    "text": "then resume execution as if the\ninterrupt had never happened.",
    "start": "75200",
    "end": "80299"
  },
  {
    "text": "To deal with these cases,\nwe’ll add hardware to treat",
    "start": "80300",
    "end": "82950"
  },
  {
    "text": "exceptions like forced procedure\ncalls to special code to handle",
    "start": "82950",
    "end": "86600"
  },
  {
    "text": "the situation,",
    "start": "86600",
    "end": "88210"
  },
  {
    "text": "arranging to save the PC+4\nvalue of the interrupted program",
    "start": "88210",
    "end": "92220"
  },
  {
    "text": "so that the handler can\nresume execution if it wishes.",
    "start": "92220",
    "end": "96710"
  },
  {
    "text": "This is a very powerful\nfeature since it",
    "start": "96710",
    "end": "98909"
  },
  {
    "text": "allows us to transfer\ncontrol to software to handle",
    "start": "98910",
    "end": "102110"
  },
  {
    "text": "most any circumstance\nbeyond the capability",
    "start": "102110",
    "end": "104900"
  },
  {
    "text": "of our modest hardware.",
    "start": "104900",
    "end": "107300"
  },
  {
    "text": "As we’ll see in Part\n3 of the course,",
    "start": "107300",
    "end": "109220"
  },
  {
    "text": "the exception hardware will be\nour key to interfacing running",
    "start": "109220",
    "end": "112380"
  },
  {
    "text": "programs to the operating\nsystem (OS) and to allow the OS",
    "start": "112380",
    "end": "116290"
  },
  {
    "text": "to deal with external\nevents without any awareness",
    "start": "116290",
    "end": "119560"
  },
  {
    "text": "on the part of the\nrunning program.",
    "start": "119560",
    "end": "122909"
  },
  {
    "start": "121000",
    "end": "169000"
  },
  {
    "text": "So our plan is to interrupt\nthe running program,",
    "start": "122910",
    "end": "125950"
  },
  {
    "text": "acting like the current\ninstruction was actually",
    "start": "125950",
    "end": "128369"
  },
  {
    "text": "a procedure call to\nthe handler code.",
    "start": "128370",
    "end": "131269"
  },
  {
    "text": "When it finishes execution, the\nhandler can, if appropriate,",
    "start": "131270",
    "end": "135350"
  },
  {
    "text": "use the normal procedure\nreturn sequence",
    "start": "135350",
    "end": "138000"
  },
  {
    "text": "to resume execution\nof the user program.",
    "start": "138000",
    "end": "141420"
  },
  {
    "text": "We’ll use the term “exception”\nto refer to exceptions caused",
    "start": "141420",
    "end": "144360"
  },
  {
    "text": "by executing the\ncurrent program.",
    "start": "144360",
    "end": "146730"
  },
  {
    "text": "Such exceptions are\n“synchronous” in the sense that",
    "start": "146730",
    "end": "149560"
  },
  {
    "text": "they are triggered by executing\na particular instruction.",
    "start": "149560",
    "end": "153640"
  },
  {
    "text": "In other words, if the program\nwas re-run with the same data,",
    "start": "153640",
    "end": "157370"
  },
  {
    "text": "the same exception would occur.",
    "start": "157370",
    "end": "160200"
  },
  {
    "text": "We’ll use the term “interrupt”\nto refer to asynchronous",
    "start": "160200",
    "end": "163110"
  },
  {
    "text": "exceptions resulting from\nexternal events whose timing is",
    "start": "163110",
    "end": "166430"
  },
  {
    "text": "unrelated to the\ncurrently running program.",
    "start": "166430",
    "end": "170090"
  },
  {
    "start": "169000",
    "end": "268000"
  },
  {
    "text": "The implementation for\nboth types of exceptions",
    "start": "170090",
    "end": "172730"
  },
  {
    "text": "is the same.",
    "start": "172730",
    "end": "174420"
  },
  {
    "text": "When an exception is\ndetected, the Beta hardware",
    "start": "174420",
    "end": "177190"
  },
  {
    "text": "will behave as if the current\ninstruction was a taken BR",
    "start": "177190",
    "end": "180770"
  },
  {
    "text": "to either location 0x4 (for\nsynchronous exceptions)",
    "start": "180770",
    "end": "184350"
  },
  {
    "text": "or location 0x8 (for\nasynchronous interrupts).",
    "start": "184350",
    "end": "188300"
  },
  {
    "text": "Presumably the instructions\nin those locations",
    "start": "188300",
    "end": "190940"
  },
  {
    "text": "will jump to the entry points\nof the appropriate handler",
    "start": "190940",
    "end": "193810"
  },
  {
    "text": "routines.",
    "start": "193810",
    "end": "196200"
  },
  {
    "text": "We’ll save the PC+4 value of the\ninterrupted program into R30,",
    "start": "196200",
    "end": "200290"
  },
  {
    "text": "a register dedicated\nto that purpose.",
    "start": "200290",
    "end": "204170"
  },
  {
    "text": "We’ll call that register XP\n(“exception pointer”) to remind",
    "start": "204170",
    "end": "208280"
  },
  {
    "text": "ourselves of how we’re using it.",
    "start": "208280",
    "end": "210680"
  },
  {
    "text": "Since interrupts in particular\ncan happen at any point during",
    "start": "210680",
    "end": "213849"
  },
  {
    "text": "a program’s execution, thus\noverwriting the contents of XP",
    "start": "213850",
    "end": "217850"
  },
  {
    "text": "at any time, user programs can’t\nuse the XP register to hold",
    "start": "217850",
    "end": "222460"
  },
  {
    "text": "values since those values\nmight disappear at any moment!",
    "start": "222460",
    "end": "227630"
  },
  {
    "text": "Here’s how this scheme works:",
    "start": "227630",
    "end": "229510"
  },
  {
    "text": "suppose we don’t include\nhardware to implement the DIV",
    "start": "229510",
    "end": "232370"
  },
  {
    "text": "instruction, so it’s treated\nas an illegal opcode.",
    "start": "232370",
    "end": "236890"
  },
  {
    "text": "The exception hardware\nforces a procedure call",
    "start": "236890",
    "end": "239390"
  },
  {
    "text": "to location 0x4, which then\nbranches to the Illop handler",
    "start": "239390",
    "end": "243280"
  },
  {
    "text": "shown here.",
    "start": "243280",
    "end": "245240"
  },
  {
    "text": "The PC+4 value of the DIV\ninstruction has been saved",
    "start": "245240",
    "end": "249470"
  },
  {
    "text": "in the XP register, so the\nhandler can fetch the illegal",
    "start": "249470",
    "end": "253060"
  },
  {
    "text": "instruction and, if it\ncan, emulate its operation",
    "start": "253060",
    "end": "256810"
  },
  {
    "text": "in software.",
    "start": "256810",
    "end": "258690"
  },
  {
    "text": "When handler is complete,\nit can resume execution",
    "start": "258690",
    "end": "262060"
  },
  {
    "text": "of the original program at\nthe instruction following",
    "start": "262060",
    "end": "264830"
  },
  {
    "text": "DIV by performing a JMP(XP).",
    "start": "264830",
    "end": "267740"
  },
  {
    "text": "Pretty neat!",
    "start": "267740",
    "end": "269830"
  },
  {
    "start": "268000",
    "end": "364000"
  },
  {
    "text": "To handle exceptions, we only\nneed a few simple changes",
    "start": "269830",
    "end": "272909"
  },
  {
    "text": "to the datapath.",
    "start": "272910",
    "end": "274960"
  },
  {
    "text": "We’ve added a MUX controlled\nby the WASEL signal to choose",
    "start": "274960",
    "end": "278440"
  },
  {
    "text": "the write-back address\nfor the register file.",
    "start": "278440",
    "end": "281680"
  },
  {
    "text": "When WASEL is 1, write-back\nwill occur to the XP register,",
    "start": "281680",
    "end": "286139"
  },
  {
    "text": "i.e., register 30.",
    "start": "286140",
    "end": "288720"
  },
  {
    "text": "When WASEL is 0, write-back\nwill occur normally, i.e.,",
    "start": "288720",
    "end": "293130"
  },
  {
    "text": "to the register\nspecified by the RC field",
    "start": "293130",
    "end": "295740"
  },
  {
    "text": "of the current instruction.",
    "start": "295740",
    "end": "298520"
  },
  {
    "text": "The remaining two\ninputs of the PCSEL MUX",
    "start": "298520",
    "end": "301229"
  },
  {
    "text": "are set to the constant\naddresses for the exception",
    "start": "301230",
    "end": "303600"
  },
  {
    "text": "handlers.",
    "start": "303600",
    "end": "304750"
  },
  {
    "text": "In our case, 0x4 for illegal\noperations, and 0x8 for",
    "start": "304750",
    "end": "308550"
  },
  {
    "text": "interrupts.",
    "start": "308550",
    "end": "310919"
  },
  {
    "text": "Here’s the flow of control\nduring an exception.",
    "start": "310920",
    "end": "314280"
  },
  {
    "text": "The PC+4 value for the\ninterrupted instruction is",
    "start": "314280",
    "end": "317410"
  },
  {
    "text": "routed through the WDSEL MUX\nto be written into the XP",
    "start": "317410",
    "end": "320740"
  },
  {
    "text": "register.",
    "start": "320740",
    "end": "322330"
  },
  {
    "text": "Meanwhile the\ncontrol logic chooses",
    "start": "322330",
    "end": "324419"
  },
  {
    "text": "either 3 or 4 as\nthe value of PCSEL",
    "start": "324420",
    "end": "328160"
  },
  {
    "text": "to select the appropriate next\ninstruction that will initiate",
    "start": "328160",
    "end": "331920"
  },
  {
    "text": "the handling the exception.",
    "start": "331920",
    "end": "334930"
  },
  {
    "text": "The remaining control signals\nare forced to their “don’t",
    "start": "334930",
    "end": "337509"
  },
  {
    "text": "care” values, since we no longer\ncare about completing execution",
    "start": "337510",
    "end": "341380"
  },
  {
    "text": "of the instruction we had\nfetched from main memory",
    "start": "341380",
    "end": "344150"
  },
  {
    "text": "at the beginning of the cycle.",
    "start": "344150",
    "end": "346979"
  },
  {
    "text": "Note that the interrupted\ninstruction has not",
    "start": "346980",
    "end": "349420"
  },
  {
    "text": "been executed.",
    "start": "349420",
    "end": "350900"
  },
  {
    "text": "So if the exception\nhandler wishes",
    "start": "350900",
    "end": "352610"
  },
  {
    "text": "to execute the\ninterrupted instruction,",
    "start": "352610",
    "end": "355030"
  },
  {
    "text": "it will have to subtract 4 from\nthe value in the XP register",
    "start": "355030",
    "end": "358930"
  },
  {
    "text": "before performing a\nJMP(XP) to resume execution",
    "start": "358930",
    "end": "362690"
  },
  {
    "text": "of the interrupted program.",
    "start": "362690",
    "end": "365030"
  }
]