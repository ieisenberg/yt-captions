[
  {
    "text": "The following content is\nprovided under a Creative Commons license. Your support will help MIT\nOpenCourseware continue to",
    "start": "0",
    "end": "6840"
  },
  {
    "text": "offer high-quality educational\nresources for free. To make a donation, or view\nadditional materials from",
    "start": "6840",
    "end": "13390"
  },
  {
    "text": "hundreds of MIT courses, visit\nMIT OpenCourseware, at ocw.mit.edu.",
    "start": "13390",
    "end": "19930"
  },
  {
    "text": "PROFESSOR JIM ERICSON:\nOK, to work. A word of warning: fasten\nyour seat belts.",
    "start": "19930",
    "end": "27730"
  },
  {
    "text": "Or, another way of saying it is,\nI'm going to open up the fire hose a little bit today. Last lecture, you might have\nthought this was a SHASS",
    "start": "27730",
    "end": "33780"
  },
  {
    "text": "class, it's not like a\nphilosophy class, and it was important to set the stage for\nwhat we're going to talk about, but we talked about\nvery high level things.",
    "start": "33780",
    "end": "41180"
  },
  {
    "text": "The notion of recipes, the\nnotion of computation, why you want to do this, what you're\ngoing to learn. Today we're going to dive into\nthe nitty-gritty, the nuts and",
    "start": "41180",
    "end": "48000"
  },
  {
    "text": "bolts of the basics of\ncomputation, and in particular, what I'm going to do\ntoday is, I'm going to talk",
    "start": "48000",
    "end": "53320"
  },
  {
    "text": "about operators and operands,\nwhich we did a little bit real last time, in particular how\nto create expressions, I'm",
    "start": "53320",
    "end": "58960"
  },
  {
    "text": "going to talk about statements\nas the key building blocks for writing code, and I'm going to\nintroduce simple sets of",
    "start": "58960",
    "end": "66060"
  },
  {
    "text": "programs, in particular I'm\ngoing to talk about branching, conditionals, and iteration.",
    "start": "66060",
    "end": "71290"
  },
  {
    "text": "So, a lot to do. OK? So, let me jump straight\nto it. At the end of last lecture, we\nstarted introducing some of",
    "start": "71290",
    "end": "78350"
  },
  {
    "text": "the pieces you want to do. And I want to remind\nyou of our goal. We're trying to describe\nprocesses. We want to have things that\ndeduce new kinds of",
    "start": "78350",
    "end": "84700"
  },
  {
    "text": "information. So we want to write programs\nto do that. If we're going to write\nprograms, we need at least two",
    "start": "84700",
    "end": "90020"
  },
  {
    "text": "things: we need some\nrepresentation for fundamental data. And we saw last time two\nexamples of that.",
    "start": "90020",
    "end": "97080"
  },
  {
    "text": "And the second thing we're going\nto need, is we're going to need a way to give\ninstructions to the computer",
    "start": "97080",
    "end": "103230"
  },
  {
    "text": "to manipulate that data. We need to give it a description\nof the recipe. In terms of primitive\ndata, what we saw",
    "start": "103230",
    "end": "112940"
  },
  {
    "text": "were two kinds: Right? Numbers and strings.",
    "start": "112940",
    "end": "120570"
  },
  {
    "text": "A little later on in the\nlecture we're going to introduce a third kind of value,\nbut what we're going to",
    "start": "120570",
    "end": "128060"
  },
  {
    "text": "see throughout the term is, no\nmatter how complex a data structure we create, and we're\ngoing to create a variety of",
    "start": "128060",
    "end": "133269"
  },
  {
    "text": "data structures, fundamentally\nall of them have their basis, their atomic level if you like,\nare going to be some",
    "start": "133270",
    "end": "139129"
  },
  {
    "text": "combinations of numbers, of\nstrings, and the third type, which are booleans, which I'm\ngoing to introduce a little later on in this lecture.",
    "start": "139130",
    "end": "145670"
  },
  {
    "text": "And that kind of makes\nsense right? Numbers are there to do numeric\nthings, strings are our fundamental way of\nrepresenting textual",
    "start": "145670",
    "end": "151070"
  },
  {
    "text": "information. And so we're going to see\nhow to combine those things as we go along. Second thing we saw was, we saw\nthat associated with every",
    "start": "151070",
    "end": "158800"
  },
  {
    "text": "primitive value was a type. And these are kind of\nobvious, right? Strings are strings.",
    "start": "158800",
    "end": "164880"
  },
  {
    "text": "For numbers, we had some\nvariations; we had integers, we had floats. We'll introduce a few\nmore as we go along.",
    "start": "164880",
    "end": "169910"
  },
  {
    "text": "But those types are important,\nbecause they tell us something about what we want to do when we\nwant to put them together.",
    "start": "169910",
    "end": "175560"
  },
  {
    "text": "OK, but nonetheless, I want to\nstress we have both a value,",
    "start": "175560",
    "end": "180730"
  },
  {
    "text": "yeah, and a type. All right.",
    "start": "180730",
    "end": "185820"
  },
  {
    "text": "Once we have them, we\nwant to start making combinations out of them. We want to put pieces\ntogether. And for that, we combine\nthings in expressions.",
    "start": "185820",
    "end": "199630"
  },
  {
    "text": "And what we saw as expressions\nare formed of operands and operators.",
    "start": "199630",
    "end": "210720"
  },
  {
    "text": "And the simple things we did\nwere the sort of things you'd expect from numerical things.",
    "start": "210720",
    "end": "216640"
  },
  {
    "text": "Now I want to stress one\nother nuance here. Which is, and we're going to\ndo some examples of this, initially we just typed in\nexpressions into the",
    "start": "216640",
    "end": "223590"
  },
  {
    "text": "interpreter; that is, directly\ninto Python. And as I suggested last time,\nthe interpreter is actually a",
    "start": "223590",
    "end": "228739"
  },
  {
    "text": "program inside of the machine\nthat is basically following the rules we're describing here\nto deduce the value and",
    "start": "228740",
    "end": "234346"
  },
  {
    "text": "print it up. And if we type directly into\nthe interpreter, it essentially does an\neval and a print.",
    "start": "234346",
    "end": "239670"
  },
  {
    "text": "It evaluates, and it prints.",
    "start": "239670",
    "end": "247959"
  },
  {
    "text": "Most of the time, we're going to\nbe doing expressions inside of some piece of code, inside\nof a script, which is the",
    "start": "247960",
    "end": "253030"
  },
  {
    "text": "Python word for program. In there, I want to make this\ndistinction, this nuance: the evaluator is still going to be\ntaking those expressions and",
    "start": "253030",
    "end": "260310"
  },
  {
    "text": "using its rules to get a value,\nbut it's not going to print them back out. Why?",
    "start": "260310",
    "end": "265419"
  },
  {
    "text": "Because typically, you're doing\nthat to use it somewhere else in the program. It's going to be stored\naway in a variable.",
    "start": "265420",
    "end": "270500"
  },
  {
    "text": "It's going to be stuck\nin a data structure. It's going to be used\nfor a side effect. So, inside of code, or inside of\na script, there's no print,",
    "start": "270500",
    "end": "280990"
  },
  {
    "text": "unless we make it explicit. And that's a little bit down in\nthe weeds, it's a detail,",
    "start": "280990",
    "end": "287800"
  },
  {
    "text": "but one I want to stress. You need to, if you want\nsomething to be printed out inside your code, you need to\ntell the machine to do that.",
    "start": "287800",
    "end": "294449"
  },
  {
    "text": "OK. So let's do some simple\nexamples. We've already seen somebody's. I just want to remind you, if I\nwanted to, for example, type",
    "start": "294450",
    "end": "302380"
  },
  {
    "text": "in an expression like that,\nnotice the syntactical form, it's an expression, a number,\nfollowed by an operand,",
    "start": "302380",
    "end": "307940"
  },
  {
    "text": "followed by another\nexpression. And of course I get out the\nvalue I'd like there. Yes sir.",
    "start": "307940",
    "end": "315810"
  },
  {
    "text": "Oh, you don't like leaning\nthat far to the left? OK, if you're a Republican I'll\nbe happy to shift this over a little bit.",
    "start": "315810",
    "end": "322030"
  },
  {
    "text": "Wow, John, I got a laugh\nfor a political joke, I'm in big trouble. That better? Oh damn, all right, I'll have\nto do it even more.",
    "start": "322030",
    "end": "332740"
  },
  {
    "text": "OK, here we go, here we go,\nyou see, I'm doing it down here, I can't see it, does\nthat-- ah, I hear his sighs of relief, OK, good.",
    "start": "332740",
    "end": "338570"
  },
  {
    "text": "There we go. Better. All right. One of the other things we\nshowed last time is that operators are overloaded.",
    "start": "338570",
    "end": "344410"
  },
  {
    "text": "And this is where you heard\nJohn and I disagree. I don't happen to like\nthis, but he thinks it's an ok thing. In a particular-- if we, whoa,\nwe don't do that, we do this--",
    "start": "344410",
    "end": "354180"
  },
  {
    "text": "that is, give a combination of\na number multiplication in a string, this will in fact give\nus back a new string with that",
    "start": "354180",
    "end": "361460"
  },
  {
    "text": "many replicas, if you\nlike, of the string concatenated together. All right? And if you want to do other\nthings, for example, we can",
    "start": "361460",
    "end": "368110"
  },
  {
    "text": "take two strings and add--\nwhoops, sorry-- and add them together, we will get\nout, again, a",
    "start": "368110",
    "end": "375470"
  },
  {
    "text": "concatenation of that string. And these will, we'll let you\nwork through the variations, but these are the simple\nexpressions we can use.",
    "start": "375470",
    "end": "381690"
  },
  {
    "text": "Now, sometimes things get\na little interesting. All right?",
    "start": "381690",
    "end": "387860"
  },
  {
    "text": "What's the value of\nthat expression?",
    "start": "387860",
    "end": "393250"
  },
  {
    "text": "What do you think should happen\nif I evaluate that expression?",
    "start": "393250",
    "end": "398349"
  },
  {
    "text": "Somebody with a hand up,\nso I can see it. What's going to happen? STUDENT: [UNINTELLIGIBLE] PROFESSOR JIM ERICSON:\nAn error? Why?",
    "start": "398350",
    "end": "403830"
  },
  {
    "text": "STUDENT: [UNINTELLIGIBLE] PROFESSOR JIM ERICSON: Great.",
    "start": "403830",
    "end": "410538"
  },
  {
    "text": "OK. That means, let's check it. It certainly is. We bribe people. So I, ah, by the way, John's a\nYankees fan, he throws like",
    "start": "410538",
    "end": "417540"
  },
  {
    "text": "Johnny Damon, I'm a Red Sox fan,\nso we'll see if I, how about that? And I almost hit John along\nthe way, great.",
    "start": "417540",
    "end": "423530"
  },
  {
    "text": "My third right, exactly,\nwhat can I say? All right, so we're into bribing\nyou as we go along here, and all right?",
    "start": "423530",
    "end": "428729"
  },
  {
    "text": "You'll be badly overweight\nby the end of the term. Right, it's a syntactic error,\nbecause it doesn't know how to deal with this.",
    "start": "428730",
    "end": "434390"
  },
  {
    "text": "But there's an important thing\ngoing on here, if I in fact wanted to combine those into a\nstring, I should have told the",
    "start": "434390",
    "end": "439610"
  },
  {
    "text": "machine to do that, and I can do\nthat, by explicitly saying, take that, which is a number,\nand convert it into a string,",
    "start": "439610",
    "end": "447700"
  },
  {
    "text": "and then-- bleah, I keep\ndoing that-- then add it to that string.",
    "start": "447700",
    "end": "453650"
  },
  {
    "text": "OK, so there's an important\npoint here. We've got what's called\ntype conversion.",
    "start": "453650",
    "end": "464810"
  },
  {
    "text": "That is, if I want to combine\ntwo things together in a particular way, I need to make\nsure that I give it the kind",
    "start": "464810",
    "end": "472199"
  },
  {
    "text": "of operand it expects. So STR, which I just typed up\nthere, takes in parens, some",
    "start": "472200",
    "end": "477800"
  },
  {
    "text": "input, and it converts it into\na string, so that now I can use that where I was\nexpecting a string.",
    "start": "477800",
    "end": "482970"
  },
  {
    "text": "John. PROFESSOR JOHN GUTTAG: You've\ngot a static semantic error in your syntax. PROFESSOR JIM ERICSON:\nThank you.",
    "start": "482970",
    "end": "488694"
  },
  {
    "text": "And I was going to come to that\nin a second, but thank you, John, for pointing it out. All right. Why is it a static\nsemantic error?",
    "start": "488694",
    "end": "495120"
  },
  {
    "text": "The syntax is OK in the sense\nof, it is an operand, an operator, an operand, so\nsyntactically it's OK.",
    "start": "495120",
    "end": "503380"
  },
  {
    "text": "The semantics was what caused\nthe problem, because the operator was expecting\na particular kind",
    "start": "503380",
    "end": "508670"
  },
  {
    "text": "of structure there. There's a second thing going\non here that I want to highlight, because it's\nreally important.",
    "start": "508670",
    "end": "516479"
  },
  {
    "text": "Yes indeed. OK, there we go. The second thing I want to\nhighlight is, that what's going on, is that Python is\ndoing some type checking.",
    "start": "516480",
    "end": "528130"
  },
  {
    "text": "It caught the error, because\nit checked the types of the operands before it applied\nthings, and it says,",
    "start": "528130",
    "end": "534050"
  },
  {
    "text": "I'm going to stop. Now, you might have said, gee,\nwhy didn't it just assume that I wanted to in fact treat these\nas strings, and combine",
    "start": "534050",
    "end": "540029"
  },
  {
    "text": "them together? Sounds like a reasonable\nthing to do. But it's a dangerous thing.",
    "start": "540030",
    "end": "545300"
  },
  {
    "text": "Because in doing that, Python\nwould then have a value that it could pass on into some other\npart of a computation, and if it wasn't what I wanted,\nI might be a long ways",
    "start": "545300",
    "end": "553820"
  },
  {
    "text": "downstream in the computation\nbefore I actually hit some result that makes no sense.",
    "start": "553820",
    "end": "558959"
  },
  {
    "text": "And tracing back where it came\nfrom can be really hard. So I actually want to have\ntype checking as much as I can early on.",
    "start": "558960",
    "end": "566340"
  },
  {
    "text": "And in fact, under type\nchecking, different languages sometimes fall on a spectrum\nfrom weak to strong typing.",
    "start": "566340",
    "end": "576740"
  },
  {
    "text": "Which basically says, how much\ntype checking do they do? Now, you're going to hear John\nand I go back and forth a lot,",
    "start": "576740",
    "end": "582370"
  },
  {
    "text": "as I said I'm an old time-- well\nI'm certainly old time, but I'm also an old time\nLisp programmer. I love Lisp, but Lisp is\ncertainly in the category of a",
    "start": "582370",
    "end": "589320"
  },
  {
    "text": "very weakly typed language. It does not check the types\nof its arguments at all. Python is, I wouldn't say\ncompletely strong, but it's",
    "start": "589320",
    "end": "595960"
  },
  {
    "text": "much closer to the strong\nend of the spectrum. It's going to do a lot of type\nchecking for you before it actually passes things back.",
    "start": "595960",
    "end": "603400"
  },
  {
    "text": "Nonetheless, I'm also going to\nargue that it's probably not as strongly typed as\nwe might like.",
    "start": "603400",
    "end": "608570"
  },
  {
    "text": "So, for example, there's\nan expression. Now, less than is just, if you\nhaven't used it before, it's",
    "start": "608570",
    "end": "615455"
  },
  {
    "text": "just the operator you'd expect,\nit's comparing two things and it's going to return\neither true or false depending on whether the first\nargument is less than the",
    "start": "615455",
    "end": "621210"
  },
  {
    "text": "second argument. What's going to happen here? Again, I need a hand so I can\nknow where to throw candy.",
    "start": "621210",
    "end": "628360"
  },
  {
    "text": "I've also got on my\nreading glasses on, I can't see anything. Anybody. TAs don't count, they\nget their own candy.",
    "start": "628360",
    "end": "636660"
  },
  {
    "text": "When it, yep. STUDENT: [INAUDIBLE] PROFESSOR JIM ERICSON:\nGood question. Sounds like a reasonable\nguess, right? How in the world am I going to\ncompare a string to a number?",
    "start": "636660",
    "end": "644030"
  },
  {
    "text": "So, see how good my aim\nis, ah, not bad. All right. A good quest-- sorry, a\ngood thought, but in",
    "start": "644030",
    "end": "651010"
  },
  {
    "text": "fact, son of a gun. Or as my younger son would\nsay, fudge knuckle.",
    "start": "651010",
    "end": "658240"
  },
  {
    "text": "Yeah. All right? So, what in the world's\ngoing on here? This is a place-- I don't know about you, John,\nI think this is actually",
    "start": "658240",
    "end": "664149"
  },
  {
    "text": "really not good, because right,\nwhat this is doing is, it's allowing-- sorry, let me\nback up and say it-- it's got",
    "start": "664150",
    "end": "672280"
  },
  {
    "text": "an overload on the less-than\nthat allows you to compare basically the lexicographic\nordering, or this sequence of",
    "start": "672280",
    "end": "678360"
  },
  {
    "text": "ordering of symbols, including\nnumbers inside of the machine. And this, in my mind, should\nhave been an error.",
    "start": "678360",
    "end": "684550"
  },
  {
    "text": "Why in the world would you\nwant to compare that? Just to give you an example of\nthat, for instance, I can do the following: all right, the\nnumber four is less than the",
    "start": "684550",
    "end": "695360"
  },
  {
    "text": "string three, whereas the string\nfour, oops, is not less",
    "start": "695360",
    "end": "702370"
  },
  {
    "text": "than the string three. And this is a place where it's\ncomparing strings and numbers in a strange way.",
    "start": "702370",
    "end": "707750"
  },
  {
    "text": "So why am I showing you this? Partly to show you that it's\nkind of weird, but also to tell you that one of the things\nyou want to do is",
    "start": "707750",
    "end": "716210"
  },
  {
    "text": "exercise what I'm going to call\nsome type discipline. Meaning, when you write code,\nyou want to get into the habit",
    "start": "716210",
    "end": "725100"
  },
  {
    "text": "of A, checking out operators or\nprocedures to see what they do under different\ncircumstances, either check",
    "start": "725100",
    "end": "730320"
  },
  {
    "text": "them out or read the\nspecifications of it, and two, when you write your own code,\nyou want to be disciplined",
    "start": "730320",
    "end": "735740"
  },
  {
    "text": "about what types of arguments\nor operands you apply to operators. Because this is something that\ncould certainly have screwed",
    "start": "735740",
    "end": "742540"
  },
  {
    "text": "you up if you didn't realize\nit did it, and you need to have that discipline\nto make sure it's doing the right thing.",
    "start": "742540",
    "end": "749160"
  },
  {
    "text": "OK. One of the other things you're\ngoing to see is that some of the operators have\nodd meanings.",
    "start": "749160",
    "end": "756079"
  },
  {
    "text": "And again, I think we looked-- Yup? STUDENT: So, the string A is\nless than three, is false because they're comparing\nlike ASCII values? PROFESSOR JIM ERICSON: Yes.",
    "start": "756080",
    "end": "765360"
  },
  {
    "text": "I mean, I'm sorry. The answer is, I don't\nknow if it's ASCII. John, do you know, are\nthey doing ASCII encoding inside of here? I'm assuming so.",
    "start": "765360",
    "end": "771540"
  },
  {
    "text": "Right. So, in case you didn't\nunderstand what the the question was, basically every\nsymbol gets translated into a",
    "start": "771540",
    "end": "777910"
  },
  {
    "text": "particular encoding, a string\nof bit, if you like, inside the machine, there's a\nparticular one called ASCII, which is, if you like, an\nordering of that, and that's",
    "start": "777910",
    "end": "785400"
  },
  {
    "text": "what the machine's actually\ncomparing inside of here, which is why in under ASCII\nencoding the numbers are going to appear after the characters,\nand you get the",
    "start": "785400",
    "end": "792530"
  },
  {
    "text": "strange kind of thing going on. All right. I want a couple of other things,\njust to quickly remind you, and one of them is,\nremember, the operators do",
    "start": "792530",
    "end": "799020"
  },
  {
    "text": "look at the types, so division,\nfor example nine divided by five is one, because\nthis is integer",
    "start": "799020",
    "end": "805290"
  },
  {
    "text": "division, that is, it's the\nlargest number of integer multiples of five to go into\nnine, and there would be a",
    "start": "805290",
    "end": "810680"
  },
  {
    "text": "remainder associated with it,\nwhich is in fact four.",
    "start": "810680",
    "end": "816580"
  },
  {
    "text": "And again, you've got\nto be careful about how you use the operators. Right, having done that, we\ncan certainly get to more",
    "start": "816580",
    "end": "821890"
  },
  {
    "text": "complicated things, so for\nexample, suppose I look at that expression.",
    "start": "821890",
    "end": "827660"
  },
  {
    "text": "Three plus four times five. All right. Now. There are two possible\nvalues here, I think.",
    "start": "827660",
    "end": "835420"
  },
  {
    "text": "One is 23, the other's 35. Because this could be three plus\nfour, times five, or it",
    "start": "835420",
    "end": "843370"
  },
  {
    "text": "could be three, plus\nfour times five. And of course, you know, when\nyou look at code it doesn't",
    "start": "843370",
    "end": "848990"
  },
  {
    "text": "pause in between them. But what I do? I just separated, do I do the\naddition first or do the multiplication first?",
    "start": "848990",
    "end": "854520"
  },
  {
    "text": "Anybody know what happens\nIn this case? Yeah, way up, oh God I'm going\nto have a hell of time throwing up there, way\nup at the back. STUDENT: Standard order of\noperations, I guess take the",
    "start": "854520",
    "end": "865604"
  },
  {
    "text": "multiplication first,\nand add the three. PROFESSOR JIM ERICSON: Right. I'm going to try, if I don't\nmake it, you know, just get somebody to pass back, whoa! I just hit somebody\nin the head. Thank you. Please pass it back\nto that guy.",
    "start": "865604",
    "end": "872220"
  },
  {
    "text": "If you want candy, sit much\ncloser down, and that way we can film you as well\nas we go along. Right. So the point is, there is\nsomething here called operator",
    "start": "872220",
    "end": "879000"
  },
  {
    "text": "precedence, which is what\nthe gentleman said.",
    "start": "879000",
    "end": "885530"
  },
  {
    "text": "I'm not going to say much more\nabout it, but basically what it says is, with all other\nthings being equal, things",
    "start": "885530",
    "end": "892110"
  },
  {
    "text": "like exponentiation are done\nbefore you do multiplication or division, which are done\nbefore you do things like",
    "start": "892110",
    "end": "900100"
  },
  {
    "text": "addition and subtraction. And so, in fact, if I wanted\nthe other version of it, in fact, if I do this right, it's\ngoing to give me 23 because it",
    "start": "900100",
    "end": "906730"
  },
  {
    "text": "does the multiplication first,\nif I wanted the other version of it, I need to tell it that,\nby using, excuse me,",
    "start": "906730",
    "end": "913160"
  },
  {
    "text": "parentheses. And in general, what I\nwould say is, when in doubt, use parens.",
    "start": "913160",
    "end": "926410"
  },
  {
    "text": "OK. Now, that just gives\nus expressions.",
    "start": "926410",
    "end": "932830"
  },
  {
    "text": "We can start having complex\nexpressions, you can imagine we can have things are lots of\nparens, and all sorts of things in it. Yes, question.",
    "start": "932830",
    "end": "938010"
  },
  {
    "text": "STUDENT: What does it mean, the\noperator used, when you",
    "start": "938010",
    "end": "946102"
  },
  {
    "text": "were calculating the remainder\nbetween nine and five? PROFESSOR JIM ERICSON: It's\nthe percent sign. If you can't read it, I guess\nI'm going to have to blow that font up, aren't I,\nnext time around. Yeah, it's a percent, so\nthis percent sign will give you the remainder.",
    "start": "946102",
    "end": "952480"
  },
  {
    "text": "OK. Second thing I need to do,\nthough, is I need to, when I get those values, I want\nto hang on to them.",
    "start": "952480",
    "end": "957560"
  },
  {
    "text": "I'd like to give them a name,\nso I can refer to them in other places. And so we saw that as well, the\nlast piece we had here is",
    "start": "957560",
    "end": "965012"
  },
  {
    "text": "the ability to create variables,\nwhich have their",
    "start": "965012",
    "end": "972880"
  },
  {
    "text": "own values, and that's done\nusing an assignment statement.",
    "start": "972880",
    "end": "980100"
  },
  {
    "text": "So in particular, that is\nan assignment statement. It says, take the name x and\ncreate a binding for that name",
    "start": "980100",
    "end": "989060"
  },
  {
    "text": "to the value of the\nsub-expression and in fact to do this, to stress a point,\nlet's do that.",
    "start": "989060",
    "end": "995300"
  },
  {
    "text": "It's not just a number,\nit's any expression. What Python will do, is it will\nevaluate that expression",
    "start": "995300",
    "end": "1001790"
  },
  {
    "text": "using the kinds of rules we\ntalked about, and then it creates a binding for\nx to that value. And I want to stress this, we're\ngoing to come back to it",
    "start": "1001790",
    "end": "1007340"
  },
  {
    "text": "later on in the term, so the\nway I'd like you to think about it for now, is that\nsomewhere in the machine,",
    "start": "1007340",
    "end": "1013330"
  },
  {
    "text": "there's a big space that\ncontains all possible values. Right. It's a slight lie, it doesn't\nhave all possible values, but",
    "start": "1013330",
    "end": "1019420"
  },
  {
    "text": "you get the idea. It has, if you like,\nintellectually, all possible values. And when I create a binding, I'm\ntaking a variable name, in",
    "start": "1019420",
    "end": "1027309"
  },
  {
    "text": "this case x, stored somewhere in\na table, and I'm creating a link or a pointer from that\nname to that value.",
    "start": "1027310",
    "end": "1040410"
  },
  {
    "text": "This is a nuance. It's going to make a lot more\nsense later on when we introduce mutation into our\nlanguage, but I want you to",
    "start": "1040410",
    "end": "1046040"
  },
  {
    "text": "start thinking of it that way. Don't think of it as a specific\nbox into which we're putting things; think of it\nas a link to a value.",
    "start": "1046040",
    "end": "1052920"
  },
  {
    "text": "I could have, for example,\nanother assignment statement, and that creates a binding from\ny into that same value,",
    "start": "1052920",
    "end": "1065630"
  },
  {
    "text": "and one of the things as a\nconservist I can do is, I could have a statement like,\nlet z be bound to",
    "start": "1065630",
    "end": "1073179"
  },
  {
    "text": "the value of x. And I said it deliberately\nthat way. That statement says, get the\nvalue of x, which is this",
    "start": "1073180",
    "end": "1078715"
  },
  {
    "text": "link, and give z a pointer\nto the same place.",
    "start": "1078715",
    "end": "1085250"
  },
  {
    "text": "To the value, not to x. OK, and we'll just plant that\nidea, we're going to come back",
    "start": "1085250",
    "end": "1090470"
  },
  {
    "text": "to later on, as we carry on. OK. So if we have variables, one\nof the questions we can ask",
    "start": "1090470",
    "end": "1097770"
  },
  {
    "text": "is, what's the type\nof the variable.",
    "start": "1097770",
    "end": "1105500"
  },
  {
    "text": "And the answer is, it inherits\nit from its value. OK.",
    "start": "1105500",
    "end": "1110549"
  },
  {
    "text": "Yes.",
    "start": "1110550",
    "end": "1115810"
  },
  {
    "text": "So if somewhere in my code, I\nhave that statement, that assignment statement,\nx now is a variable",
    "start": "1115810",
    "end": "1121520"
  },
  {
    "text": "whose value is an integer. Unfortunately, at least in\nmy mind, in Python, these",
    "start": "1121520",
    "end": "1127980"
  },
  {
    "text": "variable bindings are\ndynamic, or the type, rather, is dynamic.",
    "start": "1127980",
    "end": "1135590"
  },
  {
    "text": "Meaning, it changes depending on\nwhat the current value is.",
    "start": "1135590",
    "end": "1140990"
  },
  {
    "text": "Or said a different way, if\nsomewhere later on in the program I do this, x\nnow has changed its",
    "start": "1140990",
    "end": "1150110"
  },
  {
    "text": "type from INT to string. Now why should you care?",
    "start": "1150110",
    "end": "1156130"
  },
  {
    "text": "OK, my view is, I\ndon't like it. Especially in the presence\nof operator overload.",
    "start": "1156130",
    "end": "1164330"
  },
  {
    "text": "Because I might have written\nsome code in which I'm expecting that particular\nvariable to have an integer value. If somewhere later on in the\ncode it shifts to string, I",
    "start": "1164330",
    "end": "1172640"
  },
  {
    "text": "might not be manipulating that\nand getting actual values out, but not what I wanted, and it's\ngoing to be really hard",
    "start": "1172640",
    "end": "1177850"
  },
  {
    "text": "for me to chase it back. So one of the things I would\nlike to suggest is that you develop some good style here,\nand in particular, don't",
    "start": "1177850",
    "end": "1186330"
  },
  {
    "text": "change types arbitrarily.",
    "start": "1186330",
    "end": "1192360"
  },
  {
    "text": "I can't spell today.",
    "start": "1192360",
    "end": "1199380"
  },
  {
    "text": "Meaning, sometimes you need\nto do this, but in general there's-- at least in my view\nand I don't, John, would you agree?-- you just don't\nwant to do this. You don't want to make\nthose changes.",
    "start": "1199380",
    "end": "1205640"
  },
  {
    "text": "It just leads to trouble\ndown the road. OK. Now, last thing about variables,\nand then we're",
    "start": "1205640",
    "end": "1212173"
  },
  {
    "text": "going to start pushing\non this, is where can you use them? And the answer is, you can use\na variable anywhere you can",
    "start": "1212173",
    "end": "1219610"
  },
  {
    "text": "use the value. So, any place it's legal\nto use the value.",
    "start": "1219610",
    "end": "1232630"
  },
  {
    "text": "OK. Now. This is just sort of bringing us\nback up to speed and adding",
    "start": "1232630",
    "end": "1239420"
  },
  {
    "text": "a few more details in. What we really want to\ndo now though is start using this stuff.",
    "start": "1239420",
    "end": "1244900"
  },
  {
    "text": "So, operands. Let us take expressions, get\nvalues out, we can store them away in places, but ultimately\nwe want to do something with",
    "start": "1244900",
    "end": "1252450"
  },
  {
    "text": "them, so we need to now start\ntalking about what are the things we can do inside of\nPython, or any programming language, to manipulate them.",
    "start": "1252450",
    "end": "1258640"
  },
  {
    "text": "And for that, we're going\nto have statements.",
    "start": "1258640",
    "end": "1268960"
  },
  {
    "text": "Statements are basically, if\nyou want to think about it, legal, and I was about to use\nthe word expression except",
    "start": "1268960",
    "end": "1275980"
  },
  {
    "text": "I've misused that elsewhere, so\nlegal commands that Python",
    "start": "1275980",
    "end": "1284530"
  },
  {
    "text": "can interpret.",
    "start": "1284530",
    "end": "1290040"
  },
  {
    "text": "You've already seen\na couple of them. Print, assignment, certainly\ntwo obvious statements,",
    "start": "1290040",
    "end": "1299650"
  },
  {
    "text": "they're commands to\ndo something. Assignment is binding a name\nto a value, print is saying put it back out in the screen.",
    "start": "1299650",
    "end": "1305160"
  },
  {
    "text": "Obviously if you have print as\na way of putting things out, we expect to have ways of\ngetting input in, we're going to see an example that\nin the second.",
    "start": "1305160",
    "end": "1310629"
  },
  {
    "text": "And as we go through the next\nfew lectures, we're going to add in more and more of\nthese statements. But let's look at what we\ncould do with this, OK?",
    "start": "1310630",
    "end": "1316830"
  },
  {
    "text": "And to do this, I'm going to\nuse some code that I've already typed in. So I'm hoping you can\nread that, and it's",
    "start": "1316830",
    "end": "1321850"
  },
  {
    "text": "also in your handout. This is a little file I created,\nall right, and I'm going to start with a sequence\nof these things and walk them",
    "start": "1321850",
    "end": "1329850"
  },
  {
    "text": "along, again I invite you to put\ncomments on that handout so that you can follow what\nwe're going to do. All right?",
    "start": "1329850",
    "end": "1335450"
  },
  {
    "text": "So let's look at the\nfirst part of this. Right now, this is\njust a text file. OK. And I've highlighted in blue up\nthere one of the pieces I'm",
    "start": "1335450",
    "end": "1341789"
  },
  {
    "text": "going to start with. And what do I have? I have a sequence of commands;\nI've got an assignment statement, I've got another\nassignment statement, I've got",
    "start": "1341790",
    "end": "1347710"
  },
  {
    "text": "a print statement, I've got an\ninput statement, which we'll come back to in a second. And I want to basically try\nand use these things to do",
    "start": "1347710",
    "end": "1354350"
  },
  {
    "text": "something with them. Second thing I want to note is,\nthe little hash mark or the pound sign, that's\nidentifying a comment.",
    "start": "1354350",
    "end": "1361600"
  },
  {
    "text": "So what's a comment? It's words to you, or to the\nreader of the code, that are telling you what's going\non inside of this code.",
    "start": "1361600",
    "end": "1367980"
  },
  {
    "text": "OK? Now, these comments, frankly,\nare brain-damaged, or",
    "start": "1367980",
    "end": "1374769"
  },
  {
    "text": "computationally challenged\nif you prefer. Meaning, why in the world do I\nhave to tell the reader that",
    "start": "1374770",
    "end": "1380590"
  },
  {
    "text": "I'm binding x to the\nvalue three? All right? I'm putting them in there\nto make a point. In general, good programming\nstyle says you put in comments",
    "start": "1380590",
    "end": "1388510"
  },
  {
    "text": "that are going to be valuable\nin helping you as a reader understand what's going\non inside of the code.",
    "start": "1388510",
    "end": "1394780"
  },
  {
    "text": "It could be, what's the\nintuition behind this piece of code. It could be, preconditions\nI want to have on input. It could be, explanations of\nspecific things you're doing.",
    "start": "1394780",
    "end": "1402419"
  },
  {
    "text": "But you need to have those\ncomments there. Now, this becomes a little bit\nof one of those motherhood and",
    "start": "1402420",
    "end": "1407539"
  },
  {
    "text": "apple pie kinds of lectures. You know, your mother always\ntold you to eat brussels sprouts because it\nwas good for you. Well this is a brussels sprouts\ncomment. everybody",
    "start": "1407540",
    "end": "1414050"
  },
  {
    "text": "goes yeah, yeah, yeah,\ncomments, of course. Of course we're going\nto do comments. And they never do. So my challenge to you, and I\nknow Professor Guttag can do",
    "start": "1414050",
    "end": "1420730"
  },
  {
    "text": "this, my challenge to you is, a\nyear from now, come back and look at code you wrote here.",
    "start": "1420730",
    "end": "1426650"
  },
  {
    "text": "Can you still understand what it\nwas you were trying to do? I don't know, John, if\nyou'd agree, right?",
    "start": "1426650",
    "end": "1432170"
  },
  {
    "text": "If you can read the code a\nyear later, even code you wrote yourself, it's a good\nsign that you put good comments in, right?",
    "start": "1432170",
    "end": "1439340"
  },
  {
    "text": "Second good piece\nof style here is choice of variable names. These are lousy.",
    "start": "1439340",
    "end": "1445200"
  },
  {
    "text": "Deliberately. OK? I'm just using simple things\nlike x and y and z because I want to make it, just\nget through the",
    "start": "1445200",
    "end": "1450600"
  },
  {
    "text": "lecture if you like. But in general, the choice of\nvariable name is a great way of commenting your code.",
    "start": "1450600",
    "end": "1455860"
  },
  {
    "text": "Use variable names\nthat make sense. That little problem set\nzero that you did.",
    "start": "1455860",
    "end": "1461250"
  },
  {
    "text": "You read in a couple\nof values, you probably stored them away. My bet is, you used simple\nnames like x and y.",
    "start": "1461250",
    "end": "1467340"
  },
  {
    "text": "A much better name would have\nbeen firstname, lastname, as the name of the variable to tell\nyou what you were trying to capture there.",
    "start": "1467340",
    "end": "1473540"
  },
  {
    "text": "OK. The other piece I want to say\nabout variable names is, once I have that choice of variable\nname, I can use it, but in",
    "start": "1473540",
    "end": "1481980"
  },
  {
    "text": "fact there are a few things that\nI can't use in terms of variable names. So, these are an important way\nof documenting, but there're",
    "start": "1481980",
    "end": "1498100"
  },
  {
    "text": "some things excluded. And in particular, there are\nsome key words that Python is",
    "start": "1498100",
    "end": "1504210"
  },
  {
    "text": "going to use that have\nto be excluded. Let me highlight that. As I said, right now that's\njust text file.",
    "start": "1504210",
    "end": "1510860"
  },
  {
    "text": "I'm going to save this away--\nyeah, not that way, I'm going to save this away-- with the\nsubscript, or the suffix",
    "start": "1510860",
    "end": "1522700"
  },
  {
    "text": "rather, py to make\nit a Python file. Yeah, and I know it's already\nthere but I'm going to do it,",
    "start": "1522700",
    "end": "1528600"
  },
  {
    "text": "and I get some wonderful\ncolors. But these are important, OK? So notice what I have\nup there now.",
    "start": "1528600",
    "end": "1534640"
  },
  {
    "text": "Comments appear in red. I can see those. There's a keyword, which I'm\ngoing to highlight right up here, print, which is in,\nI don't know what",
    "start": "1534640",
    "end": "1541850"
  },
  {
    "text": "that color is, orange? There's a function in purple,\nthere's a string in green, and",
    "start": "1541850",
    "end": "1548330"
  },
  {
    "text": "in black I have the assignment\nstatements. That print is a keyword. It's a command to Python\nto do something.",
    "start": "1548330",
    "end": "1556980"
  },
  {
    "text": "As a consequence, I can't use\nit as a variable name. All right, think about\nit for a second. If I wanted to use print as a\nvariable name, how do I get",
    "start": "1556980",
    "end": "1564680"
  },
  {
    "text": "the system to decide gee, do\nI want print as a value for something, or do I want\nprint as a command?",
    "start": "1564680",
    "end": "1571559"
  },
  {
    "text": "So there's a sequence of these\nthat are blocked out, and I-- John, I think there are\nwhat, twenty-eight? Something like that,\nTAs, is that right?",
    "start": "1571560",
    "end": "1578020"
  },
  {
    "text": "Twenty-eight keywords\nthat are blocked? We'll find them as\nwe go along--",
    "start": "1578020",
    "end": "1583240"
  },
  {
    "text": "OK. Having done this now, I can\nsimply go ahead and run this, and in fact if I go up here to\nrun, you'll see I've got both",
    "start": "1583240",
    "end": "1589120"
  },
  {
    "text": "an option to check the module,\nthough in this case I'm just going to run it. Oh, notice what happened.",
    "start": "1589120",
    "end": "1595340"
  },
  {
    "text": "It ran through that sequence of\ninstructions, in particular it bound x to the value three,\nand then it took x times x,",
    "start": "1595340",
    "end": "1601450"
  },
  {
    "text": "got the value of x multipied by\nx, which of course is nine, bound that to the value of x,\nand then it printed out the",
    "start": "1601450",
    "end": "1606670"
  },
  {
    "text": "value, and now it's sitting\nhere waiting for an input. You notice what it did, it\nprinted out that little, right",
    "start": "1606670",
    "end": "1612179"
  },
  {
    "text": "up here I'd said enter a number\nand that's what it's printed out, so I can enter a\nnumber and it prints it out.",
    "start": "1612180",
    "end": "1618790"
  },
  {
    "text": "Great. Let's run it again. Actually for that, I can just\nuse, if I'm lucky, function",
    "start": "1618790",
    "end": "1624370"
  },
  {
    "text": "F5, which didn't work, so let me\ntry it again., here we go. We're going to run that module.",
    "start": "1624370",
    "end": "1631549"
  },
  {
    "text": "OK. Whoa.",
    "start": "1631550",
    "end": "1637049"
  },
  {
    "text": "What happened? I said enter a number. I didn't. I gave it a string. And it still took it.",
    "start": "1637050",
    "end": "1643240"
  },
  {
    "text": "And printed it up. Well, this is one of the places\nwhere I want to come back to that highlighting\nof what do things do?",
    "start": "1643240",
    "end": "1649840"
  },
  {
    "text": "Even though my statement said\nenter a number, in particular, raw input here simply takes in a\nset of characters and treats",
    "start": "1649840",
    "end": "1657040"
  },
  {
    "text": "it as a string. And then prints it back out. So if in fact I wanted to make\nsure this was a number, I",
    "start": "1657040",
    "end": "1662220"
  },
  {
    "text": "should have done something like\neither try and convert it to a number, which of course\nfailed here, or put in a check",
    "start": "1662220",
    "end": "1667330"
  },
  {
    "text": "to say where it is. So it's a way of reminding you,\nI've got to be careful about the types of things\nthat I put in.",
    "start": "1667330",
    "end": "1673530"
  },
  {
    "text": "OK. This is still boring, so let's\nstep on the accelerator.",
    "start": "1673530",
    "end": "1681100"
  },
  {
    "text": "What I have now is the\nfollowing: I can write expressions, do combinations of\nthings to get out values, I",
    "start": "1681100",
    "end": "1687659"
  },
  {
    "text": "can store them away, I\ncan print them up. But literally all I can do at\nthis stage is write what we",
    "start": "1687660",
    "end": "1693760"
  },
  {
    "text": "would call a straight-line\nprogram, that is, a program in which we execute in which we\nexecute the sequence of",
    "start": "1693760",
    "end": "1708540"
  },
  {
    "text": "instructions one by one. Simply walk down that\nlist. That's what we",
    "start": "1708540",
    "end": "1714240"
  },
  {
    "text": "just did there, right? We just walked through that\nlist. This is boring. In fact, you can do some nice\nthings to prove what is the",
    "start": "1714240",
    "end": "1719290"
  },
  {
    "text": "class of functions you can\ncompute with straight-line programs, and what you'd see if\nyou did that is, it's not",
    "start": "1719290",
    "end": "1724330"
  },
  {
    "text": "particularly interesting. OK. Let's go back and think\nabout our recipes.",
    "start": "1724330",
    "end": "1729890"
  },
  {
    "text": "What we use as our\nmotivation here. Even in real recipes, you\nhave things like, if needed, add sugar.",
    "start": "1729890",
    "end": "1739210"
  },
  {
    "text": "That's a decision. That's a conditional. That's a branch. That says, if something\nis true, do something.",
    "start": "1739210",
    "end": "1744909"
  },
  {
    "text": "Otherwise, do something\ndifferent. So to really add to this, we\nneed to have branching programs. What I mean by that\nis, a branching program is",
    "start": "1744910",
    "end": "1759370"
  },
  {
    "text": "something that can change the\norder of instructions based on",
    "start": "1759370",
    "end": "1772750"
  },
  {
    "text": "some test. And that test is\nusually a value of a variable.",
    "start": "1772750",
    "end": "1786620"
  },
  {
    "text": "OK. And these get a whole lot\nmore interesting. So let's look at a little\nexample, and this is going to,",
    "start": "1786620",
    "end": "1792260"
  },
  {
    "text": "excuse me, both allow us\nintroduce the syntax as well as what we want to have\nas the flow of control inside of here.",
    "start": "1792260",
    "end": "1797530"
  },
  {
    "text": "So let me go back up here, and\nI'm going to comment out that",
    "start": "1797530",
    "end": "1802960"
  },
  {
    "text": "region, and let's uncomment\nthis region.",
    "start": "1802960",
    "end": "1810250"
  },
  {
    "text": "I want to write a little\npiece of code. It's going to print out even or\nodd, depending on whether the value I put in, which is x\nin this case, is even or odd.",
    "start": "1810250",
    "end": "1819100"
  },
  {
    "text": "Think about that. That says, if this thing has\nsome particular value, I want",
    "start": "1819100",
    "end": "1824490"
  },
  {
    "text": "to do one thing; otherwise,\nI want to do something different. And let's look at the\nsyntax of this.",
    "start": "1824490",
    "end": "1829970"
  },
  {
    "text": "This is the first of the\nconditionals that we're going to see.",
    "start": "1829970",
    "end": "1836530"
  },
  {
    "text": "Notice the format. I'm going to go up there. The first statement right\nhere, that's just an assignment statement, I'm\ngiving some value to x.",
    "start": "1836530",
    "end": "1843100"
  },
  {
    "text": "We could make it something\ndifferent. And then, notice the\nstructure here. The next three statements.",
    "start": "1843100",
    "end": "1848309"
  },
  {
    "text": "First of all, IF is a keyword.\nwhich makes sense. It is followed, as you can see\nthere, by some expression,",
    "start": "1848310",
    "end": "1855430"
  },
  {
    "text": "followed by a colon. And in fact, that colon is\nimportant, so let me stress this over here.",
    "start": "1855430",
    "end": "1860679"
  },
  {
    "text": "The colon is important It's\ndefining the beginning of a",
    "start": "1860680",
    "end": "1871930"
  },
  {
    "text": "block of instructions. Yes sir. STUDENT: [UNINTELLIGIBLE]",
    "start": "1871930",
    "end": "1877200"
  },
  {
    "text": "PROFESSOR JIM ERICSON: Based on\na test. Usually the value of a variable. OK, so let me go back\nto where I am.",
    "start": "1877200",
    "end": "1882620"
  },
  {
    "text": "I'm looking at that\npiece of code. What that colon is saying is,\nI'm about to begin a sequence of instructions that I want\nto treat as a block.",
    "start": "1882620",
    "end": "1889840"
  },
  {
    "text": "So it identifies a block\nof instructions.",
    "start": "1889840",
    "end": "1898940"
  },
  {
    "text": "It's, and in particular, the\ncolon is the start, and the carriage return is the end.",
    "start": "1898940",
    "end": "1908340"
  },
  {
    "text": "Now what in the world\ndoes that mean? I'm doing a lot of words here,\nlet me try and say this a little bit better. That code says the following:\nthe IF says, I've got an",
    "start": "1908340",
    "end": "1914290"
  },
  {
    "text": "expression, I'm going\nto evaluate it. If that value is true, I want\nto do a set of things.",
    "start": "1914290",
    "end": "1921350"
  },
  {
    "text": "And that set of things is\nidentified by the sequence of commands that are indented in,\nthis one right here, following",
    "start": "1921350",
    "end": "1929020"
  },
  {
    "text": "the colon but before I get\nback to the same place in terms of the indentation.",
    "start": "1929020",
    "end": "1934940"
  },
  {
    "text": "If that test is not true, I want\nto skip this instruction, and there's a second keyword\nelse, followed by a colon, and",
    "start": "1934940",
    "end": "1943340"
  },
  {
    "text": "that tells me the thing\nI want to do in the case that it's false. So in fact if I run this,\nah, and save it, and",
    "start": "1943340",
    "end": "1956020"
  },
  {
    "text": "it prints out odd. So, what happened here? Well, let's look at the code.",
    "start": "1956020",
    "end": "1961250"
  },
  {
    "text": "Right? x is initially\nbound to fifteen. I get to the IF. The IF says, evaluate that\nnext expression.",
    "start": "1961250",
    "end": "1966550"
  },
  {
    "text": "In that next expression, I'm\nactually taking advantage of the fact that I'm doing integer\nmultiplication and division here.",
    "start": "1966550",
    "end": "1972720"
  },
  {
    "text": "Right, that divide is, if x is\nan integer and two is an integer, what's it\ngoing to do? If x was even, x divided by two\nis going to be actually",
    "start": "1972720",
    "end": "1979670"
  },
  {
    "text": "the half of x, right? If x is odd, that integer\ndivision is going to give me",
    "start": "1979670",
    "end": "1984740"
  },
  {
    "text": "the number of multiples of two,\nthat go into x, plus a remainder, which I'm going\nto throw away.",
    "start": "1984740",
    "end": "1991580"
  },
  {
    "text": "In either case, I take that\nvalue and multiply back by two, if it was even I get back\nthe original number, if it was",
    "start": "1991580",
    "end": "1997929"
  },
  {
    "text": "odd, I'm not going to get back\nthe original number, so I can just check to see if\nthey're the same.",
    "start": "1997930",
    "end": "2002940"
  },
  {
    "text": "OK, so a little nuance\nthat I'm using there. So, the first thing that IF\ndoes, bleah that IF says is, evaluate that expression and\nif it's true, do the next",
    "start": "2002940",
    "end": "2010220"
  },
  {
    "text": "thing, the thing after\nthe colon. In this case it's not true, so\nit's going to skip down and evaluate the thing printed\nup the odd.",
    "start": "2010220",
    "end": "2018110"
  },
  {
    "text": "OK. What-- yes. STUDENT: [INAUDIBLE] PROFESSOR JIM ERICSON:\nThank you. I was hoping somebody would\nask that question.",
    "start": "2018110",
    "end": "2024510"
  },
  {
    "text": "The question was, if you didn't\nhear, why do I have two equal signs? It's like I'm doing\nthis, right?",
    "start": "2024510",
    "end": "2031380"
  },
  {
    "text": "Anybody have a se--%uFFFD\nwhy don't I just use an equal sign? I want to know if something's\nequal to something. Yeah. STUDENT: [INAUDIBLE] PROFESSOR JIM ERICSON:\nAbsolutely.",
    "start": "2031380",
    "end": "2038875"
  },
  {
    "text": "The equal sign is\ngoing to bind-- Nice catch.",
    "start": "2038875",
    "end": "2045060"
  },
  {
    "text": "John, this is so much\nfun, throwing candy. I've got to say, we've got\nto do this more often-- Right. Let me, let me get\nto the point. What does an equal sign do?",
    "start": "2045060",
    "end": "2050520"
  },
  {
    "text": "It is an assignment. It says, take this thing on the\nleft and use it as a name to bind to the value\non the right.",
    "start": "2050520",
    "end": "2057050"
  },
  {
    "text": "It's not what I want here. Having already chosen to use\nequal as an assignment, I need something else to\ndo comparison.",
    "start": "2057050",
    "end": "2063129"
  },
  {
    "text": "And that's why I use\ndouble equals. Those two equal signs are\nsaying, is this thing equal to, in value, the thing\non the other side?",
    "start": "2063130",
    "end": "2071450"
  },
  {
    "text": "OK. Now, having done that, again I\nwant to stress this idea and I'm going to write it out one\nmore time, that there's a",
    "start": "2071450",
    "end": "2078520"
  },
  {
    "text": "particular format here. So we have if, and that is\nfollowed by, I'm going to use",
    "start": "2078520",
    "end": "2087080"
  },
  {
    "text": "angle braces here just to\nindicates something goes in here, some test followed\nby a colon.",
    "start": "2087080",
    "end": "2094080"
  },
  {
    "text": "That is followed by a block\nof instructions.",
    "start": "2094080",
    "end": "2102470"
  },
  {
    "text": "And we have an ELSE, followed by\na colon in some other block",
    "start": "2102470",
    "end": "2108420"
  },
  {
    "text": "of instructions.",
    "start": "2108420",
    "end": "2117240"
  },
  {
    "text": "And I want you to get used to\nthis, that colon is important, it identifies the start, and\nthen the set of indented",
    "start": "2117240",
    "end": "2123860"
  },
  {
    "text": "things identify all the things\nat the same level, and when we reset back to the previous\nlevel, that's when we go back",
    "start": "2123860",
    "end": "2129130"
  },
  {
    "text": "to where we were. OK. Now, that's a nice simple little\ntest, let's look at a",
    "start": "2129130",
    "end": "2135750"
  },
  {
    "text": "couple of other examples\nto get a sense of what this will do. OK, let me comment this out,\nand let's look at this next",
    "start": "2135750",
    "end": "2148130"
  },
  {
    "text": "little piece of code. All right. I'm binding a z to be some\nvalue, and then I'm",
    "start": "2148130",
    "end": "2153670"
  },
  {
    "text": "going to run this. Well, let's just run it\nand see what it does.",
    "start": "2153670",
    "end": "2162040"
  },
  {
    "text": "Nothing. OK, so why? Well, let's look at it. I'm doing a test there to say,\nif the string x is less than",
    "start": "2162040",
    "end": "2168950"
  },
  {
    "text": "the value of b, and x does not\nappear before b as strings, then I was going to do, oh, a\ncouple of things, because",
    "start": "2168950",
    "end": "2176550"
  },
  {
    "text": "they're at the same\nblock level. Given that that wasn't\ntrue, it did nothing.",
    "start": "2176550",
    "end": "2182329"
  },
  {
    "text": "Now, wait a minute, you say,\nwhere's the ELSE clause? And the answer is,\nI don't need one. All right, if this is purely a\ntest of, if this is true do",
    "start": "2182330",
    "end": "2189819"
  },
  {
    "text": "this otherwise I don't care, I\ndon't need the ELSE clause in there to identify it. All right?",
    "start": "2189820",
    "end": "2195820"
  },
  {
    "text": "Second thing I want to look at\nis, suppose I compare that the one below it. Oops, that I don't want to do.",
    "start": "2195820",
    "end": "2205720"
  },
  {
    "text": "Comment that out, and let's\nuncomment this.",
    "start": "2205720",
    "end": "2213840"
  },
  {
    "text": "Yeah, I've still got a binding\nfor z and I'm giving it the same test, but notice now I've\ngot the two same commands but",
    "start": "2213840",
    "end": "2219710"
  },
  {
    "text": "they have different\nindentation. In this case, in fact I do\nget a different behavior.",
    "start": "2219710",
    "end": "2228790"
  },
  {
    "text": "Why? Because that block identifies a\nset of things that I'm going",
    "start": "2228790",
    "end": "2234100"
  },
  {
    "text": "to do if the test is true. If the test was not true, notice\nthat that last command for print Mon is now back at the\nsame level as the IF, so",
    "start": "2234100",
    "end": "2241519"
  },
  {
    "text": "what this says is the IF does\nthe test, having done the test, it decides I'm not going\nto do anything in the block",
    "start": "2241520",
    "end": "2247300"
  },
  {
    "text": "below it, I'm going to skip\ndown therefore to the next instruction at the same level\nas the IF, which gets me to",
    "start": "2247300",
    "end": "2252850"
  },
  {
    "text": "the second print statement. OK. So now we're seeing some of\nthese variations, let's see",
    "start": "2252850",
    "end": "2258829"
  },
  {
    "text": "what else can we do here. So let me just to try something\na little more interesting, and then we'll\nget to writing some simple programs. So I'm going to\ncomment those out, and let's",
    "start": "2258830",
    "end": "2267000"
  },
  {
    "text": "go down to this piece of\ncode, and uncomment it.",
    "start": "2267000",
    "end": "2273820"
  },
  {
    "text": "Ooh yes, that was brilliant. Let's try this again.",
    "start": "2273820",
    "end": "2279010"
  },
  {
    "text": "And uncomment that, and\nuncomment it again.",
    "start": "2279010",
    "end": "2284980"
  },
  {
    "text": "Right, so here's a little piece\nof code that's going to print out the smallest\nvalue of three. And notice what this\nis showing is that",
    "start": "2284980",
    "end": "2292140"
  },
  {
    "text": "the IFs can be nested. All right, it's so if I looked\nat it, it's going to say that IF x is y-- sorry, IF x is less\nthan y, THEN check to see",
    "start": "2292140",
    "end": "2298859"
  },
  {
    "text": "IF x is less than z, and if\nthat's true, print out x is the smallest. And notice the\nstructure of it, if it's not",
    "start": "2298860",
    "end": "2306260"
  },
  {
    "text": "true I'm going to go to that\nnext ELSE, and print out that z is smallest. If the first test\nwasn't true, I'm going to",
    "start": "2306260",
    "end": "2311329"
  },
  {
    "text": "skip that whole block and just\ngo down and print out that y was smallest. So notice the\nnesting, I can flow my way",
    "start": "2311330",
    "end": "2317190"
  },
  {
    "text": "through how those tests are\nactually going to take place. All right, so let's run this\nand see what happens.",
    "start": "2317190",
    "end": "2326570"
  },
  {
    "text": "Great. y is smallest. OK. Is that code correct?",
    "start": "2326570",
    "end": "2335070"
  },
  {
    "text": "Is that a tentative\nhand back there? Yeah. STUDENT: Let me compare\ny to [INAUDIBLE]",
    "start": "2335070",
    "end": "2340900"
  },
  {
    "text": "PROFESSOR JIM ERICSON: Yeah,\nit's not doing all of the comparisons. All right, and let's just check\nthis out, because I want to make a point of this, let's\ngo back and do the following.",
    "start": "2340900",
    "end": "2348220"
  },
  {
    "text": "Let's take y, change it to\nthirteen, let's run it, hmm.",
    "start": "2348220",
    "end": "2358150"
  },
  {
    "text": "So what did I miss here? Two important points. First one, when I write a piece\nof code, especially code",
    "start": "2358150",
    "end": "2364770"
  },
  {
    "text": "that has branches in it, when\nI design test cases for that piece of code, I should try and\nhave a specific test case",
    "start": "2364770",
    "end": "2372310"
  },
  {
    "text": "for each possible path\nthrough the code. And by just doing that, I just\nspotted, there's a bug here.",
    "start": "2372310",
    "end": "2378640"
  },
  {
    "text": "And the bug was in my thinking,\nI did not look for all of the tests. So the way I can fix that, is,\nlet me comment that out, and",
    "start": "2378640",
    "end": "2389680"
  },
  {
    "text": "keep doing that, comment that\nout, let's uncomment this,",
    "start": "2389680",
    "end": "2403609"
  },
  {
    "text": "notice the structure here. I now have multiple tests. So actually, let's just run\nit and then we'll talk about what it does.",
    "start": "2403610",
    "end": "2409140"
  },
  {
    "text": "I run this, yeah, I have a\nsyntax error, yes indeed,",
    "start": "2409140",
    "end": "2416319"
  },
  {
    "text": "because I forgot to comment that\none out, all right, and cue, we'll try it again.",
    "start": "2416320",
    "end": "2427640"
  },
  {
    "text": "Ah-ha! And let's quickly look at\nthe structure of this. This now has, gee, a funny\nthing, it says IF x is less",
    "start": "2427640",
    "end": "2434740"
  },
  {
    "text": "than y AND x is less than\nz, then do something. And then it has a strange thing\ncalled ELIF, which is",
    "start": "2434740",
    "end": "2442300"
  },
  {
    "text": "simply short for else/if in a\nsecond test. So the way to think about this in terms of\nflow is, it starts with that",
    "start": "2442300",
    "end": "2448369"
  },
  {
    "text": "if and it says, check both\nof those things. And that fact that both of those\nthings is the fact that",
    "start": "2448370",
    "end": "2454000"
  },
  {
    "text": "we're using Boolean\ncombination here.",
    "start": "2454000",
    "end": "2466520"
  },
  {
    "text": "It is to say, we can take any\nlogical expressions, combine them together with AND, OR,\nor NOT to make a complex",
    "start": "2466520",
    "end": "2474440"
  },
  {
    "text": "expression, and use the value of\nthat expression as my test. And that's literally what I've\ndone there, right, I've got x",
    "start": "2474440",
    "end": "2479755"
  },
  {
    "text": "less than y, that's a test, it\nreturns a Boolean, which by the way is the other type, at\nleast I would include here, it",
    "start": "2479755",
    "end": "2485125"
  },
  {
    "text": "has only two values, which are\ntrue and false, and what that",
    "start": "2485125",
    "end": "2492880"
  },
  {
    "text": "code says, if x is less than y,\nAND, logically, whatever I put up there, x is less than\nz, then the combination is",
    "start": "2492880",
    "end": "2502620"
  },
  {
    "text": "true, and therefore I'm\ngoing to do something. So AND is if both arguments are\ntrue it's true, OR is if",
    "start": "2502620",
    "end": "2507850"
  },
  {
    "text": "either argument it's true it's\ntrue, NOT is if the argument is not true it's true, and then\nthe last piece, as I said",
    "start": "2507850",
    "end": "2513565"
  },
  {
    "text": "is, I can now have a sequence\nof things I want to do. So if this is true do something\nelse, otherwise test",
    "start": "2513565",
    "end": "2518690"
  },
  {
    "text": "and see if this is true, do\nsomething else, as many as I like followed by the end. And ELSE, it says, here's\nwhat I want to do.",
    "start": "2518690",
    "end": "2525560"
  },
  {
    "text": "OK. Now. Having added this in, I have\nbranching instructions.",
    "start": "2525560",
    "end": "2532330"
  },
  {
    "text": "I have simple branching\nprograms. These are still awfully simple. OK? And they're awfully simple\nbecause, all I can do now, is",
    "start": "2532330",
    "end": "2540530"
  },
  {
    "text": "decide whether to execute some\npiece of code or another. Said a different way, in the\ncase of the straight-line",
    "start": "2540530",
    "end": "2546430"
  },
  {
    "text": "programs, how long would it\ntake to run a program? Well, basically, however many\ninstructions I have, because",
    "start": "2546430",
    "end": "2551760"
  },
  {
    "text": "I've got to do each\none in order. With simple branching, how long\nis it going to take to run a piece of code?",
    "start": "2551760",
    "end": "2558430"
  },
  {
    "text": "Well at most, I'm going to\nexecute each instruction once. All right? Because the IFs are saying, if\nit's true do this, otherwise",
    "start": "2558430",
    "end": "2564320"
  },
  {
    "text": "skip on it. Therefore, for simple branching\nprograms, the length of time, the complexity\nthe code, is what",
    "start": "2564320",
    "end": "2572250"
  },
  {
    "text": "we would call constant. That is, it's at most the length\nof the actual number of instructions. It doesn't depend\non the input.",
    "start": "2572250",
    "end": "2579840"
  },
  {
    "text": "Real simple programs. Let's take another\nsimple example. Suppose I want to compute\nthe average age of all the MIT faculty.",
    "start": "2579840",
    "end": "2585750"
  },
  {
    "text": "There's about a thousand\nof us. However I do that, I know that\nshould inherently take more time than it takes to compute\nthe average age of all the",
    "start": "2585750",
    "end": "2592880"
  },
  {
    "text": "EECS faculty. There's only 125 of us. And that should take more time\nthan what it takes to compute",
    "start": "2592880",
    "end": "2599200"
  },
  {
    "text": "the average of John's and my\nages, instructors in 600, because there's only\ntwo of us. All right, those pieces of\ncode inherently involved",
    "start": "2599200",
    "end": "2607730"
  },
  {
    "text": "something that does depend on\nthe size of the input, or on the particular input. And that is a preface to an\nidea of computational",
    "start": "2607730",
    "end": "2615060"
  },
  {
    "text": "complexity we're going\nto come back to. One of the things we want to\nhelp you do is identify the different classes of algorithms,\nwhat their costs",
    "start": "2615060",
    "end": "2621170"
  },
  {
    "text": "are, and how you can map\nproblems into the most efficient class to do\nthe computation.",
    "start": "2621170",
    "end": "2627200"
  },
  {
    "text": "OK. Now. Think for a second about\ncomputing the average age of",
    "start": "2627200",
    "end": "2632450"
  },
  {
    "text": "the faculty. You can already kind of\nsee what I want to do. I, somehow if, I want to walk\nthrough some sequence of data",
    "start": "2632450",
    "end": "2637960"
  },
  {
    "text": "structures, gathering up or\ndoing the same thing, adding ages in until I get a total\nage and then divide by the",
    "start": "2637960",
    "end": "2643420"
  },
  {
    "text": "number faculty. How do I write a piece\nof code for that? Well, let's go back\nup to our original",
    "start": "2643420",
    "end": "2649230"
  },
  {
    "text": "starting point of recipes. And I'm sure you don't remember,\nbut one of the things I had in my recipe, is\nbeat egg whites until stiff.",
    "start": "2649230",
    "end": "2658820"
  },
  {
    "text": "OK. That until is an\nimportant word. It's actually defining a test.\nLet me rephrase it into",
    "start": "2658820",
    "end": "2664559"
  },
  {
    "text": "garbled English that'll lead\nmore naturally into what I want to do. While the egg whites are\nnot stiff, beat them.",
    "start": "2664560",
    "end": "2671950"
  },
  {
    "text": "That is a different\nkind of structure. It has a test in it, which is\nthat while, while something is true, do something, but I\nwant to keep doing it.",
    "start": "2671950",
    "end": "2680970"
  },
  {
    "text": "And so for that, we need\nto add one last thing. Which is iteration.",
    "start": "2680970",
    "end": "2689350"
  },
  {
    "text": "Or loops. We're going to see variations of\nthis, we're going to see a variation of it called\nrecursion, a little later on,",
    "start": "2689350",
    "end": "2694369"
  },
  {
    "text": "but for now we're just going\nto talk about how do we do iterations. And I want to show you an\nexample of this, to lead to",
    "start": "2694370",
    "end": "2700370"
  },
  {
    "text": "both the syntax, and\nto the semantics. And let me comment that out,\nand let's go to this one.",
    "start": "2700370",
    "end": "2715190"
  },
  {
    "text": "All right. What does this piece\nof code say? Not, what does it do, but\nwhat does it say. Well, the first three statements\nare just assignment",
    "start": "2715190",
    "end": "2721140"
  },
  {
    "text": "statements. I'm binding x, y, and iters\nleft to some values. And then notice the structure, I\ngot a keyword WHILE, there's",
    "start": "2721140",
    "end": "2727700"
  },
  {
    "text": "that color identifying it, and\nin parentheses I have a test. I'm expecting the value that\ntest to be a Boolean.",
    "start": "2727700",
    "end": "2734869"
  },
  {
    "text": "Followed by a colon. The colon's identifying\na block of code. And what this is\nsaying is, gee.",
    "start": "2734870",
    "end": "2741390"
  },
  {
    "text": "Check to see if the variable\niters left has a value greater than zero. If it does, then execute\neach of the",
    "start": "2741390",
    "end": "2747600"
  },
  {
    "text": "instructions in that block. So I'm going to have an\nassignment of y, I'm going to have an assignment of iters\nleft, I've got a comment that",
    "start": "2747600",
    "end": "2753890"
  },
  {
    "text": "I had borrowed in order to do\nsome debugging, and then what do I want it to do? I want it to go back around to\nthe test. Once again, say, is",
    "start": "2753890",
    "end": "2762190"
  },
  {
    "text": "that test true? If it is true, execute the\nsequence of instructions.",
    "start": "2762190",
    "end": "2767490"
  },
  {
    "text": "So in fact we can block this\nout and see what it does. If I make a little chart here,\nI've got x, y, and iters left.",
    "start": "2767490",
    "end": "2776400"
  },
  {
    "text": "x starts off as I think I set\nit up as, here I can't even read it, is x is three, y is\nzero, iters left is three.",
    "start": "2776400",
    "end": "2784800"
  },
  {
    "text": "I can hand-simulate it. It says, is the value of iters\nleft greater than zero? Yes it is. So, execute those two\ninstructions.",
    "start": "2784800",
    "end": "2790710"
  },
  {
    "text": "It says, take value of y and\nvalue of x, add them together, and create that as the\nnew value of y.",
    "start": "2790710",
    "end": "2796600"
  },
  {
    "text": "All right. That's the assigned statement. It says, take iters left,\nsubtract one from it, and bind that as the new value\nof iters left.",
    "start": "2796600",
    "end": "2804830"
  },
  {
    "text": "Having reached the end of the\nblock, go back up and check the test. Is iters left\ngreater than zero? Yes it is.",
    "start": "2804830",
    "end": "2810550"
  },
  {
    "text": "So, evaluate the same sequence\nof instructions again. y plus x is six, that's my new value\nof y, two minus one is one,",
    "start": "2810550",
    "end": "2817320"
  },
  {
    "text": "that's my new value of iters\nleft, go back up. Is iters left greater\nthan zero? Yes it is.",
    "start": "2817320",
    "end": "2822720"
  },
  {
    "text": "So once more, thank God I didn't\ntake 47 as an example, x plus y, subtract one from\niters left, go back up to the",
    "start": "2822720",
    "end": "2832049"
  },
  {
    "text": "test. Is iters left's value\ngreater than zero? No, it is not. Therefore, skip the rest of that\nblock of code and go to",
    "start": "2832050",
    "end": "2840190"
  },
  {
    "text": "the next instruction, which\nis, ah, print out y. In fact, if we test this,\nson of a gun.",
    "start": "2840190",
    "end": "2849270"
  },
  {
    "text": "Got a simple square\nprocedure,. Right, It's just squaring an\ninteger, is what it's doing.",
    "start": "2849270",
    "end": "2854860"
  },
  {
    "text": "But notice the structure. Now I have the ability to create\na loop, that is, to reuse the same pieces of\ncode over and over",
    "start": "2854860",
    "end": "2861880"
  },
  {
    "text": "again as I go around. And this adds, now, a lot\nof power to the kinds",
    "start": "2861880",
    "end": "2867030"
  },
  {
    "text": "of code I can write. Notice some other things I want\nto highlight on this. All right?",
    "start": "2867030",
    "end": "2872610"
  },
  {
    "text": "The first one is, that test\nhas to involve-- shouldn't have to, but almost always is\ngoing to involve-- the value",
    "start": "2872610",
    "end": "2879300"
  },
  {
    "text": "of some variable. What if I don't change the value\nof that variable inside",
    "start": "2879300",
    "end": "2885340"
  },
  {
    "text": "of the code? Or, another way of saying it\nis, what if I did this?",
    "start": "2885340",
    "end": "2891730"
  },
  {
    "text": "Comment it up. What happens if I\nrun this sucker? STUDENT: [INAUDIBLE]",
    "start": "2891730",
    "end": "2897650"
  },
  {
    "text": "PROFESSOR JIM ERICSON: Yeah. It'll go forever. Absolutely, right? It's going to loop into\nan infinite loop--",
    "start": "2897650",
    "end": "2903390"
  },
  {
    "text": "I think I can hit this close,\nah, no I can't, boy what a terrible aim-- All right, what has\n[UNINTELLIGIBLE PHRASE] try",
    "start": "2903390",
    "end": "2910119"
  },
  {
    "text": "again, the point I'm trying to\nmake here-- thank God we're at the end of this lecture, my\ntongue is falling apart-- the point I'm trying to make is,\nthat test needs to involve",
    "start": "2910120",
    "end": "2917940"
  },
  {
    "text": "some loop variable\nthat is changing. Otherwise the test is always\ngoing to be true, we're going to go off here, but this would\nloop forever if I did that.",
    "start": "2917940",
    "end": "2925320"
  },
  {
    "text": "All right. Second question: or maybe a\nbetter way of saying this, and the general format you're likely\nto see here is, a test",
    "start": "2925320",
    "end": "2931980"
  },
  {
    "text": "involving a variable name,\nwhich must be initialized outside of the loop, and which\ninterior to the loop gets",
    "start": "2931980",
    "end": "2937910"
  },
  {
    "text": "changed, so that the test\nis going to change. Here's the second question. What value of inputs, what\nvalues of x will this run",
    "start": "2937910",
    "end": "2945280"
  },
  {
    "text": "correctly for? Probably should be\nintegers, right?",
    "start": "2945280",
    "end": "2950770"
  },
  {
    "text": "Otherwise, this is going to be\ndoing something strange, but all integers?",
    "start": "2950770",
    "end": "2956339"
  },
  {
    "text": "All right, suppose I do this. It's my last example.",
    "start": "2956340",
    "end": "2964320"
  },
  {
    "text": "Yeah, how about that, right? We knew this was trying to do\nsquaring, so intellectually we",
    "start": "2964320",
    "end": "2969450"
  },
  {
    "text": "know we can square -4, it\nought to be 16, but what happens here? Double fudge knuckle.",
    "start": "2969450",
    "end": "2974940"
  },
  {
    "text": "All right? It's going to run through the\nloop, accumulating the answers, but because I'm\nsubtracting, it's just going",
    "start": "2974940",
    "end": "2981385"
  },
  {
    "text": "to keep making x more and more\nnegative as it goes along, again it's off into\nan infinite loop.",
    "start": "2981385",
    "end": "2986680"
  },
  {
    "text": "Which is a way of reminding you\nthat I need to think as I write the code about what are\nmy expectations from the",
    "start": "2986680",
    "end": "2992232"
  },
  {
    "text": "input, and how might\nI enforce them. In this case, I probably want\nto make sure I use absolute value of x before\nI carry it on.",
    "start": "2992232",
    "end": "2997350"
  },
  {
    "text": "Yes ma'am.",
    "start": "2997350",
    "end": "3003450"
  },
  {
    "text": "STUDENT: [UNINTELLIGIBLE]",
    "start": "3003450",
    "end": "3011130"
  },
  {
    "text": "PROFESSOR JIM ERICSON: You're\nabsolutely right, because I bind iters left to, um, yeah.",
    "start": "3011130",
    "end": "3016440"
  },
  {
    "text": "Yes. Thank you. Boy, two candy for you. You caught me making an error. Yes. The point is, it's not going to\nwork, and she caught both",
    "start": "3016440",
    "end": "3024230"
  },
  {
    "text": "of them, impressive, it's not\ngoing to work because iters left is already negative, it's\njust going to skip the whole loop, and I'm in trouble, so\nthank you for catching that.",
    "start": "3024230",
    "end": "3031119"
  },
  {
    "text": "All right. I was going to do one more\nexample, but I've run you up to the end of the time. I'll leave the example on the\nhandout, it shows you another",
    "start": "3031120",
    "end": "3036289"
  },
  {
    "text": "version that we'll come\nback to next time. The key thing to notice is, I\nnow have the ability to create",
    "start": "3036290",
    "end": "3041880"
  },
  {
    "text": "iterations, which extends\nwell I can do. And we'll see you next time. ",
    "start": "3041880",
    "end": "3048872"
  }
]