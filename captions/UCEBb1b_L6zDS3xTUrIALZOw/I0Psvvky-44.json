[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6060"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or to\nview additional materials",
    "start": "6060",
    "end": "12700"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "12700",
    "end": "26730"
  },
  {
    "text": "PROFESSOR: All right,\nlet's get started. So today we're going to\ntalk about the system called",
    "start": "26730",
    "end": "32490"
  },
  {
    "text": "Native Client, which is\nactually a real world system used by Google.",
    "start": "32490",
    "end": "39779"
  },
  {
    "text": "One example, they actually\nuse it in the Chrome browser to allow web applications to\nrun arbitrary native code.",
    "start": "39779",
    "end": "45290"
  },
  {
    "text": "It's actually a\npretty cool system, and it's also an illustration. Another isolation or sort\nof sandboxing or privilege",
    "start": "45290",
    "end": "52900"
  },
  {
    "text": "separation technique,\nthat's called software fault isolation, doesn't rely\non operating systems",
    "start": "52900",
    "end": "58850"
  },
  {
    "text": "to sandbox a process\nor virtual machines. But instead, it has a\nvery different approach to looking at the particular\ninstructions in a binary,",
    "start": "58850",
    "end": "65830"
  },
  {
    "text": "to figure out whether it's\ngoing to be safe to run or not. So before we I\nguess start looking",
    "start": "65830",
    "end": "71900"
  },
  {
    "text": "at the technical details of\nthe system, let's figure out, why do these guys actually\nwant to run native code?",
    "start": "71900",
    "end": "78960"
  },
  {
    "text": "So the particular\ncontext they are interested in applying\ntheir solution to",
    "start": "78960",
    "end": "83980"
  },
  {
    "text": "is a web browser,\nwhere you can already run JavaScript code and\nmaybe Flash, and maybe",
    "start": "83980",
    "end": "89750"
  },
  {
    "text": "a couple of other things. Why are these guys so excited\nabout running raw x86? It seems like a step backwards.",
    "start": "89750",
    "end": "96758"
  },
  {
    "text": "AUDIENCE: Really\nfast computation. PROFESSOR: Yeah, that's one\nhuge advantage of native code. Even though it might be\nunsafe from some perspectives,",
    "start": "96758",
    "end": "103560"
  },
  {
    "text": "it's really high performance. And whatever you can\ndo in JavaScript, presumably you could just write\nthe same thing and assemble it,",
    "start": "103560",
    "end": "109870"
  },
  {
    "text": "and it'll go at least as\nfast-- probably much faster. Any other reasons? Yeah?",
    "start": "109870",
    "end": "115395"
  },
  {
    "text": "AUDIENCE: Run existing code? PROFESSOR: Yeah. So another big\nthing is maybe not everything is written\nin JavaScript. So if you have an\nexisting application--",
    "start": "115395",
    "end": "123090"
  },
  {
    "text": "I guess 'legacy' in\nindustry terminology-- if you have some existing\ncode that you really",
    "start": "123090",
    "end": "128580"
  },
  {
    "text": "want to run in\nthe web, then this seems like a great solution. Because you could just\ntake an existing library,",
    "start": "128580",
    "end": "134530"
  },
  {
    "text": "like some complicated graphics\nprocessing engine that's both performance sensitive\nand lots of complicated stuff",
    "start": "134530",
    "end": "140050"
  },
  {
    "text": "you don't want to\nre-implement, then this seems like a good solution. Anything else-- if you're just\nlike programming a new web app,",
    "start": "140050",
    "end": "146260"
  },
  {
    "text": "should you use\nNative Client if you don't care about legacy\nor performance so much?",
    "start": "146260",
    "end": "153910"
  },
  {
    "text": "Any other reasons?  I guess another-- yeah? AUDIENCE: You don't\nhave to use JavaScript.",
    "start": "153910",
    "end": "159990"
  },
  {
    "text": "PROFESSOR: Yeah, that's\nan awesome reason, right? If you don't like\nJavaScript, then you don't have to use it, right? You can actually use, well,\nC, if you are so inclined.",
    "start": "159990",
    "end": "167140"
  },
  {
    "text": "You could run Python code,\nyou could write Haskell, whatever you think is useful. You could actually support\nother languages all of a sudden.",
    "start": "167140",
    "end": "174400"
  },
  {
    "text": " So this is a reasonably\ncompelling list of-- motivation",
    "start": "174400",
    "end": "183490"
  },
  {
    "text": "for them to run native\ncode in the browser, and it turns out to be\nreasonably tricky to get right.",
    "start": "183490",
    "end": "189389"
  },
  {
    "text": "And we'll look at the\ntechnical details, I guess, of how it works in a second. But just to show you guys what\nthis paper is talking about,",
    "start": "189389",
    "end": "195730"
  },
  {
    "text": "I just want to show a\nvery simple tutorial demo almost that I got out of\ntheir Native Client website.",
    "start": "195730",
    "end": "202409"
  },
  {
    "text": "It's fairly simple as it turns\nout to just take a C++ or a C program and run in the browser.",
    "start": "202410",
    "end": "208130"
  },
  {
    "text": "So just to show you\nwhat this looks like, here's basically a demo\nI mostly sort of took from one of their examples.",
    "start": "208130",
    "end": "214600"
  },
  {
    "text": "So you can look at a web page\nlike this index HTML file. And inside of it, you have\na bunch of JavaScript code.",
    "start": "214600",
    "end": "222360"
  },
  {
    "text": "And the reason this\nJavaScript code exists is to sort of interact with\nthe Native Client piece.",
    "start": "222360",
    "end": "227709"
  },
  {
    "text": "So the way you can sort of think\nof this running in the browser is that you have the\nbrowser-- well, we'll",
    "start": "227710",
    "end": "233903"
  },
  {
    "text": "talk much more about\nweb security later, but roughly you have some\nsort of a page, web page that",
    "start": "233904",
    "end": "239320"
  },
  {
    "text": "contains some JavaScript code. And this runs with\nthe pages privileges.",
    "start": "239320",
    "end": "245310"
  },
  {
    "text": "And this can do various\nthings to the web page itself, maybe talk to the\nnetwork in some circumstances.",
    "start": "245310",
    "end": "251140"
  },
  {
    "text": "But what Native Client\nallows you to do is to have this Native\nClient module running",
    "start": "251140",
    "end": "257060"
  },
  {
    "text": "sort of to the side in\nthe browser as well. And the JavaScript\ncode can actually interact with the Native Client\nmodule and get responses back.",
    "start": "257060",
    "end": "265600"
  },
  {
    "text": "And what you see\nhere in this web page is the little bit\nof JavaScript code that's necessary\nin Native Client",
    "start": "265600",
    "end": "270980"
  },
  {
    "text": "to interract with the\nparticular NaCl module that we're going to be running. And you can send\nmessages to this module.",
    "start": "270980",
    "end": "278300"
  },
  {
    "text": "The way you do it is you\ntake this module object in JavaScript, and you\ncall it postMessage. And you could actually\nsupply a message",
    "start": "278300",
    "end": "284530"
  },
  {
    "text": "to send to the\nNative Client module. And when the Native\nClient module responds, it'll run this handle message\nfunction in JavaScript.",
    "start": "284530",
    "end": "292751"
  },
  {
    "text": "And in this particular\ncase, it just pops up and alerts\ndialog box in my browser.",
    "start": "292751",
    "end": "299080"
  },
  {
    "text": "So it's a fairly simple\ninterface from the web page side, from the JavaScript side. And the only thing you\nadditional you have to do,",
    "start": "299080",
    "end": "304629"
  },
  {
    "text": "is you actually have to\ndeclare this Native Client module this way. So you just say embed\nmodule with a particular ID.",
    "start": "304630",
    "end": "312488"
  },
  {
    "text": "And the sort of most\ninteresting part is this source equals Hello. some NMF barch attribute.",
    "start": "312489",
    "end": "319230"
  },
  {
    "text": "And this one just says, well\nhere's the roughly executable file that you need to\nload and start running in the native side of things.",
    "start": "319230",
    "end": "327230"
  },
  {
    "text": "And this native code actually\nlooks like any other C++ code you might write roughly. So here's the program.",
    "start": "327230",
    "end": "334290"
  },
  {
    "text": "The interesting part is roughly\nthis handle message function. So this is a C++ class, and\nwhenever the JavaScript code",
    "start": "334290",
    "end": "342380"
  },
  {
    "text": "sends some message\nto the native code, it'll actually\nrun this function. And it'll check if the message\nthat's being sent is hello.",
    "start": "342380",
    "end": "348800"
  },
  {
    "text": "And if so, construct a\nreply string of some sort and send it back. It's fairly simple stuff.",
    "start": "348800",
    "end": "353849"
  },
  {
    "text": "But just to be\nconcrete, let's try to run it and see what happens. So we can actually build\nit, and run a little web",
    "start": "353850",
    "end": "362360"
  },
  {
    "text": "server that is going serve up\nthis page and Native Client",
    "start": "362360",
    "end": "368849"
  },
  {
    "text": "module. So here I can go to\nthis URL and here we go. Right, it's actually\nloaded in the module.",
    "start": "368850",
    "end": "374640"
  },
  {
    "text": "The module seems to have\ngotten our hello message from JavaScript. It replied back with the\nstring back to JavaScript.",
    "start": "374640",
    "end": "379720"
  },
  {
    "text": "And the JavaScript code\npopped up a dialog box containing that response. So it actually\ndoes kind of work.",
    "start": "379720",
    "end": "386710"
  },
  {
    "text": "We can try to see if we could\ncrash Native Client-- hopefully not, but we can take this\ncode and we have this buffer.",
    "start": "386710",
    "end": "394690"
  },
  {
    "text": "We could write a\nbunch of As to it-- I don't know, quite a\nlot-- and see what happens.",
    "start": "394690",
    "end": "402020"
  },
  {
    "text": "So hopefully this\nshouldn't crash my browser, because Native Client is\ntrying to provide isolation.",
    "start": "402020",
    "end": "407760"
  },
  {
    "text": "But let's see what happens. So we can rebuild it,\nrerun the web server.",
    "start": "407760",
    "end": "413930"
  },
  {
    "text": "And here if you run\nit, nothing happens. We don't get the\nmessage back anymore, so clearly the\nmessage didn't get",
    "start": "413930",
    "end": "420224"
  },
  {
    "text": "sent back from the\nNative Client module, because I don't see any popup. We can look at the\nJavaScript console here,",
    "start": "420224",
    "end": "425979"
  },
  {
    "text": "and we can see that the\nNative Client module tells us NaCl module crash. So somehow it caught this\nbuffer flow scribbling",
    "start": "425980",
    "end": "434250"
  },
  {
    "text": "over some memory, or maybe\nit jumped to some bad address containing all As. But any case, the\nNative Client module",
    "start": "434250",
    "end": "441110"
  },
  {
    "text": "is actually able to contain\nthis without this arbitrary sort of memory corruption\nin the module affecting",
    "start": "441110",
    "end": "446170"
  },
  {
    "text": "the rest of the browser. So this is roughly just a quick\ndemo of what the system is,",
    "start": "446170",
    "end": "452150"
  },
  {
    "text": "and how you use it as an\nend user or web developer.",
    "start": "452150",
    "end": "458209"
  },
  {
    "text": "So let's look now at some more. So that's all in terms of\ndemos I have to show you. So let's look more now at how a\nNative Client is going to work,",
    "start": "458209",
    "end": "465770"
  },
  {
    "text": "or perhaps even why we need this\nparticular design as opposed to some of the alternatives.",
    "start": "465770",
    "end": "471050"
  },
  {
    "text": " So if your goal, I guess\nis to sandbox native code,",
    "start": "471050",
    "end": "479384"
  },
  {
    "text": "there's a number of\nalternatives you can make. People actually\nhad these problems before, performance\nexisting legacy code",
    "start": "479384",
    "end": "484640"
  },
  {
    "text": "and other languages before\nNative Client came around. And people just solved\nthem in different ways",
    "start": "484640",
    "end": "490960"
  },
  {
    "text": "that maybe weren't as satisfying\nfrom a security standpoint or usability standpoint\nas Native Client.",
    "start": "490960",
    "end": "497570"
  },
  {
    "text": "But it is doable. So let's see. So what could you\ndo if you really want to run native\ncode in a browser?",
    "start": "497570",
    "end": "505020"
  },
  {
    "text": " So one option that people did\nwas to trust the developer.",
    "start": "505020",
    "end": "513974"
  },
  {
    "text": " And maybe a variant\nof this approach",
    "start": "513974",
    "end": "519500"
  },
  {
    "text": "is to ask the user whether they\nwant to run some piece of code in their browser or not.",
    "start": "519500",
    "end": "526420"
  },
  {
    "text": "So does everybody\nunderstand roughly what the plan is, right? Like instead of having that\nwhole Native Client compilation",
    "start": "526420",
    "end": "531660"
  },
  {
    "text": "strategy, I could\nhave just built a simple C program, served\nit up on the browser, and maybe the\nbrowser asked, do you want to run this site or not?",
    "start": "531660",
    "end": "537238"
  },
  {
    "text": "If I click yes,\nthen it accidentally scribbled over the browser's\nmemory and crashes the browser.",
    "start": "537238",
    "end": "542550"
  },
  {
    "text": "So it's possible, right? It certainly solves\nall these goals, but what's wrong with it?",
    "start": "542550",
    "end": "547980"
  },
  {
    "text": "Well, I guess there's the\ninsecurity part, which is unfortunate. One way to potentially get\naround this-- and some systems",
    "start": "547980",
    "end": "555340"
  },
  {
    "text": "did. Like Microsoft had\nthe system called ActiveX, that basically\nimplemented this plan.",
    "start": "555340",
    "end": "562189"
  },
  {
    "text": "You could serve binaries to IE,\nthe browser on your machine. And as long as it came\nwith a certificate",
    "start": "562190",
    "end": "568399"
  },
  {
    "text": "from particular developer\nsigned by let's say Microsoft or someone\nelse, then it would actually run this code.",
    "start": "568400",
    "end": "575329"
  },
  {
    "text": "What do you guys think about\nthis plan, is this useful? Yeah? AUDIENCE: [INAUDIBLE]. ",
    "start": "575329",
    "end": "584750"
  },
  {
    "text": "PROFESSOR: That's right, yeah. So right, you really have\nto put quite a bit of trust into whoever it is\nthat's signing this,",
    "start": "584750",
    "end": "590990"
  },
  {
    "text": "that they will only\nsign binaries that will not to do something bad. But it's kind of vague\nwhat this bad thing is.",
    "start": "590990",
    "end": "597870"
  },
  {
    "text": "And presumably they're\njust writing C code and signing it blindly without\ndoing a huge amount of work.",
    "start": "597870",
    "end": "604250"
  },
  {
    "text": "In which case, you might well\nbe susceptible to some problems down the line. What if we ask the user?",
    "start": "604250",
    "end": "610762"
  },
  {
    "text": "Yeah? AUDIENCE: [INAUDIBLE]. ",
    "start": "610762",
    "end": "616239"
  },
  {
    "text": "PROFESSOR: Oh yeah, yeah, yeah. Like the user's goal\nis to run this thing. And even if the user wants to\nbe cautious, it's actually not",
    "start": "616239",
    "end": "624180"
  },
  {
    "text": "clear how should\nthe user decide? Suppose I really\nwant to understand, should I allow this\nprogram to run?",
    "start": "624180",
    "end": "629191"
  },
  {
    "text": "All it tells me is\nwell, maybe it's created from Google.com\nor Microsoft.com, and its file name as foo.exe.",
    "start": "629192",
    "end": "634589"
  },
  {
    "text": "I don't know, like\nwhat's in there? Even if I dissemble\nthe code, it might be very hard to tell\nwhether it's going",
    "start": "634590",
    "end": "640794"
  },
  {
    "text": "to do something bad or not. So it's actually\nreally hard to decide. So one way to think\nof Native Client",
    "start": "640794",
    "end": "645980"
  },
  {
    "text": "is it's a mechanism by\nwhich users can actually get some confidence\nwhether they should say yes or not to running this thing.",
    "start": "645980",
    "end": "651888"
  },
  {
    "text": "So in practice, I guess\nlike Paul Young, who was giving his guest\nlecture last week, and he suggested that you\nshould enable this click",
    "start": "651888",
    "end": "657399"
  },
  {
    "text": "to play extension in Chrome. So every extension,\nincluding Native Client, you should rush click on this\nthing before it starts running.",
    "start": "657400",
    "end": "663209"
  },
  {
    "text": "So in some ways,\nthat's ask the user. But then the user\nactually has some sense, that well, if I click\nit, I'm still hopefully safe in the sense that Native\nClient will protect me.",
    "start": "663209",
    "end": "670630"
  },
  {
    "text": "So the two aren't\nnecessarily exclusive, but you really want\nsome technical guarantee",
    "start": "670630",
    "end": "675640"
  },
  {
    "text": "from Native Client that ensures\nthat even if you say yes, there are something\nmeaningful that",
    "start": "675640",
    "end": "681290"
  },
  {
    "text": "isn't enforcing your security. So does this make sense?",
    "start": "681290",
    "end": "686440"
  },
  {
    "text": "OK. So the other I guess approach\nthat people have taken, is to use an OS or hardware\nsandboxing, or isolation.",
    "start": "686440",
    "end": "697443"
  },
  {
    "text": " So this is things we looked at\nin the last couple of lectures.",
    "start": "697443",
    "end": "705470"
  },
  {
    "text": "So maybe you would use\nUnix, isolation mechanisms. Maybe if you had something\nmore sophisticated,",
    "start": "705470",
    "end": "711790"
  },
  {
    "text": "if you're running\na free [INAUDIBLE] maybe you would use Capsicum. It seems very well suited to\nsandboxing some piece of code.",
    "start": "711790",
    "end": "718060"
  },
  {
    "text": "Because you can give it very\nfew capabilities, and then it seems great. And Linux has a similar\nmechanism called Seccomp",
    "start": "718060",
    "end": "724380"
  },
  {
    "text": "that we briefly touched on in\nthe last lecture, that could allow you to do similar things.",
    "start": "724380",
    "end": "729844"
  },
  {
    "text": "So it seems like\nthere is already a mechanism for writing code\nin isolation on your machine.",
    "start": "729844",
    "end": "735410"
  },
  {
    "text": "Why are these guys opposed to\nusing this existing solution? Then they are like reinventing\nthe wheel for some reason.",
    "start": "735410",
    "end": "742130"
  },
  {
    "text": "So what's going on? Yeah? Oh yeah? AUDIENCE: Maybe they want\nto minimize the [INAUDIBLE]?",
    "start": "742130",
    "end": "749925"
  },
  {
    "text": "PROFESSOR: Yeah, so in\nsome sense, maybe they don't want to trust\nthe operating system. So maybe they're here,\nand they're actually",
    "start": "749925",
    "end": "756220"
  },
  {
    "text": "worried about OS bugs. It might be that the previous\ndekernel, the Linux kernel,",
    "start": "756220",
    "end": "762410"
  },
  {
    "text": "has quite a lot of C code\nwritten that they don't want to audit for\ncorrectness, or maybe",
    "start": "762410",
    "end": "767680"
  },
  {
    "text": "can't even audit for\ncorrectness, even if they wanted to. And in one of these Capsicum or\nSeccomp based isolation plan,",
    "start": "767680",
    "end": "774549"
  },
  {
    "text": "you probably do trust quite\na bit of code in the kernel to be correct, for the sandbox\nto actually hold and enforce",
    "start": "774549",
    "end": "780176"
  },
  {
    "text": "isolation. Yeah? AUDIENCE: As you get a lot more\nways to use browsers and stuff,",
    "start": "780176",
    "end": "786105"
  },
  {
    "text": "like you'd have to deal with\nhaving some sort of thing you're doing with it on\nlike iOS and Android, and all these other\nthings, accessing--",
    "start": "786105",
    "end": "792420"
  },
  {
    "text": "PROFESSOR: Yeah,\nso it's actually another interesting\nconsideration is that normally\nmy OSes have bugs. But actually the\nOSs are incompatible",
    "start": "792420",
    "end": "799450"
  },
  {
    "text": "with each other in some\nways, meaning that each OS has it's own-- like right here. Well, there's Unix, there's\nCapsicum, there's Seccomp,",
    "start": "799450",
    "end": "806235"
  },
  {
    "text": "but this is just\na Unix variances. There's Mac OS seatbelt,\nthere's Windows something else, and the list just\nkeeps going on and on.",
    "start": "806235",
    "end": "811970"
  },
  {
    "text": "So as a result,\nevery platform you will have to use a different\nisolation mechanism.",
    "start": "811970",
    "end": "817750"
  },
  {
    "text": "And the thing that\nactually bothers them is not so much that they'll have\nto write different code for Mac and Windows and Linux.",
    "start": "817750",
    "end": "823390"
  },
  {
    "text": "But more of that, this impacts\nhow you write the thing inside of the sandbox.",
    "start": "823390",
    "end": "828747"
  },
  {
    "text": "Because in Native\nClient, you actually write a piece of code\nthat runs the same way, or it's the same piece of code\nthe runs on Apple or Windows",
    "start": "828747",
    "end": "836580"
  },
  {
    "text": "or Linux systems. And if you use these\nisolation mechanisms, they actually impose\ndifferent restrictions",
    "start": "836580",
    "end": "842790"
  },
  {
    "text": "on the program being sandboxed. So you'll have to write\none program that's going to run inside\nof a Linux sandbox,",
    "start": "842790",
    "end": "848560"
  },
  {
    "text": "another program inside of a\nWindows sandbox, and so on. So this is actually\nnot acceptable to them. They don't want to deal with\nthese kinds of problems.",
    "start": "848560",
    "end": "857202"
  },
  {
    "text": "So are there other\nconsiderations? Yeah? AUDIENCE: Presumably\nperformance as well.",
    "start": "857202",
    "end": "863400"
  },
  {
    "text": "Because if you say\nCapsicum, you need to fork up a set of\n[INAUDIBLE], or whatever",
    "start": "863400",
    "end": "869510"
  },
  {
    "text": "is running inside the sandbox. With here, they can actually\nrun it in the same [INAUDIBLE]. PROFESSOR: That's true, yeah.",
    "start": "869510",
    "end": "874830"
  },
  {
    "text": "So potentially the\napproach they take, the software fault\nisolation plan is actually highly\nperformant, and could",
    "start": "874830",
    "end": "879840"
  },
  {
    "text": "outperform these\nsandboxes at the OS level. It turns out that\nin Native Client,",
    "start": "879840",
    "end": "884975"
  },
  {
    "text": "they actually use both their\nsandbox and the OS sandbox, just for extra\nprecaution for safety.",
    "start": "884975",
    "end": "892110"
  },
  {
    "text": "So they don't actually\nwin on performance in their implementation,\nbut they could, right. Yeah? AUDIENCE: There is some\nlike control aspect to it.",
    "start": "892110",
    "end": "898710"
  },
  {
    "text": "Because it can control what\nhappens in the browser, but if they sent one out to the\nclient's machine into their OS,",
    "start": "898710",
    "end": "904131"
  },
  {
    "text": "they sort of don't\nnecessarily know what might be happening to it? PROFESSOR: So I\nguess maybe one way",
    "start": "904132",
    "end": "909930"
  },
  {
    "text": "to think of that is that\nyeah, the OS might have bugs, or my OS might not do as good\nof a job at sandboxing it.",
    "start": "909930",
    "end": "915710"
  },
  {
    "text": "Or maybe the interface\nis a little different, so you don't know what\nthe OS is going to expose.",
    "start": "915710",
    "end": "920743"
  },
  {
    "text": "AUDIENCE: So it doesn't\nlike prevent the code from doing some bad things. Like there are a lot\nof cases of bad things",
    "start": "920743",
    "end": "926447"
  },
  {
    "text": "that the code can\njust do, like maybe you want to statically\nanalyze the distance, but they both sit in a loop\nand then not allow that",
    "start": "926447",
    "end": "932034"
  },
  {
    "text": "as a valid program. PROFESSOR: So you could, right? So their approach is quite\npowerful in the sense that you could try to look\nfor various kinds of problems",
    "start": "932034",
    "end": "939090"
  },
  {
    "text": "in the code like maybe\ninfinite loops, et cetera. It's hard to decide, kind\nof like the holding problem,",
    "start": "939090",
    "end": "944480"
  },
  {
    "text": "whether it's going to have\ninfinite loops or not. But in principle, you might be\nable to catch some problems.",
    "start": "944480",
    "end": "950390"
  },
  {
    "text": "I think one actually interesting\nexample that I almost didn't realize this\nsort of existed before reading this\npaper, is these guys",
    "start": "950390",
    "end": "956936"
  },
  {
    "text": "are worried about hardware bugs\nas well, that not only are they worried that the\noperating system might have vulnerabilities that the\nmotions code will exploit.",
    "start": "956936",
    "end": "964870"
  },
  {
    "text": "But also that the\nprocessor itself has some instructions\nthat will hang it,",
    "start": "964870",
    "end": "970000"
  },
  {
    "text": "or it'll reboot your machine. And in principle, your hardware\nshouldn't have such bug,",
    "start": "970000",
    "end": "975850"
  },
  {
    "text": "because the operating system\nrelies on the hardware to trap into the kernel if\nthere's anything bad executing",
    "start": "975850",
    "end": "983290"
  },
  {
    "text": "user mode, so that the operating\nsystem can take care of it. But experimentally, it\nturns out that processors",
    "start": "983290",
    "end": "989280"
  },
  {
    "text": "are so complicated\nthat they do have bugs, and these guys\nactually say, well, we actually found some\nevidence that this happens.",
    "start": "989280",
    "end": "994704"
  },
  {
    "text": "If you have some complicated\ninstruction that the CPU wasn't expecting, the CPU will\nactually halt instead",
    "start": "994705",
    "end": "1000965"
  },
  {
    "text": "of trapping to the kernel. This seems bad. But I guess it's not a\ndisastrous, if I'm sort of only",
    "start": "1000965",
    "end": "1006290"
  },
  {
    "text": "running reasonable\nthings on my laptop. But it is bad if you visit\nsome web page and your computer",
    "start": "1006290",
    "end": "1011430"
  },
  {
    "text": "hangs. So they want basically\na stronger level of protection for these Native\nClient modules than what",
    "start": "1011430",
    "end": "1017810"
  },
  {
    "text": "you would get out of sort\nof an OS level isolation, even from a hardware\n[INAUDIBLE] bug standpoint.",
    "start": "1017810",
    "end": "1024147"
  },
  {
    "text": "So they're actually pretty cool. They're like really\nparanoid about security,",
    "start": "1024147",
    "end": "1029449"
  },
  {
    "text": "including hardware problems. All right, so any questions\nabout all these alternatives,",
    "start": "1029450",
    "end": "1035140"
  },
  {
    "text": "how that works, or\nwhy these guys are not excited about that? Makes sense?",
    "start": "1035140",
    "end": "1041496"
  },
  {
    "text": "All right. So I guess let's\ntry to look at now, how Native Client does actually\ndecide to sandbox processes.",
    "start": "1041496",
    "end": "1050566"
  },
  {
    "text": "Let me pull up these boards. So Native Client takes\nthis different approach",
    "start": "1050566",
    "end": "1057340"
  },
  {
    "text": "that's in general called\nsoftware fault isolation. ",
    "start": "1057340",
    "end": "1069039"
  },
  {
    "text": "And the plan is actually\nnot rely on the operating system or hardware to\ncheck things at runtime,",
    "start": "1069040",
    "end": "1075500"
  },
  {
    "text": "but instead to somehow look at\nthe instructions ahead of time, and decide that there are always\ngoing to be safe to execute.",
    "start": "1075500",
    "end": "1083950"
  },
  {
    "text": "So actually look at\nthe binary, and you check all the\npossible instructions to see whether they're going\nto be safe instructions",
    "start": "1083950",
    "end": "1091480"
  },
  {
    "text": "or unsafe instructions. And once you've decided that\nit's all going to be safe, you can just jump in\nand start executing.",
    "start": "1091480",
    "end": "1098049"
  },
  {
    "text": "Because you know it's all\ncomposed of safe things, so it cannot go wrong. So we'll talk about\nexactly what this means.",
    "start": "1098050",
    "end": "1105799"
  },
  {
    "text": "But roughly what\nthey're going to do is, they're going to look at\npretty much every instruction",
    "start": "1105800",
    "end": "1111000"
  },
  {
    "text": "in the binary code that is\nserved up to the browser. And they're going to decide\nthat particular instructions are",
    "start": "1111000",
    "end": "1117290"
  },
  {
    "text": "going to be safe or unsafe. What do they do for\nsafe instructions?",
    "start": "1117290",
    "end": "1123455"
  },
  {
    "text": "Well, they're just\ngoing to allow them. What's an example of\na safe instruction? What are they thinking of that\ndon't need any extra checks",
    "start": "1123455",
    "end": "1131259"
  },
  {
    "text": "or protections, et cetera? AUDIENCE: [INAUDIBLE]. PROFESSOR: Yeah, so like\nany kind of ALU operation.",
    "start": "1131260",
    "end": "1137899"
  },
  {
    "text": "Basically you have\nmath, presumably moves between\nregisters and so on.",
    "start": "1137900",
    "end": "1143840"
  },
  {
    "text": "So this doesn't actually affect\nthe security of the system, as far as they're concerned. Because all they\nreally care about is things like memory safety,\nwhere what code you execute,",
    "start": "1143840",
    "end": "1151044"
  },
  {
    "text": "and so on. So as long as you are just\ncomputing on some stuff, and registers, they\ndon't really care.",
    "start": "1151045",
    "end": "1156120"
  },
  {
    "text": "It's not going to affect\nthe rest of the browser. So what about unsafe operations?",
    "start": "1156120",
    "end": "1161350"
  },
  {
    "text": "I guess these are\nthings that they might care much more about. So this anything that maybe\ndoes a memory access, or maybe",
    "start": "1161350",
    "end": "1169740"
  },
  {
    "text": "some privileged instruction,\nmaybe invoking a system call on this machine.",
    "start": "1169740",
    "end": "1177670"
  },
  {
    "text": "Maybe trying to jump out of\nthe sandbox, who knows what? So for these kinds\nof instructions,",
    "start": "1177670",
    "end": "1183450"
  },
  {
    "text": "they are going to do\none of two things. If the instruction actually is\nnecessary for the application",
    "start": "1183450",
    "end": "1190090"
  },
  {
    "text": "to do it's job, like accessing\nmemory seems important, then they're going\nto somehow make sure",
    "start": "1190090",
    "end": "1195430"
  },
  {
    "text": "that they can execute this\nunsafe instruction safely. Or if you're jumping around\nfor example in the program's",
    "start": "1195430",
    "end": "1202300"
  },
  {
    "text": "address space, [INAUDIBLE]\nwhat they're going to do is somehow instrument\nthe instruction. And what instrumenting\nthe instruction means",
    "start": "1202300",
    "end": "1209049"
  },
  {
    "text": "is that you used to have\none unsafe instruction that sometimes does good things, that\nthe application might actually",
    "start": "1209050",
    "end": "1214630"
  },
  {
    "text": "want to do legitimately. And sometimes the instruction\ncan do bad things. So what instrumenting\nit means is",
    "start": "1214630",
    "end": "1220722"
  },
  {
    "text": "that you add some extra\ninstructions before it, that it'll check or enforce,\nbut only good things",
    "start": "1220722",
    "end": "1226240"
  },
  {
    "text": "are going to happen\nwith that instruction. So for example, if you are\naccessing a memory location, which you could\ndo-- it turns out,",
    "start": "1226240",
    "end": "1232267"
  },
  {
    "text": "they don't do it for\nperformance reasons-- but one way to instrument\na memory access would be to put some\nchecks, like an if",
    "start": "1232267",
    "end": "1238040"
  },
  {
    "text": "statement before the\ninstructions, saying, well, is this address you're\naccessing in range of what's allowed for this module?",
    "start": "1238040",
    "end": "1243660"
  },
  {
    "text": "And if so, do that--\notherwise, exit. So that would instrument\nan instruction. And that would turn\nan unsafe instruction",
    "start": "1243660",
    "end": "1250370"
  },
  {
    "text": "into one that's always\nsafe to execute, because there's always\nthat check in front of it. So does that make sense?",
    "start": "1250370",
    "end": "1256020"
  },
  {
    "text": "This is their sort of\nbig idea for running this enforcing safety without\nsupport from that operating",
    "start": "1256020",
    "end": "1262830"
  },
  {
    "text": "system at some level. And I guess for other\nunsafe instructions, they don't instrument\nall of them.",
    "start": "1262830",
    "end": "1268330"
  },
  {
    "text": "Some of them they\nactually prohibit, if they believe that this\nis an instruction that's not really necessary\nduring normal operation,",
    "start": "1268330",
    "end": "1274830"
  },
  {
    "text": "and if an application\ntried to run it, we should just kill\nthe application or not allow it to run\nin the first place.",
    "start": "1274830",
    "end": "1282450"
  },
  {
    "text": "Makes sense? Those are their sort of big plan\nfor software fault isolation. And once you've checked\nthe application's binary,",
    "start": "1282450",
    "end": "1290480"
  },
  {
    "text": "and it all passes,\nand everything seems to be properly\ninstrumented, then you can just run the\nprogram and off it goes.",
    "start": "1290480",
    "end": "1296690"
  },
  {
    "text": "And by definition\nalmost, it will not do bad things, if we\ndo all these checks and instrumentation [INAUDIBLE].",
    "start": "1296690",
    "end": "1304310"
  },
  {
    "text": "And I guess there's one more\npart to the software fault isolation story, which\nis that once you've",
    "start": "1304310",
    "end": "1310090"
  },
  {
    "text": "make sure that\neverything is safe, then it can't actually\ndo anything terribly interesting, other than\ncompute stuff in it's",
    "start": "1310090",
    "end": "1315570"
  },
  {
    "text": "own little memory. So it can't access the network,\nit can't access the disk, it can't access your browser,\ndisplay, keyboard, almost",
    "start": "1315570",
    "end": "1321640"
  },
  {
    "text": "anything. So pretty much every software\nfault isolation story, there's actually also some\ntrusted service runtime.",
    "start": "1321640",
    "end": "1327630"
  },
  {
    "text": " And this trusted\nruntime is going",
    "start": "1327630",
    "end": "1335370"
  },
  {
    "text": "to not be subject to these\nchecks on it's instructions. So the trusted\nruntime could actually",
    "start": "1335370",
    "end": "1340410"
  },
  {
    "text": "do all these potentially\nunsafe things. But this trusted runtime\nis written by Google. So hopefully they\nget a [INAUDIBLE].",
    "start": "1340410",
    "end": "1345940"
  },
  {
    "text": "And it's going to\nimplement all the functions that Google's Native\nClient team believes",
    "start": "1345940",
    "end": "1351530"
  },
  {
    "text": "are OK throughout\nfor these modules. So these are going to be\nthings like maybe allocated memory, maybe creating\na thread, maybe",
    "start": "1351530",
    "end": "1362020"
  },
  {
    "text": "communicating with\nthe browser as we saw-- so some sort of a message\npassing system, et cetera.",
    "start": "1362020",
    "end": "1369900"
  },
  {
    "text": "And the way it's going to be\nexposed to this isolated module is through certain presumably\nspecial jumps or operations",
    "start": "1369900",
    "end": "1380730"
  },
  {
    "text": "that the module is going\nto perform to transition control into this\ntrusted runtime,",
    "start": "1380730",
    "end": "1387179"
  },
  {
    "text": "but hopefully in a very\npredictable way to-- question? AUDIENCE: I'm just\ncurious about, you",
    "start": "1387180",
    "end": "1392736"
  },
  {
    "text": "have to design this application,\nknowing that it's going to be sent to the NaCl module?",
    "start": "1392736",
    "end": "1398566"
  },
  {
    "text": "Or does it like change\nthe code to [INAUDIBLE] making the [INAUDIBLE]\nsort of stuff bad? PROFESSOR: So I think if you\nare building an application,",
    "start": "1398566",
    "end": "1407540"
  },
  {
    "text": "you do have to be sort\nof aware that it's going to be running\ninside of Native Client.",
    "start": "1407540",
    "end": "1412580"
  },
  {
    "text": "So some function calls like\nmalloc or pthread_create, I think they just transparently\nare placed with calls",
    "start": "1412580",
    "end": "1419005"
  },
  {
    "text": "to their trusted runtime. But if you do anything\nlike opening a file by path name, or anything\nelse that sort of you",
    "start": "1419005",
    "end": "1425830"
  },
  {
    "text": "would expect to do\non a Unix machine, that you would probably have\nto replace with something else. And you'd probably want\nto structure your thing",
    "start": "1425830",
    "end": "1432800"
  },
  {
    "text": "to interact at least a little\nbit with your JavaScript or web page in some way. And that you would have to do\nby explicitly doing some message",
    "start": "1432800",
    "end": "1439160"
  },
  {
    "text": "passing or RPCs into\nthe JavaScript part. So that you would have\nto probably change.",
    "start": "1439160",
    "end": "1444890"
  },
  {
    "text": "So there are some-- it's not\nlike you can run an arbitrary Unix program in there, and\nyou'll just sort of get a shell",
    "start": "1444890",
    "end": "1451660"
  },
  {
    "text": "and you can run commands\nall of a sudden. Probably if you\ntried hard, maybe you could create such\nan environment.",
    "start": "1451660",
    "end": "1457170"
  },
  {
    "text": "But by default,\nyou probably have to make it operate inside\nof this web page, and then",
    "start": "1457170",
    "end": "1462886"
  },
  {
    "text": "[INAUDIBLE]. Does that make sense? All right.",
    "start": "1462886",
    "end": "1468346"
  },
  {
    "text": "OK. So that's the overall plan\nsoftware fault isolation. So I guess let's\nlook at actually",
    "start": "1468346",
    "end": "1474260"
  },
  {
    "text": "what safety means in their\ncase for Native Client. So we talked loosely\nabout this notion",
    "start": "1474260",
    "end": "1480710"
  },
  {
    "text": "of safe instructions, unsafe\ninstructions-- what do they actually care about here? So as far as I can\ntell for Native Client,",
    "start": "1480710",
    "end": "1487700"
  },
  {
    "text": "safety basically\nmeans two things. One is that there's no\ndisallowed instructions",
    "start": "1487700",
    "end": "1497039"
  },
  {
    "text": "that it can execute.  And these disallowed\ninstructions",
    "start": "1497040",
    "end": "1502610"
  },
  {
    "text": "are things like maybe\nsystem calls or triggering an interop, which is another\nmechanism on x86 to jump",
    "start": "1502610",
    "end": "1510280"
  },
  {
    "text": "into the kernel and\ninvoke a system call, and probably other\nprivileged instructions that",
    "start": "1510280",
    "end": "1515520"
  },
  {
    "text": "would allow you to escape\nout of the sandbox. We'll look a little\nbit more later at what instructions\ncould actually let you jump out of a sandbox.",
    "start": "1515520",
    "end": "1523419"
  },
  {
    "text": "And in addition to this no\ndisallowed instructions rule, they also want to make sure that\nall code and data accesses are",
    "start": "1523420",
    "end": "1533899"
  },
  {
    "text": "in bounds for the module. ",
    "start": "1533900",
    "end": "1539602"
  },
  {
    "text": "So what this means,\nis that they actually dedicate a particular part\nof the program's address space-- specifically\nit goes from zero up",
    "start": "1539602",
    "end": "1547150"
  },
  {
    "text": "to 256 megs in the process. And everything that this\nuntrusted module does",
    "start": "1547150",
    "end": "1554570"
  },
  {
    "text": "has to refer to locations\nwithin this chunk of memory in the program.",
    "start": "1554570",
    "end": "1560812"
  },
  {
    "text": "All right, so just\nto double check. So why do they want to\ndisallow these instructions?",
    "start": "1560812",
    "end": "1565910"
  },
  {
    "text": "So what if they fail to\ndisallow the instructions? Yeah? AUDIENCE: The module can\nmanipulate the system.",
    "start": "1565910",
    "end": "1572575"
  },
  {
    "text": "PROFESSOR: Right, so that's\nfairly straightforward, exactly, yeah. So it can just directly\nreboot the machine or open your home directory\nand enumerate all the files,",
    "start": "1572575",
    "end": "1579625"
  },
  {
    "text": "and do all these things. So that seems like\na good thing to do. Why do they care\nabout this plan,",
    "start": "1579625",
    "end": "1585190"
  },
  {
    "text": "like isolating the coded\ndata to only access these low addresses? What goes wrong if\nthey fail to do that?",
    "start": "1585190",
    "end": "1591840"
  },
  {
    "text": " Yeah?",
    "start": "1591840",
    "end": "1596960"
  },
  {
    "text": "AUDIENCE: Then they can sort\nof accessing and interrupting [INAUDIBLE] module\non the computer.",
    "start": "1596960",
    "end": "1602004"
  },
  {
    "text": "PROFESSOR: Yeah. AUDIENCE: We don't care if\nthey ruin their own program and it crashes. That's fine, as long as it's\nnot going to crash the key",
    "start": "1602004",
    "end": "1608301"
  },
  {
    "text": "to [INAUDIBLE]. PROFESSOR: Yeah, so in\nsome sense, that's true. But in their case, they\nactually run the thing",
    "start": "1608301",
    "end": "1614080"
  },
  {
    "text": "in a separate process. So in theory, this would only\ncrash that extra process. I think that I guess what\nthey're really worried about",
    "start": "1614080",
    "end": "1621330"
  },
  {
    "text": "is that this is a\nnecessary condition to ensure this no disallowed\ninstructions in some way,",
    "start": "1621330",
    "end": "1627260"
  },
  {
    "text": "because there's other\nstuff, like this trusted runtime in your process. So if what you really\ncare about is not",
    "start": "1627260",
    "end": "1633440"
  },
  {
    "text": "corrupting the rest\nof your computer, then if the untrusted\nmodule can arbitrarily jump into the trusted\nservice runtime",
    "start": "1633440",
    "end": "1640100"
  },
  {
    "text": "and do anything that the\ntrusted service runtime can do, then they could sort of\nviolate this property. So in some ways, this is really\nlike a supporting mechanism",
    "start": "1640100",
    "end": "1647040"
  },
  {
    "text": "for enforcing that. In principle, this could also\nbe used for lighter weight",
    "start": "1647040",
    "end": "1653670"
  },
  {
    "text": "isolation if you could run\nthis Native Client module inside of the browser\nprocess itself, and not",
    "start": "1653670",
    "end": "1659320"
  },
  {
    "text": "start an extra process. But it turns out for\nperformance reasons, they really have to\ntie down the module to this particular\nrange of memory,",
    "start": "1659320",
    "end": "1666360"
  },
  {
    "text": "or it has to start\nat zero anyway. So this means that\nyou can only have one really Native Client\nuntrusted module per process.",
    "start": "1666360",
    "end": "1672812"
  },
  {
    "text": "So you probably are going\nto start a separate process anyway. Makes sense?",
    "start": "1672812",
    "end": "1678408"
  },
  {
    "text": "Any questions? Yeah? AUDIENCE: Is there\nactually a reason why it has to start at zero?",
    "start": "1678408",
    "end": "1684230"
  },
  {
    "text": "PROFESSOR: Yeah, so it turns\nout it's more efficient in terms of performance to\nenforce jump targets,",
    "start": "1684230",
    "end": "1691480"
  },
  {
    "text": "if you know that the legitimate\naddress is a contiguous set of addresses starting at zero,\nbecause you can then do it with",
    "start": "1691480",
    "end": "1697505"
  },
  {
    "text": "a single AND mask, where\nall the high bits are one, and only a couple of low\nbits are zero-- well,",
    "start": "1697505",
    "end": "1707140"
  },
  {
    "text": "if you're willing-- well-- AUDIENCE: I thought the AND\nmask was to ensure [INAUDIBLE]. PROFESSOR: Right, so the\nAND mask ensures alignment,",
    "start": "1707140",
    "end": "1714166"
  },
  {
    "text": "you're right. So why do they start at zero? I think it probably\nhelps them to-- well,",
    "start": "1714166",
    "end": "1723210"
  },
  {
    "text": "I guess they rely on the\nsegmentation hardware. So in principle,\nmaybe they could use the segmentation hardware\nto shift the region up,",
    "start": "1723210",
    "end": "1729369"
  },
  {
    "text": "in terms of linear space. Or maybe it's just\nwith the application, sort of sees this range. And you can actually place\nit at different offsets",
    "start": "1729369",
    "end": "1734809"
  },
  {
    "text": "in your virtual address space. It could be-- yeah, so\nmaybe you could actually play tricks with the\nsegmentation hardware",
    "start": "1734810",
    "end": "1741010"
  },
  {
    "text": "to run multiple models in\na single address space. AUDIENCE: But is it because they\nwant to catch a null pointer",
    "start": "1741010",
    "end": "1746052"
  },
  {
    "text": "reception? PROFESSOR: Yeah, so they want to\ncatch all points of reception. But you could sort of do that. Because the null\npointer-- I guess",
    "start": "1746052",
    "end": "1751610"
  },
  {
    "text": "we'll talk about\nsegmentation in a second, but the null pointer actually\nis relative to the segment",
    "start": "1751610",
    "end": "1757260"
  },
  {
    "text": "in which you are accessing. So if you shift\nthe segment around, then you can map\nan unused zero page",
    "start": "1757260",
    "end": "1762574"
  },
  {
    "text": "at the beginning of\neveryone's segment. So yeah, it might be that you\ncould do multiple modules.",
    "start": "1762574",
    "end": "1770090"
  },
  {
    "text": "I think for-- well, because\none reason they probably want to do this\nis that when they",
    "start": "1770090",
    "end": "1775810"
  },
  {
    "text": "port their stuff to\n64 bits, they have a slightly different design. This paper doesn't\nreally talk about it.",
    "start": "1775810",
    "end": "1780966"
  },
  {
    "text": "And I think about 64-bit\ndesign, the hardware itself got rid of some of the\nsegmentation hardware",
    "start": "1780966",
    "end": "1786230"
  },
  {
    "text": "they were relying on\nfor efficiency reasons, and they have to do a much more\nsoftware oriented approach,",
    "start": "1786230",
    "end": "1791890"
  },
  {
    "text": "in which case having a\nlittle bit doesn't help them. But in this 32-bit version, I\nthink, yeah, maybe that's true.",
    "start": "1791890",
    "end": "1797580"
  },
  {
    "text": "That's not a deep reason\nwhy it has to start at zero. Other questions?",
    "start": "1797580",
    "end": "1802855"
  },
  {
    "text": " All right. So I guess we sort of roughly\nunderstand what the plan is,",
    "start": "1802855",
    "end": "1810549"
  },
  {
    "text": "or what we want to enforce\nin terms of safety. So how do we do this? So let's look at some of\nat least naive approach,",
    "start": "1810549",
    "end": "1816919"
  },
  {
    "text": "and see how could\nwe screw it up, I guess, and then we'll\ntry to fix it afterwards.",
    "start": "1816920",
    "end": "1822580"
  },
  {
    "text": "So I guess the\nnaive plan that sort of looks like what they\ndo, is to just look",
    "start": "1822580",
    "end": "1829900"
  },
  {
    "text": "for disallowed instructions by\njust scanning the executable from the start going forward. ",
    "start": "1829900",
    "end": "1837612"
  },
  {
    "text": "So how do you detect\nthat instructions? Well, you could just\ntake the program code,",
    "start": "1837612",
    "end": "1843380"
  },
  {
    "text": "and you sort of lay it\nout in a giant string that goes from zero up to maybe\nall the way to 56 megabytes,",
    "start": "1843380",
    "end": "1850779"
  },
  {
    "text": "depending on how big your code\nis, and you start looking. OK, well, maybe there's\na nop instruction here.",
    "start": "1850780",
    "end": "1856259"
  },
  {
    "text": "Maybe there's some sort of\nan add instruction there. Maybe there's a not-- I don't\nknow, some sort of a jump,",
    "start": "1856259",
    "end": "1862580"
  },
  {
    "text": "et cetera. And you just keep looking. And if you find a\nbad instruction, you say, ah, that's\na bad module.",
    "start": "1862580",
    "end": "1869580"
  },
  {
    "text": "And then you discard it. And if you don't see any system\ncall [INAUDIBLE] instructions, then you're going to\nallow this module to run,",
    "start": "1869580",
    "end": "1875550"
  },
  {
    "text": "module or whatever it is we'll\ndo for the in bounds checks. So is this going to work?",
    "start": "1875550",
    "end": "1883300"
  },
  {
    "text": "So why not? What are they worried about? Why is so complicated? AUDIENCE: [INAUDIBLE]\nthe instructions?",
    "start": "1883301",
    "end": "1889429"
  },
  {
    "text": "PROFESSOR: Yeah,\nso the weird thing is that x86, which is the sort\nof platform they are targeting",
    "start": "1889430",
    "end": "1894480"
  },
  {
    "text": "has a variable\nlength instructions.  So this means that\nthe particular size",
    "start": "1894480",
    "end": "1902700"
  },
  {
    "text": "of an instruction depends\non the first few bytes of that instruction. So you have to actually\nlook at the first byte",
    "start": "1902700",
    "end": "1908090"
  },
  {
    "text": "and say, OK, well,\nthe instruction is going to be this much more. And then maybe you sort of have\nto look at a couple more bytes, and then decide, OK, well,\nthat's exactly how long it's",
    "start": "1908090",
    "end": "1914660"
  },
  {
    "text": "going to be. But you don't know\nhow ahead of time. So some architectures like\nSpark, ARM, [INAUDIBLE],",
    "start": "1914660",
    "end": "1921000"
  },
  {
    "text": "have more fixed\nlength instructions. Well, ARM, for example--\nARM is like weird, but it has two\ninstructions lengths.",
    "start": "1921000",
    "end": "1927230"
  },
  {
    "text": "Either everything is two bytes\nor everything is four bytes. But x86, the instructions could\nbe like one byte or 10 byte",
    "start": "1927230",
    "end": "1933485"
  },
  {
    "text": "or five bytes, anything\nin between, as well. I forget actually how big. You can get a pretty\nlong instruction.",
    "start": "1933485",
    "end": "1938763"
  },
  {
    "text": "I think you can get like a\n15 byte instruction with x86 if you try hard. It's complicated\ninstructions, though.",
    "start": "1938763",
    "end": "1946259"
  },
  {
    "text": "But as a result, the\nproblem that could show up is that maybe you're\nscanning linearly",
    "start": "1946260",
    "end": "1951270"
  },
  {
    "text": "and everything seems to be fine. But maybe at runtime,\nyou'll actually jump into the middle\nof some instruction.",
    "start": "1951270",
    "end": "1958420"
  },
  {
    "text": "Maybe it was a\nmulti-byte instruction, if you interpret it starting\nfrom the second byte, it looks like a completely\ndifferent thing.",
    "start": "1958420",
    "end": "1964890"
  },
  {
    "text": "So that's just one example\nof sort of playing around with an assembler. And if you have an instruction\nlike this, 25 CD 80, 00, 00.",
    "start": "1964890",
    "end": "1976210"
  },
  {
    "text": "And if you interpret it as\nthis five byte instruction, meaning that you\nlook at this byte. And oh yeah, this is going to\nbe a five byte instruction.",
    "start": "1976210",
    "end": "1982210"
  },
  {
    "text": "So you have to look\nfive bytes forward. And then this turns out to be\na fairly benign instruction",
    "start": "1982210",
    "end": "1987680"
  },
  {
    "text": "that's an and of\nthe EAX register, with some particular constant\nthat happens to be I think 00,",
    "start": "1987680",
    "end": "1996380"
  },
  {
    "text": "00, 80, CD. anyway. So this is one of\nthe safe instructions",
    "start": "1996380",
    "end": "2002220"
  },
  {
    "text": "that Native Client should just\nallow under the first rule in checking these\nbinary instructions.",
    "start": "2002220",
    "end": "2008019"
  },
  {
    "text": "But if it turns out\nat runtime the CPU decides this is where it has\nto start executing the code,",
    "start": "2008020",
    "end": "2013150"
  },
  {
    "text": "then this instruction\nis actually a four byte instruction, and\nits actually an int instruction",
    "start": "2013150",
    "end": "2019040"
  },
  {
    "text": "that makes the OX80\ninterrupt, which is one way to make\nsystem calls in Linux.",
    "start": "2019040",
    "end": "2025570"
  },
  {
    "text": "So if you miss this fact,\nthen eventually you're going to allow untrusted\nmodule to jump into the kernel",
    "start": "2025570",
    "end": "2033600"
  },
  {
    "text": "and make system calls, which\nis what you wanted to prevent. Make sense?",
    "start": "2033600",
    "end": "2039790"
  },
  {
    "text": "So how can we prevent it? Like one possibility\nis like maybe we should try to look\nat every byte offset.",
    "start": "2039790",
    "end": "2045980"
  },
  {
    "text": "Because at least x86 can only\nstart interpreting instruction on a byte boundary\ninstead of a bit boundary.",
    "start": "2045980",
    "end": "2051643"
  },
  {
    "text": "So you like look at every\nsingle possible byte off, and you see what\ninstruction starts there.",
    "start": "2051643",
    "end": "2057419"
  },
  {
    "text": "Is this a reasonable\nplan to report? Yeah? AUDIENCE: I mean, what\nif someone actually is doing an and, and they're\nnever going to jump into that.",
    "start": "2057420",
    "end": "2064106"
  },
  {
    "text": "And now you're just\nallowing their program. PROFESSOR: Right,\nso basically it's prone to eventually\nfalse positives.",
    "start": "2064107",
    "end": "2070310"
  },
  {
    "text": "Now if you really wanted\nto, you could probably contort yourself and\nchange the code a little--",
    "start": "2070310",
    "end": "2076888"
  },
  {
    "text": "and somehow avoid this. If you knew exactly what\nthe checker was looking for, you could potentially\nchange these instructions.",
    "start": "2076889",
    "end": "2083620"
  },
  {
    "text": "Maybe like end it with\none thing first, and then end it with another mask later. But just avoid these\nsuspicious byte patterns.",
    "start": "2083620",
    "end": "2091520"
  },
  {
    "text": "But that just seems\npretty awkward to do. Now it is actually possible\nthat the architecture does",
    "start": "2091520",
    "end": "2096949"
  },
  {
    "text": "involve changing the compiler. So in principle, they\ndo have some component that actually has to\ncompile the code correctly.",
    "start": "2096949",
    "end": "2105150"
  },
  {
    "text": "You can't just take\nof the shelf GCC and compile a code\nfor Native Client. So in principle it's doable. But I think they're just\nthinking it's too much hassle,",
    "start": "2105150",
    "end": "2112500"
  },
  {
    "text": "and it's not going to be\nreliable or high performance, et cetera. Make sense?",
    "start": "2112500",
    "end": "2118420"
  },
  {
    "text": "And plus there's a couple\nof x86 instructions that are prohibited or should\nbe unsafe and prohibited.",
    "start": "2118420",
    "end": "2124780"
  },
  {
    "text": "But they're like one\nbyte long, so that is going to be pretty damaging\nto look for or filter out.",
    "start": "2124780",
    "end": "2132820"
  },
  {
    "text": "OK. So if they can't just assemble\nand sort of straight up and hope for the best, then\nthey need some other plan",
    "start": "2132820",
    "end": "2139540"
  },
  {
    "text": "for doing this disassembly\nin a reliable fashion. So what is that client\nor Native Client",
    "start": "2139540",
    "end": "2146070"
  },
  {
    "text": "to ensure they don't get tripped\nup by this variable length encoding? ",
    "start": "2146070",
    "end": "2153550"
  },
  {
    "text": "So I guess one way to\nthink about it is, well,",
    "start": "2153550",
    "end": "2158839"
  },
  {
    "text": "so how are we going to solve\nthis reliable disassembly? ",
    "start": "2158839",
    "end": "2166309"
  },
  {
    "text": "So in some sense, if we\nreally do scan forward from the left to the right, and\nwe look for all the possible up",
    "start": "2166310",
    "end": "2173150"
  },
  {
    "text": "codes, if that's the\nway the code executes, then we're in good shape. So even if there are\nsome weird instruction",
    "start": "2173150",
    "end": "2180000"
  },
  {
    "text": "and has some\noffset, then the CPU isn't actually\ngoing to jump there. It actually executes\nthe same way",
    "start": "2180000",
    "end": "2186072"
  },
  {
    "text": "that we're scanning\nthe instruction screen from left to right. So the problem with getting\nthe disassembly to be reliable",
    "start": "2186072",
    "end": "2194020"
  },
  {
    "text": "really comes from the\nfact that there's jumps. Because if we execute linearly\nfrom left to right, then",
    "start": "2194020",
    "end": "2200920"
  },
  {
    "text": "the CPU will follow\nthe same rules that our checker is following,\nand see the same instruction screen. So the problem really\ncomes down to what",
    "start": "2200920",
    "end": "2208230"
  },
  {
    "text": "happens if there's a jump\nsomewhere in the application. Could a jump to some\nposition in the code",
    "start": "2208230",
    "end": "2213500"
  },
  {
    "text": "that we didn't observe in\nour left to right scan? So this is what they are\nsort of going another",
    "start": "2213500",
    "end": "2219570"
  },
  {
    "text": "in the reliable disassembly. And the basic plan is to just\ncheck where all the jumps go.",
    "start": "2219570",
    "end": "2226779"
  },
  {
    "text": "It's actually fairly\nstraightforward at some level. They have a bunch of rules\nwe'll look at in a second,",
    "start": "2226780",
    "end": "2232880"
  },
  {
    "text": "but roughly the plan is if\nyou see a jump instruction, then it actually\nhas to be-- well,",
    "start": "2232880",
    "end": "2239910"
  },
  {
    "text": "you have to check that the\ntarget was seen before. ",
    "start": "2239910",
    "end": "2248360"
  },
  {
    "text": "So you basically do\nthe left to right scan that we sort of described\nin our naive approach here.",
    "start": "2248360",
    "end": "2253970"
  },
  {
    "text": "But then if you see any\nkind of a jump instruction, then you see what is the address\nto which the jump instruction",
    "start": "2253970",
    "end": "2259545"
  },
  {
    "text": "is pointing to, and\nyou make sure that it's an address that you saw in\nyour left to right disassembly.",
    "start": "2259545",
    "end": "2264750"
  },
  {
    "text": "So if there's a jump\ninstruction for example that goes to that\nCD byte, then we're",
    "start": "2264750",
    "end": "2269780"
  },
  {
    "text": "going to flag that jump as\ninvalid because we never saw an instruction\nstarting in the CD byte.",
    "start": "2269780",
    "end": "2275250"
  },
  {
    "text": "We saw a different instruction. But if all the instruction,\nif all the jumps go to the start of\ninstructions we saw,",
    "start": "2275250",
    "end": "2281540"
  },
  {
    "text": "then we're in good shape. Does that make sense? So the one problem\nis that you can't",
    "start": "2281540",
    "end": "2288910"
  },
  {
    "text": "check the targets of\nevery jump in the program, because there might\nbe indirect jumps. For example in x86,\nyou could actually",
    "start": "2288910",
    "end": "2295520"
  },
  {
    "text": "have something like jump to\nthe value of that EAX register. This is great for implementing\nfunction pointers.",
    "start": "2295520",
    "end": "2302510"
  },
  {
    "text": "The function pointer\nsomewhere in memory, then you hold to\nfunction pointer into some register at one time.",
    "start": "2302510",
    "end": "2307870"
  },
  {
    "text": "And then you jump\nto whatever address was in the [INAUDIBLE]\nrelocation register.",
    "start": "2307870",
    "end": "2314240"
  },
  {
    "text": "So how do these guys deal\nwith these indirect jumps? So I have no idea if\nthis actually going to jump to the CD\nbyte or the 25 byte.",
    "start": "2314240",
    "end": "2322674"
  },
  {
    "text": "What do they do? Yeah? AUDIENCE: The\ninstrument [INAUDIBLE]. PROFESSOR: Yeah. So this is their basically main\ntrick here, is instrumentation.",
    "start": "2322674",
    "end": "2328690"
  },
  {
    "text": "So whenever they see\na jump like this, well actually what the\ncompiler is going to generate",
    "start": "2328690",
    "end": "2335119"
  },
  {
    "text": "is a proof that this\njump is actually going to do the right thing. And the way they actually\ndo this is-- they",
    "start": "2335120",
    "end": "2341950"
  },
  {
    "text": "don't actually know--\nit's actually kind of hard to put in a proof here that\nit's one of the addresses",
    "start": "2341950",
    "end": "2347540"
  },
  {
    "text": "that you saw during the\nleft right disassembly. So instead what\nthey do is they want to make sure that all the jumps\ngo to multiples of 32 bytes.",
    "start": "2347540",
    "end": "2355770"
  },
  {
    "text": "And the way they\ndo this is actually change all the jump\ninstructions into something",
    "start": "2355770",
    "end": "2362240"
  },
  {
    "text": "that they pseudo instructions. So they're still that\njump to the EAX register.",
    "start": "2362240",
    "end": "2367458"
  },
  {
    "text": " But they prefix it\nwith an AND instruction",
    "start": "2367458",
    "end": "2375220"
  },
  {
    "text": "that is going to\nclear the low five",
    "start": "2375220",
    "end": "2380690"
  },
  {
    "text": "bits, E 0 with an EAX register.",
    "start": "2380690",
    "end": "2390609"
  },
  {
    "text": "So that AND instruction\nclears the low five bits, which means that it\nforces this value",
    "start": "2390610",
    "end": "2396120"
  },
  {
    "text": "to be a multiple of\n32, two to the five. And then you jump to it.",
    "start": "2396120",
    "end": "2401569"
  },
  {
    "text": "So if you look at it\nduring verification time, then you can sort\nof convince yourself",
    "start": "2401570",
    "end": "2406800"
  },
  {
    "text": "that this instruction\npair will only",
    "start": "2406800",
    "end": "2412170"
  },
  {
    "text": "jump to a multiple 32 bytes. And then in order to make\nsure that this is not",
    "start": "2412170",
    "end": "2417420"
  },
  {
    "text": "going to jump to some\nweird instruction, you're going to enforce\nan extra rule, which is that during your disassembly,\nwhen you're scanning",
    "start": "2417420",
    "end": "2425195"
  },
  {
    "text": "your instructions\nfrom left to right, you're going to ensure that\nevery multiple of 32 bytes",
    "start": "2425195",
    "end": "2430640"
  },
  {
    "text": "is a start of a\nvalid instruction. So in addition to\nthis instrumentation,",
    "start": "2430640",
    "end": "2435720"
  },
  {
    "text": "you're also are going to check\nthat every multiple of 32",
    "start": "2435720",
    "end": "2444867"
  },
  {
    "text": "is a valid instruction. ",
    "start": "2444867",
    "end": "2451070"
  },
  {
    "text": "What I mean by valid instruction\nhere is an instruction that you see when you\ndisassemble from left to right.",
    "start": "2451070",
    "end": "2457889"
  },
  {
    "text": "Yeah? AUDIENCE: Why 32? PROFESSOR: Well, yeah, so\nwhy did they choose 32? That seems like\nsome magic number that they pulled out of a hat.",
    "start": "2457889",
    "end": "2463910"
  },
  {
    "text": "Should you choose 1,000 or five? Any comment? OK, should we choose five?",
    "start": "2463910",
    "end": "2471130"
  },
  {
    "text": "So why is five bad? AUDIENCE: The power of two. PROFESSOR: Yes, OK, so\nwe're on a power of two.",
    "start": "2471130",
    "end": "2476440"
  },
  {
    "text": "OK, so good point. Because otherwise ensuring\nsomething is a multiple of 5 is going to require a\ncouple of instructions here,",
    "start": "2476440",
    "end": "2481910"
  },
  {
    "text": "which is going to lead overhead. How about eight? Is eight good enough, yeah? AUDIENCE: You can have\ninstructions longer than eight.",
    "start": "2481910",
    "end": "2488090"
  },
  {
    "text": "PROFESSOR: Yeah, OK, so\nit has to be at least as long as the longest x86\ninstruction you want to allow. So if there's a ten\nbyte instruction,",
    "start": "2488090",
    "end": "2493940"
  },
  {
    "text": "everything has to be a\nmultiple of eight, well, you're kind of screwed with\na ten byte instruction. There's nowhere to put it.",
    "start": "2493940",
    "end": "2499025"
  },
  {
    "text": "So it has to be\nat least as long. 32 is pretty good, like\nthe biggest I could find was 15 bytes. So it's probably good enough.",
    "start": "2499025",
    "end": "2505596"
  },
  {
    "text": "Yeah? AUDIENCE: Can [INAUDIBLE] be\nlonger than [INAUDIBLE] code, they'd have to have\na alt instruction",
    "start": "2505596",
    "end": "2512570"
  },
  {
    "text": "at the beginning\nof the [INAUDIBLE] so you can't just jumpt\ndirectly into [INAUDIBLE] and they also need a\njump instruction that",
    "start": "2512570",
    "end": "2518048"
  },
  {
    "text": "jumps to another [INAUDIBLE]. PROFESSOR: That's right, yeah. So you have to be able\nto fit for the entry and exit from the\nprocess service runtime,",
    "start": "2518048",
    "end": "2524970"
  },
  {
    "text": "you need to be able to fit\nsome nontrivial amount of code in a single 32 byte slot. We'll see how this\nworks in a second.",
    "start": "2524970",
    "end": "2531340"
  },
  {
    "text": "Or even 31 bytes slot,\nas you are pointing out, for one hold instruction.",
    "start": "2531340",
    "end": "2537150"
  },
  {
    "text": "Should it be much larger? Should we make it, I don't know,\na thousand byte, well, 10 24?",
    "start": "2537150",
    "end": "2542788"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] sparse,\nbecause you have to have [INAUDIBLE]. PROFESSOR: Yeah, so if you\nhave a lot of function pointers",
    "start": "2542788",
    "end": "2549450"
  },
  {
    "text": "or lots of sort of indirect\njumps, then every time you want to create some place\nwhere you're going to jump to,",
    "start": "2549450",
    "end": "2556160"
  },
  {
    "text": "you have to pad it out\nto the next boundary of whatever this value is. So with 32, maybe that's OK.",
    "start": "2556160",
    "end": "2561830"
  },
  {
    "text": "You're like well, worst\ncase, you waste 31 bytes, because you just need to fast\nforward to the next boundary.",
    "start": "2561830",
    "end": "2567530"
  },
  {
    "text": "But if it's a multiple of 1024,\nthen all of a sudden you're wasting a kilobyte of\nmemory for an indirect jump.",
    "start": "2567530",
    "end": "2574730"
  },
  {
    "text": "And if you have probably short\nfunctions or lots of function pointers, then\nthis might actually",
    "start": "2574730",
    "end": "2581280"
  },
  {
    "text": "be a memory overhead all\nof a sudden, as well. Does that make sense roughly? So yeah, I think the\n32 is not set in stone.",
    "start": "2581280",
    "end": "2588329"
  },
  {
    "text": "Like Native Client has\nto have 32 byte blocks, but something on that\norder probably works. 16 is probably a little short.",
    "start": "2588330",
    "end": "2595330"
  },
  {
    "text": "On the other hand,\nlike 64 could work. 128 maybe is getting\na little longish.",
    "start": "2595330",
    "end": "2601740"
  },
  {
    "text": "But I don't think\nyou could derive 32 from first principles. Makes sense?",
    "start": "2601740",
    "end": "2608880"
  },
  {
    "text": "All right. So let's set a plan for\nreliable disassembly. And as a result, the compiler\nhas to be a little bit careful",
    "start": "2608880",
    "end": "2618030"
  },
  {
    "text": "when it's compiling your C or\nC++ code into a Native Client binary. It has to basically\nfollow these rules.",
    "start": "2618030",
    "end": "2624344"
  },
  {
    "text": "So whenever it\nhas a jump, it has to add those extra\ninstruction front.",
    "start": "2624344",
    "end": "2629640"
  },
  {
    "text": "And whatever it's\ncreating a function that it's going to jump\nto, our instruction",
    "start": "2629640",
    "end": "2634840"
  },
  {
    "text": "is going to jump to,\nas we're talking about, it has to pad it out. And it can't just pad\nit out with zeros,",
    "start": "2634840",
    "end": "2640150"
  },
  {
    "text": "because all those have\nto valid up codes. So it actually has to pad\nit out with [INAUDIBLE] just to make the\nvalidator happy,",
    "start": "2640150",
    "end": "2646535"
  },
  {
    "text": "just to make sure that every\npossible instruction is a valid one. And luckily on x86, no\nop is a single byte,",
    "start": "2646535",
    "end": "2652390"
  },
  {
    "text": "or at least there is a no\nop-- that's a single byte. There's many no ops on x86.",
    "start": "2652390",
    "end": "2657599"
  },
  {
    "text": "So you can always pad\nthings out to a multiple of whatever this constant is.",
    "start": "2657600",
    "end": "2662670"
  },
  {
    "text": "Make sense? All right. So what does this\nguarantee to us?",
    "start": "2662670",
    "end": "2669030"
  },
  {
    "text": "I guess let's make\nsure that we always see what happens in terms\nof the instructions that",
    "start": "2669030",
    "end": "2674369"
  },
  {
    "text": "will be executed. So this finally\ngets us this rule. So we can be sure there's never\na system call being issued.",
    "start": "2674370",
    "end": "2683279"
  },
  {
    "text": "What about-- So\nthis is for jumps. What about returns? How do they deal\nwith the returns?",
    "start": "2683280",
    "end": "2689570"
  },
  {
    "text": "Can you return for a\nfunction in Native Client? What would happen if you\nran into a red hot code?",
    "start": "2689570",
    "end": "2696770"
  },
  {
    "text": "Would that be good? Yeah? AUDIENCE: [INAUDIBLE] you\ndon't want the-- [INAUDIBLE] modifying your\noverall [INAUDIBLE].",
    "start": "2696770",
    "end": "2703946"
  },
  {
    "text": "PROFESSOR: Well, it's true\nthat it pops the stack. But the stack that Native\nClient modules use,",
    "start": "2703947",
    "end": "2709700"
  },
  {
    "text": "it's actually just some data\ninside of their section. So you don't actually care--\nthe Native Client contact",
    "start": "2709700",
    "end": "2716309"
  },
  {
    "text": "doesn't care whether those\nguys screws up their stacks, overflow their stack, or-- AUDIENCE: Wait, but you could\nput anything on the stack.",
    "start": "2716309",
    "end": "2722340"
  },
  {
    "text": "And when you [INAUDIBLE]\nyou jump through that-- PROFESSOR: That's true. Yeah, so return is almost\nlike an indirect jump from a particular\nweird memory location",
    "start": "2722340",
    "end": "2729160"
  },
  {
    "text": "that's at the top of the stack. So I guess one thing\nthey could do for return is maybe prefix it with a\nsimilar check, where maybe like",
    "start": "2729160",
    "end": "2736270"
  },
  {
    "text": "pop the top thing of the stack. You check whether it's\nvalid, and then you write, or you somehow do an\nAND to a memory operand,",
    "start": "2736270",
    "end": "2743240"
  },
  {
    "text": "and that's the top of the stack. It seems a little\nfragile, partly because",
    "start": "2743240",
    "end": "2748640"
  },
  {
    "text": "of race conditions. Because for example, if you\nlook at the top location of the stack, you\ncheck that it's OK, and then you do a write\nlater, another threat",
    "start": "2748640",
    "end": "2756060"
  },
  {
    "text": "in the same module\ncould modify the thing at the top of the stack. And then you'd be\nreferring to that address.",
    "start": "2756060",
    "end": "2762640"
  },
  {
    "text": "AUDIENCE: Would this not be\nthe case for the jumps as well? PROFESSOR: Yeah, so what\nhappens with the jump? Could our race conditions\nsomehow invalidate this check?",
    "start": "2762640",
    "end": "2769029"
  },
  {
    "text": " Yeah? AUDIENCE: The code\nis not writable. PROFESSOR: Well the code is\nnot writable, that's true.",
    "start": "2769030",
    "end": "2776000"
  },
  {
    "text": "So you can't modify the AND. But could another thread\nmodify this jump target",
    "start": "2776000",
    "end": "2781250"
  },
  {
    "text": "in between these\ntwo instructions? Yeah? AUDIENCE: It's in\na register, so-- PROFESSOR: Yeah,\nthat's the cool thing.",
    "start": "2781250",
    "end": "2786975"
  },
  {
    "text": "There is basically-- if\nit modifies it in memory or where ever it loaded\ninto EAX from, sure,",
    "start": "2786975",
    "end": "2792519"
  },
  {
    "text": "you do it before you load, in\nwhich case this EX will be bad, but then will\nclear the bad bits. Or it could modify it\nafter, at which point",
    "start": "2792520",
    "end": "2798909"
  },
  {
    "text": "it's already in the\nEX, so it doesn't matter that it's modifying\nthe memory location from which",
    "start": "2798909",
    "end": "2803920"
  },
  {
    "text": "the EX register was loaded. And threads don't actually\nshare the register sets.",
    "start": "2803920",
    "end": "2810529"
  },
  {
    "text": "So if another thread\nmodifies the EX register, it will not affect this\nthread's EX register. So this instruction\nactually is sort of",
    "start": "2810530",
    "end": "2817859"
  },
  {
    "text": "race-proof in some sense. Other threads can't invalidate\nthis instruction sequence.",
    "start": "2817860",
    "end": "2823719"
  },
  {
    "text": "Make sense?  All right. So here's another\ninteresting question.",
    "start": "2823719",
    "end": "2831750"
  },
  {
    "text": "Could we bypass this AND? I can jump around in this\naddress space all I want.",
    "start": "2831750",
    "end": "2836760"
  },
  {
    "text": "And when I'm disassembling\nthis instruction, this seems like a perfectly\nfine parallel instruction, an AND and a jump.",
    "start": "2836760",
    "end": "2844680"
  },
  {
    "text": "And the check for static\njumps is that, well,",
    "start": "2844680",
    "end": "2850155"
  },
  {
    "text": "it just has to point to\nsome target that was seen. So yeah, we saw an AND. That's one instruction\nthat's valid.",
    "start": "2850155",
    "end": "2855360"
  },
  {
    "text": "We saw a jump, that's\nanother valid instruction. So when I see a\ndirect jump up here, maybe I jump to some address.",
    "start": "2855360",
    "end": "2862280"
  },
  {
    "text": "I don't know, one,\ntwo, three, seven. That's actually OK, even though\nit's not a multiple of 32.",
    "start": "2862280",
    "end": "2869542"
  },
  {
    "text": "Native Client doesn't\ngenerally allow direct jumps to arbitrary\naddresses, as long as",
    "start": "2869542",
    "end": "2875290"
  },
  {
    "text": "that address is a instruction\nthat we saw during disassembly, as we were just talking about.",
    "start": "2875290",
    "end": "2881369"
  },
  {
    "text": "So could I put in this very\nnicely checked indirect jump, and then later on in the code\njump to the second instruction",
    "start": "2881370",
    "end": "2890270"
  },
  {
    "text": "in that sequence? So then I'll load\nsomething into EX, jump here, and\nthen directly jump",
    "start": "2890270",
    "end": "2895849"
  },
  {
    "text": "into this unsandboxed address.  That will violate\nthe security, right?",
    "start": "2895850",
    "end": "2902190"
  },
  {
    "text": "Does everyone see that? So how is this avoided? AUDIENCE: Well, the NaCl\n[INAUDIBLE] and the jump has to signal instruction.",
    "start": "2902190",
    "end": "2908274"
  },
  {
    "text": "PROFESSOR: Yeah, so this\nis why they call this thing a single pseudo instruction.",
    "start": "2908274",
    "end": "2914510"
  },
  {
    "text": "And even though\nat the x86 level, they're actually\ndistinct instruction, as far as the NaCl\nvalidator thinks of it,",
    "start": "2914510",
    "end": "2920760"
  },
  {
    "text": "it's actually a\nsingle atomic unit. So as far as this check for\nwhether it's an instruction",
    "start": "2920760",
    "end": "2926080"
  },
  {
    "text": "that you saw before,\nthey think, oh, this is the only instruction\nthat I saw before. Jumping in the middle\nis like jumping",
    "start": "2926080",
    "end": "2931400"
  },
  {
    "text": "in the middle of this guy. It's the same thing. So they basically enforce\nslightly different semantics",
    "start": "2931400",
    "end": "2938360"
  },
  {
    "text": "than what x86 enforces in terms\nof what an instruction is. And this might\nactually mean that you",
    "start": "2938360",
    "end": "2945589"
  },
  {
    "text": "can represent certain\ninstruction sequences in NaCl. So if you actually had\nlegitimate code that",
    "start": "2945590",
    "end": "2952430"
  },
  {
    "text": "looked like this\nbefore, this is going to be turned into a\nsingle out code in NaCl.",
    "start": "2952430",
    "end": "2958002"
  },
  {
    "text": "But hopefully that's\nnot a problem. Yeah? AUDIENCE: Presumably\nthey can out that in the trusted code base in\nthe start of the text segment.",
    "start": "2958002",
    "end": "2967040"
  },
  {
    "text": "Because that way, you will\nalways replace those two. Instead of putting those in the\nbinary that you produce anyway,",
    "start": "2967040",
    "end": "2973440"
  },
  {
    "text": "you just jump straight to\nthat jump target that's in the privileged section. PROFESSOR: In the trusted\nruntime, you mean or something?",
    "start": "2973440",
    "end": "2980170"
  },
  {
    "text": "AUDIENCE: No, so\nin the first 64 K-- PROFESSOR: Yeah, they had\nthese trampolines and yeah-- AUDIENCE: So they can make\nthat one of the trampolines.",
    "start": "2980170",
    "end": "2986420"
  },
  {
    "text": "Except that it doesn't jump out. It jumps back in. PROFESSOR: Right. AUDIENCE: So that\nway, it wouldn't",
    "start": "2986420",
    "end": "2991861"
  },
  {
    "text": "need to be a super instruction. It would just be\na single x86 jump into there, which would\nthen jump out again.",
    "start": "2991861",
    "end": "2998194"
  },
  {
    "text": "PROFESSOR: That's true, yeah. That's another sort of clever\nsolution that you could do, is instead for the\ndeliverance of [INAUDIBLE]",
    "start": "2998194",
    "end": "3004710"
  },
  {
    "text": "so suppose that you didn't want\nto do this pseudo instruction trick, and you just wanted\nto have a single instruction",
    "start": "3004710",
    "end": "3012920"
  },
  {
    "text": "replacing the jump EAX. Well, what you can\nbasically come up with is a library of all\npossible indirect jumps",
    "start": "3012920",
    "end": "3018630"
  },
  {
    "text": "you can ever do. So like well, there is jump EAX,\nthere's jump EBX, and so on.",
    "start": "3018630",
    "end": "3026410"
  },
  {
    "text": "And you would construct\na library of these guys for each of them, you would\nconstruct the safe check that you'd want to\nreplace them with.",
    "start": "3026410",
    "end": "3032750"
  },
  {
    "text": "So for this one, you'd put an\nAND in front of it, and so on. And for this one, you'll also\nput an AND in front of it,",
    "start": "3032750",
    "end": "3038452"
  },
  {
    "text": "and so on. And then in the compiled\nbinary, every time",
    "start": "3038452",
    "end": "3043470"
  },
  {
    "text": "you want to jump to EAX,\nwhat you actually do, is actually jump\nto a fixed address",
    "start": "3043470",
    "end": "3048690"
  },
  {
    "text": "that corresponds to this\nhelpful piece of code stored somewhere in that\nlow 64 k of the program.",
    "start": "3048690",
    "end": "3055490"
  },
  {
    "text": "And then this guy will do\nthe AND and jump again. The reason that they\nprobably don't do this",
    "start": "3055490",
    "end": "3061460"
  },
  {
    "text": "is performance for this\nsort of interesting reason. So that Intel processor,\nactually most processors",
    "start": "3061460",
    "end": "3067675"
  },
  {
    "text": "these days, have\nto predict where the branch goes to keep the\npipeline of the processor",
    "start": "3067675",
    "end": "3074830"
  },
  {
    "text": "full at all times. It's one of the really\ncomplicated branch predictor that not only decides whether\nyou're going to branch or not,",
    "start": "3074830",
    "end": "3080649"
  },
  {
    "text": "like if statements. But also actually guesses\nwhere you're going to jump. So if you see an indirect\njump, it actually",
    "start": "3080649",
    "end": "3085740"
  },
  {
    "text": "is going to guess what the\naddress is going to be. And this is actually\na guess that's stored per cache line stored\nin the jump instruction.",
    "start": "3085740",
    "end": "3092720"
  },
  {
    "text": "So if you have a single\nplace where all the jump EAXs come from, then\nthe CPU is always going to be very confused.",
    "start": "3092720",
    "end": "3098120"
  },
  {
    "text": "Because these jump EAXs seem\nto be going all over the place, everywhere. Where as if we are really\ntied to a particular jump",
    "start": "3098120",
    "end": "3103170"
  },
  {
    "text": "instruction, it would\nbe a better prediction. That's just a performance\ntrick that they play.",
    "start": "3103170",
    "end": "3108620"
  },
  {
    "text": "Make sense?  All right. So I guess we roughly\nunderstand how",
    "start": "3108620",
    "end": "3116127"
  },
  {
    "text": "it's going to\ndisassemble all of these instructions how it's going\nto prevent these instructions. So now let's look\nat the set of rules",
    "start": "3116127",
    "end": "3123440"
  },
  {
    "text": "they are going to enforce\nthrough this table in the paper, table one.",
    "start": "3123440",
    "end": "3128560"
  },
  {
    "text": "And it has all these different\nrules for the validator to follow, or that the\nbinaries have to follow",
    "start": "3128560",
    "end": "3135396"
  },
  {
    "text": "and the validator checks. So I'll go through these\nrules and just double check that we understand why\nall these rules are there.",
    "start": "3135396",
    "end": "3141350"
  },
  {
    "text": "So we have these things,\nC1, all the way to C7.",
    "start": "3141350",
    "end": "3148510"
  },
  {
    "text": "So C1 basically says that once\nyou load the binary memory, then the binary is actually\nnot writable at the page table",
    "start": "3148510",
    "end": "3158720"
  },
  {
    "text": "level. So they set the permission\nbits for the binary can be non-writable. So why?",
    "start": "3158720",
    "end": "3165466"
  },
  {
    "text": "It should be fairly\nobvious hopefully.  The reason is that\ntheir whole security",
    "start": "3165467",
    "end": "3172020"
  },
  {
    "text": "plan relies on them checking\nthat your binary is correct. So once they've\nchecked it, they want",
    "start": "3172020",
    "end": "3177290"
  },
  {
    "text": "to make sure you can't\nmodify the binary and have it do something\nillegal that they prohibited.",
    "start": "3177290",
    "end": "3182680"
  },
  {
    "text": "So this is I think\nreasonably clear then. So C2 is their plan\nthat basically has to",
    "start": "3182680",
    "end": "3189770"
  },
  {
    "text": "linked at zero at start at\n64 K. So this requirement,",
    "start": "3189770",
    "end": "3196890"
  },
  {
    "text": "I think doesn't actually have\nto do with security so much. I think it's just\nfor convenience, because they just want\nto have a standard layout",
    "start": "3196890",
    "end": "3203570"
  },
  {
    "text": "for the program. In some sense,\nit's for simplicity so that they don't have to deal\nwith complicated relocation",
    "start": "3203570",
    "end": "3209950"
  },
  {
    "text": "records, which\nmeans that there's fewer things that the validator\nor a loader might screw up.",
    "start": "3209950",
    "end": "3215630"
  },
  {
    "text": "But basically this is sort of a\nstandardization plan for them, in terms of how to\nload their executable.",
    "start": "3215630",
    "end": "3222279"
  },
  {
    "text": "Make sense? All right. So the third requirement is that\nI guess the indirect jumps use",
    "start": "3222280",
    "end": "3231530"
  },
  {
    "text": "the two instruction.  So the two instruction\nis this thing above.",
    "start": "3231530",
    "end": "3238859"
  },
  {
    "text": "So that, we just talked about,\nwhy it needs to ensure this, so that you don't jump to the\nmiddle of some instruction,",
    "start": "3238860",
    "end": "3245100"
  },
  {
    "text": "or somehow invoked\n[INAUDIBLE], et cetera. Make sense?",
    "start": "3245100",
    "end": "3251530"
  },
  {
    "text": "All right. So what's going on with C4? Basically you have to pad out\ntwo page boundary with a halt",
    "start": "3251530",
    "end": "3262680"
  },
  {
    "text": "instruction. Why do they want to pad\ntheir binary out with halts?",
    "start": "3262680",
    "end": "3268185"
  },
  {
    "text": " Any ideas? Yeah?",
    "start": "3268185",
    "end": "3273876"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. ",
    "start": "3273876",
    "end": "3281680"
  },
  {
    "text": "PROFESSOR: Yeah, I think--\nso I have to admit, I don't have a crisp\nanswer for why C4 exists.",
    "start": "3281680",
    "end": "3288300"
  },
  {
    "text": "But I think it's\nroughly what you are saying, which is that\nif you-- the code naturally stops at some point.",
    "start": "3288300",
    "end": "3293684"
  },
  {
    "text": "There's some end to it. And the question\nis, what happens when you just keep executing\nit, and you get to the end?",
    "start": "3293685",
    "end": "3299670"
  },
  {
    "text": "Then the processor might just\nkeep executing past the end, and execute some\nextra instructions. Or maybe it wraps around\nin some weird way.",
    "start": "3299670",
    "end": "3306450"
  },
  {
    "text": "So they just want to\nmake sure that there's no ambiguity about what\nhappens if you keep running",
    "start": "3306450",
    "end": "3312085"
  },
  {
    "text": "and you don't jump, and\nyou just run off the end of the instruction screen. So let's just make sure\nthat the only answer there",
    "start": "3312085",
    "end": "3318220"
  },
  {
    "text": "is if you keep\nexecuting, you'll halt, and you'll trap\ninto the runtime, and you'll terminate the module.",
    "start": "3318220",
    "end": "3324139"
  },
  {
    "text": "So it's just sort of about\nsimplicity and safety, [INAUDIBLE]. I don't think there's a concrete\nattack that I could have",
    "start": "3324139",
    "end": "3330780"
  },
  {
    "text": "[INAUDIBLE]. AUDIENCE: [INAUDIBLE].  PROFESSOR: Yeah.",
    "start": "3330780",
    "end": "3335950"
  },
  {
    "text": "But here's the thing. You can't jump past the end. So the last thing\nthat you could jump to",
    "start": "3335950",
    "end": "3341990"
  },
  {
    "text": "is the last instruction. And by this rule, that\ninstruction must be hold. So you could jump to the hold,\nbut then would be at the hold.",
    "start": "3341990",
    "end": "3349349"
  },
  {
    "text": "And you want to\nrun past the end. So I think it's just\nsort of cleanliness,",
    "start": "3349350",
    "end": "3354890"
  },
  {
    "text": "as far as I can tell, a\nguarantee for them to make sure that there's no\nweirdness in terms",
    "start": "3354890",
    "end": "3360361"
  },
  {
    "text": "of wrap around at the engine. All right? So C5 is basically\nno instructions",
    "start": "3360362",
    "end": "3370000"
  },
  {
    "text": "that span the 32 byte boundary.",
    "start": "3370000",
    "end": "3376160"
  },
  {
    "text": "So this is sort of a\nvariant of this rule that we talked about before,\nwhere every multiple of 32",
    "start": "3376160",
    "end": "3382410"
  },
  {
    "text": "must be a valid instruction\nthat we solder in disassembly. So otherwise, we'll jump to\nthe middle of an instruction",
    "start": "3382410",
    "end": "3387880"
  },
  {
    "text": "and have the problem\nwith that sys call that might be hidden there. OK. And then we have C6, which\nis basically all instructions",
    "start": "3387880",
    "end": "3398579"
  },
  {
    "text": "reachable by disassembly\nfrom the start.",
    "start": "3398580",
    "end": "3405584"
  },
  {
    "text": "So this ensures that we\nsee every instruction, and we can check every\ninstruction that could possibly be run at runtime.",
    "start": "3405584",
    "end": "3411930"
  },
  {
    "text": "And I guess C7 is this\nbasically all direct jumps. ",
    "start": "3411930",
    "end": "3420031"
  },
  {
    "text": "OK. So this is the example of\nthat jump up there, where you code in the target right away. So it doesn't have\na multiple of 32,",
    "start": "3420031",
    "end": "3426680"
  },
  {
    "text": "but it still has to\nbe a valid instruction that we solder in the\nleft to right disassembly.",
    "start": "3426680",
    "end": "3432003"
  },
  {
    "text": "Question? AUDIENCE: So what's the\ndifference between C5 and C3? PROFESSOR: Yeah.",
    "start": "3432003",
    "end": "3437650"
  },
  {
    "text": "So I think C5 says that\nif I have an instruction",
    "start": "3437650",
    "end": "3442829"
  },
  {
    "text": "that's multiple bytes, it cannot\nstay on that 32 byte boundary.",
    "start": "3442830",
    "end": "3449080"
  },
  {
    "text": "So suppose that I have\nmy instruction stream. And here's an address, 32.",
    "start": "3449080",
    "end": "3455900"
  },
  {
    "text": "Here's address 64. And maybe I have some\nsort of an AND instruction that sort of spans\nthis boundary.",
    "start": "3455900",
    "end": "3463060"
  },
  {
    "text": "So this is what C5 prohibits. No instructions can\nspan this boundary. Because otherwise, we\nsaw this AND instruction.",
    "start": "3463060",
    "end": "3469470"
  },
  {
    "text": "But because you can always\njump 32 byte multiples, you could jump into\nthe middle of that. And who knows what\nwill happen there?",
    "start": "3469470",
    "end": "3475380"
  },
  {
    "text": "So this is what C5\nprohibits for that. And C3 is the counterpart\nto it on the jump side.",
    "start": "3475380",
    "end": "3482089"
  },
  {
    "text": "So C3 says that\nwhenever you jump, you're going to jump to\na multiple of 32 bytes. And C5 says that everything you\ncan find in a multiple of 32",
    "start": "3482090",
    "end": "3490450"
  },
  {
    "text": "bytes is a safe instruction. AUDIENCE: I wonder if\nthere's any redundancy because [INAUDIBLE].",
    "start": "3490450",
    "end": "3495780"
  },
  {
    "text": "PROFESSOR: Yeah, I don't know. I'm not sure. I had a little bit of that\nfeeling when reading this list. It seems like, wow,\nthey're all good rules.",
    "start": "3495780",
    "end": "3501691"
  },
  {
    "text": "But I'm not sure it's the\nminimal, non-orthonormal set of-- or set of orthonormal rules\nthat you need to enforce this.",
    "start": "3501691",
    "end": "3511640"
  },
  {
    "text": "But any other\nquestions about the set of restrictions they have?",
    "start": "3511640",
    "end": "3516650"
  },
  {
    "text": "All right. So I guess let's think\nabout this homework question that we sort of assigned.",
    "start": "3516650",
    "end": "3521910"
  },
  {
    "text": "It turns out-- I think\nthere was actually a bug that Native\nClient had and that's in our sandbox at\nsome point, which is that for some\ncomplicated instruction,",
    "start": "3521910",
    "end": "3528510"
  },
  {
    "text": "I believe they didn't have\nthe length encoding correctly, if I remember\nproperly, in which case",
    "start": "3528510",
    "end": "3535980"
  },
  {
    "text": "something bad might happen. I can't remember exactly\nwhat the bug was. But suppose that the\nsandbox validator",
    "start": "3535980",
    "end": "3543099"
  },
  {
    "text": "gets the length of\nsome instruction wrong. What bad things could happen?",
    "start": "3543100",
    "end": "3548590"
  },
  {
    "text": "How would you exploit this? AUDIENCE: You can hide a\nsys call or a [INAUDIBLE] potentially. PROFESSOR: Yeah. So suppose that there's some\nfancy variant of some AND",
    "start": "3548590",
    "end": "3557600"
  },
  {
    "text": "instruction that you\ncould write down. And maybe the validator\ngets that wrong and thinks that, oh,\nthis guy is actually",
    "start": "3557600",
    "end": "3563730"
  },
  {
    "text": "six bytes, when in reality,\nit's five bites long. So you could plop this\ndown, pull this AND down.",
    "start": "3563730",
    "end": "3570200"
  },
  {
    "text": "And then the validator\nthinks, oh, it's six bites. I'll look six bites further. And I'll check whether this\nis a valid instruction.",
    "start": "3570200",
    "end": "3576669"
  },
  {
    "text": "And we just have to\nmake sure that whatever is six bytes later looks\nlike a valid instruction. But the CPU itself,\nwhen it runs this code,",
    "start": "3576669",
    "end": "3583450"
  },
  {
    "text": "is going to maybe only look\nfive bytes from the AND because that's the real\nlength of the instruction. So if we can use this extra\nbyte to stick a sys call",
    "start": "3583450",
    "end": "3590730"
  },
  {
    "text": "instruction, then we\ncould be in business. So if we stick that-- remember\nfrom that example above on x86,",
    "start": "3590730",
    "end": "3598524"
  },
  {
    "text": "OXCD is how you make\nan AND instruction. So if we stick a CD byte\nat the end of that AND,",
    "start": "3598524",
    "end": "3605050"
  },
  {
    "text": "then maybe we can\nput something here that looks like an\ninstruction but actually is going to be part of the\nAND instruction here.",
    "start": "3605050",
    "end": "3611079"
  },
  {
    "text": "And then we can all of\na sudden make a sys call and escape the inner sandbox.",
    "start": "3611080",
    "end": "3616433"
  },
  {
    "text": "Makes sense? Any questions? So the validator\nin Native Client",
    "start": "3616433",
    "end": "3622755"
  },
  {
    "text": "has to be really\nin sync with what the CPU is doing because it's\nsort of guessing, well, here's exactly how the CPU is going\nto interpret every instruction.",
    "start": "3622755",
    "end": "3629900"
  },
  {
    "text": "It has to be right\nat every level here. So that's going to be a\nlittle bit tricky to do right.",
    "start": "3629900",
    "end": "3635477"
  },
  {
    "text": "But there are actually\nsome other interesting bugs in Native Client that\npeople have found. One, I think, has to do\nwith not properly sanitizing",
    "start": "3635477",
    "end": "3642040"
  },
  {
    "text": "the environment of the CPU when\nyou're jumping into the trusted service runtime. I guess we'll talk\nabout this in a second.",
    "start": "3642040",
    "end": "3648020"
  },
  {
    "text": "But the trusted\nservice runtime is going to basically run\nwith the same sort of set of CPU registers initially\nthat the untrusted module was",
    "start": "3648020",
    "end": "3655400"
  },
  {
    "text": "running with. So if there's something\nthat it forgets to clear or reset or whatnot,\nthen the trusted service",
    "start": "3655400",
    "end": "3662230"
  },
  {
    "text": "runtime might be tricked\ninto doing something that it wasn't meant to\ndo, or the developers",
    "start": "3662230",
    "end": "3667980"
  },
  {
    "text": "didn't want to do it initially. OK. So let's see.",
    "start": "3667980",
    "end": "3673030"
  },
  {
    "text": "Where are we now? So what we understand\nnow is roughly how we can disassemble\nall the instructions and how to prevent\ndisallowed instructions.",
    "start": "3673030",
    "end": "3679860"
  },
  {
    "text": "So now let's look at, how do we\nkeep the memory and references for both code and data within\nthe bounds of the module?",
    "start": "3679860",
    "end": "3689550"
  },
  {
    "text": "So for performance reasons,\nthe Native Client guys actually start using some\nhardware support at this point to make\nsure this actually",
    "start": "3689550",
    "end": "3696810"
  },
  {
    "text": "doesn't impose much overhead. But before we look at the\nhardware support they use, does anyone have any suggestions\nfor how we could do it actually",
    "start": "3696810",
    "end": "3703330"
  },
  {
    "text": "without any hardware support? Could we just enforce\nall the memory accesses",
    "start": "3703330",
    "end": "3708430"
  },
  {
    "text": "going in bounds with the\nmachine we have so far? Yeah. AUDIENCE: You can\ninstrument the instructions",
    "start": "3708430",
    "end": "3716069"
  },
  {
    "text": "to clear all the higher bits. PROFESSOR: That's right. Yeah. So actually we see that we have\nthis instruction over here,",
    "start": "3716070",
    "end": "3721080"
  },
  {
    "text": "which every time\nwe, for example, jump somewhere, right now,\nwe clear the low bits. But if we want to keep all\nthe possible code that you're",
    "start": "3721080",
    "end": "3728310"
  },
  {
    "text": "executing within\nthe low 256 Megs, then you could just\nreplace this with a 0.",
    "start": "3728310",
    "end": "3733330"
  },
  {
    "text": "So we end with 0ffffe0. So this clears the low bits and\nalso caps to at most 256 Megs.",
    "start": "3733330",
    "end": "3741521"
  },
  {
    "text": "So this does exactly what\nyou're sort of suggesting and would make sure that\nwhenever you're jumping,",
    "start": "3741521",
    "end": "3746720"
  },
  {
    "text": "you're saying within\nthe low 256 Megs. And the fact that we're\ndoing disassembly,",
    "start": "3746720",
    "end": "3754420"
  },
  {
    "text": "you can also check for\nall the direct jumps, that they're all in bounds. And that's actually not so bad.",
    "start": "3754420",
    "end": "3760414"
  },
  {
    "text": "The reason I think they\ndon't do this for code is because in x86 you can very\nefficiently encode an AND where",
    "start": "3760414",
    "end": "3766340"
  },
  {
    "text": "all the top bits are 1. So this turns out\nto be, I think, basically a 3 byte\ninstruction for the AND,",
    "start": "3766340",
    "end": "3773185"
  },
  {
    "text": "and a 2 byte instruction\nfor the jump. So the overhead is,\nlike, 3 more bytes. But if you want to\nhave non-1 high bits,",
    "start": "3773185",
    "end": "3780260"
  },
  {
    "text": "then this is actually now a 5\nbyte instruction all of sudden. So I think they're worried a\nlittle bit about the overhead here.",
    "start": "3780260",
    "end": "3785500"
  },
  {
    "text": "Question? AUDIENCE: Isn't there\nalso the problem that you might have\nsome instructions which increment what version\nthat you're trying to get?",
    "start": "3785500",
    "end": "3791839"
  },
  {
    "text": "So you might say--\nyour instruction might have a constant offset\nor something like that. PROFESSOR: Well, I think, yeah.",
    "start": "3791840",
    "end": "3797478"
  },
  {
    "text": "You would probably\nprohibit instructions that jump to some complicated\nformula of an address. So you will only support an\ninstruction that jumps directly",
    "start": "3797478",
    "end": "3804520"
  },
  {
    "text": "to this value. And this value always\ngets ANDed and-- AUDIENCE: It's more for\nmemory accesses rather than--",
    "start": "3804520",
    "end": "3810470"
  },
  {
    "text": "PROFESSOR: Yeah. So that's a good point\nbecause this is just code. And for memory access, there's\nlots of weird ways on x86",
    "start": "3810470",
    "end": "3817060"
  },
  {
    "text": "to refer to a particular\nmemory location. In that case, you basically\nhave to first compute the memory",
    "start": "3817060",
    "end": "3823070"
  },
  {
    "text": "location, then insert an extra\nand, and then do the access. And I think that's the real\nreason why they're actually",
    "start": "3823070",
    "end": "3830210"
  },
  {
    "text": "very worried about the\nperformance overheads of this instrumentation. So on x86, at least\non the 32-bit, which",
    "start": "3830210",
    "end": "3836426"
  },
  {
    "text": "is what this paper talks about,\nthey actually use some hardware support instead to\nlimit the code and data",
    "start": "3836426",
    "end": "3843060"
  },
  {
    "text": "addresses that the untrusted\nmodule can refer to. So this actually leverages\nsome somewhat esoteric hardware",
    "start": "3843060",
    "end": "3851810"
  },
  {
    "text": "in x86. So let's see what it looks\nlike first before we start figuring out how\nwe're going to use",
    "start": "3851810",
    "end": "3857932"
  },
  {
    "text": "it to sandbox the next module. So this hardware is\ncalled segmentation.",
    "start": "3857932",
    "end": "3864650"
  },
  {
    "text": "It's sort of left over\nfrom the days before x86 actually even had paging.",
    "start": "3864650",
    "end": "3870650"
  },
  {
    "text": "So the way it works is actually\nthere's a segmentation on x86.",
    "start": "3870650",
    "end": "3880079"
  },
  {
    "text": "They way it works is that\nwhenever a process is running, there's actually a table\nmaintained by the hardware.",
    "start": "3880080",
    "end": "3889829"
  },
  {
    "text": "Let's call it the\nsegment descriptor table. ",
    "start": "3889830",
    "end": "3899324"
  },
  {
    "text": "And what this table has is\njust a bunch of segments, numbered from 0 up to\nwhatever the size of the table",
    "start": "3899324",
    "end": "3905670"
  },
  {
    "text": "is, kind of like file\ndescriptor in Unix. Except every entry\nhas two values in it,",
    "start": "3905670",
    "end": "3911870"
  },
  {
    "text": "some sort of a\nbase and a length. And the same for every\nentry, base and length.",
    "start": "3911870",
    "end": "3919110"
  },
  {
    "text": " OK. So what this table\ndoes is it tells us",
    "start": "3919110",
    "end": "3924790"
  },
  {
    "text": "that we have a\ncouple of segments. And whenever we refer to\na particular segment, what",
    "start": "3924790",
    "end": "3930070"
  },
  {
    "text": "this in some sense\nmeans is that we're talking about a chunk of memory\nthat starts at address base",
    "start": "3930070",
    "end": "3937380"
  },
  {
    "text": "and goes for this length\nfrom that base upwards. And the way that\nthis actually helps",
    "start": "3937380",
    "end": "3943640"
  },
  {
    "text": "us to enforce memory\nbounds is that on x86, every single instruction\nin one way or another,",
    "start": "3943640",
    "end": "3951530"
  },
  {
    "text": "whenever it's\ntalking about memory, actually talks about\nmemory with respect to a particular\nsegment in this table.",
    "start": "3951530",
    "end": "3958819"
  },
  {
    "text": "So for example, when you\nactually do something like move a memory value from a pointer\nstored in the EAX register",
    "start": "3958820",
    "end": "3969130"
  },
  {
    "text": "into maybe another\npointer stored in the EBX register, what you think it\ndoes is it figures out, well,",
    "start": "3969130",
    "end": "3976127"
  },
  {
    "text": "what's this address? It knows the memory\nat this address. And then it figures out,\nOK, what's this address? And it stores the value there.",
    "start": "3976127",
    "end": "3981700"
  },
  {
    "text": "But in fact on x86, whenever\nyou're talking about memory, there's an implicit--\nwhat's called a segment",
    "start": "3981700",
    "end": "3987900"
  },
  {
    "text": "descriptor, which is kind of\nlike a file descriptor in Unix. It's just an index into\nthis descriptor table.",
    "start": "3987900",
    "end": "3993744"
  },
  {
    "text": "And unless specified\notherwise, every opcode has a default segment in it. So when you're\ndoing a move, this",
    "start": "3993744",
    "end": "4000946"
  },
  {
    "text": "is actually relative to the DS\nor the data segment register. So it's like a special\nregister in your CPU",
    "start": "4000946",
    "end": "4007790"
  },
  {
    "text": "that's a 16-bit integer,\nif I remember correctly. And that 16-bit integer points\ninto the descriptor table.",
    "start": "4007790",
    "end": "4015020"
  },
  {
    "text": "And the same here. This is actually the relative\nto that DS segment selector. Actually, a bunch of these guys\nare 6 segment selectors on x86.",
    "start": "4015020",
    "end": "4022690"
  },
  {
    "text": "There's a code selector\nCS, DS, ES, FS, GS, and SS.",
    "start": "4022690",
    "end": "4030740"
  },
  {
    "text": "And the code selector\nis sort of implicitly used to fetch the instructions.",
    "start": "4030740",
    "end": "4036000"
  },
  {
    "text": "So if your instruction\npointer points somewhere, it's actually relative to what\nthe CS segment selector says.",
    "start": "4036000",
    "end": "4042300"
  },
  {
    "text": "And most data references\nimplicitly use either DS or ES. And then FS and GS are\nsome special things.",
    "start": "4042300",
    "end": "4048890"
  },
  {
    "text": "And SS is always used\nfor the stack operations. If you push and\npop, they implicitly come off of this\nsegment selector.",
    "start": "4048890",
    "end": "4055625"
  },
  {
    "text": "It's a fairly baroque\nmachinery, but it turns out to be hugely useful for\nthis particular use case",
    "start": "4055625",
    "end": "4061270"
  },
  {
    "text": "because what happens is if you\naccess some address at maybe",
    "start": "4061270",
    "end": "4066630"
  },
  {
    "text": "some selector DS: some offset\nor some address here, what",
    "start": "4066630",
    "end": "4073390"
  },
  {
    "text": "the hardware will actually do\nis translate it into-- well, it'll put this\naddress, and it'll",
    "start": "4073390",
    "end": "4079680"
  },
  {
    "text": "add the table of DS,\nthe base to this guy.",
    "start": "4079680",
    "end": "4087140"
  },
  {
    "text": "And it'll actually\ntake the address modulo the length from the same table.",
    "start": "4087140",
    "end": "4093880"
  },
  {
    "text": "So whenever you're\ndoing a memory access, it's actually going to have the\nbase of your segment selectors,",
    "start": "4093880",
    "end": "4100002"
  },
  {
    "text": "sort of descriptor table\nentry, and take your address that you're actually\nspecifying and mod it",
    "start": "4100002",
    "end": "4105250"
  },
  {
    "text": "with the length of the\ncorresponding segment. Does this make sense? It's a little baroque, but\nthat's what [INAUDIBLE].",
    "start": "4105250",
    "end": "4112750"
  },
  {
    "text": "AUDIENCE: So why isn't\nthis used, for example, for buffer protection? PROFESSOR: Yeah. It's a good question.",
    "start": "4112750",
    "end": "4117874"
  },
  {
    "text": "So could you use\nthis for protecting against buffer overflows? ",
    "start": "4117874",
    "end": "4123729"
  },
  {
    "text": "What's the plan? You could basically set up--\nfor every buffer that you have,",
    "start": "4123729",
    "end": "4128759"
  },
  {
    "text": "you could put the\nbuffer's base here. You can put the size\nof the buffer there.",
    "start": "4128760",
    "end": "4133892"
  },
  {
    "text": "AUDIENCE: What if you\ndon't need to put it there before you want to write to it? You wouldn't need\nit there constantly. PROFESSOR: Yeah.",
    "start": "4133892",
    "end": "4139568"
  },
  {
    "text": "So I think the reason\nthat this isn't used so much for protecting\nagainst buffer overflows is that this table has at\nmost 2 to the 16 entries",
    "start": "4139569",
    "end": "4149140"
  },
  {
    "text": "because these descriptors\nare actually 16 bits long. And in fact, a couple of the\nbits are used for other stuff.",
    "start": "4149140",
    "end": "4154380"
  },
  {
    "text": "So in fact, I think you can only\nstick 2 to the 13 entries here. So if you have more than 2\nto the 13 variable size array",
    "start": "4154380",
    "end": "4161584"
  },
  {
    "text": "things in your code,\nthen it's probably going to overflow this table. That was actually\na little bit weird",
    "start": "4161584",
    "end": "4167630"
  },
  {
    "text": "for the compiler to\nmanipulate this table because the way you\nactually manipulate it is through system calls. So you can't actually\ndirectly write to this table.",
    "start": "4167630",
    "end": "4173899"
  },
  {
    "text": "You have to issue a system\ncall to the operating system. And the operating system\nwill pull this table into the hardware for you.",
    "start": "4173899",
    "end": "4179799"
  },
  {
    "text": "So I think most\ncompilers just don't bother having this complicated\nstory for managing buffers.",
    "start": "4179800",
    "end": "4186549"
  },
  {
    "text": "Multex actually did this though. So on Multex, you\nactually kind of have 2 to the 18 distinct segments and\n2 to the 18 possible offsets",
    "start": "4186550",
    "end": "4194902"
  },
  {
    "text": "within a segment. And every possible\nshared library chunk or chunk of memory was\na distinct segment.",
    "start": "4194902",
    "end": "4200020"
  },
  {
    "text": "And then they would\nall be range checked, not maybe at the variable level. But still. Yeah.",
    "start": "4200020",
    "end": "4205285"
  },
  {
    "text": "AUDIENCE: Presumably,\nit's also a bit slower if you have to tap into the\nkernel all the time to-- PROFESSOR: That's right. Yeah. So there's also the overhead.",
    "start": "4205286",
    "end": "4211330"
  },
  {
    "text": "I guess to set this up,\nthere would be some overhead. Or if you create a new buffer\non the stack, all of a sudden,",
    "start": "4211330",
    "end": "4216389"
  },
  {
    "text": "you have to call in to\nthis guy and add an extra. So yeah, it is nice machinery.",
    "start": "4216390",
    "end": "4222150"
  },
  {
    "text": "But it's mostly used\nfor coarser grain things because of the overhead\nof changing it a bit.",
    "start": "4222150",
    "end": "4228269"
  },
  {
    "text": "Makes sense? All right. So how many of these\nguys actually use now the segmentation machinery?",
    "start": "4228269",
    "end": "4233971"
  },
  {
    "text": "Well, you can sort of\nguess how it works. I guess by default all\nthese segments in x86 have a base of 0 and a\nlength of 2 to the 32.",
    "start": "4233971",
    "end": "4241267"
  },
  {
    "text": "So you can access the\nentire range of memory you could possibly want. So for Native Client, what\nthey do is code in a base of 0",
    "start": "4241267",
    "end": "4248120"
  },
  {
    "text": "and a length of 256 Megs. And then they point\nall these six segment",
    "start": "4248120",
    "end": "4256680"
  },
  {
    "text": "selector registers to this\nentry for a 256 Meg region. So then whenever the hardware\ndoes a memory access,",
    "start": "4256680",
    "end": "4263699"
  },
  {
    "text": "it's going to mod it. The offset was 256 Megs. So it'll be restricted to the\n256 Meg range of memory that's",
    "start": "4263700",
    "end": "4270850"
  },
  {
    "text": "allowed for the module\nto [INAUDIBLE] modify. Makes sense?",
    "start": "4270850",
    "end": "4276360"
  },
  {
    "text": "All right. So I guess we sort of roughly\nunderstand now this hardware",
    "start": "4276360",
    "end": "4281370"
  },
  {
    "text": "support and how this works and\nhow you could eventually do the wealth segment selectors.",
    "start": "4281370",
    "end": "4288070"
  },
  {
    "text": "So if we just\nimplement this plan, is there anything\nthat could go wrong?",
    "start": "4288070",
    "end": "4293380"
  },
  {
    "text": "Could we escape out of\nthe segment selector in the untrusted module?",
    "start": "4293380",
    "end": "4298440"
  },
  {
    "text": " I guess one thing\nyou have to watch out",
    "start": "4298440",
    "end": "4303640"
  },
  {
    "text": "for is that these registers are\njust like regular registers. And you can actually move\nvalues in and out of them.",
    "start": "4303640",
    "end": "4308700"
  },
  {
    "text": "So you have to make sure that\nthe untrusted module doesn't tamper with these registers,\nthe segment selectors,",
    "start": "4308700",
    "end": "4314219"
  },
  {
    "text": "because somewhere in\nyour descriptor table is also the original\nsegment descriptor",
    "start": "4314220",
    "end": "4319830"
  },
  {
    "text": "for your entire process,\nwhich has a base of 0 and a length of 2 to the 32. So if the untrusted\nmodule could somehow",
    "start": "4319830",
    "end": "4326520"
  },
  {
    "text": "change the CS or DS or\nES or any of these guys to point to this original\noperating system that",
    "start": "4326520",
    "end": "4334890"
  },
  {
    "text": "covers your entire\naddress space, then you could then do memory\nreferences with respect to this segment and get\nout of this sandbox.",
    "start": "4334890",
    "end": "4342070"
  },
  {
    "text": "So as a result,\nNative Client has to add some more instructions\nto this prohibited list.",
    "start": "4342070",
    "end": "4347930"
  },
  {
    "text": "So I think they basically\nprohibit all instructions that move into a segment\nselector DS, ES, et cetera,",
    "start": "4347930",
    "end": "4355590"
  },
  {
    "text": "so that once you're\nin the sandbox, you cannot change the segment\nthat you are referencing things",
    "start": "4355590",
    "end": "4361840"
  },
  {
    "text": "with respect to. Makes sense? Yeah. AUDIENCE: The segmentation such\nand such provides [INAUDIBLE].",
    "start": "4361840",
    "end": "4367135"
  },
  {
    "text": "PROFESSOR: Yeah. So it turns out that on\nx86, the instructions to change the segment\ndescriptor table are privileged.",
    "start": "4367135",
    "end": "4373040"
  },
  {
    "text": "But changing these\nindices into the table are completely unprivileged.",
    "start": "4373040",
    "end": "4378934"
  },
  {
    "text": "Yeah. Other questions? Yeah. AUDIENCE: Can you\ninitialize the table to put all 0 lengths\nin the unused slots?",
    "start": "4378934",
    "end": "4387380"
  },
  {
    "text": "PROFESSOR: Well, yeah. So the unused slots--\nyou could-- yeah. You can set the\nlength of the table to something so there\nare no unused slots.",
    "start": "4387380",
    "end": "4394390"
  },
  {
    "text": "It turns out that you actually\nneed this extra slot containing 0 and 2 to the 32 because\nthe trusted run time is going",
    "start": "4394390",
    "end": "4402260"
  },
  {
    "text": "to need to run in this segment\nand access the entire memory range. So you need this entry in\nthere for the trusted runtime",
    "start": "4402260",
    "end": "4409470"
  },
  {
    "text": "to work. Question? AUDIENCE: [INAUDIBLE] set list? In order to set the table\noutput to some length,",
    "start": "4409470",
    "end": "4414920"
  },
  {
    "text": "do you need to-- PROFESSOR: No, actually. It's pretty cool. It was like something that\nyou don't have any root for. On Linux, there's\nactually a system",
    "start": "4414920",
    "end": "4420928"
  },
  {
    "text": "called-- I think it's called\nmodify_ldt for local descriptor table.",
    "start": "4420928",
    "end": "4426370"
  },
  {
    "text": "And it lets any process\nmodify its own table. These tables are\nactually per process. Well, as everything in x86,\nit's actually more complicated.",
    "start": "4426370",
    "end": "4433250"
  },
  {
    "text": "There's a global table,\nand there's a local table. But the local table\nis for a process you can modify [INAUDIBLE].",
    "start": "4433250",
    "end": "4439930"
  },
  {
    "text": "Makes sense? All right. OK. So I guess one thing we\ncould now try to figure out",
    "start": "4439930",
    "end": "4446987"
  },
  {
    "text": "is, how do we jump in and out\nof the Native Client runtime or out of the sandbox?",
    "start": "4446987",
    "end": "4453774"
  },
  {
    "text": "So what does it mean\nfor us to jump out? So we need to run\nthat trusted code. And the trusted code\nlives somewhere up",
    "start": "4453774",
    "end": "4459539"
  },
  {
    "text": "above the 256 Meg limit. And in order to jump\nthere, we basically have to undo all these\nprotections that Native Client",
    "start": "4459540",
    "end": "4466960"
  },
  {
    "text": "sets in place. And they basically boil down\nto changing these selectors.",
    "start": "4466960",
    "end": "4472204"
  },
  {
    "text": "So we already-- I\nguess our validator isn't going to\nenforce the same rules for the stuff above 256 Megs.",
    "start": "4472204",
    "end": "4477880"
  },
  {
    "text": "So that's easy enough. But then we need to somehow\njump into the trusted runtime and reset these segment\nselectors to the right values,",
    "start": "4477880",
    "end": "4485710"
  },
  {
    "text": "to this giant segment that\ncovers the entire process address space.",
    "start": "4485710",
    "end": "4491640"
  },
  {
    "text": "So the way that works\non Native Client is through this\nmechanism they call trampolines and springboards.",
    "start": "4491640",
    "end": "4498450"
  },
  {
    "start": "4498450",
    "end": "4503730"
  },
  {
    "text": "So all these guys\nare things that live in the low 64k of the module.",
    "start": "4503730",
    "end": "4512020"
  },
  {
    "text": "And the cool thing\nabout that is that these are going to be sort of chunks\nof code laying at the lower 64k of that process space.",
    "start": "4512020",
    "end": "4518910"
  },
  {
    "text": "So that means that this\nuntrusted module can actually jump there because it's\na valid code address.",
    "start": "4518910",
    "end": "4524850"
  },
  {
    "text": "It's going to be on the 32\nbyte boundary potentially. And it's going to be\nwithin the 256 Meg limit. So you can jump to\nthese trampolines.",
    "start": "4524850",
    "end": "4531675"
  },
  {
    "text": "But the Native Client\nruntime is going to actually copy\nthese trampolines from somewhere outside.",
    "start": "4531675",
    "end": "4537560"
  },
  {
    "text": "So the Native\nClient module isn't allowed to supply its\nown trampoline code. The trampoline code comes\nfrom the trusted runtime.",
    "start": "4537560",
    "end": "4543905"
  },
  {
    "text": "So as a result, it\nactually contains all these sensitive\ninstructions, like moving DS\nand CS, et cetera,",
    "start": "4543905",
    "end": "4550389"
  },
  {
    "text": "that the untrusted code\nitself is not allowed to have. So the way you actually\njump out of the sandbox",
    "start": "4550390",
    "end": "4558320"
  },
  {
    "text": "and into the trusted runtime\nto do something like malop or create a threat is you\njump to a trampoline, which",
    "start": "4558320",
    "end": "4564789"
  },
  {
    "text": "lives at a 32 byte offset. So maybe it's an address. Well, who knows? Maybe it's 4,096 plus 32.",
    "start": "4564790",
    "end": "4572430"
  },
  {
    "text": "And it's going to have some\ninstructions to basically undo these segment selectors. So what it's\nprobably going to do",
    "start": "4572430",
    "end": "4578195"
  },
  {
    "text": "is it's going to move some\nvalue-- I don't know, maybe 7-- into the DS register and maybe\nsome points to this entry here",
    "start": "4578195",
    "end": "4586420"
  },
  {
    "text": "that's allowed for the entire\n2 to the 32 address space. And then you're going\nto effectively move",
    "start": "4586420",
    "end": "4593140"
  },
  {
    "text": "CS and then jump somewhere\nup into the service runtime.",
    "start": "4593140",
    "end": "4599140"
  },
  {
    "text": "And this is basically\ngoing to be past 256 Megs.",
    "start": "4599140",
    "end": "4604382"
  },
  {
    "text": "So there's going to be\nthis jump in here that's not regularly allowed. But we're going to be\nOK with it because it's",
    "start": "4604382",
    "end": "4610390"
  },
  {
    "text": "going to be into a point in the\ntrusted service runtime that is expecting these jumps.",
    "start": "4610390",
    "end": "4615574"
  },
  {
    "text": "And it's going to perform\nproper checks afterwards on the arguments and\nwhatever else that is",
    "start": "4615574",
    "end": "4621845"
  },
  {
    "text": "being passed around. And we can actually\ndo this, move DS here, because we know that\nit's actually safe. The code we're going\nto jump to isn't",
    "start": "4621846",
    "end": "4628466"
  },
  {
    "text": "going to do anything\narbitrary or funny with our untrusted module. Makes sense roughly,\nwhat's going on?",
    "start": "4628466",
    "end": "4636929"
  },
  {
    "text": "So why do these guys bother\njumping out of the segments? Like, why not just put the\nwhole thing in the trampoline?",
    "start": "4636930",
    "end": "4642020"
  },
  {
    "text": " It seems like more\nwork on some level.",
    "start": "4642020",
    "end": "4647885"
  },
  {
    "text": "Yeah. AUDIENCE: We only have 64. PROFESSOR: Yeah, you don't\nactually have a lot of space. Well, I guess you have 64k.",
    "start": "4647885",
    "end": "4654270"
  },
  {
    "text": "So that's potentially maybe\nenough for-- maybe you can move a malop in there. But the problem is not\nso much the 64k thing",
    "start": "4654270",
    "end": "4660820"
  },
  {
    "text": "but this 32 byte restriction. And it's actually\nnot a restriction on the trusted code,\nbecause the trusted code can",
    "start": "4660820",
    "end": "4667355"
  },
  {
    "text": "do whatever it wants here. It's not going to be checked. The problem is that\nthe untrusted code can",
    "start": "4667355",
    "end": "4672520"
  },
  {
    "text": "jump to every 32 byte offset. So every 32 byte\noffset has to be prepared to be very\nspecial in its arguments.",
    "start": "4672520",
    "end": "4679389"
  },
  {
    "text": "So you probably are going\nto have a hard time writing this code here\nwith every 32 bytes",
    "start": "4679390",
    "end": "4685500"
  },
  {
    "text": "rechecking the arguments\nand values and so on. So basically, you have to\njump out of the trampoline",
    "start": "4685500",
    "end": "4690980"
  },
  {
    "text": "and into the runtime up here\nwithin 32 bytes of code.",
    "start": "4690980",
    "end": "4697750"
  },
  {
    "text": "So then if you jump\nto the next thing, then, well, something else\nis going to happen here. But it's not part of this\nsame trusted routine here.",
    "start": "4697750",
    "end": "4706410"
  },
  {
    "text": "Makes sense? OK. So this is how you sort of\njump out of the sandbox.",
    "start": "4706410",
    "end": "4712060"
  },
  {
    "text": "To jump back in, you also\nneed to-- you basically need to invert these\ntransformations.",
    "start": "4712060",
    "end": "4717849"
  },
  {
    "text": "You need to sort of set the\nDS back and CS back and so on. And the tricky thing is that\nif you're running outside",
    "start": "4717850",
    "end": "4724320"
  },
  {
    "text": "of this 256 Meg limit, if you're\nrunning inside of the trusted run time, then you can't really\nreset these registers yet,",
    "start": "4724320",
    "end": "4733060"
  },
  {
    "text": "because otherwise,\nyou won't then be able to access any of the\nmemory in your space outside. So what they actually do is\nthey have this thing called",
    "start": "4733060",
    "end": "4740310"
  },
  {
    "text": "a springboard, which\nis how the trusted runtime from outside\nthe 256 Meg limit",
    "start": "4740310",
    "end": "4745769"
  },
  {
    "text": "is actually going to jump back\ninto the Native Client module. So here it's going to reload the\nDS register with maybe whatever",
    "start": "4745769",
    "end": "4753707"
  },
  {
    "text": "that limit in the\nsegment descriptor is. Maybe let's say it's 1. And then it's going\nto reset other things,",
    "start": "4753707",
    "end": "4759180"
  },
  {
    "text": "and then it'll jump\nto whatever address",
    "start": "4759180",
    "end": "4764190"
  },
  {
    "text": "the trusted runtime\nwants to return to in the untrusted module.",
    "start": "4764190",
    "end": "4770640"
  },
  {
    "text": "Makes sense? So this is how you\nsort of jump back in. And the only sort\nof tricky piece here is that you don't want\nthe untrusted code to jump",
    "start": "4770640",
    "end": "4778120"
  },
  {
    "text": "into the springboard itself. Maybe something\nweird will happen. Who knows? So what they do is they\nactually put a halt instruction",
    "start": "4778120",
    "end": "4784940"
  },
  {
    "text": "as the first byte of this\n32 byte multiple sequence. So if you jump to the\nbeginning of this guy,",
    "start": "4784940",
    "end": "4792896"
  },
  {
    "text": "you'll immediately halt.\nThe trusted runtime is going to jump to\none past this byte",
    "start": "4792896",
    "end": "4799070"
  },
  {
    "text": "and be able to execute\nthe springboard. But this is something that\nonly the trusted runtime can do because regularly\nchecked, this",
    "start": "4799070",
    "end": "4805321"
  },
  {
    "text": "is not going to be allowed. Question? AUDIENCE: Wait. Is it a springboard in\nthe untrusted module? PROFESSOR: So the\nspringboard is within the 0",
    "start": "4805321",
    "end": "4812139"
  },
  {
    "text": "to 256 Meg part of\nthe untrusted module. But it actually lives\nin that 64 bit chunk",
    "start": "4812140",
    "end": "4817210"
  },
  {
    "text": "at the very beginning\nthat doesn't actually come from the binary you\ndownload from some website. But it's actually\npatched into it",
    "start": "4817210",
    "end": "4822690"
  },
  {
    "text": "by the Native Client\nruntime when it first loads this module into memory. AUDIENCE: Why not just\nhave it in the runtime?",
    "start": "4822690",
    "end": "4829214"
  },
  {
    "text": "PROFESSOR: Yeah. So why not have\nit in the runtime? So what happens if the\nruntime was allowed to supply the springboard? ",
    "start": "4829214",
    "end": "4838269"
  },
  {
    "text": "Is this bad?  Yeah.",
    "start": "4838269",
    "end": "4844528"
  },
  {
    "text": "AUDIENCE: How would\nit know-- how would it know where to jump back to? PROFESSOR: Well, I think what\nthis actually is is it actually",
    "start": "4844528",
    "end": "4851929"
  },
  {
    "text": "jumps to something like EAX. So the trusted\nruntime says, oh, I want to return to this address.",
    "start": "4851930",
    "end": "4857342"
  },
  {
    "text": "It puts it on the EAX\nregister, jumps here. The springboard does this, this,\nthis and then jumps to EAX,",
    "start": "4857342",
    "end": "4862374"
  },
  {
    "text": "wherever the trusted\nruntime's set up to jump. So what if the module came\nwith its own springboard?",
    "start": "4862374",
    "end": "4868960"
  },
  {
    "text": "AUDIENCE: Well, you could do it\nas a natural jump type thing. But it shouldn't know anything\nabout the descriptor table.",
    "start": "4868960",
    "end": "4875782"
  },
  {
    "text": "That's a hardware-- PROFESSOR: Yeah. So actually, this is a\nreally important instruction for sandboxing, the fact that\nwe reload that descriptor",
    "start": "4875782",
    "end": "4882025"
  },
  {
    "text": "to point at one of those\nlimited descriptors up there. It's really important. And if the module was allowed\nto supply its own springboard,",
    "start": "4882025",
    "end": "4890360"
  },
  {
    "text": "maybe it'll just skip this part\nand then not restrict itself back to 256 Megs.",
    "start": "4890360",
    "end": "4895750"
  },
  {
    "text": "So once you jump\nthrough the springboard, you'll be able to still access\nthe entire process address space.",
    "start": "4895750",
    "end": "4901050"
  },
  {
    "text": "So the springboard is part\nof the enforcement mechanism. It sort of sets\nup the boundaries. So this is the\nreason why I think",
    "start": "4901050",
    "end": "4907641"
  },
  {
    "text": "they don't want the springboard\nto come from the developer. Now-- yeah, question?",
    "start": "4907642",
    "end": "4913440"
  },
  {
    "text": "AUDIENCE: Can you put the\nspringboard past 256 megabytes? PROFESSOR: So I\nthink they don't want",
    "start": "4913440",
    "end": "4918650"
  },
  {
    "text": "to put the springboard\npast the 256 Megs because then you might\nhave trouble jumping down.",
    "start": "4918650",
    "end": "4924449"
  },
  {
    "text": "So you want to jump to\na particular address, but you also want to set\nup extra registers here.",
    "start": "4924450",
    "end": "4930780"
  },
  {
    "text": "So if you're-- I think this\nbasically has to-- sorry. This has to do with setting\nthat CS code descriptor",
    "start": "4930780",
    "end": "4937500"
  },
  {
    "text": "segment because you want\nto set the code descriptor segment to this bounded\nsegment, and you",
    "start": "4937500",
    "end": "4943060"
  },
  {
    "text": "want to jump to some particular\naddress at the same time. So I think it's\neasier for these guys to do it through a springboard\nbecause you first sort of jump",
    "start": "4943060",
    "end": "4950010"
  },
  {
    "text": "to here. Then you can set your CS value. But you can still\nexecute the same code you're still running because\nyou're within the 256 bound.",
    "start": "4950010",
    "end": "4960355"
  },
  {
    "text": "Makes sense? I think basically it\nhas to do with what atomic primitives the\nhardware provides to you.",
    "start": "4960355",
    "end": "4967510"
  },
  {
    "text": "So basically, you want to set a\nwhole bunch of these DS segment selector registers and the CS\nregister and jump to somewhere",
    "start": "4967510",
    "end": "4972644"
  },
  {
    "text": "at the same time. So this is one way\nfor them to do it.",
    "start": "4972644",
    "end": "4979560"
  },
  {
    "text": "I think that's maybe\nnot as [INAUDIBLE]. Probably, if you tried\nhard, you could probably come up with some x86\ninstruction sequence that",
    "start": "4979560",
    "end": "4986490"
  },
  {
    "text": "could do it from outside\nthe bound of the address space in the module.",
    "start": "4986490",
    "end": "4992558"
  },
  {
    "text": "Makes sense? All right. So I guess that's it\nfor Native Client. And I'll see you guys next week.",
    "start": "4992558",
    "end": "4998580"
  },
  {
    "text": "We'll talk about web\nsecurity as far as I know.",
    "start": "4998580",
    "end": "5001630"
  }
]