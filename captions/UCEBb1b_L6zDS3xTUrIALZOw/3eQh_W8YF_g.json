[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "The problem we need to solve is where to store\nthe values needed by procedure: its arguments,",
    "start": "450",
    "end": "6140"
  },
  {
    "text": "its return address, its return value.",
    "start": "6140",
    "end": "9610"
  },
  {
    "text": "The procedure may also need storage for its\nlocal variables and space to save the values",
    "start": "9610",
    "end": "14169"
  },
  {
    "text": "of the caller's registers before they get\noverwritten by the procedure.",
    "start": "14169",
    "end": "18600"
  },
  {
    "text": "We'd like to avoid any limitations on the\nnumber of arguments, the number of local variables,",
    "start": "18600",
    "end": "23530"
  },
  {
    "text": "etc.",
    "start": "23530",
    "end": "24710"
  },
  {
    "text": "So we'll need a block of storage for each\nactive procedure call, what we'll call the",
    "start": "24710",
    "end": "29960"
  },
  {
    "text": "\"activation record\".",
    "start": "29961",
    "end": "31130"
  },
  {
    "text": "As we saw in the factorial example, we can't\nstatically allocate a single block of storage",
    "start": "31130",
    "end": "36510"
  },
  {
    "text": "for a particular procedure since recursive\ncalls mean we'll have many active calls to",
    "start": "36510",
    "end": "41420"
  },
  {
    "text": "that procedure at points during the execution.",
    "start": "41420",
    "end": "44890"
  },
  {
    "text": "What we need is a way to dynamically allocate\nstorage for an activation record when the",
    "start": "44890",
    "end": "49489"
  },
  {
    "text": "procedure is called, which can then be reclaimed\nwhen the procedure returns.",
    "start": "49490",
    "end": "55160"
  },
  {
    "text": "Let's see how activation records come and\ngo as execution proceeds.",
    "start": "55160",
    "end": "60100"
  },
  {
    "text": "The first activation record is for the call\nfact(3).",
    "start": "60100",
    "end": "64320"
  },
  {
    "text": "It's created at the beginning of the procedure\nand holds, among other things, the value of",
    "start": "64320",
    "end": "68960"
  },
  {
    "text": "the argument n and the return address where\nexecution should resume after the fact(3)",
    "start": "68960",
    "end": "73999"
  },
  {
    "text": "computation is complete.",
    "start": "73999",
    "end": "77259"
  },
  {
    "text": "During the execution of fact(3), we need to\nmake a recursive call to compute fact(2).",
    "start": "77259",
    "end": "82649"
  },
  {
    "text": "So that procedure call also gets an activation\nrecord with the appropriate values for the",
    "start": "82649",
    "end": "87420"
  },
  {
    "text": "argument and return address.",
    "start": "87420",
    "end": "90298"
  },
  {
    "text": "Note that the original activation record is\nkept since it contains information needed",
    "start": "90299",
    "end": "94810"
  },
  {
    "text": "to complete the computation of fact(3) after\nthe call to fact(2) returns.",
    "start": "94810",
    "end": "99990"
  },
  {
    "text": "So now we have two active procedure calls\nand hence two activation records.",
    "start": "99990",
    "end": "106060"
  },
  {
    "text": "fact(2) requires computing fact(1), which,\nin turn, requires computing fact(0).",
    "start": "106060",
    "end": "113240"
  },
  {
    "text": "At this point there are four active procedure\ncalls and hence four activation records.",
    "start": "113240",
    "end": "119529"
  },
  {
    "text": "The recursion terminates with fact(0), which\nreturns the value 1 to its caller.",
    "start": "119529",
    "end": "124899"
  },
  {
    "text": "At this point we've finished execution of\nfact(0) and so its activation record is no",
    "start": "124899",
    "end": "130030"
  },
  {
    "text": "longer needed and can be discarded.",
    "start": "130030",
    "end": "132819"
  },
  {
    "text": "fact(1) now finishes its computation returning\n1 to its caller.",
    "start": "132819",
    "end": "137760"
  },
  {
    "text": "We no longer need its activation record.",
    "start": "137760",
    "end": "140650"
  },
  {
    "text": "Then fact(2) completes, returning 2 to its\ncaller and its activation record can be discarded.",
    "start": "140650",
    "end": "146709"
  },
  {
    "text": "And so onâ€¦",
    "start": "146709",
    "end": "148590"
  },
  {
    "text": "Note that the activation record of a nested\nprocedure call is always discarded before",
    "start": "148590",
    "end": "153250"
  },
  {
    "text": "the activation record of the caller.",
    "start": "153250",
    "end": "156099"
  },
  {
    "text": "That makes sense: the execution of the caller\ncan't complete until the nested procedure",
    "start": "156099",
    "end": "161140"
  },
  {
    "text": "call returns.",
    "start": "161140",
    "end": "163069"
  },
  {
    "text": "What we need is a storage scheme that efficiently\nsupports the allocation and deallocation of",
    "start": "163069",
    "end": "167959"
  },
  {
    "text": "activation records as shown here.",
    "start": "167959",
    "end": "170900"
  },
  {
    "text": "Early compiler writers recognized that activation\nrecords are allocated and deallocated in last-in",
    "start": "170900",
    "end": "176959"
  },
  {
    "start": "171000",
    "end": "171000"
  },
  {
    "text": "first-out (LIFO) order.",
    "start": "176959",
    "end": "179060"
  },
  {
    "text": "So they invented the \"stack\", a data structure\nthat implements a PUSH operation to add a",
    "start": "179060",
    "end": "183409"
  },
  {
    "text": "record to the top of the stack and a POP operation\nto remove the top element.",
    "start": "183409",
    "end": "188730"
  },
  {
    "text": "New activation records are PUSHed onto the\nstack during procedure calls and the POPed",
    "start": "188730",
    "end": "194050"
  },
  {
    "text": "from the stack when the procedure call returns.",
    "start": "194050",
    "end": "197500"
  },
  {
    "text": "Note that stack operations affect the top\n(i.e., most recent) record on the stack.",
    "start": "197500",
    "end": "203989"
  },
  {
    "text": "C procedures only need to access the top activation\nrecord on the stack.",
    "start": "203989",
    "end": "208290"
  },
  {
    "text": "Other programming languages, e.g. Java, support\naccesses to other active activation records.",
    "start": "208290",
    "end": "213680"
  },
  {
    "text": "The stack supports both modes of operation.",
    "start": "213680",
    "end": "218519"
  },
  {
    "text": "One final technical note: some programming\nlanguages support closures (e.g., Javascript)",
    "start": "218519",
    "end": "224730"
  },
  {
    "text": "or continuations (e.g., Python's yield statement),\nwhere the activation records need to be preserved",
    "start": "224730",
    "end": "232040"
  },
  {
    "text": "even after the procedure returns.",
    "start": "232040",
    "end": "234709"
  },
  {
    "text": "In these cases, the simple LIFO behavior of\nthe stack is no longer sufficient and we'll",
    "start": "234709",
    "end": "240480"
  },
  {
    "text": "need another scheme for allocating and deallocating\nactivation records.",
    "start": "240480",
    "end": "244359"
  },
  {
    "text": "But that's a topic for another course!",
    "start": "244359",
    "end": "247489"
  },
  {
    "text": "Here's how we'll implement the stack on the\nBeta:",
    "start": "247489",
    "end": "250769"
  },
  {
    "start": "248000",
    "end": "248000"
  },
  {
    "text": "We'll dedicate one of the Beta registers,\nR29, to be the \"stack pointer\" that will be",
    "start": "250769",
    "end": "255730"
  },
  {
    "text": "used to manage stack operations.",
    "start": "255730",
    "end": "258979"
  },
  {
    "text": "When we PUSH a word onto the stack, we'll\nincrement the stack pointer.",
    "start": "258980",
    "end": "262720"
  },
  {
    "text": "So the stack grows to successively higher\naddresses as words are PUSHed onto the stack.",
    "start": "262720",
    "end": "269160"
  },
  {
    "text": "We'll adopt the convention that SP points\nto (i.e., its value is the address of) the",
    "start": "269160",
    "end": "274880"
  },
  {
    "text": "first unused stack location, the location\nthat will be filled by next PUSH.",
    "start": "274880",
    "end": "280590"
  },
  {
    "text": "So locations with addresses lower than the\nvalue in SP correspond to words that have",
    "start": "280590",
    "end": "285560"
  },
  {
    "text": "been previously allocated.",
    "start": "285560",
    "end": "288120"
  },
  {
    "text": "Words can be PUSHed to or POPed from the stack\nat any point in execution, but we'll impose",
    "start": "288120",
    "end": "293650"
  },
  {
    "text": "the rule that code sequences that PUSH words\nonto the stack must POP those words at the",
    "start": "293650",
    "end": "298910"
  },
  {
    "text": "end of execution.",
    "start": "298910",
    "end": "300980"
  },
  {
    "text": "So when a code sequence finishes execution,\nSP will have the same value as it had before",
    "start": "300980",
    "end": "306750"
  },
  {
    "text": "the sequence started.",
    "start": "306750",
    "end": "309070"
  },
  {
    "text": "This is called the \"stack discipline\" and\nensures that intervening uses of the stack",
    "start": "309070",
    "end": "313860"
  },
  {
    "text": "don't affect later stack references.",
    "start": "313860",
    "end": "316939"
  },
  {
    "text": "We'll allocate a large region of memory to\nhold the stack located so that the stack can",
    "start": "316940",
    "end": "322260"
  },
  {
    "text": "grow without overwriting other program storage.",
    "start": "322260",
    "end": "326300"
  },
  {
    "text": "Most systems require that you specify a maximum\nstack size when running a program and will",
    "start": "326300",
    "end": "331190"
  },
  {
    "text": "signal an execution error if the program attempts\nto PUSH too many items onto the stack.",
    "start": "331190",
    "end": "338820"
  },
  {
    "text": "For our Beta stack implementation, we'll use\nexisting instructions to implement stack operations,",
    "start": "338820",
    "end": "344440"
  },
  {
    "text": "so for us the stack is strictly a set of software\nconventions.",
    "start": "344440",
    "end": "349080"
  },
  {
    "text": "Other ISAs provide instructions specifically\nfor stack operations.",
    "start": "349080",
    "end": "355330"
  },
  {
    "text": "There are many other sensible stack conventions,\nso you'll need to read up on the conventions",
    "start": "355330",
    "end": "359620"
  },
  {
    "text": "adopted by the particular ISA or programming\nlanguage you'll be using.",
    "start": "359620",
    "end": "364850"
  },
  {
    "text": "We've added some convenience macros to UASM\nto support stacks.",
    "start": "364850",
    "end": "369780"
  },
  {
    "start": "365000",
    "end": "365000"
  },
  {
    "text": "The PUSH macro expands into two instructions.",
    "start": "369780",
    "end": "373330"
  },
  {
    "text": "The ADDC increments the stack pointer, allocating\na new word at the top of stack, and then initializes",
    "start": "373330",
    "end": "379340"
  },
  {
    "text": "the new top-of-stack from a specified register\nvalue with a ST instruction.",
    "start": "379340",
    "end": "384860"
  },
  {
    "text": "The POP macro LDs the value at the top of\nthe stack into the specified register, then",
    "start": "384860",
    "end": "389680"
  },
  {
    "text": "uses a SUBC instruction to decrement the stack\npointer, deallocating that word from the stack.",
    "start": "389680",
    "end": "396780"
  },
  {
    "text": "Note that the order of the instructions in\nthe PUSH and POP macro is very important.",
    "start": "396780",
    "end": "401240"
  },
  {
    "text": "As we'll see in the next lecture, interrupts\ncan cause the Beta hardware to stop executing",
    "start": "401240",
    "end": "406520"
  },
  {
    "text": "the current program between any two instructions,\nso we have to be careful about the order of",
    "start": "406520",
    "end": "412400"
  },
  {
    "text": "operations.",
    "start": "412400",
    "end": "413560"
  },
  {
    "text": "So for PUSH, we first allocate the word on\nthe stack, then initialize it.",
    "start": "413560",
    "end": "418930"
  },
  {
    "text": "If we did it the other way around and execution\nwas interrupted between the initialization",
    "start": "418930",
    "end": "423930"
  },
  {
    "text": "and allocation, code run during the interrupt\nwhich uses the stack might unintentionally",
    "start": "423930",
    "end": "429310"
  },
  {
    "text": "overwrite the initialized value.",
    "start": "429310",
    "end": "431840"
  },
  {
    "text": "But, assuming all code follows stack discipline,\nallocation followed by initialization is always",
    "start": "431840",
    "end": "438430"
  },
  {
    "text": "safe.",
    "start": "438430",
    "end": "439460"
  },
  {
    "text": "The same reasoning applies to the order of\nthe POP instructions.",
    "start": "439460",
    "end": "443520"
  },
  {
    "text": "We first access the top-of-stack one last\ntime to retrieve its value, then we deallocate",
    "start": "443520",
    "end": "449690"
  },
  {
    "text": "that location.",
    "start": "449690",
    "end": "452410"
  },
  {
    "text": "We can use the ALLOCATE macro to reserve a\nnumber of stack locations for later use.",
    "start": "452410",
    "end": "457010"
  },
  {
    "text": "Sort of like PUSH but without the initialization.",
    "start": "457010",
    "end": "462190"
  },
  {
    "text": "DEALLOCATE performs the opposite operation,\nremoving N words from the stack.",
    "start": "462190",
    "end": "466210"
  },
  {
    "text": "In general, if we see a PUSH or ALLOCATE in\nan assembly language program, we should be",
    "start": "466210",
    "end": "471470"
  },
  {
    "text": "able to find the corresponding POP or DEALLOCATE,\nwhich would indicate that stack discipline",
    "start": "471470",
    "end": "476850"
  },
  {
    "text": "is maintained.",
    "start": "476850",
    "end": "478160"
  },
  {
    "text": "We'll use stacks to save values we'll need\nlater.",
    "start": "478160",
    "end": "482350"
  },
  {
    "start": "479000",
    "end": "479000"
  },
  {
    "text": "For example, if we need to use some registers\nfor a computation but don't know if the register's",
    "start": "482350",
    "end": "487260"
  },
  {
    "text": "current values are needed later in the program,\nwe can PUSH their current values onto the",
    "start": "487260",
    "end": "492120"
  },
  {
    "text": "stack and then are free to use the registers\nin our code.",
    "start": "492120",
    "end": "496500"
  },
  {
    "text": "After we're done, we can use POP to restore\nthe saved values.",
    "start": "496500",
    "end": "501460"
  },
  {
    "text": "Note that we POP data off the stack in the\nopposite order that the data was PUSHed, i.e.,",
    "start": "501460",
    "end": "507530"
  },
  {
    "text": "we need to follow the last-in first-out discipline\nimposed by the stack operations.",
    "start": "507530",
    "end": "513250"
  },
  {
    "text": "Now that we have the stack data structure,\nwe'll use it to solve our problems with allocating",
    "start": "513250",
    "end": "517390"
  },
  {
    "text": "and deallocating activation records during\nprocedure calls.",
    "start": "517390",
    "end": "520459"
  }
]