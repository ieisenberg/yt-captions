[
  {
    "text": "Okay, we've figured out a way to design hardware\nto perform a particular computation:",
    "start": "750",
    "end": "6250"
  },
  {
    "text": "Draw the state transition diagram for an FSM\nthat describes the sequence of operations",
    "start": "6250",
    "end": "10860"
  },
  {
    "text": "needed to complete the computation.",
    "start": "10860",
    "end": "13410"
  },
  {
    "text": "Then construct the appropriate datapath, using\nregisters to store values and combinational",
    "start": "13410",
    "end": "18760"
  },
  {
    "text": "logic to implement the needed operations.",
    "start": "18760",
    "end": "21960"
  },
  {
    "text": "Finally build an FSM to generate the control\nsignals required by the datapath.",
    "start": "21960",
    "end": "27630"
  },
  {
    "text": "Is the datapath plus control logic itself\nan FSM?",
    "start": "27630",
    "end": "30900"
  },
  {
    "text": "Well, it has registers and some combinational\nlogic, so, yes, it is an FSM.",
    "start": "30900",
    "end": "36829"
  },
  {
    "text": "Can we draw the truth table?",
    "start": "36829",
    "end": "39050"
  },
  {
    "text": "In theory, yes.",
    "start": "39050",
    "end": "40120"
  },
  {
    "text": "In practice, there are 66 bits of registers\nand hence 66 bits of state, so our truth table",
    "start": "40120",
    "end": "46680"
  },
  {
    "text": "would need 2^66 rows!",
    "start": "46680",
    "end": "49460"
  },
  {
    "text": "Hmm, not very likely that we'd be able to\ndraw the truth table!",
    "start": "49460",
    "end": "53870"
  },
  {
    "text": "The difficulty comes from thinking of the\nregisters in the datapath as part of the state",
    "start": "53870",
    "end": "57698"
  },
  {
    "text": "of our super-FSM.",
    "start": "57699",
    "end": "59609"
  },
  {
    "text": "That's why we think about the datapath as\nbeing separate from the control FSM.",
    "start": "59609",
    "end": "64768"
  },
  {
    "text": "So how do we generalize this approach so we\ncan use one computer circuit to solve many",
    "start": "64769",
    "end": "69880"
  },
  {
    "text": "different problems.",
    "start": "69880",
    "end": "71469"
  },
  {
    "text": "Well, most problems would probably require\nmore storage for operands and results.",
    "start": "71470",
    "end": "77930"
  },
  {
    "text": "And a larger list of allowable operations\nwould be handy.",
    "start": "77930",
    "end": "81810"
  },
  {
    "text": "This is actually a bit tricky: what's the\nminimum set of operations we can get away",
    "start": "81810",
    "end": "86070"
  },
  {
    "text": "with?",
    "start": "86070",
    "end": "87070"
  },
  {
    "text": "As we'll see later, surprisingly simple hardware\nis sufficient to perform any realizable computation.",
    "start": "87070",
    "end": "92579"
  },
  {
    "text": "At the other extreme, many complex operations\n(e.g., fast fourier transform) are best implemented",
    "start": "92579",
    "end": "99370"
  },
  {
    "text": "as sequences of simpler operations (e.g.,\nadd and multiply) rather than as a single",
    "start": "99370",
    "end": "104840"
  },
  {
    "text": "massive combinational circuit.",
    "start": "104840",
    "end": "107520"
  },
  {
    "text": "These sorts of design tradeoffs are what makes\ncomputer architecture fun!",
    "start": "107520",
    "end": "112409"
  },
  {
    "text": "We'd then combine our larger storage with\nlogic for our chosen set of operations into",
    "start": "112409",
    "end": "116578"
  },
  {
    "text": "a general purpose datapath that could be reused\nto solve many different problems.",
    "start": "116579",
    "end": "122610"
  },
  {
    "text": "Let's see how that would workâ€¦",
    "start": "122610",
    "end": "125159"
  },
  {
    "text": "Here's a datapath with 4 data registers to\nhold results.",
    "start": "125159",
    "end": "128869"
  },
  {
    "text": "The ASEL and BSEL multiplexers allow any of\nthe data registers to be selected as either",
    "start": "128869",
    "end": "135170"
  },
  {
    "text": "operand for our repertoire of arithmetic and\nboolean operations.",
    "start": "135170",
    "end": "139920"
  },
  {
    "text": "The result is selected by the OPSEL MUX and\ncan be written back into any of the data registers",
    "start": "139920",
    "end": "144260"
  },
  {
    "text": "by setting the WEN control signal to 1 and\nusing the 2-bit WSEL signal to select which",
    "start": "144260",
    "end": "149760"
  },
  {
    "text": "data register will be loaded at the next rising\nclock edge.",
    "start": "149760",
    "end": "154040"
  },
  {
    "text": "Note that the data registers have a load-enable\ncontrol input.",
    "start": "154040",
    "end": "157810"
  },
  {
    "text": "When this signal is 1, the register will load\na new value from its D input, otherwise it",
    "start": "157810",
    "end": "162610"
  },
  {
    "text": "ignores the D input and simply reloads its\nprevious value.",
    "start": "162610",
    "end": "166280"
  },
  {
    "text": "And, of course, we'll add a control FSM to\ngenerate the appropriate sequence of control",
    "start": "166280",
    "end": "172170"
  },
  {
    "text": "signals for the datapath.",
    "start": "172170",
    "end": "174120"
  },
  {
    "text": "The Z input from the datapath allows the system\nto perform data-dependent operations, where",
    "start": "174120",
    "end": "179030"
  },
  {
    "text": "the sequence of operations can be influenced\nby the actual values in the data registers.",
    "start": "179030",
    "end": "185489"
  },
  {
    "text": "Here's the state transition diagram for the\ncontrol FSM we'd use if we wanted to use this",
    "start": "185489",
    "end": "190019"
  },
  {
    "text": "datapath to compute factorial assuming the\ninitial contents of the data registers are",
    "start": "190019",
    "end": "195379"
  },
  {
    "text": "as shown.",
    "start": "195379",
    "end": "196730"
  },
  {
    "text": "We need a few more states than in our initial\nimplementation since this datapath can only",
    "start": "196730",
    "end": "201019"
  },
  {
    "text": "perform one operation at each step.",
    "start": "201019",
    "end": "203550"
  },
  {
    "text": "So we need three steps for each iteration:\none for the multiply, one for the decrement,",
    "start": "203550",
    "end": "209730"
  },
  {
    "text": "and one for the test to see if we're done.",
    "start": "209730",
    "end": "212650"
  },
  {
    "text": "As seen here, it's often the case that general-purpose\ncomputer hardware will need more cycles and",
    "start": "212650",
    "end": "217099"
  },
  {
    "text": "perhaps involve more hardware than an optimized\nsingle-purpose circuit.",
    "start": "217099",
    "end": "223220"
  },
  {
    "text": "You can solve many different problems with\nthis system:",
    "start": "223220",
    "end": "226110"
  },
  {
    "text": "exponentiation, division, square root, and\nso on, so long as you don't need more than",
    "start": "226110",
    "end": "230629"
  },
  {
    "text": "four data registers to hold input data, intermediate\nresults, or the final answer.",
    "start": "230629",
    "end": "236030"
  },
  {
    "text": "By designing a control FSM, we are in effect\n\"programming\" our digital system, specifying",
    "start": "236030",
    "end": "241030"
  },
  {
    "text": "the sequence of operations it will perform.",
    "start": "241030",
    "end": "244340"
  },
  {
    "text": "This is exactly how the early digital computers\nworked!",
    "start": "244340",
    "end": "247870"
  },
  {
    "text": "Here's a picture of the ENIAC computer built\nin 1943 at the University of Pennsylvania.",
    "start": "247870",
    "end": "254349"
  },
  {
    "text": "The Wikipedia article on the ENIAC tells us\nthat \"ENIAC could be programmed to perform",
    "start": "254350",
    "end": "259190"
  },
  {
    "text": "complex sequences of operations, including\nloops, branches, and subroutines.",
    "start": "259190",
    "end": "264210"
  },
  {
    "text": "The task of taking a problem and mapping it\nonto the machine was complex, and usually",
    "start": "264210",
    "end": "268539"
  },
  {
    "text": "took weeks.",
    "start": "268540",
    "end": "270050"
  },
  {
    "text": "After the program was figured out on paper,\nthe process of getting the program into ENIAC",
    "start": "270050",
    "end": "274879"
  },
  {
    "text": "by manipulating its switches and cables could\ntake days.",
    "start": "274880",
    "end": "277919"
  },
  {
    "text": "This was followed by a period of verification\nand debugging, aided by the ability to execute",
    "start": "277919",
    "end": "283889"
  },
  {
    "text": "the program step by step.\"",
    "start": "283889",
    "end": "285419"
  },
  {
    "text": "It's clear that we need a less cumbersome\nway to program our computer!",
    "start": "285419",
    "end": "289910"
  }
]