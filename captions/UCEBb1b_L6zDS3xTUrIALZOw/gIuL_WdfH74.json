[
  {
    "start": "0",
    "end": "20000"
  },
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6350"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6350",
    "end": "13340"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13340",
    "end": "21420"
  },
  {
    "start": "20000",
    "end": "230000"
  },
  {
    "text": "PROFESSOR: All right, everyone. Welcome back. Today we're going to\ntalk about the profiling",
    "start": "21420",
    "end": "27240"
  },
  {
    "text": "tools available on Cell\nto help you evaluate how your programs are running. In the next hour\nI'll talk about SIMD,",
    "start": "27240",
    "end": "33260"
  },
  {
    "text": "which is how you can take\nadvantage of the hardware support for data\nparallelization. ",
    "start": "33260",
    "end": "39520"
  },
  {
    "text": "First up, I'd like to follow\nup with some questions that we had last time\nabout gdb, and then I'll",
    "start": "39520",
    "end": "46860"
  },
  {
    "text": "discuss some of the various\nmethods for profiling on Cell. I'll talk about\nthe Cell simulator",
    "start": "46860",
    "end": "52120"
  },
  {
    "text": "and using the decrementers,\nand then we're going to talk about static\nprofiling and instruction",
    "start": "52120",
    "end": "57810"
  },
  {
    "text": "reordering, which I started\nto get into last time.  So first up, we ran\ninto some problems",
    "start": "57810",
    "end": "65120"
  },
  {
    "text": "last time with gdb,\nvarious error messages. First thing,\nsometimes gbd is going",
    "start": "65120",
    "end": "70470"
  },
  {
    "text": "to examine the wrong\nvariable, as we saw when the names are ambiguous. One thing you can\ndo to get around",
    "start": "70470",
    "end": "75780"
  },
  {
    "text": "this-- we had problems\nwith ambiguity between variables, which have\nthe same name where one of them",
    "start": "75780",
    "end": "82100"
  },
  {
    "text": "was in the spu thread and one\nof them was in the ppu thread. And so to work around\nthis, one thing you can do",
    "start": "82100",
    "end": "88530"
  },
  {
    "text": "is use spu-gdb, which will\njust log on to a particular spu thread, then you can just\nlook for variable names",
    "start": "88530",
    "end": "96780"
  },
  {
    "text": "in that thread. You can also, of course,\nrename your variables. Second problem is\nthat sometimes gdb",
    "start": "96780",
    "end": "104490"
  },
  {
    "text": "will delete your\nbreakpoints before you want it to delete them. Reason being, it will\nremove breakpoints",
    "start": "104490",
    "end": "111690"
  },
  {
    "text": "whenever the program\nassociated with a breakpoint has been unloaded. But sometimes you have\nmore than one thread",
    "start": "111690",
    "end": "117530"
  },
  {
    "text": "running the same program,\nand so the second one you",
    "start": "117530",
    "end": "123729"
  },
  {
    "text": "won't be able to break into. So again, you can use spu-gdb\nto log on to a particular thread",
    "start": "123730",
    "end": "130860"
  },
  {
    "text": "if you want to do that. Another thing you can do is\nfor example put a delay loop",
    "start": "130860",
    "end": "137740"
  },
  {
    "text": "at the end of your\nspu thread in order to keep that thread running\nfor as long as possible. It seems that as long as gdb\ndoesn't unload that thread,",
    "start": "137740",
    "end": "144540"
  },
  {
    "text": "then it won't delete\nyour breakpoint. And finally, I saw this kind\nof cryptic error thread event",
    "start": "144540",
    "end": "151770"
  },
  {
    "text": "breakpoint gdb should not stop. Indeed it shouldn't. One thing, to get\naround this, it",
    "start": "151770",
    "end": "158780"
  },
  {
    "text": "seems that this problem\ndoesn't happen on spu-gdb. So I'll just recap how to use\nspu-gdb to debug your programs.",
    "start": "158780",
    "end": "167690"
  },
  {
    "text": "Last time we were\nusing mostly ppu-gdb, which will help you debug\nkind of both your PPU program",
    "start": "167690",
    "end": "174079"
  },
  {
    "text": "and your SPU program together. And you're able to switch\nbetween all the threads that are available.",
    "start": "174080",
    "end": "179190"
  },
  {
    "text": "On the other hand, when\nyou're using spu-gdb, it's just going to log on\nto a particular SPU thread.",
    "start": "179190",
    "end": "184900"
  },
  {
    "text": "So what you do is you invoke\nyour original people PPU program with SPU\ndebug star equals 1.",
    "start": "184900",
    "end": "191980"
  },
  {
    "text": "And then you can background it. Now what happens is every\ntime that your-- every time",
    "start": "191980",
    "end": "199760"
  },
  {
    "text": "that your SPU-- sorry, every\ntime that your program spawns a new SPU thread, it\nwill print the process ID",
    "start": "199760",
    "end": "205427"
  },
  {
    "text": "and then actually that\nthread, the spawned thread, will stop and wait for a\ndebugger to attach to it.",
    "start": "205427",
    "end": "210510"
  },
  {
    "text": "So at this point, you can run\nspu-gdb -p and then the process number that they give you.",
    "start": "210510",
    "end": "216390"
  },
  {
    "text": "And when you attach to it,\nyou can continue that thread to resume debugging. Any questions?",
    "start": "216390",
    "end": "221584"
  },
  {
    "start": "221585",
    "end": "229200"
  },
  {
    "text": "OK, so the Cell simulator\nis one of the tools",
    "start": "229200",
    "end": "235910"
  },
  {
    "start": "230000",
    "end": "425000"
  },
  {
    "text": "that we have available\nto help you debug. This is how you invoke it\nif you have it installed,",
    "start": "235910",
    "end": "242970"
  },
  {
    "text": "opt/ibm/systemsim\ncell/bin/systemsim, and you want to use -g to\nuse the graphical interface.",
    "start": "242970",
    "end": "249050"
  },
  {
    "text": "And a little window will\npop up and you'll click Go. The window looks like this. It actually, from\nhere, you can have",
    "start": "249050",
    "end": "255080"
  },
  {
    "text": "a lot of fine-grained\ncontrol over how your program is running. In fact you can advance the\nstate of the simulation cycle",
    "start": "255080",
    "end": "262419"
  },
  {
    "text": "by cycle to look at what's going\non inside the simulated Cell system. ",
    "start": "262420",
    "end": "270180"
  },
  {
    "text": "And when you boot\nup this simulator, you can actually get a complete\nLinux environment in there with an x term.",
    "start": "270180",
    "end": "276660"
  },
  {
    "text": "And what you can do in\nthis Linux environment is you can copy over programs\nand then you can--",
    "start": "276660",
    "end": "282201"
  },
  {
    "text": "you can copy over programs which\nwere compiled for the Cell, and then you can run them. ",
    "start": "282201",
    "end": "289090"
  },
  {
    "text": "In order to transfer a program\nto your simulated system so that you can run it,\nyou can use this function--",
    "start": "289090",
    "end": "296750"
  },
  {
    "text": "or you can use this\nprogram call through which is available on the\nsimulated system. And what it will\ndo is it will grab",
    "start": "296750",
    "end": "302830"
  },
  {
    "text": "onto a file which is on the\nhost system and copy it in. And it will just\nput it on standard",
    "start": "302830",
    "end": "310100"
  },
  {
    "text": "out so you can redirect it\nto whatever file you want. And then when you\nmake it executable, then you can run it.",
    "start": "310100",
    "end": "316205"
  },
  {
    "text": "All right, questions? ",
    "start": "316205",
    "end": "321939"
  },
  {
    "text": "While you're in\nthe simulator, you can view a lot of\ndifferent things.",
    "start": "321940",
    "end": "327160"
  },
  {
    "text": "You can get a lot of information\nabout the state of the machine. In particular, you can\nlook at the registers",
    "start": "327160",
    "end": "332860"
  },
  {
    "text": "at any particular time, again\nwith clock step by clock step. This might not be as interesting\nnow that you have the debugger.",
    "start": "332860",
    "end": "340460"
  },
  {
    "text": "And you can run the\ndebugger on real hardware. But one thing which\nthe Cell simulator does get you is these\ndynamic profiling tools.",
    "start": "340460",
    "end": "348819"
  },
  {
    "text": "And what it will\ndo is it will look at the state of the simulation\nand it will figure out",
    "start": "348820",
    "end": "354509"
  },
  {
    "text": "where things are stalling,\nwhere the time is being spent by the processor. And you can get separate\nstats like these.",
    "start": "354510",
    "end": "361910"
  },
  {
    "text": "Let's see, it tells you, for\nexample, total cycle count stalls for various reasons.",
    "start": "361910",
    "end": "367820"
  },
  {
    "text": "You get all these\nstatistics separately for the PPU and each SPU.",
    "start": "367820",
    "end": "373430"
  },
  {
    "text": "So this can be very helpful\nif you're trying to do, for example, you're\ntrying to figure out",
    "start": "373430",
    "end": "378530"
  },
  {
    "text": "exactly what's\ngoing on each SPU, do load balancing, whatever. ",
    "start": "378530",
    "end": "386940"
  },
  {
    "text": "And so these\nstatistics will hold-- these statistics will cover\nwhatever length of the program",
    "start": "386940",
    "end": "392730"
  },
  {
    "text": "you run. But you can also get more\nfine-grain statistics using these profiling functions. So if you include profile\ndot H in your program,",
    "start": "392730",
    "end": "400410"
  },
  {
    "text": "then you get access\nto these functions, profile clear, start, and stop. And what these will\ndo is they actually--",
    "start": "400410",
    "end": "408140"
  },
  {
    "text": "when they get compiled\ninto your program, there are no ops when you run\nthem on a real Cell processor.",
    "start": "408140",
    "end": "413170"
  },
  {
    "text": "But the simulator will be\nable to latch onto them and you can use those to start\nand stop regions of interest",
    "start": "413170",
    "end": "419740"
  },
  {
    "text": "for profiling. ",
    "start": "419740",
    "end": "425660"
  },
  {
    "start": "425000",
    "end": "510000"
  },
  {
    "text": "Now the simulator\ncomes with the SDK, and it's a little bit\ncumbersome to install. So we haven't made it available\nyet on the actual PS3 hardware.",
    "start": "425660",
    "end": "434150"
  },
  {
    "text": "You can run it on x86, and so\nif your group would like to get set up with that on\none of your computers,",
    "start": "434150",
    "end": "440680"
  },
  {
    "text": "or we'll try and make it\navailable on our hardware if there's enough interest. So please let us know. ",
    "start": "440680",
    "end": "451370"
  },
  {
    "text": "OK, the next thing we'll\ncover is using decrementers",
    "start": "451370",
    "end": "459250"
  },
  {
    "text": "to profile your program. This is one way you can use\ndynamic profiling, which",
    "start": "459250",
    "end": "465176"
  },
  {
    "text": "actually doesn't\nrequire the simulator. So when you get information\nfrom the decrementers, you can run these programs\non your actual Cell hardware.",
    "start": "465176",
    "end": "474000"
  },
  {
    "text": "Basically the\ndecrementer is just a counter that counts\ndown at a constant rate. So you can use it as\na clock to figure out",
    "start": "474000",
    "end": "481490"
  },
  {
    "text": "how long different\nevents are lasting. And the rate at which the\ndecrementer counts down",
    "start": "481490",
    "end": "491229"
  },
  {
    "text": "is not that fast. So you're not going to be\nable to use it to time things",
    "start": "491230",
    "end": "496830"
  },
  {
    "text": "on the order of a\nfew clock cycles. ",
    "start": "496830",
    "end": "502060"
  },
  {
    "text": "It's best for\ntiming things which are maybe on the\norder of thousands",
    "start": "502060",
    "end": "507200"
  },
  {
    "text": "of instructions in length. And how you use it is there\nare these SPU write channel",
    "start": "507200",
    "end": "516919"
  },
  {
    "start": "510000",
    "end": "580000"
  },
  {
    "text": "and SPU read channel\nfunctions which give you access to some of\nthe internals of the Cell",
    "start": "516919",
    "end": "522469"
  },
  {
    "text": "processor.  And so here's an example\nsetup you can use.",
    "start": "522470",
    "end": "530030"
  },
  {
    "text": "Basically, first you\ncall write channel, and you pass in this\nMFC_DECREMENTER_EVENT thing.",
    "start": "530030",
    "end": "537640"
  },
  {
    "text": "And what that will do is\ninitialize this decrementer counter for you. ",
    "start": "537640",
    "end": "545030"
  },
  {
    "text": "And then you read the value\nbefore and after the function you want to profile,\nand when you subtract,",
    "start": "545030",
    "end": "552370"
  },
  {
    "text": "that just gives you the length\nor the time that was elapsed in some arbitrary units.",
    "start": "552370",
    "end": "558974"
  },
  {
    "text": "And of course,\nit's counting down, so you want to subtract\nthe start from the end.",
    "start": "558974",
    "end": "564190"
  },
  {
    "text": "And after you're\ndone using it, you can do another write\nchannel to stop",
    "start": "564190",
    "end": "570079"
  },
  {
    "text": "the counter from continuing. All right, any questions? ",
    "start": "570080",
    "end": "581190"
  },
  {
    "start": "580000",
    "end": "642000"
  },
  {
    "text": "OK, let's continue talking about\ninstruction reordering, which",
    "start": "581190",
    "end": "586420"
  },
  {
    "text": "I started last time. So I'm going to kind of start\nfrom the beginning this time, and maybe it'll\nbe more coherent.",
    "start": "586420",
    "end": "594009"
  },
  {
    "text": "So on the Cell\narchitecture, when you're looking at what\ninstructions are being run,",
    "start": "594010",
    "end": "599600"
  },
  {
    "text": "the instructions are mostly\ngoing to be of the form evaluate some function\nof some of the registers",
    "start": "599600",
    "end": "605420"
  },
  {
    "text": "and write the result\nto some other register. And the assembly\nfile are what you",
    "start": "605420",
    "end": "610500"
  },
  {
    "text": "get when you run\nwith GCC-S is just going to be a human-readable\nrepresentation",
    "start": "610500",
    "end": "615960"
  },
  {
    "text": "of these instructions. And I'll show you how to\nread that actually later.",
    "start": "615960",
    "end": "621915"
  },
  {
    "text": "And you can think of\nthese instructions just as executing in series\njust in the order in which they",
    "start": "621915",
    "end": "627199"
  },
  {
    "text": "appear in the assembly. So if you think of one\ninstruction starting and then finishing, the next\ninstruction comes in,",
    "start": "627200",
    "end": "634339"
  },
  {
    "text": "finishes, that should be\nconsistent with the actual",
    "start": "634340",
    "end": "640150"
  },
  {
    "text": "behavior of the hardware. Now for real hardware,\nwaiting for one instruction",
    "start": "640150",
    "end": "646630"
  },
  {
    "start": "642000",
    "end": "735000"
  },
  {
    "text": "to finish before the next one\nstarts is going to be too slow. So there are these various\noptimizations we pull",
    "start": "646630",
    "end": "652060"
  },
  {
    "text": "or that they do on\nthe hardware in order to run instructions sooner than\nwhen the previous instruction",
    "start": "652060",
    "end": "658540"
  },
  {
    "text": "finishes. So the big one of\nthese is pipelining, where you have multiple\nstages inside your processor,",
    "start": "658540",
    "end": "664960"
  },
  {
    "text": "and you can run\neach instruction-- you can push each instruction\nin before the previous one has",
    "start": "664960",
    "end": "670070"
  },
  {
    "text": "completed. And in pipelining,\nyou're going to be",
    "start": "670070",
    "end": "675530"
  },
  {
    "text": "subject to these dependencies\nbetween instructions. For example, if one\ninstruction reads from a value",
    "start": "675530",
    "end": "681880"
  },
  {
    "text": "that the previous\ninstruction wrote, then clearly you can't start\nthe second instruction until after the first\ninstruction has completed.",
    "start": "681880",
    "end": "688960"
  },
  {
    "text": " The Cell processor also has--\nactually has multiple pipelines",
    "start": "688960",
    "end": "695450"
  },
  {
    "text": "in which you can\ninsert instructions and another\noptimization that they do is branch prediction\nin order to reduce stalls",
    "start": "695450",
    "end": "704620"
  },
  {
    "text": "from branching.  AUDIENCE: [INAUDIBLE].",
    "start": "704620",
    "end": "710600"
  },
  {
    "text": "PROFESSOR: Pardon? AUDIENCE: Can you talk about\nstatic branch prediction? PROFESSOR: Yes, so static\nbranch prediction means--",
    "start": "710600",
    "end": "716604"
  },
  {
    "text": "or, rather the way\nit's done on the Cell is that what's\npredicted for the branch",
    "start": "716604",
    "end": "722050"
  },
  {
    "text": "is not going to be affected by\nthe history of which branches",
    "start": "722050",
    "end": "727810"
  },
  {
    "text": "have been taken. And some other\nprocessors actually do use this information. ",
    "start": "727810",
    "end": "736910"
  },
  {
    "start": "735000",
    "end": "850000"
  },
  {
    "text": "All right, now the\nthing about pipelining",
    "start": "736910",
    "end": "742019"
  },
  {
    "text": "is that because we\nstill have to honor these dependencies\nbetween instructions, the order in which we\nevaluate instructions,",
    "start": "742020",
    "end": "748139"
  },
  {
    "text": "that's going to make a\ndifference on how long the program runs. So let's take the\nsimple example where",
    "start": "748140",
    "end": "754640"
  },
  {
    "text": "we have three\ninstructions, a, b, and c, and we have this\npipeline processor where",
    "start": "754640",
    "end": "759850"
  },
  {
    "text": "we can insert instructions\nat these clock ticks. So suppose that c\ndepends on b, and there",
    "start": "759850",
    "end": "766710"
  },
  {
    "text": "are no other dependencies\nin the system. Then this sequence\nof instructions",
    "start": "766710",
    "end": "772150"
  },
  {
    "text": "is going to take five\ncycles, because we can push b in after\nthe first cycle,",
    "start": "772150",
    "end": "777250"
  },
  {
    "text": "but we can't push c in\nuntil two cycles after that. Is that clear? Questions?",
    "start": "777250",
    "end": "782500"
  },
  {
    "text": " All right, now because\nc depends on b,",
    "start": "782500",
    "end": "788139"
  },
  {
    "text": "it kind of makes sense to\npush b as far up as we can in order to ease this dependency.",
    "start": "788140",
    "end": "794310"
  },
  {
    "text": "So if we execute b before\na instead of after a-- and remember we can\nreorder b and a however",
    "start": "794310",
    "end": "800010"
  },
  {
    "text": "we want because there's no\ndependencies between them-- then we can start b at the first\ntick, then we put in a right",
    "start": "800010",
    "end": "807290"
  },
  {
    "text": "after that, and then c. And now the sequence only\ntakes four clock cycles.",
    "start": "807290",
    "end": "813209"
  },
  {
    "text": "All right? So observe that, when we put\nin c in this third clock cycle,",
    "start": "813210",
    "end": "818721"
  },
  {
    "text": "we actually couldn't have\nput in the third instruction any sooner, no matter what\nthe dependencies were.",
    "start": "818721",
    "end": "825217"
  },
  {
    "text": "And so in general,\nwe're going to want that to be the case where\nwe want instructions",
    "start": "825217",
    "end": "830800"
  },
  {
    "text": "to be waiting on the pipeline\nrather than on dependencies.",
    "start": "830800",
    "end": "836690"
  },
  {
    "text": "So that means in\nthe first picture there's this stall\nof one clock cycle,",
    "start": "836690",
    "end": "841941"
  },
  {
    "text": "and we're going to\nwant to eliminate these kinds of stalls. All right? ",
    "start": "841941",
    "end": "850804"
  },
  {
    "text": "So what we're going\nto do is we're going to use these static\nprofiling tools to figure out where stalls happen.",
    "start": "850804",
    "end": "857250"
  },
  {
    "text": "Now the first thing we're going\nto do-- the first thing that we have to do is generate the\nassembly and the instruction",
    "start": "857250",
    "end": "862700"
  },
  {
    "text": "schedule that goes with it. And so you can use GCC -S, and\nthe same flag works with xlc",
    "start": "862700",
    "end": "869389"
  },
  {
    "text": "to generate the assembly. And then we have this\nutility called spu_timing,",
    "start": "869390",
    "end": "875959"
  },
  {
    "text": "which runs on the Cell,\nand which will tell you the instruction schedule. Basically it'll take\nin your assembly file",
    "start": "875960",
    "end": "882490"
  },
  {
    "text": "and tell you exactly when each\ninstruction in that assembly gets scheduled. ",
    "start": "882490",
    "end": "888720"
  },
  {
    "text": "If you call it with\n-running-count, then it'll tell you the\nrunning count of clock cycles",
    "start": "888720",
    "end": "894375"
  },
  {
    "text": "at each stage,\nwhich means if you look at the last number,\nthat will tell you how long your program took\nto run in clock cycles.",
    "start": "894375",
    "end": "900450"
  },
  {
    "text": "And we'll write the\noutput to a file with the same name as the input\nbut with dot timing at the end.",
    "start": "900450",
    "end": "908560"
  },
  {
    "text": "Now if you're\nusing our Makefile, you can actually do all\nthis, generate the assembly and the timing info, all in\none step by doing SPU_TIMING=1",
    "start": "908560",
    "end": "918430"
  },
  {
    "text": "and then make the name of\nthe .s file, all right? ",
    "start": "918430",
    "end": "927779"
  },
  {
    "start": "925000",
    "end": "1000000"
  },
  {
    "text": "Now if you'll\nrecall on Cell we're going to have only\nin-order execution. The instructions are just\ngoing to execute in the order",
    "start": "927780",
    "end": "934570"
  },
  {
    "text": "that they're specified\nin the assembly. And because the Cell\nhas dual pipelines,",
    "start": "934570",
    "end": "942847"
  },
  {
    "text": "that means there's two pipelines\nin which instructions can go, and the pipelines are\ngoing to be selected just",
    "start": "942847",
    "end": "948410"
  },
  {
    "text": "based on the instruction type. And of course, two\ninstructions are only going to go in simultaneously\nwhen the dependencies allow it.",
    "start": "948410",
    "end": "957492"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE].  PROFESSOR: Right. ",
    "start": "957492",
    "end": "964530"
  },
  {
    "text": "So if you're looking\nat the assembly, you're going to see lots\nof lines of this form OP",
    "start": "964530",
    "end": "970550"
  },
  {
    "text": "DESTINATION and then\nthe source registers. So when you're trying to\nfigure out dependencies,",
    "start": "970550",
    "end": "976599"
  },
  {
    "text": "it's going to be helpful\nto be able to look at each line of the\nassembly and figure out what registers that\nline is reading from,",
    "start": "976599",
    "end": "982899"
  },
  {
    "text": "and what registers that\nline is spreading to. And there's also information\nin the assembly file",
    "start": "982900",
    "end": "989279"
  },
  {
    "text": "I went into that last\ntime, which tells you kind of for each\nchunk of assembly what the corresponding\nsource file line is.",
    "start": "989280",
    "end": "997830"
  },
  {
    "text": " All right, and the actual\noutput of the static profiler,",
    "start": "997830",
    "end": "1005060"
  },
  {
    "text": "like I said, it will\nspit out a schedule of when each instruction runs. ",
    "start": "1005060",
    "end": "1012670"
  },
  {
    "text": "And in the schedule,\nyou're going to see one digit for each\ncycle that the instruction is",
    "start": "1012670",
    "end": "1018290"
  },
  {
    "text": "running. So however many\ndigits there are, that's how many\ncycles are being used.",
    "start": "1018290",
    "end": "1023459"
  },
  {
    "text": "And in front of some\nof the instructions, you're going to see these\ndashes which represent stalls.",
    "start": "1023460",
    "end": "1029929"
  },
  {
    "text": "So these three dashes in\nfront of this instruction fm means that based\non the pipeline,",
    "start": "1029930",
    "end": "1037560"
  },
  {
    "text": "you could've scheduled\nthis instruction up here right after the previous\ninstruction finished.",
    "start": "1037560",
    "end": "1043569"
  },
  {
    "text": "However, because you're waiting\non particular dependencies, you're only going to\nbe able to schedule it these three cycles later.",
    "start": "1043569",
    "end": "1049770"
  },
  {
    "text": "So that's a three cycle stall. ",
    "start": "1049770",
    "end": "1055840"
  },
  {
    "text": "And the static\nprofile output is also going to show other information. The original assembly appears\non the right-hand side.",
    "start": "1055840",
    "end": "1062659"
  },
  {
    "text": "And which pipeline the\ninstructions are going into is going to show up on the left.",
    "start": "1062660",
    "end": "1067870"
  },
  {
    "text": "Any questions about this format? AUDIENCE: [INAUDIBLE].",
    "start": "1067870",
    "end": "1073207"
  },
  {
    "text": "PROFESSOR: Dual-issue just\nmeans that these instructions are going to be executed\nat the same time.",
    "start": "1073207",
    "end": "1079645"
  },
  {
    "text": "AUDIENCE: So can\npeople figure out, for example, what is the\nlatency for fm instruction? How many circles does fm take?",
    "start": "1079645",
    "end": "1086028"
  },
  {
    "start": "1086028",
    "end": "1091919"
  },
  {
    "text": "[INAUDIBLE] AUDIENCE: [INAUDIBLE].",
    "start": "1091920",
    "end": "1097062"
  },
  {
    "text": "PROFESSOR: Pardon? AUDIENCE: What are the\nnumbers on the right? PROFESSOR: Over here?",
    "start": "1097062",
    "end": "1102329"
  },
  {
    "text": "All right, so these\nare the arguments to the assembly instructions. So remember the first one is\ngoing to be the destination",
    "start": "1102329",
    "end": "1107953"
  },
  {
    "text": "register and the other ones\nare going to be all the source registers that that\ninstruction is going to use.",
    "start": "1107953",
    "end": "1113130"
  },
  {
    "text": " All right, so\nagain, we want to be",
    "start": "1113130",
    "end": "1123139"
  },
  {
    "start": "1120000",
    "end": "1198000"
  },
  {
    "text": "able to reorder these\ninstructions to minimize stalls. And what you're\ngoing to do is you're",
    "start": "1123140",
    "end": "1129489"
  },
  {
    "text": "going to try and look\nfor instructions that are going to take a long time\npotentially, for example, loads",
    "start": "1129489",
    "end": "1134877"
  },
  {
    "text": "and floating point instructions\nare going to take a long time. And of these instructions\nhave dependencies",
    "start": "1134877",
    "end": "1141299"
  },
  {
    "text": "then those dependencies\nare going to stall. So not only do you want\nto minimize stalls,",
    "start": "1141300",
    "end": "1147702"
  },
  {
    "text": "you also want to dual issue\ninstructions whenever possible, although that's a little\nbit more difficult to just kind of eyeball.",
    "start": "1147702",
    "end": "1154530"
  },
  {
    "text": "But anyway, if you get up to\nthe ideal running point, where you're able to dual issue every\ninstruction, then that means",
    "start": "1154530",
    "end": "1161890"
  },
  {
    "text": "you're going to be running\ntwo instructions per cycle, or it's going to take 1/2\ncycle per instruction.",
    "start": "1161890",
    "end": "1169169"
  },
  {
    "text": "Anyway, going through\nthese assembly files, and figuring out where\nthe dependencies are, which instructions you can move\naround, it's kind of tedious,",
    "start": "1169170",
    "end": "1176080"
  },
  {
    "text": "and you're not going to be\nable to apply these techniques to your entire program. So if you only\nhave limited time,",
    "start": "1176080",
    "end": "1183744"
  },
  {
    "text": "what you're going\nto have to do is try these on the most\ncritical code first. And that's usually\ngoing to be loop bodies,",
    "start": "1183744",
    "end": "1190590"
  },
  {
    "text": "because those are going to\nget executed many, many times. And any savings\nthat you see there will be multiplied\nmany, many times over.",
    "start": "1190590",
    "end": "1196450"
  },
  {
    "text": " So I'm going to go\nthrough an example of one possible\noptimization you could do.",
    "start": "1196450",
    "end": "1203990"
  },
  {
    "start": "1198000",
    "end": "1276000"
  },
  {
    "text": " So we'll actually go\nthrough these same files",
    "start": "1203990",
    "end": "1210490"
  },
  {
    "text": "in the exercise about\ntwo minutes from now.",
    "start": "1210490",
    "end": "1216130"
  },
  {
    "text": "This is from Lab 1. And this is one of\nthe code snippets",
    "start": "1216130",
    "end": "1222340"
  },
  {
    "text": "or the assembly snippets\nfrom the SPU program.",
    "start": "1222340",
    "end": "1228049"
  },
  {
    "text": "So notice that over\nhere we have these load instructions followed\nby a, I guess",
    "start": "1228050",
    "end": "1234280"
  },
  {
    "text": "this is a shift instruction. And there's two pairs of these.",
    "start": "1234280",
    "end": "1240370"
  },
  {
    "text": "And in each one, the\nshift instruction is going to depend on the\nresult of the previous load. Does everyone see that\nfrom the arguments?",
    "start": "1240370",
    "end": "1246810"
  },
  {
    "text": " So now the problem is that\nbecause the shift is happening",
    "start": "1246810",
    "end": "1253260"
  },
  {
    "text": "right after the load, it's\ngoing to stall for a long time, because the load\ntakes six cycles.",
    "start": "1253260",
    "end": "1260650"
  },
  {
    "text": "All right, so what\ncan we do over here in order to reduce stalling? ",
    "start": "1260650",
    "end": "1267110"
  },
  {
    "text": "Yep? AUDIENCE: Two\nloads concurrently? PROFESSOR: Yeah, we can\ndo the loads concurrently, and in general, we just\nwant to move these loads up",
    "start": "1267110",
    "end": "1274150"
  },
  {
    "text": "as high as we can.  So if I move the two loads\nup to the top of this--",
    "start": "1274150",
    "end": "1284030"
  },
  {
    "start": "1276000",
    "end": "1635000"
  },
  {
    "text": "oops-- the top of\nthis snippet, then we have two loads followed\nby all the instructions",
    "start": "1284030",
    "end": "1290130"
  },
  {
    "text": "that came after. Now the first shift is going\nto stall by only two cycles,",
    "start": "1290130",
    "end": "1295890"
  },
  {
    "text": "and the second shift is\nnot going to stall at all. All right? AUDIENCE: [INAUDIBLE]? ",
    "start": "1295890",
    "end": "1305400"
  },
  {
    "text": "PROFESSOR: So, pardon? AUDIENCE: [INAUDIBLE]. PROFESSOR: So the question is\nwhat would this change look like in code?",
    "start": "1305400",
    "end": "1311170"
  },
  {
    "text": "The thing is that\nkind of the order of these generate\ninstructions is going to be dependent\non the compiler,",
    "start": "1311170",
    "end": "1316434"
  },
  {
    "text": "and it's really\nup to the compiler how it wants to order\nthese instructions. So this change is\nnot going to be reflected in like your C code.",
    "start": "1316434",
    "end": "1324240"
  },
  {
    "text": "And that's why you have\nto do these optimizations after the assembly is generated.",
    "start": "1324240",
    "end": "1330050"
  },
  {
    "text": "Does that make sense? AUDIENCE: [INAUDIBLE]. ",
    "start": "1330050",
    "end": "1339049"
  },
  {
    "text": "PROFESSOR: If you\nhave a smart compiler then it might do some kind\nof instruction scheduling",
    "start": "1339050",
    "end": "1344159"
  },
  {
    "text": "in order to minimize stalls\nusing this methodology. Yup? AUDIENCE: I'm quite\nimpressed with XLC.",
    "start": "1344160",
    "end": "1350054"
  },
  {
    "text": "I compiled the same\nprogram under GCC for SPU with optimization\nlevel 3 under XLC.",
    "start": "1350054",
    "end": "1358260"
  },
  {
    "text": "XLC ran in half the time. So it was doing a much better\njob of instruction scheduling--",
    "start": "1358260",
    "end": "1365475"
  },
  {
    "text": "AUDIENCE: Than GCC? AUDIENCE: Than GCC. So that's something,\nif you've got a choice,",
    "start": "1365475",
    "end": "1371950"
  },
  {
    "text": "and the XLC compiler\nis working for you-- AUDIENCE: In general, this kind\nof sort of low-level assembly",
    "start": "1371950",
    "end": "1380210"
  },
  {
    "text": "hacking for instruction ordering\nis not something you'll do, just because\ncompilers are getting",
    "start": "1380210",
    "end": "1385450"
  },
  {
    "text": "incredibly good at doing\ninstruction scheduling. But here the exercise is for\nyou to sort of get familiar",
    "start": "1385450",
    "end": "1391659"
  },
  {
    "text": "with the tools and\nunderstand a little bit more in detail as to what's\ngoing on at the instruction level [INAUDIBLE] pipelines.",
    "start": "1391660",
    "end": "1399110"
  },
  {
    "text": "Another thing to\nnote here is, well, two things you could\nconsider here, how high up can you push the limits?",
    "start": "1399110",
    "end": "1406920"
  },
  {
    "text": "And related to that is, why\ncan't you completely hide the latency for the first load,\nand hence the first shift still",
    "start": "1406920",
    "end": "1413520"
  },
  {
    "text": "takes two seconds to stall. So that's dependent\nupon how much slack",
    "start": "1413520",
    "end": "1418605"
  },
  {
    "text": "do you have in your schedule,\ndependent on dependencies and where the loops starts.",
    "start": "1418605",
    "end": "1423825"
  },
  {
    "text": "So in some cases,\nyou just simply can't hide the entire latency. So it's part of considerations\nyou have to consider.",
    "start": "1423825",
    "end": "1431446"
  },
  {
    "text": "But [INAUDIBLE]\nand the compilers are getting really good at it. ",
    "start": "1431446",
    "end": "1436994"
  },
  {
    "text": "PROFESSOR: And in\ncase you're wondering, I think this code\nwas compiled using XLC on no\noptimizations, which is",
    "start": "1436994",
    "end": "1442960"
  },
  {
    "text": "why there's this really easy\nopportunity for optimization here.",
    "start": "1442960",
    "end": "1448450"
  },
  {
    "text": "It turns out, if we run\nthe timing utility again, we saved eight cycles.",
    "start": "1448450",
    "end": "1455570"
  },
  {
    "text": "So notice that on\nthe previous picture, we're going up to\nseven in that column.",
    "start": "1455570",
    "end": "1460910"
  },
  {
    "text": "And now we're only going up to\nthe previous nine, all right?",
    "start": "1460910",
    "end": "1467630"
  },
  {
    "text": "So what we're going to do for\nthe exercise right now is you can try something like this.",
    "start": "1467630",
    "end": "1472874"
  },
  {
    "text": "What we're going to try and\ndo is just improve performance by rescheduling instructions. And so if you\ndownload the tarball,",
    "start": "1472874",
    "end": "1481540"
  },
  {
    "text": "you'll get the exact same\nfile I was working on before. And what we're going to\nhave you do is just generate",
    "start": "1481540",
    "end": "1486880"
  },
  {
    "text": "the assembly, practice\ngenerating the assembly, modifying it, and then\ncontinuing with the rest of the",
    "start": "1486880",
    "end": "1492390"
  },
  {
    "text": "build process to\nget a new object file that's based on\nyour modified assembly.",
    "start": "1492390",
    "end": "1498709"
  },
  {
    "text": "All right, any questions?  Now you just need to find,\nfor example, one opportunity",
    "start": "1498709",
    "end": "1506799"
  },
  {
    "text": "for optimization. And you can do the exact same\nthing that I did, if you want. And so the key is just after\nyou've done your reordering,",
    "start": "1506800",
    "end": "1515080"
  },
  {
    "text": "you want to re-run\nthe timing utility to see how many\ncycles you saved. Also you want to, of course,\ncontinue the build process",
    "start": "1515080",
    "end": "1521700"
  },
  {
    "text": "to get the final\nexecutable file. And you want to run that just\nto make sure that your code is still correct.",
    "start": "1521700",
    "end": "1528205"
  },
  {
    "text": "AUDIENCE: Are we\nable to get this? [SIDE CONVERSATIONS]",
    "start": "1528206",
    "end": "1636400"
  },
  {
    "start": "1635000",
    "end": "1879000"
  },
  {
    "text": "PROFESSOR: OK, so this\nstatic profiling process does have its limitations. The first is that, and this\nis a pretty major limitation,",
    "start": "1636400",
    "end": "1645520"
  },
  {
    "text": "the static profiler assumes that\nnone of the branches are taken. So basically it just zips\nthrough the entire assembly",
    "start": "1645520",
    "end": "1651900"
  },
  {
    "text": "file in a straight line. So that means you're\ngoing to have a skewed view of how long code inside\nconditionals or loop bodies is",
    "start": "1651900",
    "end": "1661942"
  },
  {
    "text": "going to take, because\nconditionals, if there's savings in there, they\nmay not run at all.",
    "start": "1661942",
    "end": "1667170"
  },
  {
    "text": "And loop bodies,\nany savings in there may get multiplied\nmany, many times.",
    "start": "1667170",
    "end": "1673170"
  },
  {
    "text": "So if, for example,\nyou see that you've saved eight cycles in\nthe static scheduling, you're going to need to\nknow some more context, that",
    "start": "1673170",
    "end": "1680510"
  },
  {
    "text": "is whether it's\ninside a loop body and how many times you\nexpect that to run. So you're going to need\na little more information",
    "start": "1680510",
    "end": "1686060"
  },
  {
    "text": "to get a good idea of how these\ninstruction reorderings are actually affecting the\nruntime of your program.",
    "start": "1686060",
    "end": "1692630"
  },
  {
    "text": "And also, because this is\nstatic profiling, which means you're not using an\nactual program run to get data,",
    "start": "1692630",
    "end": "1698650"
  },
  {
    "text": "you're not going\nto get behavior-- you're not going to capture\nany behavior that depends",
    "start": "1698650",
    "end": "1703730"
  },
  {
    "text": "on the inputs to your program. So for example, you don't\nget counts of how many times",
    "start": "1703730",
    "end": "1711159"
  },
  {
    "text": "each loop runs, or when\neach branch is taken. One other thing to\nworry about, which",
    "start": "1711160",
    "end": "1718120"
  },
  {
    "text": "isn't going to be manifested\nin these static profiling",
    "start": "1718120",
    "end": "1724330"
  },
  {
    "text": "predictions, is\nbranch prediction. Now remember the\nstatic profiler is just",
    "start": "1724330",
    "end": "1729360"
  },
  {
    "text": "going to ignore all branches. And the thing is that\nbranch prediction,",
    "start": "1729360",
    "end": "1735630"
  },
  {
    "text": "because branch\nprediction is used to reduce the stall\nafter a branch is taken",
    "start": "1735630",
    "end": "1740890"
  },
  {
    "text": "by kind of pre-fetching\ninstructions and possibly doing other things. So what we'll do is\nguess the direction",
    "start": "1740890",
    "end": "1746309"
  },
  {
    "text": "that the branch will take. And then we'll start\npre-fetching instructions from the expected\nplace where it's going",
    "start": "1746310",
    "end": "1751870"
  },
  {
    "text": "to resume after the branch. And the thing is, if your\nbranch prediction is wrong,",
    "start": "1751870",
    "end": "1758150"
  },
  {
    "text": "then you're going to incur\na pretty large penalty. And the penalty is on\nthe order of 20 cycles",
    "start": "1758150",
    "end": "1764190"
  },
  {
    "text": "while it flushes the\npipeline and starts fetching instructions\nfrom the new place. On the other hand, if branch\nprediction is correct,",
    "start": "1764190",
    "end": "1770669"
  },
  {
    "text": "then there's no penalty\nat all, actually. So the next\ninstruction will just resume right after the branch.",
    "start": "1770670",
    "end": "1778340"
  },
  {
    "text": "Anyway, you can give\nhints to the compiler to tell it what you think the\noutcomes of branches will be.",
    "start": "1778340",
    "end": "1785590"
  },
  {
    "text": "And this can help in\nsome circumstances. Basically there are these\nmacros that you can define.",
    "start": "1785590",
    "end": "1793510"
  },
  {
    "text": "And what you're going to use is\nthis built-in expect compiler",
    "start": "1793510",
    "end": "1798710"
  },
  {
    "text": "intrinsic, and\nwhat that means is if you put that inside\nan if, it will mean,",
    "start": "1798710",
    "end": "1804169"
  },
  {
    "text": "you know, run the if as\nif the condition were exp. But then I'm going to\nexpect that the value",
    "start": "1804170",
    "end": "1809990"
  },
  {
    "text": "of this condition is going to\nbe, for example, true or false. All right, does that make sense?",
    "start": "1809990",
    "end": "1817100"
  },
  {
    "text": "Anyway, just one note about\nthe exercise that you did.",
    "start": "1817100",
    "end": "1822940"
  },
  {
    "text": "I believe the original run\ntime was 469 clock cycles.",
    "start": "1822940",
    "end": "1828559"
  },
  {
    "text": "Actually, if you run XLC\nwith 05 optimizations, it will reduce that to 188, so\nalmost 280 cycles of savings.",
    "start": "1828560",
    "end": "1839610"
  },
  {
    "text": "All right, so we'll-- pardon? AUDIENCE: The one that\nwe just [INAUDIBLE].",
    "start": "1839610",
    "end": "1847970"
  },
  {
    "text": "PROFESSOR: No, so the\noriginal code was-- the original assembly\nwas compiled on O 0,",
    "start": "1847970",
    "end": "1853150"
  },
  {
    "text": "or no optimizations. But then if you're doing\nan optimization by hand,",
    "start": "1853150",
    "end": "1859670"
  },
  {
    "text": "it saves eight\ncycles off of O 0. These are actually\npretty easy to find. And the 05 optimization level\nwill actually shave off 280",
    "start": "1859670",
    "end": "1868540"
  },
  {
    "text": "cycles. So we'll break for\nabout 10 minutes, and then after the break,\nwe'll do SIMD on Cell.",
    "start": "1868540",
    "end": "1876670"
  },
  {
    "start": "1876670",
    "end": "1879330"
  }
]