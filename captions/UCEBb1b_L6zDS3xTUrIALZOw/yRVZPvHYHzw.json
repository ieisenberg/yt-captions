[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6050"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or to\nview additional materials",
    "start": "6050",
    "end": "12690"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "12690",
    "end": "27337"
  },
  {
    "text": "ARMANDO SOLAR-LEZAMA: All right. So good morning, everyone. I'm Armando Solar-Lezama. I'm giving the lecture\ntoday on symbolic execution.",
    "start": "27337",
    "end": "37190"
  },
  {
    "text": "How many of you here are\nfamiliar with what the term is or have heard about it before?",
    "start": "37190",
    "end": "45220"
  },
  {
    "text": "We want to get a\nsense of audience. OK. So let's see.",
    "start": "45220",
    "end": "51080"
  },
  {
    "start": "51080",
    "end": "58295"
  },
  {
    "text": "I dropped this machine\na little too many times and it takes a while to boot up.",
    "start": "58295",
    "end": "64479"
  },
  {
    "text": "So symbolic execution\nis really the workhorse",
    "start": "64480",
    "end": "70040"
  },
  {
    "text": "of modern program analysis. It's one of those techniques\nthat has really broken out",
    "start": "70040",
    "end": "77580"
  },
  {
    "text": "of the research bubble\nand actually made it into a very large number of\nhigh impact applications.",
    "start": "77580",
    "end": "85210"
  },
  {
    "text": "For example, today\nat Microsoft there's a system called SAGE that runs\non a lot of important Microsoft",
    "start": "85210",
    "end": "95000"
  },
  {
    "text": "code ranging from\nPowerPoint to Windows to actually find security\nproblems and security",
    "start": "95000",
    "end": "100520"
  },
  {
    "text": "vulnerabilities. There's a lot of that\nacademic projects that have made a lot of\nreal world impact",
    "start": "100520",
    "end": "108159"
  },
  {
    "text": "by discovering important\nbugs in open source software, for example, by relying\non symbolic execution.",
    "start": "108160",
    "end": "115870"
  },
  {
    "text": "And the beauty of symbolic\nexecution as a technique is that compared to\ntesting, for example,",
    "start": "115870",
    "end": "123409"
  },
  {
    "text": "it gives you the\nability to reason about how your program\nis going to behave on a potentially infinite\nset of possible inputs.",
    "start": "123410",
    "end": "132260"
  },
  {
    "text": "It allows you to\nexplore spaces of inputs that would be completely\nunfeasible and impractical",
    "start": "132260",
    "end": "138730"
  },
  {
    "text": "to explore by, say,\nrandom testing, or even by having a very\nlarge number of testers",
    "start": "138730",
    "end": "145080"
  },
  {
    "text": "banging and the code. On the other hand, compared\nto more traditional static analysis techniques\nit has the advantage",
    "start": "145080",
    "end": "152580"
  },
  {
    "text": "that when it discovers a\nproblem it can actually produce for you an\ninput and a trace",
    "start": "152580",
    "end": "159859"
  },
  {
    "text": "that you can run on\nyour real program and execute that\nprogram on that input.",
    "start": "159860",
    "end": "164990"
  },
  {
    "text": "And you can actually tell\nthat it is a real bug. And you can actually\ngo and debug it using traditional\ndebugging mechanisms.",
    "start": "164990",
    "end": "175700"
  },
  {
    "text": "And this is\nparticularly valuable when you're in an industrial\ndevelopment environment",
    "start": "175700",
    "end": "182100"
  },
  {
    "text": "where you probably\ndon't have time to go looking after every\nlittle problem in your code.",
    "start": "182100",
    "end": "188880"
  },
  {
    "text": "You really want\nto be able to tell the difference\nbetween real problems versus false\npositives, for example.",
    "start": "188880",
    "end": "196010"
  },
  {
    "text": "So how does it work?",
    "start": "196010",
    "end": "201150"
  },
  {
    "text": "So in order to\nreally understand how it works it's useful to\nstart by looking at just",
    "start": "201150",
    "end": "208260"
  },
  {
    "text": "normal execution, right? If we think of\nsymbolic execution as a generalization of\ntraditional, plain execution,",
    "start": "208260",
    "end": "216500"
  },
  {
    "text": "it makes sense to know\nwhat this looks like. So I'm going to be using this\nvery, very simple program",
    "start": "216500",
    "end": "224420"
  },
  {
    "text": "as an illustration for\na lot of what I'm going to be talking about today.",
    "start": "224420",
    "end": "229800"
  },
  {
    "text": "So what do we have here? Again, it's a very simple\npiece of code, just a couple of branches and\nhere we have an assertion,",
    "start": "229800",
    "end": "237510"
  },
  {
    "text": "assert false. And we want to know could that\nassertion ever be triggered. Is it possible? Is there some input where that\nwill make that assertion fail?",
    "start": "237510",
    "end": "247260"
  },
  {
    "text": "And in this case because the\nassertion is just saying, assert false, what\nI'm really asking is, is there an input that can\nreach that point in the program?",
    "start": "247260",
    "end": "254959"
  },
  {
    "text": "So one of the things I can\ndo is I can try just testing. I can go in and run this\ncode with a concrete input.",
    "start": "254960",
    "end": "264550"
  },
  {
    "text": "Right? So let's say that I start\nwith an input where x is 4",
    "start": "264550",
    "end": "269849"
  },
  {
    "text": "and y is 4. And initially t is going\nto have the value 0",
    "start": "269850",
    "end": "275110"
  },
  {
    "text": "right after I declare it. So before we go with\nnormal execution, what are some of the\nimportant point here?",
    "start": "275110",
    "end": "280800"
  },
  {
    "text": "The fact that we need some\nrepresentation of the state of the program, right? Whether we're doing\nnormal execution",
    "start": "280800",
    "end": "288680"
  },
  {
    "text": "or whether we're doing\nsymbolic execution, we need to have some\nway to characterize",
    "start": "288680",
    "end": "293699"
  },
  {
    "text": "the state of the program. And in this case, this\nis such a simple program that it doesn't use the heap.",
    "start": "293700",
    "end": "299850"
  },
  {
    "text": "It doesn't use the stack. There are no function calls. So the state can be fully\ncharacterized by these three",
    "start": "299850",
    "end": "307550"
  },
  {
    "text": "variables together\nwith knowledge of where in the program I'm at, right? So if I start\nexecuting with 4, 4,",
    "start": "307550",
    "end": "315920"
  },
  {
    "text": "and 0, so when I get to this\nbranch, is 4 greater than 4?",
    "start": "315920",
    "end": "321330"
  },
  {
    "text": "Clearly not. So then I'm going to be\nexecuting t equals y.",
    "start": "321330",
    "end": "326560"
  },
  {
    "text": "So now after I do\nthat t is no longer 0. It now has the value 4.",
    "start": "326560",
    "end": "332230"
  },
  {
    "text": "Right? So that is now the\nstate of my program. And then I can\nevaluate this branch.",
    "start": "332230",
    "end": "338979"
  },
  {
    "text": "Is it the case that\nt is less than x?  No.",
    "start": "338980",
    "end": "344350"
  },
  {
    "text": "Right? So we dodged the bullet. We did not get an\nassertion failure.",
    "start": "344350",
    "end": "349490"
  },
  {
    "text": "There was no problem in\nthis particular execution. Right? But that doesn't\nreally tell us anything",
    "start": "349490",
    "end": "355580"
  },
  {
    "text": "about any other execution. All we know is that\nunder the input x equals 4 and y equals 4, the\nprogram is not going to fail.",
    "start": "355580",
    "end": "363580"
  },
  {
    "text": "But it tells us nothing\nabout what's going to happen on the input\n[? 2, 1, ?] for example.",
    "start": "363580",
    "end": "370390"
  },
  {
    "text": "Right? And in this input you see\nthat this input is actually going to follow a different\npath in the execution.",
    "start": "370390",
    "end": "377350"
  },
  {
    "text": "This time we're actually\ngoing to see that t equals x. We're actually going\nto set t equals 2x.",
    "start": "377350",
    "end": "385750"
  },
  {
    "text": "So after executing these\nt will be equal to 2, but is there any problem\nin this execution?",
    "start": "385750",
    "end": "392764"
  },
  {
    "text": " Will there be an assertion\nfailure on this input?",
    "start": "392765",
    "end": "399500"
  },
  {
    "text": " Well, so let's see. So if t is 2.",
    "start": "399500",
    "end": "405849"
  },
  {
    "text": "And x is 2. Is t less than x? No.",
    "start": "405850",
    "end": "411160"
  },
  {
    "text": "So it looks like we\ndodged a bullet again. Right? So here we have two\nconcrete inputs.",
    "start": "411160",
    "end": "417930"
  },
  {
    "text": "And they told us that on\nthese two concrete inputs the program didn't fail. But that really doesn't tell us\nanything about any other input.",
    "start": "417930",
    "end": "426900"
  },
  {
    "text": "And so the idea with\nsymbolic execution is we want to go beyond these\nsingle input executions.",
    "start": "426900",
    "end": "433949"
  },
  {
    "text": "And we want to be able\nto actually reason about the behavior of\nthe program on very",
    "start": "433950",
    "end": "440440"
  },
  {
    "text": "large sets of inputs. In some cases, infinite\nsets of possible inputs.",
    "start": "440440",
    "end": "445680"
  },
  {
    "text": "And the basic idea\nis as follows. So for a program\nlike this, just like",
    "start": "445680",
    "end": "451939"
  },
  {
    "text": "before the state\nof the program is characterized by the\nvalue of these three different variables.",
    "start": "451940",
    "end": "457500"
  },
  {
    "text": "Right? x, y, and t together with\nknowing where in the program I'm at. But now instead of\nconcrete values for x and y",
    "start": "457500",
    "end": "468230"
  },
  {
    "text": "what I'm going to have\nis a symbolic value, just a variable. A variable that allows me\nto give a name to this value",
    "start": "468230",
    "end": "477760"
  },
  {
    "text": "that the user is going\nto provide at the input. So what that means is that\nthe state of my program",
    "start": "477760",
    "end": "483540"
  },
  {
    "text": "is no longer a mapping\nfrom variable names to concrete values.",
    "start": "483540",
    "end": "488630"
  },
  {
    "text": "It's now a mapping from variable\nnames to these symbolic values. And a symbolic value,\nyou can essentially",
    "start": "488630",
    "end": "495250"
  },
  {
    "text": "think of it as a formula. So in this case the\nformula for x is just x.",
    "start": "495250",
    "end": "503610"
  },
  {
    "text": "And the formula for y is just y. And for t, it's\nactually the value 0. We know that for every input,\ndoesn't matter what you do.",
    "start": "503610",
    "end": "511190"
  },
  {
    "text": "The value of t after the first\nstatement is going to be 0. But now here's where\nit gets interesting.",
    "start": "511190",
    "end": "519510"
  },
  {
    "text": "So we get to this\nbranch right here that says, if x\nis greater than y,",
    "start": "519510",
    "end": "524912"
  },
  {
    "text": "we're going to go\nin one direction.  If it's less than\nor equal to y, we're",
    "start": "524912",
    "end": "530560"
  },
  {
    "text": "going to go in the\nother direction. Now do we know\nanything about x and y?",
    "start": "530560",
    "end": "535600"
  },
  {
    "text": " What do we know about them? ",
    "start": "535600",
    "end": "545600"
  },
  {
    "text": "We know their type, at least. So that's a start. So we know that they're going\nto be ranging from min int",
    "start": "545600",
    "end": "551870"
  },
  {
    "text": "to max int, but that's about\nall we know about them. And it turns out\nthat this information",
    "start": "551870",
    "end": "557870"
  },
  {
    "text": "that we know about them is not\nsufficient to tell us which direction this branch might go.",
    "start": "557870",
    "end": "563630"
  },
  {
    "text": "This branch could go either way. And so now there are many\nthings and we can do,",
    "start": "563630",
    "end": "572360"
  },
  {
    "text": "but what's one possible thing\nthat we could do at this point? ",
    "start": "572360",
    "end": "584680"
  },
  {
    "text": "Make a wild guess. AUDIENCE: [INAUDIBLE]. ARMANDO SOLAR-LEZAMA: Yeah. We could follow both branches. We could flip a coin and pick\none branch and take that.",
    "start": "584680",
    "end": "594420"
  },
  {
    "text": "So if we want to\nfollow both branches we have to follow one and\nthen the other one, right? So let's say we start\nwith this branch.",
    "start": "594420",
    "end": "604381"
  },
  {
    "text": "Right? So now we are at this branch. So what we know is that if\nwe make it to this branch,",
    "start": "604381",
    "end": "611240"
  },
  {
    "text": "in this branch t is now going\nto have the same value as x.",
    "start": "611240",
    "end": "617740"
  },
  {
    "text": "And we don't know what\nthat value is going to be, but we have a name for it. It's this script letter x.",
    "start": "617740",
    "end": "626079"
  },
  {
    "text": "Right? So that's the value\nof t on that branch.",
    "start": "626080",
    "end": "631370"
  },
  {
    "text": "If we were to take the opposite\nbranch then what would happen? The value of t would be\nsomething different, right?",
    "start": "631370",
    "end": "638730"
  },
  {
    "text": "In that branch, the value of t\nwould be the symbolic value y.",
    "start": "638730",
    "end": "645790"
  },
  {
    "text": "So that means that when we get\nto this point in the program, what is the value of t?",
    "start": "645790",
    "end": "651019"
  },
  {
    "text": "Well, maybe it's x. And maybe it's y. We don't know exactly which\none it is, but why don't we",
    "start": "651020",
    "end": "658460"
  },
  {
    "text": "give it a name? Let's call it t0. And what do we know about t0?",
    "start": "658460",
    "end": "664970"
  },
  {
    "text": " What are the cases where t0\nis going to be equal to x?",
    "start": "664970",
    "end": "670855"
  },
  {
    "text": " AUDIENCE: [INAUDIBLE]. ARMANDO SOLAR-LEZAMA:\nThat's right.",
    "start": "670855",
    "end": "677108"
  },
  {
    "text": "So essentially what we know is\nthat if x is greater than y, then this implies that it's x.",
    "start": "677108",
    "end": "687280"
  },
  {
    "text": "And if x is less than or equal\nto y that implies that it's y,",
    "start": "687280",
    "end": "697460"
  },
  {
    "text": "right? And so we have this\nvalue that we've defined. We'll call it t0.",
    "start": "697460",
    "end": "703750"
  },
  {
    "text": "And it has these\nlogical properties. So at this point in\nthe program we actually",
    "start": "703750",
    "end": "713149"
  },
  {
    "text": "have a name for the value of t. It's t0. ",
    "start": "713150",
    "end": "720290"
  },
  {
    "text": "Right? And so what did we do here? We took both branches\nof this if statement.",
    "start": "720290",
    "end": "726835"
  },
  {
    "text": " And then we computed\nthe symbolic value",
    "start": "726835",
    "end": "732089"
  },
  {
    "text": "by looking at under\nwhat conditions am I going to take one branch,\nunder what conditions am I",
    "start": "732090",
    "end": "737170"
  },
  {
    "text": "going to take another branch? And then looking\nat what values am",
    "start": "737170",
    "end": "742329"
  },
  {
    "text": "I going to be assigning to\nt on both of those branches? So now it comes to the\npoint where we have to ask,",
    "start": "742330",
    "end": "751760"
  },
  {
    "text": "can t be less than x? Right? So what is the value of t? The value of t is now t0.",
    "start": "751760",
    "end": "757580"
  },
  {
    "text": "So what we want\nto know is, is it possible for t0\nto be less than x?",
    "start": "757580",
    "end": "767089"
  },
  {
    "text": "Right? Now remember the\nfirst branch we hit we were asking a\nquestion about x and y.",
    "start": "767090",
    "end": "773930"
  },
  {
    "text": "And we knew nothing\nabout x and y. The only thing we\nknew about x and y",
    "start": "773930",
    "end": "779520"
  },
  {
    "text": "was that they were of type int. But now with t0 we actually\nknow a lot about t0.",
    "start": "779520",
    "end": "786620"
  },
  {
    "text": "We know that t0 is going to\nbe equal to x in some cases.",
    "start": "786620",
    "end": "791930"
  },
  {
    "text": "And it's going to be\nequal to y in some cases. And so this now gives\nus a set of equations",
    "start": "791930",
    "end": "798300"
  },
  {
    "text": "that we can solve for. So what we can say is,\nis it possible to satisfy",
    "start": "798300",
    "end": "806060"
  },
  {
    "text": "t0 less than x knowing\nthat t0 satisfies",
    "start": "806060",
    "end": "811110"
  },
  {
    "text": "all of these properties? Right? So, in fact, we can\nactually express this",
    "start": "811110",
    "end": "818270"
  },
  {
    "text": "as a constraint where we say,\nso is it possible to have t0",
    "start": "818270",
    "end": "824550"
  },
  {
    "text": "less than x? And to have x greater than\ny implies t0 equals x.",
    "start": "824550",
    "end": "835720"
  },
  {
    "text": "And x less than or equal\nto y imply t0 equal y.",
    "start": "835720",
    "end": "847146"
  },
  {
    "text": " Right? So what we have here is an\nequation that if that equation",
    "start": "847146",
    "end": "855890"
  },
  {
    "text": "has a solution, if it's\npossible to find a value of t0, and a value of x, and a value of\ny that satisfies that equation,",
    "start": "855890",
    "end": "864660"
  },
  {
    "text": "then we know that those\nvalues, when we plug them",
    "start": "864660",
    "end": "869930"
  },
  {
    "text": "into our program, when\nthe program executes, it will take this branch.",
    "start": "869930",
    "end": "875930"
  },
  {
    "text": "And it will blow up when\nit hits a assert false. ",
    "start": "875930",
    "end": "882721"
  },
  {
    "text": "Right? So what did we do here? So we're executing this\nprogram, but instead",
    "start": "882721",
    "end": "890370"
  },
  {
    "text": "of keeping our state as a\nmapping from variable names",
    "start": "890370",
    "end": "897560"
  },
  {
    "text": "to values, what\nwe're doing is we're keeping our program as a\nmapping from variable names",
    "start": "897560",
    "end": "903970"
  },
  {
    "text": "to these symbolic values. Essentially, other\nvariable names.",
    "start": "903970",
    "end": "909230"
  },
  {
    "text": "And in this case our\nother variable names are the script x, script\ny, t0, and on top of that,",
    "start": "909230",
    "end": "917320"
  },
  {
    "text": "we have a set of\nequations that tell us how those values are related.",
    "start": "917320",
    "end": "922459"
  },
  {
    "text": "So we have an\nequation that tells us how t0 is related to\nx and y in this case.",
    "start": "922460",
    "end": "929180"
  },
  {
    "text": "And solving for\nthat equation allows us to answer the question\nof whether this branch can",
    "start": "929180",
    "end": "937380"
  },
  {
    "text": "be taken or not. Now just looking\nat the equation, can this branch be taken or not?",
    "start": "937380",
    "end": "942900"
  },
  {
    "text": " Right? So it looks like the\nbranch cannot be taken.",
    "start": "942900",
    "end": "949450"
  },
  {
    "text": "Why not? Because we're looking for\ncases where t0 is less than x,",
    "start": "949450",
    "end": "956389"
  },
  {
    "text": "which means that if you're\nin this case, then clearly that's not going to be true. Right?",
    "start": "956390",
    "end": "961850"
  },
  {
    "text": "So that means that when\nx is greater than y, then it cannot happen because\nt0 will be equal to x.",
    "start": "961850",
    "end": "968279"
  },
  {
    "text": "And it cannot be equal to x and\nless than x at the same time. And what about in this case?",
    "start": "968280",
    "end": "973949"
  },
  {
    "text": "Can it happen in this case? Can t0 be less than\nx in this case? ",
    "start": "973950",
    "end": "981150"
  },
  {
    "text": "No, it clearly cannot, right? Because in this case we\nknow that x is less than y.",
    "start": "981150",
    "end": "989180"
  },
  {
    "text": "And so if t0 is going\nto be less than x, then it would also\nbe less than y. But we know that in that case\nt0 is exactly equal to y.",
    "start": "989180",
    "end": "997730"
  },
  {
    "text": "And therefore, again, that\ncase cannot be satisfied. So what we have here is an\nequation that has no solution.",
    "start": "997730",
    "end": "1007079"
  },
  {
    "text": "It doesn't matter what values\nyou plug into this equation. You cannot solve it and that\ntells us that no matter what",
    "start": "1007080",
    "end": "1014990"
  },
  {
    "text": "inputs we pass to this code, it\nwill not go down this branch.",
    "start": "1014990",
    "end": "1021620"
  },
  {
    "text": "Now notice that when\nmaking that argument here",
    "start": "1021620",
    "end": "1027459"
  },
  {
    "text": "I was basically alluding to\nyour intuition about integers, about mathematical integers.",
    "start": "1027460",
    "end": "1033619"
  },
  {
    "text": "In practice we know that\nmachine ints don't quite behave exactly the same\nway as mathematical ints.",
    "start": "1033619",
    "end": "1042109"
  },
  {
    "text": "And there are some\ncases where laws that apply to mathematical\nints don't actually",
    "start": "1042109",
    "end": "1047430"
  },
  {
    "text": "apply to ints in programs. And so when reasoning\nabout this we have to be very\ncareful that when",
    "start": "1047430",
    "end": "1053761"
  },
  {
    "text": "we're solving these\nequations, we're keeping in mind\nthat these are not",
    "start": "1053761",
    "end": "1060930"
  },
  {
    "text": "the integers as they were taught\nto us in elementary school. These are 32-bit integers\nthat the machine uses.",
    "start": "1060930",
    "end": "1068549"
  },
  {
    "text": "And there are many\ncases and many instances of bugs that arose because\nprogrammers were thinking",
    "start": "1068550",
    "end": "1075000"
  },
  {
    "text": "about their code in terms\nof mathematical integers, and not realizing that there\nare things like overflows that",
    "start": "1075000",
    "end": "1082450"
  },
  {
    "text": "can cause the program\nto behave differently for mathematical inputs. But the other thing is\nwhat I've described here",
    "start": "1082450",
    "end": "1090140"
  },
  {
    "text": "is a purely intuitive argument.",
    "start": "1090140",
    "end": "1096230"
  },
  {
    "text": "I walk you through the process\nof how to do this by hand, but that's by no\nmeans an algorithm.",
    "start": "1096230",
    "end": "1101970"
  },
  {
    "text": "Right? The beauty of this idea\nof symbolic execution, however, is that it can be\ncoded into an algorithm.",
    "start": "1101970",
    "end": "1108919"
  },
  {
    "text": "And it can be solved in\na mechanical way, which allows you to do this not\njust for ten line programs,",
    "start": "1108920",
    "end": "1116190"
  },
  {
    "text": "but actually for\nmillion line programs. And it allows you\nto actually take",
    "start": "1116190",
    "end": "1121281"
  },
  {
    "text": "this reasoning, and the\nsame intuitive reasoning that we used in\nthis case to talk",
    "start": "1121281",
    "end": "1128090"
  },
  {
    "text": "about what happens\nwhen we execute this program on\ndifferent inputs. And scale that reasoning\nto very large programs.",
    "start": "1128090",
    "end": "1139429"
  },
  {
    "text": "Are there any questions so far? ",
    "start": "1139429",
    "end": "1145621"
  },
  {
    "text": "Yes? AUDIENCE: What if a\n[INAUDIBLE] are not supposed to take an input? [INAUDIBLE] ",
    "start": "1145621",
    "end": "1155639"
  },
  {
    "text": "ARMANDO SOLAR-LEZAMA: Oh. That's a very good question. Right, so, for\nexample, let's say",
    "start": "1155639",
    "end": "1166190"
  },
  {
    "text": "we have the program that\nwe have here, but instead",
    "start": "1166190",
    "end": "1176100"
  },
  {
    "text": "of these being t equals x, here\nwe will say t equals x minus 1.",
    "start": "1176100",
    "end": "1186130"
  },
  {
    "text": "Right? So now all of a\nsudden, intuitively you can see that now this\nprogram could blow up, right?",
    "start": "1186130",
    "end": "1192580"
  },
  {
    "text": "Because when the program\ntakes this path then",
    "start": "1192580",
    "end": "1200149"
  },
  {
    "text": "t will indeed be less than x. And you will indeed fail here.",
    "start": "1200150",
    "end": "1206220"
  },
  {
    "text": "Right? So what will happen to\na program like this? How will our symbolic\nstate look like?",
    "start": "1206220",
    "end": "1215370"
  },
  {
    "text": "Right? So in this case, so t0,\nwhen x is greater than y,",
    "start": "1215370",
    "end": "1222710"
  },
  {
    "text": "what is t0 now going\nto be equal to? It's not going to be equal to x. It's going to be equal\nto x minus 1, right?",
    "start": "1222710",
    "end": "1235060"
  },
  {
    "text": "And so that means that,\nso, this condition now",
    "start": "1235060",
    "end": "1247290"
  },
  {
    "text": "has a satisfying assignment. Right? Now this can fail, but what\nif you go to the developer",
    "start": "1247290",
    "end": "1256600"
  },
  {
    "text": "and say, hey, this\nfunction can blow up",
    "start": "1256600",
    "end": "1263320"
  },
  {
    "text": "whenever x is greater than y. And the developer\nlooks at this and says,",
    "start": "1263320",
    "end": "1271149"
  },
  {
    "text": "oh, I forgot to tell you. Actually, this\nfunction can never",
    "start": "1271150",
    "end": "1276409"
  },
  {
    "text": "be called with parameters\nwhere x is greater than y.",
    "start": "1276410",
    "end": "1283090"
  },
  {
    "text": "Right? That the client that calls\nthis function is just a quick function that\nI wrote for something.",
    "start": "1283090",
    "end": "1289140"
  },
  {
    "text": "And it has this branch for\nsome historical purpose. But actually this\nfunction will never get called with\nx greater than y.",
    "start": "1289140",
    "end": "1297240"
  },
  {
    "text": "You're like, well,\nnow you tell me. Right? But the way we can\nthink about this",
    "start": "1297240",
    "end": "1303059"
  },
  {
    "text": "is that there is an assumption\nthat x is going to be less than",
    "start": "1303060",
    "end": "1315830"
  },
  {
    "text": "or equal to y, right? This is sometimes referred to\nas a precondition or a contract",
    "start": "1315830",
    "end": "1322020"
  },
  {
    "text": "for this function. The function is promising\nto do something, but only if you satisfy\nthis assumption. And if you don't satisfy the\nassumption, the function says,",
    "start": "1322020",
    "end": "1329080"
  },
  {
    "text": "I don't care what happens. I only promise\nthat I'm not going to fail when this\nassumption is satisfied.",
    "start": "1329080",
    "end": "1335390"
  },
  {
    "text": "And it's the\nresponsibility of the color to make sure that this condition\nis never violated, right?",
    "start": "1335390",
    "end": "1340790"
  },
  {
    "text": "So how would we\nencode that constraint",
    "start": "1340790",
    "end": "1346340"
  },
  {
    "text": "when we're solving\nfor equations? Well, essentially\nwhat we have is we have this set\nof constraints that",
    "start": "1346340",
    "end": "1351780"
  },
  {
    "text": "tell us whether this\nbranch is feasible. And on top of the constraints\nthat we already have",
    "start": "1351780",
    "end": "1357100"
  },
  {
    "text": "we need to also make sure\nthat the precondition,",
    "start": "1357100",
    "end": "1365530"
  },
  {
    "text": "or the assumptions\nare satisfied. Right? And now we want to\nask, OK, so can I",
    "start": "1365530",
    "end": "1373210"
  },
  {
    "text": "find an x and a y that satisfy\nall of these constraints together with these constraint\nthat I have on the input,",
    "start": "1373210",
    "end": "1379630"
  },
  {
    "text": "with these properties\nthat I know that the input must satisfy? And once again you can\nsee that this constraint",
    "start": "1379630",
    "end": "1386810"
  },
  {
    "text": "of x less than or equal\nto y is the difference between this constraint\nbeing satisfiable,",
    "start": "1386810",
    "end": "1393940"
  },
  {
    "text": "and this constraint once\nagain becoming unsatisfiable. That's a very important issue\nwhen dealing with analysis,",
    "start": "1393940",
    "end": "1402450"
  },
  {
    "text": "especially when you want\nto do this marginally at the level of individual\nfunctions at a time.",
    "start": "1402450",
    "end": "1407990"
  },
  {
    "text": "It makes sense to know\nwhat the assumptions are that the programmer\nhad in mind when",
    "start": "1407990",
    "end": "1414412"
  },
  {
    "text": "writing this function,\nbecause if you don't know what those assumptions were\nyou could say, yeah, here",
    "start": "1414412",
    "end": "1419760"
  },
  {
    "text": "are some inputs where it's going\nto fail only for the programmer to dismiss myth that by saying,\noh, but those inputs are not",
    "start": "1419760",
    "end": "1425530"
  },
  {
    "text": "possible, or those\ninputs can never happen. Other questions? ",
    "start": "1425530",
    "end": "1437570"
  },
  {
    "text": "All right. So how do we do this in\na more mechanical way?",
    "start": "1437570",
    "end": "1443210"
  },
  {
    "text": "So there are two\naspects to this problem. Aspect number one is\nhow do you actually",
    "start": "1443210",
    "end": "1451390"
  },
  {
    "text": "come up with these formulas? So in this case it\nwas kind of intuitive how we came up\nwith the formulas.",
    "start": "1451390",
    "end": "1457174"
  },
  {
    "text": "where we were just working\nthrough it by hand, but how do you come\nup with these formulas in a mechanical way?",
    "start": "1457174",
    "end": "1463390"
  },
  {
    "text": "And aspect number two is\nonce you have the formulas, how do you actually solve them?",
    "start": "1463390",
    "end": "1470520"
  },
  {
    "text": "How can you actually\nsolve these formulas that describe whether\nyour program fails or not?",
    "start": "1470520",
    "end": "1478700"
  },
  {
    "text": "And I'm actually going to start\nwith that second question.",
    "start": "1478700",
    "end": "1483970"
  },
  {
    "text": "Given that we're able to reduce\nour problem to these formulas that involve integer\nreasoning that involved",
    "start": "1483970",
    "end": "1494280"
  },
  {
    "text": "in the case of\nprograms generally you care about bit\nvector reasoning. [INAUDIBLE] programs, a lot of\ntimes, you care about arrays.",
    "start": "1494280",
    "end": "1500220"
  },
  {
    "text": "You care about functions. And you end up with\nthese giant formulas. How in the world do you actually\nsolve them in a mechanical way?",
    "start": "1500220",
    "end": "1508540"
  },
  {
    "text": "And a lot of the technology\nthat we're talking about today, and the reason why we're\nactually talking about it",
    "start": "1508540",
    "end": "1514870"
  },
  {
    "text": "as a practical tool, have to\ndo with tremendous advances",
    "start": "1514870",
    "end": "1520280"
  },
  {
    "text": "in solvers for\nlogical questions. And in particular, there\nis a very important class",
    "start": "1520280",
    "end": "1525390"
  },
  {
    "text": "of solvers called satisfiability\nmodulo theory solvers,",
    "start": "1525390",
    "end": "1531300"
  },
  {
    "text": "often abbreviated as SMT. But a lot of people\nin the community would argue that the name is\nnot a particularly good name,",
    "start": "1531300",
    "end": "1539260"
  },
  {
    "text": "but it's the one that everybody\nuses and it has stuck. What you need to know\nabout these SMT solvers",
    "start": "1539260",
    "end": "1545220"
  },
  {
    "text": "is that an SMT solver is\nan algorithm essentially",
    "start": "1545220",
    "end": "1550840"
  },
  {
    "text": "that given a logical\nformula will give you one of two things.",
    "start": "1550840",
    "end": "1556080"
  },
  {
    "text": "it will give you either\na satisfying assignment to the formula, or\nit will tell you",
    "start": "1556080",
    "end": "1561830"
  },
  {
    "text": "that the formula\nis unsatisfiable. And that there is no\npossible assignment",
    "start": "1561830",
    "end": "1569490"
  },
  {
    "text": "to the variables in\nthat formula that will satisfy these\nconstraints that you defined.",
    "start": "1569490",
    "end": "1574789"
  },
  {
    "text": "Now in practice, if this\nsounds a little bit scary and a little bit like magic,\nit is a little bit scary.",
    "start": "1574790",
    "end": "1581730"
  },
  {
    "text": "A lot of the problems that\nthese SMT solvers have to solve are NP-complete\nin the best case.",
    "start": "1581730",
    "end": "1588309"
  },
  {
    "text": "All right? the nice\nones are NP-complete. The hard ones can get\nmuch harrier than that.",
    "start": "1588310",
    "end": "1594309"
  },
  {
    "text": "So how can we have a system that\nrelies as its primary building",
    "start": "1594310",
    "end": "1601040"
  },
  {
    "text": "block on solving NP complete\nPSPACE-complete problems?",
    "start": "1601040",
    "end": "1606950"
  },
  {
    "text": "And still have something\nthat works in practice? And part of the answer is that\nfor a lot of these solvers",
    "start": "1606950",
    "end": "1614570"
  },
  {
    "text": "there is a third thing\nthat they can tell you,",
    "start": "1614570",
    "end": "1619590"
  },
  {
    "text": "which is, I don't know. ",
    "start": "1619590",
    "end": "1629629"
  },
  {
    "text": "And so part of the\nbeauty of these solvers is that for practical\nproblems, even",
    "start": "1629630",
    "end": "1636890"
  },
  {
    "text": "for very, very large and\ncomplicated practical problems, they are still able to do\nbetter than simply telling you,",
    "start": "1636890",
    "end": "1642660"
  },
  {
    "text": "I don't know. They are still able\nto give you either a guarantee that this\nset of constraints",
    "start": "1642660",
    "end": "1650420"
  },
  {
    "text": "is unsatisfiable or an actual\nsatisfying assignment that tells you exactly\nwhat the answer is.",
    "start": "1650420",
    "end": "1657299"
  },
  {
    "text": " Yes? AUDIENCE: [INAUDIBLE]\nFor example, [INAUDIBLE]",
    "start": "1657300",
    "end": "1668451"
  },
  {
    "text": "specification I don't\nthink you said anything about how many bits are used to\nstore an integer. [INAUDIBLE]",
    "start": "1668451",
    "end": "1674000"
  },
  {
    "start": "1674000",
    "end": "1680907"
  },
  {
    "text": "ARMANDO SOLAR-LEZAMA:\nThat's a very good question. And that really has\nto do with how you define your constraints, right?",
    "start": "1680907",
    "end": "1687810"
  },
  {
    "text": "So If you look at our simple\nexample from the beginning,",
    "start": "1687810",
    "end": "1698940"
  },
  {
    "text": "in this case, we assume that\nthese were the integers as",
    "start": "1698940",
    "end": "1705139"
  },
  {
    "text": "learned in elementary school. And that we completely decided\nto ignore overflow errors.",
    "start": "1705140",
    "end": "1714420"
  },
  {
    "text": "If you care about\noverflow errors, if overflow errors are actually\nessential to the kind of bugs",
    "start": "1714420",
    "end": "1719510"
  },
  {
    "text": "you're trying to find, this\nwould not be a good way to set up the problem. What you need is to represent\nthese not so fast integers,",
    "start": "1719510",
    "end": "1729780"
  },
  {
    "text": "but as bit-vectors. And the moment you represent\nthem as bit vectors you have to have a\nbit width in mind.",
    "start": "1729780",
    "end": "1735470"
  },
  {
    "text": "And this goes back to\nwhat this modular theory",
    "start": "1735470",
    "end": "1741530"
  },
  {
    "text": "aspect in the solver means. What this modular\ntheory aspect means is that the solver is\nactually extensible",
    "start": "1741530",
    "end": "1748700"
  },
  {
    "text": "with different theories. The most popular theories are\nthe theory of bit-vector which",
    "start": "1748700",
    "end": "1755960"
  },
  {
    "text": "are fixed length bit-vectors.",
    "start": "1755960",
    "end": "1761450"
  },
  {
    "text": "That means that if you're\ninterpreting your formulas in this theory of fixed\nlength bit-vectors",
    "start": "1761450",
    "end": "1766664"
  },
  {
    "text": "you have to fix the\nlength of the bit-vectors. And you have to\nexplicitly specify that these are going to be\n32-bit bit-vectors, or 8 bit",
    "start": "1766664",
    "end": "1776760"
  },
  {
    "text": "bit-vectors, or\n64-bit bit-vectors. AUDIENCE: So if you wanted\nto make the the bit symbolic",
    "start": "1776760",
    "end": "1782284"
  },
  {
    "text": "[INAUDIBLE], like this\nis an x bit, is that-- ARMANDO SOLAR-LEZAMA: So\nthere's another theory which",
    "start": "1782284",
    "end": "1789140"
  },
  {
    "text": "is called the theory of arrays. And we'll talk a little\nbit more about it,",
    "start": "1789140",
    "end": "1795740"
  },
  {
    "text": "where unlike the\nbit vector theory, which is designed to be\nfor fixed length things",
    "start": "1795740",
    "end": "1802410"
  },
  {
    "text": "the theory of arrays is meant\nto be for collections where you don't actually\nknow the size a priori.",
    "start": "1802410",
    "end": "1810110"
  },
  {
    "text": "Now in practice\nnobody uses the theory of arrays to model\nintegers, for example,",
    "start": "1810110",
    "end": "1816010"
  },
  {
    "text": "because it's too expensive. It becomes way more\nexpensive to reason about",
    "start": "1816010",
    "end": "1821250"
  },
  {
    "text": "when you don't know\nwhat the bound is. So generally people\nuse fixed length theory of bit-vectors when reasoning\nabout integers or characters",
    "start": "1821250",
    "end": "1830909"
  },
  {
    "text": "even. Another very common theory is\nthe theory of actual integer",
    "start": "1830910",
    "end": "1841760"
  },
  {
    "text": "arithmetic, and in particularly\nlinear integer arithmetic. This is a theory that\npeople like a lot because it",
    "start": "1841760",
    "end": "1847200"
  },
  {
    "text": "can be reasoned about\nvery, very efficiently, but it's not\nparticularly good when",
    "start": "1847200",
    "end": "1852930"
  },
  {
    "text": "you're reasoning about programs,\nbecause in general you really do care about overflow issues.",
    "start": "1852930",
    "end": "1859039"
  },
  {
    "text": "But it's actually very widely\nused for many, many things. The other theory that you're\nlikely to see people using",
    "start": "1859040",
    "end": "1867240"
  },
  {
    "text": "is the theory of\nuninterpreted functions.",
    "start": "1867240",
    "end": "1873535"
  },
  {
    "start": "1873535",
    "end": "1879240"
  },
  {
    "text": "So what does it mean, the theory\nof an uninterpreted function? It means that you have a formula\nwhere somewhere in your formula",
    "start": "1879240",
    "end": "1887200"
  },
  {
    "text": "you know that you're\ncalling a function, but you know nothing\nabout that function other than the fact that it is\na function, that if you give it",
    "start": "1887200",
    "end": "1899200"
  },
  {
    "text": "the same inputs you get\nthe same outputs in return. And it turns out this is\nvery, very useful sometimes",
    "start": "1899200",
    "end": "1905190"
  },
  {
    "text": "when trying to\nreason about things like if you floating point\ncode, modeling, sine, cosines,",
    "start": "1905190",
    "end": "1913190"
  },
  {
    "text": "square roots can be very\nmessy and expensive, but you can say,\nlook, I don't actually care about what the\nsine function does.",
    "start": "1913190",
    "end": "1921030"
  },
  {
    "text": "I don't care about\nwhat its output is. All I know is that if I\ncall the sine function in many different\nplaces with the input",
    "start": "1921030",
    "end": "1927390"
  },
  {
    "text": "I will get the same output. And that's enough for me\nto reason about my code.",
    "start": "1927390",
    "end": "1934100"
  },
  {
    "text": "And so the most\ncommon ones you will see when analyzing\nreal systems are",
    "start": "1934100",
    "end": "1941140"
  },
  {
    "text": "bit-vectors to deal\nwith integers, and logs, and pointers. Actually, pointers are often\nrepresented with integer",
    "start": "1941140",
    "end": "1950990"
  },
  {
    "text": "because you're\ngenerally not going to be doing complicated\nbit whittling on pointers.",
    "start": "1950990",
    "end": "1960500"
  },
  {
    "text": "Sometimes you will and then\nyou can't use integers anymore. So OK.",
    "start": "1960500",
    "end": "1966210"
  },
  {
    "text": "So that's all well and good. That's what an SMT\nsolver can do for you.",
    "start": "1966210",
    "end": "1972650"
  },
  {
    "text": "How does it actually work? What's inside it\nthat makes it work? And SMT solvers actually\nrely on our ability",
    "start": "1972650",
    "end": "1981820"
  },
  {
    "text": "to solve SAT problems,\non our ability to take problems involving\njust purely Boolean constraints",
    "start": "1981820",
    "end": "1990350"
  },
  {
    "text": "and Boolean variables,\nand telling us whether there is an assignment\nto these Boolean variables",
    "start": "1990350",
    "end": "1996680"
  },
  {
    "text": "that is satisfiable or not. And this is the kind of thing\nthat for many, many years",
    "start": "1996680",
    "end": "2004400"
  },
  {
    "text": "people in undergrad have been\ntaught that actually this is an NP-complete problem. The moment something\nreduces to SAT",
    "start": "2004400",
    "end": "2010679"
  },
  {
    "text": "you know you shouldn't\ndo it, but it turns out that we actually have\nsome very, very good SAT",
    "start": "2010680",
    "end": "2015960"
  },
  {
    "text": "solvers out there. Probably most of you even\nbuilt one as part of 6005.",
    "start": "2015960",
    "end": "2022059"
  },
  {
    "text": "Am I right? Or some of you did. So I'll tell you the basic idea\nbehind how SAT solvers work.",
    "start": "2022060",
    "end": "2030779"
  },
  {
    "text": "And the basic idea is that\nyou take all your constraints",
    "start": "2030780",
    "end": "2036140"
  },
  {
    "text": "on your Boolean variables and\nyou put them into a database. And what is a constraint?",
    "start": "2036140",
    "end": "2043450"
  },
  {
    "text": "Is this too small or can\npeople in the back read this? ",
    "start": "2043450",
    "end": "2049661"
  },
  {
    "text": "AUDIENCE: Too small. ARMANDO SOLAR-LEZAMA: Too small? OK. ",
    "start": "2049662",
    "end": "2055899"
  },
  {
    "text": "Let's see if we can\nmake this bigger. ",
    "start": "2055900",
    "end": "2082040"
  },
  {
    "text": "Is this a little bit better? AUDIENCE: [INAUDIBLE]. ARMANDO SOLAR-LEZAMA: OK.",
    "start": "2082040",
    "end": "2087770"
  },
  {
    "text": "Well, here's what I'll do. I will annotate and I\nwill narrate it as I go.",
    "start": "2087770",
    "end": "2094030"
  },
  {
    "text": "And I'll post the slides later. So people can see what it says. So what we have\nhere in SAT problem",
    "start": "2094030",
    "end": "2101650"
  },
  {
    "text": "is that we have all these\nvariables that represent",
    "start": "2101650",
    "end": "2106770"
  },
  {
    "text": "Boolean unknowns, right? We want to know is\nit possible for x to be true, and y to be true,\nand z to be true at the same,",
    "start": "2106770",
    "end": "2115170"
  },
  {
    "text": "for example. Right? And these are our unknowns. And all the constraints are\nin conjunctive normal form.",
    "start": "2115170",
    "end": "2122750"
  },
  {
    "text": "What that means is\nall our constraints are of the form either x1\nis true, or x2 is true,",
    "start": "2122750",
    "end": "2133920"
  },
  {
    "text": "or x3 is true, for example. Right? So what we have is we have all\nour constraints in this form",
    "start": "2133920",
    "end": "2142200"
  },
  {
    "text": "and some of them might say,\nwell, either x1 is true, or x2 is false, or x3 is false.",
    "start": "2142200",
    "end": "2148970"
  },
  {
    "text": "Right? So we have constraints. All our constraints\nare of this form. And you probably remember\nfrom discrete math",
    "start": "2148970",
    "end": "2155780"
  },
  {
    "text": "that any Boolean formula\ncan be represented in conjunctive normal form.",
    "start": "2155780",
    "end": "2161264"
  },
  {
    "text": "And it has the added benefit\nthat it's actually very, very easy to translate from arbitrary\nrepresentations of a formula",
    "start": "2161264",
    "end": "2168369"
  },
  {
    "text": "to these conjunctive normal form\nformula, which means whatever representation you're using\nto represent Boolean formulas,",
    "start": "2168370",
    "end": "2175180"
  },
  {
    "text": "you can very easily\nconvert it to this format. So what we have is\nwe have a database",
    "start": "2175180",
    "end": "2182730"
  },
  {
    "text": "with lots of constraints\nof this form. And what SAT solver\nis going to do is going to pick one of\nthese variables at random.",
    "start": "2182730",
    "end": "2189539"
  },
  {
    "text": "Let's say it's going to pick x1. And it's going to say, why\ndon't we set x1 to true?",
    "start": "2189540",
    "end": "2196180"
  },
  {
    "text": "I don't know anything\nabout this problem. Might as well try\nselling it to true. And then what will happen is\nyou'll have some constraints",
    "start": "2196180",
    "end": "2204049"
  },
  {
    "text": "that mention x1 and let's say\nthat you have a constraint that says either x1 is\nfalse or x7 is true.",
    "start": "2204050",
    "end": "2213160"
  },
  {
    "text": "Right? So if you know that\nx1 is true and you know that either x1 is\nfalse or x7 is true,",
    "start": "2213160",
    "end": "2220430"
  },
  {
    "text": "what do you know about x7? AUDIENCE: [INAUDIBLE]. ARMANDO SOLAR-LEZAMA: Yeah.",
    "start": "2220430",
    "end": "2226270"
  },
  {
    "text": "It has to be true. Right? Because otherwise\nthis constraint would not be satisfied. And so now you've propagated\nthis assignment from x1 to x7.",
    "start": "2226270",
    "end": "2236420"
  },
  {
    "text": "And let's say now you pick\nsome other random variable. You say, well, what about x5?",
    "start": "2236420",
    "end": "2242090"
  },
  {
    "text": "Why don't we try x5 being true? Right? And now let's say that you\nhave a constraint that says,",
    "start": "2242090",
    "end": "2247599"
  },
  {
    "text": "well, either x7 is false, or\nx6 is true, or x5 is false.",
    "start": "2247600",
    "end": "2261850"
  },
  {
    "text": "Right? So I have x5 being true\nand I have x7 being true.",
    "start": "2261850",
    "end": "2268500"
  },
  {
    "text": "So that means x6\nnow has to be true. Right? Because otherwise this\nconstraint would be violated.",
    "start": "2268500",
    "end": "2276760"
  },
  {
    "text": "And so from that the\nsystem infers, OK. So x6 has to be true. And it keeps at this\nprocess essentially",
    "start": "2276760",
    "end": "2284680"
  },
  {
    "text": "trying out assignments. And then looking at all\nthe available clauses, and looking at,\nhey, are there are",
    "start": "2284680",
    "end": "2290750"
  },
  {
    "text": "other things that are\nimplied by the assignments that I have so far?",
    "start": "2290750",
    "end": "2296090"
  },
  {
    "text": "And following those implications\nuntil one of two things happens. Either you keep following\nimplications and trying",
    "start": "2296090",
    "end": "2303480"
  },
  {
    "text": "random things and eventually\nyou have set a value to every single\nvariable without ever running into a contradiction.",
    "start": "2303480",
    "end": "2310550"
  },
  {
    "text": "And then you're done. Right? You found a satisfying\nassignment, or what can happen",
    "start": "2310550",
    "end": "2317240"
  },
  {
    "text": "is you run into a contradiction. You run into a place where there\nwas a clause that forced x4",
    "start": "2317240",
    "end": "2325690"
  },
  {
    "text": "to be true, except there was\nanother clause that forced x4 to be false.",
    "start": "2325690",
    "end": "2330950"
  },
  {
    "text": "And if there's one rule of\nBoolean algebra that everybody should know, is that you cannot\nhave a variable be true and be",
    "start": "2330950",
    "end": "2338090"
  },
  {
    "text": "false at the same time. Right? And so what that\ntells you is you've run into a contradiction.",
    "start": "2338090",
    "end": "2343690"
  },
  {
    "text": "You clearly did\nsomething wrong in one of these random assignments\nthat you were trying. So now let's analyze\nthis contradiction.",
    "start": "2343690",
    "end": "2350680"
  },
  {
    "text": "Let's figure out what\nwere the assignments that led to this contradiction.",
    "start": "2350680",
    "end": "2356790"
  },
  {
    "text": "And based on the assignments\nthat led to that contradiction, let's come up with a\nnew conflict clause that",
    "start": "2356790",
    "end": "2365010"
  },
  {
    "text": "summarizes that contradiction. So in this case,\nwhat would happen",
    "start": "2365010",
    "end": "2371170"
  },
  {
    "text": "is that you have x1 being\nfalse, and x5 being false.",
    "start": "2371170",
    "end": "2378180"
  },
  {
    "text": "And x9 being false, right? So essentially what this is\nsaying is that based on what I",
    "start": "2378180",
    "end": "2384529"
  },
  {
    "text": "learned from these random\nassignments I discovered that one of these things\nhas to be true,",
    "start": "2384530",
    "end": "2389560"
  },
  {
    "text": "that it cannot be the case that\nx1 is true, and x5 is true, and x9 is false.",
    "start": "2389560",
    "end": "2395990"
  },
  {
    "text": "That cannot happen. And I know that cannot happen\nbecause when I tried that things blew up. I ended up with a contradiction.",
    "start": "2395990",
    "end": "2403050"
  },
  {
    "text": "And so what SAT solver is doing\nis trying random assignments, propagating them through. When it runs into\ncontradictions it's",
    "start": "2403050",
    "end": "2409630"
  },
  {
    "text": "analyzing the set\nof implications that led to that contradiction. And summarising that in\na new constraint that",
    "start": "2409630",
    "end": "2417690"
  },
  {
    "text": "will make sure\nthat it never runs into this contradiction\nagain, that it never runs into this\nparticular problem again.",
    "start": "2417690",
    "end": "2425574"
  },
  {
    "text": "Other questions? ",
    "start": "2425574",
    "end": "2434960"
  },
  {
    "text": "OK. So so far so good. So we can't really\nthink of the SAT solver",
    "start": "2434960",
    "end": "2440040"
  },
  {
    "text": "as just a black box that\ngiven a Boolean constraint it can either say, no,\nthis Boolean constraint is",
    "start": "2440040",
    "end": "2447380"
  },
  {
    "text": "unsatisfiable, or it\ncan say, yeah, here's a satisfying assignment to\nthat Boolean constraint.",
    "start": "2447380",
    "end": "2453269"
  },
  {
    "text": "So SMT solvers are built\non top of SAT solvers. And what they're\nable to do is they're",
    "start": "2453270",
    "end": "2458720"
  },
  {
    "text": "able to combine the\npower of the SAT solver to solve these NP-complete\nSAT problems with domain",
    "start": "2458720",
    "end": "2468130"
  },
  {
    "text": "specific reasoning to reason\nabout the different theories that are supported. So to give you an\nidea of how it works,",
    "start": "2468130",
    "end": "2475460"
  },
  {
    "text": "and this is going to\nbe a fairly high level, but to give you\nan idea of how it works let's say that you have\na formula like this, right?",
    "start": "2475460",
    "end": "2482000"
  },
  {
    "text": "So you say x is greater\nthan 5 and y is less than 5. ",
    "start": "2482000",
    "end": "2488890"
  },
  {
    "text": "And either y is greater than\nx or y is greater than 2. Right?",
    "start": "2488890",
    "end": "2494290"
  },
  {
    "text": "So is that satisfiable? Can we find a satisfying\nassignment for that?",
    "start": "2494290",
    "end": "2499490"
  },
  {
    "text": "So what an SMT solver can\ndo is separate out the part",
    "start": "2499490",
    "end": "2506940"
  },
  {
    "text": "of this formula that requires\ndomain reasoning, that requires reasoning in\nthe theory, in this case,",
    "start": "2506940",
    "end": "2512930"
  },
  {
    "text": "of integers. With the part of\nthis formula that is just the Boolean structure. So if you separate the\nBoolean structure here,",
    "start": "2512930",
    "end": "2521616"
  },
  {
    "text": "essentially what\nyou're saying is that there's some formula,\nF1 and some formula F2,",
    "start": "2521616",
    "end": "2529034"
  },
  {
    "text": "and either F3 or F4. Right? And now this is a purely\nBoolean problem, right?",
    "start": "2529034",
    "end": "2535740"
  },
  {
    "text": "It's just a problem of\ncan I find a satisfying assignment for that?",
    "start": "2535740",
    "end": "2542110"
  },
  {
    "text": "Is there a satisfying\nassignment for that? And, again, this is\njust a Boolean formula. Goes to a SAT solver and the\nSAT solver can say, yeah.",
    "start": "2542110",
    "end": "2550385"
  },
  {
    "text": " I can find a satisfying\nassignment for this.",
    "start": "2550385",
    "end": "2556010"
  },
  {
    "text": "And I can find a\nsatisfying assignment by making this true, and\nthis true, and this true.",
    "start": "2556010",
    "end": "2563740"
  },
  {
    "text": "Right? It's a satisfying assignment\nfor the Boolean formula. So now we have a question\nthat we can go and ask",
    "start": "2563740",
    "end": "2572670"
  },
  {
    "text": "the domain specific solver. In this case just a\nlinear arithmetic solver.",
    "start": "2572670",
    "end": "2579700"
  },
  {
    "text": "So we can go to\nthe linear solver and say, hey, so the\nSAT solver claims that this is a reasonable\nassignment, that if I",
    "start": "2579700",
    "end": "2586990"
  },
  {
    "text": "can make that\nassignment work, then my formula will be satisfied. So I can go and say, well F1 was\nactually this, and F2 was this,",
    "start": "2586990",
    "end": "2597160"
  },
  {
    "text": "and F3 was this. So I can ask a theory solver, is\nit possible to get an x and a y",
    "start": "2597160",
    "end": "2602290"
  },
  {
    "text": "such that x is greater\nthan 5, y is less than 5, and y is greater than x?",
    "start": "2602290",
    "end": "2608200"
  },
  {
    "text": "Right, so now this is a question\npurely about linear arithmetic. There's no Boolean\nlogic involved.",
    "start": "2608200",
    "end": "2616484"
  },
  {
    "text": "And what's the answer?  No. Right? And there are\ntraditional methods",
    "start": "2616484",
    "end": "2624210"
  },
  {
    "text": "to solve these kinds\nof your problems. You could use the simplex\nmethod, for example,",
    "start": "2624210",
    "end": "2630730"
  },
  {
    "text": "to solve systems of\nlinear inequalities. There's lots of\nmethods that you can use to solve systems\nof linear inequalities.",
    "start": "2630730",
    "end": "2637530"
  },
  {
    "text": "The point is the theory solver\nknows about all of those. And the theory\nsolver can say, no.",
    "start": "2637530",
    "end": "2643630"
  },
  {
    "text": "This will not work. This is an assignment\nthat will not work. And so the theory solver can\nnow go back to the SAT solver",
    "start": "2643630",
    "end": "2653510"
  },
  {
    "text": "and not just tell the SAT\nsolver, hey, that thing that you did, that didn't work. But it can also give\nmore of an explanation.",
    "start": "2653510",
    "end": "2660920"
  },
  {
    "text": "So in this case, what you can\nconclude from the fact that this didn't work is that\nactually in addition",
    "start": "2660920",
    "end": "2666880"
  },
  {
    "text": "to satisfying this formula you\nalso want to satisfy the fact that I cannot have F1,\nand F2, and F3, right?",
    "start": "2666880",
    "end": "2680500"
  },
  {
    "text": "My theory solver has\ntold me that these three things are mutually exclusive. I cannot satisfy all\nthree of them together.",
    "start": "2680500",
    "end": "2687890"
  },
  {
    "text": "And so now that's a\npiece of information that I can go back\nto the SAT solver and ask the SAT\nsolver, hey, can you",
    "start": "2687890",
    "end": "2694320"
  },
  {
    "text": "give me a solution\nthat satisfies not only the constraint that\nyou had in the beginning,",
    "start": "2694320",
    "end": "2699440"
  },
  {
    "text": "but also this new\nconstraint that the theory solver discovered?",
    "start": "2699440",
    "end": "2705090"
  },
  {
    "text": "Right? So now is there some other\nassignment that satisfies now both of these constraints?",
    "start": "2705091",
    "end": "2710670"
  },
  {
    "start": "2710670",
    "end": "2718950"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. ARMANDO SOLAR-LEZAMA: Yeah. So there's an assignment\nwhere this becomes false.",
    "start": "2718950",
    "end": "2725870"
  },
  {
    "text": "And this becomes true. And that's an assignment\nthat satisfies the constraint on the top. It satisfies the\nconstraint on the bottom.",
    "start": "2725870",
    "end": "2732250"
  },
  {
    "text": "And so once again\nthat's an assignment that leads to a new constraint.",
    "start": "2732250",
    "end": "2737856"
  },
  {
    "text": "So this constraint\nnow goes away. We don't care about it any more. We have a new constraint that we\ncan ask our theory solver, hey,",
    "start": "2737856",
    "end": "2744789"
  },
  {
    "text": "it this possible? And in this case the\ntheory solver says, yeah. That actually is possible.",
    "start": "2744790",
    "end": "2750310"
  },
  {
    "text": "You can make y equal\n3 and x equal 6.",
    "start": "2750310",
    "end": "2757630"
  },
  {
    "text": "And it works. Right? And so now you\nhave an assignment",
    "start": "2757630",
    "end": "2762820"
  },
  {
    "text": "that satisfies the\nformula in the theory and that satisfies\nthe Boolean structure",
    "start": "2762820",
    "end": "2771127"
  },
  {
    "text": "behind this assignment. And with that the system can\ncome back and tell you, yeah. Here's an assignment that\nsatisfies all your constraints.",
    "start": "2771127",
    "end": "2779660"
  },
  {
    "text": "And so it's this\ninteraction back and forth between the theory solver\nand the SAT solver.",
    "start": "2779660",
    "end": "2785660"
  },
  {
    "text": "And really the ability\nto be able to reason about very, very large and very\ncomplicated Boolean formulas.",
    "start": "2785660",
    "end": "2791440"
  },
  {
    "text": "That's what makes symbolic\nexecution possible.",
    "start": "2791440",
    "end": "2796990"
  },
  {
    "text": "So now that we have that\nthe next question is, so how do we go from a\nprogram to a constraint",
    "start": "2796990",
    "end": "2812619"
  },
  {
    "text": "that we can give\nto an SMT solver? Yes? AUDIENCE: Sorry for going back. ARMANDO SOLAR-LEZAMA: Sure. AUDIENCE: [INAUDIBLE]\npreviously.",
    "start": "2812620",
    "end": "2818622"
  },
  {
    "text": "But could you run me again the\nwhole issue of constructing",
    "start": "2818622",
    "end": "2825608"
  },
  {
    "text": "the SMT statements? Is it an NP-complete or\nis it not? [INAUDIBLE].",
    "start": "2825608",
    "end": "2830619"
  },
  {
    "text": "ARMANDO SOLAR-LEZAMA:\nSo the problems that the SMT\nsolvers are solving, those are NP-complete\nproblems in the best of cases.",
    "start": "2830620",
    "end": "2840180"
  },
  {
    "text": "So SAT itself is the\ncanonical NP-complete problem, but a lot of solvers these\ndays even include support",
    "start": "2840180",
    "end": "2848630"
  },
  {
    "text": "for some theories that\nare outright undecidable.",
    "start": "2848630",
    "end": "2854589"
  },
  {
    "text": "So-- AUDIENCE: So how do you\napproach that in your system? ARMANDO SOLAR-LEZAMA: Well, at\nthe end of the day what you get",
    "start": "2854590",
    "end": "2862840"
  },
  {
    "text": "is you're going to create a\nconstraint from this program.",
    "start": "2862840",
    "end": "2868590"
  },
  {
    "text": "You're going to give\nit to the SMT solver. And the fact that these\nare NP-complete problems,",
    "start": "2868590",
    "end": "2874119"
  },
  {
    "text": "or the fact that they're\nunsatisfiable, what it means is that if you're lucky, you\nwill get an answer in seconds.",
    "start": "2874120",
    "end": "2883569"
  },
  {
    "text": "And if you're not\nlucky, then it might take longer than the age of\nthe universe for the thing",
    "start": "2883570",
    "end": "2889670"
  },
  {
    "text": "to give you an answer. AUDIENCE: OK. How often do you run into\ncases where your system just",
    "start": "2889670",
    "end": "2894841"
  },
  {
    "text": "flat-lines and says, sorry, I\njust can't figure this out yet? Has that ever happened\nor is that just--",
    "start": "2894841",
    "end": "2900560"
  },
  {
    "text": "ARMANDO SOLAR-LEZAMA: Yes. Yes, it does happen. And a big part of\nthe engineering of these kind of\ntools is making sure",
    "start": "2900560",
    "end": "2907340"
  },
  {
    "text": "that this happens as\ninfrequently as possible. And part what makes\nthis work at all",
    "start": "2907340",
    "end": "2915890"
  },
  {
    "text": "is that we're not solving\nrandom SAT problems. We're not solving completely\nrandom bit-vector problems.",
    "start": "2915890",
    "end": "2924450"
  },
  {
    "text": "We're solving problems that\nhave a certain structure to them that a person was\nable to look at it",
    "start": "2924450",
    "end": "2930760"
  },
  {
    "text": "and least have some confidence\nthat this worked, right? Build some argument in their\nhead for why this worked.",
    "start": "2930760",
    "end": "2937070"
  },
  {
    "text": "And so what the solvers\nare trying to do is essentially exploiting\nthat structure.",
    "start": "2937070",
    "end": "2942640"
  },
  {
    "text": "And taking advantage, for\nexample, the description that I gave you of what the\nSAT solver is doing internally,",
    "start": "2942640",
    "end": "2948194"
  },
  {
    "text": "that's taking advantage\nof the fact that, yes. Your problem might have a\nmillion Boolean variables,",
    "start": "2948194",
    "end": "2953390"
  },
  {
    "text": "but actually most\nof those variables are very tightly dependent\non the values of each other.",
    "start": "2953390",
    "end": "2958430"
  },
  {
    "text": "So the number of degrees\nof freedom in the problem is actually much smaller\nthan what the million",
    "start": "2958430",
    "end": "2963730"
  },
  {
    "text": "variables would suggest. AUDIENCE: So you're saying\nis that this isn't an exam question. This is real life. And someone built this system.",
    "start": "2963730",
    "end": "2969475"
  },
  {
    "text": "It was supposed to\nwork and make sense. So it's probably\nnot going to be one of those wildly bizarre\ntheoretical [INAUDIBLE]. ARMANDO SOLAR-LEZAMA:\nThat's right.",
    "start": "2969476",
    "end": "2975750"
  },
  {
    "text": " And in practice what\nhappens and when",
    "start": "2975750",
    "end": "2980760"
  },
  {
    "text": "you use this tool is the\nthing is you always do is set timeouts. So generally, what happens\nis because it's exponential,",
    "start": "2980760",
    "end": "2989864"
  },
  {
    "text": "exponential doesn't mean\nthat you can't do it. Exponential just means\nthat there's a brick wall, that before that brick\nwall things will work,",
    "start": "2989864",
    "end": "2997700"
  },
  {
    "text": "and in fact, they\nwill work really fast. Right? The exponential\nworks in both ways. Yes, when you're\ngoing out then things",
    "start": "2997700",
    "end": "3004480"
  },
  {
    "text": "are growing very\nquickly, but when you're going toward smaller\nproblems, or simpler problems",
    "start": "3004480",
    "end": "3009980"
  },
  {
    "text": "things are also getting\nfaster very, very quickly. So in general what that means\nis that lots of problems",
    "start": "3009980",
    "end": "3017119"
  },
  {
    "text": "finish very, very quickly. And then some problems timeout. And the key is to engineer\nthings in such a way",
    "start": "3017120",
    "end": "3024630"
  },
  {
    "text": "that among the problems that\nfinish quickly are actually problems of practical use.",
    "start": "3024630",
    "end": "3030960"
  },
  {
    "text": "Or problems that will\nactually point you to security vulnerabilities\nin your system, will point you to bugs,\nwill point you to a path",
    "start": "3030960",
    "end": "3039560"
  },
  {
    "text": "that you maybe haven't\nexplored before, or inputs that will take\nyou down paths that you hadn't explored before.",
    "start": "3039560",
    "end": "3045432"
  },
  {
    "text": "AUDIENCE: Thanks. ARMANDO SOLAR-LEZAMA:\nOther questions? ",
    "start": "3045432",
    "end": "3052550"
  },
  {
    "text": "All right. So we know how to\ngo from a formula,",
    "start": "3052550",
    "end": "3057750"
  },
  {
    "text": "from a set of constraints, to\nan answer that will either say, yes, this formula\nhas a solution.",
    "start": "3057750",
    "end": "3063170"
  },
  {
    "text": "And here's a solution, or no,\nthis formula is unsatisfiable. There is no input\nthat satisfies this.",
    "start": "3063170",
    "end": "3070950"
  },
  {
    "text": "So now how do we get a\nformula from a program? So one of the\nthings that you have",
    "start": "3070950",
    "end": "3078970"
  },
  {
    "text": "when you're doing\nsymbolic execution is that when you get\nto a branch and you don't know which direction\nthe branch is going to go.",
    "start": "3078970",
    "end": "3086599"
  },
  {
    "text": "Now there are two possibilities\nthat you can do in that case. One is to do what we did in the\nearly example, which is just",
    "start": "3086600",
    "end": "3095039"
  },
  {
    "text": "to say, I'm going to take both\nbranches at the same time. I'm going to collect what\nhappens in mode's branches,",
    "start": "3095040",
    "end": "3100790"
  },
  {
    "text": "merge at the end. That is a strategy\nthat is often used",
    "start": "3100790",
    "end": "3106100"
  },
  {
    "text": "when you're trying to get very\nstrong guarantees in general. But it's a strategy that\ndoesn't work too well",
    "start": "3106100",
    "end": "3114080"
  },
  {
    "text": "with modern and SMT solvers. So often people prefer to do\none path at a time exploration.",
    "start": "3114080",
    "end": "3122674"
  },
  {
    "text": "And what that means\nis that you're going to pick a path\ndown your program. And then you're going to\ncreate a formula for that path.",
    "start": "3122674",
    "end": "3130420"
  },
  {
    "text": "So you're going to ask, fine\nme an input that goes down this path and that\nsatisfies my constraint,",
    "start": "3130420",
    "end": "3138640"
  },
  {
    "text": "or that violates\nmy property, that goes out of bounds in my buffer,\nor that causes a null pointer",
    "start": "3138640",
    "end": "3146369"
  },
  {
    "text": "error. And then if you\ncan't find one then you try a different path\nand a different path.",
    "start": "3146370",
    "end": "3152020"
  },
  {
    "text": "And you do these path\nexplorations one at a time.",
    "start": "3152020",
    "end": "3158260"
  },
  {
    "text": "So that's the strategy that\nwe're going to talk about now. It's a little bit easier\nto describe how to do it.",
    "start": "3158260",
    "end": "3164900"
  },
  {
    "text": "So let's say that we\nhave a problem like this. So, by the way, I\nswitched representations.",
    "start": "3164900",
    "end": "3171690"
  },
  {
    "text": "So I'm not representing the\nprogram as a block of code and representing it as\na control flow graph.",
    "start": "3171690",
    "end": "3178220"
  },
  {
    "text": "Is everybody here familiar\nwith a control flow graph? Or is anybody here not familiar\nwith a control flow graph?",
    "start": "3178220",
    "end": "3183930"
  },
  {
    "text": "It's just a representation\nof a program that makes branches more explicit.",
    "start": "3183930",
    "end": "3188940"
  },
  {
    "text": "So let's pick a path.  And so let's say that we\ncare about this path, right,",
    "start": "3188940",
    "end": "3197609"
  },
  {
    "text": "a path that starts\nat the beginning and takes us all the way\ndown to the point where",
    "start": "3197610",
    "end": "3203310"
  },
  {
    "text": "we are asserting false. And we want to know,\nis this path feasible?",
    "start": "3203310",
    "end": "3209780"
  },
  {
    "text": "Could the program\ngo down this path? So as we're going\ndown this program",
    "start": "3209780",
    "end": "3215800"
  },
  {
    "text": "we're going to keep two things. ",
    "start": "3215800",
    "end": "3222069"
  },
  {
    "text": "We're going to keep\nan environment that keeps track of the\nsymbolic values of the different variables.",
    "start": "3222070",
    "end": "3228580"
  },
  {
    "text": "And in addition to that,\nwe're going to keep around an environment for constraints.",
    "start": "3228580",
    "end": "3234710"
  },
  {
    "start": "3234710",
    "end": "3244109"
  },
  {
    "text": "And these constraints\nare essentially going to keep track of\nall the relationships between these variables as\nwell as any assumptions,",
    "start": "3244109",
    "end": "3252000"
  },
  {
    "text": "whether they were\nassumptions that were made at the\nbeginning, or assumptions that come from the branches\nthat you are taking.",
    "start": "3252000",
    "end": "3258320"
  },
  {
    "text": "So in this case, when\nwe start down this path we get to t equals 0, so\nour state is x, y, and 0.",
    "start": "3258320",
    "end": "3269490"
  },
  {
    "text": "And so far we have\nno constraints because we didn't have any\nconstraint in the beginning.",
    "start": "3269490",
    "end": "3275290"
  },
  {
    "text": "So now we're going\nto take this branch and, again, because we've\nmade a decision that we're",
    "start": "3275290",
    "end": "3281390"
  },
  {
    "text": "going to go down the\npath to your right, then we know that this\npath will only happen when?",
    "start": "3281390",
    "end": "3291358"
  },
  {
    "start": "3291358",
    "end": "3296505"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. ARMANDO SOLAR-LEZAMA:\nThat's right. So we get our first constraint\nthat says, x is greater than y.",
    "start": "3296506",
    "end": "3304970"
  },
  {
    "text": "Right? So now down here we're\nlooking at t equals y.",
    "start": "3304970",
    "end": "3313410"
  },
  {
    "text": "Now in this case because we're\ngoing only one path at a time we don't actually need to\nintroduce a new variable for t",
    "start": "3313410",
    "end": "3319850"
  },
  {
    "text": "necessarily. We can just say, OK. t is equal to y. So that means that\nt is no longer 0.",
    "start": "3319850",
    "end": "3327640"
  },
  {
    "text": "It's now y. Right? And then keep going.",
    "start": "3327640",
    "end": "3332840"
  },
  {
    "text": "We get to this point. Now we hit another branch.",
    "start": "3332840",
    "end": "3337990"
  },
  {
    "text": "What's a new\nassumption that we have to make if we're assuming\nthat we went down this path? ",
    "start": "3337990",
    "end": "3349340"
  },
  {
    "text": "Just t less than y, right? And what is t? ",
    "start": "3349340",
    "end": "3356339"
  },
  {
    "text": "Right. So in fact if we look up\nt, so t has the value y. We look up y.",
    "start": "3356340",
    "end": "3361916"
  },
  {
    "text": "y also has the value of y. So this constraint actually\ntranslates to y less than y.",
    "start": "3361916",
    "end": "3369290"
  },
  {
    "text": "So what does this tell us? It tells us that in order\nto make it to this point,",
    "start": "3369290",
    "end": "3376750"
  },
  {
    "text": "in order to make it to a assert\nfalse, all of those things have to hold. Can they hold?",
    "start": "3376750",
    "end": "3382730"
  },
  {
    "text": "Clearly not. Right? y less than y alone is\nalready sufficient for things",
    "start": "3382730",
    "end": "3388349"
  },
  {
    "text": "not to hold. And so that tells us immediately\nthat this is unsatisfiable.",
    "start": "3388350",
    "end": "3395980"
  },
  {
    "text": "And this is often known\nas a path condition. This is a condition\nthat has to be",
    "start": "3395980",
    "end": "3402030"
  },
  {
    "text": "true in order for the\nprogram to go down that path. And so we know that this path\ncondition cannot be satisfied.",
    "start": "3402030",
    "end": "3411630"
  },
  {
    "text": "And therefore, that it's\nimpossible for the program to take this path. So this path is now\ncompletely eliminated.",
    "start": "3411630",
    "end": "3421480"
  },
  {
    "text": "We know that this\npath cannot be taken. And, in fact, so\nthis constraint we're",
    "start": "3421480",
    "end": "3428640"
  },
  {
    "text": "actually going to just keep them\naround as the condition itself.",
    "start": "3428640",
    "end": "3433650"
  },
  {
    "text": "All right? So what about a different path? So now we're trying this path.",
    "start": "3433650",
    "end": "3441840"
  },
  {
    "text": " So what would be the\npath condition for this?",
    "start": "3441840",
    "end": "3449140"
  },
  {
    "text": "So, again, our symbolic\nstate starts with t equals 0,",
    "start": "3449140",
    "end": "3455920"
  },
  {
    "text": "and x and y equals to just\nthe variables x and y. And now how does\nthe path constraint",
    "start": "3455920",
    "end": "3463060"
  },
  {
    "text": "look like in this case? So by the time we get here how\ndoes the path condition look",
    "start": "3463060",
    "end": "3468115"
  },
  {
    "text": "like?  AUDIENCE: [INAUDIBLE]. ",
    "start": "3468115",
    "end": "3473817"
  },
  {
    "text": "ARMANDO SOLAR LEZAMA: Right. So in this case [INAUDIBLE]\nthis is true and this is false.",
    "start": "3473818",
    "end": "3479859"
  },
  {
    "text": "So in this case it says,\nOK. x is greater than y. ",
    "start": "3479860",
    "end": "3486010"
  },
  {
    "text": "And we are setting\nt to be equal to x. So then when we get here\nwe have x is less than y.",
    "start": "3486010",
    "end": "3501289"
  },
  {
    "text": "Right? And once again it's very\nclear that this path condition is unsatisfiable.",
    "start": "3501290",
    "end": "3506940"
  },
  {
    "text": "Right? We cannot have x greater than\ny and x less than y at the same time. There's no assignment\nto x that will satisfy",
    "start": "3506940",
    "end": "3513970"
  },
  {
    "text": "both of those constraints. So what that tells us is, again,\nthat this other path is also unsatisfiable.",
    "start": "3513970",
    "end": "3520030"
  },
  {
    "text": "And now at this\npoint we've actually explored every possible path in\nour program that could lead us",
    "start": "3520030",
    "end": "3526280"
  },
  {
    "text": "to this condition. So we can actually\nestablish and certify that there is no possible path\nthat will lead to an assertion",
    "start": "3526280",
    "end": "3536890"
  },
  {
    "text": "failure. Yes? AUDIENCE: The way you\njust presented it, it makes it look as if you would\nexplore every possible branch.",
    "start": "3536890",
    "end": "3543995"
  },
  {
    "text": "I mean, one of the advantages\nof symbolic execution is that you're trying\nto prevent [INAUDIBLE] a need of exploring all possible\n[INAUDIBLE] exponential.",
    "start": "3543995",
    "end": "3551730"
  },
  {
    "text": "So how are you avoiding\nthat over here? ARMANDO SOLAR-LEZAMA: That's\na very good question, right? So in this case essentially\nwhat you have is",
    "start": "3551730",
    "end": "3558080"
  },
  {
    "text": "you have a trade off between\nhigh symbolic and how concrete you want to be. Right? So in this case we are not\nas symbolic as the first time",
    "start": "3558080",
    "end": "3566990"
  },
  {
    "text": "around when we were visiting\nboth branches at the same time, but in exchange for that our\nconstraints became very, very",
    "start": "3566990",
    "end": "3574460"
  },
  {
    "text": "simple. Right? So the individual path by path\nconstraints are very simple, but you have to do this over,\nand over, and over again",
    "start": "3574460",
    "end": "3582050"
  },
  {
    "text": "to explore all the\ndifferent branches. And there are exponentially--\nall the different paths. And there are exponentially\nmany paths in a program.",
    "start": "3582050",
    "end": "3590579"
  },
  {
    "text": "Now there are\nexponentially many paths, but for every path\nin general, there's also an exponentially\nlarge set of inputs",
    "start": "3590580",
    "end": "3598580"
  },
  {
    "text": "that could go down that path. So this already gives you a\nbig benefit because instead of having to try every\npossible input you're only",
    "start": "3598580",
    "end": "3605220"
  },
  {
    "text": "trying every possible path. But can you do better?",
    "start": "3605220",
    "end": "3610430"
  },
  {
    "text": "And this is one of the\nareas where there's been a lot of experimentation in\nthe area of symbolic execution.",
    "start": "3610430",
    "end": "3619040"
  },
  {
    "text": "When you do path\nby path reasoning? When do you do all\npaths at the same time?",
    "start": "3619040",
    "end": "3626180"
  },
  {
    "text": "And one of the things\nthat you saw, for example, in the [? Clee ?] paper\nis a set of heuristics,",
    "start": "3626180",
    "end": "3631750"
  },
  {
    "text": "and a set of\nstrategies they used to make the search tractable. For example, one of\nthe things that they do",
    "start": "3631750",
    "end": "3637530"
  },
  {
    "text": "is that they are\nexploring path by path, but they're not exploring\ncompletely blindly.",
    "start": "3637530",
    "end": "3643299"
  },
  {
    "text": "And they are also checking\nthe path conditions after every step.",
    "start": "3643300",
    "end": "3649670"
  },
  {
    "text": "So that, for example,\nif here instead of just assert false, if this were\na very complex program tree,",
    "start": "3649670",
    "end": "3662109"
  },
  {
    "text": "control flow graph. You don't wait until\nyou get to the very end",
    "start": "3662110",
    "end": "3667859"
  },
  {
    "text": "to check whether the\npath is feasible. The moment you get here you know\nthat this path is unsatisfiable",
    "start": "3667860",
    "end": "3673870"
  },
  {
    "text": "and you never go\ndown this direction. You always go in\nthe other direction.",
    "start": "3673870",
    "end": "3678950"
  },
  {
    "text": "So pruning the paths\nearly helps cut down a lot",
    "start": "3678950",
    "end": "3684670"
  },
  {
    "text": "on the experiential blow up. And exploring the\npaths intelligently helps a lot in\npreventing blow up.",
    "start": "3684670",
    "end": "3692510"
  },
  {
    "text": "A lot of the practical\ntools that are used today, some of the things\nthat they will do is they will actually start\nwith some random testing",
    "start": "3692510",
    "end": "3699710"
  },
  {
    "text": "to get an initial set of paths. And then they will start looking\nfor paths in the neighborhood",
    "start": "3699710",
    "end": "3705660"
  },
  {
    "text": "of those paths. They will start asking questions\nlike, hey, the random execution went down this branch.",
    "start": "3705660",
    "end": "3711430"
  },
  {
    "text": "What if I flip this branch? What if I flip this branch? What if I flip this branch? What happens in those paths?",
    "start": "3711430",
    "end": "3717780"
  },
  {
    "text": "Can be particularly\nuseful, for example, if we have a good test suite. And you run your test suite\nand you find, OK, there",
    "start": "3717780",
    "end": "3724220"
  },
  {
    "text": "is this piece of code that\nnothing in my test suite exercised. So what you can do is you can\ntake the path that got closest",
    "start": "3724220",
    "end": "3732599"
  },
  {
    "text": "to exercising that,\nand then ask, hey, can I change this path so that\nit goes down this direction",
    "start": "3732600",
    "end": "3739630"
  },
  {
    "text": "instead? And so in general,\nthe moment you",
    "start": "3739630",
    "end": "3745970"
  },
  {
    "text": "try to do all paths\nsimultaneously the constraints start\nbecoming intractable.",
    "start": "3745970",
    "end": "3751420"
  },
  {
    "text": "And it's the kind\nof thing that you can do if you're doing\none function at a time.",
    "start": "3751420",
    "end": "3757250"
  },
  {
    "text": "For example, if you're\ndoing one function at a time then it is generally feasible\nto explore all the paths in a function together.",
    "start": "3757250",
    "end": "3763789"
  },
  {
    "text": "If you're trying to do\nlarger units, then generally you have to go with path\nby path exploration.",
    "start": "3763790",
    "end": "3770105"
  },
  {
    "text": " Are there other questions? ",
    "start": "3770105",
    "end": "3776880"
  },
  {
    "text": "Yes? AUDIENCE: You referenced\nhow [INAUDIBLE]. How does it do that again?",
    "start": "3776880",
    "end": "3782250"
  },
  {
    "text": "What's the [INAUDIBLE]? ARMANDO SOLAR-LEZAMA: So the\nmost important one really is",
    "start": "3782250",
    "end": "3788140"
  },
  {
    "text": "this idea that for every branch,\nyou check your constraints",
    "start": "3788140",
    "end": "3793599"
  },
  {
    "text": "to check whether that branch\ncan actually go both ways, because if it cannot go both\nways then you save a lot just",
    "start": "3793600",
    "end": "3803670"
  },
  {
    "text": "going in this direction\nof where it can't go. Beyond that I don't remember\nthe specific strategy",
    "start": "3803670",
    "end": "3808779"
  },
  {
    "text": "that they use for searching\npaths that are more likely to give good results.",
    "start": "3808780",
    "end": "3814570"
  },
  {
    "text": " But pruning is really,\nreally important.",
    "start": "3814570",
    "end": "3819580"
  },
  {
    "text": " OK.",
    "start": "3819580",
    "end": "3824930"
  },
  {
    "text": "So far though we've been\ntalking mostly about toy code in the sense that it's only\ninteger variables, branches,",
    "start": "3824930",
    "end": "3833360"
  },
  {
    "text": "very simple stuff. Right? What happens when you\nhave a program that",
    "start": "3833360",
    "end": "3839089"
  },
  {
    "text": "is more complicated? And in particular, what happens\nwhen you have a program that",
    "start": "3839090",
    "end": "3845790"
  },
  {
    "text": "involves the heap? Right? So the heap has\nhistorically been",
    "start": "3845790",
    "end": "3851580"
  },
  {
    "text": "the bane of all program\nanalysis, analysis that were so clean and so\nelegant in the days of Fortran,",
    "start": "3851580",
    "end": "3858180"
  },
  {
    "text": "completely blow up when you\ntry to run them on a C program where you're allocating\nmemory left and right.",
    "start": "3858180",
    "end": "3863410"
  },
  {
    "text": "And you have aliasing. And you have all\nthe messiness that",
    "start": "3863410",
    "end": "3868680"
  },
  {
    "text": "comes with dealing with\nprogram allocated memory. And with pointers and\npointer arithmetic.",
    "start": "3868680",
    "end": "3874660"
  },
  {
    "text": "And this is one of the areas\nwhere symbolic execution really shines in the ability\nto actually reason",
    "start": "3874660",
    "end": "3879840"
  },
  {
    "text": "about these kinds of programs. So how do we do it? Right, so let's forget now\nfor a moment about branches,",
    "start": "3879840",
    "end": "3887640"
  },
  {
    "text": "and control flow. We have a trivially\nsimple program here.",
    "start": "3887640",
    "end": "3893080"
  },
  {
    "text": "All it's doing is it's\nallocating some memory. It's zeroing it out.",
    "start": "3893080",
    "end": "3898089"
  },
  {
    "text": "It's getting a new pointer\ny from the pointer x. It's writing something into y.",
    "start": "3898090",
    "end": "3904380"
  },
  {
    "text": "And then it's checking,\nhey, is the value stored at pointer y equal to\nthe value stored at pointer x?",
    "start": "3904380",
    "end": "3912069"
  },
  {
    "text": "And just from your\nbasic knowledge of C you could see that, no. Right, that this assertion is\nactually violated because x got",
    "start": "3912070",
    "end": "3922080"
  },
  {
    "text": "zeroed out and y\nhas 25 in there, but x is pointing to\na different location.",
    "start": "3922081",
    "end": "3930210"
  },
  {
    "text": "Right? So far so good. The way we're going to\nmodel the heap and the way",
    "start": "3930210",
    "end": "3937570"
  },
  {
    "text": "the heap is modeled in\na lot of these systems is by not thinking of\nthe heap as a heap,",
    "start": "3937570",
    "end": "3945069"
  },
  {
    "text": "but to thinking of\nthe heat the way C likes for you to think\nof the heap, which is just",
    "start": "3945070",
    "end": "3951839"
  },
  {
    "text": "a giant address base, a giant\narray where you can put things",
    "start": "3951840",
    "end": "3957500"
  },
  {
    "text": "into. So what does that mean? It means that we can\nthink of our program",
    "start": "3957500",
    "end": "3963340"
  },
  {
    "text": "as having this very\nbig global array. And we're just going\nto call it MEM for now.",
    "start": "3963340",
    "end": "3970980"
  },
  {
    "text": "Right? And it's an array that\nessentially is going to map addresses to values.",
    "start": "3970980",
    "end": "3977630"
  },
  {
    "text": "Right? And what's an address? Well, an address is\njust a 64-bit value.",
    "start": "3977630",
    "end": "3985710"
  },
  {
    "text": "And what comes after you read\nsomething from an address? It depends on how\nyou're modeling memory.",
    "start": "3985710",
    "end": "3991750"
  },
  {
    "text": "If you're modeling it at the\nbyte level, then what comes out is a byte.",
    "start": "3991750",
    "end": "3997960"
  },
  {
    "text": "If you're modeling it\nat the word level then what comes out of it is a word. And depending on the kind of\nbugs that you're interested in,",
    "start": "3997960",
    "end": "4005490"
  },
  {
    "text": "and whether things\nlike memory alignment are an issue for\nyou are not, you're going to model it a\nlittle bit differently,",
    "start": "4005490",
    "end": "4011441"
  },
  {
    "text": "but generally memory\nis just an array from an address to a value.",
    "start": "4011441",
    "end": "4020030"
  },
  {
    "text": "Right? So an address is\njust an integer.",
    "start": "4020030",
    "end": "4027260"
  },
  {
    "text": "Right? It's in some sense not\nthat different from the way C thinks I'm an address. It's just an integer.",
    "start": "4027260",
    "end": "4032870"
  },
  {
    "text": "It's just a value. It's just a 64-bit integer,\nor a 32-bit integer,",
    "start": "4032870",
    "end": "4038740"
  },
  {
    "text": "depending on your machine. It just a value that\nindexes into that memory. And that you can put\nthings in memory,",
    "start": "4038740",
    "end": "4044990"
  },
  {
    "text": "read them from the memory. So things like\npointer arithmetic",
    "start": "4044990",
    "end": "4050860"
  },
  {
    "text": "just becomes integer arithmetic. In practice there's a\nlittle bit of desugaring that has to happen because in C\nthe pointer arithmetic actually",
    "start": "4050860",
    "end": "4063020"
  },
  {
    "text": "knows about the types\nof the pointers. And things will be incremented\nproportional to the size,",
    "start": "4063020",
    "end": "4070030"
  },
  {
    "text": "right? So this would actually be x\nplus 10 times the size of int.",
    "start": "4070030",
    "end": "4080100"
  },
  {
    "text": "Right? But what's really\nimportant is what happens when you're reading\nand writing from memory.",
    "start": "4080100",
    "end": "4086609"
  },
  {
    "text": "So what used to be just a\npointer reference from y to write 25, is now just\nI'm taking my memory array,",
    "start": "4086610",
    "end": "4097109"
  },
  {
    "text": "and I'm indexing it with y. And I'm writing 25 to\nthat memory location.",
    "start": "4097109",
    "end": "4104589"
  },
  {
    "text": "Right? And this assertion\nnow becomes, well, I am reading from\nlocation y in memory.",
    "start": "4104590",
    "end": "4112430"
  },
  {
    "text": "And I am reading from\nlocation x in memory. And I am comparing them. And I'm checking whether\nthey are the same or not.",
    "start": "4112430",
    "end": "4120009"
  },
  {
    "text": "It's a very, very\nsimple reduction to go from program that uses the\nheap to a program the just uses",
    "start": "4120010",
    "end": "4126880"
  },
  {
    "text": "this giant global array\nthat represents the memory. And now what that\nmeans is that in order",
    "start": "4126880",
    "end": "4133649"
  },
  {
    "text": "to reason about programs\nthat manipulate the heap you don't really have\nto reason about programs that manipulate the heap.",
    "start": "4133649",
    "end": "4138721"
  },
  {
    "text": "As long as you have the\nability to reason about arrays, you are good. Now here's a simple\nquestion though.",
    "start": "4138721",
    "end": "4144699"
  },
  {
    "text": "What about the malloc? So one thing you can do is\nyou can say, well, malloc,",
    "start": "4144700",
    "end": "4151479"
  },
  {
    "text": "I can just take the C\nimplementation of malloc and actually implement\nmalloc like that.",
    "start": "4151479",
    "end": "4158130"
  },
  {
    "text": "And keep track of all the\npages that I have allocated and keep track of everything\nthat has been freed.",
    "start": "4158130",
    "end": "4166949"
  },
  {
    "text": "And keep a free\nlist, and everything. It turns out for\na lot of purposes and for a lot of\nclasses of bugs,",
    "start": "4166950",
    "end": "4173310"
  },
  {
    "text": "you don't need malloc\nto be that complicated. In fact, you can get away with\na malloc that looks like this,",
    "start": "4173310",
    "end": "4179528"
  },
  {
    "text": "with a malloc that\njust says, I'm going to keep a counter for\nthe next free memory location.",
    "start": "4179529",
    "end": "4189330"
  },
  {
    "text": "And whenever somebody\nasks for an address,",
    "start": "4189330",
    "end": "4195560"
  },
  {
    "text": "that address I'm just\ngoing to give this position and then increment the position. Right? ",
    "start": "4195560",
    "end": "4202920"
  },
  {
    "text": "And then return\nrv, in this case. ",
    "start": "4202920",
    "end": "4211626"
  },
  {
    "text": "So one of the thing that is\nmalloc is completely ignoring. ",
    "start": "4211626",
    "end": "4217754"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. ARMANDO SOLAR-LEZAMA: Yeah. Freeing, right? This malloc says, yeah,\nforget about freeing. There's no freeing. We're just going to keep walking\nthrough our memory allocating",
    "start": "4217754",
    "end": "4226650"
  },
  {
    "text": "further, and further, and\nfurther and that will be it. And we don't care\nabout freeing anything.",
    "start": "4226650",
    "end": "4234770"
  },
  {
    "text": "It also doesn't really\ncare about the fact that well, actually, there\nare regions of memory where you shouldn't be writing.",
    "start": "4234770",
    "end": "4240800"
  },
  {
    "text": "There are special\naddresses that have special meaning that are\nreserved for the operating system. It doesn't model\nany of the things",
    "start": "4240800",
    "end": "4247560"
  },
  {
    "text": "that actually make writing a\nmalloc function complicated, but at a certain\nlevel of abstraction,",
    "start": "4247560",
    "end": "4254380"
  },
  {
    "text": "if you're trying to reason\nabout some complicated code that does pointer manipulation.",
    "start": "4254380",
    "end": "4259520"
  },
  {
    "text": "And you don't care\nabout freeing memory, but you really\ncare about is, am I",
    "start": "4259520",
    "end": "4264600"
  },
  {
    "text": "going to write past the end\nof some buffer, for example. Then this malloc\nmight be good enough.",
    "start": "4264600",
    "end": "4270641"
  },
  {
    "text": "And this is actually that\nhappens very, very commonly when you're doing symbolic\nexecution of real code. A very important\nstep is the modeling",
    "start": "4270642",
    "end": "4279080"
  },
  {
    "text": "of your library functions. And how you model\nyour library functions is going to have a huge\nimpact on the one hand",
    "start": "4279080",
    "end": "4285760"
  },
  {
    "text": "on the performance and the\nscalability of the analysis, but on the other hand,\non the precision.",
    "start": "4285760",
    "end": "4292159"
  },
  {
    "text": "So if you have a Mickey Mouse\nmodel of malloc like this, it's going to be\nvery, very fast,",
    "start": "4292160",
    "end": "4297929"
  },
  {
    "text": "but there are going to be\ncertain classes of bugs that you won't be able to catch.",
    "start": "4297930",
    "end": "4303060"
  },
  {
    "text": "Right? So and this model, for\nexample, I'm completely ignoring the allocations. So if I have a bug\nbecause somebody",
    "start": "4303060",
    "end": "4308840"
  },
  {
    "text": "is accessing unallocated space. Well, I'm not going to find\nit with this Mickey Mouse",
    "start": "4308840",
    "end": "4316010"
  },
  {
    "text": "model of malloc. Right? So it's always a balance between\nthe precision of the analysis",
    "start": "4316010",
    "end": "4324400"
  },
  {
    "text": "versus the efficiency.",
    "start": "4324400",
    "end": "4330400"
  },
  {
    "text": "And the more complicated your\nmodels of standard functions like malloc get,\nthe less scalable",
    "start": "4330400",
    "end": "4337010"
  },
  {
    "text": "the analysis is going to be,\nbut for certain classes of bugs you will need those models.",
    "start": "4337010",
    "end": "4342150"
  },
  {
    "text": "And one of the big things\nin the [? Clee ?] paper was really having\nreasonable models",
    "start": "4342150",
    "end": "4347829"
  },
  {
    "text": "for all the different\nlibraries in C, all the different\nlibraries that are",
    "start": "4347830",
    "end": "4352940"
  },
  {
    "text": "needed in order to understand\nwhat a program is actually doing. ",
    "start": "4352940",
    "end": "4359090"
  },
  {
    "text": "So, OK. So we've reduced the problem\nof reasoning about the heap to a problem of reasoning\nabout a program with arrays,",
    "start": "4359090",
    "end": "4367219"
  },
  {
    "text": "but I haven't actually\ntold you how to reason about a program with arrays.",
    "start": "4367220",
    "end": "4372270"
  },
  {
    "text": "And it turns out\nthat most SMT solvers support a theory of arrays.",
    "start": "4372270",
    "end": "4378060"
  },
  {
    "text": "And the idea is\nif a is an array, there's some notation to\nsay, well, take that array",
    "start": "4378060",
    "end": "4383950"
  },
  {
    "text": "and create a new array\nwhere location i has been updated to value e.",
    "start": "4383950",
    "end": "4390571"
  },
  {
    "text": "All right? So if I have array a and I\ndo this update operation, and then I try to\nread the value k,",
    "start": "4390571",
    "end": "4397340"
  },
  {
    "text": "then the meaning\nis that the value k is going to be\nequal to the value k",
    "start": "4397340",
    "end": "4402370"
  },
  {
    "text": "at a if k is different from i. And it's going to be equal to\ne if k is equal to i, right?",
    "start": "4402370",
    "end": "4409350"
  },
  {
    "text": "That's what updating\nan array means. That's what it means\nto take an old array and update it to be a new array.",
    "start": "4409350",
    "end": "4415583"
  },
  {
    "text": " And the nice thing about this is\nthat if you have a formula that",
    "start": "4415583",
    "end": "4424780"
  },
  {
    "text": "involves the theory of\narrays, so, for example, I started with the zero array\nthat is just zeros everywhere.",
    "start": "4424780",
    "end": "4431849"
  },
  {
    "text": "And then I wrote 5 into location\ni, and 7 into location j.",
    "start": "4431850",
    "end": "4439210"
  },
  {
    "text": "And then I'm reading from k. And then I'm checking whether\nthat's equal to 5 or not.",
    "start": "4439210",
    "end": "4444680"
  },
  {
    "text": "Then that can be expanded\nby using this definition",
    "start": "4444680",
    "end": "4450110"
  },
  {
    "text": "to something that says,\nwell, if k is equal to i then if k is equal to y,\nand k is different from j,",
    "start": "4450110",
    "end": "4459290"
  },
  {
    "text": "then, yes, this is\ngoing to be equal to 5. ",
    "start": "4459290",
    "end": "4464570"
  },
  {
    "text": "And otherwise this is not\ngoing to be equal to 5, right?",
    "start": "4464570",
    "end": "4470639"
  },
  {
    "text": "And in practice SMT solvers\ndon't just expand these into lots of Boolean formulas.",
    "start": "4470640",
    "end": "4476290"
  },
  {
    "text": "They, again, use\nthis back and forth strategy between a SAT\nsolver and an engine that is able to reason about\nthis theory of arrays in order",
    "start": "4476290",
    "end": "4485380"
  },
  {
    "text": "to do it. But what's important\nis that by relying on this theory of arrays,\nusing the same strategy we",
    "start": "4485380",
    "end": "4491680"
  },
  {
    "text": "saw to generate formulas for\nintegers you can actually",
    "start": "4491680",
    "end": "4500050"
  },
  {
    "text": "generate formulas\ninvolving array logic, and involving array updates,\ninvolving array axises,",
    "start": "4500050",
    "end": "4508720"
  },
  {
    "text": "involving iteration over arrays\nas long as you fix your path,",
    "start": "4508720",
    "end": "4516730"
  },
  {
    "text": "these formulas are\nvery easy to generate. If you don't fix\nyour paths if you",
    "start": "4516730",
    "end": "4522440"
  },
  {
    "text": "want to generate a\nformula that corresponds to going through all paths,\nthen it's also relatively easy.",
    "start": "4522440",
    "end": "4529080"
  },
  {
    "text": "The Only thing is you\nhave to deal with loops in more of a special way.",
    "start": "4529080",
    "end": "4534910"
  },
  {
    "text": "Yes? AUDIENCE: [INAUDIBLE]. ",
    "start": "4534910",
    "end": "4543340"
  },
  {
    "text": "ARMANDO SOLAR-LEZAMA:\nI don't know. So dictionaries and\nmaps are actually",
    "start": "4543340",
    "end": "4548869"
  },
  {
    "text": "very easy to model using\nuninterpreted functions. And, in fact, the\ntheory of arrays",
    "start": "4548870",
    "end": "4555190"
  },
  {
    "text": "itself, it's just a special\ncase of uninterpreted functions.",
    "start": "4555190",
    "end": "4565170"
  },
  {
    "text": "So more complicated\nthings can be done with uninterpreted functions.",
    "start": "4565170",
    "end": "4571460"
  },
  {
    "text": "In modern SMT solvers\nthere is native support",
    "start": "4571460",
    "end": "4576820"
  },
  {
    "text": "for reasoning about\nsets and set operations, which can be very, very\nuseful if you're reasoning",
    "start": "4576820",
    "end": "4582740"
  },
  {
    "text": "about a program that involves\nlots of set computations,",
    "start": "4582740",
    "end": "4588390"
  },
  {
    "text": "for example. When designing\none of these tools",
    "start": "4588390",
    "end": "4593750"
  },
  {
    "text": "the modeling step\nis really important. And it's not just how you model\ncomplicated program features",
    "start": "4593750",
    "end": "4601040"
  },
  {
    "text": "down to your theories. So, for example, things\nlike heaps down to arrays.",
    "start": "4601040",
    "end": "4607849"
  },
  {
    "text": "And also the choice of what\ntheories and the solver you use. And there's a large number\nof theories and the solver",
    "start": "4607850",
    "end": "4616469"
  },
  {
    "text": "with different trade offs\nbetween how efficient they are",
    "start": "4616470",
    "end": "4622260"
  },
  {
    "text": "versus how expressive they are. And, in general, most\nof the production tools",
    "start": "4622260",
    "end": "4628870"
  },
  {
    "text": "stick to the theory\nof bit-vectors and they might use\nthe theory of arrays",
    "start": "4628870",
    "end": "4636550"
  },
  {
    "text": "to model the heap if\nthat is necessary.",
    "start": "4636550",
    "end": "4641820"
  },
  {
    "text": "Generally production\ntools try to shy away from some of the more\nsophisticated theories,",
    "start": "4641820",
    "end": "4647380"
  },
  {
    "text": "like the theory of sets\njust because by virtue being richer they also tend to\nbe less scalable in some cases,",
    "start": "4647380",
    "end": "4656450"
  },
  {
    "text": "unless you're dealing with a\nprogram that really requires exactly that kind of reasoning\nin order to work with.",
    "start": "4656450",
    "end": "4664920"
  },
  {
    "text": "Are there other questions? Yes? AUDIENCE: [INAUDIBLE] research\nin symbolic execution,",
    "start": "4664920",
    "end": "4670834"
  },
  {
    "text": "what are people\nfocusing on and where is there room for improvement? [INAUDIBLE] applications.",
    "start": "4670834",
    "end": "4676620"
  },
  {
    "text": "ARMANDO SOLAR-LEZAMA: So one\nvery active area of research is around applications.",
    "start": "4676620",
    "end": "4682880"
  },
  {
    "text": "And looking at models\nthat will allow you to discover new\nclasses of bugs.",
    "start": "4682880",
    "end": "4689400"
  },
  {
    "text": "So, for example, Nikolai,\nand Franz, and Xi Wang and I",
    "start": "4689400",
    "end": "4695199"
  },
  {
    "text": "had a paper, what\nwas it, last year when we were looking at using\nsymbolic execution to identify",
    "start": "4695200",
    "end": "4703810"
  },
  {
    "text": "coding your program that a\ncompiler might optimize away. Security checks that might get\noptimized away by a compiler.",
    "start": "4703810",
    "end": "4712410"
  },
  {
    "text": "So it's very different from the\nquestion of will the program go",
    "start": "4712410",
    "end": "4718510"
  },
  {
    "text": "down this path or not, but\nthere is a modeling step to go from this high\nlevel conceptual question",
    "start": "4718510",
    "end": "4725300"
  },
  {
    "text": "of, is there a\ncode in my program that can be compiled away\nto an algorithm based",
    "start": "4725300",
    "end": "4734780"
  },
  {
    "text": "on symbolic execution\nthat will rely on the ability of\nsymbolic execution to easily tell you whether\nthe program can go down",
    "start": "4734780",
    "end": "4741289"
  },
  {
    "text": "a particular path, or whether\na particular path is feasible. So applications is a\nbig area, extending",
    "start": "4741290",
    "end": "4748380"
  },
  {
    "text": "to newer classes\nof bugs, growing to new and different\nlanguage features.",
    "start": "4748380",
    "end": "4755500"
  },
  {
    "text": "For example, one of the\nthings that is still fairly hard to model from\nusing symbolic execution",
    "start": "4755500",
    "end": "4762840"
  },
  {
    "text": "are very high level languages,\nlike JavaScript or Python where",
    "start": "4762840",
    "end": "4768849"
  },
  {
    "text": "you have a lot of very\ndynamic language features, but at the same time they\nare-- if any technique can",
    "start": "4768850",
    "end": "4777910"
  },
  {
    "text": "work for the symbolic execution,\nit's definitely very good. And, in fact, we had some\nwork a couple of years",
    "start": "4777910",
    "end": "4784640"
  },
  {
    "text": "ago using symbolic\nexecution to reason about errors in Python\nprogramming assignments,",
    "start": "4784640",
    "end": "4790070"
  },
  {
    "text": "for example. Yes? AUDIENCE: So [INAUDIBLE]. ",
    "start": "4790070",
    "end": "4803962"
  },
  {
    "text": "How does [INAUDIBLE]?  ARMANDO SOLAR-LEZAMA: It is.",
    "start": "4803962",
    "end": "4809370"
  },
  {
    "text": "So in the case of symbolic\nexecution part of the problem is that your symbolic state,\nit's very hard to simply say,",
    "start": "4809370",
    "end": "4819130"
  },
  {
    "text": "OK, I executed this\ninstruction, and then this instruction, and\nthen this instruction. The sequence is not there.",
    "start": "4819130",
    "end": "4824720"
  },
  {
    "text": "There was some work a few\nyears ago looking, for example, at very small pieces of\ncode, but very critical,",
    "start": "4824720",
    "end": "4831970"
  },
  {
    "text": "like a concurring data\nstructure in operating system, or lock-free\ndata structure",
    "start": "4831970",
    "end": "4837239"
  },
  {
    "text": "and modeling the\ninteractions between threads",
    "start": "4837240",
    "end": "4843190"
  },
  {
    "text": "by essentially saying, every\ntime there is a variable that could have been overwritten\nby something else,",
    "start": "4843190",
    "end": "4849900"
  },
  {
    "text": "you replace that value with\njust a fresh symbolic value that says, I have no\nidea what this is.",
    "start": "4849900",
    "end": "4855946"
  },
  {
    "text": "And you generate\nconstraints that relate to those symbolic\nvalues to symbolic values in other threads.",
    "start": "4855946",
    "end": "4861520"
  },
  {
    "text": "And this has been\nused even to reason about things like missing\nmemory fences, for example.",
    "start": "4861520",
    "end": "4868840"
  },
  {
    "text": "And so it is possible, but the\ncomplexity grows quite a bit. And it becomes the kind of thing\nthat you cannot no longer do",
    "start": "4868840",
    "end": "4878100"
  },
  {
    "text": "at the scale of Microsoft Word,\nbut you can do at the scale of, say, a concurring data\nstructure, for example.",
    "start": "4878100",
    "end": "4886087"
  },
  {
    "text": "There had been other work though\nin the context of concurrency looking at, for example,\ncan I use symbolic execution",
    "start": "4886087",
    "end": "4891199"
  },
  {
    "text": "to reconstruct\ninterleavings based on knowledge of how the program\nbehaved as it was running,",
    "start": "4891200",
    "end": "4898290"
  },
  {
    "text": "for example. And so this opens a\nlot of possibilities,",
    "start": "4898290",
    "end": "4906020"
  },
  {
    "text": "having this capability to\nask very concrete questions about can my program\nrun down this path.",
    "start": "4906020",
    "end": "4912660"
  },
  {
    "text": "Being able to have\nsymbolic values and ask questions, what values\nshould these things have in order for the program to\ndo something, or in order",
    "start": "4912660",
    "end": "4920200"
  },
  {
    "text": "something to happen is a\nvery powerful capability and there's a lot\nof applications that have been tried, but\nthis is a fairly new piece",
    "start": "4920200",
    "end": "4930659"
  },
  {
    "text": "of technology as\nfar as technology for analyzing a program goes. ",
    "start": "4930660",
    "end": "4935703"
  }
]