[
  {
    "start": "0",
    "end": "22000"
  },
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help MIT\nOpenCourseWare continue to",
    "start": "0",
    "end": "6910"
  },
  {
    "text": "offer high quality educational\nresources for free. To make a donation or view\nadditional materials from",
    "start": "6910",
    "end": "13460"
  },
  {
    "text": "hundreds of MIT courses, visit\nMIT OpenCourseWare at ocw.mit.edu.",
    "start": "13460",
    "end": "19690"
  },
  {
    "text": " PROFESSOR: Good morning. AUDIENCE: Good morning.",
    "start": "19690",
    "end": "25400"
  },
  {
    "start": "22000",
    "end": "220000"
  },
  {
    "text": "PROFESSOR: Thank you. OK. So we're about to launch into\nlearning some basic elements",
    "start": "25400",
    "end": "32960"
  },
  {
    "text": "of Python today. The elements I'm going to talk\nabout are common to every",
    "start": "32960",
    "end": "39220"
  },
  {
    "text": "programming language that I\nknow, at least in concept, and of course slightly different\nin detail.",
    "start": "39220",
    "end": "46949"
  },
  {
    "text": "But as I said last time,\neverything you're going to learn about Python should\nbe readily transferable.",
    "start": "46950",
    "end": "53125"
  },
  {
    "text": " I'll be using, for all of the\nexamples I present, something",
    "start": "53125",
    "end": "63390"
  },
  {
    "text": "called an integrated development\nenvironment, and in particular, one that's built\nfor Python called IDLE.",
    "start": "63390",
    "end": "73774"
  },
  {
    "start": "73775",
    "end": "82030"
  },
  {
    "text": "Usually we talk about these\nthings as IDEs. ",
    "start": "82030",
    "end": "99009"
  },
  {
    "text": "I'm told, I don't know if it's\ntrue, that the IDE for Python",
    "start": "99010",
    "end": "105160"
  },
  {
    "text": "is called IDLE after Eric Idle\nof Monty Python, which was",
    "start": "105160",
    "end": "111500"
  },
  {
    "text": "also, I'm told, the inspiration\nfor the name of the programming language. ",
    "start": "111500",
    "end": "117960"
  },
  {
    "text": "So what is an integrated\nprogramming environment? In this case, it includes a\nspecialized text editor that",
    "start": "117960",
    "end": "130259"
  },
  {
    "text": "provides highlighting,\nauto-completion, smart indent,",
    "start": "130259",
    "end": "135760"
  },
  {
    "text": "and you'll see shortly why all\nthat's very important, and a few other amenities that make it\neasier to use this to type",
    "start": "135760",
    "end": "143220"
  },
  {
    "text": "Python than typing it into\na generic text editor.",
    "start": "143220",
    "end": "148690"
  },
  {
    "text": "It includes something called\na shell, which is the",
    "start": "148690",
    "end": "155150"
  },
  {
    "text": "environment that actually\ninterprets the Python code. ",
    "start": "155150",
    "end": "162000"
  },
  {
    "text": "And the nice thing about it\nis it includes syntax highlighting.",
    "start": "162000",
    "end": "168200"
  },
  {
    "text": " So the shell gives you some\ninformation about the syntax,",
    "start": "168200",
    "end": "174299"
  },
  {
    "text": "as does the text editor\nof course. And finally, it includes\nan integrated debugger.",
    "start": "174300",
    "end": "181950"
  },
  {
    "text": " This could be useful in the\nunlikely event that your",
    "start": "181950",
    "end": "188470"
  },
  {
    "text": "programs have errors when\nyou write them. Though truth be told, I've been\nprogramming in Python for",
    "start": "188470",
    "end": "196860"
  },
  {
    "text": "years and I don't know that I've\never used the debugger. It's not that I don't make\nmistakes, it's just that I'm",
    "start": "196860",
    "end": "203200"
  },
  {
    "text": "kind of a Luddite, and I\ntypically use print statements for debugging.",
    "start": "203200",
    "end": "208430"
  },
  {
    "text": "And in fact, almost every\nprogrammer that I know, when push comes to shove, ends up\nusing print statements.",
    "start": "208430",
    "end": "215280"
  },
  {
    "text": "But the debugger is there,\nshould you care to take a try.",
    "start": "215280",
    "end": "220800"
  },
  {
    "start": "220000",
    "end": "359000"
  },
  {
    "text": "All right. So you'll see on the screen\nhere an IDLE shell.",
    "start": "220800",
    "end": "226940"
  },
  {
    "text": "In the shell, we can\ntype things. What are we going to type?",
    "start": "226940",
    "end": "233100"
  },
  {
    "text": "Well the first thing to\nunderstand is that at the core",
    "start": "233100",
    "end": "238681"
  },
  {
    "text": "of Python, and probably the\nmost important thing to understand, are something\ncalled objects.",
    "start": "238681",
    "end": "246235"
  },
  {
    "text": " Everything in Python\nis an object.",
    "start": "246235",
    "end": "254990"
  },
  {
    "text": "So every kind of entity that you\ncan create in Python is an object, and in fact, Python\ncode itself is an object.",
    "start": "254990",
    "end": "264040"
  },
  {
    "text": "You'll remember, we talked about\nstored program computers last time, and the concept that\na program is data, just",
    "start": "264040",
    "end": "271479"
  },
  {
    "text": "like a number is data. Each object has a type that\ntells us the kind of object it",
    "start": "271480",
    "end": "286250"
  },
  {
    "text": "is, and in particular, what\nwe can do with it.",
    "start": "286250",
    "end": "292910"
  },
  {
    "text": "And then there's a built-in\nfunction, called type, that",
    "start": "292910",
    "end": "298020"
  },
  {
    "text": "can be used to find out\nthe type of an object. ",
    "start": "298020",
    "end": "304520"
  },
  {
    "text": "As we'll see, there are two\nfundamental kinds of types. ",
    "start": "304520",
    "end": "313500"
  },
  {
    "text": "Scalar and non-scalar. ",
    "start": "313500",
    "end": "321070"
  },
  {
    "text": "We'll start with talking\nabout scalar types. And the key thing to think about\nthere is that they are",
    "start": "321070",
    "end": "329030"
  },
  {
    "text": "indivisible.  Think of them as the atoms of\nthe programming language.",
    "start": "329030",
    "end": "337300"
  },
  {
    "text": "Now, I know that some of you\nhave studied physics and know that atoms are in principle\ndivisible, but of course, only",
    "start": "337300",
    "end": "344210"
  },
  {
    "text": "at great expense and with\nserious consequences. And we've seen the\nsame thing here.",
    "start": "344210",
    "end": "349500"
  },
  {
    "text": "You can, if you're desperate,\nchop up these scalar types, but it almost always leads\nto something bad.",
    "start": "349500",
    "end": "360030"
  },
  {
    "start": "359000",
    "end": "530000"
  },
  {
    "text": "All right. Well let's look at some. Well, the first one you'll see\nis used to represent integers,",
    "start": "360030",
    "end": "367890"
  },
  {
    "text": "and that's called int. For every type, or every\nbuilt-in type, there's the",
    "start": "367890",
    "end": "374140"
  },
  {
    "text": "notion of a literal, which\nis how we type it. So for example, we can type 3,\nand that will now tell us it",
    "start": "374140",
    "end": "384469"
  },
  {
    "text": "is the value 3. You'll note it's typed\nit in blue. And I can ask what\nthe type of 3 is.",
    "start": "384470",
    "end": "392660"
  },
  {
    "text": "So you'll notice as I type\nthings into the shell, it's using colors to give\nme a hint.",
    "start": "392660",
    "end": "398660"
  },
  {
    "text": "So it's this fuchsia color for\nthe word type, telling me that's a built-in function.",
    "start": "398660",
    "end": "406320"
  },
  {
    "text": "And now if I ask it, it will\ntell me that the type of the literal 3 is \"int\".",
    "start": "406320",
    "end": "414930"
  },
  {
    "text": "So it's an integer. And I can use other\nsorts of things.",
    "start": "414930",
    "end": "420410"
  },
  {
    "start": "420410",
    "end": "426430"
  },
  {
    "text": "All right. There's also a type float. So those correspond to\nthe real numbers.",
    "start": "426430",
    "end": "434130"
  },
  {
    "text": "So I can do something\nlike that. And we'll talk about this in a\nsecond, but you'll notice if I",
    "start": "434130",
    "end": "442170"
  },
  {
    "text": "do type of 3.2, it tells\nme it's a float. And for that matter, I can do\ntype of 3.0, and it will tell",
    "start": "442170",
    "end": "451979"
  },
  {
    "text": "me it's a float. So there's a difference\nbetween 3 and 3.0.",
    "start": "451980",
    "end": "457996"
  },
  {
    "text": "One is an int, and\none is a float. Now you'll notice something\nkind of weird here.",
    "start": "457996",
    "end": "466630"
  },
  {
    "text": "When the interpreter printed\nback the value of the literal",
    "start": "466630",
    "end": "471940"
  },
  {
    "text": "3.2, it gave me 3.2 and a bunch\nof zeroes, and then this",
    "start": "471940",
    "end": "477590"
  },
  {
    "text": "funny 2 standing at the end. In a few lectures, I'll explain\nwhy it does this, but",
    "start": "477590",
    "end": "486039"
  },
  {
    "text": "for now, you should just take\nthis as a warning that floats",
    "start": "486040",
    "end": "491620"
  },
  {
    "text": "are not the same thing\nas real numbers. You learned about reals,\npresumably in middle school or",
    "start": "491620",
    "end": "498490"
  },
  {
    "text": "high school. Floats are a computer\nscientist's approximation to",
    "start": "498490",
    "end": "505180"
  },
  {
    "text": "reals, but they're not\nquite the same. The good news is almost all the\ntime, you can pretend that",
    "start": "505180",
    "end": "512779"
  },
  {
    "text": "a floating point number is a\nreal, but as we'll see in a few lectures, every once in a\nwhile it can really sit up and",
    "start": "512780",
    "end": "521039"
  },
  {
    "text": "bite you, if you believe that. But for now, we'll just pretend\nthat they're reals. ",
    "start": "521039",
    "end": "531660"
  },
  {
    "start": "530000",
    "end": "567000"
  },
  {
    "text": "There's Booleans, a nice scalar\ntype of which there are only two values. ",
    "start": "531660",
    "end": "539960"
  },
  {
    "text": "One of them is true, and what\ndo you think the other Boolean value is? AUDIENCE: False?",
    "start": "539960",
    "end": "546200"
  },
  {
    "text": "PROFESSOR: Thank you. So somebody said false. I have no idea who, but\nwhoever it is, there's",
    "start": "546200",
    "end": "552000"
  },
  {
    "text": "probably some candy to be had. Oh, I managed to find the one\nplace in the room where there was an empty.",
    "start": "552000",
    "end": "558520"
  },
  {
    "text": "I'm hoping that people will now\nscramble and fight for it, like a foul ball at\na baseball game.",
    "start": "558520",
    "end": "565069"
  },
  {
    "text": "No, people are too\npolite thus far. All right. So we have true and false\nas the type Booleans.",
    "start": "565070",
    "end": "571840"
  },
  {
    "text": "And then we can do operations\non them. So for example, true and false\nis false, as you might guess.",
    "start": "571840",
    "end": "582650"
  },
  {
    "text": "Finally, there's this funny\nvalue, none, which doesn't",
    "start": "582650",
    "end": "589650"
  },
  {
    "text": "print anything when I type it. And if I look at the type\nof none, we'll see",
    "start": "589650",
    "end": "596150"
  },
  {
    "text": "it's the none type. Not very interesting. Fundamentally, as we'll see,\nthat gets used when you want",
    "start": "596150",
    "end": "605000"
  },
  {
    "text": "to put in something temporary. When you don't yet know what its\nvalue is going to be, you know it's going to eventually\nhave one, so maybe you start",
    "start": "605000",
    "end": "613170"
  },
  {
    "text": "out calling it none. And then you can check,\nand we'll see how we might do that.",
    "start": "613170",
    "end": "620180"
  },
  {
    "text": "So those are the fundamental\nscalar types,",
    "start": "620180",
    "end": "625925"
  },
  {
    "text": "the indivisible ones. Interestingly enough, Python\ndoes not have what is a common",
    "start": "625925",
    "end": "635290"
  },
  {
    "text": "scalar type in every other\nlanguage called char, short for character.",
    "start": "635290",
    "end": "641740"
  },
  {
    "text": "Instead, what it has is strings\nthat can be used to",
    "start": "641740",
    "end": "648190"
  },
  {
    "text": "represent strings\nof characters. So for example, I can write the\nstring \"a\", and if I ask",
    "start": "648190",
    "end": "658500"
  },
  {
    "text": "for the type of it, it\ntells me it's an str, short for string.",
    "start": "658500",
    "end": "665485"
  },
  {
    "text": " Happens to be a string of\nlength 1, which we might",
    "start": "665485",
    "end": "672770"
  },
  {
    "text": "usually think of as\na character, but there is no type char. So it's not a problem.",
    "start": "672770",
    "end": "679080"
  },
  {
    "text": "We just have to remember it. Literals of type string can be\nwritten with single quotes or",
    "start": "679080",
    "end": "688269"
  },
  {
    "text": "with double quotes.  There's no difference.",
    "start": "688270",
    "end": "694720"
  },
  {
    "text": "Just convenient that you can do\nit either way, and we can build strings of things.",
    "start": "694720",
    "end": "702600"
  },
  {
    "text": "It's worth noting that the type\nof, say, the string 123",
    "start": "702600",
    "end": "709940"
  },
  {
    "text": "is str, whereas the type of 123\nwithout the quotes is int.",
    "start": "709940",
    "end": "720390"
  },
  {
    "text": "So we have to be a little bit\ncareful sometimes as to whether we're dealing with\nstrings or ints when we look",
    "start": "720390",
    "end": "727860"
  },
  {
    "text": "at these literals.  You can only get so far with\nliterals, things you can type.",
    "start": "727860",
    "end": "737060"
  },
  {
    "text": "So of course, Python has in\nit something called an expression. Again, this shouldn't\nsurprise anybody.",
    "start": "737060",
    "end": "743620"
  },
  {
    "start": "743620",
    "end": "751185"
  },
  {
    "text": "And an expression\nis a sequence of",
    "start": "751185",
    "end": "760830"
  },
  {
    "text": "operands and operators. ",
    "start": "760830",
    "end": "770950"
  },
  {
    "text": "The operands are objects. ",
    "start": "770950",
    "end": "779610"
  },
  {
    "text": "So for example, we can write\nthe expression 3 plus 2.",
    "start": "779610",
    "end": "785899"
  },
  {
    "text": "And when we type an expression\ninto IDLE, it automatically evaluates it and prints the\nvalue of the expression.",
    "start": "785900",
    "end": "793240"
  },
  {
    "text": "In this case, of\ncourse it's 5.  One thing to be a little careful\nabout is if I type the",
    "start": "793240",
    "end": "802500"
  },
  {
    "text": "expression 3/2, slash is the\ndivide operator, I get 1.",
    "start": "802500",
    "end": "809005"
  },
  {
    "text": " Whereas if I type the expression\n3.0 divided",
    "start": "809005",
    "end": "815620"
  },
  {
    "text": "by 2.0, I get 1.5.",
    "start": "815620",
    "end": "823310"
  },
  {
    "text": "So dividing two integers\nin Python 2.x gives you",
    "start": "823310",
    "end": "829760"
  },
  {
    "text": "essentially a floor operator.  In 3.0, by the way, integer\ndivision is not allowed.",
    "start": "829760",
    "end": "839120"
  },
  {
    "text": "It always converts it to floats\nand does a floating point division. But for many of you this will\nbe something that will trip",
    "start": "839120",
    "end": "846370"
  },
  {
    "text": "you up as a bug. If you want to get real\ndivision, write",
    "start": "846370",
    "end": "852970"
  },
  {
    "text": "floating point numbers. Otherwise, unpleasant\nthings may happen.",
    "start": "852970",
    "end": "860640"
  },
  {
    "text": "Some other interesting things\nI can type, just as I could type 3 plus 2, I can\ntype a plus b.",
    "start": "860640",
    "end": "872050"
  },
  {
    "text": "What do you think\nI'll get there? ",
    "start": "872050",
    "end": "877160"
  },
  {
    "text": "It does concatenation.  So what we see here is that\nthe operator plus is",
    "start": "877160",
    "end": "889190"
  },
  {
    "text": "overloaded. ",
    "start": "889190",
    "end": "899060"
  },
  {
    "text": "So overloaded operators have a\nmeaning that depends upon the",
    "start": "899060",
    "end": "911120"
  },
  {
    "text": "type of the operands. ",
    "start": "911120",
    "end": "925710"
  },
  {
    "text": "And of course, we've already\nseen that with the slash operator, which means one thing\nfor ints and another",
    "start": "925710",
    "end": "931430"
  },
  {
    "text": "things for floats. And of course, we see the\nsame thing with plus. ",
    "start": "931430",
    "end": "939700"
  },
  {
    "text": "What do you think will\nhappen here? 3 blank 3?",
    "start": "939700",
    "end": "944810"
  },
  {
    "text": "Any guesses?  I get a syntax error.",
    "start": "944810",
    "end": "950120"
  },
  {
    "text": "Remember, we talked about\nthat on Tuesday. It's not a valid Python\nexpression,",
    "start": "950120",
    "end": "957490"
  },
  {
    "text": "so we get an error. How about this one? ",
    "start": "957490",
    "end": "966380"
  },
  {
    "text": "That is syntactically valid. It's got operand, operator,\noperand.",
    "start": "966380",
    "end": "973280"
  },
  {
    "text": "What do you think it will do\nwhen I hit Return here? Somebody?",
    "start": "973280",
    "end": "980040"
  },
  {
    "text": "AUDIENCE: A static\nsemantics error? PROFESSOR: Pardon? AUDIENCE: A static\nsemantics error? PROFESSOR: A static\nsemantics error.",
    "start": "980040",
    "end": "986410"
  },
  {
    "text": "And because of these-- Wait, I can't see\nwho said that. Raise your hand? Oh, come on.",
    "start": "986410",
    "end": "991480"
  },
  {
    "text": "All the way back there? All right. I have the most chance of\ncarrying with one of these.",
    "start": "991480",
    "end": "997915"
  },
  {
    "start": "997915",
    "end": "1003870"
  },
  {
    "start": "1003000",
    "end": "1278000"
  },
  {
    "text": "I'm going to lie. Those of you who are watching\nOpenCourseWare, it was a perfect throw. ",
    "start": "1003870",
    "end": "1011450"
  },
  {
    "text": "OK. So indeed, we get a static\nsemantic error of a particular",
    "start": "1011450",
    "end": "1018310"
  },
  {
    "text": "kind, called the type error,\nsaying you cannot concatenate an str and an int.",
    "start": "1018310",
    "end": "1024439"
  },
  {
    "text": " Type errors are actually\ngood things.",
    "start": "1024440",
    "end": "1032345"
  },
  {
    "text": " The language does type checking\nin order to reduce",
    "start": "1032345",
    "end": "1039529"
  },
  {
    "text": "the probability that a\nprogrammer will write a program with a meaning that\nwill surprise its author.",
    "start": "1039530",
    "end": "1048980"
  },
  {
    "text": "So it looks at it and says,\nsomebody might have a weird guess what this means, but just\nto be safe, we're going",
    "start": "1048980",
    "end": "1055760"
  },
  {
    "text": "to disallow it rather than-- it could, of course, make\nup some funny meaning if it wanted to.",
    "start": "1055760",
    "end": "1062600"
  },
  {
    "text": "But it doesn't. And I think you'll find type\nchecking saves you from a lot",
    "start": "1062600",
    "end": "1068740"
  },
  {
    "text": "of careless programming\nerrors as you go on.",
    "start": "1068740",
    "end": "1075020"
  },
  {
    "text": "All right, let's continue. Let's look at some\nother things. I can write this.",
    "start": "1075020",
    "end": "1080090"
  },
  {
    "text": " Because that's just two\nstrings, and it just",
    "start": "1080090",
    "end": "1087450"
  },
  {
    "text": "concatenates them, the string\na and the string 3. Or interestingly,\nI can do this.",
    "start": "1087450",
    "end": "1094309"
  },
  {
    "text": " So now what we're seeing is\nthat you can take any type",
    "start": "1094310",
    "end": "1102529"
  },
  {
    "text": "name, use it as a conversion\nfunction to attempt to convert",
    "start": "1102530",
    "end": "1109260"
  },
  {
    "text": "one type to another. So this has now converted the\nint 3 to the str \"3\".",
    "start": "1109260",
    "end": "1117330"
  },
  {
    "text": " Similarly, I can do something\nlike this.",
    "start": "1117330",
    "end": "1124815"
  },
  {
    "start": "1124815",
    "end": "1131009"
  },
  {
    "text": "And here, it's converted the\nstr \"3\" to the int 3.",
    "start": "1131010",
    "end": "1136430"
  },
  {
    "text": " On the other hand,\nI could do this.",
    "start": "1136430",
    "end": "1141865"
  },
  {
    "start": "1141865",
    "end": "1152280"
  },
  {
    "text": "And it will tell me it's a\nstatic semantic error.",
    "start": "1152280",
    "end": "1157670"
  },
  {
    "text": "It can't convert 0.0\ninto an int.",
    "start": "1157670",
    "end": "1163450"
  },
  {
    "text": "Similarly, it can't\nconvert 2.1.",
    "start": "1163450",
    "end": "1171840"
  },
  {
    "text": "Or can it? So now I've given it the float\n2.1, and I've tried to",
    "start": "1171840",
    "end": "1177460"
  },
  {
    "text": "convert it to int. Not the string 2.1,\nbut the float. And it succeeds.",
    "start": "1177460",
    "end": "1183010"
  },
  {
    "text": " And it succeeded by essentially\ntruncating it.",
    "start": "1183010",
    "end": "1189110"
  },
  {
    "text": " Is this a good thing\nor a bad thing?",
    "start": "1189110",
    "end": "1195280"
  },
  {
    "text": " To me, it's kind\nof a bad thing.",
    "start": "1195280",
    "end": "1200690"
  },
  {
    "text": "If I've typed something like\nthat or I've evaluated some expression that happened to\nwork that way, more likely",
    "start": "1200690",
    "end": "1208610"
  },
  {
    "text": "than not, I'm confused. And I would probably have\npreferred to get a type error,",
    "start": "1208610",
    "end": "1213660"
  },
  {
    "text": "rather than it deciding\nhow to do it. It's one of the things I don't\nlike about Python.",
    "start": "1213660",
    "end": "1220740"
  },
  {
    "text": "It's too generous. It lets me get away with\nstuff it shouldn't let me get away with.",
    "start": "1220740",
    "end": "1226560"
  },
  {
    "text": "Other languages, for example\nJava, are much stricter. This is a design decision and\nit is the way it is, and we",
    "start": "1226560",
    "end": "1235310"
  },
  {
    "text": "have to live with it. AUDIENCE: Professor? Yes? AUDIENCE: Is that the same\nreason that 3 divided by 2",
    "start": "1235310",
    "end": "1240720"
  },
  {
    "text": "turned into 1 up top? PROFESSOR: Yeah. Exactly. If it's the same reason that\nthat happens, this will never",
    "start": "1240720",
    "end": "1248965"
  },
  {
    "text": "go that far. [UNINTELLIGIBLE]. Yeah, exactly.",
    "start": "1248965",
    "end": "1255440"
  },
  {
    "text": "It's the same reason. The question was, is it the same\nreason that 3 divided by 2 doesn't give you the\nanswer you would get",
    "start": "1255440",
    "end": "1262940"
  },
  {
    "text": "with floating point. And it's because Python\nhas tried to help you.",
    "start": "1262940",
    "end": "1268130"
  },
  {
    "text": "Again, Python 3.0 is a little\nstricter about these things.",
    "start": "1268130",
    "end": "1273210"
  },
  {
    "text": "We'll talk much more about\nthis during the term. ",
    "start": "1273210",
    "end": "1278600"
  },
  {
    "start": "1278000",
    "end": "1338000"
  },
  {
    "text": "This is close to the last time\nyou'll see me typing things directly into IDLE.",
    "start": "1278600",
    "end": "1284940"
  },
  {
    "text": "For the most part, as you write\nprograms, you'll use the text editor to produce them\nand then go to the",
    "start": "1284940",
    "end": "1292220"
  },
  {
    "text": "shell to run them. But you want to-- obviously, if I had a 100 line\nprogram, I wouldn't want to",
    "start": "1292220",
    "end": "1298920"
  },
  {
    "text": "sit here and retype it every\ntime I needed to change it. So instead, I use the editor\nin IDLE to produce the",
    "start": "1298920",
    "end": "1305320"
  },
  {
    "text": "programs, and then\nI can run them. And that's what I wanted\nto start doing.",
    "start": "1305320",
    "end": "1312200"
  },
  {
    "text": "I should probably mention that\nwhat most people call a",
    "start": "1312200",
    "end": "1318159"
  },
  {
    "text": "program, some Python programmers\ncall a script.",
    "start": "1318160",
    "end": "1323650"
  },
  {
    "text": " Think of those two things\nas synonyms.",
    "start": "1323650",
    "end": "1330790"
  },
  {
    "text": "But you will see people\nuse both of them. I will typically call\nthem a program.",
    "start": "1330790",
    "end": "1339180"
  },
  {
    "text": "All right. Let's look at an example. So the first thing to say is\nthat things look a little bit",
    "start": "1339180",
    "end": "1347450"
  },
  {
    "text": "different when they're executed\nfrom a script than when you execute them directly\nin the interpreter.",
    "start": "1347450",
    "end": "1355039"
  },
  {
    "text": "So I happen to have\na script here. ",
    "start": "1355040",
    "end": "1360899"
  },
  {
    "text": "If a line in a script starts\nwith a sharp sign or a number sign, that makes it a comment.",
    "start": "1360900",
    "end": "1367360"
  },
  {
    "text": "So it's not executed. So I've started here just by\ncommenting out everything.",
    "start": "1367360",
    "end": "1373365"
  },
  {
    "text": " But now--",
    "start": "1373365",
    "end": "1378659"
  },
  {
    "text": "whoops-- ",
    "start": "1378660",
    "end": "1385230"
  },
  {
    "text": "what happens if I just put\nthe number 3 here? We saw when I typed it into\nIDLE, it echoed it in some",
    "start": "1385230",
    "end": "1392600"
  },
  {
    "text": "sense and gave me what it was. Or just to be clear, I'm\ngoing to put in the",
    "start": "1392600",
    "end": "1398170"
  },
  {
    "text": "expression type of 3. I'll save it, and then I'll\nhit F5 to run it.",
    "start": "1398170",
    "end": "1407380"
  },
  {
    "text": "And it does nothing. Right? You saw it move. It didn't print anything. So when you type an expression\ninto the shell,",
    "start": "1407380",
    "end": "1414770"
  },
  {
    "text": "it prints the value. But when it executes a script\nwith an expression, it evaluates the expression\nbut does not",
    "start": "1414770",
    "end": "1422430"
  },
  {
    "text": "display it on the screen. Well, so what do we\ndo about that?",
    "start": "1422430",
    "end": "1428419"
  },
  {
    "text": "There is something called\na print command. So I can do this, Print type of\n3, and now if I run it, it",
    "start": "1428420",
    "end": "1441260"
  },
  {
    "text": "will actually appear. So whenever you want to get\nsomething to appear, you have to use the Print command.",
    "start": "1441260",
    "end": "1449600"
  },
  {
    "text": "Not a very complicated\nconcept. ",
    "start": "1449600",
    "end": "1456220"
  },
  {
    "text": "A program, or a script, is\na sequence of commands.",
    "start": "1456220",
    "end": "1465240"
  },
  {
    "text": " Each one tells the interpreter\nto do something.",
    "start": "1465240",
    "end": "1473100"
  },
  {
    "text": "So a command is Print,\nfor example. ",
    "start": "1473100",
    "end": "1482470"
  },
  {
    "start": "1478000",
    "end": "1633000"
  },
  {
    "text": "OK. So that's there. That's kind of boring. I'll get rid of that. ",
    "start": "1482470",
    "end": "1489480"
  },
  {
    "text": "The next command is a really\ninteresting one.",
    "start": "1489480",
    "end": "1495040"
  },
  {
    "text": "It's an assignment statement. A key concept in almost every\nprogramming language is that",
    "start": "1495040",
    "end": "1504850"
  },
  {
    "text": "of a variable.  Different languages have\ndifferent notions of what a",
    "start": "1504850",
    "end": "1512009"
  },
  {
    "text": "variable means. In Python, a variable is simply\na name for an object.",
    "start": "1512010",
    "end": "1521539"
  },
  {
    "start": "1521540",
    "end": "1543880"
  },
  {
    "text": "And what an assignment statement\ndoes in Python, is it binds the name\nto an object.",
    "start": "1543880",
    "end": "1551315"
  },
  {
    "start": "1551315",
    "end": "1565860"
  },
  {
    "text": "So the assignment stetement you\nsee here binds the name x",
    "start": "1565860",
    "end": "1571390"
  },
  {
    "text": "to the object 3. ",
    "start": "1571390",
    "end": "1577650"
  },
  {
    "text": "The next statement rebinds the\nname x to the value of the",
    "start": "1577650",
    "end": "1582750"
  },
  {
    "text": "expression x times x. So it takes the old value of x,\nevaluates the expression,",
    "start": "1582750",
    "end": "1590190"
  },
  {
    "text": "and then binds the name\nx to the new value. So at the end of the\nsecond statement, x",
    "start": "1590190",
    "end": "1596870"
  },
  {
    "text": "will be bound to 9. By the way, these are really\nstupid comments I've written here.",
    "start": "1596870",
    "end": "1603320"
  },
  {
    "text": "I put them in just to\nshow you what these statements are doing. For goodness sake, when you\nwrite comments in your",
    "start": "1603320",
    "end": "1609210"
  },
  {
    "text": "programs, assume that the reader\ncan read Python, and you don't have to explain\nthe programming",
    "start": "1609210",
    "end": "1615690"
  },
  {
    "text": "language in your comments. That's not to say you shouldn't\nwrite any comments.",
    "start": "1615690",
    "end": "1621360"
  },
  {
    "text": "The purpose of a comment\nis to make the program easier to read.",
    "start": "1621360",
    "end": "1628030"
  },
  {
    "text": "And so typically, comments are\nthere to explain things. ",
    "start": "1628030",
    "end": "1633950"
  },
  {
    "start": "1633000",
    "end": "1699000"
  },
  {
    "text": "Not to explain the language or\nits semantics, but to explain your thinking when you\nwrote the program.",
    "start": "1633950",
    "end": "1642530"
  },
  {
    "text": "What is the algorithm\nyou've used? And we'll see some useful\nexamples of comments, probably",
    "start": "1642530",
    "end": "1649950"
  },
  {
    "text": "not today, but later. All right. So let's execute this script. ",
    "start": "1649950",
    "end": "1658820"
  },
  {
    "text": "Sure enough, it printed 9. Just what we would have hoped. ",
    "start": "1658820",
    "end": "1669410"
  },
  {
    "text": "All right. Now let's try some\nother things. ",
    "start": "1669410",
    "end": "1677220"
  },
  {
    "text": "Print lets us output things. Raw input lets us\ninput things.",
    "start": "1677220",
    "end": "1685240"
  },
  {
    "text": "Get things from the keyboard,\nessentially. So this statement here is making\na request to whoever is",
    "start": "1685240",
    "end": "1694830"
  },
  {
    "text": "using the program to\nenter a number. ",
    "start": "1694830",
    "end": "1699910"
  },
  {
    "start": "1699000",
    "end": "1880000"
  },
  {
    "text": "There are two kinds of input\nstatements in Python 2.x.",
    "start": "1699910",
    "end": "1706100"
  },
  {
    "text": "There's raw input, which is the\nonly one you will see me use, and input.",
    "start": "1706100",
    "end": "1712860"
  },
  {
    "text": "Raw input, by the way, is the\nonly one that exists in 3.0.",
    "start": "1712860",
    "end": "1718770"
  },
  {
    "text": "So please, just use raw input.",
    "start": "1718770",
    "end": "1724080"
  },
  {
    "text": "The difference is, raw input\nalways expects, interprets what the user types\nas a string.",
    "start": "1724080",
    "end": "1732690"
  },
  {
    "text": "So it will see here, it says,\ny equals float of raw input.",
    "start": "1732690",
    "end": "1742159"
  },
  {
    "text": "Enter a number. So let's run it. So it's taken the argument to\nraw input, the string enter a",
    "start": "1742160",
    "end": "1752220"
  },
  {
    "text": "number asked me to\nenter a number. I'll enter a number. ",
    "start": "1752220",
    "end": "1760280"
  },
  {
    "text": "And then it's converted\nit to a float.",
    "start": "1760280",
    "end": "1768390"
  },
  {
    "text": "Suppose I get rid of that.  Suppose I do this.",
    "start": "1768390",
    "end": "1773850"
  },
  {
    "start": "1773850",
    "end": "1790559"
  },
  {
    "text": "That should work. ",
    "start": "1790560",
    "end": "1806170"
  },
  {
    "text": "So now something has happened. It's printed both\nof them as 3.0. It looks like they're\nthe same, but in",
    "start": "1806170",
    "end": "1814480"
  },
  {
    "text": "fact, they're not. And this is something\nto beware of.",
    "start": "1814480",
    "end": "1820280"
  },
  {
    "text": "What we've seen here is when\nit prints a string, it does",
    "start": "1820280",
    "end": "1828000"
  },
  {
    "text": "not print the quotation marks. So even though, if I were to put\nthis in here, I'll put in",
    "start": "1828000",
    "end": "1838930"
  },
  {
    "text": "two print types of y. ",
    "start": "1838930",
    "end": "1847520"
  },
  {
    "text": "And I'll comment this out\nbecause I'm getting kind of tired of seeing 9. ",
    "start": "1847520",
    "end": "1863230"
  },
  {
    "text": "You'll note that one\nis a string and the other is a float. Again, I point this out because\nthis is something that",
    "start": "1863230",
    "end": "1870130"
  },
  {
    "text": "can confuse people when they're\ndebugging programs. Because you think it's\na float, when",
    "start": "1870130",
    "end": "1876530"
  },
  {
    "text": "in fact it's a string.  OK. Nothing deep, but these are the\nthings that sort of get",
    "start": "1876530",
    "end": "1884830"
  },
  {
    "start": "1880000",
    "end": "1929000"
  },
  {
    "text": "people in trouble. Now the kinds of programs we've\nbeen looking at so far",
    "start": "1884830",
    "end": "1892590"
  },
  {
    "text": "are what are called straight\nline programs. ",
    "start": "1892590",
    "end": "1903740"
  },
  {
    "text": "What distinguishes a straight\nline program is it's a",
    "start": "1903740",
    "end": "1908750"
  },
  {
    "text": "sequence of commands you execute\none after another. You execute every command\nwithout making any deviations,",
    "start": "1908750",
    "end": "1917000"
  },
  {
    "text": "without going back with any\nloops to execute a command more than once. So in a straight line program,\nevery command gets executed",
    "start": "1917000",
    "end": "1925940"
  },
  {
    "text": "exactly once.  There is a very elegant, and\neven useful theory that talks",
    "start": "1925940",
    "end": "1936010"
  },
  {
    "start": "1929000",
    "end": "1991000"
  },
  {
    "text": "about different layers of,\nlevels of complexity of programs and says, for\nexample, what kind of",
    "start": "1936010",
    "end": "1943220"
  },
  {
    "text": "functions can you compute with\nstraight line programs. We'll talk more about that\nfield, which is called",
    "start": "1943220",
    "end": "1950290"
  },
  {
    "text": "complexity theory, later\nin this semester. But for now, the thing to\nrealize is that straight line",
    "start": "1950290",
    "end": "1957130"
  },
  {
    "text": "programs are just dead boring. You can't compute anything\ninteresting with one.",
    "start": "1957130",
    "end": "1965010"
  },
  {
    "text": "Last time we talked about\na recipe as an analogy for a program.",
    "start": "1965010",
    "end": "1970700"
  },
  {
    "text": "Imagine a recipe\nwith no tests. So every recipe, or almost\nevery recipe I",
    "start": "1970700",
    "end": "1977320"
  },
  {
    "text": "know, has some decisions. Taste it and add salt\nif you need it.",
    "start": "1977320",
    "end": "1983240"
  },
  {
    "text": "Or poke at the meat and\nsee if it's done. Or cook it until the\nthermometer says",
    "start": "1983240",
    "end": "1988770"
  },
  {
    "text": "some degree on it. Those are the kinds of\ntests we need to",
    "start": "1988770",
    "end": "1994380"
  },
  {
    "start": "1991000",
    "end": "2228000"
  },
  {
    "text": "make interesting programs. The most primitive kind of test\nwe see is what's called a",
    "start": "1994380",
    "end": "2002630"
  },
  {
    "text": "conditional statement. ",
    "start": "2002630",
    "end": "2011940"
  },
  {
    "text": "And those are written using the\nword if, and optionally as we'll see, the words else or\nelif, standing for else, if.",
    "start": "2011940",
    "end": "2024800"
  },
  {
    "text": "So let's look at an\nexample here. ",
    "start": "2024800",
    "end": "2032420"
  },
  {
    "text": "Where'd my mouse,\noh there it is. ",
    "start": "2032420",
    "end": "2045540"
  },
  {
    "text": "Yes?  Somebody has a question? Shout it out.",
    "start": "2045540",
    "end": "2051600"
  },
  {
    "text": "AUDIENCE: Sorry. I was wondering, when the user's\nprompted to put in the raw input, instead of putting\nin a float, puts in string,",
    "start": "2051600",
    "end": "2058654"
  },
  {
    "text": "could you define it as\na floating integer? How would you interpret\nthat input? PROFESSOR: I didn't\nget the question.",
    "start": "2058654",
    "end": "2065270"
  },
  {
    "text": "So this is an argument to\nraw input, or their response to raw input.",
    "start": "2065270",
    "end": "2071080"
  },
  {
    "text": "AUDIENCE: So yeah, for the\nraw input where you define it as a quote-- PROFESSOR: Yeah. AUDIENCE: It usually\nputs in a string.",
    "start": "2071080",
    "end": "2076248"
  },
  {
    "text": "How does Python interpret\nthat? PROFESSOR: It will interpret\nit as a string containing quotation marks.",
    "start": "2076248",
    "end": "2082606"
  },
  {
    "text": "AUDIENCE: OK. PROFESSOR: So typically you\ndon't type a string, because it interprets everything you\ntype as if it were a string.",
    "start": "2082606",
    "end": "2090270"
  },
  {
    "text": "So don't bother typing\nstrings. Good question. Thank you.",
    "start": "2090270",
    "end": "2097044"
  },
  {
    "text": "All right. So let's look at this. ",
    "start": "2097045",
    "end": "2103670"
  },
  {
    "text": "So here I'm going to get an\nint, or at least a string. I'll convert it to an int.",
    "start": "2103670",
    "end": "2110610"
  },
  {
    "text": "Then I'll say, if x remainder\ntwo, that's what the percent sign is, it's a remainder\nor a mod operator,",
    "start": "2110610",
    "end": "2117980"
  },
  {
    "text": "is equal equal zero. That's important. You'll notice that we used an\nequal sign to do assignments.",
    "start": "2117980",
    "end": "2129099"
  },
  {
    "text": "If we want to do a comparison,\nwhether two objects have the same value, we don't write\na single equal.",
    "start": "2129100",
    "end": "2136710"
  },
  {
    "text": "We write a double equal. So whenever you're testing for\nequality of objects, you use",
    "start": "2136710",
    "end": "2142930"
  },
  {
    "text": "double equal. So it says, if the object x mod\n2 has the same value as",
    "start": "2142930",
    "end": "2151040"
  },
  {
    "text": "the object zero, print even. Else, print odd.",
    "start": "2151040",
    "end": "2158700"
  },
  {
    "text": "And then, just for fun, I'm\ngoing to see whether or not it's divisible by three.",
    "start": "2158700",
    "end": "2164150"
  },
  {
    "text": "Why did I do that? Just to show you that I can\nnest conditionals inside conditionals.",
    "start": "2164150",
    "end": "2171190"
  },
  {
    "text": "So in one of the branches of\nthe conditionals, I'm now doing a test. So what this does, is if comes\ndown, it does the test.",
    "start": "2171190",
    "end": "2180960"
  },
  {
    "text": "If the value of the test is\ntrue, it executes the block of",
    "start": "2180960",
    "end": "2187250"
  },
  {
    "text": "code following the if, in\nthis case, just print.",
    "start": "2187250",
    "end": "2193090"
  },
  {
    "text": "And then it skips the else. It does not execute the else. So it executes one\nor the other.",
    "start": "2193090",
    "end": "2200250"
  },
  {
    "text": "If the test is false, it skips\nthe block of code following the if and executes the block\nof code following the else.",
    "start": "2200250",
    "end": "2209869"
  },
  {
    "text": "So it does a or b,\nbut not both. The indentation is important.",
    "start": "2209870",
    "end": "2217280"
  },
  {
    "text": "Python is very unusual in that\nthe way you indent things",
    "start": "2217280",
    "end": "2223270"
  },
  {
    "text": "actually affects the\nmeaning of them. ",
    "start": "2223270",
    "end": "2229460"
  },
  {
    "start": "2228000",
    "end": "2291000"
  },
  {
    "text": "And you can tell that, if I\nwere to type this in the editor, you'll note here it's\non that line, but if I hit",
    "start": "2229460",
    "end": "2238080"
  },
  {
    "text": "Return, it automatically\nindents it. That's the auto indent feature\nI mentioned earlier in the",
    "start": "2238080",
    "end": "2243790"
  },
  {
    "text": "editor of IDLE. And this tells me how these\nthings line up.",
    "start": "2243790",
    "end": "2250920"
  },
  {
    "text": "So the fact that this is here\ntells me I execute it only as",
    "start": "2250920",
    "end": "2257319"
  },
  {
    "text": "part of the else clause. The program would mean something\nquite different if I",
    "start": "2257320",
    "end": "2263580"
  },
  {
    "text": "wrote this.  Then it would mean, if x mod\n2 is zero, print even.",
    "start": "2263580",
    "end": "2275310"
  },
  {
    "text": "Otherwise, print odd. And whether or not it was\neven or odd, do this",
    "start": "2275310",
    "end": "2280370"
  },
  {
    "text": "test in the if statement.  So the indentation actually\naffects the",
    "start": "2280370",
    "end": "2288440"
  },
  {
    "text": "meaning of the program. Now a lot of other languages,\nalmost all other languages,",
    "start": "2288440",
    "end": "2295120"
  },
  {
    "start": "2291000",
    "end": "2427000"
  },
  {
    "text": "don't do that. They have some punctuation. For example, c uses set braces\nto designate what's called a",
    "start": "2295120",
    "end": "2303180"
  },
  {
    "text": "block of code. ",
    "start": "2303180",
    "end": "2309849"
  },
  {
    "text": "If you look, however, at a\nwell-written piece of C code, or Java code, or any other\nlanguage that I know,",
    "start": "2309850",
    "end": "2318820"
  },
  {
    "text": "programmers are trained to use\nindentation to show the structure of the program.",
    "start": "2318820",
    "end": "2325770"
  },
  {
    "text": "Even though you don't need, it\nyou could line up everything right at the left edge and\njust use the punctuation.",
    "start": "2325770",
    "end": "2333330"
  },
  {
    "text": "People don't do that. And the reason they don't do\nthat is programs are intended",
    "start": "2333330",
    "end": "2339880"
  },
  {
    "text": "to be read, not just executed.",
    "start": "2339880",
    "end": "2351470"
  },
  {
    "text": "Why are they intended\nto be read? Because the only reason, the\nonly way you can debug a",
    "start": "2351470",
    "end": "2357890"
  },
  {
    "text": "program is reading\nthe code in it. ",
    "start": "2357890",
    "end": "2363920"
  },
  {
    "text": "Typically, you want to write\nyour program so that if you look at it from a distance, the\nvisual structure of the",
    "start": "2363920",
    "end": "2371220"
  },
  {
    "text": "program reflects the semantics\nof the program. And that's why people use\nindentation when they don't",
    "start": "2371220",
    "end": "2378339"
  },
  {
    "text": "need to, so that you can see the\nstructure of the program by looking at it on your screen\nand not having to parse",
    "start": "2378340",
    "end": "2386850"
  },
  {
    "text": "each symbol. The authors of Python made what\nI think is a very good",
    "start": "2386850",
    "end": "2392760"
  },
  {
    "text": "design decision. They said, well, if that's the\nway you ought to write your programs, let's force people to\nwrite their programs that",
    "start": "2392760",
    "end": "2400309"
  },
  {
    "text": "way and guarantee that the\nvisual structure of the",
    "start": "2400310",
    "end": "2406400"
  },
  {
    "text": "program actually matches\nthe semantic structure. The problem with languages like\nC and Java is that you",
    "start": "2406400",
    "end": "2415310"
  },
  {
    "text": "can indent things and fool the\nreader of the program by making it look like something is\nunder something else, when",
    "start": "2415310",
    "end": "2424180"
  },
  {
    "text": "in fact it really isn't, because\nof the punctuation. So here we have a guarantee\nthat the visual structure",
    "start": "2424180",
    "end": "2431789"
  },
  {
    "start": "2427000",
    "end": "2576000"
  },
  {
    "text": "matches the semantic structure,\nand I think that was one of the really good\ndesign decisions in Python.",
    "start": "2431790",
    "end": "2440690"
  },
  {
    "text": "OK, people see that? So we could execute\nthis program.",
    "start": "2440690",
    "end": "2446180"
  },
  {
    "text": "Let me get back to what\nit was before. Control z is the go back.",
    "start": "2446180",
    "end": "2453080"
  },
  {
    "text": " And now we can enter an integer,\nsay 14, and it will",
    "start": "2453080",
    "end": "2460900"
  },
  {
    "text": "tell us it's even. I can run it again, and now I'll\nput 15 in, and it will",
    "start": "2460900",
    "end": "2470809"
  },
  {
    "text": "tell me it's odd. We'll try it once more.",
    "start": "2470810",
    "end": "2477769"
  },
  {
    "text": "We'll put in 17. It was odd and it's not\ndivisible by three.",
    "start": "2477770",
    "end": "2485160"
  },
  {
    "text": "These kinds of programs are\ncalled branching programs. ",
    "start": "2485160",
    "end": "2501220"
  },
  {
    "text": "And that's because the structure\nof them, as you go down you execute some\nstatements, and then there's a",
    "start": "2501220",
    "end": "2506690"
  },
  {
    "text": "branch which says execute these\nstatements or execute those statements.",
    "start": "2506690",
    "end": "2513530"
  },
  {
    "text": "And then typically it comes back\ntogether and continues.",
    "start": "2513530",
    "end": "2520530"
  },
  {
    "text": "Of course, branches can\nhave sub-branches. We could do this and then\njoin further down,",
    "start": "2520530",
    "end": "2529460"
  },
  {
    "text": "as we've seen here.  Now branching programs are much\nmore interesting than",
    "start": "2529460",
    "end": "2536820"
  },
  {
    "text": "straight line programs. We can do a lot of things with\nthem, but fundamentally",
    "start": "2536820",
    "end": "2544450"
  },
  {
    "text": "nothing really interesting. And we can think about that by\nthinking about how long it",
    "start": "2544450",
    "end": "2553190"
  },
  {
    "text": "takes a branching\nprogram to run. So let's first ask the question,\nhow long does it",
    "start": "2553190",
    "end": "2559650"
  },
  {
    "text": "take a straight line\nprogram to run? 14 seconds?",
    "start": "2559650",
    "end": "2564780"
  },
  {
    "text": "No, that's not the way\nto think about it. How would we think about how\nlong it takes it to run?",
    "start": "2564780",
    "end": "2570260"
  },
  {
    "text": "What governs the length\nof time a straight line program can take?",
    "start": "2570260",
    "end": "2576135"
  },
  {
    "start": "2576000",
    "end": "2727000"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: Exactly. The number of statements or\ncommands in the program.",
    "start": "2576135",
    "end": "2582609"
  },
  {
    "text": "Since it executes every command\nexactly once, if you have 100 command, it will\nhave 100 steps in it.",
    "start": "2582610",
    "end": "2591350"
  },
  {
    "text": "Now there's some variation on\nhow long each step will be. Some commands might take longer\nthan others, but the",
    "start": "2591350",
    "end": "2598400"
  },
  {
    "text": "length of time it can take\nto run has nothing to do with its input. It has to do only with the\nnumber of lines of code.",
    "start": "2598400",
    "end": "2608930"
  },
  {
    "text": "And that tells us it's not very\nuseful because, well, we",
    "start": "2608930",
    "end": "2614230"
  },
  {
    "text": "can only type so many lines\nin our lifetime. Well branching programs\nhave the same problem.",
    "start": "2614230",
    "end": "2620180"
  },
  {
    "text": " In a branching program,\neach command is",
    "start": "2620180",
    "end": "2625200"
  },
  {
    "text": "executed at most once. So again, the length of time\nit takes to execute the",
    "start": "2625200",
    "end": "2633170"
  },
  {
    "text": "program is governed strictly\nby the size of the program.",
    "start": "2633170",
    "end": "2639819"
  },
  {
    "text": "Why isn't that good enough? Well, think about a program,\nsay, to compute the GPA of all",
    "start": "2639820",
    "end": "2647330"
  },
  {
    "text": "the students at MIT.  Well how long is that\ngoing to take?",
    "start": "2647330",
    "end": "2653589"
  },
  {
    "text": " Think instead about a program to\ncompute the GPA of all the",
    "start": "2653590",
    "end": "2661630"
  },
  {
    "text": "students at the University of\nMichigan, which is probably 10 times bigger than MIT.",
    "start": "2661630",
    "end": "2668730"
  },
  {
    "text": "Well you would expect that\nto take longer, right? Because you have to look\nat more students.",
    "start": "2668730",
    "end": "2675270"
  },
  {
    "text": "And in fact, it's true. Most programs that are\ninteresting, the amount of",
    "start": "2675270",
    "end": "2680390"
  },
  {
    "text": "time they take to run should\ndepend not on the length of the program, but on the size of\nthe data that you want to",
    "start": "2680390",
    "end": "2688130"
  },
  {
    "text": "evaluate using the program. So you would argue that the\namount of time taken to",
    "start": "2688130",
    "end": "2694500"
  },
  {
    "text": "compute the GPA of the students\nat MIT should be proportional to the number of\nstudents, not proportional to",
    "start": "2694500",
    "end": "2702260"
  },
  {
    "text": "the length of the program\nused to do it. We'll talk a lot more about that\nlater in the term in a",
    "start": "2702260",
    "end": "2708779"
  },
  {
    "text": "much more thorough way. But it's important to get that\nas something you think about.",
    "start": "2708780",
    "end": "2718109"
  },
  {
    "text": "So the fact that branching\nprograms are not proportional in time to the input means that\nthey're limited in what",
    "start": "2718110",
    "end": "2725390"
  },
  {
    "text": "they can do. So that gets us to the final\nconcept we need to write every",
    "start": "2725390",
    "end": "2733150"
  },
  {
    "text": "program that could ever be\nwritten, or at least to compute every function that\ncould ever be computed.",
    "start": "2733150",
    "end": "2741650"
  },
  {
    "text": "And that's some sort of\na looping construct. ",
    "start": "2741650",
    "end": "2756599"
  },
  {
    "text": "Once we add loops, we get to a\nclass of programming languages",
    "start": "2756600",
    "end": "2762150"
  },
  {
    "text": "or programming constructs that's\ncalled Turing Complete.",
    "start": "2762150",
    "end": "2767390"
  },
  {
    "text": "And I mentioned this\nlast time. Any program that can be written,\nor any function that",
    "start": "2767390",
    "end": "2773150"
  },
  {
    "text": "can be computed, rather, can\nbe computed in a Turing Complete language.",
    "start": "2773150",
    "end": "2780099"
  },
  {
    "text": "So let's look at an\nexample here.  This concept, by the way,\nis called iteration.",
    "start": "2780100",
    "end": "2787513"
  },
  {
    "start": "2787513",
    "end": "2793619"
  },
  {
    "text": "And if we look at languages with\niteration, what we'll see",
    "start": "2793620",
    "end": "2800850"
  },
  {
    "text": "is a more complicated\nflow of control. You execute some statements,\nmaybe you do some",
    "start": "2800850",
    "end": "2807279"
  },
  {
    "text": "branching if you want. ",
    "start": "2807280",
    "end": "2813520"
  },
  {
    "text": "But then you're allowed to go\nback and execute statements",
    "start": "2813520",
    "end": "2819480"
  },
  {
    "text": "you've already executed. Typically what you have\nis another branch. ",
    "start": "2819480",
    "end": "2829450"
  },
  {
    "text": "One branch goes back\nand one continues. ",
    "start": "2829450",
    "end": "2835200"
  },
  {
    "text": "So now we see we can execute\na statement more than once.",
    "start": "2835200",
    "end": "2840570"
  },
  {
    "text": "Suddenly we have enormous\npower at our disposal.",
    "start": "2840570",
    "end": "2845820"
  },
  {
    "text": "So let's look at an\nexample of that. ",
    "start": "2845820",
    "end": "2863640"
  },
  {
    "text": "By the way, I'm skipping some\nof the code in your handout, but that's probably fine because\nit's there for you to",
    "start": "2863640",
    "end": "2873530"
  },
  {
    "text": "be able to read. And what I would recommend by\nthe way, is that we will post the handouts on the web, but\nat the end of every lecture",
    "start": "2873530",
    "end": "2882880"
  },
  {
    "text": "within a few hours or a few days\nat least, go through the handouts and make sure you\nunderstand everything in.",
    "start": "2882880",
    "end": "2891150"
  },
  {
    "text": "Because if you don't, you're\nprobably missing something you'll need to understand\nto do the problem sets.",
    "start": "2891150",
    "end": "2896349"
  },
  {
    "text": " So here's a little program that\nfinds the cube root of a",
    "start": "2896350",
    "end": "2902860"
  },
  {
    "text": "perfect cube. This, by the way, is a useful\ncomment here, right?",
    "start": "2902860",
    "end": "2908280"
  },
  {
    "text": "Tells you what the program\nis intended to do. So we get an integer.",
    "start": "2908280",
    "end": "2913770"
  },
  {
    "text": "We set the variable\nans to zero. And then while ans times ans\ntimes ans is less than the",
    "start": "2913770",
    "end": "2921820"
  },
  {
    "text": "absolute value of x,\nwe're going to set ans to ans plus 1.",
    "start": "2921820",
    "end": "2928230"
  },
  {
    "text": "We could print where we are. I put those sort of things in\nas debugging statements.",
    "start": "2928230",
    "end": "2934180"
  },
  {
    "text": "If ans times ans times ans is\nnot equal to the absolute",
    "start": "2934180",
    "end": "2939569"
  },
  {
    "text": "value of x when I finish the\nloop, then I'll print x is not",
    "start": "2939570",
    "end": "2946800"
  },
  {
    "text": "a perfect cube. Otherwise I have to do something\nto deal with",
    "start": "2946800",
    "end": "2952050"
  },
  {
    "text": "positive and negative values. Now I know that this was fast\nand that most of you probably",
    "start": "2952050",
    "end": "2960620"
  },
  {
    "text": "don't fully assimilate\nthis program. Do not worry. It will be discussed in\nrecitations tomorrow.",
    "start": "2960620",
    "end": "2970040"
  },
  {
    "text": "So tomorrow, the recitations\nwill review the Python concepts we've discussed today,\nbut we'll start by",
    "start": "2970040",
    "end": "2978870"
  },
  {
    "text": "emphasizing how these\nloops work. OK. Thanks for coming.",
    "start": "2978870",
    "end": "2984020"
  },
  {
    "text": "Enjoy recitation tomorrow. ",
    "start": "2984020",
    "end": "2988757"
  }
]