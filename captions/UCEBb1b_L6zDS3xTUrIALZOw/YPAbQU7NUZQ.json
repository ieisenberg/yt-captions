[
  {
    "text": " PROFESSOR: Chapter six, problem\nset three, problem set two solutions.",
    "start": "0",
    "end": "6140"
  },
  {
    "start": "6140",
    "end": "207510"
  },
  {
    "text": "OK. Good morning. Nice to see you all again\non this mild day.",
    "start": "207510",
    "end": "212690"
  },
  {
    "text": "I want to start off by thanking\nAshish greatly for giving the last three\nlectures.",
    "start": "212690",
    "end": "219610"
  },
  {
    "text": "I have very high confidence in\nAshish, and I'm sure he give you excellent lectures and was\nable to answer all your",
    "start": "219610",
    "end": "225090"
  },
  {
    "text": "questions, right?  But if you feel dissatisfied at\nany point, you'll have an",
    "start": "225090",
    "end": "232000"
  },
  {
    "text": "opportunity to ask the\nquestion again today. ",
    "start": "232000",
    "end": "237020"
  },
  {
    "text": "We will continue now\nin chapter six. I understand Ashish got up to\nsection six point one already,",
    "start": "237020",
    "end": "244010"
  },
  {
    "text": "so that makes my life\na little easier. And we'll just continue to plow\nahead through the notes.",
    "start": "244010",
    "end": "249870"
  },
  {
    "text": "You have as handouts today\nchapter six, the outgoing",
    "start": "249870",
    "end": "256600"
  },
  {
    "text": "problem set, the solutions to\nthe incoming problem set.",
    "start": "256600",
    "end": "261769"
  },
  {
    "text": "So does anyone have any comments\nor questions or suggestions as we go forward\nat this point?",
    "start": "261769",
    "end": "270120"
  },
  {
    "text": "Let's say I'll do a very quick\nreview of everything so far, at least what we need to\nproceed, so you'll have a",
    "start": "270120",
    "end": "277439"
  },
  {
    "text": "chance to ask questions along\nthere if you like. Anyone have anything to say?",
    "start": "277440",
    "end": "283040"
  },
  {
    "text": "Anyone want to say\nthanks to Ashish? ",
    "start": "283040",
    "end": "288830"
  },
  {
    "text": "All right. Great. OK. So a very quick review.",
    "start": "288830",
    "end": "297190"
  },
  {
    "text": "We first said we were going to\nwork with a continuous time",
    "start": "297190",
    "end": "302300"
  },
  {
    "text": "Additive White Gaussian noise\nchannel, but we quickly reduced it to a discrete\ntime additive white",
    "start": "302300",
    "end": "308780"
  },
  {
    "text": "Gaussian noise model. Vector model, Y equals X plus N,\nwhere the vectors may go on",
    "start": "308780",
    "end": "315030"
  },
  {
    "text": "as long as you like. And implicit in here is we\nhave some kind of power limitation expressed\nby various --",
    "start": "315030",
    "end": "321980"
  },
  {
    "text": "I know I've probably introduced\ntoo many parameters in the early part\nof the course.",
    "start": "321980",
    "end": "327710"
  },
  {
    "text": "But you'll see them all in the\nliterature, and I thought you might as well see the relation\nbetween them all at once.",
    "start": "327710",
    "end": "336180"
  },
  {
    "text": "The noise. The main thing about this\nis it's an independent, identically distributed noise,\nalso independent of X, and",
    "start": "336180",
    "end": "344640"
  },
  {
    "text": "it's characterized simply by\nits variance per symbol, or average power.",
    "start": "344640",
    "end": "349960"
  },
  {
    "text": "Again, there are various\nnotations that we can use for its power.",
    "start": "349960",
    "end": "357310"
  },
  {
    "text": "OK. However you express the power\nof the signal of the noise,",
    "start": "357310",
    "end": "363310"
  },
  {
    "text": "you're going to get some\nsignal-to-noise ratio out of that, as long as you use\nconsistent the same units for",
    "start": "363310",
    "end": "369160"
  },
  {
    "text": "signal and noise. And so the key parameters\nof this channel turn out to be just two.",
    "start": "369160",
    "end": "376159"
  },
  {
    "text": "One is the signal-to-noise\nratio. And the other is something which\nin the discrete time",
    "start": "376160",
    "end": "383000"
  },
  {
    "text": "domain we might think of as a\ndata rate, rho, the number of bits per two dimensions.",
    "start": "383000",
    "end": "388880"
  },
  {
    "text": "But we were at pains\nto show -- and the reason we measure it in\nbits per two dimensions is",
    "start": "388880",
    "end": "395379"
  },
  {
    "text": "that it converts directly to the\nspectral efficiency, or we sometimes say, the nominal\nspectral efficiency, or the",
    "start": "395380",
    "end": "402990"
  },
  {
    "text": "Nyquist spectral efficiency. Basically, this is the spectral\nefficiency if you",
    "start": "402990",
    "end": "408330"
  },
  {
    "text": "assume that you only use the\nnominal Nyquist bandwidth. And both in 450 and here it was\nshown that you can really",
    "start": "408330",
    "end": "417630"
  },
  {
    "text": "get as close to the nominal\nbandwidth as you like, its",
    "start": "417630",
    "end": "423710"
  },
  {
    "text": "sharp or roll off as you\nlike, by using filters. Very sharp filters or very sharp\ndigital filters that",
    "start": "423710",
    "end": "435830"
  },
  {
    "text": "today we can really\nrealistically get effectively to the Nyquist bandwidth.",
    "start": "435830",
    "end": "443700"
  },
  {
    "text": "So this is a good measure of\nnominal spectral efficiency, which is an extremely important\nparameter, the",
    "start": "443700",
    "end": "449780"
  },
  {
    "text": "spectral efficiency in\ncontinuous time. And then the Shannon limit is\nexpressed in this very simple",
    "start": "449780",
    "end": "456820"
  },
  {
    "text": "form that we can never do better\nin data rate or nominal",
    "start": "456820",
    "end": "464020"
  },
  {
    "text": "spectral efficiency than\nlog of 1 plus SNR. And the units are bits\nper two dimensions.",
    "start": "464020",
    "end": "471860"
  },
  {
    "text": "So there's an awful lot about\nparameters and units in the first part of the course, and\nsometimes it's a little",
    "start": "471860",
    "end": "477850"
  },
  {
    "text": "overwhelming and confusing.  But in my experience in\nengineering is, it's extremely",
    "start": "477850",
    "end": "485670"
  },
  {
    "text": "important to get the\nunits right. It helps you in thinking\nclearly.",
    "start": "485670",
    "end": "491470"
  },
  {
    "text": "It helps you to focus\non the right things. And so in the first couple of\nchapters, there's a lot of",
    "start": "491470",
    "end": "496530"
  },
  {
    "text": "emphasis on getting\nthe units right. For instance, bits per\ntwo dimensions. I could simply assert to you\nthat things are always to come",
    "start": "496530",
    "end": "505590"
  },
  {
    "text": "out better if you do things\nper two dimensions. This basically has to do with\nGaussian distributions being",
    "start": "505590",
    "end": "514039"
  },
  {
    "text": "simpler in two dimensions than\nthey are in one dimension. So you know you can get closed\nform integrals in two and four",
    "start": "514039",
    "end": "521630"
  },
  {
    "text": "and so forth dimensions that you\ncan't get in one and three and so forth dimensions. So you know, the geometrical\nformulas for the volume of the",
    "start": "521630",
    "end": "530350"
  },
  {
    "text": "sphere and so forth are much\nsimpler in even dimensions than they are in\nodd dimensions.",
    "start": "530350",
    "end": "535550"
  },
  {
    "text": "This all, I think, has to do\nwith the fact that really a",
    "start": "535550",
    "end": "540610"
  },
  {
    "text": "one-dimensional complex Gaussian\nvariable, or in general, complex Gaussian\nvariables, are in some sense",
    "start": "540610",
    "end": "546570"
  },
  {
    "text": "mathematically simpler than\nreal Gaussian variables. For instance, the Q function\nis a very ugly thing.",
    "start": "546570",
    "end": "554270"
  },
  {
    "text": "In two dimensions, you can\nclosed-form integrals with probability of error. So there's a lot of clues that\nwe really want to think in",
    "start": "554270",
    "end": "562210"
  },
  {
    "text": "terms of pairs of\nreal dimensions. ",
    "start": "562210",
    "end": "569580"
  },
  {
    "text": "All right. And then we introduced a\ncouple more parameters. And I understand Ashish\ngot the questions",
    "start": "569580",
    "end": "575580"
  },
  {
    "text": "that I get every year. Why do we introduce both\nof these things? SNR norm, which is SNR\nnormalized by 2 to the rho",
    "start": "575580",
    "end": "583130"
  },
  {
    "text": "minus 1, that's motivated\ndirectly by the Shannon limit formula. Or Eb over N_0, which is\nSNR divided by rho.",
    "start": "583130",
    "end": "592720"
  },
  {
    "text": "You know, these are\nboth more or less equivalent to each other. From this Eb over N_0 is just 2\nto the rho minus 1 over rho",
    "start": "592720",
    "end": "600240"
  },
  {
    "text": "times SNR norm, so why do we\nintroduce both of them? And there's not an\nintellectually very strong",
    "start": "600240",
    "end": "611900"
  },
  {
    "text": "argument to introduce\nboth of them. Because one is easily translated\ninto the other.",
    "start": "611900",
    "end": "620530"
  },
  {
    "text": "For fixed nominal spectral\nefficiency rho, there clearly",
    "start": "620530",
    "end": "626060"
  },
  {
    "text": "is just a one-to-one\ntranslation. We could use either one. If you graph something versus\nEb over N_0 or versus SNR",
    "start": "626060",
    "end": "633900"
  },
  {
    "text": "norm, it's just a matter of\nshifting it by this factor. They're going to be exactly the\nsame graph with the 0 dB",
    "start": "633900",
    "end": "642230"
  },
  {
    "text": "point in a different place,\naccording to where 0 dB is.",
    "start": "642230",
    "end": "647649"
  },
  {
    "text": "Philosophically, of course, SNR\nnorm, which is sometimes called the gap to capacity, is\nexactly a measure of how many",
    "start": "647650",
    "end": "658960"
  },
  {
    "text": "dBs away are we from\nthe Shannon limit. Measuring things on\na log scale in dB.",
    "start": "658960",
    "end": "666570"
  },
  {
    "text": "And so 0 dB is always the\nShannon limit point with SNR norm, because this statement\ntranslates into SNR norm is",
    "start": "666570",
    "end": "675700"
  },
  {
    "text": "greater than 1, which is 0 dB. So here the focus is always, how\nfar are you from capacity?",
    "start": "675700",
    "end": "683040"
  },
  {
    "text": "How far are you from\nthe Shannon limit? And that really is\nthe modern view.",
    "start": "683040",
    "end": "689200"
  },
  {
    "text": "In the early days of coding, the\nview was, well, how much coding gain can we get\nover no coding?",
    "start": "689200",
    "end": "695160"
  },
  {
    "text": "And as we'll see, Eb over N_0\nis often a very convenient",
    "start": "695160",
    "end": "702959"
  },
  {
    "text": "parameter to use when we're\nfocusing on coding gain. In fact, for binary linear block\ncodes, which is what",
    "start": "702960",
    "end": "709040"
  },
  {
    "text": "we're talking about in chapter\nsix, we get an extremely simple expression that Eb over\nN_0 it's just kd over N, where",
    "start": "709040",
    "end": "717700"
  },
  {
    "text": "N, k, d are the basic parameters\nof a block code. If you don't know those\nyet, you will by",
    "start": "717700",
    "end": "724150"
  },
  {
    "text": "the end of this lecture. And Eb over N_0 is what was put\nforward in the early days,",
    "start": "724150",
    "end": "734209"
  },
  {
    "text": "when the principal coding\napplication was coding for deep space communications. It makes sense in the\npower-limited regime.",
    "start": "734210",
    "end": "742320"
  },
  {
    "text": "In the power-limited regime,\nwe showed that this essentially goes -- this is rho\nlog2 over rho, so up to a",
    "start": "742320",
    "end": "751540"
  },
  {
    "text": "factor of natural logarithm of\ntwo, these are the same, almost independent of the\nspectral efficiency, as well.",
    "start": "751540",
    "end": "759610"
  },
  {
    "text": "And so this is a very natural\nthing to use, especially in the power-limited regime.",
    "start": "759610",
    "end": "766240"
  },
  {
    "text": "In the bandwidth-limited regime,\nas rho gets large, then these things become\nvery different.",
    "start": "766240",
    "end": "772910"
  },
  {
    "text": "SNR norm always keeps us in\nthe neighborhood of 0 dB. This thing goes up to 10 dB,\n20 dB, 30 dB, and so forth.",
    "start": "772910",
    "end": "781209"
  },
  {
    "text": "Nonetheless, you'll see in\nsome literature, people continue to measure against Eb\nover N_0 maybe I would say,",
    "start": "781210",
    "end": "789910"
  },
  {
    "text": "just because they don't\nknow any better. Anyway, since I started writing\nthese notes about",
    "start": "789910",
    "end": "796000"
  },
  {
    "text": "eight or nine years ago, I've\nbeen advocating SNR norm. It's more and more widely\nused in our business,",
    "start": "796000",
    "end": "803830"
  },
  {
    "text": "in the coding business. Or equivalently, one always\nshows nowadays how far are you",
    "start": "803830",
    "end": "810680"
  },
  {
    "text": "from capacity, and that's\nwhat SNR norm is about. And you can always translate\nthis into this and this into",
    "start": "810680",
    "end": "818690"
  },
  {
    "text": "this by this simple formula. So that's why we introduce\nthem both. Eb over N_0 is traditional.",
    "start": "818690",
    "end": "824630"
  },
  {
    "text": "SNR norm is more of the modern\ngap to capacity viewpoint.",
    "start": "824630",
    "end": "829821"
  },
  {
    "text": "Any questions about that? Because I understood that\nAshish got a number of",
    "start": "829821",
    "end": "834830"
  },
  {
    "text": "questions about that. Yes? AUDIENCE: And the probability\nof error you mentioned [UNINTELLIGIBLE] is natural\nwith SNR model.",
    "start": "834830",
    "end": "843550"
  },
  {
    "text": "PROFESSOR: Well, this\nis a slightly different point, actually.  So we go on from this to talk\nabout the power-limited",
    "start": "843550",
    "end": "851060"
  },
  {
    "text": "regime, which we defined more\nor less arbitrarily as the regime where rho is less than\nor equal to two bits per two",
    "start": "851060",
    "end": "857860"
  },
  {
    "text": "dimensions, and the\nbandwidth-limited regime, which is where rho is larger.",
    "start": "857860",
    "end": "863800"
  },
  {
    "text": "And at this point, I simply\nassert that it's better to do",
    "start": "863800",
    "end": "870310"
  },
  {
    "text": "everything per two dimensions\nin the bandwidth-limited regime and to do everything\nper bit in the",
    "start": "870310",
    "end": "879120"
  },
  {
    "text": "power-limited regime. And the reason for this is\nbasically long practice and",
    "start": "879120",
    "end": "887410"
  },
  {
    "text": "intuition and experience that\nthings do work out better, and this is the proper\nnormalization.",
    "start": "887410",
    "end": "893980"
  },
  {
    "text": "But I think at this point\nin the course, with your background, this is only an\nassertion, all right?",
    "start": "893980",
    "end": "900350"
  },
  {
    "text": "So I simply say, this is the way\nwe're going to do things",
    "start": "900350",
    "end": "905589"
  },
  {
    "text": "in bandwidth-limited\nand power-limited. For most of the rest of the\ncourse, we're going to be in",
    "start": "905590",
    "end": "913220"
  },
  {
    "text": "the power-limited regime. Then we'll come back to the\nbandwidth-limited very late in",
    "start": "913220",
    "end": "918820"
  },
  {
    "text": "the course. So you can now forget this\nassertion for a while.",
    "start": "918820",
    "end": "926400"
  },
  {
    "text": "Yes? AUDIENCE: [INAUDIBLE]  PROFESSOR: Well, I'm trying\nto focus on that here.",
    "start": "926400",
    "end": "933430"
  },
  {
    "text": "That if two systems have\ndifferent rhos, then you should take that into account\nin their comparison.",
    "start": "933430",
    "end": "942330"
  },
  {
    "text": "And when you see charts of a\nrate 7/8 system, or a rho 7/4",
    "start": "942330",
    "end": "959200"
  },
  {
    "text": "system versus one that's rate\n1/8, those are very different regimes, and it probably isn't\nfair to compare two systems,",
    "start": "959200",
    "end": "970490"
  },
  {
    "text": "just in terms of their\nprobability of error versus Eb over N_0 at two different\nspectral efficiencies.",
    "start": "970490",
    "end": "976480"
  },
  {
    "text": "What is more fair is to compare\nthem in terms of their gap to capacity.",
    "start": "976480",
    "end": "982560"
  },
  {
    "text": " You can get more powerful\ncodes with more",
    "start": "982560",
    "end": "990640"
  },
  {
    "text": "error-correcting capability the\nlower in rate that you go. And so you should start from\nthe point of view that two",
    "start": "990640",
    "end": "999960"
  },
  {
    "text": "systems with different rho are\nincomparable, and then using",
    "start": "999960",
    "end": "1005330"
  },
  {
    "text": "this you can say, but, you know,\nif we can get within 1 dB of the Shannon limit with\nboth of them, then they're",
    "start": "1005330",
    "end": "1011440"
  },
  {
    "text": "both approximately\nequally powerful. That would be the modern\npoint of view.",
    "start": "1011440",
    "end": "1016640"
  },
  {
    "text": "But it's really apples and\noranges if they have different rates, different rhos.",
    "start": "1016640",
    "end": "1023560"
  },
  {
    "text": "Yes? AUDIENCE: [INAUDIBLE]  If [UNINTELLIGIBLE]",
    "start": "1023560",
    "end": "1030115"
  },
  {
    "text": "systems modulation\n[INAUDIBLE]. Then is it fair --",
    "start": "1030115",
    "end": "1036910"
  },
  {
    "text": "because if one of them\nhas coding -- PROFESSOR: If none of them\nhave coding, well --",
    "start": "1036910",
    "end": "1044709"
  },
  {
    "text": "AUDIENCE: No, just modulation.  PROFESSOR: So what shall\nI say to that.",
    "start": "1044710",
    "end": "1051870"
  },
  {
    "text": "In the power-limited regime,\nan uncoded system is simply binary modulation or 4-QAM,\nand there aren't different",
    "start": "1051870",
    "end": "1061900"
  },
  {
    "text": "systems to compare, really. There's only one baseline\nsystem. As you go up into the\nbandwidth-limited regime, then",
    "start": "1061900",
    "end": "1071105"
  },
  {
    "text": "it is fair to compare\nsystems of the same class, like M by M QAM.",
    "start": "1071105",
    "end": "1078650"
  },
  {
    "text": "That's a simple uncoded\nsystem. Now there, rho keeps changing.",
    "start": "1078650",
    "end": "1084060"
  },
  {
    "text": "rho equals 2, rho equals 4, rho\nequals 6, rho equals 8. Or you can easily find\nintermediate",
    "start": "1084060",
    "end": "1091210"
  },
  {
    "text": "rates that are uncoded. And there you find that this\nnormalization makes all these",
    "start": "1091210",
    "end": "1097740"
  },
  {
    "text": "systems comparable. In fact, we saw that we got a\nuniversal baseline curve for",
    "start": "1097740",
    "end": "1104160"
  },
  {
    "text": "the bandwidth-limited regime,\nwhich was independent of rho, for, say, the class of 4 by\n4, by the class of M by M",
    "start": "1104160",
    "end": "1113520"
  },
  {
    "text": "bandwidth-limited QAM systems. I'm sorry. I got off a plane at nine\no'clock last night, so I may",
    "start": "1113520",
    "end": "1121600"
  },
  {
    "text": "not be totally coherent today. But all of these systems have\nexactly the same baseline",
    "start": "1121600",
    "end": "1129750"
  },
  {
    "text": "curve up to the approximations\nwe've made that their exactly",
    "start": "1129750",
    "end": "1135210"
  },
  {
    "text": "four nearest neighbors\nand so forth. But on a curve of probability\nof error per two dimensions,",
    "start": "1135210",
    "end": "1142040"
  },
  {
    "text": "per QAM symbol, versus\nSNR norm, we get a universal curve.",
    "start": "1142040",
    "end": "1148290"
  },
  {
    "text": "So that indicates they really\nare comparable. They form a class where the\nperformance of the class is",
    "start": "1148290",
    "end": "1155460"
  },
  {
    "text": "independent of rho. And that's sort of typical of\nthe bandwidth-limited regime.",
    "start": "1155460",
    "end": "1160730"
  },
  {
    "text": "Two systems that differ, that\nbasically use the same code with smaller constellation\nor a larger-based uncoded",
    "start": "1160730",
    "end": "1168220"
  },
  {
    "text": "constellation are going to be\ndirectly comparable, and are probably going to have the\nsame gap to capacity.",
    "start": "1168220",
    "end": "1175370"
  },
  {
    "text": "Going to be just as far away\nfrom the Shannon limit. But we don't have that\nphenomenon in the power-limited case.",
    "start": "1175370",
    "end": "1180660"
  },
  {
    "text": " Other questions, or\nshall I proceed?",
    "start": "1180660",
    "end": "1186779"
  },
  {
    "text": " OK. ",
    "start": "1186780",
    "end": "1192880"
  },
  {
    "text": "Again continuing what I hope\nwill be a quick review, but I",
    "start": "1192880",
    "end": "1198490"
  },
  {
    "text": "don't want to go any faster than\nyou're comfortable with. ",
    "start": "1198490",
    "end": "1205960"
  },
  {
    "text": "We get this baseline curve\nfor 2-PAM or 2",
    "start": "1205960",
    "end": "1212140"
  },
  {
    "text": "by 2 QAM, same thing. ",
    "start": "1212140",
    "end": "1218399"
  },
  {
    "text": "So this is the baseline of Pb of\nE on a log scale, where we",
    "start": "1218400",
    "end": "1226520"
  },
  {
    "text": "typically go down to ten to\nthe minus six, ten to the minus five. Here's 0 dB.",
    "start": "1226520",
    "end": "1233320"
  },
  {
    "text": "This goes down through\nabout 9.6 dB here or about 10.5 dB here.",
    "start": "1233320",
    "end": "1240710"
  },
  {
    "text": "And the ultimate Shannon\nlimit is over here.",
    "start": "1240710",
    "end": "1247010"
  },
  {
    "text": "The ultimate Shannon limit for\nvery low rho, as rho goes to",
    "start": "1247010",
    "end": "1252150"
  },
  {
    "text": "0, is about minus 1.6 dB. And we get expressions.",
    "start": "1252150",
    "end": "1257630"
  },
  {
    "text": "0 dB is the Shannon limit\nat rho equals 1. At rho equals 2, it's\nup about 1.8 dB.",
    "start": "1257630",
    "end": "1265570"
  },
  {
    "text": "Shannon limit for rho equals\n2, and so forth. And anyway, so we see as a\nfunction of rho, we can",
    "start": "1265570",
    "end": "1272390"
  },
  {
    "text": "measure the gap to capacity at\ndifferent probabilities of error and see how much\ncoding gain is,",
    "start": "1272390",
    "end": "1279779"
  },
  {
    "text": "in principle, possible. And then for a coded system,\nwe can put that on here.",
    "start": "1279780",
    "end": "1286610"
  },
  {
    "text": "The effective coding gain\nis the distance between here and here.",
    "start": "1286610",
    "end": "1292760"
  },
  {
    "text": "At some target probability\nof error. It's going to differ according\nto probably of error.",
    "start": "1292760",
    "end": "1299550"
  },
  {
    "text": "You found a way of getting a\ngood, rough-cut estimate, at",
    "start": "1299550",
    "end": "1306740"
  },
  {
    "text": "least for not very complicated\ncodes called the union bound estimate for any signal\nconstellation in any number of",
    "start": "1306740",
    "end": "1317040"
  },
  {
    "text": "dimensions. So if we have a signal\nconstellation A, which",
    "start": "1317040",
    "end": "1324980"
  },
  {
    "text": "consists of M points in N\ndimensions, so forth,",
    "start": "1324980",
    "end": "1330179"
  },
  {
    "text": "basically found that we could,\nin the power-limited regime,",
    "start": "1330180",
    "end": "1336630"
  },
  {
    "text": "get an approximate expression\nfrom considering pairwise",
    "start": "1336630",
    "end": "1342190"
  },
  {
    "text": "error probabilities that's\nvery simple. And I used this notation. Q of the square root of some\ncoding gain of the",
    "start": "1342190",
    "end": "1354300"
  },
  {
    "text": "constellation times\n2 Eb over N_0.",
    "start": "1354300",
    "end": "1360330"
  },
  {
    "text": "If it's just 2-PAM then the\ncoding gain becomes 1. This is the average number\nof nearest neighbors per",
    "start": "1360330",
    "end": "1372430"
  },
  {
    "text": "transmitted bit. And so the whole thing reduces\nto this expression in terms of",
    "start": "1372430",
    "end": "1380470"
  },
  {
    "text": "couple of parameters. the principal parameter is the\nnominal coding gain, which is",
    "start": "1380470",
    "end": "1386610"
  },
  {
    "text": "the minimum squared distance of\nA over 4 times the energy",
    "start": "1386610",
    "end": "1393840"
  },
  {
    "text": "per bit of this constellation\nA. So we really only need to",
    "start": "1393840",
    "end": "1399169"
  },
  {
    "text": "know this kind of normalized\nmeasure of goodness of the",
    "start": "1399170",
    "end": "1404950"
  },
  {
    "text": "constellation. And K_b of A Is the average\nnumber of nearest neighbors.",
    "start": "1404950",
    "end": "1415810"
  },
  {
    "text": "I forget what we call it. What is the numerator here?",
    "start": "1415810",
    "end": "1423250"
  },
  {
    "text": "K_min of A, which itself is an\naverage, over the number of",
    "start": "1423250",
    "end": "1430430"
  },
  {
    "text": "bits that we're actually\nsending, which is log2 of the",
    "start": "1430430",
    "end": "1436430"
  },
  {
    "text": "size of A. So basically we only need to\nknow a couple of parameters of",
    "start": "1436430",
    "end": "1443110"
  },
  {
    "text": "this signal constellation. Its minimum square distance\nis very important.",
    "start": "1443110",
    "end": "1448480"
  },
  {
    "text": "Energy parameter, which we\nchoose to make the energy per bit, or so that we get\nthis expression.",
    "start": "1448480",
    "end": "1455020"
  },
  {
    "text": "And the average number of\nnearest neighbors per bit that we transmit. OK.",
    "start": "1455020",
    "end": "1461127"
  },
  {
    "text": " And our best example so far is\nthe tetrahedral constellation,",
    "start": "1461127",
    "end": "1473840"
  },
  {
    "text": "where we basically\npick every other point from the 4 simplex.",
    "start": "1473840",
    "end": "1484245"
  },
  {
    "text": " Maybe I should do that\nin a different color.",
    "start": "1484245",
    "end": "1490690"
  },
  {
    "text": "I don't think that's\na different color. Nope. Anyway. You know this quite\nwell by now.",
    "start": "1490690",
    "end": "1497710"
  },
  {
    "text": "And if we do that, we find that\nnormalizing everything, this is 4/3 or 1.25 dB.",
    "start": "1497710",
    "end": "1505730"
  },
  {
    "text": "And every point has three\nnearest neighbors, and we're sending 2 bits, so\nthis is 3/2.",
    "start": "1505730",
    "end": "1512330"
  },
  {
    "text": " So then we get this handy dandy\nengineering rule to make",
    "start": "1512330",
    "end": "1520020"
  },
  {
    "text": "a quick plot of the union\nbound estimate. Given that we decided to put\nthis on a log-log scale to",
    "start": "1520020",
    "end": "1527860"
  },
  {
    "text": "start with, all we have to do\nto plot this expression --",
    "start": "1527860",
    "end": "1533340"
  },
  {
    "text": "if we're given, as we always\nare, the baseline curve, which",
    "start": "1533340",
    "end": "1542570"
  },
  {
    "text": "is simply Q to the square\nroot of 2 Eb over N_0.",
    "start": "1542570",
    "end": "1549009"
  },
  {
    "text": "How do you convert this\ncurve to this curve on a log-log plot? Well, you simply move it to the\nleft by the coding gain.",
    "start": "1549010",
    "end": "1557070"
  },
  {
    "text": "And you move it up by the\nlog of whatever K_b is.",
    "start": "1557070",
    "end": "1563919"
  },
  {
    "text": "So if the dominant effect is\nmoving it left, in this case, by 1.25 dB --",
    "start": "1563920",
    "end": "1572450"
  },
  {
    "text": "I'm going to wind up getting\nabout this curve, so I won't draw it again -- then we move it up by a factor\nof 3/2, we developed a rule of",
    "start": "1572450",
    "end": "1582330"
  },
  {
    "text": "thumb that said a factor of two\nis basically going to cost you about 0.2 dB.",
    "start": "1582330",
    "end": "1590230"
  },
  {
    "text": "Around ten to the minus five. This is just based on the slope\nof this baseline curve,",
    "start": "1590230",
    "end": "1595390"
  },
  {
    "text": "as long as we're somewhat\nin that region. So this will cost us about 1/10\nof a dB, so we'll get an",
    "start": "1595390",
    "end": "1603540"
  },
  {
    "text": "effective coding gain\nof about 1.15 dB.",
    "start": "1603540",
    "end": "1609250"
  },
  {
    "text": "So graphically, we take\nthis curve bodily. We move it over 1.25 dB,\nand we move it up",
    "start": "1609250",
    "end": "1618410"
  },
  {
    "text": "by a factor of 3/2. And what we'll find is the\neffective coding gain is thereby reduced to, I estimate,\nabout 1.15 dB.",
    "start": "1618410",
    "end": "1627730"
  },
  {
    "text": "And this is all just engineering\nrules of thumb. Nice template.",
    "start": "1627730",
    "end": "1632830"
  },
  {
    "text": "I sometimes say you should\nfill out a copy of this baseline curve, cut it out, put\nit in your wallet for the",
    "start": "1632830",
    "end": "1638100"
  },
  {
    "text": "duration of this course,\nbecause you'll have the opportunity to make\nthis kind of calculation again and again.",
    "start": "1638100",
    "end": "1645150"
  },
  {
    "text": "All right. So that's union bound SNR. For simple constellations,\nthe union bound",
    "start": "1645150",
    "end": "1651150"
  },
  {
    "text": "estimate is very accurate. So this is a very good way to\nproceed, from an engineering",
    "start": "1651150",
    "end": "1657280"
  },
  {
    "text": "point of view. We want to write a paper? You know, it's a little late\nto write a paper on the",
    "start": "1657280",
    "end": "1663330"
  },
  {
    "text": "performance of the four simplex\nsignal constellations, but if you wanted to, and you\nwanted to have one graph in",
    "start": "1663330",
    "end": "1669430"
  },
  {
    "text": "that paper, you would\nhave the graph of -- well, you would actually\nprobably compute the exact",
    "start": "1669430",
    "end": "1677290"
  },
  {
    "text": "error of probability, either by\nanalysis or by Monte Carlo simulation, you would\nput that in there.",
    "start": "1677290",
    "end": "1683150"
  },
  {
    "text": "But in your first draft of the\npaper, you would put in union bound estimate and you would\nfind that wasn't far off.",
    "start": "1683150",
    "end": "1689100"
  },
  {
    "text": " OK. Any questions on that? This has basically got\nus up to chapter six.",
    "start": "1689100",
    "end": "1699029"
  },
  {
    "start": "1699030",
    "end": "1706090"
  },
  {
    "text": "So in chapter six now, which\nAshish got into last time.",
    "start": "1706090",
    "end": "1715240"
  },
  {
    "text": "This is basically about binary\nlinear block codes.",
    "start": "1715240",
    "end": "1720840"
  },
  {
    "text": " And well, we first just\nstart talking about",
    "start": "1720840",
    "end": "1728820"
  },
  {
    "text": "binary block codes. That's what Ashish\ndid last time.",
    "start": "1728820",
    "end": "1735750"
  },
  {
    "text": " We basically take 0 and 1\nas our binary alphabet.",
    "start": "1735750",
    "end": "1743309"
  },
  {
    "text": "We take a blocks of length n. Sorry. Are we using little\nn or big N?",
    "start": "1743310",
    "end": "1752020"
  },
  {
    "text": "Little n, where n is called\nthe block plank. So we take the set of all binary\nsymbols of length n,",
    "start": "1752020",
    "end": "1763760"
  },
  {
    "text": "and we're going to convert\nthis to real n space.",
    "start": "1763760",
    "end": "1771730"
  },
  {
    "text": "How do we convert it? Component-wise, by the\nstandard 2-PAM map.",
    "start": "1771730",
    "end": "1776769"
  },
  {
    "text": "We map 0 into plus alpha,\n1 into minus alpha. So this maps into plus or\nminus alpha to the n.",
    "start": "1776770",
    "end": "1786740"
  },
  {
    "text": "So the entire universe of\npossible code words that we have is this set of 2 to the\nn real n-tuples, which are",
    "start": "1786740",
    "end": "1798000"
  },
  {
    "text": "simply the vertices of an\nn cube of size 2 alpha, obviously, right? Just like this.",
    "start": "1798000",
    "end": "1804390"
  },
  {
    "text": "We have eight possible\nvertices in 3-space.",
    "start": "1804390",
    "end": "1810320"
  },
  {
    "text": "They obviously all have\nthe same power. They all lie on the surface of\na sphere of squared radius n",
    "start": "1810320",
    "end": "1817810"
  },
  {
    "text": "alpha squared. So they're not only the vertices\nof a cube, they're vertices that are spread on\nan equal energy sphere.",
    "start": "1817810",
    "end": "1826810"
  },
  {
    "text": "And the whole idea is that our\ncode is going to be some",
    "start": "1826810",
    "end": "1832480"
  },
  {
    "text": "subset of this, and the code\nwill map under the same map, which we call S, into\nsome subset of the",
    "start": "1832480",
    "end": "1843059"
  },
  {
    "text": "vertices of the n-cube. OK? And again, our favorite example\nis the tetrahedron.",
    "start": "1843060",
    "end": "1850820"
  },
  {
    "text": "For instance, if we take the\ncode as being 0, 0, 0, 0, 1,",
    "start": "1850820",
    "end": "1857950"
  },
  {
    "text": "1, 1, 0, 1 1, 1, 0, those for\nbinary three-tuples, this maps",
    "start": "1857950",
    "end": "1866149"
  },
  {
    "text": "into T, the tetrahedron. OK?",
    "start": "1866150",
    "end": "1871656"
  },
  {
    "text": "Well, we get this signal\nstructure, which we've already found the coding gain. It has a little bit\nof coding gain.",
    "start": "1871656",
    "end": "1878179"
  },
  {
    "text": "We actually accomplished\nsomething. All right.",
    "start": "1878180",
    "end": "1884159"
  },
  {
    "text": "So that's the basic idea that\nwe go through in 6.1.",
    "start": "1884160",
    "end": "1890780"
  },
  {
    "text": "That's our favorite example. And Ashish also shows you that,\nyou know, you might",
    "start": "1890780",
    "end": "1897440"
  },
  {
    "text": "think this is an awfully\nrestricted way of designing constellations.",
    "start": "1897440",
    "end": "1903260"
  },
  {
    "text": "But when we're talking about low\nspectral efficiencies, by going through the capacity\ncalculation, we can assure",
    "start": "1903260",
    "end": "1910960"
  },
  {
    "text": "ourselves that in principle,\nthis is not going to be very sub-optimal for it.",
    "start": "1910960",
    "end": "1917070"
  },
  {
    "text": "Capacity is about the regime\nwhere n gets very large for very long block codes.",
    "start": "1917070",
    "end": "1922970"
  },
  {
    "text": "We don't lose much in potential\ncoding gain, or in the Shannon limit, equivalently,\nby restricting",
    "start": "1922970",
    "end": "1930975"
  },
  {
    "text": "the input output input alphabet\nto be just these two numbers, plus or minus alpha,\nI should say, rather than",
    "start": "1930975",
    "end": "1938230"
  },
  {
    "text": "using the whole real line as\nan input, as long as the",
    "start": "1938230",
    "end": "1944309"
  },
  {
    "text": "nominal spectral efficiency is\nless than or equal to one bit",
    "start": "1944310",
    "end": "1955100"
  },
  {
    "text": "per two dimensions. And the exact numbers --",
    "start": "1955100",
    "end": "1961179"
  },
  {
    "text": "at rho equals 1, you lose about\n0.2 dB, in principle,",
    "start": "1961180",
    "end": "1967780"
  },
  {
    "text": "using the Shannon limit\nas your guide. And for lower rho, it\njust goes to 0.",
    "start": "1967780",
    "end": "1976289"
  },
  {
    "text": "And you did this last time. OK. So it's a very reasonable, and\nobviously attractive from an",
    "start": "1976290",
    "end": "1984610"
  },
  {
    "text": "implementation point of view,\nway of designing signal constellations.",
    "start": "1984610",
    "end": "1989790"
  },
  {
    "text": "And again, this is basically all\nwe're going to be talking about for the majority of\nthe course, is signal",
    "start": "1989790",
    "end": "1995060"
  },
  {
    "text": "constellations like this. But of course as we get to codes\nthat are thousands of bits long, or perhaps even\ninfinitely long, as in the",
    "start": "1995060",
    "end": "2002960"
  },
  {
    "text": "case of convolutional codes and\ntrellis codes, sometimes",
    "start": "2002960",
    "end": "2008820"
  },
  {
    "text": "you forget that we're really\ntalking about just putting points in Euclidian\nsignal space.",
    "start": "2008820",
    "end": "2015830"
  },
  {
    "text": "Because we're going to be very\nabstracted back into the binary domain.",
    "start": "2015830",
    "end": "2022320"
  },
  {
    "text": "But in this course, we're always\nthinking of codes as means of designing signal\nconstellations.",
    "start": "2022320",
    "end": "2029103"
  },
  {
    "text": " Of course, codes are used far\nmore widely than just for",
    "start": "2029103",
    "end": "2037940"
  },
  {
    "text": "signaling over the additive\nwhite Gaussian noise channel. I've sort of packaged this\ncourse as a search to get to",
    "start": "2037940",
    "end": "2048540"
  },
  {
    "text": "capacity, we have added\nthe additive white Gaussian noise channel. First of all because\nthis corresponds",
    "start": "2048540",
    "end": "2053579"
  },
  {
    "text": "very closely to history. Within this package, we can\ntalk about all of the",
    "start": "2053580",
    "end": "2059830"
  },
  {
    "text": "principal classes of codes that\nhave been developed to date, and we can compare them\nin some performance terms.",
    "start": "2059830",
    "end": "2066355"
  },
  {
    "text": " How close do they get to\ncapacity on the additive white",
    "start": "2066355",
    "end": "2071860"
  },
  {
    "text": "Gaussian noise channel. So you get most of what you\nwould get if you took a",
    "start": "2071860",
    "end": "2078100"
  },
  {
    "text": "communications-free view\nof coding theory. You know, people are interested\nin codes for",
    "start": "2078100",
    "end": "2084369"
  },
  {
    "text": "computer memories, for\nGod knows what,",
    "start": "2084370",
    "end": "2090020"
  },
  {
    "text": "lots of other things. And for many of these other\napplications, you are going to",
    "start": "2090020",
    "end": "2097500"
  },
  {
    "text": "be interested in the same\nclass of codes. Basically, you're going to want\nto maximize the distance",
    "start": "2097500",
    "end": "2103120"
  },
  {
    "text": "between code words for a given\nrate, which has to do with the size of the code.",
    "start": "2103120",
    "end": "2109300"
  },
  {
    "text": "And so you're going to be\ninterested in the same codes. Putting it in the framework of\ngetting to capacity on the",
    "start": "2109300",
    "end": "2116930"
  },
  {
    "text": "additive white Gaussian noise\nchannel gives a motivation, gives a very nice story, because\nover 50 years, we were",
    "start": "2116930",
    "end": "2124060"
  },
  {
    "text": "able to get to capacity,\nand gives it a real communications flavor.",
    "start": "2124060",
    "end": "2130240"
  },
  {
    "text": "Some of you, I'm sure, are here\nwithout any interest in communications whatsoever. You simply want to know\nabout coding.",
    "start": "2130240",
    "end": "2136360"
  },
  {
    "text": "You will still get that story,\nbut you'll get it in this nice package. That's why I do it this way.",
    "start": "2136360",
    "end": "2144840"
  },
  {
    "text": "OK. I'm about to get\ninto new stuff. End of review. Any questions?",
    "start": "2144840",
    "end": "2152819"
  },
  {
    "text": "So you must have done\na great job. Everyone understands\nperfectly.",
    "start": "2152820",
    "end": "2159120"
  },
  {
    "text": "All right. So now let's talk about,\nas I said, binary linear block codes.",
    "start": "2159120",
    "end": "2166060"
  },
  {
    "text": "When you see the word \"linear,\"\nthat's a signal that",
    "start": "2166060",
    "end": "2171220"
  },
  {
    "text": "there's some algebra ahead. And so this is the very first\npoint at which we get into",
    "start": "2171220",
    "end": "2178250"
  },
  {
    "text": "what's called algebraic\ncoding theory. The algebra will be extremely\nsimple at this",
    "start": "2178250",
    "end": "2184349"
  },
  {
    "text": "point, not to worry.  And what are we doing here?",
    "start": "2184350",
    "end": "2192730"
  },
  {
    "text": " First thing we do is to identify\n0 and 1 with the",
    "start": "2192730",
    "end": "2200740"
  },
  {
    "text": "binary field, which I'm always\ngoing to write as F2.",
    "start": "2200740",
    "end": "2205810"
  },
  {
    "text": "The older way of writing this\nis GF(2), for Galois field",
    "start": "2205810",
    "end": "2211260"
  },
  {
    "text": "with two elements. They mean exactly\nthe same thing. Nowadays most people\nwrite just F2.",
    "start": "2211260",
    "end": "2219430"
  },
  {
    "text": "Now we have [UNINTELLIGIBLE],\nwe can write this blackboard F.",
    "start": "2219430",
    "end": "2226320"
  },
  {
    "text": "And OK. Step one. We've identified our alphabet\nwith a field.",
    "start": "2226320",
    "end": "2232540"
  },
  {
    "text": " So algebraically,\nthis is a field.",
    "start": "2232540",
    "end": "2240450"
  },
  {
    "text": "Some of you know exactly\nwhat I mean by that. Others don't. We'll come back to this again.",
    "start": "2240450",
    "end": "2246060"
  },
  {
    "text": "Informally, I would say a field\nis simply something where you can add, subtract,\nmultiply, or divide.",
    "start": "2246060",
    "end": "2252970"
  },
  {
    "text": "Our best examples of that before\nnow have been the real and complex fields.",
    "start": "2252970",
    "end": "2259710"
  },
  {
    "text": "There is a more formal\ndefinition of that. In this case, we have\nonly two elements.",
    "start": "2259710",
    "end": "2265740"
  },
  {
    "text": "So let me just write down the\ntables, which you all know,",
    "start": "2265740",
    "end": "2272840"
  },
  {
    "text": "regardless of your background. What's the addition table\nfor this field? Well, 0 is the additive\nidentity.",
    "start": "2272840",
    "end": "2281609"
  },
  {
    "text": "So we know that 0 added to\nanything gives itself, so that",
    "start": "2281610",
    "end": "2289100"
  },
  {
    "text": "gives us three of the entries\nof this table. ",
    "start": "2289100",
    "end": "2294540"
  },
  {
    "text": "What do we put down here? There's really only one choice\nto satisfy one of the axioms",
    "start": "2294540",
    "end": "2300970"
  },
  {
    "text": "of the field, which is that\nunder addition, the field must",
    "start": "2300970",
    "end": "2307260"
  },
  {
    "text": "form a group. In particular, that means that\nall elements are invertible. That means that each row or\ncolumn has to be a permutation",
    "start": "2307260",
    "end": "2316319"
  },
  {
    "text": "of the group elements. And so the only possibility\nhere is to put in a 0. And well, we are forced, if\nwe're going to make 0 and 1",
    "start": "2316320",
    "end": "2326270"
  },
  {
    "text": "into a field to find an addition\ntable which is the table of mod2 addition.",
    "start": "2326270",
    "end": "2332790"
  },
  {
    "text": "You've had this stated\nas an axiom before. You can derive it just from the\nfact that 0 needs to be",
    "start": "2332790",
    "end": "2340640"
  },
  {
    "text": "the additive identity, and then\nwe need to put a 0 in here in order to get\ninvertibility.",
    "start": "2340640",
    "end": "2346885"
  },
  {
    "start": "2346885",
    "end": "2352490"
  },
  {
    "text": "Under multiplication. What is the multiplication\ntable? Well, the additive identity\nis also a nullifier under",
    "start": "2352490",
    "end": "2361180"
  },
  {
    "text": "multiplication in any field. So 0 times anything\nis equal to 0. 1 times anything is\nequal to itself.",
    "start": "2361180",
    "end": "2369410"
  },
  {
    "text": "So that completely determines\nthe multiplication table. Again, just the table of\nmod2 multiplication.",
    "start": "2369410",
    "end": "2377870"
  },
  {
    "text": "So if I'd done this\naxiomatically, I would have given you the axioms of field.",
    "start": "2377870",
    "end": "2383410"
  },
  {
    "text": "Then I would show that under\nthis binary addition operation, this multiplication\noperation,",
    "start": "2383410",
    "end": "2390799"
  },
  {
    "text": "we satisfy the axioms. I'll do that as we get\ninto chapter seven. ",
    "start": "2390800",
    "end": "2397630"
  },
  {
    "text": "OK.  So now we have 0 1 to the n,\nn-tuples, binary n-tuples, we",
    "start": "2397630",
    "end": "2412300"
  },
  {
    "text": "will now regard as n-tuples\nof field elements, F2.",
    "start": "2412300",
    "end": "2417570"
  },
  {
    "text": " And these will be regarded as\nvectors in a vector space.",
    "start": "2417570",
    "end": "2429648"
  },
  {
    "text": "Well, I'll just say that F2 to\nthe n is a vector space, which",
    "start": "2429648",
    "end": "2435329"
  },
  {
    "text": "clearly has 2 to\nthe n elements. Now again, informally. What's a vector space?",
    "start": "2435330",
    "end": "2441320"
  },
  {
    "text": "A vector space is always\nover a given field.",
    "start": "2441320",
    "end": "2446450"
  },
  {
    "text": "In this case, it's going\nto be over the binary field, of course. F2.",
    "start": "2446450",
    "end": "2451740"
  },
  {
    "text": "The given field is\ncalled a scalar. Just like vector space over\nthe reals, the scalars are",
    "start": "2451740",
    "end": "2457670"
  },
  {
    "text": "real numbers. Here the scalars are\nelements of F2.",
    "start": "2457670",
    "end": "2462910"
  },
  {
    "text": "And what do we have to have to\nmake something algebraically a vector space?",
    "start": "2462910",
    "end": "2468400"
  },
  {
    "text": "We have to have that the\naddition of two vectors is well-defined and gives another\nvector, and that the",
    "start": "2468400",
    "end": "2479309"
  },
  {
    "text": "multiplication of a vector by\na scalar is well-defined and gives another vector in\nour vector space.",
    "start": "2479310",
    "end": "2487119"
  },
  {
    "text": "All right?  OK. So how are we going to define\nthat to addition?",
    "start": "2487120",
    "end": "2495130"
  },
  {
    "text": "If we want to add\ntwo n-tuples -- again, you aren't going to see\nanything here that you haven't",
    "start": "2495130",
    "end": "2500940"
  },
  {
    "text": "already seen in some\nother context. What do we do? We add them component-wise,\nusing the component-wise rules",
    "start": "2500940",
    "end": "2509030"
  },
  {
    "text": "of field addition. OK. So we just add two\nvector n-tuples,",
    "start": "2509030",
    "end": "2515380"
  },
  {
    "text": "component by component. We obviously get some result,\nwhich is itself a binary",
    "start": "2515380",
    "end": "2520569"
  },
  {
    "text": "vector or an F2 vector. No problem there. Except that --",
    "start": "2520570",
    "end": "2528050"
  },
  {
    "text": "well, all right. As long as we're talking about\nall possible n-tuples, the result is certainly in the\nvector space, right?",
    "start": "2528050",
    "end": "2534160"
  },
  {
    "text": "We add two binary n-tuples,\nwe get a binary n-tuple. So the result is\nin F2 to the n.",
    "start": "2534160",
    "end": "2540320"
  },
  {
    "text": "This is going to be the key test\nwhen we get to subspaces of F2 to the n.",
    "start": "2540320",
    "end": "2547990"
  },
  {
    "text": "OK. And multiplication\nis even easier. How do we define multiplication\nby scalars?",
    "start": "2547990",
    "end": "2554099"
  },
  {
    "text": "Well, we only have\ntwo scalars -- 0 and 1. So 0 times any vector is going\nto equal the all 0 vector.",
    "start": "2554100",
    "end": "2565530"
  },
  {
    "text": "Again, you can view that\nas just component-wise multiplication of everything\nby 0, and since 0 times",
    "start": "2565530",
    "end": "2571480"
  },
  {
    "text": "anything equals 0, we're\nalways going to get the 0 vector. All right?",
    "start": "2571480",
    "end": "2577150"
  },
  {
    "text": "So is the 0 vector in\nthe vector space?",
    "start": "2577150",
    "end": "2582210"
  },
  {
    "text": "Well, yes. If we're talking about several\nn-tuples, it of course always is. And one times anything, again,\nwe can just do this",
    "start": "2582210",
    "end": "2592610"
  },
  {
    "text": "component-wise, and it\njust gives itself.  Trivially.",
    "start": "2592610",
    "end": "2598560"
  },
  {
    "text": "So since this was a vector in\nthe vector space, this is certainly a vector in\nthe vector space.",
    "start": "2598560",
    "end": "2605660"
  },
  {
    "text": "OK. This seems pretty\ntrivial so far. But what's a binary\nlinear block code?",
    "start": "2605660",
    "end": "2615750"
  },
  {
    "text": "Again, focusing on the\nlinear, is a -- now I'll give a formal\ndefinition.",
    "start": "2615750",
    "end": "2623400"
  },
  {
    "text": "it's a subspace of F2\nto the n for some n",
    "start": "2623400",
    "end": "2631660"
  },
  {
    "text": "called the block length.  All right. What do I mean when\nI say a subspace?",
    "start": "2631660",
    "end": "2638700"
  },
  {
    "text": "I mean subsets of the elements\nof a vector space that itself forms a vector space.",
    "start": "2638700",
    "end": "2645010"
  },
  {
    "text": "So in this case when I\nsay subset, I mean a",
    "start": "2645010",
    "end": "2651110"
  },
  {
    "text": "set of binary n-tuples. OK?",
    "start": "2651110",
    "end": "2656280"
  },
  {
    "text": "That itself forms\na vector space. OK. What are the components\nof that? To check that it forms a vector\nspace, let's see.",
    "start": "2656280",
    "end": "2664540"
  },
  {
    "text": "Multiplication by scalars is,\nagain, easy to check.",
    "start": "2664540",
    "end": "2670032"
  },
  {
    "text": "If it's going to be a subspace,\nthen the all 0 -- so it has to contain the all 0\nvector in order that when I",
    "start": "2670032",
    "end": "2688140"
  },
  {
    "text": "multiply by the scalar\n0, I get another element of this subspace. ",
    "start": "2688140",
    "end": "2695260"
  },
  {
    "text": "Multiplication by 1 is always\ntrivially satisfied. If I start off with a set, I\nmultiply by 1, I'm going to",
    "start": "2695260",
    "end": "2701830"
  },
  {
    "text": "get the same set. So let's check whether the\nelements of a subspace are",
    "start": "2701830",
    "end": "2714119"
  },
  {
    "text": "closed under vector addition. What do I mean by that?",
    "start": "2714120",
    "end": "2719140"
  },
  {
    "text": "I mean if you add two elements\nof the of the subspace",
    "start": "2719140",
    "end": "2724269"
  },
  {
    "text": "together, you get another\nelement of the subspace. That's the key property\nto check.",
    "start": "2724270",
    "end": "2732255"
  },
  {
    "text": " Key property -- we can\nwrite that as closure",
    "start": "2732255",
    "end": "2740670"
  },
  {
    "text": "under vector addition. ",
    "start": "2740670",
    "end": "2747900"
  },
  {
    "text": "Which is also called\nthe group property. It means that just under\naddition, under vector",
    "start": "2747900",
    "end": "2756460"
  },
  {
    "text": "addition, the set of elements\nthat you have forms a group. You add any two elements,\nyou get another",
    "start": "2756460",
    "end": "2761850"
  },
  {
    "text": "element of the subset.  The example is our favorite\nexample so far.",
    "start": "2761850",
    "end": "2772030"
  },
  {
    "text": "Let's take this little code,\nand I'm going to ask.",
    "start": "2772030",
    "end": "2778420"
  },
  {
    "text": "Is that a subspace of\nF2 to the three?",
    "start": "2778420",
    "end": "2784150"
  },
  {
    "text": "So does this equal subspace\nof the set of all binary",
    "start": "2784150",
    "end": "2795579"
  },
  {
    "text": "three-tuples? ",
    "start": "2795580",
    "end": "2800620"
  },
  {
    "text": "Anyone care to hazard a guess\nwhether it is or isn't?",
    "start": "2800620",
    "end": "2806880"
  },
  {
    "text": "AUDIENCE: It is. PROFESSOR: It is? Why? ",
    "start": "2806880",
    "end": "2813012"
  },
  {
    "text": "AUDIENCE: It has the\nall 0 vector. PROFESSOR: It has the all\n0 vector, first of all.",
    "start": "2813012",
    "end": "2818200"
  },
  {
    "text": "Good. AUDIENCE: [INAUDIBLE] ",
    "start": "2818200",
    "end": "2824170"
  },
  {
    "text": "PROFESSOR: And it's closed\nunder addition. Now how might we see that?",
    "start": "2824170",
    "end": "2831470"
  },
  {
    "text": "You could, of course, just\ntake all pair-wise -- you could form the addition\ntable of these four elements,",
    "start": "2831470",
    "end": "2837400"
  },
  {
    "text": "and you would find that you\nalways get another one of these elements. For instance, 0, 1, 1 plus 1,\n0, 1, is equal to 1, 1, 0.",
    "start": "2837400",
    "end": "2846240"
  },
  {
    "text": "In fact, you easily see that you\ntake any two of these, add them together, you get\nthe third one.",
    "start": "2846240",
    "end": "2853154"
  },
  {
    "text": "If you call this a, b, and c,\na plus b plus c equals 0, addition is the same as\nsubtraction, because we're in",
    "start": "2853155",
    "end": "2860460"
  },
  {
    "text": "a binary field. So that means that a plus b\nequals c, a equals b plus c, c",
    "start": "2860460",
    "end": "2866619"
  },
  {
    "text": "equals b plus a, whatever\nyou like. And of course, if you add 0 to\nanything, it's trivially",
    "start": "2866620",
    "end": "2875000"
  },
  {
    "text": "closed under that.  All right. So it is.",
    "start": "2875000",
    "end": "2881060"
  },
  {
    "text": "It satisfies -- it's all you've got to check. ",
    "start": "2881060",
    "end": "2889415"
  },
  {
    "text": "A more abstract proof of this\nwould be, this is the set of all even-weight three-tuples.",
    "start": "2889415",
    "end": "2896359"
  },
  {
    "text": "If I add even to even, I'm\ngoing to get even. So of course my result is\ngoing to be another",
    "start": "2896360",
    "end": "2901440"
  },
  {
    "text": "even-weight three-tuple,\ntherefore in the set. That's the more algebraic\nproof. ",
    "start": "2901440",
    "end": "2909559"
  },
  {
    "text": "All right. Suppose I just add 0, 0, 1\nto all of these things.",
    "start": "2909560",
    "end": "2916140"
  },
  {
    "text": "I'll get the set of all\nodd-weight n-tuples. ",
    "start": "2916140",
    "end": "2921520"
  },
  {
    "text": "Add any odd-weight\nn-tuple to this. Let me take the C prime,\nwhich is the set of",
    "start": "2921520",
    "end": "2926800"
  },
  {
    "text": "all odd-weight n-tuples.  Is that a vector space?",
    "start": "2926800",
    "end": "2932194"
  },
  {
    "text": " It doesn't have 0, and in fact,\nit's not even closed",
    "start": "2932195",
    "end": "2937359"
  },
  {
    "text": "under vector addition. All right. If I take in C double prime is\nequal to 0, 0, 0 0, 1, 1, 1,",
    "start": "2937360",
    "end": "2946060"
  },
  {
    "text": "0, 1 and I stop there,\nis that a subspace? ",
    "start": "2946060",
    "end": "2953120"
  },
  {
    "text": "No. Because? Not closed. For instance, if I add these\ntwo together, I would get",
    "start": "2953120",
    "end": "2961000"
  },
  {
    "text": "that, and that's missing. OK. So actually, everything is\nmuch simpler when we're",
    "start": "2961000",
    "end": "2971080"
  },
  {
    "text": "talking about finite fields. All the finite dimensional\nvector spaces consist of a finite number of elements.",
    "start": "2971080",
    "end": "2978140"
  },
  {
    "text": "It's easier than real and\ncomplex vector spaces. There's no analysis involved.",
    "start": "2978140",
    "end": "2986856"
  },
  {
    "text": "So forth. All right. So a binary linear block\ncode is in a subspace",
    "start": "2986856",
    "end": "2992960"
  },
  {
    "text": "of F2 to the n. What are some of the key\nalgebraic facts we know about",
    "start": "2992960",
    "end": "2999430"
  },
  {
    "text": "vector spaces from our study\nof linear algebra, which I",
    "start": "2999430",
    "end": "3006460"
  },
  {
    "text": "assume all of you have had\nin some form or another? What's a key algebraic property\nof a vector space?",
    "start": "3006460",
    "end": "3014210"
  },
  {
    "text": "What's the very first\nproperty? All vector spaces have a --",
    "start": "3014210",
    "end": "3020894"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: Norm? No.",
    "start": "3020894",
    "end": "3026410"
  },
  {
    "text": "Dimension. Dimension, that's\nwhere I'm going. What's the significance\nof dimension?",
    "start": "3026410",
    "end": "3033484"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]  PROFESSOR: The definition of\ndimension is the number of",
    "start": "3033484",
    "end": "3040410"
  },
  {
    "text": "generators in any basis. So we're talking about\ngenerators of the vector space, or a set of generators\nwhich form a basis.",
    "start": "3040410",
    "end": "3049840"
  },
  {
    "text": "If you think we have the same\nproperties here in the case of vector spaces over finite\nfields, well, we probably do.",
    "start": "3049840",
    "end": "3061310"
  },
  {
    "text": "But let's see how\nit works out. So we're talking about\nthings like generators, basis, dimension.",
    "start": "3061310",
    "end": "3070930"
  },
  {
    "text": "These are all closely\ninterlinked properties.",
    "start": "3070930",
    "end": "3076839"
  },
  {
    "text": "Again, the fact that everything\nis finite here gives us very elementary\nways of addressing",
    "start": "3076840",
    "end": "3084839"
  },
  {
    "text": "all of these concepts. We don't have any\ngeometry yet. We don't have norms.",
    "start": "3084840",
    "end": "3090290"
  },
  {
    "text": "We don't have distances. We don't have angles. We'll talk about that\nin a minute. Here we just have a set that\nbasically has these two",
    "start": "3090290",
    "end": "3098940"
  },
  {
    "text": "properties. It contains the all-0 vector,\nand it's closed as the group property. It's closed under\nvector addition.",
    "start": "3098940",
    "end": "3106280"
  },
  {
    "text": "All right. So the first property is that\nthe all-0 vector is always in",
    "start": "3106280",
    "end": "3116530"
  },
  {
    "text": "the subspace, which I'll\nrepresent by C, meaning code.",
    "start": "3116530",
    "end": "3122080"
  },
  {
    "text": "So when I talk about a code\nnow, I'm talking about a binary linear block code,\nwhich by definition is a",
    "start": "3122080",
    "end": "3129410"
  },
  {
    "text": "vector space, a subspace\nof F2 to the n, where n is the code length.",
    "start": "3129410",
    "end": "3136050"
  },
  {
    "text": "All right. Let me try to find a set of\ngenerators for the code. ",
    "start": "3136050",
    "end": "3142320"
  },
  {
    "text": "All right? If somebody gives me a code,\nthey say, this is a binary",
    "start": "3142320",
    "end": "3148039"
  },
  {
    "text": "linear block code. Let me see if I can find a\nset of generators for it.",
    "start": "3148040",
    "end": "3153530"
  },
  {
    "text": "If I find three generators,\nthen I'll know the dimension is three.",
    "start": "3153530",
    "end": "3159280"
  },
  {
    "text": "That's basically where\nI'm going. I'll state this a little bit\nmore formally as we go ahead.",
    "start": "3159280",
    "end": "3164440"
  },
  {
    "text": "So suppose I'm given a code. I know it's a binary linear\nblock code, so I know it has",
    "start": "3164440",
    "end": "3169710"
  },
  {
    "text": "the all-0 element. So how might I go about finding\na set of generators?",
    "start": "3169710",
    "end": "3176500"
  },
  {
    "text": " Let's just take a greedy\nalgorithm. All right?",
    "start": "3176500",
    "end": "3182420"
  },
  {
    "text": " Suppose the code contains\nonly the all-0 vector.",
    "start": "3182420",
    "end": "3188060"
  },
  {
    "text": "Is that a subspace?  What's its dimension?",
    "start": "3188060",
    "end": "3195410"
  },
  {
    "text": "0. All right?  So that's a very trivial vector\nspace, but it's a",
    "start": "3195410",
    "end": "3202260"
  },
  {
    "text": "vector space. Satisfies the axioms. Suppose it is not the\ntrivial code.",
    "start": "3202260",
    "end": "3209890"
  },
  {
    "text": "That means it has more than\nthe all-0 vector. So I take as my first generator\nany non-zero vector.",
    "start": "3209890",
    "end": "3218330"
  },
  {
    "text": " OK?",
    "start": "3218330",
    "end": "3223410"
  },
  {
    "text": "I can always do that. Don't have the axiom of choice\ninvolved here, because",
    "start": "3223410",
    "end": "3229510"
  },
  {
    "text": "everything is finite. So I'm going to take g1 to\nbe any non-zero vector.",
    "start": "3229510",
    "end": "3234930"
  },
  {
    "text": "Now I've got a generator. And how many code words\ndoes it generate?",
    "start": "3234930",
    "end": "3246295"
  },
  {
    "text": " I want to take the set of all\nbinary linear combinations of",
    "start": "3246295",
    "end": "3254150"
  },
  {
    "text": "all the generators that\nI have so far. At this point, the binary linear\ncombinations are 0",
    "start": "3254150",
    "end": "3259990"
  },
  {
    "text": "times g1 and 1 times g1 And that\njust gives me this word",
    "start": "3259990",
    "end": "3265400"
  },
  {
    "text": "and this word. So now I have counted for two\nwords with one generator. ",
    "start": "3265400",
    "end": "3272480"
  },
  {
    "text": "Could it be that that's\nthe whole code?  Sure.",
    "start": "3272480",
    "end": "3279100"
  },
  {
    "text": "The all-0 vector and any\nnon-zero vector together form a one-dimensional subspace.",
    "start": "3279100",
    "end": "3286224"
  },
  {
    "text": " That's all you can get\nfrom one dimension. So I could be finished\nhere now.",
    "start": "3286225",
    "end": "3293420"
  },
  {
    "text": "But if I'm not finished, there's\nstill more code words that I haven't accounted for. Then I greedily pick\na second generator.",
    "start": "3293420",
    "end": "3301579"
  },
  {
    "text": "So this is now, let's say, any\nvector not generated by g1.",
    "start": "3301580",
    "end": "3315180"
  },
  {
    "start": "3315180",
    "end": "3320740"
  },
  {
    "text": "So I have a branch here. Either I've finished or I can\npick another generator g2.",
    "start": "3320740",
    "end": "3327859"
  },
  {
    "text": "Now with g1 and g-two, how many\nvectors can I generate?",
    "start": "3327860",
    "end": "3333580"
  },
  {
    "text": "Let me take all binary\nlinear combinations. ",
    "start": "3333580",
    "end": "3341349"
  },
  {
    "text": "So a binary linear combination\nis any vector of the form",
    "start": "3341350",
    "end": "3347600"
  },
  {
    "text": "alpha1 g1 plus alpha2 g2 where\nthese are both scalars.",
    "start": "3347600",
    "end": "3354865"
  },
  {
    "text": " And therefore this can be 0 or\n1, this could be 0 or 1.",
    "start": "3354865",
    "end": "3362830"
  },
  {
    "text": "So what have I got now? I've got 0, g1 g2 and g1 plus g2\nI've got four binary linear",
    "start": "3362830",
    "end": "3369829"
  },
  {
    "text": "combinations of two\ngenerators. ",
    "start": "3369830",
    "end": "3375339"
  },
  {
    "text": "Could that be the whole code? Certainly. At this point, again, consider\nour standing example.",
    "start": "3375340",
    "end": "3383613"
  },
  {
    "text": " I start out what I take\nas my first generator.",
    "start": "3383613",
    "end": "3389430"
  },
  {
    "text": "Let me take g1 equal 1 0, 1, g2\nequals whatever, 0, 1, 1.",
    "start": "3389430",
    "end": "3398480"
  },
  {
    "text": "Then if I take all binary linear\ncombinations of these two generators, I'm going to\nget the whole code, right?",
    "start": "3398480",
    "end": "3405030"
  },
  {
    "text": "These four code words. They can all be expressed\nin this form. ",
    "start": "3405030",
    "end": "3411410"
  },
  {
    "text": "Or I'm not done, and then\nI have to pick g3. And how many binary linear\ncombinations are there of g1,",
    "start": "3411410",
    "end": "3419940"
  },
  {
    "text": "g2, and g3?  Eight. Are they all necessarily\nin my subspace?",
    "start": "3419940",
    "end": "3426234"
  },
  {
    "text": " Yes, by the fact that the\nsubspace is closed under",
    "start": "3426235",
    "end": "3434299"
  },
  {
    "text": "scalar multiplication. Alpha g1. Alpha1 g1, alpha2 g2 alpha3 g3\nare all in the subspace.",
    "start": "3434300",
    "end": "3442860"
  },
  {
    "text": "Any vector addition of any of\nthese scalar multiples is in",
    "start": "3442860",
    "end": "3449450"
  },
  {
    "text": "the subspace. So I get now eight possible\nelements of the subspace, and",
    "start": "3449450",
    "end": "3456010"
  },
  {
    "text": "I either may be done or not.  Continuing in this way, I get\nsome number gk of generators,",
    "start": "3456010",
    "end": "3468760"
  },
  {
    "text": "just by picking greedily the\nnext one until I'm done. All right?",
    "start": "3468760",
    "end": "3475140"
  },
  {
    "text": "When I'm done -- so I have to stop. Why do I have to stop? ",
    "start": "3475140",
    "end": "3482990"
  },
  {
    "text": "All right. Let's look at the size. At each point here, this\naccounts for two code words, this for four, this for eight,\nthis for 2 to the k.",
    "start": "3482990",
    "end": "3491360"
  },
  {
    "text": "How many binary n-tuples\nare there? 2 to the n.",
    "start": "3491360",
    "end": "3496416"
  },
  {
    "text": "All right? So I clearly can't find more\nthan n generators. More more than n independent\ngenerators, in the sense that",
    "start": "3496416",
    "end": "3505110"
  },
  {
    "text": "the set of all the\nbinary linear combinations are distinct.",
    "start": "3505110",
    "end": "3512050"
  },
  {
    "text": "All right. So k is, at most,\ngoing to be n. So I will stop in a finite\nnumber of steps.",
    "start": "3512050",
    "end": "3519310"
  },
  {
    "text": "I'll stop at some number k. When I've stopped, that's\nbecause the code consists of",
    "start": "3519310",
    "end": "3526690"
  },
  {
    "text": "all binary linear combinations\nof these k generators, and therefore has size 2 to the k.",
    "start": "3526690",
    "end": "3534480"
  },
  {
    "text": "So the only possible size of a\nsubspace is 2 to the k for k",
    "start": "3534480",
    "end": "3542640"
  },
  {
    "text": "less than n. A power of 2 where the\npower is, at most, n.",
    "start": "3542640",
    "end": "3550160"
  },
  {
    "text": "So any subspace besides\nthe subspace -- I'm repeating myself. ",
    "start": "3550160",
    "end": "3557910"
  },
  {
    "text": "OK. So this means I found a basis.",
    "start": "3557910",
    "end": "3565369"
  },
  {
    "text": "Does this mean that all possible\nbases of any subspace have the same size? ",
    "start": "3565370",
    "end": "3573284"
  },
  {
    "text": "Well yeah, it must. I mean, I've proved now that any\nsubspace has to have this",
    "start": "3573284",
    "end": "3580650"
  },
  {
    "text": "size 2 to the k for some k. So obviously, if I go through\nthis process, no matter how I",
    "start": "3580650",
    "end": "3587660"
  },
  {
    "text": "choose my generators, I could\nchoose any pair of these",
    "start": "3587660",
    "end": "3594329"
  },
  {
    "text": "non-zero n-tuples as\nmy generators. So that would be a\nlegitimate basis. Take any two out\nof these three.",
    "start": "3594330",
    "end": "3601320"
  },
  {
    "text": "But it's always going to take\nexactly two of them, right? Why? Because the size of this\nsubspace is four.",
    "start": "3601320",
    "end": "3608510"
  },
  {
    "text": "Two to the two. So if I go through this process,\nI'm always going to come up with k generators, where\nk is the log to the base",
    "start": "3608510",
    "end": "3617590"
  },
  {
    "text": "2 of the size of this code that\nI was given, which I was told was a linear code, meaning\nit's a subspace.",
    "start": "3617590",
    "end": "3627810"
  },
  {
    "text": "So I'm somewhat free to choose\nthe generators, but I'm always",
    "start": "3627810",
    "end": "3633330"
  },
  {
    "text": "going to come up with k of\nthem if the code has size 2 to the k. ",
    "start": "3633330",
    "end": "3639900"
  },
  {
    "text": "So a basis is a set of k\nlinearly independent k-tuples,",
    "start": "3639900",
    "end": "3650160"
  },
  {
    "text": "where linear independence has\nthe same meaning here as you're accustomed to, meaning\nthat all linear combinations",
    "start": "3650160",
    "end": "3656580"
  },
  {
    "text": "of the k generators\nare distinct. So I get 2 to the k distinct\nelements of the code.",
    "start": "3656580",
    "end": "3665020"
  },
  {
    "text": "And I say the dimension\nof the code is k.",
    "start": "3665020",
    "end": "3670210"
  },
  {
    "text": "In this case, basically it's the\nsize of the code is 2 to the k, then its dimension\nis k.",
    "start": "3670210",
    "end": "3676710"
  },
  {
    "text": "Has to be. And all basis have k\ngenerators in them.",
    "start": "3676710",
    "end": "3684610"
  },
  {
    "text": "And there are, in general,\nmany ways to pick them. All right? So just by considering this\ngreedy basis construction",
    "start": "3684610",
    "end": "3693820"
  },
  {
    "text": "algorithm, I basically find the\nsize of any subspace is a",
    "start": "3693820",
    "end": "3703440"
  },
  {
    "text": "power of two, and the power\nis equal to the dimension. And any basis is going to\nhave that cardinality.",
    "start": "3703440",
    "end": "3709870"
  },
  {
    "text": " Are you with me? This is a pretty simple proof.",
    "start": "3709870",
    "end": "3717150"
  },
  {
    "text": "And I call this an n, k binary\nlinear block code. n being the length.",
    "start": "3717150",
    "end": "3724930"
  },
  {
    "text": "That just means that every code\nword is an n-tuple over",
    "start": "3724930",
    "end": "3729950"
  },
  {
    "text": "the binary field. And k is the dimension. So an n, k binary linear block\ncode has size 2 to the k.",
    "start": "3729950",
    "end": "3740510"
  },
  {
    "text": " That's 2 to the k distinct\ncode words.",
    "start": "3740510",
    "end": "3749170"
  },
  {
    "text": "Main example is this guy. ",
    "start": "3749170",
    "end": "3755070"
  },
  {
    "text": "Easy? Any questions? I think this is clear. AUDIENCE: Can n use the number\nof code word, I take",
    "start": "3755070",
    "end": "3761155"
  },
  {
    "text": "like 2 to the k? PROFESSOR: n is something I\nspecify a priori as the length",
    "start": "3761155",
    "end": "3768060"
  },
  {
    "text": "of every vector in the code. In other words, it has size 2 to\nthe k, and it's a subset of",
    "start": "3768060",
    "end": "3776260"
  },
  {
    "text": "the set of all binary\nn-tuples, which I write like that. In other words, the\nelements of the code are binary n-tuples.",
    "start": "3776260",
    "end": "3783662"
  },
  {
    "text": "If I write them out, each\none has length n. ",
    "start": "3783662",
    "end": "3789610"
  },
  {
    "text": "OK? We're good? What are some other examples? ",
    "start": "3789610",
    "end": "3798810"
  },
  {
    "text": "The simplest codes you can\nthink of is, first of all, an n, 0 code.",
    "start": "3798810",
    "end": "3806599"
  },
  {
    "text": "That means a code with dimension\nzero, has size what? ",
    "start": "3806600",
    "end": "3812380"
  },
  {
    "text": "1. And what does it consist of? AUDIENCE: [INAUDIBLE] PROFESSOR: Yeah.",
    "start": "3812380",
    "end": "3817700"
  },
  {
    "text": "So this is the so-called trivial\ncode, just containing the all-0 word.",
    "start": "3817700",
    "end": "3825450"
  },
  {
    "text": "Has to mention 0. It is a binary linear block\ncode, but it's not much use for communication.",
    "start": "3825450",
    "end": "3832490"
  },
  {
    "text": "So but nonetheless, we include\nthat in this family. ",
    "start": "3832490",
    "end": "3838420"
  },
  {
    "text": "Another trivial one is n, n. What's that? AUDIENCE: [INAUDIBLE]",
    "start": "3838420",
    "end": "3846000"
  },
  {
    "text": "PROFESSOR: F2 to the n, right. What's its size? 2 to the n. That means it has to contain all\ndistinct binary n-tuples.",
    "start": "3846000",
    "end": "3855370"
  },
  {
    "text": "So this is called the\ntrivial code. This is called the\nuniverse code.",
    "start": "3855370",
    "end": "3861210"
  },
  {
    "text": "Contains the entire universe\nof binary n-tuples. ",
    "start": "3861210",
    "end": "3867160"
  },
  {
    "text": "Let's get some slightly\nless trivial ones. n, 1.",
    "start": "3867160",
    "end": "3872849"
  },
  {
    "text": "What would that be? An n, 1 code.",
    "start": "3872850",
    "end": "3878280"
  },
  {
    "text": "What's its size? 2. What does it consist of? ",
    "start": "3878280",
    "end": "3884940"
  },
  {
    "text": "The 0 word, and? Any other non-zero generator.",
    "start": "3884940",
    "end": "3890760"
  },
  {
    "text": "And that's correct. This can be 0 and any generator,\ntwo words.",
    "start": "3890760",
    "end": "3899160"
  },
  {
    "text": "In communications, where we want\nto maximize the distance, in some sense, between the\ntwo code words, what is g",
    "start": "3899160",
    "end": "3910329"
  },
  {
    "text": "always taken as? 0,1's, right. So if it's in particular the\nall-0 and the all-1 word,",
    "start": "3910330",
    "end": "3920160"
  },
  {
    "text": "which I might write as a vector\nof 0's and a vector of 1's, this is called the\nrepetition code.",
    "start": "3920160",
    "end": "3928846"
  },
  {
    "text": "The binary repetition\ncode of length n. It either gives me a 0 and I\nrepeat it n times, or gives me",
    "start": "3928846",
    "end": "3936310"
  },
  {
    "text": "a 1 and I repeat it n times. So whenever you see n,1, you\ncan pretty well assume it's",
    "start": "3936310",
    "end": "3941860"
  },
  {
    "text": "the repetition code, though\nit might be any pair 0, g.",
    "start": "3941860",
    "end": "3948280"
  },
  {
    "text": "And n, minus 1. This is an interesting one. ",
    "start": "3948280",
    "end": "3958400"
  },
  {
    "text": "Again, while this could\nbe a lot of things, in",
    "start": "3958400",
    "end": "3967930"
  },
  {
    "text": "communications, whenever you see\nthis, this will always be the set of all even-weight\nn-tuples.",
    "start": "3967930",
    "end": "3976319"
  },
  {
    "start": "3976320",
    "end": "3982040"
  },
  {
    "text": "In other words, the set of all\nn-tuples with even parity such",
    "start": "3982040",
    "end": "3988590"
  },
  {
    "text": "that if you sum up all of\nthe components of any vector, mod2 equals 0.",
    "start": "3988590",
    "end": "3995340"
  },
  {
    "text": "OK? So this I will call the single\nparity check, or more briefly,",
    "start": "3995340",
    "end": "4007110"
  },
  {
    "text": "the SPC code, or the\neven-weight code. That's equally good.",
    "start": "4007110",
    "end": "4012660"
  },
  {
    "text": " And here we maybe should do\na little bit more work.",
    "start": "4012660",
    "end": "4021200"
  },
  {
    "text": "Say, is this in fact\na subspace? Does it include the all-zero\ncode word? Yes, all-zero has even weight.",
    "start": "4021200",
    "end": "4028990"
  },
  {
    "text": "The sum of any two even-weight\ncode words, an even-weight code word, an even-weight\nn-tuple.",
    "start": "4028990",
    "end": "4035810"
  },
  {
    "text": "Yes. As here. This is an example. This is the three,\ntwo SPC code.",
    "start": "4035810",
    "end": "4042916"
  },
  {
    "text": " OK.",
    "start": "4042916",
    "end": "4048070"
  },
  {
    "text": "Why is this dimension\nn minus one? AUDIENCE: [INAUDIBLE]",
    "start": "4048070",
    "end": "4054690"
  },
  {
    "text": "Is every code word orthogonal\nto the one-vector? PROFESSOR: OK. That's an excellent answer.",
    "start": "4054690",
    "end": "4061620"
  },
  {
    "text": "It's a little advanced\nfor us right now. I'm looking for an elementary\nargument. AUDIENCE: [INAUDIBLE]",
    "start": "4061620",
    "end": "4067243"
  },
  {
    "start": "4067243",
    "end": "4077599"
  },
  {
    "text": "PROFESSOR: OK. So you're saying we have\na set of generators that looks like this.",
    "start": "4077600",
    "end": "4083200"
  },
  {
    "text": "Is that what you're saying? You are correct. And how many such generators\nare there?",
    "start": "4083200",
    "end": "4092980"
  },
  {
    "text": "There are n minus 1 of them. I always like to find the most\nelementary argument possible.",
    "start": "4092980",
    "end": "4099759"
  },
  {
    "text": "I think the most elementary\nargument here is that the number of even-weight n-tuples\nis equal to the number of",
    "start": "4099760",
    "end": "4106278"
  },
  {
    "text": "odd-weight n-tuples, and\ntogether they form the set of all n-tuples. So exactly half of the n-tuples\nare even weight.",
    "start": "4106279",
    "end": "4114278"
  },
  {
    "text": "That means there are 2 to the n\nminus 1 of them, 2 to the n over 2, and therefore, the\ndimension must be n minus 1.",
    "start": "4114279",
    "end": "4122109"
  },
  {
    "text": "But perhaps this is just\nas elementary a proof.",
    "start": "4122109",
    "end": "4128574"
  },
  {
    "text": "Well, however you do it, you'll\nfind that there are 2 to the n minus 1 of them, or\nthat here is clearly a set of",
    "start": "4128575",
    "end": "4136528"
  },
  {
    "text": "generators. It might take a few more lines\nto show that every even-weight code word is a linear\ncombination of this particular",
    "start": "4136529",
    "end": "4145720"
  },
  {
    "text": "set of generators, but\nit's certainly true. All right. So these four classes of codes,\nthese two entirely",
    "start": "4145720",
    "end": "4153799"
  },
  {
    "text": "trivial ones, these two which\nare actually somewhat more interesting for coding\npurposes --",
    "start": "4153800",
    "end": "4159859"
  },
  {
    "text": "we've already seen, we can get a\ncoding game with this length three, dimension two code --",
    "start": "4159859",
    "end": "4165923"
  },
  {
    "text": " are basically the simplest\ncodes we can think of.",
    "start": "4165924",
    "end": "4173839"
  },
  {
    "text": "The simplest binary linear\nblock codes. Now we'll see them\nagain and again. They turn up.",
    "start": "4173840",
    "end": "4181219"
  },
  {
    "text": "All right? So the whole course is\ngoing to be about finding 1's in between. More complicated ones.",
    "start": "4181220",
    "end": "4187045"
  },
  {
    "text": "There's clearly more\nroom to play. For instance, if k is equal to\nhalf of n, which means that",
    "start": "4187045",
    "end": "4195650"
  },
  {
    "text": "rho is equal to one bit per two\ndimensions, there's a lot of possibilities.",
    "start": "4195650",
    "end": "4203360"
  },
  {
    "text": "And so we're going to explore\nthose possibilities. ",
    "start": "4203360",
    "end": "4212444"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]  [UNINTELLIGIBLE]",
    "start": "4212444",
    "end": "4217526"
  },
  {
    "start": "4217526",
    "end": "4227659"
  },
  {
    "text": "PROFESSOR: Sure.  Let's take the 6,5 code\ngenerated by these five",
    "start": "4227660",
    "end": "4237790"
  },
  {
    "text": "generators.  Well, it contains some odd-weight code words, obviously.",
    "start": "4237790",
    "end": "4243525"
  },
  {
    "text": " But it's not as interesting from\na coding point of view.",
    "start": "4243525",
    "end": "4250750"
  },
  {
    "text": " It's not the only one,\nbut it's the only one",
    "start": "4250750",
    "end": "4256099"
  },
  {
    "text": "you'll ever see here. ",
    "start": "4256100",
    "end": "4261220"
  },
  {
    "text": "All right. Let's see. ",
    "start": "4261220",
    "end": "4267580"
  },
  {
    "text": "One thing I didn't point out\nin the notes but probably should have here is, what is rho\nfor an n, k binary linear",
    "start": "4267580",
    "end": "4275510"
  },
  {
    "text": "block code?  How many bits can we send?",
    "start": "4275510",
    "end": "4281619"
  },
  {
    "text": "Suppose we take the Euclidean\nimage of this. It is going to have 2 to the k\npoints, 2 to the k vertices of",
    "start": "4281620",
    "end": "4289670"
  },
  {
    "text": "the n-cube, and so\nwhat is rho?",
    "start": "4289670",
    "end": "4295140"
  },
  {
    "text": "What is the rate in bits\nper two dimensions? AUDIENCE: [INAUDIBLE] ",
    "start": "4295140",
    "end": "4300526"
  },
  {
    "text": "PROFESSOR: Right. The rate is basically k over n\nover 2, if you like, or 2 k",
    "start": "4300526",
    "end": "4309580"
  },
  {
    "text": "over n bits per two\ndimensions. You can send k bits in n\ndimensions, or 2 k over n bits",
    "start": "4309580",
    "end": "4320010"
  },
  {
    "text": "per two dimensions. And since k can't be larger than\nn, this is going to be",
    "start": "4320010",
    "end": "4328070"
  },
  {
    "text": "less than or equal to two\nbits per two dimensions. So again, we see we're\ndefinitely in the",
    "start": "4328070",
    "end": "4334199"
  },
  {
    "text": "power-limited regime, and that\nwe can really get any nominal",
    "start": "4334200",
    "end": "4340790"
  },
  {
    "text": "spectral efficiency between 0\nand 2 by choosing k and n",
    "start": "4340790",
    "end": "4347910"
  },
  {
    "text": "appropriately. All right. So n and k determine the rate,\ndetermine the nominal spectral",
    "start": "4347910",
    "end": "4354420"
  },
  {
    "text": "efficiency.  All right. Let's now talk about things that\nI think are also very old",
    "start": "4354420",
    "end": "4362969"
  },
  {
    "text": "hat to you. I mean weight and distance. ",
    "start": "4362970",
    "end": "4369160"
  },
  {
    "text": "But we begin to get into areas\nthat show us that these vector",
    "start": "4369160",
    "end": "4377840"
  },
  {
    "text": "spaces are very different from\nthe real and complex vector spaces that we're\naccustomed to.",
    "start": "4377840",
    "end": "4383000"
  },
  {
    "text": "So what are we doing now? We're starting to get into the\ngeometry of this vector space.",
    "start": "4383000",
    "end": "4388140"
  },
  {
    "text": "The geometry is not Euclidean\ngeometry, but it's Hamming geometry.",
    "start": "4388140",
    "end": "4395090"
  },
  {
    "text": "We define the Hamming weight\nof a vector as simply the",
    "start": "4395090",
    "end": "4400440"
  },
  {
    "text": "number of 1's in v. So the\nHamming weight of the all-0",
    "start": "4400440",
    "end": "4409000"
  },
  {
    "text": "vector is 0, the Hamming weight\nof the all-1 vector is n, and in general, the Hamming\nweight is somewhere",
    "start": "4409000",
    "end": "4414800"
  },
  {
    "text": "between 0 and n. Just the number of 1's. Pretty simple.",
    "start": "4414800",
    "end": "4419980"
  },
  {
    "text": "And given two vectors x and\ny, what is their distance?",
    "start": "4419980",
    "end": "4429686"
  },
  {
    "text": " The Hamming distance between x\nand y is equal to the Hamming",
    "start": "4429686",
    "end": "4438145"
  },
  {
    "text": "weight of x minus y. This is the standard way of\nconverting a weight metric",
    "start": "4438145",
    "end": "4444270"
  },
  {
    "text": "into a distance metric. Or because addition is the\nsame as subtraction in a",
    "start": "4444270",
    "end": "4451270"
  },
  {
    "text": "binary vector space, we might\nequally well write this is as the Hamming weight\nof x plus y.",
    "start": "4451270",
    "end": "4457489"
  },
  {
    "text": " And more informally, this is\nsimply the number of places in",
    "start": "4457490",
    "end": "4468970"
  },
  {
    "text": "which they differ. ",
    "start": "4468970",
    "end": "4477260"
  },
  {
    "text": "OK. So if x and y are identical,\nthen x plus y is equal to 0",
    "start": "4477260",
    "end": "4482350"
  },
  {
    "text": "and the distance is 0. If they are complementary, y is\nthe complement of x, then",
    "start": "4482350",
    "end": "4489850"
  },
  {
    "text": "they differ in every place. The sum will then be the all-1\nvector, and the weight, the",
    "start": "4489850",
    "end": "4497150"
  },
  {
    "text": "Hamming distance, will be n. And so again, the Hamming\ndistance is somewhere between 0 and n, measures how\ndifferent they are.",
    "start": "4497150",
    "end": "4505220"
  },
  {
    "text": "Clearly going to be important\nfor coding. It's going to translate directly\ninto Euclidean",
    "start": "4505220",
    "end": "4510510"
  },
  {
    "text": "distance under this standard\n2-PAM map. OK. ",
    "start": "4510510",
    "end": "4517290"
  },
  {
    "text": "Again, let's check that it\nsatisfies the distance axioms.",
    "start": "4517290",
    "end": "4524570"
  },
  {
    "text": "I don't know how many of you\nhave seen this, but let's see.",
    "start": "4524570",
    "end": "4531150"
  },
  {
    "text": "What are the distance axioms? Strict non-negativity. ",
    "start": "4531150",
    "end": "4540700"
  },
  {
    "text": "In other words, the Hamming\ndistance between x and y --",
    "start": "4540700",
    "end": "4546820"
  },
  {
    "text": "that's a single comma -- is greater than or equal to\n0, and equality if and",
    "start": "4546820",
    "end": "4553140"
  },
  {
    "text": "only if x equals y. That's what strict means.",
    "start": "4553140",
    "end": "4558280"
  },
  {
    "text": "So if we find the Hamming\ndistance is 0, we can assert that x equals y. ",
    "start": "4558280",
    "end": "4564340"
  },
  {
    "text": "We have, of course, symmetry. ",
    "start": "4564340",
    "end": "4569680"
  },
  {
    "text": "The Hamming distance between\nx and y is the same as the Hamming distance between\ny and x.",
    "start": "4569680",
    "end": "4577020"
  },
  {
    "text": "Order doesn't matter. And finally we have the triangle\ninequality, that the",
    "start": "4577020",
    "end": "4586190"
  },
  {
    "text": "Hamming distance between x and z\ncertainly can't be more than",
    "start": "4586190",
    "end": "4591800"
  },
  {
    "text": "the Hamming distance between\nx and y plus the Hamming distance between y and z.",
    "start": "4591800",
    "end": "4598800"
  },
  {
    "text": " If x differs from y in only n1\nplaces, and y differs from z",
    "start": "4598800",
    "end": "4608540"
  },
  {
    "text": "in only n2 places, then clearly\nz can't differ from x in more than n1 plus\nn2 places.",
    "start": "4608540",
    "end": "4614304"
  },
  {
    "text": " So check, check, check.",
    "start": "4614305",
    "end": "4619360"
  },
  {
    "text": "This is a legitimate metric for\ndefining a geometry on the",
    "start": "4619360",
    "end": "4624820"
  },
  {
    "text": "space, and this is the one that\nwe use on the space of",
    "start": "4624820",
    "end": "4630000"
  },
  {
    "text": "all n-tuples. But notice it's not all like\nthe Euclidean Distance.",
    "start": "4630000",
    "end": "4635760"
  },
  {
    "text": " Now when we have a\nlinear code --",
    "start": "4635760",
    "end": "4642110"
  },
  {
    "text": "let's combine these things. When we have a linear code, we\nhave a group property which",
    "start": "4642110",
    "end": "4659010"
  },
  {
    "text": "is, let me write it this way. If we take any code word and add\nit to any other code word,",
    "start": "4659010",
    "end": "4667430"
  },
  {
    "text": "that's in the code. And furthermore, c plus c prime\nis not equal to c prime",
    "start": "4667430",
    "end": "4678989"
  },
  {
    "text": "plus c single prime, c\nplus c single prime, because we can --",
    "start": "4678990",
    "end": "4684670"
  },
  {
    "text": "well, I'll finish it. Unless c prime equals\nc double prime.",
    "start": "4684670",
    "end": "4693290"
  },
  {
    "text": "Why is that? We can do subtraction,\ncancellation. Cancel c out from each side.",
    "start": "4693290",
    "end": "4699470"
  },
  {
    "text": "So if we add c to c double\nprime, we're going to get a",
    "start": "4699470",
    "end": "4705210"
  },
  {
    "text": "different result from adding c\nto c prime, if c prime and c double prime are different.",
    "start": "4705210",
    "end": "4713490"
  },
  {
    "text": "So this implies that\nc plus C --",
    "start": "4713490",
    "end": "4719200"
  },
  {
    "text": "I write that as an abbreviation\nfor the set of all c plus c prime, as a c prime\nruns through the code C.",
    "start": "4719200",
    "end": "4730840"
  },
  {
    "text": "So this is the 2 to the k sums\nof the code plus any code word",
    "start": "4730840",
    "end": "4739130"
  },
  {
    "text": "in the code.  Sorry if I don't write\ndown all steps.",
    "start": "4739130",
    "end": "4745350"
  },
  {
    "text": "What is that going to be? C. How did we conclude that?",
    "start": "4745350",
    "end": "4756038"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]  [UNINTELLIGIBLE] ",
    "start": "4756038",
    "end": "4764280"
  },
  {
    "text": "PROFESSOR: Perfect. Did you all hear that? By the group property,\neach one of these",
    "start": "4764280",
    "end": "4770550"
  },
  {
    "text": "things is in the code. By this argument, no two\nof them are the same.",
    "start": "4770550",
    "end": "4776000"
  },
  {
    "text": "That means I get 2 to the k\ndistinct elements all in the code, that's got to be the code,\nbecause the code only",
    "start": "4776000",
    "end": "4782170"
  },
  {
    "text": "has 2 to the k elements.  All right.",
    "start": "4782170",
    "end": "4788630"
  },
  {
    "text": "So if I add a code word -- in other words, if I write\ndown the code --",
    "start": "4788630",
    "end": "4794360"
  },
  {
    "text": "0, 0, 0, 0, 1, 1, 1 0 1, 1 1 0-\nand I add any code word to",
    "start": "4794360",
    "end": "4800190"
  },
  {
    "text": "it -- say I add 0\n1 1 to the code. So let me just do one column\nof the addition table.",
    "start": "4800190",
    "end": "4808930"
  },
  {
    "text": "I get 0, 1, 1, 0, 0, 0,\n1, 1, 0, 1, 0, 1.",
    "start": "4808930",
    "end": "4814530"
  },
  {
    "text": "I'll get the code\nitself again. ",
    "start": "4814530",
    "end": "4821070"
  },
  {
    "text": "This has a very important\nproperty. ",
    "start": "4821070",
    "end": "4826910"
  },
  {
    "text": "The set of Hamming distances C\nand c prime, as c prime runs",
    "start": "4826910",
    "end": "4838460"
  },
  {
    "text": "through c, from any given code\nword C, it is independent of",
    "start": "4838460",
    "end": "4851660"
  },
  {
    "text": "C. So I can start from any code\nword, measure the Hamming",
    "start": "4851660",
    "end": "4859920"
  },
  {
    "text": "distances, the 2 to the k\nHamming distances to all other code words, including\nC itself --",
    "start": "4859920",
    "end": "4865930"
  },
  {
    "text": "let c prime run through the\nentire code, I'm going to get a set of 2 to the k distances\ncalled the distance",
    "start": "4865930",
    "end": "4871570"
  },
  {
    "text": "profile of the code.  And I claim that it doesn't\nmatter which code",
    "start": "4871570",
    "end": "4879670"
  },
  {
    "text": "word I start from. I'm going to get the same\ndistance profile regardless of where I start.",
    "start": "4879670",
    "end": "4886130"
  },
  {
    "text": "In other words, the set of all\ndistances from the all-0 word here, which is 0, 2, 2, 2, is\nthe same as the set of all",
    "start": "4886130",
    "end": "4895430"
  },
  {
    "text": "distances from the 0,\n1, 1, code word, which is 2, 0, 2, 2.",
    "start": "4895430",
    "end": "4903480"
  },
  {
    "text": "And the proof is basically\nthat this is simply the Hamming weight of C plus c prime\nas c prime runs through",
    "start": "4903480",
    "end": "4911940"
  },
  {
    "text": "C. What is this equal to? So the proof is that this is\nequal to the Hamming weight of",
    "start": "4911940",
    "end": "4921610"
  },
  {
    "text": "c prime as c prime\nruns through C.",
    "start": "4921610",
    "end": "4927020"
  },
  {
    "text": "So the distance profile from any\ncode word is simply equal to the weight profile\nof the code itself.",
    "start": "4927020",
    "end": "4934969"
  },
  {
    "text": "The weight profile of this code\nis 0, 2, 2, 2, Start from any code word, measure the\ndistances to other code words,",
    "start": "4934970",
    "end": "4942699"
  },
  {
    "text": "I'm always going to get\n0, 2, 2, 2, 0, to itself, and the others.",
    "start": "4942700",
    "end": "4949680"
  },
  {
    "text": "Sounds sort of like the\ntetrahedron, doesn't it? It's zero distance from a code\nword to itself and equal",
    "start": "4949680",
    "end": "4956570"
  },
  {
    "text": "distance to all the other\ncode words, in that particular case. OK.",
    "start": "4956570",
    "end": "4961850"
  },
  {
    "text": "So again, everything is\nvery elementary here. The distance profile is\nindependent of C and equal to",
    "start": "4961850",
    "end": "4970200"
  },
  {
    "text": "the weight profile. ",
    "start": "4970200",
    "end": "4986330"
  },
  {
    "text": "So this has an extremely\nimportant corollary. What's the minimum Hamming\ndistance of the code?",
    "start": "4986330",
    "end": "4994440"
  },
  {
    "text": "You might expect this\nis going to be an important code parameter. AUDIENCE: [INAUDIBLE] ",
    "start": "4994440",
    "end": "5003230"
  },
  {
    "text": "PROFESSOR: The minimum Hamming\ndistance between any two code words is going to\nbe equal to --",
    "start": "5003230",
    "end": "5008620"
  },
  {
    "text": "I think you said it. AUDIENCE: The 0\n[UNINTELLIGIBLE]. PROFESSOR: Non-zero\nis important here.",
    "start": "5008620",
    "end": "5015469"
  },
  {
    "text": "If the distance profile is equal\nto the weight profile, one of the weights is always\ngoing to be zero.",
    "start": "5015470",
    "end": "5020660"
  },
  {
    "text": "And that corresponds to the\ndistance between a code word and itself.",
    "start": "5020660",
    "end": "5025780"
  },
  {
    "text": "All right. If I go through all the other 2\nto the k minus 1 distances, they're going to be weights.",
    "start": "5025780",
    "end": "5032840"
  },
  {
    "text": "They're going to be the\ndistances from a code to all other code words. And the minimum distance is\nsimply going to be the minimum",
    "start": "5032840",
    "end": "5041579"
  },
  {
    "text": "non-zero weight of the code. For example, in this code, the\nminimum Hamming distance",
    "start": "5041580",
    "end": "5048310"
  },
  {
    "text": "between any two distinct code\nwords is going to be equal to the minimum distance from\nthe 0 code word --",
    "start": "5048310",
    "end": "5056190"
  },
  {
    "text": "that's another way\nof doing it. Since it's independent of C, we\nmay as well take the base code word C to be zero.",
    "start": "5056190",
    "end": "5063490"
  },
  {
    "text": "And then what's the minimum\ndistance to 0? To the 0-code word? It's the minimum weight.",
    "start": "5063490",
    "end": "5069650"
  },
  {
    "text": "From the 0 code word, distance\nequals weight. So the minimum distance is the\nminimum weight of any non-zero",
    "start": "5069650",
    "end": "5076710"
  },
  {
    "text": "code word, which for\nthis code is two. ",
    "start": "5076710",
    "end": "5083500"
  },
  {
    "text": "Now here the weight profile\nis 0, 2, 2, 2, 0.",
    "start": "5083500",
    "end": "5088550"
  },
  {
    "text": "The distance profile from any\ncode word to all the others is 0, 2, 2,2 2.",
    "start": "5088550",
    "end": "5094150"
  },
  {
    "text": "This is always the distance\nto itself. So minimum distance to\nother code words is",
    "start": "5094150",
    "end": "5099950"
  },
  {
    "text": "always going to be two. Furthermore, the number of\nnearest neighbors --",
    "start": "5099950",
    "end": "5108560"
  },
  {
    "text": "to go back and use chapter\nfive terminology -- the number of nearest neighbors\nis going to be the",
    "start": "5108560",
    "end": "5116530"
  },
  {
    "text": "number of code words that have\nthat minimum weight -- in this case, three.",
    "start": "5116530",
    "end": "5122760"
  },
  {
    "text": "Still sounding a lot like\na tetrahedron, isn't it? This easy map between Hamming\ndistance and Euclidean",
    "start": "5122760",
    "end": "5130829"
  },
  {
    "text": "distance for this case and in\ngeneral for all of our cases.",
    "start": "5130830",
    "end": "5137840"
  },
  {
    "text": "So corollary.",
    "start": "5137840",
    "end": "5143300"
  },
  {
    "text": "The minimum Hamming distance,\nwhich implicitly means between",
    "start": "5143300",
    "end": "5148960"
  },
  {
    "text": "two distinct code words of C,\nis equal to the minimum",
    "start": "5148960",
    "end": "5155390"
  },
  {
    "text": "non-zero weight of C, and the\nnumber of minimum weight code",
    "start": "5155390",
    "end": "5166120"
  },
  {
    "text": "words is independent -- ",
    "start": "5166120",
    "end": "5171400"
  },
  {
    "text": "I'm doing this backwards. From any code word, the number\nof code words that distance,",
    "start": "5171400",
    "end": "5178670"
  },
  {
    "text": "let's call this d, is equal\nto the number of",
    "start": "5178670",
    "end": "5185350"
  },
  {
    "text": "weight d code words. Sorry, you probably\ncan't see that.",
    "start": "5185350",
    "end": "5191110"
  },
  {
    "start": "5191110",
    "end": "5196360"
  },
  {
    "text": "All right. So we get this symmetry property\nfor codes that follows from the group property\nof the code that if",
    "start": "5196360",
    "end": "5205900"
  },
  {
    "text": "we stand on any code word and\nlook out, we're always going to see the same thing.",
    "start": "5205900",
    "end": "5211590"
  },
  {
    "text": "We have this constant. It's actually easiest to see\nthis when we make the map from",
    "start": "5211590",
    "end": "5217710"
  },
  {
    "text": "the code to the Euclidean\nimage of the code. ",
    "start": "5217710",
    "end": "5228739"
  },
  {
    "text": "So the Euclidean image S of C\nof the code word is going to",
    "start": "5228740",
    "end": "5236350"
  },
  {
    "text": "be some set of 2 to the\nk vertices of an",
    "start": "5236350",
    "end": "5244760"
  },
  {
    "text": "n-cube of side alpha. ",
    "start": "5244760",
    "end": "5255270"
  },
  {
    "text": "Let's talk about the Euclidean\nimage of these properties.",
    "start": "5255270",
    "end": "5261360"
  },
  {
    "text": "If the minimum Hamming distance\nof the code is d,",
    "start": "5261360",
    "end": "5268210"
  },
  {
    "text": "what's the minimum squared\nEuclidean distance between elements of S of\nC going to be?",
    "start": "5268210",
    "end": "5274469"
  },
  {
    "text": " Well, let's do it coordinate\nby coordinates.",
    "start": "5274470",
    "end": "5280975"
  },
  {
    "text": " Let's take two code words,\nC and c prime, let's say.",
    "start": "5280975",
    "end": "5291800"
  },
  {
    "text": "And let's suppose we have\nsome Hamming distance between C and c prime. ",
    "start": "5291800",
    "end": "5298740"
  },
  {
    "text": "That means that c and c prime\ndiffer in the Hamming",
    "start": "5298740",
    "end": "5303940"
  },
  {
    "text": "distance, number of places. So if we map this into the\ncorresponding pair of vertices",
    "start": "5303940",
    "end": "5315300"
  },
  {
    "text": "of the n-cube in Euclidean\nspace, S of C and S of c prime, how many coordinates are\nthese going to differ in?",
    "start": "5315300",
    "end": "5323500"
  },
  {
    "text": " It's going to differ in same\nnumber of coordinates, D_h.",
    "start": "5323500",
    "end": "5331150"
  },
  {
    "text": "If they don't differ, what's\nEuclidean squared distance in those coordinates?",
    "start": "5331150",
    "end": "5336809"
  },
  {
    "text": "0. If they do differ, the Euclidean\nsquared distance is 4 alpha squared.",
    "start": "5336810",
    "end": "5343079"
  },
  {
    "text": "So the Euclidean distance D_e\nbetween S of C and S of c",
    "start": "5343080",
    "end": "5351320"
  },
  {
    "text": "prime is simply going to be\n4 alpha squared times the Hamming distance between\nC and c prime, yes?",
    "start": "5351320",
    "end": "5358710"
  },
  {
    "text": " So I should say this is the\nsquared Euclidean distance.",
    "start": "5358710",
    "end": "5365230"
  },
  {
    "text": "Why do we always talk about the squared Euclidean distance? Because it's additive,\ncoordinate-wise.",
    "start": "5365230",
    "end": "5370730"
  },
  {
    "text": "And the Hamming distance is\nadditive, coordinate-wise. So there's a nice\neasy map here.",
    "start": "5370730",
    "end": "5376260"
  },
  {
    "text": " So what does this mean d_min\nsquared is going to be?",
    "start": "5376260",
    "end": "5382020"
  },
  {
    "text": " d_min squared of, let's say, S\nof C. This constellation that",
    "start": "5382020",
    "end": "5390910"
  },
  {
    "text": "we've formed by taking the\nEuclidean image of c. The minimum square distance\nbetween points in S of C is",
    "start": "5390910",
    "end": "5400050"
  },
  {
    "text": "just going to be 4 alpha squared\ntimes d, where I don't",
    "start": "5400050",
    "end": "5405139"
  },
  {
    "text": "think I ever -- d equals min Hamming distance.",
    "start": "5405140",
    "end": "5410585"
  },
  {
    "text": " And we're always going to talk\nabout n, k, d as the three key",
    "start": "5410585",
    "end": "5418980"
  },
  {
    "text": "parameters of a binary\nlinear block code. n is the code length, F2 to the\nn, k is the dimension, d",
    "start": "5418980",
    "end": "5426920"
  },
  {
    "text": "is the minimum Hamming\ndistance. So by going into this Hamming\ngeometry, we've got a third",
    "start": "5426920",
    "end": "5432930"
  },
  {
    "text": "key property of the code. And we see it's key, because we\ncan get the minimum squared distance between this Euclidean\nimage constellation,",
    "start": "5432930",
    "end": "5440159"
  },
  {
    "text": "just 4 alpha squared d. AUDIENCE: nd makes\na probability of",
    "start": "5440160",
    "end": "5445867"
  },
  {
    "text": "[UNINTELLIGIBLE] that is\ndependent on [UNINTELLIGIBLE] then. PROFESSOR: Correct. This is all we need to know to\nget the union bound estimate.",
    "start": "5445868",
    "end": "5453780"
  },
  {
    "text": "Well, a few more things. We need to know what K_min\naverage of S of C. And what is",
    "start": "5453780",
    "end": "5465590"
  },
  {
    "text": "that going to be? This is simply going to be the\nnumber of words in the code.",
    "start": "5465590",
    "end": "5473730"
  },
  {
    "text": "To get this minimum squared\ndistance, we need a Hamming distance of d.",
    "start": "5473730",
    "end": "5480570"
  },
  {
    "text": "So the number of words in the\ncode of distance d, which is given by the parameter n sub d,\nis simply going to be the",
    "start": "5480570",
    "end": "5489380"
  },
  {
    "text": "number of nearest neighbors. Not just the average distance,\nbut I want to emphasize this",
    "start": "5489380",
    "end": "5495210"
  },
  {
    "text": "symmetry property. If we stand on any point, on\nany vertex of this cube in",
    "start": "5495210",
    "end": "5501699"
  },
  {
    "text": "n-space, which is the code\nvertex, and we look at all the other points in the\nconstellation, no matter which",
    "start": "5501700",
    "end": "5508030"
  },
  {
    "text": "point we stand on, we\nwill always see the same profile of distances. We'll see precisely nd code\nwords at Euclidean distance 4",
    "start": "5508030",
    "end": "5517580"
  },
  {
    "text": "alpha squared d. We'll see nd plus 1 at Euclidean\nsquared distance 4",
    "start": "5517580",
    "end": "5523410"
  },
  {
    "text": "alpha squared d plus 1, and so\nforth, right up the profile. So there's complete symmetry\nin the constellation.",
    "start": "5523410",
    "end": "5532020"
  },
  {
    "text": "In that universe, you don't know\nwhich code point you're standing on just by looking out,\nbecause the world looks",
    "start": "5532020",
    "end": "5537910"
  },
  {
    "text": "the same to you. Is that clear? ",
    "start": "5537910",
    "end": "5543820"
  },
  {
    "text": "OK. So from a communications point\nof view, this is important, because it means it doesn't\nmatter what code word we send.",
    "start": "5543820",
    "end": "5550720"
  },
  {
    "text": "The probability of error from\nany code word is going to be the same as the probability of\nerror from any other code",
    "start": "5550720",
    "end": "5556250"
  },
  {
    "text": "word, because the geometry\nis exactly the same. The Voronoi regions are\nall the same shape.",
    "start": "5556250",
    "end": "5563370"
  },
  {
    "text": "So given the exact probability\nof error, not just the union-bound estimate, is going\nto be independent of which",
    "start": "5563370",
    "end": "5568860"
  },
  {
    "text": "code word was sent. This all follows from the fact\nthat it's a linear code and",
    "start": "5568860",
    "end": "5574310"
  },
  {
    "text": "therefore has the group\nproperty, which translates into this very strong\ngeometrical uniformity",
    "start": "5574310",
    "end": "5581920"
  },
  {
    "text": "property in Euclidean space. Or actually in Hamming space\ntoo, but it's more striking in",
    "start": "5581920",
    "end": "5588020"
  },
  {
    "text": "Euclidean space.  OK?",
    "start": "5588020",
    "end": "5593700"
  },
  {
    "text": "So we have everything we\nneed to write down the union bound estimate. ",
    "start": "5593700",
    "end": "5602620"
  },
  {
    "text": "Union bound estimate was just\nthe probably of error per bit",
    "start": "5602620",
    "end": "5610030"
  },
  {
    "text": "is well approximated by K_b of\nconstellation, in this case, S",
    "start": "5610030",
    "end": "5618945"
  },
  {
    "text": "of C, times Q of the square root\nof the coding gain of the",
    "start": "5618945",
    "end": "5628869"
  },
  {
    "text": "constellation times\n2 Eb over N_0. ",
    "start": "5628870",
    "end": "5639428"
  }
]