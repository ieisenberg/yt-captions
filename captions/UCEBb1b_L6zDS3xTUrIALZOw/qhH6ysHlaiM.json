[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help MIT\nOpenCourseWare continue to",
    "start": "0",
    "end": "6859"
  },
  {
    "text": "offer high quality educational\nresources for free. To make a donation or view\nadditional materials from",
    "start": "6860",
    "end": "13420"
  },
  {
    "text": "hundreds of MIT courses, visit\nMIT OpenCourseWare at ocw.mit.edu.",
    "start": "13420",
    "end": "18760"
  },
  {
    "text": " PROFESSOR: So, the next part,\ntoday's going to be about",
    "start": "18760",
    "end": "26280"
  },
  {
    "text": "concurrent programming. So in this lecture we are going\nto study concurrent programing with the emphasis for\ncorrectness of programs.",
    "start": "26280",
    "end": "33680"
  },
  {
    "text": "Because parallel programs\nwill have the same correctness issues. So, if you want to get parallel,\nyou'd better get the",
    "start": "33680",
    "end": "38760"
  },
  {
    "text": "concurrency right first. What we're also going do is\nstart with a much simpler",
    "start": "38760",
    "end": "44060"
  },
  {
    "text": "machine model. In a program where we are going\nto use Java, because I think a lot of people\nunderstand Java.",
    "start": "44060",
    "end": "51680"
  },
  {
    "text": "Also, we are going to do\nsome very simple shared [UNINTELLIGIBLE] machine abstraction. I'm not going to even talk about\nany machine anymore.",
    "start": "51680",
    "end": "57350"
  },
  {
    "text": "I'm just going to talk about\nconcurrent programming here. You need to get through this\none before you can start to",
    "start": "57350",
    "end": "63980"
  },
  {
    "text": "dig in deep into\nthe next level. ",
    "start": "63980",
    "end": "75970"
  },
  {
    "text": "So in the next lecture, we will\nswitch from Java to C-C , I guess using MPI primitives\nin here.",
    "start": "75970",
    "end": "84070"
  },
  {
    "text": "We'll start moving into\nparallelism with emphasis on performance. And, of course, you have to get\ncorrectness, that's given,",
    "start": "84070",
    "end": "89200"
  },
  {
    "text": "but we'll start looking at\nperformance in there. And we'll start using the\ndistributive memory machine, all the notions and details of\nCell, so we'll just kind of go",
    "start": "89200",
    "end": "96950"
  },
  {
    "text": "down and down in\nthat direction. So, what's concurrency?",
    "start": "96950",
    "end": "102490"
  },
  {
    "text": "Sequential program\nis -- because sequential program opposite. It's basically single\nthread of execution,",
    "start": "102490",
    "end": "107640"
  },
  {
    "text": "with is a good one. Finish that, go to the\nnext, go to the next. That's a very simple abstract\nmodel that for about 35 years,",
    "start": "107640",
    "end": "114500"
  },
  {
    "text": "40 years, none of the machines\nwere actually following, that they had things in the back\nthat actually had some parallelism.",
    "start": "114500",
    "end": "120660"
  },
  {
    "text": "A concurrent program is the\n[UNINTELLIGIBLE PHRASE] because it's a collection of\nautonomous sequential threads",
    "start": "120660",
    "end": "127469"
  },
  {
    "text": "executing logically\nin parallel.  So you can execute this thing\neither multi-programming, so",
    "start": "127470",
    "end": "135180"
  },
  {
    "text": "we can multiplex different\nparts on multiprocessing. Well, multiprocessing basically\nhas [UNINTELLIGIBLE]",
    "start": "135180",
    "end": "142920"
  },
  {
    "text": "starting on different\nmachines. You can distribute, you\ncan actually send it to different places. Of course, you have to deal\nwith memory issues.",
    "start": "142920",
    "end": "150110"
  },
  {
    "text": "So, concurrency's not only\nparallel systems. So you can do interleaved concurrency.",
    "start": "150110",
    "end": "155450"
  },
  {
    "text": "You can have logically parallel,\nbut you run Thread A for a while, contacts with\nThread B for a while, contacts",
    "start": "155450",
    "end": "161610"
  },
  {
    "text": "with Thread C, so you can have\nmultiple threads on the same machine running. Or you can actually have\nrunning parallel.",
    "start": "161610",
    "end": "167830"
  },
  {
    "text": "You can have three different\nmachines running, A, B and C all the time. So you can have both in there.",
    "start": "167830",
    "end": "173510"
  },
  {
    "text": "But logically you should not\nsee a difference except for performance and stuff\nlike that.",
    "start": "173510",
    "end": "179540"
  },
  {
    "text": "So what I'm going to do is\ndo a bunch of examples. Can you read this? ",
    "start": "179540",
    "end": "187250"
  },
  {
    "text": "Let's start with a bank. So you have a bank account. So in Java you just basically\nhave ID, password, and",
    "start": "187250",
    "end": "193129"
  },
  {
    "text": "balance, and you have some\nway to construct this object in here.",
    "start": "193130",
    "end": "199330"
  },
  {
    "text": "And you can ask, and see the\npassword is correct. You can get the balance.",
    "start": "199330",
    "end": "205159"
  },
  {
    "text": "And you can post the balance. So that's a very simple\naccount object.",
    "start": "205160",
    "end": "210470"
  },
  {
    "text": "If you have a bank, you have a\nbunch of accounts in a hash map, and you create the\nhash map in here.",
    "start": "210470",
    "end": "217209"
  },
  {
    "text": "Then you can basically\n[? figure out ?] the bank, you actually create\na bank in here, and you can",
    "start": "217210",
    "end": "222670"
  },
  {
    "text": "get an account, given an ID. Now, assume you want\nto build an ATM.",
    "start": "222670",
    "end": "228280"
  },
  {
    "text": "How do you build an ATM? So, you have a bank -- you\nneed a bank in here, and here's some input and output\nstreams in here.",
    "start": "228280",
    "end": "236120"
  },
  {
    "text": "When you start the ATM, you will\nset up these input and output streams in here. In the main function, what\nyou'll do is, you get a bank,",
    "start": "236120",
    "end": "244810"
  },
  {
    "text": "create where the input streams\nare coming from. Create output goes standard --\nsystem output goes there.",
    "start": "244810",
    "end": "254400"
  },
  {
    "text": "And create an ATM in here, and\nyou will make the ATM run. So how do you run the ATM?",
    "start": "254400",
    "end": "260239"
  },
  {
    "text": "So, what happens in run\nis, you run forever? ATM doesn't stop any time.",
    "start": "260240",
    "end": "266150"
  },
  {
    "text": "What you can do is you can ask\nwhen somebody walks into the ATM, you can say what's\nthe account ID. Type the account ID.",
    "start": "266150",
    "end": "271790"
  },
  {
    "text": " You can get that account, so\nof course, if the account already is wrong it says,\nthrow exception.",
    "start": "271790",
    "end": "280040"
  },
  {
    "text": "You can say OK, what's the\npassword, get the password. You take the password, if it's\nwrong you throw exception.",
    "start": "280040",
    "end": "287169"
  },
  {
    "text": "Then you can say, here's\nyour balance today. What do you want to do? If you want to withdraw\nor deposit.",
    "start": "287170",
    "end": "295300"
  },
  {
    "text": "If you want to withdraw you can\ndo a minus number, if you want to deposit it will\nbe a plus number.",
    "start": "295300",
    "end": "300620"
  },
  {
    "text": "Then you can post that\ninto your balance.",
    "start": "300620",
    "end": "307310"
  },
  {
    "text": "Everybody got the\nthing for ATMs? So, assume activity trace.",
    "start": "307310",
    "end": "313160"
  },
  {
    "text": "So somebody comes and gives the\naccount ID, at least gives the password, and say that they\nhave $100,000 and say how",
    "start": "313160",
    "end": "321020"
  },
  {
    "text": "much you withdraw,\n$200 withdraw. And you get the balance\nin here. Looks nice.",
    "start": "321020",
    "end": "326099"
  },
  {
    "text": "It works. So I need to run multiple ATMs.\nAssume I am in a place",
    "start": "326100",
    "end": "331760"
  },
  {
    "text": "that I actually want to put two\nATMs or four ATMs next to each other. So how am I going to do that?",
    "start": "331760",
    "end": "338920"
  },
  {
    "text": "So, in order to do that, there's\nconcurrency in Java. So one way to get Java\nconcurrency is you can extend",
    "start": "338920",
    "end": "347030"
  },
  {
    "text": "this class thread and\ndefine a method run.",
    "start": "347030",
    "end": "354150"
  },
  {
    "text": "Or you have interface called\n[? Runabout, ?] that you can basically use\nthat interface and has",
    "start": "354150",
    "end": "359690"
  },
  {
    "text": "estimated run. Then when you have made\nthat run and when",
    "start": "359690",
    "end": "365130"
  },
  {
    "text": "[UNINTELLIGIBLE PHRASE] start, that will get started. Very simple way to do that.",
    "start": "365130",
    "end": "371150"
  },
  {
    "text": "Let me give you an example.  Little bit of a digression. Why do you want concurrent\nprogramming?",
    "start": "371150",
    "end": "376600"
  },
  {
    "text": "A lot of times, natural\napplication structure is not sequential. The world is not sequential.",
    "start": "376600",
    "end": "383010"
  },
  {
    "text": "And then try to sequentialize\nthe world sometimes means it's much more complicated\n[UNINTELLIGIBLE] So sometimes it's natural to\ndo things in parallel.",
    "start": "383010",
    "end": "391660"
  },
  {
    "text": "A lot of times the\nsequentiality's an artifact of the programming language,\nbecause we use a language like that.",
    "start": "391660",
    "end": "397740"
  },
  {
    "text": "Sometimes doing things in\nparallel ways, you can really improve things like throughput\nand responsiveness.",
    "start": "397740",
    "end": "403389"
  },
  {
    "text": "If you are doing IO, if you're\ndoing sequential programming [UNINTELLIGIBLE PHRASE] you're just twiddling your\nthumb waiting for the IO to come back.",
    "start": "403390",
    "end": "409160"
  },
  {
    "text": "In parallel things actually, you\ncan do parallel IO and you can do a lot cool\nstuff in here.",
    "start": "409160",
    "end": "415110"
  },
  {
    "text": "Of course, in this class,\nif you are multicore and multiprocessor multicore, you\ncan get parallel executions.",
    "start": "415110",
    "end": "420830"
  },
  {
    "text": "So there are more than one\n[UNINTELLIGIBLE PHRASE]. ",
    "start": "420830",
    "end": "430440"
  },
  {
    "text": "Also, if you are building a very\nlarge distributed system, concurrent programming is, you\nhad to deal with, especially",
    "start": "430440",
    "end": "437210"
  },
  {
    "text": "dealing with things like\nclient-server type of applications. So here's our original ATMs. So\nto go to multiple ATMs, I",
    "start": "437210",
    "end": "445264"
  },
  {
    "text": "am doing a few changes. I'll go back and forth\na few times. So the first thing I have done\nis I have sett here number of",
    "start": "445265",
    "end": "452090"
  },
  {
    "text": "ATMs to be four. Can you really read it\nfrom back there? AUDIENCE: [INAUDIBLE PHRASE]. PROFESSOR: OK, good.",
    "start": "452090",
    "end": "458919"
  },
  {
    "text": "Then what I have done is, in\nhere, I did four ATMs here,",
    "start": "458920",
    "end": "464240"
  },
  {
    "text": "and then I put it in a loop to\ncreate this ATM, so I created four ATMs in here and start\nfour ATMs, basically.",
    "start": "464240",
    "end": "470960"
  },
  {
    "text": "Then of course I extended these\nATMs so now we will extend [? up a thread. ?] And I haven't started that.",
    "start": "470960",
    "end": "477260"
  },
  {
    "text": "And the ATMs [UNINTELLIGIBLE] ATMs, so it's great. So now what happens is I assume\nnow there's two guys",
    "start": "477260",
    "end": "482820"
  },
  {
    "text": "going, both ATMs, at least\n[UNINTELLIGIBLE] been. Then enter the account and\n[UNINTELLIGIBLE PHRASE],",
    "start": "482820",
    "end": "487919"
  },
  {
    "text": "that's works really well. No problem. So we have two ATMs, two people actually went on parallel. One then deposited some money,\nother one took money, great.",
    "start": "487920",
    "end": "496580"
  },
  {
    "text": "Now, as MIT students, they\nwant to do something, they can hack it. So, [UNINTELLIGIBLE]",
    "start": "496580",
    "end": "502410"
  },
  {
    "text": "basically [UNINTELLIGIBLE] went\n[UNINTELLIGIBLE], and basically what\n[UNINTELLIGIBLE PHRASE]",
    "start": "502410",
    "end": "508039"
  },
  {
    "text": "enter the password, and they\nsaid I want to get $100.",
    "start": "508040",
    "end": "513890"
  },
  {
    "text": "I would get $90, basically. So he had $100 in his account. Then what he got was, so he\nactually managed to get $180",
    "start": "513890",
    "end": "523610"
  },
  {
    "text": "out of an account\nthat had $100. This is not a good ATM, at\nleast from the bank's",
    "start": "523610",
    "end": "528850"
  },
  {
    "text": "perspective. So what went wrong? If you look at what happened in\nactivity trace, so we print",
    "start": "528850",
    "end": "538250"
  },
  {
    "text": "100 in here. And then you said, you want to\nread this value, you both",
    "start": "538250",
    "end": "546990"
  },
  {
    "text": "entered 90, right here. And this account balance\n[UNINTELLIGIBLE PHRASE]",
    "start": "546990",
    "end": "553790"
  },
  {
    "text": "because the account\nbalance was 100. You saw also the\naccount balance [UNINTELLIGIBLE PHRASE], yes,\nit is [UNINTELLIGIBLE].",
    "start": "553790",
    "end": "560279"
  },
  {
    "text": "Then each went post, it went to\n10 -- this also did a post of the same time, result\ncame both 10.",
    "start": "560280",
    "end": "566680"
  },
  {
    "text": "How could this happen? So that way it can happen\nis, so in the ATM, the",
    "start": "566680",
    "end": "571779"
  },
  {
    "text": "[UNINTELLIGIBLE PHRASE], what\nhappens is v is minus 90, and",
    "start": "571780",
    "end": "578600"
  },
  {
    "text": "this post [UNINTELLIGIBLE]\nalso when you start a v it's minus 90. Then you treat the\nbalance as 100.",
    "start": "578600",
    "end": "585480"
  },
  {
    "text": "So in this interleaving, and so\nit is the plus, you get 10.",
    "start": "585480",
    "end": "591810"
  },
  {
    "text": "Also, before you write it out,\nyou read the balance in the other interleaving, you've got\nthe balance as 100, and you do",
    "start": "591810",
    "end": "597145"
  },
  {
    "text": "the plus as 10. So it destroyed the balance,\nnow balance became 10, and also this guy also wrote the\nbalance -- it doesn't matter,",
    "start": "597145",
    "end": "603710"
  },
  {
    "text": "it got 10 updated twice,\nand that's it. So you can have interleaving\nin here, that actually did",
    "start": "603710",
    "end": "610460"
  },
  {
    "text": "something that's not a\nsignature program. And you're in big trouble.",
    "start": "610460",
    "end": "616680"
  },
  {
    "text": "So in order to get out of\nthat, problem is all interleaving of threads are not\nacceptable and current.",
    "start": "616680",
    "end": "624110"
  },
  {
    "text": "What you want is some kind\nof a sequential-looking performance, even though you'd\nget parallel, you don't want to do all these interleavings\nin here.",
    "start": "624110",
    "end": "632050"
  },
  {
    "text": "So in order to do that,\nJava provides this synchronization mechanism. That's just strict\ninterleaving.",
    "start": "632050",
    "end": "639240"
  },
  {
    "text": "So, what synchronizations do\nis, they ensure safety for shared updates.",
    "start": "639240",
    "end": "644760"
  },
  {
    "text": "So if you're sharing\nsomething, so it avoids races, basically. It avoids this old interleaving\nordering here.",
    "start": "644760",
    "end": "650760"
  },
  {
    "text": "Also, it allows you to\ncoordinate actions among shared space, basically. Because at some point people\nhave to coordinate and take",
    "start": "650760",
    "end": "657500"
  },
  {
    "text": "that parallel computation. With notification\nyou can do that. So, when multiple threads access\nthe shared resource,",
    "start": "657500",
    "end": "664540"
  },
  {
    "text": "simultaneously, it's safe only\nif all accesses have no effect",
    "start": "664540",
    "end": "669620"
  },
  {
    "text": "on the resource. Basically, we're reading\nvariables. But everybody can read the same\nvariable, because you're",
    "start": "669620",
    "end": "675105"
  },
  {
    "text": "not changing anything. I can do that. Or all accesses are\nidempotent.",
    "start": "675105",
    "end": "680850"
  },
  {
    "text": "So you can say, we\ncan do that. Or only one access at a time.",
    "start": "680850",
    "end": "686310"
  },
  {
    "text": "Which is called mutual\nexclusion. So in this case we are\nchanging something. It's not that important.",
    "start": "686310",
    "end": "691670"
  },
  {
    "text": "So we have to actually\ndo mutual exclusion. So here's a way to look at\nsafety problems. Here might be",
    "start": "691670",
    "end": "698840"
  },
  {
    "text": "an algorithm that you and your\nroommate have. So you arrive home, look in the\nfridge, no milk.",
    "start": "698840",
    "end": "706700"
  },
  {
    "text": "Leave for grocery, arrive\nat grocery, buy milk and arrive at home. The minute you leave for\ngrocery, your roommate arrives",
    "start": "706700",
    "end": "713080"
  },
  {
    "text": "and do this. Then what do you have is\nyou have too much milk. So here's the problem\nin a little bit",
    "start": "713080",
    "end": "720770"
  },
  {
    "text": "more abstract sense. And you need a way to\nsynchronize this.",
    "start": "720770",
    "end": "725890"
  },
  {
    "text": "So how about this. No milk and no note. So you leave a note before you\nactually leave the house and",
    "start": "725890",
    "end": "733280"
  },
  {
    "text": "buy milk, and then you come\nback and remove the note. Does this work?",
    "start": "733280",
    "end": "739320"
  },
  {
    "text": " AUDIENCE: [INAUDIBLE PHRASE].",
    "start": "739320",
    "end": "744430"
  },
  {
    "text": " PROFESSOR: I mean here\nalso you can do that,",
    "start": "744430",
    "end": "749899"
  },
  {
    "text": "no milk and no note. So both are started. We would leave a note,\nand these things can",
    "start": "749900",
    "end": "758470"
  },
  {
    "text": "happen at the same time. There's a little bit of things\nsaying OK, why didn't you see your roommate. They go buy milk, he goes\nto buy milk and you have",
    "start": "758470",
    "end": "764820"
  },
  {
    "text": "too much milk too. So the way to do this\nin Java is this",
    "start": "764820",
    "end": "771610"
  },
  {
    "text": "notion of critical section. Critical section is where only\none thread can be in it at a given time.",
    "start": "771610",
    "end": "779200"
  },
  {
    "text": "The way you can do it with\nJava is, you can put synchronized in front\nof the method. And you do that method, only\none person can be executing",
    "start": "779200",
    "end": "787250"
  },
  {
    "text": "that method at any one time. So in here I would say get\nbalance and post so you can synchronize.",
    "start": "787250",
    "end": "792990"
  },
  {
    "text": "So when you do that,\nwhat happens is -- so in here you read. No problem, you can\ndo this parallel.",
    "start": "792990",
    "end": "799050"
  },
  {
    "text": "You can do this in parallel. And then you say, first\ntake out post in here.",
    "start": "799050",
    "end": "805390"
  },
  {
    "text": "And this [? takes out ?] post.\nBecause of synchronization",
    "start": "805390",
    "end": "811730"
  },
  {
    "text": "these things can't have an\norder, because this has to happen in some order. Either this happens first\nand this has to finish before this one.",
    "start": "811730",
    "end": "818089"
  },
  {
    "text": "At that point you can actually\n-- what happened now? ",
    "start": "818090",
    "end": "826829"
  },
  {
    "text": "Are we happy? AUDIENCE: [INAUDIBLE]. PROFESSOR: Yeah. At least banks realize --",
    "start": "826830",
    "end": "833800"
  },
  {
    "text": "bank's book is correct. Because it realizes,\nhere is more money. But actually it let you\ntake more money than",
    "start": "833800",
    "end": "841120"
  },
  {
    "text": "your account had. So at least it got\nthat value right. But what happened was, why\nis this happening now?",
    "start": "841120",
    "end": "846250"
  },
  {
    "text": "AUDIENCE: You want the\ncheck covered. PROFESSOR: OK, you want\nto check also.",
    "start": "846250",
    "end": "851899"
  },
  {
    "text": "Good. So the key thing is, here\nwe didn't check. So you have a negative bank\nbalance happening.",
    "start": "851900",
    "end": "859100"
  },
  {
    "text": "So this is a problem\nwith atomacity. Because synchronized\nmethods execute the",
    "start": "859100",
    "end": "864760"
  },
  {
    "text": "body at atomic units. So when that happens, the entire\nthing of body happens without anybody else\n[? modifying. ?]",
    "start": "864760",
    "end": "870880"
  },
  {
    "text": "That's the only thing that's\nhappening at any given time.  The code read [UNINTELLIGIBLE]",
    "start": "870880",
    "end": "877540"
  },
  {
    "text": "you chose is probably too\nsmall in this case. What we need to do is, we\nneed to basically have",
    "start": "877540",
    "end": "885140"
  },
  {
    "text": "synchronizing not on the\nmethod but a lot more [UNINTELLIGIBLE] in there,\nso you have to do block synchronization.",
    "start": "885140",
    "end": "890920"
  },
  {
    "text": "So synchronized keywords\nactually work like this too. You can say instead of doing\na method, you can just synchronize account and all\nthose things happen",
    "start": "890920",
    "end": "898800"
  },
  {
    "text": "synchronously within\nthat block.",
    "start": "898800",
    "end": "904130"
  },
  {
    "text": "So, now what we have done\nis we have built a bigger atomic unit. ",
    "start": "904130",
    "end": "911580"
  },
  {
    "text": "So here's the programming\nhere. ",
    "start": "911580",
    "end": "917060"
  },
  {
    "text": "So here's the synchronized\nunit in here. So what we did was, we say\ninstead of these synchronized",
    "start": "917060",
    "end": "925140"
  },
  {
    "text": "and these synchronize\nseparately, both of these computations have to\nhappen atomically. So when I check our\nbank balance, we",
    "start": "925140",
    "end": "932180"
  },
  {
    "text": "can't do anything else. So now what happens? So yeah, in this situation\nyou're reading, reading, and",
    "start": "932180",
    "end": "939610"
  },
  {
    "text": "you get synchronized account\nin here, and I do account balance plus [? well ?]",
    "start": "939610",
    "end": "945750"
  },
  {
    "text": "and post the account. So in here I go to\n10, I do that.",
    "start": "945750",
    "end": "951540"
  },
  {
    "text": "If I start the other one here,\nI have to wait till that entire synchronization is\nover before I do that.",
    "start": "951540",
    "end": "958390"
  },
  {
    "text": "Of course, I don't have enough\nbalance, so I throw exception. Are we still happy?",
    "start": "958390",
    "end": "963680"
  },
  {
    "text": " Is there issue on this one? ",
    "start": "963680",
    "end": "970740"
  },
  {
    "text": "I mean, I guess -- assume you\ncan do something clever, but I haven't done that.",
    "start": "970740",
    "end": "975940"
  },
  {
    "text": "But there's one issue in here. Which, when you start it's\njust, balance is 100.",
    "start": "975940",
    "end": "982260"
  },
  {
    "text": "So in this one, say\nbalance is 100. You go type it and then voila,\nyou type it and then, sorry, I",
    "start": "982260",
    "end": "987320"
  },
  {
    "text": "don't have money. So that's not nice, because if\nyou've got the balance you should be able to get that. So how we deal with that?",
    "start": "987320",
    "end": "992740"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE PHRASE].",
    "start": "992740",
    "end": "1000167"
  },
  {
    "start": "1000167",
    "end": "1007100"
  },
  {
    "text": "PROFESSOR: So that's probably\nthe best solution to that because we can only\nlog into one. But in this example I assume\nwhat we are doing.",
    "start": "1007100",
    "end": "1015330"
  },
  {
    "text": "How can we deal with this one? AUDIENCE: There are two\nways of doing it. One is to put the whole thing\n[INAUDIBLE PHRASE] section.",
    "start": "1015330",
    "end": "1021282"
  },
  {
    "text": "The other way is to notify\nsomebody that the [UNINTELLIGIBLE PHRASE].",
    "start": "1021283",
    "end": "1026720"
  },
  {
    "text": "PROFESSOR:\n[UNINTELLIGIBLE PHRASE]. So what I can do is I can\nsay OK, wait a minute. I am actually going to\nmake the critical",
    "start": "1026720",
    "end": "1032059"
  },
  {
    "text": "section even bigger. So now I print the balance\nbefore I do that.",
    "start": "1032060",
    "end": "1038970"
  },
  {
    "text": "So the entire thing is\ncritical section. I print the balance off\nand then go ahead and withdraw that.",
    "start": "1038970",
    "end": "1044269"
  },
  {
    "text": "So what might happen\nin this case? AUDIENCE: [INAUDIBLE PHRASE]. ",
    "start": "1044270",
    "end": "1052040"
  },
  {
    "text": "PROFESSOR: Yeah. That's the issue of a little\nbit of waiting. So what happens is, in here. You do this one, and you do\nsynchronized account.",
    "start": "1052040",
    "end": "1058520"
  },
  {
    "text": "And you put the balance and\nother one do synchronized and you ask the question. In here.",
    "start": "1058520",
    "end": "1063770"
  },
  {
    "text": "And you start thinking. We can start thinking that my\nmachine is not responsive,",
    "start": "1063770",
    "end": "1069300"
  },
  {
    "text": "it's just waiting for the\ncritical section started. [UNINTELLIGIBLE] and you\nhave this [? IOUN ?] sitting in the middle. That's not good either.",
    "start": "1069300",
    "end": "1075650"
  },
  {
    "text": "So he has a performance issue. So that's not a good\nway of doing that. So you don't get any\nresponse in here.",
    "start": "1075650",
    "end": "1080870"
  },
  {
    "text": "So you can make this\natomic [? radius ?] but there's a price you'll\npay by making it",
    "start": "1080870",
    "end": "1086200"
  },
  {
    "text": "[UNINTELLIGIBLE PHRASE] large.  So here's another thing\nwe want to do.",
    "start": "1086200",
    "end": "1092710"
  },
  {
    "text": "I want to do something that can\ntransfer account balance from one account to another.",
    "start": "1092710",
    "end": "1098130"
  },
  {
    "text": "So I might do that if I have a\nmethod in here to transfer [UNINTELLIGIBLE] account, this amount. So what I do is, I synchronize\nfrom account.",
    "start": "1098130",
    "end": "1106029"
  },
  {
    "text": "I say, I get balance in here. ",
    "start": "1106030",
    "end": "1112639"
  },
  {
    "text": "If the balance is available,\nI can synchronize the two accounts and force it there. ",
    "start": "1112640",
    "end": "1121789"
  },
  {
    "text": "See any problems? So let's see what happenes. So assume I want to transfer\n10 to Ben's account and Ben",
    "start": "1121790",
    "end": "1130470"
  },
  {
    "text": "wants to transfer 20 to\nAlyssa's account. So what happens is,\nthis goes --",
    "start": "1130470",
    "end": "1136420"
  },
  {
    "text": "get the value in here, and\nyou synchronize to two and say OK, great.",
    "start": "1136420",
    "end": "1145160"
  },
  {
    "text": "Now what happens is, in here,\nin from, I am holding a",
    "start": "1145160",
    "end": "1151020"
  },
  {
    "text": "Alyssa's account. There I am holding\nBen's account. Now, inside I want to\nsynchronize for Alyssa. And I'm still [UNINTELLIGIBLE]\nwhen I --",
    "start": "1151020",
    "end": "1157630"
  },
  {
    "text": "wait until Alyssa\ngot released. And he says I want to wait\ntill Ben got released. And nobody's going to release,\nand you're hung.",
    "start": "1157630",
    "end": "1163100"
  },
  {
    "text": "You are in what you call\na deadlock situation. That's a deadlock. ",
    "start": "1163100",
    "end": "1170360"
  },
  {
    "text": "So you have to be very careful\nwhen you do synchronizing. If you do multiple\nsynchronization, the easiest",
    "start": "1170360",
    "end": "1176830"
  },
  {
    "text": "thing you can do is, you\ndo it in some order. And end up in a a deadlock\nsituation. This is a very common way of\nparallel programs doing that.",
    "start": "1176830",
    "end": "1186470"
  },
  {
    "text": "So how to avoid deadlock? Because deadlock is, there's\na cycle in locking graph.",
    "start": "1186470",
    "end": "1194460"
  },
  {
    "text": "So somebody's going to lock\nsomebody, he's going to lock that person, and we\nhave a cycle. You can end up in deadlock\nsituation.",
    "start": "1194460",
    "end": "1201620"
  },
  {
    "text": "So standard solution for that\nis, you take locks in some kind of canonical order.",
    "start": "1201620",
    "end": "1208580"
  },
  {
    "text": "You don't take in\narbitary order. So it's some kind of a -- you\nhave some base in, OK, if you",
    "start": "1208580",
    "end": "1214080"
  },
  {
    "text": "are taking this lock, you have\nto have, after that, you can take a higher order lock.",
    "start": "1214080",
    "end": "1220580"
  },
  {
    "text": "So you have to have some\nkind of order in here. Acquire in increasing\norder and release in decreasing order. So you have some kind\nof force in here.",
    "start": "1220580",
    "end": "1229190"
  },
  {
    "text": "This ensures deadlock freedom\nmost of the time, but it's not that easy to do a\nlot of the time. Because your program might not\nfit into this nice ordering a",
    "start": "1229190",
    "end": "1236320"
  },
  {
    "text": "lot of times, and then sometimes\nyou realize that you had locked something and at that\ntime it's too late when",
    "start": "1236320",
    "end": "1242769"
  },
  {
    "text": "you realize it. And then it has a\ndifferent order. So this is, you have to sometime\ndo some changes to",
    "start": "1242770",
    "end": "1248630"
  },
  {
    "text": "basically make the program\nwork like this. So in here, what you can do\nis, in the program you can",
    "start": "1248630",
    "end": "1254180"
  },
  {
    "text": "associate some kind of a rank,\nand when you put in account,",
    "start": "1254180",
    "end": "1260220"
  },
  {
    "text": "you put the rank to the\naccount number. So you have some kind\nof ordering in here. Then what you have is, you\nalways get the first, highest",
    "start": "1260220",
    "end": "1268570"
  },
  {
    "text": "rank one before you\ngo the next one. So there's some ordering\nin here. So at least then we'll be at\nleast forced into some",
    "start": "1268570",
    "end": "1274995"
  },
  {
    "text": "ordering in here. AUDIENCE: Is there a way of\n[UNINTELLIGIBLE PHRASE] deadlock [INAUDIBLE PHRASE].",
    "start": "1274995",
    "end": "1280659"
  },
  {
    "text": " PROFESSOR: Not statically. Because most of the time that\nmeans you have to know all the",
    "start": "1280660",
    "end": "1288289"
  },
  {
    "text": "possible control profile,\nto do that. And, for example, there are some\ntools that can -- because",
    "start": "1288290",
    "end": "1296130"
  },
  {
    "text": "you might know that, for\nexample, assume you are trying to enforce some ordering\nof locks.",
    "start": "1296130",
    "end": "1303039"
  },
  {
    "text": "But it's not the software, it's\nthe locking software, that doesn't know about those.",
    "start": "1303040",
    "end": "1308080"
  },
  {
    "text": "You can actually write a locking\nsoftware that will tell you, like look, you are\ntrying to acquire locking out",
    "start": "1308080",
    "end": "1313460"
  },
  {
    "text": "of order, out of this\nlocking order. Most of the time you might be\nOK because it might not hit,",
    "start": "1313460",
    "end": "1318820"
  },
  {
    "text": "but [? we assume ?] that if\nyou are doing unsafe thing that might work, so. So you can put some dynamic\nchecks that might warn you",
    "start": "1318820",
    "end": "1325130"
  },
  {
    "text": "that you might be in a\nsituation, but it doesn't guarantee you. So deadlock is something, you\nhave to basically -- there's no nice tools for.",
    "start": "1325130",
    "end": "1331360"
  },
  {
    "text": "Basically, it's almost a\nsoftware [? methodology. ?] So, for example, you can impose\na software methodology to say, I'm following this\nconvention and that will",
    "start": "1331360",
    "end": "1339370"
  },
  {
    "text": "guarantee me deadlock freedom. So one good convention\nis this, basically some order in here.",
    "start": "1339370",
    "end": "1344820"
  },
  {
    "text": "So, another interesting thing\nand hard thing is race conditions.",
    "start": "1344820",
    "end": "1350390"
  },
  {
    "text": "These are non-deterministic\ntiming dependent, and cause data corruption, crashes that\nare impossible to detect.",
    "start": "1350390",
    "end": "1357549"
  },
  {
    "text": "So the problem with race\nconditions is the minute you put your debug, or put any\ndebugging things, race",
    "start": "1357550",
    "end": "1364570"
  },
  {
    "text": "conditions goes away. It comes back when you are in\nit all and you're debugging [UNINTELLIGIBLE PHRASE].",
    "start": "1364570",
    "end": "1369940"
  },
  {
    "text": "It happens again because\nit's basically an independent thing. In fact, I have this\ninteresting",
    "start": "1369940",
    "end": "1377049"
  },
  {
    "text": "experience with myself. A long time ago I was working\nat Microsoft and I worked two summers. In one summer I was working on\ntheir LAN manager and network",
    "start": "1377050",
    "end": "1386540"
  },
  {
    "text": "manager, and there's a bug that\nafter you run the network manager for some time\nit just freezes.",
    "start": "1386540",
    "end": "1393410"
  },
  {
    "text": "That's not a nice behavior\nto have if you are running your network. That bug lasted the\nentire year.",
    "start": "1393410",
    "end": "1400330"
  },
  {
    "text": "And at the end they had,\nI think, a $2,000 bounty on that bug. Because the minute you do\nany instrumentation, the",
    "start": "1400330",
    "end": "1406590"
  },
  {
    "text": "[? bug isn't ?] [UNINTELLIGIBLE] When you have more\ninstrumentation and have 100 machines running, heavily,\nhitting another machine.",
    "start": "1406590",
    "end": "1413840"
  },
  {
    "text": "Once in a while voila. It freezes. And you have no idea\nwhy it happened. That was so hard to debug\nbecause there's nothing you",
    "start": "1413840",
    "end": "1421365"
  },
  {
    "text": "could do, because any time\nyou do any changes, the bug goes away. ",
    "start": "1421365",
    "end": "1429510"
  },
  {
    "text": "You had to be very careful\nbecause these things are not easy to find, and happen\nintermittently.",
    "start": "1429510",
    "end": "1436160"
  },
  {
    "text": "And very hard to debug. So having good discipline and\ngood design really helps to",
    "start": "1436160",
    "end": "1441270"
  },
  {
    "text": "get rid of it. These are not something you can\ngo through like program debugs, it [UNINTELLIGIBLE]\ncycle.",
    "start": "1441270",
    "end": "1446580"
  },
  {
    "text": "If you read that cycle, it's\na very slow cycle. The best way to do that is get\nthe design right first.",
    "start": "1446580",
    "end": "1453230"
  },
  {
    "text": "So what's a data race? So I assume I had this\nprogram like that. So I read [? hit ?] in there,\nand then I modify",
    "start": "1453230",
    "end": "1462500"
  },
  {
    "text": "and write in this. This doesn't have to be\nin two statements. If we [UNINTELLIGIBLE] same statement, the compiler\nmight put it in register,",
    "start": "1462500",
    "end": "1468790"
  },
  {
    "text": "read, update and modify\nand write. So it might just look hits\nequals hits plus 1 and hits",
    "start": "1468790",
    "end": "1474540"
  },
  {
    "text": "equals hits plus\n1 on the cycle. Doesn't have to\n[? have temporary. ?] and in your call. Because the compiler puts a\n[? temporary ?] in there.",
    "start": "1474540",
    "end": "1481020"
  },
  {
    "text": "And if you execute like\nthis you're happy. But if you get excluded in this\norder, I don't get at it",
    "start": "1481020",
    "end": "1488480"
  },
  {
    "text": "two times, I only get it because\nI read hit the order given values. This adds once and writes. And this also adds one to\n[? the ordinary value ?]",
    "start": "1488480",
    "end": "1494820"
  },
  {
    "text": "and write. So I only get it increased\nby one and you are in a bad situation. ",
    "start": "1494820",
    "end": "1503929"
  },
  {
    "text": "The problems with data races\nis this non-determinism. ",
    "start": "1503930",
    "end": "1510410"
  },
  {
    "text": "We ensured [UNINTELLIGIBLE] that this mutual exclusion. So if you have same data access,\nmake sure that they",
    "start": "1510410",
    "end": "1516660"
  },
  {
    "text": "are in the mutual\nexclude region. You can basically see that it\nhas access to old objects.",
    "start": "1516660",
    "end": "1525150"
  },
  {
    "text": "Before you go there, one\ninteresting thing is this is",
    "start": "1525150",
    "end": "1530470"
  },
  {
    "text": "just a problem with all parallel\nprograms. So at the beginning you say OK, I'm going\nto have this nice mutual excluded, lock ordered\nprogram.",
    "start": "1530470",
    "end": "1537059"
  },
  {
    "text": "You write this. It worked correctly,\nbeautifully, but run dog slow",
    "start": "1537060",
    "end": "1542890"
  },
  {
    "text": "because now we are huge\ncritical sections. Everybody's waiting in data and\nthen someone says I want to run fast. I think I\ndon't need this lock.",
    "start": "1542890",
    "end": "1549810"
  },
  {
    "text": "It doesn't seem to be, so keep\nremoving locks, making critical sections smaller\nand stuff like that. That's where all the problems\nstart cropping up, because all",
    "start": "1549810",
    "end": "1556920"
  },
  {
    "text": "this nice design goes\nto the dogs when you have performance issues. So when you realize that, you\nwant to write this nice",
    "start": "1556920",
    "end": "1562520"
  },
  {
    "text": "program, nice large critical\nsections, stuff like that. The programs will\nwork correctly.",
    "start": "1562520",
    "end": "1568020"
  },
  {
    "text": "But run like a dog because now\nit's sequential in many cases because you are doing this. Then you go and say OK, I\nwant to run parallel.",
    "start": "1568020",
    "end": "1573500"
  },
  {
    "text": "Eh, this is OK. That's when problems\nstart creeping up. So make sure that when you get\na discipline, as you can go",
    "start": "1573500",
    "end": "1582140"
  },
  {
    "text": "into the performance improvement\nbut you still maintain at least some\npart of discipline. That's the hard thing.",
    "start": "1582140",
    "end": "1588740"
  },
  {
    "text": "So I want to switch gears a\nlittle bit to talk about a classic problem. It's called dining philosophers\nproblem.",
    "start": "1588740",
    "end": "1594960"
  },
  {
    "text": "So, there are five philosophers sitting around a table. Between each of the philosophers there's a chopstick.",
    "start": "1594960",
    "end": "1601039"
  },
  {
    "text": " So each philosopher\ndo two things. He thinks -- he or she thinks\nor he or she eats.",
    "start": "1601040",
    "end": "1610690"
  },
  {
    "text": "So the philosopher thinks\nfor a while. And then the philosopher\nis hungry. She stops thinking and she\npicks up a left and right",
    "start": "1610690",
    "end": "1619530"
  },
  {
    "text": "chopstick, eats, and puts\nthe chopsticks down. He cannot eat until they have\nboth chopsticks right in hand",
    "start": "1619530",
    "end": "1627910"
  },
  {
    "text": "because you can't eat\nwith one chopstick. So you have to wait until\nyou get both chopsticks. When you are done, you put\nthe chopsticks down.",
    "start": "1627910",
    "end": "1635529"
  },
  {
    "text": " Then after you're done, you go\nback to thinking again for a",
    "start": "1635530",
    "end": "1641240"
  },
  {
    "text": "while and come back to eating. That's the classic problem. So how to write that,\nrecord that?",
    "start": "1641240",
    "end": "1646890"
  },
  {
    "text": "You can have philosopher\nextend thread, and [UNINTELLIGIBLE PHRASE] philosopher you have a chopstick\nin here, and instead",
    "start": "1646890",
    "end": "1657490"
  },
  {
    "text": "of philosopher buy left\nand right chopstick. Then what you do is you create\na number of philosophers and",
    "start": "1657490",
    "end": "1663880"
  },
  {
    "text": "you get a new chopstick and\nstart to the left and you go to the other philosophers\nassigning left and right",
    "start": "1663880",
    "end": "1668960"
  },
  {
    "text": "chopsticks in here, and\nthen you start the philosophers going. So you just set up a chopstick\n[? on it, ?]",
    "start": "1668960",
    "end": "1675230"
  },
  {
    "text": "and then you share the chopstick\nand do that.",
    "start": "1675230",
    "end": "1681200"
  },
  {
    "text": "So here is what a\n[UNINTELLIGIBLE] philosopher does. So I am here, I'm taking my left\nchopstick, I'm taking my",
    "start": "1681200",
    "end": "1687900"
  },
  {
    "text": "right chopstick and I'm going to\neat and I'm done eating and I'm putting down there.",
    "start": "1687900",
    "end": "1693260"
  },
  {
    "text": "What will happen in this one? AUDIENCE: [INAUDIBLE PHRASE].",
    "start": "1693260",
    "end": "1698555"
  },
  {
    "text": " PROFESSOR: In what situation,\n[UNINTELLIGIBLE PHRASE].",
    "start": "1698555",
    "end": "1704429"
  },
  {
    "text": " [UNINTELLIGIBLE PHRASE],\nbut right",
    "start": "1704430",
    "end": "1710280"
  },
  {
    "text": "technical though is different. AUDIENCE: [INAUDIBLE PHRASE].",
    "start": "1710280",
    "end": "1715879"
  },
  {
    "text": "PROFESSOR: You end up in\na deadlock because [UNINTELLIGIBLE PHRASE] we will pick up the left\nchopstick suddenly, and they",
    "start": "1715880",
    "end": "1721025"
  },
  {
    "text": "all try to take the\nright chopstick. There's no right chopstick and\nnobody has right chopstick and everybody waiting for somebody\nto drop the chopstick, that's",
    "start": "1721025",
    "end": "1726300"
  },
  {
    "text": "not going to happen. So you have a problem. Second way to solve that is\nthis, and you say OK.",
    "start": "1726300",
    "end": "1733639"
  },
  {
    "text": "The problem is everybody\ntrying to pick up this chopstick. I will put unique variable\ntable, unique object table.",
    "start": "1733640",
    "end": "1741670"
  },
  {
    "text": "If anybody want to eat, I\nneed to own the table. What will this do? AUDIENCE: [INAUDIBLE PHRASE].",
    "start": "1741670",
    "end": "1750299"
  },
  {
    "text": "AUDIENCE: It prevents two people\nwho wouldn't normally interact from eating\nat the same table.",
    "start": "1750300",
    "end": "1756970"
  },
  {
    "text": "PROFESSOR: Yes. So what happens is only one\nperson can eat at a time. Which works perfectly,\nbeautifully, sequential.",
    "start": "1756970",
    "end": "1763429"
  },
  {
    "text": "So, you wonder if one\nphilosopher eating, the person or [? posit ?] can eat.",
    "start": "1763430",
    "end": "1770290"
  },
  {
    "text": "But you're not allowed\nto because the chopstick in there. So one way of doing that is\nsequentialized large regions,",
    "start": "1770290",
    "end": "1776200"
  },
  {
    "text": "with putting these critical\nsections in there. This works. Not greatly, but it will work.",
    "start": "1776200",
    "end": "1782420"
  },
  {
    "text": "Another thing is, of course,\nwhat I point out to have some kind of ordering. So you put some position\nordering and saying if you are",
    "start": "1782420",
    "end": "1791120"
  },
  {
    "text": "sitting in even position, you're\nthe first to pick the left one, if you are putting\nan odd position, you're",
    "start": "1791120",
    "end": "1797490"
  },
  {
    "text": "supposed to pick\nthe right one. So in some sense, it got\n[UNINTELLIGIBLE PHRASE] go here, the person go here,\nso only one can get that so",
    "start": "1797490",
    "end": "1804460"
  },
  {
    "text": "you don't have ordering. At least between those two\nyou can maintain that. So you can do something but you\nhave to figure out what",
    "start": "1804460",
    "end": "1809895"
  },
  {
    "text": "the right ordering in here. This is not a linear\nlist, linear ordering for this circuit. But you can copy ordering and\nsay OK, look, if you do that",
    "start": "1809895",
    "end": "1817160"
  },
  {
    "text": "this new way, you can run into\na deadlock situation.",
    "start": "1817160",
    "end": "1823380"
  },
  {
    "text": "There are a lot of types of\nsynchronizations in Java, and then tomorrow you learn\nmore different type of",
    "start": "1823380",
    "end": "1828410"
  },
  {
    "text": "synchronization with available\nusing [UNINTELLIGIBLE PHRASE],",
    "start": "1828410",
    "end": "1834520"
  },
  {
    "text": "so using MPI.  But there are a lot of potential\nproblems you are",
    "start": "1834520",
    "end": "1839620"
  },
  {
    "text": "worried about. Deadlock you have\nto worry about. Two or more threads stop, wait\nfor each other forever.",
    "start": "1839620",
    "end": "1845480"
  },
  {
    "text": "Livelock. What livelock means is two or\nmore threads basically trying",
    "start": "1845480",
    "end": "1852230"
  },
  {
    "text": "to do something but never\nmade progress. So good example. So assume I go -- it's like\nsometimes you try to cross",
    "start": "1852230",
    "end": "1860960"
  },
  {
    "text": "each other on the road and you\ngo into them and say oops, or you both say oops, sorry,\n[UNINTELLIGIBLE]",
    "start": "1860960",
    "end": "1866490"
  },
  {
    "text": "You get into a situation that\nyou try to go something, both you start to move a little bit\nand then do that and you keep",
    "start": "1866490",
    "end": "1871620"
  },
  {
    "text": "doing that forever and ever,\ndoing it, right. So that can happen. If you program right, you can\nactually try to avoid deadlock",
    "start": "1871620",
    "end": "1878360"
  },
  {
    "text": "by doing that, but both no one\nmaking forward progress, so that's called livelock. ",
    "start": "1878360",
    "end": "1885630"
  },
  {
    "text": "So another thing that's\ncalled starvation. So the ordering is a\nvery good example.",
    "start": "1885630",
    "end": "1891549"
  },
  {
    "text": "So ordering says the higher\norder guy always gets the lock for the lower guy.",
    "start": "1891550",
    "end": "1898080"
  },
  {
    "text": "So assume you have thousands\nof things and everybody's trying to do something. If you have an lower number,\nyou probably never get to",
    "start": "1898080",
    "end": "1906790"
  },
  {
    "text": "around to get picked up because\nalways if higher order person has, that person\nwill get the lock. So if they're ordering\nconstraint in there, you can",
    "start": "1906790",
    "end": "1913890"
  },
  {
    "text": "be in situation that some people\nalways get and others never get -- there's no fairness\nin that, because when",
    "start": "1913890",
    "end": "1920350"
  },
  {
    "text": "you some ordering constraints. So again, lack of fairness.",
    "start": "1920350",
    "end": "1925480"
  },
  {
    "text": " Of course, race conditions.",
    "start": "1925480",
    "end": "1931059"
  },
  {
    "text": "So you didn't realize that the\nsame object is accessed by",
    "start": "1931060",
    "end": "1937000"
  },
  {
    "text": "multiple people without being\nin a particular section. That's the key --",
    "start": "1937000",
    "end": "1942190"
  },
  {
    "text": "I mean don't try to do fancy\nthings by letting multiple people have access\nto same thing.",
    "start": "1942190",
    "end": "1947679"
  },
  {
    "text": "This is not much of issue on\ndistributed memory machines because there's only you\naccess to your memory.",
    "start": "1947680",
    "end": "1954580"
  },
  {
    "text": "But the problem there is if you\nkeep values, you suddenly start giving it to everybody and\nsay go play, assuming that",
    "start": "1954580",
    "end": "1960810"
  },
  {
    "text": "only one person have\naccess to it. So multiple people might be\nmodifying it and then what are",
    "start": "1960810",
    "end": "1966530"
  },
  {
    "text": "you going to do. So that issue is there. So when you are doing, using\ndata, you got to be very careful who holds it\nand at what time.",
    "start": "1966530",
    "end": "1973100"
  },
  {
    "text": " So, concurrency and parallelism\nare important",
    "start": "1973100",
    "end": "1979740"
  },
  {
    "text": "concepts in comparison beyond\nwhat we are doing in here.",
    "start": "1979740",
    "end": "1985309"
  },
  {
    "text": "Concurrency can simplify\nprogramming beyond anything. ",
    "start": "1985310",
    "end": "1991559"
  },
  {
    "text": "It's very hard to understand and\ndebug concurrent programs. That's the entire reason that we\nare still doing sequential",
    "start": "1991560",
    "end": "1997950"
  },
  {
    "text": "programming and this is entire\nreason that multiple people are looking at it in a very --\npeople are scared because",
    "start": "1997950",
    "end": "2004380"
  },
  {
    "text": "writing and getting concurrent\nprogram right is probably an order of magnitude harder than\ntrying to get sequential programs right.",
    "start": "2004380",
    "end": "2009660"
  },
  {
    "text": "This is issue. Parallelism is critical\nfor high performance.",
    "start": "2009660",
    "end": "2015630"
  },
  {
    "text": "I mean, it was huge for\nsupercomputers in national labs and now it's becoming\neverybody's issue because of multicore.",
    "start": "2015630",
    "end": "2021300"
  },
  {
    "text": " Basically, you need to\nunderstand concurrent and",
    "start": "2021300",
    "end": "2026610"
  },
  {
    "text": "concurrence issues, it's the\nbasis of writing parallel programs. So, you will run\ninto all these issues,",
    "start": "2026610",
    "end": "2032670"
  },
  {
    "text": "deadlock, you can deadlock on\nlimited access on Cell, you can deadlock on messages.",
    "start": "2032670",
    "end": "2038720"
  },
  {
    "text": "So everybody is waiting for\nsomebody else to send you a message and nobody's sending a\nmessage because that other guy",
    "start": "2038720",
    "end": "2044670"
  },
  {
    "text": "will send you a message. You can [? easier ?] do that in a message in there,\nand a lot of times you can deadlock in that.",
    "start": "2044670",
    "end": "2051270"
  },
  {
    "text": "So this lecture we kind of did\nconcurrent programming, how to write a concurrent program. We are going to switch gears\nand start going into",
    "start": "2051270",
    "end": "2057639"
  },
  {
    "text": "parallelism next. But keep these issues in my\nmind when you are writing parallel programs. Have things\nlike 617 we had very good",
    "start": "2057640",
    "end": "2067620"
  },
  {
    "text": "discipline on testing and\nmethodology of development. You probably won't have kind\nof discipline on how to do",
    "start": "2067620",
    "end": "2075179"
  },
  {
    "text": "parallelism. So there are many ways -- next few lectures we'll cover\nmany different ways of doing",
    "start": "2075180",
    "end": "2080810"
  },
  {
    "text": "parallelism. Parallelism's a very powerful\ntool, but if you don't use it",
    "start": "2080810",
    "end": "2086210"
  },
  {
    "text": "in a disciplined way, you will\nnot be able to debug these [UNINTELLIGIBLE] I mean you run into bugs that\nare so subtle, so difficult",
    "start": "2086210",
    "end": "2094300"
  },
  {
    "text": "it's very hard to find. You don't want in\nthat situation. So having a good design, good\ndisciplining programming will",
    "start": "2094300",
    "end": "2101820"
  },
  {
    "text": "actually get you working\ncorrect program. Good.",
    "start": "2101820",
    "end": "2106960"
  },
  {
    "text": "That's all I have for today. You can spend some time\nfilling out this one.",
    "start": "2106960",
    "end": "2112519"
  },
  {
    "text": "Just put your name down\nand you're done. ",
    "start": "2112520",
    "end": "2117450"
  }
]