[
  {
    "text": " The following\ncontent is provided under a Creative\nCommons license. Your support will help MIT\nOpenCourseWare continue",
    "start": "0",
    "end": "6860"
  },
  {
    "text": "to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6860",
    "end": "13330"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13330",
    "end": "21880"
  },
  {
    "text": "PROFESSOR: Today we're going\nto solve three problems, a problem called\nParenthesization,",
    "start": "21880",
    "end": "27896"
  },
  {
    "text": "a problem called Edit Distance,\nwhich is used in practice a lot, for things like\ncomparing two strings of DNA,",
    "start": "27896",
    "end": "34790"
  },
  {
    "text": "and a problem called\nKnapsack, just about how to pack your bags. And we're going to get a\ncouple of general ideas,",
    "start": "34790",
    "end": "43300"
  },
  {
    "text": "one is about how to deal with\nstring problems in general with dynamic programming. The first two and\nour previous lecture",
    "start": "43300",
    "end": "49630"
  },
  {
    "text": "are all about strings,\ncertain sense or sequences, and we're going to introduce\na new concept, kind",
    "start": "49630",
    "end": "55559"
  },
  {
    "text": "of like polynomial time, but\nonly kind of, sort of-- pseudo polynomial time. Remember, dynamic programming\nin five easy steps.",
    "start": "55560",
    "end": "63199"
  },
  {
    "text": "You define what your sub\nproblems are and count how many there are, to\nsolve a sub problem,",
    "start": "63200",
    "end": "70150"
  },
  {
    "text": "you guess some part of the\nsolution, where there's not too many different possibilities\nfor that guess.",
    "start": "70150",
    "end": "75790"
  },
  {
    "text": "You count them,\nbetter be polynomial. Then you, using that guess--\nthis is sort of optional,",
    "start": "75790",
    "end": "83180"
  },
  {
    "text": "but I think it's a useful\nway to think about things. You write a recurrence relating\nthe solution to the subproblem",
    "start": "83180",
    "end": "88530"
  },
  {
    "text": "you want to solve, in terms of\nsmaller subproblem, something that you already\nknow how to solve,",
    "start": "88530",
    "end": "93860"
  },
  {
    "text": "but it's got to be\nwithin this list. And when you do\nthat, you're going to get a min or a max\nof a bunch of options,",
    "start": "93860",
    "end": "99640"
  },
  {
    "text": "those correspond\nto your guesses. And you get some\nrunning time, in order to compute that recurrence,\nignoring the recursion, that's",
    "start": "99640",
    "end": "106810"
  },
  {
    "text": "time for subproblem. Then, to make a dynamic\nprogram, you either just make that a recursive algorithm\nand memoize everything,",
    "start": "106810",
    "end": "114930"
  },
  {
    "text": "or you write the bottom\nup version of the DP. They do exactly the same\ncomputations, more or less,",
    "start": "114930",
    "end": "122369"
  },
  {
    "text": "and you need to check that\nthis recurrence is acyclic, that you never end up\ndepending on yourself,",
    "start": "122370",
    "end": "129070"
  },
  {
    "text": "otherwise these will\nbe infinite algorithms or incorrect algorithms. Either way is bad. From the bottom up, you\nreally like to explicitly know",
    "start": "129070",
    "end": "136150"
  },
  {
    "text": "a topological order\non the subproblems, and that's usually\npretty easy, but you've",
    "start": "136150",
    "end": "141159"
  },
  {
    "text": "got make sure that it's acyclic. And then, to compute the\nrunning time of the algorithm,",
    "start": "141160",
    "end": "146620"
  },
  {
    "text": "you just take the number\nof subproblems from part 1 and you multiply it\nby the time it takes per subproblem, ignoring\nrecursion, in part 3.",
    "start": "146620",
    "end": "154356"
  },
  {
    "text": "That gives you\nyour running time. I've written this formula\nby now three times are more, remember it.",
    "start": "154356",
    "end": "159980"
  },
  {
    "text": "We use it all the time. And then you need to double\ncheck that you can actually solve the original\nproblem you cared about,",
    "start": "159980",
    "end": "165090"
  },
  {
    "text": "either it was one\nof your subproblems or a combination of them. So that's what we're going\nto do three times today.",
    "start": "165090",
    "end": "172560"
  },
  {
    "text": "One of the hardest parts\nin dynamic programming is step 1, defining\nyour subproblems. Usually if you do that right,\nit becomes-- with some practice,",
    "start": "172560",
    "end": "181330"
  },
  {
    "text": "step 2 is pretty easy. Step 1 is really where most\nof the insight comes in,",
    "start": "181330",
    "end": "186500"
  },
  {
    "text": "and step 3 is usually trivial,\nonce you know 1 and 2. Once you realize 1 and 2 will\nwork, the recurrence is clear.",
    "start": "186500",
    "end": "193420"
  },
  {
    "text": "So I want to give you some\ngeneral tips for step 1,",
    "start": "193420",
    "end": "199430"
  },
  {
    "text": "how to choose\nsubproblems, and we're",
    "start": "199430",
    "end": "210780"
  },
  {
    "text": "going to start with problems\nthat involve strings or sequences as input,\nwhere the problem, the input",
    "start": "210780",
    "end": "219410"
  },
  {
    "text": "to the problem is\nstring or sequence. Last class we saw\ntext justification,",
    "start": "219410",
    "end": "224500"
  },
  {
    "text": "where the input was\na sequence of words, and we saw Blackjack, where the\ninput was a sequence of cards.",
    "start": "224500",
    "end": "231010"
  },
  {
    "text": "Both of these are examples,\nand if you look at them, in both cases we\nused suffixes, what",
    "start": "231010",
    "end": "240788"
  },
  {
    "text": "do I call it, x,\nas our subproblems. If x was our sequence,\nwe did all the suffixes,",
    "start": "240788",
    "end": "250020"
  },
  {
    "text": "I equals zero up to the\nlength of the thing. ",
    "start": "250020",
    "end": "255150"
  },
  {
    "text": "So they're about n, n\nplus 1, such subproblems. This is good. Not very many of them,\nand usually if you're",
    "start": "255150",
    "end": "261299"
  },
  {
    "text": "plucking things off the\nbeginning of the string or of the sequence, then\nyou'll be left with the suffix.",
    "start": "261300",
    "end": "266424"
  },
  {
    "text": "If you always are plucking\nfrom the beginning, you always have suffixes,\nyou'll stay in this class, and that's good,\nbecause you always",
    "start": "266424",
    "end": "271964"
  },
  {
    "text": "want a recurrence\nthat relates, in terms of the same subproblems\nthat you know.",
    "start": "271964",
    "end": "277630"
  },
  {
    "text": "Sometimes it doesn't work. Sometimes prefixes\nare more convenient. These are usually\npretty much identical,",
    "start": "277630",
    "end": "283410"
  },
  {
    "text": "but if you're plucking\noff from the end instead of the beginning, you'll end\nup with prefixes, not suffixes.",
    "start": "283410",
    "end": "290479"
  },
  {
    "text": "Both of these have\nlinear size, so they're good news, quite efficient.",
    "start": "290480",
    "end": "296100"
  },
  {
    "text": "Another possibility\nwhen that doesn't work, we're going to see an\nexample of that today,",
    "start": "296100",
    "end": "302410"
  },
  {
    "text": "is you do all substrings.  So I don't mean\nsubsequences, they",
    "start": "302410",
    "end": "308520"
  },
  {
    "text": "have to be consecutive\nsubstrains, i through j. And now for all i and j.",
    "start": "308520",
    "end": "313630"
  },
  {
    "start": "313630",
    "end": "319214"
  },
  {
    "text": "How many of these are there?  For a string of length n?",
    "start": "319214",
    "end": "327130"
  },
  {
    "text": "N squared. So this one is n squared,\nthe others are linear.",
    "start": "327130",
    "end": "334270"
  },
  {
    "text": "Out of room here. Theta n. ",
    "start": "334270",
    "end": "340804"
  },
  {
    "text": "So you obviously you prefer\nto use these subproblems because there's fewer of\nthem, but if sometimes they don't work, then use this\none, still polynomial, still",
    "start": "340804",
    "end": "347729"
  },
  {
    "text": "pretty good. This will get you\nthrough most DP's.",
    "start": "347730",
    "end": "353340"
  },
  {
    "text": "It's pretty simple,\nbut very useful. Let me define the next\nproblem we consider.",
    "start": "353340",
    "end": "359445"
  },
  {
    "start": "359445",
    "end": "364604"
  },
  {
    "text": "For each of them we're going\nto go through the five steps. ",
    "start": "364604",
    "end": "369699"
  },
  {
    "text": "So the first problem for\ntoday is parenthesization. You're given an\nassociative expression,",
    "start": "369700",
    "end": "378540"
  },
  {
    "text": "and you want to evaluate\nit in some order. ",
    "start": "378540",
    "end": "393069"
  },
  {
    "text": "So I'm going to-- for\nassociative expression, I'm going to think of\nmatrix multiplication,",
    "start": "393070",
    "end": "399169"
  },
  {
    "text": "and I probably want\nto start at zero. ",
    "start": "399170",
    "end": "408060"
  },
  {
    "text": "So let's say you\nhave n matrices, you want to compute\ntheir product. So you remember matrix\nmultiplication is not",
    "start": "408060",
    "end": "413480"
  },
  {
    "text": "commutative, I can't\nreorder these things. All I can do is,\nif I want to do it by sequence of pairwise\nmultiplications,",
    "start": "413480",
    "end": "420840"
  },
  {
    "text": "is I get to choose where\nthe parentheses are, and do whatever I want for\nthe parentheses,",
    "start": "420840",
    "end": "426800"
  },
  {
    "text": "because it's associative. It doesn't matter where they go. Now it turns out if you\nuse straightforward matrix",
    "start": "426800",
    "end": "432780"
  },
  {
    "text": "multiplication, really\nany algorithm for matrix multiplication, it matters\nhow you parenthesize.",
    "start": "432780",
    "end": "439680"
  },
  {
    "text": "Some will be\ncheaper than others, and we can use\ndynamic programming to find out which is best.",
    "start": "439680",
    "end": "444930"
  },
  {
    "text": "So let me draw a simple example. Suppose I have a column\nvector times a row",
    "start": "444930",
    "end": "453470"
  },
  {
    "text": "vector times a column vector. And there are two ways\nto compute this product.",
    "start": "453470",
    "end": "460630"
  },
  {
    "text": "One is like this, and\nthe other is like this.",
    "start": "460630",
    "end": "470865"
  },
  {
    "text": " If I compute the\nproduct this way, it's every row\ntimes every column,",
    "start": "470865",
    "end": "477030"
  },
  {
    "text": "and then every row\ntimes every column, and every row\ntimes every column. This subresult is a square\nmatrix, so if these are-- say",
    "start": "477030",
    "end": "486320"
  },
  {
    "text": "everything here is n, and\nthis will be an n by n matrix. Then we multiply it by a\nvector and this computation",
    "start": "486320",
    "end": "495599"
  },
  {
    "text": "has to take, if\nyou do it well, it will take theta n\nsquared time, because I",
    "start": "495600",
    "end": "501860"
  },
  {
    "text": "need to compute n\nsquared values here, and then it's n squared to\ndo this final multiplication.",
    "start": "501860",
    "end": "507916"
  },
  {
    "text": " Versus if I do it this way,\nI take all the rows here,",
    "start": "507916",
    "end": "515140"
  },
  {
    "text": "multiply them on all the columns\nhere, it's a single number, and then I multiply\nby this column.",
    "start": "515140",
    "end": "521479"
  },
  {
    "text": "This will take linear time. So this is better\nparenthesization than this one.",
    "start": "521480",
    "end": "529220"
  },
  {
    "text": "Now, I don't even\nneed to define in general for an x by y matrix,\ntimes a y by z matrix,",
    "start": "529220",
    "end": "539339"
  },
  {
    "text": "you can think about the running\ntime of that multiplication. Whatever the running time\nis, dynamic programming",
    "start": "539340",
    "end": "545670"
  },
  {
    "text": "can solve this problem,\nas long as it only depends on the dimensions\nof the matrices that you're multiplying.",
    "start": "545670",
    "end": "552920"
  },
  {
    "text": "So for this problem,\nthere's going to be the issue of which\nsubproblems we use.",
    "start": "552920",
    "end": "559070"
  },
  {
    "text": "Now we have a\nsequence of matrices here, so we naturally think\nof these as subproblems,",
    "start": "559070",
    "end": "565530"
  },
  {
    "text": "but before we get to the\nsubproblems, let me ask you, what you think you should guess? ",
    "start": "565530",
    "end": "572310"
  },
  {
    "text": "Let's just say from the\noutset, if I give you this entire sequence,\nwhat feature",
    "start": "572310",
    "end": "578110"
  },
  {
    "text": "of the solution of\nthe optimal solution would you like to guess? Can't know the whole solution,\nbecause there's exponentially",
    "start": "578110",
    "end": "583399"
  },
  {
    "text": "many ways to parenthesize. What's one piece\nof it that you'd like to guess that\nwill make progress?",
    "start": "583399",
    "end": "590529"
  },
  {
    "text": "Any idea?  It's not so easy. ",
    "start": "590530",
    "end": "601892"
  },
  {
    "text": "AUDIENCE: Well, wouldn't\nyou need the last operation? PROFESSOR: What's\nthe last operation we're going to do, exactly. ",
    "start": "601892",
    "end": "610420"
  },
  {
    "text": "You might call it the\noutermost multiplication or the last multiplication. ",
    "start": "610420",
    "end": "622610"
  },
  {
    "text": "So that's going to look like we\nsomehow multiply a 0 through ak",
    "start": "622610",
    "end": "627959"
  },
  {
    "text": "minus 1, and then we somehow\nmultiply aK through an minus 1,",
    "start": "627960",
    "end": "636190"
  },
  {
    "text": "and this is the last one. So now we have two subproblems.",
    "start": "636190",
    "end": "641320"
  },
  {
    "text": "Somehow we want to multiply\nthis, somehow-- I mean, there's got to be some\nlast thing you do. I don't know what it\nis, so just guess it.",
    "start": "641320",
    "end": "647899"
  },
  {
    "text": "Try all possibilities for k,\nit's got to be one of them, take the best. If somehow we know the optimal\nway to do a0 to k minus 1",
    "start": "647900",
    "end": "656190"
  },
  {
    "text": "and the optimal way to ak to\nan minus 1, then we're golden. Now, this looks like a prefix,\nthis looks like a suffix.",
    "start": "656190",
    "end": "666290"
  },
  {
    "text": "So do you think we can just\ncombine subproblems, suffixes and prefixes?",
    "start": "666290",
    "end": "672970"
  },
  {
    "text": "How many people think yes? A few? How many people\nthink no, OK, why?",
    "start": "672970",
    "end": "680405"
  },
  {
    "text": "AUDIENCE: So, for example if\nyou split, if you were to split, like [INAUDIBLE]?",
    "start": "680405",
    "end": "686800"
  },
  {
    "text": "PROFESSOR: Yeah. The very next thing\nwe're going to do is recurse on this subproblem,\nrecurse on this subproblem.",
    "start": "686800",
    "end": "692480"
  },
  {
    "text": "When we recurse\nhere, we're going to split it into a0 to ak prime\nminus 1, and ak prime minus 1,",
    "start": "692480",
    "end": "702160"
  },
  {
    "text": "or ak prime to ak minus 1. ",
    "start": "702160",
    "end": "710529"
  },
  {
    "text": "We're going to consider\nall possible partitions, and this thing, from\nak prime to ak minus 1,",
    "start": "710530",
    "end": "717320"
  },
  {
    "text": "is not a prefix or a suffix. What is it? A substring. There's only one thing left.",
    "start": "717320",
    "end": "723829"
  },
  {
    "text": "I claim these are usually\nenough, and in this case substrings will be enough. But this is how\nyou can figure out",
    "start": "723830",
    "end": "730100"
  },
  {
    "text": "that, ah, I'm not staying\nwithin the family prefixes, I'm not staying within\nthe family suffixes.",
    "start": "730100",
    "end": "735450"
  },
  {
    "text": "In general, you never use\nboth of these together. If you're going to need both,\nyou probably need substrings.",
    "start": "735450",
    "end": "741550"
  },
  {
    "text": "So if just suffixes work, fine. If just prefixes work,\nfine, but otherwise you're probably going\nto need substrings.",
    "start": "741550",
    "end": "747880"
  },
  {
    "text": "That's just a rule\nof thumb, of course. Cool. So, part 1 subproblem is going\nto be the optimal evaluation",
    "start": "747880",
    "end": "766579"
  },
  {
    "text": "parenthesization of\nai to aj minus 1.",
    "start": "766580",
    "end": "778070"
  },
  {
    "text": "So that's part of\nthe problem here. We want to do a0 to n minus 1.",
    "start": "778070",
    "end": "784022"
  },
  {
    "text": "So in general, let's just\ntake some substring in here and say, well what's the\nbest way to multiply that, and that's the\nsorts of subproblems",
    "start": "784022",
    "end": "789848"
  },
  {
    "text": "we're getting if\nwe use this guess. And if you start with a\nsubstring and you do this,",
    "start": "789848",
    "end": "795120"
  },
  {
    "text": "you will still remain\nwithin a substring, so actually I have to\nrevise this slightly.",
    "start": "795120",
    "end": "800560"
  },
  {
    "text": "Now we're going from ai-- to\nsolve this subproblem, which is what we need to do\nin the guessing step,",
    "start": "800560",
    "end": "807339"
  },
  {
    "text": "we start from ai, we go to\nsome guest place, ak minus 1, then from ak up to aj minus 1.",
    "start": "807340",
    "end": "817380"
  },
  {
    "text": "This is the i\ncolon j subproblem.",
    "start": "817380",
    "end": "823490"
  },
  {
    "text": "So we guess some point in the\nmiddle, some choice for k. The number of choices\nfor k is-- number",
    "start": "823490",
    "end": "836020"
  },
  {
    "text": "of possible choices\nfor this guess, so we have to try all of them,\nis like order j minus i plus 1.",
    "start": "836020",
    "end": "845490"
  },
  {
    "text": "I put order in case I'm\noff by 1 or something. But in particular\nthis is [INAUDIBLE].",
    "start": "845490",
    "end": "851436"
  },
  {
    "text": "And that's all we'll need.  So that's the guess.",
    "start": "851437",
    "end": "856680"
  },
  {
    "text": "Now we go to step 3,\nwhich is the recurrence. ",
    "start": "856680",
    "end": "866820"
  },
  {
    "text": "And this-- we're going to\ndo this over and over again. Hopefully by the end,\nit's really obvious how to do this recurrence.",
    "start": "866820",
    "end": "873230"
  },
  {
    "text": "Let me just fix my notation,\nwe're going to use dp, I believe. For whatever reason, in my\nnotes I often write dp of ij.",
    "start": "873230",
    "end": "885290"
  },
  {
    "text": "This is supposed\nto be the solution to the subproblem i colon j. I want to write it recursively,\nin terms of smaller",
    "start": "885290",
    "end": "891460"
  },
  {
    "text": "subproblems, and I want\nto minimize the cost, so I'm going to\nwrite a min overall.",
    "start": "891460",
    "end": "897880"
  },
  {
    "text": "And for each choice of k, so\nthere's going to be a for loop, I'm going to use Python\nnotation here with iterators.",
    "start": "897880",
    "end": "905680"
  },
  {
    "text": "So k is going to\nbe in the range,",
    "start": "905680",
    "end": "912940"
  },
  {
    "text": "I think range ij is correct. I'm going to double check\nthere's no off by 1's here.",
    "start": "912940",
    "end": "919790"
  },
  {
    "text": "Says i plus 1j. I think that's probably right. ",
    "start": "919790",
    "end": "931110"
  },
  {
    "text": "Once I choose where\nk is, where I'm going to split my\nmultiplication,",
    "start": "931110",
    "end": "937290"
  },
  {
    "text": "I do the cost for\ni up to k, that's",
    "start": "937290",
    "end": "943670"
  },
  {
    "text": "the left multiplication,\nplus the cost for k up to j,",
    "start": "943670",
    "end": "951639"
  },
  {
    "text": "plus-- so those are the two\nrecursive multiplications. So then I also have to\ndo this outermost one.",
    "start": "951640",
    "end": "958690"
  },
  {
    "text": "So how much does that cost? Well, it's something,\nso cost of the product",
    "start": "958690",
    "end": "968829"
  },
  {
    "text": "ai colon k times the\nproduct ak colon j.",
    "start": "968830",
    "end": "980630"
  },
  {
    "text": "So I'm assuming I can\ncompute this cost, not even going to try to\nwrite down a general formula, you could do it, it's\nnot hard, it's like xyz.",
    "start": "980630",
    "end": "987146"
  },
  {
    "text": " For a standard matrix\nmultiplication algorithm. But whatever algorithm\nyou're using,",
    "start": "987146",
    "end": "993010"
  },
  {
    "text": "assuming you could figure out\nthe dimensions of this matrix, it doesn't matter\nhow it's computed, the dimensions will\nalways be the same.",
    "start": "993010",
    "end": "998525"
  },
  {
    "text": "You compute the dimensions\nof this matrix that will result from\nthat product, it's always going to be\nthe first dimension",
    "start": "998525",
    "end": "1004820"
  },
  {
    "text": "here, with the last\ndimension there. And it's constant\ntime, you know that. And then if you can figure out\nthe cost of a multiplication",
    "start": "1004820",
    "end": "1012625"
  },
  {
    "text": "in constant time, just\nknowing the dimensions of these matrices, then\nyou could plug this in to this dynamic\nprogram, and you",
    "start": "1012625",
    "end": "1018490"
  },
  {
    "text": "will get the optimal solution. This is magically considering\nall possible parenthesizations",
    "start": "1018490",
    "end": "1024876"
  },
  {
    "text": "of these matrices, but magically\nit does it in polynomial time.",
    "start": "1024876",
    "end": "1029900"
  },
  {
    "text": "Because the time for\nsubproblem here-- ",
    "start": "1029900",
    "end": "1037589"
  },
  {
    "text": "We're spending constant\ntime for each iteration of this for loop,\nbecause this is a constant time just\ncomputing the cost.",
    "start": "1037589",
    "end": "1044520"
  },
  {
    "text": "These are free\nrecursive calls, so it's dominated by the length of\nthe for loop, which we already said was order n, so it's\norder n time for subproblem,",
    "start": "1044520",
    "end": "1053480"
  },
  {
    "text": "ignoring recursions. And so when we\nput this together, the total time is\ngoing to be the number",
    "start": "1053480",
    "end": "1059590"
  },
  {
    "text": "of some problems,\nwhich I did not write. The number of problems\nin step 1 is n squared,",
    "start": "1059590",
    "end": "1071320"
  },
  {
    "text": "that's what we said over\nhere, for substrings.",
    "start": "1071320",
    "end": "1076529"
  },
  {
    "text": "So running time is number\nof subproblems, which is n squared, times linear for each,\nand so it's order n cubed,",
    "start": "1076530",
    "end": "1083340"
  },
  {
    "text": "it's actually theta n cubed.  So polynomial time,\nmuch better than trying",
    "start": "1083340",
    "end": "1090230"
  },
  {
    "text": "all possible parenthesizations,\nthey're about 4 to the n parenthesizations,\nthat's a lot.",
    "start": "1090230",
    "end": "1095520"
  },
  {
    "text": " Topological order here is\na little more interesting,",
    "start": "1095520",
    "end": "1101309"
  },
  {
    "text": "if you think about that. ",
    "start": "1101310",
    "end": "1111770"
  },
  {
    "text": "I can tell you, for\nsuffixes, topological order is almost always right to left. And for prefixes,\nit's almost always",
    "start": "1111770",
    "end": "1118410"
  },
  {
    "text": "left to right, for\nincreasing i, decreasing i. For substrings, what\ndo you think it is?",
    "start": "1118410",
    "end": "1125380"
  },
  {
    "text": "Or for this situation\nin particular? In what order should I\nevaluate these subproblems? ",
    "start": "1125380",
    "end": "1142606"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. ",
    "start": "1142606",
    "end": "1150672"
  },
  {
    "text": "PROFESSOR: This is\nthe running time to determine the best way\nto multiply-- that's right.",
    "start": "1150672",
    "end": "1155720"
  },
  {
    "text": "So yeah, it's worth\nchecking, because we also have to do the multiplication. But if you imagine\nthis n, the number",
    "start": "1155720",
    "end": "1162940"
  },
  {
    "text": "of matrices you're\nmultiplying is probably much smaller than their sizes. In that situation,\nthis will be tiny,",
    "start": "1162940",
    "end": "1169179"
  },
  {
    "text": "whereas the time to actually\ndo the multiplication, that's what's being computed by the DP,\nhopefully that's much larger,",
    "start": "1169180",
    "end": "1175780"
  },
  {
    "text": "otherwise you're kind of\nwasting your time doing the DP. But hey, at least you\ncould tell somebody",
    "start": "1175780",
    "end": "1181799"
  },
  {
    "text": "that you did it optimally.  But it gets into a\nfun issue of cost",
    "start": "1181800",
    "end": "1187940"
  },
  {
    "text": "of planning verses execution,\nbut we're not really going to worry about that here.",
    "start": "1187940",
    "end": "1193580"
  },
  {
    "text": "So, in what order should I\nevaluate this recurrence, in order to-- I want, when\nI'm evaluating DP of ij,",
    "start": "1193580",
    "end": "1201370"
  },
  {
    "text": "I've already done DP\nof ik and DP of kj, and this is what you need\nfor bottom up execution. Yeah.",
    "start": "1201370",
    "end": "1207070"
  },
  {
    "text": "AUDIENCE: Small to large. PROFESSOR: Small\nto large, exactly. We want to do increasing\nsubstring size.",
    "start": "1207070",
    "end": "1215836"
  },
  {
    "text": "That's actually\nwhat we're always doing for all of those\nsubproblems over there. ",
    "start": "1215836",
    "end": "1222570"
  },
  {
    "text": "When I say all suffixes,\nyou go right to left. Well, that's because the\nrightmost suffix is nothing,",
    "start": "1222570",
    "end": "1227619"
  },
  {
    "text": "and then you build up a larger\nand larger strings, same thing here. Exercise, try to draw\nthe DAG for this picture.",
    "start": "1227619",
    "end": "1235100"
  },
  {
    "text": "It's a little harder,\nbut if you-- I mean you could basically\nimagine-- I'll do it for you.",
    "start": "1235100",
    "end": "1241929"
  },
  {
    "text": "Here is, let's say--\nwell, at the top there's everything, the\nlongest substring, that",
    "start": "1241930",
    "end": "1250610"
  },
  {
    "text": "would be from zero to\nn, that's everything. Then you're going to\nhave n different ways",
    "start": "1250610",
    "end": "1256390"
  },
  {
    "text": "to have substrings\nof, or actually just two different ways, to have\na slightly smaller substring.",
    "start": "1256390",
    "end": "1262570"
  },
  {
    "text": "At the bottom you have\na bunch of substrings, which are the length zero\nones, and in between,",
    "start": "1262570",
    "end": "1270729"
  },
  {
    "text": "like in the middle\nhere, you're going to have a much larger number. ",
    "start": "1270729",
    "end": "1277779"
  },
  {
    "text": "And all these edges\nare pointed up, so you can compute\nall the length zero ones without any\ndependencies and then just",
    "start": "1277780",
    "end": "1284350"
  },
  {
    "text": "increasing in length. It's a little hard to see,\nbut in each case-- Yeah,",
    "start": "1284350",
    "end": "1292216"
  },
  {
    "text": "ah, interesting. This is a little harder to\nformulate as a regular shortest paths problem, because if you\nlook at one of these nodes,",
    "start": "1292216",
    "end": "1300560"
  },
  {
    "text": "it depends on two\ndifferent values, and you have to take\nthe sum of both of them.",
    "start": "1300560",
    "end": "1307660"
  },
  {
    "text": "And then you also add\nthe cost of that split. Cool. So this is the subproblem\nDAG, you could draw it,",
    "start": "1307660",
    "end": "1319210"
  },
  {
    "text": "but this DP is not\nshortest paths in that DAG. ",
    "start": "1319210",
    "end": "1331410"
  },
  {
    "text": "So perhaps dynamic programming\nis not just shortest paths in a DAG, that's a\nnew realization for me",
    "start": "1331410",
    "end": "1336440"
  },
  {
    "text": "as of right now. OK. Some other things\nI forgot to do-- I didn't specify the base case.",
    "start": "1336440",
    "end": "1342271"
  },
  {
    "text": "The base case for\nthat recurrence is when your string is of\nlength 0 or even of length 1,",
    "start": "1342271",
    "end": "1349130"
  },
  {
    "text": "because when it's length\n1, there's only one matrix, there's no multiplication to\ndo, and so the cost is zero.",
    "start": "1349130",
    "end": "1355870"
  },
  {
    "text": "So you have something like dp\nof i, i plus 1 equals zero.",
    "start": "1355870",
    "end": "1360970"
  },
  {
    "text": "That's the base case. And then step 5,\nstep 5 is what's",
    "start": "1360970",
    "end": "1366730"
  },
  {
    "text": "the overall problem\nI want to solve, and that's just dp from 0 to\nn, that's the whole string.",
    "start": "1366730",
    "end": "1373530"
  },
  {
    "text": "Any questions about that DP? I didn't write down, I didn't\nwrite down a memoized recursive",
    "start": "1373530",
    "end": "1384720"
  },
  {
    "text": "algorithm, you all\nknow how to do that. Just do this for loop\nand put this inside, that would be the\nbottom up one, or just",
    "start": "1384720",
    "end": "1390786"
  },
  {
    "text": "write this with\nmemoization, that would be the\nrecursive algorithm. It's totally easy once\nyou have this recurrence.",
    "start": "1390786",
    "end": "1397245"
  },
  {
    "text": " All right, good. ",
    "start": "1397245",
    "end": "1408220"
  },
  {
    "text": "How many people is this\ncompletely clear to?",
    "start": "1408220",
    "end": "1413419"
  },
  {
    "text": "OK. How many people does\nit kind of make sense? And how many people it\ndoesn't make sense at all?",
    "start": "1413420",
    "end": "1420610"
  },
  {
    "text": "OK, good. Hopefully we're\ngoing to shift more towards the first category. It's a little magical, how\nthis guessing works out,",
    "start": "1420610",
    "end": "1427080"
  },
  {
    "text": "but I think the only way to\nreally get it is to see more examples and write\ncode to do it,",
    "start": "1427080",
    "end": "1433080"
  },
  {
    "text": "that's-- the ladder\nis your problem set, examples is what we'll do here. So next problem\nwe're going to solve.",
    "start": "1433080",
    "end": "1439825"
  },
  {
    "start": "1439825",
    "end": "1446859"
  },
  {
    "text": "Dynamic programming is\none of these things that's really easy once you get it,\nbut it takes a little while",
    "start": "1446859",
    "end": "1455250"
  },
  {
    "text": "to get there. So edit distance, we're going\nto make things a little harder.",
    "start": "1455250",
    "end": "1464870"
  },
  {
    "text": "Now we're going to be given two\nstrings instead of just one. And I want to know the cheapest\nway to convert x into y.",
    "start": "1464870",
    "end": "1474870"
  },
  {
    "start": "1474870",
    "end": "1486410"
  },
  {
    "text": "I'm going to define\nwhat transform means. We're going to allow\ncharacter edits. ",
    "start": "1486410",
    "end": "1501849"
  },
  {
    "text": "We want to transform this\nstring x into string y, so what character\nedits are we allowed?",
    "start": "1501849",
    "end": "1508310"
  },
  {
    "text": "Very simple, we're allowed to\ninsert a character anywhere in the strength, we're allowed\nto delete a character anywhere",
    "start": "1508310",
    "end": "1514950"
  },
  {
    "text": "in the string, and we're allowed\nto replace a character anywhere",
    "start": "1514950",
    "end": "1521510"
  },
  {
    "text": "in the string, replace\nc with c prime. Now, you could do a replacement\nby deleting c and inserting",
    "start": "1521510",
    "end": "1529430"
  },
  {
    "text": "c that's, one way\nto do it, but I'm going to imagine that in\ngeneral someone tells me",
    "start": "1529430",
    "end": "1534880"
  },
  {
    "text": "how much each of these\noperations costs, and that cost may depend on\nthe character you're inserting.",
    "start": "1534880",
    "end": "1540904"
  },
  {
    "text": "So deleting a character and then\ninserting a different character will cost one thing. It will cost the sum of\nthose two cost values.",
    "start": "1540904",
    "end": "1548170"
  },
  {
    "text": "Replacing a character\nwith another character might be cheaper. It depends. Someone gives me a little table,\nsaying for this character,",
    "start": "1548170",
    "end": "1555000"
  },
  {
    "text": "for letter a, it costs this\nmuch to insert, for letter b it costs this much to\ninsert, this much to delete, and there's a little\nmatrix for, if I",
    "start": "1555000",
    "end": "1561340"
  },
  {
    "text": "want to convert an a into a b\nit costs this much to replace. Imagine, if you\nwill, you're trying",
    "start": "1561340",
    "end": "1566640"
  },
  {
    "text": "to do a spelling correction,\nsomeone's typing on a keyboard, and you have some model\nof, oh, well if I hit a,",
    "start": "1566640",
    "end": "1573853"
  },
  {
    "text": "I might have meant to\nhit an s, because s is right next to an a,\nand that's an easy mistake",
    "start": "1573853",
    "end": "1579120"
  },
  {
    "text": "to make if you're not\ntouch typing, because it's on the same finger, or maybe\nyou're shifted over by one.",
    "start": "1579120",
    "end": "1585582"
  },
  {
    "text": "So you can come up\nwith some cost models, someone could do a lot\nof work and research and whatnot and see\nwhat are typical typos,",
    "start": "1585582",
    "end": "1591450"
  },
  {
    "text": "replacing one\nletter for another, and then associate some\ncost for each character, for each pair characters,\nwhat's the likelihood",
    "start": "1591450",
    "end": "1598185"
  },
  {
    "text": "that that was the mistake? I call that the cost,\nthat's the unlikeliness.",
    "start": "1598185",
    "end": "1604260"
  },
  {
    "text": "And then you want to\nminimize the sum of costs, and so you want to find what\nwas the least set of errors that",
    "start": "1604260",
    "end": "1612650"
  },
  {
    "text": "would end up with this\nword instead of this word. You do that on all\nwords of your dictionary and then you'll\nfind the one that",
    "start": "1612650",
    "end": "1618425"
  },
  {
    "text": "was most likely what\nyou meant to type. And insertions\nand deletions are, I didn't hit the\nkey hard enough,",
    "start": "1618425",
    "end": "1625580"
  },
  {
    "text": "or I hit it twice, or\naccidentally hit a key because it was right next\nto another one, or whatever.",
    "start": "1625580",
    "end": "1631887"
  },
  {
    "text": "OK, so this is used for\nspelling correction. It's used for comparing\nDNA sequences, and DNA sequences, if you\nhave one strand of DNA,",
    "start": "1631887",
    "end": "1639664"
  },
  {
    "text": "there's a lot of mutation--\nsome mutations are more likely than others. For example, c to\na g mutation is",
    "start": "1639664",
    "end": "1645030"
  },
  {
    "text": "more common than c\nto an a mutation, and so you give this\nreplacement a high cost,",
    "start": "1645030",
    "end": "1651650"
  },
  {
    "text": "you give this one a\nlow cost, to represent this is more likely than this. And then at a distance\nwill give your measure",
    "start": "1651650",
    "end": "1657110"
  },
  {
    "text": "of how similar two DNA\nstrings are evolutionarily. And you also get extra\ncharacters randomly inserted",
    "start": "1657110",
    "end": "1664620"
  },
  {
    "text": "and deleted in mutation. So, it's a simplified model\nof what happens in mutation,",
    "start": "1664620",
    "end": "1670900"
  },
  {
    "text": "but still it's used a lot. So all these are encompassed\nby edit distance.",
    "start": "1670900",
    "end": "1676530"
  },
  {
    "text": "Another problem encompassed\nby edit distance is the longest common\nsubsequence problem.",
    "start": "1676530",
    "end": "1683700"
  },
  {
    "start": "1683700",
    "end": "1695279"
  },
  {
    "text": "And I have a fun example,\nwhich I spent some hours,",
    "start": "1695280",
    "end": "1700950"
  },
  {
    "text": "way back when, coming up with. I can't spell it, though. It's such a weird word.",
    "start": "1700950",
    "end": "1707059"
  },
  {
    "text": "Hieroglyphology\nis an English word",
    "start": "1707060",
    "end": "1712640"
  },
  {
    "text": "and Michelangelo is\nanother English word, if you allow proper\nnouns, unlike Scrabble. ",
    "start": "1712640",
    "end": "1721179"
  },
  {
    "text": "So, think of these as strings. This is x, this is y. What is the longest\ncommon subsequence?",
    "start": "1721180",
    "end": "1727950"
  },
  {
    "text": "So not substring,\nI get to choose-- I can drop any set of letters\nfrom x, drop any set of letters",
    "start": "1727950",
    "end": "1733610"
  },
  {
    "text": "from y, and I want them\nto, in the end, be equal.",
    "start": "1733610",
    "end": "1739000"
  },
  {
    "text": "It's a puzzle for you. While you're thinking\nabout it, you can model this as an\nedit distance problem,",
    "start": "1739000",
    "end": "1745250"
  },
  {
    "text": "you just define the cost of\nan insert or a delete to be 1,",
    "start": "1745250",
    "end": "1755820"
  },
  {
    "text": "and the cost of a\nreplace to be 0.",
    "start": "1755820",
    "end": "1764179"
  },
  {
    "text": "So this is a c to c\nprime replacement. It's going to be 0\nif c equals c prime,",
    "start": "1764180",
    "end": "1770210"
  },
  {
    "text": "and I guess infinity otherwise. You just don't consider\nit in that situation.",
    "start": "1770210",
    "end": "1778200"
  },
  {
    "text": "Can anyone find the longest\ncommon subsequence here? It's in English\nword, that's a hint.",
    "start": "1778200",
    "end": "1783324"
  },
  {
    "text": " So if you do this\nyou're, basically trying to minimize number\nof insertions and deletions.",
    "start": "1783324",
    "end": "1790200"
  },
  {
    "text": "Insertions in x correspond\nto deletions in y, and deletions in x\ncorrespond to deletions in x.",
    "start": "1790200",
    "end": "1797440"
  },
  {
    "text": "So this is the minimum number\nof deletions in both strings, so you end up with\na common substring.",
    "start": "1797440",
    "end": "1803960"
  },
  {
    "text": "Because replacement says,\nI don't pay anything if the characters match exactly,\notherwise I pay everything.",
    "start": "1803960",
    "end": "1809710"
  },
  {
    "text": "I'd never want to do this,\nso if there's a mismatch I have to delete it. And so this model\nis the same thing",
    "start": "1809710",
    "end": "1815620"
  },
  {
    "text": "as long as common subsequence. I want to solve this\nmore general problem, it's actually easier to solve\nthe more general problem,",
    "start": "1815620",
    "end": "1820990"
  },
  {
    "text": "but in particular,\nyou can use it to solve this tricky problem. Any answers?",
    "start": "1820990",
    "end": "1826049"
  },
  {
    "text": "Yeah. Hello. Very good. Hello is the longest\ncommon subsequence.",
    "start": "1826050",
    "end": "1831650"
  },
  {
    "text": " You can imagine\nhow I found that.",
    "start": "1831650",
    "end": "1837760"
  },
  {
    "text": "Searching for all\nEnglish words that have \"hello\" as the subsequence. That can also be done\nin polynomial time.",
    "start": "1837760",
    "end": "1844360"
  },
  {
    "start": "1844360",
    "end": "1849390"
  },
  {
    "text": "So how are we going to do this?",
    "start": "1849390",
    "end": "1854860"
  },
  {
    "text": "Well, I'd like to somehow\nuse subproblems for strings, suffixes, prefixes,\nor substrings.",
    "start": "1854860",
    "end": "1860860"
  },
  {
    "text": "But now I have two strings,\nthat's kind of annoying. But don't worry, we can do\nsort of dynamic programming",
    "start": "1860860",
    "end": "1868120"
  },
  {
    "text": "simultaneously over x and y. What we're going to do is look\nat suffixes of x and suffixes",
    "start": "1868120",
    "end": "1874910"
  },
  {
    "text": "of y, and to make\nour subproblems we need to combine all of those\nsubproblems by multiplication.",
    "start": "1874910",
    "end": "1887260"
  },
  {
    "text": "We need to think about both\nof them simultaneously. So subproblem is going to\nbe solve edit distance,",
    "start": "1887260",
    "end": "1897650"
  },
  {
    "text": "edit distance problem on\ntwo different strings,",
    "start": "1897650",
    "end": "1902840"
  },
  {
    "text": "a suffix of x and a possibly\ndifferent suffix of y.",
    "start": "1902840",
    "end": "1909909"
  },
  {
    "text": "Because this is for all\npossible i and j choices. And so the number\nof subproblems is?",
    "start": "1909910",
    "end": "1919495"
  },
  {
    "start": "1919495",
    "end": "1932205"
  },
  {
    "text": "AUDIENCE: N squared. PROFESSOR: N squared, yes. If x is of length n\nand y is of length n, there's n choices for\nthis, n choices for that,",
    "start": "1932205",
    "end": "1938870"
  },
  {
    "text": "and we have to do\nall of them as pairs, if there's n squared pairs. In general, if they\nhave different lengths,",
    "start": "1938870",
    "end": "1943940"
  },
  {
    "text": "it's going to be the length\nof x times length of y. It's quadratic. ",
    "start": "1943940",
    "end": "1949520"
  },
  {
    "text": "Good. So, next we need to\nguess something, step 2. ",
    "start": "1949520",
    "end": "1958810"
  },
  {
    "text": "This is maybe not so\nobvious, let's see. You have here's x,\nstarting at position i.",
    "start": "1958810",
    "end": "1968760"
  },
  {
    "text": "You have y starting\nat position j.",
    "start": "1968760",
    "end": "1974040"
  },
  {
    "text": "Somehow I need to\nconvert x into y, I think it's probably\nbetter if I line these up,",
    "start": "1974040",
    "end": "1979310"
  },
  {
    "text": "even though in some sense\nthey're not lined up, that's OK. I want to convert x into y.",
    "start": "1979310",
    "end": "1986976"
  },
  {
    "text": "What should I look at here? Well, I should look at\nthe very first characters, because we're\nlooking at suffixes. We want to cut off first\ncharacters somehow.",
    "start": "1986976",
    "end": "1993520"
  },
  {
    "text": " How could it-- what are the\npossible ways to convert, or to",
    "start": "1993520",
    "end": "2000670"
  },
  {
    "text": "deal with the first\ncharacter of x? What are the possible\nthings I could do? ",
    "start": "2000670",
    "end": "2006977"
  },
  {
    "text": "Given that, ultimately, I\nwant the first character of x to become the\nfirst character of y. ",
    "start": "2006977",
    "end": "2016822"
  },
  {
    "text": "AUDIENCE: Delete [INAUDIBLE]. PROFESSOR: You could\ndelete this character and then insert this one, yes.",
    "start": "2016822",
    "end": "2023429"
  },
  {
    "text": "Other things? ",
    "start": "2023430",
    "end": "2034184"
  },
  {
    "text": "There's a few possibilities.  If you look at it right,\nthere are three possibilities.",
    "start": "2034184",
    "end": "2041020"
  },
  {
    "text": " And three possibilities are\ninsert, delete, or replace.",
    "start": "2041020",
    "end": "2049020"
  },
  {
    "text": "So let's figure out\nhow that's the case. I could replace this\ncharacter with that character,",
    "start": "2049020",
    "end": "2055299"
  },
  {
    "text": "so that's one choice. That will make progress. Once I do that, I can cross\noff those first characters",
    "start": "2055300",
    "end": "2061369"
  },
  {
    "text": "and deal with the rest\nof the substrings.  Let's think about\ninsert and delete.",
    "start": "2061370",
    "end": "2067408"
  },
  {
    "text": "If I wanted to\ninsert, presumably, I need this character\nat some point. So in order to make\nthis character,",
    "start": "2067409",
    "end": "2073464"
  },
  {
    "text": "if it's not going to come\nfrom replacing this one, it's got to be from inserting\nthat character right there.",
    "start": "2073464",
    "end": "2079790"
  },
  {
    "text": "Once I do that, I can cross out\nthat newly inserted character in this one, and then I have\nall of the string x from i",
    "start": "2079790",
    "end": "2085570"
  },
  {
    "text": "onward still, but then I've\nremoved one character from y, so that's progress.",
    "start": "2085570",
    "end": "2090760"
  },
  {
    "text": "The other possibility\nis deletion, so maybe I delete\nthis character,",
    "start": "2090760",
    "end": "2096530"
  },
  {
    "text": "and then maybe I insert\nit in the next step, but it could be this\ncharacter matches that one, or maybe I have to delete\nseveral characters before I",
    "start": "2096530",
    "end": "2103268"
  },
  {
    "text": "get to one that\nmatches, something. But I don't know that,\nso that's hard to guess,",
    "start": "2103268",
    "end": "2108410"
  },
  {
    "text": "because that would be\nmore time to guess. But I could say, well, this\ncharacter might get deleted.",
    "start": "2108410",
    "end": "2114060"
  },
  {
    "text": "If it gets deleted, that's\nit, it gets deleted.",
    "start": "2114060",
    "end": "2119430"
  },
  {
    "text": "And then somehow the rest\nof the x, from i plus 1 on, has to match with\nall of y, from j on.",
    "start": "2119430",
    "end": "2126440"
  },
  {
    "text": "But those are the\nthree possibilities, and in some sense capture\nall possibilities.",
    "start": "2126440",
    "end": "2133490"
  },
  {
    "text": " So it could be we\nreplace xi with yj,",
    "start": "2133490",
    "end": "2146631"
  },
  {
    "text": "and so that has some\ncost, which we're given. It could be that we insert\nyj at the beginning,",
    "start": "2146632",
    "end": "2154450"
  },
  {
    "text": "or it could be\nthat we delete xi. ",
    "start": "2154450",
    "end": "2159697"
  },
  {
    "text": "You can see that's\ndefinitely spanning all the possible\noperations we can do, and if you think\nabout it long enough, you will be\nconvinced this really",
    "start": "2159697",
    "end": "2166090"
  },
  {
    "text": "covers every possible\nthing you can do. If you think about\nthe optimal solution, it's got to do something to\nmake this first character.",
    "start": "2166090",
    "end": "2173120"
  },
  {
    "text": "Either it does it by replacement\nor it does it by an insertion. But if it inserts\nit later on, it's",
    "start": "2173120",
    "end": "2179750"
  },
  {
    "text": "got to get this out\nof the way somehow, and that's the deletion case. If it inserts it at the\nbeginning, that's the insertion",
    "start": "2179750",
    "end": "2185009"
  },
  {
    "text": "case, if it just\ndoes a replacement, that's the replace case. Those are all possibilities\nfor the optimal solution.",
    "start": "2185009",
    "end": "2191990"
  },
  {
    "text": "Then you can write\na recurrence, which is just a max of those\nthings, those three options.",
    "start": "2191990",
    "end": "2199359"
  },
  {
    "text": "So I'm going to write, I\nguess, dp of ij, yes, of i,j,",
    "start": "2199360",
    "end": "2205540"
  },
  {
    "text": "but now i,j is not a substring. It's a suffix of x\nand a suffix of y, so it corresponds\nto this subproblem.",
    "start": "2205540",
    "end": "2211420"
  },
  {
    "text": "If I want to solve\nthat subproblem, it's going to be the\nmin of three options.",
    "start": "2211420",
    "end": "2218730"
  },
  {
    "text": "We've got the\nreplace case, so it's going to be some cost of\nthe replace, from xi to yj.",
    "start": "2218730",
    "end": "2232660"
  },
  {
    "text": "So that's a quantity\nwhich we're given. Plus the cost of the rest.",
    "start": "2232660",
    "end": "2244768"
  },
  {
    "text": "So after we do this\nreplacement, we can cross off both those characters, and\nso we look at i plus 1 on for x, and j plus\n1 onwards for y.",
    "start": "2244769",
    "end": "2252220"
  },
  {
    "text": "So that's option 1. Then comma for the min.",
    "start": "2252220",
    "end": "2257280"
  },
  {
    "text": "Option 2 is we have\nthe cost of insert yj.",
    "start": "2257280",
    "end": "2266680"
  },
  {
    "text": "So that's also\nsomething we're given. Then we add on what we\nhave to do afterwards,",
    "start": "2266680",
    "end": "2274390"
  },
  {
    "text": "which is we've just\ngotten rid of yj, so x still has the\nentire string from i on,",
    "start": "2274390",
    "end": "2280100"
  },
  {
    "text": "and y has a smaller string. Comma.",
    "start": "2280100",
    "end": "2286420"
  },
  {
    "text": "Last option is basically the\nsame, cost of the delete,",
    "start": "2286420",
    "end": "2292589"
  },
  {
    "text": "deleting xi, and then we have\nto add on DP of i plus 1j.",
    "start": "2292590",
    "end": "2301360"
  },
  {
    "text": "Because here we did not\nadvance y but we advanced x. It's crucial that we\nalways advance at least one of the strings, because that\nmeans we're making progress,",
    "start": "2301360",
    "end": "2310450"
  },
  {
    "text": "and indeed, if you want to jump\nto step 4, which is topological ordering-- sorry, I\nreused my symbols here,",
    "start": "2310450",
    "end": "2318580"
  },
  {
    "text": "some different symbols. Head back to step 4 of\nDP, topological order.",
    "start": "2318580",
    "end": "2324710"
  },
  {
    "text": "Well, these are\nsuffixes, and so I know with suffixes I like\nto go from the smaller suffixes, which is the\nend, to the beginning.",
    "start": "2324710",
    "end": "2332110"
  },
  {
    "text": "And, indeed, because\nwe're always increasing, we're always looking at later\nsubstrings, later suffixes,",
    "start": "2332110",
    "end": "2338880"
  },
  {
    "text": "for one or the other. It's enough to just\ndo-- come over here.",
    "start": "2338880",
    "end": "2344355"
  },
  {
    "text": " To just do that for\nboth of the strings,",
    "start": "2344355",
    "end": "2351750"
  },
  {
    "text": "it doesn't really\nmatter the order. So you can do for i\nequals x down to zero,",
    "start": "2351750",
    "end": "2364040"
  },
  {
    "text": "for j equals y down to\nzero, and that will work.",
    "start": "2364040",
    "end": "2372100"
  },
  {
    "text": "Now this is another\ndynamic programming you can think of as just\nshortest paths in the DAG. The DAG is most easily seen as\na two-dimensional matrix, where",
    "start": "2372100",
    "end": "2381490"
  },
  {
    "text": "the i index is between zero and\nlength of x, and the j index",
    "start": "2381490",
    "end": "2389880"
  },
  {
    "text": "is between zero and\nlength of y, and each of the cells in this matrix\nis a node in the DAG.",
    "start": "2389880",
    "end": "2396600"
  },
  {
    "text": "That's one of our\nsubproblems, dp of ij. And it depends on these\nthree adjacent cells.",
    "start": "2396600",
    "end": "2405484"
  },
  {
    "text": " The edges are like this.",
    "start": "2405485",
    "end": "2410660"
  },
  {
    "text": "If you look at it,\nwe have to check i plus 1, j plus 1,\nthat's this guy. We have to check ij\nplus 1, that's this guy.",
    "start": "2410660",
    "end": "2418589"
  },
  {
    "text": "We have to check i plus\n1j, that's this guy. And so, as long as we\ncompute the matrix this way,",
    "start": "2418590",
    "end": "2424500"
  },
  {
    "text": "what I've done here is\nrow by row, bottom up.",
    "start": "2424500",
    "end": "2430160"
  },
  {
    "text": "You could do it\nanti-diagonals, you could do it column by column\nbackwards, all of those will work because we're making\nprogress towards the origin.",
    "start": "2430160",
    "end": "2438637"
  },
  {
    "text": "And so if you ever-- if\nyou look up at a distance, most descriptions think\nabout it in the matrix form, but I think it's easier to think\nof it in this recursive form,",
    "start": "2438637",
    "end": "2445960"
  },
  {
    "text": "whatever your poison. But this is, again,\nshortest paths in a DAG.",
    "start": "2445960",
    "end": "2451859"
  },
  {
    "text": "The original problem\nwe care about is dp of zero zero,\nthe upper left corner.",
    "start": "2451860",
    "end": "2458090"
  },
  {
    "start": "2458090",
    "end": "2463350"
  },
  {
    "text": "So to be clear in the\nDAG, what you write here is like the cost of,\nthe weight of that edge",
    "start": "2463350",
    "end": "2469780"
  },
  {
    "text": "is the cost of, I\nbelieve, a deletion. Deletion, oh sorry,\nit's an insertion. ",
    "start": "2469780",
    "end": "2476577"
  },
  {
    "text": "Inserting that character,\nthis one's a cost of deletion, this is a cost to replace, so\nyou just put those edge weights in, and then just do a\nshortest paths in the DAG,",
    "start": "2476577",
    "end": "2484960"
  },
  {
    "text": "I think, from this\ncorner to this corner. And that will give you this, or\nyou could just do this for loop",
    "start": "2484960",
    "end": "2492380"
  },
  {
    "text": "and do that in the\nfor loop, same thing. OK. What's the running time?",
    "start": "2492380",
    "end": "2498600"
  },
  {
    "text": "Well, the number of\nsubproblems here is x times y,",
    "start": "2498600",
    "end": "2505720"
  },
  {
    "text": "the running time\nfor subproblem is? ",
    "start": "2505720",
    "end": "2516690"
  },
  {
    "text": "I'm assuming that I know\nthese costs in constant time, so what's the overall running\ntime of that, evaluating that?",
    "start": "2516690",
    "end": "2524234"
  },
  {
    "text": "Constant. ",
    "start": "2524235",
    "end": "2532340"
  },
  {
    "text": "And so the overall running time\nis the number of subproblems",
    "start": "2532340",
    "end": "2538270"
  },
  {
    "text": "times a constant\nequals x times y. This is the best known\nalgorithm for edit distance, no one knows how\nto do any better.",
    "start": "2538270",
    "end": "2544150"
  },
  {
    "text": "It's a big open problem\nwhether you can. You can improve the\nspace a little bit, because we really\nonly need to store",
    "start": "2544150",
    "end": "2549220"
  },
  {
    "text": "the last row or the\nlast column, depending on the order you're\nevaluating things. To even get down to linear\nspace, as far as we know,",
    "start": "2549220",
    "end": "2555960"
  },
  {
    "text": "we need quadratic time. ",
    "start": "2555960",
    "end": "2561260"
  },
  {
    "text": "One more problem, are you ready? This one's going to blow\nyour minds hopefully. ",
    "start": "2561260",
    "end": "2570570"
  },
  {
    "text": "Because we're going to diverge\nfrom strings and sequences, kind of.",
    "start": "2570570",
    "end": "2577080"
  },
  {
    "text": "So far everything we've\nlooked at involves one or two strings or sequences,\nexcept for [INAUDIBLE].",
    "start": "2577080",
    "end": "2583550"
  },
  {
    "text": "That involved a graph, that\nwas a little more exciting. But we'd already seen that,\nso it wasn't that exciting.",
    "start": "2583550",
    "end": "2588561"
  },
  {
    "start": "2588561",
    "end": "2593780"
  },
  {
    "text": "OK, our last problem\nfor today is knapsack. ",
    "start": "2593780",
    "end": "2600419"
  },
  {
    "text": "It's a practical problem. You're going camping. You're going backpacking,\nI should say, and you can only\nafford to take whatever",
    "start": "2600419",
    "end": "2607929"
  },
  {
    "text": "you can fit on your back. You have some limit\nto capacity, let's say one giant backpack\nis all you can carry.",
    "start": "2607929",
    "end": "2613869"
  },
  {
    "text": "Let's imagine it's the size\nof the backpack that matters, not the weight, but\nyou could reformulate this in terms of weight.",
    "start": "2613870",
    "end": "2620070"
  },
  {
    "text": "And you've got a lot of\nstuff you want to bring. Ideally you bring\neverything you own, that would be kind\nof nice, convenient,",
    "start": "2620070",
    "end": "2626140"
  },
  {
    "text": "but it'd be kind of heavy. So you're limited, you're\nnot able to do that. So you have a list of items and\neach of them has a size, si,",
    "start": "2626140",
    "end": "2648450"
  },
  {
    "text": "and has a desire,\na value to you, how much you care about it, how\nmuch you need it on this trip.",
    "start": "2648450",
    "end": "2656410"
  },
  {
    "text": "OK, each item has two things,\nand the sizes are integers.",
    "start": "2656410",
    "end": "2661921"
  },
  {
    "text": "This is going to be important.  It won't work without\nthat assumption.",
    "start": "2661921",
    "end": "2668260"
  },
  {
    "text": "And we have a\nknapsack, backpack, whatever, I guess it's the\nBritish, but I don't know,",
    "start": "2668260",
    "end": "2674810"
  },
  {
    "text": "I get confused. Growing up in Canada, I use\nboth, so it's very confusing.",
    "start": "2674810",
    "end": "2679849"
  },
  {
    "text": "Knapsack of total size, S.",
    "start": "2679850",
    "end": "2685130"
  },
  {
    "text": "And what you'd like to do is\nchoose a subset of the items. If you're lucky, the sum\nof the si's fit within s,",
    "start": "2685130",
    "end": "2690352"
  },
  {
    "text": "then you bring everything. But if you're not lucky,\nthat's not possible, you want to choose a subset of\nthe items whose total size is",
    "start": "2690352",
    "end": "2696140"
  },
  {
    "text": "less than or equal\nto s, in order to maximize the\nsum of the values.",
    "start": "2696140",
    "end": "2701431"
  },
  {
    "text": "So you want to maximize\nthe sum of values",
    "start": "2701431",
    "end": "2710410"
  },
  {
    "text": "for a subset of items, of total\nsize less than or equal to S.",
    "start": "2710410",
    "end": "2728119"
  },
  {
    "text": "You can imagine size as\nweights instead of size, not a big deal, or you could\nhave sizes and weights.",
    "start": "2728120",
    "end": "2733290"
  },
  {
    "text": "All of these things generalize. But we're going to need that\nthe sizes/weights are integers.",
    "start": "2733290",
    "end": "2742290"
  },
  {
    "text": "And so the items have to\nfit, because you can't cheat, you can't have more\nthings than what fit,",
    "start": "2742290",
    "end": "2749089"
  },
  {
    "text": "but then you want to\nmaximize the value. How do we do this with\ndynamic programming?",
    "start": "2749090",
    "end": "2754850"
  },
  {
    "text": " With difficulty.",
    "start": "2754850",
    "end": "2761440"
  },
  {
    "text": "I don't have a ton\nof time, so I think I'm going to tell\nyou-- well, let's see. ",
    "start": "2761440",
    "end": "2768850"
  },
  {
    "text": "Start with guessing. This is the easy\npart to this problem. ",
    "start": "2768850",
    "end": "2774697"
  },
  {
    "text": "We should also be thinking about\nsubproblems at the same time. ",
    "start": "2774697",
    "end": "2783210"
  },
  {
    "text": "Even though I said we're\nleaving sequences, in fact, we have a sequence here, we\nhave a sequence of items.",
    "start": "2783210",
    "end": "2789199"
  },
  {
    "text": "We don't actually care about\nthe order of the items, but hey, they're in an order. If they weren't, we could\nput them in an order,",
    "start": "2789199",
    "end": "2795050"
  },
  {
    "text": "in an arbitrary order. We're going to use\nthat order, and we're going to look at\nsuffixes of items. ",
    "start": "2795050",
    "end": "2805970"
  },
  {
    "text": "i colon of items. ",
    "start": "2805970",
    "end": "2812960"
  },
  {
    "text": "That's helpful, because\nnow it says, oh, well, we should be plucking off\nitems from the beginning. Starting with the\ni-th item, what",
    "start": "2812960",
    "end": "2820310"
  },
  {
    "text": "should I decide\nabout the i-th item, relative to the\noptimal solution?",
    "start": "2820310",
    "end": "2825867"
  },
  {
    "text": "What should I guess? ",
    "start": "2825867",
    "end": "2836119"
  },
  {
    "text": "AUDIENCE: Is i included or not? PROFESSOR: Is i included\nor not, exactly. ",
    "start": "2836119",
    "end": "2843119"
  },
  {
    "text": "Is item i in the subset or not.",
    "start": "2843120",
    "end": "2853010"
  },
  {
    "text": "Two choices, easy. Of course, those\nare the choices.",
    "start": "2853010",
    "end": "2858040"
  },
  {
    "text": "If I do that for everybody,\nthen I know the entire subset. Somehow I need to\nbe able to write",
    "start": "2858040",
    "end": "2864160"
  },
  {
    "text": "and this is what's\nactually impossible if I choose this\nas my subproblem. I want to write DP of i,\nsomehow, in terms of, I guess,",
    "start": "2864160",
    "end": "2871750"
  },
  {
    "text": "DP of i plus 1. And we'd like to do max, and\neither we don't put it in,",
    "start": "2871750",
    "end": "2878589"
  },
  {
    "text": "in which case that's our value,\nor we put it in, in which case we get an additional\nv i in value.",
    "start": "2878590",
    "end": "2885910"
  },
  {
    "text": "OK, but we consume\nin size, and there's no way to remember that\nwe've consumed the size here.",
    "start": "2885910",
    "end": "2893310"
  },
  {
    "text": "We just called DP of i plus 1. In this case, it has\neverything, all this. In this case, we\nlose si of S, but we",
    "start": "2893310",
    "end": "2902130"
  },
  {
    "text": "can't represent that here. That's bad, this would be\nan incorrect algorithm.",
    "start": "2902130",
    "end": "2908179"
  },
  {
    "text": "I would always choose\nto put everything in, because it's not keeping\ntrack of the size bound. There's no capital S in\nthis formula, that's wrong.",
    "start": "2908179",
    "end": "2915290"
  },
  {
    "text": "So, to fix that, I'm\ngoing to write that again, but a subproblem is going\nto have more information,",
    "start": "2915290",
    "end": "2923230"
  },
  {
    "text": "it's going to have\nan index i, and it's going to have\nremaining capacity.",
    "start": "2923230",
    "end": "2928345"
  },
  {
    "start": "2928345",
    "end": "2933700"
  },
  {
    "text": "I'm going to call it capital\nX, at some integer at most S. We're assuming that the\nsizes are all integers,",
    "start": "2933700",
    "end": "2941390"
  },
  {
    "text": "so this is valid. The number of subproblems\nis equal to n,",
    "start": "2941390",
    "end": "2949230"
  },
  {
    "text": "the number of items, did\nI say there are n items? Now there are n items, times\ncapital S, really S plus 1,",
    "start": "2949230",
    "end": "2956690"
  },
  {
    "text": "because I have to\ngo down to zero. But n times S,\ndifferent subproblems.",
    "start": "2956690",
    "end": "2961800"
  },
  {
    "text": "Now for each of them I\ncan write a recurrence, and that is DP of\ni comma s, is going",
    "start": "2961800",
    "end": "2970380"
  },
  {
    "text": "to be the max of\nDP of i plus 1s. This is the case where we\ndon't include the items,",
    "start": "2970380",
    "end": "2976869"
  },
  {
    "text": "so S stays the same. Actually I should write x\nhere, because it's not actually our original value of s.",
    "start": "2976870",
    "end": "2982581"
  },
  {
    "text": "x is the general situation. The other possibility\nis we include item i, and then we give DP of i plus 1.",
    "start": "2982582",
    "end": "2989240"
  },
  {
    "text": "We still consume item i. We now have x minus si\nas our new capacity,",
    "start": "2989240",
    "end": "2995220"
  },
  {
    "text": "what remains after\nwe add in this item. And then we add on\nvi, because that's the value we gain from\nputting that item in.",
    "start": "2995220",
    "end": "3003559"
  },
  {
    "text": "That's it, that's the\nDP, pretty simple. Let me say a little bit about\nthe running time of this thing.",
    "start": "3003560",
    "end": "3011829"
  },
  {
    "text": "Again, you check there's a\ntopological order and all that, it's in the notes. The total running time,\nwe spend constant time",
    "start": "3011830",
    "end": "3019450"
  },
  {
    "text": "to evaluate this formula,\nso it's super easy. The number of subproblems\nis the bottleneck.",
    "start": "3019450",
    "end": "3026390"
  },
  {
    "text": "So it's n times s. Is this polynomial time? You might guess from the outline\nof today that the answer is no.",
    "start": "3026390",
    "end": "3034590"
  },
  {
    "text": "This is not polynomial time. What this polynomial time mean?",
    "start": "3034590",
    "end": "3041760"
  },
  {
    "text": "It's polynomial and n, where\nn is the size of the input. What's the size\nof the input here?",
    "start": "3041760",
    "end": "3047880"
  },
  {
    "text": "Well, we're given n items, each\nwith a size, each with a value. If you think of the\nsizes and values as being single word\nitems, then the size is n.",
    "start": "3047880",
    "end": "3056660"
  },
  {
    "text": "If you think of them as\nbeing ginormous values, at most, the size\nof this input is",
    "start": "3056660",
    "end": "3062720"
  },
  {
    "text": "going to be something\nlike n times log s, because if you write\nit out in binary you would need log s, bits\nto write down those numbers.",
    "start": "3062720",
    "end": "3071109"
  },
  {
    "text": "But it is not n times s. This would be the binary\nencoding of the input,",
    "start": "3071110",
    "end": "3077650"
  },
  {
    "text": "but the running time is this. Now s is exponential in\nlog s, this is, at best,",
    "start": "3077650",
    "end": "3082960"
  },
  {
    "text": "an exponential time algorithm. But it's really not\nthat bad if s is small, and so we call it\npseudopolynomial time.",
    "start": "3082960",
    "end": "3090810"
  },
  {
    "text": "What does pseudopolynomial mean? It just means that\nyour polynomial",
    "start": "3090810",
    "end": "3096270"
  },
  {
    "text": "in n, the input size,\nwhich might be this, and in the numbers\nthat are in your input.",
    "start": "3096270",
    "end": "3103799"
  },
  {
    "text": "Numbers here means\nintegers, basically, otherwise it's not\nreally well defined. So in this case we have\na bunch of integers,",
    "start": "3103800",
    "end": "3110500"
  },
  {
    "text": "but in particular we have s. And so there's S and the si's.",
    "start": "3110500",
    "end": "3115670"
  },
  {
    "text": "This is definitely\npolynomial in n and s. It is the product\nof n and S. So you think of this as\npseudoquadratic time, I guess?",
    "start": "3115670",
    "end": "3122950"
  },
  {
    "text": "Because it's quadratic, but\none of the things is pseudo, meaning it is one of the\nnumbers in the input.",
    "start": "3122950",
    "end": "3129390"
  },
  {
    "text": "So if the number\nis big in k bits, so I can write down a number\nthat's of size 2 to the k.",
    "start": "3129390",
    "end": "3135619"
  },
  {
    "text": "So it's kind of in between\npolynomial and exponential, you might say. Polynomial good,\nexponential bad,",
    "start": "3135620",
    "end": "3142069"
  },
  {
    "text": "pseudopolynomial,\nit's all right. That's the lesson.",
    "start": "3142070",
    "end": "3147590"
  },
  {
    "text": "And for knapsack, this\nis the best we can do, as we'll talk about later.",
    "start": "3147590",
    "end": "3153119"
  },
  {
    "text": "Pseudopolynomial is really\nthe best you could hope for. So, sometimes that's\nas good as you can do",
    "start": "3153120",
    "end": "3158270"
  },
  {
    "text": "and dynamic programming\nlets you do it.",
    "start": "3158270",
    "end": "3161120"
  }
]