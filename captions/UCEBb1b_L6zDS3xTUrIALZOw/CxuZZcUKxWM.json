[
  {
    "start": "0",
    "end": "288000"
  },
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help MIT\nOpenCourseWare continue to",
    "start": "0",
    "end": "6950"
  },
  {
    "text": "offer high-quality educational\nresources for free. To make a donation or view\nadditional materials from",
    "start": "6950",
    "end": "13500"
  },
  {
    "text": "hundreds of MIT courses, visit\nMIT OpenCourseWare at ocw.mit.edu.",
    "start": "13500",
    "end": "19730"
  },
  {
    "text": " JOHN DONG: All right, so I'm\nsure everybody's kind of",
    "start": "19730",
    "end": "25080"
  },
  {
    "text": "curious about Project 2.2\nBeta, so here's the",
    "start": "25080",
    "end": "30750"
  },
  {
    "text": "preliminary performance\nresults. There's still a bit more work\nto do on finalizing these numbers, but here's\nhow they look.",
    "start": "30750",
    "end": "37210"
  },
  {
    "text": "But before I show you guys that,\nI'd like to yell at you guys for a little bit. So this is a timeline of the\nsubmission deadline and when",
    "start": "37210",
    "end": "46100"
  },
  {
    "text": "people submitted things. So from this zone to this zone\nis an hour, and I see like 50%",
    "start": "46100",
    "end": "52610"
  },
  {
    "text": "of the commits made during\nthat period. So a little bit of background,\nthe submission checking system",
    "start": "52610",
    "end": "60660"
  },
  {
    "text": "automatically clones a\nrepository up to the deadline and not a second after.",
    "start": "60660",
    "end": "65880"
  },
  {
    "text": "So if you look at from this\nto this, some people took quite a jump back.",
    "start": "65880",
    "end": "71869"
  },
  {
    "text": "So just as a warning, please try\nto submit things on time. 11:59 means 11:59, and to drive\nthat point further, this",
    "start": "71870",
    "end": "81369"
  },
  {
    "text": "is an example of a commit\nthat I saw in somebody's repository, who's name\nI blanked out.",
    "start": "81370",
    "end": "87340"
  },
  {
    "text": "Obviously, it's seven seconds\npast the deadline, so the automatic repository cloner\ndidn't grab it.",
    "start": "87340",
    "end": "92969"
  },
  {
    "text": "And the previous commit to that\nwas like 10 days ago when Reid pushed out pentominoes\ngrades.",
    "start": "92970",
    "end": "100759"
  },
  {
    "text": "So don't do that either. A little break down on how\noften people commit.",
    "start": "100760",
    "end": "108140"
  },
  {
    "text": "About a quarter of the class\nonly made one commit to their repository. Half of you guys did three\nto 10 commits, which",
    "start": "108140",
    "end": "114780"
  },
  {
    "text": "seems to be an up. Under 21+, there was somebody\nwho did 100 some commits,",
    "start": "114780",
    "end": "120190"
  },
  {
    "text": "which was pretty impressive.  Yeah, very smart dude.",
    "start": "120190",
    "end": "126830"
  },
  {
    "text": "Committing often is a good idea,\nso that you don't run into a situation like before. And next time definitely, there\nis going to be next to",
    "start": "126830",
    "end": "134440"
  },
  {
    "text": "zero tolerance for people who\ndon't commit things on time for the deadlines. Now, the numbers that\npeople want.",
    "start": "134440",
    "end": "142320"
  },
  {
    "text": "So for rotate, just as an\ninteresting data point, this is the 512 by 512 case.",
    "start": "142320",
    "end": "148570"
  },
  {
    "text": "It seems like not everybody\nremembered to carry over their optimizations for the 512 case\nover to the final, otherwise",
    "start": "148570",
    "end": "156950"
  },
  {
    "text": "you would expect the numbers\nto be a little bit more similar and not off by\na factor of eight.",
    "start": "156950",
    "end": "163800"
  },
  {
    "text": "And for rotate overall, that's\nthe distribution.",
    "start": "163800",
    "end": "169860"
  },
  {
    "text": "The speed up factor is\nnormalized to some constant that gives everybody a\nreasonable number.",
    "start": "169860",
    "end": "175760"
  },
  {
    "text": "And there were a lot\nof groups that had code that didn't build. Yes? AUDIENCE: Does the speedup\nonly include",
    "start": "175760",
    "end": "182187"
  },
  {
    "text": "the rotate dot 64. JOHN DONG: Yes. Performance was only tested on\nthe rotate dot 64, which is",
    "start": "182188",
    "end": "189560"
  },
  {
    "text": "what we said in the\nhandout also. So there were a lot of groups\nthat didn't build, which",
    "start": "189560",
    "end": "194900"
  },
  {
    "text": "really surprised me, and I think\nit's probably because half of you guys pushed things\nafter the deadline, and I",
    "start": "194900",
    "end": "200760"
  },
  {
    "text": "presume those things contained\nimportant commits towards making your code\nactually work. But in this case, there was no\nheader files, there was no",
    "start": "200760",
    "end": "208909"
  },
  {
    "text": "cross-testing. All we did was run your make\nfile on your code, and we",
    "start": "208910",
    "end": "214720"
  },
  {
    "text": "replaced your test bed dot c,\nand your k timing, so I'm not quite sure why people have\ncode that doesn't build.",
    "start": "214720",
    "end": "222379"
  },
  {
    "text": " For sort, this was the maximum\nsize input that we allowed you",
    "start": "222380",
    "end": "231410"
  },
  {
    "text": "guys to run. ",
    "start": "231410",
    "end": "238250"
  },
  {
    "text": "One group did really well. So all of these are correct.",
    "start": "238250",
    "end": "243640"
  },
  {
    "text": "The correctness test is built\nin, and I replaced that with a clean copy that contains\na couple additional",
    "start": "243640",
    "end": "250730"
  },
  {
    "text": "checks, by the way. So I tried the other extreme,\na relatively small array.",
    "start": "250730",
    "end": "259151"
  },
  {
    "text": "AUDIENCE: Is the top\nthe same person? JOHN DONG: I'm not sure whether\nor not the top is the same person.",
    "start": "259151",
    "end": "265080"
  },
  {
    "text": "But the distribution wise seems\nlike people didn't quite remember to optimize for\nthe smallest case.",
    "start": "265080",
    "end": "272750"
  },
  {
    "text": "And this is the current overall\nspeedup factors for sort averaging.",
    "start": "272750",
    "end": "278639"
  },
  {
    "text": "We did about 10 to 15 cases\nfor rotate and sort.",
    "start": "278640",
    "end": "284320"
  },
  {
    "text": "And that's the overall\nspeedup distribution.",
    "start": "284320",
    "end": "290240"
  },
  {
    "start": "288000",
    "end": "557000"
  },
  {
    "text": "SAMAN AMARASINGHE: OK, so now\nyou're done with individual",
    "start": "290240",
    "end": "296650"
  },
  {
    "text": "project, so you already did the\nlast project individually, and then we are moving into,\nagain, a group project.",
    "start": "296650",
    "end": "302090"
  },
  {
    "text": "So the first thing we have,\nsetting up automated system for you to say who your\ngroup members are.",
    "start": "302090",
    "end": "308490"
  },
  {
    "text": "So we will send you information,\nand with that, what you have to do is run a\nscript saying who your group",
    "start": "308490",
    "end": "315150"
  },
  {
    "text": "members are, both group members\nhave to do it, and then we will basically clear\nthat account in there.",
    "start": "315150",
    "end": "320600"
  },
  {
    "text": "That said, a lot of you didn't\nknow, in the first project, how to work and what's\nthe right mode of",
    "start": "320600",
    "end": "327150"
  },
  {
    "text": "operations with the group. OK if we gave you to write\n100,000 lines of code, it",
    "start": "327150",
    "end": "333360"
  },
  {
    "text": "makes sense to say, OK, I'm\ngoing to divide the problem into half, one person do\none, the other person do the other half.",
    "start": "333360",
    "end": "339840"
  },
  {
    "text": "The reason for doing the group\nis to try to get you to do pair programming, because\ntalking to a lot of you,",
    "start": "339840",
    "end": "346260"
  },
  {
    "text": "getting a lot of feedback, it\nlooks like most of you spent a huge amount of time debugging.",
    "start": "346260",
    "end": "352330"
  },
  {
    "text": "And since you're only writing\na little amount of code, it makes a lot more sense to sit\nwith your partner next to the",
    "start": "352330",
    "end": "360990"
  },
  {
    "text": "screen, one person types, other\nperson looks over, and then you have a much faster\nway of getting through the",
    "start": "360990",
    "end": "366510"
  },
  {
    "text": "debugging process. So the next one, don't try to\ndivide the problem by half. Just try to find some time,\nsit with each other.",
    "start": "366510",
    "end": "375200"
  },
  {
    "text": "Then the other really disturbing\nthing is there have been a couple of groups that\nwere completely dysfunctional.",
    "start": "375200",
    "end": "382540"
  },
  {
    "text": "We get emails saying, OK, my\ngroup member didn't talk to me, or they didn't do any\nwork, or they were very",
    "start": "382540",
    "end": "389880"
  },
  {
    "text": "condescending. And that's really sad, because\nfrom my experience with MIT",
    "start": "389880",
    "end": "395710"
  },
  {
    "text": "students, when you guys go to\ncompany, you guys probably will be the best programmers\nthere.",
    "start": "395710",
    "end": "401639"
  },
  {
    "text": "There's no question about it. I have seen that. To the point that some people\nmight even resent it, to have this best programmer.",
    "start": "401640",
    "end": "406670"
  },
  {
    "text": "But what I have seen is the fact\na lot of you cannot work in the group, if you haven't\ndeveloped that skill, you will",
    "start": "406670",
    "end": "413530"
  },
  {
    "text": "not be the most impactful\nperson. I have seen that again and again\nin my experience with",
    "start": "413530",
    "end": "418699"
  },
  {
    "text": "doing a start-up. Our MIT students, their way of\nimpacting is put all night do the entire project\nby themselves.",
    "start": "418700",
    "end": "425820"
  },
  {
    "text": "Doable when you're doing a\nsmall change to a large project, but if you want\nto have a big change, you can't do that.",
    "start": "425820",
    "end": "431380"
  },
  {
    "text": "You have to work with the\ngroup, figure out how to impact, how to communicate. This is more important learning\nthan, say, trying to",
    "start": "431380",
    "end": "438620"
  },
  {
    "text": "figure out how you can\noptimize something. So being individual contributors\nand able to do",
    "start": "438620",
    "end": "446170"
  },
  {
    "text": "amazing things is important,\nbut the fact that you can't work with a group is going to\nreally make the impact you can",
    "start": "446170",
    "end": "452980"
  },
  {
    "text": "make much less. So please, please learn how to\nwork with your group members.",
    "start": "452980",
    "end": "458840"
  },
  {
    "text": "Some of them might not be as\ngood as you are, and that will be probably true in real life,\ntoo, but that doesn't mean you",
    "start": "458840",
    "end": "465330"
  },
  {
    "text": "can be condescending towards\nthem, make them feel inferior. That doesn't cut it. You have to learn how to\nwork with these people.",
    "start": "465330",
    "end": "473240"
  },
  {
    "text": "So part of your learning is\nworking with others, and",
    "start": "473240",
    "end": "479970"
  },
  {
    "text": "that's a large part\nof your learning. Don't consider that to be this\nexternal thing, even though you might think you can\ndo a better job.",
    "start": "479970",
    "end": "485710"
  },
  {
    "text": "Just work with the other person,\nespecially in pair programming, because where\nboth of you are sticking together, it's much easier.",
    "start": "485710",
    "end": "492530"
  },
  {
    "text": "Because there are four eyes on\nyour project, they might see something you don't see, and\nsee whether you can work",
    "start": "492530",
    "end": "498510"
  },
  {
    "text": "together like that. And I don't want to hear any\nmore stories saying, look, my",
    "start": "498510",
    "end": "504030"
  },
  {
    "text": "partner was too dumb, or my\npartner didn't show up, he couldn't deal with that.",
    "start": "504030",
    "end": "510320"
  },
  {
    "text": "Those are not great excuses. And so we wonder. Some of them, we will pay\nattention to it, because it",
    "start": "510320",
    "end": "517299"
  },
  {
    "text": "might be one person's\nunilateral actions that lead to that. Still, please, try to figure\nout how we can",
    "start": "517299",
    "end": "523620"
  },
  {
    "text": "work with your partners. And hope you have a good\npartner experience. Use pair programming. Use a lot of good debugging\ntechniques, and the next",
    "start": "523620",
    "end": "531389"
  },
  {
    "text": "project will be fine. ",
    "start": "531390",
    "end": "553430"
  },
  {
    "text": "CHARLES LEISERSON: Great. We're going to talk\nmore about caches. Whoo-whoo!",
    "start": "553430",
    "end": "558620"
  },
  {
    "text": "OK. So for those who weren't here\nlast time, we talked about the",
    "start": "558620",
    "end": "564880"
  },
  {
    "text": "ideal cache model. As you recall, it has a\ntwo-level hierarchy and a",
    "start": "564880",
    "end": "570839"
  },
  {
    "text": "cache size M bytes, and a cache\nline length of B bytes. It's fully associative\nand is optimal",
    "start": "570840",
    "end": "577860"
  },
  {
    "text": "omniscient replacement strategy. However, we also learned that\nLRU was a good substitute, and",
    "start": "577860",
    "end": "585850"
  },
  {
    "text": "that any of the asymptotic\nresults that you can get with optimal, you could also\nget with LRU.",
    "start": "585850",
    "end": "592800"
  },
  {
    "text": "The two performance measures\nthat we talked about were the work, which deals with what the\nprocessor ends up doing,",
    "start": "592800",
    "end": "599800"
  },
  {
    "text": "and the cache misses, which is\nthe transfers between cache and main memory.",
    "start": "599800",
    "end": "606589"
  },
  {
    "text": "You only have to count one\ndirection, because what goes in basically goes out, so more\nor less, it's the same number.",
    "start": "606590",
    "end": "616230"
  },
  {
    "text": "OK, so I'd like to start today\nby talking about some very",
    "start": "616230",
    "end": "621570"
  },
  {
    "text": "basic algorithms that you have\nseen in your algorithms and data structures class, but which\nmay look new when we",
    "start": "621570",
    "end": "631890"
  },
  {
    "text": "start taking caches\ninto account. So the first one here\nis the problem of",
    "start": "631890",
    "end": "636960"
  },
  {
    "text": "merging two sorted arrays. So as you recall, you\ncan basically do",
    "start": "636960",
    "end": "642160"
  },
  {
    "text": "this in linear time. The way that the algorithm works\nis that it looks at the",
    "start": "642160",
    "end": "648129"
  },
  {
    "text": "first element of the two\narrays to be sorted and whichever is smaller, it\nputs in the output.",
    "start": "648130",
    "end": "655910"
  },
  {
    "text": "And then it advances the pointer\nto the next element, and then whichever is smaller,\nit puts in the output.",
    "start": "655910",
    "end": "663160"
  },
  {
    "text": "And in every step, it's doing\njust a constant amount of work, there are n items, so by\nthe time this process is done,",
    "start": "663160",
    "end": "672730"
  },
  {
    "text": "we basically spent time\nproportional to the number of items in the output list. So this should be\nfairly familiar.",
    "start": "672730",
    "end": "680360"
  },
  {
    "text": "So the time to emerge n\nelements is order n. ",
    "start": "680360",
    "end": "687330"
  },
  {
    "text": "Now, the reason merging is\nuseful is because you can use it in a sorting algorithm, a\nmerge sorting algorithm.",
    "start": "687330",
    "end": "694010"
  },
  {
    "text": "The way merge sort works is it\nessentially does divide and",
    "start": "694010",
    "end": "699550"
  },
  {
    "text": "conquer on the array. It divides the array into two\npieces, and it divides those",
    "start": "699550",
    "end": "704980"
  },
  {
    "text": "each into two pieces, and those\ninto two, until it gets down to something\nof unit size. And then what it does\nis it merges the",
    "start": "704980",
    "end": "712600"
  },
  {
    "text": "two pairs of arrays. So for example here, the 19 and\n3 got merged together to",
    "start": "712600",
    "end": "723850"
  },
  {
    "text": "be 3 and 19. The 12 and 46 were already in\norder, but you still had to do work to get it there\nand so forth.",
    "start": "723850",
    "end": "731300"
  },
  {
    "text": "So it puts everything in order\nin pairs, and then for each of those, it puts it together into\nfours, and for each of",
    "start": "731300",
    "end": "738790"
  },
  {
    "text": "those, it puts it together\ninto the final list. Now of course, the way it does\nthis is not in the order I",
    "start": "738790",
    "end": "745010"
  },
  {
    "text": "showed you. It actually goes down and does\na walk of this tree.",
    "start": "745010",
    "end": "750690"
  },
  {
    "text": "But conceptually, you can see\nthat it essentially comes down",
    "start": "750690",
    "end": "756940"
  },
  {
    "text": "to merging pairs, merging\nquadruples, emerging octuples, and so forth, all the way until\nthe program is done.",
    "start": "756940",
    "end": "770100"
  },
  {
    "text": "So to calculate the work of\nMerge Sort, this is something you've seen before because it's\nexactly what you do in",
    "start": "770100",
    "end": "777300"
  },
  {
    "text": "your algorithms class. You get a recurrence that\nsays that the work,",
    "start": "777300",
    "end": "784160"
  },
  {
    "text": "in this case is-- well, if you have only one\nelement, it's a constant amount of work, and otherwise,\nI solve two problems of half",
    "start": "784160",
    "end": "791350"
  },
  {
    "text": "the size doing order n work,\nwhich is the time to merge the two elements.",
    "start": "791350",
    "end": "796440"
  },
  {
    "text": "So classic divide and conquer. And I'm sure you're familiar\nwith what the solution to this",
    "start": "796440",
    "end": "802380"
  },
  {
    "text": "recurrence is. What's the solution to\nthis recurrence? n log n.",
    "start": "802380",
    "end": "808839"
  },
  {
    "text": "I want to, though, step through\nit, just to get everybody warmed up to the\nway that I want to solve",
    "start": "808840",
    "end": "815520"
  },
  {
    "text": "recurrences so that you are in\na position, when we do the caching analysis--",
    "start": "815520",
    "end": "821030"
  },
  {
    "text": " we have a common framework for\nunderstanding how the caching",
    "start": "821030",
    "end": "827050"
  },
  {
    "text": "analysis will work. So we're going to solve this\nrecurrence, and if the base",
    "start": "827050",
    "end": "833200"
  },
  {
    "text": "case is constant, we\nusually omit it. It's assumed.",
    "start": "833200",
    "end": "838940"
  },
  {
    "text": "So we start out with W of n, and\nwhat we do is we replace it by the right hand side, where\nwe put the constant term",
    "start": "838940",
    "end": "848610"
  },
  {
    "text": "on the top and then\nthe two children. So here I've gotten rid of the\ntheta, because conceptually",
    "start": "848610",
    "end": "854630"
  },
  {
    "text": "when I'm done, I can put a big\ntheta around the whole thing, around the whole tree, and it\njust makes the math a little",
    "start": "854630",
    "end": "860610"
  },
  {
    "text": "bit easier and a little\nbit clearer to see what's going on. So then I take each of those\nand I split those, and this",
    "start": "860610",
    "end": "868270"
  },
  {
    "text": "time I've got n over 4. Correct? I checked for that\none this time.",
    "start": "868270",
    "end": "874580"
  },
  {
    "text": "It's funny because it was still\nthere, actually, just a few minutes before class\nas I was going through.",
    "start": "874580",
    "end": "881339"
  },
  {
    "text": "And we keep doing that until\nwe get down to something of size one, until the recurrence\nbottoms out.",
    "start": "881340",
    "end": "888600"
  },
  {
    "text": "So when you look at a recursion\ntree of this nature, the first thing that you\ntypically want to do is take a",
    "start": "888600",
    "end": "894470"
  },
  {
    "text": "look at what the height\nof the tree is. In this case, we're taking a\nproblem of size n, and we're",
    "start": "894470",
    "end": "900560"
  },
  {
    "text": "halving it at every step. And so the number of times we\nhave to halve the argument--",
    "start": "900560",
    "end": "907910"
  },
  {
    "text": "which turns out to be also equal\nto the work, but that's just coincidence-- is log n times.",
    "start": "907910",
    "end": "914730"
  },
  {
    "text": "So the height is log\nbase 2 of n. Now what we do typically is we\nadd things up across the rows,",
    "start": "914730",
    "end": "923610"
  },
  {
    "text": "across the levels. So on the top level,\nwe have n. On the next level, we have n.",
    "start": "923610",
    "end": "931010"
  },
  {
    "text": "The next level, hey, n. ",
    "start": "931010",
    "end": "936660"
  },
  {
    "text": "To add up the bottom, just to\nmake sure, we have to count up",
    "start": "936660",
    "end": "941889"
  },
  {
    "text": "how many leaves there are, and\nthe number of leaves, since this is a binary tree, is\njust 2 to the height.",
    "start": "941890",
    "end": "947720"
  },
  {
    "text": "So it's 2 to the log\nn, which is n.",
    "start": "947720",
    "end": "953310"
  },
  {
    "text": "So then I add across all the\nleaves, and I get the order 1",
    "start": "953310",
    "end": "958640"
  },
  {
    "text": "at the base times n,\nwhich is order n. And so now I'm in a position\nto add up the total work,",
    "start": "958640",
    "end": "967370"
  },
  {
    "text": "which is basically log n\nlevels of n is total of order n log n.",
    "start": "967370",
    "end": "973040"
  },
  {
    "text": "So hopefully, this\nis all review. Hopefully this is all review.",
    "start": "973040",
    "end": "978190"
  },
  {
    "text": "You haven't seen this before. It's really neat, isn't it? But you've missed something\nalong the way. ",
    "start": "978190",
    "end": "986860"
  },
  {
    "text": "So now with caching.  So the first thing to observe is\nthat merge subroutine, the",
    "start": "986860",
    "end": "995500"
  },
  {
    "text": "number of cache misses that it\nhas is order n over B. So as",
    "start": "995500",
    "end": "1003190"
  },
  {
    "text": "you're going through, these\narrays are laid out continuously in memory.",
    "start": "1003190",
    "end": "1008529"
  },
  {
    "text": "The number of misses-- you're just going through\nthe data once-- is order n data, all going\nthrough contiguously.",
    "start": "1008530",
    "end": "1016950"
  },
  {
    "text": "And so every time you bring in\ndata, you get full spatial locality, there are n elements,\nit costs n over B.",
    "start": "1016950",
    "end": "1024730"
  },
  {
    "text": "So is that plain? Hopefully that part's plain,\nbecause you bring in things of",
    "start": "1024730",
    "end": "1030990"
  },
  {
    "text": "each axis, you get the\nsame factor of B. So now merge sort-- and this is, once again, the\nhard part is coming up with a",
    "start": "1030990",
    "end": "1038108"
  },
  {
    "text": "recurrence, and then the other\nhard part is solving it. So there's two hard parts\nto recurrences.",
    "start": "1038109",
    "end": "1043560"
  },
  {
    "text": "OK, so the merge sort algorithm\nsolves two problems of size n over 2, and\nthen does a merge.",
    "start": "1043560",
    "end": "1050160"
  },
  {
    "text": "So the second line here is\npretty straightforward. I take the cache misses\nthat I need to do, and I take a merge.",
    "start": "1050160",
    "end": "1055830"
  },
  {
    "text": "I may have a few other accesses\nin there, but they're going to be dominated\nby the merge.",
    "start": "1055830",
    "end": "1061300"
  },
  {
    "text": "OK, so it's still going\nto be theta n over B. Now the hard part, generally, of\ndealing with cache analysis",
    "start": "1061300",
    "end": "1070409"
  },
  {
    "text": "is how to do the base case,\nbecause the base case is more complicated than when you just\ndo running time, you get that",
    "start": "1070410",
    "end": "1076679"
  },
  {
    "text": "to run down to a base case\nof constant size. Here, you don't get to\nrun down to base",
    "start": "1076680",
    "end": "1081720"
  },
  {
    "text": "case of constant size. So what it says here is that\nwe're going to run down until",
    "start": "1081720",
    "end": "1088899"
  },
  {
    "text": "I have a sorting problem that\nfits in cache, n is going to be less than some constant times\nn, for some sufficiently",
    "start": "1088900",
    "end": "1097190"
  },
  {
    "text": "small constant c less than 1. When in finally fits in cache,\nhow many cache misses does it",
    "start": "1097190",
    "end": "1105419"
  },
  {
    "text": "take me to sort it? Well, I only need to have the\ncold misses to bring that",
    "start": "1105420",
    "end": "1110490"
  },
  {
    "text": "array into memory, and so that's\njust proportional to n",
    "start": "1110490",
    "end": "1116500"
  },
  {
    "text": "over B, because for all the rest\nof the levels of merging, you're inside the cache.",
    "start": "1116500",
    "end": "1124610"
  },
  {
    "text": "That make sense? So that's where we get\nthis recurrence. This is always a tricky thing\nto figure out how to write",
    "start": "1124610",
    "end": "1131980"
  },
  {
    "text": "that recurrence for\na given thing. Then, as I say, the other\ntricky thing is how",
    "start": "1131980",
    "end": "1137620"
  },
  {
    "text": "do you solve it? But we're going to solve it\nessentially the same way as we did before.",
    "start": "1137620",
    "end": "1144500"
  },
  {
    "text": "I'm not going to go through all\nthe steps here, except to just elaborate. So what we're doing is we're\ntaking, and we have n over B",
    "start": "1144500",
    "end": "1152139"
  },
  {
    "text": "at the top, and then we divide\nit into two problems, and for each of those--",
    "start": "1152140",
    "end": "1158580"
  },
  {
    "text": "whoops, there's a c there\nthat doesn't belong. It should just be n over\n2B on both, and then n",
    "start": "1158580",
    "end": "1166559"
  },
  {
    "text": "over 4B, and so forth. And we keep going down until\nwe get to our base case.",
    "start": "1166560",
    "end": "1174500"
  },
  {
    "text": "Now in our base case, what I\nclaim is that when I hit this base case, it's going to be the\ncase that n is, in fact, a",
    "start": "1174500",
    "end": "1183120"
  },
  {
    "text": "constant factor times n, so that\nn over B is almost the",
    "start": "1183120",
    "end": "1188800"
  },
  {
    "text": "same as m over B. And the reason\nis because before I hit the base case, when I was at\nsize twice n, and that was",
    "start": "1188800",
    "end": "1200120"
  },
  {
    "text": "bigger than m. So if twice n is\nbigger than m-- than my constant times m--",
    "start": "1200120",
    "end": "1207960"
  },
  {
    "text": "but n is smaller than m, then\nit's the case that n and m are",
    "start": "1207960",
    "end": "1217710"
  },
  {
    "text": "essentially the same size to\nwithin a constant factor, within a factor of\ntwo, in fact.",
    "start": "1217710",
    "end": "1223880"
  },
  {
    "text": "And so therefore, here I can say\nthat it's order m over B.",
    "start": "1223880",
    "end": "1230110"
  },
  {
    "text": "And now the question is, how\nmany levels did I have to go down cutting things in half\nbefore I got to something of",
    "start": "1230110",
    "end": "1237690"
  },
  {
    "text": "size m over B? Well, the way that I usually\nthink about this is--",
    "start": "1237690",
    "end": "1243270"
  },
  {
    "text": "you can do it by taking the\ndifference as I did before. The height of the whole tree is\ngoing to be log base 2 of",
    "start": "1243270",
    "end": "1249590"
  },
  {
    "text": "n, and the height of this\nis basically log of--",
    "start": "1249590",
    "end": "1255220"
  },
  {
    "text": "what's the size of n?",
    "start": "1255220",
    "end": "1260250"
  },
  {
    "text": "It's going to be log of the size\nof n when this occurs. Well, n at that point is\nsomething like cm.",
    "start": "1260250",
    "end": "1267650"
  },
  {
    "text": "So it's basically log n minus\nlog cm, which is basically log of n over cm.",
    "start": "1267650",
    "end": "1274840"
  },
  {
    "text": "How about some questions. ",
    "start": "1274840",
    "end": "1282520"
  },
  {
    "text": "Yeah, question. AUDIENCE: --the reason for why\nyou just substituted on the left, [INAUDIBLE] over B, but\non the right [INAUDIBLE].",
    "start": "1282520",
    "end": "1288820"
  },
  {
    "text": "CHARLES LEISERSON: Here? AUDIENCE: No. CHARLES LEISERSON:\nOr you mean here? AUDIENCE: [INAUDIBLE]. ",
    "start": "1288820",
    "end": "1296100"
  },
  {
    "text": "CHARLES LEISERSON: On\nthe right side. AUDIENCE: On the right-most\nleaf, it's n over B. Is that all of the leaves added up\nbecause [INAUDIBLE]?",
    "start": "1296100",
    "end": "1301179"
  },
  {
    "text": "CHARLES LEISERSON: No, no, no,\nthis is going to be all of the leaves added up here. This is the stack I have\non the right hand side.",
    "start": "1301180",
    "end": "1307690"
  },
  {
    "text": "So we'll get there. So the point is, the number of\nleaves is 2 to this-- so that's just n over cm--",
    "start": "1307690",
    "end": "1314020"
  },
  {
    "text": "times m over B. Well, n over\ncm times m over B, the m's",
    "start": "1314020",
    "end": "1319660"
  },
  {
    "text": "cancel, and I get essentially\nn over b with whatever that constant is here.",
    "start": "1319660",
    "end": "1326920"
  },
  {
    "text": "And so now I have n over b\nacross every level, and then when I add those up, I have to\ngo log of n over cm levels,",
    "start": "1326920",
    "end": "1338340"
  },
  {
    "text": "which is the same as\nlog of n over m. So I have n over B times\nlog of n over m.",
    "start": "1338340",
    "end": "1344230"
  },
  {
    "text": "Yeah, question? AUDIENCE: Initial assumption\nthat c is some sufficiently small number, so 1\nover c would be a",
    "start": "1344230",
    "end": "1351418"
  },
  {
    "text": "rather large factor. CHARLES LEISERSON: It could\npotentially be a large factor,",
    "start": "1351418",
    "end": "1356570"
  },
  {
    "text": "but it's a constant. In other words, it can't\nvary with n. So in fact, typically for\nsomething like merge sort, the",
    "start": "1356570",
    "end": "1364310"
  },
  {
    "text": "constant is going to\nbe very close to-- for most things, the constant\nthere is typically only a few.",
    "start": "1364310",
    "end": "1371840"
  },
  {
    "text": "Because the question is, how\nmany other things do you need in order to make sure\nit fits in? In this case, you have n.",
    "start": "1371840",
    "end": "1377169"
  },
  {
    "text": "Well, you have both the input\nand the output, so here, it's going to be, you have to fit\nboth the input and the output",
    "start": "1377170",
    "end": "1382750"
  },
  {
    "text": "into cache in order not\nto have the cache it. So it's basically going\nto be like a factor",
    "start": "1382750",
    "end": "1387880"
  },
  {
    "text": "of 2 for merge sort. For the matrix multiplication,\nit was like a factor of three. So generally a fairly\nsmall number.",
    "start": "1387880",
    "end": "1394600"
  },
  {
    "text": "Question? AUDIENCE: I guess that\nmakes sense. But I [INAUDIBLE]. So on the order of the size of\nthe leaves, can you assume",
    "start": "1394600",
    "end": "1404358"
  },
  {
    "text": "that n is more than cm, so\nyou can substitute-- CHARLES LEISERSON: Yeah, because\nbasically, when it",
    "start": "1404358",
    "end": "1410509"
  },
  {
    "text": "hits this condition-- AUDIENCE: Right. I understand that. Then you're also saying, why\nisn't there more or less just",
    "start": "1410510",
    "end": "1417754"
  },
  {
    "text": "one B, because there's n over\ncm, n is the same as cm. That's [INAUDIBLE].",
    "start": "1417754",
    "end": "1424137"
  },
  {
    "text": "At the bottom level,\nthere should be-- CHARLES LEISERSON: Oh, did I\ndo something wrong here?",
    "start": "1424137",
    "end": "1429340"
  },
  {
    "text": "Number of leaves is-- AUDIENCE: [INAUDIBLE]. ",
    "start": "1429340",
    "end": "1435260"
  },
  {
    "text": "CHARLES LEISERSON:\nRight, right. Sorry. This is the n at the top. You always have to\nbe careful here.",
    "start": "1435260",
    "end": "1440610"
  },
  {
    "text": "So this is the n in this case,\nso this is some n, little n.",
    "start": "1440610",
    "end": "1447520"
  },
  {
    "text": "So this is not the same n. This is the n that we\nhad at the top. This is the notion of\nrecurrences, like the n keeps",
    "start": "1447520",
    "end": "1453650"
  },
  {
    "text": "recurring, but you\nknow which ones-- so it can be confusing,\nbecause if you're-- so yeah.",
    "start": "1453650",
    "end": "1459470"
  },
  {
    "text": "So this is not the\nn that's here. This is the n that started\nout at the top.",
    "start": "1459470",
    "end": "1465260"
  },
  {
    "text": "So we're analyzing it\nin terms of the n. Some people write these things\nwhere they would write this in terms of k, and then analyze it\nfor n, and for some people,",
    "start": "1465260",
    "end": "1474410"
  },
  {
    "text": "that can be helpful to do, to\ndisambiguate the two things. I always find it wastes a\nvariable, and you know, those",
    "start": "1474410",
    "end": "1483330"
  },
  {
    "text": "variables are hard to come by. There's only a finite\nnumber of them. ",
    "start": "1483330",
    "end": "1490510"
  },
  {
    "text": "OK, so are we good for this? So here, we ended up with\nn over b, log of n",
    "start": "1490510",
    "end": "1496210"
  },
  {
    "text": "over m cache misses. So how does that compare?",
    "start": "1496210",
    "end": "1501990"
  },
  {
    "text": "Let's just do a little\nthinking about this. Here's the recurrence, and\nI solved it out to this.",
    "start": "1501990",
    "end": "1510770"
  },
  {
    "text": "So let's just look to\nsee what this means. If I have a really big n, much\nbigger than the size of my",
    "start": "1510770",
    "end": "1515890"
  },
  {
    "text": "cache, then I'm going to do a\nfactor of B log n less misses",
    "start": "1515890",
    "end": "1522020"
  },
  {
    "text": "than work, because the work\nis n over B log n.",
    "start": "1522020",
    "end": "1527060"
  },
  {
    "text": " So if n compared to m-- let's\nsay n was m squared or",
    "start": "1527060",
    "end": "1537990"
  },
  {
    "text": "something--  then n over m would\nstill be n, if n",
    "start": "1537990",
    "end": "1548059"
  },
  {
    "text": "was as big as m squared. So if n was as big as m squared,\nthis log of n over m",
    "start": "1548060",
    "end": "1556180"
  },
  {
    "text": "would still be log n. And so I would basically have n\nover B log n for a factor of",
    "start": "1556180",
    "end": "1567434"
  },
  {
    "text": "B log n less misses than work. If they're about the same-- did I get this right? If they're about the same size,\nif n is approximately m,",
    "start": "1567435",
    "end": "1576950"
  },
  {
    "text": "maybe it's just a little bit\nbigger, then the log here disappears completely, and\nso I basically just",
    "start": "1576950",
    "end": "1587020"
  },
  {
    "text": "have n over B misses.  AUDIENCE: [INAUDIBLE].",
    "start": "1587020",
    "end": "1592487"
  },
  {
    "text": " CHARLES LEISERSON: Yeah,\nbut if n is like--",
    "start": "1592487",
    "end": "1598060"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. CHARLES LEISERSON: Yeah. In fact, for this, you have to\nbe careful as you get to the base cases.",
    "start": "1598060",
    "end": "1603860"
  },
  {
    "text": "Technically, for some of this,\nI should be saying 1 plus log of n over m, and in some of the\nthings I do later, I will",
    "start": "1603860",
    "end": "1610610"
  },
  {
    "text": "put in the ones. But if you're looking at it\nasymptotically and n gets big,",
    "start": "1610610",
    "end": "1617030"
  },
  {
    "text": "you don't have to worry\nabout those cases. That just handles the case\nwhether you're looking at n",
    "start": "1617030",
    "end": "1622110"
  },
  {
    "text": "getting large or whether you're\ntrying to handle a formula for all n, even\nif and n is small. Question?",
    "start": "1622110",
    "end": "1627850"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]?  CHARLES LEISERSON: The work\nwas n log n, yes.",
    "start": "1627850",
    "end": "1635150"
  },
  {
    "text": "The work was n log n. So here we basically have n over\nB log n, so I'm saving a",
    "start": "1635150",
    "end": "1641890"
  },
  {
    "text": "factor of B in the case where\nit's about the same. Did I get this right? I'm just looking at this, and\nnow I'm trying to reverse",
    "start": "1641890",
    "end": "1648880"
  },
  {
    "text": "engineer what my argument is. So we're looking at n log n\nversus n over B log n over m.",
    "start": "1648880",
    "end": "1658890"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE PHRASE]. So that you get a factor of B\nless misses, because you would",
    "start": "1658890",
    "end": "1665995"
  },
  {
    "text": "be getting n over B like log\nof n, that's the only way you're getting a factor\nof B less misses.",
    "start": "1665995",
    "end": "1671630"
  },
  {
    "text": "So I don't understand how you're\nsaying, for n more or less equal to m. You would want something\nmore like, for n--",
    "start": "1671630",
    "end": "1678000"
  },
  {
    "text": "CHARLES LEISERSON: Well, if n\nand m are about the same size, the number of cache misses is\njust n over B. And the number",
    "start": "1678000",
    "end": "1687070"
  },
  {
    "text": "of cache misses is n over B,\nand the work is n log n.",
    "start": "1687070",
    "end": "1692429"
  },
  {
    "text": "So I've saved a factor\nof B times log n, OK? ",
    "start": "1692430",
    "end": "1701320"
  },
  {
    "text": "What did I say? AUDIENCE: [INAUDIBLE]. ",
    "start": "1701320",
    "end": "1706960"
  },
  {
    "text": "CHARLES LEISERSON: B log m? No, I was saying that's\nfor the case when n is much bigger than m.",
    "start": "1706960",
    "end": "1712830"
  },
  {
    "text": "So let's take a look\nat the case--  let me just do it on\nthe board here.",
    "start": "1712830",
    "end": "1718180"
  },
  {
    "start": "1718180",
    "end": "1724420"
  },
  {
    "text": "Let's suppose that n is like m\nsquared, just as an example,",
    "start": "1724420",
    "end": "1734440"
  },
  {
    "text": "big number. So I'm going to look at,\nessentially, n over B times",
    "start": "1734440",
    "end": "1743120"
  },
  {
    "text": "log of n over m. ",
    "start": "1743120",
    "end": "1749649"
  },
  {
    "text": "So log of n over m, so what is\nn over m is about m, which is",
    "start": "1749650",
    "end": "1755360"
  },
  {
    "text": "about square root of n, right?",
    "start": "1755360",
    "end": "1760960"
  },
  {
    "text": "So this basically ends up being\napproximately n over B log of square root of n, which\nis the same as log n, to",
    "start": "1760960",
    "end": "1774250"
  },
  {
    "text": "within a constant factor. I'm going to leave out the\nconstant factors here. Then I want to compare\nthat with n log n.",
    "start": "1774250",
    "end": "1783546"
  },
  {
    "start": "1783546",
    "end": "1790610"
  },
  {
    "text": "So I get a factor of\nB less misses. So the first one, yes, OK.",
    "start": "1790610",
    "end": "1796780"
  },
  {
    "text": "So I get a factor of B less\nmisses, you're right. Then I get a factor\nof B less misses. So I think I've got\nthese switched.",
    "start": "1796780",
    "end": "1802480"
  },
  {
    "start": "1802480",
    "end": "1810330"
  },
  {
    "text": "So this is the case I'm doing\nis for n much bigger than m. ",
    "start": "1810330",
    "end": "1816260"
  },
  {
    "text": "So let's do the other case. I think I've got the two\nthings switched. I'll fix it in the notes.",
    "start": "1816260",
    "end": "1821400"
  },
  {
    "text": "If n and m are approximately\nthe same, then the log is a constant, right?",
    "start": "1821400",
    "end": "1828230"
  },
  {
    "text": "So this ends up being\napproximately n over B. And",
    "start": "1828230",
    "end": "1833860"
  },
  {
    "text": "now when I take a look at the\ndifference between the number of things, I get B log n.",
    "start": "1833860",
    "end": "1839110"
  },
  {
    "text": "So I've got the two\nthings mixed. Yeah? AUDIENCE: As n approaches m,\nthen the log would approach",
    "start": "1839110",
    "end": "1844639"
  },
  {
    "text": "zero, but were you talking\nabout how it technically should be-- CHARLES LEISERSON:\n1 plus n, yes.",
    "start": "1844640",
    "end": "1850247"
  },
  {
    "text": "AUDIENCE: So technically, that\napproaches one when the log approaches zero. CHARLES LEISERSON: Yeah.",
    "start": "1850247",
    "end": "1857007"
  },
  {
    "text": "AUDIENCE: These things are\nreally hard for me, because they are really arbitrary. And then you're like, oh\nyeah, you can just put a 1 on top of there.",
    "start": "1857008",
    "end": "1862419"
  },
  {
    "text": "And for example, I always miss\nthose, because I usually try to do the math as rigorously\nas I can, and those ones",
    "start": "1862420",
    "end": "1867586"
  },
  {
    "text": "generally do not appear,\nand you're like, oh, sure whatever. So how am I supposed to know\nthat the log is actually not",
    "start": "1867586",
    "end": "1873412"
  },
  {
    "text": "going to be zero, and I'm going\nto be like, yeah, you're not going to do any caches. CHARLES LEISERSON: Because\ngenerally, what we're doing is",
    "start": "1873412",
    "end": "1879590"
  },
  {
    "text": "we're looking at how things\nscale, so we're generally looking at n being big, in which\ncase it doesn't matter.",
    "start": "1879590",
    "end": "1885409"
  },
  {
    "text": "These things only matter if\nn's-- for example, notice here that if n goes less than m,\nwe're in real trouble, right?",
    "start": "1885410",
    "end": "1894000"
  },
  {
    "text": "Because now the log\nis negative. Wait, what does that mean? Well, the answer is the analysis\nwas assuming that n",
    "start": "1894000",
    "end": "1901340"
  },
  {
    "text": "was sufficiently large\ncompared with m. AUDIENCE: Why can't you just\nbe like, oh, when n is for",
    "start": "1901340",
    "end": "1906712"
  },
  {
    "text": "less than one, you can assume,\nwell, n is 2n. In that case, you get log\nof two, which is still something or other.",
    "start": "1906712",
    "end": "1912934"
  },
  {
    "text": "CHARLES LEISERSON:\nYeah, exactly. So what happens in these things\nis if you get right on the cusp of fitting in memory,\nthen these analyses like,",
    "start": "1912934",
    "end": "1921350"
  },
  {
    "text": "well, what exactly is the\nanswer, is dicey.",
    "start": "1921350",
    "end": "1927020"
  },
  {
    "text": "But if you assume that\nit doesn't fit in, what's going to happen? Or that does fit in, what\nis going to happen?",
    "start": "1927020",
    "end": "1933929"
  },
  {
    "text": "And then the analysis\nright on the edge is somewhere between there. ",
    "start": "1933930",
    "end": "1940100"
  },
  {
    "text": "Good. So I switched these. I said this the other\nway around.",
    "start": "1940100",
    "end": "1945190"
  },
  {
    "text": "That's funny. I went through this, and then\nin my notes, I had them",
    "start": "1945190",
    "end": "1950530"
  },
  {
    "text": "switched, and I said, oh my\ngosh, I did this wrong. And I've just gone through it,\nand it turns out I was right",
    "start": "1950530",
    "end": "1957020"
  },
  {
    "text": "in my notes. Now, one of the things, if you\nlook at what's going on--",
    "start": "1957020",
    "end": "1962850"
  },
  {
    "text": "let's just go back to\nthis picture here. What's going on here is each one\nof the passes that we're",
    "start": "1962850",
    "end": "1969409"
  },
  {
    "text": "doing to do a merge is basically\ntaking n over B",
    "start": "1969410",
    "end": "1976010"
  },
  {
    "text": "misses to do a binary merge. We're going through all the data\nto merge just two things,",
    "start": "1976010",
    "end": "1985890"
  },
  {
    "text": "and traversing all the data. So you can imagine, what would\nhappen if I did, say, a",
    "start": "1985890",
    "end": "1991530"
  },
  {
    "text": "four-way merge?  With a four-way merge, I could\nactually merge four things",
    "start": "1991530",
    "end": "2000770"
  },
  {
    "text": "with only a little bit more\nthan n over B misses. ",
    "start": "2000770",
    "end": "2006210"
  },
  {
    "text": "In fact, that's what we're going\nto analyze in general. So the idea is that we can\nimprove our cache efficiency",
    "start": "2006210",
    "end": "2014850"
  },
  {
    "text": "by doing multi-way merging. So the idea here is, let's merge\nR, which is, let's say,",
    "start": "2014850",
    "end": "2022350"
  },
  {
    "text": "less than n subarrays\nwith a tournament. So here are R subarrays, and\nhere's they're each, let's",
    "start": "2022350",
    "end": "2031250"
  },
  {
    "text": "say, is of size n over R. And\nwhat we're going to do is",
    "start": "2031250",
    "end": "2036370"
  },
  {
    "text": "merge them with a tournament, so\nthis is a tournament where we say, who's the winner of\nthese two, who's the winner of",
    "start": "2036370",
    "end": "2042070"
  },
  {
    "text": "these two, et cetera. And then whoever wins at the top\nhere, we take them and put",
    "start": "2042070",
    "end": "2047710"
  },
  {
    "text": "them in the output, and then\nwe repeat the tournament.  Now let's just look\nwhat happens.",
    "start": "2047710",
    "end": "2053810"
  },
  {
    "text": "It takes order R work to produce\nthe forced output.",
    "start": "2053810",
    "end": "2058830"
  },
  {
    "text": "So we got R things here. To playoff this tournament,\nthere are R nodes here. They each have to do a constant\namount of comparing",
    "start": "2058830",
    "end": "2066629"
  },
  {
    "text": "before I end up with a single\nvalue to put in the output. So it costs me R to get\nthis thing warmed up.",
    "start": "2066630",
    "end": "2074099"
  },
  {
    "text": "But once I find the winner,\nand I remove the winner whatever chain he might have\ncome along, how quickly can I",
    "start": "2074100",
    "end": "2082120"
  },
  {
    "text": "repopulate the tournament\nwith the next guy? The next guy only has to play\nthe tournament on the path",
    "start": "2082120",
    "end": "2091260"
  },
  {
    "text": "that was there. All the other matches,\nwe know who won. ",
    "start": "2091260",
    "end": "2096570"
  },
  {
    "text": "So the second guy only cost me\nlog R to produce the next guy.",
    "start": "2096570",
    "end": "2103810"
  },
  {
    "text": "And the next guy is log R, and\nso once we get going, to do an",
    "start": "2103810",
    "end": "2108910"
  },
  {
    "text": "R-way merge only costs me\nlog R work per element.",
    "start": "2108910",
    "end": "2116619"
  },
  {
    "text": "So the total work in merging is\nR, to get started, plus n log R. Well, R is less than n,\nso that's just n log R total",
    "start": "2116620",
    "end": "2126530"
  },
  {
    "text": "to do the merging. That's the work. ",
    "start": "2126530",
    "end": "2132359"
  },
  {
    "start": "2131000",
    "end": "2287000"
  },
  {
    "text": "Now, let's take a look at what\nhappens if I now do merge sort",
    "start": "2132360",
    "end": "2138340"
  },
  {
    "text": "with R-way merges.  So what I do is if I have only\none element, then it's going",
    "start": "2138340",
    "end": "2151660"
  },
  {
    "text": "to cost me order one time to\nmerge it, because there's nothing to do, just put\nit in the output.",
    "start": "2151660",
    "end": "2157580"
  },
  {
    "text": "Otherwise, I've got R problems\nof size n over R that I'm",
    "start": "2157580",
    "end": "2164160"
  },
  {
    "text": "going to merge, and my\nmerge takes n log R time to do the merge.",
    "start": "2164160",
    "end": "2172270"
  },
  {
    "text": "So if I look at the recursion\ntree, I have n log R here starting here, then I branch R\nways, and then I have n over R",
    "start": "2172270",
    "end": "2180900"
  },
  {
    "text": "log R to do the R-way branching\nat the next level, n",
    "start": "2180900",
    "end": "2186510"
  },
  {
    "text": "over R squared log R at the\nnext level, et cetera. ",
    "start": "2186510",
    "end": "2195182"
  },
  {
    "text": "AUDIENCE: You said that the\ncost of processing is R. CHARLES LEISERSON:\n--is n log R. AUDIENCE: But is--",
    "start": "2195183",
    "end": "2203040"
  },
  {
    "text": "CHARLES LEISERSON: Upfront,\nthere's an order R cost, but the order R cost is dominated\nby the n log R, so we don't",
    "start": "2203040",
    "end": "2211520"
  },
  {
    "text": "have to count that separately. We just have to worry\nabout this guy. ",
    "start": "2211520",
    "end": "2219380"
  },
  {
    "text": "So as I go through here, I\nbasically end up having a tree",
    "start": "2219380",
    "end": "2225240"
  },
  {
    "text": "which is only log base R of n\ntall, because I'm dividing things into R pieces\neach time, rather",
    "start": "2225240",
    "end": "2233440"
  },
  {
    "text": "than into two pieces. So I only go log base R steps\ntill I get to the base case.",
    "start": "2233440",
    "end": "2240030"
  },
  {
    "text": "But I'm doing an R-way merge,\nso the number of leaves is still n. ",
    "start": "2240030",
    "end": "2246390"
  },
  {
    "text": "But now when I add across here,\nI get n times log R, and I go across here, I get n times\nlog R, because I got R",
    "start": "2246390",
    "end": "2253940"
  },
  {
    "text": "copies of the same thing. Now I've got R squared times\nn over R squared log R, and so forth.",
    "start": "2253940",
    "end": "2260150"
  },
  {
    "text": "And so at every level, I have\nn log R. So I have n log R times the number of levels here,\nwhich is log base R of",
    "start": "2260150",
    "end": "2268550"
  },
  {
    "text": "n, plus the order n work at\nthe bottom, which we can ignore because it's going\nto be dominated.",
    "start": "2268550",
    "end": "2275060"
  },
  {
    "text": "And so what you notice here is,\nwhat's log base R of n? That's just log n over log R.\nSo the log Rs cancel, and I",
    "start": "2275060",
    "end": "2283490"
  },
  {
    "text": "get n log n plus n, which\nis just n log n.",
    "start": "2283490",
    "end": "2288570"
  },
  {
    "start": "2287000",
    "end": "2590000"
  },
  {
    "text": "So after all that work, we still\ndo the same amount of work, whether I do binary\nmerging or R-way merging, the",
    "start": "2288570",
    "end": "2295760"
  },
  {
    "text": "work is the same. But there's kind of\na big difference",
    "start": "2295760",
    "end": "2301599"
  },
  {
    "text": "when it comes to caching.",
    "start": "2301600",
    "end": "2307260"
  },
  {
    "text": "So it's the same work as\nbinary merge sort. So let's take a look\nat the caching.",
    "start": "2307260",
    "end": "2313980"
  },
  {
    "text": "So let's assume that my\ntournament fits in the cache.",
    "start": "2313980",
    "end": "2320390"
  },
  {
    "text": "So I want to make sure that R is\nless than m over B for some",
    "start": "2320390",
    "end": "2326670"
  },
  {
    "text": "constant R. So when I do\nconstant way, when I consider the R-way merging of contiguous\narrays of total",
    "start": "2326670",
    "end": "2333320"
  },
  {
    "text": "size n, the entire tournament\nplus 1 block from each array can fit in cache.",
    "start": "2333320",
    "end": "2340089"
  },
  {
    "text": "So the tournament is never going\nto be responsible for generating cache misses, because\nI'm going to leave the",
    "start": "2340090",
    "end": "2348440"
  },
  {
    "text": "tournament in memory. So if I'm the optimal algorithm,\nit's going to say,",
    "start": "2348440",
    "end": "2355470"
  },
  {
    "text": "let's just leave the tournament\nin memory and bring in all the other things as\nwe do the operation.",
    "start": "2355470",
    "end": "2363200"
  },
  {
    "text": "Question? AUDIENCE: [INAUDIBLE] CHARLES LEISERSON: Those circles\nthat I had, the tree. AUDIENCE: Is that a cumulative\nlist of the elements that",
    "start": "2363200",
    "end": "2371154"
  },
  {
    "text": "you've merged in already? ",
    "start": "2371154",
    "end": "2376460"
  },
  {
    "text": "CHARLES LEISERSON: I'm sorry. Is the-- AUDIENCE: Is it a cumulative\nlist of the length arrays that",
    "start": "2376460",
    "end": "2384363"
  },
  {
    "text": "you've merged already? CHARLES LEISERSON: No, no, no. You haven't merged them. Let's just go back\nand make sure we understand the algorithm. The algorithm says that what we\ndo is we compare the head",
    "start": "2384363",
    "end": "2395000"
  },
  {
    "text": "of this pair and we produce a\nsingle value here, for which",
    "start": "2395000",
    "end": "2401240"
  },
  {
    "text": "whatever is-- because\nthese are already sorted to do the merge. These are already sorted.",
    "start": "2401240",
    "end": "2406779"
  },
  {
    "text": "So I just have the minimum of\nthese two here, and the minimum of these two here,\nand the minimum of all",
    "start": "2406780",
    "end": "2412020"
  },
  {
    "text": "four of them here. So it's repeated. When we get to the top, we have\nnow the minimum of all of",
    "start": "2412020",
    "end": "2419500"
  },
  {
    "text": "these guys, and that's the guy\nthat's the minimum overall, we put him in the output array. And now we walk back down the\npath that he came from, and",
    "start": "2419500",
    "end": "2429559"
  },
  {
    "text": "what we do is we say, oh, this\nguy had a-- let's walk down the path, let's say we\nget to this guy.",
    "start": "2429560",
    "end": "2437680"
  },
  {
    "text": "Let's advance the pointer\nin here and bring out another element. And now we play off the\ntournament here, play off the",
    "start": "2437680",
    "end": "2445180"
  },
  {
    "text": "guy here, and he advances, and\nhe advances, whatever. And now some other path\nmay be the minimum.",
    "start": "2445180",
    "end": "2450585"
  },
  {
    "text": "But it only took\nme log n work. I'm only keeping copies of the\nelement, if you will, or the",
    "start": "2450585",
    "end": "2456740"
  },
  {
    "text": "results of the comparisons along\nthis in the tree here.",
    "start": "2456740",
    "end": "2461800"
  },
  {
    "text": " And that tree, we're saying,\nfits in the cache, plus 1",
    "start": "2461800",
    "end": "2467440"
  },
  {
    "text": "block, the first block. Whatever cache block fits in\neach of these arrays, no",
    "start": "2467440",
    "end": "2472660"
  },
  {
    "text": "matter how much we've gone\ndown, one of those is fitting in memory.",
    "start": "2472660",
    "end": "2478260"
  },
  {
    "text": "So then what happens here is the\nentire tournament plus one",
    "start": "2478260",
    "end": "2483450"
  },
  {
    "text": "block from each memory can fit\nin cache, and so therefore the number of cache misses that I'm\ngoing to have when I do",
    "start": "2483450",
    "end": "2491950"
  },
  {
    "text": "the merge it's just essentially\nthe time to take faults on that one cache block\nwhenever I exceed it in each",
    "start": "2491950",
    "end": "2500630"
  },
  {
    "text": "array, plus the one for the\noutput that's similar. And so the total number of cache\nmisses that I'm going to",
    "start": "2500630",
    "end": "2508060"
  },
  {
    "text": "have is going to be n over B,\nbecause I'm just striding straight through memory, and\nthat tournament, I don't have",
    "start": "2508060",
    "end": "2517880"
  },
  {
    "text": "to worry about, because\nit's sitting in cache. And there's enough sitting in\ncache that all the other stuff, I can just keep one block\nfrom each of them in",
    "start": "2517880",
    "end": "2525349"
  },
  {
    "text": "memory and still expect\nto get it. In fact, you need the tall cache\nassumption to assume",
    "start": "2525350",
    "end": "2534130"
  },
  {
    "text": "that they all fit in memory. So therefore, the R-way merge\nsort is then, if it's",
    "start": "2534130",
    "end": "2540880"
  },
  {
    "text": "sufficiently small, once again,\nwe have the case that it fits in memory so I only have\nthe cold misses to get there, n over B, if\nn is less than cm.",
    "start": "2540880",
    "end": "2549120"
  },
  {
    "text": "And otherwise, it's R copies of\nthe number of cache misses for n over R, plus n over B.\nBecause this is what it took",
    "start": "2549120",
    "end": "2562220"
  },
  {
    "text": "us here to do the merge. We get only n over B faults when\nwe merge, as long as the",
    "start": "2562220",
    "end": "2568400"
  },
  {
    "text": "tournament fits in cache. If the tournament doesn't fit\nin cache, it's a more complicated analysis.",
    "start": "2568400",
    "end": "2574626"
  },
  {
    "text": "AUDIENCE: --n over B,\nthat's cold misses. You're getting the stuff--",
    "start": "2574626",
    "end": "2580839"
  },
  {
    "text": "CHARLES LEISERSON: Yeah,\nbasically, it's the cold misses on the data,\nyes, basically.",
    "start": "2580840",
    "end": "2585910"
  },
  {
    "start": "2585910",
    "end": "2591200"
  },
  {
    "start": "2590000",
    "end": "2799000"
  },
  {
    "text": "Good. So now, let's do the recursion\ntree for this.",
    "start": "2591200",
    "end": "2596230"
  },
  {
    "text": "So we basically have n over B\nthat we're going to pay at every level, dividing by R, et\ncetera, down to the point",
    "start": "2596230",
    "end": "2604780"
  },
  {
    "text": "where things fit in cache. ",
    "start": "2604780",
    "end": "2610290"
  },
  {
    "text": "And by the time it fits in\ncache, it's going to be m over B, because n will be\napproximately m, just as we",
    "start": "2610290",
    "end": "2615890"
  },
  {
    "text": "had before when we were\ndoing the binary case. As soon as the subarray\ncompletely fits in memory, I",
    "start": "2615890",
    "end": "2621799"
  },
  {
    "text": "don't have to when I'm\ndoing the sorting. So this is now analyzing not the\nmerging, this is analyzing the sorting now.",
    "start": "2621800",
    "end": "2629359"
  },
  {
    "text": "This is the sorting,\nnot the merging.  So we get down to m over B, and\nI've gone now log base R,",
    "start": "2629360",
    "end": "2638930"
  },
  {
    "text": "not log base 2 as we\ndid before, but log base R n over cm.",
    "start": "2638930",
    "end": "2645010"
  },
  {
    "text": "The number of leaves is n over\ncm, and so when I multiply this out, I get the same n over\nB here, and I've got n",
    "start": "2645010",
    "end": "2651330"
  },
  {
    "text": "over B at every level here.  So where's the win?",
    "start": "2651330",
    "end": "2657059"
  },
  {
    "text": "The win is that I have only\nlog base R of n over cm, rather than log base 2 levels\nin the tree, because the",
    "start": "2657060",
    "end": "2666040"
  },
  {
    "text": "amount that every level\ncost me was the same, asymptotically. ",
    "start": "2666040",
    "end": "2673710"
  },
  {
    "text": "So when I add it up, I get n\nover B log base R of n over m, instead of n over B log\nbase 2 of n over m.",
    "start": "2673710",
    "end": "2680600"
  },
  {
    "text": "So how do we tune R?  Well if we just look at this\nformula here, if I want to",
    "start": "2680600",
    "end": "2689460"
  },
  {
    "text": "tune R, what should I\ndo to R to make this be as small as possible? ",
    "start": "2689460",
    "end": "2695100"
  },
  {
    "text": "Make it as big as possible. But I had to assume that R was\nless than some constant times",
    "start": "2695100",
    "end": "2701360"
  },
  {
    "text": "m so that it fits in cache. So that's, in fact, what I do,\nis I say R is m over B. So it",
    "start": "2701360",
    "end": "2712849"
  },
  {
    "text": "fits in cache, we have at least\none block for each thing",
    "start": "2712850",
    "end": "2717890"
  },
  {
    "text": "that we're merging. And then when we do the analysis\nnow, I take log base m over B here, and that's\ncompared to the binary one,",
    "start": "2717890",
    "end": "2727210"
  },
  {
    "text": "which was log base 2, which is\na factor of-- because this is just log 2 over log base--",
    "start": "2727210",
    "end": "2734109"
  },
  {
    "text": "of log of m over B savings\nin cache misses. Now, is that a significant\nnumber?",
    "start": "2734110",
    "end": "2739700"
  },
  {
    "text": "Let's take a look. So if your l one cache is 32\nkilobytes, and we have cache",
    "start": "2739700",
    "end": "2757830"
  },
  {
    "text": "lines of 64 bytes, that is\nbasically the difference in the exponents, 9x savings.",
    "start": "2757830",
    "end": "2764420"
  },
  {
    "text": "For l two cache, we get\nabout a 12x savings. For l three, we get about\na 17x savings.",
    "start": "2764420",
    "end": "2769430"
  },
  {
    "text": "Now of course, there are some\nother constants going on in here, so you can't be absolutely\nsure that it's exactly these numbers, but it's\ngoing to be proportional",
    "start": "2769430",
    "end": "2777320"
  },
  {
    "text": "to these numbers. So that's pretty good savings\nto do multi-way merging.",
    "start": "2777320",
    "end": "2784750"
  },
  {
    "text": "So generally when you merge,\ndon't merge pairs. Not a very good way of doing\nit if you want to take good",
    "start": "2784750",
    "end": "2790270"
  },
  {
    "text": "advantage of cache. May give you some ideas for how\nto improve some sorts that",
    "start": "2790270",
    "end": "2796680"
  },
  {
    "text": "you might have looked at.  Now it turns out that there's\na cache oblivious sorting",
    "start": "2796680",
    "end": "2803829"
  },
  {
    "start": "2799000",
    "end": "2992000"
  },
  {
    "text": "algorithm, where you don't\nactually have-- that was a cache aware algorithm\nthat knew the size",
    "start": "2803830",
    "end": "2810360"
  },
  {
    "text": "of the cache, and we tune\nR to get there. There is an algorithm called\nfunnelsort, which is based on",
    "start": "2810360",
    "end": "2817630"
  },
  {
    "text": "recursively sorting and\nn to the 1/3 groups of n to the 2/3 items.",
    "start": "2817630",
    "end": "2823200"
  },
  {
    "text": "And then you merge the sorted\ngroups with a merging process called an n to the 1/3 funnel.",
    "start": "2823200",
    "end": "2828780"
  },
  {
    "text": " So this is more for fun,\nalthough the sorting",
    "start": "2828780",
    "end": "2835230"
  },
  {
    "text": "algorithm, in my experience,\nfrom what others have told me",
    "start": "2835230",
    "end": "2840710"
  },
  {
    "text": "about implementing it and so\nforth, is probably about 30% slower than the best hand-tuned\nalgorithm.",
    "start": "2840710",
    "end": "2847750"
  },
  {
    "text": "Whereas with matrix\nmultiplication, the cache oblivious algorithms are as\ngood as any cache aware",
    "start": "2847750",
    "end": "2853450"
  },
  {
    "text": "algorithm as a practical matter,\nhere, they're off by about 20% or 30%.",
    "start": "2853450",
    "end": "2859660"
  },
  {
    "text": "So interesting research topic\nis build one of these things and make it really efficient\nso that it can compete with",
    "start": "2859660",
    "end": "2865980"
  },
  {
    "text": "real sorts. So the k funnel merges k cubed\nitems in k sorted lists,",
    "start": "2865980",
    "end": "2871890"
  },
  {
    "text": "incurring this many\ncache funnels. Here, I did put in the one, for\npeople who are concerned",
    "start": "2871890",
    "end": "2878090"
  },
  {
    "text": "about the ones. And so then, you get this\nrecurrence for the cache",
    "start": "2878090",
    "end": "2884400"
  },
  {
    "text": "misses, because you solve n to\nthe 1/3 problems of size n to the 2/3 recursively, plus\nthis amount for merging.",
    "start": "2884400",
    "end": "2893900"
  },
  {
    "text": "And that ends up giving you this\nbound, which turns out to be asymptotically optimal. ",
    "start": "2893900",
    "end": "2900740"
  },
  {
    "text": "And the way it works is there's\nbasically, a k funnel is constructed recursively.",
    "start": "2900740",
    "end": "2907520"
  },
  {
    "text": "And the idea is that what we\nhave is, we have recursive k funnels, so this is going to be\na merging process, that is",
    "start": "2907520",
    "end": "2916570"
  },
  {
    "text": "going to produce k cubed items\nby having k to the 3/2 buffers",
    "start": "2916570",
    "end": "2929400"
  },
  {
    "text": "that each are taking the square\nroot of k guys and producing k guys out.",
    "start": "2929400",
    "end": "2936049"
  },
  {
    "text": "So each of these guys is going\nto produce k, and the square root of k of them for a total\nof k to the 3/2, but each of",
    "start": "2936050",
    "end": "2944000"
  },
  {
    "text": "these is going to be length\nsquare root of k, so we end up with k cubed.",
    "start": "2944000",
    "end": "2949260"
  },
  {
    "text": "and And they basically feed each\nother, and then they get merged with their own k thing,\nand each of these then",
    "start": "2949260",
    "end": "2957330"
  },
  {
    "text": "recursively is constructed\nthe same way.  And the basic idea is that you\nkeep filling the buffers, I",
    "start": "2957330",
    "end": "2964930"
  },
  {
    "text": "think I say this here, so that\nall these buffers end up being in contiguous storage.",
    "start": "2964930",
    "end": "2970050"
  },
  {
    "text": "And the idea is, rather than\ngoing and just getting one element out as you do in a\ntypical tournament, as long as",
    "start": "2970050",
    "end": "2977660"
  },
  {
    "text": "you're going to go merge, let's\nmerge a lot of stuff and put it into our buffer\nso we don't have to",
    "start": "2977660",
    "end": "2983390"
  },
  {
    "text": "go back here again. So you sort of batch your\nmerging in local regions, and",
    "start": "2983390",
    "end": "2988880"
  },
  {
    "text": "that ends up using the\ncache efficiently in the local regions. ",
    "start": "2988880",
    "end": "2994960"
  },
  {
    "start": "2992000",
    "end": "3477000"
  },
  {
    "text": "Enough of sorting. Let's go on to physics.",
    "start": "2994960",
    "end": "3001280"
  },
  {
    "text": "So many of you are probably\nstudying in your linear algebra class or elsewhere,\nthe heat equation.",
    "start": "3001280",
    "end": "3007630"
  },
  {
    "text": "So, people familiar with\nheat diffusion? So it's a common one to\ndo, and these were--",
    "start": "3007630",
    "end": "3014680"
  },
  {
    "text": "I have a former student,\nMatteo Frigo, who is a brilliant coder on anything\ncache oblivious.",
    "start": "3014680",
    "end": "3024750"
  },
  {
    "text": "He's got the best\ncode out there. ",
    "start": "3024750",
    "end": "3030680"
  },
  {
    "text": "So the 2D heat equation, what we\ndo is let's let u(t, x, y) be the temperature at time\nt at point (x, y).",
    "start": "3030680",
    "end": "3039730"
  },
  {
    "text": "And now you can go through the\nphysics and come up with an equation that looks like this,\nwhich says that basically the",
    "start": "3039730",
    "end": "3046210"
  },
  {
    "text": "partial of u with respect to t\nis proportional to the sum of the second partials with\nrespect to x and",
    "start": "3046210",
    "end": "3055240"
  },
  {
    "text": "with respect to y. So basically what that says is,\nthe hotter the difference",
    "start": "3055240",
    "end": "3061380"
  },
  {
    "text": "between two things, the quicker\nthings are going to adjust, the quicker\nthe temperature",
    "start": "3061380",
    "end": "3067890"
  },
  {
    "text": "moves between them. And alpha is the thermal\ndiffusivity, which has--",
    "start": "3067890",
    "end": "3074220"
  },
  {
    "text": "different materials have\ndifferent thermal diffusivities.",
    "start": "3074220",
    "end": "3080840"
  },
  {
    "text": "Say that three times fast. So if we do a simulation, we\ncan end up with heats, say,",
    "start": "3080840",
    "end": "3091520"
  },
  {
    "text": "put like this, and after\nit looks like this. See if we can get this\nrunning here.",
    "start": "3091520",
    "end": "3097170"
  },
  {
    "text": "So now, let me see. ",
    "start": "3097170",
    "end": "3105500"
  },
  {
    "text": "So I can move my cursor around\nand make things.",
    "start": "3105500",
    "end": "3111940"
  },
  {
    "text": "You can just sort of see\nthat it simulates. You can see the simulation\nis actually pretty slow.",
    "start": "3111940",
    "end": "3117280"
  },
  {
    "text": "Now, on my slide, I have a\nthing here that says-- let's see if this breaks\nwhen we do it again.",
    "start": "3117280",
    "end": "3124920"
  },
  {
    "text": "There we go.  So we're getting around 100\nframes per minute in doing",
    "start": "3124920",
    "end": "3133220"
  },
  {
    "text": "this simulation.  And so how does this\nsimulation work?",
    "start": "3133220",
    "end": "3141120"
  },
  {
    "text": "So let's take a look at that. It's kind of a neat problem.",
    "start": "3141120",
    "end": "3147039"
  },
  {
    "text": "So this is what happened\nwhen I did 6.172 for a little while. It basically gave me that after\na while, because it just",
    "start": "3147040",
    "end": "3154510"
  },
  {
    "text": "sort of averages things,\nsmears it out. So what's going on? Let's look at it in one\ndimension, because it's easier",
    "start": "3154510",
    "end": "3160700"
  },
  {
    "text": "to understand than if we\ntake on two dimensions. So assuming that we have,\nsay, a bar which has no",
    "start": "3160700",
    "end": "3168940"
  },
  {
    "text": "differential in this direction, only in this direction. So then we get to drop the\npartials with respect to y.",
    "start": "3168940",
    "end": "3178420"
  },
  {
    "text": "So if I take a look at that,\nwhat I can do is what's called a finite difference approximation, which you probably--",
    "start": "3178420",
    "end": "3183870"
  },
  {
    "text": "who's studied finite\ndifferences? So a few people. It's OK if you haven't.",
    "start": "3183870",
    "end": "3190080"
  },
  {
    "text": "That's OK if you haven't, I'll\nteach it to you now. And then you're free to forget\nit, because that's not the",
    "start": "3190080",
    "end": "3195530"
  },
  {
    "text": "part that I want you to\nunderstand, but it is interesting. So what I can do is look at the\npartial, for example, with",
    "start": "3195530",
    "end": "3202660"
  },
  {
    "text": "respect to t, and just do an\napproximation the says, well, let me perturb t\na little bit--",
    "start": "3202660",
    "end": "3209119"
  },
  {
    "text": "that's what it means. So I add delta t minus u of t\ndivided by t plus delta t",
    "start": "3209120",
    "end": "3218040"
  },
  {
    "text": "minus t, which gives\nme delta t. And I can use that as an approximation for this partial.",
    "start": "3218040",
    "end": "3224350"
  },
  {
    "text": " Then on the right hand side--\nwell first of all, let me get",
    "start": "3224350",
    "end": "3230089"
  },
  {
    "text": "the first derivative\nwith respect to x. And basically here what I'll do\nis I'll do an approximation",
    "start": "3230090",
    "end": "3235470"
  },
  {
    "text": "where I take x plus delta x over\n2 minus x minus delta x",
    "start": "3235470",
    "end": "3240740"
  },
  {
    "text": "over 2, and once again, the\ndifferences in the terms there ends up being delta x.",
    "start": "3240740",
    "end": "3247100"
  },
  {
    "text": "And now I use that to\ntake the next one. So basically, to take this\none, I basically take the",
    "start": "3247100",
    "end": "3254540"
  },
  {
    "text": "partial with respect to delta\nx over 2, minus the partial",
    "start": "3254540",
    "end": "3259600"
  },
  {
    "text": "with x minus delta x over 2, and\ntake the partial of that, do the approximation.",
    "start": "3259600",
    "end": "3265849"
  },
  {
    "text": "And what happens is, if you\nlook at it, when I take a partial here I'm adding delta\nx over 2 twice, so I end up",
    "start": "3265850",
    "end": "3274920"
  },
  {
    "text": "getting just a delta x here,\nand then the two things on either side combined give me my\noriginal one, 2 times u(t,",
    "start": "3274920",
    "end": "3281829"
  },
  {
    "text": "x), and then another one here,\nand now the whole thing over delta x squared.",
    "start": "3281830",
    "end": "3288900"
  },
  {
    "text": "And so what I can do is to\nreduce this heat equation, which is continuous, to\nsomething that we can handle",
    "start": "3288900",
    "end": "3295670"
  },
  {
    "text": "in a computer, which is\ndiscrete, by saying OK, let's just do this approximation that\nsays that this term must",
    "start": "3295670",
    "end": "3303090"
  },
  {
    "text": "be equal to that term. And if you've studied the linear\nalgebra that said that",
    "start": "3303090",
    "end": "3308326"
  },
  {
    "text": "there are all kinds of\nconditions on convergence, and stability, and stuff like that,\nthat are actually quite",
    "start": "3308326",
    "end": "3313690"
  },
  {
    "text": "interesting from a numerical\npoint of view, but we're not going to get into it. But basically, I've just taken\nthat equation here and said,",
    "start": "3313690",
    "end": "3320550"
  },
  {
    "text": "OK, that's my approximation\nfor this one. And now what do I have here? I've got u of t plus delta t,\nand u things u of t, and then",
    "start": "3320550",
    "end": "3331640"
  },
  {
    "text": "over here, they're all with t,\nbut now the deltas are in--",
    "start": "3331640",
    "end": "3336970"
  },
  {
    "text": "whoops, that should have\nbeen a delta x there. I don't know how\nthat got there. That should be a\ndelta x there.",
    "start": "3336970",
    "end": "3343370"
  },
  {
    "text": "They're all in spatial\nover here. ",
    "start": "3343370",
    "end": "3348520"
  },
  {
    "text": "So what I can do is take this,\nand do an iterative process to",
    "start": "3348520",
    "end": "3356820"
  },
  {
    "text": "compute this. And so the idea is, let me take\nthis and throw this term",
    "start": "3356820",
    "end": "3364170"
  },
  {
    "text": "onto the right hand side, and\nlook at u of t plus delta t as if it's t plus 1.",
    "start": "3364170",
    "end": "3369770"
  },
  {
    "text": "Let me make my delta be\none, essentially. Throw the delta t over here\ntimes the alpha over delta x1,",
    "start": "3369770",
    "end": "3379730"
  },
  {
    "text": "and then I get basically u of\ntx is based on u of t of x plus 1 and of x and x minus 1.",
    "start": "3379730",
    "end": "3387640"
  },
  {
    "text": "As I say, there's a typo here. That should be a delta t.",
    "start": "3387640",
    "end": "3393080"
  },
  {
    "text": "So what that says is that if I\nlook at my one-dimensional process proceeding through\ntime, what I'm doing is",
    "start": "3393080",
    "end": "3400410"
  },
  {
    "text": "updating every point here based\non the three points below it, diagonally\nto the right, and",
    "start": "3400410",
    "end": "3408840"
  },
  {
    "text": "diagonally to the left. So this guy can be updated\nbecause of those.",
    "start": "3408840",
    "end": "3414640"
  },
  {
    "text": "These we're not going update,\nbecause they're the boundary. So these can be fixed.",
    "start": "3414640",
    "end": "3419809"
  },
  {
    "text": "In a periodic stencil,\nthey may even wrap around like a torus.",
    "start": "3419810",
    "end": "3425660"
  },
  {
    "text": "So basically, I can go through\nand update all these with whatever that hairy\nequation is.",
    "start": "3425660",
    "end": "3431190"
  },
  {
    "text": "And this is basically what\nthe code is that I showed you is doing. ",
    "start": "3431190",
    "end": "3437130"
  },
  {
    "text": "It just keeps updating everyone\nbased on three until I've gone through a bunch of\ntime, and that's how the",
    "start": "3437130",
    "end": "3445160"
  },
  {
    "text": "system evolves. ",
    "start": "3445160",
    "end": "3451329"
  },
  {
    "text": "So any questions about\nhow I got to here?",
    "start": "3451330",
    "end": "3457080"
  },
  {
    "text": "So we're going to now\nlook at this purely computer sciencey now. We don't have to understand\nany of those equations.",
    "start": "3457080",
    "end": "3462970"
  },
  {
    "text": "We just have to understand\nthe structure. The structure is that we're\nupdating t plus 1 based on",
    "start": "3462970",
    "end": "3467980"
  },
  {
    "text": "stuff on three points with\nsome function that some physicist oracle gave\nus out of the blue.",
    "start": "3467980",
    "end": "3478530"
  },
  {
    "start": "3477000",
    "end": "3599000"
  },
  {
    "text": "And so here is a pretty simple\nalgorithm to do it. I basically have what's called\nthe kernel, which does this",
    "start": "3478530",
    "end": "3485750"
  },
  {
    "text": "updating, basically updating\neach one based on things.",
    "start": "3485750",
    "end": "3491200"
  },
  {
    "text": "And what I'm going to do for\ncomputer science is I don't need to keep all the\nintermediate values.",
    "start": "3491200",
    "end": "3497400"
  },
  {
    "text": "And so what I'm going\nto do is do what's called an even-odd trick. Basically if I have one row,\nI compute the next row into",
    "start": "3497400",
    "end": "3504870"
  },
  {
    "text": "another array, and then I'll\nreuse that first array-- it's all been used up--",
    "start": "3504870",
    "end": "3510770"
  },
  {
    "text": "and go back to the first one. So basically here, I'm just\ngoing to update t plus 1 mod",
    "start": "3510770",
    "end": "3516410"
  },
  {
    "text": "2, and just allocate two arrays\nof size n, and just do",
    "start": "3516410",
    "end": "3523549"
  },
  {
    "text": "modding all the way up. Is that clear?",
    "start": "3523550",
    "end": "3528760"
  },
  {
    "text": "And other than that, it's\nbasically doing the same thing, and I'm doing a little\nbit of fancy arithmetic here by passing--",
    "start": "3528760",
    "end": "3534910"
  },
  {
    "text": "see stuff, where I'm passing the\npointer to where I am in the array, so I only\nhave to update it",
    "start": "3534910",
    "end": "3542010"
  },
  {
    "text": "locally within the array. So I don't have to double\nindexing once I'm in the array, because I'm already\nindexed into the part of the",
    "start": "3542010",
    "end": "3549530"
  },
  {
    "text": "array that I'm going to use, and\nthen I am doing flipping. So this is just a little\nbit of cleverness. You might want to study\nthis later.",
    "start": "3549530",
    "end": "3557330"
  },
  {
    "text": "So what's happening then is I\nhave this double nested loop where I have a time loop on the\noutside, and a space loop",
    "start": "3557330",
    "end": "3563260"
  },
  {
    "text": "on the inside, and I'm basically\ngoing through and using a stencil of this shape,\nthis is called a three point",
    "start": "3563260",
    "end": "3570270"
  },
  {
    "text": "stencil, because you're\nbasically taking three points to update one point.",
    "start": "3570270",
    "end": "3576569"
  },
  {
    "text": "And now if I imagine that this\ndimension is bigger, n here is",
    "start": "3576570",
    "end": "3581950"
  },
  {
    "text": "bigger than my cache size,\nwhat's going to happen? I'm going to take a cache fault\nhere, these are all cold",
    "start": "3581950",
    "end": "3588840"
  },
  {
    "text": "misses, et cetera. But when I get back to the\nbeginning here, if I use LRU,",
    "start": "3588840",
    "end": "3595760"
  },
  {
    "text": "nothing is going to be in memory\nthat I happened to update over here. So I have to go and I\ntake a cache fault",
    "start": "3595760",
    "end": "3601579"
  },
  {
    "text": "on every cache line. And so if I'm going t steps into\nthe future from where I",
    "start": "3601580",
    "end": "3610810"
  },
  {
    "text": "started, I basically have n\ntimes t updates, and I save a factor of B, because I get the\nspatial locality because the u",
    "start": "3610810",
    "end": "3620935"
  },
  {
    "text": "of t minus 1, u of t, and u of t\nplus 1, are all generally on the same-- are nearby, and all\nwithin one cache line.",
    "start": "3620935",
    "end": "3630500"
  },
  {
    "text": "Question? AUDIENCE: The x's, what\nare the x's for? ",
    "start": "3630500",
    "end": "3636660"
  },
  {
    "text": "CHARLES LEISERSON: Sorry. I should have put the\nlegend on here. The x's are a miss. So I do a miss when I update\nthese, and then these I don't",
    "start": "3636660",
    "end": "3644030"
  },
  {
    "text": "miss on, because it\nwas brought in when I accessed that. And then I do a miss,\nand I'll do it--",
    "start": "3644030",
    "end": "3652109"
  },
  {
    "text": "so basically I do it, then I\nshift over the stencil by one, and then I won't get a miss.",
    "start": "3652110",
    "end": "3658440"
  },
  {
    "text": "So I'm just looking at the\nmisses on the reads, not misses on the writes. I should have made\nthat clear, too.",
    "start": "3658440",
    "end": "3665500"
  },
  {
    "text": "But the point is, the writes\ndon't help you, because it's all out of memory by the\ntime I get up here.",
    "start": "3665500",
    "end": "3671320"
  },
  {
    "text": "To the second row, if this is\nlonger than my cache size, none of that's there\nif I'm using LRU.",
    "start": "3671320",
    "end": "3677220"
  },
  {
    "text": " AUDIENCE: You have also a miss,\nlike you need to get two",
    "start": "3677220",
    "end": "3684213"
  },
  {
    "text": "[INAUDIBLE]. CHARLES LEISERSON: Yeah, but\nwhat I'm saying is I'm only looking at the read misses.",
    "start": "3684214",
    "end": "3690270"
  },
  {
    "text": "Yes, there are write misses as\nwell, but basically, I'm only doing the read misses. You can look at the write\nmisses as well.",
    "start": "3690270",
    "end": "3695900"
  },
  {
    "text": "It makes the picture messier.  So we've basically\nhave nt over b.",
    "start": "3695900",
    "end": "3702670"
  },
  {
    "text": "However this, let me tell\nyou, is the way that everybody codes it. ",
    "start": "3702670",
    "end": "3708530"
  },
  {
    "text": "and And if you have a machine\nwhere you have any bandwidth issues to memory, especially for\nthese large problems, this",
    "start": "3708530",
    "end": "3715010"
  },
  {
    "text": "is not a very good way to\ndo it, as it turns out. So it turns out that what you\nwant to do is, as we've seen,",
    "start": "3715010",
    "end": "3722030"
  },
  {
    "text": "divide and conquer is a really\ngood way to do it. But in this case, when we're\ndoing divide and conquer,",
    "start": "3722030",
    "end": "3728970"
  },
  {
    "text": "we're actually not going to use\nrectangles, we're going to",
    "start": "3728970",
    "end": "3733980"
  },
  {
    "text": "use trapezoids.  And the reason is that a\ntrapezoid has the nice",
    "start": "3733980",
    "end": "3739920"
  },
  {
    "text": "property that-- notice that if I have all these\npoints in memory, then",
    "start": "3739920",
    "end": "3747100"
  },
  {
    "text": "notice that I can compute all\nthe guys that are read on the next level, and then I can\ncompute all the guys that are",
    "start": "3747100",
    "end": "3753530"
  },
  {
    "text": "next on the next level. And so for example, if you\nimagine that this part here fit within cache, I could\nactually keep going.",
    "start": "3753530",
    "end": "3761380"
  },
  {
    "text": "I didn't have to stop here, I\ncould keep going right up to a triangle if I wanted to, and\ncompute all the values without",
    "start": "3761380",
    "end": "3768480"
  },
  {
    "text": "having any more cache misses\nthan those needed to bring in, essentially, one row-- two rows, actually, because\nI'm reusing the",
    "start": "3768480",
    "end": "3777390"
  },
  {
    "text": "rows as I go up. So what we're going to do is\ntraverse trapezoidal regions",
    "start": "3777390",
    "end": "3782490"
  },
  {
    "text": "of space-time points such that\nthe points are between an",
    "start": "3782490",
    "end": "3787720"
  },
  {
    "text": "upper limit, T1, and a low one,\nT0, and between an x0 and an x1, where now I have slopes\nhere that are going to be, in",
    "start": "3787720",
    "end": "3795330"
  },
  {
    "text": "general, this is\nplus 1 minus 1. And in fact, sometimes it will\nbe straight, in which case",
    "start": "3795330",
    "end": "3802680"
  },
  {
    "text": "we'll call it 0. It's really the inverse of the\nslope, but we'll still call it",
    "start": "3802680",
    "end": "3809760"
  },
  {
    "text": "zero rather than infinity. So it's 1 over the slope. There's a name for\nthat, right?",
    "start": "3809760",
    "end": "3815259"
  },
  {
    "text": "Is that called the\nrun or something? I forget, I don't remember\nmy calculus. ",
    "start": "3815260",
    "end": "3822570"
  },
  {
    "text": "So that's what we're\ngoing to do. And we're going to leave the\nupper and right borders undone",
    "start": "3822570",
    "end": "3829230"
  },
  {
    "text": "and include, so it's going\nto be a sort of half open trapezoid on the left and\nbottom, closed on the left and",
    "start": "3829230",
    "end": "3834960"
  },
  {
    "text": "bottom, and open on\nthe top and right. So the width is basically the\nmidpoint here, and the height",
    "start": "3834960",
    "end": "3843119"
  },
  {
    "text": "is the height, because they're\nalways going to have parallel axes here.",
    "start": "3843120",
    "end": "3849420"
  },
  {
    "text": "So here's how are our recursion\nis going to work. If the height is 1, then we\ncan compute all space-time",
    "start": "3849420",
    "end": "3858390"
  },
  {
    "text": "points in any way we want. I can just go through them if\nI want, because they're all",
    "start": "3858390",
    "end": "3865900"
  },
  {
    "text": "independent. None depends on anybody else. So that's going to\nbe our base case. ",
    "start": "3865900",
    "end": "3873730"
  },
  {
    "text": "If the width is greater than\ntwice the height, however, then what we're going to do\nis we're going to cut the",
    "start": "3873730",
    "end": "3879930"
  },
  {
    "text": "trapezoid through the middle\nof the slope of minus 1.",
    "start": "3879930",
    "end": "3885740"
  },
  {
    "text": " And that will produce two new\ntrapezoids, which we then will",
    "start": "3885740",
    "end": "3891680"
  },
  {
    "text": "recursively compute all\nthe elements of.",
    "start": "3891680",
    "end": "3898936"
  },
  {
    "text": "So I'll start out with\na trapezoid. Basically, if it ends up that\nit's a long and wide one, I'm",
    "start": "3898936",
    "end": "3907000"
  },
  {
    "text": "going to make what's called a\nspace cut, and cut it this way, and then I'm going to\nrecursively do this one and",
    "start": "3907000",
    "end": "3913410"
  },
  {
    "text": "then this one. And notice that I can\ndo that because--",
    "start": "3913410",
    "end": "3918950"
  },
  {
    "text": "all these guys I can do, but\nthen when I get to the border here, this will already have\nbeen done by the time I'm",
    "start": "3918950",
    "end": "3924830"
  },
  {
    "text": "computing these guys.  So the requirement is that\nI've got to do things",
    "start": "3924830",
    "end": "3932510"
  },
  {
    "text": "according to that map of triples\nthat I showed you before, but I don't have to\ndo them in the same order.",
    "start": "3932510",
    "end": "3938750"
  },
  {
    "text": "I don't have to do the whole\nbottom row first. In this case, I can compute the\nwhole trapezoid here, and",
    "start": "3938750",
    "end": "3944820"
  },
  {
    "text": "then I can compute this\ntrapezoid here, and then all the values that I'll need will\nhave already been computed",
    "start": "3944820",
    "end": "3950940"
  },
  {
    "text": "over here, that are on the\nboundary of this trapezoid. The other type of cut I'll\ndo is what happens when a",
    "start": "3950940",
    "end": "3958030"
  },
  {
    "text": "trapezoid gets too\ntall for me. So if the trapezoid is too tall,\nthen what we'll do is",
    "start": "3958030",
    "end": "3964470"
  },
  {
    "text": "we'll slice it through the\nmiddle, but the other way. We call that a time cut. So we won't take it all the way\nthrough time, we'll only",
    "start": "3964470",
    "end": "3971569"
  },
  {
    "text": "take it partially\nthrough time.  Now you can show, and I'm not\ngoing to show this in detail,",
    "start": "3971570",
    "end": "3979000"
  },
  {
    "text": "but you can show that if I do\nthis, my trapezoids are always sort of medium sized. I never get long, long\nskinny ones.",
    "start": "3979000",
    "end": "3986520"
  },
  {
    "text": "If I start with something that's\nsort of got a good aspect ratio, I maintain a good\naspect ratio through the",
    "start": "3986520",
    "end": "3993660"
  },
  {
    "text": "entire code. ",
    "start": "3993660",
    "end": "3998819"
  },
  {
    "text": "So here's the implementation.  This is what Matteo Frigo wrote,\nand I've modified it a",
    "start": "3998820",
    "end": "4008040"
  },
  {
    "text": "little bit. So basically, we pass in it\nthe values that let us identify the trapezoid, t0, t1,\nx0, and then the slope on",
    "start": "4008040",
    "end": "4019320"
  },
  {
    "text": "the left side, x1 in the slope\non the right side, where the",
    "start": "4019320",
    "end": "4024870"
  },
  {
    "text": "dx0 and the dx1s are all either\n0, 1, or minus 1.",
    "start": "4024870",
    "end": "4031290"
  },
  {
    "text": "And then what I do is I look at\nwhat the height is that my trapezoid is going\nto operate on.",
    "start": "4031290",
    "end": "4037760"
  },
  {
    "text": "And if the height is 1, well,\nthen I just run through all",
    "start": "4037760",
    "end": "4042920"
  },
  {
    "text": "the elements, and I just\ncompute the kernel-- that program that I showed\nyou before, that kernel--",
    "start": "4042920",
    "end": "4050050"
  },
  {
    "text": "on all the elements. Nothing really to be done there,\njust go through and compute them individually\nwith a four loop.",
    "start": "4050050",
    "end": "4057900"
  },
  {
    "text": "Otherwise, if I've got the\nsituation where the trapezoid",
    "start": "4057900",
    "end": "4066910"
  },
  {
    "text": "is big, then I do this\ncomparison, which I promise you-- you can work out the\nmath if you wish--",
    "start": "4066910",
    "end": "4073310"
  },
  {
    "text": "which I promise you tells you\nwhether or not it's more than twice the height, as I said\nbefore, whether the width is",
    "start": "4073310",
    "end": "4079570"
  },
  {
    "text": "more than twice the height. And if so, I compute the middle\npoint, and then I",
    "start": "4079570",
    "end": "4087359"
  },
  {
    "text": "partition it into two\ntrapezoids, and I recursively call them.",
    "start": "4087360",
    "end": "4092790"
  },
  {
    "text": "And otherwise, I simply cut the\ntime in half, and then I do the bottom half and\nthen the upper half.",
    "start": "4092790",
    "end": "4100549"
  },
  {
    "text": "So getting all those parameters\nexactly right takes",
    "start": "4100550",
    "end": "4105979"
  },
  {
    "text": "a little bit of thinking,\nmakes my brain hurt, but Matteo is brilliant at\nthis kind of coding.",
    "start": "4105979",
    "end": "4113149"
  },
  {
    "text": " So let's see how\nwell this does.",
    "start": "4113149",
    "end": "4118540"
  },
  {
    "text": "So I'm not going to do a\ndetailed analysis that I did before, but basically what's\ngoing on is at this level, if",
    "start": "4118540",
    "end": "4127318"
  },
  {
    "text": "I'm doing divide and conquering,\nI'm only doing a constant amount of work\nmanaging this stuff.",
    "start": "4127319",
    "end": "4134350"
  },
  {
    "text": "So my caches that I'm taking\nin the internal part of the tree are all going\nto be order one.",
    "start": "4134350",
    "end": "4139839"
  },
  {
    "text": " Now each leaf is going to\nrepresent a trapezoid, which",
    "start": "4139840",
    "end": "4150729"
  },
  {
    "text": "is going to be approximately h\ntimes w, where h and w are",
    "start": "4150729",
    "end": "4155990"
  },
  {
    "text": "approximately equal, because\nthey're going to be shaped-- This is assuming I start out\nwith a number of iterations to",
    "start": "4155990",
    "end": "4162139"
  },
  {
    "text": "do that is at least as large as\nthe number of points that I",
    "start": "4162140",
    "end": "4168720"
  },
  {
    "text": "have to go on. If I start out with something\nthat's really thin and flat, then it's not going\nto be the case.",
    "start": "4168720",
    "end": "4174290"
  },
  {
    "text": "But if I start out with\nsomething that's deep enough, then I'm going to be able\nto make progress in an",
    "start": "4174290",
    "end": "4179950"
  },
  {
    "text": "unconventional order into\ntime by moving the time non-uniformly through\nthe space.",
    "start": "4179950",
    "end": "4186549"
  },
  {
    "text": "So each leaf represents a fairly\nbalanced trapezoid.",
    "start": "4186550",
    "end": "4193339"
  },
  {
    "text": "Each leaf basically\nis going to-- if you look that the direction\nof the trapezoid is in time,",
    "start": "4193340",
    "end": "4203050"
  },
  {
    "text": "so this represents the spatial\ndimension, and if I have something of size w, I\ncan access it with",
    "start": "4203050",
    "end": "4210430"
  },
  {
    "text": "only w over B misses. And when that fits in cache,\nwhere w is some constant less",
    "start": "4210430",
    "end": "4218810"
  },
  {
    "text": "than m, so w is order m. So each of these things that's\na leaf is only going to occur",
    "start": "4218810",
    "end": "4224230"
  },
  {
    "text": "w over B misses. ",
    "start": "4224230",
    "end": "4230080"
  },
  {
    "text": "Now, the total space number\nof points I have to go after is n times t. N is going to be the full\ndimension this way, t is the",
    "start": "4230080",
    "end": "4237610"
  },
  {
    "text": "height that way. And so since each leaf\nhas hw points, I",
    "start": "4237610",
    "end": "4242810"
  },
  {
    "text": "have nt over hw leaves.  And the number of internal nodes\nis just the leaves minus",
    "start": "4242810",
    "end": "4249860"
  },
  {
    "text": "1, so they can't contribute\nsubstantially, because there's only order one misses I'm taking\nhere, whereas I've got",
    "start": "4249860",
    "end": "4257840"
  },
  {
    "text": "something on the order of w\nover B misses for this. So therefore, now I\ncan do my math.",
    "start": "4257840",
    "end": "4265330"
  },
  {
    "text": "The number of cache misses\nI'm going to take is-- well, how many leaves\ndo I have?",
    "start": "4265330",
    "end": "4271300"
  },
  {
    "text": "nt over hw. And what does each\none cost us? W over B.",
    "start": "4271300",
    "end": "4279219"
  },
  {
    "text": "And so now, when I multiply that\nout, well, hw is about m",
    "start": "4279220",
    "end": "4284830"
  },
  {
    "text": "squared, and w over B is about m\nover B. And so I get nt over",
    "start": "4284830",
    "end": "4294540"
  },
  {
    "text": "MB as being the total\nnumber of savings. so whereas the original\nalgorithm only got nt over B,",
    "start": "4294540",
    "end": "4302270"
  },
  {
    "text": "we've got this factor of a\nmemory cache size in there",
    "start": "4302270",
    "end": "4309610"
  },
  {
    "text": "showing us that we have far\nfewer cache misses. So the cache misses end up not\nbeing an issue for this.",
    "start": "4309610",
    "end": "4315640"
  },
  {
    "text": " Any questions about that? ",
    "start": "4315640",
    "end": "4326230"
  },
  {
    "text": "So I want to show you a\nsimulation of this three point",
    "start": "4326230",
    "end": "4331410"
  },
  {
    "text": "stencil and comparing\nthe two things. So this is going to be the\nlooping version, where the red",
    "start": "4331410",
    "end": "4336650"
  },
  {
    "text": "dots are where the cache misses\nare, and this is going to be the trapezoidal one.",
    "start": "4336650",
    "end": "4343590"
  },
  {
    "text": "And basically, I have an n of 95\nand a t of 87, and what I'm going to do is assume a fully\nassociative LRU cache that",
    "start": "4343590",
    "end": "4351440"
  },
  {
    "text": "fits four points on a cache\nline, where the cache size is 32, two to the fifth as opposed\nto two to the 15th,",
    "start": "4351440",
    "end": "4359520"
  },
  {
    "text": "it's really little. If I get a cache hit, I'm going\nto call it one cycle.",
    "start": "4359520",
    "end": "4364910"
  },
  {
    "text": "If I get a cache miss, I'm going\nto call it 10 cycles. We're going to race them. So on the left is the\ncurrent world",
    "start": "4364910",
    "end": "4372840"
  },
  {
    "text": "champion, the looping algorithm. And on the right is the cache\noblivious trapezoid algorithm.",
    "start": "4372840",
    "end": "4379130"
  },
  {
    "text": "So let's go. ",
    "start": "4379130",
    "end": "4387750"
  },
  {
    "text": "So you can see that it's\nbasically, it's made a space cut there, but it's made a time\ncut across the top there.",
    "start": "4387750",
    "end": "4398060"
  },
  {
    "text": "It said, this is too tall, so\nlet me cut it this way. ",
    "start": "4398060",
    "end": "4418460"
  },
  {
    "text": "And that guy's, meanwhile,\ntaking all those-- you can see how many cache misses\nhe's taking. ",
    "start": "4418460",
    "end": "4425850"
  },
  {
    "text": "Let's speed him up. ",
    "start": "4425850",
    "end": "4432770"
  },
  {
    "text": "That's one way you can do\nit, is make it think. ",
    "start": "4432770",
    "end": "4449050"
  },
  {
    "text": "So let's see what happens if I\nhave a cache of size eight. ",
    "start": "4449050",
    "end": "4458020"
  },
  {
    "text": "So here we go. ",
    "start": "4458020",
    "end": "4471320"
  },
  {
    "text": "I think I'm just doing\nthe same thing. I know I can show\nyou the cuts. Can I show you the cuts?",
    "start": "4471320",
    "end": "4477050"
  },
  {
    "text": "I know. I think it's because I'm not-- OK, let's try it. There we go. Now I'm showing the cuts\nas they go on.",
    "start": "4477050",
    "end": "4484700"
  },
  {
    "text": "Let's do that again. We'll go fast and do it again. ",
    "start": "4484700",
    "end": "4498230"
  },
  {
    "text": "So those are the cuts that it's\nmaking to begin with as it's doing the divide\nand conquer. ",
    "start": "4498230",
    "end": "4506449"
  },
  {
    "text": "So I think this is the\nsame size cache. ",
    "start": "4506450",
    "end": "4514099"
  },
  {
    "text": "So now I think I'm doing\na bigger cache. ",
    "start": "4514100",
    "end": "4525010"
  },
  {
    "text": "I think I did a bigger cache,\nbut I'm not sure I gave the other guy a bigger cache. ",
    "start": "4525010",
    "end": "4546790"
  },
  {
    "text": "Yeah, because it doesn't matter\nfor the guy on the left, right? As long as the cache line is the\nsame length and as long as it's not big enough, he's going\nto do the same thing.",
    "start": "4546790",
    "end": "4555910"
  },
  {
    "text": "He didn't get to take advantage\nof the fact that the cache was bigger, because it\nwas still smaller than the array that he's striping\nout there.",
    "start": "4555910",
    "end": "4562050"
  },
  {
    "text": " Anyway, we can play with\nthese all day. ",
    "start": "4562050",
    "end": "4573909"
  },
  {
    "text": "So if you make the cache lines\nbigger, then of course it'll go faster, because he'll\nhave fewer misses.",
    "start": "4573910",
    "end": "4579790"
  },
  {
    "text": "He'll get to bring it in. So let's see here. ",
    "start": "4579790",
    "end": "4585330"
  },
  {
    "text": "So let's now do it for real. So this is a two-dimensional\nproblem.",
    "start": "4585330",
    "end": "4590820"
  },
  {
    "text": "You can use the same thing\nto do what end up being three-dimensional trapezoids.",
    "start": "4590820",
    "end": "4597710"
  },
  {
    "text": "In fact, you can generalize\nthis trapezoid method to multiple dimensions. So this is the looping one.",
    "start": "4597710",
    "end": "4603320"
  },
  {
    "text": "So let's start that one out. ",
    "start": "4603320",
    "end": "4611020"
  },
  {
    "text": "So it's going about 104\nframes a minute. ",
    "start": "4611020",
    "end": "4628469"
  },
  {
    "text": "I think by resizing it, the\ncalibration is off. ",
    "start": "4628470",
    "end": "4635159"
  },
  {
    "text": "But in any case, let's switch to\nthe cash oblivious version. ",
    "start": "4635160",
    "end": "4647840"
  },
  {
    "text": "Anybody notice something?  Slower. ",
    "start": "4647840",
    "end": "4655040"
  },
  {
    "text": "Why is that? ",
    "start": "4655040",
    "end": "4661460"
  },
  {
    "text": "I gave code exactly\nas I had up there.  No, it's not because it's\ntwo dimensions.",
    "start": "4661460",
    "end": "4667640"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. ",
    "start": "4667640",
    "end": "4673090"
  },
  {
    "text": "CHARLES LEISERSON: I'm sorry? [INTERPOSING VOICES] CHARLES LEISERSON: Yeah, so now\nit's the trapezoiding at",
    "start": "4673090",
    "end": "4678505"
  },
  {
    "text": "only 86 frames.  What do you suppose\nis going on there?",
    "start": "4678505",
    "end": "4684150"
  },
  {
    "text": "AUDIENCE: You have\n[INAUDIBLE]. CHARLES LEISERSON: Yeah. ",
    "start": "4684150",
    "end": "4691120"
  },
  {
    "text": "So this is a case where if you\nlook at the code I wrote, I went down to a t, a delta t,\nof one in my recursion.",
    "start": "4691120",
    "end": "4704790"
  },
  {
    "text": " I recursed all the way down. Let's see what happens if\ninstead of going all the way",
    "start": "4704790",
    "end": "4712160"
  },
  {
    "text": "down, playing the trapezoid\ngame on little tiny trapezoids, suppose I go down\nonly to, say, when t is 10,",
    "start": "4712160",
    "end": "4721070"
  },
  {
    "text": "and then do essentially\nthe row major ones. So I'm basically coarsening\nthe leaves of the thing.",
    "start": "4721070",
    "end": "4730920"
  },
  {
    "text": "So to do that, I do this. So now we go-- ah. ",
    "start": "4730920",
    "end": "4740659"
  },
  {
    "text": "So I have to coarsen in\norder to overcome the procedure call overhead. It has nothing to do\nwith the cache.",
    "start": "4740660",
    "end": "4746050"
  },
  {
    "text": "It has to the fact that the\nway that you implement recursion, recursion\nand function calls have a cost to them.",
    "start": "4746050",
    "end": "4751770"
  },
  {
    "text": "And if what you're going to do\nis do a little tiny update of those few floating point\noperations--",
    "start": "4751770",
    "end": "4758860"
  },
  {
    "text": "let's go back to the looping\njust to see. The looping is going\nabout 107, 108, and",
    "start": "4758860",
    "end": "4770540"
  },
  {
    "text": "trapezoiding at 136.",
    "start": "4770540",
    "end": "4777310"
  },
  {
    "text": "So unfortunately, you need a\nvoodoo variable, but it's a voodoo variable not to overcome\nthe cache, but rather",
    "start": "4777310",
    "end": "4782660"
  },
  {
    "text": "to deal with what's the\noverhead in using the processor when you do\nfunction calls.",
    "start": "4782660",
    "end": "4788420"
  },
  {
    "text": "So let's see. How coarse can we make it? Let's try five, a coarsening\nof five?",
    "start": "4788420",
    "end": "4794110"
  },
  {
    "text": " That's still pretty good. ",
    "start": "4794110",
    "end": "4802040"
  },
  {
    "text": "That's still pretty good. How about four? ",
    "start": "4802040",
    "end": "4807940"
  },
  {
    "text": "Still doing 131 frames\na minute. How about three?",
    "start": "4807940",
    "end": "4815080"
  },
  {
    "text": "Oh, we lost something there.  How about two?",
    "start": "4815080",
    "end": "4820790"
  },
  {
    "text": " So at a coarsening of two, I\ngo 138, whereas the looping",
    "start": "4820790",
    "end": "4830070"
  },
  {
    "text": "goes at about the same. I can't do 20. I didn't program that in. I just programmed up to 10.",
    "start": "4830070",
    "end": "4837820"
  },
  {
    "text": "So if I go down to one, however,\nthen you see it's not that efficient.",
    "start": "4837820",
    "end": "4842970"
  },
  {
    "text": "But if I pick any number that's\neven slightly larger, that gives me just enough that\nthe function call overhead",
    "start": "4842970",
    "end": "4850489"
  },
  {
    "text": "ends up not being a substantial cost of the things.",
    "start": "4850490",
    "end": "4857599"
  },
  {
    "text": "So let me just wrap up now. So I just have a couple\nmore things. So I'm not going to really talk\nabout these, but there",
    "start": "4857600",
    "end": "4865750"
  },
  {
    "text": "are lots of cash oblivious\nalgorithms that have been discovered in the last 10 or 15\nyears for doing things like",
    "start": "4865750",
    "end": "4878250"
  },
  {
    "text": "matrix transposition, which is\nsimilar to rotating a matrix.",
    "start": "4878250",
    "end": "4883340"
  },
  {
    "text": "You can do that in a cache\noblivious fashion. Strassen's algorithm, which\ndoes matrix multiplication",
    "start": "4883340",
    "end": "4892270"
  },
  {
    "text": "using fewer than n\ncubed operations. The FFT can be computed in a\ncache oblivious fashion.",
    "start": "4892270",
    "end": "4900440"
  },
  {
    "text": "And LUD composition\nis a popular thing to solve systems.",
    "start": "4900440",
    "end": "4908740"
  },
  {
    "text": "In addition, there are cache\noblivious data structures, and here are just a few of them.",
    "start": "4908740",
    "end": "4913760"
  },
  {
    "text": "There's cache oblivious B-Trees\nand priority queues, and doing things called\nordered-file maintenance.",
    "start": "4913760",
    "end": "4920820"
  },
  {
    "text": "There's a whole raft. There's probably now several\nhundred papers written on cache oblivious algorithms, so\nsomething you should be aware",
    "start": "4920820",
    "end": "4929240"
  },
  {
    "text": "of and understand how it is that\nyou go about designing an algorithm of this nature. Not all of them are\nstraightforward.",
    "start": "4929240",
    "end": "4937290"
  },
  {
    "text": "For example, the FFT one does\ndivide and conquer but not by",
    "start": "4937290",
    "end": "4942910"
  },
  {
    "text": "dividing it into two. It divides it into square root\nof n pieces of size square root of n each in order to get\na good cache efficient",
    "start": "4942910",
    "end": "4951460"
  },
  {
    "text": "algorithm that doesn't have\nany tuning parameters. But almost all of them, since\nthey're recursive, do have",
    "start": "4951460",
    "end": "4958010"
  },
  {
    "text": "this annoying thing that you\nhave to still coarsen the base case in order to get really good\nperformance if you're not",
    "start": "4958010",
    "end": "4965250"
  },
  {
    "text": "doing a lot of work in the\nleaves of the recursion.",
    "start": "4965250",
    "end": "4970600"
  },
  {
    "text": "So any questions? ",
    "start": "4970600",
    "end": "4973376"
  }
]