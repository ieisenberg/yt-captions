[
  {
    "text": "So here's the final version of our 5-stage\npipelined data path.",
    "start": "1240",
    "end": "6090"
  },
  {
    "text": "To deal with data hazards we've added stall\nlogic to the IF and RF input registers.",
    "start": "6090",
    "end": "11840"
  },
  {
    "text": "We've also added bypass muxes on the output\nof the register file read ports so we can",
    "start": "11840",
    "end": "16610"
  },
  {
    "text": "route values from later in the data path if\nwe need to access a register value that's",
    "start": "16610",
    "end": "21250"
  },
  {
    "text": "been computed but not yet written to the register\nfile.",
    "start": "21250",
    "end": "25109"
  },
  {
    "text": "We also made a provision to insert NOPs into\nthe pipeline after the RF stage if the IF",
    "start": "25109",
    "end": "30519"
  },
  {
    "text": "and RF stages are stalled.",
    "start": "30519",
    "end": "33809"
  },
  {
    "text": "To deal with control hazards, we speculate\nthat the next instruction is at PC+4.",
    "start": "33810",
    "end": "40040"
  },
  {
    "text": "But for JMPs and taken branches, that guess\nis wrong so we added a provision for annulling",
    "start": "40040",
    "end": "45330"
  },
  {
    "text": "the instruction in the IF stage.",
    "start": "45330",
    "end": "48870"
  },
  {
    "text": "To deal with exceptions and interrupts we\nadded instruction muxes in all but the final",
    "start": "48870",
    "end": "53840"
  },
  {
    "text": "pipeline stage.",
    "start": "53840",
    "end": "55550"
  },
  {
    "text": "An instruction that causes an exception is\nreplaced by our magic BNE instruction to capture",
    "start": "55550",
    "end": "61010"
  },
  {
    "text": "its PC+4 value.",
    "start": "61010",
    "end": "63030"
  },
  {
    "text": "And instructions in earlier stages are annulled.",
    "start": "63030",
    "end": "65261"
  },
  {
    "text": "All this extra circuitry has been added to\nensure that pipelined execution gives the",
    "start": "65261",
    "end": "71689"
  },
  {
    "text": "same result as unpipelined execution.",
    "start": "71689",
    "end": "75320"
  },
  {
    "text": "The use of bypassing and branch prediction\nensures that data and control hazards have",
    "start": "75320",
    "end": "79920"
  },
  {
    "text": "only a small negative impact on the effective\nCPI.",
    "start": "79920",
    "end": "84090"
  },
  {
    "text": "This means that the much shorter clock period\ntranslates to a large increase in instruction",
    "start": "84090",
    "end": "88710"
  },
  {
    "text": "throughput.",
    "start": "88710",
    "end": "89710"
  },
  {
    "text": "It's worth remembering the strategies we used\nto deal with hazards: stalling, bypassing",
    "start": "89710",
    "end": "94780"
  },
  {
    "text": "and speculation.",
    "start": "94780",
    "end": "96749"
  },
  {
    "text": "Most execution issues can be dealt with using\none of these strategies, so keep these in",
    "start": "96749",
    "end": "101310"
  },
  {
    "text": "mind if you ever need to design a high-performance\npipelined system.",
    "start": "101310",
    "end": "106479"
  },
  {
    "text": "This completes our discussion of pipelining.",
    "start": "106479",
    "end": "109100"
  },
  {
    "text": "We'll explore other avenues to higher processor\nperformance in the last lecture, which discusses",
    "start": "109100",
    "end": "114060"
  },
  {
    "text": "parallel processing.",
    "start": "114060",
    "end": "115179"
  }
]