[
  {
    "start": "0",
    "end": "175000"
  },
  {
    "text": " The following content is\nprovided under a Creative Commons license.",
    "start": "0",
    "end": "5310"
  },
  {
    "text": "Your support will help\nMIT OpenCourseWare continue to offer high-quality\neducational resources for free.",
    "start": "5310",
    "end": "11610"
  },
  {
    "text": "To make a donation or to\nview additional materials from hundreds of MIT courses,\nvisit MIT OpenCourseWare",
    "start": "11610",
    "end": "18140"
  },
  {
    "text": "at ocw.mit.edu.  CHARLES E. LEISERSON:\nOK, let's get started.",
    "start": "18140",
    "end": "24680"
  },
  {
    "text": " So today we're going to talk\nabout measurement and timing.",
    "start": "24680",
    "end": "33210"
  },
  {
    "text": "And I want to start out by\njust showing you a study that one of my students did--",
    "start": "33210",
    "end": "40680"
  },
  {
    "text": "actually, at that point,\nhe was a former student-- whereas timing a\ncode for sorting.",
    "start": "40680",
    "end": "47050"
  },
  {
    "text": "So here's the code. This isn't exactly his code,\nbut it's in the same spirit",
    "start": "47050",
    "end": "53220"
  },
  {
    "text": "so that you get the idea. And so let's just\nrun through this code",
    "start": "53220",
    "end": "58255"
  },
  {
    "text": "and take a look to\nsee what it's doing. It's pretty straightforward. We're going to use the time.h\nheader file to get access",
    "start": "58255",
    "end": "69330"
  },
  {
    "text": "to the clock_gettime() routine,\nwhich is going to be what we",
    "start": "69330",
    "end": "74340"
  },
  {
    "text": "used to get timing measurements. And then we have\na sorting routine",
    "start": "74340",
    "end": "80498"
  },
  {
    "text": "that we're going to time. That I'm not showing you. And there is also\na fill routine,",
    "start": "80498",
    "end": "87180"
  },
  {
    "text": "which is going to fill up\nthe array with numbers-- with random numbers, so\nwe have something to sort.",
    "start": "87180",
    "end": "95070"
  },
  {
    "text": "And the clock_gettime() uses\na struct that is defined here,",
    "start": "95070",
    "end": "103740"
  },
  {
    "text": "and so I'm defining two timing\nstructs-- a start and an end.",
    "start": "103740",
    "end": "109840"
  },
  {
    "text": "So this is just absolute\nboilerplate setting up for taking timing measurements.",
    "start": "109840",
    "end": "116590"
  },
  {
    "text": "And in this case, basically the\nhigh order part of the struct tells the seconds, the lower\npart tells the nanoseconds.",
    "start": "116590",
    "end": "123220"
  },
  {
    "text": " And then we're\ngoing to loop over",
    "start": "123220",
    "end": "128780"
  },
  {
    "text": "arrays of increasing length. And then what we're going\nto do is fill them up--",
    "start": "128780",
    "end": "135113"
  },
  {
    "text": "oh, I forgot the fill-- and then\nwe're going to measure how much time-- what the time is\njust before we sort.",
    "start": "135113",
    "end": "141409"
  },
  {
    "text": "Then we're going to\nsort, and then we're going to measure the\ntime after sorting.",
    "start": "141410",
    "end": "147280"
  },
  {
    "text": "And then we compute\nthe difference, and figure out what the elapsed\ntime is, print that out,",
    "start": "147280",
    "end": "152740"
  },
  {
    "text": "and then we do it again for\na little bit larger array. So is that clear\nwhat's going on?",
    "start": "152740",
    "end": "157960"
  },
  {
    "text": "So we're just sorting\na bunch of numbers, then we're sorting\nsome bigger ones, sorting some bigger\nones, so we can see what the growth of the\nsorting routine should be.",
    "start": "157960",
    "end": "166370"
  },
  {
    "text": " People have a pretty\ngood understanding",
    "start": "166370",
    "end": "171630"
  },
  {
    "text": "of what the code does? OK, so what do we expect to see?",
    "start": "171630",
    "end": "177060"
  },
  {
    "start": "175000",
    "end": "849000"
  },
  {
    "text": " What's this curve\ngoing to look like?",
    "start": "177060",
    "end": "182998"
  },
  {
    "text": "What are some properties of it? ",
    "start": "182998",
    "end": "191629"
  },
  {
    "text": "Yep?  AUDIENCE: [INAUDIBLE]",
    "start": "191630",
    "end": "198000"
  },
  {
    "text": "CHARLES E. LEISERSON:\nSo micro is n log n, but it's certainly\ngoing to grow, right? It should be up\nand to the right.",
    "start": "198000",
    "end": "203560"
  },
  {
    "text": "In fact, one rule, if you\never get into marketing, is that all graphs must\ngo up and to the right.",
    "start": "203560",
    "end": "211030"
  },
  {
    "text": "If they're going down\nand to the right, then your company's in trouble.",
    "start": "211030",
    "end": "217620"
  },
  {
    "text": "So it should be going\nup and to the right, and it should follow,\nfor example, n log n, if it's an n log n sort,\nwhich is what this one was.",
    "start": "217620",
    "end": "224270"
  },
  {
    "text": "I think he was, in this\ncase, timing a merge sort. They should go up\nand to the right,",
    "start": "224270",
    "end": "230140"
  },
  {
    "text": "and should follow n\nlog n, or whatever. So let's see what\nactually happened",
    "start": "230140",
    "end": "235480"
  },
  {
    "text": "when he took the measurements. This is actually his data from--",
    "start": "235480",
    "end": "240879"
  },
  {
    "text": "gosh, this must have been\n20 years ago or something.",
    "start": "240880",
    "end": "246230"
  },
  {
    "text": "Here's what it looked like. So the blue Xs there\nare the runtimes.",
    "start": "246230",
    "end": "252939"
  },
  {
    "text": " And then through that,\nwe've plotted two curves,",
    "start": "252940",
    "end": "260299"
  },
  {
    "text": "one which is the\nbest fit to order n log n growth, and the best\nfit to order n growth.",
    "start": "260300",
    "end": "266660"
  },
  {
    "text": "You notice that for-- even though we're going\nup to 4 million here, there's not that much difference\nbetween n log n and order n.",
    "start": "266660",
    "end": "276800"
  },
  {
    "text": "You can see it mostly\ndown in the tails. Definitely the n log n\nfollows a little bit better,",
    "start": "276800",
    "end": "282110"
  },
  {
    "text": "but really, log n is\npretty small already.",
    "start": "282110",
    "end": "292159"
  },
  {
    "text": "But wow, those measured times-- so if you look, there\nare points way up here--",
    "start": "292160",
    "end": "299030"
  },
  {
    "text": "really slow.  It starts out-- it\ngoes slow a little bit,",
    "start": "299030",
    "end": "305973"
  },
  {
    "text": "and then it gets a little bit\nworse, and then a little bit worse, and a little bit worse. Notice also that the bumps\nare getting closer and closer",
    "start": "305973",
    "end": "312420"
  },
  {
    "text": "together.  What is going on?",
    "start": "312420",
    "end": "319340"
  },
  {
    "text": "Why? I don't know about\nyou, but I thought the data would follow the\ngreen dots reasonably closely.",
    "start": "319340",
    "end": "332180"
  },
  {
    "text": "But you can see it doesn't. It's always good to\nhave a model for what you think is going on\nbecause then, when you--",
    "start": "332180",
    "end": "339210"
  },
  {
    "text": "because some people\nwill just take numbers. They'll say, here's\nmy numbers for my--",
    "start": "339210",
    "end": "344720"
  },
  {
    "text": "that I've measured. And if you don't\nactually have a model for what those\nnumbers mean, you're",
    "start": "344720",
    "end": "351740"
  },
  {
    "text": "probably fooling yourself. You're more likely to have\nmade some sort of error, or there's something\ngoing on that you're not",
    "start": "351740",
    "end": "358340"
  },
  {
    "text": "observing, or whatever,\nif you don't actually have a model for what you\nthink should be going on.",
    "start": "358340",
    "end": "364370"
  },
  {
    "text": "So what's going on here? Who can suggest a hypothesis\nfor what is going on?",
    "start": "364370",
    "end": "372395"
  },
  {
    "text": " So he took these numbers\non his laptop, by the way.",
    "start": "372395",
    "end": "379430"
  },
  {
    "start": "379430",
    "end": "386716"
  },
  {
    "text": "What do you suppose\nis happening here? ",
    "start": "386717",
    "end": "394650"
  },
  {
    "text": "Some ideas. Yeah?",
    "start": "394650",
    "end": "400009"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] CHARLES E. LEISERSON: Maybe\nit doesn't fit in the cache. What would you expect\nto happen if things didn't fit in the cache?",
    "start": "400010",
    "end": "406832"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] CHARLES E. LEISERSON:\nYeah, you sort of think that it would go along,\nand then it would jump.",
    "start": "406832",
    "end": "414380"
  },
  {
    "text": "So interesting issue, but\nthat doesn't seem to be what's",
    "start": "414380",
    "end": "419750"
  },
  {
    "text": "happening there. It's going up, then\nit's going back down. It's going up and\ngoing back down--",
    "start": "419750",
    "end": "425060"
  },
  {
    "text": "roller coaster. What other ideas are there? Good idea.",
    "start": "425060",
    "end": "430860"
  },
  {
    "text": "Good idea. Let's think a little bit about\nwhat's going on in the machine. ",
    "start": "430860",
    "end": "436870"
  },
  {
    "text": "What are some other good ideas? Or bad ideas? Let's eliminate some.",
    "start": "436870",
    "end": "442150"
  },
  {
    "text": " Yeah. AUDIENCE: They're\nnot powers of 2.",
    "start": "442150",
    "end": "448910"
  },
  {
    "text": "CHARLES E. LEISERSON:\nThey're not powers of 2. These are not\npowers of 2, right?",
    "start": "448910",
    "end": "454677"
  },
  {
    "text": "Because they're getting\ncloser and closer as we get bigger and bigger. Yeah, so you're right.",
    "start": "454677",
    "end": "460110"
  },
  {
    "text": "It's not correlated\nwith powers of 2. Weird. Because sometimes things\nare alignment issues,",
    "start": "460110",
    "end": "465868"
  },
  {
    "text": "and we'll talk more about that. It will come up when we talk\nabout caching after the quiz.",
    "start": "465868",
    "end": "471030"
  },
  {
    "text": "Everybody knows there's\na quiz next time-- especially all of\nyou who aren't here? ",
    "start": "471030",
    "end": "479289"
  },
  {
    "text": "OK, so what else might be\ngoing on in the machine here? ",
    "start": "479290",
    "end": "487889"
  },
  {
    "text": "Because this is reality. This is what happens when\nyou take measurements. So we're being very nice to you.",
    "start": "487890",
    "end": "494130"
  },
  {
    "text": "We're giving you AWS run. We have done everything\nwe can to make",
    "start": "494130",
    "end": "500060"
  },
  {
    "text": "sure those numbers come\nout clean, and beautiful,",
    "start": "500060",
    "end": "506210"
  },
  {
    "text": "and untouched. There they are. That is quality measurements\nwe're taking for you.",
    "start": "506210",
    "end": "516020"
  },
  {
    "text": "But if you had to\ndo it yourself, that's what this lecture,\nin part, is about. Yeah? AUDIENCE: [INAUDIBLE]",
    "start": "516020",
    "end": "524707"
  },
  {
    "start": "524708",
    "end": "532233"
  },
  {
    "text": "CHARLES E. LEISERSON:\nSo you think that there may be something\nhaving to do with the cache.",
    "start": "532233",
    "end": "538120"
  },
  {
    "text": "But I'm going through each time\nand I'm refilling the array each time, so they're kind of\nstarting from a clean slate--",
    "start": "538120",
    "end": "544510"
  },
  {
    "text": "similar clean slate each time. ",
    "start": "544510",
    "end": "550930"
  },
  {
    "text": "What else is going on\nin the machine here? Yeah? AUDIENCE: [INAUDIBLE] totally\nunrelated stuff [INAUDIBLE]",
    "start": "550930",
    "end": "556065"
  },
  {
    "text": "CHARLES E. LEISERSON:\nYeah, there could be totally\nunrelated stuff running. ",
    "start": "556065",
    "end": "562180"
  },
  {
    "text": "You might have daemons, you\nmight have all kinds of things, and so forth. So he thought of\nthat, and he shut down",
    "start": "562180",
    "end": "570310"
  },
  {
    "text": "everything he possibly could. And this is what he got still.",
    "start": "570310",
    "end": "577090"
  },
  {
    "text": "But that's a great idea\nbecause often, there's some external things going on.",
    "start": "577090",
    "end": "583510"
  },
  {
    "text": "In this case, it's\ncalled multi-tenancy. There's more than one thing\nusing the computer at a time.",
    "start": "583510",
    "end": "588880"
  },
  {
    "text": "Good idea, but happens\nnot to be the one. AUDIENCE: [INAUDIBLE]",
    "start": "588880",
    "end": "594880"
  },
  {
    "text": "CHARLES E. LEISERSON: Could\nbe precision with the timing. Yeah, sometimes there\ncan be issues there, but this was not\na precision issue.",
    "start": "594880",
    "end": "604810"
  },
  {
    "text": "He could have used\na really dumb timer and gotten something\nvery similar to this. ",
    "start": "604810",
    "end": "612252"
  },
  {
    "text": "What else is going\non your machine? Yeah? AUDIENCE: Maybe his\nmachine's checking for updates every minute.",
    "start": "612252",
    "end": "618247"
  },
  {
    "text": "CHARLES E. LEISERSON:\nYeah, maybe it's checking for updates. That's once again\nsome external things. No, it wasn't\nchecking for updates.",
    "start": "618247",
    "end": "625128"
  },
  {
    "text": "Wasn't checking for updates. ",
    "start": "625128",
    "end": "631300"
  },
  {
    "text": "What is going on here? What is going on? Let's have some more ideas. What other things might\ndisrupt measurements?",
    "start": "631300",
    "end": "638271"
  },
  {
    "text": " Yeah? AUDIENCE: [INAUDIBLE]",
    "start": "638271",
    "end": "645105"
  },
  {
    "text": "CHARLES E. LEISERSON: Yeah. ",
    "start": "645105",
    "end": "653190"
  },
  {
    "text": "This was actually merge\nsort he was timing, so there's no randomization. But even that, if\nit were quick sort,",
    "start": "653190",
    "end": "658890"
  },
  {
    "text": "it'd be at random that things\nwould tend to take longer, rather than following\nthis crazy pattern.",
    "start": "658890",
    "end": "666360"
  },
  {
    "text": "What is causing\nthat crazy pattern? Yeah? AUDIENCE: Does the random\nfill have to do with the time?",
    "start": "666360",
    "end": "673388"
  },
  {
    "text": "CHARLES E. LEISERSON: No,\nbecause the random fill is done outside the timer. ",
    "start": "673388",
    "end": "681840"
  },
  {
    "text": "Each time through\nthe loop, we fill, and then we start\nthe timer, and then we take the measurement,\nand so forth. Yeah?",
    "start": "681840",
    "end": "688002"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] ",
    "start": "688002",
    "end": "695458"
  },
  {
    "text": "CHARLES E. LEISERSON: It's\nnot allocating memory. But that's an interesting\nidea, because sometimes you",
    "start": "695458",
    "end": "701040"
  },
  {
    "text": "have things going on where\nyou think things are happening right away, but the system is\nbeing clever and delaying it.",
    "start": "701040",
    "end": "709380"
  },
  {
    "text": "And so you end up paying\nfor it at some later time, and that could possibly\ncreate something.",
    "start": "709380",
    "end": "715022"
  },
  {
    "text": "Turns out not to be\nwhat's going on here. ",
    "start": "715022",
    "end": "728389"
  },
  {
    "text": "So what's happening here\nis that the machine is",
    "start": "728390",
    "end": "734960"
  },
  {
    "text": "changing the clock frequency. ",
    "start": "734960",
    "end": "740130"
  },
  {
    "text": "Why is the machine changing\nthe clock frequency? Your laptops change the--",
    "start": "740130",
    "end": "746680"
  },
  {
    "text": "the systems that we have,\nthey change clock frequency. Why do they change it?",
    "start": "746680",
    "end": "752110"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] CHARLES E. LEISERSON: Because\nthe laptop is getting hot. So what do are doing?",
    "start": "752110",
    "end": "757350"
  },
  {
    "text": "We're running something\ncomputational. And the smaller ones-- OK, we get a lot of those done,\nuntil it starts heating up,",
    "start": "757350",
    "end": "764910"
  },
  {
    "text": "and so it slows down the\nsystem clock to save power.",
    "start": "764910",
    "end": "770769"
  },
  {
    "text": "OK, and then what happens? Slows it down a little bit,\ncools off a little bit,",
    "start": "770770",
    "end": "776570"
  },
  {
    "text": "starts to speed up again. And then we run longer.",
    "start": "776570",
    "end": "781589"
  },
  {
    "text": "And why are these things getting\ncloser and closer together? ",
    "start": "781590",
    "end": "793070"
  },
  {
    "text": "Yeah? AUDIENCE: Takes longer and\nlonger to run the sorts. CHARLES E. LEISERSON: Yeah,\nit takes longer and longer to run the sorts,\nso you're going",
    "start": "793070",
    "end": "799370"
  },
  {
    "text": "to see the effect\ncloser in an interval",
    "start": "799370",
    "end": "805279"
  },
  {
    "text": "here, even if it happened\nto be equal in time. Even if it was\nequal in time, we're doing bigger and\nbigger problems.",
    "start": "805280",
    "end": "813610"
  },
  {
    "text": "This is nuts, right? We want to take measurements. We want to know whether\nthe software is faster.",
    "start": "813610",
    "end": "820430"
  },
  {
    "text": "What are you supposed to do? So here, if you just took\na measurement and said, look, this is the time that\nit takes me to run this code,",
    "start": "820430",
    "end": "828460"
  },
  {
    "text": "you would be hugely missing\nthe boat, if you were taking",
    "start": "828460",
    "end": "833648"
  },
  {
    "text": "one of those high measurements. You compare A to\nB. You run A first,",
    "start": "833648",
    "end": "838820"
  },
  {
    "text": "then you run B. B is slower. Oh, well, that's\nbecause when you ran A,",
    "start": "838820",
    "end": "844070"
  },
  {
    "text": "it heated up the processor, so\nthe processor slowed it down. So this particular\narchitectural feature",
    "start": "844070",
    "end": "851030"
  },
  {
    "start": "849000",
    "end": "1060000"
  },
  {
    "text": "is called DVFS, dynamic\nfrequency and voltage scaling. It's a technique to reduce\npower by adjusting the clock",
    "start": "851030",
    "end": "857990"
  },
  {
    "text": "frequency and supply\nvoltage to transistors. So the idea is that,\nif the chip ends up",
    "start": "857990",
    "end": "866000"
  },
  {
    "text": "getting too hot, or in\nthe case of laptops, often if you want\nto conserve battery,",
    "start": "866000",
    "end": "873800"
  },
  {
    "text": "it chooses to slow\ndown the clock. And the second thing it can\ndo is reduce the voltage,",
    "start": "873800",
    "end": "881780"
  },
  {
    "text": "if the frequency is reduced. So when you're actually\nrunning slower,",
    "start": "881780",
    "end": "887270"
  },
  {
    "text": "you can actually get the\nsame reliability of switching with a lower voltage.",
    "start": "887270",
    "end": "893329"
  },
  {
    "text": "At a higher voltage-- sorry-- at higher\nclock frequencies you need enough voltage to\nmake sure those electrons are",
    "start": "893330",
    "end": "899509"
  },
  {
    "text": "scooting across the transistor\njunctions fast enough. So the basic power law that\nthe electrical engineers--",
    "start": "899510",
    "end": "908640"
  },
  {
    "text": "is anybody here an\nelectrical engineer? ",
    "start": "908640",
    "end": "914040"
  },
  {
    "text": "OK. There's good stuff in\nEE, let me tell you.",
    "start": "914040",
    "end": "919355"
  },
  {
    "text": "So those of you who\nare too embarrassed to raise your\nhands, I support EE.",
    "start": "919355",
    "end": "926050"
  },
  {
    "text": "So power goes as CV squared\nf, where C is what's",
    "start": "926050",
    "end": "932980"
  },
  {
    "text": "called the dynamic capacitance. There's actually\nanother term, which is the static capacitance,\nwhich doesn't have to deal",
    "start": "932980",
    "end": "941200"
  },
  {
    "text": "with frequency or whatever. But for the dynamic\npower, it's CV squared f.",
    "start": "941200",
    "end": "947132"
  },
  {
    "text": "It's the dynamic capacitance. It's roughly the area\nof the circuitry times",
    "start": "947132",
    "end": "953350"
  },
  {
    "text": "how many bits are moving. So if bits don't move,\nthey don't consume power,",
    "start": "953350",
    "end": "959509"
  },
  {
    "text": "for dynamic power. And then V is the\nsupply voltage, and then",
    "start": "959510",
    "end": "965480"
  },
  {
    "text": "f as the clock frequency. So if you can reduce the\nfrequency and voltage,",
    "start": "965480",
    "end": "970910"
  },
  {
    "text": "you get a cubic reduction\nin power, and also in heat. ",
    "start": "970910",
    "end": "979800"
  },
  {
    "text": "Who thinks their battery\ndoesn't last long enough?",
    "start": "979800",
    "end": "985000"
  },
  {
    "text": "Yeah, OK. Wouldn't be nice if\nthey lasted a month? So you can see why they're\nmotivated to play this game--",
    "start": "985000",
    "end": "994860"
  },
  {
    "text": "to save the battery or to run\nthings as hot as they can. But if it gets too hot,\nwe'll just back off.",
    "start": "994860",
    "end": "1002890"
  },
  {
    "text": "But for performance measurement,\nthis is basically a nightmare.",
    "start": "1002890",
    "end": "1008620"
  },
  {
    "text": "It wreaks havoc. So the topic of today's lecture\nis how can one reliably measure",
    "start": "1008620",
    "end": "1015520"
  },
  {
    "text": "the performance of software,\nwhen you have stuff like this going on in our system?",
    "start": "1015520",
    "end": "1021310"
  },
  {
    "text": "Now, the good thing\nabout something like DVFS is there's actually ways of\nshutting it off and taking",
    "start": "1021310",
    "end": "1027159"
  },
  {
    "text": "measurements. ",
    "start": "1027160",
    "end": "1032929"
  },
  {
    "text": "You probably pay some\nperformance for doing that, because they can basically--\nwho's ever worked",
    "start": "1032930",
    "end": "1039270"
  },
  {
    "text": "on an overclocked system? Some of you game players, right?",
    "start": "1039270",
    "end": "1045250"
  },
  {
    "text": "So part of the game-- the idea there, when they're\noverclocking it, is let's keep--",
    "start": "1045250",
    "end": "1051070"
  },
  {
    "text": "get things cool and so forth. And there's lots of\ngames like this that are played and overclocked systems.",
    "start": "1051070",
    "end": "1056409"
  },
  {
    "text": " So I'm going to talk\nabout three topics today.",
    "start": "1056410",
    "end": "1062890"
  },
  {
    "text": "One is about quiescing\nsystems, which is making them quiet enough that\nwe can take good measurements,",
    "start": "1062890",
    "end": "1067900"
  },
  {
    "text": "getting rid of\nsome of the noise. And that second I\ntalk about some tools for measuring\nsoftware performance,",
    "start": "1067900",
    "end": "1074830"
  },
  {
    "text": "and then we'll talk a bit\nabout performance modeling. So I hope this is a\nlittle motivational.",
    "start": "1074830",
    "end": "1081180"
  },
  {
    "text": "Boy, you think you've\nseen it all sometimes, and then somebody presents you\nwith a puzzle, and it's like,",
    "start": "1081180",
    "end": "1088930"
  },
  {
    "text": "what's going on? And then takes a\nlittle detective work to figure out that that's\nactually what's going on.",
    "start": "1088930",
    "end": "1097120"
  },
  {
    "text": "So we'll start first\nabout quiescing systems. Who knows who\nGenichi Taguchi was?",
    "start": "1097120",
    "end": "1106700"
  },
  {
    "text": "Anybody here? No? He's very famous because he's\nthe one who made our automobile",
    "start": "1106700",
    "end": "1113570"
  },
  {
    "text": "industry produce reliable cars. Very, very famous fellow.",
    "start": "1113570",
    "end": "1122720"
  },
  {
    "text": "He did a lot of\ndifferent things. I'm going to point out one of\nthe things that he observed. And it's in the\ncontext of suppose",
    "start": "1122720",
    "end": "1131870"
  },
  {
    "text": "you were an Olympic\npistol coach, and you've got two shooters-- A and B-- and you\nlook at their targets.",
    "start": "1131870",
    "end": "1137570"
  },
  {
    "text": "And here's A's target. Oh, he hit the bulls-eye. Good. And if you add that up, he's\ngot a pretty decent score.",
    "start": "1137570",
    "end": "1146750"
  },
  {
    "text": "Then you look at B. B didn't\neven hit the bullseye, and his score is really lousy.",
    "start": "1146750",
    "end": "1154760"
  },
  {
    "text": "Who do you want on\nyour team, A or B? ",
    "start": "1154760",
    "end": "1160843"
  },
  {
    "text": "Who do you want? AUDIENCE: You would\npick B, just because he could adjust the sights. CHARLES E. LEISERSON:\nYeah, because it's easy to tell him what to do.",
    "start": "1160843",
    "end": "1166669"
  },
  {
    "text": "You adjust the sights. You teach him to shoot down a\nlittle bit lower to the left.",
    "start": "1166670",
    "end": "1172309"
  },
  {
    "text": "It's easy to diagnose\nwhat his problem is. ",
    "start": "1172310",
    "end": "1178427"
  },
  {
    "text": "That's all you have to do. What do you do for A? ",
    "start": "1178427",
    "end": "1184060"
  },
  {
    "text": "It's not clear what you do. And so what he did in the realm\nof quality control was say,",
    "start": "1184060",
    "end": "1194169"
  },
  {
    "text": "look, when we're\nproducing products, before we try to fix the\nreliability, or whatever is,",
    "start": "1194170",
    "end": "1203560"
  },
  {
    "text": "of the product-- increase the quality\nof the product-- let's first reliably\nproduce whatever",
    "start": "1203560",
    "end": "1209770"
  },
  {
    "text": "we're producing so we get\nthe same thing every time. Because then we can go in\nand see what the problem is,",
    "start": "1209770",
    "end": "1216340"
  },
  {
    "text": "and we can adjust for it. And so the idea is go\nafter the variance first.",
    "start": "1216340",
    "end": "1223620"
  },
  {
    "text": "Go after the spread. Try to get the spread\nas small as possible. Try to figure out how it\nis that you can isolate--",
    "start": "1223620",
    "end": "1230880"
  },
  {
    "text": "produce the same thing,\neven if it's not very good. And then go and try\nto make changes.",
    "start": "1230880",
    "end": "1237029"
  },
  {
    "text": "Because if you try\nto make changes while you have high\nvariance, you don't even know if you're making\nprogress or not,",
    "start": "1237030",
    "end": "1242730"
  },
  {
    "text": "because it could be in the\nnoise of your measurements. Now, in the context of\nperformance engineering,",
    "start": "1242730",
    "end": "1250620"
  },
  {
    "text": "if you can reduce\nvariability, you can do things like compensate\nfor systematic and random",
    "start": "1250620",
    "end": "1256230"
  },
  {
    "text": "measurement errors. And you can also do things\nlike not run as many trials",
    "start": "1256230",
    "end": "1262430"
  },
  {
    "text": "to discover whether one\nprogram is better than another. So a lot of advantages\nto being able to",
    "start": "1262430",
    "end": "1268140"
  },
  {
    "text": "have really quiet things. It's kind of obvious\nthat you should want to have reliable\nmeasurements,",
    "start": "1268140",
    "end": "1274170"
  },
  {
    "text": "but there's actually, as I say,\na theory behind it for wide is that you want to\nhave quiet measurements,",
    "start": "1274170",
    "end": "1280320"
  },
  {
    "text": "and what you need to focus on. Now, in our computer\nsystems, there",
    "start": "1280320",
    "end": "1286790"
  },
  {
    "start": "1284000",
    "end": "1641000"
  },
  {
    "text": "are lots of sources\nof variability, and some people came up\nwith some of them here. Let me mention just\na few of them here.",
    "start": "1286790",
    "end": "1295730"
  },
  {
    "text": "So there are things like daemons\nand background jobs, things that are running on your system\nthat are helping the system",
    "start": "1295730",
    "end": "1302720"
  },
  {
    "text": "to do whatever it's doing. Many of them are unnecessary,\nand those can be running--",
    "start": "1302720",
    "end": "1308370"
  },
  {
    "text": "so for example, maybe\nyou set up a chron job to do something for\nyou every night,",
    "start": "1308370",
    "end": "1314578"
  },
  {
    "text": "and that happens to be\njust when you happen to be making some measurements.",
    "start": "1314578",
    "end": "1321960"
  },
  {
    "text": "Well, that's not really\ngood, because you're now sharing the resource.",
    "start": "1321960",
    "end": "1327049"
  },
  {
    "text": "Interrupts-- something comes in. I had one time where\nwe were measuring stuff",
    "start": "1327050",
    "end": "1334789"
  },
  {
    "text": "on the connection machine\nCM5, which in its day, was the world's most\npowerful computer.",
    "start": "1334790",
    "end": "1341030"
  },
  {
    "text": "1993, it was the top of the\nlist of the supercomputers. And now this computer\nis more powerful.",
    "start": "1341030",
    "end": "1350450"
  },
  {
    "text": "Cost $43 million or something. ",
    "start": "1350450",
    "end": "1356300"
  },
  {
    "text": "Moore's law has really\nmade a difference. And we were measuring the\nperformance of something,",
    "start": "1356300",
    "end": "1364399"
  },
  {
    "text": "and we kept getting\nthese anomalous results. And eventually, we\ntracked it down.",
    "start": "1364400",
    "end": "1369740"
  },
  {
    "text": "It took us a lot of work,\nbut we tracked it down. The graduate student\nwho was running it, while he was running it, he\nwas moving the mouse around.",
    "start": "1369740",
    "end": "1378650"
  },
  {
    "text": "And when you moved the\nmouse, it was interrupting 200 times a second to deal\nwith the interrupts that",
    "start": "1378650",
    "end": "1384330"
  },
  {
    "text": "was interfering with\nour measurements. True story. True story. ",
    "start": "1384330",
    "end": "1394290"
  },
  {
    "text": "We disconnected\nthe network even so that we wouldn't\nget external things, and we're still\ngetting this thing.",
    "start": "1394290",
    "end": "1400098"
  },
  {
    "text": "What is going on? And eventually, we tracked\nit down to that fact",
    "start": "1400098",
    "end": "1405955"
  },
  {
    "text": "that he was just\nsitting there idling-- so it's like, start it\nup, and then hands off. It was like, nobody move.",
    "start": "1405955",
    "end": "1412230"
  },
  {
    "text": " Code and data alignment--",
    "start": "1412230",
    "end": "1418290"
  },
  {
    "text": "where the code lies\naffects its performance. If a code goes across\ntwo cache lines",
    "start": "1418290",
    "end": "1426450"
  },
  {
    "text": "versus completely\nwithin one cache line, that can have a difference,\ndepending upon what's conflicting in the cache.",
    "start": "1426450",
    "end": "1433289"
  },
  {
    "text": "Or if you go across\npage boundaries, it can have a very big\ndifference, for example,",
    "start": "1433290",
    "end": "1438840"
  },
  {
    "text": "in the translation\nlookaside buffer, TLB. You may be going for\ndifferent entries.",
    "start": "1438840",
    "end": "1444000"
  },
  {
    "text": "There may be different\nthings there. So code alignment can\nmake a difference in the--",
    "start": "1444000",
    "end": "1450720"
  },
  {
    "text": "what you're doing. Thread placement-- if you\nhave a multicore machine,",
    "start": "1450720",
    "end": "1457050"
  },
  {
    "text": "which core is it running? It turns out the\nsystem likes to use core 0 for a lot of its stuff.",
    "start": "1457050",
    "end": "1464808"
  },
  {
    "text": "So if you're going to take\nreliable measurements, don't run on core 0.",
    "start": "1464808",
    "end": "1470600"
  },
  {
    "text": "Runtime scheduler-- the\nfact that, for example, we have a randomized\nscheduler, which",
    "start": "1470600",
    "end": "1476270"
  },
  {
    "text": "means that there's\nrandom numbers going on so you're going to try\nto take measurements in the midst of all\nthis randomness.",
    "start": "1476270",
    "end": "1482940"
  },
  {
    "text": "Hyperthreading-- hyperthreading\nis where they take one core. It's also called\nsymmetric multithreading--",
    "start": "1482940",
    "end": "1492650"
  },
  {
    "text": "or no, simultaneous\nmultithreading. That's what it's called,\nsimultaneous multithreading, or hyperthreading is\nwhat Intel calls it.",
    "start": "1492650",
    "end": "1499280"
  },
  {
    "text": "What that is is they\nhave one functional unit, and then they run two\ninstruction streams through it",
    "start": "1499280",
    "end": "1507399"
  },
  {
    "text": "at the same time, each with\nits own set of registers, but using the same\nfunctional units.",
    "start": "1507400",
    "end": "1513400"
  },
  {
    "text": "And they get basically\na 20% speed up or something from having-- it looks, from the\nsoftware point of view,",
    "start": "1513400",
    "end": "1519670"
  },
  {
    "text": "like you've got two\nprocessors, but really it only gives you\n1.2 processors.",
    "start": "1519670",
    "end": "1526215"
  },
  {
    "text": "So it's one of\nthese things that, by the way, if you start\ncounting up how many processors and saying work over the\nnumber of processors,",
    "start": "1526215",
    "end": "1532660"
  },
  {
    "text": "and you say, well, how\nmany processors do I have-- well, you may have just a\nhyperthreaded processor,",
    "start": "1532660",
    "end": "1538750"
  },
  {
    "text": "rather than a real processor. So one thing, for example,\nin the cloud system",
    "start": "1538750",
    "end": "1546510"
  },
  {
    "text": "that you folks are\nusing, we turn off hyperthreading so that we can\nget more reliable measurements,",
    "start": "1546510",
    "end": "1553086"
  },
  {
    "text": "and so we can look\nat the measurements as a function of the\nnumber of processors. Multitenancy-- and\nthis is particularly",
    "start": "1553087",
    "end": "1559380"
  },
  {
    "text": "important in the cloud. If you're in the cloud,\nthere are other people using the system, they can\nend up using lots of resources",
    "start": "1559380",
    "end": "1566280"
  },
  {
    "text": "that maybe you want, like cache. And they can end up using\nnetwork traffic that",
    "start": "1566280",
    "end": "1571920"
  },
  {
    "text": "may affect you, and such. I'm actually quite\namazed at how well Amazon",
    "start": "1571920",
    "end": "1577169"
  },
  {
    "text": "does in AWS in making\nit so that that stuff doesn't affect you very much.",
    "start": "1577170",
    "end": "1584130"
  },
  {
    "text": "Our numbers show that\nthey are, in fact-- they are definitely\nthe leader right now in having repeatable\nmeasurements,",
    "start": "1584130",
    "end": "1593010"
  },
  {
    "text": "compared to all the\ncloud providers. We talked about DVFS.",
    "start": "1593010",
    "end": "1598500"
  },
  {
    "text": "There's also another\none called Turbo Boost. So Turbo Boost looks to see\nhow many jobs are actually",
    "start": "1598500",
    "end": "1606158"
  },
  {
    "text": "running on the multicore. If there's only one job\nrunning on the multicore, it increases the clock\nfrequency for that job--",
    "start": "1606158",
    "end": "1613178"
  },
  {
    "text": "or if there's just a few. As soon as another one comes\nin, it slows things back down. So it tries to give\na boost when you're",
    "start": "1613178",
    "end": "1619590"
  },
  {
    "text": "in executing serial\ncode because it says, well, I'm not generating\nheat from all the cores.",
    "start": "1619590",
    "end": "1625600"
  },
  {
    "text": "I just have to generate it\nfrom the one that I've got. I can afford to have\none of them run hotter.",
    "start": "1625600",
    "end": "1633360"
  },
  {
    "text": "Network traffic-- and\nthere's, by the way, a bunch of other ones. We're going to talk\nabout a few of these, but first let me tell you\nwhat the impact of quiescing",
    "start": "1633360",
    "end": "1641279"
  },
  {
    "start": "1641000",
    "end": "1793000"
  },
  {
    "text": "a system is. So this is joint work that I\ndid in my group with Tim Kaler.",
    "start": "1641280",
    "end": "1647910"
  },
  {
    "text": "So we wrote a Cilk program\nto count the primes in an interval. And we ran on a c4 instance,\n18 cores-- similar to what",
    "start": "1647910",
    "end": "1654900"
  },
  {
    "text": "you're running with. We had two-way\nhyper-threading on. Turbo Boost was on.",
    "start": "1654900",
    "end": "1661260"
  },
  {
    "text": "We had 18 Cilk workers. We had 100 runs, each\nabout one second.",
    "start": "1661260",
    "end": "1666600"
  },
  {
    "text": "And what I've plotted here\nis how much is the percent",
    "start": "1666600",
    "end": "1672030"
  },
  {
    "text": "that each run was. We basically ran\n100 runs, and then I sorted them from\nsmallest run to largest.",
    "start": "1672030",
    "end": "1678900"
  },
  {
    "text": "And I normalized them to\nwhatever the minimum one was so that each thing here is\na percentage above the minimum.",
    "start": "1678900",
    "end": "1686340"
  },
  {
    "text": "So you can see that the\nslowest run was almost 25%",
    "start": "1686340",
    "end": "1694950"
  },
  {
    "text": "slower than the fastest run. So you can see\nwhat the impact is.",
    "start": "1694950",
    "end": "1701650"
  },
  {
    "text": "So 25%-- if you're trying to\nproduce a code by getting a 3%",
    "start": "1701650",
    "end": "1707490"
  },
  {
    "text": "improvement 30\ntimes, you can't--",
    "start": "1707490",
    "end": "1713670"
  },
  {
    "text": "there's so much noise here. It's very hard for you to figure\nout that you're 3% faster.",
    "start": "1713670",
    "end": "1720570"
  },
  {
    "text": "So if you quiesce the\nsystem, same thing. We turn hyperthreading\noff, turn Turbo Boost off,",
    "start": "1720570",
    "end": "1727210"
  },
  {
    "text": "and we quieted all the\ndaemons, and so forth.",
    "start": "1727210",
    "end": "1733029"
  },
  {
    "text": "Then out of 100 runs, we got\nessentially the same value",
    "start": "1733030",
    "end": "1738790"
  },
  {
    "text": "every single time,\nexcept for three times. And notice that the\nscale here has changed.",
    "start": "1738790",
    "end": "1745600"
  },
  {
    "text": "The scale here is now less\nthan 0.8%, less than 1% slower.",
    "start": "1745600",
    "end": "1753460"
  },
  {
    "text": "So this says that, hey, if I\ntook a couple of measurements, I'm very likely to\nhit something that",
    "start": "1753460",
    "end": "1763060"
  },
  {
    "text": "is the real running\ntime, which tends to be,",
    "start": "1763060",
    "end": "1768550"
  },
  {
    "text": "for this, what the\nminimum is here. Because all the other stuff is\nnoise that's just adding in.",
    "start": "1768550",
    "end": "1775420"
  },
  {
    "text": " Make sense? So it is possible\nto quiesce a system.",
    "start": "1775420",
    "end": "1782920"
  },
  {
    "text": "It's not that\nhard, it just takes a small matter of\nprogramming and systems work.",
    "start": "1782920",
    "end": "1789340"
  },
  {
    "text": " So here are some tips\non how you quiesce",
    "start": "1789340",
    "end": "1798150"
  },
  {
    "start": "1793000",
    "end": "2056000"
  },
  {
    "text": "a system, if you wanted to\ndo this for your laptop, for example. Make sure no other\njobs are running.",
    "start": "1798150",
    "end": "1803400"
  },
  {
    "text": "Shut down daemons and cron jobs. Disconnect the network. Don't fiddle with the mouse.",
    "start": "1803400",
    "end": "1809620"
  },
  {
    "text": "For serial jobs, don't run\non core 0, where interrupt handlers are usually run.",
    "start": "1809620",
    "end": "1814990"
  },
  {
    "text": "Turn hyperthreading off. Turn off DVFS. Turn off Turbo Boost.",
    "start": "1814990",
    "end": "1820450"
  },
  {
    "text": "Use taskset to pin\nworkers to cores. So taskset is a\nutility that says,",
    "start": "1820450",
    "end": "1825860"
  },
  {
    "text": "I want you to run this\nthread on this core, and don't let the operating\nsystem bounce it around.",
    "start": "1825860",
    "end": "1832809"
  },
  {
    "text": "So normally, the operating\nsystem maps threads to cores-- the workers, the Cilk workers-- to cores in any way\nthat it feels like.",
    "start": "1832810",
    "end": "1839200"
  },
  {
    "text": "This says, no, I want you\nto have it exactly here so that, when I run something else,\nit's exactly the same thing.",
    "start": "1839200",
    "end": "1845860"
  },
  {
    "text": "And so forth. And we've already done a lot\nof this for you for AWS run.",
    "start": "1845860",
    "end": "1852120"
  },
  {
    "text": "By the way, there\nis no way of getting a completely\ndeterministic result out",
    "start": "1852120",
    "end": "1859560"
  },
  {
    "text": "of running on modern hardware. Does anybody know why? If I have a serial\nprogram and it's",
    "start": "1859560",
    "end": "1866010"
  },
  {
    "text": "deterministic serial\nprogram, and I set it up and I reboot the system\nso it's got exactly",
    "start": "1866010",
    "end": "1873210"
  },
  {
    "text": "the same content,\net cetera, I still can get non-deterministic\nresults.",
    "start": "1873210",
    "end": "1879090"
  },
  {
    "text": "Does anybody know why? Yeah? AUDIENCE: Because [INAUDIBLE]",
    "start": "1879090",
    "end": "1886640"
  },
  {
    "text": "CHARLES E. LEISERSON: No,\nyou can turn that off. So they actually do\nrandomize address space",
    "start": "1886640",
    "end": "1892040"
  },
  {
    "text": "for security reasons. But when you run under\nthe debugger and so forth,",
    "start": "1892040",
    "end": "1897070"
  },
  {
    "text": "they tend to turn that off so\nthat you can get repeatability for debugging purposes.",
    "start": "1897070",
    "end": "1902360"
  },
  {
    "text": "Yeah? AUDIENCE: [INAUDIBLE] CHARLES E. LEISERSON:\nNo, those are generally--",
    "start": "1902360",
    "end": "1908440"
  },
  {
    "text": " no, those are\ndeterministic, but there",
    "start": "1908440",
    "end": "1914570"
  },
  {
    "text": "is something in the hardware\nwhich is non-deterministic. Does anybody know what\nis, happen to know,",
    "start": "1914570",
    "end": "1922090"
  },
  {
    "text": "can guess what it is? Something the hardware\nthat's non-deterministic. Yeah? AUDIENCE: [INAUDIBLE]",
    "start": "1922090",
    "end": "1928048"
  },
  {
    "text": "CHARLES E. LEISERSON:\nDisk access would be, but if I'm just running\nsomething in core-- I'm not using disk,\nI'm just going to run--",
    "start": "1928048",
    "end": "1934090"
  },
  {
    "text": "it turns out non-deterministic,\neven though I'm just running everything inside\nwith ordinary DRAM memory,",
    "start": "1934090",
    "end": "1941530"
  },
  {
    "text": "and so forth. Yeah? AUDIENCE: [INAUDIBLE] CHARLES E. LEISERSON: No,\nthe out of order execution is all deterministic.",
    "start": "1941530",
    "end": "1946590"
  },
  {
    "text": "There's no randomization there. ",
    "start": "1946590",
    "end": "1951640"
  },
  {
    "text": "Yeah? AUDIENCE: Branch prediction. CHARLES E. LEISERSON: Branch\nprediction's all deterministic algorithms--",
    "start": "1951640",
    "end": "1957909"
  },
  {
    "text": "all deterministic.  Yeah? AUDIENCE: The\nsystem clock signal?",
    "start": "1957910",
    "end": "1965250"
  },
  {
    "text": "CHARLES E. LEISERSON: System\nclock signal's very regular. Very regular, if you turn\noff DVFS and stuff like that.",
    "start": "1965250",
    "end": "1975240"
  },
  {
    "text": "Yep? AUDIENCE: [INAUDIBLE] CHARLES E. LEISERSON: So the\nLinus schedule is, in fact,",
    "start": "1975240",
    "end": "1981809"
  },
  {
    "text": "a deterministic algorithm. And if you're just\nrunning on one core, the scheduler never\ncomes into it. ",
    "start": "1981810",
    "end": "1988550"
  },
  {
    "text": "So there is one source\nof non-determinism, and that is memory errors.",
    "start": "1988550",
    "end": "1995389"
  },
  {
    "text": "So there's a chance that\none of your memory-- when you're accessing the\nDRAM, that an alpha particle",
    "start": "1995390",
    "end": "2003730"
  },
  {
    "text": "collided with one of\nthe bits and flipped it. And there's hardware in\nthere to do error correction,",
    "start": "2003730",
    "end": "2008980"
  },
  {
    "text": "but it takes an\nextra cycle to do it. So if it reads the\nmemory location,",
    "start": "2008980",
    "end": "2014080"
  },
  {
    "text": "discovers that there is an\nerror in what it read, then it",
    "start": "2014080",
    "end": "2021190"
  },
  {
    "text": "performs the correction,\nand then you get it. And that's something that's\ncompletely non-deterministic, because its alpha particle's\ncoming from outer space--",
    "start": "2021190",
    "end": "2029650"
  },
  {
    "text": "space aliens messing\nwith your system. Yeah? AUDIENCE: [INAUDIBLE]",
    "start": "2029650",
    "end": "2034929"
  },
  {
    "text": "CHARLES E. LEISERSON:\nNo, actually--  now, most cache is covered\nby error correction,",
    "start": "2034930",
    "end": "2042610"
  },
  {
    "text": "but the most\nlikely-- if you look, the biggest memory is the DRAMs. That's the most likely\nsource of these things.",
    "start": "2042610",
    "end": "2048908"
  },
  {
    "text": " So in any case, I\nwant to now just talk",
    "start": "2048909",
    "end": "2056860"
  },
  {
    "start": "2056000",
    "end": "2462000"
  },
  {
    "text": "about a few things which-- just some examples of things\nthat might come up for you.",
    "start": "2056860",
    "end": "2063138"
  },
  {
    "text": "So these are ones\nthat I've mentioned, but I just want\nto go through them in a little bit more depth. So one of the things\nis code alignment",
    "start": "2063139",
    "end": "2069460"
  },
  {
    "text": "can make a difference. So what happens is\nyou have your program,",
    "start": "2069460",
    "end": "2074590"
  },
  {
    "text": "and you make a\nchange that you think is improving your program. But what happens, let's say,\nis that it causes an extra byte",
    "start": "2074590",
    "end": "2082690"
  },
  {
    "text": "to be put into the code. So maybe the compiler\nis very smart.",
    "start": "2082690",
    "end": "2089199"
  },
  {
    "text": "You made some little change. Then everything that follows\nit gets shifted down,",
    "start": "2089199",
    "end": "2095440"
  },
  {
    "text": "and so the cache\nalignment issues can be completely different. Something can go across\na page boundary that",
    "start": "2095440",
    "end": "2100960"
  },
  {
    "text": "didn't used to go across\nthe page boundary, and that can have a big\nimpact on your performance.",
    "start": "2100960",
    "end": "2106660"
  },
  {
    "text": "This is like, yikes. This is like, yikes,\nhow am I supposed to--",
    "start": "2106660",
    "end": "2112660"
  },
  {
    "text": "maybe we should just pack up\non performance engineering. ",
    "start": "2112660",
    "end": "2117910"
  },
  {
    "text": "So everybody gets what\nthe issue is there? So in this case, I\ninserted one byte. Well, everything after that,\nit's all linear in memory",
    "start": "2117910",
    "end": "2128316"
  },
  {
    "text": "would change. Here's another one that's\neven more insidious.",
    "start": "2128316",
    "end": "2136390"
  },
  {
    "start": "2136390",
    "end": "2142339"
  },
  {
    "text": "If you change the order in\nwhich the .o files appear on the linker command line,\nthat can actually have a bigger",
    "start": "2142340",
    "end": "2149090"
  },
  {
    "text": "effect than going between\nminus 02 and minus 03. ",
    "start": "2149090",
    "end": "2154855"
  },
  {
    "text": "And when you\ncompile, you compile this order versus this order. You can have actually\nquite a big difference.",
    "start": "2154855",
    "end": "2164869"
  },
  {
    "text": "Yike, OK, so what do you do? Well, first of all, one of\nthe things I'm glad to say",
    "start": "2164870",
    "end": "2170240"
  },
  {
    "text": "is that the compiler people\nhave recognized this, and the situation is not as\ndire as it was years ago.",
    "start": "2170240",
    "end": "2177920"
  },
  {
    "text": "What they do now very often is\ndo a lot of alignment already.",
    "start": "2177920",
    "end": "2185010"
  },
  {
    "text": "So for example, it's common\nfor compilers to produce--",
    "start": "2185010",
    "end": "2190100"
  },
  {
    "text": "to start every function on the\nfirst word of a cache line.",
    "start": "2190100",
    "end": "2195470"
  },
  {
    "text": "That way, when\nthings get slid down, you might apart\nfrom one cache line to the next for where it\nstarts, but you're not",
    "start": "2195470",
    "end": "2203060"
  },
  {
    "text": "going to affect the-- where you lie on the\ncache line, which",
    "start": "2203060",
    "end": "2209000"
  },
  {
    "text": "can make a difference, by the\nway, in branch predictors, and things like that. And so that helps.",
    "start": "2209000",
    "end": "2214370"
  },
  {
    "text": "That really quiets\na lot of things. And in fact, they give\nyou some directives.",
    "start": "2214370",
    "end": "2219380"
  },
  {
    "text": "So LLVM has these switches. As far as I could\ntell, the first one, which is align-all-functions,\nI think--",
    "start": "2219380",
    "end": "2227480"
  },
  {
    "text": "I was unable to test\nthis in advance, but I suspect that it's\nactually already doing this",
    "start": "2227480",
    "end": "2232609"
  },
  {
    "text": "and this is actually a no\nop, because it's already aligning all functions. I don't know that\nfor a fact, but you",
    "start": "2232610",
    "end": "2239540"
  },
  {
    "text": "can give the switch anyway,\nwhich will help if I'm lying.",
    "start": "2239540",
    "end": "2247130"
  },
  {
    "text": "So that forces the\nalignment of all functions. So all functions start\non the cache line, and that way, if you change one\nfunction, it's unlikely to--",
    "start": "2247130",
    "end": "2254900"
  },
  {
    "text": "it won't change the cache\nalignment of another function. It will only change the cache\nalignment of the function that you're messing with.",
    "start": "2254900",
    "end": "2262130"
  },
  {
    "text": "You can also ask it to align\nall blocks in the function. So remember that, in LLVM,\nwe have these basic blocks,",
    "start": "2262130",
    "end": "2269000"
  },
  {
    "text": "these pieces of serial code\nwith links, the basic blocks.",
    "start": "2269000",
    "end": "2278060"
  },
  {
    "text": "So what it will do is\nforce every one of those to be on a boundary. But of course, what\nthat means is now",
    "start": "2278060",
    "end": "2284059"
  },
  {
    "text": "you've got a jump\nbetween these codes, even if it were going to\nbe the next instruction or put in a bunch of no ops.",
    "start": "2284060",
    "end": "2290060"
  },
  {
    "text": "So that can\nsubstantially increase the size of your binary,\nand it can slow you down.",
    "start": "2290060",
    "end": "2302770"
  },
  {
    "text": "But on the other hand, you'll\nget very reliable results from then on, because every\nblock is now cache-aligned.",
    "start": "2302770",
    "end": "2311050"
  },
  {
    "text": "Probably more\npractical is to align-- ",
    "start": "2311050",
    "end": "2317888"
  },
  {
    "text": "is to force the alignment\nof all blocks that have no fall-through predecessors. That is, you don't\nhave to add notes.",
    "start": "2317888",
    "end": "2325329"
  },
  {
    "text": "So this basically reduces it\nto the ones that are usually causing the trouble. So a line of code is more likely\nto avoid performance anomalies,",
    "start": "2325330",
    "end": "2333470"
  },
  {
    "text": "but it can also\nsometimes be slower. And so one of the\nquestions is, well, which matters to you in\nyour particular thing?",
    "start": "2333470",
    "end": "2345040"
  },
  {
    "text": "Here's one that I love. So the example that I gave\nbefore of the order of linking,",
    "start": "2345040",
    "end": "2351310"
  },
  {
    "text": "we have that as a reading\nassignment, by the way, on the web, that paper.",
    "start": "2351310",
    "end": "2356450"
  },
  {
    "text": "And here's another result\nfrom this paper by Mytkowicz",
    "start": "2356450",
    "end": "2363490"
  },
  {
    "text": "and his colleagues. They have a wonderful paper\ncalled Producing Wrong Data",
    "start": "2363490",
    "end": "2370750"
  },
  {
    "text": "Without Doing Anything\nObviously Wrong. So one of the examples they\ngive [INAUDIBLE] the ordering",
    "start": "2370750",
    "end": "2377590"
  },
  {
    "text": "of things, saying that, look,\nthat actually had an impact between 02 and 03.",
    "start": "2377590",
    "end": "2384340"
  },
  {
    "text": "The program's name can affect\nits speed, and here's why. The executable's name ends up\nin an environment variable.",
    "start": "2384340",
    "end": "2392625"
  },
  {
    "text": "So when you start\nup the program, it puts it in an\nenvironment variable. The environment\nvariables, it turns out, end up on the call stack.",
    "start": "2392625",
    "end": "2401260"
  },
  {
    "text": "So you can find out\nfrom the program what's the name of the\nprogram I was invoked with.",
    "start": "2401260",
    "end": "2407080"
  },
  {
    "text": "The length of the name\naffects the stack alignment.",
    "start": "2407080",
    "end": "2412220"
  },
  {
    "text": "You have a longer\nname, they put longer-- a longer piece there. And so if the data happens to\ngo across page boundaries--",
    "start": "2412220",
    "end": "2420700"
  },
  {
    "text": "some critical piece of data goes\non two pages, rather than one--",
    "start": "2420700",
    "end": "2425890"
  },
  {
    "text": "that could have a big\nimpact on your performance. And there are other\ndata alignment problems",
    "start": "2425890",
    "end": "2431080"
  },
  {
    "text": "that can arise.  Yeah, this is kind\nof nasty stuff.",
    "start": "2431080",
    "end": "2436930"
  },
  {
    "text": "So as I say, what we've done-- we've given you a\nvery quiesced system. We have done everything\nwe can to make it so",
    "start": "2436930",
    "end": "2445750"
  },
  {
    "text": "that, when you submit stuff\nin this class, it's measured. But as we get along\nin the semester",
    "start": "2445750",
    "end": "2452830"
  },
  {
    "text": "and you're doing more\nsophisticated stuff, some of this is going\nto fall increasingly to you to do things\nthat make it robust.",
    "start": "2452830",
    "end": "2459520"
  },
  {
    "text": " OK, let's move on. We've talked about quiescing.",
    "start": "2459520",
    "end": "2465700"
  },
  {
    "start": "2462000",
    "end": "2674000"
  },
  {
    "text": "Now, let's talk a little\nabout tools for measuring software performance.",
    "start": "2465700",
    "end": "2472120"
  },
  {
    "text": "So I did a little thinking, and\nI figured that there's actually about five different\nways I know of measuring",
    "start": "2472120",
    "end": "2480579"
  },
  {
    "text": "the performance of a program.  So one is you can measure\nthe program externally.",
    "start": "2480580",
    "end": "2488110"
  },
  {
    "text": "You can run the time command. If you say time and then\ngive a shell command, it will run the shell command\nand then tell you at the end",
    "start": "2488110",
    "end": "2495880"
  },
  {
    "text": "how long it took. You can instrument the program.",
    "start": "2495880",
    "end": "2503950"
  },
  {
    "text": "That means to actually put\ntiming calls into the program. So you can use things\nlike clock_gettime,",
    "start": "2503950",
    "end": "2510370"
  },
  {
    "text": "which I recommend. And we'll talk a little\nbit about these other two, gettimeofday and rdtsc.",
    "start": "2510370",
    "end": "2516070"
  },
  {
    "text": " And you can either do this\nby hand where you say, I'm going to time\nsomething myself,",
    "start": "2516070",
    "end": "2522790"
  },
  {
    "text": "or it turns out you can have\ncompiler support for taking timing measurements.",
    "start": "2522790",
    "end": "2529090"
  },
  {
    "text": "But what that involves is\nchanging the program in order to put these timing calls in.",
    "start": "2529090",
    "end": "2534670"
  },
  {
    "text": "And of course, you\nhave the effect that, if you're perturbing the-- if you're putting\nthese timing calls in,",
    "start": "2534670",
    "end": "2541510"
  },
  {
    "text": "you can be changing the timing. So you've got that problem\nto worry about, as well. ",
    "start": "2541510",
    "end": "2548168"
  },
  {
    "text": "One of the ones is you\ncan interrupt the program. One of the cheapest ways you\ncan do it's just basically",
    "start": "2548168",
    "end": "2553690"
  },
  {
    "text": "take gdb. So you start running\nyour program. You run it under gdb, and\nthen you type Control-C.",
    "start": "2553690",
    "end": "2563180"
  },
  {
    "text": "And then you look. Where is the program? And you do that a few\ntimes, and you say, hey,",
    "start": "2563180",
    "end": "2569730"
  },
  {
    "text": "the same routine is always\nwhere the code is running. Oh, that must be where\nit's spending all its time.",
    "start": "2569730",
    "end": "2576119"
  },
  {
    "text": "That's actually been put into\na thing called poor man's profiler, and then\nyou can actually--",
    "start": "2576120",
    "end": "2582510"
  },
  {
    "text": "this is essentially the\nmethod that gprof uses. And we'll talk about\nthat in a little bit.",
    "start": "2582510",
    "end": "2587790"
  },
  {
    "text": "You can exploit hardware and\noperating system support. So there are a bunch of hardware\ncounters that the operating",
    "start": "2587790",
    "end": "2593760"
  },
  {
    "text": "system and hardware support-- that, for example, perf uses.",
    "start": "2593760",
    "end": "2599670"
  },
  {
    "text": "And so you folks are familiar\nwith the perf tool set. Those are basically using\nhardware and operating system",
    "start": "2599670",
    "end": "2606300"
  },
  {
    "text": "support. And you can also\nsimulate the program. You can run it as a\nsimulation, and then",
    "start": "2606300",
    "end": "2611400"
  },
  {
    "text": "you really can go\nin and do anything you want to understand. But of course, it's\nmuch, much slower,",
    "start": "2611400",
    "end": "2616920"
  },
  {
    "text": "and you hope that your\nsimulator is modeling everything that's have relevance to you. Maybe it's not modeling\nsomething that turns out",
    "start": "2616920",
    "end": "2623760"
  },
  {
    "text": "to be relevant for you. So I'm going to talk it\ngive some examples of each of these five things.",
    "start": "2623760",
    "end": "2630000"
  },
  {
    "text": "So let's start with\nthe time command. So it can measure elapsed time,\nuser time, and system time",
    "start": "2630000",
    "end": "2637950"
  },
  {
    "text": "for an entire program. Does anybody know what\nthese three terms mean? ",
    "start": "2637950",
    "end": "2645869"
  },
  {
    "text": "Elapsed time, user\ntime, and system time. ",
    "start": "2645870",
    "end": "2653710"
  },
  {
    "text": "Sure. AUDIENCE: Is elapsed\ntime [INAUDIBLE] CHARLES E. LEISERSON: Yeah, it's\nwhat we call wall clock time.",
    "start": "2653710",
    "end": "2660730"
  },
  {
    "text": "Good. AUDIENCE: User time is how\nlong a program runs [INAUDIBLE]",
    "start": "2660730",
    "end": "2667130"
  },
  {
    "text": "CHARLES E. LEISERSON:\nIt's in the kernel working on your stuff, as opposed\nto somebody else's.",
    "start": "2667130",
    "end": "2672279"
  },
  {
    "text": "So that's exactly right. So when you run\nthe time command, you get some numbers like\nthis where it says here's",
    "start": "2672280",
    "end": "2679780"
  },
  {
    "text": "the real time,\nhere's the user time, and here's the system time. Now, you might think that the\nuser time and the system time",
    "start": "2679780",
    "end": "2686110"
  },
  {
    "text": "should add up to\nyour total time. Uh-uh-- doesn't work that way.",
    "start": "2686110",
    "end": "2692270"
  },
  {
    "text": "And part of the reason\nis that it may-- the processor may actually\nnot be working on your code.",
    "start": "2692270",
    "end": "2699220"
  },
  {
    "text": "You may be contact switched\nout and something else is in. ",
    "start": "2699220",
    "end": "2705610"
  },
  {
    "text": "So in any case, we have\nthose three types of things--",
    "start": "2705610",
    "end": "2710950"
  },
  {
    "text": "war clock time, the amount\nof processing time spent in the user mode code\nwithin your process,",
    "start": "2710950",
    "end": "2718089"
  },
  {
    "text": "and the systems time, which is\nthe time spent in the kernel, but within your process--",
    "start": "2718090",
    "end": "2724350"
  },
  {
    "text": "for example, satisfying\nsystem calls and such. ",
    "start": "2724350",
    "end": "2733360"
  },
  {
    "text": "Now, the timing call\nthat I recommend you use,",
    "start": "2733360",
    "end": "2739060"
  },
  {
    "text": "and that was used in the example\nthat I gave, is clock_gettime. In particular, there are a\nbunch of options to that,",
    "start": "2739060",
    "end": "2745920"
  },
  {
    "text": "and the one that I strongly\nrecommend is CLOCK_MONOTONIC. And it takes about\n83 nanoseconds",
    "start": "2745920",
    "end": "2753900"
  },
  {
    "text": "to actually read\nwhat the time is. That's about two\norders of magnitude",
    "start": "2753900",
    "end": "2760150"
  },
  {
    "text": "faster than a system call.  And one of the\nthings about it is--",
    "start": "2760150",
    "end": "2766240"
  },
  {
    "text": "this is such a funny\nthing to have to say-- is that guarantees\nnever to run backwards.",
    "start": "2766240",
    "end": "2771279"
  },
  {
    "text": " Turns out the other\ntimers can run backwards.",
    "start": "2771280",
    "end": "2781030"
  },
  {
    "text": "You can take measurements and\ndiscover they're negative. This one does not run backwards.",
    "start": "2781030",
    "end": "2787660"
  },
  {
    "text": "Part of it is because\nsome of the other timers do things like, oh, there's\nthis national standards thing",
    "start": "2787660",
    "end": "2795340"
  },
  {
    "text": "that, periodically,\nyour computer goes out to find out what\nthe real time is,",
    "start": "2795340",
    "end": "2803089"
  },
  {
    "text": "and it resets its clock to\nbe consistent with whatever the global clock is.",
    "start": "2803090",
    "end": "2808250"
  },
  {
    "text": "And that will cause\nthe clock to be updated in a non-standard way, and where\nsuddenly you lost some time",
    "start": "2808250",
    "end": "2816920"
  },
  {
    "text": "or gained some time.  So this is really\nthe [INAUDIBLE]..",
    "start": "2816920",
    "end": "2824330"
  },
  {
    "text": "The only unfortunate\nthing about this is that it is non-deterministic\nhow long it takes.",
    "start": "2824330",
    "end": "2833690"
  },
  {
    "text": "And let me explain a little\nbit what's going on in this. So what happens is it\ntakes a measurement--",
    "start": "2833690",
    "end": "2841470"
  },
  {
    "text": "it has to take two\nmeasurements to figure out what the elapsed time is to find\nout what the actual time is.",
    "start": "2841470",
    "end": "2847640"
  },
  {
    "text": "It can't just take\none measurement because it may have\nbeen swapped out. And the kernel helps support,\nin user space, something",
    "start": "2847640",
    "end": "2856270"
  },
  {
    "text": "that says, here's the\ntotal amount of time you've spent up until you\nstarted your time slice.",
    "start": "2856270",
    "end": "2861890"
  },
  {
    "text": "So when you read that, you\nhave to read those two values. Well, how do you\nknow that you don't have an atomicity violation?",
    "start": "2861890",
    "end": "2867530"
  },
  {
    "text": "You read one of the values,\nyou got switched out, you get switched back\nin-- now, you have",
    "start": "2867530",
    "end": "2873290"
  },
  {
    "text": "a new value for the other one. So the way it does it is\nit reads this register.",
    "start": "2873290",
    "end": "2878300"
  },
  {
    "text": "It reads what the\noperating system has kept as its cumulative\ntime, it reads the clock,",
    "start": "2878300",
    "end": "2884660"
  },
  {
    "text": "and then it reads\nthat register again. And if those two\nthings differ, it knows there's been\na switch in there.",
    "start": "2884660",
    "end": "2890252"
  },
  {
    "text": "If they're the\nsame, it knows there isn't, and that the number\nthat it can take is reliable.",
    "start": "2890252",
    "end": "2895560"
  },
  {
    "text": "So in that kind of\ncase, it will actually take two measurements--\nmore than one measurement.",
    "start": "2895560",
    "end": "2901205"
  },
  {
    "text": "You do it again and you could\nhave another context switch. And you could do it\nagain, and have another-- but this thing is\ngenerally pretty fast.",
    "start": "2901205",
    "end": "2908900"
  },
  {
    "text": "And on my laptop, it takes\nabout 83 nanoseconds to run.",
    "start": "2908900",
    "end": "2916109"
  },
  {
    "text": "There's a lot of people say,\nwell, why don't I just read the cycle counter? That's actually cheaper.",
    "start": "2916110",
    "end": "2921490"
  },
  {
    "text": "It runs in about 32 nanoseconds. And that you can\ndo with the rdtsc--",
    "start": "2921490",
    "end": "2926900"
  },
  {
    "text": " read the timestamp counter--",
    "start": "2926900",
    "end": "2933050"
  },
  {
    "text": "instruction. And you can do it yourself\nby using a built-in assembly.",
    "start": "2933050",
    "end": "2942980"
  },
  {
    "text": "And what it does is\nit returns to how many clock cycles since\nthe boot, and it runs in about 32 nanoseconds.",
    "start": "2942980",
    "end": "2949970"
  },
  {
    "text": "But why not use this? Well, one thing\nis that rdtsc may",
    "start": "2949970",
    "end": "2955609"
  },
  {
    "text": "give different answers\non different cores on the same machine-- so the cycle counters on a\nprocessor by processor basis.",
    "start": "2955610",
    "end": "2965600"
  },
  {
    "text": "Sometimes tsc runs\nbackwards, as I mentioned.",
    "start": "2965600",
    "end": "2971180"
  },
  {
    "text": "And also, the counter may not\nprogress at a constant speed. So remember that\nthe time between--",
    "start": "2971180",
    "end": "2978860"
  },
  {
    "text": "the system is possibly\nslowing and speeding up the counters, and so forth.",
    "start": "2978860",
    "end": "2984920"
  },
  {
    "text": "And converting clock cycles,\nfor that reason, to seconds can be very tricky.",
    "start": "2984920",
    "end": "2991970"
  },
  {
    "text": "So I recommend you stay\naway from this faster counter, this faster timer.",
    "start": "2991970",
    "end": "2998390"
  },
  {
    "text": "The other one is don't\nuse gettimeofday. That's the one most people know.",
    "start": "2998390",
    "end": "3003460"
  },
  {
    "text": "That gives you\nmicrosecond precision.",
    "start": "3003460",
    "end": "3009010"
  },
  {
    "text": "It's not actually\nmicrosecond accurate, but it gives you\nmicrosecond precision. Because it has similar problems,\nwhereas this particular--",
    "start": "3009010",
    "end": "3017350"
  },
  {
    "text": " the clock_gettime MONOTONIC\nhas been very well engineered,",
    "start": "3017350",
    "end": "3028200"
  },
  {
    "text": "in my opinion, to give\ngood reliable numbers at a reasonable cost.",
    "start": "3028200",
    "end": "3034530"
  },
  {
    "text": "Any questions about\nthat, about taking measurements and what to use? This stuff, by the way, over\ntime, it's going to change.",
    "start": "3034530",
    "end": "3044280"
  },
  {
    "text": "People are going to come up\nwith better ways or worse ways. Or they'll say, we're not\ngoing to support that anymore,",
    "start": "3044280",
    "end": "3049920"
  },
  {
    "text": "or what have you. And then, if you're out\nthere as an engineer, you're going to be on your own.",
    "start": "3049920",
    "end": "3055350"
  },
  {
    "text": "Hopefully you know what\nsome of the issues here are and you're prepared\nto be on your own. Yeah? AUDIENCE: [INAUDIBLE]",
    "start": "3055350",
    "end": "3064038"
  },
  {
    "start": "3064038",
    "end": "3074548"
  },
  {
    "text": "CHARLES E. LEISERSON:\nSo when it does that, it aggregates and the\noperating system has to do it. Those numbers\nactually are very--",
    "start": "3074548",
    "end": "3081339"
  },
  {
    "text": "are relatively coarse grained. You cannot time something\nthat's very short--",
    "start": "3081340",
    "end": "3087260"
  },
  {
    "text": "with time, for example-- with the time command.",
    "start": "3087260",
    "end": "3093380"
  },
  {
    "text": "In general, my experience is\nyou should, even with something",
    "start": "3093380",
    "end": "3099319"
  },
  {
    "text": "like-- you can get very fairly\nfine grained measurements with the clock_gettime.",
    "start": "3099320",
    "end": "3110220"
  },
  {
    "text": "You can get fairly\ngood measurements there, but unless you're\naggregating, unless you're running code that's running\naround a second, certainly",
    "start": "3110220",
    "end": "3118840"
  },
  {
    "text": "at least a 10th of a second-- if you're not running\nthings that are that long,",
    "start": "3118840",
    "end": "3125829"
  },
  {
    "text": "you run the risk that you've\ngot really, really bad--",
    "start": "3125830",
    "end": "3132070"
  },
  {
    "text": "you get unlucky. Let me point that out in\nthis particular example.",
    "start": "3132070",
    "end": "3138290"
  },
  {
    "start": "3134000",
    "end": "3252000"
  },
  {
    "text": "So here's the\ninterrupting strategy, which we talked about briefly. This is where I just\nControl-C at random intervals.",
    "start": "3138290",
    "end": "3145240"
  },
  {
    "text": "And you look at\nthe stack and say, who needs a fancy profiler? In fact, there are\nlarge companies",
    "start": "3145240",
    "end": "3152589"
  },
  {
    "text": "who use this for debugging\ntheir big, big codes.",
    "start": "3152590",
    "end": "3158890"
  },
  {
    "text": "Facebook comes to mind. They actually use\nthis technique. It is a really easy worthwhile\ntechnique for figuring out",
    "start": "3158890",
    "end": "3166690"
  },
  {
    "text": "where time is being spent. Now, there are\nsome other things. The Poor Man's\nProfiler-- and people",
    "start": "3166690",
    "end": "3173570"
  },
  {
    "text": "have built things like gprof\nand so forth to increment-- to automate the strategy so\nyou get this information.",
    "start": "3173570",
    "end": "3181660"
  },
  {
    "text": "Because then it\nautomatically [INAUDIBLE] looks at the stack,\nwhat's being executed, puts that into a call\ngraph and so forth,",
    "start": "3181660",
    "end": "3188589"
  },
  {
    "text": "and figures out where\nthe time is going. But neither of those\nprograms is accurate,",
    "start": "3188590",
    "end": "3194290"
  },
  {
    "text": "if you don't obtain\nenough samples. And just to give you an example,\ngprof samples only 100 times",
    "start": "3194290",
    "end": "3200140"
  },
  {
    "text": "per second. So if you're going to use gprof\nfor timing something that's",
    "start": "3200140",
    "end": "3206339"
  },
  {
    "text": "only a second long, you\nonly got 100 samples. How many samples is 100? That's not actually a real lot.",
    "start": "3206340",
    "end": "3213450"
  },
  {
    "text": "And so you get wildly inaccurate\nnumbers from interrupting.",
    "start": "3213450",
    "end": "3220030"
  },
  {
    "text": "But on the other hand,\nfor a quick type-- we use gprof all the time.",
    "start": "3220030",
    "end": "3225100"
  },
  {
    "text": "It's quick. We do Control-C all the time. It's really quick. I don't have to\ninstall anything.",
    "start": "3225100",
    "end": "3230230"
  },
  {
    "text": "I just take a look, and it\ngives me a first cut it at what",
    "start": "3230230",
    "end": "3236230"
  },
  {
    "text": "I want to do. It all depends. You don't need all the\nsurgically precise tools",
    "start": "3236230",
    "end": "3243520"
  },
  {
    "text": "all the time. Sometimes a really dumb tool\nis adequate for the job, and a lot quicker to deal with.",
    "start": "3243520",
    "end": "3249400"
  },
  {
    "text": " Hardware counters-- so one of\nthe nice things that's happened",
    "start": "3249400",
    "end": "3256660"
  },
  {
    "start": "3252000",
    "end": "3485000"
  },
  {
    "text": "in recent years is that there\nhas become available a library",
    "start": "3256660",
    "end": "3262240"
  },
  {
    "text": "called libpfm4, which is\nvirtualizing all the hardware",
    "start": "3262240",
    "end": "3268330"
  },
  {
    "text": "counters so that you have\naccess to them with--",
    "start": "3268330",
    "end": "3274130"
  },
  {
    "text": "to all of these types of\nevents on a per process basis. So normally, there's\nthe hardware counters,",
    "start": "3274130",
    "end": "3280270"
  },
  {
    "text": "but then you switch to some-- if there's context switching\ngoing on to some other process,",
    "start": "3280270",
    "end": "3286210"
  },
  {
    "text": "then what happens\nto your counters? They have to be saved,\nthey have to be updated. So anyway, libpfm4 does all\nof that kind of virtualization",
    "start": "3286210",
    "end": "3296840"
  },
  {
    "text": "to make it so that the\ncounter-- you can view it as if it's your own counter.",
    "start": "3296840",
    "end": "3302110"
  },
  {
    "text": "And perf stat, for\nexample, employs that. There are a lot of\nesoteric hardware counters.",
    "start": "3302110",
    "end": "3309370"
  },
  {
    "text": "And as I say, good\nluck in figuring out what they all measure,\nbecause they often are not well-documented.",
    "start": "3309370",
    "end": "3315849"
  },
  {
    "text": "A few of the important\nones are well-documented, but most of them are\nvery poorly documented",
    "start": "3315850",
    "end": "3321220"
  },
  {
    "text": "exactly what it does. A really good example\nwas we had somebody",
    "start": "3321220",
    "end": "3327790"
  },
  {
    "text": "who was looking at cache\nmisses to figure out",
    "start": "3327790",
    "end": "3333880"
  },
  {
    "text": "how much bandwidth-- so\nlast level cache, L3 cache misses to count\nhow much data was",
    "start": "3333880",
    "end": "3340869"
  },
  {
    "text": "being transferred from DRAM.",
    "start": "3340870",
    "end": "3348100"
  },
  {
    "text": "And they were getting\ncurious numbers",
    "start": "3348100",
    "end": "3353890"
  },
  {
    "text": "that didn't seem to measure up. And it's like, wait a minute,\nhave a miss, moves from DRAM",
    "start": "3353890",
    "end": "3365859"
  },
  {
    "text": "onto the chip. Why is that not\ncounting how much",
    "start": "3365860",
    "end": "3371110"
  },
  {
    "text": "stuff is being\nmoved, if I count up how many cache misses times how\nmany bytes in the cache line?",
    "start": "3371110",
    "end": "3376480"
  },
  {
    "text": "Which is what, on the\nmachines we're using?  How many bytes in a cache line\non the machines we're using?",
    "start": "3376480",
    "end": "3384475"
  },
  {
    "start": "3384476",
    "end": "3390550"
  },
  {
    "text": "OK, 64. OK, gotcha, you guys are-- OK, 64. But not every machine has that.",
    "start": "3390550",
    "end": "3397050"
  },
  {
    "text": "But anyway, so why was this\nnot measuring how much stuff is being moved? ",
    "start": "3397050",
    "end": "3405875"
  },
  {
    "text": "I'll give you a hint. It used to measure how\nmuch stuff was being moved,",
    "start": "3405875",
    "end": "3411710"
  },
  {
    "text": "but then those architects, they\nare such pesky, clever people,",
    "start": "3411710",
    "end": "3418830"
  },
  {
    "text": "and they put in a great feature. AUDIENCE: Prefetching. CHARLES E. LEISERSON:\nPrefetching.",
    "start": "3418830",
    "end": "3424480"
  },
  {
    "text": "They put it in prefetching. There's things that\nfetch it, and it doesn't update that counter.",
    "start": "3424480",
    "end": "3431260"
  },
  {
    "text": "So if you want, you have to\ncount how many prefetching incidents you have, as well.",
    "start": "3431260",
    "end": "3436690"
  },
  {
    "text": "So you can often cobble\nthis together, but good luck figuring out what\nsome of these do.",
    "start": "3436690",
    "end": "3441970"
  },
  {
    "text": "Also, watch out. You may think that the tools let\nyou measure a lot of counters,",
    "start": "3441970",
    "end": "3447730"
  },
  {
    "text": "if you want. But if you read\nthe fine print, it turns out that, if you do\nmore than four or five,",
    "start": "3447730",
    "end": "3455080"
  },
  {
    "text": "it starts essentially time\nsharing the available counting",
    "start": "3455080",
    "end": "3460510"
  },
  {
    "text": "bandwidth that it has, and it's\nnot-- it's actually just doing something statistical, rather\nthan actually counting them.",
    "start": "3460510",
    "end": "3467800"
  },
  {
    "text": "So you can't count more than\nlike four or five-- actually, four or five I think\nis a high number.",
    "start": "3467800",
    "end": "3473630"
  },
  {
    "text": "But somebody I know well,\nwho knows this stuff, said four or five is\nprobably what it is today.",
    "start": "3473630",
    "end": "3482319"
  },
  {
    "text": "So that's hardware counters. So hardware counters\nare good technique.",
    "start": "3482320",
    "end": "3487760"
  },
  {
    "start": "3485000",
    "end": "3599000"
  },
  {
    "text": "Next one is simulators. So things like\ncachegrind usually run much slower than\nreal time, but what's",
    "start": "3487760",
    "end": "3495099"
  },
  {
    "text": "great about simulators is you\ncan get repeatable numbers out of them.",
    "start": "3495100",
    "end": "3500760"
  },
  {
    "text": "You run the code. You run it again. If you've set up everything\nright, you can get-- and you can see what's\ngoing on inside.",
    "start": "3500760",
    "end": "3507800"
  },
  {
    "text": "The downside is that they don't\nnecessarily-- it's slower, and it doesn't necessarily\nmodel everything going on in the cache.",
    "start": "3507800",
    "end": "3513860"
  },
  {
    "text": "But for things\nlike cache misses, this is a great tool\nto just figure out what's the fundamental cache--",
    "start": "3513860",
    "end": "3521540"
  },
  {
    "text": "and we'll talk about that\nwhen we talk about caches in the next couple of weeks.",
    "start": "3521540",
    "end": "3527430"
  },
  {
    "text": "And if you want a\nparticular statistic, in principle, you can\ngo in, and if it's an open-source simulator\nlike cachegrind is,",
    "start": "3527430",
    "end": "3536750"
  },
  {
    "text": "you can collect it without\nperturbing the simulation. So any question about these\nways of collecting measurements?",
    "start": "3536750",
    "end": "3544597"
  },
  {
    "text": "There are a whole bunch\nof ways of doing it-- they all have pros and cons. They all can be useful\nin a given context.",
    "start": "3544597",
    "end": "3551870"
  },
  {
    "text": "They all have some flaws.  A really good strategy--",
    "start": "3551870",
    "end": "3557920"
  },
  {
    "text": "I'll talk about this\nlater-- is triangulation. I never take one\nmeasurement and believe it.",
    "start": "3557920",
    "end": "3565700"
  },
  {
    "text": "I always want to take at\nleast two measurements in different ways,\nand make sure they're",
    "start": "3565700",
    "end": "3571480"
  },
  {
    "text": "telling me the same story-- triangulation. If there's a\ndiscrepancy, then I want",
    "start": "3571480",
    "end": "3577300"
  },
  {
    "text": "to know what's causing\nthe discrepancy. But I never trust one number,\nand I never trust any numbers",
    "start": "3577300",
    "end": "3582430"
  },
  {
    "text": "without having a model for\nwhat I think is coming up. And in fact, that's\nwhat we're going to talk",
    "start": "3582430",
    "end": "3587650"
  },
  {
    "text": "about next is\nperformance modeling. So any questions about\nmeasurements and such?",
    "start": "3587650",
    "end": "3595930"
  },
  {
    "text": "Isn't it good we have AWS run? Number comes back,\nit's the number. And it's actually a\npretty good number.",
    "start": "3595930",
    "end": "3602565"
  },
  {
    "text": "We've worked very hard to make\nthat a pretty good number. ",
    "start": "3602565",
    "end": "3611940"
  },
  {
    "text": "So performance\nmodeling-- so yeah, we cover a lot of stuff in this\nclass, as I think some of you",
    "start": "3611940",
    "end": "3619079"
  },
  {
    "text": "have started to notice.  But really,\nperformance-- software",
    "start": "3619080",
    "end": "3626940"
  },
  {
    "text": "performance engineering\nis pretty simple process. You take a program that you\nwant to make go fast, program A.",
    "start": "3626940",
    "end": "3636900"
  },
  {
    "text": "You make a change to program A\nto produce a hopefully faster program A prime.",
    "start": "3636900",
    "end": "3643230"
  },
  {
    "text": "You measure the performance\nof program A prime. If A prime beats A, then\nyou said A equals A prime.",
    "start": "3643230",
    "end": "3651569"
  },
  {
    "text": "And if A is still not fast\nenough, you repeat the process. ",
    "start": "3651570",
    "end": "3658140"
  },
  {
    "text": "That's basically\nwhat you're doing. It's pretty simple. ",
    "start": "3658140",
    "end": "3664230"
  },
  {
    "text": "And as should be apparent, if\nyou can't measure performance reliably, it's hard to make\nmany small changes that add up,",
    "start": "3664230",
    "end": "3672960"
  },
  {
    "text": "because it's hard to tell\nwhether A beats A prime-- sorry, whether A prime\nbeats A. It's hard to tell.",
    "start": "3672960",
    "end": "3684000"
  },
  {
    "text": "And so as a consequence,\nwhat we want to do is we want a model of performance\nthat we're in a position",
    "start": "3684000",
    "end": "3689819"
  },
  {
    "text": "to draw accurate conclusions. So we want to do things\nlike drive the variability",
    "start": "3689820",
    "end": "3696270"
  },
  {
    "text": "of measurement down to 0. And we want to do\nthings like figure out ways of using\nstatistics to give us",
    "start": "3696270",
    "end": "3704220"
  },
  {
    "text": "more accurate picture\nof what's going on then maybe what is apparent. And that's basically\nwhat we're going",
    "start": "3704220",
    "end": "3709260"
  },
  {
    "text": "to talk about for a little bit. Part of what I'm going to do is\ngoing to talk about statistics.",
    "start": "3709260",
    "end": "3715140"
  },
  {
    "text": "How many people have had a\nstatistics class, or a machine learning class,\nor something where you dealt with statistics?",
    "start": "3715140",
    "end": "3722250"
  },
  {
    "text": "Beyond probability, I mean. I mean real statistics, sample\nmeans, and things like that.",
    "start": "3722250",
    "end": "3728493"
  },
  {
    "text": "So a few of you. OK. The basics of what\nyou need to know you can find from\nWikipedia, or MathWorld,",
    "start": "3728493",
    "end": "3735870"
  },
  {
    "text": "or someplace like that.  And I'm not going to try to\nteach you Statistics 101,",
    "start": "3735870",
    "end": "3744029"
  },
  {
    "text": "but I will point you\nin some directions, and give you some pointers\nto some tools you can do.",
    "start": "3744030",
    "end": "3749220"
  },
  {
    "text": "OK, so here's a puzzle. Suppose you measure\nthe performance of a deterministic\nprogram 100 times",
    "start": "3749220",
    "end": "3756270"
  },
  {
    "text": "on a computer with some\ninterfering background noise. What statistic best\nrepresents the raw performance",
    "start": "3756270",
    "end": "3765299"
  },
  {
    "text": "of the software? Is it the mean of the-- the\narithmetic mean of those runs?",
    "start": "3765300",
    "end": "3772350"
  },
  {
    "text": "Is it the geometric\nmean of those runs? Is it the median of the runs?",
    "start": "3772350",
    "end": "3778119"
  },
  {
    "text": "Is it the maximum of the runs? Is that the minimum of the runs?",
    "start": "3778120",
    "end": "3783440"
  },
  {
    "text": "This is where it's helpful,\nif we had those clickers or whatever they have.",
    "start": "3783440",
    "end": "3789170"
  },
  {
    "text": "But we don't, so I\nask people to vote. Now, I want everybody to vote.",
    "start": "3789170",
    "end": "3794600"
  },
  {
    "text": "And once again,\nit doesn't matter if you're right or wrong. You can be right for\nthe wrong reasons.",
    "start": "3794600",
    "end": "3799610"
  },
  {
    "text": "You can be wrong, but\nhave the idea right. But it's fun when everybody\nparticipates-- certainly",
    "start": "3799610",
    "end": "3806240"
  },
  {
    "text": "more fun for me when I see hands\ngo up than when I see people sitting there looking bored.",
    "start": "3806240",
    "end": "3812780"
  },
  {
    "text": "OK, how many people think\narithmetic mean would be a good way of measuring\nthe raw performance?",
    "start": "3812780",
    "end": "3819782"
  },
  {
    "text": "Arithmetic mean. That's the most common\nstatistic that we ever gather. OK, what about geometric mean?",
    "start": "3819782",
    "end": "3827840"
  },
  {
    "text": "OK. What about median? ",
    "start": "3827840",
    "end": "3832980"
  },
  {
    "text": "OK, good. What about maximum? One for maximum.",
    "start": "3832980",
    "end": "3838000"
  },
  {
    "text": "What about minimum? OK. So turns out that actually,\nthese are all good",
    "start": "3838000",
    "end": "3845070"
  },
  {
    "text": "measures to take, and\nit depends upon what you're doing with them. But turns out minimum is--",
    "start": "3845070",
    "end": "3854040"
  },
  {
    "text": "does the best it\nnoise rejection. And that's because you expect\nany measurements higher",
    "start": "3854040",
    "end": "3859740"
  },
  {
    "text": "than the minimum, if it's a\ndeterministic program and so forth, that's going\nto be due to noise.",
    "start": "3859740",
    "end": "3866682"
  },
  {
    "text": "So if you're really\ninterested in knowing how long fundamentally your\ncode takes on the underlying",
    "start": "3866682",
    "end": "3872305"
  },
  {
    "text": "hardware, when there's\nother things going on, taking the minimum rejects it. Now, you might say, the\nmedian also rejects noise,",
    "start": "3872305",
    "end": "3880809"
  },
  {
    "text": "but it doesn't, because if\nyou view your program as being",
    "start": "3880810",
    "end": "3887860"
  },
  {
    "text": "its running time plus\nnoise, then the median is going to give\nyou some number that",
    "start": "3887860",
    "end": "3893770"
  },
  {
    "text": "is in the midst of the noise. It's going to have\nsome component.",
    "start": "3893770",
    "end": "3899060"
  },
  {
    "text": "So minimum is the only one that\nreally rejects all of them. But they're all useful\nmeasures in different contexts.",
    "start": "3899060",
    "end": "3906620"
  },
  {
    "text": "And there are ways that you\ncan use the mean and some of these other ones, as\nwe'll talk about in a minute,",
    "start": "3906620",
    "end": "3914000"
  },
  {
    "text": "to get information\nabout making decisions, because is the thing\nthat we're after is not",
    "start": "3914000",
    "end": "3919130"
  },
  {
    "text": "necessarily always the raw\nperformance of the software. Sometimes we're interested\nin whether A beats",
    "start": "3919130",
    "end": "3924800"
  },
  {
    "text": "B. That's a different\nquestion than how fast is this fundamentally go.",
    "start": "3924800",
    "end": "3931610"
  },
  {
    "text": "Now, so there are a lot of\ndifferent types of summary statistics, and there's lots of\nreasons to pick different ones.",
    "start": "3931610",
    "end": "3941730"
  },
  {
    "text": "So for example, if you're\ninterested in serving as many requests as possible\nin a web server, for example,",
    "start": "3941730",
    "end": "3947843"
  },
  {
    "text": "you're going to be looking\nat something like the CPU utilization and taking\nthe arithmetic mean",
    "start": "3947843",
    "end": "3954120"
  },
  {
    "text": "to try to understand\nhow those things add up.",
    "start": "3954120",
    "end": "3959280"
  },
  {
    "text": "If all tasks have\nto be completed within 10 milliseconds,\nthen you're",
    "start": "3959280",
    "end": "3964955"
  },
  {
    "text": "going to look at the--\nyou're looking at the total, and you're going to\nadd it up, and you're going to be interested in making\nsure that each one is small.",
    "start": "3964955",
    "end": "3971700"
  },
  {
    "text": "And that's also\nwhat the mean does. And you're going to be\nlooking at wall clock time. If you want to ensure that\nmost requests are satisfied",
    "start": "3971700",
    "end": "3979440"
  },
  {
    "text": "within 100\nmilliseconds, you might be looking at the 90th\npercentile behavior.",
    "start": "3979440",
    "end": "3986097"
  },
  {
    "text": "And you'll say, yes, I\nwon't make every one, but I want 90% of the time\nI want to get it there, and I'll be using something\nlike walk clock time.",
    "start": "3986097",
    "end": "3993090"
  },
  {
    "start": "3993090",
    "end": "3998730"
  },
  {
    "text": "In a lot of web\ncompanies, there's a thing called a\nservice level agreement.",
    "start": "3998730",
    "end": "4004640"
  },
  {
    "text": "This is what they should\ngive you for your telephone, but they don't. Tells you what kind of\nservice you can expect,",
    "start": "4004640",
    "end": "4011060"
  },
  {
    "text": "and if they don't meet\nthat service requirement, then they haven't\nlived up to it. Instead, we buy these phones\nand we get the service,",
    "start": "4011060",
    "end": "4019410"
  },
  {
    "text": "and we just get whatever\nthey decide to give us. But if you're a big\ncompany, you insist",
    "start": "4019410",
    "end": "4027290"
  },
  {
    "text": "that you get some kind of\nservice out of the people that you're using. And so there that's typically\nsome weighted combination,",
    "start": "4027290",
    "end": "4034070"
  },
  {
    "text": "and you're using\nmultiple things. You might want to\nfit into a machine with 100 megabytes of memory,\nsome sort of embedded machine",
    "start": "4034070",
    "end": "4044763"
  },
  {
    "text": "or whatever, then you're going\nto be interested in maximum of the memory use. So it's not all the\nperformances, not",
    "start": "4044763",
    "end": "4050089"
  },
  {
    "text": "all just time. You might want the\nleast cost possible, and you're looking at\nthings like energy use,",
    "start": "4050090",
    "end": "4055910"
  },
  {
    "text": "et cetera, or the fastest,\nbiggest, best solutions. You can see average comes\nup a lot as one of the ways.",
    "start": "4055910",
    "end": "4064790"
  },
  {
    "text": "So I wanted to though cover\none particular example, which I find is the most commonplace\nI see a misuse of summary",
    "start": "4064790",
    "end": "4073220"
  },
  {
    "text": "statistics, and that's for\nwhen I'm summarizing ratios. So suppose I have\ntwo programs A and B,",
    "start": "4073220",
    "end": "4082070"
  },
  {
    "text": "and I run the four trials. Normally, you'd run a lot more,\nbut I wanted to fit on a slide.",
    "start": "4082070",
    "end": "4088250"
  },
  {
    "text": "And program A, on whatever trial\n1 was, took nine seconds, say.",
    "start": "4088250",
    "end": "4095150"
  },
  {
    "text": " On trial 2, it took 8-- 2 and 10.",
    "start": "4095150",
    "end": "4100609"
  },
  {
    "text": "And program B you've\ngot 3, 2, 20, and 2. So I can compute the\nmean for each of those.",
    "start": "4100609",
    "end": "4108210"
  },
  {
    "text": "So the mean of the program A is\n8.25, and the mean of program B is 4.75 over those\nfour benchmarks.",
    "start": "4108210",
    "end": "4117259"
  },
  {
    "text": "I can also take a look at\nhow much is A winning--",
    "start": "4117260",
    "end": "4122989"
  },
  {
    "text": "sorry, is B winning over A.\nAnd so if I take the ratios,",
    "start": "4122990",
    "end": "4128899"
  },
  {
    "text": "I then get 3, 4, 1/10,\nand 5 for a mean of 3.13.",
    "start": "4128899",
    "end": "4139609"
  },
  {
    "text": "It's actually\n3.125, but I'm only keeping things to two digits.",
    "start": "4139609",
    "end": "4146060"
  },
  {
    "text": "And so if I was asked\nto summarize this, I could perhaps\nconclude that program 3",
    "start": "4146060",
    "end": "4151810"
  },
  {
    "text": "is more than three times\nbetter than program A, based on these statistics.",
    "start": "4151810",
    "end": "4158420"
  },
  {
    "text": "But there's a bug\nin that reasoning. Can anybody see the bug? ",
    "start": "4158420",
    "end": "4168440"
  },
  {
    "text": "This is wrong. ",
    "start": "4168440",
    "end": "4179263"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] ",
    "start": "4179264",
    "end": "4185198"
  },
  {
    "text": "CHARLES E. LEISERSON:\nIt doesn't make sense to take the arithmetic\nmean of a bunch of ratios.",
    "start": "4185198",
    "end": "4191040"
  },
  {
    "text": "Why's that? Yeah, one thing\nhere is that you can see is that-- notice that\nthe mean of the ratio",
    "start": "4191040",
    "end": "4199800"
  },
  {
    "text": "is not the same as\nthe ratio of the mean. That should be suspicious.",
    "start": "4199800",
    "end": "4208000"
  },
  {
    "text": "Should I not be comparing\nthe ratio of the mean, or should I be comparing\nthe mean of the ratios? ",
    "start": "4208000",
    "end": "4214570"
  },
  {
    "text": "So that's not particularly good. Another thing is suppose I take\na look at the ratio B over A,",
    "start": "4214570",
    "end": "4220420"
  },
  {
    "text": "and I take the arithmetic mean. Then what I discover\nis that A is better",
    "start": "4220420",
    "end": "4226210"
  },
  {
    "text": "by a factor of almost\nthree than B. So clearly,",
    "start": "4226210",
    "end": "4231580"
  },
  {
    "text": "taking the average of the means\nis the average of the ratios.",
    "start": "4231580",
    "end": "4242950"
  },
  {
    "text": "There's something\nwrong with that. And in particular, as I\nsay, the ratio of the means",
    "start": "4242950",
    "end": "4249784"
  },
  {
    "text": "is not the mean of the ratios.  And then your\nintuition is spot on.",
    "start": "4249785",
    "end": "4256389"
  },
  {
    "text": " Suppose instead I compute\nthe geometric mean.",
    "start": "4256390",
    "end": "4263360"
  },
  {
    "text": "So geometric mean is\nbasically like taking the average of the logs, the\narithmetic mean of the logs.",
    "start": "4263360",
    "end": "4269860"
  },
  {
    "text": "So you're basically\ntaking the product and taking the n-th\nroot of the product.",
    "start": "4269860",
    "end": "4276750"
  },
  {
    "text": "And I've computed\nthat for these things. And now I've taken\nthe arithmetic mean",
    "start": "4276750",
    "end": "4282670"
  },
  {
    "text": "of the run times,\nbecause that makes sense. That's kind of an average\nover these things, how long did things take.",
    "start": "4282670",
    "end": "4288700"
  },
  {
    "text": "And now I look at A over B and\nB over A, I get the same thing.",
    "start": "4288700",
    "end": "4295720"
  },
  {
    "text": "And it's, in fact, the case\nthat the ratio of the means is the mean of the ratios.",
    "start": "4295720",
    "end": "4301990"
  },
  {
    "text": "So when you look\nat ratios, there's another place that comes\nup where you look at rates.",
    "start": "4301990",
    "end": "4308080"
  },
  {
    "text": "And I've seen people\nlook at rates, and it turns out when you're\nlooking at rates, often it's the harmonic mean\nthat you want in order",
    "start": "4308080",
    "end": "4315400"
  },
  {
    "text": "to preserve these good\nmathematical properties, and make sure that-- it's really bad\nif I do this thing",
    "start": "4315400",
    "end": "4322360"
  },
  {
    "text": "and I say, look how\nmuch better A is than B, and somebody-- if I\nflipped the ratio, B would be better than\nA. That's really suspect",
    "start": "4322360",
    "end": "4329800"
  },
  {
    "text": "If the identity of\nwhether you're A or B, and which one was the numerator,\nwhich in the denominator",
    "start": "4329800",
    "end": "4336489"
  },
  {
    "text": "had an impact, that\nwould be really suspect.",
    "start": "4336490",
    "end": "4343000"
  },
  {
    "text": "So this is the\nkind of thing, when you're thinking about how\nyou're reporting things and so forth, you want to be\ncareful about, when you're",
    "start": "4343000",
    "end": "4350112"
  },
  {
    "text": "aggregating things,\nto make sure that you have the basic mathematical\nproperties met.",
    "start": "4350112",
    "end": "4357239"
  },
  {
    "text": "And what's nice is 1 divided\nby 1.57 here is, in fact, 0.64.",
    "start": "4357240",
    "end": "4365890"
  },
  {
    "text": "So it didn't matter which\nway I took the ratio-- I got the same answer. ",
    "start": "4365890",
    "end": "4371590"
  },
  {
    "text": "So B is better that by\na factor of about 1.6, something like that. It was a little bit better.",
    "start": "4371590",
    "end": "4377090"
  },
  {
    "text": "It's not three times better. And it for sure isn't the\ncase that A is better than B by a factor of three.",
    "start": "4377090",
    "end": "4383320"
  },
  {
    "text": "OK, good. Any questions about that? ",
    "start": "4383320",
    "end": "4394909"
  },
  {
    "text": "Good, OK. Suppose as I want to compare\ntwo programs, A and B, which",
    "start": "4394910",
    "end": "4400850"
  },
  {
    "text": "is faster, and I have a\nslightly noisy computer on which to measure their performance.",
    "start": "4400850",
    "end": "4405980"
  },
  {
    "text": "What's a good strategy? ",
    "start": "4405980",
    "end": "4412460"
  },
  {
    "text": "What's a good strategy for\ncomparing and figuring out whether A is better than\nB, or B better than A? ",
    "start": "4412460",
    "end": "4421020"
  },
  {
    "text": "Sure.  AUDIENCE: [INAUDIBLE]",
    "start": "4421020",
    "end": "4428352"
  },
  {
    "start": "4428352",
    "end": "4439605"
  },
  {
    "text": "CHARLES E. LEISERSON:\nSorry, so you're saying I'm going to run multiple runs?",
    "start": "4439605",
    "end": "4444750"
  },
  {
    "text": "That's a great idea. We're going to do multiple runs. And what am I doing\nfor each of these runs?",
    "start": "4444750",
    "end": "4451260"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] CHARLES E. LEISERSON: The\nlow order statistic of the--",
    "start": "4451260",
    "end": "4459090"
  },
  {
    "text": "for example, minimum or 10%\nor something really low. OK.",
    "start": "4459090",
    "end": "4464705"
  },
  {
    "text": "So I take that. I have one number for program\nA. I have one number for program B. I ran them n times.",
    "start": "4464705",
    "end": "4470639"
  },
  {
    "text": "What else? AUDIENCE: [INAUDIBLE]",
    "start": "4470640",
    "end": "4476220"
  },
  {
    "text": "CHARLES E. LEISERSON:\nWell, am I comparing the two minimums I've got there,\nor am I comparing each one?",
    "start": "4476220",
    "end": "4487782"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] ",
    "start": "4487782",
    "end": "4496685"
  },
  {
    "text": "CHARLES E. LEISERSON: Oh,\nI see what you're saying. Take all the measurements\nthat go below your 10%--",
    "start": "4496685",
    "end": "4503130"
  },
  {
    "text": "cheapest ones-- and\nthen compare those. OK.",
    "start": "4503130",
    "end": "4508350"
  },
  {
    "text": " So you're substantially doing\nnoise reduction is what you're",
    "start": "4508350",
    "end": "4516090"
  },
  {
    "text": "saying, and then\nother than that, you're comparing\nby comparing means.",
    "start": "4516090",
    "end": "4522449"
  },
  {
    "text": "OK, that's an\ninteresting methodology. You'd probably get something\nreasonable, I would think,",
    "start": "4522450",
    "end": "4530250"
  },
  {
    "text": "but you couldn't prove\nanything about it. But that's an interesting idea.",
    "start": "4530250",
    "end": "4535530"
  },
  {
    "text": "Yeah, that's an\ninteresting idea. What else? Yeah? AUDIENCE: You run both, and\nthen see which one is faster",
    "start": "4535530",
    "end": "4541887"
  },
  {
    "text": "and mark it. And then run them both again,\nsee which one is faster, mark it again-- mark that one. And keep doing that, and then\nsee how many marks [INAUDIBLE]",
    "start": "4541888",
    "end": "4549198"
  },
  {
    "text": "CHARLES E. LEISERSON:\nGood, so you're saying to a bunch of\nhead-to-head runs,",
    "start": "4549198",
    "end": "4554220"
  },
  {
    "text": "and mark just who wins\nover those things. ",
    "start": "4554220",
    "end": "4559630"
  },
  {
    "text": "So one wins more than the\nother, or the other wins more than the one? AUDIENCE: Yeah. CHARLES E. LEISERSON:\nWhat good is that?",
    "start": "4559630",
    "end": "4565497"
  },
  {
    "text": "AUDIENCE: If the time it takes\nfor each program to finish is a random variable that\ntells you [INAUDIBLE]",
    "start": "4565497",
    "end": "4571935"
  },
  {
    "text": "or how much more [INAUDIBLE] CHARLES E. LEISERSON: Yeah. So this is actually\na very good strategy",
    "start": "4571935",
    "end": "4578280"
  },
  {
    "text": "and actually has some\nstatistical muscle behind it.",
    "start": "4578280",
    "end": "4583800"
  },
  {
    "text": "So what you can do is do\nn head-to-head comparisons between A and B. So in\nboth these examples, yeah,",
    "start": "4583800",
    "end": "4591960"
  },
  {
    "text": "we better run it a few times. And suppose that a\nwins more frequently.",
    "start": "4591960",
    "end": "4600000"
  },
  {
    "text": "So now, what we want to do in\nthe statistics, where they call the null hypothesis,\nis that B beats A.",
    "start": "4600000",
    "end": "4607800"
  },
  {
    "text": "So even though we see A beats B,\nthe null hypothesis that we're wrong, and that A beats--",
    "start": "4607800",
    "end": "4614159"
  },
  {
    "text": "that B beats A. And what we then cannot\ncalculate is what they call the p-value, which is the\nprobability we'd observe that",
    "start": "4614160",
    "end": "4621600"
  },
  {
    "text": "B-- that A beats B more\noften than we did.",
    "start": "4621600",
    "end": "4627060"
  },
  {
    "text": "So for example,\nfor each of these-- to imagine that\nin the worst case,",
    "start": "4627060",
    "end": "4633970"
  },
  {
    "text": "let's just say that they\nwere equal in performance, and all we're\nseeing is the noise.",
    "start": "4633970",
    "end": "4640739"
  },
  {
    "text": "Then I would expect\nthat I would get about an even number of things.",
    "start": "4640740",
    "end": "4646630"
  },
  {
    "text": "And so the further that I\ndeviate from them being even, especially once I--",
    "start": "4646630",
    "end": "4652860"
  },
  {
    "text": "that distribution is essentially\na Bernoulli distribution. The further I get out--\nor a T distribution,",
    "start": "4652860",
    "end": "4660280"
  },
  {
    "text": "if you have small numbers. As I get further out from--",
    "start": "4660280",
    "end": "4666510"
  },
  {
    "text": "away from the mean by what\nthe variance of just flipping coins, in that case,\nI can calculate what's",
    "start": "4666510",
    "end": "4672869"
  },
  {
    "text": "the probability that\nI'm seeing something that would be that extreme. And that gives me a good reason\nto reject the null hypothesis,",
    "start": "4672870",
    "end": "4681239"
  },
  {
    "text": "if it turns out that\ndeviates by a lot. So this is very standard\nstuff in the social sciences.",
    "start": "4681240",
    "end": "4688242"
  },
  {
    "text": "Who's had a course in\nthis kind of stuff, in testing null hypothesis,\nbiology, and so forth?",
    "start": "4688242",
    "end": "4693750"
  },
  {
    "text": "You remember anything from it? Just vaguely? Yeah, yeah.",
    "start": "4693750",
    "end": "4699140"
  },
  {
    "text": "OK, that's fine. One of the things I\nhave found in life",
    "start": "4699140",
    "end": "4704250"
  },
  {
    "text": "is that I don't\nremember anything I learned in college to speak of.",
    "start": "4704250",
    "end": "4709530"
  },
  {
    "text": "What I had to do is relearn it,\nbut I relearned it a lot faster than when I was in college. ",
    "start": "4709530",
    "end": "4716820"
  },
  {
    "text": "And so that's part\nof this is also-- so when you see it again--\noh, OK, now, you know how to go about learning this.",
    "start": "4716820",
    "end": "4721850"
  },
  {
    "text": " Once again, you can look this\nup on Wikipedia or whatever,",
    "start": "4721850",
    "end": "4729510"
  },
  {
    "text": "if you want to use\nthis methodology. It's a good one for being\nable to determine, even",
    "start": "4729510",
    "end": "4734610"
  },
  {
    "text": "in the presence of noise. What it does do is\nit doesn't tell you what the raw\nperformance was, but it says, in that environment,\nwhich one is actually faster.",
    "start": "4734610",
    "end": "4743040"
  },
  {
    "text": "And that may actually be\na more relevant question, because you're not\nalways going to have this completely quiet system.",
    "start": "4743040",
    "end": "4749760"
  },
  {
    "text": "You may have a lot of\nnoise going on in a system. You'd like to know which one\nis going to behave better in what that actual system is.",
    "start": "4749760",
    "end": "4756250"
  },
  {
    "text": "And so this methodology\nis pretty good. Note that, with a lot of\nnoise, we need lots of trials.",
    "start": "4756250",
    "end": "4765090"
  },
  {
    "text": "The last thing that I\nwant to talk about-- which I won't-- is\nfitting to a model. And this is the issue of\nsometimes you measure things,",
    "start": "4765090",
    "end": "4772530"
  },
  {
    "text": "but you're interested\nin a derived statistic, such as, in this case,\ngathering some time,",
    "start": "4772530",
    "end": "4781770"
  },
  {
    "text": "counting instructions,\ncounting cache misses, counting time, and\nasking, OK, what's the--",
    "start": "4781770",
    "end": "4788130"
  },
  {
    "text": "what can I estimate is\nthe instruction time, and what is the cache time? And to do that, you do a\nleast-squares approximation.",
    "start": "4788130",
    "end": "4796449"
  },
  {
    "text": "And there's, once again,\nsome statistics behind that. I'm not going to\ngo over it here,",
    "start": "4796450",
    "end": "4801940"
  },
  {
    "text": "but you can look in the notes. There are a bunch of\nissues with modeling,",
    "start": "4801940",
    "end": "4807100"
  },
  {
    "text": "which is that you can\nover fit very easily. If you add more basis functions,\nyou will fit the data better.",
    "start": "4807100",
    "end": "4814650"
  },
  {
    "text": "And so how do you know\nif you're overfitting? Answer is, if you\nremove a basis function,",
    "start": "4814650",
    "end": "4819780"
  },
  {
    "text": "it doesn't affect the\nquality very much. Is the model predictive? I'm actually going\nto just let you",
    "start": "4819780",
    "end": "4825337"
  },
  {
    "text": "guys look at these,\nbecause it's pretty good. I think they're pretty\nself-explanatory.",
    "start": "4825337",
    "end": "4831180"
  },
  {
    "text": "Let me just finish\nwith a couple of words from a giant of science. This is Lord Kelvin.",
    "start": "4831180",
    "end": "4837190"
  },
  {
    "text": "What is Kelvin famous for? Besides Kelvin. ",
    "start": "4837190",
    "end": "4844640"
  },
  {
    "text": "He was the guru of measurement.",
    "start": "4844640",
    "end": "4850280"
  },
  {
    "text": "And he said, to\nmeasure is to know. That's a good one.",
    "start": "4850280",
    "end": "4855590"
  },
  {
    "text": "And he said also, if you\ncannot measurement it, you cannot improve it.",
    "start": "4855590",
    "end": "4860719"
  },
  {
    "text": "So both very apt sayings\nfrom the same guy, so there's a reason he's\ngot a big forehand, I guess.",
    "start": "4860720",
    "end": "4870585"
  },
  {
    "text": "So anyway, that's it. Thanks very much. And good luck on\nthe quiz on Tuesday.",
    "start": "4870585",
    "end": "4876880"
  },
  {
    "start": "4876880",
    "end": "4887753"
  }
]