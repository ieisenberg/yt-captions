[
  {
    "text": "Let's review what happens when the CPU accesses\na non-resident virtual page, i.e., a page",
    "start": "1490",
    "end": "7769"
  },
  {
    "text": "with its resident bit set to 0.",
    "start": "7769",
    "end": "10970"
  },
  {
    "text": "In the example shown here, the CPU is trying\nto access virtual page 5.",
    "start": "10970",
    "end": "16080"
  },
  {
    "text": "In this case, the MMU signals a page fault\nexception, causing the CPU to suspend execution",
    "start": "16080",
    "end": "22260"
  },
  {
    "text": "of the program and switch to the page fault\nhandler, which is code that deals with the",
    "start": "22260",
    "end": "27120"
  },
  {
    "text": "page fault.",
    "start": "27120",
    "end": "29010"
  },
  {
    "text": "The handler starts by either finding an unused\nphysical page or, if necessary, creating an",
    "start": "29010",
    "end": "34930"
  },
  {
    "text": "unused page by selecting an in-use page and\nmaking it available.",
    "start": "34930",
    "end": "40180"
  },
  {
    "text": "In our example, the handler has chosen virtual\npage 1 for reuse.",
    "start": "40180",
    "end": "45030"
  },
  {
    "text": "If the selected page is dirty, i.e., its D\nbit is 1 indicating that its contents have",
    "start": "45030",
    "end": "50570"
  },
  {
    "text": "changed since being read from secondary storage,\nwrite it back to secondary storage.",
    "start": "50570",
    "end": "56350"
  },
  {
    "text": "Finally, mark the selected virtual page as\nno longer resident.",
    "start": "56350",
    "end": "62039"
  },
  {
    "text": "In the \"after\" figure, we see that the R bit\nfor virtual page 1 has been set to 0.",
    "start": "62040",
    "end": "68170"
  },
  {
    "text": "Now physical page 4 is available for re-use.",
    "start": "68170",
    "end": "72798"
  },
  {
    "text": "Are there any restrictions on which page we\ncan select?",
    "start": "72799",
    "end": "76749"
  },
  {
    "text": "Obviously, we can't select the page that holds\nthe code for the page fault handler.",
    "start": "76749",
    "end": "81719"
  },
  {
    "text": "Pages immune from selection are called \"wired\"\npages.",
    "start": "81719",
    "end": "85899"
  },
  {
    "text": "And it would very inefficient to choose the\npage that holds the code that made the initial",
    "start": "85899",
    "end": "90090"
  },
  {
    "text": "memory access, since we expect to start executing\nthat code as soon as we finish handling the",
    "start": "90090",
    "end": "95398"
  },
  {
    "text": "page fault.",
    "start": "95399",
    "end": "96979"
  },
  {
    "text": "The optimal strategy would be to choose the\npage whose next use will occur farthest in",
    "start": "96979",
    "end": "101520"
  },
  {
    "text": "the future.",
    "start": "101520",
    "end": "102520"
  },
  {
    "text": "But, of course, this involves knowledge of\nfuture execution paths and so isn't a realizable",
    "start": "102520",
    "end": "108648"
  },
  {
    "text": "strategy.",
    "start": "108649",
    "end": "110229"
  },
  {
    "text": "Wikipedia provides a nice description of the\nmany strategies for choosing a replacement",
    "start": "110229",
    "end": "114810"
  },
  {
    "text": "page, with their various tradeoffs between\nease of implementation and impact on the rate",
    "start": "114810",
    "end": "119968"
  },
  {
    "text": "of page faults -\nsee the URL given at the bottom of the slide.",
    "start": "119969",
    "end": "125049"
  },
  {
    "text": "The aging algorithm they describe is frequently\nused since it offers near optimal performance",
    "start": "125049",
    "end": "130780"
  },
  {
    "text": "at a moderate implementation cost.",
    "start": "130780",
    "end": "134220"
  },
  {
    "text": "Next, the desired virtual page is read from\nsecondary storage into the selected physical",
    "start": "134220",
    "end": "140360"
  },
  {
    "text": "page.",
    "start": "140360",
    "end": "141360"
  },
  {
    "text": "In our example, virtual page 5 is now loaded\ninto physical page 4.",
    "start": "141360",
    "end": "146420"
  },
  {
    "text": "Then the R bit and PPN fields in the page\ntable entry for virtual page 5 are updated",
    "start": "146420",
    "end": "151890"
  },
  {
    "text": "to indicate that the contents of that virtual\npage now reside in physical page 4.",
    "start": "151890",
    "end": "158170"
  },
  {
    "text": "Finally the handler is finished and execution\nof the original program is resumed, re-executing",
    "start": "158170",
    "end": "164030"
  },
  {
    "text": "the instruction that caused the page fault.",
    "start": "164030",
    "end": "167270"
  },
  {
    "text": "Since the page map has been updated, this\ntime the access succeeds and execution continues.",
    "start": "167270",
    "end": "174050"
  },
  {
    "text": "To double-check our understanding of page\nfaults, let's run through an example.",
    "start": "174050",
    "end": "179050"
  },
  {
    "text": "Here's the same setup as in our previous example,\nbut this time consider a store instruction",
    "start": "179050",
    "end": "184330"
  },
  {
    "text": "that's making an access to virtual address\n0x600, which is located on virtual page 6.",
    "start": "184330",
    "end": "192900"
  },
  {
    "text": "Checking the page table entry for VPN 6, we\nsee that its R bit 0 indicating that it is",
    "start": "192900",
    "end": "198709"
  },
  {
    "text": "NOT resident in main memory, which causes\na page fault exception.",
    "start": "198710",
    "end": "203460"
  },
  {
    "text": "The page fault handler selects VPN 0xE for\nreplacement since we've been told in the setup",
    "start": "203460",
    "end": "208050"
  },
  {
    "text": "that it's the least-recently-used page.",
    "start": "208050",
    "end": "211620"
  },
  {
    "text": "The page table entry for VPN 0xE has D=1 so\nthe handler writes the contents of VPN 0xE,",
    "start": "211620",
    "end": "218640"
  },
  {
    "text": "which is found in PPN 0x5, to secondary storage.",
    "start": "218640",
    "end": "223110"
  },
  {
    "text": "Then it updates the page table to indicate\nthat VPN 0xE is no longer resident.",
    "start": "223110",
    "end": "228650"
  },
  {
    "text": "Next, the contents of VPN 0x6 are read from\nsecondary storage into the now available PPN",
    "start": "228650",
    "end": "235959"
  },
  {
    "text": "0x5.",
    "start": "235960",
    "end": "237230"
  },
  {
    "text": "Now the handler updates the page table entry\nfor VPN 0x6 to indicate that it's resident",
    "start": "237230",
    "end": "242069"
  },
  {
    "text": "in PPN 0x5.",
    "start": "242070",
    "end": "245290"
  },
  {
    "text": "The page fault handler has completed its work,\nso program execution resumes and the ST instruction",
    "start": "245290",
    "end": "250709"
  },
  {
    "text": "is re-executed.",
    "start": "250710",
    "end": "252730"
  },
  {
    "text": "This time the MMU is able to translate virtual\naddress 0x600 to physical address 0x500.",
    "start": "252730",
    "end": "260708"
  },
  {
    "text": "And since the ST instruction modifies the\ncontents of VPN 0x6, its D bit is set to 1.",
    "start": "260709",
    "end": "267740"
  },
  {
    "text": "Whew!",
    "start": "267740",
    "end": "268740"
  },
  {
    "text": "We're done :)\nWe can think of the work of the MMU as being",
    "start": "268740",
    "end": "272110"
  },
  {
    "text": "divided into two tasks, which as computer\nscientists, we would think of as two procedures.",
    "start": "272110",
    "end": "278948"
  },
  {
    "text": "In this formulation the information in the\npage map is held in several arrays: the R",
    "start": "278949",
    "end": "283710"
  },
  {
    "text": "array holds the resident bits,\nthe D array holds the dirty bits, the PPN",
    "start": "283710",
    "end": "288580"
  },
  {
    "text": "array holds the physical page numbers,\nand the DiskAdr array holds the location in",
    "start": "288580",
    "end": "294490"
  },
  {
    "text": "secondary storage for each virtual page.",
    "start": "294490",
    "end": "298909"
  },
  {
    "text": "The VtoP procedure is invoked on each memory\naccess to translate the virtual address into",
    "start": "298909",
    "end": "304050"
  },
  {
    "text": "a physical address.",
    "start": "304050",
    "end": "306210"
  },
  {
    "text": "If the requested virtual page is not resident,\nthe PageFault procedure is invoked to make",
    "start": "306210",
    "end": "310610"
  },
  {
    "text": "the page resident.",
    "start": "310610",
    "end": "311860"
  },
  {
    "text": "Once the requested page is resident, the VPN\nis used as an index to lookup the corresponding",
    "start": "311860",
    "end": "317430"
  },
  {
    "text": "PPN, which is then concatenated with the page\noffset to form the physical address.",
    "start": "317430",
    "end": "323870"
  },
  {
    "text": "The PageFault routine starts by selecting\na virtual page to be replaced, writing out",
    "start": "323870",
    "end": "328779"
  },
  {
    "text": "its contents if it's dirty.",
    "start": "328779",
    "end": "331080"
  },
  {
    "text": "The selected page is then marked as not resident.",
    "start": "331080",
    "end": "335460"
  },
  {
    "text": "Finally the desired virtual page is read from\nsecondary storage and the page map information",
    "start": "335460",
    "end": "340569"
  },
  {
    "text": "updated to reflect that it's now resident\nin the newly filled physical page.",
    "start": "340569",
    "end": "346050"
  },
  {
    "text": "We'll use hardware to implement the VtoP functionality\nsince it's needed for every memory access.",
    "start": "346050",
    "end": "353220"
  },
  {
    "text": "The call to the PageFault procedure is accomplished\nvia a page fault exception, which directs",
    "start": "353220",
    "end": "358569"
  },
  {
    "text": "the CPU to execute the appropriate handler\nsoftware that contains the PageFault procedure.",
    "start": "358569",
    "end": "364789"
  },
  {
    "text": "This is a good strategy to pursue in all our\nimplementation choices: use hardware for the",
    "start": "364789",
    "end": "369979"
  },
  {
    "text": "operations that need to be fast, but use exceptions\nto handle the (hopefully infrequent) exceptional",
    "start": "369979",
    "end": "376250"
  },
  {
    "text": "cases in software.",
    "start": "376250",
    "end": "379340"
  },
  {
    "text": "Since the software is executed by the CPU,\nwhich is itself a piece of hardware, what",
    "start": "379340",
    "end": "384030"
  },
  {
    "text": "we're really doing is making the tradeoff\nbetween using special-purpose hardware (e.g.,",
    "start": "384030",
    "end": "388960"
  },
  {
    "text": "the MMU) or using general-purpose hardware\n(e.g., the CPU).",
    "start": "388960",
    "end": "394300"
  },
  {
    "text": "In general, one should be skeptical of proposals\nto use special-purpose hardware, reserving",
    "start": "394300",
    "end": "399809"
  },
  {
    "text": "that choice for operations that truly are\ncommonplace and whose performance is critical",
    "start": "399809",
    "end": "405099"
  },
  {
    "text": "to the overall performance of the system.",
    "start": "405099",
    "end": "407159"
  }
]