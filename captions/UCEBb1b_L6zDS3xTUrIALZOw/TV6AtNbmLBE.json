[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "Okay, let's review our plan.",
    "start": "960",
    "end": "3590"
  },
  {
    "text": "The processor starts an access by sending\nan address to the cache.",
    "start": "3590",
    "end": "7729"
  },
  {
    "text": "If data for the requested address is held\nin the cache, it's quickly returned to the",
    "start": "7730",
    "end": "12719"
  },
  {
    "text": "CPU.",
    "start": "12719",
    "end": "13830"
  },
  {
    "text": "If the data we request is not in the cache,\nwe have a cache miss, so the cache has to",
    "start": "13830",
    "end": "18930"
  },
  {
    "text": "make a request to main memory to get the data,\nwhich it then returns to processor.",
    "start": "18930",
    "end": "24759"
  },
  {
    "text": "Typically the cache will remember the newly\nfetched data, possibly replacing some older",
    "start": "24759",
    "end": "29289"
  },
  {
    "text": "data in the cache.",
    "start": "29289",
    "end": "30960"
  },
  {
    "text": "Suppose a cache access takes 4 ns and a main\nmemory access takes 40 ns.",
    "start": "30960",
    "end": "36429"
  },
  {
    "text": "Then an access that hits in the cache has\na latency of 4 ns, but an access that misses",
    "start": "36429",
    "end": "42429"
  },
  {
    "text": "in the cache has a latency of 44 ns.",
    "start": "42429",
    "end": "46820"
  },
  {
    "text": "The processor has to deal with the variable\nmemory access time, perhaps by simply waiting",
    "start": "46820",
    "end": "52039"
  },
  {
    "text": "for the access to complete, or, in modern\nhyper-threaded processors, it might execute",
    "start": "52039",
    "end": "57010"
  },
  {
    "text": "an instruction or two from another programming\nthread.",
    "start": "57010",
    "end": "60538"
  },
  {
    "text": "The hit and miss ratios tell us the fraction\nof accesses which are cache hits and the fraction",
    "start": "60539",
    "end": "65550"
  },
  {
    "start": "61000",
    "end": "61000"
  },
  {
    "text": "of accesses which are cache misses.",
    "start": "65550",
    "end": "67740"
  },
  {
    "text": "Of course, the ratios will sum to 1.",
    "start": "67740",
    "end": "72100"
  },
  {
    "text": "Using these metrics we can compute the average\nmemory access time (AMAT).",
    "start": "72100",
    "end": "75868"
  },
  {
    "text": "Since we always check in the cache first,\nevery access includes the cache access time",
    "start": "75869",
    "end": "80140"
  },
  {
    "text": "(called the hit time).",
    "start": "80140",
    "end": "81850"
  },
  {
    "text": "If we miss in the cache, we have to take the\nadditional time needed to access main memory",
    "start": "81850",
    "end": "86750"
  },
  {
    "text": "(called the miss penalty).",
    "start": "86750",
    "end": "89200"
  },
  {
    "text": "But the main memory access only happens on\nsome fraction of the accesses: the miss ratio",
    "start": "89200",
    "end": "94048"
  },
  {
    "text": "tells us how often that occurs.",
    "start": "94049",
    "end": "97240"
  },
  {
    "text": "So the AMAT can be computed using the formula\nshown here.",
    "start": "97240",
    "end": "102770"
  },
  {
    "text": "The lower the miss ratio (or, equivalently,\nthe higher the hit ratio), the smaller the",
    "start": "102770",
    "end": "107780"
  },
  {
    "text": "average access time.",
    "start": "107780",
    "end": "109909"
  },
  {
    "text": "Our design goal for the cache is to achieve\na high hit ratio.",
    "start": "109909",
    "end": "114159"
  },
  {
    "text": "If we have multiple levels of cache, we can\napply the formula recursively to calculate",
    "start": "114159",
    "end": "118420"
  },
  {
    "text": "the AMAT at each level of the memory.",
    "start": "118420",
    "end": "123020"
  },
  {
    "text": "Each successive level of the cache is slower,\ni.e., has a longer hit time, which is offset",
    "start": "123020",
    "end": "129250"
  },
  {
    "text": "by lower miss ratio because of its increased\nsize.",
    "start": "129250",
    "end": "134020"
  },
  {
    "start": "134000",
    "end": "134000"
  },
  {
    "text": "Let's try out some numbers.",
    "start": "134020",
    "end": "135770"
  },
  {
    "text": "Suppose the cache takes 4 processor cycles\nto respond, and main memory takes 100 cycles.",
    "start": "135770",
    "end": "142080"
  },
  {
    "text": "Without the cache, each memory access would\ntake 100 cycles.",
    "start": "142080",
    "end": "146470"
  },
  {
    "text": "With the cache, a cache hit takes 4 cycles,\nand a cache miss takes 104 cycles.",
    "start": "146470",
    "end": "153870"
  },
  {
    "text": "What hit ratio is needed to so that the AMAT\nwith the cache is 100 cycles, the break-even",
    "start": "153870",
    "end": "160940"
  },
  {
    "text": "point?",
    "start": "160940",
    "end": "163050"
  },
  {
    "text": "Using the AMAT formula from the previously\nslide, we see that we only need a hit ratio",
    "start": "163050",
    "end": "168370"
  },
  {
    "text": "of 4% in order for memory system of the Cache\n+ Main Memory to perform as well as Main Memory",
    "start": "168370",
    "end": "174810"
  },
  {
    "text": "alone.",
    "start": "174810",
    "end": "176310"
  },
  {
    "text": "The idea, of course, is that we'll be able\nto do much better than that.",
    "start": "176310",
    "end": "180940"
  },
  {
    "text": "Suppose we wanted an AMAT of 5 cycles.",
    "start": "180940",
    "end": "185850"
  },
  {
    "text": "Clearly most of the accesses would have to\nbe cache hits.",
    "start": "185850",
    "end": "189730"
  },
  {
    "text": "We can use the AMAT formula to compute the\nnecessary hit ratio.",
    "start": "189730",
    "end": "195340"
  },
  {
    "text": "Working through the arithmetic we see that\n99% of the accesses must be cache hits in",
    "start": "195340",
    "end": "200180"
  },
  {
    "text": "order to achieve an average access time of\n5 cycles.",
    "start": "200180",
    "end": "205030"
  },
  {
    "text": "Could we expect to do that well when running\nactual programs?",
    "start": "205030",
    "end": "208840"
  },
  {
    "text": "Happily, we can come close.",
    "start": "208840",
    "end": "211420"
  },
  {
    "text": "In a simulation of the Spec CPU2000 Benchmark,\nthe hit ratio for a standard-size level 1",
    "start": "211420",
    "end": "218060"
  },
  {
    "text": "cache was measured to be 97.5% over some ~10\ntrillion accesses.",
    "start": "218060",
    "end": "223470"
  },
  {
    "text": "[See the \"All benchmarks\" arithmetic-mean\ntable at http://research.cs.wisc.edu/multifacet/misc/spec2000cache-data/]",
    "start": "223470",
    "end": "224730"
  },
  {
    "text": "Here's a start at building a cache.",
    "start": "224730",
    "end": "226870"
  },
  {
    "start": "225000",
    "end": "225000"
  },
  {
    "text": "The cache will hold many different blocks\nof data.",
    "start": "226870",
    "end": "230379"
  },
  {
    "text": "For now let's assume each block is an individual\nmemory location.",
    "start": "230380",
    "end": "234700"
  },
  {
    "text": "Each data block is \"tagged\" with its address.",
    "start": "234700",
    "end": "238010"
  },
  {
    "text": "A combination of a data block and its associated\naddress tag is called a cache line.",
    "start": "238010",
    "end": "244530"
  },
  {
    "text": "When an address is received from the CPU,\nwe'll search the cache looking for a block",
    "start": "244530",
    "end": "249480"
  },
  {
    "text": "with a matching address tag.",
    "start": "249480",
    "end": "252230"
  },
  {
    "text": "If we find a matching address tag, we have\na cache hit.",
    "start": "252230",
    "end": "256470"
  },
  {
    "text": "On a read access, we'll return the data from\nthe matching cache line.",
    "start": "256470",
    "end": "260519"
  },
  {
    "text": "On a write access, we'll update the data stored\nin the cache line and, at some point, update",
    "start": "260519",
    "end": "265791"
  },
  {
    "text": "the corresponding location in main memory.",
    "start": "265791",
    "end": "269879"
  },
  {
    "text": "If no matching tag is found, we have a cache\nmiss.",
    "start": "269879",
    "end": "274150"
  },
  {
    "text": "So we'll have to choose a cache line to use\nto hold the requested data, which means that",
    "start": "274150",
    "end": "278630"
  },
  {
    "text": "some previously cached location will no longer\nbe found in the cache.",
    "start": "278630",
    "end": "284569"
  },
  {
    "text": "For a read operation, we'll fetch the requested\ndata from main memory, add it to the cache",
    "start": "284569",
    "end": "289629"
  },
  {
    "text": "(updating the tag and data fields of the cache\nline) and, of course, return the data to the",
    "start": "289629",
    "end": "295130"
  },
  {
    "text": "CPU.",
    "start": "295130",
    "end": "297000"
  },
  {
    "text": "On a write, we'll update the tag and data\nin the selected cache line and, at some point,",
    "start": "297000",
    "end": "302379"
  },
  {
    "text": "update the corresponding location in main\nmemory.",
    "start": "302379",
    "end": "305749"
  },
  {
    "text": "So the contents of the cache is determined\nby the memory requests made by the CPU.",
    "start": "305749",
    "end": "311280"
  },
  {
    "text": "If the CPU requests a recently-used address,\nchances are good the data will still be in",
    "start": "311280",
    "end": "317090"
  },
  {
    "text": "the cache from the previous access to the\nsame location.",
    "start": "317090",
    "end": "321759"
  },
  {
    "text": "As the working set slowly changes, the cache\ncontents will be updated as needed.",
    "start": "321759",
    "end": "327539"
  },
  {
    "text": "If the entire working set can fit into the\ncache, most of the requests will be hits and",
    "start": "327539",
    "end": "332999"
  },
  {
    "text": "the AMAT will be close to the cache access\ntime.",
    "start": "332999",
    "end": "337639"
  },
  {
    "text": "So far, so good!",
    "start": "337639",
    "end": "340490"
  },
  {
    "text": "Of course, we'll need to figure how to quickly\nsearch the cache, i.e., we'll a need fast",
    "start": "340490",
    "end": "346189"
  },
  {
    "text": "way to answer the question of whether a particular\naddress tag can be found in some cache line.",
    "start": "346189",
    "end": "352409"
  },
  {
    "text": "That's our next topic.",
    "start": "352409",
    "end": "353490"
  }
]