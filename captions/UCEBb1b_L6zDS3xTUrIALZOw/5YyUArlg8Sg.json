[
  {
    "text": "The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6360"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6360",
    "end": "13349"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu.",
    "start": "13350",
    "end": "18400"
  },
  {
    "start": "18400",
    "end": "24038"
  },
  {
    "text": "GEORGE VERGHESE: So\nwe're going to continue talking about coding. We're going to focus on\nlinear block codes, which",
    "start": "24038",
    "end": "29820"
  },
  {
    "text": "I introduced briefly last time. But just to step back\na bit and remind you, we're talking about this\npiece of the overall channel.",
    "start": "29820",
    "end": "37990"
  },
  {
    "text": "So we've got the\nsource that's done this source coding, compressing\nall the bits coming out",
    "start": "37990",
    "end": "44660"
  },
  {
    "text": "of here. So that one bit,\none binary digit, carries a bit of information. And now, we're actually\nreintroducing redundancy",
    "start": "44660",
    "end": "50970"
  },
  {
    "text": "in a controlled way,\nso that we can protect the message across\nthe physical channel",
    "start": "50970",
    "end": "56280"
  },
  {
    "text": "with its noise sources\nand distortions and so on. Actually, I should be saying\nbinary digits at this point.",
    "start": "56280",
    "end": "62643"
  },
  {
    "text": "Because again, at this\npoint, the binary digit doesn't carry a\nbit of information. We're introducing redundancy,\nbut I'll leave you now",
    "start": "62643",
    "end": "70290"
  },
  {
    "text": "to make the distinctions. OK, at this point here\noutside the source coding, one binary digit is\none bit of information.",
    "start": "70290",
    "end": "77189"
  },
  {
    "text": "But now, when you start to\nintroduce the redundancy, you've got binary digits\nthat are not necessarily",
    "start": "77190",
    "end": "83250"
  },
  {
    "text": "one bit of information\nper binary digit. In fact, it won't be. And then across the\nchannel at the other end,",
    "start": "83250",
    "end": "89100"
  },
  {
    "text": "you do the decoding to try\nand recover from any errors that the channel might\nhave encountered.",
    "start": "89100",
    "end": "96360"
  },
  {
    "text": "And what we said last time\nis that the key to this is really to introduce\nsome space around the code",
    "start": "96360",
    "end": "105840"
  },
  {
    "text": "words that carry your messages. So you might want to\nexpand your set of messages",
    "start": "105840",
    "end": "112320"
  },
  {
    "text": "into a longer code word, such\nthat a small number of errors on each code word\nwill not flip you over",
    "start": "112320",
    "end": "118560"
  },
  {
    "text": "into another code word. So you'll be able to\nrecognize the neighborhood of the valid code words. That's the basic idea.",
    "start": "118560",
    "end": "124450"
  },
  {
    "text": "So you're trying to put\nsome space around things. So if you've got k bits\nin your original message,",
    "start": "124450",
    "end": "133710"
  },
  {
    "text": "you've got 2 to the\nk messages, right? So k message bits, 2\nto the k messages--",
    "start": "133710",
    "end": "148020"
  },
  {
    "text": " and what we're planning to do\nnow is, with this input stream",
    "start": "148020",
    "end": "155970"
  },
  {
    "text": "that's coming into\nour channel coder,",
    "start": "155970",
    "end": "162720"
  },
  {
    "text": "we're going to take the stream\nand break it up into blocks.",
    "start": "162720",
    "end": "168090"
  },
  {
    "text": "So each block will\nhave k message bits. ",
    "start": "168090",
    "end": "174690"
  },
  {
    "text": "And then out come\na series of blocks, but each block now\nhas the large number. So we've got n bits.",
    "start": "174690",
    "end": "180630"
  },
  {
    "text": " OK. So we've done some padding\nhere. n is greater than k.",
    "start": "180630",
    "end": "190080"
  },
  {
    "text": "And so you have the\npossibility of 2 to the n possible\nmessages in those n bits,",
    "start": "190080",
    "end": "196513"
  },
  {
    "text": "but you're not going\nto use all of them. You're only going\nto use 2 to the k, and so you'll leave some\nspace around each valid code",
    "start": "196513",
    "end": "202769"
  },
  {
    "text": "word, all right? So the code words\nare selected from 2",
    "start": "202770",
    "end": "209080"
  },
  {
    "text": "to the k code words selected\nfrom 2 to the n possibilities.",
    "start": "209080",
    "end": "220080"
  },
  {
    "text": " OK. You get the idea there?",
    "start": "220080",
    "end": "225838"
  },
  {
    "text": "Yeah. And we introduce this\nnotion of Hamming distance then to measure the\nsize of the neighborhood",
    "start": "225838",
    "end": "235620"
  },
  {
    "text": "around the code word. So we have the notion\nof a Hamming distance,",
    "start": "235620",
    "end": "244890"
  },
  {
    "text": "which we'll abbreviate to HD. And this is the Hamming\ndistance between two bit",
    "start": "244890",
    "end": "251850"
  },
  {
    "text": "streams or between\ntwo, let's say, blocks.",
    "start": "251850",
    "end": "258630"
  },
  {
    "text": "And what this is is\nthe number of positions in which they differ. ",
    "start": "258630",
    "end": "270420"
  },
  {
    "text": "OK. So it's a very simple notion\nof distance between bit strings",
    "start": "270420",
    "end": "277290"
  },
  {
    "text": "or binary digit strings. All right. ",
    "start": "277290",
    "end": "282810"
  },
  {
    "text": "And what we then said is you\nget certain desirable error detection and error\ncorrection properties",
    "start": "282810",
    "end": "289650"
  },
  {
    "text": "based on the minimum distance. minimum Hamming\ndistance of a code,",
    "start": "289650",
    "end": "302010"
  },
  {
    "text": "we use the simple\nlittle d for that. That's the minimum distance\nyou find between any two code words in the code.",
    "start": "302010",
    "end": "308050"
  },
  {
    "text": "So based on that, we said that-- we wrote it slightly\ndifferently last time. I'm writing it to give you yet\nanother way to think about it.",
    "start": "308050",
    "end": "315120"
  },
  {
    "text": "What we basically said\nis, for instance, if you",
    "start": "315120",
    "end": "321690"
  },
  {
    "text": "had a valid code word\nhere, valid code word here, this is just a schematic.",
    "start": "321690",
    "end": "328510"
  },
  {
    "text": "One hop, meaning one\nbit change, brings you to some other word which\nis not a code word.",
    "start": "328510",
    "end": "334600"
  },
  {
    "text": "Then another bit change brings\nyou to some other word, not a code word. And a further one brings\nyou to a new code word.",
    "start": "334600",
    "end": "340720"
  },
  {
    "text": "That's Hamming distance three. So if the minimum\ndistance you find",
    "start": "340720",
    "end": "345790"
  },
  {
    "text": "among all the spacings\nbetween code words is a distance of three, measured\nas the Hamming distance,",
    "start": "345790",
    "end": "351889"
  },
  {
    "text": "then you can detect\nup to two errors. So if you went from this\ncode word in two hops,",
    "start": "351890",
    "end": "360250"
  },
  {
    "text": "you'd still not be\nat a new code word. So you know you've\nmade a mistake. If you wanted to\ncorrect errors, you",
    "start": "360250",
    "end": "365500"
  },
  {
    "text": "could correct up to one error\nin this case assuming that you have no more than one error.",
    "start": "365500",
    "end": "372232"
  },
  {
    "text": "If you ended up\nhere, you'd know it had to have come\nfrom this code word. If you ended up\nhere, you know it had to have come from the\ncode word on the right.",
    "start": "372232",
    "end": "380379"
  },
  {
    "text": "Now, you have to\nbe a little careful if you're trying\nto do correction and detection at the same time.",
    "start": "380380",
    "end": "385520"
  },
  {
    "text": "So for instance, if\nyou end up over here and if it's possible to\nget up to two errors, then",
    "start": "385520",
    "end": "395142"
  },
  {
    "text": "you might think you've had one\nerror that brought you here. And you might correct\nto this point. But if the way you\nactually got there was two",
    "start": "395142",
    "end": "403300"
  },
  {
    "text": "hops from over here, then you've\ndone an incorrect correction. OK. So you've got to be\na little bit careful.",
    "start": "403300",
    "end": "408428"
  },
  {
    "text": "And that's what the third\ncase tries to deal with. It allows you to deal with\ncombinations of correcting up",
    "start": "408428",
    "end": "415090"
  },
  {
    "text": "to a certain number of\nerrors and then detecting a certain number. So basically, what\nit's saying is",
    "start": "415090",
    "end": "420430"
  },
  {
    "text": "that this entire\ndistance here has to end up with a little gap. ",
    "start": "420430",
    "end": "428680"
  },
  {
    "text": "You've got to be able\nto make a number of hops equal to the number of areas you\nwant to detect and still leave",
    "start": "428680",
    "end": "434560"
  },
  {
    "text": "enough space to get to a\ncode word unambiguously. So in this particular\ncase, for instance,",
    "start": "434560",
    "end": "440260"
  },
  {
    "text": "you couldn't unambiguously\ndetect up to two errors if you were doing error\ncorrection for one.",
    "start": "440260",
    "end": "446060"
  },
  {
    "text": "But if I had this\npicture, OK, this",
    "start": "446060",
    "end": "454590"
  },
  {
    "text": "is now Hamming\ndistance 4, 1 2, 3, 4. I could correct\nsingle bit errors,",
    "start": "454590",
    "end": "462449"
  },
  {
    "text": "and I could detect up to 2\nbecause 2 errors would bring me up to this point. That's clearly an error that\nI wouldn't try to correct,",
    "start": "462450",
    "end": "468972"
  },
  {
    "text": "but I'd recognize\nit as an error. OK, so that's what the third\ncase tries to account for.",
    "start": "468972",
    "end": "475385"
  },
  {
    "text": "You won't believe\nhow much time I spent trying to distill that\nstatement down into a bullet. And I don't know if\nI got it right here,",
    "start": "475385",
    "end": "481650"
  },
  {
    "text": "but that's the idea. OK. So our focus today is\non linear block codes.",
    "start": "481650",
    "end": "488639"
  },
  {
    "text": "We're not talking about codes\nin general, but linear codes. ",
    "start": "488640",
    "end": "494370"
  },
  {
    "text": "This would be a general\nstatement for a block code. I haven't said anything about\nlinearity up to this point.",
    "start": "494370",
    "end": "499440"
  },
  {
    "text": "All I said was take\nblocks of k bits, expand them to blocks of\nn bits, and pick subsets",
    "start": "499440",
    "end": "507870"
  },
  {
    "text": "in this fashion. That's just a general\nstatement about coding. There's nothing linear\nabout this as stated.",
    "start": "507870",
    "end": "514299"
  },
  {
    "text": "So if you want to\nimpose linearity, then you've got to introduce\nthis additional piece, which is to say that every\nbit in your code word",
    "start": "514299",
    "end": "523589"
  },
  {
    "text": "is going to be a linear\ncombination of bits from your message. And the easiest way to\nunderstand that is the matrix",
    "start": "523590",
    "end": "531810"
  },
  {
    "text": "representation I had last time.  Do I have it on this slide?",
    "start": "531810",
    "end": "537750"
  },
  {
    "text": "Not yet, OK. But I probably do on the\nnext, so let me pull that up. ",
    "start": "537750",
    "end": "549370"
  },
  {
    "text": "OK. So basically, you're going to\ngenerate your code words, c.",
    "start": "549370",
    "end": "555390"
  },
  {
    "text": "So that's c1 up to cn is\ngoing to be d1 up to dk times",
    "start": "555390",
    "end": "566950"
  },
  {
    "text": "some matrix, which\nis k times n matrix.",
    "start": "566950",
    "end": "572550"
  },
  {
    "text": "And we'll call it G. OK. So that's referred to as the\ngenerator matrix for the code.",
    "start": "572550",
    "end": "577769"
  },
  {
    "text": " We're talking about binary code. So all of these are 0s or 1s.",
    "start": "577770",
    "end": "585970"
  },
  {
    "text": "And all of these\nentries are 0 or 1.",
    "start": "585970",
    "end": "591759"
  },
  {
    "text": "And all computations\nare done in GF(2). They're done modulo 2. ",
    "start": "591760",
    "end": "600310"
  },
  {
    "text": "Well, let me just say that\nall operations are in GF(2). ",
    "start": "600310",
    "end": "613010"
  },
  {
    "text": "OK. So this is modulo 2 operations\nor Boolean operations. ",
    "start": "613010",
    "end": "620190"
  },
  {
    "text": "So if I'm working with the\nsymbols 0 and 1, what is 0,",
    "start": "620190",
    "end": "626360"
  },
  {
    "text": "minus 1? ",
    "start": "626360",
    "end": "634310"
  },
  {
    "text": "How am I to interpret this? I haven't quite defined it. But how would you\ninterpret that? ",
    "start": "634310",
    "end": "642636"
  },
  {
    "text": "You can think of it as the thing\nI need on the right-hand side that, when I add 1 to\nboth sides, I get 0. Is that one way to think of it?",
    "start": "642637",
    "end": "649460"
  },
  {
    "text": "So 0 minus 1 is 1. Or another way to say that is\nminus 1 is the same as plus 1",
    "start": "649460",
    "end": "654820"
  },
  {
    "text": "in this setting. ",
    "start": "654820",
    "end": "659959"
  },
  {
    "text": "OK. So you just have to\nget used to working with only 0 and 1 in GF(2), but\nwe talked about that last time.",
    "start": "659960",
    "end": "669670"
  },
  {
    "text": "All right, so back\nto the statement. This is for a linear block code. ",
    "start": "669670",
    "end": "680920"
  },
  {
    "text": "You're going to see\nmatrix multiplication throughout your careers here. So if you haven't\nalready seen them,",
    "start": "680920",
    "end": "687280"
  },
  {
    "text": "this is a good\nopportunity to learn about matrix multiplications. So let's see, could\nsomebody tell me",
    "start": "687280",
    "end": "693579"
  },
  {
    "text": "what procedure I go\nthrough to, let's say, get the i-th position\nhere in terms",
    "start": "693580",
    "end": "700959"
  },
  {
    "text": "of what I do on\nthe right-hand side if I want to get the i-th\nposition on the left-hand side?",
    "start": "700960",
    "end": "707680"
  },
  {
    "text": "What's the operation\nthat I'm thinking of? ",
    "start": "707680",
    "end": "713439"
  },
  {
    "text": "Or let me ask you this. Is the entire matrix\nG relevant when I'm just interested in\nthe i-th position here?",
    "start": "713440",
    "end": "719330"
  },
  {
    "text": " Or is this some part of G\nthat's what I should focus on?",
    "start": "719330",
    "end": "729360"
  },
  {
    "text": "Yeah. AUDIENCE: The i-th column? GEORGE VERGHESE: It's just\nthe i-th column, right? So we think of\nmatrix multiplication",
    "start": "729360",
    "end": "735530"
  },
  {
    "text": "as sort of being\nin the simple case. If you want the\ni-th position here,",
    "start": "735530",
    "end": "741870"
  },
  {
    "text": "it's kind of the dot product of\nthis row with the i-th column.",
    "start": "741870",
    "end": "747560"
  },
  {
    "text": "So if you want the\ni-th position here, let me give you a\nparticular example. ",
    "start": "747560",
    "end": "754140"
  },
  {
    "text": "If I've got 1, 0, 1, 1 here\nand I have 1, 1, 0, 0 here,",
    "start": "754140",
    "end": "759830"
  },
  {
    "text": "then this position is going to\nbe this is in the i-th column. ",
    "start": "759830",
    "end": "768770"
  },
  {
    "text": "What I'm going to find\nin the i-th column is 1 times 1, which is 1,\nplus 0 times 1, which is 0,",
    "start": "768770",
    "end": "775100"
  },
  {
    "text": "plus 1 times 0 plus 1 times 0. So I just got a 1, right?",
    "start": "775100",
    "end": "782750"
  },
  {
    "text": "So I'm just going\nto get a 1 or a 0 depending on the\nspecific entries here.",
    "start": "782750",
    "end": "788910"
  },
  {
    "text": "So look what we've done. We've found a particular\nposition in the code word as a linear combination of\nthe bits in the message.",
    "start": "788910",
    "end": "798440"
  },
  {
    "text": "We took the combination\nof these bits with the weights that\nare displayed out here. So that's really\nwhat this statement",
    "start": "798440",
    "end": "806660"
  },
  {
    "text": "was on the previous slide. We said that a code is linear. ",
    "start": "806660",
    "end": "815670"
  },
  {
    "text": "Well, each of the k\nmessage bits is encoded as a linear transformation.",
    "start": "815670",
    "end": "821070"
  },
  {
    "text": "Sorry, each of the\ncode bits is encoded as a linear transformation\nof the message bits. I didn't quite say\nit that way there.",
    "start": "821070",
    "end": "826391"
  },
  {
    "text": "Let me say it here\non this slide. So each code word bit is a\nspecified linear combination",
    "start": "826392",
    "end": "834120"
  },
  {
    "text": "of the message bits. This is what I'm referring to. If you wanted to find\nany particular bit, you're going to take a linear\ncombination of these bits",
    "start": "834120",
    "end": "841140"
  },
  {
    "text": "with the weights\nthat are here, OK? There's another way\nto think of this also",
    "start": "841140",
    "end": "847080"
  },
  {
    "text": "which is the other\nblue line out there,",
    "start": "847080",
    "end": "855430"
  },
  {
    "text": "which is to think of the matrix\nG as being made up of rows. ",
    "start": "855430",
    "end": "862779"
  },
  {
    "text": "OK. So can someone\ndescribe to me what we're doing with these rows to\nget this into our code vector?",
    "start": "862780",
    "end": "873670"
  },
  {
    "text": "Yeah. AUDIENCE: [INAUDIBLE] GEORGE VERGHESE: OK.",
    "start": "873670",
    "end": "879500"
  },
  {
    "text": "So basically, the way\nmatrix multiplication works, if you think about it, is\nwhat we're going to be doing",
    "start": "879500",
    "end": "885770"
  },
  {
    "text": "is 1 times the first row\nplus 0 times the second row plus 1 times the third row\nplus 1 times the fourth row.",
    "start": "885770",
    "end": "893550"
  },
  {
    "text": "So another way to think\nof matrix multiplication, it's going to generate this\nvector as a linear combination",
    "start": "893550",
    "end": "900050"
  },
  {
    "text": "of the rows of this matrix, OK? What linear combination--\nwell, the linear combination",
    "start": "900050",
    "end": "906170"
  },
  {
    "text": "that's described in the\nmessage part of this. So this is the message part. ",
    "start": "906170",
    "end": "914510"
  },
  {
    "text": "So that's the other\nstatement out here. So each code word is\na linear combination",
    "start": "914510",
    "end": "919519"
  },
  {
    "text": "of the rows of this\ngenerator matrix.  So these are concrete\nways to think",
    "start": "919520",
    "end": "925940"
  },
  {
    "text": "about what a linear code is. But we also saw that\nthere's another way to think of it which is\nin terms of this property,",
    "start": "925940",
    "end": "934970"
  },
  {
    "text": "that the sum of any two code\nwords is also a code word. So if you have a\nset of code words",
    "start": "934970",
    "end": "940160"
  },
  {
    "text": "with the property that the\nsum of any two is another word and that set, another\ncode word and that set, then what you\nhave is a linear code.",
    "start": "940160",
    "end": "947000"
  },
  {
    "text": "And we argue that the all 0s\ncode word must be in there. Because when you add\na code word to itself,",
    "start": "947000",
    "end": "953150"
  },
  {
    "text": "you get the all 0s\ncode word, right? OK.",
    "start": "953150",
    "end": "958580"
  },
  {
    "text": "So that's the class of codes\nwe're going to be focusing on. ",
    "start": "958580",
    "end": "966480"
  },
  {
    "text": "But I'm going to make a\nfurther restriction, which",
    "start": "966480",
    "end": "973639"
  },
  {
    "text": "is that I'm going to\nlook at code words that",
    "start": "973640",
    "end": "980760"
  },
  {
    "text": "are of a very special type. So I'm going to\nlimit myself to code words that have this structure.",
    "start": "980760",
    "end": "986725"
  },
  {
    "start": "986725",
    "end": "992899"
  },
  {
    "text": "So here's my data\nbits, d1 up to dk.",
    "start": "992900",
    "end": "998050"
  },
  {
    "text": "I'm going to pick my code word,\nso that, let's say, the first k",
    "start": "998050",
    "end": "1004890"
  },
  {
    "text": "bits are precisely\nthe data bits. And then I'll pick\nthe additional ones to be some set of what\nwe'll call parity bits.",
    "start": "1004890",
    "end": "1012730"
  },
  {
    "text": "So this is p1 up to pn minus k. All right, so I'm not\ngoing to have an arbitrary",
    "start": "1012730",
    "end": "1020250"
  },
  {
    "text": "transformation here. I'm going to restrict\nmyself to transformations that have the property that,\nwhen I multiply by the data",
    "start": "1020250",
    "end": "1027659"
  },
  {
    "text": "vector here, what I get is\nthe data vector reproduced in the initial part and\nthen a bunch of new bits",
    "start": "1027660",
    "end": "1037380"
  },
  {
    "text": "representing the\nredundant relationships that I'm computing. We refer to them as parity bits. ",
    "start": "1037380",
    "end": "1048059"
  },
  {
    "text": "It's not so important that the\ndata bits be in the first k position, so I'm willing\nto tolerate variations",
    "start": "1048060",
    "end": "1054929"
  },
  {
    "text": "of this where the data bits are\nsomewhere in this code vector. But the key thing about what's\ncalled a systematic code",
    "start": "1054930",
    "end": "1060330"
  },
  {
    "text": "is that, when I look at the code\nword in designated positions, I find the data bits and\nthe other positions are",
    "start": "1060330",
    "end": "1066510"
  },
  {
    "text": "the so-called\nparity bits that are obtained as linear combinations\nof the data bits, OK?",
    "start": "1066510",
    "end": "1073500"
  },
  {
    "text": "So if you are familiar\nwith matrix operations, then that what I'll\nneed is all the way down",
    "start": "1073500",
    "end": "1082350"
  },
  {
    "text": "the diagonal to\nhave a matrix that has 1s along the diagonal,\n0s everywhere else,",
    "start": "1082350",
    "end": "1089430"
  },
  {
    "text": "and then something here. Let me just call this matrix\nof left over 0s and 1s,",
    "start": "1089430",
    "end": "1094919"
  },
  {
    "text": "matrix A. OK. So I've got here a k\ntimes k matrix with 1s",
    "start": "1094920",
    "end": "1107470"
  },
  {
    "text": "down the diagonal and\n0s everywhere else. And then I've got a matrix\nwhich has 0s and 1s in it.",
    "start": "1107470",
    "end": "1113320"
  },
  {
    "text": "This is going to be, what is\nit, k times n minus k, right? ",
    "start": "1113320",
    "end": "1123620"
  },
  {
    "text": "So do you buy this? So think about how matrix\nmultiplication works. If I want the first\ncolumn on the left,",
    "start": "1123620",
    "end": "1129200"
  },
  {
    "text": "I take this row inner\nproduct or dot product with the first column here. That just selects out d1.",
    "start": "1129200",
    "end": "1135440"
  },
  {
    "text": "And indeed, I get the d1 there. And that happens for\nthe first k positions.",
    "start": "1135440",
    "end": "1141590"
  },
  {
    "text": "Beyond that, I'm taking\nlinear combinations with whatever sits here.",
    "start": "1141590",
    "end": "1146600"
  },
  {
    "text": "OK.  It turns out that this is\nnot really a special case.",
    "start": "1146600",
    "end": "1154070"
  },
  {
    "text": "It turns out that\nany linear code",
    "start": "1154070",
    "end": "1159559"
  },
  {
    "text": "can be transformed to this\nform by invertible operation.",
    "start": "1159560",
    "end": "1165340"
  },
  {
    "text": "So basically, if you use\ninvertible operations on the rows here and some\nrearrangement of the columns,",
    "start": "1165340",
    "end": "1172340"
  },
  {
    "text": "you can bring any\ncode to this form. And then the resulting code will\nhave effectively the same error",
    "start": "1172340",
    "end": "1179330"
  },
  {
    "text": "correction properties that\nthe code out here did. OK. So we're just going\nto limit ourselves",
    "start": "1179330",
    "end": "1184843"
  },
  {
    "text": "to thinking of\nlinear codes, which are in the so-called\nsystematic form.",
    "start": "1184843",
    "end": "1189929"
  },
  {
    "start": "1189930",
    "end": "1195840"
  },
  {
    "text": "In other words, some\npart of the code word is the message bits and the\nother part is parity bits, OK?",
    "start": "1195840",
    "end": "1204220"
  },
  {
    "start": "1204220",
    "end": "1210480"
  },
  {
    "text": "So let's look at a\nspecific code that is of this form,\nvery simple code,",
    "start": "1210480",
    "end": "1229580"
  },
  {
    "text": "referred to as a\nrectangular code. And you see a particular\nexample on this slide here.",
    "start": "1229580",
    "end": "1236240"
  },
  {
    "text": " So what do we do? We arrange our data\nbits into a matrix",
    "start": "1236240",
    "end": "1245360"
  },
  {
    "text": "which could be\nrectangular or square depending on what you have. So we're going to have r, rows,\nand c, columns, with the data",
    "start": "1245360",
    "end": "1264289"
  },
  {
    "text": "bits in here, so D1, D2, all\nthe way up to D sub, let's say,",
    "start": "1264290",
    "end": "1269510"
  },
  {
    "text": "r times c, right?  In this particular case,\nr and c are both 2.",
    "start": "1269510",
    "end": "1276649"
  },
  {
    "text": " And then you're going\nto generate the parity",
    "start": "1276650",
    "end": "1282500"
  },
  {
    "text": "bits in the simple fashion. What you're going to do is\nchoose a parity bit associated with the first row that\nbasically makes sure",
    "start": "1282500",
    "end": "1290660"
  },
  {
    "text": "that in the first row,\nincluding the parity bit, you've got an even number of 1s. OK. So this is a choice\nfor even parity here.",
    "start": "1290660",
    "end": "1297950"
  },
  {
    "text": "Similarly, P2 will\nbe chosen such that the second row\nhas even parity.",
    "start": "1297950",
    "end": "1303320"
  },
  {
    "text": "In other words, you've got\nan even number of 1s there. And for the columns, similarly,\nP3 will be chosen such that D1",
    "start": "1303320",
    "end": "1311910"
  },
  {
    "text": "and D3 and P3 together\nhave even parity. In other words, the number\nof 1s in that column is even.",
    "start": "1311910",
    "end": "1320600"
  },
  {
    "text": "Again-- the same\nthing for this column. So what you're\ntrying to do is sort of have sentries on the\nrows and columns that",
    "start": "1320600",
    "end": "1327465"
  },
  {
    "text": "will signal when\nsomething has happened to a bit of the intersection. That's the general\nidea here, all right?",
    "start": "1327465",
    "end": "1334580"
  },
  {
    "text": "So you'll take this out\nand arrange it then. So you've got your parity bits.",
    "start": "1334580",
    "end": "1341210"
  },
  {
    "text": "What's the sequence I used-- P1, P2 and then more parity\nbits here, OK, so row",
    "start": "1341210",
    "end": "1358400"
  },
  {
    "text": "and column parity bits. ",
    "start": "1358400",
    "end": "1363480"
  },
  {
    "text": "So here's a way to think about\nwhat these are explicitly. So what you'll do\nis P1 is D1 plus D2.",
    "start": "1363480",
    "end": "1372240"
  },
  {
    "text": "When I say plus, of\ncourse, I mean in GF(2). So that's modulo\n2 addition, right?",
    "start": "1372240",
    "end": "1381960"
  },
  {
    "text": "Does that simple\nformula ensure that I've got an even number of 1s\nin that first row, right?",
    "start": "1381960",
    "end": "1392399"
  },
  {
    "text": "If D1 is 0 and D2\nis 1, then I'll make this equal to 1,\nwhich is what I need.",
    "start": "1392400",
    "end": "1399000"
  },
  {
    "text": "If D1 and D2 are both\n1, I'll make this 0, which is what I need and so on. So this simple\nexpression captures it",
    "start": "1399000",
    "end": "1406110"
  },
  {
    "text": "and similarly for the r-th row. So for each row,\nyou make the parity bit equal to the sum of the\ndata bits in that row, similarly",
    "start": "1406110",
    "end": "1415590"
  },
  {
    "text": "for the columns, OK? Another thing, by\nthe way, can you",
    "start": "1415590",
    "end": "1421410"
  },
  {
    "text": "tell me what P1 plus D1 plus\nD2 is going to be in this case?",
    "start": "1421410",
    "end": "1427510"
  },
  {
    "text": "If I pick P1 in\nthis fashion, what does it guarantee for\nP1 plus P2 plus D2?",
    "start": "1427510",
    "end": "1435420"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] GEORGE VERGHESE: Sorry? AUDIENCE: [INAUDIBLE] GEORGE VERGHESE: 0, right? Because really I'm taking\nP1 and adding P1 again.",
    "start": "1435420",
    "end": "1444690"
  },
  {
    "text": "And when I take something and\nadd it to itself in GF(2), I get 0. So this is equal to 0.",
    "start": "1444690",
    "end": "1450590"
  },
  {
    "text": " So these are just\ntwo different ways of thinking about\nthe parity bit here.",
    "start": "1450590",
    "end": "1457809"
  },
  {
    "text": "So this is how you\ncompute the parity bit, whereas this might be referred\nto as parity relation.",
    "start": "1457810",
    "end": "1463710"
  },
  {
    "start": "1463710",
    "end": "1470260"
  },
  {
    "text": "It's a linear constraint\nrelating the parity bit and the data bit.",
    "start": "1470260",
    "end": "1475500"
  },
  {
    "text": " In fact, we might try\nconstructing this matrix",
    "start": "1475500",
    "end": "1482220"
  },
  {
    "text": "as we go, right? So we've got D1, D2,\nD3, D4, P1, P2, P3, P4.",
    "start": "1482220",
    "end": "1495360"
  },
  {
    "text": " Whoops. ",
    "start": "1495360",
    "end": "1502260"
  },
  {
    "text": "And here is D1, D2, D3, D4.",
    "start": "1502260",
    "end": "1509250"
  },
  {
    "text": "I'm going to have my\ngenerator matrix here. It's got the identity\nmatrix in this first part.",
    "start": "1509250",
    "end": "1515700"
  },
  {
    "text": "We use the symbol capital\nI for identity matrix. ",
    "start": "1515700",
    "end": "1526570"
  },
  {
    "text": "So when you see\nidentity matrix, you know it's a square matrix\nwith 1s down the diagonals.",
    "start": "1526570",
    "end": "1532390"
  },
  {
    "text": "OK. So what goes in the\nnext column over here for this particular example?",
    "start": "1532390",
    "end": "1537720"
  },
  {
    "text": " The next column over\nis going to be P1.",
    "start": "1537720",
    "end": "1544205"
  },
  {
    "text": " P1 is D1 plus D2.",
    "start": "1544205",
    "end": "1550930"
  },
  {
    "text": "So what I need is\n1, 1, 0, 0, right--",
    "start": "1550930",
    "end": "1556600"
  },
  {
    "text": " and similarly for\nthe other parity bit. So once you're\ntold the rule here,",
    "start": "1556600",
    "end": "1564010"
  },
  {
    "text": "it's easy to generate the\nmatrix that goes with it. ",
    "start": "1564010",
    "end": "1573700"
  },
  {
    "text": "OK. So let's get some practice\nfiguring out what's what here.",
    "start": "1573700",
    "end": "1581380"
  },
  {
    "text": "This is all we're\ngoing to be aiming to do in this lecture is\nconstruct codes that correct up to a single error.",
    "start": "1581380",
    "end": "1586789"
  },
  {
    "text": "So we're focusing on\nSingle-Error Correction codes or what are referred\nto as SEC codes,",
    "start": "1586790",
    "end": "1593130"
  },
  {
    "text": "OK, Single-Error Correction. So assume that only one error\nhas happened or zero errors.",
    "start": "1593130",
    "end": "1599830"
  },
  {
    "text": "You don't get more\nthan one, let's say. If you receive this, I've\njust rearranged the code word",
    "start": "1599830",
    "end": "1606909"
  },
  {
    "text": "into the pattern that allows\nyou to look at this very easily. So here's D1, D2,\nD3, D4, and so on.",
    "start": "1606910",
    "end": "1615160"
  },
  {
    "text": "Any errors here in this? ",
    "start": "1615160",
    "end": "1620240"
  },
  {
    "text": "You can see that, if I\nlook along the first row, I've got even parity, even\nparity, even parity, even",
    "start": "1620240",
    "end": "1626840"
  },
  {
    "text": "parity. So everything looks fine. And I'll declare that\nthere are no errors.",
    "start": "1626840",
    "end": "1632930"
  },
  {
    "text": "On the other hand,\nif I receive that,",
    "start": "1632930",
    "end": "1638990"
  },
  {
    "text": "OK, so here I have a parity\ncheck failure, right?",
    "start": "1638990",
    "end": "1645950"
  },
  {
    "text": "And so I know that something\nis wrong in this column. I look along the rows. I see a parity check\nfailure in that row.",
    "start": "1645950",
    "end": "1652500"
  },
  {
    "text": "So I pinpoint the error as\nbeing at the intersection of those two. And I know that's the bit\nthat I have to flip, OK?",
    "start": "1652500",
    "end": "1660940"
  },
  {
    "start": "1660940",
    "end": "1666009"
  },
  {
    "text": "And another case, here\nthere is a failure on a row,",
    "start": "1666010",
    "end": "1677020"
  },
  {
    "text": "but nothing on the\ncorresponding columns. So what that tells us, it's\nactually the parity bit that's",
    "start": "1677020",
    "end": "1682120"
  },
  {
    "text": "failed, right? Everything else looks fine,\nbut the parity bit has failed. If there's a single\nerror to correct,",
    "start": "1682120",
    "end": "1688179"
  },
  {
    "text": "it would be to\nconvert this 1 to a 0. And then all parity\nrelations are satisfied.",
    "start": "1688180",
    "end": "1693260"
  },
  {
    "text": "OK. So you can get errors\nin the parity bits as easily as you get\nthem in the data bits because the channel doesn't\nknow the difference.",
    "start": "1693260",
    "end": "1699430"
  },
  {
    "text": "The channel is just\nseeing a sequence of bits. All right, so this is\nhow you work backwards",
    "start": "1699430",
    "end": "1706280"
  },
  {
    "text": "to figure out what's going on. ",
    "start": "1706280",
    "end": "1713320"
  },
  {
    "text": "Another way to say it-- and we'll see this\nlater-- is you",
    "start": "1713320",
    "end": "1719010"
  },
  {
    "text": "get what should be D1 and\nD2, but you're not sure yet whether they're\nin error or not. So let me call them D1\nand D2 prime for now.",
    "start": "1719010",
    "end": "1728110"
  },
  {
    "text": "So you compute your estimate of\nthe first parity relationship",
    "start": "1728110",
    "end": "1734040"
  },
  {
    "text": "and compare it with\nwhat's sitting in-- well, let me say,\nare these equal?",
    "start": "1734040",
    "end": "1739720"
  },
  {
    "text": "So what you're doing\nis you're computing your estimate of the\nparity relationship",
    "start": "1739720",
    "end": "1745590"
  },
  {
    "text": "based on what's sitting in the\ncode word in these positions and seeing whether it's equal to\nwhat you think it should equal.",
    "start": "1745590",
    "end": "1751670"
  },
  {
    "text": "OK. And if it's equal, then you\nsay that parity relation is satisfied. And otherwise, you\ntry and make a change.",
    "start": "1751670",
    "end": "1758308"
  },
  {
    "text": "Now, we'll see how to do\nthis more systematically next lecture, actually,\nwhen we'll go further with the matrix story.",
    "start": "1758308",
    "end": "1764010"
  },
  {
    "text": "But I'm just trying to get\nyou a little oriented here. OK. ",
    "start": "1764010",
    "end": "1772820"
  },
  {
    "text": "So you probably believe\nby now that this code can correct single errors, right?",
    "start": "1772820",
    "end": "1780101"
  },
  {
    "text": "The rectangular code can\ncorrect single errors. Basically, an error\nin a message bit",
    "start": "1780102",
    "end": "1785370"
  },
  {
    "text": "is pinpointed by parity\nerrors on the row and column. A message in a parity bit is\npinpointed by just an error",
    "start": "1785370",
    "end": "1793490"
  },
  {
    "text": "in the parity row or column. And if you get something\nother than that,",
    "start": "1793490",
    "end": "1798590"
  },
  {
    "text": "then you say you have an\nuncorrectable error, right? You're not set up to do things\nwith other errors there.",
    "start": "1798590",
    "end": "1806960"
  },
  {
    "text": "But now, how do we know\nthe Hamming distance is 3? The minimum Hamming\ndistance is 2.",
    "start": "1806960",
    "end": "1812184"
  },
  {
    "text": "We know that, if the minimum\nHamming distance is 3, we can correct a single error. But it's possible that the\nminimum Hamming distance",
    "start": "1812185",
    "end": "1818870"
  },
  {
    "text": "is greater than 3 for this\ncase, which might mean we have more possibilities. So how can we establish what\nthe minimum Hamming distance is?",
    "start": "1818870",
    "end": "1828480"
  },
  {
    "text": " Any ideas? Yeah. AUDIENCE: [INAUDIBLE] the case\nin which the Hamming distance",
    "start": "1828480",
    "end": "1835920"
  },
  {
    "text": "is [INAUDIBLE] change\none of the data bits and and the two parity bits\nthat correspond [INAUDIBLE]..",
    "start": "1835920",
    "end": "1842547"
  },
  {
    "text": "GEORGE VERGHESE: OK. So am I going to search all\npairs-- so the suggestion was change something until you\nfind the Hamming distance of 3.",
    "start": "1842547",
    "end": "1851270"
  },
  {
    "text": "And presumably, you won't\nfind anything smaller, right? OK. Because we know we can\ncorrect single errors.",
    "start": "1851270",
    "end": "1857240"
  },
  {
    "text": "But am I going to search\nthrough all pairs of code words to do this? Or can I do something better?",
    "start": "1857240",
    "end": "1863630"
  },
  {
    "start": "1863630",
    "end": "1869360"
  },
  {
    "text": "Yeah. AUDIENCE: [INAUDIBLE]\nif you have [INAUDIBLE].. ",
    "start": "1869360",
    "end": "1882840"
  },
  {
    "text": "GEORGE VERGHESE:\nSo you're giving me a particular\ncomputation here, but I don't know that you've answered\nmy question, which was,",
    "start": "1882840",
    "end": "1889590"
  },
  {
    "text": "am I going to have to search\nthrough all pairs of code words to see that I can establish\na known distance of 3?",
    "start": "1889590",
    "end": "1896330"
  },
  {
    "text": "Or is there something simpler\nthan that that I can do? AUDIENCE: [INAUDIBLE]",
    "start": "1896330",
    "end": "1903563"
  },
  {
    "text": "GEORGE VERGHESE:\nCan you speak up? My hearing is not great, sorry. AUDIENCE: [INAUDIBLE] high\ndimensional [INAUDIBLE]..",
    "start": "1903563",
    "end": "1911713"
  },
  {
    "text": " It's whatever minimum Hamming\ndistance is [INAUDIBLE]..",
    "start": "1911713",
    "end": "1919730"
  },
  {
    "text": "GEORGE VERGHESE: Oh, so you've\ngot a general formula, OK. Can you invoke\nlinearity in some way?",
    "start": "1919730",
    "end": "1924770"
  },
  {
    "text": "Because I haven't heard you\nuse the linearity of the code in anything you've said.",
    "start": "1924770",
    "end": "1930309"
  },
  {
    "text": "Were you going to\noffer a suggestion? Yeah. AUDIENCE: [INAUDIBLE] what\nhappens when you [? put one ?]",
    "start": "1930310",
    "end": "1940700"
  },
  {
    "text": "[INAUDIBLE] when you [INAUDIBLE]\nparity [INAUDIBLE] you",
    "start": "1940700",
    "end": "1945803"
  },
  {
    "text": "pick one bit you have\nto put two other bits. [INAUDIBLE] GEORGE VERGHESE: OK.",
    "start": "1945803",
    "end": "1951520"
  },
  {
    "text": "So I think I get what\nyour argument is. You're saying start from\nan arbitrary message bit. And then if you make any\nflip, you'll get at least 3.",
    "start": "1951520",
    "end": "1958200"
  },
  {
    "text": "That may have been\nthe earlier argument, which I missed, right? Is there a way to invoke\nthe linearity of the code",
    "start": "1958200",
    "end": "1964710"
  },
  {
    "text": "in making these arguments? You're on the right\ntrack, but I just want to see if linearity\ncan be invoked. Yeah. AUDIENCE: I think\nyou can use the all 0",
    "start": "1964710",
    "end": "1970903"
  },
  {
    "text": "codes and [INAUDIBLE]. GEORGE VERGHESE: Right. So what we've established\nis that, for a linear code,",
    "start": "1970903",
    "end": "1978660"
  },
  {
    "text": "the minimum Hamming distance\nis the minimum weight among all non-0 vectors, right? So all you have to do\nis start with the 0 code",
    "start": "1978660",
    "end": "1986790"
  },
  {
    "text": "word, everything 0, and then\nflip a bit in the message",
    "start": "1986790",
    "end": "1997780"
  },
  {
    "text": "and then see if you get\nHamming distance 3 or greater. OK. So we can start with\nthe 0 code word.",
    "start": "1997780",
    "end": "2003481"
  },
  {
    "text": "I guess that's the point\nI was going to make here. OK. ",
    "start": "2003482",
    "end": "2009880"
  },
  {
    "text": "There is another expression\nthat popped up there before completing that argument. Do you agree with what it\nsaid about the code rate?",
    "start": "2009880",
    "end": "2017800"
  },
  {
    "text": "It says the code rate is\nrc over rc plus r plus c.",
    "start": "2017800",
    "end": "2026530"
  },
  {
    "text": "Do you agree with that? Yeah. Because we have the number\nof message bits being rc.",
    "start": "2026530",
    "end": "2034480"
  },
  {
    "text": "And then the total number\nof bits is rc plus r plus c. So the rate is, indeed, what's\ngiven by that expression.",
    "start": "2034480",
    "end": "2041960"
  },
  {
    "text": "OK. And then we'll go on to make\nthis argument about the three",
    "start": "2041960",
    "end": "2047500"
  },
  {
    "text": "cases here. So you can actually\ngo case by case. And the argument\nhere is actually",
    "start": "2047500",
    "end": "2054134"
  },
  {
    "text": "closer to what was being\ndescribed out there. It doesn't start\nwith the 0 message. But it says, if you've\ngot two messages that",
    "start": "2054135",
    "end": "2059770"
  },
  {
    "text": "differ in 1 bit in\nthe message area, then they're going to differ by\n1 bit in the associated parity",
    "start": "2059770",
    "end": "2067029"
  },
  {
    "text": "areas. And, therefore, the overall\ncode word has moved by 3. And then you go through\neach of the cases,",
    "start": "2067030",
    "end": "2072638"
  },
  {
    "text": "and you argue that you've\nmoved by at least 3. So this argument is\nactually closer to what was being suggested earlier.",
    "start": "2072639",
    "end": "2079250"
  },
  {
    "text": "OK. So you can go through\neach of the cases and discover that the nearest\ncode word you can get to",
    "start": "2079250",
    "end": "2086230"
  },
  {
    "text": "is Hamming distance\n3 away, all right? Why is it that we're flipping\na bit in the message section",
    "start": "2086230",
    "end": "2095859"
  },
  {
    "text": "to decide what's a new case? ",
    "start": "2095860",
    "end": "2101070"
  },
  {
    "text": "The way we count\nour code words is by arranging through all\nthe possible 2 the k, right? So we've got to flip\nbits in the data section",
    "start": "2101070",
    "end": "2107930"
  },
  {
    "text": "to get to another code word. So we're saying we have\na code word corresponding to some set of data bits.",
    "start": "2107930",
    "end": "2113210"
  },
  {
    "text": "We'll flip a bit there, and then\nlook to see what happens, OK? ",
    "start": "2113210",
    "end": "2121080"
  },
  {
    "text": "OK. So here's a little\nmodification to the code,",
    "start": "2121080",
    "end": "2131329"
  },
  {
    "text": "which actually puts in an\noverall parity bit, P here. So what this is is the\nsum of all the entries",
    "start": "2131330",
    "end": "2139369"
  },
  {
    "text": "and every other position. OK. And if you go through\nthe argument there,",
    "start": "2139370",
    "end": "2146349"
  },
  {
    "text": "what you'll discover is what\nyou've done is go from-- do I still have it on the board?",
    "start": "2146350",
    "end": "2152670"
  },
  {
    "text": "I might have it\non the board here.  No.",
    "start": "2152670",
    "end": "2158750"
  },
  {
    "text": "What you've done is go from\nthe rectangular code that had this structure, Hamming\ndistance 3, to now one that",
    "start": "2158750",
    "end": "2169010"
  },
  {
    "text": "has Hamming distance 4. ",
    "start": "2169010",
    "end": "2175770"
  },
  {
    "text": "OK. So adding that\noverall parity bit has increased the minimum\nHamming distance of the code from 3 to 4.",
    "start": "2175770",
    "end": "2182660"
  },
  {
    "text": "Does that improve error\ncorrection capabilities? You still can only\ncorrect up to one error.",
    "start": "2182660",
    "end": "2188960"
  },
  {
    "text": "But the difference now is\nthat, if you get two errors, you can actually detect it\naccurately as a 2-bit error.",
    "start": "2188960",
    "end": "2195610"
  },
  {
    "text": "OK. All right, so I'll leave you\nto go through that analysis.",
    "start": "2195610",
    "end": "2203750"
  },
  {
    "text": "This we've pretty\nmuch done already. This has just filled out\nthe rest of the matrix.",
    "start": "2203750",
    "end": "2209420"
  },
  {
    "text": "You see that we filled out\nthis column on the board. That was this case. ",
    "start": "2209420",
    "end": "2217880"
  },
  {
    "text": "But you can actually\nfill them all out once you have the description\nof the parity check bits.",
    "start": "2217880",
    "end": "2222950"
  },
  {
    "text": "OK. So these other columns you\ncan fill out similarly.",
    "start": "2222950",
    "end": "2227960"
  },
  {
    "text": "And this is for the case of-- let's see, what case is\nit referring to here? ",
    "start": "2227960",
    "end": "2238740"
  },
  {
    "text": "n equals 3.  Let's see-- sorry, n equals 9.",
    "start": "2238740",
    "end": "2247080"
  },
  {
    "text": "k equals 4. d equal 4. So what rectangular picture\nam I talking about here?",
    "start": "2247080",
    "end": "2253545"
  },
  {
    "text": "This is a rectangular code. What rectangular code\nhas these parameters? ",
    "start": "2253545",
    "end": "2263840"
  },
  {
    "text": "So I must be\ntalking about 2 by 2 for the data bits, 2 rows, 2\ncolumns, and then 1 overall,",
    "start": "2263840",
    "end": "2274069"
  },
  {
    "text": "right? The overall, what gives\nme the clue is I've",
    "start": "2274070",
    "end": "2280069"
  },
  {
    "text": "got a minimum distance of 4. If it's a rectangular code\nwith minimum distance 4, then I know I must have\nan overall parity bit.",
    "start": "2280070",
    "end": "2287480"
  },
  {
    "text": "k is 4 because I just\nhave 4 data bits.",
    "start": "2287480",
    "end": "2293180"
  },
  {
    "text": "And overall, I've got to\nsend 9 bits in each block.",
    "start": "2293180",
    "end": "2298589"
  },
  {
    "text": "OK. So for that\nparticular case, this is what the matrix looks like.",
    "start": "2298590",
    "end": "2305100"
  },
  {
    "text": "So the only difference is\nthere is an overall parity bit here, P5, which is the\nsum of all the data bits.",
    "start": "2305100",
    "end": "2314952"
  },
  {
    "text": "Actually, all the data\nbits on the parity bits, but this is what\nit works out to be.",
    "start": "2314952",
    "end": "2320539"
  },
  {
    "text": "OK.  And we've pretty much talked\nthrough the decoding here.",
    "start": "2320540",
    "end": "2328309"
  },
  {
    "text": "Let me put it all up there. ",
    "start": "2328310",
    "end": "2334200"
  },
  {
    "text": "So you calculate\nall the parity bits. If you see no parity errors,\nyou return all the data bits.",
    "start": "2334200",
    "end": "2339600"
  },
  {
    "text": "If you detect a row or\ncolumn parity bit error, then you make the change in\nthat particular position.",
    "start": "2339600",
    "end": "2346790"
  },
  {
    "text": "And otherwise, you flag\nan uncorrectable error. So the correction\nis straightforward. If you look on the\nslides later, you'll",
    "start": "2346790",
    "end": "2353220"
  },
  {
    "text": "see a little quiz that you\ncan try for yourselves. Or you might try\nit in recitation.",
    "start": "2353220",
    "end": "2358500"
  },
  {
    "text": "But let me pass on that. OK. So the question arises,\nis a rectangular code",
    "start": "2358500",
    "end": "2365930"
  },
  {
    "text": "using this redundant\ninformation in an efficient way? ",
    "start": "2365930",
    "end": "2374430"
  },
  {
    "text": "Or could we do better?  So let's see, we've got a code\nword that's got k message bits.",
    "start": "2374430",
    "end": "2388910"
  },
  {
    "text": "And then it's got n\nminus k parity bits. OK. So here's the data bits.",
    "start": "2388910",
    "end": "2394640"
  },
  {
    "text": "Here's the parity bits. We want to use the parity bits\nas effectively as possible.",
    "start": "2394640",
    "end": "2401190"
  },
  {
    "text": " How many different\nconditions can we signal if we have P bits that\ncan only take value 0 or 1?",
    "start": "2401190",
    "end": "2412580"
  },
  {
    "text": "Just 2 to the n minus\nk conditions, right? So if we're looking\nat the code word and trying to deduce something\nfrom the parity bits,",
    "start": "2412580",
    "end": "2420390"
  },
  {
    "text": "how many different\nthings can we deduce? Well, n minus k\nbits can signal 2",
    "start": "2420390",
    "end": "2425750"
  },
  {
    "text": "to the n minus k\ndifferent things, right? What do they have to signal?",
    "start": "2425750",
    "end": "2431089"
  },
  {
    "text": "What do the parity\nbits have to tell us? They have to tell us either\nthat an error didn't occur",
    "start": "2431090",
    "end": "2437480"
  },
  {
    "text": "or that an error occurred\nin the first position or second position or third\nall the way up to the n-th.",
    "start": "2437480",
    "end": "2443750"
  },
  {
    "text": "So the number of things we want\nto learn from the parity bits is n plus 1.",
    "start": "2443750",
    "end": "2449000"
  },
  {
    "text": "So you would hope\nthat this is true,",
    "start": "2449000",
    "end": "2456000"
  },
  {
    "text": "that the number of things you\ncan signal with the parity bits is at least equal to\nthe number of things you want to get in the case\nof single-error correction.",
    "start": "2456000",
    "end": "2463520"
  },
  {
    "text": "All right, we're only trying\nto correct a single error here. So we want the number of\npossibilities that the parity",
    "start": "2463520",
    "end": "2470089"
  },
  {
    "text": "bits can indicate to include\nthe case of no errors-- that's the 1 over there--",
    "start": "2470090",
    "end": "2475520"
  },
  {
    "text": "plus the case of an error\nin the first position or second position or\nthird position and so on.",
    "start": "2475520",
    "end": "2481480"
  },
  {
    "text": "OK. If you plug in the\ntypical parameters for the rectangular code,\nyou'll see that you're actually",
    "start": "2481480",
    "end": "2491140"
  },
  {
    "text": "exceeding this wildly. Let's see. For that particular case,\n9, 4, 4, what do we have?",
    "start": "2491140",
    "end": "2496610"
  },
  {
    "text": "We have 9 plus 1 on this side. And we have 2 to the what--",
    "start": "2496610",
    "end": "2503440"
  },
  {
    "text": "9 minus 4. ",
    "start": "2503440",
    "end": "2509135"
  },
  {
    "text": "So what's that-- 32\non the right-hand side and 10 on the left. So you've got a big gap.",
    "start": "2509135",
    "end": "2514940"
  },
  {
    "text": "If you were going to allow me\n1, 2, 3, 4, 5, parity bits,",
    "start": "2514940",
    "end": "2523420"
  },
  {
    "text": "I could do a lot\nmore than tell you what you're asking me to tell\nyou in this particular code.",
    "start": "2523420",
    "end": "2528880"
  },
  {
    "text": "So I'm not using the parity\nbits as efficiently as I could. And that motivates the\nsearch for better choices.",
    "start": "2528880",
    "end": "2536720"
  },
  {
    "text": "So this is a fundamental\ninequality here, something we'll keep referring back to.",
    "start": "2536720",
    "end": "2543267"
  },
  {
    "text": "So make sure you understand\nwhere that comes from. ",
    "start": "2543267",
    "end": "2550475"
  },
  {
    "text": "And that leads us to what\nare called Hamming codes. So Hamming codes are codes\nthat actually use the parity",
    "start": "2550475",
    "end": "2555770"
  },
  {
    "text": "bits efficiently in that they\nmatch this bound with equality.",
    "start": "2555770",
    "end": "2561780"
  },
  {
    "text": "OK. So can you think of\nthe smallest k and n pair that's going to satisfy\nthis with equality just playing",
    "start": "2561780",
    "end": "2569839"
  },
  {
    "text": "with some small numbers?  Maybe I shouldn't play\nthis game since we're",
    "start": "2569840",
    "end": "2576450"
  },
  {
    "text": "late on the lecture. Here's a suggestion, nkd.",
    "start": "2576450",
    "end": "2583410"
  },
  {
    "text": "The Hamming code is going to be\na single-error correcting code with minimum Hamming distance 3.",
    "start": "2583410",
    "end": "2588900"
  },
  {
    "text": "So the 3 will always be there. This is n, and this is k. And you'll see that this\nis satisfied with equality.",
    "start": "2588900",
    "end": "2597543"
  },
  {
    "text": "But there are other choices. This is the smallest choice,\nthe smallest non-trivial choice anyway.",
    "start": "2597543",
    "end": "2602850"
  },
  {
    "text": "But you can go to more\ngeneral possibilities.",
    "start": "2602850",
    "end": "2608740"
  },
  {
    "text": "So this code is\ncalled a perfect code because it matches that\ninequality with equality,",
    "start": "2608740",
    "end": "2614178"
  },
  {
    "text": "but actually that\ndoesn't necessarily mean it's the best code. It turns out to be\na good code provided",
    "start": "2614178",
    "end": "2620775"
  },
  {
    "text": "you're picking these\nparameters appropriately for your application. But this is perfect code\nin a very technical sense,",
    "start": "2620775",
    "end": "2626970"
  },
  {
    "text": "meaning it's a code that attains\nthis inequality with equality. OK, that's all that\nit means there.",
    "start": "2626970",
    "end": "2633480"
  },
  {
    "text": "OK, so what's the idea\non the Hamming code? ",
    "start": "2633480",
    "end": "2644390"
  },
  {
    "text": "Let me put it all down there,\nand then we'll talk through it. So this little Venn\ndiagram conveys for you",
    "start": "2644390",
    "end": "2652580"
  },
  {
    "text": "how the parity bits are picked. And they end up actually being\npicked in a very efficient way to provide the\ncoverage you want.",
    "start": "2652580",
    "end": "2659220"
  },
  {
    "text": "So this is the case that\nwas mentioned before. This is the, was it, 7, 4, 3.",
    "start": "2659220",
    "end": "2668798"
  },
  {
    "text": "Is that what we had?  Yeah, 7, 4, 3, right?",
    "start": "2668798",
    "end": "2676400"
  },
  {
    "text": " So let's give ourselves\nsome space here.",
    "start": "2676400",
    "end": "2681540"
  },
  {
    "start": "2681540",
    "end": "2690110"
  },
  {
    "text": "So with 3 parity\nbits, we're actually going to indicate\nwhether there was 0 error",
    "start": "2690110",
    "end": "2696230"
  },
  {
    "text": "or whether the error occurred\nin the first position, second position, and\nso on, all the way up to the seventh position.",
    "start": "2696230",
    "end": "2702270"
  },
  {
    "text": "So we're going to use\n3 bits, 3 parity bits, to indicate eight\npossibilities, which is what we",
    "start": "2702270",
    "end": "2707960"
  },
  {
    "text": "know you should be able to do. And here's the arrangement. This picture conveys it. So basically, P1 is\nD1 plus D2 plus D4.",
    "start": "2707960",
    "end": "2715579"
  },
  {
    "text": "So P1 fires if D1, D2, or\nD4, if any one of those",
    "start": "2715580",
    "end": "2721910"
  },
  {
    "text": "is 1 and similarly for\nthese other things. OK. So this picture tells\nyou what data bits",
    "start": "2721910",
    "end": "2728660"
  },
  {
    "text": "are included in the\ncoverage of each parity bit. So that's the way to think\nof what this picture is.",
    "start": "2728660",
    "end": "2734660"
  },
  {
    "text": "So these are\napportioned carefully. So for instance,\nlet's see, if you",
    "start": "2734660",
    "end": "2740270"
  },
  {
    "text": "discover that P1 and P3\nindicate an error, that means some data bit\nin the coverage of P1",
    "start": "2740270",
    "end": "2746660"
  },
  {
    "text": "and in the coverage\nof P3 have an error. ",
    "start": "2746660",
    "end": "2753819"
  },
  {
    "text": "But P2 didn't have an error. OK. So what does that tell you?",
    "start": "2753820",
    "end": "2759400"
  },
  {
    "text": "We're only considering\nup to single errors. If P1 and P3 have an error,\nbut P2 doesn't have an error,",
    "start": "2759400",
    "end": "2766570"
  },
  {
    "text": "well, P1 and P3 share D2, D4. But P2 didn't have an\nerror, so D4 must be fine.",
    "start": "2766570",
    "end": "2772990"
  },
  {
    "text": "So D2 must be the one\nthat's an error, OK? And so you get full coverage\nby that kind of reasoning.",
    "start": "2772990",
    "end": "2778588"
  },
  {
    "text": " One way to think of this,\nand this is actually",
    "start": "2778588",
    "end": "2784570"
  },
  {
    "text": "how Hamming set it up, was he\nactually arranged the parity",
    "start": "2784570",
    "end": "2790450"
  },
  {
    "text": "bits and the data bits\na little differently down that code word. He had parity bit 1\nin the first position,",
    "start": "2790450",
    "end": "2797500"
  },
  {
    "text": "parity bit 2 in the second\nposition, parity bit 3 in the fourth position. If you had a long code\nword, the next one",
    "start": "2797500",
    "end": "2803740"
  },
  {
    "text": "would be in the eighth position. So it's 2 to the 0, 2 to the\n1, 2 to the 2, 2 to the 3,",
    "start": "2803740",
    "end": "2808780"
  },
  {
    "text": "and so on. So those are the positions in\nwhich he puts the parity bits. Everywhere else\nare the data bits.",
    "start": "2808780",
    "end": "2815050"
  },
  {
    "text": "And then the data bits that\nfeed into parity P1 or parity",
    "start": "2815050",
    "end": "2822880"
  },
  {
    "text": "relation P1 are the\ndata bits and positions that end with a 1.",
    "start": "2822880",
    "end": "2828870"
  },
  {
    "text": "OK. So if the positions\nend with the 1, you stick them in the coverage\nof this parity relationship,",
    "start": "2828870",
    "end": "2834820"
  },
  {
    "text": "so D1, D2, not D3, but D4. For P2, similarly,\nthe parity relation P2",
    "start": "2834820",
    "end": "2845770"
  },
  {
    "text": "includes the data\nbits that have a 1 in their second position, so\nD1, not D2, yes D3, and yes D4.",
    "start": "2845770",
    "end": "2853940"
  },
  {
    "text": "OK. So the nice thing about\nthat is that, when you get a particular\npattern of errors,",
    "start": "2853940",
    "end": "2860650"
  },
  {
    "text": "it actually leads you exactly to\nthe right position in the code",
    "start": "2860650",
    "end": "2866809"
  },
  {
    "text": "word. So I don't want to actually\nspend a lot of time here. I want you to look\nat that separately.",
    "start": "2866810",
    "end": "2872770"
  },
  {
    "text": "But just to go over the\nprocess, here's what happens. We know that parity bit\nP1 was D1 plus D2 plus D4.",
    "start": "2872770",
    "end": "2881730"
  },
  {
    "text": "So we know that this parity\nrelationship was satisfied at the transmitting end. By the time you receive\nall of this, all of it",
    "start": "2881730",
    "end": "2888690"
  },
  {
    "text": "might have been corrupted. That's why I put a little\nprimes next to these. Not all of them, but one\nof them may have been.",
    "start": "2888690",
    "end": "2894840"
  },
  {
    "text": "We're limiting ourselves to a\nsingle-error correction, OK? So the D1 prime may not\nbe D1 because of an error.",
    "start": "2894840",
    "end": "2902890"
  },
  {
    "text": "So what you do is you compute\nthese so-called syndrome bits. If there were no errors, then\nE1 should be 0, E2 should be 0,",
    "start": "2902890",
    "end": "2911580"
  },
  {
    "text": "E3 should be 0 because that's\nhow it was on the other end. If there's a single error\nin one of the bits covered",
    "start": "2911580",
    "end": "2917520"
  },
  {
    "text": "by the appropriate\nrelationship, you're going to get the associated\nsyndrome bit going to 1.",
    "start": "2917520",
    "end": "2923040"
  },
  {
    "text": "So you compute these syndromes\nand then line them up as a binary number. And it turns out that,\ndepending on the pattern",
    "start": "2923040",
    "end": "2929670"
  },
  {
    "text": "of the syndromes,\nit'll tell you exactly the position and the code word\nin which there's an error.",
    "start": "2929670",
    "end": "2935109"
  },
  {
    "text": "So it's kind of\ncute and powerful. You can correct up to t errors. And there's a\nnatural relationship",
    "start": "2935110",
    "end": "2941190"
  },
  {
    "text": "that extends from this. I wanted to make one\nfinal point, which is that these error correcting\ncodes occur all over the place,",
    "start": "2941190",
    "end": "2949230"
  },
  {
    "text": "not just in the\nsetting of binary. And one thing you\nmight try and DO if you're carrying\na textbook with you,",
    "start": "2949230",
    "end": "2956670"
  },
  {
    "text": "look at the ISBN number. The ISBN number is a 10\ndigit number x1 up to x10.",
    "start": "2956670",
    "end": "2965460"
  },
  {
    "text": "And it turns out that 1 times\nx1 plus 2 times x2 plus 10 times",
    "start": "2965460",
    "end": "2972300"
  },
  {
    "text": "x10 is going to be 0 modulo 11.",
    "start": "2972300",
    "end": "2978030"
  },
  {
    "text": "So try that out on the\nISBN number of any book you're carrying. What you'll see is that this\nis a parity relationship that",
    "start": "2978030",
    "end": "2983819"
  },
  {
    "text": "guards against errors\nin any single ISBN number or a\ntransposition of two,",
    "start": "2983820",
    "end": "2990300"
  },
  {
    "text": "which turn out to be the\ntwo most natural errors. OK. Look for parity relations\nin other places.",
    "start": "2990300",
    "end": "2997100"
  },
  {
    "start": "2997100",
    "end": "2999413"
  }
]