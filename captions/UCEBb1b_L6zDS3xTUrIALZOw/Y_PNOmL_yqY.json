[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "It's not unusual to find that an application\nis organized as multiple communicating processes.",
    "start": "489",
    "end": "6688"
  },
  {
    "text": "What's the advantage of using multiple processes\ninstead of just a single process?",
    "start": "6689",
    "end": "12050"
  },
  {
    "text": "Many applications exhibit concurrency, i.e.,\nsome of the required computations can be performed",
    "start": "12050",
    "end": "17710"
  },
  {
    "text": "in parallel.",
    "start": "17710",
    "end": "19060"
  },
  {
    "text": "For example, video compression algorithms\nrepresent each video frame as an array of",
    "start": "19060",
    "end": "24230"
  },
  {
    "text": "8-pixel by 8-pixel macroblocks.",
    "start": "24230",
    "end": "27340"
  },
  {
    "text": "Each macroblock is individually compressed\nby converting the 64 intensity and color values",
    "start": "27340",
    "end": "32880"
  },
  {
    "text": "from the spatial domain to the frequency domain\nand then quantizing and Huffman encoding the",
    "start": "32880",
    "end": "38500"
  },
  {
    "text": "frequency coefficients.",
    "start": "38500",
    "end": "40450"
  },
  {
    "text": "If you're using a multi-core processor to\ndo the compression, you can perform the macroblock",
    "start": "40450",
    "end": "44650"
  },
  {
    "text": "compressions concurrently.",
    "start": "44650",
    "end": "48480"
  },
  {
    "text": "Applications like video games are naturally\ndivided into the \"front-end\" user interface",
    "start": "48480",
    "end": "53460"
  },
  {
    "text": "and \"back-end\" simulation and rendering engines.",
    "start": "53460",
    "end": "57820"
  },
  {
    "text": "Inputs from the user arrive asynchronously\nwith respect to the simulation and it's easiest",
    "start": "57820",
    "end": "62809"
  },
  {
    "text": "to organize the processing of user events\nseparately from the backend processing.",
    "start": "62810",
    "end": "69329"
  },
  {
    "text": "Processes are an effective way to encapsulate\nthe state and computation for what are logically",
    "start": "69329",
    "end": "74630"
  },
  {
    "text": "independent components of an application,\nwhich communicate with one another when they",
    "start": "74630",
    "end": "79798"
  },
  {
    "text": "need to share information.",
    "start": "79799",
    "end": "82710"
  },
  {
    "text": "These sorts of applications are often data-\nor event-driven, i.e., the processing required",
    "start": "82710",
    "end": "88048"
  },
  {
    "text": "is determined by the data to be processed\nor the arrival of external events.",
    "start": "88049",
    "end": "94420"
  },
  {
    "text": "How should the processes communicate with\neach other?",
    "start": "94420",
    "end": "98020"
  },
  {
    "text": "If the processes are running out of the same\nphysical memory, it would be easy to arrange",
    "start": "98020",
    "end": "103170"
  },
  {
    "text": "to share memory data by mapping the same physical\npage into the contexts for both processes.",
    "start": "103170",
    "end": "109368"
  },
  {
    "text": "Any data written to that page by one process\nwill be able to be read by the other process.",
    "start": "109369",
    "end": "115869"
  },
  {
    "text": "To make it easier to coordinate the processes'\ncommunicating via shared memory, we'll see",
    "start": "115869",
    "end": "120579"
  },
  {
    "text": "it's convenient to provide synchronization\nprimitives.",
    "start": "120579",
    "end": "124280"
  },
  {
    "text": "Some ISAs include instructions that make it\neasy to do the required synchronization.",
    "start": "124280",
    "end": "130390"
  },
  {
    "text": "Another approach is to add OS supervisor calls\nto pass messages from one process to another.",
    "start": "130390",
    "end": "137050"
  },
  {
    "text": "Message passing involves more overhead than\nshared memory, but makes the application programming",
    "start": "137050",
    "end": "143460"
  },
  {
    "text": "independent of whether the communicating processes\nare running on the same physical processor.",
    "start": "143460",
    "end": "149160"
  },
  {
    "text": "In this lecture, we'll use the classic producer-consumer\nproblem as our example of concurrent processes",
    "start": "149160",
    "end": "154580"
  },
  {
    "text": "that need to communicate and synchronize.",
    "start": "154580",
    "end": "156620"
  },
  {
    "text": "There are two processes: a producer and a\nconsumer.",
    "start": "156620",
    "end": "161920"
  },
  {
    "text": "The producer is running in a loop, which performs\nsome computation  to generate information,",
    "start": "161920",
    "end": "167590"
  },
  {
    "text": "in this case, a single character C.\nThe consumer is also running a loop, which",
    "start": "167590",
    "end": "173590"
  },
  {
    "text": "waits for the next character to arrive from\nthe producer, then performs some computation",
    "start": "173590",
    "end": "178590"
  },
  {
    "text": ".",
    "start": "178590",
    "end": "181120"
  },
  {
    "text": "The information passing between the producer\nand consumer could obviously be much more",
    "start": "181120",
    "end": "184900"
  },
  {
    "text": "complicated than a single character.",
    "start": "184900",
    "end": "187629"
  },
  {
    "text": "For example, a compiler might produce a sequence\nof assembly language statements that are passed",
    "start": "187630",
    "end": "192210"
  },
  {
    "text": "to the assembler to be converted into the\nappropriate binary representation.",
    "start": "192210",
    "end": "197370"
  },
  {
    "text": "The user interface front-end for a video game\nmight pass a sequence of player actions to",
    "start": "197370",
    "end": "202290"
  },
  {
    "text": "the simulation and rendering back-end.",
    "start": "202290",
    "end": "204260"
  },
  {
    "text": "In fact, the notion of hooking multiple processes\ntogether in a processing pipeline is so useful",
    "start": "204260",
    "end": "211409"
  },
  {
    "text": "that the Unix and Linux operating systems\nprovide a PIPE primitive in the operating",
    "start": "211410",
    "end": "216270"
  },
  {
    "text": "system\nthat connects the output channel of the upstream",
    "start": "216270",
    "end": "218960"
  },
  {
    "text": "process to the input channel of the downstream\nprocess.",
    "start": "218960",
    "end": "223600"
  },
  {
    "start": "223000",
    "end": "223000"
  },
  {
    "text": "Let's look at a timing diagram for the actions\nof our simple producer/consumer example.",
    "start": "223600",
    "end": "228710"
  },
  {
    "text": "We'll use arrows to indicate when one action\nhappens before another.",
    "start": "228710",
    "end": "233570"
  },
  {
    "text": "Inside a single process, e.g., the producer,\nthe order of execution implies a particular",
    "start": "233570",
    "end": "238830"
  },
  {
    "text": "ordering in time:\nthe first execution of  is followed by",
    "start": "238830",
    "end": "243220"
  },
  {
    "text": "the sending of the first character.",
    "start": "243220",
    "end": "245580"
  },
  {
    "text": "Then there's the second execution of ,\nfollowed by the sending of the second character,",
    "start": "245580",
    "end": "250090"
  },
  {
    "text": "and so on.",
    "start": "250090",
    "end": "251849"
  },
  {
    "text": "In later examples, we'll omit the timing arrows\nbetween successive statements in the same",
    "start": "251850",
    "end": "255880"
  },
  {
    "text": "program.",
    "start": "255880",
    "end": "258150"
  },
  {
    "text": "We see a similar order of execution in the\nconsumer: the first character is received,",
    "start": "258150",
    "end": "263319"
  },
  {
    "text": "then the computation  is performed for\nthe first time, etc.",
    "start": "263319",
    "end": "267990"
  },
  {
    "text": "Inside of each process, the process' program\ncounter is determining the order in which",
    "start": "267990",
    "end": "272620"
  },
  {
    "text": "the computations are performed.",
    "start": "272620",
    "end": "275139"
  },
  {
    "text": "So far, so good - each process is running\nas expected.",
    "start": "275139",
    "end": "279129"
  },
  {
    "text": "However, for the producer/consumer system\nto function correctly as a whole, we'll need",
    "start": "279129",
    "end": "283620"
  },
  {
    "text": "to introduce some additional constraints on\nthe order of execution.",
    "start": "283620",
    "end": "288389"
  },
  {
    "text": "These are called \"precedence constraints\"\nand we'll use this stylized less-than sign",
    "start": "288389",
    "end": "292979"
  },
  {
    "text": "to indicate that computation A must precede,\ni.e., come before, computation B.",
    "start": "292979",
    "end": "300830"
  },
  {
    "text": "In the producer/consumer system we can't consume\ndata before it's been produced, a constraint",
    "start": "300830",
    "end": "306060"
  },
  {
    "text": "we can formalize as requiring that the i_th\nsend operation has to precede the i_th receive",
    "start": "306060",
    "end": "312349"
  },
  {
    "text": "operation.",
    "start": "312349",
    "end": "313680"
  },
  {
    "text": "This timing constraint is shown as the solid\nred arrow in the timing diagram.",
    "start": "313680",
    "end": "319440"
  },
  {
    "text": "Assuming we're using, say, a shared memory\nlocation to hold the character being transmitted",
    "start": "319440",
    "end": "323910"
  },
  {
    "text": "from the producer to the consumer,\nwe need to ensure that the producer doesn't",
    "start": "323910",
    "end": "328680"
  },
  {
    "text": "overwrite the previous character before it's\nbeen read by the consumer.",
    "start": "328680",
    "end": "332320"
  },
  {
    "text": "In other words, we require the i_th receive\nto precede the i+1_st send.",
    "start": "332320",
    "end": "339990"
  },
  {
    "text": "These timing constraints are shown as the\ndotted red arrows in the timing diagram.",
    "start": "339990",
    "end": "345638"
  },
  {
    "text": "Together these precedence constraints mean\nthat the producer and consumer are tightly",
    "start": "345639",
    "end": "349370"
  },
  {
    "text": "coupled in the sense that a character has\nto be read by the consumer before the next",
    "start": "349370",
    "end": "353840"
  },
  {
    "text": "character can be sent by the producer,\nwhich might be less than optimal if the ",
    "start": "353840",
    "end": "359660"
  },
  {
    "text": "and  computations take a variable amount\nof time.",
    "start": "359660",
    "end": "364289"
  },
  {
    "text": "So let's see how we can relax the constraints\nto allow for more independence between the",
    "start": "364289",
    "end": "370139"
  },
  {
    "text": "producer and consumer.",
    "start": "370139",
    "end": "372669"
  },
  {
    "text": "We can relax the execution constraints on\nthe producer and consumer by having them communicate",
    "start": "372669",
    "end": "377800"
  },
  {
    "start": "373000",
    "end": "373000"
  },
  {
    "text": "via N-character first-in-first-out (FIFO)\nbuffer.",
    "start": "377800",
    "end": "383569"
  },
  {
    "text": "As the producer produces characters it inserts\nthem into the buffer.",
    "start": "383569",
    "end": "387830"
  },
  {
    "text": "The consumer reads characters from the buffer\nin the same order as they were produced.",
    "start": "387830",
    "end": "392448"
  },
  {
    "text": "The buffer can hold between 0 and N characters.",
    "start": "392449",
    "end": "396210"
  },
  {
    "text": "If the buffer holds 0 characters, it's empty;\nif it holds N characters, it's full.",
    "start": "396210",
    "end": "401680"
  },
  {
    "text": "The producer should wait if the buffer is\nfull, the consumer should wait if the buffer",
    "start": "401680",
    "end": "406240"
  },
  {
    "text": "is empty.",
    "start": "406240",
    "end": "408509"
  },
  {
    "text": "Using the N-character FIFO buffer relaxes\nour second overwrite constraint to the requirement",
    "start": "408509",
    "end": "413449"
  },
  {
    "text": "that the i_th receive must happen before i+N_th\nsend.",
    "start": "413449",
    "end": "418279"
  },
  {
    "text": "In other words, the producer can get up to\nN characters ahead of the consumer.",
    "start": "418279",
    "end": "423850"
  },
  {
    "text": "FIFO buffers are implemented as an N-element\ncharacter array with two indices:",
    "start": "423850",
    "end": "429159"
  },
  {
    "text": "the read index indicates the next character\nto be read, the write index indicates the",
    "start": "429159",
    "end": "434430"
  },
  {
    "text": "next character to be written.",
    "start": "434430",
    "end": "435960"
  },
  {
    "text": "We'll also need a counter to keep track of\nthe number of characters held by the buffer,",
    "start": "435960",
    "end": "441039"
  },
  {
    "text": "but that's been omitted from this diagram.",
    "start": "441039",
    "end": "443259"
  },
  {
    "text": "The indices are incremented modulo N, i.e.,\nthe next element to be accessed after the",
    "start": "443259",
    "end": "449529"
  },
  {
    "text": "N-1_st element is the 0_th element, hence\nthe name \"circular buffer\".",
    "start": "449529",
    "end": "455249"
  },
  {
    "text": "Here's how it works.",
    "start": "455249",
    "end": "456650"
  },
  {
    "text": "The producer runs, using the write index to\nadd the first character to the buffer.",
    "start": "456650",
    "end": "462029"
  },
  {
    "text": "The producer can produce additional characters,\nbut must wait once the buffer is full.",
    "start": "462029",
    "end": "468699"
  },
  {
    "text": "The consumer can receive a character anytime\nthe buffer is not empty, using the read index",
    "start": "468699",
    "end": "473539"
  },
  {
    "text": "to keep track of the next character to be\nread.",
    "start": "473539",
    "end": "477639"
  },
  {
    "text": "Execution of the producer and consumer can\nproceed in any order so long as the producer",
    "start": "477639",
    "end": "482240"
  },
  {
    "text": "doesn't write into a full buffer and the consumer\ndoesn't read from an empty buffer.",
    "start": "482240",
    "end": "487830"
  },
  {
    "text": "Here's what the code for the producer and\nconsumer might look like.",
    "start": "487830",
    "end": "491860"
  },
  {
    "start": "488000",
    "end": "488000"
  },
  {
    "text": "The array and indices for the circular buffer\nlive in shared memory where they can be accessed",
    "start": "491860",
    "end": "496400"
  },
  {
    "text": "by both processes.",
    "start": "496400",
    "end": "498460"
  },
  {
    "text": "The SEND routine in the producer uses the\nwrite index IN to keep track of where to write",
    "start": "498460",
    "end": "503589"
  },
  {
    "text": "the next character.",
    "start": "503589",
    "end": "505229"
  },
  {
    "text": "Similarly the RCV routine in the consumer\nuses the read index OUT to keep track of the",
    "start": "505229",
    "end": "510279"
  },
  {
    "text": "next character to be read.",
    "start": "510279",
    "end": "512240"
  },
  {
    "text": "After each use, each index is incremented\nmodulo N.",
    "start": "512240",
    "end": "516000"
  },
  {
    "text": "The problem with this code is that, as currently\nwritten, neither of the two precedence constraints",
    "start": "516000",
    "end": "521659"
  },
  {
    "text": "is enforced.",
    "start": "521659",
    "end": "522880"
  },
  {
    "text": "The consumer can read from an empty buffer\nand the producer can overwrite entries when",
    "start": "522880",
    "end": "527480"
  },
  {
    "text": "the buffer is full.",
    "start": "527480",
    "end": "529490"
  },
  {
    "text": "We'll need to modify this code to enforce\nthe constraints and for that we'll introduce",
    "start": "529490",
    "end": "534250"
  },
  {
    "text": "a new programming construct that we'll use\nto provide the appropriate inter-process synchronization.",
    "start": "534250",
    "end": "540000"
  }
]