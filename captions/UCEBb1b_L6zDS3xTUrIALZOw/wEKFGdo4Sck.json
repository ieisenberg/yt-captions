[
  {
    "start": "0",
    "end": "70000"
  },
  {
    "text": "[SQUEAKING] [RUSTLING] [CLICKING]",
    "start": "0",
    "end": "12300"
  },
  {
    "text": "JASON KU: Hey, everybody. Welcome back. This is our last quiz\nreview for the term, quiz 3,",
    "start": "12300",
    "end": "19368"
  },
  {
    "text": "we'll be talking\nabout, which will be the last quiz until the final. It's on dynamic\nprogramming, which",
    "start": "19368",
    "end": "24720"
  },
  {
    "text": "you guys have been studying\nin lectures, and recitations, and on your problem sets 7 and\n8, and lectures 15 through 18,",
    "start": "24720",
    "end": "35199"
  },
  {
    "text": "so four lectures. Quiz 1 and quiz 2 material on,\nessentially, data structures",
    "start": "35200",
    "end": "41790"
  },
  {
    "text": "and graph algorithms aren't\ngoing to be explicitly test-- or we're not trying\nto explicitly test it,",
    "start": "41790",
    "end": "47469"
  },
  {
    "text": "that material, on quiz 3. But it is fair game.",
    "start": "47470",
    "end": "52620"
  },
  {
    "text": "The material's cumulative. And so if you have to store some\nstuff in the data structure, that's fair game.",
    "start": "52620",
    "end": "58260"
  },
  {
    "text": "But we're not\nspecifically trying to test you on that material. OK, and really,\nwe haven't learned",
    "start": "58260",
    "end": "64290"
  },
  {
    "text": "all that much new material\nin these last four lectures in this unit.",
    "start": "64290",
    "end": "71360"
  },
  {
    "start": "70000",
    "end": "202000"
  },
  {
    "text": "So this is scope. We've got, we're mostly\nhandling dynamic programming",
    "start": "71360",
    "end": "77700"
  },
  {
    "text": "on these four lectures and\nrecitations and these two problem sets. But really, the\nfocus is going to be",
    "start": "77700",
    "end": "83970"
  },
  {
    "text": "on this recursive framework\nof solving problems with a focus on dynamic\nprogramming, specifically.",
    "start": "83970",
    "end": "91380"
  },
  {
    "text": "Now, the recursive\nframework we have, I think, in previous slides,\nwe used this SRTBOT notation.",
    "start": "91380",
    "end": "102180"
  },
  {
    "text": "And I think there\nmight be a space there in previous versions. I'm concatenating\nthem together here.",
    "start": "102180",
    "end": "108450"
  },
  {
    "text": "But really, it's a framework\nfor solving breaking down your problem into a set of\nsubproblems that can then",
    "start": "108450",
    "end": "115710"
  },
  {
    "text": "be related recursively. And if that relationship depends\non problems in a decreasing",
    "start": "115710",
    "end": "123360"
  },
  {
    "text": "or in a smaller sense,\nthere's a directionality to which subproblems I'm\nreducing to each time I",
    "start": "123360",
    "end": "131400"
  },
  {
    "text": "make a recursive call. And that dependency\ngraph is a cyclic.",
    "start": "131400",
    "end": "136620"
  },
  {
    "text": "Then we can solve via\ndynamic programming",
    "start": "136620",
    "end": "142590"
  },
  {
    "text": "by memoizing from bottom\nup or by calling things and remembering the\ncalls that we've",
    "start": "142590",
    "end": "149610"
  },
  {
    "text": "called before via memoization. And the basic idea here is this\nthe recursive framework SRT",
    "start": "149610",
    "end": "156450"
  },
  {
    "text": "BOT that we established is good\nfor any recursive algorithm.",
    "start": "156450",
    "end": "163209"
  },
  {
    "text": "But in the special\ncase where subproblems may be used more\nthan once, may be",
    "start": "163210",
    "end": "169739"
  },
  {
    "text": "used when computing\nother subproblems, then we get this\nreally nice speed",
    "start": "169740",
    "end": "177450"
  },
  {
    "text": "up by recognizing\nthat we don't have to do that work more than once.",
    "start": "177450",
    "end": "182489"
  },
  {
    "text": "And essentially,\ninstead of looking at it as a tree of\nrecursive calls that may call the same\nproblems more than once,",
    "start": "182490",
    "end": "189780"
  },
  {
    "text": "we look at it by collapsing\nthose nodes of the same value down into one.",
    "start": "189780",
    "end": "194970"
  },
  {
    "text": "We get a DAG. And dynamic programming is\nwhen those subproblems overlap.",
    "start": "194970",
    "end": "201540"
  },
  {
    "text": "OK, so let's take a look\nat our recursive framework",
    "start": "201540",
    "end": "206700"
  },
  {
    "text": "here, SRT BOT. We have the S-R-T B-O-T. I\nremembered the space this time.",
    "start": "206700",
    "end": "213570"
  },
  {
    "text": "Subproblem, you're going\nto define some subproblems. You're going to relate\nthem recursively.",
    "start": "213570",
    "end": "219450"
  },
  {
    "text": "You're going to specify\na topological order of those subproblems that\nthe relation satisfies.",
    "start": "219450",
    "end": "227549"
  },
  {
    "text": "You're going to list some\nbase cases, basically wherever you could solve this\nproblem in constant time",
    "start": "227550",
    "end": "233760"
  },
  {
    "text": "without doing any\nrecursive work. Stating how you solve the\noriginal problem, which",
    "start": "233760",
    "end": "240200"
  },
  {
    "text": "might involve combining many\nsubproblems, but frequently, is just finding one\nsubproblem, and possibly",
    "start": "240200",
    "end": "249349"
  },
  {
    "text": "remembering-- storing\nparent pointers to return an optimal sequence,\nor something like that. And then, analyze the time.",
    "start": "249350",
    "end": "255140"
  },
  {
    "text": "Now, the last one isn't really\nimportant for solving a problem recursively. But in this class,\nit's really important,",
    "start": "255140",
    "end": "261407"
  },
  {
    "text": "because we want to tell whether\nthe algorithms that we make are efficient. So let's dive a little deeper\ninto each one of these things.",
    "start": "261408",
    "end": "270750"
  },
  {
    "start": "267000",
    "end": "670000"
  },
  {
    "text": "So when we approach\na subproblem, really, what I'm asking\nyou for is to describe--",
    "start": "270750",
    "end": "278590"
  },
  {
    "text": "basically, set up\na set of problems. Basically, I like to\nuse the variable x.",
    "start": "278590",
    "end": "283780"
  },
  {
    "text": "But you can use whatever\nvariable you want. But basically, you're telling\nus what's in your memo",
    "start": "283780",
    "end": "289389"
  },
  {
    "text": "and how big your memo is. So we usually have x as a\nfunction of some variables.",
    "start": "289390",
    "end": "297810"
  },
  {
    "text": "And you're wanting\nto describe to me what the meaning\nof that subproblem is in terms of the parameters.",
    "start": "297810",
    "end": "303629"
  },
  {
    "text": "Now, if you have parameters\nin your subproblem that don't appear in your\nsubproblem definition,",
    "start": "303630",
    "end": "309599"
  },
  {
    "text": "you're doing it wrong. And you're probably not going\nto get points for the problem. Because I don't know what\nyour problem means now.",
    "start": "309600",
    "end": "316020"
  },
  {
    "text": "Even if it's a correct problem\nand you do the rest of it right, part of this class\nis about communication.",
    "start": "316020",
    "end": "322880"
  },
  {
    "text": "And if you're not communicating\nto us what this thing is doing, it's really difficult for us--",
    "start": "322880",
    "end": "329719"
  },
  {
    "text": "for you to convince us that\nyour algorithm is correct. So you really want\nto, in words, describe",
    "start": "329720",
    "end": "336680"
  },
  {
    "text": "what the output of\nyour subproblem is. What will the memo return to me?",
    "start": "336680",
    "end": "342760"
  },
  {
    "text": "And how those\nreturn values depend on the inputs, the parameters\nof your subproblem.",
    "start": "342760",
    "end": "348720"
  },
  {
    "text": "So that's what,\nin words, describe what a subproblem means. So that's going to be a\nreally important thing for you",
    "start": "348720",
    "end": "354759"
  },
  {
    "text": "not to forget on a quiz. Then, when making subproblems,\noften, what we're doing is",
    "start": "354760",
    "end": "360789"
  },
  {
    "text": "we're rehearsing on different\nvalues of indices in a sequence",
    "start": "360790",
    "end": "366860"
  },
  {
    "text": "or numbers in your problem. That's kind of what we\ngot to in the last-- in lecture 18, I\nguess, when we were",
    "start": "366860",
    "end": "374390"
  },
  {
    "text": "talking about expanding\nsubproblems based on an integer in a problem. Now actually, an\ninteger in our problem",
    "start": "374390",
    "end": "380660"
  },
  {
    "text": "is the number of\nthings in a sequence. And so, really, those indices\nare integers in our problem",
    "start": "380660",
    "end": "386480"
  },
  {
    "text": "that we're looping over. Except those integers happen to\nbe the size of our subproblem.",
    "start": "386480",
    "end": "394160"
  },
  {
    "text": "Whereas, other integers\nmight be larger, which is why you might get a\npseudopolynomial time bound.",
    "start": "394160",
    "end": "399210"
  },
  {
    "text": "But in general, when I\nhave a sequence of things that I might want to\ndynamic program over, common choices for subproblems\nare prefixes or suffixes",
    "start": "399210",
    "end": "410479"
  },
  {
    "text": "if I can kind of\nlocally figure out to do with one what to do with\none item and then recurse.",
    "start": "410480",
    "end": "418099"
  },
  {
    "text": "Or if I can't kind of localize\nit by one choice on one side, if I have to make a\nchoice in the middle,",
    "start": "418100",
    "end": "424460"
  },
  {
    "text": "or I have to make a\nchoice on both ends, then you might want to use sub-- basically contiguous\nsubsequences of your sequence.",
    "start": "424460",
    "end": "433310"
  },
  {
    "text": "Because you might\nneed that flexibility when reversing\ndownward, if you need to take something from both\nthe front and the back,",
    "start": "433310",
    "end": "439460"
  },
  {
    "text": "for example. And really, what's\nthe difference between prefixes and suffixes?",
    "start": "439460",
    "end": "445400"
  },
  {
    "text": "Not much. OK, we've been concentrating\non suffixes in this class. Because in some sense,\nit's easier to think about.",
    "start": "445400",
    "end": "451610"
  },
  {
    "text": "What am I doing with the\nfirst thing in my sequence, or my suffix?",
    "start": "451610",
    "end": "456950"
  },
  {
    "text": "And then I can recurse\non what happens later. Now, in actuality, when you're\ndoing this, say, bottom up,",
    "start": "456950",
    "end": "466280"
  },
  {
    "text": "the actual computation\nthat is evaluated first is where in that sequence? ",
    "start": "466280",
    "end": "473710"
  },
  {
    "text": "I may be calling, at\nthe top level, what happens to my first element. But I'll actually deal with\nthat first element last.",
    "start": "473710",
    "end": "482620"
  },
  {
    "text": "Because I will recursively\nsolve everything below me, in front of me, before I figure\nout what to do with this thing.",
    "start": "482620",
    "end": "490630"
  },
  {
    "text": "So in actuality, when\nI'm solving my recursion, I will start at\nthe end, bottom up,",
    "start": "490630",
    "end": "498520"
  },
  {
    "text": "because that's my base case. And then I'll work my\nway back to the front.",
    "start": "498520",
    "end": "503650"
  },
  {
    "text": "Whereas, with prefixes, you\nlook at it the other way. What am I doing with\nmy last element?",
    "start": "503650",
    "end": "509210"
  },
  {
    "text": "If I look at what I'm\ndoing at the last element, I recurse on a prefix, on\nthe stuff that's before me. And then when I do bottom\nup, I start from the front",
    "start": "509210",
    "end": "517299"
  },
  {
    "text": "and work my way up. it's two different\nsides of the same coin. And usually, these\nare interchangeable.",
    "start": "517299",
    "end": "523780"
  },
  {
    "text": "We've been doing it suffix-wise,\nbecause when starting to learn",
    "start": "523780",
    "end": "528880"
  },
  {
    "text": "dynamic programming,\nit's a lot-- we read things from left to\nright and things like that.",
    "start": "528880",
    "end": "534130"
  },
  {
    "text": "It's a lot easier\nto figure out what's happening with the first thing\nand move forward, conceptually. It's actually exactly\nthe same thing.",
    "start": "534130",
    "end": "540220"
  },
  {
    "text": "I could just flip my sequence,\ndo the exact same thing with prefixes.",
    "start": "540220",
    "end": "545800"
  },
  {
    "text": "It would be the exact\nsame dynamic program. So these things are\ninterchangeable.",
    "start": "545800",
    "end": "551920"
  },
  {
    "text": "It's really useful, when\nlearning to dynamic program, to be able to switch back and\nforth between these things.",
    "start": "551920",
    "end": "559300"
  },
  {
    "text": "We'll be working\non suffixes today on the problems that we do.",
    "start": "559300",
    "end": "564310"
  },
  {
    "text": "But these are interchangeable. And sometimes it's useful to\nbe able to conceptually think about it in both directions.",
    "start": "564310",
    "end": "573400"
  },
  {
    "text": "So aside from dealing with\nsubsequences of sequences,",
    "start": "573400",
    "end": "578950"
  },
  {
    "text": "in particular,\ncontiguous ones, we also often multiply our subsets\nacross multiple inputs.",
    "start": "578950",
    "end": "585639"
  },
  {
    "text": "Like if we have\nmultiple sequences, we might take indices\nin each one of them",
    "start": "585640",
    "end": "591370"
  },
  {
    "text": "to represent\nprefixes or suffixes. And then we might have to\nremember additional information",
    "start": "591370",
    "end": "597010"
  },
  {
    "text": "by maintaining some\nauxiliary information, like am I trying to maximize\nor minimize my sum in a--",
    "start": "597010",
    "end": "605350"
  },
  {
    "text": "or evaluated expression in\nan arithmetic parenthization. Or is it player 1's\nturn or player's 2 turn?",
    "start": "605350",
    "end": "613420"
  },
  {
    "text": "Or which finger-- where was\nmy finger when I was playing",
    "start": "613420",
    "end": "618459"
  },
  {
    "text": "piano or something like that? Those are the kinds\nof things that we might expand our state on.",
    "start": "618460",
    "end": "624110"
  },
  {
    "text": "And in particular, we\nmight expand our state based on the numbers\nin our problem if we're trying to, for\nexample, keep track of how much",
    "start": "624110",
    "end": "631630"
  },
  {
    "text": "space is left in a knapsack\nor something like that. But in general, if I'm trying\nto, say, pack a set of things,",
    "start": "631630",
    "end": "640420"
  },
  {
    "text": "it's useful to know how much\nspace I have left to pack.",
    "start": "640420",
    "end": "646209"
  },
  {
    "text": "So that's subproblems. This is really the key part\nabout dynamic programming",
    "start": "646210",
    "end": "651550"
  },
  {
    "text": "is the recursive part. This is what makes it hard is\nchoosing a set of subproblems. And it's often you\nbuild subproblems",
    "start": "651550",
    "end": "659829"
  },
  {
    "text": "to fit well with relations. So usually, building what\nthese subproblems are",
    "start": "659830",
    "end": "668860"
  },
  {
    "text": "is usually closely coupled\nwith the next step, which is relating the\nsubproblems recursively.",
    "start": "668860",
    "end": "674889"
  },
  {
    "start": "670000",
    "end": "832000"
  },
  {
    "text": "And relate recursively, I-- usually what I want\nis an expression,",
    "start": "674890",
    "end": "680110"
  },
  {
    "text": "a mathematical\nexpression, relating the definition of\na subproblem you",
    "start": "680110",
    "end": "688570"
  },
  {
    "text": "had in the previous section,\nrelating those, in math terms,",
    "start": "688570",
    "end": "693730"
  },
  {
    "text": "to the other things. This is-- it's really important\nthat you write this in math, because it needs to be precise,\nto communicate this thing well.",
    "start": "693730",
    "end": "702280"
  },
  {
    "text": "Now, you can write it in words. But I would suggest you write\nit as a mathematical expression,",
    "start": "702280",
    "end": "707620"
  },
  {
    "text": "because it's a lot\nmore concise for us to see what's happening\nin your recursion.",
    "start": "707620",
    "end": "713320"
  },
  {
    "text": "So relate them recursively. Basically, I'm\ngoing to write, say, that x of some set of parameters\nequals some function, usually",
    "start": "713320",
    "end": "722410"
  },
  {
    "text": "a maximization, or a\nminimization, or a summation, or and or, or an and,\nor some other combinator",
    "start": "722410",
    "end": "730330"
  },
  {
    "text": "of a bunch of choices\nthat you might make, so-- or a bunch of subproblems\nthat you might recurse on.",
    "start": "730330",
    "end": "738100"
  },
  {
    "text": "Basically, you're\ngoing to depend on some other subproblems that\nare smaller in some sense.",
    "start": "738100",
    "end": "744140"
  },
  {
    "text": "Now, actually embedded\nin this, the idea of a smaller subproblem isn't\nreally well defined yet.",
    "start": "744140",
    "end": "753100"
  },
  {
    "text": "We haven't told you an\nordering of these subproblems to be smaller.",
    "start": "753100",
    "end": "759550"
  },
  {
    "text": "But that's what's going\nto come in the third step. So kind of a strategy\nfor figuring out",
    "start": "759550",
    "end": "767250"
  },
  {
    "text": "what these recursive\nrelations might be is to identify some question\nabout the subproblem solution.",
    "start": "767250",
    "end": "774520"
  },
  {
    "text": "What do I do with the first\ncharacter in this string? Or which cage do I\nput this tiger in?",
    "start": "774520",
    "end": "787750"
  },
  {
    "text": "To figure out what subproblem\nshould I recurse on later? I don't know the answer\nto that question.",
    "start": "787750",
    "end": "795290"
  },
  {
    "text": "But if I knew the\nanswer to that question, then I could recurse on\na smaller subproblem,",
    "start": "795290",
    "end": "801199"
  },
  {
    "text": "because I figured out what\nto do with that tiger. And so it will let me reduce\nto smaller subproblems.",
    "start": "801200",
    "end": "809390"
  },
  {
    "text": "And then, what dynamic\nprogramming does is because I only have\na polynomial number of subproblems, and I\nassumed I've already",
    "start": "809390",
    "end": "816020"
  },
  {
    "text": "computed what those\nare, I've already memoized what the solutions\nto those problems are,",
    "start": "816020",
    "end": "823640"
  },
  {
    "text": "then I can just\nlocally brute force over all the possible\nanswers to that question. And that's one way to look\nat dynamic programming.",
    "start": "823640",
    "end": "831339"
  },
  {
    "text": "OK, so then as we were talking\nabout topological order, arguing that\nrelation is acyclic.",
    "start": "831340",
    "end": "838680"
  },
  {
    "start": "832000",
    "end": "990000"
  },
  {
    "text": "Essentially, just\ndefining what smaller means when we say\nwe're recursing on smaller subproblems.",
    "start": "838680",
    "end": "844020"
  },
  {
    "text": "What does smaller mean? Usually, you're\nsaying that some index",
    "start": "844020",
    "end": "849420"
  },
  {
    "text": "or some parameter\nof my subproblem always decreases or increases. Sometimes, that's\nnot always the case.",
    "start": "849420",
    "end": "855910"
  },
  {
    "text": "Sometimes, you have\nto, maybe, add a couple indices and see that\nthat always increases,",
    "start": "855910",
    "end": "861209"
  },
  {
    "text": "because one may stay the same\nwhile the other increases or something like that. But in general, as\nlong as you argue",
    "start": "861210",
    "end": "868410"
  },
  {
    "text": "that the relations\nare acyclic, then the subproblem graph is a DAG. And you can compute\nin a bottom-up manner.",
    "start": "868410",
    "end": "876180"
  },
  {
    "text": "And you don't get infinite\nloops in your recursion. OK, the last thing, the\nlast couple of things",
    "start": "876180",
    "end": "882779"
  },
  {
    "text": "are kind of bookkeeping. But if you don't write\nthese on your exam, we can't give you\npoints for them.",
    "start": "882780",
    "end": "888090"
  },
  {
    "text": "So write these down. Base cases, if you don't\ntell us base cases,",
    "start": "888090",
    "end": "894189"
  },
  {
    "text": "then your algorithm\ncannot be polynomial time. It can't even be finite time,\nbecause your algorithm never",
    "start": "894190",
    "end": "899889"
  },
  {
    "text": "stops. It just continues to recurse\nforever and ever and ever. And so it's hard\nto give us points--",
    "start": "899890",
    "end": "906610"
  },
  {
    "text": "I mean, we will\ngive you some points if your subproblems and\nrelation are correct. But really, if you write\ncode without a base case,",
    "start": "906610",
    "end": "914839"
  },
  {
    "text": "it's going to be wrong. So base cases are\nreally important. Basically, for anything at the\nbounds of your computation,",
    "start": "914840",
    "end": "924610"
  },
  {
    "text": "wherever your recursive\nrelation would essentially go outside the\nbounds of your memo,",
    "start": "924610",
    "end": "931180"
  },
  {
    "text": "let's say I'm dealing\nwith a subsequence. And at some point, I'm\ntrying to point to a state",
    "start": "931180",
    "end": "938740"
  },
  {
    "text": "where I have zero\nor negative elements in my sequence, that's\nprobably a bad thing.",
    "start": "938740",
    "end": "944150"
  },
  {
    "text": "And so I want to\ndefine how to compute those things in constant time. So that my algorithm can\nterminate when it gets",
    "start": "944150",
    "end": "951920"
  },
  {
    "text": "to one of those base cases. So it's really\nimportant that you",
    "start": "951920",
    "end": "957350"
  },
  {
    "text": "cover all of those\npossible leaf locations where you want to be able\nto return in constant time.",
    "start": "957350",
    "end": "963890"
  },
  {
    "text": "And we'll do some of that today. State solutions\nfor all reachable, independent subproblems where\nthe relation breaks down.",
    "start": "963890",
    "end": "972170"
  },
  {
    "text": "Essentially, I would be going\noutside the bounds of my thing. Or anything where, maybe if\nyou've got one item left,",
    "start": "972170",
    "end": "980810"
  },
  {
    "text": "you might say, well,\nI have no choice on what to do with that item. I have to pick it or\nsomething like that.",
    "start": "980810",
    "end": "986360"
  },
  {
    "text": "OK, then for your\noriginal problem,",
    "start": "986360",
    "end": "991440"
  },
  {
    "start": "990000",
    "end": "1103000"
  },
  {
    "text": "you show how to compute\nsolution to the original problem from the solutions\nof your subproblems.",
    "start": "991440",
    "end": "999540"
  },
  {
    "text": "So usually, this is just\nhere's a subproblem. It's the one that used\nall of the things,",
    "start": "999540",
    "end": "1006410"
  },
  {
    "text": "and that's going\nto be my answer. But that's not always the case. Sometimes, like in a longest\nincreasing subsequence,",
    "start": "1006410",
    "end": "1012769"
  },
  {
    "text": "we had to take a max over all of\nour problems that we computed, or max subarray sum,\nwe also had to do that.",
    "start": "1012770",
    "end": "1019280"
  },
  {
    "text": " But in general, the\noutput to our subproblems",
    "start": "1019280",
    "end": "1027560"
  },
  {
    "text": "wants to be some scalar value\nthat we're trying to optimize, or a Boolean, or\nsomething like that.",
    "start": "1027560",
    "end": "1033290"
  },
  {
    "text": "It's how we maximize or\nminimize what we're doing. We're not storing the entire\nsequence of how we got there.",
    "start": "1033290",
    "end": "1040939"
  },
  {
    "text": "Because there could be\nan exponential number of possible subsequences\nthat got there. That's the whole point\nof dynamic programming.",
    "start": "1040940",
    "end": "1046849"
  },
  {
    "text": "We're kind of isolating the\ncomplexity of one subproblem down to a single number. ",
    "start": "1046849",
    "end": "1054010"
  },
  {
    "text": "But in a lot of problems, we\nmight want to reconstruct, say, the placement of tigers\ninto cages and not just how--",
    "start": "1054010",
    "end": "1066820"
  },
  {
    "text": "what's the minimum discomfort\nover all tigers or something like that, like you had\nin your problem set.",
    "start": "1066820",
    "end": "1072490"
  },
  {
    "text": "So I actually want to know\nwhere to put tigers into cages. And to do that, every time\nI maximized a subproblem,",
    "start": "1072490",
    "end": "1079690"
  },
  {
    "text": "I can remember which subproblem\nor subproblems I depended on, just like storing parent\npointers in shortest paths.",
    "start": "1079690",
    "end": "1088680"
  },
  {
    "text": "And then, using those\nparent pointers, I can just walk back\nin my subproblem graph",
    "start": "1088680",
    "end": "1094170"
  },
  {
    "text": "and figure out which\npath to a base case led me to an optimal solution.",
    "start": "1094170",
    "end": "1102480"
  },
  {
    "text": "And then the last thing\nis analyzing running time. Generally, you're\njust summing the work",
    "start": "1102480",
    "end": "1107700"
  },
  {
    "start": "1103000",
    "end": "1188000"
  },
  {
    "text": "done by each subproblem. Because the assumption\nis you're calculating all of the subproblems\nyou described to me.",
    "start": "1107700",
    "end": "1115340"
  },
  {
    "text": "But if the work per subproblem\nis bounded by the same value, you can just multiply it out.",
    "start": "1115340",
    "end": "1121730"
  },
  {
    "text": "So that's generally\na weaker bound, but usually asymptotically\nequivalent to the stronger",
    "start": "1121730",
    "end": "1129230"
  },
  {
    "text": "notion on the left.  And that's basically\nhow you do running time.",
    "start": "1129230",
    "end": "1135990"
  },
  {
    "text": "Usually, it's enough to-- how do I determine how\nmany subproblems I have?",
    "start": "1135990",
    "end": "1143370"
  },
  {
    "text": "Well, I look at\nthe possible values of each of my parameters. And then I multiply\nthose numbers together.",
    "start": "1143370",
    "end": "1150150"
  },
  {
    "text": "A lot of people will maybe\nsay, oh, I add them together. No, because I'm able to choose\neach of these independently.",
    "start": "1150150",
    "end": "1156850"
  },
  {
    "text": "And so I multiply\nthose things together. And then the work done\nby each subproblem",
    "start": "1156850",
    "end": "1162270"
  },
  {
    "text": "is usually the\nsize of the thing I maximizing over,\nor minimizing over,",
    "start": "1162270",
    "end": "1168180"
  },
  {
    "text": "or summing in my relation. It's going to be the size\nof that, the branching",
    "start": "1168180",
    "end": "1173520"
  },
  {
    "text": "that I have, the number of\nsubproblems I depend on. And so the number\nof subproblems,",
    "start": "1173520",
    "end": "1178650"
  },
  {
    "text": "you probably look at\nyour subproblem statement definition. To find the work done\nby each subproblem,",
    "start": "1178650",
    "end": "1184320"
  },
  {
    "text": "you look at your\nrecursive relation. OK, so with that, we've got\nthis really nice framework.",
    "start": "1184320",
    "end": "1191470"
  },
  {
    "start": "1188000",
    "end": "1210000"
  },
  {
    "text": "And we're going to use\nit to solve some practice problems, happy days. And these are a little bit\nlonger in terms of description",
    "start": "1191470",
    "end": "1202900"
  },
  {
    "text": "than our previous quiz 2 review. So I'm going to go ahead\nand read them out for you.",
    "start": "1202900",
    "end": "1209600"
  },
  {
    "text": "This one's a little shorter. Tiffany Bannen stumbles upon a\nlottery chart dropped by a time",
    "start": "1209600",
    "end": "1215350"
  },
  {
    "text": "traveler from the future,\nwhich lists winning lottery numbers and positive integer\ncash payouts for the next n",
    "start": "1215350",
    "end": "1221050"
  },
  {
    "text": "days. Anyone get the reference\nhere, Tiffany Bannen?",
    "start": "1221050",
    "end": "1227260"
  },
  {
    "text": "Biff Tannen from some\nBack to the Future thing.",
    "start": "1227260",
    "end": "1232810"
  },
  {
    "text": "So this was actually-- I think it's the second to\nBack to the Future movie where this happens.",
    "start": "1232810",
    "end": "1238630"
  },
  {
    "text": "Anyway, Tiffany wants to use\nthis information to make money, because she knows the\nfuture about the lottery.",
    "start": "1238630",
    "end": "1244240"
  },
  {
    "text": "But is worried that if she\nplays winning numbers every day, lottery organizers will get\nsuspicious and shut her down.",
    "start": "1244240",
    "end": "1250690"
  },
  {
    "text": "So the idea here is maybe it's\nstill suspicious, but decides to play the lottery\ninfrequently, at most,",
    "start": "1250690",
    "end": "1257020"
  },
  {
    "text": "twice in any seven day period.  She'll win, but it's\ninfrequent enough",
    "start": "1257020",
    "end": "1266160"
  },
  {
    "text": "that maybe that's by\nchance, maybe not. Describe a linear-time algorithm\nto determine the maximum amount",
    "start": "1266160",
    "end": "1272490"
  },
  {
    "text": "of lottery winnings\nTiff, Tiffany, can win in the next 10\ndays by playing the lottery",
    "start": "1272490",
    "end": "1277918"
  },
  {
    "text": "infrequently. Now, this was a particularly\ndifficult type of p-set,",
    "start": "1277918",
    "end": "1282990"
  },
  {
    "text": "or first p-set on dynamic\nprogramming problem. But let's try to do it together.",
    "start": "1282990",
    "end": "1288670"
  },
  {
    "text": "So this is problem 1. I'm going to just call it Lotto.",
    "start": "1288670",
    "end": "1293730"
  },
  {
    "text": "OK, so how can we deal\nwith subproblems here?",
    "start": "1293730",
    "end": "1299870"
  },
  {
    "text": "Well, I might want\nto think about what do I do on the first day.",
    "start": "1299870",
    "end": "1305360"
  },
  {
    "text": "Am I going to play\nthe lottery or not? And then recurse on the rest. That sounds good, right?",
    "start": "1305360",
    "end": "1310909"
  },
  {
    "text": "I might have something like-- well, let's say that L of\ni is the winnings on day i.",
    "start": "1310910",
    "end": "1325750"
  },
  {
    "text": "This is kind of just like-- this doesn't define use notation\non what the cash payouts are.",
    "start": "1325750",
    "end": "1331780"
  },
  {
    "text": "And so I'm making a\nvariable to do that. And for the sake of what's\nwritten down on my sheet,",
    "start": "1331780",
    "end": "1338440"
  },
  {
    "text": "I'm going to assume that this\nis 1 index, I don't know why.",
    "start": "1338440",
    "end": "1343929"
  },
  {
    "text": " So I have days 1 to n. I know what their\nlottery payouts are.",
    "start": "1343930",
    "end": "1350419"
  },
  {
    "text": "So I might, when I'm\ndoing my SRT BOT stuff, I have subproblems.",
    "start": "1350420",
    "end": "1356780"
  },
  {
    "text": "What I might want to do is\nsee what happens on day one and recurse on what's later.",
    "start": "1356780",
    "end": "1362840"
  },
  {
    "text": "So I might have\nsomething like x of i is max winnings for, I guess,\npossible for days i to n.",
    "start": "1362840",
    "end": "1385780"
  },
  {
    "text": "Anyone have a problem with\nthis type of subproblem? Let's kind of see what this type\nof subproblem would lead me to.",
    "start": "1385780",
    "end": "1395289"
  },
  {
    "text": " I can either, in my relate\nstep, what are my choices?",
    "start": "1395290",
    "end": "1403100"
  },
  {
    "text": "I can either play on day i\nor I cannot play on day i. If I'm trying to maximize\nthis thing, maximize.",
    "start": "1403100",
    "end": "1416250"
  },
  {
    "text": "Either if I play\non day i I get Li. And then I can recurse\non the remainder.",
    "start": "1416250",
    "end": "1424050"
  },
  {
    "text": "Or I don't plan Li and I\nrecurse on the remainder. ",
    "start": "1424050",
    "end": "1430120"
  },
  {
    "text": "Anyone like this recurrence? Why don't we like\nthis recurrence?",
    "start": "1430120",
    "end": "1436000"
  },
  {
    "text": "I'm just always going\nto pick this thing. These things are\nalways positive. I think it's always positive\ninteger payouts, yeah.",
    "start": "1436000",
    "end": "1442580"
  },
  {
    "text": "And so I'm always\ngoing to pick Li and the problem\nhere is this is not obeying or dealing with\nthis condition that I have,",
    "start": "1442580",
    "end": "1450029"
  },
  {
    "text": "which is I'm only allowed to\nplay twice a week, or not quite twice a week. It's not a fixed\nweek-long period.",
    "start": "1450030",
    "end": "1457490"
  },
  {
    "text": "It's within any consecutive\nseven-day period, which is a little confusing.",
    "start": "1457490",
    "end": "1463710"
  },
  {
    "text": "How can I remember what days\nI'm allowed to pick later on? It seems a little daunting.",
    "start": "1463710",
    "end": "1470235"
  },
  {
    "text": " In a sense, for me to know--",
    "start": "1470235",
    "end": "1476006"
  },
  {
    "text": "this is max winning\npossible for days i to n. But in some sense, it depends\non which days I picked before.",
    "start": "1476006",
    "end": "1484899"
  },
  {
    "text": "Because if I picked i minus\n1, I can't pick another day",
    "start": "1484900",
    "end": "1491900"
  },
  {
    "text": "for another six days. If I have-- right, so I have--\nlet's do this precisely.",
    "start": "1491900",
    "end": "1500990"
  },
  {
    "text": "This is i minus 1. I have seven day period,\n1, 2, 3, 4, 5, 6, 7.",
    "start": "1500990",
    "end": "1511550"
  },
  {
    "text": "If I played the lottery here\nand I played the lottery here,",
    "start": "1511550",
    "end": "1516613"
  },
  {
    "text": "then I'm not allowed to\nplay the lottery here, I'm not allowed to play here,\nnot allowed to play here, not allowed to play here,\nnot allowed to play here.",
    "start": "1516613",
    "end": "1523150"
  },
  {
    "text": "I am allowed to play here.  So this is i plus 1, plus\n2, plus 3, plus 4, plus 5,",
    "start": "1523150",
    "end": "1530880"
  },
  {
    "text": "plus 6, i plus 6.  So depending on what\nhappened before me,",
    "start": "1530880",
    "end": "1540059"
  },
  {
    "text": "I might not be able to\nplay until day i plus 6. But if I haven't played until--",
    "start": "1540060",
    "end": "1546500"
  },
  {
    "text": "since way back here, I could\npotentially play the next guy.",
    "start": "1546500",
    "end": "1552020"
  },
  {
    "text": "I don't actually know which\nof these I can play on next. In some sense, I need to\nremember which days I'm",
    "start": "1552020",
    "end": "1559820"
  },
  {
    "text": "allowed to play on next. And I want to be able to-- at the beginning, I\nhave no restrictions.",
    "start": "1559820",
    "end": "1564920"
  },
  {
    "text": "I can just play on this guy\nnext, even if I played there.",
    "start": "1564920",
    "end": "1571420"
  },
  {
    "text": "But in general, I\nwill be restricted in some way between being\nable to play on this guy",
    "start": "1571420",
    "end": "1577800"
  },
  {
    "text": "and being able to\nplay on this guy. And so what I'm\ngoing to do is I'm going to generalize\nmy problems by storing",
    "start": "1577800",
    "end": "1583559"
  },
  {
    "text": "additional information so that\nI can rely on that information when I look into the\nfuture and recurse.",
    "start": "1583560",
    "end": "1591570"
  },
  {
    "text": "So instead of-- I'm going to, in some sense,\nneed to remember two days.",
    "start": "1591570",
    "end": "1598304"
  },
  {
    "text": " Where was the last\ntwo places I played?",
    "start": "1598305",
    "end": "1604550"
  },
  {
    "text": "I'm going to simplify that\na little bit by saying that this subproblem, max\nwinnings possible for days",
    "start": "1604550",
    "end": "1610490"
  },
  {
    "text": "i to n, I'm going to say\nthat I have to play on day i,",
    "start": "1610490",
    "end": "1616890"
  },
  {
    "text": "similar restriction as longest\nincreasing subsequence, I'm definitely including\nthis in my subsequence.",
    "start": "1616890",
    "end": "1623340"
  },
  {
    "text": "That's just going to make\nit easier for me to be like, oh, I definitely know\nI played on this day.",
    "start": "1623340",
    "end": "1629442"
  },
  {
    "text": "It's going to be-- it would\nmake it easier for my thinking. So assuming play on\nday i, and actually, I",
    "start": "1629442",
    "end": "1642360"
  },
  {
    "text": "need to remember what's\nthe next day I can play. ",
    "start": "1642360",
    "end": "1648630"
  },
  {
    "text": "So I'm going to expand this\nsubproblem by another-- I guess this is a j.",
    "start": "1648630",
    "end": "1655630"
  },
  {
    "text": "OK, assuming I play on day\ni, and I'm allowed to play,",
    "start": "1655630",
    "end": "1665100"
  },
  {
    "text": "I guess, and next allowable\nplay on day i plus j for,",
    "start": "1665100",
    "end": "1685730"
  },
  {
    "text": "what are my possible\nrange of days for j? I can either play the\nnext day, but I'm never",
    "start": "1685730",
    "end": "1695240"
  },
  {
    "text": "restricted past day i plus 6. Because the things\nbefore me [AUDIO OUT]",
    "start": "1695240",
    "end": "1701670"
  },
  {
    "text": "further to the right, because\nI haven't dealt with them yet. So I only have to deal\nwith this from 1 to 6.",
    "start": "1701670",
    "end": "1709610"
  },
  {
    "text": "Well, this is nice, because\nit expanded my subproblems by a constant number. So I actually didn't lose\nanything asymptotically here",
    "start": "1709610",
    "end": "1717400"
  },
  {
    "text": "by remembering this information. But I'm kind of-- I'm able to remember\nall the things that",
    "start": "1717400",
    "end": "1723950"
  },
  {
    "text": "could have happened before me. I compress it into\nthis one number. OK so now let's\nrewrite our relation.",
    "start": "1723950",
    "end": "1733860"
  },
  {
    "text": "I'm actually going to go\nahead and use some more board space, because I think\nthat's easier than erasing.",
    "start": "1733860",
    "end": "1741020"
  },
  {
    "text": " All right, so we are\nlooking at my relation.",
    "start": "1741020",
    "end": "1749090"
  },
  {
    "text": "This is a pretty\ncomplicated relation. But what's happening now? Now, I'm assuming\nI play on day i.",
    "start": "1749090",
    "end": "1756270"
  },
  {
    "text": "That actually simplifies\nthings a little bit. Because no matter what, I\nget the winnings on day i.",
    "start": "1756270",
    "end": "1763480"
  },
  {
    "start": "1759000",
    "end": "2864000"
  },
  {
    "text": "Now, when I call\nthis subproblem, I better make sure that it's\nOK that I played on day i.",
    "start": "1763480",
    "end": "1768970"
  },
  {
    "text": "But that's in my caller. I am locally allowed\nto play on day i. I am playing on day i.",
    "start": "1768970",
    "end": "1775120"
  },
  {
    "text": "That's the definition\nof my subproblem. x of i is I'm going to\nmaximize over some choice.",
    "start": "1775120",
    "end": "1786040"
  },
  {
    "text": "Max of-- I guess I\nhave Li no matter what.",
    "start": "1786040",
    "end": "1793190"
  },
  {
    "text": "So this could actually\ncome out of my max. And then I'm going to choose--\nwhat am I choosing here?",
    "start": "1793190",
    "end": "1798320"
  },
  {
    "text": "I'm not choosing whether\nI'm playing on day i. I'm choosing what my next\nday i play is, so that then I",
    "start": "1798320",
    "end": "1804290"
  },
  {
    "text": "can recurse on that subproblem. So what day can I play on?",
    "start": "1804290",
    "end": "1810580"
  },
  {
    "text": "Well, I'm kind of restricted\nby this j parameter",
    "start": "1810580",
    "end": "1816000"
  },
  {
    "text": "that I didn't add into\nmy subproblem on what possible days I can play next.",
    "start": "1816000",
    "end": "1823290"
  },
  {
    "text": "I'm going to split that into-- kind of compress\nthat into one thing.",
    "start": "1823290",
    "end": "1829900"
  },
  {
    "text": "So x, I can play on--",
    "start": "1829900",
    "end": "1835830"
  },
  {
    "text": "I have a choice of\nthe next day I play, somewhere between j, which\nis my next allowable play,",
    "start": "1835830",
    "end": "1842790"
  },
  {
    "text": "and sometime in the future. So i plus k, this is going to\nbe my loop that I'm looping over",
    "start": "1842790",
    "end": "1851190"
  },
  {
    "text": "in terms of my max. And then, what am I\nrestricted on in my play?",
    "start": "1851190",
    "end": "1859630"
  },
  {
    "text": "It depends on how\nfar I am from i. So if I'm here, this is i.",
    "start": "1859630",
    "end": "1869920"
  },
  {
    "text": "If I choose k to\nbe the next day, I can't play for\nmany, many times.",
    "start": "1869920",
    "end": "1878010"
  },
  {
    "text": "So the subproblem I'm\ngoing to recurse on is--",
    "start": "1878010",
    "end": "1884590"
  },
  {
    "text": "this is i plus k. I'm going to\nrecurse on i plus k.",
    "start": "1884590",
    "end": "1890680"
  },
  {
    "text": "But I'm not able to-- j needs to be the max it can be.",
    "start": "1890680",
    "end": "1897340"
  },
  {
    "text": "Because I can't\nplay until i plus 6. So this i plus k plus 6\nis going to be my thing.",
    "start": "1897340",
    "end": "1905600"
  },
  {
    "text": "So let's see. So I'm going to put--",
    "start": "1905600",
    "end": "1911350"
  },
  {
    "text": " let's see if I can unpack\nwhat I wrote down here.",
    "start": "1911350",
    "end": "1917620"
  },
  {
    "text": "Max of 1, 7 minus k. Yuck. ",
    "start": "1917620",
    "end": "1925660"
  },
  {
    "text": "Oh, I'll put it here.",
    "start": "1925660",
    "end": "1930670"
  },
  {
    "text": "1, 7 minus k. OK, if I pick k, I'm not\naggressive toward these boards",
    "start": "1930670",
    "end": "1942929"
  },
  {
    "text": "as Justin is.  So if I pick a k way down here,\nI'm not restricted at all.",
    "start": "1942930",
    "end": "1954799"
  },
  {
    "text": "And so the most permissive\noption I have here is 1. So I definitely can't\nbe worse than 1.",
    "start": "1954800",
    "end": "1962690"
  },
  {
    "text": "But if I pick--  and then this needs to be\nsome number between 6 and 1.",
    "start": "1962690",
    "end": "1973309"
  },
  {
    "text": "And so I can just\ncheck the other bound. If this is the most productive,\nthen this should be 6.",
    "start": "1973310",
    "end": "1983190"
  },
  {
    "text": "So when k equals 1,\nthis should be 6. And it decreases every\ntime further back--",
    "start": "1983190",
    "end": "1989100"
  },
  {
    "text": "or further forward\nI choose this k. So that's what my\nsubproblem is going to be.",
    "start": "1989100",
    "end": "1995450"
  },
  {
    "text": "And I'm choosing over k in--",
    "start": "1995450",
    "end": "2001029"
  },
  {
    "text": "from j, sorry i plus j, sorry,\nj, thank you, until what?",
    "start": "2001030",
    "end": "2010850"
  },
  {
    "text": " That's the question, until what?",
    "start": "2010850",
    "end": "2015970"
  },
  {
    "text": "Do I have to loop over n? If I loop over n,\nI'm going to get a quadratic running\ntime, which is worse",
    "start": "2015970",
    "end": "2021430"
  },
  {
    "text": "than what I'm allowed to do. The assumption is that\nI only have to check",
    "start": "2021430",
    "end": "2026650"
  },
  {
    "text": "the constant number of these. And why might that be? ",
    "start": "2026650",
    "end": "2032250"
  },
  {
    "text": "Any ideas? Let's say I am--",
    "start": "2032250",
    "end": "2037420"
  },
  {
    "text": "got my subproblem,\nI'm recursing. I've got i. Yeah, I don't know where j is.\nj is somewhere over here, One,",
    "start": "2037420",
    "end": "2045310"
  },
  {
    "text": "two, three, maybe it's four,\nor something like that. ",
    "start": "2045310",
    "end": "2051230"
  },
  {
    "text": "Let's say I pick\nsome k down here. What is this? This is i plus-- so this is j is 4, 5, 6, 7, 8,\n9, 10, 11, 12, 13, 14, 15, 15,",
    "start": "2051230",
    "end": "2062690"
  },
  {
    "text": "way over here, two weeks later. Is it ever optimal\nfor me to do that?",
    "start": "2062690",
    "end": "2070040"
  },
  {
    "text": "Why not? AUDIENCE: You could play\nthe lotto in the middle and it wouldn't effect it. JASON KU: Yeah, I could\nplay the lotto in the middle",
    "start": "2070040",
    "end": "2076487"
  },
  {
    "text": "here, right? Within-- from here\nto there, that's",
    "start": "2076487",
    "end": "2081610"
  },
  {
    "text": "a seven day period where\nI only played once. And from here to here,\nthat's a seven day period where I only played once.",
    "start": "2081610",
    "end": "2088060"
  },
  {
    "text": "So it's going to be-- these are positive values. So it's going to be more optimal\nfor me to choose something",
    "start": "2088060",
    "end": "2093458"
  },
  {
    "text": "in here to play. So how far-- I mean, I could just use\n15 and that would satisfy.",
    "start": "2093458",
    "end": "2100870"
  },
  {
    "text": "Because I've already argued to\nyou that it's never optimal to. I can check this. It's not going to be optimal.",
    "start": "2100870",
    "end": "2106450"
  },
  {
    "text": "It's going to be more optimal\nto play some time over here. But how far do I have to check?",
    "start": "2106450",
    "end": "2114250"
  },
  {
    "text": "Well, maybe I have\nto check up to 7. Does that work? ",
    "start": "2114250",
    "end": "2121660"
  },
  {
    "text": "Not quite. So let's say I played\nhere, and I played here,",
    "start": "2121660",
    "end": "2128640"
  },
  {
    "text": "and I played here,\nand I played here,",
    "start": "2128640",
    "end": "2134720"
  },
  {
    "text": "I actually can't play here,\nhere, here, here, here.",
    "start": "2134720",
    "end": "2141599"
  },
  {
    "text": "I'm not allowed to play those. I guess these should be O's. I played there.",
    "start": "2141600",
    "end": "2148010"
  },
  {
    "text": "And I'm not allowed to\nplay here, 1, 2, 3, 4, 5. ",
    "start": "2148010",
    "end": "2154460"
  },
  {
    "text": "But I am allowed to\nplay anywhere in here. So I basically\nwant to shrink this until these X's collide\nwith each other.",
    "start": "2154460",
    "end": "2162920"
  },
  {
    "text": "Because then it's possible\nthat an optimal solution would require me\nto pick these two",
    "start": "2162920",
    "end": "2168710"
  },
  {
    "text": "and then require me to pick\nthese two way over there. So this is 10 things\nin the middle.",
    "start": "2168710",
    "end": "2174650"
  },
  {
    "text": "I only have to go\nup to, at most, 11.  It's 11.",
    "start": "2174650",
    "end": "2180339"
  },
  {
    "text": "Now, you can move\nany constant above 11 and get the same\nrunning time bound. But that's my analysis.",
    "start": "2180340",
    "end": "2188180"
  },
  {
    "text": "OK, so we have our\nrecursive relation.",
    "start": "2188180",
    "end": "2193660"
  },
  {
    "text": "And so what am I doing? I'm just looping over my\nchoices of next day to play. I'm rehearsing on this\nthing where I actually",
    "start": "2193660",
    "end": "2200710"
  },
  {
    "text": "do play on that day. But I'm remembering\nthe information about what I'm allowed\nto play next by limiting,",
    "start": "2200710",
    "end": "2209300"
  },
  {
    "text": "based on what my\nprevious value was. So that's the kind of key thing.",
    "start": "2209300",
    "end": "2214463"
  },
  {
    "text": "I'm remembering something\nfurther in advance-- or I'm remembering what\nhappened in the past",
    "start": "2214463",
    "end": "2220130"
  },
  {
    "text": "by describing it as a\nrestriction of something in the future. So this was a pretty\ndifficult problem.",
    "start": "2220130",
    "end": "2227810"
  },
  {
    "text": "I think it was one of our first\ndynamic programming problems on that term. It was probably a\nlittle ambitious.",
    "start": "2227810",
    "end": "2234218"
  },
  {
    "text": "AUDIENCE: Are you saying this\nrecurrence goes up to 11?  JASON KU: Yes, the recurrence\ngoes up to 11, not 10, 11.",
    "start": "2234218",
    "end": "2241960"
  },
  {
    "text": " So we have our topological sort.",
    "start": "2241960",
    "end": "2248540"
  },
  {
    "text": "What's a topological thought\nfor these subproblems? Anybody? ",
    "start": "2248540",
    "end": "2257050"
  },
  {
    "text": "k is always going to\nbe a positive number. Because j goes from 1 to 6.",
    "start": "2257050",
    "end": "2262980"
  },
  {
    "text": "So I'm always going\nto be increasing in this first quantity.",
    "start": "2262980",
    "end": "2269040"
  },
  {
    "text": "So for x of i, j, i always--",
    "start": "2269040",
    "end": "2278470"
  },
  {
    "text": "sorry, depends on\nstrictly larger i.",
    "start": "2278470",
    "end": "2291970"
  },
  {
    "text": "So this i, when I\ncall subproblems, it always calls subproblems\nwith a larger i.",
    "start": "2291970",
    "end": "2297400"
  },
  {
    "text": "Now, this is a little\nweird, because I wanted me to depend on\nsmaller subproblems, smaller.",
    "start": "2297400",
    "end": "2304410"
  },
  {
    "text": "Now, it is smaller, because\nI'm taking a smaller suffix. But its corresponding to\nusing a larger number.",
    "start": "2304410",
    "end": "2311250"
  },
  {
    "text": "To me, that's a little\nconfusing, but that's OK. Because we're kind\nof using things",
    "start": "2311250",
    "end": "2317650"
  },
  {
    "text": "that are always monotonically\ngoing in some direction. So this is corresponding\nto a smaller subproblem",
    "start": "2317650",
    "end": "2326069"
  },
  {
    "text": "in some measure. It's the number of elements that\nwe're actually recursing on.",
    "start": "2326070",
    "end": "2331500"
  },
  {
    "text": "In some sense, if we\nwrote this as a prefix, we would have us depending\non strictly smaller i.",
    "start": "2331500",
    "end": "2339510"
  },
  {
    "text": "And that would be more\nnatural in terms of recursing on smaller subproblems.",
    "start": "2339510",
    "end": "2344550"
  },
  {
    "text": "But I digress. All right, then we have\nour original subproblem.",
    "start": "2344550",
    "end": "2352290"
  },
  {
    "text": "I'm going to-- I can't move this board. I'll just keep going, because\nwe have lots of boards.",
    "start": "2352290",
    "end": "2359890"
  },
  {
    "text": "OK, our original subproblem,\nnow, what could I do?",
    "start": "2359890",
    "end": "2366380"
  },
  {
    "text": "I have to start somewhere. Here, my subproblem's assuming\nthat I'm starting at i.",
    "start": "2366380",
    "end": "2373220"
  },
  {
    "text": "But I don't know where I start. I could start by taking the\nfirst element, but I might not.",
    "start": "2373220",
    "end": "2379890"
  },
  {
    "text": "So I could just take\nthe max over all i,",
    "start": "2379890",
    "end": "2389480"
  },
  {
    "text": "over all i of x what? ",
    "start": "2389480",
    "end": "2396410"
  },
  {
    "text": "The first one,\nI'm not restricted on what I choose next. So what's the most\npermissive version of j?",
    "start": "2396410",
    "end": "2405049"
  },
  {
    "text": "One, I'm allowed\nto take the next j.",
    "start": "2405050",
    "end": "2410690"
  },
  {
    "text": "So if I just take the max\nover all of these subproblems, I'll get the solution. Now, actually, this is a little\nbit more work than I need.",
    "start": "2410690",
    "end": "2418057"
  },
  {
    "text": "This is looping over all n.  It's definitely correct, because\nI have to start somewhere.",
    "start": "2418057",
    "end": "2425650"
  },
  {
    "text": "But will I ever start after\nthe first, I don't know, 7? No, so I could\njust take this max",
    "start": "2425650",
    "end": "2433080"
  },
  {
    "text": "over the first some\nconstant number. And that would be fine. But that's OK. This is still smaller than\nthe number of subproblems",
    "start": "2433080",
    "end": "2438930"
  },
  {
    "text": "that we have. AUDIENCE: If I were\nbeing lazy during my exam and I looped over j,\nwould that be correct?",
    "start": "2438930",
    "end": "2444720"
  },
  {
    "text": "JASON KU: If I\nlooped over j for? AUDIENCE: [INAUDIBLE]\nover every possible thing.",
    "start": "2444720",
    "end": "2451340"
  },
  {
    "text": "JASON KU: Took the\nloop over this and j? Yeah, that would still be fine.",
    "start": "2451340",
    "end": "2456740"
  },
  {
    "text": "Why not? It's just less-- it's more\nrestrictive of subproblems.",
    "start": "2456740",
    "end": "2462560"
  },
  {
    "text": "It will never be\nbetter to do that. But you could do that, because\nit wouldn't change your running",
    "start": "2462560",
    "end": "2468380"
  },
  {
    "text": "time. AUDIENCE: Could it\nchange my running time if my j accidentally\nlooped too far?",
    "start": "2468380",
    "end": "2475770"
  },
  {
    "text": "JASON KU: Well, j is\nrestricted to be 1 to 6. So I'm not-- I don't think so.",
    "start": "2475770",
    "end": "2480900"
  },
  {
    "text": "But in a different problem, in\na different context, it could. OK, so that's the original.",
    "start": "2480900",
    "end": "2486900"
  },
  {
    "text": "And in time here,\nwhat do we got? We have a linear\nnumber of subproblems,",
    "start": "2486900",
    "end": "2494610"
  },
  {
    "text": "number of subproblems. We've got-- I actually like,\nusually, saying exactly how",
    "start": "2494610",
    "end": "2501690"
  },
  {
    "text": "many subproblems I have. Oh, we didn't do base case. I missed BOT, I missed my B.\nWe'll do the original first.",
    "start": "2501690",
    "end": "2512860"
  },
  {
    "text": "And then the base case. OK, base case, what do we\nhave as a base case here?",
    "start": "2512860",
    "end": "2521090"
  },
  {
    "text": "Well, when I don't\nhave anything to do. If I'm-- and actually, if I have\nthis situation for i equals,",
    "start": "2521090",
    "end": "2534960"
  },
  {
    "text": "say, n, I got my last thing.",
    "start": "2534960",
    "end": "2540555"
  },
  {
    "text": " I could potentially\nstart looping over sbuproblems that are negative\nin terms of my index.",
    "start": "2540555",
    "end": "2549244"
  },
  {
    "text": "I'm not going to\nwant to do that. There's a couple of ways\nI can deal with that. I could set a value for all\nof my problems for negative i.",
    "start": "2549245",
    "end": "2557820"
  },
  {
    "text": "That's one thing I could do. But then I have to\nkind of remember, or I have to figure out how\nfar I go into the negative.",
    "start": "2557820",
    "end": "2565860"
  },
  {
    "text": "That's one thing I could do. And I give a base case\nfor each of those cases. I don't have anything. So I get a--",
    "start": "2565860",
    "end": "2572265"
  },
  {
    "text": "I don't know, zero value\nfor playing in the future,",
    "start": "2572265",
    "end": "2578329"
  },
  {
    "text": "because I have negative things. I can't do anything with that. Another way of\nhandling that, which I think I did in\nmy solutions, was",
    "start": "2578330",
    "end": "2586099"
  },
  {
    "text": "restrict that k to only be--",
    "start": "2586100",
    "end": "2591910"
  },
  {
    "text": "I guess and restrict that i plus\nk is less than or equal to n.",
    "start": "2591910",
    "end": "2599309"
  },
  {
    "text": "And then, I'll never go\nto negative problems. I'll never recurse\non these things. But that means that\nwhen I call this",
    "start": "2599310",
    "end": "2606330"
  },
  {
    "text": "on n, When I only have\none lottery day left,",
    "start": "2606330",
    "end": "2613980"
  },
  {
    "text": "this set will be empty. So what's the max\nover that thing?",
    "start": "2613980",
    "end": "2620850"
  },
  {
    "text": "Max over an empty set? I don't know. I mean, I could add on 0 here,\nthat's one way I could do it.",
    "start": "2620850",
    "end": "2627119"
  },
  {
    "text": "Or I could just say when I'm\nat n, and that thing is empty,",
    "start": "2627120",
    "end": "2634430"
  },
  {
    "text": "or whenever it's empty,\nwe can say the base case",
    "start": "2634430",
    "end": "2642089"
  },
  {
    "text": "x i, j, I guess we could put\nthis at n equals 0, or sorry,",
    "start": "2642090",
    "end": "2648570"
  },
  {
    "text": "equals L of i, L\nof n, thank you.",
    "start": "2648570",
    "end": "2656110"
  },
  {
    "text": "Because at the last\nguy, I have to use Ln. ",
    "start": "2656110",
    "end": "2662720"
  },
  {
    "text": "So there it is. Now, in actuality, if\nyou write this correctly,",
    "start": "2662720",
    "end": "2669090"
  },
  {
    "text": "I put the Li outside, and\nI union this with the 0,",
    "start": "2669090",
    "end": "2674280"
  },
  {
    "text": "I can actually get\naway with just having the relation and no base case. Because my relation actually\nreduces to a base case,",
    "start": "2674280",
    "end": "2682349"
  },
  {
    "text": "because of the way that\nI wrote my relation. But in general, you'll want to\nwrite some kind of base case",
    "start": "2682350",
    "end": "2688260"
  },
  {
    "text": "here to either acknowledge\nthat your relation handles it or be specific\nabout what happens",
    "start": "2688260",
    "end": "2696240"
  },
  {
    "text": "when I can't do any more work. And the last thing, time,\nwe've got n subproblems exactly",
    "start": "2696240",
    "end": "2708000"
  },
  {
    "text": "times constant work\nper subproblem. Because I'm looping\nover 11 possible values,",
    "start": "2708000",
    "end": "2713910"
  },
  {
    "text": "actually, it's up to 11,\nbecause j could be 6. ",
    "start": "2713910",
    "end": "2721910"
  },
  {
    "text": "So this is order n work total. So this is a pretty\ndaunting first problem.",
    "start": "2721910",
    "end": "2729380"
  },
  {
    "text": "But in terms of what\nErik, Professor Demaine,",
    "start": "2729380",
    "end": "2734839"
  },
  {
    "text": "was talking about last lecture,\nin terms of categorization",
    "start": "2734840",
    "end": "2740060"
  },
  {
    "text": "of subproblem, or categorization\nof dynamic programs, what do we got? We've got a suffix\nsubproblem where",
    "start": "2740060",
    "end": "2747320"
  },
  {
    "text": "we expanded by some\nlocal information, remembering when the\nnext time I can play.",
    "start": "2747320",
    "end": "2756410"
  },
  {
    "text": "So that's kind of\na categorization of these subproblems. The recurrence relation\nhas constant branching,",
    "start": "2756410",
    "end": "2763640"
  },
  {
    "text": "but more than two branching. And I'm combining a\nbunch of subproblems",
    "start": "2763640",
    "end": "2773339"
  },
  {
    "text": "in my original evaluation. And if I wanted to figure out\nwhat days Tiff should play",
    "start": "2773340",
    "end": "2783030"
  },
  {
    "text": "on the lottery, you can\nstore parent pointers when I'm evaluating this max.",
    "start": "2783030",
    "end": "2790660"
  },
  {
    "text": "I figure out which\nsubproblem x I recurse-- that gave me the max.",
    "start": "2790660",
    "end": "2796569"
  },
  {
    "text": "And I can walk back\nto see which choices I made to figure out which\ndays I played the lottery.",
    "start": "2796570",
    "end": "2801785"
  },
  {
    "text": "Does that make sense? ",
    "start": "2801785",
    "end": "2807000"
  },
  {
    "text": "So any questions on problem 1? That's the most-- I wanted to have the most\ncomplicated one first.",
    "start": "2807000",
    "end": "2815630"
  },
  {
    "text": "So that we could have\nan easier way to go. In a sense, this is the\nmost complicated version",
    "start": "2815630",
    "end": "2821720"
  },
  {
    "text": "of this kind of actually pretty\nsimple dynamic programming setup. Why do I say simple\ndynamic programming setup?",
    "start": "2821720",
    "end": "2829010"
  },
  {
    "text": "It's just suffixes. And I'm just doing a constant\namount of work local to me.",
    "start": "2829010",
    "end": "2834380"
  },
  {
    "text": "It's just a very\ncomplicated local setup. But that's what\nI mean by simple.",
    "start": "2834380",
    "end": "2842030"
  },
  {
    "text": "When we're designing\nsubproblems, this is one that we could-- I mean, when we're\ndesigning problems",
    "start": "2842030",
    "end": "2847100"
  },
  {
    "text": "for this dynamic\nprogramming setup, it's one of the hardest from a--",
    "start": "2847100",
    "end": "2854650"
  },
  {
    "text": "it's one of the easiest from\na conceptual standpoint, but one of the hardest\nto actually implement. OK, so problem 2,\nthis one's a long one.",
    "start": "2854650",
    "end": "2865890"
  },
  {
    "start": "2864000",
    "end": "3159000"
  },
  {
    "text": "A wealthy family, Alice, Bob,\nand their young son Charlie are sailing around the world. When they encounter\na massive storm,",
    "start": "2865890",
    "end": "2871830"
  },
  {
    "text": "Charlie is thrown\noverboard, presumed drowned. This is very colorful language\nfor these problem set writers.",
    "start": "2871830",
    "end": "2879420"
  },
  {
    "text": "20 years later, a man\ncomes to Alice and Bob, claiming to be Charlie,\nhaving maybe been marooned",
    "start": "2879420",
    "end": "2884910"
  },
  {
    "text": "on an island for that long. Alice and Bob are\nexcited but skeptical. And they order a matching\ntests from the genetic testing",
    "start": "2884910",
    "end": "2892770"
  },
  {
    "text": "company 46 and Thee. Given Alice and Bob--",
    "start": "2892770",
    "end": "2898740"
  },
  {
    "text": "sorry, given three length\nn DNA sequences, basically strings of CGTA, or\nsomething like that,",
    "start": "2898740",
    "end": "2907410"
  },
  {
    "text": "from each of Alice,\nBob, and Charlie, the testing center\nwill determine three--",
    "start": "2907410",
    "end": "2913830"
  },
  {
    "text": "their ancestry as follows. If Charlie's can be\npartitioned into two,",
    "start": "2913830",
    "end": "2920490"
  },
  {
    "text": "not necessarily contiguous,\nsubsequences of equal length, so basically I can take--",
    "start": "2920490",
    "end": "2926160"
  },
  {
    "text": "if I have n is length 5 or\nlength 6, it's better be even.",
    "start": "2926160",
    "end": "2932280"
  },
  {
    "text": "I need to find three\ncharacters in order. And then the other\nthree characters",
    "start": "2932280",
    "end": "2939140"
  },
  {
    "text": "must match to make\nsome substrings-- some subsequences in\nAlice and Bob's DNA.",
    "start": "2939140",
    "end": "2946890"
  },
  {
    "text": "So that's a little\nhard to parse. So let's look at\nan example here. For Example.",
    "start": "2946890",
    "end": "2952470"
  },
  {
    "text": "Alice's is AATT. Bob's DNA is CCGG.",
    "start": "2952470",
    "end": "2958290"
  },
  {
    "text": "If Charlie's were\nCATG, they'd be matched, because CG is a\nsubsequence of Charlie's DNA,",
    "start": "2958290",
    "end": "2968480"
  },
  {
    "text": "and is a subsequence\nof Bob's DNA.",
    "start": "2968480",
    "end": "2974640"
  },
  {
    "text": "And AT is a subsequence\nof Charlie's DNA. And Is also a subsequence\nof Alice's DNA.",
    "start": "2974640",
    "end": "2981901"
  },
  {
    "text": "And so we've partitioned\nthem into two equal length subsequences. These are not necessarily\nconsecutive subsequences,",
    "start": "2981901",
    "end": "2989660"
  },
  {
    "text": "but just any subsequences,\nsuch that they",
    "start": "2989660",
    "end": "2998020"
  },
  {
    "text": "appear in Alice and Bob. But if Charlie would be found to\nbe an impostor, if his sequence",
    "start": "2998020",
    "end": "3005250"
  },
  {
    "text": "were AGTC, essentially,\nit's easy to realize that,",
    "start": "3005250",
    "end": "3010860"
  },
  {
    "text": "because G and C are swapped\nin terms of their ordering.",
    "start": "3010860",
    "end": "3017960"
  },
  {
    "text": "And GC, the letters GC\nonly appear in Bob's DNA",
    "start": "3017960",
    "end": "3024030"
  },
  {
    "text": "and don't appear in that order. So it's easy to see that he's\nan imposter with these strings.",
    "start": "3024030",
    "end": "3029319"
  },
  {
    "text": "But you can imagine,\nwith longer strings, this could be\ndifficult to solve. So we want an n to\nthe 4th time algorithm",
    "start": "3029320",
    "end": "3036150"
  },
  {
    "text": "to determine whether\nCharlie is a fraud. OK, so I actually\nshortened this last night.",
    "start": "3036150",
    "end": "3043920"
  },
  {
    "text": "This was twice as long\non the problem set. So yeah, anyway, so how do\nwe approach this problem?",
    "start": "3043920",
    "end": "3052015"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. JASON KU: No, they don't\nhave to be contiguous. Like in the example,\nit would be matched",
    "start": "3052016",
    "end": "3057590"
  },
  {
    "text": "if C and G is a subsequence,\nnot contiguous, of CATG.",
    "start": "3057590",
    "end": "3064570"
  },
  {
    "text": "Yeah, so that's an important\npart of this problem. I'm just-- I'm not trying\nto figure out if there's--",
    "start": "3064570",
    "end": "3069760"
  },
  {
    "text": "basically, there are only\ntwo contiguous subsequences of length 2n that this\nthing can be partitioned in.",
    "start": "3069760",
    "end": "3075460"
  },
  {
    "text": "I just look in the middle. No, we're looking for\nsubsequences, not substrings.",
    "start": "3075460",
    "end": "3082170"
  },
  {
    "text": "So they kind of interleave\nlike this in some way. And there's actually a\nnumber of different ways",
    "start": "3082170",
    "end": "3087490"
  },
  {
    "text": "I can partition that. There's actually an\nexponential number of ways. So that's a problem,\npotentially.",
    "start": "3087490",
    "end": "3093110"
  },
  {
    "text": "Yes. AUDIENCE: Is there\na biological basis? JASON KU: No, there's no\nbiological basis to this thing that I know of.",
    "start": "3093110",
    "end": "3098700"
  },
  {
    "text": "OK, all right, so how do\nwe solve this problem?",
    "start": "3098700",
    "end": "3104020"
  },
  {
    "text": "What problem does\nthis look like?  I mean, it seems\nlike string matching.",
    "start": "3104020",
    "end": "3111460"
  },
  {
    "text": "So I might want to think\nit's something like longest common subsequence. But here, I have three sequences\ninstead of two sequences.",
    "start": "3111460",
    "end": "3120310"
  },
  {
    "text": "And we've got this other weird\ncondition where we kind of need an exact partition of Charlie.",
    "start": "3120310",
    "end": "3127809"
  },
  {
    "text": "I need to use all of\nthe letters in Charlie, but I don't have to use all of\nthe letters in Alice and Bob.",
    "start": "3127810",
    "end": "3134569"
  },
  {
    "text": "So let's get some notation\nhere A, B, and C are n length",
    "start": "3134570",
    "end": "3145325"
  },
  {
    "text": "strings. ",
    "start": "3145325",
    "end": "3152040"
  },
  {
    "text": "So what could I do? Let's define some subproblems.",
    "start": "3152040",
    "end": "3157650"
  },
  {
    "text": "If I were to go via\nlongest common subsequence,",
    "start": "3157650",
    "end": "3165049"
  },
  {
    "start": "3159000",
    "end": "3599000"
  },
  {
    "text": "I might keep track of an\nindex of a suffix or prefix of each one of these strings.",
    "start": "3165050",
    "end": "3172460"
  },
  {
    "text": "That kind of makes sense. Something like i,\nj, k, where we're",
    "start": "3172460",
    "end": "3181060"
  },
  {
    "text": "talking about the suffixes-- sorry, that's prefixes,\ni, B, j, and C, k.",
    "start": "3181060",
    "end": "3198150"
  },
  {
    "text": "That seems reasonable, at least. It's what we would do for\nlongest common subsequence.",
    "start": "3198150",
    "end": "3205940"
  },
  {
    "text": "What's the problem here? I mean, I could match this\nguy with one of these guys,",
    "start": "3205940",
    "end": "3212890"
  },
  {
    "text": "or decide to skip it, and\nmatch one of these guys, and decide to skip it. But if I do that, I\nmight get a subsequence.",
    "start": "3212890",
    "end": "3222690"
  },
  {
    "text": " But actually, I\nalways need to match",
    "start": "3222690",
    "end": "3228580"
  },
  {
    "text": "all of C. Does that make sense?",
    "start": "3228580",
    "end": "3235490"
  },
  {
    "text": "I always need to match all of C.",
    "start": "3235490",
    "end": "3241610"
  },
  {
    "text": "So in a sense-- ",
    "start": "3241610",
    "end": "3251400"
  },
  {
    "text": "Let's see, how can I do this?  I need to match all\nof C. But I also",
    "start": "3251400",
    "end": "3258130"
  },
  {
    "text": "need to make sure I'm using\nexactly n over 2 characters from C in B. And exactly n\nover 2 characters from C in A?",
    "start": "3258130",
    "end": "3270370"
  },
  {
    "text": "Does that make sense? So how can I satisfy\nthat condition?",
    "start": "3270370",
    "end": "3275630"
  },
  {
    "text": "Now I understand why I\nused prefixes before. And I swapped it\nto suffixes here.",
    "start": "3275630",
    "end": "3285430"
  },
  {
    "text": "But we'll make it work. ",
    "start": "3285430",
    "end": "3292079"
  },
  {
    "text": "How can I remember\nhow many characters I assigned from Alice versus Bob?",
    "start": "3292080",
    "end": "3300260"
  },
  {
    "text": "As I I'm matching\ncharacters in Alice and Bob,",
    "start": "3300260",
    "end": "3305510"
  },
  {
    "text": "I need to kind of remember\nwhere they point to, or how many I've\nalready used in Charlie.",
    "start": "3305510",
    "end": "3312980"
  },
  {
    "text": "So that I can divvy up\nthe remainder in here.",
    "start": "3312980",
    "end": "3318470"
  },
  {
    "text": "Oh, actually, this works\nin a different sense.",
    "start": "3318470",
    "end": "3323590"
  },
  {
    "text": "There's 18 different\nways we could do this. So, OK, so I need to remember\nhow many I've already used up,",
    "start": "3323590",
    "end": "3333070"
  },
  {
    "text": "so that I can be\nsure to allocate exactly that many\ncharacters in the future to either Alice or Bob.",
    "start": "3333070",
    "end": "3339920"
  },
  {
    "text": "So how can I remember that?  I can just remember.",
    "start": "3339920",
    "end": "3345350"
  },
  {
    "text": "How many do I-- ",
    "start": "3345350",
    "end": "3356430"
  },
  {
    "text": "I'll do it the way\nthat I did it before, which is I can remember--",
    "start": "3356430",
    "end": "3362619"
  },
  {
    "text": "I can remember two\ndifferent things here. I can remember how many things I\nhave left to match Alice, in C,",
    "start": "3362620",
    "end": "3370930"
  },
  {
    "text": "or I can remember how\nmany things I've already matched in C to Alice.",
    "start": "3370930",
    "end": "3377770"
  },
  {
    "text": "If I talk about how many\nthings I've already matched, then I can index this thing\nby the sum of those things.",
    "start": "3377770",
    "end": "3386530"
  },
  {
    "text": "If I talk about how many\nthings I have yet to match, I have to do n minus the things.",
    "start": "3386530",
    "end": "3395079"
  },
  {
    "text": "So those are the different\nparameters that we can do. We'll do what's in my notes. And I'll try to fix it.",
    "start": "3395080",
    "end": "3400450"
  },
  {
    "start": "3400450",
    "end": "3406079"
  },
  {
    "text": "So what we're going to do\nis remember-- or figure out how many things\nI'm still needing",
    "start": "3406080",
    "end": "3413330"
  },
  {
    "text": "to match in C to Alice and Bob. So I'm going to call this k--",
    "start": "3413330",
    "end": "3419790"
  },
  {
    "text": "sorry, ki. i is associated with A.\nAnd B is associated with j.",
    "start": "3419790",
    "end": "3427980"
  },
  {
    "text": "And kj, this is\ngoing to be the--",
    "start": "3427980",
    "end": "3436250"
  },
  {
    "text": " I have to write this down.",
    "start": "3436250",
    "end": "3442680"
  },
  {
    "text": "So this is going to\nbe what kind of output do I want to my subproblem? I just want to know if these\nthings are-- if he's a fraud",
    "start": "3442680",
    "end": "3449940"
  },
  {
    "text": "or not. So this is going\nto be a Boolean. So true if can match ki length\nsubsequence of suffix A,",
    "start": "3449940",
    "end": "3480800"
  },
  {
    "text": "suffix is this\nguy, and length kj,",
    "start": "3480800",
    "end": "3494160"
  },
  {
    "text": "I guess, kj length subsequence\nof suffix B, ji, or Bj suffix,",
    "start": "3494160",
    "end": "3512170"
  },
  {
    "text": "to all characters in.",
    "start": "3512170",
    "end": "3518530"
  },
  {
    "text": "And now what is this in? This is the hard part. Do I need a separate index\nfor C to know where I am in C?",
    "start": "3518530",
    "end": "3533220"
  },
  {
    "text": "In a sense, yes, I\nneed to know where I am in C, how much I have to match.",
    "start": "3533220",
    "end": "3539800"
  },
  {
    "text": "But if I need to match\nki to kj to all of them,",
    "start": "3539800",
    "end": "3546800"
  },
  {
    "text": "then there better be ki\nplus j things left in C.",
    "start": "3546800",
    "end": "3552820"
  },
  {
    "text": "So in a sense, I don't need\nto remember that information again. It's not independent\nto my other parameters.",
    "start": "3552820",
    "end": "3558460"
  },
  {
    "text": "I can compute it. I could throw it in,\nbut I can determine it from the other parameters.",
    "start": "3558460",
    "end": "3563830"
  },
  {
    "text": "And so I want to match\nit with the suffix of C of length ki plus kj.",
    "start": "3563830",
    "end": "3573700"
  },
  {
    "text": "So I think this is\nthe only part that is going to be annoying to me.",
    "start": "3573700",
    "end": "3580000"
  },
  {
    "text": "So this should be suffix\nof all of the things",
    "start": "3580000",
    "end": "3593590"
  },
  {
    "text": "minus ki minus kj minus 1. ",
    "start": "3593590",
    "end": "3600890"
  },
  {
    "text": "It's just this. And why is that? If I have matched to everything,\nki and kj are both 0.",
    "start": "3600890",
    "end": "3610400"
  },
  {
    "text": "And I should have nothing\nin C, which should n colon.",
    "start": "3610400",
    "end": "3616951"
  },
  {
    "text": "We're at 0 index, yes we are. Whenever I use Python notation,\nI'd better be 0 index.",
    "start": "3616951",
    "end": "3624750"
  },
  {
    "text": "Does this make sense\nas a subproblem? I mean, it's confusing. But hopefully, it makes sense.",
    "start": "3624750",
    "end": "3629783"
  },
  {
    "text": "What I'm going to\ntry to do is I'm going to match some\nnumber of characters in this suffix, which is\nhopefully longer than ki.",
    "start": "3629783",
    "end": "3638217"
  },
  {
    "text": "Otherwise, it's-- I'm going to\nbe in a base case where this is impossible.",
    "start": "3638217",
    "end": "3644090"
  },
  {
    "text": "And some subsequence of this\nmatched completely into this.",
    "start": "3644090",
    "end": "3649830"
  },
  {
    "text": "So that's-- those\nare my subproblems.",
    "start": "3649830",
    "end": "3654970"
  },
  {
    "text": "I'm going to try\nto relate them now. We have x, i, j, ki, kj,\nwhat is this going to equal?",
    "start": "3654970",
    "end": "3668590"
  },
  {
    "text": "Well, we've got Booleans. So this is and false otherwise.",
    "start": "3668590",
    "end": "3678070"
  },
  {
    "text": "That's a Boolean. So I just need some subproblem\nI recurse on to be true.",
    "start": "3678070",
    "end": "3686170"
  },
  {
    "text": "So what's the\ncommutator for some of a bunch of choices, Boolean\nchoices, any one of which",
    "start": "3686170",
    "end": "3692970"
  },
  {
    "text": "may be true?  I want to combine\na bunch of them.",
    "start": "3692970",
    "end": "3698150"
  },
  {
    "text": "I just want to see if\nany of them are true. I'm going to or over them.",
    "start": "3698150",
    "end": "3704109"
  },
  {
    "text": "I'm going to or\nover four choices. ",
    "start": "3704110",
    "end": "3710030"
  },
  {
    "text": "What are my choices? Either the first thing\nin A matches with C,",
    "start": "3710030",
    "end": "3717900"
  },
  {
    "text": "the first thing in\nB matches with C, or I don't match with either.",
    "start": "3717900",
    "end": "3725530"
  },
  {
    "text": "So those are my four choices. So if I match with\nA, i plus 1, I",
    "start": "3725530",
    "end": "3732790"
  },
  {
    "text": "recurse on a smaller\nsuffix of A and a--",
    "start": "3732790",
    "end": "3740830"
  },
  {
    "text": "by adding-- oh, this\nall just works, great. Kj, this is i, if Ai equals\nCi and Ai is greater than 0.",
    "start": "3740830",
    "end": "3763600"
  },
  {
    "text": "So if ki is greater than\n0, I need to match an i.",
    "start": "3763600",
    "end": "3769540"
  },
  {
    "text": "So this conditional\ndoesn't even make sense unless I've evaluated this\nki to be bigger than 0.",
    "start": "3769540",
    "end": "3777730"
  },
  {
    "text": "Otherwise, I'm trying\nto access i of n. So I'm just putting this\nconditional on there.",
    "start": "3777730",
    "end": "3783910"
  },
  {
    "text": "Same with matching B, ij\nplus 1, ki, kj, plus 1 if--",
    "start": "3783910",
    "end": "3795049"
  },
  {
    "text": "sorry, this should be minus 1. I have fewer characters\nthat I have to recurse on.",
    "start": "3795050",
    "end": "3801240"
  },
  {
    "text": "So that's a typo in my notes. ",
    "start": "3801240",
    "end": "3806420"
  },
  {
    "text": "Bj equals C. Oh, this is not Ci.",
    "start": "3806420",
    "end": "3812916"
  },
  {
    "text": "What is this? It's whatever that thing is. So I'm going to just\nsay question mark",
    "start": "3812916",
    "end": "3821280"
  },
  {
    "text": "and kj is greater than 0. So I'll fill that\nin in the notes.",
    "start": "3821280",
    "end": "3827400"
  },
  {
    "text": "It's going to be some\ncomplicated expression that looks like that. It's exactly that expression.",
    "start": "3827400",
    "end": "3834170"
  },
  {
    "text": "Yes, that it is. So it's that thing. ",
    "start": "3834170",
    "end": "3844910"
  },
  {
    "text": "OK, then we have\ntwo more choices.",
    "start": "3844910",
    "end": "3850849"
  },
  {
    "text": "Either I-- if I didn't match Ai,\nI may match Bj in the future.",
    "start": "3850850",
    "end": "3859950"
  },
  {
    "text": "So I only want to reduce Ai. So xi plus 1, I leave\neverything else the same.",
    "start": "3859950",
    "end": "3866270"
  },
  {
    "start": "3866270",
    "end": "3871350"
  },
  {
    "text": "Assuming if i less\nthan n, I don't",
    "start": "3871350",
    "end": "3878170"
  },
  {
    "text": "want to move off the end of\nthis thing, or x, i, j plus 1,",
    "start": "3878170",
    "end": "3885410"
  },
  {
    "text": "ki, kj if j is less than n.",
    "start": "3885410",
    "end": "3892839"
  },
  {
    "text": "So those are my four choices. If I match the letter n, great. Otherwise, I decrease the size\nof my subproblem and I recurse.",
    "start": "3892840",
    "end": "3899860"
  },
  {
    "text": " So fun recursion,\ntopological sort,",
    "start": "3899860",
    "end": "3909350"
  },
  {
    "text": "these subproblems\nonly depend on what?",
    "start": "3909350",
    "end": "3917570"
  },
  {
    "text": "Larger i? Not quite. Larger j? Not quite.",
    "start": "3917570",
    "end": "3924820"
  },
  {
    "text": "Changing k or-- these\ndon't even change here.",
    "start": "3924820",
    "end": "3930010"
  },
  {
    "text": "So we're going to use depend\non larger, I guess, strictly--",
    "start": "3930010",
    "end": "3937240"
  },
  {
    "text": "that's kind of an\nimportant thing, i plus j. Because at least one of these\ntwo things is increasing.",
    "start": "3937240",
    "end": "3943869"
  },
  {
    "text": "And then the nice\nthing about that is it kind of tells us\nwhen we should stop.",
    "start": "3943870",
    "end": "3949960"
  },
  {
    "text": "We should stop when\neither i or j get to n. We should know\nenough, at that point,",
    "start": "3949960",
    "end": "3957579"
  },
  {
    "text": "to be able to determine if we\nsucceeded or not, possibly. ",
    "start": "3957580",
    "end": "3965140"
  },
  {
    "text": "So we have our base case. ",
    "start": "3965140",
    "end": "3970260"
  },
  {
    "text": "What's the easy base case? When we succeeded. When have we succeeded?",
    "start": "3970260",
    "end": "3975997"
  },
  {
    "text": " If we have nothing\nleft in A and B",
    "start": "3975997",
    "end": "3982490"
  },
  {
    "text": "And we have nothing left in C.\nI have nothing left to match. So I have nn.",
    "start": "3982490",
    "end": "3989996"
  },
  {
    "text": "And I don't need a\nmatch anything else. That's just going to be true. ",
    "start": "3989996",
    "end": "3996900"
  },
  {
    "text": "All roads point\nto this subproblem to get to a true solution. ",
    "start": "3996900",
    "end": "4004720"
  },
  {
    "text": "Otherwise, we have\nsome false base cases. If you set something\nup like this and you only give us a\nbase case that's true,",
    "start": "4004720",
    "end": "4012339"
  },
  {
    "text": "and you're oring\nover the things, your answer will always be true. So you're not having any\ndiscriminatory power at all.",
    "start": "4012340",
    "end": "4019480"
  },
  {
    "text": "If you give us a true\nbase case, you better be giving us some false base\ncases, or one, at least.",
    "start": "4019480",
    "end": "4025940"
  },
  {
    "text": "So in the case where\nthe first one is n",
    "start": "4025940",
    "end": "4031510"
  },
  {
    "text": "And we have some i, kj, this\nis going to be false if what?",
    "start": "4031510",
    "end": "4040190"
  },
  {
    "text": " If we have nothing left in Ai\nor A, but this guy is positive,",
    "start": "4040190",
    "end": "4052270"
  },
  {
    "text": "we got problems. Otherwise, this thing is 0.",
    "start": "4052270",
    "end": "4057819"
  },
  {
    "text": "And we'll just try to\nmatch everything up here. And eventually, we'll get down\nto this base case or something",
    "start": "4057820",
    "end": "4064480"
  },
  {
    "text": "where this thing goes to\n0 and we've got a problem.",
    "start": "4064480",
    "end": "4071035"
  },
  {
    "text": "And the same goes for\nthe other side as well. If we run out of things in\nB, when the number of things",
    "start": "4071035",
    "end": "4081320"
  },
  {
    "text": "we need to match in\nB is greater than 0. So those are our base cases.",
    "start": "4081320",
    "end": "4087250"
  },
  {
    "text": "The original problem is what? ",
    "start": "4087250",
    "end": "4093920"
  },
  {
    "text": "Yeah, it's just going to\nbe one of our subproblems, nn, and then n over\n2 and n over 2,",
    "start": "4093920",
    "end": "4100729"
  },
  {
    "text": "trying to match half\nof the things in C with half of the things.",
    "start": "4100729",
    "end": "4106489"
  },
  {
    "text": "AUDIENCE: The first two\narguments should be 0. JASON KU: 0, thank you,\nbecause we're 0 index, yes.",
    "start": "4106490",
    "end": "4115130"
  },
  {
    "text": "Again, that's-- switching from\nprefix to suffix in the middle is fun.",
    "start": "4115130",
    "end": "4120949"
  },
  {
    "text": "And it better be the\ncase that n is 2, or else it's obviously\nfalse-- or is even,",
    "start": "4120950",
    "end": "4127219"
  },
  {
    "text": "or else this is obviously false. And then, the last thing, which\nI'm not going to write down,",
    "start": "4127220",
    "end": "4134549"
  },
  {
    "text": "is we have a constant work here. Because I'm just checking\nthe value of four",
    "start": "4134550",
    "end": "4142830"
  },
  {
    "text": "subproblems and a\nconditional for each. And I have how many subproblems?",
    "start": "4142830",
    "end": "4149549"
  },
  {
    "text": "i loops over n, j loops over\nn, k and kj loop over n over 2.",
    "start": "4149550",
    "end": "4155159"
  },
  {
    "text": "So I get a quartic\nnumber of subproblems, quartic running\ntime as designed.",
    "start": "4155160",
    "end": "4161560"
  },
  {
    "text": "So I'm not going to write that\ndown, because I'm quite a bit late.",
    "start": "4161560",
    "end": "4167520"
  },
  {
    "text": "I'm probably going\nto do-- just do one more problem, which is sad,\nbecause the last one is about Gokemon Po, which\nis fun, fun problem.",
    "start": "4167520",
    "end": "4175890"
  },
  {
    "text": "Gokemon Po basically\nrelies on I'm trying to catch a bunch of\npocket monsters, just monsters,",
    "start": "4175890",
    "end": "4182889"
  },
  {
    "text": "I think is in this. And you can either\ngo to a location",
    "start": "4182890",
    "end": "4191580"
  },
  {
    "text": "and catch that monster for\nfree, but that costs money, because I have to\nride share there.",
    "start": "4191580",
    "end": "4199720"
  },
  {
    "text": "Or I don't have to\ngo to that location, and I buy it on my\nin-app purchase,",
    "start": "4199720",
    "end": "4207460"
  },
  {
    "text": "but that costs me a\ndifferent amount of money. But buying it from\nthe in-app purchase",
    "start": "4207460",
    "end": "4214190"
  },
  {
    "text": "kept me at the location I was\npreviously, wherever I was. And so the point\nof that problem is",
    "start": "4214190",
    "end": "4220010"
  },
  {
    "text": "I need to remember\nwhere I was last. So that I know how\nfar I need to travel",
    "start": "4220010",
    "end": "4225810"
  },
  {
    "text": "to get to my next monster. So that's going to be\nthe last one that I'm not going to be able to get to.",
    "start": "4225810",
    "end": "4232290"
  },
  {
    "text": "Number 3 is a\nproblem about tapas.",
    "start": "4232290",
    "end": "4240200"
  },
  {
    "text": "So these all come\nfrom spring '18. The first two came\nfrom a problem set.",
    "start": "4240200",
    "end": "4247340"
  },
  {
    "text": "These next two come from\nthe final exam that year. Obert Ratkins is on a diet.",
    "start": "4247340",
    "end": "4256960"
  },
  {
    "text": "But he has a dinner\nat an upscale tapas bar, where he got\nmany-- he's going to order many small plates.",
    "start": "4256960",
    "end": "4264219"
  },
  {
    "text": "There are n plates of food on\nthe menu, where each plate has a certain information, it\nhas a volume, the number",
    "start": "4264220",
    "end": "4272320"
  },
  {
    "text": "of calories in that dish. And a sweetness label,\nbasically 0 or 1, whether it's sweet or not.",
    "start": "4272320",
    "end": "4278080"
  },
  {
    "text": " But he's on a diet. And he wants to eat no more\nthan k calories during his meal,",
    "start": "4278080",
    "end": "4285860"
  },
  {
    "text": "but wants to fill his\nstomach as much as possible, because he wants to feel full. So he wants to maximize\nthe volume that he fills,",
    "start": "4285860",
    "end": "4293480"
  },
  {
    "text": "even though he wants to reduce\nthe number of calories-- restrict the number of calories.",
    "start": "4293480",
    "end": "4298790"
  },
  {
    "text": "He also wants to order\nexactly s sweet plates. ",
    "start": "4298790",
    "end": "4305179"
  },
  {
    "text": "So we've got this\nother condition where I need to make sure\nI'm eating a certain number",
    "start": "4305180",
    "end": "4310280"
  },
  {
    "text": "of sweet plates. It might be useful for me\nto remember how many sweet plates I've already eaten. So I make sure that\nI eat that number,",
    "start": "4310280",
    "end": "4317990"
  },
  {
    "text": "without purchasing\nthe same dish twice. So here's a condition that's\nsimilar to the knapsack 01",
    "start": "4317990",
    "end": "4324710"
  },
  {
    "text": "problem, versus a knapsack\nkind of general problem. Am I allowed to take more than\none of these things or not?",
    "start": "4324710",
    "end": "4331199"
  },
  {
    "text": "Here, it's a restriction\nthat I'm not allowed to take a plate more than once.",
    "start": "4331200",
    "end": "4336710"
  },
  {
    "text": "And I'm going to try to\ndescribe an order nks time algorithm to find the\nmaximum volume of food Obert",
    "start": "4336710",
    "end": "4343760"
  },
  {
    "text": "can eat given his diet. So first thing I'm going to\nnote here is one of the things",
    "start": "4343760",
    "end": "4350599"
  },
  {
    "text": "that we talked about at the last\ndynamic programming lecture was is this a polynomial running\ntime that it's asking me for.",
    "start": "4350600",
    "end": "4360940"
  },
  {
    "text": "Actually, on your problem set 8,\nyou were asked on each problem",
    "start": "4360940",
    "end": "4366257"
  },
  {
    "text": "to categorize whether the\nrunning time of your algorithm was polynomial or not. And actually, you don't have\nto solve the problem in order",
    "start": "4366257",
    "end": "4373430"
  },
  {
    "text": "to answer that question if\nwe give you the running time. If we give you the\nrunning time, you",
    "start": "4373430",
    "end": "4378810"
  },
  {
    "text": "can just take a look at that\nrunning time and be like, oh, is that polynomial and\nthe size of my input.",
    "start": "4378810",
    "end": "4385050"
  },
  {
    "text": "And here is it? All the ones previously were.",
    "start": "4385050",
    "end": "4390170"
  },
  {
    "text": "This one was order n. That was order n squared,\nbecause the n was the number of things in my\ninput, the number of words",
    "start": "4390170",
    "end": "4396020"
  },
  {
    "text": "it took to give you that input. Here, what do I have? I have a triple of\nnumbers for each plate.",
    "start": "4396020",
    "end": "4404240"
  },
  {
    "text": "There are n of them. So n is polynomial. s polynomial because\ns is smaller than n",
    "start": "4404240",
    "end": "4411849"
  },
  {
    "text": "and it's positive number. But k, k is just some\nnumber in my input.",
    "start": "4411850",
    "end": "4420830"
  },
  {
    "text": "It's representable in,\npotentially, one word, that's the assumption. But it could have\nexponential size",
    "start": "4420830",
    "end": "4427190"
  },
  {
    "text": "depending on the size of\nmy word of my machine. I don't know how big\nk is relative to n.",
    "start": "4427190",
    "end": "4433159"
  },
  {
    "text": "And so this is a\npseudopolynomial running time. Because k is just a number in my\nproblem, similar to subset sum,",
    "start": "4433160",
    "end": "4442980"
  },
  {
    "text": "similar to knapsack,\nwhich you guys did in lecture and recitation. And so if we ask you on an\nexam, which we probably will,",
    "start": "4442980",
    "end": "4449990"
  },
  {
    "text": "whether certain running\ntimes are polynomial or not, that's the logic\nthat you go about it. How big is my input?",
    "start": "4449990",
    "end": "4458369"
  },
  {
    "text": "What is my running time\nthat I'm trying to evaluate? And can I bound\neach of those terms in terms of the\nsize of my input?",
    "start": "4458370",
    "end": "4465060"
  },
  {
    "text": "If not, then you say\nit's pseudopolynomial. All right, so let's try\nto tackle this problem.",
    "start": "4465060",
    "end": "4473040"
  },
  {
    "text": "Already, because we've\ngot pseudopolynomial, you're thinking\nmaybe this is going",
    "start": "4473040",
    "end": "4478110"
  },
  {
    "text": "to be knapsack-like\nor subset sum-like. What do I need to--",
    "start": "4478110",
    "end": "4483300"
  },
  {
    "text": "I'm just going to go straight\nfor subproblems here. Actually, I should probably\nsay what my things are.",
    "start": "4483300",
    "end": "4492850"
  },
  {
    "text": "Meh, this is fine. I gave notation up\nthere, didn't I? So we're going to\nhave subproblems.",
    "start": "4492850",
    "end": "4499100"
  },
  {
    "text": "I'm going to-- I\nwant to maximize the number, the volume of food. So that should\nprobably be the output",
    "start": "4499100",
    "end": "4504670"
  },
  {
    "text": "of my subproblem, the max\nvolume on some subset of dishes.",
    "start": "4504670",
    "end": "4511100"
  },
  {
    "text": "I'm going to choose\nsuffixes here. i and some other stuff is\ngoing to be max volume of food",
    "start": "4511100",
    "end": "4524679"
  },
  {
    "text": "possible for plates Pi to Pn.",
    "start": "4524680",
    "end": "4537930"
  },
  {
    "text": "Going to assume one index\nhere, because why not? ",
    "start": "4537930",
    "end": "4543190"
  },
  {
    "text": "But do I need to remember\ninformation along the way? Yeah, just like with subset\nsum or knapsack, I need--",
    "start": "4543190",
    "end": "4551480"
  },
  {
    "text": "I have this calorie limit. So it's going to\nbe really useful for me to know how many\ncalories I've already eaten,",
    "start": "4551480",
    "end": "4558700"
  },
  {
    "text": "or how many calories I\nhave left in my budget. So let's say j, using\nat most j calories",
    "start": "4558700",
    "end": "4576100"
  },
  {
    "text": "from the remaining dishes. And I need to make sure that\nI'm eating exactly some number",
    "start": "4576100",
    "end": "4584260"
  },
  {
    "text": "of sweet plates in the future. And I need to remember,\nas I eat a sweet plate,",
    "start": "4584260",
    "end": "4590020"
  },
  {
    "text": "the number of sweet plates\nI need to eat decreases. And so I want to\ngeneralize that. I'm going to put an s prime\nhere to denote eating exactly",
    "start": "4590020",
    "end": "4604070"
  },
  {
    "text": "s sweet plates. ",
    "start": "4604070",
    "end": "4611080"
  },
  {
    "text": "OK, so that's my subproblem. ",
    "start": "4611080",
    "end": "4616682"
  },
  {
    "text": "I've got tons of board space. I'm going to go\nahead and use it. Relation, we've got x,\ni, j, s prime equals--",
    "start": "4616682",
    "end": "4629160"
  },
  {
    "text": "OK, I'm trying to\nmaximize volume. Probably, I want to be\nmaximizing over something.",
    "start": "4629160",
    "end": "4635160"
  },
  {
    "text": "This combinator is kind\nof what I like to call it.",
    "start": "4635160",
    "end": "4640590"
  },
  {
    "text": "Usually, what you're doing\nin dynamic programming is making some kind\nof choice or combin-- combining,\ncombinating, combining",
    "start": "4640590",
    "end": "4649750"
  },
  {
    "text": "some number of subproblems and\nchoosing which one's the best. If you just list a\nbunch of options here",
    "start": "4649750",
    "end": "4656960"
  },
  {
    "text": "and don't tell us\nhow to combine them, that's going to be a problem. Because we don't know\nwhat your dynamic program",
    "start": "4656960",
    "end": "4662358"
  },
  {
    "text": "is doing at all. So it's really useful for\nyou to be able to tell us how you're combining\nyour subproblems.",
    "start": "4662358",
    "end": "4667989"
  },
  {
    "text": "Here, we're doing a maximization\nover the different volumes possible. If we decide to eat the plate\ni, then we get Vi in volume,",
    "start": "4667990",
    "end": "4681470"
  },
  {
    "text": "we fill our tummies\nwith Vi in volume. But then we have to recurse\non using one fewer plate,",
    "start": "4681470",
    "end": "4687920"
  },
  {
    "text": "because we can't use\nthat plate again. And we've decreased the amount\nof calories in our budget.",
    "start": "4687920",
    "end": "4695660"
  },
  {
    "text": "And I'm going to\nsay s prime minus si, because si is 1 if it's\nsweet and 0 if it's not.",
    "start": "4695660",
    "end": "4708560"
  },
  {
    "text": "So it's kind of nice\nthat they kind of gave us this notation here. I can just subtract\nit off if it's there.",
    "start": "4708560",
    "end": "4714500"
  },
  {
    "text": "I don't have to do this\nconditional or something. And I don't ever want to\ngo below these budgets.",
    "start": "4714500",
    "end": "4721610"
  },
  {
    "text": "So I'm just going\nto say if Ci is",
    "start": "4721610",
    "end": "4728900"
  },
  {
    "text": "less than or equal to\nj and si is less than or equal to s prime.",
    "start": "4728900",
    "end": "4735080"
  },
  {
    "text": "So that's going to\nmake sure that I never have these guys go negative.",
    "start": "4735080",
    "end": "4740240"
  },
  {
    "text": "Otherwise, I don't\neat the plate. And that's kind\nof the easy case, because I just go i\nplus 1, j, s prime.",
    "start": "4740240",
    "end": "4748250"
  },
  {
    "text": "These things didn't change. I just have one\nfewer thing left. So I'm maximizing\nover these things.",
    "start": "4748250",
    "end": "4754190"
  },
  {
    "text": "This one's an always. It's not an if. ",
    "start": "4754190",
    "end": "4760380"
  },
  {
    "text": "So I just have two choices. And maximizing over them,\ntopological sort order,",
    "start": "4760380",
    "end": "4766440"
  },
  {
    "text": "here, I'm always recursing\non a thing with larger i. ",
    "start": "4766440",
    "end": "4773110"
  },
  {
    "text": "Depend on larger i,\nso acyclicl, happy.",
    "start": "4773110",
    "end": "4780340"
  },
  {
    "text": " Base cases, what's\nthe good case?",
    "start": "4780340",
    "end": "4792900"
  },
  {
    "text": "I get to the end, I've\nreached the end of my menu, I can't look at any more\nplates, I'm stuffed.",
    "start": "4792900",
    "end": "4798869"
  },
  {
    "text": " And I've already\nforbidden myself",
    "start": "4798870",
    "end": "4804389"
  },
  {
    "text": "from going negative\non the calories. So that should be all good.",
    "start": "4804390",
    "end": "4809420"
  },
  {
    "text": "But what do I want on\nthe third parameter? 0, I better have eaten\nexactly s plates.",
    "start": "4809420",
    "end": "4819050"
  },
  {
    "text": "So I want to get\ndown to x n plus 1,",
    "start": "4819050",
    "end": "4824420"
  },
  {
    "text": "because I'm 1 index,\nj, for any j, 0. That's going to be 0.",
    "start": "4824420",
    "end": "4832550"
  },
  {
    "text": "I got no calories there. But it's a good thing. It's a good place. It's fine.",
    "start": "4832550",
    "end": "4837860"
  },
  {
    "text": "0 is good. This is done, I don't know.",
    "start": "4837860",
    "end": "4845060"
  },
  {
    "text": "OK, there's another base case. What's the bad base case. I get to the end.",
    "start": "4845060",
    "end": "4850130"
  },
  {
    "text": "I'm always increasing i. And so I better be doing\nsomething on n plus 1. I got to the end.",
    "start": "4850130",
    "end": "4857110"
  },
  {
    "text": "j again, is going\nto be non-negative. Because we're always going\nto be in our calorie budget.",
    "start": "4857110",
    "end": "4865000"
  },
  {
    "text": "But if this is anything other\nthan s prime greater than--",
    "start": "4865000",
    "end": "4872340"
  },
  {
    "text": "if it's anything but 0,\nwhat is that going to be? AUDIENCE: It'd be\nminus infinity.",
    "start": "4872340",
    "end": "4877415"
  },
  {
    "text": "JASON KU: Minus infinity. I never want to be\nin this situation. If I do my dynamic program\nand I get a minus infinity up",
    "start": "4877415",
    "end": "4884840"
  },
  {
    "text": "at the top, that means there\nis no path to this subproblem here, where I'm happy.",
    "start": "4884840",
    "end": "4891580"
  },
  {
    "text": "I'm always sad. And so I return that the\nmaximum volume of food Obert",
    "start": "4891580",
    "end": "4898179"
  },
  {
    "text": "can eat and maintain his\ndiet is not possible.",
    "start": "4898180",
    "end": "4903520"
  },
  {
    "text": "Essentially, there aren't\ns dishes, sweet dishes in the thing whose calorie\nbudget are below my limit.",
    "start": "4903520",
    "end": "4912622"
  },
  {
    "text": "And that's probably\nan easier thing to check than in this band. So we have our original\nsubproblems now.",
    "start": "4912622",
    "end": "4921470"
  },
  {
    "text": "Solution is given by what? ",
    "start": "4921470",
    "end": "4927960"
  },
  {
    "text": "Just one of our\nsubproblems, it's just seeing what's\nthe maximum volume. I don't have to retrace my\nsteps to figure out my thing.",
    "start": "4927960",
    "end": "4935910"
  },
  {
    "text": "I just-- I say one\nof the subproblems, it's using all of the\nthings on my menu,",
    "start": "4935910",
    "end": "4942300"
  },
  {
    "text": "using my entire budget k, and\ntrying to get exactly s things.",
    "start": "4942300",
    "end": "4948480"
  },
  {
    "text": "That's going to be my\noutput to my algorithm. And this takes what time?",
    "start": "4948480",
    "end": "4956449"
  },
  {
    "text": "How many subproblems do I have? I have n plus 1 subproblems\nfor this parameter.",
    "start": "4956450",
    "end": "4964346"
  },
  {
    "text": "I have k plus 1 possible\nthings for this parameter. And I have s plus 1 possible\nthings for this parameter.",
    "start": "4964346",
    "end": "4971659"
  },
  {
    "text": "So I get order nks\nsubproblems, subproblems.",
    "start": "4971660",
    "end": "4981610"
  },
  {
    "text": "How much work per\nsubproblem, just a max of two things, so constant\nwork per subproblem",
    "start": "4981610",
    "end": "4991030"
  },
  {
    "text": "yields order nks time total.",
    "start": "4991030",
    "end": "4997570"
  },
  {
    "text": "So those are three nice\npractice problems for you, two that are polynomial,\none that's pseudopolynomial.",
    "start": "4997570",
    "end": "5004620"
  },
  {
    "text": "You have one more\nexample in there, which is the Gokemon Po\nproblem, which is a fun problem.",
    "start": "5004620",
    "end": "5010000"
  },
  {
    "text": "It involves remembering\nadditional information that's not-- not really a pseudopolynomial\nnumber in your problem.",
    "start": "5010000",
    "end": "5017670"
  },
  {
    "text": "But it's the location of where I\nwas last, or where I was going.",
    "start": "5017670",
    "end": "5024000"
  },
  {
    "text": "So take a look at that problem. It's another kind of non-trivial\nway of expanding subproblems.",
    "start": "5024000",
    "end": "5030580"
  },
  {
    "text": "OK, and with that, good\nluck on your quiz 3.",
    "start": "5030580",
    "end": "5035600"
  },
  {
    "start": "5035600",
    "end": "5040000"
  }
]