[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6360"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6360",
    "end": "13330"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13330",
    "end": "21720"
  },
  {
    "text": "SRINIVAS DEVADAS:\nSo welcome to 6046. My name is Srinivas Devadas.",
    "start": "21720",
    "end": "27010"
  },
  {
    "text": "I'm a professor of\ncomputer science. This is my 27th year at MIT.",
    "start": "27010",
    "end": "33650"
  },
  {
    "text": "I'm teaching this class\nwith great course staff, with co-lecturers,\nEric Demaine over here",
    "start": "33650",
    "end": "42010"
  },
  {
    "text": "and Nancy Lynch,\nwho's over there, and a whole bunch of TAs, who\nyou will meet through the term.",
    "start": "42010",
    "end": "50250"
  },
  {
    "text": "We just signed up our last TA\nyesterday, so at this point,",
    "start": "50250",
    "end": "55620"
  },
  {
    "text": "even I don't know their names. But we hope to have\na great semester.",
    "start": "55620",
    "end": "61840"
  },
  {
    "text": "I'm very excited to be teaching\nthis class with Eric and Nancy. I recognize some of you folks\nfrom 006 from a year ago,",
    "start": "61840",
    "end": "69830"
  },
  {
    "text": "so hello again, and\nfrom other classes. And so let's get started.",
    "start": "69830",
    "end": "76600"
  },
  {
    "text": "I mentioned 006. 006 is a prerequisite\nfor this class,",
    "start": "76600",
    "end": "81729"
  },
  {
    "text": "so if by chance you've\nskipped a class-- MIT or EECS has allowed\nyou to skip that--",
    "start": "81730",
    "end": "89490"
  },
  {
    "text": "make sure you check in with\nus to see that you are ready for 6046 because we will\nassume that you know the 6006",
    "start": "89490",
    "end": "99633"
  },
  {
    "text": "material. And by that, I\nmean basic material on that data structures,\nclassical algorithms",
    "start": "99633",
    "end": "106289"
  },
  {
    "text": "like sorting, algorithms\nfor dynamic programming,",
    "start": "106290",
    "end": "112930"
  },
  {
    "text": "or algorithms that use dynamic\nprogramming I should say, algorithms for shortest\npaths, et cetera.",
    "start": "112930",
    "end": "120580"
  },
  {
    "text": "6046 itself, we're\ngoing to run this course pretty much off the Stellar\nwebsite in the sense",
    "start": "120580",
    "end": "128039"
  },
  {
    "text": "that that'll be our one-stop\nshop for getting everything including lecture handouts,\nproblem sets-- turning",
    "start": "128039",
    "end": "136490"
  },
  {
    "text": "in your problem sets, et cetera. And I should mention\nthat this course is",
    "start": "136490",
    "end": "142800"
  },
  {
    "text": "being taped for\nOpenCourseWare, and while it'll take a little bit of time for\nthe videos to be put online,",
    "start": "142800",
    "end": "152750"
  },
  {
    "text": "we hope to do that perhaps\nin clumps before the quizzes",
    "start": "152750",
    "end": "159370"
  },
  {
    "text": "that you will have as we\nhave to have in our class.",
    "start": "159370",
    "end": "166019"
  },
  {
    "text": "So let me just say a couple\nmore things about logistics, and then we get started\nwith technical content.",
    "start": "166020",
    "end": "173580"
  },
  {
    "text": "As I mentioned, we're\ngoing to be running this course off Stellar. Please sign up for\nrecitations section",
    "start": "173580",
    "end": "180610"
  },
  {
    "text": "by going to the stellar website\nand choosing a section that works for your schedule.",
    "start": "180610",
    "end": "186270"
  },
  {
    "text": "Sections go from 10:00 AM\nall the way to 3:00 I think,",
    "start": "186270",
    "end": "191580"
  },
  {
    "text": "and we've placed a limit on the\nnumber of students per section.",
    "start": "191580",
    "end": "197390"
  },
  {
    "text": "We wanted the sections\nto be manageable in size, but there's plenty of\nroom for everybody,",
    "start": "197390",
    "end": "202600"
  },
  {
    "text": "and the schedule\nflexibility should allows you to choose a\nsection pretty easily.",
    "start": "202600",
    "end": "209819"
  },
  {
    "text": "We have a course information\ndocument and an objectives document on the website. That has a lot of details\non the grading policy,",
    "start": "209820",
    "end": "217460"
  },
  {
    "text": "the collaboration\npolicy, et cetera. Please read it very\ncarefully from the first page",
    "start": "217460",
    "end": "224700"
  },
  {
    "text": "all the way to the end. And I will mention\none thing that you should be careful about, which\nis that while problem sets are",
    "start": "224700",
    "end": "235650"
  },
  {
    "text": "only 30% of the\ngrade, we do require you to attempt the problems.",
    "start": "235650",
    "end": "242180"
  },
  {
    "text": "And there's actually\na penalty associated with not attempting problems and\nnot tuning problem sets in that",
    "start": "242180",
    "end": "247940"
  },
  {
    "text": "is way more than 30%,\nso keep that in mind, and please read the\ncollaboration policy",
    "start": "247940",
    "end": "254470"
  },
  {
    "text": "as well as the grading\npolicy, carefully. And feel free to\nask us questions.",
    "start": "254470",
    "end": "259739"
  },
  {
    "text": "You can ask us questions\nanonymously through Piazza, or you can certainly\nsend us email.",
    "start": "259740",
    "end": "265520"
  },
  {
    "text": "All the information\nis on Stellar. So that's all I really had to\nsay about course logistics.",
    "start": "265520",
    "end": "272960"
  },
  {
    "text": "Let me tell you a\nlittle bit about how the content of this\ncourse is structured. ",
    "start": "272960",
    "end": "280409"
  },
  {
    "text": "We have several modules,\nand Eric, Nancy, and I will be in charge of\neach of these different modules",
    "start": "280410",
    "end": "289810"
  },
  {
    "text": "as the term goes. Our very first module is going\nto start really next time.",
    "start": "289810",
    "end": "298070"
  },
  {
    "text": "Today is really an\noverview lecture. But it's a module on\ndivide and conquer, and you learned about this\ndivide and conquer paradigm",
    "start": "298070",
    "end": "306970"
  },
  {
    "text": "in 006 or equivalent classes. It's breaking of a problem\ninto smaller problems",
    "start": "306970",
    "end": "312350"
  },
  {
    "text": "and getting efficiency that way. Merge sort is a\nclassic algorithm that follows the divide\nand conquer paradigm.",
    "start": "312350",
    "end": "319600"
  },
  {
    "text": "If you're going to\ntake it to a new level. And I guess that's sort\nof the team of 046.",
    "start": "319600",
    "end": "325190"
  },
  {
    "text": "Take the material in 006 and\nraise the stakes a little bit-- raise the level of\nsophistication--",
    "start": "325190",
    "end": "331030"
  },
  {
    "text": "and you'll see things like\nfast Fourier transform. Finding an algorithm\nfor a convex hull,",
    "start": "331030",
    "end": "337310"
  },
  {
    "text": "we'll do that next time. That uses the divide\nand conquer paradigm. We're going to do a\nton of optimization.",
    "start": "337310",
    "end": "344670"
  },
  {
    "text": "Divide and conquer can\nobviously be used for search and also for optimization.",
    "start": "344670",
    "end": "351060"
  },
  {
    "text": "In particular, we'll look\nat strategies corresponding",
    "start": "351060",
    "end": "356580"
  },
  {
    "text": "to greedy algorithms, Dijkstra,\nwhich hopefully you remember",
    "start": "356580",
    "end": "362050"
  },
  {
    "text": "the shortest path algorithm from\n006 is an example of a greedy",
    "start": "362050",
    "end": "367479"
  },
  {
    "text": "algorithm. We'll see a bunch\nof other examples, and we'll look at one today.",
    "start": "367480",
    "end": "373259"
  },
  {
    "text": "And dynamic programming, it's\na wonderful algorithmic hammer",
    "start": "373260",
    "end": "379770"
  },
  {
    "text": "that you can apply to a\nwide variety of problems, certainly to shortest\npaths as well.",
    "start": "379770",
    "end": "385250"
  },
  {
    "text": "We'll look at it in\nmany different contexts. And then really\nquickly network flow,",
    "start": "385250",
    "end": "393580"
  },
  {
    "text": "which is a problem that's\nassociated with-- here's a network. This capacity is associated\nwith the network.",
    "start": "393580",
    "end": "400620"
  },
  {
    "text": "The capacities could\nrespond to the width of the roads in a highway\nsystem or the number",
    "start": "400620",
    "end": "408880"
  },
  {
    "text": "of lanes, the amount of\ntraffic that can go through. How do I maximize the\nset of commodities,",
    "start": "408880",
    "end": "416230"
  },
  {
    "text": "or the amount of\ncommodities that I can push through the network? That it turns out is,\nagain, a problem that",
    "start": "416230",
    "end": "426320"
  },
  {
    "text": "has many different\napplications, so it's really a collection of problems. You're going to spend\nsome time, a little bit",
    "start": "426320",
    "end": "432479"
  },
  {
    "text": "today, but a little\nmore than in 6006, talking about intractability.",
    "start": "432480",
    "end": "439670"
  },
  {
    "text": "So a lot of algorithms that\nwe're going to talk about are efficient in the\nsense that they're",
    "start": "439670",
    "end": "445080"
  },
  {
    "text": "polynomial time solvable. And first, polynomial\ntime solvable",
    "start": "445080",
    "end": "451560"
  },
  {
    "text": "doesn't imply efficiency\nin the practical sense, so if you have an n\nraised to 8 algorithm,",
    "start": "451560",
    "end": "457550"
  },
  {
    "text": "it's polynomial time. But really, it's not something\nthat you can use on real world problems where n is\nrelatively large,",
    "start": "457550",
    "end": "465220"
  },
  {
    "text": "but generally in a theoretical\ncomputer science class, we'll think about\ntractable problems",
    "start": "465220",
    "end": "472100"
  },
  {
    "text": "as being those that have\npolynomial time algorithms that",
    "start": "472100",
    "end": "477320"
  },
  {
    "text": "can solve them\nexactly or optimally. But intractability then\ncorresponds to problems",
    "start": "477320",
    "end": "484690"
  },
  {
    "text": "that, at the moment, we don't\nknow of a polynomial time algorithm to solve them,\nand the best algorithms",
    "start": "484690",
    "end": "491510"
  },
  {
    "text": "we have take worst\ncase exponential time. And so the question is, what\nhappens with those problems?",
    "start": "491510",
    "end": "497740"
  },
  {
    "text": "And we'll look at things\nlike approximation algorithms that can get us, in the case\nof optimization problems,",
    "start": "497740",
    "end": "508740"
  },
  {
    "text": "get us to within a certain\nfraction of optimal, guaranteed, and run\nin polynomial time.",
    "start": "508740",
    "end": "516260"
  },
  {
    "text": "So you can't get\nthe absolute best, but you can get within 10% or\nwe can get within a factor of 2.",
    "start": "516260",
    "end": "522469"
  },
  {
    "text": "That may be enough for\na particular instance of a problem or a set of\ninstances of a problem.",
    "start": "522470",
    "end": "529660"
  },
  {
    "text": "And what we do a bunch\nof advanced topics. I think we have distributed\nalgorithms plan.",
    "start": "529660",
    "end": "536050"
  },
  {
    "text": "Nancy works in that\narea, and we'll also",
    "start": "536050",
    "end": "541450"
  },
  {
    "text": "talk about cryptography. There's a deep connection\nbetween number theory",
    "start": "541450",
    "end": "546820"
  },
  {
    "text": "algorithms and cryptography\nthat towards end of the lecture, or, I should say, towards\nthe end of the course,",
    "start": "546820",
    "end": "553340"
  },
  {
    "text": "I will look at a\nlittle more closely. So much for overview, let's get\nstarted with today's lecture",
    "start": "553340",
    "end": "562529"
  },
  {
    "text": "for real. And here's the theme\nof today's lecture. ",
    "start": "562530",
    "end": "570050"
  },
  {
    "text": "I talked a bit\nabout tractability and intractability. And what is fascinating\nabout algorithms",
    "start": "570050",
    "end": "576110"
  },
  {
    "text": "is that you might\nsee a problem that has a fairly obvious polynomial\ntime solution or a linear time",
    "start": "576110",
    "end": "586440"
  },
  {
    "text": "solution, then you change\nit ever so slightly, and the linear time\nalgorithm doesn't work.",
    "start": "586440",
    "end": "593360"
  },
  {
    "text": "Maybe you can find\na cubic algorithm. And then you change\nit a little more,",
    "start": "593360",
    "end": "599890"
  },
  {
    "text": "and you end up with\nsomething that you can't find a polynomial\ntime algorithm for.",
    "start": "599890",
    "end": "606130"
  },
  {
    "text": "You can't prove that the\npolynomial time algorithm or polynomial monomial\ntime algorithm",
    "start": "606130",
    "end": "612980"
  },
  {
    "text": "gives you the optimal\nsolution in all cases. And then you go off\ninto complexity theory.",
    "start": "612980",
    "end": "618700"
  },
  {
    "text": "You maybe discover that, or\nshow that this problem is NP-complete, and now you're\nin the intractability domain.",
    "start": "618700",
    "end": "627560"
  },
  {
    "text": "So very small changes\nin problem statements can end up with very\ndifferent situations",
    "start": "627560",
    "end": "639149"
  },
  {
    "text": "from a standpoint of\nalgorithm complexity. And so that's really\nwhat I want to point out",
    "start": "639150",
    "end": "646480"
  },
  {
    "text": "to you in some detail\nwith a concrete example. ",
    "start": "646480",
    "end": "659130"
  },
  {
    "text": "So I want to get a\nlittle bit pedantic here with respect to intractability\nand tractability.",
    "start": "659130",
    "end": "666820"
  },
  {
    "text": "You've seen, I think, these\nterms before in the one lecture",
    "start": "666820",
    "end": "672580"
  },
  {
    "text": "in 006, but we'll go over this\nin some detail today and more",
    "start": "672580",
    "end": "679580"
  },
  {
    "text": "later on in the semester. But for now, let's recall some\nbasic terminology associated",
    "start": "679580",
    "end": "687090"
  },
  {
    "text": "with tractability and\nintractability or complexity theory, broadly speaking.",
    "start": "687090",
    "end": "692529"
  },
  {
    "text": "Capital P is a class of problems\nsolvable in polynomial time.",
    "start": "692530",
    "end": "699700"
  },
  {
    "start": "699700",
    "end": "705560"
  },
  {
    "text": "And think of that\nas big O, n raised to k for some constant k.",
    "start": "705560",
    "end": "714686"
  },
  {
    "text": "Now you can have long\nfactors in there, but once you put a big\nO in there, you're good.",
    "start": "714686",
    "end": "720550"
  },
  {
    "text": "You can always\nsay, order n, even if it's a logarithmic\nproblem, and big O",
    "start": "720550",
    "end": "728140"
  },
  {
    "text": "lets you be sloppy like that. And there are many examples\nof polynomial time algorithms,",
    "start": "728140",
    "end": "735410"
  },
  {
    "text": "of course, for interesting\nproblems like shortest paths. So the shortest path\nproblem is order V square,",
    "start": "735410",
    "end": "742600"
  },
  {
    "text": "where V is the number of\nvertices in the graph. There's algorithms for that. You can do a little bit\nbetter if you use fancier data",
    "start": "742600",
    "end": "752380"
  },
  {
    "text": "structure, but\nthat's an example. NP is another class of problems\nthat's very interesting.",
    "start": "752380",
    "end": "762050"
  },
  {
    "text": "This is the class of\nproblems that whose solution",
    "start": "762050",
    "end": "768029"
  },
  {
    "text": "is verifiable in\npolynomial time. ",
    "start": "768030",
    "end": "775640"
  },
  {
    "text": "So an example of a problem in\nNP that is not known to be NP",
    "start": "775640",
    "end": "786060"
  },
  {
    "text": "is the Hamiltonian\ncycle problem. And the Hamiltonian\ncycle problem",
    "start": "786060",
    "end": "793180"
  },
  {
    "text": "corresponds to given a directed\ngraph, find a simple cycle.",
    "start": "793180",
    "end": "811260"
  },
  {
    "text": "So you can repeat vertices,\nbut you need the simple cycle",
    "start": "811260",
    "end": "817900"
  },
  {
    "text": "to contain each vertex in V.",
    "start": "817900",
    "end": "828250"
  },
  {
    "text": "And determining whether a given\ncycle is a Hamiltonian cycle",
    "start": "828250",
    "end": "835500"
  },
  {
    "text": "or not is simple. You just traverse the cycle. Make sure that you've touched\nall the vertices exactly once,",
    "start": "835500",
    "end": "843780"
  },
  {
    "text": "and you're done. Clearly doable in\npolynomial time. So therefore, Hamiltonian\ncycle is an NP,",
    "start": "843780",
    "end": "850390"
  },
  {
    "text": "but determining whether a\ngraph has a Hamiltonian cycle",
    "start": "850390",
    "end": "856620"
  },
  {
    "text": "or not is a hard problem. And in particular, the\nnotion of NP completeness",
    "start": "856620",
    "end": "871000"
  },
  {
    "text": "is something that defines the\nlevel of intractability for NP.",
    "start": "871000",
    "end": "879940"
  },
  {
    "text": "The NP complete problems are\nthe hardest problems in NP,",
    "start": "879940",
    "end": "885450"
  },
  {
    "text": "and Hamiltonian\ncycle is one of them. If you can solve any NP complete\nproblem in polynomial time,",
    "start": "885450",
    "end": "895710"
  },
  {
    "text": "you can solve all problems\nin NP in polynomial time. So that's what I meant by saying\nthat NP complete problems are,",
    "start": "895710",
    "end": "903670"
  },
  {
    "text": "in some sense, the\nhardest problems an NP because solving one of\nthem gives you everything.",
    "start": "903670",
    "end": "910000"
  },
  {
    "text": "So the definition\nof NP completeness is that the problem\nis in NP and is",
    "start": "910000",
    "end": "919070"
  },
  {
    "text": "as hard-- an\ninformal definition-- as any problem in NP.",
    "start": "919070",
    "end": "926279"
  },
  {
    "start": "926280",
    "end": "933050"
  },
  {
    "text": "And so Hamiltonian cycle\nis an NP complete problem. Satisfiability is an\nNP complete problem,",
    "start": "933050",
    "end": "939410"
  },
  {
    "text": "and there's a whole\nbunch of them. So going back to our theme\nhere, what I want to show you",
    "start": "939410",
    "end": "946130"
  },
  {
    "text": "is how for an interval\nscheduling problem, that I'll define in a couple of minutes,\nhow we move from linear time,",
    "start": "946130",
    "end": "957960"
  },
  {
    "text": "therefore P, to something\nthat's still in P. But it's a little\nmore complicated",
    "start": "957960",
    "end": "963500"
  },
  {
    "text": "if I change the constraints\nof a problem a little bit. And finally, if I add more\nconstraints to the problem,",
    "start": "963500",
    "end": "970450"
  },
  {
    "text": "generalize it-- and\nyou can think of it as adding constraints\nor generalizing the problem-- you get\nsmall changes to something",
    "start": "970450",
    "end": "979930"
  },
  {
    "text": "that becomes NP complete. So this is something\nthat algorithm designers",
    "start": "979930",
    "end": "985890"
  },
  {
    "text": "have to keep in mind because\nbefore you go off and try to design an algorithm\nfor a problem",
    "start": "985890",
    "end": "992620"
  },
  {
    "text": "you like to know where in the\nspectrum your problem resides.",
    "start": "992620",
    "end": "997760"
  },
  {
    "text": "And in order to\ndo that, you need to understand algorithm\nparadigms obviously and be",
    "start": "997760",
    "end": "1004660"
  },
  {
    "text": "able to apply them, but you also\nhave to understand reductions where you can try and translate\none problem to another.",
    "start": "1004660",
    "end": "1011430"
  },
  {
    "text": "And if you can do that,\nand the first problem is known to be hard, then\nyou can make arguments",
    "start": "1011430",
    "end": "1018660"
  },
  {
    "text": "about the hardness\nof your problem. So these are the kinds of things\nthat we'll touch upon today,",
    "start": "1018660",
    "end": "1026020"
  },
  {
    "text": "the analysis of an algorithm,\nthe design of an algorithm,",
    "start": "1026020",
    "end": "1032439"
  },
  {
    "text": "and also the complexity analysis\nof an algorithm, which may not just be an\nasymptotic-- well, this",
    "start": "1032440",
    "end": "1038900"
  },
  {
    "text": "is order n cubed\nor order n square but more in the realm of\nNP completeness as well.",
    "start": "1038900",
    "end": "1045510"
  },
  {
    "text": " So so much for\ncontext, let's dive",
    "start": "1045510",
    "end": "1052000"
  },
  {
    "text": "into our interval scheduling\nproblem, which is something",
    "start": "1052000",
    "end": "1059520"
  },
  {
    "text": "that you can imagine\ndoing for classes,",
    "start": "1059520",
    "end": "1064670"
  },
  {
    "text": "tasks, a particular schedule\nduring a day, life in general.",
    "start": "1064670",
    "end": "1070110"
  },
  {
    "text": "And in the general setting, we\nhave resources and requests,",
    "start": "1070110",
    "end": "1079140"
  },
  {
    "text": "and we're going to have a single\nresource for our first version of the problem.",
    "start": "1079140",
    "end": "1085190"
  },
  {
    "text": "And our requests are\ngoing to be 1 through n,",
    "start": "1085190",
    "end": "1090639"
  },
  {
    "text": "and we can think\nof these requests as requiring time\ncorresponding to the resource.",
    "start": "1090640",
    "end": "1097100"
  },
  {
    "text": "So the request is\nfor the resource, and you want time\non the resource. Maybe it's computation time.",
    "start": "1097100",
    "end": "1102280"
  },
  {
    "text": "Maybe it's your time. It could be anything. Each of these requests responds\nto an interval of time,",
    "start": "1102280",
    "end": "1112230"
  },
  {
    "text": "and that's where\nthe name comes from. si is start time time.",
    "start": "1112230",
    "end": "1120029"
  },
  {
    "text": "fi is the finish\ntime, and we're going",
    "start": "1120030",
    "end": "1126650"
  },
  {
    "text": "to say si is strictly\nless than fi. So I didn't put less\nthan or equal to there",
    "start": "1126650",
    "end": "1132970"
  },
  {
    "text": "because I want these requests\nto be non-null, non-zero, so otherwise they're\nuninteresting.",
    "start": "1132970",
    "end": "1140810"
  },
  {
    "text": "And we're going to\nhave a start time, and we're going to have an end\ntime, and they're not equal.",
    "start": "1140810",
    "end": "1145860"
  },
  {
    "text": "So that's the first part\nof the specification",
    "start": "1145860",
    "end": "1151270"
  },
  {
    "text": "of the problem and\nthen the second part, which is intuitive is that\ntwo requests-- we have",
    "start": "1151270",
    "end": "1161370"
  },
  {
    "text": "a single resource\nhere remember-- i and j are considered\nto be compatible,",
    "start": "1161370",
    "end": "1170390"
  },
  {
    "text": "which means you can satisfy\nboth of these requests. They're compatible. Incompatible requests,\nyou can't satisfy",
    "start": "1170390",
    "end": "1177330"
  },
  {
    "text": "with your single\nresource simultaneously-- Provided they don't overlap.",
    "start": "1177330",
    "end": "1185345"
  },
  {
    "start": "1185345",
    "end": "1191850"
  },
  {
    "text": "And an overlapping condition\nmight be that fi is less than",
    "start": "1191850",
    "end": "1198450"
  },
  {
    "text": "or equal to sg, or fj\nless than or equal to si.",
    "start": "1198450",
    "end": "1208429"
  },
  {
    "text": "So again, I put a less\nthan or equal to here, which is important\nto spend a minute on.",
    "start": "1208430",
    "end": "1216160"
  },
  {
    "text": "What I'm saying here in this\ncontext is that I really have",
    "start": "1216160",
    "end": "1222470"
  },
  {
    "text": "open-ended intervals on the\nright-hand side corresponding to the fi's.",
    "start": "1222470",
    "end": "1229419"
  },
  {
    "text": "So pictorially, you could\nlook at it this way.",
    "start": "1229420",
    "end": "1235190"
  },
  {
    "text": "Let's say I have\nintervals like this.",
    "start": "1235190",
    "end": "1240830"
  },
  {
    "text": "So this is interval number 1. That's interval number 2. Right here I have s of 1, f of\n1 out here, s of 2 out here,",
    "start": "1240830",
    "end": "1253360"
  },
  {
    "text": "and f of 2 out here. So this is f of 1 for\nthat and s of 2 for this.",
    "start": "1253360",
    "end": "1261910"
  },
  {
    "text": "I'm allowing s of 2 and f\nof 1 to be exactly equal,",
    "start": "1261910",
    "end": "1267920"
  },
  {
    "text": "and I still agree that these\ntwo are compatible requests.",
    "start": "1267920",
    "end": "1274960"
  },
  {
    "text": "So this is-- I guess\nit's terminology. It's our definition\nof compatibility.",
    "start": "1274960",
    "end": "1282940"
  },
  {
    "text": "So you can imagine now\nan optimization problem",
    "start": "1282940",
    "end": "1289000"
  },
  {
    "text": "that is associated with\ninterval scheduling where, in a different\nexample, I have",
    "start": "1289000",
    "end": "1295980"
  },
  {
    "text": "this interval\ncorresponding to s1 and f1. I might have a different\ninterval here corresponding",
    "start": "1295980",
    "end": "1305200"
  },
  {
    "text": "to 2, then corresponding to 3. And then maybe I've\ngot 4 here, 5, and 6.",
    "start": "1305200",
    "end": "1316990"
  },
  {
    "text": "So those are my six intervals\ncorresponding to my input.",
    "start": "1316990",
    "end": "1323090"
  },
  {
    "text": "I have a single resource. I'm just drawn out in\na two-dimensional form.",
    "start": "1323090",
    "end": "1328110"
  },
  {
    "text": "There's six different\nrequests that I have, the six different intervals. Intervals and\nrequests are synonyms.",
    "start": "1328110",
    "end": "1336260"
  },
  {
    "text": "And my goal here-- and it's kind\nof obvious in this example-- is to select a compatible subset\nof requests, or intervals,",
    "start": "1336260",
    "end": "1362540"
  },
  {
    "text": "that is of maximum size. ",
    "start": "1362540",
    "end": "1369850"
  },
  {
    "text": "And I'd like to do\nthis efficiently. So we'll always consider\nefficiency here,",
    "start": "1369850",
    "end": "1376480"
  },
  {
    "text": "but in terms of the\nspecification of the problem as opposed to a requirement on the\ncomplexity of the algorithm,",
    "start": "1376480",
    "end": "1385450"
  },
  {
    "text": "I want maximum size\nfor this subset. So as I showed you, or\nI mentioned earlier,",
    "start": "1385450",
    "end": "1393570"
  },
  {
    "text": "in this case, it is\nclear from the drawing that I put up there that the\nmaximum size for that six",
    "start": "1393570",
    "end": "1401200"
  },
  {
    "text": "requests example\nthat I have is three. So that's the set up.",
    "start": "1401200",
    "end": "1407899"
  },
  {
    "text": "Now we're going to spend\nthe next few minutes",
    "start": "1407900",
    "end": "1413490"
  },
  {
    "text": "talking about a greedy\nstrategy for solving this particular problem.",
    "start": "1413490",
    "end": "1419990"
  },
  {
    "text": "If you don't know of\nit, the greedy strategy is going to always produce\nthe maximum size or not.",
    "start": "1419990",
    "end": "1429539"
  },
  {
    "text": "In fact, it depends on the\nparticular greedy heuristic,",
    "start": "1429540",
    "end": "1434750"
  },
  {
    "text": "the selection heuristic that\na greedy algorithm uses. So that's going to be important,\nand we'll take a look--",
    "start": "1434750",
    "end": "1441409"
  },
  {
    "text": "and hopefully you\ncan suggest some-- at a few different\ngreedy heuristics.",
    "start": "1441410",
    "end": "1446970"
  },
  {
    "text": "But my claim, overall\nclaim, that I'm going to have to\nspend a bunch of time here justifying and\neventually proving",
    "start": "1446970",
    "end": "1455300"
  },
  {
    "text": "is that we can solve\nthis problem using",
    "start": "1455300",
    "end": "1467210"
  },
  {
    "text": "a greedy algorithm.  Now what is a greedy algorithm?",
    "start": "1467210",
    "end": "1472730"
  },
  {
    "text": "You've seen some examples. As the name implies, it's\nsomething that's myopic.",
    "start": "1472730",
    "end": "1482240"
  },
  {
    "text": "It doesn't look ahead. It looks to maximize\nthe very first thing",
    "start": "1482240",
    "end": "1488700"
  },
  {
    "text": "that you couldn't maximize. It says-- traffic is a\ngood example-- don't let",
    "start": "1488700",
    "end": "1497050"
  },
  {
    "text": "anybody cut in front of you. You've got some room up there. Get up there.",
    "start": "1497050",
    "end": "1502779"
  },
  {
    "text": "Generally, people\nare greedy when it comes to getting\nto work, trying",
    "start": "1502780",
    "end": "1510120"
  },
  {
    "text": "to minimize the time\nand, in this case, on the time that they\nspend on the road.",
    "start": "1510120",
    "end": "1515480"
  },
  {
    "text": "But we've had other examples. For example, when you look\nat interval scheduling,",
    "start": "1515480",
    "end": "1522240"
  },
  {
    "text": "you might say, I'm going to\npick the smallest request.",
    "start": "1522240",
    "end": "1529410"
  },
  {
    "text": "And I'm going to pick the\nsmallest request first, and I'm going to try\nand collect together",
    "start": "1529410",
    "end": "1534490"
  },
  {
    "text": "as many requests as possible. And if the requests\nare small in the sense that si and fi, for\nthe two requests,",
    "start": "1534490",
    "end": "1541620"
  },
  {
    "text": "are close to each other, then\nmaybe that's the best strategy. So that's an example\nof a greedy strategy",
    "start": "1541620",
    "end": "1550049"
  },
  {
    "text": "for our particular example. But just to give you a slightly\nbetter definition of greedy",
    "start": "1550050",
    "end": "1559050"
  },
  {
    "text": "than what I've said so\nfar, a greedy algorithm",
    "start": "1559050",
    "end": "1564780"
  },
  {
    "text": "is a myopic algorithm\nthat does two things.",
    "start": "1564780",
    "end": "1578270"
  },
  {
    "text": "It processes the input one piece\nat a time with no apparent look",
    "start": "1578270",
    "end": "1595121"
  },
  {
    "text": "ahead.  So what happens is that greedy\nalgorithms are typically",
    "start": "1595121",
    "end": "1602909"
  },
  {
    "text": "quite efficient. What you end up doing is looking\nat a small part of the problem",
    "start": "1602910",
    "end": "1611340"
  },
  {
    "text": "instance and\ndeciding what to do. Once you've done\nthat, then you're",
    "start": "1611340",
    "end": "1617790"
  },
  {
    "text": "in a situation where the problem\nhas gotten a little bit simpler because you've already\nsolved part of it,",
    "start": "1617790",
    "end": "1623779"
  },
  {
    "text": "and then you move on. So what would a template\nfor a greedy algorithm",
    "start": "1623780",
    "end": "1629180"
  },
  {
    "text": "look like for our interval\nscheduling problem? Here's a template that\nprobably puts it all together",
    "start": "1629180",
    "end": "1637590"
  },
  {
    "text": "and gives you a good sense of\nwhat I mean by greedy, at least",
    "start": "1637590",
    "end": "1644309"
  },
  {
    "text": "in this context.  So before we even get into\nparticulars of selection",
    "start": "1644310",
    "end": "1654400"
  },
  {
    "text": "strategies, let me\ngive you a template for greedy interval scheduling.",
    "start": "1654400",
    "end": "1661905"
  },
  {
    "text": " So step 1, use a simple\nrule to select a request.",
    "start": "1661905",
    "end": "1674910"
  },
  {
    "start": "1674910",
    "end": "1680630"
  },
  {
    "text": "And once you do that, if you\nselected a particular request--",
    "start": "1680630",
    "end": "1688180"
  },
  {
    "text": "let's say you selected 1. What happens now once\nyou've selected 1?",
    "start": "1688180",
    "end": "1696630"
  },
  {
    "text": "Well, you're done. You can't select 2. You can't select 3. You can't select 4. You can't select 5. You can't select 6.",
    "start": "1696630",
    "end": "1703560"
  },
  {
    "text": "So if you have selected 1\nin this case, you're done, but we have to codify\nthat in a step here.",
    "start": "1703560",
    "end": "1712260"
  },
  {
    "text": "And what that means\nis that we have to reject all requests that\nare incompatible with i.",
    "start": "1712260",
    "end": "1724400"
  },
  {
    "text": " And at this point, because we've\nrejected a bunch of requests,",
    "start": "1724400",
    "end": "1731190"
  },
  {
    "text": "our problem got smaller. And so you now have\na smaller problem,",
    "start": "1731190",
    "end": "1739179"
  },
  {
    "text": "and you just repeat-- go back to\nstep 1-- until all requests are",
    "start": "1739180",
    "end": "1746400"
  },
  {
    "text": "processed.  All right, so that's\na classical template",
    "start": "1746400",
    "end": "1752480"
  },
  {
    "text": "for a greedy algorithm. You just go through these\nreally simple steps.",
    "start": "1752480",
    "end": "1759350"
  },
  {
    "text": "And the reason\nthis is a template is because I haven't\nspecified a particular rule,",
    "start": "1759350",
    "end": "1766430"
  },
  {
    "text": "and so it's not quite an\nalgorithm that you can code yet because we need a rule.",
    "start": "1766430",
    "end": "1772389"
  },
  {
    "text": "So with all of that\ncontext, let me ask you.",
    "start": "1772390",
    "end": "1778230"
  },
  {
    "text": "What is a rule that you\nthink would work well",
    "start": "1778230",
    "end": "1784880"
  },
  {
    "text": "for an interval\nscheduling problem? Yeah, go ahead. AUDIENCE: Select one with\nthe earliest finish time.",
    "start": "1784880",
    "end": "1790360"
  },
  {
    "text": "SRINIVAS DEVADAS: Select one\nwith the earliest finish time. All right, well, I did\nnot want that answer. [LAUGHTER]",
    "start": "1790360",
    "end": "1796639"
  },
  {
    "text": "But now that you've\ngiven me the answer, I have to do\nsomething about this. So I want a different answer, so\nwe'll go to a different person.",
    "start": "1796640",
    "end": "1806040"
  },
  {
    "text": "But before I do that, let me\nreward you for that answer",
    "start": "1806040",
    "end": "1813480"
  },
  {
    "text": "I did not want with a limited\nedition 6046 Frisbee, OK?",
    "start": "1813480",
    "end": "1822471"
  },
  {
    "text": "[APPLAUSE] You need to stand up\nbecause I don't want to take people's heads off.",
    "start": "1822472",
    "end": "1828120"
  },
  {
    "text": "[LAUGHTER] Yeah sorry. All right, so here you go. All right? Good. [APPLAUSE]",
    "start": "1828120",
    "end": "1834420"
  },
  {
    "text": "So people do cookies and candy. I think Eric, Nancy\nand I are cooler.",
    "start": "1834420",
    "end": "1840340"
  },
  {
    "text": "[LAUGHTER] So we do Frisbees.",
    "start": "1840340",
    "end": "1845800"
  },
  {
    "text": "All right, good, so\nthe fact of the matter was that this class was\nscheduled for 9:30 to 11:00",
    "start": "1845800",
    "end": "1854570"
  },
  {
    "text": "on Tuesdays and Thursdays. That's when we decided\nto do Frisbees. And then it got shifted\nover to 11:00 to 12:30,",
    "start": "1854570",
    "end": "1861530"
  },
  {
    "text": "but then we bought all these\nFrisbees, so we said, whatever. It's not like we\ncould use all of them",
    "start": "1861530",
    "end": "1867424"
  },
  {
    "text": "All right, good. So I don't like that answer,\nand I want a different one.",
    "start": "1867424",
    "end": "1872887"
  },
  {
    "text": "Give me another one. Yeah, go ahead. AUDIENCE: Just carry it\nthrough in numerical order. SRINIVAS DEVADAS: I'm sorry? AUDIENCE: Just carry it\nthrough in numerical order.",
    "start": "1872887",
    "end": "1879340"
  },
  {
    "text": "SRINIVAS DEVADAS: Carry it\nthrough in numerical order. Is that going to work? And what's an example\nthat it didn't work?",
    "start": "1879340",
    "end": "1885770"
  },
  {
    "text": "The one right there, right? Should I get her a Frisbee? We should.",
    "start": "1885770",
    "end": "1891391"
  },
  {
    "text": "I'm going to be generous\nat the beginning. You can just--  But that's an answer I liked.",
    "start": "1891391",
    "end": "1898080"
  },
  {
    "text": "Yeah, there you go. So entering through a numeric\norder isn't going to work.",
    "start": "1898080",
    "end": "1906370"
  },
  {
    "text": "This is a great\nexample right there. Give me another one.",
    "start": "1906370",
    "end": "1912899"
  },
  {
    "text": "[LAUGHTER] There are no\nFrisbees right here. Over there, yeah?",
    "start": "1912900",
    "end": "1918320"
  },
  {
    "text": "AUDIENCE: Try the one\nwith the shortest time. SRINIVAS DEVADAS: Ah, try the\none with the shortest time.",
    "start": "1918320",
    "end": "1923510"
  },
  {
    "text": "OK, so the shortest time in\nthis case might be this one.",
    "start": "1923510",
    "end": "1929001"
  },
  {
    "text": "The shortest time\nmight be this one, and, hey, that might\nwork in this case because you pick this one,\nwhich is the shortest,",
    "start": "1929001",
    "end": "1934600"
  },
  {
    "text": "or maybe it's five,\nwhich is the shortest. Either way, you could get 2, 5,\nand 6, looking at this picture,",
    "start": "1934600",
    "end": "1940870"
  },
  {
    "text": "seems to work. Maybe 4, 5, and 6 if you pick\n5 first, et cetera, right?",
    "start": "1940870",
    "end": "1947050"
  },
  {
    "text": "I'll give you a Frisbee if you\ncan take that same algorithm and give me a counter example.",
    "start": "1947050",
    "end": "1952260"
  },
  {
    "start": "1952260",
    "end": "1959120"
  },
  {
    "text": "AUDIENCE: Let's say you have two\nrequests which don't overlap, and then there's--",
    "start": "1959120",
    "end": "1964512"
  },
  {
    "text": "SRINIVAS DEVADAS: --there's\none right in the middle, exactly right. Yep, so let's see.",
    "start": "1964512",
    "end": "1970780"
  },
  {
    "text": "What do I do? Oh, here. ",
    "start": "1970780",
    "end": "1976320"
  },
  {
    "text": "So pictorially, a really\nyou can look at this, and you can actually figure out\nwhether your heuristic works",
    "start": "1976320",
    "end": "1984960"
  },
  {
    "text": "or not. But this, I think, what\nyou were thinking about. ",
    "start": "1984960",
    "end": "1990720"
  },
  {
    "text": "There you go, right? So you get one. ",
    "start": "1990720",
    "end": "1997321"
  },
  {
    "text": "So that clearly doesn't work. So this one was\nsmallest, doesn't work.",
    "start": "1997322",
    "end": "2004730"
  },
  {
    "text": "The suggestion\nhere was a numeric. ",
    "start": "2004730",
    "end": "2010350"
  },
  {
    "text": "It doesn't work.  Here's one that\nmight actually work.",
    "start": "2010350",
    "end": "2020030"
  },
  {
    "text": "For each request,\nfind the number",
    "start": "2020030",
    "end": "2026550"
  },
  {
    "text": "of incompatible requests. ",
    "start": "2026550",
    "end": "2031880"
  },
  {
    "text": "So you've got a request. You can always intersect\nthe other requests with it and decide whether the second\nrequest is compatible or not,",
    "start": "2031880",
    "end": "2040799"
  },
  {
    "text": "and you do this for\nevery other request. And you can collect\ntogether numbers associated",
    "start": "2040800",
    "end": "2047450"
  },
  {
    "text": "with how many incompatible\nrequests a particular request has, and you say, well, let\nme use that as a heuristic.",
    "start": "2047450",
    "end": "2057760"
  },
  {
    "text": "So each request, find number\nof incompatible requests and select the one\nwith the minimum number",
    "start": "2057760",
    "end": "2070400"
  },
  {
    "text": "of incompatibles. ",
    "start": "2070401",
    "end": "2076109"
  },
  {
    "text": "So just to be\nclear, in this case, you would not select\n1 because clearly 1 is",
    "start": "2076110",
    "end": "2083020"
  },
  {
    "text": "incompatible with\nevery other request, so that clearly is\nnot numeric order.",
    "start": "2083020",
    "end": "2088149"
  },
  {
    "text": "In this case, you would\nnot select this one because it's incompatible\nwith this one and that one.",
    "start": "2088150",
    "end": "2093580"
  },
  {
    "text": "So you'd select that one\nwhich has the minimum number of incompatibles. So you think this\nis going to produce",
    "start": "2093580",
    "end": "2099630"
  },
  {
    "text": "the correct answer, the maximum\nanswer, in every possible case?",
    "start": "2099630",
    "end": "2106332"
  },
  {
    "text": "AUDIENCE: No. SRINIVAS DEVADAS:\nNo, who said, no? Well, anybody who said,\nno, should give me",
    "start": "2106333",
    "end": "2112290"
  },
  {
    "text": "a counter example. Yeah, go for it. AUDIENCE: If the\none that it selects has mutually incompatible\ncollection of intervals",
    "start": "2112290",
    "end": "2121156"
  },
  {
    "text": "with which it's compatible. SRINIVAS DEVADAS: Right,\nso that's a good thought.",
    "start": "2121156",
    "end": "2127740"
  },
  {
    "text": "We'll have to [INAUDIBLE] that. And I think this\nparticular example, that's exactly what\nyou said, which",
    "start": "2127740",
    "end": "2134940"
  },
  {
    "text": "just instantiates your notion\nof mutual incompatibility.",
    "start": "2134940",
    "end": "2143290"
  },
  {
    "text": "So here's an example\nwhere I have something. It's a little more complicated. As you can see, this is\na pretty good heuristic.",
    "start": "2143290",
    "end": "2150960"
  },
  {
    "text": "It's not perfect as you can\nsee from this example, where I have something like this.",
    "start": "2150960",
    "end": "2161805"
  },
  {
    "start": "2161805",
    "end": "2173910"
  },
  {
    "text": "So if you look at this,\nwhat I have here is",
    "start": "2173910",
    "end": "2182599"
  },
  {
    "text": "I have just a bunch\nof requests which have-- this is incompatible\nwith this and that",
    "start": "2182600",
    "end": "2189760"
  },
  {
    "text": "and these two, so clearly a lot\nof incompatibilities for these, a lot incompatibilities\nfor these.",
    "start": "2189760",
    "end": "2196390"
  },
  {
    "text": "Which is the minimum? The one in here, but what\nhappens if you select that?",
    "start": "2196390",
    "end": "2203460"
  },
  {
    "text": "Well, clearly you don't get\nthis solution, which is optimal. The one on top, so this\nis a bad selection.",
    "start": "2203460",
    "end": "2211800"
  },
  {
    "text": " And so this doesn't\nwork either, OK?",
    "start": "2211800",
    "end": "2219880"
  },
  {
    "text": "There you go.  So as it turns out,\nthe reason I didn't",
    "start": "2219880",
    "end": "2227510"
  },
  {
    "text": "like that first answer\nwas it was correct. [LAUGHTER] It's actually a\nbeautiful heuristic.",
    "start": "2227510",
    "end": "2235069"
  },
  {
    "text": "Earliest finish time is a\nheuristic that is-- well,",
    "start": "2235070",
    "end": "2241194"
  },
  {
    "text": "it's not really a\nheuristic in the sense that if you use\nthat selection rule, then it works in every case.",
    "start": "2241194",
    "end": "2249700"
  },
  {
    "text": "In every case, it's going to get\nto you the maximum number, OK?",
    "start": "2249700",
    "end": "2255150"
  },
  {
    "text": "Earliest finished time\nso what does that mean?",
    "start": "2255150",
    "end": "2261109"
  },
  {
    "text": "Well, it just means that\nI'm going to just scan",
    "start": "2261110",
    "end": "2266690"
  },
  {
    "text": "the f of i's associated with the\nlist of requests that I have,",
    "start": "2266690",
    "end": "2272670"
  },
  {
    "text": "and I'm going to pick\nthe one that is minimum. Minimum f of i means\nearliest finish time.",
    "start": "2272670",
    "end": "2279859"
  },
  {
    "text": "Now you can just step\nback, and I'm not going to do this for every\ndiagram that I have up here,",
    "start": "2279860",
    "end": "2286650"
  },
  {
    "text": "but look at every\nexample that I've put up. Apply the selection rule\nassociated with earliest finish",
    "start": "2286650",
    "end": "2294250"
  },
  {
    "text": "time, and you'll see\nthat it works and gets you the maximum number.",
    "start": "2294250",
    "end": "2299370"
  },
  {
    "text": "For example, over here, this\nhas the earliest finish time.",
    "start": "2299370",
    "end": "2307630"
  },
  {
    "text": "Not this, not this,\nit's over here. So you pick that, and then you\nuse the greedy algorithm step 2",
    "start": "2307630",
    "end": "2315170"
  },
  {
    "text": "to eliminate all of\nthe intervals that are incompatible, so these go away.",
    "start": "2315170",
    "end": "2321500"
  },
  {
    "text": "Once this goes away, this\none has the earliest finish time and so on and so forth.",
    "start": "2321500",
    "end": "2328480"
  },
  {
    "text": "So this is something that you\ncan prove through examples.",
    "start": "2328480",
    "end": "2336000"
  },
  {
    "text": "That's not really\na good notion when you can prove to\nyourself using examples.",
    "start": "2336000",
    "end": "2341760"
  },
  {
    "text": "And this is where I guess\nis the essence of 6046,",
    "start": "2341760",
    "end": "2348880"
  },
  {
    "text": "to some extent 006\ncomes into play. We will have to prove beyond\na shadow of a doubt using",
    "start": "2348880",
    "end": "2358310"
  },
  {
    "text": "mathematical rigor that the\nearliest finish time selection",
    "start": "2358310",
    "end": "2363820"
  },
  {
    "text": "rule always gives us the\nmaximum number of requests,",
    "start": "2363820",
    "end": "2370665"
  },
  {
    "text": "and we're going to do that. It's going to take us\na little bit of time, but that's the kind of thing\nyou will be expected to do",
    "start": "2370665",
    "end": "2378330"
  },
  {
    "text": "and you'll see a lot of in 046. OK?",
    "start": "2378330",
    "end": "2383590"
  },
  {
    "text": "So everyone buy\nearliest finish time? Yep, go ahead. AUDIENCE: So what if we\nconsider the simple path",
    "start": "2383590",
    "end": "2390922"
  },
  {
    "text": "example of there's one\nrequest for the whole block, and there's one small request\nthat it mentioned earlier.",
    "start": "2390922",
    "end": "2397577"
  },
  {
    "text": "SRINIVAS DEVADAS:\nWell, you'll get one for-- if there's\nany two requests, your maximum number is 1.",
    "start": "2397577",
    "end": "2403810"
  },
  {
    "text": "So you pick-- it\ndoesn't matter-- it's not like you want\nefficiency of your resource.",
    "start": "2403810",
    "end": "2408840"
  },
  {
    "text": "In this particular case,\nwe will look at cases where you might have an extra\nconsideration associated",
    "start": "2408840",
    "end": "2415450"
  },
  {
    "text": "with your problem which\nchanges the problem that says, I want my resource to\nbe maximally utilized.",
    "start": "2415450",
    "end": "2422210"
  },
  {
    "text": "If you do that, then\nthis doesn't work. And that's exactly-- it's\na great question you asked.",
    "start": "2422210",
    "end": "2427470"
  },
  {
    "text": "But I did say that we were going\nto look at the team here, which I don't have anymore, but of\nhow problems change algorithms.",
    "start": "2427470",
    "end": "2438150"
  },
  {
    "text": "And so that's a problem change. You've got a question. AUDIENCE: I have\na counter example.",
    "start": "2438150",
    "end": "2443414"
  },
  {
    "text": "You have three\nintervals that don't conflict with one another. You have one interval that\nconflicts with the first two",
    "start": "2443414",
    "end": "2452376"
  },
  {
    "text": "and ends earlier\nthan the first one. SRINIVAS DEVADAS: OK,\nso are you claiming",
    "start": "2452376",
    "end": "2457620"
  },
  {
    "text": "that there's going to be a\ncounter example to earliest finish time? AUDIENCE: Yes. SRINIVAS DEVADAS: All\nright, I would write it down",
    "start": "2457620",
    "end": "2462853"
  },
  {
    "text": "on a sheet of paper. And get me a concrete example,\nand you can just slide it by.",
    "start": "2462853",
    "end": "2467930"
  },
  {
    "text": "And if you get that before I\nfinished my proof, you win, OK?",
    "start": "2467930",
    "end": "2473470"
  },
  {
    "text": "[LAUGHTER] So I would write it down. Just write it down, so good.",
    "start": "2473470",
    "end": "2480750"
  },
  {
    "text": "All right, so this\nis a contest now. [LAUGHTER] All right, so we are going\nto try and prove this.",
    "start": "2480750",
    "end": "2487600"
  },
  {
    "start": "2487600",
    "end": "2496450"
  },
  {
    "text": "So there's many ways\nyou could prove things, and I mean prove\nthings properly.",
    "start": "2496450",
    "end": "2502320"
  },
  {
    "text": "And I don't know if you've\nread the old 6042 proof techniques that\nare invalid, which",
    "start": "2502320",
    "end": "2508040"
  },
  {
    "text": "is things like prove\nby intimidation, proof",
    "start": "2508040",
    "end": "2513230"
  },
  {
    "text": "because the lecturer said so,\nyou know, things like that. This is going to be a\nclassical proof technique.",
    "start": "2513230",
    "end": "2519029"
  },
  {
    "text": "It's going to be a\nproof by induction. We're going to go into\nit in some detail.",
    "start": "2519030",
    "end": "2524359"
  },
  {
    "text": "Later on in the\nterm we are going to put out sketches of proofs. We are going to be skipping\nsteps in lecture that",
    "start": "2524360",
    "end": "2532299"
  },
  {
    "text": "are obvious or maybe\nnot so obvious, but if you paid\nattention, then you",
    "start": "2532300",
    "end": "2539570"
  },
  {
    "text": "can infer the middle\nstep, for example. And so will be doing\nproof sketches,",
    "start": "2539570",
    "end": "2546710"
  },
  {
    "text": "and proof sketches are\nnot sketchy proofs. [LAUGHTER] So keep that in mind.",
    "start": "2546710",
    "end": "2552470"
  },
  {
    "text": "But this particular proof\nthat we're going to do, I'm going to put\nin all the steps because it's our first one.",
    "start": "2552470",
    "end": "2559210"
  },
  {
    "text": "And so what we're going to\ndo here is prove a claim,",
    "start": "2559210",
    "end": "2566580"
  },
  {
    "text": "and the claim is\nsimply that-- whoops,",
    "start": "2566580",
    "end": "2577010"
  },
  {
    "text": "this is not writing very well. ",
    "start": "2577010",
    "end": "2583390"
  },
  {
    "text": "What is going on here? ",
    "start": "2583390",
    "end": "2591200"
  },
  {
    "text": "OK. [LAUGHTER]",
    "start": "2591200",
    "end": "2596450"
  },
  {
    "text": "Back to the white. ",
    "start": "2596450",
    "end": "2602480"
  },
  {
    "text": "Given a list of intervals\nl, our greedy algorithm",
    "start": "2602480",
    "end": "2617050"
  },
  {
    "text": "with earliest finish time\nproduces k star intervals",
    "start": "2617050",
    "end": "2633960"
  },
  {
    "text": "where k star is minimal. ",
    "start": "2633960",
    "end": "2641250"
  },
  {
    "text": "So that's what we like to prove. AUDIENCE: [INAUDIBLE]. SRINIVAS DEVADAS:\nSorry, what happened?",
    "start": "2641250",
    "end": "2646938"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] SRINIVAS DEVADAS: Oh, right. Good point.",
    "start": "2646938",
    "end": "2653510"
  },
  {
    "text": "Maximum. ",
    "start": "2653510",
    "end": "2661370"
  },
  {
    "text": "What we're going to do is\nprove this by induction, and it's going to be\ninduction on k star.",
    "start": "2661370",
    "end": "2667010"
  },
  {
    "start": "2667010",
    "end": "2672070"
  },
  {
    "text": "And so the base case is almost\nalways with induction proofs",
    "start": "2672070",
    "end": "2680990"
  },
  {
    "text": "trivial, and it's\nsimilar here as well. And in the base\ncase, if you have",
    "start": "2680990",
    "end": "2689960"
  },
  {
    "text": "a single interval\nin your list, then",
    "start": "2689960",
    "end": "2695359"
  },
  {
    "text": "obviously that's\na trivial example. But what I'm saying here for\nthe base is slightly different.",
    "start": "2695360",
    "end": "2701420"
  },
  {
    "text": "It says that the optimal\nsolution has a single interval, right? And so now if your problem has\none interval or two intervals",
    "start": "2701420",
    "end": "2711019"
  },
  {
    "text": "or three intervals, you\ncan always pick one, and it's clearly going to be\na valid schedule because you",
    "start": "2711020",
    "end": "2718204"
  },
  {
    "text": "don't have to check\ncompatibility. And so the base\ncase is trivial even in the case where\nyou're not talking just",
    "start": "2718205",
    "end": "2727990"
  },
  {
    "text": "of intervals that\nhave cardinality 1, but the optimal schedule\nhas cardinality 1.",
    "start": "2727990",
    "end": "2736230"
  },
  {
    "text": "So that's a trivial case. So the hard work, of course,\nin the induction proofs is",
    "start": "2736230",
    "end": "2746750"
  },
  {
    "text": "assuming the hypothesis\nand proving the n-plus-1,",
    "start": "2746750",
    "end": "2751930"
  },
  {
    "text": "or in this case, the\nk-star-plus-1 case. And that's what we'll\nhave to work on.",
    "start": "2751930",
    "end": "2759330"
  },
  {
    "text": "So let's say that the\nclaim holds for k star,",
    "start": "2759330",
    "end": "2773910"
  },
  {
    "text": "and we are given a\nlist of intervals",
    "start": "2773910",
    "end": "2788260"
  },
  {
    "text": "who's optimal schedule\nis k star plus 1.",
    "start": "2788260",
    "end": "2793860"
  },
  {
    "text": " It has k-star-plus-1 intervals\nin the optimal schedule,",
    "start": "2793860",
    "end": "2805660"
  },
  {
    "text": "so L may be some large\nnumber, capital L, maybe in the hundreds. And k star, there may\nbe 10 of what have you.",
    "start": "2805660",
    "end": "2813160"
  },
  {
    "text": "They're different. I want to point that out. So our optimal schedule, we're\ngoing to write out as this,",
    "start": "2813160",
    "end": "2825010"
  },
  {
    "text": "s star.  So usually if you use star for\noptimal in 046 and it's got",
    "start": "2825010",
    "end": "2833550"
  },
  {
    "text": "k-star-plus-1 entries, and those\nentries look like sf pairs--",
    "start": "2833550",
    "end": "2842510"
  },
  {
    "text": "so I'm going to using the\nsubscript j1 through j k star",
    "start": "2842510",
    "end": "2848080"
  },
  {
    "text": "plus 1 to denote\nthese intervals.",
    "start": "2848080",
    "end": "2855440"
  },
  {
    "text": "So the first one is sj1, fj1. That's an interval\nthat's been selected",
    "start": "2855440",
    "end": "2861670"
  },
  {
    "text": "and is part of our\noptimal solution. And then you keep going\nand we have sj k star",
    "start": "2861670",
    "end": "2871590"
  },
  {
    "text": "plus 1 comma fj k star plus 1.",
    "start": "2871590",
    "end": "2879470"
  },
  {
    "text": "So no getting away from\nsubscripts here in 046 So",
    "start": "2879470",
    "end": "2886240"
  },
  {
    "text": "that's what we have in terms\nof this is what the optimal",
    "start": "2886240",
    "end": "2895010"
  },
  {
    "text": "schedule is. It's got size k star. Of course, what\nwe have to show is that the greedy algorithm\nwith the earliest finish time",
    "start": "2895010",
    "end": "2906154"
  },
  {
    "text": "is going to produce\nsomething that is k star plus one in size. And so that's the hard part.",
    "start": "2906154",
    "end": "2913299"
  },
  {
    "text": "We can assume the\ninductive hypothesis, and we'll have to do that. But there's a couple\nof steps in between.",
    "start": "2913300",
    "end": "2921700"
  },
  {
    "text": "So let's say that what\nwe have is s1 through k",
    "start": "2921700",
    "end": "2931490"
  },
  {
    "text": "is what the greedy algorithm\nproduces with the earliest finish time. So I'm going to write\nthat down sik fik,",
    "start": "2931490",
    "end": "2950350"
  },
  {
    "text": "so notice I have k here, and\nk and k star, at this point,",
    "start": "2950350",
    "end": "2957800"
  },
  {
    "text": "are not comparable.  I'm just making a statement that\nI took this particular problem",
    "start": "2957800",
    "end": "2969860"
  },
  {
    "text": "that has k star plus 1 in terms\nof its optimal solution size,",
    "start": "2969860",
    "end": "2975800"
  },
  {
    "text": "and for that problem,\nI have k intervals that are produced by\nthe earliest finish",
    "start": "2975800",
    "end": "2981350"
  },
  {
    "text": "time greedy heuristic. And so that's why the\nsubscripts here are different.",
    "start": "2981350",
    "end": "2987630"
  },
  {
    "text": "I have i1 here and ik,\nand then over here I have the j's, and so these\nintervals are different.",
    "start": "2987630",
    "end": "2994320"
  },
  {
    "text": " If I look at f of i plus f\nof i1, and if I look f of j1,",
    "start": "2994320",
    "end": "3007160"
  },
  {
    "text": "what can I say about\nf of i1 and f of j1? ",
    "start": "3007160",
    "end": "3015720"
  },
  {
    "text": "Is there a relationship\nbetween f of i1 and f of j1? ",
    "start": "3015720",
    "end": "3021700"
  },
  {
    "text": "They're equal? Do they have to be equal? Yeah?",
    "start": "3021700",
    "end": "3026880"
  },
  {
    "text": "AUDIENCE: Less or equal to. SRINIVAS DEVADAS:\nLess than equal to, exactly right, so\nthey're less than equal to.",
    "start": "3026880",
    "end": "3033740"
  },
  {
    "text": "It's possible that\nyou might end up with a different optimal\nsolution that doesn't",
    "start": "3033740",
    "end": "3043130"
  },
  {
    "text": "use the earliest finish time. We think earliest finish time\nis optimal at this point. We haven't proven it yet,\nbut it's quite possible",
    "start": "3043130",
    "end": "3049680"
  },
  {
    "text": "that you may have\nother solutions that are optimal that aren't\nnecessarily the ones",
    "start": "3049680",
    "end": "3056650"
  },
  {
    "text": "that earliest finish\ntime gives you. So that's really why the\nless than or equal to is important here.",
    "start": "3056650",
    "end": "3064490"
  },
  {
    "text": "Now what I'm going to\ndo is create a schedule, s star star, that essentially\nis going to be taking s star",
    "start": "3064490",
    "end": "3073270"
  },
  {
    "text": "and pulling out the first\ninterval from s star and substituting it\nwith the first interval",
    "start": "3073270",
    "end": "3081000"
  },
  {
    "text": "from my greedy\nalgorithms schedule. So I'm just going\nto replace that, and so s star star is si1 fj1.",
    "start": "3081000",
    "end": "3092660"
  },
  {
    "text": " And then I'm going to\nbe going back to sj2 fj2",
    "start": "3092660",
    "end": "3102500"
  },
  {
    "text": "because I'm going back to s\nstar and all the other ones are coming from s star.",
    "start": "3102500",
    "end": "3108930"
  },
  {
    "text": "So they're going to be sj k star\nplus 1 comma fj k star plus 1.",
    "start": "3108930",
    "end": "3121780"
  },
  {
    "text": " So I just did a little\nsubstitution there associated",
    "start": "3121780",
    "end": "3128130"
  },
  {
    "text": "with the optimal\nsolution, and I stuck",
    "start": "3128130",
    "end": "3133950"
  },
  {
    "text": "in part of the greedy\nalgorithm solution, in fact, the very\nfirst schedule. AUDIENCE: So the 1 should be i1.",
    "start": "3133950",
    "end": "3142542"
  },
  {
    "text": "SRINIVAS DEVADAS: Oh,\nthis should be-- i1, AUDIENCE: Right? SRINIVAS DEVADAS: i1, thank you.",
    "start": "3142542",
    "end": "3148640"
  },
  {
    "text": "Yep, good.",
    "start": "3148640",
    "end": "3153650"
  },
  {
    "text": "So we've got a couple of things\nto do, a couple of observations",
    "start": "3153650",
    "end": "3159260"
  },
  {
    "text": "to make, and we're going\nto be able do prove",
    "start": "3159260",
    "end": "3166150"
  },
  {
    "text": "some relationship\nbetween k and k star that is going to give us\nthe proof for our claim.",
    "start": "3166150",
    "end": "3171970"
  },
  {
    "text": " So clearly, s star\nis also optimal.",
    "start": "3171970",
    "end": "3182670"
  },
  {
    "text": "All I've done is\ntaken one interval out and replaced it\nwith another one. It hasn't changed the size.",
    "start": "3182670",
    "end": "3188610"
  },
  {
    "text": "It goes up to k star plus 1, so\ns double star is also optimal. s star is optimal. s\ndouble star is optimal.",
    "start": "3188610",
    "end": "3197470"
  },
  {
    "text": "Now I'm going to define L\nprime as the set of intervals",
    "start": "3197470",
    "end": "3209210"
  },
  {
    "text": "with s of i greater than\nor equal to f of i1.",
    "start": "3209210",
    "end": "3215720"
  },
  {
    "text": "So what is L prime? Well, L prime is what\nhappens in the second step",
    "start": "3215720",
    "end": "3221030"
  },
  {
    "text": "of the greedy algorithm,\nwhere in the second step of the greedy algorithm,\nonce I've selected",
    "start": "3221030",
    "end": "3228720"
  },
  {
    "text": "this particular interval\nand I've pull it in, I have to reject all of\nthe other intervals that",
    "start": "3228720",
    "end": "3234720"
  },
  {
    "text": "are incompatible with this one. So I'm going to have to take\nonly those intervals for which",
    "start": "3234720",
    "end": "3243880"
  },
  {
    "text": "s of i is greater than\nor equal to f of i1 because those are the\nones that are compatible.",
    "start": "3243880",
    "end": "3254140"
  },
  {
    "text": "So that's what L prime is. And I'm going to be able\nto say that since s double",
    "start": "3254140",
    "end": "3262500"
  },
  {
    "text": "star is optimal for L, s\ndouble star 2 to k star plus 1",
    "start": "3262500",
    "end": "3278300"
  },
  {
    "text": "is optimal for L prime. ",
    "start": "3278300",
    "end": "3284760"
  },
  {
    "text": "So I'm making a statement\nabout this optimal solution.",
    "start": "3284760",
    "end": "3291670"
  },
  {
    "text": "I know that's\noptimal, and basically what I'm saying is subsets of\nthe optimal solution are going",
    "start": "3291670",
    "end": "3298730"
  },
  {
    "text": "to have to be optimal because\nif that's not the case, I could always substitute\nsomething better and shrink",
    "start": "3298730",
    "end": "3306850"
  },
  {
    "text": "the size of the k star plus\n1 optimal solution, which",
    "start": "3306850",
    "end": "3312110"
  },
  {
    "text": "obviously would be\na contradiction. So s double star\nis optimal for L,",
    "start": "3312110",
    "end": "3320730"
  },
  {
    "text": "and therefore s double\nstar 2 through k star plus 1 is optimal for L prime.",
    "start": "3320730",
    "end": "3326809"
  },
  {
    "text": "Everybody buy that? Yep? Good. And so what this\nmeans, of course,",
    "start": "3326810",
    "end": "3333440"
  },
  {
    "text": "is that the optimal schedule\nfor L prime has k star size.",
    "start": "3333440",
    "end": "3349099"
  },
  {
    "text": "And I'm starting with 2. I've taken away 1. So now I have L prime,\nwhich is a smaller problem.",
    "start": "3349100",
    "end": "3355029"
  },
  {
    "text": "Now you see where the proof is\nheaded, if you didn't already. I have a smaller problem,\nwhich is L prime.",
    "start": "3355030",
    "end": "3361250"
  },
  {
    "text": "Clearly, it's got\nfewer requests, and I have constructed\nan optimal schedule",
    "start": "3361250",
    "end": "3368930"
  },
  {
    "text": "for that problem\nby pulling it out of the original optimal\nschedule I was given.",
    "start": "3368930",
    "end": "3375910"
  },
  {
    "text": "And that size of that\noptimal schedule is k star.",
    "start": "3375910",
    "end": "3381950"
  },
  {
    "text": "And now I get to invoke\nmy inductive hypothesis because my inductive\nhypothesis says",
    "start": "3381950",
    "end": "3389150"
  },
  {
    "text": "that this claim that\nI have up there holds for any set of\nproblems that have",
    "start": "3389150",
    "end": "3396160"
  },
  {
    "text": "an optimal schedule\nof size k star. That's what the inductive\nhypothesis gives me.",
    "start": "3396160",
    "end": "3402609"
  },
  {
    "text": "And so by the\ninductive hypothesis,",
    "start": "3402610",
    "end": "3416340"
  },
  {
    "text": "when I run the greedy\nalgorithm on L prime,",
    "start": "3416340",
    "end": "3429520"
  },
  {
    "text": "I'm going to get sk\nschedule of size k star.",
    "start": "3429520",
    "end": "3439340"
  },
  {
    "start": "3439340",
    "end": "3448920"
  },
  {
    "text": "Now can you tell me, based\non what you see on the board, by construction, when I\nrun the greedy algorithm,",
    "start": "3448920",
    "end": "3457230"
  },
  {
    "text": "what am I getting on L star? By construction, when I run the\ngreedy algorithm on L prime--",
    "start": "3457230",
    "end": "3466980"
  },
  {
    "text": "there's too many\nsuperscripts here-- when I run the greedy algorithm\non L prime, what do I get?",
    "start": "3466980",
    "end": "3472980"
  },
  {
    "text": " Someone? Yeah? AUDIENCE: We get s of i sub\n2, s of i sub 2 interval.",
    "start": "3472980",
    "end": "3481244"
  },
  {
    "text": "SRINIVAS DEVADAS:\nExactly right, I get everything from\nthe second thing",
    "start": "3481244",
    "end": "3486500"
  },
  {
    "text": "here all the way to the\nend because that's exactly what the greedy algorithm does. Remember, the greedy\nalgorithm picked si1 fi1,",
    "start": "3486500",
    "end": "3495020"
  },
  {
    "text": "and then rejected all requests\nthat are incompatible and then move on.",
    "start": "3495020",
    "end": "3500089"
  },
  {
    "text": "When you rejected all requests\nthat are incompatible here, you got exactly L prime.",
    "start": "3500090",
    "end": "3505829"
  },
  {
    "text": "And by construction,\nthe greedy algorithm should have given me all\nthe way from si2 too sik.",
    "start": "3505830",
    "end": "3515799"
  },
  {
    "text": "Thank you. So by construction,\nthe greedy on L prime",
    "start": "3515800",
    "end": "3534620"
  },
  {
    "text": "gives s2 to k, right?",
    "start": "3534620",
    "end": "3540760"
  },
  {
    "text": "And what is the size of this? 2 to k gives me a\nsize of k minus 1.",
    "start": "3540760",
    "end": "3547990"
  },
  {
    "text": "This is k minus 1. ",
    "start": "3547990",
    "end": "3555910"
  },
  {
    "text": "So if I put these\ntwo things together,",
    "start": "3555910",
    "end": "3561619"
  },
  {
    "text": "what is the next step? I have the inductive\nhypothesis giving me a fact. I have the construction\ngiving me something.",
    "start": "3561620",
    "end": "3569380"
  },
  {
    "text": "Now I can relate k and k star. What's the relationship? ",
    "start": "3569380",
    "end": "3578440"
  },
  {
    "text": "k star is equal to\nk minus 1, right? Do people see that?",
    "start": "3578440",
    "end": "3584710"
  },
  {
    "text": "So size k star or\njust k minus 1.",
    "start": "3584710",
    "end": "3591099"
  },
  {
    "text": "So what that means is\ngiven that s2k is a size k",
    "start": "3591100",
    "end": "3597680"
  },
  {
    "text": "star, it means that s1k\nis of size k star plus 1,",
    "start": "3597680",
    "end": "3605280"
  },
  {
    "text": "which is exactly what I want. That's optimal because\nI said in the beginning",
    "start": "3605280",
    "end": "3611859"
  },
  {
    "text": "that we had k star plus 1 in our\ninductive hypothesis this case as being the optimal solution.",
    "start": "3611860",
    "end": "3618400"
  },
  {
    "text": "So this last step\nhere is all you need to argue now that s\nof 1k, going back up here,",
    "start": "3618400",
    "end": "3630220"
  },
  {
    "text": "this is optimal because\nk equals k star plus 1.",
    "start": "3630220",
    "end": "3642140"
  },
  {
    "text": "There you go, so that's the\nkind of argument that you have",
    "start": "3642140",
    "end": "3648440"
  },
  {
    "text": "to make in order to prove\nsomething like this in 046.",
    "start": "3648440",
    "end": "3653510"
  },
  {
    "text": "And what you'll see\nin your problem sets, including the one that's\ngoing to come out on Thursday,",
    "start": "3653510",
    "end": "3659380"
  },
  {
    "text": "is that different\nproblem that you have to have proof for\na greedy algorithm for.",
    "start": "3659380",
    "end": "3665907"
  },
  {
    "text": "I forget exactly\nwhat technique you'll have used there,\nperhaps induction, perhaps contradiction. And these are the\nkinds of things",
    "start": "3665907",
    "end": "3672650"
  },
  {
    "text": "that get you to the\npoint where you've analyzed the correctness\nof algorithms,",
    "start": "3672650",
    "end": "3679830"
  },
  {
    "text": "not just the fact that you're\ngetting a valid schedule, but you're getting a\nvalid maximum schedule",
    "start": "3679830",
    "end": "3686330"
  },
  {
    "text": "in terms of the maximum\nnumber of requests. Any questions about this?",
    "start": "3686330",
    "end": "3692920"
  },
  {
    "text": "Do people buy the proof? Yep. Good. So that was greedy for\na particular problem.",
    "start": "3692920",
    "end": "3702080"
  },
  {
    "text": "I told you that the\nteam of our lecture here was changing the\nproblem and getting",
    "start": "3702080",
    "end": "3711200"
  },
  {
    "text": "different algorithms that\nhad different complexities.",
    "start": "3711200",
    "end": "3718800"
  },
  {
    "text": "So let's go ahead and do that. So the rest of\nthis lecture, we'll just take a look at\ndifferent kinds of problems",
    "start": "3718800",
    "end": "3725289"
  },
  {
    "text": "and talk a little more\nsuperficially about what the problem complexities are.",
    "start": "3725290",
    "end": "3732160"
  },
  {
    "text": "And so one thing that\nmight come to mind is that you'd like to do\nweighted interval scheduling.",
    "start": "3732160",
    "end": "3738890"
  },
  {
    "text": " And what happens here is\neach request has weight wi,",
    "start": "3738890",
    "end": "3758350"
  },
  {
    "text": "and what we want to do is\nschedule a subset of requests",
    "start": "3758350",
    "end": "3768420"
  },
  {
    "text": "with maximum weight. So previously, it was\njust all weights were 1, so maximum cardinality\nwas what we wanted.",
    "start": "3768420",
    "end": "3777150"
  },
  {
    "text": "But now we want to schedule\na subset of requests with maximum weight.",
    "start": "3777150",
    "end": "3783060"
  },
  {
    "text": "Someone give me an argument as\nto whether the greedy algorithm",
    "start": "3783060",
    "end": "3790470"
  },
  {
    "text": "earliest finish time first is\noptimal for this weighted case, or give me a counter example.",
    "start": "3790470",
    "end": "3798320"
  },
  {
    "text": "Yep, go ahead. AUDIENCE: Oh, well, you\nknow like your first example you have your first weight\nof the first interval,",
    "start": "3798320",
    "end": "3805378"
  },
  {
    "text": "it took the whole\ntime, [INAUDIBLE] would have three smaller ones? Well, if the weight of the\nfirst one was 20 and then--",
    "start": "3805378",
    "end": "3811862"
  },
  {
    "text": "SRINIVAS DEVADAS:\nExactly, exactly right. All right, I owe you one too. So here you go.",
    "start": "3811862",
    "end": "3818010"
  },
  {
    "text": "So it's a fairly\ntrivial example. All you do is w equals 1,\nw equals 1, w equals 3,",
    "start": "3818010",
    "end": "3831330"
  },
  {
    "text": "so there you go. So clearly, the\nearliest finish time would pick this one and then\nthis one, which is fine.",
    "start": "3831330",
    "end": "3837980"
  },
  {
    "text": "You get two of these,\nbut this was important. This is, I don't know,\nsleep party, 6046.",
    "start": "3837980",
    "end": "3844750"
  },
  {
    "text": "[LAUGHTER] So there you go. So the weight it is, we\nshould make that infinity.",
    "start": "3844750",
    "end": "3851155"
  },
  {
    "text": " Most important thing\nin the world at least",
    "start": "3851155",
    "end": "3857720"
  },
  {
    "text": "for the next six months. ",
    "start": "3857720",
    "end": "3863130"
  },
  {
    "text": "So how does this work now? ",
    "start": "3863130",
    "end": "3868640"
  },
  {
    "text": "So it turns out that\nthe greedy strategy, the template that I had, fails.",
    "start": "3868640",
    "end": "3877950"
  },
  {
    "text": "There's nothing that\nexists on this planet that, at least I know of, where\nyou can have a simple rule",
    "start": "3877950",
    "end": "3887520"
  },
  {
    "text": "and use that template to get the\noptimum solution, in this case,",
    "start": "3887520",
    "end": "3892900"
  },
  {
    "text": "maximum weight solution,\nfor every problem instance,",
    "start": "3892900",
    "end": "3897989"
  },
  {
    "text": "so that template just fails. ",
    "start": "3897989",
    "end": "3903730"
  },
  {
    "text": "What other programming\nparadigm do you think would be useful here? ",
    "start": "3903730",
    "end": "3909790"
  },
  {
    "text": "Yeah, go ahead. AUDIENCE: DP. SRINIVAS DEVADAS: DP, right. So do you want to take a stab\nat a potential DP solution here?",
    "start": "3909790",
    "end": "3918293"
  },
  {
    "text": "AUDIENCE: Yeah, so either\ninclude it in your [INAUDIBLE] or discard it and then continue\nwith set of other intervals.",
    "start": "3918293",
    "end": "3925480"
  },
  {
    "text": "SRINIVAS DEVADAS: Yeah, that's\na perfect divide and conquer. And then when you include\nit, what do you have to do?",
    "start": "3925480",
    "end": "3930819"
  },
  {
    "text": "AUDIENCE: Eliminate all\nconflicting intervals. SRINIVAS DEVADAS: Right,\nhow many subproblems do you think there are.",
    "start": "3930820",
    "end": "3936220"
  },
  {
    "text": "I want to make you own\nyour Frisbee, right? [LAUGHTER]",
    "start": "3936220",
    "end": "3942720"
  },
  {
    "text": "AUDIENCE: 2 to the power\nof the number of intervals",
    "start": "3942720",
    "end": "3950070"
  },
  {
    "text": "you have because-- SRINIVAS DEVADAS: Well,\nthat's a number of subsets that you have.",
    "start": "3950070",
    "end": "3955686"
  },
  {
    "text": "So you have n\nintervals, then you have two [INAUDIBLE] subsets. AUDIENCE: Yeah. SRINIVAS DEVADAS:\nBut remember, you",
    "start": "3955686",
    "end": "3961048"
  },
  {
    "text": "want to go-- you want to be\nsmarter than that, right? You want to be a little\nbit smarter than that.",
    "start": "3961048",
    "end": "3967940"
  },
  {
    "text": "So here, you get\na Frisbee anyway. [LAUGHTER] No, not anyway, here you go.",
    "start": "3967940",
    "end": "3974150"
  },
  {
    "text": "Right. So anybody else? So what I want to use\nis dynamic programming.",
    "start": "3974150",
    "end": "3981470"
  },
  {
    "text": "We've established that. I want to use\ndynamic programming. And the dynamic programming--\nyou have some experience with",
    "start": "3981470",
    "end": "3987100"
  },
  {
    "text": "that in 006-- the name of the\ngame is to figure out what",
    "start": "3987100",
    "end": "3992210"
  },
  {
    "text": "the subproblems are. The subproblems\nare kind of going to look like a\ncollection of requests.",
    "start": "3992210",
    "end": "3999880"
  },
  {
    "text": "I mean, there's no\ntwo things about it. They're going to be a\ncollection of requests,",
    "start": "3999880",
    "end": "4005260"
  },
  {
    "text": "and so the challenge here is\nnot to go to the 2 raised to n,",
    "start": "4005260",
    "end": "4010430"
  },
  {
    "text": "because 2 raised to n is\nbad if you want efficiency.",
    "start": "4010430",
    "end": "4015960"
  },
  {
    "text": "So we have to have a polynomial\nnumber of subproblems. So someone who hasn't\nanswered yet, go ahead.",
    "start": "4015960",
    "end": "4023160"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] so\n[INAUDIBLE] subset [INAUDIBLE]",
    "start": "4023160",
    "end": "4030920"
  },
  {
    "text": "So from interval i to\ninterval j [INAUDIBLE].",
    "start": "4030920",
    "end": "4036121"
  },
  {
    "text": "SRINIVAS DEVADAS:\nSo you're looking at every pair of i's and j's,\nand, well, not all of them",
    "start": "4036122",
    "end": "4042520"
  },
  {
    "text": "are going to be valid. There won't be intervals\nassociated with that, but that's a reasonable start.",
    "start": "4042520",
    "end": "4049280"
  },
  {
    "text": "Someone else, someone\nwho hasn't answered? Yeah, back there. AUDIENCE: You could\ngo the best term",
    "start": "4049280",
    "end": "4055894"
  },
  {
    "text": "to start to some even point,\nand so there'd n of those. SRINIVAS DEVADAS: Ah, best from\nthe start to any given point.",
    "start": "4055895",
    "end": "4062150"
  },
  {
    "text": "All right, well, you\ngot close, Michael. There you go.",
    "start": "4062150",
    "end": "4067180"
  },
  {
    "text": "You need to stand up. Ew, bad throw.",
    "start": "4067180",
    "end": "4072660"
  },
  {
    "text": "That's a bad throw. I've got to practice. OK, so as you can see\nwith dynamic programming,",
    "start": "4072660",
    "end": "4080800"
  },
  {
    "text": "the challenge is to figure\nout what the subproblems are. The fact of the\nmatter is that there's going to be many different\npossible algorithms that",
    "start": "4080800",
    "end": "4090895"
  },
  {
    "text": "are all DP for this\nweighted problem. There's at least two\ninteresting ones. We're going to do a simple one,\nwhich is based on the answer",
    "start": "4090895",
    "end": "4098350"
  },
  {
    "text": "that the gentleman\nhere just gave. But it turns out you can be\na little smarter than that,",
    "start": "4098350",
    "end": "4104549"
  },
  {
    "text": "and most likely you'll hear\nthe smarter way in the section, but let's do the simple\none because that's",
    "start": "4104550",
    "end": "4111200"
  },
  {
    "text": "all I have time here for. And the key is to\ndefine the subproblems,",
    "start": "4111200",
    "end": "4116568"
  },
  {
    "text": "and then once you do that,\nthe actual recursion ends up being a fairly straightforward\nand intuitive step.",
    "start": "4116569",
    "end": "4125380"
  },
  {
    "text": "So let's look at dynamic\nprogramming, one particular way",
    "start": "4125380",
    "end": "4136770"
  },
  {
    "text": "of solving this problem,\nusing the DP paradigm. So what I'm going to do is\ndefine subproblems R star,",
    "start": "4136770",
    "end": "4147149"
  },
  {
    "text": "so R is the total number\nof requests that we have, and the subproblems\nare going to correspond",
    "start": "4147149",
    "end": "4153370"
  },
  {
    "text": "to-- I'm going to request\nj belonging to R such",
    "start": "4153370",
    "end": "4159830"
  },
  {
    "text": "that-- oh, I'm sorry. This is R of x-- such that sj\nis greater than or equal to x.",
    "start": "4159830",
    "end": "4171130"
  },
  {
    "text": "So what I'm doing here\nis, given a particular x,",
    "start": "4171130",
    "end": "4177960"
  },
  {
    "text": "I can always shrink\nthe number of requests that I have based on this rule.",
    "start": "4177960",
    "end": "4185339"
  },
  {
    "text": "And then you might\nask, what is x? And now you can apply the\nsame subsetting property",
    "start": "4185340",
    "end": "4199409"
  },
  {
    "text": "by choosing the x's to be\nthe finishing times of all",
    "start": "4199410",
    "end": "4207030"
  },
  {
    "text": "of the other requests. All right, so x equals f of i.",
    "start": "4207030",
    "end": "4212210"
  },
  {
    "text": "So what this means is-- then\nI put f of i over here--",
    "start": "4212210",
    "end": "4217680"
  },
  {
    "text": "it means all of\nthe requests that come after the i-th request\nfinished our part of R of fi.",
    "start": "4217680",
    "end": "4226940"
  },
  {
    "text": "So R of fi would simply be\nrequests later than f of i.",
    "start": "4226940",
    "end": "4243350"
  },
  {
    "text": "And there's something subtle\nhere that I want to point out, which is R of fi is\nnot the set of requests",
    "start": "4243350",
    "end": "4251790"
  },
  {
    "text": "that are compatible\nwith the i-th request. It's not exactly that.",
    "start": "4251790",
    "end": "4257810"
  },
  {
    "text": "It's the set of requests\nthat are later than f of i. So keep that in mind\nbecause what happens here",
    "start": "4257810",
    "end": "4264800"
  },
  {
    "text": "is we're going to solve\nthis problem step by step. We're going to construct the\ndynamic programming solution",
    "start": "4264800",
    "end": "4273990"
  },
  {
    "text": "essentially by\npicking a request,",
    "start": "4273990",
    "end": "4279410"
  },
  {
    "text": "just like in the greedy\ncase, and then taking the request that\ncomes after that. So we're going to\npick an early request,",
    "start": "4279410",
    "end": "4286690"
  },
  {
    "text": "and then we're going\nto subset the solution, pick the next one just like\nwe did with the greedy. And so the subproblems\nthat we will actually",
    "start": "4286690",
    "end": "4295110"
  },
  {
    "text": "solve potentially bottom up\nif we are doing recursion are going to correspond to a\nset of requests that come later",
    "start": "4295110",
    "end": "4303290"
  },
  {
    "text": "than the particular subset\nthat we're looking at,",
    "start": "4303290",
    "end": "4308620"
  },
  {
    "text": "which is defined by a\nparticular interval. So requests that are later\nthan f of i, not necessarily",
    "start": "4308620",
    "end": "4315036"
  },
  {
    "text": "all of the requests\nthat are compatible with the i-th request. And so if you do that, then\nthe number of subproblems",
    "start": "4315036",
    "end": "4324230"
  },
  {
    "text": "here are small n, where n\nis the number of requests.",
    "start": "4324230",
    "end": "4330680"
  },
  {
    "text": "So if n is the\nnumber of requests",
    "start": "4330680",
    "end": "4336640"
  },
  {
    "text": "in the original problem,\nthe number of sub problems",
    "start": "4336640",
    "end": "4347520"
  },
  {
    "text": "equals n because all I do\nis plug-in an appropriate i, find f of i for it, and\ngenerate the R of f of i",
    "start": "4347520",
    "end": "4355110"
  },
  {
    "text": "for each of those. So there's going to be\nn of those subproblems. And we're going to solve\neach subproblem once and then",
    "start": "4355110",
    "end": "4371406"
  },
  {
    "text": "memoize.  And so the work\nthat we have to do",
    "start": "4371406",
    "end": "4379180"
  },
  {
    "text": "is the basic rule corresponding\nto the complexity of a DP, which is number of\nsubproblems times the time",
    "start": "4379180",
    "end": "4396800"
  },
  {
    "text": "to solve each subproblem,\nor a single subproblem,",
    "start": "4396800",
    "end": "4404860"
  },
  {
    "text": "and this assumes\norder 1 for lookups.",
    "start": "4404860",
    "end": "4413540"
  },
  {
    "text": "So you can think of\nthe recursive calls as being order 1\nbecause your assuming",
    "start": "4413540",
    "end": "4424260"
  },
  {
    "text": "you're doing memoization. So I haven't really told\nyou anything here that you",
    "start": "4424260",
    "end": "4430449"
  },
  {
    "text": "haven't seen in 006 and likely\napplied a bunch of times.",
    "start": "4430450",
    "end": "4436150"
  },
  {
    "text": "Over here, we've just defined\nwhat our subproblems are for our particular\nDP, and we argued",
    "start": "4436150",
    "end": "4444680"
  },
  {
    "text": "that the number of\nsubproblems that are associated with\nthis particular choice of subproblems\ncorresponds to n if you",
    "start": "4444680",
    "end": "4451560"
  },
  {
    "text": "have n requests in the\noriginal problem instance that you've given. So the last thing that we have\nto do here to solve our DP",
    "start": "4451560",
    "end": "4461310"
  },
  {
    "text": "is, of course, to\nwrite our recursion and to convince ourselves\nthat this actually all works out, and let's do that.",
    "start": "4461310",
    "end": "4468950"
  },
  {
    "start": "4468950",
    "end": "4475290"
  },
  {
    "text": "And so what we have\nhere is our DP guessing.",
    "start": "4475290",
    "end": "4481700"
  },
  {
    "text": " And we're going to\ntry each request",
    "start": "4481700",
    "end": "4491530"
  },
  {
    "text": "i as a plausible first request,\nand so that's where this works.",
    "start": "4491530",
    "end": "4503059"
  },
  {
    "text": "You might be thinking,\nboy, I mean, this R of fi looks a little strange. Why doesn't it include\nall of the requests that",
    "start": "4503060",
    "end": "4510230"
  },
  {
    "text": "are compatible with\nthe i-th request? I mean, I'm somehow shrinking\nmy subsequent problem size",
    "start": "4510230",
    "end": "4519590"
  },
  {
    "text": "if I'm ignoring\nsome requests that are earlier that really\nshould be part of--",
    "start": "4519590",
    "end": "4525380"
  },
  {
    "text": "or are part of the\ncompatible set, but they're not part\nof the R of fi set. And so some of you\nmay be thinking that,",
    "start": "4525380",
    "end": "4532230"
  },
  {
    "text": "well, the reason this\nis going to work out is because we are\ngoing to construct",
    "start": "4532230",
    "end": "4538160"
  },
  {
    "text": "our solution, as I said before,\nfrom the beginning to the end. So we're going to\ntry each request",
    "start": "4538160",
    "end": "4545330"
  },
  {
    "text": "as a plausible first request. So even though this request\nmight be in our chart",
    "start": "4545330",
    "end": "4551840"
  },
  {
    "text": "all the way to the right,\nit might have a huge weight, and so I'm going to have to try\nthat out as my first selection.",
    "start": "4551840",
    "end": "4561360"
  },
  {
    "text": "And when I try that out\nas my first selection, then the definition\nof my subproblem says that this will work.",
    "start": "4561360",
    "end": "4567245"
  },
  {
    "text": "I only have to look\nat the request that comes later than that because\nthe ones that came the earlier, I've tried them out too.",
    "start": "4567246",
    "end": "4574219"
  },
  {
    "text": "So that's something that you\nneed to keep in mind in order to argue correctness\nof this recursion",
    "start": "4574220",
    "end": "4581390"
  },
  {
    "text": "that I'm going to write out now. And so the recursion, and I have\nopt R, what is the first thing",
    "start": "4581390",
    "end": "4591269"
  },
  {
    "text": "that I'm going to have\non the right-hand side of this recursive formulation?",
    "start": "4591270",
    "end": "4596950"
  },
  {
    "text": "What mathematical construct\nam I going to have to do here? And you see something like\nguessing and seeing something",
    "start": "4596950",
    "end": "4603800"
  },
  {
    "text": "like try each request as\na possible first, what mathematical construct am I\ngoing to have to put up here?",
    "start": "4603800",
    "end": "4610010"
  },
  {
    "text": "AUDIENCE: Max. SRINIVAS DEVADAS:\nMax, who said max? No one wants to\ntake credit for max?",
    "start": "4610010",
    "end": "4617910"
  },
  {
    "text": "It's max, right? So I'm going to have max 1\nless than equal to i less than",
    "start": "4617910",
    "end": "4626480"
  },
  {
    "text": "or equal to n. And I'm going to-- does\nsomeone want to tell me what",
    "start": "4626480",
    "end": "4632770"
  },
  {
    "text": "the rest of this looks like? ",
    "start": "4632770",
    "end": "4637780"
  },
  {
    "text": "Someone else? A couple Frisbees left, guys. [LAUGHTER] What does the rest\nof this look like?",
    "start": "4637780",
    "end": "4644106"
  },
  {
    "text": " Yep? AUDIENCE: 1 plus\nthe optimal R f of--",
    "start": "4644106",
    "end": "4651323"
  },
  {
    "text": "SRINIVAS DEVADAS:\nNot 1, just what kind of problem do we have here?",
    "start": "4651323",
    "end": "4656670"
  },
  {
    "text": "It's not 1 anymore. AUDIENCE: Oh-- SRINIVAS DEVADAS: The weight. AUDIENCE: Right. SRINIVAS DEVADAS: The\nweight, yep, so Wi",
    "start": "4656670",
    "end": "4664170"
  },
  {
    "text": "plus the optimal R fi.",
    "start": "4664170",
    "end": "4670620"
  },
  {
    "text": " OK, so we got Wi plus\noptimum of R of fi.",
    "start": "4670620",
    "end": "4680350"
  },
  {
    "text": "And you said \"1,\" close enough. If it was 1, you'd use greedy.",
    "start": "4680350",
    "end": "4685580"
  },
  {
    "text": "And so that's why we\nwere in that Wi mode, and we end up getting this here. So that's it. You try every request\nas a possible first.",
    "start": "4685580",
    "end": "4693114"
  },
  {
    "text": "Obviously, you pick\nthat request so it's part of your weight in terms of\nthe weight for your solution.",
    "start": "4693114",
    "end": "4700579"
  },
  {
    "text": "When you do that, because\nit was the first request, you get to prune\nthe set of requests",
    "start": "4700580",
    "end": "4705640"
  },
  {
    "text": "that come later corresponding\nto R of fi that you see here.",
    "start": "4705640",
    "end": "4711290"
  },
  {
    "text": "And then you go\nahead and simply find the optimum for a\nsmaller problem,",
    "start": "4711290",
    "end": "4718920"
  },
  {
    "text": "clearly has fewer requests. And as long as you maximize\nover the set of guesses",
    "start": "4718920",
    "end": "4725920"
  },
  {
    "text": "that you've taken, and there's\nn guesses up at the top level. Obviously in the\nlower levels, you're",
    "start": "4725920",
    "end": "4731670"
  },
  {
    "text": "going to have fewer requests\nin your R of fi's, and you'll have fewer durations of the max,\nbut it's n at the top level.",
    "start": "4731670",
    "end": "4743270"
  },
  {
    "text": "So one last question,\nwhat is the complexity",
    "start": "4743270",
    "end": "4748900"
  },
  {
    "text": "of what we see here? AUDIENCE: n square. SRINIVAS DEVADAS: n square, and\nthe reason it's n square is you",
    "start": "4748900",
    "end": "4756599"
  },
  {
    "text": "simply use-- you can be\nreally mechanical about this-- you say, if this was order 1,\nI'm doing a max over n items.",
    "start": "4756600",
    "end": "4765440"
  },
  {
    "text": "And therefore, that's order n\ntime to solve one subproblem. And since I have n subproblems,\nI get n times order in,",
    "start": "4765440",
    "end": "4776650"
  },
  {
    "text": "which is order n squared. So the last thing I'll do-- and\nI just have one more minute--",
    "start": "4776650",
    "end": "4785310"
  },
  {
    "text": "is give you a sense of a small\nchange to interval scheduling",
    "start": "4785310",
    "end": "4792740"
  },
  {
    "text": "that puts us in that\nNP complete domain. So so far, we've just\ndone two problems.",
    "start": "4792740",
    "end": "4799360"
  },
  {
    "text": "There's many others. We did interval scheduling. There was greedy linear time. Weighted interval\nscheduling is order n",
    "start": "4799360",
    "end": "4805880"
  },
  {
    "text": "squared according to this\nparticular DP formulation. It turns out there's a\nsmarter DP formulation that",
    "start": "4805880",
    "end": "4813620"
  },
  {
    "text": "runs an order n log\nn time that you'll hear about in section on Friday,\nbut it's still polynomial time.",
    "start": "4813620",
    "end": "4822500"
  },
  {
    "text": "Let's make one reasonable\nchange to this, which is to say that we may\nhave multiple resources,",
    "start": "4822500",
    "end": "4831520"
  },
  {
    "text": "and they may be non identical. So it turns out everything that\nwe've done kind of extrapolates",
    "start": "4831520",
    "end": "4838140"
  },
  {
    "text": "very well to identical\nmachines, even though there's",
    "start": "4838140",
    "end": "4843580"
  },
  {
    "text": "many identical machines. But if you have\nnon-identical machines, what that means is you have\nresources or machines",
    "start": "4843580",
    "end": "4853350"
  },
  {
    "text": "that have different types. So maybe your\nmachines are T1 to Tm.",
    "start": "4853350",
    "end": "4862190"
  },
  {
    "text": "And it's essentially\na situation where you say, this\nparticular task can only",
    "start": "4862190",
    "end": "4869660"
  },
  {
    "text": "be run on this machine\nor this other machines, some subset of machines. So you can still have a\nweight of 1 for all requests,",
    "start": "4869660",
    "end": "4882670"
  },
  {
    "text": "but you have something like\nA of i belonging subset of T",
    "start": "4882670",
    "end": "4890670"
  },
  {
    "text": "is a set of machines\nthat i runs on.",
    "start": "4890670",
    "end": "4896730"
  },
  {
    "text": " OK, that's it.",
    "start": "4896730",
    "end": "4902020"
  },
  {
    "text": "That's the change we make. Q of i is going to be\nspecified for each of the i's.",
    "start": "4902020",
    "end": "4909350"
  },
  {
    "text": "So you could even\nhave two machines. And you could say, here's\na set of requests that could run on both machines.",
    "start": "4909350",
    "end": "4915210"
  },
  {
    "text": "Here's a set that only\nruns on the first machine, and here's another set that\nruns on the second machine.",
    "start": "4915210",
    "end": "4920630"
  },
  {
    "text": "That's a simple example\nof this generalization. If you do this, this problem has\nbeen shown to be NP complete.",
    "start": "4920630",
    "end": "4933280"
  },
  {
    "text": "And by that I mean, NP complete\nproblems are decision problems. And so you say, can some\nspecific number k less",
    "start": "4933280",
    "end": "4944100"
  },
  {
    "text": "than and requests be scheduled. ",
    "start": "4944100",
    "end": "4951250"
  },
  {
    "text": "This decision problem\nis NP complete. And so what happens when you\nhave NP complete problems?",
    "start": "4951250",
    "end": "4957960"
  },
  {
    "text": "Well, we're going to have a\nlittle module in the class that deals with intractability. We're going to\nlook at cases where",
    "start": "4957960",
    "end": "4964290"
  },
  {
    "text": "we could apply\napproximation algorithms, and maybe in the case of\nthe optimization problem,",
    "start": "4964290",
    "end": "4970610"
  },
  {
    "text": "if the optimum for\nthis is k star, I will say that we can\nget within 10% of k star.",
    "start": "4970610",
    "end": "4977800"
  },
  {
    "text": "The other way is to just\ndeal with intractability by hoping that your\nexponential time",
    "start": "4977800",
    "end": "4983410"
  },
  {
    "text": "algorithm runs in a\nreasonable amount of time for common cases.",
    "start": "4983410",
    "end": "4988790"
  },
  {
    "text": "So in the worst case, you might\nend up taking a long time. But you just sort of\nback off after an hour",
    "start": "4988790",
    "end": "4995400"
  },
  {
    "text": "and take what you get from\nthe operative algorithm. But in many cases, the algorithm\nmight actually complete,",
    "start": "4995400",
    "end": "5003840"
  },
  {
    "text": "and they give you\nthe optimum solution. So done here. Make sure to sign up for\na recitation section.",
    "start": "5003840",
    "end": "5011490"
  },
  {
    "text": "And see you guys next time. ",
    "start": "5011490",
    "end": "5014116"
  }
]