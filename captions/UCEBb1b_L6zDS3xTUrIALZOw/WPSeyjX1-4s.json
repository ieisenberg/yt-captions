[
  {
    "start": "0",
    "end": "147000"
  },
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "7029"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "7030",
    "end": "13990"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13990",
    "end": "31860"
  },
  {
    "text": "ERIC GRIMSON: Ladies\nand gentlemen, I'd like to get started.",
    "start": "31860",
    "end": "37329"
  },
  {
    "text": "My name's Eric Grimson. I have the privilege of\nserving as MIT'S chancellor for academic advancement, you\ncan go look up what that means,",
    "start": "37330",
    "end": "44469"
  },
  {
    "text": "and like John I'm a\nformer head of course six. This term, with\nAna and John, I'm",
    "start": "44470",
    "end": "49860"
  },
  {
    "text": "going to be splitting the\nlectures, so I'm up to date. OK last time Ana introduced\nthe first of the compound data",
    "start": "49860",
    "end": "58110"
  },
  {
    "text": "types, tuples and lists. She showed lots of ways\nof manipulating them,",
    "start": "58110",
    "end": "63699"
  },
  {
    "text": "lots of built in things for\nmanipulating those structures. And the key difference\nbetween the two of them was that tuples were immutable,\nmeaning you could not",
    "start": "63700",
    "end": "71909"
  },
  {
    "text": "change them, lists\nwere mutable, they could be changed, or mutated. And that led to both some nice\npower and some opportunities",
    "start": "71910",
    "end": "79320"
  },
  {
    "text": "for challenges. And, in particular, she showed\nyou things like aliasing, where you could have two names\npointing to the same list",
    "start": "79320",
    "end": "85740"
  },
  {
    "text": "structure, and\nbecause of that, you could change the\ncontents of one, it would change the appearance\nof the contents of the other,",
    "start": "85740",
    "end": "92939"
  },
  {
    "text": "and that leads to\nsome nice challenges. So the side effects\nof mutability are one of the things you're\ngoing to see, both as a plus",
    "start": "92940",
    "end": "98795"
  },
  {
    "text": "and minus, as we go\nthrough the course. Today we're going to take\na different direction",
    "start": "98795",
    "end": "105507"
  },
  {
    "text": "for a little while, we're\ngoing to talk about recursion. It Is a powerful\nand wonderful tool for solving\ncomputational problems.",
    "start": "105507",
    "end": "112950"
  },
  {
    "text": "We're then going to look at\nanother kind of compound data structure, a dictionary,\nwhich is also mutable.",
    "start": "112950",
    "end": "119210"
  },
  {
    "text": "And then we're going to put the\ntwo pieces together and show how together they actually\ngive you a lot of power for solving some really neat\nproblems very effectively.",
    "start": "119210",
    "end": "128500"
  },
  {
    "text": "But I want to start\nwith recursion. Perhaps one of the most\nmysterious, at least according",
    "start": "128500",
    "end": "133950"
  },
  {
    "text": "to programmer's, concepts in\ncomputer science, one that leads to lots of really\nbad computer science jokes, actually all computer\nscience jokes are bad,",
    "start": "133950",
    "end": "141090"
  },
  {
    "text": "but these are particularly bad. So let's start with the obvious\nquestion, what is recursion?",
    "start": "141090",
    "end": "147390"
  },
  {
    "start": "147000",
    "end": "533000"
  },
  {
    "text": "If you go to the ultimate\nsource of knowledge, Wikipedia, you get something that\nsays, in essence, recursion",
    "start": "147390",
    "end": "154349"
  },
  {
    "text": "is the process of repeating\nitems in a self-similar way.",
    "start": "154350",
    "end": "159710"
  },
  {
    "text": "Well that's really\nhelpful, right? But we're going to see that\nidea because recursion, as we're going to\nsee in a second,",
    "start": "159710",
    "end": "165336"
  },
  {
    "text": "is the idea of taking a problem\nand reducing it to a smaller version of the same\nproblem, and using that idea",
    "start": "165336",
    "end": "173310"
  },
  {
    "text": "to actually tackle a bunch of\nreally interesting problems. But recursion gets used\nin a lot of places. So it's this idea of\nusing, or repeating,",
    "start": "173310",
    "end": "179849"
  },
  {
    "text": "the idea multiple times. So wouldn't it be great if your\n3D printer printed 3D printers?",
    "start": "179850",
    "end": "185700"
  },
  {
    "text": "And you could just keep\ndoing that all the way along. Or one that's a\nlittle more common,",
    "start": "185700",
    "end": "190740"
  },
  {
    "text": "it's actually got\na wonderful name, it's called mise en abyme,\nin art, sometimes referred to as the Droste\neffect, pictures",
    "start": "190740",
    "end": "197142"
  },
  {
    "text": "that have inside them a\npicture of the picture, which has inside them a picture of the\npicture, and you get the idea.",
    "start": "197142",
    "end": "202290"
  },
  {
    "text": "And of course, one\nof the things you want to think about\nin recursion is not to have it go on infinitely.",
    "start": "202290",
    "end": "207382"
  },
  {
    "text": "And yes there are even light\nbulb jokes about recursion, if you can't read\nit, it says, how many twists does it take to\nscrew in a light bulb?",
    "start": "207382",
    "end": "214440"
  },
  {
    "text": "And it says, if it's already\nscrewed in, the answer is 0. Otherwise, twist it once, ask\nme again, add 1 to my answer.",
    "start": "214440",
    "end": "222780"
  },
  {
    "text": "And that's actually a nice\ndescription of recursion. So let's look at\nit more seriously.",
    "start": "222780",
    "end": "228150"
  },
  {
    "text": "What is recursion? I want to describe it both\nabstractly, or algorithmically,",
    "start": "228150",
    "end": "235480"
  },
  {
    "text": "and semantically or, if you\nlike, in terms of programming. Abstractly, this is a\ngreat instance of something",
    "start": "235480",
    "end": "242670"
  },
  {
    "text": "often called divide-and-conquer,\nor sometimes called decrease-and-conquer.",
    "start": "242670",
    "end": "247720"
  },
  {
    "text": "And the idea of\nrecursion is, I want to take a problem I'm trying\nto solve and say, how could I",
    "start": "247720",
    "end": "253080"
  },
  {
    "text": "reduce it to a simpler\nversion of the same problem, plus some things\nI know how to do?",
    "start": "253080",
    "end": "259194"
  },
  {
    "text": "And then that\nsimpler version, I'm going to reduce\nit again and keep doing that until I get\ndown to a simple case",
    "start": "259194",
    "end": "264957"
  },
  {
    "text": "that I can solve directly. That is how we're going to\nthink about designing solutions to problems.",
    "start": "264957",
    "end": "271710"
  },
  {
    "text": "Semantically, this is typically\ngoing to lead to the case where a program, a\ndefinition of function,",
    "start": "271710",
    "end": "278220"
  },
  {
    "text": "will refer to\nitself in its body. It will call itself\ninside its body.",
    "start": "278220",
    "end": "284719"
  },
  {
    "text": "Now, if you remember your\nhigh school geometry teacher, she probably would wrap your\nknuckles, which you're not allowed to do, because\nin things like geometry",
    "start": "284719",
    "end": "290982"
  },
  {
    "text": "you can't define something\nin terms of itself, right? That's not allowed. In recursion, this is OK.",
    "start": "290982",
    "end": "296460"
  },
  {
    "text": "Our definition of a procedure\ncan in its body call itself, so long as I have what\nI call a base case,",
    "start": "296460",
    "end": "303840"
  },
  {
    "text": "a way of stopping that\nunwinding of the problems, when I get to something\nI can solve directly.",
    "start": "303840",
    "end": "310645"
  },
  {
    "text": "And so what we're going to do\nis avoid infinite recursion by ensuring that we have\nat least one or more base cases that are easy to solve.",
    "start": "310645",
    "end": "317069"
  },
  {
    "text": "And then the basic\nidea is I just want to solve the same\nproblem on some simpler input with the idea\nof using that solution",
    "start": "317070",
    "end": "323610"
  },
  {
    "text": "to solve the larger problem. OK, let's look at an\nexample, and to set the stage I'm going to go back\nto something you've been doing,",
    "start": "323610",
    "end": "330450"
  },
  {
    "text": "iterative algorithms. For loops, while\nloops, they naturally lead to what we would\ncall iterative algorithms,",
    "start": "330450",
    "end": "336480"
  },
  {
    "text": "and these algorithms\ncan be described as being captured by a\nset of state variables,",
    "start": "336480",
    "end": "342509"
  },
  {
    "text": "meaning one or more variables\nthat tell us exactly the state of the computation.",
    "start": "342510",
    "end": "347890"
  },
  {
    "text": "That's a lot of words,\nlet's look at an example. I know it's trivial,\nbut bear with me. Suppose I want to do\ninteger multiplication,",
    "start": "347890",
    "end": "354419"
  },
  {
    "text": "multiply two integers\ntogether, and all I have available\nto me is addition. So a times b is the same as\nadding a to itself b times.",
    "start": "354420",
    "end": "363620"
  },
  {
    "text": "If I'm thinking about\nthis iteratively, I could capture this computation\nwith two state variables.",
    "start": "363620",
    "end": "370080"
  },
  {
    "text": "One we'd just call\nthe iteration number, and it would be\nsomething, for example,",
    "start": "370080",
    "end": "375420"
  },
  {
    "text": "that starts at b, and each time\nthrough the loop reduces 1. One. And it will keep doing that\nuntil I've counted down",
    "start": "375420",
    "end": "382080"
  },
  {
    "text": "b times, and I get down to 0. And at the same\ntime, I would have some value of the\ncomputation, I might call it",
    "start": "382080",
    "end": "388110"
  },
  {
    "text": "result, which starts at 0,\nfirst time through adds an a, next time through\nadds an a, and it just",
    "start": "388110",
    "end": "394319"
  },
  {
    "text": "keeps track of how\nmany things have I added up, until I get done. And yeah, I know you\ncould just do mult,",
    "start": "394320",
    "end": "400305"
  },
  {
    "text": "but this is trying\nto get this idea of, how would I do\nthis iteratively. So I might start off with i,\nsaying there are b things still",
    "start": "400305",
    "end": "410160"
  },
  {
    "text": "to add, and the result is 1. The first time through the\nloop, I add an a, reduce i by 1.",
    "start": "410160",
    "end": "415319"
  },
  {
    "text": "Next time through the\nloop, I add in another a, reduce i by 1, and\nyou get the idea. I just walk down it\nuntil, eventually, I got",
    "start": "415320",
    "end": "421979"
  },
  {
    "text": "to the end of this computation. So we could write code\nfor this, and, actually,",
    "start": "421980",
    "end": "427690"
  },
  {
    "text": "it should be pretty\nstraightforward. There it is. Going to call it mult_iter,\ntakes in two arguments a and b,",
    "start": "427690",
    "end": "435254"
  },
  {
    "text": "and I'm going to capture\nexactly that process. So notice what I\ndo, I set up result internally as just\na little variable",
    "start": "435254",
    "end": "440949"
  },
  {
    "text": "I'm going to use to\naccumulate things. And then, there\nis the iteration, as long as b is greater\nthan 0 what do I do?",
    "start": "440950",
    "end": "449320"
  },
  {
    "text": "Add a to result, store\nit away, reduce b by 1, and I'll keep doing\nthat until b gets",
    "start": "449320",
    "end": "455470"
  },
  {
    "text": "down to being equal\nto 0, in which case I just return the result.\nOK, simple solution.",
    "start": "455470",
    "end": "463610"
  },
  {
    "text": "Now, let's think about\nthis a different way. A times b is just adding\na to itself b times,",
    "start": "463610",
    "end": "471220"
  },
  {
    "text": "and that's the same as a\nplus adding a to a itself",
    "start": "471220",
    "end": "477920"
  },
  {
    "text": "b minus 1 times. OK, that sounds\nlike leisure to me, that sounds like just\nplaying with words.",
    "start": "477920",
    "end": "484820"
  },
  {
    "text": "But it's really important,\nbecause what is this? Ah, that's just a\ntimes b minus 1,",
    "start": "484820",
    "end": "492870"
  },
  {
    "text": "by the definition\nof the top point. And I know you're\ntotally impressed, but this is actually really\ncool, because what have I done?",
    "start": "492870",
    "end": "500420"
  },
  {
    "text": "I've taken one problem,\nthis one up here, and I've reduced it to a simpler\nversion of the same problem,",
    "start": "500420",
    "end": "507870"
  },
  {
    "text": "plus some things\nI know how to do. And how would I solve this? Same trick, that's a\ntimes a times b minus 2,",
    "start": "507870",
    "end": "516110"
  },
  {
    "text": "I would just unwrap\nit one more time, and I would just keep\ndoing that until I get down to something I can solve\ndirectly, a base case.",
    "start": "516110",
    "end": "523469"
  },
  {
    "text": "And that's easy, when b equal\nto 1, the answer is just a. Or I could do when b is equal\nto 0 the answer is just 0.",
    "start": "523470",
    "end": "531730"
  },
  {
    "text": "And there's code\nto capture that. Different form, wonderful\ncompact description,",
    "start": "531730",
    "end": "537510"
  },
  {
    "start": "533000",
    "end": "1753000"
  },
  {
    "text": "what does it say? It says, if I'm at the base\ncase, if b is equal to 1,",
    "start": "537510",
    "end": "543470"
  },
  {
    "text": "the answer is just a. Otherwise, I'm going to solve\nthe same problem with a smaller",
    "start": "543470",
    "end": "549840"
  },
  {
    "text": "version and add it to a\nand return that result. And that's nice, crisp\ncharacterization of a problem.",
    "start": "549840",
    "end": "558970"
  },
  {
    "text": "Recursive definition that\nreduces a problem to a simpler version of the same problem.",
    "start": "558970",
    "end": "564430"
  },
  {
    "text": "OK, let's look at\nanother example. Classic problem in recursion\nis to compute factorial,",
    "start": "564430",
    "end": "570720"
  },
  {
    "text": "right? n factorial,\nor n bang if you like, n exclamation point\nis n times n minus 1, all the way down to 1.",
    "start": "570720",
    "end": "576550"
  },
  {
    "text": "So it's the product of\nall the integers from 1 up to n assuming n is\na positive integer.",
    "start": "576550",
    "end": "581900"
  },
  {
    "text": "So we can ask the\nsame question if I wanted to solve this recursively\nwhat would the base case be?",
    "start": "581900",
    "end": "587690"
  },
  {
    "text": "Well, when n is equal\nto 1, it's just 1. In the recursive case,\nwill n times n minus 1",
    "start": "587690",
    "end": "595269"
  },
  {
    "text": "all the way down to 1,\nthat's the same as n times n minus 1 factorial.",
    "start": "595270",
    "end": "602000"
  },
  {
    "text": "So I can easily write\nout the base case, and I've got a nice recursive\nsolution to this problem.",
    "start": "602000",
    "end": "608790"
  },
  {
    "text": " OK, if you're like me and\nthis is the first time you've",
    "start": "608790",
    "end": "614839"
  },
  {
    "text": "seen it, it feels like\nI've taken your head and twisted it\nabout 180 degrees. I'm going to take it another\n180 degrees because you might",
    "start": "614839",
    "end": "620962"
  },
  {
    "text": "be saying, well,\nwait a minute, how do you know it really stops. How do you know it really\nterminates the computation?",
    "start": "620962",
    "end": "627970"
  },
  {
    "text": "So let's look at it. There is my definition for\nfact, short for factorial.",
    "start": "627970",
    "end": "633589"
  },
  {
    "text": "Fact of 1 is, if n is\nequal to 1 return 1, otherwise return n\ntimes fact of n minus 1.",
    "start": "633590",
    "end": "639900"
  },
  {
    "text": "And let's use the tools\nthat Ana talked about, in terms of an\nenvironment at a scope, and think about\nwhat happens here.",
    "start": "639900",
    "end": "646640"
  },
  {
    "text": "So when I read that in or I\nevaluate that in Python, it creates a definition that binds\nthe name fact to some code,",
    "start": "646640",
    "end": "653880"
  },
  {
    "text": "just all of that stuff\nover here plus the name for the formal parameter, hasn't\ndone anything with it yet.",
    "start": "653880",
    "end": "660050"
  },
  {
    "text": "And then I'm going to\nevaluate print a fact of 4. Print needs a value, so it has\nto get the value of fact of 4,",
    "start": "660050",
    "end": "667696"
  },
  {
    "text": "and we know what that does. It looks up fact, there it\nis, it's procedure definition.",
    "start": "667696",
    "end": "673860"
  },
  {
    "text": "So it creates a new\nframe, a new environment, it calls that procedure,\nand inside that frame",
    "start": "673860",
    "end": "679290"
  },
  {
    "text": "the formal parameter for fact\nis bound to the value passed in.",
    "start": "679290",
    "end": "684310"
  },
  {
    "text": "So n is bound to 4. That frame is scoped\nby this global frame",
    "start": "684310",
    "end": "689320"
  },
  {
    "text": "meaning it's going to inherit\nthings in the global frame. And what does it do? It says, inside of this frame\nevaluate the body of fact.",
    "start": "689320",
    "end": "698420"
  },
  {
    "text": "OK, so it says as n equal to 1? Nope, it's not, it's 4.",
    "start": "698420",
    "end": "703770"
  },
  {
    "text": "So in that case, go to the\nelse statement and says, oh, return n times fact of n\nand n as 4, fact of n minus 1",
    "start": "703770",
    "end": "711000"
  },
  {
    "text": "says I need to return\n4 times fact of 3.",
    "start": "711000",
    "end": "716530"
  },
  {
    "text": "4 is easy, multiplication\nis easy, fact of 3, ah yes, I look up fact.",
    "start": "716530",
    "end": "722080"
  },
  {
    "text": "Now I'm in this frame,\nI don't see fact there, but I go up to that frame. There's the definition\nfor fact, and we're",
    "start": "722080",
    "end": "727630"
  },
  {
    "text": "going to do the rest of\nthis a little more quickly, what does that do? It creates a new\nframe called by fact.",
    "start": "727630",
    "end": "733600"
  },
  {
    "text": "And the argument passed\nin for n is n minus 1, that value, right there, of 3.",
    "start": "733600",
    "end": "739420"
  },
  {
    "text": "So 3 is now bound to n. Same game, evaluate the\nbody is n equal to 1?",
    "start": "739420",
    "end": "745207"
  },
  {
    "text": "No, so in that case, I'm going\nto go to the return statement, it says return 3\ntimes fact of 2.",
    "start": "745207",
    "end": "751500"
  },
  {
    "text": "And notice it's only\nlooking at this value of n because that's the\nframe in which I'm in. It never sees that value of n.",
    "start": "751500",
    "end": "759480"
  },
  {
    "text": "OK, aren't you glad I\ndidn't do fact of 400? We've only got two more to\ngo, but you get the idea. Same thing, I need\nto get fact of 2",
    "start": "759480",
    "end": "765769"
  },
  {
    "text": "is going to call fact\nagain with n bound to 2. Relative that evaluates the\nbody and is not yet equal to 1.",
    "start": "765770",
    "end": "771990"
  },
  {
    "text": "That says I'm going\nto the else clause and return 2 times fact of 1. I call fact again,\nnow with n bound to 1,",
    "start": "771990",
    "end": "779650"
  },
  {
    "text": "and, fortunately, now\nthat clause is true, and it says return 1.",
    "start": "779650",
    "end": "787440"
  },
  {
    "text": "Whoops, sorry, before I do,\nso there's the base case. And it may seem apparent to you,\nbut this is important, right?",
    "start": "787440",
    "end": "793100"
  },
  {
    "text": "I'm unwinding this\ntill I get to something that can stop the computation. Now I'm simply going to\ngather the computation up,",
    "start": "793100",
    "end": "799190"
  },
  {
    "text": "because it says return 1. Who asked for it? Well that call to fact of 1. So that reduces to\nreturn 2 times 1.",
    "start": "799190",
    "end": "807350"
  },
  {
    "text": "And who called for that? Fact of 2. That reduces to return a 3 times\n2, which reduces to 4 times",
    "start": "807350",
    "end": "814220"
  },
  {
    "text": "6, which reduces\nto printing out 24. ",
    "start": "814220",
    "end": "819279"
  },
  {
    "text": "So it unwinds it down to\na base case and it stops. A couple of observations, notice\nhow each recursive call creates",
    "start": "819280",
    "end": "827670"
  },
  {
    "text": "its own frame, and\nas a consequence, there's no confusion about\nwhich value of n I'm using.",
    "start": "827670",
    "end": "834140"
  },
  {
    "text": "Also notice, in the other\nframes, n was not changed. We did not mutate it. So we're literally\ncreating a local scope",
    "start": "834140",
    "end": "840020"
  },
  {
    "text": "for that recursive call,\nwhich is exactly what we want. Also notice how there was\na sense of flow of control",
    "start": "840020",
    "end": "847580"
  },
  {
    "text": "in computing fact of something,\nthat reduces to returning n times fact of n minus 1, and\nthat creates a new scope.",
    "start": "847580",
    "end": "855450"
  },
  {
    "text": "And that will simply\nkeep unwinding until I get to something\nthat can return a value and then I gather all\nthose frames back up.",
    "start": "855450",
    "end": "861850"
  },
  {
    "text": "So there's a natural\nflow of control here. But most importantly, there's no\nconfusion about which variable",
    "start": "861850",
    "end": "867390"
  },
  {
    "text": "I'm using when I'm\nlooking for a value of n. All right, because this\nis often a place where",
    "start": "867390",
    "end": "872959"
  },
  {
    "text": "things get a little confusing,\nI want to do one more example. But let me first\nshow you side by side",
    "start": "872959",
    "end": "878320"
  },
  {
    "text": "the two different\nversions of factorial. Actually, I have lied slightly,\nwe didn't show this one earlier but there's factorial if I\nwanted to do it iteratively.",
    "start": "878320",
    "end": "885331"
  },
  {
    "text": "I'd set up some\ninitial variable to 1, and then I'd just\nrun through a loop. For example, from 1 up to just\nbelow n minus 1, or 1 up to n,",
    "start": "885331",
    "end": "895180"
  },
  {
    "text": "multiplying it and putting\nit back into return product.",
    "start": "895180",
    "end": "900510"
  },
  {
    "text": "Which one do you like more? You can't say neither\nyou have to pick one. Show of hands, how many\nof you like this one?",
    "start": "900510",
    "end": "908100"
  },
  {
    "text": "Some hesitant ones, how\nmany prefer this one? Yeah, that's my view.",
    "start": "908100",
    "end": "913850"
  },
  {
    "text": "I'm biased, but I really\nlike the recursive one. It is crisper to look at,\nyou can see what it's doing.",
    "start": "913850",
    "end": "919610"
  },
  {
    "text": "I'm reducing this\nproblem to a simpler version of that problem. Pick your own\nversion but I would",
    "start": "919610",
    "end": "925520"
  },
  {
    "text": "argue that the\nrecursive version is more intuitive to understand. From a programmer's\nperspective, it's",
    "start": "925520",
    "end": "931070"
  },
  {
    "text": "actually often more\nefficient to write, because I don't have to think\nabout interior variables.",
    "start": "931070",
    "end": "936140"
  },
  {
    "text": "Depending on the machine,\nit may not be as efficient when you call it because\nin the recursive version",
    "start": "936140",
    "end": "941960"
  },
  {
    "text": "I've got it set up,\nthat set of frames. And some versions\nof these languages are actually very\nefficient about it,",
    "start": "941960",
    "end": "947401"
  },
  {
    "text": "some of them a little less so. But given the speed\nof computers today, who cares as long as it actually\njust does the computation.",
    "start": "947401",
    "end": "954790"
  },
  {
    "text": "Right, one more example,\nhow do we really know our recursive code works? Well, we just did a\nsimulation but let's",
    "start": "954790",
    "end": "961390"
  },
  {
    "text": "look at it one more way. The iterative version,\nwhat can I say about it?",
    "start": "961390",
    "end": "967330"
  },
  {
    "text": "Well, I know it's\ngoing to terminate because b is initially\npositive, assuming I gave it an appropriate value.",
    "start": "967330",
    "end": "973740"
  },
  {
    "text": "It decreases by 1 every\ntime around this loop, at some point it has to get\nless than 1, it's going to stop.",
    "start": "973740",
    "end": "979860"
  },
  {
    "text": "So I can conclude it's\nalways going to terminate. What about the\nrecursive version?",
    "start": "979860",
    "end": "985700"
  },
  {
    "text": "Well, if I call it with\nb equal to one, I'm done. If I call it with\nb greater than one,",
    "start": "985700",
    "end": "993160"
  },
  {
    "text": "again it's going to reduce it\nby one on the recursive call, which means on each recursive\ncall it's going to reduce and eventually it\ngets down to a place,",
    "start": "993160",
    "end": "999977"
  },
  {
    "text": "assuming I gave it a\npositive integer, where b is equal to one. So it'll stop, which just good.",
    "start": "999977",
    "end": "1007040"
  },
  {
    "text": "What we just did was\nwe used the great tool from math, second best\ndepartment at MIT.",
    "start": "1007040",
    "end": "1014464"
  },
  {
    "text": "Wow, I didn't even get any\nhisses on that one, John, all right, and\nI'm now in trouble with the head of\nthe math department.",
    "start": "1014464",
    "end": "1021149"
  },
  {
    "text": "So now that I got\nyour attention, and yes, all computer\nscience jokes are bad, and mine are really\nbad, but I'm tenured.",
    "start": "1021150",
    "end": "1026640"
  },
  {
    "text": "You cannot do a\ndamn thing about it. Let's look at mathematical\ninduction which turns out",
    "start": "1026640",
    "end": "1032680"
  },
  {
    "text": "to be a tool that lets\nus think about programs in a really nice way. You haven't seen\nthis, here's the idea",
    "start": "1032680",
    "end": "1038410"
  },
  {
    "text": "of mathematical induction. If I want to prove\na statement, and we refer to it as being\nindexed on the integers.",
    "start": "1038410",
    "end": "1044420"
  },
  {
    "text": "In other words, it's some\nmathematical statement that runs over integers. If I want to prove it's true for\nall values of those integers,",
    "start": "1044420",
    "end": "1052660"
  },
  {
    "text": "mathematically I'd do\nit by simply proving it's true for the smallest\nvalue of n typically n is equal to 0 or 1, and then\nI do an interesting thing.",
    "start": "1052660",
    "end": "1061310"
  },
  {
    "text": "I say I need to prove that\nif it's true for an arbitrary value of n, I'm just going\nto prove that it's also then",
    "start": "1061310",
    "end": "1067310"
  },
  {
    "text": "true for n plus 1. And if I can do those\ntwo things I can then conclude for an infinite\nnumber of values of n",
    "start": "1067310",
    "end": "1074390"
  },
  {
    "text": "it's always true. Then we'll relate it back\nto programming in a second, but let me show you a\nsimple example of this, one",
    "start": "1074390",
    "end": "1080351"
  },
  {
    "text": "that you may have seen. If I had the integers from 0 up\nto n, or even from 1 up to n,",
    "start": "1080351",
    "end": "1085690"
  },
  {
    "text": "I claim that's the same as\nn times n plus 1 over 2. So 1, 2, 3, that's 6, right.",
    "start": "1085690",
    "end": "1092220"
  },
  {
    "text": "And that's exactly\nright, 3 times 4, which is divided by 2,\nwhich gives me out 6.",
    "start": "1092220",
    "end": "1097740"
  },
  {
    "text": "How would I prove this? Well, by induction? I need to do the simple\ncases if n is equal to 0,",
    "start": "1097740",
    "end": "1105180"
  },
  {
    "text": "well then this side is just 0. And that's 0 times 1,\nwhich is 0 divided by true. So 0 equals 0, it's true.",
    "start": "1105180",
    "end": "1112210"
  },
  {
    "text": "Now the inductive step. I'm going to assume\nit's true for some k, I should have picked\nn, but for some k,",
    "start": "1112210",
    "end": "1118530"
  },
  {
    "text": "and then what I need to show\nis it's true for k plus 1. Well, there's the\nleft hand side,",
    "start": "1118530",
    "end": "1125200"
  },
  {
    "text": "and I want to show that\nthis is equal to that. And I'm going do it by using\nexactly this recursive idea,",
    "start": "1125200",
    "end": "1131640"
  },
  {
    "text": "because what do I know, I know\nthat this sum, in here, I'm assuming is true.",
    "start": "1131640",
    "end": "1138100"
  },
  {
    "text": "And so that says that the left\nhand side, the first portion of it, is just k\ntimes k plus 1 over 2,",
    "start": "1138100",
    "end": "1144000"
  },
  {
    "text": "that's the definition of the\nthing I'm assuming is true. To that I'm going\nto add k plus 1.",
    "start": "1144000",
    "end": "1150151"
  },
  {
    "text": "Well, you can do\nthe algebra, right? That's k plus 1\nall times k over 2 plus 1, which is\nk plus 2 over 2.",
    "start": "1150151",
    "end": "1158250"
  },
  {
    "text": "Oh cool, it's exactly that. Having done that, I\ncan now conclude this",
    "start": "1158250",
    "end": "1163920"
  },
  {
    "text": "is true for all values of n. What does it have to\ndo with programming?",
    "start": "1163920",
    "end": "1170996"
  },
  {
    "text": "That's exactly what\nwe're doing when we think about recursive code, right? We're saying, show that\nit's true for the base case,",
    "start": "1170996",
    "end": "1178299"
  },
  {
    "text": "and then what I'm\nessentially assuming is that, if it works for\nvalues smaller than b,",
    "start": "1178300",
    "end": "1184120"
  },
  {
    "text": "then does the code return\nthe right answer for b? And the answer is,\nabsolutely it does, and I'm using induction to\ndeduce that, in fact, my code",
    "start": "1184120",
    "end": "1191740"
  },
  {
    "text": "does the right thing. Why am I torturing\nyou with this?",
    "start": "1191740",
    "end": "1197179"
  },
  {
    "text": "Because this is the way I want\nyou to think about recursion. When I'm going to\nbreak a problem down into a smaller version\nof the same problem,",
    "start": "1197180",
    "end": "1203990"
  },
  {
    "text": "I can assume that the smaller\nversion gives the answer. All I have to do is make sure\nthat what I combined together",
    "start": "1203990",
    "end": "1209450"
  },
  {
    "text": "gives me out the right result. OK, you may be\nwondering what I'm",
    "start": "1209450",
    "end": "1215950"
  },
  {
    "text": "doing with these wonderful\nhigh tech toys down here. I want to show you another\nexample of recursion. So far we've seen simple things\nthat have just had one base",
    "start": "1215950",
    "end": "1223150"
  },
  {
    "text": "case, and this is a\nmythical story called The towers of Hanoi and\nthis story, as I heard it, is there's a temporal\nsomewhere in Hanoi",
    "start": "1223150",
    "end": "1230530"
  },
  {
    "text": "with three tall spikes and 64\njewel-encrusted golden disks",
    "start": "1230530",
    "end": "1235630"
  },
  {
    "text": "all of a different size. They all started out on\none spike with the property that they were ordered from\nsmallest down to largest.",
    "start": "1235630",
    "end": "1243570"
  },
  {
    "text": "And there are priests in this\ntemple who are moving the disks one at a time, one per\nsecond, and their goal",
    "start": "1243570",
    "end": "1248580"
  },
  {
    "text": "is to move the entire stack\nfrom one spike to another spike. And when they do\nnirvana is achieved",
    "start": "1248580",
    "end": "1255760"
  },
  {
    "text": "and we all get a\nreally great life. We'll talk separately\nabout how long is this going to take because\nthere's one trick to it.",
    "start": "1255760",
    "end": "1262040"
  },
  {
    "text": "They can never cover a smaller\ndisk with a larger disk as they're doing it, so\nthey've got a third disk",
    "start": "1262040",
    "end": "1267380"
  },
  {
    "text": "as a temporary thing. And I want to show you\nhow to solve this problem because you're going to write\ncode with my help in a second,",
    "start": "1267380",
    "end": "1273380"
  },
  {
    "text": "or I'm going to write\ncode with your help in a second to solve it. So let's look at it,\nso watch carefully, moving a disk of size one,\nwell that's pretty easy, right?",
    "start": "1273380",
    "end": "1281960"
  },
  {
    "text": "Moving a disk of\nsize two, we'll just put this one on the spare\none while you move it over so you don't cover it up. That's easy.",
    "start": "1281960",
    "end": "1288650"
  },
  {
    "text": "Moving a disk of\nsize three, you've got be a little more careful,\nyou can't cover up a smaller one with a larger one, so\nyou have to really think",
    "start": "1288650",
    "end": "1294649"
  },
  {
    "text": "about where you're putting it. It would help with these things\ndidn't juggle and there you go, you got it done.",
    "start": "1294650",
    "end": "1300066"
  },
  {
    "text": "All right, you're watching? You've got to do four. To do four, again, you've got to\nbe really careful not to cover things up as you do this.",
    "start": "1300066",
    "end": "1306169"
  },
  {
    "text": "You want to get the bottom\none eventually exposed, and so are you going to\npull that one over there. If you do the\npattern really well, you won't notice if I make\na serious mistake as I'm",
    "start": "1306170",
    "end": "1313185"
  },
  {
    "text": "doing this, which I just did. But I'm going to\nrecover from that and do it that way to\nput this one over here,",
    "start": "1313185",
    "end": "1318230"
  },
  {
    "text": "and that one goes there, and\nif I did this in Harvard Square I could make money. There you go, right? ",
    "start": "1318230",
    "end": "1325919"
  },
  {
    "text": "OK, got the solution? See how to solve it? Could you write code for this?",
    "start": "1325920",
    "end": "1332600"
  },
  {
    "text": "Eh, maybe not. That's on the\nquiz, thanks, John, don't tell them\non the quiz, damn.",
    "start": "1332600",
    "end": "1339200"
  },
  {
    "text": "All right, I want to claim\nthough that in fact there's a beautiful recursive solution.",
    "start": "1339200",
    "end": "1346569"
  },
  {
    "text": "And here's the way to\nthink about it recursively. I want to move a\ntower of size n,",
    "start": "1346569",
    "end": "1351740"
  },
  {
    "text": "I'm going to assume I\ncan move smaller towers and then it's really easy. What do I do, I take a\nstack of size n minus 1,",
    "start": "1351740",
    "end": "1357860"
  },
  {
    "text": "I move it onto the spare one,\nI move the bottom one over, and then I move a\nstack of size n minus 1",
    "start": "1357860",
    "end": "1364090"
  },
  {
    "text": "to there, beautiful,\nrecursive solution. And how do I move\nthe smaller stack?",
    "start": "1364090",
    "end": "1369240"
  },
  {
    "text": "Just the same way,\nI just unwind it, simple, and, in fact, the\ncode follows exactly that.",
    "start": "1369240",
    "end": "1378850"
  },
  {
    "text": "OK, I do a little\n[INAUDIBLE] domain up here to try and get your\nattention, but notice by doing that what did I do?",
    "start": "1378850",
    "end": "1384881"
  },
  {
    "text": "I asked you to think\nabout it recursively, the recursive solution,\nwhen you see it, is in fact very straightforward,\nand there's the code.",
    "start": "1384881",
    "end": "1393809"
  },
  {
    "text": "Dead trivial, well,\nthat trivial is unfair, but it's very simple. Right? I simply write something,\nso let me describe it,",
    "start": "1393810",
    "end": "1400049"
  },
  {
    "text": "I need to say how big\nof tower am I moving and I'm going to label the\nthree stacks a from, a to,",
    "start": "1400050",
    "end": "1405580"
  },
  {
    "text": "and a spare. I have a little procedure\nthat just prints out the move for me, and\nthen what's the solution?",
    "start": "1405580",
    "end": "1412650"
  },
  {
    "text": "If it's just a stack of size\none, just print the move, take it to from--\nfrom from to to.",
    "start": "1412650",
    "end": "1418020"
  },
  {
    "text": "Otherwise, move a\ntower of size n minus 1 from the from spot to\nthe spare spot, then move",
    "start": "1418020",
    "end": "1426660"
  },
  {
    "text": "what's left of tower\nsize one from to two, and then take that\nthing are stuck on spare",
    "start": "1426660",
    "end": "1431850"
  },
  {
    "text": "and move it over to\ntwo, and I'm done. In that code that we handed\nout, you'll see this code,",
    "start": "1431850",
    "end": "1439285"
  },
  {
    "text": "you can run it. I'm not going to print\nit out because, if I did, you are just going\nto say, OK, it looks like it does the\nright kind of thing.",
    "start": "1439285",
    "end": "1444970"
  },
  {
    "text": "Look at the code, nice\nand easy, and that's what we like you to do when\nyou're given a problem.",
    "start": "1444970",
    "end": "1450320"
  },
  {
    "text": "We asked you to think\nabout recursively. How do I solve\nthis with a smaller version of the same problem?",
    "start": "1450320",
    "end": "1455920"
  },
  {
    "text": "And then how do I use that\nto build the larger solution? This case is a little different.",
    "start": "1455920",
    "end": "1461390"
  },
  {
    "text": "You could argue that\nthis is not really a recursive call here, it's\njust moving the bottom one, I could have done that directly.",
    "start": "1461390",
    "end": "1466870"
  },
  {
    "text": "But I've got two recursive\ncalls in the body here. I have to move a\nsmaller stack twice.",
    "start": "1466870",
    "end": "1473710"
  },
  {
    "text": "We're going to come back\nto that in a little bit. Let me show you one other\nexample of recursion that",
    "start": "1473710",
    "end": "1480720"
  },
  {
    "text": "runs a little bit differently. In this case it's going to\nhave multiple base cases and this is another\nvery old problem,",
    "start": "1480720",
    "end": "1486630"
  },
  {
    "text": "it's called the\nFibonacci numbers. It's based on something\nfrom several centuries ago when a gentleman,\nnamed Leonardo of Pisa,",
    "start": "1486630",
    "end": "1492600"
  },
  {
    "text": "also known as Fibonacci,\nasked the following challenge. He said, I'm going to put\na newborn pair of rabbits,",
    "start": "1492600",
    "end": "1498570"
  },
  {
    "text": "one male and one female, into an\nenclosure, a pan of some sort. And the rabbits have the\nfollowing properties,",
    "start": "1498570",
    "end": "1505290"
  },
  {
    "text": "they mate at age one month, so\nthey take a month to mature. After a one month\ngestation period,",
    "start": "1505290",
    "end": "1511650"
  },
  {
    "text": "they produce another pair of\nrabbits, a male and a female, and he says I'm going to assume\nthat the rabbits never die.",
    "start": "1511650",
    "end": "1519030"
  },
  {
    "text": "So each month mature females are\ngoing to produce another pair. And his question was, how\nmany female rabbits are there",
    "start": "1519030",
    "end": "1524670"
  },
  {
    "text": "at the end of a year, or\ntwo years, or three years? ",
    "start": "1524670",
    "end": "1530040"
  },
  {
    "text": "The idea is, I start off\nwith two immature rabbits, after one month\nthey've matured, which",
    "start": "1530040",
    "end": "1536269"
  },
  {
    "text": "means after another month, they\nwill have produced a new pair.",
    "start": "1536270",
    "end": "1541700"
  },
  {
    "text": "After another month, that mature\npair has produced another pair, and the immature\npair has matured.",
    "start": "1541700",
    "end": "1547940"
  },
  {
    "text": "Which means, after\nanother month, those two mature pairs are\ngoing to produce offspring,",
    "start": "1547940",
    "end": "1553770"
  },
  {
    "text": "and that immature\npair has matured. And you get the idea,\nand after several months,",
    "start": "1553770",
    "end": "1559799"
  },
  {
    "text": "you get to Australia.  You can also see this is going\nto be interesting to think",
    "start": "1559800",
    "end": "1565550"
  },
  {
    "text": "about how do you compute this,\nbut what I want you to see is the recursive solution to it. So how could we capture this?",
    "start": "1565550",
    "end": "1571910"
  },
  {
    "text": "Well here's another way\nof thinking about it, after the first\nmonth, and I know we're going to do\nthis funny thing,",
    "start": "1571910",
    "end": "1576998"
  },
  {
    "text": "we're going to index it\n0, so call it month 0. There is 1 female\nwhich is immature.",
    "start": "1576998",
    "end": "1582039"
  },
  {
    "text": "After the second\nmonth, that female is mature and now pregnant which\nmeans after the third month it",
    "start": "1582040",
    "end": "1588870"
  },
  {
    "text": "has produced an offspring. And more generally,\nthat the n-th month,",
    "start": "1588870",
    "end": "1594740"
  },
  {
    "text": "after we get past the first\nfew cases, what do we have? Any female that was\nthere two months ago",
    "start": "1594740",
    "end": "1601470"
  },
  {
    "text": "has produced an offspring. Because it's taken at\nleast one month to mature, if it hasn't\nalready been mature,",
    "start": "1601470",
    "end": "1607585"
  },
  {
    "text": "and then it's going to\nproduce an offspring. And any female that\nwas around last month",
    "start": "1607585",
    "end": "1612809"
  },
  {
    "text": "is still around because\nthey never die off. So this is a little different. This is now the number\nof females at month n",
    "start": "1612810",
    "end": "1620070"
  },
  {
    "text": "is the number of females\nT month n minus 1, plus the number of females\nand month n minus 2.",
    "start": "1620070",
    "end": "1625600"
  },
  {
    "text": "So two recursive calls, but\nwith different arguments.",
    "start": "1625600",
    "end": "1630890"
  },
  {
    "text": "Different from towers of Hanoi,\nwhere there were two recursive calls, but with the\nsame sized problem.",
    "start": "1630890",
    "end": "1636200"
  },
  {
    "text": " So now I need two\nbase cases, one",
    "start": "1636200",
    "end": "1642960"
  },
  {
    "text": "for when n is equal to 0,\none for when n is equal to 1. And then I've got\nthat recursive case,",
    "start": "1642960",
    "end": "1649809"
  },
  {
    "text": "so there's a nice\nlittle piece of code. Fibonacci, I'm going to assume\nx is an integer greater than",
    "start": "1649810",
    "end": "1656620"
  },
  {
    "text": "or equal to 0. I'm going to return\nFibonacci of x. And you can see now it says,\nif either x is equal to 0",
    "start": "1656620",
    "end": "1662860"
  },
  {
    "text": "or x is equal to 1\nI'm going to return 1, otherwise, reduce it to two\nsimpler versions of the problem",
    "start": "1662860",
    "end": "1670809"
  },
  {
    "text": "but with different\narguments, and I add them up. OK, and if we go look at this,\nwe can actually run this,",
    "start": "1670810",
    "end": "1679630"
  },
  {
    "text": "if I can find my code. Which is right there,\nand I'm just going to,",
    "start": "1679630",
    "end": "1689799"
  },
  {
    "text": "so we can, for example,\ncheck it by saying fib of 0. ",
    "start": "1689800",
    "end": "1701076"
  },
  {
    "text": "I just hit a bug\nwhich I don't see. ",
    "start": "1701076",
    "end": "1707044"
  },
  {
    "text": "Let me try it again. ",
    "start": "1707044",
    "end": "1712580"
  },
  {
    "text": "I'll try it one more\ntime with fib of 0. ",
    "start": "1712580",
    "end": "1721450"
  },
  {
    "text": "Darn, it's wrong, let me try it.",
    "start": "1721450",
    "end": "1729187"
  },
  {
    "text": "I've got two different\nversions of fib in here, that's what\nI've got going on. So let me do it again,\nlet's do fib of 1. There we go, fib of 2 which\nis 2, fib of 3 just three,",
    "start": "1729187",
    "end": "1739260"
  },
  {
    "text": "and fib of 4 which should\nadd the previous two, which gives me 5. There we go. Sorry about that, I\nhad two versions of fib",
    "start": "1739260",
    "end": "1745080"
  },
  {
    "text": "in my file, which is\nwhy it complained at me. And which is why\nyou should always read the error instructions\nbecause it tells you",
    "start": "1745080",
    "end": "1751340"
  },
  {
    "text": "what you did wrong. Let's go on and look at one\nmore example of doing recursion,",
    "start": "1751340",
    "end": "1757327"
  },
  {
    "start": "1753000",
    "end": "2053000"
  },
  {
    "text": "and we're going to\ndo dictionaries, and then we're going to\npull it all together. So far we've been doing\nrecursion on numerical things,",
    "start": "1757327",
    "end": "1764940"
  },
  {
    "text": "we can do it on\nnon-numerical things. So a nice way of\nthinking about this is, how would I tell if a string\nof characters is a palindrome?",
    "start": "1764940",
    "end": "1771350"
  },
  {
    "text": "Meaning it reads the same\nbackwards and forwards. Probably the most\nfamous palindrome is attributed to Napoleon\n\"Able was I ere I saw Elba.\"",
    "start": "1771350",
    "end": "1779940"
  },
  {
    "text": "Given that Napoleon\nwas French, I really doubt he said \"Able\nwas I ere I saw Elba,\" but it's a great palindrome.",
    "start": "1779940",
    "end": "1785990"
  },
  {
    "text": "Or another one attributed\nto Anne Michaels \"Are we not drawn we few\ndrawn onward to a new era,\"",
    "start": "1785990",
    "end": "1792929"
  },
  {
    "text": "reads the same\nbackwards and forwards. It's fun to think about how\ndo you create the palindromes.",
    "start": "1792930",
    "end": "1798560"
  },
  {
    "text": "I want to write\ncode to solve this. Again, I want to think\nabout it recursively, so here's what I'm going to do.",
    "start": "1798560",
    "end": "1805230"
  },
  {
    "text": "I'm first going to take\na string of characters, reduce them all to\nlowercase, and strip out",
    "start": "1805230",
    "end": "1810929"
  },
  {
    "text": "spaces and punctuation. I just want the characters. And once I got\nthat, I want to say,",
    "start": "1810930",
    "end": "1817110"
  },
  {
    "text": "is that string, that\nlist of characters or that collection of characters\nas I should say, a palindrome?",
    "start": "1817110",
    "end": "1822880"
  },
  {
    "text": "And I'm going to think\nabout it recursively, and that's actually pretty easy. If it's either 0 or 1\nlong, it's a palindrome.",
    "start": "1822880",
    "end": "1832320"
  },
  {
    "text": "Otherwise you could think\nabout having an index at each end of this thing\nand sort of counting into the middle,\nbut it's much easier",
    "start": "1832320",
    "end": "1838320"
  },
  {
    "text": "to say take the two at the\nend, if they're the same, then check to see what's left\nin the middle is a palindrome,",
    "start": "1838320",
    "end": "1844890"
  },
  {
    "text": "and if those two properties\nare true, I'm done. And notice what I just did I\nnicely reduced a bigger problem",
    "start": "1844890",
    "end": "1851940"
  },
  {
    "text": "to a slightly smaller problem. It's exactly what I want to do. OK?",
    "start": "1851940",
    "end": "1857190"
  },
  {
    "text": "So it says to check is\nthis, I'm going to reduce it to just the string\nof characters, and then I'm going to check if\nthat's a palindrome by pulling",
    "start": "1857190",
    "end": "1864621"
  },
  {
    "text": "those two off and checking\nto see they're the same, and then checking to see if the\nmiddle is itself a palindrome.",
    "start": "1864621",
    "end": "1870971"
  },
  {
    "text": " How would I write it?",
    "start": "1870971",
    "end": "1876044"
  },
  {
    "text": "I'm going to create a procedure\nup here, isPalindrome. I'm going to have inside of it\ntwo internal procedures that",
    "start": "1876044",
    "end": "1882220"
  },
  {
    "text": "do the work for me. The first one is simply\ngoing to reduce this to all lowercase with no spaces.",
    "start": "1882220",
    "end": "1888220"
  },
  {
    "text": "And notice what I can do because\ns is a string of characters. I can use the built in string\nmethod lower, so there's",
    "start": "1888220",
    "end": "1895690"
  },
  {
    "text": "that dot notation, s.lower. It says. apply the\nmethod lower to a string. I need an open and close\nper end to actually call",
    "start": "1895690",
    "end": "1903040"
  },
  {
    "text": "that procedure, and\nthat will mutate s to just be all lowercase.",
    "start": "1903040",
    "end": "1908254"
  },
  {
    "text": "And then I'm going\nto run a little loop, I'll set up answer or ans\nto be an empty string, and then, for everything\ninside that mutated string,",
    "start": "1908254",
    "end": "1916060"
  },
  {
    "text": "I'll simply say, if it's inside\nthis string, if it's a letter,",
    "start": "1916060",
    "end": "1921570"
  },
  {
    "text": "add it into answer. If it's a space or comma or\nsomething else I'll ignore it, and when I'm done\njust return answer,",
    "start": "1921570",
    "end": "1927900"
  },
  {
    "text": "strips it down to lowercase. And then I'm going to pass that\ninto isPal which simply says,",
    "start": "1927900",
    "end": "1934809"
  },
  {
    "text": "if this is either\n0 or 1 long, it's a palindrome, returned true.",
    "start": "1934810",
    "end": "1939970"
  },
  {
    "text": "Otherwise, check to see that\nthe first and last element of the string are\nthe same, notice",
    "start": "1939970",
    "end": "1946630"
  },
  {
    "text": "the indexing to get\ninto the last element, and similarly just\nslice into the string, ignoring the first and\nlast element, and ask",
    "start": "1946630",
    "end": "1954130"
  },
  {
    "text": "is that a palindrome. And then just call it,\nand that will do it.",
    "start": "1954130",
    "end": "1960111"
  },
  {
    "text": "And again there's a nice example\nof that in the code I'm not going to run it, I'll let\nyou just go look at it, but it will actually pull\nout something that checks,",
    "start": "1960111",
    "end": "1966276"
  },
  {
    "text": "is this a palindrome. Notice again, what\nI'm doing here.",
    "start": "1966276",
    "end": "1971410"
  },
  {
    "text": "I'm doing divide-and-conquer. I'm taking a problem reducing\nit, I keep saying this, to a simpler version\nof the same problem.",
    "start": "1971410",
    "end": "1977700"
  },
  {
    "text": "Keep unwinding it\ntill I get down to something I can\nsolve directly, my base case and I'm done.",
    "start": "1977700",
    "end": "1983320"
  },
  {
    "text": "And that's really\nthe heart of thinking about recursive\nsolutions to problems. I would hope that one of\nthe things I remember,",
    "start": "1983320",
    "end": "1990040"
  },
  {
    "text": "besides my really\nlousy patter up here, is the idea of Towers of\nHanoi, because to me it's",
    "start": "1990040",
    "end": "1995140"
  },
  {
    "text": "one of the nicest\nexamples of a problem that would be hard to\nsolve iteratively,",
    "start": "1995140",
    "end": "2000180"
  },
  {
    "text": "but when you see the\nrecursive solution is pretty straightforward. Keep that in mind as you\nthink about doing recursion.",
    "start": "2000180",
    "end": "2008009"
  },
  {
    "text": "OK, let's switch\ngears, and let's talk very briefly about\nanother kind of data type called a dictionary.",
    "start": "2008010",
    "end": "2014677"
  },
  {
    "text": "And the idea of a\ndictionary I'm going to motivate with\na simple example. There's a quiz coming\nup on Thursday.",
    "start": "2014677",
    "end": "2020580"
  },
  {
    "text": "I know you don't\nwant to hear that, but there is, which means we're\ngoing to be recording grades. And so imagine I wanted to\nbuild a little database just",
    "start": "2020580",
    "end": "2026580"
  },
  {
    "text": "to keep track of\ngrades of students. So one of the ways\nI could do it, I could create a list with\nthe names of the students,",
    "start": "2026580",
    "end": "2033130"
  },
  {
    "text": "I could create another\nlist with their grades, and a third list with the\nactual subject or course",
    "start": "2033130",
    "end": "2038649"
  },
  {
    "text": "from which they got that great. I keep a separate list\nfor each one of them, keep them of the same\nlength, and in essence,",
    "start": "2038650",
    "end": "2045860"
  },
  {
    "text": "what I'm doing here is\nI'm storing information at the same index in each list.",
    "start": "2045860",
    "end": "2053750"
  },
  {
    "start": "2053000",
    "end": "2145000"
  },
  {
    "text": "So Ana, who's going to have to\ntake the class again, gets a B, John, who's created the class,\ngets an A plus, Sorry Ana,",
    "start": "2053750",
    "end": "2060750"
  },
  {
    "text": "John's had a longer time at it. All right, bad jokes\naside, what I'm doing is I can imagine\njust creating lists.",
    "start": "2060750",
    "end": "2066319"
  },
  {
    "text": "I could create lists of\nlists, but a simple way is to do lists where\nbasically at each index",
    "start": "2066320",
    "end": "2071360"
  },
  {
    "text": "I've got associated information. It's a simple way\nto deal with it.",
    "start": "2071360",
    "end": "2077100"
  },
  {
    "text": "Getting a grade out takes\na little bit of work because if I want to\nget the grade associated with a particular\nstudent, what would I do?",
    "start": "2077100",
    "end": "2084299"
  },
  {
    "text": "I would go into the name list\nand use the method index, which you've seen before, again\nnotice the dot notation",
    "start": "2084300",
    "end": "2090860"
  },
  {
    "text": "it says, this is a list,\nuse the index method, call it on student, and\nwhatever the value of student",
    "start": "2090860",
    "end": "2096949"
  },
  {
    "text": "is, it will find\nthat in the list, return the index at\nthat point, and then I can use that to go in and\nget the grade in the course",
    "start": "2096949",
    "end": "2104690"
  },
  {
    "text": "and return something out. Simple way to do it but\na little ugly, right,",
    "start": "2104690",
    "end": "2111029"
  },
  {
    "text": "because among other\nthings, I've got things stored in different\nplaces in the list. I've got to think about if\nI'm going to add something",
    "start": "2111029",
    "end": "2117140"
  },
  {
    "text": "to the list I've got to put them\nin the same spot in the list. I've got to remember to\nalways index using integers",
    "start": "2117140",
    "end": "2122720"
  },
  {
    "text": "which is what we know how to\ndo with lists, at least so far.",
    "start": "2122720",
    "end": "2127890"
  },
  {
    "text": "It would be nice if I had\na better way to do it, and that's exactly\nwhat a dictionary is going to provide for me.",
    "start": "2127890",
    "end": "2133630"
  },
  {
    "text": "So rather than\nindexing on integers I'd like to index directly\non the item of interest.",
    "start": "2133630",
    "end": "2138790"
  },
  {
    "text": "I'd like to say\nwhere's Ana's record and find that in\none data structure.",
    "start": "2138790",
    "end": "2143990"
  },
  {
    "text": "And so, whereas a list\nis indexed by integers, and has elements associated\nwith it, a dictionary is going",
    "start": "2143990",
    "end": "2150880"
  },
  {
    "start": "2145000",
    "end": "2512000"
  },
  {
    "text": "to combine a key, or if you\nlike, a name of some sort, with an actual value.",
    "start": "2150880",
    "end": "2157200"
  },
  {
    "text": "And we're going to\nindex just by the name or the label as we go into it.",
    "start": "2157200",
    "end": "2162559"
  },
  {
    "text": "So let me show\nyou some examples. First of all, to create a\ndictionary I use curly braces,",
    "start": "2162560",
    "end": "2167750"
  },
  {
    "text": "open closed curly brace,\nso an empty dictionary would be simply that call. If I want to create\nan actual dictionary,",
    "start": "2167750",
    "end": "2173900"
  },
  {
    "text": "before I insert\nthings into it, I use a little bit of\na funky notation. It is a key or a label,\na colon, and then",
    "start": "2173900",
    "end": "2181970"
  },
  {
    "text": "a value, in this\ncase the string Ana and the string b, followed\nby a comma which separates it",
    "start": "2181970",
    "end": "2188210"
  },
  {
    "text": "from the next pairing\nof a key and a label, or a key and a value, and so on.",
    "start": "2188210",
    "end": "2196080"
  },
  {
    "text": "So if I do this what it\ndoes in my dictionary is it creates pairings of\nthose labels with the values",
    "start": "2196080",
    "end": "2204140"
  },
  {
    "text": "I associated with them. OK, these are pretty\nsimple, but in fact, there's",
    "start": "2204140",
    "end": "2210867"
  },
  {
    "text": "lots of nice things\nwe can do with it. So once we've got them indexing\nnow is similar to a list but not done by a number,\nit's done by value.",
    "start": "2210867",
    "end": "2218120"
  },
  {
    "text": "So if that's my key, I can\nsay, what's John's grade, notice the call, it's grades,\nwhich is in my dictionary,",
    "start": "2218120",
    "end": "2225230"
  },
  {
    "text": "open close square brackets,\nwith the label John. And what it does, it goes in and\nfinds that in the dictionary,",
    "start": "2225230",
    "end": "2231620"
  },
  {
    "text": "returns the value\nassociated with it. If I ask for something\nnot in the dictionary, it's going to give\nme a key error.",
    "start": "2231620",
    "end": "2239380"
  },
  {
    "text": "Other things we can\ndo with dictionaries, we can add entries just\nlike we would do with lists.",
    "start": "2239380",
    "end": "2247010"
  },
  {
    "text": "Grades as a dictionary, in open\nand closed square brackets, I put in a new\nlabel and a value,",
    "start": "2247010",
    "end": "2254980"
  },
  {
    "text": "and that adds that\nto the dictionary. I can test if something's in\nthe dictionary by simply saying,",
    "start": "2254980",
    "end": "2261780"
  },
  {
    "text": "is this label in\ngrades, and it simply checks all of the labels or\nthe keys for the dictionary",
    "start": "2261780",
    "end": "2269069"
  },
  {
    "text": "to see if it's there, and\nif it's not returns false. I can remove entries, del,\nsomething we've seen before,",
    "start": "2269070",
    "end": "2276880"
  },
  {
    "text": "a very generic thing. It will delete something,\nand in this case, it says, in the\ndictionary grades, find the entry associated\nwith that key, sorry, Ana,",
    "start": "2276880",
    "end": "2285640"
  },
  {
    "text": "you're about to be\nflushed, remove it. She's only getting a b in\nthe class and she teaches it.",
    "start": "2285640",
    "end": "2291810"
  },
  {
    "text": "We've got to do something\nabout this, right? So I can add things,\nI can delete things,",
    "start": "2291810",
    "end": "2297020"
  },
  {
    "text": "I can test if things are there. Let me show you a\ncouple of other things about dictionaries.",
    "start": "2297020",
    "end": "2302880"
  },
  {
    "text": "I can ask for all of the\nkeys in the dictionary. Notice the format, there is\nthat dot notation, grades",
    "start": "2302880",
    "end": "2309390"
  },
  {
    "text": "as a dictionary, it says, use\nthe keys method associated with this data\nstructure dictionaries.",
    "start": "2309390",
    "end": "2315030"
  },
  {
    "text": "Open close actually\ncalls it, and it gives me back a collection of all the\nkeys in some arbitrary order.",
    "start": "2315030",
    "end": "2323830"
  },
  {
    "text": "I'm going to use\na funny term here which I'm not certain\nwe've seen so far. It returns something we call\nan iterable, it's like range.",
    "start": "2323831",
    "end": "2330560"
  },
  {
    "text": "Think of it as giving us back\nthe equivalent of a list, it's not actually\na list, but it's something we can walk down.",
    "start": "2330560",
    "end": "2335910"
  },
  {
    "text": "Which is exactly why I\ncan then say, is something in a dictionary, because it\nreturns this set of keys,",
    "start": "2335910",
    "end": "2342230"
  },
  {
    "text": "and I can test to see\nsomething's in there. I can similarly get\nall of the values if I wanted to look at them,\ngiving us out two iterables.",
    "start": "2342230",
    "end": "2351470"
  },
  {
    "text": "Here are the key things to keep\nin mind about dictionaries.",
    "start": "2351470",
    "end": "2356740"
  },
  {
    "text": "The values can be anything,\nany type, mutable, immutable. They could be duplicates.",
    "start": "2356740",
    "end": "2362030"
  },
  {
    "text": "That'd actually makes sense,\nI could have the same value associated, for example,\nthe same grade associated with different people,\nthat's perfectly fine.",
    "start": "2362030",
    "end": "2368540"
  },
  {
    "text": "The values could be lists, they\ncould be other data structures, they could even be\nother dictionaries. They can be anything,\nwhich is great.",
    "start": "2368540",
    "end": "2375670"
  },
  {
    "text": "The keys, the first part of it\nare a little more structure. They need to be unique.",
    "start": "2375670",
    "end": "2382750"
  },
  {
    "text": "Well duh, that make sense. If I have that same key in\ntwo places in the dictionary, when I go to look\nit up, how am I going to know which one I want?",
    "start": "2382750",
    "end": "2388871"
  },
  {
    "text": "So it needs to be\nunique, and they also need to be immutable,\nwhich also makes sense.",
    "start": "2388871",
    "end": "2394254"
  },
  {
    "text": "If I'm storing something\nin a key in the dictionary, and I can go and change\nthe value of the key, how am I going to remember\nwhat I was looking for?",
    "start": "2394254",
    "end": "2401140"
  },
  {
    "text": "So they can only be things like\nints, floats, strings, tuples, Booleans.",
    "start": "2401140",
    "end": "2406792"
  },
  {
    "text": "I don't recommend using\nfloats because you need to make sure it's\nexactly the same float and that's sometimes a\nlittle bit challenging,",
    "start": "2406792",
    "end": "2412320"
  },
  {
    "text": "but nonetheless, you can have\nany immutable type as your key. And notice that there's no\norder to the keys or the values.",
    "start": "2412320",
    "end": "2418670"
  },
  {
    "text": "They are simply stored\narbitrarily by the Python as it puts them in. So if I compare these two, lists\nor ordered sequences indexed",
    "start": "2418670",
    "end": "2427210"
  },
  {
    "text": "by integers, I look them\nup by integer index, and the indices have to have\nan order as a consequence.",
    "start": "2427210",
    "end": "2433000"
  },
  {
    "text": "Dictionaries are this\nnice generalization, arbitrarily match\nkeys to values. I simply look up one\nitem by looking up things",
    "start": "2433000",
    "end": "2440470"
  },
  {
    "text": "under the appropriate key. All I require is that the\nkeys have to be immutable.",
    "start": "2440470",
    "end": "2447270"
  },
  {
    "text": "OK, I want to do\ntwo last things I've got seven minutes to go here. I want to show you an example\nof using dictionaries,",
    "start": "2447270",
    "end": "2453651"
  },
  {
    "text": "and I'm going to do this\nwith a little bit more interesting, I hope, example. I want to analyze song lyrics. Now I'm going to show\nyou, you can already",
    "start": "2453652",
    "end": "2460320"
  },
  {
    "text": "tell the difference between\nmy age and Ana's age. She used Taylor Swift\nand Justin Bieber.",
    "start": "2460320",
    "end": "2465832"
  },
  {
    "text": "I'm going to use The Beatles. That's more my generation. Most of you have never\nheard of The Beatles unless you watched\nShining Time Station where",
    "start": "2465832",
    "end": "2471615"
  },
  {
    "text": "you saw Ringo Starr, right? OK, what I'm going\nto do is, I want to write a little\nset of procedures",
    "start": "2471615",
    "end": "2477000"
  },
  {
    "text": "that record the frequencies\nof words in a song lyric. So I'm going to match strings,\nor words, to integers.",
    "start": "2477000",
    "end": "2484510"
  },
  {
    "text": "How many times did that word\nappear in the song lyric? And then I want to ask,\ncan I easily figure out",
    "start": "2484510",
    "end": "2490380"
  },
  {
    "text": "which words occur most\noften, and how many times. Then I'm going to\ngather them together to see what are the most\ncommon words in here.",
    "start": "2490380",
    "end": "2497127"
  },
  {
    "text": "And I'm going to do that where\nI'm going to let a user say, I want every word that appears\nmore than some number of times.",
    "start": "2497127",
    "end": "2502530"
  },
  {
    "text": "It's a simple\nexample, but I want you to see how a mutation\nof the dictionary gives you a really powerful\ntool for solving this problem.",
    "start": "2502530",
    "end": "2509950"
  },
  {
    "text": "So let's write the\ncode to do that. It's also in the\nhandout, here we go.",
    "start": "2509950",
    "end": "2515589"
  },
  {
    "start": "2512000",
    "end": "2652000"
  },
  {
    "text": "Lyrics to frequency's, lyrics is\njust a list of words, strings.",
    "start": "2515590",
    "end": "2520779"
  },
  {
    "text": "So I'm going to set up\nan empty dictionary, there's that open\nclose curly brace, and here's what I want to do.",
    "start": "2520779",
    "end": "2526710"
  },
  {
    "text": "I'm going to walk through\nall the words in lyrics. You've seen this\nbefore, this is looping over every word in lyrics.",
    "start": "2526710",
    "end": "2532690"
  },
  {
    "text": "Ah, notice what I'm going to do. I'm going to simply say-- so\nthe first part is, I can easily",
    "start": "2532690",
    "end": "2537960"
  },
  {
    "text": "iterate over the list,\n--but now I'm going to say, if the word is in\nthe dictionary,",
    "start": "2537960",
    "end": "2543400"
  },
  {
    "text": "and because the\ndictionary is iterable, it's simply going to give\nme back all of the keys, it's simply going to\nsay, in this case,",
    "start": "2543400",
    "end": "2549224"
  },
  {
    "text": "if it's in the dictionary,\nit's already there, I've got some value\nassociated with it, get the value out, add\n1 to it, put it back in.",
    "start": "2549224",
    "end": "2557039"
  },
  {
    "text": " If it's not already\nin the dictionary, this is the first time\nI've seen it, just store it",
    "start": "2557040",
    "end": "2564260"
  },
  {
    "text": "into the dictionary. And when I'm done just\nreturn the dictionary. OK?",
    "start": "2564260",
    "end": "2570750"
  },
  {
    "text": "So I'm going to, if I can do\nthis right with my Python, show you an example of this. I have put in one of the\ngreat classic Beatles songs,",
    "start": "2570750",
    "end": "2580900"
  },
  {
    "text": "you might recognize\nit right there. Mostly because it's got a whole\nlot of repetitions of things. So she loves you yeah,\nyeah, yeah, yeah.",
    "start": "2580900",
    "end": "2587832"
  },
  {
    "text": "Sorry, actually they sing\nit better than I just did it sarcastically. Sorry about that, but I\ngot she loves you there,",
    "start": "2587832",
    "end": "2593390"
  },
  {
    "text": "and here's my code up\nhere, lyrics to frequency. So let's see what\nhappens if we call it. And we say lyrics to\nfrequencies she loves you.",
    "start": "2593390",
    "end": "2606520"
  },
  {
    "text": " And it would help\nif I can type, all right, we'll try it\none more time, lyrics",
    "start": "2606520",
    "end": "2613940"
  },
  {
    "text": "to frequency's, she loves you.",
    "start": "2613940",
    "end": "2624099"
  },
  {
    "text": "Cool, this gave me\nback a dictionary, you can see the curly\nbraces, and there",
    "start": "2624100",
    "end": "2629987"
  },
  {
    "text": "are all the words that appear\nin there and the number of times that they appear.",
    "start": "2629987",
    "end": "2635360"
  },
  {
    "text": "What's the order? You don't care. You don't know. What we want to do\nis to think about how can we analyze\nthis, so let's go back",
    "start": "2635360",
    "end": "2641860"
  },
  {
    "text": "and look at the\nlast piece of this. Which is, OK, I can convert\nlyrics to frequencies.",
    "start": "2641860",
    "end": "2649810"
  },
  {
    "text": "So here's the next thing\nI want to do, how do I find the most common words? Well, here's what\nI'm going to do,",
    "start": "2649810",
    "end": "2656520"
  },
  {
    "start": "2652000",
    "end": "2817000"
  },
  {
    "text": "frequencies is the\ndictionary, something that I just pulled out.",
    "start": "2656520",
    "end": "2661569"
  },
  {
    "text": "So I can use the\nvalues method on it which returns and iterable,\nas I said earlier, again notice the open close\nbecause I got to call it.",
    "start": "2661570",
    "end": "2668860"
  },
  {
    "text": "That gives me back\nan iterable that has all of the frequencies\ninside of there, because it's an iterable,\nI can use max on it,",
    "start": "2668860",
    "end": "2676172"
  },
  {
    "text": "and it will take that\neditable and give me back the biggest value. I'm going to call that\nbest, I'm going to set up",
    "start": "2676172",
    "end": "2681695"
  },
  {
    "text": "words to be an empty\nlist, and then I'm just going to walk\nthrough all of the entries in the dictionary saying,\nif the value at that entry",
    "start": "2681695",
    "end": "2689680"
  },
  {
    "text": "is equal to best add\nthat entry into words, just append it onto\nthe end of the list.",
    "start": "2689680",
    "end": "2696260"
  },
  {
    "text": "And when I'm done\nall of that loop, I'm just going to return a\ntuple of both the collections of words that period\nthat many times",
    "start": "2696260",
    "end": "2703450"
  },
  {
    "text": "and how often they appeared. I'm going to show you\nan example in a second, but notice I'm simply using the\nproperties of the dictionary.",
    "start": "2703450",
    "end": "2710454"
  },
  {
    "text": "The last thing I want\nto do then is say, I want to see how\noften the words appear. So I'm going to give it a\ndictionary and a minimum number",
    "start": "2710454",
    "end": "2717160"
  },
  {
    "text": "of times. And here I'm going to set\nresult up to be an empty list, I'm going to create\na flag called false,",
    "start": "2717160",
    "end": "2723100"
  },
  {
    "text": "it's going to keep\ntrack of when I'm done. And as long as I'm\nnot yet done, I'll call that previous\nprocedure that's",
    "start": "2723100",
    "end": "2728950"
  },
  {
    "text": "going to give me back\nthe most common words and how often they appeared. I check and remember\nit was a tuple,",
    "start": "2728950",
    "end": "2734920"
  },
  {
    "text": "how often do they appear, if\nit's bigger than the thing I'm looking for, I'll\nadd that into my result.",
    "start": "2734920",
    "end": "2741140"
  },
  {
    "text": "And then the best\npart is, I'm now going to walk\nthrough all the words that appeared that many\ntimes, and just delete them",
    "start": "2741140",
    "end": "2747920"
  },
  {
    "text": "from the dictionary. I can mutate the dictionary. And by doing that, I can go\nback around and do this again,",
    "start": "2747920",
    "end": "2754342"
  },
  {
    "text": "and it will pull out how\nmany times has this appeared and keep doing it. When I can go all\nthe way through that, if I can't find any\nmore, I'll set the flag",
    "start": "2754342",
    "end": "2761470"
  },
  {
    "text": "to true which means it\nwill drop out of here and return the result. I'm going\nto let you run this yourself,",
    "start": "2761470",
    "end": "2767207"
  },
  {
    "text": "if you do that, you'll\nfind that it comes up with, not surprisingly, I think\nyeah is the most common one and she loves you, followed\nby loves and a few others.",
    "start": "2767207",
    "end": "2774434"
  },
  {
    "text": "What I want you to see here\nis how the dictionary captured the pieces we wanted to. Very last one,\nthere's Fibonacci,",
    "start": "2774434",
    "end": "2783109"
  },
  {
    "text": "as we called it before. It's actually\nincredibly inefficient, because if I call it, I\nhave to do all the sub",
    "start": "2783110",
    "end": "2789750"
  },
  {
    "text": "calls until I get down to\nthe base case, which is OK. But notice, every\nother thing I do here,",
    "start": "2789750",
    "end": "2796029"
  },
  {
    "text": "I've actually\ncomputed those values. I'm wasting measures,\nor wasting time,",
    "start": "2796030",
    "end": "2801120"
  },
  {
    "text": "it's not so bad with fib of\n5, but if this is fib of 20, almost everything on the\nright hand side of this tree",
    "start": "2801120",
    "end": "2806760"
  },
  {
    "text": "I've already computed once. That means fibs\nvery inefficient.",
    "start": "2806760",
    "end": "2811880"
  },
  {
    "text": "I can improve it by using a\ndictionary, very handy tool. I'm going to call fib not\nonly with a value of n,",
    "start": "2811880",
    "end": "2818720"
  },
  {
    "start": "2817000",
    "end": "2900000"
  },
  {
    "text": "but a dictionary\nwhich initially I'm going to initialized\nto the base cases. And notice what I do, I'm\ngoing to say if I've already",
    "start": "2818720",
    "end": "2825500"
  },
  {
    "text": "computed this, just return\nthe value in the dictionary. If I haven't, go ahead\nand do the computation,",
    "start": "2825500",
    "end": "2832670"
  },
  {
    "text": "store it in the\ndictionary at that point, and return the answer.",
    "start": "2832670",
    "end": "2837911"
  },
  {
    "text": "Different way of\nthinking about it, and the reason this is really\nnice is a method called memoization, is if\nI call fib of 34",
    "start": "2837912",
    "end": "2846090"
  },
  {
    "text": "the standard way it takes 11\nmillion plus recursive calls to get the answer out.",
    "start": "2846090",
    "end": "2851684"
  },
  {
    "text": "It takes a long time. I've given you some\ncode for it, you can try it and see\nhow long it takes.",
    "start": "2851685",
    "end": "2856859"
  },
  {
    "text": "Using the dictionary to keep\ntrack of intermediate values, 65 calls.",
    "start": "2856860",
    "end": "2862572"
  },
  {
    "text": "And if you try it, you'll\nsee the difference in speed as you run this. So dictionaries\nare valuable, not only for just storing\naway data, they're",
    "start": "2862572",
    "end": "2869340"
  },
  {
    "text": "valuable on procedure calls when\nthose intermediate values are not going to change.",
    "start": "2869340",
    "end": "2875125"
  },
  {
    "text": "What you're going to\nsee as we go along is we're going to use exactly\nthese ideas, using dictionaries to capture information, but\nespecially using recursion",
    "start": "2875125",
    "end": "2882599"
  },
  {
    "text": "to break bigger problems\ndown into smaller versions of the same problem,\nto use that as a tool for solving what turn out\nto be really complex things.",
    "start": "2882600",
    "end": "2890430"
  },
  {
    "text": "And with that, we'll\nsee you next time. ",
    "start": "2890430",
    "end": "2901030"
  }
]