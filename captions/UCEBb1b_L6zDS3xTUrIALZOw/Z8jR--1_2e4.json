[
  {
    "text": "Now would be a good time to take a moment\nto look at the documentation for the library",
    "start": "969",
    "end": "5490"
  },
  {
    "text": "of logic gates we'll use for our designs.",
    "start": "5490",
    "end": "9450"
  },
  {
    "text": "Look for \"The Standard Cell Library\" handout\nin the Updates & Handouts tab, which is next",
    "start": "9450",
    "end": "14559"
  },
  {
    "text": "to the Courseware tab.",
    "start": "14560",
    "end": "16620"
  },
  {
    "text": "The information on this slide is taken from\nthere.",
    "start": "16620",
    "end": "20470"
  },
  {
    "text": "The library has both inverting gates (such\nas inverters, NANDs and NORs) and non-inverting",
    "start": "20470",
    "end": "25838"
  },
  {
    "text": "gates (such as buffers, ANDs and ORs).",
    "start": "25839",
    "end": "29609"
  },
  {
    "text": "Why bother to include both types of gates?",
    "start": "29609",
    "end": "32180"
  },
  {
    "text": "Didn't we just learn we can build any circuit\nusing only NAND or NOR?",
    "start": "32180",
    "end": "36900"
  },
  {
    "text": "Good questions!",
    "start": "36900",
    "end": "37900"
  },
  {
    "text": "We get some insight into the answers if we\nlook at these three implementations for a",
    "start": "37900",
    "end": "43250"
  },
  {
    "text": "4-input AND function.",
    "start": "43250",
    "end": "45540"
  },
  {
    "text": "The upper circuit is a direct implementation\nusing the 4-input AND gate available in the",
    "start": "45540",
    "end": "50280"
  },
  {
    "text": "library.",
    "start": "50280",
    "end": "51750"
  },
  {
    "text": "The tPD of the gate is 160 picoseconds and\nits size is 20 square microns.",
    "start": "51750",
    "end": "57780"
  },
  {
    "text": "Don't worry too much about the actual numbers,\nwhat matters on this slide is how the numbers",
    "start": "57780",
    "end": "62579"
  },
  {
    "text": "compare between designs.",
    "start": "62579",
    "end": "65960"
  },
  {
    "text": "The middle circuit implements the same function,\nthis time using a 4-INPUT NAND gate hooked",
    "start": "65960",
    "end": "71170"
  },
  {
    "text": "to an inverter to produce the AND functionality\nwe want.",
    "start": "71170",
    "end": "75670"
  },
  {
    "text": "The tPD of this circuit is 90 picoseconds,\nconsiderably faster than the single gate above.",
    "start": "75670",
    "end": "81610"
  },
  {
    "text": "The tradeoff is that the size is somewhat\nlarger.",
    "start": "81610",
    "end": "85540"
  },
  {
    "text": "How can this be?",
    "start": "85540",
    "end": "86890"
  },
  {
    "text": "Especially since we know the AND gate implementation\nis the NAND/INVERTER pair shown in the middle",
    "start": "86890",
    "end": "91560"
  },
  {
    "text": "circuit.",
    "start": "91560",
    "end": "93200"
  },
  {
    "text": "The answer is that the creators of the library\ndecided to make the non-inverting gates small",
    "start": "93200",
    "end": "98548"
  },
  {
    "text": "but slow by using MOSFETs with much smaller\nwidths than used in the inverting logic gates,",
    "start": "98549",
    "end": "104410"
  },
  {
    "text": "which were designed to be fast.",
    "start": "104410",
    "end": "107299"
  },
  {
    "text": "Why would we ever want to use a slow gate?",
    "start": "107299",
    "end": "109920"
  },
  {
    "text": "Remember that the propagation delay of a circuit\nis set by the longest path in terms of delay",
    "start": "109920",
    "end": "114840"
  },
  {
    "text": "from inputs to outputs.",
    "start": "114840",
    "end": "116590"
  },
  {
    "text": "In a complex circuit, there are many input/output\npaths, but it's only the components on the",
    "start": "116590",
    "end": "122200"
  },
  {
    "text": "longest path that need to be fast in order\nto achieve the best possible overall tPD.",
    "start": "122200",
    "end": "128920"
  },
  {
    "text": "The components on the other, shorter paths,\ncan potentially be a bit slower.",
    "start": "128920",
    "end": "133160"
  },
  {
    "text": "And the components on short input/output paths\ncan be very slow indeed.",
    "start": "133160",
    "end": "138280"
  },
  {
    "text": "So for the portions of the circuit that aren't\nspeed sensitive, it's a good tradeoff to use",
    "start": "138280",
    "end": "142660"
  },
  {
    "text": "slower but smaller gates.",
    "start": "142660",
    "end": "144660"
  },
  {
    "text": "The overall performance isn't affected, but\nthe total size is improved.",
    "start": "144660",
    "end": "150480"
  },
  {
    "text": "So for faster performance we'll design with\ninverting gates, and for smallest size we'll",
    "start": "150480",
    "end": "155260"
  },
  {
    "text": "design with non-inverting gates.",
    "start": "155260",
    "end": "157450"
  },
  {
    "text": "The creators of the gate library designed\nthe available gates with this tradeoff in",
    "start": "157450",
    "end": "162510"
  },
  {
    "text": "mind.",
    "start": "162510",
    "end": "163510"
  },
  {
    "text": "The 4-input inverting gates are also designed\nwith this tradeoff in mind.",
    "start": "163510",
    "end": "167500"
  },
  {
    "text": "For the ultimate in performance, we want to\nuse a tree circuit of 2-input gates, as shown",
    "start": "167500",
    "end": "172340"
  },
  {
    "text": "in the lower circuit.",
    "start": "172340",
    "end": "173760"
  },
  {
    "text": "This implementation shaves 10 picoseconds\noff the tPD, while costing us a bit more in",
    "start": "173760",
    "end": "178700"
  },
  {
    "text": "size.",
    "start": "178700",
    "end": "180440"
  },
  {
    "text": "Take a closer look at the lower circuit.",
    "start": "180440",
    "end": "183070"
  },
  {
    "text": "This tree circuit uses two NAND gates whose\noutputs are combined with a NOR gate.",
    "start": "183070",
    "end": "188209"
  },
  {
    "text": "Does this really compute the AND of A, B,\nC, and D?",
    "start": "188209",
    "end": "192530"
  },
  {
    "text": "Yup, as you can verify by building the truth\ntable for this combinational system using",
    "start": "192530",
    "end": "197280"
  },
  {
    "text": "the truth tables for NAND and NOR.",
    "start": "197280",
    "end": "199940"
  },
  {
    "text": "This circuit is a good example of the application\nof a particular Boolean identity known as",
    "start": "199940",
    "end": "205470"
  },
  {
    "text": "Demorgan's Law.",
    "start": "205470",
    "end": "207170"
  },
  {
    "text": "There are two forms of Demorgan's law, both\nof which are shown here.",
    "start": "207170",
    "end": "211420"
  },
  {
    "text": "The top form is the one we're interested in\nfor analyzing the lower circuit.",
    "start": "211420",
    "end": "215810"
  },
  {
    "text": "It tells us that the NOR of A with B is equivalent\nto the AND of (NOT A) with (NOT B).",
    "start": "215810",
    "end": "222220"
  },
  {
    "text": "So the 2-input NOR gate can be thought of\nas a 2-input AND gate with inverting inputs.",
    "start": "222220",
    "end": "228410"
  },
  {
    "text": "How does this help?",
    "start": "228410",
    "end": "230370"
  },
  {
    "text": "We can now see that the lower circuit is actually\na tree of AND gates, where the inverting outputs",
    "start": "230370",
    "end": "236090"
  },
  {
    "text": "of the first layer match up with the inverting\ninputs of the second layer.",
    "start": "236090",
    "end": "241269"
  },
  {
    "text": "It's a little confusing the first time you\nsee it, but with practice you'll be comfortable",
    "start": "241269",
    "end": "244900"
  },
  {
    "text": "using Demorgan's law when building trees or\nchains of inverting logic.",
    "start": "244900",
    "end": "251370"
  },
  {
    "text": "Using Demorgan's Law we can answer the question\nof how to build NANDs and NORs with large",
    "start": "251370",
    "end": "255920"
  },
  {
    "text": "numbers of inputs.",
    "start": "255920",
    "end": "257549"
  },
  {
    "text": "Our gate library includes inverting gates\nwith up to 4 inputs.",
    "start": "257549",
    "end": "261530"
  },
  {
    "text": "Why stop there?",
    "start": "261530",
    "end": "262870"
  },
  {
    "text": "Well, the pulldown chain of a 4-input NAND\ngate has 4 NFETs in series and the resistance",
    "start": "262870",
    "end": "268940"
  },
  {
    "text": "of the conducting channels is starting to\nadd up.",
    "start": "268940",
    "end": "272380"
  },
  {
    "text": "We could make the NFETs wider to compensate,\nbut then the gate gets much larger and the",
    "start": "272380",
    "end": "277280"
  },
  {
    "text": "wider NFETs impose a higher capacitive load\non the input signals.",
    "start": "277280",
    "end": "282460"
  },
  {
    "text": "The number of possible tradeoffs between size\nand speed grows rapidly with the number of",
    "start": "282460",
    "end": "287080"
  },
  {
    "text": "inputs, so it's usually just best for the\nlibrary designer to stop at 4-input gates",
    "start": "287080",
    "end": "292129"
  },
  {
    "text": "and let the circuit designer take it from\nthere.",
    "start": "292130",
    "end": "294990"
  },
  {
    "text": "Happily, Demorgan's law shows us how build\ntrees of alternating NANDs and NORs to build",
    "start": "294990",
    "end": "300460"
  },
  {
    "text": "inverting logic with a large number of inputs.",
    "start": "300460",
    "end": "304060"
  },
  {
    "text": "Here we see schematics for an 8-input NAND\nand an 8-input NOR gate.",
    "start": "304060",
    "end": "308490"
  },
  {
    "text": "Think of the middle layer of NOR gates in\nthe left circuit as AND gates with inverting",
    "start": "308490",
    "end": "313289"
  },
  {
    "text": "inputs and then it's easy to see that the\ncircuit is a tree of ANDs with an inverting",
    "start": "313290",
    "end": "318240"
  },
  {
    "text": "output.",
    "start": "318240",
    "end": "319610"
  },
  {
    "text": "Similarly, think of the middle layer of NAND\ngates in the right circuit as OR gates with",
    "start": "319610",
    "end": "324710"
  },
  {
    "text": "inverting inputs and see that we really have\na tree of OR gates with an inverting output.",
    "start": "324710",
    "end": "330910"
  },
  {
    "text": "Now let's see how to build sum-of-products\ncircuits using inverting logic.",
    "start": "330910",
    "end": "335990"
  },
  {
    "text": "The two circuits shown here implement the\nsame sum-of-products logic function.",
    "start": "335990",
    "end": "340500"
  },
  {
    "text": "The one on the top uses two layers of NAND\ngates, the one on the bottom, two layers of",
    "start": "340500",
    "end": "345350"
  },
  {
    "text": "NOR gates.",
    "start": "345350",
    "end": "347250"
  },
  {
    "text": "Let's visualize Demorgan's Law in action on\nthe top circuit.",
    "start": "347250",
    "end": "350890"
  },
  {
    "text": "The NAND gate with Y on its output can be\ntransformed by Demorgan's Law into an OR gate",
    "start": "350890",
    "end": "356360"
  },
  {
    "text": "with inverting inputs.",
    "start": "356360",
    "end": "358478"
  },
  {
    "text": "So we can redraw the circuit on the top left\nas the circuit shown on the top right.",
    "start": "358479",
    "end": "363350"
  },
  {
    "text": "Now, notice that the inverting outputs of\nthe first layer are cancelled by the inverting",
    "start": "363350",
    "end": "368000"
  },
  {
    "text": "inputs of the second layer, a step we can\nshow visually by removing matching inversions.",
    "start": "368000",
    "end": "373800"
  },
  {
    "text": "And, voila, we see the NAND/NAND circuit in\nsum-of-products form: a layer of inverters,",
    "start": "373800",
    "end": "379728"
  },
  {
    "text": "a layer of AND gates, and an OR gate to combine\nthe product terms.",
    "start": "379729",
    "end": "383810"
  },
  {
    "text": "We can use a similar visualization to transform\nthe output gate of the bottom circuit, giving",
    "start": "383810",
    "end": "388889"
  },
  {
    "text": "us the circuit on the bottom right.",
    "start": "388890",
    "end": "392250"
  },
  {
    "text": "Match up the bubbles and we see that we have\nthe same logic function as above.",
    "start": "392250",
    "end": "397620"
  },
  {
    "text": "Looking at the NOR/NOR circuit on the bottom\nleft, we see it has 4 inverters, whereas the",
    "start": "397620",
    "end": "403110"
  },
  {
    "text": "NAND/NAND circuit only has one.",
    "start": "403110",
    "end": "406259"
  },
  {
    "text": "Why would we ever use the NOR/NOR implementation?",
    "start": "406260",
    "end": "409480"
  },
  {
    "text": "It has to do with the loading on the inputs.",
    "start": "409480",
    "end": "411880"
  },
  {
    "text": "In the top circuit, the input A connects to\na total of four MOSFET switches.",
    "start": "411880",
    "end": "417009"
  },
  {
    "text": "In the bottom circuit, it connects to only\nthe two MOSFET switches in the inverter.",
    "start": "417009",
    "end": "421750"
  },
  {
    "text": "So, the bottom circuit imposes half the capacitive\nload on the A signal.",
    "start": "421750",
    "end": "426810"
  },
  {
    "text": "This might be significant if the signal A\nconnected to many such circuits.",
    "start": "426810",
    "end": "432130"
  },
  {
    "text": "The bottom line: when you find yourself needing\na fast implementation for the AND/OR circuitry",
    "start": "432130",
    "end": "437509"
  },
  {
    "text": "for a sum-of-products expression, try using\nthe NAND/NAND implementation.",
    "start": "437509",
    "end": "442389"
  },
  {
    "text": "It'll be noticeably faster than using AND/OR.",
    "start": "442389",
    "end": "445189"
  }
]