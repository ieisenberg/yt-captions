[
  {
    "text": " The following\ncontent is provided under a Creative\nCommons license. Your support will help MIT\nOpenCourseWare continue",
    "start": "0",
    "end": "6859"
  },
  {
    "text": "to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6860",
    "end": "13320"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13320",
    "end": "21380"
  },
  {
    "text": "PROFESSOR: It's a bit better,\nmy heart's back in place. I'm glad that not\neveryone's gone.",
    "start": "21380",
    "end": "26812"
  },
  {
    "text": "AUDIENCE: Well you mean passed\nout and died from the test? PROFESSOR: Yeah. AUDIENCE: OK, no there\nwere a few students left.",
    "start": "26812",
    "end": "32380"
  },
  {
    "text": "PROFESSOR: That's\ngood, that's good. I think once we release the\nresults everyone will calm",
    "start": "32380",
    "end": "37650"
  },
  {
    "text": "down, and we'll realize that\nthe mistake was on our part. AUDIENCE: The mistake?",
    "start": "37650",
    "end": "42710"
  },
  {
    "text": "PROFESSOR: I mean the results\nare lower than what we thought. And it's because we\nhaven't covered something",
    "start": "42710",
    "end": "48600"
  },
  {
    "text": "that I will cover today. So we think-- well we\ntalked about it yesterday,",
    "start": "48600",
    "end": "54346"
  },
  {
    "text": "and we think we haven't\ndone enough algorithm design with you guys. So today I have\nproblems, and we're going to come up with solutions.",
    "start": "54346",
    "end": "61870"
  },
  {
    "text": "AUDIENCE: Are you\nnot going to tell us what [INAUDIBLE] number is? PROFESSOR: It's in\nthe lecture notes.",
    "start": "61870",
    "end": "67060"
  },
  {
    "text": "It's actually quite boring. I promise it's really boring. AUDIENCE: OK. PROFESSOR: And if you want\nto do that next time when",
    "start": "67060",
    "end": "74170"
  },
  {
    "text": "we'll actually talk\nabout numerics. The thing is numerics\nare straightforward. Once you learn the\nalgorithms you're not going to come\nup with a new one.",
    "start": "74170",
    "end": "81100"
  },
  {
    "text": "I'm pretty sure about that. Like you're not going to come\nup with a revolutionary way of adding two numbers.",
    "start": "81100",
    "end": "86979"
  },
  {
    "text": "AUDIENCE: I don't know. You never know. PROFESSOR: Well you\ncan tell me why. Think about it and\nthen you can tell me",
    "start": "86980",
    "end": "92950"
  },
  {
    "text": "why you are not going to. AUDIENCE: OK, got it.  PROFESSOR: OK so let's\nstart with a problem.",
    "start": "92950",
    "end": "101450"
  },
  {
    "text": "We know what sorted\narrays look like, right?  1, 3, 5, 6, 7, 9, 12.",
    "start": "101450",
    "end": "110890"
  },
  {
    "text": "This is a sorted array. If we're given a\nsorted array we know how to find the\nnumber in it, right?",
    "start": "110890",
    "end": "119210"
  },
  {
    "text": "What's the running\ntime for that. AUDIENCE: For any given number? PROFESSOR: Yeah.",
    "start": "119210",
    "end": "124656"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: Well what's\nthe best way that we know? AUDIENCE: Logarithm.",
    "start": "124656",
    "end": "130229"
  },
  {
    "text": "PROFESSOR: Log and\nbinary search, right?  Well instead of this we're\ngiven a shifted array.",
    "start": "130230",
    "end": "138040"
  },
  {
    "text": "And shifted means\nthat-- say you're shifting the array\nby K elements.",
    "start": "138040",
    "end": "143185"
  },
  {
    "text": "We're taking these guys. So the array is\nshifted to the left. So these K elements\nend up on the right.",
    "start": "143185",
    "end": "150930"
  },
  {
    "text": "These N minus K elements\nend up on the left. So 7, 9, 12, 1, 3, 5, 6.",
    "start": "150930",
    "end": "159000"
  },
  {
    "text": " So still N elements they are\nshifted by some number K.",
    "start": "159000",
    "end": "168130"
  },
  {
    "text": "And I want to find one\nnumber, e, in the array. I don't know K by the way. We just know that\nit's a shifted array.",
    "start": "168130",
    "end": "174430"
  },
  {
    "text": " This is 12. ",
    "start": "174430",
    "end": "186489"
  },
  {
    "text": "So the first thing\nyou do is figure out",
    "start": "186490",
    "end": "192430"
  },
  {
    "text": "how much time you\nhave for this, right? If you're on a test, you\nroughly know how much time you have for a problem.",
    "start": "192430",
    "end": "197590"
  },
  {
    "text": "If you're on an\ninterview you have to figure out how much\ntime the interviewer is willing to give you for problem. And spend the first,\nI don't, a third",
    "start": "197590",
    "end": "204959"
  },
  {
    "text": "of the time thinking maybe. Come up with the best\nsolution that you can. And then stop there,\nand start talking.",
    "start": "204960",
    "end": "210800"
  },
  {
    "text": "So the first thing\nyou do, you want to make sure that when\nyou run out of time you have something to say. The most awful thing you can\nsay is, dude I'm going home now.",
    "start": "210800",
    "end": "217670"
  },
  {
    "text": "Or leave the answer blank. If you leave the\nanswer blank we're not going to give\nyou points, right? So not good.",
    "start": "217670",
    "end": "223780"
  },
  {
    "text": "So what's the worst\nanswer you could give us? ",
    "start": "223780",
    "end": "230260"
  },
  {
    "text": "OK worst is a bad term. What's the brute force\nsolution to this?",
    "start": "230260",
    "end": "236630"
  },
  {
    "text": "The solution where we don't\ncare about the running time, but we want the correct answer.",
    "start": "236630",
    "end": "242100"
  },
  {
    "text": "AUDIENCE: Look everywhere. PROFESSOR: Yep. So do a linear search. Pretend we don't know\nanything about this array.",
    "start": "242100",
    "end": "249350"
  },
  {
    "text": "Lose the information that\nit's a shifted array. Linear search\nrunning time order N.",
    "start": "249350",
    "end": "256859"
  },
  {
    "text": "OK so this is\nsomething, at least now when your time runs\nout you have something. You're not going to\nleave empty handed.",
    "start": "256860",
    "end": "262524"
  },
  {
    "text": " Let's start thinking now. Next step. ",
    "start": "262524",
    "end": "270011"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]\ncan we shift it again? PROFESSOR: So the\nfact that it's shifted means that-- so originally\nit was sorted, right?",
    "start": "270011",
    "end": "277639"
  },
  {
    "text": "But now instead of it\nbeing completely sorted, you have all the elements\nare shifted to the left. And then so there's a\nrotation thing going on here.",
    "start": "277640",
    "end": "285610"
  },
  {
    "text": "So these elements\ngot out of the array and then they are put back\nin from the other side.",
    "start": "285610",
    "end": "291182"
  },
  {
    "text": "AUDIENCE: Why do we do that? PROFESSOR: That's how\nthe info looks like. We don't do it. It was done to us.",
    "start": "291182",
    "end": "298042"
  },
  {
    "text": "AUDIENCE: Oh OK. So now what do we want? PROFESSOR: We want\nto find an element-- AUDIENCE: Oh, I see. PROFESSOR: --despite the fact\nthat the array looks like this.",
    "start": "298042",
    "end": "304160"
  },
  {
    "text": "AUDIENCE: Do we know that\nthe list that we have is shifted already? PROFESSOR: Yes. So we're promised that\nthis is a shifted array.",
    "start": "304161",
    "end": "311280"
  },
  {
    "text": "So it will look like this. But we don't know what K is. If we knew what K is,\ncould we do something fast?",
    "start": "311280",
    "end": "320810"
  },
  {
    "text": "What would we do? AUDIENCE: Yeah, you'd\njust re-shift [INAUDIBLE]. PROFESSOR: OK so\nif you re-shifted",
    "start": "320810",
    "end": "326169"
  },
  {
    "text": "what's the running time? AUDIENCE: For order\nK [INAUDIBLE].",
    "start": "326170",
    "end": "331560"
  },
  {
    "text": "PROFESSOR: OK so if\nwe actually shifted and then do a binary search\nit's order K plus log N. So for big K's\nthat's not better.",
    "start": "331560",
    "end": "340692"
  },
  {
    "text": "AUDIENCE: Why is it not\norder N plus log [INAUDIBLE]. PROFESSOR: You can say that\nsince we don't have any promise",
    "start": "340692",
    "end": "348000"
  },
  {
    "text": "on K it's N. It's order K if\nyou can shift things out of both",
    "start": "348000",
    "end": "353620"
  },
  {
    "text": "N's. With Python this\nwould be order N, just popping out one element\nis order N in Python. So this is assuming\na smart array.",
    "start": "353620",
    "end": "361430"
  },
  {
    "text": "Otherwise if it's\nPython, good point. It's straight up order N.\nSo now another good point.",
    "start": "361430",
    "end": "367920"
  },
  {
    "text": "You have this solution, and you\nhave the brute force solution. They have the same running time.",
    "start": "367920",
    "end": "374760"
  },
  {
    "text": "You run out of time. Which one are you\ngoing to code up? Which one are you going to show?",
    "start": "374760",
    "end": "381257"
  },
  {
    "text": "AUDIENCE: The simpler one. PROFESSOR: The simpler\none, excellent. So the reason is,\nif you're on a test it's probably give the\npseudocode, then analyze it.",
    "start": "381257",
    "end": "390787"
  },
  {
    "text": "If you're in an interview\nthe guy will ask you OK, what's the running time? Code it up on the board in\nC, Java, whatever he knows.",
    "start": "390787",
    "end": "398121"
  },
  {
    "text": "So you want to code\nthe simplest solution, because that reduces the\nchance that you'll have bugs. So that gives you\nthe most points.",
    "start": "398121",
    "end": "404290"
  },
  {
    "text": "So this solution\nshows more insight, but it doesn't have\na better run time.",
    "start": "404290",
    "end": "409490"
  },
  {
    "text": "Stick to the simple solution. However if you\nhave this then you have some insight\non the problem.",
    "start": "409490",
    "end": "414539"
  },
  {
    "text": "So you can keep\ngoing and hope you can come up with\na better answer. So if we knew K, one\nthing we could do",
    "start": "414540",
    "end": "422090"
  },
  {
    "text": "is reduce the array\nto an unshifted array. What's another thing we can do?",
    "start": "422090",
    "end": "427849"
  },
  {
    "text": "So I claim that\nif you know K you can come up with a\nreasonably easy log N method.",
    "start": "427850",
    "end": "436195"
  },
  {
    "text": "AUDIENCE: If you're\ndoing binary search, like if you just pretend like\nthe array is all together,",
    "start": "436196",
    "end": "443530"
  },
  {
    "text": "but if you know K. So let's\nsay you're looking for 6. Then you'd say oh well I'm\ngoing to split the array half,",
    "start": "443530",
    "end": "452340"
  },
  {
    "text": "but you're actually\ngoing to start at K and then split it in half. So it's like you pretend that--",
    "start": "452340",
    "end": "458300"
  },
  {
    "text": "PROFESSOR: So what\nyou want to say is you have a pretend\narray in your mind, right?",
    "start": "458300",
    "end": "463827"
  },
  {
    "text": "AUDIENCE: Yes. It's [INAUDIBLE] by K. PROFESSOR: And you want to\naccess the middle element",
    "start": "463827",
    "end": "469590"
  },
  {
    "text": "to see if what you're looking\nfor is bigger or smaller. Instead of looking at\nthe middle element here,",
    "start": "469590",
    "end": "475100"
  },
  {
    "text": "you look at the\nmiddle plus K, right? AUDIENCE: Yes. Oh, there you go. Plus K.",
    "start": "475100",
    "end": "481530"
  },
  {
    "text": "PROFESSOR: This is one way of\ndoing it, good running time. The problem is it's hard. You'll have to rewrite binary\nsearch and hope it works.",
    "start": "481530",
    "end": "488490"
  },
  {
    "text": "What I would do,\ngiven that I've had a bit of time to think\nabout it, is this is sorted.",
    "start": "488490",
    "end": "495460"
  },
  {
    "text": "This is sorted. So two binary searched are\nalso going to be log N time.",
    "start": "495460",
    "end": "502630"
  },
  {
    "text": "Two binary searches,\ntwo lines of pseudocode. The running time analysis\nis pretty simple. Correctness is\nalso pretty simple.",
    "start": "502630",
    "end": "510880"
  },
  {
    "text": "And also this gives\nme some insight on the rest of the\nproblem I claim. ",
    "start": "510880",
    "end": "517469"
  },
  {
    "text": "OK so if we have K we can do\nlog N. What if we don't have K?",
    "start": "517470",
    "end": "523779"
  },
  {
    "text": "What do we do? Yes? AUDIENCE: Figure out what K is. PROFESSOR: All right let's try\nto find K. We know how to do it",
    "start": "523780",
    "end": "530783"
  },
  {
    "text": "if we have K. So let's try\nto find K. What-- if I want to arrive to a\nsolution that's log N,",
    "start": "530783",
    "end": "540019"
  },
  {
    "text": "how much time can I\nspend on finding K?  OK so let's find\nK in log N time.",
    "start": "540020",
    "end": "547260"
  },
  {
    "text": " AUDIENCE: Binary\nsearch for minimum?",
    "start": "547260",
    "end": "553209"
  },
  {
    "text": "PROFESSOR: Binary search--\nso I like binary search, because binary search\nis an algorithm that runs on an array.",
    "start": "553210",
    "end": "559590"
  },
  {
    "text": "And that runs in log N time. So if I'm able to make it\nwork I know everything's going to be right\nin terms of time.",
    "start": "559590",
    "end": "565550"
  },
  {
    "text": "So what do you run\na binary search for? AUDIENCE: The smallest\nnumber possible? I guess that's kind of going\nthrough all of them, though.",
    "start": "565550",
    "end": "572335"
  },
  {
    "text": "It doesn't really help. PROFESSOR: So if\nyou have the min. Sorry, you can\nspeak in one second. AUDIENCE: Oh we have the min!",
    "start": "572335",
    "end": "578110"
  },
  {
    "text": "PROFESSOR: So no, if\nyou can't have the min. I think it's good insight. So if you knew where the min\nis, you know this is K, right?",
    "start": "578110",
    "end": "585134"
  },
  {
    "text": "AUDIENCE: Yes. PROFESSOR: So this\nis the minimum, that's K. OK, what\nwere you going to say?",
    "start": "585134",
    "end": "591105"
  },
  {
    "text": "AUDIENCE: Oh for\njust binary search it would not\n[INAUDIBLE] minimum. I was thinking that if we start\nat 1 we will see to our right",
    "start": "591105",
    "end": "601900"
  },
  {
    "text": "and left. And the point where\n[INAUDIBLE] are ending is where we have something\nlarger to our right",
    "start": "601900",
    "end": "608004"
  },
  {
    "text": "and something\nsmaller to our left. PROFESSOR: OK so there's\na discontinuity here, that's what you're\nsaying, right? So this is sorted.",
    "start": "608004",
    "end": "613180"
  },
  {
    "text": "But then at this\npoint this breaks. AUDIENCE: Yes, we are kind\nof finding that point where",
    "start": "613180",
    "end": "618700"
  },
  {
    "text": "something to the\nright that's greater than [INAUDIBLE] and\nsomething to the left is also greater\nthan [INAUDIBLE].",
    "start": "618700",
    "end": "624225"
  },
  {
    "text": "PROFESSOR: OK so let's\nsee if we can do that. So for binary search you\nhave to go somewhere. So in our case we're\ntrying to get K, right?",
    "start": "624225",
    "end": "632890"
  },
  {
    "text": "And we know that it's\nsomewhere between 1 and 10. And what binary search\ndoes is it makes a guess.",
    "start": "632890",
    "end": "638515"
  },
  {
    "text": " It says hey, I think it's\nin the middle of the array.",
    "start": "638515",
    "end": "645819"
  },
  {
    "text": "So it will probably\nguess n over 2. And it makes a\nguess and you have",
    "start": "645820",
    "end": "652030"
  },
  {
    "text": "to tell it was the\nguess too small, or was the guess too large?",
    "start": "652030",
    "end": "657310"
  },
  {
    "text": "Because this is what\nallows you to recurse on either the left interval\nor on the right interval.",
    "start": "657310",
    "end": "662930"
  },
  {
    "text": "The problem with a discontinuity\nis, if I guess here, and if I guess here, I still\ndon't see the discontinuity.",
    "start": "662930",
    "end": "670850"
  },
  {
    "text": "So it's good inside,\nbut it's not enough. I need a little bit more. Yes, 2, 3 hands oh wow\nyou guys don't got it?",
    "start": "670850",
    "end": "678531"
  },
  {
    "text": "AUDIENCE: So I think\nwe can arbitrarily take the halfway point\ninstead of subtracting from the first element. And then if it's\na negative number,",
    "start": "678531",
    "end": "687085"
  },
  {
    "text": "then discontinuity\nwill be in this half. If it's [INAUDIBLE] it\nwill be in the other half.",
    "start": "687085",
    "end": "692107"
  },
  {
    "text": "And then you recurse on that. PROFESSOR: OK. So let's draw this up.",
    "start": "692107",
    "end": "697950"
  },
  {
    "text": "So in a sorted array the\nnumbers look like this.",
    "start": "697950",
    "end": "703740"
  },
  {
    "text": "In a shifted array\nwe splice it here, and this guy goes to the right.",
    "start": "703740",
    "end": "709529"
  },
  {
    "text": "So it's like this\nand then like this.",
    "start": "709530",
    "end": "717220"
  },
  {
    "text": "So this picture shows me the\ninsight that I had before, that this part is sorted\nand this part is sorted.",
    "start": "717220",
    "end": "723320"
  },
  {
    "text": "The missing part,\nwhich I just heard now, is that since the whole\narray was originally sorted,",
    "start": "723320",
    "end": "729880"
  },
  {
    "text": "this guy is smaller\nthan this guy. So if I draw a\nhorizontal line here,",
    "start": "729880",
    "end": "739160"
  },
  {
    "text": "I can draw a horizontal\nline somewhere, and this and this\nwill not cross it.",
    "start": "739160",
    "end": "744990"
  },
  {
    "text": "So this whole thing\nis taller than this. So by the way, K was where\nthe discontinuity was, right?",
    "start": "744990",
    "end": "753130"
  },
  {
    "text": "You said discontinuity. This is K, it's somewhere here.",
    "start": "753130",
    "end": "758450"
  },
  {
    "text": "So this is a better. So if I make my guess and\nI land somewhere here,",
    "start": "758450",
    "end": "764329"
  },
  {
    "text": "I can know that my\nguess is too big, because it's below the line. If I make my guess and\nit's somewhere here,",
    "start": "764330",
    "end": "771830"
  },
  {
    "text": "I know my guess is too small,\nbecause the number that I see here is above the line. Who sets the line?",
    "start": "771830",
    "end": "777820"
  },
  {
    "text": "The first element here.  So this is how you\nlook at it graphically.",
    "start": "777820",
    "end": "784030"
  },
  {
    "text": "If you don't want to\nlook at it graphically, this was a sorted array. If this is the Kth\nelement, then everything",
    "start": "784030",
    "end": "792960"
  },
  {
    "text": "here is smaller than it. So all these guys are smaller\nthan the first element.",
    "start": "792960",
    "end": "798470"
  },
  {
    "start": "798470",
    "end": "804180"
  },
  {
    "text": "OK so honestly who\nunderstands the solution? ",
    "start": "804180",
    "end": "809360"
  },
  {
    "text": "3, 4, OK. Oh, OK pretty good. Do we want to code\nthis up, or do we",
    "start": "809360",
    "end": "816380"
  },
  {
    "text": "want to look at another problem? OK who wants to look\nat another problem? ",
    "start": "816380",
    "end": "823900"
  },
  {
    "text": "Clear majority, all right. Usually I have to\ndo both choices, because not enough people are\npaying attention to get this.",
    "start": "823900",
    "end": "829779"
  },
  {
    "text": "So I am happy. AUDIENCE: [INAUDIBLE]. PROFESSOR: Yes. ",
    "start": "829780",
    "end": "839870"
  },
  {
    "text": "All right so before I start\nanother problem, one thing I want to say. Not only do I have a\nsolution for this problem,",
    "start": "839870",
    "end": "845186"
  },
  {
    "text": "but I have a\nprocess that allowed me to go from nothing to\na few partial solutions.",
    "start": "845186",
    "end": "851040"
  },
  {
    "text": "And while I was doing\nthat, I was getting insight and I was making sure that if\nI run out of time before I have",
    "start": "851040",
    "end": "856300"
  },
  {
    "text": "the final solution, I don't walk\nout of the room empty handed. So I don't just want to\nshow you the final solution,",
    "start": "856300",
    "end": "863000"
  },
  {
    "text": "I want to show you the process. You can look at the notes\nand see the final solution. That's not everything I\nwant you to get out of this.",
    "start": "863000",
    "end": "870860"
  },
  {
    "text": "OK, problem 2 has a heap. ",
    "start": "870860",
    "end": "878960"
  },
  {
    "text": "And this is a minimum heap,\nso it looks like this. ",
    "start": "878960",
    "end": "891360"
  },
  {
    "text": "So this is a minimum\nheap, N elements. And I want to extract the kth\nsmallest element in the heap.",
    "start": "891360",
    "end": "899440"
  },
  {
    "text": " So if K equals 3, this is the\nthird smallest element, right?",
    "start": "899440",
    "end": "907450"
  },
  {
    "text": "K equals 4, it's this guy. 5, and 6, 1 and 2 are here. ",
    "start": "907450",
    "end": "914740"
  },
  {
    "text": "OK the good running\ntime that we want, because this is a hard\nproblem so we give you",
    "start": "914740",
    "end": "920630"
  },
  {
    "text": "the running time,\nis K log K. However before we do that I want to\nhear some brute force solutions.",
    "start": "920630",
    "end": "929942"
  },
  {
    "text": "AUDIENCE: All of them. PROFESSOR: And? ",
    "start": "929942",
    "end": "935110"
  },
  {
    "text": "OK you need to sort them first. So this heap is actually\nan array, right?",
    "start": "935110",
    "end": "941600"
  },
  {
    "text": "2, 5, 7, 6, 8, oh\nit's 6, 9, 8, sorry.",
    "start": "941600",
    "end": "949839"
  },
  {
    "text": "So you're saying sort\nthe array, then K-- AUDIENCE: [INAUDIBLE]. PROFESSOR: OK what's the\nrunning time for this?",
    "start": "949840",
    "end": "957004"
  },
  {
    "text": "AUDIENCE: Log N.",
    "start": "957004",
    "end": "964090"
  },
  {
    "text": "PROFESSOR: All right\nwe have a solution. We're not going to\nleave empty handed.",
    "start": "964090",
    "end": "969180"
  },
  {
    "text": "OK let's try to go a bit better. What's another way\nof going it that'll",
    "start": "969180",
    "end": "974440"
  },
  {
    "text": "give me a better running time? AUDIENCE: You could pop 5 of\nthe K elements off of the--",
    "start": "974440",
    "end": "980815"
  },
  {
    "text": "PROFESSOR: All right so\nthis is a mean heap, right? So it has find min. ",
    "start": "980815",
    "end": "986990"
  },
  {
    "text": "And find min runs in order\nlog N. So if I call it K times",
    "start": "986990",
    "end": "993950"
  },
  {
    "text": "I'm going to get the\nK smallest elements. By the way heap sort\nsays pop and times,",
    "start": "993950",
    "end": "999610"
  },
  {
    "text": "and you'll have all the\nelements in sorted order. So we're doing a\nheap sort, except we stop when we lose\ninterest after K elements.",
    "start": "999610",
    "end": "1007709"
  },
  {
    "text": "So we're down from\nN log N to K log N.",
    "start": "1007710",
    "end": "1014700"
  },
  {
    "text": "So I would be interested in\nhearing a solution that's worse, because it would\nlook like N log K.",
    "start": "1014700",
    "end": "1023889"
  },
  {
    "text": "But shows me more insight. So by the way this is good. You're already K log N. So\nK log N, the correct answer",
    "start": "1023890",
    "end": "1032189"
  },
  {
    "text": "is K log K. Small\ndifference, right? It's a logarithm factor.",
    "start": "1032190",
    "end": "1038280"
  },
  {
    "text": "At least it's not an N factor. If you code this up\nchances are we're not going to be able to\ndistinguish between this.",
    "start": "1038280",
    "end": "1043540"
  },
  {
    "text": "So you'll never\nsee this on a PSet. So you're almost there. And this is just applying\nstraight up knowledge",
    "start": "1043540",
    "end": "1050790"
  },
  {
    "text": "that we had before. Let's look at this\nsolution, if anyone sees it.",
    "start": "1050790",
    "end": "1056210"
  },
  {
    "text": " Before we attempt K log K.",
    "start": "1056210",
    "end": "1061640"
  },
  {
    "text": "AUDIENCE: In another\ncase would we just pop off first K elements,\nwhy would that be in log N?",
    "start": "1061640",
    "end": "1068070"
  },
  {
    "text": "Because it's actually\nan array, so I would think that we'd\njust take the K time.",
    "start": "1068070",
    "end": "1074980"
  },
  {
    "text": "PROFESSOR: So this is a heap. If you don't maintain\nthe heaping variant after you do the\nfirst pop you're not going to be able\nto do the second one.",
    "start": "1074980",
    "end": "1082570"
  },
  {
    "text": "OK, cool. So let me give you a hint. How would we find--\nif this is an array--",
    "start": "1082570",
    "end": "1090260"
  },
  {
    "text": "how do I find the minimum? 2, 5, 7, did I forget something? No.",
    "start": "1090260",
    "end": "1096180"
  },
  {
    "text": "Let's pretend this array doesn't\nstart with 2, because it's boring if it starts with 2.",
    "start": "1096180",
    "end": "1101530"
  },
  {
    "text": "How do I find the minimum? I keep one variable that says\nthe best I've seen so far, right?",
    "start": "1101530",
    "end": "1107250"
  },
  {
    "text": "Let's see, N-- oh\nthis is still boring. Let's start here.",
    "start": "1107250",
    "end": "1112960"
  },
  {
    "text": "So we start with\nbest seen equals 7.",
    "start": "1112960",
    "end": "1118120"
  },
  {
    "text": "Then when we go to 6 we see,\nis 6 better than best seen? If so, replace best seen with 6.",
    "start": "1118120",
    "end": "1125500"
  },
  {
    "text": "If not keep going. Then I get to 9. Is 9 better than best seen? Nope, keep going.",
    "start": "1125500",
    "end": "1131430"
  },
  {
    "text": "Is 8 better than best seen? Nope, keep going. So I compare every element\nwith the best seen,",
    "start": "1131430",
    "end": "1139210"
  },
  {
    "text": "and then whenever the element\nis better I do a replacement. And then at the end, best seen\nwill have the smallest element.",
    "start": "1139210",
    "end": "1146059"
  },
  {
    "text": "So this algorithm\nworks for k equals 1, which isn't very useful.",
    "start": "1146060",
    "end": "1151510"
  },
  {
    "text": "So can we generalize\nthis somehow to-- so we have a\nrunning time here.",
    "start": "1151510",
    "end": "1157557"
  },
  {
    "text": "That might give you a hint about\nhow we want to generalize it, and I want to generalize\nit for all values of K.",
    "start": "1157557",
    "end": "1168749"
  },
  {
    "text": "AUDIENCE: If you go to the\npower of 2 then it's less than-- the nearest power\nof 2 less than K--",
    "start": "1168749",
    "end": "1175070"
  },
  {
    "text": "PROFESSOR: OK. AUDIENCE: --that element, and\niterate forward with your best",
    "start": "1175070",
    "end": "1182010"
  },
  {
    "text": "seen. Does that make sense? If you want the kth, if you\nwant the tenth smallest element,",
    "start": "1182010",
    "end": "1188610"
  },
  {
    "text": "then it has to be\nafter the 8th row",
    "start": "1188610",
    "end": "1195040"
  },
  {
    "text": "because it's the next\nlevel in the tree. Does that make sense? That doesn't make sense. PROFESSOR: It makes sense,\nbut I don't think it's right.",
    "start": "1195040",
    "end": "1203417"
  },
  {
    "text": "So you're thinking that\nthe tenth smallest element has to be somewhere\nbelow, right? AUDIENCE: Yeah. ",
    "start": "1203417",
    "end": "1210270"
  },
  {
    "text": "PROFESSOR: 1, 2, 3, 4, 5, 6,\n7, 8, 9, 10, and then pretend",
    "start": "1210270",
    "end": "1220630"
  },
  {
    "text": "that there are numbers here. 11, 12, 13, 14, 15, do\nyou see what I'm saying?",
    "start": "1220630",
    "end": "1227480"
  },
  {
    "text": "So this is a heap. ",
    "start": "1227480",
    "end": "1234419"
  },
  {
    "text": "So I can keep filling\nit with bigger elements, and 10 is here.",
    "start": "1234420",
    "end": "1240490"
  },
  {
    "text": "However you can\ndo something else to limit the size of the heap.",
    "start": "1240490",
    "end": "1248350"
  },
  {
    "text": "It will give us a\ndifferent running time, but you can do something. You can think about it.",
    "start": "1248350",
    "end": "1253660"
  },
  {
    "text": "How can you chop up\nsome of the heap? For example if I have\na heap that's ten deep and I look at the fourth\nelement, what can I do?",
    "start": "1253660",
    "end": "1263250"
  },
  {
    "text": "You can think about that. And let's try to get to this.",
    "start": "1263250",
    "end": "1268262"
  },
  {
    "text": "So I'll accept an\nanswer for either how do we limit the\nheap in that case, or how do we generalize\nthis algorithm.",
    "start": "1268262",
    "end": "1275270"
  },
  {
    "text": "Yes? AUDIENCE: You want us to\nremember the smallest K elements, you'd make a max\nheap [INAUDIBLE] K [INAUDIBLE]",
    "start": "1275270",
    "end": "1283406"
  },
  {
    "text": "[INAUDIBLE]. PROFESSOR: OK so\nI want to have-- I'll break down your\nsolution into parts .",
    "start": "1283406",
    "end": "1290050"
  },
  {
    "text": "So you want to have a bag of\nthe smallest K elements, right?",
    "start": "1290050",
    "end": "1295090"
  },
  {
    "text": "So instead of the best seen, you\nwant to have the K best seen.",
    "start": "1295090",
    "end": "1300960"
  },
  {
    "text": "And once you have a bag you want\nto go through your elements. And then if you have\nsomething that's",
    "start": "1300960",
    "end": "1306920"
  },
  {
    "text": "better than what\nyou have in the bag, you want to put that in the bag. ",
    "start": "1306920",
    "end": "1312710"
  },
  {
    "text": "Suppose I have,\nsuppose K equals 3, and I have 2, 5,\nand 7 in the bag.",
    "start": "1312710",
    "end": "1319309"
  },
  {
    "text": "And I see 6. Who do I want to\ncompare it with? The biggest thing\nin the bag, right?",
    "start": "1319310",
    "end": "1325700"
  },
  {
    "text": "So if I want the K\nsmallest elements, if this guy is\nsmaller than anything,",
    "start": "1325700",
    "end": "1331830"
  },
  {
    "text": "these aren't the K\nsmallest elements anymore. So I want to take the\nmaximum in the bag,",
    "start": "1331830",
    "end": "1337500"
  },
  {
    "text": "compare it with what\nI'm seeing right now, and if what I'm seeing is\nsmaller I want to replace it.",
    "start": "1337500",
    "end": "1343530"
  },
  {
    "start": "1343530",
    "end": "1349704"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: Because I\nkeep doing this maximum, I keep asking this\nmaximum question, this has to be a max heap.",
    "start": "1349704",
    "end": "1355490"
  },
  {
    "text": "That's why he said max heap. ",
    "start": "1355490",
    "end": "1361610"
  },
  {
    "text": "So you did all\nthese steps at once and then gave me\nthe final answer. But this is how you\ndo it step by step.",
    "start": "1361610",
    "end": "1367230"
  },
  {
    "text": "So it looks like finding\nthe minimum element,",
    "start": "1367230",
    "end": "1372809"
  },
  {
    "text": "except you have a bag. And that bag has to\nbe a maximum heap. And the original heap\nis a minimum heap.",
    "start": "1372810",
    "end": "1378380"
  },
  {
    "text": "So the fact that you have\nto use a maximum heap is a bit nontrivial. Good answer. All right so we\nhave K log N, and we",
    "start": "1378380",
    "end": "1386100"
  },
  {
    "text": "have N log K, so choose what\nyou want to have in your log. We have a solution for you.",
    "start": "1386100",
    "end": "1391410"
  },
  {
    "text": " How about this. How are we doing here?",
    "start": "1391410",
    "end": "1396770"
  },
  {
    "text": " So suppose I'm looking\nfor the fourth element,",
    "start": "1396770",
    "end": "1402690"
  },
  {
    "text": "and my heap has 10 levels. How can I chop it--\nhow can I reduce",
    "start": "1402690",
    "end": "1408050"
  },
  {
    "text": "the number of things\nI'm looking at? ",
    "start": "1408050",
    "end": "1417330"
  },
  {
    "text": "AUDIENCE: You can reduce\nit down to 4 levels. PROFESSOR: I can reduce it\ndown to 4 levels, exactly.",
    "start": "1417330",
    "end": "1423549"
  },
  {
    "text": "So this heap has log N levels.",
    "start": "1423550",
    "end": "1428640"
  },
  {
    "text": "And my K is smaller than log\nN. I can reduce the heap down to K levels and discard\neverything below.",
    "start": "1428640",
    "end": "1435700"
  },
  {
    "text": " And the reason for that is\nwe have a mean heap, right?",
    "start": "1435700",
    "end": "1443310"
  },
  {
    "text": "So if we go down from, on any\npath from the roots to a leaf, the values have to\nincrease, right?",
    "start": "1443310",
    "end": "1451149"
  },
  {
    "text": "Otherwise it's not a mean keep. Otherwise there's an invariant\nviolation somewhere there. So as I go down on any path\nmy numbers are going up.",
    "start": "1451150",
    "end": "1461650"
  },
  {
    "text": "So these are all the\npaths of length 4. All of them have\nto go through here.",
    "start": "1461650",
    "end": "1469370"
  },
  {
    "text": "All the paths of length\n4 will stop here. So I know that\neverything here has",
    "start": "1469370",
    "end": "1474450"
  },
  {
    "text": "to be bigger than\nthe first 4 elements. So if I reduce this to K and\nI discard everything else,",
    "start": "1474450",
    "end": "1481330"
  },
  {
    "text": "what's the running time? So if I use my find my\nextract min algorithm before,",
    "start": "1481330",
    "end": "1487150"
  },
  {
    "text": "what was the running time? AUDIENCE: It was [INAUDIBLE]. ",
    "start": "1487150",
    "end": "1496789"
  },
  {
    "text": "PROFESSOR: So it's not the-- AUDIENCE: Oh sorry it's the-- PROFESSOR: So what's\none operation in a heap?",
    "start": "1496790",
    "end": "1502960"
  },
  {
    "text": "If I have the height of a\nheap, what's an operation? How much time does it\ntake to do one operation",
    "start": "1502960",
    "end": "1508604"
  },
  {
    "text": "as a function of the\nheight of the heap? ",
    "start": "1508604",
    "end": "1513940"
  },
  {
    "text": "So if my heap has h\nlevels, in this case h happens to be log\nN, it's order h.",
    "start": "1513940",
    "end": "1520840"
  },
  {
    "text": "So if I reduce it-- I'm not\nreducing it from N to K. I wish I could. I'm reducing it from log N to K.",
    "start": "1520840",
    "end": "1526799"
  },
  {
    "text": "So for really tiny K's,\nthis becomes order K. And my total running\ntime is K squared.",
    "start": "1526800",
    "end": "1538410"
  },
  {
    "text": "So I'm going to do K\noperations, K extract mins. OK now the reason I wanted\nto entertain this is I",
    "start": "1538410",
    "end": "1545730"
  },
  {
    "text": "claim it's going to be useful\nto help us find the answer. So everything that we have\nhere gives us some insight",
    "start": "1545730",
    "end": "1552630"
  },
  {
    "text": "into what the correct answer is. Well what our correct answer is.",
    "start": "1552630",
    "end": "1557900"
  },
  {
    "text": "There might be others. So let's think for a bit,\nand see if we can do better.",
    "start": "1557900",
    "end": "1564350"
  },
  {
    "start": "1564350",
    "end": "1573220"
  },
  {
    "text": "Am I covering something? I hope not. ",
    "start": "1573220",
    "end": "1587320"
  },
  {
    "text": "So by the way, when you\nhave problems on your own, say you are looking at\nCLRS or at old exams, you want to give yourselves\nhalf an hour, an hour to think.",
    "start": "1587321",
    "end": "1595270"
  },
  {
    "text": "And just this process\nalone is going to help you do better on a test. Because while you're thinking\nyou're going through everything",
    "start": "1595270",
    "end": "1600290"
  },
  {
    "text": "you know. And you're rearranging\nstuff in your brain in a way that will be\neasier to access it later.",
    "start": "1600290",
    "end": "1605336"
  },
  {
    "text": "So now you're going to think,\nwhat do I know about heaps? What do I know that\ntakes log N time?",
    "start": "1605336",
    "end": "1610640"
  },
  {
    "text": "What do I know that\ntakes N log N time? And your brain will\nbe better at answering these kinds of questions later.",
    "start": "1610640",
    "end": "1617128"
  },
  {
    "text": "Now we're not going to\ngive you 30 minutes, because that would make\nus run out of time. ",
    "start": "1617129",
    "end": "1625129"
  },
  {
    "text": "AUDIENCE: You want to reduce\nit down to K elements. PROFESSOR: I want\nto only have to look at K elements, that's good.",
    "start": "1625129",
    "end": "1631650"
  },
  {
    "text": "AUDIENCE: Otherwise you\ncan't plug K into the search. PROFESSOR: Yep,\nOK so that's good. AUDIENCE: Which is interesting,\nbecause it's K log K,",
    "start": "1631650",
    "end": "1639630"
  },
  {
    "text": "and that kind of\nsuggests that you'd have K elements in the tree. But then you're searching\nfor each one in the tree.",
    "start": "1639630",
    "end": "1647860"
  },
  {
    "text": "PROFESSOR: So\nmaybe I'm not going to be able to cut this heap\ninto K elements, right? I'll have to do a bit more.",
    "start": "1647860",
    "end": "1654886"
  },
  {
    "start": "1654886",
    "end": "1660298"
  },
  {
    "text": "AUDIENCE: Can you cut\nthis heap into K elements and use that heap to\ndo our [INAUDIBLE]?",
    "start": "1660298",
    "end": "1668220"
  },
  {
    "text": "PROFESSOR: Let's see\nhow we'd cut this heap. First off let's\nsee how this keep would look like if it's cut.",
    "start": "1668220",
    "end": "1673940"
  },
  {
    "text": "How do we find the\nfirst K elements here? How do we find\nthe first element?",
    "start": "1673940",
    "end": "1680518"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: It's the root.",
    "start": "1680518",
    "end": "1686690"
  },
  {
    "text": "Second element. AUDIENCE: [INAUDIBLE].",
    "start": "1686690",
    "end": "1691740"
  },
  {
    "text": "PROFESSOR: What do I look at? If I want to select the\nsecond element in a heap, how many elements do\nI have to look at?",
    "start": "1691740",
    "end": "1698220"
  },
  {
    "text": "Two, 5 and 7, because everything\nbelow will be bigger, right? OK I look at them,\nI compare them,",
    "start": "1698220",
    "end": "1706179"
  },
  {
    "text": "I know 5 is the smallest one. Now suppose I want to\nfind the third element.",
    "start": "1706180",
    "end": "1711990"
  },
  {
    "text": "Who do I look at? ",
    "start": "1711990",
    "end": "1719120"
  },
  {
    "text": "7 or the thing under 5. So 7 is still in\nthe race for sure. And then I have to look\nat the children of 5.",
    "start": "1719120",
    "end": "1727420"
  },
  {
    "start": "1727420",
    "end": "1734110"
  },
  {
    "text": "Right now we're looking at 3. Suppose this has some\nreally large kids.",
    "start": "1734110",
    "end": "1742770"
  },
  {
    "text": "As in numbers. And I find that this\nis the third element.",
    "start": "1742770",
    "end": "1747810"
  },
  {
    "text": "Who do I look at for\nthe fourth element? ",
    "start": "1747810",
    "end": "1753450"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: OK so this\nisn't in the race",
    "start": "1753450",
    "end": "1760659"
  },
  {
    "text": "anymore, because it's the third. The fourth has to be\neither of these two guys. Or the kids here, right?",
    "start": "1760660",
    "end": "1766390"
  },
  {
    "text": " And it happens to be 7.",
    "start": "1766390",
    "end": "1771840"
  },
  {
    "text": "So I take it out. If I want to look at the-- if I\nwant to find the next element,",
    "start": "1771840",
    "end": "1780539"
  },
  {
    "text": "who's in the race? This guy gets out of the race. AUDIENCE: 7's kids. ",
    "start": "1780540",
    "end": "1788957"
  },
  {
    "text": "[INAUDIBLE] PROFESSOR: OK so\nwe have something. We're not really\ncutting up the heap,",
    "start": "1788958",
    "end": "1794640"
  },
  {
    "text": "but we are sort of computing\nwhere the blade would go if we wanted to cut it up\nin K elements and N minus K",
    "start": "1794640",
    "end": "1802110"
  },
  {
    "text": "elements. Does this make some sense? Nods, no nods.",
    "start": "1802110",
    "end": "1808371"
  },
  {
    "text": "AUDIENCE: I mean I\nguess you're never going to be going\ndown farther than K.",
    "start": "1808371",
    "end": "1814530"
  },
  {
    "text": "PROFESSOR: So let's just\nunderstand the concept. And then we're going\nto do one more pass, write pseudocode, and\nunderstand the running time.",
    "start": "1814530",
    "end": "1821070"
  },
  {
    "text": "Because this is still\nconfusing, right? We'll need one more\npass, otherwise we can't write the\npseudocode into it.",
    "start": "1821070",
    "end": "1827299"
  },
  {
    "text": "So does the concept make sense? AUDIENCE: Is that K log K?",
    "start": "1827300",
    "end": "1833455"
  },
  {
    "text": "PROFESSOR: Yes.  So the idea here is that I\nhave a horizon that says,",
    "start": "1833455",
    "end": "1840960"
  },
  {
    "text": "what are the next elements\nthat I'm willing to consider? And first the horizon\nstarts with just the root,",
    "start": "1840960",
    "end": "1846730"
  },
  {
    "text": "because I know that's\nthe minimum element. And when I take an\nelement out of the horizon I put in its children.",
    "start": "1846730",
    "end": "1852970"
  },
  {
    "text": "That's what I did all the time. So given a horizon how do I\nknow what the next elements",
    "start": "1852970",
    "end": "1859160"
  },
  {
    "text": "to extract out of the horizon? AUDIENCE: [INAUDIBLE]. PROFESSOR: The mean, OK.",
    "start": "1859160",
    "end": "1864720"
  },
  {
    "text": "So I want a data\nstructure for the horizon that can extract means quickly. OK what am I going to\nuse for the horizon?",
    "start": "1864720",
    "end": "1873030"
  },
  {
    "text": "A min heap, excellent. So let's try to\ngo for pseudocode. ",
    "start": "1873030",
    "end": "1886030"
  },
  {
    "text": "Suppose we have H as\nour original heap. So H is a mean heap.",
    "start": "1886030",
    "end": "1891527"
  },
  {
    "text": " We will make Z be our horizon. I can't use H again.",
    "start": "1891527",
    "end": "1897279"
  },
  {
    "text": "It would be nice if\nI could, but I'll use Z because Z's also\na letter in horizon. So Z's the mean heap.",
    "start": "1897279",
    "end": "1904910"
  },
  {
    "text": "And then first I\nwill insert into Z. I'll insert the\nheap's root, right?",
    "start": "1904910",
    "end": "1911620"
  },
  {
    "text": "So Z dot insert H of 1. Remember that heaps\nare actually arrays.",
    "start": "1911620",
    "end": "1918220"
  },
  {
    "text": "I hinted to his earlier. So these nodes have are\nelements in an array.",
    "start": "1918220",
    "end": "1924740"
  },
  {
    "text": "So this is the first element,\nsecond, third, fourth, fifth, sixth.",
    "start": "1924740",
    "end": "1931970"
  },
  {
    "text": "So we're using array\nbacked heaps, and H of one is going to be the root. Then I'm going to compute the\nfirst K elements like this,",
    "start": "1931970",
    "end": "1941120"
  },
  {
    "text": "for K in range-- sorry,\nfor i in range K,",
    "start": "1941120",
    "end": "1949380"
  },
  {
    "text": "so K is going to go from 1 to K. What I want to do? ",
    "start": "1949380",
    "end": "1958590"
  },
  {
    "text": "Take, compute the ith element. How do I do that? AUDIENCE: Extract min.",
    "start": "1958590",
    "end": "1966190"
  },
  {
    "text": "PROFESSOR: i equals\nZ dot extract min. ",
    "start": "1966190",
    "end": "1977009"
  },
  {
    "text": "And then I want to insert\nthe children in the horizon. ",
    "start": "1977010",
    "end": "1982169"
  },
  {
    "text": "Right? How do I do that? ",
    "start": "1982170",
    "end": "1988664"
  },
  {
    "text": "AUDIENCE: 2i and 2i plus 1. PROFESSOR: OK so this is\nif I know the index, right?",
    "start": "1988664",
    "end": "1996110"
  },
  {
    "text": " When I'm putting\nthings in the heap",
    "start": "1996110",
    "end": "2001880"
  },
  {
    "text": "the keys are going\nto be the values, so that I can take\nout the minimum. AUDIENCE: [INAUDIBLE] heap\nfirst and then inserted H Y.",
    "start": "2001880",
    "end": "2010460"
  },
  {
    "text": "PROFESSOR: Yeah, OK. This is empty.",
    "start": "2010460",
    "end": "2016800"
  },
  {
    "text": "And this is the input. ",
    "start": "2016800",
    "end": "2025560"
  },
  {
    "text": "OK so I need to use the\nnumbers as the keys. So when I extract\nsomething out of the heap,",
    "start": "2025560",
    "end": "2031440"
  },
  {
    "text": "so when I extract the first\nelement it's going to say 2, it's not going to say 1.",
    "start": "2031440",
    "end": "2036770"
  },
  {
    "text": "If I want to-- AUDIENCE: Why wouldn't Z dot\nextract [INAUDIBLE] because--",
    "start": "2036770",
    "end": "2042789"
  },
  {
    "text": "PROFESSOR: So this will give\nme the next key in the horizon. AUDIENCE: But-- oh I\nsee, you're starting out",
    "start": "2042790",
    "end": "2051550"
  },
  {
    "text": "with just the first one. PROFESSOR: Yeah. AUDIENCE: Oh and then you\nwant to add in the next. PROFESSOR: So at the\nend of this whole thing,",
    "start": "2051550",
    "end": "2057283"
  },
  {
    "text": "if I'm extracting them right, I\ncan return this variable here.",
    "start": "2057283",
    "end": "2065638"
  },
  {
    "text": "Because after K durations this\nis going to be the Kth element. So I return it and I'm done.",
    "start": "2065639",
    "end": "2071250"
  },
  {
    "text": "The problem is I want this\nguy's index too, right?",
    "start": "2071250",
    "end": "2077520"
  },
  {
    "text": "So I can't just store\nthe key in the heap. I have to augment the heap\nto let me store values.",
    "start": "2077520",
    "end": "2083020"
  },
  {
    "text": "And I have to store the index. So for this guy would\nhave Z insert H of 1,",
    "start": "2083020",
    "end": "2089090"
  },
  {
    "text": "and then it's index 1. Then when I get\nout the ith element",
    "start": "2089090",
    "end": "2096300"
  },
  {
    "text": "I'll also get out it's index. A variable name for that? AUDIENCE: j. PROFESSOR: j.",
    "start": "2096300",
    "end": "2102930"
  },
  {
    "text": "OK why would you name\nyour variables like this? In the previous section I had\na similar suggestion, i, i.",
    "start": "2102930",
    "end": "2110640"
  },
  {
    "text": "So why would you name\nyour variables like this? AUDIENCE: [INAUDIBLE].",
    "start": "2110640",
    "end": "2116530"
  },
  {
    "text": "PROFESSOR: Job security.  All right.",
    "start": "2116530",
    "end": "2121930"
  },
  {
    "text": "So it's OK here. Try to not to do that when\ndoing an exam or an interview, because it reflects\npoorly on you.",
    "start": "2121930",
    "end": "2128184"
  },
  {
    "text": "For an interview and for\nan exam you'll get us upset and we might be less lenient. Or at least explain\nwhat you're doing.",
    "start": "2128184",
    "end": "2134940"
  },
  {
    "text": "So extract min is going\nto give us the key. And it's going to give\nus index in the heap.",
    "start": "2134940",
    "end": "2140829"
  },
  {
    "text": "What do we do afterwards? ",
    "start": "2140830",
    "end": "2146052"
  },
  {
    "text": "AUDIENCE: We add to\n[INAUDIBLE] H of-- PROFESSOR: All right\nso when we take out 2--",
    "start": "2146052",
    "end": "2153430"
  },
  {
    "text": "so we start out with\nan horizon of 2. When we take it out 2's the\nonly thing that's in the horizon",
    "start": "2153430",
    "end": "2158609"
  },
  {
    "text": "first. Then we take it out and its two\nchildren get in the horizon. Then we take out\none of the children",
    "start": "2158610",
    "end": "2166300"
  },
  {
    "text": "and put its children\nin the horizon. So when we take\nout a node we want to put its children\nin the horizon.",
    "start": "2166300",
    "end": "2173400"
  },
  {
    "text": "So we're going to say Z dot-- AUDIENCE: Insert. PROFESSOR: Insert.",
    "start": "2173400",
    "end": "2179740"
  },
  {
    "text": "What do I insert? AUDIENCE: H of I times 2.",
    "start": "2179740",
    "end": "2186055"
  },
  {
    "text": "j times 2. PROFESSOR: See? It's working already.",
    "start": "2186055",
    "end": "2191330"
  },
  {
    "text": "The job security\nthing is working. And? AUDIENCE: 2j plus 1.",
    "start": "2191330",
    "end": "2196630"
  },
  {
    "text": " You have to do two lines.",
    "start": "2196630",
    "end": "2202825"
  },
  {
    "text": "PROFESSOR: OK, sweet. ",
    "start": "2202825",
    "end": "2217990"
  },
  {
    "text": "OK. Does this work? I mean does this do what\nwe wanted it to do earlier?",
    "start": "2217990",
    "end": "2223380"
  },
  {
    "text": " AUDIENCE: Wait,\nwe're extracting oh--",
    "start": "2223380",
    "end": "2231188"
  },
  {
    "start": "2231188",
    "end": "2236304"
  },
  {
    "text": "PROFESSOR: All right first nod. ",
    "start": "2236304",
    "end": "2241710"
  },
  {
    "text": "AUDIENCE: I mean if\nK is small enough. Eventually you'll ask for\nsomething that is out of range.",
    "start": "2241710",
    "end": "2249940"
  },
  {
    "text": "PROFESSOR: Oh so you're\nthinking that eventually these will run out of range. AUDIENCE: If you have\nyour really lopsided array",
    "start": "2249940",
    "end": "2255616"
  },
  {
    "text": "eventually you'll ask for\nsomething that's [INAUDIBLE]. PROFESSOR: OK what would\nwe want to do in that case?",
    "start": "2255616",
    "end": "2262150"
  },
  {
    "text": "AUDIENCE: Just want to check to\nmake sure that the [INAUDIBLE]. PROFESSOR: Yeah, but\notherwise move on, right?",
    "start": "2262150",
    "end": "2268680"
  },
  {
    "text": "If an element doesn't have kids,\nwe don't add on to the horizon. So we need some bounce\nchecks, exception checking,",
    "start": "2268680",
    "end": "2276540"
  },
  {
    "text": "things like that in here. And I won't add\nthat because that will make it look long and ugly.",
    "start": "2276540",
    "end": "2281990"
  },
  {
    "text": "So this is the idea. OK what's the running\ntime for this? ",
    "start": "2281990",
    "end": "2289774"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE].  PROFESSOR: Cool.",
    "start": "2289774",
    "end": "2295520"
  },
  {
    "text": "So creating heaps, initializing,\nall order 1, insertion,",
    "start": "2295520",
    "end": "2302020"
  },
  {
    "text": "this heap is almost empty now. So this is order 1. Then these happen K times.",
    "start": "2302020",
    "end": "2308520"
  },
  {
    "text": "And these are all\noperations on the heap Z. And the heap for the heap Z,\nit has some number of elements.",
    "start": "2308520",
    "end": "2317090"
  },
  {
    "text": "And it's not always going\nto have one element, because every time\nI'm extracting one element I'm adding two.",
    "start": "2317090",
    "end": "2323450"
  },
  {
    "text": "So well how many elements\nis it going to have at most?",
    "start": "2323450",
    "end": "2329461"
  },
  {
    "text": "AUDIENCE: K. PROFESSOR: OK why is that? AUDIENCE: Because each time\nyou add it it's one element.",
    "start": "2329461",
    "end": "2334849"
  },
  {
    "text": "PROFESSOR: So I\nextract one for sure. And then I add at\nmost two elements. So the heap size grows by at\nmost 1 in every iteration.",
    "start": "2334850",
    "end": "2343070"
  },
  {
    "text": "So the heap size Z will\nhave at most K elements. ",
    "start": "2343070",
    "end": "2351030"
  },
  {
    "text": "So now I know the running\nfor all these operations. What is it? Log K. Cool.",
    "start": "2351030",
    "end": "2358680"
  },
  {
    "text": "So it's K times log K. And\nthe reason that it works,",
    "start": "2358680",
    "end": "2364440"
  },
  {
    "text": "it's a bit harder to see. You have to convince yourself\nmaybe using this bigger tree, that whenever you're spending\nexpanding the horizon",
    "start": "2364440",
    "end": "2371800"
  },
  {
    "text": "you're expanding\nit the right way. So the idea is\nagain that whatever",
    "start": "2371800",
    "end": "2377600"
  },
  {
    "text": "path you take down you're\ngoing to see ascending numbers.",
    "start": "2377600",
    "end": "2382760"
  },
  {
    "text": "So when you're\nincreasing the horizon you're always pushing\nit down in such a way that your invariant is that\nall the numbers in the horizon",
    "start": "2382760",
    "end": "2392099"
  },
  {
    "text": "are smaller then their children. And so on and so forth.",
    "start": "2392100",
    "end": "2397260"
  },
  {
    "text": "So the horizon is\nalways guaranteed to have the smallest number\nthat you haven't extracted yet.",
    "start": "2397260",
    "end": "2402330"
  },
  {
    "text": "And that's really the\nonly thing you need.  OK does this make some sense?",
    "start": "2402330",
    "end": "2410430"
  },
  {
    "text": "AUDIENCE: It never would have\noccurred to me on an exam. PROFESSOR: Yeah exactly. This would not occur on an\nexam unless you think a lot,",
    "start": "2410430",
    "end": "2417609"
  },
  {
    "text": "you're super inspired, all that. If it doesn't occur\nto you what do you do? AUDIENCE: Go with\nthe N log K solution.",
    "start": "2417610",
    "end": "2424970"
  },
  {
    "text": "PROFESSOR: OK, very good. Wait. AUDIENCE: K log N. PROFESSOR: OK, K log N\nor N log K, which one?",
    "start": "2424970",
    "end": "2432450"
  },
  {
    "text": "AUDIENCE: K log N. PROFESSOR: Why? Two reasons. K log N is-- so two\nreasons, faster and simpler.",
    "start": "2432450",
    "end": "2440630"
  },
  {
    "text": " So you write this down.",
    "start": "2440630",
    "end": "2447110"
  },
  {
    "text": "And you get half score or 3/4\nof the score and you're done.",
    "start": "2447110",
    "end": "2453510"
  },
  {
    "text": "It's better than\nnothing, anything, and getting a 0, right? I mean 3/4 of a score for\ntwo lines of pseudocode",
    "start": "2453510",
    "end": "2461559"
  },
  {
    "text": "is reasonable, right? Two or three lines. This is three lines probably. ",
    "start": "2461560",
    "end": "2470160"
  },
  {
    "text": "Also on most exams\nwe're humans, right? We might mess them up, we\nmight make them too long.",
    "start": "2470160",
    "end": "2476394"
  },
  {
    "text": "If we make them\ntoo long, you want to get the most\nnumber of points. You'll have time to\nfigure out one or two",
    "start": "2476394",
    "end": "2483050"
  },
  {
    "text": "problems at that level. But if we give you too\nmany, for the rest of them you want to have\nsomething simple that gives you some of the points.",
    "start": "2483050",
    "end": "2490954"
  },
  {
    "text": "Same for an interview. For most interviews\nmost people don't really have a clue how many\nproblems you can solve,",
    "start": "2490954",
    "end": "2497670"
  },
  {
    "text": "how many problems\nare reasonable. So you want, for\nevery problem you want to show some\nsolution reasonably fast.",
    "start": "2497670",
    "end": "2504890"
  },
  {
    "text": "And then see if they're happy. And if they're happy move\non to the next problem. And if they're not happy\nonly then spend more time.",
    "start": "2504890",
    "end": "2511990"
  },
  {
    "text": "So this is as important as that. If you look at the recitation\nnotes we'll have some problems",
    "start": "2511990",
    "end": "2518099"
  },
  {
    "text": "and we'll have some solutions. What are going to do,\nmemorize the solutions? Yay, you know how to\nsolve more problems.",
    "start": "2518100",
    "end": "2523540"
  },
  {
    "text": "There are probably a\nmillion problems in total. That doesn't get you very far. So what you want is to\nunderstand this process",
    "start": "2523540",
    "end": "2529820"
  },
  {
    "text": "that we went through. So every time we tried\nsomething we got from some point to some point with a\nbetter running time.",
    "start": "2529820",
    "end": "2536490"
  },
  {
    "text": "Well except for here. And where we had more\ninsight on the problem. So this is the important part.",
    "start": "2536490",
    "end": "2543029"
  },
  {
    "text": "And I'm going to show you one\nmore problem, really quickly. We're probably not going\nto be able to solve it,",
    "start": "2543030",
    "end": "2549200"
  },
  {
    "text": "because it's hard. But we are going\nto talk about it and see if we can\nget some insight.",
    "start": "2549200",
    "end": "2556299"
  },
  {
    "text": "Let's see, what do\nI want to erase? This. I like that.",
    "start": "2556300",
    "end": "2561462"
  },
  {
    "start": "2561462",
    "end": "2582910"
  },
  {
    "text": "All right, so we have an array\nrandom numbers, 7, 2, 5-- this time there's no\norder in it-- 8, 9, 4.",
    "start": "2582910",
    "end": "2595019"
  },
  {
    "text": "And we tell you that the\narray has 2 to the N numbers, to make the problem easier.",
    "start": "2595020",
    "end": "2600280"
  },
  {
    "text": "1, 2, 3, 4, 5, 6, 7. ",
    "start": "2600280",
    "end": "2606390"
  },
  {
    "text": "6. So you have this array. And we want to answer\nqueries of this shape.",
    "start": "2606390",
    "end": "2613580"
  },
  {
    "text": "Say this array is E,\nand it has N elements, and you know that N\nis some 2 to the K.",
    "start": "2613580",
    "end": "2620750"
  },
  {
    "text": "Minimum of all the\nelements from i to j. ",
    "start": "2620750",
    "end": "2627869"
  },
  {
    "text": "So you have two\nphases, just like we had on a problem on the exam. You have a pre-processing\nstage where you get the array,",
    "start": "2627870",
    "end": "2633093"
  },
  {
    "text": "you do some computation,\nyou save some information. And then you have\na querying phase, where you have to answer\nthese as fast as possible.",
    "start": "2633093",
    "end": "2642280"
  },
  {
    "text": "I see most people\nhave unhappy faces. Bad memories, huh? OK let's not worry\nabout that problem.",
    "start": "2642280",
    "end": "2649780"
  },
  {
    "text": "Let's look at this one. So assuming you have\nas much time as you want to do the\npre-processing, what's",
    "start": "2649780",
    "end": "2656900"
  },
  {
    "text": "the fastest way you\ncould answer these? Yes?",
    "start": "2656900",
    "end": "2662065"
  },
  {
    "text": "AUDIENCE: If you\nhad as much time for pre-processing\n[INAUDIBLE] memorize it. PROFESSOR: All right.",
    "start": "2662065",
    "end": "2667930"
  },
  {
    "text": "So if we compute the answers to\nall possible solutions, right? How would I store that?",
    "start": "2667930",
    "end": "2674770"
  },
  {
    "text": "So I want to do this in order 1. So how would I\nstore these answers?",
    "start": "2674770",
    "end": "2680265"
  },
  {
    "text": "AUDIENCE: Just sort your array. PROFESSOR: OK so\nI sort my array. AUDIENCE: Then you want\nthe minimum from i to j,",
    "start": "2680266",
    "end": "2687830"
  },
  {
    "text": "so look at the ith element\nand that's your [INAUDIBLE]. ",
    "start": "2687830",
    "end": "2699610"
  },
  {
    "text": "PROFESSOR: OK so figure it out? ",
    "start": "2699610",
    "end": "2704690"
  },
  {
    "text": "Well I mean if I can sort\nit I can also say hey, why don't we use\nthis array instead? ",
    "start": "2704690",
    "end": "2712015"
  },
  {
    "text": "And then I'll\nanswer the queries. ",
    "start": "2712016",
    "end": "2718819"
  },
  {
    "text": "You can go off a tangent\ntrying to sort the elements and keep their keys. The important thing is if\nyou think about it for awhile",
    "start": "2718820",
    "end": "2725230"
  },
  {
    "text": "and you see that things\nstop making sense, back out. Look somewhere else. We spent some time trying\nto find a solution based",
    "start": "2725230",
    "end": "2731710"
  },
  {
    "text": "on sorting in my last section. It's not going to work. So--",
    "start": "2731710",
    "end": "2738252"
  },
  {
    "text": "AUDIENCE: Can't you just take\nthe [INAUDIBLE] from i to j? ",
    "start": "2738252",
    "end": "2745032"
  },
  {
    "text": "PROFESSOR: OK let's\nget to that in a bit. So let's keep that in mind. Because that's another point\non the trade off curve.",
    "start": "2745032",
    "end": "2750960"
  },
  {
    "text": "So if I want to serve\nmy queries in order 1, then the way I do that is I will\nhave a hash of all the arrays",
    "start": "2750960",
    "end": "2761780"
  },
  {
    "text": "that look like i, j. So all the possible intervals.",
    "start": "2761780",
    "end": "2768790"
  },
  {
    "text": "And I'll store the answer here. The minimum the\nelements from i to j.",
    "start": "2768790",
    "end": "2778200"
  },
  {
    "text": "And I can do a hash lookup\nin order 1 and get the answer and return the answer.",
    "start": "2778200",
    "end": "2783490"
  },
  {
    "text": "How many elements\nso I have here? ",
    "start": "2783490",
    "end": "2788760"
  },
  {
    "text": "So how much storage do\nI have to use for this? AUDIENCE: O of N squared. PROFESSOR: OK N values for this,\nN values for this, so roughly",
    "start": "2788760",
    "end": "2798560"
  },
  {
    "text": "N squared. What's the time\nfor computing this?",
    "start": "2798560",
    "end": "2803620"
  },
  {
    "text": "Brute force, let's not think. What's the time\nfor computing this? AUDIENCE: N cubed.",
    "start": "2803620",
    "end": "2809280"
  },
  {
    "text": "PROFESSOR: N cubed. You're thinking. ",
    "start": "2809280",
    "end": "2814290"
  },
  {
    "text": "So I have unsquared\nelements here. For every element\nI have to compute the minimum of potentially\norder N elements, right?",
    "start": "2814290",
    "end": "2824330"
  },
  {
    "text": "So this is N cubed. I could reduce it to N squared\nby noticing that if I have the minimum of these\nelements, and I",
    "start": "2824330",
    "end": "2830390"
  },
  {
    "text": "want to compute the\nminimum of these elements, really all I have to\ndo is compute, compare this minimum with this element.",
    "start": "2830390",
    "end": "2838000"
  },
  {
    "text": "So every time I start\nwith an interval of size 1 and then I expand it by 1. So I have my two for loops here.",
    "start": "2838000",
    "end": "2844350"
  },
  {
    "text": "And I keep growing my minimum. So I could get down to\norder of N squared times.",
    "start": "2844350",
    "end": "2853025"
  },
  {
    "text": " So I have one solution\nthat has order",
    "start": "2853025",
    "end": "2861750"
  },
  {
    "text": "of N squared time and\nspace, and then answers the queries in order 1. You had a solution you\nsaid where, what you do",
    "start": "2861750",
    "end": "2869790"
  },
  {
    "text": "is, when you get a query\nyou compute this, right? You were suggesting\nsorting the array.",
    "start": "2869790",
    "end": "2875890"
  },
  {
    "text": "That would be N log N. I\nwould suggest not sorting it. Do the splicing, you look\nthrough all the elements, and you find the minimum.",
    "start": "2875890",
    "end": "2883596"
  },
  {
    "text": "AUDIENCE: I was saying that\nif the original E spans i to j and started at the--",
    "start": "2883596",
    "end": "2888660"
  },
  {
    "text": "PROFESSOR: So when you\nget a query the i's and j's change for every query.",
    "start": "2888660",
    "end": "2894299"
  },
  {
    "text": "Otherwise we could\ncompute the answer. So we have one answer\nwhere we take order",
    "start": "2894300",
    "end": "2901300"
  },
  {
    "text": "N time to answer a query. And what do we do\nfor pre-processing? ",
    "start": "2901300",
    "end": "2912400"
  },
  {
    "text": "Nothing. Order 1. So these are two ends\nof a trade off, right?",
    "start": "2912400",
    "end": "2919349"
  },
  {
    "text": "One possible extreme is that you\npre-compute all your answers. The other possible extreme\nis that you don't do anything",
    "start": "2919350",
    "end": "2925590"
  },
  {
    "text": "and you brute\nforce every answer. And now we want to\nfind a point somewhere on this line between\nthe extremes.",
    "start": "2925590",
    "end": "2931120"
  },
  {
    "text": " So the answer that we're\ngoing to show in the solutions",
    "start": "2931120",
    "end": "2937800"
  },
  {
    "text": "uses order N log N space.",
    "start": "2937800",
    "end": "2945980"
  },
  {
    "text": "And it answers\nthe query by using order 1 elements in this\norder N log N data structure.",
    "start": "2945980",
    "end": "2957580"
  },
  {
    "text": "So I have order N\nlog N partial minima. And I will only use two of them.",
    "start": "2957580",
    "end": "2964540"
  },
  {
    "text": "So the total running time\nisn't actually order 1. But we only use\norder 1 elements.",
    "start": "2964540",
    "end": "2970898"
  },
  {
    "text": " Let's start thinking\nvery quickly.",
    "start": "2970898",
    "end": "2979600"
  },
  {
    "text": "Let's think for about a\nminute, and then we'll go through the solution. And there are\nmultiple solutions.",
    "start": "2979600",
    "end": "2985864"
  },
  {
    "text": "All of them are interesting\nin different ways. And there are other\nsolutions that are equally fun and applicable\nwith not the same running time.",
    "start": "2985864",
    "end": "2995002"
  },
  {
    "start": "2995002",
    "end": "3000820"
  },
  {
    "text": "Let me make some space here. ",
    "start": "3000820",
    "end": "3026647"
  },
  {
    "text": "So like I said, thinking is\na useful process on its own. So you're getting better\njust by doing this. ",
    "start": "3026647",
    "end": "3035010"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] using\nmore than one space total? PROFESSOR: We're\nusing N log N space.",
    "start": "3035010",
    "end": "3040520"
  },
  {
    "text": "AUDIENCE: Oh and it\ntakes constant time-- PROFESSOR: It will only\nlook at two elements. It's actually not constant time.",
    "start": "3040520",
    "end": "3046313"
  },
  {
    "text": "We're not going to worry\ntoo much about time. It turns out being log.",
    "start": "3046313",
    "end": "3051722"
  },
  {
    "text": "AUDIENCE: Ok, what\nwas the order 1 then? PROFESSOR: You only\naccess order 1 elements. Order 1 partial minimum.",
    "start": "3051722",
    "end": "3058854"
  },
  {
    "text": "AUDIENCE: Oh, OK. ",
    "start": "3058854",
    "end": "3064442"
  },
  {
    "text": "Does it have to do\nwith two different K? PROFESSOR: Maybe. AUDIENCE: I don't know\nwhat to do with that.",
    "start": "3064442",
    "end": "3072738"
  },
  {
    "text": "There's probably some\nsort of tree involved. ",
    "start": "3072738",
    "end": "3081120"
  },
  {
    "text": "PROFESSOR: So you're going to\nwant to split things, right? Into halves. And you're going to want to be\nable to do this all the time.",
    "start": "3081120",
    "end": "3088019"
  },
  {
    "text": "And we say 2 to the K so we\ndon't have to worry about, oh my God what happens if\nthe halves aren't equal?",
    "start": "3088020",
    "end": "3093384"
  },
  {
    "text": "You can usually solve this\nwhen you implement the problem. But it's useful\nto not worry about that when you come up\nwith your first algorithm.",
    "start": "3093384",
    "end": "3101760"
  },
  {
    "text": "If you're going to start\ndividing in halves. ",
    "start": "3101760",
    "end": "3113586"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. ",
    "start": "3113586",
    "end": "3119460"
  },
  {
    "text": "PROFESSOR: Um. AUDIENCE: [INAUDIBLE]. ",
    "start": "3119460",
    "end": "3124740"
  },
  {
    "text": "PROFESSOR: So that leads\nto another useful solution. That leads to a solution\nthat takes-- that has N log N",
    "start": "3124740",
    "end": "3132060"
  },
  {
    "text": "storage and it will\nrun in N log N time with N log N element axes.",
    "start": "3132060",
    "end": "3137210"
  },
  {
    "text": "So what you thinking\nof is you're going to have your array\nof elements, right? And say you want to find the\nminimum from here to here.",
    "start": "3137210",
    "end": "3145510"
  },
  {
    "text": "You're going to have\nyour array split in half. So you're going to find\nthe minimum of this,",
    "start": "3145510",
    "end": "3151619"
  },
  {
    "text": "and the minimum of this. But to do that you'll\nhave to recurse. So this is also\nsay split in half.",
    "start": "3151620",
    "end": "3157075"
  },
  {
    "text": "So you'll have to\nfind-- so it turns out that if you do this,\nin the end you'll",
    "start": "3157075",
    "end": "3162340"
  },
  {
    "text": "have log N minima that\nyou have to look at. But this is more, this is a\ncooler and more useful thing,",
    "start": "3162340",
    "end": "3169600"
  },
  {
    "text": "so I'll try to put it\non a PSet or something to make you think about it. So this is-- don't\ntell people yet.",
    "start": "3169600",
    "end": "3175526"
  },
  {
    "text": "You might have a\nsolution to a problem. ",
    "start": "3175526",
    "end": "3185880"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: OK. So what we thought of, or the\nway we thought of doing it,",
    "start": "3185880",
    "end": "3193100"
  },
  {
    "text": "is 6, 7, 2, 5, 3, 8, 9, 4.",
    "start": "3193100",
    "end": "3199870"
  },
  {
    "text": "So we compute these\npartial minima. We split the array into two. And these are the\nminima that we compute.",
    "start": "3199870",
    "end": "3208313"
  },
  {
    "text": " Sorry, this is like\nthis, this is like this.",
    "start": "3208313",
    "end": "3215994"
  },
  {
    "text": " So everything, so all the\nleft half then these guys,",
    "start": "3215994",
    "end": "3222022"
  },
  {
    "text": "then these guys, then this guy. Everything here, then these\nguys, then these guys,",
    "start": "3222022",
    "end": "3228510"
  },
  {
    "text": "then this guy. So if your i and j are on\ndifferent sides of the middle,",
    "start": "3228510",
    "end": "3235099"
  },
  {
    "text": "then you do two\nlookups, you're done. If they're in the\nsame half, then you",
    "start": "3235100",
    "end": "3240810"
  },
  {
    "text": "have a problem\nthat's half the size. So you're going to have\nto take this array that's half the size, 2, 5.",
    "start": "3240810",
    "end": "3247380"
  },
  {
    "text": "Split it into halves\nand do the same thing.  And then we're going to have to\ndo the same to this other one.",
    "start": "3247380",
    "end": "3255690"
  },
  {
    "text": "3, 8, 9, 4, split it into\nhalves and do the same thing. ",
    "start": "3255690",
    "end": "3263010"
  },
  {
    "text": "So in the end you'll\nend up in someplace where your interval ages are on\ndifferent sides of the middle.",
    "start": "3263010",
    "end": "3269410"
  },
  {
    "text": "And you look at two\nelements and you're done. Let's see how much\nspace this takes.",
    "start": "3269410",
    "end": "3275859"
  },
  {
    "text": "Can someone tell me a\nrecursion for how much space, for how many minimums\nI would need to keep?",
    "start": "3275860",
    "end": "3285220"
  },
  {
    "text": "So space for an elements is? ",
    "start": "3285220",
    "end": "3291070"
  },
  {
    "text": "AUDIENCE: The first\nlevel you have 8. So go down by an order of 2.",
    "start": "3291070",
    "end": "3299390"
  },
  {
    "text": "PROFESSOR: So what's\nthe first level? AUDIENCE: Of 8 N. PROFESSOR: So order N plus?",
    "start": "3299390",
    "end": "3305200"
  },
  {
    "text": " AUDIENCE: N over 2? t of N over 2?",
    "start": "3305200",
    "end": "3310682"
  },
  {
    "text": "PROFESSOR: OK S\nbecause it's space. N over 2. OK.",
    "start": "3310682",
    "end": "3316045"
  },
  {
    "text": "And?  AUDIENCE: [INAUDIBLE]. ",
    "start": "3316045",
    "end": "3322940"
  },
  {
    "text": "PROFESSOR: You're\nmissing something. Look at this picture. So this is the whole thing.",
    "start": "3322940",
    "end": "3327970"
  },
  {
    "text": "Then I have a half. And then what else do I have?",
    "start": "3327970",
    "end": "3333120"
  },
  {
    "text": "AUDIENCE: 2. PROFESSOR: The other half. AUDIENCE: Oh, 2. PROFESSOR: OK so the\ndifference between these two",
    "start": "3333120",
    "end": "3338270"
  },
  {
    "text": "is that one of them\ngives you order N, the other one gives you N log\nN. So I gave you the answer, so I can't ask you\nfor the answer now.",
    "start": "3338270",
    "end": "3345049"
  },
  {
    "text": "But where did we\nsee this before? Pretend these are t's. AUDIENCE: [INAUDIBLE]. PROFESSOR: Sorry?",
    "start": "3345050",
    "end": "3350620"
  },
  {
    "text": "So these are t's, this is the\nrecursion for [? more sort ?]. So once you put it up you\ndon't draw the recursion tree",
    "start": "3350620",
    "end": "3356049"
  },
  {
    "text": "and solve it. You say this is what we saw\nin [? more sort. ?] Therefore, the solution is N\nlog N. So this is",
    "start": "3356049",
    "end": "3365720"
  },
  {
    "text": "how you show you\nhave N log N space, and it's pretty clear\nthat you're only going to access two elements.",
    "start": "3365720",
    "end": "3370975"
  },
  {
    "text": "AUDIENCE: I don't\nunderstand how [INAUDIBLE]. ",
    "start": "3370975",
    "end": "3376680"
  },
  {
    "text": "PROFESSOR: How it works? So you have your i\nand you have your j.",
    "start": "3376680",
    "end": "3383340"
  },
  {
    "text": "Let's make that one i here. If you want to find\nthe minimum, if i and j are on different sides of the\nhalf, you have this and this.",
    "start": "3383340",
    "end": "3393550"
  },
  {
    "text": "And these two partial minima\ncover your entire interval. ",
    "start": "3393550",
    "end": "3399830"
  },
  {
    "text": "Now if they're on the\nsame side of the half then you recurse to a\nsmaller problem.",
    "start": "3399830",
    "end": "3407120"
  },
  {
    "text": "AUDIENCE: Well you don't have\nto there because you already have the minimum\nof that section.",
    "start": "3407121",
    "end": "3412140"
  },
  {
    "text": "PROFESSOR: Yeah. AUDIENCE: It wouldn't work\nif you had 6 and 2, right?",
    "start": "3412140",
    "end": "3417280"
  },
  {
    "text": "Or that. PROFESSOR: Yeah. AUDIENCE: Well why not\njust take 7 and 2 then?",
    "start": "3417280",
    "end": "3423410"
  },
  {
    "text": "Why do you have to break\nup the entire panel? PROFESSOR: Assume there's\nmore things there. ",
    "start": "3423410",
    "end": "3430490"
  },
  {
    "text": "AUDIENCE: Oh I see. PROFESSOR: So if you have this,\nnow it's no longer true, right?",
    "start": "3430490",
    "end": "3436660"
  },
  {
    "text": "So wherever they are\nhere, you do that. And remember your pseudocode\nhas to be as simple as possible",
    "start": "3436660",
    "end": "3442670"
  },
  {
    "text": "to reduce the\nprobability of bugs. So you want to do the\nsimplest possible thing, not have special cases.",
    "start": "3442670",
    "end": "3449680"
  },
  {
    "text": "OK. By the way there's\na study that shows that for good or bad\nprogrammers, if you have",
    "start": "3449680",
    "end": "3457079"
  },
  {
    "text": "1,000 lines of code, there's a\nconstant probability of a bug. And the constants are\ndifferent for good",
    "start": "3457080",
    "end": "3462390"
  },
  {
    "text": "versus bad programmers,\nbut it's still a constant. So how many mistakes\nyou make is directly",
    "start": "3462390",
    "end": "3469030"
  },
  {
    "text": "proportional to\nhow much you write. This is why we like\nsimple solutions. ",
    "start": "3469030",
    "end": "3475850"
  },
  {
    "text": "OK, any questions on this? So we have four problems.",
    "start": "3475850",
    "end": "3480990"
  },
  {
    "text": "We didn't cover one. Look at the other one,\nlook at the solution. Ideally look at the problem,\nthink for at least half",
    "start": "3480990",
    "end": "3487120"
  },
  {
    "text": "an hour, then look\nat the solution. What I want you to take\naway is not just oh, here are three problems, let's\nmemorize how we solve them.",
    "start": "3487120",
    "end": "3494000"
  },
  {
    "text": "But the whole process\nthing, and how we played with data structures\nand how we used all the hints",
    "start": "3494000",
    "end": "3499100"
  },
  {
    "text": "that we possibly could to build\nmore insights into the problem. OK, cool.",
    "start": "3499100",
    "end": "3505020"
  },
  {
    "start": "3505020",
    "end": "3505631"
  }
]