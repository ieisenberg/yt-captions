[
  {
    "start": "0",
    "end": "120000"
  },
  {
    "text": " Good afternoon. So we're going to continue\nour discussion about atomicity",
    "start": "780",
    "end": "6300"
  },
  {
    "text": "and how to achieve atomicity. And today the focus\nis going to be on implementing this idea\ncalled recoverability,",
    "start": "6302",
    "end": "11860"
  },
  {
    "text": "which we just described\nand defined the last time. So if you recall from\nlast time, the idea",
    "start": "11860",
    "end": "18710"
  },
  {
    "text": "is that when you have modules\nthat interact with one another, and in this example M1 calls\nM2, and M2 fails somewhere",
    "start": "18710",
    "end": "27590"
  },
  {
    "text": "in the middle of this\ninvocation and it recovers, the goal here is\nto try to make sure",
    "start": "27590",
    "end": "32669"
  },
  {
    "text": "that the invoker of this\nmodule, in this case M1, or all subsequent\ninvokers of M1,",
    "start": "32670",
    "end": "38949"
  },
  {
    "text": "don't see any\npartial results that were computed during this\nexecution when M2 failed.",
    "start": "38950",
    "end": "45670"
  },
  {
    "text": "And this was the idea that\nwe called recoverability. And the definition\nof recoverability",
    "start": "45670",
    "end": "50900"
  },
  {
    "text": "was that an action,\nwhich is made up of a composite\nsequence of steps is",
    "start": "50900",
    "end": "56340"
  },
  {
    "text": "recoverable from the point\nof view of its invoker, if it looks to the invoker and\nto all subsequent invokers as",
    "start": "56340",
    "end": "63480"
  },
  {
    "text": "if this action either\ncompletely occurred, or if it didn't completely\noccur and aborted, it",
    "start": "63480",
    "end": "68770"
  },
  {
    "text": "aborted in such a way that all\npartial effects of that action were undone or backed out.",
    "start": "68770",
    "end": "74770"
  },
  {
    "text": "So in other words,\nrecoverability is this idea that you\neither do it all, either complete the action,\nor do none of the action.",
    "start": "74770",
    "end": "81730"
  },
  {
    "text": "But the effects\nare as if you were able to back out of the action.",
    "start": "81730",
    "end": "86850"
  },
  {
    "text": "And we use this\nidea to then talk about a particular special\ncase of recoverability",
    "start": "86850",
    "end": "93800"
  },
  {
    "text": "to implement a\nrecoverable sector, which is a single sector\nof a disk where",
    "start": "93800",
    "end": "99680"
  },
  {
    "text": "what we were able to do was to\nensure that everybody reading, we defined a put procedure\nand a get procedure.",
    "start": "99680",
    "end": "106710"
  },
  {
    "text": "So, readers would\ninvoke get. And we ensure that\neverybody doing a get",
    "start": "106710",
    "end": "111750"
  },
  {
    "text": "would never see the\npartial results of any put. So, if a failure were to\nhappen in the middle of a put,",
    "start": "111750",
    "end": "117020"
  },
  {
    "text": "people doing a get wouldn't\nsee these partial results. And, the main idea here\nwas to actually maintain",
    "start": "117020",
    "end": "125000"
  },
  {
    "start": "120000",
    "end": "195000"
  },
  {
    "text": "what is more generally known as\na shadow version, or a shadow copy, or a shadow\nobject of the data,",
    "start": "125000",
    "end": "131690"
  },
  {
    "text": "and we maintained two\nversions of the data that we call D0 and D1. And, we maintain\na sector that we",
    "start": "131690",
    "end": "141550"
  },
  {
    "text": "call the chooser sector to\nchoose between the two shadows. And, what we were able to argue\nwas that this chooser always",
    "start": "141550",
    "end": "149250"
  },
  {
    "text": "points to the version that\nyou want people to get from to read from, and so\nwhen someone does a put,",
    "start": "149250",
    "end": "155510"
  },
  {
    "text": "the idea is first to write\nto the version that's not currently being read from. So the chooser points to zero.",
    "start": "155510",
    "end": "160799"
  },
  {
    "text": "Then the putter would put\ndata, write data into one.",
    "start": "160800",
    "end": "165927"
  },
  {
    "text": "And if the failure happened\nin the middle of that write, there's no problem\nbecause people who read would still read from zero.",
    "start": "165927",
    "end": "172049"
  },
  {
    "text": "And we reduce this\ncase of proving this algorithm\ncorrect to the case when a failure happened in the\nmiddle of writing the chooser",
    "start": "172050",
    "end": "178200"
  },
  {
    "text": "sector. And we were able to argue\nthat as long as people, if a failure happened in\nthe middle of writing here,",
    "start": "178201",
    "end": "184070"
  },
  {
    "text": "either of these\nversions is correct because a failure\nby definition didn't happen in the middle of writing\neither of these two sectors.",
    "start": "184070",
    "end": "190429"
  },
  {
    "text": "And therefore you could\npick either of them and read from it. And during this\nprocess, we came up",
    "start": "190429",
    "end": "197740"
  },
  {
    "start": "195000",
    "end": "248000"
  },
  {
    "text": "with this notion which\nwe're going to generalize today called a commit point.",
    "start": "197740",
    "end": "201990"
  },
  {
    "text": "The commit point is the point\nat which for any action, the results are visible\nto subsequent actions.",
    "start": "207220",
    "end": "213160"
  },
  {
    "text": "And if a failure happens\nbefore the commit point, then the idea is,\nin general, you would not want people not to\nsee the partial results that",
    "start": "213160",
    "end": "221189"
  },
  {
    "text": "might have accumulated\nbefore the failure occurred. And in this particular\ncase, the commit point",
    "start": "221190",
    "end": "226210"
  },
  {
    "text": "is when the chooser sector gets\nwritten to the current version of the data. And that call to writing\nthe chooser sector returns.",
    "start": "226210",
    "end": "234050"
  },
  {
    "text": "And if it returns, then you\nknow that people doing a get will get from the version\nthat just got written.",
    "start": "234050",
    "end": "240360"
  },
  {
    "text": "So, in the implementation\nof recoverable put, the commit point was\nwhen this call returned.",
    "start": "240360",
    "end": "245959"
  },
  {
    "start": "248000",
    "end": "284000"
  },
  {
    "text": "So now, the question for today\nis how we deal with larger actions --",
    "start": "248940",
    "end": "256898"
  },
  {
    "text": "-- because this is a plan that\nworks pretty well for single sector puts and gets. So, we were able to make\nindividual sector reads",
    "start": "260200",
    "end": "267680"
  },
  {
    "text": "and writes recoverable. But if you think about any\nserious application or even any",
    "start": "267680",
    "end": "272760"
  },
  {
    "text": "toy application, in most\ncases you end up having more data than what fits\ninto one single sector.",
    "start": "272760",
    "end": "278700"
  },
  {
    "text": "And, you might have\nthings touching data all over the place.",
    "start": "278700",
    "end": "281919"
  },
  {
    "text": "And, our approach to doing this\nis to actually first define",
    "start": "284750",
    "end": "290360"
  },
  {
    "text": "what a programmer\nmust do, what somebody wishing to write a program\nthat is a recoverable action",
    "start": "290360",
    "end": "296740"
  },
  {
    "text": "must do. And then we're going to\nimplement that underneath in a system so the\nprogrammer doesn't have to worry about\nimplementing recoverability.",
    "start": "296740",
    "end": "304759"
  },
  {
    "text": "So the idea here is\nfor the programmer of a recoverable action, to\nstart writing that action using",
    "start": "304760",
    "end": "311410"
  },
  {
    "text": "a system call, a call that they\ncall begin recoverable action, and then discipline\nherself or himself",
    "start": "311410",
    "end": "319230"
  },
  {
    "text": "to write some software which\nhas a small number of rules as to what can go in here.",
    "start": "319230",
    "end": "325120"
  },
  {
    "text": "And then, explicitly,\nwhen they want to commit that\nrecoverable action, make its results visible\nto subsequent actions,",
    "start": "325120",
    "end": "332100"
  },
  {
    "text": "invoke commit. And then, they are allowed\nto do a little bit more work,",
    "start": "332100",
    "end": "339570"
  },
  {
    "text": "or a lot of work here. But, there's very\nstrict restrictions on what they can\ndo after a commit.",
    "start": "339570",
    "end": "346370"
  },
  {
    "text": "And then, they can end using\nend recoverable action.",
    "start": "346370",
    "end": "352289"
  },
  {
    "text": "And this phase here\nbefore the commit is called the pre-commit phase. This is the post-commit phase. And the idea here is\nif a failure occurred",
    "start": "352289",
    "end": "359199"
  },
  {
    "text": "here or an abort occurred before\nthe commit and this action",
    "start": "359200",
    "end": "364730"
  },
  {
    "text": "was made to abort,\nthen the system must restore the state\nof all of the variables,",
    "start": "364730",
    "end": "369980"
  },
  {
    "text": "and all of the data that was\ntouched here to the same state before this action\neven got invoked.",
    "start": "369980",
    "end": "375770"
  },
  {
    "text": "OK, it's as if not\nof this happened. So this is the not at all\npart of this definition",
    "start": "375770",
    "end": "380970"
  },
  {
    "text": "of recoverability. Once you reach this point\nof the commit returns, the only thing you're\nallowed to do here",
    "start": "380970",
    "end": "386056"
  },
  {
    "text": "are things that cause\nyou to complete. You're not allowed\nto abort here. You're not allowed\nto back out here. So once you reach\nthe point, it means",
    "start": "386056",
    "end": "393420"
  },
  {
    "text": "you're in the do it all part\nof do it all or none at all. So you have to complete\nall the way to the end.",
    "start": "393420",
    "end": "401110"
  },
  {
    "text": "And what this really\nmeans is that all of the data that you\nwant to manipulate, and all of the resources\nthat you want to accumulate,",
    "start": "401110",
    "end": "407550"
  },
  {
    "text": "and we'll look at locks as a\nresource that you would like to accumulate in order to\nenforce isolation, which",
    "start": "407550",
    "end": "412710"
  },
  {
    "text": "is a topic for\nnext time, all that has to happen here so that\nonce you reach this point and it ends, then even if\na failure occurs when it",
    "start": "412710",
    "end": "419539"
  },
  {
    "text": "restarts, you just\nhave to crunch through and finish what\nwas going on here. And that can just happen.",
    "start": "419540",
    "end": "424970"
  },
  {
    "text": "There's nothing to\nacquire, no resources to get all of the data\nvariables have already been put in their correct\nsituation in the correct state.",
    "start": "424970",
    "end": "433500"
  },
  {
    "text": "So the interesting\npart really is what happens between the\nbegin recoverable action and until the commit finishes.",
    "start": "433500",
    "end": "439050"
  },
  {
    "text": "And that's really what\nwe're going to focus on. Now in addition to commit,\nthere is another call",
    "start": "439050",
    "end": "445370"
  },
  {
    "start": "442000",
    "end": "592000"
  },
  {
    "text": "that we have to explicitly\nthink about, and that's abort.",
    "start": "445370",
    "end": "447949"
  },
  {
    "text": "And there's two or\nthree different ways in which abort may be invoked. The first is a program that\nmight herself or himself have",
    "start": "451356",
    "end": "458590"
  },
  {
    "text": "abort in their code. For example, in that bank\ntransfer application, if you discover that your\nsavings account doesn't",
    "start": "458590",
    "end": "465030"
  },
  {
    "text": "have enough funds to cover\na transfer, you read it, and then you maybe\nwrite something, and then you discover that you\ndon't have the funds to cover",
    "start": "465030",
    "end": "472328"
  },
  {
    "text": "the transfer. You might just abort. And the semantics of\nabort are that once abort",
    "start": "472329",
    "end": "477460"
  },
  {
    "text": "is called by the\nprogrammer, they can be guaranteed that when\nthe next person invokes",
    "start": "477460",
    "end": "482720"
  },
  {
    "text": "a recoverable action that\ninvolves the same data items, those readers will see the same\nstate as if this action never",
    "start": "482720",
    "end": "491470"
  },
  {
    "text": "started. So what this means is\nthat the system must have a plan of undoing\nand backing out",
    "start": "491470",
    "end": "496509"
  },
  {
    "text": "of any changes that\nmight have occurred before this abort is called. Another reason an\nabort might occur",
    "start": "496510",
    "end": "502620"
  },
  {
    "text": "is that you're in a, for\nexample, database application, and you're booking\nall sorts of things",
    "start": "502620",
    "end": "508490"
  },
  {
    "text": "like plane tickets, and\nair tickets, and hotel reservations, and so on.",
    "start": "508490",
    "end": "513640"
  },
  {
    "text": "And you book a few\nof them and then you discover you can't get\none of the reservations",
    "start": "513640",
    "end": "518807"
  },
  {
    "text": "that you want. You might as a user might\nabort the whole transaction. And that causes all the\nindividual things that",
    "start": "518808",
    "end": "525970"
  },
  {
    "text": "are in partial state to abort. Another reason why\nabort might happen is that, and we'll see\nthis the next time when",
    "start": "525970",
    "end": "532589"
  },
  {
    "text": "we talk about locking,\nanytime you have locks, we already saw that\nanytime you have locks you",
    "start": "532590",
    "end": "538250"
  },
  {
    "text": "have the danger of deadlock. In one way in which\nthe system implementing these atomic actions, both for\nisolation in particular, deals",
    "start": "538250",
    "end": "546780"
  },
  {
    "text": "with deadlocks is when\ntwo or more actions are waiting for each other, waiting\non locks that the others hold,",
    "start": "546780",
    "end": "552940"
  },
  {
    "text": "you just abort one of them,\nor abort as many of them as needed for\nprogress to happen. So the system might\nunilaterally decide",
    "start": "552940",
    "end": "559129"
  },
  {
    "text": "to abort certain actions. And, what that means is that\nthe systems' abort had better have a plan to undo all\npartial changes that",
    "start": "559130",
    "end": "565410"
  },
  {
    "text": "might have occurred before\nit returns from abort.",
    "start": "565410",
    "end": "569360"
  },
  {
    "text": "OK, so that's the general model. So what we're going\nto do today is to understand what happens\nwhen data variables are written",
    "start": "572090",
    "end": "581360"
  },
  {
    "text": "inside one of these\nrecoverable actions: how come it's implemented,\nand how abort is implemented.",
    "start": "581360",
    "end": "587070"
  },
  {
    "text": "And that's the plan. And, once we do\nthat, we will have implemented recoverability. So we're going to study two\nsolutions to this problem.",
    "start": "587070",
    "end": "596420"
  },
  {
    "start": "592000",
    "end": "647000"
  },
  {
    "text": "And the first solution uses an\nidea called version histories.",
    "start": "596420",
    "end": "605389"
  },
  {
    "text": "And version histories\nreally build on an idea that we did see last\ntime when we talked",
    "start": "605390",
    "end": "611970"
  },
  {
    "text": "about recoverable sector,\nwhich is this rule that we call the golden rule of\nrecoverability, which",
    "start": "611970",
    "end": "617250"
  },
  {
    "text": "says never modify the only\ncopy because if you modify the only copy of something and\na failure occurs, then you don't",
    "start": "617250",
    "end": "623002"
  },
  {
    "text": "really have a way\nof backing it out because you don't know what\nthe original value was. Version histories\ngeneralize the idea",
    "start": "623002",
    "end": "629560"
  },
  {
    "text": "to say, never modify anything. So the idea is anytime you\nwant to write a variable,",
    "start": "629560",
    "end": "635140"
  },
  {
    "text": "you don't actually\noverwrite anything. You create another\nversion of the variable and somehow arrange\nfor the set of pointers",
    "start": "635140",
    "end": "641860"
  },
  {
    "text": "that, for a variable\nto point to all of the versions of\nany given variable.",
    "start": "641860",
    "end": "647130"
  },
  {
    "start": "647000",
    "end": "700000"
  },
  {
    "text": "And to understand that, we need\nto understand the difference between conventional storage,\nlike a conventional variable",
    "start": "647130",
    "end": "654220"
  },
  {
    "text": "that is also called a cell\nstore or a cell storage item,",
    "start": "654220",
    "end": "659379"
  },
  {
    "text": "and a variable that allows you\nto implement versions which we're going to call\na journal based storage.",
    "start": "659380",
    "end": "668740"
  },
  {
    "text": "So, cell storage is\ntraditional storage. So if you have a variable,\nX, that's cell storage and you set X to some value,\nV, what ends up happening",
    "start": "668740",
    "end": "678250"
  },
  {
    "text": "is that the cell that\ncontains X is you write the value, V, into X.",
    "start": "678250",
    "end": "685101"
  },
  {
    "text": "In other words, you overwrite\nwhatever there is you know, and replace it with V. And, this overwriting really is\nwhat causes the problem if you",
    "start": "685101",
    "end": "691540"
  },
  {
    "text": "don't have another copy of this\nvariable somehow maintained, overwriting means that this\nrule of recoverabilities",
    "start": "691540",
    "end": "698589"
  },
  {
    "text": "is being violated. We're going to use the word\ninstall for these writes.",
    "start": "698590",
    "end": "705260"
  },
  {
    "start": "700000",
    "end": "738000"
  },
  {
    "text": "So we'll be installing\nitems into cell stores. So what that means is assigning\na value to a cell store",
    "start": "705260",
    "end": "712370"
  },
  {
    "text": "variable. And the problem is this gets\nin the way of the golden rule.",
    "start": "712370",
    "end": "719519"
  },
  {
    "text": "So what were going to do is\nuse these cell storage items",
    "start": "719520",
    "end": "726620"
  },
  {
    "text": "that we know how to build\nthat's the memory abstraction to build an expanded\nversion called a journal",
    "start": "726620",
    "end": "732060"
  },
  {
    "text": "storage of generalized\nstorage in which nothing is ever overwritten.",
    "start": "732060",
    "end": "736050"
  },
  {
    "text": "The way this works\nis that if you have X, the very first time\nyou set X to some value,",
    "start": "738615",
    "end": "746959"
  },
  {
    "text": "you end up creating a data\nstructure in cell storage that looks like this.",
    "start": "746960",
    "end": "753550"
  },
  {
    "text": "You have a value of V1. And you also keep track of the\nidentifier of the action that",
    "start": "753550",
    "end": "758829"
  },
  {
    "text": "created that. And, that'll turn\nout to be useful for us to know the identifiers\nof the actions that created any given variable.",
    "start": "758830",
    "end": "766044"
  },
  {
    "text": "And how you get\nthese identifiers? When begin_ra is called,\nit returns an ID, OK,",
    "start": "766044",
    "end": "772040"
  },
  {
    "text": "and the system knows that. And this ID is available\nto the program as well.",
    "start": "772040",
    "end": "777630"
  },
  {
    "text": "Then the next version, if\nX gets set by any action to a different value, what you\ndo is you created that as V2.",
    "start": "777630",
    "end": "785260"
  },
  {
    "text": "And, you keep track of the\nidentifier that maintains that. And then you got V3,\nand so on, all the way.",
    "start": "785260",
    "end": "790938"
  },
  {
    "text": "And the current version,\nthe latest version might be Vn that\nwas written by idn.",
    "start": "790940",
    "end": "796920"
  },
  {
    "text": "Now if the same\naction repeatedly writes the same variable,\nyou just create new versions. So it isn't like there's\none version per action.",
    "start": "796920",
    "end": "803440"
  },
  {
    "text": "It's just that there's\none version every time you write something. So literally, nothing\nis overwritten.",
    "start": "803440",
    "end": "810182"
  },
  {
    "text": "And so, that's X. So, X itself points to the\nhead version, the very latest",
    "start": "810182",
    "end": "815580"
  },
  {
    "text": "version that was written. And, you could\nimagine that there are these pointers pulling\nyou back like a link list.",
    "start": "815580",
    "end": "822075"
  },
  {
    "text": "But the nice thing about it\nis this is the journal store. So, X itself is\nthis whole thing.",
    "start": "822075",
    "end": "826550"
  },
  {
    "text": "And, we'll implement two\ncalls that when you have, this is basically a\nmemory abstraction.",
    "start": "830580",
    "end": "836130"
  },
  {
    "text": "So, you need to read\nand you need to write. So, for write, we're\ngoing to come up",
    "start": "836130",
    "end": "841410"
  },
  {
    "text": "with a call called write\njournal, which in the notes I think has a slightly\ndifferent name.",
    "start": "841410",
    "end": "848740"
  },
  {
    "text": "I think they call\nit write new value. But write journal makes it clear\nthat it's for journal store.",
    "start": "848740",
    "end": "854410"
  },
  {
    "text": "And, this is easy. It's some data item, X. It's some value, V.",
    "start": "854410",
    "end": "860470"
  },
  {
    "text": "And, it's the ID of the\naction that's doing the write. And this is very\neasy to implement.",
    "start": "860470",
    "end": "866080"
  },
  {
    "text": "All you do is you\ncreate a new version. And then you take the current\nthing that X is pointing to,",
    "start": "866080",
    "end": "872250"
  },
  {
    "text": "and make the current version's\nnext pointer point to that. And then you make X\npoint to the new version.",
    "start": "872250",
    "end": "878210"
  },
  {
    "text": "So, it's just a\nlink list thing, OK? And, in addition\nto write journal,",
    "start": "878210",
    "end": "885000"
  },
  {
    "start": "881000",
    "end": "1071000"
  },
  {
    "text": "we obviously need to\nimplement read journal.",
    "start": "885000",
    "end": "888750"
  },
  {
    "text": "And read journal is going to\ntake a data item that you wish to read, X, and for reasons\nthat will become clearer",
    "start": "895430",
    "end": "902130"
  },
  {
    "text": "in a minute, it also takes\nthe ID of the action that wants to do the read, OK?",
    "start": "902130",
    "end": "908220"
  },
  {
    "text": "So if you want to\nread something, the idea is going to be the\nfollowing: the idea is going",
    "start": "908220",
    "end": "913250"
  },
  {
    "text": "to be that some of these\nactions are actions; some of these versions are\ngoing to have been written",
    "start": "913250",
    "end": "920550"
  },
  {
    "text": "by actions that were committed. OK, and some of\nthese actions were going to have been\nwritten by actions",
    "start": "920550",
    "end": "927570"
  },
  {
    "text": "that started writing things and\nthen maybe failed or aborted. So they never committed.",
    "start": "927570",
    "end": "934887"
  },
  {
    "text": "Now, clearly when\nyou do read journal, you don't want to see the\nresults of those actions that were never committed\nbecause what you want",
    "start": "934887",
    "end": "942050"
  },
  {
    "text": "to see from the definition\nthat we laid out are once you reach\nthe commit point, you want to see the\nchange is visible.",
    "start": "942050",
    "end": "948130"
  },
  {
    "text": "Before that, you don't\nwant anything visible. So as long as you can\nkeep track of which of these actions committed, and\nwhich of these didn't commit,",
    "start": "948130",
    "end": "955269"
  },
  {
    "text": "you can implement read journal\nby starting at the most recent version,\nand going backwards",
    "start": "955270",
    "end": "961660"
  },
  {
    "text": "until you find the first\nversion that corresponds to a value that was written by\nan action that was committed.",
    "start": "961660",
    "end": "970400"
  },
  {
    "text": "So what you need to do is start\nfrom here and look at IDN. If IDN, you need to maintain\nanother table that tells you",
    "start": "970400",
    "end": "977200"
  },
  {
    "text": "whether IDN committed or not. If it committed, then\nreturn that value. If not, go back one.",
    "start": "977200",
    "end": "983140"
  },
  {
    "text": "And, keep going until you\nfind the most recent version that was written by\na committed action.",
    "start": "983140",
    "end": "989699"
  },
  {
    "text": "If you do that, then\nread journal clearly returns to you what\nyou would want,",
    "start": "989700",
    "end": "995220"
  },
  {
    "text": "which is the value\nthat was written by the last committed action. The only other tweak\nthat you want to do,",
    "start": "995220",
    "end": "1001540"
  },
  {
    "text": "and the reason why ID is\npassed as an argument read journal is if the current\naction has already written,",
    "start": "1001540",
    "end": "1006628"
  },
  {
    "text": "so let's say you are\nimplementing an action and you set the\nvalue of X to 17,",
    "start": "1006629",
    "end": "1011750"
  },
  {
    "text": "then when you read\nthe value of X, you would want the\nvalue that you set. I mean, you wouldn't want\nthe previous committed action",
    "start": "1011750",
    "end": "1017660"
  },
  {
    "text": "that's one way of\ndefining read journal. So as you go from the most\nrecent version to the oldest",
    "start": "1017660",
    "end": "1025179"
  },
  {
    "text": "version, you either look see\nwhether the value that you are reading now is a value that\nyou set, your own action set.",
    "start": "1025180",
    "end": "1031569"
  },
  {
    "text": "And if it was, just return that. And then, it'll return\nto you the last value that this action set.",
    "start": "1031569",
    "end": "1036592"
  },
  {
    "text": "Otherwise, you keep\ngoing until you find the value set by the\nmost recent committed action.",
    "start": "1036592",
    "end": "1042300"
  },
  {
    "text": "And since we aren't dealing here\nwith concurrent actions at all, right, we've already said last\ntime that, until next Monday,",
    "start": "1042300",
    "end": "1051056"
  },
  {
    "text": "we're only going to be dealing\nwith one action at a time. There's no concurrent actions. Clearly, this algorithm\nwill be correct.",
    "start": "1051056",
    "end": "1057856"
  },
  {
    "text": "You start from the\nmost recent version, keep going until you find the\nfirst version that was either done by this action\nthat's doing the read,",
    "start": "1057856",
    "end": "1064740"
  },
  {
    "text": "or the first version that\nwas written by an action that",
    "start": "1064740",
    "end": "1069820"
  },
  {
    "text": "committed. So, clearly what this means\nis that you need a table",
    "start": "1069820",
    "end": "1076380"
  },
  {
    "start": "1071000",
    "end": "1149000"
  },
  {
    "text": "that you have to maintain\nthat stores the status of these different actions. It needs to store which\nactions committed,",
    "start": "1076380",
    "end": "1082410"
  },
  {
    "text": "and which actions didn't commit. And that's going to be done\nusing a data structure called the commit record table.",
    "start": "1082410",
    "end": "1087730"
  },
  {
    "text": "And this is a very simple table. It just has ID1,\nID2, all the way down to whatever ID's you have.",
    "start": "1092000",
    "end": "1098300"
  },
  {
    "text": "Every time somebody calls begin\nRA, you return them an ID, and then you create\nthis table that as soon",
    "start": "1098300",
    "end": "1105222"
  },
  {
    "text": "as they create this action,\nyou set their state to pending, which I'll call P, OK?",
    "start": "1105222",
    "end": "1111090"
  },
  {
    "text": "And, any time an action\ncommits, you replace this P with a C, which is\na commit record.",
    "start": "1111090",
    "end": "1118159"
  },
  {
    "text": "OK, and once it's replaced\nwith a C for an action, this item is called the\ncommit record for an action.",
    "start": "1118160",
    "end": "1127130"
  },
  {
    "text": "So now, when you want\nto do read journal and you're looking to see\nwhether for any given action,",
    "start": "1127130",
    "end": "1132442"
  },
  {
    "text": "things were committed,\nthe corresponding action is committed or not,\nyou look at this. You see its IDN. You look for IDN in this table,\nC, if it's committed or not.",
    "start": "1132442",
    "end": "1140299"
  },
  {
    "text": "If it's not committed, then\nyou go to the previous version and you do the same thing. If it's committed,\nthen you return it.",
    "start": "1140300",
    "end": "1150400"
  },
  {
    "text": "Now, it's not actually clear\nwhy you need this pending thing here. But it'll turn out that you will\nrequire the pending thing when",
    "start": "1150400",
    "end": "1156740"
  },
  {
    "text": "you deal with\nisolation on Monday. So for now, you don't have\nto worry about the fact that these pending\nthings are there, OK?",
    "start": "1156740",
    "end": "1164350"
  },
  {
    "text": "Now, suppose an action\nstarts, and then it aborts. So I mentioned here that when\nan action starts and it aborts,",
    "start": "1164350",
    "end": "1171780"
  },
  {
    "text": "the system has to do some kind\nof undoing of data in order for abort to be\ncorrectly implemented. So, the state of the system's\nrestored to the state",
    "start": "1171780",
    "end": "1178910"
  },
  {
    "text": "before the action even started. The nice thing about this way of\nimplementing version histories",
    "start": "1178910",
    "end": "1184875"
  },
  {
    "text": "and read journal\nis you don't have to do anything on an abort.",
    "start": "1184875",
    "end": "1187440"
  },
  {
    "text": "If the application or\nthe system called abort, nothing has to be done because\nread journal basically is just",
    "start": "1190080",
    "end": "1196900"
  },
  {
    "text": "going scanning this\nbackward, looking for whether the version\nwas written by itself, that same action or looking for\nwhether the version was written",
    "start": "1196900",
    "end": "1205080"
  },
  {
    "text": "by a committed action. So as long as you can\nfind for any given ID whether it was committed or\nnot, that's all you need.",
    "start": "1205080",
    "end": "1212960"
  },
  {
    "text": "OK, but just for completeness,\nand this will become useful the next time, all we'll do when\nabort is called on an action,",
    "start": "1212960",
    "end": "1222960"
  },
  {
    "text": "so abort takes the ID of\nthe action as an argument, all we'll do is we'll\nreplace, if ID7 aborts,",
    "start": "1222960",
    "end": "1229940"
  },
  {
    "text": "we'll just replace the pending. We'll replace that\nwith an abort, OK?",
    "start": "1229940",
    "end": "1235510"
  },
  {
    "text": "So, this commit\nrecord table contains the status of the actions. And that status could either be\ncommitted, pending, or aborted.",
    "start": "1235510",
    "end": "1244990"
  },
  {
    "text": "When it starts, it's pending. And then it's pending as long as\neither it aborts, in which case",
    "start": "1244990",
    "end": "1251350"
  },
  {
    "text": "it aborted, or it's committed. Now, if it just fails and you\ndon't do anything about it,",
    "start": "1251350",
    "end": "1256832"
  },
  {
    "text": "and there's no abort\ncall, it'll continue to remain in the pending state. But that's OK because\nwe're never really going",
    "start": "1256832",
    "end": "1262870"
  },
  {
    "text": "to read the value\nof anything that's the in the pending state that\nwas set by an action that's in the pending state.",
    "start": "1262870",
    "end": "1268145"
  },
  {
    "start": "1270000",
    "end": "1585000"
  },
  {
    "text": "So is this clear? OK, this approach is\nactually quite reasonable",
    "start": "1272210",
    "end": "1278420"
  },
  {
    "text": "except that it has\na few problems. The first problem\nit has is, well, it",
    "start": "1278420",
    "end": "1285720"
  },
  {
    "text": "has two related problems. And that's the first class\nof problems that it has is that although it looks\nlike we've really",
    "start": "1285720",
    "end": "1291210"
  },
  {
    "text": "nailed this problem of achieving\nrecoverable storage using this journal storage\nidea, building",
    "start": "1291210",
    "end": "1297340"
  },
  {
    "text": "general recoverable actions so\nthat for any variable that's read inside here or read\ninside a recoverable action,",
    "start": "1297340",
    "end": "1305549"
  },
  {
    "text": "you use this general\nstorage idea. It's not quite correct\nbecause you have to ask, what happens if the system\nfails while the system is",
    "start": "1305550",
    "end": "1315840"
  },
  {
    "text": "writing this commit record? So, the application\ncalls commit. The system's starting to\nwrite this commit record",
    "start": "1315840",
    "end": "1321910"
  },
  {
    "text": "and it fails. Or you might more\ngenerally ask, what happens if I create this new\nversion in write journal,",
    "start": "1321910",
    "end": "1331299"
  },
  {
    "text": "and as I'm creating a new\nversion of a variable, the system crashes. So some garbage\ngot written here.",
    "start": "1331300",
    "end": "1337580"
  },
  {
    "text": "Or more likely, some garbage\ngot written not in here but as I was changing\nthis pointer for X",
    "start": "1337580",
    "end": "1343791"
  },
  {
    "text": "to point to the\nmost recent version, some garbage got written. So, all subsequent reads\nof X don't quite work.",
    "start": "1343791",
    "end": "1348230"
  },
  {
    "text": "The answer to this\nquestion is that we know how to solve this problem\nbecause that question is",
    "start": "1351730",
    "end": "1357257"
  },
  {
    "text": "basically identical. Both of these are identical. If we know how to solve\nthe problem of writing a single, recoverable sector,\na single, small item of data,",
    "start": "1357257",
    "end": "1364640"
  },
  {
    "text": "then we know how to solve\nthese two problems because both of these are writing recoverably\na small amount of data.",
    "start": "1364640",
    "end": "1370519"
  },
  {
    "text": "In one case, a\npointer that takes X to point to the most recent\nversion, in another case",
    "start": "1370520",
    "end": "1375930"
  },
  {
    "text": "it's a single data\nitem that corresponds to the commit record in\nthis commit record table.",
    "start": "1375930",
    "end": "1383240"
  },
  {
    "text": "And so this shows this\nidea of bootstrap, that in order to build\nthis atomic action,",
    "start": "1383240",
    "end": "1391600"
  },
  {
    "text": "this recoverable action, we end\nup [SOUND OFF/THEN ON]",
    "start": "1391600",
    "end": "1396919"
  },
  {
    "text": "...and then you bootstrap on... ...and then you bootstrap on",
    "start": "1396920",
    "end": "1405040"
  },
  {
    "text": "something that we know\nalready how to do because there are these cases\nwhere you have to make sure that writes to\ncertain pointers,",
    "start": "1405040",
    "end": "1411320"
  },
  {
    "text": "and some table items\nare done atomically. And we know how to do that\nbecause we just told you",
    "start": "1411320",
    "end": "1416539"
  },
  {
    "text": "how to do recoverable sectors. And you could just take\nshadowed objects for these items, and\n[UNINTELLIGIBLE PHRASE]",
    "start": "1416540",
    "end": "1423520"
  },
  {
    "text": "to get this bootstrap. So that's the first thing that...\nthe first step problem.",
    "start": "1423520",
    "end": "1430980"
  },
  {
    "text": "There's another problem, not\nso much a correctness problem, but a problem in general\nusing these version",
    "start": "1430980",
    "end": "1436559"
  },
  {
    "text": "histories in order to\nbuild recoverable actions. Any ideas on what that might be?",
    "start": "1436560",
    "end": "1443280"
  },
  {
    "text": "Like, why would we\nwant to use this? Student: [UNINTELLIGIBLE] Is this a space? Student: [UNINTELLIGIBLE]",
    "start": "1445940",
    "end": "1452260"
  },
  {
    "text": "Well, you kind of can't\nreally get around that. I mean, it's true that\nthere are these older versions that you keep forever.",
    "start": "1452260",
    "end": "1457860"
  },
  {
    "text": "But, there are\noptimizations you can bring to bear that are beneath these old versions that\nyou don't really care about anymore. Because really\nthe read only",
    "start": "1457860",
    "end": "1464380"
  },
  {
    "text": "requires, at least for the way\nwe [UNINTELLIGIBLE] about this when we talk\nabout isolation tomorrow. But really, the\nread only",
    "start": "1464380",
    "end": "1470820"
  },
  {
    "text": "requires for a\nsingle action case the last committed version. So, you could garbage collect\nthis stuff if you want.",
    "start": "1470820",
    "end": "1477520"
  },
  {
    "text": "Student: [UNINTELLIGIBLE] Yeah, it's really slow.",
    "start": "1477520",
    "end": "1484920"
  },
  {
    "text": "So, for applications\nwhere you care about performance, or\nreasonable performance, [UNINTELLIGIBLE]\nthis is really slow.",
    "start": "1484920",
    "end": "1492800"
  },
  {
    "text": "And naturally, it's\nnot to say that this is a bad idea, an idea that\nshouldn't be used at all.",
    "start": "1492800",
    "end": "1497940"
  },
  {
    "text": "In fact, it's a perfectly\ngood idea for many cases where you might,\nfor various reasons, want to store restorative\nrecords of old data",
    "start": "1497940",
    "end": "1504200"
  },
  {
    "text": "and you don't care about fast\nread or write performance. So it's perfectly good\nfor certain applications.",
    "start": "1504200",
    "end": "1509679"
  },
  {
    "text": "But it's not good for\napplications that want reasonably high-performance.",
    "start": "1509680",
    "end": "1516360"
  },
  {
    "text": "And the reason that\nthis thing is small is because if you\nthink about it, it actually optimizes what you\nmight think of as uncommon case",
    "start": "1516360",
    "end": "1525179"
  },
  {
    "text": "because what it ensures is that\nwhen you fail and you recover, you have to do no work. So crash recovery is really\nfast in this approach",
    "start": "1525180",
    "end": "1532140"
  },
  {
    "text": "because there's nothing to\nbe done for crash recovery. But reads and writes are\nslow because a read involves",
    "start": "1532150",
    "end": "1539481"
  },
  {
    "text": "traversing the list. A write involves doing some\n[UNINTELLIGIBLE  PHRASE]. And so, it almost\noptimizes the opposite",
    "start": "1539482",
    "end": "1546769"
  },
  {
    "text": "of what you would want. If you want to\nwrite performance, you want to form the principle\nof optimizing the common case. And in order to optimize the\ncommon case, what it means,",
    "start": "1546770",
    "end": "1554580"
  },
  {
    "text": "what you want to do here is\nto make the reads and writes really fast, and\nmaybe pay the penalty",
    "start": "1554580",
    "end": "1561120"
  },
  {
    "text": "of a little bit of extra\ntiming in dealing with [UNINTELLIGIBLE PHRASE].",
    "start": "1561120",
    "end": "1566740"
  },
  {
    "text": "[LAUGHTER] It's working now? [LAUGHTER]",
    "start": "1566740",
    "end": "1573059"
  },
  {
    "text": "Hello?",
    "start": "1573660",
    "end": "1574540"
  },
  {
    "text": "Technician: Sorry. All right, thanks.",
    "start": "1580720",
    "end": "1583520"
  },
  {
    "start": "1585000",
    "end": "3047000"
  },
  {
    "text": "OK, so what you want to do\nis optimize, whoa, it's loud. [LAUGHTER]",
    "start": "1586600",
    "end": "1593200"
  },
  {
    "text": "So the integral of the volume\nover time is correct.",
    "start": "1593920",
    "end": "1597120"
  },
  {
    "text": "OK, so the solution\nto this problem where we want to optimize\nthe common case of reads",
    "start": "1603660",
    "end": "1609919"
  },
  {
    "text": "and writes, but we are\nOK taking a bunch of time to do crash recovery is\nan idea called logging.",
    "start": "1609920",
    "end": "1616870"
  },
  {
    "text": "So the way to think of a log\nis it's like a version history except you don't have a\nversion for each variable.",
    "start": "1624890",
    "end": "1633860"
  },
  {
    "text": "You think of it as an Interleaf\nversion data structure that interleaves all the version\nhistories for all of the data",
    "start": "1633860",
    "end": "1641520"
  },
  {
    "text": "that was ever written\nduring an action, during all of the\nactions that ran.",
    "start": "1641520",
    "end": "1647100"
  },
  {
    "text": "So what this means is that you\ncan write the log sequentially. And you've seen this\nin yesterday's paper where they use logs for\na different application",
    "start": "1647100",
    "end": "1654120"
  },
  {
    "text": "for high performance in a\nfile system for a system where writes normally\nwould incur a lot of seeks.",
    "start": "1654120",
    "end": "1663081"
  },
  {
    "text": "But you can use the same idea. In this case, we're going to\nuse a log for crash recovery. But the fundamental property\nof a log data structure",
    "start": "1663081",
    "end": "1670669"
  },
  {
    "text": "is that it needs be\nwritten only sequentially. And we know that disks\ndo that pretty fast.",
    "start": "1670670",
    "end": "1676090"
  },
  {
    "text": "It's only when you have\nto seek that and read small chunks of data with\nseeks that you end up being really slow.",
    "start": "1676090",
    "end": "1683580"
  },
  {
    "text": "So we're going to use cell\nstorage to satisfy our reads and writes.",
    "start": "1683580",
    "end": "1690912"
  },
  {
    "text": "So all of those are going\nto go to cell stores. You can read means\nyou just read a variable. You don't traverse any\nlink lists, and writes",
    "start": "1690912",
    "end": "1696930"
  },
  {
    "text": "you don't create\nany new versions. You just write into cell store.",
    "start": "1696930",
    "end": "1702720"
  },
  {
    "text": "But then the log is going to be\nstored on a nonvolatile medium",
    "start": "1702720",
    "end": "1712539"
  },
  {
    "text": "such as a disk. And it's written sequentially.",
    "start": "1712540",
    "end": "1716690"
  },
  {
    "text": "So once we have those two, our\nplan is going to be as follows.",
    "start": "1725500",
    "end": "1732390"
  },
  {
    "text": "And this plan is the\nsame plan that's adopted. Although there is\ndozens of ways of doing",
    "start": "1732390",
    "end": "1738450"
  },
  {
    "text": "log based crash recover,\nthey all essentially follow the same basic plan.",
    "start": "1738450",
    "end": "1744740"
  },
  {
    "text": "You read and write\nnormally to cell storage. And you also write\na copy of what",
    "start": "1744740",
    "end": "1749865"
  },
  {
    "text": "you're reading and writing. You write an encoding\nof what you're writing, any updates that you\nmake into the log.",
    "start": "1749865",
    "end": "1755970"
  },
  {
    "text": "OK, and we'll talk\nin more detail about what you're exactly\nright into the log and when you write\ninto the log, OK?",
    "start": "1755970",
    "end": "1762530"
  },
  {
    "text": "So that allows us to follow this\ngolden rule of recoverability. It'll turn out that the\nlog is a copy of the data.",
    "start": "1762530",
    "end": "1768049"
  },
  {
    "text": "So you always have two copies of\nthe data: one in cell storage, one on the log.",
    "start": "1768050",
    "end": "1771690"
  },
  {
    "text": "So what happens when you fail? Well, when you fail, unlike in\nthe version history case where",
    "start": "1776170",
    "end": "1782080"
  },
  {
    "text": "you could fail and restart, and\nyou don't have to do anything, here when you fail, the system\nruns a recovery procedure.",
    "start": "1782080",
    "end": "1792750"
  },
  {
    "text": "And that recovery procedure\nrecovers from the log that we have conveniently\narranged to write in the non-volatile storage.",
    "start": "1792750",
    "end": "1798550"
  },
  {
    "text": "So, it remains\neven after a crash, and it remains after\na crash recovers.",
    "start": "1798550",
    "end": "1805128"
  },
  {
    "text": "And there are two things to do\nwhile recovering from the log.",
    "start": "1805129",
    "end": "1807670"
  },
  {
    "text": "For actions that didn't get to\nfinish the commit, for actions",
    "start": "1810460",
    "end": "1815819"
  },
  {
    "text": "that were uncommitted,\nwhich is this commit never return, what we have to\ndo is to look carefully",
    "start": "1815819",
    "end": "1821230"
  },
  {
    "text": "to see whether the corresponding\ncell store had any updates that were made to it.",
    "start": "1821230",
    "end": "1827360"
  },
  {
    "text": "And it'll turn out\nthat the log is going to help us keep track\nof what items were updated by any given action.",
    "start": "1827360",
    "end": "1833160"
  },
  {
    "text": "And what we're going\nto end up doing is for uncommitted actions,\nwe're going to back out.",
    "start": "1833160",
    "end": "1840150"
  },
  {
    "text": "In other words, we're going to\nundo any changes that it made, and the log is going\nto help us do that.",
    "start": "1843969",
    "end": "1848176"
  },
  {
    "text": "And conversely, for\ncommitted actions, because the semantics we\nwant are that once committed,",
    "start": "1851470",
    "end": "1857320"
  },
  {
    "text": "you would like the changes to\nbe visible to other people. For committed actions,\nwhat you would like to do",
    "start": "1857320",
    "end": "1863610"
  },
  {
    "text": "are to make sure\nthat the changes made by all committed\nactions are in fact installed in the cell store.",
    "start": "1863610",
    "end": "1870880"
  },
  {
    "text": "And what this means is\nthat if they turn out to not have been\ninstalled, and we're going to use the log to tell us\nwhether they've been installed",
    "start": "1870880",
    "end": "1877520"
  },
  {
    "text": "or not, we will\nredo those actions.",
    "start": "1877520",
    "end": "1879640"
  },
  {
    "text": "And, the second\nthing we need to do is what happens if\nan abort is called",
    "start": "1885720",
    "end": "1891720"
  },
  {
    "text": "either by the application\nor by the system. Well, in this case, what we\nhave to do is to use the log,",
    "start": "1891720",
    "end": "1900310"
  },
  {
    "text": "and to keep track,\nthe log is going to help us keep track of the\nchanges made by this action to the cell store.",
    "start": "1900310",
    "end": "1906760"
  },
  {
    "text": "The cell store itself doesn't\nhave an ocean of old or new because it's overwritten. So the log is going\nto tell us that.",
    "start": "1906760",
    "end": "1912270"
  },
  {
    "text": "And when abort is\ncalled, we just want to back out by undoing the\nchanges of the current action.",
    "start": "1912270",
    "end": "1918120"
  },
  {
    "text": "And that's the plan. So the first thing\nwe need to figure out",
    "start": "1924447",
    "end": "1930820"
  },
  {
    "text": "is what this log looks like.",
    "start": "1930820",
    "end": "1932070"
  },
  {
    "text": "So as we saw from\nthis discussion, the log is going to be required\nfor us to do two things. We're going to be undoing\nthings from the log,",
    "start": "1936310",
    "end": "1943520"
  },
  {
    "text": "and we're going to be\nredoing things from the log. So what that suggests is that\nany time you update cell store,",
    "start": "1943520",
    "end": "1952440"
  },
  {
    "text": "you change X from 17 to 25. What you'd really\nlike to maintain is what the value was before the\nchange was made so that you can",
    "start": "1952440",
    "end": "1960520"
  },
  {
    "text": "undo if you need to,\nand what the value is after the change was made so\nthat you can redo if you have",
    "start": "1960520",
    "end": "1966940"
  },
  {
    "text": "to if by chance the\nactual cell store didn't get written at the right time. So really the way to think\nabout logging base crash",
    "start": "1966940",
    "end": "1974450"
  },
  {
    "text": "recover is that\nthe log is really the authoritative\nversion of the data. The cell store itself is you\nshould think of as a cache.",
    "start": "1974450",
    "end": "1981970"
  },
  {
    "text": "And we've seen this idea before. The cell store you should\nthink of as a cache. If a failure happens,\nyou really have",
    "start": "1981970",
    "end": "1987630"
  },
  {
    "text": "to be careful about\ntrusting the cell store. And, you don't trust\nwhat's in the cell store. You start with a log,\nand by selectively",
    "start": "1987630",
    "end": "1995050"
  },
  {
    "text": "undoing certain\nchanges that were made and redoing certain\nchanges, you produce a more pristine, correct version\nof the data, which corresponds",
    "start": "1995050",
    "end": "2002970"
  },
  {
    "text": "to the changes made by all\nthe committed actions being visible, and the changes made\nby all the uncommitted actions",
    "start": "2002970",
    "end": "2009120"
  },
  {
    "text": "being wiped away to\nthe previous version.",
    "start": "2009120",
    "end": "2015290"
  },
  {
    "text": "OK, so what does\nthe log look like? Well, as I've already said, a\nlog is like a version history except it interleaves\neverything,",
    "start": "2015290",
    "end": "2021899"
  },
  {
    "text": "and it's sequential. So it's really an\nappend-only data structure.",
    "start": "2021900",
    "end": "2024870"
  },
  {
    "text": "And there's a few\ndifferent kinds of records",
    "start": "2028410",
    "end": "2038240"
  },
  {
    "text": "that the log maintains. In particular, two are going\nto be interesting to us.",
    "start": "2038240",
    "end": "2043480"
  },
  {
    "text": "So there are two types of\nrecords that we care about.",
    "start": "2043480",
    "end": "2050550"
  },
  {
    "text": "The first type are\nupdate records, which are written\nto the log whenever",
    "start": "2050550",
    "end": "2058750"
  },
  {
    "text": "a cell store item changes. So, if X goes from 17 to 25,\nwhat you would write",
    "start": "2058750",
    "end": "2065860"
  },
  {
    "text": "is an update record\nthat looks like this. You store the ID\nof the transaction,",
    "start": "2065860",
    "end": "2071989"
  },
  {
    "text": "sorry, ID of the recoverable\naction that did the update. And then, you store two items.",
    "start": "2071989",
    "end": "2078850"
  },
  {
    "text": "One of them is an undo item\nor an undo action, actually. And, an undo that might\nsay — and a redo action.",
    "start": "2078850",
    "end": "2094599"
  },
  {
    "text": "So what this means\nhere is that let's say that the actual\nstep of this action said X is assigned\nto some value, new.",
    "start": "2094600",
    "end": "2104900"
  },
  {
    "text": "In the log, what\nyou would write is keep track of old value,\nthe current value of X, and make that the undo step.",
    "start": "2104900",
    "end": "2112021"
  },
  {
    "text": "And then, keep track of\nthe change that was made and make that the real step.",
    "start": "2112021",
    "end": "2117860"
  },
  {
    "text": "So now, after doing this,\nif the system were to fail, and this action 172 were\nto never commit then",
    "start": "2117860",
    "end": "2126070"
  },
  {
    "text": "you can systematically\nstart with the log, start with the latest\nitem in the log and go backwards, and\nundo any changes made",
    "start": "2126070",
    "end": "2134670"
  },
  {
    "text": "by actions that didn't commit. And conversely, and you might\nneed to do this as well,",
    "start": "2134670",
    "end": "2139970"
  },
  {
    "text": "you might want to look at all\nthe actions that committed, and make sure that all those\nactions, those individual steps",
    "start": "2139970",
    "end": "2145480"
  },
  {
    "text": "in those actions are redone so\nthat once the crash recovers, you have a correct\nversion of the data.",
    "start": "2145480",
    "end": "2150360"
  },
  {
    "text": "Now the other thing\nthat you will need, and you'll see why in a moment,\nis another kind, a record",
    "start": "2153240",
    "end": "2160970"
  },
  {
    "text": "and a log, which we're going\nto call the outcome record.",
    "start": "2160970",
    "end": "2167213"
  },
  {
    "text": "And this outcome\nis the thing that keeps track of whether an\naction committed or not. Remember I said you're going\nto look through the log",
    "start": "2167214",
    "end": "2173720"
  },
  {
    "text": "and figure out which\nactions committed, and which didn't commit. You need to store\nthat somewhere. In particular, what that means\nis that when an action commits,",
    "start": "2173720",
    "end": "2181011"
  },
  {
    "text": "you had better make sure that\nthere is in it them in the log because the log really is\nthe only correct version of the data.",
    "start": "2181011",
    "end": "2186900"
  },
  {
    "text": "So you have an outcome\nrecord, and this has an ID of the action. It might be 174.",
    "start": "2186900",
    "end": "2194470"
  },
  {
    "text": "And, there's a status\nthat might stay committed.",
    "start": "2194470",
    "end": "2199550"
  },
  {
    "text": "And other values for the\nstatus might be aborted is a possible value\nof the status.",
    "start": "2202450",
    "end": "2209250"
  },
  {
    "text": "Another is pending. So for various\nreasons, what we will",
    "start": "2209250",
    "end": "2216770"
  },
  {
    "text": "have is when begin recoverable\naction returns with an ID, we will create a\nlog entry that says",
    "start": "2216770",
    "end": "2223359"
  },
  {
    "text": "that this action has begun. So you might have\na begin record. It's not that important\nto worry about for now.",
    "start": "2223360",
    "end": "2230200"
  },
  {
    "text": "But the status of a committed\nrecord and an aborted, and the update type are\nimportant to understand.",
    "start": "2230200",
    "end": "2237300"
  },
  {
    "text": "So once you have this\nlog structure understood, or the log data\nstructure understood,",
    "start": "2240220",
    "end": "2246390"
  },
  {
    "text": "what you have to\nthink about our there are two questions that you\nend up spending a lot of time",
    "start": "2246390",
    "end": "2251520"
  },
  {
    "text": "thinking about in designing\nthese log-based protocols. The first one is when\nto write the log.",
    "start": "2251520",
    "end": "2257829"
  },
  {
    "text": "And the second one is,\nyou know, I sort of said you just look\nthrough the log and undo the guys\nwho didn't commit,",
    "start": "2265040",
    "end": "2270980"
  },
  {
    "text": "and redo the people\nwho committed. But you have to be very\ncareful about doing that. And that corresponds\nto this question",
    "start": "2270980",
    "end": "2278020"
  },
  {
    "text": "of exactly how to recover,\nhow to systematically recover",
    "start": "2278020",
    "end": "2283150"
  },
  {
    "text": "so the state of the system is\nas I have described before. So those are the questions\nwe're going to deal",
    "start": "2283150",
    "end": "2289970"
  },
  {
    "text": "with for the next few minutes.",
    "start": "2289970",
    "end": "2291220"
  },
  {
    "text": "Let's do this with\na specific example. And it will turn\nout and to answer doesn't really depend\non the example.",
    "start": "2295890",
    "end": "2301770"
  },
  {
    "text": "But the example is good to\ngive you the right intuition. And this example is actually\npretty common example",
    "start": "2301770",
    "end": "2308690"
  },
  {
    "text": "of a disk-bound database.",
    "start": "2308690",
    "end": "2310140"
  },
  {
    "text": "So a disk bound\ndatabase is one where",
    "start": "2314800",
    "end": "2320270"
  },
  {
    "text": "you have applications\nwriting to a database, which is where the cell\nstorage is implemented.",
    "start": "2320270",
    "end": "2327000"
  },
  {
    "text": "And the cell storage is on disk.",
    "start": "2327000",
    "end": "2328560"
  },
  {
    "text": "So, you might have\nwrites of cell items, X,",
    "start": "2332020",
    "end": "2337680"
  },
  {
    "text": "and they go to a database. And similarly, in any\ndisk bound database",
    "start": "2337680",
    "end": "2343510"
  },
  {
    "text": "that you want\ncrash recovery for, you need to maintain a log. And for various reasons\nhaving to do primarily",
    "start": "2343510",
    "end": "2349699"
  },
  {
    "text": "with dealing with failures\nof the disk hardware itself, it's very often useful\nto an experience",
    "start": "2349699",
    "end": "2355020"
  },
  {
    "text": "to maintain the log\non a different disk. So we'll maintain\nfor this example",
    "start": "2355020",
    "end": "2360230"
  },
  {
    "text": "the log on a different disk. So whenever write X is done,\njust looking at the log data",
    "start": "2360230",
    "end": "2366970"
  },
  {
    "text": "structure, you need to\nwrite an update record and append that to the log.",
    "start": "2366970",
    "end": "2373160"
  },
  {
    "text": "So at some point you would\nneed to write this to the log. You need to log the update --",
    "start": "2373160",
    "end": "2380700"
  },
  {
    "text": "-- that says that X change from\nsomething to something else.",
    "start": "2380700",
    "end": "2387650"
  },
  {
    "text": "So the question is, when\ndo you write both of these? So one approach might be that\nit really doesn't matter.",
    "start": "2387650",
    "end": "2394340"
  },
  {
    "text": "As long as the log gets\nthe data, you're fine. But that has a\ncouple of problems. In particular,\nsuppose you write X",
    "start": "2394340",
    "end": "2402140"
  },
  {
    "text": "without writing the log entry. And as soon as you write\nX, before you have a chance to write to the log,\nyou crash, or the system",
    "start": "2402140",
    "end": "2410140"
  },
  {
    "text": "causes this program to abort,\nor the program itself aborts. It writes X and then it\ndoes some calculation",
    "start": "2410140",
    "end": "2417250"
  },
  {
    "text": "and the it decides to abort. Now you are in trouble because\nthe log hasn't kept track yet",
    "start": "2417250",
    "end": "2425260"
  },
  {
    "text": "the log hasn't had\na chance of keeping track of what the\nold value was, which",
    "start": "2425260",
    "end": "2431240"
  },
  {
    "text": "means that if you\nreally want to restore this database by\nundoing this write to X,",
    "start": "2431240",
    "end": "2436730"
  },
  {
    "text": "you have to do a\nwhole lot of work. And it might be\nimpossible to do it. If you didn't know, for example,\nwhat the current value was,",
    "start": "2436730",
    "end": "2442900"
  },
  {
    "text": "there was absolutely\nno way for you to restore to the old value.",
    "start": "2442900",
    "end": "2448890"
  },
  {
    "text": "So what this suggests is\nthat you better not write to the cell store before\nyou write to the log",
    "start": "2448890",
    "end": "2455549"
  },
  {
    "text": "because if you wrote to\nthe cell store log write, and the system crashed right\nafter or failure about it,",
    "start": "2455550",
    "end": "2463190"
  },
  {
    "text": "you won't really\nhave a way in general of reverting to the\nversion of the data item",
    "start": "2463190",
    "end": "2469010"
  },
  {
    "text": "before this write. And you do need to revert\nbecause it just aborted or fails. So you need to back out of\nall changes that were made.",
    "start": "2469010",
    "end": "2478280"
  },
  {
    "text": "So that suggests the\nfirst part of our protocol which we are going to\ncall the wall protocol.",
    "start": "2478280",
    "end": "2483615"
  },
  {
    "text": "Actually, that is the wall,\nI mean, not the first part. This suggests this\nwall protocol. Wall stands for\nwrite-ahead logging.",
    "start": "2486809",
    "end": "2492090"
  },
  {
    "text": "And the protocol says update\nthe log or append to the log",
    "start": "2498940",
    "end": "2506930"
  },
  {
    "text": "before you write\nto the cell store. It's what it says. Write ahead log says write the\nlog before you write the cell",
    "start": "2506930",
    "end": "2518440"
  },
  {
    "text": "store. The advantage of writing the\nlog before you write to the cell",
    "start": "2518440",
    "end": "2523630"
  },
  {
    "text": "store is that suppose now\nyou set X to some value",
    "start": "2523630",
    "end": "2529930"
  },
  {
    "text": "and then you crashed. Then you're guaranteed that\nif the cell store got written,",
    "start": "2529930",
    "end": "2535400"
  },
  {
    "text": "the log got written, which\nmeans that if this action didn't",
    "start": "2535400",
    "end": "2541079"
  },
  {
    "text": "commit, you can\ngo through the log and undo that action because\nyou know that the log entry got",
    "start": "2541080",
    "end": "2546570"
  },
  {
    "text": "written correctly before\nthe cell store got written. And if the log entry\ndidn't get written, then you know the\ncell store didn't",
    "start": "2546570",
    "end": "2552520"
  },
  {
    "text": "get written, which means you\ndon't have to undo anything for that particular data item. So either way you're fine.",
    "start": "2552520",
    "end": "2559040"
  },
  {
    "text": "There is another\npart of this protocol",
    "start": "2559040",
    "end": "2564380"
  },
  {
    "text": "that we're going to need\nto meet the semantics of a recoverable\naction that we wanted, which is that once\nyou reach commit,",
    "start": "2564380",
    "end": "2571550"
  },
  {
    "text": "you want the changes\nmade by that action to be visible to all\nthe other people, all of the other actions\nthat are subsequent actions.",
    "start": "2571550",
    "end": "2579590"
  },
  {
    "text": "And what that means is\nthat before you return from the commit, you\nhad better make sure",
    "start": "2579590",
    "end": "2585860"
  },
  {
    "text": "that the commit record for this\naction is logged to the disk, is logged, because if you didn't\ndo that, and you just returned,",
    "start": "2585860",
    "end": "2595950"
  },
  {
    "text": "then you can't be guaranteed\nthat all of the writes that",
    "start": "2595950",
    "end": "2603150"
  },
  {
    "text": "were done to the cell\nitem were actually put on to the cell store. There's no guarantee\nthat these writes",
    "start": "2603150",
    "end": "2608530"
  },
  {
    "text": "to the cell store actually\ngot written to the cell store because all you are\ndoing in this protocol is ensuring that the\nwrites to the log",
    "start": "2608530",
    "end": "2614599"
  },
  {
    "text": "are being written before\nthe writes to the data. Nobody is saying when the\nwrites of the cell store really are happening\nand finishing,",
    "start": "2614600",
    "end": "2619880"
  },
  {
    "text": "which means if the\naction commits,",
    "start": "2619880",
    "end": "2625079"
  },
  {
    "text": "and you return committed to\nthe user to the application, then you had better have\na way of making sure",
    "start": "2625080",
    "end": "2630280"
  },
  {
    "text": "that if the failure\nnow happened, the system when\nit recovers knows that this action committed,\nwhich means it follows, then,",
    "start": "2630280",
    "end": "2638070"
  },
  {
    "text": "that if you want those\nsemantics that you'd better write the commit record, the\nfact that this action committed",
    "start": "2638070",
    "end": "2645490"
  },
  {
    "text": "to the log before\nthe commit returns. And really the only reason\nyou need that is that",
    "start": "2645490",
    "end": "2650950"
  },
  {
    "text": "we've established; we've decided\nthat we wanted the semantics that a different action commits,\nyou want the results to be",
    "start": "2650950",
    "end": "2655978"
  },
  {
    "text": "visible to everybody else. And later on, we'll see\nthat this is related to this notion of durability.",
    "start": "2655978",
    "end": "2663730"
  },
  {
    "text": "So write commit record before --",
    "start": "2663730",
    "end": "2670619"
  },
  {
    "text": "returning for commit.",
    "start": "2675120",
    "end": "2686880"
  },
  {
    "text": "So two main ideas: write\nahead logging means make sure that you write\nthe log, append to the log",
    "start": "2686880",
    "end": "2692059"
  },
  {
    "text": "before you write\nto the cell store. And in order to make sure that\ncommitted actions, the results",
    "start": "2692060",
    "end": "2697400"
  },
  {
    "text": "of committed actions are\nvisible even after failure to subsequent actions,\nlog the commit record before you return\nfrom the commit.",
    "start": "2697400",
    "end": "2703670"
  },
  {
    "text": "So now we are\nactually in good shape to specify this\nrecovery procedure",
    "start": "2711070",
    "end": "2717950"
  },
  {
    "text": "that I've alluded to\nbefore because the log is going to contain these update\nrecords and these outcome",
    "start": "2717950",
    "end": "2723940"
  },
  {
    "text": "records. And that's going to\nallow us to decide what to do upon crash recovery.",
    "start": "2723940",
    "end": "2730496"
  },
  {
    "text": "And actually the\nonly other piece we need is to decide\nwhat happens on an abort. And that's actually\npretty straightforward.",
    "start": "2730496",
    "end": "2737090"
  },
  {
    "text": "If the system calls abort,\nor if the user application calls abort on an action,\nwhat abort has to do",
    "start": "2737090",
    "end": "2742839"
  },
  {
    "text": "is to look through the log. Remember that all of the\nrights have been written. Any time a write happens,\nyou don't actually",
    "start": "2742840",
    "end": "2749314"
  },
  {
    "text": "care about when\nthe write actually happens at the cell store. What you care about is that\nthe write happens to the log",
    "start": "2749314",
    "end": "2756119"
  },
  {
    "text": "before the write happens\nto the cell store. So, if an abort were\ncalled, all you have to do",
    "start": "2756120",
    "end": "2761160"
  },
  {
    "text": "is to ensure that\nbefore abort returns, all of the actions done\nby, all of the steps taken",
    "start": "2761160",
    "end": "2768720"
  },
  {
    "text": "by this action around done, and\nthe corresponding cell values are on done.",
    "start": "2768720",
    "end": "2772920"
  },
  {
    "text": "And that's all you have to\ndo when you implement abort.",
    "start": "2775860",
    "end": "2779010"
  },
  {
    "text": "So one thing that I haven't\nreally specified very clearly",
    "start": "2782550",
    "end": "2787880"
  },
  {
    "text": "is when the actual\nwrites happen to the disk or to any cell store. And it turns out that it\nreally doesn't matter.",
    "start": "2787880",
    "end": "2796540"
  },
  {
    "text": "If there's no failure,\nas long as you ensure, you could have\ncaches in the middle. You could have anything else. So, as long as you ensure that\nif there's no concurrency,",
    "start": "2796540",
    "end": "2804940"
  },
  {
    "text": "we'll deal with that next time. But as long as you\nensure that when you have actions that come\none after the other that",
    "start": "2804940",
    "end": "2810120"
  },
  {
    "text": "are recoverable that\nthe values that are read are only the values that\nwere written by previously",
    "start": "2810120",
    "end": "2817809"
  },
  {
    "text": "committed actions,\nthen it really doesn't matter when those\nwere actually written to disk.",
    "start": "2817810",
    "end": "2823750"
  },
  {
    "text": "But for crash recover to work,\nthe main thing that matters is make sure that the log keeps\ntrack exactly of all the things",
    "start": "2823750",
    "end": "2831040"
  },
  {
    "text": "to undo for uncommitted actions. And for things\nthat got committed, to make sure that the log keeps\ntrack of the commit record",
    "start": "2831040",
    "end": "2839609"
  },
  {
    "text": "before the commit returns.",
    "start": "2839610",
    "end": "2840780"
  },
  {
    "text": "So given the story, the\nway the recovery procedure works as the following. The first step is the system\nfails, and that it recovers.",
    "start": "2844730",
    "end": "2851676"
  },
  {
    "text": "You scan the log backwards.",
    "start": "2851676",
    "end": "2852800"
  },
  {
    "text": "And as you are scanning\nthe log backwards, you keep track of\ntwo kinds of actions.",
    "start": "2859690",
    "end": "2865430"
  },
  {
    "text": "You keep track of actions that\nwere either committed or were",
    "start": "2865430",
    "end": "2870490"
  },
  {
    "text": "aborted, OK? And what that means\nis that for actions",
    "start": "2870490",
    "end": "2875620"
  },
  {
    "text": "that were committed or\naborted, the cell store for those actions is\nin a certain state",
    "start": "2875620",
    "end": "2881400"
  },
  {
    "text": "or needs to be in\na certain state. For committed actions,\nit needs to be in a state that's the result of\nfinishing the committed action.",
    "start": "2881400",
    "end": "2888470"
  },
  {
    "text": "And for the aborted\nactions, what it means is that when the abort\nreturned and there was an aborted\naction, abort already",
    "start": "2888470",
    "end": "2895310"
  },
  {
    "text": "undid the state\nof the cell store by definition by the definition\nof the abort procedure. So what that means is\nfor log records that",
    "start": "2895310",
    "end": "2902190"
  },
  {
    "text": "contain a type outcome\nand the status abort that you don't\nhave to do anything because the changes are\nalready on done before",
    "start": "2902190",
    "end": "2909050"
  },
  {
    "text": "that abort record was written. So what you do in\nscanning the log backwards is you build up two\nkinds of actions.",
    "start": "2909050",
    "end": "2915550"
  },
  {
    "text": "You build up winners,\nwhich are actions that were committed or aborted.",
    "start": "2915550",
    "end": "2922355"
  },
  {
    "text": "And you build up a list of\nlosers that were none of these.",
    "start": "2925300",
    "end": "2931182"
  },
  {
    "text": "In other words, they\nwere pending actions that kind of just during a\nfailure they were pending,",
    "start": "2931182",
    "end": "2936319"
  },
  {
    "text": "so they didn't commit. And they were never aborted.",
    "start": "2936320",
    "end": "2938506"
  },
  {
    "text": "And so the plan\nnow is to make sure that the cell store is correctly\nrestored to the state that was before the crash where\nall of the committed actions'",
    "start": "2946150",
    "end": "2956010"
  },
  {
    "text": "results are visible, and none\nof the uncommitted actions, you know, all of\nthose are blown away.",
    "start": "2956010",
    "end": "2962430"
  },
  {
    "text": "All you have to do is\nto redo the winners that were committed.",
    "start": "2962430",
    "end": "2967460"
  },
  {
    "text": "You don't have to do anything\nfor the aborted winners because they were\nalready undone. So you have to redo\ncommitted winners,",
    "start": "2967460",
    "end": "2977369"
  },
  {
    "text": "and you have to undo any\nchanges made by losers, right,",
    "start": "2977370",
    "end": "2986020"
  },
  {
    "text": "because these\nlosers by definition were things that didn't\ncommit or didn't abort. And the reason you only redo the\ncommitted winners rather than",
    "start": "2986020",
    "end": "2993350"
  },
  {
    "text": "all winners is it makes no\nsense to redo aborted winners. And you don't need to undo\nthem because they were already undone when the abort record\nwas written to the log.",
    "start": "2993350",
    "end": "3006410"
  },
  {
    "text": "So this is the basic\nidea for dealing with one of these databases. But there's five or\nsix optimizations",
    "start": "3006410",
    "end": "3013050"
  },
  {
    "text": "that end up making this\nkind of system go faster. You'll see some of these\noptimizations buried",
    "start": "3013050",
    "end": "3018750"
  },
  {
    "text": "inside the system R paper, which\nis the discussion for tomorrow. But what I'll do on Monday,\nI'll spend five minutes talking",
    "start": "3018750",
    "end": "3025750"
  },
  {
    "text": "about the most\nimportant optimizations, and I think the whole\nstory will become clear. So the plan for the subsequent\nlectures on this topic",
    "start": "3025750",
    "end": "3032660"
  },
  {
    "text": "are: on Monday we'll\ndeal with isolation, and on Wednesday we'll continue\nto talk about isolation, and then talk about a\ndifferent issue of consistency.",
    "start": "3032660",
    "end": "3041140"
  }
]