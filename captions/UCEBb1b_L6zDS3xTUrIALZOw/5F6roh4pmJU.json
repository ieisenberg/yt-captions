[
  {
    "text": "[SQUEAKING] [RUSTLING] [CLICKING]",
    "start": "0",
    "end": "5405"
  },
  {
    "text": "OK. So just to let you know what\nthis notebook is and isn't,",
    "start": "11578",
    "end": "18251"
  },
  {
    "text": "this notebook is\nkind of meant to let you see how automatic\ndifferentiation is",
    "start": "18251",
    "end": "24190"
  },
  {
    "text": "kind of magical in a way. That's kind of the real purpose. You'll start to get a\nbit of a feel for how",
    "start": "24190",
    "end": "30096"
  },
  {
    "text": "forward mode works. And what I'd like to\nemphasize is to what extent",
    "start": "30096",
    "end": "36302"
  },
  {
    "text": "this is possibly more computer\nscience than mathematics. We all have this notion\nthat whatever courses",
    "start": "36302",
    "end": "45912"
  },
  {
    "text": "that are now being taught in\ncomputer science that maybe used to be taught\nin math courses, like probability\nstatistics, I think",
    "start": "45912",
    "end": "52152"
  },
  {
    "text": "everybody agrees that calculus\nlives in math departments all over the world.",
    "start": "52152",
    "end": "57357"
  },
  {
    "text": "Lots of other math\nsubjects are being hijacked by engineers, computer\nscientists, and so forth.",
    "start": "57357",
    "end": "62829"
  },
  {
    "text": "But calculus, that's sacred. That belongs in mathematics. Well, here's a\ncase where calculus",
    "start": "62829",
    "end": "70336"
  },
  {
    "text": "is as much of a computer science\ntopic as it is a math topic. I think that's kind of what\nfascinated me most about this.",
    "start": "70336",
    "end": "78845"
  },
  {
    "text": "Oh, gosh. I first put this\ntogether in 2017. Is it really 2023 now? Six years later. Well, so it's an oldie but\ngoodie, but I promise you",
    "start": "78845",
    "end": "85952"
  },
  {
    "text": "you'll like it just the same. And I do like to\ntell people that I",
    "start": "85952",
    "end": "91191"
  },
  {
    "text": "used to go to\nconferences, and I would hear people talking about\nautomatic differentiation. People talked about\nit before it was hot.",
    "start": "91191",
    "end": "97797"
  },
  {
    "text": "I mean, it became hot\nbecause of machine learning. But a couple of decades before\nmachine learning, people",
    "start": "97797",
    "end": "102969"
  },
  {
    "text": "would do it, and they would\ndo it on the sidelines. Nobody paid attention back then. It didn't have sort of the big\nexcitement that it has today.",
    "start": "102969",
    "end": "111144"
  },
  {
    "text": "But I would go to\nconferences, and somebody would get up and talk about it. And I don't know. I would read my email or tune\nout or work on my own math",
    "start": "111144",
    "end": "118217"
  },
  {
    "text": "or something. I didn't really pay attention. And so I missed the boat. I didn't appreciate\nwhat I thought was most important about\nautomatic differentiation.",
    "start": "118218",
    "end": "127326"
  },
  {
    "text": "I made a jump in my\nmind of what it is. And I figured it was something\nsymbolic, like Mathematica,",
    "start": "127327",
    "end": "133800"
  },
  {
    "text": "Wolfram Alpha. We've all memorized\ntables of derivatives. Here's a small table\nof derivatives.",
    "start": "133800",
    "end": "139939"
  },
  {
    "text": "I figured that if\nI could memorize it when I learned calculus,\nthen a computer could be taught to do this thing also.",
    "start": "139939",
    "end": "145345"
  },
  {
    "text": "So maybe that's what it is. That's great. I could do it. A computer could do\nit better than me. Fine.",
    "start": "145345",
    "end": "150550"
  },
  {
    "text": "I didn't care. Turns out that's not what\nautomatic differentiation is. So then I said to myself,\nmaybe I got it wrong.",
    "start": "150550",
    "end": "157790"
  },
  {
    "text": "I'm just guessing anyway,\nand I don't really care. But maybe it's some sort\nof numerical difference,",
    "start": "157790",
    "end": "163663"
  },
  {
    "text": "like we do to check our answers.",
    "start": "163663",
    "end": "165765"
  },
  {
    "text": "I want the derivative\nat this point x, so I can do a forward\nderivative and get",
    "start": "168701",
    "end": "173840"
  },
  {
    "text": "the slope of the tangent. Or I could do a\nbackward derivative, go backwards and get\nthe slope of this--",
    "start": "173840",
    "end": "179245"
  },
  {
    "text": "I guess it's a secant,\nto be technical-- but the slope of this line. Or I could even do a\ncentral difference,",
    "start": "179245",
    "end": "185217"
  },
  {
    "text": "which connects these two dots. And the whole big\ndeal, of course, is when you do that, as Steven\nexplained, what's a good delta?",
    "start": "185218",
    "end": "193960"
  },
  {
    "text": "In math, you want\nthe delta to go to 0. That's the very limiting\ndefinition of a derivative.",
    "start": "193960",
    "end": "199866"
  },
  {
    "text": "But on a computer, if delta\ngets too small, as you've seen, you get that catastrophic\ncancellation happening.",
    "start": "199866",
    "end": "206372"
  },
  {
    "text": "And so numerical\nanalysis is kind of about what's a good delta. And Steven's basically\nsaid that something",
    "start": "206372",
    "end": "211877"
  },
  {
    "text": "on the order of 2\nto the minus 26, which is the square root\nof double precision machine epsilon is a good rule of thumb.",
    "start": "211878",
    "end": "220954"
  },
  {
    "text": "You might remember that curve\nwhere the error went down, like an absolute value\nsign, as it got smaller,",
    "start": "220954",
    "end": "226192"
  },
  {
    "text": "and then it went up again. And the best one\nwas at the bottom. That's the best delta x. But the key thing\nthat's interesting",
    "start": "226192",
    "end": "233665"
  },
  {
    "text": "is that automatic\ndifferentiation is not this, and it's not that.",
    "start": "233666",
    "end": "239038"
  },
  {
    "text": "And so what could it be? And the way I'd like to show\npeople of what it is is I'd",
    "start": "239038",
    "end": "247347"
  },
  {
    "text": "like to start with a simple\nexample of it in action. And this is where, at first,\nit's going to look like magic.",
    "start": "247347",
    "end": "254887"
  },
  {
    "text": "Nothing up my sleeve. And then I will explain\nto you how it worked. So I'm going to take one of\nthe oldest algorithms, one",
    "start": "254887",
    "end": "261361"
  },
  {
    "text": "of the oldest interesting\nalgorithms known to mankind, the Babylonian square\nroot algorithm, which",
    "start": "261361",
    "end": "266766"
  },
  {
    "text": "I think maybe you've all seen. But if you haven't, you\nstart with a guess t to square root of x.",
    "start": "266766",
    "end": "272738"
  },
  {
    "text": "So I've got a t,\nwhich I'm hoping is close to square root of x.",
    "start": "272739",
    "end": "278143"
  },
  {
    "text": "And if I take t and x over t-- if t was too small-- x over t, of course, will be\nkind of on the large side.",
    "start": "278144",
    "end": "285218"
  },
  {
    "text": "If t was a guess-- between t and x over t,\none's on the large side,",
    "start": "285218",
    "end": "290523"
  },
  {
    "text": "one's on the small side. So why don't we just\ntake the average? And then so this is something\nwe could keep doing.",
    "start": "290523",
    "end": "296229"
  },
  {
    "text": "And that's the\nBabylonian algorithm that converges to\nthe square root of x. Very simple algorithm.",
    "start": "296229",
    "end": "302435"
  },
  {
    "text": "It was known for\nthousands of years. How complicated could it be? But I still think it was\npretty clever, the Babylonians.",
    "start": "302435",
    "end": "309909"
  },
  {
    "text": "I mean, they didn't have Julia. I mean, I thought it\nwas pretty clever. So in any event, just\nfor simplicity sake,",
    "start": "309909",
    "end": "318618"
  },
  {
    "text": "I'm going to start\nat 1 for no reason. I'm just doing an example. So I'm going to start it at 1.",
    "start": "318618",
    "end": "325191"
  },
  {
    "text": "So I have 1 and x over 1,\nand I'll take the average. And then, by default, I'll do 10\niterations of t plus x over 2.",
    "start": "325191",
    "end": "333166"
  },
  {
    "text": "So even if you\ndon't speak Julia, I think this algorithm\nis easy to understand. Just it's an input x.",
    "start": "333166",
    "end": "339072"
  },
  {
    "text": "And by default, we run 10 times,\nbut you can give an argument and make it run more times.",
    "start": "339072",
    "end": "344711"
  },
  {
    "text": "And so let's go\nusing ForwardDiff.",
    "start": "344711",
    "end": "347647"
  },
  {
    "text": "Let ForwardDiff do it. And of course, with our\nmodern view of the world,",
    "start": "352919",
    "end": "358358"
  },
  {
    "text": "we know how to take square root. Everybody in this building,\neverybody in this institute could take the\nderivative square root.",
    "start": "358358",
    "end": "363496"
  },
  {
    "text": "It's one half over\nthe square root. And so we get the derivative.",
    "start": "363496",
    "end": "371504"
  },
  {
    "text": "But before we do\nthat, let's actually make sure that the code works. Let's actually check\nthe Babylonian algorithm",
    "start": "371504",
    "end": "376676"
  },
  {
    "text": "that I wrote. The second one is Julia's\nbuilt-in square root of pi.",
    "start": "376676",
    "end": "382448"
  },
  {
    "text": "And here's the\nBabylonian calculating the square root of pi. And I guess this is pretty\nconvincing that the Babylonians",
    "start": "382448",
    "end": "387853"
  },
  {
    "text": "knew what they were doing. I mean, we could do\nthe same thing with 2. We could run the\nBabylonian algorithm,",
    "start": "387854",
    "end": "393426"
  },
  {
    "text": "except for some\nlittle bit over here. Maybe the last bit. We basically get the\nsame answer with Julia's",
    "start": "393426",
    "end": "399866"
  },
  {
    "text": "built-in square root and\nthe Babylonian algorithm.",
    "start": "399866",
    "end": "402668"
  },
  {
    "text": "Let's skip this for a minute.",
    "start": "405638",
    "end": "408608"
  },
  {
    "text": "I think that's not important. So just checking the algorithm\nfor the moment, not even the derivative.",
    "start": "412845",
    "end": "419919"
  },
  {
    "text": "So I'm actually going to plot a\nfew iterates of the Babylonian",
    "start": "419919",
    "end": "425358"
  },
  {
    "text": "algorithm just so you can see. So the first iteration,\nmaybe remember, it was 1 plus x over 2.",
    "start": "425358",
    "end": "431496"
  },
  {
    "text": "I still want to call\nthis a linear function. But in this class, I have to\ncall it an affine function.",
    "start": "431497",
    "end": "436768"
  },
  {
    "text": "Yeah, I don't know what\nthe real terminology is. When do I get to say that a\nfirst-degree polynomial is",
    "start": "436769",
    "end": "442341"
  },
  {
    "text": "a linear function? I think there's a\ncontext as to whether I'm calling it a map or a function.",
    "start": "442341",
    "end": "449882"
  },
  {
    "text": "But any event, this\nthing's a line, however you want to call it. The first step of the Babylonian\nalgorithm, iteration 1,",
    "start": "449882",
    "end": "456289"
  },
  {
    "text": "is given x, compute 1\nplus x divided by 2. And that's a\nfirst-degree function.",
    "start": "456289",
    "end": "462495"
  },
  {
    "text": "The second iteration,\nI'm plotting it, is here. And then it gets\ncloser and closer",
    "start": "462495",
    "end": "468367"
  },
  {
    "text": "to the sideways parabola, which,\nof course, is the square root. In fact, by iteration\n5, you can't even see much of a difference\nwith your eye.",
    "start": "468367",
    "end": "475241"
  },
  {
    "text": "So iteration 4 is the purple. And iteration 5, you\ncan't even see it because the black\nparabola's on top of it.",
    "start": "475241",
    "end": "481647"
  },
  {
    "text": "And so just to kind\nof convince you that the Babylonian\nalgorithm works. Anyway, I like Plotly. I love doing this all day.",
    "start": "481647",
    "end": "487620"
  },
  {
    "text": "I can go left and right\nand look at these numbers. I love this. So I like interactive things.",
    "start": "487620",
    "end": "494360"
  },
  {
    "text": "Now what I'm going to do is-- let me see. I change this over the years.",
    "start": "494360",
    "end": "500166"
  },
  {
    "text": "So 3, 4, 5, 6. In about nine lines,\nI'm going to create a function that will\ncalculate the derivative",
    "start": "500166",
    "end": "508407"
  },
  {
    "text": "of the Babylonian algorithm. And nowhere will I teach it one\nhalf over the square root of x.",
    "start": "508407",
    "end": "516215"
  },
  {
    "text": "I will not do that. You'll see there'll be\nno finite differences. And there will be no symbolic--",
    "start": "516215",
    "end": "523120"
  },
  {
    "text": "it's going to be\nby magic, but we're going to get the right answer. So are you ready? So I'm going to do\nit in nine lines.",
    "start": "523121",
    "end": "529595"
  },
  {
    "text": "So here's three lines. I'm going to create\na Julia type.",
    "start": "529595",
    "end": "534866"
  },
  {
    "text": "I'm going to call it\ncapital D. Maybe some of you have heard this word.",
    "start": "534867",
    "end": "540206"
  },
  {
    "text": "D is for dual number, so that's\nwhy we're going to use the D. And we're basically\ngoing to keep",
    "start": "540206",
    "end": "546779"
  },
  {
    "text": "a function derivative\npair, an ordered pair. And so this is nothing\nbut a container",
    "start": "546779",
    "end": "553519"
  },
  {
    "text": "to be able to keep two floats. But which floats\nam I going to keep? I'm going to have the value\nof a function at a point",
    "start": "553519",
    "end": "560626"
  },
  {
    "text": "and the derivative of\nthat function at a point. All right. I've used up three\nof my nine lines. And everybody agrees there's\nno finite difference,",
    "start": "560626",
    "end": "567533"
  },
  {
    "text": "no symbolic answer, right? So I've got six more lines here.",
    "start": "567533",
    "end": "572271"
  },
  {
    "text": "Yeah, let me just show\nyou what I've done here before I do anything else. So if I wanted to--",
    "start": "576375",
    "end": "582314"
  },
  {
    "text": "if I want to create\none of these objects, I would have to put in\na tuple, like D of 1, 2.",
    "start": "582315",
    "end": "589488"
  },
  {
    "text": "This line lets me\nremove the parentheses, which are sort of-- I just find them annoying.",
    "start": "589488",
    "end": "596195"
  },
  {
    "text": "This line doesn't count. But you see, I've\ngot this dual number. It doesn't do anything yet.",
    "start": "596195",
    "end": "601399"
  },
  {
    "text": "I can't add dual numbers yet. If I try, it gets mad at me.",
    "start": "601400",
    "end": "606571"
  },
  {
    "text": "Look, plus not defined. All I can do is\ndefine a dual number. That's it. It's just a pair of numbers.",
    "start": "606572",
    "end": "612578"
  },
  {
    "text": "Can't do anything at all\nwith it other than store it.",
    "start": "612578",
    "end": "618484"
  },
  {
    "text": "But here what I'm going\nto do is create a-- oh, I don't need\nthis greater than.",
    "start": "618484",
    "end": "623856"
  },
  {
    "text": "That's why. I could have one fewer line. I'm going to comment\nthis one out. I think somebody once asked\nme to define it for greater.",
    "start": "623856",
    "end": "630863"
  },
  {
    "text": "But yeah, I don't\nneed this line. So I'm actually going to\nhave 3 plus 5, 8 lines.",
    "start": "630863",
    "end": "637203"
  },
  {
    "text": "So let me tell you about\nthese next five lines. Mainly I want to define, add,\nand divide on a dual number.",
    "start": "637203",
    "end": "644777"
  },
  {
    "text": "I don't need minus\nand times yet, because if you look at\nmy Babylonian algorithm, if you remember the\nalgorithm-- where",
    "start": "644777",
    "end": "651117"
  },
  {
    "text": "is the Babylonian algorithm? I do a plus and a\ndivide and nothing more.",
    "start": "651117",
    "end": "657355"
  },
  {
    "text": "Later on, I'll add times and\nminus, but I don't need it yet. So I wanted to define\na plus and a divide.",
    "start": "657356",
    "end": "665931"
  },
  {
    "text": "I don't need this one either. This thing could go away. In Julia, if you want to\noverload plus and divide",
    "start": "665931",
    "end": "671936"
  },
  {
    "text": "and a few other things, you\nhave to import it from base. So this is just like\na Julia detail thing",
    "start": "671937",
    "end": "677777"
  },
  {
    "text": "that says give me permission\nto redefine plus and divide and a few other things.",
    "start": "677777",
    "end": "683015"
  },
  {
    "text": "And what do I want to do? When I plus a couple of\ndual numbers-- here let",
    "start": "683015",
    "end": "688020"
  },
  {
    "text": "me just do this one\nonly, just so you see. I'll execute only the plus. Now I can add dual numbers.",
    "start": "688020",
    "end": "696262"
  },
  {
    "text": "And it's just going to\nbe like adding vectors. So I'm just going to add the\nfirst element of the tuple, 2",
    "start": "696262",
    "end": "702201"
  },
  {
    "text": "and 3, and the second element. So now I can add tuples,\nbut I can't divide them yet.",
    "start": "702201",
    "end": "707972"
  },
  {
    "text": "So this dot notation, this\nbroadcast or pointwise notation, says\nthat basically add",
    "start": "707973",
    "end": "718250"
  },
  {
    "text": "the two parts of x and the\ntwo parts of y, like a vector.",
    "start": "718250",
    "end": "723689"
  },
  {
    "text": "So this adds 2 and 3 to\nget 5 and 3 and 4 to 7. All right. Now let me bring in the divide.",
    "start": "723689",
    "end": "729729"
  },
  {
    "text": "I can't divide yet, by the way. I can try, but it'll\nget mad at me, you see. Oh, I must have executed it.",
    "start": "729729",
    "end": "736602"
  },
  {
    "text": "Oh, did I execute it? I'm sorry. Then it took away my-- well, whatever. All right. I guess I must have\nexecuted it, so I'm not",
    "start": "736602",
    "end": "742708"
  },
  {
    "text": "getting away with it. But here it doesn't matter. So this is 2\ndivided by 3 is 2/3.",
    "start": "742708",
    "end": "749248"
  },
  {
    "text": "But notice this\nisn't 3 divided by 4. So I have a different rule. So the add rule is just\nadding up a vector,",
    "start": "749248",
    "end": "756387"
  },
  {
    "text": "but the divide rule is a\nlittle more complicated. STEVEN G. JOHNSON:\nBy the way, Alan, did you want to share\nyour screen on Zoom? I forgot about--",
    "start": "756388",
    "end": "761860"
  },
  {
    "text": "ALAN EDELMAN: Oh, my gosh. I didn't share my screen, so\nyou don't see a thing I've done. STEVEN G. JOHNSON: No, I can\nsee it behind you on the--",
    "start": "761861",
    "end": "767833"
  },
  {
    "text": "ALAN EDELMAN: Oh, that's funny. OK.",
    "start": "767833",
    "end": "772905"
  },
  {
    "text": "There we go. All right. Better? All right.",
    "start": "772905",
    "end": "777943"
  },
  {
    "text": "So divide. So everybody, of course,\nremembers the quotient rule",
    "start": "780813",
    "end": "786318"
  },
  {
    "text": "from calculus? When I think of it, I hear\nmy math teacher singing it.",
    "start": "786318",
    "end": "791690"
  },
  {
    "text": "It was denominator times\nthe derivative of numerator minus the numerator\ntimes the denominator, or was it denominator squared?",
    "start": "794960",
    "end": "800165"
  },
  {
    "text": "I don't know. Did your teacher sing it to you? How did you sort of\nmemorize the quotient rule?",
    "start": "800166",
    "end": "806705"
  },
  {
    "text": "Anybody have a good song for it? Anyway, you drill\nit into your head.",
    "start": "806705",
    "end": "813979"
  },
  {
    "text": "vdu minus udv over v squared,\nor denominator, d numerator.",
    "start": "813979",
    "end": "821620"
  },
  {
    "text": "I mean, I don't know. You may have heard\nit different ways, but you all know it, right? This thing over here, the\nquotient rule, everybody",
    "start": "821620",
    "end": "827793"
  },
  {
    "text": "knows it. I'm just extracting\nthe parts from--",
    "start": "827793",
    "end": "833065"
  },
  {
    "text": "so y is the denominator. And so 1 is the value.",
    "start": "833065",
    "end": "839805"
  },
  {
    "text": "So this is the denominator. x is the numerator.",
    "start": "839805",
    "end": "844810"
  },
  {
    "text": "And 2 is the derivative. So it's the denominator times\nthe derivative numerator minus the numerator times\nthe derivative denominator",
    "start": "844810",
    "end": "850683"
  },
  {
    "text": "over the denominator squared. So that is what\nI'm going to teach. I'm going to teach Julia how\nto essentially add derivatives,",
    "start": "850683",
    "end": "857756"
  },
  {
    "text": "which is just add, and how\nto divide derivatives, which is just the formula you know,\njust apply it at a point.",
    "start": "857756",
    "end": "865464"
  },
  {
    "text": "And so this division is\nusing all four numbers so that it can get\nthe denominator",
    "start": "865464",
    "end": "872204"
  },
  {
    "text": "times the derivative of the\nnumerator minus the numerator times the derivative\nof the denominator over the denominator\nsquared, you see.",
    "start": "872204",
    "end": "879044"
  },
  {
    "text": "And that's what\nthis one ninth is. All right. That's it.",
    "start": "879044",
    "end": "884483"
  },
  {
    "text": "Just these 3 plus--\nwhat did I say? 3 plus-- oh, I haven't told\nyou about convert and promote.",
    "start": "884483",
    "end": "889588"
  },
  {
    "text": "These are a little bit more\nsort of technical details. But do you know how if you add\na complex number and a real,",
    "start": "889588",
    "end": "898697"
  },
  {
    "text": "like if you go 3 plus\n4i, and you add 7? Now what's really going\non is that that 7,",
    "start": "898697",
    "end": "907473"
  },
  {
    "text": "in some abstract sense, is\nbeing converted into 7 plus 0i. And then you add the real\nparts and the imaginary parts.",
    "start": "907473",
    "end": "913913"
  },
  {
    "text": "Everybody does\nthat all the time. So we want to do\nthat sort of thing where if you have a real\nnumber, we want to think of it--",
    "start": "913913",
    "end": "925557"
  },
  {
    "text": "if you have a scalar,\nwe want, in effect-- a constant is really\nwhat's going on here.",
    "start": "925557",
    "end": "931530"
  },
  {
    "text": "We want to think of this as the\nconstant x, where the value is",
    "start": "931530",
    "end": "936535"
  },
  {
    "text": "x and the derivative is 0. And we want that to\nbe kind of automatic because it would be nuisancy\nto type it all the time.",
    "start": "936535",
    "end": "942508"
  },
  {
    "text": "So that's what that does. And then the promote rule\nsays that if you give it a number, when you see it in\nthe context of a dual number,",
    "start": "942508",
    "end": "953152"
  },
  {
    "text": "everything should be\npromoted to the dual number. Just like it happens with\ncomplex numbers, where, like I said, 3 plus\n4i plus a real number,",
    "start": "953152",
    "end": "961126"
  },
  {
    "text": "you'd put that 0i in your\nmind or on a computer. But you would promote\neverything into the complex land",
    "start": "961126",
    "end": "968467"
  },
  {
    "text": "and then do the addition. So those are two\nnecessary things.",
    "start": "968467",
    "end": "974640"
  },
  {
    "text": "And now let me go ahead and\nrun the Babylonian algorithm. And without changing\nthe algorithm--",
    "start": "974640",
    "end": "981613"
  },
  {
    "text": "remember the algorithm\ntakes a scalar in. Let's see it again. Let's find it. The Babylonian algorithm, which\nis up here, it takes a scalar.",
    "start": "981613",
    "end": "988620"
  },
  {
    "text": "I'm not going to\nrewrite the algorithm. I'm just going to\nfeed it something new, something different\nfrom a scalar.",
    "start": "988620",
    "end": "993892"
  },
  {
    "text": "I'm going to feed\nit a dual number. And so let's do it.",
    "start": "993892",
    "end": "1000865"
  },
  {
    "text": "Where did it happen here? So I'm feeding the Babylonian\nalgorithm 49 comma 1.",
    "start": "1000866",
    "end": "1009308"
  },
  {
    "text": " This is how you seed-- we'll talk more about\nseeding the start",
    "start": "1009308",
    "end": "1015114"
  },
  {
    "text": "of the story with the number 1. Or if it was matrices,\nit would be the identity. And we get the\nsquare root being 7.",
    "start": "1015114",
    "end": "1020753"
  },
  {
    "text": "Yep, that's good. The square root of 49 is 7. And the derivative,\nwhich you all",
    "start": "1020753",
    "end": "1027291"
  },
  {
    "text": "know-- we could let\nJulia tech it for us-- is one half over the square root\nof x is this number right here.",
    "start": "1027291",
    "end": "1034866"
  },
  {
    "text": "So whatever one half over\n7 is, 1/14 or something. So this is the number 1/14.",
    "start": "1034867",
    "end": "1043474"
  },
  {
    "text": "You should be astounded\nby this, that I took an original piece of\ncode without a rewrite,",
    "start": "1043474",
    "end": "1049248"
  },
  {
    "text": "and I fed it this\nfunny kind of argument. And all that argument did was\nit knew the quotient rule,",
    "start": "1049248",
    "end": "1054853"
  },
  {
    "text": "and it knew the sum rule. And I got the right\nanswer for the derivative, not symbolically and not\nwith finite differences.",
    "start": "1054853",
    "end": "1062393"
  },
  {
    "text": "Isn't that amazing like\nthat's even possible? Wouldn't that blow your\ncalculus teacher's mind",
    "start": "1062394",
    "end": "1067398"
  },
  {
    "text": "that this could happen? Here's another example where I\ndo it with pi, just in case 7",
    "start": "1067399",
    "end": "1072704"
  },
  {
    "text": "wasn't convincing enough. So this would be the\nsquare root of pi",
    "start": "1072704",
    "end": "1077910"
  },
  {
    "text": "and 1 over 2 square root of pi. And this is the way\ndone with Julia. And you could check the numbers.",
    "start": "1077910",
    "end": "1083282"
  },
  {
    "text": "You see it all works. And in fact, what you can\ndo is actually look at--",
    "start": "1083282",
    "end": "1091890"
  },
  {
    "text": "what's happening is the\nBabylonian algorithm was an iteration.",
    "start": "1091890",
    "end": "1097129"
  },
  {
    "text": "And so somehow, this square root\nis the result of an iteration. We do 10 steps of an iteration. And so at each time, we must\nbe getting closer and closer",
    "start": "1097129",
    "end": "1105904"
  },
  {
    "text": "to the derivative. So just like we get closer\nto the square root, somehow, by feeding this in, we must\nbe getting closer and closer",
    "start": "1105904",
    "end": "1112878"
  },
  {
    "text": "to the derivative\nof the square root. And in fact, I could plot\neach step of the algorithm.",
    "start": "1112878",
    "end": "1118317"
  },
  {
    "text": "So remember the first\nalgorithm was first degree. I still want to say linear,\nbut I'll say first degree.",
    "start": "1118317",
    "end": "1124156"
  },
  {
    "text": "And so its derivative,\nof course, is a constant. It's just the constant\none half, in fact. So there it is.",
    "start": "1124156",
    "end": "1132564"
  },
  {
    "text": "And here are a\ncouple of iterations. And I also plotted one\nhalf over the square root of x, the true answer, the\nreciprocal of the parabola,",
    "start": "1132564",
    "end": "1142274"
  },
  {
    "text": "in effect. And you could see that it's\nheading closer and closer. And pretty quickly, the\neye can't even see it.",
    "start": "1142274",
    "end": "1147946"
  },
  {
    "text": "So this doesn't explain\nto you how it works, but maybe it kind of adds to the\nconvincing nature of the fact",
    "start": "1147946",
    "end": "1154853"
  },
  {
    "text": "that it does work, and\nit's still mysterious. I could say a little bit more.",
    "start": "1154853",
    "end": "1160225"
  },
  {
    "text": "I'm going to tell\nyou how it works. But before I do, I'd like\nto show off a few things.",
    "start": "1160225",
    "end": "1166298"
  },
  {
    "text": "I don't know how well\nthis works these days. But I do like to tell\npeople that, in Julia, you can see assembler. Nobody reads assembler.",
    "start": "1166298",
    "end": "1172304"
  },
  {
    "text": "Anybody here read assembler? Anybody here actually-- you\ndo or have or a little bit?",
    "start": "1172304",
    "end": "1178744"
  },
  {
    "text": "One person is willing to admit\nthat they do it a little bit. Some computer science classes\nat MIT teach you this stuff.",
    "start": "1178744",
    "end": "1184650"
  },
  {
    "text": "Most people never look at this,\ndon't want to look at this. The thing that I\nlike to just mention is that, in Julia, the\nassembler is short.",
    "start": "1184650",
    "end": "1192357"
  },
  {
    "text": "And so this is the assembler\nfor this derivative code, this kind of derived code.",
    "start": "1192357",
    "end": "1197863"
  },
  {
    "text": "And short assembler is more or\nless correlated with fast code.",
    "start": "1197863",
    "end": "1203902"
  },
  {
    "text": "And so not only does it\nget the right answer, but this sort of game is\nalso quite fast in Julia.",
    "start": "1203902",
    "end": "1210442"
  },
  {
    "text": "And that's kind of a nice\nthing to be able to have. So I'm still not going\nto tell you how it works,",
    "start": "1210442",
    "end": "1217148"
  },
  {
    "text": "but I'm going to grab SymPy. So this is Python\nsymbolic program.",
    "start": "1217149",
    "end": "1222854"
  },
  {
    "text": "There's is a Julia\nsymbolic program, but I don't completely\ntrust it yet. Maybe it's ready for prime\ntime, but I did this originally",
    "start": "1222854",
    "end": "1229695"
  },
  {
    "text": "with-- I wrote this before there\neven was Julia symbolic. And anyway, it just works\nso well, I would take it.",
    "start": "1229695",
    "end": "1237102"
  },
  {
    "text": "And so one of the things\nthat's interesting is to ask--",
    "start": "1237102",
    "end": "1243408"
  },
  {
    "text": "how should I say this? I'm going to tell you\nsomething that's mathematically equivalent to what\nwe're doing, but I",
    "start": "1243408",
    "end": "1248947"
  },
  {
    "text": "don't want you to\nget the impression that this is how it's computed. So let's talk about not\nthe derivative yet but just",
    "start": "1248947",
    "end": "1254753"
  },
  {
    "text": "the Babylonian algorithm. You remember that this is the\nfunction at the first step, x plus 1 over 2.",
    "start": "1254753",
    "end": "1260125"
  },
  {
    "text": "I can use Julia's\nability to overload to run it on a symbol x. And then I could see what\nthere is at the second step",
    "start": "1260125",
    "end": "1266898"
  },
  {
    "text": "or at the third step. And so in a way, at\nwhatever this is-- if this is the first step,\nsecond, third, fourth, fifth.",
    "start": "1266898",
    "end": "1274640"
  },
  {
    "text": "At the fifth step, the\nBabylonian algorithm exactly computes this\nrational function.",
    "start": "1274640",
    "end": "1279911"
  },
  {
    "text": "It's a 16th-degree polynomial\nover a 15th-degree polynomial. But don't get the wrong idea.",
    "start": "1279911",
    "end": "1286785"
  },
  {
    "text": "Nobody in the real world is\ncalculating the coefficients of this polynomial. I mean, these coefficients, we\nwouldn't want to store them.",
    "start": "1286785",
    "end": "1292658"
  },
  {
    "text": "They'd be unwieldy to work with. But as a mathematical\nsense, the fifth step",
    "start": "1292658",
    "end": "1298363"
  },
  {
    "text": "of the Babylonian\nalgorithm is calculating exactly this function.",
    "start": "1298363",
    "end": "1303367"
  },
  {
    "text": "And the plots tell us\nthat this crazy function, the 16th over\n15th-degree polynomial,",
    "start": "1303368",
    "end": "1308974"
  },
  {
    "text": "is not a bad approximation to\nthe square root of x, at least visually on the graph. So this is pretty good\nfor square root of x.",
    "start": "1308974",
    "end": "1317616"
  },
  {
    "text": "That's what we've seen. We could talk about where it\nis good, where it isn't good. But the point is that what it's\ncomputing is this function.",
    "start": "1317616",
    "end": "1325357"
  },
  {
    "text": "And we could do the same\ngame for the derivatives. So the first derivative here is\nthe coefficient of x as a half,",
    "start": "1325357",
    "end": "1332264"
  },
  {
    "text": "that constant. And we can see what's being\ncomputed exactly here. This is a ratio of\n30th-degree polynomials.",
    "start": "1332264",
    "end": "1340105"
  },
  {
    "text": "And again, I want to\nstress we are not-- I'm just building\nthis up just for fun.",
    "start": "1340105",
    "end": "1345677"
  },
  {
    "text": "We are not in the\nalgorithm getting literally these coefficients. They're too big anyway\nfor working with.",
    "start": "1345677",
    "end": "1353552"
  },
  {
    "text": "But in a mathematical\nsense, the fifth step of this derivative\nBabylonian algorithm",
    "start": "1353552",
    "end": "1360625"
  },
  {
    "text": "is calculating\nexactly this thing. And so this has to be\nsome sort of approximation to one half over the square\nroot of x, the derivative",
    "start": "1360625",
    "end": "1368700"
  },
  {
    "text": "of square root of x. This is what that is.",
    "start": "1368700",
    "end": "1371403"
  },
  {
    "text": "So let me get a little\ncloser as to how-- now you must be wondering. I hope you're all kind of\nsitting in your seats saying,",
    "start": "1374539",
    "end": "1379978"
  },
  {
    "text": "how is this working? What's happening here? And to get you a little\nbit kind of closer,",
    "start": "1379978",
    "end": "1385851"
  },
  {
    "text": "let me do what people used\nto do in the old days. People used to take derivatives\nof functions by hand.",
    "start": "1385851",
    "end": "1392591"
  },
  {
    "text": "Before this became\nautomatic, people would take derivatives\nof functions by hand. And so I'm going to\ndo that for you here.",
    "start": "1392591",
    "end": "1398997"
  },
  {
    "text": "I'm going to create\na dBabylonian algorithm, the derivative\nof the Babylonian algorithm.",
    "start": "1398997",
    "end": "1404002"
  },
  {
    "text": "And you'll recognize that\nthis line and this line are the original algorithm.",
    "start": "1404002",
    "end": "1409207"
  },
  {
    "text": "And below it, I'll create\nderivative variables, t prime.",
    "start": "1409207",
    "end": "1414780"
  },
  {
    "text": "And so t prime, the derivative\nof this is, of course, a half. The derivative of this line\nof code, well, what is it?",
    "start": "1414780",
    "end": "1423488"
  },
  {
    "text": "It's t prime plus\nthe denominator times the root of the numerator,\nwhich is 1 minus x times t",
    "start": "1423488",
    "end": "1431863"
  },
  {
    "text": "prime over t squared. So if you check, this is the\nordinary calculus derivative",
    "start": "1431863",
    "end": "1437402"
  },
  {
    "text": "with respect to x. So t prime is the\nderivative respect to x. So this is the ordinary\ncalculus derivative.",
    "start": "1437402",
    "end": "1443508"
  },
  {
    "text": "And we're doing that\nat each and every step. And people used to do that\nby hand, that you would--",
    "start": "1443508",
    "end": "1448780"
  },
  {
    "text": "in other words, you don't take\nthe derivative analytically of the big thing. Rather you take the derivative\nof each line of code.",
    "start": "1448780",
    "end": "1456321"
  },
  {
    "text": "And then you have faith\nthat if you do that, you'll get the derivative\nof the big thing that you wanted on the outside.",
    "start": "1456321",
    "end": "1461826"
  },
  {
    "text": "And you'll see that,\nof course, it works. Adding these couple of lines\nof code with just-- this",
    "start": "1461827",
    "end": "1467499"
  },
  {
    "text": "is now scalars. There's no dual numbers here. This will give me one half\nover the square root of pi",
    "start": "1467499",
    "end": "1473305"
  },
  {
    "text": "just by taking the derivative\nof every line of code. And so you might realize\nthat this is actually",
    "start": "1473305",
    "end": "1481346"
  },
  {
    "text": "an iteration for the\nderivative of square root of x, an iteration that we stop at--\nwe stop it at 10, by default.",
    "start": "1481346",
    "end": "1488286"
  },
  {
    "text": "We could take more\nsteps, but this is an iteration for the\nderivative square root,",
    "start": "1488286",
    "end": "1493290"
  },
  {
    "text": "obtained completely by taking\nthe derivative of every line. And so that's kind\nof what happened.",
    "start": "1493291",
    "end": "1500031"
  },
  {
    "text": "And so when I take the\nBabylonian of D, x, 1, in effect, I am using the\nmagic of Julia's ability",
    "start": "1500031",
    "end": "1509407"
  },
  {
    "text": "to do dispatch and overload\nand all those fancy words. But to use simple English,\nI am using the fact",
    "start": "1509407",
    "end": "1516715"
  },
  {
    "text": "that I don't have to rewrite\nthe code to get the derivative. I just need the code to know\nthe rules of taking derivatives",
    "start": "1516715",
    "end": "1524322"
  },
  {
    "text": "of every operation that-- more atomic operations\nat the lowest level and rely on the computer\nto piece it all together.",
    "start": "1524322",
    "end": "1532130"
  },
  {
    "text": "Because humans are really\nbad at this sort of stuff. They make mistakes all the time. It's worse than long division.",
    "start": "1532130",
    "end": "1537669"
  },
  {
    "text": "I mean, no matter how good\nyou are at long division, humans just make mistakes. We just do.",
    "start": "1537669",
    "end": "1543107"
  },
  {
    "text": "And so the trick\nis if you wanted to teach a computer--\nif you want to get the answers to\na division problem,",
    "start": "1543108",
    "end": "1550482"
  },
  {
    "text": "we humans have taught computers\nto do the division for us so we don't have to. And this is what's going on\nwith automatic differentiation.",
    "start": "1550482",
    "end": "1556721"
  },
  {
    "text": "We teach the computer\nto do the atomic steps and then let it just\ngo through the motions. ",
    "start": "1556721",
    "end": "1565463"
  },
  {
    "text": "So the derivative goes in\nbefore the JIT compiler, and we get efficient code.",
    "start": "1565463",
    "end": "1570602"
  },
  {
    "text": "So there's a notational\ntrick, which is rather nice, which is instead of taking the\ndual number, which is a, b, we",
    "start": "1570602",
    "end": "1578910"
  },
  {
    "text": "can write a plus b epsilon. And in effect, what we're\ndoing is the same thing that--",
    "start": "1578910",
    "end": "1584282"
  },
  {
    "text": "on the first week of\nclass, when Steven said, oh, let's just write\neverything as a plus bdx.",
    "start": "1584282",
    "end": "1590221"
  },
  {
    "text": "Just write everything\nto first order. Physicists do this all the time. They write everything\nto first order,",
    "start": "1590221",
    "end": "1595594"
  },
  {
    "text": "and they throw away higher-order\nterms just all the time. So in effect, what's\nhappening on the computer is",
    "start": "1595594",
    "end": "1602232"
  },
  {
    "text": "we're treating every computation\nas a first-order computation. And then the basic rules\nare-- let me just see.",
    "start": "1602233",
    "end": "1609407"
  },
  {
    "text": "There was one version of\nthis that's broken, but let me see if this is right. I think this is\nthe right version. So the basic rules--",
    "start": "1609407",
    "end": "1616081"
  },
  {
    "text": "every computation on a computer\nthat's ever been written always can come down to plus,\nminus, times, and divide.",
    "start": "1616081",
    "end": "1622887"
  },
  {
    "text": "Even square root is implemented\nsomewhere as plus, minus, times, and divide. So in effect, if\nyou wanted to do,",
    "start": "1622887",
    "end": "1632964"
  },
  {
    "text": "you can get automatic\ndifferentiation just by having\nthese basic rules. This is all you need.",
    "start": "1632964",
    "end": "1638637"
  },
  {
    "text": "Now as a matter of practice,\nwe try to intercept it all. We're happy to teach\nsine and square root",
    "start": "1638637",
    "end": "1645276"
  },
  {
    "text": "and cosine because who wants-- whatever method is being\nused to compute the sine-- and it's not Taylor\nseries, by the way--",
    "start": "1645276",
    "end": "1651882"
  },
  {
    "text": "but whatever method\nis being used, we don't want it to go\nthrough all this work. So we teach it things.",
    "start": "1651883",
    "end": "1657689"
  },
  {
    "text": "But in principle, all\nyou need are these rules,",
    "start": "1657689",
    "end": "1662726"
  },
  {
    "text": "and you can take the\nderivative of anything in the world on a computer. This is all you need.",
    "start": "1662727",
    "end": "1667732"
  },
  {
    "text": "Here's the sum and minus\nrule, the multiplication rule, which if you look at this right,\nmaybe if you squint correctly,",
    "start": "1667732",
    "end": "1676708"
  },
  {
    "text": "this is the udv plus duv rule,\nthe product rule that you all",
    "start": "1676708",
    "end": "1685316"
  },
  {
    "text": "learned in calculus. And we kind of repeated\nit in its matrix context in this class. This is udv plus vdu, and\nthis is the quotient rule.",
    "start": "1685316",
    "end": "1692457"
  },
  {
    "text": "This is denominator times\ndegree of the numerator minus numerator times\ndegree of the denominator over the denominator squared.",
    "start": "1692457",
    "end": "1697629"
  },
  {
    "text": "It's just kind of rewritten\nin this first-order kind of notation. But these are rules that you all\nlearned in first-year calculus.",
    "start": "1697629",
    "end": "1704302"
  },
  {
    "text": "And I'll even point out that\nyou could do this symbolically.",
    "start": "1708673",
    "end": "1712410"
  },
  {
    "text": "You don't even have\nto remember the rules. You could actually derive the\nquotient rule on the computer",
    "start": "1715547",
    "end": "1721086"
  },
  {
    "text": "by just-- this says basically take a\nseries around epsilon equals 0,",
    "start": "1721086",
    "end": "1727158"
  },
  {
    "text": "and give me two terms, please. No more. So just give me to the\nfirst order, an epsilon. And here you see. You get the quotient and the\nquotient rule from calculus.",
    "start": "1727158",
    "end": "1736868"
  },
  {
    "text": "So this is one way to\nget your hands on that. If you wanted the\nproduct rule, I",
    "start": "1736868",
    "end": "1742240"
  },
  {
    "text": "guess I could have\njust done this. And you get the\nudv plus duv rule.",
    "start": "1742240",
    "end": "1748346"
  },
  {
    "text": "So that's how you\ncan get the rules. So I'm going to\ndo something fun.",
    "start": "1748346",
    "end": "1753918"
  },
  {
    "text": "I am going to tell Julia-- this is Julia magic\nthat says to print",
    "start": "1753918",
    "end": "1759757"
  },
  {
    "text": "a dual number with epsilons. And so now when I\ntype a dual number, you remember it was\njust with the Ds.",
    "start": "1759758",
    "end": "1766264"
  },
  {
    "text": "Once I execute this\ncommand, I could see it in a way that's nice and human. So I told you this was a\nfunction derivative pair,",
    "start": "1766264",
    "end": "1773438"
  },
  {
    "text": "but you could also think\nof it, if you like, as a first-order expansion of--",
    "start": "1773438",
    "end": "1779043"
  },
  {
    "text": "it could be a first-order\nexpansion of a function. It could be the\nfirst-order expansion of x squared around x equals 1.",
    "start": "1779043",
    "end": "1785884"
  },
  {
    "text": "So let's go ahead and\nadd these last two rules. Remember I only did\nplus and divide. I might as well add the--\nthis seems like a good time",
    "start": "1789487",
    "end": "1795994"
  },
  {
    "text": "to do minus and times. And you see that if I do\nthe dual number 1 and 0,",
    "start": "1795994",
    "end": "1801733"
  },
  {
    "text": "I get this.  Well, actually let me ask you. I'm not going to hit Enter yet.",
    "start": "1801733",
    "end": "1807972"
  },
  {
    "text": "Tell me what I should see when\nI hit Return, before I do it. Who's quick? What's the first thing I'll\nsee before the epsilon?",
    "start": "1807972",
    "end": "1816981"
  },
  {
    "text": "Let me start with\nthe 0-th-order term. What will I see? Just shout it out.",
    "start": "1816981",
    "end": "1822187"
  },
  {
    "text": "AUDIENCE: 4. ALAN EDELMAN: 4. And then what's the next term? AUDIENCE: 2, 4.",
    "start": "1822187",
    "end": "1827825"
  },
  {
    "text": "ALAN EDELMAN: 2 times 2. 4. Yep. You guys got it. OK.",
    "start": "1827826",
    "end": "1833731"
  },
  {
    "text": "I changed the output. I might as well go\nthe whole direction. Why don't I make the input also?",
    "start": "1833731",
    "end": "1839704"
  },
  {
    "text": "D, 0, 1, I'll call it epsilon. And so now I can actually\ninput epsilons too.",
    "start": "1839704",
    "end": "1844943"
  },
  {
    "text": "Not just see it as an output,\nbut I can do it as an output. So epsilon squared, of\ncourse, is second order.",
    "start": "1844943",
    "end": "1850548"
  },
  {
    "text": "So we just get rid of it. By the way, just something fun. I actually never\ndefined how to square.",
    "start": "1850548",
    "end": "1857487"
  },
  {
    "text": "You'll notice I define\ntimes, but I never define square for dual number.",
    "start": "1857488",
    "end": "1863328"
  },
  {
    "text": "But this is sort of a\nlittle bit of a lesson, but a good software\nsystem would be one",
    "start": "1863328",
    "end": "1869968"
  },
  {
    "text": "where when you square something,\nit actually replaces it with a thing times itself.",
    "start": "1869968",
    "end": "1875106"
  },
  {
    "text": "So that a matrix square is\na matrix times a matrix, and a scalar square is\na scalar times a scalar.",
    "start": "1875106",
    "end": "1882447"
  },
  {
    "text": "And in Julia, for\nwhatever reasons, a string times a string is a\nconcatenation of the string.",
    "start": "1882447",
    "end": "1888486"
  },
  {
    "text": "So a string squared-- I don't even know if\nthis works anymore. I have a feeling\nit doesn't work. It's not a number.",
    "start": "1888486",
    "end": "1893591"
  },
  {
    "text": "This is going to fail,\nbut it shouldn't fail. Actually I think this\nis going to fail.",
    "start": "1893591",
    "end": "1900198"
  },
  {
    "text": "Oh, forget it. It does work. So multiplying two strings\nwill concatenate them,",
    "start": "1900198",
    "end": "1906104"
  },
  {
    "text": "and squaring it concatenates it. And so if you have sort of\na novice computer system,",
    "start": "1906104",
    "end": "1912343"
  },
  {
    "text": "every time you\nhave another type, you define another square. But if you have a\ngood computer system,",
    "start": "1912343",
    "end": "1917615"
  },
  {
    "text": "then the square inherits\nit from multiply, and then you just have\nto define multiplication. ",
    "start": "1917615",
    "end": "1924789"
  },
  {
    "text": "What should I get here when\nI go 1 over 1 plus epsilon? And again, nothing symbolic. This is actually happening\ncompletely numerical,",
    "start": "1924789",
    "end": "1931195"
  },
  {
    "text": "by the way. But what should I get\nwhen I hit Return?",
    "start": "1931195",
    "end": "1933497"
  },
  {
    "text": "What should I see? Anybody? You're smiling. You think you know the answer?",
    "start": "1937235",
    "end": "1941638"
  },
  {
    "text": "AUDIENCE: I guess it's\njust written there. ALAN EDELMAN: So\nI'll give you a hint. What's written there\nis not what you'll see.",
    "start": "1943942",
    "end": "1950214"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] minus 1. ALAN EDELMAN: Yeah,\nhow would it appear?",
    "start": "1950214",
    "end": "1956354"
  },
  {
    "text": "Just read it to me\nhow it would appear. AUDIENCE: I'd guess\n1 plus minus epsilon.",
    "start": "1956354",
    "end": "1963895"
  },
  {
    "text": "ALAN EDELMAN: There you go. 1 plus minus 1 epsilon. You could have just\nsaid 1 minus epsilon. I would have accepted that.",
    "start": "1963895",
    "end": "1970768"
  },
  {
    "text": "All right. Doesn't that look like\nsymbolic mathematics? But it's not.",
    "start": "1970768",
    "end": "1975807"
  },
  {
    "text": "This whole thing\nhappened through these-- it's all numerical. There's nothing symbolic at all.",
    "start": "1975807",
    "end": "1982413"
  },
  {
    "text": "And this is another thing\nthat people are saying, that there's becoming\nmore and more of a blurring between the\nsymbolic and the numerical,",
    "start": "1982413",
    "end": "1987952"
  },
  {
    "text": "and that numerical\nstuff is starting to look more and more symbolic. But it's not symbolic. All right.",
    "start": "1987952",
    "end": "1992991"
  },
  {
    "text": "What's the answer here? I'm not using any\nweird packages. Everything that I'm using was\ndefined right in front of you.",
    "start": "1992991",
    "end": "2000131"
  },
  {
    "text": "I'm not using\nForwardDiff or anything. Everything here is just\npure, simple Julia. You saw it. There's nothing up my sleeve.",
    "start": "2000131",
    "end": "2005636"
  },
  {
    "text": "What should this answer be? AUDIENCE: [INAUDIBLE] ALAN EDELMAN: I'm sorry. AUDIENCE: [INAUDIBLE]",
    "start": "2005636",
    "end": "2011642"
  },
  {
    "text": "ALAN EDELMAN: You're right. 1 plus 5 epsilon. OK. And this one,\nunfortunately, won't work.",
    "start": "2011642",
    "end": "2019283"
  },
  {
    "text": "Oh, it does work. Oh, that's amazing. I don't know why that works. All right. Never mind.",
    "start": "2019283",
    "end": "2024689"
  },
  {
    "text": "I didn't think we could\ntake negative powers, but I guess we could. All right. I'm going to stop. You could do this\nwith n-th roots.",
    "start": "2024689",
    "end": "2030495"
  },
  {
    "text": "You could do lots\nof other things. But I think this is a\ngood time for a break. And you guys get the right idea.",
    "start": "2030495",
    "end": "2037735"
  },
  {
    "text": "So now you're starting to see. If I were to summarize-- and\nI know it's still a little bit",
    "start": "2037735",
    "end": "2042773"
  },
  {
    "text": "magical, but I think\nyou'll see that roughly how this works is that\none way or another,",
    "start": "2042774",
    "end": "2050046"
  },
  {
    "text": "we're giving the rules of\nplus, minus, times, and divide. And we're writing programs.",
    "start": "2050047",
    "end": "2055585"
  },
  {
    "text": "And then these programs\nare, in effect-- they're not really\nrewriting themselves. What's really happening\nis that every time you",
    "start": "2055585",
    "end": "2061691"
  },
  {
    "text": "execute a plus, a minus,\ntimes, and a divide, it's doing not just\nthe basic operation",
    "start": "2061692",
    "end": "2067129"
  },
  {
    "text": "that you'd all expect,\nbut it's also carrying along the derivative as well. And the way Julia works,\nJulia will actually",
    "start": "2067130",
    "end": "2075106"
  },
  {
    "text": "look at that divide and say\nI'm not dividing scalars. I'm dividing dual numbers.",
    "start": "2075106",
    "end": "2081512"
  },
  {
    "text": "Or if it sees a star,\nI'm not multiplying. How does Julia know what to do? When it sees two matrices,\nmatrix, star, matrix,",
    "start": "2081512",
    "end": "2088651"
  },
  {
    "text": "it knows, because it's a\nmatrix, to do matrix multiply. So here when I did\ndual numbers, I",
    "start": "2088652",
    "end": "2093757"
  },
  {
    "text": "taught it to do this\ndual-number thing. And once Julia\nknows how to do it,",
    "start": "2093757",
    "end": "2098995"
  },
  {
    "text": "it'll just carry\nall the way through. And in effect, this\nis really the magic",
    "start": "2098996",
    "end": "2104135"
  },
  {
    "text": "of great software,\nwhere you just can define some\natomic operations, and the whole thing\nkind of composes",
    "start": "2104135",
    "end": "2110041"
  },
  {
    "text": "itself almost by magic. And in a way, it's\nalmost opposite from what we teach students in\na lot of classes, where we want",
    "start": "2110041",
    "end": "2116948"
  },
  {
    "text": "to teach-- the\nold-fashioned thing was to teach a student to\ncarry through every operation and be really competent at it.",
    "start": "2116948",
    "end": "2122986"
  },
  {
    "text": "In a way, the modern\nworld is to teach students how to not have to\nthink, rather how",
    "start": "2122987",
    "end": "2127992"
  },
  {
    "text": "to build a system that is so\nsimply designed that it just",
    "start": "2127992",
    "end": "2133865"
  },
  {
    "text": "works. And actually, to\nbuild a simple system",
    "start": "2133865",
    "end": "2138903"
  },
  {
    "text": "is what takes the\nreal human cleverness, if that sounds not like\nsome sort of contradiction.",
    "start": "2138903",
    "end": "2144976"
  },
  {
    "text": "But that's what it takes. All right. I'm a little late for the break. But after the break,\non the Blackboard,",
    "start": "2144976",
    "end": "2152717"
  },
  {
    "text": "I'm going to go into\nmore detail about forward and reverse mode,\nautomatic differentiation.",
    "start": "2152717",
    "end": "2158755"
  }
]