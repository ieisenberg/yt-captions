[
  {
    "text": "OPERATOR: The following content\nis provided under a Creative Commons license. Your support will help MIT\nOpenCourseWare continue to",
    "start": "0",
    "end": "6840"
  },
  {
    "text": "offer high quality educational\nresources for free. To make a donation or view\nadditional materials from",
    "start": "6840",
    "end": "13390"
  },
  {
    "text": "hundreds of MIT courses, visit\nMIT OpenCourseWare at ocw.mit.edu.",
    "start": "13390",
    "end": "19930"
  },
  {
    "text": "PROFESSOR: Last lecture we were\ntalking about classes, and object-oriented programming,\nand we're going",
    "start": "19930",
    "end": "27190"
  },
  {
    "text": "to come back to it today. I'm going to remind you, we were\ntalking about it because we suggested it is a really\npowerful way of structuring",
    "start": "27190",
    "end": "34030"
  },
  {
    "text": "systems, and that's really why\nwe want to use it, It's a very common way of structuring\nsystems. So today I'm going to",
    "start": "34030",
    "end": "39290"
  },
  {
    "text": "pick up on a bunch of more\nnuanced, or more complex if you like, ways of leveraging\nthe power of classes.",
    "start": "39290",
    "end": "46280"
  },
  {
    "text": "But we're going to see a bunch\nof examples that are going to give us a sense. I'm going to talk about\ninheritance, we're going to talk about shadowing, we're\ngoing to talk about iterators.",
    "start": "46280",
    "end": "53350"
  },
  {
    "text": "But before get to it, I want to\nstart by just highlighting, sort of, what was the\npoint of classes?",
    "start": "53350",
    "end": "58740"
  },
  {
    "text": "So I'll remind you. A class, I said, was basically\na template for an",
    "start": "58740",
    "end": "66580"
  },
  {
    "text": "abstract data type. And this was really to drive\nhome this idea of modularity.",
    "start": "66580",
    "end": "73610"
  },
  {
    "text": "I want the ability to say, I've\ngot a set of things that naturally belong together,\nI'm going to cluster them together, I want to treat it\nlike it's a primitive, I want",
    "start": "73610",
    "end": "80790"
  },
  {
    "text": "to treat it like it's a float\nor an int or a string. Is this going to be a point\nor a segment or something different like that.",
    "start": "80790",
    "end": "86689"
  },
  {
    "text": "So it's really a way, as I\nsaid, of just trying to cluster data together. And this is a notion of\nmodularity slash abstraction",
    "start": "86690",
    "end": "99000"
  },
  {
    "text": "where I'm treating them\nas primitives. But the second thing we talked\nabout is that we also have a",
    "start": "99000",
    "end": "105000"
  },
  {
    "text": "set of methods, using the\nspecial name method because we're talking classes. But basically functions that are\ndesigned to deal with this",
    "start": "105000",
    "end": "112200"
  },
  {
    "text": "data structure. We're trying to group those\ntogether as well. So we cluster data\nand methods.",
    "start": "112200",
    "end": "120450"
  },
  {
    "text": "Second key thing we said was,\nin the ideal case, which unfortunately Python isn't, but\nwe'll come back to that,",
    "start": "120450",
    "end": "126890"
  },
  {
    "text": "in the ideal case, we would have\ndata hiding, and by data hiding, which is sort of a\nversion of encapsulation, what",
    "start": "126890",
    "end": "136480"
  },
  {
    "text": "we meant was that you could\nonly get to the internal pieces of that data structure\nthrough a proscribed method.",
    "start": "136480",
    "end": "144470"
  },
  {
    "text": "Proscribed meaning it's\nsomething I set up. So data hiding saying, you would\nonly access the parts",
    "start": "144470",
    "end": "155220"
  },
  {
    "text": "through a method. And as we said, unfortunately\nPython does not enforce this.",
    "start": "155220",
    "end": "167470"
  },
  {
    "text": "Meaning that I could create one\nof these data structures, ideally I'd have a method, that\nI'm going to see some",
    "start": "167470",
    "end": "172710"
  },
  {
    "text": "examples of that I used to get\nthe parts out, unfortunately in Python you could take the\nname the instance dot some",
    "start": "172710",
    "end": "180000"
  },
  {
    "text": "internal variable you'll\nget it back. It is exposed. And this is actually just\nnot a good idea. So I suggested in my very bad\nhumor, that you practice",
    "start": "180000",
    "end": "186550"
  },
  {
    "text": "computational hygiene and you\nonly use appropriate methods to get the parts out. OK didn't laugh the joke last\ntime, you're not going to",
    "start": "186550",
    "end": "192890"
  },
  {
    "text": "laugh at it this time,\nI don't blame you. All right, and then the last\npiece of this is that we said",
    "start": "192890",
    "end": "198390"
  },
  {
    "text": "the class is a template. When we call that class,\nit makes an instance.",
    "start": "198390",
    "end": "203470"
  },
  {
    "text": "So class is used to make\ninstances, meaning particular",
    "start": "203470",
    "end": "211170"
  },
  {
    "text": "versions, of that structure,\nand we said inside the",
    "start": "211170",
    "end": "216280"
  },
  {
    "text": "instances we have a\nset of attributes. Internal variables, methods,\nthat are going to belong to",
    "start": "216280",
    "end": "222680"
  },
  {
    "text": "that structure. OK, so with that in mind, here's\nwhat I want to do.",
    "start": "222680",
    "end": "228450"
  },
  {
    "text": "I'm going to show you a set of\nexamples, and I want to warn you ahead of time, the code\nhandout today is a little",
    "start": "228450",
    "end": "233780"
  },
  {
    "text": "longer than normal because we\nwant to build essentially an extended example of a sequence\nof examples of classes.",
    "start": "233780",
    "end": "238790"
  },
  {
    "text": "We're going to see the idea,\nof which we're gonna talk about, of inheritance or\nhierarchy, in which we can have classes that are",
    "start": "238790",
    "end": "244110"
  },
  {
    "text": "specializations of other classes. We're gonna see how we can\ninherit methods, how we can shadow methods, how we can use\nmethods in a variety of ways.",
    "start": "244110",
    "end": "251860"
  },
  {
    "text": "So this is a way of suggesting\nyou may find it more convenient to put notes on the\ncode handout rather than in",
    "start": "251860",
    "end": "256889"
  },
  {
    "text": "your own notes. Do whatever you like, but I\njust wanted to alert you, we're going to go through a\nlittle more code than normal.",
    "start": "256890",
    "end": "262410"
  },
  {
    "text": "So, the little environment\nI'm going to build is an environment of people. I'll build a simple little\nsimulation of people.",
    "start": "262410",
    "end": "270889"
  },
  {
    "text": "So I'm going to start off with\nthe first class, which I've got up on the screen, and it's\non your handout as well, which is I'm going to build an\ninstance, or a class rather,",
    "start": "270890",
    "end": "278960"
  },
  {
    "text": "of persons. I'm going to draw a diagram,\nwhich I'm gonna try and see if",
    "start": "278960",
    "end": "284919"
  },
  {
    "text": "I can do well, over here, of\nthe different objects we're going to have. So I've got, a\nclass, and by the way a class",
    "start": "284920",
    "end": "295670"
  },
  {
    "text": "is an object. Instances are also objects,\nbut classes are objects. We're gonna see why we want\nthat in a second.",
    "start": "295670",
    "end": "301030"
  },
  {
    "text": "Because I'm gonna build\nan object, sorry a class, called a person. Now, let's walk through some\nof the pieces here.",
    "start": "301030",
    "end": "307750"
  },
  {
    "text": "The first one is, there's\nsomething a little different. Remember last time we had that\nkeyword class and then a name,",
    "start": "307750",
    "end": "314030"
  },
  {
    "text": "that name, in this case, person\nsays this is the name for the class, and then we\nwould have just had the semicolon and a bunch\nof internal things.",
    "start": "314030",
    "end": "321210"
  },
  {
    "text": "Here I've got something in\nparens, and I want to stress this is not a variable.",
    "start": "321210",
    "end": "326570"
  },
  {
    "text": "All right, this is not a\ndef, this is a class. I'm going to come back to it,\nbut what this is basically saying is that the person class\nis going to inherit from",
    "start": "326570",
    "end": "336800"
  },
  {
    "text": "another class, which in this\ncase is just the built-in Python object class.",
    "start": "336800",
    "end": "342260"
  },
  {
    "text": "Hold on to that thought, it's\ngoing to make more sense when we look at a little more\ninteresting example, but I want to highlight that. All right now, if we do this,\nas I said before, we can",
    "start": "342260",
    "end": "351120"
  },
  {
    "text": "create a version of a\nperson, let me just call it per, person.",
    "start": "351120",
    "end": "360330"
  },
  {
    "text": "OK? And what we said last time is,\nwhen we wanted to create an instance inside of this class\ndefinition, we've got one of",
    "start": "360330",
    "end": "366840"
  },
  {
    "text": "those built-in things\ncalled init. I'm gonna again remind you, some\nof the methods we have,",
    "start": "366840",
    "end": "374820"
  },
  {
    "text": "Underbar underbar init is going\nto be the thing that creates the instance.",
    "start": "374820",
    "end": "383770"
  },
  {
    "text": "Actually slightly misspeaking,\nactually Python creates the instance, but it's one thing\nthat fills it in. So in this case, I'm going to\ngive it 2 arguments: Frank",
    "start": "383770",
    "end": "394770"
  },
  {
    "text": "Foobar Now, you might have said,\nwait a minute, init here",
    "start": "394770",
    "end": "401500"
  },
  {
    "text": "has 3 arguments: self, family\nname, and first name. So again, just to remind you,\nwhat we said happens here is",
    "start": "401500",
    "end": "408300"
  },
  {
    "text": "that when I call this\nclass, person,",
    "start": "408300",
    "end": "413440"
  },
  {
    "text": "I'm creating an instance. We'll draw a little instance\ndiagram down here. I'm going to give\nit the name per.",
    "start": "413440",
    "end": "419620"
  },
  {
    "text": "And I should have said inside\nof person, we've got a set of things. We've got our underbar underbar\ninit, we've got, what",
    "start": "419620",
    "end": "427720"
  },
  {
    "text": "else do I have up there? Family name.",
    "start": "427720",
    "end": "433340"
  },
  {
    "text": "And a bunch of other methods,\ndown to say. What happens inside of Python\nis, when we called the class",
    "start": "433340",
    "end": "440420"
  },
  {
    "text": "definition, person, it creates\nan instance, there it is. Think of it as a pointer to a\nspot in memory, and then what",
    "start": "440420",
    "end": "448990"
  },
  {
    "text": "we do is, we call, or find, that\ninit method, up here, and",
    "start": "448990",
    "end": "455319"
  },
  {
    "text": "we apply it. And the first argument self,\npoints to the instance.",
    "start": "455320",
    "end": "460659"
  },
  {
    "text": "So this object here is\nwhat self looks at.",
    "start": "460660",
    "end": "466940"
  },
  {
    "text": "Now you can see what\ninit's going to do. It says, oh, inside of self,\nwhich is pointing to here, let",
    "start": "466940",
    "end": "471979"
  },
  {
    "text": "me bind a variable, which was,\ncan read that very carefully,",
    "start": "471980",
    "end": "479290"
  },
  {
    "text": "it's family underbar name,\nto the value I passed in, which was 4.",
    "start": "479290",
    "end": "488820"
  },
  {
    "text": "Same thing with first name. OK, so the reason I'm stressing\nthis is, self we do",
    "start": "488820",
    "end": "494370"
  },
  {
    "text": "not supply explicitly, it is\nsupplied as pointing to the instance, it's giving us\nthat piece of memory.",
    "start": "494370",
    "end": "499690"
  },
  {
    "text": "And that is what then\ngets created. So here's, now, the\ninstance for per.",
    "start": "499690",
    "end": "506230"
  },
  {
    "text": "OK, and I put a little label\non there, I'm going to call that an isALink, because it is\nan instance of that class.",
    "start": "506230",
    "end": "513039"
  },
  {
    "text": "God bless you. All right, so once we got this,\nlet's look at what we can do with person.",
    "start": "513040",
    "end": "518539"
  },
  {
    "text": "That's why I built\nperson here. And as I said, I've\nalready bound",
    "start": "518540",
    "end": "523789"
  },
  {
    "text": "basically, those two pieces. If I want to get a value out,\nI can give person, or per,",
    "start": "523790",
    "end": "533860"
  },
  {
    "text": "rather, this instance,\na messaging. In this case I want to get\nfamily, what did I say, family",
    "start": "533860",
    "end": "539100"
  },
  {
    "text": "name out, now, again I want to\nstress, what is happening",
    "start": "539100",
    "end": "545240"
  },
  {
    "text": "here? per is an instance,\nit's this thing here. When I say per dot family\nname, I'm sending it a",
    "start": "545240",
    "end": "552279"
  },
  {
    "text": "message, in essence what that\ndoes is, it says, from here it's going to go up the chain to\nthis class object and find",
    "start": "552280",
    "end": "559810"
  },
  {
    "text": "the appropriate method,\nwhich was family name. It is then going to apply\nthat to self, which",
    "start": "559810",
    "end": "565950"
  },
  {
    "text": "points to this instance. And that allows it, therefore,\nis you can see on the code, to look up under self, what's the\nbinding for family name, and",
    "start": "565950",
    "end": "573690"
  },
  {
    "text": "print it back up. So self is always going to point\nto the instance I want and I can use it.",
    "start": "573690",
    "end": "579910"
  },
  {
    "text": "OK what else do we\nhave in here? We can get the first name,\nthat's not particularly interesting. We've got 2 other special\nmethods: that's cmp and str.",
    "start": "579910",
    "end": "591040"
  },
  {
    "text": "All right, cmp is our\ncomparison method.",
    "start": "591040",
    "end": "597829"
  },
  {
    "text": "And since I, I was about to\nsay I blew it last time, I misspoke last time, a wonderful\nphrase that",
    "start": "597830",
    "end": "603090"
  },
  {
    "text": "politicians like to use,\nI misspoke last time. Let me clarify again\nwhat cmp will do. Underbar underbar cmp is going\nto be the method you're going",
    "start": "603090",
    "end": "611160"
  },
  {
    "text": "to use to compare two instances\nof an object.",
    "start": "611160",
    "end": "616540"
  },
  {
    "text": "Now, let's back up for second. If I wanted to test equality,\nin fact I could use underbar underbar eq, under under.",
    "start": "616540",
    "end": "623400"
  },
  {
    "text": "It's natural to think about an\nequality tester as returning a Boolean, it's either gonna\nbe true or false, because something's either\nequal to or not.",
    "start": "623400",
    "end": "631040"
  },
  {
    "text": "In many languages, comparisons\nalso return Booleans, which is why I went down this\nslippery slope.",
    "start": "631040",
    "end": "637589"
  },
  {
    "text": "For many languages, either it's\ngreater than or it's not. But Python is different. Python use cmp, in fact it has\na built in cmp, which is what",
    "start": "637590",
    "end": "644820"
  },
  {
    "text": "we're relying on here. Where am I, right there. And what cmp returns\nis 1 of 3 values.",
    "start": "644820",
    "end": "652300"
  },
  {
    "text": "Given 2 objects, it says if the\nfirst one is less than the second one, it returns -1, if\nit's equal it returns 0, if",
    "start": "652300",
    "end": "660150"
  },
  {
    "text": "it's greater than,\nit returns 1. So it allows you this broader\nrange of comparisons.",
    "start": "660150",
    "end": "665650"
  },
  {
    "text": "And if you think about it,\ncmp, you could apply on integers, you could apply it on floats, apply it on strings. So it's overloaded, it has the\nability to do all of those.",
    "start": "665650",
    "end": "673260"
  },
  {
    "text": "And in this case what we're\nsaying is, given 2 objects, let's create a tuple of the\nfirst, sorry, family and first",
    "start": "673260",
    "end": "680589"
  },
  {
    "text": "name of ourselves, and other is\nanother object, family and first name of that, and then\njust use cmp to compare them.",
    "start": "680590",
    "end": "687540"
  },
  {
    "text": "All right, so it's going\nto use the base pieces. OK, so it gives me a way\nof doing comparisons.",
    "start": "687540",
    "end": "693690"
  },
  {
    "text": "And str we saw last time as\nwell, this is cmp does comparison, and str is our\nprinted representation.",
    "start": "693690",
    "end": "707510"
  },
  {
    "text": "OK. So what we've got now, is\na simple little class.",
    "start": "707510",
    "end": "714460"
  },
  {
    "text": "We've also got two\nmethods there. I want to look at them, we're\ngonna come back to them, but they start to highlight things\nwe can do with our classes.",
    "start": "714460",
    "end": "722110"
  },
  {
    "text": "So I've built one simple\nversion of it here, which is per. And notice I've got another\nmethod, right up here, called say.",
    "start": "722110",
    "end": "728510"
  },
  {
    "text": "And say takes two arguments,\nfor the moment the second argument, or the first\nargument's, not going to make",
    "start": "728510",
    "end": "734160"
  },
  {
    "text": "a lot of sense, but say takes\ntwo arguments besides itself. It's going to take another\nobject to which it's saying",
    "start": "734160",
    "end": "739500"
  },
  {
    "text": "something and the\nthing to say. Since I only have one object\nhere, I'm going to have person",
    "start": "739500",
    "end": "744630"
  },
  {
    "text": "talk to himself. You may have met a few\nother undergraduates who have this behavior. I'll have him talk to himself\nand say, just some random",
    "start": "744630",
    "end": "757160"
  },
  {
    "text": "message the faculty members\noccasionally worry about. OK, what does this thing do?",
    "start": "757160",
    "end": "763210"
  },
  {
    "text": "Now you're going to see some\nof the power of this. Again, remember, I'm down here,\nI'm sending this the message say, it's going to go\nup the chain to find the say",
    "start": "763210",
    "end": "770720"
  },
  {
    "text": "message in person. And what does say do, it says\ngiven another object and some string, it's going to return,\noh, and interesting things,",
    "start": "770720",
    "end": "778990"
  },
  {
    "text": "part of which you can't\nsee on the screen. First what it does, is it\ngets first name of self.",
    "start": "778990",
    "end": "784470"
  },
  {
    "text": "Remember self is pointing to\nthis instance, so it's simply looks up that binding,\nwhich is Frank.",
    "start": "784470",
    "end": "790530"
  },
  {
    "text": "It's going to create a string\nin which it adds to that the family name of self, and then\nanother thing that says to,",
    "start": "790530",
    "end": "796640"
  },
  {
    "text": "and then ah, I'm now going to\nsend a message to the other object, saying give me\nyour first name.",
    "start": "796640",
    "end": "805070"
  },
  {
    "text": "Going to add that to the second\npiece, and you can see in this case it happens\nto be the same first and family name. And then at the end of it, which\nyou can't see here but",
    "start": "805070",
    "end": "811420"
  },
  {
    "text": "you can see in your handout, I\njust append the whole string, so it spits it out. What's the point of this,\nother than I can",
    "start": "811420",
    "end": "817250"
  },
  {
    "text": "get it to say things? Notice, I can now reference\nvalues of the instance. But I can also get values\nof other instances, by",
    "start": "817250",
    "end": "825720"
  },
  {
    "text": "sending in a message. And that's why we have that\nform right there.",
    "start": "825720",
    "end": "831640"
  },
  {
    "text": "And then it glued\nall together. If you think about this for a\nsecond, you might say, wait a",
    "start": "831640",
    "end": "836870"
  },
  {
    "text": "minute, actually you might\nhave said wait a minute a while ago, why am I just using\nthe variable name there in the",
    "start": "836870",
    "end": "842180"
  },
  {
    "text": "function over here? Well in fact, I could've used\nthe function here, first name",
    "start": "842180",
    "end": "847760"
  },
  {
    "text": "open close, right? It would have done\nthe same thing. But because I know I'm inside\nthe instance, it's perfectly",
    "start": "847760",
    "end": "855030"
  },
  {
    "text": "reasonable to just look\nup the value. OK, I could have, although I\ndon't want you to do it, have",
    "start": "855030",
    "end": "861770"
  },
  {
    "text": "done the same thing there and\nused underbar, sorry, first name underbar, sorry, first\nunderbar name, but that's",
    "start": "861770",
    "end": "868340"
  },
  {
    "text": "really breaking this contract\nthat I want to happen. I should send the message to\nget the method back out.",
    "start": "868340",
    "end": "873800"
  },
  {
    "text": "So again the standard practices\nis if you know you're inside the object, you\ncan just access the values. If you're doing it with any\nother objects, send it a",
    "start": "873800",
    "end": "880140"
  },
  {
    "text": "message to get it out. OK, now, that gives you an\nability to say, let's look at",
    "start": "880140",
    "end": "887190"
  },
  {
    "text": "one more example here, and\nthen we're going to start building our hierarchy,\nwhich is, that this person can also sing.",
    "start": "887190",
    "end": "893140"
  },
  {
    "text": "And we've got a little\nsing method here. And notice what it does, it's\ngoing to sing to somebody, I guess you're part of\nthe Chorallaries.",
    "start": "893140",
    "end": "899410"
  },
  {
    "text": "You're going to sing something,\nand notice what it does, it's simply going to use\nits say method, but add at the",
    "start": "899410",
    "end": "906100"
  },
  {
    "text": "end of whatever's being said,\njust tra la la at the end. So this is now an example of a\nmethod using another method.",
    "start": "906100",
    "end": "914190"
  },
  {
    "text": "Why would you want that? It's nice modularly. I have one method that's doing\nsaying, I have another method",
    "start": "914190",
    "end": "920260"
  },
  {
    "text": "that's just building on it. So if I have is person sing to\nthemselves, not a highly",
    "start": "920260",
    "end": "927200"
  },
  {
    "text": "recommended activity, it would\nhelp if I had it sing to",
    "start": "927200",
    "end": "936130"
  },
  {
    "text": "itself, not sing to sing,\nsorry about that.",
    "start": "936130",
    "end": "945840"
  },
  {
    "text": "Notice what it does. Looks like exactly like a say\nmethod, except it's got tra la la at the end.",
    "start": "945840",
    "end": "951640"
  },
  {
    "text": "Don't worry I'm not going\nto sing to you. I'll simply say the words. Power of this, other than\nthe silly examples.",
    "start": "951640",
    "end": "958870"
  },
  {
    "text": "You see how I can access\nvariables of the instance, how I can access variables of other\ninstances, going to come",
    "start": "958870",
    "end": "964910"
  },
  {
    "text": "back to that, and how I can use\nversions of my own methods",
    "start": "964910",
    "end": "970529"
  },
  {
    "text": "to implement other methods. In this case sing is using\nsay as part of what it wants to get out.",
    "start": "970530",
    "end": "977210"
  },
  {
    "text": "OK, so we got a simple\nlittle example. Now, let's start adding some\nother pieces to this.",
    "start": "977210",
    "end": "985380"
  },
  {
    "text": "OK, and what do I want to add. Find my spot here. OK, we're going to add\nan MIT person.",
    "start": "985380",
    "end": "997839"
  },
  {
    "text": "Sorry, machine is -- do\nthis, let's go down.",
    "start": "997840",
    "end": "1006550"
  },
  {
    "text": "OK so I'm going to add\nan MIT person. Look at the code for second.",
    "start": "1006550",
    "end": "1011620"
  },
  {
    "text": "Aha! Notice what this says. MIT person says it inherits\nfrom person.",
    "start": "1011620",
    "end": "1029040"
  },
  {
    "text": "That is, that's the first thing\nin parens up there. It says, you know, class of\nMIT person is person. What that is saying is, that\nthis is a specialization of",
    "start": "1029040",
    "end": "1038189"
  },
  {
    "text": "the person class. Or another way of saying it is,\nwe have a super class, in",
    "start": "1038190",
    "end": "1045309"
  },
  {
    "text": "this case it's person. And we have a subclass, in\nthis case its MIT person.",
    "start": "1045310",
    "end": "1055550"
  },
  {
    "text": "And we're going to walk through\nsome examples, but what it says is that that\nsubclass of MIT person can inherit the attributes\nof the person class.",
    "start": "1055550",
    "end": "1064320"
  },
  {
    "text": "Can inherit the methods, it\ncan inherit variables. OK, what does MIT person do?",
    "start": "1064320",
    "end": "1069370"
  },
  {
    "text": "Well, here's 1 of the\nnew things it does. It has a local variable called\nnext id num, which is",
    "start": "1069370",
    "end": "1078990"
  },
  {
    "text": "initially set to 0. See that up there. And then it's got some methods,\nit's got an init method, a get id method,\na few other things.",
    "start": "1078990",
    "end": "1088740"
  },
  {
    "text": "OK, let's run this. In particular, I go back\ndown to this one.",
    "start": "1088740",
    "end": "1099050"
  },
  {
    "text": "Let me just uncomment\nthis and do it here. Assuming my machine will do what\nI want it to do, which it",
    "start": "1099050",
    "end": "1106400"
  },
  {
    "text": "really doesn't seem to\nwant to do today. Try one more time.",
    "start": "1106400",
    "end": "1117309"
  },
  {
    "text": "Thank you, yep. Still not doing it\nfor me, John.",
    "start": "1117310",
    "end": "1124020"
  },
  {
    "text": "OK, we type it. No idea what Python doesn't like\nme today, but it doesn't. So we're gonna define p 1, I've\nlost my keyboard, indeed",
    "start": "1124020",
    "end": "1136800"
  },
  {
    "text": "I have. Try one more time. p 1\nMIT person, see how fast I can type here --",
    "start": "1136800",
    "end": "1152799"
  },
  {
    "text": "OK, now, let's look at what the\ncode does, because again it's going to highlight\nsome things.",
    "start": "1152800",
    "end": "1158090"
  },
  {
    "text": "I called MIT person, push this\nup slightly, it's going to create an instance down\nhere, I called p 1.",
    "start": "1158090",
    "end": "1167180"
  },
  {
    "text": "And when I would do that,\nI'm gonna initialize it. So I've got, right up here, an\ninitializer, init for MIT",
    "start": "1167180",
    "end": "1176350"
  },
  {
    "text": "person, takes in the family\nname and the first name. Notice what it does.",
    "start": "1176350",
    "end": "1182050"
  },
  {
    "text": "Huh. It says, if I'm sitting here at\nMIT person, I'm going to go up and inherit from person its\ninit function and call it.",
    "start": "1182050",
    "end": "1192590"
  },
  {
    "text": "And what am I calling it on? I'm calling it on self, which is\npointing to this object, so I've still got it, and then I'm\nthen going to apply the",
    "start": "1192590",
    "end": "1199429"
  },
  {
    "text": "base initialization. And that does exactly what you'd\nexpect, which is just going to create a binding for\nfamily name down here.",
    "start": "1199430",
    "end": "1208680"
  },
  {
    "text": "As well as some other things. So this is an example\nof inheritance.",
    "start": "1208680",
    "end": "1218059"
  },
  {
    "text": "MIT person inherits the init\nmethod from person, can get",
    "start": "1218060",
    "end": "1223250"
  },
  {
    "text": "access to by simply referring\nto it, and I refer to it right there. And it's take the person class,\nget its init and apply",
    "start": "1223250",
    "end": "1229789"
  },
  {
    "text": "it to my instance plus\nthose things. So I'm just using the\nsame piece of code Notice the second\nthing it does.",
    "start": "1229790",
    "end": "1235890"
  },
  {
    "text": "It says inside of self, I'm\ngoing to bind the local variable id name to the value of\nnext id name in MIT person.",
    "start": "1235890",
    "end": "1243580"
  },
  {
    "text": "Self is down here, id num,\nsorry, not id name. I'm going to bind that to the\nvalue that I find my going up",
    "start": "1243580",
    "end": "1251150"
  },
  {
    "text": "to here, which is 0, and having\ndone that, I simply",
    "start": "1251150",
    "end": "1256670"
  },
  {
    "text": "increment that value.",
    "start": "1256670",
    "end": "1263850"
  },
  {
    "text": "OK? So what has this done? It says I now have captured in\nthe class, a local variable",
    "start": "1263850",
    "end": "1270110"
  },
  {
    "text": "that I can keep track of. And when I use it, every time I\ngenerate an example, let me build another one.",
    "start": "1270110",
    "end": "1276140"
  },
  {
    "text": "I make p 2 another MIT person.",
    "start": "1276140",
    "end": "1293460"
  },
  {
    "text": "OK, I can do things like saying,\nwhat is the id number for each of these.",
    "start": "1293460",
    "end": "1303030"
  },
  {
    "text": "First one is 0, second one is\n1, which makes sense, right?",
    "start": "1303030",
    "end": "1312320"
  },
  {
    "text": "I'm just incrementing\na global variable. Now, things I want you\nto see about this.",
    "start": "1312320",
    "end": "1317419"
  },
  {
    "text": "Now that I've got a beginning\nof a hierarchy, I have this notion of inheritance.",
    "start": "1317420",
    "end": "1322660"
  },
  {
    "text": "I can ask a function inside one\nclass to use a function from a class that it can reach\nby going up the chain.",
    "start": "1322660",
    "end": "1329990"
  },
  {
    "text": "I just did it there. I can ask it to go get values\nof variables, right, so that looks good.",
    "start": "1329990",
    "end": "1335130"
  },
  {
    "text": "What else do we have in\nperson or MIT person? Well, we can get the id\nnumber, we just did. We have a thing to do\nwith this string.",
    "start": "1335130",
    "end": "1340390"
  },
  {
    "text": "Notice it's going to print out\nsomething a little different. In fact, there's a kind\nof funky form there. Which just says, if I want to\nprint it out, I'm gonna",
    "start": "1340390",
    "end": "1346560"
  },
  {
    "text": "create, what this says to do is,\nI'm gonna create an output template that has that structure\nto it, but where I",
    "start": "1346560",
    "end": "1352940"
  },
  {
    "text": "see that percent s I'm going to\nsubstitute this value for the first one, that value\nfor the second.",
    "start": "1352940",
    "end": "1359290"
  },
  {
    "text": "So if I say, what is p 1? It says ok, MIT person\nFred Smith.",
    "start": "1359290",
    "end": "1369170"
  },
  {
    "text": "On the other hand, if I said,\nwhat is per, which is that thing I build earlier, it had\na different string method,",
    "start": "1369170",
    "end": "1375890"
  },
  {
    "text": "which is just print out\nperson, those pieces. All right, one last piece\nto this and we're",
    "start": "1375890",
    "end": "1382730"
  },
  {
    "text": "going to add to it. Suppose I want Fred\nto say something.",
    "start": "1382730",
    "end": "1388830"
  },
  {
    "text": "Say something to Jane.",
    "start": "1388830",
    "end": "1400529"
  },
  {
    "text": "OK, he said it. Where's the say method?",
    "start": "1400530",
    "end": "1407440"
  },
  {
    "text": "OK, Fred is an instance\nof an MIT person. where's the say method?",
    "start": "1407440",
    "end": "1414649"
  },
  {
    "text": "Well, there isn't one there,\nbut again, that's where the hierarchy comes in. Fred is this object here, I'm\nsending it the message say.",
    "start": "1414650",
    "end": "1421560"
  },
  {
    "text": "That turns into going up the\nchain to this object, which is the class object, and saying\nfind a say method and apply it",
    "start": "1421560",
    "end": "1428225"
  },
  {
    "text": "to that instance. Fudge-knuckle, it ain't here. Don't worry about it, because\nit says if I can't find one",
    "start": "1428225",
    "end": "1433700"
  },
  {
    "text": "there, I'm going to go up the\nchain to this method, sorry to this class, and look\nfor a method there.",
    "start": "1433700",
    "end": "1439450"
  },
  {
    "text": "Which there was one, I\nhave a say method. It's going to use\nthat say method. Apply to it.",
    "start": "1439450",
    "end": "1445110"
  },
  {
    "text": "Well, you might say, OK, what\nhappens if it isn't there? Well, that's where, remember\nI defined person to be an instance of an object, it will\ngo up the chain one last time",
    "start": "1445110",
    "end": "1452700"
  },
  {
    "text": "to the base object in Python\nto see is there a method there or not. Probably isn't a say method\nfor an object, so at that",
    "start": "1452700",
    "end": "1458850"
  },
  {
    "text": "point it's going to raise an\nexception or throw an error. But now you again see this idea\nthat the inheritance lets",
    "start": "1458850",
    "end": "1464250"
  },
  {
    "text": "you capture methods. Now you might say, why not just\nput a say method inside",
    "start": "1464250",
    "end": "1470080"
  },
  {
    "text": "of MIT person? Well, if you wanted it to do\nsomething different, that would be the right\nthing to do.",
    "start": "1470080",
    "end": "1475130"
  },
  {
    "text": "But the whole notion here's that\nI'm capturing modularity, I've got base methods\nup in my base class.",
    "start": "1475130",
    "end": "1480910"
  },
  {
    "text": "If I just want to use them I'm\njust going to inherit them by following that chain, if you\nlike, basically up the track.",
    "start": "1480910",
    "end": "1488040"
  },
  {
    "text": "OK, so we've got an MIT person,\nwe can use that.",
    "start": "1488040",
    "end": "1494400"
  },
  {
    "text": "Let's add a little bit more\nto our hierarchy here. I'm going to create, if\nI can do this right, a",
    "start": "1494400",
    "end": "1502140"
  },
  {
    "text": "specialization of an MIT\nperson, which is an",
    "start": "1502140",
    "end": "1510220"
  },
  {
    "text": "undergraduate. A special kind of MIT person. All right, so if I go back up\nhere, even though my thing is",
    "start": "1510220",
    "end": "1519100"
  },
  {
    "text": "not going to let me do it, let's\nbuild an undergraduate. OK, there's the class definition\nfor an undergrad.",
    "start": "1519100",
    "end": "1526780"
  },
  {
    "text": "We're just starting to see some\nof the pieces, right, so in an undergraduate, where am\nI here, an undergraduate.",
    "start": "1526780",
    "end": "1531980"
  },
  {
    "text": "OK, it's also got an\ninitialization function. So if I call undergrad, I'm\ngonna make an undergrad here,",
    "start": "1531980",
    "end": "1538780"
  },
  {
    "text": "again let me go back down here,\nline ug 2 it's making",
    "start": "1538780",
    "end": "1544980"
  },
  {
    "text": "undergrad, Jane Doe.",
    "start": "1544980",
    "end": "1554520"
  },
  {
    "text": "Now, what happens when I do\nthe initialization here? Notice what goes on. It simply calls the person\ninitialization method.",
    "start": "1554520",
    "end": "1563340"
  },
  {
    "text": "All right, so I'm down here. I'm going to call the person\ninitialization method, what did do? Sorry, the MIT person method,\nit calls the person method.",
    "start": "1563340",
    "end": "1571620"
  },
  {
    "text": "Just walking up the chain,\nthat's going to do exactly what I did with all the other\nones, so I now have a family name and a first name.",
    "start": "1571620",
    "end": "1577010"
  },
  {
    "text": "So I can, for example,\nsay family name",
    "start": "1577010",
    "end": "1582190"
  },
  {
    "text": "and get it back out. All right? And then, other things that I\ncan do, well I can set what",
    "start": "1582190",
    "end": "1588010"
  },
  {
    "text": "year the person's in, I can\nfigure out what year they're in, there's this unfortunate\noverflow error if you've hung around too long, but that's not\ngoing to happen to you.",
    "start": "1588010",
    "end": "1595039"
  },
  {
    "text": "And I've now got a say method\nhere, so let's look what happens if I ask the undergraduate to say something.",
    "start": "1595040",
    "end": "1612930"
  },
  {
    "text": "OK, it's not a realistic\ndialogue I know, but, what did",
    "start": "1612930",
    "end": "1617960"
  },
  {
    "text": "this method do? I asked this object\nto do a say. And notice what it does.",
    "start": "1617960",
    "end": "1625110"
  },
  {
    "text": "It simply passes it back\nup to MIT person. There's that inheritance\nagain. It's saying, I'm going\nto have my base",
    "start": "1625110",
    "end": "1631620"
  },
  {
    "text": "say method say something. I'm going to say it to a person,\nbut all I'm going to do because undergraduates in my\nexperience, at least, are",
    "start": "1631620",
    "end": "1637409"
  },
  {
    "text": "always very polite, I'm going to\nput \"Excuse me but\" at the front of it. OK, what am I trying\nto show you here?",
    "start": "1637410",
    "end": "1644930"
  },
  {
    "text": "I know the jokes are awful,\nbut what am I trying to show you here? That I can simply pass up\nthe chain to get it.",
    "start": "1644930",
    "end": "1651360"
  },
  {
    "text": "In fact, what method does\nthe final say here? What class does it come from?",
    "start": "1651360",
    "end": "1656440"
  },
  {
    "text": "Person class, yes, thank you. It goes all the way up to\nperson, right, because MIT person didn't have a say. So I can simply walk up the\nchain until I find the method",
    "start": "1656440",
    "end": "1664380"
  },
  {
    "text": "I want to have. Now this is an example\nof shadowing.",
    "start": "1664380",
    "end": "1672310"
  },
  {
    "text": "Not a great example, but it's\na beginning example of shadowing, in that this same\nmethod for an undergraduate,",
    "start": "1672310",
    "end": "1678770"
  },
  {
    "text": "shadows the base say method, it\nhappens to call it, but it changes it. It puts \"Excuse me but\" at\nthe front, before it",
    "start": "1678770",
    "end": "1684605"
  },
  {
    "text": "goes on to do something. Now again, I could have decided\nhere to actually copy",
    "start": "1684605",
    "end": "1690350"
  },
  {
    "text": "what the original say method\ndid, stitch all the other things together. But again, that loses\nmy modularity.",
    "start": "1690350",
    "end": "1696269"
  },
  {
    "text": "I'd really to only have to\nchange it in one place. So by putting my say method up\nin person, I can add these",
    "start": "1696270",
    "end": "1702540"
  },
  {
    "text": "nuances to it, and it lets\nme have something that has that variation. If I decide I want to change\nwhat say does, I only have to",
    "start": "1702540",
    "end": "1709430"
  },
  {
    "text": "change it in one place. It is in the person class\ndefinition, and everything else will follow through\nfor free.",
    "start": "1709430",
    "end": "1716080"
  },
  {
    "text": "OK, so now I've got an\nundergrad, right? Let's look at a couple\nof variations of",
    "start": "1716080",
    "end": "1722070"
  },
  {
    "text": "what happens here. So first of all, I can -- yes?",
    "start": "1722070",
    "end": "1730270"
  },
  {
    "text": "PROFESSOR 2: Shadowing here\nis often sometimes called overriding. PROFESSOR: Yes, thank you,\nbecause I'm going to do a pure",
    "start": "1730270",
    "end": "1737660"
  },
  {
    "text": "example of shadowing in\na second, John right. Also called overriding.",
    "start": "1737660",
    "end": "1744870"
  },
  {
    "text": "Part of the reason I like the\nphrase shadow is, if you think about it as looking at it from\nthis direction, you see this version of init before you see\nthe other ones, or you see",
    "start": "1744870",
    "end": "1751290"
  },
  {
    "text": "that version of say, but\nit is overriding the base say example. OK, so I can say, what does\np 1, sorry, yes, what does",
    "start": "1751290",
    "end": "1759010"
  },
  {
    "text": "undergrad look like? And I said wait a minute,\nMIT person, not undergrad, is that right?",
    "start": "1759010",
    "end": "1766690"
  },
  {
    "text": "Well, where's the str method? I didn't define one in\nundergrad, so it again tracks",
    "start": "1766690",
    "end": "1771730"
  },
  {
    "text": "up the chain and finds the str\nmethod here, so it's OK undergrads are MIT people\nmost the time, so",
    "start": "1771730",
    "end": "1777220"
  },
  {
    "text": "it's perfectly fine. OK, now, I have built into this\nalso these cmp methods.",
    "start": "1777220",
    "end": "1783720"
  },
  {
    "text": "So I've got two examples. I've got undergrad, or ug. And then I've got poor\nold Frank Foobar",
    "start": "1783720",
    "end": "1790600"
  },
  {
    "text": "back there, per person. So suppose I want\nto compare them?",
    "start": "1790600",
    "end": "1798340"
  },
  {
    "text": "What do you think\nhappens here? Compare sounds weird,\nright, I compare an undergraduate to a person.",
    "start": "1798340",
    "end": "1804029"
  },
  {
    "text": "I don't know what that's doing,\nsome kind of weird psychological thing, but what do\nyou think happens in terms of the code here\nif I run this.",
    "start": "1804030",
    "end": "1812370"
  },
  {
    "text": "I know it's a little hard\nbecause you got a lot of code to look at. Do I have a cmp method\ndefined somewhere?",
    "start": "1812370",
    "end": "1818660"
  },
  {
    "text": "Yeah. So, it's hard to know what it's\ngoing to do, but let's look at it.",
    "start": "1818660",
    "end": "1825300"
  },
  {
    "text": "Hmm. Now sometimes I type things\nand I got errors I don't expect, this one I did expect.",
    "start": "1825300",
    "end": "1830320"
  },
  {
    "text": "So what happened here? Well let's talk about what\nhappens if I do that comparison I was doing,\nwhat was I doing?",
    "start": "1830320",
    "end": "1839400"
  },
  {
    "text": "Ug greater than per? What unwinds into is, I'm going\nto send to ug, that",
    "start": "1839400",
    "end": "1846720"
  },
  {
    "text": "instance, a cmp method. This is really going to become\nsomething like ug dot under",
    "start": "1846720",
    "end": "1852190"
  },
  {
    "text": "under cmp under under\napplied to per. I think that's close.",
    "start": "1852190",
    "end": "1859670"
  },
  {
    "text": "What does that do? It says starting in ug, I'm\ngoing to look for the first cmp method I could find, which\nis actually sitting here.",
    "start": "1859670",
    "end": "1867500"
  },
  {
    "text": "I had a cmp method\nin MIT person. If you look at your code,\nwhat does it do? It looks up the id numbers\nto compare them.",
    "start": "1867500",
    "end": "1874280"
  },
  {
    "text": "Well the, ug has an id number\nbecause it was created along this chamber. Remember per over here was\njust created as a person.",
    "start": "1874280",
    "end": "1880530"
  },
  {
    "text": "It doesn't have an id number,\nso that's why it complaints. Ok, happens if I do that?",
    "start": "1880530",
    "end": "1889280"
  },
  {
    "text": "Compare per to ug. How many people think\nI get an error?",
    "start": "1889280",
    "end": "1896260"
  },
  {
    "text": "Wow. How many people think I'm going\nto get either true or false out of this?",
    "start": "1896260",
    "end": "1901529"
  },
  {
    "text": "A few brave hands. Why? Can I ask you, please? Why do you think I'm going to\nget a, doesn't matter whether",
    "start": "1901530",
    "end": "1907000"
  },
  {
    "text": "it's true or false, why am I\ngoing to have something work this time that didn't\nwork last time? STUDENT: [INAUDIBLE]",
    "start": "1907000",
    "end": "1920880"
  },
  {
    "text": "PROFESSOR: Yeah, exactly. And in case you didn't hear it,\nthank you, great answer, sorry, terrible throw. In this case I'm using per,\nthat's the first part, so it's",
    "start": "1920880",
    "end": "1929900"
  },
  {
    "text": "not symmetric. It's gonna use per to\ndo the look up. And as it was said there, per\nover here goes up and finds a",
    "start": "1929900",
    "end": "1935040"
  },
  {
    "text": "cmp method here which\nit can apply. In that case, it simply looked\nat, remember, it took the",
    "start": "1935040",
    "end": "1941929"
  },
  {
    "text": "tuples of first and last name\nwhich are both defined here, and did some comparison\non that.",
    "start": "1941930",
    "end": "1947080"
  },
  {
    "text": "So this is a way of again\npointing out to you that the things are not always symmetric,\nand I have to be careful about where do\nI find the methods as",
    "start": "1947080",
    "end": "1953360"
  },
  {
    "text": "I want to use them. Ok? All right.",
    "start": "1953360",
    "end": "1958700"
  },
  {
    "text": "Let's add, I'm gonna do\ntwo more classes here. Let's add one more class, some\npeople debate whether these",
    "start": "1958700",
    "end": "1964780"
  },
  {
    "text": "are really people or not, but\nwe're going to add a class called a professor. OK.",
    "start": "1964780",
    "end": "1971090"
  },
  {
    "text": "Now what am I doing? I'm creating another version\nof class down here.",
    "start": "1971090",
    "end": "1979220"
  },
  {
    "text": "Which again is an instance, or\na subclass, sorry, not an instance, a subclass\nof an MIT person.",
    "start": "1979220",
    "end": "1984760"
  },
  {
    "text": "I see that because I built\nit to be there. Again I've got an initialization\nthat's going to",
    "start": "1984760",
    "end": "1990850"
  },
  {
    "text": "call the person initialization,\nwhich we know is going to go up -- I keep saying that -- going\nto call the MIT person",
    "start": "1990850",
    "end": "1996160"
  },
  {
    "text": "initialization, which is going\nto go up and call this one. So again I'm going to be\nable to find names. And I do a couple of other\ndifferent things here.",
    "start": "1996160",
    "end": "2002830"
  },
  {
    "text": "I'm gonna pass in a rank, full\nprofessor, associate professor, assistant professor,\nwhich I'm just",
    "start": "2002830",
    "end": "2008370"
  },
  {
    "text": "going to bind locally. But I'm gonna add one other\npiece here, which is I'm gonna add a little dictionary\non teaching.",
    "start": "2008370",
    "end": "2015799"
  },
  {
    "text": "So when I create a professor,\nI'm gonna associate with it a dictionary that says, what\nhave you been teaching?",
    "start": "2015800",
    "end": "2021120"
  },
  {
    "text": "And then notice the\nmethods I create. I've got a method here called\nadd teaching, takes, obviously",
    "start": "2021120",
    "end": "2027880"
  },
  {
    "text": "a pointer to the instance. A term, which will just be\na string, and a subject. And let's look at what\nit does right here.",
    "start": "2027880",
    "end": "2034780"
  },
  {
    "text": "OK. In fact the call I'm going to\nmake, I'm not certain I'm going to be able to get away\nwith it, my machine is still",
    "start": "2034780",
    "end": "2042370"
  },
  {
    "text": "wonderfully broken, all right,\nit is, let me just show you what the calls would\nlook like.",
    "start": "2042370",
    "end": "2047760"
  },
  {
    "text": "As you can see here I'm not\ngoing to be able to do them. But I'm going to add teaching,\nas a method call with this",
    "start": "2047760",
    "end": "2055379"
  },
  {
    "text": "with a string for term,\nand a subject number.",
    "start": "2055380",
    "end": "2060579"
  },
  {
    "text": "What is this going to do?",
    "start": "2060580",
    "end": "2066500"
  },
  {
    "text": "Yeah, I know I'm just worried if\nI restart Python, I may not be able to pull the thing back\nin, so I'm going to try and wing it, John, and see if\nI can make it happen.",
    "start": "2066500",
    "end": "2072210"
  },
  {
    "text": "Right, what does that\nteaching do? It's got one of those\ntry except methods. So what does it say\nit's going to do?",
    "start": "2072210",
    "end": "2078550"
  },
  {
    "text": "It's going to go into the\ndictionary associated with teaching, under the value of\nterm, and get out a list. And",
    "start": "2078550",
    "end": "2085879"
  },
  {
    "text": "it's going to append\nto the end of the list the new subject. So it's going to be stored in\nthere, is then going to be term, and a list of what I\ntaught, in case I teach more",
    "start": "2085880",
    "end": "2093270"
  },
  {
    "text": "than one thing each term. It's going to do that, but\nnotice it's a try. If in fact there is no term\ncurrently in the dictionary,",
    "start": "2093270",
    "end": "2100540"
  },
  {
    "text": "started out empty, it's going to\nthrow an error, sorry, not throw an error, it's going\nto raise an exception. Which is a key error, in which\ncase notice what I'm going to",
    "start": "2100540",
    "end": "2107430"
  },
  {
    "text": "do, I'm not going to treat\nit as an error. I'm simply going to say, in that\ncase, just start off with",
    "start": "2107430",
    "end": "2113000"
  },
  {
    "text": "an empty, with an initial list\nwith just that subject in and put it in the dictionary.",
    "start": "2113000",
    "end": "2118320"
  },
  {
    "text": "As I add more things in, I'll\njust keep adding things to this dictionary under\nthat term. And if I want to find out what\nI'm doing, well I can use get",
    "start": "2118320",
    "end": "2125789"
  },
  {
    "text": "teaching, which says given the\nterm, find the thing in the dictionary under that\nterm and return it.",
    "start": "2125790",
    "end": "2131220"
  },
  {
    "text": "If I get an error, I'm going to\nraise it, which says there is nothing for that term, and in\nthat case I guess I'm just going to return none.",
    "start": "2131220",
    "end": "2137730"
  },
  {
    "text": "OK? And then the other two pieces\nwe're going to have here, and we want to look at a little more\ncarefully, I just wanted",
    "start": "2137730",
    "end": "2143530"
  },
  {
    "text": "to show you that example, is a\nprofessor can lecture, and a",
    "start": "2143530",
    "end": "2151420"
  },
  {
    "text": "professor can say something. Look at the say method, because\nthis now add one more",
    "start": "2151420",
    "end": "2156730"
  },
  {
    "text": "nuance to what we\nwant to do here. And I think in interest of\nmaking this go, let me actually, since I'm not going\nto get my machine to do this",
    "start": "2156730",
    "end": "2163030"
  },
  {
    "text": "right, let me create a\ncouple of professors.",
    "start": "2163030",
    "end": "2174830"
  },
  {
    "text": "If I look at what that is, it's\nan MIT person because I didn't have any separate string\nthing there, and we",
    "start": "2174830",
    "end": "2180850"
  },
  {
    "text": "will create a more important\nprofessor.",
    "start": "2180850",
    "end": "2189520"
  },
  {
    "text": "What rank do you want, John? Do you want to stay full? PROFESSOR 2: Undergraduate. PROFESSOR: Undergraduate, right,\na lot more fun I agree.",
    "start": "2189520",
    "end": "2197010"
  },
  {
    "text": "Sorry about that, and we\ncan again just see what that looks like. And that of course,\nwe'll print out,",
    "start": "2197010",
    "end": "2202230"
  },
  {
    "text": "he's also an MIT person. But now here's what\nI want to do. I want to say something\nto my good",
    "start": "2202230",
    "end": "2208170"
  },
  {
    "text": "colleague Professor Guttag. Actually I'm going to\nstart a separate -- I'm going to say something\nto a smart undergraduate.",
    "start": "2208170",
    "end": "2213579"
  },
  {
    "text": "So if I say, remember we\nhave ug defined as an",
    "start": "2213580",
    "end": "2219450"
  },
  {
    "text": "undergraduate, let\nme do something a",
    "start": "2219450",
    "end": "2229320"
  },
  {
    "text": "little different here. Well let, me do it that way.",
    "start": "2229320",
    "end": "2240589"
  },
  {
    "text": "It says, I don't understand\nwhy you say you were enjoying 6.00. Not a good thing to say, right,\nbut if I say to my good",
    "start": "2240590",
    "end": "2249180"
  },
  {
    "text": "colleague Professor Guttag. I have to spell say right, I\nknow, I need help with this,",
    "start": "2249180",
    "end": "2255450"
  },
  {
    "text": "what can I say?",
    "start": "2255450",
    "end": "2264190"
  },
  {
    "text": "We flatter each other\nall the time. It's part of what makes us feel\ngood about ourselves. Why is the sky blue? I enjoyed your paper, but\nwhy is the sky blue?",
    "start": "2264190",
    "end": "2271890"
  },
  {
    "text": "OK, terrible examples, but\nwhat's going on here? One more piece that\nI want to add. Here's my say method for\nprofessor, and now I'm",
    "start": "2271890",
    "end": "2280100"
  },
  {
    "text": "actually taking advantage of to\nwhom I am saying something. Notice again, what does it do? There's the self argument,\nthat's just pointing to the",
    "start": "2280100",
    "end": "2286800"
  },
  {
    "text": "instance of me. I'm passing in another argument,\ngoing to call it to who, in one case it was ug,\nin one case it was Guttag.",
    "start": "2286800",
    "end": "2294079"
  },
  {
    "text": "And then the thing I want to\nsay, ah, look what it does, it says, check the type.",
    "start": "2294080",
    "end": "2299390"
  },
  {
    "text": "And the type is going to take\nthat instance, I had an instance, for example, of a\nprofessor down here, and it's",
    "start": "2299390",
    "end": "2305059"
  },
  {
    "text": "going to pick up what type\nof object it is. So if the type of the person I'm\nspeaking to is undergrad,",
    "start": "2305060",
    "end": "2314200"
  },
  {
    "text": "let's pause for second. Remember I started away back\nsaying we're building abstract data types. Well, here's a great example\nof how I'm using",
    "start": "2314200",
    "end": "2321110"
  },
  {
    "text": "exactly that, right? I've got int, I've got float,\nI now have ug, it's a type. So it's says if the object to\nwhom I'm speaking is an",
    "start": "2321110",
    "end": "2329569"
  },
  {
    "text": "undergrad, then use the same\nmethod from person where I'm going to put this\non the front.",
    "start": "2329570",
    "end": "2335400"
  },
  {
    "text": "On the other hand, if the object\nto whom I'm speaking is a professor, then I'm going to\ntag this on the front and use",
    "start": "2335400",
    "end": "2340660"
  },
  {
    "text": "the underlying say method. On the other hand, if I'm\nspeaking to somebody else, I'm just going to go lecture.",
    "start": "2340660",
    "end": "2346660"
  },
  {
    "text": "All right, and when a professor\nlectures, they just put it's obvious on the\nend of things, as you may have noticed.",
    "start": "2346660",
    "end": "2353089"
  },
  {
    "text": "What's the point I want\nyou to see here? I'm now using the instances\nto help me to find what",
    "start": "2353090",
    "end": "2358869"
  },
  {
    "text": "the code should do. I'm looking at the type. If the type is this, do that. If the type is this, do\nsomething different, ok?",
    "start": "2358870",
    "end": "2364720"
  },
  {
    "text": "And I can now sort of build\nthose pieces up. OK, I said one more class.",
    "start": "2364720",
    "end": "2371300"
  },
  {
    "text": "Notice what we're doing. I know they're silly examples,\nbut, sorry, they are cleverly designed examples to highlight\nkey points.",
    "start": "2371300",
    "end": "2377590"
  },
  {
    "text": "What I'm trying to do is show\nyou how we have methods inherit methods, how have\nmessage shadow methods, how we",
    "start": "2377590",
    "end": "2383720"
  },
  {
    "text": "have methods override methods,\nhow we can use instances as types to define what the\nmethod should do.",
    "start": "2383720",
    "end": "2389250"
  },
  {
    "text": "Let me show you one last class,\nbecause I'm gonna have one more piece that\nwe want to use. And the last class is, sort of,\nonce you've got a set of",
    "start": "2389250",
    "end": "2397910"
  },
  {
    "text": "professors, you can have\nan aggregate of them. And I don't know, if a group of\ngeese are gaggle, I don't know what a set of professors\nare, John.",
    "start": "2397910",
    "end": "2405100"
  },
  {
    "text": "Flamers? I, you know, we've got to figure\nout what the right collective noun here is. We're going to call them a\nfaculty for lack of a better",
    "start": "2405100",
    "end": "2411039"
  },
  {
    "text": "term, right? Now the reason I want to show\nyou this example is, this class, notice, it only is going\nto inherit from object.",
    "start": "2411040",
    "end": "2418700"
  },
  {
    "text": "It actually makes sense. This is going to be a collection\nof things, but it's not a subclass of a particular\nkind of person.",
    "start": "2418700",
    "end": "2424710"
  },
  {
    "text": "And what I want the faculty to\ndo, is to be able to gather together a set of faculty.",
    "start": "2424710",
    "end": "2431460"
  },
  {
    "text": "So if I go down here, grab this\nfor second, and pull it down so you can see it.",
    "start": "2431460",
    "end": "2438160"
  },
  {
    "text": "It looks like I'm not going to\nbe able to run this because my machine is broken, but basically\nI'm gonna define a set of professors, and then I'm\ngonna create a new class",
    "start": "2438160",
    "end": "2445780"
  },
  {
    "text": "called faculty. There's the definition of it. It's got an init. You can kind of see\nwhat it does.",
    "start": "2445780",
    "end": "2451880"
  },
  {
    "text": "It's going to set up an internal\nvariable called names, which is initially an\nempty list, internal variable",
    "start": "2451880",
    "end": "2456980"
  },
  {
    "text": "called ids, which is empty, an\ninternal variable called members, which is empty, and\nanother special variable called place, which we're going\nto come back to in a",
    "start": "2456980",
    "end": "2463710"
  },
  {
    "text": "second, initially\nbound to none. OK, I've got a method called\nadd which I'm going to use",
    "start": "2463710",
    "end": "2469760"
  },
  {
    "text": "down here to add professors\nto the course 6 faculty. Here's what I want\nto add to do.",
    "start": "2469760",
    "end": "2476530"
  },
  {
    "text": "First of all, notice I'm going\nto check the type. If this is not a professor, I'm\ngonna raise an error, a",
    "start": "2476530",
    "end": "2483890"
  },
  {
    "text": "type error, it's the wrong type\nof object to pass in. The second thing I'm gonna do\nis say, if that's okay, then",
    "start": "2483890",
    "end": "2490760"
  },
  {
    "text": "let me go off and get\nthe id number. Now remember, that's right up\nhere, so I'm asking the",
    "start": "2490760",
    "end": "2496550"
  },
  {
    "text": "instance of the professor to go\nup and get the id number. And I want to make sure I only\nhave one instance of each",
    "start": "2496550",
    "end": "2502350"
  },
  {
    "text": "professor in my faculty, so if\nthe id number is in the list of ids already, I'm going to\nraise an error, sorry, raise",
    "start": "2502350",
    "end": "2511289"
  },
  {
    "text": "an exception as well, saying\nI've got a duplicate id. OK? And the reason that's\ngoing to come up is,",
    "start": "2511290",
    "end": "2516340"
  },
  {
    "text": "notice what I do now. Inside of the instant self, I\ntake the variable names and I",
    "start": "2516340",
    "end": "2521640"
  },
  {
    "text": "add to it the family name of\nthe person I just added. OK, notice the form.",
    "start": "2521640",
    "end": "2527360"
  },
  {
    "text": "I'm using the method, there's\nthe parens to get the family name of the person. I'm just adding it to the list.\nI've got the id number,",
    "start": "2527360",
    "end": "2533940"
  },
  {
    "text": "I've added the ids,\nand I add the object itself into members. So as I do this, what\nam I doing?",
    "start": "2533940",
    "end": "2540710"
  },
  {
    "text": "I'm creating a list, actually\nseveral lists: a list of ids, a list of the actual instances,\nand a list of the",
    "start": "2540710",
    "end": "2547160"
  },
  {
    "text": "family names. And as a cost I want to add,\nthat's why I can check and see, is this in here\nalready or not?",
    "start": "2547160",
    "end": "2553550"
  },
  {
    "text": "Now, the last reason I want to\ndo this is, I want to be able to support things like that.",
    "start": "2553550",
    "end": "2578830"
  },
  {
    "text": "This is now different, right,\nthis instance is a collection. I want to be able to do things\nlike, for all the things in",
    "start": "2578830",
    "end": "2585630"
  },
  {
    "text": "that collection, do something,\nlike print out the family names. And to do that, I need two\nspecial forms: iter and next.",
    "start": "2585630",
    "end": "2598550"
  },
  {
    "text": "OK, now let me see if I\ncan say this cleanly. Whenever I use a for, in\nstructure, even if it was on",
    "start": "2598550",
    "end": "2607110"
  },
  {
    "text": "just a normal list you built,\nwhat Python is doing is returning an, what is\ncalled an iterator.",
    "start": "2607110",
    "end": "2612940"
  },
  {
    "text": "Which is something that\nwe talked earlier. It's keeping track of where are\nyou in the list, and how do I get to the next\nthing in the list?",
    "start": "2612940",
    "end": "2620330"
  },
  {
    "text": "I'm going to do the same thing\nhere, and I'm going to create it for this particular\nstructure. So this little thing iter, when\nI call a for something",
    "start": "2620330",
    "end": "2629119"
  },
  {
    "text": "in, one of these instances,\nit calls iter, and notice what it does. It initializes place to 0.",
    "start": "2629120",
    "end": "2635470"
  },
  {
    "text": "That was that variable\nI had up there. That's basically saying I'm at\nthe beginning of the list. It's a pointer to the beginning\nof the list, and it",
    "start": "2635470",
    "end": "2641560"
  },
  {
    "text": "returns self. Just gives me back a pointer\nto the instance.",
    "start": "2641560",
    "end": "2647430"
  },
  {
    "text": "That now allows me at\neach step in that loop to call next. And what does next do?",
    "start": "2647430",
    "end": "2653250"
  },
  {
    "text": "Next says, check to see if that\nvalue is too long, if it's longer than, for example,\nthe list of names, raise an",
    "start": "2653250",
    "end": "2661290"
  },
  {
    "text": "exception called stop iteration,\nwhich the for loop will use to say OK, I'm done. I'm going to break out\nof the for loop.",
    "start": "2661290",
    "end": "2668230"
  },
  {
    "text": "Otherwise, what am\nI going to do? I'll increment place by 1,\nthat's going to move me to the next place in the list, and then\nin this case I'll just",
    "start": "2668230",
    "end": "2675680"
  },
  {
    "text": "return the instance\nitself, right? Members is a list of instances,\nplace I've incremented by 1, I take 1\noff of it, I get to it.",
    "start": "2675680",
    "end": "2683750"
  },
  {
    "text": "So iter and next\nwork together. Iter creates this method, that's\ngoing to give you a",
    "start": "2683750",
    "end": "2689550"
  },
  {
    "text": "pointer to the place in the\nstructure, and then next literally walks along the\nstructure giving you the next",
    "start": "2689550",
    "end": "2694810"
  },
  {
    "text": "element and returning elements\nin turn so you can do something with it. Right, so now what that says\nis, I can have classes that",
    "start": "2694810",
    "end": "2701830"
  },
  {
    "text": "just have local variables. I can have classes that get\nmethods from other variables, and I can also have classes\nthat are collections.",
    "start": "2701830",
    "end": "2709030"
  },
  {
    "text": "And I've supported that by\nadding in this last piece. OK once you have all of that,\nin principle we could start",
    "start": "2709030",
    "end": "2717220"
  },
  {
    "text": "doing some fun things. So let's see what happens\nif we try and make all of this go. And let me, since I'm not going\nto be able to run it,",
    "start": "2717220",
    "end": "2723900"
  },
  {
    "text": "let me simply do it this way.",
    "start": "2723900",
    "end": "2729990"
  },
  {
    "text": "If I have my undergraduate,\nug.",
    "start": "2729990",
    "end": "2735119"
  },
  {
    "text": "I can -- sorry, let's not\ndo it that way -- I can have undergraduate say\nthings like -- all right, what",
    "start": "2735120",
    "end": "2753089"
  },
  {
    "text": "did I just do wrong here? Do I not have undergrad\ndefined? I do.",
    "start": "2753090",
    "end": "2760350"
  },
  {
    "text": "Oh, I didn't have Grimson,\nsorry, it's me, isn't it? Thank you. The undergraduate very politely\nasks why he didn't",
    "start": "2760350",
    "end": "2773310"
  },
  {
    "text": "understand, you can have\nthe professor respond.",
    "start": "2773310",
    "end": "2792520"
  },
  {
    "text": "Again, it simply puts a\ndifferent thing into there. On the other hand, if Professor\nGuttag asks me",
    "start": "2792520",
    "end": "2801660"
  },
  {
    "text": "something about understanding, I\nsay I really like this paper",
    "start": "2801660",
    "end": "2810049"
  },
  {
    "text": "on, you do not understand,\nit's a deep paper on programming languages 5, I\nthink, John, isn't it?",
    "start": "2810050",
    "end": "2815150"
  },
  {
    "text": "What else can you do with\nthis thing, right? You can have an undergraduate\ntalk to an undergraduate, in which case they're\nstill polite.",
    "start": "2815150",
    "end": "2821580"
  },
  {
    "text": "Or you could have -- sorry, let\nme do that the other way -- you could also have an\nundergraduate simply talk to a normal person.",
    "start": "2821580",
    "end": "2836270"
  },
  {
    "text": "All right, but the good news is\nyou know eventually you get it done, and when you're really\ndone you can have the undergraduate be really happy\nabout this, and so she sings",
    "start": "2836270",
    "end": "2845250"
  },
  {
    "text": "to herself.",
    "start": "2845250",
    "end": "2856130"
  },
  {
    "text": "OK it's a little silly, but\nnotice what we've just illustrated. And this is where I want\nto pull it together.",
    "start": "2856130",
    "end": "2863319"
  },
  {
    "text": "With a simple set of classes,\nand the following abilities,",
    "start": "2863320",
    "end": "2868750"
  },
  {
    "text": "an ability to inherit methods\nfrom subclasses, sorry from superclasses, that is having\nthis hierarchy of things.",
    "start": "2868750",
    "end": "2874990"
  },
  {
    "text": "I can create a fairly complex\nkind of interaction. I can take advantage of the\ntypes of the objects to help",
    "start": "2874990",
    "end": "2882440"
  },
  {
    "text": "me decide what to do. And if you think about that,\nI know it sounds very straightforward, but you would\ndo exactly that if you were",
    "start": "2882440",
    "end": "2888410"
  },
  {
    "text": "writing earlier code to deal\nwith some numerical problem. All right, if the thing is an\ninteger, do this, if it's a",
    "start": "2888410",
    "end": "2893869"
  },
  {
    "text": "float, do that, if it's a\nstring, do something else. I'm now giving you exactly the\nsame ability, but the types",
    "start": "2893870",
    "end": "2899400"
  },
  {
    "text": "now can be things that\nyou could create. And what I've also got is now\nthe ability to inherit those",
    "start": "2899400",
    "end": "2905050"
  },
  {
    "text": "methods as they go\nup the chain. So another way of saying it is,\nthings that you want to come away from here, are, in\nterms of these classes.",
    "start": "2905050",
    "end": "2919010"
  },
  {
    "text": "We now have this idea\nof encapsulation. I'm gathering together data that\nnaturally belongs as a",
    "start": "2919010",
    "end": "2924359"
  },
  {
    "text": "unit, and I'm gathering together\nwith it methods that apply to that unit. Just like we would have done\nwith float or int.",
    "start": "2924360",
    "end": "2931270"
  },
  {
    "text": "Ideally, we data hide, we don't\nhappen to do it here, which is too bad. Basically we've got the\nidea of encapsulation.",
    "start": "2931270",
    "end": "2938110"
  },
  {
    "text": "The second thing we've got is\nthis idea of inheritance.",
    "start": "2938110",
    "end": "2946640"
  },
  {
    "text": "Inheritance both meaning\nI can inherit attributes or field values. I can inherit methods by\nmoving up the chain.",
    "start": "2946640",
    "end": "2953920"
  },
  {
    "text": "I can also the shadow or\noverride methods, so that I",
    "start": "2953920",
    "end": "2962990"
  },
  {
    "text": "can specialise. And I do all of that with this\nnice hierarchy of classes.",
    "start": "2962990",
    "end": "2975390"
  },
  {
    "text": "So what hopefully you've seen,\nbetween these two lectures, and we're going to come back\nto it in some subsequent lectures, is that this is now\na different way of just",
    "start": "2975390",
    "end": "2982210"
  },
  {
    "text": "structuring a computational\nsystem. Now, you'll also get arguments,\npolite arguments",
    "start": "2982210",
    "end": "2987770"
  },
  {
    "text": "from faculty members or other\nexperts about which is a better way of doing it. So I'll give you my bias,\nProfessor Guttag will give you",
    "start": "2987770",
    "end": "2994180"
  },
  {
    "text": "his bias next time around. My view, object-oriented system\nare great when you're trying to model systems that\nconsist of a large number of",
    "start": "2994180",
    "end": "3001880"
  },
  {
    "text": "units that interact in\nvery specific ways. So, modeling a system of\npeople's a great idea.",
    "start": "3001880",
    "end": "3007500"
  },
  {
    "text": "Modeling a system of molecules\nis probably a great idea. Modeling a system where it is\nnatural to associate things",
    "start": "3007500",
    "end": "3013319"
  },
  {
    "text": "together and where the number\nof interactions between them is very controlled. These systems work\nreally well.",
    "start": "3013320",
    "end": "3018980"
  },
  {
    "text": "And we'll see some examples\nof that next week. Thanks.",
    "start": "3018980",
    "end": "3022510"
  }
]