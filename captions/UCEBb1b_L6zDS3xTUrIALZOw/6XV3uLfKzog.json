[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "The data path diagram isn't all that useful\nin diagramming the pipelined execution of",
    "start": "170",
    "end": "5190"
  },
  {
    "text": "an instruction sequence since we need a new\ncopy of the diagram for each clock cycle.",
    "start": "5190",
    "end": "10540"
  },
  {
    "text": "A more compact and easier-to-read diagram\nof pipelined execution is provided by the",
    "start": "10540",
    "end": "16650"
  },
  {
    "text": "pipeline diagrams we met back in Part 1 of\nthe course.",
    "start": "16650",
    "end": "20820"
  },
  {
    "text": "There's one row in the diagram for each pipeline\nstage and one column for each cycle of execution.",
    "start": "20820",
    "end": "28600"
  },
  {
    "text": "Entries in the table show which instruction\nis in each pipeline stage at each cycle.",
    "start": "28600",
    "end": "34479"
  },
  {
    "text": "In normal operation, a particular instruction\nmoves diagonally through the diagram as it",
    "start": "34479",
    "end": "38819"
  },
  {
    "text": "proceeds through the five pipeline stages.",
    "start": "38819",
    "end": "42899"
  },
  {
    "text": "To understand data hazards, let's first remind\nourselves of when the register file is read",
    "start": "42899",
    "end": "47628"
  },
  {
    "text": "and written for a particular instruction.",
    "start": "47629",
    "end": "50589"
  },
  {
    "text": "Register reads happen when the instruction\nis in the RF stage, i.e., when we're reading",
    "start": "50589",
    "end": "55160"
  },
  {
    "text": "the instruction's register operands.",
    "start": "55160",
    "end": "59409"
  },
  {
    "text": "Register writes happen at the end of the cycle\nwhen the instruction is in the WB stage.",
    "start": "59409",
    "end": "64350"
  },
  {
    "text": "For example, for the first LD instruction,\nwe read R1 during cycle 2 and write R2 at",
    "start": "64350",
    "end": "70960"
  },
  {
    "text": "the end of cycle 5.",
    "start": "70960",
    "end": "73969"
  },
  {
    "text": "Or consider the register file operations in\ncycle 6:",
    "start": "73969",
    "end": "77979"
  },
  {
    "text": "we're reading R12 and R13 for the MUL instruction\nin the RF stage, and writing R4 at the end",
    "start": "77979",
    "end": "84810"
  },
  {
    "text": "of the cycle for the LD instruction in the\nWB stage.",
    "start": "84810",
    "end": "89130"
  },
  {
    "text": "Okay, now let's see what happens when there\nare data hazards.",
    "start": "89130",
    "end": "92868"
  },
  {
    "text": "In this instruction sequence, the ADDC instruction\nwrites its result in R2, which is immediately",
    "start": "92869",
    "end": "98369"
  },
  {
    "text": "read by the following SUBC instruction.",
    "start": "98369",
    "end": "101689"
  },
  {
    "text": "Correct execution of the SUBC instruction\nclearly depends on the results of the ADDC",
    "start": "101689",
    "end": "105929"
  },
  {
    "text": "instruction.",
    "start": "105929",
    "end": "107280"
  },
  {
    "text": "This what we'd call a read-after-write dependency.",
    "start": "107280",
    "end": "111520"
  },
  {
    "text": "This pipeline diagram shows the cycle-by-cycle\nexecution where we've circled the cycles during",
    "start": "111520",
    "end": "116968"
  },
  {
    "text": "which ADDC writes R2 and SUBC reads R2.",
    "start": "116969",
    "end": "121030"
  },
  {
    "text": "Oops!",
    "start": "121030",
    "end": "122030"
  },
  {
    "text": "ADDC doesn't write R2 until the end of cycle\n5, but SUBC is trying to read the R2 value",
    "start": "122030",
    "end": "128100"
  },
  {
    "text": "in cycle 3.",
    "start": "128100",
    "end": "129429"
  },
  {
    "text": "The value in R2 in the register file in cycle\n3 doesn't yet reflect the execution of the",
    "start": "129430",
    "end": "136079"
  },
  {
    "text": "ADDC instruction.",
    "start": "136080",
    "end": "137989"
  },
  {
    "text": "So as things stand the pipeline would *not*\ncorrectly execute this instruction sequence.",
    "start": "137989",
    "end": "144190"
  },
  {
    "text": "This instruction sequence has triggered a\ndata hazard.",
    "start": "144190",
    "end": "148549"
  },
  {
    "text": "We want the pipelined CPU to generate the\nsame program results as the unpipelined CPU,",
    "start": "148549",
    "end": "154069"
  },
  {
    "text": "so we'll need to figure out a fix.",
    "start": "154070",
    "end": "156760"
  },
  {
    "text": "There are three general strategies we can\npursue to fix pipeline hazards.",
    "start": "156760",
    "end": "161430"
  },
  {
    "start": "157000",
    "end": "157000"
  },
  {
    "text": "Any of the techniques will work, but as we'll\nsee they have different tradeoffs for instruction",
    "start": "161430",
    "end": "166269"
  },
  {
    "text": "throughput and circuit complexity.",
    "start": "166269",
    "end": "169150"
  },
  {
    "text": "The first strategy is to stall instructions\nin the RF stage until the result they need",
    "start": "169150",
    "end": "173720"
  },
  {
    "text": "has been written to the register file.",
    "start": "173720",
    "end": "176180"
  },
  {
    "text": "\"Stall\" means that we don't reload the instruction\nregister at the end of the cycle, so we'll",
    "start": "176180",
    "end": "181450"
  },
  {
    "text": "try to execute the same instruction in the\nnext cycle.",
    "start": "181450",
    "end": "185099"
  },
  {
    "text": "If we stall one pipeline stage, all earlier\nstages must also be stalled since they are",
    "start": "185100",
    "end": "189239"
  },
  {
    "text": "blocked by the stalled instruction.",
    "start": "189239",
    "end": "192879"
  },
  {
    "text": "If an instruction is stalled in the RF stage,\nthen the IF stage is also stalled.",
    "start": "192879",
    "end": "198879"
  },
  {
    "text": "Stalling will always work, but has a negative\nimpact on instruction throughput.",
    "start": "198879",
    "end": "204079"
  },
  {
    "text": "Stall for too many cycles and you'll loose\nthe performance advantages of pipelined execution!",
    "start": "204079",
    "end": "210739"
  },
  {
    "text": "The second strategy is to route the needed\nvalue to earlier pipeline stages as soon as",
    "start": "210739",
    "end": "215689"
  },
  {
    "text": "its computed.",
    "start": "215689",
    "end": "216909"
  },
  {
    "text": "This called bypassing or forwarding.",
    "start": "216909",
    "end": "219930"
  },
  {
    "text": "As it turns out, the value we need often exists\nsomewhere in the pipelined data path, it just",
    "start": "219930",
    "end": "224739"
  },
  {
    "text": "hasn't been written yet to the register file.",
    "start": "224739",
    "end": "228299"
  },
  {
    "text": "If the value exists and can be forwarded to\nwhere it's needed, we won't need to stall.",
    "start": "228299",
    "end": "233040"
  },
  {
    "text": "We'll be able to use this strategy to avoid\nstalling on most types of data hazards.",
    "start": "233040",
    "end": "239969"
  },
  {
    "text": "The third strategy is called speculation.",
    "start": "239970",
    "end": "243100"
  },
  {
    "text": "We'll make an intelligent guess for the needed\nvalue and continue execution.",
    "start": "243100",
    "end": "247810"
  },
  {
    "text": "Once the actual value is determined, if we\nguessed correctly, we're all set.",
    "start": "247810",
    "end": "252799"
  },
  {
    "text": "If we guessed incorrectly, we have to back\nup execution and restart with the correct",
    "start": "252799",
    "end": "257880"
  },
  {
    "text": "value.",
    "start": "257880",
    "end": "259170"
  },
  {
    "text": "Obviously speculation only makes sense if\nit's possible to make accurate guesses.",
    "start": "259170",
    "end": "264010"
  },
  {
    "text": "We'll be able to use this strategy to avoid\nstalling on control hazards.",
    "start": "264010",
    "end": "268860"
  },
  {
    "text": "Let's see how the first two strategies work\nwhen dealing with our data hazard.",
    "start": "268860",
    "end": "273770"
  },
  {
    "text": "Applying the stall strategy to our data hazard,\nwe need to stall the SUBC instruction in the",
    "start": "273770",
    "end": "279440"
  },
  {
    "start": "274000",
    "end": "274000"
  },
  {
    "text": "RF stage until the ADDC instruction writes\nits result in R2.",
    "start": "279440",
    "end": "284720"
  },
  {
    "text": "So in the pipeline diagram, SUBC is stalled\nthree times in the RF stage until it can finally",
    "start": "284720",
    "end": "290420"
  },
  {
    "text": "access the R2 value from the register file\nin cycle 6.",
    "start": "290420",
    "end": "296000"
  },
  {
    "text": "Whenever the RF stage is stalled, the IF stage\nis also stalled.",
    "start": "296000",
    "end": "300200"
  },
  {
    "text": "You can see that in the diagram too.",
    "start": "300200",
    "end": "302580"
  },
  {
    "text": "But when RF is stalled, what should the ALU\nstage do in the next cycle?",
    "start": "302580",
    "end": "308030"
  },
  {
    "text": "The RF stage hasn't finished its job and so\ncan't pass along its instruction!",
    "start": "308030",
    "end": "315000"
  },
  {
    "text": "The solution is for the RF stage to make-up\nan innocuous instruction for the ALU stage,",
    "start": "315000",
    "end": "319770"
  },
  {
    "text": "what's called a NOP instruction, short for\n\"no operation\".",
    "start": "319770",
    "end": "324110"
  },
  {
    "text": "A NOP instruction has no effect on the CPU\nstate, i.e., it doesn't change the contents",
    "start": "324110",
    "end": "329490"
  },
  {
    "text": "of the register file or main memory.",
    "start": "329490",
    "end": "332280"
  },
  {
    "text": "For example any OP-class or OPC-class instruction\nthat has R31 as its destination register is",
    "start": "332280",
    "end": "339150"
  },
  {
    "text": "a NOP.",
    "start": "339150",
    "end": "340340"
  },
  {
    "text": "The NOPs introduced into the pipeline by the\nstalled RF stage are shown in red.",
    "start": "340340",
    "end": "346280"
  },
  {
    "text": "Since the SUBC is stalled in the RF stage\nfor three cycles, three NOPs are introduced",
    "start": "346280",
    "end": "351850"
  },
  {
    "text": "into the pipeline.",
    "start": "351850",
    "end": "353350"
  },
  {
    "text": "We sometimes refer to these NOPs as \"bubbles\"\nin the pipeline.",
    "start": "353350",
    "end": "357150"
  },
  {
    "text": "How does the pipeline know when to stall?",
    "start": "357150",
    "end": "360470"
  },
  {
    "text": "It can compare the register numbers in the\nRA and RB fields of the instruction in the",
    "start": "360470",
    "end": "365750"
  },
  {
    "text": "RF stage with the register numbers in the\nRC field of instructions in the ALU, MEM,",
    "start": "365750",
    "end": "372490"
  },
  {
    "text": "and WB stage.",
    "start": "372490",
    "end": "374919"
  },
  {
    "text": "If there's a match, there's a data hazard\nand the RF stage should be stalled.",
    "start": "374920",
    "end": "380030"
  },
  {
    "text": "The stall will continue until there's no hazard\ndetected.",
    "start": "380030",
    "end": "384620"
  },
  {
    "text": "There are a few details to take care of:\nsome instructions don't read both registers,",
    "start": "384620",
    "end": "390180"
  },
  {
    "text": "the ST instruction doesn't use its RC field,\nand we don't want R31 to match since it's",
    "start": "390180",
    "end": "395910"
  },
  {
    "text": "always okay to read R31 from the register\nfile.",
    "start": "395910",
    "end": "401120"
  },
  {
    "text": "Stalling will ensure correct pipelined execution,\nbut it does increase the effective CPI.",
    "start": "401120",
    "end": "407440"
  },
  {
    "text": "This will lead to longer execution times if\nthe increase in CPI is larger than the decrease",
    "start": "407440",
    "end": "413340"
  },
  {
    "text": "in cycle time afforded by pipelining.",
    "start": "413340",
    "end": "416120"
  },
  {
    "text": "To implement stalling, we only need to make\ntwo simple changes to our pipelined data path.",
    "start": "416120",
    "end": "421650"
  },
  {
    "start": "417000",
    "end": "417000"
  },
  {
    "text": "We generate a new control signal, STALL, which,\nwhen asserted, disables the loading of the",
    "start": "421650",
    "end": "426690"
  },
  {
    "text": "three pipeline registers at the input of the\nIF and RF stages, which means they'll have",
    "start": "426690",
    "end": "431860"
  },
  {
    "text": "the same value next cycle as they do this\ncycle.",
    "start": "431860",
    "end": "435710"
  },
  {
    "text": "We also introduce a mux to choose the instruction\nto be sent along to the ALU stage.",
    "start": "435710",
    "end": "441210"
  },
  {
    "text": "If STALL is 1, we choose a NOP instruction,\ne.g., an ADD with R31 as its destination.",
    "start": "441210",
    "end": "448190"
  },
  {
    "text": "If STALL is 0, the RF stage is not stalled,\nso we pass its current instruction to the",
    "start": "448190",
    "end": "453780"
  },
  {
    "text": "ALU.",
    "start": "453780",
    "end": "454780"
  },
  {
    "text": "And here we see how to compute STALL as described\nin the previous slide.",
    "start": "454780",
    "end": "459230"
  },
  {
    "text": "The additional logic needed to implement stalling\nis pretty modest, so the real design tradeoff",
    "start": "459230",
    "end": "464220"
  },
  {
    "text": "is about increased CPI due to stalling vs.\ndecreased cycle time due to pipelining.",
    "start": "464220",
    "end": "470520"
  },
  {
    "text": "So we have a solution, although it carries\nsome potential performance costs.",
    "start": "470520",
    "end": "475800"
  },
  {
    "text": "Now let's consider our second strategy:\nbypassing, which is applicable if the data",
    "start": "475800",
    "end": "480620"
  },
  {
    "text": "we need in the RF stage is somewhere in the\npipelined data path.",
    "start": "480620",
    "end": "484810"
  },
  {
    "text": "In our example, even though ADDC doesn't write\nR2 until the end of cycle 5, the value that",
    "start": "484810",
    "end": "490780"
  },
  {
    "text": "will be written is computed during cycle 3\nwhen the ADDC is in the ALU stage.",
    "start": "490780",
    "end": "497080"
  },
  {
    "text": "In cycle 3, the output of the ALU is the value\nneeded by the SUBC that's in the RF stage",
    "start": "497080",
    "end": "502949"
  },
  {
    "text": "in the same cycle.",
    "start": "502950",
    "end": "504810"
  },
  {
    "text": "So, if we detect that the RA field of the\ninstruction in the RF stage is the same as",
    "start": "504810",
    "end": "511150"
  },
  {
    "text": "the RC field of the instruction in the ALU\nstage, we can use the output of the ALU in",
    "start": "511150",
    "end": "516919"
  },
  {
    "text": "place of the (stale) RA value being read from\nthe register file.",
    "start": "516919",
    "end": "521399"
  },
  {
    "text": "No stalling necessary!",
    "start": "521399",
    "end": "524169"
  },
  {
    "text": "In our example, in cycle 3 we want to route\nthe output of the ALU to the RF stage to be",
    "start": "524169",
    "end": "529339"
  },
  {
    "text": "used as the value for R2.",
    "start": "529339",
    "end": "532720"
  },
  {
    "text": "We show this with a red \"bypass arrow\" showing\ndata being routed from the ALU stage to the",
    "start": "532720",
    "end": "538709"
  },
  {
    "text": "RF stage.",
    "start": "538709",
    "end": "540100"
  },
  {
    "start": "540000",
    "end": "540000"
  },
  {
    "text": "To implement bypassing, we'll add a many-input\nmultiplexer to the read ports of the register",
    "start": "540100",
    "end": "544870"
  },
  {
    "text": "file so we can select the appropriate value\nfrom other pipeline stages.",
    "start": "544870",
    "end": "550170"
  },
  {
    "text": "Here we show the combinational bypass paths\nfrom the ALU, MEM, and WB stages.",
    "start": "550170",
    "end": "556420"
  },
  {
    "text": "For the bypassing example of the previous\nslides, we use the blue bypass path during",
    "start": "556420",
    "end": "561220"
  },
  {
    "text": "cycle 3 to get the correct value for R2.",
    "start": "561220",
    "end": "565910"
  },
  {
    "text": "The bypass muxes are controlled by logic that's\nmatching the number of the source register",
    "start": "565910",
    "end": "570279"
  },
  {
    "text": "to the number of the destination registers\nin the ALU, MEM, and WB stages, with the usual",
    "start": "570279",
    "end": "576600"
  },
  {
    "text": "complications of dealing with R31.",
    "start": "576600",
    "end": "580930"
  },
  {
    "text": "What if there are multiple matches, i.e.,\nif the RF stage is trying to read a register",
    "start": "580930",
    "end": "585279"
  },
  {
    "text": "that's the destination for, say, the instructions\nin both the ALU and MEM stages?",
    "start": "585280",
    "end": "591509"
  },
  {
    "text": "No problem!",
    "start": "591509",
    "end": "593110"
  },
  {
    "text": "We want to select the result from the most\nrecent instruction, so we'd chose the ALU",
    "start": "593110",
    "end": "598180"
  },
  {
    "text": "match if there is one, then the MEM match,\nthen the WB match, then, finally, the output",
    "start": "598180",
    "end": "604089"
  },
  {
    "text": "of the register file.",
    "start": "604089",
    "end": "606260"
  },
  {
    "start": "606000",
    "end": "606000"
  },
  {
    "text": "Here's diagram showing all the bypass paths\nwe'll need.",
    "start": "606260",
    "end": "610060"
  },
  {
    "text": "Note that branches and jumps write their PC+4\nvalue into the register file, so we'll need",
    "start": "610060",
    "end": "614630"
  },
  {
    "text": "to bypass from the PC+4 values in the various\nstages as well as the ALU values.",
    "start": "614630",
    "end": "621519"
  },
  {
    "text": "Note that the bypassing is happening at the\nend of the cycle, e.g., after the ALU has",
    "start": "621519",
    "end": "626839"
  },
  {
    "text": "computed its answer.",
    "start": "626839",
    "end": "628080"
  },
  {
    "text": "To accommodate the extra t_PD of the bypass\nmux, we'll have to extend the clock period",
    "start": "628080",
    "end": "633149"
  },
  {
    "text": "by a small amount.",
    "start": "633149",
    "end": "635279"
  },
  {
    "text": "So once again there's a design tradeoff - the\nincreased CPI of stalling vs the slightly",
    "start": "635279",
    "end": "641290"
  },
  {
    "text": "increased cycle time of bypassing.",
    "start": "641290",
    "end": "643660"
  },
  {
    "text": "And, of course, in the case of bypassing there's\nthe extra area needed for the necessary wiring",
    "start": "643660",
    "end": "649170"
  },
  {
    "text": "and muxes.",
    "start": "649170",
    "end": "651550"
  },
  {
    "text": "We can cut back on the costs by reducing the\namount of bypassing, say, to only bypassing",
    "start": "651550",
    "end": "657070"
  },
  {
    "text": "ALU results from the ALU stage and use stalling\nto deal with all the other data hazards.",
    "start": "657070",
    "end": "663740"
  },
  {
    "text": "If we implement full bypassing, do we still\nneed the STALL logic?",
    "start": "663740",
    "end": "668310"
  },
  {
    "start": "668000",
    "end": "668000"
  },
  {
    "text": "As it turns out, we do!",
    "start": "668310",
    "end": "670199"
  },
  {
    "text": "There's one data hazard that bypassing doesn't\ncompletely address.",
    "start": "670199",
    "end": "674779"
  },
  {
    "text": "Consider trying to immediately the use the\nresult of a LD instruction.",
    "start": "674779",
    "end": "678670"
  },
  {
    "text": "In the example shown here, the SUBC is trying\nto use the value the immediately preceding",
    "start": "678670",
    "end": "683970"
  },
  {
    "text": "LD is writing to R2.",
    "start": "683970",
    "end": "686248"
  },
  {
    "text": "This is called a load-to-use hazard.",
    "start": "686249",
    "end": "689740"
  },
  {
    "text": "Recalling that LD data isn't available in\nthe data path until the cycle when LD reaches",
    "start": "689740",
    "end": "694378"
  },
  {
    "text": "the WB stage, even with full bypassing we'll\nneed to stall SUBC in the RF stage until cycle",
    "start": "694379",
    "end": "701220"
  },
  {
    "text": "5, introducing two NOPs into the pipeline.",
    "start": "701220",
    "end": "705688"
  },
  {
    "text": "Without bypassing from the WB stage, we need\nto stall until cycle 6.",
    "start": "705689",
    "end": "711199"
  },
  {
    "text": "In summary, we have two strategies for dealing\nwith data hazards.",
    "start": "711199",
    "end": "716470"
  },
  {
    "start": "712000",
    "end": "712000"
  },
  {
    "text": "We can stall the IF and RF stages until the\nregister values needed by the instruction",
    "start": "716470",
    "end": "721529"
  },
  {
    "text": "in the RF stage are available in the register\nfile.",
    "start": "721529",
    "end": "725259"
  },
  {
    "text": "The required hardware is simple, but the NOPs\nintroduced into the pipeline waste CPU cycles",
    "start": "725259",
    "end": "731300"
  },
  {
    "text": "and result in an higher effective CPI.",
    "start": "731300",
    "end": "734570"
  },
  {
    "text": "Or we can use bypass paths to route the required\nvalues to the RF stage assuming they exist",
    "start": "734570",
    "end": "740800"
  },
  {
    "text": "somewhere in the pipelined data path.",
    "start": "740800",
    "end": "744040"
  },
  {
    "text": "This approach requires more hardware than\nstalling, but doesn't reduce the effective",
    "start": "744040",
    "end": "748350"
  },
  {
    "text": "CPI.",
    "start": "748350",
    "end": "749750"
  },
  {
    "text": "Even if we implement bypassing, we'll still\nneed stalls to deal with load-to-use hazards.",
    "start": "749750",
    "end": "755689"
  },
  {
    "text": "Can we keep adding pipeline stages in the\nhopes of further reducing the clock period?",
    "start": "755689",
    "end": "760329"
  },
  {
    "text": "More pipeline stages mean more instructions\nin the pipeline at the same time, which in",
    "start": "760329",
    "end": "765438"
  },
  {
    "text": "turn increases the chance of a data hazard\nand the necessity of stalling, thus increasing",
    "start": "765439",
    "end": "770760"
  },
  {
    "text": "CPI.",
    "start": "770760",
    "end": "773189"
  },
  {
    "start": "773000",
    "end": "773000"
  },
  {
    "text": "Compilers can help reduce dependencies by\nreorganizing the assembly language code they",
    "start": "773189",
    "end": "777290"
  },
  {
    "text": "produce.",
    "start": "777290",
    "end": "778339"
  },
  {
    "text": "Here's the load-to-use hazard example we saw\nearlier.",
    "start": "778339",
    "end": "782009"
  },
  {
    "text": "Even with full bypassing, we'd need to stall\nfor 2 cycles.",
    "start": "782009",
    "end": "786600"
  },
  {
    "text": "But if the compiler (or assembly language\nprogrammer!) notices that the MUL and XOR",
    "start": "786600",
    "end": "791430"
  },
  {
    "text": "instructions are independent of the SUBC instruction\nand hence can be moved before the SUBC,",
    "start": "791430",
    "end": "796790"
  },
  {
    "text": "the dependency is now such that the LD is\nnaturally in the WB stage when the SUBC is",
    "start": "796790",
    "end": "802759"
  },
  {
    "text": "in the RF stage, so no stalls are needed.",
    "start": "802759",
    "end": "807079"
  },
  {
    "text": "This optimization only works when the compiler\ncan find independent instructions to move",
    "start": "807079",
    "end": "811308"
  },
  {
    "text": "around.",
    "start": "811309",
    "end": "812910"
  },
  {
    "text": "Unfortunately there are plenty of programs\nwhere such instructions are hard to find.",
    "start": "812910",
    "end": "819290"
  },
  {
    "start": "818000",
    "end": "818000"
  },
  {
    "text": "Then there's one final approach we could take\n-",
    "start": "819290",
    "end": "821868"
  },
  {
    "text": "change the ISA so that data hazards are part\nof the ISA, i.e., just explain that writes",
    "start": "821869",
    "end": "829850"
  },
  {
    "text": "to the destination register happen with a\n3-instruction delay!",
    "start": "829850",
    "end": "834920"
  },
  {
    "text": "If NOPs are needed, make the programmer add\nthem to the program.",
    "start": "834920",
    "end": "839100"
  },
  {
    "text": "Simplify the hardware at the \"small\" cost\nof making the compilers work harder.",
    "start": "839100",
    "end": "844308"
  },
  {
    "text": "You can imagine exactly how much the compiler\nwriters will like this suggestion.",
    "start": "844309",
    "end": "848939"
  },
  {
    "text": "Not to mention assembly language programmers!",
    "start": "848939",
    "end": "851959"
  },
  {
    "text": "And you can change the ISA again when you\nadd more pipeline stages!",
    "start": "851959",
    "end": "857769"
  },
  {
    "text": "This is how a compiler writer views CPU architects\nwho unilaterally change the ISA to save a",
    "start": "857769",
    "end": "863779"
  },
  {
    "text": "few logic gates :)\nThe bottom line is that successful ISAs have",
    "start": "863779",
    "end": "868420"
  },
  {
    "text": "very long lifetimes and so shouldn't include\ntradeoffs driven by short-term implementation",
    "start": "868420",
    "end": "874209"
  },
  {
    "text": "considerations.",
    "start": "874209",
    "end": "875209"
  },
  {
    "text": "Best not to go there.",
    "start": "875209",
    "end": "876579"
  }
]