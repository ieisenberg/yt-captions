[
  {
    "text": "[SQUEAKING]\n[RUSTLING] [CLICKING]",
    "start": "0",
    "end": "11400"
  },
  {
    "text": "ANA BELL: OK, so\nlet's get started. Today we will be\ncontinuing talking a little bit about loops\nand seeing some other couple",
    "start": "11400",
    "end": "18990"
  },
  {
    "text": "nuances of loops. And then, we'll get started on\nour first algorithm, the guess",
    "start": "18990",
    "end": "24119"
  },
  {
    "text": "and check algorithm. And then, towards\nthe end, we're going to start talking\nabout binary numbers in advance of seeing\nour next algorithm.",
    "start": "24120",
    "end": "31160"
  },
  {
    "text": "So let's do a quick recap of\nwhat we learned last time. And then, we'll do a\nlittle coding example and then we'll move on.",
    "start": "31160",
    "end": "37130"
  },
  {
    "text": "So we saw last lecture some\nlooping mechanisms, right? We saw while loops\nand for loops.",
    "start": "37130",
    "end": "43120"
  },
  {
    "text": "They're both a way\nfor us to control what happens in the code. And specifically,\nthey're a way for us",
    "start": "43120",
    "end": "48820"
  },
  {
    "text": "to repeat certain lines in the\ncode sort of automatically, so to speak. So with while loops,\nthe lines of code",
    "start": "48820",
    "end": "55059"
  },
  {
    "text": "were repeated as long\nas some condition held. And with for loops,\nthe lines of code",
    "start": "55060",
    "end": "60310"
  },
  {
    "text": "were repeated for some\nsequence of values, OK? And the sequence of values\nwas something that we decided.",
    "start": "60310",
    "end": "67780"
  },
  {
    "text": "It was numerical. That's what we saw last lecture. Today, we're going to see\nthat the sequence of values",
    "start": "67780",
    "end": "73138"
  },
  {
    "text": "can actually be\nnon-numerical as well. So both of those loop\ntypes, I guess, had--",
    "start": "73138",
    "end": "85220"
  },
  {
    "text": "ended at certain times, right? So the while loop ended when\nthe condition became false.",
    "start": "85220",
    "end": "91730"
  },
  {
    "text": "And for loop ended\nwhen we've exhausted our sequence of values. But oftentimes, we want to write\nprograms where we break out",
    "start": "91730",
    "end": "99560"
  },
  {
    "text": "of the loop prematurely. We don't want the while loop\ncondition to become false and we don't want to exhaust\nour entire set of values",
    "start": "99560",
    "end": "105920"
  },
  {
    "text": "in for loop. So in order to exit a loop\nbefore the natural end comes,",
    "start": "105920",
    "end": "111710"
  },
  {
    "text": "we can use this thing\ncalled a break statement. And the break statement\nallows us to exit the loop.",
    "start": "111710",
    "end": "118580"
  },
  {
    "text": "And the loop it exits is going\nto be the one that immediately surrounds the break statement.",
    "start": "118580",
    "end": "123810"
  },
  {
    "text": "So here's a little\nexample of a nested-- two nested while loop. So one while loop and then\none nested one inside it.",
    "start": "123810",
    "end": "131270"
  },
  {
    "text": "The outer one is going to run\nwhenever condition one holds.",
    "start": "131270",
    "end": "136850"
  },
  {
    "text": "And the inner one runs whenever\ncondition two holds, OK? Now, expression a will evaluate\nwhen both condition one",
    "start": "136850",
    "end": "145460"
  },
  {
    "text": "and condition two hold, right? So we enter the first while loop\nand we enter the second while loop. Both of those conditions\nhave to be true.",
    "start": "145460",
    "end": "152930"
  },
  {
    "text": "But Python, as soon as it\nsees this break statement, Python will immediately\nexit the loop that",
    "start": "152930",
    "end": "160618"
  },
  {
    "text": "surrounds that break statement. So the loop that surrounds\nthe break statement is the one that\nhas condition two.",
    "start": "160618",
    "end": "166730"
  },
  {
    "text": "The condition one\nloop will keep going. So as soon as Python sees\nthis break statement,",
    "start": "166730",
    "end": "172660"
  },
  {
    "text": "it's going to immediately\nstop running the while loop. It's not even\ngoing to go back up and check the\ncondition two, which",
    "start": "172660",
    "end": "179230"
  },
  {
    "text": "means that expression B will\nactually never get evaluated. So this is terrible code.",
    "start": "179230",
    "end": "184284"
  },
  {
    "text": "We don't want to write code like\nthis because expression B will never be run, right? But this is just to\nshow you the impact",
    "start": "184285",
    "end": "190810"
  },
  {
    "text": "that a break\nstatement would have. And expression c will\nthen be evaluated",
    "start": "190810",
    "end": "196040"
  },
  {
    "text": "whenever condition one is true. Now, condition\ntwo may or may not have been true along the way. But expression c\nwill evaluate only",
    "start": "196040",
    "end": "203960"
  },
  {
    "text": "when condition one\nis true, right? Condition two would\nhave stopped being true. And then, we're going\nat the same indentation",
    "start": "203960",
    "end": "210470"
  },
  {
    "text": "level as this inner loop. ",
    "start": "210470",
    "end": "215989"
  },
  {
    "text": "AUDIENCE: It only\nevaluates the one time? It only gives a one and then\nbecause the break is there? ANA BELL: Exactly, yeah.",
    "start": "215990",
    "end": "221600"
  },
  {
    "text": "That's a great point. So it only evaluates this\nexpression a one time because right after it\nevaluates it, it sees the break.",
    "start": "221600",
    "end": "228080"
  },
  {
    "text": "And then, we immediately exit\nthe while loop and we're done. That is a great observation. Yeah.",
    "start": "228080",
    "end": "233570"
  },
  {
    "text": "And that's what this\ncode will basically show. So here it is us doing the break\nstatement in the same structure",
    "start": "233570",
    "end": "240109"
  },
  {
    "text": "as on the previous slide. And what we're going\nto do is actually just run the Python\nTutor for this code just",
    "start": "240110",
    "end": "247160"
  },
  {
    "text": "to give you some more practice\nrunning the Python Tutor. So this is the same code\nas on the previous slide.",
    "start": "247160",
    "end": "254930"
  },
  {
    "text": "I've got a for loop that\ngoes through some sequence of values. Can anyone tell me what\nare the sequence of values",
    "start": "254930",
    "end": "260390"
  },
  {
    "text": "this for loop will loop over?  5, 7, 9, and we stop, right?",
    "start": "260390",
    "end": "271490"
  },
  {
    "text": "Because 11 is end, but we go up\nto but not including n minus 1. So 5, 7, 9 are the\nonly three values",
    "start": "271490",
    "end": "278360"
  },
  {
    "text": "we would potentially loop over. So hit Next.",
    "start": "278360",
    "end": "283470"
  },
  {
    "text": "We initialize my sum to zero. So in our minds, we\nthink about the fact that we're going\nto loop through--",
    "start": "283470",
    "end": "289139"
  },
  {
    "text": "make this loop\nvariable be 5, 7, 9. So the first time through\nthe loop i will be 5.",
    "start": "289140",
    "end": "295410"
  },
  {
    "text": "We're going to add i, which\nis currently 5, to my sum. So 5 plus 0 makes my sum 5.",
    "start": "295410",
    "end": "303509"
  },
  {
    "text": "And then, we immediately\nsee the break, right? Because if my sum equals\n5 is true, so we go inside",
    "start": "303510",
    "end": "309910"
  },
  {
    "text": "and we immediately see\nthe break statement, this line will\nnever get executed. So we're never going to\nincrement my sum by 1.",
    "start": "309910",
    "end": "317135"
  },
  {
    "text": " So the break immediately\nbreaks out of our loop.",
    "start": "317135",
    "end": "324460"
  },
  {
    "text": "Now, the if statement\nis not a loop, right? It's a conditional. So the loop we break\nout of is for loop.",
    "start": "324460",
    "end": "329979"
  },
  {
    "text": "And then, there's no\nother loop surrounding it, so then, the program is\nbasically done and we print 5. ",
    "start": "329980",
    "end": "338430"
  },
  {
    "text": "Again, bad code. We would never write\ncode like this. But this is just to\nshow you exactly what",
    "start": "338430",
    "end": "344520"
  },
  {
    "text": "happens with the\nbreak statement. So there's the code\nblock for the for loop.",
    "start": "344520",
    "end": "350320"
  },
  {
    "text": "And this is the code block\nfor the if statement. And the break breaks\nout of our loop,",
    "start": "350320",
    "end": "355800"
  },
  {
    "text": "which is the lighter purple,\nnot the if statement.",
    "start": "355800",
    "end": "362639"
  },
  {
    "text": "So let's have you write\na little bit of code. And this is sort of\nmaybe a little practice",
    "start": "362640",
    "end": "368010"
  },
  {
    "text": "with just loops in general\nthat we saw last lecture. There's no break, really,\nin this particular program",
    "start": "368010",
    "end": "375360"
  },
  {
    "text": "here, just a little\nbit of practice. So what I want you\nto do is to write code that, basically,\nhas a for loop",
    "start": "375360",
    "end": "381480"
  },
  {
    "text": "running through this range. So for i in, pick one of these. I want you to write code\nwithin that for loop that",
    "start": "381480",
    "end": "389370"
  },
  {
    "text": "counts how many even numbers\nare in that range, right?",
    "start": "389370",
    "end": "394680"
  },
  {
    "text": "So including the 0. So for range 5, your\ncounter should basically",
    "start": "394680",
    "end": "400199"
  },
  {
    "text": "pick up on the fact that 0 is\neven, 2 is even, and 4 is even,",
    "start": "400200",
    "end": "405878"
  },
  {
    "text": "and then that's it. So it should print 3. ",
    "start": "405878",
    "end": "412340"
  },
  {
    "text": "So here is you try it inside\nthe Python file for today. And I've already started\nyou off with this for i",
    "start": "412340",
    "end": "419540"
  },
  {
    "text": "in range 5 as the first one. And I'll give you\na couple of minutes",
    "start": "419540",
    "end": "425063"
  },
  {
    "text": "to just write the code in here. ",
    "start": "425063",
    "end": "433180"
  },
  {
    "text": "OK, would anyone like to\nstart us off with some code? ",
    "start": "433180",
    "end": "443960"
  },
  {
    "text": "Or give me-- yeah? AUDIENCE: [INAUDIBLE]. ",
    "start": "443960",
    "end": "456097"
  },
  {
    "text": "ANA BELL: Yep.  So this line of code is\ngoing to take our i, right?",
    "start": "456097",
    "end": "463650"
  },
  {
    "text": "So in fact, what we could\ndo to remind ourselves what i is, and this is very\nhelpful for quizzes as well,",
    "start": "463650",
    "end": "469980"
  },
  {
    "text": "we can write a\nlittle comment here that says I is 0, 1, 2, 3, 4.",
    "start": "469980",
    "end": "476910"
  },
  {
    "text": "Just so we don't have\nto remember this fact, we can just always look here\nand know what i is going to be.",
    "start": "476910",
    "end": "484380"
  },
  {
    "text": "And then, this line of\ncode, absolutely correct, is going to take i and\ngrab the remainder when",
    "start": "484380",
    "end": "490830"
  },
  {
    "text": "i is divided by 2. And if the remainder is 0, that\nmeans that the number is even.",
    "start": "490830",
    "end": "499680"
  },
  {
    "text": "And then, what do\nwe do inside here? ",
    "start": "499680",
    "end": "509078"
  },
  {
    "text": "So when this is\ntrue, when it's even, how do we keep\ntrack of whether-- or how many times\nthis condition occurs?",
    "start": "509078",
    "end": "517200"
  },
  {
    "text": "Yeah? AUDIENCE: [INAUDIBLE]. ANA BELL: Yes, exactly.",
    "start": "517200",
    "end": "523219"
  },
  {
    "text": "Should we create a variable? Yes we can. So let's call it even nums.",
    "start": "523220",
    "end": "528290"
  },
  {
    "text": "And we'll probably want to\nincrement it by 1, right? Because here's another\nnumber that's even.",
    "start": "528290",
    "end": "534470"
  },
  {
    "text": "So even nums plus equals 1. And then, let's remember\nto initialize it",
    "start": "534470",
    "end": "542910"
  },
  {
    "text": "right before our loop, right? So initially, before\nwe even start our loop, we have 0 even numbers. And then, each time\nthrough our loop,",
    "start": "542910",
    "end": "549690"
  },
  {
    "text": "we see one that's\nperfectly divisible by 2. We're going to increment\nthis little counter by one.",
    "start": "549690",
    "end": "556460"
  },
  {
    "text": " AUDIENCE: Not the same variable.",
    "start": "556460",
    "end": "561852"
  },
  {
    "text": "ANA BELL: Oh yeah,\nnot the same variable. Thank you. Even nums. Yeah. ",
    "start": "561852",
    "end": "568390"
  },
  {
    "text": "And the mental model you should\nhave at this point or beginning is just the fact that these\nthree lines solve our problem.",
    "start": "568390",
    "end": "577269"
  },
  {
    "text": "It does the automatic\ncounting for us, right? Because i will take on 0,\nthen 1, then 2, then 3,",
    "start": "577270",
    "end": "585310"
  },
  {
    "text": "and then 4 automatically\nas the loop goes through the\nsequence of values. And so at the end of\nthe loop, so sort of",
    "start": "585310",
    "end": "591880"
  },
  {
    "text": "at the same indentation level as\nthe for loop, all we need to do is print how many of\nthese numbers we have.",
    "start": "591880",
    "end": "603920"
  },
  {
    "text": "So if we run it, it'll print 3. And if we change\nthis to 10, it'll",
    "start": "603920",
    "end": "609459"
  },
  {
    "text": "print probably 6\nbecause it counts the 0. ",
    "start": "609460",
    "end": "616490"
  },
  {
    "text": "Questions about-- yeah, please. AUDIENCE: Is there\nanything I should look out",
    "start": "616490",
    "end": "621540"
  },
  {
    "text": "for in the fine print\non 2 instead of 3? ANA BELL: So if\nyou're under counting,",
    "start": "621540",
    "end": "627029"
  },
  {
    "text": "you may be initialize--\ndid you initialize even nums to something else? Or maybe this is not\nincrementing right or maybe",
    "start": "627030",
    "end": "635250"
  },
  {
    "text": "the range is different? AUDIENCE: I'll try\nto read them to you. ANA BELL: Yeah. ",
    "start": "635250",
    "end": "645500"
  },
  {
    "text": "It worked. Awesome. OK, so iterating through--",
    "start": "645500",
    "end": "655870"
  },
  {
    "text": "using for loops to iterate\nthrough sequence of values is pretty useful. Let's take another look here\nat this particular program.",
    "start": "655870",
    "end": "663260"
  },
  {
    "text": "So this program is-- this set of code, this\ncode, and this code",
    "start": "663260",
    "end": "668649"
  },
  {
    "text": "actually end up\ndoing the same thing. But let's look at\nthe top one for now. So this is a program that\ntakes in a string s as",
    "start": "668650",
    "end": "676810"
  },
  {
    "text": "sort of an input, so to speak. It iterates through the\nnumbers 0 to the length of s.",
    "start": "676810",
    "end": "684640"
  },
  {
    "text": "For index in range\nlen s is basically going to say for index in range\n13 or however many letters",
    "start": "684640",
    "end": "692830"
  },
  {
    "text": "this string has, right? D-E-M-O space,\nall those letters.",
    "start": "692830",
    "end": "698550"
  },
  {
    "text": "There's 13 of them or\nsomething like that. So this line of\ncode here is going",
    "start": "698550",
    "end": "703830"
  },
  {
    "text": "to have our index\ntake on the value 0 through 13 representing\nthe index in s.",
    "start": "703830",
    "end": "711250"
  },
  {
    "text": "So the lowercase d\nwill be at index 0, the lowercase e will be\nat index 1, and so on.",
    "start": "711250",
    "end": "717760"
  },
  {
    "text": "So with this index in\nhand, the next bit of code, if square bracket\nindex equal equal i",
    "start": "717760",
    "end": "725390"
  },
  {
    "text": "will check for me if this\nparticular character is an i, or that particular\ncharacter is a u.",
    "start": "725390",
    "end": "732620"
  },
  {
    "text": "And every time that\nhappens, I'm going to have this print\nout to the screen.",
    "start": "732620",
    "end": "738440"
  },
  {
    "text": "There's an i or u. So inside my code here,\nthis is the first one.",
    "start": "738440",
    "end": "744635"
  },
  {
    "text": " And I run it. It's going to print\nout that sentence twice",
    "start": "744635",
    "end": "751330"
  },
  {
    "text": "because there's only\ntwo i's or u's in here. And if it repeats, it'll\nprint it out twice. So there's one u and one i.",
    "start": "751330",
    "end": "758440"
  },
  {
    "text": " But this code can actually\nbe written a lot simpler.",
    "start": "758440",
    "end": "766040"
  },
  {
    "text": "Notice it took me a little\nbit of a while to explain it. And probably, at\nfirst glance, it",
    "start": "766040",
    "end": "771272"
  },
  {
    "text": "would take you a\nlittle bit of time to figure out what it's doing. And that's because\nwe're actually relying on the index as\nkind of a middleman, right?",
    "start": "771272",
    "end": "780080"
  },
  {
    "text": "We're iterating for\nloop through the index. And then, we're indexing\ninto that index variable",
    "start": "780080",
    "end": "788630"
  },
  {
    "text": "to grab the particular letter. It turns out that\nwith for loops,",
    "start": "788630",
    "end": "794210"
  },
  {
    "text": "I told you you can iterate over\nany sequence of values, not just numbers.",
    "start": "794210",
    "end": "799290"
  },
  {
    "text": "And remember that strings\nare actually just a sequence of characters, right? Case sensitive characters.",
    "start": "799290",
    "end": "805440"
  },
  {
    "text": "So in Python, we can actually\nwrite code like this. So the middle box right here.",
    "start": "805440",
    "end": "813600"
  },
  {
    "text": "It has for loop iterating\nthrough each character in the string directly. So no longer are we looking\nat the index, 0 through 12,",
    "start": "813600",
    "end": "823290"
  },
  {
    "text": "but we're looking at\nthe letter directly. So our loop variable,\nwhich I called char,",
    "start": "823290",
    "end": "829769"
  },
  {
    "text": "but you can call\nwhatever you'd like, is now going to take on values\nthat are the letters themselves",
    "start": "829770",
    "end": "836640"
  },
  {
    "text": "one at a time. So the first time through the\nloop, char will be lowercase d. The next time through the\nloop, char will be lowercase e.",
    "start": "836640",
    "end": "843900"
  },
  {
    "text": "The next time, char will\nbe lowercase m and so on. And so now we've got\nthis sequence of values",
    "start": "843900",
    "end": "849000"
  },
  {
    "text": "that's the letters directly. So when we check if the letter\nis an i or u, all I need to do",
    "start": "849000",
    "end": "856110"
  },
  {
    "text": "is check if that character-- char, my variable--\nis equivalent to i or equivalent to u.",
    "start": "856110",
    "end": "862920"
  },
  {
    "text": "And it's going to be the same-- and it's exactly the same code. So this is the\none we had before.",
    "start": "862920",
    "end": "868839"
  },
  {
    "text": "And this is the one\nI just went through, and again, it prints\nout that sentence twice",
    "start": "868840",
    "end": "874050"
  },
  {
    "text": "because it's the\nsame starting string. So the sequence of values now\nis our characters directory.",
    "start": "874050",
    "end": "881960"
  },
  {
    "text": "It's the letters directly. It's not the index itself. And it turns out\nthere's actually",
    "start": "881960",
    "end": "887100"
  },
  {
    "text": "a much more Pythonic way to\nwrite the code, this middle box down here.",
    "start": "887100",
    "end": "892570"
  },
  {
    "text": "So in the bottom box, the\nonly part that I've changed is the if statement.",
    "start": "892570",
    "end": "897600"
  },
  {
    "text": "And I'm using this\nn keyword to test whether the character\nthat I have in hand,",
    "start": "897600",
    "end": "903300"
  },
  {
    "text": "lowercase d, lowercase\ne, lowercase m, and so on is in this sequence\nof characters I or u.",
    "start": "903300",
    "end": "909810"
  },
  {
    "text": "And for this case, it's\nnot so important, right? Because in the\nmiddle box we could do if char is equal to i or char\nis equal to u, which is fine.",
    "start": "909810",
    "end": "920070"
  },
  {
    "text": "But if we wanted to test if the\ncharacter is one of the digits 0 through 9, this if,\nor, or, or would become",
    "start": "920070",
    "end": "928980"
  },
  {
    "text": "a really long line, right? And so all we can do is if char\nis in some particular sequence",
    "start": "928980",
    "end": "936180"
  },
  {
    "text": "of characters, Python will\nautomatically turn that into that longer if it's this\nor if it's this or if it's this",
    "start": "936180",
    "end": "942870"
  },
  {
    "text": "or if it's this and so on.  OK, so the big idea\nhere with for loops",
    "start": "942870",
    "end": "950050"
  },
  {
    "text": "is that, yes, we're iterating\nthrough a sequence of values, but we're not limited\nto just numbers. And that's the cool\nthing about for loops",
    "start": "950050",
    "end": "956680"
  },
  {
    "text": "you can iterate through\ncharacters directly. And we're going to\nsee later on, we can iterate through lists of\nnumbers, lists of strings,",
    "start": "956680",
    "end": "964300"
  },
  {
    "text": "and a whole bunch\nof other things. So let's write a slightly\nmore complex program.",
    "start": "964300",
    "end": "970370"
  },
  {
    "text": "This was version 0.01 of\nthe cheerleader robots. You see up in the corner there\nthat I wrote the robots are not",
    "start": "970370",
    "end": "979010"
  },
  {
    "text": "mine, but the code is. So here's a little bit\nof code that kind of puts together iterating through\nstrings directly and iterating",
    "start": "979010",
    "end": "986720"
  },
  {
    "text": "through numbers directly. So let me show you what this\nprogram is actually doing. And then, we'll\ngo over the code.",
    "start": "986720",
    "end": "993410"
  },
  {
    "text": "Somebody give me some noun\nyou're really excited about.",
    "start": "993410",
    "end": "998620"
  },
  {
    "text": "What is that? AUDIENCE: [INAUDIBLE]. ANA BELL: What? ",
    "start": "998620",
    "end": "1006060"
  },
  {
    "text": "Never mind. Give me something\nelse that I know. What is it?",
    "start": "1006060",
    "end": "1011130"
  },
  {
    "text": "Pineapples. OK, pineapples. OK, it's going to cheer\nfor us about pineapples,",
    "start": "1011130",
    "end": "1017830"
  },
  {
    "text": "and let's say we're enthusiastic\nlevel 8 about pineapples.",
    "start": "1017830",
    "end": "1022990"
  },
  {
    "text": "All right, so this is\nmy cheerleader program. So I typed in a word and I\ntyped in an enthusiasm level",
    "start": "1022990",
    "end": "1028119"
  },
  {
    "text": "for pineapples. And then, all it does is-- and notice the repetition,\nwhich computers",
    "start": "1028119",
    "end": "1034609"
  },
  {
    "text": "are really awesome for. Give me a P, P, give me\nan I, I, give me an N, N, and so on, right?",
    "start": "1034609",
    "end": "1040699"
  },
  {
    "text": "What does that spell? And then, it does pineapples\nwith three exclamation marks eight times because\nthat's how enthusiastic I",
    "start": "1040700",
    "end": "1046760"
  },
  {
    "text": "am about pineapples. All right, so let's look at the\ncode that actually does this.",
    "start": "1046760",
    "end": "1052029"
  },
  {
    "text": "Notice there's two\nparts to it, right? There's the part that\ndoes the spelling.",
    "start": "1052030",
    "end": "1058340"
  },
  {
    "text": "And then, there's the\npart that does repeating the word some number of times.",
    "start": "1058340",
    "end": "1063480"
  },
  {
    "text": "So these are two separate loops. The spelling is up here. This for loop here.",
    "start": "1063480",
    "end": "1068770"
  },
  {
    "text": "And then, repeating some\nnumber of times is down here. OK, so the part where\nwe do the spelling",
    "start": "1068770",
    "end": "1077050"
  },
  {
    "text": "has a for loop that\niterates through the letters in the word directly, right?",
    "start": "1077050",
    "end": "1083320"
  },
  {
    "text": "I'm not doing anything\nspecial with these letters. So I can just iterate\nthrough the letters directly.",
    "start": "1083320",
    "end": "1089020"
  },
  {
    "text": "So for w in word,\nwhere word is the input that I grabbed from the\nuser, w is a loop variable",
    "start": "1089020",
    "end": "1097870"
  },
  {
    "text": "that's going to first be p then\ni then n then e then then a and so on, right?",
    "start": "1097870",
    "end": "1104140"
  },
  {
    "text": "And then, I have\nan if else here. And if you look carefully,\nthe only difference between the if-- what\nwe do inside the if",
    "start": "1104140",
    "end": "1110559"
  },
  {
    "text": "and what we do\ninside the else is whether we type in an\nand then the letter, or a and then the letter, right?",
    "start": "1110560",
    "end": "1117909"
  },
  {
    "text": "Because some letters\nmake sense to say give me an a as opposed to give me a a.",
    "start": "1117910",
    "end": "1123040"
  },
  {
    "text": "It just doesn't sound\nright in English. The letters where it makes sense\nto do an are defined up here.",
    "start": "1123040",
    "end": "1130730"
  },
  {
    "text": "So notice they're just defined\nas a really long string. And so the if statement\nuses that in keyword we",
    "start": "1130730",
    "end": "1139580"
  },
  {
    "text": "saw on the slide, right? It says if w, so if that\nparticular character is",
    "start": "1139580",
    "end": "1145220"
  },
  {
    "text": "one of these, is in this\nsequence of characters, then print give me an and\nthat particular character.",
    "start": "1145220",
    "end": "1155169"
  },
  {
    "text": "And otherwise, it's not\none of these letters where it makes sense to say an. So then you just print give\nme a and then that letter.",
    "start": "1155170",
    "end": "1164799"
  },
  {
    "text": "Here, I just rewrote\nthese two print statements using f strings, which we\ntalked about back in lecture 2,",
    "start": "1164800",
    "end": "1171669"
  },
  {
    "text": "just to show you how you could\nrewrite it with f strings.",
    "start": "1171670",
    "end": "1176970"
  },
  {
    "text": "But it can be done both ways. OK, so at the end of this,\nwe've done the spelling.",
    "start": "1176970",
    "end": "1182070"
  },
  {
    "text": "And then, we have a\nprint statement that says, what does that spell? And then, the last\npart is to repeat",
    "start": "1182070",
    "end": "1187140"
  },
  {
    "text": "that word some n\nnumber of times, whatever the user told us. So I say that number of times\nin a variable called times.",
    "start": "1187140",
    "end": "1194400"
  },
  {
    "text": "And then, all I\ndo here is I have a nice little for loop that\ngoes through however many--",
    "start": "1194400",
    "end": "1200781"
  },
  {
    "text": "how much that number is, right? So range times means it's going\nto be 0 all the way up through",
    "start": "1200781",
    "end": "1206549"
  },
  {
    "text": "and including times minus 1. That's a total of eight\ntimes in this particular case",
    "start": "1206550",
    "end": "1213159"
  },
  {
    "text": "that it loops through. And then, all we do\nis print the word with three exclamation marks.",
    "start": "1213160",
    "end": "1218480"
  },
  {
    "text": "Notice that this\nprint statement that's inside the bottom for loop is\nnot actually doing anything",
    "start": "1218480",
    "end": "1225230"
  },
  {
    "text": "with our loop variable, right? Our loop variable here\nis i, but we're not doing anything with it. And that's totally fine.",
    "start": "1225230",
    "end": "1231320"
  },
  {
    "text": "Because all we're\nusing in the times in the loop in this\nparticular case",
    "start": "1231320",
    "end": "1236600"
  },
  {
    "text": "is to do this action\nsome number of times. We don't always\nhave to do something with that loop variable.",
    "start": "1236600",
    "end": "1243210"
  },
  {
    "text": "Any questions about this code? ",
    "start": "1243210",
    "end": "1248679"
  },
  {
    "text": "Yeah. AUDIENCE: Could\nyou also have used if statements for the prints? ANA BELL: Could you use if\nstatements for the prints?",
    "start": "1248680",
    "end": "1255370"
  },
  {
    "text": "Which prints, these ones? How so?",
    "start": "1255370",
    "end": "1261600"
  },
  {
    "text": "AUDIENCE: To evaluate\nthe w's instead of having to concatenate.",
    "start": "1261600",
    "end": "1269220"
  },
  {
    "text": "I mean, not if, f. ANA BELL: Oh, f strings. Yeah, we could have\ndone it like this. Yeah, so this is how it is f.",
    "start": "1269220",
    "end": "1275669"
  },
  {
    "text": "And then, we do the\ncharacters themselves inside the curly brackets. Oh no, that's OK. It's OK.",
    "start": "1275670",
    "end": "1281588"
  },
  {
    "text": "Yeah, there's a question. Yeah. AUDIENCE: Can you say\nhow that last part would work since we're\nnot actually doing it?",
    "start": "1281588",
    "end": "1287160"
  },
  {
    "text": "ANA BELL: Yeah, so\nthe last for loop is still going to iterate\nthrough times times, right?",
    "start": "1287160",
    "end": "1293790"
  },
  {
    "text": "And the loop variable\neach time through the loop will be 0, then\n1, then 2, then 3.",
    "start": "1293790",
    "end": "1299600"
  },
  {
    "text": "We're not doing anything\nwith the i, right? The stuff that's indented\nis going to get done,",
    "start": "1299600",
    "end": "1305190"
  },
  {
    "text": "but we're just not using the\nfact that i is 0 or 1 or 2 at all.",
    "start": "1305190",
    "end": "1311380"
  },
  {
    "text": "Yeah, it increments\nitself automatically, we're just not using it. Yeah, exactly. ",
    "start": "1311380",
    "end": "1321340"
  },
  {
    "text": "And that's what I said. OK, so let's have you\nwrite a little bit of code. So let's assume\nyou're going to be",
    "start": "1321340",
    "end": "1326820"
  },
  {
    "text": "given a string of\nlowercase letters, right? So we're not going to bother\nuppercase, lowercase, just assume you're given\nlowercase letters.",
    "start": "1326820",
    "end": "1333360"
  },
  {
    "text": "It's stored in a variable s. So as an example,\ns is equal to abca.",
    "start": "1333360",
    "end": "1338419"
  },
  {
    "text": "I would like you to\nwrite some code that counts how many unique letters\nare in this string, right?",
    "start": "1338420",
    "end": "1343710"
  },
  {
    "text": "So notice a occurs twice. But the count that\nyour code should do for this particular--\nin this particular string",
    "start": "1343710",
    "end": "1350840"
  },
  {
    "text": "should just be 3, right? We don't want to\ndouble count the a. So there are three\nunique letters in abca, they are a, b, and c.",
    "start": "1350840",
    "end": "1359990"
  },
  {
    "text": "So I do have a little hint. It involves the use\nof an extra variable, as these programs usually go.",
    "start": "1359990",
    "end": "1368000"
  },
  {
    "text": "Try to think about having\nthis extra variable be a string that contains\neverything you've seen so far.",
    "start": "1368000",
    "end": "1376750"
  },
  {
    "text": "So as soon as you see a letter\nthat you haven't seen before, add it to the string\nvariable that you've--",
    "start": "1376750",
    "end": "1383790"
  },
  {
    "text": "marking that you've\nnow seen this letter. And then, use this same variable\nto write the rest of it.",
    "start": "1383790",
    "end": "1393960"
  },
  {
    "text": "As you go through your\nletters, make sure that you're going to check\nwhether you've seen it already before recounting it.",
    "start": "1393960",
    "end": "1401220"
  },
  {
    "text": " So as usual, it's in\nhere around line 76.",
    "start": "1401220",
    "end": "1409370"
  },
  {
    "text": "This is the code to do it. So I'll give you\na couple minutes and then we can\nwrite it together.",
    "start": "1409370",
    "end": "1416410"
  },
  {
    "text": "OK, so let me just\nwork through it. And this is something\nthat I think",
    "start": "1416410",
    "end": "1422160"
  },
  {
    "text": "is pretty useful in\na quiz situation. It's just writing\nthings on paper first just because it's a\nprogramming and computer",
    "start": "1422160",
    "end": "1428143"
  },
  {
    "text": "science class,\ndoesn't mean we have to start coding right away. So it's really helpful to just\nput some ideas down on paper.",
    "start": "1428143",
    "end": "1434770"
  },
  {
    "text": "So the way I would go\nabout this problem is, clearly, I have to touch each\ncharacter in the string s.",
    "start": "1434770",
    "end": "1442316"
  },
  {
    "text": "So already, for me, that's-- I need to have a loop. So as I'm looking\nat each character,",
    "start": "1442316",
    "end": "1449110"
  },
  {
    "text": "I'm going to keep track of it. So if it's not something I\nhaven't seen-- so if it's something I haven't\nseen before, what",
    "start": "1449110",
    "end": "1455860"
  },
  {
    "text": "I want to do is say, OK,\nI have now seen this a. So I'm going to add\nit to a seen variable.",
    "start": "1455860",
    "end": "1463307"
  },
  {
    "text": "And then, I'm going to\nincrement a counter, right? I've seen it once. So count maybe equals 1 now.",
    "start": "1463307",
    "end": "1471060"
  },
  {
    "text": "The next time, I look at the\nnext letter I'm going to say, it's a b. Have I seen it before?",
    "start": "1471060",
    "end": "1476520"
  },
  {
    "text": "No. Let me add it to\nmy seen variable and increment my count.",
    "start": "1476520",
    "end": "1482350"
  },
  {
    "text": "Next time, I'm going to\nlook at the letter c. Have I seen it before? No, I'm going to\nadd it to my seen",
    "start": "1482350",
    "end": "1489019"
  },
  {
    "text": "and then I'm going to\nincrement my count. And then, the last\ntime I'm going to look at this letter\na I'm going to say,",
    "start": "1489020",
    "end": "1494350"
  },
  {
    "text": "is it already in my seen? Yep. So I'm not going to do\nanything with this one, right?",
    "start": "1494350",
    "end": "1499440"
  },
  {
    "text": "So when I see a letter\nthat's already seen-- that I've already added\nto my seen variable,",
    "start": "1499440",
    "end": "1505680"
  },
  {
    "text": "I basically do nothing\nin my code, right? So the most of the work happens\nwhen I encounter something",
    "start": "1505680",
    "end": "1511350"
  },
  {
    "text": "I have never seen before. So does anyone have some starter\ncode or something we can write?",
    "start": "1511350",
    "end": "1517787"
  },
  {
    "text": "We don't have to write it\nperfectly top to bottom. We can write pieces\nhere and there. ",
    "start": "1517787",
    "end": "1525090"
  },
  {
    "text": "Yeah? AUDIENCE: [INAUDIBLE] you can\nfind your things up there.",
    "start": "1525090",
    "end": "1530260"
  },
  {
    "text": "I wrote for char in s. And I don't think this is\nhow I'm supposed to write it,",
    "start": "1530260",
    "end": "1537040"
  },
  {
    "text": "but I said if char in\ns in seen for false.",
    "start": "1537040",
    "end": "1544630"
  },
  {
    "text": "But like I want to say\nif it's not in seen. ANA BELL: Yeah, so\nthat's a great start.",
    "start": "1544630",
    "end": "1549799"
  },
  {
    "text": "So if you want to say\nif it's not in seen, we can just say if char or car,\nor however you pronounce it,",
    "start": "1549800",
    "end": "1555850"
  },
  {
    "text": "is not in seen. So that takes the inverse of\ntrue or false whatever this is.",
    "start": "1555850",
    "end": "1564600"
  },
  {
    "text": "Because in seen will\neither be true or false. And not that will\nbe false or true.",
    "start": "1564600",
    "end": "1571500"
  },
  {
    "text": "So that's perfect. Yeah? AUDIENCE: [INAUDIBLE] but\nwhen we use the word not,",
    "start": "1571500",
    "end": "1576720"
  },
  {
    "text": "do you use the\nexclamation [INAUDIBLE]?? ANA BELL: Oh yeah, so we\ncan use not when we're dealing with Booleans, right?",
    "start": "1576720",
    "end": "1583560"
  },
  {
    "text": "So something that\nan expression that evaluates to true or false. That's when we use not. And the not equal, so the\nexclamation mark equal,",
    "start": "1583560",
    "end": "1591389"
  },
  {
    "text": "is used with other\nexpressions when we're testing for equality, right? Like 3 not equal 2.",
    "start": "1591390",
    "end": "1598620"
  },
  {
    "text": "Or a not equal b or\nsomething like that, right? So things that could be\nnumerical not necessarily",
    "start": "1598620",
    "end": "1604560"
  },
  {
    "text": "just true and false.  OK, so if char is not in seen,\nso if I haven't seen it before,",
    "start": "1604560",
    "end": "1615120"
  },
  {
    "text": "what do I want to do?  Yep?",
    "start": "1615120",
    "end": "1620523"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. ",
    "start": "1620523",
    "end": "1632587"
  },
  {
    "text": "ANA BELL: Yep. So we can append the\ncharacter that we just looked at to our seen list, just\nas we had done incrementally",
    "start": "1632587",
    "end": "1640309"
  },
  {
    "text": "here. So that takes care of adding\nthe character one by one if we haven't seen it to our seen.",
    "start": "1640310",
    "end": "1647410"
  },
  {
    "text": "Good. Anything else we want to do? Or we can even test it\nout like this, right?",
    "start": "1647410",
    "end": "1653290"
  },
  {
    "text": "So we can print seen each\ntime through our loop. ",
    "start": "1653290",
    "end": "1660650"
  },
  {
    "text": "So first it's a, then\nit's ab, then it's abc. And then, the last time it\nshould still be abc, and it is.",
    "start": "1660650",
    "end": "1667850"
  },
  {
    "text": " And the last step is to just do\nwhat the problem asks us to do,",
    "start": "1667850",
    "end": "1675990"
  },
  {
    "text": "which is to print how\nmany characters are-- how many unique characters are\nin this list or in this string.",
    "start": "1675990",
    "end": "1681679"
  },
  {
    "text": " Yeah? AUDIENCE: [INAUDIBLE].",
    "start": "1681680",
    "end": "1686948"
  },
  {
    "start": "1686948",
    "end": "1697680"
  },
  {
    "text": "ANA BELL: Yeah, we can have\na counter that is initially zero before the loop.",
    "start": "1697680",
    "end": "1703920"
  },
  {
    "text": "And every time we add a new\nthing to our seen string, we can increment our counter.",
    "start": "1703920",
    "end": "1709980"
  },
  {
    "text": "And then, that takes care of\nthe bulk of the work, right? This does all the counting, all\nthe adding to the unique seen.",
    "start": "1709980",
    "end": "1717360"
  },
  {
    "text": "And so at the end of the loop,\nwe have this number in hand. And then, we can just print it.",
    "start": "1717360",
    "end": "1722920"
  },
  {
    "text": "So with this particular\ncase, it's 3. If we add more a's\nin random spots,",
    "start": "1722920",
    "end": "1728190"
  },
  {
    "text": "it's still going to be 3, right? Yeah? AUDIENCE: [INAUDIBLE].",
    "start": "1728190",
    "end": "1734360"
  },
  {
    "text": "ANA BELL: Yeah, so now that\nwe have some code that-- basically, that\nworks really well, we can make improvements to it.",
    "start": "1734360",
    "end": "1740539"
  },
  {
    "text": "So one improvement\nthat's suggested is instead of keeping\na counter variable, we can actually just\nrecognize the fact",
    "start": "1740540",
    "end": "1748190"
  },
  {
    "text": "that the length of our seen is\njust all the unique characters we've seen already, right?",
    "start": "1748190",
    "end": "1753980"
  },
  {
    "text": "Because when we double up on\nsomething, we don't re-add it. So all we can do to print out\nthe number of unique characters",
    "start": "1753980",
    "end": "1764180"
  },
  {
    "text": "is to just say, I'm going to\nprint out the length of seen, OK? And now there's no need to\nincrement any sort of counter.",
    "start": "1764180",
    "end": "1771420"
  },
  {
    "text": "And so that still gives us 3. ",
    "start": "1771420",
    "end": "1780690"
  },
  {
    "text": "Questions about this code? Does it make sense? ",
    "start": "1780690",
    "end": "1788570"
  },
  {
    "text": "Notice there's no else, right? We just have a nice little\nif, there's no else. Because there's\nnothing to do when",
    "start": "1788570",
    "end": "1795250"
  },
  {
    "text": "we've already seen\nthe character. So we could have else pass. And pass is just some--",
    "start": "1795250",
    "end": "1801039"
  },
  {
    "text": "it's just a keyword in Python. You see it's turned blue because\nit's a keyword in Python. It just means do nothing, right?",
    "start": "1801040",
    "end": "1807820"
  },
  {
    "text": "So we wouldn't write\nthis, obviously. ",
    "start": "1807820",
    "end": "1813289"
  },
  {
    "text": "If we had an else case,\nthat's what we would do. We would just do nothing. ",
    "start": "1813290",
    "end": "1818430"
  },
  {
    "text": "OK, other questions\nabout the code? Is that right?",
    "start": "1818430",
    "end": "1825238"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]",
    "start": "1825238",
    "end": "1830474"
  },
  {
    "text": "ANA BELL: Sorry. Say again. AUDIENCE: [INAUDIBLE]. ANA BELL: Why are we printing\nthe length of seen here?",
    "start": "1830474",
    "end": "1838460"
  },
  {
    "text": "So we're printing\nthe length of seen because we see that whenever we\nadd a unique character to this",
    "start": "1838460",
    "end": "1849590"
  },
  {
    "text": "seen variable, it's one that we\nhaven't actually seen before,",
    "start": "1849590",
    "end": "1855150"
  },
  {
    "text": "right? And so the only things\nI'm adding to my seen are things that are new.",
    "start": "1855150",
    "end": "1861250"
  },
  {
    "text": "And so even as I was going\nthrough manually here, I said, I've seen the a, I've\nseen the b, I've seen the c,",
    "start": "1861250",
    "end": "1867510"
  },
  {
    "text": "I added them one by one. And then, when I\nsaw the duplicate a, I didn't add it\nto my here, right?",
    "start": "1867510",
    "end": "1873630"
  },
  {
    "text": "And so, basically,\nthe seen already contains all the unique\ncharacters in my list--",
    "start": "1873630",
    "end": "1880290"
  },
  {
    "text": "in my string-- original string. ",
    "start": "1880290",
    "end": "1890790"
  },
  {
    "text": "OK, so quick summary of what\nwe've seen so far before we start looking at\nour first algorithm. So we've seen objects, right?",
    "start": "1890790",
    "end": "1896610"
  },
  {
    "text": "That's how we write\nPython programs. We manipulate objects by\nsaving them to variables",
    "start": "1896610",
    "end": "1903159"
  },
  {
    "text": "so the values are more\neasily accessible. We have expressions that\nevaluate to different things, integers, floats,\nBooleans, things like that.",
    "start": "1903160",
    "end": "1910230"
  },
  {
    "text": "We added branching\nas a way to control-- as a control flow mechanism\nto our program, right?",
    "start": "1910230",
    "end": "1915990"
  },
  {
    "text": "It says, hey Python, either\nevaluate this set of statements or this other set of\nstatements depending on whether this\ncondition is true.",
    "start": "1915990",
    "end": "1922810"
  },
  {
    "text": "And then, we added\nthe last mechanism for control flow, the\nlooping mechanism that",
    "start": "1922810",
    "end": "1928620"
  },
  {
    "text": "said, either loop or repeat this\ncode while some condition is true or loop this code for\nthis sequence of values, OK?",
    "start": "1928620",
    "end": "1938640"
  },
  {
    "text": "So really, with\nthat in hand, we've basically have a really\nnice toolbox of things",
    "start": "1938640",
    "end": "1944549"
  },
  {
    "text": "that we can use to write\ninteresting programs. That's kind of all we need. But this is not the\nend of the class.",
    "start": "1944550",
    "end": "1951582"
  },
  {
    "text": "We're going to look at other\nthings that will make our code neater, more readable. We can write more of it more\nefficiently, things like that.",
    "start": "1951582",
    "end": "1959458"
  },
  {
    "text": "But really, if you\nwant to just start writing little\nalgorithms, this is all we need in terms\nof Python syntax.",
    "start": "1959458",
    "end": "1966230"
  },
  {
    "text": "So the first thing we're going\nto apply this knowledge to is our very first\nalgorithm called",
    "start": "1966230",
    "end": "1971530"
  },
  {
    "text": "the guess-and-check algorithm. So another word for the\nguess-and-check algorithm is exhaustive enumeration, OK?",
    "start": "1971530",
    "end": "1979130"
  },
  {
    "text": "So the idea here is that\nwe're given a problem. We can guess a value\nfor a solution, OK?",
    "start": "1979130",
    "end": "1987390"
  },
  {
    "text": "We'll just do a guess. And then, we'll test whether\nthis guess is correct. Does it solve our problem?",
    "start": "1987390",
    "end": "1993220"
  },
  {
    "text": "If it does, we're done. We've found a solution\nto our problem. If it doesn't solve\nour problem, we're",
    "start": "1993220",
    "end": "1999390"
  },
  {
    "text": "just going to keep\nmaking guesses until we've exhausted our set\nof possible guesses, right?",
    "start": "1999390",
    "end": "2006170"
  },
  {
    "text": "So either we find\nthe solution or we say we weren't able to find\na solution to this problem.",
    "start": "2006170",
    "end": "2011909"
  },
  {
    "text": "It doesn't mean that\none doesn't exist. It just means that\nwith guess-and-check and exhaustively enumerating\nall these possible values,",
    "start": "2011910",
    "end": "2018770"
  },
  {
    "text": "we were not able\nto find a solution. So in terms of a flow chart,\nthe way this looks is we",
    "start": "2018770",
    "end": "2024190"
  },
  {
    "text": "have an initial guess. We ask, is this guess correct? If it is, we're done. And if it's not, we're going\nto choose a next guess.",
    "start": "2024190",
    "end": "2032559"
  },
  {
    "text": "So let's look at finding the\nroot of a perfect square.",
    "start": "2032560",
    "end": "2038850"
  },
  {
    "text": "And that's our problem. And we're going to\nsay either we found the root of this\nperfect square or we say",
    "start": "2038850",
    "end": "2045710"
  },
  {
    "text": "this is not a perfect square. So with guess-and-check\nwe can say, well,",
    "start": "2045710",
    "end": "2052030"
  },
  {
    "text": "what if we want to find\nwhether 7 is a perfect square? If it is, what is its root?",
    "start": "2052030",
    "end": "2057870"
  },
  {
    "text": "And if it's not say, that\nit's not a perfect square. Well, we can make\nan initial guess, 6.",
    "start": "2057870",
    "end": "2064000"
  },
  {
    "text": "That's not the right solution. We can make another guess, 9. That's not the right solution. We can make another guess, 2.",
    "start": "2064000",
    "end": "2069379"
  },
  {
    "text": "That's not the right solution. We can make a guess 0. That's, obviously, not\nthe right solution. We can keep guessing\nrandomly like this,",
    "start": "2069380",
    "end": "2076100"
  },
  {
    "text": "but it's not going to be\nvery efficient, right? What we want to do is use\nthe power of computers, and computers work with\nthese sort of patterns",
    "start": "2076100",
    "end": "2082810"
  },
  {
    "text": "in hand, right? Remember range starting from\n0 following a pattern going up to some number.",
    "start": "2082810",
    "end": "2088408"
  },
  {
    "text": "So the idea is to be systematic. And then, we can really\nharness the power of programming and computers\nbeing able to do things really,",
    "start": "2088409",
    "end": "2095460"
  },
  {
    "text": "really quickly for us. So for that same\nproblem, finding out whether a number x\nis a perfect square,",
    "start": "2095460",
    "end": "2103650"
  },
  {
    "text": "let's be systematic and\nstart with a guess of 0. ",
    "start": "2103650",
    "end": "2108800"
  },
  {
    "text": "Two cases, the\nnumber we're trying to find the square root\nof is a perfect square.",
    "start": "2108800",
    "end": "2114480"
  },
  {
    "text": "Let's say 4. We're going to start with\na guess of 0, 0 squared. Solve our problem?",
    "start": "2114480",
    "end": "2119630"
  },
  {
    "text": "No, increment. Does 1 squared\nsolve our problem? No, increment. Does 2 squared\nsolve our problem?",
    "start": "2119630",
    "end": "2126440"
  },
  {
    "text": "Yes, we are done. What if x is not\na perfect square?",
    "start": "2126440",
    "end": "2133010"
  },
  {
    "text": "OK, let's say, 10. Let's use the same systematic\napproach of guess-and-check.",
    "start": "2133010",
    "end": "2139830"
  },
  {
    "text": "We're going to need to add a\nlittle bit of algebra though. Because if we\ndon't, we're at risk",
    "start": "2139830",
    "end": "2145350"
  },
  {
    "text": "of potentially\ndoing something that will lead to an infinite loop. So the algebra we need to\nadd to solve our problem",
    "start": "2145350",
    "end": "2152550"
  },
  {
    "text": "is to say, if we were\nlooking at a number that's not a perfect square, we need\nto have to find-- we have",
    "start": "2152550",
    "end": "2159420"
  },
  {
    "text": "to find a way to stop, right? We don't want to guess\nsomething that's infinite. This is guess-and-check.",
    "start": "2159420",
    "end": "2164770"
  },
  {
    "text": "So we need an exhaustive\nset of potential solutions. So we're going to use algebra.",
    "start": "2164770",
    "end": "2170412"
  },
  {
    "text": "And we're going to\nsay, we're going to stop as soon as our guess\nsquared becomes bigger than x.",
    "start": "2170412",
    "end": "2177390"
  },
  {
    "text": "So we're going to start guessing\nzero then 1, then 2, then 3 then 4. And at some point, that\nnumber that guess squared,",
    "start": "2177390",
    "end": "2184440"
  },
  {
    "text": "will be bigger than x. And we know we can stop because\nnumbers bigger than that will definitely be bigger than x.",
    "start": "2184440",
    "end": "2190470"
  },
  {
    "text": "So our first guess\nwould be 0 squared. Obviously, less than 10. 1 squared, less than 10.",
    "start": "2190470",
    "end": "2195855"
  },
  {
    "text": "2 squared, less than 10. 3 squared, less than 10, right? That's 9.",
    "start": "2195855",
    "end": "2201170"
  },
  {
    "text": "4 squared becomes 16, and we\nsay this is where we stop. And we have not found a\nsquare root for 10, right?",
    "start": "2201170",
    "end": "2212079"
  },
  {
    "text": "So 10 is not a perfect square.  Does that make sense?",
    "start": "2212080",
    "end": "2217740"
  },
  {
    "text": "Is that all right? So our exhaustive set\nof potential solutions is 0 through 4 because that\nbrought us closest to 10.",
    "start": "2217740",
    "end": "2227760"
  },
  {
    "text": "And at 4, we've gone over 10. And we don't need\nto check 5, 6, 7 because it's\ndefinitely not going",
    "start": "2227760",
    "end": "2233759"
  },
  {
    "text": "to be-- those values squared\nwill definitely be bigger than 10. So this is the code that\nsolves that problem.",
    "start": "2233760",
    "end": "2242140"
  },
  {
    "text": "We got input from the user. So what number do\nyou want to find whether it's a perfect\nsquare or not and what is it",
    "start": "2242140",
    "end": "2248830"
  },
  {
    "text": "if it is a perfect square? We have a while loop that\nchecks one condition, right?",
    "start": "2248830",
    "end": "2256150"
  },
  {
    "text": "That's our stopping\ncondition here. We're going to iterate\nthrough the loop",
    "start": "2256150",
    "end": "2261950"
  },
  {
    "text": "when guess squared\nis less than x. So on that number\nline, we're going to keep incrementing by 1\nas long as our square is",
    "start": "2261950",
    "end": "2271190"
  },
  {
    "text": "less than x. So that's this while loop here.",
    "start": "2271190",
    "end": "2276869"
  },
  {
    "text": "And what we're doing inside the\nloop is incrementing our guess. Guess equals guess plus 1.",
    "start": "2276870",
    "end": "2283230"
  },
  {
    "text": "And then, at some point, if we\nhaven't found a perfect square or if we have found\na perfect square,",
    "start": "2283230",
    "end": "2288570"
  },
  {
    "text": "this condition\nbecomes false, right? Because this is false\nwhen we have the opposite",
    "start": "2288570",
    "end": "2294750"
  },
  {
    "text": "of this less than sign. So guess squared becomes\ngreater than or equal to x.",
    "start": "2294750",
    "end": "2300630"
  },
  {
    "text": "Now, that's two very\ndifferent things, right? Guess squared greater\nthan x means we haven't",
    "start": "2300630",
    "end": "2306450"
  },
  {
    "text": "found this perfect square. But guess squared is\nequal to x means we have found a perfect square, right?",
    "start": "2306450",
    "end": "2313420"
  },
  {
    "text": "And both of those cases trigger\nus to leave the while loop.",
    "start": "2313420",
    "end": "2319700"
  },
  {
    "text": "So then, right after\nthe while loop, we need to have an if else. The if else checks for\none of those two cases.",
    "start": "2319700",
    "end": "2327210"
  },
  {
    "text": "So the if guess squared\nis equivalent to x means that we exited the\nwhile loop because we found",
    "start": "2327210",
    "end": "2333200"
  },
  {
    "text": "that it was a perfect square. So like 4, for example, right? If x was 4, when we hit 2,\nthat while loop becomes false.",
    "start": "2333200",
    "end": "2340070"
  },
  {
    "text": "And we exited because\n4 was a perfect square.",
    "start": "2340070",
    "end": "2345080"
  },
  {
    "text": "But the 10, for example, would\nfall within the else clause here, right?",
    "start": "2345080",
    "end": "2350480"
  },
  {
    "text": "Because we have exited the\nloop because guess squared 4, 4 squared 16, was\ngreater than 10.",
    "start": "2350480",
    "end": "2358480"
  },
  {
    "text": "And so that's-- then we would\nprint x is not a perfect square. ",
    "start": "2358480",
    "end": "2365380"
  },
  {
    "text": "OK, so this works for\nmany different values, as big as you'd like.",
    "start": "2365380",
    "end": "2370920"
  },
  {
    "text": "But it doesn't work\nfor negative values. And the reason it doesn't\nwork for negative values",
    "start": "2370920",
    "end": "2377400"
  },
  {
    "text": "is because the loop\nnever actually enters in the first place. So for example, if we look\nat this whether negative 2",
    "start": "2377400",
    "end": "2386579"
  },
  {
    "text": "is a perfect square, we're\ngoing to start with guesses 0 just because that's\nhow we implemented",
    "start": "2386580",
    "end": "2392545"
  },
  {
    "text": "the algorithm, right? On the previous\nslide, it says guesses equal to 0 right at the top.",
    "start": "2392545",
    "end": "2399160"
  },
  {
    "text": "And so guesses 0, we say,\nis 0 squared less than x?",
    "start": "2399160",
    "end": "2405420"
  },
  {
    "text": "No. 0 is not less than negative 2. And that while loop\nnever even enters at all, which is fine, right?",
    "start": "2405420",
    "end": "2412910"
  },
  {
    "text": "Because negative 2 does\nnot-- or negative 4-- negative numbers are\nnot perfect squares",
    "start": "2412910",
    "end": "2418730"
  },
  {
    "text": "unless we're talking\nabout imaginary numbers. But we're not in\nthis particular case. However, we might want to handle\nthe case when the user gives us",
    "start": "2418730",
    "end": "2426620"
  },
  {
    "text": "a negative number. Maybe they accidentally typed in\nthe negative sign or something like that.",
    "start": "2426620",
    "end": "2431730"
  },
  {
    "text": "So we can actually\ntake care of that case by adding a little\nbit of extra code",
    "start": "2431730",
    "end": "2437150"
  },
  {
    "text": "around what we already wrote. So the stuff that's boxed in\nred is the extra code we write.",
    "start": "2437150",
    "end": "2442960"
  },
  {
    "text": "Everything else is exactly\nthe same as two slides ago. So the only thing we want\nto do when we encounter",
    "start": "2442960",
    "end": "2450280"
  },
  {
    "text": "a negative number is flag it\nusing a new variable that's",
    "start": "2450280",
    "end": "2455870"
  },
  {
    "text": "either true or false. And then, at the end,\nwe can handle that flag. So if it's true,\nwe do something.",
    "start": "2455870",
    "end": "2462920"
  },
  {
    "text": "And if it's false, we\ndo something else, OK? So in this particular\ncase, we've got a negative flag\ninitially false,",
    "start": "2462920",
    "end": "2470369"
  },
  {
    "text": "which means that we're going to\ninitially assume the user gives us a positive value, right? So a negative flag equals false.",
    "start": "2470370",
    "end": "2478530"
  },
  {
    "text": "We get input from the user. And then, we check if the user\ngave us a negative number. So if the x is less\nthan 0, then we're",
    "start": "2478530",
    "end": "2485010"
  },
  {
    "text": "going to change the\nvalue of this flag. Neg flag equals to true.",
    "start": "2485010",
    "end": "2490680"
  },
  {
    "text": "So we're going to change the\nvalue from false to true. And then, the rest of\nit is the same, right?",
    "start": "2490680",
    "end": "2496530"
  },
  {
    "text": "This is all the same as\nwhat we had two slides ago. Except that, at the\nend, we're going to check to see if the user\ngave us-- actually gave us",
    "start": "2496530",
    "end": "2504599"
  },
  {
    "text": "a negative number, we\ncan check with them, did you actually mean the\npositive version of that number or something like that?",
    "start": "2504600",
    "end": "2510390"
  },
  {
    "text": " And so, in code, the way\nthis looks is as follows.",
    "start": "2510390",
    "end": "2518299"
  },
  {
    "text": "So if we run it and we\ngive it 4, obviously, it tells us it's\na perfect square",
    "start": "2518300",
    "end": "2523900"
  },
  {
    "text": "and what its square root is. 9 works. 10, it says it's not\na perfect square.",
    "start": "2523900",
    "end": "2531860"
  },
  {
    "text": "And then, when we give it a\nnegative number, square or not, it just tells us negative\n4 is not a perfect square.",
    "start": "2531860",
    "end": "2540110"
  },
  {
    "text": "And then, it says, just\nchecking, did you mean 4? So it does this\nextra print statement when the number was negative.",
    "start": "2540110",
    "end": "2545810"
  },
  {
    "text": " Yeah? Question. AUDIENCE: I didn't quite\nget the [INAUDIBLE]..",
    "start": "2545810",
    "end": "2554780"
  },
  {
    "text": "ANA BELL: Yeah, so I\ncan explain that again. So the negative flag\nequals false is just",
    "start": "2554780",
    "end": "2560060"
  },
  {
    "text": "a variable, right? I just called it neg flag. It's a variable I\ninitialized to false just",
    "start": "2560060",
    "end": "2565430"
  },
  {
    "text": "to say, hey, the\nnumber I'm going to assume is not negative. And then, we only flag it-- we only change its value to\ntrue if the number was negative.",
    "start": "2565430",
    "end": "2573990"
  },
  {
    "text": "So in fact, we could\nhave just had a little if else here, right? We don't have this line up here.",
    "start": "2573990",
    "end": "2580430"
  },
  {
    "text": "We have x is equal to int. And then, we say if x is\nless than 0 and neg flag equals true, else neg\nflag equals false.",
    "start": "2580430",
    "end": "2586956"
  },
  {
    "text": "We could have done that as well. ",
    "start": "2586957",
    "end": "2592790"
  },
  {
    "text": "OK, so the big idea\nwith guess-and-check is we can't test an\ninfinite number of values. We have to stop at\nsome point, right?",
    "start": "2592790",
    "end": "2602140"
  },
  {
    "text": "So now, we've been\nworking with the code that looks like something on\nthe left side, right?",
    "start": "2602140",
    "end": "2607330"
  },
  {
    "text": "We've been using while loops. But we've seen that\nwe can actually write very efficient code\nusing for loops as well.",
    "start": "2607330",
    "end": "2616175"
  },
  {
    "text": "And in fact, the\nguess and check method maybe intuitively\nlends itself better to a for loop than\na while loop, right?",
    "start": "2616175",
    "end": "2622300"
  },
  {
    "text": "Because we're trying to iterate\nthrough an exhaustive set of values, right? The numbers 0 through\nsome number, right?",
    "start": "2622300",
    "end": "2629410"
  },
  {
    "text": "And so maybe a for\nloop is a better way to write such a guess\nand check algorithm. And we're going to see how to\nrewrite that in a little bit.",
    "start": "2629410",
    "end": "2636680"
  },
  {
    "text": "But in terms of a flow\nchart, the way for loop would go is we\nsequentially go through all the possible values.",
    "start": "2636680",
    "end": "2642130"
  },
  {
    "text": "When we've exhausted\nall the values, we say we didn't\nfind a solution. And otherwise, the for loop\njust automatically grabs for us",
    "start": "2642130",
    "end": "2649510"
  },
  {
    "text": "the next value in the sequence. So let's have you work\non this for a little bit. I want you to hard code for me\na number as a secret number.",
    "start": "2649510",
    "end": "2657280"
  },
  {
    "text": "This is kind of what\nwe did last lecture. So secret equals 7, 5,\nwhatever you'd like it to be.",
    "start": "2657280",
    "end": "2663260"
  },
  {
    "text": "And then, I want you\nto write some code that goes through all of these\nnumbers from 1 to 10 inclusive,",
    "start": "2663260",
    "end": "2669490"
  },
  {
    "text": "let's say, and prints that\nit found the secret number.",
    "start": "2669490",
    "end": "2674540"
  },
  {
    "text": "So if the secret number is\nwithin the range 0 through 10, print that you found the number.",
    "start": "2674540",
    "end": "2680350"
  },
  {
    "text": "And otherwise, don't\nprint anything. So if you don't find the\nnumber, print nothing.",
    "start": "2680350",
    "end": "2686570"
  },
  {
    "text": "And as you're working on that,\nand if you finish that code, think about how you\nwould change that code",
    "start": "2686570",
    "end": "2693079"
  },
  {
    "text": "to do one thing differently. If it's not found, print\nthat you didn't find it.",
    "start": "2693080",
    "end": "2699300"
  },
  {
    "text": "So in the first version, if\nyou don't find it, do nothing. But in the second version,\nif you don't find it,",
    "start": "2699300",
    "end": "2705530"
  },
  {
    "text": "tell me that you\ndidn't find it, OK? So these codes are\nin this Python file.",
    "start": "2705530",
    "end": "2715420"
  },
  {
    "text": "And the easier version\nis about line 129. And then, if you work on--",
    "start": "2715420",
    "end": "2722140"
  },
  {
    "text": "after you finish\nthat if you're done, you can just copy that\ncode to lines about 144",
    "start": "2722140",
    "end": "2727360"
  },
  {
    "text": "and try to modify it to\nthe new specification. So if you don't find it,\nprint that you didn't find it.",
    "start": "2727360",
    "end": "2737300"
  },
  {
    "text": "OK, so tell me some\ncode for the first one. So if we find the\nnumber print we",
    "start": "2737300",
    "end": "2743390"
  },
  {
    "text": "found it, and\notherwise do nothing. ",
    "start": "2743390",
    "end": "2753550"
  },
  {
    "text": "What's better, while\nloop or for loop? ",
    "start": "2753550",
    "end": "2759210"
  },
  {
    "text": "For loop. Yeah. For, let's say, i in range.",
    "start": "2759210",
    "end": "2766090"
  },
  {
    "text": "How do I get numbers\n1 to 10 inclusive? ",
    "start": "2766090",
    "end": "2773040"
  },
  {
    "text": "1, 11. Exactly. Good. And again, I can write a\nlittle message for myself.",
    "start": "2773040",
    "end": "2778770"
  },
  {
    "text": "i is 1, 2, 3, 4,\ndot, dot, dot, 11.",
    "start": "2778770",
    "end": "2785100"
  },
  {
    "text": "What do I do to make the\ncheck whether this number i is my secret?",
    "start": "2785100",
    "end": "2792734"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. ANA BELL: Yep, if i equals\nsecret, let's say print found.",
    "start": "2792734",
    "end": "2801630"
  },
  {
    "text": " OK, run it.",
    "start": "2801630",
    "end": "2806869"
  },
  {
    "text": "Obviously, 4 is\nwithin that range. Obviously, 100, not\nin that range, right?",
    "start": "2806870",
    "end": "2812359"
  },
  {
    "text": "So when we had 4,\nit printed found. And when we had\n100, it did nothing.",
    "start": "2812360",
    "end": "2818180"
  },
  {
    "text": "OK, I'm going to copy this\ncode and paste it down here.",
    "start": "2818180",
    "end": "2823260"
  },
  {
    "text": "So let's try the version\nnow where we just make one small change to\nour specification, right?",
    "start": "2823260",
    "end": "2828980"
  },
  {
    "text": "Now we request the\ncode to say, if you don't find the number\nwithin this range, print",
    "start": "2828980",
    "end": "2834290"
  },
  {
    "text": "that you did not find it. What are some things we can try?",
    "start": "2834290",
    "end": "2841339"
  },
  {
    "text": "Else, OK?  Print not found.",
    "start": "2841340",
    "end": "2849200"
  },
  {
    "text": "OK, so 4, obviously, was found.",
    "start": "2849200",
    "end": "2857150"
  },
  {
    "text": "But we also printed\nall these not founds. ",
    "start": "2857150",
    "end": "2862895"
  },
  {
    "text": "Why?  Yes. AUDIENCE: [INAUDIBLE]\nit's iterating",
    "start": "2862895",
    "end": "2868710"
  },
  {
    "text": "through the whole range, so\nyou could try breaking out of the [INAUDIBLE]. ANA BELL: Yeah, we printed\nit because it's iterating",
    "start": "2868710",
    "end": "2874890"
  },
  {
    "text": "through the whole range. Every time I check an\ni, I'm either printing found or not found.",
    "start": "2874890",
    "end": "2880720"
  },
  {
    "text": "Yeah, so we could break, I\nguess, when we found it, right?",
    "start": "2880720",
    "end": "2889460"
  },
  {
    "text": "Break. Run it. OK, then we print not\nfound until we find it",
    "start": "2889460",
    "end": "2896980"
  },
  {
    "text": "and then we break. So we're getting there, right? It's looking a\nlittle bit better.",
    "start": "2896980",
    "end": "2903030"
  },
  {
    "text": "What else can we try? Yes. Another break. ",
    "start": "2903030",
    "end": "2910070"
  },
  {
    "text": "We can try another\nbreak after not found. ",
    "start": "2910070",
    "end": "2915440"
  },
  {
    "text": "But then, the 4 is not found. Yeah? AUDIENCE: [INAUDIBLE]. ",
    "start": "2915440",
    "end": "2936569"
  },
  {
    "text": "ANA BELL: Yeah, I like the idea. Yeah, you can try to\ndo a Boolean flag. Was that your\nsuggestion as well?",
    "start": "2936570",
    "end": "2942070"
  },
  {
    "text": "Yeah. OK, let's try to do\nthe Boolean flag way. Let's delete the brakes.",
    "start": "2942070",
    "end": "2949160"
  },
  {
    "text": "Let's go back to\nwhat we had before. So basically, our idea is-- I think what we're trying\nto get at is we only",
    "start": "2949160",
    "end": "2957099"
  },
  {
    "text": "want to print not\nfound when we've gone through all the\nnumbers in the range, right?",
    "start": "2957100",
    "end": "2962859"
  },
  {
    "text": "So kind of something\nlike this, right? I want to print\nthe not found only once at the end of my loop, OK?",
    "start": "2962860",
    "end": "2971869"
  },
  {
    "text": "But this code\ndoesn't work either because I'm always\nprinting not found.",
    "start": "2971870",
    "end": "2977510"
  },
  {
    "text": "No matter if I do this extra\nprint inside here, right? Because this not\nfound at the end here is at the same\nindentation level as for loop.",
    "start": "2977510",
    "end": "2985200"
  },
  {
    "text": "So the suggestion\nfrom a couple of you is to actually\nset a flag, right?",
    "start": "2985200",
    "end": "2990500"
  },
  {
    "text": "So we can set a found flag\nto be originally, let's say, false, right?",
    "start": "2990500",
    "end": "2997400"
  },
  {
    "text": "So before I even start my loop,\nlet me just assume it's false. ",
    "start": "2997400",
    "end": "3003109"
  },
  {
    "text": "And I'm going to use\nthis flag to trigger--",
    "start": "3003110",
    "end": "3009860"
  },
  {
    "text": "or I'm going to-- I guess I'm going to\nchange this flag whenever I found the number, right?",
    "start": "3009860",
    "end": "3018030"
  },
  {
    "text": "So found is originally false. And the place in my\ncode where I know",
    "start": "3018030",
    "end": "3023880"
  },
  {
    "text": "I found the number\nis here, right? When i is equivalent\nto my secret.",
    "start": "3023880",
    "end": "3029220"
  },
  {
    "text": "And then, I can set my\nfound flag to be true. I only call it a\nflag because it flags",
    "start": "3029220",
    "end": "3035310"
  },
  {
    "text": "that an event happened or not. So it's kind of a Boolean event. But it's really just\na variable, right?",
    "start": "3035310",
    "end": "3040740"
  },
  {
    "text": "Nothing special\nabout the word flag. It's just a variable. ",
    "start": "3040740",
    "end": "3048340"
  },
  {
    "text": "OK, so now, I think\nthe suggestion was, now that we've set our\nflag to true or false",
    "start": "3048340",
    "end": "3053980"
  },
  {
    "text": "depending on what happened in\nthe code, we can say if found,",
    "start": "3053980",
    "end": "3060010"
  },
  {
    "text": "or I guess, in this particular\ncase, if not found, right? The inverse of my Boolean.",
    "start": "3060010",
    "end": "3066930"
  },
  {
    "text": "Print not found.  There's no else because the\nelse was already taken care",
    "start": "3066930",
    "end": "3073470"
  },
  {
    "text": "of when we had the secret-- when we found the\nsecret within the code. So now, we print\nfound when it's 4.",
    "start": "3073470",
    "end": "3081510"
  },
  {
    "text": "And if the number is, obviously,\noutside the range like 100, we print not found. ",
    "start": "3081510",
    "end": "3090950"
  },
  {
    "text": "We can make a small\nchange to it, I guess. So we don't have to print\nfound down in there.",
    "start": "3090950",
    "end": "3096619"
  },
  {
    "text": "For maybe consistency\nor making things even, we can just say else, print,\nfound, or something like that.",
    "start": "3096620",
    "end": "3106510"
  },
  {
    "text": "And I think that\nshould work as well. So 100 is not found\nand 4 is found, right?",
    "start": "3106510",
    "end": "3113609"
  },
  {
    "text": "So now we're doing things\nkind of consistently. We're printing out whether\nwe found it or not down here. And inside for loop,\nwe're just dealing",
    "start": "3113610",
    "end": "3120930"
  },
  {
    "text": "with the logic of the\nfinding or not finding it.",
    "start": "3120930",
    "end": "3126579"
  },
  {
    "text": "Any questions about this code? Does it seem all right? Does it make sense?",
    "start": "3126580",
    "end": "3131890"
  },
  {
    "text": "So I'm showcasing\nthese Boolean flags just because they're very\nuseful for signaling that things",
    "start": "3131890",
    "end": "3138240"
  },
  {
    "text": "happened in your code, right? So when you find\nyourself asking, how do I how do know that this\nthing happened or something?",
    "start": "3138240",
    "end": "3146200"
  },
  {
    "text": "Boolean flag is\nthe answer, right? Just set it to true\nor false, 0 or 1, a",
    "start": "3146200",
    "end": "3152050"
  },
  {
    "text": "or b, whatever you want. And then, check the\nvalue of that variable",
    "start": "3152050",
    "end": "3157180"
  },
  {
    "text": "later on in the code to see\nif the event happened or not. ",
    "start": "3157180",
    "end": "3166040"
  },
  {
    "text": "So these are the two\ncodes that we had just written kind of\nside by side just to show you exactly\nwhat the difference is.",
    "start": "3166040",
    "end": "3171890"
  },
  {
    "text": "So here is the code where\nif we don't find the number, we don't print anything, right?",
    "start": "3171890",
    "end": "3177220"
  },
  {
    "text": "So it's just a for loop with\nan if and we say we found it. And the one on the right is\nthe code where we did find it--",
    "start": "3177220",
    "end": "3184510"
  },
  {
    "text": "where if we didn't find it, we\nprinted that we didn't find it. So the only things that\nare added in addition",
    "start": "3184510",
    "end": "3190630"
  },
  {
    "text": "to the code on the left is the\nstuff that's bolded, right? So I just have this flag that\nI initially set to false.",
    "start": "3190630",
    "end": "3196210"
  },
  {
    "text": "I set it to true when\nthis event happened. That is, I found the number.",
    "start": "3196210",
    "end": "3201620"
  },
  {
    "text": "And then, I do the\ncheck at the end to print or not print found.",
    "start": "3201620",
    "end": "3207510"
  },
  {
    "text": "AUDIENCE: Can you explain why we\ndon't use else on [INAUDIBLE].. ANA BELL: I don't use else\nin the if or down here.",
    "start": "3207510",
    "end": "3215910"
  },
  {
    "text": "In the if? So we don't use\nthe else inside the if i equals secret because\nthat if or else we'll",
    "start": "3215910",
    "end": "3224850"
  },
  {
    "text": "be done every time\nthrough the loop, right? And I only print that we didn't\nfind it one time at the end,",
    "start": "3224850",
    "end": "3232609"
  },
  {
    "text": "right? If I have an else\ninside for loop, it's basically asking if\ni is the secret number.",
    "start": "3232610",
    "end": "3241400"
  },
  {
    "text": "So 0 is not the secret\nnumber, we would hit the else. 1 is not the secret number,\nwe would hit the else.",
    "start": "3241400",
    "end": "3246740"
  },
  {
    "text": "2 is not the secret\nnumber, we hit the else. And only when I get\nto 7, in this case, it is the secret number,\nso I hit the if and so on.",
    "start": "3246740",
    "end": "3254025"
  },
  {
    "text": "So it's not something I want to\ndo every time through the loop, it's-- I put it at the end because\nI only need to do it once.",
    "start": "3254025",
    "end": "3259760"
  },
  {
    "start": "3259760",
    "end": "3265130"
  },
  {
    "text": "Does that make sense? ",
    "start": "3265130",
    "end": "3270290"
  },
  {
    "text": "OK, so Boolean variables\nare a variable that",
    "start": "3270290",
    "end": "3275680"
  },
  {
    "text": "is in one of two states, right? I used here true or false. But as I mentioned, you can use\n0 or 1, a or b, as long as you",
    "start": "3275680",
    "end": "3282136"
  },
  {
    "text": "as the programmer remember\nwhat values you're expecting this variable to take on. Boolean variables can be used\nas signals that something",
    "start": "3282136",
    "end": "3290410"
  },
  {
    "text": "happened in the code, right? So this could be useful\nin a quiz situation. We call these Boolean flags,\nbut again, it's just a name.",
    "start": "3290410",
    "end": "3297430"
  },
  {
    "text": "It's just a variable\nthat changes state depending on if some event\nhappened in the code.",
    "start": "3297430",
    "end": "3304470"
  },
  {
    "text": "OK, so I'm coming back to the\nidea of while and for loops. And we've already seen that\nthere are many situations where",
    "start": "3304470",
    "end": "3309910"
  },
  {
    "text": "for loops are a lot easier\nto use than while loops, OK?",
    "start": "3309910",
    "end": "3315000"
  },
  {
    "text": "So when we have for\nloops that iterate through a sequence of values. So the guess-and-check\nalgorithm actually lends itself a little bit better\nfor loops than while loops.",
    "start": "3315000",
    "end": "3322980"
  },
  {
    "text": "So here's an\nexample of us trying to find the cube root in\nthis particular case, not",
    "start": "3322980",
    "end": "3328170"
  },
  {
    "text": "the square root of a number. And again, we're only\nasking if this number x is--",
    "start": "3328170",
    "end": "3334140"
  },
  {
    "text": "or in this case cube\nis a perfect cube, OK? So the way the code\nworks with a for loop",
    "start": "3334140",
    "end": "3341369"
  },
  {
    "text": "is we're going to\niterate through all the possible values. So we have for our guests\nin range some number.",
    "start": "3341370",
    "end": "3350680"
  },
  {
    "text": "So we're going to\ncheck all the value 0 all the way up\nthrough cube plus 1. The reason why we did the 1 is\nbecause if the user gives us",
    "start": "3350680",
    "end": "3357510"
  },
  {
    "text": "the number 1 we want to\ncheck 1 itself, right? If we didn't have cubed plus\n1, if we just had cubed,",
    "start": "3357510",
    "end": "3364240"
  },
  {
    "text": "we would mistakenly\nstop at 0 even though 1 is a perfect cube.",
    "start": "3364240",
    "end": "3369930"
  },
  {
    "text": "And then, inside\nfor loop, we just have if guess cubed\nis equal to cube, then we have found\nour perfect cube.",
    "start": "3369930",
    "end": "3380020"
  },
  {
    "text": "If we have negative\nnumbers with cubes, it's just adding a\nlittle bit of extra code.",
    "start": "3380020",
    "end": "3388180"
  },
  {
    "text": "But it's not as weird as\nwith the square root, right? Because the cube root\nof a negative number",
    "start": "3388180",
    "end": "3393880"
  },
  {
    "text": "is just the cube root\nof that positive version of that number with a\nnegative sign in front of it.",
    "start": "3393880",
    "end": "3399700"
  },
  {
    "text": "So all we're doing\nwith a negative number as the input is\nsaying, I'm going to iterate through all\nthese values in through 0",
    "start": "3399700",
    "end": "3408420"
  },
  {
    "text": "all the way up to\nthe positive version of whatever the user gave me. So this is taking\nthe absolute value",
    "start": "3408420",
    "end": "3414150"
  },
  {
    "text": "of the number the user\ngave me and adding 1 to it. So just kind of like the\ncode on the previous slide,",
    "start": "3414150",
    "end": "3420070"
  },
  {
    "text": "except we're doing the\nabsolute value of it. We're checking if\nthe guess cubed is equivalent to the\nabsolute value of cubed.",
    "start": "3420070",
    "end": "3426360"
  },
  {
    "text": "Exactly the same as\non the previous slide, except taking the absolute\nvalue of the cube. And then, we have\nthis extra little bit",
    "start": "3426360",
    "end": "3433410"
  },
  {
    "text": "that checks if the user actually\ngave us a negative number. So do we need to put a negative\nnumber in front of our guess?",
    "start": "3433410",
    "end": "3441270"
  },
  {
    "text": "So if the user actually did\ngive us a negative number, let's just take-- do minus whatever value we\njust found for the cube.",
    "start": "3441270",
    "end": "3449390"
  },
  {
    "text": "And then, we can print the\ncube root of this perfect cube.",
    "start": "3449390",
    "end": "3455950"
  },
  {
    "text": "OK, so again, same code as\nbefore, the only difference is absolute value of\ncube and adding this",
    "start": "3455950",
    "end": "3461980"
  },
  {
    "text": "check to deal with\nnegative numbers. ",
    "start": "3461980",
    "end": "3467740"
  },
  {
    "text": "OK, so we can actually make\nthis code a little bit faster because, for example,\nwhen we're taking--",
    "start": "3467740",
    "end": "3472930"
  },
  {
    "text": "checking the cube root of 27,\nthe numbers we're checking are 0, 1, 2, 3, 4, 5, 6 in our\nfor loop all the way up to 27,",
    "start": "3472930",
    "end": "3482590"
  },
  {
    "text": "right? But we can recognize the fact\nthat when we reach 27, fine.",
    "start": "3482590",
    "end": "3489190"
  },
  {
    "text": "Let's say, 26. We can recognize the\nfact that when we hit 3,",
    "start": "3489190",
    "end": "3495250"
  },
  {
    "text": "the guess cubed is\nactually 27, right?",
    "start": "3495250",
    "end": "3500530"
  },
  {
    "text": "And so in for loop,\nit doesn't make sense to keep checking 4, 5, 6, 7 to\nsee if those numbers are then",
    "start": "3500530",
    "end": "3508539"
  },
  {
    "text": "going to match-- or be our cube root for a,,\npotentially perfect cube. And so that's what\nthis code is doing.",
    "start": "3508540",
    "end": "3515650"
  },
  {
    "text": "It's going to have a little\nif statement in here. So again, this is\nthe same as before.",
    "start": "3515650",
    "end": "3521575"
  },
  {
    "text": "But we're going to have\na little if statement that says, if the\nguessed cubed is greater than or equal to-- not\njust equal to, but greater than",
    "start": "3521575",
    "end": "3528830"
  },
  {
    "text": "or equal to. Let's break out of the loop, OK?",
    "start": "3528830",
    "end": "3534140"
  },
  {
    "text": "And so when this\ncondition is false-- or sorry, when this\ncondition is true,",
    "start": "3534140",
    "end": "3539930"
  },
  {
    "text": "guess cube is greater\nthan or equal to, we have exited the loop. But now, just like with\nthe square root code",
    "start": "3539930",
    "end": "3546650"
  },
  {
    "text": "with the while loop, we have\nto see why we exited the loop. Why did we break out of\nthis loop prematurely?",
    "start": "3546650",
    "end": "3552490"
  },
  {
    "text": "OK, one is we exited\nbecause the guess cube was equal to the cube. Or the guess cubed was\ngreater than the cube.",
    "start": "3552490",
    "end": "3560530"
  },
  {
    "text": "And so then we have a little\nif else conditional here that",
    "start": "3560530",
    "end": "3565720"
  },
  {
    "text": "says, if we exited because\nit's not equal, greater than, then it's not a perfect cube.",
    "start": "3565720",
    "end": "3572230"
  },
  {
    "text": "And otherwise, we\nexited because it was equal to, which\nis the same code we",
    "start": "3572230",
    "end": "3577480"
  },
  {
    "text": "had on the previous slide. Check whether the user gave us\na positive or negative value,",
    "start": "3577480",
    "end": "3582730"
  },
  {
    "text": "put the negative sign\nin front of our guess, and then print the\nperfect cube root.",
    "start": "3582730",
    "end": "3589310"
  },
  {
    "text": "OK, so all variations of the\nsame sort of starter code, we're just adding little\nbits of functionality",
    "start": "3589310",
    "end": "3595220"
  },
  {
    "text": "and making the code slightly\nmore efficient here and there. So I have another example.",
    "start": "3595220",
    "end": "3600740"
  },
  {
    "text": "And this example is probably\nthe point in this class where you're like, aha, this\nis what computational thinking",
    "start": "3600740",
    "end": "3606730"
  },
  {
    "text": "means. So remember these word\nproblems from childhood, right?",
    "start": "3606730",
    "end": "3611950"
  },
  {
    "text": "You see a math problem. You have basically a\nsystem of equations. Algebraically,\nyou could probably",
    "start": "3611950",
    "end": "3617319"
  },
  {
    "text": "solve it within a minute or so. We can actually\napply computation to solve problems\njust like these.",
    "start": "3617320",
    "end": "3624770"
  },
  {
    "text": "So we don't need to\ndo it algebraically, we can just tell\nthe computer, here's a bunch of values\nI want you to try.",
    "start": "3624770",
    "end": "3631390"
  },
  {
    "text": "Try them to see if they match\nthese systems of equations. And then, print out the answer.",
    "start": "3631390",
    "end": "3637370"
  },
  {
    "text": "So here's an example. I've got Alyssa, Ben,\nand Cindy selling tickets to a fundraiser. Ben sells to fewer than Alyssa.",
    "start": "3637370",
    "end": "3642640"
  },
  {
    "text": "Cindy sells twice as many. 10 total tickets were sold. How many did Alyssa sell?",
    "start": "3642640",
    "end": "3648300"
  },
  {
    "text": "Here's some code that could\nsolve this problem for us. I'm basically figuring out\nall the possible combinations",
    "start": "3648300",
    "end": "3655630"
  },
  {
    "text": "for tickets that Alyssa and Ben\nand Cindy could sell, right? So I've got three loops,\neach nested, right?",
    "start": "3655630",
    "end": "3663069"
  },
  {
    "text": "So Alyssa could sell 0 or\none ticket or two tickets and so on.",
    "start": "3663070",
    "end": "3668330"
  },
  {
    "text": "But for every value\nof a list-- so Alyssa can sell zero,\none, or two tickets.",
    "start": "3668330",
    "end": "3673690"
  },
  {
    "text": "For every one of those, Ben can\nsell zero, one, or two tickets, right? So Alyssa can sell zero, Ben can\nsell zero, Cindy can sell zero,",
    "start": "3673690",
    "end": "3681490"
  },
  {
    "text": "Alyssa can sell zero, Ben can\nsell one, Cindy can sell zero, and so on. So we're basically\nhaving these three for loops that make all\nthe possible combinations",
    "start": "3681490",
    "end": "3688580"
  },
  {
    "text": "of tickets. So here I have\nAlyssa Ben and Cindy trying to sell tickets\nto a fundraiser. And then, I have my\nsystem of equations here.",
    "start": "3688580",
    "end": "3695990"
  },
  {
    "text": "So in total they\nsell 10 tickets. So here, total two\nless than twice are all Boolean variables.",
    "start": "3695990",
    "end": "3702079"
  },
  {
    "text": "So a plus b plus c\nis equivalent to 10 is the first condition\nI need to hold.",
    "start": "3702080",
    "end": "3707650"
  },
  {
    "text": "b is equal to a minus 2\nis the second condition I need to hold. And c is equal to-- is\nequivalent to 2 times a",
    "start": "3707650",
    "end": "3713678"
  },
  {
    "text": "is the last condition\nI need to hold. Those were the conditions from\nthe previous slides, right? And so these three Booleans,\nwhenever they hold,",
    "start": "3713678",
    "end": "3721260"
  },
  {
    "text": "total is true and two less\nis true and twice is true. When all these things\nthree things hold,",
    "start": "3721260",
    "end": "3727740"
  },
  {
    "text": "I have found the\nsolution to my problem. So inside my code, this\nis Alyssa, Ben, and Cindy",
    "start": "3727740",
    "end": "3735060"
  },
  {
    "text": "trying to sell tickets. And the code automatically tells\nme they sold this many each.",
    "start": "3735060",
    "end": "3740430"
  },
  {
    "text": "And what's cool about this code\nis we can then change something about it. And then, we can run it again\nand immediately it tells us",
    "start": "3740430",
    "end": "3747428"
  },
  {
    "text": "what the new solution is. We don't have to do it\nalgebraically and solve it all over again.",
    "start": "3747428",
    "end": "3753530"
  },
  {
    "text": "The problem with\nthis code and the way I wrote it specifically is it's\nreally slow for big numbers.",
    "start": "3753530",
    "end": "3758560"
  },
  {
    "text": "If I change it to\n1,000 tickets being sold by three people and then\na couple other changes here,",
    "start": "3758560",
    "end": "3764960"
  },
  {
    "text": "just the shear fact that\nI've got Alyssa iterating through 0 to 1,000 and Ben\niterating through 0 to 1,000",
    "start": "3764960",
    "end": "3770110"
  },
  {
    "text": "and Cindy iterating through 0 to\n1,000 takes a really long time. And so that particular code--",
    "start": "3770110",
    "end": "3775810"
  },
  {
    "text": "I'm not even going\nto run it-- will take a really long time if\nI change the values to be",
    "start": "3775810",
    "end": "3780940"
  },
  {
    "text": "1020 and twice. But instead, we can use a mix\nof algebra and computation",
    "start": "3780940",
    "end": "3787119"
  },
  {
    "text": "to solve the problem. We recognize we actually only\nneed a loop through one loop, right? I only care about maybe\nchecking Alyssa's number",
    "start": "3787120",
    "end": "3794560"
  },
  {
    "text": "of tickets being 0 through\npotentially 1,000 tickets sold. And then, I can use my\nother two equations, right?",
    "start": "3794560",
    "end": "3802900"
  },
  {
    "text": "Ben and Cindy. How many did they sell\nwith respect to Alyssa? And then, I've got my\ntwo other equations here,",
    "start": "3802900",
    "end": "3810920"
  },
  {
    "text": "which will tell me how many\nBen and Cindy sold with respect to Alyssa's loop, right?",
    "start": "3810920",
    "end": "3816070"
  },
  {
    "text": "And then, my last\nequation here is that Ben and Cindy and Melissa\naltogether had to sell 1,000.",
    "start": "3816070",
    "end": "3823420"
  },
  {
    "text": "And so with this\nparticular code, I'm able to find the answer\nto the question, which",
    "start": "3823420",
    "end": "3830840"
  },
  {
    "text": "is how many tickets they sold. And again, this\nis really awesome because now I can make\nsmall changes to the numbers",
    "start": "3830840",
    "end": "3838530"
  },
  {
    "text": "and solve the\nproblem, basically, immediately like that. I don't need to go back\nand solve it algebraically",
    "start": "3838530",
    "end": "3844440"
  },
  {
    "text": "as I would if I were to do math. OK, so we can apply computation\nto many different problems.",
    "start": "3844440",
    "end": "3852970"
  },
  {
    "text": "I hope that this is a really\ngood showcase, this word problem of what we mean\nby computational thinking",
    "start": "3852970",
    "end": "3858869"
  },
  {
    "text": "and the kinds of things we\nwant you to come away from-- come away with in this class. The last thing I\nwanted to talk about,",
    "start": "3858870",
    "end": "3865230"
  },
  {
    "text": "and I'll just do a quick\nintuition, is binary numbers. And this is actually a\nprecursor to the next algorithm",
    "start": "3865230",
    "end": "3870600"
  },
  {
    "text": "we're going to see in the\nnext lecture, an approximation algorithm. It's going to be\nan improvement on",
    "start": "3870600",
    "end": "3875970"
  },
  {
    "text": "the guess-and-check algorithm. So far, we've seen\nnumbers in Python they can be integers, which\nare whole numbers and floats,",
    "start": "3875970",
    "end": "3882550"
  },
  {
    "text": "which are real numbers. But in programming,\nsome interesting things",
    "start": "3882550",
    "end": "3888450"
  },
  {
    "text": "happen when we deal with floats. And this is going to be\nour motivation for talking about binary numbers\nand then fractions",
    "start": "3888450",
    "end": "3895590"
  },
  {
    "text": "and then floats in this lecture\nand then in the next one. So here's an example\nof some code.",
    "start": "3895590",
    "end": "3902890"
  },
  {
    "text": "So I've got-- it is exactly\nwhat's in the slides. I've got an integer x. And all I'm doing\nin this code is",
    "start": "3902890",
    "end": "3909420"
  },
  {
    "text": "I have a loop\nthrough a range 10. So that means it's going\nto loop through 10 times. And I'm adding 0.1 10 times.",
    "start": "3909420",
    "end": "3915900"
  },
  {
    "text": "So 0.1 plus 0.1\nplus 0.1 10 times. And I'm going to print\nwhether x, the sum,",
    "start": "3915900",
    "end": "3922470"
  },
  {
    "text": "0.1 plus 0.1 plus\n0.1 is equal to 1. And just to show you I'm\nnot pulling your leg,",
    "start": "3922470",
    "end": "3927760"
  },
  {
    "text": "I'm going to run it and\nprint whether x-- so 0.1 plus 0.1 plus 0.1 10\ntimes is equivalent to 1.",
    "start": "3927760",
    "end": "3934950"
  },
  {
    "text": "And this code prints false. Not intuitive, right? If I'm adding 0.1 10 times,\nI should be getting 1.",
    "start": "3934950",
    "end": "3942500"
  },
  {
    "text": "But I'm not in programming. And just to show you the\nactual answer we get, let's print what the\nvalue of x is and then",
    "start": "3942500",
    "end": "3950090"
  },
  {
    "text": "ask whether that's the same\nas just multiplying 0.1 by 10. So doing the loop where we\nadd this number 10 times",
    "start": "3950090",
    "end": "3958870"
  },
  {
    "text": "gives me actually 0.9999999. Whereas, just multiplying 0.1 by\n10 gives me 1, as I expect, OK?",
    "start": "3958870",
    "end": "3968210"
  },
  {
    "text": "And this is the motivation for-- or I guess the precursor\nto our next algorithm, the approximation algorithm, OK?",
    "start": "3968210",
    "end": "3975980"
  },
  {
    "text": "So we have this thing called\na floating point error. And why does it happen? And since it happens, we\ncan't do equivalency, right?",
    "start": "3975980",
    "end": "3984440"
  },
  {
    "text": "We can't use the equal\nequal sign between floats because we get\nthings like this that",
    "start": "3984440",
    "end": "3991180"
  },
  {
    "text": "are going to completely\nmess up our program when we expect something\nas simple as adding 0.1 to itself 10 times to\nbe 1 and it's not, right?",
    "start": "3991180",
    "end": "4000960"
  },
  {
    "text": "And so the big idea here is\nwe have operations on floats. Because of the way\nfloats are actually",
    "start": "4000960",
    "end": "4006930"
  },
  {
    "text": "stored in computer\nmemory, these operations introduce a very small error,\nsuper, super small, every time",
    "start": "4006930",
    "end": "4013230"
  },
  {
    "text": "you do an operation\nwith a float. But the more you do\nthis operation that has this tiny error,\nthe more this error",
    "start": "4013230",
    "end": "4019080"
  },
  {
    "text": "gets magnified, right? And so, then, we see\nsurprising results like that. And so that comes about\nwith the way that floats",
    "start": "4019080",
    "end": "4026340"
  },
  {
    "text": "are actually stored\nin the computer. So what we have\nin the computer is",
    "start": "4026340",
    "end": "4032540"
  },
  {
    "text": "we work with binary,\nzeros and ones. But humans actually\nwork in base 10, right? We think from 0 to 9.",
    "start": "4032540",
    "end": "4038630"
  },
  {
    "text": "But the computer works\nin base 2, either 0 or 1. And the reason it\nworks through 0 and 1",
    "start": "4038630",
    "end": "4045050"
  },
  {
    "text": "is because of the way that the\ncomputer hardware is built, right? It's easy for the\ncomputer hardware",
    "start": "4045050",
    "end": "4051500"
  },
  {
    "text": "to say that a magnetic\nspin is up or down, right? 0 or 1. It's easy for the\nhardware to say",
    "start": "4051500",
    "end": "4056630"
  },
  {
    "text": "that it has a voltage\nthat's low or high, right? It would be a lot harder for\nthe computer hardware to say,",
    "start": "4056630",
    "end": "4063750"
  },
  {
    "text": "hey, I have a voltage that's\n0 low, high, let's say, 1, or it's 1/10 of the high\nor 2/10 of the high.",
    "start": "4063750",
    "end": "4070190"
  },
  {
    "text": "There would be too\nmany errors introduced. And so it's a lot easier\nfor the computer hardware to just be in one of\nthese two states, 0 or 1.",
    "start": "4070190",
    "end": "4077810"
  },
  {
    "text": "So that's where binary comes in. And so when we're\ndealing with integers, this is not a problem\nbecause we can easily",
    "start": "4077810",
    "end": "4084790"
  },
  {
    "text": "convert numbers\nthat are in base 10 to base 2 that are\nwhole numbers, integers.",
    "start": "4084790",
    "end": "4092829"
  },
  {
    "text": "The problem will come\nwhen we do floats. So you don't need to know\nhow to do the conversion. But it will give\nyou an intuition",
    "start": "4092830",
    "end": "4098740"
  },
  {
    "text": "for what's going to happen. So the number 1507 in base 10,\nso that's what we have up here,",
    "start": "4098740",
    "end": "4105009"
  },
  {
    "text": "is 1,000 plus 500 plus 0\ntimes 10 plus 7, right?",
    "start": "4105010",
    "end": "4110289"
  },
  {
    "text": "In base 2, we have\na similar pattern. We have some whole number\nmultiplied by some power of 2.",
    "start": "4110290",
    "end": "4117189"
  },
  {
    "text": "Here, we had the whole number\nbe either number 0 through 9 multiplied by some power of 10.",
    "start": "4117189",
    "end": "4123189"
  },
  {
    "text": "But in base 2, we're going to\nhave either 0 or 1 multiplied by some power of 2.",
    "start": "4123189",
    "end": "4129380"
  },
  {
    "text": "And if we're trying to convert\nthe number 1507 from base 10 to base 2, because I\nguess, humanly speaking,",
    "start": "4129380",
    "end": "4137699"
  },
  {
    "text": "the way we'd think\nabout it is, what is the biggest power of 2\nthat we can have that takes us close to but not over 1507?",
    "start": "4137700",
    "end": "4145410"
  },
  {
    "text": "And that's 2 to the 10, 1,024. Because 2 to the 11 is\n2000 something, and that's",
    "start": "4145410",
    "end": "4150778"
  },
  {
    "text": "already too big. And then, you ask\nyourself, what's the next biggest\npower of 2 I can add to this number, 1,024,\nthat brings me close to",
    "start": "4150779",
    "end": "4158409"
  },
  {
    "text": "but not over 1507? That's going to be 256. Notice we skipped 2 to the\n9 because adding 2 to the 9",
    "start": "4158410",
    "end": "4166630"
  },
  {
    "text": "takes us over 1507. It's adding 512 to 1,024.",
    "start": "4166630",
    "end": "4172799"
  },
  {
    "text": "And so we repeat this\nprocess where we're basically trying to figure out,\nwhat are the biggest powers of 2 we can add in\norder that makes up 1507?",
    "start": "4172800",
    "end": "4182699"
  },
  {
    "text": "And it turns out it's going to\nbe 2 to the 10 plus 2 to the 8 plus 2 to the 7 plus 2\nto the 6 plus 2 to the 5.",
    "start": "4182700",
    "end": "4187979"
  },
  {
    "text": "2 to the 4, 3, and 2 are\nall going to be zeros. And 2 to the 1 and 2 to the 0. And the bits, 1 times 2 to\nthe 10, 1 times 2 to the 8,",
    "start": "4187979",
    "end": "4197190"
  },
  {
    "text": "is basically what gets\nrepresented here, right? These whole number portions that\nwe multiply the powers of 10",
    "start": "4197190",
    "end": "4204480"
  },
  {
    "text": "by. And that's how we convert\nfrom a decimal number",
    "start": "4204480",
    "end": "4209620"
  },
  {
    "text": "to a binary number. But again, this is kind of\na human way of converting. We can actually do it in a more\nsystematic way, a more-- not a",
    "start": "4209620",
    "end": "4218725"
  },
  {
    "text": "more imperative way, right? A recipe way. Some way that a computer can\nactually use to take a number",
    "start": "4218725",
    "end": "4223900"
  },
  {
    "text": "and convert it to binary. And you would never have\nto come up with this way. But given this way of\nconverting to binary,",
    "start": "4223900",
    "end": "4231070"
  },
  {
    "text": "you should be able\nto code it up. So the idea here is we're\ngoing to take a number",
    "start": "4231070",
    "end": "4236770"
  },
  {
    "text": "and we're going to\nlook at the remainder when we divide it by 2.",
    "start": "4236770",
    "end": "4244050"
  },
  {
    "text": "If it's an odd number,\nobviously, the remainder is 1. If it's an even number,\nthe remainder is 0. And that remainder actually\ngives us the last bit,",
    "start": "4244050",
    "end": "4251170"
  },
  {
    "text": "the farthest right bit. And then, we can\ntake that number and divide it by 2 fully.",
    "start": "4251170",
    "end": "4256470"
  },
  {
    "text": "And then, that gives us\nthe remaining four digits. So you see everything else\njust gets shifted over.",
    "start": "4256470",
    "end": "4262810"
  },
  {
    "text": "And the way the code looks is\njust doing successive divisions and figuring out the remainders.",
    "start": "4262810",
    "end": "4268380"
  },
  {
    "text": "So I'm just going to look at\nthe Python Tutor real quick and then we can stop. So if we're trying to convert\nthe number 1507 following",
    "start": "4268380",
    "end": "4276360"
  },
  {
    "text": "this particular recipe, all we\ndo is we look at the remainder when we divide the number by 2.",
    "start": "4276360",
    "end": "4281880"
  },
  {
    "text": "So this is an odd number. Obviously, the remainder\nis going to be 1. So we add a 1 to our\nbinary representation.",
    "start": "4281880",
    "end": "4290040"
  },
  {
    "text": "And then, we're\ngoing to keep adding what happens when we divide\nthe remaining numbers by 2.",
    "start": "4290040",
    "end": "4296610"
  },
  {
    "text": "We're going to keep adding\nthe remainder to the front of this string here. So if we divide the number\n1507 by 2, that gives us 753.",
    "start": "4296610",
    "end": "4306030"
  },
  {
    "text": "And now we ask, is\n753 odd or even? It's odd, so we add another one\nto the front of this string--",
    "start": "4306030",
    "end": "4312300"
  },
  {
    "text": "the result string. Divide 753 by 2, it's 376. This is even.",
    "start": "4312300",
    "end": "4317639"
  },
  {
    "text": "So now we add a 0 to\nthe front of my string. So notice what happens to this\nstring as we go step by step.",
    "start": "4317640",
    "end": "4324790"
  },
  {
    "text": "376 divided by 2 is 188. What is this even number? So we add a 0 to the\nfront of the string.",
    "start": "4324790",
    "end": "4331880"
  },
  {
    "text": "188 divided by 2 is 94. Again, it's an even\nnumber, so we add a 0 to the front of this string.",
    "start": "4331880",
    "end": "4337840"
  },
  {
    "text": "94 divided by 2 is 47. It's odd, so we add a 1. 47 divided by 2 is 23.",
    "start": "4337840",
    "end": "4343150"
  },
  {
    "text": "It's odd, so we add a 1. 23 divided by 2 is\n11, so we add an odd-- so we add a 1.",
    "start": "4343150",
    "end": "4348760"
  },
  {
    "text": "11 divided by 2 is 5, so\nit's odd, so we add a 1. And then, 5 divided by\n2 is even, we add a 0.",
    "start": "4348760",
    "end": "4355929"
  },
  {
    "text": "And then, 1 is our last\nnumber, so we add a 1. And notice this is\nthe exact same number we had when we did it in this\nhuman, thoughtful way where",
    "start": "4355930",
    "end": "4365343"
  },
  {
    "text": "we were trying to figure\nout the highest powers of 2 we can take to go up to but\nnot over the number 1507.",
    "start": "4365343",
    "end": "4373519"
  },
  {
    "text": "But we did this using just\nthis very iterative, very nice loopy code.",
    "start": "4373520",
    "end": "4378890"
  },
  {
    "text": "And if we wanted to\ndo a negative number, we would just add\nthese two boxes here. It just basically means we add\na negative sign in front of it.",
    "start": "4378890",
    "end": "4385730"
  },
  {
    "text": "OK. Yeah. ",
    "start": "4385730",
    "end": "4396000"
  }
]