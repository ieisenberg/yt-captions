[
  {
    "start": "0",
    "end": "120000"
  },
  {
    "text": "Today starts a two-lecture\nsequence on the topic of",
    "start": "9000",
    "end": "15378"
  },
  {
    "text": "hashing, which is a really great\ntechnique that shows up in a lot",
    "start": "15378",
    "end": "23543"
  },
  {
    "text": "of places.\nSo we're going to introduce it",
    "start": "23543",
    "end": "28646"
  },
  {
    "text": "through a problem that comes up\noften in compilers called the",
    "start": "28646",
    "end": "36300"
  },
  {
    "text": "symbol table problem.\nAnd the idea is that we have a",
    "start": "36300",
    "end": "45739"
  },
  {
    "text": "table S holding n records where\neach record, just to be a little",
    "start": "45739",
    "end": "57791"
  },
  {
    "text": "more explicit here.\nSo each record typically has a",
    "start": "57791",
    "end": "65087"
  },
  {
    "text": "bunch of, this is record x.\nx is usually a pointer to the",
    "start": "65088",
    "end": "70852"
  },
  {
    "text": "actual data.\nSo when we talk about the record x, what it usually means\nsome pointer to the data.",
    "start": "70852",
    "end": "80426"
  },
  {
    "text": "And in the data,\nin the record, so this is a record,\nthere is a key called a key of",
    "start": "80426",
    "end": "88661"
  },
  {
    "text": "x.\nIn some languages it's key, it's x dot key or x arrow key,\nOK, are other ways that that",
    "start": "88661",
    "end": "98243"
  },
  {
    "text": "will be denoted in some\nlanguages. And there's usually some\nadditional data called satellite",
    "start": "98244",
    "end": "106877"
  },
  {
    "text": "data, which is carried around\nwith the key. This is also true in sorting,\nbut usually you're sorting",
    "start": "106877",
    "end": "116285"
  },
  {
    "text": "records.\nYou're not sorting individual keys.\nAnd so the idea is that we have",
    "start": "116286",
    "end": "123367"
  },
  {
    "start": "120000",
    "end": "270000"
  },
  {
    "text": "a bunch of operations that we\nwould like to do on this data on",
    "start": "123367",
    "end": "129284"
  },
  {
    "text": "this table.\nSo we want to be able to insert",
    "start": "129284",
    "end": "135083"
  },
  {
    "text": "an item x into the table,\nwhich just essentially means",
    "start": "135083",
    "end": "140355"
  },
  {
    "text": "that we update the table by\nadding the element x. We want to be able to delete an\nitem from the table --",
    "start": "140356",
    "end": "151000"
  },
  {
    "text": "-- so removing the item x from\nthe set and we want to be able",
    "start": "158000",
    "end": "168259"
  },
  {
    "text": "to search for a given key.\nSo this returns the value x",
    "start": "168259",
    "end": "177321"
  },
  {
    "text": "such that key of x is equal to\nk, where it returns nil if",
    "start": "177321",
    "end": "186896"
  },
  {
    "text": "there's no such x.\nSo be able to insert items in,",
    "start": "186896",
    "end": "193588"
  },
  {
    "text": "delete them and also look to\nsee if there's an item that has",
    "start": "193589",
    "end": "198681"
  },
  {
    "text": "a particular key.\nSo notice that delete doesn't take a key.\nDelete takes a record.",
    "start": "198681",
    "end": "205500"
  },
  {
    "text": "OK, so if you want to delete\nsomething of a particular key and you don't happen to have a\npointer to it,",
    "start": "205500",
    "end": "214217"
  },
  {
    "text": "you have to say let me search\nfor it and then delete it.",
    "start": "214217",
    "end": "220000"
  },
  {
    "text": "So these, whenever you have a\nset operations, where operations that change\nthe set like in certain delete,",
    "start": "220000",
    "end": "231573"
  },
  {
    "text": "we call it a dynamic set.\nSo these two operations make",
    "start": "231573",
    "end": "237528"
  },
  {
    "text": "the set dynamic.\nIt changes over time. Sometimes you want to build a\nfixed data structure.",
    "start": "237528",
    "end": "244836"
  },
  {
    "text": "It's going to be a static set.\nAll you're going to do is do things like look it up and so\nforth.",
    "start": "244837",
    "end": "251174"
  },
  {
    "text": "But most often,\nit turns out that in programming and so forth,\nwe want to have the set be",
    "start": "251174",
    "end": "257034"
  },
  {
    "text": "dynamic.\nWant to be able to add elements to it, delete elements to it and\nso forth.",
    "start": "257034",
    "end": "262484"
  },
  {
    "text": "And there may be other\noperations that modify the set, modify membership in the set.\nSo the simplest implementation",
    "start": "262484",
    "end": "270116"
  },
  {
    "start": "270000",
    "end": "580000"
  },
  {
    "text": "for this is actually often\noverlooked. I'm actually surprised how\noften people use more",
    "start": "270116",
    "end": "276841"
  },
  {
    "text": "complicated data structures when\nthis simple data structure will work.\nIt's called a direct access",
    "start": "276841",
    "end": "282586"
  },
  {
    "text": "table.\nDoesn't always work. I'll give the conditions where\nit does.",
    "start": "282586",
    "end": "287000"
  },
  {
    "text": "So it works when the keys are\ndrawn from our small",
    "start": "293000",
    "end": "298359"
  },
  {
    "text": "distribution.\nSo suppose the keys are drawn",
    "start": "298359",
    "end": "304206"
  },
  {
    "text": "from a set U of m elements.\nOK, zero to m minus one.",
    "start": "304206",
    "end": "311603"
  },
  {
    "text": "And we're going to assume the\nkeys are distinct.",
    "start": "311603",
    "end": "319000"
  },
  {
    "text": "So the way a direct access\ntable works is that you set up an array T --",
    "start": "328000",
    "end": "334000"
  },
  {
    "text": "-- from zero to m minus one to\nrepresent the dynamic set S --",
    "start": "341000",
    "end": "352000"
  },
  {
    "text": "-- such that T of k is going to\nbe equal to x if x is in the set",
    "start": "358000",
    "end": "370600"
  },
  {
    "text": "and its key is k and nil\notherwise.",
    "start": "370600",
    "end": "378000"
  },
  {
    "text": "So you just simply have an\narray and if you have a record",
    "start": "384000",
    "end": "390420"
  },
  {
    "text": "whose key is some value k,\nthe key is 15 say,",
    "start": "390420",
    "end": "395464"
  },
  {
    "text": "then slot 15 if the element is\nthere has the element.",
    "start": "395464",
    "end": "402000"
  },
  {
    "text": "And if it's not in the set,\nit's nil. Very simple data structure.\nOK, insertion.",
    "start": "402000",
    "end": "408086"
  },
  {
    "text": "Just go to that location and\nset the value to the inserted value.\nFor deletion,",
    "start": "408086",
    "end": "414094"
  },
  {
    "text": "just remove it from there.\nAnd to look it up, you just index it and see\nwhat's in that slot.",
    "start": "414094",
    "end": "422000"
  },
  {
    "text": "OK, very simple data structure.\nAll these operations,",
    "start": "422000",
    "end": "429228"
  },
  {
    "text": "therefore, take constant time\nin the worst case.",
    "start": "429228",
    "end": "435762"
  },
  {
    "text": "But as a practical matter,\nthe places you can use this",
    "start": "435762",
    "end": "443130"
  },
  {
    "text": "strategy are pretty limited.\nWhat's the issue of limitation",
    "start": "443130",
    "end": "451192"
  },
  {
    "text": "here?\nYes.",
    "start": "451192",
    "end": "454000"
  },
  {
    "text": "OK, so that's a limitation\nsurely. But there's actually a more\nsevere limitation.",
    "start": "458000",
    "end": "465984"
  },
  {
    "text": "Yeah.\nWhat does that mean, it's hard to draw?",
    "start": "465984",
    "end": "471000"
  },
  {
    "text": "No.\nYeah. m minus one could be a huge\nnumber. Like for example,\nsuppose that I want to have my",
    "start": "485000",
    "end": "494673"
  },
  {
    "text": "set drawn over 64 bit values.\nOK, the things that I'm storing",
    "start": "494673",
    "end": "501195"
  },
  {
    "text": "in my table is a set of 64-bit\nnumbers. And so, maybe a small set.\nMaybe we only have a few",
    "start": "501195",
    "end": "510759"
  },
  {
    "text": "thousand of these elements.\nBut they're drawn from a 64-bit",
    "start": "510760",
    "end": "517992"
  },
  {
    "text": "value.\nThen this strategy requires me to have an array that goes from\nzero to 2 to the 64th minus one.",
    "start": "517993",
    "end": "527553"
  },
  {
    "text": "How big is 2^64 minus one?\nApproximately? It's like big.\nIt's like 18 quintillion or",
    "start": "527554",
    "end": "535376"
  },
  {
    "text": "something.\nI mean, it's zillions literally because it's like it's beyond\nthe illions we normally use.",
    "start": "535376",
    "end": "546000"
  },
  {
    "text": "Not a billion or a trillion.\nIt's 18 quintillion. OK, so that's a really big\nnumber.",
    "start": "546000",
    "end": "552488"
  },
  {
    "text": "So, or even worse,\nsuppose the keys were drawn from character strings,\nso people's names or something.",
    "start": "552489",
    "end": "560421"
  },
  {
    "text": "This would be an awful way to\nhave to represent it. Because most of the table would\nbe empty for any reasonable set",
    "start": "560421",
    "end": "569394"
  },
  {
    "text": "of values you would want to\nkeep. So the idea is we want to try\nto keep something that's going",
    "start": "569394",
    "end": "580500"
  },
  {
    "start": "580000",
    "end": "760000"
  },
  {
    "text": "to keep the table small,\nwhile still preserving some of",
    "start": "580500",
    "end": "587364"
  },
  {
    "text": "the properties.\nAnd that's where hashing comes",
    "start": "587364",
    "end": "593084"
  },
  {
    "text": "in.\nSo hashing is we use a hash function H which maps the keys\nrandomly.",
    "start": "593084",
    "end": "603000"
  },
  {
    "text": "And I'm putting that in quotes\nbecause it's not quite at",
    "start": "603000",
    "end": "608869"
  },
  {
    "text": "random.\nInto slots table T. So we call each of the array\nindexes here a slot.",
    "start": "608869",
    "end": "616766"
  },
  {
    "text": "So you can just sort of think\nof it as a big table and you've",
    "start": "616766",
    "end": "623169"
  },
  {
    "text": "got slots in the table where\nyou're storing your values.",
    "start": "623169",
    "end": "630000"
  },
  {
    "text": "And so, we may have a big\nuniverse of keys. Let's call that U.\nAnd we have our table over here",
    "start": "630000",
    "end": "639540"
  },
  {
    "text": "that we've set up that has --",
    "start": "639540",
    "end": "643000"
  },
  {
    "text": "-- m slots.",
    "start": "650000",
    "end": "651000"
  },
  {
    "text": "And so we actually have then a\nset that we're actually going to",
    "start": "656000",
    "end": "662690"
  },
  {
    "text": "try to represent S,\nwhich is presumably a very small piece of the universe.\nAnd what we'll do is we'll take",
    "start": "662690",
    "end": "673540"
  },
  {
    "text": "an element from here and map it\nto let's say to there and take another one and we apply the\nhash function to the element.",
    "start": "673540",
    "end": "683212"
  },
  {
    "text": "And what the hash function is\ngoing to give us is it's going to give us a particular slot.\nHere's one that might go up",
    "start": "683213",
    "end": "694144"
  },
  {
    "text": "here.\nMight have another one over here that goes down to there.\nAnd so, we get it to distribute",
    "start": "694144",
    "end": "704858"
  },
  {
    "text": "the elements over the table.\nSo what's the problem that's",
    "start": "704859",
    "end": "711381"
  },
  {
    "text": "going to occur as we do this?\nSo far, I've been a little bit",
    "start": "711381",
    "end": "718253"
  },
  {
    "text": "lucky.\nWhat's the problem potentially going to be?",
    "start": "718253",
    "end": "722000"
  },
  {
    "text": "Yeah, when two things are in S,\nmore specifically, get assigned to the same value.\nSo I may have a guy here and he",
    "start": "729000",
    "end": "735502"
  },
  {
    "text": "gets mapped to the same slot\nthat somebody else has already been mapped to.\nAnd when this happens,",
    "start": "735502",
    "end": "741066"
  },
  {
    "text": "we call that a collision.",
    "start": "741066",
    "end": "743000"
  },
  {
    "text": "So we're trying to map these\nthings down into a small set but we could get unlucky in our\nmapping, particularly if we map",
    "start": "749000",
    "end": "758076"
  },
  {
    "text": "enough of these guys.\nThey're not going to fit. So when a record --",
    "start": "758076",
    "end": "763000"
  },
  {
    "start": "760000",
    "end": "860000"
  },
  {
    "text": "-- to be inserted maps to an\nalready occupied slot --",
    "start": "774000",
    "end": "787000"
  },
  {
    "text": "-- a collision occurs.",
    "start": "799000",
    "end": "801000"
  },
  {
    "text": "OK.\nSo looks like this method's no good.\nBut no, there's a pretty simple",
    "start": "812000",
    "end": "817307"
  },
  {
    "text": "thing we can do.\nWhat should we do when two things map to the same slot?\nIf we want to represent the",
    "start": "817307",
    "end": "824769"
  },
  {
    "text": "whole set, but you can't lose\nany data, can't treat it like a cache.\nIn a cache what you do is it",
    "start": "824769",
    "end": "832000"
  },
  {
    "text": "uses a hashing scheme,\nbut in a cache, you just kick it out because\nyou don't care about",
    "start": "832000",
    "end": "838538"
  },
  {
    "text": "representing a set precisely.\nBut in a hash table you're",
    "start": "838538",
    "end": "844132"
  },
  {
    "text": "programming, you often want to\nmake sure that the values you have are exactly the values in\nthe sets so you can tell whether",
    "start": "844132",
    "end": "854055"
  },
  {
    "text": "something belongs to the set or\nnot. So what's a good strategy here?\nYeah.",
    "start": "854055",
    "end": "859878"
  },
  {
    "text": "Create a list for each slot and\njust put all the elements that",
    "start": "859878",
    "end": "864880"
  },
  {
    "start": "860000",
    "end": "1010000"
  },
  {
    "text": "hash to the same slot into the\nlist. And that's called resolving\ncollisions by chaining.",
    "start": "864880",
    "end": "873000"
  },
  {
    "text": "And the idea is to link records\nin the same slot --",
    "start": "878000",
    "end": "887000"
  },
  {
    "text": "-- into a list.\nSo for example, imagine this is my hash table\nand this for example is slot i.",
    "start": "892000",
    "end": "907000"
  },
  {
    "text": "I may have several things that\nare, so I'm going to put the key",
    "start": "907000",
    "end": "913888"
  },
  {
    "text": "value --",
    "start": "913888",
    "end": "915000"
  },
  {
    "text": "-- have several things that may\nhave been inserted into this",
    "start": "922000",
    "end": "928555"
  },
  {
    "text": "table that are elements of S.\nAnd what I'll do is just link",
    "start": "928555",
    "end": "935000"
  },
  {
    "text": "them together.\nOK, so nil pointer here. And this is the satellite data\nand these are the keys.",
    "start": "935000",
    "end": "943125"
  },
  {
    "text": "So if they're all linked\ntogether in slot i, then the hash function applied\nto 49 has got to be equal to the",
    "start": "943125",
    "end": "951477"
  },
  {
    "text": "hash function of 86 is equal to\nthe hash function of 52, which equals what?",
    "start": "951477",
    "end": "958000"
  },
  {
    "text": "There's only one thing I\nhaven't. i.\nGood. Even if you don't understand\nit, your quizmanship should tell",
    "start": "968000",
    "end": "976352"
  },
  {
    "text": "you.\nHe didn't mention i. That's equal to i.\nSo the point is when I hash 49,",
    "start": "976353",
    "end": "982511"
  },
  {
    "text": "the hash of 49 produces me some\nindex in the table, say i, and everything that\nhashes to that same location is",
    "start": "982512",
    "end": "991540"
  },
  {
    "text": "linked together into a list\nOK. Every record.\nAny questions about what the",
    "start": "991540",
    "end": "999577"
  },
  {
    "text": "mechanics of this.\nI hope that most of you have seen this, seen hashing,\nbasic hashing in 6.001,",
    "start": "999577",
    "end": "1009251"
  },
  {
    "text": "right?\nThey teach it in? They used to teach it 6.001.\nYeah.",
    "start": "1009251",
    "end": "1015076"
  },
  {
    "start": "1010000",
    "end": "1195000"
  },
  {
    "text": "OK.\nSome people are saying maybe. They used to teach it.\nGood.",
    "start": "1015077",
    "end": "1021214"
  },
  {
    "text": "So let's analyze this strategy.\nThe analysis.",
    "start": "1021214",
    "end": "1027949"
  },
  {
    "text": "We'll first do worst case.",
    "start": "1027950",
    "end": "1032000"
  },
  {
    "text": "So what happens in the worst\ncase? With hashing?\nYeah, raise your hand so that I",
    "start": "1038000",
    "end": "1047438"
  },
  {
    "text": "could call on you.\nYeah. Yeah, all hash keys,\nwell all, all the keys in S.",
    "start": "1047438",
    "end": "1057000"
  },
  {
    "text": "I happen to pick a set S where\nmy hash function happens to map",
    "start": "1057000",
    "end": "1066959"
  },
  {
    "text": "them all to the same value.\nThat would be bad.",
    "start": "1066959",
    "end": "1074306"
  },
  {
    "text": "So every key hashes to the same\nslot.",
    "start": "1074306",
    "end": "1081000"
  },
  {
    "text": "And so, therefore if that\nhappens, then what I've essentially built is a fancy\nlinked list for keeping this",
    "start": "1081000",
    "end": "1088461"
  },
  {
    "text": "data structure.\nAll this stuff with the tables, the hashing,\netc., irrelevant.",
    "start": "1088462",
    "end": "1093844"
  },
  {
    "text": "All that matters is that I have\na long linked list. And then how long does an\naccess take?",
    "start": "1093844",
    "end": "1100087"
  },
  {
    "text": "How long does it take me to\ninsert something or well, more importantly,\nto search for something.",
    "start": "1100087",
    "end": "1106761"
  },
  {
    "text": "Find out whether something's in\nthere. In the worst case.\nYeah, it takes order n time.",
    "start": "1106761",
    "end": "1115393"
  },
  {
    "text": "Because they're all just a\nlink, we just have a linked",
    "start": "1115393",
    "end": "1121818"
  },
  {
    "text": "list.\nSo access takes data n time if as we assume the size of S is\nequal to n.",
    "start": "1121818",
    "end": "1130909"
  },
  {
    "text": "So from a worst case point of\nview, this doesn't look so",
    "start": "1130909",
    "end": "1137575"
  },
  {
    "text": "attractive.\nAnd we will see data structures that in worst case do very well\nfor this problem.",
    "start": "1137575",
    "end": "1145448"
  },
  {
    "text": "But they don't do as good as\nthe average case of hashing. So let's analyze the average\ncase.",
    "start": "1145448",
    "end": "1152000"
  },
  {
    "text": "In order to analyze the average\ncase, I have to, whenever you have averages,\nwhenever you have probability,",
    "start": "1158000",
    "end": "1165221"
  },
  {
    "text": "you have to state your\nassumptions. You have to say what is the\nassumption about the behavior of",
    "start": "1165222",
    "end": "1171680"
  },
  {
    "text": "the system.\nAnd it's very hard to do that because you don't know\nnecessarily what the hash",
    "start": "1171680",
    "end": "1176931"
  },
  {
    "text": "function is.\nWell, let's imagine an ideal hash function.\nWhat should an ideal hash function do?",
    "start": "1176931",
    "end": "1182000"
  },
  {
    "text": "Yeah, map the keys essentially\nat random to a slot.",
    "start": "1194000",
    "end": "1200000"
  },
  {
    "start": "1195000",
    "end": "1320000"
  },
  {
    "text": "Should really distribute them\nrandomly. So we call this the assumption\n--",
    "start": "1200000",
    "end": "1206000"
  },
  {
    "text": "-- of simple uniform hashing.",
    "start": "1211000",
    "end": "1218000"
  },
  {
    "text": "And what it means is that each\nkey k in S is equally likely --",
    "start": "1224000",
    "end": "1235000"
  },
  {
    "text": "-- to be hashed to any slot in\nT and we're actually have to",
    "start": "1241000",
    "end": "1250986"
  },
  {
    "text": "make an independence assumption.\nIndependent of where other",
    "start": "1250986",
    "end": "1260973"
  },
  {
    "text": "records, other keys are hashed.",
    "start": "1260973",
    "end": "1267000"
  },
  {
    "text": "So we're going to make this\nassumption and includes n an",
    "start": "1278000",
    "end": "1283146"
  },
  {
    "text": "independence assumption.\nThat if I have two keys the odds that they're hashed to the\nsame place is therefore what?",
    "start": "1283146",
    "end": "1294000"
  },
  {
    "text": "What are the odds that two keys\nunder this assumption are hashed",
    "start": "1294000",
    "end": "1299533"
  },
  {
    "text": "to the same slot,\nif I have, say, m slots?\nOne over m. What are the odds that one key\nis hashed to slot 15?",
    "start": "1299533",
    "end": "1308492"
  },
  {
    "text": "One over m.\nBecause they're being distributed, but the odds in\nparticular two keys are hashed",
    "start": "1308493",
    "end": "1316398"
  },
  {
    "text": "to the same slot,\none over m.",
    "start": "1316398",
    "end": "1320000"
  },
  {
    "start": "1320000",
    "end": "1760000"
  },
  {
    "text": "So let's define.\nIs there a question?",
    "start": "1328000",
    "end": "1334904"
  },
  {
    "text": "No.\nOK. The load factor of a hash table\nwith n keys at m slots to be",
    "start": "1334904",
    "end": "1347368"
  },
  {
    "text": "alpha which is equal to n over\nm, which is also if you think",
    "start": "1347369",
    "end": "1358684"
  },
  {
    "text": "about it, just the average\nnumber of keys per slot.",
    "start": "1358684",
    "end": "1370000"
  },
  {
    "text": "So alpha is the average number\nof keys per, we call it the load factor of the table.\nOK.",
    "start": "1378000",
    "end": "1384318"
  },
  {
    "text": "How many on average keys do I\nhave? So the expected,\nwe'll look first at",
    "start": "1384318",
    "end": "1391636"
  },
  {
    "text": "unsuccessful search time.\nSo by unsuccessful search,",
    "start": "1391636",
    "end": "1397045"
  },
  {
    "text": "I mean I'm looking for\nsomething that's actually not in",
    "start": "1397045",
    "end": "1402772"
  },
  {
    "text": "the table.\nIt's going to return nil. I look for a key that's not in\nthe table.",
    "start": "1402772",
    "end": "1412000"
  },
  {
    "text": "It's going to be what?\nIt's going to be order. Well, I have to do a certain\namount of work just to calculate",
    "start": "1412000",
    "end": "1420944"
  },
  {
    "text": "the hash function and so forth.\nIt's going to be order at least",
    "start": "1420944",
    "end": "1426225"
  },
  {
    "text": "one plus, then I have to search\nthe list and on average how much",
    "start": "1426225",
    "end": "1431591"
  },
  {
    "text": "of the list do I have to search?",
    "start": "1431592",
    "end": "1435000"
  },
  {
    "text": "What's the cost of searching\nthat list? On average.\nIf I'm searching at random.",
    "start": "1441000",
    "end": "1448671"
  },
  {
    "text": "If I'm searching for a key\nthat's not in the table.",
    "start": "1448671",
    "end": "1453719"
  },
  {
    "text": "Whichever one it is,\nI got to search to the end of the list, right?\nSo what's the average cost over",
    "start": "1453719",
    "end": "1463410"
  },
  {
    "text": "all the slots in the table?\nAlpha. Right?\nAlpha. That's the average length of a\nlist.",
    "start": "1463410",
    "end": "1473000"
  },
  {
    "text": "So this is essentially the cost\nof doing the hash and then",
    "start": "1473000",
    "end": "1480238"
  },
  {
    "text": "accessing the slot and that is\njust the cost of searching the",
    "start": "1480238",
    "end": "1487857"
  },
  {
    "text": "list.",
    "start": "1487857",
    "end": "1489000"
  },
  {
    "text": "So the expected unsuccessful\nsearch time is proportional essentially to alpha and if\nalpha's bigger than one,",
    "start": "1494000",
    "end": "1502346"
  },
  {
    "text": "it's order alpha.\nIf alpha's less than one, it's constant.",
    "start": "1502346",
    "end": "1507000"
  },
  {
    "text": "So when is the expected search\ntime --",
    "start": "1513000",
    "end": "1515000"
  },
  {
    "text": "-- equal to order one?",
    "start": "1526000",
    "end": "1527000"
  },
  {
    "text": "So when is this order one?",
    "start": "1534000",
    "end": "1535000"
  },
  {
    "text": "Simple questions,\nby the way. I only ask simple questions.\nSome guys ask hard questions.",
    "start": "1546000",
    "end": "1553244"
  },
  {
    "text": "Yeah.\nOr in terms first we'll get there in two steps,\nOK. In terms of alpha,\nit's when?",
    "start": "1553244",
    "end": "1561000"
  },
  {
    "text": "When alpha is constant.\nIf alpha in particular is.",
    "start": "1561000",
    "end": "1566550"
  },
  {
    "text": "Alpha doesn't have to be\nconstant. It could be less than constant.\nIt's O of one,",
    "start": "1566550",
    "end": "1575385"
  },
  {
    "text": "right.\nOK, or equivalently, which is what you said,\nif n is O of m.",
    "start": "1575385",
    "end": "1582633"
  },
  {
    "text": "OK, which is to say if the\nnumber of elements in the table",
    "start": "1582634",
    "end": "1589090"
  },
  {
    "text": "is order, is upper bounded by a\nconstant times n.",
    "start": "1589090",
    "end": "1596000"
  },
  {
    "text": "Then the search cost is\nconstant. So a lot of people will tell\nyou oh, a hash table runs in",
    "start": "1596000",
    "end": "1602035"
  },
  {
    "text": "constant search time.\nOK, that's actually wrong. It depends upon the load factor\nof the hash table.",
    "start": "1602036",
    "end": "1608622"
  },
  {
    "text": "And people have made\nprogramming errors based on that misunderstanding of hash tables.\nBecause they have a hash table",
    "start": "1608622",
    "end": "1616443"
  },
  {
    "text": "that's too small for the number\nof elements they're putting in there.\nDoesn't help.",
    "start": "1616443",
    "end": "1623404"
  },
  {
    "text": "The number may in fact will\ngrow with the, since this is one plus n over\nm, it actually grows with n.",
    "start": "1623405",
    "end": "1634000"
  },
  {
    "text": "So unless you make sure that m\nkeeps up with n, this doesn't stay constant.\nNow it turns out for a",
    "start": "1634000",
    "end": "1644270"
  },
  {
    "text": "successful search,\nit's also one plus alpha.",
    "start": "1644270",
    "end": "1650000"
  },
  {
    "text": "And for that you need to do a\nlittle bit more mathematics because you now have to\ncondition on searching for the",
    "start": "1650000",
    "end": "1658142"
  },
  {
    "text": "items in the table.\nBut it turns out it's also one plus alpha and that you can read\nabout in the book.",
    "start": "1658142",
    "end": "1665537"
  },
  {
    "text": "And also, there's a more\nrigorous proof of this. I sort of have glossed over the\nexpectation stuff here,",
    "start": "1665537",
    "end": "1673080"
  },
  {
    "text": "doing sort of a more intuitive\nproof. So both of those things you\nshould look for in the book.",
    "start": "1673081",
    "end": "1681000"
  },
  {
    "text": "So this is one reason why\nhashing is such a popular method, is it basically lets you\nrepresent a dynamic set with",
    "start": "1681000",
    "end": "1690021"
  },
  {
    "text": "order one cost per operation,\nconstant cost per operation, inserting, deleting and so\nforth, as long as the table that",
    "start": "1690021",
    "end": "1699451"
  },
  {
    "text": "you're keeping is not much\nsmaller than the number of items that you're putting in there.\nAnd then all the operations end",
    "start": "1699452",
    "end": "1709129"
  },
  {
    "text": "up being constant time.\nBut it depends upon, strongly upon this assumption\nof simple uniform hashing.",
    "start": "1709129",
    "end": "1717783"
  },
  {
    "text": "And so no matter what hash\nfunction you pick, I can always find a set of\nelements that are going to hash,",
    "start": "1717784",
    "end": "1725650"
  },
  {
    "text": "that that hash function is\ngoing to hash badly. I just could generate a whole\nbunch of them and look to see",
    "start": "1725650",
    "end": "1733670"
  },
  {
    "text": "where the hash function takes\nthem and in the end pick a whole bunch that hash to the same\nplace.",
    "start": "1733670",
    "end": "1742000"
  },
  {
    "text": "We're actually going to see a\nway of countering that, but in practice people\nunderstand that most programs",
    "start": "1742000",
    "end": "1749691"
  },
  {
    "text": "that need to use things aren't\nreally reverse engineering the hash function.\nAnd so, there's some very",
    "start": "1749691",
    "end": "1757084"
  },
  {
    "text": "simple hash functions that seem\nto work fairly well in practice. So in choosing a hash function\n--",
    "start": "1757084",
    "end": "1765000"
  },
  {
    "start": "1760000",
    "end": "2335000"
  },
  {
    "text": "-- we would like it to\ndistribute",
    "start": "1772000",
    "end": "1774000"
  },
  {
    "text": "-- keys uniformly into slots\nand we also would like that",
    "start": "1780000",
    "end": "1791000"
  },
  {
    "text": "regularity in the key\ndistributions --",
    "start": "1791000",
    "end": "1799000"
  },
  {
    "text": "-- should not affect\nuniformity. For example,\na regularity that you often see",
    "start": "1806000",
    "end": "1812166"
  },
  {
    "text": "is that all the keys that are\nbeing inserted are even numbers.",
    "start": "1812166",
    "end": "1817250"
  },
  {
    "text": "Somebody happens to have that\nproperty of his data, that they're only inserting\neven numbers.",
    "start": "1817250",
    "end": "1824750"
  },
  {
    "text": "In fact, on many machines,\nsince they use byte pointers, if they're sorting things that\nare for example,",
    "start": "1824750",
    "end": "1833166"
  },
  {
    "text": "indexes to arrays or something\nlike that, in fact, they're numbers that are\ntypically divisible by four.",
    "start": "1833166",
    "end": "1843000"
  },
  {
    "text": "Or by eight.\nSo you don't want regularity in the key distribution to affect\nthe fact that you're",
    "start": "1843000",
    "end": "1849386"
  },
  {
    "text": "distributing slots.\nSo probably the most popular method that's used just for a\nquick hash function is what's",
    "start": "1849386",
    "end": "1856596"
  },
  {
    "text": "called the division method.",
    "start": "1856596",
    "end": "1859000"
  },
  {
    "text": "And the idea here is that you\nsimply let h of k for a key equal k modulo m,\nwhere m is the number of slots",
    "start": "1867000",
    "end": "1875512"
  },
  {
    "text": "in your table.",
    "start": "1875512",
    "end": "1877000"
  },
  {
    "text": "And this works reasonably well\nin practice, but you want to be careful about your choice of\nmodulus.",
    "start": "1884000",
    "end": "1891000"
  },
  {
    "text": "In other words,\nit turns out it doesn't work well for every possible size of\ntable you might want to pick.",
    "start": "1891000",
    "end": "1896595"
  },
  {
    "text": "Fortunately when you're\nbuilding hash tables, you don't usually care about\nthe specific size of the table.",
    "start": "1896595",
    "end": "1902190"
  },
  {
    "text": "If you pick it around some\nsize, that's probably fine because it's not going to affect\ntheir performance.",
    "start": "1902190",
    "end": "1907730"
  },
  {
    "text": "So there's no need to pick a\nspecific value. In particular,\nyou don't want to pick --",
    "start": "1907730",
    "end": "1913000"
  },
  {
    "text": "-- m with a small divisor --",
    "start": "1920000",
    "end": "1924000"
  },
  {
    "text": "-- and let me illustrate why\nthat's a bad idea for this particular hash function.",
    "start": "1931000",
    "end": "1936000"
  },
  {
    "text": "I should have said small\ndivisor d.",
    "start": "1947000",
    "end": "1949000"
  },
  {
    "text": "So for example -- -- if D is two,\nin other words m is an even",
    "start": "1955000",
    "end": "1965488"
  },
  {
    "text": "number, and it turns out that we\nhave the situation I just",
    "start": "1965488",
    "end": "1972937"
  },
  {
    "text": "mentioned, all keys are even,\nwhat happens to my usage of the",
    "start": "1972937",
    "end": "1980778"
  },
  {
    "text": "hash table?\nSo I have an even slot, even number of slots,\nand all the keys that the user",
    "start": "1980778",
    "end": "1989403"
  },
  {
    "text": "of the hash table chooses to\npick happen to be even numbers,",
    "start": "1989403",
    "end": "1994508"
  },
  {
    "text": "what's going to happen in terms\nof my use of the hash table?",
    "start": "1994509",
    "end": "1999615"
  },
  {
    "text": "Well, in the worst case,\nthey are always all going to point in the same slot no matter\nwhat hash function I pick.",
    "start": "1999615",
    "end": "2010000"
  },
  {
    "text": "But here, let's say that,\nin fact, my hash function does",
    "start": "2010000",
    "end": "2015695"
  },
  {
    "text": "do a pretty good job of\ndistributing, but I have this property.\nWhat's a property that's going",
    "start": "2015695",
    "end": "2025119"
  },
  {
    "text": "to have no matter what set of\nkeys I pick that satisfies this",
    "start": "2025119",
    "end": "2031333"
  },
  {
    "text": "property?\nWhat's going to happen to the hash table?\nSo, I have even number,",
    "start": "2031333",
    "end": "2038789"
  },
  {
    "text": "mod an even number.\nWhat does that say about the",
    "start": "2038789",
    "end": "2044866"
  },
  {
    "text": "hash function?\nIt's even, right? I have an even number mod.\nIt's even.",
    "start": "2044866",
    "end": "2051726"
  },
  {
    "text": "So, what's going to happen to\nmy use of the table?",
    "start": "2051726",
    "end": "2056743"
  },
  {
    "text": "Yeah, you're never going to\nhash anything to an odd-numbered",
    "start": "2056744",
    "end": "2062783"
  },
  {
    "text": "slot.\nYou wasted half your slots. It doesn't matter what the key\ndistribution is.",
    "start": "2062784",
    "end": "2072000"
  },
  {
    "text": "OK, as long as they're all\neven, OK, that means the odds",
    "start": "2072000",
    "end": "2078412"
  },
  {
    "text": "slots are never used.\nOK, an extreme example,",
    "start": "2078412",
    "end": "2083542"
  },
  {
    "text": "here's another example,\nimagine that m is equal to two",
    "start": "2083542",
    "end": "2089721"
  },
  {
    "text": "to the r.\nIn other words, all its factors are small\ndivisors, OK?",
    "start": "2089721",
    "end": "2098000"
  },
  {
    "text": "In that case,\nif I think about taking k mod",
    "start": "2098000",
    "end": "2106968"
  },
  {
    "text": "n, OK, the hash doesn't even\ndepend on all the bits of k,",
    "start": "2106968",
    "end": "2118927"
  },
  {
    "text": "OK?\nSo, for example, suppose I had one...,\nand r equals six,",
    "start": "2118927",
    "end": "2131098"
  },
  {
    "text": "OK, so m is two to the sixth.\nSo, I take this binary number,",
    "start": "2131098",
    "end": "2143745"
  },
  {
    "text": "mod two to the sixth,\nwhat's the hash value?",
    "start": "2143746",
    "end": "2150550"
  },
  {
    "text": "If I take something mod a power\nof two, what does it do?",
    "start": "2150550",
    "end": "2159253"
  },
  {
    "text": "So, I hash this function.\nThis is k, OK,",
    "start": "2159253",
    "end": "2166152"
  },
  {
    "text": "in binary.\nAnd I take it mod two to the",
    "start": "2166153",
    "end": "2172000"
  },
  {
    "text": "sixth.\nWell, if I took it mod two,",
    "start": "2172000",
    "end": "2177076"
  },
  {
    "text": "what's the answer?\nWhat's this number mod two?",
    "start": "2177076",
    "end": "2184000"
  },
  {
    "text": "Zero, right.\nOK, what's this number mod",
    "start": "2184000",
    "end": "2189846"
  },
  {
    "text": "four?\nOne zero. What is it mod two to the\nsixth?",
    "start": "2189846",
    "end": "2195870"
  },
  {
    "text": "Yeah, it's just these last six\nbits. This is H of k.\nOK, when you take something mod",
    "start": "2195870",
    "end": "2203709"
  },
  {
    "text": "a power of two,\nall you're doing is taking its low order bits.\nOK, mod two to the r,",
    "start": "2203709",
    "end": "2211547"
  },
  {
    "text": "you are taking its r low order\nbits. So, the hash function doesn't\neven depend on what's up here.",
    "start": "2211548",
    "end": "2222000"
  },
  {
    "text": "So, that's a pretty bad\nsituation because generally you would like a very common\nregularity that you'll see in",
    "start": "2222000",
    "end": "2229552"
  },
  {
    "text": "data is that all the low order\nbits are the same, and all the high order bits\ndiffer, or vice versa.",
    "start": "2229552",
    "end": "2236400"
  },
  {
    "text": "So, this particular is not a\nvery good one. So, good heuristics for this is\nto pick m to be a prime,",
    "start": "2236400",
    "end": "2245373"
  },
  {
    "text": "not too close to a power of two\nor ten because those are the two",
    "start": "2245373",
    "end": "2251528"
  },
  {
    "text": "common bases that you see\nregularity in the world. A prime is sometimes\ninconvenient,",
    "start": "2251528",
    "end": "2259540"
  },
  {
    "text": "however.\nBut generally, it's fairly easy to find\nprimes.",
    "start": "2259540",
    "end": "2264718"
  },
  {
    "text": "And there's a lot of nice\ntheorems about primes. So, generally what you do,\nif you're just coding up",
    "start": "2264718",
    "end": "2274195"
  },
  {
    "text": "something and you know what it\nis, you can pick a prime out of",
    "start": "2274195",
    "end": "2280155"
  },
  {
    "text": "a textbook or look it up on the\nweb or write a little program,",
    "start": "2280155",
    "end": "2286114"
  },
  {
    "text": "or whatever,\nand pick a prime. Not too close to a power of two\nor ten, and it will probably",
    "start": "2286114",
    "end": "2295267"
  },
  {
    "text": "work pretty well.\nIt will probably work pretty well.\nSo, this is a very popular",
    "start": "2295267",
    "end": "2300764"
  },
  {
    "text": "method, the division method.\nOK, but the next method we are going to see is actually usually\nsuperior.",
    "start": "2300764",
    "end": "2307924"
  },
  {
    "text": "The reason people do this is\nbecause they can write in-line in their code.\nOK, but it's not usually the",
    "start": "2307924",
    "end": "2316255"
  },
  {
    "text": "best method.\nAnd the reason is because division, one of the reasons is\ndivision tends to take a lot of",
    "start": "2316255",
    "end": "2324227"
  },
  {
    "text": "cycles to compute on most\ncomputers compared with multiplication or addition.\nOK, in fact,",
    "start": "2324228",
    "end": "2331234"
  },
  {
    "text": "it's usually done with taking\nseveral multiplications. So, the next method is actually\ngenerally better,",
    "start": "2331234",
    "end": "2339369"
  },
  {
    "start": "2335000",
    "end": "2535000"
  },
  {
    "text": "but none of the hash function\nmethods that we are talking about today are,\nin some sense,",
    "start": "2339369",
    "end": "2346295"
  },
  {
    "text": "provably good hash functions.\nOK, so for the multiplication",
    "start": "2346295",
    "end": "2352863"
  },
  {
    "text": "method, the nice thing about it\nis just essentially requires",
    "start": "2352863",
    "end": "2358687"
  },
  {
    "text": "multiplication to do.\nAnd, for that is, also, we are going to assume\nthat the number of slots is a",
    "start": "2358687",
    "end": "2368066"
  },
  {
    "text": "power of two which is also often\nvery convenient. OK, and for this,\nwe're going to assume that the",
    "start": "2368066",
    "end": "2377444"
  },
  {
    "text": "computer has w bit words.\nSo, it would be convenient on a",
    "start": "2377445",
    "end": "2384773"
  },
  {
    "text": "computer with 32 bits,\nor 64 bits, for example.",
    "start": "2384773",
    "end": "2390373"
  },
  {
    "text": "OK, this would be very\nconvenient. So, the hash function is the\nfollowing.",
    "start": "2390373",
    "end": "2399017"
  },
  {
    "text": "h of k is equal to A times k\nmod, two to the w,",
    "start": "2399017",
    "end": "2404617"
  },
  {
    "text": "right shifted by w minus r.\nOK, so the key part of this is",
    "start": "2404617",
    "end": "2412564"
  },
  {
    "text": "A, which has chosen to be an odd\ninteger in the range between two",
    "start": "2412564",
    "end": "2420168"
  },
  {
    "text": "to the w minus one and two to\nthe w. OK, so it's an odd integer that\nthe full width of the computer",
    "start": "2420168",
    "end": "2431574"
  },
  {
    "text": "word.\nOK, and what you do is multiply",
    "start": "2431574",
    "end": "2436809"
  },
  {
    "text": "it by whatever your key is,\nby this funny integer.",
    "start": "2436809",
    "end": "2442830"
  },
  {
    "text": "And, then take it mod two to\nthe w. And then, you take the result\nand right shift it by this fixed",
    "start": "2442830",
    "end": "2454504"
  },
  {
    "text": "amount, w minus r.\nSo, this is a bit wise right",
    "start": "2454504",
    "end": "2460156"
  },
  {
    "text": "shift.\nOK, so let's look at what this",
    "start": "2460156",
    "end": "2466791"
  },
  {
    "text": "does.\nBut first, let me just give you",
    "start": "2466791",
    "end": "2472541"
  },
  {
    "text": "a couple of tips on how you\npick, or what you don't pick for",
    "start": "2472541",
    "end": "2481965"
  },
  {
    "text": "A.\nSo, you don't pick A too close",
    "start": "2481965",
    "end": "2487076"
  },
  {
    "text": "to a power of two.\nAnd, it's generally a pretty",
    "start": "2487076",
    "end": "2494422"
  },
  {
    "text": "fast method because\nmultiplication mod two to the w",
    "start": "2494423",
    "end": "2502409"
  },
  {
    "text": "is faster than division.\nAnd the other thing is that a",
    "start": "2502409",
    "end": "2509859"
  },
  {
    "text": "right shift is fast,\nespecially because this is a known shift.\nOK, you know it before you are",
    "start": "2509860",
    "end": "2515636"
  },
  {
    "text": "computing the hash function.\nBoth w and r are known in advance.\nSo, the compiler can often do",
    "start": "2515636",
    "end": "2522917"
  },
  {
    "text": "tricks there to make it go even\nfaster. So, let's do an example to\nunderstand how this hash",
    "start": "2522917",
    "end": "2531771"
  },
  {
    "text": "function works.\nSo, we will have, in this case,\na number of slots will be",
    "start": "2531771",
    "end": "2538814"
  },
  {
    "start": "2535000",
    "end": "2989000"
  },
  {
    "text": "eight, which is two to the\nthree. And, we'll have a bizarre word\nsize of seven bits.",
    "start": "2538814",
    "end": "2546963"
  },
  {
    "text": "Anybody know any seven bit\ncomputers out there?",
    "start": "2546963",
    "end": "2553000"
  },
  {
    "text": "OK, well, here's one.\nSo, A is our fixed value that's",
    "start": "2553000",
    "end": "2559500"
  },
  {
    "text": "used for hashing all our keys.\nAnd, in this case,",
    "start": "2559500",
    "end": "2565500"
  },
  {
    "text": "let's say it's 1011001.\nSo, that's A. And, I take in some value for k\nthat I'm going to multiply.",
    "start": "2565500",
    "end": "2577250"
  },
  {
    "text": "So, k is going to be 1101011.\nSo, that's my k.",
    "start": "2577250",
    "end": "2584000"
  },
  {
    "text": "And, I multiply them.\nWhat I multiply two, each of these is the full word\nwidth.",
    "start": "2584000",
    "end": "2590480"
  },
  {
    "text": "You can view it as the full\nword width of the machine, in this case,\nseven bits.",
    "start": "2590480",
    "end": "2596960"
  },
  {
    "text": "So, in general,\nthis would be like a 32 bit number, and my key,\nI'd be multiplying two 32 bit",
    "start": "2596960",
    "end": "2604534"
  },
  {
    "text": "numbers, for example.\nOK, and so, when I multiply that out, I get a 2w bit answer.\nSo, when you multiply two w bit",
    "start": "2604534",
    "end": "2613876"
  },
  {
    "text": "numbers, you get a 2w bit\nanswer. In this case,\nit happens to be that number,",
    "start": "2613876",
    "end": "2624621"
  },
  {
    "text": "OK?\nSo, that's the product part, OK?\nAnd then we take it mod two to",
    "start": "2624621",
    "end": "2634711"
  },
  {
    "text": "the w.\nWell, what mod two to the w",
    "start": "2634711",
    "end": "2639913"
  },
  {
    "text": "says is that I'm just taking,\nignoring the high order bits of",
    "start": "2639914",
    "end": "2649373"
  },
  {
    "text": "this product.\nSo, all of these are ignored,",
    "start": "2649373",
    "end": "2656912"
  },
  {
    "text": "because, remember that if I\ntake something,",
    "start": "2656912",
    "end": "2662579"
  },
  {
    "text": "mod, a power of two,\nthat's just the low order bits.",
    "start": "2662579",
    "end": "2670000"
  },
  {
    "text": "So, I just get these low order\nbits as being the mod. And then, the right shift\noperation, and that's good also,",
    "start": "2670000",
    "end": "2678042"
  },
  {
    "text": "by the way, because a lot of\nmachines, when I multiply two 32 bit numbers, they'll have an\ninstruction that gives you just",
    "start": "2678042",
    "end": "2686823"
  },
  {
    "text": "the 32 lower bits.\nAnd, it's usually an instruction that's faster than\nthe instruction that gives you",
    "start": "2686823",
    "end": "2694054"
  },
  {
    "text": "the full 64 bit answer.\nOK, so, that's very convenient. And, the second thing is,\nthen, that I want just the,",
    "start": "2694054",
    "end": "2701875"
  },
  {
    "text": "in this case,\nthree bits that are the high order bits of this word.\nSo, this ends up being my H of",
    "start": "2701875",
    "end": "2711195"
  },
  {
    "text": "k.\nAnd these end up getting removed by right shifting this\nword over.",
    "start": "2711196",
    "end": "2718227"
  },
  {
    "text": "So, you just right shift that\nin, zeros come in,",
    "start": "2718227",
    "end": "2723234"
  },
  {
    "text": "in a high order bit,\nand you end up getting that",
    "start": "2723234",
    "end": "2728242"
  },
  {
    "text": "value of H of k.\nOK, so to understand what's going on here,\nwhy this is a pretty good",
    "start": "2728242",
    "end": "2736978"
  },
  {
    "text": "method, or what's happening with\nit, you can imagine that one way",
    "start": "2736978",
    "end": "2743796"
  },
  {
    "text": "to think about it is to think of\nA as being a binary fraction.",
    "start": "2743796",
    "end": "2752000"
  },
  {
    "text": "So, imagine that the decimal\npoint is here, sorry, the binary point,\nOK, the radix point is here.",
    "start": "2752000",
    "end": "2760000"
  },
  {
    "text": "Then when I multiply things,\nI'm just taking, the binary point ends up being\nthere.",
    "start": "2760000",
    "end": "2766181"
  },
  {
    "text": "OK, so if you just imagine that\nconceptually, we don't have to actually put\nthis into the hardware because",
    "start": "2766181",
    "end": "2774139"
  },
  {
    "text": "we just do what the hardware\ndoes. But, I can imagine that it's\nthere, and that it's here.",
    "start": "2774139",
    "end": "2780860"
  },
  {
    "text": "And so, what I'm really taking\nis the fractional part of this product if I treat A as a\nfraction of a number.",
    "start": "2780860",
    "end": "2789050"
  },
  {
    "text": "So, we can certainly look at\nthat as sort of a modular wheel.",
    "start": "2789050",
    "end": "2795000"
  },
  {
    "text": "So, here I have a wheel where\nthis is going to be, that I'm going to divide into\neight parts, OK,",
    "start": "2795000",
    "end": "2803965"
  },
  {
    "text": "where this point is zero.\nAnd then, I go around, and this point is then one.\nAnd, I go around,",
    "start": "2803965",
    "end": "2812644"
  },
  {
    "text": "and this point is two,\nand so forth, so that all the integers,\nif I wrap it around this unit",
    "start": "2812644",
    "end": "2821131"
  },
  {
    "text": "wheel, all the integers lined up\nat the zero point here,",
    "start": "2821132",
    "end": "2826378"
  },
  {
    "text": "OK?\nAnd then, we can divide this into the fractional pieces.\nSo, that's essentially the zero",
    "start": "2826378",
    "end": "2834753"
  },
  {
    "text": "point.\nThis is the one eighth, because we are dividing into\neight, two, three,",
    "start": "2834753",
    "end": "2840643"
  },
  {
    "text": "four, five, six,\nseven. So, if I have one times A,\nin this case,",
    "start": "2840643",
    "end": "2848318"
  },
  {
    "text": "I'm basically saying,\nwell, one times A,",
    "start": "2848318",
    "end": "2853636"
  },
  {
    "text": "if I multiply,\nis basically going around to",
    "start": "2853636",
    "end": "2859363"
  },
  {
    "text": "about there, five and a half I\nthink, right,",
    "start": "2859363",
    "end": "2865227"
  },
  {
    "text": "because one times A is about\nfive and a half,",
    "start": "2865227",
    "end": "2871227"
  },
  {
    "text": "OK, or five halves of 5.5\neighths, essentially.",
    "start": "2871227",
    "end": "2879000"
  },
  {
    "text": "So, it takes me about to there.\nThat's A.",
    "start": "2879000",
    "end": "2884063"
  },
  {
    "text": "And, if I do 2^A,\nthat continues around, and takes me up to about,\nwhere?",
    "start": "2884063",
    "end": "2892924"
  },
  {
    "text": "About, a little past three,\nabout to there.",
    "start": "2892924",
    "end": "2898240"
  },
  {
    "text": "So, that's 2^A.\nOK, and 3^A takes me, then, around to somewhere like\nabout there.",
    "start": "2898240",
    "end": "2908113"
  },
  {
    "text": "So, each time I add another A,\nit's taking me another A's",
    "start": "2908113",
    "end": "2915202"
  },
  {
    "text": "distance around.\nAnd, the idea is that if A is,",
    "start": "2915202",
    "end": "2921471"
  },
  {
    "text": "for example,\nodd, and it's not too close to a power of two,\nthen what's happening is sort",
    "start": "2921471",
    "end": "2928557"
  },
  {
    "text": "of throwing it into another slot\non a different thing. So, if I now go around,\nif I have k being very big,",
    "start": "2928558",
    "end": "2937044"
  },
  {
    "text": "then k times A is going around\nk times. Where does it end up?\nIt's like spinning a wheel of",
    "start": "2937044",
    "end": "2944189"
  },
  {
    "text": "fortune or something.\nOK, it ends somewhere. OK, and so that's basically the\nnotion.",
    "start": "2944189",
    "end": "2949356"
  },
  {
    "text": "That's basically the notion,\nthat it's going to end up in some place.\nSo, you're basically looking",
    "start": "2949356",
    "end": "2955416"
  },
  {
    "text": "at, where does ka end up?\nWell, it sort of whirls around, and ends up at some point.\nOK, and so that's why that",
    "start": "2955416",
    "end": "2962305"
  },
  {
    "text": "tends to be a fairly good one.\nBut, these are only heuristic methods for hashing,\nbecause for any hash function,",
    "start": "2962305",
    "end": "2969258"
  },
  {
    "text": "you can always find a set of\nkeys that's going to make it operate badly.\nSo, the question is,",
    "start": "2969258",
    "end": "2978660"
  },
  {
    "text": "well, what do you use in\npractice?",
    "start": "2978660",
    "end": "2984699"
  },
  {
    "text": "OK, the second topic that I\nwant to tie it,",
    "start": "2984699",
    "end": "2992385"
  },
  {
    "start": "2989000",
    "end": "3335000"
  },
  {
    "text": "so, we talked about resolving\ncollisions by chaining.",
    "start": "2992385",
    "end": "3003000"
  },
  {
    "text": "OK, there's another way of\nresolving collisions,",
    "start": "3003000",
    "end": "3011024"
  },
  {
    "text": "which is often useful,\nwhich is resolving collisions",
    "start": "3011024",
    "end": "3019731"
  },
  {
    "text": "by what's called open\naddressing.",
    "start": "3019731",
    "end": "3025195"
  },
  {
    "text": "OK, and the idea is,\nin this method,",
    "start": "3025195",
    "end": "3031170"
  },
  {
    "text": "is we have no storage for\nlinks.",
    "start": "3031170",
    "end": "3038000"
  },
  {
    "text": "So, when I result by chaining,\nI'd need an extra linked field",
    "start": "3038000",
    "end": "3043704"
  },
  {
    "text": "in each record in order to be\nable to do that. Now, that's not necessarily a\nbig overhead,",
    "start": "3043704",
    "end": "3051976"
  },
  {
    "text": "but for some applications,\nI don't want to have to touch",
    "start": "3051977",
    "end": "3057206"
  },
  {
    "text": "those records at all.\nOK, and for those, open addressing is a useful way\nto resolve collisions.",
    "start": "3057206",
    "end": "3067000"
  },
  {
    "text": "So, the idea is,\nwith open addressing, is if I hash to a given slot,\nand the slot is full,",
    "start": "3067000",
    "end": "3075869"
  },
  {
    "text": "OK, what I do is I just hash\nagain with a different hash",
    "start": "3075870",
    "end": "3081478"
  },
  {
    "text": "function, with my second hash\nfunction. I check that slot.\nOK, if that slot is full,",
    "start": "3081478",
    "end": "3089737"
  },
  {
    "text": "OK, then I hash again.\nAnd, I keep this probe sequence, which hopefully is a\npermutation so that I'm not",
    "start": "3089737",
    "end": "3099094"
  },
  {
    "text": "going back and checking things\nthat I've already checked until I find a place to put it.\nAnd, if I got a good probe",
    "start": "3099094",
    "end": "3107735"
  },
  {
    "text": "sequence that I will hopefully,\nthen, find a place to put it fairly quickly.\nOK, and then to search,",
    "start": "3107735",
    "end": "3115219"
  },
  {
    "text": "I just follow the same probe\nsequence. So, the idea,\nhere, is we probe the table",
    "start": "3115219",
    "end": "3125367"
  },
  {
    "text": "systematically until an empty\nslot is found,",
    "start": "3125367",
    "end": "3132212"
  },
  {
    "text": "OK?\nAnd so, we can extend that by",
    "start": "3132212",
    "end": "3137306"
  },
  {
    "text": "looking as if the sequence of\nhash functions were,",
    "start": "3137306",
    "end": "3145106"
  },
  {
    "text": "in fact, a hash function that\ntook two arguments:",
    "start": "3145106",
    "end": "3152745"
  },
  {
    "text": "a key and a probe step.\nIn other words,",
    "start": "3152746",
    "end": "3160041"
  },
  {
    "text": "is it the zero of one our first\none? It's the second one,\netc.",
    "start": "3160041",
    "end": "3168073"
  },
  {
    "text": "So, it takes two arguments.\nSo, H is then going to map our",
    "start": "3168073",
    "end": "3175832"
  },
  {
    "text": "universe of keys cross,\nour probe number into a slot.",
    "start": "3175832",
    "end": "3184000"
  },
  {
    "text": "So, this is the universe of\nkeys.",
    "start": "3184000",
    "end": "3190114"
  },
  {
    "text": "This is the probe number.\nAnd, this is going to be the",
    "start": "3190114",
    "end": "3200242"
  },
  {
    "text": "slot.\nNow, as I mentioned, the probe sequence should be\npermutation.",
    "start": "3200242",
    "end": "3214000"
  },
  {
    "text": "In other words,\nit should just be the numbers from zero to n minus one in some\nfairly random order.",
    "start": "3214000",
    "end": "3224545"
  },
  {
    "text": "OK, it should just be\nrearranged. And the other thing about open\naddressing is that you don't",
    "start": "3224545",
    "end": "3234431"
  },
  {
    "text": "have to worry about n chaining\nis that the table may actually",
    "start": "3234431",
    "end": "3241022"
  },
  {
    "text": "fill up.\nSo, you have to have that the number of elements in the table\nis less than or equal to the",
    "start": "3241022",
    "end": "3250780"
  },
  {
    "text": "table size, the number of slots\nbecause the table may fill up.",
    "start": "3250780",
    "end": "3256173"
  },
  {
    "text": "And, if it's full,\nyou're going to probe everywhere.\nYou are never going to get a",
    "start": "3256173",
    "end": "3263070"
  },
  {
    "text": "place to put it.\nAnd, the final thing is that in this type of scheme,\ndeletion is difficult.",
    "start": "3263070",
    "end": "3272000"
  },
  {
    "text": "It's not impossible.\nThere are schemes for doing deletion.\nBut, it's basically hard because the danger is that you\nremove a key out of the table,",
    "start": "3272000",
    "end": "3280560"
  },
  {
    "text": "and now, somebody who's doing a\nprobe sequence who would have hit that key and gone to find\nhis element now finds that it's",
    "start": "3280560",
    "end": "3287897"
  },
  {
    "text": "an empty slot.\nAnd he says, oh, the key I am looking for\nprobably isn't there. OK, so you have that issue to\ndeal with.",
    "start": "3287897",
    "end": "3294867"
  },
  {
    "text": "So, you can delete things but\nkeep them marked, and there's all kinds of\nschemes that people have for",
    "start": "3294867",
    "end": "3300859"
  },
  {
    "text": "doing deletion.\nBut it's difficult. It's messy compared to\nchaining, where you can just",
    "start": "3300859",
    "end": "3307599"
  },
  {
    "text": "remove the element out of the\nchain. So, let's do an example --",
    "start": "3307599",
    "end": "3312000"
  },
  {
    "text": "-- just so that we make sure\nwe're on the same page.",
    "start": "3325000",
    "end": "3337446"
  },
  {
    "text": "So, we'll insert a key.\nk is 496.",
    "start": "3337446",
    "end": "3345255"
  },
  {
    "text": "OK, so here's my table.\nAnd, I've got some values in",
    "start": "3345255",
    "end": "3357702"
  },
  {
    "text": "it, 586, 133,\n204, 481, etc.",
    "start": "3357702",
    "end": "3366000"
  },
  {
    "text": "So, the table looks like that;\nthe other places are empty.",
    "start": "3366000",
    "end": "3373328"
  },
  {
    "text": "So, on my zero step,\nI probe H of 496, zero.\nOK, and let's say that takes me",
    "start": "3373328",
    "end": "3382713"
  },
  {
    "text": "to the slot where there's 204.\nAnd so, I say,",
    "start": "3382714",
    "end": "3388371"
  },
  {
    "text": "oh, there's something there.\nI have to probe again.",
    "start": "3388371",
    "end": "3396411"
  },
  {
    "text": "So then, I probe H of 496,\none. Maybe that maps me there,\nand I discover,",
    "start": "3396411",
    "end": "3407266"
  },
  {
    "text": "oh, there's something there.\nSo, now, I probe H of 496,",
    "start": "3407267",
    "end": "3415641"
  },
  {
    "text": "two.\nMaybe that takes me to there.",
    "start": "3415641",
    "end": "3422000"
  },
  {
    "text": "It's empty.\nSo, if I'm doing a search, I report nil.\nIf I'm doing in the insert,",
    "start": "3422000",
    "end": "3427942"
  },
  {
    "text": "I put it there.\nAnd then, if I'm looking for that value, if I put it there,\nthen when I'm looking,",
    "start": "3427942",
    "end": "3435273"
  },
  {
    "text": "I go through exactly the same\nsequence. I'll find these things are\nbusy, and then,",
    "start": "3435273",
    "end": "3441369"
  },
  {
    "text": "eventually, I'll come up and\ndiscover the value. OK, and there are various\nheuristics that people use,",
    "start": "3441369",
    "end": "3449859"
  },
  {
    "text": "as well, like keeping track of\nthe longest probe sequence because there's no point in\nprobing beyond the largest",
    "start": "3449859",
    "end": "3457949"
  },
  {
    "text": "number of probes that need to be\ndone globally to do an insertion.\nOK, so if it took me 5,",
    "start": "3457949",
    "end": "3464406"
  },
  {
    "text": "5 is the maximum number of\nprobes I ever did for an insertion.\nA search never has to look more",
    "start": "3464406",
    "end": "3471160"
  },
  {
    "text": "than five, OK,\nand so sometimes hash tables will keep that auxiliary value\nso that it can quit rather than",
    "start": "3471160",
    "end": "3478804"
  },
  {
    "text": "continuing to probe until it\ndoesn't find something.",
    "start": "3478804",
    "end": "3484000"
  },
  {
    "text": "OK, so, search is the same\nprobe sequence.",
    "start": "3484000",
    "end": "3493389"
  },
  {
    "text": "And, if it's successful,\nit finds the record.",
    "start": "3493389",
    "end": "3503464"
  },
  {
    "text": "And, if it's unsuccessful,\nyou find a nil.",
    "start": "3503465",
    "end": "3514000"
  },
  {
    "text": "OK, so it's pretty\nstraightforward. So, once again,\nas with just hash functions to",
    "start": "3514000",
    "end": "3522506"
  },
  {
    "text": "begin with, there are a lot of\nideas about how you should form",
    "start": "3522507",
    "end": "3529076"
  },
  {
    "text": "a probe sequence,\nways of doing this effectively.",
    "start": "3529076",
    "end": "3535000"
  },
  {
    "text": "OK, so the simplest one is\ncalled linear probing,",
    "start": "3546000",
    "end": "3554150"
  },
  {
    "text": "and what you do there is you\nhave H of k comma i.",
    "start": "3554150",
    "end": "3562300"
  },
  {
    "text": "You just make that be some H\nprime of k, zero plus i mod m.",
    "start": "3562301",
    "end": "3573000"
  },
  {
    "text": "Sorry, no prime there.\nOK, so what happens is, so, the idea here is that all\nyou are doing on the I'th probe",
    "start": "3573000",
    "end": "3581056"
  },
  {
    "text": "is, on the zero'th probe,\nyou look at H of k zero. On probe one,\nyou just look at the slot after",
    "start": "3581056",
    "end": "3588191"
  },
  {
    "text": "that.\nProbe two, you look at the slot after that.\nSo, you're just simply,",
    "start": "3588191",
    "end": "3593561"
  },
  {
    "text": "rather than sort of jumping\naround like this, you probe there and then just\nfind the next one that will fit",
    "start": "3593562",
    "end": "3601542"
  },
  {
    "text": "in.\nOK, so you just scan down mod m.\nSo, if you hit the bottom, you go to the top.\nOK, so the I'th one,",
    "start": "3601542",
    "end": "3608848"
  },
  {
    "text": "so that's fairly easy to do\nbecause you don't have to recomputed a full hash function\neach time.",
    "start": "3608848",
    "end": "3614574"
  },
  {
    "text": "All you have to do is add one\neach time you go because the difference between this and the\nprevious one is just one.",
    "start": "3614574",
    "end": "3621531"
  },
  {
    "text": "OK, so you just go down.\nNow, the problem with that is that you get a phenomenon of\nclustering.",
    "start": "3621531",
    "end": "3627194"
  },
  {
    "text": "If you get a few things in a\ngiven area, then suddenly everything, everybody has to\nkeep searching to the end of",
    "start": "3627195",
    "end": "3633906"
  },
  {
    "text": "those things.\nOK, so that turns out not to be one of the better schemes,\nalthough it's not bad if you",
    "start": "3633906",
    "end": "3642246"
  },
  {
    "text": "just need to do something quick\nand dirty. So, it suffers from primary\nclustering, where regions of the",
    "start": "3642246",
    "end": "3649594"
  },
  {
    "text": "hash table get very full.\nAnd then, anything that hashes into that region has to look\nthrough all the stuff that's",
    "start": "3649594",
    "end": "3657750"
  },
  {
    "text": "there.\nOK, so: long runs of filled slots.\nOK, there's also things like",
    "start": "3657750",
    "end": "3665846"
  },
  {
    "text": "quadratic clustering,\nwhere you basically make this",
    "start": "3665846",
    "end": "3671459"
  },
  {
    "text": "be, instead of adding one each\ntime, you add i each time.",
    "start": "3671459",
    "end": "3677744"
  },
  {
    "text": "OK, but probably the most\neffective popular scheme is",
    "start": "3677744",
    "end": "3683580"
  },
  {
    "text": "what's called double hashing.\nAnd, you can do statistical",
    "start": "3683581",
    "end": "3689867"
  },
  {
    "text": "studies.\nPeople have done statistical",
    "start": "3689867",
    "end": "3695714"
  },
  {
    "text": "studies to show that this is a\ngood scheme, OK,",
    "start": "3695715",
    "end": "3701819"
  },
  {
    "text": "where you let H of k,\ni, let me do it below here",
    "start": "3701819",
    "end": "3708056"
  },
  {
    "text": "because I have for them.\nSo, H of k, i is equal to an",
    "start": "3708056",
    "end": "3714956"
  },
  {
    "text": "H_1 of k plus i times H_2 of k.\nSo, you have two hash functions",
    "start": "3714957",
    "end": "3723467"
  },
  {
    "text": "on m.\nYou have two hash functions, H_1 of k and H_2 of k.\nOK, so you compute the two hash",
    "start": "3723467",
    "end": "3733085"
  },
  {
    "text": "functions, and what you do is\nyou start by just using H_1 of k",
    "start": "3733085",
    "end": "3739907"
  },
  {
    "text": "for the zero probe,\nbecause here, i, then, will be zero.\nOK.",
    "start": "3739907",
    "end": "3746282"
  },
  {
    "text": "Then, for the probe number one,\nOK, you just add H_2 of k.",
    "start": "3746282",
    "end": "3754000"
  },
  {
    "text": "For probe number two,\nyou just add that hash function amount again.\nYou just keep adding H_2 of k",
    "start": "3754000",
    "end": "3760266"
  },
  {
    "text": "for each successive probe you\nmake. So, it's fairly easy;\nyou compute two hash functions",
    "start": "3760266",
    "end": "3765932"
  },
  {
    "text": "up front, OK,\nor you can delay the second one, in case.\nBut basically, you compute two up front,\nand then you just keep adding",
    "start": "3765933",
    "end": "3774000"
  },
  {
    "text": "the second one in.\nYou start at the location of the first one,\nand keep adding the second one,",
    "start": "3774000",
    "end": "3780066"
  },
  {
    "text": "mod m, to determine your probe\nsequences. So, this is an excellent\nmethod.",
    "start": "3780066",
    "end": "3787757"
  },
  {
    "text": "OK, it does a fine job,\nand you usually pick m to be a",
    "start": "3787757",
    "end": "3794181"
  },
  {
    "text": "power of two here,\nOK, so that you're using,",
    "start": "3794181",
    "end": "3799392"
  },
  {
    "text": "usually people use this with\nthe multiplication method,",
    "start": "3799393",
    "end": "3805939"
  },
  {
    "text": "for example,\nso that m is a power of two, and H_2 of k you force to be\nodd.",
    "start": "3805939",
    "end": "3816000"
  },
  {
    "text": "OK, so we don't use and even\nvalue there, because otherwise for any particular key,\nyou'd be skipping over.",
    "start": "3816000",
    "end": "3824210"
  },
  {
    "text": "Once again, you would have the\nproblem that everything could be even, or everything could be odd\nas you're going through.",
    "start": "3824210",
    "end": "3833526"
  },
  {
    "text": "But, if you make H_2 of k odd,\nand m is a power of two, you are guaranteed to hit every\nslot.",
    "start": "3833526",
    "end": "3840631"
  },
  {
    "text": "OK, so let's analyze this\nscheme. This turns out to be a pretty\ninteresting scheme to analyze.",
    "start": "3840631",
    "end": "3849000"
  },
  {
    "text": "It's got some nice math in it.\nSo, once again,",
    "start": "3849000",
    "end": "3854080"
  },
  {
    "text": "in the worst case,\nhashing is lousy. So, we're going to analyze\naverage case.",
    "start": "3854080",
    "end": "3863000"
  },
  {
    "text": "OK, and for this,\nwe need a little bit stronger",
    "start": "3875000",
    "end": "3885615"
  },
  {
    "text": "assumption than for chaining.\nAnd, we call it the assumption",
    "start": "3885615",
    "end": "3899230"
  },
  {
    "text": "of uniform hashing,\nwhich says that each key is",
    "start": "3899230",
    "end": "3909846"
  },
  {
    "text": "equally likely,\nOK, to have any one of the m",
    "start": "3909846",
    "end": "3919769"
  },
  {
    "text": "factorial permutations as its\nprobe sequence,",
    "start": "3919769",
    "end": "3932000"
  },
  {
    "text": "independent of other keys.",
    "start": "3932000",
    "end": "3934000"
  },
  {
    "text": "And, the theorem we're going to\nprove is that the expected",
    "start": "3945000",
    "end": "3955291"
  },
  {
    "text": "number of probes is,\nat most, one over one minus",
    "start": "3955291",
    "end": "3963777"
  },
  {
    "text": "alpha if alpha is less than one,\nOK,",
    "start": "3963777",
    "end": "3971000"
  },
  {
    "text": "that is, if the number of keys\nin the table is less than number",
    "start": "3971000",
    "end": "3977000"
  },
  {
    "text": "of slots.\nOK, so we're going to show that the number of probes is one over\none minus alpha.",
    "start": "3977000",
    "end": "3986000"
  },
  {
    "text": "So, alpha is the load factor,\nand of course, for open addressing,\nwe want the load factor to be",
    "start": "3994000",
    "end": "4004057"
  },
  {
    "text": "less than one because if we have\nmore keys than slots,",
    "start": "4004057",
    "end": "4009851"
  },
  {
    "text": "open addressing simply doesn't\nwork, OK, because you've got to",
    "start": "4009852",
    "end": "4016520"
  },
  {
    "text": "find a place for every key in\nthe table. So, the proof,\nwe'll look at an unsuccessful",
    "start": "4016520",
    "end": "4025484"
  },
  {
    "text": "search, OK?\nSo, the first thing is that one",
    "start": "4025485",
    "end": "4032908"
  },
  {
    "text": "probe is always necessary.\nOK, so if I have n over m,",
    "start": "4032908",
    "end": "4041140"
  },
  {
    "text": "sorry, if I have n items stored\nin m slots, what's the",
    "start": "4041141",
    "end": "4049533"
  },
  {
    "text": "probability that when I do that\nprobe I get a collision with",
    "start": "4049533",
    "end": "4058875"
  },
  {
    "text": "something that's already in the\ntable?",
    "start": "4058875",
    "end": "4066000"
  },
  {
    "text": "What's the probability that I\nget a collision?",
    "start": "4066000",
    "end": "4071526"
  },
  {
    "text": "Yeah?\nYeah, n over m, right?\nSo, with probability,",
    "start": "4071526",
    "end": "4077297"
  },
  {
    "text": "n over m, we have a collision\nbecause my table has got n",
    "start": "4077298",
    "end": "4084052"
  },
  {
    "text": "things in there.\nI'm hashing, at random, to one of them.\nOK, so, what are the odds I hit",
    "start": "4084052",
    "end": "4095551"
  },
  {
    "text": "something, n over m?\nAnd then, a second probe is",
    "start": "4095551",
    "end": "4101376"
  },
  {
    "text": "necessary.\nOK, so then, I do a second probe.\nAnd, with what probability on",
    "start": "4101376",
    "end": "4110174"
  },
  {
    "text": "the second probe do I get a\ncollision?",
    "start": "4110175",
    "end": "4116000"
  },
  {
    "text": "So, we're going to make the\nassumption of uniform hashing. Each key is equally likely to\nhave any one of the m factorial",
    "start": "4116000",
    "end": "4124536"
  },
  {
    "text": "permutations as its probe\nsequence. So, what is the probability\nthat on the second probe,",
    "start": "4124536",
    "end": "4130811"
  },
  {
    "text": "OK, I get a collision?",
    "start": "4130811",
    "end": "4133000"
  },
  {
    "text": "Yeah?\nIf it's a permutation, you're not, right?\nSomething like that.",
    "start": "4150000",
    "end": "4161504"
  },
  {
    "text": "What is it exactly?\nSo, that's the question.",
    "start": "4161504",
    "end": "4170000"
  },
  {
    "text": "OK, so you are not going to hit\nthe same slot because it's going",
    "start": "4170000",
    "end": "4175478"
  },
  {
    "text": "to be a permutation.\nYeah? That's exactly right.\nn minus one over m minus one",
    "start": "4175478",
    "end": "4181913"
  },
  {
    "text": "because I'm now,\nI've essentially eliminated that slot that I hit the first\ntime.",
    "start": "4181913",
    "end": "4188694"
  },
  {
    "text": "And so, I have,\nnow, and there was a key there. So, now I'm essentially\nlooking, at random,",
    "start": "4188695",
    "end": "4196346"
  },
  {
    "text": "into the remaining n minus one\nslots where there are aggregately n minus one keys in\nthose slots.",
    "start": "4196347",
    "end": "4206000"
  },
  {
    "text": "OK, everybody got that?\nOK, so with that probability,",
    "start": "4206000",
    "end": "4211306"
  },
  {
    "text": "I get a collision.\nThat means that I need a third probe necessary,\nOK?",
    "start": "4211306",
    "end": "4218142"
  },
  {
    "text": "And, we keep going on.\nOK, so what is it going to be",
    "start": "4218142",
    "end": "4223346"
  },
  {
    "text": "the next time?\nYeah, it's going to be n minus two over m minus two.\nSo, let's note,",
    "start": "4223346",
    "end": "4233939"
  },
  {
    "text": "OK, that n minus i over m minus\ni is less than n over m,",
    "start": "4233939",
    "end": "4244716"
  },
  {
    "text": "which equals alpha,\nOK? So, n minus i over m minus i is\nless than n over m.",
    "start": "4244716",
    "end": "4260000"
  },
  {
    "text": "And, the way you can sort of\nreason that is that if n is less",
    "start": "4260000",
    "end": "4265505"
  },
  {
    "text": "than m, I'm subtracting a larger\nfraction of n when I subtract i",
    "start": "4265505",
    "end": "4271287"
  },
  {
    "text": "than I am subtracting a fraction\nof m. OK, so therefore,\nn minus i over m minus i is",
    "start": "4271287",
    "end": "4278720"
  },
  {
    "text": "going to be less than n over m.\nOK, so, or you can do the",
    "start": "4278720",
    "end": "4283858"
  },
  {
    "text": "algebra.\nI think it's always helpful when you do algebra to sort of\nthink about it sort of",
    "start": "4283858",
    "end": "4291842"
  },
  {
    "text": "quantitatively as well,\nyou know, qualitatively what's going on.\nSo, the expected number of",
    "start": "4291842",
    "end": "4302119"
  },
  {
    "text": "probes is, then,\ngoing to be equal to, it's going to be equal to\nbecause we're going to need some",
    "start": "4302119",
    "end": "4313399"
  },
  {
    "text": "space, well, we have one which\nis forced because we've got to",
    "start": "4313399",
    "end": "4320600"
  },
  {
    "text": "do one probe,\nplus with probability n over m,",
    "start": "4320600",
    "end": "4329308"
  },
  {
    "text": "I have to do another probe plus\nwith probability of n over m",
    "start": "4329308",
    "end": "4341313"
  },
  {
    "text": "minus one I have to do another\nprobe up until I do one plus one",
    "start": "4341313",
    "end": "4353930"
  },
  {
    "text": "over m minus n.\nOK, so each one is cascading",
    "start": "4353930",
    "end": "4360276"
  },
  {
    "text": "what's happened.\nIn the book, there is a more rigorous proof\nof this using indicator random",
    "start": "4360276",
    "end": "4367432"
  },
  {
    "text": "variables.\nI'm going to give you the short version.\nOK, so basically,",
    "start": "4367432",
    "end": "4372800"
  },
  {
    "text": "this is my first probe.\nWith probability n over m, I had to do a second one.\nAnd, the result of that is that",
    "start": "4372800",
    "end": "4381338"
  },
  {
    "text": "with probability n minus one\nover m minus one, I have to do another.\nAnd, with probability n over",
    "start": "4381338",
    "end": "4388982"
  },
  {
    "text": "two minus m over two,\nI have to do another, and so forth.\nSo, that's how many probes I'm",
    "start": "4388982",
    "end": "4398857"
  },
  {
    "text": "going to end up doing.\nSo, this is less than or equal",
    "start": "4398857",
    "end": "4405542"
  },
  {
    "text": "to one plus alpha.\nThere's one plus alpha times",
    "start": "4405542",
    "end": "4411457"
  },
  {
    "text": "one plus alpha times one plus\nalpha, OK, just using the fact",
    "start": "4411457",
    "end": "4419042"
  },
  {
    "text": "that I had here.\nOK, and that is less than or",
    "start": "4419042",
    "end": "4425536"
  },
  {
    "text": "equal to one plus I just\nmultiply through here.",
    "start": "4425536",
    "end": "4431347"
  },
  {
    "text": "Alpha plus alpha squared plus\nalpha cubed plus k.",
    "start": "4431347",
    "end": "4437410"
  },
  {
    "text": "I can just take that out to\ninfinity. It's going to bound this.\nOK, does everybody see the math",
    "start": "4437410",
    "end": "4450206"
  },
  {
    "text": "there?\nOK, and that is just the sum, I, equals zero to infinity,\nalpha to the I,",
    "start": "4450206",
    "end": "4460653"
  },
  {
    "text": "which is equal to one over one\nminus alpha using your familiar",
    "start": "4460653",
    "end": "4468928"
  },
  {
    "text": "geometric series bound.\nOK, and there's also,",
    "start": "4468929",
    "end": "4474615"
  },
  {
    "text": "in the textbook,\nan analysis of the successful search, which,\nonce again, is a little bit",
    "start": "4474615",
    "end": "4481230"
  },
  {
    "text": "more technical because you have\nto worry about what the distribution is that you happen\nto have in the table when you",
    "start": "4481230",
    "end": "4490000"
  },
  {
    "text": "are searching for something\nthat's already in the table. But, it turns out it's also\nbounded by one over one minus",
    "start": "4490000",
    "end": "4498538"
  },
  {
    "text": "alpha.\nSo, let's just look to see what",
    "start": "4498538",
    "end": "4504920"
  },
  {
    "text": "that means.\nSo, if alpha is less than one",
    "start": "4504920",
    "end": "4511269"
  },
  {
    "text": "is a constant,\nit implies that it takes order",
    "start": "4511269",
    "end": "4518253"
  },
  {
    "text": "one probes.\nOK, so if alpha is a constant,",
    "start": "4518253",
    "end": "4524760"
  },
  {
    "text": "it takes order one probes.\nOK, but it's helpful to",
    "start": "4524761",
    "end": "4533621"
  },
  {
    "text": "understand what's happening with\nthe constant.",
    "start": "4533621",
    "end": "4540706"
  },
  {
    "text": "So, for example,\nif the table is 50% full,",
    "start": "4540706",
    "end": "4547161"
  },
  {
    "text": "so alpha is a half,\nwhat's the expected number of",
    "start": "4547161",
    "end": "4554719"
  },
  {
    "text": "probes by this analysis?\nTwo, because one over one minus",
    "start": "4554719",
    "end": "4563378"
  },
  {
    "text": "a half is two.\nIf I let the table fill up to",
    "start": "4563378",
    "end": "4571531"
  },
  {
    "text": "90%, how many probes do I need\non average?",
    "start": "4571531",
    "end": "4577936"
  },
  {
    "text": "Ten.\nSo, you can see that as you fill up the table,\nthe cost is going dramatically,",
    "start": "4577937",
    "end": "4590436"
  },
  {
    "text": "OK?\nAnd so, typically, you don't let the table get too\nfull.",
    "start": "4590437",
    "end": "4597865"
  },
  {
    "text": "OK, you don't want to be\npushing 99.9% utilization.",
    "start": "4597865",
    "end": "4603297"
  },
  {
    "text": "Oh, I got this great hash table\nthat's got full utilization.",
    "start": "4603297",
    "end": "4609706"
  },
  {
    "text": "It's like, yeah,\nand it's slow. It's really,\nreally slow,",
    "start": "4609706",
    "end": "4615571"
  },
  {
    "text": "OK, because as alpha approaches\none, the time is approaching and",
    "start": "4615571",
    "end": "4622415"
  },
  {
    "text": "essentially m,\nor n. Good.\nSo, next time,",
    "start": "4622415",
    "end": "4628050"
  },
  {
    "text": "we are going to address head-on\nin what was one of the most,",
    "start": "4628050",
    "end": "4634419"
  },
  {
    "text": "I think, interesting ideas in\nalgorithms. We are going to talk about how\nyou solve this problem that no",
    "start": "4634419",
    "end": "4645213"
  },
  {
    "text": "matter what hash function you\npick, there's a bad set of keys.",
    "start": "4645213",
    "end": "4651798"
  },
  {
    "text": "OK, so next time we're going to\nshow that there are ways of",
    "start": "4651798",
    "end": "4658057"
  },
  {
    "text": "confronting that problem,\nvery clever ways. And we use a lot of math for it\nso will be a really fun lecture.",
    "start": "4658058",
    "end": "4666792"
  }
]