[
  {
    "text": " So in case you are all\nworried that you may not be in the right class,\nyou are still in 6.033.",
    "start": "0",
    "end": "7496"
  },
  {
    "text": "If you're wondering\nwhat happened to the Indian guy who\nnormally lectures, he's sitting right over there. We are trading off lectures\nthroughout the class.",
    "start": "7496",
    "end": "16806"
  },
  {
    "text": "I'm going to do about\nthe next eight lectures up until spring break, and\nthen Hari will be back. So, my name is\nSam, and feel free",
    "start": "16806",
    "end": "23500"
  },
  {
    "text": "to address any questions\nabout the lecture to me. So today we are\ngoing to keep talking about this concept of enforcing\nmodularity that we started",
    "start": "23500",
    "end": "31070"
  },
  {
    "text": "talking about last time. ",
    "start": "31070",
    "end": "41180"
  },
  {
    "text": "So last time we saw how we could\nuse this notion of the client service model in\norder to separate",
    "start": "41180",
    "end": "51000"
  },
  {
    "text": "two modules from each other. So the idea was by running\nthe client and the service",
    "start": "51000",
    "end": "57260"
  },
  {
    "text": "on separate machines, we\ncan isolate these two things from each other. So we can make it so, for\nexample, when the client wants",
    "start": "57260",
    "end": "63670"
  },
  {
    "text": "to invoke some\noperation on the server, that the server can verify the\nrequest that the client makes,",
    "start": "63670",
    "end": "72630"
  },
  {
    "text": "and make sure that the\nclient isn't asking to do something malicious. Similarly, so this is what we\nsaw last time was this client",
    "start": "72630",
    "end": "81790"
  },
  {
    "text": "service model. And so the other benefit\nof the client service model",
    "start": "81790",
    "end": "87759"
  },
  {
    "text": "was it meant that\nwe could decouple the client from the service. So it meant that when the\nclient issued a request",
    "start": "87760",
    "end": "94070"
  },
  {
    "text": "against the service,\nit didn't necessarily",
    "start": "94070",
    "end": "99190"
  },
  {
    "text": "mean that the client, if\nthe service failed when the client issued the\nrequest, it wasn't necessarily",
    "start": "99190",
    "end": "104440"
  },
  {
    "text": "the case that the\nclient would also fail. So the server might crash\nexecuting the request,",
    "start": "104440",
    "end": "109916"
  },
  {
    "text": "and then the client\nwould get a timeout and would be able to retry. And similarly, if\nthe client failed,",
    "start": "109916",
    "end": "117520"
  },
  {
    "text": "the server could continue\nhandling requests on the behalf of other clients. OK, so that was a nice\nseparation, the ability",
    "start": "117520",
    "end": "122900"
  },
  {
    "text": "to split the client and the\nserver apart from each other. That's a good thing.",
    "start": "122900",
    "end": "128269"
  },
  {
    "text": "But the problem\nwith this approach is that we had to have\ntwo separate machines. The way we presented this was\nthat the client was running",
    "start": "128270",
    "end": "134280"
  },
  {
    "text": "on one computer,\nand the server was running on another computer. And if you think\nabout this, this",
    "start": "134280",
    "end": "140484"
  },
  {
    "text": "isn't exactly what\nwe want, right? Because that means,\nsuppose we want to build up a big, complicated\ncomputer system that's composed",
    "start": "140484",
    "end": "146230"
  },
  {
    "text": "of multiple different modules. If we have to run each\none of those modules on a separate computer, that's\nnot really very ideal, right?",
    "start": "146230",
    "end": "155237"
  },
  {
    "text": "To build up a big\nservice, we're going to need a whole\nlot of computers. And clearly, that's not the\nway that computer systems that we actually\ninteract with work.",
    "start": "155237",
    "end": "162710"
  },
  {
    "text": "So what we've seen so\nfar is this notion: we have a module per computer.",
    "start": "162710",
    "end": "170770"
  },
  {
    "text": "OK, and what we're\ngoing to do today is see how we can\ngeneralize this",
    "start": "170770",
    "end": "176940"
  },
  {
    "text": "so that instead of having\none module per computer, we can instead have\nmultiple modules running within a single computer.",
    "start": "176940",
    "end": "183250"
  },
  {
    "text": "But when we do\nthat, we still want to maintain these nice\nsort of protection benefits that we had between\nthe client and service",
    "start": "183250",
    "end": "189670"
  },
  {
    "text": "when these two things were\nrunning on separate computers. OK, so the way we\nare going to do that is by creating something\nwe call a virtual computer.",
    "start": "189670",
    "end": "199050"
  },
  {
    "text": "So -- What we're going to do\nis we're going to create this",
    "start": "199050",
    "end": "211700"
  },
  {
    "text": "notion of multiple\nvirtual computers. They're all running on\none single computer. And then we're going to run\neach one of these modules",
    "start": "211700",
    "end": "217959"
  },
  {
    "text": "within a virtual computer. OK, and I'll talk\nmore about what I mean by a virtual computer\nthroughout the next couple",
    "start": "217960",
    "end": "223950"
  },
  {
    "text": "of lectures. But the idea is that a virtual\ncomputer has exactly the same,",
    "start": "223950",
    "end": "229430"
  },
  {
    "text": "to a program that's\nrunning on it, a virtual computers\nlooks just like one of these client or server\ncomputers might have looked.",
    "start": "229430",
    "end": "236017"
  },
  {
    "text": "Now, in particular,\na virtual computer has the same sorts\nof abstractions that we studied in the previous\nlectures available to it",
    "start": "236017",
    "end": "243430"
  },
  {
    "text": "that a real computer has. So a virtual computer\nhas a virtual memory --",
    "start": "243430",
    "end": "250580"
  },
  {
    "text": "-- and a virtual processor. ",
    "start": "250580",
    "end": "258838"
  },
  {
    "text": "So, today what we're\ngoing to talk about is this notion of\na virtual memory.",
    "start": "258839",
    "end": "264810"
  },
  {
    "text": "And so you guys have\nalready probably seen the term virtual\nmemory in 6.004.",
    "start": "264810",
    "end": "269936"
  },
  {
    "text": "So, the word should\nbe familiar to you. And we're going to use\nexactly the same abstraction that we used in 6.004.",
    "start": "269936",
    "end": "275440"
  },
  {
    "text": "So we're just going to show\nhow this abstraction can be used to provide this\nprotection between the client",
    "start": "275440",
    "end": "280600"
  },
  {
    "text": "and server that we want. OK, we're also going to\nintroduce today this notion of something called a kernel.",
    "start": "280600",
    "end": "288050"
  },
  {
    "text": "And a kernel is something\nthat's in charge, basically, of managing all of these\ndifferent virtual computers that are running on our\none physical computer.",
    "start": "288050",
    "end": "295500"
  },
  {
    "text": "So the kernel is going to\nbe the sort of system that is going to be the piece of\nthe system that actually knows that there are multiple,\nvirtual computers running",
    "start": "295500",
    "end": "302403"
  },
  {
    "text": "on this system. OK, so I want to start\noff by first just talking",
    "start": "302403",
    "end": "309320"
  },
  {
    "text": "about why we want a virtualized\nmemory, why virtualizing memory is a good thing. So I'm going to abbreviate\nvirtual memory as VM.",
    "start": "309320",
    "end": "319490"
  },
  {
    "text": "So why would we want\nto virtualize memory? Well, let's see what might\nhappen if we build a computer",
    "start": "319490",
    "end": "325810"
  },
  {
    "text": "system with multiple\nmodules running on it at the same time that didn't\nhave a virtualized memory.",
    "start": "325810",
    "end": "331930"
  },
  {
    "text": "So suppose we have\nsome microprocessor and we have some memory.",
    "start": "331930",
    "end": "338590"
  },
  {
    "text": " And within this memory,\nwe have the code",
    "start": "338590",
    "end": "348190"
  },
  {
    "text": "and data for a couple of\ndifferent modules is stored. So we have, say,\nmodule A and module B,",
    "start": "348190",
    "end": "354500"
  },
  {
    "text": "and this is the things\nlike the code and the data",
    "start": "354500",
    "end": "362430"
  },
  {
    "text": "that these modules are\nusing to currently execute. So, in this environment,\nsuppose the module, A,",
    "start": "362430",
    "end": "369120"
  },
  {
    "text": "executes some instruction.  So if you think\nof this as memory,",
    "start": "369120",
    "end": "376500"
  },
  {
    "text": "let's say that module A\nbegins at address A here, and module B begins\nat address B here.",
    "start": "376500",
    "end": "383860"
  },
  {
    "text": "So, suppose that\nmodule A executes some instruction like store some\nvalue, R1, in memory address,",
    "start": "383860",
    "end": "394780"
  },
  {
    "text": "B. OK, so module A writes\ninto memory address B here.",
    "start": "394780",
    "end": "399860"
  },
  {
    "text": "So, this can be a\nproblematic thing, right, because if the\nmicroprocessor just",
    "start": "399860",
    "end": "405280"
  },
  {
    "text": "allows this to\nhappen, if it just allows A to write into\nmodule B's memory,",
    "start": "405280",
    "end": "410500"
  },
  {
    "text": "then module B has no\nway of being isolated from module A at all, right? Module A can, for example,\nwrite some sort of garbage",
    "start": "410500",
    "end": "418344"
  },
  {
    "text": "into the memory of module B. And then when module B tries to\nread from that memory address,",
    "start": "418344",
    "end": "424130"
  },
  {
    "text": "it will either, say, try and\nexecute an illegal instruction, or it will read in some data\nthat doesn't make any sense.",
    "start": "424130",
    "end": "429510"
  },
  {
    "text": "So we've lost the\nseparation, the isolation",
    "start": "429510",
    "end": "435260"
  },
  {
    "text": "that we had between if module\nA and module B are a client and a service trying to\ninteract with each other.",
    "start": "435260",
    "end": "440457"
  },
  {
    "text": "We've lost this sort of ability.  We've lost the ability\nto separate and isolate",
    "start": "440457",
    "end": "446590"
  },
  {
    "text": "each other, isolate\nthem from each other that we had when they were\nrunning on separate computers.",
    "start": "446590",
    "end": "452270"
  },
  {
    "text": "Furthermore, this sort of\narrangement of virtual memory.",
    "start": "452270",
    "end": "457729"
  },
  {
    "text": "So one problem with this is\nA can overwrite B's memory.",
    "start": "457730",
    "end": "467080"
  },
  {
    "text": "But we have another\nproblem, which is that this sort of\narrangement also is very, very",
    "start": "467080",
    "end": "472090"
  },
  {
    "text": "difficult to debug. So, these kinds of bugs can\nbe very hard to track down. And really, when we're\nbuilding computer systems,",
    "start": "472090",
    "end": "477430"
  },
  {
    "text": "we'd like to get rid of them. So, for example, suppose that\nA stores into B's memory,",
    "start": "477430",
    "end": "482639"
  },
  {
    "text": "overwrites an instruction that\nsomewhere sort of arbitrarily within B's memory. And then, 10,000\ninstructions later,",
    "start": "482640",
    "end": "488979"
  },
  {
    "text": "B tries to load in\nthat memory address and execute that instruction. And it gets an\nillegal instruction. Now, imagine that you have\nto debug this program.",
    "start": "488980",
    "end": "495780"
  },
  {
    "text": "So you sort of\nare sitting there, and so you run application\nB, and it works just fine.",
    "start": "495781",
    "end": "503870"
  },
  {
    "text": "And then you run application\nA, and A overwrites part of B's memory. And now, when program\nB runs sometimes",
    "start": "503870",
    "end": "510419"
  },
  {
    "text": "long after program A, perhaps,\nis already terminated, B mysteriously crashes on you. So how are you going to\ntrack down the problem?",
    "start": "510420",
    "end": "517049"
  },
  {
    "text": "It's very tricky, and\nit's the kind of problem that's extremely hard to\ndebug these kinds of issues. So we really would\nlike to make it",
    "start": "517049",
    "end": "522780"
  },
  {
    "text": "so that A isn't able to\nsimply overwrite arbitrary things into B's memory. We'd like to protect A from B.",
    "start": "522780",
    "end": "528876"
  },
  {
    "text": "OK, and that's what this\nvirtual memory abstraction that we're going to talk about\ntoday is going to do for us.",
    "start": "528876",
    "end": "534070"
  },
  {
    "text": "So, if you think about how\nyou might protect A from B,",
    "start": "534070",
    "end": "539290"
  },
  {
    "text": "the solution that\nyou sort of come up with after thinking\nabout this and staring at this for a little\nbit is that you",
    "start": "539290",
    "end": "545780"
  },
  {
    "text": "want to verify that\nall of the memory accesses that A does are\nactually valid memory",
    "start": "545780",
    "end": "552199"
  },
  {
    "text": "accesses that A should\nbe allowed to make, so for example, that refer to\nobjects that are actually that A has allocated\nor that A owns.",
    "start": "552200",
    "end": "559600"
  },
  {
    "text": "OK, so in order to do that,\nwhat we're going to need to do is to interpose some\nsort of software",
    "start": "559600",
    "end": "565589"
  },
  {
    "text": "in between the memory accesses\nthat each module makes,",
    "start": "565590",
    "end": "572880"
  },
  {
    "text": "and the actual memory access. So the idea is as follows.",
    "start": "572880",
    "end": "578570"
  },
  {
    "text": "So this is the virtual\nmemory abstraction. ",
    "start": "578570",
    "end": "583940"
  },
  {
    "text": "OK, so the idea is as follows.  For each one of our\nmodules, say A and B,",
    "start": "583940",
    "end": "594250"
  },
  {
    "text": "we're going to create what's\nknown as an address space, OK? ",
    "start": "594250",
    "end": "602850"
  },
  {
    "text": "And this address space is\ngoing to be, for example, on a 32 bit computer, it's\ntwo to the 32 minus one,",
    "start": "602850",
    "end": "614560"
  },
  {
    "text": "it's going to be a\n32 bit memory space. So, this is the virtual address\nspace of, say, a process, A.",
    "start": "614560",
    "end": "623440"
  },
  {
    "text": "So, process A can use\nany memory address that's in this two to\nthe 32 bit range, OK?",
    "start": "623440",
    "end": "631290"
  },
  {
    "text": "But this is going to be\na virtual address space. And what I mean by that\nis when process A refers",
    "start": "631290",
    "end": "644390"
  },
  {
    "text": "to some address within\nits memory space, call it virtual address VA.",
    "start": "644390",
    "end": "651210"
  },
  {
    "text": "That address is going to be\nmapped by the virtual memory system into a\nphysical address, OK?",
    "start": "651210",
    "end": "658140"
  },
  {
    "text": " So this virtual address here\nis going to be mapped into some",
    "start": "658140",
    "end": "667240"
  },
  {
    "text": "physical address -- -- somewhere within the actual\nphysical memory of the system,",
    "start": "667240",
    "end": "678250"
  },
  {
    "text": "OK? So this physical memory of the\nsystem is also a 32 bit space.",
    "start": "678250",
    "end": "684650"
  },
  {
    "text": " But the sort of mapping\nfrom this virtual address",
    "start": "684650",
    "end": "690480"
  },
  {
    "text": "in A's memory into this\nphysical address space is going to be handled by\nthis virtual memory system.",
    "start": "690480",
    "end": "697820"
  },
  {
    "text": "So now the idea is that\neach thing that, say, a process A or B might\nwant to reference",
    "start": "697820",
    "end": "704000"
  },
  {
    "text": "is going to be mapped into\nsome different location within this memory. So, for example, the code from\nprocess A or from module A",
    "start": "704000",
    "end": "713480"
  },
  {
    "text": "can be mapped into one location,\nand the code from module B",
    "start": "713480",
    "end": "718620"
  },
  {
    "text": "is going to be mapped\ninto a different location in the physical address space.",
    "start": "718620",
    "end": "724490"
  },
  {
    "text": "OK, so we have this\nnotion of address spaces. Each module that is running on\nthe system in a virtual memory system is going to be allocated\nto one of these address spaces.",
    "start": "724490",
    "end": "732430"
  },
  {
    "text": "This address space\nis going to be, and this address space\nis virtual in the sense",
    "start": "732430",
    "end": "740899"
  },
  {
    "text": "that these addresses are\nonly valid in the context of this given module, OK?",
    "start": "740900",
    "end": "746190"
  },
  {
    "text": "And, they translate into, each\naddress in the virtual space translates into some address\nin the physical space.",
    "start": "746190",
    "end": "752977"
  },
  {
    "text": "Now, if you look at\nthis for a minute, you might think,\nwell, this is kind of confusing because now B and\nA both have a 32 bit address",
    "start": "752977",
    "end": "758910"
  },
  {
    "text": "space. And the computer itself only\nhas a 32 bit address space. So, there are sort\nof more addresses",
    "start": "758910",
    "end": "765240"
  },
  {
    "text": "between all the modules than the\ncomputer itself physically has. And, if you remember back\nfrom 6.004, the story",
    "start": "765240",
    "end": "770630"
  },
  {
    "text": "that we told you about\nthat was that, well, some of these virtual\naddresses can actually be mapped into the\ndisk on the computer.",
    "start": "770630",
    "end": "776490"
  },
  {
    "text": "So in 6.004, virtual memory\nwas presented as a way to create a computer\nthat appeared to have more physical memory\nthan it, in fact, did.",
    "start": "776490",
    "end": "785079"
  },
  {
    "text": "And the way that\nthat was done was to map some of these\naddresses onto disk.",
    "start": "785080",
    "end": "790250"
  },
  {
    "text": " So you might have addresses\nfrom B mapped onto disk.",
    "start": "790250",
    "end": "796130"
  },
  {
    "text": "And then, when B tries to\nreference an address that's mapped onto disk, the\nsystem would load that data",
    "start": "796130",
    "end": "802850"
  },
  {
    "text": "from memory, load that data\nfrom disk and into memory. So, we're not going to\ntalk about that aspect of virtual memory\nvery much today.",
    "start": "802850",
    "end": "809587"
  },
  {
    "text": "The thing to remember is just\nthat these virtual address spaces, there may be parts\nof this virtual address",
    "start": "809587",
    "end": "815279"
  },
  {
    "text": "space in each of\nthe modules that isn't actually mapped into\nany physical address space. So if one of these\nmodules tries to use",
    "start": "815280",
    "end": "823509"
  },
  {
    "text": "one of these unmapped\nvirtual address spaces, it's not allowed to do that. This virtual memory system\nwill signal an error",
    "start": "823510",
    "end": "829969"
  },
  {
    "text": "when it tries to do that. And on your computer,\nsometimes you'll see programs that\nwill mysteriously crashed with things that say\nthings like, tried to access",
    "start": "829969",
    "end": "838029"
  },
  {
    "text": "an illegal memory address. When it does that, that's\nbecause the program tried to access some memory\nlocation that wasn't mapped",
    "start": "838030",
    "end": "845376"
  },
  {
    "text": "by the virtual memory system. ",
    "start": "845377",
    "end": "851600"
  },
  {
    "text": "OK, so let's dive a\nlittle more into actually how this virtual memory\nabstraction works",
    "start": "851600",
    "end": "857796"
  },
  {
    "text": "so we can try to understand\na little bit more about what's going on. So this is going to be a\nsimplified VM hardware, OK?",
    "start": "857796",
    "end": "869990"
  },
  {
    "text": " It's a little bit\nsimplified even",
    "start": "869990",
    "end": "875830"
  },
  {
    "text": "from what you learned\nabout in 6.004. So, the idea in this\nsimplified hardware is that we have our processor.",
    "start": "875830",
    "end": "884639"
  },
  {
    "text": "OK, and then we're going to\nhave this VM system, which",
    "start": "884640",
    "end": "889840"
  },
  {
    "text": "is sometimes called a\nmemory management unit, MMU. And, this is a piece\nof hardware that's going to help us\nto do this mapping",
    "start": "889840",
    "end": "896240"
  },
  {
    "text": "from these logical addresses\nin the modules' address spaces into the physical memory.",
    "start": "896240",
    "end": "901259"
  },
  {
    "text": "And then, we're going to\nhave the physical memory, OK? ",
    "start": "901260",
    "end": "908090"
  },
  {
    "text": "Now the idea is that\nwhen an instruction tries",
    "start": "908090",
    "end": "913130"
  },
  {
    "text": "to access some virtual\naddress, so for example suppose we execute\ninstruction load",
    "start": "913130",
    "end": "919990"
  },
  {
    "text": "some virtual address, load into\nR1 some virtual address, OK? What's going to\nhappen when we do",
    "start": "919990",
    "end": "926180"
  },
  {
    "text": "that is that the\nmicroprocessor is going to send this virtual\naddress to the VM system.",
    "start": "926180",
    "end": "932490"
  },
  {
    "text": "And then the VM system is\ngoing to translate that into some physical address\nthat can be resolved",
    "start": "932490",
    "end": "938420"
  },
  {
    "text": "within the memory itself. OK, and the way that the\nvirtual memory system is going to decide this mapping\nbetween a virtual address",
    "start": "938420",
    "end": "947540"
  },
  {
    "text": "and a physical address\nis by using something that we call a page map, OK?",
    "start": "947540",
    "end": "953130"
  },
  {
    "text": "OK, so this table is an example.",
    "start": "953130",
    "end": "965090"
  },
  {
    "text": "So this is a page map. And what a page\nmap basically has is its just a table of virtual\naddress to physical address",
    "start": "965090",
    "end": "971940"
  },
  {
    "text": "mappings. So this is the virtual\naddress to physical address. So the idea is that when some\nvirtual address comes in here,",
    "start": "971940",
    "end": "978540"
  },
  {
    "text": "the virtual memory\nmanager looks up that virtual address\nin this page map, finds the corresponding\nphysical address,",
    "start": "978540",
    "end": "984060"
  },
  {
    "text": "and then looks that\nphysical address up in the actual memory.",
    "start": "984060",
    "end": "989080"
  },
  {
    "text": "OK, so now there's one more\ndetail that we need, right? So what this gives us is we\nhave this notion of a page map",
    "start": "989080",
    "end": "996279"
  },
  {
    "text": "that does this mapping for us. But we're missing a\ndetail that is, OK, what we wanted was for each\none of these different modules",
    "start": "996280",
    "end": "1003610"
  },
  {
    "text": "that's running in the system\nto have a different address space associated with it. So what we want is we\nwant to have separate page",
    "start": "1003610",
    "end": "1010050"
  },
  {
    "text": "maps for each of these different\nmodules, so, for A and B,",
    "start": "1010050",
    "end": "1015410"
  },
  {
    "text": "OK, we're going to have\na different page map. And we're going to\nhave this sort of same,",
    "start": "1015410",
    "end": "1020510"
  },
  {
    "text": "we might have multiple copies\nof a particular virtual address in each one of these page maps.",
    "start": "1020510",
    "end": "1026703"
  },
  {
    "text": "And then what we're\ngoing to do is we're going to allocate\na special register on the hardware,\non the processor.",
    "start": "1026703",
    "end": "1032550"
  },
  {
    "text": "We're going to add a\nlittle register that's going to allow us to keep track\nof which one of these page maps",
    "start": "1032550",
    "end": "1038490"
  },
  {
    "text": "we are currently looking at, OK? So this thing is called the\nPMAR or the Page Map Address",
    "start": "1038490",
    "end": "1045319"
  },
  {
    "text": "Register. OK, and the page\nmap address register",
    "start": "1045319",
    "end": "1057370"
  },
  {
    "text": "simply points at one\nof these page maps. OK, so what happens is that\nthe virtual memory system, when",
    "start": "1057370",
    "end": "1065340"
  },
  {
    "text": "it wants to resolve\na virtual address, looks at this page\nmap address register and uses that to find a pointer\nto the beginning of the page",
    "start": "1065340",
    "end": "1074260"
  },
  {
    "text": "map that's currently in use. And then he uses\nthe page map that's currently in use\nto resolve, to get",
    "start": "1074260",
    "end": "1081600"
  },
  {
    "text": "what physical\naddress corresponds to this logical address. OK so this is really the core\nconcept from virtual memory.",
    "start": "1081600",
    "end": "1088130"
  },
  {
    "text": "So what we have now is we have\nthis page map address register that can be used to select which\none of these address spaces",
    "start": "1088130",
    "end": "1094780"
  },
  {
    "text": "we are currently using. OK, and so when we have\nselected, for example, the page map for\nmodule A, then module A",
    "start": "1094780",
    "end": "1104540"
  },
  {
    "text": "can only refer to\nvirtual addresses that are in its page map.",
    "start": "1104540",
    "end": "1109850"
  },
  {
    "text": "And those virtual\naddresses can only map into certain\nphysical addresses.",
    "start": "1109850",
    "end": "1114920"
  },
  {
    "text": "So, for example,\nsuppose this block here is the set of virtual addresses,\nthe set of physical addresses",
    "start": "1114920",
    "end": "1121080"
  },
  {
    "text": "that correspond to the virtual\naddresses in A's page map. OK, these are the only\nphysical addresses",
    "start": "1121080",
    "end": "1126790"
  },
  {
    "text": "that A can talk about. So if we, for example, have\na different block of memory addresses that correspond\nto the virtual addresses",
    "start": "1126790",
    "end": "1135020"
  },
  {
    "text": "that B can reference,\nwe can see that there's no way for module A to be able\nto reference any of the memory",
    "start": "1135020",
    "end": "1142929"
  },
  {
    "text": "that B uses. So we are able to\ntotally separate the physical memory,\npieces of physical memory that A and B can talk about by\nusing this page map mechanism",
    "start": "1142930",
    "end": "1153360"
  },
  {
    "text": "that virtual memory gives us. So, basically what\nwe've done is we've",
    "start": "1153360",
    "end": "1159120"
  },
  {
    "text": "sort of added this extra\nlayer of indirection, this virtual memory\nsystem, that gets",
    "start": "1159120",
    "end": "1167200"
  },
  {
    "text": "to map virtual addresses\ninto physical addresses.  So the rest of this\nlecture is really",
    "start": "1167200",
    "end": "1173710"
  },
  {
    "text": "going to be details about how\nwe make this work, about how",
    "start": "1173710",
    "end": "1181399"
  },
  {
    "text": "we actually decide, how we\nassign this PMAR register based on which one of the modules\nis currently executing",
    "start": "1181400",
    "end": "1188550"
  },
  {
    "text": "about things like what the\nformat of this page map table is going to look like, OK? So this is really\nthe key concept.",
    "start": "1188550",
    "end": "1194515"
  },
  {
    "text": " So what I want to do\nnow is sort of turn",
    "start": "1194515",
    "end": "1202790"
  },
  {
    "text": "to this second question\nI asked which is, how does this page map\nthing actually work?",
    "start": "1202790",
    "end": "1209309"
  },
  {
    "text": "How is it actually represented? So one very simple\nrepresentation of a page map",
    "start": "1209310",
    "end": "1214400"
  },
  {
    "text": "might be that it\nsimply is a pointer to, the page map just says where A's\nmemory begins on the processor,",
    "start": "1214400",
    "end": "1222220"
  },
  {
    "text": "right? So it's just one value. It says A's memory\nbegins at this location in the physical memory,\nand all virtual addresses",
    "start": "1222220",
    "end": "1229800"
  },
  {
    "text": "should be resolved\nrelative to this beginning location of A's memory.",
    "start": "1229800",
    "end": "1235830"
  },
  {
    "text": "The problem with\nthat representation is that it's not very flexible. So, for example, suppose\nthere's a third module, C,",
    "start": "1235830",
    "end": "1249409"
  },
  {
    "text": "which is laid out in\nmemory right next So, its storage is placed\nright next to A in memory.",
    "start": "1249410",
    "end": "1255740"
  },
  {
    "text": "And now, suppose that A wants to\nallocate some additional memory that it can use. Now, in order to do that,\nif the page map is simply",
    "start": "1255740",
    "end": "1265700"
  },
  {
    "text": "a single pointer to the\nbeginning of A's address space, we're kind of in trouble. We can't just add\nmemory onto the bottom because then we would overlap C.",
    "start": "1265700",
    "end": "1273250"
  },
  {
    "text": "So we're going to\nhave to move all of A's memory around in order to\nbe able to make space for this. OK, so this seems like a\nlittle bit problematic simply",
    "start": "1273250",
    "end": "1280110"
  },
  {
    "text": "have it be a pointer. The other thing we could do\nis suppose we could, instead, have a different option\nwhere we could say,",
    "start": "1280110",
    "end": "1286550"
  },
  {
    "text": "for example, for every virtual\naddress in A's address space, so for each 32 bit value\nthat A wants to resolve,",
    "start": "1286550",
    "end": "1297640"
  },
  {
    "text": "there might be an entry in\nthis page map table, right? So for every 32-bit\nvirtual address, there would be a corresponding\n32-bit physical address.",
    "start": "1297640",
    "end": "1305517"
  },
  {
    "text": "And there would just\nbe a one-to-one mapping between all these things. So, if A could reference a\nmillion blocks of memory,",
    "start": "1305517",
    "end": "1310690"
  },
  {
    "text": "there would be a million\nentries in this page map table. So, if you think about\nthis for a minute, that",
    "start": "1310690",
    "end": "1316840"
  },
  {
    "text": "sounds like kind\nof a bad idea, too, because now these tables\nare totally huge, right, and in fact they are\nalmost as big as the memory",
    "start": "1316840",
    "end": "1324919"
  },
  {
    "text": "itself, right, because if I\nhave a million entries, if A can reference a million\nblocks, then I'm going to need a million\nentries in the table.",
    "start": "1324920",
    "end": "1331545"
  },
  {
    "text": "So the table becomes just\nas big as the memory itself. So we need some in between\nsort of alternative hybrid",
    "start": "1331545",
    "end": "1337230"
  },
  {
    "text": "between these two extremes. And the idea, again,\nis very simple.",
    "start": "1337230",
    "end": "1343490"
  },
  {
    "text": "And you saw it in 6.004. So the idea is to take this\n32-bit virtual address.",
    "start": "1343490",
    "end": "1349786"
  },
  {
    "start": "1349786",
    "end": "1355160"
  },
  {
    "text": "So suppose this is our\n32-bit virtual address. Now what we're\ngoing to do is we're going to split it up\ninto two pieces, a page",
    "start": "1355160",
    "end": "1362280"
  },
  {
    "text": "number and an offset.",
    "start": "1362280",
    "end": "1367590"
  },
  {
    "text": "OK, and we're going to choose\nsome size for these two things.",
    "start": "1367590",
    "end": "1372970"
  },
  {
    "text": "For now I'll just arbitrarily\npick a 20 bit page number and a 12 bit offset.",
    "start": "1372970",
    "end": "1379000"
  },
  {
    "text": " OK, so what this is going to do,\nso now what we're going to do",
    "start": "1379000",
    "end": "1386320"
  },
  {
    "text": "is instead of storing\na single word of memory",
    "start": "1386320",
    "end": "1391500"
  },
  {
    "text": "at each entry in\nthis table, we're going to store a page of memory\nat each entry in this table. So -- So this table is going\nto look like a mapping between",
    "start": "1391500",
    "end": "1411990"
  },
  {
    "text": "a page, and a physical address. OK, so what a page is, so if\nthe page number is 20 bits long,",
    "start": "1411990",
    "end": "1420890"
  },
  {
    "text": "then that means\nthat each page is going to be two to the 12th bits\nbig, which is equal to, say,",
    "start": "1420890",
    "end": "1428120"
  },
  {
    "text": "4,096 words, OK?",
    "start": "1428120",
    "end": "1435309"
  },
  {
    "text": "So the idea is that\nwe're going to have two to the 20th pages within\neach address space,",
    "start": "1435310",
    "end": "1443160"
  },
  {
    "text": "and each page is going to map to\none of these 4,096 byte blocks,",
    "start": "1443160",
    "end": "1450070"
  },
  {
    "text": "OK? So, if we have our memory\nhere this page, say, page one",
    "start": "1450070",
    "end": "1463390"
  },
  {
    "text": "is going to map into\nsome physical address. And page two is going to map\ninto some other physical block,",
    "start": "1463390",
    "end": "1470790"
  },
  {
    "text": "OK, so each one of these things\nis now 4,096 bytes, each block",
    "start": "1470790",
    "end": "1477940"
  },
  {
    "text": "here, OK? And so this, let's\njust expand this.",
    "start": "1477940",
    "end": "1485940"
  },
  {
    "text": "So this is now a page. And this 12 bit offset is\ngoing to be used in order",
    "start": "1485940",
    "end": "1491623"
  },
  {
    "text": "to look up the word that\nwe want to actually look up in this page. So, if the virtual address\nis, say, for example,",
    "start": "1491624",
    "end": "1501789"
  },
  {
    "text": "page one offset zero,\nwhat that's going to do is we're going to look\nup in the page map.",
    "start": "1501790",
    "end": "1509490"
  },
  {
    "text": "We're going to find the page\nnumber that corresponds to, we're going to find\npage number one.",
    "start": "1509490",
    "end": "1514734"
  },
  {
    "text": "We're going to find the physical\naddress that corresponds to it, we're going to go down here, and\nlook at this block of memory.",
    "start": "1514734",
    "end": "1522170"
  },
  {
    "text": "And then within this\n4,096 block memory, we're going to take the\naddress zero, the first word",
    "start": "1522170",
    "end": "1528990"
  },
  {
    "text": "within that thing, OK? So now the size of these page\ntables is much smaller, right?",
    "start": "1528990",
    "end": "1535026"
  },
  {
    "text": "They're no longer\ntwo to the 30th bits. Now they're two\nto the 20th bits, which is some small\nnumber of megabytes big.",
    "start": "1535026",
    "end": "1543930"
  },
  {
    "text": "But we've avoided this\nproblem that we have before. We have some flexibility in\nterms of how each page maps",
    "start": "1543930",
    "end": "1552210"
  },
  {
    "text": "into the physical memory. So I can allocate a\nthird page to a process.",
    "start": "1552210",
    "end": "1559070"
  },
  {
    "text": "And I can map that\ninto any 4,096 byte block that's in memory\nthat's currently unused.",
    "start": "1559070",
    "end": "1564657"
  },
  {
    "text": "OK, so I have flexibility. I don't have this problem,\nsay, where A and C were colliding with each other.",
    "start": "1564657",
    "end": "1575960"
  },
  {
    "text": " OK, so this is\nsort of the outline",
    "start": "1575960",
    "end": "1585100"
  },
  {
    "text": "of how virtual memory works. But what I haven't\nyet described to you is how it is that\nwe can actually",
    "start": "1585100",
    "end": "1591279"
  },
  {
    "text": "go about creating these\ndifferent address spaces that are allocated to the\ndifferent modules,",
    "start": "1591280",
    "end": "1598130"
  },
  {
    "text": "and how we can switch between\ndifferent modules using this PMAR register. So I've sort of\ndescribed this as,",
    "start": "1598130",
    "end": "1605670"
  },
  {
    "text": "suppose these data\nstructures exist, now here's how we can use them. But I haven't told you how\nthese data structures all",
    "start": "1605670",
    "end": "1612170"
  },
  {
    "text": "get together, and created,\nand set up to begin with. And I hinted at this\nin the beginning.",
    "start": "1612170",
    "end": "1617360"
  },
  {
    "text": "But in order to do this,\nwhat we're going to need is some sort of a special\nsupervisory module that's",
    "start": "1617360",
    "end": "1624350"
  },
  {
    "text": "able to look at the\npage maps for all of these different, that's\nable to create new page maps",
    "start": "1624350",
    "end": "1630400"
  },
  {
    "text": "and look at the\npage maps for all of the different modules\nthat are within the system. And the supervisory\nmodule is going",
    "start": "1630400",
    "end": "1635720"
  },
  {
    "text": "to be able to do things like\nadd new memory to a page map or be able to destroy,\ndelete a particular module",
    "start": "1635720",
    "end": "1644720"
  },
  {
    "text": "and its associated page map. So we need some sort\nof a thing that can manage all this infrastructure.",
    "start": "1644720",
    "end": "1650100"
  },
  {
    "text": "So, this supervisory module -- -- is called the kernel.",
    "start": "1650100",
    "end": "1659700"
  },
  {
    "text": "OK, and the kernel\nis really, it's going to be the\nthing that's going",
    "start": "1659700",
    "end": "1665770"
  },
  {
    "text": "to be in charge of managing all\nthese data structures for us. So -- So here's our\nmicroprocessor with its PMAR",
    "start": "1665770",
    "end": "1682890"
  },
  {
    "text": "register on it. And, what we're\ngoing to do is we're going to extend the\nmicroprocessor with one",
    "start": "1682890",
    "end": "1688880"
  },
  {
    "text": "additional piece of hardware,\nand this is the user kernel",
    "start": "1688880",
    "end": "1695840"
  },
  {
    "text": "bit, OK? So, this is just a bit specifies\nwhether we are currently",
    "start": "1695840",
    "end": "1701309"
  },
  {
    "text": "running a user module that\nis just a program that's running on your computer, or\nwhether the kernel is currently",
    "start": "1701310",
    "end": "1707860"
  },
  {
    "text": "executing, OK? And the idea with\nthis kernel bit is that when this kernel bit is\nset, the code that is running",
    "start": "1707860",
    "end": "1715200"
  },
  {
    "text": "is going to have\nspecial privileges. It's going to be\nable to manipulate special things about the\nhardware and the processor.",
    "start": "1715200",
    "end": "1723090"
  },
  {
    "text": "And in particular,\nwe're going to have a rule that says that only the\nkernel can change the PMAR, OK?",
    "start": "1723090",
    "end": "1735800"
  },
  {
    "start": "1735800",
    "end": "1740870"
  },
  {
    "text": "So the PMAR is the thing\nthat specifies which process is currently running, and\nselects which address space we",
    "start": "1740870",
    "end": "1747480"
  },
  {
    "text": "want to be currently using. And what we're going to\nuse is we're going to use, so what we're going to\ndo is have the kernel",
    "start": "1747480",
    "end": "1755240"
  },
  {
    "text": "be the thing that's in\ncharge of manipulating the value of this PMAR\nregister to select which thing",
    "start": "1755240",
    "end": "1760290"
  },
  {
    "text": "is currently being executed. And we want to make it so that\nonly the kernel can do this because if we, for\nexample, allowed",
    "start": "1760290",
    "end": "1767180"
  },
  {
    "text": "one of these other programs to\nbe able to manipulate the PMAR, right, then that\nother program might",
    "start": "1767180",
    "end": "1772265"
  },
  {
    "text": "be able to do something\nunpleasant to the computer, right? It changes the PMAR to point\nat some other program's memory.",
    "start": "1772265",
    "end": "1778917"
  },
  {
    "text": "And now, suddenly all the\nmemory addresses in the system are going to be resolved.",
    "start": "1778917",
    "end": "1784106"
  },
  {
    "text": "Then suddenly, we\nare going to be sort of resolving memory\naddresses relative to some other module's page map.",
    "start": "1784106",
    "end": "1790257"
  },
  {
    "text": "And that's likely to\nbe a problematic thing. It's likely to cause that other\nmodule to crash, for example, because the processor is set\nup to be executing instructions",
    "start": "1790257",
    "end": "1798199"
  },
  {
    "text": "from the current program. So we want to make sure that\nonly something this kernel can change the PMAR.",
    "start": "1798199",
    "end": "1803230"
  },
  {
    "text": "And this kernel is going to be\nthis sort of supervisory module that all of the\nother modules are going to have to trust to\nkind of do the right thing",
    "start": "1803230",
    "end": "1810136"
  },
  {
    "text": "and manage the computer's\nexecution for you. And this kernel, except\nfor this one difference",
    "start": "1810136",
    "end": "1817130"
  },
  {
    "text": "that a kernel can\nchange the PMAR, the kernel is, in\nall other respects, essentially just going to\nbe another module that's",
    "start": "1817130",
    "end": "1823310"
  },
  {
    "text": "running in the computer system. So in particular,\nthe kernel is also going to have one of these\n32-bit virtual address",
    "start": "1823310",
    "end": "1830990"
  },
  {
    "text": "spaces associated with it, OK? ",
    "start": "1830990",
    "end": "1836350"
  },
  {
    "text": "But, what we're\ngoing to do is we're going to say that the kernel\nwithin its address space",
    "start": "1836350",
    "end": "1841590"
  },
  {
    "text": "has all of the page maps of\nall the other programs that",
    "start": "1841590",
    "end": "1847330"
  },
  {
    "text": "are currently running on the\nsystem mapped into its address space. OK, so this is a\nlittle bit tricky",
    "start": "1847330",
    "end": "1852570"
  },
  {
    "text": "because I presented this as\nthough A and B referenced totally different\npieces of memory.",
    "start": "1852570",
    "end": "1859255"
  },
  {
    "text": "So, I sort of have\ntold you so far only about modules that\nare referencing disjoint sets of memory.",
    "start": "1859255",
    "end": "1864360"
  },
  {
    "text": "But in fact these page\nmaps, right, they just reside in memory somewhere.",
    "start": "1864360",
    "end": "1869400"
  },
  {
    "text": "And it's just fine\nif I, for example, have multiple modules that\nare able to reference, that",
    "start": "1869400",
    "end": "1878570"
  },
  {
    "text": "have the same physical\naddresses mapped into their virtual\naddress space.",
    "start": "1878570",
    "end": "1883690"
  },
  {
    "text": "So it's very likely\nthat I might want to have something down\nhere at the bottom that both A and B can access.",
    "start": "1883690",
    "end": "1890760"
  },
  {
    "text": "So, this might be stuff\nthat's shared between A and B. I can map that into\nboth A and B's memory.",
    "start": "1890760",
    "end": "1896030"
  },
  {
    "text": "In the same way, what I'm\ngoing to do is I'm going to map these page maps, which\nare also stored in memory into all of the page maps into\nthe kernel's address space.",
    "start": "1896030",
    "end": "1903940"
  },
  {
    "text": "So the kernel is going to be\nable to reference the address spaces of all the modules.",
    "start": "1903940",
    "end": "1909600"
  },
  {
    "text": "And the kernel is\nalso going to keep a little table of all the page\nmaps for all of the currently",
    "start": "1909600",
    "end": "1916390"
  },
  {
    "text": "running programs on the system. So these are, for example,\npage maps for A and B.",
    "start": "1916390",
    "end": "1923394"
  },
  {
    "text": "And this is a list\nof all the maps that are currently\nrunning in the system. So what's going to\nhappen, now what",
    "start": "1923394",
    "end": "1930900"
  },
  {
    "text": "can happen is because the kernel\nis allowed to change the PMAR, and because it knows\nabout the location of all",
    "start": "1930900",
    "end": "1936940"
  },
  {
    "text": "the other address spaces that\nare in the system, when it wants to start running one of\nthese programs that's running",
    "start": "1936940",
    "end": "1942559"
  },
  {
    "text": "in the system, it\ncan change the value of the PMAR to be sort of the\nPMAR for A or the PMAR to B.",
    "start": "1942560",
    "end": "1949520"
  },
  {
    "text": "And, it can manipulate\nall the values of the registers\nin the system so that you can start executing\ncode for one of these.",
    "start": "1949520",
    "end": "1956550"
  },
  {
    "text": "You can switch between\none of these two modules. So the actual process of\nswitching between which module",
    "start": "1956550",
    "end": "1961740"
  },
  {
    "text": "is currently running. We're going to focus\non that more next time. So, don't worry too much\nif you don't understand the details of how you\nactually switch from executing",
    "start": "1961740",
    "end": "1968660"
  },
  {
    "text": "one program to another program. But, you can see\nthat the kernel can switch which address\nspace is currently",
    "start": "1968660",
    "end": "1976690"
  },
  {
    "text": "active by simply\nmanipulating the value of this PMAR register. Furthermore, the\nkernel can do things",
    "start": "1976690",
    "end": "1982040"
  },
  {
    "text": "like it can create a new map. So the kernel can\nsimply allocate one of these new tables,\nand it can set up",
    "start": "1982040",
    "end": "1987830"
  },
  {
    "text": "a mapping from a set\nof virtual addresses to a set of physical\naddresses so that you can create a new address\nspace that a new module can",
    "start": "1987830",
    "end": "1995410"
  },
  {
    "text": "start executing within. Similarly, the kernel can do\nthings like allocate new memory into one of these addresses.",
    "start": "1995410",
    "end": "2001190"
  },
  {
    "text": " So it can map some\nadditional virtual addresses",
    "start": "2001190",
    "end": "2007830"
  },
  {
    "text": "into real physical memory so\nthat when one of these modules, say for example, requests\nadditional memory to execute,",
    "start": "2007830",
    "end": "2014700"
  },
  {
    "text": "the kernel can add that memory,\nadd an entry into the table so that that new memory that the\nprogram has requested actually",
    "start": "2014700",
    "end": "2021820"
  },
  {
    "text": "maps into a valid,\nphysical address. ",
    "start": "2021820",
    "end": "2027770"
  },
  {
    "text": "OK, so the question,\nof course, then is,",
    "start": "2027770",
    "end": "2033020"
  },
  {
    "text": "so you can see the value of\nhaving this kernel module. But the question is,\nhow do we communicate",
    "start": "2033020",
    "end": "2038720"
  },
  {
    "text": "between these modules that\nare running these user level modules that are running, and\nthe kernel module that the user",
    "start": "2038720",
    "end": "2047270"
  },
  {
    "text": "modules need to invoke, for\nexample, request new memory. So the way that we\nare going to do this",
    "start": "2047270",
    "end": "2052370"
  },
  {
    "text": "is just like we've done\neverything else in this lecture so far: by adding a\nlittle bit of extra,",
    "start": "2052370",
    "end": "2059780"
  },
  {
    "text": "by changing the processor\njust a little bit. So in particular, what\nwe're going to do -- ",
    "start": "2059780",
    "end": "2078138"
  },
  {
    "text": "What we're going to do is\nto is to add this notion of a supervisor call. ",
    "start": "2078139",
    "end": "2088820"
  },
  {
    "text": "Call that SVC. So a supervisor call is\nsimply a special instruction that is on the processor\nthat invokes the kernel.",
    "start": "2088820",
    "end": "2097170"
  },
  {
    "text": "So when the supervisor call\ninstruction gets executed, it's going to set up the state\nof these PMAR and user kernel",
    "start": "2097170",
    "end": "2105010"
  },
  {
    "text": "bit instructions so that the\nkernel can begin executing. The supervisor\ncall is also going.",
    "start": "2105010",
    "end": "2113370"
  },
  {
    "text": "But when the supervisor call\ninstruction is executed, we need to be a little bit\ncareful because we also need to decide somehow\nwhich code within the kernel",
    "start": "2113370",
    "end": "2121500"
  },
  {
    "text": "we want to begin executing when\nthe supervisor call instruction gets executed, right? ",
    "start": "2121500",
    "end": "2128089"
  },
  {
    "text": "So what the supervisor\ncall instruction does is it accepts a parameter which\nis the name of a so-called gate",
    "start": "2128090",
    "end": "2138980"
  },
  {
    "text": "function. So a gate function is a\nwell defined entry point into another module that can be\nused to invoke a piece of code",
    "start": "2138980",
    "end": "2150276"
  },
  {
    "text": "in that other module. So, for example,\nthe kernel is going to have a particular\ngate function which",
    "start": "2150276",
    "end": "2155380"
  },
  {
    "text": "corresponds to allocating\nadditional memory for a module. So when a user program executes\nan instruction, supervisor",
    "start": "2155380",
    "end": "2165290"
  },
  {
    "text": "call, to gate say\nfor example, this might be some memory\nallocation code,",
    "start": "2165290",
    "end": "2175820"
  },
  {
    "text": "this special\ninstruction is going to do the following things.",
    "start": "2175820",
    "end": "2181320"
  },
  {
    "text": "First it's going to set the\nuser kernel bit to kernel.",
    "start": "2181320",
    "end": "2188680"
  },
  {
    "text": "Then it's going to set the\nvalue of the PMAR register",
    "start": "2188680",
    "end": "2193760"
  },
  {
    "text": "to the kernel page map. ",
    "start": "2193760",
    "end": "2201840"
  },
  {
    "text": "It's going to save the program\ncounter for the currently executing instruction,\nand then it's",
    "start": "2201840",
    "end": "2207570"
  },
  {
    "text": "going to set the program counter\nto be the address of the gate",
    "start": "2207570",
    "end": "2213010"
  },
  {
    "text": "function, OK? So we've introduced a special\nnew processor instruction",
    "start": "2213010",
    "end": "2219150"
  },
  {
    "text": "that takes these steps. So when this\ninstruction is executed,",
    "start": "2219150",
    "end": "2225470"
  },
  {
    "text": "we essentially switch into\nexecuting within the kernel's",
    "start": "2225470",
    "end": "2230960"
  },
  {
    "text": "address space. OK, and this\nkernel, and we begin executing within the\nkernel address space",
    "start": "2230960",
    "end": "2237410"
  },
  {
    "text": "at the address of this gate\nfunction within the kernel's address space.",
    "start": "2237410",
    "end": "2243280"
  },
  {
    "text": "OK, so what this\nhas done is this is a well defined entry point.",
    "start": "2243280",
    "end": "2250340"
  },
  {
    "text": "If the program tries to\nexecute this instruction with the name of a gate\nfunction that doesn't exist,",
    "start": "2250340",
    "end": "2256780"
  },
  {
    "text": "then that program is\ngoing to get an error when it tries to do that. So the program can only\nname gate functions",
    "start": "2256780",
    "end": "2262386"
  },
  {
    "text": "that actually correspond\nto real things that the operating system can\ndo, that the kernel can do.",
    "start": "2262386",
    "end": "2268400"
  },
  {
    "text": "And so, the kernel is then\ngoing to be invoked and take that action that\nwas requested of it.",
    "start": "2268400",
    "end": "2274700"
  },
  {
    "text": "On return, essentially,\nso when the kernel finishes executing\nthis process, when it finishes executing this, say,\nmemory allocation instruction,",
    "start": "2274700",
    "end": "2283130"
  },
  {
    "text": "we are just going to\nreverse this step. So we are just going\nto set the PMAR to be, we're going\nto set the PMAR back",
    "start": "2283130",
    "end": "2290850"
  },
  {
    "text": "to the user's program. We are going to set the user\nkernel bit back into user mode.",
    "start": "2290850",
    "end": "2296190"
  },
  {
    "text": "And then we're going to jump\nback to the saved return address that we saved\nhere, the saved program",
    "start": "2296190",
    "end": "2301250"
  },
  {
    "text": "counter address from\nthe user's program. So when the program finishes,\nwhen the kernel finishes",
    "start": "2301250",
    "end": "2307200"
  },
  {
    "text": "executing this\nservice instruction, the control will\njust return back to the program in the\nplace where the program",
    "start": "2307200",
    "end": "2313360"
  },
  {
    "text": "needs to begin executing. OK, so now using this gate,\nso using this notion of,",
    "start": "2313360",
    "end": "2323640"
  },
  {
    "text": "so what we've seen so far\nnow is the ability for the, we can use the virtual\nmemory abstraction",
    "start": "2323640",
    "end": "2331960"
  },
  {
    "text": "in order to protect the memory\nreferences of two modules from each other. And we see when we have this\nnotion of the kernel that",
    "start": "2331960",
    "end": "2338270"
  },
  {
    "text": "can be used to,\nfor example, that can be used to manage these\naddress spaces to allocate",
    "start": "2338270",
    "end": "2344269"
  },
  {
    "text": "new memory to these address\nspaces, and in general, to sort of manage\nthese address spaces.",
    "start": "2344270",
    "end": "2352210"
  },
  {
    "text": "So this kernel is\nalso going to allow us to do exactly what\nwe set out trying to do,",
    "start": "2352210",
    "end": "2362349"
  },
  {
    "text": "which is to act as the so-called\ntrusted intermediary between,",
    "start": "2362350",
    "end": "2371360"
  },
  {
    "text": "say for example, a client\nand a server running on the same machine. ",
    "start": "2371360",
    "end": "2380780"
  },
  {
    "text": "OK, so I trust that intermediary\nis just a piece of code. So suppose we have a\nclient and a server, right,",
    "start": "2380780",
    "end": "2386884"
  },
  {
    "text": "and these are two\npieces of code written by two different developers. Maybe the two developers\ndon't necessarily",
    "start": "2386884",
    "end": "2391900"
  },
  {
    "text": "trust that the other\ndeveloper has written a piece of code that's 100%\nfoolproof because it doesn't have any bugs. But both of those\ndevelopers may be",
    "start": "2391900",
    "end": "2399312"
  },
  {
    "text": "willing to say that\nthey will trust that the kernel is\nproperly written and doesn't have any bugs in it.",
    "start": "2399312",
    "end": "2404840"
  },
  {
    "text": "And so they are willing\nto allow the kernel to sit in between\nthose two programs and make sure that\nneither of them",
    "start": "2404840",
    "end": "2413530"
  },
  {
    "text": "has any bad interactions\nwith each other. So let's see how we can use\nthis kernel, the kernel combined",
    "start": "2413530",
    "end": "2420000"
  },
  {
    "text": "with virtual memory in\norder to be able to do this. So suppose this is our kernel.",
    "start": "2420000",
    "end": "2426720"
  },
  {
    "text": " So the idea is that\nthis kernel running has,",
    "start": "2426720",
    "end": "2433579"
  },
  {
    "text": "so suppose we have\ntwo processes A and B that want to communicate\nwith each other in some way.",
    "start": "2433580",
    "end": "2440472"
  },
  {
    "text": "And, we already said that we\ndon't want these two processes to be able to directly reference\ninto each other's memory",
    "start": "2440472",
    "end": "2445660"
  },
  {
    "text": "because that makes them\ndependent on each other. It means that if\nthere's a bug in A, that A can overwrite some\nmemory in B's address space",
    "start": "2445660",
    "end": "2453005"
  },
  {
    "text": "and cause B to crash. So, that's a bad thing. So instead, what we are going\nto do is we're going to create,",
    "start": "2453005",
    "end": "2458270"
  },
  {
    "text": "well, one thing we\ncan do is to create a special set of\nthese supervisor calls",
    "start": "2458270",
    "end": "2463530"
  },
  {
    "text": "that these two modules can use\nto interact with each other. So in particular, we\nmight within the kernel",
    "start": "2463530",
    "end": "2470830"
  },
  {
    "text": "maintain a queue of messages\nthat these two programs are exchanging with each\nother, a list of messages",
    "start": "2470830",
    "end": "2476760"
  },
  {
    "text": "that they're exchanging. And then, suppose A is,\nwe're going to call this guy, A is a producer.",
    "start": "2476760",
    "end": "2483190"
  },
  {
    "text": "He's creating messages. And B is a consumer.  A can call some function\nlike Put which will --",
    "start": "2483190",
    "end": "2492760"
  },
  {
    "text": "supervisor call like Put --\nwhich will cause a data item to be put on this queue.",
    "start": "2492760",
    "end": "2498300"
  },
  {
    "text": "And then sometime later, B can\ncall this supervisor call Get, and pull this value\nout of the queue, OK?",
    "start": "2498300",
    "end": "2505226"
  },
  {
    "text": "So in this way, the\nproducer and the consumer can interact with each other. They can exchange\ndata with each other and because we have\nthis gate interface,",
    "start": "2505226",
    "end": "2513242"
  },
  {
    "text": "this well-defined gate\ninterface with these Put and Get calls being\ninvoked by the kernel, the kernel can be\nvery careful, just",
    "start": "2513242",
    "end": "2520510"
  },
  {
    "text": "like in the case of the\nclient and server running on two different machines. In this case, the kernel can\ncarefully verify that these put",
    "start": "2520510",
    "end": "2527350"
  },
  {
    "text": "and get commands that these two\ndifferent modules are calling actually are correctly formed,\nthat the parameters are valid,",
    "start": "2527350",
    "end": "2534970"
  },
  {
    "text": "that they're referring to\nvalid locations in memory. And therefore, the\nkernel can sort of",
    "start": "2534970",
    "end": "2540570"
  },
  {
    "text": "ensure that these\ntwo modules don't do malicious things\nto each other or cause each other to break.",
    "start": "2540570",
    "end": "2547010"
  },
  {
    "text": "So this is an example\nhere of something that's like an\ninter-process communication.",
    "start": "2547010",
    "end": "2553440"
  },
  {
    "text": "So you saw, for\nexample, you've seen an instance of\ninter-process communication when he studied the UNIX paper.",
    "start": "2553440",
    "end": "2559260"
  },
  {
    "text": "We talked about pipes,\nand a pipe abstraction, and how that works. Well, pipes are\nsort of something that's implemented\nby the kernel in UNIX",
    "start": "2559260",
    "end": "2568100"
  },
  {
    "text": "as a way for two programs to\nexchange data with each other. And, there's lots of\nthese kinds of services",
    "start": "2568100",
    "end": "2575120"
  },
  {
    "text": "that our people tend\nto push into the kernel that the kernel provides to the\nother applications, the modules",
    "start": "2575120",
    "end": "2580610"
  },
  {
    "text": "that are running, so\nthat these modules can, for example, interact\nwith hardware or interact with each other.",
    "start": "2580610",
    "end": "2585840"
  },
  {
    "text": "So commonly within\na kernel, you'd find things like a file system,\nan interface to the network,",
    "start": "2585840",
    "end": "2592320"
  },
  {
    "text": "and you might, for example,\nfind things like an interface to the graphics hardware.",
    "start": "2592320",
    "end": "2599070"
  },
  {
    "text": "OK, there is some sort of -- so if you look at what's\nactually within a kernel,",
    "start": "2599070",
    "end": "2604570"
  },
  {
    "text": "there is a huge\namount of code that's going into these kernels. So I think we talked earlier\nabout how the Linux operating",
    "start": "2604570",
    "end": "2609930"
  },
  {
    "text": "system is many millions\nof lines of code. If you go look at\nthe Linux kernel, the Linux kernel\nis probably today",
    "start": "2609930",
    "end": "2617800"
  },
  {
    "text": "on the order of about 5 million\nlines of code, most of which, say two thirds of\nwhich, is related",
    "start": "2617800",
    "end": "2623500"
  },
  {
    "text": "to these so-called\ndevice drivers that manage this low-level hardware. So this kernel has\ngotten quite large.",
    "start": "2623500",
    "end": "2630149"
  },
  {
    "text": "And one of the side effects\nof the kernel getting large is that maybe it's harder\nto trust it, right? May be you sort of\nhave less confidence",
    "start": "2630149",
    "end": "2636524"
  },
  {
    "text": "that all the code in the\nkernel is actually correct. And you can imagine that if\nyou don't trust the kernel then the computer is not going to\nbe as stable as you like to be.",
    "start": "2636524",
    "end": "2646050"
  },
  {
    "text": "And this is one argument for why\nWindows crashes all the time is because it has all\nthese drivers in it",
    "start": "2646050",
    "end": "2651360"
  },
  {
    "text": "and these drivers\naren't necessarily all perfectly written. There are tens of millions\nof lines of code in Windows,",
    "start": "2651360",
    "end": "2657800"
  },
  {
    "text": "and some of them crash\nsome of the time, and that causes the whole\ncomputer to come down. So there's a tension in the\noperating systems community",
    "start": "2657800",
    "end": "2663361"
  },
  {
    "text": "about whether you should execute\nthese things, you should keep these things look the\nfile system or graphics system within the kernel or\nwhether you should move them",
    "start": "2663361",
    "end": "2670500"
  },
  {
    "text": "outside as separate services,\nwhich can be invoked",
    "start": "2670500",
    "end": "2675930"
  },
  {
    "text": "in the same way, for example,\nthat A and B interact with each other, by having some\ndata structure that's stored",
    "start": "2675930",
    "end": "2681150"
  },
  {
    "text": "within the kernel that buffers\nthe requests between, say, the service and this, say, for\nexample the graphics service",
    "start": "2681150",
    "end": "2689650"
  },
  {
    "text": "and the users' programs that\nwant to interact with it.",
    "start": "2689650",
    "end": "2695059"
  },
  {
    "text": "OK, so that's\nbasically it for today. What I've shown you\nis, well, actually we",
    "start": "2695060",
    "end": "2701310"
  },
  {
    "text": "have a few more minutes. Sorry. [LAUGHTER] I know you're\nall getting up to leave, but so, OK, I just\nwant to quickly touch",
    "start": "2701310",
    "end": "2712559"
  },
  {
    "text": "on one last topic which\nis that, so, what I've",
    "start": "2712560",
    "end": "2720620"
  },
  {
    "text": "shown you so far\nis how we can use the notion of virtual memory\nin order to protect the data,",
    "start": "2720620",
    "end": "2733260"
  },
  {
    "text": "protect two programs\nfrom each other so that they can't\nnecessarily interact with each other's data. But there is some situations\nin which we might actually",
    "start": "2733260",
    "end": "2740051"
  },
  {
    "text": "want to have two\nprograms able to share some data with each other. So I don't know if\nyou guys remember, but when Hari was\nlecturing earlier,",
    "start": "2740051",
    "end": "2746180"
  },
  {
    "text": "he talked about how\nthere are libraries that get linked into programs. And one of the common\nways that libraries",
    "start": "2746180",
    "end": "2752980"
  },
  {
    "text": "are structured these days is\na so-called shared library. So a shared library\nis something that",
    "start": "2752980",
    "end": "2760020"
  },
  {
    "text": "is only stored in one\nlocation in physical memory. But multiple\ndifferent modules that",
    "start": "2760020",
    "end": "2765790"
  },
  {
    "text": "are executing on that\nsystem can call functions within that shared library.",
    "start": "2765790",
    "end": "2771280"
  },
  {
    "text": "So in order to make\nthis work, right, we need to have mapped the memory\nfor the shared library that",
    "start": "2771280",
    "end": "2777425"
  },
  {
    "text": "has all the functions that\nthese other modules want to call into the address spaces\nfor both of these modules",
    "start": "2777425",
    "end": "2783180"
  },
  {
    "text": "so that they can actually\nexecute the code that's there. So the virtual memory\nsystem makes it very trivial",
    "start": "2783180",
    "end": "2788920"
  },
  {
    "text": "to do this. So suppose I have my address\nspace for some function, A,",
    "start": "2788920",
    "end": "2794529"
  },
  {
    "text": "and I have my address\nspace for some function, B. And suppose that function\nA references library",
    "start": "2794530",
    "end": "2802650"
  },
  {
    "text": "one and module B references\nlibraries one and two.",
    "start": "2802650",
    "end": "2809020"
  },
  {
    "text": "OK, so using the virtual\nmemory system, suppose we have,",
    "start": "2809020",
    "end": "2816610"
  },
  {
    "text": "so this is our physical memory. So, suppose that module\nA, program A, is loaded.",
    "start": "2816610",
    "end": "2824440"
  },
  {
    "text": "And when it's\nloaded, the program that runs other programs,\nthe loader in this case,",
    "start": "2824440",
    "end": "2834780"
  },
  {
    "text": "is going to load this\nshared library, one, as it loads for program A.",
    "start": "2834780",
    "end": "2841069"
  },
  {
    "text": "So, it's going to first\nload the code for A, and then it's going to\nload the code for one.",
    "start": "2841070",
    "end": "2846869"
  },
  {
    "text": "And, these things are going to\nbe sitting in memory somewhere. So, within A's\naddress space we're",
    "start": "2846870",
    "end": "2855607"
  },
  {
    "text": "going to have the code for\nA is going to be mapped and the code for one\nis going to be mapped. Now, when B executes, right,\nwhat we want to avoid,",
    "start": "2855607",
    "end": "2863240"
  },
  {
    "text": "so the whole purpose\nof shared libraries is to make it so that when\ntwo programs are running",
    "start": "2863240",
    "end": "2868910"
  },
  {
    "text": "and they both use\nthe same library there aren't two copies\nof that library that are in memory using twice\nas much of the memory up,",
    "start": "2868910",
    "end": "2874589"
  },
  {
    "text": "right, because there's all these\nlibraries that all computer programs share.",
    "start": "2874590",
    "end": "2880440"
  },
  {
    "text": "For example, on Linux\nthere's the libc library that implements all of\nthe standard functions",
    "start": "2880440",
    "end": "2886650"
  },
  {
    "text": "that people use in C programs. If there's 50 programs written\nin C on your Linux machine,",
    "start": "2886650",
    "end": "2893910"
  },
  {
    "text": "you don't want to have 50 copies\nof this libc library in memory. You want to have just one.",
    "start": "2893910",
    "end": "2899579"
  },
  {
    "text": "So what we want is that\nwhen module B gets loaded, we want it to map this\ncode that's already",
    "start": "2899580",
    "end": "2906440"
  },
  {
    "text": "been mapped into the address\nspace of A into its memory as well, OK? And then, of course,\nwe're going to have",
    "start": "2906440",
    "end": "2912560"
  },
  {
    "text": "to load additional memory for B\nitself, and for the library two",
    "start": "2912560",
    "end": "2918660"
  },
  {
    "text": "which A hasn't already loaded. So now, those are\ngoing to be loaded into some additional\nlocations in B's memory,",
    "start": "2918660",
    "end": "2925670"
  },
  {
    "text": "are going to be loaded into\nsome additional locations in the physical memory and\nmapped into A's memory.",
    "start": "2925670",
    "end": "2931220"
  },
  {
    "text": "So, this is just showing\nthat we can actually use this notion\nof address spaces, in addition to\nusing it to isolate",
    "start": "2931220",
    "end": "2937810"
  },
  {
    "text": "two modules from\neach other so they can't refer to each\nother's memory, we can also use it as a way\nto allow two modules to share",
    "start": "2937810",
    "end": "2943901"
  },
  {
    "text": "things with each other. And in particular, this is a\ngood idea in the case of things",
    "start": "2943902",
    "end": "2949880"
  },
  {
    "text": "like shared libraries\nwhere we have two things, both programs need to be\nable to read the same data. So they could use\nthis to do that.",
    "start": "2949880",
    "end": "2956510"
  },
  {
    "text": "OK, so what we saw today was\nthis notion of virtual memory and address spaces. We saw how we have\nthe kernel that's",
    "start": "2956510",
    "end": "2962320"
  },
  {
    "text": "a trusted intermediary\nbetween two applications. What we're going\nto see next time is how we can take this notion\nof virtualizing a computer.",
    "start": "2962320",
    "end": "2969070"
  },
  {
    "text": "We saw how to virtualize\nthe memory today. Next time we're going to see\nhow we virtualize the processor in order to create\nthe abstraction",
    "start": "2969070",
    "end": "2974806"
  },
  {
    "text": "of multiple processors\nrunning on just one single, physical\npiece of hardware. So I'll see you tomorrow.",
    "start": "2974806",
    "end": "2980790"
  },
  {
    "start": "2980790",
    "end": "2986944"
  }
]