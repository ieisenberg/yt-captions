[
  {
    "text": "[SQUEAKING] [RUSTLING] [CLICKING] ",
    "start": "0",
    "end": "11330"
  },
  {
    "text": "ANA BELL: So today,\nwe're going to wrap up talking about\nfunctions by talking about these things called\nlambda functions as a way for us",
    "start": "11330",
    "end": "18290"
  },
  {
    "text": "to create anonymous functions. And that will pretty much\nfinish our exploration",
    "start": "18290",
    "end": "23810"
  },
  {
    "text": "into creating functions. And the last part\nof the lecture,",
    "start": "23810",
    "end": "29250"
  },
  {
    "text": "we're going to introduce new\nobject types, tuples and lists. So let's remember\nwhat we did last time.",
    "start": "29250",
    "end": "38149"
  },
  {
    "text": "We ended with this example. We created a function. You guys wrote it for me. And then we wrote it and\ndebugged it together.",
    "start": "38150",
    "end": "45350"
  },
  {
    "text": "But we created this\nfunction called apply. So what was interesting\nabout this function is that one of its\nparameters was a function",
    "start": "45350",
    "end": "55100"
  },
  {
    "text": "and the other one\nwas an integer. And that seemed a\nlittle strange at first, but not when we realized\nthat functions in Python",
    "start": "55100",
    "end": "62810"
  },
  {
    "text": "are actually just objects. And so they have a name, which\nmeans that anywhere where",
    "start": "62810",
    "end": "67820"
  },
  {
    "text": "we use other kinds of objects,\nlike integers, floats, we can use them as\nparameters to functions,",
    "start": "67820",
    "end": "73520"
  },
  {
    "text": "we can use other functions\nas parameters to functions as well.",
    "start": "73520",
    "end": "78810"
  },
  {
    "text": "So here, criteria,\nwe had just used it as a variable name assuming\nthat the type of criteria",
    "start": "78810",
    "end": "85430"
  },
  {
    "text": "is a function. According to this\ndocumentation, we assume that it takes in a\nnumber and returns a Boolean.",
    "start": "85430",
    "end": "92869"
  },
  {
    "text": "So we just wrote the\nbody of the function assuming that that is true. So right here, is where we used\nthis function named criteria.",
    "start": "92870",
    "end": "102030"
  },
  {
    "text": "We assumed that it\ntakes in an integer. So we passed in the loop\nvariable I as an integer.",
    "start": "102030",
    "end": "107490"
  },
  {
    "text": "And we assumed it\nreturns a Boolean. So we were able to use\nthe return of criteria(i)",
    "start": "107490",
    "end": "112950"
  },
  {
    "text": "just as a Boolean inside\nas my condition for this if statement. So hopefully you got a chance\nto look through this example",
    "start": "112950",
    "end": "119670"
  },
  {
    "text": "from last lecture. So that's the definition\nof this function that takes in another\nfunction as a parameter.",
    "start": "119670",
    "end": "125580"
  },
  {
    "text": "And then the way we use\nthe function is down here. So \"apply\" is us making\nour function call.",
    "start": "125580",
    "end": "132390"
  },
  {
    "text": "And then, the first parameter\nis the name of a function. And the second\nparameter is an integer. So the name of the\nfunction we're running",
    "start": "132390",
    "end": "139110"
  },
  {
    "text": "is this object that\nwe defined over here. Hopefully this is just review.",
    "start": "139110",
    "end": "146750"
  },
  {
    "text": "Now, what's interesting\nabout this example is that this is_even\nfunction is pretty simple.",
    "start": "146750",
    "end": "154025"
  },
  {
    "text": "It's basically a one-liner. It doesn't do any computations\ninside the function body.",
    "start": "154025",
    "end": "159470"
  },
  {
    "text": "It basically just takes\nin a value, an input, and returns something.",
    "start": "159470",
    "end": "166700"
  },
  {
    "text": "And so we didn't really\nneed to create a function, a full-fledged function\ndefinition just",
    "start": "166700",
    "end": "173140"
  },
  {
    "text": "to do this really simple task. And in fact, that's what\na Lambda function is. It's basically a way for us to\ncreate an anonymous function,",
    "start": "173140",
    "end": "181510"
  },
  {
    "text": "a function that does\nsomething really simple, but we just don't\ngive it a name.",
    "start": "181510",
    "end": "187420"
  },
  {
    "text": "And so here is the\nfunction that we created with an actual\ndefinition up here.",
    "start": "187420",
    "end": "193480"
  },
  {
    "text": "We can create an equivalent\nanonymous function that looks like this. So this is a much more\nconcise way for us",
    "start": "193480",
    "end": "200290"
  },
  {
    "text": "to create a really simple\nfunction that we only need to use one time. So here is--",
    "start": "200290",
    "end": "206739"
  },
  {
    "text": "I'm going to just\nmap out, one by one, the important pieces\nof the Lambda function. So the Lambda keyword starts\nout the anonymous function.",
    "start": "206740",
    "end": "216695"
  },
  {
    "text": "And it tells Python\nthat we're creating this anonymous function. So lambda is not the\nname of the function,",
    "start": "216695",
    "end": "221785"
  },
  {
    "text": "it just tells Python we're going\nto create this function in one line that is nameless.",
    "start": "221785",
    "end": "227240"
  },
  {
    "text": "x is going to be any\nparameters that we expect this function to take. So if we have more than one, we\njust separate them with commas.",
    "start": "227240",
    "end": "233870"
  },
  {
    "text": "Colon is, again, the same. And then, the body\nof the function, if you can write it in one liner\nthat's not too complicated,",
    "start": "233870",
    "end": "241640"
  },
  {
    "text": "you can make a Lambda\nfunction out of it. So here, notice,\nwe don't actually have a return keyword when we're\ncreating the Lambda function.",
    "start": "241640",
    "end": "248600"
  },
  {
    "text": "We're just doing the\noperation that we wish to return the value from.",
    "start": "248600",
    "end": "254250"
  },
  {
    "text": "So the x%2=0 is basically the\nbody of my Lambda function over here.",
    "start": "254250",
    "end": "260040"
  },
  {
    "text": "So the key thing\nabout Lambda functions is that it allows you to\ncreate a really quick Function object that you basically\nwant to use only one time.",
    "start": "260040",
    "end": "267789"
  },
  {
    "text": "And so we're not\ngiving it a name. So let's look at the code. So here is my Apply function\nthat we've seen before.",
    "start": "267790",
    "end": "275700"
  },
  {
    "text": "Here is us-- I showed you this last time. I created another definition\nfor another simple function",
    "start": "275700",
    "end": "281639"
  },
  {
    "text": "that takes in an integer\nand returns a Boolean. In this case, this\nfunction just tells me whether that input\nis equal to 5.",
    "start": "281640",
    "end": "288900"
  },
  {
    "text": "And this is where we\nleft off last time we ran apply with this is_5 function.",
    "start": "288900",
    "end": "295710"
  },
  {
    "text": "So that prints apply\nwith is_5 is 1. There's only one\ninteger between 0 and 10",
    "start": "295710",
    "end": "301620"
  },
  {
    "text": "where applying\nthis returns true.",
    "start": "301620",
    "end": "306639"
  },
  {
    "text": "Now, with an anonymous\nfunction, just to show you how we would write\na Lambda function for this is_5,",
    "start": "306640",
    "end": "312879"
  },
  {
    "text": "it would look like this. So again, we tell Python we're\ncreating an anonymous function. It has just the one input\nx, colon, no return,",
    "start": "312880",
    "end": "320500"
  },
  {
    "text": "and just the body of the\nfunction is going to be the thing that we would\nlike to return, x==5.",
    "start": "320500",
    "end": "327320"
  },
  {
    "text": "So again, this notice, we're not\nactually passing in the name. There is no name for\nthis anonymous function.",
    "start": "327320",
    "end": "333350"
  },
  {
    "text": "But it works in\nthe exact same way as if we had created\nthis function over here.",
    "start": "333350",
    "end": "338450"
  },
  {
    "text": " And I can run it again.",
    "start": "338450",
    "end": "343760"
  },
  {
    "text": "And you can see \"apply with\"\nthe function name is 1. And obviously, apply with\nthis anonymous function also",
    "start": "343760",
    "end": "350150"
  },
  {
    "text": "returns 1. So just to bring\nthe point home, I want to show you one\nother way to think",
    "start": "350150",
    "end": "357450"
  },
  {
    "text": "of these anonymous functions. So here is me calling my is_even\nfunction with a parameter 8.",
    "start": "357450",
    "end": "367139"
  },
  {
    "text": "Now, in order for me to\nactually run this line here,",
    "start": "367140",
    "end": "372240"
  },
  {
    "text": "I had to have the function\ndefinition way up here. But again, it's a\nreally simple function.",
    "start": "372240",
    "end": "377280"
  },
  {
    "text": "If I only want to\nuse it one time, I can create a Lambda function. And this, over here, is\nequivalent to this function",
    "start": "377280",
    "end": "388260"
  },
  {
    "text": "definition and a function\ndefinition over here. ",
    "start": "388260",
    "end": "396270"
  },
  {
    "text": "So you can think of this\nline over here, so the part that I've highlighted, as\ncreating the definition",
    "start": "396270",
    "end": "402600"
  },
  {
    "text": "all in one line, not\ngiving it a name. And then, the\nparentheses here is",
    "start": "402600",
    "end": "408150"
  },
  {
    "text": "us calling those lines of code\nfor that function definition with that parameter 8.",
    "start": "408150",
    "end": "415319"
  },
  {
    "text": "And so the usefulness\nof Lambda functions is when you want to create these\nreally quick functions that you",
    "start": "415320",
    "end": "421800"
  },
  {
    "text": "don't want to reuse. Obviously, if we wanted\nto reuse the functionality",
    "start": "421800",
    "end": "427110"
  },
  {
    "text": "of the is_even, but we created\nit using a Lambda function, we would have to\nbasically copy this line",
    "start": "427110",
    "end": "433800"
  },
  {
    "text": "and paste it all over again. So we'd have to take this,\ncopy it, paste it, and give it",
    "start": "433800",
    "end": "439530"
  },
  {
    "text": "another input because this\nLambda function does not",
    "start": "439530",
    "end": "444690"
  },
  {
    "text": "actually create it in\nmemory with a name. There's no way for us to access\nthe body because it's nameless.",
    "start": "444690",
    "end": "451514"
  },
  {
    "text": " OK, so just to finish how\nwe call lambda functions,",
    "start": "451515",
    "end": "462970"
  },
  {
    "text": "so basically when we called\nthe apply (is_even , 10), the equivalent to calling that\nfunction name but with a Lambda",
    "start": "462970",
    "end": "472030"
  },
  {
    "text": "function is basically putting\nin the entire body of the Lambda function inside this\nother function call.",
    "start": "472030",
    "end": "479240"
  },
  {
    "text": "So here, we're both defining\nand then telling Python that this is my input\nto the function.",
    "start": "479240",
    "end": "484945"
  },
  {
    "text": " OK, so I know this\nis a You Try It.",
    "start": "484945",
    "end": "492130"
  },
  {
    "text": "But I thought that\nwe would actually run through it together step\nby step on the next few slides.",
    "start": "492130",
    "end": "498550"
  },
  {
    "text": "So let's try to understand\nwhat this is doing. I've got a function\ndefinition named do_twice.",
    "start": "498550",
    "end": "503940"
  },
  {
    "text": "It takes in one\ninput, another input. But if we look at the\nbody here, this fn--",
    "start": "503940",
    "end": "510900"
  },
  {
    "text": "that's the input-- is\nactually being called a function inside the body.",
    "start": "510900",
    "end": "517694"
  },
  {
    "text": "So we can immediately\ntell that fn is going to be a\nfunction when we actually",
    "start": "517695",
    "end": "523559"
  },
  {
    "text": "make the call to do_twice. And indeed, when we make the\ncall to do_twice down here,",
    "start": "523559",
    "end": "529170"
  },
  {
    "text": "n is mapped to 3 and the\nsecond parameter, fn, is mapped to this\nanonymous Lambda function.",
    "start": "529170",
    "end": "536565"
  },
  {
    "text": " So let's step through\none a little by little",
    "start": "536565",
    "end": "542430"
  },
  {
    "text": "in the same manner that we\nlearned last lecture, so creating actual environments\nwhenever we see a Function",
    "start": "542430",
    "end": "547769"
  },
  {
    "text": "call, mapping parameters--\nactual parameters to formal parameters,\nand following through",
    "start": "547770",
    "end": "553500"
  },
  {
    "text": "on what exactly happens\nwithin each function body.",
    "start": "553500",
    "end": "559230"
  },
  {
    "text": "So when we first make the\nFunction call, right-- or sorry, when we\nfirst run this program, if it has these three\nlines of code inside it,",
    "start": "559230",
    "end": "568220"
  },
  {
    "text": "Python creates our\nglobal environment. Inside the environment, we've\ngot one Function definition",
    "start": "568220",
    "end": "573620"
  },
  {
    "text": "here. So this is going to be\nthis Function object. And then I've got the thing\nthat actually kicks off",
    "start": "573620",
    "end": "581690"
  },
  {
    "text": "my Function calls, my program. So I've got a Print\nstatement that will print the result of doing something.",
    "start": "581690",
    "end": "589020"
  },
  {
    "text": "So the first thing\nI can see here is that I've got a\nfunction call to do_twice. So I'm going left to right.",
    "start": "589020",
    "end": "595490"
  },
  {
    "text": "The first thing I do when\nI have a Function call is I create a new environment.",
    "start": "595490",
    "end": "600700"
  },
  {
    "text": "Inside this environment\nof do_twice, I have to see what it takes in. What are its formal parameters?",
    "start": "600700",
    "end": "607090"
  },
  {
    "text": "There's one called\nn and one called fn. So there's one parameter\nn and the other one, fn.",
    "start": "607090",
    "end": "613450"
  },
  {
    "text": "And now, I basically map, one\nby one, the formal parameter",
    "start": "613450",
    "end": "618640"
  },
  {
    "text": "to the actual parameter. So the n gets mapped\nto the 3 because that's the first parameter of do_twice.",
    "start": "618640",
    "end": "624250"
  },
  {
    "text": "And the fn gets mapped to\nthis Function object here. So the fn gets mapped to\nthis Lambda function here.",
    "start": "624250",
    "end": "631495"
  },
  {
    "text": " OK, that's exactly what I said. So we've done the mapping.",
    "start": "631495",
    "end": "637540"
  },
  {
    "text": "And now that we've\ndone the mapping, we can do the body of do_twice. So the body of\ndo_twice says \"return.\"",
    "start": "637540",
    "end": "644110"
  },
  {
    "text": "And then I have to\nreplace everywhere I see \"fn\" with this\nLambda function",
    "start": "644110",
    "end": "652070"
  },
  {
    "text": "and everywhere I\nsee \"n\" with this 3.",
    "start": "652070",
    "end": "657620"
  },
  {
    "text": "Well, fn is going to\nbe a Function call. Whenever we see a\nfunction call, we",
    "start": "657620",
    "end": "663589"
  },
  {
    "text": "need to create a Function scope. So before I can do the return,\nbefore this do_twice can",
    "start": "663590",
    "end": "669080"
  },
  {
    "text": "terminate, can return its\nvalue, it sees a Function call. So when there's a\nFunction call, we",
    "start": "669080",
    "end": "675139"
  },
  {
    "text": "need to create another\nscope, another environment. This environment belongs to the\nfunction call of lambda x colon",
    "start": "675140",
    "end": "684149"
  },
  {
    "text": "x squared. Now, this function, of\ncourse, doesn't have a name. Normally I would say\nthis is the f environment",
    "start": "684150",
    "end": "691920"
  },
  {
    "text": "or this is the g environment\nor the is_even environment. But there's no\nname for this one. So I'm just going to write up\nhere the body of that function.",
    "start": "691920",
    "end": "700910"
  },
  {
    "text": "All right, well,\nin this function, again, following the rules\none by one, what we need to do",
    "start": "700910",
    "end": "706670"
  },
  {
    "text": "is figure out what are the\nparameters of this function. Well, there's one called x.",
    "start": "706670",
    "end": "713860"
  },
  {
    "text": "So here is my parameter x. And then I need to figure\nout, what does this map to.",
    "start": "713860",
    "end": "720130"
  },
  {
    "text": "Well, what it maps to is\nthe parameter inside it.",
    "start": "720130",
    "end": "725900"
  },
  {
    "text": "But the parameter\ninside it is fn(n). ",
    "start": "725900",
    "end": "731500"
  },
  {
    "text": "Do we have a return\nvalue for this yet? No, because this is\nanother function call.",
    "start": "731500",
    "end": "738650"
  },
  {
    "text": "So what ends up happening\nis this environment gets put on hold, as well,\nbecause we can't figure out",
    "start": "738650",
    "end": "746560"
  },
  {
    "text": "what parameter this\nLambda function takes in, what is its value. So we create another\nscope, another environment.",
    "start": "746560",
    "end": "755820"
  },
  {
    "text": "And in this particular\ncase, this one is going to belong to this\ninside bit here fn(n).",
    "start": "755820",
    "end": "766070"
  },
  {
    "text": "So this lambda x\nx squared is going to be the exact same function\nagain, being called again.",
    "start": "766070",
    "end": "772589"
  },
  {
    "text": "And in this particular\nenvironment, we need to map x to its input. So the input to this lambda\nx x squared is going to be n.",
    "start": "772590",
    "end": "783970"
  },
  {
    "text": "Well, this environment\ndoesn't know about n. So we pop up one level. This environment knows about n.",
    "start": "783970",
    "end": "790180"
  },
  {
    "text": "It's 3. So it passes that value along\ndown to this Lambda call.",
    "start": "790180",
    "end": "798340"
  },
  {
    "text": "So now that this inner\nhighlight yellow over here",
    "start": "798340",
    "end": "804160"
  },
  {
    "text": "knows what it needs to do,\nit needs to take in this x and return x squared. So it calculates 9 and then\nreturns 9 to whoever called it.",
    "start": "804160",
    "end": "813760"
  },
  {
    "text": "That 9 gets replaced now as\nthe input to this outer fn.",
    "start": "813760",
    "end": "822390"
  },
  {
    "text": "So just to show you\nexactly what gets replaced, that entire Function call\nthere gets replaced with 9.",
    "start": "822390",
    "end": "829810"
  },
  {
    "text": "All right, as soon as\nwe've done the return, that environment goes away. And at this point,\nthis call to lambda",
    "start": "829810",
    "end": "838120"
  },
  {
    "text": "x x squared can terminate\nas well because it takes in the number 9\nand it returns 9 squared.",
    "start": "838120",
    "end": "845180"
  },
  {
    "text": "So this one returns 81. So this entire\nFunction call is 81.",
    "start": "845180",
    "end": "851590"
  },
  {
    "text": "And as soon as it returns,\nthat environment goes away. And now do_twice can finally\nfinish its job and return 81.",
    "start": "851590",
    "end": "860500"
  },
  {
    "text": "It just basically passes\nthis value along back up. So that returns 81.",
    "start": "860500",
    "end": "865590"
  },
  {
    "text": "So this entire do_twice\ncall is going to be 81.",
    "start": "865590",
    "end": "871260"
  },
  {
    "text": "AUDIENCE: Why does lambda-- why were there\ntwo of them again? ANA BELL: There were two of\nthem because this outer fn",
    "start": "871260",
    "end": "878519"
  },
  {
    "text": "calls an inner fn, so we-- AUDIENCE: Oh. ANA BELL: Yeah, OK. ",
    "start": "878520",
    "end": "885680"
  },
  {
    "text": "OK, so that wraps up our\ndiscussion on functions. And there's a couple exercises\nin the Python file associated",
    "start": "885680",
    "end": "892610"
  },
  {
    "text": "with this lecture\nwith Lambda functions just so you can give\nit a try with those.",
    "start": "892610",
    "end": "898225"
  },
  {
    "text": "Yeah, question. AUDIENCE: With lambda functions,\nso we use print or apply, because if we [INAUDIBLE]?",
    "start": "898225",
    "end": "905470"
  },
  {
    "text": "ANA BELL: Well, apply was\njust a function that I wrote. So in this new\nexample, I was just",
    "start": "905470",
    "end": "912009"
  },
  {
    "text": "printing the result of\ncalling that function. AUDIENCE: OK. ANA BELL: Yeah.",
    "start": "912010",
    "end": "917260"
  },
  {
    "text": "So again, this kind\nof trace of what happens throughout the program\nis really, really useful.",
    "start": "917260",
    "end": "922600"
  },
  {
    "text": "So if you have some time\nto try to get that down, it'll be very,\nvery helpful as you",
    "start": "922600",
    "end": "927880"
  },
  {
    "text": "trace through some programs. OK, so that ends our\ndiscussion on functions.",
    "start": "927880",
    "end": "935930"
  },
  {
    "text": "And really, the\nonly syntax we've introduced in the\npast couple lectures were just about how to\nwrap code we've already",
    "start": "935930",
    "end": "942050"
  },
  {
    "text": "been using in a function. So not much new syntax. But today, we're going to\nintroduce some new syntax along",
    "start": "942050",
    "end": "950029"
  },
  {
    "text": "with the introduction\nof two new data types. One is called a tuple. And the other one\nis called a list.",
    "start": "950030",
    "end": "956370"
  },
  {
    "text": "So what are the data\ntypes we've seen so far? We've seen integers, floats-- basically numbers.",
    "start": "956370",
    "end": "962450"
  },
  {
    "text": "We've seen Booleans\nas truth values. We've seen this none type,\ntype which has one value none.",
    "start": "962450",
    "end": "968360"
  },
  {
    "text": "And we actually also saw\nthe string data type. We could think of\nthe string data type",
    "start": "968360",
    "end": "973820"
  },
  {
    "text": "as a compound data type, like a\nsequence of single characters. And in fact, we were using\nthat string in that way",
    "start": "973820",
    "end": "981980"
  },
  {
    "text": "because we were able to\nindex into the string to grab the\ncharacter at index 0,",
    "start": "981980",
    "end": "987050"
  },
  {
    "text": "sort of slice the substring to\nget the length of the string. Today, we're going to introduce\ntwo more compound data",
    "start": "987050",
    "end": "993460"
  },
  {
    "text": "types, so these things called\ntuples and these things called lists. And throughout the\nlecture, you should really",
    "start": "993460",
    "end": "1000180"
  },
  {
    "text": "think about how it's very,\nvery similar to the strings",
    "start": "1000180",
    "end": "1005339"
  },
  {
    "text": "that we've already seen. So a lot of the operations,\nI'm actually going to skip.",
    "start": "1005340",
    "end": "1011070"
  },
  {
    "text": "Aside from the syntax of how\nwe denote a tuple or a list,",
    "start": "1011070",
    "end": "1016860"
  },
  {
    "text": "really, the operations that\nwe do with tuples and lists are going to be exactly\nthe same as the ones that we did with strings.",
    "start": "1016860",
    "end": "1022980"
  },
  {
    "text": "So if you understand indexing\nand slicing and getting the length of the\nstring, all that stuff, you'll understand how to do\nthat for tuples and lists.",
    "start": "1022980",
    "end": "1032149"
  },
  {
    "text": "All right, so\ntuples are indexable ordered sequences of objects. That's kind of a lot.",
    "start": "1032150",
    "end": "1037490"
  },
  {
    "text": "So we can break that down. So first of all, it's\na sequence of objects, just like a string was a\nsequence of single characters.",
    "start": "1037490",
    "end": "1046160"
  },
  {
    "text": "A tuple is going to be a\nsequence of not just characters but any kind of object.",
    "start": "1046160",
    "end": "1052190"
  },
  {
    "text": "Ordered sequence\nmeans that there will be an order to this sequence. So there's going to be an\nobject at the first position",
    "start": "1052190",
    "end": "1059539"
  },
  {
    "text": "in my tuple, an object at the\nsecond position in my tuple, and so on, just like\nthere was a character at the first position, character\nat the second position,",
    "start": "1059540",
    "end": "1066403"
  },
  {
    "text": "and so on. And indexable ordered\nsequence means that we can index into this object.",
    "start": "1066403",
    "end": "1072210"
  },
  {
    "text": "So we can grab the\nelement at index 0, grab the element index\n1, and so on and so on.",
    "start": "1072210",
    "end": "1079240"
  },
  {
    "text": "So how do we create\nthese tuples? I should note that some\npeople call them \"tup-ples\"",
    "start": "1079240",
    "end": "1085320"
  },
  {
    "text": "because they're just kind of\nlike an n-tuple kind of thing. So you can call them\n\"too-ples\" or \"tup-ples,\"",
    "start": "1085320",
    "end": "1091260"
  },
  {
    "text": "however you'd like. All right, so how do we\ncreate these tuple objects?",
    "start": "1091260",
    "end": "1097060"
  },
  {
    "text": "Well, we can create a tuple\nobject that's empty using just",
    "start": "1097060",
    "end": "1102160"
  },
  {
    "text": "open and closed parentheses. So we could create strings\nusing just the open and closed",
    "start": "1102160",
    "end": "1108310"
  },
  {
    "text": "quotation marks. We create an empty\ntuple by doing open and closed parentheses. Now, this is different\nthan functions.",
    "start": "1108310",
    "end": "1116050"
  },
  {
    "text": "This is a little bit similar. It might be a bit confusing\nbecause we use parentheses to make Function calls.",
    "start": "1116050",
    "end": "1121480"
  },
  {
    "text": "But notice, it's just the\nparentheses by themselves. There's no function\nname, nothing",
    "start": "1121480",
    "end": "1126550"
  },
  {
    "text": "preceding the parentheses. So to Python, it's not\ngoing to be confusing when you just do this.",
    "start": "1126550",
    "end": "1133320"
  },
  {
    "text": "You can create a tuple\nwith one element in it by putting open closed\nparentheses, that element",
    "start": "1133320",
    "end": "1140220"
  },
  {
    "text": "that you want to\nadd to your tuple, and then a comma right after it. Now, the comma is\nthere to differentiate",
    "start": "1140220",
    "end": "1150490"
  },
  {
    "text": "a tuple with one element from\nusing parentheses as precedence",
    "start": "1150490",
    "end": "1156309"
  },
  {
    "text": "over an operation. So just as an example, if\nI create a is equal to 5,",
    "start": "1156310",
    "end": "1162850"
  },
  {
    "text": "like this, I'm using\nparentheses around an integer. But the type of a\nis still an integer.",
    "start": "1162850",
    "end": "1170410"
  },
  {
    "text": "I'm basically just using\nthe parentheses to say, I want to do this 5 before\ndoing anything else, which",
    "start": "1170410",
    "end": "1177730"
  },
  {
    "text": "is a little strange to do. And write the value of a is 5. But if I do b is equal\nto the tuple 4 comma,",
    "start": "1177730",
    "end": "1186900"
  },
  {
    "text": "this tells Python that this\nis now a sequence of objects, but there's just one\nobject in my sequence.",
    "start": "1186900",
    "end": "1193419"
  },
  {
    "text": "So the type of b is a\ntuple, not an integer. ",
    "start": "1193420",
    "end": "1200710"
  },
  {
    "text": "And if I ask what\nb is, you can see it's 4 comma in parentheses.",
    "start": "1200710",
    "end": "1207950"
  },
  {
    "text": "It's a tuple with\none object in it. ",
    "start": "1207950",
    "end": "1213419"
  },
  {
    "text": "OK, so to create a tuple\nwith many objects in it, we basically put in\nparentheses all the objects",
    "start": "1213420",
    "end": "1219210"
  },
  {
    "text": "I want to add in my tuple\nseparated by commas. So here, I've got\nmy first element",
    "start": "1219210",
    "end": "1224640"
  },
  {
    "text": "in my tuple, integer\n2, second element in the tuple, the string\nmit, and the third element",
    "start": "1224640",
    "end": "1229919"
  },
  {
    "text": "in my tuple being the integer 3. And notice, we can mix and match\nnow objects of different types",
    "start": "1229920",
    "end": "1235830"
  },
  {
    "text": "within my tuple object. So here, I've got\nintegers and strings. And integers, I can even\nadd floats and Booleans.",
    "start": "1235830",
    "end": "1242820"
  },
  {
    "text": "And whatever object\ntypes I'd like, I can make them elements\nto my tuple, which is pretty cool, right? Different than strings\nin that respect,",
    "start": "1242820",
    "end": "1249990"
  },
  {
    "text": "but still in order\nwithin my tuple.",
    "start": "1249990",
    "end": "1255170"
  },
  {
    "text": "And so the rest of this\nis actually operations that we've already\nseen on strings.",
    "start": "1255170",
    "end": "1260700"
  },
  {
    "text": "So I'm not going to go through\nthem in too much detail. We can use the square bracket\nto index into the tuple,",
    "start": "1260700",
    "end": "1266730"
  },
  {
    "text": "so to grab the element\nat a particular index. Again, indexing starts from 0.",
    "start": "1266730",
    "end": "1272230"
  },
  {
    "text": "We can use the plus operator to\nconcatenate two tuples together to create one larger tuple with\nall those elements in a row.",
    "start": "1272230",
    "end": "1281300"
  },
  {
    "text": "We can slice down here. We can get the length\nof the tuple, which tells us how many elements\nare in it, so three elements.",
    "start": "1281300",
    "end": "1290180"
  },
  {
    "text": "We can use the max, min,\nsome sum things like that to grab the maximum\nelement, minimum element,",
    "start": "1290180",
    "end": "1297530"
  },
  {
    "text": "sum all the elements of my\ntuple and things like that. Notice that here I've got\nparentheses for the max",
    "start": "1297530",
    "end": "1303530"
  },
  {
    "text": "function call and then another\nset of parentheses here to denote that I\nhave one tuple object",
    "start": "1303530",
    "end": "1310129"
  },
  {
    "text": "I'd like to grab the max of.  And then, the last\nbit here is something",
    "start": "1310130",
    "end": "1317309"
  },
  {
    "text": "that we're going to see\nthat's different with lists in next lecture, not today. But basically, you might\nthink that once you create",
    "start": "1317310",
    "end": "1325860"
  },
  {
    "text": "this tuple object in memory,\nthat has 2, mit, 3 as its three elements in it, you\ncan go into memory",
    "start": "1325860",
    "end": "1332280"
  },
  {
    "text": "and modify one of the elements. If I don't want the\nmiddle one to be a string, I want it to be\na common integer,",
    "start": "1332280",
    "end": "1337655"
  },
  {
    "text": "you might think that you\nshould be able to change it. You can with lists, as we'll\nsee in the next lecture.",
    "start": "1337655",
    "end": "1343660"
  },
  {
    "text": "But you cannot do\nthis with tuples. Just like once we created\nan integer 5 inside memory,",
    "start": "1343660",
    "end": "1350820"
  },
  {
    "text": "we can't go into memory and tell\nPython to change this 5 to a 6. It's just not allowed.",
    "start": "1350820",
    "end": "1356820"
  },
  {
    "text": "Or once we created a\nstring abc in memory, you can't go into memory\nand change the string.",
    "start": "1356820",
    "end": "1362010"
  },
  {
    "text": "You can certainly\ncreate new objects that are based on this string. But you can't go in and modify\nthat object once it's created.",
    "start": "1362010",
    "end": "1369940"
  },
  {
    "text": "So once you've made\nyour sequence of tuples, you cannot go in and change it. ",
    "start": "1369940",
    "end": "1377070"
  },
  {
    "text": "Yeah? AUDIENCE: I have a question. So if you just rewrote t equals,\nand then [INAUDIBLE] different,",
    "start": "1377070",
    "end": "1382890"
  },
  {
    "text": "it would be like an error? ANA BELL: If you wrote t equals\nand then something different? AUDIENCE: Yeah, [INAUDIBLE]\nyou can't modify one thing.",
    "start": "1382890",
    "end": "1390149"
  },
  {
    "text": "ANA BELL: Yeah, that's\na good question. So the variable t, so the name\nt and the object it's bound to",
    "start": "1390150",
    "end": "1397530"
  },
  {
    "text": "are two different things. So the object it's bound to\nwill still sit in memory. We're just going to lose\nthe binding from it.",
    "start": "1397530",
    "end": "1404230"
  },
  {
    "text": "So that t initially\npoints to this one. But then if you say t equals\nsomething else later on,",
    "start": "1404230",
    "end": "1409590"
  },
  {
    "text": "this one still stays there. But that t is going to\npoint to this new thing. So the object itself\nis still in memory.",
    "start": "1409590",
    "end": "1416580"
  },
  {
    "text": "We've just lost\nthe binding to it. And that's something\nwe did way back in the first early lectures\nwhere we kind of rebound",
    "start": "1416580",
    "end": "1422970"
  },
  {
    "text": "variables, yeah. So yeah, it's the same idea. ",
    "start": "1422970",
    "end": "1430490"
  },
  {
    "text": "One interesting thing that\nwe can do now with tuples that we couldn't with strings\nis to have elements of a tuple",
    "start": "1430490",
    "end": "1438000"
  },
  {
    "text": "be another tuple. And that's what this example\nis going to showcase.",
    "start": "1438000",
    "end": "1443350"
  },
  {
    "text": "So here, I've got an integer\n2 as my first element. My second element\nis the string a.",
    "start": "1443350",
    "end": "1448770"
  },
  {
    "text": "My third element\nis my integer 4. And my fourth element\nis a tuple object",
    "start": "1448770",
    "end": "1454440"
  },
  {
    "text": "that just happens to have\ntwo elements inside it. But this tuple object that\nI'm referencing by seq,",
    "start": "1454440",
    "end": "1464880"
  },
  {
    "text": "seq only has four\nelements in it. It just so happens that\nthe last one is a tuple.",
    "start": "1464880",
    "end": "1471120"
  },
  {
    "text": "But I'm not going\nto dive further down to figure out if I have\ntuples that have subtuples",
    "start": "1471120",
    "end": "1476549"
  },
  {
    "text": "that have subtuples and so on. Only top level I care about\nhow many elements I have.",
    "start": "1476550",
    "end": "1483210"
  },
  {
    "text": "And so when I print\nthe length of seq, it's going to be 4\nbecause I have 1, 2, 3, and then this last\nobject is just one object",
    "start": "1483210",
    "end": "1491480"
  },
  {
    "text": "that takes up one slot. It happens to have\nelements within it.",
    "start": "1491480",
    "end": "1497370"
  },
  {
    "text": "And so the rest of\nthese are basically what we've seen with strings\nexcept for this one here.",
    "start": "1497370",
    "end": "1503330"
  },
  {
    "text": "If we were to index into\nthe last element here of seq, 1 comma 2, well,\nthis is another tuple, right?",
    "start": "1503330",
    "end": "1511529"
  },
  {
    "text": "So it should follow\nthat I can then take that tuple and\nfurther index into it.",
    "start": "1511530",
    "end": "1518009"
  },
  {
    "text": "And so that's what this\nline here is doing. When we read an expression,\nwe go left to right.",
    "start": "1518010",
    "end": "1524700"
  },
  {
    "text": "So basically, seq at index 3\ngrabs for me the 1 comma 2. And then if I further index\ninto 1 comma 2 at index 0,",
    "start": "1524700",
    "end": "1533659"
  },
  {
    "text": "I'm going to grab the number 1. So I'm basically chaining\nall these indexing operations",
    "start": "1533660",
    "end": "1540674"
  },
  {
    "text": "together.  And then this is,\nagain, very similar to",
    "start": "1540675",
    "end": "1548351"
  },
  {
    "text": "what we've seen from strings. So it's just slicing instead\nof indexing into the tuple. I'm not going to go\nthrough it today.",
    "start": "1548352",
    "end": "1556159"
  },
  {
    "text": "But I encourage you to\ntype them in and type in some other things as you\nmight have done with strings.",
    "start": "1556160",
    "end": "1564490"
  },
  {
    "text": "One thing that I\ndo want to mention is that we can\niterate over a tuple",
    "start": "1564490",
    "end": "1571000"
  },
  {
    "text": "just like we could\niterate over a string. I don't mean over indices. But I mean over the\nelements directly.",
    "start": "1571000",
    "end": "1578090"
  },
  {
    "text": "So when we iterated\nover a string directly, we were able to grab\nin our loop variable",
    "start": "1578090",
    "end": "1584260"
  },
  {
    "text": "the characters at each index. Similarly, we can\niterate over a tuple",
    "start": "1584260",
    "end": "1590480"
  },
  {
    "text": "to grab the elements\nat each index directly. So here, I've got\nfor e in seq is",
    "start": "1590480",
    "end": "1597140"
  },
  {
    "text": "going to make my\nLoop variable e take on each element of\nthe tuple directly,",
    "start": "1597140",
    "end": "1603670"
  },
  {
    "text": "not the index but each element. So as I'm looping through,\ne will first have a value 2,",
    "start": "1603670",
    "end": "1609280"
  },
  {
    "text": "then it'll have a value a,\nthen it'll have a value 4, and lastly, it'll have\nthis value 1 comma 2.",
    "start": "1609280",
    "end": "1615669"
  },
  {
    "text": "And so if I just print\nthat out directly, you'll see these\nvalues printed out. ",
    "start": "1615670",
    "end": "1624470"
  },
  {
    "text": "So very, very similar to\nsome of the operations we've done with strings. The only difference\nis we just now",
    "start": "1624470",
    "end": "1630067"
  },
  {
    "text": "have to be careful that our\ntuples can have elements that are other tuples or\nbasically any object in Python.",
    "start": "1630067",
    "end": "1639070"
  },
  {
    "text": "So what do we use tuples for? Well, there was this one\nexample we did way back at the beginning of 6.100L where\nwe tried to swap variables.",
    "start": "1639070",
    "end": "1649450"
  },
  {
    "text": "And we basically\nsaid that this way didn't work because we\noverwrote the variable. We overwrote the\nvariable, and then we",
    "start": "1649450",
    "end": "1655990"
  },
  {
    "text": "weren't able to get back to\nthe value that was overwritten. So our solution was to create\nthis temporary variable",
    "start": "1655990",
    "end": "1662980"
  },
  {
    "text": "to save the value\nbefore we overwrote it, then overwrite the variable, and\nthen use the temporary variable",
    "start": "1662980",
    "end": "1669520"
  },
  {
    "text": "to grab back that saved value. Well, it turns out\ntuples actually allow us to do these three lines\nof code in one line of code",
    "start": "1669520",
    "end": "1678299"
  },
  {
    "text": "here. So we can say x comma\ny equals y comma x.",
    "start": "1678300",
    "end": "1685500"
  },
  {
    "text": "So this is an assignment. And it's allowed because the\nleft-hand side is basically",
    "start": "1685500",
    "end": "1690960"
  },
  {
    "text": "a set of variables in sequence. And the right-hand side\ngets evaluated first",
    "start": "1690960",
    "end": "1698690"
  },
  {
    "text": "as we would an\nassignment statement. So y gets the value 2 because\nthat's what it is up here.",
    "start": "1698690",
    "end": "1704360"
  },
  {
    "text": "And x gets the value 1. So y is 2, x is 1 over here\non the right-hand side. And then Python, one at a\ntime, matches the values",
    "start": "1704360",
    "end": "1712610"
  },
  {
    "text": "on the right to the values on\nthe left separated by commas. So basically what we have\nhere is x is equal to 2,",
    "start": "1712610",
    "end": "1719960"
  },
  {
    "text": "y is equal to 1, and then\nthe values have been rebound. ",
    "start": "1719960",
    "end": "1726810"
  },
  {
    "text": "So very, very, very useful-- very good use of tuples here.",
    "start": "1726810",
    "end": "1733640"
  },
  {
    "text": "Now, this idea can actually\nbe taken one step further. And we can use tuples to\nreturn more than one value",
    "start": "1733640",
    "end": "1742880"
  },
  {
    "text": "from a function. Now, I know in the past\ncouple lectures I said,",
    "start": "1742880",
    "end": "1749480"
  },
  {
    "text": "basically you can't return more\nthan one thing from a function.",
    "start": "1749480",
    "end": "1754520"
  },
  {
    "text": "A function returns\nonly one thing. As soon as it sees\na return statement, it takes the value associated\nwith that return and returns it",
    "start": "1754520",
    "end": "1762110"
  },
  {
    "text": "back to whoever called it. But tuples are one object.",
    "start": "1762110",
    "end": "1767730"
  },
  {
    "text": "They just so happen\nto have elements that can have different values.",
    "start": "1767730",
    "end": "1772767"
  },
  {
    "text": "You can have a tuple\nwith 10 elements in it. You can have a tuple\nwith two elements in it. Using a tuple, we\ncan actually return",
    "start": "1772767",
    "end": "1780690"
  },
  {
    "text": "one object, the tuple itself. It just so happens to have\na whole bunch of values",
    "start": "1780690",
    "end": "1786300"
  },
  {
    "text": "that my function\nmight calculate. And so by way of the\ntuple, I'm actually",
    "start": "1786300",
    "end": "1791340"
  },
  {
    "text": "able to return a whole\nbunch of different values through this one object tuple.",
    "start": "1791340",
    "end": "1797100"
  },
  {
    "text": "And so in this\nparticular example, I have a function\nthat calculates the quotient and the remainder\nwhen x is divided by y.",
    "start": "1797100",
    "end": "1805210"
  },
  {
    "text": "Yeah, so the function\nitself uses integer division",
    "start": "1805210",
    "end": "1812590"
  },
  {
    "text": "to find the quotient and\nuses the remainder operator to find the\nremainder, and then it",
    "start": "1812590",
    "end": "1817660"
  },
  {
    "text": "returns that q\ncalculation, some number, and that r calculation, another\nnumber, as elements to a tuple.",
    "start": "1817660",
    "end": "1825190"
  },
  {
    "text": "And Python returns\nthis one tuple object using this line\nhere returning this object.",
    "start": "1825190",
    "end": "1834000"
  },
  {
    "text": "And so when I make this Function\ncall to quotient and remainder 10 comma 3, it's\ngoing to go in, it's",
    "start": "1834000",
    "end": "1840890"
  },
  {
    "text": "going to calculate the quotient\nto be 3, the remainder to be 1, and it's going to return\none object, 3 comma 1.",
    "start": "1840890",
    "end": "1848300"
  },
  {
    "text": "And then that gets\nassigned to this variable, that I named \"both\" in\nthis particular case.",
    "start": "1848300",
    "end": "1853670"
  },
  {
    "text": " If I wanted to access the\nquotient part of both,",
    "start": "1853670",
    "end": "1859659"
  },
  {
    "text": "I would do both\nsquare brackets 0. And the remainder part of both\nwould be both square bracket 1,",
    "start": "1859660",
    "end": "1865090"
  },
  {
    "text": "accessing the zeroth element\nand the first element of the return. Now, if I wanted to explicitly\nsave the quotient and remainder",
    "start": "1865090",
    "end": "1872690"
  },
  {
    "text": "as variables after\nthey got returned, I can actually do the trick\nwe saw on the previous slide.",
    "start": "1872690",
    "end": "1879568"
  },
  {
    "text": "The trick that we saw\non the previous slide was x comma y equals\nsome other tuple. Well, that's what\nI'm doing here.",
    "start": "1879568",
    "end": "1886350"
  },
  {
    "text": "I'm making a function called a\nquotient and remainder 5 comma 2. That's going to\nreturn 2 comma 1.",
    "start": "1886350",
    "end": "1892870"
  },
  {
    "text": "And then I'm going to have quote\ncomma rem equals 2 comma 1.",
    "start": "1892870",
    "end": "1898210"
  },
  {
    "text": "So Python, one at\na time, is going to map the quote to\n2 and the rem to 1.",
    "start": "1898210",
    "end": "1904419"
  },
  {
    "text": "And so what that means for\nus in terms of the code is we can then do whatever\nwe'd like in the remaining",
    "start": "1904420",
    "end": "1911800"
  },
  {
    "text": "part of the code, code assuming\nthat quote and rem are just regular variables.",
    "start": "1911800",
    "end": "1917150"
  },
  {
    "text": "So here, I'm just showing\nthat you can print them out in these print statements. So here, I have quotient\nis 2 and remainder",
    "start": "1917150",
    "end": "1924250"
  },
  {
    "text": "is 1 as these two\nlines of code here. ",
    "start": "1924250",
    "end": "1933059"
  },
  {
    "text": "OK, so the big idea of\ntuples and the reason why we use them is you\ncan use them to return",
    "start": "1933060",
    "end": "1941100"
  },
  {
    "text": "more than one value via this one\ntuple object from a function.",
    "start": "1941100",
    "end": "1947380"
  },
  {
    "text": "And so in this way, we\ncan have a function that does a whole bunch\nof calculations, returns this one object\nthat might contain",
    "start": "1947380",
    "end": "1955350"
  },
  {
    "text": "all of these different\nvalues as the elements to this tuple object. So let's have you work on\nthis for a couple of minutes.",
    "start": "1955350",
    "end": "1963919"
  },
  {
    "text": "Write a function that\nmeets the specification. So it's called char_counts. I've got an input that is a\nstring s, lowercase characters.",
    "start": "1963920",
    "end": "1972500"
  },
  {
    "text": "Assume it's just got\nvowels and consonants. Return for me a tuple where\nthe first element in the tuple",
    "start": "1972500",
    "end": "1978140"
  },
  {
    "text": "is how many vowels are in s. And the second\nelement of the tuple is how many consonants are in s.",
    "start": "1978140",
    "end": "1983320"
  },
  {
    "text": "So it should be pretty\nstraightforward. A hint I have here,\nif you don't remember,",
    "start": "1983320",
    "end": "1988460"
  },
  {
    "text": "that will make\nyour life easier is try to remember how to check\nif a character is in a string,",
    "start": "1988460",
    "end": "1994650"
  },
  {
    "text": "so using the special n keyword. We saw an example of\nthis probably back",
    "start": "1994650",
    "end": "2001580"
  },
  {
    "text": "when we learned about strings. ",
    "start": "2001580",
    "end": "2006870"
  },
  {
    "text": "So you can try to write your\ncode around line 65-ish. And then we can\nwrite it together.",
    "start": "2006870",
    "end": "2012830"
  },
  {
    "text": " All right, so how would\nyou approach this problem?",
    "start": "2012830",
    "end": "2018990"
  },
  {
    "text": " So what's the first step here?",
    "start": "2018990",
    "end": "2025210"
  },
  {
    "text": "Yeah. AUDIENCE: Make a string that\ncontains all the vowels? ANA BELL: Yep, we\ncan make a string",
    "start": "2025210",
    "end": "2031250"
  },
  {
    "text": "that contains all the vowels. Vowels equals\naeiou in lowercase.",
    "start": "2031250",
    "end": "2037179"
  },
  {
    "text": "Yep, nice. ",
    "start": "2037180",
    "end": "2042690"
  },
  {
    "text": "Next?  Yeah.",
    "start": "2042690",
    "end": "2048030"
  },
  {
    "text": "AUDIENCE: If the [INAUDIBLE]\nin that list, then",
    "start": "2048030",
    "end": "2054100"
  },
  {
    "text": "we could have a number\n[INAUDIBLE] track, like plus equals [INAUDIBLE]?",
    "start": "2054100",
    "end": "2059679"
  },
  {
    "text": "ANA BELL: Yep. Yep, vowels plus equals 1.",
    "start": "2059679",
    "end": "2064860"
  },
  {
    "text": "And else? We know it's not\na vowel, so we'll keep a consonants\ncount plus equals 1.",
    "start": "2064860",
    "end": "2072270"
  },
  {
    "text": "So this is the consonant count. And this is the vowels count. ",
    "start": "2072270",
    "end": "2081550"
  },
  {
    "text": "What is char in\nthis case though? AUDIENCE: [INAUDIBLE]\nchar In that?",
    "start": "2081550",
    "end": "2089010"
  },
  {
    "text": "ANA BELL: Yeah, exactly. We have to loop,\nso for char in s.",
    "start": "2089010",
    "end": "2094227"
  },
  {
    "text": "So we need to look at\nevery character inside s. And this is where, now that\nwe're dealing with things that",
    "start": "2094227",
    "end": "2103609"
  },
  {
    "text": "might be non integers\nin my for loops, we can write little notes for\nourselves that's something",
    "start": "2103610",
    "end": "2109010"
  },
  {
    "text": "like \"char is a then b\nthen c,\" or something like",
    "start": "2109010",
    "end": "2114710"
  },
  {
    "text": "that to remind us that\nchar is not the index, but it's an actual thing.",
    "start": "2114710",
    "end": "2122320"
  },
  {
    "text": "And then what else\nwe need to do? AUDIENCE: [INAUDIBLE]",
    "start": "2122320",
    "end": "2128742"
  },
  {
    "text": " ANA BELL: Yeah, we can\ninitiate c and v 0.",
    "start": "2128742",
    "end": "2133850"
  },
  {
    "text": "We can use the trick where you\ndo c comma v equals 0 comma 0.",
    "start": "2133850",
    "end": "2138860"
  },
  {
    "text": "Or we can just do it on\nseparate lines, all good. And then lastly, this\ndoes the work for us.",
    "start": "2138860",
    "end": "2146520"
  },
  {
    "text": "But the function needs to\nhave something to show for it. AUDIENCE: [INAUDIBLE]? ANA BELL: Yeah,\nafter the loop, we'll",
    "start": "2146520",
    "end": "2154059"
  },
  {
    "text": "return the tuple c comma v-- sorry, v comma c probably.",
    "start": "2154060",
    "end": "2160090"
  },
  {
    "text": " And if we run it, it\nmatches what we expected.",
    "start": "2160090",
    "end": "2168440"
  },
  {
    "text": "So 1, 3 and 0, 5. And you can imagine adding\na couple more test cases, maybe something with an empty\nstring that should return 0 0,",
    "start": "2168440",
    "end": "2176410"
  },
  {
    "text": "and maybe something with\nall vowels, which should return some number comma 0. ",
    "start": "2176410",
    "end": "2187820"
  },
  {
    "text": "OK, so one other thing\nwe can do with tuples is to create these\nfunctions that take a variable number of\narguments is in as a parameter.",
    "start": "2187820",
    "end": "2196530"
  },
  {
    "text": "So remember, when\nwe define functions, we basically tell\nPython how many parameter we expect it to take.",
    "start": "2196530",
    "end": "2203120"
  },
  {
    "text": "But it's possible to have some\nfunctions, for example, max or min, that can take\nin two parameters here.",
    "start": "2203120",
    "end": "2209960"
  },
  {
    "text": "And notice, there's\nno extra parentheses. Or we can just add as\nmany numbers as we'd like",
    "start": "2209960",
    "end": "2216120"
  },
  {
    "text": "and it will still work\nto take the max of all of these sets of numbers. And again, we didn't\nmake this inner thing",
    "start": "2216120",
    "end": "2223789"
  },
  {
    "text": "a tuple, although it works even\nwith the tuple as an object.",
    "start": "2223790",
    "end": "2228840"
  },
  {
    "text": "But our goal here is to try\nto write a function that can take in a variable number\nof arguments, either two",
    "start": "2228840",
    "end": "2235780"
  },
  {
    "text": "or three or 10 or 20,\nand it should still work. And the way we do that is using\na parameter that's defined",
    "start": "2235780",
    "end": "2243380"
  },
  {
    "text": "using the star notation. So as soon as you create a\nfunction and its parameter",
    "start": "2243380",
    "end": "2249660"
  },
  {
    "text": "is star and then the\nname of your input, Python basically\ntakes that input",
    "start": "2249660",
    "end": "2254700"
  },
  {
    "text": "and assigns it to a\ntuple behind the scenes. So you don't have to.",
    "start": "2254700",
    "end": "2259770"
  },
  {
    "text": "And so, in this\nparticular case, we're not writing our own\nmax or min or some, we're writing our\nown mean function.",
    "start": "2259770",
    "end": "2268170"
  },
  {
    "text": "And this mean function will\ntake in a variable number of arguments.",
    "start": "2268170",
    "end": "2273180"
  },
  {
    "text": "And it's going to figure out\nthe mean of all of these values. The way it does that\nis pretty simple now",
    "start": "2273180",
    "end": "2279630"
  },
  {
    "text": "that we know that we\ncan just treat args as a tuple of a\nbunch of numbers.",
    "start": "2279630",
    "end": "2285640"
  },
  {
    "text": "So we just loop through all\nof the elements in args, we add up this running\ntotal, and at the end,",
    "start": "2285640",
    "end": "2292440"
  },
  {
    "text": "we return the total divided by\nhow many arguments were given, so return total divided\nby the length of the args.",
    "start": "2292440",
    "end": "2299260"
  },
  {
    "text": "And then, when we\nmake a Function call to the function we\njust wrote mean here,",
    "start": "2299260",
    "end": "2306840"
  },
  {
    "text": "args will become\na tuple that's all of the parameters inside there.",
    "start": "2306840",
    "end": "2313170"
  },
  {
    "text": "And so here is\nthat example, which means that we can use\nour function to get the mean of 1, 2, 3, 4, 5, 6.",
    "start": "2313170",
    "end": "2321710"
  },
  {
    "text": "But we can use the\nexact same function to get the mean of\n6, 0, 9 for example. So first case, I have six\nparameters as my input.",
    "start": "2321710",
    "end": "2329610"
  },
  {
    "text": "But in the second case, I've\ngot only three parameters as my input. And that little star in my\narguments allows me to do this.",
    "start": "2329610",
    "end": "2340580"
  },
  {
    "text": "Now, I did write a version\nof this mean for you guys down here where I'm\nassuming that mean",
    "start": "2340580",
    "end": "2348940"
  },
  {
    "text": "doesn't have the\nstar, so assuming that args is a tuple itself. And in that case, you would\nhave to call the mean function",
    "start": "2348940",
    "end": "2357530"
  },
  {
    "text": "by explicitly passing in only\none argument that is a tuple. So this extra set of parentheses\nmakes my argument the tuple.",
    "start": "2357530",
    "end": "2366119"
  },
  {
    "text": "So take a closer look at\nthat if you're interested. ",
    "start": "2366120",
    "end": "2372360"
  },
  {
    "text": "So I want to\nintroduce lists today. And a lot of the slides here\nare basically copy and paste",
    "start": "2372360",
    "end": "2380750"
  },
  {
    "text": "from the tuple slides. The only difference\nin these slides that I have regarding lists\nis the way we define a list.",
    "start": "2380750",
    "end": "2390240"
  },
  {
    "text": "So in terms of defining a tuple,\nwe were using parentheses.",
    "start": "2390240",
    "end": "2395630"
  },
  {
    "text": "But to define a list, we use\nopen closed square brackets. But otherwise, a lot\nof the operations",
    "start": "2395630",
    "end": "2402170"
  },
  {
    "text": "are exactly the same as\ntuples and as strings. We're not going to look at\nwhat it means for lists to be",
    "start": "2402170",
    "end": "2409970"
  },
  {
    "text": "mutable this lecture. But next lecture will\nbe all about mutability. But today, I just want to give\nyou a sense of what a list is.",
    "start": "2409970",
    "end": "2418980"
  },
  {
    "text": "So as I said, this is copy and\npaste from the tuple slide. When I create a list, I just use\nopen and close square brackets.",
    "start": "2418980",
    "end": "2427500"
  },
  {
    "text": "This creates a list for me\nwith no elements within it. Creating a list with\none element in it",
    "start": "2427500",
    "end": "2432970"
  },
  {
    "text": "doesn't need that extra\ncomma because there's no confusion with\noperation precedence",
    "start": "2432970",
    "end": "2438760"
  },
  {
    "text": "with square brackets. So there's no need for that. But otherwise,\neverything else here",
    "start": "2438760",
    "end": "2444369"
  },
  {
    "text": "is exactly the same\nas with tuples. We're just using square\nbrackets instead of parentheses.",
    "start": "2444370",
    "end": "2450820"
  },
  {
    "text": "So remember, strings and\ntuples, it's the same. What I do want to mention\nand talk a little bit about,",
    "start": "2450820",
    "end": "2457530"
  },
  {
    "text": "now that we've introduced\ntuples and lists, is the idea of having our\nloops iterate over elements",
    "start": "2457530",
    "end": "2464310"
  },
  {
    "text": "of tuples and lists directly. And I'm going to basically\nwrite these slides in the context of lists. But the exact same thing is\napplicable to tuples, as well.",
    "start": "2464310",
    "end": "2473450"
  },
  {
    "text": "So here is an\nexample of us wanting to find the sum of the\nelements in a list.",
    "start": "2473450",
    "end": "2479930"
  },
  {
    "text": "The code on the left is a\nlittle bit hard to parse, right? We've got a loop variable\ngoing through range length n.",
    "start": "2479930",
    "end": "2488059"
  },
  {
    "text": "And then I have to\nkeep my running total. But I have to index into\nthe list at that index here.",
    "start": "2488060",
    "end": "2494839"
  },
  {
    "text": "And it's really\nhard to tell what's going on at a quick glance. And so luckily for\nus, the way that we",
    "start": "2494840",
    "end": "2500960"
  },
  {
    "text": "were able to iterate over\nstring characters directly, we can iterate over tuple\nand list elements directly.",
    "start": "2500960",
    "end": "2507799"
  },
  {
    "text": "So the right-hand\nside here is code that does exactly the same\nthing as the one on the left,",
    "start": "2507800",
    "end": "2515450"
  },
  {
    "text": "except that our loop variable\ni, in this particular case, will take on the values\nof my list directly.",
    "start": "2515450",
    "end": "2526060"
  },
  {
    "text": "And so if we take that code-- yes, and I guess we\ncall this version more \"Pythonic\" because\nit's a lot easier to read.",
    "start": "2526060",
    "end": "2533510"
  },
  {
    "text": "So if we take that code and\nwrap it around the function to make this piece\nof code be something",
    "start": "2533510",
    "end": "2541010"
  },
  {
    "text": "that we can reuse in a\nwhole bunch of places to grab the sum of all\nthe elements of a list,",
    "start": "2541010",
    "end": "2546079"
  },
  {
    "text": "we can do that. So here, I've taken the\ncode that does the work, I've plopped it inside this\nfunction, I've named list sum,",
    "start": "2546080",
    "end": "2554000"
  },
  {
    "text": "I've taken a list\nas a parameter, and instead of printing the\ntotal, I'm returning the total.",
    "start": "2554000",
    "end": "2560090"
  },
  {
    "text": "So very useful function now. This loop variable i will\ntake on the values 8, then 3,",
    "start": "2560090",
    "end": "2568070"
  },
  {
    "text": "then 5, if that's the list\nI called this function with, so a lot nicer than\niterating over the index",
    "start": "2568070",
    "end": "2575960"
  },
  {
    "text": "and then indexing into the\nlist with the square brackets at that index.",
    "start": "2575960",
    "end": "2581349"
  },
  {
    "text": "What I do want to\nmention is something, when you're writing code-- and this is\nsomething that I used",
    "start": "2581350",
    "end": "2587650"
  },
  {
    "text": "to do when I first\nstarted out-- is to write a little\ncomment for yourself right underneath for loop.",
    "start": "2587650",
    "end": "2593200"
  },
  {
    "text": "Now, I know it's\na little tedious, but it does help you keep\ntrack of-- especially",
    "start": "2593200",
    "end": "2599740"
  },
  {
    "text": "now that we're iterating\nover tuples or over lists or over string\nelements directly, or even over the\nindices, it helps",
    "start": "2599740",
    "end": "2605680"
  },
  {
    "text": "you keep track of what this\nloop variable's value is going to be. And then you don't have to\nkeep track of it in your mind.",
    "start": "2605680",
    "end": "2611860"
  },
  {
    "text": "It's on paper. And you can use your mind to\nkeep track of other things. So if you just write a little\ncomment for yourself there,",
    "start": "2611860",
    "end": "2618099"
  },
  {
    "text": "it helps you debug\nalong the way. So once we iterate over\nlist elements directly,",
    "start": "2618100",
    "end": "2626880"
  },
  {
    "text": "it makes code that we\nwrite really easy to read. So here, the code\non the left is going",
    "start": "2626880",
    "end": "2632310"
  },
  {
    "text": "to iterate over the\nelements directly and get the running total. But we can make a really small\nchange to the input list.",
    "start": "2632310",
    "end": "2640380"
  },
  {
    "text": "Let's say our input list no\nlonger takes in just numbers, but it can take in strings.",
    "start": "2640380",
    "end": "2648840"
  },
  {
    "text": "We can make one small\nchange to our loop body.",
    "start": "2648840",
    "end": "2654710"
  },
  {
    "text": "Our loop variable\nstill iterates over all the elements in the list l.",
    "start": "2654710",
    "end": "2659780"
  },
  {
    "text": "And then if we write\nthe note for ourselves that s is going to be\na, b, then def, then g,",
    "start": "2659780",
    "end": "2665860"
  },
  {
    "text": "if we wanted to write code\nthat grabbed the sum of all of the lengths of the\nlist, the total plus",
    "start": "2665860",
    "end": "2673400"
  },
  {
    "text": "equals e on the left-hand side\nbecomes total plus equal length of s on the right-hand side.",
    "start": "2673400",
    "end": "2679500"
  },
  {
    "text": "So length of s, one at a\ntime, will take on the value 2 because a, b has length\n2, and then 3 because def",
    "start": "2679500",
    "end": "2687319"
  },
  {
    "text": "has length 3, and then 1\nbecause g has length 1. So the code looks\nvery similar, but they",
    "start": "2687320",
    "end": "2693680"
  },
  {
    "text": "have different\nfunctionalities depending on what we want to do. ",
    "start": "2693680",
    "end": "2700450"
  },
  {
    "text": "OK, we don't have time to\ngo through this to try it. But definitely try it\non your own at home.",
    "start": "2700450",
    "end": "2708859"
  },
  {
    "text": "It's very useful. Plus a whole bunch\nof other functions that I've put in\nthis Python file for you to get a\nlot of experience",
    "start": "2708860",
    "end": "2715089"
  },
  {
    "text": "with tuples and lists, OK. ",
    "start": "2715090",
    "end": "2726000"
  }
]