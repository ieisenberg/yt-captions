[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "A key technology for timesharing is the periodic\ninterrupt from the external timer device.",
    "start": "539",
    "end": "5890"
  },
  {
    "text": "Let's remind ourselves how the interrupt hardware\nin the Beta works.",
    "start": "5890",
    "end": "11450"
  },
  {
    "text": "External devices request an interrupt by asserting\nthe Beta's interrupt request (IRQ) input.",
    "start": "11450",
    "end": "16840"
  },
  {
    "text": "If the Beta is running in user mode, i.e.,\nthe supervisor bit stored in the PC is 0,",
    "start": "16840",
    "end": "22570"
  },
  {
    "text": "asserting IRQ will trigger the following actions\non the clock cycle the interrupt is recognized.",
    "start": "22570",
    "end": "29578"
  },
  {
    "text": "The goal is to save the current PC+4 value\nin the XP register and force the program counter",
    "start": "29579",
    "end": "35230"
  },
  {
    "text": "(PC) to a particular kernel-mode instruction,\nwhich starts the execution of the interrupt",
    "start": "35230",
    "end": "40160"
  },
  {
    "text": "handler code.",
    "start": "40160",
    "end": "42079"
  },
  {
    "text": "The normal process of generating control signals\nbased on the current instruction is superseded",
    "start": "42080",
    "end": "46780"
  },
  {
    "text": "by forcing particular values for some of the\ncontrol signals.",
    "start": "46780",
    "end": "51800"
  },
  {
    "text": "PCSEL is set to 4, which selects a specified\nkernel-mode address as the next value of the",
    "start": "51800",
    "end": "57110"
  },
  {
    "text": "program counter.",
    "start": "57110",
    "end": "59030"
  },
  {
    "text": "The address chosen depends on the type of\nexternal interrupt.",
    "start": "59030",
    "end": "62399"
  },
  {
    "text": "In the case of the timer interrupt, the address\nis 0x80000008.",
    "start": "62400",
    "end": "69430"
  },
  {
    "text": "Note that PC[31], the supervisor bit, is being\nset to 1 and the CPU will be in kernel-mode",
    "start": "69430",
    "end": "75070"
  },
  {
    "text": "as it starts executing the code of the interrupt\nhandler.",
    "start": "75070",
    "end": "79680"
  },
  {
    "text": "The WASEL, WDSEL, and WERF control signals\nare set so that PC+4 is written into the XP",
    "start": "79680",
    "end": "86200"
  },
  {
    "text": "register (i.e., R30) in the register file.",
    "start": "86200",
    "end": "90369"
  },
  {
    "text": "And, finally, MWR is set to 0 to ensure that\nif we're interrupting a ST instruction that",
    "start": "90370",
    "end": "96950"
  },
  {
    "text": "its execution is aborted correctly.",
    "start": "96950",
    "end": "99500"
  },
  {
    "text": "So in the next clock cycle, execution starts\nwith the first instruction of the kernel-mode",
    "start": "99500",
    "end": "104790"
  },
  {
    "text": "interrupt handler,\nwhich can find the PC+4 of the interrupted",
    "start": "104790",
    "end": "108780"
  },
  {
    "text": "instruction in the XP register of the CPU.",
    "start": "108780",
    "end": "113330"
  },
  {
    "start": "113000",
    "end": "113000"
  },
  {
    "text": "As we can see the interrupt hardware is pretty\nminimal:",
    "start": "113330",
    "end": "116860"
  },
  {
    "text": "it saves the PC+4 of the interrupted user-mode\nprogram in the XP register and sets the program",
    "start": "116860",
    "end": "122830"
  },
  {
    "text": "counter to some predetermined value that depends\non which external interrupt happened.",
    "start": "122830",
    "end": "129369"
  },
  {
    "text": "The remainder of the work to handle the interrupt\nrequest is performed in software.",
    "start": "129369",
    "end": "133569"
  },
  {
    "text": "The state of the interrupted process, e.g.,\nthe values in the CPU registers R0 through",
    "start": "133569",
    "end": "139870"
  },
  {
    "text": "R30, is stored in main memory in an OS data\nstructure called UserMState.",
    "start": "139870",
    "end": "144829"
  },
  {
    "text": "Then the appropriate handler code, usually\na procedure written in C, is invoked to do",
    "start": "144829",
    "end": "150209"
  },
  {
    "text": "the heavy lifting.",
    "start": "150209",
    "end": "152049"
  },
  {
    "text": "When that procedure returns, the process state\nis reloaded from UserMState.",
    "start": "152049",
    "end": "156849"
  },
  {
    "text": "The OS subtracts 4 from the value in XP, making\nit point to the interrupted instruction and",
    "start": "156849",
    "end": "164239"
  },
  {
    "text": "then resumes user-mode execution with a JMP(XP).",
    "start": "164239",
    "end": "169430"
  },
  {
    "text": "Note that in our simple Beta implementation\nthe first instructions for the various interrupt",
    "start": "169430",
    "end": "174099"
  },
  {
    "text": "handlers occupy consecutive locations in main\nmemory.",
    "start": "174099",
    "end": "177930"
  },
  {
    "text": "Since interrupt handlers are longer than one\ninstruction, this first instruction is invariably",
    "start": "177930",
    "end": "183489"
  },
  {
    "text": "a branch to the actual interrupt code.",
    "start": "183489",
    "end": "186959"
  },
  {
    "text": "Here we see that the reset interrupt (asserted\nwhen the CPU first starts running) sets the",
    "start": "186959",
    "end": "192809"
  },
  {
    "text": "PC to 0, the illegal instruction interrupt\nsets the PC to 4, the timer interrupt sets",
    "start": "192809",
    "end": "198999"
  },
  {
    "text": "the PC to 8, and so on.",
    "start": "198999",
    "end": "202370"
  },
  {
    "text": "In all cases, bit 31 of the new PC value is\nset to 1 so that handlers execute in supervisor",
    "start": "202370",
    "end": "209939"
  },
  {
    "text": "or kernel mode, giving them access to the\nkernel context.",
    "start": "209939",
    "end": "215239"
  },
  {
    "text": "A common alternative is provide a table of\nnew PC values at a known location and have",
    "start": "215239",
    "end": "221019"
  },
  {
    "text": "the interrupt hardware access that table to\nfetch the PC for the appropriate handler routine.",
    "start": "221019",
    "end": "226889"
  },
  {
    "text": "This provides the same functionality as our\nsimple Beta implementation.",
    "start": "226889",
    "end": "231150"
  },
  {
    "text": "Since the process state is saved and restored\nduring an interrupt, interrupts are transparent",
    "start": "231150",
    "end": "237689"
  },
  {
    "text": "to the running user-mode program.",
    "start": "237689",
    "end": "240239"
  },
  {
    "text": "In essence, we borrow a few CPU cycles to\ndeal with the interrupt, then it's back to",
    "start": "240239",
    "end": "245450"
  },
  {
    "text": "normal program execution.",
    "start": "245450",
    "end": "248310"
  },
  {
    "start": "248000",
    "end": "248000"
  },
  {
    "text": "Here's how the timer interrupt handler would\nwork.",
    "start": "248310",
    "end": "251219"
  },
  {
    "text": "Our initial goal is to use the timer interrupt\nto update a data value in the OS that records",
    "start": "251219",
    "end": "256109"
  },
  {
    "text": "the current time of day (TOD).",
    "start": "256109",
    "end": "258250"
  },
  {
    "text": "Let's assume the timer interrupt is triggered\nevery 1/60th of a second.",
    "start": "258250",
    "end": "262880"
  },
  {
    "text": "A user-mode program executes normally, not\nneeding to make any special provision to deal",
    "start": "262880",
    "end": "267730"
  },
  {
    "text": "with timer interrupts.",
    "start": "267730",
    "end": "270260"
  },
  {
    "text": "Periodically the timer interrupts the user-mode\nprogram to run the clock interrupt handler",
    "start": "270260",
    "end": "274540"
  },
  {
    "text": "code in the OS, then resumes execution of\nthe user-mode program.",
    "start": "274540",
    "end": "279400"
  },
  {
    "text": "The program continues execution just as if\nthe interrupt had not occurred.",
    "start": "279400",
    "end": "283600"
  },
  {
    "text": "If the program needs access to the TOD, it\nmakes the appropriate service request to the",
    "start": "283600",
    "end": "289500"
  },
  {
    "text": "OS.",
    "start": "289500",
    "end": "291880"
  },
  {
    "text": "The clock handler code in the OS starts and\nends with a small amount of assembly-language",
    "start": "291880",
    "end": "296200"
  },
  {
    "text": "code to save and restore the state.",
    "start": "296200",
    "end": "298570"
  },
  {
    "text": "In the middle, the assembly code makes a C\nprocedure call to actually handle the interrupt.",
    "start": "298570",
    "end": "305660"
  },
  {
    "text": "Here's what the handler code might look like.",
    "start": "305660",
    "end": "307770"
  },
  {
    "start": "306000",
    "end": "306000"
  },
  {
    "text": "In C, we find the declarations for the TOD\ndata value and the structure, called UserMState,",
    "start": "307770",
    "end": "314610"
  },
  {
    "text": "that temporarily holds the saved process state.",
    "start": "314610",
    "end": "317849"
  },
  {
    "text": "There's also the C procedure for incrementing\nthe TOD value.",
    "start": "317850",
    "end": "322900"
  },
  {
    "text": "A timer interrupt executes the BR() instruction\nat location 8, which branches to the actual",
    "start": "322900",
    "end": "328500"
  },
  {
    "text": "interrupt handler code at CLOCK_H.",
    "start": "328500",
    "end": "332010"
  },
  {
    "text": "The code first saves the values of all the\nCPU registers into the UserMState data structure.",
    "start": "332010",
    "end": "338330"
  },
  {
    "text": "Note that we don't save the value of R31 since\nits value is always 0.",
    "start": "338330",
    "end": "343580"
  },
  {
    "text": "After setting up the kernel-mode stack, the\nassembly-language stub calls the C procedure",
    "start": "343580",
    "end": "347949"
  },
  {
    "text": "above to do the hard work.",
    "start": "347950",
    "end": "350470"
  },
  {
    "text": "When the procedure returns, the CPU registers\nare reloaded from the saved process state",
    "start": "350470",
    "end": "355870"
  },
  {
    "text": "and the XP register value decremented by 4\nso that it will point to the interrupted instruction.",
    "start": "355870",
    "end": "361680"
  },
  {
    "text": "Then a JMP(XP) resumes user-mode execution.",
    "start": "361680",
    "end": "366310"
  },
  {
    "text": "Okay, that was simple enough.",
    "start": "366310",
    "end": "368960"
  },
  {
    "text": "But what does this all have to do with timesharing?",
    "start": "368960",
    "end": "372500"
  },
  {
    "text": "Wasn't our goal to arrange to periodically\nswitch which process was running?",
    "start": "372500",
    "end": "377650"
  },
  {
    "text": "Aha!",
    "start": "377650",
    "end": "378759"
  },
  {
    "text": "We have code that runs on every timer interrupt,\nso let's modify it so that every so often",
    "start": "378760",
    "end": "384140"
  },
  {
    "text": "we arrange to call the OS' Scheduler() routine.",
    "start": "384140",
    "end": "388280"
  },
  {
    "text": "In this example, we'd set the constant QUANTUM\nto 2 if we wanted to call Scheduler() every",
    "start": "388280",
    "end": "393420"
  },
  {
    "text": "second timer interrupt.",
    "start": "393420",
    "end": "396210"
  },
  {
    "text": "The Scheduler() subroutine is where the time\nsharing magic happens!",
    "start": "396210",
    "end": "401620"
  },
  {
    "start": "401000",
    "end": "401000"
  },
  {
    "text": "Here we see the UserMState data structure\nfrom the previous slide where the user-mode",
    "start": "401620",
    "end": "406080"
  },
  {
    "text": "process state is stored during interrupts.",
    "start": "406080",
    "end": "409569"
  },
  {
    "text": "And here's an array of process control block\n(PCB) data structures, one for each process",
    "start": "409570",
    "end": "414780"
  },
  {
    "text": "in the system.",
    "start": "414780",
    "end": "416639"
  },
  {
    "text": "The PCB holds the complete state of a process\nwhen some other process is currently executing",
    "start": "416639",
    "end": "421840"
  },
  {
    "text": "- it's the long-term storage for processor\nstate!",
    "start": "421840",
    "end": "426389"
  },
  {
    "text": "As you can see, it includes a copy of MState\nwith the process' register values, the MMU",
    "start": "426389",
    "end": "431980"
  },
  {
    "text": "state, and various state associated with the\nprocess' input/output activities,",
    "start": "431980",
    "end": "437460"
  },
  {
    "text": "represented here by a number indicating which\nvirtual user-interface console is attached",
    "start": "437460",
    "end": "442949"
  },
  {
    "text": "to the process.",
    "start": "442950",
    "end": "445210"
  },
  {
    "text": "There are N processes altogether.",
    "start": "445210",
    "end": "447780"
  },
  {
    "text": "The variable CUR gives the index into ProcTable\nfor the currently running process.",
    "start": "447780",
    "end": "455400"
  },
  {
    "text": "And here's the surprisingly simple code for\nimplementing timesharing.",
    "start": "455400",
    "end": "460080"
  },
  {
    "text": "Whenever the Scheduler() routine is called,\nit starts by moving the temporary saved state",
    "start": "460080",
    "end": "465360"
  },
  {
    "text": "into the PCB for the current process.",
    "start": "465360",
    "end": "469509"
  },
  {
    "text": "It then increments CUR to move to the next\nprocess, making sure it wraps back around",
    "start": "469510",
    "end": "474560"
  },
  {
    "text": "to 0 when we've just finished running the\nlast of the N processes.",
    "start": "474560",
    "end": "479340"
  },
  {
    "text": "It then loads reloads the temporary state\nfrom the PCB of the new process and sets up",
    "start": "479340",
    "end": "485770"
  },
  {
    "text": "the MMU appropriately.",
    "start": "485770",
    "end": "488729"
  },
  {
    "text": "At this point Scheduler() returns and the\nclock interrupt handler reloads the CPU registers",
    "start": "488730",
    "end": "493290"
  },
  {
    "text": "from the updated temporary saved state and\nresumes execution.",
    "start": "493290",
    "end": "498230"
  },
  {
    "text": "Voila!",
    "start": "498230",
    "end": "499600"
  },
  {
    "text": "We're now running a new process.",
    "start": "499600",
    "end": "502960"
  },
  {
    "text": "Let's use this diagram to once again walk\nthrough how time sharing works.",
    "start": "502960",
    "end": "506880"
  },
  {
    "start": "503000",
    "end": "503000"
  },
  {
    "text": "At the top of the diagram you'll see the code\nfor the user-mode processes, and below the",
    "start": "506880",
    "end": "512080"
  },
  {
    "text": "OS code along with its data structures.",
    "start": "512080",
    "end": "515190"
  },
  {
    "text": "The timer interrupts the currently running\nuser-mode program and starts execution of",
    "start": "515190",
    "end": "520379"
  },
  {
    "text": "the OS' clock handler code.",
    "start": "520379",
    "end": "523250"
  },
  {
    "text": "The first thing the handler does is save all\nthe registers into the UserMState data structure.",
    "start": "523250",
    "end": "529910"
  },
  {
    "text": "If the Scheduler() routine is called, it moves\nthe temporarily saved state into the PCB,",
    "start": "529910",
    "end": "536610"
  },
  {
    "text": "which provides the long-term storage for a\nprocess' state.",
    "start": "536610",
    "end": "541009"
  },
  {
    "text": "Next, Scheduler() copies the saved state for\nthe next process into the temporary holding",
    "start": "541009",
    "end": "545748"
  },
  {
    "text": "area.",
    "start": "545749",
    "end": "546999"
  },
  {
    "text": "Then the clock handler reloads the updated\nstate into the CPU registers and resumes execution,",
    "start": "546999",
    "end": "553319"
  },
  {
    "text": "this time running code in the new process.",
    "start": "553319",
    "end": "557029"
  },
  {
    "start": "557000",
    "end": "557000"
  },
  {
    "text": "While we're looking at the OS, note that since\nits code runs with the supervisor mode bit",
    "start": "557029",
    "end": "561498"
  },
  {
    "text": "set to 1, interrupts are disabled while in\nthe OS.",
    "start": "561499",
    "end": "566700"
  },
  {
    "text": "This prevents the awkward problem of getting\na second interrupt while still in the middle",
    "start": "566700",
    "end": "570860"
  },
  {
    "text": "of handling a first interrupt, a situation\nthat might accidentally overwrite the state",
    "start": "570860",
    "end": "576089"
  },
  {
    "text": "in UserMState.",
    "start": "576089",
    "end": "578449"
  },
  {
    "text": "But that means one has to be very careful\nwhen writing OS code.",
    "start": "578449",
    "end": "583440"
  },
  {
    "text": "Any sort of infinite loop can never be interrupted.",
    "start": "583440",
    "end": "587110"
  },
  {
    "text": "You may have experienced this when your machine\nappears to freeze, accepting no inputs and",
    "start": "587110",
    "end": "591829"
  },
  {
    "text": "just sitting there like a lump.",
    "start": "591829",
    "end": "594378"
  },
  {
    "text": "At this point, your only choice is to power-cycle\nthe hardware (the ultimate interrupt!) and",
    "start": "594379",
    "end": "599709"
  },
  {
    "text": "start afresh.",
    "start": "599709",
    "end": "602089"
  },
  {
    "text": "Interrupts are allowed during execution of\nuser-mode programs, so if they run amok and",
    "start": "602089",
    "end": "606260"
  },
  {
    "text": "need to be interrupted, that's always possible\nsince the OS is still responding to, say,",
    "start": "606260",
    "end": "610990"
  },
  {
    "text": "keyboard interrupts.",
    "start": "610990",
    "end": "612889"
  },
  {
    "text": "Every OS has a magic combination of keystrokes\nthat is guaranteed to suspend execution of",
    "start": "612889",
    "end": "617410"
  },
  {
    "text": "the current process, sometimes arranging to\nmake a copy of the process state for later",
    "start": "617410",
    "end": "622410"
  },
  {
    "text": "debugging.",
    "start": "622410",
    "end": "623970"
  },
  {
    "text": "Very handy!",
    "start": "623970",
    "end": "624420"
  }
]