[
  {
    "start": "0",
    "end": "98000"
  },
  {
    "text": "Good morning,\neveryone. Glad you are all here bright\nand early.",
    "start": "7000",
    "end": "14009"
  },
  {
    "text": "I'm counting the days till the\nTA's outnumber the students.",
    "start": "14009",
    "end": "20785"
  },
  {
    "text": "They'll show up.\nWe return to a familiar story.",
    "start": "20785",
    "end": "26158"
  },
  {
    "text": "This is part two,\nthe Empire Strikes Back.",
    "start": "26158",
    "end": "32000"
  },
  {
    "text": "So last time,\nour adversary, the graph, came to us with a\nproblem. We have a source,\nand we had a directed graph,",
    "start": "32000",
    "end": "39956"
  },
  {
    "text": "and we had weights on the\nedges, and they were all nonnegative.\nAnd there was happiness.",
    "start": "39957",
    "end": "46221"
  },
  {
    "text": "And we triumphed over the\nEmpire by designing Dijkstra's algorithm, and very efficiently\nfinding single source shortest",
    "start": "46221",
    "end": "54767"
  },
  {
    "text": "paths, shortest path weight from\ns to every other vertex.",
    "start": "54768",
    "end": "60000"
  },
  {
    "text": "Today, however,\nthe Death Star has a new trick up its sleeve,\nand we have negative weights,",
    "start": "60000",
    "end": "65508"
  },
  {
    "text": "potentially.\nAnd we're going to have to somehow deal with,\nin particular, negative weight cycles.\nAnd we saw that when we have a",
    "start": "65508",
    "end": "73207"
  },
  {
    "text": "negative weight cycle,\nwe can just keep going around, and around, and around,\nand go back in time farther,",
    "start": "73207",
    "end": "79654"
  },
  {
    "text": "and farther,\nand farther. And we can get to be\narbitrarily far back in the past.\nAnd so there's no shortest",
    "start": "79654",
    "end": "86038"
  },
  {
    "text": "path, because whatever path you\ntake you can get a shorter one. So we want to address that\nissue today, and we're going to",
    "start": "86038",
    "end": "93487"
  },
  {
    "text": "come up with a new algorithm\nactually simpler than Dijkstra, but not as fast,\ncalled the Bellman-Ford",
    "start": "93487",
    "end": "99621"
  },
  {
    "start": "98000",
    "end": "225000"
  },
  {
    "text": "algorithm.\nAnd, it's going to allow",
    "start": "99621",
    "end": "104622"
  },
  {
    "text": "negative weights,\nand in some sense allow negative weight cycles,\nalthough maybe not as much as",
    "start": "104622",
    "end": "114677"
  },
  {
    "text": "you might hope.\nWe have to leave room for a sequel, of course.\nOK, so the Bellman-Ford",
    "start": "114677",
    "end": "124312"
  },
  {
    "text": "algorithm, invented by two guys,\nas you might expect,",
    "start": "124312",
    "end": "129541"
  },
  {
    "text": "it computes the shortest path\nweights. So, it makes no assumption\nabout the weights.",
    "start": "129541",
    "end": "137687"
  },
  {
    "text": "Weights are arbitrary,\nand it's going to compute the",
    "start": "137687",
    "end": "142815"
  },
  {
    "text": "shortest path weights.\nSo, remember this notation: delta of s, v is the weight of\nthe shortest path from s to v.",
    "start": "142815",
    "end": "153776"
  },
  {
    "text": "s was called a source vertex.\nAnd, we want to compute these",
    "start": "153776",
    "end": "160322"
  },
  {
    "text": "weights for all vertices,\nlittle v. The claim is that computing\nfrom s to everywhere is no",
    "start": "160322",
    "end": "167291"
  },
  {
    "text": "harder than computing s to a\nparticular location. So, we're going to do for all\nthem.",
    "start": "167291",
    "end": "173859"
  },
  {
    "text": "It's still going to be the case\nhere. And, it allows negative\nweights.",
    "start": "173859",
    "end": "179225"
  },
  {
    "text": "And this is the good case,\nbut there's an alternative, which is that Bellman-Ford may\njust say, oops,",
    "start": "179225",
    "end": "187075"
  },
  {
    "text": "there's a negative weight\ncycle. And in that case it will just\nsay so.",
    "start": "187075",
    "end": "194452"
  },
  {
    "text": "So, they say a negative weight\ncycle exists. Therefore, some of these deltas\nare minus infinity.",
    "start": "194452",
    "end": "203369"
  },
  {
    "text": "And that seems weird.\nSo, Bellman-Ford as we'll present it today is intended for\nthe case, but there are no",
    "start": "203369",
    "end": "213342"
  },
  {
    "text": "negative weights cycles,\nwhich is more intuitive.",
    "start": "213342",
    "end": "219000"
  },
  {
    "text": "It sort of allows them,\nbut it will just report them. In that case,\nit will not give you delta",
    "start": "219000",
    "end": "225651"
  },
  {
    "text": "values.\nYou can change the algorithm to give you delta values in that\ncase, but we are not going to",
    "start": "225651",
    "end": "232667"
  },
  {
    "text": "see it here.\nSo, in exercise, after you see the algorithm,\nexercise is: compute these deltas in all\ncases.",
    "start": "232667",
    "end": "241000"
  },
  {
    "text": "So, it's not hard to do.\nBut we don't have time for it",
    "start": "252000",
    "end": "259967"
  },
  {
    "text": "here.\nSo, here's the algorithm. It's pretty straightforward.\nAs I said, it's easier than",
    "start": "259967",
    "end": "272745"
  },
  {
    "text": "Dijkstra.\nIt's a relaxation algorithm. So the main thing that it does\nis relax edges just like",
    "start": "272745",
    "end": "280783"
  },
  {
    "text": "Dijkstra.\nSo, we'll be able to use a lot of dilemmas from Dijkstra.\nAnd proof of correctness will",
    "start": "280783",
    "end": "287413"
  },
  {
    "text": "be three times shorter because\nthe first two thirds we already have from Dijkstra.\nBut I'm jumping ahead a bit.",
    "start": "287413",
    "end": "295030"
  },
  {
    "text": "So, the first part is\ninitialization. Again, d of v will represent\nthe estimated distance from s to",
    "start": "295030",
    "end": "301801"
  },
  {
    "text": "v.\nAnd we're going to be updating those estimates as the algorithm\ngoes along.",
    "start": "301801",
    "end": "308324"
  },
  {
    "text": "And initially,\nd of s is zero, which now may not be the right\nanswer conceivably.",
    "start": "308325",
    "end": "314015"
  },
  {
    "text": "Everyone else is infinity,\nwhich is certainly an upper bound.\nOK, these are both upper bounds",
    "start": "314015",
    "end": "320580"
  },
  {
    "text": "on the true distance.\nSo that's fine. That's initialization just like\nbefore.",
    "start": "320580",
    "end": "327000"
  },
  {
    "text": "And now we have a main loop\nwhich happens v minus one times. We're not actually going to use\nthe index i.",
    "start": "336000",
    "end": "341666"
  },
  {
    "text": "It's just a counter.",
    "start": "341666",
    "end": "343000"
  },
  {
    "text": "And we're just going to look at\nevery edge and relax it.",
    "start": "362000",
    "end": "367565"
  },
  {
    "text": "It's a very simple idea.\nIf you learn about relaxation,",
    "start": "367565",
    "end": "373029"
  },
  {
    "text": "this is the first thing you\nmight try. The question is when do you\nstop.",
    "start": "373029",
    "end": "380011"
  },
  {
    "text": "It's sort of like I have this\nfriend to what he was like six",
    "start": "380011",
    "end": "385982"
  },
  {
    "text": "years old he would claim,\noh, I know how to spell banana.",
    "start": "385982",
    "end": "391647"
  },
  {
    "text": "I just don't know when to stop.\nOK, same thing with relaxation.",
    "start": "391648",
    "end": "397978"
  },
  {
    "text": "This is our relaxation step\njust as before. We look at the edge;\nwe see whether it violates the",
    "start": "397978",
    "end": "403850"
  },
  {
    "text": "triangle inequality according to\nour current estimates we know the distance from s to v should\nbe at most distance from s to",
    "start": "403851",
    "end": "411573"
  },
  {
    "text": "plus the weight of that edge\nfrom u to v. If it isn't,\nwe set it equal. We've proved that this is\nalways an OK thing to do.",
    "start": "411574",
    "end": "420000"
  },
  {
    "text": "We never violate,\nI mean, these d of v's never get too small if we do a bunch\nof relaxations.",
    "start": "420000",
    "end": "427012"
  },
  {
    "text": "So, the idea is you take every\nedge. You relax it.\nI don't care which order.",
    "start": "427012",
    "end": "432701"
  },
  {
    "text": "Just relax every edge,\none each. And that do that V minus one\ntimes.",
    "start": "432701",
    "end": "437766"
  },
  {
    "start": "437000",
    "end": "615000"
  },
  {
    "text": "The claim is that that should\nbe enough if you have no negative weights cycles.\nSo, if there's a negative",
    "start": "437766",
    "end": "445714"
  },
  {
    "text": "weight cycle,\nwe need to figure it out. And, we'll do that in a fairly\nstraightforward way,",
    "start": "445714",
    "end": "455245"
  },
  {
    "text": "which is we're going to do\nexactly the same thing.",
    "start": "455245",
    "end": "460386"
  },
  {
    "text": "So this is outside before loop\nhere. We'll have the same four loops\nfor each edge in our graph.",
    "start": "460386",
    "end": "470039"
  },
  {
    "text": "We'll try to relax it.\nAnd if you can relax it, the claim is that there has to\nbe a negative weight cycle.",
    "start": "470039",
    "end": "482000"
  },
  {
    "text": "So this is the main thing that\nneeds proof.",
    "start": "482000",
    "end": "484000"
  },
  {
    "text": "OK, and that's the algorithm.\nSo the claim is that at the ends we should have d of v,\nlet's see, L's so to speak.",
    "start": "508000",
    "end": "515269"
  },
  {
    "text": "d of v equals delta of s comma\nv for every vertex, v.\nIf we don't find a negative",
    "start": "515270",
    "end": "520425"
  },
  {
    "text": "weight cycle according to this\nrule, that we should have all the shortest path weights.\nThat's the claim.",
    "start": "520426",
    "end": "527168"
  },
  {
    "text": "Now, the first question is,\nin here, the running time is very easy to analyze.\nSo let's start with the running",
    "start": "527168",
    "end": "534240"
  },
  {
    "text": "time.\nWe can compare it to Dijkstra, which is over here.\nWhat is the running time of",
    "start": "534240",
    "end": "542244"
  },
  {
    "text": "this algorithm?\nV times E, exactly. OK, I'm going to assume,\nbecause it's pretty reasonable,",
    "start": "542244",
    "end": "552936"
  },
  {
    "text": "that V and E are both positive.\nThen it's V times E.",
    "start": "552937",
    "end": "559065"
  },
  {
    "text": "So, this is a little bit\nslower, or a fair amount slower,",
    "start": "559065",
    "end": "565794"
  },
  {
    "text": "than Dijkstra's algorithm.\nThere it is:",
    "start": "565794",
    "end": "570970"
  },
  {
    "text": "E plus V log V is essentially,\nignoring the logs is pretty much linear time.\nHere we have something that's",
    "start": "570970",
    "end": "579298"
  },
  {
    "text": "at least quadratic in V,\nassuming your graph is connected.\nSo, it's slower,",
    "start": "579299",
    "end": "585121"
  },
  {
    "text": "but it's going to handle these\nnegative weights. Dijkstra can't handle negative\nweights at all.",
    "start": "585121",
    "end": "592560"
  },
  {
    "text": "So, let's do an example,\nmake it clear why you might hope this algorithm works.\nAnd then we'll prove that it",
    "start": "592560",
    "end": "603278"
  },
  {
    "text": "works, of course.\nBut the proof will be pretty",
    "start": "603278",
    "end": "608546"
  },
  {
    "text": "easy.\nSo, I'm going to draw a graph that has negative weights,\nbut no negative weight cycles",
    "start": "608546",
    "end": "618965"
  },
  {
    "start": "615000",
    "end": "1120000"
  },
  {
    "text": "so that I get an interesting\nanswer.",
    "start": "618965",
    "end": "624000"
  },
  {
    "text": "Good.\nThe other thing I need in order to make the output of this\nalgorithm well defined,",
    "start": "655000",
    "end": "660579"
  },
  {
    "text": "it depends in which order you\nvisit the edges. So I'm going to assign an\narbitrary order to these edges.",
    "start": "660579",
    "end": "667210"
  },
  {
    "text": "I could just ask you for an\norder, but to be consistent with the notes, I'll put an ordering\non it.",
    "start": "667210",
    "end": "673512"
  },
  {
    "text": "Let's say I put number four,\nsay that's the fourth edge I'll visit.\nIt doesn't matter.",
    "start": "673512",
    "end": "678960"
  },
  {
    "text": "But it will affect what happens\nduring the algorithm for a particular graph.",
    "start": "678960",
    "end": "685000"
  },
  {
    "text": "Do they get them all?\nOne, two, three, four, five, six,\nseven, eight,",
    "start": "703000",
    "end": "708580"
  },
  {
    "text": "OK.\nAnd my source is going to be A. And, that's it.\nSo, I want to run this",
    "start": "708580",
    "end": "714584"
  },
  {
    "text": "algorithm.\nI'm just going to initialize everything.\nSo, I set the estimates for s",
    "start": "714584",
    "end": "721180"
  },
  {
    "text": "to be zero, and everyone else to\nbe infinity. And to give me some notion of\ntime, over here I'm going to",
    "start": "721180",
    "end": "730895"
  },
  {
    "text": "draw or write down what all of\nthese d values are as the algorithm proceeds because I'm\ngoing to start crossing them out",
    "start": "730895",
    "end": "740944"
  },
  {
    "text": "and rewriting them that the\nfigure will get a little bit messier.\nBut we can keep track of it",
    "start": "740944",
    "end": "748674"
  },
  {
    "text": "over here.\nIt's initially zero and infinities.\nYeah?",
    "start": "748674",
    "end": "754000"
  },
  {
    "text": "It doesn't matter.\nSo, for the algorithm you can go to the edges in a different\norder every time if you want.",
    "start": "754000",
    "end": "760301"
  },
  {
    "text": "We'll prove that,\nbut here I'm going to go through the same order every\ntime. Good question.\nIt turns out it doesn't matter",
    "start": "760301",
    "end": "767316"
  },
  {
    "text": "here.\nOK, so here's the starting point.\nNow I'm going to relax every edge.\nSo, there's going to be a lot",
    "start": "767316",
    "end": "773201"
  },
  {
    "text": "of edges here that don't do\nanything. I try to relax n minus one.\nI'd say, well, I know how to get from s to B\nwith weight infinity.",
    "start": "773201",
    "end": "782000"
  },
  {
    "text": "Infinity plus two I can get to\nfrom s to E. Well, infinity plus two is not\nmuch better than infinity.",
    "start": "782000",
    "end": "788247"
  },
  {
    "text": "OK, so I don't do anything,\ndon't update this to infinity. I mean, infinity plus two\nsounds even worse.",
    "start": "788247",
    "end": "794621"
  },
  {
    "text": "But infinity plus two is\ninfinity. OK, that's the edge number one.\nSo, no relaxation edge number",
    "start": "794621",
    "end": "800548"
  },
  {
    "text": "two, same deal as number three,\nsame deal, edge number four we start to get something\ninteresting because I have a",
    "start": "800549",
    "end": "807625"
  },
  {
    "text": "finite value here that says I\ncan get from A to B using a total weight of minus one.\nSo that seems good.",
    "start": "807625",
    "end": "815764"
  },
  {
    "text": "I'll write down minus one here,\nand update B to minus one.",
    "start": "815764",
    "end": "821057"
  },
  {
    "text": "The rest stay the same.\nSo, I'm just going to keep doing this over and over.\nThat was edge number four.",
    "start": "821057",
    "end": "830342"
  },
  {
    "text": "Number five,\nwe also get a relaxation. Four is better than infinity.\nSo, c gets a number of four.",
    "start": "830342",
    "end": "840000"
  },
  {
    "text": "Then we get to edge number six.\nThat's infinity plus five is worse than four.\nOK, so no relaxation there.",
    "start": "840000",
    "end": "847654"
  },
  {
    "text": "Edge number seven is\ninteresting because I have a finite value here minus one plus\nthe weight of this edge,",
    "start": "847655",
    "end": "855461"
  },
  {
    "text": "which is three.\nThat's a total of two, which is actually better than\nfour.",
    "start": "855461",
    "end": "860790"
  },
  {
    "text": "So, this route,\nA, B, c is actually better than the route I just found a second\nago.",
    "start": "860790",
    "end": "866869"
  },
  {
    "text": "So, this is now a two.\nThis is all happening in one iteration of the main loop.\nWe actually found two good",
    "start": "866869",
    "end": "875898"
  },
  {
    "text": "paths to c.\nWe found one better than the other.\nOK, and that was edge number",
    "start": "875898",
    "end": "881230"
  },
  {
    "text": "seven, and edge number eight is\nover here. It doesn't matter.\nOK, so that was round one of",
    "start": "881230",
    "end": "887584"
  },
  {
    "text": "this outer loop,\nso, the first value of i. i equals one.\nOK, now we continue.",
    "start": "887584",
    "end": "892988"
  },
  {
    "text": "Just keep going.\nSo, we start with edge number one.\nNow, minus one plus two is one.",
    "start": "892988",
    "end": "900000"
  },
  {
    "text": "That's better than infinity.\nIt'll start speeding up. It's repetitive.\nIt's actually not too much",
    "start": "900000",
    "end": "908952"
  },
  {
    "text": "longer until we're done.\nNumber two, this is an infinity",
    "start": "908952",
    "end": "914190"
  },
  {
    "text": "so we don't do anything.\nNumber three: minus one plus two is one;\nbetter than infinity.",
    "start": "914190",
    "end": "922190"
  },
  {
    "text": "This is vertex d,\nand it's number three. Number four we've already done.\nNothing changed.",
    "start": "922190",
    "end": "931420"
  },
  {
    "text": "Number five:\nthis is where we see the path four again, but that's worse\nthan two.",
    "start": "931420",
    "end": "938343"
  },
  {
    "text": "So, we don't update anything.\nNumber six: one plus five is",
    "start": "938343",
    "end": "943402"
  },
  {
    "text": "six, which is bigger than two,\nso no good. Go around this way.\nNumber seven:",
    "start": "943402",
    "end": "949881"
  },
  {
    "text": "same deal.\nNumber eight is interesting. So, we have a weight of one\nhere, a weight of minus three",
    "start": "949881",
    "end": "958224"
  },
  {
    "text": "here.\nSo, the total is minus two, which is better than one.\nSo, that was d.",
    "start": "958224",
    "end": "967282"
  },
  {
    "text": "And, I believe that's it.\nSo that was definitely the end",
    "start": "967282",
    "end": "973260"
  },
  {
    "text": "of that round.\nSo, it's I plus two because we just looked at the eighth edge.\nAnd, I'll cheat and check.",
    "start": "973260",
    "end": "984239"
  },
  {
    "text": "Indeed, that is the last thing\nthat happens.",
    "start": "984239",
    "end": "990000"
  },
  {
    "text": "We can check the couple of\noutgoing edges from d because that's the only one whose value\njust changed.",
    "start": "990000",
    "end": "996891"
  },
  {
    "text": "And, there are no more\nrelaxations possible. So, that was in two rounds.\nThe claim is we got all the",
    "start": "996892",
    "end": "1003644"
  },
  {
    "text": "shortest path weights.\nThe algorithm would actually loop four times to guarantee\ncorrectness because we have five",
    "start": "1003645",
    "end": "1011303"
  },
  {
    "text": "vertices here and one less than\nthat. So, in fact,\nin the execution here there are",
    "start": "1011303",
    "end": "1016803"
  },
  {
    "text": "two more blank rounds at the\nbottom. Nothing happens.\nBut, what the hell?",
    "start": "1016803",
    "end": "1023000"
  },
  {
    "text": "OK, so that is Bellman-Ford.\nI mean, it's certainly not doing anything wrong.\nThe question is,",
    "start": "1023000",
    "end": "1028486"
  },
  {
    "text": "why is it guaranteed to\nconverge in V minus one steps unless there is a negative\nweight cycle?",
    "start": "1028487",
    "end": "1033974"
  },
  {
    "text": "Question?",
    "start": "1033974",
    "end": "1035000"
  },
  {
    "text": "Right, so that's an\noptimization. If you discover a whole round,\nand nothing happens, so you can keep track of that\nin the algorithm thing,",
    "start": "1044000",
    "end": "1051669"
  },
  {
    "text": "you can stop.\nIn the worst case, it won't make a difference.\nBut in practice, you probably want to do that.\nYeah?",
    "start": "1051669",
    "end": "1057850"
  },
  {
    "text": "Good question.\nAll right, so some simple observations,\nI mean, we're only doing relaxation.\nSo, we can use a lot of our",
    "start": "1057850",
    "end": "1064375"
  },
  {
    "text": "analysis from before.\nIn particular, the d values are only\ndecreasing monotonically. As we cross out values here,\nwe are always making it",
    "start": "1064375",
    "end": "1071929"
  },
  {
    "text": "smaller, which is good.\nAnother nifty thing about this algorithm is that you can run it\neven in a distributed system.",
    "start": "1071930",
    "end": "1080000"
  },
  {
    "text": "If this is some actual network,\nsome computer network, and these are machines,\nand they're communicating by",
    "start": "1080000",
    "end": "1085073"
  },
  {
    "text": "these links, I mean,\nit's a purely local thing. Relaxation is a local thing.\nYou don't need any global strategy, and you're asking\nabout, can we do a different",
    "start": "1085073",
    "end": "1092585"
  },
  {
    "text": "order in each step?\nWell, yeah, you could just keep relaxing edges,\nand keep relaxing edges, and just keep going for the\nentire lifetime of the network.",
    "start": "1092585",
    "end": "1099756"
  },
  {
    "text": "And eventually,\nyou will find shortest paths. So, this algorithm is\nguaranteed to finish in V rounds in a distributed system.\nIt might be more asynchronous.",
    "start": "1099756",
    "end": "1107121"
  },
  {
    "text": "And, it's a little harder to\nanalyze. But it will still work\neventually.",
    "start": "1107121",
    "end": "1114125"
  },
  {
    "text": "It's guaranteed to converge.\nAnd so, Bellman-Ford is used in",
    "start": "1114125",
    "end": "1121500"
  },
  {
    "start": "1120000",
    "end": "1548000"
  },
  {
    "text": "the Internet for finding\nshortest paths. OK, so let's finally prove that\nit works.",
    "start": "1121500",
    "end": "1131375"
  },
  {
    "text": "This should only take a couple\nof boards. So let's suppose we have a\ngraph and some edge weights that",
    "start": "1131375",
    "end": "1143625"
  },
  {
    "text": "have no negative weight cycles.\nThen the claim is that we",
    "start": "1143625",
    "end": "1153475"
  },
  {
    "text": "terminate with the correct\nanswer.",
    "start": "1153475",
    "end": "1159382"
  },
  {
    "text": "So, Bellman-Ford terminates\nwith all of these d of v values",
    "start": "1159382",
    "end": "1169765"
  },
  {
    "text": "set to the delta values for\nevery vertex.",
    "start": "1169765",
    "end": "1178000"
  },
  {
    "text": "OK, the proof is going to be\npretty immediate using the lemmas that we had from before\nif you remember them.",
    "start": "1178000",
    "end": "1185944"
  },
  {
    "text": "So, we're just going to look at\nevery vertex separately. So, I'll call the vertex v.\nThe claim is that this holds by",
    "start": "1185944",
    "end": "1194493"
  },
  {
    "text": "the end of the algorithm.\nSo, remember what we need to prove is that at some point,\nd of v equals delta of s comma",
    "start": "1194494",
    "end": "1202893"
  },
  {
    "text": "v because we know it decreases\nmonotonically, and we know that it never gets\nany smaller than the correct",
    "start": "1202893",
    "end": "1210611"
  },
  {
    "text": "value because relaxations are\nalways safe. So, we just need to show at\nsome point this holds,",
    "start": "1210611",
    "end": "1224916"
  },
  {
    "text": "and that it will hold at the\nend.",
    "start": "1224916",
    "end": "1232000"
  },
  {
    "text": "So, by monotonicity of the d\nvalues, and by correctness part",
    "start": "1232000",
    "end": "1241487"
  },
  {
    "text": "one, which was that the d of v's\nare always greater than or equal",
    "start": "1241487",
    "end": "1251778"
  },
  {
    "text": "to the deltas,\nwe only need to show that at",
    "start": "1251778",
    "end": "1258532"
  },
  {
    "text": "some point we have equality.",
    "start": "1258532",
    "end": "1264000"
  },
  {
    "text": "So that's our goal.\nSo what we're going to do is just look at v,\nand the shortest path to v,",
    "start": "1278000",
    "end": "1284980"
  },
  {
    "text": "and see what happens to the\nalgorithm relative to that path.",
    "start": "1284980",
    "end": "1290000"
  },
  {
    "text": "So, I'm going to name the path.\nLet's call it p.",
    "start": "1290000",
    "end": "1295337"
  },
  {
    "text": "It starts at vertex v_0 and\ngoes to v_1, v_2, whatever, and ends at v_k.\nAnd, this is not just any",
    "start": "1295337",
    "end": "1306127"
  },
  {
    "text": "shortest path,\nbut it's one that starts at s. So, v_0's s,\nand it ends at v.",
    "start": "1306127",
    "end": "1314418"
  },
  {
    "text": "So, I'm going to give a couple\nof names to s and v so I can",
    "start": "1314418",
    "end": "1321005"
  },
  {
    "text": "talk about the path more\nuniformly. So, this is a shortest path\nfrom s to v.",
    "start": "1321005",
    "end": "1331000"
  },
  {
    "text": "Now, I also want it to be not\njust any shortest path from s to v, but among all shortest paths\nfrom s to v I want it to be one",
    "start": "1331000",
    "end": "1340341"
  },
  {
    "text": "with the fewest possible edges.",
    "start": "1340341",
    "end": "1343000"
  },
  {
    "text": "OK, so shortest here means in\nterms of the total weight of the path.\nSubject to being shortest in",
    "start": "1352000",
    "end": "1358537"
  },
  {
    "text": "weight, I wanted to also be\nshortest in the number of edges. And, the reason I want that is\nto be able to conclude that p is",
    "start": "1358537",
    "end": "1366952"
  },
  {
    "text": "a simple path,\nmeaning that it doesn't repeat any vertices.\nNow, can anyone tell me why I",
    "start": "1366952",
    "end": "1372932"
  },
  {
    "text": "need to assume that the number\nof edges is the smallest possible in order to guarantee\nthat p is simple?",
    "start": "1372932",
    "end": "1381000"
  },
  {
    "text": "The claim is that not all\nshortest paths are necessarily simple.\nYeah? Right, I can have a zero weight\ncycle, exactly.",
    "start": "1381000",
    "end": "1387913"
  },
  {
    "text": "So, we are hoping,\nI mean, in fact in the theorem here, we're assuming that there\nare no negative weight cycles.",
    "start": "1387913",
    "end": "1394582"
  },
  {
    "text": "But there might be zero weight\ncycles still. As a zero weight cycle,\nyou can put that in the middle",
    "start": "1394582",
    "end": "1400455"
  },
  {
    "text": "of any shortest path to make it\narbitrarily long, repeat vertices over and over.\nThat's going to be annoying.",
    "start": "1400455",
    "end": "1406940"
  },
  {
    "text": "What I want is that p is\nsimple. And, I can guarantee that\nessentially by shortcutting.",
    "start": "1406940",
    "end": "1413501"
  },
  {
    "text": "If ever I take a zero weight\ncycle, I throw it away. And this is one mathematical\nway of doing that.",
    "start": "1413501",
    "end": "1419909"
  },
  {
    "text": "OK, now what else do we know\nabout this shortest path? Well, we know that subpaths are\nshortest paths are shortest",
    "start": "1419910",
    "end": "1427244"
  },
  {
    "text": "paths.\nThat's optimal substructure. So, we know what the shortest\npath from s to v_i is sort of",
    "start": "1427244",
    "end": "1433323"
  },
  {
    "text": "inductively.\nIt's the shortest path, I mean, it's the weight of that\npath, which is,",
    "start": "1433323",
    "end": "1438674"
  },
  {
    "text": "in particular,\nthe shortest path from s to v minus one plus the weight of the\nlast edge, v minus one to v_i.",
    "start": "1438674",
    "end": "1447000"
  },
  {
    "text": "So, this is by optimal\nsubstructure as we proved last",
    "start": "1447000",
    "end": "1457205"
  },
  {
    "text": "time.\nOK, and I think that's pretty",
    "start": "1457205",
    "end": "1463877"
  },
  {
    "text": "much the warm-up.\nSo, I want to sort of do this",
    "start": "1463878",
    "end": "1470514"
  },
  {
    "text": "inductively in I,\nstart out with v zero, and go up to v_k.\nSo, the first question is,",
    "start": "1470514",
    "end": "1477626"
  },
  {
    "text": "what is d of v_0,\nwhich is s? What is d of the source?\nWell, certainly at the",
    "start": "1477626",
    "end": "1484043"
  },
  {
    "text": "beginning of the algorithm,\nit's zero. So, let's say equals zero\ninitially because that's what we",
    "start": "1484043",
    "end": "1492195"
  },
  {
    "text": "set it to.\nAnd it only goes down from there.\nSo, it certainly,",
    "start": "1492195",
    "end": "1497311"
  },
  {
    "text": "at most, zero.\nThe real question is, what is delta of s comma v_0.\nWhat is the shortest path",
    "start": "1497311",
    "end": "1506575"
  },
  {
    "text": "weight from s to s?\nIt has to be zero, otherwise you have a negative\nweight cycle,",
    "start": "1506575",
    "end": "1513501"
  },
  {
    "text": "exactly.\nMy favorite answer, zero.\nSo, if we had another path from",
    "start": "1513501",
    "end": "1519024"
  },
  {
    "text": "s to s, I mean,\nthat is a cycle. So, it's got to be zero.\nSo, these are actually equal at",
    "start": "1519024",
    "end": "1526564"
  },
  {
    "text": "the beginning of the algorithm,\nwhich is great.",
    "start": "1526564",
    "end": "1532000"
  },
  {
    "text": "That means they will be for all\ntime because we just argued up",
    "start": "1532000",
    "end": "1537398"
  },
  {
    "text": "here, only goes down,\nnever can get too small. So, we have d of v_0 set to the\nright thing.",
    "start": "1537398",
    "end": "1545185"
  },
  {
    "text": "Great: good for the base case\nof the induction. Of course, what we really care\nabout is v_k,",
    "start": "1545185",
    "end": "1553061"
  },
  {
    "start": "1548000",
    "end": "1983000"
  },
  {
    "text": "which is v.\nSo, let's talk about the v_i inductively, and then we will\nget v_k as a result.",
    "start": "1553061",
    "end": "1562000"
  },
  {
    "text": "So, yeah, let's do it by\ninduction. That's more fun.",
    "start": "1571000",
    "end": "1576000"
  },
  {
    "text": "Let's say that d of v_i is\nequal to delta of s v_i after I",
    "start": "1587000",
    "end": "1592839"
  },
  {
    "text": "rounds of the algorithm.\nSo, this is actually referring",
    "start": "1592839",
    "end": "1598370"
  },
  {
    "text": "to the I that is in the\nalgorithm here. These are rounds.\nSo, one round is an entire",
    "start": "1598370",
    "end": "1606668"
  },
  {
    "text": "execution of all the edges,\nrelaxation of all the edges.",
    "start": "1606668",
    "end": "1612302"
  },
  {
    "text": "So, this is certainly true for\nI equals zero. We just proved that.\nAfter zero rounds,",
    "start": "1612302",
    "end": "1620701"
  },
  {
    "text": "at the beginning of the\nalgorithm, d of v_0 equals delta",
    "start": "1620702",
    "end": "1626336"
  },
  {
    "text": "of s, v_0.\nOK, so now, that's not really",
    "start": "1626336",
    "end": "1631359"
  },
  {
    "text": "what I wanted,\nbut OK, fine. Now we'll prove it for d of v_i\nplus one.",
    "start": "1631359",
    "end": "1636811"
  },
  {
    "text": "Generally, I recommend you\nassume something. In fact, why don't I follow my\nown advice and change it?",
    "start": "1636811",
    "end": "1644783"
  },
  {
    "text": "It's usually nicer to think of\ninduction as recursion. So, you assume that this is\ntrue, let's say,",
    "start": "1644784",
    "end": "1652595"
  },
  {
    "text": "for j less than the i that you\ncare about, and then you prove it for d of v_i.\nIt's usually a lot easier to",
    "start": "1652595",
    "end": "1662067"
  },
  {
    "text": "think about it that way.\nIn particular, you can use strong induction\nfor all less than i.",
    "start": "1662067",
    "end": "1668415"
  },
  {
    "text": "Here, we're only going to need\nit for one less. We have some relation between I\nand I minus one here in terms of",
    "start": "1668416",
    "end": "1676463"
  },
  {
    "text": "the deltas.\nAnd so, we want to argue something about the d values.\nOK, well, let's think about",
    "start": "1676463",
    "end": "1685094"
  },
  {
    "text": "what's going on here.\nWe know that, let's say, after I minus one\nrounds, we have this inductive",
    "start": "1685094",
    "end": "1695638"
  },
  {
    "text": "hypothesis, d of v_i minus one\nequals delta of s v_i minus one.",
    "start": "1695638",
    "end": "1702743"
  },
  {
    "text": "And, we want to conclude that\nafter i rounds,",
    "start": "1702744",
    "end": "1707787"
  },
  {
    "text": "so we have one more round to do\nthis. We want to conclude that d of\nv_i has the right answer,",
    "start": "1707787",
    "end": "1718102"
  },
  {
    "text": "delta of s comma v_i.\nDoes that look familiar at all?",
    "start": "1718103",
    "end": "1724374"
  },
  {
    "text": "So we want to relax every edge\nin this round. In particular,\nat some point,",
    "start": "1724374",
    "end": "1729889"
  },
  {
    "text": "we have to relax the edge from\nv_i minus one to v_i. We know that this path consists\nof edges.",
    "start": "1729889",
    "end": "1736859"
  },
  {
    "text": "That's the definition of a\npath. So, during the i'th round,\nwe relax every edge.",
    "start": "1736859",
    "end": "1750375"
  },
  {
    "text": "So, we better relax v_i minus\none v_i.",
    "start": "1750375",
    "end": "1758721"
  },
  {
    "text": "And, what happens then?\nIt's a test of memory.",
    "start": "1758721",
    "end": "1770000"
  },
  {
    "text": "Quick, the Death Star is\napproaching. So, if we have the correct\nvalue for v_i minus one,",
    "start": "1783000",
    "end": "1791599"
  },
  {
    "text": "that we relax an outgoing edge\nfrom there, and that edge is an",
    "start": "1791599",
    "end": "1797700"
  },
  {
    "text": "edge of the shortest path from s\nto v_i. What do we know?\nd of v_i becomes the correct",
    "start": "1797700",
    "end": "1807150"
  },
  {
    "text": "value, delta of s comma v_i.\nThis was called correctness",
    "start": "1807150",
    "end": "1813337"
  },
  {
    "text": "lemma last time.\nOne of the things we proved about Dijkstra's algorithm,\nbut it was really just a fact",
    "start": "1813337",
    "end": "1824474"
  },
  {
    "text": "about relaxation.\nAnd it was a pretty simple proof.\nAnd it comes from this fact.",
    "start": "1824474",
    "end": "1832862"
  },
  {
    "text": "We know the shortest path\nweight is this. So, certainly d of v_i was at\nleast this big,",
    "start": "1832862",
    "end": "1838449"
  },
  {
    "text": "and let's suppose it's greater,\nor otherwise we were done. We know d of v_i minus one is\nset to this.",
    "start": "1838449",
    "end": "1844967"
  },
  {
    "text": "And so, this is exactly the\ncondition that's being checked in the relaxation step.\nAnd, the d of v_i value will be",
    "start": "1844967",
    "end": "1852350"
  },
  {
    "text": "greater than this,\nlet's suppose. And then, we'll set it equal to\nthis. And that's exactly d of s v_i.\nSo, when we relax that edge,",
    "start": "1852350",
    "end": "1861823"
  },
  {
    "text": "we've got to set it to the\nright value. So, this is the end of the\nproof, right?",
    "start": "1861823",
    "end": "1866839"
  },
  {
    "text": "It's very simple.\nThe point is, you look at your shortest path.\nHere it is. And if we assume there's no\nnegative weight cycles,",
    "start": "1866839",
    "end": "1874784"
  },
  {
    "text": "this has the correct value\ninitially. d of s is going to be zero.\nAfter the first round,",
    "start": "1874785",
    "end": "1880321"
  },
  {
    "text": "you've got to relax this edge.\nAnd then you get the right value for that vertex.\nAfter the second round,",
    "start": "1880321",
    "end": "1886900"
  },
  {
    "text": "you've got to relax this edge,\nwhich gets you the right d value for this vertex and so on.\nAnd so, no matter which",
    "start": "1886900",
    "end": "1896042"
  },
  {
    "text": "shortest path you take,\nyou can apply this analysis. And you know that by,\nif the length of this path,",
    "start": "1896042",
    "end": "1904833"
  },
  {
    "text": "here we assumed it was k edges,\nthen after k rounds you've got",
    "start": "1904833",
    "end": "1910250"
  },
  {
    "text": "to be done.\nOK, so this was not actually the end of the proof.\nSorry.",
    "start": "1910250",
    "end": "1917000"
  },
  {
    "text": "So this means after k rounds,\nwe have the right answer for",
    "start": "1917000",
    "end": "1923368"
  },
  {
    "text": "v_k, which is v.\nSo, the only question is how big could k be?\nAnd, it better be the right",
    "start": "1923368",
    "end": "1932977"
  },
  {
    "text": "answer, at most,\nv minus one is the claim by the",
    "start": "1932977",
    "end": "1938229"
  },
  {
    "text": "algorithm that you only need to\ndo v minus one steps.",
    "start": "1938229",
    "end": "1944039"
  },
  {
    "text": "And indeed, the number of edges\nin a simple path in a graph is,",
    "start": "1944039",
    "end": "1950966"
  },
  {
    "text": "at most, the number of vertices\nminus one.",
    "start": "1950966",
    "end": "1957000"
  },
  {
    "text": "k is, at most,\nv minus one because p is simple.\nSo, that's why we had to assume",
    "start": "1957000",
    "end": "1963804"
  },
  {
    "text": "that it wasn't just any shortest\npath. It had to be a simple one so it\ndidn't repeat any vertices.",
    "start": "1963805",
    "end": "1972313"
  },
  {
    "text": "So there are,\nat most, V vertices in the path, so at most,\nV minus one edges in the path.",
    "start": "1972313",
    "end": "1981000"
  },
  {
    "text": "OK, and that's all there is to\nBellman-Ford. So: pretty simple in\ncorrectness.",
    "start": "1981000",
    "end": "1988987"
  },
  {
    "start": "1983000",
    "end": "2148000"
  },
  {
    "text": "Of course, we're using a lot of\nthe lemmas that we proved last",
    "start": "1988987",
    "end": "1995483"
  },
  {
    "text": "time, which makes it easier.\nOK, a consequence of this",
    "start": "1995483",
    "end": "2001127"
  },
  {
    "text": "theorem, or of this proof is\nthat if Bellman-Ford fails to",
    "start": "2001127",
    "end": "2007196"
  },
  {
    "text": "converge, and that's what the\nalgorithm is checking is whether",
    "start": "2007197",
    "end": "2013693"
  },
  {
    "text": "this relaxation still requires\nwork after these d minus one",
    "start": "2013693",
    "end": "2019870"
  },
  {
    "text": "steps.\nRight, the end of this algorithm is run another round,\na V'th round,",
    "start": "2019870",
    "end": "2028455"
  },
  {
    "text": "see whether anything changes.\nSo, we'll say that the algorithm fails to converge\nafter V minus one steps or",
    "start": "2028456",
    "end": "2038630"
  },
  {
    "text": "rounds.\nThen, there has to be a negative weight cycle.\nOK, this is just a",
    "start": "2038630",
    "end": "2044426"
  },
  {
    "text": "contrapositive of what we\nproved. We proved that if you assume\nthere's no negative weight",
    "start": "2044426",
    "end": "2050468"
  },
  {
    "text": "cycle, then we know that d of s\nis zero, and then all this argument says is you've got to\nconverge after v minus one",
    "start": "2050468",
    "end": "2058407"
  },
  {
    "text": "rounds.\nThere can't be anything left to do once you've reached the\nshortest path weights because",
    "start": "2058407",
    "end": "2064940"
  },
  {
    "text": "you're going monotonically;\nyou can never hit the bottom.",
    "start": "2064941",
    "end": "2070000"
  },
  {
    "text": "You can never go to the floor.\nSo, if you fail to converge somehow after V minus one\nrounds, you've got to have",
    "start": "2070000",
    "end": "2077152"
  },
  {
    "text": "violated the assumption.\nThe only assumption we made was there's no negative weight\ncycle.",
    "start": "2077153",
    "end": "2082916"
  },
  {
    "text": "So, this tells us that\nBellman-Ford is actually correct.\nWhen it says that there is a",
    "start": "2082916",
    "end": "2088347"
  },
  {
    "text": "negative weight cycle,\nit indeed means it. It's true.\nOK, and you can modify Bellman-Ford in that case to\nsort of run a little longer,",
    "start": "2088348",
    "end": "2096893"
  },
  {
    "text": "and find where all the minus\ninfinities are. And that is,\nin some sense,",
    "start": "2096893",
    "end": "2102649"
  },
  {
    "text": "one of the things you have to\ndo in your problem set, I believe.\nSo, I won't cover it here.",
    "start": "2102649",
    "end": "2108231"
  },
  {
    "text": "But, it's a good exercise in\nany case to figure out how you would find where the minus\ninfinities are.",
    "start": "2108231",
    "end": "2114511"
  },
  {
    "text": "What are all the vertices\nreachable from negative weight cycle?\nThose are the ones that have",
    "start": "2114511",
    "end": "2120156"
  },
  {
    "text": "minus infinities.\nOK, so you might say, well, that was awfully fast.\nActually, it's not over yet.",
    "start": "2120156",
    "end": "2126119"
  },
  {
    "text": "The episode is not yet ended.\nWe're going to use Bellman-Ford to solve the even bigger and\ngreater shortest path problems.",
    "start": "2126119",
    "end": "2135000"
  },
  {
    "text": "And in the remainder of today's\nlecture, we will see it applied to a more general problem,\nin some sense,",
    "start": "2135000",
    "end": "2142381"
  },
  {
    "text": "called linear programming.\nAnd the next lecture, we'll really use it to do some\namazing stuff with all pairs",
    "start": "2142381",
    "end": "2149980"
  },
  {
    "start": "2148000",
    "end": "2538000"
  },
  {
    "text": "shortest paths.\nLet's go over here. So, our goal,\nalthough it won't be obvious",
    "start": "2149980",
    "end": "2155407"
  },
  {
    "text": "today, is to be able to compute\nthe shortest paths between every pair of vertices,\nwhich we could certainly do at",
    "start": "2155407",
    "end": "2163368"
  },
  {
    "text": "this point just by running\nBellman-Ford v times. OK, but we want to do better\nthan that, of course.",
    "start": "2163368",
    "end": "2175383"
  },
  {
    "text": "And, that will be the climax of\nthe trilogy.",
    "start": "2175383",
    "end": "2181863"
  },
  {
    "text": "OK, today we just discovered\nwho Luke's father is.",
    "start": "2181863",
    "end": "2190000"
  },
  {
    "text": "So, it turns out the father of\nshortest paths is linear",
    "start": "2190000",
    "end": "2197382"
  },
  {
    "text": "programming.\nActually, simultaneously the",
    "start": "2197382",
    "end": "2202851"
  },
  {
    "text": "father and the mother because\nprograms do not have gender.",
    "start": "2202851",
    "end": "2210644"
  },
  {
    "text": "OK, my father likes to say,\nwe both took improv comedy",
    "start": "2210644",
    "end": "2217890"
  },
  {
    "text": "lessons so we have degrees in\nimprovisation.",
    "start": "2217890",
    "end": "2225000"
  },
  {
    "text": "And he said,\nyou know, we went to improv classes in order to learn how to\nmake our humor better.",
    "start": "2225000",
    "end": "2230692"
  },
  {
    "text": "And, the problem is,\nit didn't actually make our humor better.\nIt just made us less afraid to",
    "start": "2230693",
    "end": "2236204"
  },
  {
    "text": "use it.\n[LAUGHTER] So, you are subjected to all this\nimprov humor. I didn't see the connection of\nLuke's father,",
    "start": "2236204",
    "end": "2242755"
  },
  {
    "text": "but there you go.\nOK, so, linear programming is a very general problem,\na very big tool.",
    "start": "2242755",
    "end": "2249000"
  },
  {
    "text": "Has anyone seen linear\nprogramming before? OK, one person.\nAnd, I'm sure you will,",
    "start": "2249000",
    "end": "2256022"
  },
  {
    "text": "at some time in your life,\ndo anything vaguely computing optimization related,\nlinear programming comes up at",
    "start": "2256022",
    "end": "2265443"
  },
  {
    "text": "some point.\nIt's a very useful tool. You're given a matrix and two\nvectors: not too exciting yet.",
    "start": "2265444",
    "end": "2273800"
  },
  {
    "text": "What you want to do is find a\nvector. This is a very dry description.\nWe'll see what makes it so",
    "start": "2273800",
    "end": "2282529"
  },
  {
    "text": "interesting in a moment.",
    "start": "2282529",
    "end": "2284000"
  },
  {
    "text": "So, you want to maximize some\nobjective, and you have some constraints.\nAnd they're all linear.",
    "start": "2297000",
    "end": "2304147"
  },
  {
    "text": "So, the objective is a linear\nfunction in the variables x, and your constraints are a\nbunch of linear constraints,",
    "start": "2304147",
    "end": "2312770"
  },
  {
    "text": "inequality constraints,\nthat's one makes an interesting.\nIt's not just solving a linear",
    "start": "2312770",
    "end": "2319295"
  },
  {
    "text": "system as you've seen in linear\nalgebra, or whatever. Or, of course,\nit could be that there is no",
    "start": "2319295",
    "end": "2326598"
  },
  {
    "text": "such x.\nOK: vaguely familiar you might think to the theorem about\nBellman-Ford.",
    "start": "2326598",
    "end": "2332502"
  },
  {
    "text": "And, we'll show that there's\nsome kind of connection here that either you want to find\nsomething, or show that it",
    "start": "2332502",
    "end": "2341047"
  },
  {
    "text": "doesn't exist.\nWell, that's still a pretty",
    "start": "2341047",
    "end": "2346061"
  },
  {
    "text": "vague connection,\nbut I also want to maximize something, or are sort of\nminimize the shortest paths,",
    "start": "2346061",
    "end": "2353464"
  },
  {
    "text": "OK, somewhat similar.\nWe have these constraints. So, yeah.\nThis may be intuitive to you,",
    "start": "2353465",
    "end": "2359953"
  },
  {
    "text": "I don't know.\nI prefer a more geometric picture, and I will try to draw\nsuch a geometric picture,",
    "start": "2359954",
    "end": "2367129"
  },
  {
    "text": "and I've never tried to do this\non a blackboard, so it should be interesting.\nI think I'm going to fail",
    "start": "2367129",
    "end": "2376490"
  },
  {
    "text": "miserably.\nIt sort of looks like a dodecahedron,\nright?",
    "start": "2376490",
    "end": "2381670"
  },
  {
    "text": "Sort of, kind of,\nnot really. A bit rough on the bottom,\nOK.",
    "start": "2381670",
    "end": "2387348"
  },
  {
    "text": "So, if you have a bunch of\nlinear constraints, this is supposed to be in 3-D.\nNow I labeled it.",
    "start": "2387348",
    "end": "2396513"
  },
  {
    "text": "It's now in 3-D.\nGood. So, you have these linear\nconstraints.",
    "start": "2396513",
    "end": "2402737"
  },
  {
    "text": "That turns out to define\nhyperplanes in n dimensions. OK, so you have this base here\nthat's three-dimensional space.",
    "start": "2402737",
    "end": "2411099"
  },
  {
    "text": "So, n equals three.\nAnd, these hyperplanes, if you're looking at one side\nof the hyperplane,",
    "start": "2411099",
    "end": "2417686"
  },
  {
    "text": "that's the less than or equal\nto, if you take the intersection,\nyou get some convex polytope or",
    "start": "2417686",
    "end": "2424494"
  },
  {
    "text": "polyhedron.\nIn 3-D, you might get a dodecahedron or whatever.\nAnd, your goal,",
    "start": "2424494",
    "end": "2429969"
  },
  {
    "text": "you have some objective vector\nc, let's say, up.\nSuppose that's the c vector.",
    "start": "2429969",
    "end": "2437000"
  },
  {
    "text": "Your goal is to find the\nhighest point in this polytope.",
    "start": "2437000",
    "end": "2442227"
  },
  {
    "text": "So here, it's maybe this one.\nOK, this is the target. This is the optimal,\nx.",
    "start": "2442227",
    "end": "2449260"
  },
  {
    "text": "That is the geometric view.\nIf you prefer the algebraic",
    "start": "2449260",
    "end": "2454392"
  },
  {
    "text": "view, you want to maximize the c\ntranspose times x.",
    "start": "2454392",
    "end": "2460000"
  },
  {
    "text": "So, this is m.\nThis is n. Check out the dimensions work\nout. So that's saying you want to\nmaximize the dot product.",
    "start": "2460000",
    "end": "2468753"
  },
  {
    "text": "You want to maximize the extent\nto which x is in the direction c.\nAnd, you want to maximize that",
    "start": "2468753",
    "end": "2476152"
  },
  {
    "text": "subject to some constraints,\nwhich looks something like this, maybe.\nSo, this is A,",
    "start": "2476153",
    "end": "2482519"
  },
  {
    "text": "and it's m by n.\nYou want to multiply it by, it should be something of\nheight n.",
    "start": "2482519",
    "end": "2490000"
  },
  {
    "text": "That's x.\nLet me put x down here, n by one.\nAnd, it should be less than or",
    "start": "2490000",
    "end": "2496037"
  },
  {
    "text": "equal to something of this\nheight, which is B, the right hand side.\nOK, that's the algebraic view,",
    "start": "2496038",
    "end": "2504118"
  },
  {
    "text": "which is to check out all the\ndimensions are working out. But, you can read these off in\neach row here,",
    "start": "2504118",
    "end": "2512623"
  },
  {
    "text": "when multiplied by this column,\ngives you one value here. And as just a linear\nconstraints on all the x sides.",
    "start": "2512623",
    "end": "2523000"
  },
  {
    "text": "So, you want to maximize this\nlinear function of x_1 up to x_n",
    "start": "2523000",
    "end": "2528799"
  },
  {
    "text": "subject to these constraints,\nOK? Pretty simple,\nbut pretty powerful in general.",
    "start": "2528799",
    "end": "2536119"
  },
  {
    "text": "So, it turns out that with,\nyou can formulate a huge number",
    "start": "2536119",
    "end": "2541632"
  },
  {
    "start": "2538000",
    "end": "2838000"
  },
  {
    "text": "of problems such as shortest\npaths as a linear program.",
    "start": "2541633",
    "end": "2546767"
  },
  {
    "text": "So, it's a general tool.\nAnd in this class,",
    "start": "2546767",
    "end": "2551913"
  },
  {
    "text": "we will not cover any\nalgorithms for solving linear",
    "start": "2551913",
    "end": "2557229"
  },
  {
    "text": "programming.\nIt's a bit tricky. I'll just mention that they are\nout there.",
    "start": "2557229",
    "end": "2564776"
  },
  {
    "text": "So, there's many efficient\nalgorithms, and lots of code",
    "start": "2564777",
    "end": "2570518"
  },
  {
    "text": "that does this.\nIt's a very practical setup. So, lots of algorithms to solve\nLP's, linear programs.",
    "start": "2570518",
    "end": "2582000"
  },
  {
    "text": "Linear programming is usually\ncalled LP. And, I'll mention a few of\nthem.",
    "start": "2582000",
    "end": "2588839"
  },
  {
    "text": "There's the simplex algorithm.\nThis is one of the first.",
    "start": "2588839",
    "end": "2594212"
  },
  {
    "text": "I think it is the first,\nthe ellipsoid algorithm. There's interior point methods,\nand there's random sampling.",
    "start": "2594212",
    "end": "2604666"
  },
  {
    "text": "I'll just say a little bit\nabout each of these because",
    "start": "2604666",
    "end": "2609844"
  },
  {
    "text": "we're not going to talk about\nany of them in depth.",
    "start": "2609844",
    "end": "2616000"
  },
  {
    "text": "The simplex algorithm,\nthis is, I mean, one of the first algorithms in\nthe world in some sense,",
    "start": "2616000",
    "end": "2621825"
  },
  {
    "text": "certainly one of the most\npopular. It's still used today.\nAlmost all linear programming",
    "start": "2621825",
    "end": "2627144"
  },
  {
    "text": "code uses the simplex algorithm.\nIt happens to run an exponential time in the\nworst-case, so it's actually",
    "start": "2627144",
    "end": "2633665"
  },
  {
    "text": "pretty bad theoretically.\nBut in practice, it works really well.\nAnd there is some recent work",
    "start": "2633665",
    "end": "2639427"
  },
  {
    "text": "that tries to understand this.\nIt's still exponential in the worst case.\nBut, it's practical.",
    "start": "2639427",
    "end": "2646408"
  },
  {
    "text": "There's actually an open\nproblem whether there exists a variation of simplex that runs\nin polynomial time.",
    "start": "2646408",
    "end": "2653661"
  },
  {
    "text": "But, I won't go into that.\nThat's a major open problem in this area of linear programming.\nThe ellipsoid algorithm was the",
    "start": "2653661",
    "end": "2662042"
  },
  {
    "text": "first algorithm to solve linear\nprogramming in polynomial time. So, for a long time,\npeople didn't know.",
    "start": "2662042",
    "end": "2670000"
  },
  {
    "text": "Around this time,\npeople started realizing polynomial time is a good thing.\nThat happened around the late",
    "start": "2670000",
    "end": "2676219"
  },
  {
    "text": "60s.\nPolynomial time is good. And, the ellipsoid algorithm is\nthe first one to do it. It's a very general algorithm,\nand very powerful,",
    "start": "2676219",
    "end": "2684146"
  },
  {
    "text": "theoretically:\ncompletely impractical. But, it's cool.\nIt lets you do things like you can solve a linear program that\nhas exponentially many",
    "start": "2684146",
    "end": "2692378"
  },
  {
    "text": "constraints in polynomial time.\nYou've got all sorts of crazy things.\nSo, I'll just say it's",
    "start": "2692378",
    "end": "2697804"
  },
  {
    "text": "polynomial time.\nI can't say something nice about it; don't say it at all.\nIt's impractical.",
    "start": "2697804",
    "end": "2704815"
  },
  {
    "text": "Interior point methods are sort\nof the mixture. They run in polynomial time.\nYou can guarantee that.",
    "start": "2704815",
    "end": "2711215"
  },
  {
    "text": "And, they are also pretty\npractical, and there's sort of this competition these days\nabout whether simplex or",
    "start": "2711215",
    "end": "2718208"
  },
  {
    "text": "interior point is better.\nAnd, I don't know what it is today but a few years ago they\nwere neck and neck.",
    "start": "2718208",
    "end": "2724937"
  },
  {
    "text": "And, random sampling is a brand\nnew approach. This is just from a couple\nyears ago by two MIT professors,",
    "start": "2724937",
    "end": "2731666"
  },
  {
    "text": "Dimitris Bertsimas and Santosh\nVempala, I guess the other is in applied math.\nSo, just to show you,",
    "start": "2731666",
    "end": "2739255"
  },
  {
    "text": "there's active work in this\narea. People are still finding new\nways to solve linear programs.",
    "start": "2739255",
    "end": "2744635"
  },
  {
    "text": "This is completely randomized,\nand very simple, and very general.\nIt hasn't been implemented,",
    "start": "2744635",
    "end": "2750016"
  },
  {
    "text": "so we don't know how practical\nit is yet. But, it has potential.\nOK: pretty neat. OK, we're going to look at a\nsomewhat simpler version of",
    "start": "2750016",
    "end": "2757967"
  },
  {
    "text": "linear programming.\nThe first restriction we are going to make is actually not\nmuch of a restriction.",
    "start": "2757967",
    "end": "2765837"
  },
  {
    "text": "But, nonetheless we will\nconsider it, it's a little bit easier to think about.\nSo here, we had some polytope",
    "start": "2765837",
    "end": "2773596"
  },
  {
    "text": "we wanted to maximize some\nobjective. In a feasibility problem,\nI just want to know,",
    "start": "2773596",
    "end": "2779581"
  },
  {
    "text": "is the polytope empty?\nCan you find any point in that polytope?\nCan you find any set of values,",
    "start": "2779581",
    "end": "2786379"
  },
  {
    "text": "x, that satisfy these\nconstraints? OK, so there's no objective.\nc, just find x such that AX is",
    "start": "2786379",
    "end": "2794793"
  },
  {
    "text": "less than or equal to B.\nOK, it turns out you can prove a very general theorem that if\nyou can solve linear",
    "start": "2794793",
    "end": "2803388"
  },
  {
    "text": "feasibility, you can also solve\nlinear programming. We won't prove that here,\nbut this is actually no easier",
    "start": "2803388",
    "end": "2812066"
  },
  {
    "text": "than the original problem even\nthough it feels easier, and it's easier to think about.\nI was just saying actually no",
    "start": "2812066",
    "end": "2823160"
  },
  {
    "text": "easier than LP.\nOK, the next restriction we're going to make is a real\nrestriction.",
    "start": "2823160",
    "end": "2831878"
  },
  {
    "text": "And it simplifies the problem\nquite a bit.",
    "start": "2831878",
    "end": "2837000"
  },
  {
    "start": "2838000",
    "end": "2978000"
  },
  {
    "text": "And that's to look at different\nconstraints.",
    "start": "2850000",
    "end": "2855330"
  },
  {
    "text": "And, if all this seemed a bit\nabstract so far,",
    "start": "2855330",
    "end": "2860909"
  },
  {
    "text": "we will now ground ourselves\nlittle bit. A system of different\nconstraints is a linear",
    "start": "2860909",
    "end": "2871198"
  },
  {
    "text": "feasibility problem.\nSo, it's an LP where there's no",
    "start": "2871198",
    "end": "2877520"
  },
  {
    "text": "objective.\nAnd, it's with a restriction,",
    "start": "2877520",
    "end": "2886484"
  },
  {
    "text": "so, where each row of the\nmatrix, so, the matrix,",
    "start": "2886484",
    "end": "2897216"
  },
  {
    "text": "A, has one one,\nand it has one minus one,",
    "start": "2897217",
    "end": "2906161"
  },
  {
    "text": "and everything else in the row\nis zero.",
    "start": "2906161",
    "end": "2916000"
  },
  {
    "text": "OK, in other words,\neach constraint has its very simple form.\nIt involves two variables and",
    "start": "2916000",
    "end": "2925263"
  },
  {
    "text": "some number.\nSo, we have something like x_j minus x_i is less than or equal\nto w_ij.",
    "start": "2925263",
    "end": "2933789"
  },
  {
    "text": "So, this is just a number.\nThese are two variables.",
    "start": "2933789",
    "end": "2940000"
  },
  {
    "text": "There's a minus sign,\nno values up here, no coefficients,\nno other of the X_k's appear,",
    "start": "2940000",
    "end": "2946238"
  },
  {
    "text": "just two of them.\nAnd, you have a bunch of constraints of this form,\none per row of the matrix.",
    "start": "2946238",
    "end": "2953071"
  },
  {
    "text": "Geometrically,\nI haven't thought about what this means.\nI think it means the",
    "start": "2953071",
    "end": "2958493"
  },
  {
    "text": "hyperplanes are pretty simple.\nSorry I can't do better than that.\nIt's a little hard to see this",
    "start": "2958493",
    "end": "2965400"
  },
  {
    "text": "in high dimensions.\nBut, it will start to",
    "start": "2965400",
    "end": "2970734"
  },
  {
    "text": "correspond to something we've\nseen, namely the board that its",
    "start": "2970735",
    "end": "2978550"
  },
  {
    "start": "2978000",
    "end": "3198000"
  },
  {
    "text": "next to, very shortly.\nOK, so let's do a very quick",
    "start": "2978550",
    "end": "2985063"
  },
  {
    "text": "example mainly to have something\nto point at.",
    "start": "2985063",
    "end": "2990794"
  },
  {
    "text": "Here's a very simple system of\ndifference constraints --",
    "start": "2990794",
    "end": "2999000"
  },
  {
    "text": "-- OK, and a solution.\nWhy not? It's not totally trivial to\nsolve this, but here's a",
    "start": "3011000",
    "end": "3018000"
  },
  {
    "text": "solution.\nAnd the only thing to check is that each of these constraints\nis satisfied.",
    "start": "3018000",
    "end": "3025086"
  },
  {
    "text": "x_1 minus x_2 is three,\nwhich is less than or equal to three, and so on.\nThere could be negative values.",
    "start": "3025086",
    "end": "3035971"
  },
  {
    "text": "There could be positive values.\nIt doesn't matter.",
    "start": "3035971",
    "end": "3042246"
  },
  {
    "text": "I'd like to transform this\nsystem of difference constraints",
    "start": "3042247",
    "end": "3049677"
  },
  {
    "text": "into a graph because we know a\nlot about graphs.",
    "start": "3049677",
    "end": "3055698"
  },
  {
    "text": "So, we're going to call this\nthe constraint graph.",
    "start": "3055698",
    "end": "3063000"
  },
  {
    "text": "And, it's going to represent\nthese constraints.",
    "start": "3063000",
    "end": "3068422"
  },
  {
    "text": "How'd I do it?\nWell, I take every constraint,",
    "start": "3068422",
    "end": "3073608"
  },
  {
    "text": "which in general looks like\nthis, and I convert it into an",
    "start": "3073608",
    "end": "3080326"
  },
  {
    "text": "edge.\nOK, so if I write it as x_j minus x_i is less than or equal\nto some w_ij,",
    "start": "3080326",
    "end": "3089285"
  },
  {
    "text": "w seems suggestive of weights.\nThat's exactly why I called it",
    "start": "3089285",
    "end": "3096254"
  },
  {
    "text": "w.\nI'm going to make that an edge from v_i to v_j.\nSo, the order flips a little",
    "start": "3096254",
    "end": "3101964"
  },
  {
    "text": "bit.\nAnd, the weight of that edge is w_ij.\nSo, just do that. Make n vertices.\nSo, you have the number of",
    "start": "3101965",
    "end": "3109404"
  },
  {
    "text": "vertices equals n.\nThe number of edges equals the number of constraints,\nwhich is m, the height of the",
    "start": "3109404",
    "end": "3116843"
  },
  {
    "text": "matrix, and just transform.\nSo, for example, here we have three variables.\nSo, we have three vertices,",
    "start": "3116843",
    "end": "3126417"
  },
  {
    "text": "v_1, v_2, v_3.\nWe have x_1 minus x_2. So, we have an edge from v_2 to\nv_1 of weight three.",
    "start": "3126417",
    "end": "3134172"
  },
  {
    "text": "We have x_2 minus x_3.\nSo, we have an edge from v_3 to v_2 of weight minus two.\nAnd, we have x_1 minus x_3.",
    "start": "3134172",
    "end": "3143442"
  },
  {
    "text": "So, we have an edge from v_3 to\nv_1 of weight two. I hope I got the directions\nright.",
    "start": "3143442",
    "end": "3152000"
  },
  {
    "text": "Yep.\nSo, there it is, a graph: currently no obvious\nconnection to shortest paths,",
    "start": "3152000",
    "end": "3160422"
  },
  {
    "text": "right?\nBut in fact, this constraint is closely\nrelated to shortest paths.",
    "start": "3160423",
    "end": "3167983"
  },
  {
    "text": "So let me just rewrite it.\nYou could say, well, an x_j is less than or\nequal to x_i plus w_ij.",
    "start": "3167983",
    "end": "3179000"
  },
  {
    "text": "Or, you could think of it as\nd[j] less than or equal to d[i] plus w_ij.\nThis is a conceptual balloon.",
    "start": "3179000",
    "end": "3187044"
  },
  {
    "text": "Look awfully familiar?\nA lot like the triangle inequality, a lot like\nrelaxation.",
    "start": "3187044",
    "end": "3193447"
  },
  {
    "text": "So, there's a very close\nconnection between these two problems as we will now prove.",
    "start": "3193447",
    "end": "3201000"
  },
  {
    "start": "3198000",
    "end": "3600000"
  },
  {
    "text": "So, we're going to have two\ntheorems. And, they're going to look\nsimilar to the correctness of",
    "start": "3223000",
    "end": "3229174"
  },
  {
    "text": "Bellman-Ford in that they talk\nabout negative weight cycles. Here we go.\nIt turns out,",
    "start": "3229175",
    "end": "3234807"
  },
  {
    "text": "I mean, we have this constraint\ngraph. It can have negative weights.\nIt can have positive weights.",
    "start": "3234807",
    "end": "3242000"
  },
  {
    "text": "It turns out what matters is if\nyou have a negative weight cycle.\nSo, the first thing to prove is",
    "start": "3242000",
    "end": "3247929"
  },
  {
    "text": "that if you have a negative\nweight cycle that something bad happens.\nOK, what could happen bad?",
    "start": "3247929",
    "end": "3253733"
  },
  {
    "text": "Well, we're just trying to\nsatisfy this system of constraints.\nSo, the bad thing is that there",
    "start": "3253733",
    "end": "3259474"
  },
  {
    "text": "might not be any solution.\nThese constraints may be infeasible.\nAnd that's the claim.",
    "start": "3259474",
    "end": "3264647"
  },
  {
    "text": "The claim is that this is\nactually an if and only if. But first we'll proved the if.\nIf you have a negative weight",
    "start": "3264647",
    "end": "3273943"
  },
  {
    "text": "cycle, you're doomed.\nThe difference constraints are unsatisfiable.\nThat's a more intuitive way to",
    "start": "3273943",
    "end": "3281902"
  },
  {
    "text": "say it.\nIn the LP world, they call it infeasible.\nBut unsatisfiable makes a lot",
    "start": "3281902",
    "end": "3288270"
  },
  {
    "text": "more sense.\nThere's no way to assign the x_i's in order to satisfy all\nthe constraints simultaneously.",
    "start": "3288270",
    "end": "3296564"
  },
  {
    "text": "So, let's just take a look.\nConsider a negative weight",
    "start": "3296564",
    "end": "3301726"
  },
  {
    "text": "cycle.\nIt starts at some vertex, goes through some vertices,\nand at some point comes back.",
    "start": "3301726",
    "end": "3307503"
  },
  {
    "text": "I don't care whether it repeats\nvertices, just as long as this cycle, from v_1 to v_1 is a\nnegative weight cycle strictly",
    "start": "3307503",
    "end": "3315338"
  },
  {
    "text": "negative weight.",
    "start": "3315339",
    "end": "3317000"
  },
  {
    "text": "OK, and what I'm going to do is\njust write down all the constraints.\nEach of these edges corresponds",
    "start": "3326000",
    "end": "3334123"
  },
  {
    "text": "to a constraint,\nwhich must be in the set of constraints because we had that\ngraph.",
    "start": "3334123",
    "end": "3340822"
  },
  {
    "text": "So, these are all edges.\nLet's look at what they give us.\nSo, we have an edge from v_1 to",
    "start": "3340822",
    "end": "3348024"
  },
  {
    "text": "v_2.\nThat corresponds to x_2 minus x_1 is, at most,\nsomething, w_12.",
    "start": "3348024",
    "end": "3353467"
  },
  {
    "text": "Then we have x_3 minus x_2.\nThat's the weight w_23, and so on.\nAnd eventually we get up to",
    "start": "3353467",
    "end": "3364070"
  },
  {
    "text": "something like x_k minus\nx_(k-1). That's this edge:\nw_(k-1),k , and lastly we have",
    "start": "3364070",
    "end": "3375979"
  },
  {
    "text": "this edge, which wraps around.\nSo, it's x_1 minus x_k,",
    "start": "3375979",
    "end": "3383969"
  },
  {
    "text": "w_k1 if I've got the signs\nright.",
    "start": "3383969",
    "end": "3390000"
  },
  {
    "text": "Good, so here's a bunch of\nconstraints.",
    "start": "3390000",
    "end": "3395728"
  },
  {
    "text": "What do you suggest I do with\nthem?",
    "start": "3395728",
    "end": "3400854"
  },
  {
    "text": "Anything interesting about\nthese constraints,",
    "start": "3400854",
    "end": "3407487"
  },
  {
    "text": "say, the left hand sides?\nSorry? It sounded like the right word.\nWhat was it?",
    "start": "3407487",
    "end": "3420000"
  },
  {
    "text": "Telescopes, yes,\ngood. Everything cancels.\nIf I added these up, there's an x_2 and a minus x_2.\nThere's a minus x_1 and an x_1.",
    "start": "3420000",
    "end": "3428224"
  },
  {
    "text": "There's a minus XK and an XK.\nEverything here cancels if I add up the left hand sides.\nSo, what happens if I add up",
    "start": "3428224",
    "end": "3435775"
  },
  {
    "text": "the right hand sides?\nOver here I get zero, my favorite answer.\nAnd over here,",
    "start": "3435775",
    "end": "3440831"
  },
  {
    "text": "we get all the weights of all\nthe edges in the negative weight cycle, which is the weight of\nthe cycle, which is negative.",
    "start": "3440831",
    "end": "3450000"
  },
  {
    "text": "So, zero is strictly less than\nzero: contradiction. Contradiction:\nwait a minute,",
    "start": "3450000",
    "end": "3455109"
  },
  {
    "text": "we didn't assume anything that\nwas false. So, it's not really a\ncontradiction in the",
    "start": "3455109",
    "end": "3460416"
  },
  {
    "text": "mathematical sense.\nWe didn't contradict the world. We just said that these\nconstraints are contradictory.",
    "start": "3460416",
    "end": "3467162"
  },
  {
    "text": "In other words,\nif you pick any values of the x_i's, there is no way that\nthese can all be true because",
    "start": "3467163",
    "end": "3473713"
  },
  {
    "text": "that you would get a\ncontradiction. So, it's impossible for these\nthings to be satisfied by some",
    "start": "3473714",
    "end": "3479807"
  },
  {
    "text": "real x_i's.\nSo, these must be unsatisfiable.\nLet's say there's no satisfying",
    "start": "3479807",
    "end": "3487037"
  },
  {
    "text": "assignment, a little more\nprecise, x_1 up to x_m, no weights.\nCan we satisfy those",
    "start": "3487037",
    "end": "3494777"
  },
  {
    "text": "constraints?\nBecause they add up to zero on the left-hand side,\nand negative on the right-hand",
    "start": "3494777",
    "end": "3503692"
  },
  {
    "text": "side.\nOK, so that's an easy proof. The reverse direction will be\nonly slightly harder.",
    "start": "3503692",
    "end": "3513000"
  },
  {
    "text": "OK, so, cool.\nWe have this connection. So motivation is,\nsuppose you'd want to solve these difference constraints.\nAnd we'll see one such",
    "start": "3513000",
    "end": "3520115"
  },
  {
    "text": "application.\nI Googled around for difference constraints.\nThere is a fair number of papers that care about\ndifference constraints.",
    "start": "3520115",
    "end": "3526853"
  },
  {
    "text": "And, they all use shortest\npaths to solve them. So, if we can prove a\nconnection between shortest",
    "start": "3526853",
    "end": "3531920"
  },
  {
    "text": "paths, which we know how to\ncompute, and difference constraints, then we'll have\nsomething cool.",
    "start": "3531920",
    "end": "3536933"
  },
  {
    "text": "And, next class will see even\nmore applications of difference constraints.\nIt turns out they're really",
    "start": "3536933",
    "end": "3545387"
  },
  {
    "text": "useful for all pairs shortest\npaths. OK, but for now let's just\nprove this equivalence and",
    "start": "3545387",
    "end": "3556304"
  },
  {
    "text": "finish it off.\nSo, the reverse direction is if",
    "start": "3556304",
    "end": "3561950"
  },
  {
    "text": "there's no negative weight cycle\nin this constraint graph,",
    "start": "3561950",
    "end": "3569102"
  },
  {
    "text": "then the system better be\nsatisfiable.",
    "start": "3569102",
    "end": "3575000"
  },
  {
    "text": "The claim is that these\nnegative weight cycles are the",
    "start": "3575000",
    "end": "3582084"
  },
  {
    "text": "only barriers for finding a\nsolution to these difference",
    "start": "3582084",
    "end": "3589435"
  },
  {
    "text": "constraints.\nI have this feeling somewhere",
    "start": "3589435",
    "end": "3594915"
  },
  {
    "text": "here.\nI had to talk about the constraint graph.\nGood.",
    "start": "3594915",
    "end": "3603000"
  },
  {
    "text": "Satisfied, good.\nSo, here we're going to see a",
    "start": "3613000",
    "end": "3619830"
  },
  {
    "text": "technique that is very useful\nwhen thinking about shortest",
    "start": "3619830",
    "end": "3628482"
  },
  {
    "text": "paths.\nAnd, it's a bit hard to guess, especially if you haven't seen\nit before.",
    "start": "3628482",
    "end": "3636505"
  },
  {
    "text": "This is useful in problem sets,\nand in quizzes, and finals, and everything.\nSo, keep this in mind.",
    "start": "3636505",
    "end": "3645334"
  },
  {
    "text": "I mean, I'm using it to prove\nthis rather simple theorem,",
    "start": "3645334",
    "end": "3650539"
  },
  {
    "text": "but the idea of changing the\ngraph, so I'm going to call this",
    "start": "3650539",
    "end": "3656115"
  },
  {
    "text": "constraint graph G.\nChanging the graph is a very powerful idea.\nSo, we're going to add a new",
    "start": "3656115",
    "end": "3664386"
  },
  {
    "text": "vertex, s, or source,\nuse the source, Luke, and we're going to add a\nbunch of edges from s because",
    "start": "3664386",
    "end": "3673214"
  },
  {
    "text": "being a source,\nit better be connected to some things.\nSo, we are going to add a zero",
    "start": "3673215",
    "end": "3683529"
  },
  {
    "text": "weight edge, or weight zero edge\nfrom s to everywhere,",
    "start": "3683529",
    "end": "3689764"
  },
  {
    "text": "so, to every other vertex in\nthe constraint graph.",
    "start": "3689764",
    "end": "3696000"
  },
  {
    "text": "Those vertices are called v_i,\nv_1 up to v_n. So, I have my constraint graph.\nBut I'll copy this one so I can",
    "start": "3696000",
    "end": "3705928"
  },
  {
    "text": "change it.\nIt's always good to backup your work before you make changes,\nright?",
    "start": "3705928",
    "end": "3713046"
  },
  {
    "text": "So now, I want to add a new\nvertex, s, over here, my new source.\nI just take my constraint",
    "start": "3713046",
    "end": "3721195"
  },
  {
    "text": "graph, whatever it looks like,\nadd in weight zero edges to all",
    "start": "3721195",
    "end": "3726909"
  },
  {
    "text": "the other vertices.\nSimple enough. Now, what did I do?\nWhat did you do?",
    "start": "3726909",
    "end": "3734099"
  },
  {
    "text": "Well, I have a candidate source\nnow which can reach all the vertices.\nSo, shortest path from s,",
    "start": "3734100",
    "end": "3741798"
  },
  {
    "text": "hopefully, well,\npaths from s exist. I can get from s to everywhere\nin weight at most zero.",
    "start": "3741799",
    "end": "3750000"
  },
  {
    "text": "OK, maybe less.\nCould it be less? Well, you know,\nlike v_2, I can get to it by zero minus two.\nSo, that's less than zero.",
    "start": "3750000",
    "end": "3756710"
  },
  {
    "text": "So I've got to be a little\ncareful. What if there's a negative\nweight cycle? Oh no?\nThen there wouldn't be any",
    "start": "3756710",
    "end": "3762785"
  },
  {
    "text": "shortest paths.\nFortunately, we assume that there's no\nnegative weight cycle in the original graph.\nAnd if you think about it,",
    "start": "3762785",
    "end": "3769785"
  },
  {
    "text": "if there's no negative weight\ncycle in the original graph, we add an edge from s to\neverywhere else.",
    "start": "3769785",
    "end": "3775396"
  },
  {
    "text": "We're not making any new\nnegative weight cycles because you can start at s and go\nsomewhere at a cost of zero,",
    "start": "3775396",
    "end": "3781586"
  },
  {
    "text": "which doesn't affect any\nweights. And then, you are forced to\nstay in the old graph.",
    "start": "3781586",
    "end": "3788920"
  },
  {
    "text": "So, there can't be any new\nnegative weight cycles. So, the modified graph has no\nnegative weight cycles.",
    "start": "3788920",
    "end": "3797000"
  },
  {
    "text": "That's good because it also has\npaths from s, and therefore it also has\nshortest paths from s.",
    "start": "3797000",
    "end": "3805000"
  },
  {
    "text": "The modified graph has no\nnegative weight because it",
    "start": "3805000",
    "end": "3810376"
  },
  {
    "text": "didn't before.\nAnd, it has paths from s. There's a path from s to every\nvertex.",
    "start": "3810376",
    "end": "3818387"
  },
  {
    "text": "There may not have been before.\nBefore, I couldn't get from v_2",
    "start": "3818387",
    "end": "3824922"
  },
  {
    "text": "to v_3, for example.\nWell, that's still true. But from s I can get to\neverywhere.",
    "start": "3824923",
    "end": "3833145"
  },
  {
    "text": "So, that means that this graph,\nthis modified graph,",
    "start": "3833145",
    "end": "3838521"
  },
  {
    "text": "has shortest paths.\nShortest paths exist from s.",
    "start": "3838521",
    "end": "3844974"
  },
  {
    "text": "In other words,\nif I took all the shortest path weights, like I ran Bellman-Ford\nfrom s, then,",
    "start": "3844974",
    "end": "3854641"
  },
  {
    "text": "I would get a bunch of finite\nnumbers, d of v, for every value,\nfor every vertex.",
    "start": "3854641",
    "end": "3862925"
  },
  {
    "text": "That seems like a good idea.\nLet's do it. So, shortest paths exist.\nLet's just assign x_i to be the",
    "start": "3862926",
    "end": "3873757"
  },
  {
    "text": "shortest path weight from s to\nv_i. Why not?\nThat's a good choice for a",
    "start": "3873757",
    "end": "3879806"
  },
  {
    "text": "number, the shortest path weight\nfrom s to v_i. This is finite because it's\nless than infinity,",
    "start": "3879806",
    "end": "3887990"
  },
  {
    "text": "and it's greater than minus\ninfinity, so, some finite number.\nThat's what we need to do in",
    "start": "3887990",
    "end": "3895730"
  },
  {
    "text": "order to satisfy these\nconstraints. The claim is that this is a\nsatisfying assignment.",
    "start": "3895730",
    "end": "3903933"
  },
  {
    "text": "Why?\nTriangle inequality. Somewhere here we wrote\ntriangle inequality.",
    "start": "3903933",
    "end": "3909311"
  },
  {
    "text": "This looks a lot like the\ntriangle inequality. In fact, I think that's the end\nof the proof.",
    "start": "3909311",
    "end": "3916456"
  },
  {
    "text": "Let's see here.\nWhat we want to be true with this assignment is that x_j\nminus x_i is less than or equal",
    "start": "3916456",
    "end": "3924564"
  },
  {
    "text": "to w_ij whenever ij is an edge.\nOr, let's say v_i, v_j, for every such constraint,\nso, for v_i,",
    "start": "3924564",
    "end": "3931949"
  },
  {
    "text": "v_j in the edge set.\nOK, so what is this true?",
    "start": "3931949",
    "end": "3937313"
  },
  {
    "text": "Well, let's just expand it out.\nSo, x_i is this delta, and x_j is some other delta.\nSo, we have delta of s,",
    "start": "3937313",
    "end": "3946935"
  },
  {
    "text": "vj minus delta of s_vi.\nAnd, on the right-hand side, well, w_ij, that was the weight\nof the edge from I to J.",
    "start": "3946935",
    "end": "3956743"
  },
  {
    "text": "So, this is the weight of v_i\nto v_j. OK, I will rewrite this\nslightly.",
    "start": "3956743",
    "end": "3963659"
  },
  {
    "text": "Delta s, vj is less than or\nequal to delta s, vi plus w of v_i,\nv_j.",
    "start": "3963659",
    "end": "3969060"
  },
  {
    "text": "And that's the triangle\ninequality more or less. The shortest path from s to v_j\nis, at most, shortest path from",
    "start": "3969060",
    "end": "3978117"
  },
  {
    "text": "s to v_i plus a particular path\nfrom v_i to v_j, namely the single edge v_i to\nv_j.",
    "start": "3978117",
    "end": "3984765"
  },
  {
    "text": "This could only be longer than\nthe shortest path.",
    "start": "3984765",
    "end": "3990000"
  },
  {
    "text": "And so, that makes the\nright-hand side bigger, which makes this inequality\nmore true, meaning it was true",
    "start": "3990000",
    "end": "3997644"
  },
  {
    "text": "before.\nAnd now it's still true. And, that proves it.\nThis is true. And, these were all equivalent\nstatements.",
    "start": "3997644",
    "end": "4005513"
  },
  {
    "text": "This we know to be true by\ntriangle inequality. Therefore, these constraints\nare all satisfied.",
    "start": "4005513",
    "end": "4012408"
  },
  {
    "text": "Magic.\nI'm so excited here. So, we've proved that having a\nnegative weight cycle is exactly",
    "start": "4012408",
    "end": "4019004"
  },
  {
    "text": "when these system of difference\nconstraints are unsatisfiable.",
    "start": "4019004",
    "end": "4025000"
  },
  {
    "text": "So, if we want to satisfy them,\nif we want to find the right answer to x, we run\nBellman-Ford. Either it says,\noh, no negative weight cycle.",
    "start": "4025000",
    "end": "4032417"
  },
  {
    "text": "Then you are hosed.\nThen, there is no solution. But that's the best you could\nhope to know. Otherwise, it says,\noh, there was no negative",
    "start": "4032417",
    "end": "4039670"
  },
  {
    "text": "weight cycle,\nand here are your shortest path weights.\nYou just plug them in, and bam, you have your x_i's\nthat satisfy the constraints.",
    "start": "4039670",
    "end": "4046868"
  },
  {
    "text": "Awesome.\nNow, it wasn't just any graph. I mean, we started with\nconstraints, algebra,",
    "start": "4046868",
    "end": "4052877"
  },
  {
    "text": "we converted it into a graph by\nthis transform. Then we added a source vertex,\ns.",
    "start": "4052877",
    "end": "4057978"
  },
  {
    "text": "So, I mean, we had to build a\ngraph to solve our problem, very powerful idea.\nCool.",
    "start": "4057978",
    "end": "4063210"
  },
  {
    "text": "This is the idea of reduction.\nYou can reduce the problem you want to solve into some problem\nyou know how to solve.",
    "start": "4063210",
    "end": "4070601"
  },
  {
    "text": "You know how to solve shortest\npaths when there are no negative weight cycles,\nor find out that there is a",
    "start": "4070601",
    "end": "4077337"
  },
  {
    "text": "negative weight cycle by\nBellman-Ford. So, now we know how to solve\ndifference constraints.",
    "start": "4077337",
    "end": "4086099"
  },
  {
    "text": "It turns out you can do even\nmore. Bellman-Ford does a little bit\nmore than just solve these",
    "start": "4086099",
    "end": "4095000"
  },
  {
    "text": "constraints.\nBut first let me write down what I've been jumping up and\ndown about.",
    "start": "4095000",
    "end": "4102899"
  },
  {
    "text": "The corollary is you can use\nBellman-Ford. I mean, you make this graph.\nThen you apply Bellman-Ford,",
    "start": "4102899",
    "end": "4114484"
  },
  {
    "text": "and it will solve your system\nof difference constraints.",
    "start": "4114484",
    "end": "4121330"
  },
  {
    "text": "So, let me put in some numbers\nhere. You have m difference\nconstraints.",
    "start": "4121330",
    "end": "4129793"
  },
  {
    "text": "And, you have n variables.\nAnd, it will solve them in",
    "start": "4129793",
    "end": "4136266"
  },
  {
    "text": "order m times n time.\nActually, these numbers go up",
    "start": "4136266",
    "end": "4142416"
  },
  {
    "text": "slightly because we are adding n\nedges, and we're adding one vertex, but assuming all of\nthese numbers are nontrivial,",
    "start": "4142416",
    "end": "4152000"
  },
  {
    "text": "m is at least n.\nIt's order MN time. OK, trying to avoid cases where\nsome of them are close to zero.",
    "start": "4152000",
    "end": "4160083"
  },
  {
    "text": "Good.\nSo, some other facts, that's what I just said.\nAnd we'll leave these as",
    "start": "4160083",
    "end": "4166250"
  },
  {
    "text": "exercises because they're not\ntoo essential. The main thing we need is this.\nBut, some other cool facts is",
    "start": "4166250",
    "end": "4175627"
  },
  {
    "text": "that Bellman-Ford actually\noptimizes some objective functions.\nSo, we are saying it's just a",
    "start": "4175627",
    "end": "4182491"
  },
  {
    "text": "feasibility problem.\nWe just want to know whether these constraints are\nsatisfiable.",
    "start": "4182492",
    "end": "4188738"
  },
  {
    "text": "In fact, you can add a\nparticular objective function. So, you can't give it an\narbitrary objective function,",
    "start": "4188739",
    "end": "4196837"
  },
  {
    "text": "but here's one of interest.\nx_1 plus x_2 plus x_n,",
    "start": "4196837",
    "end": "4204647"
  },
  {
    "text": "OK, but not just that.\nWe have some constraints.",
    "start": "4204647",
    "end": "4215000"
  },
  {
    "text": "OK, this is a linear program.\nI want to maximize the sum of the x_i's subject to all the\nx_i's being nonpositive and the",
    "start": "4224000",
    "end": "4230849"
  },
  {
    "text": "difference constraints.\nSo, this we had before. This is fine.\nWe noticed at some point you",
    "start": "4230849",
    "end": "4235943"
  },
  {
    "text": "could get from s to everywhere\nwith cost, at most, zero.\nSo, we know that in this assignment all of the x_i's are\nnegative.",
    "start": "4235943",
    "end": "4242850"
  },
  {
    "text": "That's not necessary,\nbut it's true when you run Bellman-Ford.\nSo if you solve your system",
    "start": "4242851",
    "end": "4247944"
  },
  {
    "text": "using Bellman-Ford,\nwhich is no less general than anything else,\nyou happen to get nonpositive",
    "start": "4247944",
    "end": "4253272"
  },
  {
    "text": "x_i's.\nAnd so, subject to that constraint, it actually makes\nthem is close to zero as possible in the L1 norm.\nIn the sum of these values,",
    "start": "4253272",
    "end": "4264009"
  },
  {
    "text": "it tries to make the sum as\nclose to zero, it tries to make the values as\nsmall as possible in absolute",
    "start": "4264009",
    "end": "4275154"
  },
  {
    "text": "value in this sense.\nOK, it does more than that.",
    "start": "4275154",
    "end": "4280392"
  },
  {
    "text": "It cooks, it cleans,\nit finds shortest paths. It also minimizes the spread,\nthe maximum over all i of x_i",
    "start": "4280393",
    "end": "4291760"
  },
  {
    "text": "minus the minimum over all i of\nx_i.",
    "start": "4291761",
    "end": "4297000"
  },
  {
    "text": "So, I mean, if you have your\nreal line, and here are the x_i's wherever they are.\nIt minimizes this distance.",
    "start": "4297000",
    "end": "4304402"
  },
  {
    "text": "And zero is somewhere over\nhere. So, it tries to make the x_i's\nas compact as possible.",
    "start": "4304402",
    "end": "4310268"
  },
  {
    "text": "This is actually the L infinity\nnorm, if you know stuff about norms from your linear algebra\nclass.",
    "start": "4310268",
    "end": "4316972"
  },
  {
    "text": "OK, this is the L1 norm.\nI think it minimizes every LP norm.\nGood, so let's use this for",
    "start": "4316972",
    "end": "4325170"
  },
  {
    "text": "something.\nYeah, let's solve a real problem, and then we'll be done\nfor today.",
    "start": "4325170",
    "end": "4333978"
  },
  {
    "text": "Next class we'll see the really\ncool stuff, the really cool",
    "start": "4333978",
    "end": "4340790"
  },
  {
    "text": "application of all of this.\nFor now, and we'll see a cool",
    "start": "4340790",
    "end": "4347366"
  },
  {
    "text": "but relatively simple\napplication, which is VLSI",
    "start": "4347366",
    "end": "4352886"
  },
  {
    "text": "layout.\nWe talked a little bit about VLSI way back and divide and\nconquer.",
    "start": "4352886",
    "end": "4360779"
  },
  {
    "text": "You have a bunch of chips,\nor you want to arrange them, and minimize some objectives.\nSo, here's a particular,",
    "start": "4360779",
    "end": "4370441"
  },
  {
    "text": "tons of problems that come out\nof VLSI layout. Here's one of them.\nYou have a bunch of features of",
    "start": "4370441",
    "end": "4379020"
  },
  {
    "text": "an integrated circuit.\nYou want to somehow arrange",
    "start": "4379020",
    "end": "4384583"
  },
  {
    "text": "them on your circuit without\nputting any two of them too",
    "start": "4384583",
    "end": "4389845"
  },
  {
    "text": "close to each other.\nYou have some minimum separation like at least they\nshould not get top of each",
    "start": "4389845",
    "end": "4399030"
  },
  {
    "text": "other.\nProbably, you also need some separation to put wires in\nbetween, and so on,",
    "start": "4399030",
    "end": "4406589"
  },
  {
    "text": "so, without putting any two\nfeatures too close together.",
    "start": "4406589",
    "end": "4413000"
  },
  {
    "text": "OK, so just to give you an\nidea, so I have some objects and I'm going to be a little bit\nvague about how this works.",
    "start": "4413000",
    "end": "4421089"
  },
  {
    "text": "You have some features.\nThis is stuff, some chips, whatever.\nWe don't really care what their",
    "start": "4421089",
    "end": "4427460"
  },
  {
    "text": "shapes look like.\nI just want to be able to move them around so that the gap at\nany point, so let me just think",
    "start": "4427460",
    "end": "4435192"
  },
  {
    "text": "about this gap.\nThis gap should be at least some delta.\nOr, I don't want to use delta.",
    "start": "4435192",
    "end": "4441134"
  },
  {
    "text": "Let's say epsilon,\ngood, small number. So, I just need some separation\nbetween all of my parts.",
    "start": "4441134",
    "end": "4448828"
  },
  {
    "text": "And for this problem,\nI'm going to be pretty simple, just say that the parts are\nonly allowed to slide",
    "start": "4448828",
    "end": "4455719"
  },
  {
    "text": "horizontally.\nSo, it's a one-dimensional problem.\nThese objects are in 2-d,",
    "start": "4455719",
    "end": "4460730"
  },
  {
    "text": "or whatever,\nbut I can only slide them an x coordinate.\nSo, to model that, I'm going to look at the left\nedge of every part and say,",
    "start": "4460730",
    "end": "4469570"
  },
  {
    "text": "well, these two left edges\nshould be at least some separation.\nSo, I think of it as whatever",
    "start": "4469570",
    "end": "4476848"
  },
  {
    "text": "the distance is plus some\nepsilon. But, you know,\nif you have some funky 2-d shapes you have to compute,\nwell, this is a little bit too",
    "start": "4476848",
    "end": "4485135"
  },
  {
    "text": "close because these come into\nalignment. But, there's some constraint,\nwell, for any two pieces,",
    "start": "4485135",
    "end": "4491063"
  },
  {
    "text": "I could figure out how close\nthey can get. They should get no closer.\nSo, I'm going to call this x_1.",
    "start": "4491063",
    "end": "4497309"
  },
  {
    "text": "I'll call this x_2.\nSo, we have some constraint like x_2 minus x_1 is at least d\nplus epsilon,",
    "start": "4497310",
    "end": "4503111"
  },
  {
    "text": "or whatever you compute that\nweight to be. OK, so for every pair of\npieces, I can do this,",
    "start": "4503111",
    "end": "4509735"
  },
  {
    "text": "compute some constraint on how\nfar apart they have to be. And, now I'd like to assign\nthese x coordinates.",
    "start": "4509735",
    "end": "4515861"
  },
  {
    "text": "Right now, I'm assuming they're\njust variables. I want to slide these pieces\naround horizontally in order to",
    "start": "4515861",
    "end": "4522105"
  },
  {
    "text": "compactify them as much as\npossible so they fit in the smallest chip that I can make\nbecause it costs money,",
    "start": "4522105",
    "end": "4528349"
  },
  {
    "text": "and time, and everything,\nand power, everything. You always want your chip\nsmall.",
    "start": "4528350",
    "end": "4534000"
  },
  {
    "text": "So, Bellman-Ford does that.\nAll right, so Bellman-Ford",
    "start": "4534000",
    "end": "4540225"
  },
  {
    "text": "solves these constraints because\nit's just a bunch of difference",
    "start": "4540225",
    "end": "4547626"
  },
  {
    "text": "constraints.\nAnd we know that they are solvable because you could\nspread all the pieces out",
    "start": "4547626",
    "end": "4557963"
  },
  {
    "text": "arbitrarily far.\nAnd, it minimizes the spread,",
    "start": "4557963",
    "end": "4563250"
  },
  {
    "text": "minimizes the size of the chip\nI need, a max of x_i minus the",
    "start": "4563250",
    "end": "4570298"
  },
  {
    "text": "min of x_i.\nSo, this is it maximizes compactness, or minimizes size\nof the chip.",
    "start": "4570298",
    "end": "4578167"
  },
  {
    "text": "OK, this is a one-dimensional\nproblem, so it may seem a little artificial, but the two\ndimensional problem is really",
    "start": "4578167",
    "end": "4587013"
  },
  {
    "text": "hard to solve.\nAnd this is, in fact, the best you can do\nwith a nice polynomial time",
    "start": "4587014",
    "end": "4593355"
  },
  {
    "text": "algorithm.\nThere are other applications if you're scheduling events in,\nlike, a multimedia environment,",
    "start": "4593355",
    "end": "4602024"
  },
  {
    "text": "and you want to guarantee that\nthis audio plays at least two seconds after this video,\nbut then there are things that",
    "start": "4602024",
    "end": "4610922"
  },
  {
    "text": "are playing at the same time,\nand they have to be within some gap of each other,\nso, lots of papers about using",
    "start": "4610922",
    "end": "4619351"
  },
  {
    "text": "Bellman-Ford,\nsolve difference constraints to enable multimedia environments.\nOK, so there you go.",
    "start": "4619351",
    "end": "4626766"
  },
  {
    "text": "And next class we'll see more\napplications of Bellman-Ford to all pairs shortest paths.\nQuestions?",
    "start": "4626766",
    "end": "4634181"
  },
  {
    "text": "Great.",
    "start": "4634181",
    "end": "4635181"
  }
]