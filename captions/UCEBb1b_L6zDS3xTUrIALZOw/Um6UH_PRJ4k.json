[
  {
    "start": "0",
    "end": "0"
  },
  {
    "start": "0",
    "end": "500"
  },
  {
    "text": "Today we’re going to describe\nthe datapath and control logic",
    "start": "500",
    "end": "3770"
  },
  {
    "text": "needed to execute\nBeta instructions.",
    "start": "3770",
    "end": "6380"
  },
  {
    "text": "In an upcoming lab assignment,\nwe’ll ask you to build",
    "start": "6380",
    "end": "9050"
  },
  {
    "text": "a working implementation using\nour standard cell library.",
    "start": "9050",
    "end": "12560"
  },
  {
    "text": "When you’re done, you’ll have\ndesigned and debugged a 32-bit",
    "start": "12560",
    "end": "15940"
  },
  {
    "text": "reduced-instruction\nset computer!",
    "start": "15940",
    "end": "17939"
  },
  {
    "text": "Not bad…",
    "start": "17940",
    "end": "20260"
  },
  {
    "text": "Before tackling a design task,\nit’s useful to understand",
    "start": "20260",
    "end": "23550"
  },
  {
    "text": "the goals for the design.",
    "start": "23550",
    "end": "25420"
  },
  {
    "text": "Functionality, of\ncourse; in our case",
    "start": "25420",
    "end": "27580"
  },
  {
    "text": "the correct execution of\ninstructions from the Beta ISA.",
    "start": "27580",
    "end": "30780"
  },
  {
    "text": "But there are other goals\nwe should think about.",
    "start": "30780",
    "end": "35550"
  },
  {
    "text": "An obvious goal is to\nmaximize performance,",
    "start": "35550",
    "end": "38280"
  },
  {
    "text": "as measured by the\nnumber of instructions",
    "start": "38280",
    "end": "40360"
  },
  {
    "text": "executed per second.",
    "start": "40360",
    "end": "42540"
  },
  {
    "text": "This is usually\nexpressed in MIPS,",
    "start": "42540",
    "end": "44640"
  },
  {
    "text": "an acronym for “Millions of\nInstructions Per Second”.",
    "start": "44640",
    "end": "48140"
  },
  {
    "text": "When the Intel 8080\nwas introduced in 1974,",
    "start": "48140",
    "end": "51530"
  },
  {
    "text": "it executed instructions at 0.29\nMIPS or 290,000 instructions",
    "start": "51530",
    "end": "57329"
  },
  {
    "text": "per second as measured by\nthe Dhrystone benchmark.",
    "start": "57330",
    "end": "61520"
  },
  {
    "text": "Modern multi-core processors\nare rated between 10,000",
    "start": "61520",
    "end": "64150"
  },
  {
    "text": "and 100,000 MIPS.",
    "start": "64150",
    "end": "68290"
  },
  {
    "text": "Another goal might be to\nminimize the manufacturing",
    "start": "68290",
    "end": "70880"
  },
  {
    "text": "cost, which in integrated\ncircuit manufacturing",
    "start": "70880",
    "end": "73840"
  },
  {
    "text": "is proportional to the\nsize of the circuit.",
    "start": "73840",
    "end": "77820"
  },
  {
    "text": "Or we might want have the best\nperformance for a given price.",
    "start": "77820",
    "end": "82400"
  },
  {
    "text": "In our increasingly\nmobile world,",
    "start": "82400",
    "end": "84060"
  },
  {
    "text": "the best performance per watt\nmight be an important goal.",
    "start": "84060",
    "end": "88570"
  },
  {
    "text": "One of the\ninteresting challenges",
    "start": "88570",
    "end": "90159"
  },
  {
    "text": "in computer\nengineering is deciding",
    "start": "90160",
    "end": "91860"
  },
  {
    "text": "exactly how to balance\nperformance against cost",
    "start": "91860",
    "end": "94660"
  },
  {
    "text": "and power efficiency.",
    "start": "94660",
    "end": "96110"
  },
  {
    "text": "Clearly the designers\nof the Apple Watch",
    "start": "96110",
    "end": "97940"
  },
  {
    "text": "have a different\nset of design goals",
    "start": "97940",
    "end": "99890"
  },
  {
    "text": "then the designers of\nhigh-end desktop computers.",
    "start": "99890",
    "end": "104040"
  },
  {
    "start": "104000",
    "end": "104000"
  },
  {
    "text": "The performance of a\nprocessor is inversely",
    "start": "104040",
    "end": "106320"
  },
  {
    "text": "proportional to the length of\ntime it takes to run a program.",
    "start": "106320",
    "end": "110080"
  },
  {
    "text": "The shorter the execution time,\nthe higher the performance.",
    "start": "110080",
    "end": "113970"
  },
  {
    "text": "The execution time is\ndetermined by three factors.",
    "start": "113970",
    "end": "116960"
  },
  {
    "text": "First, the number of\ninstructions in the program.",
    "start": "116960",
    "end": "120430"
  },
  {
    "text": "Second, the number of clock\ncycles our sequential circuit",
    "start": "120430",
    "end": "123570"
  },
  {
    "text": "requires to execute a\nparticular instruction.",
    "start": "123570",
    "end": "126950"
  },
  {
    "text": "Complex instructions,\ne.g., adding two values",
    "start": "126950",
    "end": "129819"
  },
  {
    "text": "from main memory, may\nmake a program shorter,",
    "start": "129820",
    "end": "132910"
  },
  {
    "text": "but may also require\nmany clock cycles",
    "start": "132910",
    "end": "135370"
  },
  {
    "text": "to perform the necessary\nmemory and datapath operations.",
    "start": "135370",
    "end": "139720"
  },
  {
    "text": "Third, the amount of time\nneeded for each clock cycle,",
    "start": "139720",
    "end": "143000"
  },
  {
    "text": "as determined by the propagation\ndelay of the digital logic",
    "start": "143000",
    "end": "146180"
  },
  {
    "text": "in the datapath.",
    "start": "146180",
    "end": "148340"
  },
  {
    "text": "So to increase\nthe performance we",
    "start": "148340",
    "end": "150370"
  },
  {
    "text": "could reduce the number of\ninstructions to be executed.",
    "start": "150370",
    "end": "153620"
  },
  {
    "text": "Or we can try to minimize the\nnumber of clock cycles needed",
    "start": "153620",
    "end": "156900"
  },
  {
    "text": "on the average to\nexecute our instructions.",
    "start": "156900",
    "end": "160209"
  },
  {
    "text": "There’s obviously a bit of a\ntradeoff between these first",
    "start": "160210",
    "end": "162800"
  },
  {
    "text": "two options:",
    "start": "162800",
    "end": "164060"
  },
  {
    "text": "more computation per\ninstruction usually",
    "start": "164060",
    "end": "166500"
  },
  {
    "text": "means it will take more time\nto execute the instruction.",
    "start": "166500",
    "end": "170060"
  },
  {
    "text": "Or we can try to keep our\nlogic simple, minimizing",
    "start": "170060",
    "end": "173020"
  },
  {
    "text": "its propagation delay in the\nhopes of having a short clock",
    "start": "173020",
    "end": "176310"
  },
  {
    "text": "period.",
    "start": "176310",
    "end": "178349"
  },
  {
    "text": "Today we’ll focus on an\nimplementation for the Beta ISA",
    "start": "178350",
    "end": "182210"
  },
  {
    "text": "that executes one instruction\nevery clock cycle.",
    "start": "182210",
    "end": "186230"
  },
  {
    "text": "The combinational paths in our\ncircuit will be fairly long,",
    "start": "186230",
    "end": "189000"
  },
  {
    "text": "but, as we learned in\nPart 1 of the course,",
    "start": "189000",
    "end": "191450"
  },
  {
    "text": "this gives us the opportunity\nto use pipelining to increase",
    "start": "191450",
    "end": "195260"
  },
  {
    "text": "our implementation’s throughput.",
    "start": "195260",
    "end": "197620"
  },
  {
    "text": "We’ll talk about the\nimplementation of a pipelined",
    "start": "197620",
    "end": "199950"
  },
  {
    "text": "processor in some\nupcoming lectures.",
    "start": "199950",
    "end": "203040"
  },
  {
    "start": "203000",
    "end": "203000"
  },
  {
    "text": "Here’s a quick refresher\non the Beta ISA.",
    "start": "203040",
    "end": "206090"
  },
  {
    "text": "The Beta has thirty-two\n32-bit registers",
    "start": "206090",
    "end": "208599"
  },
  {
    "text": "that hold values for\nuse by the datapath.",
    "start": "208600",
    "end": "211400"
  },
  {
    "text": "The first class of\nALU instructions,",
    "start": "211400",
    "end": "213340"
  },
  {
    "text": "which have 0b10 as the top\n2 bits of the opcode field,",
    "start": "213340",
    "end": "217560"
  },
  {
    "text": "perform an operation on two\nregister operands (Ra and Rb),",
    "start": "217560",
    "end": "221610"
  },
  {
    "text": "storing the result back\ninto a specified destination",
    "start": "221610",
    "end": "224460"
  },
  {
    "text": "register (Rc).",
    "start": "224460",
    "end": "226690"
  },
  {
    "text": "There’s a 6-bit opcode field to\nspecify the operation and three",
    "start": "226690",
    "end": "230820"
  },
  {
    "text": "5-bit register fields to specify\nthe registers to use as source",
    "start": "230820",
    "end": "234530"
  },
  {
    "text": "and destination.",
    "start": "234530",
    "end": "236490"
  },
  {
    "text": "The second class of\nALU instructions,",
    "start": "236490",
    "end": "238540"
  },
  {
    "text": "which have 0b11 in the\ntop 2 bits of the opcode,",
    "start": "238540",
    "end": "241659"
  },
  {
    "text": "perform the same set of\noperations where the second",
    "start": "241660",
    "end": "244920"
  },
  {
    "text": "operand is a constant in\nthe range -32768 to +32767.",
    "start": "244920",
    "end": "249110"
  },
  {
    "text": "The operations include\narithmetic operations,",
    "start": "249110",
    "end": "254940"
  },
  {
    "text": "comparisons, boolean\noperations, and shifts.",
    "start": "254940",
    "end": "259260"
  },
  {
    "text": "In assembly language, we\nuse a “C” suffix added",
    "start": "259260",
    "end": "262010"
  },
  {
    "text": "to the mnemonics shown here\nto indicate that the second",
    "start": "262010",
    "end": "264720"
  },
  {
    "text": "operand is a constant.",
    "start": "264720",
    "end": "267720"
  },
  {
    "text": "This second instruction\nformat is also",
    "start": "267720",
    "end": "269910"
  },
  {
    "text": "used by the instructions\nthat access memory and change",
    "start": "269910",
    "end": "273090"
  },
  {
    "text": "the normally sequential\nexecution order.",
    "start": "273090",
    "end": "275990"
  },
  {
    "text": "The use of just two\ninstruction formats",
    "start": "275990",
    "end": "278009"
  },
  {
    "text": "will make it very easy\nto build the logic",
    "start": "278010",
    "end": "280100"
  },
  {
    "text": "responsible for translating\nthe encoded instructions",
    "start": "280100",
    "end": "283330"
  },
  {
    "text": "into the signals\nneeded to control",
    "start": "283330",
    "end": "285530"
  },
  {
    "text": "the operation of the datapath.",
    "start": "285530",
    "end": "287800"
  },
  {
    "text": "In fact, we’ll be able to use\nmany of the instruction bits",
    "start": "287800",
    "end": "291180"
  },
  {
    "text": "as-is!",
    "start": "291180",
    "end": "292820"
  },
  {
    "text": "We’ll build our\ndatapath incrementally,",
    "start": "292820",
    "end": "294830"
  },
  {
    "start": "293000",
    "end": "293000"
  },
  {
    "text": "starting with the logic\nneeded to perform the ALU",
    "start": "294830",
    "end": "297460"
  },
  {
    "text": "instructions, then add\nadditional logic to execute",
    "start": "297460",
    "end": "300610"
  },
  {
    "text": "the memory and\nbranch instructions.",
    "start": "300610",
    "end": "302990"
  },
  {
    "text": "Finally, we’ll need to add logic\nto handle what happens when",
    "start": "302990",
    "end": "306400"
  },
  {
    "text": "an exception occurs and\nexecution has to be suspended",
    "start": "306400",
    "end": "309740"
  },
  {
    "text": "because the current instruction\ncannot be executed correctly.",
    "start": "309740",
    "end": "314310"
  },
  {
    "text": "We’ll be using the digital logic\ngates we learned about in Part",
    "start": "314310",
    "end": "317220"
  },
  {
    "text": "1 of the course.",
    "start": "317220",
    "end": "318640"
  },
  {
    "text": "In particular, we’ll need\nmulti-bit registers to hold",
    "start": "318640",
    "end": "321300"
  },
  {
    "text": "state information from one\ninstruction to the next.",
    "start": "321300",
    "end": "325150"
  },
  {
    "text": "Recall that these\nmemory elements",
    "start": "325150",
    "end": "326880"
  },
  {
    "text": "load new values at the rising\nedge of the clock signal,",
    "start": "326880",
    "end": "329590"
  },
  {
    "text": "then store that value until\nthe next rising clock edge.",
    "start": "329590",
    "end": "333840"
  },
  {
    "text": "We’ll use a lot of multiplexers\nin our design to select between",
    "start": "333840",
    "end": "337100"
  },
  {
    "text": "alternative values\nin the datapath.",
    "start": "337100",
    "end": "340720"
  },
  {
    "text": "The actual computations\nwill be performed",
    "start": "340720",
    "end": "342810"
  },
  {
    "text": "by the arithmetic\nand logic unit (ALU)",
    "start": "342810",
    "end": "344570"
  },
  {
    "text": "that we designed at\nthe end of Part 1.",
    "start": "344570",
    "end": "347530"
  },
  {
    "text": "It has logic to perform the\narithmetic, comparison, boolean",
    "start": "347530",
    "end": "351250"
  },
  {
    "text": "and shift operations listed\non the previous slide.",
    "start": "351250",
    "end": "354640"
  },
  {
    "text": "It takes in two 32-bit operands\nand produces a 32-bit result.",
    "start": "354640",
    "end": "360240"
  },
  {
    "text": "And, finally, we’ll use several\ndifferent memory components",
    "start": "360240",
    "end": "363080"
  },
  {
    "text": "to implement register storage in\nthe datapath and also for main",
    "start": "363080",
    "end": "367039"
  },
  {
    "text": "memory, where instructions\nand data are stored.",
    "start": "367040",
    "end": "370570"
  },
  {
    "text": "You might find it useful\nto review the chapters",
    "start": "370570",
    "end": "372790"
  },
  {
    "text": "on combinational and sequential\nlogic in Part 1 of the course.",
    "start": "372790",
    "end": "376760"
  },
  {
    "text": "The Beta ISA specifies\nthirty-two 32-bit registers",
    "start": "376760",
    "end": "380460"
  },
  {
    "start": "377000",
    "end": "377000"
  },
  {
    "text": "as part of the datapath.",
    "start": "380460",
    "end": "382419"
  },
  {
    "text": "These are shown as the magenta\nrectangles in the diagram",
    "start": "382420",
    "end": "385280"
  },
  {
    "text": "below.",
    "start": "385280",
    "end": "386810"
  },
  {
    "text": "These are implemented as\nload-enabled registers, which",
    "start": "386810",
    "end": "389520"
  },
  {
    "text": "have an EN signal that\ncontrols when the register is",
    "start": "389520",
    "end": "392919"
  },
  {
    "text": "loaded with a new value.",
    "start": "392920",
    "end": "395030"
  },
  {
    "text": "If EN is 1, the register will\nbe loaded from the D input",
    "start": "395030",
    "end": "398440"
  },
  {
    "text": "at the next rising clock edge.",
    "start": "398440",
    "end": "401020"
  },
  {
    "text": "If EN is 0, the register is\nreloaded with its current value",
    "start": "401020",
    "end": "405009"
  },
  {
    "text": "and hence its\nvalue is unchanged.",
    "start": "405010",
    "end": "406880"
  },
  {
    "text": "It might seem easier to add\nenabling logic to the clock",
    "start": "406880",
    "end": "410870"
  },
  {
    "text": "signal, but this is\nalmost never a good idea",
    "start": "410870",
    "end": "413889"
  },
  {
    "text": "since any glitches in that logic\nmight generate false edges that",
    "start": "413890",
    "end": "417320"
  },
  {
    "text": "would cause the register to load\na new value at the wrong time.",
    "start": "417320",
    "end": "421400"
  },
  {
    "text": "Always remember the\nmantra: NO GATED CLOCKS!",
    "start": "421400",
    "end": "425400"
  },
  {
    "text": "There are multiplexers (shown\nunderneath the registers)",
    "start": "425400",
    "end": "427960"
  },
  {
    "text": "that let us select a value\nfrom any of the 32 registers.",
    "start": "427960",
    "end": "432139"
  },
  {
    "text": "Since we need two operands\nfor the datapath logic,",
    "start": "432140",
    "end": "434930"
  },
  {
    "text": "there are two such multiplexers.",
    "start": "434930",
    "end": "437520"
  },
  {
    "text": "Their select inputs\n(RA1 and RA2)",
    "start": "437520",
    "end": "440460"
  },
  {
    "text": "function as\naddresses, determining",
    "start": "440460",
    "end": "443280"
  },
  {
    "text": "which register values will\nbe selected as operands.",
    "start": "443280",
    "end": "447170"
  },
  {
    "text": "And, finally, there’s a decoder\nthat determines which of the 32",
    "start": "447170",
    "end": "450990"
  },
  {
    "text": "register load enables will be\n1 based on the 5-bit WA input.",
    "start": "450990",
    "end": "457199"
  },
  {
    "text": "For convenience, we’ll package\nall this functionality up",
    "start": "457200",
    "end": "459920"
  },
  {
    "text": "into a single component\ncalled a “register file”.",
    "start": "459920",
    "end": "463430"
  },
  {
    "text": "The register file\nhas two read ports,",
    "start": "463430",
    "end": "465729"
  },
  {
    "text": "which, given a\n5-bit address input,",
    "start": "465730",
    "end": "468190"
  },
  {
    "text": "deliver the selected register\nvalue on the read-data ports.",
    "start": "468190",
    "end": "473490"
  },
  {
    "text": "The two read ports\noperate independently.",
    "start": "473490",
    "end": "476417"
  },
  {
    "text": "They can read from\ndifferent registers",
    "start": "476417",
    "end": "478000"
  },
  {
    "text": "or, if the addresses\nare the same,",
    "start": "478000",
    "end": "480040"
  },
  {
    "text": "read from the same register.",
    "start": "480040",
    "end": "483340"
  },
  {
    "text": "The signals on the left\nof the register file",
    "start": "483340",
    "end": "485260"
  },
  {
    "text": "include a 5-bit value (WA)\nthat selects a register",
    "start": "485260",
    "end": "488300"
  },
  {
    "text": "to be written with the specified\n32-bit write data (WD).",
    "start": "488300",
    "end": "492990"
  },
  {
    "text": "If the write enable\nsignal (WE) is",
    "start": "492990",
    "end": "495190"
  },
  {
    "text": "1 at the rising edge of\nthe clock (CLK) signal,",
    "start": "495190",
    "end": "497360"
  },
  {
    "text": "the selected register will be\nloaded with the supplied write",
    "start": "497360",
    "end": "500400"
  },
  {
    "text": "data.",
    "start": "500400",
    "end": "502139"
  },
  {
    "text": "Note that in the BETA ISA,\nreading from register address",
    "start": "502140",
    "end": "505640"
  },
  {
    "text": "31 should always\nproduce a zero value.",
    "start": "505640",
    "end": "508360"
  },
  {
    "text": "The register file has internal\nlogic to ensure that happens.",
    "start": "508360",
    "end": "512390"
  },
  {
    "text": "Here’s a timing diagram\nthat shows the register file",
    "start": "512390",
    "end": "515049"
  },
  {
    "start": "513000",
    "end": "513000"
  },
  {
    "text": "in operation.",
    "start": "515049",
    "end": "516760"
  },
  {
    "text": "To read a value\nfrom the register",
    "start": "516760",
    "end": "518229"
  },
  {
    "text": "file, supply a stable\naddress input (RA)",
    "start": "518230",
    "end": "521360"
  },
  {
    "text": "on one of read ports.",
    "start": "521360",
    "end": "523428"
  },
  {
    "text": "After the register\nfile’s propagation delay,",
    "start": "523429",
    "end": "526050"
  },
  {
    "text": "the value of the selected\nregister will appear",
    "start": "526050",
    "end": "528589"
  },
  {
    "text": "on the corresponding\nread data port (RD).",
    "start": "528590",
    "end": "530760"
  },
  {
    "text": "[CLICK]",
    "start": "530760",
    "end": "531910"
  },
  {
    "text": "Not surprisingly,\nthe register file",
    "start": "531910",
    "end": "533790"
  },
  {
    "text": "write operation is\nvery similar to writing",
    "start": "533790",
    "end": "536000"
  },
  {
    "text": "an ordinary D-register.",
    "start": "536000",
    "end": "537980"
  },
  {
    "text": "The write address\n(WA), write data (WD)",
    "start": "537980",
    "end": "541740"
  },
  {
    "text": "and write enable (WE) signals\nmust all be valid and stable",
    "start": "541740",
    "end": "545750"
  },
  {
    "text": "for some specified setup\ntime before the rising",
    "start": "545750",
    "end": "548530"
  },
  {
    "text": "edge of the clock.",
    "start": "548530",
    "end": "550310"
  },
  {
    "text": "And must remain stable and valid\nfor the specified hold time",
    "start": "550310",
    "end": "554380"
  },
  {
    "text": "after the rising clock edge.",
    "start": "554380",
    "end": "557410"
  },
  {
    "text": "If those timing\nconstraints are met,",
    "start": "557410",
    "end": "559129"
  },
  {
    "text": "the register file will\nreliably update the value",
    "start": "559130",
    "end": "561990"
  },
  {
    "text": "of the selected register.",
    "start": "561990",
    "end": "564080"
  },
  {
    "text": "[CLICK]",
    "start": "564080",
    "end": "565120"
  },
  {
    "text": "When a register value is written\nat the rising clock edge,",
    "start": "565120",
    "end": "568710"
  },
  {
    "text": "if that value is selected\nby a read address,",
    "start": "568710",
    "end": "571200"
  },
  {
    "text": "the new data will appear\nafter the propagation delay",
    "start": "571200",
    "end": "574040"
  },
  {
    "text": "on the corresponding data port.",
    "start": "574040",
    "end": "576540"
  },
  {
    "text": "In other words,\nthe read data value",
    "start": "576540",
    "end": "578480"
  },
  {
    "text": "changes if either the read\naddress changes or the value",
    "start": "578480",
    "end": "582320"
  },
  {
    "text": "of the selected\nregister changes.",
    "start": "582320",
    "end": "586170"
  },
  {
    "text": "Can we read and write\nthe same register",
    "start": "586170",
    "end": "588250"
  },
  {
    "text": "in a single clock cycle?",
    "start": "588250",
    "end": "590480"
  },
  {
    "text": "Yes!",
    "start": "590480",
    "end": "591240"
  },
  {
    "text": "If the read address becomes\nvalid at the beginning",
    "start": "591240",
    "end": "593820"
  },
  {
    "text": "of the cycle, the old\nvalue of the register",
    "start": "593820",
    "end": "596490"
  },
  {
    "text": "will be appear on the data\nport for the rest of the cycle.",
    "start": "596490",
    "end": "600110"
  },
  {
    "text": "Then, the write occurs at the\n*end* of the cycle and the new",
    "start": "600110",
    "end": "604089"
  },
  {
    "text": "register value will be available\nin the next clock cycle.",
    "start": "604090",
    "end": "608120"
  },
  {
    "text": "Okay, that’s a brief run-though\nof the components we’ll be",
    "start": "608120",
    "end": "610740"
  },
  {
    "text": "using.",
    "start": "610740",
    "end": "611470"
  },
  {
    "text": "Let’s get started on the design!",
    "start": "611470",
    "end": "613970"
  }
]