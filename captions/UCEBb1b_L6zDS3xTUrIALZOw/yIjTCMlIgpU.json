[
  {
    "text": " PROFESSOR: OK,\nwelcome back to 6849.",
    "start": "0",
    "end": "6830"
  },
  {
    "text": "So last lecture,\nlecture three, we were talking about\nlocal foldability",
    "start": "6830",
    "end": "14200"
  },
  {
    "text": "and some complicated flat\nfolding, like a flapping bird",
    "start": "14200",
    "end": "19490"
  },
  {
    "text": "here. We were looking at a\nsingle vertex and locally",
    "start": "19490",
    "end": "25400"
  },
  {
    "text": "around that vertex\nwhat properties it would have to have. And we saw Kawasaki's theorem\nwhich characterized the angles.",
    "start": "25400",
    "end": "31854"
  },
  {
    "text": "And without a mountain\nvalley assignment Kawasaki was all you needed. The alternating sum\nof angles should be 0.",
    "start": "31854",
    "end": "38660"
  },
  {
    "text": "And given a mountain\nvalley pattern, locally we characterize things\nas a sequence, anything",
    "start": "38660",
    "end": "45310"
  },
  {
    "text": "you can do by a\nsequence of crimps. So sort of a similar\nversion to lecture",
    "start": "45310",
    "end": "50980"
  },
  {
    "text": "two, which was about\n1D flat foldability. There we needed\ncrimps and end folds. Here we needed just\ncrimps, which is easier.",
    "start": "50980",
    "end": "60690"
  },
  {
    "text": "So I'm going to\njump into questions. And in particular, this\nis an opportunity for me",
    "start": "60690",
    "end": "67280"
  },
  {
    "text": "to talk about the main\nthing that I skipped last class, class two,\nbecause it relates again",
    "start": "67280",
    "end": "74170"
  },
  {
    "text": "to this lecture, which is how\ndo we do this algorithmically? So it's one thing\nto say, oh, just do crimps and end folds\ntill you can't anymore,",
    "start": "74170",
    "end": "81280"
  },
  {
    "text": "and then when you run out of\nstuff to do, if you're done, you're done, otherwise\nit's not flat foldable. That's true.",
    "start": "81280",
    "end": "87052"
  },
  {
    "text": "But the obvious way to\nimplement that algorithm is to sweep over\nthe crease pattern, look for any crimps\nor end folds.",
    "start": "87052",
    "end": "92380"
  },
  {
    "text": "If you find one, do it, and\nthen repeat and keep sweeping. And that would take\nquadratic time, because in the worst\ncase every scan",
    "start": "92380",
    "end": "99390"
  },
  {
    "text": "you have to look through\nthe whole pattern and at the very end you\nfind what you need to do. So after about n\noperations-- n is",
    "start": "99390",
    "end": "105609"
  },
  {
    "text": "the number of creases\nin your pattern-- you find what you need to\ndo, you do the operation, and then you repeat. So n plus n plus n, n\ntimes, is n squared.",
    "start": "105610",
    "end": "115049"
  },
  {
    "text": "But you can do\nbetter and it's been alluded to in the lectures,\nbut it wasn't covered.",
    "start": "115050",
    "end": "121087"
  },
  {
    "text": "And so I wanted to cover\nit, because there's actually a really simple way to do it. There's one version\nin the textbook,",
    "start": "121087",
    "end": "126770"
  },
  {
    "text": "but there is a simpler way. So I want to talk about that.",
    "start": "126770",
    "end": "133370"
  },
  {
    "text": "This is a new way we\njust invented last week? This week? I forget. ",
    "start": "133370",
    "end": "141210"
  },
  {
    "text": "So I'm going to first talk\nabout it in the 1D scenario, but it's pretty much\nthe same for both.",
    "start": "141210",
    "end": "149920"
  },
  {
    "text": " 1D's a little bit easier\nto think about, though.",
    "start": "149920",
    "end": "155409"
  },
  {
    "start": "155410",
    "end": "170670"
  },
  {
    "text": "So 1D mountain valley\npattern something like this.",
    "start": "170670",
    "end": "178209"
  },
  {
    "start": "178210",
    "end": "187192"
  },
  {
    "text": "So I'm going to follow\nthe same approach, which is sweep left to right\nuntil I find either an end fold or a crimp that I can do.",
    "start": "187192",
    "end": "194150"
  },
  {
    "text": "So in this case, maybe this\nwould be the first thing that I find sweeping\nleft to right.",
    "start": "194150",
    "end": "199230"
  },
  {
    "text": "That's a crimpable pair--\nor crimpable segment, I'm going to call it-- is just\none that is locally smallest.",
    "start": "199230",
    "end": "205710"
  },
  {
    "text": "It's less than or equal to\nits two neighbors in length, and it has two different\nassignments, M/V or V/M.",
    "start": "205710",
    "end": "212714"
  },
  {
    "text": "So that's a crimpable\npair, because it's shorter than those two guys. So that's the basic\nalgorithm, but what",
    "start": "212714",
    "end": "218560"
  },
  {
    "text": "I do after that is going to\nbe a little bit different. So I want to search left to\nright for a segment that's",
    "start": "218560",
    "end": "236830"
  },
  {
    "text": "either crimpable\nor end foldable. ",
    "start": "236830",
    "end": "250140"
  },
  {
    "text": "And there's two situations. If I don't find any operations\nto do, then we stop.",
    "start": "250140",
    "end": "258170"
  },
  {
    "text": "And if there are\nany creases left we know that the\nresulting thing is not flat foldable from what\nwe proved in lecture two.",
    "start": "258170",
    "end": "264044"
  },
  {
    "text": "If there's no crimp or end\nfold, you're not flat foldable. ",
    "start": "264044",
    "end": "269259"
  },
  {
    "text": "But if you do find\nsomething, then do the fold.",
    "start": "269260",
    "end": "275390"
  },
  {
    "text": "This is so far pretty obvious. I'm going to draw the picture\nfor a crimp situation.",
    "start": "275390",
    "end": "281060"
  },
  {
    "text": "So in the crimp\nsituation-- these are the previous\nand next creases--",
    "start": "281060",
    "end": "286310"
  },
  {
    "text": "we have these\nlengths x, y, and z. We know that y is less than\nor equal to z and is less than or equal to x.",
    "start": "286310",
    "end": "292900"
  },
  {
    "text": "And after we do the\ncrimp, it looks like this.",
    "start": "292900",
    "end": "298470"
  },
  {
    "text": "So we have x, y, and\nz here, but we're then going to fuse\nthis material together,",
    "start": "298470",
    "end": "304160"
  },
  {
    "text": "because these creases\nare done with. We don't really care about them. The new length that we\nget is x minus y plus z.",
    "start": "304160",
    "end": "311320"
  },
  {
    "text": " OK. So that's what I\nmean by do the fold.",
    "start": "311320",
    "end": "316800"
  },
  {
    "text": "And we'll also call this\nsort of merging the segments,",
    "start": "316800",
    "end": "326358"
  },
  {
    "text": "meaning replace-- so normally\nwe have a sequence of lengths-- replace x, y, z with\nx minus y plus z,",
    "start": "326359",
    "end": "332040"
  },
  {
    "text": "remove these two creases\nwhich were, say, M and V. Now we want to continue.",
    "start": "332040",
    "end": "338340"
  },
  {
    "text": "And the realization\nis that we don't have to start over our\nsearch in searching left to right for\na crimpable thing.",
    "start": "338340",
    "end": "345330"
  },
  {
    "text": "If we went all the way\nthrough the pattern and then finally found\na crimp at the end, should we start way back here?",
    "start": "345330",
    "end": "352290"
  },
  {
    "text": "No. There's no point. You might as well start\nbasically where you just were. Not quite.",
    "start": "352290",
    "end": "358250"
  },
  {
    "text": "You have to go back one step. So the next step in this\nalgorithm is go back one step,",
    "start": "358250",
    "end": "371130"
  },
  {
    "text": "and then continue the search. Back means left. ",
    "start": "371130",
    "end": "380229"
  },
  {
    "text": "And the search is this line.",
    "start": "380230",
    "end": "385851"
  },
  {
    "text": "OK. So that's an algorithm,\na little loop there. So in this example we-- the\npoint of what's going on",
    "start": "385851",
    "end": "397870"
  },
  {
    "text": "and the reason this\nalgorithm is correct is we just modified\nthese three segments. And we replaced\nthese three segments",
    "start": "397870",
    "end": "403800"
  },
  {
    "text": "with a single segment which\nlooks something like that. ",
    "start": "403800",
    "end": "410879"
  },
  {
    "text": "And the rest, the parts to\nthe left and to the right are the same. I still claim we need\nto back up one segment",
    "start": "410880",
    "end": "417150"
  },
  {
    "text": "and look at this one again,\nbecause now potentially this one might be crimpable\nwhereas it wasn't before.",
    "start": "417150",
    "end": "423190"
  },
  {
    "text": "Because we changed\nthis length, it may have gotten\nlonger potentially. Or shorter.",
    "start": "423190",
    "end": "429370"
  },
  {
    "text": "It could have changed. So this pair may be crimpable\nwhereas it wasn't before. So just to make sure,\nwe'll go left one step,",
    "start": "429370",
    "end": "437265"
  },
  {
    "text": "and then we'll check, is\nthat segment crimpable? Is this one? Is this one? And just keep going.",
    "start": "437265",
    "end": "442700"
  },
  {
    "text": "And I'm guessing\nthis pattern is not is not flat foldable\nbecause of these two.",
    "start": "442700",
    "end": "448780"
  },
  {
    "text": "We could check. Did I miss one?",
    "start": "448780",
    "end": "454350"
  },
  {
    "text": "V, M, M. M is the little thing.",
    "start": "454350",
    "end": "460260"
  },
  {
    "text": "So I think this\nis going to crimp. And then this will\nget end folded. But still this is a problem\nbecause of the two M's.",
    "start": "460260",
    "end": "467580"
  },
  {
    "text": "So this will not flat fold. We'll be left with\nsomething like this, which is the two M's\nand then we say, oh.",
    "start": "467580",
    "end": "474820"
  },
  {
    "text": "We'll reach the stop case. Can't find a crimp\nor and end fold and there are\nstill creases left. And so we know that\nwe're not flat foldable.",
    "start": "474820",
    "end": "483480"
  },
  {
    "text": "But the reason I'm doing this\nfast resume of the search,",
    "start": "483480",
    "end": "489970"
  },
  {
    "text": "continuing the search\nfrom one step to the left, is because we get a\ngood running time. ",
    "start": "489970",
    "end": "499870"
  },
  {
    "text": "I'm going to use running\ntime notation of order n. This means some\nconstant times n.",
    "start": "499870",
    "end": "505131"
  },
  {
    "text": "We don't really care what the\nconstant is, but the growth is linear in the number\nof creases that's n.",
    "start": "505131",
    "end": "510930"
  },
  {
    "text": "And the reason it's\nlinear is that the number",
    "start": "510930",
    "end": "517979"
  },
  {
    "text": "of rightward steps\nthat we make is",
    "start": "517980",
    "end": "523320"
  },
  {
    "text": "going to be equal to n plus\nthe number of leftward steps. ",
    "start": "523320",
    "end": "531140"
  },
  {
    "text": "Why is that? Because overall the search\nis going left to right, and if it doesn't find\nanything it just takes n steps.",
    "start": "531140",
    "end": "536900"
  },
  {
    "text": "You look at all the creases\nor all the segments. It's basically n,\nn plus 1, whatever.",
    "start": "536900",
    "end": "542781"
  },
  {
    "text": "For each one, you check is\nit crimpable, end foldable. That takes constant time. You're just comparing\na couple of numbers.",
    "start": "542781",
    "end": "549130"
  },
  {
    "text": "So I'm counting the\nnumber of rightward steps. The trouble with the\nsearch is that every time I find a fold to do\nI go back one step",
    "start": "549130",
    "end": "556950"
  },
  {
    "text": "and so I'm kind\nof losing progress because I go backwards. There's actually two\nreasons why that's OK. One is you're also decreasing\nn at the same time,",
    "start": "556950",
    "end": "565269"
  },
  {
    "text": "because you're replacing\n3 things with 1 thing, so n goes down by 2. But also, in order to\nmake a rightward step",
    "start": "565270",
    "end": "576740"
  },
  {
    "text": "either it's in the\nfull search or it's because you went back one and\nyou have to go right again.",
    "start": "576740",
    "end": "582009"
  },
  {
    "text": "So this is true. And the point is the number\nof leftward steps is also",
    "start": "582010",
    "end": "587440"
  },
  {
    "text": "at most n, because\nevery time you do a leftward step\nyou did a fold,",
    "start": "587440",
    "end": "592670"
  },
  {
    "text": "and there's only\nn folds to make. So-- it's actually less,\nbecause crimps do two at a time.",
    "start": "592670",
    "end": "598360"
  },
  {
    "text": "But the point is\nthis is at most 2n. And so the number of rightward\nsteps we make is linear.",
    "start": "598360",
    "end": "604250"
  },
  {
    "text": "And so the overall\nrunning time is linear. For the algorithms people, this\nis a very simple amortization",
    "start": "604250",
    "end": "610371"
  },
  {
    "text": "argument. We're charging the\nleftward steps to the folds that we're doing. So that's an easy way to\ndo 1D flat foldability",
    "start": "610371",
    "end": "618399"
  },
  {
    "text": "testing for mountain\nvalley patterns. Yes? AUDIENCE: Why do you\nneed to go back a step?",
    "start": "618399",
    "end": "623560"
  },
  {
    "text": "So, the segment\nthat you labelled x, its new length is x plus\nthe quantity z minus y,",
    "start": "623560",
    "end": "630750"
  },
  {
    "text": "and z is greater than y. So it's x plus a\npositive number, right?",
    "start": "630750",
    "end": "636740"
  },
  {
    "text": "So it's only increasing\nin length, not decreasing.",
    "start": "636740",
    "end": "642110"
  },
  {
    "text": "PROFESSOR: Only increasing. But that's of interest, right? Because if you had something\nthat wasn't crimpable",
    "start": "642110",
    "end": "651910"
  },
  {
    "text": "because this was too short, and\nthen-- OK, here's an example.",
    "start": "651910",
    "end": "657779"
  },
  {
    "text": "Good question. I hadn't thoroughly checked. So we scan. This guy's not crimpable\nbecause this guy's too short.",
    "start": "657780",
    "end": "665250"
  },
  {
    "text": "Then we reach-- suppose\nthen we jump to this guy. I'll do valley mountain to make\nthis definitely not crimpable.",
    "start": "665250",
    "end": "672300"
  },
  {
    "text": "We look at this guy. We do the crimp. And now suddenly we have\nthis nice big length.",
    "start": "672300",
    "end": "678709"
  },
  {
    "text": "And so now this\npair is crimpable. Good. So that's why we need\nto go back a step.",
    "start": "678710",
    "end": "684346"
  },
  {
    "text": "After we crimp\nthis guy, this one becomes crimpable\nif it wasn't before. Yeah.",
    "start": "684346",
    "end": "690177"
  },
  {
    "text": "I could have easily believed\nthat this step wasn't necessary, but it\ndefinitely doesn't hurt and it is indeed necessary.",
    "start": "690177",
    "end": "696760"
  },
  {
    "text": "The key is that we don't have\nto back up more than one step, because we're only changing\nour neighbors, basically.",
    "start": "696760",
    "end": "703039"
  },
  {
    "text": "Other questions\nabout this algorithm?  OK, well once we have this for--\nthis is really for lecture two",
    "start": "703039",
    "end": "709959"
  },
  {
    "text": "material, we can adapt it to\nlecture three material, which is the circular case. Instead of having a line\nwe have a circle of paper.",
    "start": "709960",
    "end": "717540"
  },
  {
    "text": "In that case, we only\nneed to look for crimps, and so we do the same\nthing for crimps. ",
    "start": "717540",
    "end": "727990"
  },
  {
    "text": "I don't think I really need to\nwrite this down, but algorithm",
    "start": "727990",
    "end": "734980"
  },
  {
    "text": "for a single vertex\nmountain valley pattern. ",
    "start": "734980",
    "end": "743960"
  },
  {
    "text": "It's basically the\nsame algorithm. Instead of wherever\nyou see left and right",
    "start": "743960",
    "end": "749040"
  },
  {
    "text": "you replace it with clockwise\nand counterclockwise going around in a circle.",
    "start": "749040",
    "end": "754595"
  },
  {
    "text": "There's no obvious\nstarting point you just start at an arbitrary\nsegment, which in this case is an angle of the\ncrease pattern.",
    "start": "754595",
    "end": "761160"
  },
  {
    "text": "Maybe I should draw a\nlittle crease pattern, just for a picture.",
    "start": "761160",
    "end": "766265"
  },
  {
    "text": " So you start, let's\nsay, at this segment. You see is this pair crimpable.",
    "start": "766265",
    "end": "773010"
  },
  {
    "text": "If not continue,\nlet's say, clockwise. Keep going. If you ever find a crimpable\npair, like these two guys--",
    "start": "773010",
    "end": "780436"
  },
  {
    "text": "maybe this is\nmountain and valley and this is a locally\nsmallest angle-- you do the crimp, meaning\nyou replace this angle x y",
    "start": "780436",
    "end": "788360"
  },
  {
    "text": "and z with x minus y\nplus z, just as before.",
    "start": "788360",
    "end": "793610"
  },
  {
    "text": "And then you step\ncounterclockwise one step. And the point is\nthe invariant you're",
    "start": "793610",
    "end": "799040"
  },
  {
    "text": "maintaining at all times during\nthis algorithm, the interval of the segments from the very\nfirst segment you went to,",
    "start": "799040",
    "end": "806950"
  },
  {
    "text": "up to but not\nincluding the segment you're currently\nlooking at, those are all guaranteed not\ncrimpable at the moment.",
    "start": "806950",
    "end": "813160"
  },
  {
    "text": "And so when you do a crimp,\nthat may invalidate this one, and so you have to step\nbackwards because you're not sure whether that one's\ncrimpable anymore.",
    "start": "813160",
    "end": "819256"
  },
  {
    "text": "But you maintain that invariant. And so when if you ever get\nback to the original angle",
    "start": "819257",
    "end": "826195"
  },
  {
    "text": "that you were considering,\nthe original segment, then you know that in fact\neverything is not crimpable,",
    "start": "826195",
    "end": "832270"
  },
  {
    "text": "and then you're in trouble. Maybe. Except for this issue\nwhich I also forgot about",
    "start": "832270",
    "end": "837440"
  },
  {
    "text": "in lecture three-- I mean, I\ndidn't forget about this time, but I forgot about it then--\nwhich is in the base case.",
    "start": "837440",
    "end": "843370"
  },
  {
    "text": " You can never actually do\neverything by crimping,",
    "start": "843370",
    "end": "848899"
  },
  {
    "text": "because at the\nvery end your hope is that you have a cone\nwith two creases that",
    "start": "848900",
    "end": "854281"
  },
  {
    "text": "are both the same orientation.  That is your goal.",
    "start": "854281",
    "end": "859720"
  },
  {
    "text": "You know that there's two more\nmountains or two more valleys and crimps pair them up. So you hope that you end\nup with the situation.",
    "start": "859720",
    "end": "866900"
  },
  {
    "text": "If you do, and these\ntwo angles are equal, then you're flat foldable.",
    "start": "866900",
    "end": "872640"
  },
  {
    "text": "You have that one\nlast fold to make. Otherwise, if you have anything\nelse, you're not flat foldable.",
    "start": "872640",
    "end": "879140"
  },
  {
    "text": "That's what we proved\nin lecture three, is that crimps are enough to\nget down to this situation where you have only\ntwo creases left,",
    "start": "879140",
    "end": "884649"
  },
  {
    "text": "and that's what's foldable\nwhen you only have two creases. OK so this is becoming a cone\nas soon as you do operations.",
    "start": "884650",
    "end": "891750"
  },
  {
    "text": "It's just like the\nanalysis we did. But this algorithm\nwill run in linear time",
    "start": "891750",
    "end": "897256"
  },
  {
    "text": "for the same reason. The number of clockwise\nsteps equals at most n plus the number of\ncounterclockwise steps.",
    "start": "897257",
    "end": "904100"
  },
  {
    "text": "And so I guess I should\nmaybe write \"at most.\" And so this is\nlinear time as well.",
    "start": "904100",
    "end": "910678"
  },
  {
    "text": "Any questions about\nthose algorithms?  Yeah. AUDIENCE: For the\nsimple one, could you",
    "start": "910679",
    "end": "917070"
  },
  {
    "text": "run into some edge case\nwhere the very last crimp you considered makes the\nvery first one, which",
    "start": "917070",
    "end": "924324"
  },
  {
    "text": "wasn't crimpable,\ncrimpable and then you have to go around\nthe circle again? PROFESSOR: Ah.",
    "start": "924324",
    "end": "930170"
  },
  {
    "text": "OK. Good question.  Right. So we said, OK, this is\nguaranteed not crimpable,",
    "start": "930170",
    "end": "937779"
  },
  {
    "text": "but if you then crimp\nthe very last segment this one may become crimpable,\nand then that may propagate",
    "start": "937780",
    "end": "945570"
  },
  {
    "text": "and force you to go\naround a second time. AUDIENCE: So if that happens\nat each step, then at each step",
    "start": "945570",
    "end": "950630"
  },
  {
    "text": "you go all the way around,\nand it could become quadratic. PROFESSOR: Ooh, interesting. AUDIENCE: But I'm\nnot sure if it's possible for that to\nhappen every step.",
    "start": "950630",
    "end": "956734"
  },
  {
    "text": " PROFESSOR: Good. Well, this is the nature\nof new algorithms.",
    "start": "956734",
    "end": "962921"
  },
  {
    "text": "Yeah. AUDIENCE: The set of\npossibly crimpable things",
    "start": "962921",
    "end": "968180"
  },
  {
    "text": "increases by at most 1 every\ntime-- or at most 2 every time you make a crimp. PROFESSOR: Yeah.",
    "start": "968180",
    "end": "973680"
  },
  {
    "text": "So certainly you will only have\nto go around at most n times, but a quadratic bound\noverall is not very exciting.",
    "start": "973680",
    "end": "980520"
  },
  {
    "text": "AUDIENCE: So it stays linear. The interval in which things\nare possibly crimpable",
    "start": "980520",
    "end": "986940"
  },
  {
    "text": "expands by at most 2 every\ntime you make a crimp. PROFESSOR: I see. OK. So this is a different\nalgorithm, unfortunately.",
    "start": "986940",
    "end": "993390"
  },
  {
    "text": "But you maintain the\ninterval of things that are guaranteed\nnot crimpable and you can look at\nboth ends whether you",
    "start": "993390",
    "end": "1000007"
  },
  {
    "text": "can crimp something. If you can, fine, you do it. You shrink the\ninterval a little bit. So in general your interval\nis-- I have colored chalk,",
    "start": "1000007",
    "end": "1006475"
  },
  {
    "text": "I should use it-- your\ninterval is an interval. It starts somewhere,\nends somewhere.",
    "start": "1006475",
    "end": "1014649"
  },
  {
    "text": "And you're checking\nis this guy crimpable. If it's not crimpable\nyou can extend the interval a little bit. If it is crimpable\nyou do the fold",
    "start": "1014650",
    "end": "1021260"
  },
  {
    "text": "and you actually shrink\nthe interval a little bit. But every time you shrink\nthe interval, you did a fold,",
    "start": "1021260",
    "end": "1026524"
  },
  {
    "text": "and that only happens n times. Every time you grow the\ninterval, you grew the interval and you can only grow n times.",
    "start": "1026524",
    "end": "1032740"
  },
  {
    "text": "Good. So that will clean\nup this situation. If this ends up being\ncrimpable, you just shrink the interval\nfrom the other side.",
    "start": "1032740",
    "end": "1039599"
  },
  {
    "text": "So I guess if I\nwanted to just tweak this algorithm I would\nchange the notion of first.",
    "start": "1039599",
    "end": "1044849"
  },
  {
    "text": "So I said, oh, this guy is\nthe first one that I visited. But if I end up\ncrimping this guy,",
    "start": "1044849",
    "end": "1050340"
  },
  {
    "text": "I have to advance the first\nto be the very next interval. Good.",
    "start": "1050340",
    "end": "1055921"
  },
  {
    "text": "Thank you. ",
    "start": "1055921",
    "end": "1087048"
  },
  {
    "text": "All right. I'll correct that in\nthe notes as well. It was almost correct. Think now that\nshould be correct.",
    "start": "1087048",
    "end": "1092580"
  },
  {
    "text": "Thanks for checking. And now we can do\nit in linear time. There's a different\nalgorithm in the textbook,",
    "start": "1092580",
    "end": "1099507"
  },
  {
    "text": "which uses more data structures. This I like because\nit's very simple. It's just, like, storing\ntwo pointers and that's it.",
    "start": "1099507",
    "end": "1107020"
  },
  {
    "text": "Other questions? OK. That does algorithms. That was the new material\nI wanted to cover.",
    "start": "1107020",
    "end": "1116600"
  },
  {
    "text": "Then there is the other--\nthe actual algorithm that was briefly described in class\nis this local foldability",
    "start": "1116600",
    "end": "1123171"
  },
  {
    "text": "algorithm. So you have now not\njust a single vertex, but you have a whole\ncrease pattern. You'd like to assign a mountain\nvalley assignment to it that",
    "start": "1123171",
    "end": "1132385"
  },
  {
    "text": "is at least locally\ngood, that when you run this algorithm\nat each vertex it gives the right answer, it\nsays that, yeah, it's",
    "start": "1132385",
    "end": "1139940"
  },
  {
    "text": "locally foldable\nfor each vertex. It doesn't mean the whole\nthing will fold flat, but it's a start, at least.",
    "start": "1139940",
    "end": "1146690"
  },
  {
    "text": "It's a necessary\ncondition for that. So I just want to give\nyou a few examples",
    "start": "1146690",
    "end": "1151879"
  },
  {
    "text": "of this algorithm,\nbecause it is confusing. I didn't do any\nexamples in lecture. It's always been the most\nconfusing part to me,",
    "start": "1151879",
    "end": "1157889"
  },
  {
    "text": "and especially this notion\nof merging cycles and paths.",
    "start": "1157890",
    "end": "1164127"
  },
  {
    "text": "So for starters, these are\nthe examples in the textbook. They're pretty simple, but at\nleast they'll get us warmed up.",
    "start": "1164127",
    "end": "1170210"
  },
  {
    "text": "So the crease pattern\nis the bold black lines. It's two of them. And in this case it's\nthe generic case,",
    "start": "1170210",
    "end": "1177520"
  },
  {
    "text": "so there's a unique\npairing here. There's only one crimpable\npair, which are these two guys.",
    "start": "1177520",
    "end": "1183240"
  },
  {
    "text": "This is the only\nlocally smallest angle. So those two have\nto be crimped first. One's going to be a mountain,\none's going to be a valley.",
    "start": "1183240",
    "end": "1189940"
  },
  {
    "text": "So we would write not\nequals in this blue thing to represent that constraint. This will be all that's left.",
    "start": "1189940",
    "end": "1195240"
  },
  {
    "text": "And so these two guys\nhave to be equal. It's symmetric, so it looks\nthe same all the way around.",
    "start": "1195240",
    "end": "1200410"
  },
  {
    "text": "And so when you see, OK, these\ntwo guys have to be not equal, but also these two guys\nhave to be not equal,",
    "start": "1200410",
    "end": "1205720"
  },
  {
    "text": "but also these two guys\nhave to be not equal, this is what we call a\ncycle of constraints. In general, you get paths.",
    "start": "1205720",
    "end": "1211860"
  },
  {
    "text": "Like, this one starts\nand ends at infinity, so these two guys\nhave to be equal, these two guys have to be equal. They could both be mountain,\nboth be valley, doesn't matter.",
    "start": "1211860",
    "end": "1219420"
  },
  {
    "text": "These are the only constraints. But this cycle--\ncycles can be problems, and here because it's\nan odd cycle of not",
    "start": "1219420",
    "end": "1225309"
  },
  {
    "text": "equals there's no\nway to assign it. If you say mountain,\nvalley, mountain, then these two guys\nare both mountains,",
    "start": "1225310",
    "end": "1231290"
  },
  {
    "text": "which violates that constraint. In general, the\nnumber of not equals",
    "start": "1231290",
    "end": "1236620"
  },
  {
    "text": "should be even in each cycle. If it's ever an odd number of\nnot equals, you're in trouble.",
    "start": "1236620",
    "end": "1243010"
  },
  {
    "text": "Here's an example where\nthe cycle is even, but we end up with\nan equals here,",
    "start": "1243010",
    "end": "1248730"
  },
  {
    "text": "and so the number of\nnot equals is still odd, so this is also bad. I mean, it's just replacing this\nsegment with two equal creases.",
    "start": "1248730",
    "end": "1257480"
  },
  {
    "text": "Still can't assign a\nmountain or valley. But these are kind\nof simple examples.",
    "start": "1257480",
    "end": "1263310"
  },
  {
    "text": "These are cycles and everything\nwas uniquely determined here. You had to crimp this guy first. You had to crimp this guy first.",
    "start": "1263310",
    "end": "1269899"
  },
  {
    "text": "There was no choice. And the tricky part\nof the algorithm is when you have choice, when\nyou have multiple equal angles,",
    "start": "1269900",
    "end": "1275870"
  },
  {
    "text": "you don't know what\nto crimp first. The algorithm just\ncrimps one of them first, but then it might\nhave to fix things.",
    "start": "1275870",
    "end": "1281380"
  },
  {
    "text": "So I came up with\na simple example where you have to do that. I think it will help clarify\nhow this merging really happens.",
    "start": "1281380",
    "end": "1289649"
  },
  {
    "text": "So the example is-- it's hard\nto draw an equilateral triangle",
    "start": "1289650",
    "end": "1300470"
  },
  {
    "text": "with accurate angles,\nbut I'll do my best-- and then these are supposed\nto be right angles.",
    "start": "1300470",
    "end": "1306550"
  },
  {
    "start": "1306550",
    "end": "1313150"
  },
  {
    "text": "OK. So that's my crease pattern.  And some of this is forced.",
    "start": "1313150",
    "end": "1318835"
  },
  {
    "text": " This guy-- at this vertex, this\nis the only locally smallest",
    "start": "1318835",
    "end": "1325690"
  },
  {
    "text": "angle. It's only 60 degrees,\nthese are 90. This is bigger than 90. So this has to be crimped\nfirst, and it's not equal.",
    "start": "1325690",
    "end": "1332606"
  },
  {
    "text": "That means these guys are equal. We don't really\ncare about those. And it's symmetric,\nso not equal, equal.",
    "start": "1332607",
    "end": "1340009"
  },
  {
    "text": "OK. But here we have a choice. There's two 60 degree angles. This does not look\nvery flat foldable.",
    "start": "1340010",
    "end": "1345415"
  },
  {
    "text": "I think I'd better add\nsome more creases there.",
    "start": "1345415",
    "end": "1351180"
  },
  {
    "text": "Got to have to even\nparity at every vertex. So now we have a choice. Do we crimp this one first or\ndo we crimp the other one first?",
    "start": "1351180",
    "end": "1358630"
  },
  {
    "text": "At this point, it's symmetric,\nso I'll do this one first. This'll be my pairing.",
    "start": "1358630",
    "end": "1364278"
  },
  {
    "text": "And there are two\npossibilities here. Either I crimp this one first\nor crimp this one first. The algorithm doesn't care. So let's suppose it does\nthis one, because this",
    "start": "1364279",
    "end": "1370748"
  },
  {
    "text": "is the bad one. OK. Now we have a cycle with\nan odd number not equals.",
    "start": "1370748",
    "end": "1377390"
  },
  {
    "text": "So this is not\npossible to satisfy. The algorithm\ndoesn't stop there. It says, OK, I have these paths.",
    "start": "1377390",
    "end": "1385710"
  },
  {
    "text": "There's a cycle here\nthat's a problem, then I also have a path up here.",
    "start": "1385710",
    "end": "1393325"
  },
  {
    "text": "How does it go? There's a path that goes\nhere, here, here, here.",
    "start": "1393325",
    "end": "1400659"
  },
  {
    "text": "And there's a path\nthat goes here. But really it looks at the\nvertices that had choice.",
    "start": "1400660",
    "end": "1406350"
  },
  {
    "text": "It says, look, at\nthis moment I had a choice between whether to\nfold this angle or this angle.",
    "start": "1406350",
    "end": "1412210"
  },
  {
    "text": "In general, it might have\nbeen a bunch of equal angles. We see here that there's a cycle\nthat the other choice would've",
    "start": "1412210",
    "end": "1420289"
  },
  {
    "text": "involved a path. And so we merge. In general, if there's\ntwo different things--",
    "start": "1420290",
    "end": "1428050"
  },
  {
    "text": "one could be a cycle,\none could be a path, they could both be cycles,\nthey could both be paths, whatever-- if I ever\nhave the opportunity",
    "start": "1428050",
    "end": "1434460"
  },
  {
    "text": "to join those two parts\ntogether I'll do it. So in other words, I do\nthe other crease first.",
    "start": "1434460",
    "end": "1441362"
  },
  {
    "text": "Let me draw that. ",
    "start": "1441362",
    "end": "1446929"
  },
  {
    "text": "What that means will become\nclear once we actually do one.",
    "start": "1446930",
    "end": "1452820"
  },
  {
    "text": "So I want to do this first. The rest is the same. ",
    "start": "1452820",
    "end": "1470009"
  },
  {
    "text": "OK. So in that situation, what do\nmy paths and cycle look like? Well, there was this path\nthat started over here.",
    "start": "1470010",
    "end": "1477380"
  },
  {
    "text": "It used to go like this, but\nnow this vertex has changed. So it's going to do something\ndifferent at that vertex.",
    "start": "1477380",
    "end": "1484480"
  },
  {
    "text": "Now it goes over this way. I'm just following\nthe constraints. Now those two guys are\nconstrained to be different.",
    "start": "1484480",
    "end": "1492217"
  },
  {
    "text": "And these are\nconstrained to be equal. So lo and behold we merged\na path and the cycle and we got a single path.",
    "start": "1492217",
    "end": "1497520"
  },
  {
    "text": "The other paths remain the same. Just these two guys\ngot interchanged. What we're doing is basically\nturning here and turning here",
    "start": "1497520",
    "end": "1505050"
  },
  {
    "text": "instead of going that\nway and going that way. And whenever you have two pieces\nlike this, and one of which",
    "start": "1505050",
    "end": "1510760"
  },
  {
    "text": "is a cycle, you will do a merge. Merging can only help\nus, because they'll get bigger and\nbigger and bigger.",
    "start": "1510760",
    "end": "1516496"
  },
  {
    "text": "The bigger these\nsets of constraints are, essentially,\nthe better chance that you'll get\nthe parity right.",
    "start": "1516496",
    "end": "1522370"
  },
  {
    "text": "I can never-- and this\nis argued in the notes, but few-- it never hurts to\nmerge something, is the point.",
    "start": "1522370",
    "end": "1531650"
  },
  {
    "text": "And if you're lucky-- if you,\nsay, merge two odd cycles-- they will become even. If you merge with a path,\nyou'll become a path.",
    "start": "1531650",
    "end": "1539320"
  },
  {
    "text": "And so you're golden. Paths are always good. And so this thing becomes\nflat foldable, or at least",
    "start": "1539320",
    "end": "1546790"
  },
  {
    "text": "locally flat foldable. And we can mark in a\ncrease pattern, I guess.",
    "start": "1546790",
    "end": "1552840"
  },
  {
    "text": "You could make this-- that's\ngoing to be hard to see, I think-- mountain, valley,\nmountain, valley, mountain--",
    "start": "1552840",
    "end": "1563139"
  },
  {
    "text": "oh, sorry-- equals, not equals,\nthis is not equals, not equals,",
    "start": "1563140",
    "end": "1574260"
  },
  {
    "text": "not equals, equals. These guys are free.",
    "start": "1574260",
    "end": "1579619"
  },
  {
    "text": "So you can make one\nof them mountain, one of--- you can make them\nall mountains, I guess. Or not.",
    "start": "1579619",
    "end": "1585549"
  },
  {
    "text": "OK. This is a locally\nvalid flat folding. And it's hard to tell\nwhether it actually works",
    "start": "1585550",
    "end": "1592240"
  },
  {
    "text": "except by folding it. So here I made one. That's the top side, I think.",
    "start": "1592240",
    "end": "1599540"
  },
  {
    "text": "Ideally I got the same\ncrease pattern as here. The reds are mountains. Looks the same.",
    "start": "1599540",
    "end": "1606250"
  },
  {
    "text": "And then-- It's clear that this pattern\nis flat foldable, right? You just simple fold\nhere, and then you've",
    "start": "1606250",
    "end": "1611540"
  },
  {
    "text": "got a single vertex and that\nsingle vertex is flat foldable. But this does not do that. It does a kind of twist.",
    "start": "1611540",
    "end": "1617905"
  },
  {
    "text": "It's kind of a fun mountain\nvalley assignment for it. So in this case it works.",
    "start": "1617905",
    "end": "1624860"
  },
  {
    "text": "In general, you might get\nsome weird mountain valley assignment that doesn't work. But something simple\nlike this pattern,",
    "start": "1624860",
    "end": "1631220"
  },
  {
    "text": "which has four\nvertices, always will. Any more questions\nabout local foldability?",
    "start": "1631220",
    "end": "1637440"
  },
  {
    "text": "That gives you at least an idea\nof what the merges look like. It's hard to draw a huge\nexample, but-- Yeah.",
    "start": "1637440",
    "end": "1642608"
  },
  {
    "text": "AUDIENCE: So the\ngeneric case, you don't really have\na choice at any-- PROFESSOR: In the generic\ncase you have no choices,",
    "start": "1642608",
    "end": "1647675"
  },
  {
    "text": "and so you've got to-- you\njust check, does it work. And if it-- AUDIENCE: If you have\nan odd number of faces,",
    "start": "1647675",
    "end": "1656112"
  },
  {
    "text": "odd number of sides, then\nit's not going to work? PROFESSOR: If you have a face\nwith an odd number of sides, that might be fine. It depends on these\nassignments, whether they're",
    "start": "1656112",
    "end": "1663100"
  },
  {
    "text": "not equal or equals. Like if this were an equal\nsign, then you'd be happy.",
    "start": "1663100",
    "end": "1670862"
  },
  {
    "text": "And that would\nhappen, for example, if you move these\ncreases to be very small. I'd have to also make this\none proportionally big, which",
    "start": "1670862",
    "end": "1678940"
  },
  {
    "text": "is possible if I move\nthis vertex way over here. I'll have a triangle. This will have a big angle.",
    "start": "1678940",
    "end": "1684310"
  },
  {
    "text": "Then I can have a\nsmall angle here and these two guys\nwill be made not equal and these two will\nbe made equal,",
    "start": "1684310",
    "end": "1689875"
  },
  {
    "text": "and then the parity's fine. So if you have a cycle with\nan odd number of not equals,",
    "start": "1689875",
    "end": "1697380"
  },
  {
    "text": "then you're screwed. In the generic case\nthere's nothing you can do. When you have equal angles,\nwhen you had a choice,",
    "start": "1697380",
    "end": "1703570"
  },
  {
    "text": "you go back and check whether\nthe choices would do merges. If you do, you do them. Overall, this turns out\nto take a linear time",
    "start": "1703570",
    "end": "1709760"
  },
  {
    "text": "if you're careful, because you\ncan only merge so many times. You have at most n parts and\neach merge-- with some care.",
    "start": "1709760",
    "end": "1720650"
  },
  {
    "text": "You need fancy data structures\nto get this to work. You need find stuff,\nbut then you'll get linear time over all.",
    "start": "1720650",
    "end": "1727230"
  },
  {
    "text": "Other questions? AUDIENCE: So what's the\ndefinition of merging, again? PROFESSOR: So the\ndefinition of merging",
    "start": "1727230",
    "end": "1733750"
  },
  {
    "text": "is you look at every time\nyou had a choice in running this algorithm-- which you have\nto not just run this algorithm",
    "start": "1733750",
    "end": "1741630"
  },
  {
    "text": "but you have to maintain all\nthe choices that you had made. So whenever you had two\nequal angles-- in general,",
    "start": "1741630",
    "end": "1747350"
  },
  {
    "text": "the algorithm is you look at\na sequence of equal angles. The algorithm maybe\nchooses the first one,",
    "start": "1747350",
    "end": "1752810"
  },
  {
    "text": "but you could have chosen any. You see for each of the\nother possibilities, would that end up combining\ntwo of the components.",
    "start": "1752810",
    "end": "1761200"
  },
  {
    "text": "So the constraints sort of join\ntogether either into cycles",
    "start": "1761200",
    "end": "1766299"
  },
  {
    "text": "or into paths, like this guy. And we just check, if\nI do this other change,",
    "start": "1766300",
    "end": "1771480"
  },
  {
    "text": "does it end up combining\ntwo of those components? Before I had 1, 2,\n3, 4 components.",
    "start": "1771480",
    "end": "1778500"
  },
  {
    "text": "Now I only have 3 components. So just see what happens. If that decreases the number\nof components I do it.",
    "start": "1778500",
    "end": "1784919"
  },
  {
    "text": "And you can guarantee\nthis never hurts you. Keep merging components\nuntil you can't anymore.",
    "start": "1784920",
    "end": "1790520"
  },
  {
    "text": "And then either it\nworks and you've got no parity problems or no\ncycles, or it doesn't work.",
    "start": "1790520",
    "end": "1795980"
  },
  {
    "text": "If it doesn't work, there is\nno local foldable assignment. Yeah. AUDIENCE: When you\nsay it's linear,",
    "start": "1795980",
    "end": "1801180"
  },
  {
    "text": "are you counting\nvertices or edges? PROFESSOR: Let's say number\nof vertices plus edges. That's the safe way to define\nn and then linear in that.",
    "start": "1801180",
    "end": "1810520"
  },
  {
    "text": "Or if you count\nthe endpoints here it doesn't matter whether you\njust count vertices or edges.",
    "start": "1810520",
    "end": "1816410"
  },
  {
    "text": "The sum of the two\nis always safe. So n usually just means\nthe size of the input,",
    "start": "1816410",
    "end": "1822297"
  },
  {
    "text": "and those vertices and edges,\nso why not just count them both. ",
    "start": "1822297",
    "end": "1827440"
  },
  {
    "text": "Other questions? Cool. So that's local foldability.",
    "start": "1827440",
    "end": "1834750"
  },
  {
    "text": "I just have a few\nmore little things and then you can\nask more questions.",
    "start": "1834750",
    "end": "1840331"
  },
  {
    "text": "Oh, sorry. I have one more example. I forgot. This is an example where\neverything works fine. You don't get any cycles.",
    "start": "1840331",
    "end": "1846170"
  },
  {
    "text": "But it's kind of a fun example. The crane. I'd never analyzed it\nbefore, so I spent the time",
    "start": "1846170",
    "end": "1852220"
  },
  {
    "text": "to draw one of these pictures. So first I just put a\nbunch of circles down, and I look for things that\nare forced, just because that",
    "start": "1852220",
    "end": "1860640"
  },
  {
    "text": "is more interesting. I tried to make it\nas bad as possible. It turns out I couldn't\nmake it that bad. But this guy's\nforced, because it's",
    "start": "1860640",
    "end": "1866630"
  },
  {
    "text": "the only locally smallest angle. And then it's\nsymmetrical around. So this guy's forced.",
    "start": "1866630",
    "end": "1874770"
  },
  {
    "text": "Four of them should be forced. If I advance, yeah. This one, this one.",
    "start": "1874770",
    "end": "1880150"
  },
  {
    "text": "Those are all forced\nto be not equal. The rest are equal. The other guys have ambiguity. And I tried.",
    "start": "1880150",
    "end": "1885869"
  },
  {
    "text": "I thought this would be a\ngreat place to find the cycle and then we could resolve\nthe cycle, because I know this should work in the end,\nbut I couldn't make a cycle.",
    "start": "1885869",
    "end": "1894370"
  },
  {
    "text": "It's not possible, because\nthere's sort of this cut point here. And you once you go to\none side of the pattern,",
    "start": "1894370",
    "end": "1902000"
  },
  {
    "text": "you can't come back\nto the other side. I could make a really\nlong path though. So I chose-- there's\na lot of choices here,",
    "start": "1902000",
    "end": "1908012"
  },
  {
    "text": "but the algorithm\njust chooses one. I tried to make the\nlongest path I could. It's kind of a fun puzzle.",
    "start": "1908012",
    "end": "1913690"
  },
  {
    "text": "Not that hard to solve. It gets a little hard\nto draw these pairings. Here these two guys are\npaired together as not equal.",
    "start": "1913690",
    "end": "1919260"
  },
  {
    "text": "We crimp that first. Then let's say we\ncrimp these two. Then we've got two\nangles here, each",
    "start": "1919260",
    "end": "1924570"
  },
  {
    "text": "of which I think is 90 degrees\nafter you do the crimps. And so these two guys\nhave to be equal.",
    "start": "1924570",
    "end": "1930820"
  },
  {
    "text": "That's what this notation means. So here there were, I think\nfour different possibilities.",
    "start": "1930820",
    "end": "1936500"
  },
  {
    "text": "And if you trace all the\npaths, you get these guys. So there's some simple paths\nout here, but then there's",
    "start": "1936500",
    "end": "1944530"
  },
  {
    "text": "this purple path in the\nmiddle, which starts here, goes up here, over here,\nover here, along this crease,",
    "start": "1944530",
    "end": "1951540"
  },
  {
    "text": "over here, here, here, here, up\nthere, here, here, there, back,",
    "start": "1951540",
    "end": "1960730"
  },
  {
    "text": "forth, and then it\nescapes in the corner. So you get a mountain valley\nassignment out of this.",
    "start": "1960730",
    "end": "1966010"
  },
  {
    "text": "I didn't test whether\nit was possible. Probably not. Anyway, you get something,\nand it might be possible.",
    "start": "1966010",
    "end": "1973640"
  },
  {
    "text": "Exercise for you to try at home. All right. That took some time to draw.",
    "start": "1973640",
    "end": "1979870"
  },
  {
    "text": " Cool. That's local foldability.",
    "start": "1979870",
    "end": "1986980"
  },
  {
    "text": "Now with the\nKawasaki condition, I mentioned briefly\nin lecture three that-- We were talking\nabout convex cones, where",
    "start": "1986980",
    "end": "1993350"
  },
  {
    "text": "the amount of material is\nless than or equal to 360. Someone pointed out and\nsaid, oh, out of paper you can't make\nsomething more than 360.",
    "start": "1993350",
    "end": "1999700"
  },
  {
    "text": "And it's true if you start\nfrom one sheet of paper. But if you start with\nmultiple sheets of material and join them together, like\nsew them up, like in a T-shirt,",
    "start": "1999700",
    "end": "2009050"
  },
  {
    "text": "you can get non-convex\ncones, meaning more than 360 degrees\nof material here. This is, let's say,\n270, let's call it?",
    "start": "2009050",
    "end": "2015799"
  },
  {
    "text": "So you double that,\nbecause there's a front side and the\nback side of the T-shirt. Easier to see in a 3D one.",
    "start": "2015800",
    "end": "2021980"
  },
  {
    "text": "You've got more than 360 degrees\nof material in the armpits.",
    "start": "2021980",
    "end": "2027540"
  },
  {
    "text": "So, yes, it's true. And what happens, as I mentioned\nbriefly, is there's a new case.",
    "start": "2027540",
    "end": "2036610"
  },
  {
    "text": "There's sort of\ntwo situations when you have a kind of a mess\nof material like this,",
    "start": "2036610",
    "end": "2042700"
  },
  {
    "text": "more than 360\ndegrees of material. There are two possibilities. Either you end up folding it to\nlie in less than a full circle,",
    "start": "2042700",
    "end": "2049399"
  },
  {
    "text": "in terms of the boundary,\nand then it's just like here. The alternating sum\nshould be equal to 0.",
    "start": "2049400",
    "end": "2054658"
  },
  {
    "text": "Or you end up folding it\nso that it encompasses an entire circle,\nand then you end up",
    "start": "2054659",
    "end": "2060010"
  },
  {
    "text": "with this alternating sum of\nangles being plus or minus 360. And it's in the textbook.",
    "start": "2060010",
    "end": "2065239"
  },
  {
    "text": "It's not so easy to prove\nthat that's all that happens, but you-- Basically, you\ncan't twist multiple times,",
    "start": "2065239",
    "end": "2070780"
  },
  {
    "text": "because then you'd end\nup with a crossing. So it's not that much\nharder to analyze these kinds of situations.",
    "start": "2070780",
    "end": "2076839"
  },
  {
    "text": "You can do it. But this is a\ngreat excuse for me to show cool ways\nto fold T-shirts.",
    "start": "2076840",
    "end": "2083030"
  },
  {
    "text": "How many people seen this video? most. It's like six years old. Have you ever tried it?",
    "start": "2083030",
    "end": "2088912"
  },
  {
    "text": "[LAUGHTER] I brought an extra\nlittle T-shirt here.",
    "start": "2088912",
    "end": "2094129"
  },
  {
    "text": "This is totally for fun. You pinch here and here. Bring this side over here.",
    "start": "2094130",
    "end": "2100190"
  },
  {
    "text": "You pinch. You do a nice\nflourish, and then you get your perfectly\nfolded-- I didn't",
    "start": "2100190",
    "end": "2105530"
  },
  {
    "text": "do it perfectly--\nT-shirt in one motion. As they say, in two seconds,\nand it works for us.",
    "start": "2105530",
    "end": "2114140"
  },
  {
    "text": "So it's a great T-shirts. And for fun, here's the--\nthis is like the high tech way",
    "start": "2114140",
    "end": "2121319"
  },
  {
    "text": "to do it. There's actually a whole bunch\nof T-shirt folding machines.",
    "start": "2121320",
    "end": "2127250"
  },
  {
    "text": "You push the button. It's a bunch of simple\nfolds, actually. So it's a nice little\nsimple folding machine.",
    "start": "2127250",
    "end": "2132698"
  },
  {
    "text": "[LAUGHTER] It's kind of fun to watch. Seems like a lot of set up time.",
    "start": "2132698",
    "end": "2139280"
  },
  {
    "text": "You have set up time with\nthe fast method also. So It's kind of fun.",
    "start": "2139280",
    "end": "2145430"
  },
  {
    "text": "The same machine. you can also\nwrap them directly into bags. Question? AUDIENCE: Have you\nin clothing stores",
    "start": "2145430",
    "end": "2151600"
  },
  {
    "text": "they have non-mechanical\nversions of those that are just plastic boards. PROFESSOR: And you just-- AUDIENCE: That you can flop over\nso that all your T-shirts are",
    "start": "2151600",
    "end": "2158422"
  },
  {
    "text": "folded the same. PROFESSOR: It's not automated. Yes. You can actually buy-- I've\nonly seen them in stores rarely.",
    "start": "2158422",
    "end": "2164309"
  },
  {
    "text": "They're usually\nin the back room. But you can actually buy\nthis folding machine. It's like a giant piece of\nplastic with exactly-- maybe",
    "start": "2164310",
    "end": "2171840"
  },
  {
    "text": "only three creases,\nI think typically. And then you just do them\nin some order manually with simple folds,\nand it does make",
    "start": "2171840",
    "end": "2177840"
  },
  {
    "text": "really nicely folded T-shirts. Nicer than I could\nfold by hand, anyway.",
    "start": "2177840",
    "end": "2182850"
  },
  {
    "text": "All right. That was just for fun. While we're on the\ntopic of T-shirts. ",
    "start": "2182850",
    "end": "2189339"
  },
  {
    "text": "Next question is about\nhigher dimensions. So I mentioned\nbriefly, yeah, you can do higher\ndimensional origami.",
    "start": "2189340",
    "end": "2194640"
  },
  {
    "text": "Not much is known about it. So a natural thing to ask\nabout is flat foldability for higher dimensions.",
    "start": "2194640",
    "end": "2200130"
  },
  {
    "text": "And there are exactly\ntwo papers about this. Well, maybe even just one.",
    "start": "2200130",
    "end": "2207350"
  },
  {
    "text": "The old one is this paper\nby Kawasaki-- same guy as Kawasaki's condition--\nand this is in this book.",
    "start": "2207350",
    "end": "2214640"
  },
  {
    "text": "This the first--\nthis is a hard book to get a copy of,\nFirst International Meeting of Origami\nScience and Technology.",
    "start": "2214640",
    "end": "2219660"
  },
  {
    "text": "These days it's called\nOrigami Science, Math, and Education, OSME. And this T-shirt is from\nthe latest one, which",
    "start": "2219660",
    "end": "2224900"
  },
  {
    "text": "was in Singapore two\nyears ago, I think, 2010.",
    "start": "2224900",
    "end": "2230329"
  },
  {
    "text": "Next one is in a\nyear or two in Japan. So this is the very first one. This is before my time.",
    "start": "2230330",
    "end": "2235530"
  },
  {
    "text": "And there's this paper. It's a translated Japanese\npaper, so it has a few typos. We also have the\nJapanese original",
    "start": "2235530",
    "end": "2241845"
  },
  {
    "text": "if you're interested in\nreading this some time. You see, for example,\nhere is folding a regular piece\nof paper in half.",
    "start": "2241845",
    "end": "2247170"
  },
  {
    "text": "Here's folding a 3D\nsolid of paper in half. A little harder to\nimagine, but there it is.",
    "start": "2247170",
    "end": "2252790"
  },
  {
    "text": "And let's see,\nwhat's in this paper? There's a definition,\nalthough I would really",
    "start": "2252790",
    "end": "2257910"
  },
  {
    "text": "call it a necessary condition. I think this is not\na good definition of flat origami in 3D. But there it is.",
    "start": "2257910",
    "end": "2263470"
  },
  {
    "text": "This is the definition. What it says is basically,\nlocally everything works out.",
    "start": "2263470",
    "end": "2270020"
  },
  {
    "text": "When you do a fold,\nit's like a reflection. If you do it\ninstantaneously, this is like reflecting this\npiece through the line",
    "start": "2270020",
    "end": "2276339"
  },
  {
    "text": "for flat folding. This is like reflecting this\npiece through the plane. And so one condition you\nhave is that if you-- it's",
    "start": "2276340",
    "end": "2284250"
  },
  {
    "text": "easier to look at one of\nthe examples in the paper. So you have this\ncrease pattern, which you can draw by a bunch\nof planes, let's say.",
    "start": "2284250",
    "end": "2291790"
  },
  {
    "text": "If you kind of walk\naround and say, OK, I go through this\ncrease, which means I reflect through\nthat plane, then I reflect through this plane,\nthis plane, this plane,",
    "start": "2291790",
    "end": "2298908"
  },
  {
    "text": "you can take any sort of path,\nany cycle through this world. In the end I should end\nup back where I started.",
    "start": "2298908",
    "end": "2305720"
  },
  {
    "text": "Otherwise I'm ripping. And what that condition\nsays is that if you take the sequence of reflections\nand you compose them,",
    "start": "2305720",
    "end": "2311189"
  },
  {
    "text": "you end up with no reflection\nat all, that nothing moved. And so that's a necessary\ncondition for flat foldability.",
    "start": "2311189",
    "end": "2317670"
  },
  {
    "text": "I wouldn't call it a definition,\nalthough this paper did. Natural definition\nis more like what",
    "start": "2317670",
    "end": "2324510"
  },
  {
    "text": "we draw in 2D for\nflat folding, where we add another layer,\nanother dimension,",
    "start": "2324510",
    "end": "2332040"
  },
  {
    "text": "and then guarantee no\ncollisions in that dimension. So same thing in 3D.",
    "start": "2332040",
    "end": "2338020"
  },
  {
    "text": "It's just harder to imagine\nstacking up copies of 3D. Question? AUDIENCE: Doesn't the\nreflection analogy only apply to\nsimple folds, where",
    "start": "2338020",
    "end": "2344853"
  },
  {
    "text": "the plane goes all the way? PROFESSOR: OK. Good question. The reflection\nanalogy definitely applies to simple folds.",
    "start": "2344853",
    "end": "2350320"
  },
  {
    "text": "It also applies to\nnon-simple folds. But it does require\nstraight folds, which here mean flat\nfolds, like planar folds.",
    "start": "2350320",
    "end": "2358099"
  },
  {
    "text": "For curve creases,\nyou're not really reflecting, because\nyou can't fold a curve crease all the way.",
    "start": "2358100",
    "end": "2363610"
  },
  {
    "text": "You can't fold it flat. But whenever you fold\nsomething all the way-- so even in something like this, which is\nnot a simple fold in the end--",
    "start": "2363610",
    "end": "2370250"
  },
  {
    "text": "you can check. Essentially, this is what we--\non the circle, when we said, OK, you walk this way and then\nyou just change direction.",
    "start": "2370250",
    "end": "2377450"
  },
  {
    "text": "That's essentially\nthe reflection that's happening on the circle. If you live on the circle\nyou're reflecting in",
    "start": "2377450",
    "end": "2383151"
  },
  {
    "text": "that you're immediately\nbouncing back at that crease. It turns out to\nhold in 2D as well. So if you look at the\neffect of this crease,",
    "start": "2383152",
    "end": "2389870"
  },
  {
    "text": "it is that you're reflecting\nthis part over that crease. I guess you can see\nit in the folding too.",
    "start": "2389870",
    "end": "2395810"
  },
  {
    "text": "I mean, you go over this\ncrease, then you hit this line, and then you immediately\nbounce back at the line. That is actually a\nreflection through the line.",
    "start": "2395810",
    "end": "2403536"
  },
  {
    "text": "Good question. It's obvious for simple\nfolds, but reflection actually works here as well.",
    "start": "2403537",
    "end": "2408859"
  },
  {
    "text": "We'll talk more about that in\nthe next lecture, I believe. OK.",
    "start": "2408860",
    "end": "2414260"
  },
  {
    "text": "I was looking up reference,\nany papers that cited that one, and there's basically\none paper, which",
    "start": "2414260",
    "end": "2419600"
  },
  {
    "text": "is this kind of a\ngraphics/art/math paper talking",
    "start": "2419600",
    "end": "2425709"
  },
  {
    "text": "about four-dimensional origami. It's basically some\nsimulations and some examples.",
    "start": "2425709",
    "end": "2430840"
  },
  {
    "text": "Here's the not folding\nall the way picture. A little harder to imagine. Here they're doing, I think, the\n4D analog of a rabbit ear fold.",
    "start": "2430840",
    "end": "2439840"
  },
  {
    "text": "Little hard to\ntell, but first they do a simple fold\nalong a bisector. That I can understand. And then they do an\ninside reverse fold.",
    "start": "2439840",
    "end": "2446420"
  },
  {
    "text": "And then you end up with\n1/4 of the tetrahedron.",
    "start": "2446420",
    "end": "2451559"
  },
  {
    "text": "So if you divide, this is the\ncentroid of the tetrahedron. It's really hard to\ndraw these pictures.",
    "start": "2451560",
    "end": "2457650"
  },
  {
    "text": "In the paper, they\nactually showed two images, and if you align\nthem with your eyes then you'll see\na 3D image, which",
    "start": "2457650",
    "end": "2463900"
  },
  {
    "text": "is of course a projection\nof the 4D thing. They also have this one. Anyone have red-blue\nglasses with them?",
    "start": "2463900",
    "end": "2470819"
  },
  {
    "text": "Then you'll see this in 3D. Here you can watch that later. This is their 4D analog of\na flapping bird, I guess.",
    "start": "2470820",
    "end": "2479194"
  },
  {
    "text": "It's pretty hard to see\nthese pictures, though But this is the state of the art\nin 4D origami as far as I know.",
    "start": "2479194",
    "end": "2485407"
  },
  {
    "text": "It's kind of neat to find. This is a pretty recent paper. Questions about\nhigher dimensions?",
    "start": "2485407",
    "end": "2493210"
  },
  {
    "text": "Lots of things are open. For example, single\nvertex flat foldability",
    "start": "2493210",
    "end": "2498850"
  },
  {
    "text": "could be a neat problem. I don't think-- It may be\nthat Kawasaki's condition",
    "start": "2498850",
    "end": "2504527"
  },
  {
    "text": "from that paper is enough. I don't know. Maybe not. OK.",
    "start": "2504527",
    "end": "2510240"
  },
  {
    "text": "Last question, just kind\nof a nice place to end is, why are we spending all\nthis time on flat foldability.",
    "start": "2510240",
    "end": "2516150"
  },
  {
    "text": "Flat origami's kind of boring. And so why do we spend\nall this time with it? It's good to check\nwhy are we doing this.",
    "start": "2516150",
    "end": "2524360"
  },
  {
    "text": "One answer of course is that\nthere's interesting mathematics here. It's kind of a natural question.",
    "start": "2524360",
    "end": "2530980"
  },
  {
    "text": "Why not? That's the math cop-out answer. But there are actually a\nlot of good answers as well.",
    "start": "2530980",
    "end": "2537480"
  },
  {
    "text": "One answer is that flat origami\nactually is pretty cool. There's a whole world of\nflat tessellations, where you fold a repeating\npattern in your sheet.",
    "start": "2537480",
    "end": "2545060"
  },
  {
    "text": "This is from a\nrectangle of paper. What you're seeing here\nis a shadow pattern. It's held up to a window, and\nso you see this shadow pattern,",
    "start": "2545060",
    "end": "2551180"
  },
  {
    "text": "which looks an awful lot like\na 6 by 6 by 6 Rubik's cube.",
    "start": "2551180",
    "end": "2556220"
  },
  {
    "text": "That's the design here. You could make it even\nlarger if you want.",
    "start": "2556220",
    "end": "2562030"
  },
  {
    "text": "Another answer is, well,\nmaybe I need to store stuff. And while I can\nunfold things, it's kind of big when it's unfolded.",
    "start": "2562030",
    "end": "2567420"
  },
  {
    "text": "If I could fold it\nall the way flat-- maybe I care about the 3D\nshape, but if I could fold it all the way flat, then it\nwould be easier to store.",
    "start": "2567420",
    "end": "2573414"
  },
  {
    "text": "It's going to be smaller, more\ncompact, I can roll it up, I can do lots of things. Airbag folding is one example.",
    "start": "2573414",
    "end": "2578900"
  },
  {
    "text": "Here you actually\nstart with a 3D shape. There's no sort of unfold. It's been sewn into a 3D shape.",
    "start": "2578900",
    "end": "2583980"
  },
  {
    "text": "And then you want to collapse\nit into some nice flat shape for storage in your steering\nwheel, or the side of your car,",
    "start": "2583980",
    "end": "2589390"
  },
  {
    "text": "or whatever. And this is an example of\nfolding using flat origami",
    "start": "2589390",
    "end": "2596210"
  },
  {
    "text": "designs. This crease pattern is\nbased on the tree method, and other stuff we haven't\ncovered yet, fold and cut.",
    "start": "2596210",
    "end": "2605530"
  },
  {
    "text": "So that's another. That's sort of the\npractical answer. And then there's more\nmathematical answers,",
    "start": "2605530",
    "end": "2611917"
  },
  {
    "text": "deeper things. Even if you don't care about\nflat folding by itself, it turns out to relate\nto 3D folding as well.",
    "start": "2611917",
    "end": "2617710"
  },
  {
    "text": "This is a paper\nthat's very cool. We have a guest lecture by\nTomohiro Tachi coming up.",
    "start": "2617710",
    "end": "2623740"
  },
  {
    "text": "I haven't scheduled\nexactly when it will be, because it's in the in the box.",
    "start": "2623740",
    "end": "2629770"
  },
  {
    "text": "It's on tape. So we'll be watching\nthat at some point. He was actually just\nvisiting a couple weeks ago.",
    "start": "2629770",
    "end": "2636264"
  },
  {
    "text": "And he has this\ncool theorem which says that if you\nhave a plane or quad mesh-- so a particular kind of\ncrease pattern, every vertex",
    "start": "2636264",
    "end": "2643170"
  },
  {
    "text": "has four incident increases,\nevery face is a quadrilateral-- and it's flat foldable--\nso you may not",
    "start": "2643170",
    "end": "2649651"
  },
  {
    "text": "care about flat\nfoldability, but you need this Kawasaki\ncondition to guarantee that this will work-- then it\nhas a rigid folding motion, if",
    "start": "2649651",
    "end": "2656810"
  },
  {
    "text": "and only if it has a 3D state. Let me show you some examples. So this a kind of a classic\norigami called miura-ori.",
    "start": "2656810",
    "end": "2666010"
  },
  {
    "text": "And it has this cool property\nthat even if these panels are made up out of rigid material\nlike sheet metal or plastic",
    "start": "2666010",
    "end": "2671945"
  },
  {
    "text": "or whatever, if these are\nhinges you can still fold it. And this is an\nanimation of it folding.",
    "start": "2671945",
    "end": "2677450"
  },
  {
    "text": "And indeed it folds flat. And what the\ntheorem is saying is if you can build a 3D picture\nlike this, any one of these,",
    "start": "2677450",
    "end": "2685310"
  },
  {
    "text": "that guarantees that there's\nthis folding motion-- not necessarily all the way to flat,\nbut at least part way to flat.",
    "start": "2685310",
    "end": "2691960"
  },
  {
    "text": "And often you can get\nit all the way to flat. And so Tomohiro's\ndeveloped software that lets you start\nwith something",
    "start": "2691960",
    "end": "2698805"
  },
  {
    "text": "you know works-- so this\nis a miura-ori that's been folded partly--\nand then just start pulling on the vertices and\nmessing it up and just changing",
    "start": "2698805",
    "end": "2705881"
  },
  {
    "text": "the shapes. So this is not a folding. You're changing how the\npaper fits together.",
    "start": "2705881",
    "end": "2711300"
  },
  {
    "text": "You're changing\nthe crease pattern. As you do that, he keeps\ntrack of the crease pattern and he adds constraints\nto make sure",
    "start": "2711300",
    "end": "2717370"
  },
  {
    "text": "that it stays flat foldable. The result is you end up with\na 3D embedding, a 3D folding,",
    "start": "2717370",
    "end": "2724300"
  },
  {
    "text": "and you have a flat\nfoldable crease pattern that goes with it. And that guarantees\nthat you get a motion. Those two things.",
    "start": "2724300",
    "end": "2729630"
  },
  {
    "text": "So this technique of\nhaving flat foldability lets him design crazy\ncrease patterns that",
    "start": "2729630",
    "end": "2735810"
  },
  {
    "text": "fold into whatever\nshape he wants with a nice rigid motion where\nall these panels stay rigid.",
    "start": "2735810",
    "end": "2744020"
  },
  {
    "text": "So that's another motivation\nfor flat foldability. It's probably used\nelsewhere as well,",
    "start": "2744020",
    "end": "2750170"
  },
  {
    "text": "but this is kind of the\ncoolest, newest example I know, where it's just a\ncondition in the theorem,",
    "start": "2750170",
    "end": "2755870"
  },
  {
    "text": "and in order to check\nthat condition you need to understand\nflat foldability. ",
    "start": "2755870",
    "end": "2761259"
  },
  {
    "text": "Other questions?  That's all I have for slides. ",
    "start": "2761259",
    "end": "2771529"
  },
  {
    "text": "Cool. That's the end of class. ",
    "start": "2771530",
    "end": "2784837"
  }
]