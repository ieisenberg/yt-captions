[
  {
    "start": "0",
    "end": "720"
  },
  {
    "text": "Finally, let's discuss the third\nclass of instructions that let",
    "start": "720",
    "end": "4770"
  },
  {
    "text": "us change the program counter.",
    "start": "4770",
    "end": "7210"
  },
  {
    "text": "Up until now, the\nprogram counter",
    "start": "7210",
    "end": "8940"
  },
  {
    "text": "has simply been incremented by 4\nat the end of each instruction,",
    "start": "8940",
    "end": "12269"
  },
  {
    "text": "so that the next instruction\ncomes from the memory",
    "start": "12270",
    "end": "14530"
  },
  {
    "text": "location that immediately\nfollows the location that",
    "start": "14530",
    "end": "16850"
  },
  {
    "text": "held the current instruction,",
    "start": "16850",
    "end": "19120"
  },
  {
    "text": "i.e., the Beta has been\nexecuting instructions",
    "start": "19120",
    "end": "21650"
  },
  {
    "text": "sequentially from memory.",
    "start": "21650",
    "end": "24520"
  },
  {
    "text": "But in many programs,\nsuch as in factorial,",
    "start": "24520",
    "end": "27270"
  },
  {
    "text": "we need to disrupt\nsequential execution,",
    "start": "27270",
    "end": "29750"
  },
  {
    "text": "either to loop back to repeat\nsome earlier instruction,",
    "start": "29750",
    "end": "33520"
  },
  {
    "text": "or to skip over instructions\nbecause of some data",
    "start": "33520",
    "end": "36340"
  },
  {
    "text": "dependency.",
    "start": "36340",
    "end": "37980"
  },
  {
    "text": "We need a way to change\nthe program counter",
    "start": "37980",
    "end": "40420"
  },
  {
    "text": "based on data values generated\nby the program's execution.",
    "start": "40420",
    "end": "44539"
  },
  {
    "text": "In the factorial example, as\nlong as b is not equal to 0,",
    "start": "44540",
    "end": "48120"
  },
  {
    "text": "we need to keep executing the\ninstructions that calculate a*b",
    "start": "48120",
    "end": "52070"
  },
  {
    "text": "and decrement b.",
    "start": "52070",
    "end": "54180"
  },
  {
    "text": "So we need instructions\nto test the value of b",
    "start": "54180",
    "end": "56870"
  },
  {
    "text": "after it's been decremented\nand if it's non-zero,",
    "start": "56870",
    "end": "59550"
  },
  {
    "text": "change the PC to repeat\nthe loop one more time.",
    "start": "59550",
    "end": "63950"
  },
  {
    "text": "Changing the PC depending\non some condition",
    "start": "63950",
    "end": "66230"
  },
  {
    "text": "is implemented by a\nbranch instruction,",
    "start": "66230",
    "end": "68530"
  },
  {
    "text": "and the operation is referred\nto as a \"conditional branch\".",
    "start": "68530",
    "end": "73070"
  },
  {
    "text": "When the branch is\ntaken, the PC is changed",
    "start": "73070",
    "end": "76000"
  },
  {
    "text": "and execution is restarted\nat the new location, which",
    "start": "76000",
    "end": "79130"
  },
  {
    "text": "is called the branch target.",
    "start": "79130",
    "end": "81729"
  },
  {
    "text": "If the branch is not taken,\nthe PC is incremented by 4",
    "start": "81730",
    "end": "85070"
  },
  {
    "text": "and execution continues with\nthe instruction following",
    "start": "85070",
    "end": "89260"
  },
  {
    "text": "the branch.",
    "start": "89260",
    "end": "91490"
  },
  {
    "text": "As the name implies,\na branch instruction",
    "start": "91490",
    "end": "93470"
  },
  {
    "text": "represents a potential fork\nin the execution sequence.",
    "start": "93470",
    "end": "97190"
  },
  {
    "text": "We'll use branches to\nimplement many different types",
    "start": "97190",
    "end": "99690"
  },
  {
    "text": "of control structures: loops,\nconditionals, procedure",
    "start": "99690",
    "end": "102780"
  },
  {
    "text": "calls, etc.",
    "start": "102780",
    "end": "105310"
  },
  {
    "text": "Branches instructions also\nuse the instruction format",
    "start": "105310",
    "end": "108170"
  },
  {
    "text": "with the 16-bit signed constant.",
    "start": "108170",
    "end": "110530"
  },
  {
    "text": "The operation of the\nbranch instructions",
    "start": "110530",
    "end": "112500"
  },
  {
    "text": "are a bit complicated, so let's\nwalk through their operation",
    "start": "112500",
    "end": "115650"
  },
  {
    "text": "step-by-step.",
    "start": "115650",
    "end": "117970"
  },
  {
    "text": "Let's start by looking at\nthe operation of the BEQ",
    "start": "117970",
    "end": "120530"
  },
  {
    "text": "instruction.",
    "start": "120530",
    "end": "122479"
  },
  {
    "text": "First the usual PC\n4 calculation is",
    "start": "122480",
    "end": "125420"
  },
  {
    "text": "performed, giving us the address\nof the instruction following",
    "start": "125420",
    "end": "129369"
  },
  {
    "text": "the BEQ.",
    "start": "129370",
    "end": "131230"
  },
  {
    "text": "This value is written\nto the \"rc\" register",
    "start": "131230",
    "end": "133690"
  },
  {
    "text": "whether or not the\nbranch is taken.",
    "start": "133690",
    "end": "136910"
  },
  {
    "text": "This feature of\nbranches is pretty handy",
    "start": "136910",
    "end": "139200"
  },
  {
    "text": "and we'll use it to\nimplement procedure calls",
    "start": "139200",
    "end": "141160"
  },
  {
    "text": "a couple of lectures from now.",
    "start": "141160",
    "end": "143750"
  },
  {
    "text": "Note that if we don't need\nto remember the PC 4 value,",
    "start": "143750",
    "end": "146910"
  },
  {
    "text": "we can specify R31\nas the \"rc\" register.",
    "start": "146910",
    "end": "151240"
  },
  {
    "text": "Next, BEQ tests the\nvalue of the \"ra\"",
    "start": "151240",
    "end": "154040"
  },
  {
    "text": "register to see if\nit's equal to 0.",
    "start": "154040",
    "end": "156349"
  },
  {
    "text": "If it is equal to 0,\nthe branch is taken",
    "start": "156350",
    "end": "159750"
  },
  {
    "text": "and the PC is incremented\nby the amount specified",
    "start": "159750",
    "end": "162440"
  },
  {
    "text": "in the constant field\nof the instruction.",
    "start": "162440",
    "end": "165490"
  },
  {
    "text": "Actually the constant,\ncalled an offset",
    "start": "165490",
    "end": "167600"
  },
  {
    "text": "since we're using\nit to offset the PC,",
    "start": "167600",
    "end": "170340"
  },
  {
    "text": "is treated as a word offset\nand is multiplied by 4",
    "start": "170340",
    "end": "173830"
  },
  {
    "text": "to convert it a byte\noffset since the PC uses",
    "start": "173830",
    "end": "177420"
  },
  {
    "text": "byte addressing.",
    "start": "177420",
    "end": "179599"
  },
  {
    "text": "If the contents of the \"ra\"\nregister is not equal to 0,",
    "start": "179600",
    "end": "183210"
  },
  {
    "text": "the PC is incremented\nby 4 and execution",
    "start": "183210",
    "end": "185940"
  },
  {
    "text": "continues with the\ninstruction following the BEQ.",
    "start": "185940",
    "end": "189320"
  },
  {
    "text": "Let me say a few more\nwords about the offset.",
    "start": "189320",
    "end": "193850"
  },
  {
    "text": "The branches are using what's\nreferred to as \"pc-relative",
    "start": "193850",
    "end": "197180"
  },
  {
    "text": "addressing\".",
    "start": "197180",
    "end": "198510"
  },
  {
    "text": "That means the address\nof the branch target",
    "start": "198510",
    "end": "200670"
  },
  {
    "text": "is specified relative to\nthe address of the branch,",
    "start": "200670",
    "end": "203540"
  },
  {
    "text": "or, actually, relative to the\naddress of the instruction",
    "start": "203540",
    "end": "206150"
  },
  {
    "text": "following the branch.",
    "start": "206150",
    "end": "207829"
  },
  {
    "text": "So an offset of 0 would refer\nto the instruction following",
    "start": "207830",
    "end": "212110"
  },
  {
    "text": "the branch and an\noffset of -1 would",
    "start": "212110",
    "end": "214580"
  },
  {
    "text": "refer to the branch itself.",
    "start": "214580",
    "end": "216960"
  },
  {
    "text": "Negative offsets are\ncalled \"backwards branches\"",
    "start": "216960",
    "end": "219670"
  },
  {
    "text": "and are usually seen at branches\nused at the end of loops, where",
    "start": "219670",
    "end": "223470"
  },
  {
    "text": "the looping condition\nis tested and we",
    "start": "223470",
    "end": "226080"
  },
  {
    "text": "branch backwards to the\nbeginning of the loop",
    "start": "226080",
    "end": "228160"
  },
  {
    "text": "if another iteration\nis called for.",
    "start": "228160",
    "end": "231040"
  },
  {
    "text": "Positive offsets are\ncalled \"forward branches\"",
    "start": "231040",
    "end": "233489"
  },
  {
    "text": "and are usually seen in\ncode for \"if statements\",",
    "start": "233490",
    "end": "236950"
  },
  {
    "text": "where we might skip over\nsome part of the program",
    "start": "236950",
    "end": "239510"
  },
  {
    "text": "if a condition is not true.",
    "start": "239510",
    "end": "242700"
  },
  {
    "text": "We can use BEQ to implement a\nso-called unconditional branch,",
    "start": "242700",
    "end": "246370"
  },
  {
    "text": "i.e., a branch that\nis always taken.",
    "start": "246370",
    "end": "249290"
  },
  {
    "text": "If we test R31 to see if\nit's 0, that's always true,",
    "start": "249290",
    "end": "252230"
  },
  {
    "text": "so BEQ(R31,...) would always\nbranch to the specified target.",
    "start": "252230",
    "end": "257458"
  },
  {
    "text": "There's also a BNE\ninstruction, identical to BEQ",
    "start": "257459",
    "end": "260170"
  },
  {
    "text": "in its operation except\nthe sense of the condition",
    "start": "260170",
    "end": "263050"
  },
  {
    "text": "is reversed: the branch is taken\nif the value of register \"ra\"",
    "start": "263050",
    "end": "266800"
  },
  {
    "text": "is non-zero.",
    "start": "266800",
    "end": "269110"
  },
  {
    "text": "It might seem that only testing\nfor zero/non-zero doesn't let",
    "start": "269110",
    "end": "272409"
  },
  {
    "text": "us do everything we\nmight want to do.",
    "start": "272410",
    "end": "275440"
  },
  {
    "text": "For example, how would\nwe branch if \"a b\"?",
    "start": "275440",
    "end": "287012"
  },
  {
    "text": "That's where the compare\ninstructions come in -",
    "start": "287012",
    "end": "288970"
  },
  {
    "text": "they do more\ncomplicated comparisons,",
    "start": "288970",
    "end": "289450"
  },
  {
    "text": "producing a non-zero value\nif the comparison is true",
    "start": "289450",
    "end": "290320"
  },
  {
    "text": "and a zero value if the\ncomparison is false.",
    "start": "290320",
    "end": "292153"
  },
  {
    "text": "Then we can use\nBEQ and BNE to test",
    "start": "292153",
    "end": "294270"
  },
  {
    "text": "the result of the comparison\nand branch appropriately.",
    "start": "294270",
    "end": "296919"
  },
  {
    "text": "At long last we're\nfinally in a position",
    "start": "296920",
    "end": "299560"
  },
  {
    "text": "to write Beta code\nto compute factorial",
    "start": "299560",
    "end": "301880"
  },
  {
    "text": "using the iterative algorithm\nshown in C code on the left.",
    "start": "301880",
    "end": "305520"
  },
  {
    "text": "In the Beta code,\nthe loop starts",
    "start": "305520",
    "end": "307840"
  },
  {
    "text": "at the second instruction and\nis marked with the \"L:\" label.",
    "start": "307840",
    "end": "311480"
  },
  {
    "text": "The body of the loop consists\nof the required multiplication",
    "start": "311480",
    "end": "314790"
  },
  {
    "text": "and the decrement of b.",
    "start": "314790",
    "end": "316440"
  },
  {
    "text": "Then, in the fourth\ninstruction, b is tested",
    "start": "316440",
    "end": "319090"
  },
  {
    "text": "and, if it's non-zero,\nthe BNE will branch back",
    "start": "319090",
    "end": "322264"
  },
  {
    "text": "to the instruction\nwith the label L.",
    "start": "322265",
    "end": "325520"
  },
  {
    "text": "Note that in symbolic notation\nfor BEQ and BNE instructions",
    "start": "325520",
    "end": "330169"
  },
  {
    "text": "we don't write the offset\ndirectly since directly that",
    "start": "330170",
    "end": "333425"
  },
  {
    "text": "would be a pain to\ncalculate and would",
    "start": "333425",
    "end": "335284"
  },
  {
    "text": "change if we added or removed\ninstructions from the loop.",
    "start": "335285",
    "end": "337660"
  },
  {
    "text": "Instead we reference\nthe instruction",
    "start": "337660",
    "end": "339160"
  },
  {
    "text": "to which we want to\nbranch, and the program",
    "start": "339160",
    "end": "341320"
  },
  {
    "text": "that translates\nthe symbolic code",
    "start": "341320",
    "end": "343180"
  },
  {
    "text": "into the binary\ninstruction fields",
    "start": "343180",
    "end": "345039"
  },
  {
    "text": "will do the offset\ncalculation for us.",
    "start": "345040",
    "end": "348760"
  },
  {
    "text": "There's a satisfying similarity\nbetween the Beta code",
    "start": "348760",
    "end": "352480"
  },
  {
    "text": "and the operations specified\nby the high-level FSM",
    "start": "352480",
    "end": "355950"
  },
  {
    "text": "we created for",
    "start": "355950",
    "end": "356760"
  },
  {
    "text": "computing factorial in the\nsimple programmable datapath",
    "start": "356760",
    "end": "359052"
  },
  {
    "text": "discussed earlier\nin this lecture.",
    "start": "359052",
    "end": "361170"
  },
  {
    "text": "In this example, each",
    "start": "361170",
    "end": "362070"
  },
  {
    "text": "state in the high-level\nFSM matches up nicely",
    "start": "362070",
    "end": "363060"
  },
  {
    "text": "with a particular\nBeta instruction.",
    "start": "363060",
    "end": "364800"
  },
  {
    "text": "We wouldn't expect that high\ndegree of correspondence",
    "start": "364800",
    "end": "368710"
  },
  {
    "text": "in general, but since our\nBeta datapath and the example",
    "start": "368710",
    "end": "373590"
  },
  {
    "text": "datapath were very similar,\nthe states and instructions",
    "start": "373590",
    "end": "377500"
  },
  {
    "text": "match up pretty well.",
    "start": "377500",
    "end": "380520"
  }
]