[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "Let's finish up by looking at two extended\nexamples.",
    "start": "339",
    "end": "4200"
  },
  {
    "text": "The scenario for both examples is the control\nsystem for the International Space Station,",
    "start": "4200",
    "end": "9110"
  },
  {
    "text": "which has to handle three recurring tasks:\nsupply ship guidance (SSG), gyroscope control",
    "start": "9110",
    "end": "15809"
  },
  {
    "text": "(G), and cabin pressure (CP).",
    "start": "15810",
    "end": "19200"
  },
  {
    "text": "For each device, the table shows us the time\nbetween successive requests (the period),",
    "start": "19200",
    "end": "24090"
  },
  {
    "text": "the service time for each request, and the\nservice deadline for each request.",
    "start": "24090",
    "end": "29300"
  },
  {
    "text": "We'll first analyze the system assuming that\nit's using a weak priority system.",
    "start": "29300",
    "end": "34510"
  },
  {
    "text": "First question: What is the maximum service\ntime for the cabin pressure task that still",
    "start": "34510",
    "end": "39510"
  },
  {
    "text": "allows all constraints to be met?",
    "start": "39510",
    "end": "42260"
  },
  {
    "text": "Well, the SSG task has a maximum allowable\nlatency of 20 ms, i.e., it's service routine",
    "start": "42260",
    "end": "48930"
  },
  {
    "text": "must start execution within 20 ms if it is\nto meet its 25 ms deadline.",
    "start": "48930",
    "end": "56120"
  },
  {
    "text": "The G task has a maximum allowable latency\nof 10 ms if it's to meet its deadline.",
    "start": "56120",
    "end": "62660"
  },
  {
    "text": "So no other handler can take longer than 10\nms to run or the G task will miss its deadline.",
    "start": "62660",
    "end": "70139"
  },
  {
    "text": "2.",
    "start": "70139",
    "end": "71579"
  },
  {
    "text": "Give a weak priority ordering that meets the\nconstraints.",
    "start": "71579",
    "end": "76380"
  },
  {
    "text": "Using the earliest deadline strategy discussed\nearlier, the priority would be G with the",
    "start": "76380",
    "end": "80810"
  },
  {
    "text": "highest priority, SSG with the middle priority,\nand CP with the lowest priority.",
    "start": "80810",
    "end": "87398"
  },
  {
    "text": "3.",
    "start": "87399",
    "end": "88499"
  },
  {
    "text": "What fraction of time will the processor spend\nidle?",
    "start": "88499",
    "end": "92669"
  },
  {
    "text": "We need to compute the fraction of CPU cycles\nneeded to service the recurring requests for",
    "start": "92669",
    "end": "97450"
  },
  {
    "text": "each task.",
    "start": "97450",
    "end": "98889"
  },
  {
    "text": "SSG takes 5/30 = 16.67% of the CPU cycles.",
    "start": "98889",
    "end": "105950"
  },
  {
    "text": "G takes 10/40 = 25% of the CPU cycles.",
    "start": "105950",
    "end": "110459"
  },
  {
    "text": "And CP takes 10/100 = 10% of the CPU cycles.",
    "start": "110459",
    "end": "115119"
  },
  {
    "text": "So servicing the task requests takes 51.67%\nof the cycles, leaving 48.33% of the cycles",
    "start": "115119",
    "end": "122189"
  },
  {
    "text": "unused.",
    "start": "122189",
    "end": "123679"
  },
  {
    "text": "So the astronauts will be able to play Minecraft\nin their spare time :)",
    "start": "123679",
    "end": "126789"
  },
  {
    "text": "4.",
    "start": "126789",
    "end": "128560"
  },
  {
    "text": "What is the worst-case delay for each task\nuntil completion of its service routine?",
    "start": "128560",
    "end": "134510"
  },
  {
    "text": "Each task might have to wait for the longest-running\nlower-priority handler to complete plus the",
    "start": "134510",
    "end": "139930"
  },
  {
    "text": "service times of any other higher-priority\ntasks plus, of course, its own service time.",
    "start": "139930",
    "end": "146209"
  },
  {
    "text": "SSG has the lowest priority, so it might have\nto wait for CP and G to complete (a total",
    "start": "146209",
    "end": "152739"
  },
  {
    "text": "of 20 ms), then add its own service time (5\nms).",
    "start": "152739",
    "end": "157599"
  },
  {
    "text": "So it's worst-case completion time is 25 ms\nafter the request.",
    "start": "157599",
    "end": "163120"
  },
  {
    "text": "G might to wait for CP to complete (10 ms),\nthen add its own service time (10 ms) for",
    "start": "163120",
    "end": "169439"
  },
  {
    "text": "a worst-case completion time of 20 ms.",
    "start": "169439",
    "end": "170741"
  },
  {
    "text": "CP might have to wait for SSG to finish (5\nms), then wait for G to run (10 ms), then",
    "start": "170741",
    "end": "180411"
  },
  {
    "text": "add its own service time (10 ms) for a worst-case\ncompletion time of 25 ms.",
    "start": "180411",
    "end": "187980"
  },
  {
    "text": "Let's redo the problem, this timing assuming\na strong priority system where, as before,",
    "start": "187980",
    "end": "192650"
  },
  {
    "start": "188000",
    "end": "188000"
  },
  {
    "text": "G has the highest priority, SSG the middle\npriority, and CP the lowest priority.",
    "start": "192650",
    "end": "199890"
  },
  {
    "text": "What is the maximum service time for CP that\nstill allows all constraints to be met?",
    "start": "199890",
    "end": "205900"
  },
  {
    "text": "This calculation is different in a strong\npriority system, since the service time of",
    "start": "205900",
    "end": "209959"
  },
  {
    "text": "CP is no longer constrained by the maximum\nallowable latency of the higher-priority tasks",
    "start": "209959",
    "end": "215129"
  },
  {
    "text": "-\nthey'll simply preempt CP when they need to",
    "start": "215129",
    "end": "217800"
  },
  {
    "text": "run!",
    "start": "217800",
    "end": "219510"
  },
  {
    "text": "Instead we need to think about how much CPU\ntime will be used by the SSG and G tasks in",
    "start": "219510",
    "end": "225340"
  },
  {
    "text": "the 100 ms interval between the CP request\nand its deadline.",
    "start": "225340",
    "end": "231269"
  },
  {
    "text": "In a 100 ms interval, there might be four\nSSG requests (at times 0, 30, 60, and 90)",
    "start": "231269",
    "end": "239150"
  },
  {
    "text": "and three G requests (at times 0, 40, and\n80).",
    "start": "239150",
    "end": "243219"
  },
  {
    "text": "Together these requests require a total of\n50 ms to service.",
    "start": "243219",
    "end": "248670"
  },
  {
    "text": "So the service time for CP can be up 50 ms\nand still meet the 100 ms deadline.",
    "start": "248670",
    "end": "255639"
  },
  {
    "text": "2.",
    "start": "255639",
    "end": "256639"
  },
  {
    "text": "What fraction of the time will the processor\nspend idle?",
    "start": "256639",
    "end": "261030"
  },
  {
    "text": "Assuming a 50 ms service time for CP, it now\nconsumes 50% of the CPU.",
    "start": "261030",
    "end": "266840"
  },
  {
    "text": "The other request loads are as before, so\n91.67% of the CPU cycles will be spent servicing",
    "start": "266840",
    "end": "273520"
  },
  {
    "text": "requests, leaving 8.33% of idle time.",
    "start": "273520",
    "end": "277310"
  },
  {
    "text": "3.",
    "start": "277310",
    "end": "278310"
  },
  {
    "text": "What is the worst-case completion time for\neach task?",
    "start": "278310",
    "end": "282240"
  },
  {
    "text": "The G task has the highest priority, so its\nservice routine runs immediately after the",
    "start": "282240",
    "end": "286960"
  },
  {
    "text": "request is received and its worst-case completion\ntime is exactly its service time.",
    "start": "286960",
    "end": "292780"
  },
  {
    "text": "In the 25 ms interval between an SSG request\nand its deadline, there might be at most one",
    "start": "292780",
    "end": "298389"
  },
  {
    "text": "G request that will preempt execution.",
    "start": "298389",
    "end": "301389"
  },
  {
    "text": "So the worst-case completion time is one G\nservice time (10 ms) plus the SSG service",
    "start": "301389",
    "end": "308020"
  },
  {
    "text": "time (5 ms).",
    "start": "308020",
    "end": "310668"
  },
  {
    "text": "Finally, from the calculation for problem\n1, we chose the service time for the CP task",
    "start": "310669",
    "end": "316071"
  },
  {
    "text": "so that it will complete just at its deadline\nof 100 ms,",
    "start": "316071",
    "end": "320810"
  },
  {
    "text": "taking into account the service time for multiple\nhigher-priority requests.",
    "start": "320810",
    "end": "325940"
  },
  {
    "text": "We covered a lot of ground in this lecture!",
    "start": "325940",
    "end": "328740"
  },
  {
    "start": "326000",
    "end": "326000"
  },
  {
    "text": "We saw that the computation needed for user-mode\nprograms to interact with external devices",
    "start": "328740",
    "end": "333539"
  },
  {
    "text": "was split into two parts.",
    "start": "333539",
    "end": "335580"
  },
  {
    "text": "On the device-side, the OS handles device\ninterrupts and performs the task of moving",
    "start": "335580",
    "end": "340069"
  },
  {
    "text": "data between kernel buffers and the device.",
    "start": "340070",
    "end": "343190"
  },
  {
    "text": "On the application side, user-mode programs\naccess the information via SVC calls to the",
    "start": "343190",
    "end": "349460"
  },
  {
    "text": "OS.",
    "start": "349460",
    "end": "351400"
  },
  {
    "text": "We worried about how to handle SVC requests\nthat needed to wait for an I/O event before",
    "start": "351400",
    "end": "356310"
  },
  {
    "text": "the request could be satisfied.",
    "start": "356310",
    "end": "358500"
  },
  {
    "text": "Ultimately we came up with a sleep/wakeup\nmechanism that suspends execution of the process",
    "start": "358500",
    "end": "363879"
  },
  {
    "text": "until the some interrupt routine signals that\nthe needed information has arrived,",
    "start": "363879",
    "end": "369120"
  },
  {
    "text": "causing the sleeping process to marked as\nactive.",
    "start": "369120",
    "end": "373110"
  },
  {
    "text": "Then the SVC is retried the next time the\nnow active process is scheduled for execution.",
    "start": "373110",
    "end": "380228"
  },
  {
    "text": "We discussed hard real-time constraints with\ntheir latencies, service times and deadlines.",
    "start": "380229",
    "end": "385729"
  },
  {
    "text": "Then we explored the implementation of interrupt\nsystems using both weak and strong priorities.",
    "start": "385729",
    "end": "392310"
  },
  {
    "text": "Real-life computer systems usually implement\nstrong priorities and support a modest number",
    "start": "392310",
    "end": "396940"
  },
  {
    "text": "of priority levels,\nusing a weak priority system to deal with",
    "start": "396940",
    "end": "399870"
  },
  {
    "text": "multiple devices assigned to the same strong\npriority level.",
    "start": "399870",
    "end": "404530"
  },
  {
    "text": "This seems to work quite well in practice,\nallowing the systems to meet the variety of",
    "start": "404530",
    "end": "408520"
  },
  {
    "text": "real-time constraints imposed by their I/O\ndevices.",
    "start": "408520",
    "end": "411379"
  }
]