[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help MIT\nOpenCourseWare continue to",
    "start": "0",
    "end": "7410"
  },
  {
    "text": "offer high-quality educational\nresources for free. To make a donation or view\nadditional materials from",
    "start": "7410",
    "end": "13960"
  },
  {
    "text": "hundreds of MIT courses, visit\nMIT OpenCourseWare at ocw.mit.edu.",
    "start": "13960",
    "end": "19840"
  },
  {
    "start": "19840",
    "end": "25400"
  },
  {
    "text": "PROFESSOR: Hello. Welcome.  Today we're going to talk about\none last new topic which",
    "start": "25400",
    "end": "33440"
  },
  {
    "text": "has to do with search. So as you remember, we're\nworking on our last topic.",
    "start": "33440",
    "end": "38820"
  },
  {
    "text": "The last topic was probability\nand planning. Last lecture we talked\nabout probability.",
    "start": "38820",
    "end": "45130"
  },
  {
    "text": " Mostly we focused on Bayes'\ntheorem, Bayes' rule.",
    "start": "45130",
    "end": "53000"
  },
  {
    "text": "That was a way of updating our\nbelief about some situation based on new information.",
    "start": "53000",
    "end": "59350"
  },
  {
    "text": "And this week in Design Lab 12,\nyou'll get a chance to use that in a robot application.",
    "start": "59350",
    "end": "66110"
  },
  {
    "text": "The idea to Design Lab 12 is\ngoing to be that a robot is pedaling along a corridor\nwith some",
    "start": "66110",
    "end": "72770"
  },
  {
    "text": "obstacles off to its left. And the idea will be, you don't\nknow where the robot is,",
    "start": "72770",
    "end": "80260"
  },
  {
    "text": "but the robot will be able to\nestimate where it is by the signals that it receives from\nits left-facing sonars.",
    "start": "80260",
    "end": "89480"
  },
  {
    "text": "So this is a very realistic\ntype of state-estimation problem. The idea is going to be that at\nany given time, t, you have",
    "start": "89480",
    "end": "97110"
  },
  {
    "text": "access to your previous belief\nat time t minus 1. And you have access to a new\nobservation, which is the",
    "start": "97110",
    "end": "104940"
  },
  {
    "text": "sonar to your left. And based on those two bits of\ninformation, you will update your belief.",
    "start": "104940",
    "end": "110429"
  },
  {
    "text": "Which means that when you start\nout you'll have no idea where you are, but that\nsituation should improve with time.",
    "start": "110430",
    "end": "118009"
  },
  {
    "text": "Ok. So that's what we're going\nto do in Design Lab 12. Today we're going to blast\nahead and think about the",
    "start": "118010",
    "end": "124380"
  },
  {
    "text": "other important topic,\nwhich is search. So we're going to think\nabout planning.",
    "start": "124380",
    "end": "130369"
  },
  {
    "text": "We're going to be\nplanning ahead. We're not going to just\nreact to the situation that's given to us. We're going to try to figure out\nwhat's the right thing to",
    "start": "130370",
    "end": "136840"
  },
  {
    "text": "do in the future. And to do that, we're going to\nthink about all the things we could possibly do, search\nthrough that space, and figure",
    "start": "136840",
    "end": "144540"
  },
  {
    "text": "out the one that's, quote,\n\"best.\" And we'll have to define \"best\" somehow.",
    "start": "144540",
    "end": "150489"
  },
  {
    "text": "Just to get going, I want to\nshow you a very simple kind of a search problem.",
    "start": "150490",
    "end": "157290"
  },
  {
    "text": "This is called the\neight puzzle. The idea is to make a plan to\ngo from this configuration,",
    "start": "157290",
    "end": "165109"
  },
  {
    "text": "which we'll call the state, to\nthis configuration, which we'll call the goal state.",
    "start": "165110",
    "end": "171790"
  },
  {
    "text": "And on each move, you get to\nmove one of the tiles into the",
    "start": "171790",
    "end": "177180"
  },
  {
    "text": "free space. So I could move the 8 to the\nright or the 6 down. Those are the only two things I\ncould do in the start state.",
    "start": "177180",
    "end": "184070"
  },
  {
    "text": "So I have to make up my\nmind which of those I would like to do. And I would like to believe\nthat ultimately, after a",
    "start": "184070",
    "end": "189750"
  },
  {
    "text": "series of moves, I'm going to be\nable to control this state into that state.",
    "start": "189750",
    "end": "195680"
  },
  {
    "text": "And you can imagine guessing. And we'll estimate in a moment\nhow big is the guess space.",
    "start": "195680",
    "end": "202150"
  },
  {
    "text": "I mean, if the guess space only\nhad like four elements in it, guessing's a\nfine strategy.",
    "start": "202150",
    "end": "207250"
  },
  {
    "text": "If the guess space has a lot\nmore elements than that, guessing's probably\nnot a good idea.",
    "start": "207250",
    "end": "214860"
  },
  {
    "text": "So I previously ran our search\nalgorithms, the ones that we'll develop during lecture,\non this problem.",
    "start": "214860",
    "end": "221320"
  },
  {
    "text": "And here's the solution\nthat our search algorithm came up with. ",
    "start": "221320",
    "end": "231300"
  },
  {
    "text": "It's not exactly what you might\ndo the first time you touched it.",
    "start": "231300",
    "end": "236770"
  },
  {
    "text": " OK, I made it.",
    "start": "236770",
    "end": "242150"
  },
  {
    "text": "If you were counting,\nI made 22 moves. ",
    "start": "242150",
    "end": "248200"
  },
  {
    "text": "The question is, how difficult\nwas that problem and how good was that solution?",
    "start": "248200",
    "end": "254189"
  },
  {
    "text": "Was that a good solution\nor a bad solution? Is there a better solution? How much work did I have\nto do in order to",
    "start": "254190",
    "end": "260519"
  },
  {
    "text": "calculate that solution? To get a handle on that,\nlet's start by asking a simple question. How many configurations\nare there?",
    "start": "260519",
    "end": "268610"
  },
  {
    "text": "I got there in 22. What was the space of things\nI had to look through? How many different board\nconfigurations exist?",
    "start": "268610",
    "end": "277470"
  },
  {
    "text": "So think about that\nfor 20 seconds. Talk to your neighbor. And figure out whether it\nis 8-squared, 9-squared,",
    "start": "277470",
    "end": "283640"
  },
  {
    "text": "8-factorial, 9-factorial,\nor none of those. ",
    "start": "283640",
    "end": "346270"
  },
  {
    "text": "So how many bar configurations\ndo you see? Raise your hand, show me a\nnumber of fingers, so I can",
    "start": "346270",
    "end": "351730"
  },
  {
    "text": "figure out roughly how people\nwere-- that's excellent. Very good participation, and\nnearly 100% correct.",
    "start": "351730",
    "end": "358560"
  },
  {
    "text": "The answer is number (4). You can think about this. What if you took all the tiles\nout and threw them on the",
    "start": "358560",
    "end": "363880"
  },
  {
    "text": "floor, and then put them\nin one at a time? Well, you would have 9\npossibilities for where you",
    "start": "363880",
    "end": "369710"
  },
  {
    "text": "wanted to put the first one. Then you would have 8\npossibilities for where you wanted to put the second one.",
    "start": "369710",
    "end": "375110"
  },
  {
    "text": "Then you'd have 7 possibilities\nfor where you put the third one, et\ncetera, et cetera. Even though the space doesn't\nhave a number on it, it still",
    "start": "375110",
    "end": "382449"
  },
  {
    "text": "sort of counts. And so you end up with\n9-factorial.",
    "start": "382450",
    "end": "387550"
  },
  {
    "text": "And the point is, 9-factorial\nis a big number. 9-factorial is 362880.",
    "start": "387550",
    "end": "397050"
  },
  {
    "text": "So if you thought about simply\nguessing, that's probably not going to work all that\nwell, right?",
    "start": "397050",
    "end": "404580"
  },
  {
    "text": "Even if you guessed,\nyou have on each-- there's a third of a million\ndifferent configurations that",
    "start": "404580",
    "end": "413830"
  },
  {
    "text": "you have to look at. And that's if you didn't\nlose track of things.",
    "start": "413830",
    "end": "419370"
  },
  {
    "text": "If you lost track of-- Oh, my. It's coming up-- almost, anyway. It looks like it's chopped\noff at the top.",
    "start": "419370",
    "end": "427039"
  },
  {
    "text": "So ignore that for now. Look over here.",
    "start": "427040",
    "end": "432100"
  },
  {
    "text": "So even if you didn't confuse\nyourself, there's a space of a",
    "start": "432100",
    "end": "440270"
  },
  {
    "text": "third of a million things\nto look at. And if you confused yourself,\nthere's even more.",
    "start": "440270",
    "end": "445720"
  },
  {
    "text": "So it's not a huge problem by\ncomputer science standards. But it's certainly not\na trivial problem.",
    "start": "445720",
    "end": "451690"
  },
  {
    "text": "It's not something that you can\njust guess and get right. So what we want to do today is\nfigure out an algorithm for",
    "start": "451690",
    "end": "461790"
  },
  {
    "text": "conducting a search like that. We'd like to figure out the\nalgorithm, analyze how well it",
    "start": "461790",
    "end": "467520"
  },
  {
    "text": "works, optimize it, and try to\nfind out a way to find the",
    "start": "467520",
    "end": "472530"
  },
  {
    "text": "best solution, where \"best\" for\nthis particular problem would mean minimum\npath length.",
    "start": "472530",
    "end": "479090"
  },
  {
    "text": "So figure out the best solution\nby considering as few cases as possible. Obviously, if you enumerate\nall the",
    "start": "479090",
    "end": "484850"
  },
  {
    "text": "cases, that should work. The problem is, it will be\ninteresting to solve problems",
    "start": "484850",
    "end": "490190"
  },
  {
    "text": "where that enumeration\nis quite large. Even here, the enumeration\nis quite large.",
    "start": "490190",
    "end": "495689"
  },
  {
    "text": "So let's think about\nthe algorithm. And I'll think about the\nalgorithm by way of an even simpler, more finite problem.",
    "start": "495690",
    "end": "501790"
  },
  {
    "text": "What if I thought about a grid\nof possible locations where I could be.",
    "start": "501790",
    "end": "507650"
  },
  {
    "text": "Maybe this is the intersections of streets in Manhattan. I want to go from point A\nto point I. What's the",
    "start": "507650",
    "end": "515130"
  },
  {
    "text": "minimum-distance path? I hope you probably can\nall figure that out. What I want to do is write\nan algorithm that",
    "start": "515130",
    "end": "521639"
  },
  {
    "text": "can figure that out. And then if we write the\nalgorithm well, we'll be able to use it for the tile problem,\nwhich is not quite so",
    "start": "521640",
    "end": "527120"
  },
  {
    "text": "easy to do. The way we're going to think\nabout doing that is to",
    "start": "527120",
    "end": "532430"
  },
  {
    "text": "organize all of our possible\npaths through that maze, in a tree.",
    "start": "532430",
    "end": "540140"
  },
  {
    "text": "So if I started at A, I have\na decision to make. I could either go to B or D.",
    "start": "540140",
    "end": "547780"
  },
  {
    "text": "Then if I went to, say, B, I\ncould either then go to A or C",
    "start": "547780",
    "end": "556140"
  },
  {
    "text": "or E. I've organized them\nalphabetically for no particularly good reason. Just-- I needed some order.",
    "start": "556140",
    "end": "564010"
  },
  {
    "text": "Then if I went from A to B to A,\nsay, then I could either go",
    "start": "564010",
    "end": "574260"
  },
  {
    "text": "from A to B or D. That's\nillustrated here. So the idea then--\nah, it works.",
    "start": "574260",
    "end": "580260"
  },
  {
    "text": "So now it looks like they're\nall three working. So the idea is, think about\nthe original problem.",
    "start": "580260",
    "end": "586140"
  },
  {
    "text": "The original problem is\nfind the shortest path through some grid.",
    "start": "586140",
    "end": "591950"
  },
  {
    "text": "I want to go from A to I. And\nI'll think about all the possible paths on a tree.",
    "start": "591950",
    "end": "598649"
  },
  {
    "text": "Then the problem is that for\nthe kinds of problems we're going to look at, that tree\ncould be infinite in length.",
    "start": "598650",
    "end": "608350"
  },
  {
    "text": "Oh, that's a bummer. That means that the strategy of\nbuilding the tree and then searching it is probably\nnot a good strategy.",
    "start": "608350",
    "end": "614910"
  },
  {
    "text": "So what we'll do instead is,\nwe'll try to write the algorithm in such a way that\nwe construct the tree and",
    "start": "614910",
    "end": "622650"
  },
  {
    "text": "search for the best solution\nall in one pass. Then hopefully, if we find a\nsolution in some finite number",
    "start": "622650",
    "end": "629650"
  },
  {
    "text": "of steps, we'll only have\nbuilt part of the tree. But we'll have built the part\nthat has the answer.",
    "start": "629650",
    "end": "637650"
  },
  {
    "text": "The idea, then, is going to be,\nthink about what is the path we want to take, by\nthinking about the tree of all",
    "start": "637650",
    "end": "644130"
  },
  {
    "text": "possible paths. But what we want to do is write\ncode that will construct",
    "start": "644130",
    "end": "651269"
  },
  {
    "text": "the tree on the fly, while it's\nconsidering how good were",
    "start": "651270",
    "end": "657150"
  },
  {
    "text": "all the different nodes. Ok. So how are we going\nto do that?",
    "start": "657150",
    "end": "662820"
  },
  {
    "text": "We'll be working in Python,\nnot surprisingly. We'll represent all the\npossible locations. We'll call those states.",
    "start": "662820",
    "end": "670420"
  },
  {
    "text": "So the problem will have states\nA, B, C, D, and we'll just represent those\nby strings.",
    "start": "670420",
    "end": "677240"
  },
  {
    "text": "That makes it flexible. That makes it arbitrary. Then we'll think about\ntransitions, not by",
    "start": "677240",
    "end": "684440"
  },
  {
    "text": "enumerating them. Remember, we don't want to\nenumerate them, because there could be infinitely\nmany of them. So how's the other way\nwe could do it?",
    "start": "684440",
    "end": "691050"
  },
  {
    "text": "Well, we'll embody that\ninformation in a program. We'll write a procedure called\n\"successor\" that will, given",
    "start": "691050",
    "end": "698779"
  },
  {
    "text": "the current state and action,\nfigure out the next state.",
    "start": "698780",
    "end": "705730"
  },
  {
    "text": "So that's a way that we can\nincrementally build the tree. So imagine here, if I started\nin A and I executed action 0",
    "start": "705730",
    "end": "718383"
  },
  {
    "text": "or 1, I would end up in\nB or D, respectively. So I tell you the current state\nand the current action,",
    "start": "718383",
    "end": "726630"
  },
  {
    "text": "and the successor program\nthen will return to you the new state.",
    "start": "726630",
    "end": "732420"
  },
  {
    "text": "That's all we need to construct\nthe tree on the fly.",
    "start": "732420",
    "end": "737730"
  },
  {
    "text": "Then, to specify the particular\nproblem with interest, I have to tell\nyou where you start.",
    "start": "737730",
    "end": "743400"
  },
  {
    "text": "So I have to define\ninitial state. And I have to tell\nyou where to end.",
    "start": "743400",
    "end": "750250"
  },
  {
    "text": "I could just tell you\nthe final state. But in some of the problems of\nthe type that we will want to",
    "start": "750250",
    "end": "755310"
  },
  {
    "text": "do, there could be multiple\nacceptable answers. So I don't want to just give\nyou the final state.",
    "start": "755310",
    "end": "762630"
  },
  {
    "text": "I'll give you a test. I'll give you another procedure,\ncalled \"goalTest.\"",
    "start": "762630",
    "end": "768550"
  },
  {
    "text": "And that goal test, when passed\nan input which is a state, will tell you whether or\nnot you reached the goal.",
    "start": "768550",
    "end": "774410"
  },
  {
    "text": "That way, for example, all the\neven-numbered squares could satisfy the goal, if that were\nthe problem of interest.",
    "start": "774410",
    "end": "780000"
  },
  {
    "text": "Or all the states on the right\ncould satisfy the goal. It's just a little bit\nmore flexible.",
    "start": "780000",
    "end": "786520"
  },
  {
    "text": "The idea, then, is that in order\nto represent that tree,",
    "start": "786520",
    "end": "792620"
  },
  {
    "text": "we'll do it by specifying a\nprocedure called successor and",
    "start": "792620",
    "end": "798050"
  },
  {
    "text": "specifying the start state\nand the goal test. So here's how I might set that\nup for the simple Manhattan",
    "start": "798050",
    "end": "807670"
  },
  {
    "text": "problem that I showed--\nthat I started with. So I want ultimately to have\nsomething called successor",
    "start": "807670",
    "end": "814550"
  },
  {
    "text": "that eats a state\nand an action. ",
    "start": "814550",
    "end": "819560"
  },
  {
    "text": "I've built the structure of\nManhattan into a dictionary.",
    "start": "819560",
    "end": "826370"
  },
  {
    "text": "The dictionary lists\nfor every state-- A, B, C, D, E, F, G, H, I--",
    "start": "826370",
    "end": "835940"
  },
  {
    "text": "for every state, it associates\nthat state with a list of possible next states.",
    "start": "835940",
    "end": "842490"
  },
  {
    "text": "So if I'm in A, I could next be\nin B or D. I could next be in B or D.",
    "start": "842490",
    "end": "850330"
  },
  {
    "text": "I've organized these arbitrarily\nin alphabetical order so I can remember\nwhat's going on. So the next states are all\nin alphabetical order.",
    "start": "850330",
    "end": "857970"
  },
  {
    "text": "The number of next states\ndepends on the state. I'm not going to worry\nabout that too much.",
    "start": "857970",
    "end": "863530"
  },
  {
    "text": "I'm just going to specify the\naction as an integer-- 0,1,2,3 --",
    "start": "863530",
    "end": "869290"
  },
  {
    "text": "however many I need. So the possible actions are\ntaken from that list.",
    "start": "869290",
    "end": "875000"
  },
  {
    "text": "The possible action might be\ndo action 0, do action 1, do action 2. So if I did action 2 starting\non state E, I would go to--",
    "start": "875000",
    "end": "887500"
  },
  {
    "text": "so action started at 0 -- so 0, 1, 2 -- I would go to state F. OK?",
    "start": "887500",
    "end": "894330"
  },
  {
    "text": "Is that all clear? The initial state is A, and the\ngoal state is, return S",
    "start": "894330",
    "end": "900519"
  },
  {
    "text": "equal to I. So if S is equal\nto I, it returns True. If S is not equal to I,\nit returns False.",
    "start": "900520",
    "end": "906140"
  },
  {
    "text": " I'm not quite done.",
    "start": "906140",
    "end": "911430"
  },
  {
    "text": "That's enough to completely\nspecify the tree, but now I have to build the\ntree in Python. ",
    "start": "911430",
    "end": "918050"
  },
  {
    "text": "Not surprisingly, from our\nobject-oriented past, we will use an object-oriented\nrepresentation for that tree.",
    "start": "918050",
    "end": "929000"
  },
  {
    "text": "So we'll specify every node in\nthe tree as an instance of the class SearchNode.",
    "start": "929000",
    "end": "936230"
  },
  {
    "text": "SearchNode is trivial. SearchNode simply knows,\nwhat was the action that got me here?",
    "start": "936230",
    "end": "942139"
  },
  {
    "text": "Who's my parent? And what's my current state? So when you make a new node,\nyou have to tell the",
    "start": "942140",
    "end": "949089"
  },
  {
    "text": "constructor those\nthree things. What was the action\nthat got me here?",
    "start": "949090",
    "end": "954290"
  },
  {
    "text": "What's my current state? And who is my parent?  Knowing the node, you're\nsupposed to know the entire",
    "start": "954290",
    "end": "963279"
  },
  {
    "text": "path that got you here. So we'll also add a method\nwhich reports the path.",
    "start": "963280",
    "end": "970420"
  },
  {
    "text": "So if I happen to be in node\nE, my path ought to be I",
    "start": "970420",
    "end": "975750"
  },
  {
    "text": "started in A, I took action 0\nand got to B, and then I took action 2 and got to E.\nThis subroutine is",
    "start": "975750",
    "end": "985360"
  },
  {
    "text": "intended to do that. If my parent is \"none,\" which\nwill happen for the initial",
    "start": "985360",
    "end": "991230"
  },
  {
    "text": "state, simply report that the\npath to me is none, A.",
    "start": "991230",
    "end": "1001060"
  },
  {
    "text": "However, if I'm anybody other\nthan the initial node, if I'm",
    "start": "1001060",
    "end": "1007460"
  },
  {
    "text": "other than the initial node,\nthen figure out the description of the path to my\nparent, and add the action",
    "start": "1007460",
    "end": "1018280"
  },
  {
    "text": "that got me here,\nand my state. So that's what this is.",
    "start": "1018280",
    "end": "1024790"
  },
  {
    "text": "OK, so what are we doing? We specify a problem by telling\nyou the successor",
    "start": "1024790",
    "end": "1029849"
  },
  {
    "text": "function, the start state,\nand the goal test. Then we provide a class by which\nyou can build nodes to",
    "start": "1029849",
    "end": "1040020"
  },
  {
    "text": "construct, on the fly,\nthe search tree.",
    "start": "1040020",
    "end": "1046010"
  },
  {
    "text": "Now we're ready to write\nthe algorithm. Here's the pseudocode\nfor the algorithm. What do we do?",
    "start": "1046010",
    "end": "1051150"
  },
  {
    "text": "We initialize-- so we're going to be\ndoing a s-- oh, this is very confusing.",
    "start": "1051150",
    "end": "1056270"
  },
  {
    "text": "I'm trying to solve\na search problem.  To solve the search problem,\nI'm going to",
    "start": "1056270",
    "end": "1062210"
  },
  {
    "text": "search through the tree. So I'm going to think about the\nstate of my search through",
    "start": "1062210",
    "end": "1068559"
  },
  {
    "text": "the tree by way of something\nwe'll call the agenda.",
    "start": "1068560",
    "end": "1073870"
  },
  {
    "text": "Very jargon-y word. I completely apologize for it. I didn't invent it. It's what everybody calls it.",
    "start": "1073870",
    "end": "1079630"
  },
  {
    "text": "Sorry. ",
    "start": "1079630",
    "end": "1085870"
  },
  {
    "text": "The agenda is the set\nof nodes that I'm currently thinking about.",
    "start": "1085870",
    "end": "1092919"
  },
  {
    "text": "So I'll initialize that to\ncontain the starting node. ",
    "start": "1092920",
    "end": "1098990"
  },
  {
    "text": "Then I'll just systematically\nkeep repeating the same thing over and over again.",
    "start": "1098990",
    "end": "1104740"
  },
  {
    "text": "Take one of the nodes out of\nthe agenda, think about it, replace that node\nby its children.",
    "start": "1104740",
    "end": "1112960"
  },
  {
    "text": "While I'm doing that, two things\nare supposed to happen. I'm supposed to construct\nthe search tree.",
    "start": "1112960",
    "end": "1120179"
  },
  {
    "text": "But I'm also going to be looking\nover my shoulder to see if I just constructed a\nchild who is the answer.",
    "start": "1120180",
    "end": "1129970"
  },
  {
    "text": "Because if I just constructed\nthe answer, I'm done. Ok. So initialize the agenda\nto contain just",
    "start": "1129970",
    "end": "1137150"
  },
  {
    "text": "the starting node. Then repeat the following\nsteps. Remove one node from\nthe agenda. Add that node's children\nto the agenda.",
    "start": "1137150",
    "end": "1143830"
  },
  {
    "text": "And keep going until one\nof two things happens. Either you found it-- goal test returned True--",
    "start": "1143830",
    "end": "1153210"
  },
  {
    "text": "or the agenda got empty,\nin which case there must not be a solution.",
    "start": "1153210",
    "end": "1159310"
  },
  {
    "text": "If I've removed all of my\noptions and still haven't found anything, then there's\nno solution. ",
    "start": "1159310",
    "end": "1165800"
  },
  {
    "text": "Ok. So what's the program\nlook like? It's actually remarkably simple,\nespecially when you think about just how hard\nthe problem is.",
    "start": "1165800",
    "end": "1171780"
  },
  {
    "text": "Imagine if you wanted to do that\ntiles problem with a very",
    "start": "1171780",
    "end": "1177450"
  },
  {
    "text": "simple-minded \"if this then\nthis, if this then this.\" We're talking about a third\nof a million ifs, right?",
    "start": "1177450",
    "end": "1184420"
  },
  {
    "text": "That's probably not the\nright way to do it. This program is going to end\nup being about this long.",
    "start": "1184420",
    "end": "1189640"
  },
  {
    "text": "It'll fit on this page. And it's going to be able to\nhandle that case, or even harder cases.",
    "start": "1189640",
    "end": "1196580"
  },
  {
    "text": "Define the search procedure. The search procedure is\nsomething that's going to take the initial state, the goal\ntest, the possible actions,",
    "start": "1196580",
    "end": "1202870"
  },
  {
    "text": "and the successor sub routine,\nthe successor procedure. That's everything you need\nto specify the problem.",
    "start": "1202870",
    "end": "1209700"
  },
  {
    "text": "And it's going to return\nto me the optimal path. ",
    "start": "1209700",
    "end": "1215520"
  },
  {
    "text": "First, step (1). Initialize the agenda to\ncontain the start node.",
    "start": "1215520",
    "end": "1221320"
  },
  {
    "text": "I want to put the\nstart node in. Well, there's a chance-- I want this procedure to\nbe general purpose--",
    "start": "1221320",
    "end": "1226350"
  },
  {
    "text": "there's a chance that that\nstart node is the answer. So take care of that first.",
    "start": "1226350",
    "end": "1232150"
  },
  {
    "text": " If you're already there,\nreturn the answer.",
    "start": "1232150",
    "end": "1238460"
  },
  {
    "text": "The path to the answer is me. ",
    "start": "1238460",
    "end": "1244080"
  },
  {
    "text": "I'm trying to create\nthe agenda. I'm trying to put the first\nnode into the agenda. There's a chance that first\nnode is the answer.",
    "start": "1244080",
    "end": "1251039"
  },
  {
    "text": "If that first node's the answer,\nreturn the path to me. Which is, take no action. You're here.",
    "start": "1251040",
    "end": "1256960"
  },
  {
    "text": " But that's not likely to be\nthe case for the kinds of questions we ask, in which case\nwe will create a list",
    "start": "1256960",
    "end": "1264430"
  },
  {
    "text": "that contains one node, which\nis the node that represents the start node. ",
    "start": "1264430",
    "end": "1272780"
  },
  {
    "text": "Then, repeat 'remove\na node' -- which we'll call the parent--",
    "start": "1272780",
    "end": "1277890"
  },
  {
    "text": "from the agenda. And substitute -- replace that node that we pulled\nout of the agenda --",
    "start": "1277890",
    "end": "1286590"
  },
  {
    "text": "replace that with\nthe children. While not empty of agenda--",
    "start": "1286590",
    "end": "1292180"
  },
  {
    "text": "empty is some kind of a\npseudo-routine that I'm going to fill in, in a minute-- while the agenda is not empty,\nget an element out of the",
    "start": "1292180",
    "end": "1300600"
  },
  {
    "text": "agenda, which we'll\ncall the parent.  Then I want to think about\nall the children.",
    "start": "1300600",
    "end": "1308889"
  },
  {
    "text": "Well, there's a list of\npossible actions. So for a in actions, do\nthe following things.",
    "start": "1308890",
    "end": "1314620"
  },
  {
    "text": "Each parent can have multiple\nchildren, one for every possible action. So for a in action, figure out\nwhat would be the new state.",
    "start": "1314620",
    "end": "1323840"
  },
  {
    "text": "The new state is just the\nsuccessor of the parent state.",
    "start": "1323840",
    "end": "1330370"
  },
  {
    "text": "Remember, the parent\nis a node, right? The parent is a node. We're constructing nodes\nin the search tree.",
    "start": "1330370",
    "end": "1337890"
  },
  {
    "text": "But nodes know their state. So figure out the new state,\nwhich is the successor of my",
    "start": "1337890",
    "end": "1344789"
  },
  {
    "text": "parent, the guy that I pulled\nout of the agenda. ",
    "start": "1344790",
    "end": "1350289"
  },
  {
    "text": "Make a new node, which\ncorresponds to this child.",
    "start": "1350290",
    "end": "1356300"
  },
  {
    "text": "Then ask the question,\ndid the new state satisfy the goal test?",
    "start": "1356300",
    "end": "1362500"
  },
  {
    "text": "If it did, the answer is the\npath to the new node. ",
    "start": "1362500",
    "end": "1369410"
  },
  {
    "text": "Ok. So create a new state, which is\nthe successor of the parent under the given action\nA. Create a new node.",
    "start": "1369410",
    "end": "1377070"
  },
  {
    "text": "See if it's the end. If it is, just return,\nI'm done. Return from search.",
    "start": "1377070",
    "end": "1384100"
  },
  {
    "text": "Otherwise, add it-- again, one\nof these pseudo-procedures. ",
    "start": "1384100",
    "end": "1390890"
  },
  {
    "text": "We'll fill that in,\nin a minute-- add the new node into\nthe agenda. ",
    "start": "1390890",
    "end": "1397670"
  },
  {
    "text": "There's several things\nthat could happen when I run this loop. If the node has no children, I\nwill take out the parent and",
    "start": "1397670",
    "end": "1406799"
  },
  {
    "text": "not put anything back in. If the node has multiple\nchildren, I could take out one",
    "start": "1406800",
    "end": "1415700"
  },
  {
    "text": "node and put in more nodes than\nI took out, so the agenda could get longer.",
    "start": "1415700",
    "end": "1421260"
  },
  {
    "start": "1421260",
    "end": "1426990"
  },
  {
    "text": "So the agenda could either\nincrease in length or decrease in length as a result of\nspinning around this loop.",
    "start": "1426990",
    "end": "1433320"
  },
  {
    "text": " Also, we could either identify\na goal or fail",
    "start": "1433320",
    "end": "1439740"
  },
  {
    "text": "to identify a goal. So as it's increasing and\ndecreasing, we either will or",
    "start": "1439740",
    "end": "1445500"
  },
  {
    "text": "won't find an answer.  Ok. Now the trick--",
    "start": "1445500",
    "end": "1451450"
  },
  {
    "text": "the only thing that makes\nthis complicated-- is that order matters. ",
    "start": "1451450",
    "end": "1459600"
  },
  {
    "text": "So those pseudo-operations,\nwhatever they were--",
    "start": "1459600",
    "end": "1464980"
  },
  {
    "text": "get element and add-- exactly how I get element and\nexactly how I add it to the",
    "start": "1464980",
    "end": "1472110"
  },
  {
    "text": "agenda affects the way\nI conduct the search. ",
    "start": "1472110",
    "end": "1478820"
  },
  {
    "text": "Let's think of something\nvery simple. Let's always remove the first\nnode from the agenda and",
    "start": "1478820",
    "end": "1488550"
  },
  {
    "text": "replace it by its children. So pull out the first node.",
    "start": "1488550",
    "end": "1494309"
  },
  {
    "text": "And put back into the beginning\nof the agenda the children of the first node. How?",
    "start": "1494310",
    "end": "1499500"
  },
  {
    "text": "I would start out in step (0). I would put the start node\ninto the agenda.",
    "start": "1499500",
    "end": "1506070"
  },
  {
    "text": "So now there's one element in\nthe agenda, the start node. Then, on the first pass\nthrough the loop, I",
    "start": "1506070",
    "end": "1511840"
  },
  {
    "text": "would pull out that. That's the first node\nin the agenda.",
    "start": "1511840",
    "end": "1516929"
  },
  {
    "text": "There's only one node\nin the agenda. That is the first one. Pull out the first one and\nreplace it by its children.",
    "start": "1516930",
    "end": "1523620"
  },
  {
    "text": "Its children are AB and AD. I'm representing the nodes in\nthis notation by the path,",
    "start": "1523620",
    "end": "1533510"
  },
  {
    "text": "because the same state\ncan appear multiple times in the tree.",
    "start": "1533510",
    "end": "1540150"
  },
  {
    "text": "Notice that I could\nwalk ABAB -- which would correspond to\nthe same state being",
    "start": "1540150",
    "end": "1546970"
  },
  {
    "text": "repeated in the tree. So I can't, when I'm writing\nit down here, represent the",
    "start": "1546970",
    "end": "1553130"
  },
  {
    "text": "node by a state. But I can represent\na node by a path.",
    "start": "1553130",
    "end": "1560230"
  },
  {
    "text": "So on the first pass through the\nloop, pull out the first item in the agenda, which\nis A, and push",
    "start": "1560230",
    "end": "1568389"
  },
  {
    "text": "back that A's children. Well A's children\nare AB and AD.",
    "start": "1568390",
    "end": "1576150"
  },
  {
    "text": "Ok. So now on the second pass, the\nrule is pull out the first guy and replace it by\nthe children.",
    "start": "1576150",
    "end": "1583419"
  },
  {
    "text": "Now the first guy is AB. So I'm here. So pull that guy out and replace\nhim by his children.",
    "start": "1583420",
    "end": "1592310"
  },
  {
    "text": "His children are ABA,\nABC, and ABE.",
    "start": "1592310",
    "end": "1597940"
  },
  {
    "text": "AD is left over. The number of elements in\nthe agenda got bigger.",
    "start": "1597940",
    "end": "1603610"
  },
  {
    "text": " Next step, pull out the first\nitem in the agenda, replace it",
    "start": "1603610",
    "end": "1611120"
  },
  {
    "text": "by its children. The first item in the\nagenda is ABA. ",
    "start": "1611120",
    "end": "1617340"
  },
  {
    "text": "The children of ABA\nare ABAB and ABAD.",
    "start": "1617340",
    "end": "1622497"
  },
  {
    "text": " Ok. Notice the structure\nof what's going on.",
    "start": "1622498",
    "end": "1629490"
  },
  {
    "text": "Ignore the stuff on the bottom,\nand just watch the picture on the top. So I start by putting A in the\nagenda, then its children,",
    "start": "1629490",
    "end": "1636200"
  },
  {
    "text": "then its children, then\nits children. So when I implemented\nthe algorithm--",
    "start": "1636200",
    "end": "1641500"
  },
  {
    "text": "take out the first and replace\nit by its children-- I'm searching along\nthe depth first.",
    "start": "1641500",
    "end": "1648080"
  },
  {
    "text": "I'm going deeper and deeper into\nthe tree without fully exploring all the horizontal\nspaces.",
    "start": "1648080",
    "end": "1656620"
  },
  {
    "text": "So I'm tracing a line\ndown that way. If you imagine this tree--",
    "start": "1656620",
    "end": "1662970"
  },
  {
    "text": "I've only represented the first\nthree layers of nodes here-- this tree goes\non forever.",
    "start": "1662970",
    "end": "1668770"
  },
  {
    "text": "It's an infinite tree, because\nyou can walk around in that Manhattan grid forever.",
    "start": "1668770",
    "end": "1674140"
  },
  {
    "text": "There's no limit to how long\nyou can walk around. So although I'm only listing the\nfirst three, the tree, in",
    "start": "1674140",
    "end": "1682280"
  },
  {
    "text": "principle, goes on forever. And this algorithm will have\nthe feature that it walks",
    "start": "1682280",
    "end": "1688930"
  },
  {
    "text": "along the left edge. We call that depth-first search\nbecause we're exploring",
    "start": "1688930",
    "end": "1697350"
  },
  {
    "text": "depth first, as opposed\nto breadth. ",
    "start": "1697350",
    "end": "1703500"
  },
  {
    "text": "That results because\nof our rule. The rule was, replace the first\nnode by its children. Let's think about a\ndifferent rule.",
    "start": "1703500",
    "end": "1710260"
  },
  {
    "text": "Let's replace the last\nnode by its children. ",
    "start": "1710260",
    "end": "1718320"
  },
  {
    "text": "We start by initializing the\nagenda to the node that represents the start state.",
    "start": "1718320",
    "end": "1725320"
  },
  {
    "text": "So that's the path A.\nThen pull out the",
    "start": "1725320",
    "end": "1730830"
  },
  {
    "text": "last node in the agenda-- that's A-- and replace it by\nits children.",
    "start": "1730830",
    "end": "1737480"
  },
  {
    "text": "Its children are still AB and\nAD, just like before.  Now the answer differs from\nthe previous answer.",
    "start": "1737480",
    "end": "1744770"
  },
  {
    "text": "Because when I pull out the last\nnode, I'm pulling out AD now, instead.",
    "start": "1744770",
    "end": "1749930"
  },
  {
    "text": " And now I replace AD by\nits children, which",
    "start": "1749930",
    "end": "1756159"
  },
  {
    "text": "are ADA, ADE, ADG. ",
    "start": "1756160",
    "end": "1762900"
  },
  {
    "text": "Repeat, and what I've got is\na different, but still",
    "start": "1762900",
    "end": "1768480"
  },
  {
    "text": "depth-first search. So I've looked at two different\norderings--",
    "start": "1768480",
    "end": "1773680"
  },
  {
    "text": "pull out the first node from the\nagenda and replace it by children, pull out\nthe last node and",
    "start": "1773680",
    "end": "1779190"
  },
  {
    "text": "replace it by its children. Both of those algorithms give an\nexploration of the decision",
    "start": "1779190",
    "end": "1787320"
  },
  {
    "text": "tree searching out\ndepth first. So it's going to try to\nexhaustively go through the",
    "start": "1787320",
    "end": "1794059"
  },
  {
    "text": "entire depth before it tries\nto explore the width. ",
    "start": "1794060",
    "end": "1801510"
  },
  {
    "text": "As an alternative, think\nabout a slightly more complicated rule. Remove the first element from\nthe agenda and add its",
    "start": "1801510",
    "end": "1808290"
  },
  {
    "text": "children to the end\nof the agenda. ",
    "start": "1808290",
    "end": "1813350"
  },
  {
    "text": "So initialize it with the start\nstate, A. Pull out the",
    "start": "1813350",
    "end": "1819330"
  },
  {
    "text": "first element from the\nagenda-- that's A-- and replace it by its children,\nwhich is AB, AD.",
    "start": "1819330",
    "end": "1826500"
  },
  {
    "text": "Now pull out the first guy-- the first guy is AB-- and put its children\nat the end.",
    "start": "1826500",
    "end": "1835600"
  },
  {
    "text": "It's children are\nABA, ABC, ABE-- ABA, ABC, ABE--",
    "start": "1835600",
    "end": "1841480"
  },
  {
    "text": "and they are now\nput at the end. So that on the next step, I'll\npick up AD-- the guy at the",
    "start": "1841480",
    "end": "1848650"
  },
  {
    "text": "beginning--  and put AD's children\nat the end.",
    "start": "1848650",
    "end": "1854940"
  },
  {
    "text": "et cetera, et cetera, et\ncetera, et cetera, et cetera, et cetera. The idea being-- and now, pay no\nattention to the bottom for",
    "start": "1854940",
    "end": "1862240"
  },
  {
    "text": "a moment and just think\nabout the pattern that you see at the top. In this order, where we remove\nthe first node and put its",
    "start": "1862240",
    "end": "1871640"
  },
  {
    "text": "children at the end of the\nagenda, has the effect of exploring breadth first.",
    "start": "1871640",
    "end": "1877210"
  },
  {
    "start": "1877210",
    "end": "1882260"
  },
  {
    "text": "So we call that a\nbreadth-first. so the idea is, we got this\ngeneric set of tools that let",
    "start": "1882260",
    "end": "1889880"
  },
  {
    "text": "us construct search trees. But the order by which we\nmanipulate the agenda plays a",
    "start": "1889880",
    "end": "1895630"
  },
  {
    "text": "critical role in how the\nsearch is conducted.",
    "start": "1895630",
    "end": "1901210"
  },
  {
    "text": "And the two that epitomize the\ntwo extreme cases are, what",
    "start": "1901210",
    "end": "1907100"
  },
  {
    "text": "would happen if I replace the\nlast node by its children? Or what would happen if I remove\nthe first node and put",
    "start": "1907100",
    "end": "1914460"
  },
  {
    "text": "its children's at the end? Those two structures\nhave names because they happen so often.",
    "start": "1914460",
    "end": "1920110"
  },
  {
    "text": "We'll call the first\none a stack and the second one a queue. The stack-based is going\nto give us depth first.",
    "start": "1920110",
    "end": "1927970"
  },
  {
    "text": "The queue-based is going to\ngive us breadth first. So, stack. How do you think\nabout a stack?",
    "start": "1927970",
    "end": "1935270"
  },
  {
    "text": "You think about a stack by\nsaying, OK, I've got a stack. A stack is like a\nstack of dishes.",
    "start": "1935270",
    "end": "1941080"
  },
  {
    "text": "So here's my table, and I'm\ngoing to rack my dishes up. I'm going to put them\non a stack.",
    "start": "1941080",
    "end": "1946870"
  },
  {
    "text": " So I make a stack. OK, I made the stack-- push a 1, push a 9, push a 3.",
    "start": "1946870",
    "end": "1953590"
  },
  {
    "text": "Push a 1, push a 9, push a 3. That's how I do a stack.",
    "start": "1953590",
    "end": "1959370"
  },
  {
    "text": "Then pop. When I pop, the 3 comes out.",
    "start": "1959370",
    "end": "1965920"
  },
  {
    "text": "Then pop, then the\n9 comes out. Then push a minus 2.",
    "start": "1965920",
    "end": "1973059"
  },
  {
    "text": " Then pop. Now the minus 2 comes out.",
    "start": "1973060",
    "end": "1980850"
  },
  {
    "text": "OK? It's stack-based. So the last in becomes\nthe first out.",
    "start": "1980850",
    "end": "1990029"
  },
  {
    "text": "That was the rule that we\nwanted to have for the depth-first search.",
    "start": "1990030",
    "end": "1997460"
  },
  {
    "text": "It's very easy to\nimplement this. We can implement it as a list. All we need to do is be careful\nabout how we implement",
    "start": "1997460",
    "end": "2006230"
  },
  {
    "text": "the push and pop operators. So if we set up the push\noperator to simply append to",
    "start": "2006230",
    "end": "2014120"
  },
  {
    "text": "the end, and then pop ordinarily\npops from the end,",
    "start": "2014120",
    "end": "2019700"
  },
  {
    "text": "we'll get the behavior\nof a stack. That gives me, then, the rules\nthat I would want to use for",
    "start": "2019700",
    "end": "2025179"
  },
  {
    "text": "those procedures, the\nget element an add. I will use these stack-based\noperators.",
    "start": "2025180",
    "end": "2035040"
  },
  {
    "text": "The other alternative\nis a queue. A queue is different. A queue is like when you're\nwaiting in line",
    "start": "2035040",
    "end": "2041390"
  },
  {
    "text": "at the Stop & Shop. The queue is, I've got this\nqueue here and I've got the",
    "start": "2041390",
    "end": "2048500"
  },
  {
    "text": "server over here.  The first person who comes\ninto the queue--",
    "start": "2048500",
    "end": "2054849"
  },
  {
    "text": "so say I push one. So now 1 goes into the queue. Then another person walks\nup while he's--",
    "start": "2054850",
    "end": "2062010"
  },
  {
    "text": "the second person lines up\nbehind the first person. Then I push a 3.",
    "start": "2062010",
    "end": "2070169"
  },
  {
    "text": "But the way the queue works is\nthat when I pop the next person off the queue, I take\nthe head of the line.",
    "start": "2070170",
    "end": "2078388"
  },
  {
    "text": "So the 1 comes out.  If I pop again, the\n9 comes out.",
    "start": "2078389",
    "end": "2084879"
  },
  {
    "text": " If I then push a minus 2 and\npop, then the next person in",
    "start": "2084880",
    "end": "2097410"
  },
  {
    "text": "the queue comes out. And it's like that. It's queue based versus\nstack based.",
    "start": "2097410",
    "end": "2104000"
  },
  {
    "text": "And the queue based is the one\nthat we want to do for a breadth-first organization.",
    "start": "2104000",
    "end": "2109873"
  },
  {
    "text": " And the implementation of a\nqueue is very trivially",
    "start": "2109873",
    "end": "2116300"
  },
  {
    "text": "different from the\nimplementation for a stack. The only difference is that I'll\nmanipulate the list by",
    "start": "2116300",
    "end": "2122690"
  },
  {
    "text": "popping off from the\nhead of the queue. So pop takes an optional\nargument, which when",
    "start": "2122690",
    "end": "2129950"
  },
  {
    "text": "0, tells you the-- the argument tells you\nwhich element to pop. So when you specify the zero-th\none, it takes it from",
    "start": "2129950",
    "end": "2136530"
  },
  {
    "text": "the head of the queue. That makes it very easy now to\nreplace the pseudo-procedures",
    "start": "2136530",
    "end": "2145460"
  },
  {
    "text": "with real procedures. If I wanted to implement a\ndepth-first search, I would",
    "start": "2145460",
    "end": "2152670"
  },
  {
    "text": "replace the \"create a list that\ncontains the agenda\" with",
    "start": "2152670",
    "end": "2157829"
  },
  {
    "text": "\"create a stack that will\ncontain the agenda.\" So create",
    "start": "2157830",
    "end": "2164400"
  },
  {
    "text": "a new stack, the agenda\nis a stack. And then rather than simply\nsticking the node--",
    "start": "2164400",
    "end": "2171900"
  },
  {
    "text": "the start node-- into a list, I will push\nit into the stack.",
    "start": "2171900",
    "end": "2179020"
  },
  {
    "text": "So agenda is a stack. Agenda.push, the initial node.",
    "start": "2179020",
    "end": "2185560"
  },
  {
    "text": "And then every time I want to\nget a new element out, I'll agenda.pop it.",
    "start": "2185560",
    "end": "2191080"
  },
  {
    "text": "And every time I want to put\nsomething into it, I'll agenda.push it. Other than that, it looks just\nthe same as the pseudocode",
    "start": "2191080",
    "end": "2200150"
  },
  {
    "text": "that I showed earlier. So there is an implementation,\nthen, for",
    "start": "2200150",
    "end": "2205982"
  },
  {
    "text": "a depth-first search. If I wanted instead to do\nbreadth, it's trivial.",
    "start": "2205982",
    "end": "2213990"
  },
  {
    "text": "Change the word \"stack\" to the\nword \"queue.\" Now create an",
    "start": "2213990",
    "end": "2219640"
  },
  {
    "text": "agenda that is a queue, but\nqueues have the same",
    "start": "2219640",
    "end": "2225059"
  },
  {
    "text": "operations-- push and pop and empty-- that stacks have.",
    "start": "2225060",
    "end": "2230839"
  },
  {
    "text": "So nothing else in the\nprogram changed. All I needed to do is change\nthe structure of the thing",
    "start": "2230840",
    "end": "2236470"
  },
  {
    "text": "that's holding the agenda. Everything else just follows. ",
    "start": "2236470",
    "end": "2247700"
  },
  {
    "text": "Ok. So that's everything\nwe need, right? Now what I want to do is think\nthrough examples and think about the advantages and\ndisadvantages of different",
    "start": "2247700",
    "end": "2253829"
  },
  {
    "text": "kinds of searches. And I want to go on to the\nsecond step that I raised in the first slide.",
    "start": "2253830",
    "end": "2260730"
  },
  {
    "text": "I want to think about, how\ndo I optimize the search? As I said, even that simple\nlittle tile problem, even the",
    "start": "2260730",
    "end": "2266290"
  },
  {
    "text": "eight puzzle-- eight sounds easy, right? Even the eight puzzle\nhad a third of a",
    "start": "2266290",
    "end": "2272990"
  },
  {
    "text": "million different states. I don't necessarily want to\nlook through all of them. I want to think now about\nthese different search",
    "start": "2272990",
    "end": "2279100"
  },
  {
    "text": "strategies, and how optimal\nare they relative to each other, and are there ways\nto improve that?",
    "start": "2279100",
    "end": "2285320"
  },
  {
    "text": "Now some of you may have noticed\nthat all of these",
    "start": "2285320",
    "end": "2290910"
  },
  {
    "text": "paths don't seem equally good. So take a minute.",
    "start": "2290910",
    "end": "2296220"
  },
  {
    "text": "Think about it. Remember the problem. The problem was this walk around\nManhattan problem.",
    "start": "2296220",
    "end": "2302540"
  },
  {
    "text": "I wanted to go from A to I.\nThis was the tree of all possible paths from A to I.\nWhat I'd like you to do is",
    "start": "2302540",
    "end": "2310640"
  },
  {
    "text": "think about whether all of those\npaths are important.",
    "start": "2310640",
    "end": "2315779"
  },
  {
    "text": "Could we get rid of\nsome of them? ",
    "start": "2315780",
    "end": "2452820"
  },
  {
    "text": "So the question is, can I\nthrow away some of the terminal nodes? Notice that I'm using the word\n\"terminal\" kind of funny here. The tree keeps going.",
    "start": "2452820",
    "end": "2460550"
  },
  {
    "text": "The tree is actually\ninfinite in length. So by \"terminal,\" I just\nmean this row three.",
    "start": "2460550",
    "end": "2466180"
  },
  {
    "text": "So could I throw away some of\nthe nodes in row three? And in particular, how many of\nthem could I throw away?",
    "start": "2466180",
    "end": "2472410"
  },
  {
    "text": "0, 2, 4, 6, or 8? or Raise your hand with\nthe funny coding.",
    "start": "2472410",
    "end": "2479540"
  },
  {
    "text": "And the answer is-- come on, come on. Raise your hands, raise\nyour hands. Blame it on your neighbor.",
    "start": "2479540",
    "end": "2485690"
  },
  {
    "text": "That's the whole point. OK, it's 2/3 (5) and 1/3 (4)",
    "start": "2485690",
    "end": "2495870"
  },
  {
    "text": "How'd you get (5) and (4)?  Yes?",
    "start": "2495870",
    "end": "2502286"
  },
  {
    "text": "AUDIENCE: When you have that\n[INAUDIBLE] nodes, you may know that there's\n[? a procedure ?] [INAUDIBLE] before.",
    "start": "2502286",
    "end": "2508130"
  },
  {
    "text": "PROFESSOR: Good. If you're walking around\nManhattan, and you're trying to go from A to I, and if you\nspun around in this loop and",
    "start": "2508130",
    "end": "2517589"
  },
  {
    "text": "came back to A, that would\nprobably be a bad path, right?",
    "start": "2517590",
    "end": "2523000"
  },
  {
    "text": "So revisiting a place you've\nbeen before is probably a bad",
    "start": "2523000",
    "end": "2529070"
  },
  {
    "text": "idea, if what your goal was, was\nto get from A to I in the shortest possible distance.",
    "start": "2529070",
    "end": "2537030"
  },
  {
    "text": "So that's exactly right. So I would like to identify\ninstances where I go back to",
    "start": "2537030",
    "end": "2543360"
  },
  {
    "text": "where I started. So for example, that\nA. That A is bad. That means I went back\nto the start place.",
    "start": "2543360",
    "end": "2550200"
  },
  {
    "text": "I'm just starting over. So if I think about those, I\ncan identify by red all the",
    "start": "2550200",
    "end": "2557430"
  },
  {
    "text": "places where I'm repeating. So ABA, don't really care\nwhat happens after that.",
    "start": "2557430",
    "end": "2564380"
  },
  {
    "text": "ABCB, well, that's B again. So that's just brain\ndead, right?",
    "start": "2564380",
    "end": "2569900"
  },
  {
    "text": "So I can actually remove a fair\namount of the tree by",
    "start": "2569900",
    "end": "2575440"
  },
  {
    "text": "simply getting rid\nof silliness. Don't start the path over again,\nwhere \"over\" means if",
    "start": "2575440",
    "end": "2585540"
  },
  {
    "text": "you come to a place you've\nbeen before, stop looking there. That's not the right answer.",
    "start": "2585540",
    "end": "2592320"
  },
  {
    "text": "And so you can see there\nthat I actually deleted half of the tree.",
    "start": "2592320",
    "end": "2598740"
  },
  {
    "text": "The number of nodes on the\nthird line was 16. And 8 of them had the property\nthat they repeated.",
    "start": "2598740",
    "end": "2604870"
  },
  {
    "text": "Yes? AUDIENCE: [INAUDIBLE] [? after D. ?] Are you [INAUDIBLE]? PROFESSOR: This B and D. So\nthere's no reason to consider",
    "start": "2604870",
    "end": "2613234"
  },
  {
    "text": "this D, even though the\nD didn't repeat. AUDIENCE: That would\nbe [? AD? ?]",
    "start": "2613234",
    "end": "2620674"
  },
  {
    "text": "PROFESSOR: ABC, AUDIENCE: [? That would be E? ?] PROFESSOR: ABED.",
    "start": "2620674",
    "end": "2626130"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: So I didn't, in this\npath, ever hit D before.",
    "start": "2626130",
    "end": "2634066"
  },
  {
    "text": "AUDIENCE: When it did lead to\nthe path there, you'll get the same one, AD [INAUDIBLE]",
    "start": "2634066",
    "end": "2641505"
  },
  {
    "text": "PROFESSOR: I guess I\ndon't understand. AUDIENCE: What I'm saying is\nthat without getting the path AD, I still get (2)?",
    "start": "2641506",
    "end": "2648450"
  },
  {
    "text": "PROFESSOR: Yes. So this D seems clearly inferior\nto that D. Yes,",
    "start": "2648450",
    "end": "2653910"
  },
  {
    "text": "that's absolutely true. So this is a very simple rule\nfor removing things.",
    "start": "2653910",
    "end": "2660960"
  },
  {
    "text": "You're thinking of a\nmore advanced rule. So if you saw-- if there's a shorter path to a\nparticular place, don't look",
    "start": "2660960",
    "end": "2667950"
  },
  {
    "text": "at the longer path. You're absolutely right. So in fact, there might\nbe more severe pruning",
    "start": "2667950",
    "end": "2676500"
  },
  {
    "text": "that you could do. There might have been\nan answer that was bigger than 8 --",
    "start": "2676500",
    "end": "2681589"
  },
  {
    "text": "right? And so you're absolutely\nright. ",
    "start": "2681590",
    "end": "2687900"
  },
  {
    "text": "Ok. Let me ignore that for the\nmoment and come back to it in about four slides. You're absolutely right.",
    "start": "2687900",
    "end": "2694490"
  },
  {
    "text": "So what we want to do now is\ntake that idea of throwing away silly paths and formalize\nit so that we can put it into",
    "start": "2694490",
    "end": "2703690"
  },
  {
    "text": "the algorithm. And we'll think about that\nas pruning rules.",
    "start": "2703690",
    "end": "2708870"
  },
  {
    "text": "So the first pruning rule\nis the easy one. Don't consider any path that\nvisits the same state twice.",
    "start": "2708870",
    "end": "2715460"
  },
  {
    "text": "That doesn't pick up your case,\nbut it does pick up 8 cases here.",
    "start": "2715460",
    "end": "2722360"
  },
  {
    "text": "So that's easy to implement.",
    "start": "2722360",
    "end": "2727630"
  },
  {
    "text": "All we need to do is-- down here where we're thinking\nabout whether this is a good",
    "start": "2727630",
    "end": "2732970"
  },
  {
    "text": "state to add or not-- we just ask, is it\nin the path?",
    "start": "2732970",
    "end": "2739920"
  },
  {
    "text": "So if the state that I'm about\nto put in the path is already in the path, don't\nput it there.",
    "start": "2739920",
    "end": "2747750"
  },
  {
    "text": "If you don't shove\nit back into the agenda, it'll get forgotten. So before you shove it into the\nagenda, ask yourself the",
    "start": "2747750",
    "end": "2755569"
  },
  {
    "text": "question, is it already\nin the path? And so I do that here. Keep in mind, I popped out an\nelement called the parent.",
    "start": "2755570",
    "end": "2768050"
  },
  {
    "text": "I'm looking at the children. The children's state is called\n\"new state.\" So I ask, is new",
    "start": "2768050",
    "end": "2774640"
  },
  {
    "text": "state in the parent's path? So parent.inpath of new state.",
    "start": "2774640",
    "end": "2783000"
  },
  {
    "text": "So that means I have\nto write inpath. Inpath is easy. It's especially easy if\nwe use recursion.",
    "start": "2783000",
    "end": "2790960"
  },
  {
    "text": "So inpath says, if my state is\nstate, then return True.",
    "start": "2790960",
    "end": "2800200"
  },
  {
    "text": "I'm in the path. If that's not true, and I don't\nhave a parent, then that",
    "start": "2800200",
    "end": "2808530"
  },
  {
    "text": "means I'm the start state. That means it wasn't\nin the path.",
    "start": "2808530",
    "end": "2813590"
  },
  {
    "text": "And if neither of those\nis true, ask the same question of my parent.",
    "start": "2813590",
    "end": "2819210"
  },
  {
    "text": "So that makes it recursive. So consider two cases\nthat could either",
    "start": "2819210",
    "end": "2824860"
  },
  {
    "text": "make it true or false. It would be True if I'm\ncurrently sitting on a node that happens to be\nthe same state.",
    "start": "2824860",
    "end": "2831309"
  },
  {
    "text": "It would be False if I recursed\nthe whole way back to the start state and hadn't\nfound it yet.",
    "start": "2831310",
    "end": "2839060"
  },
  {
    "text": "So there are two termination\nstates-- I landed on a state in the path\nthat was the same as new",
    "start": "2839060",
    "end": "2846240"
  },
  {
    "text": "state, or I ran the whole way\nback to the start state and didn't find it. Those two terminate by\ndoing returns --",
    "start": "2846240",
    "end": "2854000"
  },
  {
    "text": "return True or return False. The other option is that\nI don't know the",
    "start": "2854000",
    "end": "2859799"
  },
  {
    "text": "answer, ask my parent.  So just recurse on inpath,\nand ask my parent",
    "start": "2859800",
    "end": "2868170"
  },
  {
    "text": "to do the same thing. So that's the way I\ncan figure out--",
    "start": "2868170",
    "end": "2873380"
  },
  {
    "text": "I can implement pruning\nrule (1). Now pruning rule (2) --",
    "start": "2873380",
    "end": "2879510"
  },
  {
    "text": "if multiple actions lead to\nthe same state, only think about one of them. That actually doesn't happen on\nthe Manhattan grid problem.",
    "start": "2879510",
    "end": "2885580"
  },
  {
    "text": "Because you can imagine search\ncases where there are three different things that\nyou could do. In fact, you saw some of those\nwhen you were coding",
    "start": "2885580",
    "end": "2892789"
  },
  {
    "text": "the robot last week. There were multiple ways you\ncould end up at the state at",
    "start": "2892790",
    "end": "2898160"
  },
  {
    "text": "the end of the hall. You could get there by being\nthere and moving left, which",
    "start": "2898160",
    "end": "2903839"
  },
  {
    "text": "you hit the wall. Or you could get there by being\nhere and moving left. Both of them left you\nin the same place.",
    "start": "2903840",
    "end": "2910400"
  },
  {
    "text": "So if you're planning a search,\nyou don't need to distinguish among those, because\nthey take the same amount of steps.",
    "start": "2910400",
    "end": "2917400"
  },
  {
    "text": "So since they take the same\namount of steps, we don't need to search further. So we can collapse them. That's called pruning\nrule (2).",
    "start": "2917400",
    "end": "2924390"
  },
  {
    "text": "That's also easy to implement. What we do is, we keep track of,\nfor every parent, what are",
    "start": "2924390",
    "end": "2929890"
  },
  {
    "text": "all of its children. If the parent already has a\nchild at that place, throw",
    "start": "2929890",
    "end": "2939250"
  },
  {
    "text": "away the excess children. That doesn't sound good. ",
    "start": "2939250",
    "end": "2947220"
  },
  {
    "text": "So keep track of how many\nchild states I have. Make a list.",
    "start": "2947220",
    "end": "2952480"
  },
  {
    "text": "And if the new state didn't\nsatisfy the goal, ask if it's",
    "start": "2952480",
    "end": "2958180"
  },
  {
    "text": "already in the list\nof children. If it's already there, pass.",
    "start": "2958180",
    "end": "2963360"
  },
  {
    "text": "Don't do anything.  Otherwise, do pruning\nrule (1).",
    "start": "2963360",
    "end": "2969359"
  },
  {
    "text": "And then, before you push it\ninto the agenda, also push it into the list of new children.",
    "start": "2969360",
    "end": "2975150"
  },
  {
    "text": " That's a way of making sure that\nif there's multiple ways",
    "start": "2975150",
    "end": "2981100"
  },
  {
    "text": "to get the same state, you\nonly keep track of one. So that's an additional\npruning rule.",
    "start": "2981100",
    "end": "2987420"
  },
  {
    "text": "So now let's think about how\nwe would implement these. Let's think about the solution\nto a problem where we want to",
    "start": "2987420",
    "end": "2995560"
  },
  {
    "text": "apply a depth-first search on\nthis Manhattan problem, to get",
    "start": "2995560",
    "end": "3002490"
  },
  {
    "text": "from A to I. So let's\nthink about-- ",
    "start": "3002490",
    "end": "3009800"
  },
  {
    "text": "let's go up--  so I want to think about, how do\nI apply depth-first search",
    "start": "3009800",
    "end": "3019780"
  },
  {
    "text": "to that problem? So think about the agenda. So the agenda, I initialized\nit with the node that",
    "start": "3019780",
    "end": "3025870"
  },
  {
    "text": "corresponds to the start state,\nso that's A. I'm doing",
    "start": "3025870",
    "end": "3032370"
  },
  {
    "text": "depth first. What's the rule for\ndepth first? Pop the last guy, replace\nit by his children.",
    "start": "3032370",
    "end": "3039290"
  },
  {
    "text": "OK, so pop the last guy. What's the last guy? The last guy is A. Replace\nit by his children.",
    "start": "3039290",
    "end": "3045220"
  },
  {
    "text": "What's his children of A? Well, there's two of\nthem, AB and AD. ",
    "start": "3045220",
    "end": "3056050"
  },
  {
    "text": "Ok. So I'm done with the loop\nfor the first level. So pop the last guy,\nthat's AD.",
    "start": "3056050",
    "end": "3066230"
  },
  {
    "text": "Replace it by his children. What are the children of AD? Well, what could D do?",
    "start": "3066230",
    "end": "3071830"
  },
  {
    "text": "D could go to A or E or G.\nA's brain dead, so I",
    "start": "3071830",
    "end": "3077040"
  },
  {
    "text": "don't want that one. So I'll think about E and G. So ADE, ADG.",
    "start": "3077040",
    "end": "3086119"
  },
  {
    "text": " By the way, stop me if\nI make a mistake.",
    "start": "3086120",
    "end": "3092900"
  },
  {
    "text": "It's really embarrassing. OK, pop the end, ADG.",
    "start": "3092900",
    "end": "3099200"
  },
  {
    "text": "Who's the possible\nchildren of ADG? ADG?",
    "start": "3099200",
    "end": "3104390"
  },
  {
    "text": "Well, it could go back to\nD, but that's stupid. So ADGH seems to be\nthe only good one. ",
    "start": "3104390",
    "end": "3114599"
  },
  {
    "text": "Pop the last one, ADGH. And who's his children, ADGH?",
    "start": "3114600",
    "end": "3122400"
  },
  {
    "text": "ADGH has children E, G, and I.\nBut I don't want G, because",
    "start": "3122400",
    "end": "3131460"
  },
  {
    "text": "that's brain dead. So ADGH, E or I. And that\none won, right?",
    "start": "3131460",
    "end": "3144700"
  },
  {
    "text": "Because I got to A. Everyone see what I did? I tried to work out the\nalgorithm manually.",
    "start": "3144700",
    "end": "3153380"
  },
  {
    "text": "So the idea, then, was that-- ",
    "start": "3153380",
    "end": "3158630"
  },
  {
    "text": "so how much work I do? I visited 1, 2, 3, 4, 5, 6, 7. And then I found it.",
    "start": "3158630",
    "end": "3164720"
  },
  {
    "text": "So I did 7 visits.  And I got the right answer.",
    "start": "3164720",
    "end": "3169830"
  },
  {
    "text": " So both of those are good-- 7 is a small number, and getting\nthe right answer.",
    "start": "3169830",
    "end": "3176220"
  },
  {
    "text": "Both of those are good things. And in general, if you think\nabout the way a depth-first",
    "start": "3176220",
    "end": "3182570"
  },
  {
    "text": "search works-- here's a transcript of\nwhat I just did. This will be posted on\nthe online version.",
    "start": "3182570",
    "end": "3189550"
  },
  {
    "text": "So you can see it, even\nthough it's not handed out to you now. So you can look this\nup on the web.",
    "start": "3189550",
    "end": "3197410"
  },
  {
    "text": "So in general, depth-first\nsearch won't work for every problem.",
    "start": "3197410",
    "end": "3203190"
  },
  {
    "text": " It happened to work\nfor this problem. In fact, it happened to be very\ngood for this problem.",
    "start": "3203190",
    "end": "3209820"
  },
  {
    "text": "But it won't work for every\nproblem because it could get stuck. It could run forever in a\nproblem with infinite domain.",
    "start": "3209820",
    "end": "3216480"
  },
  {
    "text": "This problem has infinite\ndomain. So if I were to choose my\nstart and end state judiciously, I could get it\nstuck in an infinite loop.",
    "start": "3216480",
    "end": "3224380"
  },
  {
    "text": "That's a property of\ndepth-first search.",
    "start": "3224380",
    "end": "3229529"
  },
  {
    "text": "Even when it finds a path, it\ndoesn't necessarily find the shortest path.",
    "start": "3229530",
    "end": "3235109"
  },
  {
    "text": "Well, that's a bummer. But it's very efficient\nin its use of memory.",
    "start": "3235110",
    "end": "3244040"
  },
  {
    "text": "So it's not a completely\nbrain-dead search strategy, but it's usually brain dead.",
    "start": "3244040",
    "end": "3250720"
  },
  {
    "text": "So let's think about\nbreadth-first search as an",
    "start": "3250720",
    "end": "3256230"
  },
  {
    "text": "alternative. Again, all we need do is switch\nthe idea of thinking about stacks versus queues.",
    "start": "3256230",
    "end": "3266020"
  },
  {
    "text": "Take off the beginning,\nadd to the end. That's the way queues work. So now let's do the same\nproblem with a",
    "start": "3266020",
    "end": "3272650"
  },
  {
    "text": "breadth-first search. So I start with the agenda. I put in A. I pop off the head\nof the queue and stuff the",
    "start": "3272650",
    "end": "3283260"
  },
  {
    "text": "children at the end. I pop off the beginning and\nstuff the children AB, AD.",
    "start": "3283260",
    "end": "3289280"
  },
  {
    "text": " That looks right.",
    "start": "3289280",
    "end": "3294520"
  },
  {
    "text": "That's the end of path one. Now I pop off the beginning\nand stick in the children.",
    "start": "3294520",
    "end": "3302020"
  },
  {
    "text": "What are the children of AB? Well, AB could go to ACE. A is brain dead, so ABC--",
    "start": "3302020",
    "end": "3308955"
  },
  {
    "text": " ABC or ABE. ",
    "start": "3308955",
    "end": "3316670"
  },
  {
    "text": "ABC or ABE, that looks right. Now pop off this guy, AD, and\nput his children at the end.",
    "start": "3316670",
    "end": "3326130"
  },
  {
    "text": "That's ADE and ADG. ",
    "start": "3326130",
    "end": "3335690"
  },
  {
    "text": "I don't think I made\na mistake yet. Pop off the first guy, ABC. Stick in his children ABC--",
    "start": "3335690",
    "end": "3344349"
  },
  {
    "text": "ABC, it could go to B or F.\nLooks like F is the only one",
    "start": "3344350",
    "end": "3349930"
  },
  {
    "text": "that makes any sense. ABC, that looks right. ABE, put his children ABE--",
    "start": "3349930",
    "end": "3361750"
  },
  {
    "text": "E could go to B-- that's\nbrain dead-- D, F, or H. D, F-- wait.",
    "start": "3361750",
    "end": "3371450"
  },
  {
    "text": " AUDIENCE: AB. PROFESSOR: AB, thank you.",
    "start": "3371450",
    "end": "3377170"
  },
  {
    "text": " I'm supposed to be doing ABE\nfollowed by something, ABE",
    "start": "3377170",
    "end": "3386010"
  },
  {
    "text": "followed by something. I don't want B. D is fine,\nF is fine, and H is fine.",
    "start": "3386010",
    "end": "3392289"
  },
  {
    "text": "D, F, and H. OK so far?",
    "start": "3392290",
    "end": "3404320"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: Oh no,\nit's not right? OK, what did I do wrong? AUDIENCE: Just AB.",
    "start": "3404320",
    "end": "3411283"
  },
  {
    "text": "It's the fourth-- PROFESSOR: Oh, here. That's up here. Is that [INAUDIBLE].",
    "start": "3411283",
    "end": "3416662"
  },
  {
    "text": "AUDIENCE: Yeah. PROFESSOR: Thank you. That would be embarrassing. OK, next pop off AD--",
    "start": "3416662",
    "end": "3423010"
  },
  {
    "text": "This is why we have\ncomputers, right? We don't normally\ndo this by hand.",
    "start": "3423010",
    "end": "3428420"
  },
  {
    "text": "OK, so ADE-- ",
    "start": "3428420",
    "end": "3435849"
  },
  {
    "text": "if I had ADE, I could do B-- that seems OK, D seems bad--",
    "start": "3435850",
    "end": "3443369"
  },
  {
    "text": "F, or H. So it would look like B, F, H. OK, ADG.",
    "start": "3443370",
    "end": "3457490"
  },
  {
    "start": "3457490",
    "end": "3463160"
  },
  {
    "text": "A, D, G. It looks like\nH is my only option. ",
    "start": "3463160",
    "end": "3472690"
  },
  {
    "text": "ABCF.  A, B, C, F. Looks like I could\ndo E or I. Finally.",
    "start": "3472690",
    "end": "3491300"
  },
  {
    "text": "Now the only question\nis whether I got the right number of states. Let's assume I did. So 1, 2, 3, 4, 5, 6, 7, 8, 9,\n10, 11, 12, 13, 14, 15, 16 --",
    "start": "3491300",
    "end": "3497030"
  },
  {
    "start": "3497030",
    "end": "3506740"
  },
  {
    "text": "which happens to be\nthe right answer. At least it happens to be the\nanswer I got this morning when I was at breakfast.",
    "start": "3506740",
    "end": "3512380"
  },
  {
    "text": "So what did I just do? I just did a breadth-first\nsearch.",
    "start": "3512380",
    "end": "3517450"
  },
  {
    "text": " Here's a transcript. 16 matches, good.",
    "start": "3517450",
    "end": "3522910"
  },
  {
    "text": " Breadth-first search has a\ndifferent set of properties.",
    "start": "3522910",
    "end": "3528870"
  },
  {
    "text": "Notice that it took me longer. But because it's breadth first,\nand because each row",
    "start": "3528870",
    "end": "3535490"
  },
  {
    "text": "corresponds to an increasing\npath length, it's always guaranteed to give you\nthe shortest answer. That's good.",
    "start": "3535490",
    "end": "3542069"
  },
  {
    "text": "So it always gives you\nthe shortest answer. ",
    "start": "3542070",
    "end": "3547410"
  },
  {
    "text": "It requires more space. I mean, you can see that\njust on the chalkboard. ",
    "start": "3547410",
    "end": "3553960"
  },
  {
    "text": "And also it still didn't take\ncare of your problem. So this still seems like\nthere's too much work.",
    "start": "3553960",
    "end": "3560480"
  },
  {
    "text": " I looked at 16 different\nplaces.",
    "start": "3560480",
    "end": "3568359"
  },
  {
    "text": "I did 16 visits. There's just something\ncompletely wrong about that,",
    "start": "3568360",
    "end": "3574799"
  },
  {
    "text": "because there's only 9 states.  How could it take more visits\nthan there are states?",
    "start": "3574800",
    "end": "3584750"
  },
  {
    "text": "So that just doesn't\nsound right. And it's for exactly\nyour point. And so there's another idea\nthat we can use, which is",
    "start": "3584750",
    "end": "3591570"
  },
  {
    "text": "called \"dynamic programming.\"\nThe idea in dynamic programming, the principal is,\nif you think about a path that",
    "start": "3591570",
    "end": "3600369"
  },
  {
    "text": "goes from x is z through y,\nthe best path from x to z",
    "start": "3600370",
    "end": "3608000"
  },
  {
    "text": "through y is the sum\nof two paths-- the best path from x to y and\nthe best path from y to z.",
    "start": "3608000",
    "end": "3615608"
  },
  {
    "text": " If you think about that, that\nhas to be the case. ",
    "start": "3615608",
    "end": "3623040"
  },
  {
    "text": "And if we further assume that\nwe're going to do breadth first, then the first time that\nwe see a state is the",
    "start": "3623040",
    "end": "3633720"
  },
  {
    "text": "best way to get there.  So what we can do then, in order\nto take care of your",
    "start": "3633720",
    "end": "3640840"
  },
  {
    "text": "case, is keep track of the\nstates we've already visited. If we've already visited a\nstate, it appears earlier in",
    "start": "3640840",
    "end": "3649760"
  },
  {
    "text": "the tree, there's no point in\nthinking about it further. That's the idea of dynamic\nprogramming.",
    "start": "3649760",
    "end": "3657440"
  },
  {
    "text": "And that's also easy\nto implement. All we need to do is keep track\nof all those places we've already visited.",
    "start": "3657440",
    "end": "3664940"
  },
  {
    "text": "So we make a dictionary called\n\"visited.\" So I initialize",
    "start": "3664940",
    "end": "3673440"
  },
  {
    "text": "before I start looking\nat the children. I initialize right after\nI set up the initial",
    "start": "3673440",
    "end": "3678910"
  },
  {
    "text": "contents of the agenda. I create this dictionary\ncalled visited. And every time I visit a new\nstate, I put that state in the",
    "start": "3678910",
    "end": "3690010"
  },
  {
    "text": "visit list. Then before I add the child to\nthe agenda I ask, is the child",
    "start": "3690010",
    "end": "3701520"
  },
  {
    "text": "already in the visit list? If the child's already there,\nwell forget it.",
    "start": "3701520",
    "end": "3707950"
  },
  {
    "text": "I don't need him. Otherwise, just before you push\nthe new state, remember",
    "start": "3707950",
    "end": "3717560"
  },
  {
    "text": "now that that's an element\nthat's been visited. So the idea, then, is that by\nkeeping track of who you've",
    "start": "3717560",
    "end": "3725420"
  },
  {
    "text": "already looked at, you\ncan avoid looking-- so if there's a depth-3 way to\nget to D, and a depth-2, then",
    "start": "3725420",
    "end": "3735839"
  },
  {
    "text": "I don't need to worry about\nthe previous ones, because it's already in the visit list. Yes?",
    "start": "3735840",
    "end": "3741535"
  },
  {
    "text": "AUDIENCE: Why do we still need\nthe new child states up there? PROFESSOR: Why do we still have\nthe new child states?",
    "start": "3741535",
    "end": "3748465"
  },
  {
    "text": "AUDIENCE: The placement was\nbased [? on-- ?] the [INAUDIBLE] state. PROFESSOR: I think\nyou're right.",
    "start": "3748465",
    "end": "3755395"
  },
  {
    "text": "I should think about that. I think you're right. I think when I was modifying\nthe code for the different",
    "start": "3755395",
    "end": "3761630"
  },
  {
    "text": "places I slipped and could\nhave removed that line. I think you're right. I'll have to think about it,\nbut I think you're right.",
    "start": "3761630",
    "end": "3767360"
  },
  {
    "text": "So if that line magically\ndisappears from the online version, he's right. ",
    "start": "3767360",
    "end": "3775020"
  },
  {
    "text": "OK, so now one last problem. I want to see if I can figure\nout what would happen with",
    "start": "3775020",
    "end": "3784840"
  },
  {
    "text": "dynamic programming. So I want to do breadth first.",
    "start": "3784840",
    "end": "3790500"
  },
  {
    "text": "And just as a warning, I'm\nhypoglycemic at this point. So there may be more\nerrors than usual.",
    "start": "3790500",
    "end": "3797440"
  },
  {
    "text": "So I need to keep track\nof two things. I need to keep track\nof the visit list.",
    "start": "3797440",
    "end": "3802580"
  },
  {
    "text": "And I need to keep track\nof the agenda. So there's two lists I have\nto keep track of.",
    "start": "3802580",
    "end": "3809650"
  },
  {
    "text": "OK. Let's start out by saying\nthat the agenda contains the start element.",
    "start": "3809650",
    "end": "3814970"
  },
  {
    "text": "That's A. That means we visited\nA. It's breadth first,",
    "start": "3814970",
    "end": "3824099"
  },
  {
    "text": "so I want to take the first guy\nout of the queue and add his children to the\nend of the queue.",
    "start": "3824100",
    "end": "3829810"
  },
  {
    "text": "So take the first guy\nout of the queue. Add his children. A's children are B and D, which\nmeans that I've now",
    "start": "3829810",
    "end": "3839510"
  },
  {
    "text": "visited B and D.",
    "start": "3839510",
    "end": "3846620"
  },
  {
    "text": "Now I want to take out the first\nguy from the queue, AB, and I want to put his children\nat the end of the queue.",
    "start": "3846620",
    "end": "3854583"
  },
  {
    "text": "AB's children are A-- that's been visited, C-- not visited, and E--",
    "start": "3854583",
    "end": "3861040"
  },
  {
    "text": "not visited. So ABCE. ",
    "start": "3861040",
    "end": "3868580"
  },
  {
    "text": "But that visits C and E.",
    "start": "3868580",
    "end": "3875810"
  },
  {
    "text": "Now I want to take out AD and\nput its children at the end.",
    "start": "3875810",
    "end": "3882580"
  },
  {
    "text": "AD is AEG. A is visited, E is visited,\nwhich leaves just G, so ADG .",
    "start": "3882580",
    "end": "3892245"
  },
  {
    "text": " And that visits G.",
    "start": "3892245",
    "end": "3899700"
  },
  {
    "text": "Then I want to take out ABC and\nput in its children, A, B,",
    "start": "3899700",
    "end": "3904940"
  },
  {
    "text": "C. ABC, oh dear. AB-- I'm looking up there.",
    "start": "3904940",
    "end": "3911920"
  },
  {
    "text": "I said I'm hypoglycemic. ABC-- ABC -- could be B or F.\nWell, B's no good.",
    "start": "3911920",
    "end": "3920030"
  },
  {
    "text": "Which leaves F, but\nthat visits F.",
    "start": "3920030",
    "end": "3927290"
  },
  {
    "text": "So now, ABE. ",
    "start": "3927290",
    "end": "3932740"
  },
  {
    "text": "ABE, so that could be\nB, D, F, H. B--",
    "start": "3932740",
    "end": "3938570"
  },
  {
    "text": "visited, D-- visited, F-- visited, H-- OK.",
    "start": "3938570",
    "end": "3944812"
  },
  {
    "text": " That visits H.",
    "start": "3944812",
    "end": "3950760"
  },
  {
    "text": "Now take out ADG.  Children of ADG--",
    "start": "3950760",
    "end": "3958100"
  },
  {
    "text": "ADG, two children, D and H. D\nand H, they're both there.",
    "start": "3958100",
    "end": "3963760"
  },
  {
    "text": "That didn't work. There are no children of ADG.",
    "start": "3963760",
    "end": "3969567"
  },
  {
    "text": "ABCF--  ABCF, three children--",
    "start": "3969567",
    "end": "3977210"
  },
  {
    "text": "C, E, I. C-- visited, E-- visited, I--",
    "start": "3977210",
    "end": "3982970"
  },
  {
    "text": "done. Found the right answer. 1, 2, 3, 4, 5, 6, 7, 8 -- ",
    "start": "3982970",
    "end": "3989410"
  },
  {
    "text": "8 visits. So I've got the same answer,\nand it's optimal, and I did",
    "start": "3989410",
    "end": "4000910"
  },
  {
    "text": "fewer than 9 visits. 9 was the number of states. So this algorithm will always\nhave those properties.",
    "start": "4000910",
    "end": "4008790"
  },
  {
    "text": "So the dynamic programming-- oh, I forgot a slide. ",
    "start": "4008790",
    "end": "4016269"
  },
  {
    "text": "The dynamic programming with\nbreadth-first search will always find the best.",
    "start": "4016270",
    "end": "4021410"
  },
  {
    "text": "It will never take longer than\nthe number of states. So in this problem that had a\nfinite number of states, even",
    "start": "4021410",
    "end": "4027400"
  },
  {
    "text": "though I had an infinite\nnumber of paths-- because you can go around\nin circles--",
    "start": "4027400",
    "end": "4033290"
  },
  {
    "text": "it'll still never take more\nthan the number of states. And all that it requires to\nimplement is to maintain two",
    "start": "4033290",
    "end": "4041390"
  },
  {
    "text": "lists instead of one. So the point, then, is that\ntoday we looked at a variety--",
    "start": "4041390",
    "end": "4047670"
  },
  {
    "text": "we looked at two real different\nkinds of search algorithms, depth-first search\nand breadth-first search. And we looked at a number of\ndifferent pruning rules.",
    "start": "4047670",
    "end": "4054600"
  },
  {
    "text": "Pruning rule (1) -- don't go\nto some place that you've already visited. Pruning rule (2) -- if you have\ntwo children that go to the same place, only think\nabout one of them.",
    "start": "4054600",
    "end": "4062200"
  },
  {
    "text": "You can consider dynamic\nprogramming to be a third pruning rule, because that's\nthe effect of it.",
    "start": "4062200",
    "end": "4069030"
  },
  {
    "text": "And the final announcement,\ndon't forget about Wednesday.",
    "start": "4069030",
    "end": "4074850"
  },
  {
    "text": "Have a good week. ",
    "start": "4074850",
    "end": "4085503"
  }
]