[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "User-mode programs need to communicate with\nthe OS to request service or get access to",
    "start": "500",
    "end": "5000"
  },
  {
    "text": "useful OS data like the time of day.",
    "start": "5000",
    "end": "8370"
  },
  {
    "text": "But if they're running in a different MMU\ncontext than the OS, they don't have direct",
    "start": "8370",
    "end": "12889"
  },
  {
    "text": "access to OS code and data.",
    "start": "12889",
    "end": "15200"
  },
  {
    "text": "And that might be bad idea in any case:\nthe OS is usually responsible for implementing",
    "start": "15200",
    "end": "20910"
  },
  {
    "text": "security and access policies and other users\nof the system would be upset if any random",
    "start": "20910",
    "end": "26300"
  },
  {
    "text": "user program could circumvent those protections.",
    "start": "26300",
    "end": "31070"
  },
  {
    "text": "What's needed is the ability for user-mode\nprograms to call OS code at specific entry",
    "start": "31070",
    "end": "36330"
  },
  {
    "text": "points, using registers or the user-mode virtual\nmemory to send or receive information.",
    "start": "36330",
    "end": "43300"
  },
  {
    "text": "We'd use these \"supervisor calls\" to access\na well-documented and secure OS application",
    "start": "43300",
    "end": "49160"
  },
  {
    "text": "programming interface (API).",
    "start": "49160",
    "end": "50350"
  },
  {
    "text": "An example of such an interface is POSIX (https://en.wikipedia.org/wiki/POSIX),\na standard interface implemented by many Unix-like",
    "start": "50350",
    "end": "57260"
  },
  {
    "text": "operating systems.",
    "start": "57260",
    "end": "60170"
  },
  {
    "text": "As it turns out, we have a way of transferring\ncontrol from a user-mode program to a specific",
    "start": "60170",
    "end": "65630"
  },
  {
    "text": "OS handler - just execute an illegal instruction!",
    "start": "65630",
    "end": "70549"
  },
  {
    "text": "We'll adopt the convention of using illegal\ninstructions with an opcode field of 1 to",
    "start": "70550",
    "end": "75400"
  },
  {
    "text": "serve as supervisor calls.",
    "start": "75400",
    "end": "77840"
  },
  {
    "text": "The low order bits of these SVC instructions\nwill contain an index indicating which SVC",
    "start": "77840",
    "end": "83679"
  },
  {
    "text": "service we're trying to access.",
    "start": "83680",
    "end": "85230"
  },
  {
    "text": "Let's see how this would work.",
    "start": "85230",
    "end": "89210"
  },
  {
    "start": "89000",
    "end": "89000"
  },
  {
    "text": "Here's our user-mode/kernel-mode diagram again.",
    "start": "89210",
    "end": "92520"
  },
  {
    "text": "Note that the user-mode programs contain supervisor\ncalls with different indices, which when executed",
    "start": "92520",
    "end": "97990"
  },
  {
    "text": "are intended to serve as requests for different\nOS services.",
    "start": "97990",
    "end": "104048"
  },
  {
    "text": "When an SVC instruction is executed, the hardware\ndetects the opcode field of 1 as an illegal",
    "start": "104049",
    "end": "110360"
  },
  {
    "text": "instruction and triggers an exception that\nruns the OS IllOp handler, as we saw in the",
    "start": "110360",
    "end": "115079"
  },
  {
    "text": "previous segment.",
    "start": "115079",
    "end": "117270"
  },
  {
    "text": "The handler saves the process state in the\ntemporary storage area, then dispatches to",
    "start": "117270",
    "end": "122310"
  },
  {
    "text": "the appropriate handler based on the opcode\nfield.",
    "start": "122310",
    "end": "126549"
  },
  {
    "text": "This handler can access the user's registers\nin the temporary storage area, or using the",
    "start": "126550",
    "end": "132200"
  },
  {
    "text": "appropriate OS subroutines can access the\ncontents of any user-mode virtual address.",
    "start": "132200",
    "end": "138599"
  },
  {
    "text": "If information is to be returned to the user,\nthe return values can be stored in the temporary",
    "start": "138600",
    "end": "143250"
  },
  {
    "text": "storage area, overwriting, say, the saved\ncontents of the user's R0 register.",
    "start": "143250",
    "end": "149290"
  },
  {
    "text": "Then, when the handler completes, the potentially-updated\nsaved register values are reloaded into the",
    "start": "149290",
    "end": "155689"
  },
  {
    "text": "CPU registers\nand execution of the user-mode program resumes",
    "start": "155690",
    "end": "160230"
  },
  {
    "text": "at the instruction following the supervisor\ncall.",
    "start": "160230",
    "end": "163790"
  },
  {
    "text": "In the previous segment we saw how the illegal\ninstruction handler uses a dispatch table",
    "start": "163790",
    "end": "169349"
  },
  {
    "start": "164000",
    "end": "164000"
  },
  {
    "text": "to choose the appropriate sub-handler depending\non the opcode field of the illegal instruction.",
    "start": "169349",
    "end": "175330"
  },
  {
    "text": "In this slide we see the sub-handler for SVC\ninstructions, i.e., those with an opcode field",
    "start": "175330",
    "end": "181480"
  },
  {
    "text": "of 1.",
    "start": "181480",
    "end": "183069"
  },
  {
    "text": "This code uses the low-order bits of the instruction\nto access another dispatch table to select",
    "start": "183070",
    "end": "187980"
  },
  {
    "text": "the appropriate code for each of the eight\npossible SVCs.",
    "start": "187980",
    "end": "192909"
  },
  {
    "text": "Our Tiny OS only has a meagre selection of\nsimple services.",
    "start": "192909",
    "end": "197220"
  },
  {
    "text": "A real OS would have SVCs for accessing files,\ndealing with network connections, managing",
    "start": "197220",
    "end": "203569"
  },
  {
    "text": "virtual memory, spawning new processes, and\nso on.",
    "start": "203569",
    "end": "207590"
  },
  {
    "text": "Here's the code for resuming execution of\nthe user-mode process when the SVC handler",
    "start": "207590",
    "end": "212970"
  },
  {
    "start": "208000",
    "end": "208000"
  },
  {
    "text": "is done:\nsimply restore the saved values for the registers",
    "start": "212970",
    "end": "217099"
  },
  {
    "text": "and JMP to resume execution at the instruction\nfollowing the SVC instruction.",
    "start": "217099",
    "end": "223849"
  },
  {
    "text": "There are times when for some reason the SVC\nrequest cannot be completed and the request",
    "start": "223849",
    "end": "229310"
  },
  {
    "text": "should be retried in the future.",
    "start": "229310",
    "end": "231700"
  },
  {
    "text": "For example, the ReadCh SVC returns the next\ncharacter typed by the user, but if no character",
    "start": "231700",
    "end": "238370"
  },
  {
    "text": "has yet been typed, the OS cannot complete\nthe request at this time.",
    "start": "238370",
    "end": "243049"
  },
  {
    "text": "In this case, the SVC handler should branch\nto I_Wait, which arranges for the SVC instruction",
    "start": "243050",
    "end": "249951"
  },
  {
    "text": "to be re-executed next time this process runs\nand then calls Scheduler() to run the next",
    "start": "249951",
    "end": "255849"
  },
  {
    "text": "process.",
    "start": "255849",
    "end": "257280"
  },
  {
    "text": "This gives all the other processes a chance\nto run before the SVC is tried again, hopefully",
    "start": "257280",
    "end": "262370"
  },
  {
    "text": "this time successfully.",
    "start": "262370",
    "end": "265530"
  },
  {
    "text": "You can see that this code also serves as\nthe implementation for two different SVCs!",
    "start": "265530",
    "end": "270470"
  },
  {
    "text": "A process can give up the remainder of its\ncurrent execution time slice by calling the",
    "start": "270470",
    "end": "276210"
  },
  {
    "text": "Yield() SVC.",
    "start": "276210",
    "end": "278850"
  },
  {
    "text": "This simply causes the OS to call Scheduler(),\nsuspending execution of the current process",
    "start": "278850",
    "end": "284380"
  },
  {
    "text": "until its next turn in the round-robin scheduling\nprocess.",
    "start": "284380",
    "end": "289970"
  },
  {
    "text": "And to stop execution, a process can call\nthe Halt() SVC.",
    "start": "289970",
    "end": "294590"
  },
  {
    "text": "Looking at the implementation, we can see\nthat \"halt\" is a bit of misnomer.",
    "start": "294590",
    "end": "299060"
  },
  {
    "text": "What really happens is that the system arranges\nto re-execute the Halt() SVC each time the",
    "start": "299060",
    "end": "304750"
  },
  {
    "text": "process is scheduled, which then causes the\nOS to schedule the next process for execution.",
    "start": "304750",
    "end": "311030"
  },
  {
    "text": "The process appears to halt since the instruction\nfollowing the Halt() SVC is never executed.",
    "start": "311030",
    "end": "317250"
  },
  {
    "start": "317000",
    "end": "317000"
  },
  {
    "text": "Adding new SVC handlers is straightforward.",
    "start": "317250",
    "end": "320830"
  },
  {
    "text": "First we need to define new SVC macros for\nuse in user-mode programs.",
    "start": "320830",
    "end": "325939"
  },
  {
    "text": "In this example, we're defining SVCs for getting\nand setting the time of day.",
    "start": "325940",
    "end": "332110"
  },
  {
    "text": "Since these are the eighth and ninth SVCs,\nwe need to make a small adjustment to the",
    "start": "332110",
    "end": "336900"
  },
  {
    "text": "SVC dispatch code and then add the appropriate\nentries to the end of the dispatch table.",
    "start": "336900",
    "end": "342690"
  },
  {
    "text": "The code for the new handlers is equally straightforward.",
    "start": "342690",
    "end": "346880"
  },
  {
    "start": "343000",
    "end": "343000"
  },
  {
    "text": "The handler can access the value of the program's\nR0 by looking at the correct entry in the",
    "start": "346880",
    "end": "352300"
  },
  {
    "text": "UserMState temporary holding area.",
    "start": "352300",
    "end": "355710"
  },
  {
    "text": "It just takes a few instructions to implement\nthe desired operations.",
    "start": "355710",
    "end": "361660"
  },
  {
    "text": "The SVC mechanism provides controlled access\nto OS services and data.",
    "start": "361660",
    "end": "367100"
  },
  {
    "text": "As we'll see in a few lectures, it'll be useful\nthat SVC handlers can't be interrupted since",
    "start": "367100",
    "end": "372759"
  },
  {
    "text": "they are running in supervisor mode where\ninterrupts are disabled.",
    "start": "372759",
    "end": "377110"
  },
  {
    "text": "So, for example, if we need to increment a\nvalue in main memory, using a LD/ADDC/ST sequence,",
    "start": "377110",
    "end": "384258"
  },
  {
    "text": "but we want to ensure no other process execution\nintervenes between the LD and the ST,",
    "start": "384259",
    "end": "389740"
  },
  {
    "text": "we can encapsulate the required functionality\nas an SVC, which is guaranteed to be uninterruptible.",
    "start": "389740",
    "end": "397639"
  },
  {
    "text": "We've made an excellent start at exploring\nthe implementation of a simple time-shared",
    "start": "397640",
    "end": "402139"
  },
  {
    "text": "operating system.",
    "start": "402139",
    "end": "403770"
  },
  {
    "text": "We'll continue the exploration in the next\nlecture when we see how the OS deals with",
    "start": "403770",
    "end": "408698"
  },
  {
    "text": "external input/output devices.",
    "start": "408699",
    "end": "410860"
  }
]