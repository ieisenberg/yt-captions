[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6360"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6360",
    "end": "13339"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13340",
    "end": "21190"
  },
  {
    "text": "PROFESSOR: All right,\nlet's get started. Today we have another\ndata structures topic which is, Data\nStructure Augmentation.",
    "start": "21190",
    "end": "30360"
  },
  {
    "text": "The idea here is we're going\nto take some existing data structure and augment it\nto do extra cool things.",
    "start": "30360",
    "end": "36715"
  },
  {
    "start": "36715",
    "end": "46390"
  },
  {
    "text": "Take some other data\nstructure there we've covered. Typically, that'll be\na balanced search tree,",
    "start": "46390",
    "end": "53640"
  },
  {
    "text": "like an AVL tree or a 2-3 tree. ",
    "start": "53640",
    "end": "59480"
  },
  {
    "text": "And then we'll modify it to\nstore extra information which will enable additional kinds\nof searches, typically,",
    "start": "59480",
    "end": "69270"
  },
  {
    "text": "and sometimes to\ndo updates better. ",
    "start": "69270",
    "end": "81119"
  },
  {
    "text": "And in 006, you've seen an\nexample of this where you took AVL trees and augmented AVL\ntrees so that every node knew",
    "start": "81120",
    "end": "88200"
  },
  {
    "text": "the number of nodes in\nthat rooted subtree. Today we're going to see\nthat example but also",
    "start": "88200",
    "end": "93630"
  },
  {
    "text": "a bunch of other examples,\ndifferent types of augmentation you could do. And we'll start out with\na very simple one, which",
    "start": "93630",
    "end": "99760"
  },
  {
    "text": "I call easy tree augmentation,\nwhich will include",
    "start": "99760",
    "end": "109400"
  },
  {
    "text": "subtree size as a special case. ",
    "start": "109400",
    "end": "117760"
  },
  {
    "text": "So with easy tree\naugmentation, the idea is you have a tree, like\nan AVL tree, or 2-3 tree,",
    "start": "117760",
    "end": "126240"
  },
  {
    "text": "or something like that. And you'd like to\nstore, for every node x, some function of the\nsubtree, rooted at x.",
    "start": "126240",
    "end": "133480"
  },
  {
    "text": "Such as the number\nof nodes in there, or the sum of the\nweights of the nodes, or the sum of the\nsquares of the weights,",
    "start": "133480",
    "end": "139090"
  },
  {
    "text": "or the min, or the max, or the\nmedian maybe, I'm not sure.",
    "start": "139090",
    "end": "146610"
  },
  {
    "text": "Some function f of x which\nis a function of that.",
    "start": "146610",
    "end": "152140"
  },
  {
    "text": "Maybe not f of x,\nbut we want to store some function of that subtree.",
    "start": "152140",
    "end": "157430"
  },
  {
    "text": " Say the goal is to store\nf of the subtree rooted",
    "start": "157430",
    "end": "169325"
  },
  {
    "text": "at x at each node x in a\nfield which I'll call x.f.",
    "start": "169325",
    "end": "187584"
  },
  {
    "text": "So, normally nodes have a left\nchild, right child, parent. But we're going to\nstore an extra field",
    "start": "187584",
    "end": "193770"
  },
  {
    "text": "x.f for some function\nthat you define. This is not always\npossible, but here's",
    "start": "193770",
    "end": "202590"
  },
  {
    "text": "a case where it is possible. That's going to\nbe the easy case.",
    "start": "202590",
    "end": "208730"
  },
  {
    "text": "Suppose x.f can be\ncomputed locally",
    "start": "208730",
    "end": "214709"
  },
  {
    "text": "using lower information,\nlower nodes. ",
    "start": "214710",
    "end": "227410"
  },
  {
    "text": "And we'll say,\nlet's suppose it can be computed in constant time\nfrom information in the node",
    "start": "227410",
    "end": "232530"
  },
  {
    "text": "x from x's children\nand from the f value",
    "start": "232530",
    "end": "242500"
  },
  {
    "text": "that's stored in the children. I'll call that children.f. But really, I mean left\nchild.f, right child.f,",
    "start": "242500",
    "end": "248560"
  },
  {
    "text": "or if you have a\n2-3 tree you have three children, potentially. And the .f of each of them.",
    "start": "248560",
    "end": "254250"
  },
  {
    "text": "OK. So suppose you can\ncompute x.f locally just using one level down\nin constant time.",
    "start": "254250",
    "end": "263020"
  },
  {
    "text": "Then, as you might expect,\nyou can update whenever a node ends up changing.",
    "start": "263020",
    "end": "270510"
  },
  {
    "text": "So more formally. If some set of nodes\nchange-- call this at s.",
    "start": "270510",
    "end": "288510"
  },
  {
    "start": "288510",
    "end": "318970"
  },
  {
    "text": "So I'm stating a very\ngeneral theorem here. If there is some set of nodes,\nwhich we changed something",
    "start": "318970",
    "end": "328920"
  },
  {
    "text": "about them. We change either\ntheir f field, we change some of the data\nthat's in the node,",
    "start": "328920",
    "end": "335220"
  },
  {
    "text": "or we do a rotation,\nloosen those around. Then we count the total number\nof ancestors of these nodes.",
    "start": "335220",
    "end": "344840"
  },
  {
    "text": "So this subtree. Those are the nodes\nthat need to be updated because we're assuming we\ncan compute x.f just given",
    "start": "344840",
    "end": "352870"
  },
  {
    "text": "the children data. So if this data is\nchanging, we have to update it's\nparents value of f",
    "start": "352870",
    "end": "358850"
  },
  {
    "text": "because it depends\non this child value. We have to update\nall those parents, all the way up to the root.",
    "start": "358850",
    "end": "366820"
  },
  {
    "text": "So however many nodes there are\nthere, that's the total cost. Now, luckily, in an AVL tree, or\n2-3 tree, most balanced search",
    "start": "366820",
    "end": "377010"
  },
  {
    "text": "structures, the updates\nyou do are very localized. When we do splits in\na 2-3 tree we only",
    "start": "377010",
    "end": "383520"
  },
  {
    "text": "do it up a single\npath to the root. So the number of ancestors\nhere is just going to be log n.",
    "start": "383520",
    "end": "391130"
  },
  {
    "text": "Same thing with an AVL tree. If you look at the\nrotations you do, they are up a single\nleaf to root path.",
    "start": "391130",
    "end": "399639"
  },
  {
    "text": "And so the number\nof ancestors that need to be updated is\nalways order log n.",
    "start": "399640",
    "end": "404960"
  },
  {
    "text": "Things change, and there's an\norder log n ancestors of them. So this is a little more\ngeneral than we need,",
    "start": "404960",
    "end": "412830"
  },
  {
    "text": "but it's just to point out if\nwe did log n rotation spread out somewhere in the tree,\nthat would actually be bad",
    "start": "412830",
    "end": "419550"
  },
  {
    "text": "because the total number of\nancestors could be log squared. But because in the\nstructures we've seen,",
    "start": "419550",
    "end": "427860"
  },
  {
    "text": "we just work on a single path\nto the root, we get log n. ",
    "start": "427860",
    "end": "453330"
  },
  {
    "text": "So in a little more\ndetail here, whenever we",
    "start": "453330",
    "end": "458789"
  },
  {
    "text": "do a rotation in an AVL tree. ",
    "start": "458790",
    "end": "469610"
  },
  {
    "text": "Let's say A, B, C, x, y. ",
    "start": "469610",
    "end": "476160"
  },
  {
    "text": "Remember rotations? Been a while since\nwe've done rotations. So we haven't changed any\nof the nodes in A, B, C,",
    "start": "476160",
    "end": "484750"
  },
  {
    "text": "but we have changed\nthe nodes x and y. So we're going to have to\ntrigger an update of y.",
    "start": "484750",
    "end": "493010"
  },
  {
    "text": "First, we'd want to\nupdate y.f and then we're going to trigger\nthe update to x.f.",
    "start": "493010",
    "end": "501420"
  },
  {
    "text": "And as long as this one can\nbe computed from its children, then we compute y.f, then we\ncan compute x from its children.",
    "start": "501420",
    "end": "509810"
  },
  {
    "text": "All right. So a constant number\nof extra things we need to do whenever\nwe do rotation. And because the rotations lie\non a single path, total cost",
    "start": "509810",
    "end": "518610"
  },
  {
    "text": "that-- once we stop doing the\nrotations, in AVL insert say,",
    "start": "518610",
    "end": "523659"
  },
  {
    "text": "then we still have to keep\nupdating up to the root. But there's only log n at\nmost log n nodes to do that.",
    "start": "523659",
    "end": "530440"
  },
  {
    "text": "OK. Same thing with 2-3 trees. We have a node split.",
    "start": "530440",
    "end": "535860"
  },
  {
    "text": "So we have, I guess,\nthree keys, four children. That's too many. So we split to two nodes\nand an extra node up here.",
    "start": "535860",
    "end": "546860"
  },
  {
    "text": " Then we just trigger an\nupdate of this f value,",
    "start": "546860",
    "end": "552380"
  },
  {
    "text": "an update of this f value,\nand an update of that f value. And because that just follows a\nsingle path everything's log n.",
    "start": "552380",
    "end": "561510"
  },
  {
    "text": "So this is a general\ntheorem about augmentation. Any function that's well\nbehaved in this sense,",
    "start": "561510",
    "end": "566850"
  },
  {
    "text": "we can maintain in AVL\ntrees and 2-3 trees.",
    "start": "566850",
    "end": "572259"
  },
  {
    "text": "And I'll remind you and state,\na little more generally,",
    "start": "572260",
    "end": "577690"
  },
  {
    "text": "what you did in 006, which are\ncalled order statistic trees in the textbook. ",
    "start": "577690",
    "end": "590540"
  },
  {
    "text": "So here we're going to--\nlet me first tell you what we're trying to achieve.",
    "start": "590540",
    "end": "596220"
  },
  {
    "text": "This is the abstract data\ntype, or the interface of the data structure. ",
    "start": "596220",
    "end": "603360"
  },
  {
    "text": "We want to do insert, delete,\nand say, successor searches.",
    "start": "603360",
    "end": "613610"
  },
  {
    "text": " It's the usual thing we want\nout of a binary search tree.",
    "start": "613610",
    "end": "619230"
  },
  {
    "text": "Predecessor too, sure. We want to do rank of a\ngiven key which is, tell me",
    "start": "619230",
    "end": "629800"
  },
  {
    "text": "what is the index of that key\nin the overall sorted order",
    "start": "629800",
    "end": "638209"
  },
  {
    "text": "of the items, of the keys? We've talked about rank a few\ntimes already in this class.",
    "start": "638210",
    "end": "643500"
  },
  {
    "text": " Depends whether you\nstart at 0 or 1, but let's say we start at one.",
    "start": "643500",
    "end": "652889"
  },
  {
    "text": "So if you say rank of the key\nthat happens to be the minimum, you want to get one. If you say rank of the key\nthat happens to be the median,",
    "start": "652890",
    "end": "659224"
  },
  {
    "text": "you want to get n over\n2 plus 1, and so on.",
    "start": "659224",
    "end": "665430"
  },
  {
    "text": "So it's a natural thing\nyou might want to find out. And the converse\noperation is select,",
    "start": "665430",
    "end": "674100"
  },
  {
    "text": "let's say of i, which is,\ngive me the key of rank i.",
    "start": "674100",
    "end": "679279"
  },
  {
    "start": "679280",
    "end": "686710"
  },
  {
    "text": "We've talked about select\nas an offline operation. Given an array,\nfind me the median.",
    "start": "686710",
    "end": "694720"
  },
  {
    "text": "Or find me the n over\nseventh rank item. And we can do that in linear\ntime given no data structure.",
    "start": "694720",
    "end": "702810"
  },
  {
    "text": "Here, we want a\ndata structure so that we can find the\nmedian, or the seventh item,",
    "start": "702810",
    "end": "708899"
  },
  {
    "text": "or the n over seventh key,\nwhatever in log n time.",
    "start": "708900",
    "end": "714630"
  },
  {
    "text": "We want to do all of these\nin log n per operation. ",
    "start": "714630",
    "end": "725240"
  },
  {
    "text": "OK. So in particular, rank of\nselective i should equal i. We're trying to find\nthe item of that rank.",
    "start": "725241",
    "end": "732210"
  },
  {
    "text": " So far, so good.",
    "start": "732210",
    "end": "737519"
  },
  {
    "text": "And just to plug these\ntwo parts together. We have this data structure\naugmentation tool,",
    "start": "737520",
    "end": "745290"
  },
  {
    "text": "we have this goal\nwe want to achieve, we're going to achieve\nthis goal by applying this technique where f\nis just the subtree size.",
    "start": "745290",
    "end": "753125"
  },
  {
    "text": "It's the number of\nnodes in that subtree because that will\nlet us compute rank.",
    "start": "753125",
    "end": "759880"
  },
  {
    "text": "So we're going to use easy tree\naugmentation with f of subtree",
    "start": "759880",
    "end": "783890"
  },
  {
    "text": "equal to the number of\nnodes in the subtree. ",
    "start": "783890",
    "end": "791230"
  },
  {
    "text": "So in order for\nthis to apply, we need to check that given a node\nx we can compute x.f just using",
    "start": "791230",
    "end": "798090"
  },
  {
    "text": "its children. This is easy. ",
    "start": "798090",
    "end": "803330"
  },
  {
    "text": "We just add everything up. So x.f would be equal to 1.",
    "start": "803330",
    "end": "809092"
  },
  {
    "text": "That's for x. Plus the sum of c.f\nfor every child c.",
    "start": "809092",
    "end": "817640"
  },
  {
    "text": " I'll write this as a\npython interpolation",
    "start": "817640",
    "end": "826250"
  },
  {
    "text": "so it looks a little\nmore like an algorithm. I'm trying to be generic here. If it's a binary\nsearch tree you just",
    "start": "826250",
    "end": "832000"
  },
  {
    "text": "do x.left.f, plus x.right.f. But this will work\nalso for 2-3 trees.",
    "start": "832000",
    "end": "839240"
  },
  {
    "text": "Pick your favorite\ndata structure. As long as there's a constant\nnumber of children then",
    "start": "839240",
    "end": "845660"
  },
  {
    "text": "this will take constant time. So we satisfied this condition. So we can do easy\ntree augmentation.",
    "start": "845660",
    "end": "851710"
  },
  {
    "text": "And now we know we\nhave subtree sizes. So given any node. We know the number of\ndescendants below that node.",
    "start": "851710",
    "end": "859930"
  },
  {
    "text": "So that's cool. It lets us compute\nrank in select. I'll just give you those\nalgorithms, quickly.",
    "start": "859930",
    "end": "869130"
  },
  {
    "text": "We can check that\nthey're log n time. ",
    "start": "869130",
    "end": "879131"
  },
  {
    "text": "Yeah. So the idea is pretty simple.",
    "start": "879131",
    "end": "884670"
  },
  {
    "text": "You have some key-- let's\nthink about binary trees now, because it's a\nlittle bit easier.",
    "start": "884670",
    "end": "890360"
  },
  {
    "text": "We have some item x. It has a left subtree,\nright subtree.",
    "start": "890360",
    "end": "898810"
  },
  {
    "text": "And now let's look up from x. Just keep calling x.parent.",
    "start": "898810",
    "end": "905670"
  },
  {
    "text": "So sometimes the parent\nis to the right of us and sometimes the parent\nis to the left of us.",
    "start": "905670",
    "end": "911890"
  },
  {
    "text": "I'm going to draw this\nin a, kind of, funny way. ",
    "start": "911890",
    "end": "918529"
  },
  {
    "text": "But this funny way has\na very special property, which is that the\nx-coordinate in this diagram",
    "start": "918530",
    "end": "925890"
  },
  {
    "text": "is the key value. Or is the sorted order\nof the keys, right? Everything in the left subtree\nof x has a value less than x.",
    "start": "925890",
    "end": "934040"
  },
  {
    "text": "If we say all the\nkeys are different. Everything to the right of x\nhas a value greater than x. If x was the left\nchild of its parent,",
    "start": "934040",
    "end": "942130"
  },
  {
    "text": "that means this thing\nis also greater than x. And if we follow a\nparent and this was",
    "start": "942130",
    "end": "948740"
  },
  {
    "text": "the right child of\nthat parent, that means this thing is less than x. So that's why I drew it all\nthe way over to the left.",
    "start": "948740",
    "end": "955329"
  },
  {
    "text": "This thing is also less\nthan x because it was a, I'll call it a left parent. Here we have a right\nparent, so that",
    "start": "955330",
    "end": "961269"
  },
  {
    "text": "means this is something\ngreater than x. And over here we have\na left parent, so this is something less than x.",
    "start": "961270",
    "end": "967021"
  },
  {
    "text": "Let's say that's the root. In general, there's\ngoing to be some left edges and some right\nedges as we go up.",
    "start": "967021",
    "end": "973529"
  },
  {
    "text": "These arrows will go either\nleft or right in a binary tree. So the rank of x is just\n1 plus the number of nodes",
    "start": "973530",
    "end": "983060"
  },
  {
    "text": "that are less than x. Number of keys that\nare less than x. So there's these guys,\nthere's these guys,",
    "start": "983060",
    "end": "990370"
  },
  {
    "text": "and there's whatever's\nhanging off-- OK. Here I've almost violated\nmy x-coordinate rule.",
    "start": "990370",
    "end": "996477"
  },
  {
    "text": "If I make these really\nnarrow, that's right.  All of these things,\nall of these nodes",
    "start": "996477",
    "end": "1004300"
  },
  {
    "text": "in the left subtrees of\nthese less than x nodes will also be less than x. If you think about\nthese other subtrees,",
    "start": "1004300",
    "end": "1010310"
  },
  {
    "text": "they're going to\nbe bigger than x. So we don't really\ncare about them. So we just want to count\nup all these nodes and all",
    "start": "1010310",
    "end": "1022420"
  },
  {
    "text": "of these nodes.  So the algorithm to do\nthat is pretty simple.",
    "start": "1022420",
    "end": "1028845"
  },
  {
    "start": "1028845",
    "end": "1036030"
  },
  {
    "text": "We're just going\nto start out with-- ",
    "start": "1036030",
    "end": "1053550"
  },
  {
    "text": "I'm going to switch from\nthis f notation to size. That's a little more natural.",
    "start": "1053550",
    "end": "1058720"
  },
  {
    "text": "In general, you might\nhave many functions. Size is the usual\nnotation for subtree size.",
    "start": "1058720",
    "end": "1068600"
  },
  {
    "text": "So we start out by counting\nup how many items are here. And if we want to\nstart at a rank of 1,",
    "start": "1068600",
    "end": "1074690"
  },
  {
    "text": "if the min has rank\n1, then I should also do plus 1 for x itself. If you wanted to start at zero\nyou just omit that plus 1.",
    "start": "1074690",
    "end": "1082490"
  },
  {
    "text": "And then, all I do is walk up\nfrom x to the root of the tree.",
    "start": "1082490",
    "end": "1089940"
  },
  {
    "text": "And whenever we go left\nfrom, say x to x prime.",
    "start": "1089940",
    "end": "1102340"
  },
  {
    "text": "So that means we\nhave an x prime. It's right child is x. And so when we went from x to\nits parent we went to the left.",
    "start": "1102340",
    "end": "1111280"
  },
  {
    "text": "Then we say rank plus\nequals x prime.left.size",
    "start": "1111280",
    "end": "1124910"
  },
  {
    "text": "plus 1 for x prime itself. And maybe x\nprime.left.size is zero.",
    "start": "1124910",
    "end": "1132074"
  },
  {
    "text": "Maybe there's no\nnodes over there. But at the very least we have\nto count those nodes that",
    "start": "1132074",
    "end": "1137650"
  },
  {
    "text": "are to the left of us. And if there's\nanything down here we add up all those things. So that lets us compute rank.",
    "start": "1137650",
    "end": "1144310"
  },
  {
    "text": "How long does it take? Well, we're just walking\nup one path from a leaf",
    "start": "1144310",
    "end": "1149770"
  },
  {
    "text": "to a root-- or not necessarily\na leaf, but from some node x to the root. And as long we're using\na balance structure",
    "start": "1149770",
    "end": "1156050"
  },
  {
    "text": "like AVL trees. I guess I want binary here,\nso let's say AVL trees.",
    "start": "1156050",
    "end": "1162390"
  },
  {
    "text": "Then this will take log n time. So I'm spending\nconstant work per step,",
    "start": "1162390",
    "end": "1168269"
  },
  {
    "text": "and there's log n steps. Clear? So that's good old rank.",
    "start": "1168270",
    "end": "1174717"
  },
  {
    "text": "Easy to do once you\nhave subtree size. Let's do select for fun. ",
    "start": "1174717",
    "end": "1194980"
  },
  {
    "text": "This may seem like review,\nbut I drew out this picture explicitly because we're\ngoing to do it a lot today.",
    "start": "1194980",
    "end": "1200110"
  },
  {
    "text": "We'll have pictures like\nthis a bunch of times. Really helps to\nthink about where the nodes are, which\nones are less than x,",
    "start": "1200110",
    "end": "1205750"
  },
  {
    "text": "which ones are greater than x. Let's do select first. ",
    "start": "1205750",
    "end": "1213500"
  },
  {
    "text": "This you may not\nhave seen in 006.",
    "start": "1213500",
    "end": "1219375"
  },
  {
    "text": "So we're going to\ndo the reverse. We're going to start at the root\nand we're going to walk down.",
    "start": "1219375",
    "end": "1225020"
  },
  {
    "text": "Sounds easy enough. But now walking down is\nkind of like doing a search but we don't have a key\nwe're searching for, we have",
    "start": "1225020",
    "end": "1231950"
  },
  {
    "text": "a rank we're searching for. So what is that rank?",
    "start": "1231950",
    "end": "1237420"
  },
  {
    "text": " Rank is i. OK. So on the other hand,\nwe have the node x.",
    "start": "1237420",
    "end": "1244910"
  },
  {
    "text": "We'd like to know the rank\nof x and compare that to i. That will tell us whether we\nshould go left, or go right,",
    "start": "1244910",
    "end": "1249990"
  },
  {
    "text": "or whether we happen\nto find the item. Now one possibility\nis we call rank of x to find the rank of x.",
    "start": "1249990",
    "end": "1256620"
  },
  {
    "text": "But that's dangerous because I'm\ngoing to have a four loop here",
    "start": "1256620",
    "end": "1262190"
  },
  {
    "text": "and it's going to\ntake log n iterations. If at every iteration\nof computing rank",
    "start": "1262190",
    "end": "1267460"
  },
  {
    "text": "of x, and rank costs\nlog n, then overall cost might be log squared n.",
    "start": "1267460",
    "end": "1273750"
  },
  {
    "text": "So I can't afford to-- I want\nto know what the rank of x is but I can't afford to\nsay rank, open paren, x.",
    "start": "1273750",
    "end": "1282470"
  },
  {
    "text": "Because that recursive\ncall will be too expensive. So what is the rank\nof x in this case? This is a little special.",
    "start": "1282470",
    "end": "1290290"
  },
  {
    "text": "What's that? AUDIENCE: Number of\nleft children plus 1. PROFESSOR: Number\nof left, or the size of the left subtree plus 1.",
    "start": "1290290",
    "end": "1295980"
  },
  {
    "text": "Yep. ",
    "start": "1295980",
    "end": "1301200"
  },
  {
    "text": "Plus 1 if we're counting,\nstarting at one. Very good. ",
    "start": "1301200",
    "end": "1308529"
  },
  {
    "text": "I'm slowly getting better. Didn't hit anyone this time. OK. So at least for the\nroot, this is the rank,",
    "start": "1308529",
    "end": "1315679"
  },
  {
    "text": "and that only takes us constant\ntime in the special case. So we'll have to\ncheck that it's still holds after I do the loop. But it will.",
    "start": "1315680",
    "end": "1322269"
  },
  {
    "text": "So, cool. Now there are three cases. If i equals rank. If the rank we're\nsearching for is the rank",
    "start": "1322270",
    "end": "1328360"
  },
  {
    "text": "that we happen to have,\nthen we're done, right? We just return x. That's the easy case.",
    "start": "1328360",
    "end": "1334900"
  },
  {
    "text": "More likely is that I will be\neither less than or greater than the rank of x.",
    "start": "1334900",
    "end": "1340790"
  },
  {
    "start": "1340790",
    "end": "1348710"
  },
  {
    "text": "OK. So if i is less than the\nrank, this is fairly easy.",
    "start": "1348710",
    "end": "1353970"
  },
  {
    "text": "We just say x equals x.left. ",
    "start": "1353970",
    "end": "1360756"
  },
  {
    "text": "Did I get that right? Yep. In this case, the rank. So here we have x.",
    "start": "1360756",
    "end": "1366090"
  },
  {
    "text": "It's at rank, rank. And then we have the left\nsubtree and the right subtree.",
    "start": "1366090",
    "end": "1372476"
  },
  {
    "text": "And so if the rank\nwere searching for is less than rank, that\nmeans we know it's in here. So we should go left.",
    "start": "1372476",
    "end": "1377900"
  },
  {
    "text": "And if we just said x\nequals x.left you might ask, well what rank are we\nsearching for in here?",
    "start": "1377900",
    "end": "1383419"
  },
  {
    "text": "Well, exactly the same rank. Fine. That's easy case.",
    "start": "1383420",
    "end": "1389160"
  },
  {
    "text": "In the other situation, if\nwe're searching in here, we're searching for\nrank greater than rank.",
    "start": "1389160",
    "end": "1395090"
  },
  {
    "text": "Then I want to go\nright but the new rank that I'm searching for\nis local to this subtree.",
    "start": "1395090",
    "end": "1403750"
  },
  {
    "text": "I'm searching for\ni minus this stuff.",
    "start": "1403750",
    "end": "1409190"
  },
  {
    "text": "This stuff is rank. So I'm going to let\ni be i minus rank.",
    "start": "1409190",
    "end": "1417290"
  },
  {
    "text": "Make sure I don't have\nany off by 1 errors. That seems to be right.",
    "start": "1417290",
    "end": "1422540"
  },
  {
    "text": "OK. And then I do a loop. So I'll write repeat. ",
    "start": "1422541",
    "end": "1430570"
  },
  {
    "text": "So then I'm going to\ngo up here and say, OK. Now relative to this thing.",
    "start": "1430570",
    "end": "1436150"
  },
  {
    "text": "What is the rank of the\nroot of this subtree? Well, it's again going to be\nthat node .left.size plus 1.",
    "start": "1436150",
    "end": "1444020"
  },
  {
    "text": "And now I have the new\nrank I'm searching for, i. And I just keep going. You could write this recursively\nif you like, but here's",
    "start": "1444020",
    "end": "1452040"
  },
  {
    "text": "an iterative version. So it's actually very familiar\nto the select algorithm",
    "start": "1452040",
    "end": "1458230"
  },
  {
    "text": "that we had, like when we\ndid deterministic linear time median finding or\nrandomized median finding.",
    "start": "1458230",
    "end": "1465550"
  },
  {
    "text": "They had a very similar\nkind of recursion. But in that case, they\nwere spending linear time",
    "start": "1465550",
    "end": "1471150"
  },
  {
    "text": "to do the partition\nand that was expensive. Here, we're just spending\nconstant time at each node",
    "start": "1471150",
    "end": "1476539"
  },
  {
    "text": "and so the overall\ncost is log n. So that's nice. Any questions about that? ",
    "start": "1476540",
    "end": "1484480"
  },
  {
    "text": "OK. I have a note here. Subtree size is obvious once you\nknow that's what you should do.",
    "start": "1484480",
    "end": "1491840"
  },
  {
    "text": "Another natural\nthing to try to do would be to augment,\nfor each node, what is the rank of that node?",
    "start": "1491840",
    "end": "1497370"
  },
  {
    "text": "Because then rank is\nreally easy to find. And then select would\nbasically be a regular search. I just look at the\nrank of the root,",
    "start": "1497370",
    "end": "1503826"
  },
  {
    "text": "I see whether the\nrank I'm looking for is too big, or too small, and I\ngo left or right, accordingly. What would be bad about\naugmenting with rank of a node?",
    "start": "1503827",
    "end": "1511890"
  },
  {
    "text": " Updates. Why? ",
    "start": "1511890",
    "end": "1519300"
  },
  {
    "text": "What's a bad example\nfor an update? AUDIENCE: If you add\nnew in home element.",
    "start": "1519300",
    "end": "1525132"
  },
  {
    "text": "PROFESSOR: Right. Say we insert a new\nminimum element. ",
    "start": "1525132",
    "end": "1531810"
  },
  {
    "text": "Good catch, cameraman. That was for the\ncamera, obviously. So, right.",
    "start": "1531810",
    "end": "1537610"
  },
  {
    "text": "If we insert, this is off to\nthe side, but say we insert, I'll call it minus infinity.",
    "start": "1537610",
    "end": "1543600"
  },
  {
    "text": "A new key that is smaller\nthan all other keys, then the rank of\nevery node changes.",
    "start": "1543600",
    "end": "1549140"
  },
  {
    "text": "So that's bad. It means that easy tree\naugmentation, in particular,",
    "start": "1549140",
    "end": "1555695"
  },
  {
    "text": "isn't going to apply. And furthermore, it would\ntake linear time to do this. And you could keep inserting,\nif you insert keys in decreasing",
    "start": "1555695",
    "end": "1562390"
  },
  {
    "text": "order from there, every\ntime you do an insert, all the ranks increase by one. Maintaining that's going to\ncost linear time per update.",
    "start": "1562390",
    "end": "1569360"
  },
  {
    "text": "So you have to be really\ncareful that the function you want to store actually\ncan be maintained.",
    "start": "1569360",
    "end": "1576630"
  },
  {
    "text": "Be very careful about that,\nsay, on the quiz coming up, that when you're\naugmenting something",
    "start": "1576630",
    "end": "1581720"
  },
  {
    "text": "you can actually maintain it. For example, it's very hard to\nmaintain the depths of nodes",
    "start": "1581720",
    "end": "1587010"
  },
  {
    "text": "because when you do a rotation\na whole lot of depths change. Depth is counting from the root.",
    "start": "1587010",
    "end": "1592770"
  },
  {
    "text": "How deep am I? When I do a rotation\nthen this entire subtree went down by one. This entire subtree\nwent up by one.",
    "start": "1592770",
    "end": "1600830"
  },
  {
    "text": "In this picture. But it's very easy to\nmaintain heights, for example. Height counting from\nthe bottom is OK,",
    "start": "1600830",
    "end": "1606590"
  },
  {
    "text": "because I don't affect\nthe height of a, b, and c. I affect it for x and y\nbut that's just two nodes.",
    "start": "1606590",
    "end": "1612090"
  },
  {
    "text": "That I can afford. So that's what you want to be\ncareful of in the easy tree augmentation.",
    "start": "1612090",
    "end": "1617525"
  },
  {
    "text": " So most the time easy tree\naugmentation does the job.",
    "start": "1617525",
    "end": "1623960"
  },
  {
    "text": "But in the remaining\ntwo examples, I want to show you cooler\nexamples of augmentation.",
    "start": "1623960",
    "end": "1630747"
  },
  {
    "text": "These are things you\nprobably wouldn't be expected to come up with\non your own, but they're cool.",
    "start": "1630747",
    "end": "1637779"
  },
  {
    "text": "And they let us do more\nsophisticated operations. ",
    "start": "1637780",
    "end": "1647970"
  },
  {
    "text": "So the first one is\ncalled level linking. ",
    "start": "1647970",
    "end": "1656490"
  },
  {
    "text": "And here we're going to do it\nin the context of 2-3 trees, partly for variety.",
    "start": "1656490",
    "end": "1662255"
  },
  {
    "text": " So the idea of level\nlinking is very simple.",
    "start": "1662255",
    "end": "1669409"
  },
  {
    "text": "Let me draw a 2-3 tree. ",
    "start": "1669410",
    "end": "1683340"
  },
  {
    "text": "Not a very impressive 2-3 tree. I guess I don't feel\nlike drawing too much. Level linking is the\nidea of, in addition to",
    "start": "1683340",
    "end": "1690710"
  },
  {
    "text": "these child and\nparent pointers, we're going to add links\non all the levels.",
    "start": "1690710",
    "end": "1695815"
  },
  {
    "text": " Horizontal links,\nyou might call them.",
    "start": "1695815",
    "end": "1701140"
  },
  {
    "start": "1701140",
    "end": "1734180"
  },
  {
    "text": "OK. So that's nice. Two questions-- can we do this?",
    "start": "1734180",
    "end": "1739350"
  },
  {
    "text": "And what's it good for? So let's start with\ncan we do this. Remember in 2-3 trees all\nwe have to think about",
    "start": "1739350",
    "end": "1745420"
  },
  {
    "text": "are splits and merges. So in a split, we have,\nfor a brief period,",
    "start": "1745420",
    "end": "1752570"
  },
  {
    "text": "let's say three\nkeys, four children. That's too many.",
    "start": "1752570",
    "end": "1757610"
  },
  {
    "text": "So we change that to-- ",
    "start": "1757610",
    "end": "1766524"
  },
  {
    "text": "I'm going to change\nthis in a moment. For now, this is the split\nyou know and love, maybe. At least know.",
    "start": "1766524",
    "end": "1772500"
  },
  {
    "text": "And if we think about where\nthe leveling pointers are, we have one before.",
    "start": "1772500",
    "end": "1778910"
  },
  {
    "text": "And then we just need to\ndistribute those pointers to the two resulting nodes.",
    "start": "1778910",
    "end": "1784539"
  },
  {
    "text": "And then we have to create a\nnew pointer between the nodes that we just created. This is, of course, easy to do.",
    "start": "1784540",
    "end": "1790429"
  },
  {
    "text": "We're here. We're taking this node. We're splitting it in half. So we have the nodes\nright in our hands so just",
    "start": "1790430",
    "end": "1795860"
  },
  {
    "text": "add pointers between them. And key thing is, there's some\nnode over here on the left. It used to point\nto this node, now",
    "start": "1795860",
    "end": "1802360"
  },
  {
    "text": "we have to change it to\npoint to the left version. The left half of the node. And there's some node\nover on the right.",
    "start": "1802360",
    "end": "1807696"
  },
  {
    "text": "We have to change it's\nleft pointer to point to this right half of the node.",
    "start": "1807696",
    "end": "1813897"
  },
  {
    "text": "But that's it. Constant time. So this doesn't fall under\nthe category of easy tree",
    "start": "1813897",
    "end": "1820010"
  },
  {
    "text": "augmentation because this is\nnot isolated to the subtree. We're also dealing with it's\nleft and right subtrees.",
    "start": "1820010",
    "end": "1827380"
  },
  {
    "text": "But still easy to\ndo in constant time. ",
    "start": "1827380",
    "end": "1836599"
  },
  {
    "text": "Merging nodes is\ngoing to be similar. ",
    "start": "1836599",
    "end": "1848130"
  },
  {
    "text": "If we steal a node from our\nparents or former sibling, nothing happens in\nterms of level links.",
    "start": "1848130",
    "end": "1855380"
  },
  {
    "text": "But if we have, say, an empty\nnode and a node that cannot afford any stealing.",
    "start": "1855380",
    "end": "1861290"
  },
  {
    "text": "So we have single child\nhere, two children, and we merge it into-- ",
    "start": "1861290",
    "end": "1869840"
  },
  {
    "text": "We're taking something\nfrom our parent. Bringing it down. Then we have three\nchildren afterwards.",
    "start": "1869840",
    "end": "1875550"
  },
  {
    "text": "Again, we used to have\nthese level pointers. Now we just have\nthese level pointers.",
    "start": "1875550",
    "end": "1882100"
  },
  {
    "text": "It's easy to maintain. It's just a constant\nsize neighborhood. Because we have\nthe level links, we can get to our left\nand right neighbors",
    "start": "1882100",
    "end": "1888940"
  },
  {
    "text": "and change where\nthe links point to. So easy to maintain\nin constant time.",
    "start": "1888940",
    "end": "1894730"
  },
  {
    "start": "1894730",
    "end": "1903390"
  },
  {
    "text": "I'll call it constant overhead. Every time we do\na split or merge we spend additional\nconstant time to do it.",
    "start": "1903390",
    "end": "1910339"
  },
  {
    "text": "We're already spending\nconstant time. So just changes everything\nby constant factor.",
    "start": "1910339",
    "end": "1916410"
  },
  {
    "text": "So far, so good. Now, I'm going to have\nto tweak this data",
    "start": "1916410",
    "end": "1921600"
  },
  {
    "text": "structure a little bit. But let me first tell you why. What am I trying to achieve\nwith this data structure? ",
    "start": "1921600",
    "end": "1936680"
  },
  {
    "text": "What I'm trying to achieve is\nsomething called the finger search property. ",
    "start": "1936680",
    "end": "1954164"
  },
  {
    "text": "So let's just think\nabout the case where I'm doing a\nsuccessful search. I'm searching for key x and I\nfind it in the data structure.",
    "start": "1954164",
    "end": "1961840"
  },
  {
    "text": "I find it in the tree.  Suppose I found one-- I\nsearch for x, I found it.",
    "start": "1961840",
    "end": "1969890"
  },
  {
    "text": "And then I search\nfor another key y. Actually I think\nI'll do the reverse. First I found y, now\nI'm searching for x.",
    "start": "1969890",
    "end": "1976460"
  },
  {
    "text": "If x and y are\nnearby in the tree, I want this to run\nespecially fast.",
    "start": "1976460",
    "end": "1982440"
  },
  {
    "text": "For example, if x is\nthe successor of y I want this to\ntake constant time.",
    "start": "1982440",
    "end": "1987789"
  },
  {
    "text": "That would be nice. In the worst case x and y\nare very far away from me",
    "start": "1987790",
    "end": "1992880"
  },
  {
    "text": "in the tree then I want\nit to take log n time. So how could I interpolate\nbetween constant time",
    "start": "1992880",
    "end": "1999570"
  },
  {
    "text": "for finding the\nsuccessor and log n time for finding the\nworst case search.",
    "start": "1999570",
    "end": "2008080"
  },
  {
    "text": "So I'm going to call\nthis search of x from y.",
    "start": "2008080",
    "end": "2015039"
  },
  {
    "text": "Meaning, this is a little\nimprecise, but what I mean is when I call\nsearch, I tell it",
    "start": "2015040",
    "end": "2021720"
  },
  {
    "text": "where I've already found y. And here it is. Here's the node storing y. And now I'm given a key x.",
    "start": "2021720",
    "end": "2029159"
  },
  {
    "text": "And I want to find\nthat key x given the node that stores key y.",
    "start": "2029160",
    "end": "2034600"
  },
  {
    "text": "So how long should this take? Will be a good\nway to interpolate between constant\ntime at one extreme.",
    "start": "2034600",
    "end": "2041419"
  },
  {
    "text": "The good case, when\nx and y are basically neighbors in sorted\norder, versus",
    "start": "2041420",
    "end": "2048619"
  },
  {
    "text": "log n time, in the worst case. AUDIENCE: Distance\nalong the graph.",
    "start": "2048620",
    "end": "2054119"
  },
  {
    "text": "PROFESSOR: Distance\nalong the graph. That would be one\nreasonable definition. So I have a tree which you\ncould think of as a graph.",
    "start": "2054120",
    "end": "2062050"
  },
  {
    "text": "Measure the shortest\npath length from x to y. Or we have a more\nsophisticated graph over here.",
    "start": "2062050",
    "end": "2069339"
  },
  {
    "text": "Maybe that length. The trouble with the\ndistance in the graph, that's a reasonable suggestion,\nbut it's very data structure",
    "start": "2069340",
    "end": "2075399"
  },
  {
    "text": "specific. If I use an AVL tree\nwithout level links, then the distance\ncould be one thing,",
    "start": "2075400",
    "end": "2082230"
  },
  {
    "text": "whereas if I use a 2-3 tree,\neven without level lengths, it's going to be a\ndifferent distance.",
    "start": "2082230",
    "end": "2087469"
  },
  {
    "text": "If I use a 2-3 tree\nwith level lengths it's going to be yet\nanother distance. So that's a little unsatisfying.",
    "start": "2087469",
    "end": "2093350"
  },
  {
    "text": "I want this to be an\nanswer to a question. I don't want to phrase the\nquestion in terms of that data",
    "start": "2093350",
    "end": "2098610"
  },
  {
    "text": "structure. AUDIENCE: Difference\nbetween ranks of x and y? PROFESSOR: Difference between\nranks between x and y.",
    "start": "2098610",
    "end": "2103720"
  },
  {
    "text": "That's close. ",
    "start": "2103720",
    "end": "2109830"
  },
  {
    "text": "So I'm going to look at the\nrank of x and rank of y. Let's say, take the\nabsolute difference.",
    "start": "2109830",
    "end": "2115010"
  },
  {
    "text": "That's kind of how far away\nthey are in sorted order. Do you want to add anything?",
    "start": "2115010",
    "end": "2120505"
  },
  {
    "text": "AUDIENCE: Log? PROFESSOR: Log. Yeah.  Because in the worst case\nthe difference in ranks",
    "start": "2120506",
    "end": "2126990"
  },
  {
    "text": "could be linear. So I want to add a log out\nhere to get log n in that worst case.",
    "start": "2126990",
    "end": "2132450"
  },
  {
    "text": " Add a big o for safety.",
    "start": "2132450",
    "end": "2137660"
  },
  {
    "text": "That's how much time\nwe want to achieve. So this would be the\nfinger search property that you can solve this\nproblem in this much time.",
    "start": "2137660",
    "end": "2144850"
  },
  {
    "text": "Again, difference in\nranks is at most n. So this is at most log n. But if y is the successor of\nx this will only be constant",
    "start": "2144850",
    "end": "2154089"
  },
  {
    "text": "and this will be constant. So this is great if you're\ndoing lots of searches and you tend to search for\nthings that are nearby,",
    "start": "2154090",
    "end": "2161909"
  },
  {
    "text": "but sometimes you search\nfor things are far away. This gives you a nice bound. ",
    "start": "2161909",
    "end": "2172099"
  },
  {
    "text": "On the one hand, we\nhave, this is our goal. Log difference of ranks. On the other hand, we\nhave the suggestion",
    "start": "2172100",
    "end": "2178200"
  },
  {
    "text": "that what we can\nachieve is something like the distance in the graph. ",
    "start": "2178200",
    "end": "2185079"
  },
  {
    "text": "But we have a problem with this. I used to think that data\nstructure solved this problem, but it doesn't. ",
    "start": "2185080",
    "end": "2194619"
  },
  {
    "text": "Let me just draw-- actually\nI have a tree right there. I'm going to use that one. ",
    "start": "2194620",
    "end": "2204900"
  },
  {
    "text": "Suppose x is here and y is here.",
    "start": "2204900",
    "end": "2211529"
  },
  {
    "text": "OK. This is a bit of a small tree\nbut if you think about it long enough, this node is\nthe predecessor of this node.",
    "start": "2211530",
    "end": "2220670"
  },
  {
    "text": "So their difference\nin ranks should be 1. ",
    "start": "2220670",
    "end": "2226289"
  },
  {
    "text": "But the distance in\nthe graph here is two. Not very impressive. But in general, you have\na tree of height log n.",
    "start": "2226290",
    "end": "2233809"
  },
  {
    "text": "If you look at the root, and\nthe predecessor of the root, they will have a rank\ndifference of one",
    "start": "2233810",
    "end": "2240120"
  },
  {
    "text": "by definition of predecessor. But the graph distance\nwill be log n.",
    "start": "2240120",
    "end": "2245561"
  },
  {
    "text": "So that's bad news, because if\nwe're only following pointers there's no way to get from\nhere to there in constant time.",
    "start": "2245561",
    "end": "2251980"
  },
  {
    "text": "So we're not quite there. We're going to use another tweak\nthat data structure, which is",
    "start": "2251980",
    "end": "2263360"
  },
  {
    "text": "store the data in the leaves. ",
    "start": "2263360",
    "end": "2272528"
  },
  {
    "text": "Tried to find a data structure\nthat didn't require this and still got finger search. But as far as I\nknow, there is none.",
    "start": "2272529",
    "end": "2278000"
  },
  {
    "text": "No such data structure.  If you look at, say,\nWikipedia about B-trees,",
    "start": "2278000",
    "end": "2284427"
  },
  {
    "text": "you'll see there's a ton\nof variations of B-trees. B+-trees, B*-trees. This is one of those.",
    "start": "2284427",
    "end": "2289462"
  },
  {
    "text": "I think B+-trees.  As you saw, B-trees or\n2-3 trees, every node",
    "start": "2289462",
    "end": "2295840"
  },
  {
    "text": "stored one or two keys. And each key only\nexisted in one spot.",
    "start": "2295840",
    "end": "2303080"
  },
  {
    "text": "We're still only going to put\neach key in one spot, kind of. But it's only going\nto be the leaf spots.",
    "start": "2303080",
    "end": "2310029"
  },
  {
    "text": "OK. Good news is most nodes\nare leaves, right? Constant fraction of the\nnodes are going to be leaves. So it doesn't change too\nmuch from a space efficiency",
    "start": "2310030",
    "end": "2318720"
  },
  {
    "text": "standpoint. If we just put data down\nhere and don't put-- I'm not going to put any\nkeys up here for now.",
    "start": "2318720",
    "end": "2324050"
  },
  {
    "text": " So this a little weird.",
    "start": "2324050",
    "end": "2331079"
  },
  {
    "text": "Let me draw an example\nof such a tree. So maybe we have 2, and 5,\nand 7, and 8, 9, let's say.",
    "start": "2331080",
    "end": "2346180"
  },
  {
    "text": " Let's put 1 here. So I'm going to have a node\nhere with three children, a node",
    "start": "2346180",
    "end": "2354590"
  },
  {
    "text": "here with two\nchildren, and here's a node with two children. So I think this mimics\nthis tree, roughly.",
    "start": "2354590",
    "end": "2362120"
  },
  {
    "text": "I got it exactly right. So here I've taken\nthis tree structure. I've redrawn it.",
    "start": "2362120",
    "end": "2367330"
  },
  {
    "text": "There's now no keys\nin these nodes. But everything else is\ngoing to be the same. Every node is going\nto have 0 children",
    "start": "2367330",
    "end": "2374400"
  },
  {
    "text": "if it's a leaf, or two, or\nthree children otherwise. Never have one child\nbecause then you",
    "start": "2374400",
    "end": "2379540"
  },
  {
    "text": "wouldn't get logarithmic depth. All the leaves are going\nto be at the same depth. ",
    "start": "2379540",
    "end": "2386380"
  },
  {
    "text": "And that's it. OK. That is a 2-3 tree with the\ndata stored in the leaves.",
    "start": "2386380",
    "end": "2392410"
  },
  {
    "text": "It's a useful trick to know. Now we're going to do a\nlevel linked 2-3 tree. So in addition to\nthat picture, we're",
    "start": "2392410",
    "end": "2398620"
  },
  {
    "text": "going to have links like this. ",
    "start": "2398620",
    "end": "2406454"
  },
  {
    "text": "OK. And I should check that I can\nstill do insert and delete into these structures. It's actually not too hard.",
    "start": "2406455",
    "end": "2412960"
  },
  {
    "text": "But let's think about it. ",
    "start": "2412960",
    "end": "2430760"
  },
  {
    "text": "I think, actually,\nit might be easier. Let's see. ",
    "start": "2430760",
    "end": "2436640"
  },
  {
    "text": "So if I want to\ndo an insert-- OK.",
    "start": "2436640",
    "end": "2443562"
  },
  {
    "text": "I have to first search\nfor where I'm inserting. I haven't told you\nhow to do search yet.",
    "start": "2443562",
    "end": "2448600"
  },
  {
    "text": "OK. So let's first\nthink about search. ",
    "start": "2448600",
    "end": "2455780"
  },
  {
    "text": "What we're going to do is\ndata structure augmentation.",
    "start": "2455780",
    "end": "2461380"
  },
  {
    "text": "We have simple\ntree augmentation. So I'm going to do\nit and each node,",
    "start": "2461380",
    "end": "2468079"
  },
  {
    "text": "what the functions\nI'm going to store are the minimum\nkey in the subtree, and the maximum\nkey in the subtree.",
    "start": "2468080",
    "end": "2473710"
  },
  {
    "start": "2473710",
    "end": "2483700"
  },
  {
    "text": "There are many ways to\ndo this, but I think this is kind of the simplest. ",
    "start": "2483700",
    "end": "2493450"
  },
  {
    "text": "So what that means\nis at this node, I'm going to store 1 as\nthe min and 7 as the max.",
    "start": "2493450",
    "end": "2503240"
  },
  {
    "text": "And at this node it's\ngoing to be 1 at the min and 9 at the max. And here we have 8 as\nthe min and 9 as the max.",
    "start": "2503240",
    "end": "2512010"
  },
  {
    "text": "Again min and max of\nsubtrees are easy to store. If I ever change a\nnode I can update it",
    "start": "2512010",
    "end": "2517980"
  },
  {
    "text": "based on its children,\njust by looking at the min of the\nleftmost child and the max",
    "start": "2517980",
    "end": "2523070"
  },
  {
    "text": "of the rightmost child. If I didn't know 1\nand 9, I could just look at this min and\nthat max and that's",
    "start": "2523070",
    "end": "2529300"
  },
  {
    "text": "going to be the min and the\nmax of the overall tree. So in constant time\nI can update the min and the max of a\nnode given the min",
    "start": "2529300",
    "end": "2536100"
  },
  {
    "text": "and the max of its children. Special case is at the leaves. Then you have to actually\nlook at keys and compare them.",
    "start": "2536100",
    "end": "2542330"
  },
  {
    "text": "But leaves only have,\nat most, two keys. So pretty easy to compare\nthem in constant time.",
    "start": "2542330",
    "end": "2549120"
  },
  {
    "text": "OK. So that's how I do\nthe augmentation. Now how do I do a search? Well, if I'm at a node and\nI'm searching for a key.",
    "start": "2549120",
    "end": "2557405"
  },
  {
    "text": "Well, let's say\nI'm at this node. I'm searching for a key like 8. What I'm going to do is\nlook at all of the children.",
    "start": "2557405",
    "end": "2564497"
  },
  {
    "text": "In this case, there's two. In the worst case there's three. I look at the min and max\nand I see where does 8 fall?",
    "start": "2564497",
    "end": "2570810"
  },
  {
    "text": "Well it falls in this interval. If I was searching for 7\n1/2 I know it's not there.",
    "start": "2570810",
    "end": "2576400"
  },
  {
    "text": "It's going to be\nin between here. If I'm doing a successor\nthen I'll go to the right.",
    "start": "2576400",
    "end": "2583420"
  },
  {
    "text": "If I'm doing predecessor\nI'll go to the left. And then take either the maximum\nitem or the minimum item.",
    "start": "2583420",
    "end": "2588860"
  },
  {
    "text": "If I'm searching\nfor 8 I see, oh. 8 falls in the interval\nbetween 8 and 9, so I should clearly\ntake the right child",
    "start": "2588860",
    "end": "2593970"
  },
  {
    "text": "among those two children. In general, there's\nthree children. Three intervals. Constant time. I can find where my key\nfalls in the interval.",
    "start": "2593970",
    "end": "2600829"
  },
  {
    "text": "OK. So search is going to take\nlog n time again, provided I have these mins and maxs.",
    "start": "2600830",
    "end": "2606570"
  },
  {
    "text": " If you stare at it\nlong enough, this is pretty much the same thing\nas regular search in a 2-3 tree.",
    "start": "2606570",
    "end": "2614960"
  },
  {
    "text": "But I've put the data\njust one level down. OK.",
    "start": "2614960",
    "end": "2620350"
  },
  {
    "text": " Good. That was regular search.",
    "start": "2620350",
    "end": "2626430"
  },
  {
    "text": "I still need to do finger\nsearch, but we'll get there. And now, if I want to do\nan insert into this data structure, what happens.",
    "start": "2626430",
    "end": "2634329"
  },
  {
    "text": "Well I search for the key\nlet's say I'm inserting 6. So maybe I go here. I say because 6.",
    "start": "2634330",
    "end": "2640760"
  },
  {
    "text": "Is in this interval. 6 is in neither of\nthese intervals. But it's closest to the interval\n2, 5, or the interval 7.",
    "start": "2640760",
    "end": "2647350"
  },
  {
    "text": "Let's say I go down to 2, 5. And well, to insert 6 I'll\njust add a 6 on there.",
    "start": "2647350",
    "end": "2653299"
  },
  {
    "text": "Of course, now that\nnode is too big. So there's still going to be a\nsplit case at the leaves where",
    "start": "2653300",
    "end": "2658839"
  },
  {
    "text": "I have let's say,\na,b,c, too many keys.",
    "start": "2658840",
    "end": "2664460"
  },
  {
    "text": "I'm going to split\nthat into a,b and c. This is different from before.",
    "start": "2664460",
    "end": "2670849"
  },
  {
    "text": "It used to be I would\npromote b to the parent because the parent\nneeded the key there.",
    "start": "2670850",
    "end": "2676030"
  },
  {
    "text": "Now parents don't have keys. So I'm just going to split\nthis thing, roughly, in half.",
    "start": "2676030",
    "end": "2682000"
  },
  {
    "text": "It works. It's still the case that\nwhoever was the parent up",
    "start": "2682000",
    "end": "2687220"
  },
  {
    "text": "here now has an\nadditional child. One more child. So maybe that node\nnow has four children",
    "start": "2687220",
    "end": "2694020"
  },
  {
    "text": "but it's supposed\nto be two or three. So if I have a node with four\nchildren, what I'm going to do,",
    "start": "2694020",
    "end": "2701630"
  },
  {
    "text": "I'm suppose to use\nthese fancy arrows. What do I do in this case?",
    "start": "2701630",
    "end": "2706819"
  },
  {
    "text": "It's just going to split\nthat into two nodes with two children. And again this used\nto have a parent.",
    "start": "2706820",
    "end": "2713410"
  },
  {
    "text": "Now that parent has\nan additional child, and that may cause\nanother split. It's just like before.",
    "start": "2713410",
    "end": "2719030"
  },
  {
    "text": "Was just potentially split\nall the way up to the root. If we split the root then\nwe get an additional level.",
    "start": "2719030",
    "end": "2726609"
  },
  {
    "text": "But we could do all this and\nwe can still maintain our level",
    "start": "2726610",
    "end": "2732040"
  },
  {
    "text": "links, if we want. ",
    "start": "2732040",
    "end": "2737430"
  },
  {
    "text": "But everything will take log n. I won't draw the\ndelete case, as delete is slightly more annoying.",
    "start": "2737430",
    "end": "2743660"
  },
  {
    "text": "But I think, in\nthis case, you never have to worry about where\nis the key coming from, your child or your parent?",
    "start": "2743660",
    "end": "2749740"
  },
  {
    "text": "You're just merging nodes so\nit's a little bit simpler. But you have to deal\nwith the leaf case separately from\nthe nonleaf case.",
    "start": "2749740",
    "end": "2756880"
  },
  {
    "text": "OK. So all this was to\nconvince you that we can store data in the leaves. 2-3 trees still work fine.",
    "start": "2756880",
    "end": "2762310"
  },
  {
    "text": "Now I claim that the graph\ndistance in level link trees is within a constant factor\nof the finger search bound.",
    "start": "2762310",
    "end": "2770609"
  },
  {
    "text": "So I claim I can get the finger\nsearch property in 2-3 trees, with data in the leaves,\nwith level links.",
    "start": "2770610",
    "end": "2777359"
  },
  {
    "text": "So lots of changes here. But in the end, we're going\nto get a finger search bound.",
    "start": "2777360",
    "end": "2784210"
  },
  {
    "text": "Let's go over here. ",
    "start": "2784210",
    "end": "2805805"
  },
  {
    "text": "So here's a finger\nsearch operation.  First thing I want to\ndo is identify a node",
    "start": "2805805",
    "end": "2813580"
  },
  {
    "text": "that I'm working with. I want to start from y's node. So we're supposing that we're\ntold the node, a leaf, that",
    "start": "2813580",
    "end": "2821839"
  },
  {
    "text": "contains y. So I'm going to\nlet v be that leaf. ",
    "start": "2821840",
    "end": "2834670"
  },
  {
    "text": "OK. Because we're supposing\nwe've already found y, and now all the data\nis in the leaves.",
    "start": "2834670",
    "end": "2839940"
  },
  {
    "text": "So give me the leaf\nthat contains y. So that should\ntake constant time. That's just part of the input.",
    "start": "2839940",
    "end": "2846790"
  },
  {
    "text": "Now I'm going to do a\ncombination of going up and horizontal.",
    "start": "2846790",
    "end": "2851850"
  },
  {
    "text": "So starting at a leaf. And the first thing I'm\ngoing to do is check,",
    "start": "2851850",
    "end": "2857430"
  },
  {
    "text": "does this leaf\ncontain what I want? Does it contain the key I'm\nsearching for, which is x?",
    "start": "2857430",
    "end": "2864849"
  },
  {
    "text": "So that's going to be the case. At every node I store\nthe min and the max. So if x happens to fall\nbetween the min and the max,",
    "start": "2864850",
    "end": "2873770"
  },
  {
    "text": "then I'm happy. Then I'm going to do a\nregular search in v's subtree.",
    "start": "2873770",
    "end": "2886320"
  },
  {
    "text": "This seems weird in\nthe case of a leaf. In the case of a\nleaf, this is just to check the two\nkeys that are there.",
    "start": "2886320",
    "end": "2891580"
  },
  {
    "text": "Which one is x. OK. But in general I gave\nyou this search algorithm which was, if I decide\nwhich child to take,",
    "start": "2891580",
    "end": "2900830"
  },
  {
    "text": "according to the ranges,\nthat's a downward search. So that's what I'm calling\nregular search here.",
    "start": "2900830",
    "end": "2906204"
  },
  {
    "text": "Maybe downward would\nbe a little better. ",
    "start": "2906204",
    "end": "2913710"
  },
  {
    "text": "This is the usual\nlog n time thing. But we're going to claim\na bound better than log n.",
    "start": "2913710",
    "end": "2920980"
  },
  {
    "text": "If this is not the\ncase, then I know x either falls before\nv.min or after v.max.",
    "start": "2920980",
    "end": "2926260"
  },
  {
    "text": " So if x is less than v.min\nthen I'm going to go left.",
    "start": "2926260",
    "end": "2938100"
  },
  {
    "text": "v equals v. I'll call it\nlevel left to be clear.",
    "start": "2938100",
    "end": "2944710"
  },
  {
    "text": "You might say left\nis the left child. There's no left child\nhere, of course. But level left is clear. We take the horizontal\nleft pointer.",
    "start": "2944710",
    "end": "2953100"
  },
  {
    "text": "And otherwise x is\ngreater than v.max. And in that case\nI will go right.",
    "start": "2953100",
    "end": "2961374"
  },
  {
    "text": "That seems logical.  And in both cases\nwe're going to go up.",
    "start": "2961374",
    "end": "2972650"
  },
  {
    "text": "x equals x.parent Whoops. v equals v.parent.",
    "start": "2972650",
    "end": "2979050"
  },
  {
    "text": "X is not changing here. X is a key we're searching\nfor. v is the node. V for vertex.",
    "start": "2979050",
    "end": "2986020"
  },
  {
    "text": "So we're always going\nto go up, and then we're going to go\neither left or right,",
    "start": "2986020",
    "end": "2991329"
  },
  {
    "text": "and we're going to keep\ndoing that until we find a subtree that contains\nx in terms of key range.",
    "start": "2991329",
    "end": "2996690"
  },
  {
    "text": "Then we're going\nto stop this part and we're just going\nto do downward search. I should say return\nhere or something.",
    "start": "2996690",
    "end": "3003894"
  },
  {
    "text": "I'm going to do a\ndownward search, which was this regular algorithm. And then whatever it finds,\nthat's what I return.",
    "start": "3003894",
    "end": "3012140"
  },
  {
    "text": "I claim the algorithm\nshould be clear. What's less clear is that\nit achieves the bound that we want.",
    "start": "3012140",
    "end": "3017839"
  },
  {
    "text": "But I claim that this will\nachieve the finger search property.",
    "start": "3017840",
    "end": "3023140"
  },
  {
    "text": "Let me draw a picture\nof what this thing looks like kind of generically.",
    "start": "3023140",
    "end": "3033174"
  },
  {
    "text": "On small examples it's hard\nto see what's going on. So I'm going to draw a\npiece of a large example.",
    "start": "3033175",
    "end": "3038924"
  },
  {
    "start": "3038925",
    "end": "3044160"
  },
  {
    "text": "Let's say we start here. This is where y was.",
    "start": "3044160",
    "end": "3049395"
  },
  {
    "text": "I'm searching for x. Let's suppose x is to the right. 'Cause otherwise I go\nto the other board.",
    "start": "3049395",
    "end": "3055599"
  },
  {
    "text": "So x is to the right. I'll discover that the range\nwith just this node, this node",
    "start": "3055600",
    "end": "3060740"
  },
  {
    "text": "maybe contains one other key. I'll find that\nrange is too small. So I'm going to go follow\nthe level right pointer,",
    "start": "3060740",
    "end": "3068660"
  },
  {
    "text": "and I get to some other node. Then I'm going to\ngo to the parent. Maybe the parent was the\nparent of those two children",
    "start": "3068660",
    "end": "3075910"
  },
  {
    "text": "so I'm going to\ndraw it like that. Maybe I find this\nrange is still too low.",
    "start": "3075910",
    "end": "3081339"
  },
  {
    "text": "I need to go right to get to x,\nso I'm going to follow a level pointer to the right.",
    "start": "3081340",
    "end": "3086630"
  },
  {
    "text": "I find a new subtree. I'll go to its parent. Maybe I find that this subtree,\nstill the max is too small.",
    "start": "3086630",
    "end": "3095160"
  },
  {
    "text": "So I have to go to\nthe right again. And then I take the parent. So this was an example\nof a rightward parent.",
    "start": "3095160",
    "end": "3101496"
  },
  {
    "text": "Here's an example of\na leftward parent. This is maybe the parent of\nboth of these two children.",
    "start": "3101496",
    "end": "3106860"
  },
  {
    "text": "Then maybe this subtree\nis still too small, the max is still smaller than x.",
    "start": "3106860",
    "end": "3112300"
  },
  {
    "text": "So then I go right\none more time. Then I follow the parent.",
    "start": "3112300",
    "end": "3117470"
  },
  {
    "text": "Always alternating\nbetween right and parent until I find a node\nwhose subtree contains x.",
    "start": "3117470",
    "end": "3126170"
  },
  {
    "text": "It might have actually, x\nmay be down here, because I immediately went to the\nparent without checking whether I found where x is.",
    "start": "3126170",
    "end": "3133370"
  },
  {
    "text": "But if I know that x is\nsomewhere in here then I will do a downward search. It might go left and then down\nhere, or it might go right,",
    "start": "3133370",
    "end": "3141050"
  },
  {
    "text": "or there's actually\npotentially three children. One of these searches\nwill find the key",
    "start": "3141050",
    "end": "3147030"
  },
  {
    "text": "x that I'm looking\nfor because I'm in the case where x is\nbetween v.min and v.max,",
    "start": "3147030",
    "end": "3154580"
  },
  {
    "text": "so I know it's in\nthere, somewhere. It could be x doesn't exist, but\nit's predecessor or successor",
    "start": "3154580",
    "end": "3160670"
  },
  {
    "text": "is in there somewhere. And so one of these\nthree subtrees will contain the x range.",
    "start": "3160670",
    "end": "3167310"
  },
  {
    "text": "And then I go follow that path. And keep going down until I\nfind x or it's predecessor",
    "start": "3167310",
    "end": "3173440"
  },
  {
    "text": "or successor. Once I find it's predecessor I\ncan use a level right pointer to find its\nsuccessor, and so on.",
    "start": "3173440",
    "end": "3181270"
  },
  {
    "text": "So that's kind of the general\npicture what's going on. We keep going rightward\nand we keep going up.",
    "start": "3181270",
    "end": "3186700"
  },
  {
    "text": " Suppose we do k up steps.",
    "start": "3186700",
    "end": "3195780"
  },
  {
    "text": "Let's look at this\nlast step here. Step k. ",
    "start": "3195780",
    "end": "3205720"
  },
  {
    "text": "How high am I in the tree? I started at the leaf level. Remember in a 2-3 tree all the\nleaves have the same level.",
    "start": "3205720",
    "end": "3211720"
  },
  {
    "text": "And I went up every step. Sorry. I don't know what this\nis, like the 2-step dance",
    "start": "3211720",
    "end": "3219540"
  },
  {
    "text": "where, let's say every\niteration of this loop I do one left or right step,\nand then a parent step.",
    "start": "3219540",
    "end": "3227039"
  },
  {
    "text": "So I should call\nthis iteration k.",
    "start": "3227040",
    "end": "3232270"
  },
  {
    "text": "I guess there's\ntwo k steps, then. ",
    "start": "3232270",
    "end": "3237804"
  },
  {
    "text": "Just to be clear. So in iteration k, that\nmeans I've gone up k times and I've gone either\nright or left k times.",
    "start": "3237804",
    "end": "3245100"
  },
  {
    "text": "You can show if you start going\nright you keep going right. If you initially go left\nyou'll keep going left.",
    "start": "3245100",
    "end": "3250750"
  },
  {
    "text": "Doesn't matter too much. At iteration k I am at\nheight k, or k minus 1,",
    "start": "3250750",
    "end": "3262240"
  },
  {
    "text": "or however you want to count. But let's call it k. So when I do this\nright pointer here",
    "start": "3262240",
    "end": "3271250"
  },
  {
    "text": "I know that, for\nexample, I am skipping over all of these keys.",
    "start": "3271250",
    "end": "3282660"
  },
  {
    "text": "All the keys down-- the\nkeys are in the leaves, so all these things down\nhere, I'm jumping over them.",
    "start": "3282660",
    "end": "3288109"
  },
  {
    "text": "How many keys are down there? Can you tell me,\nroughly, how many keys",
    "start": "3288110",
    "end": "3293900"
  },
  {
    "text": "I'm skipping over when I'm\nmoving right at height k? ",
    "start": "3293900",
    "end": "3299970"
  },
  {
    "text": "It's not a unique answer. But you can give me some bounds. ",
    "start": "3299970",
    "end": "3316800"
  },
  {
    "text": "Say again. Number of children\nto the k power. Yeah.",
    "start": "3316800",
    "end": "3322010"
  },
  {
    "text": "Except we don't know\nthe number of children. But it's between 2 and 3 Closer\none should be easy but I fail.",
    "start": "3322010",
    "end": "3331510"
  },
  {
    "text": "So it's between two\nand three children. So there's the number-- if\nyou look at a height k tree,",
    "start": "3331510",
    "end": "3341140"
  },
  {
    "text": "how many leaves does it have? It's going to be between\n2 to the k and 3 to the k.",
    "start": "3341140",
    "end": "3347890"
  },
  {
    "text": "Because I have between 2 and\n3 children at every node. And so it's exponential in k.",
    "start": "3347890",
    "end": "3353175"
  },
  {
    "text": "That's all I'll need.  OK. When I'm at height k here,\nI'm skipping over a height",
    "start": "3353175",
    "end": "3360820"
  },
  {
    "text": "k minus 1 tree or something. But it's going to be--",
    "start": "3360820",
    "end": "3366530"
  },
  {
    "text": "So in iteration k I'm skipping,\nat least, some constant times 2",
    "start": "3366530",
    "end": "3373165"
  },
  {
    "text": "to the k. Maybe to the k minus\n1, or to the k minus 2. I'm being very sloppy.",
    "start": "3373165",
    "end": "3378300"
  },
  {
    "text": "Doesn't matter. As long as it's exponential\nin k, I'm happy. Because I'm supposing that\nx and y are somewhat close.",
    "start": "3378300",
    "end": "3387190"
  },
  {
    "text": "Let's call this\nrank difference d. Then I claim the\nnumber of iterations",
    "start": "3387190",
    "end": "3393290"
  },
  {
    "text": "I'll need to do in this loop\nis, at most, order log d. Because if, when I get\nto the k-th iteration,",
    "start": "3393290",
    "end": "3401100"
  },
  {
    "text": "I'm jumping over 2\nto the k elements. How large does k have\nto be before 2 to the k",
    "start": "3401100",
    "end": "3407210"
  },
  {
    "text": "is larger than d? Well, log d.",
    "start": "3407210",
    "end": "3412960"
  },
  {
    "text": "Log base 2",
    "start": "3412960",
    "end": "3429119"
  },
  {
    "text": "The number of\niterations is order",
    "start": "3429120",
    "end": "3435950"
  },
  {
    "text": "log d, where d is\nthe rank difference. d is the absolute value between\nrank of x and rank of y.",
    "start": "3435950",
    "end": "3445390"
  },
  {
    "text": " And I'm being a\nlittle sloppy here.",
    "start": "3445390",
    "end": "3451940"
  },
  {
    "text": "You probably want\nto use an induction. You need to show that\nthey're really, these items here that you're skipping\nover that are strictly",
    "start": "3451940",
    "end": "3458140"
  },
  {
    "text": "between x and y. But we know that there's\nonly d items between x or y. Actually d minus 1, I guess.",
    "start": "3458140",
    "end": "3464020"
  },
  {
    "text": "So as soon as we've skipped over\nall the items between x and y,",
    "start": "3464020",
    "end": "3469360"
  },
  {
    "text": "then we'll find a\nrange that contains x, and then we'll go do\nthe downward search. Now how long does the\ndownward search cost?",
    "start": "3469360",
    "end": "3476740"
  },
  {
    "text": "Whatever the height\nof the tree is. What's the height of the tree? That's the number of iterations. So the total cost.",
    "start": "3476740",
    "end": "3483230"
  },
  {
    "text": "The downward search\nwill cost the same as the rest of the search. And so the total cost is\ngoing to be order log d.",
    "start": "3483230",
    "end": "3492302"
  },
  {
    "text": "Clear? Any questions about finger\nsearching with level",
    "start": "3492302",
    "end": "3499920"
  },
  {
    "text": "linked data at the\nleaves, 2-3 trees?",
    "start": "3499920",
    "end": "3505460"
  },
  {
    "text": "AUDIENCE: Sir, I'm not sure\nwhy [INAUDIBLE] d, why is that? PROFESSOR: I'm defining d to be\nthe rank of x minus rank of y.",
    "start": "3505460",
    "end": "3512500"
  },
  {
    "text": "My goal is to achieve\na log d bound. And I'm claiming that because\nonce I've skipped over d items,",
    "start": "3512500",
    "end": "3520520"
  },
  {
    "text": "then I'm done. Then I've found x. And at step k I'm skipping\nover 2 to the k items.",
    "start": "3520520",
    "end": "3528250"
  },
  {
    "text": "So how big is k going to be? Log d. That's all.",
    "start": "3528250",
    "end": "3533520"
  },
  {
    "text": "I used d for a notation here.  Cool.",
    "start": "3533520",
    "end": "3538780"
  },
  {
    "text": " Finger searching. It's nice. Especially if you're doing\nmany consecutive searches that",
    "start": "3538780",
    "end": "3545474"
  },
  {
    "text": "are all relatively\nclose to each other. But that was easy. Let's do a more\ndifficult augmentation.",
    "start": "3545474",
    "end": "3553800"
  },
  {
    "text": "So the last topic for\ntoday is range trees. This is probably the coolest\nexample of augmentation,",
    "start": "3553800",
    "end": "3560970"
  },
  {
    "text": "at least, that you'll\nsee in this class. If you want to see\nmore you should take advanced data structure 6851.",
    "start": "3560970",
    "end": "3572570"
  },
  {
    "text": "And range trees solve\na problem called orthogonal range searching. ",
    "start": "3572570",
    "end": "3578710"
  },
  {
    "text": "Not orthogonal search ranging. Orthogonal range search.",
    "start": "3578710",
    "end": "3586130"
  },
  {
    "start": "3586130",
    "end": "3591839"
  },
  {
    "text": "So what's the problem? I'm going to give you\na bunch of points.",
    "start": "3591840",
    "end": "3597810"
  },
  {
    "text": "Draw them as fat dots so\nyou can actually see them. In some dimension.",
    "start": "3597810",
    "end": "3603190"
  },
  {
    "text": "So this is, for\nexample, a 2D point set.",
    "start": "3603190",
    "end": "3608300"
  },
  {
    "text": "OK. Over here I will\ndraw a 3D point set. You can tell the\ndifference, I'm sure.",
    "start": "3608300",
    "end": "3613440"
  },
  {
    "start": "3613440",
    "end": "3618859"
  },
  {
    "text": "There. Now it's a 3D point set. And this is a static point set.",
    "start": "3618860",
    "end": "3625221"
  },
  {
    "text": "You could make this\ndynamic but let's just think about the static case.",
    "start": "3625221",
    "end": "3630470"
  },
  {
    "text": "Don't want the 2D points\nand the 3D points to mix. Now, you get to preprocess\nthis into a data structure.",
    "start": "3630470",
    "end": "3637890"
  },
  {
    "text": "So this is a static\ndata structure problem. And now I'm going to come along\nwith a whole bunch of queries. A query will be a box.",
    "start": "3637890",
    "end": "3645770"
  },
  {
    "text": "OK. In two dimensions, a\nbox is a rectangle. ",
    "start": "3645770",
    "end": "3651370"
  },
  {
    "text": "Something like this. Axis aligned. So I give you an x min, x\nmax, a y min, and a y max.",
    "start": "3651370",
    "end": "3657040"
  },
  {
    "text": "I want to know what\nare the points inside. Maybe I want you to list them. If there's a lot\nof them it's going to take a long\ntime to list them.",
    "start": "3657040",
    "end": "3663125"
  },
  {
    "text": "Maybe I just want to know\n10 of them as examples. Maybe this is a Google\nsearch or something. I just get the first 10\nresults in the first page,",
    "start": "3663125",
    "end": "3669813"
  },
  {
    "text": "I hit next then want the\nnext 10, that kind of thing. Or maybe I want to know how\nmany search results there are.",
    "start": "3669813",
    "end": "3676730"
  },
  {
    "text": "Number of points\nin the rectangle. Bunch of different problems. In 3D, it's a 3D box.",
    "start": "3676730",
    "end": "3683369"
  },
  {
    "text": "Which is a little\nharder to draw. You can't really tell which\npoints are inside the box.",
    "start": "3683370",
    "end": "3688900"
  },
  {
    "text": "Let's say these three points\nare all inside the box. I give you an interval\nin x, an interval in y, and an interval in\nz, and I want to know",
    "start": "3688900",
    "end": "3694880"
  },
  {
    "text": "what are the points inside. How many are there? List them all. List 10 of them, whatever.",
    "start": "3694880",
    "end": "3700941"
  },
  {
    "text": "OK.  I want to do this in\npoly log time, let's say.",
    "start": "3700941",
    "end": "3707050"
  },
  {
    "text": "I'm going to achieve today\nlog squared for the 2D problem and log cubed for\nthe 3D problem,",
    "start": "3707050",
    "end": "3712920"
  },
  {
    "text": "plus whatever the\nsize output is. ",
    "start": "3712920",
    "end": "3721630"
  },
  {
    "text": "So let me just write that down. ",
    "start": "3721630",
    "end": "3734970"
  },
  {
    "text": "So the goal is to preprocess\nn points in d dimensions.",
    "start": "3734970",
    "end": "3747255"
  },
  {
    "text": " So you get to spend a\nbunch of time preprocessing",
    "start": "3747255",
    "end": "3753579"
  },
  {
    "text": "to support a query which is,\ngiven a box, axis aligned box,",
    "start": "3753580",
    "end": "3764840"
  },
  {
    "text": "find let's say the number\nof points in the box.",
    "start": "3764840",
    "end": "3772020"
  },
  {
    "text": " Find k points in the box.",
    "start": "3772020",
    "end": "3778655"
  },
  {
    "start": "3778655",
    "end": "3783927"
  },
  {
    "text": "I think that's good. That includes a special case of\nfind all the points in the box.",
    "start": "3783927",
    "end": "3789300"
  },
  {
    "text": "So this, of course, we have\nto pay a penalty of order k",
    "start": "3789300",
    "end": "3794480"
  },
  {
    "text": "for the output.  No getting around that.",
    "start": "3794480",
    "end": "3800470"
  },
  {
    "text": "But I want the rest of the\ntime to be log to the d. ",
    "start": "3800470",
    "end": "3808282"
  },
  {
    "text": "So we're going to\nachieve log to the d n plus size of the output. ",
    "start": "3808282",
    "end": "3816050"
  },
  {
    "text": "And you get to control how\nbig you want the output to be. So it's a pretty\nreasonable data structure.",
    "start": "3816050",
    "end": "3821360"
  },
  {
    "text": "In a certain sense we will\nunderstand what the output is in log to the d time. If you actually\nwant to list points,",
    "start": "3821360",
    "end": "3827050"
  },
  {
    "text": "well, then you have to\nspend the time to do it. All right. So 2D and 3D are great,\nbut let's start with 1D.",
    "start": "3827050",
    "end": "3835109"
  },
  {
    "text": "First we should\nunderstand 1D completely, then we can generalize. ",
    "start": "3835110",
    "end": "3846589"
  },
  {
    "text": "1D we already know how to do. ",
    "start": "3846590",
    "end": "3852700"
  },
  {
    "text": "1D I have a line. I have some points on the line. ",
    "start": "3852700",
    "end": "3862370"
  },
  {
    "text": "And I'm given, as a\nquery, some interval. ",
    "start": "3862370",
    "end": "3869359"
  },
  {
    "text": "And I want to know how many\npoints are in the interval, give me the points in\nthe interval, and so on.",
    "start": "3869360",
    "end": "3876890"
  },
  {
    "text": "So how do I do this? Any ways? ",
    "start": "3876890",
    "end": "3888600"
  },
  {
    "text": "If d is 1. So I want to achieve\nlog d, sorry, log n, plus size of output.",
    "start": "3888600",
    "end": "3894288"
  },
  {
    "text": " I hear whispers. ",
    "start": "3894288",
    "end": "3904988"
  },
  {
    "text": "Yeah? AUDIENCE: Segment trees? PROFESSOR: Segment tree? That's fancy. We won't cover segment trees.",
    "start": "3904988",
    "end": "3910310"
  },
  {
    "text": "Probably segment trees do it. Yeah. We know lots of ways to do this.",
    "start": "3910310",
    "end": "3917546"
  },
  {
    "text": "Yeah? AUDIENCE: Sorted array? PROFESSOR: Sorted array\nis probably the simplest. If I store the items in a sorted\narray and I have two values,",
    "start": "3917546",
    "end": "3924380"
  },
  {
    "text": "I'll call them x1\nand x2, because it's the x min and x max.",
    "start": "3924380",
    "end": "3930820"
  },
  {
    "text": "Binary search for x1. Binary search for x2. Find the successor of x1\nand the predecessor of x2.",
    "start": "3930820",
    "end": "3936710"
  },
  {
    "text": "I'll find these two guys. And then I know all\nthe ones in between. That's the match. So that'll take log n\ntime to find those points",
    "start": "3936710",
    "end": "3944830"
  },
  {
    "text": "and then we're good. So we could do a sorted array.",
    "start": "3944830",
    "end": "3950680"
  },
  {
    "text": "Of course, sorted array is\na little hard to generalize. I don't want to do a 2D\narray, that sounds bad.",
    "start": "3950680",
    "end": "3957170"
  },
  {
    "text": "You could, of course,\ndo a binary search tree. Like an AVL tree. Same thing. Because we have log n\nsearch, find successor,",
    "start": "3957170",
    "end": "3964101"
  },
  {
    "text": "and predecessor, I guess\nyou could use Van Emde Boas, but that's hard to\ngeneralize to 2D. ",
    "start": "3964102",
    "end": "3970940"
  },
  {
    "text": "You could use level links. Here's a fancy version. We could use level linked 2-3\ntrees with data in the leaves.",
    "start": "3970940",
    "end": "3979310"
  },
  {
    "text": "Then once I find x\nmin, I find this point, I can go to the successor\nin constant time",
    "start": "3979310",
    "end": "3986579"
  },
  {
    "text": "because that's a finger search\nwith a rank difference of 1. And I could just keep\ncalling successor",
    "start": "3986580",
    "end": "3992180"
  },
  {
    "text": "and in constant time per item\nI will find the next item. So we could do that easily\nwith the sorted array.",
    "start": "3992180",
    "end": "3998280"
  },
  {
    "text": "BST is not so great\nbecause successor might cost log n each time.",
    "start": "3998280",
    "end": "4004154"
  },
  {
    "text": "But if I have the\nlevel links then basically I'm just\nwalking down the link list at the bottom of the tree.",
    "start": "4004154",
    "end": "4009190"
  },
  {
    "text": "OK. So actually level\nlinked is even better. ",
    "start": "4009190",
    "end": "4015660"
  },
  {
    "text": "BST would achieve something\nlike log n plus k log n, where",
    "start": "4015660",
    "end": "4021660"
  },
  {
    "text": "k is the size of the output. If I want k points in the\nbox I have to pay log n.",
    "start": "4021660",
    "end": "4028400"
  },
  {
    "text": "For each level linked I'll\nonly pay log n plus k.",
    "start": "4028400",
    "end": "4034130"
  },
  {
    "text": "Here I actually only need\nthe levels at the leaves. Level links. OK.",
    "start": "4034130",
    "end": "4039290"
  },
  {
    "text": "All good. But I actually want to\ntell you a different way to do it that will\ngeneralize better.",
    "start": "4039290",
    "end": "4044560"
  },
  {
    "start": "4044560",
    "end": "4050552"
  },
  {
    "text": "The pictures are\ngoing to look just like the pictures\nwe've talked about. ",
    "start": "4050552",
    "end": "4075040"
  },
  {
    "text": "So these would actually\nwork dynamically. My goal here is just to achieve\na static data structure.",
    "start": "4075040",
    "end": "4080720"
  },
  {
    "text": "I'm going to idealize this\nsolution a little bit. And just say, suppose I\nhave a perfectly balanced",
    "start": "4080720",
    "end": "4091030"
  },
  {
    "text": "binary search tree. That's going to be\nmy data structure. OK. So the data structure is not\nhard, but what's interesting",
    "start": "4091030",
    "end": "4098140"
  },
  {
    "text": "is how I do a range search. So if I do range query of the\ninterval, I'll call it ab.",
    "start": "4098140",
    "end": "4112568"
  },
  {
    "text": "Then what I'm going to do\nis do a binary search for a, do a binary search for\nb, trim the common prefix",
    "start": "4112569",
    "end": "4125969"
  },
  {
    "text": "of those search paths. That's basically finding\nthe lowest common ancestor",
    "start": "4125970",
    "end": "4132504"
  },
  {
    "text": "of a and b. ",
    "start": "4132504",
    "end": "4139771"
  },
  {
    "text": "And then I'm going\nto do some stuff. Let me draw the picture. So here is, suppose here's\nthe node that contains a.",
    "start": "4139771",
    "end": "4147649"
  },
  {
    "text": "Here's the node that contains b. They may not be at the\nsame depth, who knows.",
    "start": "4147649",
    "end": "4152670"
  },
  {
    "text": "Then I'm going to look\nat the parents of a. I just came down from some path\nhere, and some path down to b.",
    "start": "4152670",
    "end": "4159630"
  },
  {
    "text": "I want to find this\nbranching point where the paths to a and\nthe paths to b diverge. ",
    "start": "4159630",
    "end": "4166489"
  },
  {
    "text": "So let's just look\nat the parent of a. It could be a right\nparent, in which case",
    "start": "4166490",
    "end": "4174649"
  },
  {
    "text": "there's a subtree here. Could be a left parent in\nwhich case, subtree here. ",
    "start": "4174649",
    "end": "4183020"
  },
  {
    "text": "I'm going to follow\nmy convention again. That x-coordinate\ncorresponds roughly to key.",
    "start": "4183020",
    "end": "4188219"
  },
  {
    "text": " Left parent here.",
    "start": "4188220",
    "end": "4195120"
  },
  {
    "text": "Maybe right parent here. ",
    "start": "4195120",
    "end": "4208040"
  },
  {
    "text": "Something like that. ",
    "start": "4208040",
    "end": "4223219"
  },
  {
    "text": "OK. Remember it's a perfect tree. So, actually, all the leaves\nwill be at the same level.",
    "start": "4223220",
    "end": "4230005"
  },
  {
    "start": "4230005",
    "end": "4235050"
  },
  {
    "text": "And, roughly here, x-coordinate\ncorresponds to key. So here is a.",
    "start": "4235050",
    "end": "4241786"
  },
  {
    "text": "And I want to return all the\nkeys that are between a and b. So that's everything\nin this sweep line.",
    "start": "4241786",
    "end": "4248112"
  },
  {
    "text": " The parents of the LCA don't\nmatter, because this parents",
    "start": "4248112",
    "end": "4253880"
  },
  {
    "text": "either going to be way over\nto the right or way over to the left. In both cases, it's outside\nthe interval a to b.",
    "start": "4253880",
    "end": "4259399"
  },
  {
    "text": "So what I've tried\nto highlight here, and I will color it in\nblue, is the relevant nodes",
    "start": "4259399",
    "end": "4266699"
  },
  {
    "text": "for the search between a and b. So a is between a and b. This subtree is greater\nthan a and less than b.",
    "start": "4266700",
    "end": "4274800"
  },
  {
    "text": "This node, and these nodes. This node, and these nodes.",
    "start": "4274800",
    "end": "4280520"
  },
  {
    "text": "This node and these nodes. The common ancestor. And then the corresponding\nthing over here.",
    "start": "4280520",
    "end": "4287350"
  },
  {
    "text": " All the nodes in all\nthese blue subtrees,",
    "start": "4287350",
    "end": "4293450"
  },
  {
    "text": "plus these individual\nnodes, fall in the interval between a and b, and that's it.",
    "start": "4293450",
    "end": "4300440"
  },
  {
    "text": "OK. This should look super familiar. It's just like when\nwe're computing rank. We're trying to figure out\nhow many guys are to our left",
    "start": "4300440",
    "end": "4306730"
  },
  {
    "text": "or to our right. We're basically doing\na rightward rank from a and a\nleftward rank from b.",
    "start": "4306730",
    "end": "4312680"
  },
  {
    "text": "And that finds all the nodes. And stopping when those\ntwo searches converge. And then we're finding all\nthe nodes between a and b.",
    "start": "4312680",
    "end": "4320040"
  },
  {
    "text": "I'm not going to write down\nthe pseudocode because it's the same kind of thing. You look at right\nparents and left parents.",
    "start": "4320040",
    "end": "4325050"
  },
  {
    "text": "You just walk up from a. Whenever you get a\nright parent then you want that node, and\nthe subtree to its right.",
    "start": "4325050",
    "end": "4332829"
  },
  {
    "text": "And so that will\nhighlight these nodes. Same thing for b, but\nyou look at left parents.",
    "start": "4332830",
    "end": "4337920"
  },
  {
    "text": "And then you stop when\nthose two searches converge. So you're going to\ndo them in lock step. You do one step for a and b.",
    "start": "4337920",
    "end": "4343530"
  },
  {
    "text": "One step for a and b. And when they happen to hit the\nsame node, then you're done. You add that node to your list.",
    "start": "4343530",
    "end": "4349989"
  },
  {
    "text": "And what you end\nup with is a bunch",
    "start": "4349990",
    "end": "4355630"
  },
  {
    "text": "of nodes and rooted subtrees. ",
    "start": "4355630",
    "end": "4363820"
  },
  {
    "text": "The things I circled in blue\nis going to be my return value. So I'm going to return all\nof these nodes, explicitly.",
    "start": "4363820",
    "end": "4372110"
  },
  {
    "text": "And I'm also going to\nreturn these subtrees. I'm not going to have\nto write them down. I'm just going to return\nthe root of the subtree,",
    "start": "4372110",
    "end": "4378130"
  },
  {
    "text": "and say, hey look. Here's an entire\nsubtree that contains points that are in the answer.",
    "start": "4378130",
    "end": "4384520"
  },
  {
    "text": "Don't have to list\nthem explicitly, I can just give you the tree. Then if I want to know how\nmany results are in the answer,",
    "start": "4384520",
    "end": "4392750"
  },
  {
    "text": "well, just augment to store\nsubtree size at the beginning. And then I can\ncount how many nodes",
    "start": "4392750",
    "end": "4398200"
  },
  {
    "text": "are down here, how many\nnodes are down here, add that up for\nall the triangles, and then also add one for\neach of the blue nodes,",
    "start": "4398200",
    "end": "4405699"
  },
  {
    "text": "and then I've counted the size\nof the answer in how much time? How many subtrees and how many\nnodes am I returning here?",
    "start": "4405700",
    "end": "4415010"
  },
  {
    "text": "Log. ",
    "start": "4415010",
    "end": "4420489"
  },
  {
    "text": "Log n nodes and log n rooted\nsubtrees because at each step, I'm going up by one for\na, and up by one for b.",
    "start": "4420490",
    "end": "4426989"
  },
  {
    "text": "So it's like 2 log n. Log n.  So I would call this an implicit\nrepresentation of the answer.",
    "start": "4426990",
    "end": "4435780"
  },
  {
    "text": "From that implicit\nrepresentation you can do subtree size. Augmentation to count\nthe size the answer.",
    "start": "4435780",
    "end": "4442239"
  },
  {
    "text": "You can just start walking\nthrough one by one, do an inter traversal of the trees, and\nyou'll get the first k points",
    "start": "4442240",
    "end": "4448480"
  },
  {
    "text": "in the answer in order k time. Question? AUDIENCE: Just a clarification. You said when we\nwere walking up,",
    "start": "4448480",
    "end": "4453556"
  },
  {
    "text": "you want to get\nall the ancestors in their right subtrees. But you don't do that for\nthe left parent, right?",
    "start": "4453556",
    "end": "4460020"
  },
  {
    "text": "PROFESSOR: That's right. As I'm walking up the tree,\nif it's a right parent then I take the right subtree\nand include that in the answer.",
    "start": "4460020",
    "end": "4465760"
  },
  {
    "text": "If it's a left parent\njust forget about it. Don't do anything. Just keep following parents.",
    "start": "4465760",
    "end": "4471640"
  },
  {
    "text": "Whenever I do right\nparent then I also add that node and\nthe right subtree. If it's a left parent I\ndon't include the node,",
    "start": "4471640",
    "end": "4477480"
  },
  {
    "text": "I don't include\nthe left subtree. I also don't include\nthe right subtree. That would have too much stuff. ",
    "start": "4477480",
    "end": "4484072"
  },
  {
    "text": "It's easy when you\nsee the picture, you would write\ndown the algorithm. It's clear. It's left versus right parents.",
    "start": "4484072",
    "end": "4490550"
  },
  {
    "text": "AUDIENCE: Would you include\nthe left subtree of b? PROFESSOR: I would\nalso-- thank you. I should color the\nleft subtree of b.",
    "start": "4490550",
    "end": "4498630"
  },
  {
    "text": "I didn't apply\nsymmetry perfectly. So we have the right subtree\nof a and the left subtree of b. Thanks.",
    "start": "4498630",
    "end": "4504950"
  },
  {
    "text": "I would also include b if\nit's a closed interval.",
    "start": "4504950",
    "end": "4510110"
  },
  {
    "text": "Slightly more general. If a and b are not\nin the tree then this is really the successor of a and\nthis is the predecessor of b.",
    "start": "4510110",
    "end": "4517110"
  },
  {
    "text": "So then a and b don't\nhave to be in there. This is still a well\ndefined range search.",
    "start": "4517110",
    "end": "4522940"
  },
  {
    "text": "OK. Now we really understand 1D. I claim we've almost\nsolved all dimensions.",
    "start": "4522940",
    "end": "4530190"
  },
  {
    "text": "All we need is a little\nbit of augmentation. So let's do it. ",
    "start": "4530190",
    "end": "4551560"
  },
  {
    "text": "Let's start with 2D. But then 3D, and 4D,\nand so on will be easy.",
    "start": "4551560",
    "end": "4559090"
  },
  {
    "text": "Why do I care about\n4D range trees? Because maybe I have a database. Each of these points\nis actually just a row",
    "start": "4559090",
    "end": "4565719"
  },
  {
    "text": "in the database which has\nfour columns, four values. And what I'm trying to do\nhere is find all the people",
    "start": "4565720",
    "end": "4572590"
  },
  {
    "text": "in my database that have a\nsalary between this and this, and have an age\nbetween this and that, and have a profession\nbetween this and this.",
    "start": "4572590",
    "end": "4579370"
  },
  {
    "text": "I don't know what that means. Number of degrees between\nthis and this, whatever.",
    "start": "4579370",
    "end": "4584600"
  },
  {
    "text": "You have some numerical data\nrepresenting a person or thing in your database, then this\nis a typical kind of search",
    "start": "4584600",
    "end": "4591280"
  },
  {
    "text": "you want to do. And you want to know how\nmany answers you've got and then list the first\nhundreds of them, or whatever.",
    "start": "4591280",
    "end": "4597290"
  },
  {
    "text": "So this is a practical\nthing in databases. This is what you might call\nan index in the database.",
    "start": "4597290",
    "end": "4603736"
  },
  {
    "text": "So let's start. Suppose your data is\njust two dimensional. You have two fields\nfor every item.",
    "start": "4603736",
    "end": "4608909"
  },
  {
    "text": "What I'm going to do is store\na 1D range tree on all points",
    "start": "4608910",
    "end": "4622800"
  },
  {
    "text": "by x. So this data structure makes\nsense if you fix a dimension.",
    "start": "4622800",
    "end": "4629240"
  },
  {
    "text": "Say x is all I care about. Forget about y. So my point set. Yeah.",
    "start": "4629240",
    "end": "4635020"
  },
  {
    "text": "So what that corresponds to is\nprojecting each of these points",
    "start": "4635020",
    "end": "4643380"
  },
  {
    "text": "onto the x-axis. ",
    "start": "4643380",
    "end": "4651320"
  },
  {
    "text": "And now also\nprojecting my query.  So my new query is\nfrom here to here in x.",
    "start": "4651320",
    "end": "4658750"
  },
  {
    "text": " And so this data\nstructure will let",
    "start": "4658750",
    "end": "4663900"
  },
  {
    "text": "me find all these\npoints that match in x. That's not good because\nthere's actually only two points that\nI want, but I find",
    "start": "4663900",
    "end": "4670480"
  },
  {
    "text": "four points in this picture. But it's half of the answer. It's all the x matches\nforgetting about y.",
    "start": "4670480",
    "end": "4677520"
  },
  {
    "text": " Now here's the fun part.",
    "start": "4677520",
    "end": "4683140"
  },
  {
    "text": "So when I do a search\nhere I get log n nodes.",
    "start": "4683140",
    "end": "4688280"
  },
  {
    "text": "Nodes are good because they\nhave a single key in them. So I'll just check for\neach of those log n nodes.",
    "start": "4688280",
    "end": "4693980"
  },
  {
    "text": "Do they also match in y? If they do, add\nit to the answer. If they don't forget about it.",
    "start": "4693980",
    "end": "4700000"
  },
  {
    "text": "OK. But the tricky part is I also\nget log n subtrees representing",
    "start": "4700000",
    "end": "4705369"
  },
  {
    "text": "parts of the answer. So potentially it could be that\nyour search, this rectangle,",
    "start": "4705370",
    "end": "4711190"
  },
  {
    "text": "only has like five points. But if you look at this\nwhole vertical slab there's a billion points.",
    "start": "4711190",
    "end": "4718199"
  },
  {
    "text": "Now, luckily, those\nbillion points are represented succinctly. There's just log\nn subtrees saying, well there's half\na billion here,",
    "start": "4718200",
    "end": "4724080"
  },
  {
    "text": "and a quarter billion here, and\nan eighth of a billion here. ",
    "start": "4724080",
    "end": "4730970"
  },
  {
    "text": "Now for each of that\nbig chunk of output,",
    "start": "4730970",
    "end": "4736100"
  },
  {
    "text": "I want to very quickly find\nthe ones that match in y. How would I find the\nones matching in y?",
    "start": "4736100",
    "end": "4741219"
  },
  {
    "text": " A range tree. Yeah.",
    "start": "4741220",
    "end": "4746780"
  },
  {
    "text": "OK. So here's what\nwe're going to do. For each node, call it x.",
    "start": "4746780",
    "end": "4754690"
  },
  {
    "text": "x is overloaded. It's a coordinate. So many things. Let's call it v.\nIn the, this thing",
    "start": "4754690",
    "end": "4762590"
  },
  {
    "text": "I'm going to call the x-tree. So for every node\nin the x-tree I'm going to store\nanother 1D range tree.",
    "start": "4762590",
    "end": "4770810"
  },
  {
    "text": "But this time using\nthe y-coordinate on all",
    "start": "4770810",
    "end": "4782460"
  },
  {
    "text": "points in these rooted subtree.",
    "start": "4782460",
    "end": "4790360"
  },
  {
    "text": " At this point I really\nwant to draw a diagram. ",
    "start": "4790360",
    "end": "4798290"
  },
  {
    "text": "So, rough picture. ",
    "start": "4798290",
    "end": "4813740"
  },
  {
    "text": "Forgive me for not\ndrawing this perfectly. This is roughly what\nthe answer looks",
    "start": "4813740",
    "end": "4818970"
  },
  {
    "text": "like for the 1D range search. This is the x-tree.",
    "start": "4818970",
    "end": "4824630"
  },
  {
    "text": "And here I've searched between\nthis value and this value in the x-coordinate.",
    "start": "4824630",
    "end": "4829949"
  },
  {
    "text": "Basically I have log n nodes. I'm going to check\nthose separately. Then I also have\nthese log n subtrees.",
    "start": "4829950",
    "end": "4835970"
  },
  {
    "text": "For each of those\nlog n sub trees I'm going to have\na pointer-- this",
    "start": "4835970",
    "end": "4842510"
  },
  {
    "text": "is the augmentation-- to another\ntree of exactly the same size.",
    "start": "4842510",
    "end": "4849079"
  },
  {
    "text": "On exactly the same\ndata that's in here. It's also over here. But it's going to\nbe sorted by y.",
    "start": "4849080",
    "end": "4855900"
  },
  {
    "text": "And it's a 1D range tree by y. Tons of data duplication here. I took all these points and I\ncopied them over here, but then",
    "start": "4855900",
    "end": "4863739"
  },
  {
    "text": "built a 1D range tree in y. This is all preprocessing. So I don't have to pay for this. It's polynomial time.",
    "start": "4863740",
    "end": "4869470"
  },
  {
    "text": "Don't worry too much. And then I'm going\nto search in here. What does the search\nin there look?",
    "start": "4869470",
    "end": "4875260"
  },
  {
    "text": "I'm going to get, you know,\nsome more trees and a couple more nodes.",
    "start": "4875260",
    "end": "4880540"
  },
  {
    "text": "OK. But now those items, those\npoints, match in x and y",
    "start": "4880540",
    "end": "4885710"
  },
  {
    "text": "because this whole\nsubtree matched in x and I just did a y search, so I\nfound things that matched in y.",
    "start": "4885710",
    "end": "4891530"
  },
  {
    "text": "So I get here\nanother log n trees that are actually in my answer.",
    "start": "4891530",
    "end": "4897120"
  },
  {
    "text": "And for each of these nodes I\nhave a corresponding other data structure where I\ndo a little search",
    "start": "4897120",
    "end": "4905130"
  },
  {
    "text": "and I get part of the answer. ",
    "start": "4905130",
    "end": "4911719"
  },
  {
    "text": "Every one. Sounds huge. This data structure sounds\nhuge, but it's actually small.",
    "start": "4911720",
    "end": "4918260"
  },
  {
    "text": "But one thing that's clear is\nit takes log squared n time, because I have log n\ntriangles over here.",
    "start": "4918260",
    "end": "4925050"
  },
  {
    "text": "For each of them I spend log\nn to find triangles over here. The total output is log squared\nn nodes, for each of them",
    "start": "4925050",
    "end": "4932960"
  },
  {
    "text": "I have to check manually. Plus, so over here,\nthere's log n,",
    "start": "4932960",
    "end": "4938602"
  },
  {
    "text": "different searches I'm doing. Each one has size log n. So I get log squared\nlittle triangles that",
    "start": "4938602",
    "end": "4943870"
  },
  {
    "text": "contain the results\nthat match in x and y. How much space in\nthis data structure?",
    "start": "4943870",
    "end": "4950639"
  },
  {
    "text": "That's the remaining challenge. ",
    "start": "4950639",
    "end": "4956140"
  },
  {
    "text": "Actually, it's not that hard,\nbecause if you look at a key.",
    "start": "4956140",
    "end": "4965600"
  },
  {
    "text": "So look at some\nkey in this x-tree. Let's look at a leaf\nbecause that's maybe the most interesting.",
    "start": "4965600",
    "end": "4971224"
  },
  {
    "start": "4971224",
    "end": "4977440"
  },
  {
    "text": "Here's the x-tree. x-tree has linear size. Just one tree. If I look at some key value,\nwell, it lives in this subtree.",
    "start": "4977440",
    "end": "4986570"
  },
  {
    "text": "And so there's going to be a\ncorresponding blue structure of that size that\ncontains that key. And then there's the parent.",
    "start": "4986570",
    "end": "4992620"
  },
  {
    "text": "So there's a structure here. That has a corresponding\nblue triangle. And then its parent,\nthat's another triangle.",
    "start": "4992620",
    "end": "5000050"
  },
  {
    "text": "That contains-- I'm\nlooking at a key k here. All of these triangles\ncontain the key k.",
    "start": "5000050",
    "end": "5008580"
  },
  {
    "text": "And so key k will be\nduplicated all this many times, but how many sub trees is k in?",
    "start": "5008580",
    "end": "5017260"
  },
  {
    "text": "Log n. Each key, fundamental fact\nabout balanced binary search",
    "start": "5017260",
    "end": "5025160"
  },
  {
    "text": "trees, each key lives\nin log n subtrees.",
    "start": "5025160",
    "end": "5031684"
  },
  {
    "text": "Namely all of its ancestors. ",
    "start": "5031684",
    "end": "5040000"
  },
  {
    "text": "Awesome. Because that means the\ntotal space is n log n.",
    "start": "5040000",
    "end": "5045430"
  },
  {
    "text": "There's n keys. Each of them is duplicated\nat most log n times. ",
    "start": "5045430",
    "end": "5052060"
  },
  {
    "text": "In general, log\nto the d minus 1. So If you do it in 3D,\neach of the blue trees,",
    "start": "5052060",
    "end": "5059420"
  },
  {
    "text": "every node in it has a\ncorresponding pointer to a red tree\nthat's sorted by z.",
    "start": "5059420",
    "end": "5065990"
  },
  {
    "text": "And you just keep doing this,\nsort of, nested searching, like super augmentation. But you're only losing a log\nfactor each dimension you add.",
    "start": "5065990",
    "end": "5074520"
  }
]