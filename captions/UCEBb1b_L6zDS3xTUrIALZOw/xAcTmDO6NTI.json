[
  {
    "text": "[SQUEAKING]\n[RUSTLING] [CLICKING] ",
    "start": "0",
    "end": "16302"
  },
  {
    "text": "ANA BELL: All right, so welcome\nto the first lecture of 6.100L.",
    "start": "16302",
    "end": "21440"
  },
  {
    "text": "That's our new number. My name is Ana Bell. That's two separate\nnames, first name Ana,",
    "start": "21440",
    "end": "26869"
  },
  {
    "text": "last name Bell--\nsuper confusing. But I've been a lecturer\nhere in the EECS Department for probably almost\n10 years now.",
    "start": "26870",
    "end": "33800"
  },
  {
    "text": "And I've been doing the\nintro course for a while. I'm really happy to be teaching\nthis full semester version",
    "start": "33800",
    "end": "39230"
  },
  {
    "text": "of 6.100A. So today what we're\ngoing to do is go over",
    "start": "39230",
    "end": "45530"
  },
  {
    "text": "a little bit of course\nadministrative information, and then we'll dive\nright into some thoughts",
    "start": "45530",
    "end": "50840"
  },
  {
    "text": "about computers, high\nlevel how they work. And then we'll start going\ninto some Python basics.",
    "start": "50840",
    "end": "56699"
  },
  {
    "text": "So we're going to get\ncoding right away. So I highly encourage you,\nsince you're in this class,",
    "start": "56700",
    "end": "61880"
  },
  {
    "text": "to download the lecture\nslides beforehand, to take notes, and\nrun code when I do.",
    "start": "61880",
    "end": "68689"
  },
  {
    "text": "Some of the lectures\nare interactive. And we'll have\nbreaks, so there'll be a place where\nyou can take a break",
    "start": "68690",
    "end": "74480"
  },
  {
    "text": "to actually do some coding. And that's important-- I call them \"you try it\" breaks. That's important to make\nsure that you're actually",
    "start": "74480",
    "end": "81553"
  },
  {
    "text": "practicing what we are\nlearning right at this time. The main idea for lectures is,\nyes, I will do some teaching,",
    "start": "81553",
    "end": "88290"
  },
  {
    "text": "but there will also\nbe opportunities for questions and for you\nguys to try some programming",
    "start": "88290",
    "end": "93990"
  },
  {
    "text": "right on the spot. Even if you don't\nfinish writing a program that we start talking\nabout, I will finish it,",
    "start": "93990",
    "end": "99390"
  },
  {
    "text": "and we can all talk\nabout it together. And I'll show you some\npitfalls and things like that.",
    "start": "99390",
    "end": "106270"
  },
  {
    "text": "There will be lots\nof opportunities to practice in this class at\nvarious degrees of granularity.",
    "start": "106270",
    "end": "112320"
  },
  {
    "text": "And then there's also\nlots of opportunities that I have in the handouts\nto do extra practice",
    "start": "112320",
    "end": "118050"
  },
  {
    "text": "at home and through a bunch of\ndifferent resources as well. The reason why I stress\nparticipation and practice is",
    "start": "118050",
    "end": "125590"
  },
  {
    "text": "because part of the\nreason you're here is you want to learn how to program. You don't know how\nto program yet.",
    "start": "125590",
    "end": "132159"
  },
  {
    "text": "And programming is\nactually a skill. it's like math or reading. It's something that\nyou have to practice.",
    "start": "132160",
    "end": "138099"
  },
  {
    "text": "You can't just watch me type\nin a bunch of lines of code And then when it comes\ntime to do the quiz,",
    "start": "138100",
    "end": "143799"
  },
  {
    "text": "you automatically\nknow how to do it. You need to do it often,\nmore and more so that it",
    "start": "143800",
    "end": "149530"
  },
  {
    "text": "becomes sort of second nature. So the three big things you'll\nget out of this class are",
    "start": "149530",
    "end": "155680"
  },
  {
    "text": "knowledge of\nconcepts, obviously-- we're going to learn some\ncomputer science ideas-- programming skill,\nand problem solving--",
    "start": "155680",
    "end": "163840"
  },
  {
    "text": "problem solving skills. Lectures and exams\nbasically help you with your knowledge of-- test\nyour knowledge of concepts",
    "start": "163840",
    "end": "170500"
  },
  {
    "text": "and help you get\nknowledge of concepts. Finger exercises give you\nthe programming skills.",
    "start": "170500",
    "end": "176650"
  },
  {
    "text": "And the problem sets help\nyou with problem solving. Basically, if you're given an\nEnglish version of-- a problem",
    "start": "176650",
    "end": "184069"
  },
  {
    "text": "in English, how do\nyou go from that to thinking about what computer\nscience concepts can I apply?",
    "start": "184070",
    "end": "190730"
  },
  {
    "text": "And then after that, how do\nI take those computer science concepts and actually\ndo the programming?",
    "start": "190730",
    "end": "197340"
  },
  {
    "text": "So what are some topics\nwe'll be covering? We will be, at the\ncore of it, learning",
    "start": "197340",
    "end": "203480"
  },
  {
    "text": "computational thinking. So in the future, when\nyou encounter a problem,",
    "start": "203480",
    "end": "208880"
  },
  {
    "text": "your first thought shouldn't\nbe, How do I mathematically solve this? or, How\ndo I brute force",
    "start": "208880",
    "end": "214100"
  },
  {
    "text": "or manually solve this problem? How can I apply computation\nto help me solve this problem?",
    "start": "214100",
    "end": "219248"
  },
  {
    "text": "And throughout these\nlectures, you're going to see some examples\nof us applying computation",
    "start": "219248",
    "end": "224329"
  },
  {
    "text": "to a problem you might\nhave already seen and maybe solved mathematically,\nwhich is pretty cool.",
    "start": "224330",
    "end": "231060"
  },
  {
    "text": "Obviously, to get\nthat, we're going to learn the Python\nprogramming language. Once we get the\nbasics, we're going",
    "start": "231060",
    "end": "236360"
  },
  {
    "text": "to see how we can start\nto structure our code to look a little bit\nbetter so we don't just",
    "start": "236360",
    "end": "241580"
  },
  {
    "text": "have a bunch of code\ndumped in a file. We're going to start\nto organize our code and see how we can make it\nneat, readable, and modular.",
    "start": "241580",
    "end": "251360"
  },
  {
    "text": "And then towards the-- not in this lecture but\nin a couple of lectures",
    "start": "251360",
    "end": "256970"
  },
  {
    "text": "and as a theme\nthroughout this class, we're going to look\nat some algorithms. They're not super\ncomplicated, but they're",
    "start": "256970",
    "end": "263300"
  },
  {
    "text": "kind of the base algorithms\nfor a bunch of algorithms you might see in\nthe future if you decide to take more CS classes.",
    "start": "263300",
    "end": "270708"
  },
  {
    "text": "Lastly, towards the\nend of the class, we're going to see algorithmic\ncomplexity, which basically means we're going to start\nasking or trying to answer",
    "start": "270708",
    "end": "277670"
  },
  {
    "text": "the question, how do\nwe know the programs we write are efficient? We can write programs, but how\ndo we know that they're fast,",
    "start": "277670",
    "end": "284570"
  },
  {
    "text": "and how do we know\nthat they don't take up all the memory in the computer? So things like that,\ncomparing different algorithms",
    "start": "284570",
    "end": "291710"
  },
  {
    "text": "that do the same thing\nagainst each other. So if there's no questions--",
    "start": "291710",
    "end": "298330"
  },
  {
    "text": "again, as I said, a\nbunch of this information is already in the\nhandout plus more-- we can begin.",
    "start": "298330",
    "end": "305840"
  },
  {
    "text": "OK, so let's start by\ntalking about knowledge.",
    "start": "305840",
    "end": "311240"
  },
  {
    "text": "Declarative knowledge\nis a statement of fact, and a lot of us probably\nin math and in the past",
    "start": "311240",
    "end": "317419"
  },
  {
    "text": "have worked with\ndeclarative knowledge. But this is not how computer\nscience, this is not how this class works.",
    "start": "317420",
    "end": "323569"
  },
  {
    "text": "In computer science\nwhat we do is we work with imperative knowledge,\nwhich is basically a recipe,",
    "start": "323570",
    "end": "328790"
  },
  {
    "text": "how to do something. And when we're programming,\nall we're doing is writing a recipe for the\ncomputer to do something.",
    "start": "328790",
    "end": "335870"
  },
  {
    "text": "That's it. So here's a numerical example. The first statement is\na declarative statement.",
    "start": "335870",
    "end": "344210"
  },
  {
    "text": "The square root of a number\nx is y such that y times y is equal to x. There are many possible\nvalues for x and y",
    "start": "344210",
    "end": "350150"
  },
  {
    "text": "that this statement\ncan be true, right? But if we gave that\nstatement to a computer,",
    "start": "350150",
    "end": "355880"
  },
  {
    "text": "it wouldn't know\nwhat to do with it. What we need to do\nis tell the computer how to find the square\nroot of a number",
    "start": "355880",
    "end": "363440"
  },
  {
    "text": "and then tell us what the\nsquare root of that number is. And so the computer\nthen needs a recipe.",
    "start": "363440",
    "end": "369380"
  },
  {
    "text": "So the recipe, a\nreally simple one for finding the square\nroot of a number, is steps one, two, three.",
    "start": "369380",
    "end": "375500"
  },
  {
    "text": "So what we do is--\nlet's say we want to find the square root of 16.",
    "start": "375500",
    "end": "380680"
  },
  {
    "text": "We obviously know it's four,\nbut the computer doesn't. And so we give it\nan initial guess. Let's say the guess is three.",
    "start": "380680",
    "end": "387680"
  },
  {
    "text": "How do we go from there? So the steps we follow-- step one, if 3 times 3,\n9, is close enough to 16,",
    "start": "387680",
    "end": "395960"
  },
  {
    "text": "we can stop. It's not really\nclose enough for me. So let's keep going.",
    "start": "395960",
    "end": "401910"
  },
  {
    "text": "Step two-- otherwise,\nwe're going to make a new guess\nby averaging g,",
    "start": "401910",
    "end": "406940"
  },
  {
    "text": "which is our original\nguess, 3, and x over g, which is 16 over 3.",
    "start": "406940",
    "end": "412280"
  },
  {
    "text": "16 was the square root\nwe wanted to find. So our next guess is 4.17.",
    "start": "412280",
    "end": "418210"
  },
  {
    "text": "OK, using the new guess,\nrepeat the process until we are close enough. So we go back to step one.",
    "start": "418210",
    "end": "423910"
  },
  {
    "text": "That's the first\npart of the process. We find guess squared. 4.17 squared is 17.36.",
    "start": "423910",
    "end": "430389"
  },
  {
    "text": "So now we say, is\nthat close enough? Not really. It's not. It's 17.",
    "start": "430390",
    "end": "435650"
  },
  {
    "text": "It's not really\neven close to 16. So let's do it again. We make a new guess by averaging\n4.17 and 16 divided by 4.17.",
    "start": "435650",
    "end": "446140"
  },
  {
    "text": "That gives us our\nnew guess, 4.0035. OK, next step, using the new\nguess, we repeat the process.",
    "start": "446140",
    "end": "454210"
  },
  {
    "text": "So 4.0035 squared is 16.277-- .0277.",
    "start": "454210",
    "end": "460080"
  },
  {
    "text": "Is that close enough to x? Yeah, I could be\nhappy with this. I could stop there because we're\nwithin sort of plus/minus 1.",
    "start": "460080",
    "end": "467970"
  },
  {
    "text": "So I'm OK with that. But if we want it to be within\nplus or minus 1 times 10 to the negative 6 or 7\nor something like that,",
    "start": "467970",
    "end": "475170"
  },
  {
    "text": "then we would\ncontinue the process. So really what we had\nthere is an algorithm.",
    "start": "475170",
    "end": "481840"
  },
  {
    "text": "It's a sequence of steps-- step one, step two, step three. There's some sort\nof flow of control.",
    "start": "481840",
    "end": "487449"
  },
  {
    "text": "We had a place where we said\nif the guess is close enough, then we can stop.",
    "start": "487450",
    "end": "493640"
  },
  {
    "text": "Otherwise, we do something else. We had another flow\nof control where we said repeat this thing.",
    "start": "493640",
    "end": "499240"
  },
  {
    "text": "So we're kind of\nnot going linearly, but we're changing the flow. And then lastly\nis a way to stop.",
    "start": "499240",
    "end": "505740"
  },
  {
    "text": "We don't want the\nalgorithm to go on forever. We would like to\nstop at some point. And this stopping point, I\nwas kind of vague about it.",
    "start": "505740",
    "end": "512429"
  },
  {
    "text": "But it could be when we\nwere within plus or minus 1 of the actual answer.",
    "start": "512429",
    "end": "519669"
  },
  {
    "text": "And so recipes are\nbasically algorithms, right?",
    "start": "519669",
    "end": "524680"
  },
  {
    "text": "My grandmother was basically\nteaching algorithms when she would teach\nme to bake a cake.",
    "start": "524680",
    "end": "532020"
  },
  {
    "text": "She didn't call it that,\nbut she was really. And so even recipes have\nthat same structure.",
    "start": "532020",
    "end": "538410"
  },
  {
    "text": "There's a sequence of steps. There's a flow of control. Like, if you don't have\negg, use egg substitute. Or repeat sticking\na toothpick to see",
    "start": "538410",
    "end": "546690"
  },
  {
    "text": "if it comes out clean every\nminute or something like that. And then there's a way to stop.",
    "start": "546690",
    "end": "552210"
  },
  {
    "text": "When the toothpick\ncomes out clean, you take it out of the\noven, and you eat it. And so computers are machines\nthat execute these algorithms.",
    "start": "552210",
    "end": "559700"
  },
  {
    "text": "They're actually dumb. Computers are not very smart. They don't make\ndecisions on their own.",
    "start": "559700",
    "end": "566220"
  },
  {
    "text": "They just follow these\nsequences of steps that we told them to do. Computers are good at storing\nlots and lots of data.",
    "start": "566220",
    "end": "575000"
  },
  {
    "text": "We can't really do\nthat, but computers can store gigabytes of\nstorage, terabytes even.",
    "start": "575000",
    "end": "580520"
  },
  {
    "text": "And computers can do\noperations really, really quickly, which is\nsomething we can't do. They're good at\nthose two things,",
    "start": "580520",
    "end": "586170"
  },
  {
    "text": "but they're not very smart. They can't make\ndecisions unless they're told to make the decisions.",
    "start": "586170",
    "end": "594180"
  },
  {
    "text": "So really, the computer only\ndoes what you tell it to do.",
    "start": "594180",
    "end": "599240"
  },
  {
    "text": "And that's one of the big ideas\nthat I want you to come away from this lecture with.",
    "start": "599240",
    "end": "605080"
  },
  {
    "text": "Computer only does\nwhat you tell it to do. The sequences of steps\nthat you tell it to do, that's the only\nthing it follows.",
    "start": "605080",
    "end": "612520"
  },
  {
    "text": "So a little brief history\njust to make you appreciate programming, Python programming\nlanguage before we actually get",
    "start": "612520",
    "end": "619320"
  },
  {
    "text": "started with it is-- so before the 1940s,\nwe had these things",
    "start": "619320",
    "end": "624839"
  },
  {
    "text": "called fixed program computers. A pocket calculator\nas an example of that. Every button was an operation.",
    "start": "624840",
    "end": "633910"
  },
  {
    "text": "In the little screen,\nyou could use parentheses to put a bunch of different\noperations together, but there was no way to store\nall these operations together",
    "start": "633910",
    "end": "641500"
  },
  {
    "text": "to later put in different\ninputs for that same sequence of operations.",
    "start": "641500",
    "end": "646810"
  },
  {
    "text": "You had to input it every\nsingle-- input those sequences of operations every single time.",
    "start": "646810",
    "end": "652980"
  },
  {
    "text": "After the 1940s, stored programs\ncomputers came into play. And they were able to store\ninstructions to do things",
    "start": "652980",
    "end": "663600"
  },
  {
    "text": "as data. And there was a special program\ncalled an interpreter that",
    "start": "663600",
    "end": "669390"
  },
  {
    "text": "executed these instructions. It knew how to follow\nsimple sequences of steps. When the program told it to\ngo to a different location,",
    "start": "669390",
    "end": "677520"
  },
  {
    "text": "it did. So it was basically\nexecuting these instructions.",
    "start": "677520",
    "end": "683779"
  },
  {
    "text": "And the instructions that it\ndid were arithmetic and logical, so addition, subtraction,\nthings like that;",
    "start": "683780",
    "end": "690769"
  },
  {
    "text": "simple tests like checking for\nequality between two values; and moving data, so\ntaking this value",
    "start": "690770",
    "end": "696500"
  },
  {
    "text": "and putting it at a\ndifferent memory location. So I just wanted to give\nyou a really brief overview,",
    "start": "696500",
    "end": "701860"
  },
  {
    "text": "and this is not super\naccurate, but it gives you a sense of how\nexactly things happen",
    "start": "701860",
    "end": "707410"
  },
  {
    "text": "low level in the computer. So the computer\nbasically has memory,",
    "start": "707410",
    "end": "712660"
  },
  {
    "text": "where things are stored. It has an arithmetic logic\nunit that does operations.",
    "start": "712660",
    "end": "717730"
  },
  {
    "text": "It knows how to add things,\nsubtract things, multiply things, compare things. And then it has the\ncontrol unit, where",
    "start": "717730",
    "end": "723970"
  },
  {
    "text": "this program counter is set. And this is where\nyou put a program in. So let's see if this works.",
    "start": "723970",
    "end": "730570"
  },
  {
    "text": "This is a program. And up here is our memory. So we have a bunch of memory\nlocations, 3456, 3457.",
    "start": "730570",
    "end": "738250"
  },
  {
    "text": "And at each of these\nmemory locations, we have some values\nstored, prefilled.",
    "start": "738250",
    "end": "744750"
  },
  {
    "text": "So when we first run this\nprogram, what ends up happening is that the interpreter\nsees the first instruction,",
    "start": "744750",
    "end": "751260"
  },
  {
    "text": "Add, the values at\n3456 and 3457 together. So it goes to these\nmemory locations here,",
    "start": "751260",
    "end": "758190"
  },
  {
    "text": "grabs the 3 and the\n4, and sends them to the Arithmetic Logic Unit. The ALU knows how\nto do the addition.",
    "start": "758190",
    "end": "764709"
  },
  {
    "text": "So it adds 3 plus 4, 7, and\nsends the result back here. Now, we never told it to\nstore that result anywhere.",
    "start": "764710",
    "end": "772710"
  },
  {
    "text": "But the next\ninstruction says Store the value you just\ngot back from the ALU at this memory location, 3458.",
    "start": "772710",
    "end": "779760"
  },
  {
    "text": "So the next step\nbasically takes that 7 and stores it at\nmemory location 3458.",
    "start": "779760",
    "end": "788320"
  },
  {
    "text": "Super tedious-- all we\ndid was add 3 plus 4. We do that again.",
    "start": "788320",
    "end": "794060"
  },
  {
    "text": "We add the values\nat 7889 and 7890. So it goes in the memory.",
    "start": "794060",
    "end": "799310"
  },
  {
    "text": "It grabs the 5 and the\n2, sends it to the ALU. The ALU calculates it\nas 7, brings it back,",
    "start": "799310",
    "end": "806709"
  },
  {
    "text": "and then we store\nthat in location 7891.",
    "start": "806710",
    "end": "812270"
  },
  {
    "text": "And then after that, all\nwe've done is two additions. And then the next instruction\nsays Compare the values",
    "start": "812270",
    "end": "818329"
  },
  {
    "text": "at memory locations\n3458 and 7891. So we're going to\ncompare the 7 with the 7.",
    "start": "818330",
    "end": "825670"
  },
  {
    "text": "The ALU again does this\ncomparison and says, all right, well, 7\nand 7 are equivalent.",
    "start": "825670",
    "end": "831350"
  },
  {
    "text": "So this is true or whatever\nit wants to give back to the interpreter.",
    "start": "831350",
    "end": "836860"
  },
  {
    "text": "And then the last\ninstruction here we have is Print the result\nof that comparison. So we print True\nbecause they were equal.",
    "start": "836860",
    "end": "844930"
  },
  {
    "text": "Again, super high\nlevel, but it kind of gives you an appreciation\nfor programming languages",
    "start": "844930",
    "end": "850160"
  },
  {
    "text": "these days. This is very tedious to write\nif we had to write programs in this manner.",
    "start": "850160",
    "end": "856470"
  },
  {
    "text": "Alan Turing a long\ntime ago showed that you can compute\nanything with actually an even more basic\nset of primitives,",
    "start": "856470",
    "end": "862170"
  },
  {
    "text": "not addition, subtraction. But instead, with a\ntape, you would actually have six primitives-- move the\ntape left, move the tape right,",
    "start": "862170",
    "end": "869820"
  },
  {
    "text": "read the value at the tape,\nput a value on the tape, erase the value from the\ntape, and no operation.",
    "start": "869820",
    "end": "878130"
  },
  {
    "text": "And so since he showed this what\nthe result of it actually was",
    "start": "878130",
    "end": "883790"
  },
  {
    "text": "is down here. Anything computable\nin one language is computable in any other\nprogramming language.",
    "start": "883790",
    "end": "890820"
  },
  {
    "text": "So if we had some\nprogram written in Java, that basically boils\ndown to something super",
    "start": "890820",
    "end": "897529"
  },
  {
    "text": "long but something that is made\nup of these six primitives.",
    "start": "897530",
    "end": "902540"
  },
  {
    "text": "That means that if we boil\ndown this program to these six primitives, we can build\nback up the same program",
    "start": "902540",
    "end": "908450"
  },
  {
    "text": "in a completely\ndifferent language. And that's really powerful. That's a really cool statement.",
    "start": "908450",
    "end": "914399"
  },
  {
    "text": "Now, we're not going to be\nworking with those primitives. We're going to be using the\nPython primitives, which",
    "start": "914400",
    "end": "921629"
  },
  {
    "text": "are more convenient,\nand they allow us to do a lot more\nthings in much less time. I'm going to do a\nlittle comparison",
    "start": "921630",
    "end": "928260"
  },
  {
    "text": "as we talk about the primitives\nof Python with English. So in English, some of the\nprimitives might be words",
    "start": "928260",
    "end": "936090"
  },
  {
    "text": "or even we can do\nletters or characters. But we can say it's words.",
    "start": "936090",
    "end": "941785"
  },
  {
    "text": "With characters, we\ncan build up words. With words, we can\nbuild up sentences. With sentences, we\ncan build up stories. With stories, we can build up\nbooks and things like that.",
    "start": "941785",
    "end": "950700"
  },
  {
    "text": "In programming\nlanguages, the primitives are numbers, sequences\nof characters, operators",
    "start": "950700",
    "end": "958860"
  },
  {
    "text": "like addition,\nmultiplication, division,",
    "start": "958860",
    "end": "964500"
  },
  {
    "text": "checking for equality, checking\nthat something is greater than, things like that. So once we have these\nprimitives in a language,",
    "start": "964500",
    "end": "972209"
  },
  {
    "text": "we can start to build up\nthe syntax of the language. So in English, having something\nlike noun and noun and noun",
    "start": "972210",
    "end": "980130"
  },
  {
    "text": "doesn't make any sense. Cat dog boy doesn't\nmake much sense. It's not syntactically valid.",
    "start": "980130",
    "end": "986050"
  },
  {
    "text": "But noun verb noun is\nsyntactically valid.",
    "start": "986050",
    "end": "991100"
  },
  {
    "text": "Similarly, in\nprogramming languages, we can have two objects\nkind of side by side.",
    "start": "991100",
    "end": "997890"
  },
  {
    "text": "So here, this is a sequence\nof characters h and i. And this is the number 5\nright beside that sequence",
    "start": "997890",
    "end": "1003670"
  },
  {
    "text": "of characters. But that doesn't make\nany sense, right? What does it mean to have\nthis sequence of characters",
    "start": "1003670",
    "end": "1009580"
  },
  {
    "text": "and that number right beside it? It has no meaning in Python. Instead, what we\nhave to do is we",
    "start": "1009580",
    "end": "1014980"
  },
  {
    "text": "have to add an operator in\nbetween these two objects. So here we add a\nlittle star operator in between the sequence\nof characters \"hi\"",
    "start": "1014980",
    "end": "1021550"
  },
  {
    "text": "and the number 5. And in Python, the\nmeaning to this is I want to repeat the\nsequence of characters \"hi,\"",
    "start": "1021550",
    "end": "1028300"
  },
  {
    "text": "h-i, five times. So this would basically\ngive me hi, hi, hi, hi, hi.",
    "start": "1028300",
    "end": "1033410"
  },
  {
    "text": "So once we have\nsentences in English and expressions that\nare syntactically valid,",
    "start": "1033410",
    "end": "1041060"
  },
  {
    "text": "we can now talk about the static\nsemantics of the language. So in English, saying\nsomething like \"I are hungry\"",
    "start": "1041060",
    "end": "1047150"
  },
  {
    "text": "is syntactically correct,\nbut it's not static-- it's not-- sorry, it doesn't\nhave good static semantics.",
    "start": "1047150",
    "end": "1057590"
  },
  {
    "text": "There's no meaning-- there is\nno meaning to that because the \"are\" is for you or plural.",
    "start": "1057590",
    "end": "1064850"
  },
  {
    "text": "Similarly, in\nprogramming languages, and this will differ depending\non what programming language you use--",
    "start": "1064850",
    "end": "1071000"
  },
  {
    "text": "here, in the previous\nslide, we saw that you can use the star\noperator between the sequence",
    "start": "1071000",
    "end": "1076610"
  },
  {
    "text": "of characters and the number. And that meant repeat\nthat sequence many times.",
    "start": "1076610",
    "end": "1081690"
  },
  {
    "text": "But if we use a plus operator\nin between the sequence of characters and a\nnumber, that doesn't",
    "start": "1081690",
    "end": "1087380"
  },
  {
    "text": "have any meaning in Python. So it has a static\nsemantic error, even though it's\nsyntactically valid, right?",
    "start": "1087380",
    "end": "1094700"
  },
  {
    "text": "We have operator-- sorry,\nobject operator object.",
    "start": "1094700",
    "end": "1101429"
  },
  {
    "text": "So, so far, we've been able\nto find really nice parallels with English, the English\nlanguage and the programming",
    "start": "1101430",
    "end": "1108010"
  },
  {
    "text": "languages. But this is kind of\nwhere things break down, when we talk about the\nsemantics of a language.",
    "start": "1108010",
    "end": "1113830"
  },
  {
    "text": "So in English, you can have\nmany different meanings. The chicken is ready to eat\nmeans let's eat this chicken.",
    "start": "1113830",
    "end": "1121679"
  },
  {
    "text": "Or the chicken is ready to\neat means the chicken wants to eat something. Programming languages, there\nis no multiple meanings",
    "start": "1121680",
    "end": "1129690"
  },
  {
    "text": "to a program that you write. Because the computer,\nthe machine, the language follows the\nset of instructions to a T,",
    "start": "1129690",
    "end": "1138000"
  },
  {
    "text": "there is no ambiguity\nabout what it needs to do. It just follows the\ninstructions and does",
    "start": "1138000",
    "end": "1143610"
  },
  {
    "text": "what it needs to do to the\nend, till it reaches the-- it terminates the program.",
    "start": "1143610",
    "end": "1150059"
  },
  {
    "text": "And so programs only\nhave one meaning, but the problem is it\nmight not be the meaning that you intended it to have.",
    "start": "1150060",
    "end": "1157289"
  },
  {
    "text": "And that's when things\nstart to go wrong. We can have syntactic errors\nin our program, spelling errors",
    "start": "1157290",
    "end": "1164000"
  },
  {
    "text": "and indentation errors,\nthings like that. And those are easy to catch. Static semantic errors are\n90% probably easy to catch.",
    "start": "1164000",
    "end": "1171830"
  },
  {
    "text": "But the problem comes\nin with the semantics. The meaning that you\nintended this program to have",
    "start": "1171830",
    "end": "1179000"
  },
  {
    "text": "might not be what\nit's actually doing. And that's where most\nof my errors happen.",
    "start": "1179000",
    "end": "1184800"
  },
  {
    "text": "And that's where I get super\nfrustrated when I program. And that's probably where you\nguys will get super frustrated too because you write a\nprogram that you think",
    "start": "1184800",
    "end": "1191600"
  },
  {
    "text": "is doing one thing, but instead,\neither it crashes right away, or it runs forever and doesn't\nreally stop, or it terminates,",
    "start": "1191600",
    "end": "1199520"
  },
  {
    "text": "but it gives you an\nincorrect answer. It's not what you\nwere expecting. And we'll talk about\nthis in a few lectures.",
    "start": "1199520",
    "end": "1208550"
  },
  {
    "text": "So when we write\nprograms, we're basically writing sequences of\ndefinitions and commands.",
    "start": "1208550",
    "end": "1214120"
  },
  {
    "text": "And we're going to write\nthese either in a file editor or in a shell. The first, today at least, we're\nwriting in the shell directly.",
    "start": "1214120",
    "end": "1222970"
  },
  {
    "text": "And half of tomorrow,\nwe'll write in the shell because we're not\nreally writing any--",
    "start": "1222970",
    "end": "1230830"
  },
  {
    "text": "we're not really writing\nmany lines of code. We're just going to be-- I'm just going to be showing\nyou some really quick things",
    "start": "1230830",
    "end": "1239980"
  },
  {
    "text": "that we can do with the\nPython programming language. So hopefully you all have\ninstalled the programming",
    "start": "1239980",
    "end": "1245740"
  },
  {
    "text": "environment. This is the Code Editor. So tomorrow, we'll\nstart working in here.",
    "start": "1245740",
    "end": "1251750"
  },
  {
    "text": "But for today, we're really\njust going to work in the shell. And even in the\nfuture, you can still",
    "start": "1251750",
    "end": "1257815"
  },
  {
    "text": "type commands in the shell. I find the shell very useful if\nthere's just something really quick that I want\nto check, that I",
    "start": "1257815",
    "end": "1264230"
  },
  {
    "text": "don't want to write a\nprogram for and then run. It's just like a\nsimple command that I want to check to\nmake sure it's doing",
    "start": "1264230",
    "end": "1269942"
  },
  {
    "text": "what I think it's doing before\nI insert it in my code editor. So here we have this.",
    "start": "1269942",
    "end": "1279650"
  },
  {
    "text": "So mine is-- I guess I'm using the white\ntheme just because I find it easier for you guys to see.",
    "start": "1279650",
    "end": "1285290"
  },
  {
    "text": "This is the file editor. And this is just a bunch\nof expressions or-- yeah, a bunch of code that\nwe're going to type in today.",
    "start": "1285290",
    "end": "1292940"
  },
  {
    "text": "And we're going to type it in\nthe shell today, so the thing on the right-hand side. ",
    "start": "1292940",
    "end": "1300270"
  },
  {
    "text": "OK, so what exactly do we\ndo when we write a program?",
    "start": "1300270",
    "end": "1305310"
  },
  {
    "text": "At the base of it, we\nare going to create objects inside our programs, and\nwe're going to manipulate them.",
    "start": "1305310",
    "end": "1313140"
  },
  {
    "text": "That's it. That's what programming is\nmostly about at its core.",
    "start": "1313140",
    "end": "1320320"
  },
  {
    "text": "Now, when we create\nobjects, it's important-- this is\nkind of something we're going to\ncome back to again",
    "start": "1320320",
    "end": "1326455"
  },
  {
    "text": "and again in a more\nhigh-level setting. But right now what I\nwant you to understand is that when we create an\nobject, an object has a type.",
    "start": "1326455",
    "end": "1336870"
  },
  {
    "text": "And the type that an\nobject has tells Python the things you're allowed\nto do with that object.",
    "start": "1336870",
    "end": "1343870"
  },
  {
    "text": "So here are two examples. The number 30, it's a number.",
    "start": "1343870",
    "end": "1349100"
  },
  {
    "text": "The type we'll talk\nabout it in a bit. The type is an integer. It's a whole number. But basically,\nwhat are the things",
    "start": "1349100",
    "end": "1355179"
  },
  {
    "text": "we can do with this\ninteger, with this number? We can add it to another number. We can subtract it\nto another number.",
    "start": "1355180",
    "end": "1360670"
  },
  {
    "text": "We can take it to another power. We can take some other\nnumber to this power of 30.",
    "start": "1360670",
    "end": "1367510"
  },
  {
    "text": "A bunch of mathematical\noperations, as you would expect. So that's pretty\nstraightforward.",
    "start": "1367510",
    "end": "1373940"
  },
  {
    "text": "What about this one here,\nthis quotation capital A, lowercase a--",
    "start": "1373940",
    "end": "1379190"
  },
  {
    "text": "lowercase n,\nlowercase a quotation? So this is something we'll\ntalk about next lecture. It's called a string.",
    "start": "1379190",
    "end": "1385270"
  },
  {
    "text": "And it's a sequence\nof characters. The quotations tell Python\nit's a sequence of characters.",
    "start": "1385270",
    "end": "1390710"
  },
  {
    "text": "And the characters part of it\nare capital A, lowercase n, and lowercase a. The kinds of things I\ncan do with this string",
    "start": "1390710",
    "end": "1399040"
  },
  {
    "text": "are not the same kinds\nof things I'm allowed to do with the number, right? If I tried to take\nAna and divide it",
    "start": "1399040",
    "end": "1405490"
  },
  {
    "text": "by the sequence\nof characters Bob, Python would complain\nvery much because you",
    "start": "1405490",
    "end": "1411340"
  },
  {
    "text": "can't divide a string\nby another string, a sequence of characters. It doesn't make\nsense to divide it by another sequence\nof characters.",
    "start": "1411340",
    "end": "1417700"
  },
  {
    "text": "Similarly, I can't\ntake Ana to some power. I can't multiply--",
    "start": "1417700",
    "end": "1422950"
  },
  {
    "text": "I can't multiply by\nitself, things like that. But the kinds of things\nthat I am allowed to do on a sequence\nof characters",
    "start": "1422950",
    "end": "1428860"
  },
  {
    "text": "is different than\nthe kinds of things I'm allowed to do on a number. So the things I can do with\na sequence of characters",
    "start": "1428860",
    "end": "1433887"
  },
  {
    "text": "is I can say, well,\nwhat's the character at the first position? What's the middle character?",
    "start": "1433887",
    "end": "1439780"
  },
  {
    "text": "How long is the\nsequence of characters? How many characters do I have? And so now you can see\nthat the type of the object",
    "start": "1439780",
    "end": "1447351"
  },
  {
    "text": "is actually really important. Python uses it to know\nthe kinds of operations you're allowed to do with it.",
    "start": "1447352",
    "end": "1453399"
  },
  {
    "text": "And so there's actually\nscalar objects, and these are Python's\nprimitives, numbers",
    "start": "1453400",
    "end": "1459929"
  },
  {
    "text": "and truth values. And there are nonscalar objects. We're not talking\nabout these yet. We'll talk about these\nin a few lectures.",
    "start": "1459930",
    "end": "1466628"
  },
  {
    "text": "But these have some\nsort of structure. So for example,\na list of numbers has a structure because there's\na number at the beginning",
    "start": "1466628",
    "end": "1473862"
  },
  {
    "text": "of the list, there's a number\nat the end of the list, things like that. But a number itself\ndoesn't have a structure.",
    "start": "1473862",
    "end": "1479470"
  },
  {
    "text": "It's just the number. So what are the types\nof the scalar objects?",
    "start": "1479470",
    "end": "1484912"
  },
  {
    "text": "What are the types of\nthe primitives in Python? Integers, so number 5, 0,\nnegative 100, 1 million.",
    "start": "1484912",
    "end": "1492660"
  },
  {
    "text": "Float is another type. It represents all the\nreal numbers, so 3.27.",
    "start": "1492660",
    "end": "1498870"
  },
  {
    "text": "2.0 is a float because it\nhas a decimal number even though to us that just means 2.",
    "start": "1498870",
    "end": "1504789"
  },
  {
    "text": "But to Python, if\nyou put in 2.0, it says that's a type float. Negative 3.14159,\nthings like that.",
    "start": "1504790",
    "end": "1512350"
  },
  {
    "text": "Bool is a Boolean. It represents truth values. And there's only two possible\nvalues that a Boolean type has,",
    "start": "1512350",
    "end": "1520440"
  },
  {
    "text": "True and False. And it has to be capital T\nTrue and capital F False.",
    "start": "1520440",
    "end": "1526690"
  },
  {
    "text": "And the last one is\nthis NoneType type. It's literally called NoneType.",
    "start": "1526690",
    "end": "1533560"
  },
  {
    "text": "And it has only one\nspecial value, None. We're not going to talk\nabout it for a bit, but we will sometime\nin the future.",
    "start": "1533560",
    "end": "1541240"
  },
  {
    "text": "So to figure out the\ntype of an object when you create that object,\nyou use the type command.",
    "start": "1541240",
    "end": "1547360"
  },
  {
    "text": "So we can say something\nlike type parentheses. And this is a command. And inside the parentheses,\nyou say, what do you",
    "start": "1547360",
    "end": "1554048"
  },
  {
    "text": "want to find the type of? So if we do type of 7,\nit tells me it's an int.",
    "start": "1554048",
    "end": "1559120"
  },
  {
    "text": "And if you want to do\nthe same command again, I hit the up arrow,\nand it automatically puts in what I wrote previously.",
    "start": "1559120",
    "end": "1564580"
  },
  {
    "text": "And then if I want\nto do type of 0.0, it's a float because\nthere's a decimal point. ",
    "start": "1564580",
    "end": "1573110"
  },
  {
    "text": "So this is basically\nwhat I said. So we type this in the shell. And the shell tells\nus what the output is.",
    "start": "1573110",
    "end": "1583289"
  },
  {
    "text": "So just to reiterate,\nint, float, bool, and NoneType are\ntypes of objects.",
    "start": "1583290",
    "end": "1591870"
  },
  {
    "text": "And there can be many\ndifferent objects you can create of that type. So if you think about\nit, ints and floats,",
    "start": "1591870",
    "end": "1598980"
  },
  {
    "text": "we basically have\nan infinite number of objects we can\ncreate of those types",
    "start": "1598980",
    "end": "1604020"
  },
  {
    "text": "because we can have 0, 1, 2,\n3, 100, 200, 300, 1 million, and all the negatives.",
    "start": "1604020",
    "end": "1609840"
  },
  {
    "text": "There's almost an infinite\nnumber of values or objects that we can create of\ntype int and float.",
    "start": "1609840",
    "end": "1616830"
  },
  {
    "text": "But bool, there's only two,\nthe truth values True or False. And the NoneType, there's\nonly one, this None.",
    "start": "1616830",
    "end": "1624929"
  },
  {
    "text": "So that's the type, and these\nare the possible values, possible objects we can create.",
    "start": "1624930",
    "end": "1631210"
  },
  {
    "text": "You try it. So you can just yell\nout the answers. There's nothing to type unless\nyou want to check yourself so",
    "start": "1631210",
    "end": "1637750"
  },
  {
    "text": "what is the type of 1234? AUDIENCE: Int. ANA BELL: Int. Type of 8.99?",
    "start": "1637750",
    "end": "1644730"
  },
  {
    "text": "Float. Type of 9.0? Float. Type of True?",
    "start": "1644730",
    "end": "1649780"
  },
  {
    "text": "Bool. And type of False? Bool. Perfect. If you ever wonder what\nthe type of something is,",
    "start": "1649780",
    "end": "1655800"
  },
  {
    "text": "you type it in here. You guys are doing well. Type is bool. Type of lowercase\nt true is an error,",
    "start": "1655800",
    "end": "1663870"
  },
  {
    "text": "just wanted to point that out\njust to reiterate the fact that capitalization\nmatters in Python.",
    "start": "1663870",
    "end": "1669000"
  },
  {
    "text": "This is our first\nerror, by the way, guys. Very exciting. The error is a\nNameError, and this is",
    "start": "1669000",
    "end": "1675210"
  },
  {
    "text": "the message associated with it. You also know that it's\nsomething special in Python",
    "start": "1675210",
    "end": "1684490"
  },
  {
    "text": "when you have color-coded stuff. So you see capital T\nTrue, capital F False are",
    "start": "1684490",
    "end": "1690430"
  },
  {
    "text": "this dark blue here,\nwhereas anything that's not special in\nPython is just black.",
    "start": "1690430",
    "end": "1697900"
  },
  {
    "text": "So type is a special command. This is a float, so you\nsee they're color coded.",
    "start": "1697900",
    "end": "1703700"
  },
  {
    "text": "OK. So once we create\nobjects, one thing we can do with these\nobjects is to cast them",
    "start": "1703700",
    "end": "1710300"
  },
  {
    "text": "to a different type. Now, this is a little\nbit maybe confusing",
    "start": "1710300",
    "end": "1716300"
  },
  {
    "text": "because we're not actually\nchanging the object once we've created it. So once we create the integer\n3, it's there in memory.",
    "start": "1716300",
    "end": "1726210"
  },
  {
    "text": "If we cast that integer\nto a float version of it, we're creating a new\nobject in memory.",
    "start": "1726210",
    "end": "1732240"
  },
  {
    "text": "We're not changing the 3. The 3 already exists. We're just getting the\nfloat version of it",
    "start": "1732240",
    "end": "1737640"
  },
  {
    "text": "and storing it as a\nnew object in memory. So when we do float\n3, this is a command",
    "start": "1737640",
    "end": "1743789"
  },
  {
    "text": "that gets for me the float\nversion of the integer 3. So that will give me 3.0.",
    "start": "1743790",
    "end": "1750720"
  },
  {
    "text": "So for example, this\nis what I had, float 3.",
    "start": "1750720",
    "end": "1756750"
  },
  {
    "text": "The output is 3.0. If I do int of 5.2,\nit truncates it,",
    "start": "1756750",
    "end": "1766120"
  },
  {
    "text": "and it gives me the integer\nportion of this float. If I do int of 5.9,\nit still truncates it",
    "start": "1766120",
    "end": "1773581"
  },
  {
    "text": "and gives me the integer\nversion of this float. It doesn't round. I'm just asking for the\ninteger version of this float.",
    "start": "1773582",
    "end": "1782200"
  },
  {
    "text": "Some operations like\nround is an operation we can do has an\nimplicit cast in it.",
    "start": "1782200",
    "end": "1788870"
  },
  {
    "text": "So if I round 5.9, it's actually\ngoing to round it to 6.0 and then cast it to an integer.",
    "start": "1788870",
    "end": "1795710"
  },
  {
    "text": "So notice it doesn't\ngive me as an output 6.0. It then rounds it to just six. ",
    "start": "1795710",
    "end": "1803559"
  },
  {
    "text": "So that's basically what\nI said in the example. So let's have you try this.",
    "start": "1803560",
    "end": "1810940"
  },
  {
    "text": "What are the types\nof the following? I don't need the\nvalues but the types. So if I get type of float of\n123, what is the type of that?",
    "start": "1810940",
    "end": "1823639"
  },
  {
    "text": "Float, yeah, exactly. Yep. What if I round 7.9?",
    "start": "1823640",
    "end": "1828830"
  },
  {
    "text": "What's the type of the result? Int, yep. What if I create a float\nof the round of 7.2?",
    "start": "1828830",
    "end": "1835700"
  },
  {
    "text": "AUDIENCE: Float. ANA BELL: Yes, good. Float would be 7.0. And the int of 7.2?",
    "start": "1835700",
    "end": "1841550"
  },
  {
    "text": "AUDIENCE: 7. Int. ANA BELL: Int, yes, exactly. I want the type not the value. And the int of 7.9\nis an int, exactly.",
    "start": "1841550",
    "end": "1851490"
  },
  {
    "text": "Awesome, good. OK, so we've created\na bunch of objects.",
    "start": "1851490",
    "end": "1857075"
  },
  {
    "text": "We know that we can\ncreate a bunch of objects in our programs. What do we do with them? Well, we can combine\nthem into expressions.",
    "start": "1857075",
    "end": "1865380"
  },
  {
    "text": "So let's say we have 3 plus 2. I've got object,\noperator, object.",
    "start": "1865380",
    "end": "1871490"
  },
  {
    "text": "Cool, syntactically\nvalid in Python and has no static\nsemantic error. So if I do that in Python,\nit's going to be OK.",
    "start": "1871490",
    "end": "1881120"
  },
  {
    "text": "3 plus 2, 5. And the type of 3\nplus 2 is an integer.",
    "start": "1881120",
    "end": "1891419"
  },
  {
    "text": "So basically what\nI've done here, I've put an expression\nwithin this type command.",
    "start": "1891420",
    "end": "1898320"
  },
  {
    "text": "And that's OK. That's, in fact,\nencouraged in Python. You don't just want to\ncalculate and then stick in.",
    "start": "1898320",
    "end": "1904665"
  },
  {
    "text": "That would be\nvery, very tedious. So you can insert expressions\nin many, many different places.",
    "start": "1904665",
    "end": "1910360"
  },
  {
    "text": "So here we have 3 plus\n2, 5 divided by 3. Again, we've got 5 divided\nby 3 has this decimal value.",
    "start": "1910360",
    "end": "1916630"
  },
  {
    "text": "And the result has a float-- is of type float.",
    "start": "1916630",
    "end": "1921830"
  },
  {
    "text": "So the important\nthing to remember when we're doing expressions\nis Python reads the expression,",
    "start": "1921830",
    "end": "1928390"
  },
  {
    "text": "but it does not store\nthe expression in memory. What it does is it\nreads the expression,",
    "start": "1928390",
    "end": "1935080"
  },
  {
    "text": "evaluates it to\none single value, and then it stores the\nresult value in memory.",
    "start": "1935080",
    "end": "1942049"
  },
  {
    "text": "So it never stores\nthe expression. It evaluates the expression\nand then stores the value.",
    "start": "1942050",
    "end": "1947649"
  },
  {
    "text": "And so this is the syntax for an\nexpression-- object, operator, object, as we just saw.",
    "start": "1947650",
    "end": "1953180"
  },
  {
    "text": "And that's really-- and\nthe idea I said before, where Python stores\nvalues of expressions,",
    "start": "1953180",
    "end": "1960340"
  },
  {
    "text": "not the expressions themselves,\nis really, really important.",
    "start": "1960340",
    "end": "1965480"
  },
  {
    "text": "So this is my first\nbig idea slide. I decided to insert\nthese because I",
    "start": "1965480",
    "end": "1970610"
  },
  {
    "text": "think they stress the\nimportance of several concepts. So I hope this is one. So we're taking expressions.",
    "start": "1970610",
    "end": "1977690"
  },
  {
    "text": "They can be as\ncomplex as you'd like. We can use parentheses,\na bunch of-- it doesn't just have to be\nobject, operator, object.",
    "start": "1977690",
    "end": "1985070"
  },
  {
    "text": "It can be more\ncomplex than that. But basically, however\ncomplex that expression",
    "start": "1985070",
    "end": "1990590"
  },
  {
    "text": "is, we evaluate it, and we\nreplace it with one value. And the expression can\nbe something like this.",
    "start": "1990590",
    "end": "1998350"
  },
  {
    "text": "It doesn't just have to be\nsomething that's mathematical. This was a mathematical\nexpression, but this is also an expression.",
    "start": "1998350",
    "end": "2004400"
  },
  {
    "text": "And it evaluates. So this entire thing evaluates\nto this word, this word which",
    "start": "2004400",
    "end": "2011240"
  },
  {
    "text": "represents the type integer. So here are some more examples.",
    "start": "2011240",
    "end": "2016660"
  },
  {
    "text": "3 plus 2, again. We've got these examples\nwith the parentheses,",
    "start": "2016660",
    "end": "2022270"
  },
  {
    "text": "4 plus 2 times 6\nminus 1 obviously gives us the number, 35. And then we can insert\nexpressions wherever we'd like.",
    "start": "2022270",
    "end": "2029120"
  },
  {
    "text": "So here I'm inserting\nthat specific expression in the type command.",
    "start": "2029120",
    "end": "2034220"
  },
  {
    "text": "And this is also an\nexpression, like I just said. And its result is int.",
    "start": "2034220",
    "end": "2040570"
  },
  {
    "text": "And similarly, we can also\ninsert that expression here. And then we can wrap\nthat around cast.",
    "start": "2040570",
    "end": "2046899"
  },
  {
    "text": "And it gives us a float. Yes? AUDIENCE: So when you're\ninserting expressions",
    "start": "2046900",
    "end": "2051949"
  },
  {
    "text": "[INAUDIBLE] include\nthe operators-- [INAUDIBLE] operators in? ANA BELL: When you're\ninserting-- sorry,",
    "start": "2051949",
    "end": "2057919"
  },
  {
    "text": "when you're inserting what? AUDIENCE: Well, since you\nsaid they're expressions, and you said that you need\nlike object, operator, object,",
    "start": "2057920",
    "end": "2064550"
  },
  {
    "text": "expression, type. What would be the\noperators in this case? ANA BELL: Oh, I see.",
    "start": "2064550",
    "end": "2070157"
  },
  {
    "text": "AUDIENCE: How are they defined? ANA BELL: Yeah, that's a\ngood-- that's a good question. So in this particular case, the\ntype and the float are not--",
    "start": "2070157",
    "end": "2081908"
  },
  {
    "text": "there is no operator I guess\nin this particular case. It's more like a command\nthat gives us an output.",
    "start": "2081909",
    "end": "2088210"
  },
  {
    "text": "But there is still some-- there is still an\noutput that it gives us.",
    "start": "2088210",
    "end": "2094510"
  },
  {
    "text": "So we can then take\nthe result of this and save it somewhere else.",
    "start": "2094510",
    "end": "2100240"
  },
  {
    "text": "Sorry, yeah, I guess the example\nI gave on the previous slide was just an example\nof an expression",
    "start": "2100240",
    "end": "2106359"
  },
  {
    "text": "where we could do\nobject, operator, object. Yeah. ",
    "start": "2106360",
    "end": "2114830"
  },
  {
    "text": "Yeah, so when we have these-- I guess it works for\nmathematical expressions. Mathematical expressions\nwork left to right, just",
    "start": "2114830",
    "end": "2121760"
  },
  {
    "text": "like in math. Parentheses can override\ncertain precedents.",
    "start": "2121760",
    "end": "2129150"
  },
  {
    "text": "If we have commands\nthat have computations, then we have this command\nwith the parentheses.",
    "start": "2129150",
    "end": "2136310"
  },
  {
    "text": "And we evaluate what's\ninside the parentheses first. So we work our way in to\nout in that particular case.",
    "start": "2136310",
    "end": "2142309"
  },
  {
    "text": " So here are some examples. Let's have you try these.",
    "start": "2142310",
    "end": "2147700"
  },
  {
    "text": "So we can type these\nin our console. What are the values of\nthe following expressions?",
    "start": "2147700",
    "end": "2153560"
  },
  {
    "text": "So 13 minus 4 divided\nby 12 times 12. So we can try that.",
    "start": "2153560",
    "end": "2158635"
  },
  {
    "text": " I don't know off\nthe top of my head,",
    "start": "2158635",
    "end": "2164810"
  },
  {
    "text": "so we'll have to type it in. 0.0625, OK. So the value of that\nexpression is a float, right?",
    "start": "2164810",
    "end": "2170960"
  },
  {
    "text": "0.0625. What's the value of the\nexpression type 4 times 3?",
    "start": "2170960",
    "end": "2177512"
  },
  {
    "text": "AUDIENCE: Int. ANA BELL: Int, yeah. What about the type of the\nexpression 4.0 times 3?",
    "start": "2177512",
    "end": "2183690"
  },
  {
    "text": "AUDIENCE: Float. ANA BELL: Yes, exactly. That's very good. So type of 4 times 3 is int.",
    "start": "2183690",
    "end": "2190000"
  },
  {
    "text": "But 4.0 times 3 is a float. Good. And then what about int\nof a half or of 1 over 2?",
    "start": "2190000",
    "end": "2197260"
  },
  {
    "text": " AUDIENCE: So it's 0.",
    "start": "2197260",
    "end": "2202380"
  },
  {
    "text": "ANA BELL: Yeah, exactly, it's 0. Yep, because it's 0.5,\nand we truncate to 0.",
    "start": "2202380",
    "end": "2210220"
  },
  {
    "text": "The reason I had this here\nis because it leads nicely into this slide. You don't have to\nmemorize these rules.",
    "start": "2210220",
    "end": "2216310"
  },
  {
    "text": "You can always check\nit out in the console. But there are some\nrules for the resulting",
    "start": "2216310",
    "end": "2221500"
  },
  {
    "text": "types when we do operations. So when we do\noperations with numbers,",
    "start": "2221500",
    "end": "2226990"
  },
  {
    "text": "addition, subtraction,\nand multiplication always yield an integer if both of\nthe operators are integers.",
    "start": "2226990",
    "end": "2235540"
  },
  {
    "text": "If one is a float\nor both are floats, then it gives me a float. Division is different.",
    "start": "2235540",
    "end": "2240819"
  },
  {
    "text": "No matter what types you divide,\nyou will always get a float. ",
    "start": "2240820",
    "end": "2247190"
  },
  {
    "text": "Now what about this\n// and this percent? These are actually\nuseful operations.",
    "start": "2247190",
    "end": "2252250"
  },
  {
    "text": "They kind of go hand\nin hand with division. So when I do 5 divided\nby 3, it's this 1.667.",
    "start": "2252250",
    "end": "2261726"
  },
  {
    "text": "// is basically a floor or\ngetting the integer portion",
    "start": "2261726",
    "end": "2268110"
  },
  {
    "text": "of the division. So 5//3 gives me one. It truncates the fraction.",
    "start": "2268110",
    "end": "2277619"
  },
  {
    "text": "The percent gives\nme the remainder. So 5%3 gives me the remainder\nwhen I divide 5 by 3.",
    "start": "2277620",
    "end": "2285630"
  },
  {
    "text": "So it's going to give me-- give\nit to me in a whole number. So that's going to be 2 because\nthere's 2 left over when",
    "start": "2285630",
    "end": "2292440"
  },
  {
    "text": "I divide 5 by 3. So these are pretty\nuseful operations,",
    "start": "2292440",
    "end": "2297810"
  },
  {
    "text": "the // and the percent, when\nwe do mathematical programs.",
    "start": "2297810",
    "end": "2303210"
  },
  {
    "text": "The last thing is\nthe ** is how we denote power, exponentiation,\nkind of different",
    "start": "2303210",
    "end": "2310319"
  },
  {
    "text": "than you might be\nused to in math. So 2 to the power of 3, 8.",
    "start": "2310320",
    "end": "2316980"
  },
  {
    "text": "2 to the power of 3.0, 8.0. And the rules for integer\ndivision, percent,",
    "start": "2316980",
    "end": "2325080"
  },
  {
    "text": "and exponentiation are just\nlike addition, subtraction, multiplication. If one is a float, then the\nresult will be a float as well.",
    "start": "2325080",
    "end": "2332580"
  },
  {
    "text": " Yeah. ",
    "start": "2332580",
    "end": "2340270"
  },
  {
    "text": "OK, and we talked about\nthe type of output. So I think I briefly\nmentioned this.",
    "start": "2340270",
    "end": "2346110"
  },
  {
    "text": "The operator precedence\nis exponentiation and then multiplication, division,\npercent or remainder",
    "start": "2346110",
    "end": "2352920"
  },
  {
    "text": "at the next level,\nand then addition, subtraction at the bottom. But you can always override\nthese using parentheses.",
    "start": "2352920",
    "end": "2360510"
  },
  {
    "text": "OK, questions so far\nbefore we move on? Yes.",
    "start": "2360510",
    "end": "2365520"
  },
  {
    "text": "AUDIENCE: So why does\ndivision-- why does it always result in float\nif you have 9 by 3 and that's [INAUDIBLE]\nwhy does it [INAUDIBLE]??",
    "start": "2365520",
    "end": "2372330"
  },
  {
    "text": "ANA BELL: Yeah, so the\nquestion is, why does it always result in a float? If it didn't, I think it would\nthe operation itself would have",
    "start": "2372330",
    "end": "2380520"
  },
  {
    "text": "to do extra work to figure out\nwhether it's a whole number or not. So I think it's just easier\nthat it gives us always a float,",
    "start": "2380520",
    "end": "2389400"
  },
  {
    "text": "I guess. Previous versions of\nPython, the / was actually, I think, integer division,\nwhich is super counterintuitive",
    "start": "2389400",
    "end": "2398100"
  },
  {
    "text": "because you would use\nthat in your program. And then you would\nbasically integer divide, and things would go wrong.",
    "start": "2398100",
    "end": "2403319"
  },
  {
    "text": "But again, just a design choice\non behalf of the programmers. Other questions so far?",
    "start": "2403320",
    "end": "2411630"
  },
  {
    "text": "OK, so we have a lot of objects. Objects have different types,\nagain, floats, integers,",
    "start": "2411630",
    "end": "2418890"
  },
  {
    "text": "Booleans. What can we do with them? So far, they're kind of\njust sitting in there,",
    "start": "2418890",
    "end": "2424740"
  },
  {
    "text": "and we can get\nproperties about them. But what we'd like to\ndo is write programs, basically trying to\nautomate some things",
    "start": "2424740",
    "end": "2430590"
  },
  {
    "text": "about these objects,\nmanipulate them to help us achieve a more\ncomplicated and interesting",
    "start": "2430590",
    "end": "2436740"
  },
  {
    "text": "program. So what we can do\nto get to that end",
    "start": "2436740",
    "end": "2442770"
  },
  {
    "text": "is to start assigning names\nto some of these objects.",
    "start": "2442770",
    "end": "2448260"
  },
  {
    "text": "If I create an object for pi in\nmy program to 20 decimal places",
    "start": "2448260",
    "end": "2454860"
  },
  {
    "text": "somehow, and I have that\nnumber in my program, that float in my program-- if I want to use that number\nin many different places",
    "start": "2454860",
    "end": "2462480"
  },
  {
    "text": "in my program, I'd\nhave to copy and paste it a whole bunch of times so\nfar, which is very tedious,",
    "start": "2462480",
    "end": "2470329"
  },
  {
    "text": "lots of errors will happen. I don't want to do that. So instead what I can\ndo is I can give a name",
    "start": "2470330",
    "end": "2476359"
  },
  {
    "text": "to this ridiculously long\nvalue of pi called pi. And then I can just\nuse this name anywhere",
    "start": "2476360",
    "end": "2483470"
  },
  {
    "text": "I want to grab that\nridiculously long value for pi in my program. It's a lot easier to read.",
    "start": "2483470",
    "end": "2489860"
  },
  {
    "text": "It's a lot easier for me\nto write this program. And it leads to a really\nnice and neat program.",
    "start": "2489860",
    "end": "2498780"
  },
  {
    "text": "So what we can do\nis we can start saying that the float 0.001\nwill be referenced by the name",
    "start": "2498780",
    "end": "2505609"
  },
  {
    "text": "\"small\" or the 100.4 will be\nreferenced by the name \"temp.\"",
    "start": "2505610",
    "end": "2512790"
  },
  {
    "text": "So what we want to do is create\nthese things called variables. And a variable is different\nin computer science",
    "start": "2512790",
    "end": "2520220"
  },
  {
    "text": "from a mathematical\nvariable or variables that you've known\nso far in math. So math variables\ncome back to the idea",
    "start": "2520220",
    "end": "2526580"
  },
  {
    "text": "of declarative knowledge,\na declarative statement. You can have something like a\nplus b is equal to b minus 1",
    "start": "2526580",
    "end": "2532470"
  },
  {
    "text": "in math, or x is equal to--\nor x times x is equal to y, and that's perfectly OK.",
    "start": "2532470",
    "end": "2539040"
  },
  {
    "text": "In math, we basically say\nthat variable x represents all the square roots of y.",
    "start": "2539040",
    "end": "2544970"
  },
  {
    "text": "That's not going to fly\nin computer science. In computer science,\nwe don't have--",
    "start": "2544970",
    "end": "2550700"
  },
  {
    "text": "we don't do\ndeclarative knowledge. We do imperative knowledge. And so what we're working\nwith in computer science",
    "start": "2550700",
    "end": "2555770"
  },
  {
    "text": "is a bunch of\nassignment statements. So what we can do\nin computer science",
    "start": "2555770",
    "end": "2562370"
  },
  {
    "text": "is we're going to basically\nbind a value to a variable.",
    "start": "2562370",
    "end": "2567750"
  },
  {
    "text": "So we're going to say\nthis variable name is bound to this value. Every time I want\nto grab this value, I'm going to invoke\nthis variable name.",
    "start": "2567750",
    "end": "2575099"
  },
  {
    "text": "So here are some examples. I've got a is equal to b plus 1. The thing on the right-hand\nside will evaluate to some value",
    "start": "2575100",
    "end": "2583260"
  },
  {
    "text": "as long as I have something\nthat b has a value for.",
    "start": "2583260",
    "end": "2589050"
  },
  {
    "text": "I've got here m is equal to 10. So m is a variable. Its value is 10.",
    "start": "2589050",
    "end": "2594869"
  },
  {
    "text": "I've got F is equal\nto m times 9.98. So again, I have an expression\non the right-hand side,",
    "start": "2594870",
    "end": "2601620"
  },
  {
    "text": "and that's OK. I'm going to use the value of\n10, so F's value will be 99.8.",
    "start": "2601620",
    "end": "2607320"
  },
  {
    "text": "Yeah. AUDIENCE: Can you put\nit so that for F--",
    "start": "2607320",
    "end": "2612570"
  },
  {
    "text": "is it like this one value of m? Or can you have it\nso it's going to be whatever m assigned recently?",
    "start": "2612570",
    "end": "2618365"
  },
  {
    "text": "ANA BELL: Yeah. The question is, can you have\nm whatever it recently is? So in this particular case,\nI just have these two lines.",
    "start": "2618365",
    "end": "2625349"
  },
  {
    "text": "And m will be whatever 10 is. But we'll see in a couple\nlectures that we can write",
    "start": "2625350",
    "end": "2631020"
  },
  {
    "text": "a loop where you change m. And then every time you change\nm, you immediately calculate F.",
    "start": "2631020",
    "end": "2638070"
  },
  {
    "text": "And then it'll calculate F\nbased on the new value of m. But if we just have these two\nlines, that's all there is.",
    "start": "2638070",
    "end": "2645430"
  },
  {
    "text": "It just uses 10. Was there another question? ",
    "start": "2645430",
    "end": "2651819"
  },
  {
    "text": "So in computer science,\nyou have only one variable to the left of this equal sign,\ncalled the assignment operator.",
    "start": "2651820",
    "end": "2658540"
  },
  {
    "text": "And you have a value\nto the right-hand side of the equal sign, the\nassignment operator.",
    "start": "2658540",
    "end": "2664220"
  },
  {
    "text": "So one variable basically\nmaps to or binds to one value.",
    "start": "2664220",
    "end": "2669670"
  },
  {
    "text": "So the equal sign is an\nassignment statement. It's not equality.",
    "start": "2669670",
    "end": "2675460"
  },
  {
    "text": "It's not a solve for\nx type of situation. It's just an assignment. It binds this name\nto this value.",
    "start": "2675460",
    "end": "2682850"
  },
  {
    "text": "So the way that we figure\nout the name with the value is, well, if we have this\nassignment statement here,",
    "start": "2682850",
    "end": "2689770"
  },
  {
    "text": "we first look at\nthe right-hand side. So we always start with\nthe right-hand side. And we evaluate it.",
    "start": "2689770",
    "end": "2695539"
  },
  {
    "text": "Remember, we have an\nexpression on the right. We have to evaluate\nit to one value.",
    "start": "2695540",
    "end": "2700970"
  },
  {
    "text": "So this will be 3.14,\nwhatever it is, 1.159. And then we take that value\nand bind it to the name pi.",
    "start": "2700970",
    "end": "2709810"
  },
  {
    "text": "So anytime I type in p-i, \"pi,\"\nin my program from now on, Python will automatically\ngrab 3.14159 from memory.",
    "start": "2709810",
    "end": "2718450"
  },
  {
    "text": "So it's bound to that value now. OK, there are some rules. Did I have them on\nthe previous one?",
    "start": "2718450",
    "end": "2724910"
  },
  {
    "text": "Yes, there are some\nrules to variable names,",
    "start": "2724910",
    "end": "2732270"
  },
  {
    "text": "but we'll talk\nabout that in a bit. For now, I want you to tell\nme if any of the following are allowed.",
    "start": "2732270",
    "end": "2737720"
  },
  {
    "text": "If I do x is equal to 6,\nis that allowed in Python? AUDIENCE: Yes. ANA BELL: Yes, it is. Good.",
    "start": "2737720",
    "end": "2742820"
  },
  {
    "text": "Because I have one variable\nname bound to one value, 6. What about 6 equals x? It's just backward. AUDIENCE: No.",
    "start": "2742820",
    "end": "2748130"
  },
  {
    "text": "ANA BELL: OK, good. 6 equals x is bad, syntax error.",
    "start": "2748130",
    "end": "2753500"
  },
  {
    "text": "How about x times\ny equals 3 plus 4? AUDIENCE: No. ANA BELL: No, exactly,\nbecause the thing on the left",
    "start": "2753500",
    "end": "2759560"
  },
  {
    "text": "has an operator in it. And operators are special. So it can't have-- you can't\nhave a variable with that *",
    "start": "2759560",
    "end": "2766040"
  },
  {
    "text": "as a name. How about xy equals 3 plus 4? AUDIENCE: Yes. ANA BELL: Allowed, yes, exactly.",
    "start": "2766040",
    "end": "2771790"
  },
  {
    "text": "I was hoping to get you guys\nwith that, but I didn't. Xy equals 3 plus 4 is OK.",
    "start": "2771790",
    "end": "2777730"
  },
  {
    "text": "There was no error. And then I can invoke the\nname of the variable I just created simply by typing it in.",
    "start": "2777730",
    "end": "2783980"
  },
  {
    "text": "So if I type in\nxy, it gives me 7. And then I can do operations\nwith it, xy plus 1 is 8.",
    "start": "2783980",
    "end": "2792250"
  },
  {
    "text": "Yeah. AUDIENCE: Before you\nwere putting the strings with apostrophes. So wouldn't you need that?",
    "start": "2792250",
    "end": "2797420"
  },
  {
    "text": "ANA BELL: So those are strings,\nright, sequences of characters. Here, these are variables. So these are names that I\nam giving as a variable.",
    "start": "2797420",
    "end": "2807279"
  },
  {
    "text": "Yeah, that's a great question. So this is going to be a string. And you notice it changed color.",
    "start": "2807280",
    "end": "2812840"
  },
  {
    "text": "It has some meaning in Python. But xy is a variable\nthat I create.",
    "start": "2812840",
    "end": "2818690"
  },
  {
    "start": "2818690",
    "end": "2823760"
  },
  {
    "text": "OK, so why do we want to\ngive names to variables? Because as I showed you\nwith the pi example,",
    "start": "2823760",
    "end": "2830990"
  },
  {
    "text": "it's a lot easier to\nwrite readable code if you have variable names\nwithin your programs.",
    "start": "2830990",
    "end": "2838470"
  },
  {
    "text": "So when you grab-- when you write programs,\nit's important to choose variable names wisely.",
    "start": "2838470",
    "end": "2845060"
  },
  {
    "text": "You don't want to use\njust single letters. You don't want to\nname it something that doesn't have something\nto do with the program you're",
    "start": "2845060",
    "end": "2851305"
  },
  {
    "text": "writing, because\nyou're going to want to reread these programs\nsometime in the future.",
    "start": "2851305",
    "end": "2856940"
  },
  {
    "text": "Or others might want to\nread your programs sometime in the future. So here's an example\nof a nice program.",
    "start": "2856940",
    "end": "2863240"
  },
  {
    "text": "It's just basically four\nassignment statements that do some calculations.",
    "start": "2863240",
    "end": "2868350"
  },
  {
    "text": "The first line of the\nprogram is not really a line. It's called a comment. You can have as many\nof these as you like.",
    "start": "2868350",
    "end": "2874700"
  },
  {
    "text": "They start with a hash. It's a line that\nstarts with a hash. And it's basically\na text that you",
    "start": "2874700",
    "end": "2880880"
  },
  {
    "text": "write that helps you or\nothers figure out what the code is supposed to do.",
    "start": "2880880",
    "end": "2887020"
  },
  {
    "text": "And usually we comment large\nchunks of code at a time, not line by line.",
    "start": "2887020",
    "end": "2893700"
  },
  {
    "text": "Then we have these four\nassignment statements. So here I'm defining variable\nnamed pi bound to the value",
    "start": "2893700",
    "end": "2902160"
  },
  {
    "text": "here, so not the\ndivision but 3.14159. Variable named radius\nbound to this float 2.2.",
    "start": "2902160",
    "end": "2908819"
  },
  {
    "text": "And then I have a\nvariable named area which is bound to the\nresult of this expression.",
    "start": "2908820",
    "end": "2914580"
  },
  {
    "text": "So when Python sees\nmy pi and my radius, it grabs them from memory,\nreplaces them with the values,",
    "start": "2914580",
    "end": "2922260"
  },
  {
    "text": "evaluates the expression,\ngrabs that one value that we evaluated to\n15-point-something, whatever",
    "start": "2922260",
    "end": "2929280"
  },
  {
    "text": "this is, and binds the\n15-point-something to the name area. Same with circumference.",
    "start": "2929280",
    "end": "2935760"
  },
  {
    "text": " Code style is something\nthat we're actually",
    "start": "2935760",
    "end": "2941369"
  },
  {
    "text": "going to look at in\nyour problem sets. So I just wanted to\nquickly talk about that. Here is a program that\nhas really bad style.",
    "start": "2941370",
    "end": "2949560"
  },
  {
    "text": "Actually, that shouldn't be meh. It should be terrible\nor something like that. But in case you\nhaven't noticed, it's",
    "start": "2949560",
    "end": "2955830"
  },
  {
    "text": "the same program as\non the previous slide. But if I gave you this\nprogram straight off the bat, you probably wouldn't\nknow what it's doing.",
    "start": "2955830",
    "end": "2963030"
  },
  {
    "text": "It's reusing 355\nover 113 twice here. It's using just a and\nc as variable names.",
    "start": "2963030",
    "end": "2970140"
  },
  {
    "text": "Its description is\n\"do calculations.\" So pretty bad. This is a little bit better.",
    "start": "2970140",
    "end": "2976660"
  },
  {
    "text": "I've recognized that 355\nover 113 is being used twice. So I'm saving it as a variable.",
    "start": "2976660",
    "end": "2983050"
  },
  {
    "text": "But my variables are\nstill single characters. And my comments are pretty bad.",
    "start": "2983050",
    "end": "2991530"
  },
  {
    "text": "I'm basically saying\nwhat the code is doing. Please don't do that.",
    "start": "2991530",
    "end": "2996670"
  },
  {
    "text": "We can see that a equals\np times r times r. I see that I'm multiplying\np with r squared.",
    "start": "2996670",
    "end": "3003849"
  },
  {
    "text": "I don't need to read\nthat in English. What I would like to see\nis a comment like this.",
    "start": "3003850",
    "end": "3010590"
  },
  {
    "text": "Here I'm commenting\na chunk of code. And someone who doesn't want\nto read this chunk of code",
    "start": "3010590",
    "end": "3017339"
  },
  {
    "text": "just reads the\ncomment, and I already know that I'm calculating the\narea and circumference using an approximation for pi.",
    "start": "3017340",
    "end": "3023670"
  },
  {
    "text": "That's a pretty nice comment\nthere and good descriptive names and all that.",
    "start": "3023670",
    "end": "3031200"
  },
  {
    "text": "So we can actually--\nonce we create an object, a variable-- sorry, once we\ncreate an object and bind it",
    "start": "3031200",
    "end": "3037369"
  },
  {
    "text": "to a variable, we can\nchange the bindings. So we can take\nthat variable name",
    "start": "3037370",
    "end": "3043370"
  },
  {
    "text": "and bind it to a\ncompletely different value. This might not be\nuseful right now,",
    "start": "3043370",
    "end": "3049880"
  },
  {
    "text": "but it will be useful\nwhen we introduce control flow in our programs.",
    "start": "3049880",
    "end": "3055640"
  },
  {
    "text": "So to rebind a variable\nwhat that means is we're going to take\nthe name, we're",
    "start": "3055640",
    "end": "3061640"
  },
  {
    "text": "going to lose the binding\nto the previous value, and we're going to\nrebind it to a new value. So I'm going to show you how\nthis looks like in memory.",
    "start": "3061640",
    "end": "3068869"
  },
  {
    "text": "I'm going to use this\nsort of cloud picture to represent what\nhappens behind the scenes",
    "start": "3068870",
    "end": "3074750"
  },
  {
    "text": "whenever we write programs. And it's like a little animation\nto help you understand line by line what's going on.",
    "start": "3074750",
    "end": "3080760"
  },
  {
    "text": "So here we have pi equals 3.14. So the green 3.14 is\nmy value in memory.",
    "start": "3080760",
    "end": "3087920"
  },
  {
    "text": "Cloud is memory. That's my value in memory. And it's bound to this name pi. So this is my variable name.",
    "start": "3087920",
    "end": "3095440"
  },
  {
    "text": "The next line, radius\nequals 2.2, same thing. I've got 2.2 as my value\nin memory, my object.",
    "start": "3095440",
    "end": "3101740"
  },
  {
    "text": "And radius is the\nname for that object. Area equals pi times\nradius squared.",
    "start": "3101740",
    "end": "3107190"
  },
  {
    "text": "So what happens\nbehind the scenes is it calculates this value. It doesn't store the expression.",
    "start": "3107190",
    "end": "3112850"
  },
  {
    "text": "It stores the value resulting\nfrom the calculation, and then it saves it--",
    "start": "3112850",
    "end": "3118430"
  },
  {
    "text": "or binds it to the name area. OK, everything OK so far? We've seen this code before.",
    "start": "3118430",
    "end": "3124360"
  },
  {
    "text": "Cool. So now what happens\nwhen we do this, radius equals radius plus 1?",
    "start": "3124360",
    "end": "3129720"
  },
  {
    "text": "In math, that would\nsay 0 equals 1.",
    "start": "3129720",
    "end": "3135609"
  },
  {
    "text": "But we're not in math here. We're in computer science,\nand this is perfectly valid.",
    "start": "3135610",
    "end": "3140620"
  },
  {
    "text": "We're following the rule when\nwe have an assignment that says look at the right-hand\nside first and evaluate it",
    "start": "3140620",
    "end": "3149920"
  },
  {
    "text": "and then bind it to\nthe left-hand side. So if we look at the right-hand\nside first, we see radius.",
    "start": "3149920",
    "end": "3157422"
  },
  {
    "text": "Well, what's the value? 2.2. We see add 1 to it, 3.2.",
    "start": "3157422",
    "end": "3163870"
  },
  {
    "text": "Save that in memory. And then we see the assignment. Now save it with\nthe name radius.",
    "start": "3163870",
    "end": "3172000"
  },
  {
    "text": "OK, so we can only have\none variable assigned to one value at a time.",
    "start": "3172000",
    "end": "3178030"
  },
  {
    "text": "This is not math. This is computer science. So you can only have radius\npoint to one thing at a time.",
    "start": "3178030",
    "end": "3185380"
  },
  {
    "text": "With this line of code,\nradius equals radius plus 1. We've lost the binding to\n2.2, this object in memory,",
    "start": "3185380",
    "end": "3192700"
  },
  {
    "text": "and we've rebound\nit to the value 3.2. And that's perfectly fine.",
    "start": "3192700",
    "end": "3199320"
  },
  {
    "text": "2.2 is now just\nsitting in memory. We can't get back to it unless\nwe say maybe radius equals 2.2.",
    "start": "3199320",
    "end": "3205380"
  },
  {
    "text": "It just sits in\nmemory and then might be collected later\non by-- or reclaimed by garbage collection\nor something like that.",
    "start": "3205380",
    "end": "3211839"
  },
  {
    "text": "But for now, we\ncan't get back to it. Now, what's the value for area\nat the end of these lines?",
    "start": "3211840",
    "end": "3219800"
  },
  {
    "text": "Well, according to\nthis, it's 15.1976. So it's using the old\n2.2 value for radius.",
    "start": "3219800",
    "end": "3227700"
  },
  {
    "text": "And that's OK because\nthe program never told--",
    "start": "3227700",
    "end": "3232890"
  },
  {
    "text": "never had a line that\nsaid recalculate area after we changed the radius.",
    "start": "3232890",
    "end": "3239380"
  },
  {
    "text": "It's just following,\ndumb, line by line. It doesn't know that, hey,\nif I change the radius,",
    "start": "3239380",
    "end": "3245410"
  },
  {
    "text": "the user might want\nthe area changed. It doesn't make\nthose connections. It's just following\ninstructions.",
    "start": "3245410",
    "end": "3252190"
  },
  {
    "text": "And that's OK. If we want it to\nchange the area, we would have to copy\nthis line and paste it",
    "start": "3252190",
    "end": "3258400"
  },
  {
    "text": "after we've changed the radius. And then the area\nwould change as well.",
    "start": "3258400",
    "end": "3264215"
  },
  {
    "text": "Does that make sense? That's kind of an important\npart of this lecture. OK, cool.",
    "start": "3264215",
    "end": "3270410"
  },
  {
    "text": "So big idea here is our\nlines are evaluated one after the other. We're not skipping. We're not repeating things.",
    "start": "3270410",
    "end": "3276500"
  },
  {
    "text": "That's something we're\ngoing to learn about later. But for now, line by line.",
    "start": "3276500",
    "end": "3281820"
  },
  {
    "text": "So here's a little you try it. These three lines are\nexecuted in order. What are the values\nfor meters and feet",
    "start": "3281820",
    "end": "3289490"
  },
  {
    "text": "variables at each line? So how about at the first line,\nwhat's the value for meters",
    "start": "3289490",
    "end": "3294770"
  },
  {
    "text": "after we execute the first line? 100. What about feet? ",
    "start": "3294770",
    "end": "3301620"
  },
  {
    "text": "So at the end of the first line,\nthere is no value for feet yet. How about after the second line?",
    "start": "3301620",
    "end": "3307730"
  },
  {
    "text": "328.08. Right? How about the value for meters? AUDIENCE: 100. ANA BELL: 100 still.",
    "start": "3307730",
    "end": "3313970"
  },
  {
    "text": "And what about after\nthe third line? I'm changing meters to 200.",
    "start": "3313970",
    "end": "3320359"
  },
  {
    "text": "Exactly, yeah. Meters is 200, but\nfeet is still 328.08.",
    "start": "3320360",
    "end": "3326240"
  },
  {
    "text": "And this is something I\nwant to show you guys today. And we're going\nto use this Python",
    "start": "3326240",
    "end": "3331510"
  },
  {
    "text": "Tutor a lot more in the future. Python Tutor is a nice\nwebsite that allows",
    "start": "3331510",
    "end": "3337450"
  },
  {
    "text": "you to step in your code-- step through your\ncode step by step. So at each line\nthat you execute,",
    "start": "3337450",
    "end": "3344830"
  },
  {
    "text": "you get to see the values of\nall the variables in the code. It's a very useful\ndebugging tool. I hope you'll try it out\ntoday and on Monday, maybe,",
    "start": "3344830",
    "end": "3352990"
  },
  {
    "text": "for the finger exercises\nif you're having trouble. And you can use it for\nquizzes to help you debug.",
    "start": "3352990",
    "end": "3359350"
  },
  {
    "text": "But I can just show you. It's pretty simple here because\nit's just a step by step. So we step through.",
    "start": "3359350",
    "end": "3365470"
  },
  {
    "text": "So the red says the line\nI'm going to execute. Green is the line\nI just executed. So I just executed meters 100.",
    "start": "3365470",
    "end": "3372230"
  },
  {
    "text": "So here I have my meters\nvariable with the value 100. Step through next.",
    "start": "3372230",
    "end": "3377630"
  },
  {
    "text": "So I just executed\nfeet equals this. So I now have a variable named\nfeet with a value 328.08.",
    "start": "3377630",
    "end": "3384770"
  },
  {
    "text": "Meters still 100. And then meters 200,\nfeet remained 328.08.",
    "start": "3384770",
    "end": "3393760"
  },
  {
    "text": "So obviously, this is\na pretty simple program to run the Python\nTutor on, but you can imagine using it in\nmore complex settings.",
    "start": "3393760",
    "end": "3404500"
  },
  {
    "text": "How about one more? And this is my last example. I want you to try to\nwrite a program that",
    "start": "3404500",
    "end": "3409990"
  },
  {
    "text": "swaps the values of x and y. So originally--\nand I'll draw this, the memory diagram real quick.",
    "start": "3409990",
    "end": "3415610"
  },
  {
    "text": "So we have-- this is our memory. We have x is bound to 1.",
    "start": "3415610",
    "end": "3420970"
  },
  {
    "text": "Y is bound to 2. And what I want to do\nwithout saying x equals 2,",
    "start": "3420970",
    "end": "3428110"
  },
  {
    "text": "y equals 1, what I want\nto do is swap the values. I want x to be associated with\n2 and y to be associated with 1",
    "start": "3428110",
    "end": "3434980"
  },
  {
    "text": "but only using\ncommands like this. And so the code here is buggy.",
    "start": "3434980",
    "end": "3442780"
  },
  {
    "text": "That means it's wrong. It has an error in it. Well, let's step\nthrough-- let's step",
    "start": "3442780",
    "end": "3448270"
  },
  {
    "text": "through a little bit at a time. Y equals x. What do I do when\ny equals x here?",
    "start": "3448270",
    "end": "3454630"
  },
  {
    "text": " Yeah, exactly, y is going\nto move from 2 to 1.",
    "start": "3454630",
    "end": "3463110"
  },
  {
    "text": "Now, what happens\nwhen I do x equals y?  Yes, x stays the same.",
    "start": "3463110",
    "end": "3469820"
  },
  {
    "text": "My first line, y equals\nx, lost the binding to 2. And now it's all messed up\nbecause I can't get it back.",
    "start": "3469820",
    "end": "3478470"
  },
  {
    "text": "So instead-- so if you\ndidn't understand this, you can click Python Tutor\nand just step through step",
    "start": "3478470",
    "end": "3483710"
  },
  {
    "text": "by step on your own. But how can we fix this? AUDIENCE: Create\na third variable.",
    "start": "3483710",
    "end": "3489755"
  },
  {
    "text": "ANA BELL: Create\na third variable? Yeah, that's a great idea. Yeah, we can create\na third variable. So x is 1, y is 1--",
    "start": "3489755",
    "end": "3496960"
  },
  {
    "text": "y is 2. So we can create\na third variable. What do you want to make\nthe variable equal to?",
    "start": "3496960",
    "end": "3503230"
  },
  {
    "text": "X or y? Yeah, either one. I made it y, so let's do y.",
    "start": "3503230",
    "end": "3510190"
  },
  {
    "text": "So here I've got a temporary\nvariable called \"temp,\" and I made it equal to 2.",
    "start": "3510190",
    "end": "3516970"
  },
  {
    "text": "And now what can I do?  Which one can I reassign now?",
    "start": "3516970",
    "end": "3523410"
  },
  {
    "text": "X equals y, or y equals x? Exactly, y equals--\nif I do x equals y,",
    "start": "3523410",
    "end": "3529880"
  },
  {
    "text": "I lose my binding to 1,\nand it messed up again. So y equals x is OK to do.",
    "start": "3529880",
    "end": "3535609"
  },
  {
    "text": "So I'm going to lose the\nbinding from y from 2 and bind it up to 1.",
    "start": "3535610",
    "end": "3541120"
  },
  {
    "text": "And now what do I do? Yeah, now I can safely\nreassign x to temp.",
    "start": "3541120",
    "end": "3550960"
  },
  {
    "text": "So I can say x is equal to\ntemp because temp points to 2. And I want to make x\npoint to 2 as well.",
    "start": "3550960",
    "end": "3559470"
  },
  {
    "text": "So in terms of code,\nthat's sort of the diagram. But we can write the code. So you don't-- let's see.",
    "start": "3559470",
    "end": "3567680"
  },
  {
    "text": "We don't write it in\nhere, but on your own, you can write it in\nhere if you'd like.",
    "start": "3567680",
    "end": "3572828"
  },
  {
    "text": "Or we can do it together. So x is equal-- oops. X equals 1, y equals 2.",
    "start": "3572828",
    "end": "3579050"
  },
  {
    "text": "And then we had temp. We wanted to assign\nit to whatever y was.",
    "start": "3579050",
    "end": "3585020"
  },
  {
    "text": "So we say temp is equal to y. And if you want to check\nthe values of the variables,",
    "start": "3585020",
    "end": "3590640"
  },
  {
    "text": "you can just invoke the names. So x is 1, y is 2, and temp\nshould be whatever y is, 2.",
    "start": "3590640",
    "end": "3599380"
  },
  {
    "text": "OK, good so far. So now I'm at the step\nhere, I think, right?",
    "start": "3599380",
    "end": "3607210"
  },
  {
    "text": "I've just created this. And then the last\nthing I need to do is lose the binding from\nx to whatever temp is.",
    "start": "3607210",
    "end": "3615730"
  },
  {
    "text": "So I want to do\nthis operation here, which means I want to assign\nx to be equal to temp.",
    "start": "3615730",
    "end": "3623540"
  },
  {
    "text": "So now x is 2, y is 1. ",
    "start": "3623540",
    "end": "3629720"
  },
  {
    "text": "What did I do? Yeah, so this happens sometimes.",
    "start": "3629720",
    "end": "3636120"
  },
  {
    "text": "We can just start all over. So y equals temp.",
    "start": "3636120",
    "end": "3641670"
  },
  {
    "text": "Sorry. Temp equals y. ",
    "start": "3641670",
    "end": "3649609"
  },
  {
    "text": "Y equals x. Y is one. X is 1.",
    "start": "3649610",
    "end": "3654670"
  },
  {
    "text": "And then x equals temp. Y is one, x is 2.",
    "start": "3654670",
    "end": "3660940"
  },
  {
    "text": "So it's OK if things go wrong. They will go wrong. We can just start all over\nin this particular case",
    "start": "3660940",
    "end": "3668080"
  },
  {
    "text": "by redefining our\nvariables and just trying it out all over again. So that's kind of\nwhat the shell is for.",
    "start": "3668080",
    "end": "3673730"
  },
  {
    "text": "That's what I use it for. That's what we're going to\nuse it for in the future, just to do quick things\nlike this and also things",
    "start": "3673730",
    "end": "3680950"
  },
  {
    "text": "like checking the types\nand other commands we've done earlier.",
    "start": "3680950",
    "end": "3687700"
  },
  {
    "text": "OK, so any questions\nbefore we do the summary? Was this all right pace\nor was it too fast?",
    "start": "3687700",
    "end": "3693640"
  },
  {
    "text": "Or it was OK? OK, good. Thumbs up is good. So let's do a quick summary.",
    "start": "3693640",
    "end": "3700280"
  },
  {
    "text": "We saw that we can\ncreate programs by manipulating objects. We created objects in Python.",
    "start": "3700280",
    "end": "3707500"
  },
  {
    "text": "And we saw that objects\nhave a particular type. The type that the object\nhas tells Python the things",
    "start": "3707500",
    "end": "3713470"
  },
  {
    "text": "that you can do\nwith that object. We can combine objects\nin expressions.",
    "start": "3713470",
    "end": "3720770"
  },
  {
    "text": "And these expressions\nevaluate or boil down to one particular value.",
    "start": "3720770",
    "end": "3726310"
  },
  {
    "text": "Objects or values can\nbe stored in variables. And these variables allow\nus to access these values",
    "start": "3726310",
    "end": "3733510"
  },
  {
    "text": "with nicer names later\non in our program. And then we're able to write\nneater, more legible programs",
    "start": "3733510",
    "end": "3740470"
  },
  {
    "text": "as well. So the equal sign-- I showed you a couple of\ndifferences between math and computer science.",
    "start": "3740470",
    "end": "3746290"
  },
  {
    "text": "The equal sign was one\nnotable difference. The equal sign in\nmath is declarative,",
    "start": "3746290",
    "end": "3751910"
  },
  {
    "text": "and the equal sign in computer\nscience is an assignment. You're basically saying this\nis associated with this.",
    "start": "3751910",
    "end": "3758599"
  },
  {
    "text": "And we're not doing any sort of\nequality in computer science.",
    "start": "3758600",
    "end": "3764230"
  },
  {
    "text": "And yes, computers do\nwhat you tell them to do. That's kind of the\nbig thing here.",
    "start": "3764230",
    "end": "3771339"
  },
  {
    "text": "Line by line, it executes\nstarting from the top, goes line by line. So far, we haven't\nseen any places where",
    "start": "3771340",
    "end": "3778960"
  },
  {
    "text": "the computer makes a decision. But next lecture,\nwe will see how we can insert decision\npoints in our programs",
    "start": "3778960",
    "end": "3786130"
  },
  {
    "text": "for the computer to either\nexecute one set of code or another set of code.",
    "start": "3786130",
    "end": "3792380"
  },
  {
    "text": "All right, so that's the\nend of today's lecture. Thank you all for joining. I will see you on Monday.",
    "start": "3792380",
    "end": "3798330"
  },
  {
    "start": "3798330",
    "end": "3810000"
  }
]