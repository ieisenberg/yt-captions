[
  {
    "text": "The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6360"
  },
  {
    "text": "continue to offer high-quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6360",
    "end": "13350"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13350",
    "end": "25507"
  },
  {
    "text": "HARI BALAKRISHNAN:\nSo, good afternoon. Continuing our story\nabout networks, what we've seen\nso far is a story",
    "start": "25507",
    "end": "32669"
  },
  {
    "text": "where you have a\nnetwork that you're trying to connect computers\nto communicate together. And we use a network\nwith switches",
    "start": "32670",
    "end": "42600"
  },
  {
    "text": "arranged in some topology\nto allow us to find",
    "start": "42600",
    "end": "49769"
  },
  {
    "text": "paths between computers. And so we looked at\nthe routing problem. We looked at two different\nrouting protocols to solve that.",
    "start": "49770",
    "end": "57180"
  },
  {
    "text": "Earlier, we talked\nabout this idea of a packet-switched\nnetwork and there are queues in packet-switched networks. And when traffic comes in too\nfast, and the queues overflow,",
    "start": "57180",
    "end": "65670"
  },
  {
    "text": "packets may get dropped. We also looked before at links\nwhich have errors on them. And so if you have\nerrors on links,",
    "start": "65670",
    "end": "72230"
  },
  {
    "text": "then your coding scheme\nisn't able to correct for those errors,\npackets may get lost.",
    "start": "72230",
    "end": "77678"
  },
  {
    "text": "And when we looked at\nshared media networks with MAC protocols,\ndepending on the MAC protocol you use, you may\ncollisions, which means",
    "start": "77678",
    "end": "83820"
  },
  {
    "text": "that packets may get lost. So what you have is a\npacket-switched network that",
    "start": "83820",
    "end": "89850"
  },
  {
    "text": "has the property of something\ncalled a best-effort network. ",
    "start": "89850",
    "end": "97470"
  },
  {
    "text": "And what \"best effort\"\nmeans is that the network has a few properties that\nyou have to cope with.",
    "start": "97470",
    "end": "103260"
  },
  {
    "text": "The first property of\na best-effort network is that packets may get lost.",
    "start": "103260",
    "end": "108270"
  },
  {
    "start": "108270",
    "end": "114600"
  },
  {
    "text": "The second problem in a\nbest-effort issue that arises in a best-effort network\nis that packets have delays,",
    "start": "114600",
    "end": "121848"
  },
  {
    "text": "but the delays are variable. ",
    "start": "121848",
    "end": "127280"
  },
  {
    "text": "And particular queuing delays\nthat happen in switches are variable delays. ",
    "start": "127280",
    "end": "134813"
  },
  {
    "text": "The good property of a\npacket-switched network is that each packet is treated\nindependently by the network.",
    "start": "134813",
    "end": "141269"
  },
  {
    "text": "So it could be that you\nhave a stream of packets you want to send, say, belonging\nto a video stream or a file.",
    "start": "141270",
    "end": "147740"
  },
  {
    "text": "And the sender sends them\nin some sequential order, but these packets may\ntake different paths",
    "start": "147740",
    "end": "152930"
  },
  {
    "text": "through the network. And in fact, there may be\nswitches in the network, for whatever reason, that may\nnot treat packets in first",
    "start": "152930",
    "end": "159769"
  },
  {
    "text": "in, first out order. They may reorder packets. But more generally, packets\nmay take different paths",
    "start": "159770",
    "end": "164810"
  },
  {
    "text": "through the network because the\nrouting protocol might decide to change the paths on you, and\nso packets make get reordered.",
    "start": "164810",
    "end": "171355"
  },
  {
    "start": "171355",
    "end": "179120"
  },
  {
    "text": "And the fourth issue in\na best-effort network is that, in fact, packets\nmay get duplicated.",
    "start": "179120",
    "end": "185990"
  },
  {
    "text": "So you may have the same\npacket show up multiple times even though it was sent only\nonce for a bunch of reasons.",
    "start": "185990",
    "end": "191788"
  },
  {
    "text": "One of them is that\nthere could be problems in the implementation of\nthe switches or the nodes that cause packets\nto get duplicated.",
    "start": "191788",
    "end": "198800"
  },
  {
    "text": "But it could also\nbe that you may have a link with a\nhigh packet loss rate,",
    "start": "198800",
    "end": "203840"
  },
  {
    "text": "or this may be a\nshared medium where you have a MAC protocol\nthat has collisions. So you may have a\nretransmission protocol--",
    "start": "203840",
    "end": "210620"
  },
  {
    "text": "let me try to resend the packet\na few times at the lowest layer over a shared medium or a link.",
    "start": "210620",
    "end": "218030"
  },
  {
    "text": "And sometimes, multiple\nversions of the multiple copies of the same packet\nmay get through. And we'll actually understand\nwhy that happens more today.",
    "start": "218030",
    "end": "225140"
  },
  {
    "text": "So packets may get duplicated. So in a way, a packet-switched\nnetwork like the internet",
    "start": "225140",
    "end": "232340"
  },
  {
    "text": "is great because it's\nvery easy to build. And the reason it's easy\nto build in some sense is because about the\nonly property that you're",
    "start": "232340",
    "end": "239239"
  },
  {
    "text": "providing from the\ndesign of the network is to tell the endpoints, oh, I\nmight get your package through.",
    "start": "239240",
    "end": "245360"
  },
  {
    "text": "There's no guarantees\non anything. As long as there's some\nnon-zero probability of getting a packet through\nfrom one endpoint to the other,",
    "start": "245360",
    "end": "252380"
  },
  {
    "text": "that's pretty much all\nit takes to declare that you have a conforming\nbest-effort network. So it's easy to build.",
    "start": "252380",
    "end": "257930"
  },
  {
    "text": "But of course, it means that you\nhave all these issues that you want to deal with\nif you actually want to run applications.",
    "start": "257930",
    "end": "263397"
  },
  {
    "text": "So as an example of\nan application is, let's say you are\ntrying to download a web page, or a set of web\npictures and text on a page.",
    "start": "263397",
    "end": "273650"
  },
  {
    "text": "What you would like\nis an abstraction that you can implement some sort\nof a scheme you can implement",
    "start": "273650",
    "end": "280550"
  },
  {
    "text": "in the network or in between\nthe endpoints that makes it so that an application sends\na bunch of bytes or packets",
    "start": "280550",
    "end": "288020"
  },
  {
    "text": "or sends a message. And at the receiving side,\nyou get those bytes reliably. ",
    "start": "288020",
    "end": "294922"
  },
  {
    "text": "So that's what we're\ngoing to understand today. We're going to look at\ntoday and next week, we're going to look at\nhow to implement",
    "start": "294922",
    "end": "300259"
  },
  {
    "text": "a protocol that provides\nreliable data transport.",
    "start": "300260",
    "end": "305810"
  },
  {
    "start": "305810",
    "end": "311270"
  },
  {
    "text": "And the ideas we're\ngoing to look at are probably the ideas\nthat are in the world's most popular computer program.",
    "start": "311270",
    "end": "318390"
  },
  {
    "text": "It's the most popular\nin that it runs in the most number of places. And it's a protocol\ncalled TCP, which",
    "start": "318390",
    "end": "324889"
  },
  {
    "text": "stands for the Transmission\nControl Protocol. Now, we're not going through\nall the gory details of TCP.",
    "start": "324890",
    "end": "332420"
  },
  {
    "text": "We're going to look\nat a simplified version of this protocol. ",
    "start": "332420",
    "end": "338789"
  },
  {
    "text": "So maybe it's TCP-lite.  But it'll cover the\nmain idea of how",
    "start": "338790",
    "end": "346043"
  },
  {
    "text": "you can achieve reliability. And this particular program runs\non pretty much every computer",
    "start": "346043",
    "end": "354660"
  },
  {
    "text": "and every phone and\nevery little device that's on the internet today. So it's really, really popular.",
    "start": "354660",
    "end": "359729"
  },
  {
    "text": "In fact, we're going to start\nwith a simpler protocol that is a reliable data\ntransport protocol that",
    "start": "359730",
    "end": "366410"
  },
  {
    "text": "isn't used between endpoints. TCP is used between endpoints. Now we're going to look\nat a version of a protocol",
    "start": "366410",
    "end": "372440"
  },
  {
    "text": "that's a simple\nversion that actually runs in every 802.11 device-- your laptop, phone,\nand access points.",
    "start": "372440",
    "end": "378729"
  },
  {
    "text": "So we'll study that\nprotocol too first. In the context of end to\nend, between endpoints,",
    "start": "378730",
    "end": "384920"
  },
  {
    "text": "reliable data\ntransport, the problem is the following-- you\nhave some network here. ",
    "start": "384920",
    "end": "391040"
  },
  {
    "text": "It's a best-effort network\nwith those properties. And what you want is you have\nan application at one end.",
    "start": "391040",
    "end": "398169"
  },
  {
    "text": "And you have an\napplication at another end running on some endpoints.",
    "start": "398170",
    "end": "403217"
  },
  {
    "text": " What this system\nprovides that we're",
    "start": "403217",
    "end": "408870"
  },
  {
    "text": "doing this study provides\nis an abstraction where you run software here--",
    "start": "408870",
    "end": "414419"
  },
  {
    "text": "you run software at this\nend, and all of the stuff sits on your end node.",
    "start": "414420",
    "end": "419748"
  },
  {
    "text": "This is your endpoint.  And the abstraction provides\nsome nice properties.",
    "start": "419748",
    "end": "430389"
  },
  {
    "text": "The application writes\nsome data in here at the sender sending in. So let's call this the sender.",
    "start": "430390",
    "end": "436470"
  },
  {
    "text": "And the other\nguy's the receiver. The application writes\nstuff inside here. The network is a\nbest-effort network.",
    "start": "436470",
    "end": "442389"
  },
  {
    "text": "And there's some protocol\nbetween these two pieces of software that make\nsure that no matter what",
    "start": "442390",
    "end": "450490"
  },
  {
    "text": "the network does, what goes\nup here into the application",
    "start": "450490",
    "end": "455560"
  },
  {
    "text": "is exactly the data\nthat was written from this application in exactly\nthe same order in which it",
    "start": "455560",
    "end": "462220"
  },
  {
    "text": "was written. So it provides reliable\nand in-order delivery of data, so reliable\nand in order.",
    "start": "462220",
    "end": "474720"
  },
  {
    "text": "So every piece of\ndata that's written shows up in exactly the\nsame order exactly once at the receiver.",
    "start": "474720",
    "end": "480010"
  },
  {
    "text": "And these two ends\nare called transport. ",
    "start": "480010",
    "end": "486340"
  },
  {
    "text": "These two ends constitute\nthe transport layer. ",
    "start": "486340",
    "end": "492160"
  },
  {
    "text": "And they [INAUDIBLE]\nat the end points, OK? So the application writes in\nhere, the transport protocol",
    "start": "492160",
    "end": "498210"
  },
  {
    "text": "delivers up to the application\nstuff that's reliable and in order.",
    "start": "498210",
    "end": "503599"
  },
  {
    "text": "And in particular, it\nprovides the semantics that you can think of as\n\"exactly once\" semantics.",
    "start": "503600",
    "end": "509500"
  },
  {
    "text": "In other words,\nanything that's sent is delivered exactly\nonce to the receiver, and it's delivered in order.",
    "start": "509500",
    "end": "516200"
  },
  {
    "text": "Now, that's the abstraction\nthat TCP as well provides. And that's the abstraction\nof our 602 protocol.",
    "start": "516200",
    "end": "522580"
  },
  {
    "text": "It's reliable, in-order,\nexactly-once delivery. Now, there are other\nimplementations you can have.",
    "start": "522580",
    "end": "528070"
  },
  {
    "text": "There are protocols you could\nhave that provide reliability but not in order. So I'll give you all\nthe data that you send,",
    "start": "528070",
    "end": "533140"
  },
  {
    "text": "but it may show up\nin different order, and it's your problem to fix it. Or you might provide a protocol\nthat provides in order,",
    "start": "533140",
    "end": "538810"
  },
  {
    "text": "but not reliable. So if I'm doing real-time\nvideo conferencing,",
    "start": "538810",
    "end": "545940"
  },
  {
    "text": "say, Skype, Skype\nwould probably want to provide a protocol that's\nin order but not reliable,",
    "start": "545940",
    "end": "551769"
  },
  {
    "text": "because if I speak, you'd\nlike to actually get those things into the\nSkype application in order.",
    "start": "551770",
    "end": "557480"
  },
  {
    "text": "But it's not really\nrequired that it be reliable because if a message\nshows up, say, more than 100",
    "start": "557480",
    "end": "564370"
  },
  {
    "text": "or 200 milliseconds\nafter I spoke it, it's going to distort\nthe conversation. It's not going to be\nintelligible to you.",
    "start": "564370",
    "end": "570353"
  },
  {
    "text": "And the human ear\nis wonderful at-- the human brain is wonderful\nat dealing with some clippiness in the voice.",
    "start": "570353",
    "end": "575529"
  },
  {
    "text": "You know, occasional\npackets get lost. It's not the end of the world. So there are lots of\ninteresting applications. But in order is useful,\nbut not perfectly reliable.",
    "start": "575530",
    "end": "583360"
  },
  {
    "text": "Applications where reliable\nis useful, but not perfectly in order. BitTorrent would be\nan example of that.",
    "start": "583360",
    "end": "588430"
  },
  {
    "text": "An application where eventually\nyou want all of those movies that you're trying to get. But who cares what\norder they come in? You're not going to\nstart watching it",
    "start": "588430",
    "end": "594802"
  },
  {
    "text": "until the whole\nfile is assembled. And so the protocol that\nBitTorrent uses in effect-- it's a complicated protocol.",
    "start": "594802",
    "end": "600589"
  },
  {
    "text": "It's not point to point. But in effect, it\nprovides reliability without worrying about ordering. So there's lots of combinations.",
    "start": "600590",
    "end": "607010"
  },
  {
    "text": "The combination we\ncare about is reliable, in order, essentially giving\nyou the illusion that you have a circuit between the\ntwo endpoints, a wire",
    "start": "607010",
    "end": "613930"
  },
  {
    "text": "between the two endpoints, OK? So is the abstraction clear? Everyone understands what\nwe're trying to solve?",
    "start": "613930",
    "end": "620663"
  },
  {
    "text": "And in between this,\njust think, there's an adversary or some\nnetwork in the middle that you sent\npackets, and the thing",
    "start": "620663",
    "end": "626140"
  },
  {
    "text": "is just throwing packets away. And every once in a while,\njust for the heck of it, it decides to delay a\npacket for a long time.",
    "start": "626140",
    "end": "633040"
  },
  {
    "text": "And every once in\na while, it decides to send packets along\ndifferent paths.",
    "start": "633040",
    "end": "638170"
  },
  {
    "text": "And your job is to\ndeal with all of that and design the sending side\nand the receiving sides so that stuff still\nshows up reliably",
    "start": "638170",
    "end": "644740"
  },
  {
    "text": "and in the same order\nin which it was sent. So we're going to try\nto solve this problem. We're going to solve it first\nby coming up with a protocol.",
    "start": "644740",
    "end": "652160"
  },
  {
    "text": "It has a nice name to\nit called stop and wait. It's a very simple idea. And this will be a protocol\nthat works, but it's slow.",
    "start": "652160",
    "end": "660870"
  },
  {
    "text": "But the good news is it works. It's correct. It gives the semantics we want. And then we'll try to\nimprove its performance.",
    "start": "660870",
    "end": "667480"
  },
  {
    "text": "It's a very simple idea. I'm sure you have-- just think\nabout this for three minutes. You'll come up with something\nthat looks like this.",
    "start": "667480",
    "end": "673100"
  },
  {
    "text": "You just take the message you\nwant to send, whatever file, stream, or video,\nwhatever it is, and break it up into packets.",
    "start": "673100",
    "end": "679240"
  },
  {
    "text": "So far, there's\nnothing new here. The main first idea is we're\ngoing to number every packet with a sequence number.",
    "start": "679240",
    "end": "685580"
  },
  {
    "text": "So that's what's shown here as\n\"Data 1,\" \"Data 2,\" \"Data 3,\" and so forth. So we're going to use a\nsequence number on every packet.",
    "start": "685580",
    "end": "691963"
  },
  {
    "text": " Now, again, there are many ways\nto implement sequence numbers.",
    "start": "691963",
    "end": "697510"
  },
  {
    "text": "The way that's the simplest\nand most conceptually clean is every packet has a\nsequence number that",
    "start": "697510",
    "end": "702950"
  },
  {
    "text": "increments by 1 for every\nsubsequent packet that's sent. And you might initially\nstart the sequence numbering",
    "start": "702950",
    "end": "712240"
  },
  {
    "text": "at 0 or 1 or whatever. The sender and the receiver\nhave to agree on that. Now, in reality, TCP\nin the real world",
    "start": "712240",
    "end": "717820"
  },
  {
    "text": "is a little more complicated. TCP provides sequence numbering\nby numbering the bytes",
    "start": "717820",
    "end": "723622"
  },
  {
    "text": "with the byte offset\nin the stream. So if you send a packet\nwhich is 25 bytes, and the next packet\nis 200 bytes,",
    "start": "723622",
    "end": "729847"
  },
  {
    "text": "the first packet is\ngoing to have a sequence number of, let's say, 0. The second packet's going to\nhave a sequence number of 26",
    "start": "729847",
    "end": "735940"
  },
  {
    "text": "because it numbers the\nstarting of the byte offset. But these are all details\nthat to first order,",
    "start": "735940",
    "end": "741330"
  },
  {
    "text": "we don't have to\nreally worry about. The important point is\nthere is a sequence number. And a sequence number\nis a unique identifier",
    "start": "741330",
    "end": "747129"
  },
  {
    "text": "for the packet. In other words, if I later send\na packet with the same sequence number, I have to guarantee that\nthe material inside the packet",
    "start": "747130",
    "end": "754870"
  },
  {
    "text": "is the same as it was before. So the assumption is that\nthis is a unique identifier for the contents of the packet.",
    "start": "754870",
    "end": "761839"
  },
  {
    "text": "So it's a unique identifier. We want to use it for\nsome other set of bytes. We'll always use it again\nfor the same set of bytes",
    "start": "761840",
    "end": "769060"
  },
  {
    "text": "if we ever retransmit a packet\nwith the same sequence number. When the receiver gets the\npacket with a certain sequence",
    "start": "769060",
    "end": "775780"
  },
  {
    "text": "number, it does what\nthe post office does if you send registered post-- you turn around, and you\nsend an acknowledgment.",
    "start": "775780",
    "end": "781720"
  },
  {
    "text": "And to allow the sender\nto know which packet's being acknowledged, you\nstick in the sequence number",
    "start": "781720",
    "end": "787793"
  },
  {
    "text": "of the packet that's\nbeing acknowledged. So you send sequence 1. Data 1, you get ACK 1. Data 2, you get ACK 2, and\neverything is wonderful.",
    "start": "787793",
    "end": "795880"
  },
  {
    "text": "It's easy, easy protocol. So what happens when a packet's\nlost, this data is lost?",
    "start": "795880",
    "end": "802100"
  },
  {
    "text": "What's going to\nhappen is the sender is not going to get\nan acknowledgment. And after some period of\ntime called the timeout,",
    "start": "802100",
    "end": "809600"
  },
  {
    "text": "the sender decides that it\nwants to retry that packet. And it tries to\nresend the packet. And if it works, it\ngets an acknowledgment.",
    "start": "809600",
    "end": "815935"
  },
  {
    "text": "When it gets that\nacknowledgment, that's when it goes and\nsends the next packet. So the property of\nstop-and-wait protocol",
    "start": "815935",
    "end": "821930"
  },
  {
    "text": "is that you send a\npacket only after you get an acknowledgment. You sent packet k plus\n1 only after you get",
    "start": "821930",
    "end": "828470"
  },
  {
    "text": "an acknowledgment for packet k. If you don't get an\nacknowledgment for packet k, you wait for a period of\ntime called a timeout.",
    "start": "828470",
    "end": "835820"
  },
  {
    "text": "And after that\ntimeout elapses, you retransmit the packet that\nyou considered was lost,",
    "start": "835820",
    "end": "843230"
  },
  {
    "text": "that you thought was lost. OK, simple. Now, is this protocol reliable?",
    "start": "843230",
    "end": "850475"
  },
  {
    "text": "And when I ask\nthat question, you have to assume that the network\nmay drop and reorder and do whatever it does to packets.",
    "start": "850475",
    "end": "856380"
  },
  {
    "text": "But there's always a\nnon-zero probability that a packet or data\npacket or acknowledgment packet sent on the network\nhas a non-zero probability",
    "start": "856380",
    "end": "864285"
  },
  {
    "text": "of reaching the other side. Because if the probability\nof packet loss is 1, now no one can help us.",
    "start": "864285",
    "end": "869670"
  },
  {
    "text": "So is this protocol reliable?  OK.",
    "start": "869670",
    "end": "874720"
  },
  {
    "text": "Is this protocol in order? It is in order in the way of-- I'm not actually describing\nwhat the receiver does.",
    "start": "874720",
    "end": "880630"
  },
  {
    "text": "But I should tell you that\nthe receiver's semantics here are when the receiver\ngets the packet,",
    "start": "880630",
    "end": "886180"
  },
  {
    "text": "it delivers it to\nthe application. Now, if you turn out that this\nprotocol is not necessarily",
    "start": "886180",
    "end": "893930"
  },
  {
    "text": "in order the way I described\nit-- and I'll come back to why. But so far, it looks like\nthe protocol is in order.",
    "start": "893930",
    "end": "899207"
  },
  {
    "text": "But remember what I\nsaid about the receiver? When the receiver\ngets a data packet, it delivers it up\nto the application.",
    "start": "899207",
    "end": "908060"
  },
  {
    "text": "So is the protocol\npotentially not in order? It's not actually in order. We'll get back to why.",
    "start": "908060",
    "end": "913266"
  },
  {
    "text": "You have a question? AUDIENCE: Yeah, I\nwas just wondering if the receiver\ngets a data packet and then tries to send\nan acknowledgement back,",
    "start": "913267",
    "end": "920378"
  },
  {
    "text": "if the acknowledgement\ngets wrong, I guess,",
    "start": "920378",
    "end": "925414"
  },
  {
    "text": "the sender will resend data. Does the receiver then\ncompare to figure out? HARI BALAKRISHNAN: Right,\nso I haven't specified that.",
    "start": "925414",
    "end": "932330"
  },
  {
    "text": "And you are one step ahead of-- you're at the next picture here. What happens in this case?",
    "start": "932330",
    "end": "938839"
  },
  {
    "text": "You get a duplicate packet. And in fact, that's\nprecisely for this reason that this protocol\nis not actually--",
    "start": "938840",
    "end": "944000"
  },
  {
    "text": "it's kind of in\norder, but in order means that you deliver packets\nin the same order in which they were sent. And in the way I've\ndescribed the description,",
    "start": "944000",
    "end": "950657"
  },
  {
    "text": "given the description\nof this protocol, this protocol does not provide\nexactly one semantics, right?",
    "start": "950657",
    "end": "956000"
  },
  {
    "text": "It provides at\nleast one semantics. In other words, every package\nis delivered at least once to the application.",
    "start": "956000",
    "end": "961023"
  },
  {
    "text": "And what you would like us to\ndeliver every packet exactly once to the\napplication in order. So what would you have to do\nat the receiver in the software",
    "start": "961023",
    "end": "968240"
  },
  {
    "text": "that you write and the receiver\ntransport to take the same idea and make it be a reliable,\nin-order, exactly-once",
    "start": "968240",
    "end": "977240"
  },
  {
    "text": "protocol? Yes? AUDIENCE: Loop up if you\nreceived that sequence number.",
    "start": "977240",
    "end": "982420"
  },
  {
    "text": "HARI BALAKRISHNAN:\nSorry, say again. AUDIENCE: Look up if you've\nreceived that sequence number. HARI BALAKRISHNAN: Look up if we\nreceived that sequence number. AUDIENCE: I think that's right.",
    "start": "982420",
    "end": "988449"
  },
  {
    "text": "HARI BALAKRISHNAN: Good. So one implementation\nis you perhaps keep track of all the sequence\nnumbers you've ever",
    "start": "988450",
    "end": "993620"
  },
  {
    "text": "received and delivered\nup to the application. If the new guy\ncomes in, you look and see if it's in your\nlist, and deliver it if not.",
    "start": "993620",
    "end": "1001457"
  },
  {
    "text": "You could do better. You have to do all that work. ",
    "start": "1001457",
    "end": "1007200"
  },
  {
    "text": "You have to keep track of\nthe list of all the sequence numbers you've ever received\nin order for this protocol to work. AUDIENCE: [INAUDIBLE]",
    "start": "1007200",
    "end": "1013915"
  },
  {
    "text": "HARI BALAKRISHNAN: Yeah,\nis it enough to keep track of simply the very last\none you've delivered and also guarantee that you'll\nonly deliver stuff in order?",
    "start": "1013915",
    "end": "1020790"
  },
  {
    "text": "So if you get up to packet\nnumber 17 and you now get 18, you deliver it up\nto the application",
    "start": "1020790",
    "end": "1026810"
  },
  {
    "text": "and update your counter\nto be set from 17 to 18 of the last sequence\nnumber you've delivered.",
    "start": "1026810",
    "end": "1032510"
  },
  {
    "text": "If your last sequence number\ndelivered in order is 17, and you get 16, throw it out. If you get 17, you throw it out.",
    "start": "1032510",
    "end": "1038689"
  },
  {
    "text": "If you get anything-- if you\nget 19, which probably shouldn't happen in this\nprotocol unless there's a mistake in the implementation\nthat they're sending in,",
    "start": "1038690",
    "end": "1045845"
  },
  {
    "text": "if the last sequence\nnumber I got was 17, can the sender send 19? ",
    "start": "1045845",
    "end": "1053411"
  },
  {
    "text": "AUDIENCE: No. HARI BALAKRISHNAN: Why not? AUDIENCE: Because we have 17\nacknowledgements [INAUDIBLE].. HARI BALAKRISHNAN:\nBecause-- that's right. So unless there's a bug in\neither side of implementation,",
    "start": "1053411",
    "end": "1060510"
  },
  {
    "text": "which, trust me, when\nyou implement it, you'll probably end\nup having some bugs, and you'd know\nsomething is amiss.",
    "start": "1060510",
    "end": "1065960"
  },
  {
    "text": "But there are these\ninvariants that have to hold. The sender can send k plus 1\nonly if it gets an ACK for k. The sender gets an ACK for k\nonly if the receiver got k.",
    "start": "1065960",
    "end": "1073309"
  },
  {
    "text": "And therefore, if the sender's\nlast in-order sequence number received and delivered\nthe application was 17,",
    "start": "1073310",
    "end": "1080429"
  },
  {
    "text": "it can't actually get a 19 in a\ncorrectly implemented protocol. But if it does, because\nin the real world,",
    "start": "1080430",
    "end": "1085810"
  },
  {
    "text": "you don't know who the heck\nwrote the sending side. You might have\ndone your receiver, and the sender might\nhave been done by, oh, I don't know, Microsoft.",
    "start": "1085810",
    "end": "1091397"
  },
  {
    "text": "And it may have an issue with\nit, or Apple, or whoever. I mean, you don't want\nto trust it, right? So you have to be careful about\nmaking sure that you might",
    "start": "1091397",
    "end": "1098990"
  },
  {
    "text": "want to assume the protocols-- you don't want\nassume necessarily that the other guys implemented\nthe protocol right because he",
    "start": "1098990",
    "end": "1105080"
  },
  {
    "text": "might not have. And so, who knows\nwhat might happen? So your rule as the\nreceiver is to rigidly obey",
    "start": "1105080",
    "end": "1111410"
  },
  {
    "text": "whatever the discipline\nis, which is you deliver up a packet exactly in order.",
    "start": "1111410",
    "end": "1117470"
  },
  {
    "text": "OK, so we wanted\nexactly-once semantics. And the way you get\nthat is you get that",
    "start": "1117470",
    "end": "1124580"
  },
  {
    "text": "by keeping track of the\nvery last sequence number that you received. So this protocol-- so the\nfirst idea is sequence numbers.",
    "start": "1124580",
    "end": "1131070"
  },
  {
    "text": "The second protocol is a\nretransmission after a timeout.",
    "start": "1131070",
    "end": "1138019"
  },
  {
    "text": " Now, how big should\nthis timeout be?",
    "start": "1138020",
    "end": "1143160"
  },
  {
    "text": "This whole protocol rests\non this magic timeout. What should it be? 15, 17?",
    "start": "1143160",
    "end": "1148260"
  },
  {
    "text": "What are the units\nof the timeout? Actually, what are the\nunits of this timeout? ",
    "start": "1148260",
    "end": "1155690"
  },
  {
    "text": "It's time. So it's, like, seconds or\nmilliseconds or something. How big should it be?",
    "start": "1155690",
    "end": "1161008"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] HARI BALAKRISHNAN: What? AUDIENCE: 5 milliseconds. HARI BALAKRISHNAN:\n5 milliseconds? AUDIENCE: [INAUDIBLE]\nmilliseconds.",
    "start": "1161009",
    "end": "1167360"
  },
  {
    "text": "AUDIENCE: Units\n[INAUDIBLE] milliseconds. HARI BALAKRISHNAN: Yeah, units\nare seconds or milliseconds. Good. But how would you pick it?",
    "start": "1167360",
    "end": "1173855"
  },
  {
    "text": "AUDIENCE: You know\nthe round-trip time. HARI BALAKRISHNAN: OK, good. So that's a good idea. There's this thing I've\nwritten on the left called",
    "start": "1173855",
    "end": "1179190"
  },
  {
    "text": "the round-trip time. But you don't know\nthe round-trip time, but you could measure\nthe round-trip time. And I'll talk about how you\nmeasure it a little bit later.",
    "start": "1179190",
    "end": "1186630"
  },
  {
    "text": "But it's important to realize\nthat if you make the timeout be smaller than the\nround-trip time,",
    "start": "1186630",
    "end": "1191649"
  },
  {
    "text": "where the round-trip time is\ndefined as the time at which you sent a packet to when you\ngot an acknowledgment for that",
    "start": "1191650",
    "end": "1197280"
  },
  {
    "text": "packet-- if you make the timeout smaller\nthan the round-trip time, what happens in this protocol?",
    "start": "1197280",
    "end": "1202520"
  },
  {
    "text": "Let me first ask, is the\nprotocol still correct? By correct, I mean,\ndoes it provide",
    "start": "1202520",
    "end": "1208230"
  },
  {
    "text": "reliable, in-order delivery? OK, it's correct, because\nthat correctness does not rest",
    "start": "1208230",
    "end": "1215279"
  },
  {
    "text": "on how we pick the timeout. However, what is the problem\nwith making the timeout smaller than round-trip time? AUDIENCE: [INAUDIBLE]",
    "start": "1215280",
    "end": "1222188"
  },
  {
    "text": "HARI BALAKRISHNAN: Yeah, if this\nprotocol's going to be here, you're going to\nbe retransmitting and retransmitting and using\nup a lot more of the network's",
    "start": "1222188",
    "end": "1228840"
  },
  {
    "text": "resources than you need to in\norder for you to actually get your protocol to work correctly. And you might, if the time\nout is really, really small,",
    "start": "1228840",
    "end": "1235842"
  },
  {
    "text": "you would probably\ncongest the network. OK, so the timeout\nhas to be bigger than the round-trip time.",
    "start": "1235842",
    "end": "1241110"
  },
  {
    "text": "The trouble in a\npacket-switched network is that delays are variable\nin a best-effort network. And, in fact, packets\nmay be reordered.",
    "start": "1241110",
    "end": "1247105"
  },
  {
    "text": "There may be weird things\ngoing on in the network, which means that the round-trip times\nare actually not constant.",
    "start": "1247105",
    "end": "1252106"
  },
  {
    "text": "They vary with time. They vary with other traffic. They vary with lots\nof other factors.",
    "start": "1252107",
    "end": "1257140"
  },
  {
    "text": "And so what you want is\nan adaptive method that would measure the\nround-trip time,",
    "start": "1257140",
    "end": "1262230"
  },
  {
    "text": "estimate the round-trip\ntime, and then come up with some sort of an\nalgorithm to compute or to set the timeout as a function\nof the observations",
    "start": "1262230",
    "end": "1269850"
  },
  {
    "text": "of the round-trip time. I'll get back to\nthat later on today. And we'll also talk about\nthis in recitation tomorrow.",
    "start": "1269850",
    "end": "1276930"
  },
  {
    "text": "It's actually a very nice\napplication of a very simple low-pass filter. So we'll actually come\nback to this idea.",
    "start": "1276930",
    "end": "1282269"
  },
  {
    "text": "But what I want to you\nto have in your head right now is this idea\nthat there's a timeout. And the timeout has to\nbe-- which I'll call",
    "start": "1282270",
    "end": "1288760"
  },
  {
    "text": "RTO for Retransmission TimeOut. We have this idea that\nour retransmission timeout",
    "start": "1288760",
    "end": "1295320"
  },
  {
    "text": "has to be bigger than\nthe round-trip time, OK? So what I need to\ntell you still is",
    "start": "1295320",
    "end": "1300592"
  },
  {
    "text": "how to measure and estimate\nthe round-trip time and how to use these estimates\nof the round-trip time to pick the timeout.",
    "start": "1300592",
    "end": "1306420"
  },
  {
    "text": "But let's subcontract\nthat problem to someone. Let's say that there's\nthe black box that",
    "start": "1306420",
    "end": "1311730"
  },
  {
    "text": "will tell you what\nthe timeout should be, and now you have this protocol. So assuming we have that black\nbox and someone telling you",
    "start": "1311730",
    "end": "1318990"
  },
  {
    "text": "the retransmission timeout,\nwhat I would like to do now is to spend some\ntime telling you",
    "start": "1318990",
    "end": "1324300"
  },
  {
    "text": "how well this protocol works. I'd like to understand what\nis the throughput, which",
    "start": "1324300",
    "end": "1329519"
  },
  {
    "text": "is the data rate that\nyou get if you're on the stop-and-wait protocol.",
    "start": "1329520",
    "end": "1334750"
  },
  {
    "text": "So that's what I\nwant to do now-- throughput of stop and wait.",
    "start": "1334750",
    "end": "1340350"
  },
  {
    "text": " So the input here is--",
    "start": "1340350",
    "end": "1345903"
  },
  {
    "text": "I'm going to assume a\nvery, very simple model. I'm going to assume for a\nminute that the round-trip time doesn't change a whole lot.",
    "start": "1345903",
    "end": "1352889"
  },
  {
    "text": "This is a very\nsimplifying assumption, but there's some\naverage round-trip time. I'm going to assume that\nthe round-trip time is RTT.",
    "start": "1352890",
    "end": "1361767"
  },
  {
    "text": "The same result holds\nif the round-trip time varies, but just simple model. Let's just assume the\nround-trip time is fixed.",
    "start": "1361767",
    "end": "1367540"
  },
  {
    "text": "And let's assume that\nsomebody tells us what the retransmission timeout is. And I need one more parameter.",
    "start": "1367540",
    "end": "1373080"
  },
  {
    "text": "I'm going to assume that I\nknow the network's packet loss",
    "start": "1373080",
    "end": "1378360"
  },
  {
    "text": "rate because intuitively,\nif the network's packet loss rate is zero--",
    "start": "1378360",
    "end": "1383600"
  },
  {
    "text": "that is, no packets are lost. No data packets, no\nacknowledgments are lost-- then you would\nexpect this protocol",
    "start": "1383600",
    "end": "1389399"
  },
  {
    "text": "has higher throughput than\nif packets were lost, right? If the packet loss\nrate is 50%, you",
    "start": "1389400",
    "end": "1395082"
  },
  {
    "text": "would expect that\nwhat would happen is, well, half the packets\nor ACKs are getting lost, which means you have to\nretransmit the packet.",
    "start": "1395082",
    "end": "1401610"
  },
  {
    "text": "And every time you\nretransmit the packet, the protocol comes to a wait. And you have to wait\nuntil the timeout happens.",
    "start": "1401610",
    "end": "1408672"
  },
  {
    "text": "So the bigger the\npacket loss rate, you would expect the\nprotocol to be slower. So I'm going to assume\nthat we have RTT and RTO.",
    "start": "1408672",
    "end": "1416130"
  },
  {
    "text": "And we have a packet loss rate\nof L. So what does that mean?",
    "start": "1416130",
    "end": "1427070"
  },
  {
    "text": "What it means is that if I\nsend a large number of packets to the network, a fraction,\nL, of them will get lost.",
    "start": "1427070",
    "end": "1434065"
  },
  {
    "text": "And I'll just assume in\nthe simplifying model that the packet losses\nare independent. So they're sort of\nBernoulli losses.",
    "start": "1434065",
    "end": "1440160"
  },
  {
    "text": "You know, every packet\ngets lost independently with some probability. Now, I also will assume\nin this protocol--",
    "start": "1440160",
    "end": "1448150"
  },
  {
    "text": "does it matter to the\nperformance of the protocol if the data packet is lost\nor if the ACK packet is lost?",
    "start": "1448150",
    "end": "1453640"
  },
  {
    "text": " It doesn't matter. As far as the sender's-- and\nthis is an important point",
    "start": "1453640",
    "end": "1459772"
  },
  {
    "text": "to understand. As far as the\nsender is concerned, if a timeout happens,\nit has no way",
    "start": "1459772",
    "end": "1464860"
  },
  {
    "text": "of knowing whether\nthe timeout happened because the data was lost\nor because the ACK was lost. This is, like, absolutely--\nthe receiver knows.",
    "start": "1464860",
    "end": "1471750"
  },
  {
    "text": "Or actually, the\nreceiver doesn't know if a timeout\nhappened, but the receiver does know whether it got\na data packet or not. But the sender-- the\nonly thing it's acting on",
    "start": "1471750",
    "end": "1478840"
  },
  {
    "text": "is the absence of an ACK. And the absence of an\nACK indicates either that the data was lost\nor that the ACK was lost,",
    "start": "1478840",
    "end": "1485170"
  },
  {
    "text": "and it has no idea which. Therefore, we could\nassume for this analysis",
    "start": "1485170",
    "end": "1490720"
  },
  {
    "text": "that this packet loss\nrate of L is actually a bidirectional\npacket loss rate. ",
    "start": "1490720",
    "end": "1498550"
  },
  {
    "text": "What I mean by that is L is the\nprobability that either a data packet is lost, or\nits ACK was lost, OK?",
    "start": "1498550",
    "end": "1506390"
  },
  {
    "text": "Now, if I give you the\none-way loss probability, you can do the calculation. That's a probability\ncalculation to find out",
    "start": "1506390",
    "end": "1511898"
  },
  {
    "text": "what is the probability that\neither the packet was lost or the data was lost. That's an easy calculation. But let me just assume that\nthe probability that either",
    "start": "1511898",
    "end": "1518970"
  },
  {
    "text": "the packet was lost, data packet\nwas lost, or its ACK was lost, is L. So given these numbers,\nwhat I want to do is,",
    "start": "1518970",
    "end": "1525632"
  },
  {
    "text": "given these things, I want to\nknow what the throughput is. ",
    "start": "1525633",
    "end": "1530840"
  },
  {
    "text": "In other words, how\nmany packets per second",
    "start": "1530840",
    "end": "1537029"
  },
  {
    "text": "am I transmitting, am\nI able to transmit, or am I able to receive\nat the receiver?",
    "start": "1537030",
    "end": "1542178"
  },
  {
    "text": "So if you want to look at\nwhat happens in this picture, if you draw time like that--",
    "start": "1542178",
    "end": "1549530"
  },
  {
    "text": "you send a packet, and\nmaybe you get an ACK here. So D1, A1.",
    "start": "1549530",
    "end": "1556510"
  },
  {
    "text": "You send D2 immediately.",
    "start": "1556510",
    "end": "1561690"
  },
  {
    "text": "And you get A2 after some time. And maybe you have a timeout.",
    "start": "1561690",
    "end": "1566880"
  },
  {
    "text": "So you send D3.  And then you have a period\nof time, which is the RTO.",
    "start": "1566880",
    "end": "1575640"
  },
  {
    "text": "No ACK happens. You send D3 again. And maybe no ACK\nhappens for a while.",
    "start": "1575640",
    "end": "1582160"
  },
  {
    "text": "You have another RTO. I'll assume that the\nRTO was fixed here. And you send D3 again. ",
    "start": "1582160",
    "end": "1589460"
  },
  {
    "text": "And you get an ACK here. And then you send D4\nhere, and so forth, right?",
    "start": "1589460",
    "end": "1595549"
  },
  {
    "text": "That's an example of what could\nhappen in a particular time evolution of the protocol.",
    "start": "1595550",
    "end": "1602360"
  },
  {
    "text": "What I mean by\nthroughput is that I would like to run such\nan experiment for a very long time, or run many,\nmany such experiments, which",
    "start": "1602360",
    "end": "1609495"
  },
  {
    "text": "is sort of equivalent to\nrunning an experiment for a very long time, and then count how\nmany packets did I successfully",
    "start": "1609495",
    "end": "1616250"
  },
  {
    "text": "get at the receiver. Or equivalently,\nI can ask how many ACKs did I get at the sender\nover that long experiment,",
    "start": "1616250",
    "end": "1622410"
  },
  {
    "text": "right? And the number of ACKs that\nI get at the center divided by the time of that experiment\nwill tell me the number",
    "start": "1622410",
    "end": "1629930"
  },
  {
    "text": "of packets per second.  Or put another way, if\nI run the experiment",
    "start": "1629930",
    "end": "1637830"
  },
  {
    "text": "for some long period\nof time, and I receive n packets coming back--",
    "start": "1637830",
    "end": "1643309"
  },
  {
    "text": "right? If I receive n acknowledgments--",
    "start": "1643310",
    "end": "1649032"
  },
  {
    "text": " and if the expected\ntime here between when",
    "start": "1649032",
    "end": "1658820"
  },
  {
    "text": "I send a data packet-- I send a data packet. I get an ACK. I send a data packet. I get an ACK.",
    "start": "1658820",
    "end": "1663912"
  },
  {
    "text": "I send a data packet,\nand I get an ACK. I send a data packet,\nand I get an ACK. If I take the expected\nvalue of that time--",
    "start": "1663912",
    "end": "1670710"
  },
  {
    "text": "that is, the expected time\nbetween when I send a packet and one I get an ACK--",
    "start": "1670710",
    "end": "1675830"
  },
  {
    "text": "the 1 over that number,\n1 over the expected time,",
    "start": "1675830",
    "end": "1684470"
  },
  {
    "text": "is equal to my throughput\nin packets per second. ",
    "start": "1684470",
    "end": "1692240"
  },
  {
    "text": "Because if I run the\nexperiment for a long time, I'm going to get some\nnumber of acknowledgments.",
    "start": "1692240",
    "end": "1697700"
  },
  {
    "text": "So if I run it for\nsome period of time where n times e of t--\nwhere e of t is number here,",
    "start": "1697700",
    "end": "1704430"
  },
  {
    "text": "and I get back an\nacknowledgment, n divided by n times e\nof t is my throughput.",
    "start": "1704430",
    "end": "1709519"
  },
  {
    "text": "And therefore, 1 over\nthe expected time is the throughput of\nmy experiment, right?",
    "start": "1709520",
    "end": "1714670"
  },
  {
    "text": "So this should be intuitive,\nbecause what's really happening is, with a little\nbit of handwaving,",
    "start": "1714670",
    "end": "1719900"
  },
  {
    "text": "actually, that I send data. I get an ACK. Send data, I get an ACK. There's a certain\nexpected amount of time,",
    "start": "1719900",
    "end": "1726690"
  },
  {
    "text": "so I will send 1 over that\npackets per second, OK? So in other words,\nthe throughput",
    "start": "1726690",
    "end": "1731720"
  },
  {
    "text": "is the reciprocal of\nthe expected amount of time between\nwhen I send a packet and when I get an\nacknowledgment. So it's enough for us\nto compute the expected",
    "start": "1731720",
    "end": "1738320"
  },
  {
    "text": "value of this time, right, or\nthe mean value of that time.",
    "start": "1738320",
    "end": "1744059"
  },
  {
    "text": "All right, so we could do that\ncalculation in a simpler way. There's the sort of\ntedious way to do it,",
    "start": "1744060",
    "end": "1750380"
  },
  {
    "text": "and there's a very\nsimple, nice way to do it. So we want to calculate expected\ntime between data and ACK.",
    "start": "1750380",
    "end": "1762830"
  },
  {
    "text": "And one way to do\nthis is to say that-- let's say I send a data packet.",
    "start": "1762830",
    "end": "1768790"
  },
  {
    "text": "One of two things can happen. I either get an ACK for it,\nor I don't get an ACK for it.",
    "start": "1768790",
    "end": "1774460"
  },
  {
    "text": "What's the probability that\nif I send a data packet, I get an ACK for it? ",
    "start": "1774460",
    "end": "1780440"
  },
  {
    "text": "Well, the probability\nthat I send a packet",
    "start": "1780440",
    "end": "1787200"
  },
  {
    "text": "and I don't get an ACK\nfor it is L. Therefore, the probability that if I send\na data packet, I get ACK for it,",
    "start": "1787200",
    "end": "1792390"
  },
  {
    "text": "is 1 minus L, right? So with probability 1 minus\nL, I send a data packet,",
    "start": "1792390",
    "end": "1803767"
  },
  {
    "text": "and I immediately\nget-- and when I say \"immediately,\" I get an ACK\nfor that data packet, right?",
    "start": "1803767",
    "end": "1811530"
  },
  {
    "text": "And how long does that take? If I get an ACK for it,\nthe ACK comes back to me in a time which is equal to\nRTT, the Round-Trip Time, right?",
    "start": "1811530",
    "end": "1819600"
  },
  {
    "text": "So therefore, I can write a\nformula that looks like this. I can write this\nexpected time which",
    "start": "1819600",
    "end": "1825150"
  },
  {
    "text": "I'm trying to calculate as\nbeing equal to 1 minus L. With probability 1 minus L,\nthe expected time between when",
    "start": "1825150",
    "end": "1832470"
  },
  {
    "text": "I send a data packet\nand when I get an ACK for it is equal\nto the RTT, right?",
    "start": "1832470",
    "end": "1842700"
  },
  {
    "text": "Because 1 minus L is, by\ndefinition, the probability that I send a packet\nand I get an ACK for it. Send a data packet\nand get an ACK.",
    "start": "1842700",
    "end": "1848820"
  },
  {
    "text": "Now, what happens\nwith probability L? With probability L,\nI send a data packet,",
    "start": "1848820",
    "end": "1854549"
  },
  {
    "text": "and I don't get an ACK for it. So now I want to compute\nthe expected time given",
    "start": "1854550",
    "end": "1860039"
  },
  {
    "text": "that I don't get an ACK for it. The first thing\nthat has to happen is I need to take a timeout.",
    "start": "1860040",
    "end": "1865590"
  },
  {
    "text": "So I have to wait for a period\nof time shown in this picture given by the RTO.",
    "start": "1865590",
    "end": "1871350"
  },
  {
    "text": "And then once I\nwait for that RTO, and I now start\nby sending a data packet, the expected\namount of time",
    "start": "1871350",
    "end": "1878100"
  },
  {
    "text": "before I get an ACK\nfor that data packet is exactly equal to the\noriginal expected time that I'm trying to\ncalculate, right?",
    "start": "1878100",
    "end": "1884170"
  },
  {
    "text": "Because it doesn't matter\nwhat happened in the past. Let's say I take a timeout. And now, I come back\nhere and [INAUDIBLE]..",
    "start": "1884170",
    "end": "1890190"
  },
  {
    "text": "I'm not going to\nsend a data packet. What's the expected time\nbefore I get an ACK? Well, that's exactly\nequal to the same answer",
    "start": "1890190",
    "end": "1896129"
  },
  {
    "text": "that we're trying to calculate,\nthis expected time over here. Therefore, I could write this\nrecursion type of relationship.",
    "start": "1896130",
    "end": "1902640"
  },
  {
    "text": "The expected time is 1 minus\nL the RTT plus L times the RTO",
    "start": "1902640",
    "end": "1907680"
  },
  {
    "text": "plus the same expected time that\nI'm trying to calculate, right?",
    "start": "1907680",
    "end": "1913740"
  },
  {
    "text": "What this says is with\nprobably 1 minus L, the time it'll take for me to\nget an ACK is equal to the RTT.",
    "start": "1913740",
    "end": "1919889"
  },
  {
    "text": "And with probability L, it's\nequal to-- first of all, this RTO-- I have to wait for that\nretransmission timeout.",
    "start": "1919890",
    "end": "1926070"
  },
  {
    "text": "And then once I do that, well,\nI have to add some more time. And that time that I\nhave to add is exactly equal to the same expected\ntime from the left-hand side",
    "start": "1926070",
    "end": "1934710"
  },
  {
    "text": "that I'm trying to calculate. Does this makes sense? You could kind of do this\nin a more tedious way.",
    "start": "1934710",
    "end": "1940680"
  },
  {
    "text": "You could say, well, with\nprobability 1 minus L, my time is RTT. With probability\nL times 1 minus L,",
    "start": "1940680",
    "end": "1948090"
  },
  {
    "text": "the time is equal\nto RTT plus RTO. With probability L\nsquared times 1 minus L,",
    "start": "1948090",
    "end": "1955840"
  },
  {
    "text": "this is, like, two losses. And then a\nretransmission-- the time is 2 times the RTO plus RTT.",
    "start": "1955840",
    "end": "1961890"
  },
  {
    "text": "With probability LQ times\n1 minus L, it's that. If you do all of that stuff,\nyou'll get the same thing. ",
    "start": "1961890",
    "end": "1969150"
  },
  {
    "text": "But this is the more-- there's a simpler way to do it. So if you run take the\nexpected time over to one side",
    "start": "1969150",
    "end": "1975179"
  },
  {
    "text": "and solve this equation,\nwhat you'll end up with is that the expected time is\nequal to RTT plus L over 1",
    "start": "1975180",
    "end": "1983760"
  },
  {
    "text": "minus L times the RTO. ",
    "start": "1983760",
    "end": "1990390"
  },
  {
    "text": "I mean, as the packet loss\nrate becomes larger and larger and larger, this term\nstarts to dominate",
    "start": "1990390",
    "end": "1995538"
  },
  {
    "text": "because L over 1 minus L\nstarts to be bigger and bigger and bigger, which is\nwhat you would expect.",
    "start": "1995538",
    "end": "2001580"
  },
  {
    "text": "If the directional packet\nloss rate is large, you'd expect the RTO terms\nto start to dominate, and the expected time is\nlarger and larger and larger.",
    "start": "2001580",
    "end": "2009500"
  },
  {
    "text": "If the packet loss rate is\nzero, then the expected time is exactly equal to the RTT. You send a packet.",
    "start": "2009500",
    "end": "2014899"
  },
  {
    "text": "You get an ACK. And with an RTT, you\nsend the next packet. You get an ACK. And of course, the throughput's\nequal to 1 over the expected",
    "start": "2014900",
    "end": "2021440"
  },
  {
    "text": "time. That's the reciprocal of\nthe expected time, OK? Now, what's the best case here?",
    "start": "2021440",
    "end": "2027853"
  },
  {
    "text": "The best case here\nis that you get one packet per round-trip time. The worst case is\narbitrarily back depending",
    "start": "2027853",
    "end": "2033500"
  },
  {
    "text": "on the packet loss rate. But the important point here\nis that even in the best case,",
    "start": "2033500",
    "end": "2038870"
  },
  {
    "text": "you're able to send only\none packet, at most, one packet per round-trip time.",
    "start": "2038870",
    "end": "2044460"
  },
  {
    "text": "The question is,\nhow good or bad is one packet per round-trip time?",
    "start": "2044460",
    "end": "2050149"
  },
  {
    "text": "Is this clear, this\nintuition behind why this is one packet per\nround-trip time in the best case? That should be pretty\nobvious, right?",
    "start": "2050150",
    "end": "2055969"
  },
  {
    "text": "I send a packet. I get an ACK. Send a packet. I get an ACK. This calculation just shows\na little bit more detail",
    "start": "2055969",
    "end": "2060980"
  },
  {
    "text": "about what happens when the\npacket loss rate's non-zero. So if the packet loss\nrate is, say, 20%,",
    "start": "2060980",
    "end": "2066860"
  },
  {
    "text": "you take 1/5 over 4/5. So it's RTT plus 1/4 of\nthe retransmission timeout.",
    "start": "2066860",
    "end": "2073949"
  },
  {
    "text": "That's what it says\nthe expected time is. And 1 over that is throughput.",
    "start": "2073949",
    "end": "2079230"
  },
  {
    "text": "Now, how bad or\ngood-- is it clear? Any questions? ",
    "start": "2079230",
    "end": "2085020"
  },
  {
    "text": "OK, so now, how good or bad\nis this 1 over the round trip time? So let's say that you have a\nnetwork between Boston to--",
    "start": "2085020",
    "end": "2097020"
  },
  {
    "text": "I don't know-- San Francisco. And if you do these pings\nor whatever, let's--",
    "start": "2097020",
    "end": "2102037"
  },
  {
    "text": "I mean, I don't know\nthe real numbers, but let's say it's\n80 milliseconds. Just for the calculation\nto be easier,",
    "start": "2102037",
    "end": "2107470"
  },
  {
    "text": "let's assume it's\n100 milliseconds. And let's say that a\npacket on the internet it's",
    "start": "2107470",
    "end": "2114780"
  },
  {
    "text": "about 10,000 bits. So let's make it bytes. Let's say that it's\n1,000, say, 1,500 bytes.",
    "start": "2114780",
    "end": "2126073"
  },
  {
    "text": "So what this says is\nthat the throughput that I would get with the\nstop-and-wait protocol if I ran it on\nthis internet path would be 1,500 bytes\ndivided by 100 milliseconds.",
    "start": "2126073",
    "end": "2136990"
  },
  {
    "text": "So that's 15,000 bytes per\nsecond, 15 kilobytes a second,",
    "start": "2136990",
    "end": "2145080"
  },
  {
    "text": "which might have been\nreally, really good in 1985, but no one's going to be\nhappy with this today. ",
    "start": "2145080",
    "end": "2152150"
  },
  {
    "text": "I mean, you might have\na link that's a megabyte a second or a gigabyte a\nsecond or 10-- you know, bigger than that.",
    "start": "2152150",
    "end": "2157610"
  },
  {
    "text": "But no matter how fast\nthe network links are, this protocol is\ncompletely dominated",
    "start": "2157610",
    "end": "2163250"
  },
  {
    "text": "by the delay or the latency,\nthe round-trip latency, between the sender\nand the receiver. And you end up with a throughput\nthat's pegged to a small value.",
    "start": "2163250",
    "end": "2171880"
  },
  {
    "text": "And so, people don't like that. So question is, how\ncan you do better? What can you do now\nto this protocol?",
    "start": "2171880",
    "end": "2178089"
  },
  {
    "text": "Or come up with a new\nmethod, a new protocol that would improve the\nthroughput of this system.",
    "start": "2178090",
    "end": "2185610"
  },
  {
    "text": "Because if people pay\nmoney for network links, they'd like to actually get\nhigher performance from it. So what could you do?",
    "start": "2185610",
    "end": "2191400"
  },
  {
    "text": " AUDIENCE: Larger packets? HARI BALAKRISHNAN: What?",
    "start": "2191400",
    "end": "2197347"
  },
  {
    "text": "AUDIENCE: Larger packets? HARI BALAKRISHNAN:\nLarger packets. Well, yeah, larger packets is--",
    "start": "2197347",
    "end": "2203562"
  },
  {
    "text": "yeah, why don't we\nmake our packets as big as the five\nwe want to send? Actually, I digress.",
    "start": "2203562",
    "end": "2209118"
  },
  {
    "text": "Why don't we make\npackets really big? Like, I got a megabyte file\nor a gigabyte file to send. Why do I have to break it\nup into smaller packets?",
    "start": "2209118",
    "end": "2215205"
  },
  {
    "text": " AUDIENCE: Larger packets\nuse more bandwidth?",
    "start": "2215205",
    "end": "2221410"
  },
  {
    "text": "HARI BALAKRISHNAN:\nWell, to send the data, no matter if we break\nit up small or big, you're going to use\nthe same bandwidth.",
    "start": "2221410",
    "end": "2227411"
  },
  {
    "text": "I mean, that's a good question. Yeah, you have an answer? AUDIENCE: [INAUDIBLE] how\nto [INAUDIBLE] over time.",
    "start": "2227411",
    "end": "2232955"
  },
  {
    "text": "HARI BALAKRISHNAN:\nThat's kind of true. You know, if a\npacket is, you know, let's say a gigabyte file\nyou want to transmit.",
    "start": "2232955",
    "end": "2239170"
  },
  {
    "text": "And you send that\nin one atomic unit, and goes through four\nhops in the network, and then it gets dropped\non the first hop,",
    "start": "2239170",
    "end": "2244210"
  },
  {
    "text": "you end up having to send\nan entire gigabyte again over all those other hops. That's actually not good. But in fact, really\nlarge packets",
    "start": "2244210",
    "end": "2250930"
  },
  {
    "text": "are probably a bad\nidea even for networks which don't drop any packets. I mean, think of the case when\nI have a gigabyte file to send,",
    "start": "2250930",
    "end": "2258100"
  },
  {
    "text": "and you have a\ngigabyte file to send. The problem if you make\nthese packets really big is that one of us is-- on a\nshared link, only one of us",
    "start": "2258100",
    "end": "2265977"
  },
  {
    "text": "can send that packet, which\nmeans the other guy is going to be waiting a really,\nreally long time for him to send that packet.",
    "start": "2265977",
    "end": "2271970"
  },
  {
    "text": "So the reason why, in the\nend, packets are modest size has to do with our wanting\nto share the network evenly",
    "start": "2271970",
    "end": "2278740"
  },
  {
    "text": "over smaller time scales. It's because we want to give\nfairness across smaller time scales, allowing\neverybody who's competing",
    "start": "2278740",
    "end": "2285723"
  },
  {
    "text": "access to the network. So even if we have big\namounts of data to send, we prefer to break them\nup into smaller chunks",
    "start": "2285723",
    "end": "2291279"
  },
  {
    "text": "among other reasons,\none reason being we don't want to start\nother connections",
    "start": "2291280",
    "end": "2298020"
  },
  {
    "text": "and prevent them from\ngaining access to the network because there's some huge\ntransfer sitting in front.",
    "start": "2298020",
    "end": "2304140"
  },
  {
    "text": "So that's part of the reason. So anyway, so bigger packets\ndoesn't quite cut it.",
    "start": "2304140",
    "end": "2309776"
  },
  {
    "text": "So what else could you do? Yes? AUDIENCE: [INAUDIBLE] to send.",
    "start": "2309777",
    "end": "2315002"
  },
  {
    "text": "So if you cannot [INAUDIBLE]. ",
    "start": "2315002",
    "end": "2323128"
  },
  {
    "text": "HARI BALAKRISHNAN: OK,\nyou know, well, I'll come back to this on Monday. That's actually a\nreally good idea.",
    "start": "2323128",
    "end": "2328490"
  },
  {
    "text": "But when would you\nstop for 8, 16, 32? I mean, at some\npoint, this is like-- AUDIENCE: [INAUDIBLE] at some\npoint, it's going to tail.",
    "start": "2328490",
    "end": "2334609"
  },
  {
    "text": "HARI BALAKRISHNAN:\nBecause packets are lost. AUDIENCE: Yeah, so you go back. HARI BALAKRISHNAN: OK,\nthis is a really good idea. We're not actually going to\nteach that here in this course.",
    "start": "2334610",
    "end": "2342260"
  },
  {
    "text": "This is actually what\nTCP does in the beginning of the connection. But before we-- what\nelse could you do?",
    "start": "2342260",
    "end": "2350849"
  },
  {
    "text": "That's a good idea. Yeah. AUDIENCE: You could\nsend a fixed number. HARI BALAKRISHNAN: Yeah,\nyou could do a fixed number.",
    "start": "2350850",
    "end": "2356810"
  },
  {
    "text": "You know, somebody could pick-- I actually kind of-- it is a really good\nidea to do 1, 2, 4, 8.",
    "start": "2356810",
    "end": "2362960"
  },
  {
    "text": "And then if it fails, you come\nback down to, say, 1 or 1/2 of whatever worked the last time\nand then continue from that.",
    "start": "2362960",
    "end": "2369690"
  },
  {
    "text": "That particular thing\nhas a name to it. That protocol is\ncalled slow start. It's ironic because\nit's really fast.",
    "start": "2369690",
    "end": "2375400"
  },
  {
    "text": "It's exponential,\nright-- 1, 2, 4, 8. But yet, it's called slow start.",
    "start": "2375400",
    "end": "2380690"
  },
  {
    "text": "I'll probably tell you\nmore about it on Wednesday. But we'll ease\ninto that solution.",
    "start": "2380690",
    "end": "2386270"
  },
  {
    "text": "We'll do something simpler. We'll use something called\na sliding window protocol with a fixed-size window.",
    "start": "2386270",
    "end": "2391272"
  },
  {
    "text": "You just make that 1\nbe 7 or 4 or 6 or 8. I'll tell you later next time\nhow you pick that value, OK?",
    "start": "2391272",
    "end": "2399440"
  },
  {
    "text": "And one way to pick that\nvalue is to do it dynamically like the gentleman\nin the front said. It's more complicated.",
    "start": "2399440",
    "end": "2405540"
  },
  {
    "text": "But let's just pick\na fixed-size value. So the idea is actually\nvery, very simple. Now that I have one\npacket outstanding.",
    "start": "2405540",
    "end": "2411970"
  },
  {
    "text": "We use this idea in\ncomputer science. We use this over\nand over again-- pipelining. So you just send\nmultiple of them",
    "start": "2411970",
    "end": "2418310"
  },
  {
    "text": "and have multiple\noutstanding packets. By \"outstanding,\" I mean\na packet that hasn't yet been acknowledged.",
    "start": "2418310",
    "end": "2424002"
  },
  {
    "text": "A data packet that hasn't\nyet been acknowledged is called an\noutstanding data packet. And you have multiple\nof these outstanding.",
    "start": "2424002",
    "end": "2430550"
  },
  {
    "text": "And every time you\nget an acknowledgment, you send one more packet. So that's shown in this\ntimeline here, right?",
    "start": "2430550",
    "end": "2437300"
  },
  {
    "text": "So you start here. You send a packet. ",
    "start": "2437300",
    "end": "2444130"
  },
  {
    "text": "I don't know why\nthis isn't working. Ah, there we go. You send a packet. You get an acknowledgment. When you get an acknowledgment,\nyou send another packet.",
    "start": "2444130",
    "end": "2451103"
  },
  {
    "text": "Get an acknowledgment. You send another packet. But in the meantime, there are\nthese other acknowledgments coming in. And the rule is very\nsimple-- every time",
    "start": "2451103",
    "end": "2457330"
  },
  {
    "text": "you get an acknowledgment that\nyou have not seen before, send the next packet in sequence.",
    "start": "2457330",
    "end": "2462880"
  },
  {
    "text": "So the sender just keeps sending\npackets in sequence order. Every time it gets\nan acknowledgment that it hasn't seen\nbefore for a packet",
    "start": "2462880",
    "end": "2470260"
  },
  {
    "text": "that it had sent before, it\nsends the next incrementing sequence number.",
    "start": "2470260",
    "end": "2476410"
  },
  {
    "text": "So this painstaking\nanimation will attempt to show you that,\nassuming it's correct.",
    "start": "2476410",
    "end": "2481920"
  },
  {
    "text": "So the window here\nis five packets, OK? I'll tell you later\nsome guidelines on how",
    "start": "2481920",
    "end": "2487260"
  },
  {
    "text": "to pick this window size. But this number\nof packets here is called the window, the number\nof outstanding packets,",
    "start": "2487260",
    "end": "2493933"
  },
  {
    "text": "or the number of\nunacknowledged packets. It's always going to be 5. It's going to be\n5 in this example.",
    "start": "2493933",
    "end": "2499290"
  },
  {
    "text": "It's always going to be a fixed\nvalue in our protocol, OK? So you send the first packet.",
    "start": "2499290",
    "end": "2505200"
  },
  {
    "text": "When you get an acknowledgment\nfor that first packet, you slide the window forward\nby 1, and you send packet 6.",
    "start": "2505200",
    "end": "2511783"
  },
  {
    "text": "When you get an\nacknowledgment for a packet 2, you slide the window forward,\nand you send packet 7.",
    "start": "2511783",
    "end": "2517527"
  },
  {
    "text": "When you get an\nacknowledgment for 3, you slide the window forward,\nand you send packet 8.",
    "start": "2517528",
    "end": "2525050"
  },
  {
    "text": "This is-- sorry? Yeah. AUDIENCE: So it appears\n[INAUDIBLE] out of order.",
    "start": "2525050",
    "end": "2531040"
  },
  {
    "text": "HARI BALAKRISHNAN:\nThat's a good question. I'll get to that in a moment. The answer is that the sender's\nrule is always the same.",
    "start": "2531040",
    "end": "2537430"
  },
  {
    "text": "Yes, you get acknowledgments\nout of order. As long as it's an\nacknowledgment for a packet-- sorry, as long as\nit's an acknowledgment",
    "start": "2537430",
    "end": "2543559"
  },
  {
    "text": "that you have not seen\nbefore for a packet that you have actually sent, you\nslide the window forward by 1",
    "start": "2543560",
    "end": "2550220"
  },
  {
    "text": "and send a new packet, OK? And you keep track of the\nfact that you received",
    "start": "2550220",
    "end": "2555463"
  },
  {
    "text": "an acknowledgment, so you\nknow that you should never retransmit that packet. ",
    "start": "2555463",
    "end": "2561317"
  },
  {
    "text": "I want to define this\nthing and pause here. I want you to understand\nthe definition of a window and internalize it.",
    "start": "2561318",
    "end": "2567580"
  },
  {
    "text": "If the window size\nis W, what it means is that the maximum number of\nunacknowledged packets that you",
    "start": "2567580",
    "end": "2573309"
  },
  {
    "text": "can have in the connection is\nW. There are many different ways of defining a window.",
    "start": "2573310",
    "end": "2579220"
  },
  {
    "text": "In fact, TCP inside\nit has two windows. This definition is\none of those windows. I won't talk about the\nsecond definition here.",
    "start": "2579220",
    "end": "2586589"
  },
  {
    "text": "I'll get to it next week. It's not important\nfor us right now. So again, to repeat, if\nthe window size is W,",
    "start": "2586590",
    "end": "2593200"
  },
  {
    "text": "it means that the maximum\nnumber of unacknowledged packets in the system in the protocol\nis W. So the rule of the sender",
    "start": "2593200",
    "end": "2600550"
  },
  {
    "text": "is going to be to very\nreligiously adhere to this rule. In other words, every time\nit gets an acknowledgment,",
    "start": "2600550",
    "end": "2606440"
  },
  {
    "text": "it waits and sees whether\nit's an acknowledgment for a packet it has sent before\nthat it has not seen before.",
    "start": "2606440",
    "end": "2612099"
  },
  {
    "text": "If you get an\nacknowledgment like that, it means that some\npacket has been received,",
    "start": "2612100",
    "end": "2617320"
  },
  {
    "text": "which means you can get rid\nof that packet from the stack of unacknowledged packets that\nyou have and send a new packet.",
    "start": "2617320",
    "end": "2623835"
  },
  {
    "text": "Because you can\nsend a new packet because you know that the\nnumber of unacknowledged packets",
    "start": "2623835",
    "end": "2629330"
  },
  {
    "text": "reduced by 1 because you\ngot an ACK, which means you can now send\na new packet, OK? It's a very simple\nrule if you just",
    "start": "2629330",
    "end": "2635770"
  },
  {
    "text": "follow that idea to implement. It also is surprisingly\neasy to get wrong. Yeah. AUDIENCE: So the window\ndoesn't necessarily",
    "start": "2635770",
    "end": "2643378"
  },
  {
    "text": "have to be consecutive? HARI BALAKRISHNAN: The window\ndoesn't have to be consecutive. This is a really,\nreally good point.",
    "start": "2643378",
    "end": "2649450"
  },
  {
    "text": "And it's very\ntempting to implement a window that's consecutive. And you'll find that after a\nwhile, if you follow that idea,",
    "start": "2649450",
    "end": "2655300"
  },
  {
    "text": "and you do it wrongly, the\nprotocol will just stall. And every time,\nthere's about a quarter of the students, the first\ntime they implemented this,",
    "start": "2655300",
    "end": "2660690"
  },
  {
    "text": "it just stops\nworking after a while as the packet loss rates grow. So it's important that\nin this definition of the protocol in the\nway it's defined here,",
    "start": "2660690",
    "end": "2667300"
  },
  {
    "text": "the window of\nunacknowledged packets-- it's not necessarily\nconsecutive. So you could have packets 1, 2,\n3, 4, 8, 9, 10, 11 outstanding",
    "start": "2667300",
    "end": "2676270"
  },
  {
    "text": "if your window size is 8. The other guys may have\ngotten acknowledged. That's absolutely true, yes.",
    "start": "2676270",
    "end": "2684150"
  },
  {
    "text": "OK? All right, now what\nhappens under all these other weird cases that\nare going to happen here?",
    "start": "2684150",
    "end": "2689599"
  },
  {
    "text": "So let me first\nshow you a timeline of how a timeout is dealt with.",
    "start": "2689600",
    "end": "2695480"
  },
  {
    "text": "So let's say in this\ncase, the window size is 5 again like it was before.",
    "start": "2695480",
    "end": "2700640"
  },
  {
    "text": "So everything is going\nwonderfully well here. And let's say now you move on. You send packets 6, 7, 8.",
    "start": "2700640",
    "end": "2706330"
  },
  {
    "text": "And let's say packet 8 is lost. What the sender is going to do\nis it's going to send packet 9. It's going to send packet 10\nbased on acknowledgments for 4",
    "start": "2706330",
    "end": "2715990"
  },
  {
    "text": "and 3 that it received before. So, sorry, when it\ngot acknowledgment 3, it sent packet 8.",
    "start": "2715990",
    "end": "2721405"
  },
  {
    "text": "8 was lost. The sender didn't know\nthat at this point. When it got an acknowledgment\nfor 4, it sends 9. When it got an acknowledgment\nfor 5, it sends 10.",
    "start": "2721405",
    "end": "2728848"
  },
  {
    "text": "When it gets an\nacknowledgment for 6, it goes ahead and sends 11. When it gets an\nacknowledgment for 7,",
    "start": "2728848",
    "end": "2735790"
  },
  {
    "text": "it goes ahead and sends 12. So at this point,\nthe sender actually has outstanding 12,\n11, 10, 9, 8, OK?",
    "start": "2735790",
    "end": "2745599"
  },
  {
    "text": "Now, at some point,\nit discovers that-- in fact, this picture continues.",
    "start": "2745600",
    "end": "2751300"
  },
  {
    "text": "In this picture, what happened\nis that you sent out 9. You've got an\nacknowledgment for 9. And at that point,\nyou send out 13",
    "start": "2751300",
    "end": "2757068"
  },
  {
    "text": "because whenever you\nget an acknowledgment, you send out the next\nconsecutive packet you should be sending out. So at this point\nin time, the sender",
    "start": "2757068",
    "end": "2763540"
  },
  {
    "text": "has a bunch of\noutstanding packets in it, and it's got acknowledgment. And this is an interesting\ncase because packet 8 was lost.",
    "start": "2763540",
    "end": "2769710"
  },
  {
    "text": "9 was sent later, and\n9 got acknowledged. But we still haven't\ntimed out on 8. So at this point in time,\nthe outstanding packets",
    "start": "2769710",
    "end": "2776410"
  },
  {
    "text": "in the window are 13,\n12, 11, 10, and 8, giving you that nonconsecutive\nobservation that you notice.",
    "start": "2776410",
    "end": "2784750"
  },
  {
    "text": "And then at some point in time,\nbased on the round-trip time, based on the black\nbox, the guy timed out,",
    "start": "2784750",
    "end": "2789850"
  },
  {
    "text": "and 8 got retransmitted. And then 8 got retransmitted. You got an acknowledgment for\n8, and the protocol sort of",
    "start": "2789850",
    "end": "2795065"
  },
  {
    "text": "continues in that fashion. Does this makes sense? So it's actually not that\nhard when you think about it.",
    "start": "2795065",
    "end": "2802940"
  },
  {
    "text": "What the sender does is\na very simple idea, which is every time it gets a new\nacknowledgment for a packet it",
    "start": "2802940",
    "end": "2809440"
  },
  {
    "text": "had sent before but hadn't seen\nan acknowledgment for before, it just goes ahead and\nsends the next packet. And then it has a\nseparate process by which",
    "start": "2809440",
    "end": "2815980"
  },
  {
    "text": "it maintains this timeout. And whenever an\nacknowledgment does not arrive within a\ntimeout, it goes ahead and retransmits that back.",
    "start": "2815980",
    "end": "2822640"
  },
  {
    "text": "Now, when it\nretransmits the packet, the assumption here is\nthat the original packet was actually lost.",
    "start": "2822640",
    "end": "2828530"
  },
  {
    "text": "So the timeout has\nto be bigger than-- for the system to\nwork well, the timeout",
    "start": "2828530",
    "end": "2834460"
  },
  {
    "text": "has to be bigger\nthan the maximum time that a packet can sit\naround in the system.",
    "start": "2834460",
    "end": "2840109"
  },
  {
    "text": "So if the timeout is too small,\nand you retransmit 8 too early, it could be that 8 is\nnot lost, but 8 is just",
    "start": "2840110",
    "end": "2845530"
  },
  {
    "text": "being reordered in the network\nand going on some very long circulous path. You know, I recently read\nthat someone got a letter",
    "start": "2845530",
    "end": "2850660"
  },
  {
    "text": "in New York 70 years-- it was sent in 1943, and it\nshowed up, like, two weeks ago. So, I mean, it could\nhappen on the internet too.",
    "start": "2850660",
    "end": "2857260"
  },
  {
    "text": "I mean, quite literally, if\nyou're on an Amtrak train, and you're using their\nwireless network, some packets come to you\nin 300 or 400 milliseconds,",
    "start": "2857260",
    "end": "2865819"
  },
  {
    "text": "which is arguably very long. But literally, there\nare packets that will come back to you a\nminute after you sent them--",
    "start": "2865820",
    "end": "2870950"
  },
  {
    "text": "reach the receiver a\nminute after you sent them. And they could be out of order. So in fact, this is my\nstudent's, and I call",
    "start": "2870950",
    "end": "2875993"
  },
  {
    "text": "this the great Amtrak network. It's really good\nbecause it gives us really interesting research\nfor others to work on.",
    "start": "2875993",
    "end": "2881650"
  },
  {
    "text": "But the people who\nare on that train probably-- it's miserable. So anyway, this could happen.",
    "start": "2881650",
    "end": "2887030"
  },
  {
    "text": "But, and so, the\ntimeout is a heuristic. It could be that 8 was\nretransmitted wrongly in a spurious way.",
    "start": "2887030",
    "end": "2893260"
  },
  {
    "text": "But our hope is that if\nthe timeout is long enough, it could be that-- if the timeout's\nlong enough, the idea",
    "start": "2893260",
    "end": "2898870"
  },
  {
    "text": "is that you retransmit 8\nbecause the original 8 was lost. And now the outstanding\npackets in the window are 8, 13, 12, 11, and 10.",
    "start": "2898870",
    "end": "2907300"
  },
  {
    "text": "But the 8 here is not\nthat 8, but this 8. But as long as the\ncontents of 8 are the same,",
    "start": "2907300",
    "end": "2915580"
  },
  {
    "text": "it doesn't matter which 8 it is. But of course, if the timeout\nis too small, there are two 8's sitting in the network.",
    "start": "2915580",
    "end": "2921040"
  },
  {
    "text": "And now you actually have more\nthan W packets in the window. But as far as the\nsender is concerned,",
    "start": "2921040",
    "end": "2926470"
  },
  {
    "text": "it has exactly those\n8, 10, 11, 12, and 13. It's true that there's one more\npacket if the timeout happened",
    "start": "2926470",
    "end": "2931930"
  },
  {
    "text": "too early. That's the network's problem. As far as the\nsender is concerned, it has five outstanding packets.",
    "start": "2931930",
    "end": "2937690"
  },
  {
    "text": "The receiver is a little\ntrickier than in the other case because what it has to do-- I mean, it's trickier in\nthat it has to maintain",
    "start": "2937690",
    "end": "2943260"
  },
  {
    "text": "a buffer of packets. So the receiver has a\nlittle more of a job to do. In the previous\nstop-and-wait protocol,",
    "start": "2943260",
    "end": "2950900"
  },
  {
    "text": "any time it got an\nout-of-order packet, it's probably because the sender\nis badly implemented, right? If the last sequence number\nI deliver to the application",
    "start": "2950900",
    "end": "2958150"
  },
  {
    "text": "was 17, and I got\na 19, it's a bug. Whereas here, is\nthe last sequence number I delivered to\nthe application is 17,",
    "start": "2958150",
    "end": "2964870"
  },
  {
    "text": "and I get a 19, it means\nthat, well, there's a window. And maybe 18 was lost, or who\nknows what happened, right?",
    "start": "2964870",
    "end": "2969910"
  },
  {
    "text": "Maybe 18 will show up later. So the receiver now\nhas an interesting job. And this is important\nbecause when",
    "start": "2969910",
    "end": "2975160"
  },
  {
    "text": "you implement this stuff in\nthis protocol [INAUDIBLE],, you've got to make sure that\nwhenever you deliver packets from the receiver protocol\nto the application,",
    "start": "2975160",
    "end": "2981880"
  },
  {
    "text": "you deliver it in order and\nupdate the last sequence number you delivered, OK?",
    "start": "2981880",
    "end": "2987150"
  },
  {
    "text": "So that's important to do. But if you do that\nand then acknowledge a packet when it's\nreceived, just",
    "start": "2987150",
    "end": "2992820"
  },
  {
    "text": "send an acknowledgment for it. The protocol will continue,\nand it will work well. So this is what\nyou'll be looking at in the lab, the piece\nthat's going to go out today.",
    "start": "2992820",
    "end": "3000020"
  },
  {
    "text": "This is the last lab. And then on tomorrow\nin recitation, we'll look at how the\ntimeout is selected.",
    "start": "3000020",
    "end": "3005263"
  },
  {
    "text": "And then on Monday,\nI'll talk more about an analysis\nof this protocol.",
    "start": "3005263",
    "end": "3009550"
  }
]