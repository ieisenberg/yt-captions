[
  {
    "start": "0",
    "end": "138000"
  },
  {
    "text": " Good morning.\nIt looks like 9:30 is getting earlier and earlier for\neveryone.",
    "start": "7000",
    "end": "13000"
  },
  {
    "text": "Hello to all the people\nwatching at home. I think there should be a\nrequirement that if you're",
    "start": "13000",
    "end": "22000"
  },
  {
    "text": "watching the video,\nyou can only watch it 9:30-11:00 on Sunday,\nor at least start watching then",
    "start": "22000",
    "end": "31000"
  },
  {
    "text": "just so you can all feel our\nmornings. Today, we're going to talk\nabout balanced search trees.",
    "start": "31000",
    "end": "40000"
  },
  {
    "text": "Now, we've hinted at this for a\nwhile. Our goal today is to get a\nsearch tree data structure,",
    "start": "40000",
    "end": "46000"
  },
  {
    "text": "so we can insert,\ndelete, and search all at log n time for operations.\nSo, we want a tree that's",
    "start": "46000",
    "end": "53000"
  },
  {
    "text": "guaranteed to be log n in\nheight. So, that's a balanced search\ntree data structure.",
    "start": "53000",
    "end": "61000"
  },
  {
    "start": "61000",
    "end": "73000"
  },
  {
    "text": "And, we want a data structure\nthat can maintain a dynamic set of n elements in log n time for\noperation.",
    "start": "73000",
    "end": "82000"
  },
  {
    "start": "82000",
    "end": "92000"
  },
  {
    "text": "So, we'll say,\nusing a tree of height order log n.\nNow, if you look very closely,",
    "start": "92000",
    "end": "98000"
  },
  {
    "text": "we haven't actually defined\nwhat a search tree data structure is.\nWe've defined what a binary",
    "start": "98000",
    "end": "105000"
  },
  {
    "text": "search tree data structure is,\nand that's one particular kind. And that's what we will be\nfocusing on today.",
    "start": "105000",
    "end": "114000"
  },
  {
    "text": "In recitation on Friday,\nwe will look at, or you will like that,\nbalanced search trees that are",
    "start": "114000",
    "end": "121000"
  },
  {
    "text": "not necessarily binary.\nEach node can have a constant",
    "start": "121000",
    "end": "127000"
  },
  {
    "text": "number of children,\nnot just two. So, I'm defining is generally.\nYou actually see what a search",
    "start": "127000",
    "end": "133000"
  },
  {
    "text": "tree is in the general case\nlater on. Today, we will just be focusing\non the binary case.",
    "start": "133000",
    "end": "139000"
  },
  {
    "text": "So, I won't define this yet.\nSo, there are a lot of different balanced search tree\ndata structures.",
    "start": "139000",
    "end": "146000"
  },
  {
    "text": "So, these are the main ones\nthat I know of. The first one was AVL trees.\nThis was invented in 1962.",
    "start": "146000",
    "end": "155000"
  },
  {
    "text": "So, that was the beginning of\nfast data structures.",
    "start": "155000",
    "end": "161000"
  },
  {
    "text": "The next three sort of come\ntogether and this is what you",
    "start": "161000",
    "end": "167000"
  },
  {
    "text": "will cover in recitation this\nweek. So, these are non binary trees.\nInstead of binary,",
    "start": "167000",
    "end": "176000"
  },
  {
    "text": "we have maybe binary and\ntertiary, or maybe binary and",
    "start": "176000",
    "end": "182000"
  },
  {
    "text": "tertiary, or quaternary,\nover a general concept degree,",
    "start": "182000",
    "end": "188000"
  },
  {
    "text": "B.\nSo, that's another way you can get balance.\nTwo-three trees,",
    "start": "188000",
    "end": "196000"
  },
  {
    "text": "which were the second trees to\nbe invented, they were invented",
    "start": "196000",
    "end": "202000"
  },
  {
    "text": "in 1970 by Hopcroft.\nThe trees we will cover today are called red black trees.\nThese are binary search trees",
    "start": "202000",
    "end": "213000"
  },
  {
    "text": "of guaranteed logarithmic\nheight. So then, there's some others.\nSo, skip lists are ones that we",
    "start": "213000",
    "end": "224000"
  },
  {
    "text": "will cover next week.\nIt's not exactly a tree, but it's more or less a tree,\nand one that you will see in",
    "start": "224000",
    "end": "235000"
  },
  {
    "text": "your problem set this week are\ntreeps, which I won't talk too",
    "start": "235000",
    "end": "242000"
  },
  {
    "text": "much about here.\nBut they are in some sense easier to get because they\nessentially just rely on the",
    "start": "242000",
    "end": "249000"
  },
  {
    "text": "material from last Monday.\nSo, on Monday we saw that if we just randomly built a binary\nsearch tree, it's going to have",
    "start": "249000",
    "end": "256000"
  },
  {
    "text": "log n height most of the time in\nexpectation. So, treeps are a way to make\nthat dynamic,",
    "start": "256000",
    "end": "262000"
  },
  {
    "text": "so that instead of just having\na static set of n items, you can insert and delete into\nthose items and still",
    "start": "262000",
    "end": "268000"
  },
  {
    "text": "effectively randomly permute\nthem and put them in a tree. So in some sense,\nit's the easiest.",
    "start": "268000",
    "end": "275000"
  },
  {
    "text": "It's also one of the most\nrecent search tree data structures.\nThat was invented in 1996 by a",
    "start": "275000",
    "end": "282000"
  },
  {
    "text": "couple of geometers,\nRimon Sidell and Aragen. So, those are just some search\ntree data structures.",
    "start": "282000",
    "end": "289000"
  },
  {
    "text": "The only ones we will not cover\nin this class are AVL trees. They're not too hard.\nIf you're interested,",
    "start": "289000",
    "end": "297000"
  },
  {
    "start": "295000",
    "end": "416000"
  },
  {
    "text": "you should read about them\nbecause they're fun. I think they are a problem in\nthe textbook.",
    "start": "297000",
    "end": "305000"
  },
  {
    "text": "OK, but today,\nwe're going to focus on red black trees, which is a fairly\nsimple idea, red black trees.",
    "start": "305000",
    "end": "317000"
  },
  {
    "text": "And, it's a particular way of\nguaranteeing this logarithmic",
    "start": "317000",
    "end": "324000"
  },
  {
    "text": "height so that all the\noperations can be supported in",
    "start": "324000",
    "end": "330000"
  },
  {
    "text": "log n time.\nSo, they are binary search",
    "start": "330000",
    "end": "336000"
  },
  {
    "text": "trees.\nAnd, they have a little bit of extra information in each node\ncalled the color field.",
    "start": "336000",
    "end": "347000"
  },
  {
    "start": "347000",
    "end": "362000"
  },
  {
    "text": "And there are several\nproperties that a tree with a color field has to satisfy in\norder to be called a red black",
    "start": "362000",
    "end": "371000"
  },
  {
    "text": "tree.\nThese are called the red black properties.\nAnd, this will take a little",
    "start": "371000",
    "end": "377000"
  },
  {
    "text": "bit of time to write down,\nbut it's all pretty simple. So once I write them down I\nwill just say what they really",
    "start": "377000",
    "end": "386000"
  },
  {
    "text": "mean.\nThere's four properties. The first one's pretty simple.\nEvery node is either red or",
    "start": "386000",
    "end": "394000"
  },
  {
    "text": "black, hence the name of red\nblack trees. So, the color field is just a\nsingle bit specifying red or",
    "start": "394000",
    "end": "402000"
  },
  {
    "text": "black.\nAnd red nodes, I'm going to denote by a double\ncircle because I don't have",
    "start": "402000",
    "end": "408000"
  },
  {
    "text": "colored chalk here,\nand black nodes will be a single circle.\nAnd you probably don't have",
    "start": "408000",
    "end": "414000"
  },
  {
    "text": "colored pens either,\nso it will save us some grief.",
    "start": "414000",
    "end": "420000"
  },
  {
    "start": "416000",
    "end": "540000"
  },
  {
    "text": "Red is double circle;\nblack is single circle. And, we sort of prefer black\nnodes in some sense.",
    "start": "420000",
    "end": "429000"
  },
  {
    "text": "Red nodes are a pain,\nas we'll see. OK, second property is that the\nroot and the leaves are all",
    "start": "429000",
    "end": "439000"
  },
  {
    "text": "black.\nAnd, I'm going to pull a little trick here.\nTreat binary search trees a",
    "start": "439000",
    "end": "446000"
  },
  {
    "text": "little bit differently than we\nhave in the past.",
    "start": "446000",
    "end": "453000"
  },
  {
    "text": "Normally, you think of the tree\nas a bunch of nodes. Each node could have zero or\none or two children,",
    "start": "453000",
    "end": "459000"
  },
  {
    "text": "something like this.\nI'm going to imagine appending every place where a node does\nnot have a child.",
    "start": "459000",
    "end": "466000"
  },
  {
    "text": "I'm going to put a little dot\nhere, an external node, which I call a leaf.\nSo, normally leaves would have",
    "start": "466000",
    "end": "473000"
  },
  {
    "text": "been these items.\nI'm just going to add to every absent child pointer a leaf.\nAnd, these will be my leaves.",
    "start": "473000",
    "end": "482000"
  },
  {
    "text": "These are really the nil\npointers from each of these nodes.\nSo now, every internal node has",
    "start": "482000",
    "end": "491000"
  },
  {
    "text": "exactly two children,\nand every leaf has zero children.\nOK, so these are those I'm",
    "start": "491000",
    "end": "499000"
  },
  {
    "text": "referring to.\nThese are black, and this guy is black according\nto rule two.",
    "start": "499000",
    "end": "506000"
  },
  {
    "text": "Now the properties get a little\nbit more interesting. The parent of every red node is\nblack.",
    "start": "506000",
    "end": "517000"
  },
  {
    "text": "So, whenever I have a red node,\nits parent has to be black, a single circle.\nOK, so in other words,",
    "start": "517000",
    "end": "525000"
  },
  {
    "text": "if you look at a path in the\ntree you can never have two red nodes consecutive.\nYou can have,",
    "start": "525000",
    "end": "533000"
  },
  {
    "text": "at most, red,\nblack, red, black. You can have several black\nnodes consecutive,",
    "start": "533000",
    "end": "539000"
  },
  {
    "text": "but never two red nodes.\nOK, and then one more rule.",
    "start": "539000",
    "end": "546000"
  },
  {
    "start": "540000",
    "end": "680000"
  },
  {
    "text": "It says a little bit more about\nsuch paths.",
    "start": "546000",
    "end": "553000"
  },
  {
    "text": "So, if we take a simple path,\nmeaning it doesn't repeat any",
    "start": "553000",
    "end": "561000"
  },
  {
    "text": "vertices from a node,\nx, to a descended leaf of x,",
    "start": "561000",
    "end": "568000"
  },
  {
    "text": "all such paths to all\ndescendant leaves have the same",
    "start": "568000",
    "end": "576000"
  },
  {
    "text": "number of black nodes on them.",
    "start": "576000",
    "end": "582000"
  },
  {
    "start": "582000",
    "end": "599000"
  },
  {
    "text": "So, let me draw a picture.\nWe have some tree. We have some node,\nx, in the tree.",
    "start": "599000",
    "end": "605000"
  },
  {
    "text": "And, I'm looking at all the\npaths from x down to some descendant leaf down here at the\nbottom of the tree.",
    "start": "605000",
    "end": "614000"
  },
  {
    "text": "All of these paths should have\nthe same number of black nodes. So, here I'll draw that each\none has four black nodes,",
    "start": "614000",
    "end": "623000"
  },
  {
    "text": "the leaf, and three above it.\nWe know that from property three, at most,\nhalf of the nodes are red",
    "start": "623000",
    "end": "631000"
  },
  {
    "text": "because whenever I have a red\nnode, the parent must be black.",
    "start": "631000",
    "end": "638000"
  },
  {
    "text": "But I want all of these paths\nto have exactly the same number",
    "start": "638000",
    "end": "644000"
  },
  {
    "text": "of black nodes.\nOne subtlety here is that the black height,\nI didn't really leave room.",
    "start": "644000",
    "end": "652000"
  },
  {
    "text": "So I'll write it over here.\nThis should be the same for all",
    "start": "652000",
    "end": "658000"
  },
  {
    "text": "paths, but in particular,\nthe count I'm interested in",
    "start": "658000",
    "end": "664000"
  },
  {
    "text": "does not include x itself.\nOK, so if x is black, I'm only calling the black\nheight.",
    "start": "664000",
    "end": "672000"
  },
  {
    "text": "So, the black height of x is\nthis count four. And even if x is black,\nthe black height is four.",
    "start": "672000",
    "end": "679000"
  },
  {
    "text": "So, these are just some minor\ndetails to get all of the algorithms a bit clean.\nSo, let's look at an example of",
    "start": "679000",
    "end": "687000"
  },
  {
    "start": "680000",
    "end": "815000"
  },
  {
    "text": "a red black tree.\nSo, yeah, I'll show you an example.\nThen I'll say why we care about",
    "start": "687000",
    "end": "694000"
  },
  {
    "text": "these properties. ",
    "start": "694000",
    "end": "736000"
  },
  {
    "text": "OK, so this tree has several\nproperties. The first thing is that it's a\nbinary search tree. OK, and so you can check an [in\norder traversal?].",
    "start": "736000",
    "end": "744000"
  },
  {
    "text": "It should give these numbers in\nsorted order: three, seven,\neight, ten, 11, 18, 22, 26.\nSo, it's a valid binary search",
    "start": "744000",
    "end": "750000"
  },
  {
    "text": "tree.\nWe've appended these leaves with no keys in them.\nThey are just hanging around.",
    "start": "750000",
    "end": "756000"
  },
  {
    "text": "Those are the nil pointers.\nSo, each of these, you can call them nil.\nThey are all just marked there,",
    "start": "756000",
    "end": "763000"
  },
  {
    "text": "wherever there is absent child.\nAnd then, I've double circled some of the nodes to color them\nred.",
    "start": "763000",
    "end": "769000"
  },
  {
    "text": "OK, if I didn't,\nthe black heights wouldn't match up.\nSo, I have to be a little bit careful.\nFrom every node,",
    "start": "769000",
    "end": "776000"
  },
  {
    "text": "we'd like to measure the number\nof black nodes from that node down to any descendent leaf.\nSo, for example,",
    "start": "776000",
    "end": "782000"
  },
  {
    "text": "the nil pointers,\ntheir black height is zero. Good.\nThat's always the answer.",
    "start": "782000",
    "end": "789000"
  },
  {
    "text": "So, these guys always have\nblack height zero. I'll just represent that here.\nBlack height equals zero.",
    "start": "789000",
    "end": "797000"
  },
  {
    "text": "OK, what's the black height of\nthree? Zero?\nNot quite, because these nodes are black.\nSo the black height is one.",
    "start": "797000",
    "end": "805000"
  },
  {
    "text": "You're right that we don't\ncount three even though it's black.\nIt's not included in the count.",
    "start": "805000",
    "end": "814000"
  },
  {
    "text": "But the leaves count.\nAnd there's only two paths here, and they each have the\nsame number of black nodes as",
    "start": "814000",
    "end": "823000"
  },
  {
    "text": "they should.\nOver here, let's say eight also has black height one even though\nit's red.",
    "start": "823000",
    "end": "830000"
  },
  {
    "text": "OK: same with 11,\nsame with 26. Each of them only has two\npaths. Each path has one black node on\nit.",
    "start": "830000",
    "end": "840000"
  },
  {
    "text": "Ten: what's the black height?\nIt's still one, good, because we don't count\nten. There's now four paths to\nleaves.",
    "start": "840000",
    "end": "847000"
  },
  {
    "text": "Each of them contains exactly\none black node, plus the root,\nwhich we don't count. 22: same thing,\nhopefully.",
    "start": "847000",
    "end": "854000"
  },
  {
    "text": "This is getting a little more\ninteresting. There's one path here which has\none black node.",
    "start": "854000",
    "end": "860000"
  },
  {
    "text": "There are other paths here,\nwhich are longer. But they still only have one\nblack node. So, if we just sort of ignore\nthe red nodes,",
    "start": "860000",
    "end": "868000"
  },
  {
    "text": "all these paths have the same\nlength. OK: 18 should be bigger\nhopefully, black height of two",
    "start": "868000",
    "end": "874000"
  },
  {
    "text": "because each of these paths now\nhas one black node here, one black node in leaves,\nor one black note here,",
    "start": "874000",
    "end": "881000"
  },
  {
    "text": "and one black node in the\nleaves. And finally,\nthe root should have a black",
    "start": "881000",
    "end": "889000"
  },
  {
    "text": "height of two.\nIt's easier to see over here, I guess.\nEach of these paths has two",
    "start": "889000",
    "end": "896000"
  },
  {
    "text": "black nodes.\nSame over here. OK, so hopefully these\nproperties make sense.",
    "start": "896000",
    "end": "902000"
  },
  {
    "text": "We didn't check all of them.\nEvery red node has a black parent.\nIf you look at all of these",
    "start": "902000",
    "end": "908000"
  },
  {
    "text": "paths, we sort of alternate,\nred, black at most. Or we have just a bunch of\nblacks. But we never repeat two reds in\na row.",
    "start": "908000",
    "end": "915000"
  },
  {
    "text": "The root and the leaves are\nblack that we used pretty much by definition.\nEvery node is red or black.",
    "start": "915000",
    "end": "922000"
  },
  {
    "text": "OK, that's easy.\nThis is a particular set of properties.\nIt may seem a bit arbitrary at this point.\nThey will make a lot more sense",
    "start": "922000",
    "end": "930000"
  },
  {
    "text": "as we see what consequences they\nhave. But there are a couple of goals\nthat we are trying to achieve",
    "start": "930000",
    "end": "937000"
  },
  {
    "text": "here.\nOne is that these properties should force the tree to have\nlogarithmic height,",
    "start": "937000",
    "end": "943000"
  },
  {
    "text": "order log n height.\nAnd, they do, although that's probably not\nobvious at this point. It follows mainly from all the\nproperties.",
    "start": "943000",
    "end": "951000"
  },
  {
    "text": "Three and four are the main\nones. But you pretty much need all of\nthem. The other desire we have from\nthese properties is that they",
    "start": "951000",
    "end": "959000"
  },
  {
    "text": "are somehow easy to maintain.\nOK, I can create a tree in the",
    "start": "959000",
    "end": "965000"
  },
  {
    "text": "beginning that has this\nproperty. For example,\nI could make, I have to be a little bit\ncareful, but certainly if I take",
    "start": "965000",
    "end": "974000"
  },
  {
    "text": "a perfectly balanced binary tree\nand make all of the nodes black, it will satisfy those\nproperties.",
    "start": "974000",
    "end": "981000"
  },
  {
    "text": "OK, this is a red black tree.\nOK, so it's not too hard to make any these properties hold\njust from the beginning.",
    "start": "981000",
    "end": "990000"
  },
  {
    "text": "The tricky part is to maintain\nthem. When I insert a node into this\ntree, and delete a node for this",
    "start": "990000",
    "end": "998000"
  },
  {
    "text": "tree, I want to make it not too\nhard. In log n time,\nI've got to be able to restore all these properties.\nOK, that will be the hardest",
    "start": "998000",
    "end": "1007000"
  },
  {
    "text": "part.\nThe first thing we will do is prove that these properties\nimply that the tree has to have",
    "start": "1007000",
    "end": "1013000"
  },
  {
    "text": "height order log n.\nTherefore, all searches and queries on a data structure will\nrun fast.",
    "start": "1013000",
    "end": "1019000"
  },
  {
    "text": "The hard part will be to make\nsure these properties stay true if they initially held true when\nwe make changes to the tree.",
    "start": "1019000",
    "end": "1029000"
  },
  {
    "text": "So, let's look at the height of\na red black tree.",
    "start": "1029000",
    "end": "1037000"
  },
  {
    "start": "1037000",
    "end": "1054000"
  },
  {
    "text": "And from this we will start to\nsee where these properties come from, why we chose these\nproperties.",
    "start": "1054000",
    "end": "1061000"
  },
  {
    "start": "1061000",
    "end": "1086000"
  },
  {
    "text": "So, the claim is that the\nheight of a red black tree with n keys, so, I'm not saying nodes\nhere because I really only want",
    "start": "1086000",
    "end": "1093000"
  },
  {
    "text": "to count the internal nodes,\nnot these extra leaves that we've added, has height,\nat most, two times log of n",
    "start": "1093000",
    "end": "1100000"
  },
  {
    "text": "plus one, so order log n.\nBut, we have a pretty precise bound of a factor of two.\nThere is a proof of this in the",
    "start": "1100000",
    "end": "1108000"
  },
  {
    "text": "textbook by induction,\nand you should read that. What I'm going to give us more\nof a proof sketch.",
    "start": "1108000",
    "end": "1115000"
  },
  {
    "text": "But you should read the proof\nby induction because all the practice you can get with proof\nby induction is good.",
    "start": "1115000",
    "end": "1124000"
  },
  {
    "text": "The proof sketch on the other\nhand gives a lot more intuition with what's going on with red\nblack trees and connects up with",
    "start": "1124000",
    "end": "1134000"
  },
  {
    "text": "recitation on Friday.\nSo, let me tell you that instead.\nI'm going to leave that board",
    "start": "1134000",
    "end": "1142000"
  },
  {
    "start": "1140000",
    "end": "1420000"
  },
  {
    "text": "blank and go over here. ",
    "start": "1142000",
    "end": "1170000"
  },
  {
    "text": "So, the first thing I'm going\nto do, I'm going to manipulate",
    "start": "1170000",
    "end": "1176000"
  },
  {
    "text": "this tree until it looks like\nsomething that I know. The main change I'm going to\nmake is to merge each red node",
    "start": "1176000",
    "end": "1188000"
  },
  {
    "text": "into its parent.\nAnd we know that the parent of a red node must be black.\nSo, merge each red node into",
    "start": "1188000",
    "end": "1199000"
  },
  {
    "text": "its black parent.\nSo, let's look at that here. So, I'm going to take this red\nnode, merge it into its parent,",
    "start": "1199000",
    "end": "1208000"
  },
  {
    "text": "take this red node,\nmerge it into its path, and so on.\nThere's one up there which I",
    "start": "1208000",
    "end": "1214000"
  },
  {
    "text": "can't reach.\nBut I'm going to redraw this picture now.\nSo, seven, so the top node now",
    "start": "1214000",
    "end": "1221000"
  },
  {
    "text": "becomes, in some sense,\nseven and 18. They got merged together,\nbut no one else joined them.",
    "start": "1221000",
    "end": "1229000"
  },
  {
    "text": "Then, on the left,\nwe have three. OK, nothing joined that,\nand there's some leaves as",
    "start": "1229000",
    "end": "1235000"
  },
  {
    "text": "usual.\nNow, if you look at, maybe, I'm going to have to\ndraw this. Uh-oh.\nI heard that sound before.",
    "start": "1235000",
    "end": "1243000"
  },
  {
    "text": "So, I'm merging these nodes\ntogether, and I'm merging all of these nodes together because\neach of these red nodes merges",
    "start": "1243000",
    "end": "1252000"
  },
  {
    "text": "into that black node.\nAnd, I'm merging these two nodes together.\nSo, I'm putting this red node",
    "start": "1252000",
    "end": "1259000"
  },
  {
    "text": "into that black node.\nSo, now you can see from the",
    "start": "1259000",
    "end": "1266000"
  },
  {
    "text": "root, which is now 7/18.\nThere are three children",
    "start": "1266000",
    "end": "1272000"
  },
  {
    "text": "hanging off.\nSo, in that picture, I'd like to draw that fact\nassuming I can get this board",
    "start": "1272000",
    "end": "1283000"
  },
  {
    "text": "back down.\nGood. So, between seven and 18,\nI have this conglomerate node,",
    "start": "1283000",
    "end": "1291000"
  },
  {
    "text": "eight, ten, 11.\nAnd, there are four leaves",
    "start": "1291000",
    "end": "1297000"
  },
  {
    "text": "hanging off of that node.\nAnd, off to the right, after 18, I have a conglomerate\nnode, 22/26, and there are three",
    "start": "1297000",
    "end": "1309000"
  },
  {
    "text": "leaves hanging off of there.\nOK, kind of a weird tree because we dealt mainly with\nbinary trees so far,",
    "start": "1309000",
    "end": "1320000"
  },
  {
    "text": "but this is a foreshadowing of\nwhat will come on Friday. This is something called a\ntwo-three-four tree.",
    "start": "1320000",
    "end": "1332000"
  },
  {
    "text": "Any guesses why it's called a\ntwo-three-four tree? Every node can have two,\nthree, or four kids,",
    "start": "1332000",
    "end": "1340000"
  },
  {
    "text": "yeah, except the leaves.\nThey have zero. There is another nice property\nof two-three-four trees maybe",
    "start": "1340000",
    "end": "1349000"
  },
  {
    "text": "hinted at.\nSo, there's really no control over whether you have two\nchildren or three children or",
    "start": "1349000",
    "end": "1359000"
  },
  {
    "text": "four children.\nBut, there is another nice property.\nYeah?",
    "start": "1359000",
    "end": "1365000"
  },
  {
    "text": "All of the leaves have the same\ndepth, exactly. All of these guys have the same\ndepth in the tree.",
    "start": "1365000",
    "end": "1374000"
  },
  {
    "text": "Why is that?\nBecause of property four.",
    "start": "1374000",
    "end": "1380000"
  },
  {
    "text": "On Friday, you will see just\nhow to maintain that property. But out of this transformation,\nwe get that all the leaves have",
    "start": "1380000",
    "end": "1387000"
  },
  {
    "text": "the same depth:\nbecause their depth, now, or let's say their height\nin the tree is their black height.\nAnd, the depth of these leaves",
    "start": "1387000",
    "end": "1395000"
  },
  {
    "text": "will be the black height of the\nroot. We are you raising all the red\nnodes, and we said if we look at a path, and we ignore all the\nred nodes, then the number of",
    "start": "1395000",
    "end": "1404000"
  },
  {
    "text": "black nodes along a path is the\nsame. Now we are basically just\nleaving all the black nodes.",
    "start": "1404000",
    "end": "1411000"
  },
  {
    "text": "And so, along all these paths\nwe'll have the same number of",
    "start": "1411000",
    "end": "1419000"
  },
  {
    "text": "black nodes.\nAnd therefore, every leaf will have the same\ndepth.",
    "start": "1419000",
    "end": "1429000"
  },
  {
    "start": "1420000",
    "end": "1680000"
  },
  {
    "text": "Let me write down some of these\nproperties.",
    "start": "1429000",
    "end": "1435000"
  },
  {
    "text": "So, every internal node has\nbetween two and four children.",
    "start": "1435000",
    "end": "1444000"
  },
  {
    "text": "And every leaf has the same\ndepth, namely,",
    "start": "1444000",
    "end": "1450000"
  },
  {
    "text": "the black height of the root.",
    "start": "1450000",
    "end": "1457000"
  },
  {
    "start": "1457000",
    "end": "1468000"
  },
  {
    "text": "This is by property four.\nOK, so this is telling us a lot.\nSo, essentially what this",
    "start": "1468000",
    "end": "1474000"
  },
  {
    "text": "transformation is doing is\nignoring the red nodes. Then, if you just focus on the\nblack nodes, height equals black",
    "start": "1474000",
    "end": "1482000"
  },
  {
    "text": "height.\nAnd then, black height is telling us that all the root to\nleaf paths have the same length.",
    "start": "1482000",
    "end": "1489000"
  },
  {
    "text": "Therefore, all these nodes are\nat the same level. Having leaves at the same level\nas a good thing because it means",
    "start": "1489000",
    "end": "1497000"
  },
  {
    "text": "that your tree is pretty much\nbalanced. If you have a tree where all\nthe nodes are branching,",
    "start": "1497000",
    "end": "1505000"
  },
  {
    "text": "so, they'll have at least two\nchildren, and all the leaves are at the same level,\nthat's pretty balanced.",
    "start": "1505000",
    "end": "1513000"
  },
  {
    "text": "OK, we will prove some form of\nthat now. I'm going to call the height of\nthis tree h prime.",
    "start": "1513000",
    "end": "1519000"
  },
  {
    "text": "The height of the original tree\nis h. That's what we want to bound\nhere. So, the first thing is to bound\nh prime.",
    "start": "1519000",
    "end": "1527000"
  },
  {
    "text": "And then we want to relate h\nand h prime. OK, so the first question is\nhow many leaves are there in",
    "start": "1527000",
    "end": "1536000"
  },
  {
    "text": "this tree?\nAnd, it doesn't really matter which tree I'm looking at\nbecause I didn't really do",
    "start": "1536000",
    "end": "1543000"
  },
  {
    "text": "anything to the leaves.\nAll the leaves are black. So the leaves didn't change.\nHow many leaves are there in",
    "start": "1543000",
    "end": "1551000"
  },
  {
    "text": "this tree, and then therefore,\nindustry? Sorry?\nNine. Indeed, there are nine,\nbut I meant in general,",
    "start": "1551000",
    "end": "1558000"
  },
  {
    "text": "sorry.\nIn this example there are nine. How many keys are there?\nEight.",
    "start": "1558000",
    "end": "1567000"
  },
  {
    "text": "So, in general,\nhow do you write nine as a function of eight for large\nvalues of nine or eight?",
    "start": "1567000",
    "end": "1578000"
  },
  {
    "text": "Sorry?\nPlus one, good, correct answer,\nby guessing.",
    "start": "1578000",
    "end": "1584000"
  },
  {
    "text": "n plus one.\nOK, why is it n plus one?",
    "start": "1584000",
    "end": "1590000"
  },
  {
    "text": "Let's look at the binary tree\ncase where we sort of understand what's going on?\nWell, wherever you have a key,",
    "start": "1590000",
    "end": "1597000"
  },
  {
    "text": "there are two branches.\nAnd, that's not a very good argument.\nOK, we have what is here called",
    "start": "1597000",
    "end": "1603000"
  },
  {
    "text": "a branching binary tree.\nEvery internal node has exactly two children.\nAnd, we are counting the number",
    "start": "1603000",
    "end": "1610000"
  },
  {
    "text": "of leaves that you get from that\nprocess in terms of the number of internal nodes.\nThe number of leaves in a tree,",
    "start": "1610000",
    "end": "1618000"
  },
  {
    "text": "or a branching tree,\nas always one plus the number of internal nodes.\nYou should know that.",
    "start": "1618000",
    "end": "1625000"
  },
  {
    "text": "You can prove it by induction.\nOK, so the number of leaves is n plus one.\nIt doesn't hold if you have a",
    "start": "1625000",
    "end": "1634000"
  },
  {
    "text": "single child.\nIt holds if every internal node has a branching factor of two.\nOK, this is a neither tree.",
    "start": "1634000",
    "end": "1642000"
  },
  {
    "text": "And now, we want to pull out\nsome relation between the number of leaves and the height of the\ntree.",
    "start": "1642000",
    "end": "1652000"
  },
  {
    "text": "So, what's a good relation to\nuse here? We know exactly how many leaves\nthere are.",
    "start": "1652000",
    "end": "1658000"
  },
  {
    "text": "That will somehow connect us to\nn. What we care about is the\nheight. And let's look at the height of\nthis tree.",
    "start": "1658000",
    "end": "1666000"
  },
  {
    "text": "So, if I have a two-three-four\ntree of height h prime, how many leaves could it have?\nWhat's the minimum and maximum",
    "start": "1666000",
    "end": "1675000"
  },
  {
    "text": "number of leaves it could have?\n2^h to 4^h, or h prime.",
    "start": "1675000",
    "end": "1681000"
  },
  {
    "start": "1680000",
    "end": "1815000"
  },
  {
    "text": "So, we also know in the\ntwo-three-four tree, the number of leaves has to be\nbetween four to the h prime,",
    "start": "1681000",
    "end": "1690000"
  },
  {
    "text": "because at most I could branch\nfour ways in each node. And, it's at least two to the h\nprime because I know that every",
    "start": "1690000",
    "end": "1701000"
  },
  {
    "text": "node branches at least two ways.\nThat's key. So, I only care about one of\nthese, I think this one.",
    "start": "1701000",
    "end": "1711000"
  },
  {
    "text": "So, I get that two to the h\nprime is, at most, n plus one.\nSo the number of leaves is n",
    "start": "1711000",
    "end": "1717000"
  },
  {
    "text": "plus one.\nWe know that exactly. So, we rewrite,\nwe take logs of both sides. It says h one is at most log of\nn plus one.",
    "start": "1717000",
    "end": "1725000"
  },
  {
    "text": "So, we have a nice,\nbalanced tree. This should be intuitive.\nIf I had every node branching",
    "start": "1725000",
    "end": "1731000"
  },
  {
    "text": "two ways, and all the leaves at\nthe same level, that's a perfect tree.\nIt should be exactly log base",
    "start": "1731000",
    "end": "1738000"
  },
  {
    "text": "two of n plus one,\nand turns out not quite n. That should be the height of\nthe tree.",
    "start": "1738000",
    "end": "1745000"
  },
  {
    "text": "Here, I might have even more\nbranching, which is making things even shallower in some\nsense. So, I get more leaves out of\nthe same height.",
    "start": "1745000",
    "end": "1753000"
  },
  {
    "text": "But that's only better for me.\nThat will only decrease the height in terms of the number of\nleaves.",
    "start": "1753000",
    "end": "1759000"
  },
  {
    "text": "n plus one here is the number\nof leaves. So: cool.\nThat's an easy upper bound on the height of the tree.\nNow, what we really care about",
    "start": "1759000",
    "end": "1767000"
  },
  {
    "text": "is the height of this tree.\nSo, we want to relate h and h prime.\nAny suggestions on how we might",
    "start": "1767000",
    "end": "1774000"
  },
  {
    "text": "do that?\nHow do we know that the height of this reduced tree is not too\nmuch smaller than this one.",
    "start": "1774000",
    "end": "1781000"
  },
  {
    "text": "We know that this one is,\nat most, log n. We want this to be,\nat most, two log n plus one.",
    "start": "1781000",
    "end": "1787000"
  },
  {
    "text": "We know the answer.\nWe've said the theorem. Sorry?\nRight. So, property three tells us\nthat we can only have one red",
    "start": "1787000",
    "end": "1795000"
  },
  {
    "text": "node for every black one.\nWe can, at most, alternate red and black.\nSo, if we look at one of these",
    "start": "1795000",
    "end": "1804000"
  },
  {
    "text": "paths that goes from a root to a\nleaf, the number of red nodes can be, at most,\nhalf the length of the path.",
    "start": "1804000",
    "end": "1813000"
  },
  {
    "text": "And we take the max overall\npaths, that's the height of the tree.\nSo, we know that h is,",
    "start": "1813000",
    "end": "1821000"
  },
  {
    "text": "at most, two times h prime,\nor maybe it's easier to think of h prime is at least a half,\nh.",
    "start": "1821000",
    "end": "1828000"
  },
  {
    "text": "Assuming I got that right,\nbecause at most a half of the nodes on any root to leaf path\n--",
    "start": "1828000",
    "end": "1838000"
  },
  {
    "start": "1838000",
    "end": "1848000"
  },
  {
    "text": "-- are red.\nSo, at least half of them have to be black.\nAnd, all-black nodes are",
    "start": "1848000",
    "end": "1856000"
  },
  {
    "text": "captured in this picture so we\nhave this relation, and therefore,\nh is, at most,",
    "start": "1856000",
    "end": "1864000"
  },
  {
    "text": "two times log n plus one.\nOK: pretty easy. But you have to remember,\nthis tree has to be balanced,",
    "start": "1864000",
    "end": "1872000"
  },
  {
    "text": "and they are not too far away\nfrom each other. OK, so in Friday's recitation,\nyou will see how to manipulate",
    "start": "1872000",
    "end": "1878000"
  },
  {
    "text": "trees with this form.\nThere is a cool way to do it. That's two-three-four trees.\nToday, we're going to see how",
    "start": "1878000",
    "end": "1885000"
  },
  {
    "text": "to manipulate trees in this form\nas red black trees. And, you'll see today's\nlecture, and you'll see Friday's",
    "start": "1885000",
    "end": "1891000"
  },
  {
    "text": "recitation, and they won't\nreally seem to relate at all. But they're the same,\njust a bit hidden.",
    "start": "1891000",
    "end": "1900000"
  },
  {
    "start": "1895000",
    "end": "2110000"
  },
  {
    "text": "OK, so this is good news.\nWe now know that all red black",
    "start": "1900000",
    "end": "1907000"
  },
  {
    "text": "trees are balanced.\nSo as long as we can make sure",
    "start": "1907000",
    "end": "1913000"
  },
  {
    "text": "that our tree stays a red black\ntree, we'll be OK.",
    "start": "1913000",
    "end": "1920000"
  },
  {
    "text": "We'll be OK in the sense that\nthe height is always log n. And therefore,\nqueries in a red black tree,",
    "start": "1920000",
    "end": "1930000"
  },
  {
    "text": "so queries are things like\nsearch, find a given key, find the minimum,\nfind the maximum,",
    "start": "1930000",
    "end": "1938000"
  },
  {
    "text": "find a successor,\nfind a predecessor. These are all queries that we\nknow how to support in a binary",
    "start": "1938000",
    "end": "1948000"
  },
  {
    "text": "search tree.\nAnd we know how to do them in",
    "start": "1948000",
    "end": "1955000"
  },
  {
    "text": "order height time.\nAnd the height here is log n so",
    "start": "1955000",
    "end": "1964000"
  },
  {
    "text": "we know that all of these\noperations take order log n in a",
    "start": "1964000",
    "end": "1973000"
  },
  {
    "text": "red black tree.\nOK -- ",
    "start": "1973000",
    "end": "1993000"
  },
  {
    "text": "So, queries are easy.\nWe are done with queries, just from balance:\nnot a surprise.",
    "start": "1993000",
    "end": "2002000"
  },
  {
    "text": "We know that balances is good.\nThe hard part for us will be to",
    "start": "2002000",
    "end": "2009000"
  },
  {
    "text": "do updates.\nAnd in this context, updates means insert and\ndelete.",
    "start": "2009000",
    "end": "2015000"
  },
  {
    "text": "In general, and a data\nstructure, we talk about queries which ask questions about the\ndata in the structure,",
    "start": "2015000",
    "end": "2022000"
  },
  {
    "text": "and updates which modify the\ndata in the structure. And most of the time here,\nwe are always thinking about",
    "start": "2022000",
    "end": "2028000"
  },
  {
    "text": "dynamic sets.\nSo, you can change the dynamics set by adding or deleting an\nelement. You can ask all sorts of\nquestions.",
    "start": "2028000",
    "end": "2035000"
  },
  {
    "text": "In priority queues,\nthere were other updates like delete Min.\nHere we have find Min,",
    "start": "2035000",
    "end": "2042000"
  },
  {
    "text": "but we could then delete it.\nTypically these are the operations we care about.\nAnd we'll talk about updates to",
    "start": "2042000",
    "end": "2049000"
  },
  {
    "text": "include those of these,\nand queries to include all of these, or whatever happens to be\nrelevant.",
    "start": "2049000",
    "end": "2055000"
  },
  {
    "text": "In problem sets especially,\nyou'll see all sorts of different queries that you can\nsupport.",
    "start": "2055000",
    "end": "2061000"
  },
  {
    "text": "OK, so how do we support\nupdates? Well, we have binary search\ntree insert, which we call tree",
    "start": "2061000",
    "end": "2067000"
  },
  {
    "text": "insert.\nWe have binary search tree delete, tree delete.\nThey will preserve the binary",
    "start": "2067000",
    "end": "2073000"
  },
  {
    "text": "search tree property,\nbut we know they don't necessarily preserve balance.\nWe can insert a bunch of nodes.",
    "start": "2073000",
    "end": "2079000"
  },
  {
    "text": "Just keep adding new minimum\nelements and you will get a really long path off the end.\nSo, presumably,",
    "start": "2079000",
    "end": "2085000"
  },
  {
    "text": "they do not preserve the red\nblack properties because we know red black implies balance.\nIn particular,",
    "start": "2085000",
    "end": "2091000"
  },
  {
    "text": "they won't satisfy property\none, which I've erased, which is every node is red or\nblack. It'll add a node,\nand not assign it a color.",
    "start": "2091000",
    "end": "2099000"
  },
  {
    "text": "So, we've got to assign it a\ncolor. And, as soon as we do that,\nwe'll probably violate some other property.\nAnd then we have to fix that",
    "start": "2099000",
    "end": "2106000"
  },
  {
    "text": "property, and so on.\nSo, it's a bit tricky, but you play around with it and\nit's not too hard.",
    "start": "2106000",
    "end": "2114000"
  },
  {
    "text": "OK, so updates must modify the\ntree. And to preserve the red black\nproperties, they're going to do",
    "start": "2114000",
    "end": "2127000"
  },
  {
    "text": "it in three different kinds of\nmodifications.",
    "start": "2127000",
    "end": "2134000"
  },
  {
    "text": "The first thing we will indeed\ndo is just use the BST operation, tree insert or tree\ndelete.",
    "start": "2134000",
    "end": "2140000"
  },
  {
    "text": "That's something we know how to\ndo. Let's just do it.\nWe are going to have to change the colors of some of the nodes.\nIn particular,",
    "start": "2140000",
    "end": "2148000"
  },
  {
    "text": "the one that we insert better\nbe colored somehow. And in general,\nif we just rip out a node,",
    "start": "2148000",
    "end": "2154000"
  },
  {
    "text": "we are going to have to recolor\nit, recolor some nearby nodes.",
    "start": "2154000",
    "end": "2160000"
  },
  {
    "text": "There is one other kind of\noperation we're going to do. So, recoloring just means set\nto red or black.",
    "start": "2160000",
    "end": "2166000"
  },
  {
    "text": "The other thing you might do is\nrearrange the tree, change the pointers,\nchange the links from one node",
    "start": "2166000",
    "end": "2172000"
  },
  {
    "text": "to another.\nAnd, we're going to do that at the very structured way.\nAnd, this is one of the main",
    "start": "2172000",
    "end": "2178000"
  },
  {
    "text": "reasons that red black trees are\ninteresting. The kinds of changes they make\nare very simple,",
    "start": "2178000",
    "end": "2184000"
  },
  {
    "text": "and they also don't make very\nmany of them. So, they're called rotations.\nSo, here's a rotation.",
    "start": "2184000",
    "end": "2192000"
  },
  {
    "start": "2192000",
    "end": "2206000"
  },
  {
    "text": "OK, this is a way of drawing a\ngeneric part of a tree. We have two nodes,\nA and B. There is some subtrees hanging\noff, which we draw as triangles.",
    "start": "2206000",
    "end": "2213000"
  },
  {
    "text": "We don't know how big they are.\nWe know they better all have the same black height if it's a\nred black tree.",
    "start": "2213000",
    "end": "2220000"
  },
  {
    "text": "But in general,\nit just looks like this. There is some parent,\nand there's some rest of the",
    "start": "2220000",
    "end": "2226000"
  },
  {
    "text": "tree out here which we don't\ndraw. I'll give these subtrees names,\nGreek names,",
    "start": "2226000",
    "end": "2232000"
  },
  {
    "text": "alpha, beta,\ngamma. And, I'll define the operation\nright rotate of B. So general, if I have a node,\nB, I look at it and I want to",
    "start": "2232000",
    "end": "2241000"
  },
  {
    "text": "do it right rotation,\nI look at its left child enjoy this picture called the subtrees\nof those two nodes.",
    "start": "2241000",
    "end": "2250000"
  },
  {
    "text": "And, I create this tree. ",
    "start": "2250000",
    "end": "2265000"
  },
  {
    "text": "So, all I've done is turn this\nedge 90∞. What was the parent of B is now\nthe parent of A.",
    "start": "2265000",
    "end": "2271000"
  },
  {
    "text": "A is now the new parent of B.\nThe subtrees rearrange. Before, they were both subtrees\nof, these two were subtrees of",
    "start": "2271000",
    "end": "2279000"
  },
  {
    "text": "A.\nAnd, gamma was a subtree of B. Gamma is still a subtree of B,\nand alpha still is a subtree of",
    "start": "2279000",
    "end": "2286000"
  },
  {
    "text": "A.\nBut, beta switched to being a subtree of B.\nOK, the main thing we want to check here is that this\noperation preserves the binary",
    "start": "2286000",
    "end": "2295000"
  },
  {
    "text": "search tree property.\nRemember, the binary search tree property says that all the\nelements in the left subtree of",
    "start": "2295000",
    "end": "2303000"
  },
  {
    "text": "a node are less than or equal to\nthe node, and all the elements in the right subtree are greater\nthan or equal to that value.",
    "start": "2303000",
    "end": "2314000"
  },
  {
    "text": "So, in particular,\nif we take some node, little a in alpha,\nlittle b in beta,",
    "start": "2314000",
    "end": "2320000"
  },
  {
    "text": "and little c in gamma,\nthen a is less than or equal to capital A, is less than or equal\nto little b, is less than or",
    "start": "2320000",
    "end": "2330000"
  },
  {
    "text": "equal to capital B,\nis less than or equal to little c.\nAnd, this is the condition both",
    "start": "2330000",
    "end": "2337000"
  },
  {
    "text": "on the left side and on the\nright side because Alpha is left",
    "start": "2337000",
    "end": "2343000"
  },
  {
    "text": "of everything.\nBeta is in between A and B, and gamma is after B.\nAnd the same thing is true over",
    "start": "2343000",
    "end": "2351000"
  },
  {
    "text": "here.\nBeta is still, it's supposed to be all the\nnodes that come between capital A and capital B.\nSo, this is good.",
    "start": "2351000",
    "end": "2357000"
  },
  {
    "text": "We could definitely do this\noperation, still have the binary search tree, and we are going to\nuse rotations in a particularly",
    "start": "2357000",
    "end": "2363000"
  },
  {
    "text": "careful way to make sure that we\nmaintain all these properties. That's the hard part.\nBut, rotations will be our key.",
    "start": "2363000",
    "end": "2370000"
  },
  {
    "text": "This was the right rotate\noperation. The reverse operation is left\nrotate. So, this is left rotate of A.\nIn general, of the two nodes",
    "start": "2370000",
    "end": "2380000"
  },
  {
    "text": "that are involved,\nwe list the top one. So, its right rotate of B will\ngive you this.",
    "start": "2380000",
    "end": "2387000"
  },
  {
    "text": "Left rotate of A will give you\nthis. So, these are reversible\noperations, which feels good.",
    "start": "2387000",
    "end": "2394000"
  },
  {
    "text": "The other thing is that they\nonly take constant time operations because we are only\nchanging a constant number of",
    "start": "2394000",
    "end": "2403000"
  },
  {
    "text": "pointers.\nAs long as you know the node, B, that you are interested in,\nyou set the left pointer of B",
    "start": "2403000",
    "end": "2411000"
  },
  {
    "text": "to be, if you want it to be\nbeta, so you set left of B to be right of A, and so on,\nand so on. You make constant number of\nthose changes.",
    "start": "2411000",
    "end": "2418000"
  },
  {
    "text": "You update the parents as well.\nIt's only a constant number of links that are changing,\nso, a constant number of",
    "start": "2418000",
    "end": "2425000"
  },
  {
    "text": "assignments you need to do.\nSo, you've probably seen rotations before.\nBut we are going to use them in",
    "start": "2425000",
    "end": "2437000"
  },
  {
    "start": "2430000",
    "end": "2595000"
  },
  {
    "text": "a complicated way.\nSo, let's look at how to do",
    "start": "2437000",
    "end": "2447000"
  },
  {
    "text": "insertion.\nWe'll see it three times in",
    "start": "2447000",
    "end": "2456000"
  },
  {
    "text": "some sense.\nFirst, I'll tell you the basic",
    "start": "2456000",
    "end": "2462000"
  },
  {
    "text": "idea, which is pretty simple.\nI mentioned some of it already. Then, we'll do it on an\nexample, feel it in our bones,",
    "start": "2462000",
    "end": "2471000"
  },
  {
    "text": "and then we'll give the\npseudocode so that you could go home and implement it if you\nwanted.",
    "start": "2471000",
    "end": "2478000"
  },
  {
    "text": "OK, this is,\nI should say, red black insert,\nwhich in the book is called RB",
    "start": "2478000",
    "end": "2484000"
  },
  {
    "text": "insert, not for root beer,\nbut for red black. OK, so the first thing we're\ngoing to do, as I said,",
    "start": "2484000",
    "end": "2492000"
  },
  {
    "text": "is binary search tree,\ninsert that node. So, x now becomes a new leaf.\nWe searched for x wherever it's",
    "start": "2492000",
    "end": "2499000"
  },
  {
    "text": "supposed to go.\nWe create, I shouldn't call it a leaf now.\nIt's now at node hanging off.",
    "start": "2499000",
    "end": "2505000"
  },
  {
    "text": "It's an internal node hanging\noff one of the original nodes. Maybe we added it right here.\nIt now gets two new leaves",
    "start": "2505000",
    "end": "2513000"
  },
  {
    "text": "hanging off of it.\nIt has no internal children. And, we get to pick a color for\nit.",
    "start": "2513000",
    "end": "2519000"
  },
  {
    "text": "And, we will pick the color\nred. OK, why red?\nWe definitely have to pick one",
    "start": "2519000",
    "end": "2526000"
  },
  {
    "text": "of two colors.\nWe could flip a coin. That might work,\nbut it's going to make our job even messier.\nSo, we are adding a new node.",
    "start": "2526000",
    "end": "2535000"
  },
  {
    "text": "It's not a root or a leaf\npresumably, so we don't really need it to be black by property\ntwo.",
    "start": "2535000",
    "end": "2541000"
  },
  {
    "text": "Property three,\nevery red node has a black parent.\nThat might be a problem. So, the problem is if its\nparent is red.",
    "start": "2541000",
    "end": "2551000"
  },
  {
    "text": "Then we violate property two.\nThe parent might be red, property three,\nsorry.",
    "start": "2551000",
    "end": "2557000"
  },
  {
    "text": "OK, the good news is that\nproperty four is still true because property four is just\ncounting numbers of black nodes",
    "start": "2557000",
    "end": "2567000"
  },
  {
    "text": "down various paths.\nThat's really the hard property to maintain.\nIf we just add a new red node,",
    "start": "2567000",
    "end": "2575000"
  },
  {
    "text": "none of the black heights\nchange. None of the number of black\nnodes along the path changes.",
    "start": "2575000",
    "end": "2585000"
  },
  {
    "text": "So, this still has to hold.\nThe only thing we can violate",
    "start": "2585000",
    "end": "2591000"
  },
  {
    "text": "is property three.\nThat's reasonable. We know we've got to violate\nsomething at the beginning.",
    "start": "2591000",
    "end": "2600000"
  },
  {
    "start": "2595000",
    "end": "2670000"
  },
  {
    "text": "We can't just do a binary\nsearch tree insert. OK, so, let's give it a try on\nthis tree.",
    "start": "2600000",
    "end": "2610000"
  },
  {
    "text": "I should say how we are going\nto fix this. How do we fix property three?\nWe are going to move the",
    "start": "2610000",
    "end": "2620000"
  },
  {
    "text": "violation of three up the tree.\nSo, we're going to start at",
    "start": "2620000",
    "end": "2627000"
  },
  {
    "text": "node x, and move up towards the\nroot. This is via recoloring.\nThe only thing,",
    "start": "2627000",
    "end": "2635000"
  },
  {
    "text": "initially, we'll do is\nrecoloring until we get to some",
    "start": "2635000",
    "end": "2641000"
  },
  {
    "text": "point where we can fix the\nviolation using a rotation --",
    "start": "2641000",
    "end": "2649000"
  },
  {
    "start": "2649000",
    "end": "2660000"
  },
  {
    "text": "-- and probably also\nrecoloring. OK, so let's see this algorithm\nin action.",
    "start": "2660000",
    "end": "2672000"
  },
  {
    "start": "2670000",
    "end": "2855000"
  },
  {
    "text": "I want to copy this tree,\nand you are going to have to",
    "start": "2672000",
    "end": "2681000"
  },
  {
    "text": "copy it, too.\nSo, I'll just redraw it instead",
    "start": "2681000",
    "end": "2689000"
  },
  {
    "text": "of modifying that diagram.\nSo, we have this nice red black",
    "start": "2689000",
    "end": "2699000"
  },
  {
    "text": "tree.\nAnd, we'll try inserting a new",
    "start": "2699000",
    "end": "2705000"
  },
  {
    "text": "value of 15.\n22 black. 22 is the new black.\nOK, that should be the same",
    "start": "2705000",
    "end": "2716000"
  },
  {
    "text": "tree.\nSo now, I'm choosing the number 15 to insert,\nbecause that will show a fairly",
    "start": "2716000",
    "end": "2726000"
  },
  {
    "text": "interesting insertion.\nSometimes, the insertion",
    "start": "2726000",
    "end": "2732000"
  },
  {
    "text": "doesn't take very much work.\nWe just do the rotation and we're done.\nI just like to look at an",
    "start": "2732000",
    "end": "2739000"
  },
  {
    "text": "interesting case.\nSo, we insert 15. 15 is bigger than seven.\nIt's less than 18.",
    "start": "2739000",
    "end": "2745000"
  },
  {
    "text": "It's bigger than ten.\nIt's bigger than 11. So, 15 goes here.\nSo, we add a new red node of\n652\n00:45:53,000 --> 00:00:15,000 And, it has two black leaves",
    "start": "2745000",
    "end": "2755000"
  },
  {
    "text": "hanging off of it,\nreplaced one black leaf. Now we have two.\nOK, now, we violate property",
    "start": "2755000",
    "end": "2762000"
  },
  {
    "text": "three because we added a new red\nchild of a red node.",
    "start": "2762000",
    "end": "2769000"
  },
  {
    "text": "So, now we have two consecutive\nred nodes in a root to leaf path.\nWe'd like to make this black,",
    "start": "2769000",
    "end": "2776000"
  },
  {
    "text": "but that would screw up the\nblack heights because now this node would have one black node\nover here, and two black nodes",
    "start": "2776000",
    "end": "2785000"
  },
  {
    "text": "down this path.\nSo, that's not good. What can we do?\nWell, let's try to re-color.",
    "start": "2785000",
    "end": "2792000"
  },
  {
    "text": "Yes.\nThis always takes a little while to remember.\nSo, our fix is going to be to recolor.\nAnd, the first thing that",
    "start": "2792000",
    "end": "2800000"
  },
  {
    "text": "struck me, which doesn't work,\nis we try to recolor around here.\nIt doesn't look so good because",
    "start": "2800000",
    "end": "2806000"
  },
  {
    "text": "we've got red stuff out here,\nbut we've got a black node over here.\nSo we can't make this one red,",
    "start": "2806000",
    "end": "2813000"
  },
  {
    "text": "and this one black.\nIt wouldn't quite work. If we look up a little higher\nat the grandparent of 15 up",
    "start": "2813000",
    "end": "2820000"
  },
  {
    "text": "here, we have a black node here\nand two red children.",
    "start": "2820000",
    "end": "2826000"
  },
  {
    "text": "That's actually pretty good\nnews because we could, instead, make that two black\nchildren and a red parent.",
    "start": "2826000",
    "end": "2832000"
  },
  {
    "text": "Locally, that's going to be\nfine. It's not going to change any\nblack heights because any path that went through these nodes\nbefore will still go through the",
    "start": "2832000",
    "end": "2841000"
  },
  {
    "text": "same number of black nodes.\nInstead of going through a black node always here,\nit will go through a black node",
    "start": "2841000",
    "end": "2847000"
  },
  {
    "text": "either here or here because\npaths always go down to the leaves.\nSo, that's what we're going to",
    "start": "2847000",
    "end": "2854000"
  },
  {
    "text": "do, recolor these guys.\nAnd, we will get ten, which is red.\nWe'll get eight,",
    "start": "2854000",
    "end": "2860000"
  },
  {
    "start": "2855000",
    "end": "2970000"
  },
  {
    "text": "which is black,\n11 which is black, and these things don't change.\nEverything else doesn't change.",
    "start": "2860000",
    "end": "2868000"
  },
  {
    "text": "We are going to leave 15 red.\nIt's no longer in violation. 15 is great because now its\nparent is black.",
    "start": "2868000",
    "end": "2877000"
  },
  {
    "text": "We now have a new violation up\nhere with 18 because 18 is also red.\nThat's the only violation we",
    "start": "2877000",
    "end": "2887000"
  },
  {
    "text": "have.\nIn general, we'll have, at most, one violation at any\ntime until we fix it.",
    "start": "2887000",
    "end": "2897000"
  },
  {
    "text": "Then we'll have zero\nviolations. OK, so, now we have a violation\nbetween ten and 18:",
    "start": "2897000",
    "end": "2907000"
  },
  {
    "text": "somehow always counterintuitive\nto me.",
    "start": "2907000",
    "end": "2913000"
  },
  {
    "text": "I had to look at the cheat\nsheet again. Really?\nNo, OK, good. I was going to say,\nwe can't recolor anymore.",
    "start": "2913000",
    "end": "2920000"
  },
  {
    "text": "Good.\nI'm not that bad. So, what we'd like to do is,\nagain, look at the grandparent of ten, which is now seven,\nthe root of the tree.",
    "start": "2920000",
    "end": "2929000"
  },
  {
    "text": "It is black,\nbut one of its children is black.\nThe other is red. So, we can't play the same game\nof taking the blackness of",
    "start": "2929000",
    "end": "2937000"
  },
  {
    "text": "seven, and moving it down to the\ntwo children. Never mind that the root is\nsupposed to stay black.",
    "start": "2937000",
    "end": "2944000"
  },
  {
    "text": "We'll ignore that property for\nnow. We can't make these two black\nand make this one red, because then we'd get an\nimbalance.",
    "start": "2944000",
    "end": "2951000"
  },
  {
    "text": "This was already black.\nSo now, paths going down here will have one fewer black node\nthan paths going out here.",
    "start": "2951000",
    "end": "2957000"
  },
  {
    "text": "So, we can't just recolor seven\nand its children. So, instead,\nwe've got to do a rotation. We'd better be near the end.\nSo, what I will do is rotate",
    "start": "2957000",
    "end": "2966000"
  },
  {
    "text": "this edge.\nI'm going to rotate eight to the right.\nSo that's the next operation:",
    "start": "2966000",
    "end": "2975000"
  },
  {
    "start": "2970000",
    "end": "3105000"
  },
  {
    "text": "rotate right of 18. ",
    "start": "2975000",
    "end": "3003000"
  },
  {
    "text": "We'll delete one more operation\nafter this. So, we rotate right 18.\nSo, the root stays the same:",
    "start": "3003000",
    "end": "3011000"
  },
  {
    "text": "seven, three,\nits children. Now, the right child of seven\nis no longer 18.",
    "start": "3011000",
    "end": "3018000"
  },
  {
    "text": "It's now ten.\n18 becomes the red child of ten.\nOK, we have eight over here",
    "start": "3018000",
    "end": "3025000"
  },
  {
    "text": "with its two children.\n11 and 15: that subtree fits in",
    "start": "3025000",
    "end": "3033000"
  },
  {
    "text": "between ten and 18.\nSo, it goes here: 11 and 15.\nAnd then, there's the right",
    "start": "3033000",
    "end": "3042000"
  },
  {
    "text": "subtree.\nEverything to the right of 18, that goes over here:\n22 and 26.",
    "start": "3042000",
    "end": "3051000"
  },
  {
    "text": "And hopefully I'm not changing\nany colors during that",
    "start": "3051000",
    "end": "3058000"
  },
  {
    "text": "operation.\nIf I did, let me know.",
    "start": "3058000",
    "end": "3064000"
  },
  {
    "text": "OK, it looks good.\nSo, I still have this violation, still in trouble\nbetween ten and 18. But, I've made this straighter.\nOK, that's what we want to do,",
    "start": "3064000",
    "end": "3072000"
  },
  {
    "text": "it turns out,\nis make the connection between 18, the violator,\nand its grandparent, a straight connection:\ntwo rights or two lefts.",
    "start": "3072000",
    "end": "3080000"
  },
  {
    "text": "Here we had to zigzag right,\nleft. We like to make it straight.\nOK, it doesn't look like a much more balanced tree that this\none.",
    "start": "3080000",
    "end": "3087000"
  },
  {
    "text": "In fact, it looks a little\nworse. What we can do is now rotate\nthese guys, or rather,",
    "start": "3087000",
    "end": "3096000"
  },
  {
    "text": "rotate this edge.\nI'm going to rotate seven to the left, make ten the root,\nand that things will start to",
    "start": "3096000",
    "end": "3106000"
  },
  {
    "text": "look balanced.\nThis is a rotate left of seven. And, I'm also going to do some\nrecoloring at the same time just",
    "start": "3106000",
    "end": "3117000"
  },
  {
    "text": "to save me drawing one more\npicture because the root has to be black.\nI'm going to make 10 black",
    "start": "3117000",
    "end": "3127000"
  },
  {
    "text": "immediately.\nI'll make seven red. That's the change.\nAnd that the rest is just a",
    "start": "3127000",
    "end": "3136000"
  },
  {
    "text": "rotation.\nSo, we have 18 over here. I think I actually have to\nrotate to keep some red",
    "start": "3136000",
    "end": "3145000"
  },
  {
    "text": "blackness here.\nEight comes between seven and",
    "start": "3145000",
    "end": "3151000"
  },
  {
    "text": "ten.\nSo it goes here. 11 goes between ten and 18,\nso it goes here.",
    "start": "3151000",
    "end": "3160000"
  },
  {
    "text": "22 and 26 come after 18.\nNow, if I'm lucky,",
    "start": "3160000",
    "end": "3166000"
  },
  {
    "text": "I should satisfy all of\nproperties that I want.",
    "start": "3166000",
    "end": "3172000"
  },
  {
    "text": "OK, now, if I'm lucky,\nI should satisfy all the",
    "start": "3172000",
    "end": "3178000"
  },
  {
    "text": "properties that I want.\nEvery node is red or black.",
    "start": "3178000",
    "end": "3184000"
  },
  {
    "text": "Every black node has a child.\nThis is the last place we change.\nRed nodes have black children,",
    "start": "3184000",
    "end": "3191000"
  },
  {
    "text": "and all the black heights\nshould be well defined. For every node,\nthe number of black nodes along",
    "start": "3191000",
    "end": "3198000"
  },
  {
    "text": "any node to leaf path is the\nsame. And you check,\nthat was true before, and I did a little bit of\ntrickery with the recoloring",
    "start": "3198000",
    "end": "3207000"
  },
  {
    "text": "here.\nBut it's still true. I mean, you can check that just\nlocally around this rotation.",
    "start": "3207000",
    "end": "3214000"
  },
  {
    "text": "OK, we'll do that in a little\nbit. For now, it's just an example.\nIt's probably not terribly",
    "start": "3214000",
    "end": "3220000"
  },
  {
    "text": "clear where these re-colorings\nand rotations come from necessarily, but it worked,\nand it at least convinces you",
    "start": "3220000",
    "end": "3228000"
  },
  {
    "text": "that it's possible.\nAnd now, we'll give a general algorithm for doing it.\nAny questions before we go on?",
    "start": "3228000",
    "end": "3235000"
  },
  {
    "text": "So, it's not exactly,\nI mean, just writing of the algorithm is not terribly\nintuitive.",
    "start": "3235000",
    "end": "3243000"
  },
  {
    "text": "Red black trees of the sort of\nthing where you play around a bit.\nYou say, OK, I'm going to just think about\nrecoloring and rotations.",
    "start": "3243000",
    "end": "3250000"
  },
  {
    "text": "Let's restrict myself to those\noperations. What could I do?\nWell, I'll try to recolor. If that works great,\nit pushes the problem up",
    "start": "3250000",
    "end": "3257000"
  },
  {
    "text": "higher.\nAnd, there's only log n levels, order log n levels,\nso that's going to take order log n time.\nAt some point,",
    "start": "3257000",
    "end": "3263000"
  },
  {
    "text": "I'll get stuck.\nI can't recolor anymore. Then it turns out,\na couple of rotations will do it.\nAlways, two rotations will",
    "start": "3263000",
    "end": "3272000"
  },
  {
    "text": "suffice.\nAnd you just play with it, and that turns out to work.\nAnd here's how.",
    "start": "3272000",
    "end": "3280000"
  },
  {
    "text": "OK, so let's suppose we have a\nred black tree. And value x,\nwe want to insert.",
    "start": "3280000",
    "end": "3288000"
  },
  {
    "text": "Here's the algorithm.\nFirst, we insert it into the BST.\nSo that we know.",
    "start": "3288000",
    "end": "3295000"
  },
  {
    "text": "Then, we color the node red.\nAnd here, I'm going to use a",
    "start": "3295000",
    "end": "3301000"
  },
  {
    "text": "slightly more precise notation.\nColor is a field of x.",
    "start": "3301000",
    "end": "3308000"
  },
  {
    "text": "And now, we are going to walk\nour way up the tree with a while",
    "start": "3308000",
    "end": "3314000"
  },
  {
    "text": "loop until we get to the root,\nor until we reach a black node.",
    "start": "3314000",
    "end": "3321000"
  },
  {
    "text": "So, in general,\nx initially is going to be the element that we inserted.\nBut, we're going to move x up",
    "start": "3321000",
    "end": "3332000"
  },
  {
    "text": "the tree.\nIf ever we find that x is a black node, we're happy because\nmaybe its parent is red.",
    "start": "3332000",
    "end": "3340000"
  },
  {
    "text": "Maybe it isn't.\nI don't care. Black nodes can have\narbitrarily colored parents. It's red nodes that we worry\nabout.",
    "start": "3340000",
    "end": "3348000"
  },
  {
    "text": "So, if x is red,\nwe have to keep doing this loop.\nOf course, I just wrote the",
    "start": "3348000",
    "end": "3354000"
  },
  {
    "text": "wrong one.\nWhile the color is red, we're going to keep doing this.\nSo, there are three cases,",
    "start": "3354000",
    "end": "3363000"
  },
  {
    "text": "or six, depending on how you\ncount. That's what makes this a little\nbit tricky to memorize.",
    "start": "3363000",
    "end": "3373000"
  },
  {
    "text": "OK, but there are some\nsymmetric situations. Let me draw them.\nWhat we care about,",
    "start": "3373000",
    "end": "3383000"
  },
  {
    "text": "I've argued,\nis between x and its grandparent.\nSo, I'm using p of x here to",
    "start": "3383000",
    "end": "3392000"
  },
  {
    "text": "denote parent of x just because\nit's shorter. So, p of x is x's grandparent.\nLeft of p of x is the left",
    "start": "3392000",
    "end": "3400000"
  },
  {
    "text": "child.\nSo, what I'm interested in is I look at x.\nAnd, if I don't assign any",
    "start": "3400000",
    "end": "3406000"
  },
  {
    "text": "directions, x is the child of\nsome p of x, and p of x is the child of the grandparent,\np of p of x.",
    "start": "3406000",
    "end": "3415000"
  },
  {
    "text": "Now, these edges aren't\nvertical. They are either left or right.\nAnd, I care about which one.",
    "start": "3415000",
    "end": "3422000"
  },
  {
    "text": "In particular,\nI'm looking at whether the parent is the left child of the\ngrandparent.",
    "start": "3422000",
    "end": "3429000"
  },
  {
    "text": "So, I want to know,\ndoes it look like this?",
    "start": "3429000",
    "end": "3435000"
  },
  {
    "text": "OK, and I don't know whether x\nis to the left or to the right of the parent.\nBut, is parent of x the left",
    "start": "3435000",
    "end": "3442000"
  },
  {
    "text": "child of p of x,\nor is it the right child? And these two cases are totally\nsymmetric.",
    "start": "3442000",
    "end": "3448000"
  },
  {
    "text": "But I need to assume it's one\nway or the other. Otherwise, I can't draw the\npictures.",
    "start": "3448000",
    "end": "3455000"
  },
  {
    "text": "OK, so this will be,\nlet's call it category A. And, this is category B.\nAnd, I'm going to tell you what",
    "start": "3455000",
    "end": "3464000"
  },
  {
    "text": "to do in category A.\nAnd category B is symmetric. You just flip left and right.\nOK, so this is A.",
    "start": "3464000",
    "end": "3472000"
  },
  {
    "text": "So, within category A,\nthere are three cases. And within category B,\nthere is the same three cases,",
    "start": "3472000",
    "end": "3481000"
  },
  {
    "text": "just reversed.\nSo, we're going to do is look at the other child of the\ngrandparent.",
    "start": "3481000",
    "end": "3489000"
  },
  {
    "text": "This is one reason why we sort\nof need to know which way we are looking.\nIf the parent of x is the left",
    "start": "3489000",
    "end": "3497000"
  },
  {
    "text": "child of the grandparent,\nwe're going to look at the other child of the grandparent,\nwhich would be the right child",
    "start": "3497000",
    "end": "3507000"
  },
  {
    "text": "of the grandparent,\ncall that node y. This is also known as the uncle\nor the aunt of x,",
    "start": "3507000",
    "end": "3514000"
  },
  {
    "text": "depending on whether y is male\nor female. OK, so this is uncle or aunt.\nUnfortunately,",
    "start": "3514000",
    "end": "3520000"
  },
  {
    "text": "in English, there is no\ngender-free version of this as far as I know.\nThere's parent and child,",
    "start": "3520000",
    "end": "3527000"
  },
  {
    "text": "but no uncle-aunt.\nI'm sure we could come up with one.\nI'm not going to try.",
    "start": "3527000",
    "end": "3533000"
  },
  {
    "text": "It's going to sound bad.\nOK, so why do I care about y? Because, I want to see if I can\ndo this recoloring step.",
    "start": "3533000",
    "end": "3543000"
  },
  {
    "text": "The recoloring idea was,\nwell, the grandparents, let's say it's black.\nIf I can push the blackness of",
    "start": "3543000",
    "end": "3549000"
  },
  {
    "text": "the grandparent down into the\ntwo children, then if both of these are red,\nin other words,",
    "start": "3549000",
    "end": "3555000"
  },
  {
    "text": "then I'd be happy.\nThen I'd push the problem up. This guy is now red.\nThis guy is black. So these two are all right.\nThis one may violate the great",
    "start": "3555000",
    "end": "3564000"
  },
  {
    "text": "grandparent.\nBut we will just keep going up, and that will be fine.\nToday, if we're lucky,",
    "start": "3564000",
    "end": "3570000"
  },
  {
    "text": "y is red.\nThen we can just do recoloring. So, if the color of y is red,\nthen we will recolor.",
    "start": "3570000",
    "end": "3581000"
  },
  {
    "text": "And, I'm going to defer this to\na picture called case one.",
    "start": "3581000",
    "end": "3589000"
  },
  {
    "text": "OK, let me first tell you how\nthe cases breakup, and then we will see how they\nwork.",
    "start": "3589000",
    "end": "3600000"
  },
  {
    "start": "3600000",
    "end": "3616000"
  },
  {
    "text": "So, if we're not in case one,\nso this L should be aligned",
    "start": "3616000",
    "end": "3623546"
  },
  {
    "text": "with that, then,\nthen we are either in case two",
    "start": "3623546",
    "end": "3629744"
  },
  {
    "text": "or three.\nSo, here's the dichotomy.",
    "start": "3629744",
    "end": "3635000"
  },
  {
    "text": "It turns out we've actually\nseen all of the cases, maybe not A versus B,\nbut we've seen the case of the",
    "start": "3635000",
    "end": "3643298"
  },
  {
    "text": "very beginning where we just\nrecolor. That's case one.\nThe next thing we saw is,",
    "start": "3643299",
    "end": "3649690"
  },
  {
    "text": "well, it's kind of annoying\nthat the grandparent and ten, so seven and ten were not\nstraight.",
    "start": "3649690",
    "end": "3657159"
  },
  {
    "text": "They were zigzagged.\nSo, case two is when they are zigzagged.\nIt turns out if x is the right",
    "start": "3657159",
    "end": "3664546"
  },
  {
    "text": "child of its parent,\nand the parent is the left child of the grandparent,\nthat's a we've assumed so far,",
    "start": "3664546",
    "end": "3672929"
  },
  {
    "text": "that is case two.\nOK, the other case is that x is",
    "start": "3672929",
    "end": "3678972"
  },
  {
    "text": "the left child of its parent.\nSo, then we have a left chain,",
    "start": "3678972",
    "end": "3684630"
  },
  {
    "text": "x, parent of x,\ngrandparent of x. That is case three.\nOK, I did not write else here",
    "start": "3684630",
    "end": "3692881"
  },
  {
    "text": "because what case two does is it\nreduces to case three.",
    "start": "3692881",
    "end": "3698247"
  },
  {
    "text": "So, in case two,\nwe are going to do the stuff that's here.\nAnd then, we're going to do the",
    "start": "3698247",
    "end": "3706891"
  },
  {
    "text": "stuff here.\nFor case three, we just do the stuff here.\nOr in case one,",
    "start": "3706892",
    "end": "3713549"
  },
  {
    "text": "we just do the stuff here.\nAnd then, that finishes the",
    "start": "3713549",
    "end": "3718816"
  },
  {
    "text": "three cases on the A side,\nthen back to this if. We say else,\nthis is case B,",
    "start": "3718816",
    "end": "3726169"
  },
  {
    "text": "which is the same as A,\nbut reversing the notions of",
    "start": "3726169",
    "end": "3731235"
  },
  {
    "text": "left and right,\nOK, in the natural way.",
    "start": "3731236",
    "end": "3737000"
  },
  {
    "text": "Every time we write left of\nsomething, we instead write right of something,\nand vice versa.",
    "start": "3737000",
    "end": "3742500"
  },
  {
    "text": "So, this is really just\nflipping everything over. We'll just focus on category A.\nAnd, let's see what we do in",
    "start": "3742500",
    "end": "3749187"
  },
  {
    "text": "each of the three cases.\nWe've seen it in an example. But let's do it generically.\nLet's do it here.",
    "start": "3749187",
    "end": "3758212"
  },
  {
    "text": "Sorry, there's one more line to\nthe algorithm,",
    "start": "3758212",
    "end": "3763423"
  },
  {
    "text": "I should say.\nIt's not aligned with here. We color the root.\nThere's a chance when you do",
    "start": "3763424",
    "end": "3773386"
  },
  {
    "text": "all of this that the root\nbecomes red. We always want the root to be\nblack.",
    "start": "3773386",
    "end": "3783000"
  },
  {
    "text": "If it's red,\nwe set it to black at the very end of the algorithm.\nThis does not change the black",
    "start": "3783000",
    "end": "3789992"
  },
  {
    "text": "height property.\nEverything will still be fine because every path either goes\nto the root or it doesn't,",
    "start": "3789992",
    "end": "3797586"
  },
  {
    "text": "every x to leaf path.\nSo, changing the root from red to black is no problem.\nIt will increase the black",
    "start": "3797586",
    "end": "3805105"
  },
  {
    "text": "heights of everyone,\nbut all the paths will still have the same value.\nIt will be one larger.",
    "start": "3805105",
    "end": "3813000"
  },
  {
    "text": "So, let's look at the three\ncases. And, I'm going to use some\nnotation.",
    "start": "3813000",
    "end": "3821704"
  },
  {
    "text": "Remember, we had triangles in\norder to denote arbitrary",
    "start": "3821704",
    "end": "3828615"
  },
  {
    "text": "subtrees when we define a\nrotation. I'm going to use triangle with\na dot on top to say that this",
    "start": "3828615",
    "end": "3840519"
  },
  {
    "text": "subtree has a black root.\nSo, when I fill something",
    "start": "3840519",
    "end": "3848448"
  },
  {
    "text": "white, it means black because\nI'm on a black board.",
    "start": "3848448",
    "end": "3855344"
  },
  {
    "text": "Sorry.\nOK, and I also have the property that each of these\ntriangles have the same black",
    "start": "3855344",
    "end": "3867068"
  },
  {
    "text": "height.\nSo, this will let me make sure that the black height property,\nproperty four,",
    "start": "3867068",
    "end": "3875424"
  },
  {
    "text": "is being observed.\nSo, let me just show you case one.\nWe always want to make sure",
    "start": "3875424",
    "end": "3882105"
  },
  {
    "text": "property four is preserved\nbecause it's really hard to get that back.\nIt's essentially the balance of",
    "start": "3882105",
    "end": "3890500"
  },
  {
    "text": "the tree.\nSo, let's suppose we have some node, C, left child,\nA, right child,",
    "start": "3890500",
    "end": "3896838"
  },
  {
    "text": "B, and some subtrees hanging\noff of those guys. And, all of those subtrees have\nthe same black height.",
    "start": "3896838",
    "end": "3905318"
  },
  {
    "text": "So, in other words,\nthese things are all at the same level.\nOK, this is not quite what I",
    "start": "3905318",
    "end": "3914466"
  },
  {
    "text": "wanted, sorry.\nSo, I'm considering, this is node x.\nx is red, and its parent is",
    "start": "3914466",
    "end": "3921161"
  },
  {
    "text": "red.\nTherefore, we need to fix something.\nWe look at the node,",
    "start": "3921162",
    "end": "3926361"
  },
  {
    "text": "y, which is over here.\nAnd, I'll call it, the key is D.\nThe node is called y.",
    "start": "3926361",
    "end": "3933435"
  },
  {
    "text": "OK, it has subtrees hanging off\nas well, all with the same black height.\nSo, that will be true.",
    "start": "3933435",
    "end": "3939721"
  },
  {
    "text": "If all of these nodes are red,\nthen all of these nodes have the same black height.\nAnd therefore,",
    "start": "3939721",
    "end": "3946145"
  },
  {
    "text": "all of the child subtrees,\nwhich have black roots, all had to have the same black\nheight as well.",
    "start": "3946145",
    "end": "3952568"
  },
  {
    "text": "OK, so we're looking at a big\nchunk of red children subtree of a black node,\nlooking at all the stuff that",
    "start": "3952569",
    "end": "3959608"
  },
  {
    "text": "happens to be red.\nIn case one, why is red so it participates?\nSo, a way to think of this as",
    "start": "3959608",
    "end": "3967153"
  },
  {
    "text": "if we converted into the\ntwo-three-four-tree, or tried to,\nwe would merge all of this",
    "start": "3967153",
    "end": "3973104"
  },
  {
    "text": "stuff into one node.\nThat's essentially what we're doing here.\nThis is not a two-three-four",
    "start": "3973104",
    "end": "3979491"
  },
  {
    "text": "tree, though.\nWe now have five children, which is bad.\nThis is why we want to fix it.",
    "start": "3979491",
    "end": "3985443"
  },
  {
    "text": "So, we're going to recolor in\ncase one. And, we're going to take C.\nInstead of making C black,",
    "start": "3985443",
    "end": "3992047"
  },
  {
    "text": "and A and D red,\nwe are going to make A and D black, and C red.\nSo, C is red.",
    "start": "3992048",
    "end": "3999172"
  },
  {
    "text": "A is black.\nD is black. And, the subtrees are the same.\nB is the same.",
    "start": "3999173",
    "end": "4005220"
  },
  {
    "text": "It's still red.\nOK, now we need to check that we preserve property four,\nthat all of the paths have the",
    "start": "4005220",
    "end": "4014244"
  },
  {
    "text": "same number of black nodes.\nThat follows because we know we",
    "start": "4014245",
    "end": "4019480"
  },
  {
    "text": "didn't touch these subtrees.\nThey all have the same black",
    "start": "4019480",
    "end": "4024733"
  },
  {
    "text": "height.\nAnd, if you look at any path, like, all the paths from A are\ngoing to have that black height.",
    "start": "4024733",
    "end": "4030802"
  },
  {
    "text": "All the paths from C are going\nto have that black height plus one because there's a black node\nin all the left paths,",
    "start": "4030802",
    "end": "4037862"
  },
  {
    "text": "and there is a black node in\nall the right paths. So, all the black links are the\nsame.",
    "start": "4037862",
    "end": "4043064"
  },
  {
    "text": "So, this preserves property\nfour. And, it fixes property three\nlocally because B used to",
    "start": "4043064",
    "end": "4048327"
  },
  {
    "text": "violate A.\nNow B does not violate anything.\nC, now, might be violated.",
    "start": "4048327",
    "end": "4054882"
  },
  {
    "text": "So, what we're going to do is\nset x, our new value of x, will be C.\nSo, it used to be B.",
    "start": "4054882",
    "end": "4062162"
  },
  {
    "text": "We move it up a couple levels.\nOr, in the original tree, yeah, we also move it up a\ncouple levels.",
    "start": "4062162",
    "end": "4070299"
  },
  {
    "text": "So, we're making progress up\nthe tree. And then we continue this loop.\nThat's case one:",
    "start": "4070299",
    "end": "4077494"
  },
  {
    "text": "recolor, go up.\nC may violate its parent in which case we have to recurse.\nSo, we are recursing,",
    "start": "4077494",
    "end": "4085460"
  },
  {
    "text": "in some sense,\nor continuing on C. So now, let's look at case two.",
    "start": "4085460",
    "end": "4093000"
  },
  {
    "start": "4093000",
    "end": "4119000"
  },
  {
    "text": "So, I'm still,\nin some sense, defining this algorithm by\npicture.",
    "start": "4119000",
    "end": "4129915"
  },
  {
    "text": "This is some nice,\ngraphical, programming",
    "start": "4129915",
    "end": "4136957"
  },
  {
    "text": "language.\nSo, let's draw case two.",
    "start": "4136957",
    "end": "4144000"
  },
  {
    "text": "Yeah, I forgot to mention\nsomething about case one. So, I drew some things here.\nWhat do I actually know is",
    "start": "4144000",
    "end": "4150861"
  },
  {
    "text": "true?\nSo, let's look at the algorithm in which I've now reversed.\nBut, we are assuming that we",
    "start": "4150862",
    "end": "4156867"
  },
  {
    "text": "are in category A.\nIn other words, the parent is the left child of\nthe grandparent.",
    "start": "4156868",
    "end": "4162147"
  },
  {
    "text": "So, A is the left child of C.\nThat much I knew. Therefore, y is the right\nchild.",
    "start": "4162147",
    "end": "4167228"
  },
  {
    "text": "D is the right child of C.\nI didn't actually know whether",
    "start": "4167228",
    "end": "4172712"
  },
  {
    "text": "B was the right child or the\nleft child. It didn't matter.\nIn case one,",
    "start": "4172712",
    "end": "4178865"
  },
  {
    "text": "it doesn't matter.\nOK, so I should've said, the children of A may be\nreversed.",
    "start": "4178865",
    "end": "4185649"
  },
  {
    "text": "But it just said the same\npicture. OK, I thought of this because\nin case two, we care.",
    "start": "4185649",
    "end": "4193157"
  },
  {
    "text": "So, case one:\nwe didn't really care. In case two,\nwe say, well,",
    "start": "4193158",
    "end": "4198586"
  },
  {
    "text": "case two is up there,\nis x the right child of the parent, or the left child?\nIf it's the right child,",
    "start": "4198586",
    "end": "4208864"
  },
  {
    "text": "we are in case two.\nSo now, I can really know that x here, which is B,\nis the right child of A.",
    "start": "4208864",
    "end": "4216012"
  },
  {
    "text": "Before, I didn't know and I\ndidn't care. Now, I'm assuming that it's\nthis way.",
    "start": "4216013",
    "end": "4221841"
  },
  {
    "text": "OK, y is still over here.\nAnd now, now we know that y is black.\nSo, y over here is a black",
    "start": "4221841",
    "end": "4228600"
  },
  {
    "text": "node.\nSo now, if I did the contraction trick,\nall of these nodes,",
    "start": "4228601",
    "end": "4236045"
  },
  {
    "text": "A, B, and C,\nwould conglomerate into one. I only have four children.\nThat actually looks pretty",
    "start": "4236045",
    "end": "4245803"
  },
  {
    "text": "good.\ny would not be involved because it's black.\nSo, in this case,",
    "start": "4245803",
    "end": "4252590"
  },
  {
    "text": "we are going to do a left\nrotation on A.",
    "start": "4252590",
    "end": "4258000"
  },
  {
    "text": "So, we take the edge,\nwe turn at 90∞. What we get is A on the left,\nB on the right still.",
    "start": "4258000",
    "end": "4264702"
  },
  {
    "text": "It should preserve the in order\ntraversal, C up top still. We have the y subtree hanging\noff, as before.",
    "start": "4264702",
    "end": "4272576"
  },
  {
    "text": "We have one of the other three\nsubtrees hanging off B, and the other two now hang off\nA.",
    "start": "4272576",
    "end": "4279202"
  },
  {
    "text": "So, this is just a generic\nrotation picture applied to this edge.\nOK, what that does,",
    "start": "4279202",
    "end": "4285594"
  },
  {
    "text": "is before we had a zigzag\nbetween x and its grandparent. Now, we have a zigzig.\nWe have a straight path between",
    "start": "4285594",
    "end": "4296875"
  },
  {
    "text": "x.\nSo, x is still down here. I'm not changing x in this case\nbecause after I do case two,",
    "start": "4296875",
    "end": "4307625"
  },
  {
    "text": "I immediately do case three.\nSo, this is what case three",
    "start": "4307625",
    "end": "4314500"
  },
  {
    "text": "will look like.\nAnd now, I continue on to case",
    "start": "4314500",
    "end": "4320125"
  },
  {
    "text": "three.\nSo, finally, here's case three.\nAnd, this will finally complete",
    "start": "4320125",
    "end": "4328137"
  },
  {
    "text": "the insertion algorithm.\nWe have a black node, C.\nWe have a red left child from",
    "start": "4328137",
    "end": "4335783"
  },
  {
    "text": "C.\nWe have a red, left, grandchild which is x.\nAnd then, we have these black",
    "start": "4335783",
    "end": "4343128"
  },
  {
    "text": "subtrees all of the same black\nheight hanging off, OK, which is exactly what we\nhad at the end of case two.",
    "start": "4343128",
    "end": "4355000"
  },
  {
    "text": "So, that definitely connects\nover. And remember,\nthis is the only case left in",
    "start": "4355000",
    "end": "4360458"
  },
  {
    "text": "category A.\nCategory A, we assumed that B was the parent of x,\nwas the left child of the",
    "start": "4360458",
    "end": "4366644"
  },
  {
    "text": "grandparent, B or C.\nSo, we know that. We already did the case one,\ny over here as red.",
    "start": "4366644",
    "end": "4372757"
  },
  {
    "text": "That was case one.\nSo, we are assuming y is black. Now, we look at whether x was\nthe left child or the right",
    "start": "4372757",
    "end": "4380398"
  },
  {
    "text": "child.\nIf it was the right child, we made it into the left child.\nx actually did change here.",
    "start": "4380398",
    "end": "4388637"
  },
  {
    "text": "Before, x was B.\nNow, x is A. OK, and then case three,\nfinally, is when x is the left",
    "start": "4388637",
    "end": "4395117"
  },
  {
    "text": "child of the parent who is the\nleft child of the grandparent. This is the last case we have\nto worry about.",
    "start": "4395117",
    "end": "4403335"
  },
  {
    "text": "And, what we do is another\nrotation just like the last rotation we did in the example.\nThat was case three.",
    "start": "4403335",
    "end": "4414419"
  },
  {
    "text": "So, we're going to do a right\nrotate in this case of C.",
    "start": "4414419",
    "end": "4423652"
  },
  {
    "text": "And, we are going to recolor.\nOK, so, what do we get?",
    "start": "4423652",
    "end": "4432544"
  },
  {
    "text": "Well, B now becomes the root.\nAnd, I'm going to make it",
    "start": "4432544",
    "end": "4441777"
  },
  {
    "text": "black.\nOK, remember, this is the root of the\nsubtree.",
    "start": "4441777",
    "end": "4446816"
  },
  {
    "text": "There is other stuff hanging\noff here. I really should have drawn\nextra parents in all of these",
    "start": "4446816",
    "end": "4452706"
  },
  {
    "text": "pictures.\nThere was somewhere in the middle of the tree.\nI don't know where. It could be a rightward branch;\nit could be a leftward branch.",
    "start": "4452706",
    "end": "4461283"
  },
  {
    "text": "We don't know.\nC becomes the child of B, and I'm going to make it a red\nchild. A becomes a child of B,\nas it was before,",
    "start": "4461284",
    "end": "4468646"
  },
  {
    "text": "keep it red.\nAnd, everything else just hangs off.\nSo, there were four subtrees",
    "start": "4468646",
    "end": "4474996"
  },
  {
    "text": "all at the same black height.\nAnd, in particular, this last one had y,\nbut we don't particularly care",
    "start": "4474996",
    "end": "4481983"
  },
  {
    "text": "about y anymore.\nNow, we are in really good shape because we should have no\nmore violations.",
    "start": "4481983",
    "end": "4488327"
  },
  {
    "text": "Before, we had a violation\nbetween x and its parent, A and B.\nWell, A and B still have a",
    "start": "4488327",
    "end": "4494387"
  },
  {
    "text": "parent child relation.\nBut B is now black. And, B is black,\nso we don't care what its",
    "start": "4494388",
    "end": "4500234"
  },
  {
    "text": "parent looks like.\nIt could be red or black. Both are fine.\nWe are no longer violating",
    "start": "4500234",
    "end": "4506151"
  },
  {
    "text": "property three.\nWe should be done in this case. Property three is now true.\nIf you want,",
    "start": "4506151",
    "end": "4513626"
  },
  {
    "text": "you can say,\nwell, x becomes this node. And then, the loop says,\noh, x is no longer red.",
    "start": "4513626",
    "end": "4519350"
  },
  {
    "text": "Therefore, I'm done.\nWe also need to check that property four is preserved\nduring this process.",
    "start": "4519350",
    "end": "4525545"
  },
  {
    "text": "Again, it's not hard because of\nthe two-three-four tree transformation.\nIf I contract all the red",
    "start": "4525545",
    "end": "4532464"
  },
  {
    "text": "things into their parents,\neverything else has a constant, I mean, every path in that tree\nhas the same length because they",
    "start": "4532464",
    "end": "4539496"
  },
  {
    "text": "have the same black length.\nAnd over here, that will still be true.\nIt's a little bit trickier",
    "start": "4539496",
    "end": "4544827"
  },
  {
    "text": "here, because we are recoloring\nat the same time. But, if you look at a path that\ncomes through this tree,",
    "start": "4544827",
    "end": "4550863"
  },
  {
    "text": "it used to go through a black\nnode, C, and then maybe some red stuff; I don't care.\nAnd then, it went through these",
    "start": "4550863",
    "end": "4557425"
  },
  {
    "text": "trees, which all have the same\nblack height. So they were all the same.\nNow, you comment,",
    "start": "4557425",
    "end": "4563785"
  },
  {
    "text": "and you go through a black node\ncalled B. And then, you go through some\nred nodes.",
    "start": "4563785",
    "end": "4568902"
  },
  {
    "text": "It doesn't really matter.\nBut all the trees that you go through down here have the same\nblack height.",
    "start": "4568902",
    "end": "4575251"
  },
  {
    "text": "So, every path through this\ntree will have the same black length, OK, if it starts from\nthe same node.",
    "start": "4575251",
    "end": "4581663"
  },
  {
    "text": "So, we preserve property four.\nWe fix property three. That is the insertion\nalgorithm.",
    "start": "4581663",
    "end": "4587040"
  },
  {
    "text": "It's pretty long.\nThis is something you'll probably just have to memorize.\nIf you try a few examples,",
    "start": "4587040",
    "end": "4594625"
  },
  {
    "text": "it's not so hard.\nWe can see that all the things we did in this example were the\nthree cases.",
    "start": "4594625",
    "end": "4600250"
  },
  {
    "text": "The first step,\nwhich unfortunately I had to erase for space,\nall we did was recolor.",
    "start": "4600250",
    "end": "4605375"
  },
  {
    "text": "We recolored ten,\nand eight, and 11. That was a case one.\nTen was the grandparent of 15.",
    "start": "4605375",
    "end": "4610687"
  },
  {
    "text": "Then, we looked at ten.\nTen was the violator. It was a zigzag case relative\nto its grandparent.",
    "start": "4610687",
    "end": "4616437"
  },
  {
    "text": "So, we did a right rotation to\nfix that, took this edge, and turned it so that ten\nbecame next to seven.",
    "start": "4616437",
    "end": "4624000"
  },
  {
    "text": "That's the picture on the top.\nThen, 18, which is the new violator, with its grandparent,\nis a zigzig.",
    "start": "4624000",
    "end": "4630268"
  },
  {
    "text": "They are both going in the same\ndirection. And, now, we do one more\nrotation to fix that.",
    "start": "4630268",
    "end": "4635713"
  },
  {
    "text": "That's really the only thing\nyou have to remember. Recolor your grandparent if you\ncan.",
    "start": "4635713",
    "end": "4641031"
  },
  {
    "text": "Otherwise, make it zigzig.\nAnd then, do one last rotation. And recolor.\nAnd that will work.",
    "start": "4641032",
    "end": "4646604"
  },
  {
    "text": "I mean, if you remember that,\nyou will figure out the rest on any particular example.\nWe rotate ten over.",
    "start": "4646604",
    "end": "4654363"
  },
  {
    "text": "That better be black,\nbecause in this case it's becoming the root.\nBut, we will make it black no",
    "start": "4654363",
    "end": "4661039"
  },
  {
    "text": "matter what happens because\nthere has to be one black node there.\nIf we didn't recolor at the",
    "start": "4661039",
    "end": "4667500"
  },
  {
    "text": "same time, we would violate\nproperty four. Why don't I draw that just for,\nOK, because I have a couple",
    "start": "4667500",
    "end": "4674606"
  },
  {
    "text": "minutes.\nSo, if we just did the rotation here, so let's say,\nnot the following,",
    "start": "4674606",
    "end": "4680060"
  },
  {
    "text": "we take B.\nB is red. This will give some intuition\nas to why the algorithm is this",
    "start": "4680061",
    "end": "4686706"
  },
  {
    "text": "way, and not some other way.\nAnd, C is black. That's what we would have\ngotten if we just rotated this",
    "start": "4686707",
    "end": "4693461"
  },
  {
    "text": "tree, rotated B,\nor rotated C to the right. So, these subtrees hang off in\nthe same way.",
    "start": "4693461",
    "end": "4699261"
  },
  {
    "text": "Subtrees look great because\nthey all have the same black height.\nBut, you see,",
    "start": "4699261",
    "end": "4704378"
  },
  {
    "text": "there's a problem.\nIf we look at all the paths starting from B and going down\nto a leaf, on the left,",
    "start": "4704378",
    "end": "4711064"
  },
  {
    "text": "the number of black nodes is\nwhatever the black height is over here.\nLabel that: black height,",
    "start": "4711064",
    "end": "4719237"
  },
  {
    "text": "whereas all the paths on the\nright will be that black height",
    "start": "4719237",
    "end": "4724516"
  },
  {
    "text": "plus one because C is black.\nSo now, we've violated property",
    "start": "4724517",
    "end": "4729797"
  },
  {
    "text": "four.\nSo, we don't do this in case three.\nAfter we do the rotation,",
    "start": "4729797",
    "end": "4735525"
  },
  {
    "text": "we also do a recoloring.\nSo, we get this. In other words,\nwe are putting the black node",
    "start": "4735525",
    "end": "4742652"
  },
  {
    "text": "at the top because then every\npath has to go through that node, whereas over here,\nsome of the nodes went through",
    "start": "4742652",
    "end": "4749281"
  },
  {
    "text": "the C.\nSome of them went through A. So, this is bad.\nAlso, we would have violated property three.\nBut, the really bad thing is",
    "start": "4749282",
    "end": "4756574"
  },
  {
    "text": "that we are violating property\nfour over here. OK, let me sum up a little bit.",
    "start": "4756575",
    "end": "4762000"
  },
  {
    "start": "4762000",
    "end": "4772000"
  },
  {
    "text": "So, we've seen,\nif we insert into a red black",
    "start": "4772000",
    "end": "4778734"
  },
  {
    "text": "tree, we can keep it a red black\ntree.",
    "start": "4778734",
    "end": "4784397"
  },
  {
    "text": "So, RB insert adds x to the set\nto the dynamic set that we are",
    "start": "4784397",
    "end": "4793734"
  },
  {
    "text": "trying to maintain,\nand preserves red blackness.",
    "start": "4793734",
    "end": "4802000"
  },
  {
    "text": "So, it keeps the tree a red\nblack tree, which is good because we know then it keeps\nlogarithmic height.",
    "start": "4802000",
    "end": "4809762"
  },
  {
    "text": "Therefore, all queries in red\nblack trees will keep taking logarithmic time.\nHow long does red black insert",
    "start": "4809762",
    "end": "4817835"
  },
  {
    "text": "take?\nWe know we are aiming for log n time preparation.\nWe are not going to prove that",
    "start": "4817835",
    "end": "4824278"
  },
  {
    "text": "formally, but it should be\npretty intuitive. So, cases two and three,\nsorry, pointing at the wrong",
    "start": "4824278",
    "end": "4831652"
  },
  {
    "text": "place, cases two and three are\nterminal. When we do case three,\nwe are done.",
    "start": "4831652",
    "end": "4838059"
  },
  {
    "text": "When we do case two,\nwe are about to do case three, and then we are done.\nOK, so the only thing we really",
    "start": "4838059",
    "end": "4844241"
  },
  {
    "text": "have to count is case one\nbecause each of these operations, they are recoloring,\nrotation, they all take",
    "start": "4844242",
    "end": "4850363"
  },
  {
    "text": "constant time.\nSo, it's a matter of, how many are there?\nCase one does some recoloring,",
    "start": "4850363",
    "end": "4855454"
  },
  {
    "text": "doesn't change the tree at all,\nand moves x up by two levels. We know that the height of the\ntree is, at most,",
    "start": "4855454",
    "end": "4864226"
  },
  {
    "text": "two log n plus one.\nSo, the number of case ones is, at most, log n plus one.\nOK, so the number of case ones",
    "start": "4864226",
    "end": "4873577"
  },
  {
    "text": "is, at most, log n.\nSo, those take log n time. And then, the number of case\ntwos and threes is,",
    "start": "4873577",
    "end": "4881850"
  },
  {
    "text": "at most, one for one of these\ncolumns. Well, together,\ntwos and threes is,",
    "start": "4881850",
    "end": "4888234"
  },
  {
    "text": "at most, two.\nOK, so, log n time, cool.\nThe other thing that is",
    "start": "4888234",
    "end": "4894778"
  },
  {
    "text": "interesting about red black\ninsertion is that it only makes order one rotations.\nSo, most of the changes are",
    "start": "4894778",
    "end": "4902898"
  },
  {
    "text": "recolorings.\nCase one just does recoloring, no rotations.\nCase two maybe does one",
    "start": "4902898",
    "end": "4908930"
  },
  {
    "text": "rotation.\nCase three does one rotation if you happen to be in those cases.\nSo, the number of rotations is,",
    "start": "4908930",
    "end": "4916895"
  },
  {
    "text": "at most, two.\nIt's either one or two in an insertion.\nIt's kind of nice because",
    "start": "4916895",
    "end": "4923666"
  },
  {
    "text": "rotating a tree is a bit more\nannoying than recoloring a tree. Why?\nBecause if you had,",
    "start": "4923666",
    "end": "4929266"
  },
  {
    "text": "say, a data structure,\nyou have a search tree, presumably, people are using\nthe search tree for something.",
    "start": "4929266",
    "end": "4936133"
  },
  {
    "text": "They are, like,\nmaking queries. For example,\nthe search tree represents all the documents matching the word\ncomputer in Google.",
    "start": "4936133",
    "end": "4944266"
  },
  {
    "text": "You've got the Google T-shirt\non here, so let's use a Google reference.\nYou have the search tree.",
    "start": "4944266",
    "end": "4951201"
  },
  {
    "text": "It stores all the things\ncontaining the word Google. You'd like to search may be for\nthe ones that were modified",
    "start": "4951201",
    "end": "4956440"
  },
  {
    "text": "after a certain date,\nor whatever it is you want to do.\nSo, you're doing some queries on this tree.\nAnd, people are pummeling",
    "start": "4956440",
    "end": "4962207"
  },
  {
    "text": "Google like crazy with queries.\nThey get a zillion a second. Don't quote me on that.\nThe number may not be accurate.",
    "start": "4962207",
    "end": "4967638"
  },
  {
    "text": "It's a zillion.\nBut, people are making searches all the time.\nIf you recolor the tree, people can still make searches.\nIt's just a little bit you are",
    "start": "4967638",
    "end": "4974559"
  },
  {
    "text": "flipping.\nI don't care in a search whether a node is red or black\nbecause I know it will have logarithmic height.\nSo, you can come along and make",
    "start": "4974559",
    "end": "4982608"
  },
  {
    "text": "your occasional updates as your\ncrawler surfs the Web and finds changes.\nAnd, recoloring is great. Rotation is a bit expensive\nbecause you have to lock those",
    "start": "4982608",
    "end": "4990493"
  },
  {
    "text": "nodes, make sure no one touches\nthem for the duration that you rotate them, and then unlock\nthem. So, it's nice that the number\nof rotations is small,",
    "start": "4990493",
    "end": "4998016"
  },
  {
    "text": "really small,\njust two, whereas the time has to be log n because we are\ninserting into a sorted list",
    "start": "4998016",
    "end": "5003048"
  },
  {
    "text": "essentially.\nSo, there is an n log n lower bound if we do n insertions.\nOK, deletion and I'm not going",
    "start": "5003048",
    "end": "5008183"
  },
  {
    "text": "to cover here.\nYou should read it in the book. It's a little bit more\ncomplicated, but the same ideas.",
    "start": "5008184",
    "end": "5014455"
  },
  {
    "text": "It gets the same bounds:\nlog n time order one rotations. So, check it out.\nThat's red black trees. Now, you can maintain data in\nlog n time preparation:",
    "start": "5014455",
    "end": "5022161"
  },
  {
    "text": "cool.\nWe'll now see three ways to do it.",
    "start": "5022161",
    "end": "5026000"
  }
]