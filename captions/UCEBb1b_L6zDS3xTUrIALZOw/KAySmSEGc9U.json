[
  {
    "start": "0",
    "end": "268000"
  },
  {
    "text": "[SQUEAKING]\n[RUSTLING] [CLICKING] ",
    "start": "0",
    "end": "25240"
  },
  {
    "text": "MICHAEL SIPSER: OK, folks. Here we are again. Welcome back for another episode\nof theory of computation.",
    "start": "25240",
    "end": "34200"
  },
  {
    "text": "This is lecture number 3. ",
    "start": "34200",
    "end": "39210"
  },
  {
    "text": "I'm going to review\nwhat we've been doing. We've been looking at finite\nautomata and regular languages.",
    "start": "39210",
    "end": "47850"
  },
  {
    "text": "Those are the languages that\nfinite automata can recognize. And we talked about\nnondeterminism.",
    "start": "47850",
    "end": "55870"
  },
  {
    "text": "So we had non-deterministic\nfinite automata and deterministic\nfinite automata. We showed that\nthey're equivalent.",
    "start": "55870",
    "end": "61859"
  },
  {
    "text": "We looked at the\nclosure properties over the regular operations\nunion, concatenation, and star,",
    "start": "61860",
    "end": "68640"
  },
  {
    "text": "and showed that the regular\nlanguage is really-- the class of regular\nlanguages is closed",
    "start": "68640",
    "end": "73650"
  },
  {
    "text": "under those regular operations. And we used the\nconstructions that we",
    "start": "73650",
    "end": "78660"
  },
  {
    "text": "developed in the proof of\nthose closure properties to show that the--",
    "start": "78660",
    "end": "83730"
  },
  {
    "text": "we can give a way to\nconvert regular expressions to finite automata.",
    "start": "83730",
    "end": "91750"
  },
  {
    "text": "So that is-- was\npartway toward our goal",
    "start": "91750",
    "end": "97080"
  },
  {
    "text": "of showing that these regular\nexpressions and finite automata are equivalent with respect\nto the class of languages",
    "start": "97080",
    "end": "103979"
  },
  {
    "text": "they describe, namely,\nthe regular languages. So regular expressions\nof finite automata are interchangeable\nfrom the perspective",
    "start": "103980",
    "end": "110310"
  },
  {
    "text": "of what kinds of languages\nyou can do with them. So we're going to\nfinish that off today.",
    "start": "110310",
    "end": "117010"
  },
  {
    "text": "So let's take a look\nat what our next topics we're going to be covering.",
    "start": "117010",
    "end": "123270"
  },
  {
    "text": "We're going to reverse\nthe construction we gave last time which allowed us\nto convert regular expressions",
    "start": "123270",
    "end": "131250"
  },
  {
    "text": "to finite automata. Now we're going to go backwards. We're going to show how to\nconvert finite automata back",
    "start": "131250",
    "end": "136409"
  },
  {
    "text": "to regular expressions. And that-- those two\nconstructions together",
    "start": "136410",
    "end": "143640"
  },
  {
    "text": "show us that the regular\nexpressions and finite automata can be interconverted\nfrom one another,",
    "start": "143640",
    "end": "149560"
  },
  {
    "text": "and they're therefore\nequivalent with respect to the kinds of things they\ncan do in language recognition",
    "start": "149560",
    "end": "156300"
  },
  {
    "text": "or generation. Then, we're going\nto prove that-- we're going to look at how you\nprove certain languages are not",
    "start": "156300",
    "end": "163890"
  },
  {
    "text": "regular, they're\nbeyond the capabilities of finite automata. And finally, at the\nend, we're going to introduce a new model\nof computation which",
    "start": "163890",
    "end": "171270"
  },
  {
    "text": "is more powerful than\nthe finite automata and regular expressions, namely,\nthe context-free grammars.",
    "start": "171270",
    "end": "177360"
  },
  {
    "text": "Those can do other\nkinds of languages that the simpler finite automata\nregular expressions models",
    "start": "177360",
    "end": "185400"
  },
  {
    "text": "can't do. And I would also just like\nto note that a lot of what",
    "start": "185400",
    "end": "190709"
  },
  {
    "text": "we're doing is a warm-up\ntoward the more powerful models of computation that we're\ngoing to be looking at later--",
    "start": "190710",
    "end": "197550"
  },
  {
    "text": "well, in a week or so-- which are more general\npurpose computation.",
    "start": "197550",
    "end": "204209"
  },
  {
    "text": "But along the way, introducing\nthese models of finite automata in context-free languages\nis interesting and helpful",
    "start": "204210",
    "end": "212760"
  },
  {
    "text": "because many of those-- a number-- those models\nturn out to be useful in a number of applications,\nwhether it's from linguistics",
    "start": "212760",
    "end": "223410"
  },
  {
    "text": "to programming languages. And a variety of different\nparts of computer science",
    "start": "223410",
    "end": "231540"
  },
  {
    "text": "and other fields as\nwell use those notions. So they're useful notions\nbeyond just in this course.",
    "start": "231540",
    "end": "241110"
  },
  {
    "text": "So I just want to--",
    "start": "241110",
    "end": "246930"
  },
  {
    "text": "a couple of administrative\nthings to touch on. We are going to have\nadditional check-ins",
    "start": "246930",
    "end": "252390"
  },
  {
    "text": "today, as I mentioned to you. We're going to start\ncounting participation-- not",
    "start": "252390",
    "end": "258449"
  },
  {
    "text": "correctness, just\nparticipation-- in the live check-ins. So with that, let us move\non to today's material.",
    "start": "258450",
    "end": "270510"
  },
  {
    "start": "268000",
    "end": "407000"
  },
  {
    "text": "As I mentioned,\nwe're going to be showing how to convert\nfinite automata to regular expressions.",
    "start": "270510",
    "end": "276660"
  },
  {
    "text": "And that's going to complete our\nequivalence of finite automata and regular expressions. So just to recap what\nwe did last time,",
    "start": "276660",
    "end": "283680"
  },
  {
    "text": "we showed that if you\nhave a regular expression",
    "start": "283680",
    "end": "290620"
  },
  {
    "text": "and it describes some language,\nthen that language is regular. So in other words,\nwe have a way of-- we",
    "start": "290620",
    "end": "298630"
  },
  {
    "text": "gave a way of converting regular\nexpressions to finite automata, as kind of shown\nin this diagram.",
    "start": "298630",
    "end": "304570"
  },
  {
    "text": "That's what we did last time. Now we're going to\ngo the other way. We're going to show\nhow to convert--",
    "start": "304570",
    "end": "310950"
  },
  {
    "text": "oh, and just a reminder in case\nyou're just getting yourself--",
    "start": "310950",
    "end": "316540"
  },
  {
    "text": "your memory to work,\nmaybe it'll help you just to remember that we actually did\nan example of that conversion.",
    "start": "316540",
    "end": "322660"
  },
  {
    "text": "We looked at this regular\nexpression, a union ab star. And we actually worked through\nthe process of converting that.",
    "start": "322660",
    "end": "330099"
  },
  {
    "text": "Oops. I need to make myself smaller\nso you can see all that. We went through the process\nof converting a union ab",
    "start": "330100",
    "end": "338900"
  },
  {
    "text": "star as an example of that-- of-- made a mis--",
    "start": "338900",
    "end": "345984"
  },
  {
    "text": "[LAUGHS] OK. Well, we went through the\nprocess of actually doing",
    "start": "345984",
    "end": "353840"
  },
  {
    "text": "that conversion. And now we're going to show how\nto do it the other way around. ",
    "start": "353840",
    "end": "360550"
  },
  {
    "text": "So we're going to invert that\nand go backwards the other way.",
    "start": "360550",
    "end": "365599"
  },
  {
    "text": "So today's theorem is to\nshow that if a is regular, namely, it's the language\nof some finite automaton,",
    "start": "365600",
    "end": "373789"
  },
  {
    "text": "then you can convert it to a\nregular expression which will",
    "start": "373790",
    "end": "381120"
  },
  {
    "text": "describe that same language. So basically, we're going\nto give a conversion from finite automata\nto regular expressions.",
    "start": "381120",
    "end": "389550"
  },
  {
    "text": "But before we do\nthat, we're going to have to introduce\na new concept. So we're not going to\nbe able to dive right",
    "start": "389550",
    "end": "395669"
  },
  {
    "text": "into that conversion. We're going to have to do--\nintroduce a new model first, which is going to\nfacilitate that conversion.",
    "start": "395670",
    "end": "402330"
  },
  {
    "text": "And that new model is called-- it's yet another kind of\nfinite automaton called",
    "start": "402330",
    "end": "407670"
  },
  {
    "start": "407000",
    "end": "867000"
  },
  {
    "text": "a Generalized\nNondeterministic Finite Automaton, or a Generalized\nNFA, or just simply a GNFA.",
    "start": "407670",
    "end": "417490"
  },
  {
    "text": "So this is yet another variant\nof the finite automaton model.",
    "start": "417490",
    "end": "422650"
  },
  {
    "text": "And conceptually,\nit's very simple. It's similar to the NFAs.",
    "start": "422650",
    "end": "428560"
  },
  {
    "text": "I'll give you-- here's a\npicture of a GNFA named G, G1.",
    "start": "428560",
    "end": "436400"
  },
  {
    "text": "Very similar to the NFAs. But if you look at\nit for a second, you'll see that the transitions\nhave more complicated labels.",
    "start": "436400",
    "end": "446090"
  },
  {
    "text": "For the NFAs,\nwe're only allowing just single symbols,\nor the empty string, to appear on the labels.",
    "start": "446090",
    "end": "452150"
  },
  {
    "text": "Now I'm actually allowing you\nto put full regular expressions on the labels for the automaton.",
    "start": "452150",
    "end": "460310"
  },
  {
    "text": "Now, we have to understand how\na GNFA processes its input.",
    "start": "460310",
    "end": "465830"
  },
  {
    "text": "And the way it works is not\ncomplicated to understand.",
    "start": "465830",
    "end": "471590"
  },
  {
    "text": "When you're getting an\ninput string feeding-- when a GNFA is processing\nan input string,",
    "start": "471590",
    "end": "477620"
  },
  {
    "text": "it starts at the start state,\njust like you would imagine. But now, to go\nalong a transition,",
    "start": "477620",
    "end": "483770"
  },
  {
    "text": "instead of reading just a single\nsymbol, or the empty string, as in the case for the\nnondeterministic machine,",
    "start": "483770",
    "end": "491689"
  },
  {
    "text": "it actually gets to read a\nwhole string at one step, kind of, at one bite.",
    "start": "491690",
    "end": "498380"
  },
  {
    "text": "It can read an entire\nstring and go along that transition arrow, provided\nthat chunk of the input",
    "start": "498380",
    "end": "507860"
  },
  {
    "text": "that it read is in\nthe regular expression that that transition\nhas as its label.",
    "start": "507860",
    "end": "519120"
  },
  {
    "text": "So for example, this-- you can go from q1 to q2\nin one step in this GNFA",
    "start": "519120",
    "end": "529580"
  },
  {
    "text": "by reading a, a,\nb, b off the input. So it reads all of those\nfour symbols all at once.",
    "start": "529580",
    "end": "536615"
  },
  {
    "text": "It just swoops them\nup and then moves from q1 to q2 in one step.",
    "start": "536615",
    "end": "543280"
  },
  {
    "text": "And then, when it's in q2 it\ncan read aab and move to q3.",
    "start": "543280",
    "end": "549370"
  },
  {
    "text": "And q3 happens,\nthere's nowhere to go. So this is going to be a\nnondeterministic machine. There might be several different\nways of processing the input.",
    "start": "549370",
    "end": "557329"
  },
  {
    "text": "And if any one of them\ngets to an accepting state at the end of the input,\nwe say the GNFA accepts.",
    "start": "557330",
    "end": "565470"
  },
  {
    "text": "So it's similar to\nnondeterministic-- to NFAs in the way the\nacceptance criterion works.",
    "start": "565470",
    "end": "572550"
  },
  {
    "text": "So you could do an example. But hopefully the concept of\nhow this works is reasonably--",
    "start": "572550",
    "end": "579210"
  },
  {
    "text": "you can at least buy\nit, that it processes",
    "start": "579210",
    "end": "584250"
  },
  {
    "text": "the input in chunks at a time. And those chunks\nhave to be described",
    "start": "584250",
    "end": "591690"
  },
  {
    "text": "by the regular expressions\non the transition arrows,",
    "start": "591690",
    "end": "596910"
  },
  {
    "text": "as it moves along\nthose transitions. So what we're going to\ndo now is to convert",
    "start": "596910",
    "end": "607380"
  },
  {
    "text": "not DFAs to regular\nexpressions, we're",
    "start": "607380",
    "end": "612400"
  },
  {
    "text": "going to convert GNFAs\nto regular expression. That's even harder,\nbecause GNFAs",
    "start": "612400",
    "end": "618954"
  },
  {
    "text": "are-- allow you to do all sorts\nof other things besides just ordinary DFAs.",
    "start": "618955",
    "end": "624220"
  },
  {
    "text": "So that's a harder job. Why am I making my life harder? Well, you'll see in\na minute that it's",
    "start": "624220",
    "end": "629980"
  },
  {
    "text": "going to actually turn out\nto be helpful to be working with a more powerful\nmodel in the way",
    "start": "629980",
    "end": "636370"
  },
  {
    "text": "this construction\nis going to work. Now, before I dive in\nand do the construction",
    "start": "636370",
    "end": "643210"
  },
  {
    "text": "from GNFAs to\nregular expressions, I'm going to make a simplifying\nassumption about the GNFAs.",
    "start": "643210",
    "end": "650050"
  },
  {
    "text": "I'm going to put them\nin a special form that's going to make it easier\nto do the conversion.",
    "start": "650050",
    "end": "656110"
  },
  {
    "text": "And that simpler form\nis, first of all, I'm going to assume the GNFA has\njust a single accepting state.",
    "start": "656110",
    "end": "667390"
  },
  {
    "text": "And that accepting state is not\nallowed to be the start state.",
    "start": "667390",
    "end": "673210"
  },
  {
    "text": "So it has to have just a\nsingle accepting state. I've already violated\nthat convenient assumption",
    "start": "673210",
    "end": "680800"
  },
  {
    "text": "in this GNFA, because I have\nhere two accepting states. That's not what I want.",
    "start": "680800",
    "end": "686200"
  },
  {
    "text": "I want to have just one. Well, the thing is, it's\neasy to obtain just one, just to modify the machine so\nthat I have just one by adding",
    "start": "686200",
    "end": "695500"
  },
  {
    "text": "a new accepting state\nwhich is branched to from the former accepting\nstates by empty transitions.",
    "start": "695500",
    "end": "702760"
  },
  {
    "text": "So I can always jump\nfrom q2 to q4 at any time without even reading any\ninput, just going along",
    "start": "702760",
    "end": "708880"
  },
  {
    "text": "this empty transition. And then I declassify the former\naccepting states as accepting.",
    "start": "708880",
    "end": "716750"
  },
  {
    "text": "And now I have here just\na single accepting state. And because it's going to\nbe a new state that I added,",
    "start": "716750",
    "end": "723080"
  },
  {
    "text": "it won't be the start state. And I have accomplished that\none aspect of my assumption",
    "start": "723080",
    "end": "730310"
  },
  {
    "text": "about the form of the GNFA. But there's another thing\nthat I want to do, too.",
    "start": "730310",
    "end": "735540"
  },
  {
    "text": "I want to assume-- as you will see,\nwhich is going to be convenient in my\nconstruction-- that we",
    "start": "735540",
    "end": "744600"
  },
  {
    "text": "will have transition arrows\ngoing from every state",
    "start": "744600",
    "end": "749800"
  },
  {
    "text": "to every other state. In fact, I want transition\narrows going from every state even back to themselves.",
    "start": "749800",
    "end": "756160"
  },
  {
    "text": "I want there to be--\nall possible transition arrows should be present,\nwith two exceptions.",
    "start": "756160",
    "end": "765685"
  },
  {
    "text": "For the start state, there\nshould be only transition arrows exiting the start state.",
    "start": "765685",
    "end": "771157"
  },
  {
    "text": "And for the accepting\nstate-- there's just one now-- there should be\nonly transition arrows coming into the start state.",
    "start": "771158",
    "end": "778740"
  },
  {
    "text": "So it's kind of what you would\nimagine as being reasonable. For the other states, which\nare not accepting or starting,",
    "start": "778740",
    "end": "786660"
  },
  {
    "text": "there should be transition\narrows leaving and coming from everywhere else. But for the start\nstates, just leaving.",
    "start": "786660",
    "end": "793185"
  },
  {
    "text": "And from the accept\nstate, just coming in. And you could easily modify\nthe machine to achieve that.",
    "start": "793185",
    "end": "799650"
  },
  {
    "text": "Let's just see how to\ndo that in one example. So from-- notice\nthat from q3 to q2",
    "start": "799650",
    "end": "805620"
  },
  {
    "text": "there is no\ntransition right now. And that's not good. That's not what I want. I want there to be a\ntransition from q3 to q2.",
    "start": "805620",
    "end": "811620"
  },
  {
    "text": "Well, I'll just add\nthat transition in. But I'm going to label it\nwith the empty language",
    "start": "811620",
    "end": "817900"
  },
  {
    "text": "regular expression. So that means, yeah,\nthe transition is there, but you never can take it.",
    "start": "817900",
    "end": "823350"
  },
  {
    "text": "So it doesn't\nchange the language that the machine is\ngoing to be recognizing.",
    "start": "823350",
    "end": "829800"
  },
  {
    "text": "But it fulfills my assumption,\nmy convenient assumption,",
    "start": "829800",
    "end": "836040"
  },
  {
    "text": "that we have all of these\ntransition arrows being present in the machine.",
    "start": "836040",
    "end": "841310"
  },
  {
    "text": "So anyway, I hope\nyou will buy it. It's not going to be--",
    "start": "841310",
    "end": "847160"
  },
  {
    "text": "if you don't quite\nget this, don't worry. It's not totally\ncritical that you're following all these little\nadjustments and modifications",
    "start": "847160",
    "end": "855470"
  },
  {
    "text": "to the GNFA. But it will be helpful\nto understand what GNFAs themselves-- how they work.",
    "start": "855470",
    "end": "861590"
  },
  {
    "text": "So as I mentioned,\nwe can easily modify GNFA to have the special form\nthat we're assuming here.",
    "start": "861590",
    "end": "867970"
  },
  {
    "start": "867000",
    "end": "1182000"
  },
  {
    "text": "So now we're going to jump in\nand start doing the conversion. So we're going to\nhave a lemma, which",
    "start": "867970",
    "end": "873790"
  },
  {
    "text": "is like a theorem that really\nis just of local interest here. It's not a general\ninterest theorem.",
    "start": "873790",
    "end": "879875"
  },
  {
    "text": "It's going to be\nrelevant just to GNFA, which are really just defined\nto help us do this conversion.",
    "start": "879875",
    "end": "885370"
  },
  {
    "text": "They really don't have any\nother independent value. So every-- you want to\nshow that every GNFA has",
    "start": "885370",
    "end": "892060"
  },
  {
    "text": "an equivalent regular expression\nR. That's really my goal.",
    "start": "892060",
    "end": "897800"
  },
  {
    "text": "And the way we're going to\nprove that is by induction. It's going to be by induction\non the number of states",
    "start": "897800",
    "end": "905640"
  },
  {
    "text": "of the GNFA. Now, you really should be\nfamiliar with induction",
    "start": "905640",
    "end": "912060"
  },
  {
    "text": "as one of the expectations\nfor being in this course. But in case you're a little\nshaky on it, don't worry.",
    "start": "912060",
    "end": "918269"
  },
  {
    "text": "I'm going to unpack\nit as a procedure. It's really just recursion. You know, induction is just--",
    "start": "918270",
    "end": "924685"
  },
  {
    "text": "a proof that uses\ninduction is really just a proof that calls itself. It's just a proof that--\nit's a recursive proof.",
    "start": "924685",
    "end": "930870"
  },
  {
    "text": "That's all it is. So if you're comfortable\nwith recursion, you'll be comfortable\nwith induction.",
    "start": "930870",
    "end": "936210"
  },
  {
    "text": "But anyway, I'm going to\ndescribe this as a procedure. So if you're a little shaky\non induction, don't worry.",
    "start": "936210",
    "end": "943020"
  },
  {
    "text": "So the basis is-- so first I'm going to\nhandle the case where the GNFA has just two states.",
    "start": "943020",
    "end": "949425"
  },
  {
    "text": " Now, remember, I'm\nassuming now my GNFAs",
    "start": "949425",
    "end": "957010"
  },
  {
    "text": "are in the special form. So you can't even have\na GNFA with one state, because it has to\nhave a start state",
    "start": "957010",
    "end": "962830"
  },
  {
    "text": "and it has to have\nan accept state, and they have to\nnot be the same. So the smallest possible\nGNFA to worry about",
    "start": "962830",
    "end": "968770"
  },
  {
    "text": "is a two-state GNFA. Now, if we have a-- if we\nhappen to have a two-state GNFA,",
    "start": "968770",
    "end": "974890"
  },
  {
    "text": "it turns out to be\nvery easy to find the equivalent\nregular expression. Why? Because that two-state GNFA\ncan only look like this.",
    "start": "974890",
    "end": "985070"
  },
  {
    "text": "It can have a start state,\nit can have an accept state, and it can only have\na transition going",
    "start": "985070",
    "end": "990850"
  },
  {
    "text": "from the start to the accept\nbecause no other transitions are allowed.",
    "start": "990850",
    "end": "997040"
  },
  {
    "text": "It only has outgoing from the\nstart, only incoming from the-- to the accept. And so there's only\none transition.",
    "start": "997040",
    "end": "1003820"
  },
  {
    "text": "And it has a label with\na regular expression R. So what do you think the\nequivalent regular expression",
    "start": "1003820",
    "end": "1010089"
  },
  {
    "text": "is for this GNFA? It's just simply the one that's\nlabeling that transition, because that tells us when\nI can go from the start",
    "start": "1010090",
    "end": "1017380"
  },
  {
    "text": "to the accept. And there's nothing\nelse the machine can do. It just makes one step,\nwhich is to accept its input if it's described\nby that regular expression.",
    "start": "1017380",
    "end": "1025730"
  },
  {
    "text": "So therefore, the equivalent\nregular expression that we're looking for\nis simply the label",
    "start": "1025730",
    "end": "1030790"
  },
  {
    "text": "on that single transition. So two-stage GNFAs are easy.",
    "start": "1030790",
    "end": "1037680"
  },
  {
    "text": "But what if-- what happens\nif you have more states? Then you're going to actually\nhave to do some work.",
    "start": "1037680",
    "end": "1044290"
  },
  {
    "text": "So we call that\nthe induction step. That's when we have\nmore than two states.",
    "start": "1044290",
    "end": "1050240"
  },
  {
    "text": "And what that-- the way the\ninduction works is we're going to assume we\nalready know how",
    "start": "1050240",
    "end": "1055370"
  },
  {
    "text": "to do it for k minus 1 states. And we're going to\nuse that knowledge",
    "start": "1055370",
    "end": "1061310"
  },
  {
    "text": "to show how to do\nit for k states. So in other words,\nwe already know",
    "start": "1061310",
    "end": "1066830"
  },
  {
    "text": "how to do it for two states. I'm going to use\nthat fact to show how to do it for three states,\nand then use the fact that I",
    "start": "1066830",
    "end": "1072507"
  },
  {
    "text": "can do it for three states\nto show how to do it for four states, and so on, and so on. ",
    "start": "1072507",
    "end": "1079440"
  },
  {
    "text": "And the idea for how to do\nthat is actually pretty easy",
    "start": "1079440",
    "end": "1086519"
  },
  {
    "text": "to grasp. What we're going to do is,\nif we have a k state GNFA",
    "start": "1086520",
    "end": "1092460"
  },
  {
    "text": "that we want to\nconvert, we're going to change that k state GNFA\nto a k minus 1 state GNFA",
    "start": "1092460",
    "end": "1100490"
  },
  {
    "text": "and then use our assumption\nthat we already know how to do the k minus 1 state GNFA. ",
    "start": "1100490",
    "end": "1109320"
  },
  {
    "text": "So in terms of a picture,\nI'm going to take a k state--",
    "start": "1109320",
    "end": "1115049"
  },
  {
    "text": "to prove that I can\nalways convert k state GNFAs to regular\nexpressions, I'm",
    "start": "1115050",
    "end": "1121950"
  },
  {
    "text": "going to show how to convert the\nk state one into an equivalent k minus 1 state GNFA.",
    "start": "1121950",
    "end": "1128845"
  },
  {
    "text": "And then, if you just like to\nthink of this procedurally, the k minus 1 gets\nconverted to a k minus 2,",
    "start": "1128845",
    "end": "1133860"
  },
  {
    "text": "gets converted to a k minus\n3, and so on, and so on, until I get down to two, which\nthen I know how to do directly.",
    "start": "1133860",
    "end": "1141450"
  },
  {
    "text": "So the whole name\nof the game here is figuring out how\nto convert a GNFA that",
    "start": "1141450",
    "end": "1147780"
  },
  {
    "text": "has k states into another one\nthat has one fewer state that does the same language.",
    "start": "1147780",
    "end": "1155680"
  },
  {
    "text": "So you have to hold\nthat in your head. I mean, I wish I had more\nblackboard space here, but it's very limited here.",
    "start": "1155680",
    "end": "1161340"
  },
  {
    "text": "So you have to\nremember what we're going to be doing\non the next slide, because that's going to\nfinish the job for us.",
    "start": "1161340",
    "end": "1168100"
  },
  {
    "text": "As long as I can show in\ngeneral how to convert a K, state GNFA to a GNFA\nthat has one fewer state",
    "start": "1168100",
    "end": "1174400"
  },
  {
    "text": "but it still does\nthe same language, I'm good, because then\nI can keep iterating",
    "start": "1174400",
    "end": "1180510"
  },
  {
    "text": "that till I get down to two. So here is-- this is the\nguts of the argument.",
    "start": "1180510",
    "end": "1190820"
  },
  {
    "start": "1182000",
    "end": "1657000"
  },
  {
    "text": "So I have my k state machine. Here's my start state. Here's my accept state.",
    "start": "1190820",
    "end": "1196420"
  },
  {
    "text": "Here's my k minus 1\nstate, that machine that I'm going to\nbe building for you.",
    "start": "1196420",
    "end": "1201430"
  },
  {
    "text": "It's actually going to be-- look almost exactly the same. I'm just going to remove one\nstate from the bigger machine.",
    "start": "1201430",
    "end": "1214600"
  },
  {
    "text": "So I'm going to pick any\nstate which is not the start state or the accept state.",
    "start": "1214600",
    "end": "1221070"
  },
  {
    "text": "Here it is pictured here. I mean, all of the states\nof the k state machine",
    "start": "1221070",
    "end": "1226390"
  },
  {
    "text": "are going to appear in the\nk minus 1 state machine except for one state that\nI'm going to rip out.",
    "start": "1226390",
    "end": "1233020"
  },
  {
    "text": " That's the state x.",
    "start": "1233020",
    "end": "1238250"
  },
  {
    "text": "It's now here as a ghost. It's been removed. ",
    "start": "1238250",
    "end": "1244750"
  },
  {
    "text": "It's not there anymore. But I'm just helping\nyou to remember that it used to be there\nby showing this shadow.",
    "start": "1244750",
    "end": "1251440"
  },
  {
    "text": "But it's a-- I have taken my original\nmachine that had k states",
    "start": "1251440",
    "end": "1261260"
  },
  {
    "text": "and basically just\nripped out a state. And now I have one fewer state.",
    "start": "1261260",
    "end": "1269560"
  },
  {
    "text": "So the good news is that\nI now have a machine with k minus 1 states.",
    "start": "1269560",
    "end": "1275169"
  },
  {
    "text": "That's what I want. But the bad news\nis that it doesn't do the same language anymore.",
    "start": "1275170",
    "end": "1281350"
  },
  {
    "text": "I broke the machine by rip-- if you're just going to rip\nout a state, who knows what",
    "start": "1281350",
    "end": "1286868"
  },
  {
    "text": "the new machine is going to do. It's going to be probably\nnot the same as what the original machine did.",
    "start": "1286868",
    "end": "1293260"
  },
  {
    "text": "So what I need to do,\nthen, is repair the damage.",
    "start": "1293260",
    "end": "1299170"
  },
  {
    "text": "I've got to fix the damage\nthat I caused by removing x. ",
    "start": "1299170",
    "end": "1305980"
  },
  {
    "text": "And whatever role x was playing\nin the original machine,",
    "start": "1305980",
    "end": "1313419"
  },
  {
    "text": "I've got to make sure that\nthe new machine that I have,",
    "start": "1313420",
    "end": "1318530"
  },
  {
    "text": "which doesn't have x anymore,\ncan still do the same things",
    "start": "1318530",
    "end": "1323860"
  },
  {
    "text": "that the original machine did. And so the way I'm\ngoing to do that is look at all of the paths that\ncould go through x and make",
    "start": "1323860",
    "end": "1333100"
  },
  {
    "text": "sure that they are still\npresent even though I don't have x anymore.",
    "start": "1333100",
    "end": "1338321"
  },
  {
    "text": "And the way I'm going to do\nthat is, I'm going to take-- ",
    "start": "1338322",
    "end": "1343370"
  },
  {
    "text": "consider a part of a\npath that might use x. So it starts-- let's pick\ntwo states, qi and qj,",
    "start": "1343370",
    "end": "1354260"
  },
  {
    "text": "in the machine\nthat had k states. Let me just see here--",
    "start": "1354260",
    "end": "1359673"
  },
  {
    "text": "I don't know if this--  OK.",
    "start": "1359673",
    "end": "1365620"
  },
  {
    "text": "We have-- if we have-- we'll pick two states, qi and\nqj, in the original machine.",
    "start": "1365620",
    "end": "1374230"
  },
  {
    "text": "Now, qi might have\nthe possibility of going to state x.",
    "start": "1374230",
    "end": "1380080"
  },
  {
    "text": "And then x might\nhave a self loop. And then it might go to qj. ",
    "start": "1380080",
    "end": "1388010"
  },
  {
    "text": "The new machine doesn't\nhave an x anymore. ",
    "start": "1388010",
    "end": "1393470"
  },
  {
    "text": "The way I'm going to fix that\nis by replacing the label that",
    "start": "1393470",
    "end": "1400230"
  },
  {
    "text": "goes directly from i to\nj with a new label that",
    "start": "1400230",
    "end": "1406260"
  },
  {
    "text": "adds in all of the things\nI lost when I removed x. ",
    "start": "1406260",
    "end": "1417480"
  },
  {
    "text": "That's the whole idea here. So here is qi to qj, but\nthere's no x anymore.",
    "start": "1417480",
    "end": "1422700"
  },
  {
    "text": "How could I get from qi to qj? ",
    "start": "1422700",
    "end": "1431128"
  },
  {
    "text": "What were the inputs that\ncould have brought us",
    "start": "1431128",
    "end": "1436410"
  },
  {
    "text": "from qi to qj via x? ",
    "start": "1436410",
    "end": "1441900"
  },
  {
    "text": "Well, they would have\nbeen an input that read a string described by r1.",
    "start": "1441900",
    "end": "1448510"
  },
  {
    "text": "I might have self-looked\nat x a few times, so I might have read\nseveral strings that",
    "start": "1448510",
    "end": "1455140"
  },
  {
    "text": "are described by r2. And then I would\nhave read a string that was described by r3.",
    "start": "1455140",
    "end": "1461760"
  },
  {
    "text": "And now I'm at qj. ",
    "start": "1461760",
    "end": "1467870"
  },
  {
    "text": "So the new label that I'm\ngoing to place over here is going to be the strings\nthat I get from reading r1--",
    "start": "1467870",
    "end": "1480160"
  },
  {
    "text": "reading a string that's\ndescribed by r1, then",
    "start": "1480160",
    "end": "1486220"
  },
  {
    "text": "multiple copies of strings-- multiple strings\nthat are possibly",
    "start": "1486220",
    "end": "1491409"
  },
  {
    "text": "describing r2, which\nis the same as r2 star. Oh, and then\nmultiples-- and then a string that could\nbe described by r3.",
    "start": "1491410",
    "end": "1499270"
  },
  {
    "text": "So that is a new addition\nto the transition that takes me from qi to qj.",
    "start": "1499270",
    "end": "1507430"
  },
  {
    "text": "Of course, I need to\ninclude the things that would have taken me from qi\nto qj in the first place.",
    "start": "1507430",
    "end": "1513620"
  },
  {
    "text": "So I'm also unioning\nin r4, which is the direct\nroute from qi to qj",
    "start": "1513620",
    "end": "1519850"
  },
  {
    "text": "that did not transit through x. So by making that new\nregular expression",
    "start": "1519850",
    "end": "1536590"
  },
  {
    "text": "on the qi to qj transition,\nI have compensated for the loss of x for paths that\ngo from qi to x and then out to",
    "start": "1536590",
    "end": "1550520"
  },
  {
    "text": "qj. Now, what I need to do\nis to do that same thing",
    "start": "1550520",
    "end": "1556340"
  },
  {
    "text": "for every pair qi and qj that\nare in the original machine.",
    "start": "1556340",
    "end": "1561610"
  },
  {
    "text": " And so if I do that for\nevery possible pair,",
    "start": "1561610",
    "end": "1567970"
  },
  {
    "text": "I'll be modifying all\nof the transitions in the new machine in a way that\ncompensates for the loss of x.",
    "start": "1567970",
    "end": "1581280"
  },
  {
    "text": "And now the new machine has\nbeen repaired from the damage that I caused by removing x.",
    "start": "1581280",
    "end": "1586320"
  },
  {
    "text": "And it does the same language. It's the kind of thing you need\nto think a little bit about. I understand.",
    "start": "1586320",
    "end": "1592210"
  },
  {
    "text": "But at least\nhopefully, the spirit of what I just described\nto you comes through,",
    "start": "1592210",
    "end": "1598480"
  },
  {
    "text": "that we're going\nto convert this k-- machine with k states to\none with k minus 1 states",
    "start": "1598480",
    "end": "1605500"
  },
  {
    "text": "by removing a state and\nrepairing the damage. And now it does\nthe same language. And then I can\nremove another state",
    "start": "1605500",
    "end": "1611350"
  },
  {
    "text": "and do the same thing\nover and over again until I get down to two states.",
    "start": "1611350",
    "end": "1616669"
  },
  {
    "text": "So that's the idea. And that really\ncompletes the proof.",
    "start": "1616670",
    "end": "1623029"
  },
  {
    "text": "That shows that I can\nconvert every GNFA",
    "start": "1623030",
    "end": "1630440"
  },
  {
    "text": "to a regular expression. And that really is the\nend of the story for this.",
    "start": "1630440",
    "end": "1639540"
  },
  {
    "text": "And thus I claim that DFAs,\nnow, and regular expressions are equivalent.",
    "start": "1639540",
    "end": "1645570"
  },
  {
    "text": "So let me-- going to give you\na little check-in here on this,",
    "start": "1645570",
    "end": "1651710"
  },
  {
    "text": "really just to see,\nhigh-level, if you're following what's going on. ",
    "start": "1651710",
    "end": "1659270"
  },
  {
    "text": "So just take a look. So we just showed how to convert\nGNFAs to regular expression. But we really wanted to convert\nDFAs to regular expressions.",
    "start": "1659270",
    "end": "1667170"
  },
  {
    "text": "So how do we go from GNFA-- converting GNFAs\nto converting DFAs? Because they're not\nthe same, obviously.",
    "start": "1667170",
    "end": "1673960"
  },
  {
    "text": "Right? So how do we finish that? So there are three choices here.",
    "start": "1673960",
    "end": "1679640"
  },
  {
    "text": "First, we have to show how to\nconvert DFAs to GNFAs, maybe? Or show how to\nconvert GNFAs to DFAs?",
    "start": "1679640",
    "end": "1685970"
  },
  {
    "text": "Or maybe we're already done? So maybe I better launch that\npoll while you're reading that. ",
    "start": "1685970",
    "end": "1693880"
  },
  {
    "text": "And there you go. Hopefully you can-- all right.",
    "start": "1693880",
    "end": "1703800"
  },
  {
    "text": "Why don't I end this? It's a little\nworrisome, because I would say we have a plurality\nwho got the right answer,",
    "start": "1703800",
    "end": "1711720"
  },
  {
    "text": "but not a majority. So let us share the results.",
    "start": "1711720",
    "end": "1717240"
  },
  {
    "text": "I think-- so I sense not\nall of you are with me.",
    "start": "1717240",
    "end": "1722950"
  },
  {
    "text": "But you're going to have to-- ",
    "start": "1722950",
    "end": "1728380"
  },
  {
    "text": "either that or you're\nplaying-- you're reading your email while we're talking.",
    "start": "1728380",
    "end": "1734140"
  },
  {
    "text": "I'm not sure. But whatever it is, you need to\nthink a little bit about what's",
    "start": "1734140",
    "end": "1741180"
  },
  {
    "text": "going on here, because\nthe reason why we are done",
    "start": "1741180",
    "end": "1749040"
  },
  {
    "text": "is because DFAs are\na kind of GNFAs. They're just-- they\nhave a very simple kind",
    "start": "1749040",
    "end": "1755580"
  },
  {
    "text": "of regular expression\non each transition. They just have the\nregular expression",
    "start": "1755580",
    "end": "1761500"
  },
  {
    "text": "which is just a single symbol. So all DFAs are\nautomatically GNFAs. So if I can convert GNFAs, I\ncan certainly convert DFAs,",
    "start": "1761500",
    "end": "1769940"
  },
  {
    "text": "because GNFAs include the DFAs. I'm done. It really was-- number C\nwas the correct answer.",
    "start": "1769940",
    "end": "1779549"
  },
  {
    "text": "So good thing we're not [LAUGHS]\ncounting correctness here.",
    "start": "1779550",
    "end": "1784860"
  },
  {
    "text": "So participation is good enough. But I do think you need\nto think about what's going on and making sure\nthat you're following along.",
    "start": "1784860",
    "end": "1792870"
  },
  {
    "text": "So anyway, that's a-- ",
    "start": "1792870",
    "end": "1798820"
  },
  {
    "text": "we'll carry on here. But it makes me a\nlittle concerned. ",
    "start": "1798820",
    "end": "1806290"
  },
  {
    "text": "So let us now move on. So we're going to\ntalk a little bit",
    "start": "1806290",
    "end": "1811300"
  },
  {
    "start": "1807000",
    "end": "1957000"
  },
  {
    "text": "about non-regular languages. ",
    "start": "1811300",
    "end": "1816640"
  },
  {
    "text": "So somebody's asking,\ndon't we have to still make the DFAs into the special type? Yes, we do have to make\nthem to the special type.",
    "start": "1816640",
    "end": "1822820"
  },
  {
    "text": "But we already showed\nhow to make GNFAs into the special type. And DFA-- that is going\nto apply to DFAs as well.",
    "start": "1822820",
    "end": "1831400"
  },
  {
    "text": "They'll become GNFAs. You can add the extra starts-- add a new start state,\nadd a new accept state,",
    "start": "1831400",
    "end": "1839529"
  },
  {
    "text": "add in all the\ntransitions with-- which you didn't have before with\nthe empty language label,",
    "start": "1839530",
    "end": "1845809"
  },
  {
    "text": "and you'll have a\nGNFA from a DFA. But that applies to GNFAs as--",
    "start": "1845810",
    "end": "1851710"
  },
  {
    "text": "in general. So it's nothing special\nabout DFAs there. Anyway, I think you\nneed to chew on that.",
    "start": "1851710",
    "end": "1857620"
  },
  {
    "text": "And hopefully you're-- you'll\nbe following going forward.",
    "start": "1857620",
    "end": "1862690"
  },
  {
    "text": "Anyway, let us look now at\nnon-- proving non-regularity. So we're finished with\nour goal of showing",
    "start": "1862690",
    "end": "1869740"
  },
  {
    "text": "that regular languages-- that\nthe regular languages can either come from DFAs or\nfrom regular expressions.",
    "start": "1869740",
    "end": "1877000"
  },
  {
    "text": "Those are the same in terms\nof-- from the perspective of our course, they're\ninterchangeable.",
    "start": "1877000",
    "end": "1883280"
  },
  {
    "text": "So now, as we\nmentioned, there are going to be some languages\nwhich are not regular,",
    "start": "1883280",
    "end": "1889010"
  },
  {
    "text": "which can't be done by DFAs. They're actually-- DFAs\nare actually pretty weak as a computational model.",
    "start": "1889010",
    "end": "1894870"
  },
  {
    "text": "And so there's all sorts of very\nsimple things that they cannot do-- though there are some fairly\ncomplicated things that they",
    "start": "1894870",
    "end": "1902330"
  },
  {
    "text": "can do, surprisingly enough. But anyway, there are some\nsimple things they can't do.",
    "start": "1902330",
    "end": "1908640"
  },
  {
    "text": "And so we have to develop\na method for showing that a language is not regular.",
    "start": "1908640",
    "end": "1914840"
  },
  {
    "text": "And that's going to be\nuseful for your homework and in general for\njust understanding the power of DFAs.",
    "start": "1914840",
    "end": "1923450"
  },
  {
    "text": "So how do we show a\nlanguage is not regular? So remember, if you want to\nshow a language is regular,",
    "start": "1923450",
    "end": "1929299"
  },
  {
    "text": "basically what you need\nto do is give a DFA. Or you can use the\nclosure properties.",
    "start": "1929300",
    "end": "1934543"
  },
  {
    "text": "That's another way of showing\na language is regular. But underneath that, it's\nbasically constructing DFAs. ",
    "start": "1934543",
    "end": "1942446"
  },
  {
    "text": "To show a language\nis not regular you have to give a proof. Generally it's not\na construction,",
    "start": "1942446",
    "end": "1947780"
  },
  {
    "text": "it's a proof that there is\nno DFA or that whatever-- that it's just going to be\nimpossible to make a DFA.",
    "start": "1947780",
    "end": "1957090"
  },
  {
    "start": "1957000",
    "end": "2327000"
  },
  {
    "text": "And we have to develop a method. What is that proof method?",
    "start": "1957090",
    "end": "1962100"
  },
  {
    "text": "Now, there is a tempting-- you know, I've taught\nthis course many times,",
    "start": "1962100",
    "end": "1967410"
  },
  {
    "text": "and there's a tempting\napproach that many people have.",
    "start": "1967410",
    "end": "1975508"
  },
  {
    "text": "It's not only going to\napply for finite automata, but for other things too. And believe me, it's not\nonly people in this class,",
    "start": "1975508",
    "end": "1981090"
  },
  {
    "text": "it's for people\nout there in the-- who are trying to think about\ncomputation in general--",
    "start": "1981090",
    "end": "1987800"
  },
  {
    "text": "which is to say, well,\nI have some language.",
    "start": "1987800",
    "end": "1995690"
  },
  {
    "text": "I'm trying to figure out\nif it's regular or not. And so I thought really\nhard how to make a DFA,",
    "start": "1995690",
    "end": "2001360"
  },
  {
    "text": "and I couldn't find one. Therefore, it's not regular. That's not a proof.",
    "start": "2001360",
    "end": "2007730"
  },
  {
    "text": "Just because you\ncouldn't find a DFA doesn't mean there is no DFA. You need to prove that\nthe language is not",
    "start": "2007730",
    "end": "2014860"
  },
  {
    "text": "regular using some method. So I'm going to give\nyou an example where that kind of approach\ncan lead you wrong.",
    "start": "2014860",
    "end": "2023260"
  },
  {
    "text": "And that is-- I'll give\ntwo examples of languages where you might try to prove\nthey're regular or not,",
    "start": "2023260",
    "end": "2032650"
  },
  {
    "text": "and you could be in\ntrouble if you just follow that kind of informal approach.",
    "start": "2032650",
    "end": "2040480"
  },
  {
    "text": "So if you take the language B,\nwhere these are strings-- well, let's assume our alphabet\nis zeros and ones.",
    "start": "2040480",
    "end": "2047570"
  },
  {
    "text": "B is the language\nof all strings that have an equal number\nof zeros and ones.",
    "start": "2047570",
    "end": "2052908"
  },
  {
    "text": "So you want to know,\nif I have 1,000 zeros, I need to have 1,000 ones. So basically, the way\nyou test that, you'd",
    "start": "2052909",
    "end": "2059300"
  },
  {
    "text": "have to count up\nthe number of zeros, count up the number of ones,\nand see if those two counts are the same.",
    "start": "2059300",
    "end": "2065658"
  },
  {
    "text": "And that's going to be really\ntough to make a DFA do, because how are you\ngoing to remember such--",
    "start": "2065659",
    "end": "2073030"
  },
  {
    "text": "that really big number\nof zeros that-- the DFA might have 50 states. But you might need to count\nup to 100 or a million",
    "start": "2073030",
    "end": "2081820"
  },
  {
    "text": "to figure out-- to count up\nhow many zeros you've seen.",
    "start": "2081820",
    "end": "2087040"
  },
  {
    "text": "And it seems really hard to be\nable to do that kind of a count when you only have 50 states.",
    "start": "2087040",
    "end": "2093204"
  },
  {
    "text": "So whatever number\nof states you have, it seems hard to count when\nyou have a finite automaton.",
    "start": "2093204",
    "end": "2101109"
  },
  {
    "text": "So the intuition\nis, it's not regular because a finite\nautomaton can't count.",
    "start": "2101110",
    "end": "2106720"
  },
  {
    "text": "Which, in this case, you\ncan convert that intuition into a real proof.",
    "start": "2106720",
    "end": "2112150"
  },
  {
    "text": "I would say it's not\na real proof yet, but it can be made\ninto a real proof.",
    "start": "2112150",
    "end": "2117940"
  },
  {
    "text": "But compare that case\nwith another language, which I'll call C, which,\ninstead of looking at its input",
    "start": "2117940",
    "end": "2127160"
  },
  {
    "text": "to see whether it has an equal\nnumber of zeros and ones, I'm going to look at the input\nand look at the substrings",
    "start": "2127160",
    "end": "2133820"
  },
  {
    "text": "of 01s and 10s-- those two substrings-- and count\nthe number of occurrences of 01",
    "start": "2133820",
    "end": "2141559"
  },
  {
    "text": "as a substring and the\nnumber of occurrences of 10 as a substring.",
    "start": "2141560",
    "end": "2146910"
  },
  {
    "text": "Just to make sure\nyou're understanding, let's look at some example-- two examples. So the string 0101 is\nnot going to be in C,",
    "start": "2146910",
    "end": "2157800"
  },
  {
    "text": "because if you count up the\nnumber of 01s and the number of 10s, not the same.",
    "start": "2157800",
    "end": "2163300"
  },
  {
    "text": "So I'm even going to help you\nhere, if you can see that. The number of 01s is two.",
    "start": "2163300",
    "end": "2169230"
  },
  {
    "text": "But there's only a\nsingle occurrence of 10.",
    "start": "2169230",
    "end": "2174609"
  },
  {
    "text": "So those are-- those two\ncounts are different. And so that's why this\ninput string is not in C.",
    "start": "2174610",
    "end": "2181930"
  },
  {
    "text": "Compare that with\nthe string 0110.",
    "start": "2181930",
    "end": "2187329"
  },
  {
    "text": "Now, if you count up the\nnumber of 01 and 10 substrings, you're going to\nget the same value,",
    "start": "2187330",
    "end": "2193030"
  },
  {
    "text": "because here we have a\nsingle 01 and a single 10.",
    "start": "2193030",
    "end": "2198226"
  },
  {
    "text": "And so now the two counts of\nthose number of substrings are the same. And so that's where you're in C.",
    "start": "2198226",
    "end": "2206780"
  },
  {
    "text": "Now my question is, is\nC a regular language?",
    "start": "2206780",
    "end": "2211830"
  },
  {
    "text": "Well, it looks like it shouldn't\nbe regular for the same reason that B isn't regular-- because\nyou have to count up two",
    "start": "2211830",
    "end": "2217829"
  },
  {
    "text": "quantities and compare them. ",
    "start": "2217830",
    "end": "2227940"
  },
  {
    "text": "OK? So now, so if we--",
    "start": "2227940",
    "end": "2237109"
  },
  {
    "text": " so that's our\nintuition, that you just",
    "start": "2237110",
    "end": "2242490"
  },
  {
    "text": "can't do it for the--\nwith a finite automaton, because you have to do the same\nkind of counting that you would have had to do for language\nB. But here you'll be--",
    "start": "2242490",
    "end": "2250575"
  },
  {
    "text": "you would be wrong, because\nC, in fact, is regular. ",
    "start": "2250575",
    "end": "2259040"
  },
  {
    "text": "It has a much\nsimpler description than the one I gave over\nhere at the beginning.",
    "start": "2259040",
    "end": "2267530"
  },
  {
    "text": "The very same language,\nC, can be described in a much, much simpler way. I'm not going to\ntell you what it is.",
    "start": "2267530",
    "end": "2272750"
  },
  {
    "text": "You can mull that over. You can try some examples\nto figure it out. But it has a much\nsimpler description.",
    "start": "2272750",
    "end": "2278480"
  },
  {
    "text": "It's not a totally\ntrivial description. There is some content there. But there is-- it\nis the kind of thing",
    "start": "2278480",
    "end": "2284690"
  },
  {
    "text": "that a finite automaton can do. It wouldn't do the\ncounting this way. So the moral is--\nthe punch line is",
    "start": "2284690",
    "end": "2292339"
  },
  {
    "text": "that sometimes the intuition\nworks, but it can also be wrong. And so the moral\nof the story is,",
    "start": "2292340",
    "end": "2297980"
  },
  {
    "text": "you need to give a proof when\nyou're doing things like that. So what we're going to do\nnext, in the second half",
    "start": "2297980",
    "end": "2304880"
  },
  {
    "text": "of the lecture, is to\ngive a method for proving languages are not regular. And again, you're going to need\nto use that on your homework.",
    "start": "2304880",
    "end": "2312150"
  },
  {
    "text": "So I hope you get it. But first of all-- did I-- never stopped\nsharing that poll.",
    "start": "2312150",
    "end": "2318860"
  },
  {
    "text": "Forgive me. ",
    "start": "2318860",
    "end": "2326680"
  },
  {
    "text": "And so with that,\nI think we'll take our little requested break.",
    "start": "2326680",
    "end": "2332440"
  },
  {
    "start": "2327000",
    "end": "2362000"
  },
  {
    "text": "And-- for five minutes. And we'll be back\nin five minutes.",
    "start": "2332440",
    "end": "2339355"
  },
  {
    "text": " So, break time. ",
    "start": "2339355",
    "end": "2361280"
  },
  {
    "text": "We are done here. And proving languages\nnot regular.",
    "start": "2361280",
    "end": "2368190"
  },
  {
    "start": "2362000",
    "end": "2617000"
  },
  {
    "text": " The way we're going to prove\nlanguages are not regular",
    "start": "2368190",
    "end": "2374070"
  },
  {
    "text": "is by introducing a method\ncalled the pumping lemma.",
    "start": "2374070",
    "end": "2380420"
  },
  {
    "text": "And the overarching plan\nat the pumping lemma,",
    "start": "2380420",
    "end": "2385520"
  },
  {
    "text": "without getting into the\nspecifics of it, is to say-- show that--",
    "start": "2385520",
    "end": "2390550"
  },
  {
    "start": "2390550",
    "end": "2395922"
  },
  {
    "text": "that lemma says all\nregular languages have a certain property,\nwhich we will describe.",
    "start": "2395922",
    "end": "2404780"
  },
  {
    "text": "And so to show a\nlanguage is not regular you simply show the language\ndoesn't have that property,",
    "start": "2404780",
    "end": "2413109"
  },
  {
    "text": "because all regular languages\nhave to have that property. And so by showing a language\nfails to have the property,",
    "start": "2413110",
    "end": "2420609"
  },
  {
    "text": "it could not be regular. That's the plan. ",
    "start": "2420610",
    "end": "2426779"
  },
  {
    "text": "Now, the property itself\nis a little complicated",
    "start": "2426780",
    "end": "2432630"
  },
  {
    "text": "to describe, but not too bad. I'll try to unpack it for you. But first, let's look at\nthe statement of the lemma,",
    "start": "2432630",
    "end": "2443580"
  },
  {
    "text": "which says that whenever you\nhave a regular language-- let's call it A. So for\nevery regular language A",
    "start": "2443580",
    "end": "2450470"
  },
  {
    "text": "there's always a special\nvalue called the pump-- a number.",
    "start": "2450470",
    "end": "2456180"
  },
  {
    "text": "p, we'll call it-- called\nthe pumping length. It's a special number.",
    "start": "2456180",
    "end": "2461770"
  },
  {
    "text": "And it's-- and that length tells\nyou that whenever a string is",
    "start": "2461770",
    "end": "2480870"
  },
  {
    "text": "in that language and it's\nlonger than that length, then something special happens.",
    "start": "2480870",
    "end": "2490170"
  },
  {
    "text": "You can take that string\nand you can modify it, and you still stay\nin the language. So anything that's longer\nthan that special length",
    "start": "2490170",
    "end": "2497700"
  },
  {
    "text": "can be modified\nin a certain way, and you still stay\nin the language. So let's look at the actual\nstatement of the lemma.",
    "start": "2497700",
    "end": "2507240"
  },
  {
    "text": "So there is a number\np such that if s",
    "start": "2507240",
    "end": "2513520"
  },
  {
    "text": "is a string in the language and\nit's longer than p, or at least of length p, then you can\ntake s and you can cut it up",
    "start": "2513520",
    "end": "2520609"
  },
  {
    "text": "into three pieces-- x, y, and z-- so that's just breaking\ns into three pieces--",
    "start": "2520610",
    "end": "2525920"
  },
  {
    "text": "where you can take that middle\npiece, repeat it as many times",
    "start": "2525920",
    "end": "2532520"
  },
  {
    "text": "as you like, and you still\nstay in the language. ",
    "start": "2532520",
    "end": "2537680"
  },
  {
    "text": "That's the-- what the\npumping lemma is saying. And there's a bunch of\nother conditions here too.",
    "start": "2537680",
    "end": "2544550"
  },
  {
    "text": "But the spirit of\nthe pumping lemma says, whenever you have a\nregular language there's",
    "start": "2544550",
    "end": "2550280"
  },
  {
    "text": "some cutoff such\nthat all strings longer than that cutoff\ncan be what we call pumped.",
    "start": "2550280",
    "end": "2556069"
  },
  {
    "text": "You can take that string,\nyou can find a section somewhere in the\nmiddle of that string",
    "start": "2556070",
    "end": "2561620"
  },
  {
    "text": "or somewhere-- you cut\nit up in three pieces, you take that center piece,\nand you can repeat it.",
    "start": "2561620",
    "end": "2567210"
  },
  {
    "text": "You can pump it up. And by repeating that string\nand repeating that piece,",
    "start": "2567210",
    "end": "2574070"
  },
  {
    "text": "the string gets\nlonger and longer. But you still stay\nin the language. That's the special property\nthat all regular languages have.",
    "start": "2574070",
    "end": "2583250"
  },
  {
    "text": "So in an informal\nway-- and we'll do-- I'll try to help you get\nthe feeling for this. Informally, it says that if\nyou have a regular language,",
    "start": "2583250",
    "end": "2592520"
  },
  {
    "text": "then every long string--\nso a long is by-- informal way of saying\nbigger than this value p.",
    "start": "2592520",
    "end": "2598130"
  },
  {
    "text": "Every long string in the\nlanguage can be pumped. And this result still\nstays in the language.",
    "start": "2598130",
    "end": "2604150"
  },
  {
    "text": "And by \"pumped\" means I can cut\nthe string into three pieces and repeat that middle piece\nas many times as I want.",
    "start": "2604150",
    "end": "2609785"
  },
  {
    "text": "That's what I mean\nby pumping a string.  So we'll do some\nexamples in a second.",
    "start": "2609785",
    "end": "2621250"
  },
  {
    "start": "2617000",
    "end": "2737000"
  },
  {
    "text": "But first we're going to\nsee how to prove this. And hopefully, that'll give\nyou some feeling, also,",
    "start": "2621250",
    "end": "2627420"
  },
  {
    "text": "for why it's true. So-- and actually, maybe before\nI actually jump into the proof,",
    "start": "2627420",
    "end": "2636820"
  },
  {
    "text": "let me-- let's look at\nthese three conditions here just to understand it a\nlittle bit more thoroughly.",
    "start": "2636820",
    "end": "2644710"
  },
  {
    "text": "So condition one kind of says\nwhat I just was telling you.",
    "start": "2644710",
    "end": "2650440"
  },
  {
    "text": "I can break s into\nthree pieces-- x, y, z-- such that if\nI take x y to the i z--",
    "start": "2650440",
    "end": "2657700"
  },
  {
    "text": "so that's repeating y\nas many times as I want. So here's y to the i defined,\nif that's helpful to you--",
    "start": "2657700",
    "end": "2663440"
  },
  {
    "text": "it's just y-- i copies of y. So I can take x y\nto the i z, and I",
    "start": "2663440",
    "end": "2668560"
  },
  {
    "text": "remain in the language\nfor every value of i-- even i equals 0,\nwhich means we're just",
    "start": "2668560",
    "end": "2675160"
  },
  {
    "text": "removing y, which is sometimes\nactually a useful thing to do. But let's not get\nahead of ourselves.",
    "start": "2675160",
    "end": "2682810"
  },
  {
    "text": "So if-- you know, I can cut s--",
    "start": "2682810",
    "end": "2688270"
  },
  {
    "text": "I'm guaranteed to be able\nto cut s up into x, y, z so that the string xyyy is still\nin the language, or xyyyyy--",
    "start": "2688270",
    "end": "2697960"
  },
  {
    "text": "it's still in the language. That's going to be guaranteed\nfor every regular language.",
    "start": "2697960",
    "end": "2703089"
  },
  {
    "text": "That's a feature that's\ngoing to be true. And furthermore--\nand this is going to be turning out to\nbe-- it's not really",
    "start": "2703090",
    "end": "2710330"
  },
  {
    "text": "part of the core idea\nof the pumping lemma, but it actually turns out to\nbe very helpful in applying the pumping lemma.",
    "start": "2710330",
    "end": "2716810"
  },
  {
    "text": "You can always cut\nit up in such a way that the first two pieces are\nnot longer than that value p.",
    "start": "2716810",
    "end": "2724530"
  },
  {
    "text": "So this-- it restricts on the\nways you can cut the thing up. And that actually turns\nout to be very helpful.",
    "start": "2724530",
    "end": "2731040"
  },
  {
    "text": "But let's first just look\nat the proof of this, giving a little bit\nthe high-level picture. ",
    "start": "2731040",
    "end": "2737890"
  },
  {
    "start": "2737000",
    "end": "2972000"
  },
  {
    "text": "So my job is to show, if I\nhave a string in my language--",
    "start": "2737890",
    "end": "2744490"
  },
  {
    "text": "let's say it's a-- think of it as a long\nstring, really long. So its length is more than p.",
    "start": "2744490",
    "end": "2750160"
  },
  {
    "text": "But I think intuitively,\nit's just a very long string. And I'm going to feed that\nstring into the machine",
    "start": "2750160",
    "end": "2758890"
  },
  {
    "text": "and watch what happens. Something special happens\nwhen I feed the string and I look at how the machine\nproceeds on that string,",
    "start": "2758890",
    "end": "2769270"
  },
  {
    "text": "because s is so long\nthat as I wander around",
    "start": "2769270",
    "end": "2776250"
  },
  {
    "text": "inside the machine\nI have to end up coming back to the same\nplace more than once. ",
    "start": "2776250",
    "end": "2783930"
  },
  {
    "text": "It's like if you\nhave a small park and you go for a long walk. You're going to end up\ncoming back to where you've--",
    "start": "2783930",
    "end": "2789299"
  },
  {
    "text": "what you've already seen. You just can't keep\non seeing new stuff when you have a more small\narea of space to explore.",
    "start": "2789300",
    "end": "2795405"
  },
  {
    "start": "2795405",
    "end": "2801590"
  },
  {
    "text": "So we're guaranteed\nthat M is going to end up repeating some\nstate when it's reading s because s is so long.",
    "start": "2801590",
    "end": "2807920"
  },
  {
    "text": "So in terms--\npictorially, if you imagine here this wiggly line\nis describing the path that M",
    "start": "2807920",
    "end": "2815000"
  },
  {
    "text": "follows when it's\nreading s, it ends up coming back to that\nstate qj more than once.",
    "start": "2815000",
    "end": "2820470"
  },
  {
    "text": "So it comes back\nhere, cycles around, comes back again before\nit ends up accepting.",
    "start": "2820470",
    "end": "2825490"
  },
  {
    "text": "We know it ends up\naccepting because we're assuming we have a string\nthat's in the language. So we picked s in the language.",
    "start": "2825490",
    "end": "2832070"
  },
  {
    "text": "So it has to be accepted by\nM. But the important thing is that it repeats a state.",
    "start": "2832070",
    "end": "2838760"
  },
  {
    "text": "Now, how does that\ntell me I can cut s up into those three pieces?",
    "start": "2838760",
    "end": "2844610"
  },
  {
    "text": "Well, I'm going to get\nthose three pieces here. First of all, let's observe\nthat here is processing--",
    "start": "2844610",
    "end": "2850460"
  },
  {
    "text": "as processing s. Here is the-- written\nright on top of the string,",
    "start": "2850460",
    "end": "2855710"
  },
  {
    "text": "that state repetition\noccurring, qj, more than once. And now, if I look\ninside the machine,",
    "start": "2855710",
    "end": "2862230"
  },
  {
    "text": "the part of s that took me\nto qj I'm going to call x.",
    "start": "2862230",
    "end": "2867619"
  },
  {
    "text": "The part that took\nme from qj back to itself I'm going to call y. And the part that took\nqj to the accept state",
    "start": "2867620",
    "end": "2875900"
  },
  {
    "text": "I'm going to call z. And I'm going to\nmark those off in s. And that gives me the way to\ncut s up into three pieces.",
    "start": "2875900",
    "end": "2885160"
  },
  {
    "text": "Now, if you're\nappreciating what's",
    "start": "2885160",
    "end": "2891180"
  },
  {
    "text": "going on inside the\nmachine, you will see why M will also\naccept the string xyyz--",
    "start": "2891180",
    "end": "2898545"
  },
  {
    "text": " because every time-- once you're\nat qj, if you go around once,",
    "start": "2898545",
    "end": "2908720"
  },
  {
    "text": "you come back to qj. And then if you go again,\nyou'll come back to qj. And as many times as\nyou keep seeing that y,",
    "start": "2908720",
    "end": "2915180"
  },
  {
    "text": "you're just going to\nkeep coming back to qj. So it doesn't matter\nhow many y's you have.",
    "start": "2915180",
    "end": "2920913"
  },
  {
    "text": "You're going to still--\nif you follow it by z, which is what\nyou will do-- you'll end up accepting this string.",
    "start": "2920913",
    "end": "2928850"
  },
  {
    "text": "And that's really the proof. I mean, you have to\ndo a little bit more here just to understand--",
    "start": "2928850",
    "end": "2935240"
  },
  {
    "text": "I should have\nmentioned why I want to forbid y being\nthe empty string, because if y's the empty\nstring it's not interesting.",
    "start": "2935240",
    "end": "2940880"
  },
  {
    "text": "It doesn't change--\nrepeating it doesn't actually",
    "start": "2940880",
    "end": "2946039"
  },
  {
    "text": "change anything. So I have to make\nsure it's not empty. But anyway, that's\na detail here.",
    "start": "2946040",
    "end": "2951200"
  },
  {
    "text": "If you look at the\nstring xyyz, that's still going to be accepted.",
    "start": "2951200",
    "end": "2957020"
  },
  {
    "text": "So that's the proof\nof the pumping lemma. So let's have a little\ncheck-in related to that.",
    "start": "2957020",
    "end": "2964740"
  },
  {
    "text": "This is not going to be--\nagain, not super hard. But more just a curiosity.",
    "start": "2964740",
    "end": "2971010"
  },
  {
    "text": " So the pumping lemma depends on\nthe fact that if M has p states",
    "start": "2971010",
    "end": "2977180"
  },
  {
    "start": "2972000",
    "end": "3037000"
  },
  {
    "text": "and it runs for\nmore than p steps, then it's going to\nenter some state twice. So you may have\nseen that before.",
    "start": "2977180",
    "end": "2984140"
  },
  {
    "text": "It actually has a name which\nsome of you may have seen.",
    "start": "2984140",
    "end": "2989339"
  },
  {
    "text": "So let's see how to\njust get a poll here. ",
    "start": "2989340",
    "end": "2994849"
  },
  {
    "text": "And I hope not too many of\nyou are going to pick C,",
    "start": "2994849",
    "end": "3006200"
  },
  {
    "text": "as it's-- some of you are. [LAUGHS] Oh well. Yes, I think this\none most of you are--",
    "start": "3006200",
    "end": "3013549"
  },
  {
    "text": "you've seen this before. This is-- I think you\npretty much all got it.",
    "start": "3013550",
    "end": "3019710"
  },
  {
    "text": "This is what's known as\nthe Pigeonhole Principle.",
    "start": "3019710",
    "end": "3024920"
  },
  {
    "text": "So here, sharing the\nresults, obviously I",
    "start": "3024920",
    "end": "3030132"
  },
  {
    "text": "was having a little\nfun with this. I'm sure some of you were\nhaving fun back at me. That's OK.",
    "start": "3030133",
    "end": "3035720"
  },
  {
    "text": "So let's continue on. Let's see how to use the pumping\nlemma to prove a language",
    "start": "3035720",
    "end": "3043610"
  },
  {
    "start": "3037000",
    "end": "3267000"
  },
  {
    "text": "is not regular. So I put the pumping\nlemma up here just so you can remember\nthe statement of it.",
    "start": "3043610",
    "end": "3051630"
  },
  {
    "text": "So let's take the language\nD, which is the language 0 to the k 1 to the k for any k.",
    "start": "3051630",
    "end": "3058220"
  },
  {
    "text": "So that's some number\nof zeros followed by an equal number of ones.",
    "start": "3058220",
    "end": "3063420"
  },
  {
    "text": "We're going to prove\nthat language is not regular by using\nthe pumping lemma.",
    "start": "3063420",
    "end": "3069750"
  },
  {
    "text": "And this is going to be\njust an ironclad proof. It's not going to say, well,\nI couldn't think of how to--",
    "start": "3069750",
    "end": "3076100"
  },
  {
    "text": "I couldn't think of how to\nfind it a finite automaton. This is going to be-- this is going to\nreally be a proof.",
    "start": "3076100",
    "end": "3083819"
  },
  {
    "text": "So we want to show\nthat D is not regular. And we're going to give--",
    "start": "3083820",
    "end": "3089190"
  },
  {
    "text": "these things always go as\na proof by contradiction. So proof by contradiction--\nhopefully as a reminder to you,",
    "start": "3089190",
    "end": "3095430"
  },
  {
    "text": "the way that works\nis you're going to assume the opposite of\nwhat you're trying to prove. And then from that, something\ncrazy is going to happen,",
    "start": "3095430",
    "end": "3104010"
  },
  {
    "text": "something you know is\nobviously false or wrong. And so therefore\nyour assumption,",
    "start": "3104010",
    "end": "3109690"
  },
  {
    "text": "which is the opposite of what\nyou were trying to prove, had to be wrong. And so therefore, the thing\nyou're trying to prove",
    "start": "3109690",
    "end": "3114780"
  },
  {
    "text": "has to be right. That's the essence of what's\ncalled proof by contradiction.",
    "start": "3114780",
    "end": "3120040"
  },
  {
    "text": "So first of all,\nwe're going to assume, to get our contradiction,\nthat D is regular,",
    "start": "3120040",
    "end": "3126359"
  },
  {
    "text": "which is what we're trying\nto show is not the case. Now, if D is regular, then we\ncan apply the pumping lemma up",
    "start": "3126360",
    "end": "3134520"
  },
  {
    "text": "above here, which gives us\nthat pumping length p, which",
    "start": "3134520",
    "end": "3140150"
  },
  {
    "text": "says that any string\nlonger than p can be pumped and you stay in the language. That's what the pumping\nlemma tells you.",
    "start": "3140150",
    "end": "3146200"
  },
  {
    "text": "So let's pick the string\ns, which is the string 0 to the p 1 to the p.",
    "start": "3146200",
    "end": "3151360"
  },
  {
    "text": "Here's sort of a picture\nof s off on the side here. So a bunch of zeros followed\nby an equal number of ones.",
    "start": "3151360",
    "end": "3159190"
  },
  {
    "text": "And that string is in D because\nD is strings of that form.",
    "start": "3159190",
    "end": "3165700"
  },
  {
    "text": "And it's longer than p. Obviously, it's of length 2p.",
    "start": "3165700",
    "end": "3171019"
  },
  {
    "text": "So the pumping lemma\ntells us there's a way to cut it up satisfying\nthose three conditions.",
    "start": "3171020",
    "end": "3177390"
  },
  {
    "text": "So how in the world could\nwe possibly cut s up?",
    "start": "3177390",
    "end": "3182450"
  },
  {
    "text": "Well, remember the\nthree conditions. And especially condition 3 is\ngoing to come in handy here. Say that you can cut s\nup into three pieces--",
    "start": "3182450",
    "end": "3190099"
  },
  {
    "text": "x, y, and z-- where the first two pieces lie\nin the first p symbols of s",
    "start": "3190100",
    "end": "3199849"
  },
  {
    "text": "at most p long. So x and y together\nare not very big. They don't extend beyond\nthe first half of x--",
    "start": "3199850",
    "end": "3208640"
  },
  {
    "text": "first half of s. And in particular,\nthey're all zeros. x and y are going to be\nall zeros. z is going",
    "start": "3208640",
    "end": "3214550"
  },
  {
    "text": "to perhaps have\nsome zeros and will have the rest of the\nones-- will have the ones.",
    "start": "3214550",
    "end": "3220890"
  },
  {
    "text": "Now, the pumping lemma says\nthat if you cut it up that way,",
    "start": "3220890",
    "end": "3228220"
  },
  {
    "text": "you can repeat y as\nmany times as you like and you stay in the language. But that's obviously false,\nbecause if you repeat y--",
    "start": "3228220",
    "end": "3235589"
  },
  {
    "text": "which now has only zeros-- you're going to\nhave too many zeros. And so the resulting\nstring is no longer",
    "start": "3235590",
    "end": "3241530"
  },
  {
    "text": "going to be of the form\n0 to the k 1 to the k. It's going to be lots of zeros\nfollowed by not so many ones.",
    "start": "3241530",
    "end": "3248700"
  },
  {
    "text": "That's not in the language. And that violates what\nthe pumping lemma tells you is supposed to happen.",
    "start": "3248700",
    "end": "3254290"
  },
  {
    "text": "And that's a contradiction. So therefore, our assumption\nthat D is regular is false. And so we conclude\nthat D is not regular.",
    "start": "3254290",
    "end": "3261430"
  },
  {
    "text": "So that's a fairly simple one. I thought I would do\nanother couple of examples, because you have\nthis on your homework",
    "start": "3261430",
    "end": "3267250"
  },
  {
    "text": "and I thought it\nmight be helpful. So here's the second one--\nslightly harder, but not too much.",
    "start": "3267250",
    "end": "3273570"
  },
  {
    "text": "Let's take the\nlanguage F, which is-- looks like the string's ww.",
    "start": "3273570",
    "end": "3281570"
  },
  {
    "text": "These are strings that-- two copies of the same string.",
    "start": "3281570",
    "end": "3286980"
  },
  {
    "text": "For any string that\nmight be in sigma star, so for any string\nat all, I'm going to have two copies\nof that string.",
    "start": "3286980",
    "end": "3293370"
  },
  {
    "text": "And so F is those strings\nwhich can be-- which are just two copies of the same string.",
    "start": "3293370",
    "end": "3298890"
  },
  {
    "text": " We're going to show\nthat F is not regular.",
    "start": "3298890",
    "end": "3306010"
  },
  {
    "text": "These things always\ngo the same way. It's the same pattern. You prove by contradiction. So you assume for\ncontradiction that--",
    "start": "3306010",
    "end": "3312000"
  },
  {
    "text": "oh, D. That's bad. That was copied\nfrom my other slide. That's wrong.",
    "start": "3312000",
    "end": "3317630"
  },
  {
    "text": "Let's see if I can actually\nmake this work here. ",
    "start": "3317630",
    "end": "3326150"
  },
  {
    "text": "Good. Assume for contradiction\nthat F is regular. ",
    "start": "3326150",
    "end": "3331980"
  },
  {
    "text": "The pumping lemma\ngives F as above. And so now we need\nto choose a string s",
    "start": "3331980",
    "end": "3336990"
  },
  {
    "text": "that's in F to do the pumping\nand show that the pumping lemma",
    "start": "3336990",
    "end": "3342460"
  },
  {
    "text": "is going to fail. You're going to pump\nand you're going to get something which is not\nin the language, which is--",
    "start": "3342460",
    "end": "3349630"
  },
  {
    "text": "shows that the pump-- something has gone wrong. But which s to choose? And sometimes that's\nwhere the creativity",
    "start": "3349630",
    "end": "3356950"
  },
  {
    "text": "in applying the\npumping lemma comes in, because you have\nto figure out which is the right string\nyou're going to pump on.",
    "start": "3356950",
    "end": "3364240"
  },
  {
    "text": "So you might try the string-- well, 0 to the p 0 to the p.",
    "start": "3364240",
    "end": "3369280"
  },
  {
    "text": "That's certainly in F. It's\ntwo copies of the same string.",
    "start": "3369280",
    "end": "3375180"
  },
  {
    "text": "Here it is. I've written lots\nof zeros followed",
    "start": "3375180",
    "end": "3381210"
  },
  {
    "text": "by the same number of zeros. The problem is, if\nyou use that string,",
    "start": "3381210",
    "end": "3387480"
  },
  {
    "text": "it actually is a string\nthat you can pump. You can break that string\nup into three pieces.",
    "start": "3387480",
    "end": "3395010"
  },
  {
    "text": "And then, if you let\ny be the string 00-- actually, you have to\nbe a little careful.",
    "start": "3395010",
    "end": "3400470"
  },
  {
    "text": "The string just 0 doesn't\nwork, because there's an evenness-oddness\nphenomenon going here. So you might want to\njust think about that.",
    "start": "3400470",
    "end": "3407140"
  },
  {
    "text": "But if you let y\nbe the string 00, then if you have the string xy--",
    "start": "3407140",
    "end": "3413670"
  },
  {
    "text": "x any number of y's-- it's still just going\nto be a bunch of zeros. And you're going to be able to\nsee that that string is still",
    "start": "3413670",
    "end": "3420329"
  },
  {
    "text": "in the language. So you haven't learned anything. If the pumping lemma\nworks and you're",
    "start": "3420330",
    "end": "3427339"
  },
  {
    "text": "satisfying the pumping lemma,\nyou haven't learned anything. So what you need to find\nis some other string.",
    "start": "3427340",
    "end": "3435650"
  },
  {
    "text": "That was a bad choice for s. Find a different string. So here's a different choice,\n0 to the p 1 0 to the p 1.",
    "start": "3435650",
    "end": "3442850"
  },
  {
    "text": "So that's two copies\nof the same string. And you're going to\nshow it can't be-- we're going to show\nit can't be pumped.",
    "start": "3442850",
    "end": "3448875"
  },
  {
    "text": "So here's a picture\nof that string here. So zeros followed by\n1, zeros followed by 1.",
    "start": "3448875",
    "end": "3454790"
  },
  {
    "text": "And now it's a very similar\nto the first argument. If you cut it into three\npieces in such a way",
    "start": "3454790",
    "end": "3460730"
  },
  {
    "text": "that it satisfies\nthe conditions, the first two pieces are\ngoing to be residing only among the zeros.",
    "start": "3460730",
    "end": "3466490"
  },
  {
    "text": "And so therefore,\nwhen you repeat a y you're no longer going to have\ntwo copies of the same string.",
    "start": "3466490",
    "end": "3475460"
  },
  {
    "text": "And so it won't be\nin the language. So therefore, you've got a\ncontradiction and F is not",
    "start": "3475460",
    "end": "3481039"
  },
  {
    "text": "regular. So you have to play with the\npumping lemma a little bit. If you haven't seen that\nbefore it's going to be--",
    "start": "3481040",
    "end": "3488862"
  },
  {
    "text": "it takes a little\ngetting used to. But you have a few\nhomework questions that need to be solved\nusing the pumping lemma.",
    "start": "3488863",
    "end": "3495230"
  },
  {
    "text": "So now, let's look at-- lastly, there is another\nmethod that can come in,",
    "start": "3495230",
    "end": "3502040"
  },
  {
    "text": "which is combining\nclosure properties with the pumping lemma. So closure properties\nsometimes help you.",
    "start": "3502040",
    "end": "3509565"
  },
  {
    "text": "So let's look at the language\nB, which is actually, we saw earlier in\nthe lecture, where we have an equal number\nof zeros and ones.",
    "start": "3509565",
    "end": "3516730"
  },
  {
    "text": "Now, we could prove\nthat directly, using the pumping lemma,\nas not being regular.",
    "start": "3516730",
    "end": "3521860"
  },
  {
    "text": "But it's actually even easier. What we're going to prove--",
    "start": "3521860",
    "end": "3527680"
  },
  {
    "text": "that-- we're going to\nprove that it's not regular in a different way. First we're going to assume for\ncontradiction, as we often do,",
    "start": "3527680",
    "end": "3534173"
  },
  {
    "text": "that it is regular. And now we're going to use\nsomething-- we're going to use some other knowledge.",
    "start": "3534173",
    "end": "3539410"
  },
  {
    "text": "We're not going to use\nthe pumping lemma here because we're going\nto take advantage of an earlier case where\nwe used the pumping lemma.",
    "start": "3539410",
    "end": "3547170"
  },
  {
    "text": "And so now we know\nthat the string-- the language 0 star 1 star\nis a regular language,",
    "start": "3547170",
    "end": "3554099"
  },
  {
    "text": "because it's described\nby a regular expression. If you take the B, which is\nthe equal numbers of zeros",
    "start": "3554100",
    "end": "3560970"
  },
  {
    "text": "and ones, and you intersect\nit with 0 star 1 star, that's going to be\na regular language",
    "start": "3560970",
    "end": "3566490"
  },
  {
    "text": "if B was regular, using\nclosure under intersection.",
    "start": "3566490",
    "end": "3571740"
  },
  {
    "text": "But this language B\nintersect 0 star 1 star is the language of equal\nnumbers of zeros and ones",
    "start": "3571740",
    "end": "3579810"
  },
  {
    "text": "where the zeros come first. And that's the\nlanguage D that we",
    "start": "3579810",
    "end": "3584940"
  },
  {
    "text": "showed two slides back, that we\nalready know can't be regular.",
    "start": "3584940",
    "end": "3589990"
  },
  {
    "text": "So that intersection\ncannot be regular. And so it violates\nthe closure property.",
    "start": "3589990",
    "end": "3597440"
  },
  {
    "text": "And again, we get\na contradiction. So that's a different way of\nsometimes making a shortcut",
    "start": "3597440",
    "end": "3606490"
  },
  {
    "text": "to prove a language\nis not regular. So we have-- in our\nlast 10 minutes or so,",
    "start": "3606490",
    "end": "3612830"
  },
  {
    "text": "we're going to\nshift gears totally, in an entirely different\nway, and consider a new model of computation\nwhich is more powerful,",
    "start": "3612830",
    "end": "3621500"
  },
  {
    "text": "that can actually\ndo things that we can't do with finite automata. And these are called\ncontext-free grammars.",
    "start": "3621500",
    "end": "3628470"
  },
  {
    "text": "So this is really\njust an introduction. We're going to spend all\nof next lecture looking",
    "start": "3628470",
    "end": "3633950"
  },
  {
    "text": "at context-free grammars and\ntheir associated languages. But let's just do--",
    "start": "3633950",
    "end": "3640766"
  },
  {
    "text": "get a preview. So a context-free\ngrammar looks like this.",
    "start": "3640766",
    "end": "3646410"
  },
  {
    "text": "You have a bunch of these-- ",
    "start": "3646410",
    "end": "3651660"
  },
  {
    "text": "what we call substitution\nrules, or rules, sometimes, which just\nlook like a symbol,",
    "start": "3651660",
    "end": "3658560"
  },
  {
    "text": "arrow, a string of symbols.  That's what a\ncontext-free grammar",
    "start": "3658560",
    "end": "3665130"
  },
  {
    "text": "looks like at a high level. Let's define some terms.",
    "start": "3665130",
    "end": "3672140"
  },
  {
    "text": "So a rule, as I\njust described, is going to be-- look-- it's\ngoing to be a symbol, which",
    "start": "3672140",
    "end": "3678500"
  },
  {
    "text": "we're going to call a variable. And that's going to have an\narrow to a string of other--",
    "start": "3678500",
    "end": "3684590"
  },
  {
    "text": "possibly, other variables\nand symbols called terminals.",
    "start": "3684590",
    "end": "3690080"
  },
  {
    "text": "So a variable is a symbol that\nappears on the left-hand side of a rule.",
    "start": "3690080",
    "end": "3696320"
  },
  {
    "text": "Anything that appears\non the left-hand side is going to be considered\nto be a variable.",
    "start": "3696320",
    "end": "3701345"
  },
  {
    "text": " So S and R are both variables.",
    "start": "3701345",
    "end": "3708420"
  },
  {
    "text": "Now, other symbols that\nappear in the grammar which don't appear in the\nleft-hand side--",
    "start": "3708420",
    "end": "3715520"
  },
  {
    "text": "those are going to\nbe called terminals. So here, 0 and 1 are terminals.",
    "start": "3715520",
    "end": "3722645"
  },
  {
    "text": "Now, you may think that\nempty string should also be a terminal . But that's not a symbol. Empty string is a string.",
    "start": "3722645",
    "end": "3729280"
  },
  {
    "text": "It's just a string of length 0. So I'm not considering empty\nstring to be a terminal.",
    "start": "3729280",
    "end": "3734310"
  },
  {
    "text": " So-- and then there's going\nto be a special variable which",
    "start": "3734310",
    "end": "3742028"
  },
  {
    "text": "is going to be considered the\nstarting variable, just like we had a starting state. And that's typically going to be\nwritten as the top-left symbol.",
    "start": "3742028",
    "end": "3749100"
  },
  {
    "text": "So this symbol s, here, is\ngoing to be the starting symbol. And grammars can be used to\ndefine languages and to--",
    "start": "3749100",
    "end": "3760270"
  },
  {
    "text": "well, to generate strings\nand to define languages. So first of all, let's\nsee how a grammar,",
    "start": "3760270",
    "end": "3765340"
  },
  {
    "text": "using this as an illustration,\ncan generate strings. ",
    "start": "3765340",
    "end": "3770960"
  },
  {
    "text": "Actually, just to emphasize\nthis terminology here, in this particular example\nwe had three rules.",
    "start": "3770960",
    "end": "3779240"
  },
  {
    "text": "The two variables were R and S.\nThe two terminals were 0 and 1.",
    "start": "3779240",
    "end": "3784950"
  },
  {
    "text": "And the start variable was\nthis top left-hand symbol, as I mentioned-- the S.",
    "start": "3784950",
    "end": "3790670"
  },
  {
    "text": "So grammars generate strings. The way they do is you\nfollow a certain procedure,",
    "start": "3790670",
    "end": "3796190"
  },
  {
    "text": "which is really pretty simple. You write down, first of\nall, the start variable.",
    "start": "3796190",
    "end": "3801850"
  },
  {
    "text": "And I'll do an\nexample in a second. You write down the\nstart variable. And then you take a look\nwhat you've written down.",
    "start": "3801850",
    "end": "3809520"
  },
  {
    "text": "And if it has any\nvariables in it, you can apply one of the\ncorresponding right-hand sides",
    "start": "3809520",
    "end": "3817290"
  },
  {
    "text": "of a rule as a substitution\nfor that variable.",
    "start": "3817290",
    "end": "3824800"
  },
  {
    "text": "And so-- like, for example,\nif you have an S in the thing you've written down, you can\nsubstitute for that S a 0S1.",
    "start": "3824800",
    "end": "3831885"
  },
  {
    "text": " Or you could substitute for that\nS an R. Or if you have an R,",
    "start": "3831885",
    "end": "3837589"
  },
  {
    "text": "you can substitute for\nthe S an empty string. So you're just going to keep on\ndoing that substitutions over",
    "start": "3837590",
    "end": "3844520"
  },
  {
    "text": "and over again until there\nare no variables left, so there's nothing\nleft to substitute.",
    "start": "3844520",
    "end": "3849650"
  },
  {
    "text": "Only terminals remain. At that point,\nyou have generated a string in the language.",
    "start": "3849650",
    "end": "3855020"
  },
  {
    "text": " So the language, then,\nis the collection of all generated strings.",
    "start": "3855020",
    "end": "3860355"
  },
  {
    "text": " Let's do an example. Here's an example of G1\ngenerating some string.",
    "start": "3860355",
    "end": "3867430"
  },
  {
    "text": "So as I mentioned,\nfirst of all, you're going to write down\nthe start variable.",
    "start": "3867430",
    "end": "3872950"
  },
  {
    "text": "And I'm just going to illustrate\nthis in two parallel tracks here. On the left side\nI'm going to show",
    "start": "3872950",
    "end": "3878770"
  },
  {
    "text": "you the tree of substitutions. And on the right side\nI'm going to show you the resulting string\nthat you get by applying",
    "start": "3878770",
    "end": "3884050"
  },
  {
    "text": "those substitutions. So over here I'm\ngoing to substitute",
    "start": "3884050",
    "end": "3889280"
  },
  {
    "text": "for S the string 0S1. So on the right-hand\nside I just have 0S1, because that's what\nI substituted for S.",
    "start": "3889280",
    "end": "3895430"
  },
  {
    "text": "But you'll see it's not\ngoing to-- it's going to look a little different in a second. Here, I'm going to-- again\nI still have a variable.",
    "start": "3895430",
    "end": "3902430"
  },
  {
    "text": "So I'm going to\nsubstitute for S 0S1. Now I have the string--",
    "start": "3902430",
    "end": "3908120"
  },
  {
    "text": "resulting string 00S11,\nbecause I've substituted 0S1",
    "start": "3908120",
    "end": "3913710"
  },
  {
    "text": "for the previous S, but the 0\nand 1 stick around from before. They don't go anywhere. So I have, at this point, 00S11.",
    "start": "3913710",
    "end": "3922070"
  },
  {
    "text": "Now I'm going to take\na different choice. I'm going to substitute for S--",
    "start": "3922070",
    "end": "3927840"
  },
  {
    "text": "I could have gone either way. This would have something--\nalmost like non-determinism here, because you have a choice.",
    "start": "3927840",
    "end": "3934390"
  },
  {
    "text": "I'm going to substitute for S-- instead of 0S1 I'm\ngoing to substitute R, because that's also legitimate\nin terms of the rules.",
    "start": "3934390",
    "end": "3941790"
  },
  {
    "text": "And so now I'm\ngoing to have 00R11.  And now R-- there's\nno choices here.",
    "start": "3941790",
    "end": "3948760"
  },
  {
    "text": "R can only be substituted\nfor by an empty string. So I get to R becomes\njust empty string.",
    "start": "3948760",
    "end": "3956060"
  },
  {
    "text": "And in terms of the\nstring generated, empty string doesn't\nadd anything. It just really is--",
    "start": "3956060",
    "end": "3962140"
  },
  {
    "text": "it's a nothing. So I get the string 0011. And this is a string\njust of terminal symbols.",
    "start": "3962140",
    "end": "3968380"
  },
  {
    "text": "And so that is a string in the\nlanguage of the grammar G1.",
    "start": "3968380",
    "end": "3973660"
  },
  {
    "text": " And if you think about\nit, G1's language",
    "start": "3973660",
    "end": "3979760"
  },
  {
    "text": "is that language\nthat we saw before, which I think we called D--",
    "start": "3979760",
    "end": "3986270"
  },
  {
    "text": "0 to the k 1 to the k for k\ngreater than or equal to 0. So this is an example of a\nlanguage that a context-free",
    "start": "3986270",
    "end": "3992690"
  },
  {
    "text": "grammar can do but a\nfinite automaton cannot do.",
    "start": "3992690",
    "end": "3998839"
  },
  {
    "text": "So that is our little\nintroduction to-- oops. There's one more check-in here.",
    "start": "3998840",
    "end": "4005329"
  },
  {
    "text": "Oh, yeah. So I'm asking you to\nactually look at-- let me get myself\nout of this picture",
    "start": "4005330",
    "end": "4012430"
  },
  {
    "text": "so you don't see\nme blocking things. And we will do\none last check-in.",
    "start": "4012430",
    "end": "4018940"
  },
  {
    "text": " Make sure you're staying\naround for the whole thing.",
    "start": "4018940",
    "end": "4024195"
  },
  {
    "text": " Now there could be several\nof these strings that are in the language. You have to click them\nall-- all of the ones",
    "start": "4024195",
    "end": "4031020"
  },
  {
    "text": "that you have found that are\nin the language of this grammar that can be generated by grammar\nG2, you have to click those.",
    "start": "4031020",
    "end": "4037599"
  },
  {
    "text": "I'll give you a little\nbit more time on this one to see which ones\nG2 can generate.",
    "start": "4037600",
    "end": "4044494"
  },
  {
    "text": "I'll give you a hint. It's more than one, but not all. ",
    "start": "4044495",
    "end": "4050890"
  },
  {
    "text": "So I see you're making\nsome progress here. ",
    "start": "4050890",
    "end": "4059560"
  },
  {
    "text": "Interesting. So please-- we're going to\nwrap this up very quickly.",
    "start": "4059560",
    "end": "4064617"
  },
  {
    "text": "You can-- somebody's telling\nme you can't unclick. Thank you. Good to know. ",
    "start": "4064617",
    "end": "4071790"
  },
  {
    "text": "Still, things are\ncoming in here. So let's not-- we're running\ntoward the end of the hour",
    "start": "4071790",
    "end": "4078560"
  },
  {
    "text": "here. I don't want to go over. So I'm going to end\nit in five seconds. Click away. And don't forget, we're\nnot going to charge you",
    "start": "4078560",
    "end": "4087840"
  },
  {
    "text": "if you get it wrong. Sharing results. I don't know why it has\nan orange one there,",
    "start": "4087840",
    "end": "4094650"
  },
  {
    "text": "because there are several\ncorrect answers here.",
    "start": "4094650",
    "end": "4100630"
  },
  {
    "text": "So it's A, B, and D are correct. You can get any of those.",
    "start": "4100630",
    "end": "4106649"
  },
  {
    "text": "It's really sort of two\ncopies of the language we had before next to one another.",
    "start": "4106649",
    "end": "4114600"
  },
  {
    "text": "And so the only thing\nyou cannot get is 1010.",
    "start": "4114600",
    "end": "4121778"
  },
  {
    "text": "So I encourage you\nto think about that. And I will come to our\nlast side of today,",
    "start": "4121779",
    "end": "4130189"
  },
  {
    "text": "which is just a quick review. I can put myself back. ",
    "start": "4130189",
    "end": "4137639"
  },
  {
    "text": "So we showed how to convert\nDFAs to regular expressions. And the summary is that DFAs,\nNFAs, GNFAs, even, and regular",
    "start": "4137640",
    "end": "4147089"
  },
  {
    "text": "expressions are all equivalent\nin the class of languages they can describe.",
    "start": "4147090",
    "end": "4154380"
  },
  {
    "text": "The second thing\nwe did was a method for proving languages\nnot regular by using the pumping lemma or\nclosure properties.",
    "start": "4154380",
    "end": "4160859"
  },
  {
    "text": "And lastly, we introduced\ncontext-free grammars. And we're going to see more\nabout those on Thursday.",
    "start": "4160859",
    "end": "4168000"
  },
  {
    "text": "So with that, I think\nwe're out of time. And thank you for the\nnotes of appreciation.",
    "start": "4168000",
    "end": "4175229"
  },
  {
    "text": "And I will-- I think we're going to end here.",
    "start": "4175229",
    "end": "4182560"
  },
  {
    "text": "And see you on\nThursday, if not before.",
    "start": "4182560",
    "end": "4188819"
  },
  {
    "start": "4188820",
    "end": "4202000"
  }
]