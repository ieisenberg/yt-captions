[
  {
    "text": "[AUDIO LOGO] ",
    "start": "0",
    "end": "11760"
  },
  {
    "text": "ANA BELL: All right, everyone. Let's get started. So today's lecture will be on\nthis thing called dictionaries,",
    "start": "11760",
    "end": "18279"
  },
  {
    "text": "and it's not the\ndictionaries that our parents and grandparents used. Notice, I never actually used\nregular book dictionaries",
    "start": "18280",
    "end": "26110"
  },
  {
    "text": "either, maybe once\nin my entire life. But it's actually on\na Python dictionary.",
    "start": "26110",
    "end": "32090"
  },
  {
    "text": "So this is going to be a new\ndata type that we have not worked with before. But it'll be a\ncompound data type,",
    "start": "32090",
    "end": "39040"
  },
  {
    "text": "much like we've seen\nlists and tuples to be. It's just going to be\nvery different than lists and tuples.",
    "start": "39040",
    "end": "45850"
  },
  {
    "text": "So before I introduce\na bunch of syntax and what a Python\ndictionary is, let's",
    "start": "45850",
    "end": "53670"
  },
  {
    "text": "try to just motivate the need\nfor such a data structure. So suppose we have\nthe following problem.",
    "start": "53670",
    "end": "60800"
  },
  {
    "text": "We've been dealing\nwith this problem in many of our lectures. But we, once again, want to\nstore student information.",
    "start": "60800",
    "end": "68970"
  },
  {
    "text": "So let's say we want to\nstore grade information for a bunch of students.",
    "start": "68970",
    "end": "75320"
  },
  {
    "text": "With what we know so far, we can\nstore information using lists.",
    "start": "75320",
    "end": "80450"
  },
  {
    "text": "It's a very reasonable\ndata structure to use because we might get\nnew students in the class. Students might drop.",
    "start": "80450",
    "end": "86240"
  },
  {
    "text": "Grades might change,\nthings like that. So let's use this mutable\ndata structure a list.",
    "start": "86240",
    "end": "91440"
  },
  {
    "text": "Let's say we want to store names\nof students and their grades in the class, like their\nfinal letter grade.",
    "start": "91440",
    "end": "98190"
  },
  {
    "text": "Additionally, we can store\nthings like micro quiz grades and psets grades. But for now, let's\njust assume we're",
    "start": "98190",
    "end": "103979"
  },
  {
    "text": "storing just the names and\nthe final grades in the class. So if we do this using\nlists, one reasonable way",
    "start": "103980",
    "end": "109140"
  },
  {
    "text": "to store this\ninformation is by saying, well, I'm going to have\na list of all the names of the students in my class.",
    "start": "109140",
    "end": "115070"
  },
  {
    "text": "I'm going to have a\nlist of all the grades of these students in the class. And I'm basically going\nto go index by index",
    "start": "115070",
    "end": "121470"
  },
  {
    "text": "and make the rule that\nsays, at a particular index, I'm storing all the information\nrelated to this one person.",
    "start": "121470",
    "end": "129220"
  },
  {
    "text": "So at index 0 here,\nI'm storing the name of the student and their grade. At index 1, I'm storing\nthe name of that student",
    "start": "129220",
    "end": "137250"
  },
  {
    "text": "John and their grade. At index 2, I'm storing\nthe name of that student and their grade. And at index 3, and\nso on and so on.",
    "start": "137250",
    "end": "144450"
  },
  {
    "text": "So now I basically\nhave to remember that, for a particular index, I\nam storing all the information",
    "start": "144450",
    "end": "150300"
  },
  {
    "text": "related to that student, right? OK, so seems like a\nreasonable way to do this.",
    "start": "150300",
    "end": "158849"
  },
  {
    "text": "Now, let's say that\nI wanted to look up the grade for a\nparticular student.",
    "start": "158850",
    "end": "164110"
  },
  {
    "text": "So I write this function\ncalled get_grade. It takes in some parameters.",
    "start": "164110",
    "end": "169780"
  },
  {
    "text": "So the first thing it will take\nin is the name of the student, so Ana, for example. And I would pass in the list\nof all the names in my class",
    "start": "169780",
    "end": "178077"
  },
  {
    "text": "and the list of all the\ngrades in the class. So these two lists that I've\npreviously created, right?",
    "start": "178077",
    "end": "183480"
  },
  {
    "text": "So these get passed\nin to this function. So you can imagine if we have\na list of everybody at MIT,",
    "start": "183480",
    "end": "188550"
  },
  {
    "text": "these lists are going to\nbe pretty large that we're passing in as parameters. How do we actually\ngrab the letter grade",
    "start": "188550",
    "end": "195810"
  },
  {
    "text": "associated with a student? Well, we're going\nto use the fact that the letter grade\nfor the student at index",
    "start": "195810",
    "end": "202890"
  },
  {
    "text": "I in the grades list is going\nto be grabbing the letter",
    "start": "202890",
    "end": "211350"
  },
  {
    "text": "grade for the student at that\nsame index in the name list. So we have to figure out\nthis particular student being",
    "start": "211350",
    "end": "218100"
  },
  {
    "text": "passed in here, what index\nthey're at in the names list. So that's what this\nline of code is doing.",
    "start": "218100",
    "end": "224610"
  },
  {
    "text": "It's using this index\nfunction on the name list with a parameter,\nfor example, Ana.",
    "start": "224610",
    "end": "231629"
  },
  {
    "text": "So this will return for us the\nindex where Ana is in my list.",
    "start": "231630",
    "end": "237040"
  },
  {
    "text": "So from the previous example,\nit's going to say that-- it's going to return the\nnumber 0 because Ana is stored",
    "start": "237040",
    "end": "244110"
  },
  {
    "text": "in the name list at index 0. So now that I have that index\nin hand stored in variable I,",
    "start": "244110",
    "end": "251080"
  },
  {
    "text": "can just index into the grade\nlist at that same index, OK? So I can get grade\nlist at index 0",
    "start": "251080",
    "end": "258130"
  },
  {
    "text": "will return for me\nthe grade that I got for that particular\nclass or whatever we're storing here, OK?",
    "start": "258130",
    "end": "264909"
  },
  {
    "text": "And then we just return the\ntuple student comma great. So this becomes\nreally messy, right?",
    "start": "264910",
    "end": "270759"
  },
  {
    "text": "I already mentioned\nthat if I have a list of a whole\nbunch of students for a really large class or\nthe entire university, then",
    "start": "270760",
    "end": "277840"
  },
  {
    "text": "it becomes really\nunwieldy to just keep passing in all these lists. If I have in addition\nall these micro quiz",
    "start": "277840",
    "end": "284890"
  },
  {
    "text": "lists and all these\nproblem set lists that also store additional\ninformation for the student, I then have to pass those in\nfor their respective functions.",
    "start": "284890",
    "end": "293320"
  },
  {
    "text": "And so it gets\nreally messy, right, writing these functions that\nretrieve this information.",
    "start": "293320",
    "end": "299380"
  },
  {
    "text": "And additionally, if we're\nmutating these lists, like if a new student\ncomes in and we need to add all\ntheir information,",
    "start": "299380",
    "end": "305210"
  },
  {
    "text": "I need to make sure to update\nevery single one of these lists that I'm maintaining. If a student leaves\nor drops the class,",
    "start": "305210",
    "end": "311500"
  },
  {
    "text": "I need to remember to\nremove that index from all of these different lists. So really, really\nmessy situation",
    "start": "311500",
    "end": "317920"
  },
  {
    "text": "that we could get into by\nusing this method to store information about students.",
    "start": "317920",
    "end": "324830"
  },
  {
    "text": "So let's try a\ndifferent approach. Instead of using all of\nthese different lists,",
    "start": "324830",
    "end": "330160"
  },
  {
    "text": "let's say that we're\ngoing to store everything in a master list. So we're not storing many lists.",
    "start": "330160",
    "end": "336310"
  },
  {
    "text": "We'll just store one list\nfor the grades in the class. And the way that\nit will be stored",
    "start": "336310",
    "end": "342220"
  },
  {
    "text": "according to in this slide is\ngoing to be this grades list. OK, so this is one list\nwith three elements in it.",
    "start": "342220",
    "end": "349780"
  },
  {
    "text": "And you can imagine if we have\nmore students we would just put all these students\nin this master list.",
    "start": "349780",
    "end": "355220"
  },
  {
    "text": "So what is each one of\nthese student elements?",
    "start": "355220",
    "end": "360310"
  },
  {
    "text": "Well, each student\nelement is itself a list. So already, I've\ngot my master list.",
    "start": "360310",
    "end": "365360"
  },
  {
    "text": "And each element within\nthis list is also a list. So this is a list for\nEric, a list for Ana,",
    "start": "365360",
    "end": "371080"
  },
  {
    "text": "and a list for John. These are variable names. What are these lists\ngoing to be comprised of?",
    "start": "371080",
    "end": "377530"
  },
  {
    "text": "Well, they will be\ncomprised of three things. So notice two commas here. So the first thing\nis their name.",
    "start": "377530",
    "end": "384340"
  },
  {
    "text": "The second thing is another list\ncontaining their problem set grades. And I'm using this\nelement of that list",
    "start": "384340",
    "end": "393280"
  },
  {
    "text": "to denote what that set\nof numbers represents. And then another list\nas my third element",
    "start": "393280",
    "end": "401268"
  },
  {
    "text": "being the scores for\nthe micro quiz grades. And again, I'm denoting\nthe first element of that list telling me\nwhat this list contains.",
    "start": "401268",
    "end": "410800"
  },
  {
    "text": "OK, so I've got\nlists, master list with three sublists\nfor my three students.",
    "start": "410800",
    "end": "416949"
  },
  {
    "text": "And each one of those lists\ncontains three elements, a string, a list,\nand another list. And those two lists are then\nalso comprised of a string",
    "start": "416950",
    "end": "425410"
  },
  {
    "text": "and a list themselves. So super complex. A data structure-- or a sort\nof composition or design",
    "start": "425410",
    "end": "431800"
  },
  {
    "text": "choice that I've made here. But it solves the\nproblem of maintaining",
    "start": "431800",
    "end": "437290"
  },
  {
    "text": "all these different lists\nin separate variables. So now, let's say I wanted\nto write a function that",
    "start": "437290",
    "end": "443980"
  },
  {
    "text": "gets the grades for a particular\nstudent for either problem set or micro quizzes grades.",
    "start": "443980",
    "end": "451169"
  },
  {
    "text": "This is the function\nthat does that. So again, it's not\nlooking super nice.",
    "start": "451170",
    "end": "456990"
  },
  {
    "text": "So what is this function\ngoing to take in? The who is going to be a\nstring representing the name, so for example, Ana.",
    "start": "456990",
    "end": "463410"
  },
  {
    "text": "The what will be also\na string representing what information I'd like\nto grab, either ps or mq.",
    "start": "463410",
    "end": "471630"
  },
  {
    "text": "And the data is going to be my\nmaster list of all the grades. So this grades equals\nthis list of every body.",
    "start": "471630",
    "end": "479250"
  },
  {
    "text": "So what is this\ncode going to do? Well, it has a\nfor loop down here",
    "start": "479250",
    "end": "484820"
  },
  {
    "text": "and a nested for loop inside it. The outer for loop\nbasically looks",
    "start": "484820",
    "end": "489920"
  },
  {
    "text": "through each one of\nthese elements here and looks at the\nelement at index 0,",
    "start": "489920",
    "end": "496070"
  },
  {
    "text": "so either Eric, Ana,\nor John, and grabs only the list where that\npiece, this string here",
    "start": "496070",
    "end": "503690"
  },
  {
    "text": "matches the who. So if student at index\n0 equals who right here,",
    "start": "503690",
    "end": "509030"
  },
  {
    "text": "then we found the student\nI'm interested in grabbing the information for. Cool. So now I've gotten I've\ngrabbed the right piece,",
    "start": "509030",
    "end": "515840"
  },
  {
    "text": "the right list. And now I'm interested in their\ngrades for a particular what,",
    "start": "515840",
    "end": "522440"
  },
  {
    "text": "so either mq or ps. So I do the exact same thing\nagain for that list here,",
    "start": "522440",
    "end": "527730"
  },
  {
    "text": "right? So if I'm interested\nin Ana's ps grades, I grab these lists here.",
    "start": "527730",
    "end": "536300"
  },
  {
    "text": "And then I'm going\nto check if the-- info at index 0, so\neither this ps or this mq",
    "start": "536300",
    "end": "543080"
  },
  {
    "text": "matches the what,\nso either ps or mq to match what I'm\ninterested in grabbing, the information,\nwhat information I'm",
    "start": "543080",
    "end": "549512"
  },
  {
    "text": "interested in grabbing. And then I'm going to go\ninside this if statement if they match, and then I\nreturn the who and the info.",
    "start": "549512",
    "end": "557220"
  },
  {
    "text": "So again, super complex. No need to understand this that\nwell because we're not going",
    "start": "557220",
    "end": "562410"
  },
  {
    "text": "to use this method for long. So this get_grades\nhere, for example,",
    "start": "562410",
    "end": "567890"
  },
  {
    "text": "if I grab Eric's micro quiz\ngrades and I run the code, it will return for\nme this tuple that",
    "start": "567890",
    "end": "574840"
  },
  {
    "text": "returns for me the\nname of the student, and then just this sublist\nof the thing that I was interested, in\nthis case, micro quiz.",
    "start": "574840",
    "end": "582100"
  },
  {
    "text": "And it grabs for\nme all the grades. And then I can then\nindex into this returned tuple to grab either the first\nquiz or the second quiz grades.",
    "start": "582100",
    "end": "590389"
  },
  {
    "text": "OK, and same for Ana. In this particular\ncase, it grabs",
    "start": "590390",
    "end": "596130"
  },
  {
    "text": "for me just the\ntuple with my name and then that sublist with\nthe problem set grades.",
    "start": "596130",
    "end": "601890"
  },
  {
    "text": " OK, so again, really messy.",
    "start": "601890",
    "end": "608090"
  },
  {
    "text": "I've made my design\nchoice for how to create all these lists\nwith sublists and sublists",
    "start": "608090",
    "end": "613430"
  },
  {
    "text": "within those. And so I'd have to\ndocument that probably if I was using this method.",
    "start": "613430",
    "end": "619189"
  },
  {
    "text": "And then this function to\ngrab this information, again, super complex.",
    "start": "619190",
    "end": "625100"
  },
  {
    "text": "Hard to read. So it's not really a great\nway to store information either, but the\nidea behind this,",
    "start": "625100",
    "end": "632460"
  },
  {
    "text": "which is to try\nto store some data associated with some sort\nof key, right, the ps or mq,",
    "start": "632460",
    "end": "640640"
  },
  {
    "text": "or in this case, I'm\nstoring a bunch of grades for Eric or Ana or John. That idea we can explore.",
    "start": "640640",
    "end": "647120"
  },
  {
    "text": "And that's basically what\ndictionaries will do for us. It will allow us to create\ndata structures that",
    "start": "647120",
    "end": "654020"
  },
  {
    "text": "map some sort of custom\nindex, a key, to some value.",
    "start": "654020",
    "end": "659130"
  },
  {
    "text": "So much like a book\ndictionary does, it maps a word to\nits definition.",
    "start": "659130",
    "end": "664140"
  },
  {
    "text": "We'll be able to create our\nown dictionaries that map some object to another object.",
    "start": "664140",
    "end": "669940"
  },
  {
    "text": "So when we create\na dictionary, we call every quote\nunquote \"element\"",
    "start": "669940",
    "end": "675540"
  },
  {
    "text": "in the dictionary an entry. And that entry is that\nmapping of a key to a value.",
    "start": "675540",
    "end": "682600"
  },
  {
    "text": "So just to draw a\nparallel with the list, we can think of a list\nas mapping something",
    "start": "682600",
    "end": "688440"
  },
  {
    "text": "to another something. The thing that a list maps is\nthis index, numbers 0, 1, 2,",
    "start": "688440",
    "end": "696780"
  },
  {
    "text": "3 in that order, right? So it has to have an\nelement at index 0, and then that index increases\nby 1 from thereon, OK?",
    "start": "696780",
    "end": "705450"
  },
  {
    "text": "And for each one\nof these indices, I mapping that index to some\nelement in my list, right?",
    "start": "705450",
    "end": "713370"
  },
  {
    "text": "That's basically\nwhat the list does. There's something associated\nwith index 0, something associated with\nindex 1, and so on.",
    "start": "713370",
    "end": "719649"
  },
  {
    "text": "So it's like a very\nrestrictive dictionary, right? An actual Python\ndictionary works",
    "start": "719650",
    "end": "726330"
  },
  {
    "text": "in a similar way except\nthat now I am not putting any restrictions on my indices.",
    "start": "726330",
    "end": "733800"
  },
  {
    "text": "My indices here become these\ncustom indices called a key. And so now I'm able to associate\na value, equivalent element",
    "start": "733800",
    "end": "744220"
  },
  {
    "text": "in my list, with that key. So I can have an element\nassociated with any object.",
    "start": "744220",
    "end": "752779"
  },
  {
    "text": "So I am using the term value\nhere, and in a dictionary",
    "start": "752780",
    "end": "759020"
  },
  {
    "text": "the key is associated\nwith a value. And that's one entry\nin the dictionary. Now, this is going to be\na little bit confusing",
    "start": "759020",
    "end": "765769"
  },
  {
    "text": "because we've been\nusing the term value to refer to just\nsome object's value,",
    "start": "765770",
    "end": "772130"
  },
  {
    "text": "right, like int-- variable a has value five\nor something like that.",
    "start": "772130",
    "end": "777899"
  },
  {
    "text": "But now I'm going to try to\nmake a conscious effort, now that we're introducing\ndictionary and dictionary values associated with\na key, to whenever",
    "start": "777900",
    "end": "786200"
  },
  {
    "text": "I'm talking about the\ndictionaries value to say dictionary value\njust so it's not confusing.",
    "start": "786200",
    "end": "791839"
  },
  {
    "text": "But just keep that in mind. It can be a little bit\nconfusing at first, now that we're using the\nsame terminology for two",
    "start": "791840",
    "end": "797630"
  },
  {
    "text": "different things. So we're going to go through-- in this lecture, we're\ngoing to introduce",
    "start": "797630",
    "end": "803260"
  },
  {
    "text": "a bunch of syntax and\noperations with dictionaries. And there will be lots\nof you-try-it exercises just to give you a little bit\nof practice with the syntax",
    "start": "803260",
    "end": "810525"
  },
  {
    "text": "because this is kind of\na syntax-heavy lecture. So hopefully it\nhelps a little bit.",
    "start": "810525",
    "end": "816040"
  },
  {
    "text": "But let's first see how to store\ndata in a Python dictionary. So as I mentioned, a Python\ndictionary stores entries.",
    "start": "816040",
    "end": "825120"
  },
  {
    "text": "And that entry is\na key value pair. So you're mapping\none key to its value.",
    "start": "825120",
    "end": "832810"
  },
  {
    "text": "The key can be any\nimmutable object, and we're going to see what\nthis means in a little bit. And the value associated\nwith that key,",
    "start": "832810",
    "end": "839310"
  },
  {
    "text": "or the Python value\nassociated with that key, can be any object\nyou'd like, even",
    "start": "839310",
    "end": "844380"
  },
  {
    "text": "lists or other dictionaries. So the way we create\na Python dictionary",
    "start": "844380",
    "end": "849440"
  },
  {
    "text": "is by using these open\nand closed curly braces. So tuples were open\nand closed parentheses.",
    "start": "849440",
    "end": "856550"
  },
  {
    "text": "Lists were open and\nclosed square brackets. Dictionaries are open\nand closed curly braces.",
    "start": "856550",
    "end": "861780"
  },
  {
    "text": "And this creates inside\nmemory an empty dictionary, so a dictionary\nwith zero entries.",
    "start": "861780",
    "end": "867450"
  },
  {
    "text": "So the length of\nthat dictionary is 0. To create a dictionary\nwith one entry in it,",
    "start": "867450",
    "end": "873390"
  },
  {
    "text": "again, we have curly braces. And we add one entry in it. So this something\ncolon something",
    "start": "873390",
    "end": "880020"
  },
  {
    "text": "else is an entry in my\ndictionary, one entry. And the thing before\nthe colon is the key.",
    "start": "880020",
    "end": "886529"
  },
  {
    "text": "And the thing after\nthe colon is the value associated with that key. ",
    "start": "886530",
    "end": "893580"
  },
  {
    "text": "So you can think of it, if we're\ndrawing a parallel to lists, this is now mapping at\nthis custom index 4,",
    "start": "893580",
    "end": "900740"
  },
  {
    "text": "we're putting element 16.  OK, so we can also\ncreate dictionaries that",
    "start": "900740",
    "end": "908290"
  },
  {
    "text": "aren't just full of integers. And you can mix and match\ndata types as you'd like. But usually, in dictionaries\nwe have the keys all",
    "start": "908290",
    "end": "916390"
  },
  {
    "text": "be the same type and the\nvalues all be the same type. But you can certainly\nmix and match types, just",
    "start": "916390",
    "end": "922810"
  },
  {
    "text": "like you could create lists\nand tuples full of an integer and a float and another list\nand mix and match in that way.",
    "start": "922810",
    "end": "931200"
  },
  {
    "text": "So here I'm creating\na dictionary, again, open and closed curly\nbraces starts my dictionary.",
    "start": "931200",
    "end": "936470"
  },
  {
    "text": "And it has four elements in\nit, sorry, four entries in it.",
    "start": "936470",
    "end": "941639"
  },
  {
    "text": "And each entry is\nseparated by a comma. I've got here my first entry.",
    "start": "941640",
    "end": "947190"
  },
  {
    "text": "So it is mapping the key Ana\nto the dictionary value B.",
    "start": "947190",
    "end": "954350"
  },
  {
    "text": "My second entry key mapped\nto value A. Third entry maps key John to value B. And last\nentry maps key Katy to value A.",
    "start": "954350",
    "end": "963680"
  },
  {
    "text": "So this is a dictionary that\nessentially maps strings to other strings.",
    "start": "963680",
    "end": "969720"
  },
  {
    "text": "So you can see here I've\nvisualized the dictionary that we just created.",
    "start": "969720",
    "end": "975199"
  },
  {
    "text": "We've got these\ncustom indices, right? So we're basically mapping\nnames to letter grades, OK?",
    "start": "975200",
    "end": "985150"
  },
  {
    "text": "Everything OK so far? Does it make sense, I\nguess, conceptually? OK, awesome.",
    "start": "985150",
    "end": "992010"
  },
  {
    "text": "OK, so the first\nthing we'd like to do is, once we have a dictionary\nfull of a bunch of entries,",
    "start": "992010",
    "end": "997950"
  },
  {
    "text": "how do we grab an entry? How do we look up a value\nassociated with a key?",
    "start": "997950",
    "end": "1004930"
  },
  {
    "text": "So the way we do that is in\na very similar way to the way we look up an element\nin a list, right?",
    "start": "1004930",
    "end": "1014100"
  },
  {
    "text": "A key in a dictionary\nis just a custom index. So how did we look up\nan element in a list?",
    "start": "1014100",
    "end": "1020560"
  },
  {
    "text": "So if I wanted the\nelement at index 3, I would basically say\nL squared brackets 3.",
    "start": "1020560",
    "end": "1025770"
  },
  {
    "text": "And that grabs for me\nthe value at that index. Well, now, I've got my\ncustom indices, right?",
    "start": "1025770",
    "end": "1032230"
  },
  {
    "text": "My custom indices\nare these strings. The syntax will be\nexactly the same.",
    "start": "1032230",
    "end": "1037699"
  },
  {
    "text": "I've got this custom\nindex I'd like to look up. So I say, dictionary, name,\nsquare bracket, custom index.",
    "start": "1037700",
    "end": "1046490"
  },
  {
    "text": "So if I say grade\nsquare bracket John, Python will go in to my\ndictionary named grades.",
    "start": "1046490",
    "end": "1052990"
  },
  {
    "text": "It'll look up the key John. And it'll return\nfor me the value associated with that key, B.",
    "start": "1052990",
    "end": "1061940"
  },
  {
    "text": "So this entire\nexpression here evaluates or gets replaced\nwith the string B.",
    "start": "1061940",
    "end": "1068150"
  },
  {
    "text": "Just like when we indexed into\na list, L1 square brackets 3, we replaced that entire\nindexing operation",
    "start": "1068150",
    "end": "1074659"
  },
  {
    "text": "with the value of the\nelement at that location. So similar here.",
    "start": "1074660",
    "end": "1079680"
  },
  {
    "text": "If I try to index\ninto a dictionary and that key doesn't\nexist, so notice",
    "start": "1079680",
    "end": "1085130"
  },
  {
    "text": "my dictionary has\nno string Grace, Python will give me a key error. So if you run code\nwith dictionaries",
    "start": "1085130",
    "end": "1091160"
  },
  {
    "text": "and you get a key error\nexception being raised in the console, you will know\nthat you're trying to index",
    "start": "1091160",
    "end": "1097040"
  },
  {
    "text": "into a key that doesn't exist. ",
    "start": "1097040",
    "end": "1102090"
  },
  {
    "text": "So the question\nmight be, yes, we're able to look up a\nvalue given a key.",
    "start": "1102090",
    "end": "1109670"
  },
  {
    "text": "Can we do the same\nthing but backwards? Given a key, sorry, given a\nvalue, like A, B, C, whatever,",
    "start": "1109670",
    "end": "1116809"
  },
  {
    "text": "can we look up a key\nassociated with that value? And the answer is no. We'd have to write\nsome sort of loop",
    "start": "1116810",
    "end": "1123470"
  },
  {
    "text": "or some sort of code that\ngoes through every item in my dictionary\nto check each value",
    "start": "1123470",
    "end": "1130070"
  },
  {
    "text": "and see whether the key\nassociated with that value is equivalent to the\none I'm looking for. So there is no nice expression\nto do that backward operation.",
    "start": "1130070",
    "end": "1138679"
  },
  {
    "text": "And that's because the values in\nmy dictionary can be repeated. So if I look up\nthe value B, and I",
    "start": "1138680",
    "end": "1145370"
  },
  {
    "text": "want what's the key\nassociated with B, well, there's\nactually two of them. So how does Python know\nI want both of them?",
    "start": "1145370",
    "end": "1151940"
  },
  {
    "text": "How does it know I\nwant only one of them? How does it know I want maybe\na list of all these things? It doesn't, right?",
    "start": "1151940",
    "end": "1157400"
  },
  {
    "text": "So you'd have to\nwrite code that does something for that operation.",
    "start": "1157400",
    "end": "1162580"
  },
  {
    "text": "And we're going to see\nhow to do that later. OK, so let's have you\nwork on this You Try It.",
    "start": "1162580",
    "end": "1168250"
  },
  {
    "text": "And this is just an exercise\nin looking up a value. So this is a function\nI'd like to write",
    "start": "1168250",
    "end": "1174570"
  },
  {
    "text": "according to the specification. So it's called find_grades. Grades is a dictionary mapping\nstudent names to grades,",
    "start": "1174570",
    "end": "1181860"
  },
  {
    "text": "so string-to-string\nexactly like we've seen in the previous slide. And students is going to\nbe a list of student names.",
    "start": "1181860",
    "end": "1190370"
  },
  {
    "text": "So in the example here, I've\ngot my input dictionary, this thing we just saw. And then my list\nof student grades",
    "start": "1190370",
    "end": "1197240"
  },
  {
    "text": "is, for example, these\ntwo strings Matt and Katy. For a bunch of these questions,\nespecially in the micro quiz",
    "start": "1197240",
    "end": "1204880"
  },
  {
    "text": "and things like that, if\nit gets a little confusing when I try to write the\nspecification in a very",
    "start": "1204880",
    "end": "1212019"
  },
  {
    "text": "detailed way to make\nit clear what I'd like from this function,\nit's important to try",
    "start": "1212020",
    "end": "1217810"
  },
  {
    "text": "to use the example to\nhelp you figure out what we'd like\nbecause we're writing the specification\nin a general sense.",
    "start": "1217810",
    "end": "1224570"
  },
  {
    "text": "But the example should\nhopefully make things really clear for what we'd like. So in this particular case, what\nwe want the function to return",
    "start": "1224570",
    "end": "1232360"
  },
  {
    "text": "is a list of the grades for\nthe students being passed in,",
    "start": "1232360",
    "end": "1237470"
  },
  {
    "text": "right? So we look up Matt. We see that their grade\nis a C. We look up Katy. Their grade is an A, so I want\nto return the list C comma",
    "start": "1237470",
    "end": "1244390"
  },
  {
    "text": "A in that same order that\nI passed in my students. So I'll give you a couple\nof minutes to work on that,",
    "start": "1244390",
    "end": "1249950"
  },
  {
    "text": "and then we can\nwrite it together. So that's line 94.",
    "start": "1249950",
    "end": "1255429"
  },
  {
    "text": " So this is just an\nexercise on looking up values in the dictionary.",
    "start": "1255430",
    "end": "1262587"
  },
  {
    "text": "All right, does anybody\nhave a start for me? ",
    "start": "1262587",
    "end": "1269120"
  },
  {
    "text": "Yes, please. STUDENT: [INAUDIBLE] ANA BELL: Yep, Lnew. How about that?",
    "start": "1269120",
    "end": "1277280"
  },
  {
    "text": "So this will be my results list. Yep. STUDENT: [INAUDIBLE]",
    "start": "1277280",
    "end": "1282529"
  },
  {
    "text": "ANA BELL: Yep, for loop. STUDENT: [INAUDIBLE] ",
    "start": "1282530",
    "end": "1296580"
  },
  {
    "text": "ANA BELL: Yep, so grade\nsquare bracket lm looks up the value associated\nwith my student named lm.",
    "start": "1296580",
    "end": "1305370"
  },
  {
    "text": "And maybe we can save it\nlike this grade equals this. And then you said append?",
    "start": "1305370",
    "end": "1311370"
  },
  {
    "text": "Yep, so we can do\nLnew.append the grade.",
    "start": "1311370",
    "end": "1317440"
  },
  {
    "text": "Anything else? STUDENT: [INAUDIBLE] ANA BELL: Yep, a return. So we can return Lnew.",
    "start": "1317440",
    "end": "1324080"
  },
  {
    "text": "Yep, so very reasonable code. I like it a lot. ",
    "start": "1324080",
    "end": "1331110"
  },
  {
    "text": "Besides the first\nlecture, I don't know that we've written any\ncode that didn't involve a loop. So your best bet\nfor writing code",
    "start": "1331110",
    "end": "1338550"
  },
  {
    "text": "for any sort of\nthing in this class is to think, what loop can I do? So let's run the code, and it\nshould return for me C comma A.",
    "start": "1338550",
    "end": "1346350"
  },
  {
    "text": "And it does.  Now that we can iterate--\nso I mentioned this before,",
    "start": "1346350",
    "end": "1354520"
  },
  {
    "text": "but once we're iterating over\ntuples and lists and things like that, one\nthing I would add, just for debugging purposes,\nis say something like lm",
    "start": "1354520",
    "end": "1361780"
  },
  {
    "text": "is, and then you can say an\nexample of what it could be,",
    "start": "1361780",
    "end": "1366910"
  },
  {
    "text": "like Ana or Matt or\nwhatever it could be, just to remind yourself\nthat that thing,",
    "start": "1366910",
    "end": "1373000"
  },
  {
    "text": "that loop variable is a string. And so it's one less\nthing to remember as you're writing further code.",
    "start": "1373000",
    "end": "1378340"
  },
  {
    "text": "But this is really nice. ",
    "start": "1378340",
    "end": "1383940"
  },
  {
    "text": "OK, so dictionaries\nare already proving to be really, really useful.",
    "start": "1383940",
    "end": "1389140"
  },
  {
    "text": "We can create values\nassociated with custom indices. And if we want to grab the value\nassociated with that custom",
    "start": "1389140",
    "end": "1397020"
  },
  {
    "text": "index, it's really just a\nmatter of indexing using a key, using that specific key,\nmuch like we did indexing",
    "start": "1397020",
    "end": "1404790"
  },
  {
    "text": "into a list, OK? No need to loop, none\nof that iteration. It's just a single line of code\nthat indexes into the list.",
    "start": "1404790",
    "end": "1414950"
  },
  {
    "text": "So let's see a few more\noperations before we do the next You Try It. So I've got my list\nof grades that we've",
    "start": "1414950",
    "end": "1421419"
  },
  {
    "text": "been working with in the\npast couple of slides. Let's say that we\nnow want to add a new student and their grade.",
    "start": "1421420",
    "end": "1428410"
  },
  {
    "text": "The way we do that is\nvery similar to the way that we would add\nan element to a list",
    "start": "1428410",
    "end": "1436100"
  },
  {
    "text": "once we already have an\nindex for that list, right? Here, notice we don't actually\nhave a slot for Grace.",
    "start": "1436100",
    "end": "1443740"
  },
  {
    "text": "Yet, I'd like to add\nher to my dictionary. That's OK.",
    "start": "1443740",
    "end": "1448809"
  },
  {
    "text": "With this particular syntax\nhere, so grades at key Grace, if Python does not find Grace\nin my dictionary of keys,",
    "start": "1448810",
    "end": "1458530"
  },
  {
    "text": "it will just add her, OK,\nwhich is really nice, right? I don't need to check if\nshe's already in there.",
    "start": "1458530",
    "end": "1466080"
  },
  {
    "text": "There's no looping. You just say grades at\nGrace equals A. Boom, it adds it for you.",
    "start": "1466080",
    "end": "1472559"
  },
  {
    "text": "What if I want to change\nan entry in my dictionary? Well, let's say I want to change\nGrace's grade to a C. Grades",
    "start": "1472560",
    "end": "1480180"
  },
  {
    "text": "at custom index grace equals C.\nWe'll go in, look at my keys.",
    "start": "1480180",
    "end": "1486450"
  },
  {
    "text": "When Grace didn't exist, Python\nadded her with her value. But she already exists\nthere, so Python will just",
    "start": "1486450",
    "end": "1493320"
  },
  {
    "text": "overwrite her value. So really nice, something\nto look out for in case",
    "start": "1493320",
    "end": "1500200"
  },
  {
    "text": "you already have values\nin the dictionary. You want to be careful\nif you actually do want to overwrite things.",
    "start": "1500200",
    "end": "1505480"
  },
  {
    "text": "But it's really,\nreally nice behavior. And it's different\nthan lists, right,",
    "start": "1505480",
    "end": "1510830"
  },
  {
    "text": "especially adding an\nentry to the dictionary. ",
    "start": "1510830",
    "end": "1516920"
  },
  {
    "text": "You can delete\nentries, much like we deleted entries from a list. We use the del function.",
    "start": "1516920",
    "end": "1524350"
  },
  {
    "text": "And the del function\nsays, what entry you'd like to delete from what list?",
    "start": "1524350",
    "end": "1529900"
  },
  {
    "text": "So here we just say the name\nof our dictionary at index Ana. So this will completely\nremove Ana and her value",
    "start": "1529900",
    "end": "1538690"
  },
  {
    "text": "and the value associated\nwith Ana from the dictionary. ",
    "start": "1538690",
    "end": "1546200"
  },
  {
    "text": "So what I want to make a note of\nis that our dictionary is being mutated with all of\nthese different methods",
    "start": "1546200",
    "end": "1552280"
  },
  {
    "text": "or all of these different\nfunctions, right? So here, when I\nadded Grace, I've mutated my original\ndictionary, right?",
    "start": "1552280",
    "end": "1558550"
  },
  {
    "text": "The animation didn't make\na copy of this dictionary with Grace added, leaving\nthe original unchanged.",
    "start": "1558550",
    "end": "1564970"
  },
  {
    "text": "I've literally gone in and\nmutated my original dictionary to add Grace. I've mutated the original\ndictionary to change her grade.",
    "start": "1564970",
    "end": "1573039"
  },
  {
    "text": "I've mutated the\noriginal dictionary to remove Ana from\nthe dictionary, right? So all these\nfunctions are actually",
    "start": "1573040",
    "end": "1579910"
  },
  {
    "text": "mutating my dictionary. OK, one other very\nuseful thing that you",
    "start": "1579910",
    "end": "1586080"
  },
  {
    "text": "can do with\ndictionaries is to check if a key is in my dictionary.",
    "start": "1586080",
    "end": "1591750"
  },
  {
    "text": "So we do this using in\noperator, this in keyword. We've seen in keyword being\nused to check if an element is",
    "start": "1591750",
    "end": "1599900"
  },
  {
    "text": "in a list, to check if a\nsubstring or a character is in a string, to check if\nsome element is in a tuple.",
    "start": "1599900",
    "end": "1606919"
  },
  {
    "text": "We can also use it to check\nif an element or a key is in my dictionary.",
    "start": "1606920",
    "end": "1613510"
  },
  {
    "text": "So I want to make a note. It's only checking the keys. It does not look for the\nvalues in the dictionary.",
    "start": "1613510",
    "end": "1620310"
  },
  {
    "text": "We'll see how to\ncheck if some value is in the dictionary\nin a little bit. But the in keyword\nspecifically only",
    "start": "1620310",
    "end": "1626429"
  },
  {
    "text": "looks at the keys\nin the dictionary. So if I have the expression-- the string John is in grades,\nPython only looks at the keys",
    "start": "1626430",
    "end": "1635640"
  },
  {
    "text": "and say, yep, there it is. I don't care what value's\nassociated with it. I just care that\nit's in my keys.",
    "start": "1635640",
    "end": "1642070"
  },
  {
    "text": "So this entire expression\nhere, John in grades, will evaluate, so be\nreplaced with true.",
    "start": "1642070",
    "end": "1648270"
  },
  {
    "text": "Daniel, obviously, is not\nin my dictionary keys. So it returns false. B is not in my dictionary keys,\neven though it's in my values.",
    "start": "1648270",
    "end": "1657900"
  },
  {
    "text": "It still returns false because\nit only looks at the keys. ",
    "start": "1657900",
    "end": "1664580"
  },
  {
    "text": "All right, let's have\nyou try this exercise. So function is called\nfind in L. Again,",
    "start": "1664580",
    "end": "1673470"
  },
  {
    "text": "we can use the specifications\nand the example to help us figure out what\nwe'd like from this function.",
    "start": "1673470",
    "end": "1679840"
  },
  {
    "text": "So Ld is going to be a\nlist of dictionaries. So in the example here I've\ngot three dictionaries defined,",
    "start": "1679840",
    "end": "1689399"
  },
  {
    "text": "and the first parameter here,\nthe thing being passed as Ld is the list with D1,\nD2, D3 as my elements.",
    "start": "1689400",
    "end": "1697710"
  },
  {
    "text": "And k is just an integer. What I'd like to do is\nreturn true from the function",
    "start": "1697710",
    "end": "1705970"
  },
  {
    "text": "if that k is a key in\nany of these dictionaries",
    "start": "1705970",
    "end": "1711460"
  },
  {
    "text": "and false otherwise. So as soon as I see\na key that matches k, I want to return true.",
    "start": "1711460",
    "end": "1717710"
  },
  {
    "text": "So in this example here,\nwhen I look for the k 2 inside these dictionaries, D1\ndoesn't have it, but D2 has it.",
    "start": "1717710",
    "end": "1726580"
  },
  {
    "text": "So I would return true. When I look for 25 in that\nsame list of dictionaries,",
    "start": "1726580",
    "end": "1732880"
  },
  {
    "text": "25 is a value in\none of these, in D3, but it's not a key\nin D1, D2 or D3.",
    "start": "1732880",
    "end": "1739495"
  },
  {
    "text": "So that would return false. ",
    "start": "1739495",
    "end": "1744890"
  },
  {
    "text": "All right, so that's just\na little lower, line 115.",
    "start": "1744890",
    "end": "1750442"
  },
  {
    "text": "Give you a couple of\nmoments, and then we can write it\ntogether like usual. All right, does anyone\nwant to start me off here?",
    "start": "1750442",
    "end": "1756110"
  },
  {
    "text": "So how can we do this? STUDENT: Create a loop.",
    "start": "1756110",
    "end": "1762650"
  },
  {
    "text": "ANA BELL: Create a loop, yes. For? STUDENT: [INAUDIBLE]\nfor d in Ld.",
    "start": "1762650",
    "end": "1768520"
  },
  {
    "text": "ANA BELL: Yep. OK, so that means that D is-- I can say like K1 mapped to\nv1 or something like that,",
    "start": "1768520",
    "end": "1776649"
  },
  {
    "text": "right, key to a value. ",
    "start": "1776650",
    "end": "1783940"
  },
  {
    "text": "If k in D? Yep, so that will\ncheck for me my keys",
    "start": "1783940",
    "end": "1792020"
  },
  {
    "text": "in that particular dictionary\nthat I'm looking at right now. Yep, we can immediately\nreturn true, right?",
    "start": "1792020",
    "end": "1799923"
  },
  {
    "text": "As soon as we found\nit, no need to check the other dictionaries. Just pop out of the\nfunction and return true.",
    "start": "1799923",
    "end": "1808125"
  },
  {
    "text": "STUDENT: [INAUDIBLE] ANA BELL: Same inside\nthe if or inside",
    "start": "1808125",
    "end": "1813715"
  },
  {
    "text": "the for or outside the 4. STUDENT: Outside the 4. ANA BELL: Outside the\nfor, we can return false.",
    "start": "1813715",
    "end": "1819150"
  },
  {
    "text": "Yep. I like this code a lot.",
    "start": "1819150",
    "end": "1824450"
  },
  {
    "text": "Uses this in operator\nto do the task. So the return false\noutside of for loop",
    "start": "1824450",
    "end": "1830930"
  },
  {
    "text": "works really well\nbecause if I've gone through every\nD inside Ld here,",
    "start": "1830930",
    "end": "1836059"
  },
  {
    "text": "then I'm checking every\nsingle dictionary, right? As soon as I find one\nthat has that key,",
    "start": "1836060",
    "end": "1843740"
  },
  {
    "text": "this return true acts like\na break and a return, right?",
    "start": "1843740",
    "end": "1849290"
  },
  {
    "text": "So it breaks out of the loop\nand returns immediately. And it doesn't return false.",
    "start": "1849290",
    "end": "1855820"
  },
  {
    "text": "But if I've gone\nthrough every dictionary and didn't find the key\nmatching k, then I return false.",
    "start": "1855820",
    "end": "1863759"
  },
  {
    "text": "Yeah. Did anybody try it a\ndifferent way, or is this-- ",
    "start": "1863760",
    "end": "1873870"
  },
  {
    "text": "we could certainly try it\nwith a Boolean flag, right? We could flag the fact that\nwe found it through some loop.",
    "start": "1873870",
    "end": "1881010"
  },
  {
    "text": "And keep track of it, and at\nthe end, just return that flag. That's another way to do it. But this is probably\nthe most Pythonic way.",
    "start": "1881010",
    "end": "1887460"
  },
  {
    "text": " So we can run it on these\ntwo examples here, right?",
    "start": "1887460",
    "end": "1893299"
  },
  {
    "text": "So I'm looking up\n2 to return true and looking up 25\nto return false.",
    "start": "1893300",
    "end": "1898309"
  },
  {
    "text": "And it does. Questions about this code\nor dictionary so far. Is everything OK so far?",
    "start": "1898310",
    "end": "1907980"
  },
  {
    "text": "OK. All right, a couple\nmore operations. So, so far, we've looked\nup values in a dictionary.",
    "start": "1907980",
    "end": "1915130"
  },
  {
    "text": "We've added stuff\nto the dictionary. We've deleted stuff\nfrom the dictionary. One really useful\nthing to do is to be",
    "start": "1915130",
    "end": "1922360"
  },
  {
    "text": "able to look at every single\nentry in my dictionary. The reason why we'd\nwant to do this",
    "start": "1922360",
    "end": "1928450"
  },
  {
    "text": "is because we should assume that\nwhen we create our dictionaries there's no order to them, right?",
    "start": "1928450",
    "end": "1935650"
  },
  {
    "text": "This is very much unlike lists. Lists had an order to them. We knew that the first element\nin our list was at index 0.",
    "start": "1935650",
    "end": "1943120"
  },
  {
    "text": "The next one was at index\n1, and so on, right? Lists were ordered\nsequences of elements.",
    "start": "1943120",
    "end": "1948790"
  },
  {
    "text": "But dictionaries are not\nordered sequences of elements.",
    "start": "1948790",
    "end": "1954460"
  },
  {
    "text": "That's not super true. Up until a very recent\nversion of Python,",
    "start": "1954460",
    "end": "1960460"
  },
  {
    "text": "there was no guaranteed order. They were put in some order\nthat I couldn't figure out",
    "start": "1960460",
    "end": "1966640"
  },
  {
    "text": "how it was determined. But I forget which Python\nversion, maybe 3.6 or something",
    "start": "1966640",
    "end": "1973220"
  },
  {
    "text": "like that, started to guarantee\nan order for the dictionary",
    "start": "1973220",
    "end": "1978740"
  },
  {
    "text": "elements. And that order\nwas the same order that you inserted\nthe elements, OK?",
    "start": "1978740",
    "end": "1984679"
  },
  {
    "text": "But if you'd like to\nwrite robust code that could be run by people using\nan older version of Python,",
    "start": "1984680",
    "end": "1991070"
  },
  {
    "text": "you should write\nthe code assuming that no such order exists. And it's OK. It doesn't make the code\nthat much harder to write.",
    "start": "1991070",
    "end": "1999360"
  },
  {
    "text": "But if we're not\nassuming any order to Python entries\nin the dictionary,",
    "start": "1999360",
    "end": "2005520"
  },
  {
    "text": "then that means a lot\nof times, we actually have to look at each\nentry in the dictionary to do some sort of task.",
    "start": "2005520",
    "end": "2013169"
  },
  {
    "text": "So one of the first things\nyou might want to do is to iterate through all\nthe keys in the dictionary.",
    "start": "2013170",
    "end": "2019460"
  },
  {
    "text": "To do that, we use a\nfunction called grades.keys. And this grades.keys\nfunction here",
    "start": "2019460",
    "end": "2028070"
  },
  {
    "text": "doesn't mutate the\ndictionary at all. But instead, it returns\nfor me an iterable, a sequence of values, which are\nall the keys in my dictionary.",
    "start": "2028070",
    "end": "2037640"
  },
  {
    "text": "Now, the data type\nof this return value is called dict_keys.",
    "start": "2037640",
    "end": "2043880"
  },
  {
    "text": "It's not a data type we've\nworked with before, OK? It looks really weird. But if you'd like, and\nyou don't have to do this,",
    "start": "2043880",
    "end": "2051230"
  },
  {
    "text": "you can always cast this\nsequence of values-- that's type dict keys--\nto a list, like this.",
    "start": "2051230",
    "end": "2057899"
  },
  {
    "text": "So if you cast to\na list grades.keys, it gives for us this more\nrecognizable list with each key",
    "start": "2057900",
    "end": "2065000"
  },
  {
    "text": "being an element in the list. You don't have to do this. But if it makes it easier\nfor you, you can, OK?",
    "start": "2065000",
    "end": "2073239"
  },
  {
    "text": "So this line of code here,\ngrades.keys returns for you-- you can think of it like this\niterable, this list of all",
    "start": "2073239",
    "end": "2080335"
  },
  {
    "text": "the keys in the dictionary. Again, they're not\nordered, right? They're ordered in the\norder that I added them into the dictionary, right,\nAna, then Matt, then John, then",
    "start": "2080335",
    "end": "2087580"
  },
  {
    "text": "Katy. But they're not sorted\nin alphabetical order. If you have integers,\nthey won't be sorted in ascending\nor descending order.",
    "start": "2087580",
    "end": "2093969"
  },
  {
    "text": "So it's best to just not\nassume an order to begin with. Similarly, we can get an\niterable of all the values",
    "start": "2093969",
    "end": "2101160"
  },
  {
    "text": "in the dictionary. And to do this, no surprise\nthere, we use grades.values.",
    "start": "2101160",
    "end": "2107970"
  },
  {
    "text": "And this is, again, a\nfunction which doesn't mutate the grades at all. But instead, it gets replaced\nwith this dict values data",
    "start": "2107970",
    "end": "2115529"
  },
  {
    "text": "type. I've never seen\nit before either. And you can cast it\nto a list if you'd",
    "start": "2115530",
    "end": "2120599"
  },
  {
    "text": "like because it makes more sense\nto us at this point in time, which just returns for us this\nlist of every single value",
    "start": "2120600",
    "end": "2127350"
  },
  {
    "text": "in my dictionary. Again, no order, right? We can see that there's no\norder except for the order",
    "start": "2127350",
    "end": "2133230"
  },
  {
    "text": "that we actually\nadded the elements in. Yeah. STUDENT: When you said\nlike it acts like a couple,",
    "start": "2133230",
    "end": "2139480"
  },
  {
    "text": "you mean like if I do\ngrades that, at other times, it will print out the same list? ",
    "start": "2139480",
    "end": "2146940"
  },
  {
    "text": "ANA BELL: Yeah, yeah it'll\nprint out the same iterable, I guess, if you\ndo it again, yeah.",
    "start": "2146940",
    "end": "2152342"
  },
  {
    "text": "STUDENT: If we're just doing\nlike-- if we're just iterating over the dictionary, there can\nbe chances where it comes up",
    "start": "2152342",
    "end": "2158770"
  },
  {
    "text": "[INAUDIBLE]. ANA BELL: If you're iterating\nover the dictionary, not in the Python\nversion we're using.",
    "start": "2158770",
    "end": "2164690"
  },
  {
    "text": "But in a previous version,\nif you ran on your machine or if I ran the same\ncode on my machine,",
    "start": "2164690",
    "end": "2170562"
  },
  {
    "text": "it might have given\nme a different order.  But in the versions we're\nusing from now on in Python,",
    "start": "2170562",
    "end": "2178410"
  },
  {
    "text": "because you guys all probably\ndownloaded the latest version of Anaconda\nand Spyder, it",
    "start": "2178410",
    "end": "2184620"
  },
  {
    "text": "will guarantee the order that\nyou inserted the elements in. But if somebody's using\nan older version of Python",
    "start": "2184620",
    "end": "2190620"
  },
  {
    "text": "takes your code\nand runs it, they might actually get A, A,\nB, B or some other order",
    "start": "2190620",
    "end": "2197250"
  },
  {
    "text": "for these functions here. STUDENT: [INAUDIBLE] ANA BELL: Yeah, you're welcome.",
    "start": "2197250",
    "end": "2203569"
  },
  {
    "text": "So these being iterable\njust means that we can have something like 4 I--",
    "start": "2203570",
    "end": "2208940"
  },
  {
    "text": "so 4 k in grades.keys\nbasically giving us a loop where k is going to\nbe each element in this list.",
    "start": "2208940",
    "end": "2216680"
  },
  {
    "text": " So that's fine.",
    "start": "2216680",
    "end": "2221770"
  },
  {
    "text": "So we can iterate over the\nkeys, or we can iterate over the values directly. But what I find\npersonally most effective",
    "start": "2221770",
    "end": "2228220"
  },
  {
    "text": "is to iterate over each\nentry in the dictionary. So not just over the keys\nor the values by themselves,",
    "start": "2228220",
    "end": "2235510"
  },
  {
    "text": "to iterate over the keys\nand the values together. So to do that, we use this\nfunction called grades.items.",
    "start": "2235510",
    "end": "2245630"
  },
  {
    "text": "And unsurprisingly,\nthis will return also an iterable, where each\nelement in my iterable",
    "start": "2245630",
    "end": "2251330"
  },
  {
    "text": "is not just the\nkey or the value. It's a tuple of the key\ncomma the value, OK?",
    "start": "2251330",
    "end": "2258280"
  },
  {
    "text": "And again, we can\ncast it to a list to give us something\nthat's more recognizable. You can see now each\nelement in the returned list",
    "start": "2258280",
    "end": "2265180"
  },
  {
    "text": "is going to be the tuple\nwhere I have an entry, right? So my entry Ana comma B is\nthis first element in my return",
    "start": "2265180",
    "end": "2271960"
  },
  {
    "text": "list, and then Matt A and\nthen John B and then Katy A. So I grab these\nentries together where",
    "start": "2271960",
    "end": "2277450"
  },
  {
    "text": "I have access to both\nthe key and the value for that entry, which means-- and this is the\nimportant part-- that we",
    "start": "2277450",
    "end": "2284110"
  },
  {
    "text": "can do something like this. And we can do this for the\nprevious slide as well. But for this particular\ngrades.items iteration,",
    "start": "2284110",
    "end": "2293020"
  },
  {
    "text": "if we're grabbing a key\nvalue pair out of items, that means we can do\nsomething like this.",
    "start": "2293020",
    "end": "2299980"
  },
  {
    "text": "For k comma v in\ngrades.items means that Python will map k\nto the key for that entry",
    "start": "2299980",
    "end": "2308140"
  },
  {
    "text": "and v to the value\nfor that entry as I'm iterating over each\none of these pairs, right?",
    "start": "2308140",
    "end": "2314080"
  },
  {
    "text": "So with each iteration,\nI have access to both the key and the\nvalue for that entry,",
    "start": "2314080",
    "end": "2319310"
  },
  {
    "text": "which is pretty useful. So if I have this\nline of code here, if I print key k has\nvalue v, the k and the v",
    "start": "2319310",
    "end": "2328309"
  },
  {
    "text": "will change with\neach entry, right? I'm just grabbing both the key\nand the value for that entry. Yeah, question.",
    "start": "2328310",
    "end": "2334310"
  },
  {
    "text": "STUDENT: To use\n[INAUDIBLE] that item, is it actually like--\nis it actually tuple, or just the actual object? ANA BELL: It's not a tuple.",
    "start": "2334310",
    "end": "2340440"
  },
  {
    "text": "So the actual object type\nis this thing dict_items. So again, not a type that\nwe've worked with before.",
    "start": "2340440",
    "end": "2347400"
  },
  {
    "text": "But that's just the type, right? We've seen lists,\ntuples, dictionaries. Dict_items is another\ndata type, yeah.",
    "start": "2347400",
    "end": "2355579"
  },
  {
    "text": "But the cool thing is\nthat it's an iterable. So it's a sequence\nof values, which means that you can cast\nit to a list, which",
    "start": "2355580",
    "end": "2362090"
  },
  {
    "text": "is also a sequence of values. And it knows how\nto do that casting. And you get the more\nrecognizable list that we've been using.",
    "start": "2362090",
    "end": "2367777"
  },
  {
    "text": " Other questions.",
    "start": "2367777",
    "end": "2373680"
  },
  {
    "text": "OK, so I really like\nusing grade.items to iterate over entries. So let's have you\ntry this exercise.",
    "start": "2373680",
    "end": "2379270"
  },
  {
    "text": "So it's a function\ncalled count matches. It takes in one dictionary d.",
    "start": "2379270",
    "end": "2386410"
  },
  {
    "text": "I didn't say what the elements\nare, but you can mix and match. So here, I have a dictionary\nwith just int mapped to ints.",
    "start": "2386410",
    "end": "2394000"
  },
  {
    "text": "And here I've got a dictionary\nwhere it maps ints and strings and things like that. And what I want\nthis function to do",
    "start": "2394000",
    "end": "2400840"
  },
  {
    "text": "is tell me how many entries\nin this input dictionaries have the key match its value.",
    "start": "2400840",
    "end": "2406670"
  },
  {
    "text": "So here, in this first\nexample, the key here is 1. The value is 2. So they don't match.",
    "start": "2406670",
    "end": "2412450"
  },
  {
    "text": "These don't match,\nand these don't match. So the count should be 0. But down here in this example,\nthe 1 doesn't match 2,",
    "start": "2412450",
    "end": "2419410"
  },
  {
    "text": "so that's fine. But the key A matches\nits value, 1 count. Key 5 matches its\nvalue, 2 counts.",
    "start": "2419410",
    "end": "2427010"
  },
  {
    "text": "So this should return count 2.  All right, let's have you\nwork on that down by line 137.",
    "start": "2427010",
    "end": "2436250"
  },
  {
    "text": "And then we'll\nwrite it together.  All right, how can I start this?",
    "start": "2436250",
    "end": "2442275"
  },
  {
    "text": " Yes. STUDENT: A count. ANA BELL: A count, yes.",
    "start": "2442275",
    "end": "2448190"
  },
  {
    "text": "STUDENT: [INAUDIBLE] ANA BELL: 0, yep. STUDENT: A for loop? ANA BELL: A for loop, yep.",
    "start": "2448190",
    "end": "2453737"
  },
  {
    "text": "STUDENT: [INAUDIBLE] v,\nk in d.items [INAUDIBLE]..",
    "start": "2453737",
    "end": "2460360"
  },
  {
    "text": "ANA BELL: Yep, as\na function, yep. STUDENT: If v equal to k? ANA BELL: v equal to k.",
    "start": "2460360",
    "end": "2466640"
  },
  {
    "text": "Yep, so this is where\nmy value equals my key for that particular entry. STUDENT: Count\nequals count plus 1",
    "start": "2466640",
    "end": "2473840"
  },
  {
    "text": "ANA BELL: Count equals\ncount plus 1, perfect. Yep, return count.",
    "start": "2473840",
    "end": "2481230"
  },
  {
    "text": "Did anybody do it\na different way?  OK, awesome.",
    "start": "2481230",
    "end": "2488049"
  },
  {
    "text": "Yeah. STUDENT: Why do you have to\ncall it like [INAUDIBLE]?? I had to do it a\ndifferent way [INAUDIBLE]..",
    "start": "2488050",
    "end": "2495276"
  },
  {
    "text": "ANA BELL: We can write it, yeah. STUDENT: Yeah, I did\nlike the count equals 0, and then I did like for\nx in like [INAUDIBLE]",
    "start": "2495277",
    "end": "2502400"
  },
  {
    "text": "that it was just going\nto call the value. And [INAUDIBLE] like at\nx equals [INAUDIBLE]..",
    "start": "2502400",
    "end": "2509540"
  },
  {
    "text": "I thought that it was just\ngoing to call [INAUDIBLE].. ANA BELL: Yeah, so we can say\nfor x and d.keys or something",
    "start": "2509540",
    "end": "2515600"
  },
  {
    "text": "like that, right? Something like that, or no? We can also say for\nx and d, I think.",
    "start": "2515600",
    "end": "2521600"
  },
  {
    "text": "That might work too because\nit'll grab the key for us. But just to be safe, keys.",
    "start": "2521600",
    "end": "2527610"
  },
  {
    "text": "And now we need\nto grab the value. So how do you grab the\nvalue associated with key x?",
    "start": "2527610",
    "end": "2532740"
  },
  {
    "text": "STUDENT: Like key brackets. No, brackets are-- ANA BELL: Yeah, square brackets.",
    "start": "2532740",
    "end": "2538050"
  },
  {
    "text": "It's just indexing, right? So d square brackets x. Oops, if d square\nbrackets x equals--",
    "start": "2538050",
    "end": "2545670"
  },
  {
    "text": "so that's the value\nequals the key, right? Then, again, we count plus 1.",
    "start": "2545670",
    "end": "2553779"
  },
  {
    "text": "So this is our other way. ",
    "start": "2553780",
    "end": "2559530"
  },
  {
    "text": "Yep. So we don't have to use items,\nbut items makes things easier because we have in\nhand a variable that's",
    "start": "2559530",
    "end": "2567480"
  },
  {
    "text": "the value and the\nvariable that's the key. And doing things like indexing\nstarts to get confusing if--",
    "start": "2567480",
    "end": "2577940"
  },
  {
    "text": "it can be confusing. But yeah, both ways\nare very valid. So let's run it,\nand it should work.",
    "start": "2577940",
    "end": "2586240"
  },
  {
    "text": "So the first count\nis 0, as we expected. And the second count is 2.",
    "start": "2586240",
    "end": "2591510"
  },
  {
    "text": "Any questions about this code? Does it make sense? Is there another way\nthat somebody tried it?",
    "start": "2591510",
    "end": "2597119"
  },
  {
    "text": " Nope? OK, good. ",
    "start": "2597120",
    "end": "2606940"
  },
  {
    "text": "OK, so dictionaries are\nmutable objects, right? So all the aliasing and\ncloning rules apply.",
    "start": "2606940",
    "end": "2615110"
  },
  {
    "text": "Remember when we\ntalked about lists and using the equal\nsign between a list",
    "start": "2615110",
    "end": "2621190"
  },
  {
    "text": "and another variable name? Just a plain old\nequal sign means that you are making an\nalias for that list.",
    "start": "2621190",
    "end": "2628300"
  },
  {
    "text": "Same thing applies\nto dictionaries. So saying D1 equals D2,\nwhere D2 is a dictionary,",
    "start": "2628300",
    "end": "2634185"
  },
  {
    "text": "it means that\nyou've just created an alias for that dictionary. So if you change the dictionary\nfor either of those variables,",
    "start": "2634185",
    "end": "2640270"
  },
  {
    "text": "you're changing\nthe object itself. If you want to\nactually make a copy, you use d.copy where d is the\nname of the dictionary you'd",
    "start": "2640270",
    "end": "2647830"
  },
  {
    "text": "like a copy, and that gets\nyou a copy of that dictionary. And then you can change it\nwithout changing the original.",
    "start": "2647830",
    "end": "2655030"
  },
  {
    "text": "So let's talk a little\nbit about the values for a dictionary and\nthe keys because there are some restrictions on\nthe keys for the dictionary.",
    "start": "2655030",
    "end": "2663450"
  },
  {
    "text": "No restrictions on the values. So dictionary values\ncan be any type, right? You can have a\ndictionary value that's",
    "start": "2663450",
    "end": "2670440"
  },
  {
    "text": "a float, int, string, tuple. You can have a\ndictionary value that's a list, which is\nimmutable object.",
    "start": "2670440",
    "end": "2676140"
  },
  {
    "text": "You can have a dictionary value\nthat's another dictionary. All are OK, whatever you'd\nlike for the values to be.",
    "start": "2676140",
    "end": "2683020"
  },
  {
    "text": "You can have dictionary\nvalues that are duplicates. So you can have one key that\nmaps to value 5, another key",
    "start": "2683020",
    "end": "2689160"
  },
  {
    "text": "that maps to value 5. All good. OK?",
    "start": "2689160",
    "end": "2694900"
  },
  {
    "text": "So the values don't\nneed to be unique. We do have restrictions\non the keys though, OK?",
    "start": "2694900",
    "end": "2700380"
  },
  {
    "text": "The first restriction\non the keys is that it has to\nbe unique, right? So if you're mapping\na key 1 to value 5,",
    "start": "2700380",
    "end": "2711990"
  },
  {
    "text": "you cannot map a key 1 to value\n6 because if you go and look up",
    "start": "2711990",
    "end": "2718580"
  },
  {
    "text": "the value associated with 1,\nhow does Python know which value you'd like, the 5\nor the 6, right?",
    "start": "2718580",
    "end": "2726080"
  },
  {
    "text": "So the keys have to be\nunique, first of all. Second, the keys have to\nbe immutable, technically",
    "start": "2726080",
    "end": "2733950"
  },
  {
    "text": "hashable. But for the purposes\nof this class, just think of them as\nhaving to be immutable.",
    "start": "2733950",
    "end": "2739420"
  },
  {
    "text": "So a key can only be one\nof these types that we've seen so far, int, float,\nstring, tuple, or bool.",
    "start": "2739420",
    "end": "2745109"
  },
  {
    "text": "You cannot have a\nkey that's a list. You cannot have a key\nthat's a dictionary because they're mutable objects.",
    "start": "2745110",
    "end": "2751620"
  },
  {
    "text": "So let's look at that a\nlittle bit further in detail. So the reason why we can't\nhave a key that is mutable",
    "start": "2751620",
    "end": "2761990"
  },
  {
    "text": "is because of the way keys\nare stored in Python, sorry, the way the dictionaries\nare stored in Python.",
    "start": "2761990",
    "end": "2768280"
  },
  {
    "text": "So I'm going to show you an\nexample on the next slide. First I'm going to explain\nhow they're stored, and then we'll go through\nan example showing you",
    "start": "2768280",
    "end": "2774760"
  },
  {
    "text": "exactly why you can't\nhave a mutable structure. So the way dictionaries\nare stored in Python",
    "start": "2774760",
    "end": "2783119"
  },
  {
    "text": "is you first need a key\nto associate with a value. So everything starts\noff with the key you'd",
    "start": "2783120",
    "end": "2788910"
  },
  {
    "text": "like to add to your dictionary. So Python basically runs a\nfunction called a hash function",
    "start": "2788910",
    "end": "2795579"
  },
  {
    "text": "on the key. For simplicity's sake, let's say\nthe key you're trying to store is a number.",
    "start": "2795580",
    "end": "2801119"
  },
  {
    "text": "That hash function might\nreturn that same number. It might return something else. If you're trying to\nstore a string as a key,",
    "start": "2801120",
    "end": "2808980"
  },
  {
    "text": "Python again runs maybe\na different hash function that takes in that string, which\nmight be a bunch of characters,",
    "start": "2808980",
    "end": "2815579"
  },
  {
    "text": "and it converts\nit to some number. So the hash function\nalways takes in your key and converts it to a number, OK?",
    "start": "2815580",
    "end": "2824590"
  },
  {
    "text": "That number, think of it like\nrepresenting a memory location where you're going to store the\nvalue associated with that key.",
    "start": "2824590",
    "end": "2833765"
  },
  {
    "text": "So you're always\ngrabbing a number that represents a memory location. ",
    "start": "2833765",
    "end": "2839339"
  },
  {
    "text": "At that memory location,\nyou'll store the value. So next time you want to\nlook up the value associated",
    "start": "2839340",
    "end": "2845100"
  },
  {
    "text": "with a key, you just run\nthat same hash function. The function won't change. You run the same hash\nfunction on your object,",
    "start": "2845100",
    "end": "2851850"
  },
  {
    "text": "and you'll be able to get\nthat same integer back. You'll be able to grab\nthat same value back.",
    "start": "2851850",
    "end": "2857250"
  },
  {
    "text": "But if you're storing\nmutable objects, that means that\nobject can change. So if you run the hash function,\nthe thing that gives you",
    "start": "2857250",
    "end": "2864380"
  },
  {
    "text": "a number on something\nthat's changed, that number might\nnot be the same",
    "start": "2864380",
    "end": "2870767"
  },
  {
    "text": "because you've changed\nthe thing that you're passing into the function. So why would it give\nyou the same value back?",
    "start": "2870767",
    "end": "2877240"
  },
  {
    "text": "So let's look at this example. So again, we're storing grades. And let's say we're trying\nto store a bunch of grades",
    "start": "2877240",
    "end": "2883170"
  },
  {
    "text": "inside our memory. And let's say our memory is just\n16 locations, so 0 through 15.",
    "start": "2883170",
    "end": "2890580"
  },
  {
    "text": "So at these locations,\nI'm going to store grades associated with a person. The function I'm going\nto run on the student",
    "start": "2890580",
    "end": "2897890"
  },
  {
    "text": "is using their name. So I'm going to store\nAna's grade somewhere.",
    "start": "2897890",
    "end": "2903290"
  },
  {
    "text": "But I need to run a function\nthat takes in the string Ana and gets for me a number.",
    "start": "2903290",
    "end": "2909530"
  },
  {
    "text": "That number is where I'm\ngoing to store my grade. So a simple hash function\nwe might do is to say,",
    "start": "2909530",
    "end": "2915370"
  },
  {
    "text": "well, I'm going to take A and\nmap it to 1, B, map it to 2, C map it to 3, and so on.",
    "start": "2915370",
    "end": "2921480"
  },
  {
    "text": "I can sum all of those numbers\nassociated with my letters",
    "start": "2921480",
    "end": "2926700"
  },
  {
    "text": "in my name, 16. And then I can mod it with 16,\nwhich is how many entries I",
    "start": "2926700",
    "end": "2932310"
  },
  {
    "text": "have in my memory. So if I mod it with 16,\nthat's going to give me a number 0 through 15, right?",
    "start": "2932310",
    "end": "2939400"
  },
  {
    "text": "If you take the remainder\nwhen you divide by 16, you'll either get 0 all\nthe way up through 15.",
    "start": "2939400",
    "end": "2944450"
  },
  {
    "text": "So if I mod my\nname, that means I'm going to store my grade\nat memory location 0.",
    "start": "2944450",
    "end": "2953510"
  },
  {
    "text": "So far, so good? So basically, I made up\nthis hash function that tells me where to put my grade.",
    "start": "2953510",
    "end": "2961160"
  },
  {
    "text": "Now I add another person. Again, I'm going to convert\nthe letters in their name",
    "start": "2961160",
    "end": "2966230"
  },
  {
    "text": "to numbers so that I can\neasily get a number out of their letters.",
    "start": "2966230",
    "end": "2971870"
  },
  {
    "text": "So I'm basically hashing\ntheir letters to a number. Again, summing this\nfor Eric is 35.",
    "start": "2971870",
    "end": "2979130"
  },
  {
    "text": "I'm going to mod\nit with 16, which means I'm going to put\nEric's grade at location 3.",
    "start": "2979130",
    "end": "2985430"
  },
  {
    "text": "Next person, John, same thing. I add the numbers, mod 16. I'm going to put\nJohn at location 15.",
    "start": "2985430",
    "end": "2991830"
  },
  {
    "text": "So this is my memory where I'm\nstoring the values associated with these students. So if I want to\ngrab back my grade,",
    "start": "2991830",
    "end": "2999950"
  },
  {
    "text": "I run the exact\nsame hash function. So I'm going to run the same\nhash function on my name.",
    "start": "2999950",
    "end": "3005590"
  },
  {
    "text": "My name hasn't changed, right? It's still the string. I'm not allowed to change\nit because it's a string. And so I'm going to get\nthe same value back, 0.",
    "start": "3005590",
    "end": "3013390"
  },
  {
    "text": "So that means to grab the\nletter associated with my name, I just need to go straight\ninto my memory location",
    "start": "3013390",
    "end": "3018940"
  },
  {
    "text": "and look up the value\nat that memory location. So I know it's going to be a C.",
    "start": "3018940",
    "end": "3026150"
  },
  {
    "text": "Now, let's say I'm storing a\nlist, a student name as a list.",
    "start": "3026150",
    "end": "3035279"
  },
  {
    "text": "So again, Ana, Eric, and\nJohn are immutable, right? They will not change. But if I store Kate as a\nlist, her name might change.",
    "start": "3035280",
    "end": "3044440"
  },
  {
    "text": "Again, I can run the same\nhash function on her name. That means her\ngrade when I first store it is going\nto be at location 5.",
    "start": "3044440",
    "end": "3051340"
  },
  {
    "text": "So I'm storing\nKate at location 5. All these three strings I know\nI can get back because they",
    "start": "3051340",
    "end": "3058340"
  },
  {
    "text": "cannot change. But let's say that Kate\ngoes and changes her name from Kate with a K to\nKate with a C. It's",
    "start": "3058340",
    "end": "3066970"
  },
  {
    "text": "the same object,\nright, the same person. She earned her\ngrade, B, originally.",
    "start": "3066970",
    "end": "3072460"
  },
  {
    "text": "So if I want to\ngrab her grade back, even though her\nname has changed, I would still like to\ngrab the B associated",
    "start": "3072460",
    "end": "3078670"
  },
  {
    "text": "with her as a person. But Kate with a C, if I\nrun that same hash function",
    "start": "3078670",
    "end": "3084240"
  },
  {
    "text": "that I ran to put her\ngrade in my table, tells me that I now need to look\nup her grade at memory location",
    "start": "3084240",
    "end": "3092930"
  },
  {
    "text": "13, no longer at\nmemory location 5.",
    "start": "3092930",
    "end": "3097950"
  },
  {
    "text": "She's not there. OK, so now it's like did the\nstudent disappear and all",
    "start": "3097950",
    "end": "3105070"
  },
  {
    "text": "that stuff. So you see? Now, that's the reason why I\ncannot have a mutable object",
    "start": "3105070",
    "end": "3112990"
  },
  {
    "text": "as a key to my list because\nif that object changes, running that hash function on\nthat changed object might not",
    "start": "3112990",
    "end": "3119170"
  },
  {
    "text": "give me the same memory location\nwhere I originally stored the value associated\nwith that object.",
    "start": "3119170",
    "end": "3125829"
  },
  {
    "text": "Does that make sense? OK, so let's revisit\nour original example,",
    "start": "3125830",
    "end": "3132160"
  },
  {
    "text": "the one where we tried\nto store everything in a master list, all these\ngrades in a master list.",
    "start": "3132160",
    "end": "3137820"
  },
  {
    "text": "Now, let's store it in\na master dictionary. So I've got my grades.",
    "start": "3137820",
    "end": "3143690"
  },
  {
    "text": "Notice, curly bracket curly\nbracket is a dictionary. I've got two students\nin my class, Ana, right?",
    "start": "3143690",
    "end": "3151320"
  },
  {
    "text": "So this is Ana's\ninformation and Bob. That's Bob's information.",
    "start": "3151320",
    "end": "3156840"
  },
  {
    "text": "So just two students in\nmy master dictionary. So the key Ana is going\nto be one entry key.",
    "start": "3156840",
    "end": "3165470"
  },
  {
    "text": "Key Bob is the other entry key. And what's the information\nassociated with these keys--",
    "start": "3165470",
    "end": "3170780"
  },
  {
    "text": "well, with Ana, I've\ngot this dictionary associated with her name. So that's this big thing here.",
    "start": "3170780",
    "end": "3177359"
  },
  {
    "text": "I'll explain it in a bit,\nand similarly with Bob. Bob has one thing\nassociated with him,",
    "start": "3177360",
    "end": "3183140"
  },
  {
    "text": "and it's another dictionary.  So I'm mapping strings\nto dictionaries here.",
    "start": "3183140",
    "end": "3190830"
  },
  {
    "text": "And that's fine because\nvalues in a dictionary can be other dictionaries.",
    "start": "3190830",
    "end": "3195920"
  },
  {
    "text": "So what are these\ndictionaries about? Well, the number of\nitems in the dictionary",
    "start": "3195920",
    "end": "3202359"
  },
  {
    "text": "for a particular person,\nthere's three elements, right? So comma, comma separates\nmy three elements.",
    "start": "3202360",
    "end": "3208430"
  },
  {
    "text": "The first one is going\nto be mapped with key mq. The second one mapped with\nkey ps for problem set,",
    "start": "3208430",
    "end": "3215200"
  },
  {
    "text": "and the last one mapped with\nthe string fin for final grade. So each one of these\nstudents has this dictionary",
    "start": "3215200",
    "end": "3221849"
  },
  {
    "text": "associated with them. And that dictionary\nthen itself has three entries, one for the\nmicro quiz, one for the ps,",
    "start": "3221850",
    "end": "3227640"
  },
  {
    "text": "one for the final scores. So now, what's the values\nassociated with those keys?",
    "start": "3227640",
    "end": "3234310"
  },
  {
    "text": "Well, the micro quiz\nis going to be a list. The problem set is\ngoing to be a list. And the final is\ngoing to be a string.",
    "start": "3234310",
    "end": "3240260"
  },
  {
    "text": "So a really nice representation\nof my class, right?",
    "start": "3240260",
    "end": "3245680"
  },
  {
    "text": "And same for Bob. So now, what if we want\nto grab a student's exam",
    "start": "3245680",
    "end": "3251690"
  },
  {
    "text": "grade or the student's\nlist of exam grades? Remember that big function\nwith the two nested",
    "start": "3251690",
    "end": "3259130"
  },
  {
    "text": "for loops and the nested ifs? That becomes this line.",
    "start": "3259130",
    "end": "3265290"
  },
  {
    "text": "Isn't that cool?  Applause, I like that. Yeah, exactly.",
    "start": "3265290",
    "end": "3270770"
  },
  {
    "text": "We should applaud this because\nlook how easy it is now to-- yes, thank you, yes. [APPLAUSE]",
    "start": "3270770",
    "end": "3277700"
  },
  {
    "text": "Dictionaries are awesome, guys. So yeah, so look, that\nline becomes this-- grabbing one quiz score becomes\nthis single line of code",
    "start": "3277700",
    "end": "3286100"
  },
  {
    "text": "right here. So let's break it down. Again, we do left\nto right whenever",
    "start": "3286100",
    "end": "3291970"
  },
  {
    "text": "we've got this chain\nof stuff going on. So the first thing we say\nis, well, we're looking up",
    "start": "3291970",
    "end": "3297130"
  },
  {
    "text": "grades at some index. So grades at some index\ngives me that dictionary, so something like this\nwhole thing here, right.",
    "start": "3297130",
    "end": "3306590"
  },
  {
    "text": "OK? Good. That's the first chain. Now, this box here gets\nreplaced with that dictionary.",
    "start": "3306590",
    "end": "3312579"
  },
  {
    "text": "And I'm doing another\nindex into that dictionary. So that means I'm going\nto grab the mq associated",
    "start": "3312580",
    "end": "3318790"
  },
  {
    "text": "with that dictionary. So the value associated with mq\nis going to be this list 544.",
    "start": "3318790",
    "end": "3329890"
  },
  {
    "text": "So this box here gets\nreplaced with the list 544. And then, if I want to grab\njust the first quiz value,",
    "start": "3329890",
    "end": "3336660"
  },
  {
    "text": "I say now I'm going to index\nin the list 544 at index 0. So that grabs for me just the 5.",
    "start": "3336660",
    "end": "3341880"
  },
  {
    "text": "So then the first quiz\nscore for Ana was a 5. It's pretty bad.",
    "start": "3341880",
    "end": "3347410"
  },
  {
    "text": " OK, so let's have\nyou think about this.",
    "start": "3347410",
    "end": "3359075"
  },
  {
    "text": "This is a function,\nnothing to code here. Just to think. This is a function\nthat grabs the average",
    "start": "3359075",
    "end": "3368849"
  },
  {
    "text": "of every single thing where\nthat thing is what in the class.",
    "start": "3368850",
    "end": "3377250"
  },
  {
    "text": "So if what is mq, as is\ndown here in this example, if what is mq, this\ncode is supposed",
    "start": "3377250",
    "end": "3384860"
  },
  {
    "text": "to get the average of\nall of the micro quizzes for all the students\nin the class. So you basically want to\ngrab the average of 10",
    "start": "3384860",
    "end": "3392420"
  },
  {
    "text": "plus 8 plus 3. And if it's ps, I\nwould like to grab",
    "start": "3392420",
    "end": "3397700"
  },
  {
    "text": "the average of all the\nproblem sets for all the students in the class. So the average of\n10, 10, 7, 8, and 0.",
    "start": "3397700",
    "end": "3404525"
  },
  {
    "text": " So we've got a loop. That goes through every\nstudent in the keys.",
    "start": "3404525",
    "end": "3411380"
  },
  {
    "text": "So the student, stud,\nstud here is going",
    "start": "3411380",
    "end": "3416539"
  },
  {
    "text": "to be this dictionary, right? So given this\ndictionary, what line",
    "start": "3416540",
    "end": "3422240"
  },
  {
    "text": "should you insert here such that\nyou're creating a list, just a single top-level list of\nall of the values in there?",
    "start": "3422240",
    "end": "3430470"
  },
  {
    "text": "So the thing you actually\nwant to end up with, and if we're looking\nat the ps scores just because it's a little\neasier to think about,",
    "start": "3430470",
    "end": "3436250"
  },
  {
    "text": "is going to be 10,\n10, 7, 8, and 0.",
    "start": "3436250",
    "end": "3442970"
  },
  {
    "text": "So in the end, what\nI would like to get in my all data, this list\nthat I'm maintaining here,",
    "start": "3442970",
    "end": "3448700"
  },
  {
    "text": "is something like\nthis for the ps. So think about which\none of these lines",
    "start": "3448700",
    "end": "3455850"
  },
  {
    "text": "will accomplish that. ",
    "start": "3455850",
    "end": "3461250"
  },
  {
    "text": "And just to help\nyou out we can say student is my dictionary of--",
    "start": "3461250",
    "end": "3468869"
  },
  {
    "text": "who thinks it's the first one?  The second one?",
    "start": "3468870",
    "end": "3475130"
  },
  {
    "text": "Third one? Fourth one? ",
    "start": "3475130",
    "end": "3482549"
  },
  {
    "text": "Nobody thought\nit's the first one? Are you guys sure? OK, why do you think\nit's the second one?",
    "start": "3482550",
    "end": "3489539"
  },
  {
    "text": "Is it because of the append? Yeah? Let's think about it. So all data is a list,\nand what are we appending?",
    "start": "3489540",
    "end": "3498240"
  },
  {
    "text": "So what is data at stud\nat what going to give us?",
    "start": "3498240",
    "end": "3503630"
  },
  {
    "text": "Data at student is the\ndictionary, this dictionary",
    "start": "3503630",
    "end": "3509069"
  },
  {
    "text": "here, right, this value here. And if we take this value\nand index into the what,",
    "start": "3509070",
    "end": "3516910"
  },
  {
    "text": "will it be an integer\nor will it be a list? ",
    "start": "3516910",
    "end": "3522120"
  },
  {
    "text": "A list. So when we append a\nlist to another list, what is that going to give us?",
    "start": "3522120",
    "end": "3527940"
  },
  {
    "text": " So if we have a\nlist already with a,",
    "start": "3527940",
    "end": "3535040"
  },
  {
    "text": "b, c, if I append\nanother list to this, will it put the element within\nthat list or the list itself?",
    "start": "3535040",
    "end": "3540807"
  },
  {
    "text": "STUDENT: [INAUDIBLE] ANA BELL: Yeah, exactly. ",
    "start": "3540807",
    "end": "3545849"
  },
  {
    "text": "So that's not going\nto work for us. Clearly, D is not right either.",
    "start": "3545850",
    "end": "3551510"
  },
  {
    "text": "And definitely, indexing\ninto data at student at what is not going to be right, OK?",
    "start": "3551510",
    "end": "3556790"
  },
  {
    "text": "So that leaves one other choice. The first one.",
    "start": "3556790",
    "end": "3563650"
  },
  {
    "text": "So let's see why\nthe first one works. We're concatenating, right? So the plus concatenates.",
    "start": "3563650",
    "end": "3570280"
  },
  {
    "text": "So let's say I already\nhave a list, a, b, c. I'm going to\nconcatenate something",
    "start": "3570280",
    "end": "3575980"
  },
  {
    "text": "I already have with\ndata at student at what, which we said is what? Is it a single element\nor another list?",
    "start": "3575980",
    "end": "3582707"
  },
  {
    "text": "STUDENT: [INAUDIBLE] ANA BELL: Exactly,\nso we concatenate with something like 10,\n10, or something like that.",
    "start": "3582707",
    "end": "3589280"
  },
  {
    "text": "So that will return\nfor us a, b, c, 10, 10,",
    "start": "3589280",
    "end": "3594610"
  },
  {
    "text": "which will allow us to\ndo something like getting the sum of all these elements.",
    "start": "3594610",
    "end": "3600925"
  },
  {
    "text": "Questions about that? Does that make sense? Is that all right? Yes. STUDENT: [INAUDIBLE]",
    "start": "3600925",
    "end": "3606858"
  },
  {
    "text": " ANA BELL: Yeah.  STUDENT: Why would\nit [INAUDIBLE]??",
    "start": "3606858",
    "end": "3614046"
  },
  {
    "text": " Like, how come it\nreturns 10 [INAUDIBLE]??",
    "start": "3614046",
    "end": "3624138"
  },
  {
    "text": "ANA BELL: Because\nwe're indexing into mq. So if you index into\nmq, mq is your key.",
    "start": "3624138",
    "end": "3630030"
  },
  {
    "text": "So you grab the value\nassociated with that key. So that would be this\nlist here, the 10.",
    "start": "3630030",
    "end": "3635339"
  },
  {
    "text": "Or for ps, it would\nbe the list 10, 10. So quick recap on lists and\ndictionaries before we do one",
    "start": "3635340",
    "end": "3642880"
  },
  {
    "text": "final longer example. So again, lists are ordered\nsequences of elements, right? There is some\nelement at index 0.",
    "start": "3642880",
    "end": "3649819"
  },
  {
    "text": "There's some element at index\n1, some element at index 2. So we do have these quote\nunquote \"indices,\" right?",
    "start": "3649820",
    "end": "3656590"
  },
  {
    "text": "But there's an order\nto these indices, and there has to be an\nelement index 0 and further",
    "start": "3656590",
    "end": "3662440"
  },
  {
    "text": "up from there, right? Dictionaries also have\nthese quote unquote \"indices,\" which we call keys.",
    "start": "3662440",
    "end": "3668830"
  },
  {
    "text": "But these are custom. So you can basically rearrange-- you can think of it as being\nallowed to rearrange indices",
    "start": "3668830",
    "end": "3676450"
  },
  {
    "text": "however you'd like, right? There's no order to the\nindices in a dictionary.",
    "start": "3676450",
    "end": "3682470"
  },
  {
    "text": "There are some restrictions\non the keys or these indices, so they can't be\nimmutable or hashable.",
    "start": "3682470",
    "end": "3688920"
  },
  {
    "text": "But other than that,\nthe things that you store related to that\nkey can be any type,",
    "start": "3688920",
    "end": "3695460"
  },
  {
    "text": "just like you can store\nany type in a list. So the last thing I'd like to\ngo through is a larger example.",
    "start": "3695460",
    "end": "3703963"
  },
  {
    "text": "And this will showcase\na whole bunch of things that we've been\ntalking about so far. It'll showcase how\nto, first of all,",
    "start": "3703963",
    "end": "3711880"
  },
  {
    "text": "create dictionaries, which\nis what we did today. It'll showcase how\nto reuse functions,",
    "start": "3711880",
    "end": "3717080"
  },
  {
    "text": "how to write functions and\nreuse functions in other places. It will showcase a little\nbit of mutability as well.",
    "start": "3717080",
    "end": "3723760"
  },
  {
    "text": "But this is all in\na larger example. And if I go a little\nbit fast through this,",
    "start": "3723760",
    "end": "3729850"
  },
  {
    "text": "I've given you\nPython tutor links. And it's also in the\nfile to run on your own.",
    "start": "3729850",
    "end": "3735770"
  },
  {
    "text": "So the goal of this\nlast example is",
    "start": "3735770",
    "end": "3740800"
  },
  {
    "text": "to basically find\nthe most common words in a song's lyrics. And dictionaries are going\nto be really useful for doing",
    "start": "3740800",
    "end": "3747339"
  },
  {
    "text": "something like this. So I'm going to show\nyou, first of all, what we want to end up with. And then we can talk about\nhow to divide this larger",
    "start": "3747340",
    "end": "3753910"
  },
  {
    "text": "problem into smaller pieces. So OK, so those\nare all the pieces.",
    "start": "3753910",
    "end": "3761550"
  },
  {
    "text": "But basically what\nI want to end up with is I want to have a song\nbe stored as a string, OK?",
    "start": "3761550",
    "end": "3771640"
  },
  {
    "text": "You'll recognize these,\nbut these are very old. I actually haven't updated\nthese songs for a few years. But yeah, anyway, don't judge.",
    "start": "3771640",
    "end": "3778060"
  },
  {
    "text": "So I've got a song\nstored as a string. And I'm going to run\neach individual function.",
    "start": "3778060",
    "end": "3784910"
  },
  {
    "text": "But in the end,\nwhat I'd like to do is come up with\nsomething like this.",
    "start": "3784910",
    "end": "3790559"
  },
  {
    "text": "So I want to present the user\nthe top-most common words in the song.",
    "start": "3790560",
    "end": "3797000"
  },
  {
    "text": "So here I have a list. So you can see open closed\nsquare bracket tells me it's a list. And I've got\nelements in my list.",
    "start": "3797000",
    "end": "3803160"
  },
  {
    "text": "So here's the first\nelement in my list, which tells the user that\nthe word I occurs 18 times.",
    "start": "3803160",
    "end": "3810770"
  },
  {
    "text": "The next element in\nmy list tells the user that the word we\noccurs 17 times.",
    "start": "3810770",
    "end": "3815809"
  },
  {
    "text": "The next element tells\nthe user that the words ain't ever getting older occur\nall 16 times, and then so on.",
    "start": "3815810",
    "end": "3823400"
  },
  {
    "text": "So we're decreasing in frequency\nwith the most common word occurring 18 times. And then I'm showing the user\nthe most common words down to",
    "start": "3823400",
    "end": "3835549"
  },
  {
    "text": "and including 6. So I would choose\nsome arbitrary value I want to find in the song\nthe words that occur at least",
    "start": "3835550",
    "end": "3841100"
  },
  {
    "text": "six times, for example. OK, so that's the\ngoal of this program. ",
    "start": "3841100",
    "end": "3847910"
  },
  {
    "text": "So how will we achieve this? It's obviously a\npretty big task. I wouldn't want to code the\nentire thing right off the bat.",
    "start": "3847910",
    "end": "3856390"
  },
  {
    "text": "But we can actually divide\nit into three smaller pieces. The first piece, and we're going\nto write the code for this,",
    "start": "3856390",
    "end": "3863990"
  },
  {
    "text": "is to create something called\na frequency dictionary. So given a string\nof words, we're going to create a dictionary\nthat maps each word to how",
    "start": "3863990",
    "end": "3872390"
  },
  {
    "text": "often it occurs. So fancy word,\nfrequency dictionary, but it's pretty simple.",
    "start": "3872390",
    "end": "3877560"
  },
  {
    "text": "It just maps a word to its\ncount inside my long string.",
    "start": "3877560",
    "end": "3882770"
  },
  {
    "text": "So this presents the data\nwhich is this string of words in a much nicer format, right?",
    "start": "3882770",
    "end": "3888400"
  },
  {
    "text": "It's a dictionary that tells\nme the frequency of each word. Once I have that in hand,\nthings get a little bit easier.",
    "start": "3888400",
    "end": "3896079"
  },
  {
    "text": "I can write another\nfunction that finds the word that occurs\nmost often in that dictionary.",
    "start": "3896080",
    "end": "3902450"
  },
  {
    "text": "So the way I'm going\nto do that is look up the frequencies in\nthe values, find the maximum of those\nvalues, and then figure out",
    "start": "3902450",
    "end": "3910090"
  },
  {
    "text": "which keys are associated\nwith that maximum value. And this is all made\npossible because I've",
    "start": "3910090",
    "end": "3917000"
  },
  {
    "text": "reimagined my data in this\nfrequency dictionary format. The last step, once\nI figure out how",
    "start": "3917000",
    "end": "3924579"
  },
  {
    "text": "to write a function that\nreturns for me the words that occur the most times, is to\nfind the words that occur",
    "start": "3924580",
    "end": "3930550"
  },
  {
    "text": "at least some number of times. And I'll go through an example\nof this one in a few slides",
    "start": "3930550",
    "end": "3937619"
  },
  {
    "text": "when we get to it. But this last function\nhere, number three, you can actually rewrite it\nin a whole bunch of ways.",
    "start": "3937620",
    "end": "3943653"
  },
  {
    "text": "I'm just going to show\nyou one way to write it that will involve mutability. But you don't have to\ndo it using mutability.",
    "start": "3943653",
    "end": "3950490"
  },
  {
    "text": "You can definitely do\nit in a whole bunch of-- with a whole bunch of\nother implementations.",
    "start": "3950490",
    "end": "3956670"
  },
  {
    "text": "So let's begin by first\ncreating a dictionary that maps the word to their frequencies.",
    "start": "3956670",
    "end": "3963840"
  },
  {
    "text": "So I've picked a song\nthat is a real song. And it has some repetition.",
    "start": "3963840",
    "end": "3970940"
  },
  {
    "text": "And it's short that\nit fits in one line. So I've got this song here.",
    "start": "3970940",
    "end": "3976010"
  },
  {
    "text": "And I've got my function\ngenerate word dictionary. The song is a string.",
    "start": "3976010",
    "end": "3982290"
  },
  {
    "text": "So it's basically the song\na little bit cleaned up, not in terms of words, but in\nterms of removing punctuation,",
    "start": "3982290",
    "end": "3989450"
  },
  {
    "text": "removing commas,\nmaybe exclamation-- or I might have kept quotations\nor something like that.",
    "start": "3989450",
    "end": "3996210"
  },
  {
    "text": "But basically, it's removing\nall of the punctuation and stuff because that will mess\nup my word counts.",
    "start": "3996210",
    "end": "4003700"
  },
  {
    "text": "So what is this\nfunction going to do given a string for my song? Well, first I'm going to convert\nall my letters to lowercase.",
    "start": "4003700",
    "end": "4011320"
  },
  {
    "text": "This means that\ncapital T-H-E will be counted as the same word\nas lowercase t-h-e, which",
    "start": "4011320",
    "end": "4018760"
  },
  {
    "text": "is the correct way to do it. So convert everything\nto lowercase. Then I'm going to\nuse our friend,",
    "start": "4018760",
    "end": "4025070"
  },
  {
    "text": "the split function, remember,\nwhich takes in my string and splits on a character. So by default, it will\nsplit on the space.",
    "start": "4025070",
    "end": "4032790"
  },
  {
    "text": "This puts our string of words\nin a very manageable format,",
    "start": "4032790",
    "end": "4039600"
  },
  {
    "text": "a list of words. Much nicer to work with lists\nthan work with a string.",
    "start": "4039600",
    "end": "4045830"
  },
  {
    "text": "Now that I have\nmy word list, I'm going to create my\nempty dictionary and then populate it.",
    "start": "4045830",
    "end": "4051700"
  },
  {
    "text": "So I'm iterating over\nmy list of words. And then I have a choice.",
    "start": "4051700",
    "end": "4057540"
  },
  {
    "text": "Either I've seen\nthis word already and I want to update\nthe frequency, right? So I want to increase\nthe frequency by 1",
    "start": "4057540",
    "end": "4064020"
  },
  {
    "text": "because I've already added\nthis word to my dictionary. Or this is the first\ntime I'm seeing this word",
    "start": "4064020",
    "end": "4070440"
  },
  {
    "text": "and I want to add\nit to my dictionary with a frequency of 1. So the first case here, the\nif, will update the frequency",
    "start": "4070440",
    "end": "4078010"
  },
  {
    "text": "because I've already seen\nthe word in my dictionary. So here I'm using in keyword\nto check if the key, the word,",
    "start": "4078010",
    "end": "4083950"
  },
  {
    "text": "is already in my dictionary. If so, I increase\nits frequency by 1. Otherwise, this\nis the first time",
    "start": "4083950",
    "end": "4090510"
  },
  {
    "text": "I'm adding my word\nto my dictionary. So give it a frequency of 1.",
    "start": "4090510",
    "end": "4095700"
  },
  {
    "text": "And then I return\nthe word dictionary. So this will map\nstrings to integers.",
    "start": "4095700",
    "end": "4102278"
  },
  {
    "text": "Let's work through it\nin the Python tutor. ",
    "start": "4102279",
    "end": "4110040"
  },
  {
    "text": "So step, step, step, step, step,\nlowercased my input string,",
    "start": "4110040",
    "end": "4116220"
  },
  {
    "text": "step, I've split it, so now\nI've got this list of all of my words, step.",
    "start": "4116220",
    "end": "4124100"
  },
  {
    "text": "This is where we begin. So I've created my empty\ndictionary over here. Keep an eye on this area here.",
    "start": "4124100",
    "end": "4129910"
  },
  {
    "text": "It will become populated soon. The first word,\nw, is rah, right?",
    "start": "4129910",
    "end": "4135547"
  },
  {
    "text": "It's the first word in my list. It's obviously the first\ntime I'm seeing it. I have nothing in my\ndictionary right now.",
    "start": "4135548",
    "end": "4141970"
  },
  {
    "text": "So I'm going to pop\nin my else, and I'm going to add it to my dictionary\nwith a frequency of 1.",
    "start": "4141970",
    "end": "4148439"
  },
  {
    "text": "Yay, that worked. Next word in my dictionary, in\nmy list is this one, same word",
    "start": "4148439",
    "end": "4155549"
  },
  {
    "text": "I've already seen. So I'm going to go inside\nthe if and increase the frequency to 2, all right?",
    "start": "4155550",
    "end": "4161910"
  },
  {
    "text": "rah is now 2. Next is ah, right? So here's my word.",
    "start": "4161910",
    "end": "4167899"
  },
  {
    "text": "I've got the next\none in my list. It's the first\ntime I'm seeing it. Add it to my dictionary\nwith a frequency of 1.",
    "start": "4167899",
    "end": "4174350"
  },
  {
    "text": "Next word I'm seeing is, again. Increase its frequency to 2.",
    "start": "4174350",
    "end": "4179420"
  },
  {
    "text": "And I'm going to go faster now. This is increasing\nthe frequency to 3 because I've seen\nit three times now.",
    "start": "4179420",
    "end": "4185689"
  },
  {
    "text": "And then I'm adding\nrom for the first time, mah for the first time,\nand ro for the first time.",
    "start": "4185689",
    "end": "4195610"
  },
  {
    "text": "And lastly, I'm going to\nincrease mah frequency two more times because it occurs\ntwo more times in my song.",
    "start": "4195610",
    "end": "4203510"
  },
  {
    "text": "So it's increased to 2, and\nnow it's increased to 3. And then we're done. So we return the\nword dictionary.",
    "start": "4203510",
    "end": "4210219"
  },
  {
    "text": "Really nice way to\nrepresent my list-- my song, right?",
    "start": "4210220",
    "end": "4215230"
  },
  {
    "text": "Very nice. OK, so now that I have\nthis frequency dictionary",
    "start": "4215230",
    "end": "4220620"
  },
  {
    "text": "and I've put it up here-- this\nis what we ended up with-- how can we write a function\nthat returns for me",
    "start": "4220620",
    "end": "4226410"
  },
  {
    "text": "the most frequent word? So one thing we can recognize\nis the most frequent word",
    "start": "4226410",
    "end": "4234150"
  },
  {
    "text": "has the highest value,\nPython dictionary value in my dictionary, right?",
    "start": "4234150",
    "end": "4240660"
  },
  {
    "text": "So as a human, I would look to\nsee which one of these entries",
    "start": "4240660",
    "end": "4246390"
  },
  {
    "text": "have the biggest value. As a computer, I can't\nreally do that because I have to do it a little\nbit more systematically.",
    "start": "4246390",
    "end": "4253270"
  },
  {
    "text": "So what we can say is, well,\nlet's look at our values and grab the maximum\nof the values.",
    "start": "4253270",
    "end": "4259360"
  },
  {
    "text": "So here, I'm using this .values\nfunction on my dictionary to grab for me all of the\nvalues in my dictionary.",
    "start": "4259360",
    "end": "4268060"
  },
  {
    "text": "So this will be the list 2\ncomma 3 comma 1 comma 3 comma 1. And then I'm running the\nmax function on that list.",
    "start": "4268060",
    "end": "4275260"
  },
  {
    "text": "So max of this list of numbers\ngives me the maximum value in that list, the 3.",
    "start": "4275260",
    "end": "4280579"
  },
  {
    "text": "So highest now has\nthe value integer 3. And now, all I need to do\nis iterate over my entries",
    "start": "4280580",
    "end": "4289130"
  },
  {
    "text": "in my dictionary. So this is kv in the items. And all I'm checking now\ninside this iteration",
    "start": "4289130",
    "end": "4296179"
  },
  {
    "text": "is if the value is\nequal to the highest. So as I'm looking\nat each entry, is",
    "start": "4296180",
    "end": "4301370"
  },
  {
    "text": "the value for that entry\nthe same as the highest one I've seen? If it is, I'm going to maintain\na list of all the words",
    "start": "4301370",
    "end": "4307867"
  },
  {
    "text": "with that highest\nvalue because there might be more than one\nword that has the highest",
    "start": "4307868",
    "end": "4312920"
  },
  {
    "text": "value, as we saw when we\nactually ran it here, right? Here I had a list of\nall of these words",
    "start": "4312920",
    "end": "4319219"
  },
  {
    "text": "that occurred 16 times. So that's the output that\nI want to maintain, OK?",
    "start": "4319220",
    "end": "4326179"
  },
  {
    "text": "So I'm appending\nto my words list. And at the end, I'm\nreturning this tuple with the words comma\nthat highest value.",
    "start": "4326180",
    "end": "4332640"
  },
  {
    "text": "So Python tutor, like\nin the previous time.",
    "start": "4332640",
    "end": "4338760"
  },
  {
    "text": "So let's create our\noriginal dictionary. This is what we ended\nup with last time. So the highest value is 3 here.",
    "start": "4338760",
    "end": "4344750"
  },
  {
    "text": "And I'm going to loop through\neach entry in my dictionary. So you can say C kv is going to\nbe each one of these in order.",
    "start": "4344750",
    "end": "4351600"
  },
  {
    "text": "So first it's rah w, then\nit's ah 3, and so on. Obviously, the 2 is not equal\nto the 3, so we move on.",
    "start": "4351600",
    "end": "4358260"
  },
  {
    "text": "The 3 equals the 3, so\nwe take the ah, and boom, add it to my list here. So this is the list I'm\nmaintaining of all the words",
    "start": "4358260",
    "end": "4365250"
  },
  {
    "text": "that occur with frequency 3. Next, no for rom,\nyes for mah, so I'm",
    "start": "4365250",
    "end": "4372300"
  },
  {
    "text": "going to add it to my list. And then no for\nro, and I'm done.",
    "start": "4372300",
    "end": "4378760"
  },
  {
    "text": "So the return is going\nto be this list-- this tuple here with the\nlist of the words that",
    "start": "4378760",
    "end": "4384480"
  },
  {
    "text": "occur three times.  OK, good.",
    "start": "4384480",
    "end": "4392040"
  },
  {
    "text": "Last part, I'm not going\nto go through Python tutor. I did include a link to\nit because it becomes very messy with the arrows.",
    "start": "4392040",
    "end": "4397920"
  },
  {
    "text": "But I do encourage you\nto try to follow it along on your own time. I will explain,\nhowever, the way that I",
    "start": "4397920",
    "end": "4405539"
  },
  {
    "text": "chose to solve this problem. So I chose to solve this problem\nto include mutation and reusing",
    "start": "4405540",
    "end": "4411900"
  },
  {
    "text": "the function that we just\nwrote that grabs for me the highest value and the words\nassociated with that highest",
    "start": "4411900",
    "end": "4418380"
  },
  {
    "text": "frequency value. So this is the idea.",
    "start": "4418380",
    "end": "4423960"
  },
  {
    "text": "I have my original\nword dictionary, right? This is the frequency dictionary\nwe created right off the bat.",
    "start": "4423960",
    "end": "4430740"
  },
  {
    "text": "What I'm going to do is look\nto see which words occur",
    "start": "4430740",
    "end": "4436170"
  },
  {
    "text": "with the highest frequency. So the highest frequency,\nmy function from before,",
    "start": "4436170",
    "end": "4441390"
  },
  {
    "text": "grabs for me-- it figures out that it's 3. And it figures out\nthe words associated",
    "start": "4441390",
    "end": "4446639"
  },
  {
    "text": "with that 3 are ah and mah. That's exactly what we just did.",
    "start": "4446640",
    "end": "4452929"
  },
  {
    "text": "So I'm going to grab those\nwords and those entries in the dictionary. And then, I'm going to\nmutate the dictionary",
    "start": "4452930",
    "end": "4460269"
  },
  {
    "text": "to remove those words because\nI know those words occur with the highest frequency.",
    "start": "4460270",
    "end": "4466780"
  },
  {
    "text": "So now, I've\nremoved those words, and I've saved them because they\nwere the result of the function that I had just ran, right?",
    "start": "4466780",
    "end": "4473880"
  },
  {
    "text": "So I'm maintaining\nthis frequency list, which will contain all the\nwords that occur at least--",
    "start": "4473880",
    "end": "4479340"
  },
  {
    "text": "I guess I said greater than one\ntime, so at least two times.",
    "start": "4479340",
    "end": "4485429"
  },
  {
    "text": "So I'm going to grab the ones\nthat occur 3 and 2 times. So right now, I had just grabbed\nthe words that occur 3 times.",
    "start": "4485430",
    "end": "4492489"
  },
  {
    "text": "I've removed them\nfrom my dictionary. So I've actually\nmutated my dictionary to remove those words.",
    "start": "4492490",
    "end": "4498840"
  },
  {
    "text": "Now, if I run the\nexact same function that I just wrote on\nthe previous slide",
    "start": "4498840",
    "end": "4504870"
  },
  {
    "text": "on this mutated dictionary,\nwhich words will it give me?",
    "start": "4504870",
    "end": "4510180"
  },
  {
    "text": "Which words occur the most now? STUDENT: [INAUDIBLE] ANA BELL: Exactly, right? Now the highest value\nin my dictionary,",
    "start": "4510180",
    "end": "4517080"
  },
  {
    "text": "in this frequency\ndictionary, is 2 because I mutated to remove\nwhat was previously the highest",
    "start": "4517080",
    "end": "4522480"
  },
  {
    "text": "value. So I'm running the same function\nagain on the mutated dictionary to give me just the rah, right?",
    "start": "4522480",
    "end": "4529560"
  },
  {
    "text": "So I grab that, keep track\nof that in my frequency list, right, mutate the\ndictionary to remove that.",
    "start": "4529560",
    "end": "4537790"
  },
  {
    "text": "And as I'm doing that,\nI'm also keeping track to make sure that the\nhighest frequency I have",
    "start": "4537790",
    "end": "4543150"
  },
  {
    "text": "in the remaining dictionary\nis at least whatever I was interested in. So here I want it at least 2.",
    "start": "4543150",
    "end": "4548580"
  },
  {
    "text": "So this function,\nthe one I will write, will no longer grab any other\nvalues from the dictionary",
    "start": "4548580",
    "end": "4554730"
  },
  {
    "text": "because now frequency\n1 I don't want to grab. So this is the resulting value.",
    "start": "4554730",
    "end": "4561007"
  },
  {
    "text": "And that's the idea. We're using mutability\nand the function we just wrote to do this task. And this is the\ncode that does that.",
    "start": "4561007",
    "end": "4567000"
  },
  {
    "text": "So this runs the function\nwe wrote previously. Step number 2\ngives us that tuple",
    "start": "4567000",
    "end": "4573780"
  },
  {
    "text": "with the list of all the words. This loop here\nmakes sure I still have frequencies that are at\nleast x in the dictionary.",
    "start": "4573780",
    "end": "4582000"
  },
  {
    "text": "I grab the tuple\nthat I just created, so something like this, and\nadd it to my frequency list.",
    "start": "4582000",
    "end": "4588160"
  },
  {
    "text": "So this is the resulting list\nthat I'm keeping track of. And then this bit here removes\nthe word from my dictionary.",
    "start": "4588160",
    "end": "4593980"
  },
  {
    "text": "So I'm mutating the\ndictionary using this del keyword that we saw at\nthe beginning of this lecture.",
    "start": "4593980",
    "end": "4599980"
  },
  {
    "text": "Yeah, question. STUDENT: The other one like I\nknow it says whilst basically",
    "start": "4599980",
    "end": "4606630"
  },
  {
    "text": "while the ANA BELL: Yeah.",
    "start": "4606630",
    "end": "4612156"
  },
  {
    "text": "STUDENT: I guess what\nI just [INAUDIBLE] why is still [INAUDIBLE]\nwell the [INAUDIBLE]??",
    "start": "4612156",
    "end": "4621410"
  },
  {
    "text": "ANA BELL: So I think maybe\nit's because the function-- I forget what the\nspecification said, but I don't know if it said\nat least 2 or greater than 2,",
    "start": "4621410",
    "end": "4629680"
  },
  {
    "text": "or at least x or greater than x. It depends on which\none I actually said in the specification.",
    "start": "4629680",
    "end": "4635020"
  },
  {
    "text": "But you can imagine changing\nthis to greater than or greater than or equal to. And then we're running\nthis function again",
    "start": "4635020",
    "end": "4641080"
  },
  {
    "text": "inside this while loop to grab\nthe frequency [INAUDIBLE].. Yeah, so these are\njust the observations",
    "start": "4641080",
    "end": "4647360"
  },
  {
    "text": "I actually stated at the\nbeginning of this example, a bunch of the different things\nthat we've learned that we're",
    "start": "4647360",
    "end": "4652400"
  },
  {
    "text": "using within this example. So slicing or splitting,\niterating over the list",
    "start": "4652400",
    "end": "4658040"
  },
  {
    "text": "directly, mutability, using\nthe items, things like that.",
    "start": "4658040",
    "end": "4663550"
  },
  {
    "text": "OK, so that's it. That's all I have. I'll see you guys on Monday. Monday is Halloween.",
    "start": "4663550",
    "end": "4669710"
  },
  {
    "text": "If you'd like to bring a\ncostume, I love Halloween. I will wear something different\nthan what I usually wear.",
    "start": "4669710",
    "end": "4679510"
  },
  {
    "start": "4679510",
    "end": "4685000"
  }
]