[
  {
    "text": "[MUSIC PLAYING BY J.S. BACH]",
    "start": "0",
    "end": "17790"
  },
  {
    "text": "PROFESSOR: The last time we\nbegan having a look at how languages are constructed. Remember the main point that\nan evaluator for, LISP, say,",
    "start": "17790",
    "end": "26050"
  },
  {
    "text": "has two main elements. There is EVAL, and\nEVAL's job is to take",
    "start": "26050",
    "end": "33010"
  },
  {
    "text": "in an expression\nand an environment",
    "start": "33010",
    "end": "38859"
  },
  {
    "text": "and turn that into a\nprocedure and some arguments",
    "start": "38860",
    "end": "45470"
  },
  {
    "text": "and pass that off to APPLY.  And APPLY takes the\nprocedure in the arguments,",
    "start": "45470",
    "end": "51750"
  },
  {
    "text": "turns that back into,\nin a general case, another expression\nto be evaluated in another environment and\npasses that off to EVAL,",
    "start": "51750",
    "end": "58790"
  },
  {
    "text": "which passes it to APPLY, and\nthere's this whole big circle where things go\naround and around and around until you get either\nto some very primitive data",
    "start": "58790",
    "end": "65280"
  },
  {
    "text": "or to a primitive procedure. See, what this\ncycle has to do with is unwinding the\nmeans of combination",
    "start": "65280",
    "end": "72719"
  },
  {
    "text": "and the means of\nabstraction in the language. So for instance, you have\na procedure in LISP--",
    "start": "72720",
    "end": "77780"
  },
  {
    "text": "a procedure is a\ngeneral way of saying, I want to be able to\nevaluate this expression for any value of the\narguments, and that's",
    "start": "77780",
    "end": "86070"
  },
  {
    "text": "sort of what's going on here. That's what APPLY does. It says the general thing\ncoming in with the arguments reduces to the expression\nthat's the body,",
    "start": "86070",
    "end": "93039"
  },
  {
    "text": "and then if that's a compound\nexpression or another procedure application, the thing will go\naround and around the circle.",
    "start": "93040",
    "end": "100440"
  },
  {
    "text": "Anyway, that's sort of the basic\nstructure of gee, pretty much any interpreter. The other thing that\nyou saw is once you",
    "start": "100440",
    "end": "106540"
  },
  {
    "text": "have the interpreter\nin your hands, you have all this power to\nstart playing with the language. So you can make it\ndynamically scoped,",
    "start": "106540",
    "end": "111910"
  },
  {
    "text": "or you can put in\nnormal order evaluation, or you can add new forms to the\nlanguage, whatever you like.",
    "start": "111910",
    "end": "117680"
  },
  {
    "text": "Or more generally,\nthere's this notion of metalinguistic\nabstraction, which",
    "start": "117680",
    "end": "122850"
  },
  {
    "text": "says that part of your\nperspective as an engineer,",
    "start": "122850",
    "end": "128440"
  },
  {
    "text": "as a software engineer, but\nas an engineer in general is that you can gain\ncontrol of complexity",
    "start": "128440",
    "end": "135069"
  },
  {
    "text": "by inventing new\nlanguages sometimes. See, one way to think\nabout computer programming",
    "start": "135070",
    "end": "141610"
  },
  {
    "text": "is that it only incidentally has\nto do with getting a computer to do something. Primarily what a computer\nprogram has to do with,",
    "start": "141610",
    "end": "149000"
  },
  {
    "text": "it's a way of expressing ideas\nwith communicating ideas. And sometimes when you want to\ncommunicate new kinds of ideas,",
    "start": "149000",
    "end": "156690"
  },
  {
    "text": "you'd like to invent new\nmodes of expressing that. Well, today we're going\nto apply this framework",
    "start": "156690",
    "end": "163810"
  },
  {
    "text": "to build a new language. See, once we have the basic\nidea of the interpreter, you can pretty much go build\nany language that you like.",
    "start": "163810",
    "end": "170830"
  },
  {
    "text": "So for example, we can\ngo off and build Pascal. And gee, we would worry\nabout syntax and parsing",
    "start": "170830",
    "end": "178379"
  },
  {
    "text": "and various kinds of\ncompiler optimizations, and there are people who make\nhonest livings doing that,",
    "start": "178380",
    "end": "183520"
  },
  {
    "text": "but at the level of\nabstraction that we're talking, a Pascal interpreter would\nnot look very different at all",
    "start": "183520",
    "end": "191990"
  },
  {
    "text": "from what you saw\nGerry do last time. Instead of that,\nwe'll spend today",
    "start": "191990",
    "end": "197420"
  },
  {
    "text": "building a really different\nlanguage, a language that encourages you to think\nabout programming not",
    "start": "197420",
    "end": "205010"
  },
  {
    "text": "in terms of procedures, but\nin a really different way. And the lecture today is\ngoing to be at two levels",
    "start": "205010",
    "end": "213650"
  },
  {
    "text": "simultaneously. On the one hand, I'm\ngoing to show you what this language looks\nlike, and on the other hand,",
    "start": "213650",
    "end": "219552"
  },
  {
    "text": "I'll show you how\nit's implemented. And we'll build an\nimplementation in LISP and see how that works. And you should be drawing\nlessons on two levels.",
    "start": "219552",
    "end": "228730"
  },
  {
    "text": "The first is to realize just\nhow different a language can be.",
    "start": "228730",
    "end": "233790"
  },
  {
    "text": "So if you think that the\njump from Fortran to LISP is a big deal, you\nhaven't seen anything yet.",
    "start": "233790",
    "end": "241560"
  },
  {
    "text": "And secondly,\nyou'll see that even with such a very different\nlanguage, which will turn out",
    "start": "241560",
    "end": "248140"
  },
  {
    "text": "to not have procedures\nat all and not talk about functions at\nall, there will still be this basic cycle\nof eval and apply",
    "start": "248140",
    "end": "256290"
  },
  {
    "text": "that's unwinds the\nmeans of combination and the means an abstraction. And then thirdly, as kind\nof a minor but elegant",
    "start": "256290",
    "end": "264020"
  },
  {
    "text": "technical point, you'll\nsee a nice use of streams to avoid backtracking. ",
    "start": "264020",
    "end": "272330"
  },
  {
    "text": "OK, well, I said that this\nlanguage is very different. To explain that, let's go\nback to the very first idea",
    "start": "272330",
    "end": "281330"
  },
  {
    "text": "that we talked about\nin this course, and that was the idea\nof the distinction between the declarative\nknowledge of mathematics--",
    "start": "281330",
    "end": "290240"
  },
  {
    "text": "the definition of a square\nroot as a mathematical truth--",
    "start": "290240",
    "end": "295470"
  },
  {
    "text": "and the idea that computer\nscience talks about the how to knowledge-- contrast that definition\nof square root",
    "start": "295470",
    "end": "302240"
  },
  {
    "text": "with a program to\ncompute a square root. That's where we started off.",
    "start": "302240",
    "end": "308042"
  },
  {
    "text": "Well, wouldn't it be\ngreat if you could somehow bridge this gap and make a\nprogramming language which",
    "start": "308042",
    "end": "315349"
  },
  {
    "text": "sort of did things, but you\ntalked about it in terms of truth, in declarative terms?",
    "start": "315350",
    "end": "322345"
  },
  {
    "text": "So that would be a\nprogramming language in which you specify facts.",
    "start": "322345",
    "end": "327690"
  },
  {
    "text": "You tell it what is. You say what is true. And then when you\nwant an answer,",
    "start": "327690",
    "end": "333140"
  },
  {
    "text": "somehow the language has\nbuilt into it automatically general kinds of how to\nknowledge so it can just",
    "start": "333140",
    "end": "339960"
  },
  {
    "text": "take your facts and it can\nevolve these methods on its on using the facts\nyou gave it and maybe some general rules of logic.",
    "start": "339960",
    "end": "346199"
  },
  {
    "text": " So for instance, I might\ngo up to this program",
    "start": "346200",
    "end": "353400"
  },
  {
    "text": "and start telling\nit some things. So I might tell it that\nthe son of Adam is Abel.",
    "start": "353400",
    "end": "368919"
  },
  {
    "text": "And I might tell it that\nthe son of Adam is Cain.",
    "start": "368920",
    "end": "377660"
  },
  {
    "text": "And I might tell it that\nthe son of Cain is Enoch.",
    "start": "377660",
    "end": "384670"
  },
  {
    "text": " And I might tell it\nthat the son of Enoch",
    "start": "384670",
    "end": "393850"
  },
  {
    "text": "is Irad, and all through\nthe rest of our chapter",
    "start": "393850",
    "end": "399720"
  },
  {
    "text": "whatever of Genesis, which ends\nup ending in Adah, by the way, and this shows the\ngenealogy of Adah from Cain.",
    "start": "399720",
    "end": "408759"
  },
  {
    "text": "Anyway, once you tell it these\nfacts, you might ask it things. You might go up to your language\nand say, who's the son of Adam?",
    "start": "408760",
    "end": "420420"
  },
  {
    "text": "And you can very easily imagine\nhaving a little general purpose search program which\nwould be able to go",
    "start": "420420",
    "end": "426460"
  },
  {
    "text": "through and in response\nto that say, oh yeah, there are two answers:\nthe son of Adam is Abel and the son of Adam is Cain.",
    "start": "426460",
    "end": "434140"
  },
  {
    "text": "Or you might say, based on\nthe very same facts, who is Cain the son of?",
    "start": "434140",
    "end": "441950"
  },
  {
    "text": "And then you can imagine\ngenerating another slightly different search program which\nwould be able to go through",
    "start": "441950",
    "end": "449509"
  },
  {
    "text": "and checked for who is Cain, and\nson of, and come up with Adam.",
    "start": "449510",
    "end": "455890"
  },
  {
    "text": "Or you might say,\nwhat's the relationship between Cain and Enoch?",
    "start": "455890",
    "end": "462069"
  },
  {
    "text": "And again, a minor variant\non that search program. You could figure out\nthat it said son of.",
    "start": "462070",
    "end": "468160"
  },
  {
    "text": " But even here in this very\nsimple example, what you see",
    "start": "468160",
    "end": "476960"
  },
  {
    "text": "is that a single fact,\nsee, a single fact like the son of Adam is\nCain can be used to answer",
    "start": "476960",
    "end": "484229"
  },
  {
    "text": "different kinds of questions. You can say, who's\nthe son of, or you can say who's the\nson of Adam, or you",
    "start": "484230",
    "end": "490887"
  },
  {
    "text": "can say what's the relation\nbetween Adam and Cain? Those are different\nquestions being run by different traditional\nprocedures all based",
    "start": "490887",
    "end": "499270"
  },
  {
    "text": "on the same fact. And that's going\nto be the essence of the power of this\nprogramming style,",
    "start": "499270",
    "end": "507010"
  },
  {
    "text": "that one piece of\ndeclarative knowledge can be used as the basis\nfor a lot of different kinds",
    "start": "507010",
    "end": "513070"
  },
  {
    "text": "of how-to knowledge, as opposed\nto the kinds of procedures we're writing where\nyou sort of tell it",
    "start": "513070",
    "end": "518289"
  },
  {
    "text": "what input you're giving it\nand what answer you want. So for instance, our\nsquare root program can perfectly well\nanswer the question,",
    "start": "518289",
    "end": "524760"
  },
  {
    "text": "what's the square root of 144?  But in principle, the\nmathematical definition",
    "start": "524760",
    "end": "531230"
  },
  {
    "text": "of square root tells\nyou other things. Like it could say, what\nis 17 the square root of?",
    "start": "531230",
    "end": "537048"
  },
  {
    "text": "And that would be\nhave to be answered by a different program. So the mathematical\ndefinition, or in general,",
    "start": "537048",
    "end": "545279"
  },
  {
    "text": "the facts that you give\nit are somehow unbiased as to what the question is.",
    "start": "545280",
    "end": "550847"
  },
  {
    "text": "Whereas the programs we\ntend to write specifically because their how-to\nknowledge tend to be looking for\na specific answer.",
    "start": "550847",
    "end": "557420"
  },
  {
    "text": "So that's going to be one\ncharacteristic of what we're talking about. We can go on.",
    "start": "557420",
    "end": "563480"
  },
  {
    "text": "We can imagine that\nwe've given our language some sort of facts. Now let's give it some\nrules of inference.",
    "start": "563480",
    "end": "570020"
  },
  {
    "text": "We can say, for\ninstance, if the--",
    "start": "570020",
    "end": "575100"
  },
  {
    "text": "make up some syntax here-- if the son of x is y--",
    "start": "575100",
    "end": "581580"
  },
  {
    "text": "I'll put question marks to\nindicate variables here-- if the son of x is\ny and the son of y",
    "start": "581580",
    "end": "595320"
  },
  {
    "text": "is z, then the\ngrandson of x is z.",
    "start": "595320",
    "end": "609320"
  },
  {
    "text": "So I can imagine telling\nmy machine that rule",
    "start": "609320",
    "end": "615040"
  },
  {
    "text": "and then being able\nto say, for instance, who's the grandson of Adam?",
    "start": "615040",
    "end": "620610"
  },
  {
    "text": "Or who is Irad the grandson of? Or deduce all grandson\nrelationships you possibly",
    "start": "620610",
    "end": "627602"
  },
  {
    "text": "can from this information.  We can imagine somehow\nthe language knowing",
    "start": "627602",
    "end": "633946"
  },
  {
    "text": "how to do that automatically. ",
    "start": "633947",
    "end": "642640"
  },
  {
    "text": "Let me give you maybe a little\nbit more concrete example. ",
    "start": "642640",
    "end": "649610"
  },
  {
    "text": "Here's a procedure that\nmerges two sorted lists. So x and y are two,\nsay, lists of numbers,",
    "start": "649610",
    "end": "660300"
  },
  {
    "text": "lists of distinct\nnumbers, if you like, that are in increasing order. And what merge does\nis take two such lists",
    "start": "660300",
    "end": "667602"
  },
  {
    "text": "and combine them into a\nlist where everything's in increasing order, and this\nis a pretty easy programs",
    "start": "667602",
    "end": "674932"
  },
  {
    "text": "that you ought to\nbe able to write. It says, if x is\nempty, the answer is y. If y is empty, the answer is x.",
    "start": "674932",
    "end": "681073"
  },
  {
    "text": "Otherwise, you compare\nthe first two elements. So you pick out the first thing\nin x and the first thing in y,",
    "start": "681073",
    "end": "686820"
  },
  {
    "text": "and then depending on which of\nthose first elements is less,",
    "start": "686820",
    "end": "692810"
  },
  {
    "text": "you stick the lower one on\nto the result a recursively merging, either chopping the\nfirst one off x or chopping",
    "start": "692810",
    "end": "700640"
  },
  {
    "text": "the first one off y. That's a standard\nkind of program. ",
    "start": "700640",
    "end": "706470"
  },
  {
    "text": "Let's look at the logic. Let's forget about\nthe program and look at the logic on which\nthat procedure is based.",
    "start": "706470",
    "end": "713820"
  },
  {
    "text": "See, there's some\nlogic which says, gee, if the first one is less, then\nwe get the answer by sticking",
    "start": "713820",
    "end": "718960"
  },
  {
    "text": "something onto the result of\nrecursively merging the rest. So let's try and be explicit\nabout what that logic is",
    "start": "718960",
    "end": "725260"
  },
  {
    "text": "that's making the program work. So here's one piece. Here's the piece of the program\nwhich recursively chops down",
    "start": "725260",
    "end": "734850"
  },
  {
    "text": "x if the first thing\nin x is smaller. And if you want to be\nvery explicit about what",
    "start": "734850",
    "end": "741570"
  },
  {
    "text": "the logic is there,\nwhat's really going on is a deduction,\nwhich says, if you",
    "start": "741570",
    "end": "747439"
  },
  {
    "text": "know that some list, that\nwe'll call cdr of x, and y",
    "start": "747440",
    "end": "753350"
  },
  {
    "text": "merged to form z,\nand you know that a",
    "start": "753350",
    "end": "759819"
  },
  {
    "text": "is less than the\nfirst thing in y, then you know that if you\nput a onto the cdr of x, then",
    "start": "759820",
    "end": "770040"
  },
  {
    "text": "that result and y\nmerge to form a onto z.",
    "start": "770040",
    "end": "775820"
  },
  {
    "text": "And what that is, that's the\nunderlying piece of logic-- I haven't written\nit as a program, I wrote it a sort\nof deduction that's",
    "start": "775820",
    "end": "783380"
  },
  {
    "text": "underneath this particular\nclause that says we can use the recursion there.",
    "start": "783380",
    "end": "789410"
  },
  {
    "text": "And then similar, here's\nthe other clause just to complete it. The other clause is based on\nthis piece of logic, which",
    "start": "789410",
    "end": "796089"
  },
  {
    "text": "is almost the same and\nI won't go through it, and then there's the n cases\nwhere we tested for null,",
    "start": "796090",
    "end": "802029"
  },
  {
    "text": "and that's based on the\nidea that for any x, x and the empty list\nmerge to form an x,",
    "start": "802030",
    "end": "808130"
  },
  {
    "text": "or for any y, the empty\nlist and y merge to form y. ",
    "start": "808130",
    "end": "813360"
  },
  {
    "text": "OK, so there's a\npiece of procedure",
    "start": "813360",
    "end": "818480"
  },
  {
    "text": "and the logic on\nwhich it's based. And notice a big difference.",
    "start": "818480",
    "end": "824750"
  },
  {
    "text": "The procedure looked like\nthis: it said there was a box--",
    "start": "824750",
    "end": "832900"
  },
  {
    "text": "and all the things\nwe've been doing have the characteristic we\nhave boxes and things going in and things going out-- there\nwas this box called merge,",
    "start": "832900",
    "end": "841090"
  },
  {
    "text": "and in came an x and y,\nand out came an answer.",
    "start": "841090",
    "end": "847173"
  },
  {
    "text": "That's the character of the\nprocedure that we wrote. ",
    "start": "847173",
    "end": "853160"
  },
  {
    "text": "These rules don't\nlook like that. These rules talk\nabout a relation. There's some sort of\nrelation that in those",
    "start": "853160",
    "end": "861240"
  },
  {
    "text": "slides I called mrege-to-form. So I said x and y\nmerge to form z,",
    "start": "861240",
    "end": "869020"
  },
  {
    "text": "and somehow this is a function. Right? The answer is a\nfunction of x and y,",
    "start": "869020",
    "end": "874620"
  },
  {
    "text": "and here what I have is a\nrelation between three things.",
    "start": "874620",
    "end": "879720"
  },
  {
    "text": "And I'm not going to\nspecify which is the input and which is the output. And the reason I\nwant to say that is",
    "start": "879720",
    "end": "886220"
  },
  {
    "text": "because in principle, we could\nuse exactly those same logic rules to answer a lot\nof different questions.",
    "start": "886220",
    "end": "894569"
  },
  {
    "text": "So we can say, for instance-- imagine giving our machine\nthose rules of logic. Not the program, the\nunderlying rules of logic.",
    "start": "894570",
    "end": "901399"
  },
  {
    "text": "Then it ought to\nbe able to say-- we could ask it--",
    "start": "901400",
    "end": "906770"
  },
  {
    "text": "1, 3, 7 and 2, 4, 8\nmerge to form what?",
    "start": "906770",
    "end": "920910"
  },
  {
    "text": "And that's a question it\nought to be able to answer. That's exactly the same\nquestion that our list procedure",
    "start": "920910",
    "end": "926960"
  },
  {
    "text": "answered. But the exact same\nrules should also",
    "start": "926960",
    "end": "932370"
  },
  {
    "text": "be able to answer a\nquestion like this: 1, 3, 7 and what merged\nto form 1, 2, 3, 4, 7, 8?",
    "start": "932370",
    "end": "945560"
  },
  {
    "text": "The same rules of\nlogic can answer this, although the procedure we wrote\ncan't answer that question.",
    "start": "945560",
    "end": "950880"
  },
  {
    "text": "Or we might be able to say what\nand what else merge to form--",
    "start": "950880",
    "end": "967900"
  },
  {
    "text": "what and what else merge\nto form 1, 2, 3, 4, 7, 8?",
    "start": "967900",
    "end": "973780"
  },
  {
    "text": "And the thing should be able\nto go through, if it really can apply that logic,\nand deduce all,",
    "start": "973780",
    "end": "979790"
  },
  {
    "text": "whatever is, 2 to the sixth\nanswers to that question. ",
    "start": "979790",
    "end": "985600"
  },
  {
    "text": "It could be 1 and the rest, or\nit could be 1, 2 and the rest. Or it could be 1 and\n3 and 7 and the rest.",
    "start": "985600",
    "end": "992035"
  },
  {
    "text": "There's a whole\nbunch of answers. And in principle,\nthe logic should be enough to deduce that.",
    "start": "992035",
    "end": "998550"
  },
  {
    "text": "So there are going to\nbe two big differences",
    "start": "998550",
    "end": "1004080"
  },
  {
    "text": "in the kind of program we're\ngoing to look at and not only LISP, but essentially\nall the programming",
    "start": "1004080",
    "end": "1009440"
  },
  {
    "text": "you've probably done so far in\npretty much any language you can think of. The first is, we're not going\nto be computing functions.",
    "start": "1009440",
    "end": "1017620"
  },
  {
    "text": " We're not going to be\ntalking about things",
    "start": "1017620",
    "end": "1023040"
  },
  {
    "text": "that take input and output. We're going to be\ntalking about relations. And that means in\nprinciple, these relations",
    "start": "1023040",
    "end": "1028829"
  },
  {
    "text": "don't have directionality. So the knowledge\nthat you specify",
    "start": "1028829",
    "end": "1033939"
  },
  {
    "text": "to answer this question,\nthat same knowledge should also allow you to\nanswer these other questions",
    "start": "1033940",
    "end": "1040720"
  },
  {
    "text": "and conversely. ",
    "start": "1040720",
    "end": "1046309"
  },
  {
    "text": "And the second issue\nis that since we're talking about relations, these\nrelations don't necessarily",
    "start": "1046310",
    "end": "1053710"
  },
  {
    "text": "have one answer. So that third\nquestion down there doesn't have a\nparticular answer, it has a whole bunch of answers.",
    "start": "1053710",
    "end": "1059673"
  },
  {
    "text": " Well, that's where we're going. This style of\nprogramming, by the way,",
    "start": "1059673",
    "end": "1067740"
  },
  {
    "text": "is called logic programming,\nfor kind of obvious reasons. ",
    "start": "1067740",
    "end": "1076160"
  },
  {
    "text": "And people who do logic\nprogramming say that-- they",
    "start": "1076160",
    "end": "1081942"
  },
  {
    "text": "have this little phrase--\nthey say the point of logic programming is that you use\nlogic to express what is true,",
    "start": "1081942",
    "end": "1090190"
  },
  {
    "text": "you use logic to check\nwhether something is true, and you use logic to\nfind out what is true.",
    "start": "1090190",
    "end": "1099200"
  },
  {
    "text": "The best known logic programming\nlanguage, as you probably know, is called Prolog.",
    "start": "1099200",
    "end": "1105779"
  },
  {
    "text": "The language that we're going\nto implement this morning",
    "start": "1105780",
    "end": "1110833"
  },
  {
    "text": "is something we call\nthe query language, and it essentially has\nthe essence of prologue. It can do about the same\nstuff, although it's",
    "start": "1110833",
    "end": "1118130"
  },
  {
    "text": "a lot slower because we're\ngoing to implement it in LISP rather than building\na particular compiler.",
    "start": "1118130",
    "end": "1124210"
  },
  {
    "text": "We're going to interpret it on\ntop of the LISP interpreter. But other than that, it can do\nabout the same stuff as prolog.",
    "start": "1124210",
    "end": "1129750"
  },
  {
    "text": "It has about the same power\nand about the same limitations. All right, let's\nbreak for question.",
    "start": "1129750",
    "end": "1136120"
  },
  {
    "text": " STUDENT: Yes, could\nyou please repeat",
    "start": "1136120",
    "end": "1141730"
  },
  {
    "text": "what the three things you use\nlogic programming to find? In other words, to\nfind what is true,",
    "start": "1141730",
    "end": "1148289"
  },
  {
    "text": "learn what is\ntrue-- what is the? PROFESSOR: Right. Sort of a logic programmer's\nlittle catechism.",
    "start": "1148290",
    "end": "1155850"
  },
  {
    "text": "You use logic to express what\nis true, like these rules.",
    "start": "1155850",
    "end": "1162610"
  },
  {
    "text": "You use logic to check\nwhether something is true, and that's the kind of\nquestion I didn't answer here.",
    "start": "1162610",
    "end": "1168549"
  },
  {
    "text": "I might say-- another\nquestion I could put down here is to say, is it true\nthat 1, 3, 7 and 2, 4,",
    "start": "1168550",
    "end": "1176269"
  },
  {
    "text": "8 merge to form 1, 2, 6, 10\nAnd that same logic should",
    "start": "1176270",
    "end": "1182390"
  },
  {
    "text": "be enough to say no. So I use logic to\ncheck what is true,",
    "start": "1182390",
    "end": "1188313"
  },
  {
    "text": "and then you also use logic\nto find out what's true. ",
    "start": "1188313",
    "end": "1204059"
  },
  {
    "text": "All right. Let's break. [MUSIC PLAYING BY J.S. BACH]",
    "start": "1204060",
    "end": "1222106"
  },
  {
    "text": "[MUSIC ENDS]",
    "start": "1222106",
    "end": "1247590"
  },
  {
    "text": "[MUSIC PLAYING BY J.S. BACH]",
    "start": "1247590",
    "end": "1262901"
  },
  {
    "text": "PROFESSOR: OK, let's go\nahead and take a look at this query language\nand operation.",
    "start": "1262901",
    "end": "1270520"
  },
  {
    "text": "The first thing\nyou might notice, when I put up that\nlittle biblical database, is that it's nice to be\nable to ask this language",
    "start": "1270520",
    "end": "1276669"
  },
  {
    "text": "questions in relation to\nsome collection of facts. So let's start off and make\na little collection of facts.",
    "start": "1276670",
    "end": "1286059"
  },
  {
    "text": "This is a tiny fragment of\npersonnel records for a Boston",
    "start": "1286060",
    "end": "1291700"
  },
  {
    "text": "high tech company, and here's a\npiece of the personnel records of Ben Bitdiddle.",
    "start": "1291700",
    "end": "1297500"
  },
  {
    "text": "And Ben Bitdiddle\nis the computer wizard in this company,\nhe's the underpaid computer",
    "start": "1297500",
    "end": "1304660"
  },
  {
    "text": "wizard in this company. His supervisor is\nall Oliver Warbucks, and here's his address.",
    "start": "1304660",
    "end": "1312149"
  },
  {
    "text": "So the format is we're giving\nthis information: job, salary, supervisor, address.",
    "start": "1312150",
    "end": "1317299"
  },
  {
    "text": "And there are some\nother conventions. Computer here means that Ben\nworks in the computer division,",
    "start": "1317300",
    "end": "1322515"
  },
  {
    "text": "and his position in the\ncomputer division is wizard. Here's somebody else.",
    "start": "1322515",
    "end": "1327580"
  },
  {
    "text": "Alyssa, Alyssa P. Hacker\nis a computer programmer,",
    "start": "1327580",
    "end": "1333440"
  },
  {
    "text": "and she works for Ben, and\nshe lives in Cambridge. And there's another\nprogrammer who works",
    "start": "1333440",
    "end": "1338900"
  },
  {
    "text": "for Ben who's Lem E. Tweakit. And there's a programmer\ntrainee, who is Louis Reasoner,",
    "start": "1338900",
    "end": "1347519"
  },
  {
    "text": "and he works for Alyssa. And the big wheel of the company\ndoesn't work for anybody,",
    "start": "1347520",
    "end": "1356510"
  },
  {
    "text": "right? That's Oliver Warbucks. Anyway, what we're going\nto do is ask questions",
    "start": "1356510",
    "end": "1362559"
  },
  {
    "text": "about that little world. And that'll be a\nsample world that we're going to do logic in.",
    "start": "1362560",
    "end": "1368270"
  },
  {
    "text": " Let me just write up here, for\nprobably the last time, what",
    "start": "1368270",
    "end": "1375350"
  },
  {
    "text": "I said is the very most\nimportant thing you should get out of this course, and that\nis, when somebody tells you",
    "start": "1375350",
    "end": "1380760"
  },
  {
    "text": "about a language,\nyou say, fine-- what are the primitives, what\nare the means of combination,",
    "start": "1380760",
    "end": "1394794"
  },
  {
    "text": "how do you put the\nprimitives together, and then how do\nyou abstract them,",
    "start": "1394795",
    "end": "1400070"
  },
  {
    "text": "how do you abstract\nthe compound pieces so you can use them\nas pieces to make",
    "start": "1400070",
    "end": "1406270"
  },
  {
    "text": "something more complicated? And we've said this a whole\nbunch of times already, but it's worth saying again.",
    "start": "1406270",
    "end": "1412350"
  },
  {
    "text": " Let's start. The primitives.",
    "start": "1412350",
    "end": "1418040"
  },
  {
    "text": "Well, there's really\nonly one primitive, and the primitive in this\nlanguage is called a query.",
    "start": "1418040",
    "end": "1424400"
  },
  {
    "text": "A primitive query. Let's look at some\nprimitive queries. ",
    "start": "1424400",
    "end": "1432160"
  },
  {
    "text": "Job x. Who is a computer programmer? Or find every fact\nin the database",
    "start": "1432160",
    "end": "1441590"
  },
  {
    "text": "that matches job of the\nx is computer programmer.",
    "start": "1441590",
    "end": "1446640"
  },
  {
    "text": "And you see a\nlittle syntax here. Things without question marks\nare meant to be literal, question mark x means\nthat's a variable,",
    "start": "1446640",
    "end": "1453320"
  },
  {
    "text": "and this thing will match,\nfor example, the fact that Alyssa P. Hacker is\na computer programmer,",
    "start": "1453320",
    "end": "1459200"
  },
  {
    "text": "or x is Alyssa P. Hacker. ",
    "start": "1459200",
    "end": "1466820"
  },
  {
    "text": "Or more generally, I\ncould have something with two variables in it. I could say, the job of\nx is computer something,",
    "start": "1466820",
    "end": "1479400"
  },
  {
    "text": "and that'll match\ncomputer wizard. So there's something here:\ntype will match wizard,",
    "start": "1479400",
    "end": "1484560"
  },
  {
    "text": "or type will match\nprogrammer, or x might match various certain things.",
    "start": "1484560",
    "end": "1490370"
  },
  {
    "text": "So there are, in\nour little example, only three facts in that\ndatabase that match that query. ",
    "start": "1490370",
    "end": "1499153"
  },
  {
    "text": "Let's see, just to\nshow you some syntax, the same query, this query\ndoesn't match the job of x,",
    "start": "1499153",
    "end": "1509909"
  },
  {
    "text": "doesn't match Lewis\nReasoner, the reason for that is when I write\nsomething here, what I mean is that this is going\nto be a list of two",
    "start": "1509910",
    "end": "1517159"
  },
  {
    "text": "symbols, of which the\nfirst is the word computer,",
    "start": "1517160",
    "end": "1522370"
  },
  {
    "text": "and the second can be anything. And Lewis's job description\nhere has three symbols,",
    "start": "1522370",
    "end": "1527860"
  },
  {
    "text": "so it doesn't match. And just to show you a\nlittle bit of syntax,",
    "start": "1527860",
    "end": "1535059"
  },
  {
    "text": "the more general thing\nI might want to type is a thing with a dot\nhere, and this is just",
    "start": "1535060",
    "end": "1540850"
  },
  {
    "text": "standard this\nnotation for saying, this is a list, of which the\nfirst element is the word",
    "start": "1540850",
    "end": "1546779"
  },
  {
    "text": "computers, and THE REST, is\nsomething that I'll call type. ",
    "start": "1546780",
    "end": "1553730"
  },
  {
    "text": "So this one would match. Lewis's job is computer\nprogrammer trainee,",
    "start": "1553730",
    "end": "1559480"
  },
  {
    "text": "and type here would be\nthe cdr of this list. It would be the list\nprogrammer trainee.",
    "start": "1559480",
    "end": "1566960"
  },
  {
    "text": "And that kind of dot processing\nis done automatically by the LISP reader. ",
    "start": "1566960",
    "end": "1575899"
  },
  {
    "text": "Well, let's actually try this. The idea is I'm going to type\nin queries in this language, and answers will come out.",
    "start": "1575900",
    "end": "1583630"
  },
  {
    "text": "Let's look at this. I can go up and say, who works\nin the computer division?",
    "start": "1583630",
    "end": "1590000"
  },
  {
    "text": "Job of x is computer dot y.",
    "start": "1590000",
    "end": "1599730"
  },
  {
    "text": "Doesn't matter what I\ncall the dummy variables. It says the answers to that,\nand it's found four answers.",
    "start": "1599730",
    "end": "1605690"
  },
  {
    "text": " Or I can go off and say, tell\nme about everybody's supervisor.",
    "start": "1605690",
    "end": "1612505"
  },
  {
    "text": "So I'll put in the query,\nthe primitive query, the supervisor of x is y.",
    "start": "1612505",
    "end": "1619390"
  },
  {
    "text": " There are all the supervisor\nrelationships I know.",
    "start": "1619390",
    "end": "1625540"
  },
  {
    "text": "Or I could go type in,\nwho lives in Cambridge? So I can say, the address of\nx is Cambridge dot anything.",
    "start": "1625540",
    "end": "1640669"
  },
  {
    "text": " And only one person\nlives in Cambridge.",
    "start": "1640670",
    "end": "1646585"
  },
  {
    "text": " OK, so those are\nprimitive queries.",
    "start": "1646585",
    "end": "1652170"
  },
  {
    "text": "And you see what happens\nto basic interaction with the system is\nyou type in a query,",
    "start": "1652170",
    "end": "1657560"
  },
  {
    "text": "and it types out all\npossible answers. Or another way to say\nthat: it finds out all the possible values of\nthose variables x and y or t",
    "start": "1657560",
    "end": "1664990"
  },
  {
    "text": "or whatever I've called\nthem, and it types out all ways of taking that\nquery and instantiating it--",
    "start": "1664990",
    "end": "1673080"
  },
  {
    "text": "remember that from the\nrule system lecture-- instantiates the query\nwith all possible values for those variables and\nthen types out all of them.",
    "start": "1673080",
    "end": "1680808"
  },
  {
    "text": "And there are a lot of ways you\ncan arrange a logic language. Prolog, for instance, does\nsomething slightly different.",
    "start": "1680808",
    "end": "1686010"
  },
  {
    "text": "Rather than typing back your\nquery, prolog would type out, x equals this and y equals\nthat, or x sequels this and y",
    "start": "1686010",
    "end": "1692150"
  },
  {
    "text": "equals that. And that's a very\nsurface level thing, you can decide what you like.",
    "start": "1692150",
    "end": "1699070"
  },
  {
    "text": "OK. All right. So the primitives\nin this language? Only one, right?",
    "start": "1699070",
    "end": "1704570"
  },
  {
    "text": "Primitive query. ",
    "start": "1704570",
    "end": "1711150"
  },
  {
    "text": "OK. Means of combination. Let's look at some compound\nqueries in this language.",
    "start": "1711150",
    "end": "1719769"
  },
  {
    "text": "Here's one. This one says, tell\nme all the people who",
    "start": "1719770",
    "end": "1726850"
  },
  {
    "text": "work in the computer division. Tell me all the people who\nwork in the computer division",
    "start": "1726850",
    "end": "1732322"
  },
  {
    "text": "together with their supervisors.  The way I write that\nas the query is and.",
    "start": "1732322",
    "end": "1740220"
  },
  {
    "text": "And the job of the x is\ncomputer something or other. And job of x is computer dot y.",
    "start": "1740220",
    "end": "1747560"
  },
  {
    "text": "And the supervisor of x is z. Tell me all the people in\nthe computer division--",
    "start": "1747560",
    "end": "1753570"
  },
  {
    "text": "that's this-- together\nwith their supervisors. And notice in this query\nI have three variables--",
    "start": "1753570",
    "end": "1760289"
  },
  {
    "text": "x, y, and z. And this x is supposed\nto be the same as that x.",
    "start": "1760290",
    "end": "1769450"
  },
  {
    "text": "So x works in the\ncomputer division, and the supervisor of x is z.",
    "start": "1769450",
    "end": "1774809"
  },
  {
    "text": "Let's try another one. So one means of\ncombination is and. ",
    "start": "1774810",
    "end": "1781540"
  },
  {
    "text": "Who are all the people who\nmake more than $30,000? And the salary of some\nperson p is some amount a.",
    "start": "1781540",
    "end": "1791640"
  },
  {
    "text": " And when I go and look at a,\na is greater than $30,000.",
    "start": "1791640",
    "end": "1800600"
  },
  {
    "text": "And LISP value here is a\nlittle piece of interface",
    "start": "1800600",
    "end": "1806080"
  },
  {
    "text": "that interfaces the query\nlanguage to the underlying LISP. And what the LISP\nvalue allows you to do",
    "start": "1806080",
    "end": "1812650"
  },
  {
    "text": "is call any LISP\npredicate inside a query. So here I'm using the LISP\npredicate greater than,",
    "start": "1812650",
    "end": "1818970"
  },
  {
    "text": "so I say LISP value. This I say and. So all the people whose salary\nis greater than $30,000.",
    "start": "1818970",
    "end": "1828190"
  },
  {
    "text": "Or here's a more\ncomplicated one. Tell me all the people who work\nin the computer division who",
    "start": "1828190",
    "end": "1836850"
  },
  {
    "text": "do not have a supervisor who\nworks in the computer division. ",
    "start": "1836850",
    "end": "1842789"
  },
  {
    "text": "and x works in the\ncomputer division. The job of x is computer dot y. And it's not the case that\nboth x has a supervisor z",
    "start": "1842790",
    "end": "1855380"
  },
  {
    "text": "and the job of z is\ncomputer something or other. All right, so again, this x has\ngot to be that x, and this z",
    "start": "1855380",
    "end": "1864730"
  },
  {
    "text": "is going to be that z.  And then you see another\nmeans a combination, not.",
    "start": "1864730",
    "end": "1871380"
  },
  {
    "start": "1871380",
    "end": "1877272"
  },
  {
    "text": "All right, well,\nlet's look at that. It works the same way.",
    "start": "1877272",
    "end": "1882400"
  },
  {
    "text": "I can go up to the machine\nand say and the job of the x",
    "start": "1882400",
    "end": "1891330"
  },
  {
    "text": "is computer dot y. ",
    "start": "1891330",
    "end": "1898480"
  },
  {
    "text": "And the supervisor of x is z.",
    "start": "1898480",
    "end": "1906600"
  },
  {
    "text": "And I typed that\nin like a query. And what it types\nback, what you see",
    "start": "1906600",
    "end": "1914279"
  },
  {
    "text": "are the queries I\ntyped in instantiated by all possible answers. And then you see there\nare a lot of answers.",
    "start": "1914280",
    "end": "1921690"
  },
  {
    "text": "All right. So the means of combination\nin this language-- and this is why it's\ncalled a logic language--",
    "start": "1921690",
    "end": "1927549"
  },
  {
    "text": "are logical operations. Means of combinations are\nthings like AND and NOT",
    "start": "1927550",
    "end": "1935950"
  },
  {
    "text": "and there's one I didn't\nshow you, which is OR. And then I showed you LISP\nvalue, which is not logic,",
    "start": "1935950",
    "end": "1943915"
  },
  {
    "text": "of course, but is a\nlittle special hack to interface that to LISP\nso you can get more power.",
    "start": "1943915",
    "end": "1949250"
  },
  {
    "text": "Those are the means\nof combination. OK, the means of abstraction. What we'd like to do--",
    "start": "1949250",
    "end": "1955110"
  },
  {
    "text": " let's go back for second\nand look at that last slide.",
    "start": "1955110",
    "end": "1962260"
  },
  {
    "text": "We might like to take very\ncomplicated thing, the idea that someone works in a\ndivision but does not have",
    "start": "1962260",
    "end": "1968760"
  },
  {
    "text": "a supervisor in the division. And as before, name that.",
    "start": "1968760",
    "end": "1976090"
  },
  {
    "text": "Well, if someone\nworks in a division and does not have a supervisor\nwho works in that division, that means that\nperson is a big shot.",
    "start": "1976090",
    "end": "1982750"
  },
  {
    "text": "So let's make a rule\nthat somebody x is a big shot in some department\nif x works in the department",
    "start": "1982750",
    "end": "1996080"
  },
  {
    "text": "and it's not the case that\nx has a supervisor who works in the department.",
    "start": "1996080",
    "end": "2001440"
  },
  {
    "text": "So this is our means\nof abstraction. This is a rule.  And a rule has three parts.",
    "start": "2001440",
    "end": "2007580"
  },
  {
    "text": " The thing that says it's a rule.",
    "start": "2007580",
    "end": "2013450"
  },
  {
    "text": "And then there's the\nconclusion of the rule. And then there's the\nbody of the rule.",
    "start": "2013450",
    "end": "2019892"
  },
  {
    "text": "And you can read this\nas a piece of logic which says, if you know that\nthe body of the rule is true,",
    "start": "2019892",
    "end": "2026460"
  },
  {
    "text": "then you can conclude that\nthe conclusion is true. Or in order to deduce that x is\na big shot in some department,",
    "start": "2026460",
    "end": "2033870"
  },
  {
    "text": "it's enough to verify that. So that's what rules look like. ",
    "start": "2033870",
    "end": "2043279"
  },
  {
    "text": "Let's go back and look\nat that merge example that I did before the break. Let's look at how that would\nlook in terms of rules.",
    "start": "2043280",
    "end": "2051610"
  },
  {
    "text": "I'm going to take\nthe logic I put up and just change it into a\nbunch of rules in this format. ",
    "start": "2051610",
    "end": "2058725"
  },
  {
    "text": "We have a rule. Remember, there was this\nthing merge-to-form. There is a rule that says,\nthe empty list and y merge",
    "start": "2058725",
    "end": "2068849"
  },
  {
    "text": "to form y. This is the rule conclusion.  And notice this particular\nrule has no body.",
    "start": "2068850",
    "end": "2076649"
  },
  {
    "text": "And in this language,\na rule with no body is something that\nis always true. You can always\nassume that's true.",
    "start": "2076650",
    "end": "2082510"
  },
  {
    "text": " And there was another\npiece of logic that said anything\nin the empty list",
    "start": "2082510",
    "end": "2088179"
  },
  {
    "text": "merged to form the anything. That's this. A rule y and the empty\nlist merge to form y.",
    "start": "2088179",
    "end": "2095510"
  },
  {
    "text": "Those corresponded\nto the two end cases in our merge procedure,\nbut now we're talking about logic,\nnot about procedures.",
    "start": "2095510",
    "end": "2103490"
  },
  {
    "text": "Then we had another\nrule, which said if you know how\nshorter things merge,",
    "start": "2103490",
    "end": "2108747"
  },
  {
    "text": "you can put them together. So this says, if you have\na list x and y and z,",
    "start": "2108747",
    "end": "2115000"
  },
  {
    "text": "and if you want to\ndeduce that a dot x-- this means constant a onto x,\nor a list whose first thing is",
    "start": "2115000",
    "end": "2120820"
  },
  {
    "text": "a and whose rest is x-- so if you want to deduce\nthat a dot x and b dot y merge to form b dot z--",
    "start": "2120820",
    "end": "2127390"
  },
  {
    "text": " that would say you merge\nthese two lists a x and b y",
    "start": "2127390",
    "end": "2133960"
  },
  {
    "text": "and you're going to get\nsomething that starts with b-- you can deduce that if you\nknow that it's the case",
    "start": "2133960",
    "end": "2141020"
  },
  {
    "text": "both that a dot x and y merge to\nform z and a is larger than b.",
    "start": "2141020",
    "end": "2148690"
  },
  {
    "text": "So when I merge them, b\nwill come first in the list. That's a little translation\nof the logic rule",
    "start": "2148690",
    "end": "2154910"
  },
  {
    "text": "that I wrote in\npseudo-English before. And then just for completeness,\nhere's the other case.",
    "start": "2154910",
    "end": "2163130"
  },
  {
    "text": "a dot x and b dot y\nmerge to form a dot z if x and b dot y merged to\nform z and b is larger than a.",
    "start": "2163130",
    "end": "2172190"
  },
  {
    "text": "So that's a little program that\nI've typed in in this language, and now let's look at it run.",
    "start": "2172190",
    "end": "2177416"
  },
  {
    "text": " So I typed in the\nmerge rules before,",
    "start": "2177416",
    "end": "2184170"
  },
  {
    "text": "and I could use this\nlike a procedure. I could say merge to\nform 1 and 3 and 2 and 7.",
    "start": "2184170",
    "end": "2199590"
  },
  {
    "text": "So here I'm using it\nlike the LISP procedure. Now it's going to think\nabout that for a while",
    "start": "2199590",
    "end": "2206500"
  },
  {
    "text": "and apply these rules.  So it found an answer.",
    "start": "2206500",
    "end": "2212800"
  },
  {
    "text": "Now it's going to see if\nthere are any other answers but it doesn't know a priori\nthere's only one answer.",
    "start": "2212800",
    "end": "2217809"
  },
  {
    "text": "So it's sitting here\nchecking all possibilities, and it says, no more. Done. So there I've used those\nrules like a procedure.",
    "start": "2217810",
    "end": "2225210"
  },
  {
    "text": "Or remember the whole\npoint is that I can ask different kinds of questions.",
    "start": "2225210",
    "end": "2230220"
  },
  {
    "text": "I could say merge to form,\nlet's see, how about 2 and a.",
    "start": "2230220",
    "end": "2244590"
  },
  {
    "text": "Some list of two elements\nwhich I know starts with 2, and the other thing I don't\nknow, and x and some other list",
    "start": "2244590",
    "end": "2256599"
  },
  {
    "text": "merge to form a 1, 2, 3 and 4. ",
    "start": "2256600",
    "end": "2262760"
  },
  {
    "text": "So now it's going\nto think about that. It's got to find-- ",
    "start": "2262760",
    "end": "2267928"
  },
  {
    "text": "so it found one possibility. It said a could be 3, and\nx could be the list 1, 4.",
    "start": "2267928",
    "end": "2273830"
  },
  {
    "text": "And now, again,\nit's got to check because it doesn't a\npriori know that there aren't any other\npossibilities going on.",
    "start": "2273830",
    "end": "2280190"
  },
  {
    "text": " Or like I said, I\ncould say something",
    "start": "2280190",
    "end": "2287790"
  },
  {
    "text": "like merge to form, like, what\nand what else merge to form 1,",
    "start": "2287790",
    "end": "2296020"
  },
  {
    "text": "2, 3, 4, 5? ",
    "start": "2296020",
    "end": "2304062"
  },
  {
    "text": "Now it's going to\nthink about that.  And there are a lot of\nanswers that it might get.",
    "start": "2304062",
    "end": "2310310"
  },
  {
    "text": " And what you see is\nhere you're really",
    "start": "2310310",
    "end": "2317087"
  },
  {
    "text": "paying the price of slowness. ",
    "start": "2317087",
    "end": "2322210"
  },
  {
    "text": "And kind of for three reasons. One is that this language\nis doubly interpreted.",
    "start": "2322210",
    "end": "2327630"
  },
  {
    "text": "Whereas in a real\nimplementation, you would go compile this\ndown to primitive operations. The other reason is that this\nparticular algorithm for merges",
    "start": "2327630",
    "end": "2336930"
  },
  {
    "text": "is doubly recursive. So it's going to take\na very long time. And eventually, this is going\nto go through and find--",
    "start": "2336930",
    "end": "2346630"
  },
  {
    "text": "find what? Two to the fifth\npossible answers. ",
    "start": "2346630",
    "end": "2352140"
  },
  {
    "text": "And you see they come out in\nsome fairly arbitrary order, depending on which order it's\ngoing to be trying these rules.",
    "start": "2352140",
    "end": "2359533"
  },
  {
    "text": "In fact, what we're going\nto do when they edit the videotape is\nspeed all this up. Don't you like taking\nout these weights?",
    "start": "2359533",
    "end": "2366125"
  },
  {
    "text": "And don't you wish you\ncould do that in your demos? ",
    "start": "2366125",
    "end": "2372840"
  },
  {
    "text": "Anyway, it's still\ngrinding there. ",
    "start": "2372840",
    "end": "2379220"
  },
  {
    "text": "Anyway, there are\n32 possibilities-- we won't wait for it to\nprint out all of them. ",
    "start": "2379220",
    "end": "2387802"
  },
  {
    "text": "OK, so the needs of abstraction\nin this language are rules. ",
    "start": "2387802",
    "end": "2393630"
  },
  {
    "text": "So we take some bunch of\nthings that are put together with logic and we name them.",
    "start": "2393630",
    "end": "2400349"
  },
  {
    "text": "And you can think\nof that as naming a particular pattern of logic. Or you can think\nof that as saying, if you want to deduce\nsome conclusion,",
    "start": "2400350",
    "end": "2408059"
  },
  {
    "text": "you can apply those\nrules of logic. And those are three\nelements of this language.",
    "start": "2408060",
    "end": "2413420"
  },
  {
    "text": "Let's break now, and then we'll\ntalk about how it's actually implemented. ",
    "start": "2413420",
    "end": "2422747"
  },
  {
    "text": "STUDENT: Does using\nLISP value primitive or whatever interfere\nwith your means",
    "start": "2422747",
    "end": "2428369"
  },
  {
    "text": "to go both directions\non a query? PROFESSOR: OK, that's a--",
    "start": "2428370",
    "end": "2433530"
  },
  {
    "text": "the question is, does\nusing LISP value interfere with the ability to go both\ndirections on the query?",
    "start": "2433530",
    "end": "2440090"
  },
  {
    "text": "We haven't really talked\nabout the implementation yet, but the answer is, yes, it can.",
    "start": "2440090",
    "end": "2446890"
  },
  {
    "text": "In general, as we'll\nsee at the end-- although I really won't\nto go into details--",
    "start": "2446890",
    "end": "2453330"
  },
  {
    "text": "it's fairly complicated,\nespecially when you use either not or LISP value--",
    "start": "2453330",
    "end": "2459780"
  },
  {
    "text": "or actually, if you use\nanything besides only and, it becomes very\ncomplicated to say",
    "start": "2459780",
    "end": "2467000"
  },
  {
    "text": "when these things will work. They won't work quite\nin all situations. I'll talk about that at the\nend of the second half today.",
    "start": "2467000",
    "end": "2473992"
  },
  {
    "text": "But the answer to\nyour question is, yes, by dragging in a lot\nmore power from LISP value,",
    "start": "2473992",
    "end": "2479500"
  },
  {
    "text": "you lose some of the principal\npower of logic programming. That's a trade-off\nthat you have to make.",
    "start": "2479500",
    "end": "2488089"
  },
  {
    "text": "OK, let's take a break. ",
    "start": "2488090",
    "end": "2509844"
  }
]