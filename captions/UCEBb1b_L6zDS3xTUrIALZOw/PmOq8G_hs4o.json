[
  {
    "text": "In a weak priority system the currently-running\ntask will always run to completion before",
    "start": "969",
    "end": "5330"
  },
  {
    "text": "considering what to run next.",
    "start": "5330",
    "end": "7970"
  },
  {
    "text": "This means the worst-case latency for a device\nalways includes the worst-case service time",
    "start": "7970",
    "end": "12541"
  },
  {
    "text": "across all the other devices,\ni.e., the maximum time we have to wait for",
    "start": "12541",
    "end": "17099"
  },
  {
    "text": "the currently-running task to complete.",
    "start": "17099",
    "end": "20749"
  },
  {
    "text": "If there's a long-running task that usually\nmeans it will be impossible to meet tight",
    "start": "20749",
    "end": "25349"
  },
  {
    "text": "deadlines for other tasks.",
    "start": "25349",
    "end": "27320"
  },
  {
    "text": "For example, suppose disk requests have a\n800 us deadline in order to guarantee the",
    "start": "27320",
    "end": "32300"
  },
  {
    "text": "best throughput from the disk subsystem.",
    "start": "32300",
    "end": "34640"
  },
  {
    "text": "Since the disk handler service time is 500\nus, the maximum allowable latency between",
    "start": "34640",
    "end": "40950"
  },
  {
    "text": "a disk request and starting to execute the\ndisk service routine is 300 us.",
    "start": "40950",
    "end": "47040"
  },
  {
    "text": "Oops!",
    "start": "47040",
    "end": "48040"
  },
  {
    "text": "The weak priority scheme can only guarantee\na maximum latency of 800 us, not nearly fast",
    "start": "48040",
    "end": "53700"
  },
  {
    "text": "enough to meet the disk deadline.",
    "start": "53700",
    "end": "56240"
  },
  {
    "text": "We can't meet the disk deadline using weak\npriorities.",
    "start": "56240",
    "end": "60670"
  },
  {
    "text": "We need to introduce a preemptive priority\nsystem that allows lower-priority handlers",
    "start": "60670",
    "end": "65408"
  },
  {
    "text": "to be interrupted by higher-priority requests.",
    "start": "65409",
    "end": "69159"
  },
  {
    "text": "We'll refer to this as a \"strong\" priority\nsystem.",
    "start": "69159",
    "end": "73310"
  },
  {
    "text": "Suppose we gave the disk the highest priority,\nthe printer second priority, and keyboard",
    "start": "73310",
    "end": "76899"
  },
  {
    "text": "the lowest priority, just like we did before.",
    "start": "76900",
    "end": "80340"
  },
  {
    "text": "Now when a disk request arrives, it will start\nexecuting immediately without having to wait",
    "start": "80340",
    "end": "85359"
  },
  {
    "text": "for the completion of the lower-priority printer\nor keyboard handlers.",
    "start": "85360",
    "end": "89720"
  },
  {
    "text": "The worst-case latency for the disk has dropped\nto 0.",
    "start": "89720",
    "end": "93549"
  },
  {
    "text": "The printer can only be preempted by the disk,\nso it's worst-case latency is 500 us.",
    "start": "93549",
    "end": "100590"
  },
  {
    "text": "Since it has the lowest priority, the worst-case\nlatency for the keyboard is unchanged at 900",
    "start": "100590",
    "end": "106179"
  },
  {
    "text": "us since it might still have to wait on the\ndisk and printer.",
    "start": "106180",
    "end": "110100"
  },
  {
    "text": "The good news: with the proper assignment\nof priorities, the strong priority system",
    "start": "110100",
    "end": "114680"
  },
  {
    "text": "can guarantee that disk requests will be serviced\nby the 800 us deadline.",
    "start": "114680",
    "end": "120900"
  },
  {
    "text": "We'll need to make a small tweak to our Beta\nhardware to implement a strong priority system.",
    "start": "120900",
    "end": "125869"
  },
  {
    "text": "We'll replace the single supervisor mode bit\nin PC[31] with, say, a three-bit field (PRI)",
    "start": "125869",
    "end": "133230"
  },
  {
    "text": "in PC[31:29] that indicates which of the eight\npriority levels the processor is currently",
    "start": "133230",
    "end": "139310"
  },
  {
    "text": "running at.",
    "start": "139310",
    "end": "140310"
  },
  {
    "text": "Next, we'll modify the interrupt mechanism\nas follows.",
    "start": "140310",
    "end": "143940"
  },
  {
    "text": "In addition to requesting an interrupt, the\nrequesting device also specifies the 3-bit",
    "start": "143940",
    "end": "150160"
  },
  {
    "text": "priority it was assigned by the system architect.",
    "start": "150160",
    "end": "152560"
  },
  {
    "text": "We'll add a priority encoder circuit to the\ninterrupt hardware to select the highest-priority",
    "start": "152560",
    "end": "157209"
  },
  {
    "text": "request and compare the priority of that request\n(PDEV) to the 3-bit PRI value in the PC.",
    "start": "157210",
    "end": "165660"
  },
  {
    "text": "The system will take the interrupt request\nonly if PDEV > PRI, i.e., if the priority",
    "start": "165660",
    "end": "171950"
  },
  {
    "text": "of the request is *higher* than the priority\nthe system is running at.",
    "start": "171950",
    "end": "176379"
  },
  {
    "text": "When the interrupt is taken, the old PC and\nPRI information is saved in XP, and the new",
    "start": "176380",
    "end": "182950"
  },
  {
    "text": "PC is determined by the type of interrupt\nand the new PRI field is set to PDEV.",
    "start": "182950",
    "end": "188770"
  },
  {
    "text": "So the processor will now be running at the\nhigher priority specified by the device.",
    "start": "188770",
    "end": "194640"
  },
  {
    "text": "A strong priority system allows low-priority\nhandlers to be interrupted by higher-priority",
    "start": "194640",
    "end": "200090"
  },
  {
    "text": "requests,\nso the worst-case latency seen at high priorities",
    "start": "200090",
    "end": "204180"
  },
  {
    "text": "is unaffected by the service times of lower-priority\nhandlers.",
    "start": "204180",
    "end": "209540"
  },
  {
    "text": "Using strong priorities allows us to assign\na high priority to devices with tight deadlines",
    "start": "209540",
    "end": "214000"
  },
  {
    "text": "and thus guarantee their deadlines are met.",
    "start": "214000",
    "end": "217629"
  },
  {
    "text": "Now let's consider the impact of recurring\ninterrupts, i.e., multiple interrupt requests",
    "start": "217629",
    "end": "222930"
  },
  {
    "text": "from each device.",
    "start": "222930",
    "end": "224859"
  },
  {
    "text": "We've added a \"maximum frequency\" column to\nour table, which gives the maximum rate at",
    "start": "224860",
    "end": "229460"
  },
  {
    "text": "which requests will be generated by each device.",
    "start": "229460",
    "end": "233470"
  },
  {
    "text": "The execution diagram for a strong priority\nsystem is shown below the table.",
    "start": "233470",
    "end": "237700"
  },
  {
    "text": "Here we see there are multiple requests from\neach device, in this case shown at their maximum",
    "start": "237700",
    "end": "243540"
  },
  {
    "text": "possible rate of request.",
    "start": "243540",
    "end": "246349"
  },
  {
    "text": "Each tick on the timeline represent 100 us\nof real time.",
    "start": "246349",
    "end": "251040"
  },
  {
    "text": "Printer requests occur every 1 ms (10 ticks),\ndisk requests every 2 ms (20 ticks), and keyboard",
    "start": "251040",
    "end": "259708"
  },
  {
    "text": "requests every 10 ms (100 ticks).",
    "start": "259709",
    "end": "263820"
  },
  {
    "text": "In the diagram you can see that the high-priority\ndisk requests are serviced as soon as they're",
    "start": "263820",
    "end": "268540"
  },
  {
    "text": "received.",
    "start": "268540",
    "end": "270290"
  },
  {
    "text": "And that medium-priority printer requests\npreempt lower-priority execution of the keyboard",
    "start": "270290",
    "end": "275190"
  },
  {
    "text": "handler.",
    "start": "275190",
    "end": "277060"
  },
  {
    "text": "Printer requests would be preempted by disk\nrequests, but given their request patterns,",
    "start": "277060",
    "end": "281810"
  },
  {
    "text": "there's never a printer request in progress\nwhen a disk request arrives, so we don't see",
    "start": "281810",
    "end": "286960"
  },
  {
    "text": "that happening here.",
    "start": "286960",
    "end": "288680"
  },
  {
    "text": "The maximum latency before a keyboard requests\nstarts is indeed 900 us.",
    "start": "288680",
    "end": "294580"
  },
  {
    "text": "But that doesn't tell the whole story!",
    "start": "294580",
    "end": "296729"
  },
  {
    "text": "As you can see, the poor keyboard handler\nis continually preempted by higher-priority",
    "start": "296730",
    "end": "301280"
  },
  {
    "text": "disk and printer requests and so the keyboard\nhandler doesn't complete until 3 ms after",
    "start": "301280",
    "end": "307300"
  },
  {
    "text": "its request was received!",
    "start": "307300",
    "end": "309159"
  },
  {
    "text": "This illustrates why real-time constraints\nare best expressed in terms of deadlines and",
    "start": "309160",
    "end": "314470"
  },
  {
    "text": "not latencies.",
    "start": "314470",
    "end": "316330"
  },
  {
    "text": "If the keyboard deadline had been less that\n3 ms, even the strong priority system would",
    "start": "316330",
    "end": "321439"
  },
  {
    "text": "have failed to meet the hard real-time constraints.",
    "start": "321440",
    "end": "324460"
  },
  {
    "text": "The reason would be that there simply aren't\nenough CPU cycles to meet the recurring demands",
    "start": "324460",
    "end": "329620"
  },
  {
    "text": "of the devices in the face of tight deadlines.",
    "start": "329620",
    "end": "333419"
  },
  {
    "text": "Speaking of having enough CPU cycles, there\nare several calculations we need to do when",
    "start": "333419",
    "end": "338120"
  },
  {
    "text": "thinking about recurring interrupts.",
    "start": "338120",
    "end": "340830"
  },
  {
    "text": "The first is to consider how much load each\nperiodic request places on the system.",
    "start": "340830",
    "end": "345770"
  },
  {
    "text": "There's one keyboard request every 10 ms and\nservicing each request takes 800 us, which",
    "start": "345770",
    "end": "352110"
  },
  {
    "text": "consumes 800us/10ms = 8% of the CPU.",
    "start": "352110",
    "end": "358080"
  },
  {
    "text": "A similar calculation shows that servicing\nthe disk takes 25% of the CPU and servicing",
    "start": "358080",
    "end": "363550"
  },
  {
    "text": "the printer takes 40% of the CPU.",
    "start": "363550",
    "end": "367289"
  },
  {
    "text": "Collectively servicing all the devices takes\n73% of the CPU cycles, leaving 27% for running",
    "start": "367290",
    "end": "374050"
  },
  {
    "text": "user-mode programs.",
    "start": "374050",
    "end": "376240"
  },
  {
    "text": "Obviously we'd be in trouble if takes more\nthan 100% of the available cycles to service",
    "start": "376240",
    "end": "381009"
  },
  {
    "text": "the devices.",
    "start": "381009",
    "end": "382889"
  },
  {
    "text": "Another way to get in trouble is to not have\nenough CPU cycles to meet each of the deadlines.",
    "start": "382889",
    "end": "388430"
  },
  {
    "text": "We need 500/800 = 67.5% of the cycles to service\nthe disk in the time between the disk request",
    "start": "388430",
    "end": "395080"
  },
  {
    "text": "and disk deadline.",
    "start": "395080",
    "end": "397978"
  },
  {
    "text": "If we assume we want to finish serving one\nprinter request before receiving the next,",
    "start": "397979",
    "end": "402670"
  },
  {
    "text": "the effective printer deadline is 1000 us.",
    "start": "402670",
    "end": "406479"
  },
  {
    "text": "In 1000 us we need to be able to service one\nhigher-priority disk request (500 us) and,",
    "start": "406479",
    "end": "412750"
  },
  {
    "text": "obviously, the printer request (400 us).",
    "start": "412750",
    "end": "416400"
  },
  {
    "text": "So we'll need to use 900 us of the CPU in\nthat 1000 us interval.",
    "start": "416400",
    "end": "422220"
  },
  {
    "text": "Whew, just barely made it!",
    "start": "422220",
    "end": "425000"
  },
  {
    "text": "Suppose we tried setting the keyboard deadline\nto 2000 us.",
    "start": "425000",
    "end": "429389"
  },
  {
    "text": "In that time interval we'd also need to service\n1 disk request and 2 printer requests.",
    "start": "429389",
    "end": "434990"
  },
  {
    "text": "So the total service time needed is 500 +\n2*400 + 800 = 2100 us.",
    "start": "434990",
    "end": "443139"
  },
  {
    "text": "Oops, that exceeds the 2000 us window we were\ngiven, so we can't meet the 2000 us deadline",
    "start": "443140",
    "end": "450509"
  },
  {
    "text": "with the available CPU resources.",
    "start": "450509",
    "end": "453860"
  },
  {
    "text": "But if the keyboard deadline is 3000 us, let's\nsee what happens.",
    "start": "453860",
    "end": "458550"
  },
  {
    "text": "In a 3000 us interval we need to service 2\ndisk requests, 3 printer requests, and, of",
    "start": "458550",
    "end": "464599"
  },
  {
    "text": "course, 1 keyboard request, for a total service\ntime of 2*500 + 3*400 + 800 = 3000 us.",
    "start": "464600",
    "end": "474210"
  },
  {
    "text": "Whew!",
    "start": "474210",
    "end": "475210"
  },
  {
    "text": "Just made it!",
    "start": "475210",
    "end": "475469"
  }
]