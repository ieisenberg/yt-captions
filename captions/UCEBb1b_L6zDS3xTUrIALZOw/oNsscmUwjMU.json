[
  {
    "start": "0",
    "end": "25370"
  },
  {
    "text": "MICHAEL SIPSER: Hi, folks. Why don't we get started? ",
    "start": "25370",
    "end": "31259"
  },
  {
    "text": "Welcome back. Good to see you all here.",
    "start": "31260",
    "end": "37220"
  },
  {
    "text": "So I am going to first-- ",
    "start": "37220",
    "end": "43989"
  },
  {
    "text": "well, we'll recap\nwhat we did last time and what we're\ngoing to do today.",
    "start": "43990",
    "end": "49840"
  },
  {
    "text": "I'll talk a little bit\nabout the problem set. And we'll also have a break,\nas requested, halfway through.",
    "start": "49840",
    "end": "56149"
  },
  {
    "text": "So why don't we jump in? What we did last time was\nbesides introducing the course,",
    "start": "56150",
    "end": "65010"
  },
  {
    "text": "we introduced finite automata\nin regular languages, which are the languages that the\nfinite automata can recognize.",
    "start": "65010",
    "end": "71190"
  },
  {
    "text": "We talked about these\nregular operations. ",
    "start": "71190",
    "end": "78200"
  },
  {
    "text": "Those allow us to build what we\ncall our regular expressions. These are ways of\ndescribing languages.",
    "start": "78200",
    "end": "84270"
  },
  {
    "text": "So we have finite automata\ncan describe languages, and regular expressions\ncan describe languages.",
    "start": "84270",
    "end": "90049"
  },
  {
    "text": "And one of our goals is to\nshow that those two systems are equivalent to one another,\neven though they look rather",
    "start": "90050",
    "end": "95780"
  },
  {
    "text": "different at first glance. So to move in that\ndirection, we're",
    "start": "95780",
    "end": "105570"
  },
  {
    "text": "going to prove\nclosure properties for the class of\nregular languages over these regular operations.",
    "start": "105570",
    "end": "112000"
  },
  {
    "text": "So we'll show that-- well, we already showed that\nany two regular languages have their union,\nalso being regular.",
    "start": "112000",
    "end": "119010"
  },
  {
    "text": "And we'll show that for the\nother two operations as well. So let's just look ahead to\nwhat we're going to do today.",
    "start": "119010",
    "end": "125615"
  },
  {
    "text": "We're going to introduce\nan important concept which is going to be a theme\nthroughout the course, called nondeterminism.",
    "start": "125615",
    "end": "131009"
  },
  {
    "text": "And having that as a\ntool that we can use,",
    "start": "131009",
    "end": "137550"
  },
  {
    "text": "we'll be able to show closure\nunder concatenation and star, finishing up what we\nstarted to do last time.",
    "start": "137550",
    "end": "145100"
  },
  {
    "text": "And then we'll use those\nclosure constructions to show how to convert regular\nexpressions to finite automata.",
    "start": "145100",
    "end": "156400"
  },
  {
    "text": "And that's going to be\nhalfway to our goal of showing that the two systems are\nequivalent to one another.",
    "start": "156400",
    "end": "163180"
  },
  {
    "text": "And the following\nlecture, we will show how to do the conversion\nin the other direction.",
    "start": "163180",
    "end": "168570"
  },
  {
    "text": "So I thought we would just\njump in, then, and look at-- return to the material\nof the course.",
    "start": "168570",
    "end": "176390"
  },
  {
    "text": "As you remember, we were looking\nat the closure properties for the class of\nregular languages.",
    "start": "176390",
    "end": "183569"
  },
  {
    "text": "We started doing that. And if you recall, hopefully,\nwe did closure under union.",
    "start": "183570",
    "end": "189110"
  },
  {
    "text": "And then we tried to do closure\nunder concatenation, which I have shown here on\nthis slide, the proof",
    "start": "189110",
    "end": "198799"
  },
  {
    "text": "attempt that we tried\nto do last time. And let's just\nreview that quickly, because I think that's going\nto be helpful to see how to fix",
    "start": "198800",
    "end": "206690"
  },
  {
    "text": "the problem that came up. So if you remember, we're\ngiven two regular languages, A1",
    "start": "206690",
    "end": "215750"
  },
  {
    "text": "and A2. And we're trying to show that\nthe concatenation language A1A2 is also regular.",
    "start": "215750",
    "end": "222270"
  },
  {
    "text": "And so the way we go\nabout all of these things is we assume that A1\nand A2 are regular.",
    "start": "222270",
    "end": "229200"
  },
  {
    "text": "So that means we have machines,\nfinite automata, for A1 and A2. We'll call them M1\nand M2, that recognize",
    "start": "229200",
    "end": "236670"
  },
  {
    "text": "A1 and A2, respectively. And then what we\nneed to do in order to show the\nconcatenation is regular",
    "start": "236670",
    "end": "244739"
  },
  {
    "text": "is to make a finite\nautomaton which recognizes the concatenation. And we tried to\ndo that last time.",
    "start": "244740",
    "end": "251980"
  },
  {
    "text": "So if you remember, that\nconcatenation machine--",
    "start": "251980",
    "end": "257470"
  },
  {
    "text": "M, we're calling it-- what is it supposed to do? It's supposed to accept\nits input if it's",
    "start": "257470",
    "end": "263680"
  },
  {
    "text": "in the concatenation language. And that means that the input\ncan be split into two parts, x",
    "start": "263680",
    "end": "269950"
  },
  {
    "text": "and y, where x is\nin the A language, and y is in the B lang--",
    "start": "269950",
    "end": "275770"
  },
  {
    "text": "y is accepted by M1-- and x is accepted by M1,\nand y is accepted by M2. Sorry I garbled that up.",
    "start": "275770",
    "end": "282070"
  },
  {
    "text": "So x should be in A1,\nand y should be in A2. if you can split w that way,\nthen M should accept it.",
    "start": "282070",
    "end": "288580"
  },
  {
    "text": "So M has to figure out\nif there's some way to split the input so that\nthe first machine accepts",
    "start": "288580",
    "end": "294453"
  },
  {
    "text": "the first part,\nthe second machine accepts the second part. And the idea that we came\nup with for doing that",
    "start": "294453",
    "end": "302850"
  },
  {
    "text": "was to take these two machines,\nbuild them in to a new machine",
    "start": "302850",
    "end": "311250"
  },
  {
    "text": "M, and then connect the\naccepting states for M",
    "start": "311250",
    "end": "316420"
  },
  {
    "text": "to the start state-- connect the accepting states for\nM1 to the start state for M2.",
    "start": "316420",
    "end": "323320"
  },
  {
    "text": "Because the idea would be\nthat if M1 has accepted an initial part, well, then\nyou want to pass control",
    "start": "323320",
    "end": "330490"
  },
  {
    "text": "to M2 to accept the rest. But as we observed,\nthat doesn't quite work.",
    "start": "330490",
    "end": "336560"
  },
  {
    "text": "Because the first\nplace to split w after you found an initial\npart that's accepted by M1",
    "start": "336560",
    "end": "345500"
  },
  {
    "text": "may not be the right place. Because the remainder may\nnot be accepted by M2. You might have been\nbetter off waiting",
    "start": "345500",
    "end": "352330"
  },
  {
    "text": "until you found\nanother place that M1 accepted, later on in the\nstring, say, over here.",
    "start": "352330",
    "end": "357760"
  },
  {
    "text": "And then by splitting\nit over there, then maybe you do\nget successfully find that the remainder\nis accepted by M2.",
    "start": "357760",
    "end": "364960"
  },
  {
    "text": "Whereas if you tried to\nsplit it in the first place, the remainder wouldn't\nhave been accepted by M2.",
    "start": "364960",
    "end": "370389"
  },
  {
    "text": "So all you need to do-- M has to know, is\nthere some place to split the input so that you\ncan get both parts accepted",
    "start": "370390",
    "end": "378010"
  },
  {
    "text": "by the respective machines? The problem is that M might\nneed to know the future in order",
    "start": "378010",
    "end": "384349"
  },
  {
    "text": "to know where to make the split. And it doesn't have\naccess to the future. So what do we do?",
    "start": "384350",
    "end": "390120"
  },
  {
    "text": "So what we're going\nto do is introduce a new concept that will\nallow us to basically get",
    "start": "390120",
    "end": "397669"
  },
  {
    "text": "the effect of M1-- and the-- sort of being\nable to see the future.",
    "start": "397670",
    "end": "403100"
  },
  {
    "text": "And that new concept is going\nto be very important for us throughout the term. It's called nondeterminism.",
    "start": "403100",
    "end": "408320"
  },
  {
    "text": "And so we're going to introduce\na new kind of finite automaton called a nondeterministic\nfinite automaton.",
    "start": "408320",
    "end": "414229"
  },
  {
    "text": "And first, we'll look\nat that, and then we'll see how that fits in with the\nprevious deterministic finite",
    "start": "414230",
    "end": "420050"
  },
  {
    "text": "automaton, that we\nintroduced last time. So here's an example. It's always good to start\noff with an example.",
    "start": "420050",
    "end": "427870"
  },
  {
    "text": "Here is a picture of a\nnondeterministic finite automaton. It looks very similar,\nat first glance,",
    "start": "427870",
    "end": "433140"
  },
  {
    "text": "to the former kind, the\ndeterministic finite automaton. But if you look a\nlittle carefully,",
    "start": "433140",
    "end": "439420"
  },
  {
    "text": "you see that there are\nsome key differences. The most important difference is\nthat in state q1, for example,",
    "start": "439420",
    "end": "451360"
  },
  {
    "text": "whereas in the machines that\nwe introduced last time, there had to be exactly one way\nto go on each possible input",
    "start": "451360",
    "end": "458830"
  },
  {
    "text": "symbol so you knew how to\nfollow along through the machine it's computing, here\nthere are two ways to go.",
    "start": "458830",
    "end": "465789"
  },
  {
    "text": "In q1, you can either stay\nin a1, or you can go to q2. That's the essence\nof nondeterminism.",
    "start": "465790",
    "end": "472540"
  },
  {
    "text": "There could be many\nways to proceed. And furthermore, on\nq1, if you get a b,",
    "start": "472540",
    "end": "479920"
  },
  {
    "text": "then there's nowhere to go. So that's also possible\nwithin nondeterminism.",
    "start": "479920",
    "end": "489820"
  },
  {
    "text": "So let's just start\nlooking at these features. There are multiple\npaths forward--",
    "start": "489820",
    "end": "495260"
  },
  {
    "text": "multiple paths possible. You might be able to have\none, as we had before,",
    "start": "495260",
    "end": "500449"
  },
  {
    "text": "or many ways to go at\neach step, or maybe 0 ways to go at each step. Those are all legitimate for a\nnondeterministic machine, which",
    "start": "500450",
    "end": "508460"
  },
  {
    "text": "is doing a nondeterministic\ncomputation. Another difference,\nif you look carefully,",
    "start": "508460",
    "end": "513909"
  },
  {
    "text": "is that we're allowing\nhere the empty string to appear on a transition.",
    "start": "513909",
    "end": "519929"
  },
  {
    "text": "That's perhaps a\nlittle less essential to the spirit of nondeterminism. But it's going to turn out to be\na convenience when we actually",
    "start": "519929",
    "end": "528180"
  },
  {
    "text": "apply nondeterminism\nto build machines, as you'll see very shortly. ",
    "start": "528180",
    "end": "535910"
  },
  {
    "text": "Now, if there are many\ndifferent ways to go-- and some of those ways to go\nmight have different outcomes.",
    "start": "535910",
    "end": "544560"
  },
  {
    "text": "As we remember from before,\nwe accepted the input, if you end up in\nan accept state,",
    "start": "544560",
    "end": "549570"
  },
  {
    "text": "and we rejected the\ninput, if you end up not in an accept state,\nin a non-accepting state.",
    "start": "549570",
    "end": "554700"
  },
  {
    "text": "Then you reject. But now there might be\nseveral different ways to go. ",
    "start": "554700",
    "end": "561889"
  },
  {
    "text": "And we'll do an\nexample in a minute. But there might be several\ndifferent ways to go. And they might disagree. Some of them might accept.",
    "start": "561890",
    "end": "568250"
  },
  {
    "text": "Other ones might reject. So then what do you do? Well, in that case, acceptance\nalways overrules rejection.",
    "start": "568250",
    "end": "577220"
  },
  {
    "text": "That's the essence of\nnondeterminism the way we're setting it up.",
    "start": "577220",
    "end": "583009"
  },
  {
    "text": "You may ask why that is. And the spirit of that will\nbecome clear in due course.",
    "start": "583010",
    "end": "589920"
  },
  {
    "text": "But right now, just\ntake it as a rule. When we're having a\nnondeterministic machine, acceptance overrules rejection.",
    "start": "589920",
    "end": "597420"
  },
  {
    "text": "So as long as there is--\none of the possible ways to go ends up at\nan accept, we say",
    "start": "597420",
    "end": "604490"
  },
  {
    "text": "the whole thing is accepted. The only way we can\npossibly reject-- if all of the possible ways\nto go end up at rejection,",
    "start": "604490",
    "end": "612200"
  },
  {
    "text": "end up at a non-accept state. So we'll see example of-- I think we're going to do\nan example right now, yeah.",
    "start": "612200",
    "end": "617750"
  },
  {
    "text": "So if we take, for example, this\nmachine N1 now on an input ab--",
    "start": "617750",
    "end": "625677"
  },
  {
    "text": "and we're going to process\nthe symbols one by one, just like we did before. But now, to follow along, there\nmight be several different ways",
    "start": "625677",
    "end": "634140"
  },
  {
    "text": "to go. So if we take the first symbol\na, and we run the machine--",
    "start": "634140",
    "end": "644890"
  },
  {
    "text": "so when the machine, it starts\nat the star state, as before-- but now an a comes in.",
    "start": "644890",
    "end": "650790"
  },
  {
    "text": "And there might\nbe two-- now there are two different ways to go. So we're going to keep\ntrack of both of them.",
    "start": "650790",
    "end": "656550"
  },
  {
    "text": "After the machine\nreads an a, you can think of it as being in\ntwo states now simultaneously.",
    "start": "656550",
    "end": "663480"
  },
  {
    "text": "It can be in state q1,\nand it can be in state q2. So those are two\ndifferent possible places",
    "start": "663480",
    "end": "668820"
  },
  {
    "text": "it could be at this moment. OK? Now we read the\nnext symbol, the b.",
    "start": "668820",
    "end": "677100"
  },
  {
    "text": "And from a b, you take\neach of the places where the machine could be at\nthe end of the previous symbol,",
    "start": "677100",
    "end": "686120"
  },
  {
    "text": "and you then apply reading\na b, the next symbol,",
    "start": "686120",
    "end": "692510"
  },
  {
    "text": "from each of those states\nwhere the machine could be in from the previous symbol. So the machine could be in\nq1 and q2 after reading an a.",
    "start": "692510",
    "end": "700759"
  },
  {
    "text": "Now we apply a b. Well, q1 on a b goes nowhere.",
    "start": "700760",
    "end": "706720"
  },
  {
    "text": "So you think of that branch,\nif you will, of the computation",
    "start": "706720",
    "end": "712620"
  },
  {
    "text": "as just dying off. It has nowhere to go. It just vanishes. However, the other possibility,\nwhich was state q2 on a b,",
    "start": "712620",
    "end": "723210"
  },
  {
    "text": "does allow, does have a place. So the machine is now\ngoing to go from q2 to q3",
    "start": "723210",
    "end": "732180"
  },
  {
    "text": "on that branch of the\ncomputation, which reading-- on reading a b. And then it has, coming out\nof q3, there are two symbols.",
    "start": "732180",
    "end": "745370"
  },
  {
    "text": "There's an a and an\nempty string symbol. Now, on an a, the machine would\nhave to read an a in order",
    "start": "745370",
    "end": "751610"
  },
  {
    "text": "to transition along that arrow. But when there's an empty\nsymbol on the arrow,",
    "start": "751610",
    "end": "757370"
  },
  {
    "text": "that means the machine can\ngo along that arrow for free without even reading anything.",
    "start": "757370",
    "end": "764089"
  },
  {
    "text": "As long as it gets to q3, it\ncan automatically jump the q4.",
    "start": "764090",
    "end": "769780"
  },
  {
    "text": "And so once it has read\na b and gone to q3,",
    "start": "769780",
    "end": "775030"
  },
  {
    "text": "now it can either\nstay in q3, or it",
    "start": "775030",
    "end": "783380"
  },
  {
    "text": "can go along the empty\ntransition and go to q4. So again, it is going to\nbe a nondeterministic step",
    "start": "783380",
    "end": "788960"
  },
  {
    "text": "at this point. The essence of having\na empty transition",
    "start": "788960",
    "end": "794899"
  },
  {
    "text": "is that there is going\nto be nondeterminism. That's why we didn't\nintroduce that for deterministic\nautomata, because you",
    "start": "794900",
    "end": "803780"
  },
  {
    "text": "don't have to transition along\nan empty string transition. You can stay where\nyou are, or you",
    "start": "803780",
    "end": "809690"
  },
  {
    "text": "can go along the empty\nstring transition without reading any input and go\nover to the next state, which,",
    "start": "809690",
    "end": "815030"
  },
  {
    "text": "in this case, is q4. So let's just see where we are. After reading an a,\nwe're in states q1, q2.",
    "start": "815030",
    "end": "822680"
  },
  {
    "text": "But now after reading a b,\nwe're in states q3 and q4 as possibilities.",
    "start": "822680",
    "end": "827720"
  },
  {
    "text": "And now we're at the\nend of the input, and we look and see what we got.",
    "start": "827720",
    "end": "833940"
  },
  {
    "text": "If any one of the\nstates as possibilities that we are right now\nat the end of the string is an accept state, then we\nsay, overall, the machine",
    "start": "833940",
    "end": "842070"
  },
  {
    "text": "has accepted. So that corresponds to what\nwe said over here before-- accept the input if some\npath leads to an accept.",
    "start": "842070",
    "end": "852339"
  },
  {
    "text": "So if any way of proceeding\nthrough these nondeterministic choices will lead you to an\naccept, then you will say,",
    "start": "852340",
    "end": "859960"
  },
  {
    "text": "we're going to accept the input. OK? So this input here is accepted.",
    "start": "859960",
    "end": "865338"
  },
  {
    "text": "Let's do another example. Suppose we have the\ninput aa instead of ab.",
    "start": "865338",
    "end": "871070"
  },
  {
    "text": "So aa, after the\nfirst day, as before, we're in states q1 and\nq2 as possibilities.",
    "start": "871070",
    "end": "877129"
  },
  {
    "text": "Now we read an a again. Now, the one that's on\nstate q1, that possibility, q1 possibility,\nafter reading an a,",
    "start": "877130",
    "end": "884630"
  },
  {
    "text": "it again branches to q1 and q2. So we know after\nreading the second a,",
    "start": "884630",
    "end": "890370"
  },
  {
    "text": "we're going to be in\nat least q1 and q2. Now how about the state that\nhad been on q2 on reading",
    "start": "890370",
    "end": "896930"
  },
  {
    "text": "an a, the one from before? After reading the first\na, you were in q2. Now reading the second\na, there's nowhere to go.",
    "start": "896930",
    "end": "903920"
  },
  {
    "text": "So that one just gets removed. So after reading aa, we\nremain in states q1 and q2",
    "start": "903920",
    "end": "911190"
  },
  {
    "text": "as possibilities.  Neither of those\nare accept states.",
    "start": "911190",
    "end": "917610"
  },
  {
    "text": "So therefore, on input\naa, the machine rejects.",
    "start": "917610",
    "end": "923940"
  },
  {
    "text": "OK? Let's just do a couple more,\nand then I'll ask you to do one.",
    "start": "923940",
    "end": "929780"
  },
  {
    "text": "So we have aba as an input. Let's see what happens then. So remember, after reading\nab, the machine is in the two",
    "start": "929780",
    "end": "945200"
  },
  {
    "text": "states q3, q4 as possibilities. That's what we have\nfrom the first example.",
    "start": "945200",
    "end": "951240"
  },
  {
    "text": "So after reading ab,\nwe're in states q3, q4. Now we read another a.",
    "start": "951240",
    "end": "957110"
  },
  {
    "text": "The q4 on an a\nhas nowhere to go. In fact, it has nowhere\nto go in any input. So no matter what comes in\nafter you're in state q4,",
    "start": "957110",
    "end": "964790"
  },
  {
    "text": "that branch dies. But on q3, which is another one\nof the possibilities reading",
    "start": "964790",
    "end": "970900"
  },
  {
    "text": "an a, it can follow\nalong, just transition. Because that's one of the\nlabels on that transition, is a.",
    "start": "970900",
    "end": "976630"
  },
  {
    "text": "So you can follow along\njust in transition on reading an a, which is the\nlast symbol in the string.",
    "start": "976630",
    "end": "982570"
  },
  {
    "text": "And so now after aba, you are in\nonly state q4 as a possibility.",
    "start": "982570",
    "end": "988660"
  },
  {
    "text": "But that happens to be an accept\nstate, so the machine accepts. ",
    "start": "988660",
    "end": "996800"
  },
  {
    "text": "OK. And now lastly, let's\ntake our final example.",
    "start": "996800",
    "end": "1002000"
  },
  {
    "text": "What happens if we have abb?  So as we remember before,\nafter reading ab--",
    "start": "1002000",
    "end": "1011930"
  },
  {
    "text": "that was the first example-- we were in states q3,\nq4 as possibilities. Now we read a b.",
    "start": "1011930",
    "end": "1017570"
  },
  {
    "text": "Well, neither of those states\nhave anywhere to go on a b. So now all threads, all\nbranches, of the computation",
    "start": "1017570",
    "end": "1025430"
  },
  {
    "text": "die off. And at this point, the\nmachine is totally dead.",
    "start": "1025430",
    "end": "1030540"
  },
  {
    "text": "It has no active\npossibilities left. So certainly, it's going to\nreject this input, because none",
    "start": "1030540",
    "end": "1037137"
  },
  {
    "text": "of the active states--\nthere are no active states or accepting states. And in fact, if you looked\nat anything that came later,",
    "start": "1037138",
    "end": "1044400"
  },
  {
    "text": "anything that extended\nthe string abb would also be rejected. Because once the\nmachine had all--",
    "start": "1044400",
    "end": "1050766"
  },
  {
    "text": "all possibilities\nhave died off, there's no way for them to come back\nto life on any extensions.",
    "start": "1050766",
    "end": "1057030"
  },
  {
    "text": "So with that-- oh,\nhere's an important point before I'm going to jump\nto a check-in on you.",
    "start": "1057030",
    "end": "1063570"
  },
  {
    "text": "But I think one\nthing that might be on your mind about\nthis nondeterminism",
    "start": "1063570",
    "end": "1069330"
  },
  {
    "text": "is how does that\ncorrespond to reality? Well, it doesn't.",
    "start": "1069330",
    "end": "1074610"
  },
  {
    "text": " We're not intending\nfor nondeterminism",
    "start": "1074610",
    "end": "1079980"
  },
  {
    "text": "as we're defining\nit to correspond to a physical device. But nevertheless,\nas you'll see, it's",
    "start": "1079980",
    "end": "1085950"
  },
  {
    "text": "a very mathematically useful\nconcept, this nondeterminism. And it's going to be playing a\nbig role throughout the subject",
    "start": "1085950",
    "end": "1094620"
  },
  {
    "text": "as we'll experience it\nduring the rest of the term. So with that, I'm going\nto have a little check-in.",
    "start": "1094620",
    "end": "1100980"
  },
  {
    "text": "I'm going to ask\nyou to consider what happens on one of the inputs. So here we go.",
    "start": "1100980",
    "end": "1106350"
  },
  {
    "text": "What does it do on input aab? So here's the machine. You can look at it. And suppose, hopefully,\nthere's a poll here",
    "start": "1106350",
    "end": "1113460"
  },
  {
    "text": "for me to give to you so\nyou can give me your input.",
    "start": "1113460",
    "end": "1119815"
  },
  {
    "text": " So what does the\nmachine do on input aab?",
    "start": "1119815",
    "end": "1125010"
  },
  {
    "start": "1125010",
    "end": "1133047"
  },
  {
    "text": "Most of you have answered.  Again, you're not\ngoing to be penalized",
    "start": "1133047",
    "end": "1139230"
  },
  {
    "text": "for getting the wrong answer. But hopefully, you'll\nget the right answer.",
    "start": "1139230",
    "end": "1147130"
  },
  {
    "text": "Anyway, let's just\ntake a look here. So time is up.",
    "start": "1147130",
    "end": "1152140"
  },
  {
    "text": "Let's end the polling\nand share the results. ",
    "start": "1152140",
    "end": "1157780"
  },
  {
    "text": "So the majority of you,\nmajority have gotten the correct answer, which is a. The machine does accept aab.",
    "start": "1157780",
    "end": "1165870"
  },
  {
    "text": "Because when you have a-- so I'll show you the path\nthat corresponds to accepting.",
    "start": "1165870",
    "end": "1173490"
  },
  {
    "text": "You go a, a, b, and\nthen empty string.",
    "start": "1173490",
    "end": "1181179"
  },
  {
    "text": "And so that sequence\nof steps is one",
    "start": "1181180",
    "end": "1189230"
  },
  {
    "text": "of the nondeterministic\npossibilities that the machine can follow. And that shows that the machine\ndoes accept the input aab.",
    "start": "1189230",
    "end": "1197360"
  },
  {
    "text": "You can think about it, the\nway we did it before also. If you read an a, it's in\nthe two possibilities q1, q2.",
    "start": "1197360",
    "end": "1205010"
  },
  {
    "text": "You read a second a, again,\nin the possibilities q1, q2. Now you read a b. It's in the\npossibilities q3, q4.",
    "start": "1205010",
    "end": "1212570"
  },
  {
    "text": "And that's it, aab. So now you read the b. It's in possibility q3, q4.",
    "start": "1212570",
    "end": "1218750"
  },
  {
    "text": "q4 is an accepting state. That overrules the\nnon-accepting state. And so the machine accepts.",
    "start": "1218750",
    "end": "1225409"
  },
  {
    "text": "You have to understand this. So if you didn't get\nit right, go back and think about\nwhere you slipped up.",
    "start": "1225410",
    "end": "1232560"
  },
  {
    "text": "OK? Because this is\njust getting-- we're",
    "start": "1232560",
    "end": "1239300"
  },
  {
    "text": "just getting warmed up here. It's going to get a lot harder.",
    "start": "1239300",
    "end": "1244770"
  },
  {
    "text": "OK, so stop sharing the results. And so let's continue.",
    "start": "1244770",
    "end": "1251399"
  },
  {
    "text": "So just as we did last\ntime, we can formally define a nondeterministic\nfinite automata.",
    "start": "1251400",
    "end": "1259010"
  },
  {
    "text": "Here's the picture again. OK. So it looks a lot like\nthe case we had before,",
    "start": "1259010",
    "end": "1267409"
  },
  {
    "text": "the Deterministic\nFinite Automata, or DFA, as we'll call them. It's a 5 tuple.",
    "start": "1267410",
    "end": "1273290"
  },
  {
    "text": "So I've written down\nlittle reminders for what those components\nof that 5 tuple",
    "start": "1273290",
    "end": "1279289"
  },
  {
    "text": "are, that list of\nfive components. So they're all the\nsame as before--",
    "start": "1279290",
    "end": "1286580"
  },
  {
    "text": "states, alphabet, transition\nfunction, start state, and accepting states.",
    "start": "1286580",
    "end": "1291740"
  },
  {
    "text": "So that the formal\ndefinition looks exactly the same except the\nstructure of the transition",
    "start": "1291740",
    "end": "1298160"
  },
  {
    "text": "function. So now, before, if\nyou remember, you had a state and an input symbol,\nand you got back a state.",
    "start": "1298160",
    "end": "1307510"
  },
  {
    "text": "Now we have something\nmore complicated-looking. We have a state and\nan input symbol,",
    "start": "1307510",
    "end": "1312910"
  },
  {
    "text": "but instead of just sigma,\nit's sigma sub epsilon. And that that's a shorthand\nfor sigma union epsilon.",
    "start": "1312910",
    "end": "1321630"
  },
  {
    "text": "And that's a way-- my\nway of saying that you're allowed to have\non your transition",
    "start": "1321630",
    "end": "1327780"
  },
  {
    "text": "arrows either an input\nsymbol or an empty string. So the transition\nfunction has to tell you",
    "start": "1327780",
    "end": "1334200"
  },
  {
    "text": "what to do when you have an\nempty string coming in as well. So that would be part of\nyour table for the transition",
    "start": "1334200",
    "end": "1340320"
  },
  {
    "text": "function. Now, over here, what's\ngoing on over here? Well, now, instead of just\nproducing a single state, when",
    "start": "1340320",
    "end": "1348500"
  },
  {
    "text": "you've read, for\nexample, an a from q1, there's a whole set\nof possibilities.",
    "start": "1348500",
    "end": "1354570"
  },
  {
    "text": "So here we have what's\ncalled a power set. That's the set of subsets\nof the collection Q.",
    "start": "1354570",
    "end": "1365429"
  },
  {
    "text": "So here we're going to produce\nan entire subset of states. Instead of just one\nstate coming out,",
    "start": "1365430",
    "end": "1371610"
  },
  {
    "text": "there might be a subset\nof possible states that you can go to. So the power set of Q is\na set of subsets of Q.",
    "start": "1371610",
    "end": "1381330"
  },
  {
    "text": "So that's what this\nnotation means.",
    "start": "1381330",
    "end": "1386390"
  },
  {
    "text": "Again, this is something that\nI'm, hopefully, presenting to you as a bit of a reminder.",
    "start": "1386390",
    "end": "1392290"
  },
  {
    "text": "You've seen this\nsomewhere else before. But please make sure you\nunderstand the notation,",
    "start": "1392290",
    "end": "1397360"
  },
  {
    "text": "going forward, because we'll\nbe doing less hand-holding as we start moving forward.",
    "start": "1397360",
    "end": "1403960"
  },
  {
    "text": "OK. So just let's take a look. In the N1 example here, just\nto illustrate what's going on,",
    "start": "1403960",
    "end": "1411340"
  },
  {
    "text": "when you're in state\nq1 reading an a, now you get a whole set\nof possibilities, which,",
    "start": "1411340",
    "end": "1416950"
  },
  {
    "text": "in this case, is q1 and q2. Whereas, if you're reading\na b, what would be that set?",
    "start": "1416950",
    "end": "1425440"
  },
  {
    "text": "Coming out of q1, what's the set\nof possible successor states? Well, there are none.",
    "start": "1425440",
    "end": "1430640"
  },
  {
    "text": "So it's the empty set. OK? So hopefully, you're\nunderstanding the notation",
    "start": "1430640",
    "end": "1436310"
  },
  {
    "text": "here. So now here's, I think,\nreally important. How do we understand\nnondeterminism, intuitively",
    "start": "1436310",
    "end": "1443310"
  },
  {
    "text": "speaking? And there are multiple\ndifferent ways, which each has their value\nunder different circumstances.",
    "start": "1443310",
    "end": "1451550"
  },
  {
    "text": "So one way is thinking\nabout nondeterminism as a kind of parallelism.",
    "start": "1451550",
    "end": "1457190"
  },
  {
    "text": "So every time the machine\nhas a nondeterministic choice to make, where there's\nmore than one outcome,",
    "start": "1457190",
    "end": "1462250"
  },
  {
    "text": "you think of the machine\nas a branching, forking,",
    "start": "1462250",
    "end": "1468490"
  },
  {
    "text": "new threads of the parallel\ncomputation at that stage, where it makes an entire\ncopy of itself when there's",
    "start": "1468490",
    "end": "1475360"
  },
  {
    "text": "a choice of possibilities. And then each of\nthose independently",
    "start": "1475360",
    "end": "1480790"
  },
  {
    "text": "proceeds to read the\nrest of the input as separate threads\nof the computation. So if you're familiar\nwith parallel computing,",
    "start": "1480790",
    "end": "1487029"
  },
  {
    "text": "this should be reasonably\nfamiliar to you. The only key thing\nto remember is that as this thing forks\na number of possibilities,",
    "start": "1487030",
    "end": "1495550"
  },
  {
    "text": "the acceptance rule is, that if\nany one of those possibilities gets to an accept at the end\nof the input, it raises a flag",
    "start": "1495550",
    "end": "1503200"
  },
  {
    "text": "and says, accept. And that overrules\neverybody else. ",
    "start": "1503200",
    "end": "1509040"
  },
  {
    "text": "So acceptance dominates. So another way of looking at\nit is the mathematical view,",
    "start": "1509040",
    "end": "1516730"
  },
  {
    "text": "where you can imagine-- and\nwe're going to use all these. So you really need to\nunderstand them all. The mathematical\nview is you can think",
    "start": "1516730",
    "end": "1524770"
  },
  {
    "text": "of the computation as kind\nof a tree of possibilities. So you start off at\nthe very beginning",
    "start": "1524770",
    "end": "1531320"
  },
  {
    "text": "at the root of the computation,\nwhich is when it really begins. But every time there's a\nnondeterministic branching",
    "start": "1531320",
    "end": "1537830"
  },
  {
    "text": "that occurs, that\nnode of the tree",
    "start": "1537830",
    "end": "1544370"
  },
  {
    "text": "has multiple children\ncoming out of that node. And so the different\nthreads of the computation",
    "start": "1544370",
    "end": "1551880"
  },
  {
    "text": "correspond to different\nbranches of that tree. And now you're going to accept\nif any one of those branches",
    "start": "1551880",
    "end": "1558250"
  },
  {
    "text": "leads to an accepting state-- OK, obviously, somewhat\nsimilar to what we had before.",
    "start": "1558250",
    "end": "1564370"
  },
  {
    "text": "But I think it's a little bit of\na different perspective on how to think about nondeterminism.",
    "start": "1564370",
    "end": "1571080"
  },
  {
    "text": "And the last one is going\nto sound a little weird. But actually, I think for\npeople who are in the business,",
    "start": "1571080",
    "end": "1578880"
  },
  {
    "text": "it's the one they use the most. And that's the magical way of\nthinking about nondeterminism.",
    "start": "1578880",
    "end": "1587630"
  },
  {
    "text": "And that is, when the machine\nhas nondeterministic choices",
    "start": "1587630",
    "end": "1593630"
  },
  {
    "text": "to make, you think\nof the machine as magically guessing the\ncorrect one at every stage,",
    "start": "1593630",
    "end": "1601509"
  },
  {
    "text": "and the correct one being\nthe one that will eventually lead it to accept.",
    "start": "1601510",
    "end": "1607730"
  },
  {
    "text": "OK? So you can think of\nthe machine as guessing which is the right way to go.",
    "start": "1607730",
    "end": "1614510"
  },
  {
    "text": "And if there is some\nway right way to go, it always guesses right. Of course, if the machine\nends up rejecting,",
    "start": "1614510",
    "end": "1620090"
  },
  {
    "text": "because there is no right way\nto go, then it doesn't matter. There is no good guess. But if there is some good guess,\nwe'll think of the machine",
    "start": "1620090",
    "end": "1626600"
  },
  {
    "text": "as taking that good\nguess and going that way. OK. So now here is a\nvery important thing.",
    "start": "1626600",
    "end": "1635080"
  },
  {
    "text": "We introduced this new model,\nthe Nondeterministic Finite Automaton, NFA.",
    "start": "1635080",
    "end": "1642460"
  },
  {
    "text": "It turns out, even though\nit looks more powerful, because it has this\nnondeterminism,",
    "start": "1642460",
    "end": "1647590"
  },
  {
    "text": "it isn't any more powerful. It can do exactly the\nsame class of languages, the regular languages.",
    "start": "1647590",
    "end": "1652809"
  },
  {
    "text": "And we'll show that\nwith this theorem here, that if an NFA recognizes\na, then a is regular.",
    "start": "1652810",
    "end": "1663620"
  },
  {
    "text": "So we'll prove\nthat by showing how to convert an NFA to an\nequivalent DFA, which",
    "start": "1663620",
    "end": "1671150"
  },
  {
    "text": "does the same language. So we can take an NFA that\nhas the nondeterminism and find another DFA which\ndoesn't have nondeterminism,",
    "start": "1671150",
    "end": "1678770"
  },
  {
    "text": "but does the same language. It accepts exactly\nthe same strength, even though it lacks that\nnondeterministic capability.",
    "start": "1678770",
    "end": "1686670"
  },
  {
    "text": "This is going to be\nextremely useful, by the way, and for example, in showing that\nclosure under concatenation.",
    "start": "1686670",
    "end": "1693990"
  },
  {
    "text": "OK, so in this\npresentation here,",
    "start": "1693990",
    "end": "1699750"
  },
  {
    "text": "I'm going to ignore the\nepsilon transitions. Because once you get the\nidea for how to do this, you could figure out\nhow to incorporate them.",
    "start": "1699750",
    "end": "1706200"
  },
  {
    "text": "They just make things a\nlittle more complicated. So let's just focus on the key\naspect of nondeterminism, which",
    "start": "1706200",
    "end": "1713010"
  },
  {
    "text": "is that the machine could\nhave several ways to go at any point in time. There could be several\nnext states on an input.",
    "start": "1713010",
    "end": "1722110"
  },
  {
    "text": "OK? Now the idea for\nthe construction-- so we're going to start with\na nondeterministic machine M,",
    "start": "1722110",
    "end": "1730059"
  },
  {
    "text": "and we're going to build\na deterministic machine M prime, which does\nexactly the same thing.",
    "start": "1730060",
    "end": "1735910"
  },
  {
    "text": "And the way M\nprime works is it's going to do what you would\ndo if you were simulating",
    "start": "1735910",
    "end": "1741830"
  },
  {
    "text": "M. What would you do? This is what we were doing as\nI was explaining it to you.",
    "start": "1741830",
    "end": "1748059"
  },
  {
    "text": "If you were simulating M, every\ntime you get an input symbol, you just keep track of what\nis the set of possible states",
    "start": "1748060",
    "end": "1754840"
  },
  {
    "text": "at that point in time. That's what the\nDFA is going to do. ",
    "start": "1754840",
    "end": "1761920"
  },
  {
    "text": "it's going to have to keep track\nof which possible set of states the NFA could be in at\nthe point on that input",
    "start": "1761920",
    "end": "1772690"
  },
  {
    "text": "where we are right now. And then as you get\nto the next symbol,",
    "start": "1772690",
    "end": "1779470"
  },
  {
    "text": "the DFA is going to have to\nupdate things to keep track of the next set of states the\nNFA could be in at this point,",
    "start": "1779470",
    "end": "1787230"
  },
  {
    "text": "just like you would do. OK? And so here's a\nkind of a picture.",
    "start": "1787230",
    "end": "1795630"
  },
  {
    "text": "And how do we implement that? So here's the NFA that\nwe're starting with, M,",
    "start": "1795630",
    "end": "1802230"
  },
  {
    "text": "and we're going to\nmake here the DFA. But in order to remember which\nset of states that DFA could",
    "start": "1802230",
    "end": "1811510"
  },
  {
    "text": "be in at a given point-- so\nmaybe it's in the set of states that M could be in.",
    "start": "1811510",
    "end": "1816838"
  },
  {
    "text": "Did I say it wrong? Which set of states the NFA\ncould be in a given time-- so maybe M, the\nNFA, could be in,",
    "start": "1816838",
    "end": "1822639"
  },
  {
    "text": "at some point, state q3 and q7. The way the DFA\nkeeps track of that,",
    "start": "1822640",
    "end": "1827890"
  },
  {
    "text": "it's going to have a state for\nevery possible subset of states of the NFA.",
    "start": "1827890",
    "end": "1835080"
  },
  {
    "text": "That's how it remembers which\nsubset of states the NFA is in. That's the way DFAs work.",
    "start": "1835080",
    "end": "1841320"
  },
  {
    "text": "They have a separate\nstate for each possibility that they need to keep track of.",
    "start": "1841320",
    "end": "1846570"
  },
  {
    "text": "And the possibilities here\nare the different subsets of states that the NFA could\nbe in at a given point.",
    "start": "1846570",
    "end": "1853570"
  },
  {
    "text": "OK? So corresponding to this subset,\nto these two possibilities q3, q7, the DFA is going to have\na state with the subset q3, q7.",
    "start": "1853570",
    "end": "1864419"
  },
  {
    "text": "And it's going to, for\nevery possible subset here, there's going to be a\ndifferent state of M prime. So M prime is\ngoing to be bigger.",
    "start": "1864420",
    "end": "1870690"
  },
  {
    "text": " OK. So quickly, the construction of\nM, the states of M prime now,",
    "start": "1870690",
    "end": "1880230"
  },
  {
    "text": "q prime, are going to be the\npower set, the set of subsets of states from the\noriginal machine M.",
    "start": "1880230",
    "end": "1890010"
  },
  {
    "text": "And now we have to look at\nhow the transition function",
    "start": "1890010",
    "end": "1898380"
  },
  {
    "text": "of the DFA, when you\nmade the primed machines of the DFAs, the DFA machine.",
    "start": "1898380",
    "end": "1903910"
  },
  {
    "text": "So these are the\ndeterministic components. So delta prime, when it has a\nsubset, something like this,",
    "start": "1903910",
    "end": "1916980"
  },
  {
    "text": "has one of its states,\nwhich corresponds to a subset of states of M,\nand it reads an input symbol,",
    "start": "1916980",
    "end": "1923220"
  },
  {
    "text": "you just have to do the updating\nthe way you would naturally do. You're going to look\nat every state in R,",
    "start": "1923220",
    "end": "1928919"
  },
  {
    "text": "look at where that\ncan go under a-- so there's a bunch\nof sets there. And look at all\nthe possible states",
    "start": "1928920",
    "end": "1935670"
  },
  {
    "text": "that could be in one\nof those subsets, and that's the set of\nstates that you could be. That's going to be\nthe new set of states,",
    "start": "1935670",
    "end": "1942240"
  },
  {
    "text": "and that's going to be in\nthe new state of M prime. OK? So it's going to be the\nsubset corresponding to all",
    "start": "1942240",
    "end": "1950170"
  },
  {
    "text": "of the states that could be in,\nwhen you apply the transition",
    "start": "1950170",
    "end": "1955360"
  },
  {
    "text": "function of the\nnondeterministic machine, to one of the states\nin the subset of states",
    "start": "1955360",
    "end": "1962530"
  },
  {
    "text": "that the nondeterministic\nmachine could be in. OK? It's a little bit of a mouthful.",
    "start": "1962530",
    "end": "1969322"
  },
  {
    "text": "I suggest you look at\nthis, if you didn't quite get it, after the fact. Good to understand.",
    "start": "1969322",
    "end": "1975390"
  },
  {
    "text": "The starting stage for the NFA-- for the DFA-- I'm\nsorry-- is going to be which subset now we're\ngoing to start off with.",
    "start": "1975390",
    "end": "1982140"
  },
  {
    "text": "It's going to be the subset\ncorresponding to just the start state of M. And the accepting\nstates are going to be--",
    "start": "1982140",
    "end": "1995380"
  },
  {
    "text": "of the deterministic machine are\ngoing to be all of the subsets that have at least one\naccepting state from the NFA.",
    "start": "1995380",
    "end": "2004000"
  },
  {
    "text": "OK? So I hope you got that. Because I'm going to give you\nanother little check-in here. Which is I'm going to ask\nyou, how big is M prime?",
    "start": "2004000",
    "end": "2011529"
  },
  {
    "text": "How many states\ndoes M prime have? I told you what\nthose states are. So just go think about that.",
    "start": "2011530",
    "end": "2017200"
  },
  {
    "text": " So check-in two--\nif M has n states,",
    "start": "2017200",
    "end": "2023240"
  },
  {
    "text": "how many states does M prime\nhave by this construction? OK, so let's launch\nthe next poll.",
    "start": "2023240",
    "end": "2028830"
  },
  {
    "start": "2028830",
    "end": "2038710"
  },
  {
    "text": "OK, five seconds-- and I\nthink we're almost done here. good. ",
    "start": "2038710",
    "end": "2046540"
  },
  {
    "text": "All right, share results-- I don't know if sharing\nresults is a good thing.",
    "start": "2046540",
    "end": "2051669"
  },
  {
    "text": "I'm not trying to\nmake you, if you didn't get the right answer-- because most of the people\ndid get the right answer--",
    "start": "2051670",
    "end": "2056739"
  },
  {
    "text": "but if you didn't get the right\nanswer, trying to make you feel bad. But it's a little\nbit of suggestion",
    "start": "2056739",
    "end": "2061830"
  },
  {
    "text": "that you need to review\nsome basic concepts. So the basic concept\nhere is if you have a collection-- you\nhave a set of states,",
    "start": "2061830",
    "end": "2068610"
  },
  {
    "text": "how many subsets are there? And the number of subsets\nis going to be exponential.",
    "start": "2068610",
    "end": "2073989"
  },
  {
    "text": "So if you have a\ncollection of n elements, the number of subsets of those\nn elements is 2 to the n.",
    "start": "2073989",
    "end": "2080550"
  },
  {
    "text": "That's the fact\nwe're using here. And that's why M prime\nhas 2 to the n states,",
    "start": "2080550",
    "end": "2085679"
  },
  {
    "text": "if M had n states. And you should make sure\nyou understand why that is.",
    "start": "2085679",
    "end": "2093658"
  },
  {
    "text": "All right, so with\nthat, as requested,",
    "start": "2093659",
    "end": "2099230"
  },
  {
    "text": "we're going to have\na little break. And that break is going to\nlast us exactly five minutes.",
    "start": "2099230",
    "end": "2107845"
  },
  {
    "start": "2107845",
    "end": "2115060"
  },
  {
    "text": "So we will return\nin five minutes. I'm going to be prompt. So I gave you a\nlittle timer here.",
    "start": "2115060",
    "end": "2121070"
  },
  {
    "text": "So please, I'm going to begin\nit right when this is over.",
    "start": "2121070",
    "end": "2129220"
  },
  {
    "start": "2129220",
    "end": "2135280"
  },
  {
    "text": "OK, almost ready. ",
    "start": "2135280",
    "end": "2153040"
  },
  {
    "text": "I hope you're all refreshed\nand ready for the second half. So now that we have\nnondeterminism,",
    "start": "2153040",
    "end": "2160830"
  },
  {
    "text": "we're going to use that as\na tool to prove the closure properties that we\nwere aiming for,",
    "start": "2160830",
    "end": "2168270"
  },
  {
    "text": "starting from last lecture. OK. So remember, let's look\nat closure under a union.",
    "start": "2168270",
    "end": "2177270"
  },
  {
    "text": "Now, we already\ndid that, but I'm going to do it again, but this\ntime, using nondeterminism.",
    "start": "2177270",
    "end": "2182369"
  },
  {
    "text": "And you'll see how\npowerful nondeterminism is.",
    "start": "2182370",
    "end": "2188280"
  },
  {
    "text": "Because it's going to allow us\nto do it almost with no effort.",
    "start": "2188280",
    "end": "2196870"
  },
  {
    "text": "We'll start off the\nway we did before. I'm going to start\noff with two DFAs.",
    "start": "2196870",
    "end": "2204390"
  },
  {
    "text": "But actually, these\ncould be NFAs even. But let's say we started\nwith the two DFAs",
    "start": "2204390",
    "end": "2210960"
  },
  {
    "text": "for the two languages A1 and A2. And now we're going to construct\nan NFA, recognizing the union.",
    "start": "2210960",
    "end": "2220690"
  },
  {
    "text": "And that's good enough,\nbecause we already know that we can\nconvert NFAs to DFAs. And therefore, they do\nregular languages, too.",
    "start": "2220690",
    "end": "2230260"
  },
  {
    "text": "OK. So now here are\nthe two DFAs that do the languages A1 and A2.",
    "start": "2230260",
    "end": "2237520"
  },
  {
    "text": "And what I'm going to do is\nI'm going to put them together into a bag of states, which is\ngoing to be M, the NFA that's",
    "start": "2237520",
    "end": "2248800"
  },
  {
    "text": "going to do the union language. So remember-- what\ndoes M supposed to do?",
    "start": "2248800",
    "end": "2254260"
  },
  {
    "text": "M is supposed to\naccept its input, if either M1 or M2 accept.",
    "start": "2254260",
    "end": "2259780"
  },
  {
    "text": "So how is it going to do that? What it's going\nto do, we're going to add a new state to M,\nwhich is going to branch",
    "start": "2259780",
    "end": "2266410"
  },
  {
    "text": "under epsilon transitions. And now you can start to\nsee how useful these epsilon transitions are\ngoing to be for us.",
    "start": "2266410",
    "end": "2272050"
  },
  {
    "text": "Going to branch under\nepsilon transitions to the two original start\nstates of M1 and M2.",
    "start": "2272050",
    "end": "2277869"
  },
  {
    "text": "And we're done. Why? Well, now, nondeterministically,\nas we get an input,",
    "start": "2277870",
    "end": "2285230"
  },
  {
    "text": "w coming in to M-- and at the very beginning, even\njust right after it gets going,",
    "start": "2285230",
    "end": "2292250"
  },
  {
    "text": "the very first\nthing that happens is it's going to\nbranch to M1 and also branch to M2\nnondeterministically",
    "start": "2292250",
    "end": "2297859"
  },
  {
    "text": "as two possibilities. And then inside M1 and M2,\nit's going to actually start reading the input.",
    "start": "2297860",
    "end": "2303740"
  },
  {
    "text": "And each one is going to\nbe now following along as it would have originally the\nstates corresponding to reading",
    "start": "2303740",
    "end": "2315140"
  },
  {
    "text": "those input symbols. And M, as a combination\nof M1 and M2,",
    "start": "2315140",
    "end": "2322160"
  },
  {
    "text": "is going to have a possibility\nfor one state in M1 and one state in M2.",
    "start": "2322160",
    "end": "2329210"
  },
  {
    "text": "And so M is going to have those\ncombined into one package.",
    "start": "2329210",
    "end": "2335280"
  },
  {
    "text": "And now at the end of the\ninput, if either of these end",
    "start": "2335280",
    "end": "2340580"
  },
  {
    "text": "up at an accepting\nstate, then M is",
    "start": "2340580",
    "end": "2346670"
  },
  {
    "text": "going to accept as a\nnondeterministic finite automaton. Because that's how\nnondeterminism works. You accept if either--",
    "start": "2346670",
    "end": "2353270"
  },
  {
    "text": "if any one of the\nbranches ended up accepting-- which is just\nwhat you need for union.",
    "start": "2353270",
    "end": "2359198"
  },
  {
    "text": "So when we're doing union,\nyou want either one of these to be accepting. And the nondeterminism\njust is built",
    "start": "2359198",
    "end": "2366050"
  },
  {
    "text": "conveniently to allow us to\ndo the union almost for free.",
    "start": "2366050",
    "end": "2372480"
  },
  {
    "text": "So you can again, thinking\nabout nondeterminism as terms of\nparallelism, you could",
    "start": "2372480",
    "end": "2378730"
  },
  {
    "text": "think of the\nnondeterministic machine as running in parallel\nM1 and M2 on the input.",
    "start": "2378730",
    "end": "2386150"
  },
  {
    "text": "And if either one of them ends\nup accepting, M will accept. Or you can think\nabout it in terms",
    "start": "2386150",
    "end": "2391900"
  },
  {
    "text": "of that guessing that\nI referred to before, which means that\nas M is getting--",
    "start": "2391900",
    "end": "2398500"
  },
  {
    "text": "when it's just about to read\nthe first symbols of its input, it guesses whether that's going\nto be an input accepted by M1",
    "start": "2398500",
    "end": "2407650"
  },
  {
    "text": "or an input accepted by M2. And the magic of\nnondeterminism is that it always guesses right.",
    "start": "2407650",
    "end": "2414070"
  },
  {
    "text": "So that input happens\nto be an input that's going to be accepted by M2.",
    "start": "2414070",
    "end": "2419860"
  },
  {
    "text": "M is going to guess that M2\nis the right way to follow. And it's going to go\nin the M2 direction.",
    "start": "2419860",
    "end": "2426820"
  },
  {
    "text": "Because nondeterminism,\nthe magic is you always guess right. I wish that was\ntrue in real life.",
    "start": "2426820",
    "end": "2434076"
  },
  {
    "text": "It would make\nexams a lot easier. Anyway, so now let's see how\nwe can use that to do closure",
    "start": "2434076",
    "end": "2441080"
  },
  {
    "text": "under concatenation. OK, so now we're\ngoing to actually",
    "start": "2441080",
    "end": "2446750"
  },
  {
    "text": "have a picture of very similar\nto the one we had originally. But now using nondeterminism,\nwe can make it work.",
    "start": "2446750",
    "end": "2453030"
  },
  {
    "text": "So here we have the two machines\ndoing the two languages, A1 and A2.",
    "start": "2453030",
    "end": "2458900"
  },
  {
    "text": "And we're going to combine\nthem into one bigger machine M, as shown.",
    "start": "2458900",
    "end": "2466040"
  },
  {
    "text": "Remember, what M\nis supposed to do is accept its input, if\nthere's some way of splitting that input, such that the first\nhalf is accepted by the M1,",
    "start": "2466040",
    "end": "2474820"
  },
  {
    "text": "and the second part\nis accepted by M2. The way we're going\nto get that effect is",
    "start": "2474820",
    "end": "2481230"
  },
  {
    "text": "by putting in a transit empty--",
    "start": "2481230",
    "end": "2489420"
  },
  {
    "text": "empty transitions,\nepsilon transitions, going from the accept states\nof M1 to the start state of M2,",
    "start": "2489420",
    "end": "2498750"
  },
  {
    "text": "just as I've shown\nin this diagram. So these were the original\naccepting states of M1.",
    "start": "2498750",
    "end": "2504270"
  },
  {
    "text": "And now they're going\nto be declassified as accepting states.",
    "start": "2504270",
    "end": "2509369"
  },
  {
    "text": "But they're going to have new\ntransitions, empty transitions,",
    "start": "2509370",
    "end": "2515100"
  },
  {
    "text": "attached to them,\nwhich allow them to branch to M2 without\nreading any input.",
    "start": "2515100",
    "end": "2520470"
  },
  {
    "text": " And so intuitively\nspeaking, this is going to do the right thing.",
    "start": "2520470",
    "end": "2527170"
  },
  {
    "text": "Because once M1 has\naccepted some part of w,",
    "start": "2527170",
    "end": "2533710"
  },
  {
    "text": "then you can\nnondeterministically branch to M2.",
    "start": "2533710",
    "end": "2540559"
  },
  {
    "text": " And you're going to be\nstart processing inside M2.",
    "start": "2540560",
    "end": "2548380"
  },
  {
    "text": "And the point is-- I jumped ahead of myself-- is that the reason why it fixes\nthe problem we had before is",
    "start": "2548380",
    "end": "2557380"
  },
  {
    "text": "that the epsilon\ntransitions don't-- the machine does not\nhave to take that.",
    "start": "2557380",
    "end": "2563500"
  },
  {
    "text": "It can stay where it is as\none nondeterministic option,",
    "start": "2563500",
    "end": "2569110"
  },
  {
    "text": "or it can move along\nthe epsilon transition, without reading any input,\nas another nondeterministic",
    "start": "2569110",
    "end": "2574210"
  },
  {
    "text": "option. So it's using this\nnondeterminism now to both stay in M1 to continue\nreading more of the input",
    "start": "2574210",
    "end": "2583130"
  },
  {
    "text": "and to jump into M2 to\nstart processing what might be the second half or the\nsecond part of the input which",
    "start": "2583130",
    "end": "2591950"
  },
  {
    "text": "M2 accepts. And you can think of it\nin terms of the guessing as that the machine is guessing\nwhere to make that split.",
    "start": "2591950",
    "end": "2601359"
  },
  {
    "text": "Once it found an initial\npart that's accepted by M1, it guesses that this is\nthe right split point.",
    "start": "2601360",
    "end": "2607870"
  },
  {
    "text": "And that passes to M2. But there might be\nother guesses that it could make corresponding\nto other possibilities.",
    "start": "2607870",
    "end": "2616930"
  },
  {
    "text": "And so with nondeterminism,\nit always guesses right. If there is some way to\nsplit the string into two",
    "start": "2616930",
    "end": "2624770"
  },
  {
    "text": "parts accepted by M1\nand M2, the machine will make that good guess.",
    "start": "2624770",
    "end": "2630809"
  },
  {
    "text": "And then M1 will\naccept the first part, and M2 will accept\nwith the second part.",
    "start": "2630810",
    "end": "2637619"
  },
  {
    "text": "And we'll get M accepting\nthat whole string altogether. And so that is the\nsolution to our puzzle",
    "start": "2637620",
    "end": "2646760"
  },
  {
    "text": "for how do we do closure\nunder concatenation. OK, I hope that came through. Because we're just getting\ngoing with nondeterminism.",
    "start": "2646760",
    "end": "2657089"
  },
  {
    "text": "We're going to be using\nnondeterminism a lot, and you're going to need to\nget very comfortable with it.",
    "start": "2657090",
    "end": "2664410"
  },
  {
    "text": "OK? Now let's do closure under star. And closure under star\nworks very similarly,",
    "start": "2664410",
    "end": "2674075"
  },
  {
    "text": "but now we're just going\nto have a single language. If A is regular, so is A star. So they're not a\npair of languages,",
    "start": "2674075",
    "end": "2679440"
  },
  {
    "text": "because a star is a\nunary operation applying to just a single language.",
    "start": "2679440",
    "end": "2687640"
  },
  {
    "text": "So if we have a DFA\nrecognizing A, in order to show that A\nstar is regular, we",
    "start": "2687640",
    "end": "2693630"
  },
  {
    "text": "have to construct a machine\nthat recognizes A star. And the machine we're\ngoing to construct is as before and then an NFA.",
    "start": "2693630",
    "end": "2701650"
  },
  {
    "text": "OK? So here is M, the\nDFA for A. And we're",
    "start": "2701650",
    "end": "2709990"
  },
  {
    "text": "going to build an NFA M\nprime that recognizes A star.",
    "start": "2709990",
    "end": "2715630"
  },
  {
    "text": "And let's think now, what does\nit mean to recognize A star?",
    "start": "2715630",
    "end": "2721519"
  },
  {
    "text": "So if I'm going to\ngive you an input, when is it in the star language?",
    "start": "2721520",
    "end": "2726640"
  },
  {
    "text": "What does M prime have to do? So remember what star is.",
    "start": "2726640",
    "end": "2732220"
  },
  {
    "text": "Star means you can take\nas many copies of you lot as you like of strings\nin the original language, and that's in the star language.",
    "start": "2732220",
    "end": "2738550"
  },
  {
    "text": "So to determine if something\nis in the star language, you have to see,\ncan I break it up",
    "start": "2738550",
    "end": "2743890"
  },
  {
    "text": "into pieces which are all\nin the original language? ",
    "start": "2743890",
    "end": "2752960"
  },
  {
    "text": "So you want to see, can I\ntake my input w and cut it up into a bunch of pieces--\nfour, in this case--",
    "start": "2752960",
    "end": "2760609"
  },
  {
    "text": "where each of those\npieces are members of A, the members of\nthe original language?",
    "start": "2760610",
    "end": "2766309"
  },
  {
    "text": "So that's what M prime's job is. It has its input\nand wants to know,",
    "start": "2766310",
    "end": "2772310"
  },
  {
    "text": "can I cut that input up\ninto pieces, each of which are accepted by the\noriginal machine M?",
    "start": "2772310",
    "end": "2779220"
  },
  {
    "text": "That's what M prime does. And if you think\nabout it a little bit,",
    "start": "2779220",
    "end": "2786839"
  },
  {
    "text": "really what's happening\nis that as soon as M-- so M prime is going\nto be simulating",
    "start": "2786840",
    "end": "2792738"
  },
  {
    "text": "M. That's the way I like to\nthink about this, as having M inside. So if you were going to\nbe doing this yourself,",
    "start": "2792738",
    "end": "2799020"
  },
  {
    "text": "you're going to take w. You're going to\nrun it for a while. You'll see, oh, M is accepted. Now I have to start\nhim over again",
    "start": "2799020",
    "end": "2806960"
  },
  {
    "text": "to see if it accepts\nthe next segment. So every time M\naccepts, you're going",
    "start": "2806960",
    "end": "2813210"
  },
  {
    "text": "to restart M to see if it\naccepts another segment. And so by doing that, you're\ngoing to be cutting w up",
    "start": "2813210",
    "end": "2819060"
  },
  {
    "text": "into different\nsegments, each of which is accepted by M. Of\ncourse, it's never totally",
    "start": "2819060",
    "end": "2825600"
  },
  {
    "text": "clear whether you should,\nfor any given segment, you should cut it there or you\nshould wait a little longer",
    "start": "2825600",
    "end": "2831960"
  },
  {
    "text": "and find another, a\nlater place to cut. But that's exactly\nthe same problem that we had before\nwith concatenation.",
    "start": "2831960",
    "end": "2838680"
  },
  {
    "text": "And we solved it\nusing nondeterminism, and we're going to solve it\nagain using nondeterminism.",
    "start": "2838680",
    "end": "2845310"
  },
  {
    "text": "So the way we're going\nto get that effect of starting the machine over\nagain, once it's accepted,",
    "start": "2845310",
    "end": "2851720"
  },
  {
    "text": "is by adding in epsilon\ntransitions that go",
    "start": "2851720",
    "end": "2857380"
  },
  {
    "text": "from the start states back to-- from the accept state\nback to the start state. ",
    "start": "2857380",
    "end": "2867700"
  },
  {
    "text": "So now every time\nM has accepted, it has an option-- not a\nrequirement, but has an option.",
    "start": "2867700",
    "end": "2874520"
  },
  {
    "text": "It can either stay\ncontinuing to process, or it could restart,\nmaking a cut at that point",
    "start": "2874520",
    "end": "2881350"
  },
  {
    "text": "and trying to see if there's\nyet a second, another segment",
    "start": "2881350",
    "end": "2887650"
  },
  {
    "text": "of the input that\nit's going to accept. And this is basically the whole\nthing, with one little problem",
    "start": "2887650",
    "end": "2898369"
  },
  {
    "text": "that we need to deal with. And that is we need to make\nsure that M prime accepts",
    "start": "2898370",
    "end": "2910450"
  },
  {
    "text": "the empty string. Because remember,\nthe empty string is always a member\nof the star language.",
    "start": "2910450",
    "end": "2918145"
  },
  {
    "text": " And as it's written\nright now, we're",
    "start": "2918145",
    "end": "2924980"
  },
  {
    "text": "going to be requiring there\nto be at least one copy of at least one segment.",
    "start": "2924980",
    "end": "2931490"
  },
  {
    "text": "We're not taking into account\nthe possibility of no segments, which is the empty string.",
    "start": "2931490",
    "end": "2936570"
  },
  {
    "text": "And the way we're\ngoing to get that is-- well, I mean, one thing,\none way to get to add--",
    "start": "2936570",
    "end": "2944160"
  },
  {
    "text": "so we're missing the\nempty string right now. So how do we fix it? Basically, we're just going to\ntake the construction we have",
    "start": "2944160",
    "end": "2951190"
  },
  {
    "text": "on the screen, and\nwe're going to adjust it to add in the empty string.",
    "start": "2951190",
    "end": "2957460"
  },
  {
    "text": "Because it's possibly missing. One way to do that, which\nis tempting, but wrong,",
    "start": "2957460",
    "end": "2965390"
  },
  {
    "text": "is to make the start state of M\nan accepting state for M prime.",
    "start": "2965390",
    "end": "2973049"
  },
  {
    "text": "So we could have made this\nan accepting state, too. And now M prime is also going\nto accept the empty string.",
    "start": "2973050",
    "end": "2980230"
  },
  {
    "text": "That's the good news. The problem is\nthat the start date",
    "start": "2980230",
    "end": "2988430"
  },
  {
    "text": "might be playing\nsome other role in M besides just being the start. There might be times when M\ncomes back to the start state",
    "start": "2988430",
    "end": "2996940"
  },
  {
    "text": "later on. And if we make the start\nstate the an accept state, it's going to suddenly\nstart accepting",
    "start": "2996940",
    "end": "3003750"
  },
  {
    "text": "a bunch of other things too,\nwhich might not be intended. So it's a bad idea to make the\nstart state an accept state.",
    "start": "3003750",
    "end": "3010810"
  },
  {
    "text": "Instead, we'll take the\nsimple solution alternative of adding a new start\nstate, which will never",
    "start": "3010810",
    "end": "3019090"
  },
  {
    "text": "be returned to under\nany circumstances, and make that a new start--",
    "start": "3019090",
    "end": "3024800"
  },
  {
    "text": "an accept state as well. So here, we'll have to make\nthis additional modification. So as I'm saying, this\nis what we need to do.",
    "start": "3024800",
    "end": "3031599"
  },
  {
    "text": "And the way we'll do that is by\nadding a new start state, which is also an accept\nstate, to make sure it accepts the empty string.",
    "start": "3031600",
    "end": "3038120"
  },
  {
    "text": "And then that also can\nbranch to start off M",
    "start": "3038120",
    "end": "3044410"
  },
  {
    "text": "as before, if the string that's\ninput is not the empty string. And so then M prime\nis actually going",
    "start": "3044410",
    "end": "3051400"
  },
  {
    "text": "to have to do some work to\nsee if it can be cut off, as it was doing before.",
    "start": "3051400",
    "end": "3057050"
  },
  {
    "text": "So that's the proof\nof closure under star. I'm not going to do it\nanything beyond what I've just",
    "start": "3057050",
    "end": "3062590"
  },
  {
    "text": "described. These proofs by picture are\nconvincing enough, I hope. And if not, they are explained\nin somewhat more detail,",
    "start": "3062590",
    "end": "3070703"
  },
  {
    "text": "somewhat more formally,\nin the textbook. But for the lecture, this\nis where I'm going to stop, with these two arguments.",
    "start": "3070703",
    "end": "3077710"
  },
  {
    "text": "And so now-- oh, we have\none quick check-in on this. ",
    "start": "3077710",
    "end": "3083930"
  },
  {
    "text": "So if M has n states,\nhow many states does M prime have by\nthis construction?",
    "start": "3083930",
    "end": "3090920"
  },
  {
    "text": "So I'm not intending these\nto be very hard, more just",
    "start": "3090920",
    "end": "3097160"
  },
  {
    "text": "to keep you awake.  So how many states\ndoes M prime have?",
    "start": "3097160",
    "end": "3108490"
  },
  {
    "text": "OK, maybe a little too\neasy even for a check-in. ",
    "start": "3108490",
    "end": "3115090"
  },
  {
    "text": "Yeah, everybody is\ngetting this one. Because all you did was-- we added one new state.",
    "start": "3115090",
    "end": "3121130"
  },
  {
    "text": "So the answer is as you have-- I think pretty much everybody\nis observing that it's number b.",
    "start": "3121130",
    "end": "3130970"
  },
  {
    "text": "So I'm going to end\nthe polling, and I'm going to share the results. And everybody got that one.",
    "start": "3130970",
    "end": "3137029"
  },
  {
    "text": "And so let's continue on.  And so the very last thing\nwe're going to do today",
    "start": "3137030",
    "end": "3147470"
  },
  {
    "text": "is show you how to convert\nregular expressions to NFAs,",
    "start": "3147470",
    "end": "3154820"
  },
  {
    "text": "thereby showing that\nevery language that you can describe with a\nregular expression is a regular language.",
    "start": "3154820",
    "end": "3162242"
  },
  {
    "text": "On Tuesday, we'll show\nhow to do the conversion in the other direction\nand so thereby showing that these two methods\nof describing languages",
    "start": "3162242",
    "end": "3170830"
  },
  {
    "text": "are equivalent to one another. So here's our theorem. If R is a regular\nexpression, and A",
    "start": "3170830",
    "end": "3177010"
  },
  {
    "text": "is the language--\na set of strings that that regular expression\ndescribes, then A is regular.",
    "start": "3177010",
    "end": "3183630"
  },
  {
    "text": "OK? So we're going to\nshow how to convert.",
    "start": "3183630",
    "end": "3191430"
  },
  {
    "text": "The strategy is to convert\nR to an equivalent NFA M.",
    "start": "3191430",
    "end": "3197170"
  },
  {
    "text": "And so we have to\nthink about, remember, these regular expressions\nthat we introduced last time.",
    "start": "3197170",
    "end": "3203290"
  },
  {
    "text": "These are these expressions\nthat look like ab union b",
    "start": "3203290",
    "end": "3208570"
  },
  {
    "text": "star, something like that-- so built up out of\nthe regular operations from the primitive\nregular expressions",
    "start": "3208570",
    "end": "3217780"
  },
  {
    "text": "that don't have any operations,\nthat we're calling atomic. So if R is an atomic\nregular expression,",
    "start": "3217780",
    "end": "3223000"
  },
  {
    "text": "it just looks like either\njust a single symbol or an empty string symbol\nor an empty language symbol.",
    "start": "3223000",
    "end": "3230575"
  },
  {
    "text": " Or R can be a composite\nregular expression--",
    "start": "3230575",
    "end": "3241000"
  },
  {
    "text": "whoops. We're having a little-- ",
    "start": "3241000",
    "end": "3246190"
  },
  {
    "text": "yeah, so we have two\npossibilities here. R is either atomic or composite.",
    "start": "3246190",
    "end": "3251620"
  },
  {
    "text": "And so let's look at what\nthe equivalent expression is in each case.",
    "start": "3251620",
    "end": "3257840"
  },
  {
    "text": "So if R is just the single\nletter regular expression-- that's a totally legitimate\nregular expression,",
    "start": "3257840",
    "end": "3264279"
  },
  {
    "text": "just a regular expression 1. So that just describes the\nlanguage of the string 1.",
    "start": "3264280",
    "end": "3271390"
  },
  {
    "text": "So we have to make an\nNFA which accepts-- which recognizes\njust that language,",
    "start": "3271390",
    "end": "3277000"
  },
  {
    "text": "accepts only the string 1. So it's a very simple NFA. It just starts in\nthe start state.",
    "start": "3277000",
    "end": "3284290"
  },
  {
    "text": "And on that single symbol, it\nbranches to an accept state.",
    "start": "3284290",
    "end": "3289420"
  },
  {
    "text": "And there were no other\ntransitions allowed. So if you get\nanything else coming in besides that one,\nthat string, which",
    "start": "3289420",
    "end": "3296380"
  },
  {
    "text": "is just that one symbol, the\nNFA is going to reject it. If it's too long, if\nit gets aa coming in,",
    "start": "3296380",
    "end": "3304930"
  },
  {
    "text": "well, there's nowhere to go from\nthis accepting state on an A.",
    "start": "3304930",
    "end": "3309970"
  },
  {
    "text": "So the machine is\njust going to die. It has to be in an accept\nstate at the end of the input. ",
    "start": "3309970",
    "end": "3317910"
  },
  {
    "text": "Now, I want you think for\nyourself for a minute, how do we make an NFA which\naccepts only the empty string",
    "start": "3317910",
    "end": "3324789"
  },
  {
    "text": "and no other strings? You can do that with just\none state with an NFA, just this one here.",
    "start": "3324790",
    "end": "3331665"
  },
  {
    "text": "The machine is\ngoing to start off in the start state,\nwhich is also immediately an accept state. So it accepts the empty string.",
    "start": "3331665",
    "end": "3337240"
  },
  {
    "text": "But if anything else\ncomes in, there's nowhere to go when\nthe machine dies. So this machine accepts\njust the empty string.",
    "start": "3337240",
    "end": "3344510"
  },
  {
    "text": "Or its language is the\nlanguage with one element, the empty string. How about the empty language?",
    "start": "3344510",
    "end": "3351230"
  },
  {
    "text": "Well, here's an NFA which\nhas no accepting state, so it can't be\naccepting anything.",
    "start": "3351230",
    "end": "3358780"
  },
  {
    "text": "Now, if we have a composite\nregular expression, we're already finished.",
    "start": "3358780",
    "end": "3364680"
  },
  {
    "text": "Because we showed\nhow to build up-- we showed constructions which\ngive us closure under union,",
    "start": "3364680",
    "end": "3373600"
  },
  {
    "text": "concatenation, and star. And those\nconstructions are going to enable us to build\nup the NFAs that",
    "start": "3373600",
    "end": "3382620"
  },
  {
    "text": "do the language of these more\ncomplex regular expressions",
    "start": "3382620",
    "end": "3389000"
  },
  {
    "text": "built up out of the NFAs\nthat do the individual parts.",
    "start": "3389000",
    "end": "3396030"
  },
  {
    "text": "So if we already have\nNFAs that do R1 and R2, then the closure under\nunion construction",
    "start": "3396030",
    "end": "3404440"
  },
  {
    "text": "gives us an NFA that does\nR1 union R2 as a language.",
    "start": "3404440",
    "end": "3411140"
  },
  {
    "text": "So I hope that's\nclear, but I'm going to do an example which will\nhopefully illustrate it.",
    "start": "3411140",
    "end": "3417290"
  },
  {
    "text": "And it's going to show you-- basically, what I'm giving\nyou is an automatic procedure",
    "start": "3417290",
    "end": "3422480"
  },
  {
    "text": "for converting a regular\nexpression into an equivalent NFA. So let's just see that\nprocedure in action,",
    "start": "3422480",
    "end": "3432520"
  },
  {
    "text": "which is really just\nfollowing this recipe that I described for you. So here is a regular\nexpression a union ab star.",
    "start": "3432520",
    "end": "3443349"
  },
  {
    "text": "So this is a regular expression. It's some language. Whatever it is, I don't care. But I want to make an NFA which\nrecognizes that same language.",
    "start": "3443350",
    "end": "3452890"
  },
  {
    "text": "And the way I'm going to\ndo that is first build NFA for the components,\nthe subexpressions",
    "start": "3452890",
    "end": "3462610"
  },
  {
    "text": "of this regular expression,\nand then combine them, using our closure\ninstructions, to be",
    "start": "3462610",
    "end": "3471730"
  },
  {
    "text": "NFAs for larger and\nlarger subexpressions, until I get the NFA\nthat's the equivalent",
    "start": "3471730",
    "end": "3477430"
  },
  {
    "text": "of the entire expression. So let's just see how that goes. So the very most\nprimitive parts,",
    "start": "3477430",
    "end": "3483690"
  },
  {
    "text": "the smallest\nsubexpressions here, are just the expressions\nfor a and for b.",
    "start": "3483690",
    "end": "3489819"
  },
  {
    "text": "So here's the one just for a. So this is the NFA which\nrecognizes the language, which",
    "start": "3489820",
    "end": "3499240"
  },
  {
    "text": "is just the one string a. Here is the NFA whose language\nis just the one string b.",
    "start": "3499240",
    "end": "3506970"
  },
  {
    "text": "And now I want an NFA which\naccepts only the string ab.",
    "start": "3506970",
    "end": "3514320"
  },
  {
    "text": "Now, of course, you could\njust do that by hand yourself. It's simple enough. But what I'm arguing is that\nwe can do this automatically,",
    "start": "3514320",
    "end": "3523049"
  },
  {
    "text": "using the closure construction\nfor concatenation. Because really there's a\nhidden concatenation symbol.",
    "start": "3523050",
    "end": "3530069"
  },
  {
    "text": "This is a concatenate b. So now for ab, I'm going to take\nthe thing from a and the part",
    "start": "3530070",
    "end": "3541140"
  },
  {
    "text": "from b-- so these two things\nthat I had from before, and use the concatenation\nconstruction to combine them.",
    "start": "3541140",
    "end": "3551560"
  },
  {
    "text": "You see that? So now I have\nautomatically an NFA which does the language\nwhose string is just",
    "start": "3551560",
    "end": "3557769"
  },
  {
    "text": "ab, just the ab string. And it's not the simplest NFA.",
    "start": "3557770",
    "end": "3563560"
  },
  {
    "text": "You can make a simpler one,\nbut the virtue of this one is that I got it automatically\njust by following the closure",
    "start": "3563560",
    "end": "3570849"
  },
  {
    "text": "construction. So now I'm going to do\na more complex one, just the inside here, a union ab.",
    "start": "3570850",
    "end": "3576020"
  },
  {
    "text": " So the way I'm going to\nbuild that is from the two",
    "start": "3576020",
    "end": "3581880"
  },
  {
    "text": "parts, the a part\nand the ab part, the a part and the ab part. So here is the a part.",
    "start": "3581880",
    "end": "3588850"
  },
  {
    "text": "Here's the ab part. I've already got\nthose from before. It's really kind of a\nproof by induction here.",
    "start": "3588850",
    "end": "3593967"
  },
  {
    "text": "But I think it's\nsimple enough, we don't have to use that language. So we have the a\npart, the ab part.",
    "start": "3593967",
    "end": "3604190"
  },
  {
    "text": "And now we are going\nto apply the closure",
    "start": "3604190",
    "end": "3609490"
  },
  {
    "text": "under union construction to\ncombine those into one machine. And remember how that worked.",
    "start": "3609490",
    "end": "3615580"
  },
  {
    "text": "We had a new symbol here, which\nbranches under empty string to the previous--",
    "start": "3615580",
    "end": "3620619"
  },
  {
    "text": "we're adding a new\nstart state, which branches to the original start\nstates under empty transition.",
    "start": "3620620",
    "end": "3625630"
  },
  {
    "text": "And now this is an NFA for\nthis language, a union ab.",
    "start": "3625630",
    "end": "3631789"
  },
  {
    "text": "And lastly, now\nwe're one step away from getting the star of this. And how are we going to do that?",
    "start": "3631790",
    "end": "3638400"
  },
  {
    "text": "We're going to take this thing\nhere and apply the construction for the star closure.",
    "start": "3638400",
    "end": "3644910"
  },
  {
    "text": "And that's going\nto be an NFA which does a union ab\nstar, which is what we wanted in the first place.",
    "start": "3644910",
    "end": "3650890"
  },
  {
    "text": "So first, we're going\nto bring that one down.",
    "start": "3650890",
    "end": "3655928"
  },
  {
    "text": "Because we've already\nbuilt that one. And now remember how we\nbuilt the closure under star.",
    "start": "3655928",
    "end": "3663160"
  },
  {
    "text": "We made the accepting states\nreturn back to the start state, and we added a new\nstart state to make",
    "start": "3663160",
    "end": "3669640"
  },
  {
    "text": "sure we got the empty\nstring in there that transitioned to the original\nstart state under epsilon.",
    "start": "3669640",
    "end": "3675070"
  },
  {
    "text": "OK? So that's all I wanted to\nsay for today's lecture. Let's do a quick review.",
    "start": "3675070",
    "end": "3680740"
  },
  {
    "text": " Very important\nconcept, nondeterminism",
    "start": "3680740",
    "end": "3685990"
  },
  {
    "text": "and nondeterministic\nfinite automata-- we proved they were\nequivalent in power,",
    "start": "3685990",
    "end": "3691840"
  },
  {
    "text": "showed the class of\nregular languages closed under\nconcatenation in star. We showed how to do conversion\nof regular expressions to NFAs.",
    "start": "3691840",
    "end": "3699430"
  },
  {
    "text": "So I think that is it\nfor today's lecture.",
    "start": "3699430",
    "end": "3705339"
  },
  {
    "text": "And thank you, all,\nfor being here. I'll try to answer\na few of these.",
    "start": "3705340",
    "end": "3711685"
  },
  {
    "start": "3711685",
    "end": "3716770"
  },
  {
    "text": "\"Why does concatenation\nhave order?\" Well, because it's an\nordered construction.",
    "start": "3716770",
    "end": "3722800"
  },
  {
    "text": "Is there a simple way to prove\nclosure under concatenation without using nondeterminism? No. ",
    "start": "3722800",
    "end": "3730340"
  },
  {
    "text": "\"Why are the empty strings\nat the accept state? Can't they be at any state?",
    "start": "3730340",
    "end": "3736680"
  },
  {
    "text": "Doesn't star make copies\nof any part of the input?\" No, it's only-- you have to\nthink about what's going on.",
    "start": "3736680",
    "end": "3743174"
  },
  {
    "text": " You have to branch back to the\nbeginning only on an accept.",
    "start": "3743175",
    "end": "3749339"
  },
  {
    "text": "Because that means you\nfound a piece that's in the original language. ",
    "start": "3749340",
    "end": "3754630"
  },
  {
    "text": "\"Is there an automaton\nthat can add some or subtract memory automata?\"",
    "start": "3754630",
    "end": "3760720"
  },
  {
    "text": "Well, depends on what\nyou mean by all that. But certainly, there are\nmore powerful machines",
    "start": "3760720",
    "end": "3767660"
  },
  {
    "text": "that we're going to study\nthan finite automata. ",
    "start": "3767660",
    "end": "3773780"
  },
  {
    "text": "But yes, there is. And even finite automata\ncan add and subtract,",
    "start": "3773780",
    "end": "3779270"
  },
  {
    "text": "if you present the\ninput in the right way. I would refer you to the\nfirst problem on the homework.",
    "start": "3779270",
    "end": "3786440"
  },
  {
    "text": "So I think I'm going\nto check out then.",
    "start": "3786440",
    "end": "3791859"
  },
  {
    "text": "Take care, everybody. Bye-bye. ",
    "start": "3791860",
    "end": "3807000"
  }
]