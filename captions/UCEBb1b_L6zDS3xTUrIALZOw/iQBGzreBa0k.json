[
  {
    "text": "[SQUEAKING] [RUSTLING] [CLICKING]",
    "start": "0",
    "end": "7320"
  },
  {
    "start": "7320",
    "end": "12710"
  },
  {
    "text": "PROFESSOR: Let's go back. So I want to say-- before,\nactually, I tell you that-- just a high level idea of the\nother proof, I just want to--",
    "start": "12710",
    "end": "19970"
  },
  {
    "text": "I got a very good\nquestion in the break, so I want to emphasize-- I want to answer\nit for the class.",
    "start": "19970",
    "end": "26119"
  },
  {
    "text": "So the question\nwas the following. When I talked about interactive\nproof I said sound is half.",
    "start": "26120",
    "end": "32340"
  },
  {
    "text": "And if you want more\nthan half, do repetition. Do parallel repetition.",
    "start": "32340",
    "end": "37800"
  },
  {
    "text": "And now when I talked about\nargument I went to negligible. So the question is,\nwhy don't I do--",
    "start": "37800",
    "end": "43940"
  },
  {
    "text": "why is the change of\nlanguage, of terminology, why for proofs I said half\nand you can do repetition?",
    "start": "43940",
    "end": "49920"
  },
  {
    "text": "And for argument, I\nimmediately said, no, I want it to be negligible.",
    "start": "49920",
    "end": "55400"
  },
  {
    "text": "And the answer is\nactually pretty weird. The answer is that,\nfor proofs, we can do--",
    "start": "55400",
    "end": "63070"
  },
  {
    "text": "we can repeat-- if you\nhave an interactive proof and you repeat it in\nparallel, let's say, lambda times, then the soundness\ngoes down exponentially",
    "start": "63070",
    "end": "73110"
  },
  {
    "text": "with lambda. If it was half now, it's\n1 over 2 to the lambda, like you would expect.",
    "start": "73110",
    "end": "78630"
  },
  {
    "text": "With arguments, that's\nnot necessarily the case. Once we go to the\nland of crypto,",
    "start": "78630",
    "end": "84880"
  },
  {
    "text": "things become a little weird,\nand it's not the case that any",
    "start": "84880",
    "end": "90960"
  },
  {
    "text": "argument, if you repeat it\nin parallel lambda times, if you had complete-- if\nyou had the soundness half,",
    "start": "90960",
    "end": "97300"
  },
  {
    "text": "now it's soundness\n1 over 2 to the-- 1 over 2 to the lambda. That's not the case anymore.",
    "start": "97300",
    "end": "102329"
  },
  {
    "text": "Now, we have examples that\nshow this is not the case, that actually soundness\ndoesn't go down. But these examples are very\ncontrived, very, very contrived.",
    "start": "102330",
    "end": "110740"
  },
  {
    "text": "It's not a natural argument. My guess is for any\nnatural argument,",
    "start": "110740",
    "end": "118530"
  },
  {
    "text": "however you define\nnatural, soundness probably does go down exponentially\nwhen you repeat in parallel.",
    "start": "118530",
    "end": "124400"
  },
  {
    "text": "Now-- but it's not\ntrue all the time. So actually, this parallel\nrepetition, you can rely on it.",
    "start": "124400",
    "end": "132330"
  },
  {
    "text": "Now, we can do\nsequential repetition. And then the soundness\ndoes go down. If you do once and\nthen you do the-- so",
    "start": "132330",
    "end": "139940"
  },
  {
    "text": "you do the interactive\nargument once. You are done. Do it again, done,\ndo it again, done. Do it lambda times, and accept\nif and only if all of them",
    "start": "139940",
    "end": "147710"
  },
  {
    "text": "accept, then soundness\ndoes go down exponentially,",
    "start": "147710",
    "end": "152930"
  },
  {
    "text": "like you would expect. However, then you increase the\nnumber of rounds by lambda. So you went from constant\nmaybe to nonconstant.",
    "start": "152930",
    "end": "160290"
  },
  {
    "text": "So there's a price. So it's not like for free you-- in the interactive proof\nsetting, it's like for free.",
    "start": "160290",
    "end": "166170"
  },
  {
    "text": "Just repeat in parallel. It's like for free. Here, now the round\ncomplexity changes.",
    "start": "166170",
    "end": "171209"
  },
  {
    "text": "It's not very free anymore. So that's why we\nput here negligible.",
    "start": "171210",
    "end": "176430"
  },
  {
    "text": "That just explained\nthe change of language,",
    "start": "176430",
    "end": "181950"
  },
  {
    "text": "why here we chose negligible\nbefore we chose 1/2, or 1/3, 2/3, whatever.",
    "start": "181950",
    "end": "187180"
  },
  {
    "text": "The constant didn't matter\nbecause you can amplify. ",
    "start": "187180",
    "end": "192610"
  },
  {
    "text": "OK, questions before I go back\nto say a few words about--",
    "start": "192610",
    "end": "197898"
  },
  {
    "text": "so the plan for our the hour,\nless than an hour we have left, I want say a few words about the\nBarak-Goldreich proof called--",
    "start": "197898",
    "end": "204960"
  },
  {
    "text": "they call it \"Universal\nArguments,\" that paper. And then we'll move on to\nconstruct hash functions.",
    "start": "204960",
    "end": "211320"
  },
  {
    "text": "Yeah? OK, so let me just\nsay a few words. I don't want to go into details\nabout the Barak-Goldreich,",
    "start": "211320",
    "end": "217020"
  },
  {
    "text": "but just to tell you\nthe high-level idea. This proof, what it\ndid, what it tried to do",
    "start": "217020",
    "end": "222930"
  },
  {
    "text": "is to say, look, if\nthere are no collisions, I'm going to construct\nan entire PCP.",
    "start": "222930",
    "end": "228150"
  },
  {
    "text": "I'm going to try\nas much as I can. And now I get a contradiction\nbecause there is no PCP, and hence, I conclude that\nthere was a hash function.",
    "start": "228150",
    "end": "236620"
  },
  {
    "text": "But for this, I needed to\nconstruct an entire PCP and, therefore,\nrun in time that's",
    "start": "236620",
    "end": "241660"
  },
  {
    "text": "proportional to the PCP size. OK, instead, the Barak-Goldreich\nproof, what they say, they say,",
    "start": "241660",
    "end": "250330"
  },
  {
    "text": "let's look at each kind\nof query separately.",
    "start": "250330",
    "end": "255980"
  },
  {
    "text": "So in other words, the PCP,\nlet's say, has length m. Let's look at the\nPCP at location i.",
    "start": "255980",
    "end": "265360"
  },
  {
    "text": "And I asked the following\nquery, the following question. Here's the question they ask.",
    "start": "265360",
    "end": "270550"
  },
  {
    "text": "In location i, if I run the PCP,\nI have a cheating prover here,",
    "start": "270550",
    "end": "275639"
  },
  {
    "text": "yeah? If I run him twice or many\ntimes, where all the times have",
    "start": "275640",
    "end": "280930"
  },
  {
    "text": "location i in their,\none i, not all the PCP, for a certain index i, let\nme run the PCP verifier-- let",
    "start": "280930",
    "end": "288310"
  },
  {
    "text": "me give the cheating prover like\na randomness from the verifier",
    "start": "288310",
    "end": "295270"
  },
  {
    "text": "so that the queries\ninclude index i. And let me take many of them.",
    "start": "295270",
    "end": "300720"
  },
  {
    "text": "Is there a collision in\ni, or is all the time he answers the same way. That's the question.",
    "start": "300720",
    "end": "305800"
  },
  {
    "text": "So for an index i, does he\nalways answer with the same bit,",
    "start": "305800",
    "end": "310849"
  },
  {
    "text": "assuming he answers correctly? If he doesn't answer\ncorrectly, if he's rejected, then we throw it out. But all the time that he answers\ncorrectly when asked location i,",
    "start": "310850",
    "end": "319949"
  },
  {
    "text": "does he answer consistently\nwith the same bit or not?",
    "start": "319950",
    "end": "325320"
  },
  {
    "text": "Now, if he's answered, if not,\nif some probability, I don't",
    "start": "325320",
    "end": "332070"
  },
  {
    "text": "know, epsilon he answers\nwith 0, and probability epsilon he answers with\n1, we found a collision. ",
    "start": "332070",
    "end": "339270"
  },
  {
    "text": "And then we're happy. If not, we didn't\nfind the collision. Now they ask, so let's\ncall an index like good",
    "start": "339270",
    "end": "347440"
  },
  {
    "text": "if there's no collisions\non that index. Then he behaved like--\nthe prover behaved well.",
    "start": "347440",
    "end": "352970"
  },
  {
    "text": "He behaved good. So for every index\nI ask, is it good? In the analysis, I don't yet--",
    "start": "352970",
    "end": "359620"
  },
  {
    "text": "I don't have an adversary yet. I'm just saying, look,\nthere's a cheating prover. For every index, let's\nlook at the probability",
    "start": "359620",
    "end": "367600"
  },
  {
    "text": "that when he answers\ncorrectly, he answers always with the same bit. Let's say we answer the\nsame bit with probability--",
    "start": "367600",
    "end": "375680"
  },
  {
    "text": "he answers correctly, but\nwith two different answers with probability greater\nthan, I don't know,",
    "start": "375680",
    "end": "383380"
  },
  {
    "text": "epsilon to the third, whatever,\nsome function of epsilon that's non-negligible.",
    "start": "383380",
    "end": "388450"
  },
  {
    "text": "So it's good if he\ndoesn't do that. He answers consistently\nalmost always. And it's bad if he answers\ninconsistent with probability",
    "start": "388450",
    "end": "396830"
  },
  {
    "text": "at least, I don't know,\nepsilon to the third. And now what they say is, it\nmust be that many i's are bad.",
    "start": "396830",
    "end": "407350"
  },
  {
    "text": "If almost all the i's are\ngood, a significant fraction of the i's must be bad.",
    "start": "407350",
    "end": "413468"
  },
  {
    "text": "Namely, there should\nbe collisions on them. Why? If almost all of them were good,\nthen and the good ones I will--",
    "start": "413468",
    "end": "420230"
  },
  {
    "text": "in the-- OK, so first they say many\nof the indexes i must be bad.",
    "start": "420230",
    "end": "426990"
  },
  {
    "text": "Once you establish that, then\nyou just break collisions by choosing a random i, hope\nit's bad, and you're done.",
    "start": "426990",
    "end": "435180"
  },
  {
    "text": "You're not doing\nmany i's like we did. Just one random i with some\ngood probability or bad. If it's bad, you found\na collision, done.",
    "start": "435180",
    "end": "443000"
  },
  {
    "text": "OK, but one can\nsay maybe there's-- maybe the number of\nbad is like 1 over n. Maybe you need to repeat it n\ntimes until you find a bad one.",
    "start": "443000",
    "end": "450139"
  },
  {
    "text": "So they say, no, the\nnumber of bad ones need to be like polynomial in at\nleast non-negligible in lambda.",
    "start": "450140",
    "end": "458360"
  },
  {
    "text": "Why? If almost all of them were good,\nwhere there's no collision,",
    "start": "458360",
    "end": "463700"
  },
  {
    "text": "then you can-- OK, and these\nreconstruct the PCP. And the good ones do\nthe same kind of idea",
    "start": "463700",
    "end": "471900"
  },
  {
    "text": "of reconstructing the PCP,\nbut only on the good indices. Then they show that if you\nhave enough good indices, then",
    "start": "471900",
    "end": "479009"
  },
  {
    "text": "you'll be accepted with\nnon-negligible probability. So there must be\nenough bad indices,",
    "start": "479010",
    "end": "485130"
  },
  {
    "text": "indices that the cheating\nprover enters inconsistently. Once you have that, then\nnow, once you establish",
    "start": "485130",
    "end": "493560"
  },
  {
    "text": "that in your head, that we\nunderstand that, now here, the adversary just\nchooses one random i.",
    "start": "493560",
    "end": "500490"
  },
  {
    "text": "He runs the PCP verifier twice. He generates two randomness\nthat generates two fresh index",
    "start": "500490",
    "end": "511290"
  },
  {
    "text": "set that include i. So they had one assumption\nthat they needed about the PCP, that given i, it is easy to find\nr such that the PCP verifier",
    "start": "511290",
    "end": "523140"
  },
  {
    "text": "and input r outputs a\nset that includes i. And turns out all PCPs we\nknow, or all PCPs I know,",
    "start": "523140",
    "end": "531019"
  },
  {
    "text": "satisfied this property. So that's-- it turns out\nit's a natural property. It's easy given i to find\nrandomness, true randomness that",
    "start": "531020",
    "end": "543390"
  },
  {
    "text": "generates a set of\nqueries conditioned on i being in that set.",
    "start": "543390",
    "end": "551287"
  },
  {
    "text": "Once you can do\nthat, then he chooses two R's, randomness\nthat have i in the set, and hope for collision.",
    "start": "551288",
    "end": "556740"
  },
  {
    "text": "And then you can argue\nthat you get collision with non-negligible probability\nbecause non-negligible fraction of them are bad. And the bad ones are\ndefined so that when",
    "start": "556740",
    "end": "564860"
  },
  {
    "text": "you choose two random\ninvocation that include i you find a collision. So they found a collision.",
    "start": "564860",
    "end": "570950"
  },
  {
    "text": "So they just did it. The difference is they\ndid it index by index. They said, does\nhe find collision?",
    "start": "570950",
    "end": "577470"
  },
  {
    "text": "I have a cheating\nprover, p star. Does he find the\ncollision on index 1? Does he find the\ncollision on these 2?",
    "start": "577470",
    "end": "583370"
  },
  {
    "text": "This isn't an analysis. Once, and then\nthey establish, he must find collisions\non many indices.",
    "start": "583370",
    "end": "588700"
  },
  {
    "text": "And now, they're ready\nto break, the collision, the hash function. They just choose a random i and\nbreak by running the cheating",
    "start": "588700",
    "end": "596220"
  },
  {
    "text": "prover twice. So it's just a more\nefficient way of breaking it.",
    "start": "596220",
    "end": "604360"
  },
  {
    "text": "Instead of the prover running\nin time n, their prover, instead of the adversary\nrunning in time n because they--",
    "start": "604360",
    "end": "612400"
  },
  {
    "text": "in this proof, we ran the\ncheating prover n times or size of the PCP times, at least\ntimes 1 over epsilon,",
    "start": "612400",
    "end": "621270"
  },
  {
    "text": "they run it only\nsecurity parameter times divided by epsilon\nwith polynomial overhead.",
    "start": "621270",
    "end": "627480"
  },
  {
    "text": "But independent\nof n is the point. AUDIENCE: And that's what\nmakes the argument universal?",
    "start": "627480",
    "end": "633690"
  },
  {
    "text": "PROFESSOR: OK, good. You're asking what's that\nrelated to universal? Yeah, because the reason they\ncall it universal is because--",
    "start": "633690",
    "end": "643080"
  },
  {
    "text": "yeah, I guess the fact that\nit doesn't depend on n is-- because they talked about\nthe universal language that",
    "start": "643080",
    "end": "649310"
  },
  {
    "text": "has a Turing machine\nx and t, and it's in the language of those because\nit's a witness for-- this Turing",
    "start": "649310",
    "end": "654890"
  },
  {
    "text": "machine runs in time t, and they\ndidn't want things to blow up with t like they want. So this universal language what\nthey did-- so they want one hash",
    "start": "654890",
    "end": "662120"
  },
  {
    "text": "function that works\nfor this language. And t now is given in\nbinary in this language. So how can you have one hash\nfunction, one universal hash",
    "start": "662120",
    "end": "668720"
  },
  {
    "text": "family? And that's why the\nname universal. AUDIENCE: [INAUDIBLE]",
    "start": "668720",
    "end": "674000"
  },
  {
    "text": "PROFESSOR: Yeah. AUDIENCE: What is the\nname also of the paper-- PROFESSOR: The name of the\npaper is Universal Argument.",
    "start": "674000",
    "end": "679700"
  },
  {
    "text": "I'll link to it in the website. Yeah, it's not there yet. I only linked to Micali\nbut I'll link to it. It's a really nice-- it's\na really, really nice--",
    "start": "679700",
    "end": "687660"
  },
  {
    "text": "especially the overview\nexplains it very nicely. It explains the\nproof I gave here,",
    "start": "687660",
    "end": "693320"
  },
  {
    "text": "and it explains their\nproof in a very nice way. So I'll add a link.",
    "start": "693320",
    "end": "700189"
  },
  {
    "text": "OK, any other questions\nbefore we go and construct",
    "start": "700190",
    "end": "705660"
  },
  {
    "text": "the hash function? So let me-- oof. ",
    "start": "705660",
    "end": "715440"
  },
  {
    "text": "This is what I\nwant to construct. But any questions before we\ngo ahead and construct it?",
    "start": "715440",
    "end": "721800"
  },
  {
    "text": "OK, let's do it.  So what I'm going to do is\nI'm going to first construct",
    "start": "721800",
    "end": "731850"
  },
  {
    "text": "a hash function that's\nnot quite what I want,",
    "start": "731850",
    "end": "736870"
  },
  {
    "text": "but it's going to be a building\nblock to get what I want. And this hash function-- first,\nit doesn't have a local opening.",
    "start": "736870",
    "end": "745110"
  },
  {
    "text": "So it doesn't satisfy that. And second, it's not even\ngoes from 0, 1 star to 0,",
    "start": "745110",
    "end": "751290"
  },
  {
    "text": "1 to the lambda,\nwhich is what I want. It actually goes from 0, 1 to\nlambda to 0, 1 to the lambda.",
    "start": "751290",
    "end": "758260"
  },
  {
    "text": "So just shrinks a little bit. It doesn't shrink by\nan arbitrary amount. It just shrinks\nby a factor of 2.",
    "start": "758260",
    "end": "763970"
  },
  {
    "text": "That's it. And it doesn't\nhave local opening. So it's a bit of pathetic,\nbut we'll do that first.",
    "start": "763970",
    "end": "771650"
  },
  {
    "text": "And then we'll show how to\nuse that to get what we want. So the first-- so\nnow we're going",
    "start": "771650",
    "end": "776830"
  },
  {
    "text": "to talk about constructions. ",
    "start": "776830",
    "end": "789640"
  },
  {
    "text": "So let me first show you\na construction based-- so all of cryptography, in\nparticular, the hash functions,",
    "start": "789640",
    "end": "796360"
  },
  {
    "text": "are based on assumptions,\nan assumption that some math problem is hard.",
    "start": "796360",
    "end": "801589"
  },
  {
    "text": "And we know how to construct\ncollision-resistant hash functions from a\nbunch of assumptions,",
    "start": "801590",
    "end": "807170"
  },
  {
    "text": "many, many assumptions. I'm going to show you one that's\njust very simple and based",
    "start": "807170",
    "end": "812710"
  },
  {
    "text": "on the discrete log problem. So the discrete log problem just\nsays that there is some group.",
    "start": "812710",
    "end": "818900"
  },
  {
    "text": "You can think of zp star, so\neverything multiplication mod p.",
    "start": "818900",
    "end": "825050"
  },
  {
    "text": "But in general, there\nis a group such that-- so this is the discrete\nlog assumption.",
    "start": "825050",
    "end": "831816"
  },
  {
    "text": " This is what we're relying on\nthe hardness of this problem",
    "start": "831816",
    "end": "838490"
  },
  {
    "text": "that says that given a group\nG of order, order meaning",
    "start": "838490",
    "end": "850940"
  },
  {
    "text": "number of elements, let's\nsay, 2 to the lambda. So it has 2 to the\nlambda elements.",
    "start": "850940",
    "end": "857040"
  },
  {
    "text": "So I have a family of groups. And given a generator,\nG, so every element--",
    "start": "857040",
    "end": "870529"
  },
  {
    "text": "think of multiplicative\ngroups, OK? So this group is\nlike G to the x.",
    "start": "870530",
    "end": "879100"
  },
  {
    "text": "So for all the group is of form\nG generates the entire group.",
    "start": "879100",
    "end": "885639"
  },
  {
    "text": "The assumption is-- so\ngiven a group of order-- so it's a finite group with\n2 to the lambda elements,",
    "start": "885640",
    "end": "891770"
  },
  {
    "text": "so more or less to the lambdas. And the assumption is\nthat given a random, given",
    "start": "891770",
    "end": "897670"
  },
  {
    "text": "G to the x for a random x,\ntake a random x in the group,",
    "start": "897670",
    "end": "906430"
  },
  {
    "text": "like in the size of the\ngroup, given G to the x,",
    "start": "906430",
    "end": "912220"
  },
  {
    "text": "it's hard to find x.  That's the assumption.",
    "start": "912220",
    "end": "918110"
  },
  {
    "text": "So in other words, for any\npoly lambda adversary A,",
    "start": "918110",
    "end": "927100"
  },
  {
    "text": "the probability-- there exists a\nnegligible function,",
    "start": "927100",
    "end": "933339"
  },
  {
    "text": "the probability that A-- A knows G and P and the group.",
    "start": "933340",
    "end": "939710"
  },
  {
    "text": "These are kind of fixed. The generator of\nthe group is fixed. He gets G to the\nx for a random x.",
    "start": "939710",
    "end": "946360"
  },
  {
    "text": " And the probability that he\ncan find x is negligible.",
    "start": "946360",
    "end": "954196"
  },
  {
    "text": " And usually, we think of\nthese groups as-- an element",
    "start": "954196",
    "end": "959839"
  },
  {
    "text": "of the group is described by-- so any group-- any element\nof the group you can describe as an element for every H and\nG, you can think of H as being",
    "start": "959840",
    "end": "971690"
  },
  {
    "text": "in 01 to the lambda. You can describe it as\nefficiently in lambda bits.",
    "start": "971690",
    "end": "976920"
  },
  {
    "text": "And just think of zp\nstar if you want as-- all the elements mod P\nwith multiplication mod",
    "start": "976920",
    "end": "982490"
  },
  {
    "text": "P. That's an example. So this is the assumption. Now, some groups this holds.",
    "start": "982490",
    "end": "989029"
  },
  {
    "text": "Some groups it doesn't hold, OK? For example, you can\nthink of it as in a group, in the additive group,\nmod P, this is false.",
    "start": "989030",
    "end": "996870"
  },
  {
    "text": "But in the multiplicative group,\nwe believe that it's true. Is it really true? We don't know. We don't actually know.",
    "start": "996870",
    "end": "1001980"
  },
  {
    "text": "We believe it's true,\nand we base cryptography on this assumption. So we base cryptography on\nthe fact that in zp star,",
    "start": "1001980",
    "end": "1009920"
  },
  {
    "text": "if you take elements in the\nmultiplicative group zp star mod",
    "start": "1009920",
    "end": "1015110"
  },
  {
    "text": "p, then if I give you a random-- if you take a\ngenerator of this group",
    "start": "1015110",
    "end": "1021200"
  },
  {
    "text": "and you raise it to the\npower of a random element, if I give you a random\nelement in the group,",
    "start": "1021200",
    "end": "1026430"
  },
  {
    "text": "essentially, then finding the\ndiscrete log we believe is hard. Yeah. AUDIENCE: Do we\nknow if quantum--",
    "start": "1026430",
    "end": "1034559"
  },
  {
    "text": "there's a easy way\nfor quantum to break-- PROFESSOR: Good, yeah, so OK,\nI say we believe it's hard. Why we believe it's\nhard, I have no idea.",
    "start": "1034560",
    "end": "1042209"
  },
  {
    "text": "I think the only reason\nwe believe it's hard is because we don't\nknow how to break it.",
    "start": "1042210",
    "end": "1047400"
  },
  {
    "text": "That's really it because\nquantum computers can break it. They're subexponential\nalgorithms.",
    "start": "1047400",
    "end": "1054440"
  },
  {
    "text": "And if we didn't think\nwe were that smart, we would have think it's\neasy because every evidence",
    "start": "1054440",
    "end": "1061060"
  },
  {
    "text": "we have is that\nit's not that hard. But because we don't know\nhow to break it and we think we're pretty smart, then we--",
    "start": "1061060",
    "end": "1068650"
  },
  {
    "text": "But no, the truth is\nreally I have no evidence for why this problem is hard.",
    "start": "1068650",
    "end": "1074780"
  },
  {
    "text": "The only evidence\nwe have is that we didn't succeed in breaking it. There's no other evidence--",
    "start": "1074780",
    "end": "1080560"
  },
  {
    "text": "the fact that it can be broken-- it can be broken in polynomial\ntime by quantum computers, yeah.",
    "start": "1080560",
    "end": "1086890"
  },
  {
    "text": "And even classically, we have\nsubexponential algorithms. So we have some nontrivial\nalgorithms for doing it",
    "start": "1086890",
    "end": "1095889"
  },
  {
    "text": "but not in polynomial time. The best algorithms are\nsomething like time 2 to the n to the third or\nsomething like that.",
    "start": "1095890",
    "end": "1102010"
  },
  {
    "text": " But this is the problem.",
    "start": "1102010",
    "end": "1107320"
  },
  {
    "text": "So now let me go\nto the construction of our hash function. So I'm going to fix a\ngroup of prime order.",
    "start": "1107320",
    "end": "1118980"
  },
  {
    "text": "For the construction, I'm\ngoing to assume that I have a group of prime order.",
    "start": "1118980",
    "end": "1125115"
  },
  {
    "text": "I'm going to tell you how I\nfind the group in prime order in a second, but\nthink of a group that has a number of elements\nin the group is prime.",
    "start": "1125115",
    "end": "1132300"
  },
  {
    "text": "So let G be a group\nof prime order, which",
    "start": "1132300",
    "end": "1142700"
  },
  {
    "text": "just means that the number\nof elements in G is prime. That's all it means.",
    "start": "1142700",
    "end": "1149160"
  },
  {
    "text": "And now here's my-- and now, every element except\nfor the unit now is a generator.",
    "start": "1149160",
    "end": "1154650"
  },
  {
    "text": "So it's easy to find\ngenerators here. And now here's my hash function. My hash function depends on G\nand hash-- so what's the key?",
    "start": "1154650",
    "end": "1168410"
  },
  {
    "text": "OK, so we have a generator G.\nYou can think of G as fixed. That's just a generator. ",
    "start": "1168410",
    "end": "1175206"
  },
  {
    "text": "If you want, you can\nchoose it also randomly because any element\nis a generator here. H has a key, so--",
    "start": "1175207",
    "end": "1182080"
  },
  {
    "text": "OK, so now the hash function. So gen and 1 to the lambda.",
    "start": "1182080",
    "end": "1188500"
  },
  {
    "text": "This is like sub lambda. What it does is\nit chooses random",
    "start": "1188500",
    "end": "1193620"
  },
  {
    "text": "H and G, a random element. That's what it does. That's the key, OK?",
    "start": "1193620",
    "end": "1199660"
  },
  {
    "text": "So hash key is just H,\njust the random element.",
    "start": "1199660",
    "end": "1205320"
  },
  {
    "text": "Eval, so eval takes as input--",
    "start": "1205320",
    "end": "1210330"
  },
  {
    "text": "before, we set eval takes as\ninput hash key any x, any x.",
    "start": "1210330",
    "end": "1216399"
  },
  {
    "text": "Now, no-- now less. So that's what I'm saying. Let me denote the number\nof elements in G by q.",
    "start": "1216400",
    "end": "1224010"
  },
  {
    "text": "Now, eval takes as\ninput a hash key and x.",
    "start": "1224010",
    "end": "1229150"
  },
  {
    "text": "But now, x is not everything. It's just in zq times zq.",
    "start": "1229150",
    "end": "1234740"
  },
  {
    "text": "So it's bounded. Later, we'll show how\nto get everything, but for now I'm bounded. It goes from zq to zq.",
    "start": "1234740",
    "end": "1241770"
  },
  {
    "text": "And what it does, it generates-- so let me call it x0 and\nx1 because it has a pair.",
    "start": "1241770",
    "end": "1250920"
  },
  {
    "text": "And what it does, it gives\nyou G to the x0 times H to the x1 in the group,\nmultiplication in the group.",
    "start": "1250920",
    "end": "1264488"
  },
  {
    "text": "That's the hash function. So this is an element in G.",
    "start": "1264488",
    "end": "1272360"
  },
  {
    "text": "OK, this is the hash function. Now, why is it even shrinking? Because this is-- the\ngroup has only q elements.",
    "start": "1272360",
    "end": "1281669"
  },
  {
    "text": "So it's like this is q elements,\nand this is 2Q elements.",
    "start": "1281670",
    "end": "1287280"
  },
  {
    "text": "This is 1 out of\nq, and this is-- you have one out of-- you can\nthink of G as embedded in like--",
    "start": "1287280",
    "end": "1293580"
  },
  {
    "text": "you can think of G\nas isomorphic to zq.",
    "start": "1293580",
    "end": "1299269"
  },
  {
    "text": " So if you think of q, if you\ncan think of q as like in 0,",
    "start": "1299270",
    "end": "1308622"
  },
  {
    "text": "1 to the lambda,\nthen here you have 2, 0, 1, like 0 to the 2 lambda.",
    "start": "1308622",
    "end": "1313830"
  },
  {
    "text": "But let me actually make\nit more concrete for you. So it'll be just easier to\nthink about it because I said a generator-- let\nme just prime--",
    "start": "1313830",
    "end": "1321300"
  },
  {
    "text": "let me just give you\nthe concrete example you can think of. Look at zp star, so just\nmultiplication mod p,",
    "start": "1321300",
    "end": "1329070"
  },
  {
    "text": "where p is a safe prime. Safe prime I mean it's 2q\nplus 1 where q is prime.",
    "start": "1329070",
    "end": "1335390"
  },
  {
    "text": " OK there's a lot of safe primes. So it's easy--\nchoose one at random.",
    "start": "1335390",
    "end": "1344200"
  },
  {
    "text": "Check if it's safe. You can check primality. And if you choose enough\ntimes, you'll hit a safe one.",
    "start": "1344200",
    "end": "1350800"
  },
  {
    "text": "There are enough of them to\nhit one with good probability. And now, G is just\ngoing to be the set",
    "start": "1350800",
    "end": "1358000"
  },
  {
    "text": "of quadratic residues, mod p. So this is all the x squared mod\np for x in 1 up to p minus 1,",
    "start": "1358000",
    "end": "1375070"
  },
  {
    "text": "all the squares. OK, how many squares are there? Like half.",
    "start": "1375070",
    "end": "1380419"
  },
  {
    "text": "So zp star has p minus 1\nelements, 1 up to p minus 1. And half of them are square.",
    "start": "1380420",
    "end": "1386990"
  },
  {
    "text": "So the number of quadratic\nresidues is p minus 1 over 2, which is exactly q.",
    "start": "1386990",
    "end": "1393850"
  },
  {
    "text": "So really, one can\nthink if you want to be-- think of the\nquadratic residue as mod p.",
    "start": "1393850",
    "end": "1400180"
  },
  {
    "text": "OK, that's-- so this-- great, so now you\ncan think of this",
    "start": "1400180",
    "end": "1406660"
  },
  {
    "text": "is all the quadratic residues. This is all the\nquadratic residues. And sorry, sorry, this is in zq.",
    "start": "1406660",
    "end": "1413730"
  },
  {
    "text": "This is in zq. This is quadratic\nresidues, mod p. And you can embed the quadratic\nresidues mod p very easily.",
    "start": "1413730",
    "end": "1423270"
  },
  {
    "text": "You can embed them in zq. You can represent each\nelement here in zq. How?",
    "start": "1423270",
    "end": "1428510"
  },
  {
    "text": "Take any quadratic residue. Find the two square roots. So if you have x, it's\na quadratic residue.",
    "start": "1428510",
    "end": "1434070"
  },
  {
    "text": "So look at plus or\nminus square root of x. One of them is going\nto be smaller than q.",
    "start": "1434070",
    "end": "1439895"
  },
  {
    "text": "One is going to be bigger, one's\ngoing to be in the upper half, one's going to be\nin the lower half. Write the one that's\nin the lower half.",
    "start": "1439895",
    "end": "1445710"
  },
  {
    "text": "That's a way to express the\nquadratic residues as zq. The reason I'm telling\nyou that is because I",
    "start": "1445710",
    "end": "1451940"
  },
  {
    "text": "want you to think that-- you can think of it as a hash\nfunction that goes from zq times zq to zq, OK, because\nyou go from zq to zq",
    "start": "1451940",
    "end": "1459740"
  },
  {
    "text": "to quadratic residues,\nmod p, and then just efficiently convert\nthis to the square root.",
    "start": "1459740",
    "end": "1467270"
  },
  {
    "text": "Which one? The one that's smaller, the\none that's between 1 and q. And that will be the output.",
    "start": "1467270",
    "end": "1474216"
  },
  {
    "text": "You can go from one to the\nother very efficiently. So this is a way to represent\nthe quadratic residue.",
    "start": "1474217",
    "end": "1479510"
  },
  {
    "text": "So it doesn't really matter, OK? And the reason I'm representing\nthe quadratic residue",
    "start": "1479510",
    "end": "1484600"
  },
  {
    "text": "as an element in zq is just\nso you see that it's really shrinking, that you can\nsee, OK, I have from zq",
    "start": "1484600",
    "end": "1489790"
  },
  {
    "text": "to zq, from zq times zq to zq. That's my hash function. OK, the fact that it\ngoes from zq times",
    "start": "1489790",
    "end": "1497740"
  },
  {
    "text": "zq to zq, I'm literally going\nto use this fact to increase the domain to 0, 1 star.",
    "start": "1497740",
    "end": "1507399"
  },
  {
    "text": "But before I\nincrease the domain, why is this a hash function?",
    "start": "1507400",
    "end": "1513070"
  },
  {
    "text": "So in other words, what do I\nneed from the hash function? Well, there's no opening here,\nso it's not a local opening.",
    "start": "1513070",
    "end": "1519020"
  },
  {
    "text": "So this doesn't hold. But I want to make sure that\nit's collision-resistant. Why is it collision-resistant?",
    "start": "1519020",
    "end": "1524270"
  },
  {
    "text": "So I want to argue that I cannot\nopen if someone gives me-- if an adversary gave me\na value, a hash value,",
    "start": "1524270",
    "end": "1535580"
  },
  {
    "text": "he cannot open in\ntwo different ways. So let me actually try to argue\nthat you cannot open in two",
    "start": "1535580",
    "end": "1540679"
  },
  {
    "text": "different ways.  I'll do it here.",
    "start": "1540680",
    "end": "1546050"
  },
  {
    "text": "So why?  Suppose there is a\ncheating prover that",
    "start": "1546050",
    "end": "1551990"
  },
  {
    "text": "can open in two different ways. Then I argue that I can break\nthe discrete log problem. I can just use them to break\nthe discrete log problem.",
    "start": "1551990",
    "end": "1558779"
  },
  {
    "text": "Why? So let's say I get\nH. I'm an adversary. There's this G,\nand I got hash key.",
    "start": "1558780",
    "end": "1569810"
  },
  {
    "text": "Sorry, I'm going to do\nadversary discrete log. So I got H, which is\nsupposedly like G to the x.",
    "start": "1569810",
    "end": "1575720"
  },
  {
    "text": "I'm going to find x. Here's how I find x.",
    "start": "1575720",
    "end": "1580880"
  },
  {
    "text": "I got H. I'm going to give\nthis adversary here the-- so if I can find a collision, so\nsuppose there exists a collision",
    "start": "1580880",
    "end": "1592193"
  },
  {
    "text": "finder--  let me call him B--",
    "start": "1592193",
    "end": "1598559"
  },
  {
    "text": "then I construct A that uses\nB to break the discrete log.",
    "start": "1598560",
    "end": "1604510"
  },
  {
    "text": "How do I break the discrete log? He gets H. He needs to find x.",
    "start": "1604510",
    "end": "1610080"
  },
  {
    "text": "Yeah, he has G. He gets\nhis input H. He needs to find the discrete log of H. How does he find\nthe discrete log?",
    "start": "1610080",
    "end": "1615587"
  },
  {
    "text": "He goes to the collision finder. Let me write him\nas C for collision. That's better.",
    "start": "1615587",
    "end": "1621390"
  },
  {
    "text": "He goes to the collision finder,\nand he tells me, oh, here's your key. Hash key equals H. Now\nfind the collision.",
    "start": "1621390",
    "end": "1630870"
  },
  {
    "text": "Now we find the collision. It's a V and two inputs. So I don't know. ",
    "start": "1630870",
    "end": "1639340"
  },
  {
    "text": "He gives a V and two\nopenings, so two inputs. So let me call one x0,\nx1 and other x0 prime, x1",
    "start": "1639340",
    "end": "1649550"
  },
  {
    "text": "prime, such that-- ",
    "start": "1649550",
    "end": "1656750"
  },
  {
    "text": "this is a preimage and\nthis is a preimage. So g to the x0 H to the x1 is\nequal to G to the x0 prime H",
    "start": "1656750",
    "end": "1666770"
  },
  {
    "text": "to the x1 prime. That's a collision. Now I claim, if\nhe gives me this,",
    "start": "1666770",
    "end": "1674190"
  },
  {
    "text": "I can use this to find\nthe discrete log of H with respect to G. How?",
    "start": "1674190",
    "end": "1679970"
  },
  {
    "text": "I just-- what is this? This is just G x0 minus x0 prime\nequals H x1 prime minus x1.",
    "start": "1679970",
    "end": "1689070"
  },
  {
    "text": "I just moved arithmetic. And now, H is nothing but G to\nthe x0 minus x0 prime divided",
    "start": "1689070",
    "end": "1699650"
  },
  {
    "text": "by x1 prime minus x1. This is the discrete log.",
    "start": "1699650",
    "end": "1706260"
  },
  {
    "text": "Done. So what is the discrete--\nhe gives me a collision.",
    "start": "1706260",
    "end": "1712030"
  },
  {
    "text": "What is the discrete log\nof H with respect to G? It's just x0 minus x0 prime\ndivided by x1 prime minus x1.",
    "start": "1712030",
    "end": "1721250"
  },
  {
    "text": " Now, where did I use the\nfact that the G-- remember,",
    "start": "1721250",
    "end": "1728250"
  },
  {
    "text": "I said G needs to be\na prime order group. Where did I use the fact\nthat it's a prime order?",
    "start": "1728250",
    "end": "1733360"
  },
  {
    "text": "Because this-- you compute this\nmod q, the order of the group.",
    "start": "1733360",
    "end": "1740860"
  },
  {
    "text": "If it's not a prime order,\nit's not clear you can divide. Not every element has\nan inverse if you're not",
    "start": "1740860",
    "end": "1746789"
  },
  {
    "text": "in a prime order group. So I want it to be in\na prime order group so that every element\nhas an inverse.",
    "start": "1746790",
    "end": "1751872"
  },
  {
    "text": "Now, another thing\nyou need to make sure is that one can say, wait,\nx1 prime may be equal to x1.",
    "start": "1751873",
    "end": "1757530"
  },
  {
    "text": "And then again\nyou're out of luck. But if this-- if\nthese are equal,",
    "start": "1757530",
    "end": "1764300"
  },
  {
    "text": "then these have to be equal\nbecause if these are equal means this is 1. And the only case\nwhere G to the power",
    "start": "1764300",
    "end": "1771160"
  },
  {
    "text": "is 1 if it's the power of\n0 because it's a generator. Any other element is not 1.",
    "start": "1771160",
    "end": "1777340"
  },
  {
    "text": "So if they're different,\nif these two are different,",
    "start": "1777340",
    "end": "1782440"
  },
  {
    "text": "that's what a collision means. Then x1 prime must\nbe different from x1.",
    "start": "1782440",
    "end": "1787669"
  },
  {
    "text": "And therefore, we can divide. And we're done. ",
    "start": "1787670",
    "end": "1793600"
  },
  {
    "text": "So this is the proof that\nthis is a collision resistant. ",
    "start": "1793600",
    "end": "1802000"
  },
  {
    "text": "OK, any questions?  Yeah.",
    "start": "1802000",
    "end": "1807760"
  },
  {
    "text": "AUDIENCE: Do you have any\nway to sample H during gen?",
    "start": "1807760",
    "end": "1813010"
  },
  {
    "text": "PROFESSOR: Do I have-- again? AUDIENCE: A way to sample H\nduring the generation of-- PROFESSOR: What do\nyou-- what do you mean--",
    "start": "1813010",
    "end": "1818942"
  },
  {
    "text": "what do you mean to-- AUDIENCE: To just take H-- the element without necessarily\nlearning something about.",
    "start": "1818942",
    "end": "1824440"
  },
  {
    "text": "PROFESSOR: So H is just, I\nchoose it randomly from G. The key generation algorithm\nof the hash function, H",
    "start": "1824440",
    "end": "1831150"
  },
  {
    "text": "is just a random\nelement in the group. So if you use this specific\ngroup, you choose zp star,",
    "start": "1831150",
    "end": "1840809"
  },
  {
    "text": "all the elements mod P,\nwhere P is a safe prime. You make sure P is a safe prime. And the way you choose h is\na random quadratic residue.",
    "start": "1840810",
    "end": "1849040"
  },
  {
    "text": "So I choose a random x,\nand x squared is my H. So the key gen algorithm\nis very simple.",
    "start": "1849040",
    "end": "1856660"
  },
  {
    "text": "And note, by the way, here you\ncan indeed-- it's also random. There's no secret-- going back\nto the Kilian-Micali protocol,",
    "start": "1856660",
    "end": "1865259"
  },
  {
    "text": "that the first message\nhash key is just random. It's random quadratic residue. There's no secret.",
    "start": "1865260",
    "end": "1870930"
  },
  {
    "text": "You can send the randomness. There's no secrets in the hash\nkey or anything like that.",
    "start": "1870930",
    "end": "1876030"
  },
  {
    "text": "It's a very, very, very\nsimple construction. This is, by the way, known as\nPettersson Commitment for those",
    "start": "1876030",
    "end": "1881710"
  },
  {
    "text": "who studied cryptography. It also has some hiding\nproperties, which are nice,",
    "start": "1881710",
    "end": "1887420"
  },
  {
    "text": "but we only care about\ncollision resistance here. So we don't care about hiding. ",
    "start": "1887420",
    "end": "1894070"
  },
  {
    "text": "Any other questions\nabout why it's collision resistant, about a construction?",
    "start": "1894070",
    "end": "1900496"
  },
  {
    "text": " So let me just say,\nby the way, as a side",
    "start": "1900496",
    "end": "1907120"
  },
  {
    "text": "note, these kind of\ngroups of prime order, in particular quadratic residues\nmod P, where P is a safe prime,",
    "start": "1907120",
    "end": "1913660"
  },
  {
    "text": "is a very useful of group. We use it a lot in cryptography.",
    "start": "1913660",
    "end": "1918669"
  },
  {
    "text": "So it comes up in\nmany, many primitives. Working with groups of prime\norder is very comfortable.",
    "start": "1918670",
    "end": "1924710"
  },
  {
    "text": "And the examples we have often\nis either quadratic residues mod P, where P is a\nprime order group,",
    "start": "1924710",
    "end": "1930020"
  },
  {
    "text": "or elliptic curves, which\nis a whole different story. OK, so the next-- oh, yeah.",
    "start": "1930020",
    "end": "1937363"
  },
  {
    "text": "AUDIENCE: So all of [? this ?]\nprime order are isomorphic, right? They're all just cyclic? PROFESSOR: Yeah. AUDIENCE: So the special thing\nis in the actual structure",
    "start": "1937363",
    "end": "1944188"
  },
  {
    "text": "of the group. It's like the representation\nof the elements or something. And the way that it's like-- yeah, you can't-- even though\nit is isomorphic to the cyclic",
    "start": "1944188",
    "end": "1953179"
  },
  {
    "text": "group definition, you can't\ncompute that [INAUDIBLE]. PROFESSOR: Exactly,\nexactly, exactly.",
    "start": "1953180",
    "end": "1958470"
  },
  {
    "text": "Yeah, isomorphic is an\ninformation theoretic term. It's not clear that\nyou can efficiently go from one to the other.",
    "start": "1958470",
    "end": "1964200"
  },
  {
    "text": "Yeah, exactly, exactly. Good. Good point. Yeah. OK, so if there's no\nfurther questions,",
    "start": "1964200",
    "end": "1970980"
  },
  {
    "text": "let's just go to\nshow how to go-- how to get local-- how to go\nfrom collision-resistant to one",
    "start": "1970980",
    "end": "1979160"
  },
  {
    "text": "with local opening. So OK, this fell\nshort in two ways. First, this construction goes\nonly from zq time zq to zq.",
    "start": "1979160",
    "end": "1988980"
  },
  {
    "text": "It doesn't go from\n0, 1 star to zq. Second, there's no\nnotion of local opening,",
    "start": "1988980",
    "end": "1996250"
  },
  {
    "text": "which is also a problem. So what we're going to do\nnow is we're going to show,",
    "start": "1996250",
    "end": "2001530"
  },
  {
    "text": "actually, a generic\ntransformation from any hash function\nthat goes from zq times zq",
    "start": "2001530",
    "end": "2009659"
  },
  {
    "text": "to zq that's collision\nresistant to the one takes to what we want.",
    "start": "2009660",
    "end": "2016986"
  },
  {
    "text": "So now we're going to\ndo the construction from with local opening\nand arbitrary domain.",
    "start": "2016986",
    "end": "2023520"
  },
  {
    "text": "And here is how it goes. ",
    "start": "2023520",
    "end": "2030419"
  },
  {
    "text": "So-- and this is from--",
    "start": "2030420",
    "end": "2044910"
  },
  {
    "text": "I'm going to assume I have-- ",
    "start": "2044910",
    "end": "2050219"
  },
  {
    "text": "which is gen and\neval like above. But eval goes-- let's say--",
    "start": "2050219",
    "end": "2057010"
  },
  {
    "text": "I said zq times zq to zq. Let me just write it as 0,\n1 to the lambda times 0,",
    "start": "2057010",
    "end": "2062529"
  },
  {
    "text": "1 to the lambda to\n0, 1 to the lambda. I'm writing it because that's\nhow we usually write it,",
    "start": "2062530",
    "end": "2068419"
  },
  {
    "text": "but if you want to\nthink of zq, zq, zq, that's totally fine\nbecause that's what we saw.",
    "start": "2068420",
    "end": "2075260"
  },
  {
    "text": "It's just that most\nconstructions of hash, we think of it as\n0, 1 to the lambda. That's why I write it this way.",
    "start": "2075260",
    "end": "2081148"
  },
  {
    "text": "But everything I say you can\nreplace 0, 1 to the lambda with zq, and it will work. So I have that.",
    "start": "2081148",
    "end": "2087230"
  },
  {
    "text": "I want to now get an entire\nfamily of hash functions from-- I want to make the\ndomain much bigger,",
    "start": "2087230",
    "end": "2094070"
  },
  {
    "text": "and I want to get\nlocal openings. So how do I do it? Actually, I do it\nin one shot, OK?",
    "start": "2094070",
    "end": "2099490"
  },
  {
    "text": "I get the domain bigger and get\nlocal opening at the same time. And here is the idea. So I do it via what's\ncalled Merkle Hash.",
    "start": "2099490",
    "end": "2107349"
  },
  {
    "text": "It's an idea by Merkle. It's really beautiful,\nclever, and simple.",
    "start": "2107350",
    "end": "2113540"
  },
  {
    "text": "And here's what he does. He says, look, you\nwant to hash something. If it's less than 2\nlambda bits long, done.",
    "start": "2113540",
    "end": "2121733"
  },
  {
    "text": "You have a hash. Use your hash. But what if it's longer, if\nit's more than 2 lambda bits?",
    "start": "2121733",
    "end": "2127520"
  },
  {
    "text": "So do it iteratively. What does that mean? Take your input.",
    "start": "2127520",
    "end": "2134540"
  },
  {
    "text": "Let's say-- OK, sorry. First gen, so let me-- the gen\nis exactly the same as gen.",
    "start": "2134540",
    "end": "2140510"
  },
  {
    "text": "It's the same thing. Eval is-- so I need to\ngive these algorithms, gen, eval, open, and verify.",
    "start": "2140510",
    "end": "2146795"
  },
  {
    "text": "Gen is this gen. You have\na gen for this algorithm. Use this. Now you have a hash key.",
    "start": "2146795",
    "end": "2152190"
  },
  {
    "text": "What about eval? Well, if your input is\nsmall, smaller than 2 lambda, you can use this eval algorithm.",
    "start": "2152190",
    "end": "2158400"
  },
  {
    "text": "You're done. What if it's bigger? So if it's bigger, the idea\nis, if you have only-- so",
    "start": "2158400",
    "end": "2165980"
  },
  {
    "text": "convert your input to blocks. If you have only two blocks\nor less, you're done.",
    "start": "2165980",
    "end": "2174040"
  },
  {
    "text": "We have an eval\nalgorithm for you. We're good. But what if you have,\nlet's say, four blocks?",
    "start": "2174040",
    "end": "2180220"
  },
  {
    "text": "What do you do? So the idea is oh, don't\nworry, apply eval to these two. ",
    "start": "2180220",
    "end": "2188190"
  },
  {
    "text": "So you have a hash key. Compute eval with hash\nkey and these two.",
    "start": "2188190",
    "end": "2196050"
  },
  {
    "text": "You get a value. Compute eval with hash key,\nsame hash key on these values.",
    "start": "2196050",
    "end": "2207645"
  },
  {
    "text": "Now, I don't want to open-- I don't want to\noutput both of them. That's 2 lambda. I want to get lambda.",
    "start": "2207645",
    "end": "2213840"
  },
  {
    "text": "So no worries. Apply eval. ",
    "start": "2213840",
    "end": "2224040"
  },
  {
    "text": "And this is your value. Now you're saying, wait,\nwhat if I have more?",
    "start": "2224040",
    "end": "2229710"
  },
  {
    "text": "No worries. You have two more? Sure, apply eval. You have more?",
    "start": "2229710",
    "end": "2235369"
  },
  {
    "text": "Apply eval. Now you can apply eval,\nand you can apply eval.",
    "start": "2235370",
    "end": "2243950"
  },
  {
    "text": "So you can just apply eval,\neval, eval, and you're done. That's really the algorithm.",
    "start": "2243950",
    "end": "2251150"
  },
  {
    "text": "Now, there are two\nproblems with the-- OK, I didn't tell the entire\nstory for two reasons.",
    "start": "2251150",
    "end": "2258830"
  },
  {
    "text": "So first of all,\nthere's an issue of how many blocks\nare there really? So usually, what we\ndo, we say let's assume",
    "start": "2258830",
    "end": "2266210"
  },
  {
    "text": "that the number of blocks\nis 2 to the L for some L just to make this tree complete.",
    "start": "2266210",
    "end": "2273210"
  },
  {
    "text": "So usually, what we\nsay, we don't actually do x from 0, 1 star.",
    "start": "2273210",
    "end": "2279089"
  },
  {
    "text": "We assume that\nall the inputs are of size 2 to the L for some\nL. Now you're saying wait, but that's not the case.",
    "start": "2279090",
    "end": "2285000"
  },
  {
    "text": "Oh, with padding, you\ncan make it the case. So the idea is,\ngiven x, always put--",
    "start": "2285000",
    "end": "2292380"
  },
  {
    "text": "so you want to do eval of x. Don't do eval of x. Put eval x.",
    "start": "2292380",
    "end": "2297510"
  },
  {
    "text": "Append with 1 and 0's. How many zeros is\nthe minimum amount",
    "start": "2297510",
    "end": "2303250"
  },
  {
    "text": "that will give you size 2\nto the alpha for some L? It increased the length of it,\nyes, but only by a factor of 2.",
    "start": "2303250",
    "end": "2312660"
  },
  {
    "text": "So it's not that bad. So now-- AUDIENCE: [INAUDIBLE] 1? PROFESSOR: OK, good.",
    "start": "2312660",
    "end": "2318310"
  },
  {
    "text": "Great. Like, why am I putting here 1? AUDIENCE: Otherwise, you\ndon't know [INAUDIBLE].",
    "start": "2318310",
    "end": "2324120"
  },
  {
    "text": "PROFESSOR: Exactly. Otherwise, you don't know. Is this part of\nx or [INAUDIBLE]? So this-- so now\nwhen you have padding",
    "start": "2324120",
    "end": "2330720"
  },
  {
    "text": "you know all this is padding\nuntil the one including, and this is the x. So this is just\nto make it 1 to 1.",
    "start": "2330720",
    "end": "2337540"
  },
  {
    "text": "Great question. Yes. AUDIENCE: Does it cause\nissues if you take this tree and you pad it this way and you\nwere very close but only barely",
    "start": "2337540",
    "end": "2344370"
  },
  {
    "text": "above a power of 2? The entire right-hand side\nwill be a ton of hashed 0's. PROFESSOR: Yeah, you're right.",
    "start": "2344370",
    "end": "2349660"
  },
  {
    "text": "So here's the thing. If this is exactly\npower of 2, exactly, I'm",
    "start": "2349660",
    "end": "2355180"
  },
  {
    "text": "always going to add\na 1 and append is-- so I shouldn't have added a 1.",
    "start": "2355180",
    "end": "2360470"
  },
  {
    "text": "But my algorithm is\nalways append a 1, and make it a power of 2. So if it was originally a power\nof 2, unfortunately, I added 1.",
    "start": "2360470",
    "end": "2367040"
  },
  {
    "text": "Now I'm stuck. I need to add a bunch of 0's. So all these are\ngoing to be 0's. Yeah, you hash that.",
    "start": "2367040",
    "end": "2372490"
  },
  {
    "text": "AUDIENCE: OK, I guess\nit just seemed-- OK, never mind. Maybe the rest of the\ninstruction will make it clear.",
    "start": "2372490",
    "end": "2379120"
  },
  {
    "text": "PROFESSOR: OK, so\nthere's another part of the construction that's\nmissing, and I'll tell you. But there was\nanother question, or?",
    "start": "2379120",
    "end": "2385210"
  },
  {
    "text": "AUDIENCE: I was just\nwondering if now this will not impact the correctness. PROFESSOR: OK, good. So the question was, will\nit impact the correctness?",
    "start": "2385210",
    "end": "2393410"
  },
  {
    "text": "And the answer is it won't\nimpact the correctness if the eval algorithm now--\nso let me be clear on what",
    "start": "2393410",
    "end": "2398560"
  },
  {
    "text": "the eval algorithm is. The eval algorithm\ntakes as input x. It adds a 1 and is\nthe minimum amount",
    "start": "2398560",
    "end": "2406799"
  },
  {
    "text": "of 0's to get a power of 2. Once he has x that's the\nlength is a power of 2,",
    "start": "2406800",
    "end": "2412990"
  },
  {
    "text": "like 2 to the L, then he does\neval, eval, eval, eval, eval, eval, eval in a\ntree-wise manner.",
    "start": "2412990",
    "end": "2420660"
  },
  {
    "text": "And now he's just\ngoing to have one root. The reason I made it because\nit's not a power of 2, then there's kind of\ndangling roots hanging out.",
    "start": "2420660",
    "end": "2429070"
  },
  {
    "text": "And I don't want to deal\nwith these dangling roots. So I'm just going to\nmake it a power of 2. Now, what is the output?",
    "start": "2429070",
    "end": "2435579"
  },
  {
    "text": "The output is the\nlast hash value. Usually, we denote it\nby root because it's the root of the tree.",
    "start": "2435580",
    "end": "2441157"
  },
  {
    "text": "So often, if you see\nhash you'll see-- they denote the hash\ninstead of V for value. They denote it by root.",
    "start": "2441157",
    "end": "2449220"
  },
  {
    "text": "But the output is not only root. And I think that goes back\nto maybe your concern. The output is not only root.",
    "start": "2449220",
    "end": "2454920"
  },
  {
    "text": "It's also the depth of the tree. So the hash value, so eval given\nhash key and x, what it does",
    "start": "2454920",
    "end": "2468069"
  },
  {
    "text": "is, one, compute, let me\ncall it x prime, which is x1,",
    "start": "2468070",
    "end": "2476920"
  },
  {
    "text": "0 like the padded. This is of length 2\nto the L for some L.",
    "start": "2476920",
    "end": "2482120"
  },
  {
    "text": "Then 2 compute root via tree.",
    "start": "2482120",
    "end": "2488970"
  },
  {
    "text": " So you compute all these hash\nvalue, hash value, hash value,",
    "start": "2488970",
    "end": "2494442"
  },
  {
    "text": "hash value, hash--\ncompute all these hash until you get to the root. And output root and\ndepth of the tree.",
    "start": "2494442",
    "end": "2509120"
  },
  {
    "text": "This is very important. You have to output the depth. If you don't output\nthe depth, then it's",
    "start": "2509120",
    "end": "2515950"
  },
  {
    "text": "easy to find collisions. The reason it's easy to find\ncollisions is I can, let's say,",
    "start": "2515950",
    "end": "2521340"
  },
  {
    "text": "generate this randomly. Compute, compute. And then I can either\nopen to these two",
    "start": "2521340",
    "end": "2526790"
  },
  {
    "text": "and say, oh, I just\nhashed to these. Or say I hash to this.",
    "start": "2526790",
    "end": "2531980"
  },
  {
    "text": "And it's a collision. Both of them hash\nto the same value. They're different sizes.",
    "start": "2531980",
    "end": "2537980"
  },
  {
    "text": "So without the depth, one can\nargue you cannot find collisions",
    "start": "2537980",
    "end": "2544550"
  },
  {
    "text": "of the same size,\nof the same length. But it is easy to\nfind collisions",
    "start": "2544550",
    "end": "2550010"
  },
  {
    "text": "for inputs of differing lengths\nby just the attack that I said. I'm an adversary.",
    "start": "2550010",
    "end": "2555210"
  },
  {
    "text": "I'm going to choose\na random long input. Honestly compute the root. And then open either\nto this layer,",
    "start": "2555210",
    "end": "2563070"
  },
  {
    "text": "say, or open to this\nlayer, open to this layer. All of them are going to\nbe kind of valid openings.",
    "start": "2563070",
    "end": "2569840"
  },
  {
    "text": "So I found collisions. Once I have the\ndepth, I can't do that anymore because it won't\ncorrespond if I open this, well,",
    "start": "2569840",
    "end": "2578720"
  },
  {
    "text": "it doesn't correspond\nto this depth. This is a depth 1,\nand I output a depth-- yeah.",
    "start": "2578720",
    "end": "2584380"
  },
  {
    "text": "AUDIENCE: The problem is\nthat this is no longer lambda length [INAUDIBLE].",
    "start": "2584380",
    "end": "2589660"
  },
  {
    "text": "PROFESSOR: Good,\nOK, OK, very good. What you're saying, yeah,\nyou lied because this root",
    "start": "2589660",
    "end": "2596799"
  },
  {
    "text": "is of size lambda. This depth can be actually\neven bigger than lambda.",
    "start": "2596800",
    "end": "2604300"
  },
  {
    "text": "Yeah, you promised lambda. OK, so let me tell you\nhow I deal with it.",
    "start": "2604300",
    "end": "2609910"
  },
  {
    "text": "If you're-- OK,\nthis is a nitpicky. I can make it lambda. How do I make it lambda?",
    "start": "2609910",
    "end": "2615300"
  },
  {
    "text": "You know what? I'm going to run-- here's my new gen algorithm. The gen algorithm on\ninput 1 to the lambda",
    "start": "2615300",
    "end": "2621520"
  },
  {
    "text": "will run the original gen\nalgorithm with lambda over 2. ",
    "start": "2621520",
    "end": "2628330"
  },
  {
    "text": "And then, this is of\nsize lambda over 2. A root now is of\nsize lambda over 2.",
    "start": "2628330",
    "end": "2634970"
  },
  {
    "text": "So now I have\nlambda over 2 t of, I have lambda over\n2 spare to play, and I can use this\nfor the depth.",
    "start": "2634970",
    "end": "2640833"
  },
  {
    "text": "But actually, you know what? Let me make it simpler. You know what? If you'll excuse me, I'll\nwrite V to be 2 lambda.",
    "start": "2640833",
    "end": "2648260"
  },
  {
    "text": "Make it 2 lambda. Let me allow myself here slack. ",
    "start": "2648260",
    "end": "2657704"
  },
  {
    "text": "AUDIENCE: Can the depth\nbe unbounded, though? PROFESSOR: Good, you're right. You're saying, wait, but\nthe depth can be unbounded.",
    "start": "2657705",
    "end": "2663359"
  },
  {
    "text": "So you know what? If it's more than\n2 to the lambda-- sorry, if the depth is more\nthan lambda, I will output fail.",
    "start": "2663360",
    "end": "2676850"
  },
  {
    "text": "The point is-- OK, so-- OK.",
    "start": "2676850",
    "end": "2681993"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]  PROFESSOR: Let's do\n2 to the lambda here.",
    "start": "2681993",
    "end": "2690050"
  },
  {
    "text": "I always think of everything. The inputs are always at\nmost size 2 to the lambda.",
    "start": "2690050",
    "end": "2695970"
  },
  {
    "text": "That's the truth. So just think of the input. We also have correctness\nonly for inputs of size 2 to the lambda.",
    "start": "2695970",
    "end": "2701730"
  },
  {
    "text": "Our guarantees hold only for\ninputs of size 2 to the lambda. So let's just think of it\nas size 2 to the lambda.",
    "start": "2701730",
    "end": "2707018"
  },
  {
    "text": "You're right. If it's not 2 to the lambda,\nI don't have any guarantees. So why even talk about\nmore than 2 to the lambda?",
    "start": "2707018",
    "end": "2713850"
  },
  {
    "text": "So I guess the way\nto think about it, you can handle any input\nlength, but the security",
    "start": "2713850",
    "end": "2720300"
  },
  {
    "text": "parameter-- the\nhash function will grow with log the input length.",
    "start": "2720300",
    "end": "2729780"
  },
  {
    "text": "So you're right. You're right. If you want to use\nany star, you should-- let's think of that always\nbounded by 2 to the lambda.",
    "start": "2729780",
    "end": "2735490"
  },
  {
    "text": "Anyway, we'll need\nthat for completeness. We'll need it for soundness. We need it for everything. So just assume that\nit's 2 to the lambda.",
    "start": "2735490",
    "end": "2742283"
  },
  {
    "text": "AUDIENCE: I think\nwe can also mark each node with a bit [INAUDIBLE]\ndelete or not delete?",
    "start": "2742283",
    "end": "2750150"
  },
  {
    "text": "PROFESSOR: Uh-huh. AUDIENCE: [INAUDIBLE]\nlambda there and lambda plus 1 [INAUDIBLE]? PROFESSOR: So you're saying\nyou can mark each node,",
    "start": "2750150",
    "end": "2758130"
  },
  {
    "text": "but for what? What's your purpose for-- AUDIENCE: So we mark\n[INAUDIBLE] with an extra bit.",
    "start": "2758130",
    "end": "2763410"
  },
  {
    "text": "That's 1. And mark [INAUDIBLE] that\nare not [INAUDIBLE] an extra",
    "start": "2763410",
    "end": "2768770"
  },
  {
    "text": "[INAUDIBLE] 0. PROFESSOR: 0, OK. AUDIENCE: And then I think\nthat's also [INAUDIBLE]?",
    "start": "2768770",
    "end": "2775250"
  },
  {
    "text": "PROFESSOR: Oh, you're\nsaying there's an attack. AUDIENCE: No, I'm saying\nthat it solves it. PROFESSOR: Oh, solves,\nsolves which problem?",
    "start": "2775250",
    "end": "2781210"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: Oh, you're saying-- OK, OK, yeah, what you're\nsaying is maybe we can solve--",
    "start": "2781210",
    "end": "2790442"
  },
  {
    "text": "OK, so you're saying\nmaybe we don't need to give the depth here. And instead, what\nwe can do is you're",
    "start": "2790442",
    "end": "2795830"
  },
  {
    "text": "saying the honest truth,\nthe honest person, he will add 0 to\neverything here.",
    "start": "2795830",
    "end": "2800910"
  },
  {
    "text": "And he will add a 1\nto everything here. AUDIENCE: [INAUDIBLE]\nlambda attack",
    "start": "2800910",
    "end": "2806240"
  },
  {
    "text": "as opposed to just a single\nbit to avoid getting unlucky with hash [INAUDIBLE].",
    "start": "2806240",
    "end": "2811392"
  },
  {
    "text": "PROFESSOR: OK, yeah, so\nyou need to make sure-- one bit is probably\nnot good because-- I guess my concern\nis if you're not--",
    "start": "2811392",
    "end": "2819660"
  },
  {
    "text": "this is what I'm going\nto do if I'm honest. But I'm not honest. So I'm going to go ahead with\nmy original crazy thing of--",
    "start": "2819660",
    "end": "2831180"
  },
  {
    "text": "OK, fine. If you want, I'll put here\na 0, and I won't put 1. I'm just going to\ncompute without your tags",
    "start": "2831180",
    "end": "2839730"
  },
  {
    "text": "because I'm malicious. And now, when I open, maybe\nsome of them are going to be 1, and I'm lucky.",
    "start": "2839730",
    "end": "2846120"
  },
  {
    "text": "You see what I mean? Or 0, and I'm lucky. AUDIENCE: But if you add\ndifferent tags for that, you add tags for 0 on\nthe very bottom row,",
    "start": "2846120",
    "end": "2853560"
  },
  {
    "text": "and you also add tags of 1. PROFESSOR: Yeah,\nbut you're right. OK, but now I don't do. That's what I should\ndo, but I'm malicious.",
    "start": "2853560",
    "end": "2859770"
  },
  {
    "text": "I don't do that. AUDIENCE: So what\ntwo inputs would you",
    "start": "2859770",
    "end": "2865619"
  },
  {
    "text": "give that give the same hash? PROFESSOR: So if I'm allowed\nto put 1 or not put 1,",
    "start": "2865620",
    "end": "2872187"
  },
  {
    "text": "I'm always going to put 0.  Oh, OK, sorry, what\nyou're saying--",
    "start": "2872187",
    "end": "2878238"
  },
  {
    "text": "OK, OK, now I understand. You're saying if I want to\nopen it, this has to be a 1. AUDIENCE: Yeah.",
    "start": "2878238",
    "end": "2883660"
  },
  {
    "text": "PROFESSOR: And therefore-- AUDIENCE: [INAUDIBLE] PROFESSOR: Now I understand\nwhat you're saying. OK, got it. So you're saying this\nmay solve the problem.",
    "start": "2883660",
    "end": "2889760"
  },
  {
    "text": "Ehm, it's a good suggestion.",
    "start": "2889760",
    "end": "2897910"
  },
  {
    "text": "You're like yeah. Eh. ",
    "start": "2897910",
    "end": "2906550"
  },
  {
    "text": "AUDIENCE: [? Now, ?]\nI have a question. PROFESSOR: Yeah, sorry. Yes, Ted. AUDIENCE: [INAUDIBLE] needing to\nincrease the length of the block",
    "start": "2906550",
    "end": "2913030"
  },
  {
    "text": "at each level by 1 [INAUDIBLE]-- PROFESSOR: Yes. AUDIENCE: --which would\nget the exact same thing?",
    "start": "2913030",
    "end": "2920019"
  },
  {
    "text": "PROFESSOR: The opening will be-- the opening will\ngrow with the depth. AUDIENCE: Well, if we're--",
    "start": "2920020",
    "end": "2926200"
  },
  {
    "text": "we need to have a\nhash function which will allow us to walk\nin the-- this is not",
    "start": "2926200",
    "end": "2932940"
  },
  {
    "text": "a [? leaf ?] intermediate thing. So the hash function\nneeds to now take like lambda plus 1 bits in\nat number 1 and then plus 2",
    "start": "2932940",
    "end": "2939780"
  },
  {
    "text": "and bits at level 2, et cetera. PROFESSOR: Oh, you're\nsaying it will grow. I see. AUDIENCE: Presumably, the hash\nfunction is still like k to k",
    "start": "2939780",
    "end": "2947580"
  },
  {
    "text": "goes to k. But in order to keep\nadding additional padding-- PROFESSOR: So you're\nsaying if you pad here, this will go to k plus 1.",
    "start": "2947580",
    "end": "2954220"
  },
  {
    "text": "It'll go to lambda plus 1. AUDIENCE: [INAUDIBLE] PROFESSOR: And then you add\n1, it'll go to lambda plus 2. AUDIENCE: Yeah, so you've just\ngot to run the plus [INAUDIBLE].",
    "start": "2954220",
    "end": "2960955"
  },
  {
    "text": " AUDIENCE: Can't you-- PROFESSOR: I wonder if you\ncan get around this, though.",
    "start": "2960955",
    "end": "2966850"
  },
  {
    "text": "AUDIENCE: I don't have to\npower of 2, don't make it a complete tree. You make it like [INAUDIBLE]. ",
    "start": "2966850",
    "end": "2975847"
  },
  {
    "text": "PROFESSOR: It's a\ngood question if you could do it with completeness--\nwithout blowing up full completeness.",
    "start": "2975847",
    "end": "2981173"
  },
  {
    "text": "AUDIENCE: It seems [INAUDIBLE]\nlike a [INAUDIBLE] domain extension has Merkle-Damgard\nconstruction that can be",
    "start": "2981173",
    "end": "2987660"
  },
  {
    "text": "[? done ?] with 2\nlambda plus 2 bits. You can still shrink it, shrink\nthat into a 2 lambda bit.",
    "start": "2987660",
    "end": "2993710"
  },
  {
    "text": "And then do the\nhash [INAUDIBLE]. PROFESSOR: Yeah, yeah,\nyeah, you can probably-- that's what I was thinking. You can go-- you\nwrite that it grows,",
    "start": "2993710",
    "end": "2999590"
  },
  {
    "text": "but you can maybe\nshrink a little bit and then continue, and shrink\na little bit and then continue. AUDIENCE: But if you make those\n[INAUDIBLE] not have to open.",
    "start": "2999590",
    "end": "3009090"
  },
  {
    "text": "PROFESSOR: So we didn't\ntalk about opening yet. ",
    "start": "3009090",
    "end": "3015763"
  },
  {
    "text": "Look, you gave a\nreally interesting idea that I'm trying to\nthink if I can make it into something in the P set.",
    "start": "3015763",
    "end": "3020910"
  },
  {
    "text": "[LAUGHTER]  OK, I'll think about it offline. Anyway, we have five\nminutes, so let me quickly",
    "start": "3020910",
    "end": "3028260"
  },
  {
    "text": "talk about how do you do local\nopening and about collision resistance of this thing.",
    "start": "3028260",
    "end": "3033390"
  },
  {
    "text": "So first, we managed to\ndo domain extension, OK? So now the domain can be\nup to 2 to the lambda.",
    "start": "3033390",
    "end": "3038650"
  },
  {
    "text": "And the hash value is\njust lambda plus lambda because we assume that the\ninputs are 2 to the lambda.",
    "start": "3038650",
    "end": "3043710"
  },
  {
    "text": "The depth is at most lambda. Yeah? So we're happy with the size.",
    "start": "3043710",
    "end": "3048910"
  },
  {
    "text": "How do you open? So let's say I want to\nopen to one point here.",
    "start": "3048910",
    "end": "3054140"
  },
  {
    "text": "I want to open to this bit. How do I open to this bit only? Well, what I do is I identify\nthe block that it sits on.",
    "start": "3054140",
    "end": "3062950"
  },
  {
    "text": "So now I know what I\nwant to open is this-- I'm going to open to\nthis entire block.",
    "start": "3062950",
    "end": "3068540"
  },
  {
    "text": "It's only lambda bit. So remember? The opening is poly lambda bits. I can allow poly lambda\nbits in my opening.",
    "start": "3068540",
    "end": "3075530"
  },
  {
    "text": "So I'm going to just\nopen to the entire block. So I can give you the block,\nbut how do you know it's",
    "start": "3075530",
    "end": "3080890"
  },
  {
    "text": "the right block? So what I do, I give\nyou-- you know what? I'm going to give you the block\nand the sibling block that is",
    "start": "3080890",
    "end": "3090670"
  },
  {
    "text": "needed to compute the parent.  So I'm going to give\nyou both of these.",
    "start": "3090670",
    "end": "3096970"
  },
  {
    "text": "Now you can compute the parent. And then I'm going to give\nyou the sibling block that is needed to compute the parent.",
    "start": "3096970",
    "end": "3103990"
  },
  {
    "text": "And then I'm going to give\nyou the sibling block that is needed to compute the parent.",
    "start": "3103990",
    "end": "3109260"
  },
  {
    "text": "So for every layer, I\ngive you the sibling block that you need to\ncompute the parent.",
    "start": "3109260",
    "end": "3116150"
  },
  {
    "text": "So the number of blocks I\ngive you is like the depth. At each layer, I give\nyou a sibling block.",
    "start": "3116150",
    "end": "3123559"
  },
  {
    "text": "So its depth number of blocks. Each block is the size lambda. So I give you polynomial,\nlambda squared bits, OK?",
    "start": "3123560",
    "end": "3132512"
  },
  {
    "text": "So this is the opening. The opening just\ncontains the block of the bit you want to\nopen with the sibling",
    "start": "3132512",
    "end": "3139760"
  },
  {
    "text": "blocks of each layer, the\nsibling blocks of the parent,",
    "start": "3139760",
    "end": "3144980"
  },
  {
    "text": "the sibling corresponding to\nthe parent all the way up.",
    "start": "3144980",
    "end": "3150050"
  },
  {
    "text": "How do you verify it? Well-- so that's the opening. So the opening are all\nthe kind of green--",
    "start": "3150050",
    "end": "3156150"
  },
  {
    "text": "well, this green you\ncan compute on your own. So you don't need it, but think\nof it all the green blocks here.",
    "start": "3156150",
    "end": "3163970"
  },
  {
    "text": "How do you verify? You just verify. You check. You check that these\ntwo hash to this.",
    "start": "3163970",
    "end": "3170450"
  },
  {
    "text": "These two hash to this. These two hash to the root,\nthe route of the-- that's the hash value.",
    "start": "3170450",
    "end": "3177160"
  },
  {
    "text": "So actually, this you don't need\nto give because you can compute. This you don't need to give\nbecause you can compute.",
    "start": "3177160",
    "end": "3183130"
  },
  {
    "text": "But this you need to give. And the point is you can ask\nthe verifier to recompute this,",
    "start": "3183130",
    "end": "3189920"
  },
  {
    "text": "recompute this. But at the end he needs\nto make sure you're consistent with the\nroot, with the hash value",
    "start": "3189920",
    "end": "3195645"
  },
  {
    "text": "that he committed to. AUDIENCE: So you're saying\nyou just needs a siblings. PROFESSOR: You just need the\nsiblings, but it doesn't matter.",
    "start": "3195645",
    "end": "3200682"
  },
  {
    "text": "Yeah, you can just\ngive one sibling. You can give d instead of 2d. ",
    "start": "3200682",
    "end": "3206529"
  },
  {
    "text": "That's the opening. That's the verification. Yeah. AUDIENCE: How do you\nensure this opening doesn't like-- it's consistent?",
    "start": "3206530",
    "end": "3212890"
  },
  {
    "text": "It doesn't-- say one\nsibling block is different. The next time you say\nopen on a different block.",
    "start": "3212890",
    "end": "3217900"
  },
  {
    "text": "PROFESSOR: So OK, there's a-- so the only thing\nI need to check",
    "start": "3217900",
    "end": "3223665"
  },
  {
    "text": "is his collision-resistant. I don't know. What do you mean by consistent? AUDIENCE: Give a\ndifferent sibling block",
    "start": "3223665",
    "end": "3229430"
  },
  {
    "text": "to the next [INAUDIBLE]. PROFESSOR: Fine, I can\ndo whatever I want. Look, I can do whatever I want. AUDIENCE: [INAUDIBLE] block--",
    "start": "3229430",
    "end": "3235010"
  },
  {
    "text": "PROFESSOR: I can do whatever. Look, I'm a cheater. I'll do whatever\nI want, whatever I can-- whatever I can\ndo and get away with,",
    "start": "3235010",
    "end": "3240900"
  },
  {
    "text": "that's what I'm going to do. The question is, I think what\nthe honest prover should do.",
    "start": "3240900",
    "end": "3247940"
  },
  {
    "text": "The honest open\nalgorithm, he should give all the correct blocks. Now you're saying, he won't.",
    "start": "3247940",
    "end": "3253260"
  },
  {
    "text": "What if he doesn't? So now I'm going to tell--\nhere's what I want to argue. Look, he may not. I don't know what\nhe's giving, OK?",
    "start": "3253260",
    "end": "3260160"
  },
  {
    "text": "All I need to argue is\ncollision resistance. First, note completeness--\ncorrectness, as I said,",
    "start": "3260160",
    "end": "3267213"
  },
  {
    "text": "if you're honest, you're\ngoing to be accepted. If you're honest, you\ngenerate this gigantic thing like you should have.",
    "start": "3267213",
    "end": "3272670"
  },
  {
    "text": "You have the entire tree. And when you want to open this,\nyou actually give all these. Everything should hash.",
    "start": "3272670",
    "end": "3278100"
  },
  {
    "text": "The hash is good. It computes correctly. And you'll accept with\nprobability 1, OK?",
    "start": "3278100",
    "end": "3284279"
  },
  {
    "text": "Always. That's not a problem. What your concern\nis like, wait, OK, I tell the cheating person\nwho wants to find collisions,",
    "start": "3284280",
    "end": "3293214"
  },
  {
    "text": "this is what you should do. Give the opening. You're saying, he\nwon't give this block. He will give this block. Or who knows what\nhe's going to do?",
    "start": "3293215",
    "end": "3300720"
  },
  {
    "text": "Who says he can give\nwhatever he wants? So how do you know\nthat this is-- how do you know that this\nis collision-resistant?",
    "start": "3300720",
    "end": "3307570"
  },
  {
    "text": " You're not happy. AUDIENCE: [INAUDIBLE]\nbecause probably [INAUDIBLE].",
    "start": "3307570",
    "end": "3316620"
  },
  {
    "text": "PROFESSOR: Yeah. AUDIENCE: Yeah, I\nwas more concerned about the soundness,\nthe soundness",
    "start": "3316620",
    "end": "3322829"
  },
  {
    "text": "that we get from there. How do we know he can't-- each time you query,\nyou just kind of like--",
    "start": "3322830",
    "end": "3328829"
  },
  {
    "text": "for his proofs of\nthose sibling blocks, you can just construct\nthem in such a way that it ends up at your root.",
    "start": "3328830",
    "end": "3336010"
  },
  {
    "text": "How do you make sure that\nyou can't just construct them so that in [INAUDIBLE]?",
    "start": "3336010",
    "end": "3342732"
  },
  {
    "text": "PROFESSOR: You\nshould be concerned. So first, when\nyou say soundness, you mean collision-resistant. I wrote soundness,\nbut that's the-- yeah,",
    "start": "3342732",
    "end": "3348240"
  },
  {
    "text": "that's kind of thing. Yeah, and you're right. You're saying, how do you know? He does whatever he wants.",
    "start": "3348240",
    "end": "3353288"
  },
  {
    "text": "How do you know that\nat the end of the day, somehow he doesn't manage-- maybe he manages to mix, max,\nand do it-- and magically",
    "start": "3353288",
    "end": "3359746"
  },
  {
    "text": "get to the root in\ntwo different ways? ",
    "start": "3359747",
    "end": "3365060"
  },
  {
    "text": "So the answer is\nhe can't, actually. The only way he can generate\ntwo different openings",
    "start": "3365060",
    "end": "3371330"
  },
  {
    "text": "for the root, the only\nway-- if he could generate two different openings for this,\none block and a different block",
    "start": "3371330",
    "end": "3378740"
  },
  {
    "text": "with the valid openings, I\nargue I can find collisions to the original hash\nfunction that I started",
    "start": "3378740",
    "end": "3385910"
  },
  {
    "text": "with from 2 lambda to lambda. The reason why I\nfind collisions--",
    "start": "3385910",
    "end": "3392480"
  },
  {
    "text": "we're out of time, so we'll\nhave to do it next week. So Friday at same\ntime next week.",
    "start": "3392480",
    "end": "3397650"
  },
  {
    "text": "Finally, we have\nconsecutive weeks. ",
    "start": "3397650",
    "end": "3401000"
  }
]