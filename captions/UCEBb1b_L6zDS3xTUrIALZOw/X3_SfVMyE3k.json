[
  {
    "start": "0",
    "end": "82000"
  },
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help MIT\nOpenCourseWare continue to",
    "start": "0",
    "end": "6870"
  },
  {
    "text": "offer high quality educational\nresources for free. To make a donation or view\nadditional materials from",
    "start": "6870",
    "end": "13410"
  },
  {
    "text": "hundreds of MIT courses, visit\nMIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13410",
    "end": "21030"
  },
  {
    "text": "PROFESSOR: I guess [OBSCURED]",
    "start": "21030",
    "end": "26076"
  },
  {
    "text": "Let's get going. OK, should I introduce you? BRADLEY KUSZMAUL: If you want. I can introduce myself.",
    "start": "26076",
    "end": "31810"
  },
  {
    "text": "PROFESSOR: We have Bradley\nKuszmaul who's been doing articles on Cilk?",
    "start": "31810",
    "end": "36921"
  },
  {
    "text": "He's a very interesting\nparalleling and also what you",
    "start": "36921",
    "end": "42935"
  },
  {
    "text": "can say about the program It's\na very interesting project that coming for a while, and\nthere's a lot of interesting",
    "start": "42935",
    "end": "52873"
  },
  {
    "text": "things he's developed,\nand multi core becoming very important.",
    "start": "52873",
    "end": "59740"
  },
  {
    "text": "BRADLEY KUSZMAUL: So how\nmany of you people have ever heard of Cilk? Have used it?",
    "start": "59740",
    "end": "65870"
  },
  {
    "text": "So those of you who have\nused it may find this talk old or whatever.",
    "start": "65870",
    "end": "73400"
  },
  {
    "text": "So Cilk is a system that\nruns on a shared-memory multiprocessor. So this is not like the system\nyou've been programming for",
    "start": "73400",
    "end": "81690"
  },
  {
    "text": "this class. This kind of machine you have\nprocessors, which each have cache and some sort of a network\nand a bunch of memory",
    "start": "81690",
    "end": "88840"
  },
  {
    "start": "82000",
    "end": "82000"
  },
  {
    "text": "and when the processors do\nmemory operations they are all on the same address space\nand it's typically--",
    "start": "88840",
    "end": "96780"
  },
  {
    "text": "the memory system provides some\nsort of coherence like strong consistency or maybe\nreleased consistency. ",
    "start": "96780",
    "end": "104690"
  },
  {
    "text": "We're interested in the case\nwhere the distance from processors to other processors\ninto a processors to memory",
    "start": "104690",
    "end": "112420"
  },
  {
    "text": "may be nonuniform and so it's\nimportant to use the cache well in this kind of machine\nbecause you can't",
    "start": "112420",
    "end": "122500"
  },
  {
    "text": "just ignore the cache. So sort of the technology that\nI'm going to talk about for this kind of system\nis called Cilk.",
    "start": "122500",
    "end": "129310"
  },
  {
    "text": "Cilk is a C language and it does\ndynamic multithreading and it has a provably\ngood runtime system.",
    "start": "129310",
    "end": "135390"
  },
  {
    "text": "So I'll talk about what\nthose all mean. Cilk runs on shared-memory\nmachines like Suns and SGIs",
    "start": "135390",
    "end": "142420"
  },
  {
    "text": "and well, you probably can't\nfind Alphaservers anymore. It runs on SMPs like that are\nin everybody's laptops now.",
    "start": "142420",
    "end": "150260"
  },
  {
    "text": "There's been several interesting\napplications written in Cilk including virus\nshell assembly, graphics",
    "start": "150260",
    "end": "157930"
  },
  {
    "text": "rendering, n-body simulation. We did a bunch of chess programs\nbecause they were",
    "start": "157930",
    "end": "163180"
  },
  {
    "text": "sort of the raison\nd'etre for Cilk.",
    "start": "163180",
    "end": "168739"
  },
  {
    "text": "One of the features about Cilk\nis that it automatically manages a lot of the\nlow-level issues. You don't have to do load\nbalancing, you don't have to",
    "start": "168740",
    "end": "176510"
  },
  {
    "text": "write in protocols. You basically write programs\nthat look a lot more like the",
    "start": "176510",
    "end": "182310"
  },
  {
    "text": "ordinary Cilk programs instead\nof saying first I'm going to do this and then I'm going to\nset this variable and then",
    "start": "182310",
    "end": "189040"
  },
  {
    "text": "somebody else is going to read\nthat variable and that's a protocol and those are very\ndifficult to get right.",
    "start": "189040",
    "end": "195239"
  },
  {
    "text": "AUDIENCE: [OBSCURED] BRADLEY KUSZMAUL: Yeah,\nI'll mention that a little bit later.",
    "start": "195240",
    "end": "200900"
  },
  {
    "text": "We had award-winning\nchess player. So to explain what Cilk's about",
    "start": "200900",
    "end": "206770"
  },
  {
    "text": "I'll talk about Fibonacci. Now Fibonacci, this is just to\nreview in case you don't know",
    "start": "206770",
    "end": "212510"
  },
  {
    "text": "C. You all know C right? So Fibonacci is the function\nthat each number is the sum of",
    "start": "212510",
    "end": "219079"
  },
  {
    "text": "the previous two Fibonacci\nnumbers. And this is an implementation\nthat basically does that",
    "start": "219080",
    "end": "226340"
  },
  {
    "text": "computation directly. The Fibonacci of n if n is\nless than 2, it's just n. So Fibonacci of zero\nis zero, 1 is 1.",
    "start": "226340",
    "end": "233840"
  },
  {
    "text": "2, the Fibonacci's-- well, then you have to do the\nrecursion, so you compute Fibonacci of n minus 1 and\nFibonacci of n minus 2 and sum",
    "start": "233840",
    "end": "241585"
  },
  {
    "text": "them together and that's\nFibonacci of n. One observation about this\nfunction is it's a really slow",
    "start": "241585",
    "end": "249330"
  },
  {
    "text": "implementation of Fibonacci. You all know how to\ndo this faster? How fast can you do Fibonacci?",
    "start": "249330",
    "end": "256570"
  },
  {
    "text": "You all know this, How\nfast is this one? AUDIENCE: [OBSCURED].",
    "start": "256570",
    "end": "262960"
  },
  {
    "text": "BRADLEY KUSZMAUL: So for those\nof you who don't know-- certainly know how to compute\nFibonacci in linear time just",
    "start": "262960",
    "end": "268200"
  },
  {
    "text": "by keeping track of the\nmost recent two. 1, 1, 2, 3, 5, you just do it.",
    "start": "268200",
    "end": "274230"
  },
  {
    "text": "This is exponential time and\nthere's an algorithm that does it in logarithmic time. So this implementation is\ndoubly, exponentially bad.",
    "start": "274230",
    "end": "284380"
  },
  {
    "text": "But it's good as a didactic\nexample because it's easy to understand. So to turn this into Cilk we\njust add some key words and",
    "start": "284380",
    "end": "290539"
  },
  {
    "text": "I'll talk about what the key\nwords are in a minute, but the key thing to understand about\nthis is if you delete the key",
    "start": "290540",
    "end": "296490"
  },
  {
    "text": "words you have a C program and\nCilk programs have the property that one of the legal\nsemantics for the Cilk program",
    "start": "296490",
    "end": "306069"
  },
  {
    "text": "is the C program that you get\nby deleting the key words. Now there's other possible\nsemantics",
    "start": "306070",
    "end": "311490"
  },
  {
    "text": "you could get because-- not for this function, this\nfunction always produces the same answer because there's\nno race conditions in it.",
    "start": "311490",
    "end": "318450"
  },
  {
    "text": "But for programs that have\nraces you may have other semantics that the system\ncould provide.",
    "start": "318450",
    "end": "324150"
  },
  {
    "text": "And so this kind of a language\nextension where you can sort of delete the extensions and get\na correct implementation",
    "start": "324150",
    "end": "332590"
  },
  {
    "text": "of the parallel program is\ncalled a faithful extension. A lot of languages like OpenMP\nhave properties that if you",
    "start": "332590",
    "end": "340380"
  },
  {
    "text": "had these directives and if\nyou delete them, it will change the semantics of your\nprogram and so you have to be very careful.",
    "start": "340380",
    "end": "346160"
  },
  {
    "text": "Now if you're careful about\nprogramming OpenMP you can make it so that it's faithful,\nthat has this property.",
    "start": "346160",
    "end": "351990"
  },
  {
    "text": "But that's not always\nthe case that it is.",
    "start": "351990",
    "end": "357599"
  },
  {
    "text": "Sure. AUDIENCE: Is it built\non the different.. ",
    "start": "357600",
    "end": "364060"
  },
  {
    "text": "BRADLEY KUSZMAUL: C 77. No, C 89. AUDIENCE: OK, so there's\nno presumption or any alias involved?",
    "start": "364060",
    "end": "372345"
  },
  {
    "text": "It's assumed that\nthe [OBSCURED]. BRADLEY KUSZMAUL: So the\nissue of restricted pointers, for example?",
    "start": "372346",
    "end": "378095"
  },
  {
    "text": "AUDIENCE: Restricted pointers. BRADLEY KUSZMAUL: So Cilk\nturns out to work with C 99 as well.",
    "start": "378095",
    "end": "383534"
  },
  {
    "text": "AUDIENCE: But is the presumption\nthough for a pointer that it could alias?",
    "start": "383535",
    "end": "389450"
  },
  {
    "text": "BRADLEY KUSZMAUL: The Cilk\ncompiler makes no assumptions about that. If you write a program\nand the back end--",
    "start": "389450",
    "end": "395310"
  },
  {
    "text": "Cilk works and I'll talk about\nthis in a couple minutes. Cilk works by transforming\nthis into a C",
    "start": "395310",
    "end": "402080"
  },
  {
    "text": "program that has-- when you run it on one processor\nit's just the",
    "start": "402080",
    "end": "408060"
  },
  {
    "text": "original C program in effect. And so if you have a dialect\nof C that has restricted",
    "start": "408060",
    "end": "413419"
  },
  {
    "text": "pointers and a compiler that-- PROFESSOR: You're taking\nthe assumptions that if you make a mistake--",
    "start": "413420",
    "end": "419110"
  },
  {
    "text": "BRADLEY KUSZMAUL: If you make a\nmistake the language doens't stop you from making\nthe mistake.",
    "start": "419110",
    "end": "424939"
  },
  {
    "text": "AUDIENCE: Well, but in C 89\nthere's not a mistake. There's no assumption about\naliasing, right?",
    "start": "424940",
    "end": "430068"
  },
  {
    "text": "It could alias. So if I said -- BRADLEY KUSZMAUL: Because of\nthe aliasing you write a",
    "start": "430068",
    "end": "436232"
  },
  {
    "text": "program that has a race\ncondition in it, which is erroneous-- AUDIENCE: It would be valid?",
    "start": "436232",
    "end": "442930"
  },
  {
    "text": "BRADLEY KUSZMAUL: No,\nit'd still be valid. It would just have a race in\nit and you would have a non-determinate result. PROFESSOR: It may not\ndo what you want. BRADLEY KUSZMAUL: It may not do\nwhat you want, but one of",
    "start": "442930",
    "end": "449830"
  },
  {
    "text": "the legal executions of that\nparallel program is the original C program. AUDIENCE: So there's no extra.",
    "start": "449830",
    "end": "457300"
  },
  {
    "text": "BRADLEY KUSZMAUL: At the sort\nof level of doing analysis, Cilk doesn't do analysis. Cilk is a compiler that compiles\nthis language and the",
    "start": "457300",
    "end": "466530"
  },
  {
    "text": "semantics are what they are,\nwhich is you the spawn is its-- and I'll talk about\nthe semantics. The spawn means you can run the\nfunction in parallel and",
    "start": "466530",
    "end": "472910"
  },
  {
    "text": "if that doesn't give you the\nsame answer every time it's not the compilers fault.",
    "start": "472910",
    "end": "478350"
  },
  {
    "text": "AUDIENCE: [OBSCURED] BRADLEY KUSZMAUL: Pardon? AUDIENCE: There has to be some\nguarantee [OBSCURED].",
    "start": "478350",
    "end": "484585"
  },
  {
    "text": "[OBSCURED] PROFESSOR: How in a race\ncondition you get some",
    "start": "484585",
    "end": "489889"
  },
  {
    "text": "[OBSCURED]. BRADLEY KUSZMAUL: One of the\nlegal things the Cilk system could do is just run this,\nrun that program.",
    "start": "489890",
    "end": "497479"
  },
  {
    "text": "Now if you're running it on\nmultiple processors that's not what happens because the other\nthing is there's some performance guarantees we get.",
    "start": "497480",
    "end": "503729"
  },
  {
    "text": "So there's actually\nparallelism. But on one processor in fact,\nthat's exactly what the execution does.",
    "start": "503730",
    "end": "510860"
  },
  {
    "text": "So Cilk does dynamic\nmultithreading and this is different from p threads for\nexample where you have this",
    "start": "510860",
    "end": "517659"
  },
  {
    "text": "very heavyweight thread that\ncosts tens of thousands of instructions to create.",
    "start": "517660",
    "end": "523010"
  },
  {
    "start": "520000",
    "end": "520000"
  },
  {
    "text": "Cilk threads are really small,\nso in this program there's a Cilk thread that runs basically\nfrom when the fib",
    "start": "523010",
    "end": "529350"
  },
  {
    "text": "starts to here and then-- ",
    "start": "529350",
    "end": "537480"
  },
  {
    "text": "I feel like there's a missing\nslide in here. I didn't tell you about spawn. ",
    "start": "537480",
    "end": "544399"
  },
  {
    "text": "OK, well let me tell you about\nspawn because what the spawn means is that this function\ncan run in parallel.",
    "start": "544400",
    "end": "552940"
  },
  {
    "text": "That's very simple. What the sync means is that all\nthe functions that were",
    "start": "552940",
    "end": "558430"
  },
  {
    "text": "spawned off in this function all\nhave to finish before this",
    "start": "558430",
    "end": "563540"
  },
  {
    "text": "function can proceed. So in a normal execution of C,\nwhen you call a function the",
    "start": "563540",
    "end": "569170"
  },
  {
    "text": "parent stops. In Cilk the parent can keep\nrunning, so while that's running the parent-- this can\nspawn off this and then the",
    "start": "569170",
    "end": "576579"
  },
  {
    "text": "sync happens and now the\nparent has to stop. And this key word basically just\nsays that this function",
    "start": "576580",
    "end": "582139"
  },
  {
    "text": "can be spawned. AUDIENCE: Is the sync in that\nscope or the children scope? ",
    "start": "582140",
    "end": "589960"
  },
  {
    "text": "BRADLEY KUSZMAUL: The sync is\nscoped within the function. So you could have a 4 loop\nthat spawned off a whole bunch of stuff.",
    "start": "589960",
    "end": "595640"
  },
  {
    "text": "AUDIENCE: You could call the\nfunction instead of moving some spawns, but\nthen [OBSCURED] in the sync. BRADLEY KUSZMAUL: There's an\nexplicit sync at the end of",
    "start": "595640",
    "end": "601830"
  },
  {
    "text": "every function. So Cilk functions are strict. PROFESSOR: [NOISE]",
    "start": "601830",
    "end": "612680"
  },
  {
    "text": "BRADLEY KUSZMAUL: You know,\nthere's children down inside here, but this function can't\nreturn-- well, if I had omitted the sync and down in\nsome leaf the compiler puts",
    "start": "612680",
    "end": "622000"
  },
  {
    "text": "one in before the function\nreturns. There's some languages that are\nlike this where somehow",
    "start": "622000",
    "end": "628620"
  },
  {
    "text": "the intermediate function can go\naway and then you can sync directly with your\ngrandparent.",
    "start": "628620",
    "end": "635490"
  },
  {
    "text": "AUDIENCE: Otherwise\nit would stop.  BRADLEY KUSZMAUL: So this gives\nyou this dag, so you have this part of the program\nthat runs up to the first",
    "start": "635490",
    "end": "642100"
  },
  {
    "text": "spawn and then part of the\nprogram that runs between the spawns and the part of the\nprogram that runs after--",
    "start": "642100",
    "end": "648460"
  },
  {
    "text": "well, after the last spawn to\nthe sync and then from there to the return. So I've got this drawing\nthat shows this",
    "start": "648460",
    "end": "656690"
  },
  {
    "text": "function sort of running. So first the purple code runs\nat it gets to the spawn, it spawns of this guy, but now the\nsecond piece of code can",
    "start": "656690",
    "end": "663850"
  },
  {
    "text": "start running. He does a spawn, so these two\nare running in parallel. Meanwhile.",
    "start": "663850",
    "end": "668880"
  },
  {
    "text": "This guy started that pff.  This is a base case, so he's\ngoing to not do anything.",
    "start": "668880",
    "end": "678480"
  },
  {
    "text": "Just feels like there's\nsomething missing in this slide. Oh well.",
    "start": "678480",
    "end": "683670"
  },
  {
    "text": "Essentially now this\nguy couldn't run going back to here. This part of the code couldn't\nrun until after sync so this",
    "start": "683670",
    "end": "690500"
  },
  {
    "text": "thing's sitting here waiting. So when these guys finally\nreturn then this can run.",
    "start": "690500",
    "end": "697779"
  },
  {
    "text": "This guy's getting stuck here. He runs and he runs. These two return and the\nvalue comes up here.",
    "start": "697780",
    "end": "703970"
  },
  {
    "text": "And now basically the\nfunction is done. ",
    "start": "703970",
    "end": "709820"
  },
  {
    "text": "One observation here is that\nthere's no mention of the number of processors\nin this code.",
    "start": "709820",
    "end": "715470"
  },
  {
    "text": "You haven't specified how\nto schedule or how many processors. All you've specified is this\ndirected acyclic graph that",
    "start": "715470",
    "end": "722580"
  },
  {
    "text": "unfolds dynamically and it's\nup to us to schedule those onto the processors.",
    "start": "722580",
    "end": "727830"
  },
  {
    "text": "So this code is processor\noblivious. It's oblivious to the number\nof processors. PROFESSOR: But because we're\nusing the language we're",
    "start": "727830",
    "end": "734940"
  },
  {
    "text": "probably have to create, write\nas many spawns depending on-- BRADLEY KUSZMAUL: No, what you\ndo is you write as many spawns as you can.",
    "start": "734940",
    "end": "740866"
  },
  {
    "text": "You expose all the parallelism\nin your code. So you want this dag to have\nmillions of threads in it",
    "start": "740866",
    "end": "747980"
  },
  {
    "text": "concurrently. And then it's up to us to\nschedule that efficiently. So it's a different mindset\nthen, I have 4 processors, let",
    "start": "747980",
    "end": "756120"
  },
  {
    "text": "me create 4 things to do. I have 4 processors, let me\ncreate a million things to do. And then the Cilk scheduler\nguarantees to give you-- you",
    "start": "756120",
    "end": "763350"
  },
  {
    "text": "have 4 processors, I'll give\nyou 4 fold speed up. PROFESSOR: I guess what you'd\nlike to avoid is the mindset",
    "start": "763350",
    "end": "768555"
  },
  {
    "text": "of the programmer has to change\nor find the changing tuning the parameters\nfor the performance. ",
    "start": "768555",
    "end": "775260"
  },
  {
    "text": "BRADLEY KUSZMAUL: There's some\ntuning that you do in order to make the leaf code. There's some overhead for\ndoing function calls.",
    "start": "775260",
    "end": "782120"
  },
  {
    "text": "So it's small overhead. It turns out the cost\nof the spawn is like",
    "start": "782120",
    "end": "787210"
  },
  {
    "text": "three function calls. If you were actually trying to\nmake this code run faster you",
    "start": "787210",
    "end": "793760"
  },
  {
    "text": "make the base case bigger and do\nsomething, trying to speed",
    "start": "793760",
    "end": "798815"
  },
  {
    "text": "things up a little bit with\nthe leaves of this call. So there's this call tree\nand inside the call",
    "start": "798815",
    "end": "804139"
  },
  {
    "text": "tree is this dag. So it supports C's rule\nfor pointers.",
    "start": "804140",
    "end": "811740"
  },
  {
    "text": "For whatever dialect you have.\nIf you have a pointer to a",
    "start": "811740",
    "end": "817550"
  },
  {
    "start": "812000",
    "end": "812000"
  },
  {
    "text": "stack and then you have a\npointer to the stack and then you call, you're allowed to use\nthat pointer in C. So in",
    "start": "817550",
    "end": "825120"
  },
  {
    "text": "Cilk you are as well. If you have a parallel thing\ngoing on where normally in C you would call A, then B\nreturns, then C and D. So C",
    "start": "825120",
    "end": "833780"
  },
  {
    "text": "and D can refer to anything on\nA, but C can't legally refer to something on B and the same\nrule applies to Cilk.",
    "start": "833780",
    "end": "842000"
  },
  {
    "text": "So we have a data structure that\nimplements this cactus stack is what it's called, after\nthe sugauro cactus--",
    "start": "842000",
    "end": "850062"
  },
  {
    "text": "the view of the imagery\nthere and it lets you",
    "start": "850062",
    "end": "857360"
  },
  {
    "text": "support that rule. There's some advanced features\nin Cilk that have to do with",
    "start": "857360",
    "end": "863630"
  },
  {
    "text": "speculative execution and I'm\ngoing to skip over those today",
    "start": "863630",
    "end": "869150"
  },
  {
    "text": "because it turns out that sort\nof 99% of the time you don't need this stuff. ",
    "start": "869150",
    "end": "875720"
  },
  {
    "start": "875000",
    "end": "875000"
  },
  {
    "text": "We have some debugger support,\nso if you've written code that relied on some semantics that\nmaybe you didn't like when you",
    "start": "875720",
    "end": "885300"
  },
  {
    "text": "went to the parallel world,\nyou'd like to find out. This is a tool that basically\ntakes a Cilk program and an",
    "start": "885300",
    "end": "891560"
  },
  {
    "text": "input data set and it runs and\nit tells you is there any",
    "start": "891560",
    "end": "896640"
  },
  {
    "text": "schedule that I could have\nchosen-- so it's that directed acyclic graph. So there's a whole bunch of\npossible schedules I could",
    "start": "896640",
    "end": "902230"
  },
  {
    "text": "have chosen. Is there any schedule that\nchanges the order of two concurrent memory operations\nwhere one of them is right?",
    "start": "902230",
    "end": "912060"
  },
  {
    "text": "So we call this the\nnon-determinator because it finds all the determinacy\nraces in your program.",
    "start": "912060",
    "end": "917750"
  },
  {
    "text": "And Cilk guarantees-- the Cilk\nrace detector is guaranteed to find those.",
    "start": "917750",
    "end": "923150"
  },
  {
    "text": "There's a lot of race detectors\nwhere if the race doesn't actually occur you\nhave two things that are logically in parallel, but if\nthey don't actually run on",
    "start": "923150",
    "end": "930820"
  },
  {
    "text": "different processors a lot of\nrace detectors out there in the world won't report\nthe race.",
    "start": "930820",
    "end": "936190"
  },
  {
    "text": "So you get false negatives and\nthere's a bunch of false positives that show up. This basically only gives\nyou the real ones.",
    "start": "936190",
    "end": "941753"
  },
  {
    "text": "AUDIENCE: That might be\nindicatiors there might be",
    "start": "941753",
    "end": "946800"
  },
  {
    "text": "still a data to arrays. BRADLEY KUSZMAUL: So this\ndoesn't analyze the program. It analyzes the execution.",
    "start": "946800",
    "end": "952890"
  },
  {
    "text": "So it's not trying to solve some\nMP complete problem or Turing complete problem.",
    "start": "952890",
    "end": "958560"
  },
  {
    "text": "And so this reduces the problem\nof finding data races to the situation that's just\nlike when you're trying to do",
    "start": "958560",
    "end": "965770"
  },
  {
    "text": "code release and quality control\nfor serial programs. You write tests. If you don't test your program\nyou don't know what it does",
    "start": "965770",
    "end": "972720"
  },
  {
    "text": "and that's the same\nproperty here. If you do find some race someday\nlater then you can",
    "start": "972720",
    "end": "978430"
  },
  {
    "text": "write a test for it and know\nthat you're testing to make sure that race didn't creep\nback into your code.",
    "start": "978430",
    "end": "983860"
  },
  {
    "text": "That's what you want out of a\nsoftware release strategy. AUDIENCE: [NOISE]",
    "start": "983860",
    "end": "996900"
  },
  {
    "text": "BRADLEY KUSZMAUL: If you start\nputting in sync than maybe the race goes away because\nof that. But if just put in\ninstrumentation to try to",
    "start": "996900",
    "end": "1004949"
  },
  {
    "text": "figure out what's going,\nit's still there. And the race detector sort of\nsays, this variable in this",
    "start": "1004950",
    "end": "1010650"
  },
  {
    "text": "function, this variable in this\nfunction, you look at it and say, how could\nthat happen? And finally you figured out and\nyou fix it and then you",
    "start": "1010650",
    "end": "1016460"
  },
  {
    "text": "put it-- if you're trying to do\nsoftware release you build a regression test that will\nverify that has that input.",
    "start": "1016460",
    "end": "1023610"
  },
  {
    "text": "AUDIENCE: What if you have a\nsituation where the spawn graph falls into a terminal.",
    "start": "1023610",
    "end": "1029964"
  },
  {
    "text": "So it's not a radius, but\nmonitoring spawn is there but it spawns a graph a\nlittle bit deeper.",
    "start": "1029964",
    "end": "1035920"
  },
  {
    "start": "1035920",
    "end": "1041060"
  },
  {
    "text": "BRADLEY KUSZMAUL: Yes. For example, our race detector\nunderstands locks. So part of the rule is it\ndoesn't report a race if the",
    "start": "1041060",
    "end": "1049390"
  },
  {
    "text": "two memory accesses-- if there was a lock that they\nboth held in common.",
    "start": "1049390",
    "end": "1054610"
  },
  {
    "text": "Now you now you can write buggy\nprograms because you can essentially do the memory at\nlock, you know, read the",
    "start": "1054610",
    "end": "1059890"
  },
  {
    "text": "memory, unlock, lock,\nwrite the memory. Now the interleave happens\nand there's a race. So the assumption of this race\ndetector is that if you put",
    "start": "1059890",
    "end": "1067330"
  },
  {
    "text": "locks in there that you've\nsort of thought about. This is finding races that you\nforgot about rather than races",
    "start": "1067330",
    "end": "1073559"
  },
  {
    "text": "that you ostensibly\nthought about. There are some races that\nare actually correct. For example, in the chess\nprograms there's this big",
    "start": "1073560",
    "end": "1079880"
  },
  {
    "text": "table that remembers all\nthe chess positions that have been seen. And if you don't get the right\nanswer out of the table it",
    "start": "1079880",
    "end": "1085360"
  },
  {
    "text": "doesn't matter because you\nsearch it again anyway. Not getting the right\nanswer means you don't get any answer. You look something up and it's\nnot there so you search again.",
    "start": "1085360",
    "end": "1092419"
  },
  {
    "text": "If you just waited a little\nlonger maybe somebody else would have put the value\nin, you could have saved a little work.",
    "start": "1092420",
    "end": "1097470"
  },
  {
    "text": "And so in that case, well it\nturns out to be there's no parallel way to do that. So I'm willing to tolerate that\nrace because that gives",
    "start": "1097470",
    "end": "1105289"
  },
  {
    "text": "me performance and so you have\nwhat we call fake locks, which are basically things that look\nlike lock calls, but they",
    "start": "1105290",
    "end": "1113279"
  },
  {
    "text": "don't do anything except tell\nthe race detector, pretend there was a lock\nheld in common. Yeah?",
    "start": "1113280",
    "end": "1118706"
  },
  {
    "text": "AUDIENCE:\n[UNINTELLIGIBLE PHRASE] ",
    "start": "1118707",
    "end": "1132080"
  },
  {
    "text": "BRADLEY KUSZMAUL: If it says\nthere's no race it means that for every possible\nscheduling that--",
    "start": "1132080",
    "end": "1137745"
  },
  {
    "text": "AUDIENCE:\n[UNINTELLIGIBLE PHRASE]. BRADLEY KUSZMAUL: Well,\nyou have that dag. And imagine running it\non one processor.",
    "start": "1137745",
    "end": "1142850"
  },
  {
    "text": "There's a lot of possible\norders in which to run the dag. And the rule is well, was there\na load in a store or a",
    "start": "1142850",
    "end": "1150350"
  },
  {
    "text": "store in a store that switched\norders in some possible schedule and that's\nthe definition.",
    "start": "1150350",
    "end": "1156511"
  },
  {
    "text": "AUDIENCE: So, in practice,\nsorry, one of the [INAUDIBLE]",
    "start": "1156511",
    "end": "1170090"
  },
  {
    "text": "techniques is loss. Assuming, dependent on the\nprocessor, that you have atomic rights, we want to\ndeal with that data",
    "start": "1170090",
    "end": "1177012"
  },
  {
    "text": "[UNINTELLIGIBLE] in\nthe background -- BRADLEY KUSZMAUL: Those\nprotocols are really hard to get right, but yes, it's\nan important trick.",
    "start": "1177012",
    "end": "1182755"
  },
  {
    "text": "AUDIENCE: Certainly\n[INAUDIBLE]. BRADLEY KUSZMAUL: So to convince\nthe race detector not to complain you put fake\nlocks around it. ",
    "start": "1182755",
    "end": "1191410"
  },
  {
    "text": "You've programmed a\nsophisticated algorithm it's up to you to get the\ndetails right. ",
    "start": "1191410",
    "end": "1199150"
  },
  {
    "text": "The other property about this\nrace detector is that it's fast. It runs almost\nin liear time. A lot of the race detectors that\nyou find out there run in",
    "start": "1199150",
    "end": "1205700"
  },
  {
    "text": "quadratic time. So if you want to run a million\ninstructions it has to compare every instruction to\nevery other instruction.",
    "start": "1205700",
    "end": "1212380"
  },
  {
    "text": "Turns out we don't\nhave to do that. We run in time, which is n times\nalpha of n where alpha's the inverse Ackermann\nfunction.",
    "start": "1212380",
    "end": "1218440"
  },
  {
    "text": "Anybody remember that from\nthe union-find algorithm.",
    "start": "1218440",
    "end": "1223580"
  },
  {
    "text": "It's got that graded So it's\nlike the almost linear time. We actually now have a linear\ntimed one that has performance",
    "start": "1223580",
    "end": "1232980"
  },
  {
    "text": "advantages. So let me do a little\ntheory in practice.",
    "start": "1232980",
    "end": "1240130"
  },
  {
    "text": "In Cilk we have some fundamental\ncomplexity measures that we worry about. So we're interested in knowing\nand being able to predict the",
    "start": "1240130",
    "end": "1247070"
  },
  {
    "text": "runtime of a Cilk program\non P processors. So we want to know T sub p,\nwhich is the execution time on",
    "start": "1247070",
    "end": "1253580"
  },
  {
    "text": "P processors. That's the goal. What we've got to work with is\nsome directed acyclic graph",
    "start": "1253580",
    "end": "1259430"
  },
  {
    "text": "that is for a particular input\nset and if the program determines it and everything\nelse it's a well defined graph",
    "start": "1259430",
    "end": "1265400"
  },
  {
    "text": "and we can come up with some\nbasic measures of this graph. So T sub 1 is the work of the\ngraph, which is the total time",
    "start": "1265400",
    "end": "1271950"
  },
  {
    "text": "it would take to run that\ngraph on one processor. Or if you assume that these\nthings are all cost unit",
    "start": "1271950",
    "end": "1277570"
  },
  {
    "text": "times, just the number\nof nodes. So for this graph\nwhat's the work? ",
    "start": "1277570",
    "end": "1291779"
  },
  {
    "text": "I heard teen, but something-- 18? And the critical path\nis the longest path.",
    "start": "1291780",
    "end": "1303590"
  },
  {
    "text": "And if these nodes weren't unit\ntime you'd have to weight the things according\nto actually how much time they run.",
    "start": "1303590",
    "end": "1309200"
  },
  {
    "text": "So the critical path\nhere is what? 9.",
    "start": "1309200",
    "end": "1314770"
  },
  {
    "text": "So I think those are right. The lower bounds then that you\nknow is that you don't expect",
    "start": "1314770",
    "end": "1322500"
  },
  {
    "text": "the runtime on P processes to be\nfaster than linear speedup. ",
    "start": "1322500",
    "end": "1329980"
  },
  {
    "text": "In this model that\ndoesn't happen. ",
    "start": "1329980",
    "end": "1337429"
  },
  {
    "text": "It turns out cache\ndoes things. It's adding more than\njust processors. You're adding more cache too.",
    "start": "1337430",
    "end": "1343059"
  },
  {
    "text": "So all sorts of things or maybe\nit means that there's a better algorithm you\nshould have used.",
    "start": "1343060",
    "end": "1348180"
  },
  {
    "text": "So there's some funny things\nthat happen if you have bad algorithms and so forth. But in this model you can't have\nmore than linear speedup.",
    "start": "1348180",
    "end": "1354020"
  },
  {
    "text": "You also can't get things done\nfaster than in linear time. This model assumes basically\nthat these costs of running",
    "start": "1354020",
    "end": "1359660"
  },
  {
    "text": "these things are fixed and the\ncache has the property that",
    "start": "1359660",
    "end": "1365420"
  },
  {
    "text": "changing the order of execution\nmeans that the actual costs of the nodes in\nthe graph change costs.",
    "start": "1365420",
    "end": "1372600"
  },
  {
    "text": "So those are lower bounds and\nthe things that we want to know are speedups, so that's\nT sub 1 over T sub p.",
    "start": "1372600",
    "end": "1380410"
  },
  {
    "text": "And the parallelism of\nthe graph is T sub 1 over T sub infinity. So the work over the critical\npath and we've been calling",
    "start": "1380410",
    "end": "1387090"
  },
  {
    "text": "this span sometimes lately. Some people call that depth.",
    "start": "1387090",
    "end": "1392260"
  },
  {
    "text": "Span is easier to say than\ncritical path, depth has too many other meanings so\nI kind of like span.",
    "start": "1392260",
    "end": "1397390"
  },
  {
    "text": "So what's the parallelism\nfor this program? ",
    "start": "1397390",
    "end": "1404759"
  },
  {
    "text": "18/9.",
    "start": "1404760",
    "end": "1409880"
  },
  {
    "text": "We said that T sub 1 was what? 18.",
    "start": "1409880",
    "end": "1415120"
  },
  {
    "text": "The infinity is 9. So on average and if you had\nan infinite number of",
    "start": "1415120",
    "end": "1420290"
  },
  {
    "text": "processors and you scheduled\nthis as greedy as you good, it would take you 9 steps to run\nand you would you be doing 18",
    "start": "1420290",
    "end": "1427559"
  },
  {
    "text": "things worth of work. So on average there's\ntwo things to do. You know, 1 plus 1 plus 1 plus\n3 plus 4 plus 4 plus 1 plus 1",
    "start": "1427560",
    "end": "1435950"
  },
  {
    "text": "plus 1 divided by 9\nturns out to be 2. So the average parallelism or\njust the parallelism of the",
    "start": "1435950",
    "end": "1442950"
  },
  {
    "text": "program is T sub 1 over\nT sub infinity. And this property is something\nthat's not dependent on the",
    "start": "1442950",
    "end": "1448580"
  },
  {
    "text": "scheduler, it's a property\nof the program. Doesn't depend on how many\nprocessors you have.",
    "start": "1448580",
    "end": "1455490"
  },
  {
    "text": "AUDIENCE: [OBSCURED] You're saying, you're calling\nthat the span now?",
    "start": "1455490",
    "end": "1461740"
  },
  {
    "text": "Is that the one for\nus [OBSCURED]",
    "start": "1461740",
    "end": "1472070"
  },
  {
    "text": "BRADLEY KUSZMAUL: That's\ntoo long to say. I might as well say critical\npath length.",
    "start": "1472070",
    "end": "1477240"
  },
  {
    "text": "Critical path length, longest\ntrace span is a mathematical sounding name. ",
    "start": "1477240",
    "end": "1485955"
  },
  {
    "text": "AUDIENCE: We just like\nto steal terminology. BRADLEY KUSZMAUL: Well, yeah. So there's a theorem due to--",
    "start": "1485956",
    "end": "1491660"
  },
  {
    "text": "Graham and Brent said that\nthere's some schedule that can actually achieve the sum of\nthose two lower bounds.",
    "start": "1491660",
    "end": "1498040"
  },
  {
    "text": "This linear speedup is one lower\nbound of the runtime and the critical path\nis the other.",
    "start": "1498040",
    "end": "1504470"
  },
  {
    "text": "So there's some schedule that\nbasically achieves the sum of those and how does that\ntheorem work? Well, at each time\nstep either--",
    "start": "1504470",
    "end": "1512350"
  },
  {
    "start": "1505000",
    "end": "1505000"
  },
  {
    "text": "suppose we had 3 processors. Either there's at least 3 things\nready to run and so",
    "start": "1512350",
    "end": "1520090"
  },
  {
    "text": "what you do is you do\na greedy schedule. You grab any 3 of them. ",
    "start": "1520090",
    "end": "1527790"
  },
  {
    "text": "If there's fewer than p things\nto run, like here we have a situation where these\nhave all run.",
    "start": "1527790",
    "end": "1534680"
  },
  {
    "text": "The green ones are\nready to go. Those are the only 2 that\nare ready to go. So what do you do then\nin a greedy schedule?",
    "start": "1534680",
    "end": "1540640"
  },
  {
    "text": "You run them all.  And the argument goes, well, how\nmany times steps could you",
    "start": "1540640",
    "end": "1550730"
  },
  {
    "text": "execute 3 things? ",
    "start": "1550730",
    "end": "1555799"
  },
  {
    "text": "At most you could do it the work\ndivided by the number of processors times because\nthen after that you've used up all the work.",
    "start": "1555800",
    "end": "1562860"
  },
  {
    "text": "Well how many times could you\nexecute less than p things?",
    "start": "1562860",
    "end": "1567910"
  },
  {
    "text": "Well, every time you execute\nless than p things you're reducing the length of the\nremaining critical path.",
    "start": "1567910",
    "end": "1573090"
  },
  {
    "text": "You can't do that more\nthan the span times. And so a greedy scheduler will\nachieve some runtime which is",
    "start": "1573090",
    "end": "1581040"
  },
  {
    "text": "within the sum of these 2. It's actually the sum\nof these 2 minus 1. It turns out that there has to\nbe at least one node that's on",
    "start": "1581040",
    "end": "1588940"
  },
  {
    "text": "both work and critical path. And so that means that you're\nguaranteed to be within a",
    "start": "1588940",
    "end": "1594400"
  },
  {
    "text": "factor of 2 of optimal with\na greedy schedule.",
    "start": "1594400",
    "end": "1599720"
  },
  {
    "text": "And it turns out that if you\nhave a lot of parallelism compared to the number\nprocessors, so if you have a",
    "start": "1599720",
    "end": "1605810"
  },
  {
    "text": "graph that has a million fold\nparallelism and a thousand fold processors Well, if this\nis really small compared to",
    "start": "1605810",
    "end": "1614890"
  },
  {
    "text": "the work, if you have a graph\nwith a million fold parallelism that means the\ncritical path is small.",
    "start": "1614890",
    "end": "1620409"
  },
  {
    "text": "If you only had 1000 processors\nthat means this term's big. And that means that this term is\nvery close to this term, so",
    "start": "1620410",
    "end": "1628419"
  },
  {
    "text": "essentially the corollary to\nthis is that you get linear speedup, perfect linear speed\nasymptotically if you have",
    "start": "1628420",
    "end": "1637770"
  },
  {
    "text": "fewer processors then you have\nparallelism in your program. So the game here at this level\nof understanding, I haven't",
    "start": "1637770",
    "end": "1646280"
  },
  {
    "text": "told you how the scheduler\nactually works-- is to write a program that's got a lot of\nparallelism that you can get linear speedup.",
    "start": "1646280",
    "end": "1651970"
  },
  {
    "start": "1651970",
    "end": "1658070"
  },
  {
    "start": "1657000",
    "end": "1657000"
  },
  {
    "text": "Well, the work-stealing\nscheduler we actually use. The problem is the greedy\nschedulers can be hard to compute-- especially if you\nimagine having a million",
    "start": "1658070",
    "end": "1664670"
  },
  {
    "text": "processors in a program with\na billion fold parallelism. Finding on every clock cycle,\nfinding something for each of",
    "start": "1664670",
    "end": "1670940"
  },
  {
    "text": "the million guys to do is\nconceptually difficult, so instead we have a work-stealing\nscheduler.",
    "start": "1670940",
    "end": "1677519"
  },
  {
    "text": "I'll talk about that\nin a second. It achieves bounds which are\nnot quite as good as those.",
    "start": "1677520",
    "end": "1682970"
  },
  {
    "text": "This bound is the same. It's the sum of two terms. One\nis the linear speedup term, but instead of it being T sub\ninfinity it's big O of T sub",
    "start": "1682970",
    "end": "1689740"
  },
  {
    "text": "infinity because you actually\nhave to do communication sometimes if the critical\npath length is long.",
    "start": "1689740",
    "end": "1697530"
  },
  {
    "text": "Basically, you can\nsort of imagine. If you have a lot of things to\ndo, a lot of tasks and people to do it, it's easy to do that\nin parallel if there's no",
    "start": "1697530",
    "end": "1705840"
  },
  {
    "text": "interdependencies\namong the tasks. But as soon as there's\ndependencies you end up having to coordinate a lot and that\ncommunication costs--",
    "start": "1705840",
    "end": "1713530"
  },
  {
    "text": "there's lots of lore about\nadding programmers to a task and it slowing you down.",
    "start": "1713530",
    "end": "1721590"
  },
  {
    "text": "Because basically communication\ngets you. What we found empirically--",
    "start": "1721590",
    "end": "1727170"
  },
  {
    "text": "there's a theorem for this-- empirically the runtime is\nactually still very close to",
    "start": "1727170",
    "end": "1733130"
  },
  {
    "text": "the sum of those terms. Or maybe\nit's those terms plus 2 times T sub infinity or\nsomething like that.",
    "start": "1733130",
    "end": "1740610"
  },
  {
    "text": "And again, we basically get\nnear-perfect speedup as long as the number of processors\nis a lot less than the parallelism.",
    "start": "1740610",
    "end": "1746250"
  },
  {
    "text": "Should be sort of a less\nthan less than. ",
    "start": "1746250",
    "end": "1752320"
  },
  {
    "text": "The compiler has the mode where\nyou basically can insert instrumentations. So you can run your program,\nit'll tell you the critical",
    "start": "1752320",
    "end": "1757700"
  },
  {
    "text": "path length. You can compute these numbers. Clear how to compute work, you\njust sum up the runtime of all",
    "start": "1757700",
    "end": "1763220"
  },
  {
    "text": "the threads. To compute the critical path\nlength, well you have to do some max's and stuff as you\ngo through the graph.",
    "start": "1763220",
    "end": "1771540"
  },
  {
    "text": "And the average cost of a spawn\nthese days is about 3 on like a dual core pentium.",
    "start": "1771540",
    "end": "1779580"
  },
  {
    "text": "Three times the cost\nof a function call. And most of that cost actually\nhas to do with the memory",
    "start": "1779580",
    "end": "1785080"
  },
  {
    "text": "barrier that we do at the spawn\nbecause that machine doesn't have strong\nconsistencies. So you have to put this memory\nbarrier in and that just",
    "start": "1785080",
    "end": "1792360"
  },
  {
    "text": "empties all the pipelines.  It does better on like an SGI\nmachine, which has strong--",
    "start": "1792360",
    "end": "1800100"
  },
  {
    "text": "well, traditional. A MIPS machine that has strong\nconsistency actually does better for the cost\nof that overhead.",
    "start": "1800100",
    "end": "1808440"
  },
  {
    "text": "Let me talk a little\nbit about chess. And we had a bunch of chess\nprograms. I wrote one in 1994,",
    "start": "1808440",
    "end": "1816410"
  },
  {
    "start": "1810000",
    "end": "1810000"
  },
  {
    "text": "which placed third at the\nInternational Computer Chess Championship and that was\nrunning on a big connection",
    "start": "1816410",
    "end": "1821940"
  },
  {
    "text": "machine CM5. I was one of the architects\nof that machine, so it was double fun.",
    "start": "1821940",
    "end": "1827770"
  },
  {
    "text": "We wrote another program that\nplaced second in '95 and that was running on an 1800 node\nParagon and that was a big",
    "start": "1827770",
    "end": "1834860"
  },
  {
    "text": "computer back then. We built another program called\nCilk chess, which",
    "start": "1834860",
    "end": "1840520"
  },
  {
    "text": "placed first in '96 running on\na relatively smaller machine.",
    "start": "1840520",
    "end": "1846440"
  },
  {
    "text": "And then on a larger SGI origin\nwe ran some more and",
    "start": "1846440",
    "end": "1852809"
  },
  {
    "text": "then at the World Computer Chess\nChampionship in 1999 we beat Deep Blue and\nlost to a PC.",
    "start": "1852810",
    "end": "1861270"
  },
  {
    "text": " And people don't realize this,\nbut at the time that Deep Blue",
    "start": "1861270",
    "end": "1867570"
  },
  {
    "text": "beat Kasparov it was not the\nWorld Computer Chess Champion, a PC was.",
    "start": "1867570",
    "end": "1873290"
  },
  {
    "text": "So what? It's running a program. ",
    "start": "1873290",
    "end": "1880930"
  },
  {
    "text": "You know, there's this\nhead and a tape. ",
    "start": "1880930",
    "end": "1886830"
  },
  {
    "text": "I don't know what it did. So this was a program called\nFritz, which is a commercially",
    "start": "1886830",
    "end": "1891980"
  },
  {
    "text": "available program. And those guys were very good,\nthe PC guys playing were very",
    "start": "1891980",
    "end": "1898450"
  },
  {
    "text": "good at getting on sort\nof the algorithm side. We got advantage\nby brute force.",
    "start": "1898450",
    "end": "1904680"
  },
  {
    "text": "And we also had some real chess\nexpertise on our team, but those guys were spending\nfull time on things like",
    "start": "1904680",
    "end": "1911060"
  },
  {
    "text": "pruning away sub-searches that\nthey were convinced weren't going to pan out. Computer chess programs spend\nmost of their time looking at",
    "start": "1911060",
    "end": "1918340"
  },
  {
    "text": "situations that any person would\nlook at and say, ah, blacks won. Why are you even looking\nat this? And it keeps searching.",
    "start": "1918340",
    "end": "1923820"
  },
  {
    "text": "It's like, well maybe there's\na way to get the queen. ",
    "start": "1923820",
    "end": "1930480"
  },
  {
    "text": "So computers are pretty\ndumb at that. So basically these guys put a\nlot more chess intelligence in and we also lost due to what--\nin this particular game, we",
    "start": "1930480",
    "end": "1939270"
  },
  {
    "text": "were tied for first place and we\ndecided to do a runoff game",
    "start": "1939270",
    "end": "1944570"
  },
  {
    "text": "to find out who would win and\nwe lost due to a classic horizon effect.",
    "start": "1944570",
    "end": "1949960"
  },
  {
    "text": "So it turns out that we were\nsearching to depth 12 in the tree and Fritz was searching\nto depth 11.",
    "start": "1949960",
    "end": "1955280"
  },
  {
    "text": "Even with all these heuristics\nand stuff they had in it, they were still not searching\nas deeply as we were.",
    "start": "1955280",
    "end": "1961280"
  },
  {
    "text": "But there was a move that was a\ngood move that looked OK at depth 11 and looked bad at depth\n11 and at depth 13 it",
    "start": "1961280",
    "end": "1969290"
  },
  {
    "text": "looked really good again.  So they saw the move and made\nit for the wrong reason, we",
    "start": "1969290",
    "end": "1976460"
  },
  {
    "text": "saw the move and didn't make it\nfor the right reason, but it was wrong and the right\nmove-- if we'd been able to",
    "start": "1976460",
    "end": "1982120"
  },
  {
    "text": "search a little deeper, we would\nhave seen that it was really the wrong thing to do.",
    "start": "1982120",
    "end": "1988070"
  },
  {
    "text": "This happens all the\ntime in chess. There's a little randomness\nin there. This horizon effect shows up\nand again, it boils down to",
    "start": "1988070",
    "end": "1993820"
  },
  {
    "text": "the programs are not\nintelligent. A human would look at it and\nsay, eventually that knight's going to fall.",
    "start": "1993820",
    "end": "1999730"
  },
  {
    "text": "But if the computer can't see\nit with a search, you know? ",
    "start": "1999730",
    "end": "2007190"
  },
  {
    "text": "We plotted the speedup of star\nSocrates, which was the first one on this funny graph.",
    "start": "2007190",
    "end": "2013330"
  },
  {
    "text": "So this looks sort of like a\ntypical linear speedup graph. Sort of when you're down here\nwith few numbers processors you get good linear speedup\nand eventually you stop",
    "start": "2013330",
    "end": "2020659"
  },
  {
    "text": "getting linear speedup. That's sort of in broad\nstrokes what this graph looks like. But the axes are\nkind of funny.",
    "start": "2020660",
    "end": "2026510"
  },
  {
    "text": "The axes aren't the number of\nprocessors and the speedup-- it's the number processors\ndivided by the parallelism of",
    "start": "2026510",
    "end": "2034250"
  },
  {
    "text": "the program. And here is the speedup divided\nby the parallelism of the program.",
    "start": "2034250",
    "end": "2039400"
  },
  {
    "text": "And the reason we did that is\nthe each of these data points is a different program with\ndifferent work in span.",
    "start": "2039400",
    "end": "2045540"
  },
  {
    "text": " If I'm trying to run a\nparticular problem on a bunch",
    "start": "2045540",
    "end": "2050720"
  },
  {
    "text": "of different processors I can\njust draw that curve and see what happens as get\nmore processors.",
    "start": "2050720",
    "end": "2055950"
  },
  {
    "text": " I'm not getting any advantage\nbecause I've got too many",
    "start": "2055950",
    "end": "2060960"
  },
  {
    "text": "processors. I've exceeded the parallelism\nof the program. But if I'm running, trying\nto compare two different programs, how do I do that?",
    "start": "2060960",
    "end": "2067169"
  },
  {
    "start": "2067000",
    "end": "2067000"
  },
  {
    "text": "Well, you can do that by\nnormalizing by the parallelism. So down in this domain the\nnumber of processors is small",
    "start": "2067170",
    "end": "2075889"
  },
  {
    "text": "compared to the average\nparallelism and we get good linear speedups. And up in this the domain the\nnumber of processors is large",
    "start": "2075890",
    "end": "2083210"
  },
  {
    "text": "and it starts asymptoting to\nthe point where the speedup approaches the parallelism and\nthat's sort of what happened.",
    "start": "2083210",
    "end": "2091649"
  },
  {
    "text": "You get some noise out here so\none of the things down here, it's nice and tight. And that's because we're in\nthat domain where the",
    "start": "2091650",
    "end": "2098660"
  },
  {
    "text": "communication costs are\ninfrequently paid because there's lots of work to do. You don't have to communicate\nvery much.",
    "start": "2098660",
    "end": "2105119"
  },
  {
    "text": "Up here there's a lot of\ncommunication that happens and so the noise is showing\nup more in the data.",
    "start": "2105120",
    "end": "2112170"
  },
  {
    "text": "This curve here is the\nT sub 1 over P plus T sub infinity curve. ",
    "start": "2112170",
    "end": "2119200"
  },
  {
    "text": "The T sub P equals T sub\ninfinity curve and that's the linear speedup curve\non this graph.",
    "start": "2119200",
    "end": "2125430"
  },
  {
    "text": "So I think there's an important\nlesson in this graph besides the data itself, which\nis if you're careful about",
    "start": "2125430",
    "end": "2132119"
  },
  {
    "text": "choosing the axes, you can take\na whole bunch of data",
    "start": "2132120",
    "end": "2137920"
  },
  {
    "text": "that you couldn't see how to\nplot it together and you can plot it together and get\nsomething meaningful. So in my Ph.D. thesis I had\nhundreds of little plots for",
    "start": "2137920",
    "end": "2146130"
  },
  {
    "text": "each chess position and I didn't\nfigure out how-- it's like they all look\nthe same, right? But I didn't sort of figure out\nthat if I was careful I",
    "start": "2146130",
    "end": "2153050"
  },
  {
    "text": "could actually make\nthem be the same. That happened after I\npublished my thesis. Oh, we could just\noverlay them.",
    "start": "2153050",
    "end": "2159030"
  },
  {
    "text": "Well, what's the normalization\nthat makes that work? So there's a speedup paradox\nthat happened.",
    "start": "2159030",
    "end": "2165540"
  },
  {
    "start": "2163000",
    "end": "2163000"
  },
  {
    "text": " Pardon? AUDIENCE: [OBSCURED]",
    "start": "2165540",
    "end": "2171480"
  },
  {
    "text": "BRADLEY KUSZMAUL: Yeah, OK. There was a speedup paradox that\nhappened while we were developing star Socrates.",
    "start": "2171480",
    "end": "2176650"
  },
  {
    "text": "We were developing this for\n512 processor connection machine that was at University\nof Illinois, but we only had a",
    "start": "2176650",
    "end": "2184520"
  },
  {
    "text": "smaller machine on which\nto do our development. We had a 128 processor machine\nat MIT and most days I could",
    "start": "2184520",
    "end": "2190910"
  },
  {
    "text": "only get 32 processors\nbecause the machine was in heavy demand. So we had this program\nand it ran on 32",
    "start": "2190910",
    "end": "2198240"
  },
  {
    "text": "processors in 65 seconds. And one of the developers said,\nhere's a variation on",
    "start": "2198240",
    "end": "2204260"
  },
  {
    "text": "the algorithm, it\nchanges the dag. It's a heuristic. It makes the program\nrun more efficient.",
    "start": "2204260",
    "end": "2210510"
  },
  {
    "text": "Look, it runs in only 40 seconds\non 32 processors. And so is that a good idea?",
    "start": "2210510",
    "end": "2215849"
  },
  {
    "text": "It sure seemed like a good idea,\nbut we were worried that we knew that the transformation\nincreased the",
    "start": "2215850",
    "end": "2221890"
  },
  {
    "text": "critical path length of the\nprogram, so we weren't sure it was a good idea. So we did some calculation.",
    "start": "2221890",
    "end": "2227660"
  },
  {
    "text": "We measured the work\nand the speedup. And so the work here-- these numbers have been cooked\na little bit to make the math",
    "start": "2227660",
    "end": "2234340"
  },
  {
    "text": "easy, but the numbers--",
    "start": "2234340",
    "end": "2239950"
  },
  {
    "text": "this really did happen, but not\nwith these exact numbers.",
    "start": "2239950",
    "end": "2244980"
  },
  {
    "text": "So we had a work which was 2048\nseconds and only 1 second of critical path. And over this new program had\nonly 1/2 as much work to do,",
    "start": "2244980",
    "end": "2253430"
  },
  {
    "text": "but the critical path\nlength was longer. It was 8 seconds long. ",
    "start": "2253430",
    "end": "2260190"
  },
  {
    "text": "If you predict on 32 processors\nwhat the runtime's going to be that formula\nsays well, 65 seconds.",
    "start": "2260190",
    "end": "2266740"
  },
  {
    "text": "If you predict it on 32\nprocessors this-- well, it's 40 seconds and that looks good,\nbut we were going to be",
    "start": "2266740",
    "end": "2273540"
  },
  {
    "text": "running the tournament on 512\nprocessors where this term would start being less important\nthan this term.",
    "start": "2273540",
    "end": "2282030"
  },
  {
    "text": "So this really did happen and\nwe actually went back and validated that these numbers\nwere right after we did the",
    "start": "2282030",
    "end": "2287200"
  },
  {
    "text": "calculation and it allowed us to\ndo the engineering to make the right decision and not be\nmisled by something that",
    "start": "2287200",
    "end": "2294310"
  },
  {
    "text": "looked good in the\ntest environment. We were able to predict what was\ngoing to happen on the big",
    "start": "2294310",
    "end": "2301090"
  },
  {
    "text": "machine without actually having\naccess to the big machine and that was\nvery important. ",
    "start": "2301090",
    "end": "2307660"
  },
  {
    "text": "Let me do some algorithms. You\nguys probably have done some matrix multipliers over the\npast 3 weeks, right?",
    "start": "2307660",
    "end": "2314000"
  },
  {
    "text": "That's probably the only thing\nyou've been able to do would be my guess. So matrix multiplication\nis this operation.",
    "start": "2314000",
    "end": "2320680"
  },
  {
    "text": "I won't talk about it, but\nyou know what it is. In Cilk instead of doing the\nstandard triply nested loops",
    "start": "2320680",
    "end": "2327240"
  },
  {
    "text": "you do divide and conquer. We don't parallelize loops we\nparallelize function calls, so",
    "start": "2327240",
    "end": "2332825"
  },
  {
    "text": "you want to express a\nloops as recursion. So to multipliy two big matrices\nyou do a whole bunch",
    "start": "2332825",
    "end": "2340460"
  },
  {
    "text": "of little matrix multiplications\nof the sub-blocks and then you express\nthose little matrix multiplications themselves and\ngo off and recursively do",
    "start": "2340460",
    "end": "2347869"
  },
  {
    "text": "smaller matrix multiplications. So this requires 8\nmultiplications of matrices",
    "start": "2347870",
    "end": "2352980"
  },
  {
    "text": "these of 1/2 the number of\nrows and 1/2 the number columns an one edition at the\nend where you add these two",
    "start": "2352980",
    "end": "2359280"
  },
  {
    "text": "matrices together. That's the algorithm that we do,\nit's the same total work",
    "start": "2359280",
    "end": "2365599"
  },
  {
    "text": "as the standard one, but it's\njust expressed recursively. So a matrix multiply is you\ndo these 8 multiplies.",
    "start": "2365600",
    "end": "2372849"
  },
  {
    "text": "I had to create a temporary\nvariable, so the first four multiplies the A's and B's\ninto C. The second four",
    "start": "2372850",
    "end": "2380539"
  },
  {
    "text": "multiply the A's and B's into\nT and then I have to add T into C. So I do all those\nspawns, do all the multiplies.",
    "start": "2380540",
    "end": "2388880"
  },
  {
    "text": "I do a sync because I better not\nstart using the results on the multiplies and adding them\nuntil the multiplies are done.",
    "start": "2388880",
    "end": "2395030"
  },
  {
    "text": "AUDIENCE: Which four\ndo you add? BRADLEY KUSZMAUL: What? There's parallelism in add. ",
    "start": "2395030",
    "end": "2401619"
  },
  {
    "text": "Matrix addition. AUDIENCE: Yeah, but it doesn't\nadd spawn extent BRADLEY KUSZMAUL: Well,\nwe spawn off add.",
    "start": "2401620",
    "end": "2408330"
  },
  {
    "text": "I don't understand-- [INTERPOSING VOICES] BRADLEY KUSZMAUL: So you have\nto spawn Cilk functions even",
    "start": "2408330",
    "end": "2415550"
  },
  {
    "text": "if you're only executing\none of them at a time. ",
    "start": "2415550",
    "end": "2420760"
  },
  {
    "text": "Cilk functions are spawned,\nC functions are called. It's a decision that's built\ninto the language.",
    "start": "2420760",
    "end": "2426810"
  },
  {
    "text": "It's not really a fundamental\ndecision. It's just that's the\nway we did it. AUDIENCE: Why'd you choose to\nhave the key word then?",
    "start": "2426810",
    "end": "2432703"
  },
  {
    "text": "That's just documentation\nfrom the caller side? BRADLEY KUSZMAUL: Yeah, we found\nwe were less likely to make a mistake if we sort of\nbuilt it into the type system",
    "start": "2432703",
    "end": "2441420"
  },
  {
    "text": "in this way. But I'm not convinced that this\nis the best way to do this type system.",
    "start": "2441420",
    "end": "2447990"
  },
  {
    "text": "AUDIENCE: Can the C functions\nspawn a Cilk function. BRADLEY KUSZMAUL: No. You can only call spawn, spawn,\nspawn, spawn then you can call C functions\nat the leaves.",
    "start": "2447990",
    "end": "2455390"
  },
  {
    "text": "It turns out you can actually\nspawn Cilk functions if you're a little clever about-- there's\na mechanism for a Cilk",
    "start": "2455390",
    "end": "2461309"
  },
  {
    "text": "system running in the background\nand if you're running C you can\nsay OK, do this Cilk function in parallel.",
    "start": "2461310",
    "end": "2467570"
  },
  {
    "text": "So we have that, but that's\nnot didactic. ",
    "start": "2467570",
    "end": "2473805"
  },
  {
    "text": "AUDIENCE: Sorry, I\nhave a question about the sync spawning. Is the sync actually doing a\nwhole wave or -- like, in the",
    "start": "2473805",
    "end": "2482487"
  },
  {
    "text": "case of-- maybe not in the case\nof the add here, but in",
    "start": "2482487",
    "end": "2487720"
  },
  {
    "text": "plenty of other practical\nfunctions you get inside the spawn function looking\nat the tendencies of",
    "start": "2487720",
    "end": "2495187"
  },
  {
    "text": "the parameters, right? Based on how those\nwere built from previous spawned funcitons.",
    "start": "2495187",
    "end": "2500960"
  },
  {
    "text": "You can actually just start\nprocessing so long as it's guaranteed that the results\nare available before you",
    "start": "2500960",
    "end": "2507006"
  },
  {
    "text": "actually read them. BRADLEY KUSZMAUL: So there's\nthis other style of expressing parallelism which you see\nin some of the data flow languages where you say well,\nI've computed this first",
    "start": "2507006",
    "end": "2514480"
  },
  {
    "text": "multiply, why can't I get\nstarted on the corresponding part of the addition.",
    "start": "2514480",
    "end": "2520030"
  },
  {
    "text": "And it turns out that in those\nmodels there's no performance guarantees. ",
    "start": "2520030",
    "end": "2527109"
  },
  {
    "text": "The real issue is you\nrun out of memory. ",
    "start": "2527110",
    "end": "2532220"
  },
  {
    "text": "It's a long topic, let's not\ngo into it, but there's a serious technical issue with\nthose programming models.",
    "start": "2532220",
    "end": "2537560"
  },
  {
    "text": " We have very tight memory\nbounds as well, so we simultaneously get these good\nscheduling bounds and good",
    "start": "2537560",
    "end": "2545310"
  },
  {
    "text": "memory bounds and if you are\ndoing that you could have sort of a really large number of\ntemporaries required and run",
    "start": "2545310",
    "end": "2550910"
  },
  {
    "text": "out of memory. The data flow machine used to\nhave this number-- there was a student, Ken Traub, who was\nworking on Monsoon when Greg",
    "start": "2550910",
    "end": "2558295"
  },
  {
    "text": "Papadapolous was here and he\ncame up with this term which we called Traub's constant,\nwhich was how long the machine",
    "start": "2558295",
    "end": "2565390"
  },
  {
    "text": "could be guaranteed to run\nbefore it crashed from being out of memory. And that was-- well, he took\nthe rate at which it Kahn's",
    "start": "2565390",
    "end": "2571910"
  },
  {
    "text": "divided by the amount of\nmemory and that was it.",
    "start": "2571910",
    "end": "2576960"
  },
  {
    "text": "And many data flow programs had\nthat property that Monsoon could run for 40 seconds\nand then after",
    "start": "2576960",
    "end": "2582460"
  },
  {
    "text": "that you never knew. It might start crashing at any\nmoment, so everybody wrote short data flow programs.",
    "start": "2582460",
    "end": "2591770"
  },
  {
    "text": "So one of the things you\nactually do when you're implementing, when you're trying\nto engineer this to go fast, is you course in the\nbase case, which I didn't",
    "start": "2591770",
    "end": "2598539"
  },
  {
    "text": "describe up there. You don't just do a 1 by 1\nmatrix multiplied down there at the leaves of\nthis recursion.",
    "start": "2598540",
    "end": "2604970"
  },
  {
    "text": "Because then you're not using\nthe processor pipeline efficiently. You call the Intel Math Kernel\nLibrary or something on an 8",
    "start": "2604970",
    "end": "2611980"
  },
  {
    "text": "by 8 matrix so that it really\ngets the pipeline a chance to chug away. ",
    "start": "2611980",
    "end": "2618740"
  },
  {
    "start": "2617000",
    "end": "2617000"
  },
  {
    "text": "So analysis. This matrix addition operation--\nwell, what's the work for matrix addition?",
    "start": "2618740",
    "end": "2625390"
  },
  {
    "text": "Well the work to do a matrix\noperation on n rows is well,",
    "start": "2625390",
    "end": "2630819"
  },
  {
    "text": "you have to do 4 additions\nof size n over 2. Plus there's order 1 work\nhere for the sync.",
    "start": "2630820",
    "end": "2638370"
  },
  {
    "text": "And that recurrence has solution\norder n squared.",
    "start": "2638370",
    "end": "2644080"
  },
  {
    "text": "Well, that's not surprising. You have to add up 2 matrices\nwhich are n by n. That's going to be n squared\nso that's a good result.",
    "start": "2644080",
    "end": "2650900"
  },
  {
    "text": "The critical path for this is\nwell, you have to do all of these in parallel.",
    "start": "2650900",
    "end": "2656349"
  },
  {
    "text": "So whatever the critical path of\nthe longest one is, they're all the same so it's just the\ncritical path of the size n",
    "start": "2656350",
    "end": "2663350"
  },
  {
    "text": "over 2 plus quarter 1, so the\ncritical path is order log n.",
    "start": "2663350",
    "end": "2669350"
  },
  {
    "text": "For matrix multiplication,\nsort of the reason I do this is I can.",
    "start": "2669350",
    "end": "2676840"
  },
  {
    "text": "This is a model which I can\ndo this analysis, so I have to do it. But really, being able to do\nthis analysis is important",
    "start": "2676840",
    "end": "2683740"
  },
  {
    "text": "when you're trying to make\nthings run faster. Matrix multiplication, well,\nthe work is I have to do 8",
    "start": "2683740",
    "end": "2688800"
  },
  {
    "text": "little matrix multiplies plus\nI have to do the matrix add. ",
    "start": "2688800",
    "end": "2696350"
  },
  {
    "text": "The work has solution order n\ncubed and everybody knows that there's order n cubed multiply\nadds in a matrix multiplier,",
    "start": "2696350",
    "end": "2701990"
  },
  {
    "start": "2701000",
    "end": "2701000"
  },
  {
    "text": "so that's not very surprising. The critical path is-- well, I\nhave to do a add so that takes",
    "start": "2701990",
    "end": "2709700"
  },
  {
    "text": "log n, plus I have to do a\nmultiply on a matrix that's 1/2 the size. So the critical path length of\nthe whole thing has solution",
    "start": "2709700",
    "end": "2716990"
  },
  {
    "text": "order log squared n. So the total parallelism of\nmatrix multiplication is the",
    "start": "2716990",
    "end": "2725670"
  },
  {
    "text": "work over the span, which is\nn cubed over log squared n.",
    "start": "2725670",
    "end": "2730900"
  },
  {
    "text": "So if you have a 1000 by 1000\nmatrix that means your parallelism is close\nto 10 million.",
    "start": "2730900",
    "end": "2737860"
  },
  {
    "text": "There's a lot of parallelism\nand in fact, we see perfect linear speedup on matrix\nmultiply because there's so",
    "start": "2737860",
    "end": "2743760"
  },
  {
    "text": "much parallelism in it.  It turns out that this stack\ntemporary that I created so",
    "start": "2743760",
    "end": "2751270"
  },
  {
    "start": "2747000",
    "end": "2747000"
  },
  {
    "text": "that I could do these multiplies\nall in parallel is actually costing me work because\nI'm on a machine that",
    "start": "2751270",
    "end": "2757870"
  },
  {
    "text": "has cache and I want to use\nthe cache effectively. So I really don't want to create\na whole big temporary matrix and blow my cache\nout if I can avoid it.",
    "start": "2757870",
    "end": "2766779"
  },
  {
    "text": "So I proposed the following\nmatrix multiply, which is I first do 4 of the matrix\nmultiplies into C1 then I do a",
    "start": "2766780",
    "end": "2774950"
  },
  {
    "text": "sync and then I do the other\n4 into C1 and another sync.",
    "start": "2774950",
    "end": "2780829"
  },
  {
    "text": "And I forgot to do the add-- oh,\nno those are multiply adds so they're multiplying\nand adding in.",
    "start": "2780830",
    "end": "2786850"
  },
  {
    "text": "And this saves space because it\ndoesn't need a temporary, but it increases the\ncritical path.",
    "start": "2786850",
    "end": "2792960"
  },
  {
    "text": "So is that a good idea\nabout or a bad idea? Well, we can answer part of that\nquestion with analysis.",
    "start": "2792960",
    "end": "2799410"
  },
  {
    "text": "Saving space we know is going\nto save something. What does it do to the work\nin critical path? Well, the work is still the\nsame, it's n cubed because we",
    "start": "2799410",
    "end": "2807220"
  },
  {
    "text": "didn't change the number of\nflops that we're doing. But the critical\npath has grown. Instead of doing 1 times a\nmatrix multiply, we have to do",
    "start": "2807220",
    "end": "2816529"
  },
  {
    "text": "one and then sync and\nthen do another one. So it's 2 matrix multiplies of\n1/2 the size plus the order 1",
    "start": "2816530",
    "end": "2822140"
  },
  {
    "text": "and that recurrence has solution\norder n instead of order log squared n.",
    "start": "2822140",
    "end": "2829300"
  },
  {
    "text": "So that sounds bad, we've made\nthe critical path longer. AUDIENCE: [OBSCURED] BRADLEY KUSZMAUL: What? Yeah.",
    "start": "2829300",
    "end": "2835010"
  },
  {
    "text": "So parallelism is now order n\nsquared instead of n cubed over log squared n and for a\n1000 by 1000 matrix that means",
    "start": "2835010",
    "end": "2842240"
  },
  {
    "text": "you still have a million\nfold parallelism. So for relatively modest sized\nmatrices you still have plenty",
    "start": "2842240",
    "end": "2847900"
  },
  {
    "text": "of work to do this\noptimization. So this is a good transformation\nto do it. One of the advantages of Cilk\nis that you can do this kind",
    "start": "2847900",
    "end": "2854680"
  },
  {
    "text": "of You could say, let me\ndo an optimization. I can do an optimization in my\nC code and I get to take",
    "start": "2854680",
    "end": "2860340"
  },
  {
    "text": "advantage of it in\nthe Cilk code. I could do this kind of\noptimization of trading work",
    "start": "2860340",
    "end": "2865580"
  },
  {
    "text": "for parallelism. If I have a lot of work that\nsometimes is a good idea. Ordinary matrix multiplication\njust is really bad.",
    "start": "2865580",
    "end": "2873810"
  },
  {
    "start": "2869000",
    "end": "2869000"
  },
  {
    "text": "Basically you can imagine\nspawning off the n squared inner dot products here and",
    "start": "2873810",
    "end": "2880180"
  },
  {
    "text": "computing them all in parallel. It has work n cubed\nparallelism log n.",
    "start": "2880180",
    "end": "2886560"
  },
  {
    "text": "I mean, critical path log n so\nthe parallelism's even better. It's n cubed over log n\ninstead of n squared.",
    "start": "2886560",
    "end": "2893480"
  },
  {
    "text": "That looks better theoretically,\nbut it's really bad in practice because it has\nsuch poor cache behavior.",
    "start": "2893480",
    "end": "2899430"
  },
  {
    "text": "So we don't do that. I'll just briefly talk\nabout how it works.",
    "start": "2899430",
    "end": "2905359"
  },
  {
    "text": "So Cilk does work-stealing. We had did double ended\nqueue-like decque. So at the bottom of the queue\nis the stack where you push",
    "start": "2905360",
    "end": "2911994"
  },
  {
    "text": "and pop things and the top is\nsomething where you can pop things off if you want to. And so what's running is all\nthese processors are running",
    "start": "2911995",
    "end": "2918790"
  },
  {
    "text": "each on their own stack. They're all running the\nordinary serial code. That's sort of the\nbasic situation.",
    "start": "2918790",
    "end": "2924700"
  },
  {
    "text": "They're pretty much\nrunning the serial code most of the time. So some processor runs.",
    "start": "2924700",
    "end": "2930170"
  },
  {
    "text": "It pushes. Well, it doesn't spawn,\nso what does it do? It pushes something onto its\nstack because it's just a function call.",
    "start": "2930170",
    "end": "2937080"
  },
  {
    "text": "And it does another couple more\nspawns so things pop off. Somebody returns so\nhe pops his stack.",
    "start": "2937080",
    "end": "2944180"
  },
  {
    "text": "So far everything's going on,\nthey're not communicating, they're completely independent\ncomputations.",
    "start": "2944180",
    "end": "2950640"
  },
  {
    "text": "This guy spawns and now\nhe's out of work. Now he has to do something. What he does is he goes and\npicks another processor at",
    "start": "2950640",
    "end": "2957090"
  },
  {
    "text": "random and he steals\nthe thing from the",
    "start": "2957090",
    "end": "2962270"
  },
  {
    "text": "other end of the stack. So he's unlikely to conflict\nbecause this guy's pushing and popping down here, but there's\na lock in there, thers's a",
    "start": "2962270",
    "end": "2968900"
  },
  {
    "text": "little algorithm. A non-blocking algorithm\nactually, it's not lock.",
    "start": "2968900",
    "end": "2974680"
  },
  {
    "text": "And so he goes and he steals\nsomething and come on, slide over there.",
    "start": "2974680",
    "end": "2979690"
  },
  {
    "text": "Whoa. Yes, that's animation, right? That's the extent\nof my animation.",
    "start": "2979690",
    "end": "2987339"
  },
  {
    "text": "And then he starts\nworking away. And the theorem is that a\nwork-stealing scheduler like",
    "start": "2987340",
    "end": "2992800"
  },
  {
    "text": "this gives expected running\ntime with high probability actually of T sub 1 over P\nplus T sub infinity on P",
    "start": "2992800",
    "end": "2999280"
  },
  {
    "text": "processors. And the pseudoproof is a little\nbit like the proof for Brent's Theorem,\nwhich is either",
    "start": "2999280",
    "end": "3005270"
  },
  {
    "text": "you're working or stealing. If you're working well, that\ngoes against T sub 1 over P.",
    "start": "3005270",
    "end": "3011050"
  },
  {
    "text": "You can't do that very much\nor you run out of work. If you're stealing well, each\nsteal has a chance that it",
    "start": "3011050",
    "end": "3019210"
  },
  {
    "text": "steals the thing that's\non the critical path. You may actually steal the wrong\nthing, but you actually have a 1 in P chance that you're\nthe one who steals the",
    "start": "3019210",
    "end": "3026910"
  },
  {
    "text": "thing that it's on the critical\npath and then in which case the expected\nnumber-- so you had this chance of\n1 over P of reducing the",
    "start": "3026910",
    "end": "3034059"
  },
  {
    "text": "critical path length by 1, so\nafter this many steals the critical path is all gone.",
    "start": "3034060",
    "end": "3039750"
  },
  {
    "text": "So you can only do P times\nT infinity steals. This high probability\nit comes out.",
    "start": "3039750",
    "end": "3046750"
  },
  {
    "text": "And that gives you\nthese bounds. OK, I'm not going to give\nyou all this stuff.",
    "start": "3046750",
    "end": "3054109"
  },
  {
    "text": "Message passing sucks,\nyou know. You guys know.",
    "start": "3054110",
    "end": "3059170"
  },
  {
    "text": "There's probably nothing\nelse in here. ",
    "start": "3059170",
    "end": "3065270"
  },
  {
    "text": "So basically the pitch here is\nthat you get some high level linguistics support for these\nvery fine-grained parallelism.",
    "start": "3065270",
    "end": "3073620"
  },
  {
    "text": "It's an algorithmic programming\nmodel so that means that you can do\nengineering for performance.",
    "start": "3073620",
    "end": "3079640"
  },
  {
    "text": "There's fairly easy conversion\nof existing code, especially when you combine it with\nthe race detector.",
    "start": "3079640",
    "end": "3084770"
  },
  {
    "text": "You've got this factorization\nof the debugging problem and to debugging your serial code\nis you run it with all the",
    "start": "3084770",
    "end": "3090930"
  },
  {
    "text": "Cilk stuff turned off. You allied the program and make\nsure your program works. Then you run it with the rate\ndetector to make sure you get",
    "start": "3090930",
    "end": "3096700"
  },
  {
    "text": "the same answer in parallel\nand then you're done. Applications in Cilk don't just\nscale to large number of",
    "start": "3096700",
    "end": "3104310"
  },
  {
    "text": "processors, they scale down\nto small numbers, which is important if you only have\ntwo processors or one.",
    "start": "3104310",
    "end": "3109890"
  },
  {
    "text": "You don't suddenly want to pay\na factor of 10 to get off the ground, which happens\nsometimes on",
    "start": "3109890",
    "end": "3115820"
  },
  {
    "text": "clusters running MPI. You have to pay a big\noverhead before you've made any progress.",
    "start": "3115820",
    "end": "3121700"
  },
  {
    "text": "And one of the advantages for\nexample is that the number of processors might change\ndynamically. In this model that's\nOK because it's",
    "start": "3121700",
    "end": "3129520"
  },
  {
    "text": "not part of the program. So you may have the operating\nsystem reduce the number of actual worker threads that you\nhave doing that work-stealing",
    "start": "3129520",
    "end": "3138230"
  },
  {
    "text": "and that can work. One of the bad things about\nCilk is that it doesn't support sort of data parallel\nor program model kind of",
    "start": "3138230",
    "end": "3149450"
  },
  {
    "text": "parallelism. You really have to think of\nthings as this divide and conquer kind of the world.",
    "start": "3149450",
    "end": "3155930"
  },
  {
    "text": "And if you have trouble\nexpressing that--  situations where you're doing\nJacobi update and you very",
    "start": "3155930",
    "end": "3163900"
  },
  {
    "text": "carefully put things on, had\neach processor work on its local memory and then they only\nhave to communicate at",
    "start": "3163900",
    "end": "3169930"
  },
  {
    "text": "the boundaries. That's difficult to do right\nin Cilk because essentially every time you go around the\nloop of I have all these",
    "start": "3169930",
    "end": "3176960"
  },
  {
    "text": "things to do. All the work-stealing happens\nrandomly and it happens on a different processor. So it's not very good at that\nsort of thing, although it",
    "start": "3176960",
    "end": "3183350"
  },
  {
    "text": "turns out Jacobi update's not\na very good example for that because there are more\nsophisticated algorithms that",
    "start": "3183350",
    "end": "3188790"
  },
  {
    "text": "use cache effectively that you\ncan express in Cilk and I would have no idea how to no\nsay those in some of these",
    "start": "3188790",
    "end": "3195020"
  },
  {
    "text": "sort of data parallel\nlanguages. Using the cache efficiently is\nreally important on modern",
    "start": "3195020",
    "end": "3201010"
  },
  {
    "text": "processors. PROFESSOR: Thank you. ",
    "start": "3201010",
    "end": "3207543"
  },
  {
    "text": "Questions? ",
    "start": "3207543",
    "end": "3213130"
  },
  {
    "text": "BRADLEY KUSZMAUL: You can\ndownload Cilk, there's a bunch of contributors. Those are the Cilk worms\nand you can download",
    "start": "3213130",
    "end": "3218490"
  },
  {
    "text": "Cilk off our webpage. Just Google for Cilk\nand you'll find it. It's a great language,\nyou'll love it.",
    "start": "3218490",
    "end": "3224540"
  },
  {
    "text": "You'll love it much more than\nwhat you've been doing. AUDIENCE: How does the Cilk\nplay with processor [OBSCURED]?",
    "start": "3224540",
    "end": "3234349"
  },
  {
    "text": "BRADLEY KUSZMAUL: Well, you\nhave to have a language, a compiler that can\ngenerate those. If you have an assembly command\nor you have some other",
    "start": "3234350",
    "end": "3242482"
  },
  {
    "text": "complier that can\ngenerate those. So I just won the HPC challenge,\nwhich is this",
    "start": "3242482",
    "end": "3250130"
  },
  {
    "text": "challenge where everybody tries\nto run parallel programs",
    "start": "3250130",
    "end": "3256069"
  },
  {
    "text": "and argue that they\nget productivity. For that there were some codes\nlike matrix multiply and LUD",
    "start": "3256070",
    "end": "3261870"
  },
  {
    "text": "composition with pivoting. Basically at the leads of the\ncomputation I call the Intel",
    "start": "3261870",
    "end": "3266910"
  },
  {
    "text": "Math Kernel Library. Which in turn uses the\nSSE instructions.",
    "start": "3266910",
    "end": "3272190"
  },
  {
    "text": "You could do anything you can do\nin C in the C parts of the code because Cilk compiler just\npasses those through.",
    "start": "3272190",
    "end": "3279940"
  },
  {
    "text": "So if you have some really\nefficient pipeline code for doing something, up to\nsome point it made",
    "start": "3279940",
    "end": "3287529"
  },
  {
    "text": "sense to use that. AUDIENCE: [OBSCURED]",
    "start": "3287530",
    "end": "3292619"
  },
  {
    "text": "BRADLEY KUSZMAUL: So I ran\nit on NASIS Columbia.",
    "start": "3292620",
    "end": "3298460"
  },
  {
    "text": "So the benchmark consists of--\nwell, there's 7 applications they have. 6 of which are\nactually well-defined.",
    "start": "3298460",
    "end": "3304559"
  },
  {
    "text": "One of them is this thing that\njust measures network performance or something,\nso it doesn't have any real semantics. There's 6 benchmarks.",
    "start": "3304560",
    "end": "3310020"
  },
  {
    "text": "One of them is LUD composition,\none of them is DJEM matrix multiplication and\nthis FFT and 3 others.",
    "start": "3310020",
    "end": "3318109"
  },
  {
    "text": "So I implemented all 6, nobody\nelse implemented all 6. It turns out that you had to\nimplement 3 in order to enter.",
    "start": "3318110",
    "end": "3324310"
  },
  {
    "text": "Almost everybody implemented 3\nor 4, but I did all 6 which is part of why I won.",
    "start": "3324310",
    "end": "3329540"
  },
  {
    "text": "So I could argue that in\na weeks work I just implemented-- AUDIENCE: What is [OBSCURED]?",
    "start": "3329540",
    "end": "3337510"
  },
  {
    "text": "BRADLEY KUSZMAUL: So the prize\nhas two components. Performance and productivity or\nelegance or something and",
    "start": "3337510",
    "end": "3343860"
  },
  {
    "text": "it's completely whatever the\njudges want that to be. So it was up to me as a\npresenter to make the case",
    "start": "3343860",
    "end": "3350800"
  },
  {
    "text": "that I was elegant. Because I had my performance\nnumbers, which were pretty good and it turned out that the\nIBM entry for x10 did me",
    "start": "3350800",
    "end": "3358245"
  },
  {
    "text": "more good than I did, I think. Because they got up there and\nthey compared the performance of x10 to their Cilk\nimplementation and their x10",
    "start": "3358245",
    "end": "3365330"
  },
  {
    "text": "thing was almost as\ngood as Cilk. So after that I think the judges\nsaid they had to give",
    "start": "3365330",
    "end": "3370380"
  },
  {
    "text": "me the prize. So basically, it went down to\nsupercomputing and each of us got 5 minutes to present and\nthere were 5 finalists.",
    "start": "3370380",
    "end": "3380680"
  },
  {
    "text": "We did our presentation and\nthen they gave out the -- So they divided the prize three\nways: the people who got",
    "start": "3380680",
    "end": "3388970"
  },
  {
    "text": "the absolute best performance,\nwhich were some people running UPC and the people who had the\nmost elegance based on minimal",
    "start": "3388970",
    "end": "3396950"
  },
  {
    "text": "number of lines of codes and\nthat was Cleve at -- what's his name? The Mathworks guy, MATLAB guy.",
    "start": "3396950",
    "end": "3403099"
  },
  {
    "text": "Who said, look, matrix,\nLUD composition. LU of P. It's very elegant,\nbut I don't think that it",
    "start": "3403100",
    "end": "3410109"
  },
  {
    "text": "really sort of explains what\nyou have to do to solve the problems. So he won the prize\nfor most elegant and I got the",
    "start": "3410110",
    "end": "3418250"
  },
  {
    "text": "prize for best combination,\nwhich they then changed-- in the final citation for the\nprize they said, most",
    "start": "3418250",
    "end": "3426560"
  },
  {
    "text": "productivity. That was the prize. So I actually won the contest\nbecause that was what the contest was supposed to be\nwas most productivity.",
    "start": "3426560",
    "end": "3433040"
  },
  {
    "text": "But I only won 1/3 of the\nprize money because they divided it three ways. ",
    "start": "3433040",
    "end": "3439235"
  },
  {
    "text": "PROFESSOR: Any other question? Thank you.",
    "start": "3439236",
    "end": "3444651"
  },
  {
    "text": "BRADLEY KUSZMAUL: Thank you. PROFESSOR: We'll take a 5 minute\nbreak and since you had",
    "start": "3444651",
    "end": "3450589"
  },
  {
    "text": "guest lecturer I do\nhave [OBSCURED] ",
    "start": "3450589",
    "end": "3460126"
  }
]