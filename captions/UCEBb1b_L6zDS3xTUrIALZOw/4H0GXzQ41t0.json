[
  {
    "text": "[SQUEAKING]\n[RUSTLING] [CLICKING] ",
    "start": "0",
    "end": "11530"
  },
  {
    "text": "ANA BELL: So welcome\nto the last class. Please don't come on Wednesday. I will not be here.",
    "start": "11530",
    "end": "16539"
  },
  {
    "text": "Today, we will just be tying\nup some loose ends regarding some topics that we've\nseen throughout the course.",
    "start": "16540",
    "end": "22760"
  },
  {
    "text": "And then I'm going to do just a\nwrap up of things we've learned and potential courses that you\nmight want to take after this.",
    "start": "22760",
    "end": "30890"
  },
  {
    "text": "OK. So today, as I\nmentioned, we're going to tie up some loose ends\nregarding lists, dictionaries.",
    "start": "30890",
    "end": "38329"
  },
  {
    "text": "So those two topics are\ngoing to be combined into one part of this lecture.",
    "start": "38330",
    "end": "46270"
  },
  {
    "text": "It's going to also include a\nlittle bit about complexity-- so just some things\nthat we've learned,",
    "start": "46270",
    "end": "51579"
  },
  {
    "text": "demystifying some details that I\nskipped throughout the past few lectures.",
    "start": "51580",
    "end": "56890"
  },
  {
    "text": "And then we're going to\ntalk about simulations. So simulations are\nvery, very useful--",
    "start": "56890",
    "end": "62320"
  },
  {
    "text": "is a very useful idea\nthat you can already do with what you've\nlearned in this class. And I'll show you\nsome useful places",
    "start": "62320",
    "end": "69100"
  },
  {
    "text": "where you can apply\ncomputation and simulation to do some interesting things.",
    "start": "69100",
    "end": "75330"
  },
  {
    "text": "And then we'll do the wrap up. So let's first start\ntalking about lists.",
    "start": "75330",
    "end": "81000"
  },
  {
    "text": "So lists were the first data\nstructure that we encountered. That was really useful, right?",
    "start": "81000",
    "end": "87079"
  },
  {
    "text": "We did see strings. And we did see tuples\nand things like that. But once we saw\nlists, it opened up",
    "start": "87080",
    "end": "93110"
  },
  {
    "text": "a whole new world\nof possibilities for how we can manipulate data. So lists are\nsequences of objects.",
    "start": "93110",
    "end": "99740"
  },
  {
    "text": "I kind of skipped past\nhow they're actually implemented in memory. So I do want to talk\nabout that a little bit.",
    "start": "99740",
    "end": "105659"
  },
  {
    "text": "But what we did talk\nabout was the complexity, the asymptotic complexity\nof list operations.",
    "start": "105660",
    "end": "114140"
  },
  {
    "text": "So some of these\nwere pretty obvious. So the ones that are\ntheta of n down here were obvious because,\nwell, to check",
    "start": "114140",
    "end": "120920"
  },
  {
    "text": "for equality between two lists\nyou, of course, have to look at each element in the list. So that's theta of the\nlength of the list.",
    "start": "120920",
    "end": "126710"
  },
  {
    "text": "To check whether an item is in a\nlist or to iterate over a list, obviously, it's theta\nof n because you",
    "start": "126710",
    "end": "132200"
  },
  {
    "text": "have to look at each\nelement in the list. But we didn't really talk\nabout the complexities up here.",
    "start": "132200",
    "end": "138060"
  },
  {
    "text": "So accessing an item in the\nlist specifically is theta of 1. So that means, if\nyou have a list",
    "start": "138060",
    "end": "144090"
  },
  {
    "text": "with a whole bunch\nof elements in it, to grab the element at a\nspecific memory location,",
    "start": "144090",
    "end": "149250"
  },
  {
    "text": "it's constant time complexity. So it basically doesn't depend\non the length of the list.",
    "start": "149250",
    "end": "154660"
  },
  {
    "text": "It's instant. So we're going to\nsee why that is. Let's first, for\nsimplicity's sake,",
    "start": "154660",
    "end": "160620"
  },
  {
    "text": "assume that we're storing a\nlist in memory of just integers. So I know lists can store\nother lists, and dictionaries,",
    "start": "160620",
    "end": "167790"
  },
  {
    "text": "and things like that. But just for this first slide,\nlet's assume all we're doing is storing integers.",
    "start": "167790",
    "end": "174280"
  },
  {
    "text": "So the way Python\ndoes this is when you create a list-- let's\nsay you initially populate it",
    "start": "174280",
    "end": "180390"
  },
  {
    "text": "with length L. Python initially allocates\na contiguous memory block",
    "start": "180390",
    "end": "186780"
  },
  {
    "text": "with length L memory locations. So if you have a list\nwith 100 elements in it,",
    "start": "186780",
    "end": "193530"
  },
  {
    "text": "initially, populated\nwith 100 elements in it, Python will initially\ncreate for you a sequence of memory\nlocations that",
    "start": "193530",
    "end": "200250"
  },
  {
    "text": "are reserved for this list. Then it says, well, if this is\ngoing to contain just integers,",
    "start": "200250",
    "end": "207190"
  },
  {
    "text": "I'm going to say each one\nof these memory locations will hold four bytes\nfor that integer.",
    "start": "207190",
    "end": "212920"
  },
  {
    "text": "That's how we\nrepresent an integer. And it could be eight\nbytes, something else for different machines.",
    "start": "212920",
    "end": "218360"
  },
  {
    "text": "But in this particular\nexample, let's just say each one of those\nmemory locations will store an integer. And that's four bytes long.",
    "start": "218360",
    "end": "225189"
  },
  {
    "text": "Well, if this list\nis contiguous-- a bunch of blocks of\nmemory all in order--",
    "start": "225190",
    "end": "232300"
  },
  {
    "text": "then to access the i-th\nelement, all you need to do is a little bit of math.",
    "start": "232300",
    "end": "238520"
  },
  {
    "text": "So here, I've got an\ninteger in one position in my contiguous block. Then I have maybe another\ninteger at the next position,",
    "start": "238520",
    "end": "245570"
  },
  {
    "text": "and so on, and so on until\nI have another integer at the i-th position. So since these are\nconsecutive, to access",
    "start": "245570",
    "end": "252760"
  },
  {
    "text": "the location of the\nelement in this i-th spot, all I need to do is look up\nthat many memory locations",
    "start": "252760",
    "end": "261459"
  },
  {
    "text": "from the start of my list. So that's just pure math. So one byte is eight bits.",
    "start": "261459",
    "end": "269100"
  },
  {
    "text": "So if I have 4 times\n8 bits multiplied by i",
    "start": "269100",
    "end": "276970"
  },
  {
    "text": "plus the first location,\nthat will tell me exactly the location\nof the i-th integer.",
    "start": "276970",
    "end": "283465"
  },
  {
    "text": " So this is all made possible\nbecause these memory locations",
    "start": "283465",
    "end": "290590"
  },
  {
    "text": "are allocated in order. If they were allocated\nnot in order, then maybe this\nwould not be as easy.",
    "start": "290590",
    "end": "296811"
  },
  {
    "text": "Yeah? STUDENT: Why is it 32? ANA BELL: 32 because-- so if I say an integer\nis stored as four bytes,",
    "start": "296812",
    "end": "304930"
  },
  {
    "text": "in bits that's 4 times 8 because\neight bits is in one byte. So 8 times 4 is 32 bits\nfor one byte, yeah.",
    "start": "304930",
    "end": "315300"
  },
  {
    "text": "All right, but this is assuming\nthat I'm storing integers. And obviously, lists\ncan contain other lists.",
    "start": "315300",
    "end": "323220"
  },
  {
    "text": "They can contain tuples. They can contain dictionaries. And some of those\nobjects might not",
    "start": "323220",
    "end": "329070"
  },
  {
    "text": "fit within this set number\nof bytes, within four bytes, because some of\nthose objects might",
    "start": "329070",
    "end": "334260"
  },
  {
    "text": "be very, very large themselves. So in that particular case--",
    "start": "334260",
    "end": "340300"
  },
  {
    "text": "let's say the list\nis heterogeneous-- that doesn't faze us\nbecause we can say, well,",
    "start": "340300",
    "end": "346510"
  },
  {
    "text": "instead of storing the\nobject itself at each memory location-- that\nworked for integers,",
    "start": "346510",
    "end": "352500"
  },
  {
    "text": "but might not work when we\nhave to store a list of 1,000 elements at a particular\nmemory location--",
    "start": "352500",
    "end": "359490"
  },
  {
    "text": "instead of storing the element\nitself, let's store a pointer. And a pointer is just\na number that tells you",
    "start": "359490",
    "end": "367320"
  },
  {
    "text": "which memory location that\nlist might be stored at or that dictionary\nmight be stored at.",
    "start": "367320",
    "end": "373230"
  },
  {
    "text": "So if we store a pointer at\na particular memory location, then that means that this is\nmy again contiguous memory",
    "start": "373230",
    "end": "381340"
  },
  {
    "text": "allocated for a list of length\nL or something like that-- then here, I'm storing\nstill an integer.",
    "start": "381340",
    "end": "387490"
  },
  {
    "text": "And that integer tells\nPython which memory location to jump to to grab the\ninteger that's stored there",
    "start": "387490",
    "end": "395379"
  },
  {
    "text": "or something like that. And here, I might have\nanother list that I'm storing. But I'm not storing it exactly\nin that memory location.",
    "start": "395380",
    "end": "403510"
  },
  {
    "text": "It's pointed to by this pointer\nthat tells Python, again, to jump to a different\nmemory location",
    "start": "403510",
    "end": "410200"
  },
  {
    "text": "where that list might be\ncontiguously stored itself. So here in this example,\nI'm still storing numbers.",
    "start": "410200",
    "end": "420639"
  },
  {
    "text": "It's just that these\nnumbers correspond to a memory location\nthat tells Python where to go to get my\nelement in that list.",
    "start": "420640",
    "end": "428860"
  },
  {
    "text": "So in terms of the\ncomputation to get the i-th element in the list,\nit's going to be the same.",
    "start": "428860",
    "end": "435259"
  },
  {
    "text": "I'm still allocating, in my\noriginal list, four bytes to store my pointer--",
    "start": "435260",
    "end": "440830"
  },
  {
    "text": "again, just a number. And so to get the i-th\nlocation, all I need to do is tell Python to go\nthe start of this list",
    "start": "440830",
    "end": "449110"
  },
  {
    "text": "plus 32 times i locations\ndown to get to that element.",
    "start": "449110",
    "end": "455849"
  },
  {
    "text": "So this formula here,\nadding the start",
    "start": "455850",
    "end": "461990"
  },
  {
    "text": "of this memory location of\nthe list plus 32 times i, is just math.",
    "start": "461990",
    "end": "468050"
  },
  {
    "text": "There's nothing\nhere that depends on the length of the list. So to grab the element\nat the i-th location,",
    "start": "468050",
    "end": "475820"
  },
  {
    "text": "somewhere within here, all\nwe're doing is some math-- an addition and\na multiplication.",
    "start": "475820",
    "end": "482000"
  },
  {
    "text": "And since that is just-- none of that depends\non the length of the list, the\ncomplexity to access",
    "start": "482000",
    "end": "489200"
  },
  {
    "text": "the i-th element in the\nlist is constant, just math. And we're using this idea that\nwe know exactly how many memory",
    "start": "489200",
    "end": "498530"
  },
  {
    "text": "locations we need to jump\nto get to the i-th location. Does that make sense?",
    "start": "498530",
    "end": "504260"
  },
  {
    "text": "OK. So that leads us\nto the question.",
    "start": "504260",
    "end": "510180"
  },
  {
    "text": "Well, OK, we're storing\na list of elements. And we're using the\nidea that a list has",
    "start": "510180",
    "end": "517400"
  },
  {
    "text": "indices to tell us the value-- there's an element at index\n0, an element at index 1,",
    "start": "517400",
    "end": "523880"
  },
  {
    "text": "an element at\nindex 2, and so on. So there's an order to the list.",
    "start": "523880",
    "end": "529580"
  },
  {
    "text": "And because of that order,\nwe're able to index an element at the i-th location\nin constant time.",
    "start": "529580",
    "end": "537290"
  },
  {
    "text": "But let's say we wanted\nto store a dictionary. A dictionary does not\nhave an order to it.",
    "start": "537290",
    "end": "544780"
  },
  {
    "text": "And what does a\ndictionary store? It stores a key value pair. In a list, you could think\nof the, quote unquote, \"key\"",
    "start": "544780",
    "end": "551910"
  },
  {
    "text": "as the index-- 0, 1, 2, 3, 4, and\nso on-- and the value as the element at that index.",
    "start": "551910",
    "end": "558269"
  },
  {
    "text": "But in a dictionary,\nthe key is not ordered. The key can be anything.",
    "start": "558270",
    "end": "564130"
  },
  {
    "text": "So here, I've got\na dictionary that maps maybe a name to a Boolean. Maybe the student is in\nthis class, true or false.",
    "start": "564130",
    "end": "572500"
  },
  {
    "text": "So a naive implementation of\na dictionary could be to say, well, let's implement\nelements of the dictionary--",
    "start": "572500",
    "end": "580450"
  },
  {
    "text": "so a key value pair-- as a list, so just two elements. The first element in\nthat list is my key.",
    "start": "580450",
    "end": "587700"
  },
  {
    "text": "And the second element\nin my list is my value. So here, a really naive\nimplementation uses the list.",
    "start": "587700",
    "end": "594090"
  },
  {
    "text": "And I've got four\nentries in my dictionary. The element at index\n0 are all strings.",
    "start": "594090",
    "end": "599460"
  },
  {
    "text": "The element at index\n1 in each location is my value associated\nwith that key.",
    "start": "599460",
    "end": "606700"
  },
  {
    "text": "Well, if I were to\nindex into this list to grab the value\nassociated with Eric,",
    "start": "606700",
    "end": "614139"
  },
  {
    "text": "for example, can I do\nthat in constant time? No, right?",
    "start": "614140",
    "end": "620569"
  },
  {
    "text": "Because there's no\nnumerical index here. There's no order to\nthis set of values.",
    "start": "620570",
    "end": "626210"
  },
  {
    "text": " It's not even in\nalphabetical order--",
    "start": "626210",
    "end": "631530"
  },
  {
    "text": "so A, then J, then E,\nthen S. And there's no order guaranteed for\ndictionaries anyway.",
    "start": "631530",
    "end": "636910"
  },
  {
    "text": "So in order to look up an item\nin this naive implementation of a dictionary,\nwhere you're just putting all the elements\nin order in a list,",
    "start": "636910",
    "end": "644650"
  },
  {
    "text": "it's theta of n, where n\nis the length of our list. And so this implementation\nof a dictionary doesn't work.",
    "start": "644650",
    "end": "655120"
  },
  {
    "text": "And yet, when I showed you\nthis slide a few lectures ago,",
    "start": "655120",
    "end": "660140"
  },
  {
    "text": "we saw something interesting. So this is what\nwe just \"proved,\"",
    "start": "660140",
    "end": "665379"
  },
  {
    "text": "quote unquote, the access\ntime in a list is constant.",
    "start": "665380",
    "end": "671250"
  },
  {
    "text": "But the access time\nin a dictionary is constant as well\nin the average case.",
    "start": "671250",
    "end": "678810"
  },
  {
    "text": "In the worst case,\nit is theta of n. Accessing an item in a\ndictionary is theta of n",
    "start": "678810",
    "end": "684960"
  },
  {
    "text": "because, in the\nworst case, we might store the dictionary like this. It's just a list of all\nof our dictionary entries",
    "start": "684960",
    "end": "692279"
  },
  {
    "text": "all in order. So to look up one\nindex, we'd have to go through the\nentire list and check",
    "start": "692280",
    "end": "698790"
  },
  {
    "text": "if the element at index 0 is\nthe one we're looking for, and then grab the element\nat index 1 as its value.",
    "start": "698790",
    "end": "705130"
  },
  {
    "text": "But in the average\ncase-- and this is what we're going to see next. In the average case,\nthe access, the time",
    "start": "705130",
    "end": "711579"
  },
  {
    "text": "it takes to do a lookup\nfor a key in a dictionary is constant. It's actually theta\nof 1, which makes",
    "start": "711580",
    "end": "718450"
  },
  {
    "text": "dictionaries really powerful\ndata structures to use in a lot of situations. So why is this?",
    "start": "718450",
    "end": "725130"
  },
  {
    "text": "Well, it has to do with\nthe idea of hashing. So the way that dictionaries\nare actually stored in memory",
    "start": "725130",
    "end": "732710"
  },
  {
    "text": "is not as a list of\na bunch of entries. We just showed that\nthat is not feasible.",
    "start": "732710",
    "end": "738140"
  },
  {
    "text": "That leads to a theta\nof n lookup time. So instead, they use\nsomething called a hash table.",
    "start": "738140",
    "end": "744110"
  },
  {
    "text": "We briefly spoke about this. A hash table is just\nlike a long list.",
    "start": "744110",
    "end": "751579"
  },
  {
    "text": "And the indices\nof the hash table are actually things that you\nlook up using a hash function.",
    "start": "751580",
    "end": "760310"
  },
  {
    "text": "So how does this work? Well, any key that you'd\nlike to add to a dictionary",
    "start": "760310",
    "end": "767290"
  },
  {
    "text": "actually has a hash\nfunction run on it. And this hash function takes\nin maybe an integer, maybe",
    "start": "767290",
    "end": "774220"
  },
  {
    "text": "a float, maybe a\nstring, maybe a tuple. Any hashable object\nhashes it, which",
    "start": "774220",
    "end": "781960"
  },
  {
    "text": "means it takes that object. If it's a string, it'll\ngive us an integer. If it's a tuple, it'll\ngive us an integer.",
    "start": "781960",
    "end": "787579"
  },
  {
    "text": "So if it hashes it, that means\nit takes it in as an input and gives us back a\nnumber, an integer.",
    "start": "787580",
    "end": "794350"
  },
  {
    "text": "And that integer is what\nis used as the index to look it up in the hash table,\nto look up the value associated",
    "start": "794350",
    "end": "801250"
  },
  {
    "text": "with it in a hash table. So in that sense, the lookup\nitself is constant time",
    "start": "801250",
    "end": "806640"
  },
  {
    "text": "because we just\nshowed looking up an item in a dictionary using\nthe index is constant time. And if that hash function\nis also constant time,",
    "start": "806640",
    "end": "815019"
  },
  {
    "text": "then the time it\ntakes to look up an item in a dictionary\nis also constant time.",
    "start": "815020",
    "end": "820779"
  },
  {
    "text": "So here are some examples of the\nPython hash function actually being run on different objects.",
    "start": "820780",
    "end": "827529"
  },
  {
    "text": "So up here, if I run--\nit's literally a function in Python-- hash of some parameters--\nso in this case, 123--",
    "start": "827530",
    "end": "835050"
  },
  {
    "text": "it just gives me the value back. So the hash of some number\nis the number itself.",
    "start": "835050",
    "end": "840370"
  },
  {
    "text": "We can hash a string. That'll give us this\nparticular number--",
    "start": "840370",
    "end": "846310"
  },
  {
    "text": "so again, an integer. The hash of a tuple also\ngives us some number back.",
    "start": "846310",
    "end": "852570"
  },
  {
    "text": "So these are all\njust some function running behind the scenes that\ntakes in this hashable object",
    "start": "852570",
    "end": "858839"
  },
  {
    "text": "and gives us back a number. That's it. Now, we can't run a\nhash function on a list",
    "start": "858840",
    "end": "864630"
  },
  {
    "text": "because a list is mutable\nand therefore unhashable. If the object changes,\nthen the hash function",
    "start": "864630",
    "end": "871020"
  },
  {
    "text": "run on this object will\ngive us a different value. ",
    "start": "871020",
    "end": "876570"
  },
  {
    "text": "So if you actually run\nthis on your own computer, you might get different answers. Or if you run it\nat different times,",
    "start": "876570",
    "end": "882360"
  },
  {
    "text": "you might get different\nanswers because Python adds a little bit of\nrandomness to the hash values,",
    "start": "882360",
    "end": "888240"
  },
  {
    "text": "just in case you want to encrypt\ndata and things like that. But generally, you will\nalways get some integer back",
    "start": "888240",
    "end": "893850"
  },
  {
    "text": "if you run the hash function\non an immutable object.",
    "start": "893850",
    "end": "899880"
  },
  {
    "text": "So then that begs the question,\nhow big should a hash table be? So if a hash table is\nbasically just a long list,",
    "start": "899880",
    "end": "907770"
  },
  {
    "text": "and if I run a\nfunction on some object to give me the value of\nan index within that list,",
    "start": "907770",
    "end": "913860"
  },
  {
    "text": "how big should this table be? How many indices should I have? 1,000? 1 million?",
    "start": "913860",
    "end": "919170"
  },
  {
    "text": "10 million? What's a good number? Well, let's take an\nexample of a string.",
    "start": "919170",
    "end": "925780"
  },
  {
    "text": "So for a string,\nwhat we can do is-- and we can use my\nname as an example.",
    "start": "925780",
    "end": "931220"
  },
  {
    "text": "If we want to hash my name such\nthat every single name hashes",
    "start": "931220",
    "end": "937389"
  },
  {
    "text": "to something unique, what\nwe can do is the following. So we can take each\ncharacter in somebody's name.",
    "start": "937390",
    "end": "944320"
  },
  {
    "text": "And behind the scenes, each\none of these characters actually has an integer--",
    "start": "944320",
    "end": "951940"
  },
  {
    "text": "sorry, an ASCII code\nassociated with it, which is something numeric. And what we can do is just\nconvert that number to binary.",
    "start": "951940",
    "end": "960170"
  },
  {
    "text": "So the letter capital A happens\nto be this binary value--",
    "start": "960170",
    "end": "965529"
  },
  {
    "text": "01000001. The lowercase n is this value. The lowercase a is\nthis value and so on.",
    "start": "965530",
    "end": "973690"
  },
  {
    "text": "So I've got seven different\ngroups of eight bits here for corresponding to\neach letter in my name.",
    "start": "973690",
    "end": "981130"
  },
  {
    "text": "Now, if I take those bits. And now just smush\nthem together, concatenate them to give me\none really, really big number--",
    "start": "981130",
    "end": "989210"
  },
  {
    "text": "so this is all going to\nbe one really big number-- the corresponding number in base\n10 is this really long thing.",
    "start": "989210",
    "end": "999440"
  },
  {
    "text": "And so if I do this, as long\nas someone's name is unique, they will end up with a\nunique number associated",
    "start": "999440",
    "end": "1007839"
  },
  {
    "text": "with their name. And therefore,\nthat unique number can be used as a unique index\ninto a really big hash table.",
    "start": "1007840",
    "end": "1016500"
  },
  {
    "text": "So let's think about hashing\nthe names of MIT's 4,000 undergrads.",
    "start": "1016500",
    "end": "1023410"
  },
  {
    "text": "Let's assume that the longest\nname is 20 characters long.",
    "start": "1023410",
    "end": "1029089"
  },
  {
    "text": "So there's going to be 20\nof these different letters that we need to hash.",
    "start": "1029089",
    "end": "1034209"
  },
  {
    "text": "So we use the same process here. Each one of those\n20 characters gets",
    "start": "1034210",
    "end": "1039609"
  },
  {
    "text": "its own 8-bit representation. So in total, the\nnumber of bits that I'm",
    "start": "1039609",
    "end": "1045679"
  },
  {
    "text": "going to use to represent\nthat 20-long character is going to be 8 times\n20, so 160 different bits.",
    "start": "1045680",
    "end": "1054260"
  },
  {
    "text": "That's a lot of bits. And if I concatenate\nall those together, the number that\ncorresponds to is",
    "start": "1054260",
    "end": "1061490"
  },
  {
    "text": "2 to the 160, which\nis this thing here. So if I want every single\ncombination of letters",
    "start": "1061490",
    "end": "1071630"
  },
  {
    "text": "in the alphabet to be a unique\nvalue in this long list,",
    "start": "1071630",
    "end": "1076700"
  },
  {
    "text": "then I will need to have\na list that is this long. I'm not even going\nto try to figure out",
    "start": "1076700",
    "end": "1083150"
  },
  {
    "text": "or to say how big\nthis number is, but it's really, really big. And having a list,\na.k.a. hash table,",
    "start": "1083150",
    "end": "1091930"
  },
  {
    "text": "that has this many entries\nwill guarantee for me that names that are\n20 characters long",
    "start": "1091930",
    "end": "1098650"
  },
  {
    "text": "will each hash to\nsomething unique. But I only have 4,000 names that\nI'd like to put in my table.",
    "start": "1098650",
    "end": "1107480"
  },
  {
    "text": "So I have 4,000\nnames that I'd like to put in a table that\nhas this many spots.",
    "start": "1107480",
    "end": "1113530"
  },
  {
    "text": "So that's a lot of wasted space. Yeah? STUDENT: Sorry, is it the 160\nbecause you put it to binary?",
    "start": "1113530",
    "end": "1120100"
  },
  {
    "text": "ANA BELL: Yeah, exactly. So each one of\nthe characters has eight bits associated with it.",
    "start": "1120100",
    "end": "1126280"
  },
  {
    "text": "So there's going to be 160 of\nthese zeros or ones in a row. So to tell the number that\nthat's associated with,",
    "start": "1126280",
    "end": "1134320"
  },
  {
    "text": "we basically say-- we basically\ncalculate 10000000--",
    "start": "1134320",
    "end": "1141399"
  },
  {
    "text": "with 20 zeros at the end. And that gives me 2 to the 160.",
    "start": "1141400",
    "end": "1147240"
  },
  {
    "text": "That's going to be\nhow big my number is. STUDENT: [INAUDIBLE]? ANA BELL: That is going to be--",
    "start": "1147240",
    "end": "1154640"
  },
  {
    "text": "that's going to be for one-- that's going to be how many\nslots I'll need in order",
    "start": "1154640",
    "end": "1159650"
  },
  {
    "text": "to have unique combinations of\nletters be mapped to one slot.",
    "start": "1159650",
    "end": "1167050"
  },
  {
    "text": "So 0001 will map to one thing. 00010 will map to another thing.",
    "start": "1167050",
    "end": "1172060"
  },
  {
    "text": "0011 will map to another thing. So all these\ncombinations of letters will each map to\nsomething unique.",
    "start": "1172060",
    "end": "1178360"
  },
  {
    "text": "And in order to guarantee\nthat, I need this many slots. Again, since, I only have\n4,000 undergrads, well,",
    "start": "1178360",
    "end": "1185650"
  },
  {
    "text": "that's a lot of wasted space. I'm only using 4,000 of these\nslots to hold students' names.",
    "start": "1185650",
    "end": "1191860"
  },
  {
    "text": "And that's because a lot of\nthose combinations of letters aren't really valid.",
    "start": "1191860",
    "end": "1197010"
  },
  {
    "text": "So what's the solution? There's a lot of\nwasted space there. So the solution would be to\nsay, well, you know what?",
    "start": "1197010",
    "end": "1203820"
  },
  {
    "text": "I would be fine with having\na smaller hash table. I don't need that giant number\nof entries in my hash table.",
    "start": "1203820",
    "end": "1211110"
  },
  {
    "text": "I would be fine with\nmaybe having 10,000 spots, and then having some\nnames that happen",
    "start": "1211110",
    "end": "1218010"
  },
  {
    "text": "to hash to the same\nthing or saying, I'm fine with having a hash\ntable that has a million spots.",
    "start": "1218010",
    "end": "1223860"
  },
  {
    "text": "And out of those 4,000,\nsome will be used, some will be unused,\nand some might collide to the same hash value.",
    "start": "1223860",
    "end": "1231179"
  },
  {
    "text": "And that's totally OK. So if we allow collisions, what\nis this going to look like?",
    "start": "1231180",
    "end": "1237310"
  },
  {
    "text": "So here's a visualization\nof our hash table. So think of the hash\ntable like a list.",
    "start": "1237310",
    "end": "1243390"
  },
  {
    "text": "The reason why we think of it\nas a list is because indexing into a list is constant time.",
    "start": "1243390",
    "end": "1248790"
  },
  {
    "text": "We're taking\nadvantage of the idea that if we index into a list,\nthat's going to be constant.",
    "start": "1248790",
    "end": "1255020"
  },
  {
    "text": "So let's say we're\nadding some names and grades into our hash table.",
    "start": "1255020",
    "end": "1260990"
  },
  {
    "text": "So this is our representation\nof a dictionary. The values here says that I\nhave a hash table that has",
    "start": "1260990",
    "end": "1269740"
  },
  {
    "text": "16 different entries, 0 to 15. And 0 to 15 corresponds\nto the list index.",
    "start": "1269740",
    "end": "1278919"
  },
  {
    "text": "So if I have a name\nand a grade that I'd like to add to my\nhash table, I need",
    "start": "1278920",
    "end": "1285669"
  },
  {
    "text": "to run a hash\nfunction on the key. So the key is the name. And the grade is the value\nassociated with the name.",
    "start": "1285670",
    "end": "1295150"
  },
  {
    "text": "So to add Ana with a grade\nof C to my hash table, I need to take my\nAna, which is the key,",
    "start": "1295150",
    "end": "1301840"
  },
  {
    "text": "and run a hash function\non it such that, when I run the hash function\non this name, A-n-a,",
    "start": "1301840",
    "end": "1308050"
  },
  {
    "text": "it'll give me a number, an\ninteger between 0 and 15.",
    "start": "1308050",
    "end": "1313150"
  },
  {
    "text": "And if I can do that, then I\nknow I've added my entry here into one of these buckets.",
    "start": "1313150",
    "end": "1321230"
  },
  {
    "text": "So a reasonable hash\nfunction to run on the name-- and we saw this in the\ndictionary lecture-- is to say, well, let's have\nA map to 1, B map to 2,",
    "start": "1321230",
    "end": "1329290"
  },
  {
    "text": "C map to 3, and so on. So for my name, I've got 1\nplus 14 plus 1 equals 16.",
    "start": "1329290",
    "end": "1337630"
  },
  {
    "text": "But since I want to ensure that\nthis hash function gives me a number between 0 and 15,\nlet's mod that with 16.",
    "start": "1337630",
    "end": "1348169"
  },
  {
    "text": "So I can sum all the letters\nin my name just fine. And then let's\nfinalize it by saying mod 16 to give me the\nremainder-- either 0 1, 2,",
    "start": "1348170",
    "end": "1356590"
  },
  {
    "text": "or 15. And if I do that, I'm\nensured that this key value",
    "start": "1356590",
    "end": "1361930"
  },
  {
    "text": "pair will be added to one of\nthese buckets from 0 to 15. So in this particular case, Ana\nwith a grade of C maps to 0.",
    "start": "1361930",
    "end": "1370570"
  },
  {
    "text": "That's what the hash function\non my name told me to add-- the location that the\nhash function on my name",
    "start": "1370570",
    "end": "1377140"
  },
  {
    "text": "told me to add to. So there I am putting\nmy name in there. Let's add a couple more people. So here's Eric.",
    "start": "1377140",
    "end": "1383990"
  },
  {
    "text": "His name hashes to 35 mod 16. So that's 3. So I'm going to add Eric and\nhis grade to bucket number 3.",
    "start": "1383990",
    "end": "1392960"
  },
  {
    "text": "Then we can add John\nwith a grade of B. His name hashes to 47 mod 16.",
    "start": "1392960",
    "end": "1399049"
  },
  {
    "text": "So that's 15. So we can add John\ndown in bucket 15. And then let's add\nEve with a grade of B.",
    "start": "1399050",
    "end": "1406550"
  },
  {
    "text": "So she hashes to 32 mod\n16, which is also 0.",
    "start": "1406550",
    "end": "1412370"
  },
  {
    "text": "And you know what? Anna was already\nin the bucket 0. But that's fine\nbecause you know what?",
    "start": "1412370",
    "end": "1419720"
  },
  {
    "text": "I have four names\nhere, so four entries that I want to add to my\nhash table dictionary.",
    "start": "1419720",
    "end": "1426140"
  },
  {
    "text": "And two of them collided. That's fine. I still have many other\nbuckets that are empty here.",
    "start": "1426140",
    "end": "1433470"
  },
  {
    "text": "So if I have 10\nstudents in my class, probably they won't\nall hash to 0.",
    "start": "1433470",
    "end": "1440659"
  },
  {
    "text": "They'll probably hash\nsomewhere within here so that it's nicely balanced. And so maybe out of 10 students\nin my class, only two collided.",
    "start": "1440660",
    "end": "1449990"
  },
  {
    "text": "And that's way\nbetter than having all of the students in the class\nbe enumerated in one long list.",
    "start": "1449990",
    "end": "1457250"
  },
  {
    "text": "So when I look up Ana, the\nway that this works is you hash the name Ana again.",
    "start": "1457250",
    "end": "1462590"
  },
  {
    "text": "So when you want to look up the\ngrade of Ana, that's the key. You hash the value Ana again.",
    "start": "1462590",
    "end": "1468380"
  },
  {
    "text": "You say, hey, Ana hashed to 0. So then I'm going to look in\nbucket 0 and say, all right,",
    "start": "1468380",
    "end": "1475039"
  },
  {
    "text": "let me enumerate everybody\nwho's in bucket 0 and see if I can find\nAna with her grade. Happens to be the first one.",
    "start": "1475040",
    "end": "1481650"
  },
  {
    "text": "But if it was later\non, then I'd still be able to grab it\nmuch faster than if I had everybody in one long list.",
    "start": "1481650",
    "end": "1488800"
  },
  {
    "text": "Does that make sense? Like the idea of--\nyeah, go ahead. STUDENT: So you can\nstill like access them.",
    "start": "1488800",
    "end": "1493867"
  },
  {
    "text": "It's just that you might get\ntwo answers instead of one. ANA BELL: Exactly, yeah. You can still access them. You just might have to\nlook through a list of two.",
    "start": "1493867",
    "end": "1500950"
  },
  {
    "text": "So here at bucket\n0, I'm effectively storing a list of\neverything that hashed",
    "start": "1500950",
    "end": "1506559"
  },
  {
    "text": "to a 0, which is it's fine. Yes, that's two that I\nhave to look through.",
    "start": "1506560",
    "end": "1512470"
  },
  {
    "text": "It's not four. It's not 10. It's not 100. It's not everybody all in a row.",
    "start": "1512470",
    "end": "1519330"
  },
  {
    "text": "Yeah? STUDENT: Is the\ncomplexity that theta n? ANA BELL: So the\ncomplexity of this is actually going to be\nsmaller than theta of n.",
    "start": "1519330",
    "end": "1526159"
  },
  {
    "text": "And it'll depend on the\nhash function that we use. This hash function needs\nto be nicely balanced.",
    "start": "1526160",
    "end": "1532490"
  },
  {
    "text": "It shouldn't put\neveryone in bucket 0. Then that's a useless\nhash function.",
    "start": "1532490",
    "end": "1537530"
  },
  {
    "text": "And it depends on the\nsize of the hash table. If I have maybe 1,000 people\nthat I'm storing in 15 buckets,",
    "start": "1537530",
    "end": "1545000"
  },
  {
    "text": "I'm going to have a\nlot of collisions. But if I'm only storing these\nfour, or maybe eight, or 10,",
    "start": "1545000",
    "end": "1551120"
  },
  {
    "text": "or something smaller than\nthe size of my table, then there will be\nfar fewer collisions. It'll be more nicely\nbalanced, yeah.",
    "start": "1551120",
    "end": "1558000"
  },
  {
    "text": "STUDENT: I meant like theta\nn like the things in 0. ANA BELL: Oh, theta of n\nfor the things in 0, yes.",
    "start": "1558000",
    "end": "1563150"
  },
  {
    "text": "And that's fine\nbecause usually what we care about is theta of\nthe length of the input.",
    "start": "1563150",
    "end": "1568910"
  },
  {
    "text": "So in this case,\nit's theta of-- if I have four students\nin my class, I've",
    "start": "1568910",
    "end": "1574070"
  },
  {
    "text": "got only two that mapped to 0. So here, it's length over 2.",
    "start": "1574070",
    "end": "1581610"
  },
  {
    "text": "But if I had more students,\nthen it would be far fewer. It would be 2 out of 10\nor maybe 2 out of 15 that",
    "start": "1581610",
    "end": "1587700"
  },
  {
    "text": "hash to the same thing, yeah. ",
    "start": "1587700",
    "end": "1593149"
  },
  {
    "text": "Yeah, so as the question said,\nwhat makes a good hash table and hash function pair?",
    "start": "1593150",
    "end": "1600110"
  },
  {
    "text": "Because this only works if\nyou have a really good hash function and a nice hash\ntable to go along with it.",
    "start": "1600110",
    "end": "1606900"
  },
  {
    "text": "So this is actually a problem\nin computer science, a research problem all by itself.",
    "start": "1606900",
    "end": "1612000"
  },
  {
    "text": "So people actually study\nthis for their lives, coming up with good hash\nfunctions and hash tables.",
    "start": "1612000",
    "end": "1619330"
  },
  {
    "text": "So some base rules-- you want to have the\ndomain of interest--",
    "start": "1619330",
    "end": "1625010"
  },
  {
    "text": "so in this particular\ncase, a tuple, or a string, or whatever it is--",
    "start": "1625010",
    "end": "1631630"
  },
  {
    "text": "mapped to integers between 0\nand the size of the hash table. So in the previous\nexample, we don't",
    "start": "1631630",
    "end": "1637450"
  },
  {
    "text": "want to have a\nhash function that mods 2 because then everything\nwill either hash to 0 or 1.",
    "start": "1637450",
    "end": "1644980"
  },
  {
    "text": "If our hash table has 15\nthings, well, we better make sure that our hash\nfunction is going to give us a number between 0 and 15.",
    "start": "1644980",
    "end": "1652549"
  },
  {
    "text": "Second, you want the hash\nvalue to be fully determined",
    "start": "1652550",
    "end": "1658700"
  },
  {
    "text": "by the value being hashed. So in this case, we don't\nwant any sort of randomness",
    "start": "1658700",
    "end": "1664010"
  },
  {
    "text": "to go on for the\nreason that, well, if I want to look up Eve's\ngrade later on in the code",
    "start": "1664010",
    "end": "1672140"
  },
  {
    "text": "or whatever, then I need\nto run the exact same hash function on her name\nto determine the grade.",
    "start": "1672140",
    "end": "1678060"
  },
  {
    "text": "So if there's randomness\ninvolved in this hash function, then you might not get\nback the same value",
    "start": "1678060",
    "end": "1684710"
  },
  {
    "text": "that it has to originally. So you'll be looking\nin the wrong bucket. And you'll incorrectly say\nshe doesn't have a value",
    "start": "1684710",
    "end": "1692060"
  },
  {
    "text": "or she's not there. Third, you want to use the\nwhole input to hash the--",
    "start": "1692060",
    "end": "1698860"
  },
  {
    "text": "the function should\nuse the whole input to run the hash function.",
    "start": "1698860",
    "end": "1704150"
  },
  {
    "text": "So again, in this\nexample, we don't just want to use the first\nletters of people's names",
    "start": "1704150",
    "end": "1709750"
  },
  {
    "text": "because then that will lead\nto a lot more collisions than if we used the sum of all\nthe letters in the alphabet--",
    "start": "1709750",
    "end": "1716770"
  },
  {
    "text": "or all the letters\nin their name.  So those are really big ideas.",
    "start": "1716770",
    "end": "1722590"
  },
  {
    "text": "And then what we want\nout of our hash function is all the values.",
    "start": "1722590",
    "end": "1730179"
  },
  {
    "text": "If you run this hash function\non a bunch of different inputs where you're storing\nnames or you're storing-- I don't know-- tuples or\nwhatever you're storing,",
    "start": "1730180",
    "end": "1737110"
  },
  {
    "text": "you want this function to\ngive you a nice uniform distribution of values. So in our hash table\npreviously here,",
    "start": "1737110",
    "end": "1744309"
  },
  {
    "text": "if I add more names\nto my hash table, I want to ensure that they're\ngoing to land in buckets 2, 5,",
    "start": "1744310",
    "end": "1750220"
  },
  {
    "text": "6, 7, 8, 9, 10 11, 12, 13, 14. I don't want everything\nto hash to number 0.",
    "start": "1750220",
    "end": "1755800"
  },
  {
    "text": "That would be very bad. So as a side reminder, back in\nthe lecture on dictionaries,",
    "start": "1755800",
    "end": "1762720"
  },
  {
    "text": "I actually said\nsomething like, for now,",
    "start": "1762720",
    "end": "1768539"
  },
  {
    "text": "think of the objects\nthat can be keys to a dictionary as\nimmutable objects.",
    "start": "1768540",
    "end": "1776010"
  },
  {
    "text": "And I said,\ntechnically hashable, but we don't need to\nknow what that is. Well, hashable means just this--\nyou can run a hash function",
    "start": "1776010",
    "end": "1783090"
  },
  {
    "text": "on the object and you'll\nget the same value back no matter how many times\nyou run the hash function",
    "start": "1783090",
    "end": "1788580"
  },
  {
    "text": "on that object. So we looked at this example. What happens if we add a\nstudent whose name is not",
    "start": "1788580",
    "end": "1796710"
  },
  {
    "text": "immutable, not hashable? So lists are mutable objects. So as such, they\nare not hashable.",
    "start": "1796710",
    "end": "1803340"
  },
  {
    "text": "That means, if we run a hash\nfunction on a list today, and then we potentially mutate\nthe list, tomorrow that list",
    "start": "1803340",
    "end": "1810990"
  },
  {
    "text": "will not hash to the same thing. So we saw this example. Let's say Kate with a K is\nadded to our hash table.",
    "start": "1810990",
    "end": "1818390"
  },
  {
    "text": "So her name currently hashes\nto 37 mod 16, which is a 5.",
    "start": "1818390",
    "end": "1824080"
  },
  {
    "text": "So we added her there. Now, let's say tomorrow\nwe want to look up her grades to do\nwhatever to integrate it",
    "start": "1824080",
    "end": "1831100"
  },
  {
    "text": "into a bigger spreadsheet. She had changed her name\nbetween yesterday and today.",
    "start": "1831100",
    "end": "1836250"
  },
  {
    "text": "Now, she's Cate with a C. If\nwe run the same hash function again on her name, that leads us\nto look in a different bucket.",
    "start": "1836250",
    "end": "1845519"
  },
  {
    "text": "She's still there. She's Kate with a K, as we\nhad originally added her. But now, her name\nis Cate with a C.",
    "start": "1845520",
    "end": "1852100"
  },
  {
    "text": "We run the same hash function. It tells us to look bucket 13. And she's not there.",
    "start": "1852100",
    "end": "1857470"
  },
  {
    "text": "So that's why we only want\nhashable objects to be added-- to be keys to the dictionary\nbecause we want the same value",
    "start": "1857470",
    "end": "1865770"
  },
  {
    "text": "to come back to us when we\nrun the hash function on them.",
    "start": "1865770",
    "end": "1871290"
  },
  {
    "text": "OK. So now, we can see, in the worst\ncase scenario, everything maps",
    "start": "1871290",
    "end": "1878880"
  },
  {
    "text": "to the same bucket in\nmy hash table, my list. Every single thing I add has a\nreally bad hash function on it.",
    "start": "1878880",
    "end": "1886860"
  },
  {
    "text": "Let's say the hash\nfunction always returns 3. If my hash function\nalways returns 3 no matter",
    "start": "1886860",
    "end": "1893010"
  },
  {
    "text": "what I'm adding\nto my dictionary-- no matter what I'm hashing,\nthen every single item",
    "start": "1893010",
    "end": "1898710"
  },
  {
    "text": "essentially gets put in a really\nlong list at bucket number 3. So when I look up a value,\nwell, surprise, it hashes to 3.",
    "start": "1898710",
    "end": "1907019"
  },
  {
    "text": "And now, I need to look\nthrough every single thing in that bucket number 3 to\nfind the one I'm looking for.",
    "start": "1907020",
    "end": "1913170"
  },
  {
    "text": "So it's just very, very bad. And in the worst case scenario,\nthis is the complexity. It's theta of n, where n is\nthe length of whatever items",
    "start": "1913170",
    "end": "1921030"
  },
  {
    "text": "we have that we're\nadding to our buckets-- to our hash table. But in the average case--",
    "start": "1921030",
    "end": "1927309"
  },
  {
    "text": "and this is only when we\nhave a hash table that's pretty big relative to the\nthings that we're adding to it",
    "start": "1927310",
    "end": "1934850"
  },
  {
    "text": "and when we have a hash\nfunction that's good enough, that has a nice uniform\ndistribution of values--",
    "start": "1934850",
    "end": "1940570"
  },
  {
    "text": "only in that case,\nin the average case, the time it takes for us to\ngrab a value from a dictionary",
    "start": "1940570",
    "end": "1948160"
  },
  {
    "text": "is theta of 1, constant. And so that's why\ndictionaries are really,",
    "start": "1948160",
    "end": "1953899"
  },
  {
    "text": "really useful data\nstructures to store things and to retrieve things from.",
    "start": "1953900",
    "end": "1959200"
  },
  {
    "text": "Back when I was doing\na little project, I didn't know about\nPython dictionaries.",
    "start": "1959200",
    "end": "1964547"
  },
  {
    "text": "I had just learned\nabout the language. And I was actually using lists\nto read in genomic data files.",
    "start": "1964547",
    "end": "1970840"
  },
  {
    "text": "And I was storing\neverything in lists-- genomic names and\nthings like that. And it was really slow.",
    "start": "1970840",
    "end": "1978610"
  },
  {
    "text": "My advisor would be like,\nis your code done yet? I'm like no, it's\nbeen a couple of days.",
    "start": "1978610",
    "end": "1984550"
  },
  {
    "text": "It's still waiting. And then someone told me,\nhey, just use a dictionary to store the values. And then the lookup is\ngoing to be a lot faster.",
    "start": "1984550",
    "end": "1992200"
  },
  {
    "text": "It was done within\na couple of seconds. So very, very useful,\nthe time complexity--",
    "start": "1992200",
    "end": "1997900"
  },
  {
    "text": "because genomic data,\nit's huge amounts of data. So the theta of n versus\ntheta of 1 is really--",
    "start": "1997900",
    "end": "2004770"
  },
  {
    "text": "it makes a really\nbig difference when you deal with large data sets. It's not just on paper.",
    "start": "2004770",
    "end": "2010390"
  },
  {
    "text": "It actually makes\na big difference. OK. Questions about this?",
    "start": "2010390",
    "end": "2015640"
  },
  {
    "text": "I hope this ties in-- yeah? STUDENT: So Python uses\na specific hash function?",
    "start": "2015640",
    "end": "2021840"
  },
  {
    "text": "ANA BELL: Yeah. STUDENT: If Python\nupdates or anything, Can they change that function\nand nothing would change?",
    "start": "2021840",
    "end": "2027960"
  },
  {
    "text": "Or is it-- ANA BELL: Yeah, so\nPython right now uses a specific hash function.",
    "start": "2027960",
    "end": "2033059"
  },
  {
    "text": "In a future version, they might\nuse a different hash function. We don't really use\nthe numbers associated",
    "start": "2033060",
    "end": "2038250"
  },
  {
    "text": "with the hash functions. I mean, you could\nfor your programs. But it would be, I guess,\nrelative to whatever value you",
    "start": "2038250",
    "end": "2044280"
  },
  {
    "text": "get, right? So you wouldn't hard-code\nthe value for the tuple 123",
    "start": "2044280",
    "end": "2051629"
  },
  {
    "text": "as something, right? You just get what you get. And that's what it is, right?",
    "start": "2051630",
    "end": "2057239"
  },
  {
    "text": "But it could give you a\ndifferent hash function. If you ran out of your\ncomputer, actually, you might get a different\nhash value than mine, yeah.",
    "start": "2057239",
    "end": "2064105"
  },
  {
    "text": " So this topic kind of ties\nin data structures-- we've",
    "start": "2064105",
    "end": "2072100"
  },
  {
    "text": "seen lists and dictionaries,\nsome of the behind the scenes look at\nhow things are stored,",
    "start": "2072100",
    "end": "2078230"
  },
  {
    "text": "puts a little complexity\nin there talking about algorithms and runtimes. So it ties in a\nbunch of the topics",
    "start": "2078230",
    "end": "2084460"
  },
  {
    "text": "that we've seen in this\nclass really, really nicely. So one other thing that,\nI'd like to now talk about",
    "start": "2084460",
    "end": "2091989"
  },
  {
    "text": "is the idea of a simulation. And this hopefully is going\nto be a little bit more useful to you if you decide to\ntake another computer science",
    "start": "2091989",
    "end": "2100660"
  },
  {
    "text": "course or computation course\nin a different field, whatever you'd like. Computation simulations\nare very useful tools",
    "start": "2100660",
    "end": "2109570"
  },
  {
    "text": "in computer science. So it allows you to\ncomputationally describe the world. So if you see an\nevent in the world,",
    "start": "2109570",
    "end": "2116050"
  },
  {
    "text": "you can actually simulate\nit computationally. With what you've\nlearned so far, you",
    "start": "2116050",
    "end": "2121420"
  },
  {
    "text": "can totally simulate a\nwhole bunch of things. And we're using randomness to\nsimulate these events that you",
    "start": "2121420",
    "end": "2127630"
  },
  {
    "text": "might see in the real world. So for example, you might have\nseen the hurricane paths, when",
    "start": "2127630",
    "end": "2134799"
  },
  {
    "text": "you see on the news or\nwhatever the most likely path that a hurricane might take.",
    "start": "2134800",
    "end": "2140590"
  },
  {
    "text": "But then they also\nhave the little models that show other likely paths. They simulated using\na bunch of data",
    "start": "2140590",
    "end": "2148540"
  },
  {
    "text": "that they have the most likely\npath for that hurricane. Another place where\nsimulation is useful",
    "start": "2148540",
    "end": "2156580"
  },
  {
    "text": "is if you see a real\nworld event that's actually kind of complex. You can take a\nsimpler set of rules,",
    "start": "2156580",
    "end": "2164170"
  },
  {
    "text": "and simulate those, and\nthen add in more rules",
    "start": "2164170",
    "end": "2169869"
  },
  {
    "text": "to make it closer and\ncloser to the thing that you actually observed\nin the real world. So the idea of a\nsimulation is that you have",
    "start": "2169870",
    "end": "2177609"
  },
  {
    "text": "some event in the real world. And you want to calculate\nsomething about it. We're going to use computation\nto design an experiment.",
    "start": "2177610",
    "end": "2186310"
  },
  {
    "text": "And we're going to use\nrandomness for that. Once we've done\nthat, we're going to repeat the experiment a whole\nbunch of times computationally.",
    "start": "2186310",
    "end": "2194740"
  },
  {
    "text": "And that just means\nwe're going to put a for loop around\nwhatever experiment we've designed computationally.",
    "start": "2194740",
    "end": "2200650"
  },
  {
    "text": "And if you're interested\nin some outcome, some particular outcome, like-- as we're going to see,\nwe're going to roll a die.",
    "start": "2200650",
    "end": "2206710"
  },
  {
    "text": "And we're interested in how\nmany times a 4 comes up. Then we're going to keep\ntrack of that outcome.",
    "start": "2206710",
    "end": "2212920"
  },
  {
    "text": "And you keep track of\nit however many times that outcome happened in your\nwhole bunch of repetitions.",
    "start": "2212920",
    "end": "2219340"
  },
  {
    "text": "And then after the end\nof the repetitions, you can report some\nvalue of interest-- maybe the probability that\na 4 comes up on a die roll.",
    "start": "2219340",
    "end": "2227780"
  },
  {
    "text": "So here's the example. It's going to be very\nsimple because it's something we can calculate\nalready right off the bat.",
    "start": "2227780",
    "end": "2234200"
  },
  {
    "text": "But it'll give you a sense of\nhow you can write code around such a real world event.",
    "start": "2234200",
    "end": "2240180"
  },
  {
    "text": "So here, we're interested\nin just rolling a dice and seeing the\nprobability to get a dot,",
    "start": "2240180",
    "end": "2246950"
  },
  {
    "text": "dot, dot, dot, to get a 4 on the\ndice, on one of the dice rolls",
    "start": "2246950",
    "end": "2252140"
  },
  {
    "text": "or the probability to\nget a dot, whichever. So here, the event is\nthat we're rolling a dice.",
    "start": "2252140",
    "end": "2259200"
  },
  {
    "text": "And then we're\ninterested in getting the probability of some face. So we're going to design an\nexperiment for that dice roll.",
    "start": "2259200",
    "end": "2269049"
  },
  {
    "text": "And this is just one way\nto design the experiment. There are a whole other many,\nmany other ways to design it.",
    "start": "2269050",
    "end": "2274880"
  },
  {
    "text": "This is just one that I chose\nthat felt illustrated most how we can take a real world\nexample and put it into code.",
    "start": "2274880",
    "end": "2283310"
  },
  {
    "text": "So a die has six faces. So what I have done here\nis I've created a list",
    "start": "2283310",
    "end": "2290140"
  },
  {
    "text": "of each one of those faces. You could have used numbers\nas the elements in the list.",
    "start": "2290140",
    "end": "2295515"
  },
  {
    "text": "In this case, I\njust used strings to be a little bit\ncuter, but whatever. However you'd like to represent\neach one of those die faces,",
    "start": "2295515",
    "end": "2303050"
  },
  {
    "text": "here's a list of\nsix things in it. And then I'm using\nthis choice function",
    "start": "2303050",
    "end": "2308320"
  },
  {
    "text": "from this random library. Again, the random library is\na super duper useful library. random.choice will effectively\nselect one of the elements",
    "start": "2308320",
    "end": "2317110"
  },
  {
    "text": "in this list for me. So if I type in random.choice\nin the console now, it might give me the dot dot.",
    "start": "2317110",
    "end": "2323110"
  },
  {
    "text": "If I type it in right after,\nit might give me the dot, dot, dot, dot, whatever. It's going to be random each\ntime I run this function.",
    "start": "2323110",
    "end": "2330930"
  },
  {
    "text": "But this line of\ncode effectively simulates me taking a\ndice and rolling it.",
    "start": "2330930",
    "end": "2337020"
  },
  {
    "text": "And then we can\nrepeat this experiment a whole lot of times.",
    "start": "2337020",
    "end": "2342780"
  },
  {
    "text": "If I'm taking a dice and\nrolling it, that's like what? One or two seconds per roll?",
    "start": "2342780",
    "end": "2348040"
  },
  {
    "text": "I don't think I have time to\nrepeat that experiment 10,000 times. But with simulation, with\ncomputation, with programming,",
    "start": "2348040",
    "end": "2355530"
  },
  {
    "text": "we can simulate it 10,000\ntimes or a million times, and then just wait\na couple seconds.",
    "start": "2355530",
    "end": "2361530"
  },
  {
    "text": "So very, very useful\napplication of programming. So how do you simulate this\ndice roll 10,000 times?",
    "start": "2361530",
    "end": "2370079"
  },
  {
    "text": "Just slap a for loop\naround that line of code. So for some number\nin range 10,000,",
    "start": "2370080",
    "end": "2377040"
  },
  {
    "text": "that means I'm going to run\nthis line of code 10,000 times.",
    "start": "2377040",
    "end": "2382200"
  },
  {
    "text": "All of a sudden, I've just\nrolled a dice 10,000 times. As I'm doing so, I'm interested\nin the outcome of some event.",
    "start": "2382200",
    "end": "2390030"
  },
  {
    "text": "So let's say, how many times did\na dot, dot, dot, dot come up, a 4? Well, each time\nin my for loop, I",
    "start": "2390030",
    "end": "2397940"
  },
  {
    "text": "can keep track of\nthe value of roll. If it was a 4,\nincrement a counter.",
    "start": "2397940",
    "end": "2404150"
  },
  {
    "text": "If it was not a 4, I\ndon't care, do nothing. So each time I have a\ncounter that tells me",
    "start": "2404150",
    "end": "2410940"
  },
  {
    "text": "how many times a 4 came up. And then after the\nfor loop is done,",
    "start": "2410940",
    "end": "2416010"
  },
  {
    "text": "I've repeated my\nexperiment 10,000 times. And I can report the\nprobability to get a 4--",
    "start": "2416010",
    "end": "2421740"
  },
  {
    "text": "so the counter\ndivided by 10,000. So this is the code.",
    "start": "2421740",
    "end": "2427220"
  },
  {
    "text": "That's it. It's super simple. I wrote a function. And it actually\ntakes in a parameter.",
    "start": "2427220",
    "end": "2434369"
  },
  {
    "text": "So if we're interested in\nthe probability for a dot, dot, dot, dot to\ncome up, then we",
    "start": "2434370",
    "end": "2440269"
  },
  {
    "text": "pass in the value\nof that particular-- of that side. If I'm interested\nin the probability",
    "start": "2440270",
    "end": "2446390"
  },
  {
    "text": "that a dot comes up, then I\npass in the dot as a string.",
    "start": "2446390",
    "end": "2451539"
  },
  {
    "text": "So what does it do? Well, just like in the previous\nslide, I've got this for loop here that tells Python how many\ntimes to repeat the experiment.",
    "start": "2451540",
    "end": "2460030"
  },
  {
    "text": "I have the experiment\nnumber here as a variable. So I can easily just change\nit to be something else.",
    "start": "2460030",
    "end": "2466130"
  },
  {
    "text": "And then I've got my roll here. So this is me actually\ndoing the experiment.",
    "start": "2466130",
    "end": "2471260"
  },
  {
    "text": "So just here's me\nrolling the dice. Here's roll value. And then I check what\nthe value of the roll",
    "start": "2471260",
    "end": "2476890"
  },
  {
    "text": "was and increment\nthe counter if it was the side of\ninterest, the thing I've passed in as a parameter.",
    "start": "2476890",
    "end": "2482109"
  },
  {
    "text": "And then at the end,\nI just do a print. But you could imagine doing a\nreturn or something like that.",
    "start": "2482110",
    "end": "2487930"
  },
  {
    "text": "So if I run it, we're going\nto get the probability that the side dot\ncame up was 0.167",
    "start": "2487930",
    "end": "2495030"
  },
  {
    "text": "and the probability that\ndot, dot, dot, dot came up was 0.1602.",
    "start": "2495030",
    "end": "2500240"
  },
  {
    "text": "Intuition says they\nshould be the same. But you know what? That's our intuition.",
    "start": "2500240",
    "end": "2506210"
  },
  {
    "text": "We already know the problem. If we didn't know\nhow to calculate the probability of one\nof these sides coming up,",
    "start": "2506210",
    "end": "2513200"
  },
  {
    "text": "this would be pretty good. The beauty of computation\nis we can just",
    "start": "2513200",
    "end": "2518510"
  },
  {
    "text": "add two more zeros on there,\nrun it, and maybe uncomment it",
    "start": "2518510",
    "end": "2524150"
  },
  {
    "text": "so we actually see the values. Run it, we wait\na couple seconds. But now, the probability is\ngetting closer and closer",
    "start": "2524150",
    "end": "2532820"
  },
  {
    "text": "to the true probability. So the more experiments I do,\nthe better my answer becomes.",
    "start": "2532820",
    "end": "2539060"
  },
  {
    "text": "And I just had to wait\na couple of seconds. If I increase it\nby 10 more, I would have to wait 10 more\ntimes, 10 times as long,",
    "start": "2539060",
    "end": "2547569"
  },
  {
    "text": "so maybe 20 seconds. I'm not going to do it. So it's still a guesstimate. But it's a pretty\nclose guesstimate.",
    "start": "2547570",
    "end": "2555690"
  },
  {
    "text": "Now, the other beauty\nof writing code is that we can now ask, well,\nthis is a fair die, right?",
    "start": "2555690",
    "end": "2562230"
  },
  {
    "text": "Every single one of\nthese sides comes up with an equal probability. What do you guys\nthink the change",
    "start": "2562230",
    "end": "2567390"
  },
  {
    "text": "I should make to\nmake an unfair die? Let's say it's weighted\nunfairly towards the dot, the 1.",
    "start": "2567390",
    "end": "2577010"
  },
  {
    "text": "Yeah? STUDENT: You could just\nadd the dot [INAUDIBLE].. ANA BELL: Yeah, exactly. Let me just add\nanother dot here. Here, I've got another dot.",
    "start": "2577010",
    "end": "2584390"
  },
  {
    "text": "And now, the die is\nweighted unfairly. It comes up more times on\nthe 1 than on anything else.",
    "start": "2584390",
    "end": "2589950"
  },
  {
    "text": "So if I run the code\nagain, wait a couple of seconds, probability to get a\n1, twice as high as probability",
    "start": "2589950",
    "end": "2596240"
  },
  {
    "text": "to get a 4. So a really easy\nchange, it helped me answer another\nquestion, a small variation",
    "start": "2596240",
    "end": "2602630"
  },
  {
    "text": "of my original problem. And I didn't have to roll a dice\n10,000 times in the real world.",
    "start": "2602630",
    "end": "2614680"
  },
  {
    "text": "So that was really easy\nsimulation-- the probability of calculating sides of dies\ncoming up is pretty simple.",
    "start": "2614680",
    "end": "2624650"
  },
  {
    "text": "So why did we bother\nwith the code? Because we could just\ndo it mathematically. The side question\nthat I asked was also",
    "start": "2624650",
    "end": "2630640"
  },
  {
    "text": "kind of simple to figure out. Because we can actually ask\nharder questions and harder",
    "start": "2630640",
    "end": "2636460"
  },
  {
    "text": "variations of our\noriginal problem, we could certainly come up\nwith mathematical solutions to these harder\nproblems as well.",
    "start": "2636460",
    "end": "2643359"
  },
  {
    "text": "But I wouldn't be as\ncertain about my answers to those as I would\nbe just writing code.",
    "start": "2643360",
    "end": "2650530"
  },
  {
    "text": "For me, it would be a little\nbit easier to debug code than it would be to\nmathematically write",
    "start": "2650530",
    "end": "2656500"
  },
  {
    "text": "probabilities to much\nharder questions. And you can see, once\nyou've written the code,",
    "start": "2656500",
    "end": "2661900"
  },
  {
    "text": "once you've framed your\nexperiment in this way, it's really easy to just\ngo ahead and change it",
    "start": "2661900",
    "end": "2668650"
  },
  {
    "text": "a little bit. So the code is easy to\nchange once it's written. So let's look at a new question.",
    "start": "2668650",
    "end": "2674540"
  },
  {
    "text": "This one says, one\nexperiment is no longer",
    "start": "2674540",
    "end": "2680390"
  },
  {
    "text": "to just roll a die once. One experiment is now that\nwe're rolling a die seven times.",
    "start": "2680390",
    "end": "2687290"
  },
  {
    "text": "And I'm interested to know the\nprobability to get the dot, dot, dot, dot at least three\ntimes out of those seven rolls.",
    "start": "2687290",
    "end": "2696640"
  },
  {
    "text": "Much harder question\nthan before. It would require a little\nbit of thinking, some paper",
    "start": "2696640",
    "end": "2703630"
  },
  {
    "text": "to figure out. But in terms of code, it's\ngoing to be really simple.",
    "start": "2703630",
    "end": "2708770"
  },
  {
    "text": "So now, one experiment is\nno longer just one choice from my list of dice faces.",
    "start": "2708770",
    "end": "2716680"
  },
  {
    "text": "But it's going to be seven\nchoices from my list of dice faces, representing\nthe seven rolls",
    "start": "2716680",
    "end": "2723190"
  },
  {
    "text": "that I have for one experiment. And out of those\nseven rolls, what",
    "start": "2723190",
    "end": "2728440"
  },
  {
    "text": "I'm interested to\ndo is keeping track of incrementing a\ncounter whenever I",
    "start": "2728440",
    "end": "2734200"
  },
  {
    "text": "see a four dot, dot, dot, dot. And then, just like before,\nslap a for loop around it",
    "start": "2734200",
    "end": "2741190"
  },
  {
    "text": "repeat that experiment 10,000\nor 1 million times, however many times you'd like, and then\nkeep track of how many times",
    "start": "2741190",
    "end": "2747579"
  },
  {
    "text": "that 4 came up three or more\ntimes out of the seven rolls.",
    "start": "2747580",
    "end": "2753010"
  },
  {
    "text": "So this is our event. Count how many times out of\nthe 10,000, in that case-- but it could be a\nmillion, whatever it is--",
    "start": "2753010",
    "end": "2760480"
  },
  {
    "text": "we incremented our counter\nto be more than 3, more than or equal to 3.",
    "start": "2760480",
    "end": "2765820"
  },
  {
    "text": "And then our value of\ninterest is the probability of that happening. So take that counter\nand divide by 10,000",
    "start": "2765820",
    "end": "2772720"
  },
  {
    "text": "because that's how many times\nwe repeated our experiment. So this is the code. It's slightly longer.",
    "start": "2772720",
    "end": "2778849"
  },
  {
    "text": "And I've actually divided\nit into two parts-- this one up here, and\nthen this one down here.",
    "start": "2778850",
    "end": "2785619"
  },
  {
    "text": "So the code up here is going to\ndo the simulation 10,000 times.",
    "start": "2785620",
    "end": "2794440"
  },
  {
    "text": "So I've got one for loop here\nthat goes through 10,000 or 1 million-- however many times you\nwant to repeat the experiment.",
    "start": "2794440",
    "end": "2803210"
  },
  {
    "text": "Within here-- sorry-- and sorry, I forgot\nto mention that here I have a function where I've\ngeneralized a bunch of stuff.",
    "start": "2803210",
    "end": "2810720"
  },
  {
    "text": "So we could run it\nwith different values. So instead of three\ntimes out of seven rolls, we could have 15\ntimes out of 3,000.",
    "start": "2810720",
    "end": "2818390"
  },
  {
    "text": "Right so we can generalize this. So here, inside\nthis for loop, I've",
    "start": "2818390",
    "end": "2824059"
  },
  {
    "text": "got the simulation of\nrolling seven times.",
    "start": "2824060",
    "end": "2829100"
  },
  {
    "text": "So here, I've got\nrange of n roles. In the previous slide,\nI said it's seven. But it could be\nanything you'd like.",
    "start": "2829100",
    "end": "2834630"
  },
  {
    "text": "And then I've got choosing\none of the faces seven times and keeping track of how\nmany times out of those seven",
    "start": "2834630",
    "end": "2842720"
  },
  {
    "text": "I got a dot, dot, dot, dot. ",
    "start": "2842720",
    "end": "2849190"
  },
  {
    "text": "So at the end of\nthis for loop here, I've counted how many times\nI got a dot, dot, dot, dot.",
    "start": "2849190",
    "end": "2856060"
  },
  {
    "text": "And then I'm going to\nkeep track of that number in this list how many matched.",
    "start": "2856060",
    "end": "2861250"
  },
  {
    "text": "So how many matched\nwill be a list of 10,000 elements, 10,000\nelements, one element",
    "start": "2861250",
    "end": "2870750"
  },
  {
    "text": "for each one of my experiments. So the first time\nmaybe three dot, dot, dot, dots came up out of\n7, then the next time 1, then",
    "start": "2870750",
    "end": "2878280"
  },
  {
    "text": "the next time 5, then the\nnext time 4, however many. So now, I've got a\nlist of how many times",
    "start": "2878280",
    "end": "2884460"
  },
  {
    "text": "the dot, dot, dot, dot\ncame up out of 7 rolls. So the code down here-- that's why I split\nit up, because it's",
    "start": "2884460",
    "end": "2890670"
  },
  {
    "text": "a little bit easier for\nme to think about it. The code down here is\nnow going to iterate through this list of\n10,000 experiments",
    "start": "2890670",
    "end": "2897750"
  },
  {
    "text": "and say which one of these\nis greater or equal to 3-- this one, this one, this one.",
    "start": "2897750",
    "end": "2904090"
  },
  {
    "text": "So I'm incrementing a counter\nany time that is true. And at the end of\nthis loop down there,",
    "start": "2904090",
    "end": "2910680"
  },
  {
    "text": "I'm going to know how many\ntimes out of those 10,000 trials I had three or more\ntimes out of seven",
    "start": "2910680",
    "end": "2918569"
  },
  {
    "text": "come up on the\ndot, dot, dot, dot. So I can run the code.",
    "start": "2918570",
    "end": "2924460"
  },
  {
    "text": "And here, I've got the exact\nproblem on the previous slide. So if I'm interested in\nthe probability of the 4",
    "start": "2924460",
    "end": "2930040"
  },
  {
    "text": "coming up at least three or\nmore times out of seven roles, that's 0.0955.",
    "start": "2930040",
    "end": "2936250"
  },
  {
    "text": "And then I also down\nhere wrote it like this. And this probability is 0.16.",
    "start": "2936250",
    "end": "2945390"
  },
  {
    "text": "What is this problem down here? Does it look familiar? So the probability\nof a dot, dot, dot,",
    "start": "2945390",
    "end": "2952550"
  },
  {
    "text": "dot coming up at least\nonce out of one roll. ",
    "start": "2952550",
    "end": "2959590"
  },
  {
    "text": "That's just the previous\nproblem on the previous slide. I just have one roll. And I count the\nprobability to get the 4.",
    "start": "2959590",
    "end": "2966990"
  },
  {
    "text": "So this matches what I got\nwith the previous function that I wrote. But hey, now I wrote a\nbetter function actually",
    "start": "2966990",
    "end": "2974430"
  },
  {
    "text": "that's more general. And I can also run it\nto get the probability from the previous code.",
    "start": "2974430",
    "end": "2980113"
  },
  {
    "text": "So this is actually a\nmuch better code to run.  OK.",
    "start": "2980113",
    "end": "2985200"
  },
  {
    "text": "Questions about this? Interesting? I mean, it's dice rolls.",
    "start": "2985200",
    "end": "2990360"
  },
  {
    "text": "How interesting can it be? But yeah, so let's look at\na more interesting problem,",
    "start": "2990360",
    "end": "2995580"
  },
  {
    "text": "something that you might\napply to the real world.",
    "start": "2995580",
    "end": "3001380"
  },
  {
    "text": "So you might see this in a\ncalculus course or might not. But it is more of\na calculus problem.",
    "start": "3001380",
    "end": "3008730"
  },
  {
    "text": "So I've got water that\nruns through a faucet",
    "start": "3008730",
    "end": "3013880"
  },
  {
    "text": "at random somewhere between\n1 gallons per minute and 3 gallons per minute.",
    "start": "3013880",
    "end": "3019320"
  },
  {
    "text": "This is the setup. What is the time it takes\nto fill the 600 gallon pool?",
    "start": "3019320",
    "end": "3025380"
  },
  {
    "text": "Does anyone have an intuition\nfor how we could solve this?",
    "start": "3025380",
    "end": "3030779"
  },
  {
    "text": "If not, I can just click Next. STUDENT: [INAUDIBLE] ANA BELL: Yeah, definitely\nbetween the lowest",
    "start": "3030780",
    "end": "3036900"
  },
  {
    "text": "rate and the highest rate,\nso between 200 gallons per minute-- sorry, between 200\nminutes and 600 minutes,",
    "start": "3036900",
    "end": "3044910"
  },
  {
    "text": "200 at best if the water flows\nat 3 gallons per minute and 600",
    "start": "3044910",
    "end": "3050470"
  },
  {
    "text": "minutes at worst if the\nwater flows super slowly, 1 gallon per minute.",
    "start": "3050470",
    "end": "3056170"
  },
  {
    "text": "So we could say, well, let's\ntake the average of the flow. The average between\n1 and 3 gallons is 2.",
    "start": "3056170",
    "end": "3064200"
  },
  {
    "text": "So if we take 600\ngallons divided by 2 gallons per minute, that\nwould give us 300 minutes.",
    "start": "3064200",
    "end": "3071490"
  },
  {
    "text": "It's a reasonable guess. But that's not actually\nthe right answer. Another way we\ncould say is, well,",
    "start": "3071490",
    "end": "3078410"
  },
  {
    "text": "let's take the slowest and\nthe fastest it could run,",
    "start": "3078410",
    "end": "3083710"
  },
  {
    "text": "it could take. So here, I've got 600\nminutes and 200 minutes and average those\nnumbers out, divide by 2.",
    "start": "3083710",
    "end": "3091360"
  },
  {
    "text": "So that's 400 minutes. But that's actually\nnot right either. Yeah? STUDENT: Could you take\nthe integral of 600",
    "start": "3091360",
    "end": "3098290"
  },
  {
    "text": "over [INAUDIBLE] and\nhave the average value? ANA BELL: You could, yeah. I don't want to do\nintegrals, though.",
    "start": "3098290",
    "end": "3104560"
  },
  {
    "text": "Yeah, but that's exactly\nthe right answer. Yeah, you have to\ndo an integral. ",
    "start": "3104560",
    "end": "3111609"
  },
  {
    "text": "Yeah, we're teaching\ncomputer science here. So we're not going to do\nintegrals in this class.",
    "start": "3111610",
    "end": "3117250"
  },
  {
    "text": "Instead, we're going to do code. And the code is going\nto be like five lines",
    "start": "3117250",
    "end": "3123130"
  },
  {
    "text": "to find the answer to this. So all we're going to do is\ngrab a whole bunch of numbers",
    "start": "3123130",
    "end": "3128470"
  },
  {
    "text": "between 1 and 3, a million\nof them if you want. These will represent a\nbunch of random values",
    "start": "3128470",
    "end": "3134530"
  },
  {
    "text": "you could have the\nwater flow rate be. And then we're going to say,\nfor each one of these numbers",
    "start": "3134530",
    "end": "3142810"
  },
  {
    "text": "chosen at random, how long\nwould it take to fill the pool? So you do 600 divided by that\nrate, just how long it takes.",
    "start": "3142810",
    "end": "3151890"
  },
  {
    "text": "And then we're going to\naverage all of these rates. So we have a million\nof these numbers,",
    "start": "3151890",
    "end": "3157170"
  },
  {
    "text": "potential times that it could\ntake to fill the pool, sum them all, average them.",
    "start": "3157170",
    "end": "3164080"
  },
  {
    "text": "This is the code. It looks like a lot. But down here, the\nbottom half of this",
    "start": "3164080",
    "end": "3169360"
  },
  {
    "text": "is just us reporting\nthe results. Here's two print statements. And here, I'm\nactually also plotting",
    "start": "3169360",
    "end": "3175240"
  },
  {
    "text": "what the dots look like,\nall the flow rates. The actual code to do\nthe simulation is these--",
    "start": "3175240",
    "end": "3183550"
  },
  {
    "text": "OK, I lied seven lines\nof code, not five. So I've got a\nfunction-- fill_pool.",
    "start": "3183550",
    "end": "3189930"
  },
  {
    "text": "It can take in a size parameter. We could even do a lower\nrange and an upper range, if we wanted to,\nfor the flow rate.",
    "start": "3189930",
    "end": "3196290"
  },
  {
    "text": "For now, we'll just hard code\nit to be between 1 and 3. I've got two lists\nthat I'm going",
    "start": "3196290",
    "end": "3201510"
  },
  {
    "text": "to populate with a bunch of\ndifferent random numbers. So the flow rate will be\nchosen between 1 and 3.",
    "start": "3201510",
    "end": "3207780"
  },
  {
    "text": "So here, I've got\nrandom.random is another useful random function\nfrom the random library that",
    "start": "3207780",
    "end": "3216809"
  },
  {
    "text": "gives me a number\nbetween 0 and 1. So to get a number\nbetween 1 and 3 at random,",
    "start": "3216810",
    "end": "3223170"
  },
  {
    "text": "I'll just multiply\nby 2 and add 1. So bottom case, it'll be 1. Top case will be 2\ntimes 1 plus 1, 3.",
    "start": "3223170",
    "end": "3232730"
  },
  {
    "text": "So r, all we need to know,\nwill be a random number between 1 and 3, a float. So it could be anything.",
    "start": "3232730",
    "end": "3239780"
  },
  {
    "text": "Append that random number\nto our list of flow rates. And then using that flow rate\nthat we just randomly chose,",
    "start": "3239780",
    "end": "3248060"
  },
  {
    "text": "figure out how long\nit takes to fill the pool, the pool of size size,\nso size divided by the rate.",
    "start": "3248060",
    "end": "3255799"
  },
  {
    "text": "Just very simple math. And then we now\nhave a list that's populated with\nall of these times",
    "start": "3255800",
    "end": "3261500"
  },
  {
    "text": "that it takes to fill the pool. And the stuff inside\nthe loop for loop",
    "start": "3261500",
    "end": "3268009"
  },
  {
    "text": "here is one experiment. So I grabbed one random number. I figured out how long it\ntakes for me to fill my pool.",
    "start": "3268010",
    "end": "3274130"
  },
  {
    "text": "And then I repeated\nthat 10,000 times.",
    "start": "3274130",
    "end": "3279720"
  },
  {
    "text": "So down here, I'm going\nto report the average flow rate, which should be 2\nbecause if we're choosing",
    "start": "3279720",
    "end": "3287820"
  },
  {
    "text": "a random number between 1 and\n3, the average of those numbers better be 2.",
    "start": "3287820",
    "end": "3293010"
  },
  {
    "text": "And then I'm reporting the\nthing that we're actually interested in, which is the\naverage fill time, which",
    "start": "3293010",
    "end": "3298830"
  },
  {
    "text": "was not either of\nthose two things we had the intuition for. But it is the integral. And down here, I'm\ndoing some plots.",
    "start": "3298830",
    "end": "3305220"
  },
  {
    "text": "So these are the things\nthat I've plotted. So on the left side,\nI've got, on the x-axis--",
    "start": "3305220",
    "end": "3311130"
  },
  {
    "text": "apologies, I forgot to label my\naxes and put a title on this. So I'm just going\nto talk about it.",
    "start": "3311130",
    "end": "3316870"
  },
  {
    "text": "So the x-axis is numbers 0\nthrough 10,000 representing",
    "start": "3316870",
    "end": "3321900"
  },
  {
    "text": "each basically-- 0, 1, 2, 3, 4 represents\none of my experiments,",
    "start": "3321900",
    "end": "3327240"
  },
  {
    "text": "choosing a random number. And the y-axis is the random\nnumber that was chosen.",
    "start": "3327240",
    "end": "3332730"
  },
  {
    "text": "So this looks like a nice\nsmattering of randomness here, which is what we wanted.",
    "start": "3332730",
    "end": "3339820"
  },
  {
    "text": "And then for each\none of these values, I'm going to have a\ncorresponding fill rate.",
    "start": "3339820",
    "end": "3347150"
  },
  {
    "text": "So for example here,\nif, at point 0, the fill rate\nhappened to be 1, then",
    "start": "3347150",
    "end": "3355670"
  },
  {
    "text": "that means the time it took\nfor me to fill the pool should be up there at about 600.",
    "start": "3355670",
    "end": "3360980"
  },
  {
    "text": "It could be that little\npoint right there maybe. So this is a graph of random\nnumbers between 1 and 3,",
    "start": "3360980",
    "end": "3368000"
  },
  {
    "text": "10,000 of them chosen. And this is the graph of\nthe corresponding times it took for me to fill the pool\nwith each one of these dots",
    "start": "3368000",
    "end": "3375650"
  },
  {
    "text": "that we randomly chose. We notice that the\nplot on the right",
    "start": "3375650",
    "end": "3381500"
  },
  {
    "text": "is not uniformly scattered. In fact, it's more\ndensely populated down",
    "start": "3381500",
    "end": "3390110"
  },
  {
    "text": "towards the bottom.  So are two guesses were that the\nfill rate was either 300 or 400",
    "start": "3390110",
    "end": "3401260"
  },
  {
    "text": "on average. And neither of those were right.",
    "start": "3401260",
    "end": "3406360"
  },
  {
    "text": "Let's view these graphs in\na slightly different way. I'm actually going\nto the values. So right now, it was\njust a random number",
    "start": "3406360",
    "end": "3415000"
  },
  {
    "text": "gotten between 1 and 3. But I can sort them. It doesn't matter the order\nthat I got these random numbers.",
    "start": "3415000",
    "end": "3421270"
  },
  {
    "text": "I can sort them. And if I sort them, I get\nsomething that looks like this. So again, I've got randomly\nchosen numbers, 10,000 of them.",
    "start": "3421270",
    "end": "3430090"
  },
  {
    "text": "And with equal probability-- that's why we see\nthis nice line-- I chose a number\nbetween 1 and 3.",
    "start": "3430090",
    "end": "3439480"
  },
  {
    "text": "Does that make sense? OK. And so then the\ncorresponding time",
    "start": "3439480",
    "end": "3444520"
  },
  {
    "text": "it took for me to fill my pool\nfor each one of these numbers is a number between 200\nand 600, as we had guessed.",
    "start": "3444520",
    "end": "3454840"
  },
  {
    "text": "Now, the average of\nthe time it takes-- of the fill rate is\n2, which is true.",
    "start": "3454840",
    "end": "3462700"
  },
  {
    "text": "That is not a surprise for us\nbecause it's a random number between 1 and 3. But the actual average time\nit takes to fill my pool",
    "start": "3462700",
    "end": "3471130"
  },
  {
    "text": "is down here. If I were to average every\nsingle one of these values, it's down here at around 330.",
    "start": "3471130",
    "end": "3478020"
  },
  {
    "text": "So it's not 300. It's not 400. It's definitely\nbetween those two, but it's not really close\nto one or the other.",
    "start": "3478020",
    "end": "3485140"
  },
  {
    "text": "That's because I've got more\npoints more densely populated down towards the\nbottom than the top.",
    "start": "3485140",
    "end": "3491609"
  },
  {
    "text": "So the actual values that I got\nfor 10,000 different randomly chosen numbers is 331.",
    "start": "3491610",
    "end": "3497520"
  },
  {
    "text": "I think the actual value,\nif we do the integral, is like 329-point\nsomething or other.",
    "start": "3497520",
    "end": "3503640"
  },
  {
    "text": "So we're pretty close. But then again, we\nonly did 10,000. We could do a million. And we would get pretty\nclose to the actual value.",
    "start": "3503640",
    "end": "3511720"
  },
  {
    "text": "So it's not 300 or 400. And that's because,\nas was mentioned from one of the\nfellow students, there",
    "start": "3511720",
    "end": "3520079"
  },
  {
    "text": "is an inverse relationship\nbetween the fill time and the pool rate.",
    "start": "3520080",
    "end": "3526380"
  },
  {
    "text": "So it's the size of the\npool divided by the rate. So what we actually\nneed to do, if we",
    "start": "3526380",
    "end": "3531450"
  },
  {
    "text": "want to figure out\nthe value, is to solve the integral between\n1 and 3 of dx",
    "start": "3531450",
    "end": "3538200"
  },
  {
    "text": "over x or whatever\nthat would be.  So I don't want to\nbother with that.",
    "start": "3538200",
    "end": "3543980"
  },
  {
    "text": "But I will bother with\nseven lines of code, and then just wait five\nseconds for that code",
    "start": "3543980",
    "end": "3550490"
  },
  {
    "text": "to repeat 5 million\ntimes, or a million times, or 10 million times.",
    "start": "3550490",
    "end": "3557140"
  },
  {
    "text": "Is that cool? And this is totally\nwithin your reach.",
    "start": "3557140",
    "end": "3562240"
  },
  {
    "text": "It's not hard code to do. It's just for loops. It's using a random library\nto just randomly grab",
    "start": "3562240",
    "end": "3569350"
  },
  {
    "text": "a whole bunch of numbers,\nand then just knowing the problem at hand-- filling a pool at a\ncertain rate, simple math.",
    "start": "3569350",
    "end": "3576340"
  },
  {
    "text": "And then you get a nice\nanswer, a nice approximation, but still an answer\nto the question.",
    "start": "3576340",
    "end": "3583940"
  },
  {
    "text": "So hopefully, this shows you\nhow powerful computation can be. This is just another\nexample of how you can just",
    "start": "3583940",
    "end": "3589630"
  },
  {
    "text": "apply computation\nprogramming to a problem that you see in real life. If you choose to\ndo a Europe or take",
    "start": "3589630",
    "end": "3598150"
  },
  {
    "text": "future courses in a different\nfield, maybe not in CS, you will probably\napply computation",
    "start": "3598150",
    "end": "3605110"
  },
  {
    "text": "to concepts and ideas and\nproblems in those fields. And it'll be something\nsimilar to this.",
    "start": "3605110",
    "end": "3611350"
  },
  {
    "text": "You observe something. You try to think of it\ncomputationally, model it with a bunch of randomness,\nand then calculate",
    "start": "3611350",
    "end": "3620410"
  },
  {
    "text": "something of interest. OK. So that's the end of 6.100L.",
    "start": "3620410",
    "end": "3628850"
  },
  {
    "text": "I've got a little wrap-up\nto remind ourselves where we've been and\nwhere we will go.",
    "start": "3628850",
    "end": "3634610"
  },
  {
    "text": "So what did we learn? Oh, also, these slides\nwill be like a meme dump",
    "start": "3634610",
    "end": "3640910"
  },
  {
    "text": "of every remaining\nmeme that I have. So this is going to\nbe very meme-heavy.",
    "start": "3640910",
    "end": "3646550"
  },
  {
    "text": "So what did we learn? We've got, of course, we\nlearned Python, programming.",
    "start": "3646550",
    "end": "3652430"
  },
  {
    "text": "We learned a lot\nof Python syntax. Some lectures were heavier\non Python syntax than others.",
    "start": "3652430",
    "end": "3657650"
  },
  {
    "text": "But hopefully, you've\ngot a handle on that. We learned, of course,\nflow of control",
    "start": "3657650",
    "end": "3664190"
  },
  {
    "text": "with branches, if\nstatements, [INAUDIBLE]..",
    "start": "3664190",
    "end": "3669214"
  },
  {
    "text": "Else statements\nallow us to either do one thing or another in the\ncode, make a decision point.",
    "start": "3669215",
    "end": "3675170"
  },
  {
    "text": "Loops-- for loops\nand while loops, as well as exceptions\nas a way for us to deal with unexpected things\ncoming up in the course.",
    "start": "3675170",
    "end": "3682410"
  },
  {
    "text": "The ideas here, flow of\ncontrol, are actually transferable to any other\nprogramming language.",
    "start": "3682410",
    "end": "3688990"
  },
  {
    "text": "So if you know the\nideas, if you have the intuition for what\nkind of flow of control you'd like to use,\nall you'd have",
    "start": "3688990",
    "end": "3694500"
  },
  {
    "text": "to do is change the syntax. And then suddenly, you can write\nsome code in another language.",
    "start": "3694500",
    "end": "3700260"
  },
  {
    "text": "Of course, we learned\nabout data structures. So we did lists, really useful\ndata structures; dictionaries,",
    "start": "3700260",
    "end": "3707400"
  },
  {
    "text": "super useful data structures;\ntuples, things like that. So you can learn about\nmore advanced data",
    "start": "3707400",
    "end": "3714480"
  },
  {
    "text": "structures in a future\ncourse if you'd like. But those are really the top\ntwo or three most useful data",
    "start": "3714480",
    "end": "3721289"
  },
  {
    "text": "structures. We talked a lot-- actually, it was a comment-- we\ndidn't talk a lot specifically.",
    "start": "3721290",
    "end": "3727400"
  },
  {
    "text": "But it was a common theme\nin this class, organization of code. So these ideas of\ndecomposition and abstraction,",
    "start": "3727400",
    "end": "3734930"
  },
  {
    "text": "they came up a lot when\nwe talked about functions. That's our first introduction. So functions helped us take\nsome functional piece of code,",
    "start": "3734930",
    "end": "3743780"
  },
  {
    "text": "some code that does\nsomething, abstract it away into a nice little\nmodule, decompose it",
    "start": "3743780",
    "end": "3749450"
  },
  {
    "text": "into one little module. You have to write it once,\nmaybe write it a few times, but debug it a few\ntimes, and then use it",
    "start": "3749450",
    "end": "3757280"
  },
  {
    "text": "a whole bunch of\ntimes without worrying that it's going to change. So it's just a very\nnice way for us",
    "start": "3757280",
    "end": "3763279"
  },
  {
    "text": "to decompose functional\npieces of code. And then we saw it come up\nagain when we did classes,",
    "start": "3763280",
    "end": "3768650"
  },
  {
    "text": "object-oriented programming. We were able to bundle\nbehaviors and data together",
    "start": "3768650",
    "end": "3775190"
  },
  {
    "text": "into one nice little\nobject that we could then create many of in many\ndifferent parts of the code,",
    "start": "3775190",
    "end": "3781430"
  },
  {
    "text": "and then manipulate\nindividually. Another common theme throughout\nthis class was algorithms.",
    "start": "3781430",
    "end": "3788270"
  },
  {
    "text": "So we talked about bisection\nsearch algorithm way at the beginning\nof the lectures.",
    "start": "3788270",
    "end": "3793990"
  },
  {
    "text": "We talked about it in P set 1. And it came up again\ntowards the end when we talked about complexity\nand searching and sorting",
    "start": "3793990",
    "end": "3800680"
  },
  {
    "text": "algorithms, things like that. So that was kind of\nyour only big algorithm",
    "start": "3800680",
    "end": "3805750"
  },
  {
    "text": "that you saw in this class. But it shows you just\nhow you can implement",
    "start": "3805750",
    "end": "3811799"
  },
  {
    "text": "some code in a\ncompletely different way to behave in a completely\ndifferent way--",
    "start": "3811800",
    "end": "3817140"
  },
  {
    "text": "to be a lot faster with some\nconditions, like being sorted and things like that. And then lastly, the\nlast part of the class",
    "start": "3817140",
    "end": "3823980"
  },
  {
    "text": "was a little bit\nmore theory heavy. We talked about computational\ncomplexity and that big theta",
    "start": "3823980",
    "end": "3829170"
  },
  {
    "text": "notation. So that gave you a sense of\nhow to maybe design algorithms.",
    "start": "3829170",
    "end": "3835799"
  },
  {
    "text": "So if you have a first crack of\npseudocode on a piece of paper, you can see, well, if I need\nto run this code on a really",
    "start": "3835800",
    "end": "3843180"
  },
  {
    "text": "large data set, it's not going\nto work because it's too slow. You've got three nested\nloops or something like that.",
    "start": "3843180",
    "end": "3848500"
  },
  {
    "text": "So it might force you to rethink\nthe design of the algorithm sooner than having\nalready implemented it.",
    "start": "3848500",
    "end": "3855420"
  },
  {
    "text": "But if you're dealing\nwith small data sets, maybe you wouldn't\ncare that you've got three nested for loops or\na really inefficient recursion",
    "start": "3855420",
    "end": "3862410"
  },
  {
    "text": "algorithm. So those are the big things\nthat we learned in this class.",
    "start": "3862410",
    "end": "3868920"
  },
  {
    "text": "Your experience I categorize\nin three different ways.",
    "start": "3868920",
    "end": "3874025"
  },
  {
    "text": "So you might have\nbeen a natural. If you joined this class\nand immediately got logic, immediately knew how\nto do the problem",
    "start": "3874025",
    "end": "3880800"
  },
  {
    "text": "sets, that's totally fine. I still hope you got\nsomething out of this class and you learned something.",
    "start": "3880800",
    "end": "3886950"
  },
  {
    "text": "You might have joined\nthe class late. If you found 6.100A to be\ntoo fast or too challenging,",
    "start": "3886950",
    "end": "3896230"
  },
  {
    "text": "you might have joined it joined\nit late, kicked it to the curb, and said, let me join 100L. I welcomed you.",
    "start": "3896230",
    "end": "3902099"
  },
  {
    "text": "We did a little bit\nof research and found that even if you join late,\nit does not actually hinder your performance in the class.",
    "start": "3902100",
    "end": "3908309"
  },
  {
    "text": "So hopefully, that\nwas your experience. Did you work hard?",
    "start": "3908310",
    "end": "3913903"
  },
  {
    "text": "So maybe you didn't get all\nthe concepts right away. Maybe you struggled a little\nbit with the problem sets. Maybe you struggled a little bit\non the P set or on the quizzes.",
    "start": "3913903",
    "end": "3921410"
  },
  {
    "text": "But I still think that\nyou learned a lot. And the test is always\nto go back and look",
    "start": "3921410",
    "end": "3929390"
  },
  {
    "text": "at the first problem set. So if you do that when\nyou go home tonight, you look back at the first\nproblem set in this class,",
    "start": "3929390",
    "end": "3936140"
  },
  {
    "text": "you look back at the\ncode that you wrote, it will seem so easy. I promise you this.",
    "start": "3936140",
    "end": "3942410"
  },
  {
    "text": "And that's because I think\nyou all did such a good job. You tried your\nhardest in this class.",
    "start": "3942410",
    "end": "3948590"
  },
  {
    "text": "I know it's not easy. I know it's slower paced. But it's still\nnot an easy class.",
    "start": "3948590",
    "end": "3954859"
  },
  {
    "text": "And I think you've\nlearned a lot. Looking back at the\nfirst problem set will show you that for sure.",
    "start": "3954860",
    "end": "3961630"
  },
  {
    "text": "So what's next? There have been some\nquestions about what are some future classes\nthat you might want to take",
    "start": "3961630",
    "end": "3968530"
  },
  {
    "text": "or what can you do once\nyou've finished here. Here we go.",
    "start": "3968530",
    "end": "3973690"
  },
  {
    "text": "So we've got 6.100B. It is the most\nnatural next step.",
    "start": "3973690",
    "end": "3980010"
  },
  {
    "text": "It's a half semester\nclass in the second half of the semester. So they're finishing\nup right now basically.",
    "start": "3980010",
    "end": "3986160"
  },
  {
    "text": "It's an overview of\nreally interesting topics in computer science and with a\nfocus on data science, though.",
    "start": "3986160",
    "end": "3994470"
  },
  {
    "text": "And I actually run\nthat class as well. So what we talk about there\nis optimization algorithms.",
    "start": "3994470",
    "end": "4000300"
  },
  {
    "text": "So for example,\nlet's say you want to create a schedule for\nyour classes next semester.",
    "start": "4000300",
    "end": "4007550"
  },
  {
    "text": "And you will have\nsome constraints. You don't want to have classes\nat 8:00 AM, or 9:00 AM, or 10:00 AM, or 11:00 AM.",
    "start": "4007550",
    "end": "4013160"
  },
  {
    "text": "And you want it to all be\nwithin some time limit or things like that. Optimization algorithm could\nbe something that you write.",
    "start": "4013160",
    "end": "4020150"
  },
  {
    "text": "And you could just apply it\nto something that you have. Simulations, exactly what we\nsaw today of the physics filling",
    "start": "4020150",
    "end": "4029450"
  },
  {
    "text": "the pool thing-- you'll see more examples of\nthat and ask different questions",
    "start": "4029450",
    "end": "4036480"
  },
  {
    "text": "about it as well. So you'll see things\nlike calculate things",
    "start": "4036480",
    "end": "4042078"
  },
  {
    "text": "like standard deviations. How many times do we need to\nrepeat this experiment in order to be within some\nconfidence interval?",
    "start": "4042078",
    "end": "4047900"
  },
  {
    "text": "So how confident are\nyou about your answers? So we'll be doing\nmore things like that. And then there's, of course, the\nmachine learning aspect of it.",
    "start": "4047900",
    "end": "4055460"
  },
  {
    "text": "So if you have a\nbunch of experiments that you do that you get a\nwhole bunch of data from,",
    "start": "4055460",
    "end": "4062650"
  },
  {
    "text": "how can you fit a curve\nto those experiments? And then for a\nfuture experiment, what's the expected value?",
    "start": "4062650",
    "end": "4068805"
  },
  {
    "text": "So that's a little\nbit of machine learning on experimental data. And then some more\nmachine learning",
    "start": "4068805",
    "end": "4074800"
  },
  {
    "text": "in a more classical\nsense is dealing with clustering algorithms,\nand classification of data,",
    "start": "4074800",
    "end": "4082869"
  },
  {
    "text": "and things like that. So 6.100B I know a lot about\nbecause I also teach it.",
    "start": "4082870",
    "end": "4088510"
  },
  {
    "text": "It's a really good\nnext class, if you want to be employable\nfor an internship. If you take this, I think\nyou'll be good to go.",
    "start": "4088510",
    "end": "4096929"
  },
  {
    "text": "6.101 is also a really\nnice class to take next. If you really enjoyed the\nprogramming in this class,",
    "start": "4096930",
    "end": "4103350"
  },
  {
    "text": "6.101 will be your next step. It's called Fundamentals\nof Programming. And it is in Python.",
    "start": "4103350",
    "end": "4111359"
  },
  {
    "text": "It's pretty fast paced. So there will be\nproblem sets every week. And they're going to\nbe pretty hardcore.",
    "start": "4111359",
    "end": "4117930"
  },
  {
    "text": "There's going to be\na lot of debugging involved in those problem sets. And I actually was a recitation\ninstructor for that class.",
    "start": "4117930",
    "end": "4126119"
  },
  {
    "text": "And to get a first--  for the problem sets at least,\nto get something working",
    "start": "4126120",
    "end": "4133589"
  },
  {
    "text": "doesn't take that long. But to make it work according\nto the specifications that they have will\ntake a little bit",
    "start": "4133590",
    "end": "4140729"
  },
  {
    "text": "of debugging and reworking. That's because they deal with\na lot of real world data. So writing code that's really\nefficient is very important.",
    "start": "4140729",
    "end": "4149278"
  },
  {
    "text": "So again, writing nested\nfor loops, of course, we can totally do that. But making it efficient using\ndata structures like sets",
    "start": "4149279",
    "end": "4158318"
  },
  {
    "text": "to make the code efficient,\nusing proper algorithms that are efficient is a very\nimportant part of this class.",
    "start": "4158319",
    "end": "4166000"
  },
  {
    "text": "But you'll learn a lot\nif you take this class. You'll be very employable for\nan internship in some computer",
    "start": "4166000",
    "end": "4173979"
  },
  {
    "text": "science company. 6.102 is also a nice\nnext class, if you're",
    "start": "4173979",
    "end": "4180430"
  },
  {
    "text": "interested in\nsoftware construction. It is actually in a\ndifferent language. It's in TypeScript these days.",
    "start": "4180430",
    "end": "4186859"
  },
  {
    "text": "It used to be in Java. You can take what\nyou've learned here. And if you're interested in\nlearning a different language,",
    "start": "4186859",
    "end": "4193278"
  },
  {
    "text": "this is a nice one to try. Their motto is\nyou're writing code",
    "start": "4193279",
    "end": "4198400"
  },
  {
    "text": "that is safe from bugs,\neasy to understand, and ready for change. So they have also\nlots of problem sets.",
    "start": "4198400",
    "end": "4204700"
  },
  {
    "text": "But you're also\nworking in a team. So you get to learn\nhow to work in a team well with other students,\nhow to code together,",
    "start": "4204700",
    "end": "4213370"
  },
  {
    "text": "how to write code that has\nnice documentation, lots of debugging, things like that.",
    "start": "4213370",
    "end": "4219860"
  },
  {
    "text": "So more of that those\nideas of decomposition abstraction that we\nlearned in this class will definitely be prominent\nin this class, in 6.102.",
    "start": "4219860",
    "end": "4229600"
  },
  {
    "text": "And then, of course,\nwe've got other classes I'm happy to chat about. So machine learning\nis a nice one, again,",
    "start": "4229600",
    "end": "4238750"
  },
  {
    "text": "if you have a handle on\nprogramming really well and want to try just\napplying programming",
    "start": "4238750",
    "end": "4245290"
  },
  {
    "text": "to machine learning. An algorithms class is\nalso a fine next step, if you're more interested in the\ncomplexity part of this class",
    "start": "4245290",
    "end": "4252849"
  },
  {
    "text": "that we saw, also very,\nvery reasonable things to try to do next\nafter this class.",
    "start": "4252850",
    "end": "4259344"
  },
  {
    "text": " Yes, last slide.",
    "start": "4259345",
    "end": "4264929"
  },
  {
    "text": "If you're not going\nto code for a while, but think you might code\nin a couple of semesters",
    "start": "4264930",
    "end": "4270179"
  },
  {
    "text": "or something like that-- you want to take a more\ncomputational class in some desired field--",
    "start": "4270180",
    "end": "4276360"
  },
  {
    "text": "I would say that you\nshould try to practice coding at least once a week.",
    "start": "4276360",
    "end": "4281880"
  },
  {
    "text": "So in our website, we've\ngot a little help menu where you can go to-- we've\nlisted some other websites.",
    "start": "4281880",
    "end": "4287965"
  },
  {
    "text": "There's a little bit of\ncoding practice you can do. It doesn't need to be a lot-- 30 minutes once\na week, something",
    "start": "4287965",
    "end": "4294079"
  },
  {
    "text": "like that, just so you\ndon't forget to code can go a really long way\nbecause I know, over the summer,",
    "start": "4294080",
    "end": "4301310"
  },
  {
    "text": "sometimes I don't\ncode for a month or so because I do other stuff\nbesides coding in my life.",
    "start": "4301310",
    "end": "4308300"
  },
  {
    "text": "And coming back into it\ntakes a little bit of time. And it's just without practice,\nlike with anything else,",
    "start": "4308300",
    "end": "4314370"
  },
  {
    "text": "it's just easy to forget. And it's hard to\nget back into it. So even if you just do\na little bit of coding,",
    "start": "4314370",
    "end": "4319760"
  },
  {
    "text": "write a really simple\nprogram once a week, it's going to go a long way.",
    "start": "4319760",
    "end": "4324830"
  },
  {
    "text": "So that's it. I want to thank you all\nfor being in this class. And thank you for coming\nto this last lecture.",
    "start": "4324830",
    "end": "4330480"
  },
  {
    "text": "I know you didn't have to. But I do appreciate it. Happy coding. And good luck with exams.",
    "start": "4330480",
    "end": "4336440"
  },
  {
    "text": "And have a good break, everyone. Thank you. [APPLAUSE]",
    "start": "4336440",
    "end": "4343040"
  },
  {
    "start": "4343040",
    "end": "4351000"
  }
]