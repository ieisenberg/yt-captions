[
  {
    "text": " The following content is\nproved under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6060"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or to\nview additional materials",
    "start": "6060",
    "end": "12700"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "12700",
    "end": "26044"
  },
  {
    "text": "PROFESSOR: Today we're going\nto talk about privilege separation, so we're done with\nbuffer overflows at some level,",
    "start": "26044",
    "end": "32409"
  },
  {
    "text": "but will keep\ncoming back as being a problem that we\nwant to deal with, so we'll not talk about the\ndetails of how to exploit them,",
    "start": "32409",
    "end": "39510"
  },
  {
    "text": "now we'll switch more into\nmitigation, if you will, or prevention techniques of how\ndo you design a system where",
    "start": "39510",
    "end": "45860"
  },
  {
    "text": "buffer overflows aren't such a\nhuge problem for you, perhaps, as well as other\nsecurity vulnerabilities.",
    "start": "45860",
    "end": "52730"
  },
  {
    "text": "So for today we're going to\ntalk about privilege separation as a general purpose\ntechnique for how",
    "start": "52730",
    "end": "58550"
  },
  {
    "text": "to build a more secure system,\nand the particular paper we assigned for you today is\nthis web server called OKWS.",
    "start": "58550",
    "end": "65489"
  },
  {
    "text": "It's not necessarily the biggest\nexample of privilege separation on there, but it's a reasonably\nwell described system",
    "start": "65489",
    "end": "74072"
  },
  {
    "text": "that we can actually read\nand really understand how all the pieces work,\nand you should really think of it more as a\ncase study of how to do",
    "start": "74072",
    "end": "80450"
  },
  {
    "text": "privilege separation right. Not necessarily you should\ngo and download OKWS to run your website right now.",
    "start": "80450",
    "end": "87260"
  },
  {
    "text": "So before we dive into\nthe details of OKWS and Unix permissions,\nlet's just see",
    "start": "87260",
    "end": "93010"
  },
  {
    "text": "what is privilege separation,\nwhy is it such a good idea? And then, last\nweek's lecture, James",
    "start": "93010",
    "end": "99330"
  },
  {
    "text": "showed you that if you\nwrite a program in C, then it's almost inevitable\nyou'll have something bad",
    "start": "99330",
    "end": "104480"
  },
  {
    "text": "go wrong in that\nprogram, and the problem, at some level is that if\nyou have a large application",
    "start": "104480",
    "end": "111710"
  },
  {
    "text": "and there's any kind\nof all vulnerability in this application, then\nadversaries can connect",
    "start": "111710",
    "end": "117200"
  },
  {
    "text": "and send requests\nfor this application, might be able to trick\nit into doing bad things. And the application is\npresumably privileged,",
    "start": "117200",
    "end": "124170"
  },
  {
    "text": "meaning there is probably\nlots of data sitting behind the application that\nit can access and maybe delete",
    "start": "124170",
    "end": "131110"
  },
  {
    "text": "files, like you guys\nare going in Lab I now, read sensitive data,\ninstall back doors.",
    "start": "131110",
    "end": "138280"
  },
  {
    "text": "And the problem is\nthat a vulnerability in this large\napplication can allow it to modify any of\nthis data, or basically",
    "start": "138280",
    "end": "146520"
  },
  {
    "text": "exercise all of the privileges\nthis application has, and it probably has\nlots of privileges, unless you're careful about it.",
    "start": "146520",
    "end": "153850"
  },
  {
    "text": "And what privilege\nseparation tries to do, and what we'll look\nat in this lecture, is to take the\napplication and chop it up",
    "start": "153850",
    "end": "160540"
  },
  {
    "text": "into different\npieces and make sure that each piece has only\nthe necessary privileges",
    "start": "160540",
    "end": "167780"
  },
  {
    "text": "to do its job correctly. So you could imagine\nmaybe all the privileges you care about are access\nto data in the back end,",
    "start": "167780",
    "end": "175160"
  },
  {
    "text": "then all of this data, maybe\nyou can slice it up in some way, give this access to\nthis piece of data,",
    "start": "175160",
    "end": "181814"
  },
  {
    "text": "this piece access to this\npiece of data, and so on. So then, if you find a bug\nhere, then maybe this data",
    "start": "181814",
    "end": "189511"
  },
  {
    "text": "is kind of compromised,\nbut hopefully whatever slicing\nyou've done is going to enforce the separation\nso that a vulnerability here",
    "start": "189511",
    "end": "196830"
  },
  {
    "text": "doesn't allow the\nattacker to go and access these other pieces of\ndata, or, more generally,",
    "start": "196830",
    "end": "202950"
  },
  {
    "text": "other privileges of the\napplication has access to. So this is the big idea\nbehind privilege separation,",
    "start": "202950",
    "end": "208885"
  },
  {
    "text": "and it's hugely powerful. It actually doesn't really\nrely on buffer overflows",
    "start": "208885",
    "end": "214540"
  },
  {
    "text": "or other kinds of\nvulnerabilities being present. It's just a general\narchitecture for making sure",
    "start": "214540",
    "end": "219940"
  },
  {
    "text": "that vulnerabilities\nin one place don't affect as much as\npossible your system.",
    "start": "219940",
    "end": "228140"
  },
  {
    "text": "This turns out to be\nused pretty widely. Virtual machines often are\nused for enforcing isolation",
    "start": "228140",
    "end": "234165"
  },
  {
    "text": "within components. Maybe you'll take\nyour large system and break it up into a\nbunch of DMs for isolation,",
    "start": "234165",
    "end": "239245"
  },
  {
    "text": "but you could also use\nUnix to actually perform this isolation with slicing.",
    "start": "239245",
    "end": "246170"
  },
  {
    "text": "And as we'll talk\nabout in a second, Unix does provide you quite\na number of mechanisms that OKWS does actually use to\nachieve privilege separation.",
    "start": "246170",
    "end": "254492"
  },
  {
    "text": "And then many\napplications actually use privilege\nseparation practice. You guys are probably\nusing SSH quite often.",
    "start": "254492",
    "end": "260630"
  },
  {
    "text": "That uses privilege separation\nin many of its components to make sure its\nkeys are not leaked and the server doesn't\nget compromised",
    "start": "260630",
    "end": "268190"
  },
  {
    "text": "or the effect of our server\ncompromise is reduced. And perhaps more relevant to you\nguys, Chrome, the web browser,",
    "start": "268190",
    "end": "276484"
  },
  {
    "text": "actually does\nprivilege separation quite extensively as well. So that if there's a bug\nin Chrome's implementation,",
    "start": "276484",
    "end": "282340"
  },
  {
    "text": "the adversary doesn't get full\ncontrol of your computer, which is a great property to have.",
    "start": "282340",
    "end": "289480"
  },
  {
    "text": "So that's just a\nvery quick summary of what privilege\nseparation is about and why maybe OKWS is an\ninteresting case study.",
    "start": "289480",
    "end": "295759"
  },
  {
    "text": "I guess we can add\nit to this list, but it is more of an\nillustrative example",
    "start": "295760",
    "end": "301390"
  },
  {
    "text": "rather than an important piece\nof software in its own right. Make sense? Any questions before we dive in?",
    "start": "301390",
    "end": "308710"
  },
  {
    "text": " All right.",
    "start": "308710",
    "end": "313720"
  },
  {
    "text": "So OKWS, as I\nmentioned, it's going to use Unix permissions\nand sort of Unix mechanisms",
    "start": "313720",
    "end": "320830"
  },
  {
    "text": "to achieve the\nseparation between its different components. So as a result, it's\ngoing to be important",
    "start": "320830",
    "end": "326280"
  },
  {
    "text": "for us to understand how Unix\nprotection mechanisms work.",
    "start": "326280",
    "end": "331700"
  },
  {
    "text": "And Unix isn't in some\nway crucial to OKWS at some level for\nprivilege separation,",
    "start": "331700",
    "end": "338330"
  },
  {
    "text": "but for any isolation\nmechanism you're going to use, whether it's Unix,\nuid, these other mechanisms,",
    "start": "338330",
    "end": "345190"
  },
  {
    "text": "or virtual machines\nor containers or any other technology, it's\nreally important to understand",
    "start": "345190",
    "end": "350659"
  },
  {
    "text": "the details of how the\nisolation mechanism works, because there's a lot of\ntricky pieces to get right,",
    "start": "350660",
    "end": "356597"
  },
  {
    "text": "because you're dealing\nwith some attacker that can exploit any [INAUDIBLE]. So as a result,\nwe'll look at Unix",
    "start": "356597",
    "end": "361860"
  },
  {
    "text": "in a fair amount of\ndetail just to see what it's like, how\nshould we approach thinking about a particular\nsecurity mechanism.",
    "start": "361860",
    "end": "370950"
  },
  {
    "text": "Let's look at Unix. So Unix historically-- well,\nit's not necessarily the best",
    "start": "370950",
    "end": "377900"
  },
  {
    "text": "example of how to build\na security mechanism, because its security\nmechanism came about from a fairly utilitarian\nneed of needing",
    "start": "377900",
    "end": "385740"
  },
  {
    "text": "to separate different users on\na single Unix system from one another, so they\nweren't thinking of it as a general\npurpose mechanism",
    "start": "385740",
    "end": "391395"
  },
  {
    "text": "that applications\nlike OKWS are going to use to implement\nprivilege separation. They're just thinking,\nwe have a bunch",
    "start": "391395",
    "end": "397060"
  },
  {
    "text": "of users that are using\nthe same computer, we need to keep them\nfrom each other. So it's not necessarily a\ngeneral purpose mechanism",
    "start": "397060",
    "end": "403160"
  },
  {
    "text": "but still one that is fairly\nprevalent and, as a result,",
    "start": "403160",
    "end": "408170"
  },
  {
    "text": "widely used. Chrome tries to use many\nif these Unix mechanisms.",
    "start": "408170",
    "end": "413512"
  },
  {
    "text": "So what does Unix have? So, in general, when you're\nthinking about protection mechanism, you should\nbe thinking, well, what are the principals, meaning\nwhat are the entities that",
    "start": "413512",
    "end": "422810"
  },
  {
    "text": "have privileges or rights,\nand in Unix these principals are typically invoked, or\nsort of held, by a process.",
    "start": "422810",
    "end": "433410"
  },
  {
    "text": "So I guess the subject, if you\nwill, in Unix is a process, so",
    "start": "433410",
    "end": "441250"
  },
  {
    "text": "every operation or request that\nwe can think about in terms of security, whether something\nshould be allowed or not,",
    "start": "441250",
    "end": "447169"
  },
  {
    "text": "is probably going\nto be an operation that a process invokes\nby making a system call. And the principal is\nhow we describe what",
    "start": "447170",
    "end": "455870"
  },
  {
    "text": "privileges that process has. Conversely, there's also what\nwe can think about as objects,",
    "start": "455870",
    "end": "462669"
  },
  {
    "text": "and these are the\nthings that a process might act on that try to modify,\nread, observe in some way.",
    "start": "462670",
    "end": "468620"
  },
  {
    "text": "There are actually a\nlot of different kinds of objects you might worry\nabout protecting in an operating",
    "start": "468620",
    "end": "474130"
  },
  {
    "text": "system. What do you guys think? What should we worry\nabout protecting? AUDIENCE: Files.",
    "start": "474130",
    "end": "479530"
  },
  {
    "text": "PROFESSOR: Files. Yeah, great. That's a big one. That's where all of\nour data lives, right? There's a closely\nrelated thing we",
    "start": "479530",
    "end": "485139"
  },
  {
    "text": "might worry about-- directories.  Turns out to be\npretty important also",
    "start": "485140",
    "end": "491730"
  },
  {
    "text": "from a security standpoint. Anything else? AUDIENCE: Networking sockets. PROFESSOR: Yeah, great.",
    "start": "491730",
    "end": "496838"
  },
  {
    "text": "Networking sockets. ",
    "start": "496838",
    "end": "503425"
  },
  {
    "text": "Anything else going on? AUDIENCE: Other processes. PROFESSOR: Oh, yeah. Actually, this is like\nstuff that the application",
    "start": "503425",
    "end": "509820"
  },
  {
    "text": "or the user might care\nabout, but then there's all kinds of internal stuff that\nyou have to protect as well, so a process is not just the\nsubject that's making a system",
    "start": "509820",
    "end": "517510"
  },
  {
    "text": "call, but a process\nis also something that another process\ncan act upon. It can kill it or\ncreate a new one.",
    "start": "517510",
    "end": "524280"
  },
  {
    "text": "You have to figure out, what\nare the rules for thinking about process as an\nobject you can manipulate.",
    "start": "524280",
    "end": "530715"
  },
  {
    "text": "Other things we\nmight care about? AUDIENCE: Environment variables. PROFESSOR: I guess\nthey're probably",
    "start": "530715",
    "end": "536160"
  },
  {
    "text": "not an entity you can\nmodify, in the sense of being managed by an iOS and\nhaving some sort of a security",
    "start": "536160",
    "end": "542650"
  },
  {
    "text": "policy. I guess I sort of think\nof environment variables as just being some state a\nprocess maintains in memory.",
    "start": "542650",
    "end": "550560"
  },
  {
    "text": "But, I guess more\ngenerally, we do care about maybe\npart of a process is all this stuff in memory.",
    "start": "550560",
    "end": "555955"
  },
  {
    "text": "So there's going to be\nenvironment variables there, there's a stack,\nthere's arguments,",
    "start": "555955",
    "end": "561090"
  },
  {
    "text": "and this also turns out\nto be quite important. Presumably lots\nof sensitive data lives in processor's memory. Other things?",
    "start": "561090",
    "end": "567149"
  },
  {
    "text": "AUDIENCE: File\ndescriptors in general. PROFESSOR: There's like\nanother sort of internal detail that matters a lot.",
    "start": "567150",
    "end": "572459"
  },
  {
    "text": "So files are the stuff we\nmight care about on disk, and there's this operational\nthing, the file descriptor,",
    "start": "572460",
    "end": "581600"
  },
  {
    "text": "that OKWS makes quite\nextensive use of, and we'll see what\nfile descriptors are",
    "start": "581600",
    "end": "586810"
  },
  {
    "text": "in a little bit. Any other stuff you guys want to\nprotect in an operating system?",
    "start": "586810",
    "end": "592964"
  },
  {
    "text": "AUDIENCE: Hardware. PROFESSOR: Hardware? Yeah, I guess in many\nways hardware is-- well,",
    "start": "592964",
    "end": "597980"
  },
  {
    "text": "hardware is, in some ways,\nnot really an abstraction that the iOS provides to you.",
    "start": "597980",
    "end": "604236"
  },
  {
    "text": "I guess you run\na process, so you might want to make sure\nthe CPU doesn't get stuck. AUDIENCE: [INAUDIBLE].",
    "start": "604236",
    "end": "609380"
  },
  {
    "text": "PROFESSOR: Oh, yeah, yeah. So, like, extra\ndevices, Yeah, you're right, especially on\na desktop machine,",
    "start": "609380",
    "end": "615384"
  },
  {
    "text": "there's lots of extra stuff. So there's your USB drive you\nplug in, your webcam, probably your display itself is something\nyou'll want to protect,",
    "start": "615384",
    "end": "621440"
  },
  {
    "text": "like an application shouldn't\ndraw all over your screen anywhere. So, yes, actually I\nguess this isn't really",
    "start": "621440",
    "end": "627510"
  },
  {
    "text": "on a server side view of\nthings, where there's just a server somewhere in a\ncloset, but on your phone,",
    "start": "627510",
    "end": "634260"
  },
  {
    "text": "your microphone probably,\nis a hugely important object that you want to protect,\nyeah, but I will also leave it",
    "start": "634260",
    "end": "640770"
  },
  {
    "text": "off this list,\nbecause we're going to talk much more about\nserver applications for now, but you're absolutely right. ",
    "start": "640770",
    "end": "646600"
  },
  {
    "text": "I think for OKWS,\nthis is probably a more or less\nexhaustive list of things we might care about protecting,\nor, at least that OKWS uses.",
    "start": "646600",
    "end": "655270"
  },
  {
    "text": "So let's talk about\nhow does the OS kernel decide when a process\ncan do something",
    "start": "655270",
    "end": "662440"
  },
  {
    "text": "to any of these objects? So the [INAUDIBLE], I guess is,\nwe mostly think of a process",
    "start": "662440",
    "end": "670009"
  },
  {
    "text": "as having the privileges\nrepresented by this principal, and the principal\nin a Unix system",
    "start": "670010",
    "end": "676019"
  },
  {
    "text": "is this slightly\ncomplicated thing. There is something\ncalled a userid,",
    "start": "676020",
    "end": "682050"
  },
  {
    "text": "which is just a 32-bit integer. ",
    "start": "682050",
    "end": "687440"
  },
  {
    "text": "There's also a group ID, which\nis also a 32-bit integer.",
    "start": "687440",
    "end": "694700"
  },
  {
    "text": "And there's not really a great\nreason why they're different. It would've been nice\nif they were just",
    "start": "694700",
    "end": "700830"
  },
  {
    "text": "a uniform set of 32-bit\ninteger principal numbers, but unfortunately Unix\nsort of splits them",
    "start": "700830",
    "end": "705985"
  },
  {
    "text": "into two categories. There's userid integers and then\nthere are group ID integers. ",
    "start": "705985",
    "end": "713129"
  },
  {
    "text": "When we talk about a process\nhaving certain privileges, we typically think of a\nprocess being associated",
    "start": "713129",
    "end": "719040"
  },
  {
    "text": "with a particular uid value. The process, for the most\npart, has a single uid.",
    "start": "719040",
    "end": "726446"
  },
  {
    "text": "As with almost\neverything else, there's complications\neverywhere in Unix, but I'll simplify it for now. A process has one\nuid, and there's",
    "start": "726446",
    "end": "734360"
  },
  {
    "text": "also a list of group\nIDs that a process has.",
    "start": "734360",
    "end": "740320"
  },
  {
    "text": "For historical\nreasons, the group IDs are split into one and\nthen a list of others.",
    "start": "740320",
    "end": "747620"
  },
  {
    "text": "Roughly, a process\ncan then exercise the privileges represented\nby all of these identifiers.",
    "start": "747620",
    "end": "754020"
  },
  {
    "text": "So if there's something\naccessible to this userid a process can do stuff with it.",
    "start": "754020",
    "end": "759510"
  },
  {
    "text": "That's how we think about\nwhat privileges a process has, so now let's talk\nabout files, directories",
    "start": "759510",
    "end": "765050"
  },
  {
    "text": "and other kinds of objects. So what happens with files,\nor how do Unix permissions",
    "start": "765050",
    "end": "772370"
  },
  {
    "text": "for files work? Well, in Unix, every\nfile has-- actually,",
    "start": "772370",
    "end": "778520"
  },
  {
    "text": "maybe a better way to\nstart is to think of what operations do we care about? For files, things are\nrelatively straightforward.",
    "start": "778520",
    "end": "784970"
  },
  {
    "text": "For files, you probably\ncare about read, write,",
    "start": "784970",
    "end": "791449"
  },
  {
    "text": "maybe things like\nexecute as well, change permissions, maybe change\nother security properties.",
    "start": "791450",
    "end": "801395"
  },
  {
    "text": "AUDIENCE: Unlink. PROFESSOR: Unlink. Well, so is unlink a\nproperty of a file itself",
    "start": "801395",
    "end": "806820"
  },
  {
    "text": "or is it a directory thing? Actually a little not clear.",
    "start": "806820",
    "end": "812459"
  },
  {
    "text": "At least, the way Unix\nthinks of deleting a file, is that it's really a\ndirectory kind of thing,",
    "start": "812460",
    "end": "820529"
  },
  {
    "text": "because in Unix you can have--\na file is really an inode, and in Unix you could have\nmultiple hard links to an inode",
    "start": "820530",
    "end": "827540"
  },
  {
    "text": "and when you unlink a particular\nname of a Unix file, what you're really doing is killing\none of the names for that file,",
    "start": "827540",
    "end": "834880"
  },
  {
    "text": "but it might have other\nnames, other links to it. So what actually\nmatters is whether you",
    "start": "834880",
    "end": "841910"
  },
  {
    "text": "are allowed to modify the\ndirectory pointing at the file and not do something to\nthe file's inode itself.",
    "start": "841910",
    "end": "848850"
  },
  {
    "text": "So typically, unlink\nand link and rename, create, are operations\nthat we sort of think",
    "start": "848850",
    "end": "860370"
  },
  {
    "text": "of as being associated\nwith the directory, although, they are actually\nrelated, so \"create\" affects both the directory and\na new file as well,",
    "start": "860370",
    "end": "867190"
  },
  {
    "text": "so we have to figure out\nwhat are the rules there. OK, so what are the rules?",
    "start": "867190",
    "end": "872410"
  },
  {
    "text": "In order to help us decide\nwhen someone can read or write a file, we're going to stick\nsome permission stuff, or bits,",
    "start": "872410",
    "end": "878959"
  },
  {
    "text": "in the file inode. In Unix, every inode,\nmeaning something",
    "start": "878960",
    "end": "885460"
  },
  {
    "text": "that ends up being\nthe file or directory, has a couple of interesting\nfields for security purposes.",
    "start": "885460",
    "end": "893500"
  },
  {
    "text": "There's a userid and a group\nthat we say owns the file",
    "start": "893500",
    "end": "898910"
  },
  {
    "text": "or owns the directory. So you might have all the\nfiles in your home directory are probably owned by\nyour on your Unix system.",
    "start": "898910",
    "end": "907980"
  },
  {
    "text": "There's also a set of\npermission bits in Unix",
    "start": "907980",
    "end": "913091"
  },
  {
    "text": "that you can sort of think\nof as a bit of a matrix, so we want to have-- well\nin Unix there's basically",
    "start": "913091",
    "end": "920780"
  },
  {
    "text": "the basic design,\nthere's read, write and x for execute permissions.",
    "start": "920780",
    "end": "926279"
  },
  {
    "text": "We can specify these permissions\nfor different entities, and in Unix these are\nspecified for the owner,",
    "start": "926280",
    "end": "933940"
  },
  {
    "text": "meaning for the\nuid of the inode, for the group that owns the\nfile, this gid and everyone",
    "start": "933940",
    "end": "941250"
  },
  {
    "text": "else, other. You can sort of fill in\nthis 3 by 3 binary matrix.",
    "start": "941250",
    "end": "946380"
  },
  {
    "text": "You might say, well, I can read\nand write and maybe not execute this file. People in that gid might\nbe able to read but not",
    "start": "946380",
    "end": "953020"
  },
  {
    "text": "write this file, and\neveryone else-- or maybe they can also read it-- but not\ndo anything else with it.",
    "start": "953020",
    "end": "959250"
  },
  {
    "text": "So this is the way Unix\nstores permissions. There's some baroque way\nof encoding these things",
    "start": "959250",
    "end": "965310"
  },
  {
    "text": "that you'll see often that's\nprobably worth mentioning. In Unix, you encode this\nmatrix as an octal number,",
    "start": "965310",
    "end": "972390"
  },
  {
    "text": "so you treat each row here as\na base 8 number, so r is bit 4,",
    "start": "972390",
    "end": "979300"
  },
  {
    "text": "w is bit 2, x is bit\n1, so this ends up being 6, 4, 4, so you'll\nsort of say-- well,",
    "start": "979300",
    "end": "987570"
  },
  {
    "text": "you'll often see this\nnotation, even in this paper. You'll say, well, this\nfile has permission 6, 4, 4, meaning the owner can\nread and write this file,",
    "start": "987570",
    "end": "994880"
  },
  {
    "text": "the group owner can read it and\neveryone else can also read it. Does that make sense? ",
    "start": "994880",
    "end": "1005690"
  },
  {
    "text": "This tells us when you can\nread, write and execute a file. What about changing\npermissions on a file?",
    "start": "1005690",
    "end": "1010764"
  },
  {
    "text": " This is not entirely a fair\nquestion, but what do you",
    "start": "1010765",
    "end": "1015889"
  },
  {
    "text": "guys think? How should we\ndecide when someone should be able to change\nthese permissions, because that's also something\nto try to do, at least.",
    "start": "1015890",
    "end": "1024191"
  },
  {
    "text": "Any guesses? Yeah. AUDIENCE: If they\nhave [INAUDIBLE]. PROFESSOR: Maybe, yeah.",
    "start": "1024191",
    "end": "1030199"
  },
  {
    "text": "It depends. On the other hand, you might\ncreate a overwritable file that I just want to share\nwith anyone, that you",
    "start": "1030200",
    "end": "1037092"
  },
  {
    "text": "can read and write\nand modify my file, but then this also means\nthat you'll all of a sudden be able to change\npermissions, so you'll",
    "start": "1037092",
    "end": "1042656"
  },
  {
    "text": "be able to take my file and\nmake it not overwritable or take it over. That seems not\nnecessarily great, so",
    "start": "1042656",
    "end": "1049370"
  },
  {
    "text": "in Unix, what are\nthe designers chose, is that, well, if\nyou own the file,",
    "start": "1049370",
    "end": "1054429"
  },
  {
    "text": "meaning if you have the\nsame uid as the file, then you can change permissions.",
    "start": "1054430",
    "end": "1060040"
  },
  {
    "text": "Otherwise, you cannot. So even if you're in the gid\nhere and that group has all the permissions in the file,\nyou still cannot really change",
    "start": "1060040",
    "end": "1067030"
  },
  {
    "text": "the permissions on that file. You can just read,\nwrite, execute, whatever to get that solved.",
    "start": "1067030",
    "end": "1072170"
  },
  {
    "text": "Make sense? Then directories\nactually in Unix follow a pretty similar story.",
    "start": "1072170",
    "end": "1078320"
  },
  {
    "text": "So unlinking and linking\nentries in a directory",
    "start": "1078320",
    "end": "1085179"
  },
  {
    "text": "means having write\npermission on that directory, and if you want\nto rename a file,",
    "start": "1085180",
    "end": "1091230"
  },
  {
    "text": "then you probably need\nto have write permissions on both the directory\nyou're moving it from and the directory\nyou're moving it to.",
    "start": "1091230",
    "end": "1097760"
  },
  {
    "text": "A fairly natural plan. There are some corner cases with\nhard links, as it turns out.",
    "start": "1097760",
    "end": "1103470"
  },
  {
    "text": "Lecture notes have some\ndetails but, more or less, that's how it works. There's actually another\ninteresting operation",
    "start": "1103470",
    "end": "1109390"
  },
  {
    "text": "on directory that you might\ncare about, which is lookup. So you might want to just\nlook up a file in a directory.",
    "start": "1109390",
    "end": "1115430"
  },
  {
    "text": "And Unix sort of encodes\nexecute permissions as implementing lookup\nfor directories,",
    "start": "1115430",
    "end": "1121752"
  },
  {
    "text": "so what it means to have execute\npermissions on a directory is just being able to look\nup a certain name there. Might be that you don't actually\nhave to execute permission",
    "start": "1121752",
    "end": "1128540"
  },
  {
    "text": "on a directory so you\ncan look up a name, but you don't don't\nhave read permission, so you can't list the\ncontents of a directory.",
    "start": "1128540",
    "end": "1134990"
  },
  {
    "text": "It turns out to be\nuseful in some situations if you really want to\nrestrict what someone could do with those\nfiles, or sort of hide",
    "start": "1134990",
    "end": "1143690"
  },
  {
    "text": "the files from a user. Let's just work\nthrough an example. What happens on Unix if I\ncall open(\"/etc/password\")?",
    "start": "1143690",
    "end": "1151468"
  },
  {
    "start": "1151468",
    "end": "1156840"
  },
  {
    "text": "What checks is the kernel\ngoing to perform on my behalf when I issue this system call?",
    "start": "1156840",
    "end": "1162700"
  },
  {
    "text": " AUDIENCE: It checks whether\nyou have execute permissions",
    "start": "1162700",
    "end": "1169490"
  },
  {
    "text": "on etc? PROFESSOR: Yeah, that\nwill happen somewhere. I need to execute on etc. AUDIENCE: And then\nexecute on slash.",
    "start": "1169490",
    "end": "1175870"
  },
  {
    "text": "PROFESSOR: Yes, actually, I need\nto look up what does /etc even point to? So if I don't have look\nup permissions on root,",
    "start": "1175870",
    "end": "1181539"
  },
  {
    "text": "then that's not going to work. AUDIENCE: Then you need\nread on /etc/password.",
    "start": "1181540",
    "end": "1187220"
  },
  {
    "text": " PROFESSOR: Make sense, roughly?",
    "start": "1187220",
    "end": "1195230"
  },
  {
    "text": "Here's a small puzzle. Suppose that MIT sets up a group\nfor all the people associated",
    "start": "1195230",
    "end": "1203630"
  },
  {
    "text": "with 6.858 and another group\nin the Unix sets of gids for all the TAs at MIT, but they\ndon't have a group four 6.858",
    "start": "1203630",
    "end": "1213695"
  },
  {
    "text": "TAs for some silly reason. Could I create a file that's\nonly accessible to 6.858 TAs?",
    "start": "1213695",
    "end": "1222010"
  },
  {
    "text": "If I have a 6.858 group,\nor some gid, and a TAs gid.",
    "start": "1222010",
    "end": "1229260"
  },
  {
    "text": " So there's only one gid\nthat I can stick in a file.",
    "start": "1229260",
    "end": "1236920"
  },
  {
    "text": "Any guesses? AUDIENCE: Well, you couldn't\nanyway because you might",
    "start": "1236920",
    "end": "1242030"
  },
  {
    "text": "have TAs that and not 858 TAs. PROFESSOR: That's true, yeah.",
    "start": "1242030",
    "end": "1247534"
  },
  {
    "text": "Suppose they want to--\nyou're right, yeah, so there are students in 858\nthat are TAs of other classes,",
    "start": "1247534",
    "end": "1252716"
  },
  {
    "text": "so that's maybe not great. But, still, lets try to\ndo intersections somehow. AUDIENCE: [INAUDIBLE]. ",
    "start": "1252717",
    "end": "1260520"
  },
  {
    "text": "PROFESSOR: Yes, so you\ncan actually play tricks with this mechanism. It's not perfect,\nbut you can sort of",
    "start": "1260520",
    "end": "1265770"
  },
  {
    "text": "use it to encode more\ninteresting things. You could actually do something\nlike create /foo/bar/grades",
    "start": "1265770",
    "end": "1272940"
  },
  {
    "text": "file, and what I'll do is\nI'll actually make foo owned by-- or set the gid to 6.858\nand only make it executable",
    "start": "1272940",
    "end": "1283259"
  },
  {
    "text": "for the group. So unless you're in this group,\nyou can't even look things up in /foo, and then I could\nset the permissions on bar",
    "start": "1283260",
    "end": "1292080"
  },
  {
    "text": "so the gid is for TAs and\nthen it's executable for group",
    "start": "1292080",
    "end": "1297250"
  },
  {
    "text": "as well and not others. So unless you can actually\ntraverse this path,",
    "start": "1297250",
    "end": "1302579"
  },
  {
    "text": "you can't get to\nthis grades file. It's kind of, you know,\na cute hack, if you will,",
    "start": "1302579",
    "end": "1307950"
  },
  {
    "text": "but these kinds of\ntricks are things you end up doing with whatever\nthe base primitives are,",
    "start": "1307950",
    "end": "1313230"
  },
  {
    "text": "the isolation mechanism\nprovides to you. And even OKWS plays all these\ntricks as well in their design.",
    "start": "1313230",
    "end": "1322320"
  },
  {
    "text": "Make sense? Questions? Yeah. AUDIENCE: If, like, the\npermissions on the grades",
    "start": "1322320",
    "end": "1327690"
  },
  {
    "text": "file itself, were let's\nsay-- the QID was 6.858, could a TA, like, link it\nto some other directory",
    "start": "1327690",
    "end": "1332725"
  },
  {
    "text": "and allow anybody in\n6.858 to access it? PROFESSOR: Yeah,\npotentially, right? So you might worry about\nother things like leakage now,",
    "start": "1332725",
    "end": "1339490"
  },
  {
    "text": "so Unix in general\ndoesn't try to enforce these kinds of transitive\nsecurity properties,",
    "start": "1339490",
    "end": "1347000"
  },
  {
    "text": "meaning that once a process\nhas access to some data, or has some privileges,\nit can basically delegate",
    "start": "1347000",
    "end": "1354520"
  },
  {
    "text": "those privileges\nto anyone it wants. There are other kinds of systems\ncalled mandatory access control",
    "start": "1354520",
    "end": "1359880"
  },
  {
    "text": "systems. We'll perhaps talk\nabout them later, but those try to\nactually enforce this transitive property that,\nif I give it to you, then",
    "start": "1359880",
    "end": "1367589"
  },
  {
    "text": "you can't give to other people. You're basically stuck. It sort of taints you and\nyou can't go anywhere else.",
    "start": "1367589",
    "end": "1373450"
  },
  {
    "text": "In Unix, this is\ngenerally not the case, and a TA probably could not\nhard link this file because",
    "start": "1373450",
    "end": "1382090"
  },
  {
    "text": "of another silly rule that Unix\nenforces for hard links, which is that only the owner\nof a file can hard",
    "start": "1382090",
    "end": "1388075"
  },
  {
    "text": "link it somewhere else. And this is partly\nbecause of the way Unix does quotas,\nbecause in Unix quotas",
    "start": "1388075",
    "end": "1395789"
  },
  {
    "text": "are by who owns the file. So if you create\nsome giant file,",
    "start": "1395790",
    "end": "1400900"
  },
  {
    "text": "I can hard link a copy\nover to my directory, then you maybe delete the\nfile, but I still have it, and the file system thinks,\nyep, that's the owner,",
    "start": "1400900",
    "end": "1407860"
  },
  {
    "text": "but you can't even\ndelete it, because I have the reference to it. So that would be a bit of\nan unfortunate combination",
    "start": "1407860",
    "end": "1414200"
  },
  {
    "text": "of Unix mechanisms there. But in general, you should\nworry about such things",
    "start": "1414200",
    "end": "1419530"
  },
  {
    "text": "like transitivity,\nlike could someone-- or maybe a better problem\nis, maybe someone was a TA",
    "start": "1419530",
    "end": "1425040"
  },
  {
    "text": "and then we remove him. But maybe they can still sort\nof stash away a reference somewhere, so this is maybe\nnot a perfect solution",
    "start": "1425040",
    "end": "1432590"
  },
  {
    "text": "for this problem\nfor many reasons, including the fact that\nthere's non-858 TAs taking 858.",
    "start": "1432590",
    "end": "1439240"
  },
  {
    "text": "Are there questions?  OK, so that's files and\ndirectories in Unix,",
    "start": "1439240",
    "end": "1446140"
  },
  {
    "text": "so how security works for them. A closely related thing in\nUnix are file descriptors.",
    "start": "1446140",
    "end": "1453060"
  },
  {
    "start": "1453060",
    "end": "1458800"
  },
  {
    "text": "The file descriptors are used\nfairly pretty widely in OKWS and what a file descriptor\nrepresents in Unix",
    "start": "1458800",
    "end": "1465990"
  },
  {
    "text": "is basically an open file. So in Unix in\nparticular, it turns out that the security checks on\nopening a file are performed--",
    "start": "1465990",
    "end": "1476142"
  },
  {
    "text": "or security checks\nfor accessing a file-- are performed when you open\nthe file in the first place.",
    "start": "1476142",
    "end": "1481309"
  },
  {
    "text": "And from there on, you\nhave basically a handle on the file, where\nanyone with that handle",
    "start": "1481310",
    "end": "1486400"
  },
  {
    "text": "can now perform\noperations on that file. So the rules for basically\naccessing a file descriptor are, if you have an open file\ndescriptor in your process,",
    "start": "1486400",
    "end": "1494230"
  },
  {
    "text": "then you can access it. And security checks\ndon't apply in the sense that, to get that\nfile descriptor,",
    "start": "1494230",
    "end": "1500277"
  },
  {
    "text": "you could have just opened\nthe file, in which case these regular checks\nwould have applied, or some other process\nmight have passed the file",
    "start": "1500277",
    "end": "1507020"
  },
  {
    "text": "descriptor to you, so you\ncan pass file descriptors by inheriting from a\nparent, so a parent",
    "start": "1507020",
    "end": "1513260"
  },
  {
    "text": "can pass a file descriptor\nto a child process or you can pass file descriptors\nthrough sockets in Unix,",
    "start": "1513260",
    "end": "1518510"
  },
  {
    "text": "but however you manage\nto get a file descriptor, you can read and write the\nfile descriptor all you want, because the security\nchecks have already",
    "start": "1518510",
    "end": "1524580"
  },
  {
    "text": "been done when the file\ndescriptor was initially created. So that's actually\na nice way in Unix to give someone privileges\nthat they don't otherwise have.",
    "start": "1524580",
    "end": "1533360"
  },
  {
    "text": "So in OKWS there's probably\nmany components that need to act as a\ncertain socket or file,",
    "start": "1533360",
    "end": "1539889"
  },
  {
    "text": "or whatever you\nhave it, and one way to implement this without\ngiving them direct access",
    "start": "1539890",
    "end": "1545450"
  },
  {
    "text": "to read and write the\nfile in the file system, is to have someone else open the\nfile, create a file descriptor",
    "start": "1545450",
    "end": "1551600"
  },
  {
    "text": "and then pass it to\nthis extra component. This way, you can\nreally precisely say, that's the only file\ndescriptor you'll ever have.",
    "start": "1551600",
    "end": "1558080"
  },
  {
    "text": "And there's nothing\nelse they can try to do in the file\nsystem that might be funny. Make sense?",
    "start": "1558080",
    "end": "1564942"
  },
  {
    "text": "So in fact, it has fairly\nsimple rules, I guess. If you have a file\ndescriptor, you can do whatever\nyou want with It. OK, so what about processes?",
    "start": "1564942",
    "end": "1571760"
  },
  {
    "text": "What are the rules there? I guess, what can\nyou do to a process? In Unix it's fairly simple.",
    "start": "1571760",
    "end": "1577360"
  },
  {
    "text": "You could, I guess,\ncreate a process. You could kill it. You could debug it.",
    "start": "1577360",
    "end": "1583410"
  },
  {
    "text": "There's this mechanism\ncalled ptrace in Unix, and probably a couple\nof other things.",
    "start": "1583410",
    "end": "1589470"
  },
  {
    "text": "And the rules are\nrelatively straightforward. So you can always create\na process, more or less,",
    "start": "1589470",
    "end": "1597279"
  },
  {
    "text": "except that the child\nprocess is going to get the same userid as\nyou, so you can't create a process with some other userid\nby default. So you can't say,",
    "start": "1597280",
    "end": "1605700"
  },
  {
    "text": "well, I'd like to\ncreate a process running as \"web,\" one of my TAs. The operating system kernel\nwill not let you do that.",
    "start": "1605700",
    "end": "1612278"
  },
  {
    "text": "If you want to kill a\nprocess, you basically have to have the same userid\nas that process as well. It's kind of nice.",
    "start": "1612279",
    "end": "1617860"
  },
  {
    "text": "All the things with\na single userid are isolated from things\nwith other userids.",
    "start": "1617860",
    "end": "1623290"
  },
  {
    "text": "And more or less, the same\nrule applies to ptrace as well. The process with the same\nuid can debug processes",
    "start": "1623290",
    "end": "1630250"
  },
  {
    "text": "with the same uid. As with everything, it turns out\nrace conditions show up often",
    "start": "1630250",
    "end": "1638496"
  },
  {
    "text": "and can cause\nproblems, but there have been actually\nsome interesting bugs in the ptrace mechanism in Linux\nwhere, if you debug a process",
    "start": "1638496",
    "end": "1647040"
  },
  {
    "text": "and then it switches and gets\nmore privileges, then maybe you could somehow trick the\nkernel into letting you retain",
    "start": "1647040",
    "end": "1652770"
  },
  {
    "text": "this debug privilege\non this process, even after it becomes\nmore privileged. Then you can monkey with\nits memory and take it over.",
    "start": "1652770",
    "end": "1660519"
  },
  {
    "text": "But at least the basic\ndesign that you probably want to enforce is roughly\na process with the same uid",
    "start": "1660520",
    "end": "1665610"
  },
  {
    "text": "can act on each\nother, otherwise not.  And I guess, OK, so what else\ndid we have on this list?",
    "start": "1665610",
    "end": "1673112"
  },
  {
    "text": "Processes. Memory sort of goes\nalong with the process. So, unless you're\nin that process you can't access\nthe process memory.",
    "start": "1673112",
    "end": "1679250"
  },
  {
    "text": "Virtual memory nicely enforces\nthis isolation for us. Except this debug\nmechanism lets you",
    "start": "1679250",
    "end": "1684596"
  },
  {
    "text": "poke in another\nprocess's memory if you happen to have the same userid. ",
    "start": "1684596",
    "end": "1690420"
  },
  {
    "text": "And then, I guess the\nother remaining thing for us is networking,\nand networking in Unix",
    "start": "1690420",
    "end": "1698530"
  },
  {
    "text": "doesn't really fall\nin the same model, partly because of\nit came about later. You know, the Unix operating\nsystem was designed first",
    "start": "1698530",
    "end": "1705260"
  },
  {
    "text": "and then networking came\nalong and became popular.  It has a slightly\ndifferent set of rules.",
    "start": "1705260",
    "end": "1713059"
  },
  {
    "text": "So I guess the operations\nwe really care about on the network is, presumably,\nconnecting somewhere or maybe",
    "start": "1713060",
    "end": "1721850"
  },
  {
    "text": "listening actually for\nconnections as well. So you might want to\nconnect to some web server or you might want to run a\nweb server yourself and listen",
    "start": "1721850",
    "end": "1728910"
  },
  {
    "text": "on a particular port. Maybe you want to actually\nread data from a connection,",
    "start": "1728910",
    "end": "1734080"
  },
  {
    "text": "or read/write data on\nsome existing connection, or you want to send the\nraw packets or receive.",
    "start": "1734080",
    "end": "1741445"
  },
  {
    "start": "1741445",
    "end": "1747440"
  },
  {
    "text": "So in Unix the network\nstuff basically has no relation to userids,\nthe first approximation.",
    "start": "1747440",
    "end": "1756450"
  },
  {
    "text": "The rule is anyone\ncan always connect to any machine or\nany IP address,",
    "start": "1756450",
    "end": "1763770"
  },
  {
    "text": "can always open a connection. If you want to listen\non a port, that's where one difference\nshows up, which",
    "start": "1763770",
    "end": "1770100"
  },
  {
    "text": "is that most users\nare prohibited from listening on ports\nbelow a magic value of 1024.",
    "start": "1770100",
    "end": "1778050"
  },
  {
    "text": "Basically, if you listen and\nthe port is less than 1024,",
    "start": "1778050",
    "end": "1783750"
  },
  {
    "text": "then you have to be\na special user called \"super user\" with a uid of 0.",
    "start": "1783750",
    "end": "1790800"
  },
  {
    "text": "And in general, Unix has this\nnotion of an administrator, or super user, which is\nrepresented by having uid of 0,",
    "start": "1790800",
    "end": "1797710"
  },
  {
    "text": "which can bypass pretty\nmuch all these checks, so if you're running as root,\nthen none of this applies.",
    "start": "1797710",
    "end": "1803930"
  },
  {
    "text": "You can read/write files,\nyou can change permissions on anyone's files and\nthe operating system will let you do that\nbecause it thinks you",
    "start": "1803930",
    "end": "1810790"
  },
  {
    "text": "should have all the privileges. And one thing you\nreally need it for is for listening on\nports below 1024.",
    "start": "1810790",
    "end": "1819060"
  },
  {
    "text": "Any idea why this\nweird restriction? Who cares about\nyour port number?",
    "start": "1819060",
    "end": "1825272"
  },
  {
    "text": "AUDIENCE: Would they define\nspecific port numbers to be certain things,\nlike HTTP is like 80. ",
    "start": "1825272",
    "end": "1830455"
  },
  {
    "text": "PROFESSOR: Yeah, it's\nlike HTTP is 80 here. On the other hand, other\nservices might be above 1024,",
    "start": "1830455",
    "end": "1837929"
  },
  {
    "text": "so why this restriction? Why is this useful? Seems to complicate my\nlife more, after you.",
    "start": "1837930",
    "end": "1844280"
  },
  {
    "text": "AUDIENCE: Since you don't want\nrandom searches just listening",
    "start": "1844280",
    "end": "1849545"
  },
  {
    "text": "on your HTTP. PROFESSOR: Yes. I think the reason\nfor this is that it used to be the case,\nat least, that you'd",
    "start": "1849545",
    "end": "1855530"
  },
  {
    "text": "have these machines where\nthere's lots of things running, there's users logging in,\nthere's services running,",
    "start": "1855530",
    "end": "1860930"
  },
  {
    "text": "and you want to make sure\nthat some random user logging into our machine doesn't\nall of sudden take over the web",
    "start": "1860930",
    "end": "1866445"
  },
  {
    "text": "server running on that machine,\nbecause people connecting from outside don't really know\nwho is running on that port.",
    "start": "1866445",
    "end": "1871590"
  },
  {
    "text": "They just connect to port 80. And if I want to log\ninto that machine and start my own\nweb server, then I would just take over all the web\nserver traffic to that machine.",
    "start": "1871590",
    "end": "1879056"
  },
  {
    "text": "That is probably\nnot a great plan. So this is one way that the\nnetworking subsystem in Unix",
    "start": "1879056",
    "end": "1885020"
  },
  {
    "text": "prevents arbitrary\nusers from impersonating what are called well-known\nservices running",
    "start": "1885020",
    "end": "1890320"
  },
  {
    "text": "on these low port numbers. So that's sort of one\nrationale for this restriction.",
    "start": "1890320",
    "end": "1896664"
  },
  {
    "text": "And then, in terms of\nreading and writing data on a connection, well, if\nyou have a file descriptor for a particular socket, then\nUnix lets you read and write",
    "start": "1896664",
    "end": "1903930"
  },
  {
    "text": "any data you want on that\nTCP or uTP connection. And then for\nsending raw packets, Unix is actually pretty\nparanoid about this,",
    "start": "1903930",
    "end": "1910280"
  },
  {
    "text": "so it actually will not\nlet you send arbitrary packets over the network. It has to be in the context\nof a particular connection,",
    "start": "1910280",
    "end": "1916820"
  },
  {
    "text": "except if you're\nroot, of course, then you can do\nwhatever you want.",
    "start": "1916820",
    "end": "1921870"
  },
  {
    "text": "That make sense? Somewhat? Any other questions about\nall this Unix machinery?",
    "start": "1921870",
    "end": "1929424"
  },
  {
    "text": "OK, so one interesting\nquestion we could try to ask, is where do these\nuserids come from?",
    "start": "1929424",
    "end": "1935159"
  },
  {
    "text": "So, when we talk about\nprocesses having a userid or having a groupid, and if\nyou run PS on your machine,",
    "start": "1935160",
    "end": "1940552"
  },
  {
    "text": "you probably see lots of\nprocesses with different uid values. Where do these guys come from? We need some sort of\na mechanism really",
    "start": "1940552",
    "end": "1947770"
  },
  {
    "text": "to bootstrap all of\nthese userid values, and the way it works in Unix,\nat least at the mechanism level,",
    "start": "1947770",
    "end": "1954850"
  },
  {
    "text": "is that there's several\nsystem calls for doing this. ",
    "start": "1954850",
    "end": "1963799"
  },
  {
    "text": "So initially to bootstrap\nthese uid values, there's a system called setuid()\nthat you that you can pass some",
    "start": "1963800",
    "end": "1970840"
  },
  {
    "text": "sort of a uid number to,\nand it'll set the userid of the current\nprocess to this value.",
    "start": "1970840",
    "end": "1978400"
  },
  {
    "text": "This is actually a dangerous\noperation, of course, so in sort of Unix tradition,\nyou can only do this",
    "start": "1978400",
    "end": "1984220"
  },
  {
    "text": "if you're uid is equal to 0. Well, must have. ",
    "start": "1984220",
    "end": "1991659"
  },
  {
    "text": "So if you are this\nroot user with uid 0, then you can call setuid() and\nswitch your user to anything",
    "start": "1991660",
    "end": "1997650"
  },
  {
    "text": "else. There's a couple\nother similar system calls for initializing the gids\nassociated with the process.",
    "start": "1997650",
    "end": "2004730"
  },
  {
    "text": "It's setgid and setgroups. ",
    "start": "2004730",
    "end": "2012330"
  },
  {
    "text": "So these system\ncalls together let you configure the privileges\nthat a process has.",
    "start": "2012330",
    "end": "2018870"
  },
  {
    "text": "So typically, when you go\nand log into a Unix machine, the way that your processes\nget the right privileges,",
    "start": "2018870",
    "end": "2026429"
  },
  {
    "text": "is that you're\ninitially actually not talking to a process\nrunning as your uid,",
    "start": "2026430",
    "end": "2031520"
  },
  {
    "text": "partly because the system\ndoesn't know who you are yet. Instead, what you\ninitially talk to in Unix",
    "start": "2031520",
    "end": "2036610"
  },
  {
    "text": "is some sort of a login\nprocess, so maybe SSH runs a process for anyone\nthat connects to it",
    "start": "2036610",
    "end": "2044200"
  },
  {
    "text": "and tries to\nauthenticate the user. So this login process runs with\nuid=0 as root and then when",
    "start": "2044200",
    "end": "2056060"
  },
  {
    "text": "the supply username\nand password, it's actually going to check\nit against its own database",
    "start": "2056060",
    "end": "2064469"
  },
  {
    "text": "of accounts and,\ntypically in Unix, this get stored in two\nfiles, /etc/password, which,",
    "start": "2064469",
    "end": "2072649"
  },
  {
    "text": "for historical reasons, no\nlonger stores the password. And there's another\nfile, /etc/shadow,",
    "start": "2072650",
    "end": "2079408"
  },
  {
    "text": "which does store the password,\nbut in /etc/password, there is actually a table\nmapping every username",
    "start": "2079409",
    "end": "2086300"
  },
  {
    "text": "in the system to\nthese integer values. So your username gets mapped\nto a particular integer number",
    "start": "2086300",
    "end": "2091739"
  },
  {
    "text": "in this /etc/password file, and\nthen login will check whether your password is correct,\naccording to this file,",
    "start": "2091739",
    "end": "2097830"
  },
  {
    "text": "and if it is, it'll find your\ninteger uid and then call setuid on your uid value\nand then execute your shell.",
    "start": "2097830",
    "end": "2107440"
  },
  {
    "text": "Whatever, (den/sh) And now\nyou can actually interact with the shell, but it's running as\nyour uid so you cannot do any",
    "start": "2107440",
    "end": "2115840"
  },
  {
    "text": "arbitrary damage\nto this machine. Question? AUDIENCE: Is it possible to\nstart a new process with uid 0",
    "start": "2115840",
    "end": "2121980"
  },
  {
    "text": "if you have some non-0 uid? For example, if you\nwant [INAUDIBLE].",
    "start": "2121980",
    "end": "2127180"
  },
  {
    "text": "PROFESSOR: Yeah, so this sort of\nlets you go down, if you will, so with your root, you\ncan restrict yourself down to a different uid, but\nthe rule we set so far",
    "start": "2127180",
    "end": "2134049"
  },
  {
    "text": "is you can only create a process\nwith the same uid as yourself. But, of course, you want\nto elevate your privileges for various reasons.",
    "start": "2134050",
    "end": "2139593"
  },
  {
    "text": "You want to, I don't know,\ninstall a package now and you need root privileges. So, Unix has\nbasically two ways you",
    "start": "2139593",
    "end": "2147410"
  },
  {
    "text": "could think about doing this. One way we already\nmentioned, this file descriptor passing thing.",
    "start": "2147410",
    "end": "2152680"
  },
  {
    "text": "So if you really want to\nelevate your privileges, maybe you can talk\nto some helper, and the helper is\nrunning as root.",
    "start": "2152680",
    "end": "2158150"
  },
  {
    "text": "You can ask it, hey, can\nyou open this file for me? And maybe you like define\nsome new interface, and that helper opens the\nfile and gives you back",
    "start": "2158150",
    "end": "2165180"
  },
  {
    "text": "the file descriptor\nthrough fd passing. That's one way you could\nelevate your privileges, but it's kind of awkward,\nbecause what you really",
    "start": "2165180",
    "end": "2172450"
  },
  {
    "text": "want in some cases is a process\nrunning with more privileges. So in order to do this, Unix\nhas this sort of clever,",
    "start": "2172450",
    "end": "2180170"
  },
  {
    "text": "sort of problematic mechanism\ncalled setuid binaries. ",
    "start": "2180170",
    "end": "2190560"
  },
  {
    "text": "So setuid binaries are just\nregular executables in a Unix",
    "start": "2190560",
    "end": "2195980"
  },
  {
    "text": "file system, except\nthat when you run them, when you sort of co-exec on a\nsetuid binary-- one example is,",
    "start": "2195980",
    "end": "2204610"
  },
  {
    "text": "for example, is /bin/su on\nmost machines, or sudo as well.",
    "start": "2204610",
    "end": "2210114"
  },
  {
    "text": "There's a bunch of setuid\nbinaries on a typical Unix system. The difference is that when you\nexecute one of these binaries,",
    "start": "2210114",
    "end": "2216950"
  },
  {
    "text": "it actually switches the\nuserid of the process to the owner of this binary.",
    "start": "2216950",
    "end": "2224890"
  },
  {
    "text": "It's a little bit of a weird\nmechanism when you first see it. Typically the way it is used\nis that this binary probably",
    "start": "2224890",
    "end": "2231520"
  },
  {
    "text": "has an owner uid of\n0, because you really want to regain lots of\nprivileges-- you want to regain",
    "start": "2231520",
    "end": "2238950"
  },
  {
    "text": "root privileges-- so you\ncan run this su command, and the kernel, when\nyou exec this binary,",
    "start": "2238950",
    "end": "2244280"
  },
  {
    "text": "will switch the uid\nof the process to 0, so this program will now\ndo some privileged stuff.",
    "start": "2244280",
    "end": "2252470"
  },
  {
    "text": "That make sense? AUDIENCE: If you\nhave uid 0 and you change the uid of all\nof those setuid binaries",
    "start": "2252470",
    "end": "2258710"
  },
  {
    "text": "to something non-0 and then\nyou could start [INAUDIBLE]. PROFESSOR: Well, many\nprocesses will not",
    "start": "2258710",
    "end": "2266160"
  },
  {
    "text": "be able to regain\nprivileges later. You might be kind of stuck. It'll still boot probably,\nbut maybe some things",
    "start": "2266160",
    "end": "2273135"
  },
  {
    "text": "will not work. This mechanism is\nnot tied to uid 0. In fact, \"I\" as a user on a Unix\nsystem can create any binary.",
    "start": "2273135",
    "end": "2281290"
  },
  {
    "text": "I can build some\nprogram, compile it, and I can set this setuid\nbit on that program itself.",
    "start": "2281290",
    "end": "2289560"
  },
  {
    "text": "It's owned by me,\nthe user, my userid. And what this means is,\nanyone executing my program",
    "start": "2289560",
    "end": "2295310"
  },
  {
    "text": "will run that code\nwith my userid. Is that problematic? Should I do this?",
    "start": "2295310",
    "end": "2303019"
  },
  {
    "text": "AUDIENCE:So, if there was\na bug in your application and suddenly someone\ncould do anything as you, not just with the program\nthat's assigned to you.",
    "start": "2303020",
    "end": "2309825"
  },
  {
    "text": "PROFESSOR: Right. But yes, so that's right. If my application\nis buggy, or if it allows you to run\nanything you want,",
    "start": "2309825",
    "end": "2316090"
  },
  {
    "text": "well, I could copy\nthe system shell and make its setuid\nto me, then anyone can run a shell\nunder my account.",
    "start": "2316090",
    "end": "2321140"
  },
  {
    "text": "That would probably not\nbe a best plan of action. But a system mechanism,\nwell, this is not necessarily",
    "start": "2321140",
    "end": "2328680"
  },
  {
    "text": "problematic, because the only\nperson that can set the setuid bit on a binary is\nthe owner of the file,",
    "start": "2328680",
    "end": "2336680"
  },
  {
    "text": "and owner of the file\nhas that uid privilege, so I can basically give away\nmy account to other people if I",
    "start": "2336680",
    "end": "2342060"
  },
  {
    "text": "want, but someone else cannot\ncreate a setuid binary with my userid.",
    "start": "2342060",
    "end": "2347330"
  },
  {
    "text": "That make sense? And the setuid bit\nis sort of stored alongside these permission bits.",
    "start": "2347330",
    "end": "2353940"
  },
  {
    "text": "So somewhere there\nis also a setuid bit in every inode that says whether\nthis executable or this program",
    "start": "2353940",
    "end": "2362420"
  },
  {
    "text": "should be switched to the\nowner's uid on execution. Does that make sense as sort\nof a privilege estimation",
    "start": "2362420",
    "end": "2369030"
  },
  {
    "text": "mechanism? It turns out that this is\na very tricky mechanism to use correctly.",
    "start": "2369030",
    "end": "2374997"
  },
  {
    "text": "So the kernel\nimplements it correctly. It's actually a fairly\neasy thing to do. It's just one check. If there is [INAUDIBLE],\nswitch the uid.",
    "start": "2374997",
    "end": "2380530"
  },
  {
    "text": "Easy enough. But using it safely turns out\nto be very tricky because, as was just pointed out, if\nthis program has bugs in it",
    "start": "2380530",
    "end": "2389280"
  },
  {
    "text": "or does something\nunexpected, then you might be able to do\narbitrary things uid 0",
    "start": "2389280",
    "end": "2395109"
  },
  {
    "text": "or whatever the other uid is. And it turns out in Unix, the\nway you execute a program,",
    "start": "2395110",
    "end": "2400290"
  },
  {
    "text": "you inherit a lot of stuff\nfrom your parent process. For example, you can pass\nenvironment variables",
    "start": "2400290",
    "end": "2406650"
  },
  {
    "text": "to the setuid binaries, and\nit used to be the case that-- well, in Unix, you can specify\nwhat shared library should be",
    "start": "2406650",
    "end": "2413960"
  },
  {
    "text": "used for a process by setting\nan environment variable, and it used to be that the\nsetuid binaries weren't careful",
    "start": "2413960",
    "end": "2419700"
  },
  {
    "text": "about filtering out these\nenvironment variables, so you could run\nbin/su, but say, well, use my shared library\nfor things like printf(),",
    "start": "2419700",
    "end": "2426290"
  },
  {
    "text": "so your printf() is going to\nrun when bin/su prints something out, and you can get it to run\na shell instead of printing",
    "start": "2426290",
    "end": "2433590"
  },
  {
    "text": "stuff. So there's many\nother subtle things that you have to get right\nin terms of this program",
    "start": "2433590",
    "end": "2440130"
  },
  {
    "text": "not trusting the user\ninput, and this is actually quite different\nfrom how you think of writing most Unix programs. You generally do trust\nthe user input a lot,",
    "start": "2440130",
    "end": "2447900"
  },
  {
    "text": "so for this reason,\nthe setuid mechanism hasn't been the most\nsecure part, in some sense,",
    "start": "2447900",
    "end": "2455940"
  },
  {
    "text": "of the overall Unix system. All right. Any questions about this stuff?",
    "start": "2455940",
    "end": "2461591"
  },
  {
    "text": "Yeah. AUDIENCE: Does setuid\napply to groups as well, or just the user? PROFESSOR: There is actually\na symmetric setgid bit",
    "start": "2461591",
    "end": "2468580"
  },
  {
    "text": "you could set. Why not. And you could-- well, the\nsame thing happens, right?",
    "start": "2468580",
    "end": "2476660"
  },
  {
    "text": "If the file has a particular\ngid and that setgid bit is set when you run the\nprogram, you get that group.",
    "start": "2476660",
    "end": "2482610"
  },
  {
    "text": "It's not used a lot, but\nit is useful in cases where you want to give\nvery specific privileges.",
    "start": "2482610",
    "end": "2488119"
  },
  {
    "text": "So here, like bin/su probably\nneeds a lot of privileges, but it might be that\nthere's some program that needs a little bit\nof extra privileges,",
    "start": "2488120",
    "end": "2493824"
  },
  {
    "text": "like maybe to write something\nto a special log file. So you probably want\nto give it some group and make that log file\nwritable by that group.",
    "start": "2493824",
    "end": "2499734"
  },
  {
    "text": "So even if the program is\nbuggy, which is likely the case, then, well, you lose\nthat group, sort of, privileges but not much else.",
    "start": "2499734",
    "end": "2506510"
  },
  {
    "text": "It is sort of useful\nas a mechanism, but it doesn't show up often,\nbecause it's-- I don't why.",
    "start": "2506510",
    "end": "2512660"
  },
  {
    "text": "People should use root more. Yeah. AUDIENCE: What are the\nrestrictions on who",
    "start": "2512660",
    "end": "2518640"
  },
  {
    "text": "can change the [INAUDIBLE]? AUDIENCE: Yes. ",
    "start": "2518640",
    "end": "2525289"
  },
  {
    "text": "Different Unix implementations\nhave slightly different checks for this. The general rule of thumb\nis, only root can change",
    "start": "2525290",
    "end": "2533119"
  },
  {
    "text": "the owner of a file,\nbecause you don't want to create files\nowned by someone else, and you don't want to take\nover other people's files,",
    "start": "2533120",
    "end": "2540210"
  },
  {
    "text": "of course, either. So, in general, if you're\na particular non-0 uid, then you're stuck.",
    "start": "2540210",
    "end": "2545570"
  },
  {
    "text": "You can't change\nowner of any file. If you're a root, you can\nchange it to anything you want.",
    "start": "2545570",
    "end": "2551950"
  },
  {
    "text": "There are some complications\nif you're a setuid binary and you switch from\none uid to another-- it's a little bit tricky--\nbut for the most part",
    "start": "2551950",
    "end": "2559820"
  },
  {
    "text": "you basically can't\nchange the owner of a file unless you're a root.",
    "start": "2559820",
    "end": "2565230"
  },
  {
    "text": "Make sense? Other questions\nabout this machinery?",
    "start": "2565230",
    "end": "2570425"
  },
  {
    "text": "It is, admittedly, a\nslightly baroque system. You could probably imagine\nlots of ways in which you could simplify this but, in fact,\nmost successful systems sort of",
    "start": "2570425",
    "end": "2577240"
  },
  {
    "text": "look like this as\nthey evolve over time. As it turns out, you\ncan make some good use of these sandboxing mechanisms.",
    "start": "2577240",
    "end": "2584800"
  },
  {
    "text": "These are just sort of the basic\nUnix primitives that show up in pretty much every\nUnix-like operating systems,",
    "start": "2584800",
    "end": "2590190"
  },
  {
    "text": "so Mac OS X has this, Linux\nhas this, FreeBSD has this, Solaris-- if anyone's\nstill runs this, et cetera.",
    "start": "2590190",
    "end": "2597585"
  },
  {
    "text": "But in every one of these, there\nis actually more sophisticated mechanisms that you\nmight use, so Linux",
    "start": "2597585",
    "end": "2602730"
  },
  {
    "text": "has something called set COMP\nfor sandboxing processes, Mac OS X has its own\nthing called Seatbelt,",
    "start": "2602730",
    "end": "2609170"
  },
  {
    "text": "and there's all\nkinds of extensions. We'll at one extension actually\nnext week, just to see, but this is just to get you\nfamiliar with the basics",
    "start": "2609170",
    "end": "2616330"
  },
  {
    "text": "that every Unix system has.  So one sort of last\nbit of machinery",
    "start": "2616330",
    "end": "2624020"
  },
  {
    "text": "we want to look at\nbefore diving into OKWS, is how do you deal\nwith setuid binaries? How do you protect yourself\nfrom these security holes,",
    "start": "2624020",
    "end": "2632950"
  },
  {
    "text": "if you will. So the problem is that\ninevitably you'll have some setuid binaries in your\nsystem like /bin/su, or sudo,",
    "start": "2632950",
    "end": "2640060"
  },
  {
    "text": "or what have you, and there's\nprobably bugs in these programs, so if someone can\nexecute the setuid binary,",
    "start": "2640060",
    "end": "2647299"
  },
  {
    "text": "then that process\nmight get root access, so you don't want to do that--\nor don't want to allow that.",
    "start": "2647300",
    "end": "2653980"
  },
  {
    "text": " The mechanism in\nUnix that is often",
    "start": "2653980",
    "end": "2659130"
  },
  {
    "text": "used to prevent a\npotentially malicious process from exploiting\nsetuid binaries is",
    "start": "2659130",
    "end": "2666430"
  },
  {
    "text": "to use the file system\nnamespace to modify it, using the chroot system call.",
    "start": "2666430",
    "end": "2671980"
  },
  {
    "text": "OKWS uses this\npretty extensively. So in Unix, what you can\ndo is you can call chroot",
    "start": "2671980",
    "end": "2678820"
  },
  {
    "text": "on a particular directory. So maybe you can chroot(\"/foo\")\nand there's actually two",
    "start": "2678820",
    "end": "2686920"
  },
  {
    "text": "explanations I want to\ngive to what chroot does. The first one is just intuitive. What it does is it means\nthat after you run chroot,",
    "start": "2686920",
    "end": "2693960"
  },
  {
    "text": "the root directory or slash\nbasically is equal to what /foo used to be before\nyou called chroot.",
    "start": "2693960",
    "end": "2701279"
  },
  {
    "text": "So it kind restricts your\nnamespace down /foo so it looks like that's all\nthe stuff you have. So if you have a file that\nused to be called /foo/x,",
    "start": "2701280",
    "end": "2711609"
  },
  {
    "text": "after calling chroot, you\ncan get at that file by just opening /x.",
    "start": "2711610",
    "end": "2717230"
  },
  {
    "text": "So just restrict your namespace\ndown to a subdirectory. So this is the\nintuitive version.",
    "start": "2717230",
    "end": "2722599"
  },
  {
    "text": "Of course, in\nsecurity, what matters is not the intuitive version,\nbut what is the kernel exactly doing with this system call?",
    "start": "2722600",
    "end": "2728750"
  },
  {
    "text": "What the kernel does is\nbasically two things. So when you call chroot\na particular directory,",
    "start": "2728750",
    "end": "2734810"
  },
  {
    "text": "it does two things. One, it changes\nwhat slash means, so whenever you access--\nwhenever you start a path",
    "start": "2734810",
    "end": "2742330"
  },
  {
    "text": "name with slash, the kernel will\nnow plug in whatever the file you gave to chroot.",
    "start": "2742330",
    "end": "2747890"
  },
  {
    "text": "It's roughly the /foo file\nfrom before you called chroot.",
    "start": "2747890",
    "end": "2753250"
  },
  {
    "text": "The other thing the kernel does,\nis it tries to prevent you from escaping out of your / by doing\n/../ because you could imagine",
    "start": "2753250",
    "end": "2761840"
  },
  {
    "text": "in Unix, I could ask for, you\nknow, give me /../etcpassword. ",
    "start": "2761840",
    "end": "2767552"
  },
  {
    "text": "So if I just prepended /foo,\nthen this would not be good, because I can just sort of\nwalk out of /foo and go get",
    "start": "2767552",
    "end": "2774605"
  },
  {
    "text": "/etc/password. So the other thing\nthe Unix kernel does, when you call chroot, is\nfor that particular process,",
    "start": "2774605",
    "end": "2782730"
  },
  {
    "text": "it changes how it evaluates\n/../ in this directory, so it basically changes /../\nin /foo to point to itself,",
    "start": "2782730",
    "end": "2793860"
  },
  {
    "text": "so it doesn't let you do\nthis kind of escaping, and this change only applies to\nthis process and not everyone",
    "start": "2793860",
    "end": "2800790"
  },
  {
    "text": "else. Does that roughly make sense? So do you guys have\nany ideas about how",
    "start": "2800790",
    "end": "2808570"
  },
  {
    "text": "you could escape a chroot\nenvironment because of the way it's implemented?",
    "start": "2808570",
    "end": "2813671"
  },
  {
    "text": "Yeah. AUDIENCE: So if\nyou're [INAUDIBLE], you can make a directory and\nthen bring that directory, and then go back to your\ndirectory and [INAUDIBLE].",
    "start": "2813671",
    "end": "2820044"
  },
  {
    "text": "PROFESSOR: Yeah. So, the interesting\nthing-- so the kernel only keeps track of\none chroot directory.",
    "start": "2820044",
    "end": "2827030"
  },
  {
    "text": "And I'll explain sort of the\nanswer that I gave in a second. So what you could do is,\nmaybe your chroot'd into /foo.",
    "start": "2827030",
    "end": "2835970"
  },
  {
    "text": " You're sort of stuck. You want to get\nat /etc/password,",
    "start": "2835970",
    "end": "2841140"
  },
  {
    "text": "but how do you do it? Well, what you could\ndo is you can actually open the root directory now.",
    "start": "2841140",
    "end": "2849110"
  },
  {
    "text": "That will give you a file\ndescriptor for effectively what is /foo.",
    "start": "2849110",
    "end": "2855349"
  },
  {
    "text": "Then you could\ncall chroot again. Maybe you can chroot into /bar.",
    "start": "2855350",
    "end": "2863109"
  },
  {
    "text": "So now the kernel changes plan. Root is no longer /foo but\nit's /foo/bar and this /../",
    "start": "2863110",
    "end": "2870839"
  },
  {
    "text": "redirection only\napplies to /foo/bar/.. ",
    "start": "2870840",
    "end": "2876950"
  },
  {
    "text": "But know that you still have\nthe file descriptor for /foo. So now what you could do is\nyou could change directories",
    "start": "2876950",
    "end": "2884320"
  },
  {
    "text": "into that file descriptor,\nfchdir(fd) from this open call,",
    "start": "2884320",
    "end": "2891140"
  },
  {
    "text": "and now you chdir(..) And at\nthis point, you were in /foo,",
    "start": "2891140",
    "end": "2900819"
  },
  {
    "text": "you go to /../ from foo. It's no longer looped\nback to /foo itself, because you now have a different\nroute and now you can escape,",
    "start": "2900820",
    "end": "2908730"
  },
  {
    "text": "so this is perhaps a good\nillustration for why the exact mechanism matters a lot.",
    "start": "2908730",
    "end": "2914170"
  },
  {
    "text": "It's not, sort of, the intuitive\nexplanation that matters. And partly as a result,\nin Unix only the root user",
    "start": "2914170",
    "end": "2921730"
  },
  {
    "text": "can invoke chroot,\nbecause otherwise chroot would be fairly\npointless, in some ways.",
    "start": "2921730",
    "end": "2930210"
  },
  {
    "text": "So in Unix, you basically\nhave to have uid 0 in order to chroot a process. It's a little bit of a\ndisappointment in some ways,",
    "start": "2930210",
    "end": "2937980"
  },
  {
    "text": "because if you wanted to\nbuild a really privileged separated system\nwhere everyone had just the minimum set of\nprivileges necessary,",
    "start": "2937980",
    "end": "2945047"
  },
  {
    "text": "you would probably\nneed to use chroot, you would need to create\nnew userids, et cetera, but in order to do\nthat in Unix, you",
    "start": "2945047",
    "end": "2950090"
  },
  {
    "text": "have to have a process\nrunning as root, which has lots of privileges. So it's a little bit of\nan unfortunate trade off,",
    "start": "2950090",
    "end": "2956050"
  },
  {
    "text": "but it's probably one you could\nmake some reasonable design decisions on. Question.",
    "start": "2956050",
    "end": "2961080"
  },
  {
    "text": "AUDIENCE: If in the [INAUDIBLE]\ndirectory, so [INAUDIBLE] to a file that's in [INAUDIBLE].",
    "start": "2961080",
    "end": "2968200"
  },
  {
    "text": "PROFESSOR: No, actually,\nunless you do this trick, the kernel evaluates symlinks in\nyour root context, if you will.",
    "start": "2968200",
    "end": "2976799"
  },
  {
    "text": "So if you have a symlink\nto /etc/password, it'll evaluate as if it is\nsimilar to /foo/etc/password. AUDIENCE: [INAUDIBLE].",
    "start": "2976800",
    "end": "2983012"
  },
  {
    "text": "PROFESSOR: A hard link\nwould not be protected. Yeah. So one way to set up a chroot\nenvironment without creating",
    "start": "2983012",
    "end": "2989700"
  },
  {
    "text": "lots of copies of\nfiles is to, in fact, create a directory and hard\nlink all these things back. That's fairly cheap\nand then use it.",
    "start": "2989700",
    "end": "2998049"
  },
  {
    "text": "AUDIENCE: If a program gradually\ngenerates inodes and, like, actually not to give you\nthe file descriptor--",
    "start": "2998050",
    "end": "3003182"
  },
  {
    "text": "PROFESSOR: Right. So it's like a huge\nimportant detail here, is you can only access a file by\npath name, not by saying,",
    "start": "3003182",
    "end": "3011150"
  },
  {
    "text": "I want to open inode number 23. This might be some weird file\nout there outside of my chroot.",
    "start": "3011150",
    "end": "3016290"
  },
  {
    "text": "So in Unix you cannot open an\ninode by inode number unless you're root, of course.",
    "start": "3016290",
    "end": "3024590"
  },
  {
    "text": "Other questions? All right. So I think we have sort\nof enough machinery now to see what these\nOKWS guys do, and probably",
    "start": "3024590",
    "end": "3034170"
  },
  {
    "text": "a useful, quick\nintroduction is by contrast to what everyone else does.",
    "start": "3034170",
    "end": "3040100"
  },
  {
    "text": "So what is it that everyone else\nis doing that the OKWS guys are afraid of?",
    "start": "3040100",
    "end": "3045540"
  },
  {
    "text": "So the alternative design\nthat pretty much every web server follows, is like the\nunprivileged separating picture",
    "start": "3045540",
    "end": "3051180"
  },
  {
    "text": "above there, so you might\nhave web browsers out there on the internet, these guys are\ngoing to connect to your server",
    "start": "3051180",
    "end": "3059020"
  },
  {
    "text": "and, inside of your server,\nyou're basically going to have, basically one process, httpd,\nwell, Apache, let's say.",
    "start": "3059020",
    "end": "3069050"
  },
  {
    "text": "And this is one process running\nas a single userid called www in /etc/password.",
    "start": "3069050",
    "end": "3074940"
  },
  {
    "text": "It takes all your\nconnections, does everything with your process, including\ndoing SSL processing maybe,",
    "start": "3074940",
    "end": "3081420"
  },
  {
    "text": "including running\napplication code and PHP, et cetera, all part\nof the same process.",
    "start": "3081420",
    "end": "3087760"
  },
  {
    "text": "And if need be, this process\nwill typically connect back to some database\nserver, maybe MySQL",
    "start": "3087760",
    "end": "3095328"
  },
  {
    "text": "could be running on\nthe same machine, could be running elsewhere. And this MySQL process\nactually writes data to disk.",
    "start": "3095329",
    "end": "3103240"
  },
  {
    "text": "But to connect to this\nMySQL, you probably have to provide a\nusername and password but, typically, the way\napplications are written",
    "start": "3103240",
    "end": "3111600"
  },
  {
    "text": "or, at least, not very security\nconscious applications are written, is that there's a\nsingle account on the MySQL",
    "start": "3111600",
    "end": "3117280"
  },
  {
    "text": "server that the application\nknows the username and password for, so you just connect\nand you have access to all of your data.",
    "start": "3117280",
    "end": "3122853"
  },
  {
    "text": "So it's super\nconvenient to write, because you just write\nwhatever code you want. You can access whatever data\nin the database you want.",
    "start": "3122853",
    "end": "3129540"
  },
  {
    "text": "There's no real\nisolation, but it has security problems that\nthese guys worry about, namely if there's bugs in\nApache, maybe in SSL, maybe",
    "start": "3129540",
    "end": "3138450"
  },
  {
    "text": "in the application code\nor in the PHP interpreter, then inevitably the answer\nis, if there's a bug",
    "start": "3138450",
    "end": "3144860"
  },
  {
    "text": "and you can exploit\nit, then, yep, you get the whole\napplication data contents.",
    "start": "3144860",
    "end": "3150470"
  },
  {
    "text": "Does that make sense? You had some questions before. No?",
    "start": "3150470",
    "end": "3155499"
  },
  {
    "text": "AUDIENCE: Oh. Uh, yeah, it's fine. Thank you. PROFESSOR: All right. No worries. OK. So this is sort of state of\nart what these guys really",
    "start": "3155499",
    "end": "3162387"
  },
  {
    "text": "wanted to protect against. And in their case, I guess they\nworried a lot because they were",
    "start": "3162387",
    "end": "3168340"
  },
  {
    "text": "thinking, well, they're building\nbasically a dating website, okcupid.com and\nthey really wanted to make sure their,\nI guess reputation,",
    "start": "3168340",
    "end": "3175450"
  },
  {
    "text": "wouldn't be damaged by\nthese data disclosures. So in fact, I\nguess-- from talking",
    "start": "3175450",
    "end": "3183200"
  },
  {
    "text": "to the guy that\nwrote this paper, it seems like they actually\nhaven't been compromised-- or, at least, not\nthat they know of--",
    "start": "3183200",
    "end": "3190570"
  },
  {
    "text": "or their data wasn't leaked. And it seems to be partly\nas a result of running OKWS,",
    "start": "3190570",
    "end": "3197125"
  },
  {
    "text": "partly as a result of maybe more\nproactive monitoring that they do, et cetera, but it seems\nto have worked out reasonably",
    "start": "3197125",
    "end": "3202870"
  },
  {
    "text": "well for them, to\nsome extent, I guess, because of this\narchitecture that we have.",
    "start": "3202870",
    "end": "3208720"
  },
  {
    "text": "OK. So the reason that\npeople, I guess, don't break up their\napplications into smaller",
    "start": "3208720",
    "end": "3216356"
  },
  {
    "text": "components is\nbecause it actually takes quite a bit of effort to\nseparate out all their pieces of code and define clean\ninterfaces between them,",
    "start": "3216356",
    "end": "3223540"
  },
  {
    "text": "decide which data\nevery component should have access to, or\nif you decide to implement new feature, you're\ngoing to have",
    "start": "3223540",
    "end": "3228880"
  },
  {
    "text": "to change the data that every\ncomponent has access to give it new privileges or take\nsome away, et cetera.",
    "start": "3228880",
    "end": "3234940"
  },
  {
    "text": "So it's a bit of some overhead\nfor separating application,",
    "start": "3234940",
    "end": "3240349"
  },
  {
    "text": "but in their case I\nguess they decided it was worth the effort.",
    "start": "3240350",
    "end": "3245890"
  },
  {
    "text": "Let's try to understand how\ntheir web server design works, and perhaps one way to do\nit is to trace out roughly",
    "start": "3245890",
    "end": "3254980"
  },
  {
    "text": "how http request gets\nprocessed by an OKWS server.",
    "start": "3254980",
    "end": "3262700"
  },
  {
    "text": "So, similarly to\nthat picture, there's probably a web browser\nout there somewhere that wants to go to\nokcupid.com, and in their design",
    "start": "3262700",
    "end": "3270992"
  },
  {
    "text": "they sort of imagined\nthey're going to have a bunch of machines,\nbut we'll just look at probably just one front-end\nmachine that is",
    "start": "3270992",
    "end": "3277340"
  },
  {
    "text": "going to be running OKWS\nhere and then another machine behind the scenes\nthat's going to be",
    "start": "3277340",
    "end": "3283180"
  },
  {
    "text": "storing the database somewhere. And I sort of imagine they're\nprobably also using MySQL,",
    "start": "3283180",
    "end": "3288410"
  },
  {
    "text": "because it's a nice piece\nof software in many ways. They don't want to re-implement\nthis functionality,",
    "start": "3288410",
    "end": "3294210"
  },
  {
    "text": "but they want to really\nprotect this data, so that it's really hard\nto get to the raw disk or the raw database.",
    "start": "3294210",
    "end": "3301174"
  },
  {
    "text": "So how does a\nrequest work, or how does a request get\nhandled by OKWS? Well, the request\nfirst comes in and gets",
    "start": "3301174",
    "end": "3307960"
  },
  {
    "text": "handled by this\nprocess they call okd for the OKWS dispatcher.",
    "start": "3307960",
    "end": "3314870"
  },
  {
    "text": "So those guys look at what\nthe request is asking for and then actually\ndoes a couple things.",
    "start": "3314870",
    "end": "3321690"
  },
  {
    "text": "So first it might need\nto log the request, so it forwards it to this\ncomponent called oklogd,",
    "start": "3321690",
    "end": "3330680"
  },
  {
    "text": "then it might need to\ngenerate some templates, maybe before the\nrequest came in even.",
    "start": "3330680",
    "end": "3337020"
  },
  {
    "text": "And this is handled by\nanother component called pubd.",
    "start": "3337020",
    "end": "3342670"
  },
  {
    "text": "And finally, there's\na particular service that this request\nis being sent to,",
    "start": "3342670",
    "end": "3348579"
  },
  {
    "text": "so okd has a table of a bunch\nof services it supports. This request is presumably\ngoing to one of them,",
    "start": "3348580",
    "end": "3354110"
  },
  {
    "text": "and, as a result, okd\nwill forward this request to a particular service process.",
    "start": "3354110",
    "end": "3361890"
  },
  {
    "text": "And the job of the service\nis to actually do something with this request,\nlike subscribe the guy to a newsletter\nor to match him",
    "start": "3361890",
    "end": "3368910"
  },
  {
    "text": "to whoever else is using\nOkCupid, using the database.",
    "start": "3368910",
    "end": "3374430"
  },
  {
    "text": "And in order to do this,\nthe service presumably might need to log some\ninformation about the request",
    "start": "3374430",
    "end": "3381120"
  },
  {
    "text": "as well by talking to\nthis oklogd component. And at the end of the day it's\ngot to talk to this database.",
    "start": "3381120",
    "end": "3388282"
  },
  {
    "text": "So the way these\nthis guys actually implement talking\nto the database is that, unlike that Apache\npicture where you just",
    "start": "3388282",
    "end": "3394850"
  },
  {
    "text": "talk to the database and\nissue arbitrary SQL queries, these guys come up with this\nnotion of a database proxy that",
    "start": "3394850",
    "end": "3405480"
  },
  {
    "text": "sits in front of\nthe MySQL database and accepts requests from the\nservice to do some queries,",
    "start": "3405480",
    "end": "3414220"
  },
  {
    "text": "and I think that's most\nof the picture for OKWS.",
    "start": "3414220",
    "end": "3420220"
  },
  {
    "text": "There's another component\nin this whole picture that",
    "start": "3420220",
    "end": "3426040"
  },
  {
    "text": "sparks this whole mess, so\nthey have another component called okld, for the\nok launcher demon,",
    "start": "3426040",
    "end": "3433800"
  },
  {
    "text": "and this guy is responsible for\nstarting all these processes on this front end\nweb server machine.",
    "start": "3433800",
    "end": "3441075"
  },
  {
    "text": "Hopefully some of\nthese things actually look familiar, because\nthis is exactly the architecture of [INAUDIBLE]\nfor your lab assignment,",
    "start": "3441075",
    "end": "3447062"
  },
  {
    "text": "so this is basically what\nour design is all based on. It seems like a nice\ndesign, actually.",
    "start": "3447062",
    "end": "3453410"
  },
  {
    "text": "Well, we don't\nhave pubd or logd, but we have these two\nguys and a service.",
    "start": "3453410",
    "end": "3459530"
  },
  {
    "text": "No database proxy either. All right, so any\nquestions about OKWS?",
    "start": "3459530",
    "end": "3465589"
  },
  {
    "text": "Yes.  AUDIENCE: Dbproxy does\nnot accept SQL queries,",
    "start": "3465590",
    "end": "3471095"
  },
  {
    "text": "it accepts some sort  PROFESSOR: Yes. What does this\ninterface look like? They don't really describe\nit in a lot of detail,",
    "start": "3471095",
    "end": "3476450"
  },
  {
    "text": "but one thing I sort of imagine\nyou could do in this database proxy is basically\nhave this supply",
    "start": "3476450",
    "end": "3482650"
  },
  {
    "text": "a bunch of arguments\nfor SQL query templates. So it might be\nthat this dbproxy,",
    "start": "3482650",
    "end": "3488120"
  },
  {
    "text": "this one in particular,\nmaybe is for finding, I don't know, your\nfriends or something,",
    "start": "3488120",
    "end": "3493530"
  },
  {
    "text": "so inside of the\ndbproxy maybe there's a template query like select\nID from friends, where user-- I",
    "start": "3493530",
    "end": "3511634"
  },
  {
    "text": "guess this is like\nthe ID of the friend, and this is the ID of the\nperson who is the friend of. The user equals, I don't\nknow, person D here,",
    "start": "3511634",
    "end": "3519260"
  },
  {
    "text": "or something, or\nperson S here, right? And they sort of\nsanitize this string, and I imagine this RPC\nrequest here sort of looks",
    "start": "3519260",
    "end": "3526850"
  },
  {
    "text": "like do query one, and the\nargument is, I don't know,",
    "start": "3526850",
    "end": "3533970"
  },
  {
    "text": "\"Alice.\" I sort of imagine this\nRPC interface looks like this, where the\napplication knows ahead of time",
    "start": "3533970",
    "end": "3540410"
  },
  {
    "text": "that this database\nproxy is willing to run three kinds of\nqueries on its behalf, and now I want to\nrun query number one",
    "start": "3540410",
    "end": "3547270"
  },
  {
    "text": "and the argument is Alice. And that's sort of\nthe way I get access to any data in the database.",
    "start": "3547270",
    "end": "3553170"
  },
  {
    "text": "Does this make sense? AUDIENCE: Could an external\nuser at the web browser level",
    "start": "3553170",
    "end": "3559661"
  },
  {
    "text": "send the request like\nthat to the database or is that all internal? PROFESSOR: Well, yeah. So, how does this work?",
    "start": "3559661",
    "end": "3565140"
  },
  {
    "text": "It's actually kind\nof weird, that this is a separate machine,\nbecause now it seems like, why don't just connect to\nthe database proxy yourself,",
    "start": "3565140",
    "end": "3571349"
  },
  {
    "text": "or to the MySQL server, right? So what prevents\nthis in their design? AUDIENCE: Fire wall?",
    "start": "3571350",
    "end": "3576830"
  },
  {
    "text": "PROFESSOR: Yeah,\nprobably at some level. They don't really describe\nthis in too much detail, but probably this is some\ninternal network, where there's",
    "start": "3576830",
    "end": "3583460"
  },
  {
    "text": "like a switch here,\nand this machine is connected to the\nswitch, this machine is connected to the\nswitch, but the switch",
    "start": "3583460",
    "end": "3588850"
  },
  {
    "text": "is not reachable from\nthe outside world. It's like there is an\ninternet connection here and those guys are\nsome back-end network.",
    "start": "3588850",
    "end": "3594319"
  },
  {
    "text": "Or maybe they're actually\non the same network, but there's a firewall here that\nhas rules that say, well, you can only connect to this\nfront-end machine on port 80.",
    "start": "3594319",
    "end": "3601570"
  },
  {
    "text": "You cannot talk to\nthe back-end server. So that's one plan. I guess the other\nplan they have in mind",
    "start": "3601570",
    "end": "3608170"
  },
  {
    "text": "is that actually when you\nconnect to this database proxy, you have to supply this\n20 byte token thing,",
    "start": "3608170",
    "end": "3615580"
  },
  {
    "text": "and unless you supply\nit, the dbproxy will reject your connection. So the rule is you open\nthe TCP connection,",
    "start": "3615580",
    "end": "3622290"
  },
  {
    "text": "you send your 20 bytes. If they're not the\nright 20 bytes, your connection gets\nclosed, and hopefully this",
    "start": "3622290",
    "end": "3627820"
  },
  {
    "text": "is something that's relatively\neasy for the database proxy to implement, so\nthat there's probably",
    "start": "3627820",
    "end": "3634690"
  },
  {
    "text": "low probability of a bug in\nthat token checking logic that's right up front. And unless you\nhave the token, you",
    "start": "3634690",
    "end": "3641900"
  },
  {
    "text": "will not be able to do\nanything else of interest to the database server. That's, I think, their\nsort of design goal here.",
    "start": "3641900",
    "end": "3650300"
  },
  {
    "text": "Make sense? All right. So, let's try to\nfigure out, I guess,",
    "start": "3650300",
    "end": "3655900"
  },
  {
    "text": "how these guys isolate\nthese different processes. So how do they make sure\nthat all these components",
    "start": "3655900",
    "end": "3663850"
  },
  {
    "text": "don't trample on each other? What's the plan?",
    "start": "3663850",
    "end": "3669680"
  },
  {
    "text": " AUDIENCE: Different roots\nand different userids?",
    "start": "3669680",
    "end": "3674859"
  },
  {
    "text": "PROFESSOR: Yeah, so pretty much\nevery one of these components runs as a difference uid, so\nthey have this whole table",
    "start": "3674859",
    "end": "3680410"
  },
  {
    "text": "in the paper that describes,\nfor every component, where is it running\nand what's the uid. So we can write this out,\nso okd has its own uid,",
    "start": "3680410",
    "end": "3689830"
  },
  {
    "text": "pubd has its own uid, the\nlogger has its own uid.",
    "start": "3689830",
    "end": "3694850"
  },
  {
    "text": "okld runs as root, which\nis kind of unfortunate, but may be all right.",
    "start": "3694850",
    "end": "3700380"
  },
  {
    "text": "Then, there's a whole bunch of\ndynamically assigned userids for every service. I sort of imagine\nhe has ID 51001.",
    "start": "3700380",
    "end": "3708880"
  },
  {
    "text": "So this makes sure that\nevery service cannot poke at the processes\nof other services,",
    "start": "3708880",
    "end": "3715980"
  },
  {
    "text": "and they also use chroot\npretty extensively, so every one of these guys is\nchroot-ed into some directory.",
    "start": "3715980",
    "end": "3723560"
  },
  {
    "text": "They sort of initially\nsay, well, you should really chroot everyone\ninto a separate directory. As it turns out,\nin that table, it",
    "start": "3723560",
    "end": "3731730"
  },
  {
    "text": "turns out that okd\nand all the services basically share a\nchroot directory.",
    "start": "3731730",
    "end": "3739060"
  },
  {
    "text": "It's kind of weird. Why do you guys think they\nput okd and the services",
    "start": "3739060",
    "end": "3745370"
  },
  {
    "text": "into a single chroot and not\ngive them their own chroots? Weird.",
    "start": "3745370",
    "end": "3750380"
  },
  {
    "text": "Yeah. AUDIENCE: okd is not root. PROFESSOR: Well, yeah,\nbut like why don't they put pubd and oklogd and\neveryone else in the same",
    "start": "3750380",
    "end": "3757860"
  },
  {
    "text": "chroot as well?  AUDIENCE: Okld [INAUDIBLE]. PROFESSOR: okld is\nactually sitting out here",
    "start": "3757860",
    "end": "3764770"
  },
  {
    "text": "in a separate chroot. This guy, this guy.  Actually okld is not chroot.",
    "start": "3764770",
    "end": "3771000"
  },
  {
    "text": "I'm sorry about that. These guys are chroot. Does it matter? AUDIENCE: I was thinking,\nif the services have",
    "start": "3771000",
    "end": "3777225"
  },
  {
    "text": "to share a lot of data, where's\nthe [INAUDIBLE] isolate them? PROFESSOR: Maybe. Actually, I think\nwhat's going on",
    "start": "3777225",
    "end": "3783190"
  },
  {
    "text": "is they have to share some\ndata, but none of this data actually lives in the file,\nso they pass a lot of data",
    "start": "3783190",
    "end": "3788910"
  },
  {
    "text": "through sockets from\nokd to the services. But in fact, none of these\nguys store anything of interest",
    "start": "3788910",
    "end": "3794650"
  },
  {
    "text": "at all in the file system. So as a result, there's pretty\nmuch nothing interesting",
    "start": "3794650",
    "end": "3801150"
  },
  {
    "text": "in the chroot directory, so\nI imagine the OKWS guys just decided, well, there's\nprobably some overhead",
    "start": "3801150",
    "end": "3807442"
  },
  {
    "text": "to creating a\nchroot, like you have to create a copy\nof the directory, there is maybe some management\noverhead for every chroot.",
    "start": "3807442",
    "end": "3813470"
  },
  {
    "text": "Whereas, for this, there's\nno real files here, so maybe that's all right. I mean, there's not\na clear, sort of,",
    "start": "3813470",
    "end": "3819480"
  },
  {
    "text": "cut trade off here, or\nnot a clear-cut argument which way you should go,\nbut certainly prevents",
    "start": "3819480",
    "end": "3824930"
  },
  {
    "text": "from setuid binaries. The reason that these guys are\nprobably in different chroots is because there is actually\nsome interesting stuff there.",
    "start": "3824930",
    "end": "3830940"
  },
  {
    "text": "There's maybe the\ntemplates here, maybe there's a log\nfile here, so you don't want these guys\naccidentally reading",
    "start": "3830940",
    "end": "3836260"
  },
  {
    "text": "the log file for some\nreason, but there's no real mutable state\ninside of the chroot shared",
    "start": "3836260",
    "end": "3842510"
  },
  {
    "text": "by all okd and the services. AUDIENCE: Don't the services\nhave, like, two files",
    "start": "3842510",
    "end": "3847770"
  },
  {
    "text": "or, I don't know, aspx files. PROFESSOR: Well, at least\nthe way they describe it",
    "start": "3847770",
    "end": "3853170"
  },
  {
    "text": "in the paper, the service is\na single C++ compiled binary,",
    "start": "3853170",
    "end": "3858480"
  },
  {
    "text": "so there's actually no extra\nfiles, and there are templates, but those actually get passed\nin through this weird mechanism,",
    "start": "3858480",
    "end": "3866060"
  },
  {
    "text": "where pubd has the\ntemplates in its directory, it renders them-- or sort\nof pre-computes them--",
    "start": "3866060",
    "end": "3871560"
  },
  {
    "text": "sends them to okd and okd\ngives the templates to all the services through RPC calls. So they sit in memory,\nbut they're actually not",
    "start": "3871560",
    "end": "3878020"
  },
  {
    "text": "directly accessible\nthrough the file system. It's a somewhat\nparanoid design here.",
    "start": "3878020",
    "end": "3883170"
  },
  {
    "text": "Can't even read the templates. ",
    "start": "3883170",
    "end": "3889859"
  },
  {
    "text": "So what's the point of having\nall these components split up? So I guess let's talk\nabout maybe oklogd, so why do you have\na separate oklogd?",
    "start": "3889860",
    "end": "3896530"
  },
  {
    "text": " Yeah. AUDIENCE: Because if\nyou had [INAUDIBLE],",
    "start": "3896530",
    "end": "3902503"
  },
  {
    "text": "you could overwrite\nlogs, or truncate log. PROFESSOR: Yeah,\nso we really want to make sure that if something\ngoes wrong, the log, at least,",
    "start": "3902503",
    "end": "3908025"
  },
  {
    "text": "is intact. So there's a separate\nlog file that is only writable by this\nuid, and all the log messages",
    "start": "3908025",
    "end": "3915569"
  },
  {
    "text": "are sent as RPCs to\nthis log service, and even if everything else\ngets compromised-- well,",
    "start": "3915570",
    "end": "3923360"
  },
  {
    "text": "except for okld-- then\nthe log is still intact, because they talk about the\nprocess of appending noise",
    "start": "3923360",
    "end": "3930140"
  },
  {
    "text": "to this log. So what is this about? Does this matter? Should we worry\nabout this noise? Yeah.",
    "start": "3930140",
    "end": "3936384"
  },
  {
    "text": "AUDIENCE: If somehow\nyou accidentally find a way to read the log\nand you can't see what everyone else has been doing?",
    "start": "3936384",
    "end": "3942866"
  },
  {
    "text": "PROFESSOR: No, I think this\nnoise thing they are actually worried about is that,\nsuppose you compromise",
    "start": "3942866",
    "end": "3948970"
  },
  {
    "text": "a service or you compromise\npubd or something, you all of a sudden might\nbe able to write log",
    "start": "3948970",
    "end": "3954310"
  },
  {
    "text": "messages to the log,\nand you can actually write whatever you want\nto the log at that point. So the only guarantee they claim\nto provide is that, I guess,",
    "start": "3954310",
    "end": "3962049"
  },
  {
    "text": "before the point of the\ncompromise, all the log entries are intact, and afterwards\nthere is sort of legitimate log",
    "start": "3962049",
    "end": "3967370"
  },
  {
    "text": "entries interspersed\nwith whatever else the attacker wants to log.",
    "start": "3967370",
    "end": "3972400"
  },
  {
    "text": "One actually cool thing about\nhaving oklogd be a separate process instead of it just\nbeing an append-only file,",
    "start": "3972400",
    "end": "3979220"
  },
  {
    "text": "is that oklogd cannot add some\nextra information to each log entry, because you could imagine\nmaybe the operating system",
    "start": "3979220",
    "end": "3986080"
  },
  {
    "text": "supports an append-only file,\nbut then you don't actually know who wrote anything\nto a file, when that was,",
    "start": "3986080",
    "end": "3993220"
  },
  {
    "text": "whereas oklogd,\nfor every message, it can actually maybe time\nstamp it and say, actually, I know this came from this\nservice, or this came from okd,",
    "start": "3993220",
    "end": "4000250"
  },
  {
    "text": "so you actually get extra\ninformation in that log file because it's a\nseparate service here.",
    "start": "4000250",
    "end": "4006270"
  },
  {
    "text": "Make sense? So what's the point\nof this okld guy?",
    "start": "4006270",
    "end": "4012420"
  },
  {
    "text": "Why do we need this guy\nto be running as root? I guess a couple reasons.",
    "start": "4012420",
    "end": "4018540"
  },
  {
    "text": "AUDIENCE: If you want no\none else to run as root, then you need okld to\ndelegate who it is.",
    "start": "4018540",
    "end": "4024099"
  },
  {
    "text": "PROFESSOR: Yes. So someone needs to set up\nthis whole uid chroot thing, and you need root for this\nin Unix, so okld is it.",
    "start": "4024100",
    "end": "4031110"
  },
  {
    "text": "That's one reason. Anything else? AUDIENCE: To define 80? PROFESSOR: Oh, yeah, yeah. This like whole listening\non a port business,",
    "start": "4031110",
    "end": "4037079"
  },
  {
    "text": "you have to bind on port 80, so\nokld does that as well for us.",
    "start": "4037080",
    "end": "4043400"
  },
  {
    "text": "Anything else? AUDIENCE: Complete to\nopen the log file oklogd.",
    "start": "4043400",
    "end": "4048860"
  },
  {
    "text": "You don't want to open oklogd\nto have access to open the file. You want to open\nit for [INAUDIBLE].",
    "start": "4048860",
    "end": "4054961"
  },
  {
    "text": "PROFESSOR: Maybe. Actually, yeah. I don't know. I forget this from\nthe source code",
    "start": "4054961",
    "end": "4060610"
  },
  {
    "text": "whether they actually\ndo this or not. You could imagine absolutley-- AUDIENCE: I think they write\nit in the paper as well. PROFESSOR: I see.",
    "start": "4060610",
    "end": "4065748"
  },
  {
    "text": "So okld opens the log\nfile and passes it in? Could be. AUDIENCE: Because\notherwise an attacker that compromised oklogd would\nbe able to erase the entire log.",
    "start": "4065748",
    "end": "4073099"
  },
  {
    "text": "PROFESSOR: That's right, yeah. So maybe you want to\nopen in append-only mode and then pass it\nto oklogd and then",
    "start": "4073100",
    "end": "4079616"
  },
  {
    "text": "you have more security\nguarantees for the log. Yeah, that's\nactually pretty cool. I missed that on the paper,\nbut makes a lot of sense, yeah.",
    "start": "4079616",
    "end": "4089650"
  },
  {
    "text": "Any other things\nokld is doing for us?  I think that's basically it.",
    "start": "4089650",
    "end": "4095340"
  },
  {
    "text": "These are the main\nthings that you can't do unless\nyou're root, and okld is sort of the component\nthat ends up having",
    "start": "4095340",
    "end": "4101890"
  },
  {
    "text": "to do all these operations. So I guess we had\nthis homework question",
    "start": "4101890",
    "end": "4109439"
  },
  {
    "text": "about what happens\nif you leak this 20 byte database token thing. So what do you guys think?",
    "start": "4109439",
    "end": "4114719"
  },
  {
    "text": "What's the damage? Should we leak these guys? Should we worry about it? ",
    "start": "4114720",
    "end": "4122061"
  },
  {
    "text": "Anything else?  AUDIENCE: The\nattacker can pretend",
    "start": "4122061",
    "end": "4127729"
  },
  {
    "text": "to be that specific\nservice [INAUDIBLE]. PROFESSOR: That's right, yeah. So, you might be able to\nnow connect and issue,",
    "start": "4127729",
    "end": "4132790"
  },
  {
    "text": "of course, all these\ntemplate queries. That actually seems fairly\nstraightforward, I guess, from this picture. You probably need to compromise\none of these components",
    "start": "4132790",
    "end": "4139600"
  },
  {
    "text": "to be able to connect\nto the database server in the first place. So I guess if you\nhave this token",
    "start": "4139600",
    "end": "4144679"
  },
  {
    "text": "and you manage to compromise one\nof these pieces in the picture, then you could run all\nthese queries as well.",
    "start": "4144680",
    "end": "4151631"
  },
  {
    "text": "Make sense? Fairly straightforward stuff.",
    "start": "4151632",
    "end": "4156845"
  },
  {
    "text": "OK, I guess let's look\nat, could you do better? Could you do better\nthan this OKWS design?",
    "start": "4156845",
    "end": "4164310"
  },
  {
    "text": "Except for make this\nwhole argument about, well, we might be able to do\neven better, like allocating",
    "start": "4164310",
    "end": "4170318"
  },
  {
    "text": "a separate unit uid\nper user in this design instead of per service.",
    "start": "4170319",
    "end": "4176339"
  },
  {
    "text": "But here, every service, like\nnewsletters or friend matching or account sign up\nis a separate userid,",
    "start": "4176340",
    "end": "4183239"
  },
  {
    "text": "but every OKWS user isn't really\nrepresented by a Unix uid.",
    "start": "4183240",
    "end": "4189979"
  },
  {
    "text": "There's not really userids,\nthey're service IDs. So, would it make sense to have\ndifferent uids for every OKWS",
    "start": "4189979",
    "end": "4200040"
  },
  {
    "text": "customer? Is there a reason for that? Yeah. AUDIENCE: So at the moment,\nif one user compromises",
    "start": "4200040",
    "end": "4206260"
  },
  {
    "text": "the service, then they can get\naccess to all the other user's data for that same server. PROFESSOR: That's right, yeah.",
    "start": "4206260",
    "end": "4212340"
  },
  {
    "text": "AUDIENCE: Whereas, if you\nhad a separate-- essentially a separate service\nand a separate dbproxy for every user,\nthere's no way you",
    "start": "4212340",
    "end": "4218996"
  },
  {
    "text": "could access anyone\nelse's data either. PROFESSOR: Right, but could it\nbe actually a stronger model? So especially\nfor-- well, I guess",
    "start": "4218996",
    "end": "4226000"
  },
  {
    "text": "there's really two reasons why\nI think the OKWS guys don't go to that extreme model.",
    "start": "4226000",
    "end": "4231542"
  },
  {
    "text": "One of them is-- they make\na big deal in this paper-- is performance, right? So if you have, I\ndon't know, a couple",
    "start": "4231542",
    "end": "4237150"
  },
  {
    "text": "million users on OkCupid,\nthen all of a sudden you have a couple of million\nprocesses running here,",
    "start": "4237150",
    "end": "4242790"
  },
  {
    "text": "or maybe a couple\nmillion dbproxies, or maybe you can optimize\nsomething on the dbproxy side, but here, yeah, you have\na couple million userids",
    "start": "4242790",
    "end": "4250660"
  },
  {
    "text": "and either you have a lot of\nprocesses running all the time or you're starting these\nprocesses on demand.",
    "start": "4250660",
    "end": "4256889"
  },
  {
    "text": "And starting a process\ninvolves some nontrivial amount of overhead, so you\nprobably wouldn't",
    "start": "4256890",
    "end": "4262440"
  },
  {
    "text": "be able to get as good\nof performance numbers as these guys are able\nto show with OKWS. There's a performance argument.",
    "start": "4262440",
    "end": "4268610"
  },
  {
    "text": "Question. AUDIENCE: Yeah, I\nwas just reading in the paper that said the\nperformance of the system was better than others? PROFESSOR: Yeah.",
    "start": "4268610",
    "end": "4274076"
  },
  {
    "text": "AUDIENCE: How come? PROFESSOR: Well, I think it's\npartly because they fine tuned",
    "start": "4274076",
    "end": "4279580"
  },
  {
    "text": "their design to their particular\nworkload and it's also they write their whole thing in C++.",
    "start": "4279580",
    "end": "4285050"
  },
  {
    "text": "The alternative is you're\nwriting some stuff in PHP, then you're probably going\nto win on that front.",
    "start": "4285050",
    "end": "4290320"
  },
  {
    "text": "It's also the case\nthat they don't have nearly as many features\nas, let's say, Apache has.",
    "start": "4290320",
    "end": "4296900"
  },
  {
    "text": "Apache has a very\ngeneral purpose design, so it has lots of\nprocesses running,",
    "start": "4296900",
    "end": "4302780"
  },
  {
    "text": "it restarts them\nevery once in awhile. It actually has\nevery ttp connection tying up a process for the\nduration of that connection.",
    "start": "4302780",
    "end": "4309640"
  },
  {
    "text": "They do keep-alives. That also increases the\nnumber of processes you have to run for their design.",
    "start": "4309640",
    "end": "4315100"
  },
  {
    "text": "So all those things\njust add up in terms of overhead for\nApache, because it wants to handle\nanything possibly you could do with a web server.",
    "start": "4315100",
    "end": "4321206"
  },
  {
    "text": "Whereas these guys, I\nthink, are very specific. We're just going to run these\nservices, very quick requests, and no even static file\nserving, if they can help it.",
    "start": "4321206",
    "end": "4330077"
  },
  {
    "text": "But I think there's actually\nother web servers out there these days that probably can\nmatch the performance of OKWS if you really wanted to.",
    "start": "4330077",
    "end": "4335979"
  },
  {
    "text": "So, for example, Nginx is\na very optimized web server you can run these days. If you want fast application\nperformance on the server side,",
    "start": "4335979",
    "end": "4342590"
  },
  {
    "text": "you probably want to keep a\nlong running process very much like the OKWS service\nthing, and the fast cgi",
    "start": "4342590",
    "end": "4348680"
  },
  {
    "text": "is a common mechanism,\nor sort of protocol, that you could use\non the server side to implement this even in\nApache or Nginx as well.",
    "start": "4348680",
    "end": "4356460"
  },
  {
    "text": "So I think many of\nthese performance ideas aren't exclusive to OKWS. You couldn't perform the\nsame performance tricks",
    "start": "4356460",
    "end": "4363250"
  },
  {
    "text": "in other services as well. They just show that\nbetter security doesn't preclude these tricks.",
    "start": "4363250",
    "end": "4369660"
  },
  {
    "text": "You could still get\nthe performance. I guess for them, they were\njust initially starting out with an Apache-like\ndesign, where",
    "start": "4369660",
    "end": "4377400"
  },
  {
    "text": "they were willing to pay the\nprice if it was easy to program and secure, but it just\nwasn't secure, so they said, OK, well we'll do\nthis, and I don't",
    "start": "4377400",
    "end": "4383600"
  },
  {
    "text": "think the performance\nwas as necessarily a big of a goal for them. I guess they wanted to--\nwell, at the time they",
    "start": "4383600",
    "end": "4390239"
  },
  {
    "text": "had some problems in terms\nof performance as well, so I think they really\nwanted good performance. ",
    "start": "4390240",
    "end": "4397464"
  },
  {
    "text": "Any other questions\nabout this stuff? OK. So I guess it was\nsaying, one reason",
    "start": "4397464",
    "end": "4405620"
  },
  {
    "text": "why these guys don't want to\nrun a separate service per user is the fact that there's\nperformance overheads",
    "start": "4405620",
    "end": "4411710"
  },
  {
    "text": "in doing that. The other reason is that\ntheir full application model sort of hinges around a\nservice having to get access",
    "start": "4411710",
    "end": "4419170"
  },
  {
    "text": "to every user's data, like\nfinding your friends on OkCupid or someone to go\nout on a date with.",
    "start": "4419170",
    "end": "4425460"
  },
  {
    "text": "And as a result, this\nper user isolation model might not make a lot of sense,\nbecause ultimately there",
    "start": "4425460",
    "end": "4431950"
  },
  {
    "text": "has to be a service that you're\ngoing to send a request to, and it's going to look\nat everyone else's data",
    "start": "4431950",
    "end": "4437900"
  },
  {
    "text": "to find your match. So that's probably, as a result,\nnot really amenable, like,",
    "start": "4437900",
    "end": "4444600"
  },
  {
    "text": "even if you had user IDs or\nsome sort of per user isolation mechanism, you would\nhave to give that service",
    "start": "4444600",
    "end": "4449920"
  },
  {
    "text": "access to every userid anyway. So for other services like\nmaybe Gmail or Dropbox,",
    "start": "4449920",
    "end": "4455700"
  },
  {
    "text": "where it's much\nmore user focused and no sharing, then\na per user isolation might make more sense\nin terms of the benefits",
    "start": "4455700",
    "end": "4462610"
  },
  {
    "text": "you could get out of\nit, because if there's a userid on the Dropbox server\nfor every Dropbox customer,",
    "start": "4462610",
    "end": "4469790"
  },
  {
    "text": "then, well, there's a\nprocess running for you and there's a process\nrunning for someone else, and if you exploit\na bug, then you",
    "start": "4469790",
    "end": "4476310"
  },
  {
    "text": "can't touch other people's data. But could be cool, I don't know. Dropbox probably doesn't do\nthis for performance reasons,",
    "start": "4476310",
    "end": "4482050"
  },
  {
    "text": "but you could get\nsome security benefit. Whereas, for OKWS guys, and\neven functionality-wise, they wouldn't be able\nto take advantage",
    "start": "4482050",
    "end": "4488800"
  },
  {
    "text": "as much of this model. So maybe for your\nprofile editing service, maybe that could\nbe run per user,",
    "start": "4488800",
    "end": "4494730"
  },
  {
    "text": "but the matching thing\nwould still be shared. Make sense?",
    "start": "4494730",
    "end": "4499760"
  },
  {
    "text": "All right. So let's look at whether\nOKWS actually manages to improve security here.",
    "start": "4499760",
    "end": "4505190"
  },
  {
    "text": "So when we do think of whether\na system is secure or not is to look at all the components\nand see, well, first of all,",
    "start": "4505190",
    "end": "4510810"
  },
  {
    "text": "what's the attack surface? Meaning, how would\nyou try to compromise that component,\nor how hard is it, and second what's the damage?",
    "start": "4510810",
    "end": "4517330"
  },
  {
    "text": "So let's go through this list. Let's start with okd, so\nwhat's the attack surface?",
    "start": "4517330",
    "end": "4523770"
  },
  {
    "text": "What kinds of things could\nyou use to attack it?",
    "start": "4523770",
    "end": "4530020"
  },
  {
    "text": "[INAUDIBLE], like\nall these requests coming from the browser. That seems pretty good. You can control it\nprobably in lots of ways,",
    "start": "4530020",
    "end": "4535510"
  },
  {
    "text": "you can send lots\nof strange input. AUDIENCE: [INAUDIBLE]. PROFESSOR: Yeah,\nso maybe there is-- this thing is written in C++,\nso probably these guys were",
    "start": "4535510",
    "end": "4542210"
  },
  {
    "text": "sloppy. I think this guy's\na good programmer, but if he was not very\ncareful somewhere,",
    "start": "4542210",
    "end": "4547440"
  },
  {
    "text": "could be easily exploitable. So what's the damage? Suppose you find a buffer\noverflow or some other bug in okd?",
    "start": "4547440",
    "end": "4553070"
  },
  {
    "text": "How bad is this? ",
    "start": "4553070",
    "end": "4563139"
  },
  {
    "text": "Yeah. AUDIENCE: You can call basically\nany service on that machine? PROFESSOR: Yeah, OK, so\nyou could call any service.",
    "start": "4563139",
    "end": "4569010"
  },
  {
    "text": "Is that bad? How should we think of this? AUDIENCE: You can call it\nwhatever input you want.",
    "start": "4569010",
    "end": "4574242"
  },
  {
    "text": "PROFESSOR: That's true, yeah. But you could probably have done\nthat even without compromising, because you can send any\nhttp request you want,",
    "start": "4574242",
    "end": "4580700"
  },
  {
    "text": "which is basically what these\nservice requests end up being. Maybe that's\nactually not so bad. Yeah.",
    "start": "4580700",
    "end": "4586178"
  },
  {
    "text": "AUDIENCE: Could it route all the\ntraffic for maybe OK website? PROFESSOR: Yes.",
    "start": "4586178",
    "end": "4591230"
  },
  {
    "text": "That actually seems a\nlittle more damaging, right? You can all of a sudden\ntake over the whole website and serve your pages\ninstead of sending",
    "start": "4591230",
    "end": "4596957"
  },
  {
    "text": "a request to the services. You could redirect all\nthe people to match.com or whoever else you\nwant to, I don't know.",
    "start": "4596957",
    "end": "4602250"
  },
  {
    "text": "I guess now they bought out\nOkCupid but, before, who knows.",
    "start": "4602250",
    "end": "4607430"
  },
  {
    "text": "OK, anything else? Could you leak data in any way? Yeah.",
    "start": "4607430",
    "end": "4612690"
  },
  {
    "text": "AUDIENCE: Well, it\ndepends on, like if you use any authentication in okd. Instead of any SVC,\nyou could potentially",
    "start": "4612690",
    "end": "4619815"
  },
  {
    "text": "just do unauthorized requests,\nlike in the database? PROFESSOR: Right. In their case, this guy just\nparses and forwards the request on.",
    "start": "4619815",
    "end": "4625402"
  },
  {
    "text": "AUDIENCE: Could it [INAUDIBLE]? PROFESSOR: Yeah. Not only can you\nredirect it first, you could actually look for all\nthe subsequent requests, which",
    "start": "4625402",
    "end": "4632433"
  },
  {
    "text": "probably includes passwords\nof other users connecting to the site, and you\ncould save their passwords",
    "start": "4632433",
    "end": "4638869"
  },
  {
    "text": "or modify their requests\nor see what they're doing or fetch things on their behalf. That seems damaging potentially.",
    "start": "4638870",
    "end": "4644340"
  },
  {
    "text": "That's probably\nthe biggest leak. If you compromise okd, you can\nprobably watch other requests and steal people's credential\npasswords, steal their data",
    "start": "4644340",
    "end": "4651820"
  },
  {
    "text": "as it flows by. Make sense? AUDIENCE: Could you do some sort\nof denial of service with just",
    "start": "4651820",
    "end": "4657760"
  },
  {
    "text": "with sending a whole--  PROFESSOR: Yeah, so you could\nprobably chew up the CPU or send lots of requests\nto this, fill up database",
    "start": "4657760",
    "end": "4663634"
  },
  {
    "text": "with lots of data, but\nthat you could probably do even by just sending lots\nof requests in the first place. So now [INAUDIBLE] are somewhat\ncomplicated-- well, different.",
    "start": "4663634",
    "end": "4671820"
  },
  {
    "text": "Yeah. AUDIENCE: So, the goal\nhere is not to leak data-- PROFESSOR: Yeah. AUDIENCE: --from\ndifferent services. If you have access to\nokd, presumably you",
    "start": "4671820",
    "end": "4678519"
  },
  {
    "text": "could read the responses\nthat are being sent--  PROFESSOR: Yeah, exactly. So in fact, okd is has\nto be pretty trustworthy,",
    "start": "4678519",
    "end": "4685270"
  },
  {
    "text": "because the responses don't\ngo directly back through okd in the normal operation, because\nyou just pass off the fd,",
    "start": "4685270",
    "end": "4693240"
  },
  {
    "text": "and the service directly\nwrites to the fd. But you could totally fake it\nand create your own fd here. So if you compromise\nthis, you could basically",
    "start": "4693240",
    "end": "4699466"
  },
  {
    "text": "watch all the traffic and\nsteal people's passwords there. AUDIENCE: But, the other way--",
    "start": "4699466",
    "end": "4704710"
  },
  {
    "text": "PROFESSOR: And the response is--  AUDIENCE: --to the output, which\nmeans that essentially you get access--  PROFESSOR: That's right. Yeah, so you could--\nIf okd was compromised",
    "start": "4704710",
    "end": "4711239"
  },
  {
    "text": "and I happened to\nlog into that site, you could probably\nlook at my responses and you could probably\neven take my password",
    "start": "4711240",
    "end": "4717150"
  },
  {
    "text": "and send other requests\nwith my credentials and get data from there as well. Yeah. AUDIENCE:And then essentially\nreconstruct the entire",
    "start": "4717150",
    "end": "4722409"
  },
  {
    "text": "database. PROFESSOR: Exactly. Yeah, or at least\nfor users who were logged in at the time and\nthings you could reconstruct. This is pretty damaging, right?",
    "start": "4722410",
    "end": "4728409"
  },
  {
    "text": "So this component is actually\na bit troublesome here. What happens if we\ncompromise, let's say, oklogd?",
    "start": "4728410",
    "end": "4734906"
  },
  {
    "text": "How bad is that?  Yeah.",
    "start": "4734906",
    "end": "4740725"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]\npretty bad. PROFESSOR: Yeah, so there's\nlike all this confidential data",
    "start": "4740725",
    "end": "4745760"
  },
  {
    "text": "in the log entries, then\nthat's probably not good, but otherwise you can't probably\naccess the database directly,",
    "start": "4745760",
    "end": "4751559"
  },
  {
    "text": "right? Pubd, I guess you might\ncorrupt templates, or something like this, send out different\nrequests and responses, I mean.",
    "start": "4751560",
    "end": "4758510"
  },
  {
    "text": "Yeah. AUDIENCE: So this\nis about the logd. Presumably okdlogd doesn't\nhave access to read the log.",
    "start": "4758510",
    "end": "4763836"
  },
  {
    "text": "It just needs--  PROFESSOR: Ah, yeah, yeah. Good point. Well, it depends on\nhow they do it, right? If they really have\nthis append-only file,",
    "start": "4763836",
    "end": "4769090"
  },
  {
    "text": "then it might be that you\ncan't even read the log, so-- AUDIENCE: All you could\ndo is append garbage. PROFESSOR:That's right, yeah. So you could write\na lot of garbage,",
    "start": "4769090",
    "end": "4775780"
  },
  {
    "text": "but if they were using the OS\nto enforce the append-only log, and no reading, then\nyou might be actually in good shape for\nthe log contents.",
    "start": "4775780",
    "end": "4782065"
  },
  {
    "text": "Yeah. AUDIENCE: Well, I guess\nalso, you can not append. So when a valid log comes in--  PROFESSOR: Right, so you could\nprobably block real entries,",
    "start": "4782065",
    "end": "4788910"
  },
  {
    "text": "fill it up with garbage. You could also watch new entries\nand at least compromise them. AUDIENCE: Or if you're\nrelying on a rate",
    "start": "4788910",
    "end": "4794796"
  },
  {
    "text": "limit for number of logins.  PROFESSOR: That's right, yeah. You could probably do that. OK. So what about the services?",
    "start": "4794796",
    "end": "4801560"
  },
  {
    "text": "That's, I think, their\nmain attack factor, because-- actually, in most\nof these systems, what you're really worried about is\nthe one-off components,",
    "start": "4801560",
    "end": "4809120"
  },
  {
    "text": "because even in Apache,\nthe Apache code is probably pretty good. Like millions people\nare running it,",
    "start": "4809120",
    "end": "4815980"
  },
  {
    "text": "everyone's looking\nfor bugs in it. Probably [INAUDIBLE] not that\nmany bugs in Apache itself",
    "start": "4815980",
    "end": "4821390"
  },
  {
    "text": "or, well, even in SSL, for all\nthe hoopla we've heard recently about [INAUDIBLE] and still\nbugs probably not as bad",
    "start": "4821390",
    "end": "4829370"
  },
  {
    "text": "as the application code that\nyou write for a particular site, because no one else\nhas reviewed that code.",
    "start": "4829370",
    "end": "4834569"
  },
  {
    "text": "You just wrote it,\nyou haven't really tested it very thoroughly. That's probably where most of\nthe bugs in a complex system",
    "start": "4834569",
    "end": "4840369"
  },
  {
    "text": "actually lie. So the service code is probably\nthe equivalent for OKWS. These components are\nwritten by Max Krohn.",
    "start": "4840370",
    "end": "4846820"
  },
  {
    "text": "He was careful to make sure\nthere's no buffer overflows. This component is written\nby some web developer who",
    "start": "4846820",
    "end": "4852160"
  },
  {
    "text": "wants to deploy the next\nfeature as fast as possible, so this is the part\nwhere I think they really worry about bugs being sort\nof exploitable and potentially",
    "start": "4852160",
    "end": "4860710"
  },
  {
    "text": "damaging. But hopefully the damage here\nis not too big, in the sense that you can only issue\nwhatever queries you are allowed",
    "start": "4860710",
    "end": "4868960"
  },
  {
    "text": "to do by the database proxy. Make sense? So what about okld?",
    "start": "4868960",
    "end": "4874690"
  },
  {
    "text": "This is a bit of\na sore thumb here. It's, like, running as root. How much should\nwe worry about it?",
    "start": "4874690",
    "end": "4880220"
  },
  {
    "text": "Of course, the damage is\npretty big if we compromise it. You get access to everything\non the machine and all the database proxy tokens.",
    "start": "4880220",
    "end": "4886640"
  },
  {
    "text": "How hard is it to\ncompromise okld? What signals-- what\ncould you poke it with?",
    "start": "4886640",
    "end": "4892350"
  },
  {
    "text": " Does it take input?",
    "start": "4892350",
    "end": "4900375"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] in\na very specific pattern. PROFESSOR: Yeah, so pretty\nmuch the only input it takes",
    "start": "4900375",
    "end": "4907800"
  },
  {
    "text": "is when a child exits and\nit gets a notification that a child process\nexited and then maybe it responds it, or not,\nif it is rate limited.",
    "start": "4907800",
    "end": "4915650"
  },
  {
    "text": "So if there's some\nsort of erase condition or a bug with handling\nexactly-- it's interesting-- lots of\nexits at the same time,",
    "start": "4915650",
    "end": "4921329"
  },
  {
    "text": "then maybe you could\ntrigger something bad, but even then it\nseems hard to imagine injecting some sort of shell\ncode through the exit pattern.",
    "start": "4921329",
    "end": "4929505"
  },
  {
    "text": "So it's probably a reasonable\nthing to have to run as root, because it doesn't take\na whole lot of input.",
    "start": "4929505",
    "end": "4937520"
  },
  {
    "text": "Make sense? Other questions? AUDIENCE: So presumably\na big concern would be if you managed to\nsomehow exploit the dbproxy.",
    "start": "4937520",
    "end": "4944496"
  },
  {
    "text": "PROFESSOR: Uh-huh. AUDIENCE: If it turns out\nthat it doesn't, like, it provides an RPC\nthat's limited in scope,",
    "start": "4944496",
    "end": "4950950"
  },
  {
    "text": "but if there is some input you\ncan give that, that turns out to run in different\nquery than it was expecting to run,\npresumably that could",
    "start": "4950950",
    "end": "4957635"
  },
  {
    "text": "be a big [INAUDIBLE]. PROFESSOR: That could\nbe a bit of a problem. So what's the attack vector\nthough on this database proxy?",
    "start": "4957635",
    "end": "4962860"
  },
  {
    "text": "I think you have to\nhave access to one of these other components\nin the first place. So at least you have to\nnow compromise both--",
    "start": "4962860",
    "end": "4969320"
  },
  {
    "text": "you have to find a bug both in\nthe dbproxy and somewhere else, so-- AUDIENCE: So not necessarily,\nbecause the SVC is already",
    "start": "4969320",
    "end": "4975730"
  },
  {
    "text": "forwarding-- PROFESSOR: Right. So as the SVC passes\nthrough great query is largely unchecked-- AUDIENCE: Well, so,\nI mean, let's say",
    "start": "4975730",
    "end": "4981842"
  },
  {
    "text": "you're trying to log in, right? It will pass. PROFESSOR: Yeah, like your\nAlice name goes in the template, and yeah. ",
    "start": "4981842",
    "end": "4986860"
  },
  {
    "text": "AUDIENCE: Alice is straight\nto the dbproxy, in theory. PROFESSOR: Absolutely. So, there might be\nsome dbproxy bugs here",
    "start": "4986860",
    "end": "4992670"
  },
  {
    "text": "that are also exploitable. Anyway, this hopefully\ngives you guys some sense of how do you\nthink of privileged separating",
    "start": "4992670",
    "end": "4998651"
  },
  {
    "text": "application. And as we see, it's not perfect. There are still many\nthings that could go wrong. But it seems much better than\nthe nonprivileged separated",
    "start": "4998651",
    "end": "5006290"
  },
  {
    "text": "design that we started out with.",
    "start": "5006290",
    "end": "5009340"
  }
]