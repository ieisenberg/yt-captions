[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6050"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or to\nview additional materials",
    "start": "6050",
    "end": "12690"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "12690",
    "end": "21168"
  },
  {
    "text": "JEREMY KEPNER: All right. I want to thank\nyou all for coming to the third lecture of\nthe Signal Processing",
    "start": "21169",
    "end": "28710"
  },
  {
    "text": "on Databases class. So we will go-- just\nto remind folks, all the material is\navailable in the distribution",
    "start": "28710",
    "end": "36200"
  },
  {
    "text": "of the software,\nwhich you all have in your [INAUDIBLE] accounts.",
    "start": "36200",
    "end": "41470"
  },
  {
    "text": "Here, we're going to\ngo to lecture two. ",
    "start": "41470",
    "end": "49310"
  },
  {
    "text": "Courses. Course, which\nbrings it together. Signal processing,\nwhich is based",
    "start": "49310",
    "end": "54530"
  },
  {
    "text": "on detection theory, which\nis based on linear algebra with databases, which are\nbased on strings and searching",
    "start": "54530",
    "end": "62320"
  },
  {
    "text": "and really bringing those\ntwo concepts together in the course.",
    "start": "62320",
    "end": "67410"
  },
  {
    "text": "So that we can use\nthe mathematics we know from detection theory\nand apply it into new domains.",
    "start": "67410",
    "end": "76930"
  },
  {
    "text": "And I'm glad to see we\nhave a full house again.",
    "start": "76930",
    "end": "82070"
  },
  {
    "text": "So far, I've failed\nin scaring off people. So we'll see if we\ncan do a better job.",
    "start": "82070",
    "end": "88290"
  },
  {
    "text": "I think this particular\nlecture should do a very good job of that. ",
    "start": "88290",
    "end": "95780"
  },
  {
    "text": "We're going to be\ngetting into a little bit some more of the\nmathematics that",
    "start": "95780",
    "end": "100810"
  },
  {
    "text": "underpins the associative array\nconstruct that is in the D4M",
    "start": "100810",
    "end": "105939"
  },
  {
    "text": "technology that we're\nusing in the class and gets into some group\ntheory concepts that might be",
    "start": "105940",
    "end": "117130"
  },
  {
    "text": "a long time since any of\nyou had any of that or even recall what that is. It's actually not\nthat complicated.",
    "start": "117130",
    "end": "125299"
  },
  {
    "text": "Personally, this is\nmy favorite lecture in terms of it really gets into\nthe deeper underlying elements.",
    "start": "125300",
    "end": "131560"
  },
  {
    "text": " I would fully expect it to make\nyour head hurt a little bit.",
    "start": "131560",
    "end": "138180"
  },
  {
    "text": "We're going to do sort\nof a fairly rapid blast through the mathematics here.",
    "start": "138180",
    "end": "146610"
  },
  {
    "text": "And you won't really\nhave to know this really to effectively use it.",
    "start": "146610",
    "end": "151620"
  },
  {
    "text": "Although, it's good\nto know that it exists and that there might\nbe pieces of it",
    "start": "151620",
    "end": "158000"
  },
  {
    "text": "that you'll want to\ndrive into deeper. And so really, the\ntitle of this talk",
    "start": "158000",
    "end": "165739"
  },
  {
    "text": "is called Spreadsheets,\nBig Tables, and the Algebra Associative Arrays. We've lectured on that\ntopic in the past.",
    "start": "165740",
    "end": "172110"
  },
  {
    "text": "So with that, we will\nget right into it. So here's the outline\nfor the lecture.",
    "start": "172110",
    "end": "177959"
  },
  {
    "text": "And I should say,\nyou know, there's a balance between\nthe lecture, and then we'll have some examples.",
    "start": "177960",
    "end": "183120"
  },
  {
    "text": "This particular lecture will\nbe a little bit more heavy on the lecture side.",
    "start": "183120",
    "end": "188209"
  },
  {
    "text": "And the example piece\nis a little bit shorter. And so a little bit more lecture\nand a little less example",
    "start": "188210",
    "end": "195280"
  },
  {
    "text": "on this particular class. So we're going to talk about\nkind of a mathematical concept",
    "start": "195280",
    "end": "200720"
  },
  {
    "text": "for what are spreadsheets. And in the\nintroduction here, talk about what our\ntheoretical goals are,",
    "start": "200720",
    "end": "206069"
  },
  {
    "text": "really what\nassociative arrays are. Getting into the\nmathematical definitions, what is the group theory?",
    "start": "206070",
    "end": "211180"
  },
  {
    "text": "And then leading into the sort\nof traditional linear algebra,",
    "start": "211180",
    "end": "216340"
  },
  {
    "text": "vector spaces and\nother types of things, sort of getting\nyou a sense of this really is what connects those\ntwo things at the deeper",
    "start": "216340",
    "end": "224780"
  },
  {
    "text": "mathematical level.  So what are spreadsheets\nand big tables?",
    "start": "224780",
    "end": "231930"
  },
  {
    "text": "So spreadsheets--\nobviously, Microsoft Excel",
    "start": "231930",
    "end": "239739"
  },
  {
    "text": "tends to dominate the\nspreadsheet world-- are arguably the most commonly\nused analytics structure",
    "start": "239740",
    "end": "245580"
  },
  {
    "text": "on Earth. Probably 100 million people,\nif not a larger number,",
    "start": "245580",
    "end": "250830"
  },
  {
    "text": "use a spreadsheet\nevery single day. Perhaps a good the\nfraction of the planet",
    "start": "250830",
    "end": "258329"
  },
  {
    "text": "now has used a spreadsheet\nat some point or the other.",
    "start": "258329",
    "end": "263620"
  },
  {
    "text": "Big tables, which are\nthese large triple store databases that we have\ndiscussed in prior lectures,",
    "start": "263620",
    "end": "272120"
  },
  {
    "text": "are really what is used to\nstore most of the analyzed data on Earth. So Google, Amazon, they all\nhave these giant triple store",
    "start": "272120",
    "end": "281659"
  },
  {
    "text": "databases, which can be thought\nabout as gigantic spreadsheets",
    "start": "281660",
    "end": "287940"
  },
  {
    "text": "really, rows and columns\nand values and stuff. And the power is that they\nreally can simultaneously",
    "start": "287940",
    "end": "295170"
  },
  {
    "text": "store diverse data. You can hold in the same\ndata structure strings,",
    "start": "295170",
    "end": "301160"
  },
  {
    "text": "and dates, and\nintegers, and reels, and all different types of data. And you can treat\nthem very differently.",
    "start": "301160",
    "end": "309230"
  },
  {
    "text": "As we've shown here, this\nis just one spreadsheet. We can treat it as a matrix. We can treat it as functions,\nhash table, little mini",
    "start": "309230",
    "end": "320040"
  },
  {
    "text": "databases. All in the same\nspreadsheet, we can kind of hold this information.",
    "start": "320040",
    "end": "325090"
  },
  {
    "text": "So it's a very powerful\nconcept, the spreadsheet. Yet, we lack any formal\nmathematical basis for this.",
    "start": "325090",
    "end": "335419"
  },
  {
    "text": "In fact, I looked up in\nthe American Mathematical Association in the SIAM\ndatabases the word spreadsheet.",
    "start": "335420",
    "end": "344180"
  },
  {
    "text": "And it did not appear\nin a single title or an abstract other than,\nsay, maybe with reference",
    "start": "344180",
    "end": "349312"
  },
  {
    "text": "to some software. But this core thing\nthat we use every day--",
    "start": "349312",
    "end": "356910"
  },
  {
    "text": "every single time we do a\nGoogle search we're using it, every single time\nwe do a spreadsheet, we're using it-- has no\nformal mathematical structure.",
    "start": "356910",
    "end": "367210"
  },
  {
    "text": "And so that seems like a\nlittle bit of a problem. Maybe we should have some\nformal mathematical structure.",
    "start": "367210",
    "end": "373930"
  },
  {
    "text": "And so this mathematical thing\ncalled an associative array actually gives us a\nmathematical structure that",
    "start": "373930",
    "end": "380760"
  },
  {
    "text": "really encompasses this\nin a fairly nice way. I'm sure there's\ncases that it doesn't.",
    "start": "380760",
    "end": "385910"
  },
  {
    "text": "But the core of what it\nis really, really works. So I think that's\na powerful concept.",
    "start": "385910",
    "end": "393090"
  },
  {
    "text": "So what is our\noverall goal here? So we want to create\na formal basis for working with these types\nof data structures in a more",
    "start": "393090",
    "end": "399259"
  },
  {
    "text": "mathematically rigorous way. This allows us to create\nbetter algorithms.",
    "start": "399260",
    "end": "404410"
  },
  {
    "text": "Because we can now apply\nthe traditional tools of linear algebra and detection\ntheory to these types of data.",
    "start": "404410",
    "end": "413910"
  },
  {
    "text": "It saves time in\nterms of, generally, if you have the\nmathematical background, you can implement things\nusing a lot less code, which",
    "start": "413910",
    "end": "422020"
  },
  {
    "text": "usually means a lot less lines. And often, you can\nbuild on top of existing",
    "start": "422020",
    "end": "427470"
  },
  {
    "text": "optimized libraries, which\ngive you better performance. And we throw out a number\nof 50 x less effort.",
    "start": "427470",
    "end": "433919"
  },
  {
    "text": "For those with the required\ntraining, they can do this. And that is something that we've\nobserved a number of occasions.",
    "start": "433920",
    "end": "443330"
  },
  {
    "text": "And you know, it's\ngood for managers, too. I've tried to recruit group\nleaders at Lincoln Laboratory.",
    "start": "443330",
    "end": "451100"
  },
  {
    "text": "It's like, you really\nshould use D4M. I could connect it\nto SAP no problem.",
    "start": "451100",
    "end": "457260"
  },
  {
    "text": "Get them feeling like they're\nactually doing programming again, you know? I haven't had too many\ntakers of that yet.",
    "start": "457260",
    "end": "464590"
  },
  {
    "text": "So hopefully, maybe as\nyou folks start using it, they'll see you using it.",
    "start": "464590",
    "end": "470520"
  },
  {
    "text": "Binding to the\nvarious enterprise databases at the laboratory\nis very easy to do.",
    "start": "470520",
    "end": "476100"
  },
  {
    "text": "And using D4M to analyze\nit is fairly easy to do. So I actually use it now instead\nof-- if I'm going to use Excel,",
    "start": "476100",
    "end": "484530"
  },
  {
    "text": "I'll often be like, no,\nI'll just write a CSV file and just use D4M for\nmanipulating basic Excel",
    "start": "484530",
    "end": "491180"
  },
  {
    "text": "types of operations. Because it feels a lot\nmore natural to me.",
    "start": "491180",
    "end": "496650"
  },
  {
    "text": "And so I certainly\nhave done that. ",
    "start": "496650",
    "end": "505620"
  },
  {
    "text": "So we're going to get into\nthis associative array concept, which we discussed in\nsome of the earlier lectures.",
    "start": "505620",
    "end": "511280"
  },
  {
    "text": "We're going to get into\nit more deeply now. But the real benefit of the\nassociative array concept",
    "start": "511280",
    "end": "522510"
  },
  {
    "text": "is it naturally pulls\ntogether four different ways of thinking about your\ndata into one structure.",
    "start": "522510",
    "end": "532080"
  },
  {
    "text": "And you can apply the\nreasoning from any of these four ways of thinking\nsort of interchangeably now.",
    "start": "532080",
    "end": "538790"
  },
  {
    "text": "So we can think about data\nas associative arrays,",
    "start": "538790",
    "end": "544834"
  },
  {
    "text": "as arrays that are\nindexed by words.",
    "start": "544835",
    "end": "550050"
  },
  {
    "text": "This is similar to what Perl\ndoes in hashes of hashes, where we can have row\nkeys that are words,",
    "start": "550050",
    "end": "556959"
  },
  {
    "text": "and column keys that\nare words, and then values that are\nwords or numbers. ",
    "start": "556960",
    "end": "563130"
  },
  {
    "text": "This concept is one to one with\nour triple store databases. So we can go naturally\nfrom triples to this",
    "start": "563130",
    "end": "569460"
  },
  {
    "text": "and inserting data\ninto a database. And if our data is\nan associative array, we can very quickly say,\nplease insert into a database.",
    "start": "569460",
    "end": "576700"
  },
  {
    "text": "And if we do a query, it can\nreturn an associative array to us very nicely.",
    "start": "576700",
    "end": "582329"
  },
  {
    "text": "This obviously\nconnects to graphs if we want to store\nrelationships and graphs",
    "start": "582330",
    "end": "589420"
  },
  {
    "text": "between vertices and entities. So we have alice,\nbob, cited, which is a duel to the\nlinear algebraic matrix",
    "start": "589420",
    "end": "596830"
  },
  {
    "text": "formulation of graphs. Row, Alice, column, Bob, their\nedge associated between them.",
    "start": "596830",
    "end": "604569"
  },
  {
    "text": "So we have these four\nvery powerful ways of looking at our data. And they're now all\nsort of brought together",
    "start": "604570",
    "end": "611070"
  },
  {
    "text": "as one concept. So I kind of argued it's one\nof the best deals in math",
    "start": "611070",
    "end": "616110"
  },
  {
    "text": "you'll get. If you know one, you get\nthe other three for free. And that's really what the\nwhole point of math is, right?",
    "start": "616110",
    "end": "622170"
  },
  {
    "text": "If you give me a whole\nbunch of information, I can calculate something\nelse that you didn't know.",
    "start": "622170",
    "end": "627310"
  },
  {
    "text": "And typically, in\nsignal processing that deal is more\nlike, well, if give me 50 pieces of information,\nI can give you the 51st.",
    "start": "627310",
    "end": "633570"
  },
  {
    "text": "Here, if you give me one,\nI can give you three. So it's a really good bargain. ",
    "start": "633570",
    "end": "641509"
  },
  {
    "text": "As a little anecdote, I was\nworking with my daughter teaching her the parallel\ngeometry lines problem.",
    "start": "641510",
    "end": "649360"
  },
  {
    "text": "You know, parallel lines. I was telling her this\nis the best deal in math. Because you know one angle, and\nyou get the other seven free.",
    "start": "649360",
    "end": "656071"
  },
  {
    "text": "So we're not quite\nas good as that. That's probably the\nbest deal in math going. And that's why they\nteach it so much.",
    "start": "656071",
    "end": "661390"
  },
  {
    "text": "If you know one angle, you\nget the other seven for free. Here, if you know one\nof these concepts,",
    "start": "661390",
    "end": "666900"
  },
  {
    "text": "you essentially get\nthe other for free. So it's a very powerful concept. And it's really kind of\nat the core of the benefit",
    "start": "666900",
    "end": "676200"
  },
  {
    "text": "of this technology. ",
    "start": "676200",
    "end": "683110"
  },
  {
    "text": "As much as possible,\nwe try and make it that any operation on\nan associative array",
    "start": "683110",
    "end": "688120"
  },
  {
    "text": "returns another\nassociative array. So this gives you sort of\nthe mathematical concept",
    "start": "688120",
    "end": "694120"
  },
  {
    "text": "of closure. Linear algebra works\nbecause the vast majority of operations on a matrix\nreturn another matrix.",
    "start": "694120",
    "end": "701820"
  },
  {
    "text": "And so you can compose these\ntogether mathematically and create sequences\nof operation,",
    "start": "701820",
    "end": "707850"
  },
  {
    "text": "which are conceptually\neasy to think about. So because of that, we\ncan create operations",
    "start": "707850",
    "end": "715200"
  },
  {
    "text": "like adding associative arrays,\nsubtracting associative arrays, anding, [? warring ?] them,\nmultiplying them together.",
    "start": "715200",
    "end": "722459"
  },
  {
    "text": "And the result of every\none of these operations will be another\nassociative array. And so that's a very\npowerful, powerful concept.",
    "start": "722460",
    "end": "730820"
  },
  {
    "text": "And likewise, we can do\nvery easy query operations if we want to get rows Alice\nand Bob, row Alice, rows",
    "start": "730820",
    "end": "740400"
  },
  {
    "text": "beginning with al, rows Alice\nto Bob, the first two rows, everything equal to 47.",
    "start": "740400",
    "end": "747840"
  },
  {
    "text": "And every single one\nof these will return another associative array. So again, this\ncompositional concept",
    "start": "747840",
    "end": "755200"
  },
  {
    "text": "is very, very important. It's not to say we don't use\nthe triples formulation, too. And we have routines that\nvery quickly bounce you",
    "start": "755200",
    "end": "761680"
  },
  {
    "text": "back and forth between them. Because there are\ntimes you're just like, no, I want to view this\nis as a set of triples. And I want to do new\noperations that way as well.",
    "start": "761680",
    "end": "768611"
  },
  {
    "text": "So we support them both. But this is really sort of\nthe core composable aspect.",
    "start": "768611",
    "end": "775080"
  },
  {
    "text": "In fact, most people\ninitially develop their codes in this formalism,\nand then maybe",
    "start": "775080",
    "end": "782220"
  },
  {
    "text": "change some of their lines\nto working on native triples if they need to get some\nimprovement in performance,",
    "start": "782220",
    "end": "790350"
  },
  {
    "text": "memory handling, or\nthe side like that. And we certainly do that, too. ",
    "start": "790350",
    "end": "798160"
  },
  {
    "text": "These associative\narrays are actually very easy to implement. And the whole D4M library-- it's\nprobably a little larger now,",
    "start": "798160",
    "end": "806080"
  },
  {
    "text": "but when I wrote this--\nit was about 2,000 lines, At which is very easy to do in\nprogramming environments that",
    "start": "806080",
    "end": "813520"
  },
  {
    "text": "have first class support for\ntwo dimensional arrays, operator overloading. We're overloading\noperators here like crazy",
    "start": "813520",
    "end": "820050"
  },
  {
    "text": "here, the plus, the minus,\nthe and, parentheses, all that kind of stuff. And also, have\nfirst class support",
    "start": "820050",
    "end": "826460"
  },
  {
    "text": "for sparse linear algebra. Internal, under\nthe covers, we're using sparse linear algebra like\ncrazy to make all this work.",
    "start": "826460",
    "end": "832920"
  },
  {
    "text": " Of the languages on Earth\nthat have those features,",
    "start": "832920",
    "end": "840000"
  },
  {
    "text": "MATLAB is by far the\nmost popular one, which is why we have\nchosen that language",
    "start": "840000",
    "end": "845270"
  },
  {
    "text": "to implement these features. There are other languages\nthat have these features. And you can implement that.",
    "start": "845270",
    "end": "851700"
  },
  {
    "text": "But there are other\nlanguages that don't. And if you want to implement\nD4M in those languages,",
    "start": "851700",
    "end": "856940"
  },
  {
    "text": "you certainly can. You just have to\nwrite more code. So this is sort of the language\nin which it can be done",
    "start": "856940",
    "end": "862430"
  },
  {
    "text": "in the minimum amount of code. And again, we find that\nfor complex analytics that people typically\ncan get their work done",
    "start": "862430",
    "end": "869300"
  },
  {
    "text": "with 50 times less code than\nequivalent Java and SQL.",
    "start": "869300",
    "end": "874680"
  },
  {
    "text": "And this naturally leads to\nhigh performance parallel implementations, because these\nare all arrays and matrices.",
    "start": "874680",
    "end": "880160"
  },
  {
    "text": "And we have a very\nwell-established literature in the community about how to\ndo parallel linear algebra,",
    "start": "880160",
    "end": "886090"
  },
  {
    "text": "how to make matrices\nwork in parallel. It's a very\nwell-studied discipline. And we have a lot of technology.",
    "start": "886090",
    "end": "892280"
  },
  {
    "start": "892280",
    "end": "898010"
  },
  {
    "text": "Just to remind people\nof how we actually store the data in our databases\nand how the data will often",
    "start": "898010",
    "end": "903120"
  },
  {
    "text": "come out in our\nassociate arrays, we use this exploded schema. So if we had data that\nlooked like a standard table",
    "start": "903120",
    "end": "910960"
  },
  {
    "text": "here with some kind of\nkey and three columns here with different\nvalues associated",
    "start": "910960",
    "end": "917600"
  },
  {
    "text": "with every one of them,\nif we were to insert these into a standard,\nsay, SQL type table,",
    "start": "917600",
    "end": "923150"
  },
  {
    "text": "we would just simply create\na table like this in SQL.",
    "start": "923150",
    "end": "929690"
  },
  {
    "text": "But if we wanted to look\nup anything quickly, we would have to create\nancillary tables that would store indices to allow\nus to do things very quickly.",
    "start": "929690",
    "end": "939050"
  },
  {
    "text": "And if we wanted to add a\ntotally new type of data, we would have to\nrethink our schema.",
    "start": "939050",
    "end": "946140"
  },
  {
    "text": "So what we typically do is we\ncreate this exploded schema. Because our triple stores\nare very comfortable",
    "start": "946140",
    "end": "953430"
  },
  {
    "text": "dynamically storing very\nlarge numbers of columns. So we essentially typically take\nthe type and append the value.",
    "start": "953430",
    "end": "960800"
  },
  {
    "text": "So we create a series\nof triples here, usually with some\nminimal information for the actual stored\nvalue, something",
    "start": "960800",
    "end": "966990"
  },
  {
    "text": "we would never want to look up. Again, by itself this\ndoesn't give you much. Because most of these triple\nstores have an orientation,",
    "start": "966990",
    "end": "974470"
  },
  {
    "text": "typically row oriented. So you can get any row quickly\nwith relatively little effort.",
    "start": "974470",
    "end": "980240"
  },
  {
    "text": " And so we also store\nthe transpose of that.",
    "start": "980240",
    "end": "988710"
  },
  {
    "text": "We now create a table pair,\nsuch that we can look up any row or column very quickly.",
    "start": "988710",
    "end": "995269"
  },
  {
    "text": "And so essentially, we've\nindexed all the data. And you can now do things\nvery, very quickly.",
    "start": "995270",
    "end": "1001230"
  },
  {
    "text": "So that's a very powerful,\npowerful concept. And we exploit it all time. And of course,\nthis whole concept",
    "start": "1001230",
    "end": "1007000"
  },
  {
    "text": "looks very much like\nan associative array. Mathematically, we can treat\nit as an associative array. ",
    "start": "1007000",
    "end": "1025280"
  },
  {
    "text": "All right. So that's sort of the easy part. I think we've\ncovered a lot of this before in previous lectures.",
    "start": "1025280",
    "end": "1030449"
  },
  {
    "text": "Now, we're going\nto get into some of the more mathematical\nelements, which aren't necessarily hard.",
    "start": "1030450",
    "end": "1036140"
  },
  {
    "text": "They just impose notation\nthat we don't necessarily",
    "start": "1036140",
    "end": "1042959"
  },
  {
    "text": "use in our regular\nday to day work lives. So we're going to\ntalk about what are the values associations,\nkeys, functions,",
    "start": "1042960",
    "end": "1050490"
  },
  {
    "text": "and getting into things\nlike matrix multiply. ",
    "start": "1050490",
    "end": "1056360"
  },
  {
    "text": "So mathematically, we\ntreat an associative array",
    "start": "1056360",
    "end": "1062520"
  },
  {
    "text": "as sets of keys\nand values that are drawn from infinite strict\ntotally ordered set,",
    "start": "1062520",
    "end": "1068700"
  },
  {
    "text": "we'll call it S. You might\nbe like, what is that? What is an infinite strict\ntotally ordered set?",
    "start": "1068700",
    "end": "1074310"
  },
  {
    "text": "It's just a set where\nthere's an ordering, where basically any two\nelements in the set, there's a function\nthat will tell you",
    "start": "1074310",
    "end": "1082420"
  },
  {
    "text": "one is greater than the other. And they also have an\nequal operation, too. So it will tell you that,\nyou know, to give it any two",
    "start": "1082420",
    "end": "1088870"
  },
  {
    "text": "values, I can ask the question\nis one greater than the other or are they equal? So that's the strict part.",
    "start": "1088870",
    "end": "1096310"
  },
  {
    "text": "So that encompasses a lot. Obviously, it encompasses the\nusual things like real numbers,",
    "start": "1096310",
    "end": "1103900"
  },
  {
    "text": "and integers, and\nthings like that. But it also encompasses\nstrings if we impose an ordering on them.",
    "start": "1103900",
    "end": "1111310"
  },
  {
    "text": "And we will choose lexicographic\nordering almost always to be our order.",
    "start": "1111310",
    "end": "1116890"
  },
  {
    "text": "In fact, in the implementation,\nwe sort of impose that. We always use\nlexicographic ordering. We don't really have another\nordering that is readily",
    "start": "1116890",
    "end": "1123880"
  },
  {
    "text": "at our disposal. So given those keys and\nvalues, an associative array",
    "start": "1123880",
    "end": "1133770"
  },
  {
    "text": "is a partial function\nfrom a d dimensional set",
    "start": "1133770",
    "end": "1139350"
  },
  {
    "text": "of keys to a value. So if we have the vector of\nkey, so typically d will be 2.",
    "start": "1139350",
    "end": "1148940"
  },
  {
    "text": "And the first k1 will be the\nrow key, and then a column key.",
    "start": "1148940",
    "end": "1154340"
  },
  {
    "text": "And it will map out\nits partial function",
    "start": "1154340",
    "end": "1159570"
  },
  {
    "text": "from the d keys to one value. So it will look like\nthis, an associative array",
    "start": "1159570",
    "end": "1168149"
  },
  {
    "text": "with a vector of\nkeys, typically 2. I will have a value vi and\nthat it is empty otherwise.",
    "start": "1168150",
    "end": "1179640"
  },
  {
    "text": " So this is its function,\nbecause we only define it",
    "start": "1179640",
    "end": "1186280"
  },
  {
    "text": "where these keys exist. So you can Imagine that\nevery singe associative array is a function\nover the entire space",
    "start": "1186280",
    "end": "1194700"
  },
  {
    "text": "of all possible keys. But we're only giving you\nthe ones that are defined. And everywhere else,\nit's undefined.",
    "start": "1194700",
    "end": "1202070"
  },
  {
    "text": "OK. This is actually a fairly large\nbreak from linear algebra, where we can have functions--\na matrix is really",
    "start": "1202070",
    "end": "1212640"
  },
  {
    "text": "a function of the indices, the\nij indices, which are integers. Here, we allow them\nto be anything.",
    "start": "1212640",
    "end": "1218430"
  },
  {
    "text": "And we formally\nsupport the concept of a completely\nempty row or column.",
    "start": "1218430",
    "end": "1223890"
  },
  {
    "text": "So associative arrays\ndon't allow that. They only store not\nempty information.",
    "start": "1223890",
    "end": "1231580"
  },
  {
    "text": "And in our implementation, we\ntend to store 0 as equivalent",
    "start": "1231580",
    "end": "1238070"
  },
  {
    "text": "to null in this space. Because the underlying\nsparse matrix implementation",
    "start": "1238070",
    "end": "1243230"
  },
  {
    "text": "does that. 0 is essentially treated\nas the null character. So that's a big difference.",
    "start": "1243230",
    "end": "1250290"
  },
  {
    "text": "Now, we can still use our\nlinear algebraic intuition, but that's the fundamental\ndifference here.",
    "start": "1250290",
    "end": "1258890"
  },
  {
    "text": "So binary operations\non any two associative arrays-- so I have\nassociative array A1 and A1 with this\nbinary operation--",
    "start": "1258890",
    "end": "1269050"
  },
  {
    "text": "are defined essentially\nby two functions.",
    "start": "1269050",
    "end": "1274680"
  },
  {
    "text": "The sort of upper\nfunction here says how we're going to treat the keys.",
    "start": "1274680",
    "end": "1280260"
  },
  {
    "text": "So if we have two\nassociate arrays, their keys, some of\nthem can overlap.",
    "start": "1280260",
    "end": "1285820"
  },
  {
    "text": "Some of them cannot overlap. And our function\nwill either choose to look for the union or\nthe intersection of those.",
    "start": "1285820",
    "end": "1293920"
  },
  {
    "text": "So for instance,\nif we do addition, that's most associated with\nunioning the underlying keys.",
    "start": "1293920",
    "end": "1303700"
  },
  {
    "text": "If we do other operations,\nlike and, that's",
    "start": "1303700",
    "end": "1309039"
  },
  {
    "text": "most consistent\nwith intersecting the two sets of keys.",
    "start": "1309040",
    "end": "1314260"
  },
  {
    "text": "So obviously, if\nit's union-like, the result will\nalways be non-empty.",
    "start": "1314260",
    "end": "1319350"
  },
  {
    "text": "If the function is\nintersection-like, then there's a possibility\nyou can do a binary operation.",
    "start": "1319350",
    "end": "1324549"
  },
  {
    "text": "And the result will be an\nempty associative array. So we have that choice there.",
    "start": "1324550",
    "end": "1334500"
  },
  {
    "text": "And we choose union\nand intersection, because they're the\nones that are-- you could do other functions.",
    "start": "1334500",
    "end": "1340090"
  },
  {
    "text": "But they're the ones that are\nformally covered in set theory and keep us from having\nto relax this very",
    "start": "1340090",
    "end": "1347730"
  },
  {
    "text": "general condition here. We can have equality. So we can check\nfor intersection.",
    "start": "1347730",
    "end": "1355320"
  },
  {
    "text": "And so we're OK there. ",
    "start": "1355320",
    "end": "1363440"
  },
  {
    "text": "So if we have an\nassociative array,",
    "start": "1363440",
    "end": "1369259"
  },
  {
    "text": "A1 with a set of keys\nhere, ki, and a value, v1, and another associative\narray with an intersecting",
    "start": "1369260",
    "end": "1376910"
  },
  {
    "text": "ki with v2, then A3 ki will\nbe given by this function.",
    "start": "1376910",
    "end": "1384470"
  },
  {
    "text": " It's either going to\nbe the keys overlap.",
    "start": "1384470",
    "end": "1390770"
  },
  {
    "text": "So if ki are the\nsame, they'll overlap. And so there you go.",
    "start": "1390770",
    "end": "1397799"
  },
  {
    "text": "And likewise, with this. You have this choice. It could either be a\nunion or an intersection. And then what we do\nwith the values-- like,",
    "start": "1397800",
    "end": "1405240"
  },
  {
    "text": "we now have the collision\nis what we'll call these. Two keys from two associative\narrays, the row keys",
    "start": "1405240",
    "end": "1410323"
  },
  {
    "text": "and the column\nkeys are the same. Well, now, we want\nto do something. We apply this function f, which\nwe call the collision function.",
    "start": "1410323",
    "end": "1418450"
  },
  {
    "text": "And that will determine what\nthe actual result is, what the new value of A3 will be.",
    "start": "1418450",
    "end": "1424590"
  },
  {
    "start": "1424590",
    "end": "1429970"
  },
  {
    "text": "If one of these was empty, then\nobviously the union of this we",
    "start": "1429970",
    "end": "1438464"
  },
  {
    "text": "don't even have\nto worry about it. That's kind of the\nway we approach this. If there is no\ncollision, so that",
    "start": "1438464",
    "end": "1449380"
  },
  {
    "text": "means you're applying\nyour function with this, then f is never called.",
    "start": "1449380",
    "end": "1454470"
  },
  {
    "text": "So we always just\ndo that or that. So if it's a union\nfunction, then you just",
    "start": "1454470",
    "end": "1460030"
  },
  {
    "text": "get v. If it's an\nintersection function, then you would just\nget the empty set. And the underlying\nfunction never is called.",
    "start": "1460030",
    "end": "1466655"
  },
  {
    "text": "And you might be like, well,\nwhy would I care about that? Well, later on I'm going to get\nto deal with things like, well,",
    "start": "1466655",
    "end": "1473470"
  },
  {
    "text": "what is the zero in this math? Or what is one in this math?",
    "start": "1473470",
    "end": "1480600"
  },
  {
    "text": "And this will allow me to sort\nof address some of those cases by saying, look, if there's\nno key intersection,",
    "start": "1480600",
    "end": "1488980"
  },
  {
    "text": "we can do that. So the high level usage\nof associative arrays",
    "start": "1488980",
    "end": "1494970"
  },
  {
    "text": "is essentially dictated\nby this mathematics. ",
    "start": "1494970",
    "end": "1500170"
  },
  {
    "text": "And again, part of the reason\nwe chose this very general definition is that,\nby definition,",
    "start": "1500170",
    "end": "1506810"
  },
  {
    "text": "numbers, reals, and integers\nare all included here. We have not thrown them out. And we've also included strings.",
    "start": "1506810",
    "end": "1512380"
  },
  {
    "text": "I should say at any time we can\nsay, look, our values are just real numbers. And then we essentially get the\nfull power of linear algebra.",
    "start": "1512380",
    "end": "1519889"
  },
  {
    "text": "But that's true of\nthis sort of card that we always\ntry and play last. OK. We try and keep our\nmathematics as broad as we can.",
    "start": "1519890",
    "end": "1527394"
  },
  {
    "text": "And if then there's\nparticular instances like, oh, well, I need the values\nto be real numbers or complex",
    "start": "1527394",
    "end": "1532536"
  },
  {
    "text": "numbers here, or\nintegers, or whatever. We can always say, all\nright, the values are that. And now, we get a whole bunch\nof additional properties.",
    "start": "1532536",
    "end": "1538320"
  },
  {
    "text": "But we try and build\nup the mathematics in this general way first, and\nthen sort of play that later.",
    "start": "1538320",
    "end": "1545434"
  },
  {
    "text": "AUDIENCE: Question. JEREMY KEPNER: Yes. AUDIENCE: So the way you've--\nthe general definition of keys,",
    "start": "1545434",
    "end": "1550892"
  },
  {
    "text": "that's more general than\nyou would need to analyze spreadsheets. Wouldn't it be sufficient\nfor spreadsheets",
    "start": "1550892",
    "end": "1556521"
  },
  {
    "text": "to have your keys be\nintegers [INAUDIBLE]?",
    "start": "1556521",
    "end": "1561600"
  },
  {
    "text": "JEREMY KEPNER: So I believe\nthat actually spreadsheets",
    "start": "1561600",
    "end": "1568549"
  },
  {
    "text": "store things as R1, and R2, R3\ninternally and C1, that they actually use a internal\ntriple representation,",
    "start": "1568550",
    "end": "1576880"
  },
  {
    "text": "and then project that\ninto this integer space.",
    "start": "1576880",
    "end": "1582020"
  },
  {
    "text": "So what the actual\nspreadsheet does, I think, kind of depends on the\nspecific spreadsheet.",
    "start": "1582020",
    "end": "1589429"
  },
  {
    "text": "So the question was-- they can't\nreally hear you on this mic. Is this more than you\nneed to do a spreadsheet?",
    "start": "1589430",
    "end": "1597990"
  },
  {
    "text": "Could you get away with\njust integer indexing?",
    "start": "1597990",
    "end": "1603450"
  },
  {
    "text": "And I would say perhaps. I don't really know. And as I said, I\nthink internally they",
    "start": "1603450",
    "end": "1608710"
  },
  {
    "text": "actually do something\nthat's more akin to this. Certainly when you do\nmath in Microsoft Excel,",
    "start": "1608710",
    "end": "1619080"
  },
  {
    "text": "it has letters. You give it A1, B1,\nthose types of things. AUDIENCE: But that's just\nbecause they're using letters",
    "start": "1619080",
    "end": "1626890"
  },
  {
    "text": "instead of a second integer. JEREMY KEPNER: Yeah. Yeah. One could view it that way.",
    "start": "1626890",
    "end": "1631970"
  },
  {
    "text": "But people like it. So we do what\npeople like, right? AUDIENCE: Yeah. But you don't need an additional\nmathematical structure.",
    "start": "1631970",
    "end": "1642169"
  },
  {
    "text": "[INAUDIBLE] You can just make it one to\none [INAUDIBLE] letters to-- AUDIENCE: [INAUDIBLE]\nlike in Excel, you",
    "start": "1642170",
    "end": "1648177"
  },
  {
    "text": "have different worksheets,\ntoo, and different columns. So you have to\nreference both of those.",
    "start": "1648177",
    "end": "1653840"
  },
  {
    "text": "AUDIENCE: You have to\nreference row and column. But you just need\na pair of integers. AUDIENCE: Well, it's\na row and column. But then it's also the\nworksheets that you're on.",
    "start": "1653840",
    "end": "1660960"
  },
  {
    "text": "AUDIENCE: OK. So, three. AUDIENCE: So there's three. But they're not going to\nsequentially number all those. Because it's a sparse space that\nyou're using, right, probably?",
    "start": "1660960",
    "end": "1669143"
  },
  {
    "text": "So I'm sure they\ndo some caching. I don't think they store\na number for every column",
    "start": "1669144",
    "end": "1674475"
  },
  {
    "text": "that you're not using. AUDIENCE: Certainly,\nyou can try that out by creating an\nempty spreadsheet, putting the number\nin one corner,",
    "start": "1674475",
    "end": "1679695"
  },
  {
    "text": "putting a number in another\ncorner really far away and see if it [INAUDIBLE]\ntwo [INAUDIBLE].",
    "start": "1679695",
    "end": "1685624"
  },
  {
    "text": "JEREMY KEPNER: It\ndoesn't do that. Obviously, it does compress. AUDIENCE: [INAUDIBLE]. JEREMY KEPNER: Yeah.",
    "start": "1685624",
    "end": "1690970"
  },
  {
    "text": "So mathematically, it may be\nmore than what is minimally required to do a spreadsheet.",
    "start": "1690970",
    "end": "1698060"
  },
  {
    "text": "We will discover,\nthough, it is very useful and, in a certain sense,\nallows you to do things",
    "start": "1698060",
    "end": "1703390"
  },
  {
    "text": "with spreadsheets\nthat are hard to do in the existing technologies,\nwhich is why I use it.",
    "start": "1703390",
    "end": "1709480"
  },
  {
    "text": "There's operations\nthat I can do with this that are very natural. And the spreadsheet\ndata is there.",
    "start": "1709480",
    "end": "1714540"
  },
  {
    "text": "And I would like to\nbe able to do it. AUDIENCE: So Jeremy? JEREMY KEPNER: Yes. AUDIENCE: The actual\nbinary operator",
    "start": "1714540",
    "end": "1719870"
  },
  {
    "text": "plus in associative array,\nis it union or intersection?",
    "start": "1719870",
    "end": "1725230"
  },
  {
    "text": "JEREMY KEPNER: So\non the keys, it will be union where the\nvalue is an intersection",
    "start": "1725230",
    "end": "1736010"
  },
  {
    "text": "with an empty set. We don't care what the\nactual numerical thing is. We'll just return\nthe other thing.",
    "start": "1736010",
    "end": "1742809"
  },
  {
    "text": "Where there is a collision, and\nso now you have to resolve-- and that's kind of why we\nget a lot of mileage here.",
    "start": "1742810",
    "end": "1749370"
  },
  {
    "text": "Because most of the time,\nwe are very few collisions. And so it's not like we have\nto worry about huge things.",
    "start": "1749370",
    "end": "1754870"
  },
  {
    "text": "So where there are collisions,\nif the values are numbers, then it'll just do\nthe normal addition.",
    "start": "1754870",
    "end": "1761780"
  },
  {
    "text": "If the values are strings,\nthen it's somewhat undefined",
    "start": "1761780",
    "end": "1766940"
  },
  {
    "text": "what we mean there.  And I forget if D4M throws\nan error in that situation",
    "start": "1766940",
    "end": "1776880"
  },
  {
    "text": "if the values are strings. It might default to\njust doing something like taking the max\nor the min and saying,",
    "start": "1776880",
    "end": "1783260"
  },
  {
    "text": "you tried to add two things\nfor which the formal addition collision function\ndoesn't really make sense.",
    "start": "1783260",
    "end": "1788390"
  },
  {
    "text": "And I'm just going to\nput something in there. We can test that out at\nthe end of the class. AUDIENCE: So a\ncollision function",
    "start": "1788390",
    "end": "1794520"
  },
  {
    "text": "is a function of that\ntype of the value? JEREMY KEPNER: Yes. AUDIENCE: OK. JEREMY KEPNER: It\nhas to be a function",
    "start": "1794520",
    "end": "1800330"
  },
  {
    "text": "of the type of the value. Because if I'm going to add\na real number with a string, what do I do?",
    "start": "1800330",
    "end": "1805679"
  },
  {
    "text": "Because I can do that. Yes, another question. AUDIENCE: To follow up\non the previous point, it seems like in the case\nfor addition, for example,",
    "start": "1805680",
    "end": "1813070"
  },
  {
    "text": "there might be cases where you'd\nactually want union, then add, or intersection, then add.",
    "start": "1813070",
    "end": "1818566"
  },
  {
    "text": "It kind of depends on what\nthe nulls in your array actually represent. JEREMY KEPNER: Oh, there\nare so many functions",
    "start": "1818566",
    "end": "1826720"
  },
  {
    "text": "where you can think,\nwell, I'd kind of like to have it mean\nthis in this context. AUDIENCE: Yeah.",
    "start": "1826720",
    "end": "1831790"
  },
  {
    "text": "So the question\nis can you pass in as a parameter in D4M I want\nyou to union, then operate,",
    "start": "1831790",
    "end": "1837737"
  },
  {
    "text": "I want you to\nintersect, then operate? Or did they all just assume\nthe most logical and do it?",
    "start": "1837737",
    "end": "1843820"
  },
  {
    "text": "So bigger lever question\nwas sometimes you",
    "start": "1843820",
    "end": "1851990"
  },
  {
    "text": "maybe would like\nplus to mean some of the other conceptual\nways that we would mean it.",
    "start": "1851990",
    "end": "1857940"
  },
  {
    "text": "OK. So in fact, we see that a lot. There's a lot of things.",
    "start": "1857940",
    "end": "1864170"
  },
  {
    "text": "Now, in fact, we'll\nget into that space. And there's hundreds,\nthousands, millions",
    "start": "1864170",
    "end": "1871490"
  },
  {
    "text": "of potential possible algebras\nthat you can possibly want.",
    "start": "1871490",
    "end": "1876880"
  },
  {
    "text": "So what we have done is we\nthink about the function. And we think about in\nthis mathematical context.",
    "start": "1876880",
    "end": "1883820"
  },
  {
    "text": "And we see what its\nmathematical implications are in terms of is it consistent\nwith the overall group",
    "start": "1883820",
    "end": "1890680"
  },
  {
    "text": "theory of the\nmathematics, in which case we know that if someone uses it\nthat the intuition will carry",
    "start": "1890680",
    "end": "1897650"
  },
  {
    "text": "through? Or is it kind of\nforking them off into it's something\nyou might want to do, but really the result\nis now taking you",
    "start": "1897650",
    "end": "1904559"
  },
  {
    "text": "into a sort of undefined space? So that's kind of a thing\nwe use for doing that.",
    "start": "1904560",
    "end": "1911820"
  },
  {
    "text": "We don't have the formal support\nin this of a multiply operation",
    "start": "1911820",
    "end": "1919159"
  },
  {
    "text": "that allows you to\npass in an arbitrary function for doing that.",
    "start": "1919160",
    "end": "1926850"
  },
  {
    "text": "I should say there are\nvarious tricks that allow you to do that in\njust a couple lines or two.",
    "start": "1926850",
    "end": "1932580"
  },
  {
    "text": "Basically, what\nyou can do is you start with give me the\nintersection of the unions first.",
    "start": "1932580",
    "end": "1937790"
  },
  {
    "text": "Now, I know I have\nonly collisions. Now, give me the values. Apply whatever\noperator you want. Stuff the values back\nin, and you're done.",
    "start": "1937790",
    "end": "1944340"
  },
  {
    "text": "And so you can kind of\nwork your way through that. And by doing that, you're doing\nit in a way such that you know,",
    "start": "1944340",
    "end": "1952590"
  },
  {
    "text": "yeah, you're outside\nof an algebra here. You're just kind of\ndoing what you're doing. So encourage people to do that.",
    "start": "1952590",
    "end": "1957810"
  },
  {
    "text": "But I'm just\ntelling you in terms of how we choose what functions\nwe pull and formally support. And there's a few that\nI've been wrestling",
    "start": "1957810",
    "end": "1964150"
  },
  {
    "text": "with for a long time,\nfor a very long time",
    "start": "1964150",
    "end": "1969930"
  },
  {
    "text": "and just haven't been\nable to decide what to do. Maybe I should just\nmake a decision. Yeah.",
    "start": "1969930",
    "end": "1974986"
  },
  {
    "text": "AUDIENCE: Like a\nreal simple example, if I had an array, one,\ntwo, three, and ray b was null on all three, there\nwould only be one collision.",
    "start": "1974986",
    "end": "1982752"
  },
  {
    "text": "And if we were in add, it would\nonly add them at the last-- JEREMY KEPNER: No. If it was an addition, it was-- AUDIENCE: So one, two, three.",
    "start": "1982752",
    "end": "1988898"
  },
  {
    "text": "And then the other one\nwas null, null, three. JEREMY KEPNER: So but they have\nthe same column or something?",
    "start": "1988898",
    "end": "1995761"
  },
  {
    "text": "These are vectors? AUDIENCE: Yes. JEREMY KEPNER: These\nare row vectors? Yes. So basically we have a one\ncolumn vector with three,",
    "start": "1995761",
    "end": "2003440"
  },
  {
    "text": "another column with one. And when we add them together,\nyou would get a three.",
    "start": "2003440",
    "end": "2009770"
  },
  {
    "text": "Because it would be union. It would union the keys. And then the only\naddition operation would be performed\non the collision.",
    "start": "2009770",
    "end": "2016580"
  },
  {
    "text": "We did one or and an and\noperation, then the result would just be one,\nan associative array",
    "start": "2016580",
    "end": "2024330"
  },
  {
    "text": "with one element in it. AUDIENCE: And we can do either\none depending on the context?",
    "start": "2024330",
    "end": "2030499"
  },
  {
    "text": "I kind of lost you there. Because the question was is\nit union or intersection. JEREMY KEPNER: It\ndepends on the operation.",
    "start": "2030499",
    "end": "2035660"
  },
  {
    "text": "So plus formally is\ncloser to set addition, and so therefore, is\na union operation.",
    "start": "2035660",
    "end": "2042530"
  },
  {
    "text": "And is formally closer\nto set intersection, and so it's an intersection\noperation there.",
    "start": "2042530",
    "end": "2048980"
  },
  {
    "text": "Regardless, in both cases,\nthe collision function is only applied where\nthere is a collision.",
    "start": "2048980",
    "end": "2054219"
  },
  {
    "text": " Yes. AUDIENCE: I'm getting a\nlittle confused by [INAUDIBLE]",
    "start": "2054219",
    "end": "2060741"
  },
  {
    "text": "formally defined operations\non associative arrays",
    "start": "2060741",
    "end": "2065896"
  },
  {
    "text": "in terms of values. You've used a quality\non keys at this point.",
    "start": "2065896",
    "end": "2071118"
  },
  {
    "text": "You haven't defined any other\noperations such as [INAUDIBLE] intersection [INAUDIBLE].",
    "start": "2071119",
    "end": "2076760"
  },
  {
    "text": "JEREMY KEPNER: Well, so\nthe keys are part of a set. And so they get the union\nand intersection properties",
    "start": "2076760",
    "end": "2084730"
  },
  {
    "text": "of strict totally\nordered set, which is the intuitive use of union.",
    "start": "2084730",
    "end": "2090136"
  },
  {
    "text": "AUDIENCE: Right. But they belong to the\nsame set, [INAUDIBLE] the same [INAUDIBLE] set. Yet, you've only defined\nbinary operations",
    "start": "2090136",
    "end": "2098414"
  },
  {
    "text": "on associative arrays. You haven't defined them\non the elements of the set.",
    "start": "2098414",
    "end": "2103880"
  },
  {
    "text": "JEREMY KEPNER: So we'll get\ninto that a little bit later.",
    "start": "2103880",
    "end": "2109496"
  },
  {
    "text": "AUDIENCE: That's what I thought. JEREMY KEPNER: But\nthey essentially have the binary operations of\na strict totally ordered set,",
    "start": "2109497",
    "end": "2116310"
  },
  {
    "text": "which is equality and less than. AUDIENCE: It seems to me\nthe bulk of the questions were about manipulations\non keys we haven't even",
    "start": "2116310",
    "end": "2122672"
  },
  {
    "text": "talked about yet. JEREMY KEPNER: Yes. Yes. Well, there's another\n40 some slides. ",
    "start": "2122672",
    "end": "2129810"
  },
  {
    "text": "But actually, you've gotten a\nlot of the good questions here. So the thing though to\nrecognize is that there's",
    "start": "2129810",
    "end": "2135970"
  },
  {
    "text": "a lot of choices here. And the algebra you are in\nis determined by the function",
    "start": "2135970",
    "end": "2141340"
  },
  {
    "text": "that you choose. And actually,\nyou'll find yourself switching between different\nalgebras fairly frequently.",
    "start": "2141340",
    "end": "2147450"
  },
  {
    "text": "That's how we use spreadsheets. Sometimes we do this operation,\nand now we're in this algebra. And we do this operation,\nnow we're in this algebra.",
    "start": "2147450",
    "end": "2153526"
  },
  {
    "text": "And so that's the big thing\nto kind of get away there. So let's get into this\na little bit more. That's sort of the big overall.",
    "start": "2153526",
    "end": "2160900"
  },
  {
    "text": "So I think we've\ntalked about this. Let S is an infinitely\nstrict totally ordered set.",
    "start": "2160900",
    "end": "2168550"
  },
  {
    "text": "Total order Is an\nimplementation, not a theoretical requirement. So the fact that we were\nimposing this infinite strict--",
    "start": "2168550",
    "end": "2177140"
  },
  {
    "text": "that they're totally\nordered, that we don't just allow equality, is more of\nan implementation detail.",
    "start": "2177140",
    "end": "2182880"
  },
  {
    "text": "It is very useful for\nme to internally store things in order so I could\nlook things up quickly.",
    "start": "2182880",
    "end": "2188030"
  },
  {
    "text": "However, mathematically,\nstrictly, we just had a test of equality, all\nthe math hangs together there.",
    "start": "2188030",
    "end": "2197000"
  },
  {
    "text": "All value's and keys\nare drawn from the set. And the allowable operations\non them, of two values or keys,",
    "start": "2197000",
    "end": "2205120"
  },
  {
    "text": "is less than, equal\nto, or greater than. So those are the three functions\nthat we essentially allow.",
    "start": "2205120",
    "end": "2211300"
  },
  {
    "text": "Strict totally\nordered set only is two, which is less than,\nless than or equal to. But you get essentially\nthe third one for free.",
    "start": "2211300",
    "end": "2219020"
  },
  {
    "text": "In addition, we have the\nconcept of three special symbols here, which we've\ntalked about, which is the null, the empty set,\na least element in the set,",
    "start": "2219020",
    "end": "2230100"
  },
  {
    "text": "and a maximal\nelement to the set. So v less than or equal to\nplus infinity is always true.",
    "start": "2230100",
    "end": "2236420"
  },
  {
    "text": "And plus infinity\nis, we're saying, the maximal element\nis a part of this set.",
    "start": "2236420",
    "end": "2242490"
  },
  {
    "text": "Greater than or equal\nto negative infinity is always true. ",
    "start": "2242490",
    "end": "2248870"
  },
  {
    "text": "In all set theory, the empty set\nis a formal member of all sets.",
    "start": "2248870",
    "end": "2255020"
  },
  {
    "text": "So now we'll talk about--\ndid that sort of get",
    "start": "2255020",
    "end": "2263600"
  },
  {
    "text": "to your question about\nthe operations that are defined on the keys? AUDIENCE: Yeah.",
    "start": "2263600",
    "end": "2269265"
  },
  {
    "text": "Yeah. You [INAUDIBLE]-- JEREMY KEPNER: Right. AUDIENCE: [INAUDIBLE]. JEREMY KEPNER: Right.",
    "start": "2269265",
    "end": "2274370"
  },
  {
    "text": "So then we talked about\nthe collision functions. And there are two sort\nof contextual functions here, union and intersection.",
    "start": "2274370",
    "end": "2280140"
  },
  {
    "text": "Because there's the two\noperations that makes sense. And then three conditions,\nless than, equal to, or greater than. That is in order to preserve\nthis strict totally ordered",
    "start": "2280140",
    "end": "2288950"
  },
  {
    "text": "set. Once I go to values that\nare reals or integers, I have more operations. But if I'm just limiting\nmyself to values",
    "start": "2288950",
    "end": "2295229"
  },
  {
    "text": "that are members of a\nstrict totally ordered set, this is all I have. So that means that you have\nd plus 5 possible outcomes",
    "start": "2295229",
    "end": "2304900"
  },
  {
    "text": "to any collision function. That is, you could have the\ncollision function actually choose to put out the value\nof its underlying key.",
    "start": "2304900",
    "end": "2316830"
  },
  {
    "text": "You could produce\nv1 or v2 or empty or minus infinity or\nplus or sets of these.",
    "start": "2316830",
    "end": "2324650"
  },
  {
    "text": "So it's a fairly finite\nchoice of results. If we're going to stay in\nthis sort of restricted thing,",
    "start": "2324650",
    "end": "2331230"
  },
  {
    "text": "we have a very limited\nnumber of things that can actually happen. When you're actually\napplying a collision function",
    "start": "2331230",
    "end": "2336860"
  },
  {
    "text": "on a particular where\nthere's an intersection, you have a fairly\nfinite number of things.",
    "start": "2336860",
    "end": "2343780"
  },
  {
    "text": "However the total number of\ncombinations of these functions",
    "start": "2343780",
    "end": "2349090"
  },
  {
    "text": "gives a very large number. And their function pairs\ngives a very large number of possible algebras.",
    "start": "2349090",
    "end": "2356800"
  },
  {
    "text": "I did a back\n[INAUDIBLE] calculation said it was 10 to the 30th. It might be even more that.",
    "start": "2356800",
    "end": "2362280"
  },
  {
    "text": "And in fact, it\nmight be formally infinite for all I know. But that was an\neasy calculation. There's a lot of\npossible algebras.",
    "start": "2362280",
    "end": "2368568"
  },
  {
    "text": " And this is a fairly\nimpressive level of functionality given our\nrelatively small numbers",
    "start": "2368568",
    "end": "2377329"
  },
  {
    "text": "of assumptions\nthat we have here. But we are going to focus here\non just the nice collection",
    "start": "2377330",
    "end": "2382760"
  },
  {
    "text": "functions, the ones that seem\nto feel like they give us intuitively useful things.",
    "start": "2382760",
    "end": "2387849"
  },
  {
    "text": "So we are not going to use\nkeys as outputs to our function",
    "start": "2387850",
    "end": "2393230"
  },
  {
    "text": "here. OK. We will in some contexts. And we're going to say\nthe results are always",
    "start": "2393230",
    "end": "2400010"
  },
  {
    "text": "single valued. We're not going to\ndeal with results, expand our values to\nbe sets of values.",
    "start": "2400010",
    "end": "2407504"
  },
  {
    "text": "Although, in certain\ncontexts we will do that. But mathematically, let's\nrestrict ourselves to that.",
    "start": "2407504",
    "end": "2412589"
  },
  {
    "text": "We're going to do no\ntests on special symbols. And we're just going to\nbasically say our collision function can be\nessentially-- if we",
    "start": "2412590",
    "end": "2419420"
  },
  {
    "text": "have v, less than\nv2, the answers can be one of these five. If it's equal to these, it\ncan be one of these four.",
    "start": "2419420",
    "end": "2426986"
  },
  {
    "text": "If it's greater than these,\nit can be one of these five. So it gives a fairly limited\nnumber of possible collision",
    "start": "2426987",
    "end": "2432620"
  },
  {
    "text": "functions. And all these properties\nare consistent with strict totally ordered set. And generally, when we\nhandle a value of this,",
    "start": "2432620",
    "end": "2440640"
  },
  {
    "text": "it's handled by the union and\nintersection function first. It never actually gets passed\nthrough to this function.",
    "start": "2440640",
    "end": "2447020"
  },
  {
    "start": "2447020",
    "end": "2456560"
  },
  {
    "text": "All right. So let's move on here.",
    "start": "2456560",
    "end": "2463090"
  },
  {
    "text": "And just as I said, well,\nwhat about concatenation? In fact, there\nare contexts where we will want to concatenate\na couple of strings together",
    "start": "2463090",
    "end": "2472670"
  },
  {
    "text": "or something like that. And you know, that's\nfairly supported. I think the results can\nbe the sets themselves.",
    "start": "2472670",
    "end": "2482980"
  },
  {
    "text": "You would have a\nnew special symbol, which is the set itself.",
    "start": "2482980",
    "end": "2488320"
  },
  {
    "text": "You have now different\ncollision functions. So you have union. And then I want a union\nvalues as our intersect,",
    "start": "2488320",
    "end": "2494550"
  },
  {
    "text": "and then union values and\nunion and intersection. So those are your\nfunctions there.",
    "start": "2494550",
    "end": "2499710"
  },
  {
    "text": "And there's actually\na few instances. I think we've already showed one\nof them in one of the examples where we actually do this. So I'm just sort of\nthrowing that in there",
    "start": "2499710",
    "end": "2506070"
  },
  {
    "text": "that concatenation is a\nconcept that we do think about. I don't think we've developed\nthe formalism as richly",
    "start": "2506070",
    "end": "2512090"
  },
  {
    "text": "in a situation where the values\nare simply single values. But we certainly\ncan and do do that.",
    "start": "2512090",
    "end": "2519722"
  },
  {
    "text": "AUDIENCE: Jeremy. JEREMY KEPNER: Yes? AUDIENCE: Third example,\nwas that [INAUDIBLE] for identity instead of union? ",
    "start": "2519722",
    "end": "2526674"
  },
  {
    "text": "[INAUDIBLE] JEREMY KEPNER: This one here? AUDIENCE: No, go up. Get a little bit to the left.",
    "start": "2526675",
    "end": "2532858"
  },
  {
    "text": "The symbol-- [INAUDIBLE]\nwas upside down. AUDIENCE: I have a\nsimilar question.",
    "start": "2532858",
    "end": "2538747"
  },
  {
    "text": "Is the one above it [INAUDIBLE]. JEREMY KEPNER: Yeah. I might have a typo here. I should double check that.",
    "start": "2538747",
    "end": "2544710"
  },
  {
    "text": "Yeah. So v union that. All right, so that should\nbe an intersection.",
    "start": "2544710",
    "end": "2550349"
  },
  {
    "text": "And that should be union. And that should be intersection.",
    "start": "2550350",
    "end": "2556760"
  },
  {
    "text": "And that should be union. So I just got them\nto flop there. So thank you.",
    "start": "2556760",
    "end": "2562410"
  },
  {
    "text": "Full marks to you. We will make that change. ",
    "start": "2562410",
    "end": "2576080"
  },
  {
    "text": "All right. So that one is\nintersection, correct?",
    "start": "2576080",
    "end": "2581335"
  },
  {
    "text": "And this AUDIENCE: [INAUDIBLE].",
    "start": "2581335",
    "end": "2588359"
  },
  {
    "text": "JEREMY KEPNER: --three\nshould be intersection.",
    "start": "2588360",
    "end": "2594235"
  },
  {
    "text": "All right. Very good. We'll check in the SVN. In the next down time, it will\nbe part of your [INAUDIBLE].",
    "start": "2594235",
    "end": "2602770"
  },
  {
    "text": "Moving on. All right. So one of the things\nwe're eventually going to work towards is trying\nto make matrix multiply work",
    "start": "2602770",
    "end": "2608940"
  },
  {
    "text": "in this context. OK. We've already talked\nabout the duality",
    "start": "2608940",
    "end": "2614890"
  },
  {
    "text": "between the fundamental\noperation of grass, which is breadth first search\nand vector matrix multiply.",
    "start": "2614890",
    "end": "2624220"
  },
  {
    "text": "We continue to want to\nbe able to use that. It's a very powerful feature. And what we find is that in\ngraph algorithms, where we're",
    "start": "2624220",
    "end": "2633170"
  },
  {
    "text": "dealing with things on strings\nor other types of operations, that most graph algorithms\ncan be reduced to operations,",
    "start": "2633170",
    "end": "2640511"
  },
  {
    "text": "what are called on semi-rings. So those are generalizations of\nnormal linear algebra, whereby",
    "start": "2640511",
    "end": "2646020"
  },
  {
    "text": "your two core operations here,\nwhat is called the element wise multiply and the\nelement addition operation,",
    "start": "2646020",
    "end": "2654040"
  },
  {
    "text": "are this has the property\nof being associative and distribute over\nthe plus operation.",
    "start": "2654040",
    "end": "2659300"
  },
  {
    "text": "And plus has the\nproperty of being associative and commutative. And examples of this include\nthe traditional matrix multiply",
    "start": "2659300",
    "end": "2665860"
  },
  {
    "text": "plus and multiply,\nmin.+, or max.+.",
    "start": "2665860",
    "end": "2673950"
  },
  {
    "text": "In fact, there's\na whole sub branch of algebra called max plus\nalgebras, which do this.",
    "start": "2673950",
    "end": "2679170"
  },
  {
    "text": "Another one is or.and and\nother types of things. So mathematically, semi-rings\nare certainly well-studied more",
    "start": "2679170",
    "end": "2690660"
  },
  {
    "text": "in the context of specific\nalgebras, like min.+, min+,",
    "start": "2690660",
    "end": "2698240"
  },
  {
    "text": "or max+, or something like that. Here, with the\nassociative arrays, we're dealing with\nyou could be hopping",
    "start": "2698240",
    "end": "2704950"
  },
  {
    "text": "and popping back and forth\nwithin the same expression. You could be moving\nback and forth",
    "start": "2704950",
    "end": "2711070"
  },
  {
    "text": "between these\ndifferent algebras. So I think that's a\nlittle bit different. We're taking sort of a bigger\nview, a more data-centric view.",
    "start": "2711070",
    "end": "2716960"
  },
  {
    "text": "Our data can be of different\nkinds, and then impose upon it different algebras\nas we move forward.",
    "start": "2716960",
    "end": "2724380"
  },
  {
    "text": "And the real theory\nquestions that we're trying to answer here\nis we have this concept of associative arrays,\nwhich is kind of new.",
    "start": "2724380",
    "end": "2732180"
  },
  {
    "text": "We have the traditional\nlinear algebra. And there's going to be\nareas where they overlap.",
    "start": "2732180",
    "end": "2738315"
  },
  {
    "text": "Your ideas, your intuition\nfrom linear algebra, and your intuition\nfrom associative arrays",
    "start": "2738315",
    "end": "2743710"
  },
  {
    "text": "will be very, very\nwell-connected. OK. And there's going to places\nwhere associative arrays",
    "start": "2743710",
    "end": "2752570"
  },
  {
    "text": "give you new properties that you\ndidn't have in linear algebra. And those will allow\nyou to do new things.",
    "start": "2752570",
    "end": "2758530"
  },
  {
    "text": "And there's going to be cases\nwhere your linear algebra intuition is wrong. That is, taking your\nlinear algebra intuition",
    "start": "2758530",
    "end": "2765335"
  },
  {
    "text": "and applying it to\nassociative arrays will lead you into things\nthat won't make sense.",
    "start": "2765335",
    "end": "2772500"
  },
  {
    "text": "And so this is\nkind of what we're trying to give people a sense\nhere, of where they overlap,",
    "start": "2772500",
    "end": "2777651"
  },
  {
    "text": "where you should watch out, and\nwhere there's new properties that you didn't know about that\nyou should maybe take advantage",
    "start": "2777651",
    "end": "2782774"
  },
  {
    "text": "of. The biggest one being\nthe universal conformance",
    "start": "2782774",
    "end": "2787910"
  },
  {
    "text": "of addition and multiplication\nof all associative arrays. So any two associative arrays,\nregardless of their size,",
    "start": "2787910",
    "end": "2795810"
  },
  {
    "text": "can be multiplied and added to\neach other unlike traditional linear algebra, where you\nhave very strict constraints",
    "start": "2795810",
    "end": "2802360"
  },
  {
    "text": "about the dimensions of matrices\nin order for them to be added. And we do use this all the time.",
    "start": "2802360",
    "end": "2809840"
  },
  {
    "text": "We use this all the time,\nessentially almost exactly in the example that\nwe talked about. It was a question that\nwas brought up earlier.",
    "start": "2809840",
    "end": "2816850"
  },
  {
    "text": "We can add a vector\nof three elements and a vector of five\nelements and have something that makes sense.",
    "start": "2816850",
    "end": "2823301"
  },
  {
    "text": "OK. Likewise, we can multiply\na 10 by 12 with a 6 by 14",
    "start": "2823301",
    "end": "2829060"
  },
  {
    "text": "and have something that\nactually makes sense. So that's a very\npowerful concept. And I'd say it's one of the\nmost commonly used features.",
    "start": "2829060",
    "end": "2837920"
  },
  {
    "text": "All right. So we've done the\nbasic definition. Now, we're going\nto kind of probably move a little bit quicker\nhere into the group theory.",
    "start": "2837920",
    "end": "2844210"
  },
  {
    "text": "So the group theory is when\nyou pick various functions. What kind of algebra's\na result of that?",
    "start": "2844210",
    "end": "2850740"
  },
  {
    "text": "So we're going to talk\nabout binary operators, and then get into commutative\nmonoids, semi-rings, and then",
    "start": "2850740",
    "end": "2856790"
  },
  {
    "text": "something we call the feld. So our joke there\nis that so a field",
    "start": "2856790",
    "end": "2862210"
  },
  {
    "text": "is when you do the traditional\nmathematics of linear algebra. You're doing them over the\nreal field or the complex field",
    "start": "2862210",
    "end": "2870150"
  },
  {
    "text": "of numbers. It's a set of numbers with\ncertain defined properties. OK.",
    "start": "2870150",
    "end": "2875680"
  },
  {
    "text": "When we impose this\ncondition that we are doing with strict\ntotally ordered sets,",
    "start": "2875680",
    "end": "2880690"
  },
  {
    "text": "we don't have an\nadditive inverse. There's no way to\nformally subtract",
    "start": "2880690",
    "end": "2886440"
  },
  {
    "text": "two words from each other. We can't have a string\nand a negative string. So we don't get,\nlike, a and minus a,",
    "start": "2886440",
    "end": "2893390"
  },
  {
    "text": "which is part of a field. So we have is feld, which is\na field without an inverse.",
    "start": "2893390",
    "end": "2899539"
  },
  {
    "text": "So mathematicians\nare very funny. And when they do\nthis, they often will drop the i or something\nlike that to make that concept.",
    "start": "2899540",
    "end": "2908510"
  },
  {
    "text": "So we will be\ndoing math over a-- we can have much of the\nproperties of linear algebra.",
    "start": "2908510",
    "end": "2913807"
  },
  {
    "text": "We just have to recognize that\nwe don't have additive inverse. So it's sort of like\nvector spaces over felds.",
    "start": "2913807",
    "end": "2920569"
  },
  {
    "text": "Or sometimes they're\ncalled semi-vectors spaces. You can put semi in\nfront of anything. And it's like it's a little bit\nof this, but minus something.",
    "start": "2920570",
    "end": "2927500"
  },
  {
    "text": "So this is kind of\nour operator roadmap. So you see here, we began\nwith three definitions.",
    "start": "2927500",
    "end": "2936330"
  },
  {
    "text": "We will have narrowed it down\nto 200 operators of interest of those nice collision\nfunctions and union functions.",
    "start": "2936330",
    "end": "2943540"
  },
  {
    "text": "There's about 200\ncombinations that work well. We will find that 18 of those\noperators are associative.",
    "start": "2943540",
    "end": "2951410"
  },
  {
    "text": "So not associative in\nterms of associative array, but associative in terms of\nthe formal mathematical concept",
    "start": "2951410",
    "end": "2958776"
  },
  {
    "text": "of associativity.  And so those form what\nare called semigroups.",
    "start": "2958777",
    "end": "2965930"
  },
  {
    "text": "14 of them are\ncommutative, which means they are Abelian semigroups.",
    "start": "2965930",
    "end": "2971839"
  },
  {
    "text": "Commutativity, that\njust means that you can",
    "start": "2971840",
    "end": "2976960"
  },
  {
    "text": "switch the order of operations. a plus b is the\nsame as b plus a.",
    "start": "2976960",
    "end": "2982089"
  },
  {
    "text": "Not something that is\na strict requirement. But gosh, it's sure\nnice to have to not have to be like oh, no,\nI switched the order.",
    "start": "2982090",
    "end": "2989650"
  },
  {
    "text": "And now the answer is different. So traditional matrix\nmultiply is like that, right?",
    "start": "2989650",
    "end": "2995190"
  },
  {
    "text": "a times b is not the\nsame thing as b times a. And we will have that as well. But commutativity\nis really nice.",
    "start": "2995190",
    "end": "3002480"
  },
  {
    "text": "We then take these 14\noperations and explore all their possible pairs.",
    "start": "3002480",
    "end": "3007800"
  },
  {
    "text": "There's 196 of them. We look at which one\nof them distribute. There's 74 that distribute,\nso they form semirings.",
    "start": "3007800",
    "end": "3014609"
  },
  {
    "text": "We then look to see if we have\nan identity and an annihilator.",
    "start": "3014610",
    "end": "3020190"
  },
  {
    "text": "Some of our special\nsymbols, can they perform that role in which\ncase they can form a feld?",
    "start": "3020190",
    "end": "3027450"
  },
  {
    "text": "And then we can\ncreate, essentially, vector semi-spaces or vector\nspaces over these felds.",
    "start": "3027450",
    "end": "3033010"
  },
  {
    "text": "And we'll have about 18 of\nthem when we're all done. And the good thing\nis when you get all done with this, all\nthe ones that you like",
    "start": "3033010",
    "end": "3038700"
  },
  {
    "text": "are still in the game. And a few of the ones you might\nlike, some of my favorites,",
    "start": "3038700",
    "end": "3046000"
  },
  {
    "text": "they don't get as far down\nthis path as you want. But then you have\nthese properties. And you're like, OK, I have\nvector space properties",
    "start": "3046000",
    "end": "3052950"
  },
  {
    "text": "and other types of things. And I'm sure some of you\nwill find issues or comments",
    "start": "3052950",
    "end": "3059119"
  },
  {
    "text": "or criticisms that we haven't\nwritten this up formally in journals. I've been desperately trying\nto hire abstract algebraists",
    "start": "3059120",
    "end": "3066515"
  },
  {
    "text": "as summer students and have\nnot been successful so far. So if you know any\nabstract algebraists that",
    "start": "3066515",
    "end": "3071900"
  },
  {
    "text": "would like to work\non this, we would be happy to pay them to\nhelp us work on this.",
    "start": "3071900",
    "end": "3078510"
  },
  {
    "text": "If we extend our\ndefinition of values to include sets, ie, to\ninclude concatenation,",
    "start": "3078510",
    "end": "3084850"
  },
  {
    "text": "this is essentially\nwhat it does. It adds four functions here. They actually make it through\nall these operations here.",
    "start": "3084850",
    "end": "3091020"
  },
  {
    "text": "And they basically\nkeep on going. But then they fall away\nhere when we try and get to this final feld step.",
    "start": "3091020",
    "end": "3098820"
  },
  {
    "text": "But you know, this is still\na very useful space to be in.",
    "start": "3098820",
    "end": "3104460"
  },
  {
    "text": "All right. So let me explain\na little bit of how we sort of navigate this space.",
    "start": "3104460",
    "end": "3110690"
  },
  {
    "text": "So if we can limit ourselves to\nspecial function combinations that are associative and\ncommutative-- so just remember,",
    "start": "3110690",
    "end": "3117750"
  },
  {
    "text": "associative just means you can\ngroup your parentheses however you want.",
    "start": "3117750",
    "end": "3124100"
  },
  {
    "text": "I always have to look it up. Never once been\nlike associative-- I mean, I don't know.",
    "start": "3124100",
    "end": "3129150"
  },
  {
    "text": "It's never been intuitive to me. But that's the grouping\nof parentheses. ",
    "start": "3129150",
    "end": "3135270"
  },
  {
    "text": "Commutativity just\nmeans that you can flip. So these are our functions. So these are all the 18 here.",
    "start": "3135270",
    "end": "3143510"
  },
  {
    "text": "And then the grade-- one's\ngrade out of the ones you lose, because of the commutativity. So basically this\nfunction, which",
    "start": "3143510",
    "end": "3150130"
  },
  {
    "text": "is just left, which just\nsays return the left value in all circumstances,\nwell, obviously, that's",
    "start": "3150130",
    "end": "3156130"
  },
  {
    "text": "not commutative. And quite frankly,\nleft and right are sort of silly functions.",
    "start": "3156130",
    "end": "3162440"
  },
  {
    "text": "You Sometimes it almost\nis essentially a no op. If you knew you\nwant the left value,",
    "start": "3162440",
    "end": "3168860"
  },
  {
    "text": "you just take the left\nvalue and move on. So that doesn't\nreally-- so then we're",
    "start": "3168860",
    "end": "3174990"
  },
  {
    "text": "left with a lot of ones we\nlike, essentially union max. So basically, take the\nmax value, union min.",
    "start": "3174990",
    "end": "3182550"
  },
  {
    "text": "I call this the intersection\ndelta function just return. It only gives you an answer\nif the values are the same.",
    "start": "3182550",
    "end": "3190330"
  },
  {
    "text": "This is essentially the union. It's sort of like\nthe x or function. If there's a collision,\nblow it away.",
    "start": "3190330",
    "end": "3199180"
  },
  {
    "text": "And then there are\nvery sort of other kind of more unusual\ncombinations here dealing with the special functions.",
    "start": "3199180",
    "end": "3207569"
  },
  {
    "text": "We tend to kind of\nreally live mostly here. These tend to be\nthe ones that really are the ones you use a lot.",
    "start": "3207570",
    "end": "3213540"
  },
  {
    "text": "I haven't really\nused these too much. ",
    "start": "3213540",
    "end": "3219591"
  },
  {
    "text": "All right. And so we're left with\nthese, what are called, Abelian semigroups are these\n14 highlighted ones here.",
    "start": "3219591",
    "end": "3225435"
  },
  {
    "text": "AUDIENCE: So Jeremy, I feel\nI'm going to get lost here. What does Abelian mean? JEREMY KEPNER: So Abelian is a\nsemigroup that is commutative.",
    "start": "3225435",
    "end": "3233680"
  },
  {
    "text": "That's all it means. So basically, it means\nyou have associativity. And then it's Abelian if\nyou add commutativity to it.",
    "start": "3233680",
    "end": "3242240"
  },
  {
    "text": "So any sets of numbers that\nobey grouping operations and are commutative is Abelian.",
    "start": "3242240",
    "end": "3248400"
  },
  {
    "text": "I mean, I think\nAbel did a lot more that he didn't need to get\nhis name associated with that. It could have just been called\ncomm-- it's sometimes just",
    "start": "3248400",
    "end": "3255565"
  },
  {
    "text": "called a commutative semigroup. So you know, it's\nlucky when you get your name added to some\nreally trivial operation.",
    "start": "3255565",
    "end": "3262590"
  },
  {
    "text": "I mean, he did a lot of things. But they threw him on here. And in fact, in group theory,\nthey complain about this.",
    "start": "3262590",
    "end": "3268210"
  },
  {
    "text": "And there are numerous\nrants about how they've named all their\ngroups after people, and they don't\ntell you anything.",
    "start": "3268210",
    "end": "3273360"
  },
  {
    "text": "As opposed to other branches of\nmathematics, who would simply just call this a commutative\nsemigroup or just a commutative",
    "start": "3273360",
    "end": "3282330"
  },
  {
    "text": "associative group. That might be even more-- and\nof all the different properties,",
    "start": "3282330",
    "end": "3290177"
  },
  {
    "text": "most of them you can combine\nin whatever you want. There's almost an\ninfinite number of groups. So there's certain ones\nthat are most useful.",
    "start": "3290177",
    "end": "3298420"
  },
  {
    "text": "Let's see here. So now, we start-- AUDIENCE: Along those\nlines, what's the-- and I'm sorry if\nyou already said this-- distinction between\na semigroup and a group?",
    "start": "3298420",
    "end": "3306780"
  },
  {
    "text": "JEREMY KEPNER: A\ngroup and a semigroup. I want to say-- oh, it's an\nAbelian group without inverses.",
    "start": "3306780",
    "end": "3317401"
  },
  {
    "text": "So a semigroup there. So these are all Abelian\nsemigroup or Abelian groups without inverses or\ncommutative associative groups",
    "start": "3317401",
    "end": "3324869"
  },
  {
    "text": "without inverses. So you see the problem.",
    "start": "3324870",
    "end": "3330510"
  },
  {
    "text": "And so I guess, he\nstudied them a lot. So he got his name\nassociated with them and proved their\nproperties and stuff.",
    "start": "3330510",
    "end": "3336240"
  },
  {
    "text": "So we have 14 of those\nthat form 196 pairs.",
    "start": "3336240",
    "end": "3341550"
  },
  {
    "text": "So these will begin\nto-- so we want to look at the ones\nthat are distributive.",
    "start": "3341550",
    "end": "3346850"
  },
  {
    "text": "So that basically means we\nassign one of those operators to be the addition\noperation, the other to be",
    "start": "3346850",
    "end": "3353369"
  },
  {
    "text": "the multiplication operation. And we need to show\nthat it is distributive.",
    "start": "3353370",
    "end": "3359450"
  },
  {
    "text": "And of those 196, 74 operator\npairs are distributive.",
    "start": "3359450",
    "end": "3364800"
  },
  {
    "text": "These are called semirings. Or they could be called rings. So a semiring is a ring\nwithout an inverse, so rings",
    "start": "3364800",
    "end": "3370100"
  },
  {
    "text": "without inverses and\nwithout identity elements. And if you look at the\nvarious definitions,",
    "start": "3370100",
    "end": "3375710"
  },
  {
    "text": "I mean, there's the\nWikipedia definition, which mathematicians will\nsay is that's not really a true definition.",
    "start": "3375710",
    "end": "3380770"
  },
  {
    "text": "There's a Wolfram\nmath rule definition, which is more rigorous. ",
    "start": "3380770",
    "end": "3386740"
  },
  {
    "text": "And they often\ndisagree on this stuff. I tend to be like if\nWikipedia says is true,",
    "start": "3386740",
    "end": "3393280"
  },
  {
    "text": "then most people\non the planet Earth believe that that\nis what is true. And so therefore, you should\nbe aware that is the truth",
    "start": "3393280",
    "end": "3400910"
  },
  {
    "text": "that most people will believe. So I don't know which one\nwe've chosen here, whether it's",
    "start": "3400910",
    "end": "3406220"
  },
  {
    "text": "the Wikipedia or the Wolfram. There's also various\nencyclopedias that define this stuff, too. AUDIENCE: Jeremy?",
    "start": "3406220",
    "end": "3411295"
  },
  {
    "text": "JEREMY KEPNER: Yes. AUDIENCE: Can you define ring? JEREMY KEPNER: Define what? AUDIENCE: Ring. JEREMY KEPNER: Ring?",
    "start": "3411295",
    "end": "3416831"
  },
  {
    "text": "AUDIENCE: Yeah. JEREMY KEPNER: Oh, uh,\nwell, a ring would be this.",
    "start": "3416831",
    "end": "3427250"
  },
  {
    "text": "And it would have inverses\nand identity elements. So it's basically\nsomething that satisfies",
    "start": "3427250",
    "end": "3433300"
  },
  {
    "text": "that's distributive and has\ninverses and identity elements.",
    "start": "3433300",
    "end": "3439920"
  },
  {
    "text": " But if you type ring in the\nWiki-- and I should say,",
    "start": "3439920",
    "end": "3448859"
  },
  {
    "text": "the great thing about Wikipedia\nis like all the definitions are linked. So after seven or eight clicks,\nit kind of all holds together.",
    "start": "3448860",
    "end": "3455780"
  },
  {
    "text": "So it's pretty nice. And Wolfram is the same\nway, just enough knowledge",
    "start": "3455780",
    "end": "3461690"
  },
  {
    "text": "to be dangerous. The internet's\nyour friend, right?",
    "start": "3461690",
    "end": "3469630"
  },
  {
    "text": "So moving on here. And this is something that's\nless important, but kind of for completeness if we're\ngoing to head towards vector",
    "start": "3469630",
    "end": "3475945"
  },
  {
    "text": "space, we need to address,\nwhich is the concept of identity elements. ",
    "start": "3475945",
    "end": "3482890"
  },
  {
    "text": "So zero is the\nadditive identity. When you think of normal math,\nyou add zero to something,",
    "start": "3482890",
    "end": "3488450"
  },
  {
    "text": "it doesn't change it. And the choices for\nadditive identity elements,",
    "start": "3488450",
    "end": "3493810"
  },
  {
    "text": "we have three special symbols,\nand we could pick them. We have the multiplicative\nidentity, which is 1,",
    "start": "3493810",
    "end": "3499960"
  },
  {
    "text": "and the multiplicative\nannihilator. So of the choices here,\nwe have 12 semirings",
    "start": "3499960",
    "end": "3506900"
  },
  {
    "text": "with the appropriate\nzeros and ones. We have four that actually\nhave two combinations.",
    "start": "3506900",
    "end": "3513130"
  },
  {
    "text": "And we have 16 total\noperations-- of the 16, there are 6 operators. These are different operators.",
    "start": "3513130",
    "end": "3519310"
  },
  {
    "text": "And again, we call these\nfelds without inverses. I'll get into it\na little bit more. So for instance-- and we\ncan skip that for now.",
    "start": "3519310",
    "end": "3531686"
  },
  {
    "text": "So just a better way to\nlook at that is these are our operator pairs. OK.",
    "start": "3531686",
    "end": "3536900"
  },
  {
    "text": "And we wanted to see\nwhich one of the them sort of form these felds.",
    "start": "3536900",
    "end": "3544270"
  },
  {
    "text": "So the ones that distribute\nare marked with a D here. The ones that\ndistribute and have a 0, 1 operator pair that works,\nare shown in the square here.",
    "start": "3544270",
    "end": "3554790"
  },
  {
    "text": "And some of them have two. So if I pair [INAUDIBLE]\nplus union min",
    "start": "3554790",
    "end": "3560750"
  },
  {
    "text": "and multiply a intersection\nmin, and I define 0",
    "start": "3560750",
    "end": "3566900"
  },
  {
    "text": "to be the empty value,\nand 1 to be plus infinity,",
    "start": "3566900",
    "end": "3573680"
  },
  {
    "text": "then I can create a feld,\nessentially, out of that.",
    "start": "3573680",
    "end": "3581670"
  },
  {
    "text": "I had a lot of debate with\nsomeone about this one, whether I can have plus\ninfinity be the 0 element",
    "start": "3581670",
    "end": "3588990"
  },
  {
    "text": "and have it be less\nthan the 1 element. Was there a requirement that\n0 actually be less than 1",
    "start": "3588990",
    "end": "3595580"
  },
  {
    "text": "in this definition?  When I talked to\nmathematicians, they're like, eh, it's kind of what you\nwant, then you make it that.",
    "start": "3595580",
    "end": "3604510"
  },
  {
    "text": "So this just shows\nthe full space of things that are possible.",
    "start": "3604510",
    "end": "3609740"
  },
  {
    "text": "If we go back to our\nconcatenation operators here, so these were our four\nconcatenation operators",
    "start": "3609740",
    "end": "3616180"
  },
  {
    "text": "and our collision functions. And this shows you what\nthat set looks like.",
    "start": "3616180",
    "end": "3622760"
  },
  {
    "text": "So these are the four\nby four pairs here. All operators, they\nall distribute.",
    "start": "3622760",
    "end": "3628630"
  },
  {
    "text": "And 16 of these form semirings. Because you're able to\nconstruct these various zeroes.",
    "start": "3628630",
    "end": "3634240"
  },
  {
    "text": "And this isn't, like, rigorous. I mean, I might have messed one\nup or a few up here or there",
    "start": "3634240",
    "end": "3639490"
  },
  {
    "text": "or something like that. But this just kind\nof gives you a sense of the space that\nwe're working on.",
    "start": "3639490",
    "end": "3644604"
  },
  {
    "text": "AUDIENCE: You made some typos on\nthat table [? you ?] fix later. JEREMY KEPNER: Probably. Probably. ",
    "start": "3644604",
    "end": "3652359"
  },
  {
    "text": "Now, I'm going to kind of\nreally move it forward here. So we get into vector spaces. So we can have associative\narray vector addition.",
    "start": "3652360",
    "end": "3662880"
  },
  {
    "text": "Again, all associative\narrays are conformant. We have the concept of\nscalar multiplication,",
    "start": "3662880",
    "end": "3669900"
  },
  {
    "text": "which is essentially\napplied to all values. So one of the things\nI really struggle",
    "start": "3669900",
    "end": "3675380"
  },
  {
    "text": "with-- so scalar multiplication\nkind of makes sense, right?",
    "start": "3675380",
    "end": "3681099"
  },
  {
    "text": "If I have an associative array\nand I multiply it by a scalar, I can imagine just applying\nthat in an intersection",
    "start": "3681100",
    "end": "3687980"
  },
  {
    "text": "sense only to the keys\nare defined by one.",
    "start": "3687980",
    "end": "3693980"
  },
  {
    "text": "Scalar addition, though,\nis very difficult.",
    "start": "3693980",
    "end": "3700700"
  },
  {
    "text": "If I have a scalar plus\nan associative array, does it only apply to the keys? Or is a scalar really\nthe associative",
    "start": "3700700",
    "end": "3708079"
  },
  {
    "text": "array that's defined\neverywhere over all things? So it's infinite. So that's something\nI struggle with. So when you ask why is scalar\naddition not supported in D4M,",
    "start": "3708080",
    "end": "3717250"
  },
  {
    "text": "it's because I don't know\nwhat it's supposed to mean. And you can easily just\npop out the values,",
    "start": "3717250",
    "end": "3723481"
  },
  {
    "text": "add whatever you want,\nstuff them back in, and can be on your way. And then your safe. ",
    "start": "3723481",
    "end": "3730340"
  },
  {
    "text": "So in the vector\nspace that we form, it meets the plus requirements. It commutes. It's associative.",
    "start": "3730340",
    "end": "3736030"
  },
  {
    "text": "We have an identity. But we have no inverse. So we have to be careful. That's why we don't have add. And a vector space, it meets\nthe scalar requirements.",
    "start": "3736030",
    "end": "3743480"
  },
  {
    "text": "So all associative\narray operator pairs that yield felds,\nalso result in vector spaces",
    "start": "3743480",
    "end": "3748559"
  },
  {
    "text": "without inverse spaces. Maybe we call these vectors\nsemispaces, I don't know,",
    "start": "3748560",
    "end": "3753630"
  },
  {
    "text": "or vector spaces over a\nfeld or something like that. What kind of properties here? Well, we have scale identities.",
    "start": "3753630",
    "end": "3760150"
  },
  {
    "text": "That's great. You could create subspaces. That makes sense, too. The concept of a span,\nyes, you can definitely",
    "start": "3760150",
    "end": "3766359"
  },
  {
    "text": "do concepts of spans. Does span equal a subspace? So this is a big\nquestion in vector space",
    "start": "3766360",
    "end": "3772880"
  },
  {
    "text": "theory, spans on subspaces. Not sure.",
    "start": "3772880",
    "end": "3778790"
  },
  {
    "text": "Linear dependence. Is there a nontrivial\nlinear combination of vectors equal to\nthe plus identity?",
    "start": "3778790",
    "end": "3787750"
  },
  {
    "text": "You really can't do this\nwithout an additive inverse. And so that becomes\na little bit-- so we really kind of need to\nredefine linear independence,",
    "start": "3787750",
    "end": "3795870"
  },
  {
    "text": "which we can do. But there's a lot of the\nproofs of linear independence and dependence that rely on\nthe existence of inverses.",
    "start": "3795870",
    "end": "3802970"
  },
  {
    "text": "And you probably could\ncircle your way around that. AUDIENCE: Question. Are you just missing\nthe additive inverse",
    "start": "3802970",
    "end": "3810309"
  },
  {
    "text": "or both the additive\nand the [INAUDIBLE]? JEREMY KEPNER: Both. Both, yeah.",
    "start": "3810310",
    "end": "3816310"
  },
  {
    "text": "Yeah.  So one of the things\nis considering",
    "start": "3816310",
    "end": "3822350"
  },
  {
    "text": "a linear combination of two\nassociative array vectors. Under what conditions do\nthey create a unique result?",
    "start": "3822350",
    "end": "3831080"
  },
  {
    "text": "So this really depends\non what you choose. So for instance, if we\nhave a vector A1 and A2,",
    "start": "3831080",
    "end": "3838020"
  },
  {
    "text": "when we multiply it by\ncoefficients A1 and A2, and we use these as our\nplus and our multiply,",
    "start": "3838020",
    "end": "3843480"
  },
  {
    "text": "and this is our 0 and 1, where\nare A1 uniquely determined?",
    "start": "3843480",
    "end": "3848920"
  },
  {
    "text": "And so for instance, if\nI pick, in this case, our canonical identity\nvectors, which is A1",
    "start": "3848920",
    "end": "3855280"
  },
  {
    "text": "is equal to infinity\nand minus infinity here,",
    "start": "3855280",
    "end": "3860650"
  },
  {
    "text": "then we find that we can\ncover the space very nicely.",
    "start": "3860650",
    "end": "3865829"
  },
  {
    "text": "If we do it the other, we can't. A better way to view that\nis in the drawing here. So here's my whole space\nof coefficients A1 and A2.",
    "start": "3865830",
    "end": "3873930"
  },
  {
    "text": "And we see that A1 and A2\nuniquely define a result with these basis vectors.",
    "start": "3873930",
    "end": "3879920"
  },
  {
    "text": "And A1 and A2 are completely\ndegenerate with these basis vectors. So depending on the kinds\nof basis vectors you have,",
    "start": "3879920",
    "end": "3887630"
  },
  {
    "text": "you can create unique\nstuff or not unique stuff. You can give yourselves\nactual values here.",
    "start": "3887630",
    "end": "3894440"
  },
  {
    "text": "Basically, if A1 is\njust equal to this value and A2 is equal to\nthis value, this",
    "start": "3894440",
    "end": "3900970"
  },
  {
    "text": "shows you what that looks like. There's places\nwhere it's unique. There's places where\nthey're the same. And there's places\nwhere one is unique,",
    "start": "3900970",
    "end": "3907590"
  },
  {
    "text": "but the other is not unique. So again, you can construct\nusing associative arrays",
    "start": "3907590",
    "end": "3915360"
  },
  {
    "text": "as basis vectors, a\nvery rich set of things. And the same thing goes\nwith multivalued vectors.",
    "start": "3915360",
    "end": "3921370"
  },
  {
    "text": "Again, different\ntypes of spaces here. We really need to\nkind of work this out. If anybody's\ninterested, we're very",
    "start": "3921370",
    "end": "3927089"
  },
  {
    "text": "interested in having people\nhelp us work this stuff out.  Which of these\noperations make sense?",
    "start": "3927090",
    "end": "3935210"
  },
  {
    "text": "Transpose makes total sense. Transposing of associative\narrays makes total sense.",
    "start": "3935210",
    "end": "3940660"
  },
  {
    "text": "And it's a very efficient\noperation, by the way, in D4M. You can do transposes\nvery efficiently.",
    "start": "3940660",
    "end": "3946360"
  },
  {
    "text": "It works out very nicely. Special matrices, submatrices,\nzero matrices, square matrices,",
    "start": "3946360",
    "end": "3955250"
  },
  {
    "text": "diagonal matrices, yes. Although, diagonal matrices\nare a little bit tricky.",
    "start": "3955250",
    "end": "3961980"
  },
  {
    "text": "Upper and lower triangular,\nyes, you can kind of do this. Skew symmetric, no.",
    "start": "3961980",
    "end": "3967059"
  },
  {
    "text": "Hermitian, not really. Elementary and row\ncolumn, sort of. Row column equivalence, sort\nof, under certain conditions.",
    "start": "3967060",
    "end": "3976027"
  },
  {
    "text": "These are all things you\ncan do in linear algebra. And sometimes you can do\nthem with associative arrays and sometimes you can't.",
    "start": "3976027",
    "end": "3981810"
  },
  {
    "text": "You have to think about them. Matrix multiply is sort\nof our crown jewel.",
    "start": "3981810",
    "end": "3988650"
  },
  {
    "text": "Always conformant-- can multiply\nany sizes whenever you want. ",
    "start": "3988650",
    "end": "3995430"
  },
  {
    "text": "There's two ways to\nthink about this. You can make your head hurt\na little bit when you start",
    "start": "3995430",
    "end": "4001020"
  },
  {
    "text": "dealing with the no elements. When does the union\noperator get applied?",
    "start": "4001020",
    "end": "4006120"
  },
  {
    "text": "And when the-- so when\nyou do computation, there's two ways to\nformulate a matrix multiply.",
    "start": "4006120",
    "end": "4012010"
  },
  {
    "text": "There's the inner\nproduct formulation, which is typically what\npeople use when they actually program it up.",
    "start": "4012010",
    "end": "4017430"
  },
  {
    "text": "Because it tends to\nbe more efficient. That's basically you take\neach row and each column, you do an inner product,\nand then do the result. OK.",
    "start": "4017430",
    "end": "4026130"
  },
  {
    "text": "Mathematically, from\na theory perspective, you get yourself in\nless trouble if you think in terms of the outer\nproduct formulation, which",
    "start": "4026130",
    "end": "4033349"
  },
  {
    "text": "is basically you take\neach row and vector, you do the outer product\nto form a matrix,",
    "start": "4033350",
    "end": "4040010"
  },
  {
    "text": "and then you take all of\nthese, and then combine them all together with the operation.",
    "start": "4040010",
    "end": "4046570"
  },
  {
    "text": "And that, theoretically,\nactually keeps you sane here. And that's the way to think\nabout it mathematically.",
    "start": "4046570",
    "end": "4054510"
  },
  {
    "text": "Variety of matrix\nmultiplies examples, I won't go into them here. Obviously, they depend\nheavily on what our collision",
    "start": "4054510",
    "end": "4060260"
  },
  {
    "text": "function, g, is here. It gives you different values\nand different behaviors. ",
    "start": "4060260",
    "end": "4067950"
  },
  {
    "text": "The identity element, maybe a\nleft identity, right identity.",
    "start": "4067950",
    "end": "4076800"
  },
  {
    "text": "In some instances,\nit seems to be OK. But the identity [INAUDIBLE]\nis a little bit tricky.",
    "start": "4076800",
    "end": "4084540"
  },
  {
    "text": "Inverses, boy, is it hard to\nconstruct inverses when you don't have underlying inverses.",
    "start": "4084540",
    "end": "4092210"
  },
  {
    "text": "I It's just really tricky. And so, probably are not\ngoing to get anything",
    "start": "4092210",
    "end": "4098125"
  },
  {
    "text": "that looks like an inverse. You can do Eigenvectors in\ncertain restrictive cases",
    "start": "4098125",
    "end": "4104270"
  },
  {
    "text": "sort of. And there are interesting\npapers written about this. But it's only on very--\nthe row and column keys",
    "start": "4104270",
    "end": "4110219"
  },
  {
    "text": "need to be the same and\nstuff and so, you know. One thing I really would like\nto explore is the pseudoinverse.",
    "start": "4110220",
    "end": "4117125"
  },
  {
    "text": "So pseudoinverse A plus\nsatisfies these properties. And I actually think\nthat will are probably",
    "start": "4117125",
    "end": "4123649"
  },
  {
    "text": "be in pretty good shape\nfor pseudoinverse. And the pseudoinverse\nis what you need to solve the\nleast-squares problem.",
    "start": "4123649",
    "end": "4129299"
  },
  {
    "text": "And I think solving the\nleast-squares problem is actually something we might\nreally be interested in doing in some of our problems. So I do need to work\nthis out if people would",
    "start": "4129300",
    "end": "4136210"
  },
  {
    "text": "like to explore this with me. We have a whole set of theorems\nthat we'd like to prove.",
    "start": "4136210",
    "end": "4142330"
  },
  {
    "text": "Spanning theorems, linear\ndependence, identities, inverses, determinants,\npseudoinverses, Eigenvectors,",
    "start": "4142330",
    "end": "4147600"
  },
  {
    "text": "convolutions, for which\nof these do these apply? A lot of good math that\ncould be done here.",
    "start": "4147600",
    "end": "4154309"
  },
  {
    "text": "Call to arms for those people\nwho are interested in this type thing. So just to summarize,\nyou know, the algebra",
    "start": "4154309",
    "end": "4160565"
  },
  {
    "text": "of associative\narrays provides us this mathematical foundation. I think I've have tried to\nshow you the core parts that are really well solid and\nexpand that to the points here.",
    "start": "4160565",
    "end": "4167744"
  },
  {
    "text": "You can see where it is,\nwhile we don't really know exactly what should\nbe happening here, and give you a little bit a\nlogic behind how we do this.",
    "start": "4167744",
    "end": "4177359"
  },
  {
    "text": "A small number of\nassumption really yields a rich\nmathematical environment. And so I have a\nshort code example.",
    "start": "4177359",
    "end": "4184459"
  },
  {
    "text": " It's not really teaching\nyou anything new.",
    "start": "4184459",
    "end": "4189740"
  },
  {
    "text": "It's just to show you that I\ntested all these properties using D4M, which was nice\nand really in a very kind",
    "start": "4189740",
    "end": "4199110"
  },
  {
    "text": "of spreadsheet kind of style. And so I'm just going\nto show you that. There's really just one example. It takes a few seconds to run.",
    "start": "4199110",
    "end": "4207590"
  },
  {
    "text": "And then the\nassignments-- so these are in this part\nin the directory--",
    "start": "4207590",
    "end": "4221590"
  },
  {
    "text": "And then the assignment,\nshould you so do it-- if you didn't do the\nlast assignment, well, you're going to need to do\nthat to now do this assignment.",
    "start": "4221590",
    "end": "4228800"
  },
  {
    "text": "So basically, for those of you\nwho did the last assignment-- array of a drawing and\nlooking at the edges",
    "start": "4228800",
    "end": "4236510"
  },
  {
    "text": "and stuff like that. Now, I want you think about\nthat associative array. And think about which\nkind of these operations",
    "start": "4236510",
    "end": "4243090"
  },
  {
    "text": "would make sense if you were\nto try and add them or multiply them or whatever. Just explore that a little bit.",
    "start": "4243090",
    "end": "4250550"
  },
  {
    "text": "And just write up, OK, I\nthink these kind of operations would make sense here. You know, addition would\nmake sense if it's union",
    "start": "4250550",
    "end": "4258180"
  },
  {
    "text": "and the collision function is\nthis or something like that. You'll have to think about\nwhat your values are.",
    "start": "4258180",
    "end": "4264900"
  },
  {
    "text": "It could just be your values\nare just 1, something like that. You might be like, oh, my values\nare 0,1 and I want 1 plus 1",
    "start": "4264900",
    "end": "4272375"
  },
  {
    "text": "to equal 0. So you might have an \"or\" or\n\"x or\" operation or something like that. So just sort of think about\nwhat your example was.",
    "start": "4272375",
    "end": "4280090"
  },
  {
    "text": "And think about these\nideas a little bit. And just write a few sentences\non kind of what that means. ",
    "start": "4280090",
    "end": "4286990"
  },
  {
    "text": "The last slide here is-- we\ndon't really get this question. But if you want to compare\nwhat the difference between associative rays\nare and the algebra defined",
    "start": "4286990",
    "end": "4294730"
  },
  {
    "text": "by Codd that sort of\nis the basis of SQL, there's this little\ntable that describes some of the differences there.",
    "start": "4294730",
    "end": "4301066"
  },
  {
    "start": "4301066",
    "end": "4301565"
  }
]