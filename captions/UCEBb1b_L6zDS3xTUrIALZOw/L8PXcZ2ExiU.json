[
  {
    "text": "[SQUEAKING]  [RUSTLING] [CLICKING]",
    "start": "0",
    "end": "7350"
  },
  {
    "start": "7350",
    "end": "12740"
  },
  {
    "text": "YAEL KALAI: Today,\nwe're going to continue. We're going to talk\nabout a new notion, a really, really interesting\nnotion, in my opinion,",
    "start": "12740",
    "end": "20270"
  },
  {
    "text": "called probabilistically\ncheckable proofs. I'll explain what it is. So we're going to\ndefine this notion,",
    "start": "20270",
    "end": "25640"
  },
  {
    "text": "and we're going to construct\nit from the GKR protocol. So you'll kind of see not only\nthe definition, but you'll",
    "start": "25640",
    "end": "33530"
  },
  {
    "text": "be able, after this class-- the hope is that you'll be\nable to construct a PCP. And if you need to construct\na [? visual ?] proof,",
    "start": "33530",
    "end": "39750"
  },
  {
    "text": "you'll be able to do that. So that's going to be the\nfirst part of today's lecture. And the second part\nof today's lecture",
    "start": "39750",
    "end": "46370"
  },
  {
    "text": "is actually going to be\nthe first time we actually use cryptography. So, so far, this class has not\nbeen at all about cryptography.",
    "start": "46370",
    "end": "54225"
  },
  {
    "text": "Everything was information. It was actually\ncomplexity theory. But today is going to be\nthe first time we're going",
    "start": "54225",
    "end": "59750"
  },
  {
    "text": "to move into cryptography. And as we'll talk,\nwe'll see that",
    "start": "59750",
    "end": "66260"
  },
  {
    "text": "doing this information,\ntheoretic proofs where you say, OK, no prover can give you a\nfalse proof, that is limiting.",
    "start": "66260",
    "end": "75700"
  },
  {
    "text": "OK, we can't do everything\nwe want using this notion. And therefore, we're going to go\ninto a new notion of soundness,",
    "start": "75700",
    "end": "84310"
  },
  {
    "text": "which is what we call arguments\nor computational soundness. And we're going to relax\nthe prover and say,",
    "start": "84310",
    "end": "91590"
  },
  {
    "text": "an all-power proof, an\nall-powerful prover, may be able to cheat, but the\nguarantee we give-- hey, Tony--",
    "start": "91590",
    "end": "99070"
  },
  {
    "text": "is that a computationally\nbounded prover cannot cheat. That's going to be\nthe guarantee we get.",
    "start": "99070",
    "end": "105610"
  },
  {
    "text": "And we'll see, once we relax\nthe soundness requirement to a requirement that's\nonly computational sound,",
    "start": "105610",
    "end": "111490"
  },
  {
    "text": "then we'll be able\nto get a lot more, and the life will\nkind of open for us,",
    "start": "111490",
    "end": "117250"
  },
  {
    "text": "and we're going to have a lot\nof new kind of constructions and things that we were unable\nto do information theoretically.",
    "start": "117250",
    "end": "124710"
  },
  {
    "text": "So this is the plan for today. Questions before we start? I haven't seen you guys in a\nwhile, so it's good to see you.",
    "start": "124710",
    "end": "133240"
  },
  {
    "text": "A lot of things changed since\nthe last time I've seen you. I'm probably going to be a bit\ndistracted today, so I'm sorry.",
    "start": "133240",
    "end": "139140"
  },
  {
    "text": "OK. OK, let's start. So what are-- no questions?",
    "start": "139140",
    "end": "144490"
  },
  {
    "text": "PL/ So let's start with PCPs. What are Probabilistically\nCheckable Proofs?",
    "start": "144490",
    "end": "149940"
  },
  {
    "text": "So the idea of probabilistically\ncheckable proofs is to take a proof, like a\nclassical proof-- think of NP.",
    "start": "149940",
    "end": "156840"
  },
  {
    "text": "In NP, we have an\ninstance x and a witness. This witness is like a proof\nfor x being in the language.",
    "start": "156840",
    "end": "166550"
  },
  {
    "text": "To verify this proof, you\nneed to read the entire thing and do some computation, like\nthis verification circuit",
    "start": "166550",
    "end": "174629"
  },
  {
    "text": "that checks that x and\nw is in the relation. There's a circuit\nthat checks this.",
    "start": "174630",
    "end": "180125"
  },
  {
    "text": "OK, what is the idea of a\nprobabilistically checkable proof? The idea here, what we\nwant, is to take this proof",
    "start": "180125",
    "end": "187570"
  },
  {
    "text": "and convert it into a new\nproof and maybe larger actually than the\noriginal proof.",
    "start": "187570",
    "end": "193490"
  },
  {
    "text": "So maybe the original\nproof was of size m. Let's say the\ninstance of size n.",
    "start": "193490",
    "end": "198900"
  },
  {
    "text": "This may be of size much bigger. Still, we want it to be\npolynomial in n and m.",
    "start": "198900",
    "end": "204420"
  },
  {
    "text": " So we just made it bigger. So what's good about it?",
    "start": "204420",
    "end": "210740"
  },
  {
    "text": "So what's nice\nabout this proof is, the idea is, you don't\nactually have to read all of it to check it.",
    "start": "210740",
    "end": "216780"
  },
  {
    "text": "And that's weird. So the idea here--\nyeah, the proof may be a little longer,\npolynomially longer,",
    "start": "216780",
    "end": "222300"
  },
  {
    "text": "but you only need to read\na few locations to check",
    "start": "222300",
    "end": "228150"
  },
  {
    "text": "that it's valid. So to verify-- often\nPCPs are denoted by pi--",
    "start": "228150",
    "end": "233940"
  },
  {
    "text": "a PCP proof given x, all the\nverifier needs to do is query.",
    "start": "233940",
    "end": "239593"
  },
  {
    "text": "He doesn't actually need\nto read these things. He queries a few locations,\na few bits, checks,",
    "start": "239593",
    "end": "245049"
  },
  {
    "text": "a few bits of the\nproof, and then applies a verification circuit that\ndepends only on these bits.",
    "start": "245050",
    "end": "251030"
  },
  {
    "text": "And importantly, the bits\nhe chooses are random. The prover doesn't know.",
    "start": "251030",
    "end": "256745"
  },
  {
    "text": "Otherwise, it's like shrinking. If he knew, the prover\nknew, oh, the reference is going to only check\nin bit 17, 22, and 25,",
    "start": "256745",
    "end": "264120"
  },
  {
    "text": "then he would just give\nyou-- it's like you'll have a succinct witness. And, of course, we can't\ntake arbitrary witness",
    "start": "264120",
    "end": "269780"
  },
  {
    "text": "and just make them succinct. We don't believe\nthat's possible. Yeah. AUDIENCE: So it's\n[INAUDIBLE] only useful",
    "start": "269780",
    "end": "274820"
  },
  {
    "text": "if m is much greater than n? YAEL KALAI: OK. So the question\nwas, is a PCP used",
    "start": "274820",
    "end": "280770"
  },
  {
    "text": "if m is much greater than n? And the answer is no. Actually, think of it, we can\neven use it where m the length,",
    "start": "280770",
    "end": "289460"
  },
  {
    "text": "w is n to the epsilon-- even less than n to the epsilon,\neven n to the little o of n.",
    "start": "289460",
    "end": "296310"
  },
  {
    "text": "Now, this will still\nbe polynomial in n. So actually, you took the\nproof and make it actually",
    "start": "296310",
    "end": "302570"
  },
  {
    "text": "more than polynomially\nlarger, because it's polynomial in n and m. And if the proof here smaller\nis n to the little o of 1,",
    "start": "302570",
    "end": "310870"
  },
  {
    "text": "then this is poly n. It's actually more\nthan polynomial bigger. So you think, what did we gain?",
    "start": "310870",
    "end": "316120"
  },
  {
    "text": "We took a short proof,\nmade it so much bigger. What did we gain? And what we gained is, the hope\nis, that you can query this,",
    "start": "316120",
    "end": "322569"
  },
  {
    "text": "the verifier can query this,\nin very, very few locations, read only very, very\nfew bits of this proof.",
    "start": "322570",
    "end": "328270"
  },
  {
    "text": "AUDIENCE: OK, [INAUDIBLE]. Does the verifier also\nhave to read x then? YAEL KALAI: Yeah, the verifier-- AUDIENCE: [INAUDIBLE]?",
    "start": "328270",
    "end": "333510"
  },
  {
    "text": "YAEL KALAI: All of it. So, yes. Good. That's a good question. So the question was, does the\nverifier have to read all of x?",
    "start": "333510",
    "end": "339600"
  },
  {
    "text": "Because I said he\nonly needs to read a few locations in the proof,\ndoes he need to read all of x? And a priori, of course\nhe needs to read all of x.",
    "start": "339600",
    "end": "345960"
  },
  {
    "text": "Because even if there's one\nbit in x that he doesn't read, what if that bit is-- it's not\nclear what the sentence is,",
    "start": "345960",
    "end": "353513"
  },
  {
    "text": "what the statement is. The prover needs to\nknow, what am I reading? What are you proving to me? But there are extensions called\nPCP of proximity, which I'm not",
    "start": "353513",
    "end": "361860"
  },
  {
    "text": "going to get into in this class,\nwhere actually the verifier also",
    "start": "361860",
    "end": "367500"
  },
  {
    "text": "doesn't read all of x,\nbut the guarantee is not that x is in the language. The guarantee is that the oracle\nthat is given to the verifier,",
    "start": "367500",
    "end": "376630"
  },
  {
    "text": "there is something close to\nit that's in the language. So there is a notion\nof extension of the PCP",
    "start": "376630",
    "end": "383010"
  },
  {
    "text": "where the verifier doesn't\neven need to read all of x. The guarantees there are\nnot very easy to state,",
    "start": "383010",
    "end": "389740"
  },
  {
    "text": "but it's a very useful notion. Actually, it's used a lot. It's called PCPs of proximity. ",
    "start": "389740",
    "end": "398060"
  },
  {
    "text": "OK, so that's what\nwe're going to do today. And let me just mention, before\neven we start the formal thing,",
    "start": "398060",
    "end": "403290"
  },
  {
    "text": "let me just say, this is\nreally an amazing line of work. Today, we know how\nto take any witness,",
    "start": "403290",
    "end": "409850"
  },
  {
    "text": "convert it to a\nprobabilistically checkable one that the verifier\nonly reads 3 bits--",
    "start": "409850",
    "end": "416639"
  },
  {
    "text": "3, 3 bits-- of this\nproof and is convinced,",
    "start": "416640",
    "end": "422960"
  },
  {
    "text": "with [INAUDIBLE] probability. 7/7 is the parameter. And then, if you want\nmore, of course you repeat.",
    "start": "422960",
    "end": "429990"
  },
  {
    "text": "But even with just 3 bits,\nyou get some soundness, and that's really amazing.",
    "start": "429990",
    "end": "435720"
  },
  {
    "text": "So we're not going to\nsee the 3-bit proof, but we're going to\nsee a polylog n proof. So what we're going to\nshow, the construction",
    "start": "435720",
    "end": "442340"
  },
  {
    "text": "we're going to see today,\nis how to go from a witness to a probabilistically\ncheckable one that the verifier only needs\nto read polylog n of these bits",
    "start": "442340",
    "end": "453099"
  },
  {
    "text": "and verify. And to go to the\nconstant, there's additional tricks of\nrecursion and so on that one",
    "start": "453100",
    "end": "459010"
  },
  {
    "text": "needs to do to get there. But we're not going\nto cover that part. OK, ready to roll sleeves?",
    "start": "459010",
    "end": "467410"
  },
  {
    "text": "OK, let's-- so let me just\ndefine the complexity class.",
    "start": "467410",
    "end": "476040"
  },
  {
    "text": "People often think of it\nas a complexity class, even though, for\nus, because this is more of a proof system,\ncryptography class,",
    "start": "476040",
    "end": "482360"
  },
  {
    "text": "we always want efficiency. We don't care just\nabout complexity. We want to say that actually\nwe can take any witness",
    "start": "482360",
    "end": "487870"
  },
  {
    "text": "and officially convert it. It's not just about existence. We want to actually\nuse these things.",
    "start": "487870",
    "end": "493630"
  },
  {
    "text": "And let me just jump ahead and\nsay that these things are used. It's not just a theoretical. Even though everything we've\nseen so far in the class",
    "start": "493630",
    "end": "500350"
  },
  {
    "text": "is very just beautiful\nmathematically, it seems a very kind\nof away from practice.",
    "start": "500350",
    "end": "515581"
  },
  {
    "text": "But actually, it's not. All these things that I've\nshown you so far, that you've seen so far, are\nthings that actually are used, and the PCP as well.",
    "start": "515581",
    "end": "525882"
  },
  {
    "text": "All this machinery\nare things that's use, so we actually do\ncare about efficiency. But let me first define\nit as a complexity class.",
    "start": "525882",
    "end": "533280"
  },
  {
    "text": "So we define the complexity,\nthe complexity class, PCP,",
    "start": "533280",
    "end": "538920"
  },
  {
    "text": "c for completeness parameter,\ns for soundness parameter, r for randomness parameter,\nand q for query parameter.",
    "start": "538920",
    "end": "548260"
  },
  {
    "text": "So this is a class. This is the class\nof all languages L",
    "start": "548260",
    "end": "562199"
  },
  {
    "text": "that have a probabilistically\ncheckable proof.",
    "start": "562200",
    "end": "570350"
  },
  {
    "text": "But I'll explain\nexactly what I mean. So actually, let me\nsee, these are all the--",
    "start": "570350",
    "end": "578050"
  },
  {
    "text": "let me write it formally. These are all the\nlanguages L such that there exists a PPT, a\nProbabilistic Polynomial Time",
    "start": "578050",
    "end": "591400"
  },
  {
    "text": "verifier--  Actually, it's a\nPPT oracle machine,",
    "start": "591400",
    "end": "599589"
  },
  {
    "text": "because it takes the PCP as an\noracle machine V, such that--",
    "start": "599590",
    "end": "609910"
  },
  {
    "text": "so here are the condition.",
    "start": "609910",
    "end": "615709"
  },
  {
    "text": "The completeness says that\nfor every x in the language, there exists a PCP pi such\nthat the probability that V,",
    "start": "615710",
    "end": "629720"
  },
  {
    "text": "the Verifier, given Oracle\naccess to this PCP pi and input the instance,\nthere exists a PCP such",
    "start": "629720",
    "end": "639470"
  },
  {
    "text": "that the verifier will\naccept, it will output 1, with probability at least c. That's the\ncompleteness parameter.",
    "start": "639470",
    "end": "645860"
  },
  {
    "text": "For us, the PCP we'll see will\nhave completeness parameter 1. So we want to say that a\nlanguage L has such a PCP,",
    "start": "645860",
    "end": "655190"
  },
  {
    "text": "if there is a verifier\nV, efficient verifier, it takes oracle access.",
    "start": "655190",
    "end": "660925"
  },
  {
    "text": "So if x is in the\nlanguage, there exists some PCP so\nthat the verifier with oracle access to this\nPCP, given this input,",
    "start": "660925",
    "end": "667880"
  },
  {
    "text": "outputs 1 with probability c. Yes. AUDIENCE: Maybe I'm\njumping the gun a bit, but what does the\noracle look like?",
    "start": "667880",
    "end": "673430"
  },
  {
    "text": "What are the inputs and outputs? YAEL KALAI: OK,\ngood, good, good. So OK, good. No, you're not jumping,\nso good question.",
    "start": "673430",
    "end": "679080"
  },
  {
    "text": "So this pi, you should\nthink of it as a string. It has bits b1--",
    "start": "679080",
    "end": "684800"
  },
  {
    "text": "Maybe I'll call it pi 1, pi\n2, up to pi, I don't know, n.",
    "start": "684800",
    "end": "690620"
  },
  {
    "text": "And the verifier can ask,\ngive me pi 1, give me pi 2,",
    "start": "690620",
    "end": "696420"
  },
  {
    "text": "give me pi 3. So it just has oracle queries. He can query this string. That's what Oracle--\nit's not really--",
    "start": "696420",
    "end": "702527"
  },
  {
    "text": "don't think of it as a function. It has oracle access\nto the string, and he can just ask for\nspecific bits from the string.",
    "start": "702527",
    "end": "707755"
  },
  {
    "text": "Great question. Thank you. OK, good. And the soundness guarantee\nsays that for every x",
    "start": "707755",
    "end": "720910"
  },
  {
    "text": "that's not in the language-- any guesses, by the way?",
    "start": "720910",
    "end": "728120"
  },
  {
    "text": "So you need to\ndefine the PCP here. How would you define soundness? Yeah.",
    "start": "728120",
    "end": "733220"
  },
  {
    "text": "AUDIENCE: I guess\nfor all pi prime, the probability that a verifier\n[? with ?] [? formal ?]",
    "start": "733220",
    "end": "738339"
  },
  {
    "text": "[? access ?] [? to the ?] pi\nprime accepts x is at most s. YAEL KALAI: Wonderful.",
    "start": "738340",
    "end": "744550"
  },
  {
    "text": "Exactly. You want to say that\nfor every pi star-- that's often how we denote\nbad things, pi prime [?",
    "start": "744550",
    "end": "751443"
  },
  {
    "text": "will do ?] too-- now there's a cheating prover. He tries to fool the verifier.",
    "start": "751443",
    "end": "756589"
  },
  {
    "text": "He cannot. So no matter what he\ntries to give him, the verifier will reject\nhim with probability",
    "start": "756590",
    "end": "763060"
  },
  {
    "text": "or will acceptability\nsmaller than s. That's the soundness guarantee.",
    "start": "763060",
    "end": "769060"
  },
  {
    "text": "And ideally, we want to push the\ncompleteness to 1, the soundness to 0.",
    "start": "769060",
    "end": "774110"
  },
  {
    "text": "Great. And then, the complexity is--",
    "start": "774110",
    "end": "779150"
  },
  {
    "text": "now, we want to say,\nin terms of complexity now will go to v uses r bits of\nrandomness and q oracle calls.",
    "start": "779150",
    "end": "798279"
  },
  {
    "text": " And moreover, we'll see\nthis is important for us.",
    "start": "798280",
    "end": "804510"
  },
  {
    "text": "This is often in the\ndefinition, though not always, but often this is part of the\n[INAUDIBLE], q nonadaptive.",
    "start": "804510",
    "end": "810605"
  },
  {
    "text": " What do I mean by nonadaptive?",
    "start": "810605",
    "end": "817610"
  },
  {
    "text": "What I mean is the way V\nworks, he gets input x,",
    "start": "817610",
    "end": "822769"
  },
  {
    "text": "he then chooses kind of i1 up\nto i q locations in the PCP.",
    "start": "822770",
    "end": "833580"
  },
  {
    "text": "OK, so [INAUDIBLE] the V. He\ndoesn't even look at the oracle yet. He has an input x.",
    "start": "833580",
    "end": "839690"
  },
  {
    "text": "He first computes q locations. He then goes to the oracle,\nasks these q locations.",
    "start": "839690",
    "end": "848480"
  },
  {
    "text": "And so V1 just decides\nthese locations. And then, you can think of\nV as being like V1 and V2.",
    "start": "848480",
    "end": "857714"
  },
  {
    "text": "V1 doesn't look at his Oracle. He just looks as\nan input and using randomness chooses locations.",
    "start": "857714",
    "end": "865470"
  },
  {
    "text": "And then, V2 kind of\njust given x, i1 up",
    "start": "865470",
    "end": "872519"
  },
  {
    "text": "to i q and pi i1 up to pi i q\ndecides to accept or reject.",
    "start": "872520",
    "end": "883920"
  },
  {
    "text": "OK? So this is how you should\nthink of the verifier. The verifier has\naccess to the proof pi.",
    "start": "883920",
    "end": "889649"
  },
  {
    "text": "But what he does, he does-- because a more\ngeneral verifier will have x, decides on location,\nfirst location to the i1,",
    "start": "889650",
    "end": "897610"
  },
  {
    "text": "Look at pi 1, then,\nhmm, interesting. OK. In that case, I want\nto see location i2. Hmm, I get pi i2.",
    "start": "897610",
    "end": "904090"
  },
  {
    "text": "Interesting. Given pi i2, I want\nto see location-- that would be an adaptive verifier. But often, in the PCP\nliterature, when we define PCP,",
    "start": "904090",
    "end": "911870"
  },
  {
    "text": "we require the verifier\nto be nonadaptive. And this nonadaptivity\nis kind of a property",
    "start": "911870",
    "end": "919190"
  },
  {
    "text": "that we like for applications. And we'll see that today,\nand an example for why. When we'll construct\nsuccinct arguments,",
    "start": "919190",
    "end": "925779"
  },
  {
    "text": "we'll use the fact\nthat it's nonadaptive. But let me just say, most PCPs,\nall PCP I know, are nonadaptive.",
    "start": "925780",
    "end": "930963"
  },
  {
    "text": "Maybe there are other. Was that your question? Yeah. So there may exist.",
    "start": "930963",
    "end": "937540"
  },
  {
    "text": "I didn't do a full\nliterature search. But the PCPs that are the most\ncommon ones that we talk about",
    "start": "937540",
    "end": "943700"
  },
  {
    "text": "are all nonadaptive. Yeah. AUDIENCE: The [? V's ?]\nknow what capital N is. YAEL KALAI: Yeah. Yeah, yeah, yeah. So V, yes.",
    "start": "943700",
    "end": "950130"
  },
  {
    "text": "Yeah. So very good question. Let me repeat for the video.",
    "start": "950130",
    "end": "955440"
  },
  {
    "text": "So the question was, does\nV know what capital N is? So the answer is yes.",
    "start": "955440",
    "end": "960510"
  },
  {
    "text": "And V knows the language. So he knows what small n is.",
    "start": "960510",
    "end": "966675"
  },
  {
    "text": "Well, he got small n. He knows small n. The language has there\nis m So V gets small n.",
    "start": "966675",
    "end": "974000"
  },
  {
    "text": "So he knows what n is. The language is associated\nwith a witness size m of n.",
    "start": "974000",
    "end": "979010"
  },
  {
    "text": "So he knows that,\nbecause he knows the n, so he knows the witness size. And the PCP itself is\nassociated with N, which is,",
    "start": "979010",
    "end": "988745"
  },
  {
    "text": "you can think of it this way. So the answer is yes. These are kind of fixed. These m and n are\nfixed parameters",
    "start": "988745",
    "end": "996200"
  },
  {
    "text": "that are defined by the PCPs,\nand the prover knows them. The verifier, the\nprover, they all-- yeah. Yes.",
    "start": "996200",
    "end": "1001630"
  },
  {
    "text": "AUDIENCE: Do we gain or lose\nsomething with V adaptive. YAEL KALAI: Yes. Good, good, good. So the question is,\ndo we lose something?",
    "start": "1001630",
    "end": "1007698"
  },
  {
    "text": "And the answer is, we do. OK, so what do we lose and what\ndo we gain is your question.",
    "start": "1007698",
    "end": "1013040"
  },
  {
    "text": "What we lose is for application. So when we'll go to-- in the second part\nof today's class,",
    "start": "1013040",
    "end": "1019186"
  },
  {
    "text": "we're going to construct\nsuccinct arguments, and we're going to\nconstruct them from PCPs. And you'll see that if\nour PCP is adaptive,",
    "start": "1019187",
    "end": "1026079"
  },
  {
    "text": "this becomes a problem. So we do gain. Now, you're saying,\nwhat do we lose? So we do lose. Sorry, we do lose if\nwe make it adaptive.",
    "start": "1026079",
    "end": "1032721"
  },
  {
    "text": "Now, we're saying, but\nmaybe we gain something. Maybe we construct PCPs\nthat are much better",
    "start": "1032722",
    "end": "1037750"
  },
  {
    "text": "if you make them adaptive. And I don't think\nso, but I'm not sure.",
    "start": "1037750",
    "end": "1043959"
  },
  {
    "text": "Maybe one can actually argue\nthat you don't gain anything, but I haven't thought about it. But it's not something that--",
    "start": "1043960",
    "end": "1050470"
  },
  {
    "text": "making it nonadaptive, for\nall we know, is not a price. It's just our PCPs?",
    "start": "1050470",
    "end": "1057090"
  },
  {
    "text": "Happened to be that way. Yeah. AUDIENCE: Is there a version\nwhere you choose [? the ?] [? instance ?] [INAUDIBLE]",
    "start": "1057090",
    "end": "1062862"
  },
  {
    "text": "YAEL KALAI: Good, good, good. Very, very good question. So I think maybe\nI misunderstood,",
    "start": "1062862",
    "end": "1068330"
  },
  {
    "text": "but maybe your question\nwas, is it clear that these have to depend on X? Can they even not depend on\nX. And the answer is yes.",
    "start": "1068330",
    "end": "1075880"
  },
  {
    "text": "Actually, in the\nPCPs, we'll see, they don't depend on X. The PCPs\nwe know, actually, these, they",
    "start": "1075880",
    "end": "1083260"
  },
  {
    "text": "only depend on n and the\ninstance size or begin.",
    "start": "1083260",
    "end": "1090250"
  },
  {
    "text": "But they don't actually\ndepend on the instance. And the PCP I'll construct\ntoday, you'll see that. So we'll get back to that.",
    "start": "1090250",
    "end": "1096250"
  },
  {
    "text": "Really, really great questions. Yeah. AUDIENCE: High level,\nhow does that work? Because you think that\nif the prover knows",
    "start": "1096250",
    "end": "1102293"
  },
  {
    "text": "what indices you're going\nto query in advance, you could construct [INAUDIBLE]. YAEL KALAI: Of\ncourse, of course. Great. Wow, guys, you're\nreally lifting me up.",
    "start": "1102293",
    "end": "1107990"
  },
  {
    "text": "This is great. Thank you. Yeah, 100%. So what you're saying is, of\ncourse, if the prover knew",
    "start": "1107990",
    "end": "1115690"
  },
  {
    "text": "the locations you're\nquerying, he will cheat. The thing is, these\nlocations are random.",
    "start": "1115690",
    "end": "1121557"
  },
  {
    "text": "The prover doesn't\nknow what they are. They just don't depend on x. AUDIENCE: Oh, OK. YAEL KALAI: But they\ncome from a distribution.",
    "start": "1121557",
    "end": "1127310"
  },
  {
    "text": "It's very important. If these were deterministic,\nthere's no way. If you can do a PCP where\nthese are deterministic, it's like you took\nNP and you just",
    "start": "1127310",
    "end": "1134290"
  },
  {
    "text": "made it n times much smaller. Like, we don't believe\nthat can happen. So no, there's no\nway we believe you",
    "start": "1134290",
    "end": "1142730"
  },
  {
    "text": "can construct PCPs for which\nthe query distribution is deterministic.",
    "start": "1142730",
    "end": "1148350"
  },
  {
    "text": "It's just fixed. This has to come\nfrom a distribution. But the question is, does\nthis distribution depend on x,",
    "start": "1148350",
    "end": "1154070"
  },
  {
    "text": "or does it only depend\non the parameter n? And in what we'll see, it\nactually only depends on n.",
    "start": "1154070",
    "end": "1159330"
  },
  {
    "text": "It doesn't depend on x. So that's what we'll\nsee in a minute. ",
    "start": "1159330",
    "end": "1165460"
  },
  {
    "text": "Great question, guys. Any more questions before we-- ",
    "start": "1165460",
    "end": "1172950"
  },
  {
    "text": "yeah. AUDIENCE: So [INAUDIBLE]\nin V1 and V2, or do we really only care\nabout the [INAUDIBLE]?",
    "start": "1172950",
    "end": "1178965"
  },
  {
    "text": "YAEL KALAI: OK, good. So actually, usually\nV1 is randomized and V2 is deterministic.",
    "start": "1178965",
    "end": "1185710"
  },
  {
    "text": "So you can think of it that\nway, that V1 is randomized, V2 is deterministic.",
    "start": "1185710",
    "end": "1191480"
  },
  {
    "text": "OK.  Great. So now, let me tell\nyou what we know",
    "start": "1191480",
    "end": "1198053"
  },
  {
    "text": "and what we're\ngoing to construct. So here's what we're\ngoing to prove today.",
    "start": "1198053",
    "end": "1203080"
  },
  {
    "text": "Here is a theorem that\nwe're going to prove, that PCP with a, let's\nsay, completeness 1--",
    "start": "1203080",
    "end": "1212400"
  },
  {
    "text": "I'll put some as 1/2. We can get smaller, any constant\nsmaller, but I'll just put 1/2, because by repetition it\ndoesn't really matter--",
    "start": "1212400",
    "end": "1218950"
  },
  {
    "text": "you can get a PCP where\nthe query complexity is-- so, OK, we can get a PCP\nwith poly log n query",
    "start": "1218950",
    "end": "1229320"
  },
  {
    "text": "complexity and polylog n-- ",
    "start": "1229320",
    "end": "1237680"
  },
  {
    "text": "sorry, poly log n randomness\ncomplexity and query complexity for all of NP.",
    "start": "1237680",
    "end": "1243448"
  },
  {
    "text": "That's what we're\ngoing to see today. So we're going to see\nhow for any NP language,",
    "start": "1243448",
    "end": "1249190"
  },
  {
    "text": "we can construct a PCP where\nthe verifier, the amount of randomness he uses, is\npolylog n bits of randomness",
    "start": "1249190",
    "end": "1256260"
  },
  {
    "text": "and polylog n queries. And then, we get completeness\n1 and soundness 1/2. Yeah, Tina.",
    "start": "1256260",
    "end": "1262139"
  },
  {
    "text": "AUDIENCE: So [INAUDIBLE] this\nis not the usual [INAUDIBLE]. Usually, you want proof--",
    "start": "1262140",
    "end": "1268357"
  },
  {
    "text": "you want the randomness\n[? complexity to be ?] [? log ?] [INAUDIBLE] YAEL KALAI: Right, right, right. Yeah, yeah, yeah.",
    "start": "1268357",
    "end": "1273968"
  },
  {
    "text": "So you're right. So often-- OK, you're right. The way I wrote it here--",
    "start": "1273968",
    "end": "1279970"
  },
  {
    "text": "so OK, why do people care\nabout randomness complexity one can say. Well, who cares about\nthe random complexity?",
    "start": "1279970",
    "end": "1285580"
  },
  {
    "text": "And usually, the way I\ndefine PCP, and that's why I said as a\ncomplexity theory, this is how it's defined, if\nthe verifier has only log n bits",
    "start": "1285580",
    "end": "1295600"
  },
  {
    "text": "or order log n\nbits of randomness, then it means that the\nPCP is only poly n size.",
    "start": "1295600",
    "end": "1302770"
  },
  {
    "text": "Because, look, go for all\nthe log n bits of random, there's only n of them. So that's as much\nas you can query.",
    "start": "1302770",
    "end": "1312080"
  },
  {
    "text": "So that means the PCP\nis upon it. and that's what we care about. OK. For me, I'm going\nto care about--",
    "start": "1312080",
    "end": "1318400"
  },
  {
    "text": "actually, for me, I'm\ngoing to add a requirement. Actually, I didn't\nwrite it here, because it's\nusually not defined.",
    "start": "1318400",
    "end": "1323465"
  },
  {
    "text": "But I can add a\nrequirement that says-- OK, I'll add it here tiny.",
    "start": "1323465",
    "end": "1329630"
  },
  {
    "text": "This is a requirement that\nwe add in cryptography. Often, what I'm writing now is\nnot added in the definitions.",
    "start": "1329630",
    "end": "1338030"
  },
  {
    "text": "But let me write another\ncryptography, another that given for every x in l and witness--",
    "start": "1338030",
    "end": "1349530"
  },
  {
    "text": " if it has a witness.",
    "start": "1349530",
    "end": "1355840"
  },
  {
    "text": "W. OK, so suppose this\nis a language in n time, I don't know NP or N time\nT-- so it has some witness--",
    "start": "1355840",
    "end": "1362120"
  },
  {
    "text": "I want it to be the case\nthat, given x and w, you can efficiently compute pi.",
    "start": "1362120",
    "end": "1369429"
  },
  {
    "text": "So not only there exists\npi of poly n size,",
    "start": "1369430",
    "end": "1374450"
  },
  {
    "text": "you can actually\nefficiently compute it. And because I require\nefficient computing, I actually don't\ncare anymore so much",
    "start": "1374450",
    "end": "1380800"
  },
  {
    "text": "about the randomness, the\nnumber of randomness bits. But yeah, that's\na very good point.",
    "start": "1380800",
    "end": "1386990"
  },
  {
    "text": "Thank you. Guys, thank you\nfor the question. This is great. OK, so that's what\nI'm going to prove.",
    "start": "1386990",
    "end": "1393409"
  },
  {
    "text": "Even though, let me just\nmention, what is known is you can make this order log\nn, and you can make this 3.",
    "start": "1393410",
    "end": "1401655"
  },
  {
    "text": " So it's really remarkable. If you think about it, wow,\nyou can take any proof.",
    "start": "1401655",
    "end": "1409630"
  },
  {
    "text": "So you know how, I don't know,\ntake Fermat's last theorem. Take the hardest proof\nthat we in mathematics.",
    "start": "1409630",
    "end": "1416225"
  },
  {
    "text": "One can write them in a\nprobabilistically checkable way. They can just take\n3 bits and verify.",
    "start": "1416225",
    "end": "1422940"
  },
  {
    "text": "And if you're not happy\nwith probability 1/2, repeat it as many\ntimes as you want. You want to be sure that he can\ncheat with probability only 1/2",
    "start": "1422940",
    "end": "1430590"
  },
  {
    "text": "2 to the 500? Repeat it 500 times. And each one is like\na very simple check.",
    "start": "1430590",
    "end": "1435880"
  },
  {
    "text": "It depends on 3 bits. So it's really remarkable. ",
    "start": "1435880",
    "end": "1442550"
  },
  {
    "text": "AUDIENCE: Never mind, sorry. [? N choose 3 ?] probability\nis way too big, but I guess it doesn't\nreally matter to have all",
    "start": "1442550",
    "end": "1449240"
  },
  {
    "text": "the possible-- YAEL KALAI: Oh, you're saying\nit's too big for theory, for practice. Yeah, but we're\nstill in theory land.",
    "start": "1449240",
    "end": "1455990"
  },
  {
    "text": "Yeah, in practice, these PCP,\nyou want them to be linear. That's the ideal if\nthey're quasilinear.",
    "start": "1455990",
    "end": "1462420"
  },
  {
    "text": "Even if they're quadratic,\npeople don't like them. You really want linear,\nquasilinear PCPs for practice.",
    "start": "1462420",
    "end": "1467550"
  },
  {
    "text": "But for here, poly is fantastic. We're not we're-- let us stay\nin the cloud a little bit.",
    "start": "1467550",
    "end": "1474530"
  },
  {
    "text": "OK. So OK, let's construct this.",
    "start": "1474530",
    "end": "1480500"
  },
  {
    "text": "Ready? OK. So we have the 3,\nbut we're going to construct for the\npoly log poly log.",
    "start": "1480500",
    "end": "1487440"
  },
  {
    "text": "And actually, here's\nwhat's amazing. You actually already know\nhow to construct the PCP.",
    "start": "1487440",
    "end": "1494559"
  },
  {
    "text": "You just don't know that. And how do you construct a PCP? It's really only\nthe GKR protocol.",
    "start": "1494560",
    "end": "1502310"
  },
  {
    "text": "That's it. So you can unfold GKR,\nand I'm going to show you exactly how to make it a PCP.",
    "start": "1502310",
    "end": "1509260"
  },
  {
    "text": "So to do that, but\nbefore I now recall GKR in a second on that board,\nto do that, let's first--",
    "start": "1509260",
    "end": "1517190"
  },
  {
    "text": "so I want to say any\nlanguage has a PCP-- let's focus on 3SAT.",
    "start": "1517190",
    "end": "1525670"
  },
  {
    "text": " OK, so 3SAT is is an\nNP-complete language.",
    "start": "1525670",
    "end": "1533110"
  },
  {
    "text": "Let's just construct\na PCP for 3SAT. Sets. And what's nice\nabout 3SAT is that--",
    "start": "1533110",
    "end": "1538350"
  },
  {
    "text": "I mean, any NP language\nyou can convert to 3SAT, so it's nice in\nany NP language-- you have a circuit, a\nverification circuit--",
    "start": "1538350",
    "end": "1547140"
  },
  {
    "text": "so a circuit verifying,\nyou can think of it,",
    "start": "1547140",
    "end": "1552270"
  },
  {
    "text": "given w verifying that\nit's a valid witness-- of very small depth.",
    "start": "1552270",
    "end": "1557640"
  },
  {
    "text": "OK, polylog n depth. And this is important. Because if you remember\nthe GKR protocol, which we're going to use to\nconstruct this PCP,",
    "start": "1557640",
    "end": "1566370"
  },
  {
    "text": "kind of the communication\ncomplexity grows with the depth. So we want the depth of\nthe circuit to be small.",
    "start": "1566370",
    "end": "1573510"
  },
  {
    "text": "But any NP language you\ncan convert into a 3SAT, and 3SAT has-- actually, the depth of 3SAT\nis like actually only 2.",
    "start": "1573510",
    "end": "1581550"
  },
  {
    "text": "But you need to do, little\nor's and then one big and. But if you remember, in\nGKR we wanted fend in 2.",
    "start": "1581550",
    "end": "1588750"
  },
  {
    "text": "So once you have fended\nin 2, it's like order log. OK, so this is depth. You can think of it as being\nlog n or I'm OK with poly log n.",
    "start": "1588750",
    "end": "1597900"
  },
  {
    "text": "It doesn't matter. The point is, it's small. And the reason why\nI write also polylog",
    "start": "1597900",
    "end": "1605370"
  },
  {
    "text": "is because it's actually log. However, this circuit is also--",
    "start": "1605370",
    "end": "1613260"
  },
  {
    "text": "and this I'm not going to get\ninto, but it's logspace uniform. And now, you can\nconsider the circuit.",
    "start": "1613260",
    "end": "1619020"
  },
  {
    "text": "Change it a little bit the way\nRachel taught you two weeks ago. If you don't remember, it's OK. You can take it as a black box.",
    "start": "1619020",
    "end": "1625320"
  },
  {
    "text": "You can assume that the\ncircuit, by kind looking at a universal\nversion of it, that it",
    "start": "1625320",
    "end": "1631020"
  },
  {
    "text": "has the gates add i and mult\ni are efficiently computable.",
    "start": "1631020",
    "end": "1639310"
  },
  {
    "text": " And that's what we'll need. So if you don't remember things\nfrom two weeks ago, it's OK.",
    "start": "1639310",
    "end": "1648970"
  },
  {
    "text": "I'll remind you what add\ni and mult is in a second. But you take any 3SAT, you\ncan convert it into 3-CNF.",
    "start": "1648970",
    "end": "1657880"
  },
  {
    "text": "So now, given a witness, you\njust check that it verifies. Hi. Hello.",
    "start": "1657880",
    "end": "1662890"
  },
  {
    "text": "Hey. Wow, all my kids coming in. ",
    "start": "1662890",
    "end": "1676769"
  },
  {
    "text": "OK. So we're talking about how\nto construct PCPs from GKR",
    "start": "1676770",
    "end": "1683160"
  },
  {
    "text": "right now. So what we're proving is that--",
    "start": "1683160",
    "end": "1690000"
  },
  {
    "text": "we're going to show how you\ncan take any NP language-- in particular, we're\nfocusing on three 3SAT--",
    "start": "1690000",
    "end": "1695100"
  },
  {
    "text": "and we're going to show how\nyou can convert 3SAT into a PCP",
    "start": "1695100",
    "end": "1700140"
  },
  {
    "text": "where the query\ncomplexity is polylog n. So converting to\nPCP, the verifier",
    "start": "1700140",
    "end": "1705750"
  },
  {
    "text": "needs to query only\npolylog n locations. We know you can go\nall the way down to 3,",
    "start": "1705750",
    "end": "1711370"
  },
  {
    "text": "but today we're going\nto solve polylog. This is the\nrandomness complexity. This is the query complexity.",
    "start": "1711370",
    "end": "1717520"
  },
  {
    "text": "We're focusing on\ncompleteness 1, soundness 1/2. OK. So we're going to\nnow construct a PCP.",
    "start": "1717520",
    "end": "1723820"
  },
  {
    "text": "And before we construct, the\nPCP essentially uses GKR. So let me first, on\nthis board, remind you",
    "start": "1723820",
    "end": "1730059"
  },
  {
    "text": "quickly what GKR looks\nlike, because we're going to use it to construct the PCP. OK.",
    "start": "1730060",
    "end": "1735340"
  },
  {
    "text": "Cameraman, it's OK to move? CREW: Yeah, no problem. YAEL KALAI: OK. Good. So let's just recall the GKR.",
    "start": "1735340",
    "end": "1742190"
  },
  {
    "text": "How does it work? We have a circuit. There's an input w. We're going to think of w here\nas the satisfying assignment.",
    "start": "1742190",
    "end": "1751679"
  },
  {
    "text": "OK? Remembering, the GKR, we assume\nthe verifier has w in his hand, the input in his hand. Here, he doesn't.",
    "start": "1751680",
    "end": "1757250"
  },
  {
    "text": "W is going to be the witness\nfor the satisfying assignment. But that's OK. Now, I'm going to\nconstruct the PCP proof.",
    "start": "1757250",
    "end": "1766080"
  },
  {
    "text": "OK? I have my witness, my\nsatisfying assignment. I'm going to construct\na probabilistic check.",
    "start": "1766080",
    "end": "1772970"
  },
  {
    "text": "I'm going to convert\nw into a PCP, into a probabilistically\ncheckable proof. OK, here's how I do it.",
    "start": "1772970",
    "end": "1779300"
  },
  {
    "text": "I look at the circuit\nthat checks that w-- actually, if you want to think\nof it as a completely new",
    "start": "1779300",
    "end": "1786410"
  },
  {
    "text": "for me you can think\nof having x and w. So x and w, and it\nchecks that kind of phi--",
    "start": "1786410",
    "end": "1792860"
  },
  {
    "text": "sorry-- x, which is phi, and\nit checks that phi of w is 1.",
    "start": "1792860",
    "end": "1801540"
  },
  {
    "text": "OK? This is logspace\nuniform circuit.",
    "start": "1801540",
    "end": "1807260"
  },
  {
    "text": "OK, now what do I do? So here's me. I know w. We both know the 3SAT formula.",
    "start": "1807260",
    "end": "1814045"
  },
  {
    "text": " And we assume that the\ncircuit has addition gates",
    "start": "1814045",
    "end": "1822590"
  },
  {
    "text": "and multiplication gates. What I do, for every layer, I\ncompute the values of the layer.",
    "start": "1822590",
    "end": "1831290"
  },
  {
    "text": "OK? So I compute for every layer. Remember, I have V i. I assume every layer,\nlet's say, the same size",
    "start": "1831290",
    "end": "1838705"
  },
  {
    "text": "without loss of generality. We set size s. We called it s. So each layer has s wires.",
    "start": "1838705",
    "end": "1846120"
  },
  {
    "text": "And we compute all these wires. For every layer i, we\nthink of these wires",
    "start": "1846120",
    "end": "1853590"
  },
  {
    "text": "as going from H to m to 0 1. So H is some set and, we\nassume that H to the m is s.",
    "start": "1853590",
    "end": "1861820"
  },
  {
    "text": "OK? So we just encode these s wires\nin a m-dimensional cube of size",
    "start": "1861820",
    "end": "1869970"
  },
  {
    "text": "H, and we just write all\nthe values of the wires. OK? And then, what we do, we look\nat the extension V tilde which",
    "start": "1869970",
    "end": "1879410"
  },
  {
    "text": "extends to a field\nF to the m to F. And this is kind of the\nlow-degree extension.",
    "start": "1879410",
    "end": "1886010"
  },
  {
    "text": "So we take any F that\ncontains the set H, and we extend via the\nlow-degree extension.",
    "start": "1886010",
    "end": "1894000"
  },
  {
    "text": "So these are things we covered. Now is the first time-- you\nremember, when we talked GKR,",
    "start": "1894000",
    "end": "1899960"
  },
  {
    "text": "I told you, OK, why\nnot do 0 1 to the m? 0 to the log n,\nit's much natural",
    "start": "1899960",
    "end": "1905900"
  },
  {
    "text": "to think of binary\nrepresentation of s as opposed to this H to the m\nwhich is what H. And I told you,",
    "start": "1905900",
    "end": "1911900"
  },
  {
    "text": "oh, often we like parameters. We like to think of H as log n--",
    "start": "1911900",
    "end": "1917930"
  },
  {
    "text": "sorry, log n, and m is\nlog n over log log n.",
    "start": "1917930",
    "end": "1924000"
  },
  {
    "text": " And if you'll see, H to\nthe m just becomes n.",
    "start": "1924000",
    "end": "1932950"
  },
  {
    "text": "Because you can think of H\nto the m is log n to the n,",
    "start": "1932950",
    "end": "1939139"
  },
  {
    "text": "but log n is just to\nlog log n to the n",
    "start": "1939140",
    "end": "1945100"
  },
  {
    "text": "And the log log n cancels out,\nso you have 2 to the log n. So you have-- oh I\ndid everything as s.",
    "start": "1945100",
    "end": "1954130"
  },
  {
    "text": "Sorry. S. The n here is s. S. S. S.",
    "start": "1954130",
    "end": "1965767"
  },
  {
    "text": "So you have s. Now, remember, I\ntold you, oh, we'll",
    "start": "1965767",
    "end": "1970860"
  },
  {
    "text": "need these set of parameters\nas opposed to the 0 1. It's natural to think of\nH as 0 1, and m is log n.",
    "start": "1970860",
    "end": "1976509"
  },
  {
    "text": "That's much more natural. We're used, as computer\nscientists, to think in binary. Now, we're thinking of log s.",
    "start": "1976510",
    "end": "1982840"
  },
  {
    "text": "It's like, really, how\nannoying can you be? And the reason is it's for this. Now, we need it.",
    "start": "1982840",
    "end": "1988980"
  },
  {
    "text": "Why? Now, we take f that is going to\nbe the extension of size poly",
    "start": "1988980",
    "end": "2000340"
  },
  {
    "text": "log s.  OK? And we'll see the poly\nwill need to be big enough.",
    "start": "2000340",
    "end": "2006480"
  },
  {
    "text": "We'll talk about it in a second. But the field, we don't\nwant more than poly log s. And the reason is we want\nF to the m to be poly s.",
    "start": "2006480",
    "end": "2019030"
  },
  {
    "text": "So we know H to the m is s. If F is only poly bigger,\nthan we have this is poly s.",
    "start": "2019030",
    "end": "2028030"
  },
  {
    "text": " And that's important for us. OK, note, if H was just 0\n1, so the size of H was 2,",
    "start": "2028030",
    "end": "2037860"
  },
  {
    "text": "we couldn't keep F poly and\nwe couldn't keep F constant. You'll see, F will\nneed to grow with m.",
    "start": "2037860",
    "end": "2044240"
  },
  {
    "text": "And so, for soundness,\nm F will need to be bigger than m\ntimes H. Actually,",
    "start": "2044240",
    "end": "2053949"
  },
  {
    "text": "there's also d\nthat will come in. It's significantly bigger. So if we take H to\nbe 2, we'll need",
    "start": "2053949",
    "end": "2061199"
  },
  {
    "text": "to take F to be at least log n. And then, we'll have F to the m\nis log n to the power of log n.",
    "start": "2061199",
    "end": "2066310"
  },
  {
    "text": "That's super poly. And I want F to\nthe m to be poly.",
    "start": "2066310",
    "end": "2072099"
  },
  {
    "text": "OK. So we do this. So now, what is the PCP? ",
    "start": "2072100",
    "end": "2078730"
  },
  {
    "text": "Actually, I'll\nright there the PCP. But now, let's just\nfinish recalling the GKR.",
    "start": "2078730",
    "end": "2084260"
  },
  {
    "text": "So what does the\nverifier do in the GKR, the prover do in the GKR? He computes all these\nlow-degree extensions.",
    "start": "2084260",
    "end": "2090580"
  },
  {
    "text": "And then, the GKR consists of\nd phases going from the output",
    "start": "2090580",
    "end": "2096280"
  },
  {
    "text": "layer to the input layer,\nwhere in each phase we run two sumcheck protocols in\nparallel where the verifier uses",
    "start": "2096280",
    "end": "2104050"
  },
  {
    "text": "the same randomness. And what the sumcheck\nprotocol does is it reduces from\nchecking two values here",
    "start": "2104050",
    "end": "2113079"
  },
  {
    "text": "to reducing checking two\nvalues in the layer below. And we go kind of from checking\nand until we get to the input,",
    "start": "2113080",
    "end": "2120810"
  },
  {
    "text": "and the input the verifier\ncan check on his own. That's the idea. OK?",
    "start": "2120810",
    "end": "2126110"
  },
  {
    "text": "OK. Now, let's just recall, in\na sumcheck protocol here, each sumcheck protocol,\nif you remember--",
    "start": "2126110",
    "end": "2133279"
  },
  {
    "text": "maybe you don't, the details\nare not so important right now-- you go from V i in\nthe extension, which",
    "start": "2133280",
    "end": "2140859"
  },
  {
    "text": "is, let's say, V\ni tilde of some z, and you write it as this is kind\nof sum of points in H to the m,",
    "start": "2140860",
    "end": "2154270"
  },
  {
    "text": "because that's the definition\nof extension, times some chi P",
    "start": "2154270",
    "end": "2160075"
  },
  {
    "text": "z-- this is the function\nthat checks equality. Again, it's not important. But what's important\nto me to show is that--",
    "start": "2160075",
    "end": "2167860"
  },
  {
    "text": "and then you do sum\nover P w1 w2 in H of m,",
    "start": "2167860",
    "end": "2173650"
  },
  {
    "text": "and you convert V i to either-- ",
    "start": "2173650",
    "end": "2179901"
  },
  {
    "text": "if this is a plus\ngate, you convert it to the plus of the wires\nbelow with some duplication",
    "start": "2179902",
    "end": "2187212"
  },
  {
    "text": "You check the multiplication. So, in other words,\nwhat this is,",
    "start": "2187212",
    "end": "2192670"
  },
  {
    "text": "or I should say what this is-- let me just open this. What is V i P? It's if it's an add P w1 w2--",
    "start": "2192670",
    "end": "2206270"
  },
  {
    "text": "so if point P is this just the\naddition of the two wires below,",
    "start": "2206270",
    "end": "2211480"
  },
  {
    "text": "then you replace P with w1\nwith V i minus 1 w1 plus V i",
    "start": "2211480",
    "end": "2220840"
  },
  {
    "text": "minus 1 w2. ",
    "start": "2220840",
    "end": "2229960"
  },
  {
    "text": "And plus, if it was not an\nadd gate, if it's a mult gate,",
    "start": "2229960",
    "end": "2237890"
  },
  {
    "text": "then you replace it with\nthe multiplication of V i minus 1 w1 times\nV i minus 1 w2.",
    "start": "2237890",
    "end": "2246350"
  },
  {
    "text": "So the idea was-- and all this is times this chi.",
    "start": "2246350",
    "end": "2254490"
  },
  {
    "text": " But again, how do we go from\nlayer i to one layer below?",
    "start": "2254490",
    "end": "2263950"
  },
  {
    "text": "We take that element\nin the extension, we think of it as a sum-- that's the definition of\na low-degree extension.",
    "start": "2263950",
    "end": "2269900"
  },
  {
    "text": "It's the sum of the elements\nin the circuit itself with some function,\nwith some weight.",
    "start": "2269900",
    "end": "2276820"
  },
  {
    "text": "And now, we look at the value. What is the value of this gate? Well, if it's an and gate, it's\nthe sum of the two children.",
    "start": "2276820",
    "end": "2286537"
  },
  {
    "text": "And if it's a mult gate, it\nshould be the multiplication of the two children. And so add i just outputs\n1 of these-- if w1,",
    "start": "2286537",
    "end": "2295180"
  },
  {
    "text": "w2 are the children of P, 0\notherwise, similarly mult. But we do everything\nin the extension.",
    "start": "2295180",
    "end": "2301915"
  },
  {
    "text": "We look at everything\nin the extension, because we want to think\nof it as a polynomial. And once we have these\nare all polynomials,",
    "start": "2301915",
    "end": "2309010"
  },
  {
    "text": "then this is just a sumcheck. And we saw sumcheck how\nto do it efficiently. So now, the point is GKR\nconsists of only these 2d",
    "start": "2309010",
    "end": "2316470"
  },
  {
    "text": "sumchecks. So now, let me go to my PCP. ",
    "start": "2316470",
    "end": "2332860"
  },
  {
    "text": "I'll erase this. So here is our PCP. ",
    "start": "2332860",
    "end": "2341530"
  },
  {
    "text": "Essentially, my PCP is\njust GKR but opened up. Completely,\ncompletely unraveled.",
    "start": "2341530",
    "end": "2349360"
  },
  {
    "text": "OK, so here's my PCP. I have my x and w. Here's what I do.",
    "start": "2349360",
    "end": "2355390"
  },
  {
    "text": "I'm going to compute all the\nV i tilde, the extension,",
    "start": "2355390",
    "end": "2364329"
  },
  {
    "text": "the values of all the gates\nin each wire, for every z--",
    "start": "2364330",
    "end": "2371290"
  },
  {
    "text": "for every z in F to the m. It's important, all this is\ngoing to be part of the PCP.",
    "start": "2371290",
    "end": "2378630"
  },
  {
    "text": "So if F to the m is\nmore than polynomial, my PCP is superpolynomial. so F to the m has\nto be polynomial.",
    "start": "2378630",
    "end": "2385250"
  },
  {
    "text": "This is already size polynomial. Yeah. AUDIENCE: Do we still\nhave [INAUDIBLE]",
    "start": "2385250",
    "end": "2395240"
  },
  {
    "text": "YAEL KALAI: Again, sorry? AUDIENCE: Do we still\nhave the restriction on the [INAUDIBLE] [? x ?]\nto have that [INAUDIBLE]",
    "start": "2395240",
    "end": "2402305"
  },
  {
    "text": "YAEL KALAI: Oh,\nyeah, yeah, yeah. Yeah, yeah, yeah OK, good, good. Yes. So for GKR, we had a\nrestriction that the circuit--",
    "start": "2402305",
    "end": "2410750"
  },
  {
    "text": "to do GKR, we said GKR is like\nproving that bounded depth circuit [INAUDIBLE] is y.",
    "start": "2410750",
    "end": "2416940"
  },
  {
    "text": "And we had a restriction\nthat the circuit has to be bounded space uniform.",
    "start": "2416940",
    "end": "2423720"
  },
  {
    "text": "Or, in other words, we needed\nto ensure that add i and mult i, this extended n i\nand extended mult i,",
    "start": "2423720",
    "end": "2430130"
  },
  {
    "text": "are computed efficiently. 3SAT has that property.",
    "start": "2430130",
    "end": "2436880"
  },
  {
    "text": "Again, I didn't go\ninto the details, but the 3SAT is very uniform. Given a phi and x, it's\nvery uniform to check.",
    "start": "2436880",
    "end": "2443410"
  },
  {
    "text": "It's a logspace uniform. And then, we can convert it,\nas Rachel did two weeks ago,",
    "start": "2443410",
    "end": "2450190"
  },
  {
    "text": "to one that by increasing\nthe depth by poly factors,",
    "start": "2450190",
    "end": "2457300"
  },
  {
    "text": "so keeping it poly\nlog, you can make add i at tilde that and multi\nbe efficiently computable.",
    "start": "2457300",
    "end": "2464470"
  },
  {
    "text": "So yeah, great. That's a very good question. So yes. Good. So this is going to\nbe part of the PCP.",
    "start": "2464470",
    "end": "2472380"
  },
  {
    "text": "But that's not all. By the way, we\nshould also give-- we give this for every i from\nthe input layer 0, 1 up to d.",
    "start": "2472380",
    "end": "2482770"
  },
  {
    "text": "This is output.  And this is the input layer.",
    "start": "2482770",
    "end": "2488530"
  },
  {
    "text": "We have to give him\nthe input layer, because the poor\nverifier doesn't have w. So he doesn't have\nactually the input.",
    "start": "2488530",
    "end": "2494530"
  },
  {
    "text": "Before, in GKR,\nhe had the input. Here, he doesn't have the input. But we're going to give him the\nlow-degree extension of this w.",
    "start": "2494530",
    "end": "2501670"
  },
  {
    "text": "OK, good. OK, so I'm the\nverifier, what do I do? I need to verify the sumchecks?",
    "start": "2501670",
    "end": "2507170"
  },
  {
    "text": "Who do I interact\nwith sumchecks? I'll put all the possible\nanswers in the oracle. So now, we do 2d sumchecks.",
    "start": "2507170",
    "end": "2515530"
  },
  {
    "text": "So for every\npossible, for every i",
    "start": "2515530",
    "end": "2525410"
  },
  {
    "text": "and for every z in\nthe GKR protocol, we may need to do a sumcheck.",
    "start": "2525410",
    "end": "2531380"
  },
  {
    "text": "Because in the sumcheck\nprotocol, in the GKR, how does it look like? The verifier first\ndecides, OK, prove",
    "start": "2531380",
    "end": "2539089"
  },
  {
    "text": "the output layer is correct. Let's say the output,\nthe z is fixed. Fine. Then, he chooses randomness,\nrandomness, randomness sum",
    "start": "2539090",
    "end": "2545475"
  },
  {
    "text": "of sumcheck. It reduces the checking z-- d minus 1 in a random z.",
    "start": "2545475",
    "end": "2553490"
  },
  {
    "text": "The z is determined by the\nrandom point of the verifier. So which z do I put?",
    "start": "2553490",
    "end": "2559260"
  },
  {
    "text": "And I want to show a sumcheck\nfor every possible z. So for every possible z,\nI'm going to put in the PCP",
    "start": "2559260",
    "end": "2568145"
  },
  {
    "text": "a sumcheck. So I'm going to give a sumcheck. I'm going to add all\nthe possible transcripts",
    "start": "2568145",
    "end": "2577069"
  },
  {
    "text": "for a sumcheck\ncorresponding to V i",
    "start": "2577070",
    "end": "2582780"
  },
  {
    "text": "z or maybe to V i\nequals V i tilde z.",
    "start": "2582780",
    "end": "2591350"
  },
  {
    "text": "So for every i and z, I'm going\nto give a sumcheck with respect to randomness r\nfrom the verifier.",
    "start": "2591350",
    "end": "2600930"
  },
  {
    "text": "So for every i, for every\nz, and for any randomness r of the verifier. Now, how much randomness does\nthe verifier use in a sumcheck",
    "start": "2600930",
    "end": "2609830"
  },
  {
    "text": "protocol? So remember, the sumcheck\nis sum over H to the 3m kind",
    "start": "2609830",
    "end": "2616819"
  },
  {
    "text": "of variables. OK? It's sum over P w1, w2,\nall of them in H to the m.",
    "start": "2616820",
    "end": "2623210"
  },
  {
    "text": "So the r is going to be\nfor every r in F to the 3m.",
    "start": "2623210",
    "end": "2629130"
  },
  {
    "text": "Because in the sumcheck\nprotocol, what you do, is every single H,\nevery single kind of--",
    "start": "2629130",
    "end": "2635000"
  },
  {
    "text": "you have 3m variables. Every one you give a random\nfield element to reduce-- get rid of one of the sums.",
    "start": "2635000",
    "end": "2641880"
  },
  {
    "text": "So the verifier will\nchoose r1 up to r 3m.",
    "start": "2641880",
    "end": "2648410"
  },
  {
    "text": "So 3m field elements. So for every r, I'm going\nto actually give you",
    "start": "2648410",
    "end": "2656000"
  },
  {
    "text": "the transcript. So now, I know I'm going to\ngive you the entire transcript. ",
    "start": "2656000",
    "end": "2661970"
  },
  {
    "text": "But here is the thing,\nI'm going to have a sumcheck for all of them.",
    "start": "2661970",
    "end": "2667340"
  },
  {
    "text": "And now, the verifier. OK. But we need to be careful. We don't just give for\nevery r a sumcheck. If I knew r, I would cheat.",
    "start": "2667340",
    "end": "2673610"
  },
  {
    "text": "So what I mean here is for every\nsumcheck, for every V i, for r1,",
    "start": "2673610",
    "end": "2685270"
  },
  {
    "text": "I'm going to give all\nthe outputs for r1, all the kind of answers\nof the sumcheck for r1.",
    "start": "2685270",
    "end": "2691720"
  },
  {
    "text": "Then, for each one of\nthem, for every r2, all the possible answers. So no repetition.",
    "start": "2691720",
    "end": "2697640"
  },
  {
    "text": "You can't have two\ndifferent elements. You can't have one\nvalue if you had r1, r2,",
    "start": "2697640",
    "end": "2704060"
  },
  {
    "text": "but later different\nr's, or r1 or r2-- for every possible partial\ntranscript, you give a value.",
    "start": "2704060",
    "end": "2713030"
  },
  {
    "text": "That's what the PCP has in it. So for every--",
    "start": "2713030",
    "end": "2718370"
  },
  {
    "text": "I should say, yeah-- i, for every z, and for every,\nmaybe I should write it as, r1",
    "start": "2718370",
    "end": "2726845"
  },
  {
    "text": "up to r 3m, I have a transcript.",
    "start": "2726845",
    "end": "2734340"
  },
  {
    "text": "I should have all partial\ntranscripts of sumcheck with",
    "start": "2734340",
    "end": "2750010"
  },
  {
    "text": "respect to V i equals V z\nand randomness r1 up to r j",
    "start": "2750010",
    "end": "2760450"
  },
  {
    "text": "for every j between, I\ndon't know, 1 and 3m.",
    "start": "2760450",
    "end": "2772805"
  },
  {
    "text": " OK, so for every r1 I will\nsay, what would be my answer?",
    "start": "2772805",
    "end": "2783450"
  },
  {
    "text": "So now I have F to the m answers\nfor every one of these answers.",
    "start": "2783450",
    "end": "2789140"
  },
  {
    "text": "For every r2, I'm going to\ntell you, what is the answer? For every-- sorry,\nI said it wrong.",
    "start": "2789140",
    "end": "2797160"
  },
  {
    "text": "For every r1, I would\ngive it all the answer. I have F. Each one is one field.",
    "start": "2797160",
    "end": "2802560"
  },
  {
    "text": "So for every r1, I'll\ntell you the answer. That's F options because\nthere are F options for r1.",
    "start": "2802560",
    "end": "2808799"
  },
  {
    "text": "And then, out of these F-- for\neach of these F's, for every r2, I'm going to give you\nwhat the prover will say.",
    "start": "2808800",
    "end": "2815880"
  },
  {
    "text": "That that's F squared. And then, for each of these,\nI'm going to give you r3. So really, what this\nPCP-- for every Vi--",
    "start": "2815880",
    "end": "2823170"
  },
  {
    "text": "for every such Vi-- or for every kind of Vi\nz, for every possible r1,",
    "start": "2823170",
    "end": "2831540"
  },
  {
    "text": "I'm going to give\nyou-- this is over r1. I'm going to give you the\npossible answers in the sumcheck protocol.",
    "start": "2831540",
    "end": "2837240"
  },
  {
    "text": "If the prover in the-- if\nthe verifier in the sumcheck protocol, the first randomness\nwas this r1, this r1, this r1,",
    "start": "2837240",
    "end": "2843038"
  },
  {
    "text": "I'm going to write all\nof these in the PCP. And then, for each\nr1, every possible r2,",
    "start": "2843038",
    "end": "2848350"
  },
  {
    "text": "I'm going to write my answers. And then, for each r1 or\nr2, for every possible r3,",
    "start": "2848350",
    "end": "2855240"
  },
  {
    "text": "I'm going to write my answers. It seems like an\nexponential tree, and it is an exponential tree. But the depth is so small.",
    "start": "2855240",
    "end": "2862580"
  },
  {
    "text": "So this is a huge tree,\nbut this tree is only of size F to the m-- or to the 3--",
    "start": "2862580",
    "end": "2867870"
  },
  {
    "text": "I'm sorry-- which is polynomial. It's S to the 3rd.",
    "start": "2867870",
    "end": "2873839"
  },
  {
    "text": "And you're right that this is\nnot good enough for practice, but then there is a lot\nof optimization in the GKR",
    "start": "2873840",
    "end": "2880050"
  },
  {
    "text": "that make it quasi-linear\nand, today, even linear. So you can actually optimize\nthis to get linear time, but--",
    "start": "2880050",
    "end": "2888287"
  },
  {
    "text": "or-- but-- or\nquasi-linear as a PCP. But for now, we don't care about\nthese polynomial is good enough",
    "start": "2888288",
    "end": "2894089"
  },
  {
    "text": "for us. So for every i and for\nevery z, we give this tree.",
    "start": "2894090",
    "end": "2901329"
  },
  {
    "text": "That's the PCP.  That's it. ",
    "start": "2901330",
    "end": "2910020"
  },
  {
    "text": "OK, so-- yeah? AUDIENCE: Doesn't the sumcheck\nprotocol rely on the fact that F is big?",
    "start": "2910020",
    "end": "2916141"
  },
  {
    "text": "YAEL KALAI: Good,\ngood, good, good, good. Fantastic. You're like, wait,\nthat's a problem.",
    "start": "2916142",
    "end": "2921600"
  },
  {
    "text": "If I require F to be small,\ndo we even get soundness? That's a great question.",
    "start": "2921600",
    "end": "2927609"
  },
  {
    "text": "So the answer is,\nbarely, but yes. [LAUGHTER] So let's see. What's the-- OK, what is\nthe soundness that we get?",
    "start": "2927610",
    "end": "2936360"
  },
  {
    "text": "For it to be sound, Each\nsumcheck, so that the-- OK, so let's talk\nabout soundness.",
    "start": "2936360",
    "end": "2942390"
  },
  {
    "text": "Maybe I'll put it here.  Let's talk about soundness here\nfor a second because you raised",
    "start": "2942390",
    "end": "2950590"
  },
  {
    "text": "a very-- but you\nknow what, actually, before we talk about soundness-- I'll jump to soundness. You have a very good point.",
    "start": "2950590",
    "end": "2956530"
  },
  {
    "text": "We'll talk about soundness. But just to make sure the\nconstruction is clear, so let me just reiterate one\nlast time I'm a PCP prover.",
    "start": "2956530",
    "end": "2966190"
  },
  {
    "text": "I want to convince you guys that\nI have a satisfying assignment to a three-step formula.",
    "start": "2966190",
    "end": "2971430"
  },
  {
    "text": "I have my w. What I do, I construct\na low-degree extension of my w, my witness.",
    "start": "2971430",
    "end": "2978400"
  },
  {
    "text": "But also, I have\nthis entire circuit that verifies this witness. And I'm going to construct a\nlow-degree extension of each",
    "start": "2978400",
    "end": "2985000"
  },
  {
    "text": "and every layer in this circuit. Now, the way I wrote\nit, actually, I will construct a low-degree\nextension of x and w.",
    "start": "2985000",
    "end": "2991082"
  },
  {
    "text": "That's kind of-- if I think\nof the input is x and w and to construct a\nlow-degree extension of both. But you-- the verifier knows x.",
    "start": "2991082",
    "end": "2997550"
  },
  {
    "text": "So if I construct a\nlow-degree extension of w, he himself can construct a\nlow-degree extension of x and w",
    "start": "2997550",
    "end": "3002910"
  },
  {
    "text": "together. So in the PCP, because I\ndon't want to-- in the PCP,",
    "start": "3002910",
    "end": "3008090"
  },
  {
    "text": "I don't want to put x in there. The verifier has x. And if I have the freedom\nto put x in there,",
    "start": "3008090",
    "end": "3013240"
  },
  {
    "text": "and you don't read it,\nthen I can put the wrong x. So I'm just going to put V0 is\njust going to be of the witness.",
    "start": "3013240",
    "end": "3022650"
  },
  {
    "text": "I'm going to think\nof x as fixed. So I'm just going to construct\na low-degree extension of w. And then I'm going to construct\na low-degree extension of each",
    "start": "3022650",
    "end": "3029930"
  },
  {
    "text": "and every layer of the circuit. And I'm going to go-- for\nevery layer and for every z,",
    "start": "3029930",
    "end": "3038410"
  },
  {
    "text": "I'm going to construct all\nthe possible prover messages in the sumcheck protocol.",
    "start": "3038410",
    "end": "3044370"
  },
  {
    "text": "Now, because the randomness,\nthe options for the number",
    "start": "3044370",
    "end": "3050700"
  },
  {
    "text": "of possible random bits from\nthe verifier is only F to the 3m because there are 3m\nvariables, and f is the field.",
    "start": "3050700",
    "end": "3061900"
  },
  {
    "text": "So it's only after the 3m. Then, this tree is only going\nto be of size f to the 3m,",
    "start": "3061900",
    "end": "3067440"
  },
  {
    "text": "so it's not too bad. And I put all of them. I put all the possible\nsumchecks in there.",
    "start": "3067440",
    "end": "3073860"
  },
  {
    "text": "So it's F to the 3m for every-- I have this size for\nevery i and for every z.",
    "start": "3073860",
    "end": "3080370"
  },
  {
    "text": "OK, so for every i, i is\nonly D. It's this is small, and z is another\nf to the m I pay.",
    "start": "3080370",
    "end": "3085619"
  },
  {
    "text": "Fine. So after for. So for every z and for every\ni, i have the sumcheck.",
    "start": "3085620",
    "end": "3094540"
  },
  {
    "text": "Now, what the-- what\nis-- so that's the PCP. But now what's-- what\ndoes the verifier do? What is V?",
    "start": "3094540",
    "end": "3099860"
  },
  {
    "text": "I need to define-- I told you how to construct\nthis pi efficiently. And it's-- but what does V do?",
    "start": "3099860",
    "end": "3107380"
  },
  {
    "text": "So what does-- what\nV does, he says, I'm going to pretend that I'm\ninteracting with a GKR prover.",
    "start": "3107380",
    "end": "3114720"
  },
  {
    "text": "So he says, look,\nwhat is the output? He's going to read\nthe output, VD. And he's going to expect a 1.",
    "start": "3114720",
    "end": "3120750"
  },
  {
    "text": "If he sees a 0, so\nthat's one query. I'm going to read the output. If it's 1, good. I'm happy.",
    "start": "3120750",
    "end": "3126396"
  },
  {
    "text": "Now he's going to go from\nverifying D verifying D minus 1, D minus 2, D minus 3.",
    "start": "3126396",
    "end": "3132240"
  },
  {
    "text": "Now he wants to\ntalk to a prover. He said, OK, here is my\nrandomness, my first message of the sumcheck. Give me back something.",
    "start": "3132240",
    "end": "3138270"
  },
  {
    "text": "OK. This is the prover. The prover is fixed in the PCP. OK, so he gets back an answer,\nda, da, da, da, da, da.",
    "start": "3138270",
    "end": "3145250"
  },
  {
    "text": "Good. Now, here, these at the end,\nthis defines V i minus 1",
    "start": "3145250",
    "end": "3153500"
  },
  {
    "text": "Z. This should be all kind\nof elements in V minus 1 z.",
    "start": "3153500",
    "end": "3158550"
  },
  {
    "text": "Now, actually, here,\nwhat you have here is, at the end of the GKR protocol,\nyou're left with two V's, right?",
    "start": "3158550",
    "end": "3166320"
  },
  {
    "text": "So if you verify\nhere, you'll have-- at the end, you'll have\nV, I don't know, 0 and V--",
    "start": "3166320",
    "end": "3172230"
  },
  {
    "text": "z0 and z1. You'll verify-- you need to\nverify two points because we did two sumcheck all the way.",
    "start": "3172230",
    "end": "3177270"
  },
  {
    "text": "So fine, he sees these two. He checks. There's these. He checks that they're equal.",
    "start": "3177270",
    "end": "3182660"
  },
  {
    "text": "This is only 1. So we're giving him all the\nlow-degree extension of Vi",
    "start": "3182660",
    "end": "3188250"
  },
  {
    "text": "minus 1. He checks, and oh, yeah,\nthis is-- corresponds. This corresponds. This is just to ensure\nthat he doesn't put",
    "start": "3188250",
    "end": "3194370"
  },
  {
    "text": "different ones in different-- here, he may-- in this branch,\nhe may put the value of Z0",
    "start": "3194370",
    "end": "3202140"
  },
  {
    "text": "to be something,\nand in this branch, he may put the value of\nZ0 to be something else. That's not good for us.",
    "start": "3202140",
    "end": "3208900"
  },
  {
    "text": "So we just check\nbecause he put aside all the low-degree extensions. So he checks that it's\nequal to what he gave us.",
    "start": "3208900",
    "end": "3215460"
  },
  {
    "text": "And we continue with that. OK? ",
    "start": "3215460",
    "end": "3230500"
  },
  {
    "text": "One second. Actually, I'm not sure. Maybe what I said is incorrect. I'm not actually sure\nthat this is a problem.",
    "start": "3230500",
    "end": "3236660"
  },
  {
    "text": "Even if he gives\nus different-- let me think about it for a second. ",
    "start": "3236660",
    "end": "3248630"
  },
  {
    "text": "Actually, I'm not even\nsure that we need-- we can just put the sumchecks.",
    "start": "3248630",
    "end": "3253790"
  },
  {
    "text": "Even if he gives us-- even if he gives us-- ",
    "start": "3253790",
    "end": "3268430"
  },
  {
    "text": "no, OK, yeah. I want to say, even\nif it gives us, in this branch and this\nbranch, different things,",
    "start": "3268430",
    "end": "3274880"
  },
  {
    "text": "why do we care? It's like, we ran the sumcheck,\nand the sumcheck is sound. But we do care a little bit\nbecause then, in the next round,",
    "start": "3274880",
    "end": "3282040"
  },
  {
    "text": "which--  let me think. You know what, I'm\nnot actually-- what?",
    "start": "3282040",
    "end": "3289030"
  },
  {
    "text": "AUDIENCE: [? My ?]\n[? understanding ?] [? is ?] that you sort of just lay\nout the whole randomness of the verifier, right? And then verifier [INAUDIBLE]\nactually [? interacting ?] [?",
    "start": "3289030",
    "end": "3294773"
  },
  {
    "text": "with the ?] prover\njust like [INAUDIBLE]. YAEL KALAI: Exactly. You let all the-- so yeah. So I don't think, actually, you\nneed to give these specific.",
    "start": "3294773",
    "end": "3302400"
  },
  {
    "text": "You can just give-- for every Vi tilde, you give--\nbut it's the same because you",
    "start": "3302400",
    "end": "3307890"
  },
  {
    "text": "give for every Vi tilde. So actually, it's-- I think\nthese two are the same. So-- OK. What I-- I guess what I said is,\nthese can be-- maybe Vi minus 1",
    "start": "3307890",
    "end": "3318930"
  },
  {
    "text": "of z0 appears here and appears\nhere, and they're different. Are we worried? We're not really\nworried, because it's",
    "start": "3318930",
    "end": "3325243"
  },
  {
    "text": "like-- you think of it, it\ninteracts with the prover. The prover-- the cheating\nprover may give him different z here and different z here.",
    "start": "3325243",
    "end": "3331400"
  },
  {
    "text": "But later-- the point is, later,\nyou'll have-- in Vi minus 1, you'll just continue. So actually, you\njust need to give--",
    "start": "3331400",
    "end": "3337760"
  },
  {
    "text": "but really, I think\nthe two are equivalent, so it doesn't really matter. OK, so this is between\nhow you verify.",
    "start": "3337760",
    "end": "3344050"
  },
  {
    "text": "And at the end, at the\nend, at the end of the GKR, the verifier needs\nto read the input. He needs to check the\ninput in some locations.",
    "start": "3344050",
    "end": "3351460"
  },
  {
    "text": "He doesn't have the input. But he does, because we gave him\nthe low-degree extension of w.",
    "start": "3351460",
    "end": "3358720"
  },
  {
    "text": "So once he has the\nlow-degree extension of w, he can compute anything.",
    "start": "3358720",
    "end": "3364360"
  },
  {
    "text": "So the verifier needs to compute\na low-degree extension of x",
    "start": "3364360",
    "end": "3369960"
  },
  {
    "text": "and w, but any point in the\nlow-degree extension of x and w",
    "start": "3369960",
    "end": "3375720"
  },
  {
    "text": "is a point in the low-degree--\nis a sum of points in the low-degree\nextension of x and point",
    "start": "3375720",
    "end": "3381930"
  },
  {
    "text": "in the low-degree\nextension of w. So every point in the\nlow-degree extension of x and w,",
    "start": "3381930",
    "end": "3389460"
  },
  {
    "text": "you can write as a\nweighted sum of a point in the low-degree\nextension of x and a point",
    "start": "3389460",
    "end": "3394740"
  },
  {
    "text": "in the low-degree\nextension of w. So once he needs to read the\npoint in the extension of w,",
    "start": "3394740",
    "end": "3400480"
  },
  {
    "text": "he has it here. So that's how the verifier does. So he really-- he's--",
    "start": "3400480",
    "end": "3405930"
  },
  {
    "text": "it's interesting,\nthis PCP, he-- as if he's talking to the\nprover, but the prover is sitting in the\nsky in the PCP.",
    "start": "3405930",
    "end": "3413130"
  },
  {
    "text": "The prover's strategy has just\nkind of opened up in the oracle.",
    "start": "3413130",
    "end": "3418470"
  },
  {
    "text": "OK? OK, great. So now, any questions before\nwe talk about soundness.",
    "start": "3418470",
    "end": "3423809"
  },
  {
    "text": "Yeah. AUDIENCE: [INAUDIBLE]\nthis protocol, the buffer versus the\n[INAUDIBLE] graphed.",
    "start": "3423810",
    "end": "3430290"
  },
  {
    "text": "And then [INAUDIBLE]. YAEL KALAI: So right. OK. Good, good, good question. The verify-- great question.",
    "start": "3430290",
    "end": "3437090"
  },
  {
    "text": "The verifier needs to check\nalso that all these things are actually low-degree extension.",
    "start": "3437090",
    "end": "3442900"
  },
  {
    "text": "So what if I said here,\noh, you put Vi tilde z?",
    "start": "3442900",
    "end": "3448121"
  },
  {
    "text": "How do I know that you actually\nput a low-degree extension? Maybe you put a very high\ndegree polynomial there.",
    "start": "3448122",
    "end": "3454060"
  },
  {
    "text": "Maybe you just put an arbitrary\ntruth table of size after them.",
    "start": "3454060",
    "end": "3459410"
  },
  {
    "text": "That would be problematic. So you're totally right\nthat the verifier-- so let me write what the verifier\ndoes maybe before the soundness.",
    "start": "3459410",
    "end": "3467940"
  },
  {
    "text": " Let me actually write it.",
    "start": "3467940",
    "end": "3474280"
  },
  {
    "text": "So the verifier, he runs.",
    "start": "3474280",
    "end": "3482540"
  },
  {
    "text": "The first thing he does, he\nruns V of GKR with its oracle.",
    "start": "3482540",
    "end": "3490965"
  },
  {
    "start": "3490965",
    "end": "3496290"
  },
  {
    "text": "So he runs just the\nGKR, but he thinks of the oracle part as kind of\nthe prover he's talking with.",
    "start": "3496290",
    "end": "3504910"
  },
  {
    "text": "And the other thing he needs\nto do is he needs to check that",
    "start": "3504910",
    "end": "3512599"
  },
  {
    "text": "for every i, Vi tilde\nis of low degree-- is--",
    "start": "3512600",
    "end": "3521200"
  },
  {
    "start": "3521200",
    "end": "3531620"
  },
  {
    "text": "AUDIENCE: Does the original\nverify of GKR do that? Again, doesn't it sound as if\nGKR just relies on [INAUDIBLE]?",
    "start": "3531621",
    "end": "3539010"
  },
  {
    "start": "3539010",
    "end": "3559402"
  },
  {
    "text": "YAEL KALAI: Yeah. What you're saying is that if-- you're right. So what you're saying is--",
    "start": "3559402",
    "end": "3564990"
  },
  {
    "start": "3564990",
    "end": "3571690"
  },
  {
    "text": "what you're saying is if he gave\nVi tilde, that was high degree.",
    "start": "3571690",
    "end": "3576720"
  },
  {
    "text": " Then you're saying\nthe GKR would fail.",
    "start": "3576720",
    "end": "3582810"
  },
  {
    "text": "You would be\nrejected by the GKR. AUDIENCE: It should be. Otherwise, it just doesn't work. YAEL KALAI: It should\nbe rejected by the GKR.",
    "start": "3582810",
    "end": "3588835"
  },
  {
    "start": "3588835",
    "end": "3599353"
  },
  {
    "text": "I think you may be right, but\nactually, I'm not 100% sure now. ",
    "start": "3599353",
    "end": "3605900"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]\nthat Ei is of high degree, but still agreed with the\nhigher or more degree.",
    "start": "3605900",
    "end": "3611030"
  },
  {
    "text": "YAEL KALAI: Yeah. So here's the concern. Here's the concern. The concern is we want to\nmake sure that the verifier is",
    "start": "3611030",
    "end": "3618770"
  },
  {
    "text": "behaving like-- we want to make sure that this\nVi tilde is of low degree.",
    "start": "3618770",
    "end": "3630515"
  },
  {
    "text": "Why? ",
    "start": "3630515",
    "end": "3637630"
  },
  {
    "text": "Sorry. 1 second. ",
    "start": "3637630",
    "end": "3647158"
  },
  {
    "text": "Yeah, actually, I-- ",
    "start": "3647158",
    "end": "3658119"
  },
  {
    "text": "I don't think we need to\ncheck that Vi tilde is a low degree, because-- I agree that we need to check\nthat Vi tilde is of low degree,",
    "start": "3658120",
    "end": "3664430"
  },
  {
    "text": "but I think GKR checks that\nthe tilde is a low degree. So I actually don't\nwant to recheck it.",
    "start": "3664430",
    "end": "3669980"
  },
  {
    "text": "So all I want to do here, I\nthink GKR tests it for you. So we're convinced\nthat the GKR is sound.",
    "start": "3669980",
    "end": "3677560"
  },
  {
    "text": "Let's not recall why it's sound. But let's remember-- we\nlearned that it's sound.",
    "start": "3677560",
    "end": "3683450"
  },
  {
    "text": "So GKR is good. Now, what are we doing? Essentially, what\nwe're saying is, verifier, I'm giving you\nall the possible answers.",
    "start": "3683450",
    "end": "3691990"
  },
  {
    "text": "What is the prover? The prover is the tree. You can think-- what\nis a cheating prover? A cheating prover, for\nevery possible question,",
    "start": "3691990",
    "end": "3700552"
  },
  {
    "text": "he gives you an answer. For every question, he\ngives you an answer. That's what it does. So now you're saying, look,\nI'm going to give you the tree.",
    "start": "3700552",
    "end": "3708190"
  },
  {
    "text": "Now, in general, this tree\nis really, really big. And even in GKR, if\nyou give the entire--",
    "start": "3708190",
    "end": "3715030"
  },
  {
    "text": "if you just open-- GKR has D rounds, D\nrounds of sum check.",
    "start": "3715030",
    "end": "3721700"
  },
  {
    "text": "If you just open the sum\ncheck, it will be terrible. However, GKR has this property\nthat it's kind of memoryless.",
    "start": "3721700",
    "end": "3732540"
  },
  {
    "text": "What do I mean by memoryless? You can compute the\nfirst sum check. Then you don't care\nwhat happened before.",
    "start": "3732540",
    "end": "3739760"
  },
  {
    "text": "All you care is what is\nVi minus one that you cut, and you check those.",
    "start": "3739760",
    "end": "3745290"
  },
  {
    "text": "So now I'm saying--\nso you know, actually, let's think about this. First of all, we can say,\nopen GKR to a huge tree.",
    "start": "3745290",
    "end": "3753610"
  },
  {
    "text": "Any prover-- this\nis true in general. If you had any\ninteractive proof, you can think of\na prover, right?",
    "start": "3753610",
    "end": "3759250"
  },
  {
    "text": "All the possible answers. Think of its strategy\nas a huge, huge tree.",
    "start": "3759250",
    "end": "3764583"
  },
  {
    "text": "Now, of course,\nyou get soundness. You interact with the prover. What's the difference? You can do that with GKR.",
    "start": "3764583",
    "end": "3770400"
  },
  {
    "text": "But of course, if you\ndo this huge tree, it's going to be gigantic\nbecause GKR consists of D kind of subprotocols.",
    "start": "3770400",
    "end": "3780910"
  },
  {
    "text": "Each one is a subject. So now if you think of\nlike a D, [INAUDIBLE] then you'll be too big.",
    "start": "3780910",
    "end": "3786400"
  },
  {
    "text": "But I'm saying we don't\nneed to, because GKR has a property that, actually,\nit consists of this subprotocol.",
    "start": "3786400",
    "end": "3793640"
  },
  {
    "text": "And then all you\nneed to remember-- you don't need to remember\nwhich branch you're on here.",
    "start": "3793640",
    "end": "3799150"
  },
  {
    "text": "All you need to remember is\nwhat are the values here. That's all you need to remember.",
    "start": "3799150",
    "end": "3805119"
  },
  {
    "text": "So there's no\npoint in repeating. It's like you're repeating\nthe tree for no reason.",
    "start": "3805120",
    "end": "3810220"
  },
  {
    "text": "So all you need-- there's a way\nto open this prover in a more efficient way.",
    "start": "3810220",
    "end": "3817110"
  },
  {
    "text": "So by not giving\nthe entire trend, giving kind of a more\nefficient kind of opening, where all the Vi's--",
    "start": "3817110",
    "end": "3823380"
  },
  {
    "text": "all the Vi minus 1z, I'm going\nto say, OK, forget about it. Let's just go from Vi\nminus 1z and continue.",
    "start": "3823380",
    "end": "3830160"
  },
  {
    "text": "Why do you need to repeat\nthis kind of tree 100 times? But you can go from here to\nsimulating an entire GKR prover.",
    "start": "3830160",
    "end": "3841350"
  },
  {
    "text": "Yeah. AUDIENCE: So if I understand\ncorrectly, you're saying, actually, the tree of GKR is\nsuch that most of the parts",
    "start": "3841350",
    "end": "3846990"
  },
  {
    "text": "are copied. And so you don't need\nto repeat the copies. You can just look it up. YAEL KALAI: Exactly. Exactly.",
    "start": "3846990",
    "end": "3852580"
  },
  {
    "text": "Exactly. Exactly. ",
    "start": "3852580",
    "end": "3857830"
  },
  {
    "text": "Actually, in some sense, we're\nrestricting the prover here more than he's restricted in GKR.",
    "start": "3857830",
    "end": "3863540"
  },
  {
    "text": "Exactly. Because in GKR, he\ncan be, you know what? I'm going to remember the\nR's, if he's cheating.",
    "start": "3863540",
    "end": "3869695"
  },
  {
    "text": "And based on these R's,\nI'm going to give you a different strategy. Whatever. Here, we're not even\nletting him do that.",
    "start": "3869695",
    "end": "3875270"
  },
  {
    "text": "We're saying, look, you\ntell me what you are here. From here, now you forget R's. From Vi minus 1,\nwhat's your strategy?",
    "start": "3875270",
    "end": "3882100"
  },
  {
    "text": "And now you forget. From here, what\nis your strategy? So we're really just doing GKR.",
    "start": "3882100",
    "end": "3887780"
  },
  {
    "text": "Now, you write that\nthe Vi minus 1 tilde does need to be of low degree.",
    "start": "3887780",
    "end": "3893819"
  },
  {
    "text": "But the GKR test is for you. So you don't need to\ndo it on your own.",
    "start": "3893820",
    "end": "3899140"
  },
  {
    "text": "But you're right. It's confusing a little bit,\nbecause if you-- if anyone is familiar with\nthe PCP literature,",
    "start": "3899140",
    "end": "3904160"
  },
  {
    "text": "there's always a low\ndegree test in it. So it's kind of\ninteresting this is hidden within the GKR protocol.",
    "start": "3904160",
    "end": "3911660"
  },
  {
    "text": "AUDIENCE: This kind\nof transformation is not only for GKR. As long as there\nis an efficient way",
    "start": "3911660",
    "end": "3916760"
  },
  {
    "text": "to change the prover\ninto a sequence that the verifier\nknows where to compare",
    "start": "3916760",
    "end": "3921948"
  },
  {
    "text": "it will give you a [INAUDIBLE]. YAEL KALAI: Exactly, exactly. So yeah, this proof holds.",
    "start": "3921948",
    "end": "3927030"
  },
  {
    "text": "It's not specific to GKR. You can take any\nsuccinct protocol and interactive protocol\nand lay it open.",
    "start": "3927030",
    "end": "3934730"
  },
  {
    "text": "However, let me just\nmention we have very few-- actually, kind of two examples\nof succinct protocols.",
    "start": "3934730",
    "end": "3942750"
  },
  {
    "text": "So it sounds like you can\ntake any of your choice. Yeah, any, but we\ndon't have much choice. ",
    "start": "3942750",
    "end": "3949838"
  },
  {
    "text": "Coming up with these\nsuccinct, interactive proofs is a super interesting question. I'll talk a little\nbit more about this",
    "start": "3949838",
    "end": "3956690"
  },
  {
    "text": "after we do the\nanalysis of the PCP. So great.",
    "start": "3956690",
    "end": "3964059"
  },
  {
    "text": "Any questions before\nwe move to soundness. So let's talk about soundness.",
    "start": "3964060",
    "end": "3969839"
  },
  {
    "text": "And the question\nthat was raised, which was a great\nquestion, is, wait, f needs",
    "start": "3969840",
    "end": "3975210"
  },
  {
    "text": "to be big to get soundness. So let's really understand\nwhat the size of f needs to be. So to get soundness, we\ndo 2d sum check protocols.",
    "start": "3975210",
    "end": "3984060"
  },
  {
    "text": "Each sum check protocol\nneeds to be pretty sound, because it's enough that\nyou cheat on one of them and we're dead.",
    "start": "3984060",
    "end": "3990810"
  },
  {
    "text": "Now, each sum check\nprotocol, this is just recall that each\nsum check protocol",
    "start": "3990810",
    "end": "4002260"
  },
  {
    "text": "has soundness, which is H/F\ntimes m the number of variables.",
    "start": "4002260",
    "end": "4014670"
  },
  {
    "text": "But for us, it's 3m, because\nwe have 3m variables. This is just the\nsum check protocol.",
    "start": "4014670",
    "end": "4021980"
  },
  {
    "text": "Now, for us, so you can cheat,\nbut with this probability. Now for us, we have 2d.",
    "start": "4021980",
    "end": "4027870"
  },
  {
    "text": "D is polylog n, like the\ndepth of the circuit. So for us, our soundness is--",
    "start": "4027870",
    "end": "4038352"
  },
  {
    "text": "I'm just doing it\nwith union bound. So to cheat, there exists-- needs to be at least a kind\nof on sum check protocol",
    "start": "4038352",
    "end": "4045740"
  },
  {
    "text": "for which you cheated on. So you get by union bound. So we have 2d sum checks,\nand then, therefore,",
    "start": "4045740",
    "end": "4054290"
  },
  {
    "text": "the soundness is 2d\ntimes 3m H divided by F.",
    "start": "4054290",
    "end": "4067810"
  },
  {
    "text": "So now if we want\nsoundness half-- let's say we want F so that\nyou can repeat to increase",
    "start": "4067810",
    "end": "4072940"
  },
  {
    "text": "the soundness-- all\nwe need is that F-- so if we want this to\nbe smaller than half,",
    "start": "4072940",
    "end": "4079599"
  },
  {
    "text": "then we need F to be bigger\nthan 12d m H But that's good.",
    "start": "4079600",
    "end": "4088070"
  },
  {
    "text": "This is log n. I don't know if\nyou guys can see. Log s-- sorry. This is smaller than log s.",
    "start": "4088070",
    "end": "4095440"
  },
  {
    "text": "This is some polylog s. So just make it bigger\nthan all of them.",
    "start": "4095440",
    "end": "4100939"
  },
  {
    "text": "It's still polylog. And polylog s is good\nenough, because then",
    "start": "4100939",
    "end": "4106759"
  },
  {
    "text": "after them is poly s. ",
    "start": "4106760",
    "end": "4122009"
  },
  {
    "text": "So this was soundness. AUDIENCE: Sorry. Why did we need-- I think I just [INAUDIBLE]. Why did we need F to\nthe m to be poly s here?",
    "start": "4122010",
    "end": "4129695"
  },
  {
    "text": "YAEL KALAI: Oh, oh! Good. Why do we need-- you're\nsaying, why can't it be bigger? AUDIENCE: Yeah. YAEL KALAI: Because-- good. Because we want our PCP to\nbe-- so the question is, just",
    "start": "4129696",
    "end": "4138180"
  },
  {
    "text": "to recap, why do\nwe need-- why do we insist that F is not bigger? Why does it have to be\npolynomially related to F?",
    "start": "4138180",
    "end": "4144130"
  },
  {
    "text": "And the reason is we want\nthe PCP to be of type poly s. We want the PCP a to be--",
    "start": "4144130",
    "end": "4151439"
  },
  {
    "text": "we want it to be efficient. We want to efficiently\nconvert a witness to a PCP. And the PCP grows with\nF to the m much more.",
    "start": "4151439",
    "end": "4160630"
  },
  {
    "text": "It's like F to the 3m. And it needs to be repeated. And F to the m is poly--",
    "start": "4160630",
    "end": "4167429"
  },
  {
    "text": "if this is bigger than poly,\nif F is more than poly H,",
    "start": "4167430",
    "end": "4173790"
  },
  {
    "text": "then F to the m will be\nmore than poly H to the m. So that's why we want it to be--\nit's for the sake of efficiency",
    "start": "4173790",
    "end": "4181049"
  },
  {
    "text": "for the PCP to be\nsmall or polynomial related to the circuit.",
    "start": "4181050",
    "end": "4187039"
  },
  {
    "text": "AUDIENCE: Just so I\nunderstand, so here you're saying that the randomness\ncomplexity is polylog n. Now, normally, you'd be like,\nthe proof size is just 2",
    "start": "4187040",
    "end": "4194492"
  },
  {
    "text": "to the randomness complexity. But here, you've been\nmore smart, right? You've found a way to\nmake the pair shorter",
    "start": "4194492",
    "end": "4199740"
  },
  {
    "text": "than it would be otherwise. YAEL KALAI: OK. Good, good, good. So now let's go to the-- we\ndidn't do the complexity yet,",
    "start": "4199740",
    "end": "4205030"
  },
  {
    "text": "but yeah, you're a bit ahead of\nme, but you're totally right. So far we've talked\nabout soundness.",
    "start": "4205030",
    "end": "4210909"
  },
  {
    "text": "Completeness is one,\nbecause the GKR is complete. It has completeness 1. So the sum check\nhas completeness 1.",
    "start": "4210910",
    "end": "4216390"
  },
  {
    "text": "So we're good. We talked about sum checks. Any question about soundness? Any question about\nthe soundness? ",
    "start": "4216390",
    "end": "4224330"
  },
  {
    "text": "Let's talk about the complexity. So the randomness\ncomplexity in the communi--",
    "start": "4224330",
    "end": "4229700"
  },
  {
    "text": "and the query complexity. So how much query and\nrandomness do we need?",
    "start": "4229700",
    "end": "4235110"
  },
  {
    "text": "So the randomness\ncomplexity is-- well, there's 2d-- so\nlet's put here randomness.",
    "start": "4235110",
    "end": "4244966"
  },
  {
    "start": "4244966",
    "end": "4251790"
  },
  {
    "text": "So there's 2d sum checks. So the verifier kind of\ninteracts with his oracle on 2d",
    "start": "4251790",
    "end": "4258780"
  },
  {
    "text": "sum checks. So for each 2d sum check,\nhe needs to toss coins.",
    "start": "4258780",
    "end": "4264070"
  },
  {
    "text": "Now, how much\ncoins does he toss? Well, he needs to generate\nr random in F to the 3m.",
    "start": "4264070",
    "end": "4271719"
  },
  {
    "text": "That's each sum check. You need-- so it's F-- it's like 3m log F\nbits of randomness.",
    "start": "4271720",
    "end": "4280420"
  },
  {
    "text": "Now, this is really polylog\nF. It's like polylog s.",
    "start": "4280420",
    "end": "4285880"
  },
  {
    "text": "It's not log s. This is really poly, poly\nlog s, not just log s.",
    "start": "4285880",
    "end": "4296860"
  },
  {
    "text": "So one can be weighed. We need to be careful,\nbecause, are we sure we're getting an\nefficient PCP here?",
    "start": "4296860",
    "end": "4302330"
  },
  {
    "text": "It's a lot of randomness. Are we sure there's\nno blow up in PCP? And the reason\nthere's no blow up,",
    "start": "4302330",
    "end": "4307610"
  },
  {
    "text": "the reason we have large\nrandomness, yet the PCP is small",
    "start": "4307610",
    "end": "4313000"
  },
  {
    "text": "is exactly because GKR has\nthis property of forgetting.",
    "start": "4313000",
    "end": "4318700"
  },
  {
    "text": "The fact we actually don't\nneed to open the entire tree, because of that, we use\nan additional property.",
    "start": "4318700",
    "end": "4326020"
  },
  {
    "text": "The point is if you know nothing\nabout the PCP, then, of course,",
    "start": "4326020",
    "end": "4331247"
  },
  {
    "text": "as I said, if it's order\nlog s bits of randomness, it's always F poly s. But the fact that there\nare more bits of randomness",
    "start": "4331247",
    "end": "4337080"
  },
  {
    "text": "does not necessarily force\nour PCP to be bigger. We're just not going\nto open it trivially.",
    "start": "4337080",
    "end": "4342870"
  },
  {
    "text": "If we did open it\ntrivially, then we would look at all the random. It'd be a huge tree,\nlike the depth.",
    "start": "4342870",
    "end": "4348639"
  },
  {
    "text": "But because we do\npack it efficiently, we're able to get a\nsmall PCP, even though we have a lot of randomness.",
    "start": "4348640",
    "end": "4355797"
  },
  {
    "text": "AUDIENCE: Is it because\nyou're saying each tree is sized poly and then poly trees? YAEL KALAI: Exactly. Each tree is size poly,\nand they're poly trees.",
    "start": "4355797",
    "end": "4363590"
  },
  {
    "text": "And we're not-- there's a\nmore straightforward way to do it is for each\ntree, append, append.",
    "start": "4363590",
    "end": "4369940"
  },
  {
    "text": "No, we're kind of\ndoing them in chunks. And so we get the efficiency.",
    "start": "4369940",
    "end": "4376520"
  },
  {
    "text": " Let's go for the\nquery complexity.",
    "start": "4376520",
    "end": "4382196"
  },
  {
    "text": " I'll just put it here.",
    "start": "4382196",
    "end": "4387490"
  },
  {
    "text": " So let's see. So for-- again,\nwhat's the query?",
    "start": "4387490",
    "end": "4394110"
  },
  {
    "text": "He does GKR. So he does 2d sum checks. For each sum check, he needs\nto read what the answer is.",
    "start": "4394110",
    "end": "4404250"
  },
  {
    "text": "Each answer, so there's 3m\nrounds that he needs to read.",
    "start": "4404250",
    "end": "4409300"
  },
  {
    "text": "In each answer, he gets kind\nof a univariate polynomial of small degree.",
    "start": "4409300",
    "end": "4416190"
  },
  {
    "text": "Each answer is not\njust one field element. It's actually a\nfew field elements. ",
    "start": "4416190",
    "end": "4428210"
  },
  {
    "text": "So he gets log F elements\ntimes the degree,",
    "start": "4428210",
    "end": "4440940"
  },
  {
    "text": "which will be in each sum\ncheck like poly H at most.",
    "start": "4440940",
    "end": "4446230"
  },
  {
    "text": "And this, again, goes back to\nthe golden eye of what's exactly the degree of the add i multi.",
    "start": "4446230",
    "end": "4451710"
  },
  {
    "text": "It's polynomial. So I'm not-- it's\npolynomial in H. It's polylog H. I don't want\nto-- this is the degree of each",
    "start": "4451710",
    "end": "4461730"
  },
  {
    "text": "of the sum check polynomial. ",
    "start": "4461730",
    "end": "4467010"
  },
  {
    "text": "And the degree is affected\nby the add i multi, which we assumed the degree is poly H.\nBut it's still, again, polylog.",
    "start": "4467010",
    "end": "4476580"
  },
  {
    "text": "So this gives-- so before\nwe take a break, let me--",
    "start": "4476580",
    "end": "4484380"
  },
  {
    "text": "where are we now? So we studied the--\nwe started, actually,",
    "start": "4484380",
    "end": "4490619"
  },
  {
    "text": "this class by\nlooking at sum check. And so I started this\nclass with a regular look that sum check is a miracle.",
    "start": "4490620",
    "end": "4497640"
  },
  {
    "text": "Given sum check, it gives\nyou everything, everything. And I hope that now you see why.",
    "start": "4497640",
    "end": "4503350"
  },
  {
    "text": "So we start by sum check. And we looked at sum\nchecks like, who cares? This sum, modal it\nseems like why would we",
    "start": "4503350",
    "end": "4510150"
  },
  {
    "text": "need to sum over so many\nmultivariate polynomial? Where does that come up?",
    "start": "4510150",
    "end": "4516177"
  },
  {
    "text": "I don't know. It was like, why\nam I learning this? So now what did we do with it?",
    "start": "4516178",
    "end": "4522370"
  },
  {
    "text": "We started with sum check. We saw just by doing\nsum check repeatedly,",
    "start": "4522370",
    "end": "4529090"
  },
  {
    "text": "you can verify any\nlow depth computation. That's pretty amazing.",
    "start": "4529090",
    "end": "4534350"
  },
  {
    "text": "And then we saw that, actually,\nyou can recover the IP equals space space theorem, that GKR\nactually gives you the IP equals",
    "start": "4534350",
    "end": "4541850"
  },
  {
    "text": "space space theorem. And now we see GKR\nactually gives you PCP.",
    "start": "4541850",
    "end": "4547930"
  },
  {
    "text": "And what is GKR? It's just sum checks. So just these sum\nchecks, you kind of",
    "start": "4547930",
    "end": "4554870"
  },
  {
    "text": "unroll them-- unravel\nthem, and you get a PCP with polylog n queries.",
    "start": "4554870",
    "end": "4560040"
  },
  {
    "text": "And not-- it's like efficient. You can take your input,\nyour witness, and efficiently",
    "start": "4560040",
    "end": "4565320"
  },
  {
    "text": "generate this PCP. And in a very--",
    "start": "4565320",
    "end": "4571159"
  },
  {
    "text": "like, a straightforward\nway in a sense. You do your computation. You have your witness.",
    "start": "4571160",
    "end": "4576570"
  },
  {
    "text": "You do the computation. You do all the\nlow-degree extensions. And you convince round by round.",
    "start": "4576570",
    "end": "4582320"
  },
  {
    "text": "You just lay it\nout, and that's it. And you have a PCP. ",
    "start": "4582320",
    "end": "4589760"
  },
  {
    "text": "Any questions about? AUDIENCE: So the fact that\nthe GKR tree can be extended,",
    "start": "4589760",
    "end": "4595020"
  },
  {
    "text": "that relies on just the fact\nthat it consists of these kind of independent subjects, or also\nthe fact that subject itself",
    "start": "4595020",
    "end": "4601680"
  },
  {
    "text": "has-- like, each query\nis just a random-- YAEL KALAI: Good, good, good. So the question is,\nagain, let's understand",
    "start": "4601680",
    "end": "4607050"
  },
  {
    "text": "why do we get this\nPCP that's efficient. Why do we get only\npoly-sized PCP?",
    "start": "4607050",
    "end": "4613110"
  },
  {
    "text": "And the reason we get--\nit's two-- both, twofold. You said both reasons. Reason number one, when we do\neach sum check, after that,",
    "start": "4613110",
    "end": "4622530"
  },
  {
    "text": "we can forget about\nthis randomness. And for each Vi consider. So we really need to write\ndown only kind of d times F",
    "start": "4622530",
    "end": "4632130"
  },
  {
    "text": "to the m sum checks. That's the depth of the circuit\ntimes F to the sum checks.",
    "start": "4632130",
    "end": "4638020"
  },
  {
    "text": "That's number one. But number two, why\nis the sum check? Can we write out\nall the sum checks? I mean, the sum check is\nalso an interactive protocol.",
    "start": "4638020",
    "end": "4645030"
  },
  {
    "text": "Can we actually open it up\nand write the entire thing? And the answer is, well, yeah,\nbut at an exponential cost.",
    "start": "4645030",
    "end": "4654190"
  },
  {
    "text": "But an exponential cost in\nm, the number of variables. But here, the number\nof variables is log.",
    "start": "4654190",
    "end": "4661320"
  },
  {
    "text": "That's important. If m was polylog, we\nwould have been doomed. But m-- or I mean,\nOK, it's not just log.",
    "start": "4661320",
    "end": "4672390"
  },
  {
    "text": "We set the parameters\nso that it's OK. That's what we needed. That's exactly-- so why can we\nopen up this entire sum check?",
    "start": "4672390",
    "end": "4678730"
  },
  {
    "text": "It's because we set F to be\npoly H, and H to the m is S.",
    "start": "4678730",
    "end": "4683940"
  },
  {
    "text": "So we set it up so that\nopening the sum check requires F to the m kind of\nanswers, F to the m answers.",
    "start": "4683940",
    "end": "4696610"
  },
  {
    "text": "Each one is kind of a low-degree\npolynomial, but that's fine, but F to the m of them, or F to\nthe 3m here, because we have--",
    "start": "4696610",
    "end": "4702929"
  },
  {
    "text": "the number of variables is 3m. And we just need to make sure\nthat F to the 3m is polynomial.",
    "start": "4702930",
    "end": "4708739"
  },
  {
    "text": "And to ensure that, we did do\nsome parameter engineering. That's why we didn't go\nthe natural route of taking",
    "start": "4708740",
    "end": "4715490"
  },
  {
    "text": "H to be 2 and m to be log s. That would be natural,\nbut then we would not get. So we actually did need to\ndo some kind of engineering",
    "start": "4715490",
    "end": "4723469"
  },
  {
    "text": "and parameters, like an\nannoying fiddling of parameters. This setting of parameters that\nyou see over and over in any PCP",
    "start": "4723470",
    "end": "4732500"
  },
  {
    "text": "construction, this is--\nwe're not the first. We're actually the last, if\nanything, to come-- to use this.",
    "start": "4732500",
    "end": "4738120"
  },
  {
    "text": "This was used in the '90s in\nthe early PCP constructions. And it's when you look at\nit first, like, really?",
    "start": "4738120",
    "end": "4746210"
  },
  {
    "text": "Like, log n over log log n? Are you kidding me? Like, couldn't you\nfind something nicer? But this is why, because we want\nthese parameters to be poly.",
    "start": "4746210",
    "end": "4755190"
  },
  {
    "text": "Yeah. AUDIENCE: So since\nyou're essentially asking for this to be like\na non-adaptive prover,",
    "start": "4755190",
    "end": "4762750"
  },
  {
    "text": "can you just use the same\nrandomness for each round and then get rid of the\nd factor [INAUDIBLE]?",
    "start": "4762750",
    "end": "4767770"
  },
  {
    "text": "YAEL KALAI: Sorry. So you're saying-- sorry. Your question is--\nyou're saying-- are you talking about the\nfact that this verifier",
    "start": "4767770",
    "end": "4776160"
  },
  {
    "text": "is non-adaptive? AUDIENCE: Or that the prover\nis non-adaptive, I guess. YAEL KALAI: The prover\nin that-- yes, like it's",
    "start": "4776160",
    "end": "4782610"
  },
  {
    "text": "non-adaptive in the\nprevious sum checks. AUDIENCE: [INAUDIBLE] previous. YAEL KALAI: Previous sum checks.",
    "start": "4782610",
    "end": "4787810"
  },
  {
    "text": "yeah, so then what? AUDIENCE: Can you use the same\nrandomness for each round? Like, what would happen if\nyou use the same randomness?",
    "start": "4787810",
    "end": "4793079"
  },
  {
    "text": "YAEL KALAI: No. OK, OK. That's a good question. So you're asking--\nyou're saying, look, we're doing the\nsum check d times.",
    "start": "4793080",
    "end": "4799679"
  },
  {
    "text": "Can't we use the\nsame randomness? And the answer is we cannot. Why? Because you should\nthink if we use",
    "start": "4799680",
    "end": "4805950"
  },
  {
    "text": "the same randomness\nfor different rounds, then you should think\nof, I'm a prover.",
    "start": "4805950",
    "end": "4811450"
  },
  {
    "text": "I'm like, oh, you're going to\nuse the same randomness for all",
    "start": "4811450",
    "end": "4817550"
  },
  {
    "text": "your rounds. I know that, because\nyou're telling me already, that you're going to\nuse the same randomness. So now in the first round,\nI'm going to behave, honestly,",
    "start": "4817550",
    "end": "4825180"
  },
  {
    "text": "just to learn your randomness. Give you-- I'm sorry. I'm not going to behave. I'm going to cheat\nin the first round.",
    "start": "4825180",
    "end": "4831135"
  },
  {
    "text": "So of course, I'm\ngoing to cheat. The output is 1,\neven though it's 0. I'm going to manage to convince\nyou in the first kind of--",
    "start": "4831135",
    "end": "4838630"
  },
  {
    "text": "in the first sum check\nI do, because I'm just going to lie\nconsistently with myself.",
    "start": "4838630",
    "end": "4844790"
  },
  {
    "text": "I'll write to Vi minus--\nto the next layer, and the wrong--\nstill inconsistent. But now I know the randomness,\nbecause you're going to reuse.",
    "start": "4844790",
    "end": "4853150"
  },
  {
    "text": "You see, the point\nis the following. The verifier here should\nbehave like an honest verifier",
    "start": "4853150",
    "end": "4862750"
  },
  {
    "text": "in the GKR. If the verifier\nhere, you cannot-- when you use this\nverifier, he essentially",
    "start": "4862750",
    "end": "4870790"
  },
  {
    "text": "behaves like a GKR verifier. So now you're telling--\nyou're saying, look, why doesn't he use\nthe same randomness",
    "start": "4870790",
    "end": "4877300"
  },
  {
    "text": "for the different subprotocols? Because if he did a\nGKR, then he would fail.",
    "start": "4877300",
    "end": "4883730"
  },
  {
    "text": "Then a cheating prover\ncan take advantage of him. AUDIENCE: Isn't\nthere the difference here that this prover\nis not adaptive?",
    "start": "4883730",
    "end": "4890770"
  },
  {
    "text": "It doesn't remember\nthe randomness. All it depends on is\nV tilde i minus 1.",
    "start": "4890770",
    "end": "4897179"
  },
  {
    "text": "YAEL KALAI: Right. AUDIENCE: So you can't\njust be like, oh, this is the randomness. [INAUDIBLE] YAEL KALAI: Oh, I see. You're saying-- I see.",
    "start": "4897180",
    "end": "4902860"
  },
  {
    "text": "I see. OK, OK. Now I understand your question. You're saying, this guy,\nthis prover is stuck.",
    "start": "4902860",
    "end": "4910900"
  },
  {
    "text": "Sorry. Now I understand\nwhat you're saying. You're saying, look, you're\ntying the hand of this prover. The prover in GKR, he has power.",
    "start": "4910900",
    "end": "4919540"
  },
  {
    "text": "He sees your randomness. And based on that,\nhe can continue. The honest prover, of\ncourse, won't do that. But the cheating prover may.",
    "start": "4919540",
    "end": "4925679"
  },
  {
    "text": "Here, you're saying,\nI'm not going to let the prover do that to me. I'm going to force\nhim to forget.",
    "start": "4925680",
    "end": "4930750"
  },
  {
    "text": "Because I forced\nhim to forget, can I think of using the\nsame randomness? That's a good\nquestion, actually.",
    "start": "4930750",
    "end": "4938190"
  },
  {
    "text": "A great-- very good question. It took me time to understand\nwhat you're asking. ",
    "start": "4938190",
    "end": "4944937"
  },
  {
    "text": "AUDIENCE: Can you use the same-- YAEL KALAI: It's a great-- great point. AUDIENCE: --that same\nmalicious verifier you just said to break that?",
    "start": "4944937",
    "end": "4950650"
  },
  {
    "text": "YAEL KALAI: Well, no, because-- so your point is the following.",
    "start": "4950650",
    "end": "4955660"
  },
  {
    "text": "You know what? Use the same randomness\nin all the subprotocols. Now, in the GKR, it's a big\nproblem, because the prover,",
    "start": "4955660",
    "end": "4962719"
  },
  {
    "text": "he knows what you saw. And he'll use that. He knows the randomness. But in the PCP, the PCP GKR\nprover, his hands are tied.",
    "start": "4962720",
    "end": "4972915"
  },
  {
    "text": "AUDIENCE: Yeah. But the fact that he-- if the prover knows that\nyou're going to do this, then he might be able to\nengineer all of his responses",
    "start": "4972915",
    "end": "4979540"
  },
  {
    "text": "in a way that takes\nadvantage of the correlation of the randomness. AUDIENCE: Exactly. You think the same\nverifier you said.",
    "start": "4979540",
    "end": "4984982"
  },
  {
    "text": "Pretend you have that verifier\nthat cheats [INAUDIBLE] use the same randomness. Now, this tree follows\nthat verifier's strategy.",
    "start": "4984982",
    "end": "4993570"
  },
  {
    "text": "Then shouldn't that break it? AUDIENCE: Even if it doesn't\nfollow just a GKR soundness. AUDIENCE: Yeah. I mean, it is--\nit could be some,",
    "start": "4993570",
    "end": "5000540"
  },
  {
    "text": "but yeah, there's\nthis correlation between the randomness,\nwhich the prover would know about in advance, right?",
    "start": "5000540",
    "end": "5006610"
  },
  {
    "text": "So even though he can't\nremember the randomness, he can engineer a strategy\nto take advantage of the fact that the randomness repeats.",
    "start": "5006610",
    "end": "5012719"
  },
  {
    "text": "YAEL KALAI: Let me\nsay the following to close the discussion. A, the discussion is\nsuper interesting.",
    "start": "5012720",
    "end": "5018480"
  },
  {
    "text": "The question you raised\nis super interesting. You know, we have one\nP set in this class.",
    "start": "5018480",
    "end": "5025420"
  },
  {
    "text": "[LAUGHTER] You gave me a great\nidea for a question. ",
    "start": "5025420",
    "end": "5032130"
  },
  {
    "text": "By the way, before\nwe break, I just want to make a\nquick announcement. So I wrote in the website\nthat the P set will come later",
    "start": "5032130",
    "end": "5040784"
  },
  {
    "text": "during this class,\nbecause I thought it would be good to cover more material. But I know that I wrote it\npretty close to the break.",
    "start": "5040785",
    "end": "5049500"
  },
  {
    "text": "And maybe that's-- so maybe\nI'll put it out earlier,",
    "start": "5049500",
    "end": "5055950"
  },
  {
    "text": "give you two weeks, just because\nI don't want you to sit with it too long. It's just annoying. But if you feel like the\ntime just doesn't work,",
    "start": "5055950",
    "end": "5062790"
  },
  {
    "text": "and you want an extension,\njust let me know. I don't really care,\nto tell you the truth. I just want you\nto think about it",
    "start": "5062790",
    "end": "5068420"
  },
  {
    "text": "and have fun with the material. Yeah. AUDIENCE: When we\nargue soundness, are we using any sort\nof union bound lexeme?",
    "start": "5068420",
    "end": "5074457"
  },
  {
    "text": "YAEL KALAI: Yeah, exactly. We're doing a union bound. Yes, exactly. Because in the soundness,\nwe say the following.",
    "start": "5074457",
    "end": "5080340"
  },
  {
    "text": "We say that in the--\nso essentially,",
    "start": "5080340",
    "end": "5085849"
  },
  {
    "text": "we're talking with the\nprover and the GKR prover. And we're saying for the GKR-- even like a tied GKR\nprover, as you mentioned,",
    "start": "5085850",
    "end": "5093930"
  },
  {
    "text": "it's a GKR prover\nwith tied hands. So for this prover to cheat, he\nneeds-- so the output is false.",
    "start": "5093930",
    "end": "5101700"
  },
  {
    "text": "That's kind of-- he cheated. So somewhere, he needs to\ncheat in one of the GKRs. One of the sum checks, he\nneeds to go from false to true,",
    "start": "5101700",
    "end": "5109949"
  },
  {
    "text": "somewhere. Because at the end,\nyou're verifying. You're verifying. He put here a witness.",
    "start": "5109950",
    "end": "5115300"
  },
  {
    "text": "So he put in this guy a witness. That witness is\nfalse, because there's no satisfying assignment. So he put something\nthat's actually false.",
    "start": "5115300",
    "end": "5123250"
  },
  {
    "text": "Oh! 1 second. There is something. OK, sorry. Now I remember. There is something. There is a low-degree\ntest to do.",
    "start": "5123250",
    "end": "5128650"
  },
  {
    "text": "We'll get back to that. Sorry. We'll get back to\nthe low-degree test. But so you're talking\nwith a GKR prover.",
    "start": "5128650",
    "end": "5140710"
  },
  {
    "text": "And this prover, the only\nway he can convince you is to go from a false\nstatement to a true statement.",
    "start": "5140710",
    "end": "5146890"
  },
  {
    "text": "Because at the end, you verif-- and to do that, you need to\nbreak one of the sum checks.",
    "start": "5146890",
    "end": "5151910"
  },
  {
    "text": "So to break one of the sum\nchecks, you have 2d sum checks. And I'm using a\nunion bound to say",
    "start": "5151910",
    "end": "5157010"
  },
  {
    "text": "that the probability that you\nmanaged to break one of them is 2 to the d times\nthe probability",
    "start": "5157010",
    "end": "5163760"
  },
  {
    "text": "that you managed to\nbreak one of them. AUDIENCE: But then\nback to the discussion",
    "start": "5163760",
    "end": "5168970"
  },
  {
    "text": "where you're sharing randomness,\nso does union bound help here?",
    "start": "5168970",
    "end": "5174200"
  },
  {
    "text": "YAEL KALAI: You're saying-- oh! Because of the-- AUDIENCE: [INAUDIBLE]\ndependence of them.",
    "start": "5174200",
    "end": "5179380"
  },
  {
    "text": "YAEL KALAI: OK. So is this related\nto this question? AUDIENCE: [INAUDIBLE] YAEL KALAI: Actually,\nI don't think so,",
    "start": "5179380",
    "end": "5185880"
  },
  {
    "text": "because union bound, in\ngeneral, it can be correlated. A union bound in general\nsays that the probability",
    "start": "5185880",
    "end": "5192887"
  },
  {
    "text": "that this or this, I don't\ncare how they're correlated. It's small or equal\nthe probability of this plus the probability of this.",
    "start": "5192888",
    "end": "5199250"
  },
  {
    "text": "So the correlation\nhere, the union bound is very easily used\nin any situation.",
    "start": "5199250",
    "end": "5207280"
  },
  {
    "text": "You just have the probability\nthat you have an event. You cheated on test 1.",
    "start": "5207280",
    "end": "5212953"
  },
  {
    "text": "You cheated on test 2. You cheated on test 3. I don't care how\nthey're correlated. The probability that you\ncheated on one of them",
    "start": "5212953",
    "end": "5218960"
  },
  {
    "text": "is smaller or equal then. But actually, before\nwe break-- sorry--",
    "start": "5218960",
    "end": "5224800"
  },
  {
    "text": "there is a low-degree extension. AUDIENCE: [INAUDIBLE] YAEL KALAI: What? AUDIENCE: In the\nfirst [INAUDIBLE]. YAEL KALAI: Exactly!",
    "start": "5224800",
    "end": "5230386"
  },
  {
    "text": "AUDIENCE: Because in GKR,\nyou can just use brute force. YAEL KALAI: Good. OK, OK, OK. Sorry.",
    "start": "5230386",
    "end": "5237430"
  },
  {
    "text": "Good. I love you guys. So yeah, V-- check V\n0 tilde is low degree,",
    "start": "5237430",
    "end": "5253730"
  },
  {
    "text": "because in GKR, the verifier has\nthe input, which is the witness.",
    "start": "5253730",
    "end": "5263540"
  },
  {
    "text": "He computes a little\nextension by himself. Here, the prover is\ngiving it to him.",
    "start": "5263540",
    "end": "5270228"
  },
  {
    "text": "What if you didn't\ngive a low degree?  So we do need one low-degree\ntest in the input.",
    "start": "5270228",
    "end": "5278610"
  },
  {
    "text": "Other than that,\nit's GKR, black box. But we do need this.",
    "start": "5278610",
    "end": "5284010"
  },
  {
    "text": "And by the way, note that we're\nusing the GKR, the GKR has actually properties.",
    "start": "5284010",
    "end": "5290950"
  },
  {
    "text": "And I want to go back\nto the succinctness, because, actually,\nyou're saying, can't you do it with\nany succinct protocol?",
    "start": "5290950",
    "end": "5296670"
  },
  {
    "text": "And the answer is maybe. But there's also this\npoint, which is problematic,",
    "start": "5296670",
    "end": "5301990"
  },
  {
    "text": "that in GKR, it's\nnice because you just check one point in the\nlow-degree extension.",
    "start": "5301990",
    "end": "5308920"
  },
  {
    "text": "And we can verify that you\ndo the low-degree extension. There is a low-degree test that\nI didn't talk to you about,",
    "start": "5308920",
    "end": "5316190"
  },
  {
    "text": "but we'll mention\nthat after the break. So there's a GKR. You can verify.",
    "start": "5316190",
    "end": "5322599"
  },
  {
    "text": "The verifier, to verify, all he\nneeds to do is take his input and compute only two points\nin the low-degree extension",
    "start": "5322600",
    "end": "5330130"
  },
  {
    "text": "of that input. This is actually used here,\nbecause now the prover--",
    "start": "5330130",
    "end": "5337070"
  },
  {
    "text": "the verifier doesn't have\nthe input, the witness. The prover has it. He's going to put in the sky.",
    "start": "5337070",
    "end": "5344000"
  },
  {
    "text": "And now you can't\nread the entire input. That's a witness. But you can read what the\nkind of succinct protocol",
    "start": "5344000",
    "end": "5356290"
  },
  {
    "text": "tells you to read. And so this part is\nimportant in the GKR.",
    "start": "5356290",
    "end": "5362527"
  },
  {
    "start": "5362527",
    "end": "5369100"
  },
  {
    "text": "Questions before we break? So after the-- we'll\ntake a 5-minute break. And then we'll talk quickly\nabout the low-degree test,",
    "start": "5369100",
    "end": "5376840"
  },
  {
    "text": "wrap up the information\ntheory, and go to cryptography. ",
    "start": "5376840",
    "end": "5382000"
  }
]