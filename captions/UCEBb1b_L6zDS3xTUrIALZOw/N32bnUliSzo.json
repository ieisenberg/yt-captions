[
  {
    "start": "0",
    "end": "121000"
  },
  {
    "text": "[SQUEAKING] [RUSTLING] [CLICKING]",
    "start": "0",
    "end": "7455"
  },
  {
    "start": "7455",
    "end": "24910"
  },
  {
    "text": "MICHAEL SIPSER:\nWelcome, everyone. Welcome back to\ntheory of computation. And just to recap\nwhere we are, we",
    "start": "24910",
    "end": "38129"
  },
  {
    "text": "have been looking at\ntime complexity and space complexity. And we just finished\nproving what",
    "start": "38130",
    "end": "48570"
  },
  {
    "text": "are called the hierarchy\ntheorems, which, in a nutshell,",
    "start": "48570",
    "end": "53790"
  },
  {
    "text": "basically say that, if you\nallow the computational model to have a little bit more\nresource, a little bit",
    "start": "53790",
    "end": "60360"
  },
  {
    "text": "more time, a little\nbit more space, then you can do more things\nwith certain conditions.",
    "start": "60360",
    "end": "69500"
  },
  {
    "text": "So we proved that last time. It was a proof, basically,\nby a diagonalization.",
    "start": "69500",
    "end": "74600"
  },
  {
    "text": "I don't know if you recognized\nthe diagonalization there, but when you're encoding\na machine by an input",
    "start": "74600",
    "end": "81730"
  },
  {
    "text": "and then basically running all\npossible different machines, that's essentially\na diagonalization.",
    "start": "81730",
    "end": "88910"
  },
  {
    "text": "So today, we're going\nto build on that work to give an example\nof what we call",
    "start": "88910",
    "end": "95810"
  },
  {
    "text": "a natural intractable problem. We'll say a bit more\nabout what that means.",
    "start": "95810",
    "end": "101755"
  },
  {
    "text": "And then, we're going to\ntalk about something which is a different topic,\nbut nevertheless related,",
    "start": "101755",
    "end": "107030"
  },
  {
    "text": "having to do with oracles and\nmethods which may or may not",
    "start": "107030",
    "end": "112220"
  },
  {
    "text": "work to solve the P versus NP\nproblem, which, of course, is",
    "start": "112220",
    "end": "119750"
  },
  {
    "text": "a big open problem in the field. OK. So the time and space\nhierarchy theorems--",
    "start": "119750",
    "end": "127100"
  },
  {
    "start": "121000",
    "end": "511000"
  },
  {
    "text": "because we're going to\nbe using those today-- they say that if you give a\nlittle bit more space here-- so",
    "start": "127100",
    "end": "133670"
  },
  {
    "text": "for space constructible\nfunctions, functions that you can actually compute\nwithin the amount of space",
    "start": "133670",
    "end": "139400"
  },
  {
    "text": "that they specify, you can\nshow that the things that you can do in that much space\nis probably larger than what",
    "start": "139400",
    "end": "149060"
  },
  {
    "text": "you can do in less space. And you can prove a similar\nslightly weaker fact about the time\ncomplexity classes.",
    "start": "149060",
    "end": "156270"
  },
  {
    "text": "So what that means is that\nthese classes form a hierarchy.",
    "start": "156270",
    "end": "163050"
  },
  {
    "text": "So as you add more\ntime, or let's say, in this case, space,\nfrom n squared, to n cubed,",
    "start": "163050",
    "end": "169010"
  },
  {
    "text": "to n to the 4th, you get\nlarger and larger classes, which I'm kind illustrating\nhere by putting a dot there,",
    "start": "169010",
    "end": "177660"
  },
  {
    "text": "which shows that\nthere's something that we know that's\nnew in those classes as you go up these\ndifferent bounds.",
    "start": "177660",
    "end": "187829"
  },
  {
    "text": "And this is going to be\ntrue for space complexity and it's also going to be\ntrue for time complexity. ",
    "start": "187830",
    "end": "197900"
  },
  {
    "text": "And one of the corollaries\nthat we pointed out last time is that, PSPACE is a-- properly\nincludes non-deterministic log",
    "start": "197900",
    "end": "210320"
  },
  {
    "text": "space, NL. So NL is a proper\nsubset of PSPACE. So there's stuff in\nPSPACE that is not in NL.",
    "start": "210320",
    "end": "218750"
  },
  {
    "text": "And remember this notation\nhere, this means proper subset. ",
    "start": "218750",
    "end": "224470"
  },
  {
    "text": "One of the things that-- a follow-on corollary that\nwe didn't mention last time,",
    "start": "224470",
    "end": "229520"
  },
  {
    "text": "but that's something\nthat you should know, is that the TQBF problem, our\nPSPACE based complete problem,",
    "start": "229520",
    "end": "237970"
  },
  {
    "text": "is an example of a problem\nthat's in PSPACE, obviously, but we know it's also not in NL.",
    "start": "237970",
    "end": "245620"
  },
  {
    "text": "And in order to get\nthat conclusion, you have to look, again, at\nthe proof that TQBF is PSPACE",
    "start": "245620",
    "end": "254019"
  },
  {
    "text": "complete, and observe that\nthe reductions that we gave",
    "start": "254020",
    "end": "259299"
  },
  {
    "text": "in that proof can be carried\nout not only in polynomial time, but they can be carried\nout in log space.",
    "start": "259300",
    "end": "266110"
  },
  {
    "text": "And therefore, if TQBF\nturned out to go down to NL,",
    "start": "266110",
    "end": "272199"
  },
  {
    "text": "then because\neverything in PSPACE is log space reducible to TQBF,\nthat would bring all of PSPACE",
    "start": "272200",
    "end": "278650"
  },
  {
    "text": "down to NL. But that we just\nproved is not the case. So therefore, TQBF\ncould not be in NL.",
    "start": "278650",
    "end": "286530"
  },
  {
    "text": "OK, and we're going to be\nusing that kind of reasoning again in this lecture.",
    "start": "286530",
    "end": "294070"
  },
  {
    "text": "So just a quick check-in. These are a few,\nmore or less easy,",
    "start": "294070",
    "end": "300030"
  },
  {
    "text": "maybe more or less\ntricky, follow-ons that you can conclude from\nthe time and space hierarchy",
    "start": "300030",
    "end": "309357"
  },
  {
    "text": "theorems plus some\nof the other things we've proven along the way. And so just as a check of\nyour understanding, maybe",
    "start": "309357",
    "end": "316957"
  },
  {
    "text": "these a little bit\non the tricky side, so you have to read\nthem carefully. Which of these are known to\nbe true based on the material",
    "start": "316957",
    "end": "325520"
  },
  {
    "text": "that we've presented? And this is also\njust material that's the facts that we know to be\ntrue in complexity theory.",
    "start": "325520",
    "end": "335300"
  },
  {
    "text": "So let me launch that poll. And just check off the\nones that we can prove.",
    "start": "335300",
    "end": "343290"
  },
  {
    "text": "Hmm. OK. I'm going to close it down. So please answer quickly\nif you're going to.",
    "start": "343290",
    "end": "353010"
  },
  {
    "text": "OK, 1, 2, 3, end.  OK.",
    "start": "353010",
    "end": "359220"
  },
  {
    "text": "Well, the two leading\ncandidates are correct.",
    "start": "359220",
    "end": "364620"
  },
  {
    "text": "And the two that are\nthe laggards here are, in fact, the ones\nthat are not true.",
    "start": "364620",
    "end": "369960"
  },
  {
    "text": "So A and D are not true,\nbased on what we know. And B and C are true.",
    "start": "369960",
    "end": "378070"
  },
  {
    "text": "So let's understand,\nfirst of all, A, we know it's false because 2 to\nthe n plus 1 is just 2 times 2",
    "start": "378070",
    "end": "385620"
  },
  {
    "text": "to the n. And so these two bounds differ\nonly by a constant factor.",
    "start": "385620",
    "end": "392250"
  },
  {
    "text": "And so in fact, they're\nthe same complexity class. And so you don't get\nproper containment for A.",
    "start": "392250",
    "end": "397940"
  },
  {
    "text": "So that one we\nabsolutely know is false.  D, well, if we could\nprove that, then we",
    "start": "397940",
    "end": "409440"
  },
  {
    "text": "would have solved\nthe famous problem, because we don't know\nwhether even P equals PSPACE.",
    "start": "409440",
    "end": "416530"
  },
  {
    "text": "So if P equals PSPACE,\nthen certainly PSPACE would equal NP, which\nis in between the two.",
    "start": "416530",
    "end": "422200"
  },
  {
    "text": "And so we don't\nknow how to prove PSPACE is different\nfrom NP, that's",
    "start": "422200",
    "end": "428130"
  },
  {
    "text": "based on the current state\nof knowledge of the field. So this would not\nbe something that we",
    "start": "428130",
    "end": "433360"
  },
  {
    "text": "know to be true based on\nwhat things that we've said. Now, B follows directly from\nthe time hierarchy theorem,",
    "start": "433360",
    "end": "443980"
  },
  {
    "text": "because 2 to the 2n is\nthe square of 2 to the n. And that is, asymptotically,\na significantly larger bound.",
    "start": "443980",
    "end": "453650"
  },
  {
    "text": "And so you can prove that\ntime 2 the n is properly",
    "start": "453650",
    "end": "461660"
  },
  {
    "text": "contains time 2 the n. C is a little trickier\nbecause you need",
    "start": "461660",
    "end": "469970"
  },
  {
    "text": "to remember Savitch's theorem. Savitch's theorem\napplies to space. But you also need to\nremember that what",
    "start": "469970",
    "end": "476650"
  },
  {
    "text": "you can do in time, in\nnon-deterministic time n squared, you can also do\nin non-deterministic space",
    "start": "476650",
    "end": "482230"
  },
  {
    "text": "n squared, which,\nthen, in turn, you can do in deterministic space\nn to the 4th, which is properly",
    "start": "482230",
    "end": "489550"
  },
  {
    "text": "contained within\nspace n to the 5th. So you can prove\nthat PSPACE properly",
    "start": "489550",
    "end": "495800"
  },
  {
    "text": "contains non-deterministic\ntime n squared. OK, just a bunch of\ncontainments there.",
    "start": "495800",
    "end": "502850"
  },
  {
    "text": "A and C are perhaps, in a\nsense, it may be the most tricky of this group.",
    "start": "502850",
    "end": "509380"
  },
  {
    "text": "OK. So let's move on.",
    "start": "509380",
    "end": "514460"
  },
  {
    "start": "511000",
    "end": "642000"
  },
  {
    "text": "So we're going to introduce,\ntoday, two new classes. And actually, I want\nto go back to here.",
    "start": "514460",
    "end": "521068"
  },
  {
    "text": " What are we going to\nbe trying to accomplish",
    "start": "521069",
    "end": "526930"
  },
  {
    "text": "in today's lecture? So we're going to be looking\nat provable intractability.",
    "start": "526930",
    "end": "533170"
  },
  {
    "text": "So a problem being intractable\nfor us means it's outside of P.",
    "start": "533170",
    "end": "538779"
  },
  {
    "text": "So we can't solve it\nin polynomial time. For our perspective,\nwe're going to call that",
    "start": "538780",
    "end": "546160"
  },
  {
    "text": "an intractable problem. Now, this problem over here,\nthat's sitting in time 2 the n,",
    "start": "546160",
    "end": "553870"
  },
  {
    "text": "but not in smaller classes, so\nthis is an intractable problem. That's outside of\nP. But this example",
    "start": "553870",
    "end": "565420"
  },
  {
    "text": "of a language, if you remember\nhow the time hierarchy theorem or the space\nhierarchy theorem",
    "start": "565420",
    "end": "572560"
  },
  {
    "text": "was proved, basically,\nthis language itself is not an interesting language\nfor other than the purpose",
    "start": "572560",
    "end": "579490"
  },
  {
    "text": "that it serves, to be in that\nclass and not in a lower class. But it's not a language that\nanyone would care about.",
    "start": "579490",
    "end": "585670"
  },
  {
    "text": "And it's not even a language\nthat is easy to describe. It's just the language that\nsome Turing machine decides,",
    "start": "585670",
    "end": "593110"
  },
  {
    "text": "where that Turing\nmachine is especially designed to have the\nproperty that its language is",
    "start": "593110",
    "end": "598209"
  },
  {
    "text": "at a particular\ncomplexity level. But otherwise, there's no nice\ndescription of that language.",
    "start": "598210",
    "end": "604388"
  },
  {
    "text": "It's not like a to\nthe n, b to the n, or some equivalence of 2\ndfa's or something like that.",
    "start": "604388",
    "end": "613320"
  },
  {
    "text": "So I would say that that\nlanguage is, in a sense, it serves its purpose, but it's\nnot a natural language that you",
    "start": "613320",
    "end": "618830"
  },
  {
    "text": "really care about. So one one of the goals\nof today's lecture is to give an example\nof a natural language,",
    "start": "618830",
    "end": "626090"
  },
  {
    "text": "a naturally-occurring\nlanguage, in a sense, that's easy to describe, where you\ncan prove that that language is",
    "start": "626090",
    "end": "633830"
  },
  {
    "text": "intractable, is\nactually outside of P.",
    "start": "633830",
    "end": "639170"
  },
  {
    "text": "So that's a bit of\nmotivation where we're going. So along the way, we're\ngoing to introduce",
    "start": "639170",
    "end": "645230"
  },
  {
    "start": "642000",
    "end": "1125000"
  },
  {
    "text": "these exponential complexity\nclasses, exponential time and exponential space,\nwhich are exponentially",
    "start": "645230",
    "end": "652490"
  },
  {
    "text": "bigger than polynomial time\nand polynomial space classes. So it's 2 to the n to\nthe k in both cases.",
    "start": "652490",
    "end": "660200"
  },
  {
    "text": "2 to a polynomial. And the first five\nof these classes, L",
    "start": "660200",
    "end": "668790"
  },
  {
    "text": "through PSPACE\nwe've already seen, and exponential time\nand exponential space extend the containments\nthat we've already seen.",
    "start": "668790",
    "end": "677880"
  },
  {
    "text": "So you have to double check that\nyou understand why PSPACE is",
    "start": "677880",
    "end": "684200"
  },
  {
    "text": "a subset of exponential time. But that's because\nthat, as we showed,",
    "start": "684200",
    "end": "690170"
  },
  {
    "text": "going from space to\ntime, you can do that with an exponential increase.",
    "start": "690170",
    "end": "695190"
  },
  {
    "text": "That's the cost\nof the simulation. And going from\ntime to space, you don't need any increase at all.",
    "start": "695190",
    "end": "700370"
  },
  {
    "text": "Anything that you can do in\na certain amount of time, you can do in that much space. So anything you can do in\na certain amount of space,",
    "start": "700370",
    "end": "706460"
  },
  {
    "text": "you can also do in exponentially\nmore amount of time. OK, so those were\nsimple theorems",
    "start": "706460",
    "end": "713089"
  },
  {
    "text": "that we proved right\nat the very beginning. Now, the hierarchy\ntheorems allow",
    "start": "713090",
    "end": "719560"
  },
  {
    "text": "us to conclude some separations\namong these classes. So we already looked at\nthis one, NL versus PSPACE.",
    "start": "719560",
    "end": "726880"
  },
  {
    "text": "And we saw that because NL\nis, by Savitch's theorem, in deterministic log squared\nspace, which is properly",
    "start": "726880",
    "end": "735550"
  },
  {
    "text": "contained in\npolynomial space, you get a separation between\nthose two classes, provably.",
    "start": "735550",
    "end": "744260"
  },
  {
    "text": "And for similar reasons,\npolynomial space to exponential\nspace, you're going to get a separation from\nthe space hierarchy theorem.",
    "start": "744260",
    "end": "752000"
  },
  {
    "text": "And polynomial time\nto exponential time, you get a provable\nseparation by virtue",
    "start": "752000",
    "end": "757480"
  },
  {
    "text": "of the hierarchy theorem.  Now we're going to\ndefine complete problems",
    "start": "757480",
    "end": "765710"
  },
  {
    "text": "for these two classes,\nexponential time and exponential space. So we have exponential\ntime complete.",
    "start": "765710",
    "end": "771500"
  },
  {
    "text": "It's going to be analogous\nto what we showed before,",
    "start": "771500",
    "end": "776880"
  },
  {
    "text": "which is that it's a\nmember of exponential time. And every problem in exponential\ntime is reducible to it,",
    "start": "776880",
    "end": "786173"
  },
  {
    "text": "let's say, in polynomial\ntime, though it's not going to really turn\nout to be matter. It could be in log space.",
    "start": "786173",
    "end": "792320"
  },
  {
    "text": "Some simple method of\ndoing the reduction is going to be good enough. Let's say polynomial time\nis the typical definition.",
    "start": "792320",
    "end": "798800"
  },
  {
    "text": "And the same thing for\nexponential space complete. We'll say it's exponential\nspace complete, if it's an exponential space.",
    "start": "798800",
    "end": "805040"
  },
  {
    "text": "And anything else\nin exponential space is polynomial time\nreducible to it.",
    "start": "805040",
    "end": "811050"
  },
  {
    "text": "OK. But the important thing\nis that if something",
    "start": "811050",
    "end": "817320"
  },
  {
    "text": "is exponential\ntime complete, you know it's outside of P, for\nthe same reasons we've now",
    "start": "817320",
    "end": "825770"
  },
  {
    "text": "seen several times.  Namely, that if an exponential\ntime complete problem ended up",
    "start": "825770",
    "end": "835110"
  },
  {
    "text": "being in P, then\nbecause everything",
    "start": "835110",
    "end": "840220"
  },
  {
    "text": "else in exponential time is\nreducible to the complete problem, they\nwould also be in P.",
    "start": "840220",
    "end": "845560"
  },
  {
    "text": "And so exponential time\nand P would be equal. But we just said they're not\nequal because of the hierarchy",
    "start": "845560",
    "end": "852820"
  },
  {
    "text": "theorem. So the logic is the hierarchy\ntheorem separates the class,",
    "start": "852820",
    "end": "859550"
  },
  {
    "text": "and then the complete problem\ninherits the difficulty of the larger class.",
    "start": "859550",
    "end": "866010"
  },
  {
    "text": "So the complete problem cannot\nbe any lower than the other problems in the class, because\nthey're all reducible to it.",
    "start": "866010",
    "end": "872660"
  },
  {
    "text": " So the same thing is going to\nbe true for an exponential space",
    "start": "872660",
    "end": "879390"
  },
  {
    "text": "complete problem. Can't be even in PSPACE because\nexponential space and PSPACE are different.",
    "start": "879390",
    "end": "885120"
  },
  {
    "text": "And if it's not in PSPACE,\nit's not going to be in P. And so in both cases, if\nyou have a problem that's",
    "start": "885120",
    "end": "891630"
  },
  {
    "text": "complete for exponential\nspace or exponential time, we know that those\nproblems are intractable.",
    "start": "891630",
    "end": "899110"
  },
  {
    "text": "And our strategy,\nthen, for giving a natural intractable\nproblem is to show",
    "start": "899110",
    "end": "907420"
  },
  {
    "text": "it's complete for\none of these classes. And it's actually\ngoing to turn out to be an exponential space\ncomplete problem that we're",
    "start": "907420",
    "end": "914800"
  },
  {
    "text": "going to give as our example. OK, so that is the plan.",
    "start": "914800",
    "end": "919890"
  },
  {
    "text": " I think it's a good time to-- let's just take a\nfew questions here",
    "start": "919890",
    "end": "927120"
  },
  {
    "text": "to make sure we're all on the\nsame page as what we're doing.",
    "start": "927120",
    "end": "933300"
  },
  {
    "text": "So let me just read. I got a couple of\nquestions already in here. ",
    "start": "933300",
    "end": "945360"
  },
  {
    "text": "So this is a little\nbit of a side comment that somebody-- that's\nan interesting question. Basically, is it\npossible that we may not",
    "start": "945360",
    "end": "953910"
  },
  {
    "text": "be able to prove, solve\nthe P versus NP problem, that it's not a problem\nthat one can answer",
    "start": "953910",
    "end": "961050"
  },
  {
    "text": "from the basic axioms\nof mathematics, if I'm interpreting\nthe question correctly.",
    "start": "961050",
    "end": "966740"
  },
  {
    "text": "There are certain\nproblems in mathematics-- and I think I,\nperhaps, I mentioned",
    "start": "966740",
    "end": "971810"
  },
  {
    "text": "earlier in the term, the\nproblem of whether there is a set whose size is\nin between the integers",
    "start": "971810",
    "end": "981080"
  },
  {
    "text": "and the real numbers. We know the real numbers\nare larger in size than the integers.",
    "start": "981080",
    "end": "986540"
  },
  {
    "text": "That was our first example\nof a diagonalization. And is there a problem of size\nstrictly in between the two?",
    "start": "986540",
    "end": "992660"
  },
  {
    "text": "Bigger than the integers,\nsmaller than the real numbers. So that's a problem that\nwas posed a long time ago.",
    "start": "992660",
    "end": "999680"
  },
  {
    "text": "It was one of\nHilbert's problems. And was eventually\nshown to be unanswerable",
    "start": "999680",
    "end": "1006300"
  },
  {
    "text": "using the basic\naxioms of mathematics. So the question is,\nmaybe P versus NP is in the same category.",
    "start": "1006300",
    "end": "1012510"
  },
  {
    "text": " Could be. That could be true of\nany unsolved problems",
    "start": "1012510",
    "end": "1018350"
  },
  {
    "text": "in mathematics. But at least our\nexperience has shown that the kinds of problems\nthat, at least, have been shown",
    "start": "1018350",
    "end": "1024980"
  },
  {
    "text": "to be unsolvable from\nmathematical axioms tend to involve\ninfinities and very large",
    "start": "1024980",
    "end": "1032270"
  },
  {
    "text": "things, things that are very\nfar from our intuitions. And something as down to earth\nas P versus NP, at least,",
    "start": "1032270",
    "end": "1038809"
  },
  {
    "text": "it would be very\nsurprising to me if that turned out\nto be unanswerable using our mathematical axioms.",
    "start": "1038810",
    "end": "1045530"
  },
  {
    "text": "But, who knows? Oh, this is another\ngood question. Do the time and space\nhierarchy theorems",
    "start": "1045530",
    "end": "1051260"
  },
  {
    "text": "have non-deterministic variants? Yes, they do. They're much harder\nto prove, however, and we're not going\nto cover that.",
    "start": "1051260",
    "end": "1057417"
  },
  {
    "text": "But you can also prove that\nnon-deterministic time, n cubed",
    "start": "1057417",
    "end": "1062900"
  },
  {
    "text": "properly includes\nnon-deterministic time n squared. You're not going to be\nresponsible for that. Don't worry.",
    "start": "1062900",
    "end": "1068990"
  },
  {
    "text": "If you try to\nactually prove that, you'll see the diagonalization\ndoesn't directly work.",
    "start": "1068990",
    "end": "1078520"
  },
  {
    "text": "And so you have to\ndo something fancier. ",
    "start": "1078520",
    "end": "1084559"
  },
  {
    "text": "People are asking about which\nreduction method to use. Again, the kinds of\nreductions that we encounter",
    "start": "1084560",
    "end": "1091549"
  },
  {
    "text": "are always very simple. So we're just going to be\nworking with very weak notions of reductions.",
    "start": "1091550",
    "end": "1097460"
  },
  {
    "text": "Not interesting yet, generally,\nto consider powerful kinds of reductions like polynomial\nexponential time reductions",
    "start": "1097460",
    "end": "1105037"
  },
  {
    "text": "or things like that. So it's just not something that\npeople really think about much.",
    "start": "1105037",
    "end": "1110210"
  },
  {
    "text": "I mean, I can talk about\nit at length offline. But let's just assume that\nour reduction strength",
    "start": "1110210",
    "end": "1116870"
  },
  {
    "text": "is something very low. Log space is going\nto be good enough to do all of the\nreductions in this class. ",
    "start": "1116870",
    "end": "1125330"
  },
  {
    "start": "1125000",
    "end": "1964000"
  },
  {
    "text": "OK, so let's move on, then. So here is the\nproblem that we're",
    "start": "1125330",
    "end": "1131090"
  },
  {
    "text": "going to spend the\nnext 20 minutes or so proving to be\nexponential space complete.",
    "start": "1131090",
    "end": "1139040"
  },
  {
    "text": "I have got to do a little\nintroduction first. So this is not the problem, but\nthis is related to the problem.",
    "start": "1139040",
    "end": "1147130"
  },
  {
    "text": "So the problem of testing\nif two regular expressions are equivalent. Write down to\nregular expressions,",
    "start": "1147130",
    "end": "1153500"
  },
  {
    "text": "do they generate\nthe same language? So that problem actually\nturns out to be in PSPACE.",
    "start": "1153500",
    "end": "1158914"
  },
  {
    "text": "So it's not going to be\nexponential space complete. It's actually in PSPACE. I don't think we're\ngoing to have--",
    "start": "1158915",
    "end": "1164190"
  },
  {
    "text": "I thought about presenting\nit in the lecture. It's not that hard to show. But it just took too much\ntime and doesn't really",
    "start": "1164190",
    "end": "1170190"
  },
  {
    "text": "introduce new methods. It's a good exercise, actually,\nusing Savitch's theorem.",
    "start": "1170190",
    "end": "1175890"
  },
  {
    "text": "But maybe we'll do\nit in recitation, or if the lecture\nmiraculously ends earlier,",
    "start": "1175890",
    "end": "1183150"
  },
  {
    "text": "I'll do it at the end. But I don't think\nwe'll have time. ",
    "start": "1183150",
    "end": "1190570"
  },
  {
    "text": "But that's a setup for\nthe intractable problem that we're going to talk\nabout, which is very related.",
    "start": "1190570",
    "end": "1198850"
  },
  {
    "text": "Now, OK, before\nwe get to that, so if I have a regular\nexpression, I'm",
    "start": "1198850",
    "end": "1204370"
  },
  {
    "text": "going to enhance our regular\nexpression in one simple way,",
    "start": "1204370",
    "end": "1211450"
  },
  {
    "text": "by allowing exponents\nor exponentiation. And that means if I have\na regular expression R,",
    "start": "1211450",
    "end": "1221059"
  },
  {
    "text": "I can write R to the k to mean\nR concatenated with itself k times.",
    "start": "1221060",
    "end": "1226190"
  },
  {
    "text": "We've been sort of informally\nusing that all the way along anyway, like when we talk\nabout 0 to the k, 1 to the k.",
    "start": "1226190",
    "end": "1231350"
  },
  {
    "text": " So if we're going to\nformally allow that when we write down regular\nexpressions, in some cases,",
    "start": "1231350",
    "end": "1240080"
  },
  {
    "text": "that might allow the\nregular expression to be much smaller,\nespecially if we're",
    "start": "1240080",
    "end": "1246029"
  },
  {
    "text": "writing down k in binary. Because I can write R to\nthe million with just a few",
    "start": "1246030",
    "end": "1252220"
  },
  {
    "text": "symbols if I have\nexponentiation. But if I don't have\nexponentiation,",
    "start": "1252220",
    "end": "1257500"
  },
  {
    "text": "then I have to\nwrite R concatenated with R out a million\ntimes, and I get a much,",
    "start": "1257500",
    "end": "1263750"
  },
  {
    "text": "much longer, an exponentially\nlonger expression if I don't have that exponent\nas a way of describing",
    "start": "1263750",
    "end": "1271299"
  },
  {
    "text": "regular expressions. And that's going to\nmake a big difference. So now, the equivalence problem\nfor regular expressions with",
    "start": "1271300",
    "end": "1281410"
  },
  {
    "text": "exponentiation-- that's what\nthat little up arrow means, what it signifies--",
    "start": "1281410",
    "end": "1287840"
  },
  {
    "text": "now I'm giving you two\nregular expressions. But they're allowed to\nhave the exponentiation",
    "start": "1287840",
    "end": "1293780"
  },
  {
    "text": "operation in addition to the\nstandard regular operations.",
    "start": "1293780",
    "end": "1301860"
  },
  {
    "text": "So now, testing whether two of\nthese regular expressions that have exponentiation,\nthat problem",
    "start": "1301860",
    "end": "1309140"
  },
  {
    "text": "turns out to be\nexponential space complete. ",
    "start": "1309140",
    "end": "1316495"
  },
  {
    "text": "So here's the equivalence\nproblem for regular expressions with exponentiation. That's an exponential\nspace complete problem.",
    "start": "1316495",
    "end": "1322840"
  },
  {
    "text": "And as we pointed out,\nthat means this problem is provably intractable.",
    "start": "1322840",
    "end": "1328360"
  },
  {
    "text": "So there's just no\nway, in general, to solve that problem\nin polynomial time.",
    "start": "1328360",
    "end": "1334180"
  },
  {
    "text": "That's proven, that's known.  So we're going to go\nthrough the reduction.",
    "start": "1334180",
    "end": "1343170"
  },
  {
    "text": "I think it's going to be our\nlast reduction of the term, of proving problems\ncomplete for some class.",
    "start": "1343170",
    "end": "1348659"
  },
  {
    "text": "But each one of those has\ntheir own kind of thing",
    "start": "1348660",
    "end": "1354660"
  },
  {
    "text": "that makes it special. So first of all, we have to show\nthat it's in exponential space.",
    "start": "1354660",
    "end": "1360870"
  },
  {
    "text": "That's really going to\nrely on this other fact that we didn't prove. So I'm going to go\nover that very quickly.",
    "start": "1360870",
    "end": "1367360"
  },
  {
    "text": "But the interesting part\nis doing the reduction. So if I have something\nin exponential space that I can show\nthat I can reduce it",
    "start": "1367360",
    "end": "1374820"
  },
  {
    "text": "to the equivalence problem\nfor regular expressions with exponentiation.",
    "start": "1374820",
    "end": "1380870"
  },
  {
    "text": "OK, so quickly arguing\npart one that we're in exponential space,\nbasically, what you do",
    "start": "1380870",
    "end": "1387950"
  },
  {
    "text": "is you take your two\nregular expressions that you want to test to\nsee if they're equivalent, but now they have\nexponentiation.",
    "start": "1387950",
    "end": "1394010"
  },
  {
    "text": "And as a first step, you get\nrid of the exponentiation. You just expand things out\nby repeating the parts that",
    "start": "1394010",
    "end": "1402620"
  },
  {
    "text": "have the exponents. And of course, as I\nsaid, that's going",
    "start": "1402620",
    "end": "1407900"
  },
  {
    "text": "to make the expression\nthemselves exponentially bigger.",
    "start": "1407900",
    "end": "1413040"
  },
  {
    "text": "But now, you run\nthe PSPACE algorithm on those two exponentially\nlarger expressions.",
    "start": "1413040",
    "end": "1420220"
  },
  {
    "text": "So the input that the\nPSPACE algorithm is now exponential in the\noriginal input size,",
    "start": "1420220",
    "end": "1427620"
  },
  {
    "text": "but it's PSPACE in\nthat enlarged input. So that's going to give\nyou an exponential space",
    "start": "1427620",
    "end": "1432690"
  },
  {
    "text": "algorithm in the original input\nsize, because you expanded it to become\nexponentially bigger,",
    "start": "1432690",
    "end": "1438570"
  },
  {
    "text": "and then you run the PSPACE\nalgorithm on that expanded",
    "start": "1438570",
    "end": "1444654"
  },
  {
    "text": "problem.  So that gives you an\nexponential space algorithm",
    "start": "1444655",
    "end": "1450750"
  },
  {
    "text": "for this problem. But now, what\nwe're going to do--",
    "start": "1450750",
    "end": "1457170"
  },
  {
    "text": "the interesting part\nis the reduction. So given some language and\nexponential space, say,",
    "start": "1457170",
    "end": "1464280"
  },
  {
    "text": "decided by some Turing machine\nin that amount of space, 2 to the n to the k, we're going\nto give a reduction that maps a",
    "start": "1464280",
    "end": "1473730"
  },
  {
    "text": "to this equivalence problem. Got it?",
    "start": "1473730",
    "end": "1480149"
  },
  {
    "text": "That is the plan.  So let's make sure we're\nall together on the plan",
    "start": "1480150",
    "end": "1487780"
  },
  {
    "text": "before we go ahead and\ncarry out that plan. ",
    "start": "1487780",
    "end": "1496159"
  },
  {
    "text": "We just sort of\nset things up here, in a sense, for what\nwe're going to be doing. So feel free to ask a\nquestion on just the plan.",
    "start": "1496160",
    "end": "1508240"
  },
  {
    "text": "It's going to get technical. Because, as doing these\nreductions always is, there's a simulation\ninvolved, and you",
    "start": "1508240",
    "end": "1515080"
  },
  {
    "text": "have to kind of describe that\nsimulation in its own way. So now, we're going\nto be simulating,",
    "start": "1515080",
    "end": "1522100"
  },
  {
    "text": "in a certain sense,\nM on w, the decider",
    "start": "1522100",
    "end": "1528289"
  },
  {
    "text": "for this exponential\nspace, problem A, we're going to take\nM on w and we're",
    "start": "1528290",
    "end": "1534470"
  },
  {
    "text": "going to somehow have to express\nthe fact that M accepts w using this equivalence problem\nfor regular expressions",
    "start": "1534470",
    "end": "1541130"
  },
  {
    "text": "with exponentiation. ",
    "start": "1541130",
    "end": "1547259"
  },
  {
    "text": "So no questions? Why don't we move on?  I have three slides on this,\nbut they're kind of dense,",
    "start": "1547260",
    "end": "1556320"
  },
  {
    "text": "I'm sorry to say.  So here is the plan as usual.",
    "start": "1556320",
    "end": "1564920"
  },
  {
    "text": "We're going to map A with\na polynomial time reduction to the equivalence problem\nfor regular expressions",
    "start": "1564920",
    "end": "1571910"
  },
  {
    "text": "with exponentiation. So that means we're going to\nhave to take an input, which may or may not be in A, and\nproduce two regular expressions",
    "start": "1571910",
    "end": "1581480"
  },
  {
    "text": "with exponentiation, which are\ngoing to be equivalent when",
    "start": "1581480",
    "end": "1588160"
  },
  {
    "text": "w is in A. Or when M accepts w.",
    "start": "1588160",
    "end": "1593220"
  },
  {
    "start": "1593220",
    "end": "1600220"
  },
  {
    "text": "So it's going to be, as\nthese things always are,",
    "start": "1600220",
    "end": "1605570"
  },
  {
    "text": "these are going to be in\nterms of the computation history for M under w. But in this case,\nit's going to turn out",
    "start": "1605570",
    "end": "1611590"
  },
  {
    "text": "to be convenient to work with\nthe rejecting computation",
    "start": "1611590",
    "end": "1617230"
  },
  {
    "text": "history for M on w. So remember, now we\nhave a Turing machine M.",
    "start": "1617230",
    "end": "1624240"
  },
  {
    "text": "It's a decider, so that\nmeans it always holds-- for the strings in the language,\nit ends up at a Q accept state,",
    "start": "1624240",
    "end": "1631140"
  },
  {
    "text": "for things not in the language,\nit ends up at a Q reject state. So a rejecting\ncomputation history",
    "start": "1631140",
    "end": "1637710"
  },
  {
    "text": "is the sequence\nof configurations the machine goes through\nfrom the start configuration",
    "start": "1637710",
    "end": "1642870"
  },
  {
    "text": "until it ends up\nat a configuration with a reject state, a\nrejecting configuration.",
    "start": "1642870",
    "end": "1649890"
  },
  {
    "text": "And we're going to make\na regular expression that describes all strings\nexcept for that one.",
    "start": "1649890",
    "end": "1658640"
  },
  {
    "text": "It's going to avoid describing\na rejecting computation history for M on w.",
    "start": "1658640",
    "end": "1664670"
  },
  {
    "text": "Otherwise, it's going to\ndescribe all possible strings. ",
    "start": "1664670",
    "end": "1670480"
  },
  {
    "text": "Now, if M does not\nreject w, so there is no rejecting\ncomputation history--",
    "start": "1670480",
    "end": "1677170"
  },
  {
    "text": "namely, M accepts w, by the way. So if M accepts w,\ndoes not reject w, it does not have a rejecting\ncomputation history,",
    "start": "1677170",
    "end": "1685270"
  },
  {
    "text": "what is R1 describing? Well, it's describing,\nin that case, everything,",
    "start": "1685270",
    "end": "1692610"
  },
  {
    "text": "because there is no rejecting\ncomputation history. So it's describing every\nother string besides.",
    "start": "1692610",
    "end": "1699149"
  },
  {
    "text": "So that means it's describing\nall strings, if there is no rejecting computation\nhistory in the case",
    "start": "1699150",
    "end": "1705390"
  },
  {
    "text": "that M accepts w. So what does that suggest\nwe should use for R2?",
    "start": "1705390",
    "end": "1710890"
  },
  {
    "text": "R2 is going to be the\nregular expression that just generates all strings.",
    "start": "1710890",
    "end": "1716480"
  },
  {
    "text": "So we'll be testing whether R1\ngenerates all strings or not, which is the same as saying\ndoes M accept w or not.",
    "start": "1716480",
    "end": "1729410"
  },
  {
    "text": "So R2 is going to be-- I would like to say sigma\nstar, but sigma is really",
    "start": "1729410",
    "end": "1735710"
  },
  {
    "text": "the input to M, and gamma\nis the tape alphabet for M. So we have a lot of Greek\nletters to play with,",
    "start": "1735710",
    "end": "1742580"
  },
  {
    "text": "so we're going to use\ndelta for the alphabet that we write the\ncomputation histories in.",
    "start": "1742580",
    "end": "1750909"
  },
  {
    "text": "If you want to get reminded what\nthat delta is, a computation",
    "start": "1750910",
    "end": "1757760"
  },
  {
    "text": "history can have a tape\nalphabet symbol for M, it can have a\nstate symbol for M,",
    "start": "1757760",
    "end": "1763970"
  },
  {
    "text": "or it can have a\ndelimiter pound-- hashtag. So it's either a\ncapital delta alphabet",
    "start": "1763970",
    "end": "1772530"
  },
  {
    "text": "is a tape alphabet symbol, or\nstate, something representing a state symbol, or a hashtag.",
    "start": "1772530",
    "end": "1780740"
  },
  {
    "text": "That's just delta. So don't get-- I always\nfeel bad if somebody gets confused by\nsomething that's",
    "start": "1780740",
    "end": "1785840"
  },
  {
    "text": "supposed to be very simple. Don't get confused\nby delta star. This is just all\npossible strings",
    "start": "1785840",
    "end": "1791150"
  },
  {
    "text": "over the alphabet delta. ",
    "start": "1791150",
    "end": "1796450"
  },
  {
    "text": "OK, so what does R1-- so my job is to do R1. R2, I already told you.",
    "start": "1796450",
    "end": "1804160"
  },
  {
    "text": "R1 now has to describe\nall those strings except for the rejecting\ncomputation history.",
    "start": "1804160",
    "end": "1810830"
  },
  {
    "text": "So everything that fails to be a\nrejecting computation history--",
    "start": "1810830",
    "end": "1816260"
  },
  {
    "text": "so it fails either\nbecause it started wrong, or it ended wrong, or it's\nwrong somewhere in the middle.",
    "start": "1816260",
    "end": "1822320"
  },
  {
    "text": "And by wrong I mean, it\nfails to correctly describe",
    "start": "1822320",
    "end": "1827509"
  },
  {
    "text": "the way the machine operates\nif it's ending up rejecting w. ",
    "start": "1827510",
    "end": "1835549"
  },
  {
    "text": "All right. So I'm going to describe\nall those possible strings",
    "start": "1835550",
    "end": "1840970"
  },
  {
    "text": "by breaking it down into\nthose three categories. Starts wrong, ends wrong,\nor somewhere computes",
    "start": "1840970",
    "end": "1847870"
  },
  {
    "text": "wrong along the way. OK. So rejecting computation history\nlooks something like this.",
    "start": "1847870",
    "end": "1856780"
  },
  {
    "text": "Here's the start configuration\nas we usually envision it.",
    "start": "1856780",
    "end": "1864400"
  },
  {
    "text": "It's a start state looking at\nthe first symbol of the input, and there's the\nrest of the input.",
    "start": "1864400",
    "end": "1869650"
  },
  {
    "text": "So let me just write this out.  This is a rejecting\ncomputation history now.",
    "start": "1869650",
    "end": "1875760"
  },
  {
    "text": "So the first configuration,\nthe second one, and so on and so on, until\nwe end up at a rejecting",
    "start": "1875760",
    "end": "1881790"
  },
  {
    "text": "computation-- rejecting\nconfiguration. Now, for convenience,\nI'm going to insist",
    "start": "1881790",
    "end": "1892530"
  },
  {
    "text": "that all of these configurations\nare the same length.",
    "start": "1892530",
    "end": "1898960"
  },
  {
    "text": "It's going to make my life\neasier in doing the proof.",
    "start": "1898960",
    "end": "1904620"
  },
  {
    "text": "But why can I do that? Well, I'm just\ngoing to take them-- you know, because usually you\nthink of the configurations,",
    "start": "1904620",
    "end": "1911610"
  },
  {
    "text": "they start small because they're\njust basically of length n, but this is using\nexponential space, they're getting\nlonger and longer.",
    "start": "1911610",
    "end": "1917820"
  },
  {
    "text": "Let's just pair them\nall out with blanks so that they're\nall the same size. So as I've indicated\nover here, we're",
    "start": "1917820",
    "end": "1924900"
  },
  {
    "text": "adding in a bunch of blanks. It's going to be a\nlot of blanks here, to make sure they all\nhave length 2 to the n",
    "start": "1924900",
    "end": "1932280"
  },
  {
    "text": "to the k, which is the maximum\nsize of a configuration when you have that much space. ",
    "start": "1932280",
    "end": "1944440"
  },
  {
    "text": "I'm going to construct-- so\nbasically, that's my job. I'm going to construct\nR1 so that it generates all those strings.",
    "start": "1944440",
    "end": "1950980"
  },
  {
    "text": "I wrote a little box around\nthat thing I'm trying to--",
    "start": "1950980",
    "end": "1957500"
  },
  {
    "text": " that's my to do.",
    "start": "1957500",
    "end": "1964030"
  },
  {
    "start": "1964000",
    "end": "2408000"
  },
  {
    "text": "It's going to help me\nin the coming slides because they're a\nlittle bit dense.",
    "start": "1964030",
    "end": "1969370"
  },
  {
    "text": "When I'm going to draw this\nsort of reddish, pinkish box around something,\nthat means that I'm",
    "start": "1969370",
    "end": "1975760"
  },
  {
    "text": "going to try to describe all\nstrings except for that one. ",
    "start": "1975760",
    "end": "1990770"
  },
  {
    "text": "I want to avoid\ndescribing that one, because that's the rejecting\ncomputation history, but I want to describe\neverything else.",
    "start": "1990770",
    "end": "1996410"
  },
  {
    "text": "That's my wish. ",
    "start": "1996410",
    "end": "2001870"
  },
  {
    "text": "So here's a check in\nbefore we move forward. But we can also--\nmaybe we should just take some questions, even\nbefore we launch the check in.",
    "start": "2001870",
    "end": "2010463"
  },
  {
    "text": "How are we doing here? ",
    "start": "2010463",
    "end": "2016000"
  },
  {
    "text": "So, is our one describing-- well, R1 is a\nregular expression.",
    "start": "2016000",
    "end": "2023520"
  },
  {
    "text": "Over here, we're\ntalking about a-- this is just an ordinary\ncomputation history, but it ends with a reject.",
    "start": "2023520",
    "end": "2028720"
  },
  {
    "text": "That's all. A rejecting computation\nhistory is just one that's a little different at the end. The machine just ended up\nrejecting instead of accepting.",
    "start": "2028720",
    "end": "2036180"
  },
  {
    "text": "Otherwise everything has to\nbe spelled out in accordance",
    "start": "2036180",
    "end": "2043620"
  },
  {
    "text": "with the rules of the machine\nand the start configuration. ",
    "start": "2043620",
    "end": "2049710"
  },
  {
    "text": "Yeah, we were assuming\none rejecting state. Yeah, that's the way we\nactually define Turing machines",
    "start": "2049710",
    "end": "2055888"
  },
  {
    "text": "in the first place. But, who's arguing. Yeah, there's one reject state.",
    "start": "2055889",
    "end": "2061460"
  },
  {
    "text": "We're all\ndeterministic, correct. Why do we need the padding? Because I want to make these\nall the same size, all of these",
    "start": "2061460",
    "end": "2069560"
  },
  {
    "text": "configurations. That's going to help\nme later in terms of describing the invalid\nconfigurations, the ones that",
    "start": "2069560",
    "end": "2077810"
  },
  {
    "text": "are not legal configurations,\nlegal rejecting configurations.",
    "start": "2077810",
    "end": "2082980"
  },
  {
    "text": "So just simply a\nmatter of convenience, but just accept it for now. I just want all of\nthose configurations",
    "start": "2082980",
    "end": "2089580"
  },
  {
    "text": "to be the same length in my\nrejecting computation history.",
    "start": "2089580",
    "end": "2095540"
  },
  {
    "text": "Otherwise I'm not going to-- I'm just coding that\nrejecting computation history in this particular way.",
    "start": "2095540",
    "end": "2101210"
  },
  {
    "start": "2101210",
    "end": "2106609"
  },
  {
    "text": "So people are asking about\nthe details of bad start. That's yet to come. I have two more slides on this.",
    "start": "2106610",
    "end": "2113010"
  },
  {
    "text": "So I'll tell you about how\nwe're going to do those. So R bad-start-- that's a good\nquestion-- is R bad-start all--",
    "start": "2113010",
    "end": "2121480"
  },
  {
    "text": "these are all the strings\nthat don't start this way. We'll see it in a second.",
    "start": "2121480",
    "end": "2127060"
  },
  {
    "text": "But R bad-start are all the\nthings that don't start with the-- they start bad.",
    "start": "2127060",
    "end": "2133000"
  },
  {
    "text": " They're not starting with\nthe start configuration.",
    "start": "2133000",
    "end": "2139577"
  },
  {
    "text": "They're starting\nwith some other junk. ",
    "start": "2139577",
    "end": "2146130"
  },
  {
    "text": "Do we need only one rejecting\ncomputation history? What about the other ones?",
    "start": "2146130",
    "end": "2151410"
  },
  {
    "text": "This is a deterministic machine,\nso there's only going to be-- if I prescribe the\nlengths as I've done,",
    "start": "2151410",
    "end": "2157060"
  },
  {
    "text": "there's going to be only one\nrejecting computation history. Because it's\ndeterministic, everything is going to be forced\nfrom the beginning.",
    "start": "2157060",
    "end": "2166380"
  },
  {
    "text": "Should R1 be the\nnot of those three? No. R1 is describing\nall of the strings",
    "start": "2166380",
    "end": "2171869"
  },
  {
    "text": "except, except this one string.",
    "start": "2171870",
    "end": "2178660"
  },
  {
    "text": "So I'm capturing all the\ndifferent possible ways a string could fail\nto be the string.",
    "start": "2178660",
    "end": "2184140"
  },
  {
    "text": "It could start wrong. Could be wrong along\nthe middle somewhere. So I have to union\nthem together.",
    "start": "2184140",
    "end": "2191870"
  },
  {
    "text": "Because I'm describing--\nas I always believe, negations are the most\nconfusing thing to everybody,",
    "start": "2191870",
    "end": "2198420"
  },
  {
    "text": "including me. So we're describing\nall the things",
    "start": "2198420",
    "end": "2203460"
  },
  {
    "text": "that are not this string. We're trying to stay\naway from that one.",
    "start": "2203460",
    "end": "2208810"
  },
  {
    "text": "We want to describe\neverything else. ",
    "start": "2208810",
    "end": "2215308"
  },
  {
    "text": "All right, I think I'd\nbetter move on here. We've got a lot of questions. Talk to the TAs.",
    "start": "2215308",
    "end": "2221470"
  },
  {
    "text": "All right, check in. ",
    "start": "2221470",
    "end": "2229190"
  },
  {
    "text": "How big is this rejecting\ncomputation history anyway?",
    "start": "2229190",
    "end": "2235109"
  },
  {
    "text": "Interesting. There's a lesson here. I got a big burst of answers\nright at the very beginning.",
    "start": "2235110",
    "end": "2241680"
  },
  {
    "text": "All wrong. But then the bright-- the people who took a little\nbit more time to think",
    "start": "2241680",
    "end": "2249770"
  },
  {
    "text": "started getting the\nright answer, which is--",
    "start": "2249770",
    "end": "2255620"
  },
  {
    "text": "let's look. We've got a close election here\nfolks, so now I have to report. Hope we don't have\nto do a recount.",
    "start": "2255620",
    "end": "2261080"
  },
  {
    "text": " OK, come on guys.",
    "start": "2261080",
    "end": "2267450"
  },
  {
    "text": "Answer up. 10 seconds. This is not super hard. ",
    "start": "2267450",
    "end": "2273690"
  },
  {
    "text": "Stop the count.  Yeah, I think we'd better stop\nat this, we're on the edge.",
    "start": "2273690",
    "end": "2280905"
  },
  {
    "text": " OK, 3 seconds. ",
    "start": "2280905",
    "end": "2290030"
  },
  {
    "text": "End polling. Share results. ",
    "start": "2290030",
    "end": "2300670"
  },
  {
    "text": "The correct answer\nis, in fact, c. Why is that? Because each configuration\nis 2 to the n to the k.",
    "start": "2300670",
    "end": "2307900"
  },
  {
    "text": "So that's how much space the\nmachine has, exponential space. But the amount of time,\nwhich is each one--",
    "start": "2307900",
    "end": "2315328"
  },
  {
    "text": "the number of\nconfigurations is going to be the amount of\ntime that's used. It's going to be exponentially\nmore even than that.",
    "start": "2315328",
    "end": "2322300"
  },
  {
    "text": "So it's going to be 2 to\nthe 2 to the n of the k, is how many steps\nthe machine can run.",
    "start": "2322300",
    "end": "2327550"
  },
  {
    "text": "And that's going to be how long\nthe computation history could be. So it's a very long thing.",
    "start": "2327550",
    "end": "2335650"
  },
  {
    "text": "And when you think about\nit, the regular expression",
    "start": "2335650",
    "end": "2342069"
  },
  {
    "text": "we are generating,\nhow big is that?  The regular expression--\nagain, a lot",
    "start": "2342070",
    "end": "2349490"
  },
  {
    "text": "of people playing\noff my comments here. ",
    "start": "2349490",
    "end": "2355660"
  },
  {
    "text": "Were the votes legal or not? OK. Let's focus here. ",
    "start": "2355660",
    "end": "2362990"
  },
  {
    "text": "So this is doubly\nexponentially large. How big is the\nregular expression",
    "start": "2362990",
    "end": "2368360"
  },
  {
    "text": "that we're generating? Well that has to be\nproduced in polynomial time, so it's only polynomially big.",
    "start": "2368360",
    "end": "2374330"
  },
  {
    "text": "So we have this little teensy\nweensy, relatively speaking, regular expression,\nwhich is only n to the k.",
    "start": "2374330",
    "end": "2382100"
  },
  {
    "text": "It's having to\ndescribe all strings except for this particular\nstring, which is 2 to the 2",
    "start": "2382100",
    "end": "2389300"
  },
  {
    "text": "to the n to the k. So in a sense,\nthis string that is",
    "start": "2389300",
    "end": "2394410"
  },
  {
    "text": "related to that\nregular expression is doubly exponentially\nlarger than that. And that kind of presents\nsome of the challenge",
    "start": "2394410",
    "end": "2401070"
  },
  {
    "text": "in doing the reduction,\nin constructing that regular expression.",
    "start": "2401070",
    "end": "2407640"
  },
  {
    "text": "So let's move on\nand start doing-- this is the hard stuff.",
    "start": "2407640",
    "end": "2412660"
  },
  {
    "start": "2408000",
    "end": "2923000"
  },
  {
    "text": "Here is the bad start,\nwhich is challenging enough. Even this little piece is going\nto be a little bit challenging",
    "start": "2412660",
    "end": "2420160"
  },
  {
    "text": "to describe. Just rewriting from\nthe previous slide.",
    "start": "2420160",
    "end": "2426230"
  },
  {
    "text": "So we're trying\nto make R1, which is generating all the\nstrings except the rejecting computation history for M on w.",
    "start": "2426230",
    "end": "2434230"
  },
  {
    "text": "It's in those three parts. Right now I'm describing\nthe bad start piece. So that's going to\ndescribe all strings that",
    "start": "2434230",
    "end": "2441819"
  },
  {
    "text": "don't start with this C1. So let me write that out here.",
    "start": "2441820",
    "end": "2447880"
  },
  {
    "text": "This is going to\ngenerate all strings that don't start with C start or\nC1, which is as specified.",
    "start": "2447880",
    "end": "2456520"
  },
  {
    "text": "Looks like this. So any string that doesn't start\nwith these symbols, doesn't start exactly like\nthis, should be",
    "start": "2456520",
    "end": "2466610"
  },
  {
    "text": "described by bad start,\nthat regular expression.",
    "start": "2466610",
    "end": "2472220"
  },
  {
    "text": "So that, in itself, is going\nto be further subdivided.",
    "start": "2472220",
    "end": "2477619"
  },
  {
    "text": "And the reason for that is\nnot that hard to understand. I'm going to--\nbad start is going",
    "start": "2477620",
    "end": "2484490"
  },
  {
    "text": "to accomplish its\ngoal by saying, well,",
    "start": "2484490",
    "end": "2491600"
  },
  {
    "text": "anything that doesn't\nstart this way either doesn't start with a q0,\nor doesn't or doesn't",
    "start": "2491600",
    "end": "2498259"
  },
  {
    "text": "have a w1 in the next\nplace, or doesn't have a w2 in the next place. Or somewhere along the\nway, it has a wrong symbol.",
    "start": "2498260",
    "end": "2508220"
  },
  {
    "text": "Each one of these guys\nis going to be about one of those symbols being wrong\nin some particular place.",
    "start": "2508220",
    "end": "2518973"
  },
  {
    "text": "So I'm going to show you\nwhat those look like. So right now, I'm going\nto focus my attention",
    "start": "2518973",
    "end": "2527750"
  },
  {
    "text": "on describing all strings\nexcept for this one.",
    "start": "2527750",
    "end": "2532960"
  },
  {
    "text": "All strings that start with\nsomething except for this one.",
    "start": "2532960",
    "end": "2538150"
  },
  {
    "text": " So just remember,\ndelta is the alphabet",
    "start": "2538150",
    "end": "2543310"
  },
  {
    "text": "for the competition histories. And some notation here,\ndelta sub epsilon,",
    "start": "2543310",
    "end": "2548950"
  },
  {
    "text": "we've seen this\nbefore, is you're going to add in epsilon as\nan allowed thing for delta.",
    "start": "2548950",
    "end": "2555490"
  },
  {
    "text": "So it's all the\nsymbols, or epsilon, now thought of as a set here.",
    "start": "2555490",
    "end": "2561740"
  },
  {
    "text": "And furthermore, it's going to\nbe convenient to talk about all of the symbols in delta,\nexcept for some symbol.",
    "start": "2561740",
    "end": "2569079"
  },
  {
    "text": "So like at the\nvery beginning, q0. I want to talk about all of the\nsymbols except for q0 symbol.",
    "start": "2569080",
    "end": "2575092"
  },
  {
    "text": "Because that's what\nI'm going to be using to start off R bad-start.",
    "start": "2575092",
    "end": "2582130"
  },
  {
    "text": "It's going to be\nanything except for q0. So let's just see\nhow that looks.",
    "start": "2582130",
    "end": "2587370"
  },
  {
    "text": "So here is S0, the very\nfirst part of our bad start. It's going to say--",
    "start": "2587370",
    "end": "2594420"
  },
  {
    "text": "I'm trying to color the\nactive ingredient here in the pink color.",
    "start": "2594420",
    "end": "2602020"
  },
  {
    "text": "So delta, with q0 removed,\nfollowed by anything.",
    "start": "2602020",
    "end": "2609980"
  },
  {
    "text": "So this little\nregular expression here describes all strings\nthat don't start with a q0,",
    "start": "2609980",
    "end": "2616460"
  },
  {
    "text": "as I'm indicating over here. All strings that\ndon't start with a q0 is what as S0 describes.",
    "start": "2616460",
    "end": "2625750"
  },
  {
    "text": "You have to understand\nthat, because it's just going to build up from there. ",
    "start": "2625750",
    "end": "2631880"
  },
  {
    "text": "So what do we want\nto say for S1? What's going to be\nall strings that don't have w1 in the second place?",
    "start": "2631880",
    "end": "2638990"
  },
  {
    "text": "So I'm going to\nwrite that over here. S1 is anything in\nthe first place--",
    "start": "2638990",
    "end": "2646520"
  },
  {
    "text": "I mean, if the first place\nwas wrong, S0 took care of it. So I'm just going to\nkeep my life simple. All I want to do is\ndescribe all of the places",
    "start": "2646520",
    "end": "2655029"
  },
  {
    "text": "where the second\nsymbol is wrong. Namely, it's not w1. So anything in the\nfirst place, something",
    "start": "2655030",
    "end": "2662600"
  },
  {
    "text": "besides w1 in the next place,\nand then anything at all afterward.",
    "start": "2662600",
    "end": "2668150"
  },
  {
    "text": "Those are all strings\nthat don't have-- [AUDIO CUTS]",
    "start": "2668150",
    "end": "2674839"
  },
  {
    "text": "So I'll write it\nover here like that. Now S2 similarly is going to\nd since I have exponentiation,",
    "start": "2674840",
    "end": "2681840"
  },
  {
    "text": "let's use that for convenience. Delta delta, or\njust delta squared.",
    "start": "2681840",
    "end": "2687930"
  },
  {
    "text": "So anything in the first two\nplaces, then not w2, and then",
    "start": "2687930",
    "end": "2693645"
  },
  {
    "text": "the next place,\nand then anything. So that's going to\ncapture this part. So this is what\nthese S's do, and you",
    "start": "2693645",
    "end": "2699630"
  },
  {
    "text": "can sort of get the idea. So dot, dot, dot. This Sn is going to\ndescribe everything",
    "start": "2699630",
    "end": "2704790"
  },
  {
    "text": "except for wn in\nthat location, which is going to be the n plus\nfirst location, actually.",
    "start": "2704790",
    "end": "2712590"
  },
  {
    "text": "And now I have to continue\non doing that for the blanks.",
    "start": "2712590",
    "end": "2718620"
  },
  {
    "text": "So now, if you think\nwith me, let's just",
    "start": "2718620",
    "end": "2724380"
  },
  {
    "text": "take a look how that could go. ",
    "start": "2724380",
    "end": "2729630"
  },
  {
    "text": "The next symbol, which is\nskipping over the n plus 1",
    "start": "2729630",
    "end": "2734789"
  },
  {
    "text": "that I've already\ntaken care of, I want to say it's not a\nblank symbol in this very",
    "start": "2734790",
    "end": "2741890"
  },
  {
    "text": "first location after the input. So again, I'm\ndescribing these non-- these strings which are not\nthe start configuration.",
    "start": "2741890",
    "end": "2749420"
  },
  {
    "text": "It could fail because\nthere's not a blank where there's supposed to be a blank.",
    "start": "2749420",
    "end": "2754490"
  },
  {
    "text": " Suppose I do that for\neach one of these guys. ",
    "start": "2754490",
    "end": "2762789"
  },
  {
    "text": "That would work. But. But what? ",
    "start": "2762790",
    "end": "2770250"
  },
  {
    "text": "Think. This is actually not going\nto be a good solution for us.",
    "start": "2770250",
    "end": "2777260"
  },
  {
    "text": "Because there are exponentially\nmany blanks over here. This is a hugely\nlong configuration.",
    "start": "2777260",
    "end": "2784651"
  },
  {
    "text": "And so there's\nexponentially many blanks. If I do it this way, I'm going\nto end up with an exponentially",
    "start": "2784652",
    "end": "2790890"
  },
  {
    "text": "large regular expression. And that's not doable\nin polynomial time.",
    "start": "2790890",
    "end": "2795970"
  },
  {
    "text": "So I have a more complicated\nway of getting the same effect. Which is-- I don't\nreally expect you to fully parse\nthrough this right",
    "start": "2795970",
    "end": "2803010"
  },
  {
    "text": "now, in real time in lecture,\nbut let me try to help you. What I'm going to do is skip\nover these first initial n",
    "start": "2803010",
    "end": "2810030"
  },
  {
    "text": "plus 1 places, and\nthen a variable number of places, which is indicated\nby the next piece here.",
    "start": "2810030",
    "end": "2818310"
  },
  {
    "text": "And the way that works is-- these are all\nstrings of length n plus 1 through the end\nof the configuration.",
    "start": "2818310",
    "end": "2829370"
  },
  {
    "text": "And to understand that,\nit's almost a little too technical to even\ntry, but let's see.",
    "start": "2829370",
    "end": "2836630"
  },
  {
    "text": "If I put delta to the 7,\nthat's all strings of length 7. But if I put delta\nsub epsilon to the 7,",
    "start": "2836630",
    "end": "2842840"
  },
  {
    "text": "if you think about\nwhat that means, that's all strings of\nlength between 0 and 7.",
    "start": "2842840",
    "end": "2848119"
  },
  {
    "text": " Because I can either\nhave it as epsilon",
    "start": "2848120",
    "end": "2853660"
  },
  {
    "text": "as my variable or a\nsymbol from delta. And so that's what\nI'm doing over here.",
    "start": "2853660",
    "end": "2859360"
  },
  {
    "text": "I'm getting a variable length\nspace, spacer of deltas,",
    "start": "2859360",
    "end": "2865240"
  },
  {
    "text": "that are going to then end\nup at a certain location-- I'm going to say at that place.",
    "start": "2865240",
    "end": "2870670"
  },
  {
    "text": "Then I have a non-blank. Because all I need\nto do is describe",
    "start": "2870670",
    "end": "2876220"
  },
  {
    "text": "the strings that fail to have a\nblank somewhere in this range.",
    "start": "2876220",
    "end": "2882440"
  },
  {
    "text": "So we've got to sort\nhave a variable spacer out to that spot, where\nthat missing blank might be.",
    "start": "2882440",
    "end": "2890800"
  },
  {
    "text": "So that's what this describes. If you didn't get\nthat, don't worry. That is a technical\npoint and you can",
    "start": "2890800",
    "end": "2897010"
  },
  {
    "text": "try to think about it offline. And then at the very end, I'm\ngoing to describe what happens.",
    "start": "2897010",
    "end": "2905380"
  },
  {
    "text": "Describe the strings\nthat fail to have a hashtag in that location.",
    "start": "2905380",
    "end": "2910510"
  },
  {
    "text": "It's how I describe all\nstrings that don't start right.",
    "start": "2910510",
    "end": "2916180"
  },
  {
    "text": "That's a lot of work, just\nto do that little piece. Fortunately, the next two\npieces are easier, surprisingly.",
    "start": "2916180",
    "end": "2922540"
  },
  {
    "text": " You can jump in with a\nquestion, but maybe I",
    "start": "2922540",
    "end": "2930160"
  },
  {
    "start": "2923000",
    "end": "3153000"
  },
  {
    "text": "should move, push on. So now I'm going to describe the\nbad move and bad reject pieces.",
    "start": "2930160",
    "end": "2938580"
  },
  {
    "text": "And bad reject\ngenerates all strings that don't contain\nthe q reject symbol.",
    "start": "2938580",
    "end": "2946200"
  },
  {
    "text": "So that's going to\ncertainly describe all of the strings that\ndon't end correctly.",
    "start": "2946200",
    "end": "2951580"
  },
  {
    "text": "And that's just simply\nthe delta with the q reject symbol removed, and\nthen any string of those.",
    "start": "2951580",
    "end": "2959730"
  },
  {
    "text": "That's all strings that\ndon't have q reject. So that's going to\ndescribe all strings that",
    "start": "2959730",
    "end": "2966359"
  },
  {
    "text": "don't end with a q reject,\nplus some other junk strings along the way. But that's all that's\nnever a problem,",
    "start": "2966360",
    "end": "2973500"
  },
  {
    "text": "to put in other strings\nthat you might be capturing in some other part of\nthe regular expression",
    "start": "2973500",
    "end": "2978570"
  },
  {
    "text": "that you know are bad strings. You just want to make sure you\ndon't put in that one uniquely good string, which is\nthe rejecting computation",
    "start": "2978570",
    "end": "2985500"
  },
  {
    "text": "history, good string. And lastly, we're\ngoing to use the notion",
    "start": "2985500",
    "end": "2991470"
  },
  {
    "text": "of the neighborhoods. You might think this\nis the hardest part, but in fact not that hard.",
    "start": "2991470",
    "end": "2997820"
  },
  {
    "text": "So these are all\nof the strings that have somewhere along the\nway a violation according",
    "start": "2997820",
    "end": "3008160"
  },
  {
    "text": "to M's rules. You want to describe\nall of those as well. I'm going to do that in\nterms of the neighborhoods.",
    "start": "3008160",
    "end": "3013720"
  },
  {
    "text": "But the neighborhoods are\ngoing to be stretched out.",
    "start": "3013720",
    "end": "3019320"
  },
  {
    "text": "We don't have a tableau\nanymore, so they're not so easily visualizable,\nbut it's the same idea,",
    "start": "3019320",
    "end": "3025910"
  },
  {
    "text": "the neighborhood. So this is abc and def. But now it's an\nillegal neighborhood.",
    "start": "3025910",
    "end": "3032630"
  },
  {
    "text": "def does not follow from abc. ",
    "start": "3032630",
    "end": "3039170"
  },
  {
    "text": "If all the\nneighborhoods are legal, then the whole computation\nis a legitimate computation,",
    "start": "3039170",
    "end": "3045710"
  },
  {
    "text": "provided it starts\nand ends correctly. So if it's not a\nlegitimate computation, there's got to be an illegal\nneighborhood somewhere.",
    "start": "3045710",
    "end": "3052520"
  },
  {
    "text": "And I'm going to just\ndescribe all strings that have an illegal neighborhood.",
    "start": "3052520",
    "end": "3057530"
  },
  {
    "text": "And the interesting part is\nthat you have to describe-- you have to place that\nseparator between abc and def.",
    "start": "3057530",
    "end": "3067430"
  },
  {
    "text": "So this is another place where\nwe're going to critically use the exponentiation, and the fact\nthat all of the configurations",
    "start": "3067430",
    "end": "3077780"
  },
  {
    "text": "are the same length. That's what we're using there. We know exactly how\nfar apart the bottom",
    "start": "3077780",
    "end": "3083720"
  },
  {
    "text": "of the 2 by 3 neighborhood\nis from the top of the 2 by 3 neighborhood. So we're going to take a\nunion over all illegal 2",
    "start": "3083720",
    "end": "3093109"
  },
  {
    "text": "by 3 neighborhoods. Neighborhood settings,\nI should say. And there's only a fixed number\nof those, for the same reason",
    "start": "3093110",
    "end": "3099620"
  },
  {
    "text": "that we had in the\nCook-Levin theorem. There's a fixed number of those,\ndepending upon the machine. And now we're going\nto have, say, we're",
    "start": "3099620",
    "end": "3105920"
  },
  {
    "text": "going to start with anything. Here's the top of\nthe neighborhood. Here is the separator\nthat separates the top",
    "start": "3105920",
    "end": "3113480"
  },
  {
    "text": "from the bottom in the two\nconsecutive configurations, here's Ci going C i plus 1\ninside my computation history.",
    "start": "3113480",
    "end": "3123410"
  },
  {
    "text": "And then after that\nseparator, I put in the second part of the\nneighborhood, which is the def.",
    "start": "3123410",
    "end": "3129365"
  },
  {
    "text": " You have to really be\ncomfortable with the way we've",
    "start": "3129365",
    "end": "3136870"
  },
  {
    "text": "been presenting these\nother reductions up till now, to really get this.",
    "start": "3136870",
    "end": "3142090"
  },
  {
    "text": "Anyway, I think\nwe're at the break. So we can just take\nquestions during the break,",
    "start": "3142090",
    "end": "3147940"
  },
  {
    "text": "if you have any. And I will, otherwise,\nsee you in five minutes.",
    "start": "3147940",
    "end": "3155910"
  },
  {
    "text": "In my description back here-- let me just take this off. ",
    "start": "3155910",
    "end": "3162810"
  },
  {
    "text": "For bad reject, it looks like\nI'm doing kind of overkill,",
    "start": "3162810",
    "end": "3167910"
  },
  {
    "text": "and maybe doing\nsomething wrong here. I'm describing all strings that\ndon't have a reject anywhere.",
    "start": "3167910",
    "end": "3173309"
  },
  {
    "text": "But as long as I don't describe\nthe legitimate rejecting computation history, I do\ndescribe all strings that",
    "start": "3173310",
    "end": "3182200"
  },
  {
    "text": "don't end correctly, I'm good.",
    "start": "3182200",
    "end": "3187490"
  },
  {
    "text": "I could go through more\neffort to make sure that I'm only describing the\nvery last configuration here",
    "start": "3187490",
    "end": "3195380"
  },
  {
    "text": "as not having the reject. But that would\njust be more work,",
    "start": "3195380",
    "end": "3202465"
  },
  {
    "text": "and I don't need\nto do that work. So maybe it would be\ngood just to understand why this is sufficient,\nwhat I've described here,",
    "start": "3202465",
    "end": "3208172"
  },
  {
    "text": "and it's not going to\ncause me any problems. ",
    "start": "3208172",
    "end": "3217009"
  },
  {
    "text": "I'm getting a note from\none of my TAs, Thomas, saying that the\nnotion \"bad\" perhaps",
    "start": "3217010",
    "end": "3223910"
  },
  {
    "text": "is confusing, because bad\nsounds like rejecting. Yes. I mean bad in the sense of not\ndescribing a legal computation",
    "start": "3223910",
    "end": "3232490"
  },
  {
    "text": "history. If you can think\nof another name, I'm happy to switch\nthat for future years.",
    "start": "3232490",
    "end": "3239089"
  },
  {
    "text": "Too late for now. But, yeah. I don't mean that rejecting,\nI mean that it's-- ",
    "start": "3239090",
    "end": "3247050"
  },
  {
    "text": "well, I don't know\nwhat the right term is. Illegal? Or-- I'm not sure what a good--",
    "start": "3247050",
    "end": "3254515"
  },
  {
    "text": "How are the neighborhoods\ndefined here? What is the tableau here? I think you do need to think\nabout it after lecture.",
    "start": "3254515",
    "end": "3262790"
  },
  {
    "text": "But the tableau, you\ncan think of the tableau now here just\nwritten out linearly.",
    "start": "3262790",
    "end": "3268030"
  },
  {
    "text": "There are all of the\nrows now, instead of nicely organized into a table. They just appear\nconsecutively, because I'm just",
    "start": "3268030",
    "end": "3275557"
  },
  {
    "text": "trying to describe-- I need to do it to\ndescribe a string, whether my regular\nexpression doesn't really make sense to think about.",
    "start": "3275557",
    "end": "3281520"
  },
  {
    "text": "I mean you can fold it up\ninto a tableau, if you like. And then abc and\ndef will line up.",
    "start": "3281520",
    "end": "3287220"
  },
  {
    "text": "But here, if you think about\nthem written consecutively, this is exactly how far\napart they end up being.",
    "start": "3287220",
    "end": "3292740"
  },
  {
    "text": " Are there only polynomially\nmany illegal neighborhoods?",
    "start": "3292740",
    "end": "3302570"
  },
  {
    "text": "That's why I kind\nof corrected myself. It's not illegal\nneighborhoods that we're talking-- because the number of\nneighborhoods in this picture",
    "start": "3302570",
    "end": "3310300"
  },
  {
    "text": "is vast. But the number of\nneighborhood settings, the way to set these\nvalues to abc, def.",
    "start": "3310300",
    "end": "3317049"
  },
  {
    "text": " I mean these are\nsymbols that can",
    "start": "3317050",
    "end": "3322810"
  },
  {
    "text": "appear in a configuration\nof the machine.",
    "start": "3322810",
    "end": "3329790"
  },
  {
    "text": "There's only a fixed number of\nsymbols that can appear here, that depend upon the\ndefinition of the machine.",
    "start": "3329790",
    "end": "3338310"
  },
  {
    "text": "So it's not only polynomial. There's a constant number\nof these things, that only depends on the machine.",
    "start": "3338310",
    "end": "3345190"
  },
  {
    "text": "So you have to think\nabout what's going on. There's a lot-- this\nis a lot on the slide. ",
    "start": "3345190",
    "end": "3354480"
  },
  {
    "text": "Bad history for reject. It's a bad history\nfor rejecting, somebody's suggesting. Yeah, it's a bad history.",
    "start": "3354480",
    "end": "3361765"
  },
  {
    "text": " Fake news. Maybe we should be fake.",
    "start": "3361765",
    "end": "3367360"
  },
  {
    "text": "Fake would be a good term. No, that's not so good. I don't know. ",
    "start": "3367360",
    "end": "3377599"
  },
  {
    "text": "Yeah, 2 by 3. The reason 2 by\n3, is the right-- Somebody's asking why 2 by 3.",
    "start": "3377600",
    "end": "3382880"
  },
  {
    "text": "2 by 3 is exactly\nthe size you need to say that, if all the\n2 by 3 neighborhoods",
    "start": "3382880",
    "end": "3388280"
  },
  {
    "text": "are correct everywhere in\nthe computation history,",
    "start": "3388280",
    "end": "3393620"
  },
  {
    "text": "then the whole\nhistory is going to be consistent with the\nrules of M. It's going to be a legal\nrepresentation of a computation",
    "start": "3393620",
    "end": "3401030"
  },
  {
    "text": "of M. So if the string, which\nis allegedly a computation",
    "start": "3401030",
    "end": "3408500"
  },
  {
    "text": "history, has a bad\nneighborhood somewhere, bad 2 by 3 neighborhood\nsomewhere, then--",
    "start": "3408500",
    "end": "3415140"
  },
  {
    "text": "well if it's not a legal\ncomputation history, it's got to have a\nbad neighborhood, 2",
    "start": "3415140",
    "end": "3420920"
  },
  {
    "text": "by 3 neighborhood somewhere. ",
    "start": "3420920",
    "end": "3426390"
  },
  {
    "text": "OK, let's move on. Because I think we're\nout of time here.",
    "start": "3426390",
    "end": "3433970"
  },
  {
    "text": "Our timer is up. We're going to shift\ngears now anyway. So if you got a little\nlost in the previous proof,",
    "start": "3433970",
    "end": "3442803"
  },
  {
    "text": "we're going to talk about\nsomething different. And in some ways,\na little bit, I think a little lighter,\na little less technical. And that's about oracles.",
    "start": "3442803",
    "end": "3448542"
  },
  {
    "start": "3448542",
    "end": "3456570"
  },
  {
    "start": "3453000",
    "end": "3599000"
  },
  {
    "text": "What are oracles? Oracles are a simple thing. ",
    "start": "3456570",
    "end": "3461700"
  },
  {
    "text": "But they are a useful concept\nfor a number of reasons.",
    "start": "3461700",
    "end": "3468008"
  },
  {
    "text": "Especially because\nthey're going to tell us something interesting about\nmethods, which may or may not be useful for proving\nthe P versus NP question,",
    "start": "3468008",
    "end": "3475560"
  },
  {
    "text": "when someday somebody\nhopefully does that. ",
    "start": "3475560",
    "end": "3481170"
  },
  {
    "text": "What is an oracle? An oracle is free\ninformation you're going to give to a\nTuring machine, which",
    "start": "3481170",
    "end": "3487050"
  },
  {
    "text": "might affect the difficulty\nof solving problems. And the way we're going to\nrepresent that free information",
    "start": "3487050",
    "end": "3493860"
  },
  {
    "text": "is, we're going to allow\nthe Turing machine to test membership in some\nspecified language,",
    "start": "3493860",
    "end": "3501740"
  },
  {
    "text": "without charging for\nthe work involved.",
    "start": "3501740",
    "end": "3507230"
  },
  {
    "text": " I'm going to allow you have any\nlanguage at all, some language",
    "start": "3507230",
    "end": "3514090"
  },
  {
    "text": "A. And say a Turing machine\nwith an oracle for A is written this way, M\nwith a superscript A. It's",
    "start": "3514090",
    "end": "3523085"
  },
  {
    "text": "a machine that has a black\nbox that can answer questions. Is some string, which\nthe machine can choose,",
    "start": "3523085",
    "end": "3530540"
  },
  {
    "text": "in A or not? And it gets that answer in one\nstep, effectively for free.",
    "start": "3530540",
    "end": "3536339"
  },
  {
    "text": " So you can imagine, depending\nupon the language that you're",
    "start": "3536340",
    "end": "3544320"
  },
  {
    "text": "providing to the machine,\nthat may or may not be useful. ",
    "start": "3544320",
    "end": "3551250"
  },
  {
    "text": "For example, suppose I give you\nan oracle for the SAT language. That can be very useful.",
    "start": "3551250",
    "end": "3557880"
  },
  {
    "text": "It could be very useful for\ndeciding SAT, for example. Because now you don't have to\ngo through a brute force search",
    "start": "3557880",
    "end": "3564109"
  },
  {
    "text": "to solve SAT. You just ask the oracle. And the oracle is going to\nsay, yes it's satisfiable,",
    "start": "3564110",
    "end": "3569630"
  },
  {
    "text": "or no it's not satisfiable. But you can use that to solve\nother languages too, quickly.",
    "start": "3569630",
    "end": "3576230"
  },
  {
    "text": "Because anything that you can\ndo in NP, you can reduce to SAT. So you can convert it to a SAT\nquestion, which you can then",
    "start": "3576230",
    "end": "3583382"
  },
  {
    "text": "ship up to the oracle,\nand the oracle is going to tell you the answer. The word \"oracle\" already sort\nof conveys something magical.",
    "start": "3583383",
    "end": "3591480"
  },
  {
    "text": "We're not really\ngoing to be concerned with the operation of the\noracle, so don't ask me how does the oracle work, or\nwhat does it correspond to",
    "start": "3591480",
    "end": "3597602"
  },
  {
    "text": "in reality. It doesn't. It's just a mathematical\ndevice which provides this free information\nto the Turing machine, which",
    "start": "3597602",
    "end": "3603770"
  },
  {
    "text": "enables it to compute\ncertain things. It turns out to be\na useful concept. It's used in cryptography,\nwhere you might imagine",
    "start": "3603770",
    "end": "3609740"
  },
  {
    "text": "the oracle could provide\nthe factors to some number, or the password to some\nsystem or something.",
    "start": "3609740",
    "end": "3616340"
  },
  {
    "text": "Free information. And then what can\nyou do with that? So this is a notion that\ncomes up in other places.",
    "start": "3616340",
    "end": "3622474"
  },
  {
    "start": "3622475",
    "end": "3627660"
  },
  {
    "text": "If we have an oracle, we can\nthink of all of the things",
    "start": "3627660",
    "end": "3634369"
  },
  {
    "text": "that you can compute\nin polynomial time relative to that oracle. So that's what we--",
    "start": "3634370",
    "end": "3641600"
  },
  {
    "text": "the terminology that\npeople usually use is sometimes called\nrelativism, or computation relative to having\nthis extra information.",
    "start": "3641600",
    "end": "3649020"
  },
  {
    "text": "So P with an A oracle\nis all of the language that you can decide\nin polynomial time",
    "start": "3649020",
    "end": "3654740"
  },
  {
    "text": "if you have an oracle\nfor A. Let's see. ",
    "start": "3654740",
    "end": "3665190"
  },
  {
    "text": "Yeah. Somebody's asking\nme, is it really free or does it cost one unit?",
    "start": "3665190",
    "end": "3670326"
  },
  {
    "text": "Even just setting up the oracle\nand writing down the question to the oracle is going to\ntake you some number of steps. So you're not going to be\nable do an infinite number",
    "start": "3670326",
    "end": "3677447"
  },
  {
    "text": "of oracle calls in zero time. So charging one\nstep or zero steps, not going to make a difference.",
    "start": "3677447",
    "end": "3683490"
  },
  {
    "text": "Because you still have to\nformulate the question. ",
    "start": "3683490",
    "end": "3692230"
  },
  {
    "text": "As I pointed out, P\nwith a SAT oracle-- so all the things you\ndo in polynomial time with a SAT oracle includes NP.",
    "start": "3692230",
    "end": "3699529"
  },
  {
    "text": "Does it perhaps\ninclude other stuff? Or does it equal NP?",
    "start": "3699530",
    "end": "3706192"
  },
  {
    "text": "Would have been a good\ncheck-in question, but I'm not going to ask that. In fact, it seems like it\ncontains other things too.",
    "start": "3706192",
    "end": "3714320"
  },
  {
    "text": "Because co-NP is also contained\nwithin P, given a SAT oracle.",
    "start": "3714320",
    "end": "3720590"
  },
  {
    "text": "Because the SAT oracle\nanswer is both yes or no, depending upon the answer.",
    "start": "3720590",
    "end": "3727050"
  },
  {
    "text": "So if the formula\nis unsatisfiable, the oracle is going to say\nno, it's not in the language.",
    "start": "3727050",
    "end": "3732980"
  },
  {
    "text": "And now you can do the\ncomplement of the SAT problem as well. The unsatisfiability problem.",
    "start": "3732980",
    "end": "3738579"
  },
  {
    "text": "So you can do all of\nco-NP in the same way. You can also define NP\nrelative to some oracle.",
    "start": "3738580",
    "end": "3745840"
  },
  {
    "text": "So all the things you can do\nwith a non-deterministic Turing machine, where all\nof the branches",
    "start": "3745840",
    "end": "3750910"
  },
  {
    "text": "have separately access. And they can ask multiple\nquestions, by the way, of the oracle.",
    "start": "3750910",
    "end": "3758839"
  },
  {
    "text": "Independently.  Let's do another, a little bit\nof a more challenging example.",
    "start": "3758840",
    "end": "3766690"
  },
  {
    "text": "The MIN-FORMULA language,\nwhich I hope you remember from your homework. ",
    "start": "3766690",
    "end": "3773510"
  },
  {
    "text": "So those are all of the\nformulas that do not have a shorter equivalent formula.",
    "start": "3773510",
    "end": "3781849"
  },
  {
    "text": "They are minimal. You cannot make a smaller\nformula that's equivalent that gives you the same\nBoolean function.",
    "start": "3781850",
    "end": "3789950"
  },
  {
    "text": "So you showed, for example, that\nthat language is in P space, as I recall.",
    "start": "3789950",
    "end": "3795430"
  },
  {
    "text": "And there was some other--\nyou had another two problems about that language. ",
    "start": "3795430",
    "end": "3803200"
  },
  {
    "text": "The complement of the\nMIN-FORMULA problem is in NP with a SAT oracle.",
    "start": "3803200",
    "end": "3808800"
  },
  {
    "text": " So mull that over for a\nsecond and then we'll see why.",
    "start": "3808800",
    "end": "3814309"
  },
  {
    "start": "3814310",
    "end": "3822040"
  },
  {
    "text": "Here's an algorithm, in NP\nwith a SAT oracle algorithm.",
    "start": "3822040",
    "end": "3829900"
  },
  {
    "text": "So in other words, now I\nwant to kind of implement",
    "start": "3829900",
    "end": "3837470"
  },
  {
    "text": "that strategy, which I argued\nin the homework problem was not legal. But now that I have\nthe SAT oracle, it's going to make it\npossible where before it",
    "start": "3837470",
    "end": "3845600"
  },
  {
    "text": "was not possible.  So let's just understand\nwhat I mean by that.",
    "start": "3845600",
    "end": "3852950"
  },
  {
    "text": " If I'm trying to do the\nnon minimal formulas,",
    "start": "3852950",
    "end": "3860920"
  },
  {
    "text": "namely the formulas that do have\na shorter equivalent formula.",
    "start": "3860920",
    "end": "3869049"
  },
  {
    "text": "I'm going to guess that\nshorter formula, called psi. ",
    "start": "3869050",
    "end": "3875049"
  },
  {
    "text": "The challenge before was testing\nwhether that shorter formula was actually equivalent to phi.",
    "start": "3875050",
    "end": "3881400"
  },
  {
    "text": "Because that's not obviously\ndoable in polynomial time. But the equivalence problem for\nformulas is a co-NP problem.",
    "start": "3881400",
    "end": "3891620"
  },
  {
    "text": "Or if you like to think\nabout it the other way, any formula in equivalence\nis an NP problem,",
    "start": "3891620",
    "end": "3897440"
  },
  {
    "text": "because you just\nhave to-- the witness is the assignment on\nwhich they disagree. ",
    "start": "3897440",
    "end": "3905369"
  },
  {
    "text": "So two formulas are equivalent\nif they never disagree. And so that's a co-NP problem.",
    "start": "3905370",
    "end": "3911295"
  },
  {
    "text": " A SAT oracle can\nsolve a co-NP problem.",
    "start": "3911295",
    "end": "3918320"
  },
  {
    "text": "Namely, the equivalence of the\ntwo formulas, the input formula and the one that you now\ndeterministically guessed.",
    "start": "3918320",
    "end": "3925820"
  },
  {
    "text": "And if it turns out that\nthey are equivalent, a smaller formula is equivalent\nto the input formula, you know the input\nformula is not minimal.",
    "start": "3925820",
    "end": "3934568"
  },
  {
    "text": "And so you can accept.  And if it gets\nthe wrong formula,",
    "start": "3934568",
    "end": "3940710"
  },
  {
    "text": "it turns out not\nto be equivalent, then you reject on that\nbranch of the non-determinism, just like we did before.",
    "start": "3940710",
    "end": "3947200"
  },
  {
    "text": "And if the formula really was\nminimal, none of the branches is going to find a shorter\nequivalent formula.",
    "start": "3947200",
    "end": "3954340"
  },
  {
    "text": "So that's why this problem here\nis in NP with a SAT oracle. ",
    "start": "3954340",
    "end": "3964510"
  },
  {
    "text": "So now we're going to try\nto investigate this on my-- we're getting near the\nend of the lecture.",
    "start": "3964510",
    "end": "3973040"
  },
  {
    "text": "We're going to look at\nproblems like, well,",
    "start": "3973040",
    "end": "3980270"
  },
  {
    "text": "suppose I compare\nP with a SAT oracle and NP with a SAT oracle.",
    "start": "3980270",
    "end": "3985980"
  },
  {
    "text": "Could those be the same? Well, there's reasons to\nbelieve those are not the same.",
    "start": "3985980",
    "end": "3991440"
  },
  {
    "text": " But could there be any\nA where P with A oracle",
    "start": "3991440",
    "end": "4001330"
  },
  {
    "text": "is the same as NP\nwith an A oracle? It seems like no, but\nactually that's wrong.",
    "start": "4001330",
    "end": "4008050"
  },
  {
    "text": "There is a language, there\nare languages for which NP with that oracle\nand P with that oracle",
    "start": "4008050",
    "end": "4015460"
  },
  {
    "text": "are exactly the same. And that actually is an\ninterest-- it's not just a curiosity, it actually\nhas relevance to strategies",
    "start": "4015460",
    "end": "4023859"
  },
  {
    "text": "for solving P versus NP.  Hopefully I'll be able\nto have time to get to.",
    "start": "4023860",
    "end": "4031720"
  },
  {
    "text": "Can we think of an\noracle like a hash table? I think hashing is somehow\ndifferent in spirit.",
    "start": "4031720",
    "end": "4037335"
  },
  {
    "text": " I understand there's\nsome similarity there,",
    "start": "4037335",
    "end": "4043079"
  },
  {
    "text": "but I don't see the-- hashing is a way of finding sort\nof a short name for objects,",
    "start": "4043080",
    "end": "4053550"
  },
  {
    "text": "which has a variety\nof different purposes why you might want to do that. So I don't really\nthink it's the same.",
    "start": "4053550",
    "end": "4060520"
  },
  {
    "text": "Let's see, an oracle\nquestion, OK, let's see. How do we use SAT oracle to\nsolve whether two formulas are",
    "start": "4060520",
    "end": "4066030"
  },
  {
    "text": "equivalent? ",
    "start": "4066030",
    "end": "4071194"
  },
  {
    "text": "OK, this is getting\nback to this point. How can we use a SAT oracle to\nsolve whether two formulas are equivalent?",
    "start": "4071195",
    "end": "4078690"
  },
  {
    "text": "Well, we can use a SAT oracle\nto solve any NP problem, because it's reducible to SAT.",
    "start": "4078690",
    "end": "4084480"
  },
  {
    "text": " In other words-- P with a SAT oracle\ncontains all of NP,",
    "start": "4084480",
    "end": "4092407"
  },
  {
    "text": "so you have to make sure\nyou understand that part. ",
    "start": "4092407",
    "end": "4101009"
  },
  {
    "text": "If you have the clique\nproblem, you can reduce. If I give you a clique problem,\nwhich is an NP problem,",
    "start": "4101010",
    "end": "4107009"
  },
  {
    "text": "and I want to use the oracle\nto test if the formula-- if the graph has a clique,\nI reduce that problem",
    "start": "4107010",
    "end": "4114960"
  },
  {
    "text": "to a SAT problem using\nthe Cook-Levin theorem. ",
    "start": "4114960",
    "end": "4121239"
  },
  {
    "text": "And knowing that a\nclique of a certain size is going to correspond to having\na formula which is satisfiable,",
    "start": "4121240",
    "end": "4126500"
  },
  {
    "text": "now I can ask the oracle. And if I can do NP problems,\nI can do co-NP problems,",
    "start": "4126500",
    "end": "4132318"
  },
  {
    "text": "because P is a\ndeterministic class. Even though it has an oracle,\nit's still deterministic. It can invert the answer.",
    "start": "4132319",
    "end": "4138830"
  },
  {
    "text": "Something that non-deterministic\nmachines cannot necessarily do. So I don't know, maybe that's--",
    "start": "4138830",
    "end": "4145229"
  },
  {
    "text": "let's move on. So there's an oracle\nwhere P to the A",
    "start": "4145229",
    "end": "4151939"
  },
  {
    "text": "equals NP to the A, which\nkind of seems kind of amazing at some level. Because here's an oracle where\nthe non-determinism-- if I",
    "start": "4151939",
    "end": "4159740"
  },
  {
    "text": "give you that oracle,\nnon-determinism doesn't help. ",
    "start": "4159740",
    "end": "4166399"
  },
  {
    "text": "And it's actually a\nlanguage we've seen. It's TQBF. ",
    "start": "4166399",
    "end": "4172470"
  },
  {
    "text": "Why is that? Well, here's the whole proof. ",
    "start": "4172470",
    "end": "4178220"
  },
  {
    "text": "If I have NP with a TQBF oracle. ",
    "start": "4178220",
    "end": "4184839"
  },
  {
    "text": "Let's just check\neach of these steps.  I claim I can do that with a\nnon-deterministic polynomial",
    "start": "4184840",
    "end": "4194860"
  },
  {
    "text": "space machine, which no\nlonger has an oracle.",
    "start": "4194860",
    "end": "4202760"
  },
  {
    "text": "The reason is that, if\nI have polynomial space, I can answer questions about\nTQBF without needing an oracle.",
    "start": "4202760",
    "end": "4210170"
  },
  {
    "text": "I have enough space just to\nanswer the question directly myself. And I use my\nnon-determinism here",
    "start": "4210170",
    "end": "4215990"
  },
  {
    "text": "to simulate the non-determinism\nof the NP machine. So every time the NP machine\nbranches non-deterministically,",
    "start": "4215990",
    "end": "4224449"
  },
  {
    "text": "so do I. Every time\none of those branches asks the oracle a\nTQBF question, I just",
    "start": "4224450",
    "end": "4230060"
  },
  {
    "text": "do my polynomial space algorithm\nto solve that question myself. But now NPSPACE equals\nPSPACE by Savitch's theorem.",
    "start": "4230060",
    "end": "4238700"
  },
  {
    "text": "And because TQBF\nis PSPACE complete, for the very same reason\nthat a SAT oracle allows",
    "start": "4238700",
    "end": "4247070"
  },
  {
    "text": "me to do every NP\nproblem, a TQBF problem allows me to do\nevery PSPACE problem. ",
    "start": "4247070",
    "end": "4254400"
  },
  {
    "text": "And so I get NP contained\nwithin P for a TQBF oracle. And of course, you get the\ncontainment the other way",
    "start": "4254400",
    "end": "4262190"
  },
  {
    "text": "immediately. So they're equal. What does that have to do with--",
    "start": "4262190",
    "end": "4268035"
  },
  {
    "text": " somebody said--\nwell, I'll just--",
    "start": "4268035",
    "end": "4274707"
  },
  {
    "text": "I don't want to run out of time. So I'll take any\nquestions at the end.",
    "start": "4274707",
    "end": "4279810"
  },
  {
    "text": "What does this got to do\nwith the P versus NP problem? OK, so this is a very\ninteresting connection.",
    "start": "4279810",
    "end": "4287139"
  },
  {
    "start": "4287140",
    "end": "4295380"
  },
  {
    "text": "Remember, we just showed\nthrough a combination of today's lecture and\nyesterday's lecture,",
    "start": "4295380",
    "end": "4301850"
  },
  {
    "text": "and I guess Thursday's\nlecture, that this problem,",
    "start": "4301850",
    "end": "4309470"
  },
  {
    "text": "this equivalence problem,\nis not in PSPACE, and therefore it's not in P,\nand therefore it's intractable.",
    "start": "4309470",
    "end": "4316139"
  },
  {
    "text": "That's what we just did. ",
    "start": "4316140",
    "end": "4321700"
  },
  {
    "text": "We showed it's complete\nfor a class, which is provably outside of P,\nprovably bigger than P.",
    "start": "4321700",
    "end": "4333344"
  },
  {
    "text": "That's the kind\nof thing we would like to be able to do\nto separate P and NP. We would like to show that\nsome other problem is not",
    "start": "4333345",
    "end": "4340510"
  },
  {
    "text": "in P. Some other\nproblem is intractable. Namely, SAT. If we could do SAT,\nthen we're good.",
    "start": "4340510",
    "end": "4347560"
  },
  {
    "text": "We've solved P and NP. So we already have an example\nof being able to do that.",
    "start": "4347560",
    "end": "4353260"
  },
  {
    "text": "Could we use the same method? Which is something people\ndid try to do many years ago,",
    "start": "4353260",
    "end": "4359780"
  },
  {
    "text": "to show that SAT is not in P.\nSo what is that method really?",
    "start": "4359780",
    "end": "4365900"
  },
  {
    "text": "The guts of that method really\ncomes from the hierarchy there. That's where you were actually\nproving problems that are hard.",
    "start": "4365900",
    "end": "4372230"
  },
  {
    "text": "You're getting this problem\nwith through the hierarchy construction that's\nprovably outside of PSPACE.",
    "start": "4372230",
    "end": "4382830"
  },
  {
    "text": "And outside of P. That's a diagonalization. And if you look carefully\nat what's going on there--",
    "start": "4382830",
    "end": "4390840"
  },
  {
    "text": "so we're going to\nsay, no, we're not going to be able to solve\nSAT, show SAT's outside of P in the same way.",
    "start": "4390840",
    "end": "4396180"
  },
  {
    "text": "And the reason is,\nsuppose we could. Well the hierarchy theorems\nare proved by diagonalization.",
    "start": "4396180",
    "end": "4402450"
  },
  {
    "text": " What I mean by that is that\nin the hierarchy theorem,",
    "start": "4402450",
    "end": "4410260"
  },
  {
    "text": "there's a machine D, which is\nsimulating some other machine, M. To remember what's\ngoing on there,",
    "start": "4410260",
    "end": "4419210"
  },
  {
    "text": "remember that we\nmade a machine which is going to make its language\ndifferent from the language",
    "start": "4419210",
    "end": "4424580"
  },
  {
    "text": "of every machine that's\nrunning with less space or with less time. ",
    "start": "4424580",
    "end": "4432160"
  },
  {
    "text": "That's how D was defined. It wants to make sure its\nlanguage cannot be done in less",
    "start": "4432160",
    "end": "4440360"
  },
  {
    "text": "space. So it makes sure that its\nlanguage is different. It simulates the machines\nthat use less space,",
    "start": "4440360",
    "end": "4447860"
  },
  {
    "text": "and does something\ndifferent from what they do. Well, that simulation--\nif we had an oracle,",
    "start": "4447860",
    "end": "4458240"
  },
  {
    "text": "if we're trying to\nshow that if we provide both a simulator and the\nmachine being simulated",
    "start": "4458240",
    "end": "4465860"
  },
  {
    "text": "with the same oracle, the\nsimulation still works. Every time the machine you're\nsimulating asks a question,",
    "start": "4465860",
    "end": "4473599"
  },
  {
    "text": "the simulator has\nthe same oracle so it can also ask\nthe same question, and can still do the simulation.",
    "start": "4473600",
    "end": "4479489"
  },
  {
    "text": "So in other words, if you\ncould prove P different from NP using basically a\nsimulation, which",
    "start": "4479490",
    "end": "4486290"
  },
  {
    "text": "is what a diagonalization\nis, then you would be able to prove\nthat P is different from NP",
    "start": "4486290",
    "end": "4491570"
  },
  {
    "text": "for every oracle.  So if you can prove P different\nfrom NP by a diagonalization,",
    "start": "4491570",
    "end": "4498670"
  },
  {
    "text": "that would also\nimmediately prove that P is different from\nNP for every oracle. Because the argument is\ntransparent to the oracle.",
    "start": "4498670",
    "end": "4510850"
  },
  {
    "text": "If you just put the oracle\ndown, everything still works. But-- here is the big\nbut, it can't be that--",
    "start": "4510850",
    "end": "4524119"
  },
  {
    "text": "we know that P A is-- we know this is false.",
    "start": "4524120",
    "end": "4529250"
  },
  {
    "text": "We just exhibit an oracle\nfor which they're equal. It's not the case that\nP is different from NP",
    "start": "4529250",
    "end": "4535280"
  },
  {
    "text": "for every oracle.  Sometimes they're\nequal, for some oracles.",
    "start": "4535280",
    "end": "4541480"
  },
  {
    "text": "So something that's\njust basically a very straightforward diagonalization,\nsomething that's",
    "start": "4541480",
    "end": "4546670"
  },
  {
    "text": "at its core is a\ndiagonalization, is not going to be\nenough to solve P and NP. Because otherwise it\nwould prove that they're",
    "start": "4546670",
    "end": "4553210"
  },
  {
    "text": "different for every oracle. And sometimes they're not\ndifferent, for some oracles. ",
    "start": "4553210",
    "end": "4560460"
  },
  {
    "text": "That's an important insight\nfor what kind of a method will not be adequate to\nprove P different from NP.",
    "start": "4560460",
    "end": "4569340"
  },
  {
    "text": "And this comes up all the time. People who propose hypothetical\nsolutions that they're trying",
    "start": "4569340",
    "end": "4576870"
  },
  {
    "text": "to show P different from NP. One of the very first\nthings people ask is, well, would that argument still work\nif you put an oracle there.",
    "start": "4576870",
    "end": "4587400"
  },
  {
    "text": "Often it does, which points\nout there was a flaw. Anyway, last check in.",
    "start": "4587400",
    "end": "4595720"
  },
  {
    "text": "So this is just a little test\nof your knowledge about oracles. ",
    "start": "4595720",
    "end": "4601780"
  },
  {
    "text": "Why don't we-- in our\nremaining minute here.  Let's say 30 seconds.",
    "start": "4601780",
    "end": "4608230"
  },
  {
    "text": "And then we'll do\na wrap on this, and I'll point out\nwhich ones are right.",
    "start": "4608230",
    "end": "4614290"
  },
  {
    "text": "Oh boy, we're all over\nthe place on this one. ",
    "start": "4614290",
    "end": "4620820"
  },
  {
    "text": "You're liking them all. Well, I guess the ones that\nare false are lagging slightly.",
    "start": "4620820",
    "end": "4628100"
  },
  {
    "start": "4628100",
    "end": "4635630"
  },
  {
    "text": "OK, let's conclude. ",
    "start": "4635630",
    "end": "4641310"
  },
  {
    "text": "Did I give you\nenough time there? Share results. ",
    "start": "4641310",
    "end": "4650160"
  },
  {
    "text": "So, in fact-- ",
    "start": "4650160",
    "end": "4657510"
  },
  {
    "text": "Yeah, so having an\noracle for the complement is the same as having an oracle.",
    "start": "4657510",
    "end": "4662760"
  },
  {
    "text": "So this is certainly true. NP SAT equal coNP\nSAT, we have no reason",
    "start": "4662760",
    "end": "4670220"
  },
  {
    "text": "to believe that\nwould be true, and we don't know it to be true. So B is not a good choice\nand that's the laggard here.",
    "start": "4670220",
    "end": "4680660"
  },
  {
    "text": "MIN-FORMULA, well, is in\nPSPACE, and anything in PSPACE",
    "start": "4680660",
    "end": "4685700"
  },
  {
    "text": "is reducible to TQBF, so\nthis is certainly true. And same thing for NP with\nTQBF and coNP with TQBF.",
    "start": "4685700",
    "end": "4694370"
  },
  {
    "text": "Once you have TQBF, you're\ngoing to get all of PSPACE.",
    "start": "4694370",
    "end": "4702640"
  },
  {
    "text": "And as we pointed out, this\nis going to be equal as well. So why don't we end here.",
    "start": "4702640",
    "end": "4710500"
  },
  {
    "text": "And I think that's\nmy last slide. Oh no, there's my summary here.",
    "start": "4710500",
    "end": "4716800"
  },
  {
    "text": "This is what we've done. And I will send you\nall off on your way.",
    "start": "4716800",
    "end": "4723887"
  },
  {
    "text": "How does the interaction\nbetween the Turing machine and the oracle look? Yeah, I didn't define exactly\nhow the machine interacts",
    "start": "4723888",
    "end": "4729490"
  },
  {
    "text": "with an oracle. You can imagine\nhaving a separate tape where it writes\nthe oracle question and then goes into a\nspecial query state.",
    "start": "4729490",
    "end": "4736960"
  },
  {
    "text": "You can formalize\nit however you like. They're all going to be-- any\nreasonable way of formalizing it is going to come up with\nthe same notion in the end.",
    "start": "4736960",
    "end": "4746500"
  },
  {
    "text": "It does show that P with a\nTQBF oracle equals PSPACE. Yes, that is correct. Good point.",
    "start": "4746500",
    "end": "4753970"
  },
  {
    "text": "Why do we need the\noracle to be TQBF? Wouldn't SAT also work because\nit could solve any NP problem?",
    "start": "4753970",
    "end": "4759170"
  },
  {
    "text": "So you're asking, does\nP with a SAT oracle equal NP with a SAT oracle?",
    "start": "4759170",
    "end": "4765170"
  },
  {
    "text": "Not known. And believed not to be\ntrue, but we don't have a compelling reason for that.",
    "start": "4765170",
    "end": "4772460"
  },
  {
    "text": "No one has any idea\nhow to do that. Because, for example, we showed\nthe complement of MIN-FORMULA",
    "start": "4772460",
    "end": "4782630"
  },
  {
    "text": "is in NP with a SAT oracle.  But no one knows how to do--",
    "start": "4782630",
    "end": "4788820"
  },
  {
    "text": "because there's sort of two\nlevels of non-determinism there. There's guessing\nthe smaller formula,",
    "start": "4788820",
    "end": "4794159"
  },
  {
    "text": "and then guessing again\nto check the equivalence. And they really can't be\ncombined, because one of them",
    "start": "4794160",
    "end": "4801320"
  },
  {
    "text": "is sort of an exist\ntype guessing, the other one is kind of\na for all type guessing. ",
    "start": "4801320",
    "end": "4811010"
  },
  {
    "text": "No one knows how to do\nthat in polynomial time with a SAT oracle. ",
    "start": "4811010",
    "end": "4818085"
  },
  {
    "text": "Generally believed that\nthey're not the same. ",
    "start": "4818085",
    "end": "4823250"
  },
  {
    "text": "In the check-in,\nwhy was B false? B is the same question.",
    "start": "4823250",
    "end": "4829900"
  },
  {
    "text": "Does NP with a SAT oracle\nequal coNP with a SAT oracle?",
    "start": "4829900",
    "end": "4835750"
  },
  {
    "text": "I'm not saying it's false,\nit's just not known to be true. It doesn't follow from anything\nthat we've shown so far.",
    "start": "4835750",
    "end": "4843869"
  },
  {
    "text": "And I think that would\nbe something that-- well, I guess it\ndoesn't immediately",
    "start": "4843870",
    "end": "4849510"
  },
  {
    "text": "imply any famous open problem. ",
    "start": "4849510",
    "end": "4854790"
  },
  {
    "text": "I wouldn't\nnecessarily expect you to know that it's an\nunsolved problem, but it is.",
    "start": "4854790",
    "end": "4860429"
  },
  {
    "text": " Could we have oracles\nfor undecidable language?",
    "start": "4860430",
    "end": "4866850"
  },
  {
    "text": "Absolutely. Would it be helpful? Well, if you're trying to\nsolve an undecidable problem,",
    "start": "4866850",
    "end": "4872160"
  },
  {
    "text": "it would be helpful. But people do study that. In fact, the original concept\nof oracles was presented,",
    "start": "4872160",
    "end": "4882690"
  },
  {
    "text": "was derived in the\ncomputability theory. And a side note, you can\ntalk about reducibility.",
    "start": "4882690",
    "end": "4891413"
  },
  {
    "text": "No, I don't want\nto even go there. Too complicated. ",
    "start": "4891413",
    "end": "4897130"
  },
  {
    "text": "What is not known to be true? What is not known to be true\nis that NP with a SAT oracle",
    "start": "4897130",
    "end": "4904210"
  },
  {
    "text": "equals coNP with a SAT oracle,\nor equals P with a SAT oracle. Nothing is known except the\nobvious relations among those.",
    "start": "4904210",
    "end": "4913120"
  },
  {
    "text": "Those are all unknown, and just\nnot known to be true or false. ",
    "start": "4913120",
    "end": "4925020"
  },
  {
    "text": "Is NP with a SAT\noracle equal to NP? Probably not.",
    "start": "4925020",
    "end": "4930140"
  },
  {
    "text": "NP with a SAT oracle, for\none thing, contains coNP. Because it's even more powerful.",
    "start": "4930140",
    "end": "4936699"
  },
  {
    "text": "We pointed out that P with\na SAT oracle contains coNP. And so NP with a SAT oracle is\ngoing to be at least as good.",
    "start": "4936700",
    "end": "4944869"
  },
  {
    "text": "And so it's going\nto contain coNP. And so, probably not\ngoing to be equal to NP unless shockingly\nunexpected things",
    "start": "4944870",
    "end": "4954380"
  },
  {
    "text": "happen in our complexity world. ",
    "start": "4954380",
    "end": "4970000"
  }
]