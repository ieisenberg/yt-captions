[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help MIT\nOpenCourseWare continue to",
    "start": "0",
    "end": "6940"
  },
  {
    "text": "offer high quality educational\nresources for free. To make a donation or view\nadditional materials from",
    "start": "6940",
    "end": "13490"
  },
  {
    "text": "hundreds of MIT courses, visit\nMIT OpenCourseWare at",
    "start": "13490",
    "end": "19320"
  },
  {
    "text": "ocw.mit.edu. PROFESSOR: Today, we're moving\non to what will be a major",
    "start": "19320",
    "end": "26250"
  },
  {
    "text": "unit of the course, which is\nthe topic of efficiency.",
    "start": "26250",
    "end": "31320"
  },
  {
    "text": "Thus far, we focused our\nattention on the admittedly more important problem, getting\nour programs to work,",
    "start": "31320",
    "end": "39610"
  },
  {
    "text": "i.e., to do what we\nwant them to do. For the next several lectures, I\nwant to talk about how do we",
    "start": "39610",
    "end": "46510"
  },
  {
    "text": "get them to work quickly\nenough to be useful. It is in practice often a very\nimportant consideration in",
    "start": "46510",
    "end": "56750"
  },
  {
    "text": "designing programs. The goal is not to make you\nan expert in this topic.",
    "start": "56750",
    "end": "64300"
  },
  {
    "text": "It's hard to be an expert\nin this topic. I'm certainly not an expert. But I want to give you some\nintuition about how to",
    "start": "64300",
    "end": "72450"
  },
  {
    "text": "approach the question of\nefficiency, how to understand why some programs take much\nlonger to run than others, and",
    "start": "72450",
    "end": "82990"
  },
  {
    "text": "how to go about writing programs\nthat will finish before you die.",
    "start": "82990",
    "end": "89160"
  },
  {
    "text": "And we'll see that if you\nwrite things wrong, the programs could, in principle,\nrun longer than you can.",
    "start": "89160",
    "end": "96830"
  },
  {
    "text": "So why is efficiency\nso important? Earlier in the term, I started\nto spend some time talking",
    "start": "96830",
    "end": "103710"
  },
  {
    "text": "about how really fast computers\nare and showing you that we can use brute force\nalgorithms to solve fairly",
    "start": "103710",
    "end": "111159"
  },
  {
    "text": "large problems.  The difficulty is that some of\nthe computational problems",
    "start": "111160",
    "end": "118820"
  },
  {
    "text": "we're confronted with are not\nfairly large but enormous.",
    "start": "118820",
    "end": "124270"
  },
  {
    "text": "So for example, in my research\ngroup where we work at the intersection of computer science\nand medicine, we have",
    "start": "124270",
    "end": "131100"
  },
  {
    "text": "a big database of roughly a\nbillion and half heart beats.",
    "start": "131100",
    "end": "136810"
  },
  {
    "text": "And we routinely run\ncomputations that run for two weeks on that data.",
    "start": "136810",
    "end": "142370"
  },
  {
    "text": "And the only reason they\ncomplete it in two weeks and not two years is we were\nreally careful about",
    "start": "142370",
    "end": "148620"
  },
  {
    "text": "efficiency. So it really can matter. And increasingly, it matters\nis we see the scale of",
    "start": "148620",
    "end": "155360"
  },
  {
    "text": "problems growing. The thing I want you to take\nhome to remember is that",
    "start": "155360",
    "end": "163456"
  },
  {
    "text": "efficiency is rarely about\nclever coding.",
    "start": "163456",
    "end": "168760"
  },
  {
    "text": "It's not about some little\ntrick that saves one instruction here or two\ninstructions there.",
    "start": "168760",
    "end": "175470"
  },
  {
    "text": "It's really about choosing\nthe right algorithm. ",
    "start": "175470",
    "end": "183930"
  },
  {
    "text": "So the take home message is\nthat efficiency is about",
    "start": "183930",
    "end": "193140"
  },
  {
    "text": "algorithms, not about\ncoding details.",
    "start": "193140",
    "end": "198975"
  },
  {
    "text": " Clever algorithms are\nhard to invent.",
    "start": "198975",
    "end": "205890"
  },
  {
    "text": "A successful computer scientist\nmight invent maybe one in his or her\nwhole career.",
    "start": "205890",
    "end": "213220"
  },
  {
    "text": "I have to say I invented zero\nimportant algorithms in my whole career.",
    "start": "213220",
    "end": "219630"
  },
  {
    "text": "Therefore, we don't depend upon\nbeing able to do that. Instead what we depend upon\nis problem reducing.",
    "start": "219630",
    "end": "228760"
  },
  {
    "text": "When confronted with a problem,\nwe want to reduce it",
    "start": "228760",
    "end": "234549"
  },
  {
    "text": "to a previously solved\nproblem. ",
    "start": "234550",
    "end": "244230"
  },
  {
    "text": "And this is really often the key\nto taking some problem and",
    "start": "244230",
    "end": "251510"
  },
  {
    "text": "fitting into a useful\ncomputation. We sit back, say, well, this\nlooks a little bit like this",
    "start": "251510",
    "end": "257370"
  },
  {
    "text": "other problem. How come I transform my problem\nto match a problem that some clever person already\nknows how to solve?",
    "start": "257370",
    "end": "266660"
  },
  {
    "text": "Before I spend time on problem\nreduction, however, I want to draw back and look at the\ngeneral question of how do we",
    "start": "266660",
    "end": "274500"
  },
  {
    "text": "think about efficiency. When we think about it, we\nthink about it in two dimensions, space and time.",
    "start": "274500",
    "end": "286750"
  },
  {
    "text": "And as we'll see later in the\nterm, we can often trade one for the other.",
    "start": "286750",
    "end": "292420"
  },
  {
    "text": "We can make a program run faster\nby using more memory or use less memory at the cost of\nmaking it run more slowly.",
    "start": "292420",
    "end": "301420"
  },
  {
    "text": "For now, and the next\nfew lectures, I'm going to focus on time.",
    "start": "301420",
    "end": "307180"
  },
  {
    "text": "Because really, that's mostly\nwhat people worry about these days when they're dealing\nwith complexity. ",
    "start": "307180",
    "end": "314720"
  },
  {
    "text": "So now, suppose I ask you the\nquestion, how long does some algorithm implemented by\na program take to run?",
    "start": "314720",
    "end": "323000"
  },
  {
    "text": "How would you go about answering\nthat question? Well, you could say, all right,\nI'm going to run it on",
    "start": "323000",
    "end": "328560"
  },
  {
    "text": "some computer on some\ninput and time it. Look at my watch. That took three minutes.",
    "start": "328560",
    "end": "335599"
  },
  {
    "text": "I ran this other algorithm,\nand it took two minutes. It's a better algorithm.",
    "start": "335600",
    "end": "341280"
  },
  {
    "text": "Well, that would be really\na bad way to look at it.",
    "start": "341280",
    "end": "347360"
  },
  {
    "text": "The reasons we don't think\nabout computational complexity, and that's really\nwhat people call this topic in",
    "start": "347360",
    "end": "361030"
  },
  {
    "text": "terms of how long a program\ntakes to run on a particular computer, and it's not\na stable measure.",
    "start": "361030",
    "end": "369800"
  },
  {
    "text": "To do that, it's influenced by\nthe speed of the machine. ",
    "start": "369800",
    "end": "378950"
  },
  {
    "text": "So a program that took 1 minute\non my computer might take 30 seconds on yours. ",
    "start": "378950",
    "end": "388150"
  },
  {
    "text": "It has to do with the cleverness\nof the Python implementation.",
    "start": "388150",
    "end": "393750"
  },
  {
    "text": " Maybe I have a better\nimplementation of Python than",
    "start": "393750",
    "end": "400240"
  },
  {
    "text": "you do, so my programs will\nrun a little bit faster.",
    "start": "400240",
    "end": "405840"
  },
  {
    "text": "But most importantly, the reason\nwe don't depend upon running programs is it depends\nupon the input.",
    "start": "405840",
    "end": "414480"
  },
  {
    "start": "414480",
    "end": "422560"
  },
  {
    "text": "So I might choose one input for\nwhich the program took 2 minutes and another seemingly\nsimilar input in",
    "start": "422560",
    "end": "428675"
  },
  {
    "text": "which it took 1 hour. So I need to get some way to\ntalk about it more abstractly.",
    "start": "428675",
    "end": "437229"
  },
  {
    "text": "The way we do that is\nby counting the number of basic steps.",
    "start": "437230",
    "end": "442895"
  },
  {
    "start": "442895",
    "end": "456129"
  },
  {
    "text": "So we define some function,\nsay time, which maps the",
    "start": "456130",
    "end": "463050"
  },
  {
    "text": "natural numbers to the\nnatural numbers. ",
    "start": "463050",
    "end": "470090"
  },
  {
    "text": "The first n, in this case, the\nfirst natural number, the argument corresponds to the size\nof the input, how big an",
    "start": "470090",
    "end": "487129"
  },
  {
    "text": "input do we want to run\nthe program on. ",
    "start": "487130",
    "end": "492340"
  },
  {
    "text": "And the result of the function\nis the number of steps that",
    "start": "492340",
    "end": "500400"
  },
  {
    "text": "the computation will take for\nan input of that size. I'll come back to this in a\nlittle bit more precise detail",
    "start": "500400",
    "end": "508460"
  },
  {
    "text": "momentarily. A step is an operation that\ntakes constant time.",
    "start": "508460",
    "end": "516950"
  },
  {
    "text": "And that's important. So steps are not variable,\nbut they're constant.",
    "start": "516950",
    "end": "522460"
  },
  {
    "start": "522460",
    "end": "537600"
  },
  {
    "text": "So we have lots of these, for\nexample, an assignment, a comparison, an array\naccess, et cetera.",
    "start": "537600",
    "end": "545550"
  },
  {
    "text": "In looking at computational\ncomplexity in this course,",
    "start": "545550",
    "end": "551600"
  },
  {
    "text": "we're going to use a model\nof the computer. It's known as random access,\na random access machine,",
    "start": "551600",
    "end": "566930"
  },
  {
    "text": "frequently abbreviated as RAM. ",
    "start": "566930",
    "end": "572390"
  },
  {
    "text": "In a random access machine,\ninstructions are executed one after another, that is to\nsay they're sequential.",
    "start": "572390",
    "end": "581570"
  },
  {
    "text": "Only one thing happens\nat a time.  And we assume constant time\nrequired to access memory.",
    "start": "581570",
    "end": "592839"
  },
  {
    "text": " So we can access at random any\nobject in memory in the same",
    "start": "592840",
    "end": "602150"
  },
  {
    "text": "amount of time as any\nother object. ",
    "start": "602150",
    "end": "615370"
  },
  {
    "text": "In the early days of computers,\nthis model was not accurate, because memory\nwas often say, a tape.",
    "start": "615370",
    "end": "623480"
  },
  {
    "text": "And if you wanted to read\nsomething at the end of the tape, it took a lot longer to\nread than something at the",
    "start": "623480",
    "end": "629490"
  },
  {
    "text": "beginning of the tape. In modern computers, it's\nalso not quite accurate.",
    "start": "629490",
    "end": "636140"
  },
  {
    "text": "Modern computers have what's\ncalled a memory hierarchy where you have levels of memory,\nthe level one cache,",
    "start": "636140",
    "end": "643060"
  },
  {
    "text": "the level two cache,\nthe actual memory. And it can differ by say a\nfactor of a 100, how long it",
    "start": "643060",
    "end": "650280"
  },
  {
    "text": "takes access data\ndepending upon whether it's in the cache.",
    "start": "650280",
    "end": "655560"
  },
  {
    "text": "The cache keeps track of\nrecently accessed objects.",
    "start": "655560",
    "end": "661140"
  },
  {
    "text": "Nevertheless, if we start\ngoing into that level of detail, we end up losing the\nforest for the trees.",
    "start": "661140",
    "end": "668870"
  },
  {
    "text": "So almost everybody when they\nactually try and analyze algorithms typically works\nwith this model.",
    "start": "668870",
    "end": "678060"
  },
  {
    "text": "We also know in modern computers\nthat some things happen in parallel.",
    "start": "678060",
    "end": "683480"
  },
  {
    "text": "But again, for most of\nus, these will be second order effects. And the random access model is\nquite good for understanding",
    "start": "683480",
    "end": "691910"
  },
  {
    "text": "algorithms. Now when we think about how long\nan algorithm will take to",
    "start": "691910",
    "end": "699640"
  },
  {
    "text": "run, there are several\ndifferent ways we could look at it.",
    "start": "699640",
    "end": "705570"
  },
  {
    "text": "We could think of\nthe best case. ",
    "start": "705570",
    "end": "712180"
  },
  {
    "text": "And as we think about these\nthings, as a concrete example, we can think about\nlinear search.",
    "start": "712180",
    "end": "718779"
  },
  {
    "text": "So let's say we have\nan algorithm that's using linear search. We've looked at that before to\nfind out whether or not an",
    "start": "718780",
    "end": "726730"
  },
  {
    "text": "element is in the list. Well, the best case would be\nthat the first element is",
    "start": "726730",
    "end": "732510"
  },
  {
    "text": "three, and I'm searching for 3,\nand I find it right away, and I stop.",
    "start": "732510",
    "end": "738560"
  },
  {
    "text": "So that would be my best\ncase complexity.",
    "start": "738560",
    "end": "745460"
  },
  {
    "text": "It's the minimum running time\nover all possible inputs. Is the best case.",
    "start": "745460",
    "end": "751640"
  },
  {
    "text": " I can also look at\nthe worst case. ",
    "start": "751640",
    "end": "759050"
  },
  {
    "text": "What's the worst case\nfor linear search? ",
    "start": "759050",
    "end": "764390"
  },
  {
    "text": "It's not there. Exactly. So I go and I have to look at\nevery element, and whoops,",
    "start": "764390",
    "end": "770230"
  },
  {
    "text": "it's not there. So the worst case is the maximum\nover all possible",
    "start": "770230",
    "end": "776720"
  },
  {
    "text": "inputs of a given size.  The size here is the\nlength of the list.",
    "start": "776720",
    "end": "785770"
  },
  {
    "text": "And then I can ask what's the\nexpected or average case, what",
    "start": "785770",
    "end": "792980"
  },
  {
    "text": "would happen most of the time. ",
    "start": "792980",
    "end": "800220"
  },
  {
    "text": "The expected case seems, in\nprinciple, like the one we should care about.",
    "start": "800220",
    "end": "806710"
  },
  {
    "text": "But the truth is when we do\nalgorithmic analysis, we almost never deal with\nthe expected case",
    "start": "806710",
    "end": "814500"
  },
  {
    "text": "because it's too hard.  We think about the expected case\nfor say linear search, we",
    "start": "814500",
    "end": "823430"
  },
  {
    "text": "can't talk about it without some\ndetailed model of what",
    "start": "823430",
    "end": "829670"
  },
  {
    "text": "the list itself looks like, what\nelements are in it, and what the distribution of\nqueries looks like.",
    "start": "829670",
    "end": "836180"
  },
  {
    "text": "Are we most of the time asking\nfor elements that are not in the list in which case\nthe expected",
    "start": "836180",
    "end": "842320"
  },
  {
    "text": "value is out here somewhere?  Or are we most of the time\nlooking for things that are in",
    "start": "842320",
    "end": "848940"
  },
  {
    "text": "the list in which case the\nexpected value would be somewhere near halfway through\nthe length of the list?",
    "start": "848940",
    "end": "856600"
  },
  {
    "text": "We don't know those things. We have a tough time modeling\nexpected value.",
    "start": "856600",
    "end": "862110"
  },
  {
    "text": "And one of the things we know is\nthat frequently we don't -- when we release a program --",
    "start": "862110",
    "end": "867600"
  },
  {
    "text": "have a good sense of how people\nwill actually use it. And so we don't usually\nfocus on that.",
    "start": "867600",
    "end": "875360"
  },
  {
    "text": "Similarly, we don't usually\nfocus on the best case. ",
    "start": "875360",
    "end": "881430"
  },
  {
    "text": "It would be nice. But you could imagine that it's\nnot really what we care",
    "start": "881430",
    "end": "886540"
  },
  {
    "text": "about, what happens when\nwe get really lucky. Because we all believe\nin Murphy's law.",
    "start": "886540",
    "end": "892920"
  },
  {
    "text": " If something bad can\nhappen, it will.",
    "start": "892920",
    "end": "900010"
  },
  {
    "text": "And that's why complexity\nanalysis almost always focuses",
    "start": "900010",
    "end": "905820"
  },
  {
    "text": "on the worst case.  What the worst case does is it\nprovides an upper bound.",
    "start": "905820",
    "end": "916404"
  },
  {
    "start": "916405",
    "end": "923060"
  },
  {
    "text": "How bad can things\npossibly get? What's the worst that\ncan happen?",
    "start": "923060",
    "end": "928260"
  },
  {
    "text": "And that's nice because\nit means that there are no surprises.",
    "start": "928260",
    "end": "933279"
  },
  {
    "text": "You say the worst that this\nthing can do is look at every element of the list once.",
    "start": "933280",
    "end": "940020"
  },
  {
    "text": "And so if I know that the list\nis a million elements, I know, OK, it might have to do\na million comparisons.",
    "start": "940020",
    "end": "945680"
  },
  {
    "text": "But it won't have to do any\nmore than a million. And so I won't be suddenly\nsurprised that it takes",
    "start": "945680",
    "end": "951140"
  },
  {
    "text": "overnight to run.  Alas, the worst case\nhappens often.",
    "start": "951140",
    "end": "958325"
  },
  {
    "start": "958325",
    "end": "965790"
  },
  {
    "text": "We do frequently end up asking\nwhether something is in a list, and it's not. ",
    "start": "965790",
    "end": "973820"
  },
  {
    "text": "So even though it seems\npessimistic to worry about the worst case, it is the right\none to worry about.",
    "start": "973820",
    "end": "980630"
  },
  {
    "text": " All right. Let's look at an example.",
    "start": "980630",
    "end": "986590"
  },
  {
    "text": "So I've got a little\nfunction here, f. You can see it here. It's on the handout as well.",
    "start": "986590",
    "end": "992145"
  },
  {
    "text": " First of all, what mathematical\nfunction is f",
    "start": "992145",
    "end": "997680"
  },
  {
    "text": "computing, just to force you\nto look at it for a minute?",
    "start": "997680",
    "end": "1004570"
  },
  {
    "text": "What's it computing? Somebody? It is a function that should\nbe familiar to",
    "start": "1004570",
    "end": "1010650"
  },
  {
    "text": "almost all of you. ",
    "start": "1010650",
    "end": "1017860"
  },
  {
    "text": "Nobody? Pardon. AUDIENCE: Exponentiation. PROFESSOR: Exponentiation? ",
    "start": "1017860",
    "end": "1024890"
  },
  {
    "text": "Don't think so.  But I appreciate\nyou're trying. It's worth some candy,\nnot a lot of candy,",
    "start": "1024890",
    "end": "1033039"
  },
  {
    "text": "but a little candy.  Yeah? AUDIENCE: Factorial. PROFESSOR: Factorial.",
    "start": "1033040",
    "end": "1038790"
  },
  {
    "text": "Exactly. It's computing factorial. ",
    "start": "1038790",
    "end": "1044790"
  },
  {
    "text": "Great grab.  So let's think about how long\nthis will take to run in terms",
    "start": "1044790",
    "end": "1055480"
  },
  {
    "text": "of the number of steps. Well, the first thing it does\nis it executes an assertion.",
    "start": "1055480",
    "end": "1068850"
  },
  {
    "text": "And for the sake of argument for\nthe moment, we can assume that most instructions in Python\nwill take one step.",
    "start": "1068850",
    "end": "1076420"
  },
  {
    "text": "Then, it does an assignment,\nso that's two steps. Then, it goes through\nthe loop.",
    "start": "1076420",
    "end": "1083110"
  },
  {
    "text": "Each time through the loop, it\nexecutes three steps, the test",
    "start": "1083110",
    "end": "1088890"
  },
  {
    "text": "at the start of the\nloop and the two instructions inside the loop. How many times does it\ngo through the loop?",
    "start": "1088890",
    "end": "1095110"
  },
  {
    "text": " Somebody?",
    "start": "1095110",
    "end": "1100380"
  },
  {
    "text": "Right. n times. So it will be 2 plus\n3 times n.",
    "start": "1100380",
    "end": "1108029"
  },
  {
    "text": "And then it executes a return\nstatement at the end. ",
    "start": "1108030",
    "end": "1113510"
  },
  {
    "text": "So if I want to write down the\nfunction that characterizes the algorithm implemented by\nthis code, I say it's 2 plus 3",
    "start": "1113510",
    "end": "1122250"
  },
  {
    "text": "times n plus 1. Well, I could do that.",
    "start": "1122250",
    "end": "1130500"
  },
  {
    "text": "But it would be kind of silly. Let's say n equals 3,000.",
    "start": "1130500",
    "end": "1137160"
  },
  {
    "text": "Well, if n equals 3,000, this\ntells me that it takes 9,000--",
    "start": "1137160",
    "end": "1147310"
  },
  {
    "text": "well, what does it take? 9,003 steps. Right.",
    "start": "1147310",
    "end": "1152809"
  },
  {
    "text": "Well, do I care whether\nit's 9,000 or 9,003?",
    "start": "1152810",
    "end": "1158430"
  },
  {
    "text": "I don't really. So in fact, when I look at\ncomplexity, I tend to--",
    "start": "1158430",
    "end": "1165260"
  },
  {
    "text": "I don't tend to I do ignore\nadditive constants. ",
    "start": "1165260",
    "end": "1171810"
  },
  {
    "text": "So the fact that there's a 2\nhere and a 1 here doesn't really matter.",
    "start": "1171810",
    "end": "1178490"
  },
  {
    "text": "So I say, well, if we're trying\nto characterize this algorithm, let's ignore those.",
    "start": "1178490",
    "end": "1184910"
  },
  {
    "text": "Because what I really\ncare about is growth",
    "start": "1184910",
    "end": "1192370"
  },
  {
    "text": "with respect to size. How does the running time\ngrow as the size of the input grows?",
    "start": "1192370",
    "end": "1198420"
  },
  {
    "start": "1198420",
    "end": "1209610"
  },
  {
    "text": "We can even go further.  Do I actually care whether\nit's 3,000 or 9,000?",
    "start": "1209610",
    "end": "1218730"
  },
  {
    "text": "Well, I might. I might care whether a program\ntake say 3 hours to run or 9",
    "start": "1218730",
    "end": "1224690"
  },
  {
    "text": "hours to run. But in fact, as it gets bigger,\nand we really care",
    "start": "1224690",
    "end": "1231730"
  },
  {
    "text": "about this as things get\nbigger, I probably don't care that much. If I told you this was going to\ntake 3,000 years or 9,000",
    "start": "1231730",
    "end": "1239610"
  },
  {
    "text": "years, you wouldn't care. Or probably, even if I told you\nit was going to take 3,000 days or 9,000 days, you'd say,\nwell, it's too long anyway.",
    "start": "1239610",
    "end": "1248650"
  },
  {
    "text": "So typically, we even ignore\nmultiplicative constants and",
    "start": "1248650",
    "end": "1262280"
  },
  {
    "text": "use a model of asymptotic growth\nthat talks about how",
    "start": "1262280",
    "end": "1274420"
  },
  {
    "text": "the complexity grows as you\nreach the limit of the sizes of the inputs.",
    "start": "1274420",
    "end": "1280590"
  },
  {
    "text": " This is typically done using\na notation we call big O",
    "start": "1280590",
    "end": "1291000"
  },
  {
    "text": "notation written as a single\nO. So if I write order n,",
    "start": "1291000",
    "end": "1298244"
  },
  {
    "text": "O(n), what this says is this\nalgorithm, the complexity, the",
    "start": "1298244",
    "end": "1304940"
  },
  {
    "text": "time grows linearly with n. ",
    "start": "1304940",
    "end": "1311179"
  },
  {
    "text": "Doesn't say whether it's\n3 times n or 2 times n. It's linear in n is\nwhat this says.",
    "start": "1311180",
    "end": "1317210"
  },
  {
    "text": "Well, why do we call it big O? Well, some people think it's\nbecause, oh my God, this program will never end.",
    "start": "1317210",
    "end": "1324580"
  },
  {
    "text": "But in fact, no. This notion was introduced\nto computer science by Donald Knuth.",
    "start": "1324580",
    "end": "1331500"
  },
  {
    "text": "And he chose the Greek letter\nomicron because it was used in the 19th century by people\ndeveloping calculus.",
    "start": "1331500",
    "end": "1338115"
  },
  {
    "text": " We don't typically write\nomicron because",
    "start": "1338115",
    "end": "1343419"
  },
  {
    "text": "it's harder to types. So we usually use the capital\nLatin letter O, hence, life",
    "start": "1343420",
    "end": "1349480"
  },
  {
    "text": "gets simple. What this does is it gives\nus an upper bound for the",
    "start": "1349480",
    "end": "1361630"
  },
  {
    "text": "asymptotic growth\nof the function. So formerly, we would write\nsomething like f of x, where f",
    "start": "1361630",
    "end": "1371320"
  },
  {
    "text": "is some function of\nthe input x, is",
    "start": "1371320",
    "end": "1377809"
  },
  {
    "text": "order, let's say x squared.",
    "start": "1377810",
    "end": "1383460"
  },
  {
    "text": "That would say it's quadratic\nin the size of x. ",
    "start": "1383460",
    "end": "1388850"
  },
  {
    "text": "Formally what this means is\nthat the function f--",
    "start": "1388850",
    "end": "1394470"
  },
  {
    "text": "I should probably write\nthis down-- ",
    "start": "1394470",
    "end": "1402120"
  },
  {
    "text": "the function f grows no faster\nthan the quadratic",
    "start": "1402120",
    "end": "1422440"
  },
  {
    "text": "polynomial x squared.",
    "start": "1422440",
    "end": "1432039"
  },
  {
    "start": "1432040",
    "end": "1437070"
  },
  {
    "text": "So let's look at what\nthis means. I wrote a little program that\ntalks about some of the--",
    "start": "1437070",
    "end": "1444085"
  },
  {
    "text": "I should say probably most\npopular values we see.",
    "start": "1444085",
    "end": "1450610"
  },
  {
    "text": "So some of the most popular\norders we would write down, we",
    "start": "1450610",
    "end": "1456679"
  },
  {
    "text": "often see order 1. And what that means\nis constant.",
    "start": "1456680",
    "end": "1463549"
  },
  {
    "text": "The time required is\nindependent of the size of the input. It doesn't say it's one step.",
    "start": "1463550",
    "end": "1469419"
  },
  {
    "text": "But it's independent\nof the input. It's constant. We often see order log n,\nlogarithmic growth.",
    "start": "1469420",
    "end": "1479745"
  },
  {
    "text": " Order n, linear.",
    "start": "1479745",
    "end": "1485990"
  },
  {
    "text": " One we'll see later this\nweek is nlog(n).",
    "start": "1485990",
    "end": "1492140"
  },
  {
    "text": " This is called log linear. ",
    "start": "1492140",
    "end": "1499520"
  },
  {
    "text": "And we'll see why that occurs\nsurprisingly often. ",
    "start": "1499520",
    "end": "1508350"
  },
  {
    "text": "Order n to the c where c is\nsome constant, this is",
    "start": "1508350",
    "end": "1514049"
  },
  {
    "text": "polynomial.  A common polynomial would be\nsquared as in quadratic.",
    "start": "1514050",
    "end": "1523529"
  },
  {
    "text": "And then, if we're terribly\nunlucky, you run into things that are order c to the\nn exponential in",
    "start": "1523530",
    "end": "1533390"
  },
  {
    "text": "the size of the input.  To give you an idea of what\nthese classes actually mean, I",
    "start": "1533390",
    "end": "1542220"
  },
  {
    "text": "wrote a little program that\nproduces some plots. Don't worry about what\nthe code looks like.",
    "start": "1542220",
    "end": "1549050"
  },
  {
    "text": "In a few weeks, you'll\nbe able to write such programs yourself. ",
    "start": "1549050",
    "end": "1555600"
  },
  {
    "text": "Not only will you be able\nto, you'll be forced to. ",
    "start": "1555600",
    "end": "1562190"
  },
  {
    "text": "So I'm just going to run this\nand produce some plots showing different orders of growth. ",
    "start": "1562190",
    "end": "1571690"
  },
  {
    "text": "All right. This is producing\nthese blocks. ",
    "start": "1571690",
    "end": "1578460"
  },
  {
    "text": "Excuse me. I see. ",
    "start": "1578460",
    "end": "1605210"
  },
  {
    "text": "So let's look at the plots. So here, I've plotted\nlinear growth versus logarithmic growth.",
    "start": "1605210",
    "end": "1611670"
  },
  {
    "text": " And as you can see, it's\nquite a difference.",
    "start": "1611670",
    "end": "1619220"
  },
  {
    "text": "If we can manage to get a\nlogarithmic algorithm, it grows much more slowly than\na linear algorithm.",
    "start": "1619220",
    "end": "1626490"
  },
  {
    "text": "And we saw this when we looked\nat the graded advantage of binary search as opposed\nto linear search.",
    "start": "1626490",
    "end": "1632820"
  },
  {
    "text": " Actually, this is linear\nversus log linear.",
    "start": "1632820",
    "end": "1639970"
  },
  {
    "text": "What happened to figure one?  Well, we'll come back to it.",
    "start": "1639970",
    "end": "1645990"
  },
  {
    "text": "So you'll see here that\nlog linear is",
    "start": "1645990",
    "end": "1651360"
  },
  {
    "text": "much worse than linear. So this factor of nlog(n)\nactually makes a considerable",
    "start": "1651360",
    "end": "1659410"
  },
  {
    "text": "difference in running time. ",
    "start": "1659410",
    "end": "1667840"
  },
  {
    "text": "Now, I'm going to compare a\nlog linear to quadratic, a small degree polynomial.",
    "start": "1667840",
    "end": "1674480"
  },
  {
    "text": "As you can see, it almost looks\nlike log linear is not growing at all.",
    "start": "1674480",
    "end": "1680960"
  },
  {
    "text": "So as bad as log linear looked\nwhen we compared it to linear, we see that compared to\nquadratic, it's pretty great.",
    "start": "1680960",
    "end": "1690860"
  },
  {
    "text": "And what this tells us is that\nin practice, even a quadratic algorithm is often impractically\nslow, and we",
    "start": "1690860",
    "end": "1699880"
  },
  {
    "text": "really can't use them. And so in practice, we worked\nvery hard to avoid even",
    "start": "1699880",
    "end": "1705059"
  },
  {
    "text": "quadratic, which somehow\ndoesn't seem like it should be so bad. But in fact, as you can see,\nit gets bad quickly.",
    "start": "1705060",
    "end": "1714530"
  },
  {
    "text": "Yeah, this was the log versus\nlinear, not surprising. And now, if we look at quadratic\nversus exponential,",
    "start": "1714530",
    "end": "1724530"
  },
  {
    "text": "we can see hardly anything. And that's because exponential\nis growing so quickly.",
    "start": "1724530",
    "end": "1733520"
  },
  {
    "text": "So instead, what we're going to\ndo is I'm going to plot the",
    "start": "1733520",
    "end": "1740270"
  },
  {
    "text": "y-axis logarithmically just so\nwe can actually see something.",
    "start": "1740270",
    "end": "1746620"
  },
  {
    "text": "And as you can see on input of\nsize 1,000, an exponential",
    "start": "1746620",
    "end": "1751980"
  },
  {
    "text": "algorithm is roughly order\n10 to the 286th. ",
    "start": "1751980",
    "end": "1758630"
  },
  {
    "text": "That's an unimaginably\nlarge number. Right? I don't know what it compares\nto, the number of atoms in the",
    "start": "1758630",
    "end": "1765070"
  },
  {
    "text": "universe, or something\nridiculous, or maybe more. But we can't possibly think of\nrunning an algorithm that's",
    "start": "1765070",
    "end": "1771060"
  },
  {
    "text": "going to take this long. It's just not even\nconceivable. So exponential, we sort of throw\nup our hands and say",
    "start": "1771060",
    "end": "1779150"
  },
  {
    "text": "we're dead. We can't do it. And so nobody uses exponential\nalgorithms for everything, yet",
    "start": "1779150",
    "end": "1786899"
  },
  {
    "text": "for anything. Yet as we'll see, there are\nproblems that we care about",
    "start": "1786900",
    "end": "1792850"
  },
  {
    "text": "that, in principle, can only\nbe solved by exponential algorithms. ",
    "start": "1792850",
    "end": "1799390"
  },
  {
    "text": "So what do we do? As we'll see, well, we\nusually don't try and solve those problems. We try and solve some",
    "start": "1799390",
    "end": "1804530"
  },
  {
    "text": "approximation to those problems. Or we use some other tricks to\nsay, well, we know the worst",
    "start": "1804530",
    "end": "1813000"
  },
  {
    "text": "case will be terrible, but\nhere's how we're going to avoid the worst case. We'll see a lot of that towards\nthe end of the term.",
    "start": "1813000",
    "end": "1820130"
  },
  {
    "text": "The moral is try not to do\nanything that's worse than log",
    "start": "1820130",
    "end": "1825140"
  },
  {
    "text": "linear if you possibly can.  Now some truth in advertising,\nsome caveats.",
    "start": "1825140",
    "end": "1836130"
  },
  {
    "text": "If I look at my definition of\nwhat big O means, I said it",
    "start": "1836130",
    "end": "1841420"
  },
  {
    "text": "grows no faster than. So in principle, I could say,\nwell, what the heck, I'll just",
    "start": "1841420",
    "end": "1846730"
  },
  {
    "text": "write 2 to the x here. And it's still true. It's not faster than that. ",
    "start": "1846730",
    "end": "1854520"
  },
  {
    "text": "It's not what we actually\nwant to do. What we actually want\nis a type bound.",
    "start": "1854520",
    "end": "1860679"
  },
  {
    "text": "We'd like to say it's no faster\nthan this, but it's no slower than this either, to try\nand characterize the worst",
    "start": "1860680",
    "end": "1868260"
  },
  {
    "text": "cases precisely as we can. Formally speaking, a theorist\nused something called big",
    "start": "1868260",
    "end": "1875860"
  },
  {
    "text": "Theta notation for this. They write a theta instead of\nan O. However, most of the",
    "start": "1875860",
    "end": "1882930"
  },
  {
    "text": "time in practice, when somebody\nwrites something like",
    "start": "1882930",
    "end": "1891010"
  },
  {
    "text": "f of x is order x squared, what\nthey mean is the worst",
    "start": "1891010",
    "end": "1899580"
  },
  {
    "text": "case is really about\nx squared. And that's the way we're\ngoing to use it here.",
    "start": "1899580",
    "end": "1905900"
  },
  {
    "text": "We're not going to try\nand get too formal. We're going to do what people\nactually do in practice when",
    "start": "1905900",
    "end": "1911150"
  },
  {
    "text": "they talk about complexity. All right, let's look at\nanother example now.",
    "start": "1911150",
    "end": "1917590"
  },
  {
    "start": "1917590",
    "end": "1923770"
  },
  {
    "text": "Here, I've written factorial\nrecursively. Didn't even try to disguise\nwhat it was.",
    "start": "1923770",
    "end": "1931360"
  },
  {
    "text": "So let's think about how\nwe would analyze the complexity of this.",
    "start": "1931360",
    "end": "1937930"
  },
  {
    "text": "Well, we know that we can ignore\nthe first two lines of code because those are just\nthe additives pieces.",
    "start": "1937930",
    "end": "1944420"
  },
  {
    "text": "We don't care about that-- the first line, and the\nif, and the return.",
    "start": "1944420",
    "end": "1953909"
  },
  {
    "text": "So what's the piece\nwe care about? We care about the number of\ntimes the factorial is called.",
    "start": "1953910",
    "end": "1962820"
  },
  {
    "text": "In the first implementation of\nfactorial, we cared about the number of iterations\nof a loop.",
    "start": "1962820",
    "end": "1969580"
  },
  {
    "text": "Now instead of using a loop, you\nuse recursion to do more or less the same thing.",
    "start": "1969580",
    "end": "1975830"
  },
  {
    "text": "And so we care about\nthe number of times fact is called. ",
    "start": "1975830",
    "end": "1984800"
  },
  {
    "text": "How many times will\nthat happen? ",
    "start": "1984800",
    "end": "1993710"
  },
  {
    "text": "Well, let's think about why I\nknow this doesn't run forever, because that's always the way\nwe really think about",
    "start": "1993710",
    "end": "1999850"
  },
  {
    "text": "complexity in some sense. I know it doesn't run forever\nbecause each time I call",
    "start": "1999850",
    "end": "2005260"
  },
  {
    "text": "factorial, I call it on a number\none smaller than the number before.",
    "start": "2005260",
    "end": "2010660"
  },
  {
    "text": " So how many times can\nI do that if I start",
    "start": "2010660",
    "end": "2016650"
  },
  {
    "text": "with a number n? n times, right?",
    "start": "2016650",
    "end": "2021680"
  },
  {
    "text": "So once again, it's order n. So the interesting thing we see\nhere is that essentially,",
    "start": "2021680",
    "end": "2030090"
  },
  {
    "text": "I've given you the same\nalgorithm recursively and iteratively. Not surprisingly, even though\nI've coded it differently,",
    "start": "2030090",
    "end": "2037840"
  },
  {
    "text": "it's the same complexity. Now in practice, the recursive\none might take a little longer",
    "start": "2037840",
    "end": "2044700"
  },
  {
    "text": "to run, because there's a\ncertain overhead to function calls that we don't have\nwith while loops.",
    "start": "2044700",
    "end": "2052010"
  },
  {
    "text": "But we don't actually\ncare about that. Its overhead is one of those\nmultiplicative constants I",
    "start": "2052010",
    "end": "2059019"
  },
  {
    "text": "said we're going to ignore. And in fact, it's a very small\nmultiplicative constant.",
    "start": "2059020",
    "end": "2064580"
  },
  {
    "text": "It really doesn't make\nmuch of a difference. So how do I decide whether to\nuse recursion or iteration has",
    "start": "2064580",
    "end": "2071310"
  },
  {
    "text": "nothing to do with efficiency,\nit's whichever is more convenient to code.",
    "start": "2071310",
    "end": "2076549"
  },
  {
    "text": "In this case, I kind of like\nthe fact that recursive factorial is a little neater.",
    "start": "2076550",
    "end": "2082260"
  },
  {
    "text": "So that's what I would use\nand not worry about the efficiency. ",
    "start": "2082260",
    "end": "2090020"
  },
  {
    "text": "All right. Let's look at another example. ",
    "start": "2090020",
    "end": "2096090"
  },
  {
    "text": "How about g? ",
    "start": "2096090",
    "end": "2101300"
  },
  {
    "text": "What's the complexity of g? Well, I can ignore the\nfirst statement.",
    "start": "2101300",
    "end": "2107200"
  },
  {
    "text": "But now I've got two\nnested loops. How do I go and think\nabout this?",
    "start": "2107200",
    "end": "2112410"
  },
  {
    "text": "The way I do it is I start by\nfinding the inner loop.",
    "start": "2112410",
    "end": "2117770"
  },
  {
    "text": " How many times do I go through\nthe inner loop?",
    "start": "2117770",
    "end": "2123480"
  },
  {
    "start": "2123480",
    "end": "2129750"
  },
  {
    "text": "I go through the inner\nloop n times, right? So it executes the inner\nfor statement is",
    "start": "2129750",
    "end": "2136990"
  },
  {
    "text": "going to be order n. The next question I ask is how\nmany times do I start the",
    "start": "2136990",
    "end": "2145130"
  },
  {
    "text": "inner loop up again?  That's also order n times.",
    "start": "2145130",
    "end": "2151910"
  },
  {
    "text": "So what's the complexity\nof this? ",
    "start": "2151910",
    "end": "2160240"
  },
  {
    "text": "Somebody? AUDIENCE: n-squared. PROFESSOR: Yes. I think I heard the\nright answer.",
    "start": "2160240",
    "end": "2166970"
  },
  {
    "text": "It's order n-squared. ",
    "start": "2166970",
    "end": "2173730"
  },
  {
    "text": "Because I execute the inner\nloop n times, or each time around is n, then I multiply it\nby n because I'm doing the",
    "start": "2173730",
    "end": "2182340"
  },
  {
    "text": "outer loop n times. So the inner loop is\norder n-squared. ",
    "start": "2182340",
    "end": "2190060"
  },
  {
    "text": "That makes sense? So typically, whenever I have\nnested loops, I have to do this kind of reasoning.",
    "start": "2190060",
    "end": "2197490"
  },
  {
    "text": "Same thing if I have recursion\ninside a loop or nested recursions.",
    "start": "2197490",
    "end": "2202970"
  },
  {
    "text": "I start at the inside and\nwork my way out is the way I do the analysis.",
    "start": "2202970",
    "end": "2208370"
  },
  {
    "text": " Let's look at another example. It's kind of a different take.",
    "start": "2208370",
    "end": "2215840"
  },
  {
    "text": "How about h?  What's the complexity of h?",
    "start": "2215840",
    "end": "2221580"
  },
  {
    "start": "2221580",
    "end": "2228230"
  },
  {
    "text": "First of all, what's h doing?  Kind of always a good\nway to start.",
    "start": "2228230",
    "end": "2234290"
  },
  {
    "start": "2234290",
    "end": "2240000"
  },
  {
    "text": "What is answer going to be? ",
    "start": "2240000",
    "end": "2253160"
  },
  {
    "text": "Yeah? AUDIENCE: The sum of the\n[UNINTELLIGIBLE]. PROFESSOR: Right.",
    "start": "2253160",
    "end": "2259165"
  },
  {
    "text": "Exactly. It's going to be the\nsum of the digits. ",
    "start": "2259165",
    "end": "2267570"
  },
  {
    "text": "Spring training is already\nunder way, so sum of the digits.",
    "start": "2267570",
    "end": "2273160"
  },
  {
    "text": "And what's the complexity? Well, we can analyze it.",
    "start": "2273160",
    "end": "2278530"
  },
  {
    "text": "Right away, we know\nwe can ignore everything except the loop. So how many times do I\ngo through this loop?",
    "start": "2278530",
    "end": "2284060"
  },
  {
    "text": " It depends upon the number\nof digits in the string",
    "start": "2284060",
    "end": "2290910"
  },
  {
    "text": "representation of\nthe int, right?",
    "start": "2290910",
    "end": "2295940"
  },
  {
    "text": "Now, if I were careless, I would\nwrite something like",
    "start": "2295940",
    "end": "2302810"
  },
  {
    "text": "order n, where n is the\nnumber of digits in s.",
    "start": "2302810",
    "end": "2316110"
  },
  {
    "text": "But really, I'm not allowed\nto do that. Why not?",
    "start": "2316110",
    "end": "2321480"
  },
  {
    "text": "Because I have to express the\ncomplexity in terms of the inputs to the program.",
    "start": "2321480",
    "end": "2327609"
  },
  {
    "text": "And s is not an input. s is a local variable.",
    "start": "2327610",
    "end": "2333190"
  },
  {
    "text": "So somehow, I'm going to have to\nexpress the complexity, not in terms of s, but\nin terms of what?",
    "start": "2333190",
    "end": "2343620"
  },
  {
    "text": "x.  So that's no go.",
    "start": "2343620",
    "end": "2351030"
  },
  {
    "text": "So what is in terms of x? ",
    "start": "2351030",
    "end": "2356160"
  },
  {
    "text": "How many digits? Yeah? AUDIENCE: Is it constant? PROFESSOR: It's not constant. No. Because I'll have more\ndigits in a billion",
    "start": "2356160",
    "end": "2362660"
  },
  {
    "text": "than I will in four. ",
    "start": "2362660",
    "end": "2369220"
  },
  {
    "text": "Right. Log -- in this case, base 10 of x. ",
    "start": "2369220",
    "end": "2377110"
  },
  {
    "text": "The number of decimal digits\nrequired to express an integer",
    "start": "2377110",
    "end": "2382395"
  },
  {
    "text": "is the log of the magnitude\nof that integer. ",
    "start": "2382395",
    "end": "2388370"
  },
  {
    "text": "You think about we looked at\nbinary numbers and decimal numbers last lecture, that was\nexactly what we were doing.",
    "start": "2388370",
    "end": "2397700"
  },
  {
    "text": "So that's the way I have\nto express this. Now, what's the moral here?",
    "start": "2397700",
    "end": "2404080"
  },
  {
    "text": "The thing I really care about\nis not that this is how you talk about the number\nof digits in an int.",
    "start": "2404080",
    "end": "2410110"
  },
  {
    "text": "What I care about is\nthat you always have to be very careful. People often think that they're\ndone when they write",
    "start": "2410110",
    "end": "2417720"
  },
  {
    "text": "something like order n. But they're not until they tell\nyou what n means, Because",
    "start": "2417720",
    "end": "2425010"
  },
  {
    "text": "that can be pretty subtle.  Order x would have been wrong\nbecause it's not the magnitude",
    "start": "2425010",
    "end": "2437490"
  },
  {
    "text": "of the integer x. It's this is what controls\nthe growth.",
    "start": "2437490",
    "end": "2444140"
  },
  {
    "text": "So whenever you're looking at\ncomplexity, you have to be very careful what you mean,\nwhat the variables are.",
    "start": "2444140",
    "end": "2451839"
  },
  {
    "text": "This is particularly true now\nwhen you look at functions say with multiple inputs. ",
    "start": "2451840",
    "end": "2463280"
  },
  {
    "text": "Ok. Let's look at some\nmore examples. So we've looked before\nat search.",
    "start": "2463280",
    "end": "2469940"
  },
  {
    "text": "So this is code you've\nseen before, really. Here's a linear search\nand a binary search.",
    "start": "2469940",
    "end": "2477330"
  },
  {
    "text": "And in fact, informally, we've\nlooked at the complexity of these things before.",
    "start": "2477330",
    "end": "2483000"
  },
  {
    "start": "2483000",
    "end": "2488020"
  },
  {
    "text": "And we can run them, and we can\nsee how they will grow. But it won't surprise you.",
    "start": "2488020",
    "end": "2494240"
  },
  {
    "text": "So if we look at the\nlinear search-- ",
    "start": "2494240",
    "end": "2504650"
  },
  {
    "text": "whoops, I'm printing\nthe values here, just shows it works.",
    "start": "2504650",
    "end": "2510520"
  },
  {
    "text": " But now, the binary search, what\nwe're going to look at is",
    "start": "2510520",
    "end": "2518450"
  },
  {
    "text": "how it grows. This is exactly the search\nwe looked at before. ",
    "start": "2518450",
    "end": "2545440"
  },
  {
    "text": "And the thing I want you to\nnotice, and as we looked at before, we saw it was\nlogarithmic is that as the",
    "start": "2545440",
    "end": "2553329"
  },
  {
    "text": "size of the list grows, doubles,\nI only need one more step to do the search.",
    "start": "2553330",
    "end": "2560370"
  },
  {
    "text": "This is the beauty of a\nlogarithmic algorithm. So as I go from a 100, which\ntakes 7 steps, to 200,",
    "start": "2560370",
    "end": "2566770"
  },
  {
    "text": "it only takes 8. 1,600 takes 11. And when I'm all the way up to\nsome very big number, and I'm",
    "start": "2566770",
    "end": "2573570"
  },
  {
    "text": "not even sure what that number\nis, it took 23 steps. But very slow growth.",
    "start": "2573570",
    "end": "2579500"
  },
  {
    "text": " So that's a good thing.",
    "start": "2579500",
    "end": "2585170"
  },
  {
    "text": " What's the order of this?",
    "start": "2585170",
    "end": "2590819"
  },
  {
    "text": "It's order n where n is what? Order log n where n is what?",
    "start": "2590820",
    "end": "2596130"
  },
  {
    "text": " Let's just try and write\nit carefully.",
    "start": "2596130",
    "end": "2602090"
  },
  {
    "start": "2602090",
    "end": "2607660"
  },
  {
    "text": "Well, it's order length\nof the list. ",
    "start": "2607660",
    "end": "2617770"
  },
  {
    "text": "We don't care what the actual\nmembers of the list are. Now, that's an interesting\nquestion to ask.",
    "start": "2617770",
    "end": "2627410"
  },
  {
    "text": "Let's look at the code\nfor a minute. Is that a valid assumption? Well, it seems to be when\nwe look at my test.",
    "start": "2627410",
    "end": "2634670"
  },
  {
    "text": "But let's look at what\nI'm doing here. So a couple of things\nI want to point out.",
    "start": "2634670",
    "end": "2639860"
  },
  {
    "text": "One is I used a very common\ntrick when dealing with these",
    "start": "2639860",
    "end": "2645700"
  },
  {
    "text": "kinds of algorithms. You'll notice that I have\nsomething called bsearch and",
    "start": "2645700",
    "end": "2651180"
  },
  {
    "text": "something called search.  All search does is\ncalled bsearch.",
    "start": "2651180",
    "end": "2658549"
  },
  {
    "text": "Why did I even bother\nwith search? Why didn't I just with my code\ndown here call bsearch with",
    "start": "2658550",
    "end": "2664430"
  },
  {
    "text": "some initial values?  The answer is really, I started\nwith this search.",
    "start": "2664430",
    "end": "2675615"
  },
  {
    "text": " And a user of search shouldn't\nhave to worry that I got",
    "start": "2675615",
    "end": "2685270"
  },
  {
    "text": "clever and went from this linear\nsearch to a binary search or maybe some more\ncomplex search yet.",
    "start": "2685270",
    "end": "2693030"
  },
  {
    "text": "I need to have a consistent\ninterface for the search function.",
    "start": "2693030",
    "end": "2699660"
  },
  {
    "text": "And the interface is what it\nlooks like to the caller. And it says when I call\nit, it just takes",
    "start": "2699660",
    "end": "2705210"
  },
  {
    "text": "a list and an element. It shouldn't have to take the\nhigh bound and the lower bound",
    "start": "2705210",
    "end": "2712690"
  },
  {
    "text": "as arguments. Because that really is\nnot intrinsic to the meaning of search.",
    "start": "2712690",
    "end": "2718690"
  },
  {
    "text": "So I typically will organize\nmy program by having this",
    "start": "2718690",
    "end": "2724099"
  },
  {
    "text": "search look exactly like this\nsearch to a caller. And then, it does whatever\nit needs to do",
    "start": "2724100",
    "end": "2730250"
  },
  {
    "text": "to call binary search. ",
    "start": "2730250",
    "end": "2736190"
  },
  {
    "text": "So that's usually the way\nyou do these things. It's very common with recursive\nalgorithms, various",
    "start": "2736190",
    "end": "2742960"
  },
  {
    "text": "things where you need some\ninitial value that's only there for the initial call,\nthings like that.",
    "start": "2742960",
    "end": "2748360"
  },
  {
    "text": " Let me finish--",
    "start": "2748360",
    "end": "2754160"
  },
  {
    "text": "wanted to point out is the use\nof this global variable.",
    "start": "2754160",
    "end": "2760579"
  },
  {
    "text": "So you'll notice down\nhere, I define something called NumCalls.",
    "start": "2760580",
    "end": "2765930"
  },
  {
    "text": " Remember we talked\nabout scopes.",
    "start": "2765930",
    "end": "2771970"
  },
  {
    "text": "So this is now an identifier\nthat exists in the outermost scope of the program.",
    "start": "2771970",
    "end": "2777770"
  },
  {
    "text": " Then in bsearch, I used it. ",
    "start": "2777770",
    "end": "2785410"
  },
  {
    "text": "But I said I'm going to use\nthis global variable, this variable declared outside\nthe scope of",
    "start": "2785410",
    "end": "2793110"
  },
  {
    "text": "bsearch inside bsearch. So it's this statement that\ntells me not to create a new",
    "start": "2793110",
    "end": "2799920"
  },
  {
    "text": "local variable here but to use\nthe one in the outer scope.",
    "start": "2799920",
    "end": "2805880"
  },
  {
    "text": "This is normally considered\npoor programming practice.",
    "start": "2805880",
    "end": "2811460"
  },
  {
    "text": "Global variables can\noften lead to very confusing programs. Occasionally, they're useful.",
    "start": "2811460",
    "end": "2818589"
  },
  {
    "text": "Here it's pretty useful because\nI'm just trying to keep track of a number of times\nthis thing is called.",
    "start": "2818590",
    "end": "2824650"
  },
  {
    "text": "And so I don't want a new\nvariable generated each time it's instantiated.",
    "start": "2824650",
    "end": "2830080"
  },
  {
    "text": " Now, you had a question?",
    "start": "2830080",
    "end": "2836609"
  },
  {
    "text": "Yeah? AUDIENCE: Just checking. The order len L, the size\nof the list is the",
    "start": "2836610",
    "end": "2843700"
  },
  {
    "text": "order of which search? PROFESSOR: That's the order\nof the linear search. The order of the binary search\nis order log base 2 of L--",
    "start": "2843700",
    "end": "2856050"
  },
  {
    "text": " sorry, not of L, right? Doesn't make sense to take\nthe log of a list of the",
    "start": "2856050",
    "end": "2866920"
  },
  {
    "text": "length of the list. ",
    "start": "2866920",
    "end": "2873099"
  },
  {
    "text": "Typically, we don't bother\nwriting base 2. If it's logarithmic, it doesn't\nreally very much",
    "start": "2873100",
    "end": "2879670"
  },
  {
    "text": "matter what the base is. You'll still get that\nvery slow growth. Log base 10, log base 2, not\nthat much difference.",
    "start": "2879670",
    "end": "2888420"
  },
  {
    "text": "So we typically just\nwrite log. All right. People with me?",
    "start": "2888420",
    "end": "2894910"
  },
  {
    "text": "Now, for this to be true, or in\nfact, even if we go look at",
    "start": "2894910",
    "end": "2905920"
  },
  {
    "text": "the linear search, there's\nkind of an assumption.",
    "start": "2905920",
    "end": "2912725"
  },
  {
    "text": " I'm assuming that I can extract\nthe elements from a",
    "start": "2912726",
    "end": "2920650"
  },
  {
    "text": "list and compare them to a\nvalue in constant time.",
    "start": "2920650",
    "end": "2929339"
  },
  {
    "text": "Because remember, my model of\ncomputation says that every step takes the same amount\nof time, roughly.",
    "start": "2929340",
    "end": "2937119"
  },
  {
    "text": "And if I now look say a binary\nsearch, you'll see I'm doing",
    "start": "2937120",
    "end": "2942140"
  },
  {
    "text": "something that apparently\nlooks a little bit complicated up here. ",
    "start": "2942140",
    "end": "2950700"
  },
  {
    "text": "I am looking at L of low and\ncomparing it to e, and L of high and comparing it to e.",
    "start": "2950700",
    "end": "2955710"
  },
  {
    "text": " How do I know that's\nconstant time?",
    "start": "2955710",
    "end": "2962589"
  },
  {
    "text": "Maybe it takes me order length\nof list time to extract the",
    "start": "2962590",
    "end": "2968130"
  },
  {
    "text": "last element. So I've got to be very careful\nwhen I look at complexity, not",
    "start": "2968130",
    "end": "2974720"
  },
  {
    "text": "to think I only have to look\nat the complexity of the program itself, that is to say,\nin this case, the number",
    "start": "2974720",
    "end": "2981720"
  },
  {
    "text": "of recursive calls, but is\nthere something that it's doing inside this function that\nmight be more complex",
    "start": "2981720",
    "end": "2989680"
  },
  {
    "text": "than I think.  As it happens, in this case,\nthis rather complicated",
    "start": "2989680",
    "end": "2997930"
  },
  {
    "text": "expression can be done\nin constant time. And that will be the\nfirst topic of",
    "start": "2997930",
    "end": "3003369"
  },
  {
    "text": "the lecture on Thursday. ",
    "start": "3003370",
    "end": "3009620"
  }
]