[
  {
    "start": "0",
    "end": "103000"
  },
  {
    "start": "0",
    "end": "8080"
  },
  {
    "text": "PROFESSOR: So let's get started. So this is the second part\nof instruction scheduling.",
    "start": "8080",
    "end": "15200"
  },
  {
    "text": "So what instruction scheduling? Why We are doing this? Because modern microprocessors\nare basically not executing",
    "start": "15200",
    "end": "22820"
  },
  {
    "text": "one instruction after another. They do a lot of other\ninteresting things. One thing they do-- they\nhave pipeline stages.",
    "start": "22820",
    "end": "28350"
  },
  {
    "text": "So what that means is\nmultiple instructions can be active at different\nstages of the pipeline at a given time.",
    "start": "28350",
    "end": "34260"
  },
  {
    "text": "So at a given time, there\nare multiple things running. And also, different instructions\nmight take different amount of time in this pipeline.",
    "start": "34260",
    "end": "40783"
  },
  {
    "text": "And on top of that, we might\nhave multiple execution pipelines. So in every clock cycle, you\ncan issue multiple instructions",
    "start": "40783",
    "end": "47150"
  },
  {
    "text": "so you have parallel execution. So the thing is, if there are\n[INAUDIBLE] instruction that",
    "start": "47150",
    "end": "52280"
  },
  {
    "text": "produce a value\nwhen others uses, if the value is not available\nwhen it's trying to use it, hardware basically\nstalls the instructions",
    "start": "52280",
    "end": "59360"
  },
  {
    "text": "more than my super scale. So in some machines,\nyou can't even scale it. You have to actually explicitly\ninsert no op instructions",
    "start": "59360",
    "end": "66350"
  },
  {
    "text": "because the data\nwouldn't be there. So there'll [INAUDIBLE]\nall the stall. So what we are trying to do is\nin the instruction schedule,",
    "start": "66350",
    "end": "73740"
  },
  {
    "text": "we want to reorder\nthe instructions so we can maximize the\ninstruction throughput. So what that means, you\nwant to get maximum amount",
    "start": "73740",
    "end": "79940"
  },
  {
    "text": "of instructions executed both-- if you have parallelism,\nwe won't have many things",
    "start": "79940",
    "end": "84973"
  },
  {
    "text": "happening in parallel. So all the units has to\nat least have something going all the time. And we want to really\nminimize the pipeline stalls.",
    "start": "84973",
    "end": "90980"
  },
  {
    "text": "We don't want people just\nwaiting doing nothing in there even after we started. So this is the essence of that.",
    "start": "90980",
    "end": "97079"
  },
  {
    "text": "So three things we are worried\nabout-- data dependence, resource, and\ncontrol dependencies.",
    "start": "97080",
    "end": "102600"
  },
  {
    "text": "These a little bit of\n[INAUDIBLE] you don't have to. So data dependencies\nbetween instructions means two access variables\naccess the same data.",
    "start": "102600",
    "end": "112010"
  },
  {
    "start": "103000",
    "end": "103000"
  },
  {
    "text": "Two access-- access\nthe same data. There are three\nkinds of accesses-- true dependence, which\nis actually real database",
    "start": "112010",
    "end": "118130"
  },
  {
    "text": "because somebody write\nsomething that I need, and I had to wait from that. There are two other types of\ndependencies that are just",
    "start": "118130",
    "end": "123439"
  },
  {
    "text": "artifacts because we can\nkeep different variables at the same location. So it's called an anti\nand output dependencies.",
    "start": "123440",
    "end": "131150"
  },
  {
    "text": "That means you're going to\nrewrite the data anyways, but I am supposed to use it.",
    "start": "131150",
    "end": "136327"
  },
  {
    "text": "So you have to wait till\nI finish using before you can really use that space. So that those things\nyou can actually",
    "start": "136327",
    "end": "142599"
  },
  {
    "text": "eliminate by giving\nyou a different space. You don't have to\nwait for that space. You get a different\nspace in there. But output dependence means\ntwo guys are trying to write,",
    "start": "142600",
    "end": "150590"
  },
  {
    "text": "and I want to make sure the last\nguy is the one who writes last because it has to survive.",
    "start": "150590",
    "end": "155690"
  },
  {
    "text": "And here, if you are smart,\nyou can say, wait a minute. There are two guys fighting. Nobody's meeting in the middle. Why is the first guy actually\nwriting if nobody's using it?",
    "start": "155690",
    "end": "163069"
  },
  {
    "text": "So you can do a lot of\nthings to eliminate some of these things in some sense.",
    "start": "163070",
    "end": "168629"
  },
  {
    "text": "And the key thing is we\ncan't just arbitrarily order the instructions.",
    "start": "168630",
    "end": "174299"
  },
  {
    "text": "We have to make\nsure if we reorder, we basically satisfy\nthese dependencies. And competing dependencies,\nfor registers, it's easy.",
    "start": "174300",
    "end": "183269"
  },
  {
    "text": "Same register, dependent. Memory can get\ncomplicated and can get arbitrarily complicated.",
    "start": "183270",
    "end": "188290"
  },
  {
    "start": "184000",
    "end": "184000"
  },
  {
    "text": "We don't touch it in\nhere, but still right now, it's active research topic. If you look at the Java program,\nif you look at two variables,",
    "start": "188290",
    "end": "194739"
  },
  {
    "text": "how can you say if they are\ndifferent to the same location? It's the same method,\nbasically same object.",
    "start": "194740",
    "end": "200797"
  },
  {
    "text": "How do you say that? That's a hard issue, and there's\nstill a lot of work going on and that kind of thing. It's called a point\nalias analysis.",
    "start": "200797",
    "end": "207810"
  },
  {
    "start": "207000",
    "end": "207000"
  },
  {
    "text": "And what we do is we represent\nthese dependencies using a tag. Each instruction is a node.",
    "start": "207810",
    "end": "213659"
  },
  {
    "text": "And it [INAUDIBLE]\nsays, OK, the results of that instruction are needed\nin the sync of the edge.",
    "start": "213660",
    "end": "222209"
  },
  {
    "text": "And we put a number\nthat says, OK, in order for the second\ninstruction not stall,",
    "start": "222210",
    "end": "227730"
  },
  {
    "text": "it has to start at\nleast this many cycles after the first one.",
    "start": "227730",
    "end": "233170"
  },
  {
    "text": "So first instruction get issued. And in here, one to four, that\nsays after first instruction,",
    "start": "233170",
    "end": "238470"
  },
  {
    "text": "the fourth at least after two\ninstructions in the middle. So it won't stall. So if you do it earlier,\nit will go to stall.",
    "start": "238470",
    "end": "244650"
  },
  {
    "text": "So this is the kind of\nrepresentation we have. And the other type of constraint\nare resource constraints.",
    "start": "244650",
    "end": "250890"
  },
  {
    "text": "Things like super scale is you\nhave multiple parallel units, and you need to make sure that\nall those units are kept busy.",
    "start": "250890",
    "end": "261958"
  },
  {
    "text": "But there's also\n[INAUDIBLE] limited. So if you assume there are\nmore than what you have, you might not get the\nright-- you might not",
    "start": "261959",
    "end": "267780"
  },
  {
    "text": "get a good schedule. And I'm going fast because I\nwent through last time, OK?",
    "start": "267780",
    "end": "272850"
  },
  {
    "text": "So you should have seen this. This a second time. So one example is assume\nyou have two units.",
    "start": "272850",
    "end": "278159"
  },
  {
    "text": "One say, every registered\noperation going through unit A, any memory operation\ngoes to unit B. OK,",
    "start": "278160",
    "end": "284100"
  },
  {
    "text": "how do you run that? So what happens is the way to\ndo that is almost bin packing.",
    "start": "284100",
    "end": "294419"
  },
  {
    "text": "So assume you have these bins. You have these\npipelines, each pipeline. And you have some\ninstructions that",
    "start": "294420",
    "end": "302333"
  },
  {
    "text": "could come into the pipeline,\nand you can figure out what's the furthest down you can\nput and basically keep running.",
    "start": "302333",
    "end": "309210"
  },
  {
    "text": "So if you know how\nto play Tetris, this is exactly you can do. So here's the pipeline.",
    "start": "309210",
    "end": "315690"
  },
  {
    "text": "So ALU operations, it could be\ndifferent sites like a Tetris piece depending on-- if it's two cycles, it\nlooks like a piece of two.",
    "start": "315690",
    "end": "323610"
  },
  {
    "text": "In memory pipeline, it's\nactually like a Tetris piece. So basically, you had to\nmove the Tetris pieces",
    "start": "323610",
    "end": "329370"
  },
  {
    "text": "and fix this the\nbest way you can. So the way you do it is I\ntalked about list scheduling.",
    "start": "329370",
    "end": "335700"
  },
  {
    "text": "List scheduling, basically,\nyou do a topological sort of this [INAUDIBLE]. So what that means is all the\ndependencies are basically",
    "start": "335700",
    "end": "347940"
  },
  {
    "text": "things that are dependent are\nnot scheduled out of order",
    "start": "347940",
    "end": "352950"
  },
  {
    "text": "in this topological set. And then what you have is if\nthere's nothing dependent, if the instruction has no\ndependency, or everything that",
    "start": "352950",
    "end": "359430"
  },
  {
    "text": "depends on the\nschedule is ready. So that means you\ncan schedule it. There's no problem with that. And then you keep\nscheduling that.",
    "start": "359430",
    "end": "365360"
  },
  {
    "text": "And basically, you\nhave to pick things out of the READY list and schedule. The key thing is when your\nREADY list has multiple things,",
    "start": "365360",
    "end": "372000"
  },
  {
    "text": "the way you pick things\nout of the READY list can make a big difference. If you pick the wrong\nthing, what happens is",
    "start": "372000",
    "end": "378090"
  },
  {
    "text": "can get the schedule. But later on, you might not\nhave anything to schedule. Then you might stall at the end.",
    "start": "378090",
    "end": "383460"
  },
  {
    "text": "So there are a lot of\nheuristics people come up with",
    "start": "383460",
    "end": "389069"
  },
  {
    "text": "to pick up from the\nREADY list because if you want to do optimal solution,\nit's an MP Complete problem.",
    "start": "389070",
    "end": "394440"
  },
  {
    "text": "So you can try to optimal,\nbut you will never get there. So basically, you do that. So here's an example I\nhave been working through.",
    "start": "394440",
    "end": "402040"
  },
  {
    "text": "So I give some delays in here. And so the two methods\nwe are doing to pick",
    "start": "402040",
    "end": "408720"
  },
  {
    "text": "is look at the distance\nfrom the leaf node. So the thing is,\nif you have a path,",
    "start": "408720",
    "end": "414547"
  },
  {
    "text": "if you have multiple\nchain, that means the chain put dependencies. So the longest chain\nis probably the one",
    "start": "414547",
    "end": "419970"
  },
  {
    "text": "that's going to really\nrestrict the amount of time that process is going to take.",
    "start": "419970",
    "end": "425130"
  },
  {
    "text": "So you look at the chain. If you are very high\nup on the chain, you better get that done fast\nso more things can happen.",
    "start": "425130",
    "end": "431069"
  },
  {
    "text": "So you calculate the\ndepth in that chain. That is the D number. And if you get a tie of the\nD number to do a tie break,",
    "start": "431070",
    "end": "437430"
  },
  {
    "text": "you figure out a fan out. Fan out means if I get\nschedule, if I schedule, how many more instructions\nwill be joining the ready list?",
    "start": "437430",
    "end": "445720"
  },
  {
    "text": "So that means things that had\na lot more dependencies better get scheduled fast. And those are-- I mean,\nthose are intuitive things.",
    "start": "445720",
    "end": "451350"
  },
  {
    "text": "There might be a lot of other\nthings that you can think of, and there's-- somebody last time said, how\nabout memory instructions?",
    "start": "451350",
    "end": "457100"
  },
  {
    "text": "You should schedule them faster\nbecause memory reads always need to use of the data. Yeah, that's good.",
    "start": "457100",
    "end": "463140"
  },
  {
    "text": "I mean, people can play\nwith these heuristics. So in here at the\nbeginning, you have",
    "start": "463140",
    "end": "468780"
  },
  {
    "text": "READY list of 1, 3, 4, and 6. And then now you do\nthis Tetris game.",
    "start": "468780",
    "end": "476880"
  },
  {
    "text": "The one is basically\njust one block. There's no dependency\n[INAUDIBLE] schedule that in there.",
    "start": "476880",
    "end": "482020"
  },
  {
    "text": "And then we need\nto schedule one. Now two become ready. You can add that in there.",
    "start": "482020",
    "end": "487300"
  },
  {
    "text": "And two also has the\nhighest depth in there. So you pick up 2. And two is depending on one.",
    "start": "487300",
    "end": "493949"
  },
  {
    "text": "And now two is this piece. So you had to actually\nput it after one because that's a dependency.",
    "start": "493950",
    "end": "499470"
  },
  {
    "text": "So you can actually\nlay it out there. So it's not really a Tetris. You can actually move\nthings inside out.",
    "start": "499470",
    "end": "505419"
  },
  {
    "text": "And then you pick up six. Six is early operation.",
    "start": "505420",
    "end": "511996"
  },
  {
    "text": "There is no memory. So you move six there. And then at this point,\nyou can put seven in there.",
    "start": "511997",
    "end": "518219"
  },
  {
    "text": "So you can pick up four. The interesting thing is\nfour is a memory operation, and it's not\ndepending on anything.",
    "start": "518220",
    "end": "523229"
  },
  {
    "text": "Now it can actually\nmove in front of two because we had this\nempty space in there. You can [INAUDIBLE].",
    "start": "523230",
    "end": "528660"
  },
  {
    "text": "So it's a little bit\ndifferent from just bean packing because you can order\nit in anywhere in this thing.",
    "start": "528660",
    "end": "534030"
  },
  {
    "text": "So you just find\nthe earliest space you can shove it in that still\ndoesn't validate dependence",
    "start": "534030",
    "end": "540340"
  },
  {
    "text": "and then do that. And five, you add\nit to the list. And then you pick seven.",
    "start": "540340",
    "end": "545430"
  },
  {
    "text": "Seven depends on six and two. And so seven has to go here. And then that gets eight\nand nine into the list.",
    "start": "545430",
    "end": "551820"
  },
  {
    "text": "Three has no dependencies. It can go anywhere. Five depends on four,\nand then five goes here.",
    "start": "551820",
    "end": "560310"
  },
  {
    "text": "And then eight depends on seven. So it goes here.",
    "start": "560310",
    "end": "565920"
  },
  {
    "text": "And nine depends on seven. Nine goes here. And then voila, you've\ngot your schedule. So what happens is now,\nthis is the machine",
    "start": "565920",
    "end": "573930"
  },
  {
    "text": "executing this order. So we have to see in\nsuper scale [INAUDIBLE],, you have to issue instruction\nprobably 146235789",
    "start": "573930",
    "end": "584492"
  },
  {
    "text": "or something like that. Order the instruction\nin that order. Do that, and then you get this\nvery tight schedule in there.",
    "start": "584492",
    "end": "590280"
  },
  {
    "text": "So this is what you do here in\nscheduling for multiple units.",
    "start": "590280",
    "end": "596050"
  },
  {
    "text": "So there could be many\ndifferent types of resources. Sometimes this can get\narbitrarily complicated because depending on different\nresources, it's not static.",
    "start": "596050",
    "end": "606430"
  },
  {
    "text": "So this scheduling problem\ncan get very complicated, but a very simplistic\nform of doing it",
    "start": "606430",
    "end": "613080"
  },
  {
    "text": "is what I just described. So the next thing is\ncontrol dependencies.",
    "start": "613080",
    "end": "618892"
  },
  {
    "text": "Each basic block right now is\ndoing scheduling basic block. But basic blocks are small. And what you want to\ndo is try to schedule",
    "start": "618892",
    "end": "625220"
  },
  {
    "text": "across basic blocks. So we need to have\ncontrol dependencies. So there's a technique called\ntrace scheduling people use",
    "start": "625220",
    "end": "632630"
  },
  {
    "start": "630000",
    "end": "630000"
  },
  {
    "text": "which is basically instead of-- the idea is most of the control\ndependencies has a branch that",
    "start": "632630",
    "end": "641000"
  },
  {
    "text": "takes a lot more time than other\nbranches-- like, for example, things like error condition. Probably never happened. We want to deal\nwith other branch.",
    "start": "641000",
    "end": "647407"
  },
  {
    "text": "And you optimize for that. And you can combine\nmultiple basic blocks into the trace and deal\nwith off-trace stuff",
    "start": "647407",
    "end": "655040"
  },
  {
    "text": "which can be slow because it\ndoesn't happen that often. And you basically do\nclean up code [INAUDIBLE].. So you assume you have\na program like that,",
    "start": "655040",
    "end": "662839"
  },
  {
    "text": "and you do some analysis-- so\nlike, either static analysis or profile feedback. You run the program\nwhile and figure out",
    "start": "662840",
    "end": "669000"
  },
  {
    "text": "where these branches normally\ngo and figure out, OK, this is the normal executed part. And say, ah.",
    "start": "669000",
    "end": "674575"
  },
  {
    "text": "It will basically take\nthat rest out of that, align that part together,\nand then treat it",
    "start": "674575",
    "end": "680540"
  },
  {
    "text": "as one gigantic block. But the problem\nhere is still, there are things going out and\ncoming into the block.",
    "start": "680540",
    "end": "685940"
  },
  {
    "text": "And that still makes\nscheduling hard because you have to--\ncan't just avoid them. So one technique is to create\na block that has a single entry",
    "start": "685940",
    "end": "693050"
  },
  {
    "text": "multiple exit\nbecause then things become much easier because\nthere's no things coming-- there's no control coming\nback into the blocks.",
    "start": "693050",
    "end": "699710"
  },
  {
    "text": "Only thing is you're going out. So the way you\ncan do that is you can replicate the\nrest or the exits.",
    "start": "699710",
    "end": "706130"
  },
  {
    "text": "So it's the same code\nreplicated in the exit. So what happens\nis in this block, there are single\nentry from the top,",
    "start": "706130",
    "end": "711930"
  },
  {
    "text": "and there are three exits--\nexit out of A, exit out of E, exit out of H,\nthat normal exits. And now what you do is\nyou get a lot more freedom",
    "start": "711930",
    "end": "719420"
  },
  {
    "text": "to basically move instructions\nall over the place. OK, that's where we\nend up last time.",
    "start": "719420",
    "end": "725720"
  },
  {
    "text": "So loops-- so the\nthing about loops",
    "start": "725720",
    "end": "731100"
  },
  {
    "start": "728000",
    "end": "728000"
  },
  {
    "text": "is most programs, 90% of the\ntime or 99% of the times,",
    "start": "731100",
    "end": "736829"
  },
  {
    "text": "are spinning loops. If you think about it,\nsomething like a Pentium",
    "start": "736830",
    "end": "741840"
  },
  {
    "text": "running at 3 gigahertz has\nsuch a need for instruction, such appetite for instruction.",
    "start": "741840",
    "end": "748300"
  },
  {
    "text": "So if you are to feed new\ninstructions one at a time, you'll never be able\nto-- you'll run out",
    "start": "748300",
    "end": "753480"
  },
  {
    "text": "of the entire disk\nin a few minutes. If you think about running a\n3 gigahertz, one instruction",
    "start": "753480",
    "end": "758640"
  },
  {
    "text": "at a time, just calculate\nhow much instruction is needed to keep this piece fed. So how do you deal with that?",
    "start": "758640",
    "end": "764730"
  },
  {
    "text": "Because you can't put\ninstructions at that speed. The only way you can deal\nwith that most of the time is running the same instructions\nagain and again and again",
    "start": "764730",
    "end": "771437"
  },
  {
    "text": "in a loop. And that's how these machines\nactually run very fast. So because of that performance,\nin many cases, it's in loops.",
    "start": "771437",
    "end": "777300"
  },
  {
    "text": "So running loops fast\nis very important. And loop bodies are small.",
    "start": "777300",
    "end": "782610"
  },
  {
    "text": "So optimizing that is\nnot that complicated because you can find these\nvery nice types of things. But it's disproportionately--\nexecution time is in there.",
    "start": "782610",
    "end": "792220"
  },
  {
    "text": "And so because of\nthat, most compilers do something very\ndifferent for loops than it do for the rest of them.",
    "start": "792220",
    "end": "798103"
  },
  {
    "text": "So it's time to\ngo and actually do something very interesting,\nnice for the loops. So I want to give\nyou an example.",
    "start": "798103",
    "end": "804450"
  },
  {
    "start": "801000",
    "end": "801000"
  },
  {
    "text": "And again, a simple\nmachine I will use. Assume one load store\nunit and one arithmetic,",
    "start": "804450",
    "end": "811170"
  },
  {
    "text": "one that actually only\ndoes [INAUDIBLE] register",
    "start": "811170",
    "end": "817829"
  },
  {
    "text": "to register operation\nand one actually do the load store operations.",
    "start": "817830",
    "end": "823440"
  },
  {
    "text": " When we used to do a\nclass in [INAUDIBLE],, this is a very nice distinction\nbecause load standards",
    "start": "823440",
    "end": "830570"
  },
  {
    "text": "are very different from\nregister operation. They have different\nset of instructions. In the [INAUDIBLE] is\njust one big jumble.",
    "start": "830570",
    "end": "836180"
  },
  {
    "text": "So I am trying to little\nbit abstract out to give you a good handle of that.",
    "start": "836180",
    "end": "841380"
  },
  {
    "text": "But as you go to\nthe architecture, there's no nice\nseparation saying I have load store unit that\nhave separate load store",
    "start": "841380",
    "end": "847167"
  },
  {
    "text": "instructions where\nas memory unit that has [? memory ?]\ninstruction. These are combined.",
    "start": "847167",
    "end": "853170"
  },
  {
    "text": "So it's not that nice, but\nat least to get the concept, I'll do the simplification.",
    "start": "853170",
    "end": "858810"
  },
  {
    "text": "So here's a simple source code. I'm basically multiplying array\nby a constant, each element.",
    "start": "858810",
    "end": "865840"
  },
  {
    "text": "So some assembly code is not-- so can you understand what\nthis assembly code does?",
    "start": "865840",
    "end": "875259"
  },
  {
    "text": "So what I did was from RDI-- so the first movie instruction\nmeans add both RDI and RAX",
    "start": "875260",
    "end": "884339"
  },
  {
    "text": "together. Use that as address to go\nget the data and move to R10.",
    "start": "884340",
    "end": "890730"
  },
  {
    "text": "So what that means is the\nbase is stored in RDI for AI.",
    "start": "890730",
    "end": "895920"
  },
  {
    "text": "And RAX is basically the\nindex basically I keep adding. And then I do the multiplication\nfrom B. 11 stores B and into A.",
    "start": "895920",
    "end": "904770"
  },
  {
    "text": "And then I store that register\nback into that location. OK, so those are\nthree instructions.",
    "start": "904770",
    "end": "910790"
  },
  {
    "text": "And then obviously,\nwhat I did was-- here is the interesting thing. Why did I do to\nsubtract instead of add?",
    "start": "910790",
    "end": "917240"
  },
  {
    "text": "So I'm actually\nsubtracting arrays. So I'm not actually\nrunning the loop this way. AUDIENCE: [INAUDIBLE]",
    "start": "917240",
    "end": "923172"
  },
  {
    "text": "PROFESSOR: Yeah,\nI'm counting down. Why? AUDIENCE: [INAUDIBLE] the\ninstruction at the top because there is a special--",
    "start": "923172",
    "end": "929160"
  },
  {
    "text": "because I think you're\nusing [INAUDIBLE].. So there's a special instruction\nthat just checks [INAUDIBLE]..",
    "start": "929160",
    "end": "936149"
  },
  {
    "text": "PROFESSOR: Yeah,\nso let [INAUDIBLE] because the thing\nis by counting up, I actually have to\ndo a comparison again",
    "start": "936150",
    "end": "941400"
  },
  {
    "text": "when you reach the max. If I'm counting down,\nwhen I hit zero, I'm done.",
    "start": "941400",
    "end": "946470"
  },
  {
    "text": "So I don't have to do\ncompare instruction. So I just have all the compare\ninstruction by doing countdown. So do you get that?",
    "start": "946470",
    "end": "953770"
  },
  {
    "text": "So here's the kind of things\nyou kind of tried to play with to get one instruction away.",
    "start": "953770",
    "end": "959840"
  },
  {
    "text": "So here's my [INAUDIBLE]\nthings because you first do the move before you do the\nmultiplication because you",
    "start": "959840",
    "end": "968490"
  },
  {
    "text": "had to get this data. And multiplication has to\nfinish before you actually do the move back in there.",
    "start": "968490",
    "end": "974940"
  },
  {
    "text": "I have a delay zero because\nthis move needs RAX.",
    "start": "974940",
    "end": "981450"
  },
  {
    "text": "And these upgrades RAX. So I can't start\ndoing this subtraction before I issue this instruction.",
    "start": "981450",
    "end": "986460"
  },
  {
    "text": "So at least they have to\nhappen at the same time because I'm using that. I'm updating that one\nagain because otherwise",
    "start": "986460",
    "end": "991650"
  },
  {
    "text": "if we do [INAUDIBLE],,\nI would have updated it before I actually used it. So it has to at least\nhappen in the same order.",
    "start": "991650",
    "end": "996848"
  },
  {
    "text": "So that's why I put\na delay zero in here. And then after\ndoing subtraction, you had to finish [INAUDIBLE]\nto actually do the branch.",
    "start": "996848",
    "end": "1005640"
  },
  {
    "text": "Fair enough? OK, so this is [INAUDIBLE].",
    "start": "1005640",
    "end": "1010740"
  },
  {
    "text": "So if you run this, so\nfirst you do the move. It follows by the\nmultiplication,",
    "start": "1010740",
    "end": "1018490"
  },
  {
    "text": "which is three cycles,\nand do the subtraction. And then [INAUDIBLE]\nnew start subtraction, you can do this next move,\nwhich is followed by the branch.",
    "start": "1018490",
    "end": "1025582"
  },
  {
    "text": "So this is basically what\nyou can actually best you could assume you can get. I'm not dealing with any\nkind of resources or anything",
    "start": "1025582",
    "end": "1031530"
  },
  {
    "text": "like that. I'm just looking at the\npipeline stages you have to do. OK, this is clear?",
    "start": "1031530",
    "end": "1036680"
  },
  {
    "text": " How this goes about doing that?",
    "start": "1036680",
    "end": "1041810"
  },
  {
    "text": "So OK, yeah, this is good. It doesn't give you that much.",
    "start": "1041810",
    "end": "1047839"
  },
  {
    "text": "This is basically what the\nnormal schedule would do. So then I'm going to\ntalk to you about three",
    "start": "1047839",
    "end": "1053620"
  },
  {
    "text": "different techniques that you\ncan do around optimizing loops. First thing is a\nreally simple one.",
    "start": "1053620",
    "end": "1060779"
  },
  {
    "text": "Just unroll loop bodies\nbecause what happens is loop body has a\nsmall basic block. By unrolling it, you might be\nable to get a few more basic",
    "start": "1060780",
    "end": "1067080"
  },
  {
    "text": "blocks one after another. And also, if you unroll it\nproperly, so instead of--",
    "start": "1067080",
    "end": "1072592"
  },
  {
    "text": "so you don't need to have\nexit at the end of it because what you\ndo is you make sure you don't get into\nthat body unless you",
    "start": "1072592",
    "end": "1079320"
  },
  {
    "text": "have enough iterations. I mean, so what that\nmeans is actually",
    "start": "1079320",
    "end": "1084440"
  },
  {
    "text": "have to have a main body,\nunroll body, and also a loop of ends to run that. So assume you are\nrunning seven iterations",
    "start": "1084440",
    "end": "1092300"
  },
  {
    "text": "and you want to unroll twice. So what you want to\ndo is on the main body two iterations for\nsix and the last body",
    "start": "1092300",
    "end": "1099740"
  },
  {
    "text": "to run one more iteration. So because of that,\nin the middle. You don't have to\nhave exit conditions",
    "start": "1099740",
    "end": "1105800"
  },
  {
    "text": "or anything like that. So the minute you go\ninto the main body, you know you run into the n. So you can move a\nlot of things around.",
    "start": "1105800",
    "end": "1111800"
  },
  {
    "text": "That makes it clear\nhow you unroll? OK, I don't have\na piece of code. If it is not there, I\ncan write on the board.",
    "start": "1111800",
    "end": "1119480"
  },
  {
    "text": "And the nice thing is it creates\na much larger basic block, and you can eliminate\nthis bound check. ",
    "start": "1119480",
    "end": "1126799"
  },
  {
    "start": "1126000",
    "end": "1126000"
  },
  {
    "text": "The issues of that are if\nyou keep unrolling too much, you create a much\nlarger program,",
    "start": "1126800",
    "end": "1132030"
  },
  {
    "text": "and the other thing\nis, as I said, I had to have two\ndifferent bodies in here.",
    "start": "1132030",
    "end": "1139910"
  },
  {
    "text": "So assume I'm\nunrolling 64 times. So first I will do\nis for i equals--",
    "start": "1139910",
    "end": "1147590"
  },
  {
    "text": "you say I had 0 to\nN. 0 to N in here. 0 to N divide by 64 step\n64, something like that, OK?",
    "start": "1147590",
    "end": "1163220"
  },
  {
    "text": "I'm writing on a weird syntax,\nbut this is basically flow. And then what I had to do\nis another loop for i equals",
    "start": "1163220",
    "end": "1173990"
  },
  {
    "text": "i, which is the last\niteration here to n. This is less than 64 because\nup to the flow, it will run.",
    "start": "1173990",
    "end": "1182000"
  },
  {
    "text": "And then you run to 64. So the problem is, if the only\ntime or most of the time you",
    "start": "1182000",
    "end": "1187490"
  },
  {
    "text": "only have 25 iterations\nor 30 durations, you are going to try\nto do the first loop.",
    "start": "1187490",
    "end": "1193157"
  },
  {
    "text": "Nothing will happen,\nnot a single iteration, and go to the second loop\nagain and again and again. So you'll do extra\ncheck, basically.",
    "start": "1193157",
    "end": "1199530"
  },
  {
    "text": "So this usefully, at least,\nyou have 64 iterations to run because otherwise, that\nbody is just never getting",
    "start": "1199530",
    "end": "1205820"
  },
  {
    "text": "executed. And also, if you do it, most of\nthe time when you are starting",
    "start": "1205820",
    "end": "1212010"
  },
  {
    "text": "a loop, there might be\nsome start-up cost and end cost in scheduling in there.",
    "start": "1212010",
    "end": "1217269"
  },
  {
    "text": "So here's a loop. So what I want to do is I\njust unroll it one more. I unroll it twice, and\nthis is what I get.",
    "start": "1217270",
    "end": "1223200"
  },
  {
    "text": "OK, so only thing\nI did was I cut and pasted the loop body twice,\nand I eliminated the branch",
    "start": "1223200",
    "end": "1229169"
  },
  {
    "text": "condition, basically. And of course, I'm\nguaranteeing that when you went in there,\nat least we'll have two iterations to run.",
    "start": "1229170",
    "end": "1234590"
  },
  {
    "text": "So I'm guaranteeing that. I'm not showing that in here. So here, we didn't\nget that much.",
    "start": "1234590",
    "end": "1242789"
  },
  {
    "text": "What we did was we eliminated\none, this loop exit test.",
    "start": "1242790",
    "end": "1249030"
  },
  {
    "text": "So I went from nine\ncycles per iteration to eight cycles per iteration. Eh, big deal.",
    "start": "1249030",
    "end": "1254159"
  },
  {
    "text": "But what this says is by\ndoing that, now we have a much larger piece of code.",
    "start": "1254160",
    "end": "1259200"
  },
  {
    "text": "If we can do a few\nadditional things, you can actually do much better. So let's look at what we can do.",
    "start": "1259200",
    "end": "1266400"
  },
  {
    "text": "So what happens\nis a lot of times, there are these registers\nwe use to keep temporaries.",
    "start": "1266400",
    "end": "1271950"
  },
  {
    "text": "They are stopping us from\ndoing anything useful because in the middle, I'm\nusing-- for the both of them,",
    "start": "1271950",
    "end": "1277020"
  },
  {
    "text": "I'm using a register,\nsame register, to keep a temporary value. And now since it's\nthe same register,",
    "start": "1277020",
    "end": "1282360"
  },
  {
    "text": "I can't move anything around. So here, what happens\nis R10 is used twice.",
    "start": "1282360",
    "end": "1288030"
  },
  {
    "text": "The first group used R10. You load something into R10,\nyou multiply and store in there. And I use R10 again.",
    "start": "1288030",
    "end": "1294210"
  },
  {
    "text": "So obviously, you can't move\nthem around because with R-- intermix these instructions\nbecause of R10 is the same.",
    "start": "1294210",
    "end": "1300760"
  },
  {
    "text": "So one thing I can do is\nbasically make it different. I move to RCX. So I use a different\nregister for that.",
    "start": "1300760",
    "end": "1308309"
  },
  {
    "text": "OK, still, by doing that,\nyou can't get too many things because I still have a bunch\nof dependencies in here.",
    "start": "1308310",
    "end": "1314945"
  },
  {
    "text": "Still the dependencies\nhaven't changed. So one thing you can\ndo is try to eliminate unnecessary dependencies.",
    "start": "1314945",
    "end": "1321000"
  },
  {
    "text": "Can anybody suggest\nsome interesting ways to eliminate unnecessary\ndependencies in here? ",
    "start": "1321000",
    "end": "1327980"
  },
  {
    "text": "So let's look at\nthe program, OK? How can I get rid of\nsome of the dependencies?",
    "start": "1327980",
    "end": "1333050"
  },
  {
    "text": "Don't look for the\nnext pages there.  OK, how can I get\nrid of dependencies?",
    "start": "1333050",
    "end": "1339980"
  },
  {
    "text": "What can I do?  AUDIENCE: Could you\nkeep two [INAUDIBLE]",
    "start": "1339980",
    "end": "1345723"
  },
  {
    "text": "from each other [INAUDIBLE]? PROFESSOR: Exactly. So that's the thing\nthat I'm going to do.",
    "start": "1345723",
    "end": "1350967"
  },
  {
    "text": "Instead of [INAUDIBLE]\nbecause my dependence chain is basically this. I have i, and then\nuntil I do i plus 1,",
    "start": "1350967",
    "end": "1357059"
  },
  {
    "text": "I can't do the i plus 4. I can't do the next one. And I can't do any\nother computation",
    "start": "1357060",
    "end": "1362340"
  },
  {
    "text": "until I get the i plus 4 done. So I mean, that keeps you two\nvery tight together in there. And if I keep two\ndifferent things,",
    "start": "1362340",
    "end": "1369390"
  },
  {
    "text": "two different variables, I'm\nmuch, much better in there. What else can I do?",
    "start": "1369390",
    "end": "1374490"
  },
  {
    "text": "What other type of\nthings can you do? ",
    "start": "1374490",
    "end": "1383920"
  },
  {
    "text": "There's nothing in here,\nthough, but any suggestions? ",
    "start": "1383920",
    "end": "1398980"
  },
  {
    "text": "I think a lot of things you\ndid in the last segment, data flow optimizations\ncannot be here,",
    "start": "1398980",
    "end": "1405143"
  },
  {
    "text": "because between iterations,\nyou might have a lot of common subexpressions that happen\nbecause what happens is each",
    "start": "1405143",
    "end": "1410920"
  },
  {
    "text": "body might do some kind\nof address calculation. And the next time--",
    "start": "1410920",
    "end": "1417627"
  },
  {
    "text": "[INAUDIBLE] I've\nactually almost done that here because\nwhat I have done is I got the address calculation.",
    "start": "1417628",
    "end": "1423640"
  },
  {
    "text": " Basically, I'm just adding\nvalue to the address. I'm not doing the full\naddress calculation in here.",
    "start": "1423640",
    "end": "1430460"
  },
  {
    "text": "So sometimes you\nmight not have done things like code motion\nand common subexpression",
    "start": "1430460",
    "end": "1437169"
  },
  {
    "text": "elimination because it\ncreates more live ranges. You have to keep\nmore values around. But now you are merging\nthe loop together.",
    "start": "1437170",
    "end": "1443290"
  },
  {
    "text": "You might be able to do that\nrisk calculation once and bring the operators very\nclose to each other so you can reduce\nthe [INAUDIBLE]",
    "start": "1443290",
    "end": "1449630"
  },
  {
    "text": "because if you have\ntwo things, basically, you create a lot of live\nranges across because you're doing address calculation,\nkeeping it in the register,",
    "start": "1449630",
    "end": "1456190"
  },
  {
    "text": "and then moving it across. But now if I can\nhave the ability to do of these to each other,\nI can do that risk calculation",
    "start": "1456190",
    "end": "1461680"
  },
  {
    "text": "once and use it twice and\nreduce the live ranges. So the thing about\nthis is the compilers",
    "start": "1461680",
    "end": "1467380"
  },
  {
    "text": "would love to do optimizations\nin these nice phases. But at the end of the day,\nit's a big gigantic mess",
    "start": "1467380",
    "end": "1473830"
  },
  {
    "text": "because, OK, most optimizations\nare not obviously always good.",
    "start": "1473830",
    "end": "1480190"
  },
  {
    "text": "It reduces something,\nincreases other. And then it's useful if the next\ntime around, you can actually",
    "start": "1480190",
    "end": "1485285"
  },
  {
    "text": "go get rid of other things. So that's exactly-- so if\nyou do common subexpression elimination, if you\nunderstand that,",
    "start": "1485285",
    "end": "1490865"
  },
  {
    "text": "and two things use\nthe same expression, eliminate that to\nreduce [INAUDIBLE],, then you have to keep that\nexpression value across.",
    "start": "1490865",
    "end": "1496750"
  },
  {
    "text": "So if the distance\nis fast, you actually increase a large\nlibrary and you might have to go do some\nregister spill because you",
    "start": "1496750",
    "end": "1502720"
  },
  {
    "text": "need more live ranges. But on the other\nhand, the minute you can do that as well\nas move the instruction next to each other, it\nmight be really good.",
    "start": "1502720",
    "end": "1510050"
  },
  {
    "text": "So in reality,\nthat's why compilers get very complicated because\neven though you can say, like, all these passes\nare independent,",
    "start": "1510050",
    "end": "1516640"
  },
  {
    "text": "a lot of times, the\ndecision to do something is a very dependent decision\nand things get complicated.",
    "start": "1516640",
    "end": "1522350"
  },
  {
    "text": "So here you don't\nhave that much things. So what I'm going to do is\nexactly what he pointed out,",
    "start": "1522350",
    "end": "1530020"
  },
  {
    "text": "basically increment or subtract\neight out of the board.",
    "start": "1530020",
    "end": "1536840"
  },
  {
    "text": "So I keep two\ndifferent variables. Now you see I increase the live\nrange because I added one more variable in there now.",
    "start": "1536840",
    "end": "1542200"
  },
  {
    "text": "Instead of keeping one, I\nhad to keep two variables. Luckily, I have enough\nregisters I can do that.",
    "start": "1542200",
    "end": "1547360"
  },
  {
    "text": "Might I do that, I can go into\na much, much tighter schedule.",
    "start": "1547360",
    "end": "1553880"
  },
  {
    "text": "OK, this is basically-- I mean, you can go and\nfigure out how I packed it, but I packed it in a way\nthat a lot of these things",
    "start": "1553880",
    "end": "1561830"
  },
  {
    "text": "can happen like in\na very tight form. OK, so-- AUDIENCE: So is this [INAUDIBLE]\nat least twice [INAUDIBLE]",
    "start": "1561830",
    "end": "1576840"
  },
  {
    "text": "executes a [INAUDIBLE]\nnumber of times? PROFESSOR: So what happens is if\nI am actually doing this deal,",
    "start": "1576840",
    "end": "1582780"
  },
  {
    "text": "I will actually have two loops. I will have the loop\nrun twice or four times unroll loop that\nactually goes only",
    "start": "1582780",
    "end": "1589655"
  },
  {
    "text": "[INAUDIBLE] at least\nthere's four iterations, and there will be another\noriginal loop left at the bottom to do the\nlast few iterations.",
    "start": "1589655",
    "end": "1596607"
  },
  {
    "text": "So I had to do that. I didn't show you that\ncode here because what matters is the main\nloop because that's going to run millions of times.",
    "start": "1596607",
    "end": "1602632"
  },
  {
    "text": "The other guy will\nrun a few times. So I don't care about that. The key thing is to get\nthe one because the reason",
    "start": "1602632",
    "end": "1608120"
  },
  {
    "text": "these programs run\nfor a long time-- because there's a\nloop probably run millions and billions of times\nagain and again and again.",
    "start": "1608120",
    "end": "1613950"
  },
  {
    "text": "If you get that millions of\ntimes running fast, [INAUDIBLE] in the last 10\niterations, who cares?",
    "start": "1613950",
    "end": "1620900"
  },
  {
    "text": "So I'm not showing the\nfull piece of code here. I'm just showing\nthat main thing.",
    "start": "1620900",
    "end": "1626773"
  },
  {
    "text": "So the next thing\nI want to get at is this interesting technique\ncalled software pipelining. I'm not going to\nexplain it fully.",
    "start": "1626773",
    "end": "1632580"
  },
  {
    "text": "I will give you the kind\nof intuition to show you what happens. So software pipeline\nsays why can't you",
    "start": "1632580",
    "end": "1643720"
  },
  {
    "start": "1638000",
    "end": "1638000"
  },
  {
    "text": "overlap multiple iterations\nso that all the slot-- because if you look at\none iteration, as you saw,",
    "start": "1643720",
    "end": "1649380"
  },
  {
    "text": "it was like very sparse. The slot of slots were empty. Why can't you all have multiple\niterations so nothing is empty?",
    "start": "1649380",
    "end": "1656190"
  },
  {
    "text": "So every cycle, many\nthings are going to happen? And then what happens is when\nyou do that, at some point,",
    "start": "1656190",
    "end": "1661980"
  },
  {
    "text": "you can find a steady\nstate window that says if you keep repeating\nthat, basically, you",
    "start": "1661980",
    "end": "1670878"
  },
  {
    "text": "can get the entire computation. Let me actually show\nyou the example. I mean, this is much easier to-- [INAUDIBLE] So here's the normal\nschedule that we had.",
    "start": "1670878",
    "end": "1678830"
  },
  {
    "text": "So you can't make it\nany compact in this one. So one thing-- but the nice\nthing about this schedule",
    "start": "1678830",
    "end": "1684140"
  },
  {
    "text": "is there's no dependence\nbetween iterations. So what you can do is\ncan pick up another copy",
    "start": "1684140",
    "end": "1689150"
  },
  {
    "text": "and figure out where\nyou can put that copy. So you can put that\ncopy a little bit off. So I can run the second\niteration kind of overlapping.",
    "start": "1689150",
    "end": "1696870"
  },
  {
    "text": "I move two in there and\nput it in there, OK? And then what I can\ndo is I can take another-- pick up another copy\nand move it too and put it",
    "start": "1696870",
    "end": "1704360"
  },
  {
    "text": "in there. Then I can pick up\nanother copy, move it two, put it in there, another copy,\nmove it two, put in there,",
    "start": "1704360",
    "end": "1709950"
  },
  {
    "text": "keep doing that. OK, so now what happens\nis multiple things have overlap with\nevery available space.",
    "start": "1709950",
    "end": "1716928"
  },
  {
    "text": "I just moved another copy\nand just plopped it in, another copy,\nplopped it in here. I basically have to have two\noff because in each line,",
    "start": "1716928",
    "end": "1726940"
  },
  {
    "text": "I actually had been using two\nslots in there, basically. And then what-- OK, last one.",
    "start": "1726940",
    "end": "1732230"
  },
  {
    "text": "Last one. So I keep moving that. So the interesting\nthing is this is great. Now does that mean you're going\nto unroll eight times and any--",
    "start": "1732230",
    "end": "1738730"
  },
  {
    "text": "of course, you can do by\nunrolling now six times and basically moving\nthings around. But then what happens\nis all the time unroll,",
    "start": "1738730",
    "end": "1745100"
  },
  {
    "text": "what happens is if\nI keep running this, there'll be a part\nat the beginning",
    "start": "1745100",
    "end": "1750490"
  },
  {
    "text": "where there's nothing\nmuch happened. And there's a part in the\nmiddle almost every iteration,",
    "start": "1750490",
    "end": "1755530"
  },
  {
    "text": "every cycle, a lot\nof things happen. And then part at the\nend again, again, you have to taper off\nof the [INAUDIBLE]..",
    "start": "1755530",
    "end": "1761080"
  },
  {
    "text": "So what happens is nothing\nmuch happened, a lot of work, nothing much happened. So if you keep doing that, at\nleast a large chunk of time",
    "start": "1761080",
    "end": "1768760"
  },
  {
    "text": "is basically at the\nbeginning and end. So we don't do that. You want to do\nthe beginning once and run the middle many,\nmany, many, many times",
    "start": "1768760",
    "end": "1776360"
  },
  {
    "text": "and want instead of doing that. So how do you do this? So that's what a\nsoftware pipeline is. Software pipeline does is\nif you look at this block,",
    "start": "1776360",
    "end": "1785870"
  },
  {
    "text": "so what it does,\nit says it's doing these two instruction of--",
    "start": "1785870",
    "end": "1791840"
  },
  {
    "text": " so actually, it's\ndoing two instruction",
    "start": "1791840",
    "end": "1797870"
  },
  {
    "text": "of the first iteration. ",
    "start": "1797870",
    "end": "1803685"
  },
  {
    "text": "If you look at\nthis, what happens is every instruction is\nin here of the computation",
    "start": "1803685",
    "end": "1809170"
  },
  {
    "text": "but at a different [INAUDIBLE]\ndifferent iteration. The computation has two moves,\nthree miles, two subtractions,",
    "start": "1809170",
    "end": "1817510"
  },
  {
    "text": "and also another-- ",
    "start": "1817510",
    "end": "1823300"
  },
  {
    "text": "it's moved and greater. So what it has is those miles\nare here, these three miles.",
    "start": "1823300",
    "end": "1829480"
  },
  {
    "text": "It's two this, one here. And these first\ntwo moves are here. ",
    "start": "1829480",
    "end": "1835870"
  },
  {
    "text": "So if you look at-- I had 1, 2, 3, 4, 5, 6,\n7, 8, 9, 10 11, I guess.",
    "start": "1835870",
    "end": "1843630"
  },
  {
    "text": "1, 2, 3, 4, 5, 6, 7, 8, 9, 10-- 10, I guess. 10 instructions. I have my 10\ninstructions in there.",
    "start": "1843630",
    "end": "1849809"
  },
  {
    "text": "So you do all the instructions\nat different iterations, and it's pretty compact\nbecause in two cycles,",
    "start": "1849810",
    "end": "1856799"
  },
  {
    "text": "you can do everything. And then if you\nkeep repeating that, so what happens is\nthe first iteration,",
    "start": "1856800",
    "end": "1862538"
  },
  {
    "text": "you do some instructions. And it's at a given time\nthe different iterations. So in a steady\nstate, you're doing",
    "start": "1862538",
    "end": "1868080"
  },
  {
    "text": "a lot of work for\nmultiple iterations. So what you had to do is\ntake this unit in there.",
    "start": "1868080",
    "end": "1873370"
  },
  {
    "text": "And so what happens is now there\nare four iterations overlapped. The thing about\nsoftware pipelining, you need a lot of registers\nbecause now you created",
    "start": "1873370",
    "end": "1879919"
  },
  {
    "text": "a huge amount of live ranges. So that means actually, you\nneed things like value of R11",
    "start": "1879920",
    "end": "1885690"
  },
  {
    "text": "doesn't change. But RAX now we had to keep four\ndifferent iterations of RAX. So I had to have four\ndifferent values of RAX",
    "start": "1885690",
    "end": "1891510"
  },
  {
    "text": "that each get incremental. Now instead of four,\nit's 16 every time. And I need to keep\nfour registers for R10",
    "start": "1891510",
    "end": "1898650"
  },
  {
    "text": "because I'm actually calculating\nfour values in there. And these registers get\nreused after four blocks.",
    "start": "1898650",
    "end": "1905460"
  },
  {
    "text": "So there's a lot of\ncomplicated ways of-- generating code here for\nthis one is not that trivial.",
    "start": "1905460",
    "end": "1911580"
  },
  {
    "text": "But the idea is basically,\nyou get to the steady state, and you keep running forever\nin a very tight steady state.",
    "start": "1911580",
    "end": "1916980"
  },
  {
    "text": "And then you ramp up\nsteady state and ramp down.",
    "start": "1916980",
    "end": "1922580"
  },
  {
    "text": "So this basically\ngives us a close to optimal use of resources. And then in here, like, if you\nlook at what happens in here,",
    "start": "1922580",
    "end": "1929840"
  },
  {
    "text": "now you can get two\ncycles per iteration. So you start from nine\ncycles, single loop.",
    "start": "1929840",
    "end": "1935930"
  },
  {
    "text": "You unroll it twice,\nget to eight cycles, and then actually did\nsome transformations, get to 4 and 1/2 cycles.",
    "start": "1935930",
    "end": "1941630"
  },
  {
    "text": "And now if you do\nsoftware pipelining, you basically shout\neverything down two cycles. AUDIENCE: Going\nback to the problem.",
    "start": "1941630",
    "end": "1948080"
  },
  {
    "text": "Can you go back-- yeah, this one? If you look at the\nfirst iteration through,",
    "start": "1948080",
    "end": "1954770"
  },
  {
    "text": "there's two [INAUDIBLE]. But in your section of 2,\nthere's only one [INAUDIBLE]..",
    "start": "1954770",
    "end": "1963370"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: I think\nwhat happened was--",
    "start": "1963370",
    "end": "1969230"
  },
  {
    "text": "yeah, I think there\nhas to be BG in here. I think that's what happened. See? AUDIENCE: Yeah.",
    "start": "1969230",
    "end": "1974745"
  },
  {
    "text": "PROFESSOR: So I moved\nthis block [INAUDIBLE] if I go here to this block.",
    "start": "1974745",
    "end": "1982205"
  },
  {
    "text": " Will I get it? Yeah. ",
    "start": "1982205",
    "end": "1988659"
  },
  {
    "text": "Yeah, good [INAUDIBLE]. I didn't start this state. I start steady sate too early.",
    "start": "1988660",
    "end": "1994095"
  },
  {
    "text": "I didn't wait until the\nreal steady state happened. Now in hear, you actually\nget the BG in here. Good.",
    "start": "1994095",
    "end": "1999970"
  },
  {
    "text": "Good catch. So OK. So OK. ",
    "start": "1999970",
    "end": "2007620"
  },
  {
    "text": "The thing about this is\nneed a lot of registers. So that is why actually we\ncannot really do software",
    "start": "2007620",
    "end": "2017500"
  },
  {
    "text": "pipelining [INAUDIBLE]. So like, Itanium\nhas 128 registers. It's clearly set up to\ndo software pipeline",
    "start": "2017500",
    "end": "2023440"
  },
  {
    "text": "because every iteration you keep\nbecause you had to keep copies of values in there.",
    "start": "2023440",
    "end": "2029260"
  },
  {
    "text": "And also, there are\nissues of dependencies.",
    "start": "2029260",
    "end": "2034930"
  },
  {
    "text": "We assume that I can just\nshow you multiple iterations next to each other. How about if next iteration\nuses the data produced",
    "start": "2034930",
    "end": "2043285"
  },
  {
    "text": "from the current iteration? For example, right\nnow, there was one i equals i plus four was-- each iteration was dependent.",
    "start": "2043285",
    "end": "2049520"
  },
  {
    "text": "Of course, we got rid of it\nby doing i equals i plus 16 and having four\ndifferent variables.",
    "start": "2049520",
    "end": "2055219"
  },
  {
    "text": "But how about if\nyou can't do that? There could be real things that\nthe dependence you can't really do that. And at that point, you have\na lot of other things happen.",
    "start": "2055219",
    "end": "2063219"
  },
  {
    "text": "And also, the worst thing\nis all the loads and stores for multiple iterations\nnow happen out of order.",
    "start": "2063219",
    "end": "2069790"
  },
  {
    "text": "That means, have you proven\nthat they can actually do that? So if you don't know\nwhether I am actually-- there are some dependence,\nyou can't actually.",
    "start": "2069790",
    "end": "2076419"
  },
  {
    "text": "So there are a lot of things\nthat can restrict this from happening.",
    "start": "2076420",
    "end": "2081925"
  },
  {
    "text": "And there are a lot of\ncode generation issues because thing is\nright now, you're doing these round robin things.",
    "start": "2081925",
    "end": "2088510"
  },
  {
    "text": "In one iteration, you\nare using one register. Next one, you have to\npass it to the next one.",
    "start": "2088510",
    "end": "2094489"
  },
  {
    "text": "You kind of have to\npass them around, and you have to kind of\npass the values found in some kind of\nround robin fashion.",
    "start": "2094489",
    "end": "2100036"
  },
  {
    "text": "So in fact, some of the\nmodern architectures has this concept of\nrotating registers. So what that means is\nthe first iteration,",
    "start": "2100037",
    "end": "2105880"
  },
  {
    "text": "I use R1, R2, R3,\nbecause otherwise, you",
    "start": "2105880",
    "end": "2111549"
  },
  {
    "text": "can't name it nice. And the next one, next\niteration, when you say R1, you actually got R2.",
    "start": "2111550",
    "end": "2116589"
  },
  {
    "text": "And when you actually refer\nto R2, you keep it R3. So actually, register\ngets rotated on you,",
    "start": "2116590",
    "end": "2122185"
  },
  {
    "text": "and it keeps rotating around. So at that point,\nyou can actually have very tight encoding\ninstead of really having",
    "start": "2122185",
    "end": "2128224"
  },
  {
    "text": "a very complex unrolled\nencoding because otherwise, you know to rotate and\nregister, you actually have to unroll the\nloop four times",
    "start": "2128225",
    "end": "2133287"
  },
  {
    "text": "and then have do all\nthose crazy things. So stuff like Itanium, if\nyou look at Itanium there, it provides a lot of facilities\nto do software pipelining.",
    "start": "2133287",
    "end": "2139930"
  },
  {
    "text": "So that's how\nmachine [INAUDIBLE] can really get to speed. OK, so that's kind\nof right now, if you",
    "start": "2139930",
    "end": "2146319"
  },
  {
    "text": "go to a state of\n[INAUDIBLE] conference, there'll be a bunch of talks\non software pipelining issues. That's kind of the\nstate of art in there.",
    "start": "2146320",
    "end": "2153140"
  },
  {
    "text": "Still, there are a lot of\ncool stuff going on in that. So next, I want to\ntouch on an issue.",
    "start": "2153140",
    "end": "2162120"
  },
  {
    "text": "Then I will just\nleave it as a problem because there's not really\na good solution, which is register allocation and\ninstruction scheduling.",
    "start": "2162120",
    "end": "2169360"
  },
  {
    "start": "2167000",
    "end": "2167000"
  },
  {
    "text": "So you have a choice. Do you want to register location\nbefore instruction scheduling? And if you do register location\nbefore instruction scheduling,",
    "start": "2169360",
    "end": "2177550"
  },
  {
    "text": "you have already chosen\nregisters What that means, it has limited\nnumber of registers, and you can move things\naround because normally,",
    "start": "2177550",
    "end": "2184320"
  },
  {
    "text": "in your individual [INAUDIBLE],,\nyou have infinite registers. So what that means\nis that if you are two different things\nwith infinite registers",
    "start": "2184320",
    "end": "2190295"
  },
  {
    "text": "in a temporary value,\nyou can move them around. But minute to allocate the\nsame register to that thing,",
    "start": "2190295",
    "end": "2196819"
  },
  {
    "text": "you can move them around. So you basically [INAUDIBLE]. So here is a good example.",
    "start": "2196820",
    "end": "2202380"
  },
  {
    "text": "So here's what--\nsee what happens. So what happens is I\nmove something into RAX,",
    "start": "2202380",
    "end": "2209240"
  },
  {
    "text": "and I add RAX into RBX. And then I move something\nelse again into RAX,",
    "start": "2209240",
    "end": "2214940"
  },
  {
    "text": "and I add that into RCS. So I use RAX as a\ntemporary twice.",
    "start": "2214940",
    "end": "2220910"
  },
  {
    "text": "So if you look at this graph,\nI get a dependence graph like this. The real dependency is\nbasically actually one to two,",
    "start": "2220910",
    "end": "2228019"
  },
  {
    "text": "there's a real true dependence. And three to four,\nthere's a true dependence because I load it and use it.",
    "start": "2228020",
    "end": "2233790"
  },
  {
    "text": "Everything else is a false\nanti-output dependence. ",
    "start": "2233790",
    "end": "2242480"
  },
  {
    "text": "Can you see that? OK, so you get a\nschedule like this.",
    "start": "2242480",
    "end": "2247970"
  },
  {
    "text": "OK, nothing nothing much can\nhappen because everything has to go sequentially. But what you realize\nis all these things",
    "start": "2247970",
    "end": "2254560"
  },
  {
    "text": "are there because I\nused the same variable. I have a big\nanti-dependence in here. How about if we just\nuse a different register",
    "start": "2254560",
    "end": "2260135"
  },
  {
    "text": "like we did before? And suddenly, all these\ndependencies vanish, and voila, I get a much,\nmuch tighter schedule.",
    "start": "2260135",
    "end": "2267120"
  },
  {
    "text": "So in some sense scheduling,\nbefore register location makes sense because I\nhave infinite registers.",
    "start": "2267120",
    "end": "2272618"
  },
  {
    "text": "I haven't even given something. So every time I there's\na different value, I give it a different register. And great, I don't get this\nanti-dependence effect.",
    "start": "2272618",
    "end": "2279333"
  },
  {
    "text": "I can actually do\na lot of things.  So what happens if you\ndo instruction scheduling",
    "start": "2279333",
    "end": "2288240"
  },
  {
    "text": "before register? So after you do\ninstruction schedule, you have this beautiful,\nnice, tight schedule. And you go to register and\nlook and say, oops, [INAUDIBLE]",
    "start": "2288240",
    "end": "2295770"
  },
  {
    "text": "register [INAUDIBLE]. And you have all this\nvery tight scheduling. You just had-- now you're\njust inserting this ugly",
    "start": "2295770",
    "end": "2301380"
  },
  {
    "text": "[INAUDIBLE] code in between. And so you're\nrunning very tightly. And darn, there's\nfive instructions",
    "start": "2301380",
    "end": "2306450"
  },
  {
    "text": "to [INAUDIBLE] very tightly. OK, so you got rid of this\nbeautifully done thing,",
    "start": "2306450",
    "end": "2311530"
  },
  {
    "text": "and you're changing the\nwhole schedule for the worse. So that doesn't work either. So if you look at right now,\nthere are enough papers today",
    "start": "2311530",
    "end": "2319119"
  },
  {
    "text": "that people haven't come\nup with a good solution because both of them\nare very hard problems. OK, solving-- I'm going to\ntalk about register allocation",
    "start": "2319120",
    "end": "2325890"
  },
  {
    "text": "next time. Solving each problem is they're\n[INAUDIBLE] complete problems with very difficult formulation.",
    "start": "2325890",
    "end": "2331890"
  },
  {
    "text": "Solving it by itself\nis hard enough. Combining both just makes\nit completely unwieldy. So nobody has a way\nof combining both.",
    "start": "2331890",
    "end": "2338172"
  },
  {
    "text": "So everybody has heuristics. So yeah, if you do\nthat, why don't you run scheduling again and da,\nda, da, da, back and forth.",
    "start": "2338173",
    "end": "2343560"
  },
  {
    "text": "Still, I mean, that's\nno good thing in here. So the final thing I\nwon't talk to you about",
    "start": "2343560",
    "end": "2349530"
  },
  {
    "text": "is hardware versus compiler. So you have this beautiful\nmore state of the art hardware",
    "start": "2349530",
    "end": "2356910"
  },
  {
    "text": "out there called\n[INAUDIBLE] 64 chip. It basically does many,\nmany interesting things.",
    "start": "2356910",
    "end": "2364550"
  },
  {
    "text": "It blew out of all\nthis execution. So what that means is if\nan instruction stalls,",
    "start": "2364550",
    "end": "2369869"
  },
  {
    "text": "it will go and try to go\nfrom the instruction stream and find something\nthat's supposed",
    "start": "2369870",
    "end": "2375600"
  },
  {
    "text": "to come afterwards and\nrun it before that. It actually does\nthat in hardware. So all the things we\nare doing in scheduling,",
    "start": "2375600",
    "end": "2382080"
  },
  {
    "text": "it tries to do it in hardware. And there's a good thing\nabout it because what it does is it can tolerate\nunpredictable latency.",
    "start": "2382080",
    "end": "2388390"
  },
  {
    "text": "So assume I keep\ngoing, doing something. And suddenly, I\nhad a cache miss. And suddenly, that entire\nthing, that dependent on that",
    "start": "2388390",
    "end": "2395370"
  },
  {
    "text": "just gets come to a screeching\nhalt. And instead of waiting, you can say, OK, wait a minute. Are there anything\nbehind it that",
    "start": "2395370",
    "end": "2400890"
  },
  {
    "text": "actually is not\ndepending on that I can bring forward and run? So it does that.",
    "start": "2400890",
    "end": "2406690"
  },
  {
    "text": "The bad problem is\nhardware scheduling is, since you are\ndoing hardware, you can't look beyond a\ncertain amount of instructions.",
    "start": "2406690",
    "end": "2414222"
  },
  {
    "text": "You have an instruction window,\na few hundred instructions. You can order, reorder\nthings around that. But if you are\ndoing compilers, you",
    "start": "2414222",
    "end": "2420190"
  },
  {
    "text": "can look for other iterations. Because you have compile time,\nyou had a lot more freedom",
    "start": "2420190",
    "end": "2425230"
  },
  {
    "text": "to do movement. So this provides some part,\nsome benefit of scheduling, but not everything.",
    "start": "2425230",
    "end": "2431150"
  },
  {
    "text": "So what that means is scheduling\nfor x8664 is not that important",
    "start": "2431150",
    "end": "2437500"
  },
  {
    "text": "because hardware will actually\ndo a good enough job for you. So it won't probably\ngive you that much",
    "start": "2437500",
    "end": "2442930"
  },
  {
    "text": "of a benefit of doing that. So another thing hardware\ndoes is register [INAUDIBLE]..",
    "start": "2442930",
    "end": "2450630"
  },
  {
    "text": "So the thing that-- what happens is there's\nanti-dependency. So assume I have\nregister in there,",
    "start": "2450630",
    "end": "2456580"
  },
  {
    "text": "and am waiting to write it.",
    "start": "2456580",
    "end": "2461710"
  },
  {
    "text": "I'm waiting to read\nit, and somebody else wants to write to\nthe same register. And right now, normally\nwhat happens is, oops, there's anti-dependence.",
    "start": "2461710",
    "end": "2467250"
  },
  {
    "text": "I just have to do it. But in modern hardware\nhas a difference between virtual registers\nand physical registers.",
    "start": "2467250",
    "end": "2473575"
  },
  {
    "text": "They have much more\nphysical registers. They say, OK, wait a minute. I know it's the same\nregister that you--",
    "start": "2473575",
    "end": "2480000"
  },
  {
    "text": "same exposed register,\nregister that you named.",
    "start": "2480000",
    "end": "2485280"
  },
  {
    "text": "It's RAX. But I can actually give it two\ndifferent registers internally and then basically let\nsomebody else actually load.",
    "start": "2485280",
    "end": "2491070"
  },
  {
    "text": "And I keep tab of all this\nrenaming inside in hardware.",
    "start": "2491070",
    "end": "2496500"
  },
  {
    "text": "So they can do that. But it cannot do this complex\ntransformation like what we did for this program like saying,\nOK, this i equals i plus 4,",
    "start": "2496500",
    "end": "2505095"
  },
  {
    "text": "and I can actually do i equals\ni plus 8 and j equals j plus 8. That type of\ntransformations it can't do because it's a\nlot more complicated.",
    "start": "2505095",
    "end": "2511140"
  },
  {
    "text": "You need a lot more analysis. For simple renaming,\nit might do. But hard-- so still, the\ncompiler is important.",
    "start": "2511140",
    "end": "2517130"
  },
  {
    "text": " So the key thing\nis in super scaler,",
    "start": "2517130",
    "end": "2522460"
  },
  {
    "text": "it's hard when compiling\nscheduling works hand in hand. ",
    "start": "2522460",
    "end": "2528430"
  },
  {
    "start": "2525000",
    "end": "2525000"
  },
  {
    "text": "One thing hardware can\ndo is it can easily reduce the burden when it's not\npredictable by the compiler.",
    "start": "2528430",
    "end": "2533740"
  },
  {
    "text": "So if you have-- for example, if\nyou have memory lock reference, you might not know whether\nyou get a cache hit or miss.",
    "start": "2533740",
    "end": "2538942"
  },
  {
    "text": "You probably will schedule\nassuming it's a cache hit. But in a case of\ncache miss, hardware will help you around in there.",
    "start": "2538942",
    "end": "2546310"
  },
  {
    "text": "And compiler can still\nenhance performance by looking at much\nlarger regions",
    "start": "2546310",
    "end": "2551650"
  },
  {
    "text": "and priming hardware\nin a way that it has a lot of things you can access.",
    "start": "2551650",
    "end": "2560260"
  },
  {
    "text": "And especially when you\nhave actually hardware that doesn't have this kind\nof super scale, that doesn't do renaming and stuff like,\nthat things like the Itanium",
    "start": "2560260",
    "end": "2567610"
  },
  {
    "text": "machines or DSP, this scheduling\nbecomes a lot more important. So the good news for you guys\nis still things like scheduling",
    "start": "2567610",
    "end": "2575319"
  },
  {
    "text": "is very important for Itanium. The bad news is because hardware\nis doing also part of it,",
    "start": "2575320",
    "end": "2582670"
  },
  {
    "text": "it's very hard to\nunderstand and figure out implications of things you\ndo because the hardware is",
    "start": "2582670",
    "end": "2590890"
  },
  {
    "text": "complicated. The second thing\nis Intel is not-- and AMD is not even publishing\nall the algorithms they do.",
    "start": "2590890",
    "end": "2596480"
  },
  {
    "text": "OK, so inside this black box,\nthere are things that happened. So if the black box does\nit, you don't really",
    "start": "2596480",
    "end": "2603560"
  },
  {
    "text": "have to do the compiler. You have to figure\nout the things that black box\ndoesn't do and get the compiler to do it for you.",
    "start": "2603560",
    "end": "2609023"
  },
  {
    "text": "And so because of\nthat, if you say I am going to rename registers,\nyou spend all this time rename. And you run and\nsay, wait a minute.",
    "start": "2609023",
    "end": "2615120"
  },
  {
    "text": "That's no difference\nbecause, ah, the hardware is doing that for you\nand you don't know that. So that's what it makes\noptimizing for this box hard.",
    "start": "2615120",
    "end": "2622170"
  },
  {
    "text": "So that goes into the next\nthing I was going to talk about.",
    "start": "2622170",
    "end": "2627530"
  },
  {
    "text": "So one thing we were going\nto do for this next project segment is we gave you\none of things to do,",
    "start": "2627530",
    "end": "2633970"
  },
  {
    "text": "register location. You have to register\nlocation in the segment. But then we'll open\nthe floor to you.",
    "start": "2633970",
    "end": "2639130"
  },
  {
    "start": "2634000",
    "end": "2634000"
  },
  {
    "text": "So what [INAUDIBLE]\nis going to do is he's going to supply with\ntwo or three or four loop plays, a few nice loops.",
    "start": "2639130",
    "end": "2646230"
  },
  {
    "text": "That would be probably\nsomething very close to that will\nhappen in the program that we go for the derby.",
    "start": "2646230",
    "end": "2652470"
  },
  {
    "text": "OK, so it's your\nmission is to figure out how to run those loops faster.",
    "start": "2652470",
    "end": "2658480"
  },
  {
    "text": "So instead of saying right these\nthree or four optimizations, you can go and figure\nout, OK, what can you",
    "start": "2658480",
    "end": "2664000"
  },
  {
    "text": "do to get those\nloops to run faster? And people can go\ncrazy on that, and I",
    "start": "2664000",
    "end": "2670680"
  },
  {
    "text": "don't restrict-- only\nthing restrictions I would say is you better\nexplain why what you did",
    "start": "2670680",
    "end": "2676290"
  },
  {
    "text": "was general. So somebody came up with the\nidea saying, wait a minute. If there's no input,\nfor some benchmark,",
    "start": "2676290",
    "end": "2681940"
  },
  {
    "text": "I am going to go partially\nevaluate everything and compile the program down to five\nprint test statements.",
    "start": "2681940",
    "end": "2688710"
  },
  {
    "text": "It would be hard to\nexplain that that would be a general technique. So instead of saying, look,\nI found this thing that",
    "start": "2688710",
    "end": "2694502"
  },
  {
    "text": "has the functional\n[INAUDIBLE],, somebody says it's a rand function. I can actually use\na random function. I found this random function.",
    "start": "2694502",
    "end": "2699654"
  },
  {
    "text": "I know what happened. I actually generated\nthis [INAUDIBLE].. So you have to be creative\ntrying to explain.",
    "start": "2699655",
    "end": "2704983"
  },
  {
    "text": "I mean, I'll tell you. Some people in the\ncompile community has gone to very\ncreative distances,",
    "start": "2704983",
    "end": "2711160"
  },
  {
    "text": "for example, because\na lot of times, at least in good\nold days, people bought machines for how\nfast the machines ran.",
    "start": "2711160",
    "end": "2718710"
  },
  {
    "text": "So there was this-- you\nget a new architecture, and how fast the machine\nran was very important. So the way you measure that\nis by using benchmarks.",
    "start": "2718710",
    "end": "2726360"
  },
  {
    "text": "So for this benchmark\nsuite, I have a number which is faster than new machine. So getting benchmarks\nfast was very important.",
    "start": "2726360",
    "end": "2732880"
  },
  {
    "text": "So this one group realizes\nthis one benchmark has this optimization, which,\nmost of the time,",
    "start": "2732880",
    "end": "2738922"
  },
  {
    "text": "you can't do it because you\ncannot really prove that it's correct. But for that\nbenchmark, it worked.",
    "start": "2738923",
    "end": "2744750"
  },
  {
    "text": "So they said, Dan, I want to\ndo that for that benchmark, but I can't do it anywhere else. So how do you do that?",
    "start": "2744750",
    "end": "2750317"
  },
  {
    "text": "So somebody said, wait a minute. That benchmark has\nto come in that says written by Jack [INAUDIBLE].",
    "start": "2750317",
    "end": "2755849"
  },
  {
    "text": "Said, a-ha, I will\ncheck for that comment, and if there's a comment\nappears saying written by Jack [INAUDIBLE],, I will\nturn on that optimization",
    "start": "2755850",
    "end": "2762780"
  },
  {
    "text": "and apply there. So everybody's\ntrying to figure out, how did this program\nrun this fast?",
    "start": "2762780",
    "end": "2768090"
  },
  {
    "text": "And there's no way\nyou can prove that. They can fill an output code\nand then figure out, OK, yeah",
    "start": "2768090",
    "end": "2773640"
  },
  {
    "text": "that's running that thing. But how can you prove that this\ntransformation can be done? Because it's very hard. So they're trying to figure out,\ndid they do something amazing?",
    "start": "2773640",
    "end": "2780945"
  },
  {
    "text": "And somebody has\njust by accident realized if you actually\neliminate that comment, that optimization didn't happen.",
    "start": "2780945",
    "end": "2786400"
  },
  {
    "text": "And so they realized-- so they actually did\nsomething really sneaky. And then these days,\npeople are a lot more,",
    "start": "2786400",
    "end": "2793980"
  },
  {
    "text": "in these communities\nthat do benchmarking, have a lot of rules saying\nyou can't do things like that.",
    "start": "2793980",
    "end": "2799986"
  },
  {
    "text": "So I don't want\nthat kind of things. But actually, I gave some hints,\nwhat kind of things you can do.",
    "start": "2799986",
    "end": "2807430"
  },
  {
    "text": "So for example,\none thing to follow is a really good use\nsomebody [INAUDIBLE]..",
    "start": "2807430",
    "end": "2812820"
  },
  {
    "text": "So GCC probably has a\nreally good compiler, or Intel compiler is a\nreally good compiler. So one thing you can do\nis say, OK, wait a minute.",
    "start": "2812820",
    "end": "2819600"
  },
  {
    "text": "If I have a loop nest,\nif I write it in C, I write it in GCC, what\nwould they generate? They are smart.",
    "start": "2819600",
    "end": "2825350"
  },
  {
    "text": "They have spent more than a week\nor more than two days you guys had actually trying to\ncome up with the code. And say, OK, wait a minute.",
    "start": "2825350",
    "end": "2831099"
  },
  {
    "text": "So what does that-- so\nsome code they generate might be very weird\nto trade, and you can try to understand and say,\nOK, how did they get there?",
    "start": "2831100",
    "end": "2837647"
  },
  {
    "text": "And that might give you\nhints for different things what to do. So just go with a little\nbit of exploration",
    "start": "2837647",
    "end": "2843510"
  },
  {
    "text": "and try to figure out a\nfew things and do that. And then we give you\nthat freedom in this one.",
    "start": "2843510",
    "end": "2848550"
  },
  {
    "text": "So it's something people\nspend lifetimes doing, these kind of things. But see how much you can\npush within a few weeks.",
    "start": "2848550",
    "end": "2857369"
  },
  {
    "text": "And what we really like to do\nis we're in your submission to explain what you\nwent about how did you",
    "start": "2857370",
    "end": "2862890"
  },
  {
    "text": "select that optimization. So you'll get points for\ndoing the optimization,",
    "start": "2862890",
    "end": "2867990"
  },
  {
    "text": "but you'll get also\npoints for saying, OK, this is my\nprocess of selecting this to be a good optimization.",
    "start": "2867990",
    "end": "2873720"
  },
  {
    "text": "And the best, if you\nactually figure out and did some good things, like,\nyou actually could probably get good results in the derby.",
    "start": "2873720",
    "end": "2880560"
  },
  {
    "text": "So for derby, what we're going\nto do is 12 hours before, we will release\nthe piece of code.",
    "start": "2880560",
    "end": "2886210"
  },
  {
    "text": "So this is a very tricky thing. Beforehand, we used to\nrelease it at the derby",
    "start": "2886210",
    "end": "2892290"
  },
  {
    "text": "before the derby got started. Problem with that is a\nlot of people's compilers are so finicky, they can't get\nall the optimizations working.",
    "start": "2892290",
    "end": "2898619"
  },
  {
    "text": "And half the class\nbasically get-- because these compilers\nare written in a few days",
    "start": "2898620",
    "end": "2903930"
  },
  {
    "text": "and doesn't work on new code. So if you released\nthree days before, you will be writing\na compiler that's",
    "start": "2903930",
    "end": "2911085"
  },
  {
    "text": "going to, at the end of\nthe day, produce good with three printf statements\nand that will only work for that program. We don't want that either.",
    "start": "2911085",
    "end": "2916390"
  },
  {
    "text": "So we want to be able to\ndo something in the middle. So we'll release it\n12 hours in advance so you'll have enough time\nto debug your compiler",
    "start": "2916390",
    "end": "2922440"
  },
  {
    "text": "but hopefully not enough\ntime to come and do some very specific new\noptimizations to get that fast.",
    "start": "2922440",
    "end": "2929610"
  },
  {
    "text": "And also, the other thing\nis if you win the derby, you have to explain\nto [INAUDIBLE] what optimization you did.",
    "start": "2929610",
    "end": "2934800"
  },
  {
    "text": "You can't say, OK,\nI figure it out. I know the answer, and I\njust I just looked at it and put some printf\nstatements to get the answer.",
    "start": "2934800",
    "end": "2940592"
  },
  {
    "text": "That doesn't work. So OK, with that,\ntomorrow we will",
    "start": "2940592",
    "end": "2946895"
  },
  {
    "text": "cover register [INAUDIBLE]. ",
    "start": "2946895",
    "end": "2956000"
  }
]