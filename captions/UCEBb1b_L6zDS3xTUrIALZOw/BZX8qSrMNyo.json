[
  {
    "start": "0",
    "end": "890"
  },
  {
    "text": "The truth table we've been using as an example\ndescribes a very useful",
    "start": "890",
    "end": "4720"
  },
  {
    "text": "combinational device called a 2-to-1 multiplexer.",
    "start": "4720",
    "end": "8090"
  },
  {
    "text": "A multiplexer, or MUX for short, selects one\nof its two input values",
    "start": "8090",
    "end": "13080"
  },
  {
    "text": "as the output value.",
    "start": "13080",
    "end": "14870"
  },
  {
    "text": "When the select input, marked with an S in\nthe diagram, is 0, the",
    "start": "14870",
    "end": "19189"
  },
  {
    "text": "value on data input D0 becomes the value of\nthe Y output.",
    "start": "19189",
    "end": "23769"
  },
  {
    "text": "When S is 1, the value of data input D1 is\nselected as the Y output",
    "start": "23769",
    "end": "28220"
  },
  {
    "text": "value.",
    "start": "28220",
    "end": "30380"
  },
  {
    "text": "MUXes come in many sizes, depending on the\nnumber of select inputs.",
    "start": "30380",
    "end": "34430"
  },
  {
    "text": "A MUX with K select inputs will choose between\nthe values of 2^K data",
    "start": "34430",
    "end": "39120"
  },
  {
    "text": "inputs.",
    "start": "39120",
    "end": "40120"
  },
  {
    "text": "For example, here's a 4-to-1 multiplexer with\n4 data inputs and 2",
    "start": "40120",
    "end": "44850"
  },
  {
    "text": "select inputs.",
    "start": "44850",
    "end": "46768"
  },
  {
    "text": "Larger MUXes can be built from a tree of 2-to-1\nMUXes, as shown here.",
    "start": "46769",
    "end": "53060"
  },
  {
    "text": "Why are MUXes interesting?",
    "start": "53060",
    "end": "55519"
  },
  {
    "text": "One answer is that they provide a very elegant\nand general way of",
    "start": "55519",
    "end": "58980"
  },
  {
    "text": "implementing a logic function.",
    "start": "58980",
    "end": "61289"
  },
  {
    "text": "Consider the 8-to-1 MUX shown on the right.",
    "start": "61289",
    "end": "64360"
  },
  {
    "text": "The 3 inputs — A, B, and CIN — are used\nas the three select signals",
    "start": "64360",
    "end": "68890"
  },
  {
    "text": "for the MUX.",
    "start": "68890",
    "end": "69890"
  },
  {
    "text": "Think of the three inputs as forming a 3-bit\nbinary number.",
    "start": "69890",
    "end": "73810"
  },
  {
    "text": "For example, when they're all 0, the MUX will\nselect data input 0, and",
    "start": "73810",
    "end": "78360"
  },
  {
    "text": "when they're all 1, the MUX will select data\ninput 7, and so on.",
    "start": "78360",
    "end": "83908"
  },
  {
    "text": "How does make it easy to implement the logic\nfunction shown in the",
    "start": "83908",
    "end": "86960"
  },
  {
    "text": "truth table?",
    "start": "86960",
    "end": "87970"
  },
  {
    "text": "Well, we'll wire up the data inputs of the\nMUX to the constant values",
    "start": "87970",
    "end": "92750"
  },
  {
    "text": "shown in the output column in the truth table.",
    "start": "92750",
    "end": "96539"
  },
  {
    "text": "The values on the A, B and CIN inputs will\ncause the MUX to select the",
    "start": "96539",
    "end": "100420"
  },
  {
    "text": "appropriate constant on the data inputs as\nthe value for the COUT output.",
    "start": "100420",
    "end": "106600"
  },
  {
    "text": "If later on we change the truth table, we\ndon't have to redesign some",
    "start": "106600",
    "end": "109880"
  },
  {
    "text": "complicated sum-of-products circuit, we simply\nhave to change the",
    "start": "109890",
    "end": "113360"
  },
  {
    "text": "constants on the data inputs.",
    "start": "113360",
    "end": "116000"
  },
  {
    "text": "Think of the MUX as a table-lookup device\nthat can be reprogrammed to",
    "start": "116000",
    "end": "119600"
  },
  {
    "text": "implement, in this case, any three-input equation.",
    "start": "119600",
    "end": "123789"
  },
  {
    "text": "This sort of circuit can be used to create\nvarious forms of",
    "start": "123789",
    "end": "126820"
  },
  {
    "text": "programmable logic, where the functionality\nof the integrated circuit",
    "start": "126820",
    "end": "130138"
  },
  {
    "text": "isn't determined at the time of manufacture,\nbut is set during a",
    "start": "130139",
    "end": "133950"
  },
  {
    "text": "programming step performed by the user at\nsome later time.",
    "start": "133950",
    "end": "138180"
  },
  {
    "text": "Modern programmable logic circuits can be\nprogrammed to replace",
    "start": "138180",
    "end": "141209"
  },
  {
    "text": "millions of logic gates.",
    "start": "141209",
    "end": "143570"
  },
  {
    "text": "Very handy for prototyping digital systems\nbefore committing to the",
    "start": "143570",
    "end": "146660"
  },
  {
    "text": "expense of a custom integrated circuit implementation.",
    "start": "146660",
    "end": "152640"
  },
  {
    "text": "So MUXes with N select lines are effectively\nstand-ins for N-input",
    "start": "152640",
    "end": "157210"
  },
  {
    "text": "logic circuits.",
    "start": "157210",
    "end": "158959"
  },
  {
    "text": "Such a MUX would have 2^N data inputs.",
    "start": "158959",
    "end": "162540"
  },
  {
    "text": "They're useful for N up to 5 or 6, but for\nfunctions with more inputs,",
    "start": "162540",
    "end": "167159"
  },
  {
    "text": "the exponential growth in circuit size makes\nthem impractical.",
    "start": "167160",
    "end": "171250"
  },
  {
    "text": "Not surprisingly, MUXes are universal as shown\nby these MUX-based",
    "start": "171250",
    "end": "174920"
  },
  {
    "text": "implementations for the sum-of-products building\nblocks.",
    "start": "174920",
    "end": "178989"
  },
  {
    "text": "There is some speculation that in molecular-scale\nlogic technologies,",
    "start": "178989",
    "end": "182959"
  },
  {
    "text": "MUXes may be the natural gate, so it's good\nto know they can be used",
    "start": "182959",
    "end": "186440"
  },
  {
    "text": "to implement any logic function.",
    "start": "186440",
    "end": "188709"
  },
  {
    "text": "Even XOR is simple to implement using only\n2-to-1 MUXes!",
    "start": "188709",
    "end": "193920"
  }
]