[
  {
    "start": "0",
    "end": "20000"
  },
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6360"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation, or\nview additional materials",
    "start": "6360",
    "end": "13330"
  },
  {
    "text": "from 100 of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13330",
    "end": "21150"
  },
  {
    "start": "20000",
    "end": "305000"
  },
  {
    "text": "LING REN: Everyone,\ntoday we're going to look at dynamic programming again. ",
    "start": "21150",
    "end": "29000"
  },
  {
    "text": "So I think I have\nmentioned several times, so you should all\nknow it by heart now,",
    "start": "29000",
    "end": "34590"
  },
  {
    "text": "the dynamic programming,\nits main idea is divide the problem\ninto subproblems and reuse",
    "start": "34590",
    "end": "46460"
  },
  {
    "text": "the results of the problems\nyou already solved. Right? And, of course, in 6.046 we\nalways care about the runtime.",
    "start": "46460",
    "end": "54010"
  },
  {
    "text": " So those are the two big\nthemes for dynamic programming.",
    "start": "54010",
    "end": "63719"
  },
  {
    "text": " Now, let's start with\na warm-up example.",
    "start": "63720",
    "end": "69070"
  },
  {
    "text": "It's extremely simple. Let's say we have a grid, and\nthere's a robot from, say,",
    "start": "69070",
    "end": "80730"
  },
  {
    "text": "coordinate 1,1 and it wants\nto go to coordinate m,n.",
    "start": "80730",
    "end": "86980"
  },
  {
    "text": "So at every step, it can\nonly either take a step up, or take a step on the right.",
    "start": "86980",
    "end": "93160"
  },
  {
    "text": "So how many distinct paths are\nthere for the robot to take? ",
    "start": "93160",
    "end": "106330"
  },
  {
    "text": "Is the question clear? So we have a robot\nat coordinate 1,1.",
    "start": "106330",
    "end": "111870"
  },
  {
    "text": "It wants to go to\ncoordinate m,n. And every step, it can\neither take a step up,",
    "start": "111870",
    "end": "117409"
  },
  {
    "text": "or take a step to the right. How many distinct\npath are there that can take the robot\nto its destination?",
    "start": "117410",
    "end": "124153"
  },
  {
    "start": "124153",
    "end": "130179"
  },
  {
    "text": "Any ideas how to solve that? ",
    "start": "130180",
    "end": "139623"
  },
  {
    "text": "Go ahead. AUDIENCE: So, we define\nsubproblems as the number of distinct paths from\nsome point x,y to m,n.",
    "start": "139623",
    "end": "150640"
  },
  {
    "text": "Then the number of distinct\npaths from some point is the number of paths if you go\nup if you're allowed to go up,",
    "start": "150640",
    "end": "157989"
  },
  {
    "text": "plus the number of\npaths if you go right if you're allowed to go right. So if you were on the\nedge, [INAUDIBLE].",
    "start": "157990",
    "end": "164879"
  },
  {
    "text": "LING REN: Yup, yup. Does everyone got that? So, it's very simple. So, I know I have only one\nway to get to these points.",
    "start": "164880",
    "end": "173590"
  },
  {
    "text": "I need to go all the way right. And only one way to\nget to these points. I need to go all the way up.",
    "start": "173590",
    "end": "179560"
  },
  {
    "text": "So for all the\nintermediate nodes, my number of choices are--\nis this board moving?",
    "start": "179560",
    "end": "187220"
  },
  {
    "text": "Are just the number of distinct\npaths I can come from my left,",
    "start": "187220",
    "end": "192490"
  },
  {
    "text": "plus the number of distinct\npath I can come from bottom. And then I can go in. For every node, I'll just take\na sum between the two numbers",
    "start": "192490",
    "end": "200500"
  },
  {
    "text": "on my left and on my bottom. And go from there.",
    "start": "200500",
    "end": "205900"
  },
  {
    "text": "OK. Is that clear? ",
    "start": "205900",
    "end": "211959"
  },
  {
    "text": "So this example is\nvery simple, but it does illustrate the point of\ndynamic programming very well.",
    "start": "211960",
    "end": "218125"
  },
  {
    "text": " You solve subproblems, and ask\nhow many distinct path can I",
    "start": "218125",
    "end": "225210"
  },
  {
    "text": "come here, and you reuse\nthe results of, for example, this subproblem because\nyou are using it to compute",
    "start": "225210",
    "end": "234200"
  },
  {
    "text": "this number and that number. If you don't do that, if\nyou don't memorize and reuse",
    "start": "234200",
    "end": "242439"
  },
  {
    "text": "the results, then your\nruntime will be worse. So what's the runtime of that? ",
    "start": "242440",
    "end": "256509"
  },
  {
    "text": "Speak up. AUDIENCE: [INAUDIBLE] LING REN: It's just m times n.",
    "start": "256510",
    "end": "264100"
  },
  {
    "text": "Why? Because I have this many\nunique sub problems. One at each point, and I'm just\ntaking the sum of two numbers",
    "start": "264100",
    "end": "273580"
  },
  {
    "text": "at each subproblem, so\nit takes me constant time to merge the results from my\nsubproblems to get my problem.",
    "start": "273580",
    "end": "281490"
  },
  {
    "text": "So to analyze\nruntime, usually we ask the question how many\nunique problems do I have.",
    "start": "281490",
    "end": "291010"
  },
  {
    "text": "And what's the\namount of merge work I have to do at every step? ",
    "start": "291010",
    "end": "304542"
  },
  {
    "text": "That's the toy example. ",
    "start": "304542",
    "end": "309685"
  },
  {
    "start": "305000",
    "end": "860000"
  },
  {
    "text": "Now let's look at some\nmore complicated examples. ",
    "start": "309685",
    "end": "315660"
  },
  {
    "text": "Our first one is\ncalled make change. ",
    "start": "315660",
    "end": "321150"
  },
  {
    "text": "As its name suggests, we\nhave a bunch of coins. s1, s2, all the way to, say, sm.",
    "start": "321150",
    "end": "331710"
  },
  {
    "text": "So each coin has some values,\nlike 1 cent, 5 cent, 10 cent. We're going to make change\nfor a total of n cents,",
    "start": "331710",
    "end": "339500"
  },
  {
    "text": "and ask what's the\nminimum number of coins do I need to make\nchange of n cents.",
    "start": "339500",
    "end": "347715"
  },
  {
    "start": "347715",
    "end": "353440"
  },
  {
    "text": "So to guarantee that we can\nalways make this change, we'll set s1 to be 1.",
    "start": "353440",
    "end": "358990"
  },
  {
    "text": "Otherwise, there's a chance\nthat the problem is unsolvable. ",
    "start": "358990",
    "end": "368700"
  },
  {
    "text": "Any ideas? Is the problem clear? STUDENT: How do\nyou find s1 again? Or si?",
    "start": "368700",
    "end": "375800"
  },
  {
    "text": "LING REN: What, these numbers? They are inputs. They are also inputs.",
    "start": "375800",
    "end": "380870"
  },
  {
    "text": "It could be 1 cent,\n5 cent, 10 cent. Or 3 cent, 7 cent. Though the smallest\none is always 1.",
    "start": "380870",
    "end": "387170"
  },
  {
    "text": " OK. I need to find a\ncombination of them.",
    "start": "387170",
    "end": "392461"
  },
  {
    "text": "For each of them, I have\nan infinite number of them. So I can find two of these,\nthree of that, five of that,",
    "start": "392461",
    "end": "399229"
  },
  {
    "text": "such that their sum is n. Is the problem clear? ",
    "start": "399230",
    "end": "408365"
  },
  {
    "text": "OK. Any ideas how to solve that? ",
    "start": "408365",
    "end": "415995"
  },
  {
    "text": "So let's just use a naive\nor very straightforward algorithms. ",
    "start": "415995",
    "end": "432440"
  },
  {
    "text": "Go ahead. AUDIENCE: You pick one, and\nthen you do mc of n minus that.",
    "start": "432440",
    "end": "438640"
  },
  {
    "text": "LING REN: OK, great. Yeah, let's just do\nexhaustive search. Let's pick si.",
    "start": "438640",
    "end": "447220"
  },
  {
    "text": "If I pick this coin,\nthen my subproblem becomes n minus the coin value.",
    "start": "447220",
    "end": "455220"
  },
  {
    "text": "And of course, I\nuse the one coin. That's si. So then I think the min of this\nfor all the i's, and that's",
    "start": "455220",
    "end": "470180"
  },
  {
    "text": "the solution.  So far so good? ",
    "start": "470180",
    "end": "482639"
  },
  {
    "text": "OK. So what's the runtime\nof this algorithm? ",
    "start": "482640",
    "end": "495968"
  },
  {
    "text": "If it's not immediately\nobvious, then we ask how many unique\nsubproblems are there.",
    "start": "495968",
    "end": "503620"
  },
  {
    "text": "And how much work do I have to\ndo to go from my subproblems to my original problem?",
    "start": "503620",
    "end": "510140"
  },
  {
    "text": " So how many\nsubproblem are there? ",
    "start": "510140",
    "end": "529670"
  },
  {
    "text": "So to be clear, for\nthis one, we have to call this\nrecursive call again.",
    "start": "529670",
    "end": "534730"
  },
  {
    "text": "n minus si, probably minus sj. ",
    "start": "534730",
    "end": "545300"
  },
  {
    "text": "And if you cannot compute how\nmany subproblems are there, let's just give a bound. ",
    "start": "545300",
    "end": "563360"
  },
  {
    "text": "Any ideas? ",
    "start": "563360",
    "end": "571320"
  },
  {
    "text": "John, right? AUDIENCE: I'm not\nsure there would be more than n subproblems,\nbecause the smallest",
    "start": "571320",
    "end": "579657"
  },
  {
    "text": "amount we can subtract\nfrom the original is 1. And if we keep\nsubtracting 1 repeatedly,",
    "start": "579658",
    "end": "586978"
  },
  {
    "text": "we get n subproblems,\nand that will cover everything-- that subproblem. LING REN: Yeah, correct. So this may not be\na very tight bound,",
    "start": "586978",
    "end": "595260"
  },
  {
    "text": "but we know we cannot\nhave more than this number of subproblems. Actually, I don't need to\neven put the order there.",
    "start": "595260",
    "end": "604300"
  },
  {
    "text": "I know we can have no\nmore than n subproblems. They're just make change of n, n\nminus 1, n minus 2, all the way",
    "start": "604300",
    "end": "610649"
  },
  {
    "text": "to make change 1. And actually, this\nbound is pretty",
    "start": "610650",
    "end": "615960"
  },
  {
    "text": "tight, because we set\nour smallest coin is 1, so we won't make a recursive\ncall to make change n minus 1,",
    "start": "615960",
    "end": "623580"
  },
  {
    "text": "right? If I pick the 1 coin,\nthe 1 cent coin first.",
    "start": "623580",
    "end": "629470"
  },
  {
    "text": "And then from there, I will\npick a 1 cent coin again. That gives me a\nsubproblem with n minus 2.",
    "start": "629470",
    "end": "635850"
  },
  {
    "text": "So indeed, I will encounter\nall the n subproblems. ",
    "start": "635850",
    "end": "642120"
  },
  {
    "text": "OK, so having realized\nthat, how much work do I have to do to go\nfrom here to there?",
    "start": "642120",
    "end": "648315"
  },
  {
    "start": "648315",
    "end": "656316"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] LING REN: Correct. Because I'm taking the\nmin of how many terms?",
    "start": "656316",
    "end": "662430"
  },
  {
    "text": "m terms. So that's our runtime. ",
    "start": "662430",
    "end": "678390"
  },
  {
    "text": "Any questions so far?  If not, let me\ntake a digression.",
    "start": "678390",
    "end": "685089"
  },
  {
    "text": "So, make change, this problem. If you think about it, it's\nvery similar to knapsack.",
    "start": "685090",
    "end": "691335"
  },
  {
    "text": " Has anyone not heard\nof this problem?",
    "start": "691335",
    "end": "698300"
  },
  {
    "text": "Knapsack means you\nhave a bunch of items. You want to pack\nthese into a bag, and the bag has a certain size.",
    "start": "698300",
    "end": "705880"
  },
  {
    "text": "So each item has\na certain value, and you want to pack the items\nthat have the largest combined",
    "start": "705880",
    "end": "713050"
  },
  {
    "text": "value into your bag. So, why are they similar?",
    "start": "713050",
    "end": "721415"
  },
  {
    "text": " So in some sense, n is our size.",
    "start": "721415",
    "end": "727070"
  },
  {
    "text": "We want to pick a bunch of\ncoins to make the size n. And each coin here actually\nhas a negative value,",
    "start": "727070",
    "end": "734720"
  },
  {
    "text": "because we want to\npick the min of it. If you do that, then this\nproblem is exactly knapsack.",
    "start": "734720",
    "end": "740344"
  },
  {
    "text": "And knapsack is NP-complete. ",
    "start": "740344",
    "end": "746080"
  },
  {
    "text": "That means we don't know a\npolynomial solution to it yet.",
    "start": "746080",
    "end": "752130"
  },
  {
    "text": "However, we just found one.  Our input is, m stuff and n.",
    "start": "752130",
    "end": "759840"
  },
  {
    "text": "Our solution is polynomial\nto m, and polynomial to n. ",
    "start": "759840",
    "end": "765865"
  },
  {
    "text": "If this is true, then I have\nfound the polynomial solution",
    "start": "765866",
    "end": "771040"
  },
  {
    "text": "to one NP problem. So P equals NP. SO we should all be getting\nTuring award for that.",
    "start": "771040",
    "end": "778292"
  },
  {
    "text": "So clearly something's wrong.  But there's no problem\nwith this solution.",
    "start": "778292",
    "end": "787000"
  },
  {
    "text": "This covers all the cases. And our analysis is\ndefinitely correct. ",
    "start": "787000",
    "end": "798839"
  },
  {
    "text": "So does anyone get\nwhat I'm asking? So what's the\ncontradiction here?",
    "start": "798840",
    "end": "804620"
  },
  {
    "text": " I will probably\ndiscuss this later,",
    "start": "804620",
    "end": "812490"
  },
  {
    "text": "in later lectures when we get\nto complexity or reduction. But to give a short\nanswer, the problem",
    "start": "812490",
    "end": "819500"
  },
  {
    "text": "is that when we say the input\nis n, its size is not n.",
    "start": "819500",
    "end": "826200"
  },
  {
    "text": "So I only need log n this\nto represent this input.",
    "start": "826200",
    "end": "834680"
  },
  {
    "text": "Make sense? Therefore, for log n length\ninput, my runtime is n.",
    "start": "834680",
    "end": "841040"
  },
  {
    "text": "That means my runtime\nis exponential. It's not polynomial. ",
    "start": "841040",
    "end": "846940"
  },
  {
    "text": "OK. Now that's the end\nof the digression. ",
    "start": "846940",
    "end": "864170"
  },
  {
    "start": "860000",
    "end": "965000"
  },
  {
    "text": "Now let's look at\nanother example.  This one is called\nrectangular blocks.",
    "start": "864170",
    "end": "871650"
  },
  {
    "start": "871650",
    "end": "881350"
  },
  {
    "text": "So in this problem, we\nhave a bunch of blocks. Say 1, 2, all the way to n.",
    "start": "881350",
    "end": "888530"
  },
  {
    "text": "And each of them has a\nlength, width, and height.",
    "start": "888530",
    "end": "894310"
  },
  {
    "text": "So it's a\nthree-dimensional block.  So I want to put blocks, stack\nthem on top of each other",
    "start": "894310",
    "end": "902790"
  },
  {
    "text": "to get the maximum height. But in order for j to\nbe put on top of i,",
    "start": "902790",
    "end": "910230"
  },
  {
    "text": "I require the length of j to be\nsmaller then the length of i,",
    "start": "910230",
    "end": "918529"
  },
  {
    "text": "and the width of j is also\nsmaller with width of i.",
    "start": "918530",
    "end": "923800"
  },
  {
    "text": "So visually I just\nmeant this is a block.",
    "start": "923800",
    "end": "929190"
  },
  {
    "text": "I can put another\nblock on there. They are smaller in\nwidth and length. But I cannot put this guy on\ntop of it because one of its",
    "start": "929190",
    "end": "939930"
  },
  {
    "text": "dimension is larger than\nthe underlying block. And to make things simple,\nthat's not allowed, rotating.",
    "start": "939930",
    "end": "948910"
  },
  {
    "text": "So OK, I can rotate. It still doesn't fit. But you see the complication. So you allow rotate, then\nthere's more possibility.",
    "start": "948910",
    "end": "958610"
  },
  {
    "text": "Length and width are so\none of them is north-south, the other is east-west,\nand you cannot change that.",
    "start": "958610",
    "end": "965785"
  },
  {
    "text": " OK. Is the problem clear? You want to stack one\non top of each other",
    "start": "965785",
    "end": "973380"
  },
  {
    "text": "to get the maximum height. ",
    "start": "973380",
    "end": "985100"
  },
  {
    "text": "Any ideas? Again, let's start\nfrom simple algorithm.",
    "start": "985100",
    "end": "990510"
  },
  {
    "text": "Say, let's just\ntry everything out. ",
    "start": "990510",
    "end": "1007670"
  },
  {
    "text": "OK, go ahead. AUDIENCE: If you try everything\nelse, you have n factorial. LING REN: Pardon? AUDIENCE: It would\nbe O of n factorial?",
    "start": "1007670",
    "end": "1013797"
  },
  {
    "text": "LING REN: You're going too fast. Let's write the algorithm first. So I want to solve my rectangle\nblock problem, say from 1 to n.",
    "start": "1013797",
    "end": "1024220"
  },
  {
    "text": "What are my subproblems? ",
    "start": "1024220",
    "end": "1029966"
  },
  {
    "text": "AUDIENCE: Choose one block. LING REN: OK. Let's choose one block. AUDIENCE: And then you run RB\nof everything except that block.",
    "start": "1029967",
    "end": "1037036"
  },
  {
    "text": " LING REN: So I get its height,\nand then I have a subproblem.",
    "start": "1037036",
    "end": "1042599"
  },
  {
    "text": " What is the subproblem? And then I'll take a max.",
    "start": "1042599",
    "end": "1047760"
  },
  {
    "start": "1047760",
    "end": "1055330"
  },
  {
    "text": "So the difficulty here\nis this subproblem.",
    "start": "1055330",
    "end": "1061919"
  },
  {
    "text": "So Andrew, right? So Andrew said it's just\neverything except i.",
    "start": "1061920",
    "end": "1071320"
  },
  {
    "text": "Is that the case? Go ahead. AUDIENCE: It's\neverything except i, and anything with\nwider or longer than i.",
    "start": "1071320",
    "end": "1079305"
  },
  {
    "text": "LING REN: Do you get that? Not only do we\nhave to exclude i, we also have to exclude\neverything longer or wider",
    "start": "1079305",
    "end": "1087770"
  },
  {
    "text": "than i. So that's actually\na messy problem. ",
    "start": "1087770",
    "end": "1093580"
  },
  {
    "text": "So let me define this subproblem\nto be a compatible set of w i.",
    "start": "1093580",
    "end": "1105480"
  },
  {
    "text": "And let me define that to\nbe the set of blocks where",
    "start": "1105480",
    "end": "1114090"
  },
  {
    "text": "the length is smaller\nthan the required length, and their which is also smaller\nthan the required width.",
    "start": "1114090",
    "end": "1125420"
  },
  {
    "text": "So this should remind you of\nthe weighted interval scheduling problem, where we define\na compatible set once we",
    "start": "1125420",
    "end": "1133650"
  },
  {
    "text": "have chosen some block. ",
    "start": "1133650",
    "end": "1138823"
  },
  {
    "text": "Question? AUDIENCE: What are\nwe trying to do here? Are we trying to minimize h?",
    "start": "1138823",
    "end": "1144180"
  },
  {
    "text": "LING REN: Maximize h. We want to get as\nhigh as possible. ",
    "start": "1144180",
    "end": "1152500"
  },
  {
    "text": "I choose a block,\nI get its height, and then I find out the\ncompetitive remaining blocks, and I want to stack\nthem on top of it.",
    "start": "1152500",
    "end": "1158750"
  },
  {
    "start": "1158750",
    "end": "1165450"
  },
  {
    "text": "Everyone agrees this\nsolution is correct? OK, then let's\nanalyze its runtime.",
    "start": "1165450",
    "end": "1171820"
  },
  {
    "start": "1171820",
    "end": "1180639"
  },
  {
    "text": "So how do we analyze runtime? ",
    "start": "1180640",
    "end": "1192020"
  },
  {
    "text": "So what's the first\nquestion I always ask? AUDIENCE: How many subproblems?",
    "start": "1192020",
    "end": "1197596"
  },
  {
    "text": "LING REN: Yeah. I'm not sure who said\nthat, but how many subproblems do we have? ",
    "start": "1197596",
    "end": "1219841"
  },
  {
    "text": "AUDIENCE: At most n? LING REN: At most n. ",
    "start": "1219841",
    "end": "1225510"
  },
  {
    "text": "Can you explain why\nis that the case? Or it's just a guess? AUDIENCE: Because if n\nis compatible-- nothing",
    "start": "1225510",
    "end": "1237340"
  },
  {
    "text": "in the compatible--\nn will not be in the compatible\nset of anything that is in the\ncompatible set of n.",
    "start": "1237340",
    "end": "1244029"
  },
  {
    "text": "LING REN: OK,\nthat's very tricky. I didn't get that. Can you say that again? AUDIENCE: Because\nfor example, if you",
    "start": "1244029",
    "end": "1251130"
  },
  {
    "text": "start with n, then\neverything that's in the compatible set of n.",
    "start": "1251130",
    "end": "1256140"
  },
  {
    "text": "n won't be in the\ncompatible set of that. ",
    "start": "1256140",
    "end": "1261624"
  },
  {
    "text": "LING REN: OK. I think I got what you said. So, if we think there are only\nn subproblems, what are they?",
    "start": "1261624",
    "end": "1268330"
  },
  {
    "text": "They have to be compatible\nsets l1, w1, then l2, w2.",
    "start": "1268330",
    "end": "1276976"
  },
  {
    "text": "These are the n\nunique subproblems you are thinking about. Is there any chance that I\nwill get a compatible set",
    "start": "1276976",
    "end": "1284540"
  },
  {
    "text": "like something like l3 but w5? ",
    "start": "1284540",
    "end": "1289580"
  },
  {
    "text": "If I ever have this\nsubproblem then, well, my number of subproblems\nare kind of exploding.",
    "start": "1289580",
    "end": "1295845"
  },
  {
    "start": "1295845",
    "end": "1303450"
  },
  {
    "text": "Yeah, I see many of\nyou are saying no.",
    "start": "1303450",
    "end": "1309210"
  },
  {
    "text": "Why not? Because if we have a subproblem,\nsay, compatible set of l i and w i, and if we go from here,\nand choose the next block, say",
    "start": "1309210",
    "end": "1325160"
  },
  {
    "text": "t, it's guaranteed that t\nis shorter and narrower.",
    "start": "1325160",
    "end": "1338370"
  },
  {
    "text": "That means our new subproblem,\nor new compatible set becomes-- our new\nsubproblem needs to be",
    "start": "1338370",
    "end": "1350040"
  },
  {
    "text": "compatible with t instead of i. So, the only subproblems\nI can get are these ones.",
    "start": "1350040",
    "end": "1359580"
  },
  {
    "text": "I cannot have one of these. ",
    "start": "1359580",
    "end": "1365330"
  },
  {
    "text": "The number of subproblems are n. And how much work do I\nhave to do at each level?",
    "start": "1365330",
    "end": "1376145"
  },
  {
    "text": " AUDIENCE: n.",
    "start": "1376145",
    "end": "1383200"
  },
  {
    "text": "LING REN: n, because\nI'm just taking the max, and there are n potential\nchoices inside my max.",
    "start": "1383200",
    "end": "1389860"
  },
  {
    "text": " So runtime n squared. ",
    "start": "1389860",
    "end": "1404160"
  },
  {
    "text": "OK, we're not fully done,\nbecause there is an extra step",
    "start": "1404160",
    "end": "1412810"
  },
  {
    "text": "when we're trying to do this. We have to figure out\nwhat each of these are.",
    "start": "1412810",
    "end": "1419280"
  },
  {
    "text": " Because once I go\ninto this subproblem,",
    "start": "1419280",
    "end": "1425060"
  },
  {
    "text": "I need to take a max on all\nthe blocks that's in this set.",
    "start": "1425060",
    "end": "1431120"
  },
  {
    "text": "I have to know what\nblocks are in that set. ",
    "start": "1431120",
    "end": "1437780"
  },
  {
    "text": "Is that hard? So how would you do that? AUDIENCE: You just check for\nall of them, and that's O of n.",
    "start": "1437780",
    "end": "1446999"
  },
  {
    "text": "LING REN: OK. So, I check all of them. That's O of n. ",
    "start": "1446999",
    "end": "1455240"
  },
  {
    "text": "I'm pretty sure you\njust meant scanning, scan the entire thing, and\npick out the compatible ones.",
    "start": "1455240",
    "end": "1460970"
  },
  {
    "text": "But that's for this subproblem. We have to do it for every one.",
    "start": "1460970",
    "end": "1467130"
  },
  {
    "text": "Or there may be a better way. So I think the previous\nTA is telling me there's a better way to do that.",
    "start": "1467130",
    "end": "1473020"
  },
  {
    "text": "So in order to find the\nentire compatible stuff, he claims he can do it in n log\nn, but I haven't checked that,",
    "start": "1473020",
    "end": "1479624"
  },
  {
    "text": "so I'm not sure. This is a folklore legend here.",
    "start": "1479624",
    "end": "1485230"
  },
  {
    "text": "Yeah, we'll double\ncheck that offline. But assuming if I\ndon't have this, then",
    "start": "1485230",
    "end": "1491080"
  },
  {
    "text": "figure out all these subproblems\nwill also take n squared. Then my total runtime is\nn squared plus n squared,",
    "start": "1491080",
    "end": "1498909"
  },
  {
    "text": "and still n squared. ",
    "start": "1498910",
    "end": "1506400"
  },
  {
    "text": "Question? AUDIENCE: Is the\nn log n solution giving us sorting\nthis by [INAUDIBLE]? ",
    "start": "1506400",
    "end": "1514014"
  },
  {
    "text": "LING REN: Yeah, I think\nit should be something along those lines, but yeah, I\nhaven't figured out whether you",
    "start": "1514014",
    "end": "1519260"
  },
  {
    "text": "sort by length or by width. You can only sort\nby one of them.",
    "start": "1519260",
    "end": "1525889"
  },
  {
    "text": "So after sorting, say\nlet's sort by length. Then after sorting, I may\nget something like this.",
    "start": "1525890",
    "end": "1534570"
  },
  {
    "text": "And if I'm asking what's\nthe compatible set of width this guy, I still have\nto kick all of them out.",
    "start": "1534570",
    "end": "1540885"
  },
  {
    "start": "1540885",
    "end": "1548942"
  },
  {
    "text": "Yeah, so it's not entirely\nclear to me how to do it, but I think you can potentially\nconsider having another,",
    "start": "1548942",
    "end": "1557240"
  },
  {
    "text": "say, binary search tree\nthat's sorted by width, and you can go in and just\ndelete everything larger",
    "start": "1557240",
    "end": "1563910"
  },
  {
    "text": "than a certain width. So that's the, yeah. OK, go ahead.",
    "start": "1563910",
    "end": "1569642"
  },
  {
    "text": "AUDIENCE: Can you convert into\na directed graph, where each pair of shapes that's\ncompatible, you do an edge.",
    "start": "1569642",
    "end": "1577615"
  },
  {
    "text": "And then path find. LING REN: OK. OK.",
    "start": "1577615",
    "end": "1584510"
  },
  {
    "text": "But constructing that graph\nalready takes O n squared,",
    "start": "1584510",
    "end": "1589626"
  },
  {
    "text": "correct? ",
    "start": "1589626",
    "end": "1594856"
  },
  {
    "text": "Yeah, OK, let's move on. I don't have time\nto figure this out. ",
    "start": "1594856",
    "end": "1601390"
  },
  {
    "text": "So, this problem is remotely\nsimilar to interval scheduling,",
    "start": "1601390",
    "end": "1609160"
  },
  {
    "text": "weighted interval\nscheduling, in a sense that it has some compatible set.",
    "start": "1609160",
    "end": "1614630"
  },
  {
    "text": "And in the very first\nlecture and recitation, we have two algorithm for\nweighted interval scheduling,",
    "start": "1614630",
    "end": "1622400"
  },
  {
    "text": "and one of them is\nbetter than the other. And this one looks like\nthe naive algorithm. ",
    "start": "1622400",
    "end": "1633480"
  },
  {
    "text": "So, does anyone remember\nwhat the better algorithm is for weighted\ninterval scheduling?",
    "start": "1633480",
    "end": "1639925"
  },
  {
    "start": "1639925",
    "end": "1666710"
  },
  {
    "text": "But instead of checking every\none as my potential lowest one,",
    "start": "1666710",
    "end": "1675529"
  },
  {
    "text": "it really doesn't\nmake sense to do that. Because for the\nvery small ones, I shouldn't put them\nas my bottom one.",
    "start": "1675530",
    "end": "1683420"
  },
  {
    "text": "I should try the larger ones\nfirst as the very bottom one.",
    "start": "1683420",
    "end": "1689440"
  },
  {
    "text": "Go ahead. Oh, you're not-- AUDIENCE: You could create\na sorted list of length n",
    "start": "1689440",
    "end": "1695380"
  },
  {
    "text": "with the width. So you know that items\nthat are later in the list, they're not going to be in\nthe first level of the tower.",
    "start": "1695380",
    "end": "1704330"
  },
  {
    "text": "LING REN: Yeah, correct. So, just in the\nsame line of thought as weighted interval scheduling,\nlet's first sort them.",
    "start": "1704330",
    "end": "1713290"
  },
  {
    "text": "But then, it's a little\ntricky because do I sort by length or width? So I'm not sure yet, so\nlet's just sort by length",
    "start": "1713290",
    "end": "1723120"
  },
  {
    "text": "and then width.  So this means if they\nhave the same length,",
    "start": "1723120",
    "end": "1728790"
  },
  {
    "text": "then I'll sort them by width. So I can create a sorted list. Let me just assume that\nit's in-place sort,",
    "start": "1728790",
    "end": "1734920"
  },
  {
    "text": "and now I have the sorted list. So once I have that,\nthe potential solutions",
    "start": "1734920",
    "end": "1744320"
  },
  {
    "text": "I should consider is\nthat whether or not I put my first block\nas the bottom one.",
    "start": "1744320",
    "end": "1751679"
  },
  {
    "text": "It doesn't make sense for\nme to put a later one down. So my original problem\nbecomes taking the max,",
    "start": "1751680",
    "end": "1765174"
  },
  {
    "text": "and whether or not\nI choose block one. If I do, then I get its\nweight-- height, sorry.",
    "start": "1765175",
    "end": "1775470"
  },
  {
    "text": "And my subproblem is the\nones compatible with it.",
    "start": "1775470",
    "end": "1782289"
  },
  {
    "start": "1782290",
    "end": "1788300"
  },
  {
    "text": "If I do not choose it,\nthen my sub problem is like what Andrew first\nsaid, from 2 all the way to n.",
    "start": "1788300",
    "end": "1797280"
  },
  {
    "text": " So why is this correct?",
    "start": "1797280",
    "end": "1804260"
  },
  {
    "text": "So I claim this\ncovers all the cases. Either h1 is chosen as the\nfirst bottom one, or it's not.",
    "start": "1804260",
    "end": "1813800"
  },
  {
    "text": "It's not chosen at all. It's impossible for h1 to\nbe somewhere in the middle, because it has the\nlongest, largest length.",
    "start": "1813800",
    "end": "1821710"
  },
  {
    "text": "OK.  So how many\nsubproblems do I have?",
    "start": "1821710",
    "end": "1826970"
  },
  {
    "start": "1826970",
    "end": "1838825"
  },
  {
    "text": "Go ahead. Still n. So there are all of these\ncompatible set of l1 w1, l2 w2.",
    "start": "1838826",
    "end": "1849779"
  },
  {
    "text": "But it looks like I do\nhave some new subproblems. ",
    "start": "1849780",
    "end": "1857940"
  },
  {
    "text": "These do not exist before. However, there are\nonly n of them.",
    "start": "1857940",
    "end": "1865860"
  },
  {
    "text": "They're just a suffix\nof the entire set. So I still have O\nof n subproblems.",
    "start": "1865860",
    "end": "1873240"
  },
  {
    "text": "And at each step, I'm doing\nconstant amount of work. There are just two items.",
    "start": "1873240",
    "end": "1879510"
  },
  {
    "text": "So we found an order n solution. ",
    "start": "1879510",
    "end": "1886200"
  },
  {
    "text": "Are we done? Is it really order n? OK, no. AUDIENCE: You still\nhave to find the c.",
    "start": "1886200",
    "end": "1892870"
  },
  {
    "text": "LING REN: Yeah. I still have to\nfind all these c's. And first, I actually\nhave a sort step.",
    "start": "1892870",
    "end": "1899059"
  },
  {
    "text": "That sort step is n log n.  Yeah, then again, well,\nif we do it naively,",
    "start": "1899060",
    "end": "1906860"
  },
  {
    "text": "then it's again n\nsquared, because I have to find this compatible\nset, each of them.",
    "start": "1906860",
    "end": "1914720"
  },
  {
    "text": "But if there's an\nn log n solution to find these compatible sets,\nthen my final runtime is n",
    "start": "1914720",
    "end": "1919840"
  },
  {
    "text": "log n. ",
    "start": "1919840",
    "end": "1925491"
  },
  {
    "text": "Make sense? ",
    "start": "1925491",
    "end": "1937615"
  },
  {
    "text": "Any questions so far? ",
    "start": "1937615",
    "end": "1949050"
  },
  {
    "text": "OK. So now we actually\nhave a choice.",
    "start": "1949050",
    "end": "1954490"
  },
  {
    "text": "So we can either go\nthrough another DP example,",
    "start": "1954490",
    "end": "1959559"
  },
  {
    "text": "I do have another one. But Nancy, one of the\nlecturers suggested, that it seems that many people\nhave some trouble understanding",
    "start": "1959560",
    "end": "1967560"
  },
  {
    "text": "yesterday's lecture on universal\nhashing and perfect hashing. So we can also consider\ngoing through that.",
    "start": "1967560",
    "end": "1973876"
  },
  {
    "text": "Well, of course,\nthe third option is to just call it a day. ",
    "start": "1973876",
    "end": "1979300"
  },
  {
    "text": "So, let me just take a poll. How many people before we\ngo over the hash stuff?",
    "start": "1979300",
    "end": "1985050"
  },
  {
    "text": " How many people prefer\nanother DP example?",
    "start": "1985050",
    "end": "1990925"
  },
  {
    "text": " OK. Sorry guys. How many people\njust want to leave?",
    "start": "1990925",
    "end": "1997980"
  },
  {
    "text": "It's fine. OK. Great. That's it. ",
    "start": "1997980",
    "end": "2003440"
  },
  {
    "text": "OK. So, so much for DP. We do have another example. We will release it\nin recitation notes.",
    "start": "2003440",
    "end": "2008940"
  },
  {
    "text": "For those of you\nwho are interested, you can take a look. So, well, sure you\nall know that we",
    "start": "2008940",
    "end": "2016180"
  },
  {
    "text": "haven't go into DP in\nthe main lectures yet. So this is really just\na warm up to prepare",
    "start": "2016180",
    "end": "2022510"
  },
  {
    "text": "you to go to the more\nadvanced DP concepts. And also, DP will be\ncovered in quiz 1.",
    "start": "2022510",
    "end": "2030269"
  },
  {
    "text": "But the difficulty\nwill be strictly easier than the examples\nwe covered here.",
    "start": "2030270",
    "end": "2037432"
  },
  {
    "text": " OK? ",
    "start": "2037432",
    "end": "2068460"
  },
  {
    "text": "Now let's review universal\nand perfect hashing. So it's not like I have\na better way to teach it.",
    "start": "2068460",
    "end": "2075960"
  },
  {
    "text": "Our advantage here is\nthat we have fewer people, so you can ask\nquestions you have.",
    "start": "2075960",
    "end": "2081460"
  },
  {
    "text": "So let me start with\nthe motivating example. So why do we care about hash? ",
    "start": "2081460",
    "end": "2087520"
  },
  {
    "text": "It's because we want to create\na hash table of, say, n.",
    "start": "2087520",
    "end": "2094860"
  },
  {
    "text": "It has n bins. ",
    "start": "2094860",
    "end": "2100170"
  },
  {
    "text": "And we will receive input,\nsay, k0, k1, all the way to k n",
    "start": "2100170",
    "end": "2106160"
  },
  {
    "text": "minus 1. n keys. And we'll create a hash\nfunction to each of them",
    "start": "2106160",
    "end": "2112110"
  },
  {
    "text": "to map them to one of the bins. That the hope is that if n is\ntheta m, or in the other way,",
    "start": "2112110",
    "end": "2123140"
  },
  {
    "text": "m is theta n, then\neach bin should contain a constant number of keys. ",
    "start": "2123140",
    "end": "2130310"
  },
  {
    "text": "So to complete the\npicture, all the keys are drawn from a universe\nthat has size u.",
    "start": "2130310",
    "end": "2140060"
  },
  {
    "text": "And this u is\nusually pretty large. Let's say it's larger\nthan m squared.",
    "start": "2140060",
    "end": "2146010"
  },
  {
    "text": "It's larger than the square\nof my hash table size. ",
    "start": "2146010",
    "end": "2152600"
  },
  {
    "text": "But let me first start\nwith a negative result.",
    "start": "2152600",
    "end": "2165090"
  },
  {
    "text": "So if my hash function\nis deterministic,",
    "start": "2165090",
    "end": "2178580"
  },
  {
    "text": "then there always\nexists a series of input",
    "start": "2178580",
    "end": "2183630"
  },
  {
    "text": "that all map to the same thing. ",
    "start": "2183630",
    "end": "2191630"
  },
  {
    "text": "We call that worst case. ",
    "start": "2191630",
    "end": "2198279"
  },
  {
    "text": "We don't like the worst case. Why? Because in that case, the\nhash is not doing anything. We still have all of the\nitems in the same list.",
    "start": "2198280",
    "end": "2205730"
  },
  {
    "start": "2205730",
    "end": "2216420"
  },
  {
    "text": "Why is that lemma true? Because by a very simple\npigeonhole argument,",
    "start": "2216420",
    "end": "2223050"
  },
  {
    "text": "so imagine I insert all of\nthe keys in the universe",
    "start": "2223050",
    "end": "2228730"
  },
  {
    "text": "into my hash table. I would never do\nthat in practice. It's just a thought experiment. So by a simple\npigeonhole argument,",
    "start": "2228730",
    "end": "2234760"
  },
  {
    "text": "if u is greater\nthan m squared, then at least some bin will\ncontain more than m elements.",
    "start": "2234760",
    "end": "2243020"
  },
  {
    "text": "Well, if it just so happens\nthat my inputs are these m keys, then my hash will hash all\nof them to the same bin.",
    "start": "2243020",
    "end": "2250180"
  },
  {
    "text": "Make sense? So this is the problem\nwe're trying to solve.",
    "start": "2250180",
    "end": "2255490"
  },
  {
    "text": "We don't want this worst case. And it does say that\nif h is deterministic, we cannot avoid that.",
    "start": "2255490",
    "end": "2261580"
  },
  {
    "text": "There always exist a worst case. So what's the solution? ",
    "start": "2261580",
    "end": "2268049"
  },
  {
    "text": "Then the solution\nis to randomize h. ",
    "start": "2268050",
    "end": "2275960"
  },
  {
    "text": "However, I can't\nreally randomize h.",
    "start": "2275960",
    "end": "2281420"
  },
  {
    "text": "If h take some key,\nif my hash function",
    "start": "2281420",
    "end": "2287970"
  },
  {
    "text": "maps a key into a\ncertain bin, well, the next time I call\nthis hash function, it better give the same bin.",
    "start": "2287970",
    "end": "2293990"
  },
  {
    "text": "Otherwise I cannot\nfind that item. So h needs to be deterministic.",
    "start": "2293990",
    "end": "2301849"
  },
  {
    "start": "2301850",
    "end": "2307710"
  },
  {
    "text": "So now our only choice\nis to pick a random h.",
    "start": "2307710",
    "end": "2314400"
  },
  {
    "text": " Make sense? Every hash function\nis deterministic,",
    "start": "2314400",
    "end": "2320570"
  },
  {
    "text": "but we will pick a\nrandom one from a family",
    "start": "2320570",
    "end": "2326150"
  },
  {
    "text": "of hash functions. ",
    "start": "2326150",
    "end": "2331190"
  },
  {
    "text": "So in some sense,\nthis is cheating. Why? Because all I'm saying is I\nwill not choose a hash function",
    "start": "2331190",
    "end": "2338210"
  },
  {
    "text": "beforehand. I will wait for the\nuser to insert inputs.",
    "start": "2338210",
    "end": "2345070"
  },
  {
    "text": "If I have too many collisions,\nI'll choose another one. If I have too many collisions. I'll choose another one.",
    "start": "2345070",
    "end": "2350470"
  },
  {
    "text": " OK. I think I forgot to mention\none thing that's important.",
    "start": "2350470",
    "end": "2355891"
  },
  {
    "text": "So you may ask why do I care? Why do I care about\nthat worst case? What's the chance of it\nhappening in practice?",
    "start": "2355891",
    "end": "2363190"
  },
  {
    "text": "It's very low, but in\nalgorithms, we really don't like making\nassumptions on inputs.",
    "start": "2363190",
    "end": "2370641"
  },
  {
    "text": "Why? Because if you imagine\nyou're running, say, a website, a web server, and you\ncode has some has table in it.",
    "start": "2370641",
    "end": "2377910"
  },
  {
    "text": "So if your competitor,\nor someone who hates you, wants to put you\nout of business,",
    "start": "2377910",
    "end": "2383250"
  },
  {
    "text": "and if he knows\nyour hash function, he can create a\nworst case input. That will make your\nwebsite infinitely slow.",
    "start": "2383250",
    "end": "2391100"
  },
  {
    "text": "So what we are saying\nhere is I don't tell him what hash function I'll use.",
    "start": "2391100",
    "end": "2396280"
  },
  {
    "text": "I'll say I choose one. If he figures out the wrong\ninput, the worst case input,",
    "start": "2396280",
    "end": "2401340"
  },
  {
    "text": "I'm going to change my hash\nfunction and use another one. Make sense?",
    "start": "2401340",
    "end": "2406810"
  },
  {
    "start": "2406810",
    "end": "2423740"
  },
  {
    "text": "Now the definition of\nuniversal hash function",
    "start": "2423740",
    "end": "2433050"
  },
  {
    "text": "is that if I pick a random h\nfrom my universal hash function",
    "start": "2433050",
    "end": "2438920"
  },
  {
    "text": "family, the probability that\nany key i mapped to the same bin",
    "start": "2438920",
    "end": "2448609"
  },
  {
    "text": "as any key j should be\nless or equal than 1",
    "start": "2448610",
    "end": "2454380"
  },
  {
    "text": "over m, where m\nis my hash table. This is really the\nbest you can get. If the hash function is really\nevenly distributing things,",
    "start": "2454380",
    "end": "2461202"
  },
  {
    "text": "you should get this property. ",
    "start": "2461202",
    "end": "2467970"
  },
  {
    "text": "So we have seen one universal\nhash function in the class.",
    "start": "2467970",
    "end": "2473700"
  },
  {
    "text": "I'll just go over\nthe other example, which is ak plus b modulo\np, and then modulo m.",
    "start": "2473700",
    "end": "2487470"
  },
  {
    "text": "So p is a prime number that is\ngreater than the universe size.",
    "start": "2487470",
    "end": "2493760"
  },
  {
    "text": " We'll see why this is a\nuniversal hash function. ",
    "start": "2493760",
    "end": "2501730"
  },
  {
    "text": "So to do that, we just need\nto analyze the collision probability. So if I have two key,\nthat k1 and k2 that",
    "start": "2501730",
    "end": "2509550"
  },
  {
    "text": "map to the same bin, that means\nthey must have this property.",
    "start": "2509550",
    "end": "2519780"
  },
  {
    "text": "After taking the mod\nm, their difference should be a multiple of m.",
    "start": "2519780",
    "end": "2525599"
  },
  {
    "text": "Because if this is true\nafter taking the modulo m, they will map to the same bin.",
    "start": "2525600",
    "end": "2532410"
  },
  {
    "text": "Make sense? Now I can quickly write it as a\ntimes the difference of the key",
    "start": "2532410",
    "end": "2542510"
  },
  {
    "text": "equals a multiple of m, mod p.",
    "start": "2542510",
    "end": "2547920"
  },
  {
    "text": "Now, k1 and k2 are not\nequal, so they are nonzero.",
    "start": "2547920",
    "end": "2553619"
  },
  {
    "text": "And in this group, based\non some number theory, we have an inverse\nelement for it.",
    "start": "2553620",
    "end": "2559050"
  },
  {
    "text": "So, if this happens,\nwe'll call it a bad a. How many bad a's do I have?",
    "start": "2559050",
    "end": "2565220"
  },
  {
    "text": " One of a will make this\nequation holds with i equals 1.",
    "start": "2565220",
    "end": "2572510"
  },
  {
    "text": "Another a make the equation\nholds with i equals 2. But how many such a's do I have?",
    "start": "2572510",
    "end": "2579120"
  },
  {
    "text": "At most, because this equation\ncan hold with m, 2m, 3m,",
    "start": "2579120",
    "end": "2584950"
  },
  {
    "text": "all the way to p\nover m floored m.",
    "start": "2584950",
    "end": "2591950"
  },
  {
    "text": "This is the total\nnumber of possible ways this equation can hold. So how many bad a's do I have?",
    "start": "2591950",
    "end": "2598790"
  },
  {
    "text": "I have p over m,\nover the total number",
    "start": "2598790",
    "end": "2605920"
  },
  {
    "text": "of a's, which is p minus 1.  Oh, yeah, I forgot\nto mention that.",
    "start": "2605920",
    "end": "2611730"
  },
  {
    "text": "So a is from 1 to p minus one.",
    "start": "2611730",
    "end": "2619510"
  },
  {
    "text": " OK.",
    "start": "2619510",
    "end": "2624900"
  },
  {
    "text": "So I can always choose my p\nto be not a multiple of m. If I do that, this floor--\nso, then p and p minus 1",
    "start": "2624900",
    "end": "2640600"
  },
  {
    "text": "do not cross the\nboundary of modulo m. Then this is true, and\nthis is less than 1 over m.",
    "start": "2640600",
    "end": "2651400"
  },
  {
    "text": "So this is a universal\nhash function family. ",
    "start": "2651400",
    "end": "2660440"
  },
  {
    "text": "So what's the randomness here? The randomness is a. I'll pick an a to get one of my\nhash, and if it doesn't work,",
    "start": "2660440",
    "end": "2667440"
  },
  {
    "text": "I pick another a.  AUDIENCE: What is b?",
    "start": "2667440",
    "end": "2672854"
  },
  {
    "text": "What is b? LING REN: p is a prime\nnumber I choose-- AUDIENCE: [INAUDIBLE]",
    "start": "2672854",
    "end": "2678070"
  },
  {
    "text": "LING REN: b? AUDIENCE: Yeah. LING REN: Oh, b. I think it's also\na random number. ",
    "start": "2678070",
    "end": "2685550"
  },
  {
    "text": "Yeah, so, actually it's\nnot needed, but I think there's some deep\nreason that they keep it in the hash function.",
    "start": "2685550",
    "end": "2691280"
  },
  {
    "text": "I'm not sure why. ",
    "start": "2691280",
    "end": "2704380"
  },
  {
    "text": "Now once we have that, once\nwe have universal hash,",
    "start": "2704380",
    "end": "2709509"
  },
  {
    "start": "2705000",
    "end": "2940000"
  },
  {
    "text": "people also want\nperfect hashing, which means I want\nabsolutely 0 collision.",
    "start": "2709510",
    "end": "2718550"
  },
  {
    "text": " So how do I do that? Let me first give a method 1.",
    "start": "2718550",
    "end": "2728540"
  },
  {
    "text": " I'll just use any\nuniversal hash function,",
    "start": "2728540",
    "end": "2736230"
  },
  {
    "text": "but I choose my m\nto be n squared. ",
    "start": "2736230",
    "end": "2743940"
  },
  {
    "text": "I claim this is a\nperfect hash function with certain probability. Why? Because I want to calculate\nprobability no collision.",
    "start": "2743940",
    "end": "2752099"
  },
  {
    "start": "2752100",
    "end": "2763230"
  },
  {
    "text": "Yeah, 1 minus probability\nI do have a collision. ",
    "start": "2763230",
    "end": "2769740"
  },
  {
    "text": "And I can use a union bound. That's the probability that\nany pair has a collision.",
    "start": "2769740",
    "end": "2780214"
  },
  {
    "start": "2780215",
    "end": "2785570"
  },
  {
    "text": "Any pair of hx equals hy. ",
    "start": "2785570",
    "end": "2793540"
  },
  {
    "text": "How many pairs do I have?  AUDIENCE: N choose 2.",
    "start": "2793540",
    "end": "2799244"
  },
  {
    "text": "LING REN: Yeah. n choose\n2, which is this number. ",
    "start": "2799244",
    "end": "2808060"
  },
  {
    "text": "So if it's a universal\nhash function, then any collision,\nany two colliding, the probability is 1 over m.",
    "start": "2808060",
    "end": "2815200"
  },
  {
    "text": " So I choose my m\nto be n squared,",
    "start": "2815200",
    "end": "2820610"
  },
  {
    "text": "so this one is larger than 1/2.  So what I'm saying, to get\na perfect hash function,",
    "start": "2820610",
    "end": "2828970"
  },
  {
    "text": "I'll just use the simplest way. I select the universal\nhash function with m equals n squared.",
    "start": "2828970",
    "end": "2834950"
  },
  {
    "text": "I have a probability\nmore than 1/2 to succeed. Or if I don't succeed,\nI'll choose another one",
    "start": "2834950",
    "end": "2840819"
  },
  {
    "text": "until I succeed. So this is a\nrandomized algorithm,",
    "start": "2840820",
    "end": "2846540"
  },
  {
    "text": "and we can make it a Monte\nCarlo algorithm or Las Vegas algorithm. So I can either say if I\nchoose alpha log n times,",
    "start": "2846540",
    "end": "2858829"
  },
  {
    "text": "then what's the chance\nthat none of my choice satisfies perfect hashing? ",
    "start": "2858830",
    "end": "2865820"
  },
  {
    "text": "My failure probability\nis less than this. ",
    "start": "2865820",
    "end": "2876210"
  },
  {
    "text": "My each chance I have\na half success rate, and I try this\nmany times, what's",
    "start": "2876210",
    "end": "2883600"
  },
  {
    "text": "the chance of all\nof them failing?  This is 1 over n\nraised to alpha.",
    "start": "2883600",
    "end": "2889820"
  },
  {
    "start": "2889820",
    "end": "2895601"
  },
  {
    "text": "Of course, I can also say, I'll\nkeep trying until I succeed. Then I have a 100\npercent success rate,",
    "start": "2895601",
    "end": "2902360"
  },
  {
    "text": "but my runtime could\npotentially go unbounded. Make sense?",
    "start": "2902360",
    "end": "2909180"
  },
  {
    "text": "OK. This sounds like a\nperfect solution. The only problem is that the\nspace complexity of this method",
    "start": "2909180",
    "end": "2918000"
  },
  {
    "text": "is n squared, because I\nchoose my m hash table",
    "start": "2918000",
    "end": "2923480"
  },
  {
    "text": "size to be n squared. So this is the\nonly thing we don't want in this simple method.",
    "start": "2923480",
    "end": "2930140"
  },
  {
    "start": "2930140",
    "end": "2939369"
  },
  {
    "text": "Our final goal, is to have\na perfect hash function that",
    "start": "2939370",
    "end": "2945970"
  },
  {
    "start": "2940000",
    "end": "3122000"
  },
  {
    "text": "has space O of n, and also\nruntime some polynomial in n,",
    "start": "2945970",
    "end": "2955910"
  },
  {
    "text": "and failure probability\narbitrarily small. And the idea there is\nthis two-level hashing.",
    "start": "2955910",
    "end": "2963283"
  },
  {
    "start": "2963283",
    "end": "2971180"
  },
  {
    "text": "So, I choose h1 first to\nhash my keys into bins.",
    "start": "2971180",
    "end": "2977470"
  },
  {
    "text": "And for each bin, say I get\nl1 elements here, l2 elements here, so on and so forth.",
    "start": "2977470",
    "end": "2984280"
  },
  {
    "text": "I'll choose each\nof the bins to be a second level perfect hashing.",
    "start": "2984280",
    "end": "2990630"
  },
  {
    "text": "So we can use the method one\nto choose this small one. If I choose m1, which is the\nhash table size of this guy,",
    "start": "2990630",
    "end": "2999580"
  },
  {
    "text": "to be l1 squared, then I\nknow after alpha log n trial, this one should be\na perfect hashing.",
    "start": "2999580",
    "end": "3007580"
  },
  {
    "text": "After another alpha\nlog n trial, I should resolve all\nthe conflicts in l2 to make it a perfect hashing.",
    "start": "3007580",
    "end": "3015206"
  },
  {
    "text": "Make sense?  So after n log n trials, I\nwill resolve all the conflicts",
    "start": "3015206",
    "end": "3027410"
  },
  {
    "text": "in my second level hashing. Question? AUDIENCE: It was\nmentioned in the lecture that this only works if there\nare no inserts or deletes,",
    "start": "3027410",
    "end": "3033040"
  },
  {
    "text": "or something like that?  LING REN: Let me think\nabout that offline.",
    "start": "3033040",
    "end": "3039720"
  },
  {
    "text": "I'm not sure about that.  OK. So the only remaining\nproblem is we",
    "start": "3039720",
    "end": "3047150"
  },
  {
    "text": "need to figure out whether\nwe achieve this space O of n. What is this space\ncomplexity of this algorithm?",
    "start": "3047150",
    "end": "3053210"
  },
  {
    "text": "It's n plus l i squared, because\neach table size is the square",
    "start": "3053210",
    "end": "3064310"
  },
  {
    "text": "of the elements in it. And finally, we have\nthat Markov inequality",
    "start": "3064310",
    "end": "3070070"
  },
  {
    "text": "or I think something\nlike that, to prove this is the case with--\nso my space is O of n,",
    "start": "3070070",
    "end": "3081240"
  },
  {
    "text": "also with the probability\nof greater than 1/2. I can keep going.",
    "start": "3081240",
    "end": "3087150"
  },
  {
    "text": "I'll try alpha log n times on\nmy first level hash function,",
    "start": "3087150",
    "end": "3092960"
  },
  {
    "text": "until my space is O of n. Once I get to that\npoint, I'll try",
    "start": "3092960",
    "end": "3098380"
  },
  {
    "text": "choosing universal hash\nfunctions for my smaller tables, until I succeed.",
    "start": "3098380",
    "end": "3103625"
  },
  {
    "text": "OK? ",
    "start": "3103625",
    "end": "3111010"
  },
  {
    "text": "That's it for hashing and DP. ",
    "start": "3111010",
    "end": "3122107"
  }
]