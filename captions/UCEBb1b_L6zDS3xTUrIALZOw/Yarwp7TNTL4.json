[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6360"
  },
  {
    "text": "continue to offer high quality,\neducational resources for free. To make a donation, or\nview additional materials",
    "start": "6360",
    "end": "13320"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu.",
    "start": "13320",
    "end": "18450"
  },
  {
    "text": " ERIK DEMAINE: All right,\nwelcome to my last lecture",
    "start": "18450",
    "end": "24869"
  },
  {
    "text": "for the semester. We finish our coverage\nof dynamic graphs,",
    "start": "24870",
    "end": "30090"
  },
  {
    "text": "and also our coverage\nof lower bounds. We saw one big lower\nbound in this class",
    "start": "30090",
    "end": "35940"
  },
  {
    "text": "in the cell probe model. You may recall cell\nprobe model, you just count how many cells\nof memory do you touch.",
    "start": "35940",
    "end": "44500"
  },
  {
    "text": "You want to prove a\nlower bound on that. And today we're going to prove\na cell probe from lower bound",
    "start": "44500",
    "end": "50180"
  },
  {
    "text": "on dynamic connectivity,\nwhich is a problem we've solved a few different times.",
    "start": "50180",
    "end": "57030"
  },
  {
    "text": "Our lower bound\nwill apply even when each of the connected components\nof your graph are just a path.",
    "start": "57030",
    "end": "63920"
  },
  {
    "text": "And so in particular, they\nimply matching lower bounds for dynamic trees. ",
    "start": "63920",
    "end": "74760"
  },
  {
    "text": "So here is the theorem\nwe'll be proving today. You want to insert\nand delete edges,",
    "start": "74760",
    "end": "87270"
  },
  {
    "text": "and do connectivity queries\nbetween pairs of vertices, vw.",
    "start": "87270",
    "end": "95969"
  },
  {
    "text": "I want to know is there\na path from v to w, just like we've\nbeen considering.",
    "start": "95970",
    "end": "101490"
  },
  {
    "text": " These require omega log\nn, time for operation.",
    "start": "101490",
    "end": "112320"
  },
  {
    "text": " This is the max of\nupdating, query times has",
    "start": "112320",
    "end": "117990"
  },
  {
    "text": "to be at least log n\ntime per operation, even if the connected\ncomponents are paths, and even",
    "start": "117990",
    "end": "136170"
  },
  {
    "text": "amortized, and even randomized. Although I'm not going to\nprove of all of these versions,",
    "start": "136170",
    "end": "143700"
  },
  {
    "text": "I won't prove the\namortized version. I'm going to prove a worst\ncase log and lower bound,",
    "start": "143700",
    "end": "149280"
  },
  {
    "text": "it's just a little more work to\nprove an amortized lower bound. But same principles.",
    "start": "149280",
    "end": "156459"
  },
  {
    "text": "And so that's going to be\ntoday, is proving this theorem.",
    "start": "156460",
    "end": "161500"
  },
  {
    "text": "It's not a short\nproof, but it combines a bunch of relatively\nsimple ideas,",
    "start": "161500",
    "end": "167580"
  },
  {
    "text": "and ends up being pretty\nclean overall, piece-by-piece, but there's just a bunch of\npieces, as we will get to.",
    "start": "167580",
    "end": "174810"
  },
  {
    "text": "Key concept is an\nidea introduced in this paper, which is\nto build a balanced binary",
    "start": "174810",
    "end": "181140"
  },
  {
    "text": "tree over time, over\nyour access sequence. And argue about different\nsubtrees within that tree.",
    "start": "181140",
    "end": "189600"
  },
  {
    "text": "This is a paper that maybe\ncame out of this class, in some sense, it was by\nMihai Patrascu and myself.",
    "start": "189600",
    "end": "199500"
  },
  {
    "text": "Back when Mihai\nwas an undergrad, I think he'd just\ntaken this class. But at that point\nthe class didn't even",
    "start": "199500",
    "end": "205590"
  },
  {
    "text": "cover dynamic connectivity, so--  and time here is cell probes.",
    "start": "205590",
    "end": "212534"
  },
  {
    "text": " So this is a very\nstrong model, it",
    "start": "212535",
    "end": "219050"
  },
  {
    "text": "implies a lower bound on ram,\nand implies a lower bound on pointer machine. We know matching\nupper bounds for trees",
    "start": "219050",
    "end": "226379"
  },
  {
    "text": "on a pointer machine\nlink/cut trees in [INAUDIBLE] to our trees. It's kind of fun that this lower\nbound even applies to paths,",
    "start": "226380",
    "end": "233790"
  },
  {
    "text": "because most of the\nwork in link/cut trees is about decomposing\nyour tree into paths. And so what this is saying is\neven if that's done for you,",
    "start": "233790",
    "end": "240330"
  },
  {
    "text": "and you just need to be able\nto take paths, and concatenate them together by adding edges,\nthen maintaining the find root",
    "start": "240330",
    "end": "250380"
  },
  {
    "text": "property so that you can\ndo connectivity queries, even that requires log n time.",
    "start": "250380",
    "end": "255550"
  },
  {
    "text": "So converting a tree into\na path is basically free, the hard part is\nmaintaining the paths.",
    "start": "255550",
    "end": "263010"
  },
  {
    "text": "So let's prove a theorem. ",
    "start": "263010",
    "end": "268590"
  },
  {
    "text": "The lower bound,\nwe get to choose what access sequence\nwe think is bad. And so we're going to come\nup with a particular style",
    "start": "268590",
    "end": "277169"
  },
  {
    "text": "of graph, which looks\nlike the following.",
    "start": "277170",
    "end": "282703"
  },
  {
    "start": "282703",
    "end": "294050"
  },
  {
    "text": "Graph is going to be-- the vertices are going to\nbe a root n by root n grid. ",
    "start": "294050",
    "end": "301700"
  },
  {
    "text": "And we're going to-- these guys are in,\nwhat did I call them? Groups?",
    "start": "301700",
    "end": "307280"
  },
  {
    "text": "Columns. Columns is a good name. These are columns of\nthe matrix, or vertices.",
    "start": "307280",
    "end": "315620"
  },
  {
    "text": "And what I'd like to have is\nbetween consecutive columns, I want to have a\nperfect matching",
    "start": "315620",
    "end": "321140"
  },
  {
    "text": "between these vertices. So could be, I don't know, this\nedge, this edge, this edge,",
    "start": "321140",
    "end": "328580"
  },
  {
    "text": "and that edge. And I also want a perfect match\nbetween these two columns, so maybe this one, this\none, this one, this one.",
    "start": "328580",
    "end": "339950"
  },
  {
    "text": "And you can have some\nboring things too.",
    "start": "339950",
    "end": "346340"
  },
  {
    "text": "Something like that. So between every pair of\ncolumns is a perfect matching,",
    "start": "346340",
    "end": "353815"
  },
  {
    "text": "meaning perfect pairing. ",
    "start": "353815",
    "end": "358910"
  },
  {
    "text": "OK, this of course results\nin a collection of paths, square root of n paths. You can start at any\nvertex on the left,",
    "start": "358910",
    "end": "364970"
  },
  {
    "text": "and you'll have a unique\nway to go to the right. And so that's path 1, this\nis path 2, this is path 3,",
    "start": "364970",
    "end": "373430"
  },
  {
    "text": "and this is path 4. And so if I-- an\ninteresting query.",
    "start": "373430",
    "end": "380720"
  },
  {
    "text": "Well, an interesting query is\nsomething like I want to know, is this vertex\nconnected to this one?",
    "start": "380720",
    "end": "386877"
  },
  {
    "text": "And it's not so easy\nto figure it out, because you have to sort\nof walk through this path to figure that out.",
    "start": "386877",
    "end": "392349"
  },
  {
    "text": "We're going to think of each\nof these perfect matchings as defining a permutation on the\nvertices, on the column really.",
    "start": "392349",
    "end": "401060"
  },
  {
    "text": "So you start with the\nidentity permutation, and then some things get\nswapped around, that's pi 1.",
    "start": "401060",
    "end": "406480"
  },
  {
    "text": "Something gets swapped\naround again, that's pi 2. Somethings get swapped\naround here, that's pi 3. And then this position would\nbe pi 3 of pi 2 of pi 1",
    "start": "406480",
    "end": "417500"
  },
  {
    "text": "of vertex 4. We call this vertex 4.",
    "start": "417500",
    "end": "425960"
  },
  {
    "text": "Or row, row 4. So in some sense, we have\nto compose permutations.",
    "start": "425960",
    "end": "431990"
  },
  {
    "text": "I'll call this pi 1, circle\npi 2, circle pi 3 of 4.",
    "start": "431990",
    "end": "440132"
  },
  {
    "text": "And we're going to\nshow, basically, composing permutations is\ntough when you can change those permutations dynamically.",
    "start": "440132",
    "end": "446630"
  },
  {
    "text": "So what we're going\nto do is a series of block operations,\nwhich change or query",
    "start": "446630",
    "end": "457130"
  },
  {
    "text": "entire permutations. So here, an update is going to\nbe a whole bunch of insertions",
    "start": "457130",
    "end": "465470"
  },
  {
    "text": "and deletions of edges. Basically, what we want to\ndo is set pi i equal to pi.",
    "start": "465470",
    "end": "473966"
  },
  {
    "text": "So that's what update\nof i comma pi does. It changes an entire\nperfect matching",
    "start": "473966",
    "end": "480110"
  },
  {
    "text": "to be a specified permutation. So how do you do that? Well, you delete\nall the edges that",
    "start": "480110",
    "end": "485300"
  },
  {
    "text": "are in the existing\npermutation, then you insert all the new edges. So this can be done in square\nroot of n edge deletions",
    "start": "485300",
    "end": "495200"
  },
  {
    "text": "and insertions. ",
    "start": "495200",
    "end": "503790"
  },
  {
    "text": "So it's a bulk update of\nsquare root of n operations. And so this could only\nmake our problem easier,",
    "start": "503790",
    "end": "508919"
  },
  {
    "text": "because we're given\nsquare root of n updates that we all need to do at once. So you could amortize\nover them, you",
    "start": "508920",
    "end": "515849"
  },
  {
    "text": "could do lots of\ndifferent things, but we're sure that won't help.",
    "start": "515850",
    "end": "522059"
  },
  {
    "text": "And then we have a\nquery, and the query is going to be a\nlittle bit weird,",
    "start": "522059",
    "end": "529609"
  },
  {
    "text": "and it's also going to make\nthe proof a little bit more awkward. But what it asks is if I look at\nthe composition of pi j, from 1",
    "start": "529609",
    "end": "543570"
  },
  {
    "text": "up to i. This is 1. So I want to know is that\ncomposition equal to pi?",
    "start": "543570",
    "end": "552660"
  },
  {
    "text": "Yes or no? This is what I'll call verify\nsum, sum meaning composition.",
    "start": "552660",
    "end": "558720"
  },
  {
    "text": "But the sum terminology comes\nfrom a different problem, which we won't\ntalk about directly here, called partial sums.",
    "start": "558720",
    "end": "565140"
  },
  {
    "text": "Partial sums is\nbasically this problem, you can change\nnumbers in an array, and you can compute the\nprefix sum from 1 up to i.",
    "start": "565140",
    "end": "573440"
  },
  {
    "text": "Here we're not computing it. Why are we not computing it? Because actually figuring out\nwhat pi 3, or pi 2 of pi 1",
    "start": "573440",
    "end": "581370"
  },
  {
    "text": "is of something is\ntricky in this setting. The operations we're given\nare, given two vertices,",
    "start": "581370",
    "end": "588120"
  },
  {
    "text": "are they connected by a path? So to figure out the other end\nof this path, that requires--",
    "start": "588120",
    "end": "596989"
  },
  {
    "text": "I mean, it's hard to figure\nout where the other end is. If I told you is it this one?",
    "start": "596989",
    "end": "602010"
  },
  {
    "text": "Then I can answer that question\nwith just a connectivity query. So verify sum can be done\nwith order square root",
    "start": "602010",
    "end": "609490"
  },
  {
    "text": "of n connectivity queries. ",
    "start": "609490",
    "end": "616530"
  },
  {
    "text": "Whereas computing the sum could\nnot be, as far as we know.",
    "start": "616530",
    "end": "622770"
  },
  {
    "text": "If I tell you what that\ncomposition is supposed to be, I can check does 4 go to 1?",
    "start": "622770",
    "end": "629279"
  },
  {
    "text": "Yes or no? Does 3 go to 3? Yes or no? Does 2 go to 4?",
    "start": "629280",
    "end": "635520"
  },
  {
    "text": "Yes or no? Does 1 go to 2? Yes or no? So with 4 queries, I can\ncheck whether the permutation",
    "start": "635520",
    "end": "641910"
  },
  {
    "text": "is what it is. If any of those fail,\nthen I return no.",
    "start": "641910",
    "end": "647060"
  },
  {
    "text": " So the way this proceeds is\nfirst we proved a lower bound",
    "start": "647060",
    "end": "653400"
  },
  {
    "text": "on partial sums,\nwhich is computing this value when you're not\ntold what the answer is.",
    "start": "653400",
    "end": "661260"
  },
  {
    "text": "And then we extended that,\nand we'll do such a proof here today. First, we're going to prove\na lower bound on the sum",
    "start": "661260",
    "end": "666466"
  },
  {
    "text": "operation, which is\ncomputing this value that's on our outline over\nhere, sum lower bound.",
    "start": "666466",
    "end": "674640"
  },
  {
    "text": "And then we'll extend that and\nmake the argument a little bit more complicated, then we'll\nget an actual connectivity lower",
    "start": "674640",
    "end": "680940"
  },
  {
    "text": "bound, a lower\nbound on verify sum. OK, but obviously\nif we can prove",
    "start": "680940",
    "end": "686010"
  },
  {
    "text": "that these operations\ntake a long time to do, we can prove that these original\noperations take a long time",
    "start": "686010",
    "end": "693149"
  },
  {
    "text": "to do. So what we claim is that\nsquare root of n updates,",
    "start": "693150",
    "end": "706699"
  },
  {
    "text": "these block updates plus square\nof n verify some queries,",
    "start": "706700",
    "end": "718260"
  },
  {
    "text": "require root n times\nroot n log n cell probes.",
    "start": "718260",
    "end": "732220"
  },
  {
    "start": "732220",
    "end": "739189"
  },
  {
    "text": "I guess this is the\namortized claim. So if I want to do root n\nupdates and root n queries,",
    "start": "739190",
    "end": "745070"
  },
  {
    "text": "and I take root n times\nroot n times log n-- funny way of writing n log n-- cell probes, then\nif I divide through,",
    "start": "745070",
    "end": "752436"
  },
  {
    "text": "I want the amortized\nlower bound, I lose one of these\nroot ns, because I'm doing different operations.",
    "start": "752436",
    "end": "758030"
  },
  {
    "text": "I lose another root n,\nbecause each of these updates corresponds to\nroot n operations. Each of the verify\nsums corresponds",
    "start": "758030",
    "end": "763370"
  },
  {
    "text": "to root n operations. So overall per operation,\nper original operation of edge deletion insertion\nor connectivity query,",
    "start": "763370",
    "end": "770660"
  },
  {
    "text": "I'm paying log n per operation. So if I can prove this claim,\nthen I get this theorem.",
    "start": "770660",
    "end": "777474"
  },
  {
    "text": "All clear? So now we've reduced the problem\nto these bulk operations, we'll just be thinking\nabout the bulk operations,",
    "start": "777474",
    "end": "784080"
  },
  {
    "text": "update verify sum. We won't think about\nedge deletion insertions and connectivity\nqueries anymore. ",
    "start": "784080",
    "end": "794794"
  },
  {
    "text": "OK.  So this is just sort\nof the general set up",
    "start": "794794",
    "end": "800600"
  },
  {
    "text": "of what the graphs are\ngoing to look like. And now I'm going to tell\nyou what sequence of updates and verify sums we're actually\ngoing to do that are bad.",
    "start": "800600",
    "end": "808840"
  },
  {
    "text": "This is the bad access sequence. ",
    "start": "808840",
    "end": "819930"
  },
  {
    "text": "And this is actually something\nwe've seen before in lecture 6, I think, the binary\nsearch tree stuff. ",
    "start": "819930",
    "end": "829300"
  },
  {
    "text": "We're going to look at\nthe bit reversal sequence. ",
    "start": "829300",
    "end": "840620"
  },
  {
    "text": "So you may recall a\nbit reversal sequence. You take binary numbers in\norder, reverse the bits.",
    "start": "840620",
    "end": "854580"
  },
  {
    "text": "So this becomes 000, 100, 010,\n110, 001, 101, 011, and 111.",
    "start": "854580",
    "end": "868370"
  },
  {
    "text": "So those are the\nreversed strings.",
    "start": "868370",
    "end": "873620"
  },
  {
    "text": "And then you reinterpret\nthose as regular numbers. So this is 0, 4,\n2, 6, and then it",
    "start": "873620",
    "end": "883243"
  },
  {
    "text": "should be the same thing,\nbut the odd version. So I have 1, 5, 3, 7.",
    "start": "883244",
    "end": "889100"
  },
  {
    "text": " OK, I claimed, I think\nprobably didn't prove,",
    "start": "889100",
    "end": "896270"
  },
  {
    "text": "that this bit reversal sequence\nhas a high Wilber lower bound. And so any binary search tree\naccessing items in this order",
    "start": "896270",
    "end": "904890"
  },
  {
    "text": "requires log n per operation. And we want log n\nper operation here, so it seems like a\ngood choice, why not?",
    "start": "904890",
    "end": "910430"
  },
  {
    "text": "So we're going to follow\nthis access sequence. And sorry, I've\nchanged notation here, we're going to number\nthe permutations from 0",
    "start": "910430",
    "end": "918320"
  },
  {
    "text": "to root n minus 1 now. And assume root n\nis a power of 2,",
    "start": "918320",
    "end": "924270"
  },
  {
    "text": "so the bit reversal\nsequence is well defined. And then we are going to do\ntwo things for each such i.",
    "start": "924270",
    "end": "934940"
  },
  {
    "text": "We're going to do a\nverify sum operation. ",
    "start": "934940",
    "end": "949010"
  },
  {
    "text": "Actually maybe it is\nstarting at 1, I don't know. It doesn't matter. And then we'll do an update",
    "start": "949010",
    "end": "966250"
  },
  {
    "text": "OK, so let's see. This pi random is just a\nuniform random permutation,",
    "start": "966250",
    "end": "971860"
  },
  {
    "text": "it's computed fresh every time. So we're just re-randomizing\npi i in this operation.",
    "start": "971860",
    "end": "980380"
  },
  {
    "text": "Before we do that,\nwe're checking that the sum, the composition\nof all the permutations up",
    "start": "980380",
    "end": "985600"
  },
  {
    "text": "to position i, is what it is. So this is the\nactual value here,",
    "start": "985600",
    "end": "991300"
  },
  {
    "text": "and we're verifying that\nthat is indeed the sum. So this will always return yes.",
    "start": "991300",
    "end": "999100"
  },
  {
    "text": "But data structure\nhas to be correct. So it needs to really verify\nthat that is the case.",
    "start": "999100",
    "end": "1005050"
  },
  {
    "text": "There's the threat that maybe\nwe gave the wrong answer here, and it needs to double\ncheck that that is indeed",
    "start": "1005050",
    "end": "1010170"
  },
  {
    "text": "the right answer. It may seem a little weird,\nbut we'll see why it works. So this is the bad\naccess sequence.",
    "start": "1010170",
    "end": "1016410"
  },
  {
    "text": "Just do a query, do an update\nin this weird order in i.",
    "start": "1016410",
    "end": "1023540"
  },
  {
    "text": "OK, and big idea is to\nbuild a nice balanced binary",
    "start": "1023540",
    "end": "1031230"
  },
  {
    "text": "tree over time. ",
    "start": "1031230",
    "end": "1038079"
  },
  {
    "text": "So we have on the ground\nhere 0, 4, 2, 6, 1, 5, 3, 7.",
    "start": "1038079",
    "end": "1046514"
  },
  {
    "text": "And when I write 5, I\nmean verify sum of 5, and update permutation 5.",
    "start": "1046514",
    "end": "1053820"
  },
  {
    "text": "And then we can build\na binary tree on that. ",
    "start": "1053820",
    "end": "1061900"
  },
  {
    "text": "And for each node\nin this tree, we have the notion\nof a left subtree, and we have the notion\nof a right subtree.",
    "start": "1061900",
    "end": "1068010"
  },
  {
    "text": "And cool thing about\nbit reversal sequence is this nice self-similarity. If you look at the left\nsubtree of any node",
    "start": "1068010",
    "end": "1075330"
  },
  {
    "text": "and the right subtree of any of\nnode, those items interleave. If you look at the sorted\norder, it's 1 on the left,",
    "start": "1075330",
    "end": "1080910"
  },
  {
    "text": "3 on the right, 5 on the\nleft, 7 on the right. They always\nperfectly interleave, because this thing is\ndesigned to interleave",
    "start": "1080910",
    "end": "1086520"
  },
  {
    "text": "at every possible level. So that's the fact\nwe're going to use.",
    "start": "1086520",
    "end": "1092190"
  },
  {
    "text": "We're going to analyze each node\nseparately, and talk about what",
    "start": "1092190",
    "end": "1098669"
  },
  {
    "text": "information has to be\ncarried from the left subtree to the right subtree.",
    "start": "1098670",
    "end": "1104340"
  },
  {
    "text": "In particular, we're\ninterested in the updates being done on the left subtree,\nbecause here we change pi 1,",
    "start": "1104340",
    "end": "1109410"
  },
  {
    "text": "we change pi 5. And the query's being\ndone on the right subtree, because here we\nquery 3, we query 7.",
    "start": "1109410",
    "end": "1116610"
  },
  {
    "text": "When we query 3, that\nqueries everything, all the permutations, up to 3. It's a composition of\nall permutations up to 3.",
    "start": "1116610",
    "end": "1123379"
  },
  {
    "text": "So in particular it involves 1. So the claim is going to be\nthat the permutation that we set in 1 has to be carried\nover to this query.",
    "start": "1123380",
    "end": "1131220"
  },
  {
    "text": "And similarly, a\nchanging permutation 5 will affect the query for 7. Also query, the update for 1,\nwill affect the query for 7.",
    "start": "1131220",
    "end": "1140550"
  },
  {
    "text": "So we need to formalize\nthat little bit. ",
    "start": "1140550",
    "end": "1150630"
  },
  {
    "text": "So here is the claim. ",
    "start": "1150630",
    "end": "1158020"
  },
  {
    "text": "For every node in\nthe tree, say it",
    "start": "1158020",
    "end": "1168760"
  },
  {
    "text": "has l leaves in its subtree--",
    "start": "1168760",
    "end": "1175400"
  },
  {
    "start": "1175400",
    "end": "1182742"
  },
  {
    "text": "This should be a comma and\nthis should be a colon. Here's what we say.",
    "start": "1182742",
    "end": "1191060"
  },
  {
    "text": "During the right subtree\nof v, so right subtree corresponds to an\ninterval of time.",
    "start": "1191060",
    "end": "1197850"
  },
  {
    "text": "So we're talking about\nthose operations done during the right subtree\nof v. Claim is we must",
    "start": "1197850",
    "end": "1206270"
  },
  {
    "text": "do omega l root n cell probes-- ",
    "start": "1206270",
    "end": "1215898"
  },
  {
    "text": "sorry, expected cell probes. ",
    "start": "1215898",
    "end": "1221950"
  },
  {
    "text": "We are using some\nrandomness here, right? We said we're going to\nupdate each permutation",
    "start": "1221950",
    "end": "1227350"
  },
  {
    "text": "to a random value,\nso we can only make claims about the\nexpected performance. ",
    "start": "1227350",
    "end": "1234710"
  },
  {
    "text": "Fine. But that's actually\na stronger thing, it implies a lower bound, even\nfor randomized algorithms.",
    "start": "1234710",
    "end": "1241150"
  },
  {
    "text": "So if you can randomize\nyour input set.  And then not just\nany cell probes,",
    "start": "1241150",
    "end": "1249640"
  },
  {
    "text": "but they're cell probes\nthat read cells last written",
    "start": "1249640",
    "end": "1255490"
  },
  {
    "text": "during the left subtree. ",
    "start": "1255490",
    "end": "1268440"
  },
  {
    "text": "So this is what I was saying\nat a high level before. We're looking at\nreads over here,",
    "start": "1268440",
    "end": "1276350"
  },
  {
    "text": "to cells that are\nwritten over here. Because we claim the\nupdates over here",
    "start": "1276350",
    "end": "1282139"
  },
  {
    "text": "have to store some\ninformation that is-- whatever the updates that happen\nover here influence the queries",
    "start": "1282140",
    "end": "1289134"
  },
  {
    "text": "that happen over here. So these queries have\nto read the data that was written over here. And specifically, we're\nclaiming at least l root n",
    "start": "1289134",
    "end": "1296990"
  },
  {
    "text": "cell probes have to\nbe read over here, from cells that were written--",
    "start": "1296990",
    "end": "1302420"
  },
  {
    "text": "that were basically just\nwritten in the left subtree. If we could prove this, then\nwe get our other claim--",
    "start": "1302420",
    "end": "1310490"
  },
  {
    "text": "this one over here, that root\nn updates, and root n verifies sums that require\nthis much time.",
    "start": "1310490",
    "end": "1317899"
  },
  {
    "text": "The difference\nis-- well, here we have an l, for an l leaf tree.",
    "start": "1317900",
    "end": "1323900"
  },
  {
    "text": "And so what I'd like to\ndo is sum this lower bound over every node in the tree.",
    "start": "1323900",
    "end": "1329390"
  },
  {
    "text": "I need to check that\nthat is valid to do. So let's do that. ",
    "start": "1329390",
    "end": "1345750"
  },
  {
    "text": "OK, for every node\nv, we are claiming there's a certain number of\nreads that happen over here,",
    "start": "1345750",
    "end": "1350900"
  },
  {
    "text": "that correspond to\nwrites over here. But let's say you\nlook at the parent of v, which is over here.",
    "start": "1350900",
    "end": "1357184"
  },
  {
    "text": "This thing is also\nin the right subtree, and we're claiming there's\nsome number of reads on the right subtree, that read\nthings that are written over",
    "start": "1357184",
    "end": "1363180"
  },
  {
    "text": "on the left. The worry would be that\nthe reads we counted here, we also count at\nthe next level up. We don't want to double\ncount in our lower bounds.",
    "start": "1363180",
    "end": "1369723"
  },
  {
    "text": "If we're able to sum them up,\nwe can't be double counting. But the claim is\nwe're not double",
    "start": "1369723",
    "end": "1375170"
  },
  {
    "text": "counting, because if you\nlook at any particular-- any read-- so here's time, and\nsuppose you do a read here.",
    "start": "1375170",
    "end": "1382990"
  },
  {
    "text": "You're reading a cell that was\nwritten sometime in the past, if it was never written, it's\na not very interesting read, it communicates no information.",
    "start": "1382990",
    "end": "1389779"
  },
  {
    "text": "So there's some write\nin the past that changed the cell that's just read.",
    "start": "1389780",
    "end": "1395420"
  },
  {
    "text": "And we are going\nto count this read at a particular node, namely\nthe lca of those two times.",
    "start": "1395420",
    "end": "1403827"
  },
  {
    "text": "So if you look at\nthe lca of the times of the reads and the writes,\nthat is the single note that we'll think\nabout that read that",
    "start": "1403827",
    "end": "1409755"
  },
  {
    "text": "happened in the right\nsubtree, that was written in the left subtree. So no double counting, because\nwe only count at the lca.",
    "start": "1409755",
    "end": "1425465"
  },
  {
    "text": " The other thing that we\nneed to be able to do is, because this is an\nexpected lower bound,",
    "start": "1425465",
    "end": "1432270"
  },
  {
    "text": "we need linearity\nof expectation. But expectation is indeed\nlinear, so we're all set.",
    "start": "1432270",
    "end": "1437300"
  },
  {
    "text": " OK, so all that's left\nis a little bit of common",
    "start": "1437300",
    "end": "1443860"
  },
  {
    "text": "[INAUDIBLE] if we take l\nroot n, where l is the size of the subtree\nbelow a given node,",
    "start": "1443860",
    "end": "1450290"
  },
  {
    "text": "we sum that up over all nodes,\nand it's a balanced binary search tree-- or a balanced binary tree, I\nshould say, not a search tree.",
    "start": "1450290",
    "end": "1458870"
  },
  {
    "text": "What do we get? Well, every leaf appears\nin log n subtrees.",
    "start": "1458870",
    "end": "1464370"
  },
  {
    "text": "So we get the total size of\nthe tree times log n for this,",
    "start": "1464370",
    "end": "1470740"
  },
  {
    "text": "and we get another\nroot n over here. The total size of\nthe tree is root n. So we get this root\nn log n, that's",
    "start": "1470740",
    "end": "1480980"
  },
  {
    "text": "when you sum up the l part. Then everything gets\nmultiplied by root n,",
    "start": "1480980",
    "end": "1486169"
  },
  {
    "text": "and that becomes\nour lower bound, and that's exactly\nwhat we need over here.",
    "start": "1486170",
    "end": "1491789"
  },
  {
    "text": "So now this claim is done. Maybe I should do a check mark.",
    "start": "1491790",
    "end": "1497000"
  },
  {
    "text": "Provided we can\nprove this claim. So now our goal is\nto prove this thing. And now we're in a\nmore local world,",
    "start": "1497000",
    "end": "1503520"
  },
  {
    "text": "looking at a single node,\ncounting reads over here, the corresponding\nrights over there. And then you just add\nup those lower bounds,",
    "start": "1503520",
    "end": "1509840"
  },
  {
    "text": "you get what you want. So this is where\nthe log comes from, because it's a balanced tree. And there's log n levels in\na balanced tree, that's where",
    "start": "1509840",
    "end": "1517160"
  },
  {
    "text": "we're getting our lower bound. The root n's are just keeping\ntrack of the size of the things we're manipulating.",
    "start": "1517160",
    "end": "1522641"
  },
  {
    "text": " All right.",
    "start": "1522641",
    "end": "1530170"
  },
  {
    "text": "So it remains to\nprove this claim. ",
    "start": "1530170",
    "end": "1538169"
  },
  {
    "text": "Prove that claim,\nwe get that claim, and then we get this theorem. ",
    "start": "1538170",
    "end": "1565630"
  },
  {
    "text": "So proof of claim. ",
    "start": "1565630",
    "end": "1576130"
  },
  {
    "text": "We're going to do an\ninformation theoretic argument, so let me set it up.",
    "start": "1576130",
    "end": "1581950"
  },
  {
    "text": "It's again, it's\nmaking this claim I said before, that\nthe permutations that get written over\nhere somehow have",
    "start": "1581950",
    "end": "1587830"
  },
  {
    "text": "to be communicated to\nthe queries over here, because they matter.",
    "start": "1587830",
    "end": "1593380"
  },
  {
    "text": "Because the permutations\nthat get said over here changed the answers to\nall the queries over here,",
    "start": "1593380",
    "end": "1599290"
  },
  {
    "text": "because of the interleaving\nbetween left and right. So how are we going\nto formalize that?",
    "start": "1599290",
    "end": "1605710"
  },
  {
    "text": "Well, left subtree\ndoes l/2 updates",
    "start": "1605710",
    "end": "1617950"
  },
  {
    "text": "with l/2 random permutations,\nuniform random permutations,",
    "start": "1617950",
    "end": "1626613"
  },
  {
    "text": "because every node\ndoes an update.  And so the information\ntheoretic idea",
    "start": "1626614",
    "end": "1633760"
  },
  {
    "text": "is that if we were to somehow\nencode those permutations,",
    "start": "1633760",
    "end": "1645790"
  },
  {
    "text": "That encoding must\nuse omega l log l--",
    "start": "1645790",
    "end": "1654720"
  },
  {
    "text": "l? No, I'm sorry. It's not right. Off by some root n factors\nhere, l root n log n.",
    "start": "1654720",
    "end": "1665905"
  },
  {
    "text": "OK, each permutation\nmust take root n log root n bits to encode.",
    "start": "1665905",
    "end": "1671470"
  },
  {
    "text": "If you have a\nrandom permutation, expected number of bits have\na very high probability. Almost every\npermutation requires",
    "start": "1671470",
    "end": "1677530"
  },
  {
    "text": "root n log root n bits. I'm not going to worry\nabout constant factors, put an omega here, so the\nroot n turns into an n.",
    "start": "1677530",
    "end": "1684197"
  },
  {
    "text": "And then we've got\nl over two of them, so again, ignoring constant\nfactors, that's l root n log n",
    "start": "1684197",
    "end": "1689691"
  },
  {
    "text": "bits.  And this is just\ninformation, theoretic fact,",
    "start": "1689691",
    "end": "1697509"
  },
  {
    "text": "our common [INAUDIBLE]\ntheory fact. And once we know that,\nthe idea is let's",
    "start": "1697510",
    "end": "1705460"
  },
  {
    "text": "find an encoding that's\nbetter than this, and get a contradiction. Of course we shouldn't\nget a contradiction",
    "start": "1705460",
    "end": "1711430"
  },
  {
    "text": "unless this claim is false. So either this claim is\ntrue and we're happy, but if somehow the\nword not enough cell",
    "start": "1711430",
    "end": "1718240"
  },
  {
    "text": "reads on the right, that\ndid things that were written on the left, then\nwe will, from that,",
    "start": "1718240",
    "end": "1723549"
  },
  {
    "text": "get a smaller encoding of\nthe update permutations",
    "start": "1723550",
    "end": "1728590"
  },
  {
    "text": "that happen on the left. If we could somehow\ndo that, then we can get a contradiction, and\ntherefore conclude the claim",
    "start": "1728590",
    "end": "1735130"
  },
  {
    "text": "is in fact true. So, if the claim fails, we'll\nfind a smaller encoding, which",
    "start": "1735130",
    "end": "1755800"
  },
  {
    "text": "will give us a contradiction. ",
    "start": "1755800",
    "end": "1764050"
  },
  {
    "text": "All right, so let's set up\nthis problem a little bit more.",
    "start": "1764050",
    "end": "1772260"
  },
  {
    "text": "I'm going to--\nbecause we're really just interested in this subtree\nv stuff on the left, stuff",
    "start": "1772260",
    "end": "1779460"
  },
  {
    "text": "on the right, but this of course\nlives in a much bigger tree, there's stuff that\nhappens over here. This I will call the past.",
    "start": "1779460",
    "end": "1786870"
  },
  {
    "text": "I'm just going to assume we\nknow everything about the past. Everything to the\nleft of the subtree,",
    "start": "1786870",
    "end": "1795090"
  },
  {
    "text": "we can assume that we know. When I say we know,\nwhat do we know? We know all the updates, we know\nall the queries that happen,",
    "start": "1795090",
    "end": "1802020"
  },
  {
    "text": "and we know, at this\nmoment in particular, what is the state of\nthe data structure. Because this claim has\nnothing to do with this stuff,",
    "start": "1802020",
    "end": "1809760"
  },
  {
    "text": "it's all about reads here that\ncorresponds to writes here. So we can just assume we know\neverything up to this point.",
    "start": "1809760",
    "end": "1815610"
  },
  {
    "text": "In our encoding,\nthis is a key point. One way to say this in\na probabilistic sense",
    "start": "1815610",
    "end": "1821160"
  },
  {
    "text": "is we're conditioning on\nwhat happened over here on the left, what\nupdates happened. And if we can prove that\nwhatever we need to happen here",
    "start": "1821160",
    "end": "1828450"
  },
  {
    "text": "holds no matter what\nthe condition is, then it will hold overall. So that's probabilistic\njustification",
    "start": "1828450",
    "end": "1835799"
  },
  {
    "text": "for why we can assume\nwe know the past OK. So then our goal\nis to encode, this",
    "start": "1835800",
    "end": "1848312"
  },
  {
    "text": "is a little bit\ndifferent from this goal. ",
    "start": "1848312",
    "end": "1867050"
  },
  {
    "text": "What we really want to do is\nencode the update permutations on the left.",
    "start": "1867050",
    "end": "1872825"
  },
  {
    "text": "That's a little\nawkward to think about, because this is a claim\nabout how many probes happen on the right.",
    "start": "1872825",
    "end": "1878800"
  },
  {
    "text": "So instead, what\nwe're going to do is encode the query\npermutations on the right.",
    "start": "1878800",
    "end": "1884200"
  },
  {
    "text": "So there are updates over here,\nthat's what we want to encode, but we're instead going to\nencode the queries over here.",
    "start": "1884200",
    "end": "1889590"
  },
  {
    "text": "I claim if you know what\nthe results of the queries were over here,\nthen you know what",
    "start": "1889590",
    "end": "1895480"
  },
  {
    "text": "the updates were over there. Basically because of this\ninterleaving property.",
    "start": "1895480",
    "end": "1901559"
  },
  {
    "text": "So I can write that down\na little more formally. ",
    "start": "1901560",
    "end": "1914500"
  },
  {
    "text": "So if we look at\ntime here, over, let's say this is v's subtree. ",
    "start": "1914500",
    "end": "1923510"
  },
  {
    "text": "Then what we have are\na sequence of updates and a sequence of queries.",
    "start": "1923510",
    "end": "1929490"
  },
  {
    "text": " These are queries,\nand these are updates.",
    "start": "1929490",
    "end": "1938955"
  },
  {
    "text": " This is what the\nsequence looks like--",
    "start": "1938955",
    "end": "1944789"
  },
  {
    "text": "sorry, this is v's subtree,\nthis is the pi is, I should say. ",
    "start": "1944790",
    "end": "1951830"
  },
  {
    "text": "I mean, these operations are\nall happened during time, but now I'm sorting by i.",
    "start": "1951830",
    "end": "1958435"
  },
  {
    "text": "A little confusing. There are two orders\nto think about, right? There's the sequence\nover time, we're",
    "start": "1958436",
    "end": "1966820"
  },
  {
    "text": "now looking at\nsuch a left subtree where we do say 1, 5, and 3, 7. What that means-- so you're\nimagining here, this is 1,",
    "start": "1966820",
    "end": "1973690"
  },
  {
    "text": "this is 5, this is 3, this is 7. Here we're sorted by the\nvalue written down there, we're sorting by the i,\nthe pi i that they're",
    "start": "1973690",
    "end": "1980770"
  },
  {
    "text": "changing or querying. And so all the read things\nare in the right subtree of v.",
    "start": "1980770",
    "end": "1993130"
  },
  {
    "text": "And all the updates are\nin the left subtree of v.",
    "start": "1993130",
    "end": "2003090"
  },
  {
    "text": "This is the\ninterleaving property that I mentioned earlier. ",
    "start": "2003090",
    "end": "2008140"
  },
  {
    "text": "So I claim that if I encode\nthe results of the queries, namely I encode\nthese permutations,",
    "start": "2008140",
    "end": "2015990"
  },
  {
    "text": "these are like summary-- partial sums. These are prefixed sums\nof the permutation list.",
    "start": "2015990",
    "end": "2021480"
  },
  {
    "text": "Then I can figure out\nwhat the updates were. Why? Because if I figure out\nwhat this query, what",
    "start": "2021480",
    "end": "2028470"
  },
  {
    "text": "it's permutation\nis, that's the sum of all of these permutations. Now only one of them\nchanged in the left subtree,",
    "start": "2028470",
    "end": "2035250"
  },
  {
    "text": "the rest all are in the past. They were all set before\nthis time over here,",
    "start": "2035250",
    "end": "2041580"
  },
  {
    "text": "and I know everything about\nthe past, I'm assuming. So most of these I already\nknow, the one thing I don't know",
    "start": "2041580",
    "end": "2047730"
  },
  {
    "text": "is this one, but I claim\nif I know this sum,",
    "start": "2047730",
    "end": "2053010"
  },
  {
    "text": "and I know all the others,\nthen I can figure out what this one is, right? It's slightly awkward to\ndo, if I give you this,",
    "start": "2053010",
    "end": "2060469"
  },
  {
    "text": "I give you the sum of pi j from\nj equals 0 to i, or something.",
    "start": "2060469",
    "end": "2069960"
  },
  {
    "text": "I've got to-- I want to strip away all\nthese, strip away all these.",
    "start": "2069960",
    "end": "2077719"
  },
  {
    "text": "So I'm going to multiply by\nsum of pi j inverses over here,",
    "start": "2077719",
    "end": "2084658"
  },
  {
    "text": "and multiply by sum pi j-- when I say multiply,\nI mean compose.",
    "start": "2084659",
    "end": "2090760"
  },
  {
    "text": "Sum pi j inverse is\nhere, maybe let's not worry about the\nexact indices here. But the point is, this\nis all in the past,",
    "start": "2090760",
    "end": "2098220"
  },
  {
    "text": "and this is all in the past,\nso I know all these pi js, I know they're inverses.",
    "start": "2098220",
    "end": "2103750"
  },
  {
    "text": "So if I have this\ntotal sum, and I right multiply with these\ninverses, left multiply with these inverses,\nI get the one that I want.",
    "start": "2103750",
    "end": "2110400"
  },
  {
    "text": "This gives me some particular pi\nk, if I set the indices right.",
    "start": "2110400",
    "end": "2119190"
  },
  {
    "text": " OK? So if I know this query, I\nfigure out what this update is.",
    "start": "2119190",
    "end": "2126330"
  },
  {
    "text": "Now once I know what this update\nis, and I know this query, then in this sum, I know everything\nexcept this one thing.",
    "start": "2126330",
    "end": "2133440"
  },
  {
    "text": "And so by using\nthe same trick, I can figure out what\nthis update is. So now I know the\nfirst two updates,",
    "start": "2133440",
    "end": "2139230"
  },
  {
    "text": "if I then know the\nanswer to this query, I can figure out\nwhat this update is. If I know the answer\nto this query, I can figure this update.",
    "start": "2139230",
    "end": "2144231"
  },
  {
    "text": "Because they're\nperfectly interleaved, I only need to reconstruct\none update at a time.",
    "start": "2144231",
    "end": "2149290"
  },
  {
    "text": "So if I'm given-- if I've somehow encoded\nall of the queries results, all of these prefix sums,\nand I'm given the past,",
    "start": "2149290",
    "end": "2158430"
  },
  {
    "text": "then I can reconstruct\nwhat all the updates were. So that's basically saying\nthese two are the same issue.",
    "start": "2158430",
    "end": "2165570"
  },
  {
    "text": "If I can encode the verified\nsums in the right subtree, using less than l\nroot n log n bits,",
    "start": "2165570",
    "end": "2171180"
  },
  {
    "text": "then I'll get a contradiction,\nbecause it implies that from that\nsame encoding, you can also decode the\nupdate permutations",
    "start": "2171180",
    "end": "2177630"
  },
  {
    "text": "in the left subtree. So that's our goal. ",
    "start": "2177630",
    "end": "2184761"
  },
  {
    "text": "OK.  So we'd like to prove\nthis for verify sum.",
    "start": "2184761",
    "end": "2193592"
  },
  {
    "text": "But the first thing\nI'm going to do is consider an easier\nproblem, which is sum.",
    "start": "2193592",
    "end": "2199640"
  },
  {
    "text": "So suppose, basically, this\nwas not an input to the query. Suppose the query was,\nwhat is the sum of i?",
    "start": "2199640",
    "end": "2207820"
  },
  {
    "text": "Like this. I just want-- this is\nthe partial sum problem. I'm given an index\ni, I want to know",
    "start": "2207820",
    "end": "2214360"
  },
  {
    "text": "what is the permutation\nfrom pi 0 up to pi i. Now that is not--",
    "start": "2214360",
    "end": "2219720"
  },
  {
    "text": "that doesn't correspond\nto dynamic connectivity, it's a new problem. We'll first prove a lower\nbound for that problem,",
    "start": "2219720",
    "end": "2225051"
  },
  {
    "text": "and then we'll put the\nverify word back in. OK, so that's-- we're now\nhere at sum lower bound.",
    "start": "2225051",
    "end": "2234660"
  },
  {
    "text": "Where should I go?  Different-- so this is a lower\nbound on the operation sum,",
    "start": "2234660",
    "end": "2241269"
  },
  {
    "text": "as opposed to here, where\nwe're adding up lower bounds. Sorry for the\nconflation of terms.",
    "start": "2241269",
    "end": "2247490"
  },
  {
    "text": "Let's go here. ",
    "start": "2247490",
    "end": "2269319"
  },
  {
    "text": "So I'll call this a warm up. ",
    "start": "2269320",
    "end": "2278690"
  },
  {
    "text": "Suppose a query\nis sum of i, which is supposed to give you this\nprefix sum of pi j again,",
    "start": "2278690",
    "end": "2288289"
  },
  {
    "text": "sum means composition.  So this is going to be\nrelatively easy to prove,",
    "start": "2288290",
    "end": "2299560"
  },
  {
    "text": "but it's not the problem\nwe actually want to solve, we'll use it to then\nsolve the real problem.",
    "start": "2299560",
    "end": "2305660"
  },
  {
    "text": "And this is the order in which\nwe actually solve things. First, we prove a lower\nbound of partial sums.",
    "start": "2305660",
    "end": "2311200"
  },
  {
    "text": "OK, so let me give\nyou some notation, so we can really\nget at this claim.",
    "start": "2311200",
    "end": "2318910"
  },
  {
    "text": "Reading on the right,\nwriting on the left. So let r be all\nthe cells that are",
    "start": "2318910",
    "end": "2324579"
  },
  {
    "text": "read during the right subtree,\nwhich is an interval of time.",
    "start": "2324580",
    "end": "2331270"
  },
  {
    "text": " And let w be the cells\nwritten in the left subtree.",
    "start": "2331270",
    "end": "2339130"
  },
  {
    "start": "2339130",
    "end": "2352440"
  },
  {
    "text": "OK, so what we're\ntalking about over here is that r intersects\nw, those are cells that",
    "start": "2352440",
    "end": "2357645"
  },
  {
    "text": "are read during the\nright subtree, that were at some point written\nduring the left subtree, should be large.",
    "start": "2357645",
    "end": "2363505"
  },
  {
    "text": "So we want to\nprove a lower bound on the size of r intersect w. ",
    "start": "2363506",
    "end": "2370760"
  },
  {
    "text": "So if the lower\nbound doesn't hold, that means that r intersect\nw is relatively small.",
    "start": "2370760",
    "end": "2377880"
  },
  {
    "text": "So imagine a situation where\nr intersect w is very small, there's not very\nmuch information passed from the left subtree\nto the right subtree.",
    "start": "2377880",
    "end": "2384380"
  },
  {
    "text": "If r intersect w is\nsmall, then presumably I can afford to write it\ndown, I can encode it.",
    "start": "2384380",
    "end": "2389732"
  },
  {
    "text": "So that's what we're going\nto do, and we'll compute-- we'll figure out that this is\nindeed something we can afford.",
    "start": "2389732",
    "end": "2395349"
  },
  {
    "text": "I'm going to encode r\nintersect w explicitly. Meaning-- and this is a\nset of cells in memory.",
    "start": "2395350",
    "end": "2405470"
  },
  {
    "text": "So for every cell, I'm\ngoing to write down what it's address is, and what\nthe contents of the cell are.",
    "start": "2405470",
    "end": "2412310"
  },
  {
    "text": "So write down the\naddresses and the contents",
    "start": "2412310",
    "end": "2418850"
  },
  {
    "text": "for every such cell. So how many bits does that take? I'm going to say that it's r\nintersect w times log n bits.",
    "start": "2418850",
    "end": "2430115"
  },
  {
    "text": " Here's where I need to\nmention an assumption.",
    "start": "2430115",
    "end": "2435830"
  },
  {
    "text": "I'm assuming that the address\nspace is order log n bits long, that's like saying that the\nspace of your data structure",
    "start": "2435830",
    "end": "2442280"
  },
  {
    "text": "is order-- is polynomial in n. And if you want any hope of\nhaving a reasonable update",
    "start": "2442280",
    "end": "2449000"
  },
  {
    "text": "time, you need to have\npolynomial space at most. So assuming polynomial space,\neach of those addresses only",
    "start": "2449000",
    "end": "2454010"
  },
  {
    "text": "takes order log n\nbits to write down. The contents, let's say,\nalso take order log n bits",
    "start": "2454010",
    "end": "2460417"
  },
  {
    "text": "to write down.  OK, so fine.",
    "start": "2460417",
    "end": "2468880"
  },
  {
    "text": "That's-- I mean, yeah. We don't really need to\nmake those assumptions,",
    "start": "2468880",
    "end": "2474370"
  },
  {
    "text": "I don't think, but we will for\nhere to keep things simple.",
    "start": "2474370",
    "end": "2480140"
  },
  {
    "text": "So if r intersect w is\nsmall, meaning smaller than this thing, then this will\nbe small, smaller than l root",
    "start": "2480140",
    "end": "2488470"
  },
  {
    "text": "log n.  OK. So on the other hand, we know\nthat every encoding should",
    "start": "2488470",
    "end": "2498040"
  },
  {
    "text": "take l root n log n bits. And so this will\nbe a contradiction,",
    "start": "2498040",
    "end": "2504190"
  },
  {
    "text": "although we haven't quite\nencoded what we need yet, or we haven't proved\nthat, but we're getting",
    "start": "2504190",
    "end": "2510250"
  },
  {
    "text": "to be at the right point. These log ns are going\nto cancel in a moment.",
    "start": "2510250",
    "end": "2515890"
  },
  {
    "text": "So what we need to do is,\nI claim this is actually enough to encode what we need. And so all that's left is a\ndecoding algorithm for the sum",
    "start": "2515890",
    "end": "2530100"
  },
  {
    "text": "queries in the right subtree. ",
    "start": "2530100",
    "end": "2540710"
  },
  {
    "text": "So how are we going to do that? So this is my encoding,\nthese are the bits that I have written down.",
    "start": "2540710",
    "end": "2546340"
  },
  {
    "text": "So now what I\nknow, as a decoder, is I know everything\nabout the past.",
    "start": "2546340",
    "end": "2552590"
  },
  {
    "text": "I don't know what\nthese updates are, that's my whole goal, to\nfigure out what they are. I don't know what the\nresults of the queries",
    "start": "2552590",
    "end": "2558730"
  },
  {
    "text": "are, but magically, I\nknow that r intersect w. Well, not magically. I wrote it down, kept\ntrack on a piece of paper.",
    "start": "2558730",
    "end": "2565670"
  },
  {
    "text": "So that's what I know. And so the idea\nis, well, somebody",
    "start": "2565670",
    "end": "2571030"
  },
  {
    "text": "gave us a data structure,\ntells you how to do an update, tells you how to do a query. Let's run the query\nalgorithms over here.",
    "start": "2571030",
    "end": "2578557"
  },
  {
    "text": "Run that query, run\nthat query, or whatever.  It's a little hard to\nrun them, because we",
    "start": "2578557",
    "end": "2585310"
  },
  {
    "text": "don't know what happened\nin this intermediate part. But I claim r intersect w tells\nus everything we need to know.",
    "start": "2585310",
    "end": "2592430"
  },
  {
    "text": "So the decoding algorithm is\njust simulate sum queries,",
    "start": "2592430",
    "end": "2603220"
  },
  {
    "text": "simulate that algorithm. ",
    "start": "2603220",
    "end": "2615779"
  },
  {
    "text": "And let's go up here. ",
    "start": "2615780",
    "end": "2634160"
  },
  {
    "text": "How do we simulate\nthat algorithm? Well, the algorithm\nmakes a series of cell reads, and maybe writes, but\nreally we care about the reads.",
    "start": "2634160",
    "end": "2643580"
  },
  {
    "text": "Writes are pretty\neasy to simulate. ",
    "start": "2643580",
    "end": "2661589"
  },
  {
    "text": "There are three cases for reads. It could be that the thing\nyou're trying to read was written in\nthe right subtree,",
    "start": "2661590",
    "end": "2667340"
  },
  {
    "text": "it could be that it was\nwritten in the left subtree, or it could be it was\nwritten in the past, before we got to v subtree.",
    "start": "2667340",
    "end": "2676177"
  },
  {
    "text": "Now we don't necessarily\nknow which case we're in, but I claim we'll be\nable to figure it out. Because any cells that are\nwritten in the right subtree,",
    "start": "2676177",
    "end": "2685788"
  },
  {
    "text": "we've just been running\nthe simulation algorithm, so every time we do\nit right, we just can store it off to the side.",
    "start": "2685789",
    "end": "2691460"
  },
  {
    "text": "So when we're doing\nsimulations, we don't need that the\nsimulation takes low space.",
    "start": "2691460",
    "end": "2697100"
  },
  {
    "text": "We just need that the input--\nthese decoding algorithms doesn't have to be\nlow space, we just need that the\nencoding was small.",
    "start": "2697100",
    "end": "2702830"
  },
  {
    "text": "We've already made\nthe encoding small. And so the decoding\nalgorithm can spend lots of time\nand space, we just",
    "start": "2702830",
    "end": "2708289"
  },
  {
    "text": "need to show that decoding\nalgorithm can recover what it's supposed to recover. It's like a\ncompression algorithm,",
    "start": "2708290",
    "end": "2713430"
  },
  {
    "text": "to show there's some\nway to decompress, could take arbitrarily\namount of time and space. So when we're simulating\nthe right subtree,",
    "start": "2713430",
    "end": "2720020"
  },
  {
    "text": "and we simulate not only the sum\nqueries, but also the updates. ",
    "start": "2720020",
    "end": "2727370"
  },
  {
    "text": "So whatever gets written\nduring that simulation, we just store it, and so\nit's easy to reread it.",
    "start": "2727370",
    "end": "2733610"
  },
  {
    "text": "If it was written\nin the left subtree, well, that is r intersect w. ",
    "start": "2733610",
    "end": "2740990"
  },
  {
    "text": "And we've written\ndown r intersect w. So we can detect\nthat this happened, because we look\nat r intersect w,",
    "start": "2740990",
    "end": "2747000"
  },
  {
    "text": "we see, oh that\nword was in there, that address was\nin there, and so we read the contents\nfrom the encoding.",
    "start": "2747000",
    "end": "2755119"
  },
  {
    "text": "If it was in the\npast, it's also easy.",
    "start": "2755120",
    "end": "2760420"
  },
  {
    "text": "We already know it. OK, so basically what we do--",
    "start": "2760420",
    "end": "2767690"
  },
  {
    "text": "what the simulation algorithm\nis doing is it says, OK, let's assume\nthat main memory was whatever it was at this point.",
    "start": "2767690",
    "end": "2774477"
  },
  {
    "text": "That data structure, I mean we\nknow everything about the past, so we know what the\ndata structure looked like at this moment, store that.",
    "start": "2774477",
    "end": "2780710"
  },
  {
    "text": "Update all of the cells\nthat are in r intersect w given by our encoding.",
    "start": "2780710",
    "end": "2786050"
  },
  {
    "text": "And then just run the algorithm. So we're sort of jumping\ninto this moment in time",
    "start": "2786050",
    "end": "2791480"
  },
  {
    "text": "with a slightly\nweird data structure. It's not the correct\ndata structure.",
    "start": "2791480",
    "end": "2797244"
  },
  {
    "text": "It's not what the data\nstructure will actually look like at this point,\nbut it's close enough. Because anything\nthat's read here,",
    "start": "2797244",
    "end": "2804530"
  },
  {
    "text": "either was written\nhere, in which case it's correct, or was\nwritten here, in which case it's correct because\nr intersect w had it.",
    "start": "2804530",
    "end": "2813250"
  },
  {
    "text": "Or isn't it written\nhere, in which case-- maybe it's always correct.",
    "start": "2813250",
    "end": "2819060"
  },
  {
    "text": "No, no. See there could be\nsome writes that happened here, where there's no\ncorresponding read over here.",
    "start": "2819060",
    "end": "2824397"
  },
  {
    "text": "So the data structure may\nhave been changed in ways here that don't matter for this\nexecution of the right subtree.",
    "start": "2824397",
    "end": "2830430"
  },
  {
    "text": "So any rights that happened\nhere to some cell probe, to some cell, where that\ncell is not read over here,",
    "start": "2830430",
    "end": "2835496"
  },
  {
    "text": "we don't care\nabout, because they don't affect the simulation. So we have a good\nenough data structure",
    "start": "2835496",
    "end": "2840830"
  },
  {
    "text": "here, it may not be\ncompletely accurate, but it's accurate enough\nto run these queries.",
    "start": "2840830",
    "end": "2846170"
  },
  {
    "text": "Once we run the queries,\nthe queries output the sums. That's what we're assuming in\nthis warm up, we run the query,",
    "start": "2846170",
    "end": "2851450"
  },
  {
    "text": "we get the sum. Once I have that sum,\nas I argued before, once you know what the\nresults of these queries were,",
    "start": "2851450",
    "end": "2857510"
  },
  {
    "text": "I can figure out what the\narguments to the updates were, by doing that inverse\nmultiplication stuff.",
    "start": "2857510",
    "end": "2864809"
  },
  {
    "text": "So that's actually it. What this implies is that this\nis a correct encoding, which",
    "start": "2864810",
    "end": "2871650"
  },
  {
    "text": "means that this order,\nr intersect w times log n bits that we use to encode,\nmust be at least this big.",
    "start": "2871650",
    "end": "2882690"
  },
  {
    "text": "Because we know any\nencoding is going to require at least that\nmany bits, l root n log n.",
    "start": "2882690",
    "end": "2890005"
  },
  {
    "text": " And so the log ns\ncancel, and we're",
    "start": "2890005",
    "end": "2896280"
  },
  {
    "text": "left with r intersect\nw is at least l root n. And this is exactly the quantity\nwe cared about for this claim.",
    "start": "2896280",
    "end": "2904102"
  },
  {
    "text": "So same thing, r intersect\nw is at least l root n.",
    "start": "2904102",
    "end": "2909450"
  },
  {
    "text": "OK, so warm up done. Any questions about the warm up? So in this weird\nproblem, which does not",
    "start": "2909450",
    "end": "2915869"
  },
  {
    "text": "correspond to\ndynamic connectivity, because it's this other problem,\nprefix sums computation.",
    "start": "2915870",
    "end": "2923190"
  },
  {
    "text": "We get the intended lower bound,\nyou need log n per operation. Or you need root n log\nn per block operation.",
    "start": "2923190",
    "end": "2930710"
  },
  {
    "text": "OK, but this is not\nwhat we really want, we really want a lower\nbound on verify sum. Where you're given as an\nargument the permutation that",
    "start": "2930710",
    "end": "2939060"
  },
  {
    "text": "we're talking about over here. So this goal is not the\nright goal for verify sum,",
    "start": "2939060",
    "end": "2946170"
  },
  {
    "text": "in some sense. Well, sort of the right goal. It's a little awkward\nthough, because they're given as inputs to the queries.",
    "start": "2946170",
    "end": "2952980"
  },
  {
    "text": "So what is there to encode? Well, we can still set\nit up in a useful way.",
    "start": "2952980",
    "end": "2961230"
  },
  {
    "text": "Same goal, slightly restated. ",
    "start": "2961230",
    "end": "2982230"
  },
  {
    "text": "So this is the last step\nto verify sum lower bound. ",
    "start": "2982230",
    "end": "3006829"
  },
  {
    "text": "So here's the set up. ",
    "start": "3006830",
    "end": "3065010"
  },
  {
    "text": "OK, so slightly\ndifferent set up here. Here I assumed that\nwe just knew the past.",
    "start": "3065010",
    "end": "3070670"
  },
  {
    "text": "I also basically assumed\nthese two things, that we didn't know what\nthe update permutations were",
    "start": "3070670",
    "end": "3076814"
  },
  {
    "text": "in the left subtree,\nand we didn't know what the answers\nto the queries were in the right subtree. Now I'm going to\nassume we don't even",
    "start": "3076814",
    "end": "3083150"
  },
  {
    "text": "know what we're passing\ninto the queries, because that is the information\nwe're trying to figure out. These two things are\nbasically the same,",
    "start": "3083150",
    "end": "3089630"
  },
  {
    "text": "if you knew all the\nupdate permutations, you could figure out all\nthe query permutations. If you knew all the\nquery permutations,",
    "start": "3089630",
    "end": "3095059"
  },
  {
    "text": "you could figure out all\nthe update permutations. That's what we argued\nover here, it's enough to figure out\nquery permutations,",
    "start": "3095060",
    "end": "3103520"
  },
  {
    "text": "then we could figure out\nthe update permutations. It's just a little more\nawkward, because now there",
    "start": "3103520",
    "end": "3109410"
  },
  {
    "text": "are arguments to queries. And so if we did this\nsimulation, right? We'd simulate--\nwe don't know how",
    "start": "3109410",
    "end": "3114710"
  },
  {
    "text": "to simulate the query algorithm,\nbecause it's supposed to be, given the argument,\nwhich is what we're trying to figure out.",
    "start": "3114710",
    "end": "3121294"
  },
  {
    "text": "So we can't simulate\nthe query algorithm.",
    "start": "3121294",
    "end": "3126460"
  },
  {
    "text": "It's kind of annoying,\nbut otherwise the set up is roughly the same. The one thing we know\nis that the query",
    "start": "3126460",
    "end": "3131790"
  },
  {
    "text": "is supposed to return\nyes, because if you look at this bad\naccess sequence,",
    "start": "3131790",
    "end": "3137619"
  },
  {
    "text": "it is designed to\nalways return yes. So that is a thing we know,\nbut we don't know the arguments",
    "start": "3137620",
    "end": "3144855"
  },
  {
    "text": "to the updates on the left,\nwe don't know arguments to the updates on the right. We'll assume we know\neverything else, basically, up to this time.",
    "start": "3144855",
    "end": "3151630"
  },
  {
    "text": "Again, this is a\nprobabilistic statement, that conditioned on the past,\nconditioned on the queries",
    "start": "3151630",
    "end": "3158410"
  },
  {
    "text": "on the left, which\nprobably don't matter, conditioned on the updates on\nthe right, which do matter,",
    "start": "3158410",
    "end": "3163480"
  },
  {
    "text": "but they're sort of irrelevant\nto this r intersect w issue. Conditioned on all\nthose things will prove that the expected number\nof operations you need to--",
    "start": "3163480",
    "end": "3171400"
  },
  {
    "text": "or expected encoding\nsize, for this problem, is at least what it is,\nl root n log n bits.",
    "start": "3171400",
    "end": "3178750"
  },
  {
    "text": "And from that lower\nbound, you can then take the sum over all possible\nsetups, over all conditions.",
    "start": "3178750",
    "end": "3186640"
  },
  {
    "text": "And that implies a lower\nbound on the overall setting without these assumptions.",
    "start": "3186640",
    "end": "3192088"
  },
  {
    "text": "OK? So all I'm saying\nis in this set up, it still takes a lot of bits\nto encode these updates,",
    "start": "3192088",
    "end": "3199235"
  },
  {
    "text": "because we don't have\nthe queries which would tell us the answers. So we get a lower bound\non encoding these updates,",
    "start": "3199236",
    "end": "3204670"
  },
  {
    "text": "or a lower bound on\nencoding these queries, because we assume\nwe don't know them. The rest of the-- all\nthe remaining operations",
    "start": "3204670",
    "end": "3209860"
  },
  {
    "text": "don't tell us enough about this. OK.",
    "start": "3209860",
    "end": "3215720"
  },
  {
    "text": "So how the heck are\nwe going to do-- prove a lower bound in\nthis setting, when we can't",
    "start": "3215720",
    "end": "3220730"
  },
  {
    "text": "simulate the query algorithm? There's one cool idea\nto make this work. ",
    "start": "3220730",
    "end": "3230640"
  },
  {
    "text": "You may recall our last\ncell probe lower bound for the predecessor problem.",
    "start": "3230640",
    "end": "3236340"
  },
  {
    "text": " Use this idea of\nround elimination.",
    "start": "3236340",
    "end": "3243150"
  },
  {
    "text": "The idea with round\nelimination was-- Alice is sending a message,\nBob was sending a response.",
    "start": "3243150",
    "end": "3249470"
  },
  {
    "text": "But that first m--\nwe set things up, we set up the problem so the\nfirst message sent by Alice had, on average, less than\n1-bit of information to Bob,",
    "start": "3249470",
    "end": "3258350"
  },
  {
    "text": "or very little\ninformation to Bob. And so what Bob could\ndo is basically guess what that message was.",
    "start": "3258350",
    "end": "3264800"
  },
  {
    "text": "And that would be accurate\nwith some probability. Now here, we're\nnot quite allowed to do that, we're\nnot allowed to change",
    "start": "3264800",
    "end": "3270049"
  },
  {
    "text": "the accuracy of our\nresults, because of our particular setting. So we can't afford to just\nguess by flipping coins",
    "start": "3270050",
    "end": "3278600"
  },
  {
    "text": "what we were supposed to know. What we're supposed\nto know here is-- we're trying to simulate\na query operation,",
    "start": "3278600",
    "end": "3285470"
  },
  {
    "text": "and so we need to\nknow the argument, that whole permutation\nto the queries. It's hard to run it\nwithout that permutation.",
    "start": "3285470",
    "end": "3290950"
  },
  {
    "text": "So instead of guessing\nby flipping coins, we're going to guess in\nthe dynamic programming sense, which is we're going\nto try all the possibilities.",
    "start": "3290950",
    "end": "3298309"
  },
  {
    "text": "Run the simulation over\nall possible queries, all possible second\narguments to the query.",
    "start": "3298310",
    "end": "3305231"
  },
  {
    "text": "We don't know what the\npresentation is, so just try them all. Cool thing is, only one\nargument here should return yes.",
    "start": "3305231",
    "end": "3314180"
  },
  {
    "text": "That's the one\nwe're looking for. So if you try them\nall, find which one says yes, we'll be done.",
    "start": "3314180",
    "end": "3321844"
  },
  {
    "text": "So this is called\nthe decoding idea. ",
    "start": "3321844",
    "end": "3331460"
  },
  {
    "text": "Simulate verify sum of\ni comma pi, for all pi.",
    "start": "3331460",
    "end": "3345240"
  },
  {
    "text": "And take the one that returns\nyes, that is our permutation. And so if we figure out what\nthose query permutations are,",
    "start": "3345240",
    "end": "3351210"
  },
  {
    "text": "then we figure out what the\nupdate permutations are, and we get our lower\nbounds just like before.",
    "start": "3351210",
    "end": "3357359"
  },
  {
    "text": "OK. This is easier said than\ndone, unfortunately.",
    "start": "3357360",
    "end": "3362940"
  },
  {
    "text": "We'd like to run the\nsimulation just like here, so",
    "start": "3362940",
    "end": "3368446"
  },
  {
    "text": "simulate inquiry algorithm. They said, OK, still\nthe case, that if you're reading a cell that's\neither in the left subtree,",
    "start": "3368446",
    "end": "3373710"
  },
  {
    "text": "in the right subtree,\nor in the past. And we said this was\neasy, this was known.",
    "start": "3373710",
    "end": "3379680"
  },
  {
    "text": "And the hard part is this\ncase, because if we're",
    "start": "3379680",
    "end": "3385260"
  },
  {
    "text": "running this query,\nand it reads something that was written in\nthe left subtree, it may not be in r intersect w.",
    "start": "3385260",
    "end": "3393600"
  },
  {
    "text": "Why is that? Little puzzle for you. ",
    "start": "3393600",
    "end": "3399810"
  },
  {
    "text": "So we're running one of\nthese queries for sum pi. And I claim that when we read\nsomething in the left subtree,",
    "start": "3399810",
    "end": "3405430"
  },
  {
    "text": "we don't know if it's in r\nintersect w, it might not be. ",
    "start": "3405430",
    "end": "3419754"
  },
  {
    "text": "Let's see if we're\non the same page. So r is the set of cells\nread during the right subtree",
    "start": "3419754",
    "end": "3427640"
  },
  {
    "text": "when executing these operations. OK? But what we're doing now is\nsimulating some executions",
    "start": "3427640",
    "end": "3436180"
  },
  {
    "text": "that didn't necessarily happen. We're doing a verify\nsum of i comma pi,",
    "start": "3436180",
    "end": "3441400"
  },
  {
    "text": "but in the bad\naccess sequence, we did verify sum of\ni comma something specific, not any pi,\nbut the correct pi.",
    "start": "3441400",
    "end": "3448150"
  },
  {
    "text": "So we only ran the\nyes verify sums, and that's what r is\ndefined with respect to.",
    "start": "3448150",
    "end": "3453910"
  },
  {
    "text": "r is the set of\nthings that get read during these operations,\nwhere the verify sum is always output yes. If you now run a verify\nsum where the answer is no,",
    "start": "3453910",
    "end": "3462070"
  },
  {
    "text": "it may read stuff that the other\nverify sum didn't read maybe. Shouldn't matter,\nbut it's awkward,",
    "start": "3462070",
    "end": "3468819"
  },
  {
    "text": "because now it's not just r\nintersect w we need to encode. We need to encode\nsome more stuff.",
    "start": "3468820",
    "end": "3475630"
  },
  {
    "text": "It's basically a\nnew r prime that may happen during these\nreads, and we just",
    "start": "3475630",
    "end": "3481180"
  },
  {
    "text": "can't afford to\nencode that r prime, because it's not the\nthing we care about. We care about what happens in\nthe actual access sequence,",
    "start": "3481180",
    "end": "3486880"
  },
  {
    "text": "not in this\narbitrary simulation. So this is the annoying thing.",
    "start": "3486880",
    "end": "3495360"
  },
  {
    "text": "Trouble. ",
    "start": "3495361",
    "end": "3501700"
  },
  {
    "text": "If you look at an incorrect\nquery, meaning the wrong pi,",
    "start": "3501700",
    "end": "3508780"
  },
  {
    "text": "this is like a no\nquery, the output's no.",
    "start": "3508780",
    "end": "3513930"
  },
  {
    "text": "Reads some different\nset of cells, r",
    "start": "3513930",
    "end": "3519040"
  },
  {
    "text": "prime, which isn't\nthe same thing as r. And so if-- we have\nsome good news, which",
    "start": "3519040",
    "end": "3529300"
  },
  {
    "text": "is if we can somehow\ndetect that this happened, that we read something that\nis in r prime, but not r,",
    "start": "3529300",
    "end": "3538270"
  },
  {
    "text": "then the answer must be no. ",
    "start": "3538270",
    "end": "3545950"
  },
  {
    "text": "So that's our saving\nhope, is that either we're",
    "start": "3545950",
    "end": "3551019"
  },
  {
    "text": "reading something at r\nintersect w, in which case it's been written down,\nwe know how to do it. What's not written there, and\nif it's not written there,",
    "start": "3551019",
    "end": "3560230"
  },
  {
    "text": "then it should be, hopefully,\nin r prime minus r. So the answer should be no.",
    "start": "3560230",
    "end": "3567320"
  },
  {
    "text": "Maybe. Slight problem,\nthough, because we used r intersect w to\ndetect what case we were in.",
    "start": "3567320",
    "end": "3574780"
  },
  {
    "text": "If we were in r\nintersect w, then we knew we should read\nfrom those encoded cells.",
    "start": "3574780",
    "end": "3580160"
  },
  {
    "text": "If we weren't, we were either\nin the past or in the right subtree, these things\nwere easy to detect,",
    "start": "3580160",
    "end": "3585850"
  },
  {
    "text": "because they got written\nduring the simulation. But we need to\ndistinguish between-- did we read something that\nwas in the left subtree,",
    "start": "3585850",
    "end": "3592780"
  },
  {
    "text": "or did we read something\nthat was known? This is a little tricky, because\nthis gets at exactly the issue.",
    "start": "3592780",
    "end": "3599440"
  },
  {
    "text": "Left subtree might\nwrite some stuff that didn't get read by verify sum. So now you go to read\nit, you need to know,",
    "start": "3599440",
    "end": "3607790"
  },
  {
    "text": "am I reading something that\nwas not in r intersect w? And therefore-- Yeah.",
    "start": "3607790",
    "end": "3618130"
  },
  {
    "text": "Basically the issue\nis, is it in w? If it's in w, but\nnot in r intersect w,",
    "start": "3618130",
    "end": "3623480"
  },
  {
    "text": "then I know the answer\nis no, and I should stop. If it's not in w though, that\nmeans it was in the known past,",
    "start": "3623480",
    "end": "3630450"
  },
  {
    "text": "and then I should continue. How do I know if I\nshould stop or continue? So this is the tricky part.",
    "start": "3630450",
    "end": "3641030"
  },
  {
    "text": "We can't tell whether\nthere's the weird notation.",
    "start": "3641030",
    "end": "3649730"
  },
  {
    "text": "We want to know whether r is\nin w minus r or past minus r",
    "start": "3649730",
    "end": "3658240"
  },
  {
    "text": "intersect w. OK, we can tell whether\nit's in r intersect w, if it is, we're happy.",
    "start": "3658240",
    "end": "3663910"
  },
  {
    "text": "If it's not in r\nintersect w, it could be that's because it was\njust in some past thing we were reading, that didn't\nget read otherwise.",
    "start": "3663910",
    "end": "3672340"
  },
  {
    "text": "Or it could be we're\nreading something that was written in\nthe left subtree, but not read in\nthe right subtree.",
    "start": "3672340",
    "end": "3678770"
  },
  {
    "text": "So in this case,\nwe want to abort. And in this case, it's known,\nand so we just continue.",
    "start": "3678770",
    "end": "3685735"
  },
  {
    "text": " So that's what the\nsimulation would like to do,",
    "start": "3685735",
    "end": "3692280"
  },
  {
    "text": "if we could distinguish\nbetween these two cases. But right now, we can't\ndistinguish between these two",
    "start": "3692280",
    "end": "3697500"
  },
  {
    "text": "cases, because we don't\nhave enough information. So we're going to make our\nencoding a little bit bigger.",
    "start": "3697500",
    "end": "3704240"
  },
  {
    "text": "What we're going to do--  this is here-- is\nencode a separator",
    "start": "3704240",
    "end": "3726030"
  },
  {
    "text": "for r minus w and w minus r.",
    "start": "3726030",
    "end": "3735736"
  },
  {
    "text": "So let's-- over here.",
    "start": "3735736",
    "end": "3741130"
  },
  {
    "start": "3741130",
    "end": "3756599"
  },
  {
    "text": "What does this mean? Separators going to call, called\nS. So I want this picture,",
    "start": "3756600",
    "end": "3765030"
  },
  {
    "text": "r minus w sits inside\nS. And w minus r",
    "start": "3765030",
    "end": "3772420"
  },
  {
    "text": "sits outside S. This is\nmy universe of cells.",
    "start": "3772420",
    "end": "3779327"
  },
  {
    "text": "These are the things that are\nread in the right subtree, but not written in\nthe left subtree. Those are the things\nI care about--",
    "start": "3779327",
    "end": "3785200"
  },
  {
    "text": " well, no quite this,\nthe other ones.",
    "start": "3785200",
    "end": "3790390"
  },
  {
    "text": "So things that are read in\nthe right subtree and that are not written in the last,\nthis is the past essentially,",
    "start": "3790390",
    "end": "3796839"
  },
  {
    "text": "that's useful over there. Over here, I have\nw minus r, these",
    "start": "3796840",
    "end": "3802190"
  },
  {
    "text": "are things that are written\nin the left subtree, but not read in\nthe right subtree. These are the things\nthat I worry about,",
    "start": "3802190",
    "end": "3807356"
  },
  {
    "text": "because those ones I need to\ndetect that that was changed, and say whoops, you must\nhave an answer of no.",
    "start": "3807356",
    "end": "3815510"
  },
  {
    "text": "OK? So I can't afford to\nstore these sets exactly, so I'm going to approximate\nthem, by saying, well, let's store the\nseparator out here.",
    "start": "3815510",
    "end": "3823839"
  },
  {
    "text": "And if you're in S, then you're\ndefinitely not in w minus r.",
    "start": "3823840",
    "end": "3829000"
  },
  {
    "text": "If you're definitely not in\nw minus r, then you can run-- you can treat it\nas if it was known.",
    "start": "3829000",
    "end": "3836290"
  },
  {
    "text": "OK, so if you're in\ns, this would be-- why don't I write it here.",
    "start": "3836290",
    "end": "3843240"
  },
  {
    "text": "For the decoding\nalgorithm, if you want to read a cell\nthat is written,",
    "start": "3843240",
    "end": "3854730"
  },
  {
    "text": "or last written in the\nright subtree, in the past,",
    "start": "3854730",
    "end": "3864160"
  },
  {
    "text": "these are the two easy case. Sorry-- I don't want to\nwrite what's in the past,",
    "start": "3864160",
    "end": "3870350"
  },
  {
    "text": "because the whole point is to\nfigure out what's in the past. The other easy case is\nif it's in r intersect w,",
    "start": "3870350",
    "end": "3875360"
  },
  {
    "text": "then it's written down for us. So this is encoded. ",
    "start": "3875360",
    "end": "3880930"
  },
  {
    "text": "This is easy, because during the\nsimulation we did those rights, and so we know what they were.",
    "start": "3880930",
    "end": "3886870"
  },
  {
    "text": "r intersect w, we've written\ndown, so it's easy to know. Then the other cases\nare either you're in S,",
    "start": "3886870",
    "end": "3892600"
  },
  {
    "text": "or you're not in S. OK.",
    "start": "3892600",
    "end": "3900790"
  },
  {
    "text": "I claim if you're in S,\nyou must be in the past,",
    "start": "3900790",
    "end": "3905800"
  },
  {
    "text": "that cell must have been\nwritten in the past, and so you know\nwhat the value was.",
    "start": "3905800",
    "end": "3913120"
  },
  {
    "text": "And so you can continue\nwriting the simulation, just like in this situation. ",
    "start": "3913120",
    "end": "3919830"
  },
  {
    "text": "The other situation is you're\nnot in S, then you don't know, it could have been written\nor might not have been. But what you know is that\nyou're definitely not in r.",
    "start": "3919830",
    "end": "3930180"
  },
  {
    "text": "Because if you're\nnot in r minus w, and you're not in r intersect\nw, then you're not in r.",
    "start": "3930180",
    "end": "3936050"
  },
  {
    "text": "If you're not in r, then\nwe're in this situation.",
    "start": "3936050",
    "end": "3941060"
  },
  {
    "text": "If you read something\nnot in r, that means you're running the wrong query. Because the correct\nquery does r--",
    "start": "3941060",
    "end": "3947849"
  },
  {
    "text": "only reads from r. So if you're not an S,\nyou must not be in r.",
    "start": "3947850",
    "end": "3956970"
  },
  {
    "text": "And so in this case, you\nknow you can abort and try the next pi.",
    "start": "3956970",
    "end": "3962660"
  },
  {
    "text": "So we're going to do\nthis for all pi, run the simulation according to\nthis way of reading cells.",
    "start": "3962660",
    "end": "3969193"
  },
  {
    "text": "At the end, the queries are\neither going to say yes or no, or it may abort early.",
    "start": "3969194",
    "end": "3976950"
  },
  {
    "text": "So if it says no\nor it aborts early, then we know that\nwas not the right pi. Only one of them can say yes,\nthat tells us what the pi is,",
    "start": "3976950",
    "end": "3984960"
  },
  {
    "text": "that tells us what\nthe queries were. Once we know what the queries\nwere in the right subtree,",
    "start": "3984960",
    "end": "3990240"
  },
  {
    "text": "we can use the same\nmultiplying by inverses trick, figure out what the updates\nwere in the left subtree. But those permutations\nrequire l root n log n bits.",
    "start": "3990240",
    "end": "4001250"
  },
  {
    "text": "Which used to be on this\nboard, it's been erased now. That's what we use\nfor this argument.",
    "start": "4001250",
    "end": "4006470"
  },
  {
    "text": "And so what we get\nis overall, encoding must use l root n log n bits.",
    "start": "4006470",
    "end": "4012822"
  },
  {
    "text": "OK, but our encoding's\na little bit bigger now. The big issue is how do\nwe store the separator?",
    "start": "4012822",
    "end": "4019190"
  },
  {
    "text": "We need to do store this\nseparator with very few bits, otherwise we haven't\nreally proved anything.",
    "start": "4019190",
    "end": "4026160"
  },
  {
    "text": "We want encoding to be small. ",
    "start": "4026160",
    "end": "4031480"
  },
  {
    "text": "So we get that the\nencoding must use",
    "start": "4031480",
    "end": "4039320"
  },
  {
    "text": "omega l root n log n bits\nin expectation, because this",
    "start": "4039320",
    "end": "4048170"
  },
  {
    "text": "is a valid decoding\nalgorithm, it will figure out what the permutations were. And they require at\nleast this many bits,",
    "start": "4048170",
    "end": "4054130"
  },
  {
    "text": "so encoding must use this\nmany bits in expectation. Now the question is how many\nbits does the encoding use?",
    "start": "4054130",
    "end": "4060740"
  },
  {
    "text": "Then we'll get either\na contradiction or we'll prove the claim. ",
    "start": "4060740",
    "end": "4067142"
  },
  {
    "text": "So let's go over here. ",
    "start": "4067142",
    "end": "4103830"
  },
  {
    "text": "So here's a fun fact\nabout separators. I'm not going to prove\nit fully, but I'm",
    "start": "4103830",
    "end": "4110778"
  },
  {
    "text": "going to rely on\nsome hashing ability. ",
    "start": "4110779",
    "end": "4116630"
  },
  {
    "text": "So given some universe\nU, in this case it's going to be the cells\nin our data structure.",
    "start": "4116630",
    "end": "4122270"
  },
  {
    "text": "But speak a little bit more\ngenerally of the universe U, I have some number m,\nwhich is our set size.",
    "start": "4122270",
    "end": "4127799"
  },
  {
    "text": "And what we're interested in\nis in defining our separator",
    "start": "4127800",
    "end": "4133579"
  },
  {
    "text": "family. Kind of like a family of hash\nfunctions, closely related,",
    "start": "4133580",
    "end": "4138930"
  },
  {
    "text": "in fact. Call it S. And it's going\nto work for size m sets.",
    "start": "4138930",
    "end": "4147319"
  },
  {
    "start": "4147320",
    "end": "4153509"
  },
  {
    "text": "And so S is a separator family\nif, for any two sets, A and B,",
    "start": "4153510",
    "end": "4160229"
  },
  {
    "text": "in the universe of size,\nat most, m, and disjoint.",
    "start": "4160229",
    "end": "4172258"
  },
  {
    "text": "So A intersect B\nis the empty set. So of course what we're thinking\nabout here is r minus w,",
    "start": "4172259",
    "end": "4178380"
  },
  {
    "text": "and w minus r. These are two subsets\nof the universe. Hopefully they're not too big,\nbecause if this one is huge,",
    "start": "4178380",
    "end": "4184509"
  },
  {
    "text": "that means you read\na huge amount of data in the right subtree. If this one is huge, it meant\nyou wrote a huge amount of data",
    "start": "4184510",
    "end": "4189621"
  },
  {
    "text": "in the left subtree. And then we get lower\nbounds in an easier way. Or they're not so big, let's\nsay they're size at most m.",
    "start": "4189621",
    "end": "4196550"
  },
  {
    "text": "They're disjoint for sure,\nby definition, r minus w's disjoint from w minus r. It removes the intersection.",
    "start": "4196550",
    "end": "4202983"
  },
  {
    "text": " So that's our set up.",
    "start": "4202983",
    "end": "4208760"
  },
  {
    "text": "Then, what we\nwant, is that there is some set C in the\nseparator family,",
    "start": "4208760",
    "end": "4215580"
  },
  {
    "text": "such that A is contained in\nC, and B is outside of C.",
    "start": "4215580",
    "end": "4229590"
  },
  {
    "text": "So B is in the universe minus C.\nSo this is exactly our picture from before, we have\nA. A contains C,",
    "start": "4229590",
    "end": "4238890"
  },
  {
    "text": "and we have B over on the right. And this is the whole universe\nU, and so B is outside of C,",
    "start": "4238890",
    "end": "4245840"
  },
  {
    "text": "A is entirely inside C. OK.",
    "start": "4245840",
    "end": "4251832"
  },
  {
    "text": "This is what we want to\nexist, because if a separator family exists, then we know\nwhatever our r minus w, and w",
    "start": "4251832",
    "end": "4258090"
  },
  {
    "text": "minus r sets were, as long\nas they're not too big, they're definitely\ndisjoint, we can find one of these separators\nthat encodes what we need",
    "start": "4258090",
    "end": "4265170"
  },
  {
    "text": "to encode, which is the set C.\nWhich is called s over there.",
    "start": "4265170",
    "end": "4270929"
  },
  {
    "text": "Cool. How do we encode it? Well, if the number-- if the size of the separator\nfamily is something,",
    "start": "4270930",
    "end": "4280260"
  },
  {
    "text": "then we need log of that bits\nto write down the separator set. So as long as this is\nsmall, we're happy.",
    "start": "4280260",
    "end": "4288490"
  },
  {
    "text": "So let me tell you what's\nto know about separators",
    "start": "4288490",
    "end": "4310150"
  },
  {
    "text": "There exists a separator family\nS, with size of S at most 2",
    "start": "4310150",
    "end": "4322449"
  },
  {
    "text": "to the order m\nplus log log U. Now",
    "start": "4322450",
    "end": "4329497"
  },
  {
    "text": "this is getting into\nan area that we haven't spent a lot of time on, but-- so I'm going to\ngive you a sketch",
    "start": "4329497",
    "end": "4335170"
  },
  {
    "text": "of a proof of this claim.  Relying on perfect\nhash functions.",
    "start": "4335170",
    "end": "4342910"
  },
  {
    "text": "So the idea is the following,\nwe want to know, basically, which elements are in A,\nwhich elements are in B.",
    "start": "4342910",
    "end": "4350070"
  },
  {
    "text": "But it's kind of annoying\nto do that, it can't start that for all universe elements. So if we could just find a\nnice perfect hash function that",
    "start": "4350070",
    "end": "4357235"
  },
  {
    "text": "maps the elements of a\nand the elements would B to different slots\nin some hash table, then for every slot in the hash\ntable we could say, is it in A,",
    "start": "4357235",
    "end": "4363550"
  },
  {
    "text": "or is it in B? Now if you are not in A union\nB and you hash somewhere,",
    "start": "4363550",
    "end": "4369579"
  },
  {
    "text": "you'll get some bit, who\nknows what that that stores. I don't care. For the things\noutside of A union B,",
    "start": "4369580",
    "end": "4375670"
  },
  {
    "text": "they could be in C or not\nin C, I don't really care. And so all I care about\nis if A and B have",
    "start": "4375670",
    "end": "4381460"
  },
  {
    "text": "no collisions\nbetween each other, I don't want any A thing\nto hash to B thing.",
    "start": "4381460",
    "end": "4386650"
  },
  {
    "text": "Then I can store a bit in\nevery cell in the hash table, and that will tell me, in\nparticular, A versus B.",
    "start": "4386650",
    "end": "4393749"
  },
  {
    "text": "And then the rest of the\nitems are somehow categorized, but I don't care how\nthey're categorized. So we're going to use\nthis fact that there",
    "start": "4393749",
    "end": "4401710"
  },
  {
    "text": "is a set of perfect hash\nfunctions of the same size.",
    "start": "4401710",
    "end": "4408340"
  },
  {
    "start": "4408340",
    "end": "4414599"
  },
  {
    "text": "Sorry, that should be H. This\nis what's really true, size of H",
    "start": "4414600",
    "end": "4425680"
  },
  {
    "text": "is 2 the order m\nplus log log U. OK,",
    "start": "4425680",
    "end": "4431094"
  },
  {
    "text": "I'm not going to prove\nthis, but this is about succinct hash functions. It may be hard to find\nsuch a hash family,",
    "start": "4431094",
    "end": "4436450"
  },
  {
    "text": "but the claim is\nthat they exist. Or it's hard to find the hash\nfunction of the family that has no collisions,\nbut the guarantee",
    "start": "4436450",
    "end": "4443199"
  },
  {
    "text": "is, as long as you have,\nin total, two items, out of your universe\nof size U, you",
    "start": "4443200",
    "end": "4450850"
  },
  {
    "text": "can get a collision-free\nhash function, 2 to the order m plus log log U.",
    "start": "4450850",
    "end": "4457450"
  },
  {
    "text": "OK. So this is going to-- Yeah. ",
    "start": "4457450",
    "end": "4463840"
  },
  {
    "text": "Maps, say A union B, to\nan order m sized table.",
    "start": "4463840",
    "end": "4469900"
  },
  {
    "text": " And here, there\nare no collisions.",
    "start": "4469900",
    "end": "4476920"
  },
  {
    "text": " So then what we also\nstore is an A or B",
    "start": "4476920",
    "end": "4485679"
  },
  {
    "text": "bit for each table entry.",
    "start": "4485680",
    "end": "4491130"
  },
  {
    "start": "4491130",
    "end": "4502690"
  },
  {
    "text": "So that's our encoding. We store a perfect\nhash function, that's",
    "start": "4502690",
    "end": "4507810"
  },
  {
    "text": "going to cost log H bits\nfor this part, and log of H",
    "start": "4507810",
    "end": "4517830"
  },
  {
    "text": "is just m plus log\nlog U. And then we're going to store this A or\nB bit for every table entry.",
    "start": "4517830",
    "end": "4525000"
  },
  {
    "text": "Number of table\nentries is order m, so this is going to take\n2 to the order m bits.",
    "start": "4525000",
    "end": "4533429"
  },
  {
    "text": "Or sorry, not-- sorry, in term\nof bits, its order m bits, I should say. ",
    "start": "4533430",
    "end": "4540869"
  },
  {
    "text": "In terms of functions,\nit's 2 to the order m possible choices\nfor this bit vector.",
    "start": "4540870",
    "end": "4548520"
  },
  {
    "text": "And so the easy way is to\njust sum up these bits, you use log of H bits\nplus order m bits.",
    "start": "4548520",
    "end": "4554909"
  },
  {
    "text": "This already had an order m\nterm, and so you get this. The log of S is order\nm plus log log U.",
    "start": "4554910",
    "end": "4563880"
  },
  {
    "text": "So that's the end of\nproof sketch of the claim. If you believe perfect hash\nfunctions can be written down",
    "start": "4563880",
    "end": "4569010"
  },
  {
    "text": "in a small way, then we're done. Now first with separators,\nnow let's apply this separator",
    "start": "4569010",
    "end": "4576060"
  },
  {
    "text": "theorem claim to this setting.",
    "start": "4576060",
    "end": "4581280"
  },
  {
    "text": "So now we can compute\nthe size of our encoding, our encoding involved\nwriting down r intersect w.",
    "start": "4581280",
    "end": "4586289"
  },
  {
    "text": "That takes r intersect w\ntimes log n, just like before. It also involves writing\ndown the separator.",
    "start": "4586290",
    "end": "4595050"
  },
  {
    "text": "Separator takes order\nm bits, m is r plus w.",
    "start": "4595050",
    "end": "4600960"
  },
  {
    "text": "Things that are--\nit's order r plus w. These are all the things-- I'm trying to write\ndown r minus w and w",
    "start": "4600960",
    "end": "4606960"
  },
  {
    "text": "minus r, so that you add\nup those sizes, basically r plus w. Plus log log U. U\nis some small thing,",
    "start": "4606960",
    "end": "4617010"
  },
  {
    "text": "size of memory, number\nof cells in memory. We're assuming that\npolynomials, so you take log log of a polynomial,\nthat's like log log n.",
    "start": "4617010",
    "end": "4628270"
  },
  {
    "text": "So let's finish this off. ",
    "start": "4628270",
    "end": "4636250"
  },
  {
    "text": "So before this was our\nequation, r intersect w times",
    "start": "4636250",
    "end": "4645790"
  },
  {
    "text": "log n, that was the\nsize of our encoding. We still have that term. ",
    "start": "4645790",
    "end": "4654110"
  },
  {
    "text": "Sorry, r intersect w,\nsize of that, times log n.",
    "start": "4654110",
    "end": "4660560"
  },
  {
    "text": "So we still do that. ",
    "start": "4660560",
    "end": "4666600"
  },
  {
    "text": "Now we also pay,\nfor this separator, we're going to pay r plus\nw, that's the m part.",
    "start": "4666600",
    "end": "4677130"
  },
  {
    "text": "Plus log log n. This is the number of\nbits in our encoding.",
    "start": "4677130",
    "end": "4684180"
  },
  {
    "text": "And I claim, or what\nwe've proved over here, is that any encoding must\nuse l root n log n bits.",
    "start": "4684180",
    "end": "4691560"
  },
  {
    "text": " So this thing must be\nat least this thing.",
    "start": "4691560",
    "end": "4697040"
  },
  {
    "text": "So we have a little\nbit more work to prove. There are now two cases. It depends-- there's basically--",
    "start": "4697040",
    "end": "4702600"
  },
  {
    "text": "and log log n is\nunlikely to dominate. We're doing a block\noperation on root n things,",
    "start": "4702600",
    "end": "4709150"
  },
  {
    "text": "probably need to use at\nleast log log n steps. So it's not really relevant. What will dominate is either\nthis term, as it used to,",
    "start": "4709150",
    "end": "4718930"
  },
  {
    "text": "or this term. These are two different cases,\ncall them case one, case two.",
    "start": "4718930",
    "end": "4724450"
  },
  {
    "text": "In case two, r plus w is\nat least l root n log n.",
    "start": "4724450",
    "end": "4730930"
  },
  {
    "text": "That's the lower bound we want. If we can-- in case two, r\nplus w is omega l root n log n.",
    "start": "4730930",
    "end": "4742610"
  },
  {
    "text": "What that means is in this\nsubtree, the amount of reading we did in the right\nsubtree, plus the amount of writing we did\nin the left subtree,",
    "start": "4742610",
    "end": "4748780"
  },
  {
    "text": "is at least l root n log n. That's our goal over here. We want to prove--",
    "start": "4748780",
    "end": "4755300"
  },
  {
    "text": "sorry, it's a previous\nclaim, that's by now erased. Is the easier\nclaim, we just want to show that the total amount\nof time spent in v's subtree",
    "start": "4755300",
    "end": "4763900"
  },
  {
    "text": "is at least log n per operation. We're doing l root\nn things here. So this is a ton of\nreading and writing.",
    "start": "4763900",
    "end": "4769880"
  },
  {
    "text": "So in that case, we're\nhappy, because we get an actual lower bound on time. Otherwise, we don't-- I\nmean, these are actual reads",
    "start": "4769880",
    "end": "4777520"
  },
  {
    "text": "and writes, or total\nnumber of reads and writes. Here we're getting--\nin the other case,",
    "start": "4777520",
    "end": "4783620"
  },
  {
    "text": "we get r intersect w log\nn is at least l root n log",
    "start": "4783620",
    "end": "4791860"
  },
  {
    "text": "n, just like before. So again, the log ns cancel.",
    "start": "4791860",
    "end": "4797600"
  },
  {
    "text": "So here we lose\nthe log n factor, but it's OK,\nbecause this is only talking about r intersect w.",
    "start": "4797600",
    "end": "4804350"
  },
  {
    "text": "This we use the LCA\ncharging, to say, well, if you look at a\nparticular read, it's only gets\ncharged by the LCA.",
    "start": "4804350",
    "end": "4809830"
  },
  {
    "text": "So then we can afford\nto sum up large amounts. So it's a little bit weird. In this situation, we add\nup all the lower bounds.",
    "start": "4809830",
    "end": "4815579"
  },
  {
    "text": "Each of them doesn't\ngive us a log n, but in aggregate, we get a log\nn, because every leaf appears in log n levels.",
    "start": "4815579",
    "end": "4821200"
  },
  {
    "text": "In this case, we don't need to\naggregate, because we just say, well, the number of\noperations in the subtree is at least log n per operation.",
    "start": "4821200",
    "end": "4828880"
  },
  {
    "text": "This time spent,\ncell probe's done, is at least log n per operation. So in that case, we don't need\nto sum the lower bounds, which",
    "start": "4828880",
    "end": "4835330"
  },
  {
    "text": "is done. So in either case, we're happy. Little weird, because you\ncould have a mix of cases,",
    "start": "4835330",
    "end": "4840940"
  },
  {
    "text": "one vertex v could\nbe in case two, then you just ignore\nall the things below it.",
    "start": "4840940",
    "end": "4846940"
  },
  {
    "text": "The rest of the tree\nmight be in case one, but you can mix and\nmatch one and two, as long as you don't use a\none below a two, you're OK,",
    "start": "4846940",
    "end": "4855400"
  },
  {
    "text": "you won't double count. And so in either\ncase, we're happy, we get a log n lower bound,\neither on time per operation,",
    "start": "4855400",
    "end": "4862870"
  },
  {
    "text": "or on this kind of\ntime per operation. Add up all those lower bounds,\nyou get log n per operation,",
    "start": "4862870",
    "end": "4869850"
  },
  {
    "text": "or get root n log n per\nblock operation, which implies log n per insert delete\nedge, or connectivity query.",
    "start": "4869850",
    "end": "4878850"
  },
  {
    "text": "And that proves right\nthere, more or less on time. You can use the same\ntechnique to do a trade off",
    "start": "4878850",
    "end": "4885970"
  },
  {
    "text": "between updates and queries. This is just log n,\nworst case of the two. I mentioned what the\nbound was last time.",
    "start": "4885970",
    "end": "4892750"
  },
  {
    "text": "Same trick works, you\njust do more updates than queries, or more\nqueries than updates. So we get link/cut\ntrees are optimal, other",
    "start": "4892750",
    "end": "4898260"
  },
  {
    "text": "[? tour ?] trees are optimal. And we've got lots of\nother points on the trade off curve, as you may\nrecall last class.",
    "start": "4898260",
    "end": "4903730"
  },
  {
    "text": "Like our log squared update is\noptimal for a log over log log query.",
    "start": "4903730",
    "end": "4910120"
  },
  {
    "text": "And that's the end of\ndynamic graphs, the end of advanced data structures.",
    "start": "4910120",
    "end": "4916517"
  },
  {
    "text": "Hope you had a fun\ntime, we got to see lots of different topics. And I hope you'll enjoy\nwatching on the videos,",
    "start": "4916517",
    "end": "4921830"
  },
  {
    "text": "and let me know if you have\nany comments, send an email or whatever.",
    "start": "4921830",
    "end": "4926890"
  },
  {
    "text": "Yay. [APPLAUSE] ",
    "start": "4926890",
    "end": "4932869"
  }
]