[
  {
    "start": "0",
    "end": "44000"
  },
  {
    "text": "In this lecture we return to the memory system\nthat we last discussed in Lecture 14 of Part",
    "start": "320",
    "end": "5400"
  },
  {
    "text": "2.",
    "start": "5400",
    "end": "6760"
  },
  {
    "text": "There we learned about the fundamental tradeoff\nin current memory technologies: as the memory's",
    "start": "6760",
    "end": "11480"
  },
  {
    "text": "capacity increases, so does it access time.",
    "start": "11480",
    "end": "15580"
  },
  {
    "text": "It takes some architectural cleverness to\nbuild a memory system that has a large capacity",
    "start": "15580",
    "end": "19720"
  },
  {
    "text": "and a small average access time.",
    "start": "19720",
    "end": "22960"
  },
  {
    "text": "The cleverness is embodied in the cache, a\nhardware subsystem that lives between the",
    "start": "22960",
    "end": "27570"
  },
  {
    "text": "CPU and main memory.",
    "start": "27570",
    "end": "29880"
  },
  {
    "text": "Modern CPUs have several levels of cache,\nwhere the modest-capacity first level has",
    "start": "29880",
    "end": "35760"
  },
  {
    "text": "an access time close to that of the CPU, and\nhigher levels of cache have slower access",
    "start": "35760",
    "end": "41010"
  },
  {
    "text": "times but larger capacities.",
    "start": "41010",
    "end": "44789"
  },
  {
    "start": "44000",
    "end": "44000"
  },
  {
    "text": "Caches give fast access to a small number\nof memory locations, using associative addressing",
    "start": "44790",
    "end": "50199"
  },
  {
    "text": "so that the cache has the ability to hold\nthe contents of the memory locations the CPU",
    "start": "50199",
    "end": "55320"
  },
  {
    "text": "is accessing most frequently.",
    "start": "55320",
    "end": "57960"
  },
  {
    "text": "The current contents of the cache are managed\nautomatically by the hardware.",
    "start": "57960",
    "end": "62770"
  },
  {
    "text": "Caches work well because of the principle\nof locality: if the CPU accesses location",
    "start": "62770",
    "end": "67960"
  },
  {
    "text": "X at time T, it's likely to access nearby\nlocations in the not-too-distant future.",
    "start": "67960",
    "end": "74850"
  },
  {
    "text": "The cache is organized so that nearby locations\ncan all reside in the cache simultaneously,",
    "start": "74850",
    "end": "80560"
  },
  {
    "text": "using a simple indexing scheme to choose which\ncache location should be checked for a matching",
    "start": "80560",
    "end": "85850"
  },
  {
    "text": "address.",
    "start": "85850",
    "end": "87380"
  },
  {
    "text": "If the address requested by the CPU resides\nin the cache, access time is quite fast.",
    "start": "87380",
    "end": "94020"
  },
  {
    "text": "In order to increase the probability that\nrequested addresses reside in the cache, we",
    "start": "94020",
    "end": "99079"
  },
  {
    "text": "introduced the notion of \"associativity\",\nwhich increased the number of cache locations",
    "start": "99080",
    "end": "103969"
  },
  {
    "text": "checked on each access and\nsolved the problem of having, say, instructions",
    "start": "103969",
    "end": "108659"
  },
  {
    "text": "and data compete for the same cache locations..",
    "start": "108659",
    "end": "112420"
  },
  {
    "text": "We also discussed appropriate choices for\nblock size (the number of words in a cache",
    "start": "112420",
    "end": "118520"
  },
  {
    "text": "line),\nreplacement policy (how to choose which cache",
    "start": "118520",
    "end": "122368"
  },
  {
    "text": "line to reuse on a cache miss),\nand write policy (deciding when to write changed",
    "start": "122369",
    "end": "128060"
  },
  {
    "text": "data back to main memory).",
    "start": "128060",
    "end": "129849"
  },
  {
    "text": "We'll see these same choices again in this\nlecture as we work to expand the memory hierarchy",
    "start": "129850",
    "end": "136010"
  },
  {
    "text": "beyond main memory.",
    "start": "136010",
    "end": "138670"
  },
  {
    "start": "138000",
    "end": "138000"
  },
  {
    "text": "We never discussed where the data in main\nmemory comes from and how the process of filling",
    "start": "138670",
    "end": "143910"
  },
  {
    "text": "main memory is managed.",
    "start": "143910",
    "end": "145970"
  },
  {
    "text": "That's the topic of today's lecture..",
    "start": "145970",
    "end": "148890"
  },
  {
    "text": "Flash drives and hard disks provide storage\noptions that have more capacity than main",
    "start": "148890",
    "end": "153950"
  },
  {
    "text": "memory, with the added benefit of being non-volatile,\ni.e., they continue to store data even when",
    "start": "153950",
    "end": "160580"
  },
  {
    "text": "turned off.",
    "start": "160580",
    "end": "162360"
  },
  {
    "text": "The generic name for these new devices is\n\"secondary storage\", where data will reside",
    "start": "162360",
    "end": "167340"
  },
  {
    "text": "until it's moved to \"primary storage\", i.e.,\nmain memory, for use.",
    "start": "167340",
    "end": "173310"
  },
  {
    "text": "So when we first turn on a computer system,\nall of its data will be found in secondary",
    "start": "173310",
    "end": "177970"
  },
  {
    "text": "storage, which we'll think of as the final\nlevel of our memory hierarchy.",
    "start": "177970",
    "end": "183340"
  },
  {
    "text": "As we think about the right memory architecture,\nwe'll build on the ideas from our previous",
    "start": "183340",
    "end": "187810"
  },
  {
    "text": "discussion of caches, and, indeed, think of\nmain memory as another level of cache for",
    "start": "187810",
    "end": "193790"
  },
  {
    "text": "the permanent, high-capacity secondary storage.",
    "start": "193790",
    "end": "196650"
  },
  {
    "text": "We'll be building what we call a virtual memory\nsystem, which, like caches, will automatically",
    "start": "196650",
    "end": "202840"
  },
  {
    "text": "move data from secondary storage into main\nmemory as needed.",
    "start": "202840",
    "end": "207650"
  },
  {
    "text": "The virtual memory system will also let us\ncontrol what data can be accessed by the program,",
    "start": "207650",
    "end": "212970"
  },
  {
    "text": "serving as a stepping stone to building a\nsystem that can securely run many programs",
    "start": "212970",
    "end": "218130"
  },
  {
    "text": "on a single CPU.",
    "start": "218130",
    "end": "219810"
  },
  {
    "text": "Let's get started!",
    "start": "219810",
    "end": "222950"
  },
  {
    "text": "Here we see the cache and main memory, the\ntwo components of our memory system as developed",
    "start": "222950",
    "end": "227620"
  },
  {
    "start": "223000",
    "end": "223000"
  },
  {
    "text": "in Lecture 14.",
    "start": "227620",
    "end": "229650"
  },
  {
    "text": "And here's our new secondary storage layer.",
    "start": "229650",
    "end": "232500"
  },
  {
    "text": "The good news: the capacity of secondary storage\nis huge!",
    "start": "232500",
    "end": "237120"
  },
  {
    "text": "Even the most modest modern computer system\nwill have 100's of gigabytes of secondary",
    "start": "237120",
    "end": "241280"
  },
  {
    "text": "storage and having a terabyte or two is not\nuncommon on medium-size desktop computers.",
    "start": "241280",
    "end": "248130"
  },
  {
    "text": "Secondary storage for the cloud can grow to\nmany petabytes (a petabyte is 10^15 bytes",
    "start": "248130",
    "end": "253830"
  },
  {
    "text": "or a million gigabytes).",
    "start": "253830",
    "end": "256549"
  },
  {
    "text": "The bad news: disk access times are 100,000\ntimes longer that those of DRAM.",
    "start": "256549",
    "end": "263260"
  },
  {
    "text": "So the change in access time from DRAM to\ndisk is much, much larger than the change",
    "start": "263260",
    "end": "268430"
  },
  {
    "text": "from caches to DRAM.",
    "start": "268430",
    "end": "271780"
  },
  {
    "text": "When looking at DRAM timing, we discovered\nthat the additional access time for retrieving",
    "start": "271780",
    "end": "276070"
  },
  {
    "text": "a contiguous block of words was small compared\nto the access time for the first word,",
    "start": "276070",
    "end": "281560"
  },
  {
    "text": "so fetching a block was the right plan assuming\nwe'd eventually access the additional words.",
    "start": "281560",
    "end": "287310"
  },
  {
    "text": "For disks, the access time difference between\nthe first word and successive words is even",
    "start": "287310",
    "end": "292340"
  },
  {
    "text": "more dramatic.",
    "start": "292340",
    "end": "293669"
  },
  {
    "text": "So, not surprisingly, we'll be reading fairly\nlarge blocks of data from disk.",
    "start": "293670",
    "end": "299760"
  },
  {
    "text": "The consequence of the much, much larger secondary-storage\naccess time is that it will be very time consuming",
    "start": "299760",
    "end": "306400"
  },
  {
    "text": "to access disk if the data we need is not\nin main memory.",
    "start": "306400",
    "end": "310790"
  },
  {
    "text": "So we need to design our virtual memory system\nto minimize misses when accessing main memory.",
    "start": "310790",
    "end": "316960"
  },
  {
    "text": "A miss, and the subsequent disk access, will\nhave a huge impact on the average memory access",
    "start": "316960",
    "end": "323710"
  },
  {
    "text": "time, so the miss rate will need to be very,\nvery small compared to, say, the rate of executing",
    "start": "323710",
    "end": "329530"
  },
  {
    "text": "instructions.",
    "start": "329530",
    "end": "331620"
  },
  {
    "start": "331000",
    "end": "331000"
  },
  {
    "text": "Given the enormous miss penalties of secondary\nstorage, what does that tell us about how",
    "start": "331620",
    "end": "336580"
  },
  {
    "text": "it should be used as part of our memory hierarchy?",
    "start": "336580",
    "end": "339639"
  },
  {
    "text": "We will need high associativity, i.e., we\nneed a great deal of flexibility on how data",
    "start": "339640",
    "end": "344450"
  },
  {
    "text": "from disk can be located in main memory.",
    "start": "344450",
    "end": "347770"
  },
  {
    "text": "In other words, if our working set of memory\naccesses fit in main memory, our virtual memory",
    "start": "347770",
    "end": "352990"
  },
  {
    "text": "system should make that possible, avoiding\nunnecessary collisions between accesses to",
    "start": "352990",
    "end": "359030"
  },
  {
    "text": "one block of data and another.",
    "start": "359030",
    "end": "362160"
  },
  {
    "text": "We'll want to use a large block size to take\nadvantage of the low incremental cost of reading",
    "start": "362160",
    "end": "366490"
  },
  {
    "text": "successive words from disk.",
    "start": "366490",
    "end": "368610"
  },
  {
    "text": "And, given the principle of locality, we'd\nexpect to be accessing other words of the",
    "start": "368610",
    "end": "373340"
  },
  {
    "text": "block, thus amortizing the cost of the miss\nover many future hits.",
    "start": "373340",
    "end": "378780"
  },
  {
    "text": "Finally, we'll want to use a write-back strategy\nwhere we'll only update the contents of disk",
    "start": "378780",
    "end": "385190"
  },
  {
    "text": "when data that's changed in main memory needs\nto be replaced by data from other blocks of",
    "start": "385190",
    "end": "390880"
  },
  {
    "text": "secondary storage.",
    "start": "390880",
    "end": "392150"
  },
  {
    "text": "There is upside to misses having such long\nlatencies.",
    "start": "392150",
    "end": "396020"
  },
  {
    "text": "We can manage the organization of main memory\nand the accesses to secondary storage in software.",
    "start": "396020",
    "end": "404069"
  },
  {
    "text": "Even it takes 1000's of instructions to deal\nwith the consequences of a miss, executing",
    "start": "404070",
    "end": "408820"
  },
  {
    "text": "those instructions is quick compared to the\naccess time of a disk.",
    "start": "408820",
    "end": "412970"
  },
  {
    "text": "So our strategy will be to handle hits in\nhardware and misses in software.",
    "start": "412970",
    "end": "418639"
  },
  {
    "text": "This will lead to simple memory management\nhardware and the possibility of using very",
    "start": "418639",
    "end": "423210"
  },
  {
    "text": "clever strategies implemented in software\nto figure out what to do on misses.",
    "start": "423210",
    "end": "427860"
  }
]