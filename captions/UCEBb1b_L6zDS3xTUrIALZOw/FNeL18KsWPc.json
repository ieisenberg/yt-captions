[
  {
    "text": " The following\ncontent is provided under a Creative\nCommons license. Your support will help MIT\nOpenCourseWare continue",
    "start": "0",
    "end": "6859"
  },
  {
    "text": "to offer high-quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6860",
    "end": "13330"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13330",
    "end": "22080"
  },
  {
    "text": "PROFESSOR: Continuing\nin the theme of sorting in general, but\nin particular, binary search",
    "start": "22080",
    "end": "27189"
  },
  {
    "text": "trees, which are a\nkind of way of doing dynamic sorting,\nif you will, where the elements are\ncoming and going.",
    "start": "27190",
    "end": "32758"
  },
  {
    "text": "And at all times, you want\nto know the sorted order of your elements by storing them\nin a nice binary search tree.",
    "start": "32759",
    "end": "41170"
  },
  {
    "text": "Remember, in general, a\nbinary search tree is a tree.",
    "start": "41170",
    "end": "46359"
  },
  {
    "text": "It's binary, and it has\nthe search property. Those three things. This is a rooted binary tree.",
    "start": "46360",
    "end": "52660"
  },
  {
    "text": "It has a root. It's binary, so there's a\nleft child and a right child. Some nodes lack a\nright or left child.",
    "start": "52660",
    "end": "59270"
  },
  {
    "text": "Some nodes lack both. Every node has a key. This is the search part.",
    "start": "59270",
    "end": "65110"
  },
  {
    "text": "You store key in every node,\nand you have this BST property, or also called the\nsearch property,",
    "start": "65110",
    "end": "70780"
  },
  {
    "text": "that every node-- if you\nhave a node the stores key x, everybody in the left subtree\nstores a key that's less than",
    "start": "70780",
    "end": "77599"
  },
  {
    "text": "or equal to x, and everyone\nthat's in the right subtree stores a key that's\ngreater than or equal to x. So not just the left\nand right children,",
    "start": "77599",
    "end": "84369"
  },
  {
    "text": "but every descendant way\ndown there is smaller than x. Every descendent way down\nthere is greater than x.",
    "start": "84370",
    "end": "90370"
  },
  {
    "text": "So when you have a binary\nsearch tree like this, if you want to know\nthe sorted order, you do what's called\nan in-order traversal.",
    "start": "90370",
    "end": "97469"
  },
  {
    "text": "You look at a node. You recursively\nvisit the left child. Then you print out the root.",
    "start": "97469",
    "end": "102740"
  },
  {
    "text": "Then you recursively\nvisit the right child. So in this case, we'd\ngo left, left, print 11.",
    "start": "102740",
    "end": "107742"
  },
  {
    "text": "Print 20. Go right. Go left. Print 26. Print 29. Go up.",
    "start": "107742",
    "end": "113620"
  },
  {
    "text": "Print 41. Go right. Print 50. Print 65. Then check that's\nin sorted order.",
    "start": "113620",
    "end": "119450"
  },
  {
    "text": "If you're not familiar\nwith in-order traversal, look at the textbook. It's a very simple operation.",
    "start": "119450",
    "end": "125350"
  },
  {
    "text": "I'm not going to talk\nabout it more here, except we're going to use it.",
    "start": "125350",
    "end": "131750"
  },
  {
    "text": "All right, we'll get to the\ntopic of today's lecture in a moment, which is balance. What we saw in last\nlecture and recitation",
    "start": "131750",
    "end": "139220"
  },
  {
    "text": "is that these\nbasic binary search trees, where when you insert\na node you just walk down the tree to find where that item\nfits-- like if you're trying",
    "start": "139220",
    "end": "146050"
  },
  {
    "text": "to insert 30, you go left here,\ngo right here, go right here, and say, oh 30 fits here. Let's put 30 there.",
    "start": "146050",
    "end": "151440"
  },
  {
    "text": "If you keep doing that,\nyou can do insert. You can do delete.",
    "start": "151440",
    "end": "156560"
  },
  {
    "text": "You can do these\nkinds of searches, which we saw, finding\nthe next larger element or finding the next\nsmaller element, also known",
    "start": "156560",
    "end": "163352"
  },
  {
    "text": "as successor and predecessor. These are actually the typical\nnames for those operations. You can solve them\nin order h time.",
    "start": "163352",
    "end": "170520"
  },
  {
    "text": "Anyone remember what h was? The height. Yeah, good. The height of the tree.",
    "start": "170520",
    "end": "177459"
  },
  {
    "text": "So h is the height of the BST.",
    "start": "177460",
    "end": "184800"
  },
  {
    "text": "What is the height of the tree? AUDIENCE: [INAUDIBLE]. PROFESSOR: Sorry? AUDIENCE: [INAUDIBLE].",
    "start": "184800",
    "end": "189830"
  },
  {
    "text": "PROFESSOR: Log n? Log n would be great,\nbut not always. So this is the issue\nof being balance.",
    "start": "189830",
    "end": "195530"
  },
  {
    "start": "195530",
    "end": "202050"
  },
  {
    "text": "So in an ideal\nworld, your tree's going to look\nsomething like this.",
    "start": "202050",
    "end": "208190"
  },
  {
    "text": "I've drawn this picture probably\nthe most in my academic career. This is a nice, perfectly\nbalanced binary search tree.",
    "start": "208190",
    "end": "215180"
  },
  {
    "text": "The height is log n. This would be the balance case.",
    "start": "215180",
    "end": "220580"
  },
  {
    "text": "I mean, roughly log n. Let's just put theta\nto be approximate.",
    "start": "220580",
    "end": "226379"
  },
  {
    "text": "But as we saw at the\nend of last class, you can have a very unbalanced\ntree, which is just a path.",
    "start": "226380",
    "end": "234020"
  },
  {
    "text": "And there the height is n. What's the definition of height? That's actually what\nI was looking for.",
    "start": "234020",
    "end": "240615"
  },
  {
    "text": " Should be 6.042 material. Yeah?",
    "start": "240615",
    "end": "246581"
  },
  {
    "text": "AUDIENCE: Is it the\nlength of the longest path always going down? PROFESSOR: Yeah, length of the\nlongest path always going down.",
    "start": "246581",
    "end": "252409"
  },
  {
    "text": "So length of the longest path\nfrom the root to some leaf. That's right. OK, so this is--",
    "start": "252410",
    "end": "258060"
  },
  {
    "start": "258060",
    "end": "275870"
  },
  {
    "text": "I highlight this\nbecause we're going to be working a lot\nwith height today. All that's happening here, all\nof the paths are length log n.",
    "start": "275870",
    "end": "284840"
  },
  {
    "text": "Here, there is a\npath of length n. Some of them are shorter,\nbut in fact, the average path is n over 2. It's really bad.",
    "start": "284840",
    "end": "290840"
  },
  {
    "text": "So this is very unbalanced. ",
    "start": "290840",
    "end": "296980"
  },
  {
    "text": "I'll put \"very.\" It's not a very formal\nterm, but that's like the worst case for BSTs.",
    "start": "296980",
    "end": "304169"
  },
  {
    "text": "This is good. This does have a\nformal definition. We call a tree balanced if\nthe height is order log n.",
    "start": "304170",
    "end": "315410"
  },
  {
    "text": " So you're storing n keys. If your height is\nalways order log n,",
    "start": "315410",
    "end": "320970"
  },
  {
    "text": "we get a constant factor here. Here, it's basically exactly\nlog n, 1 times log n.",
    "start": "320970",
    "end": "326430"
  },
  {
    "text": "It's always going to\nbe at least log n, because if you're storing\nn things in a binary tree, you need to have\nheight at least log n.",
    "start": "326430",
    "end": "333050"
  },
  {
    "text": "So in fact, it will be theta\nlog n if your tree is balanced. And today's goal is\nto always maintain",
    "start": "333050",
    "end": "338540"
  },
  {
    "text": "that your trees are balanced. And we're going to do\nthat using the structure called AVL trees, which\nI'll define in a moment.",
    "start": "338540",
    "end": "346840"
  },
  {
    "text": "They're the original\nway people found to keep trees balanced\nback in the '60s,",
    "start": "346840",
    "end": "352980"
  },
  {
    "text": "but they're still\nkind of the simplest. There are lots of ways\nto keep a tree balanced, so I'll mention some other\nbalance trees later on.",
    "start": "352980",
    "end": "359700"
  },
  {
    "text": "In particular, your textbook\ncovers two other ways to do it. It does not cover AVL\ntrees, so pay attention.",
    "start": "359700",
    "end": "365720"
  },
  {
    "start": "365720",
    "end": "372974"
  },
  {
    "text": "One more thing I\nwanted to define. We talked about the\nheight of the tree,",
    "start": "372974",
    "end": "380230"
  },
  {
    "text": "but I'd also like to talk about\nthe height of a node in a tree.",
    "start": "380230",
    "end": "387350"
  },
  {
    "text": " Can anyone define this for me? ",
    "start": "387350",
    "end": "393940"
  },
  {
    "text": "Yeah? AUDIENCE: It's the level\nthat the node is at. PROFESSOR: The level\nthat the node is at.",
    "start": "393940",
    "end": "400230"
  },
  {
    "text": "That is roughly right. I mean, that is right. It's all about, what\nis the level of a node? AUDIENCE: Like how many\nlevels of children it has.",
    "start": "400230",
    "end": "408424"
  },
  {
    "text": "PROFESSOR: How many\nlevels of children it has. That's basically right, yeah. AUDIENCE: The distance\nfrom it to the root.",
    "start": "408424",
    "end": "414110"
  },
  {
    "text": "PROFESSOR: Distance\nfrom it to the root. That would be the depth. So depth is counting from above.",
    "start": "414110",
    "end": "419180"
  },
  {
    "text": "Height is-- AUDIENCE: [INAUDIBLE]. ",
    "start": "419180",
    "end": "424660"
  },
  {
    "text": "PROFESSOR: Yes, longest path\nfrom that node to the leaf. Note that's why I wrote\nthis definition actually,",
    "start": "424660",
    "end": "431856"
  },
  {
    "text": "to give you a hint. ",
    "start": "431856",
    "end": "440650"
  },
  {
    "text": "Here I should probably\nsay down to be precise.",
    "start": "440650",
    "end": "447000"
  },
  {
    "text": "You're not allowed to\ngo up in these paths. ",
    "start": "447000",
    "end": "455650"
  },
  {
    "text": "[INAUDIBLE] All right. Sorry.",
    "start": "455650",
    "end": "460889"
  },
  {
    "text": "I've got to learn how to throw. All right. So for example, over here I'm\ngoing to write depths in red.",
    "start": "460890",
    "end": "466495"
  },
  {
    "text": " If you're taking notes it's OK. Don't worry.",
    "start": "466495",
    "end": "472490"
  },
  {
    "text": "So length off the longest\npath from it down to a leaf. Well, this is a leaf,\nso its height is 0.",
    "start": "472490",
    "end": "479740"
  },
  {
    "text": "OK. Yeah, I'll just\nleave it at that.",
    "start": "479740",
    "end": "484960"
  },
  {
    "text": "It takes 0 steps to get\nfrom a leaf to a leaf. This guy's not a leaf.",
    "start": "484960",
    "end": "490260"
  },
  {
    "text": "It has a child, but it has a\npath of length one to a leaf.",
    "start": "490260",
    "end": "496900"
  },
  {
    "text": "So it's one. This guy has a choice. You could go left and you\nget a path of length 1,",
    "start": "496900",
    "end": "504830"
  },
  {
    "text": "or you could go right and\nget a path of length 2. We take the max, so\nthis guy has height 2.",
    "start": "504830",
    "end": "511490"
  },
  {
    "text": "This node has height 1. This node has height 3.",
    "start": "511490",
    "end": "518620"
  },
  {
    "text": "How do you compute\nthe height of a node? Anyone? Yeah. AUDIENCE: Max of the height\nof the children plus 1.",
    "start": "518620",
    "end": "525544"
  },
  {
    "text": "PROFESSOR: Right. You take the max of the\nheight of the children. Here, 2 and 1. Max is 2.",
    "start": "525544",
    "end": "530730"
  },
  {
    "text": "Add 1. You get 3. So it's going to always\nbe-- this is just a formula.",
    "start": "530730",
    "end": "536110"
  },
  {
    "text": "The height of the\nleft child maxed",
    "start": "536110",
    "end": "546640"
  },
  {
    "text": "with the height of the\nright child plus 1.",
    "start": "546640",
    "end": "557860"
  },
  {
    "text": "This is obviously\nuseful for computing. And in particular, in\nlecture and recitation",
    "start": "557860",
    "end": "564090"
  },
  {
    "text": "last time, we saw\nhow to maintain the size of every tree using\ndata structure augmentation.",
    "start": "564090",
    "end": "572760"
  },
  {
    "text": "Data structure augmentation.  And then we started with a\nregular vanilla binary search",
    "start": "572760",
    "end": "580900"
  },
  {
    "text": "tree, and then we\nmaintained-- every time we did an operation\non the tree, we also",
    "start": "580900",
    "end": "586160"
  },
  {
    "text": "updated the size of\nthe subtree rooted at that node, the size field.",
    "start": "586160",
    "end": "592260"
  },
  {
    "text": "Here, I want to\nstore a height field, and because I have this nice\nlocal rule that tells me how to compute the height\nof a node using just",
    "start": "592260",
    "end": "599411"
  },
  {
    "text": "local information-- the height\nof its left child, the height of its right child. Do a constant\namount of work here.",
    "start": "599411",
    "end": "606287"
  },
  {
    "text": "There's a general theorem. Whenever you have a\nnice local formula like this for updating\nyour information in terms",
    "start": "606287",
    "end": "611300"
  },
  {
    "text": "of your children,\nthen you can maintain it using constant overhead. So we can store the height\nof every node for free.",
    "start": "611300",
    "end": "619500"
  },
  {
    "text": "Why do I care? Because AVL trees are going to\nuse the heights of the nodes. Our goal is to keep\nthe heights small.",
    "start": "619500",
    "end": "625260"
  },
  {
    "text": "We don't want this. We want this. So a natural thing to\ndo is store the heights. When they get too big, fix it.",
    "start": "625260",
    "end": "634100"
  },
  {
    "text": "So that's what\nwe're going to do. ",
    "start": "634100",
    "end": "652140"
  },
  {
    "text": "Maybe one more thing to mention\nover here for convenience. ",
    "start": "652140",
    "end": "661259"
  },
  {
    "text": "Leaves, for example, have\nchildren that are-- I mean, they have null pointers to\ntheir left and right children.",
    "start": "661260",
    "end": "667550"
  },
  {
    "text": "You could draw them\nexplicitly like this. Also some nodes just\nlack a single child.",
    "start": "667550",
    "end": "672920"
  },
  {
    "text": "I'm going to define the\ndepths of these things to be negative 1.",
    "start": "672920",
    "end": "679589"
  },
  {
    "text": "This will be\nconvenient later on. Why negative 1? Because then this formula works.",
    "start": "679590",
    "end": "684874"
  },
  {
    "text": "You can just think about it. Like leaves, for example,\nhave two children, which are negative 1. You take the max. You add 1.",
    "start": "684874",
    "end": "690250"
  },
  {
    "text": "You get 0. So that just makes\nthings work out. We don't normally draw\nthese in the pictures,",
    "start": "690250",
    "end": "695380"
  },
  {
    "text": "but it's convenient that I don't\nhave to do special cases when the left child doesn't exist and\nthe right child doesn't exist.",
    "start": "695380",
    "end": "702096"
  },
  {
    "text": "You could either\ndo special cases or you could make\nthis definition. Up to you.",
    "start": "702096",
    "end": "707509"
  },
  {
    "text": "OK. AVL trees. ",
    "start": "707510",
    "end": "714959"
  },
  {
    "text": "So the idea with an AVL\ntree is the following.",
    "start": "714960",
    "end": "720930"
  },
  {
    "start": "720930",
    "end": "756660"
  },
  {
    "text": "We'd like to keep the\nheight order log n. It's a little harder to think\nabout keeping the height order",
    "start": "756660",
    "end": "761710"
  },
  {
    "text": "log n than it is to think\nabout keeping the tree balance, meaning the left and right\nsides are more or less equal.",
    "start": "761710",
    "end": "769095"
  },
  {
    "text": "In this case, we're\ngoing to think about them as being more or\nless equal in height. You could also think\nabout them being",
    "start": "769095",
    "end": "775279"
  },
  {
    "text": "more or less equal\nin subtree size. That would also work. It's a different\nbalanced search tree.",
    "start": "775280",
    "end": "781020"
  },
  {
    "text": "Height is kind of the\neasiest thing to work with. So if we have a node,\nit has a left subtree.",
    "start": "781020",
    "end": "787570"
  },
  {
    "text": "It has a right subtree,\nwhich we traditionally draw as triangles. This subtree has a height.",
    "start": "787570",
    "end": "793456"
  },
  {
    "text": "We'll call it HL for left. By the height of the subtree,\nI mean the height of its root.",
    "start": "793456",
    "end": "800710"
  },
  {
    "text": "And the right subtree\nhas some height, r. I've drawn them as the\nsame, but in general they",
    "start": "800710",
    "end": "806860"
  },
  {
    "text": "might be different. And what we would like\nis that h sub l and h sub r are more or less the same.",
    "start": "806860",
    "end": "812890"
  },
  {
    "text": "They differ by at\nmost an additive 1. So if I look at h sub l minus\nh sub r in absolute value,",
    "start": "812890",
    "end": "821240"
  },
  {
    "text": "this is at most\n1, for every node. So I have some node x.",
    "start": "821240",
    "end": "827780"
  },
  {
    "text": "For every node x, I want\nthe left and right subtrees to be almost balanced. Now, I could say\ndiffer by at most 0,",
    "start": "827780",
    "end": "834839"
  },
  {
    "text": "that the left and right have\nexactly the same heights. That's difficult,\nbecause that really",
    "start": "834840",
    "end": "840290"
  },
  {
    "text": "forces you to have\nexactly the perfect tree. And in fact, it's not even\npossible for odd n or even n",
    "start": "840290",
    "end": "847900"
  },
  {
    "text": "or something. Because at the very\nend you're going to have one missing child, and\nthen you're unbalanced there.",
    "start": "847900",
    "end": "854750"
  },
  {
    "text": "So 0's just not\npossible to maintain, but 1 is almost as\ngood, hopefully.",
    "start": "854750",
    "end": "861400"
  },
  {
    "text": "We're going to prove\nthat in a second. And it turns out to be easy\nto maintain in log n time.",
    "start": "861400",
    "end": "870060"
  },
  {
    "text": "So let's prove some stuff. ",
    "start": "870060",
    "end": "878870"
  },
  {
    "text": "So first claim is that\nAVL trees are balanced. ",
    "start": "878870",
    "end": "892880"
  },
  {
    "text": "Balanced, remember, means\nthat the height of them is always order log n. So we're just going to assume\nfor now that we can somehow",
    "start": "892880",
    "end": "899300"
  },
  {
    "text": "achieve this property. We want to prove that it\nimplies that the height is",
    "start": "899300",
    "end": "905100"
  },
  {
    "text": "at most some\nconstant times log n. We know it's at\nleast log n, but also like it to be not much bigger.",
    "start": "905100",
    "end": "912459"
  },
  {
    "text": "So what do you think\nis the worst case? Say I have n nodes.",
    "start": "912460",
    "end": "918019"
  },
  {
    "text": "How could I make the\ntree as high as possible? Or conversely, if I have\na particular height,",
    "start": "918020",
    "end": "923570"
  },
  {
    "text": "how could I make it have\nas few nodes as possible? That'd be like the\nsparsest, the least balanced",
    "start": "923570",
    "end": "929790"
  },
  {
    "text": "situation for AVL trees.  Yeah?",
    "start": "929790",
    "end": "934988"
  },
  {
    "text": "AUDIENCE: You could have\none node on the last level. PROFESSOR: One node on the last\nlevel, yeah, in particular. Little more.",
    "start": "934988",
    "end": "940690"
  },
  {
    "text": "What do the other\nlevels look like? That is correct, but I want\nto know the whole tree.",
    "start": "940690",
    "end": "946680"
  },
  {
    "text": " It's hard to explain\nthe tree, but you",
    "start": "946680",
    "end": "953490"
  },
  {
    "text": "can explain the core\nproperty of the tree. Yeah? AUDIENCE: [INAUDIBLE]. ",
    "start": "953490",
    "end": "958769"
  },
  {
    "text": "PROFESSOR: For every\nnode, let's make the right side have a height of\none larger than the left side. I think that's worth a cushion.",
    "start": "958769",
    "end": "966269"
  },
  {
    "text": "See if I can throw better.  Good catch.",
    "start": "966270",
    "end": "972862"
  },
  {
    "text": "Better than hitting your eye.  So I'm going to not\nprove this formally,",
    "start": "972862",
    "end": "982539"
  },
  {
    "text": "but I think if you stare\nat this long enough it's pretty obvious. Worst case is when-- there\nare multiple worst cases,",
    "start": "982539",
    "end": "992809"
  },
  {
    "text": "because right and\nleft are symmetric. We don't really care. But let's say that\nthe right subtree",
    "start": "992809",
    "end": "1000040"
  },
  {
    "text": "has height one more than\nthe left for every node.",
    "start": "1000040",
    "end": "1012350"
  },
  {
    "text": " OK, this is a little\ntricky to draw.",
    "start": "1012350",
    "end": "1020779"
  },
  {
    "text": "Not even sure I want\nto try to draw it. But you basically\ndraw it recursively. So, OK, somehow I've\nfigured out this",
    "start": "1020780",
    "end": "1027550"
  },
  {
    "text": "where the height\ndifference here is 1. Then I take two copies of it. It's like a fractal.",
    "start": "1027550",
    "end": "1033220"
  },
  {
    "text": "You should know all\nabout fractals by now. Problem set two. And then you just-- well,\nthat's not quite right.",
    "start": "1033220",
    "end": "1040548"
  },
  {
    "text": "In fact, I need to somehow\nmake this one a little bit taller and then\nglue these together.",
    "start": "1040548",
    "end": "1048700"
  },
  {
    "text": "Little tricky. Let's not even try\nto draw the tree. Let's just imagine\nthis is possible.",
    "start": "1048700",
    "end": "1053880"
  },
  {
    "text": "It is possible. And instead, I'm going\nto use mathematics",
    "start": "1053880",
    "end": "1060190"
  },
  {
    "text": "to understand how\nhigh that tree is. Or actually, it's\na little easier",
    "start": "1060190",
    "end": "1066070"
  },
  {
    "text": "to think about-- let\nme get this right. It's so easy that I\nhave to look at my notes to remember what to write.",
    "start": "1066070",
    "end": "1073549"
  },
  {
    "text": "Really, no problem. All right, so I'm\ngoing to define n sub h",
    "start": "1073550",
    "end": "1081760"
  },
  {
    "text": "is the minimum number\nof nodes that's",
    "start": "1081760",
    "end": "1088580"
  },
  {
    "text": "possible in an AVL\ntree of height h.",
    "start": "1088580",
    "end": "1095690"
  },
  {
    "text": " This is sort of the inverse\nof what we care about,",
    "start": "1095690",
    "end": "1103090"
  },
  {
    "text": "but if we can solve the\ninverse, we can solve the thing. What we really care about\nis, for n nodes, how large",
    "start": "1103090",
    "end": "1108639"
  },
  {
    "text": "can the height be? We want to prove\nthat's order log n. But it'll be a lot easier to\nthink about the reverse, which",
    "start": "1108640",
    "end": "1113690"
  },
  {
    "text": "is, if I fix the height to\nbe h, what's the fewest nodes that I can pack in? Because for the very unbalanced\ntree, I have a height of n,",
    "start": "1113690",
    "end": "1123059"
  },
  {
    "text": "and I only need to put n nodes. That would be really bad.",
    "start": "1123060",
    "end": "1128300"
  },
  {
    "text": "What I prefer is a situation\nlike this, where with height h,",
    "start": "1128300",
    "end": "1134090"
  },
  {
    "text": "I have to put in\n2 to the h nodes. That would be perfect balance. Any constant to the h will do.",
    "start": "1134090",
    "end": "1139840"
  },
  {
    "text": "So when you take the\ninverse, you get a log. OK, we'll get to\nthat in a moment. ",
    "start": "1139840",
    "end": "1153950"
  },
  {
    "text": "How should we analyze n sub h? ",
    "start": "1153950",
    "end": "1160163"
  },
  {
    "text": "I hear something. Yeah? AUDIENCE: [INAUDIBLE] 2 to\nthe h minus 1 [INAUDIBLE].",
    "start": "1160163",
    "end": "1167090"
  },
  {
    "start": "1167090",
    "end": "1175890"
  },
  {
    "text": "PROFESSOR: Maybe, but I don't\nthink that will quite work out.",
    "start": "1175890",
    "end": "1180900"
  },
  {
    "text": " Any-- yeah?",
    "start": "1180900",
    "end": "1187239"
  },
  {
    "text": "AUDIENCE: So you have only\n1 node in the last level, so it would be 1/2\nto the h plus 1.",
    "start": "1187239",
    "end": "1195861"
  },
  {
    "text": "PROFESSOR: That turns out\nto be approximately correct, but I don't know where you\ngot 1/2 to the h plus 1.",
    "start": "1195861",
    "end": "1203050"
  },
  {
    "text": "It's not exactly correct. I'll tell you that, so that\nyour analysis isn't right.",
    "start": "1203050",
    "end": "1208490"
  },
  {
    "text": "It's a lot easier. You guys are worried\nabout the last level and actually what the tree looks\nlike, but in fact, all you need",
    "start": "1208490",
    "end": "1213815"
  },
  {
    "text": "is this.  All you need is love, yeah.",
    "start": "1213816",
    "end": "1220023"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: No, it's not a half. It's a different constant. Yeah? AUDIENCE: Start with base cases\nand write a recursive formula.",
    "start": "1220024",
    "end": "1226570"
  },
  {
    "text": "PROFESSOR: Ah,\nrecursive formula. Good. You said start with base cases. I always forget that part, so\nit's good that you remember.",
    "start": "1226570",
    "end": "1232860"
  },
  {
    "text": "You should start\nwith the base case, but I'm not going to\nworry about the base case because it won't matter. Because I know the base case\nis always going to be n order 1",
    "start": "1232860",
    "end": "1240330"
  },
  {
    "text": "is order 1. So for algorithms,\nthat's usually all you need for base case, but it's\ngood that you think about it.",
    "start": "1240330",
    "end": "1245690"
  },
  {
    "text": "What I was looking for\nis recursive formula, aka, recurrence. So can someone tell me--\nmaybe even you-- could tell me",
    "start": "1245690",
    "end": "1252840"
  },
  {
    "text": "a recurrence for n sub h,\nin terms of n sub smaller h? ",
    "start": "1252840",
    "end": "1259659"
  },
  {
    "text": "Yeah? AUDIENCE: 1 plus [INAUDIBLE]. ",
    "start": "1259660",
    "end": "1265600"
  },
  {
    "text": "PROFESSOR: 1 plus\nn sub h minus 1. ",
    "start": "1265600",
    "end": "1273570"
  },
  {
    "text": "Not quite. Yeah? AUDIENCE: N sub h minus\n1 plus n sub h minus 2.",
    "start": "1273570",
    "end": "1279170"
  },
  {
    "text": "PROFESSOR: N plus-- do\nyou want the 1 plus? AUDIENCE: I don't think so.",
    "start": "1279170",
    "end": "1285720"
  },
  {
    "text": "PROFESSOR: You do. It's a collaboration. To combine your\ntwo answers, this",
    "start": "1285720",
    "end": "1291470"
  },
  {
    "text": "should be the correct formula. Let me double check. Yes, whew. Good. OK, why?",
    "start": "1291470",
    "end": "1297050"
  },
  {
    "text": "Because the one thing we know is\nthat our tree looks like this. ",
    "start": "1297050",
    "end": "1305510"
  },
  {
    "text": "The total height here is h. That's what we're\ntrying to figure out. How many nodes are in\nthis tree of height h?",
    "start": "1305510",
    "end": "1312050"
  },
  {
    "text": "Well, the height is the\nmax of the two directions.",
    "start": "1312050",
    "end": "1317660"
  },
  {
    "text": "So that means that the\nlarger has height h minus 1, because the longest\npath to a leaf",
    "start": "1317660",
    "end": "1324860"
  },
  {
    "text": "is going to be down this way. What's the height of this? Well, it's one less\nthan the height of this.",
    "start": "1324860",
    "end": "1330140"
  },
  {
    "text": "So it's going to be h minus 2. This is where the n sub h minus\n1 plus n sub h minus 2 come in.",
    "start": "1330140",
    "end": "1337550"
  },
  {
    "text": "But there's also this node. It doesn't actually make a big\ndifference in this recurrence.",
    "start": "1337550",
    "end": "1342580"
  },
  {
    "text": "This is the exponential part. This is like itty bitty thing. But it matters for the\nbase case is pretty much",
    "start": "1342580",
    "end": "1349080"
  },
  {
    "text": "where it matters. Back to your base case. There's one guy here, plus\nall the nodes on the left,",
    "start": "1349080",
    "end": "1354500"
  },
  {
    "text": "plus all the nodes on the right. And for whatever\nreason, I put the left over here and the\nright over here.",
    "start": "1354500",
    "end": "1361804"
  },
  {
    "text": "And of course, you could\nreverse this picture. It doesn't really matter. You get the same formula. That's the point.",
    "start": "1361804",
    "end": "1367200"
  },
  {
    "text": "So this is the recurrence. Now we need to solve it. What we would like is\nfor it to be exponential,",
    "start": "1367200",
    "end": "1374070"
  },
  {
    "text": "because that means there's a\nlot of nodes in a height h AVL tree.",
    "start": "1374070",
    "end": "1379779"
  },
  {
    "text": "So any suggestions on\nhow we could figure out this recurrence? Does it look like anything\nyou've seen before?",
    "start": "1379780",
    "end": "1386275"
  },
  {
    "text": "AUDIENCE: Fibonacci. PROFESSOR: Fibonacci. It's almost Fibonacci. If I hid this plus 1,\nwhich you wanted to do,",
    "start": "1386275",
    "end": "1393290"
  },
  {
    "text": "then it would be\nexactly Fibonacci. Well, that's actually good,\nbecause in particular, n sub h",
    "start": "1393290",
    "end": "1401190"
  },
  {
    "text": "is bigger than Fibonacci. If you add one at\nevery single level, the certainly you\nget something bigger",
    "start": "1401190",
    "end": "1407049"
  },
  {
    "text": "than the base\nFibonacci sequence.  Now, hopefully you know\nFibonacci is exponential.",
    "start": "1407050",
    "end": "1413520"
  },
  {
    "start": "1413520",
    "end": "1419570"
  },
  {
    "text": "I have an exact formula. ",
    "start": "1419570",
    "end": "1425100"
  },
  {
    "text": "If you take the golden ratio to\nthe power h, divide by root 5, and round to the\nnearest integer,",
    "start": "1425100",
    "end": "1430600"
  },
  {
    "text": "you get exactly the\nFibonacci number. Crazy stuff. We don't need to\nknow why that's true. Just take it as fact.",
    "start": "1430600",
    "end": "1436800"
  },
  {
    "text": "And conveniently phi\nis bigger than 1. You don't need to\nremember what phi is, except it is bigger than 1.",
    "start": "1436800",
    "end": "1442240"
  },
  {
    "text": "And so this is an\nexponential bound. This is good news.",
    "start": "1442240",
    "end": "1447560"
  },
  {
    "text": "So I'll tell you\nit's about 1.618.",
    "start": "1447560",
    "end": "1453160"
  },
  {
    "text": "And so we get is that--\nif we invert this, this says n sub h is bigger\nthan some phi to the h.",
    "start": "1453160",
    "end": "1461410"
  },
  {
    "text": "This is our n, basically. What we really\nwant to know is how h relates to n, which is\njust inverting this formula.",
    "start": "1461410",
    "end": "1469420"
  },
  {
    "text": "So we have, on the\nother hand, the phi to the h divided by\nroot 5 is less than n.",
    "start": "1469420",
    "end": "1477260"
  },
  {
    "text": " So I got a log base\nphi on both sides.",
    "start": "1477260",
    "end": "1485720"
  },
  {
    "text": "Seems like a good thing to do.  This is actually quite annoying.",
    "start": "1485720",
    "end": "1492200"
  },
  {
    "text": "I've got h minus a\ntiny little thing. It's less than\nlog base phi of n.",
    "start": "1492200",
    "end": "1501919"
  },
  {
    "text": "And I will tell you that is\nabout 1.440 times log base 2",
    "start": "1501920",
    "end": "1508900"
  },
  {
    "text": "of n, because after all,\nlog base 2 is what computer scientists care about. So just to put it\ninto perspective.",
    "start": "1508900",
    "end": "1516690"
  },
  {
    "text": "We want it to be\ntheta log base 2 of n. And here's the bound. The height is always less\nthan 1.44 times log n.",
    "start": "1516690",
    "end": "1523532"
  },
  {
    "text": "All we care about\nis some constant, but this is a pretty\ngood constant. We'd like one.",
    "start": "1523532",
    "end": "1528900"
  },
  {
    "text": "There are binary search tress\nthat achieve 1, plus very, very tiny thing, arbitrarily\ntiny, but this is pretty good.",
    "start": "1528900",
    "end": "1539360"
  },
  {
    "text": "Now, if you don't know\nFibonacci numbers, I pull a rabbit out of a hat\nand I've got this phi to the h.",
    "start": "1539360",
    "end": "1545809"
  },
  {
    "text": "It's kind of magical. There's a much easier way\nto analyze this recurrence.",
    "start": "1545810",
    "end": "1551055"
  },
  {
    "text": " I'll just tell you because\nit's good to know but not",
    "start": "1551055",
    "end": "1557809"
  },
  {
    "text": "super critical. ",
    "start": "1557810",
    "end": "1569880"
  },
  {
    "text": "So we have this\nrecurrence, n sub h. ",
    "start": "1569880",
    "end": "1575960"
  },
  {
    "text": "This is the computer scientist\nway to solve the recurrence. We don't care about\nthe constants.",
    "start": "1575960",
    "end": "1581190"
  },
  {
    "text": "This is the theoretical\ncomputer scientist way to solve this recurrence. We don't care about constants. And so we say, aw, this is hard.",
    "start": "1581190",
    "end": "1588019"
  },
  {
    "text": "I've got n sub h minus\n1 and n sub h minus 2. So asymmetric.",
    "start": "1588020",
    "end": "1593360"
  },
  {
    "text": "Let's symmetrify. Could I make them\nboth n sub h minus 1.",
    "start": "1593360",
    "end": "1599030"
  },
  {
    "text": "Or could I make them\nboth n sub h minus 2? ",
    "start": "1599030",
    "end": "1604309"
  },
  {
    "text": "Suggestions? AUDIENCE: [INAUDIBLE]. PROFESSOR: Minus\n2 is the right way to go because I want to know n\nsub h is greater than something",
    "start": "1604310",
    "end": "1612130"
  },
  {
    "text": "in order to get a\nless than down here. By the way, I use that\nlog is monatomic here,",
    "start": "1612130",
    "end": "1617210"
  },
  {
    "text": "but it is, so we're good. So this is going to\nbe greater than 1 plus 2 times n sub h minus 2.",
    "start": "1617210",
    "end": "1627880"
  },
  {
    "text": "Because if I have\na larger height I'm going to have more nodes. That's an easy\nproof by induction.",
    "start": "1627880",
    "end": "1635140"
  },
  {
    "text": "So I can combine\nthese into one term. It's simpler. I can get rid of this 1 because\nthat only makes things bigger.",
    "start": "1635140",
    "end": "1641040"
  },
  {
    "text": "So I just have this. OK, now I need a\nbase case, but this looks like 2 the something.",
    "start": "1641040",
    "end": "1647800"
  },
  {
    "text": "What's the something? H over 2.  So I'll just write theta\nto avoid the base case.",
    "start": "1647800",
    "end": "1655330"
  },
  {
    "text": "2 to the h over 2. Every two steps of h, I\nget another factor of 2.",
    "start": "1655330",
    "end": "1661780"
  },
  {
    "text": "So when you invert\nand do the log, this means that h is also\nless than log base 2 of n.",
    "start": "1661780",
    "end": "1670130"
  },
  {
    "text": "Log base 2 because of that. Factor 2 out here\nbecause of that factor 2 when you take the log.",
    "start": "1670130",
    "end": "1677000"
  },
  {
    "text": "And so the real answer is 1.44. This is the correct--\nthis is the worst case.",
    "start": "1677000",
    "end": "1683190"
  },
  {
    "text": "But it's really easy to prove\nthat it's, at most, 2 log n. So keep this in\nmind in case we ask you to analyze\nvariance of AVL trees,",
    "start": "1683190",
    "end": "1690840"
  },
  {
    "text": "like in problem set three. This is the easy way\nto do it and just get some constant times log n.",
    "start": "1690840",
    "end": "1698070"
  },
  {
    "text": "Clear? All right, so that's AVL\ntrees, why they're balanced.",
    "start": "1698070",
    "end": "1703590"
  },
  {
    "text": "And so if we can\nachieve this property, that the left and right subtrees\nhave about the same height,",
    "start": "1703590",
    "end": "1710090"
  },
  {
    "text": "we'll be done. So how the heck do we\nmaintain that property?",
    "start": "1710090",
    "end": "1715370"
  },
  {
    "start": "1715370",
    "end": "1722090"
  },
  {
    "text": "Let's go over here. ",
    "start": "1722090",
    "end": "1738980"
  },
  {
    "text": "Mobius trees are\nsupposed to support a whole bunch of operations,\nbut in particular, insert and delete.",
    "start": "1738980",
    "end": "1745130"
  },
  {
    "text": "I'm just going to worry\nabout insert today. Delete is almost identical.",
    "start": "1745130",
    "end": "1751410"
  },
  {
    "text": "And it's in the code that\ncorresponds to this lecture, so you can take a look at it.",
    "start": "1751410",
    "end": "1756419"
  },
  {
    "text": "Very, very similar. ",
    "start": "1756420",
    "end": "1764930"
  },
  {
    "text": "Let's start with insert.  Well, it's pretty\nstraightforward.",
    "start": "1764930",
    "end": "1773190"
  },
  {
    "text": "Our algorithm is as follows. We do the simple BST insertion,\nwhich we already saw,",
    "start": "1773190",
    "end": "1782780"
  },
  {
    "text": "which is you walk down the tree\nto find where that key fits. You search for that key. And wherever it isn't,\nyou insert a node there,",
    "start": "1782780",
    "end": "1789830"
  },
  {
    "text": "insert a new leaf,\nand add it in. Now, this will not\npreserve the AVL property. So the second step is\nfix the AVL property.",
    "start": "1789830",
    "end": "1797000"
  },
  {
    "start": "1797000",
    "end": "1803460"
  },
  {
    "text": "And there's a nice concise\ndescription of AVL insertion. Of course, how do you do step\ntwo is the interesting part.",
    "start": "1803460",
    "end": "1810700"
  },
  {
    "text": "All right, maybe let's\nstart with an example. That could be fun. ",
    "start": "1810700",
    "end": "1822296"
  },
  {
    "text": "Hey, look, here's an example. And to match the\nnotes, I'm going to do insert 23 as\na first example.",
    "start": "1822296",
    "end": "1833230"
  },
  {
    "text": "OK, I'm also going to annotate\nthis tree a little bit. So I said we store\nthe heights, but what",
    "start": "1833230",
    "end": "1839159"
  },
  {
    "text": "I care about is which height is\nlarger, the left or the right.",
    "start": "1839160",
    "end": "1844370"
  },
  {
    "text": "In fact, you could\njust store that, just store whether\nit's plus 1, minus 1, or 0, the difference between\nleft and right sides.",
    "start": "1844370",
    "end": "1850269"
  },
  {
    "text": "So I'm going to draw that\nwith a little icon, which is a left arrow, a\ndescending left arrow if this",
    "start": "1850270",
    "end": "1856740"
  },
  {
    "text": "is the bigger side. And this is a right arrow.",
    "start": "1856740",
    "end": "1861910"
  },
  {
    "text": "This is even. Left and right are the same. Here, the left is heavier,\nor higher, I guess.",
    "start": "1861910",
    "end": "1867419"
  },
  {
    "text": "Here it's even. Here it's left. This is AVL, because\nit's only one",
    "start": "1867420",
    "end": "1874580"
  },
  {
    "text": "heavier wherever\nI have an arrow. OK, now I insert 23. 23 belongs-- it's less than 41,\ngreater than 20, less than 29,",
    "start": "1874580",
    "end": "1884030"
  },
  {
    "text": "less than 26. So it belongs here. Here's 23, a brand-new node.",
    "start": "1884030",
    "end": "1891319"
  },
  {
    "text": "OK, now all the heights change. And it's annoying to draw\nwhat the heights are,",
    "start": "1891319",
    "end": "1896679"
  },
  {
    "text": "but I'll do it. This one changes to 1. This is 0.",
    "start": "1896680",
    "end": "1903370"
  },
  {
    "text": "This changes to 2. This changes to 3. This changes to 4.",
    "start": "1903370",
    "end": "1909159"
  },
  {
    "text": "Anyway, never mind\nwhat the heights are. What's bad is, well,\nthis guy's even. This guy's left heavy.",
    "start": "1909160",
    "end": "1915590"
  },
  {
    "text": "This guy's now\ndoubly left heavy. Bad news.",
    "start": "1915590",
    "end": "1920650"
  },
  {
    "text": "OK, let's not worry\nabout above that. Let's just start. The algorithm is going\nto walk up the tree and say, oh, when do\nI get something bad?",
    "start": "1920650",
    "end": "1928220"
  },
  {
    "text": "So now I have 23,\n26, 29 in a path. I'd like to fix it.",
    "start": "1928220",
    "end": "1934840"
  },
  {
    "text": "Hmm, how to fix it? I don't think we know how to\nfix it, so I will tell you how.",
    "start": "1934840",
    "end": "1941500"
  },
  {
    "start": "1941500",
    "end": "1946824"
  },
  {
    "text": "Actually, I wasn't\nhere last week. So did we cover rotations? AUDIENCE: No. PROFESSOR: OK, good. Then you don't know.",
    "start": "1946824",
    "end": "1952820"
  },
  {
    "text": "Let me tell you about rotations. Super cool. ",
    "start": "1952820",
    "end": "1967280"
  },
  {
    "text": "It's just a tool. ",
    "start": "1967280",
    "end": "1992598"
  },
  {
    "text": "That's x and y. ",
    "start": "1992598",
    "end": "2001253"
  },
  {
    "text": "I always get these mixed up. So this is called\nleft rotate of x.",
    "start": "2001254",
    "end": "2013255"
  },
  {
    "text": " OK, so here's the thing we can\ndo with binary search trees.",
    "start": "2013255",
    "end": "2019800"
  },
  {
    "text": "It's like the only\nthing you need to know. Because you've got search\nin binary search trees and you've got rotations.",
    "start": "2019800",
    "end": "2026210"
  },
  {
    "text": "So when I have a tree like this,\nI've highlighted two nodes, and then there's the\nchildren hanging off of them. Some of these might be\nempty, but they're trees,",
    "start": "2026210",
    "end": "2033390"
  },
  {
    "text": "so we draw them as triangles. If I just do this,\nwhich is like changing",
    "start": "2033390",
    "end": "2039810"
  },
  {
    "text": "which is higher, x or y, and\nwhatever the parent of x was becomes the parent of y.",
    "start": "2039810",
    "end": "2045160"
  },
  {
    "text": "And vice versa, in fact. The parent of y was x, and\nnow the parent of x is y.",
    "start": "2045160",
    "end": "2050340"
  },
  {
    "text": "OK, the parent of a is still x. The parent of b changes. It used to be y.",
    "start": "2050340",
    "end": "2056120"
  },
  {
    "text": "Now it's x. The parent of c was y. It's still y. So in a constant number\nof pointer changes,",
    "start": "2056120",
    "end": "2063000"
  },
  {
    "text": "I can go from this to this. This is constant time. ",
    "start": "2063000",
    "end": "2069600"
  },
  {
    "text": "And more importantly, it\nsatisfies the BST order property. If you do an in-order\ntraversal of this,",
    "start": "2069600",
    "end": "2075469"
  },
  {
    "text": "you will get a, x, b, y, c. ",
    "start": "2075469",
    "end": "2082437"
  },
  {
    "text": "If I do an in-order traversal\nover here, I get a, x, b, y, c. ",
    "start": "2082437",
    "end": "2090600"
  },
  {
    "text": "So they're the same. So it still has BST ordering. You can check more formally. b has all the nodes\nbetween x and y.",
    "start": "2090600",
    "end": "2097570"
  },
  {
    "text": "Still all the nodes\nbetween x and y, and so on. You can check it at\nhome, but this works.",
    "start": "2097570",
    "end": "2103839"
  },
  {
    "text": "We call it a left rotate because\nthe root moves to the left. You can go straight back\nwhere you came from.",
    "start": "2103840",
    "end": "2110130"
  },
  {
    "text": "This would be a\nright rotate of y. ",
    "start": "2110130",
    "end": "2117440"
  },
  {
    "text": "OK, it's a reversible operation. It lets you manipulate the tree. So when we have this\npicture and we're",
    "start": "2117440",
    "end": "2122970"
  },
  {
    "text": "really sad because this\nlooks like a mess, what we'd like to do is fix it. This is a path of three nodes.",
    "start": "2122970",
    "end": "2131050"
  },
  {
    "text": "We'd really prefer\nit to look like this. If we could make that\ntransformation, we'd be happy.",
    "start": "2131050",
    "end": "2137660"
  },
  {
    "text": "And we can. It is a right rotate of 29.",
    "start": "2137660",
    "end": "2144085"
  },
  {
    "text": "So that's what\nwe're going to do. ",
    "start": "2144085",
    "end": "2161810"
  },
  {
    "text": "So let me quickly copy. ",
    "start": "2161810",
    "end": "2174690"
  },
  {
    "text": "I want to rotate 29\nto the right, which means 29 and 26-- this is x. This is y.",
    "start": "2174690",
    "end": "2180030"
  },
  {
    "text": "I turn them, and so\nI get 26 here now, and 29 is the new right child.",
    "start": "2180030",
    "end": "2187100"
  },
  {
    "text": "And then whatever\nwas the left child of x becomes the left\nchild of x in the picture. You can check it.",
    "start": "2187100",
    "end": "2192640"
  },
  {
    "text": "So this used to\nbe the triangle a. And in this case,\nit's just the node 23.",
    "start": "2192640",
    "end": "2198830"
  },
  {
    "text": "And we are happy. Except I didn't\ndraw the whole tree. Now we're happy because\nwe have an AVL tree again.",
    "start": "2198830",
    "end": "2206250"
  },
  {
    "text": "Good news. So just check. This is even. This is right heavy.",
    "start": "2206250",
    "end": "2212000"
  },
  {
    "text": "This is even. This is left heavy still. This is left heavy,\neven, even, even.",
    "start": "2212000",
    "end": "2221530"
  },
  {
    "text": "OK, so now we have an AVL tree\nand our beauty is restored.",
    "start": "2221530",
    "end": "2227325"
  },
  {
    "text": "I'll do one more example. ",
    "start": "2227325",
    "end": "2235829"
  },
  {
    "text": "Insert 55. ",
    "start": "2235830",
    "end": "2243089"
  },
  {
    "text": "We want to insert 55 here.  And what changes is\nnow this is even.",
    "start": "2243090",
    "end": "2249850"
  },
  {
    "text": "This is right heavy. This is doubly left heavy.",
    "start": "2249850",
    "end": "2255180"
  },
  {
    "text": "We're super sad. And then we don't look\nabove that until later. ",
    "start": "2255180",
    "end": "2263890"
  },
  {
    "text": "This is more\nannoying, because you look at this thing,\nthis little path.",
    "start": "2263890",
    "end": "2272570"
  },
  {
    "text": "It's a zigzag path, if you will. If I do a right rotation\nwhere this is x and this",
    "start": "2272570",
    "end": "2278370"
  },
  {
    "text": "is y, what I'll get is\nx, y, and then this is b. This is what's in\nbetween x and y.",
    "start": "2278370",
    "end": "2286090"
  },
  {
    "text": "And so it'll go here. And now it's a zag zig\npath, which is no better.",
    "start": "2286090",
    "end": "2291510"
  },
  {
    "text": "The height's the same. And we're sad. ",
    "start": "2291510",
    "end": "2297910"
  },
  {
    "text": "I told you, though,\nthat somehow rotations are all we need to do. ",
    "start": "2297910",
    "end": "2304086"
  },
  {
    "text": "What can I do?  How could I fix\nthis little zigzag?",
    "start": "2304086",
    "end": "2311140"
  },
  {
    "text": "Just need to think\nabout those three nodes, but all I give\nyou are rotations. AUDIENCE: Perhaps rotate 50.",
    "start": "2311140",
    "end": "2318400"
  },
  {
    "text": "PROFESSOR: Maybe rotate 50. That seems like a good idea. Let's try it. ",
    "start": "2318400",
    "end": "2324440"
  },
  {
    "text": "If you don't mind, I'm\njust going to write 41, and then there's all\nthe stuff on the left. Now we rotate 50.",
    "start": "2324440",
    "end": "2329990"
  },
  {
    "text": "So 65 remains where it is. And we rotate 50 to the left.",
    "start": "2329990",
    "end": "2335810"
  },
  {
    "text": "So 50 and its child. This is x. This is y. And so I get 55 and I get 50.",
    "start": "2335810",
    "end": "2344735"
  },
  {
    "text": " Now, this is bad from\nan AVL perspective. This is still doubly left\nheavy, this is left heavy,",
    "start": "2344735",
    "end": "2353470"
  },
  {
    "text": "and this is even. But it looks like this case.",
    "start": "2353470",
    "end": "2358690"
  },
  {
    "text": "And so now I can do a\nright rotation on 65, and I will get-- so let me\norder the diagrams here.",
    "start": "2358690",
    "end": "2367089"
  },
  {
    "text": "I do a right rotate on\n65, and I will get 41. And to the right I get 55.",
    "start": "2367090",
    "end": "2374260"
  },
  {
    "text": "And to the right I get 65. To the left I get 50. ",
    "start": "2374260",
    "end": "2381930"
  },
  {
    "text": "And then I get the left subtree. And so now this is\neven, even, even.",
    "start": "2381930",
    "end": "2388400"
  },
  {
    "text": "Wow. How high was left subtree? I think it's still left heavy.",
    "start": "2388400",
    "end": "2394779"
  },
  {
    "text": "Cool. This is what some people\ncall double rotation, but I like to call\nit two rotations.",
    "start": "2394780",
    "end": "2401370"
  },
  {
    "text": "It's whatever you prefer. It's not really a new operation. It's just doing two rotations.",
    "start": "2401370",
    "end": "2406790"
  },
  {
    "text": "So that's an example. Let's do the general case. It's no harder. You might say, oh, gosh,\nwhy do you do two examples?",
    "start": "2406790",
    "end": "2413330"
  },
  {
    "text": "Well, because they\nwere different. And they're are two\ncases on the algorithm. You need to know both of them. OK, so AVL insert.",
    "start": "2413330",
    "end": "2421161"
  },
  {
    "text": "Here we go. Fix AVL property. ",
    "start": "2421161",
    "end": "2433459"
  },
  {
    "text": "I'm just going to call this\nfrom the changed node up.",
    "start": "2433459",
    "end": "2442500"
  },
  {
    "text": "So the one thing that's\nmissing from these examples is that you might have to\ndo more than two rotations.",
    "start": "2442500",
    "end": "2448160"
  },
  {
    "text": "What we did was look at the\nlowest violation of the AVL property and we fixed it. When we do that,\nthere's still may",
    "start": "2448160",
    "end": "2453940"
  },
  {
    "text": "be violations higher up,\nbecause when you add a node, you change the height\nof this subtree,",
    "start": "2453940",
    "end": "2460620"
  },
  {
    "text": "the height of this subtree,\nthe height of this subtree, and the height of this\nsubtree, potentially. What happened in these\ncases when I was done,",
    "start": "2460620",
    "end": "2467170"
  },
  {
    "text": "what I did fixed one violation. They were all fixed. But in general, there might be\nseveral violations up the tree.",
    "start": "2467170",
    "end": "2473920"
  },
  {
    "text": "So that's what we do. ",
    "start": "2473920",
    "end": "2480440"
  },
  {
    "text": "Yeah, I'll leave it at that. ",
    "start": "2480440",
    "end": "2485510"
  },
  {
    "text": "So suppose x is the lowest\nnode that is not AVL.",
    "start": "2485510",
    "end": "2493785"
  },
  {
    "start": "2493785",
    "end": "2500879"
  },
  {
    "text": "The way we find that node\nis we start at the node that we changed. We check if that's OK. We update the heights as we\ngo up using our simple rule.",
    "start": "2500879",
    "end": "2510900"
  },
  {
    "text": "And that's actually not our\nsimple rule, but it's erased. We update the height based on\nthe heights of its children.",
    "start": "2510900",
    "end": "2517625"
  },
  {
    "text": "And you keep\nwalking up until you see, oh, the left is twice,\ntwo times-- or not two times,",
    "start": "2517625",
    "end": "2524010"
  },
  {
    "text": "but plus 2 larger than\nthe left, or vice versa. Then you say, oh, that's bad.",
    "start": "2524010",
    "end": "2530230"
  },
  {
    "text": "And so we fix it. Yeah, question. AUDIENCE: So here we\ncontinue to [INAUDIBLE].",
    "start": "2530230",
    "end": "2536895"
  },
  {
    "text": "PROFESSOR: Yes. AUDIENCE: [INAUDIBLE]. ",
    "start": "2536895",
    "end": "2543102"
  },
  {
    "text": "add n to the level\n[INAUDIBLE] than 1. So add [INAUDIBLE].",
    "start": "2543102",
    "end": "2550890"
  },
  {
    "text": "PROFESSOR: AVL property's\nnot about levels. It's about left subtrees\nand right subtrees.",
    "start": "2550890",
    "end": "2557000"
  },
  {
    "text": "So the trouble is that 65--\nyou have a left subtree, which has height 2-- or sorry,\nheight 1, I guess--",
    "start": "2557000",
    "end": "2564250"
  },
  {
    "text": "because the longest path\nfrom here to a leaf is 1. The right subtree\nhas height negative 1",
    "start": "2564250",
    "end": "2569630"
  },
  {
    "text": "because it doesn't exist. So it's one versus negative 1. So that's why there's\na double arrow. Yeah, good to ask. It's weird with the negative 1s.",
    "start": "2569630",
    "end": "2576029"
  },
  {
    "text": "That's also why I wanted to\ndefine those negative 1s to be there, so the AVL property\nis easier to state.",
    "start": "2576030",
    "end": "2582420"
  },
  {
    "text": "Other questions? All right.",
    "start": "2582420",
    "end": "2587569"
  },
  {
    "text": "Good. I think I want a\nsymmetry assumption here. ",
    "start": "2587570",
    "end": "2601750"
  },
  {
    "text": "I don't know why I\nwrote right of x. I guess in modern days\nwe write x dot right.",
    "start": "2601750",
    "end": "2608810"
  },
  {
    "text": "Same thing. OK, I'm going to assume that\nthe right child is the heavier",
    "start": "2608810",
    "end": "2614090"
  },
  {
    "text": "one like we did before. Could be the left. It's symmetric.",
    "start": "2614090",
    "end": "2619431"
  },
  {
    "text": "It doesn't matter. ",
    "start": "2619431",
    "end": "2636950"
  },
  {
    "text": "So now there are two\ncases, like I said. ",
    "start": "2636950",
    "end": "2654570"
  },
  {
    "text": "I'm going to use\nthis term right heavy because it's super convenient. ",
    "start": "2654570",
    "end": "2662735"
  },
  {
    "text": "OK, right heavy\nis what I've been drawing by a\ndescending right arrow. Balance is what I've been\ndrawing by a horizontal line.",
    "start": "2662735",
    "end": "2669280"
  },
  {
    "text": "OK, so we're just distinguishing\nbetween these two cases. This turns out to\nbe the easy case.",
    "start": "2669280",
    "end": "2676000"
  },
  {
    "text": "So we have x, y, a, b, c.",
    "start": "2676000",
    "end": "2683227"
  },
  {
    "text": "Why are we looking\nat the right child? Because we assumed that the\nright one is higher, so that x was right heavy.",
    "start": "2683227",
    "end": "2689380"
  },
  {
    "text": "So this subtree as I've drawn\nit is higher than the left one by 2, in fact.",
    "start": "2689380",
    "end": "2695040"
  },
  {
    "text": "And what we do in this\ncase is right rotate of x. And so we get x, y, a, b, c.",
    "start": "2695040",
    "end": "2707162"
  },
  {
    "text": "I could have drawn this no\nmatter what case we're in, so we need to check\nthis actually works. That's the interesting part.",
    "start": "2707162",
    "end": "2713349"
  },
  {
    "text": "And that's over here.  OK, so I said x is right\nheavy, in fact doubly so.",
    "start": "2713350",
    "end": "2721450"
  },
  {
    "text": "y is either right\nheavy or balanced. Let's start with right heavy.",
    "start": "2721450",
    "end": "2728260"
  },
  {
    "text": "So when we do this rotation,\nwhat happens to the heights?",
    "start": "2728260",
    "end": "2733710"
  },
  {
    "text": "Well, it's hard to tell.",
    "start": "2733710",
    "end": "2739431"
  },
  {
    "text": "It's a lot easier to think about\nwhat the actual heights are than just these arrows. So let's suppose x has height k.",
    "start": "2739431",
    "end": "2745030"
  },
  {
    "text": "That's pretty generic.  And it's right\nheavy, so that means",
    "start": "2745030",
    "end": "2750230"
  },
  {
    "text": "the y has height k minus 1. And then this is right heavy,\nso this has height k minus 2.",
    "start": "2750230",
    "end": "2758619"
  },
  {
    "text": "And this is something\nsmaller then k minus 2. In fact, because this\nis AVL, we assume",
    "start": "2758620",
    "end": "2763867"
  },
  {
    "text": "that x was the lowest\nthat is not AVL. So y is AVL. And so this is going\nto be k minus 3,",
    "start": "2763867",
    "end": "2770920"
  },
  {
    "text": "and this is going to be k minus\n3 because these differ by 2. You can prove by a simple\ninduction you never",
    "start": "2770920",
    "end": "2777030"
  },
  {
    "text": "get more than 2 out of whack\nbecause we're just adding 1, off by 1.",
    "start": "2777030",
    "end": "2782470"
  },
  {
    "text": "So we got off by 2. So this is the bad situation. Now we can just update\nthe heights over here.",
    "start": "2782470",
    "end": "2787710"
  },
  {
    "text": "So k minus 3 for a, k minus\n3 for b, k minus 2 for c.",
    "start": "2787710",
    "end": "2792770"
  },
  {
    "text": "Those don't change because\nwe didn't touch those trees, and height is about\ngoing down, not up.",
    "start": "2792770",
    "end": "2798049"
  },
  {
    "text": "And so this becomes k minus\n2, and this becomes k minus 1.",
    "start": "2798050",
    "end": "2803190"
  },
  {
    "text": "And so we changed the\nheight of the root, but now you can see\nthat life is good. This is now balanced between\nk minus 3 and k minus 3.",
    "start": "2803190",
    "end": "2810280"
  },
  {
    "text": "This is now balanced between\nk minus 2 and k minus 2. And now the parent of\ny may be messed up,",
    "start": "2810280",
    "end": "2816290"
  },
  {
    "text": "and that's why after this\nwe go to the parent of y, see if it's messed up, but\nkeep working our way up.",
    "start": "2816290",
    "end": "2822300"
  },
  {
    "text": " But it worked. ",
    "start": "2822300",
    "end": "2828220"
  },
  {
    "text": "And in the interest\nof time, I will not check the case\nwhere y is balanced, but it works out, too.",
    "start": "2828220",
    "end": "2834400"
  },
  {
    "text": "And see the notes.  So the other case is\nwhere we do two rotations.",
    "start": "2834400",
    "end": "2873160"
  },
  {
    "text": "And in general, so here\nx was doubly right heavy.",
    "start": "2873160",
    "end": "2878670"
  },
  {
    "text": "And the else case is\nwhen the right child of x, which I'm going to\ncall z here, is left heavy.",
    "start": "2878670",
    "end": "2886850"
  },
  {
    "text": "That's the one\nremaining situation. You do the same\nthing, and you check that right rotating and\nleft rotating, which",
    "start": "2886850",
    "end": "2893560"
  },
  {
    "text": "makes the nice picture,\nwhich is x, y, z, actually balances everything and\nyou restore the AVL property.",
    "start": "2893560",
    "end": "2902530"
  },
  {
    "text": "So again, check\nthe notes on that. I have a couple minutes\nleft, and instead I'd",
    "start": "2902530",
    "end": "2909375"
  },
  {
    "text": "like to tell you a\nlittle bit about how this fits into big-picture land. ",
    "start": "2909375",
    "end": "2918107"
  },
  {
    "text": "Two things I want to talk about. One is you could\nuse this, of course,",
    "start": "2918107",
    "end": "2923180"
  },
  {
    "text": "to sort, which is, if you\nwant to sort n numbers,",
    "start": "2923180",
    "end": "2928670"
  },
  {
    "text": "you insert them and you\ndo in-order traversal.",
    "start": "2928670",
    "end": "2934900"
  },
  {
    "text": " How long does this take?",
    "start": "2934900",
    "end": "2941060"
  },
  {
    "text": "In-order traversal\ntakes linear time. That's the sense in which we're\nstoring things in sorted order.",
    "start": "2941060",
    "end": "2948370"
  },
  {
    "text": "Inserting n items-- well,\neach insert takes h time, but now we're guaranteed\nthat h is order log n.",
    "start": "2948370",
    "end": "2955140"
  },
  {
    "text": "So all the insertions take log\nn time each, n log n total.",
    "start": "2955140",
    "end": "2960460"
  },
  {
    "text": "So this is yet another way to\nsort n items in n log n time, in some ways the\nmost powerful way.",
    "start": "2960460",
    "end": "2966799"
  },
  {
    "text": "We've seen heaps, and\nwe've seen merge sort. They all sort. Heaps let you do two operations,\ninsert and delete min, which",
    "start": "2966800",
    "end": "2975710"
  },
  {
    "text": "a lot of times is all you\ncare about, like in p set two. But these guys,\nAVL trees, let you",
    "start": "2975710",
    "end": "2982920"
  },
  {
    "text": "do insert, delete,\nand delete min. So they're the same\nin those senses,",
    "start": "2982920",
    "end": "2989359"
  },
  {
    "text": "but we have the new\noperation, which is that we can do find next\nlarger and next smaller, aka",
    "start": "2989360",
    "end": "2996569"
  },
  {
    "text": "successor and predecessor. So you can think about what\nwe call an abstract data type.",
    "start": "2996570",
    "end": "3006120"
  },
  {
    "text": "These are the operations\nthat you support, or that you're\nsupposed to support.",
    "start": "3006120",
    "end": "3011260"
  },
  {
    "text": "If you're into Java, you\ncall this an interface. But this is an\nalgorithmic specification of what your data structure\nis supposed to do.",
    "start": "3011260",
    "end": "3018630"
  },
  {
    "text": "So we have operations\nlike insert and delete.",
    "start": "3018630",
    "end": "3024079"
  },
  {
    "text": "We have operations\nlike find the min and things like successor\nand predecessor,",
    "start": "3024080",
    "end": "3030840"
  },
  {
    "text": "or next larger, next smaller. You can take any subset of these\nand it's an abstract data type.",
    "start": "3030840",
    "end": "3038000"
  },
  {
    "text": "Insert, delete, and min is\ncalled a priority queue. So if you just take\nthese first two,",
    "start": "3038000",
    "end": "3043440"
  },
  {
    "text": "it's called a priority queue. And there are many\npriority queues.",
    "start": "3043440",
    "end": "3049140"
  },
  {
    "text": "This is a generic thing\nthat you might want to do. And then the data\nstructure on the other side",
    "start": "3049140",
    "end": "3055070"
  },
  {
    "text": "is how you actually do it. This is the analog\nof the algorithm. OK, this is the specification.",
    "start": "3055070",
    "end": "3061370"
  },
  {
    "text": "You want a priority queue. One way to do it is a heap. Another way to do\nit is an AVL tree.",
    "start": "3061370",
    "end": "3068220"
  },
  {
    "text": "You could do it\nwith a sorted array. You could do lots of\nsub-optimal things, too, but in particular, heaps\nget these two operations.",
    "start": "3068220",
    "end": "3074950"
  },
  {
    "text": "If you want all\nthree, you basically need a balanced\nbinary search tree.",
    "start": "3074950",
    "end": "3080010"
  },
  {
    "text": " There are probably a dozen\nbalanced binary search trees",
    "start": "3080010",
    "end": "3086010"
  },
  {
    "text": "out there, at least a dozen\nbalanced search trees, not all binary. They all achieve log n.",
    "start": "3086010",
    "end": "3091760"
  },
  {
    "text": "So it doesn't really matter. There are various practical\nissues, constant factors, things like that. The main reason you prefer a\nheap is that it's in place.",
    "start": "3091760",
    "end": "3099260"
  },
  {
    "text": "It doesn't use any extra space. Here, you've got pointers\nall over the place. You lose a constant\nfactor in space.",
    "start": "3099260",
    "end": "3106079"
  },
  {
    "text": "But from a theoretical\nstandpoint, if you don't care\nabout constant factors, AVL trees are really good\nbecause they get everything",
    "start": "3106080",
    "end": "3113760"
  },
  {
    "text": "that we've seen\nso far and log n. And I'll stop there.",
    "start": "3113760",
    "end": "3119490"
  }
]