[
  {
    "start": "0",
    "end": "21000"
  },
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6029"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or to\nview additional materials",
    "start": "6030",
    "end": "12679"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at OCW.MIT.edu. ",
    "start": "12680",
    "end": "21446"
  },
  {
    "start": "21000",
    "end": "265000"
  },
  {
    "text": "JEREMY KEPNER:\nAll right, well, I want to thank you all\nfor coming to what",
    "start": "21446",
    "end": "26590"
  },
  {
    "text": "I have advertised as\nthe penultimate course in this lecture series. Everything else we've\ndone up to this point",
    "start": "26590",
    "end": "33270"
  },
  {
    "text": "has sort of been\nbuilding up to actually finally really using databases.",
    "start": "33270",
    "end": "39480"
  },
  {
    "text": "And hopefully, you\nhaven't been too disappointed at how long I've\nled you along here to get",
    "start": "39480",
    "end": "47997"
  },
  {
    "text": "to this point. But the point being that if you\nhave certain abstract concepts in your mind, that once we\nget to the database part,",
    "start": "47997",
    "end": "56330"
  },
  {
    "text": "it just feels very\nstraightforward. If we do the database piece and\nyou don't have those concepts,",
    "start": "56330",
    "end": "64080"
  },
  {
    "text": "then you can easily\nget distracted by extraneous information.",
    "start": "64080",
    "end": "69500"
  },
  {
    "text": "So today, there's\nno view graphs. So I'm sure you're all\nthrilled about that.",
    "start": "69500",
    "end": "76189"
  },
  {
    "text": "It's going to be\nall demos showing interacting with the actual\ntechnologies that we have here.",
    "start": "76190",
    "end": "82549"
  },
  {
    "text": "And everything I'm showing\nis stuff that you can use. I mean, so everyone\nhas been-- so I'm just",
    "start": "82550",
    "end": "89079"
  },
  {
    "text": "going to kind of get into this. And let's just\nstart with step one.",
    "start": "89080",
    "end": "94420"
  },
  {
    "text": "We're going to be\nusing the Accumulo databases that we've set up. We have a clearinghouse of these\ndatabases on our LLGrid system.",
    "start": "94420",
    "end": "102710"
  },
  {
    "text": "And you can get to that list\nby going to this web page here, dbstatusllgrid.ll.mit.edu. ",
    "start": "102710",
    "end": "111520"
  },
  {
    "text": "And when you go there,\nit will prompt you for your one password. And then it will show\nyou the databases",
    "start": "111520",
    "end": "118190"
  },
  {
    "text": "that you have access to. Now, I have access\nto all the databases. But you guys should only\nsee these class databases",
    "start": "118190",
    "end": "128869"
  },
  {
    "text": "if you log into that. And so as you see here, we have\nfive databases that are set up.",
    "start": "128870",
    "end": "138209"
  },
  {
    "text": "These are five independent\ninstances of Accumulo. And I started a couple already.",
    "start": "138210",
    "end": "143280"
  },
  {
    "text": "And we can even\ntake a look at them. So this is what running\nAccumulo instance looks like.",
    "start": "143280",
    "end": "149800"
  },
  {
    "text": "This is its main page here. And it shows you how\nmuch disk is used, and the number of tables,\nand all that type of stuff.",
    "start": "149800",
    "end": "156920"
  },
  {
    "text": "And it gives you a\nnice history that shows ingest rate over the last\nfew [INAUDIBLE], and scan rate.",
    "start": "156921",
    "end": "163370"
  },
  {
    "text": "This is all in entries per\nsecond, ingest in megabytes, all different kinds of really\nuseful information here.",
    "start": "163370",
    "end": "170580"
  },
  {
    "text": "And you'll see that\nthis has got the URL of classdb01.cloud.llgrid. ",
    "start": "170580",
    "end": "179319"
  },
  {
    "text": "When I started it, it\nwas an actual machine that was allocated to that. In fact, just for fun here,\nI could turn one of these on.",
    "start": "179320",
    "end": "188250"
  },
  {
    "text": "You guys are free to start them. I wouldn't encourage you\nto hit the Stop button, because if someone\nelse is using it,",
    "start": "188250",
    "end": "193680"
  },
  {
    "text": "and you hit stop,\nthen that may not be something you want to do.",
    "start": "193680",
    "end": "199620"
  },
  {
    "text": "But it's the same set\nup-- for instance, if you have a project,\neveryone in the class",
    "start": "199620",
    "end": "204801"
  },
  {
    "text": "can see this because\nwe've made you all a part of the class group. But you can see here\nthere's other classes.",
    "start": "204802",
    "end": "211180"
  },
  {
    "text": "We have a bioinformatics group. And they have a\ncouple of databases. Those are there.",
    "start": "211180",
    "end": "217010"
  },
  {
    "text": "They're not running right now. There's a very large\ngraph database group. It's running now.",
    "start": "217010",
    "end": "222150"
  },
  {
    "text": "And just to show\nthis is it's running. You see this has about\n200 gigabytes of data.",
    "start": "222150",
    "end": "228980"
  },
  {
    "text": "And if we look in\nthe tables here, we see here we\nhave a few tables. Here are some tables with\na few billion entries",
    "start": "228980",
    "end": "236810"
  },
  {
    "text": "that have been put in there. And this is really what\nAccumulo does very, very well.",
    "start": "236810",
    "end": "242459"
  },
  {
    "text": "But I'm going to start one just\nfor fun here, if that works. And so it will be starting that.",
    "start": "242460",
    "end": "248140"
  },
  {
    "text": "And all that happens. And you can see it's starting,\nand all those type of stuff.",
    "start": "248140",
    "end": "254940"
  },
  {
    "text": "So we're going to get going here\nnow with the specific examples. ",
    "start": "254940",
    "end": "262730"
  },
  {
    "text": "And I have these.  Just so you know,\ntoday's examples--",
    "start": "262730",
    "end": "268710"
  },
  {
    "start": "265000",
    "end": "347000"
  },
  {
    "text": "so it's in the\nExamples directory, in the Scaling directory,\nand two parallel database.",
    "start": "268710",
    "end": "275449"
  },
  {
    "text": "So this is the\ndirectory we're going to be going through today. And we have a lot of\nexamples to get through,",
    "start": "275450",
    "end": "282130"
  },
  {
    "text": "because we're going to be\ncovering a lot of ground here about how you can take\nadvantage of D4M and Accumulo",
    "start": "282130",
    "end": "289800"
  },
  {
    "text": "together here. So the first thing I'm\ngoing to do is go here.",
    "start": "289800",
    "end": "305382"
  },
  {
    "text": "I'm going to run these. I have, essentially, two\nversions of the code-- one that's going to do fairly\nsmaller databases on my laptop.",
    "start": "305382",
    "end": "314487"
  },
  {
    "text": "And then I have\nanother version that's sitting in my LLGrid\naccount that I can do some bigger things with.",
    "start": "314487",
    "end": "321990"
  },
  {
    "text": "So to get started, we're going\nto do this first example PDB01 data test. ",
    "start": "321990",
    "end": "348110"
  },
  {
    "start": "347000",
    "end": "1146000"
  },
  {
    "text": "So in order to do database\nwork, and to test data, we need to generate some data.",
    "start": "348110",
    "end": "355070"
  },
  {
    "text": "And so I'm using a\nbuilt-in data generator that we have called\nthe Kronecker graph.",
    "start": "355070",
    "end": "362291"
  },
  {
    "text": "It's basically borrowed from a\nbenchmark called the Graph 500 benchmark. There's actually a\nlist called Graph 500.",
    "start": "362291",
    "end": "368889"
  },
  {
    "text": "And I helped write\nthat benchmark. And, in fact, I actually-- the\nMatlab code on that website",
    "start": "368890",
    "end": "374550"
  },
  {
    "text": "is stuff that I originally\nwrote, and other people have since modified.",
    "start": "374550",
    "end": "380530"
  },
  {
    "text": "And so this is a\ngraph generator. It generates a very large power\nlaw graph using a Kronecker",
    "start": "380530",
    "end": "390370"
  },
  {
    "text": "product approach. And it has a few parameters\nhere-- a scale parameter, which is basically the\nnumber of vertices.",
    "start": "390370",
    "end": "396840"
  },
  {
    "text": "So 2 this scale parameter\nis approximately the number of vertices. So 2 to the 12th gets\nyou about 4,000 vertices.",
    "start": "396840",
    "end": "404790"
  },
  {
    "text": "It then creates a certain\nnumber of edges per vertex-- so 16 edges per vertex.",
    "start": "404790",
    "end": "410310"
  },
  {
    "text": "And so this computes n max\nas 2 to the scale here. And then the number of edges is\nedges per vertex times n max.",
    "start": "410310",
    "end": "417560"
  },
  {
    "text": "This is the maximum\nnumber of edges. And then it generates this. And it comes back\nwith two vectors,",
    "start": "417560",
    "end": "425360"
  },
  {
    "text": "which is just the list\nof the-- the first vector is a list of starting vertices.",
    "start": "425360",
    "end": "431700"
  },
  {
    "text": "And the second vector is\na list of ending vertices. And we're not really\nusing any D4M here.",
    "start": "431700",
    "end": "437670"
  },
  {
    "text": "We're just creating a sparse\nadjacency matrix of that data, showing it, and then plotting\nthe degree distribution.",
    "start": "437670",
    "end": "446949"
  },
  {
    "text": "So if we look at\nthat figure-- so this shows the adjacency\nmatrix of this graph,",
    "start": "446950",
    "end": "456460"
  },
  {
    "text": "start vertex to end vertex. These Kronecker graphs have this\nsort of recursive structure.",
    "start": "456460",
    "end": "462629"
  },
  {
    "text": "And if you kept\nzooming in, you would see that the graph looked like\nitself in a recursive way here.",
    "start": "462629",
    "end": "468850"
  },
  {
    "text": "That's what gives us this\npower law distribution. And this is a\nrelatively small graph.",
    "start": "468850",
    "end": "475229"
  },
  {
    "text": "This particular\ndata generator is chosen because you can make\nenormous graphs in parallel",
    "start": "475230",
    "end": "481500"
  },
  {
    "text": "very easily, which is something\nthat if we had to pass around large data sets every single\ntime we wanted to test",
    "start": "481500",
    "end": "489170"
  },
  {
    "text": "our software, it\nwould be prohibitive because we'd be passing around\ngigabytes and terabytes.",
    "start": "489170",
    "end": "494960"
  },
  {
    "text": "And I think the largest\nthis has ever been run on",
    "start": "494960",
    "end": "500199"
  },
  {
    "text": "is on a scale of 2 to the 37. So that's trillions of\nvertices, or certainly",
    "start": "500200",
    "end": "509160"
  },
  {
    "text": "billions of vertices, almost\ntrillions of vertices. And then we do the degree\ndistribution of this.",
    "start": "509160",
    "end": "516630"
  },
  {
    "text": "And you see here, it creates\na power law distribution. We have a few vertices\nwith only one connection.",
    "start": "516630",
    "end": "521669"
  },
  {
    "text": "And we always have a super\nnode with a lot of connections. And you can see, actually,\nhere the Kronecker structure",
    "start": "521669",
    "end": "529910"
  },
  {
    "text": "in this data, which creates\nthis characteristic sawtooth",
    "start": "529910",
    "end": "536029"
  },
  {
    "text": "pattern. And there's ways to get\nrid of that if you want. But for our purposes,\nhaving that structure there, there's no\nproblem with that.",
    "start": "536030",
    "end": "542270"
  },
  {
    "text": "So this is kind of exactly what\nthe degree distribution looks like.",
    "start": "542270",
    "end": "547950"
  },
  {
    "text": "So that's just a small\nversion to show you what the data looks like. Now we're going to\ncreate a bigger version.",
    "start": "547950",
    "end": "555420"
  },
  {
    "text": " So this program, which I'll\nnow show you-- so this program",
    "start": "555420",
    "end": "569980"
  },
  {
    "text": "creates, essentially,\nthe same Kronecker graph.",
    "start": "569980",
    "end": "575540"
  },
  {
    "text": "But it's going to\ndo it eight times. And one of the nice things\nabout this generator",
    "start": "575540",
    "end": "580550"
  },
  {
    "text": "is if you just\nkeep calling this, it gives you more independent\nsamples from the same graph.",
    "start": "580550",
    "end": "587570"
  },
  {
    "text": "So we're just creating\na graph that's got eight times as many\nedges as the previous one just by calling it over\nand over again, just",
    "start": "587570",
    "end": "595010"
  },
  {
    "text": "from the random\nnumber generator. So I have eight. I'm going to do\nthis eight times.",
    "start": "595010",
    "end": "600130"
  },
  {
    "text": "And I'm going to save each one\nof those to a separate file. So I create a file name.",
    "start": "600130",
    "end": "605380"
  },
  {
    "text": "I'm actually setting\nthe random number seed to be set by the file\nname so that I can do this",
    "start": "605380",
    "end": "612280"
  },
  {
    "text": "if I want to-- the seventh file\nwill always have, essentially,",
    "start": "612280",
    "end": "618000"
  },
  {
    "text": "the same random sequence\nregardless of when I run it. And so I create my vertices.",
    "start": "618000",
    "end": "623730"
  },
  {
    "text": "And I'm going to convert\nthese to strings, and then write\nthese out to files. And so that's all\nthat does here.",
    "start": "623730",
    "end": "630000"
  },
  {
    "text": "And one of the things I\ndo throughout this process that you will see\nis I keep track of how many edges per second\nI'm generating things.",
    "start": "630000",
    "end": "638030"
  },
  {
    "text": "So here, I'm generating\nabout 150,000. It varies in terms of the\nedges per second here,",
    "start": "638030",
    "end": "646000"
  },
  {
    "text": "but between 30,0000 and 150,000\nor 180,000 edges per second, because when you're creating\na whole data processing",
    "start": "646000",
    "end": "653190"
  },
  {
    "text": "pipeline, that's essentially\nthe kind of metrics you're looking-- some\nsteps might process",
    "start": "653190",
    "end": "659730"
  },
  {
    "text": "your edges extremely quickly. And other steps might process\nyour edges more slowly. And that's, obviously,\nthe ones where",
    "start": "659730",
    "end": "665360"
  },
  {
    "text": "you want to put more\nenergy and effort into it.",
    "start": "665360",
    "end": "670420"
  },
  {
    "text": "So we can actually\nnow go and look. It stuck it in this\ndata directory here.",
    "start": "670420",
    "end": "676680"
  },
  {
    "text": "And we just created that. And so, basically, we write\nit out on three files. Essentially, each one of these\nholds one part of a triple-- so",
    "start": "676680",
    "end": "684935"
  },
  {
    "text": "a row, a column, and a value. So if we look at the\ntow, you can just",
    "start": "684935",
    "end": "690890"
  },
  {
    "text": "see it's a sequence of\nstrings separated by commas, same with the column, just a\nseparate sequence of strings",
    "start": "690890",
    "end": "698860"
  },
  {
    "text": "separated by commas. And then in this\ncase, the values we just made all ones,\nnothing fancy there.",
    "start": "698860",
    "end": "706300"
  },
  {
    "text": "So now we have eight files. That's great. We generated those very quickly. And now we want to do a\nlittle processing on them.",
    "start": "706300",
    "end": "713447"
  },
  {
    "text": " So if we go pDB03, the first\nthing we're going to do",
    "start": "713447",
    "end": "721970"
  },
  {
    "text": "is read those files back in and\nconstruct associative arrays, because the associative\nray construction",
    "start": "721970",
    "end": "727470"
  },
  {
    "text": "time takes a little time. And we're going to want to\nuse it over and over again. So we might as well\ntake those triples",
    "start": "727470",
    "end": "734190"
  },
  {
    "text": "and construct them into\nassociative arrays, and save them out as\nmalak binary files. And now that will\nbe something that we",
    "start": "734190",
    "end": "739690"
  },
  {
    "text": "can work with very quickly. So we're going to do that.",
    "start": "739690",
    "end": "744714"
  },
  {
    "text": "So there you go. It read them in. And it shows you at the\nrate at which it reads them in, and then essentially\nwrites them out,",
    "start": "744714",
    "end": "750449"
  },
  {
    "text": "and then gives us\nanother example of the edges per second. And now you see we have Matlab\nfiles for each one of those.",
    "start": "750450",
    "end": "757410"
  },
  {
    "text": "And, not surprisingly,\nthe Matlab file is smaller than the three\ninput triples that it gave.",
    "start": "757410",
    "end": "766910"
  },
  {
    "text": "So this is a 24\nkilobyte Matlab file. And it was probably about\n80 kilobytes of input data.",
    "start": "766910",
    "end": "773834"
  },
  {
    "text": "And that's just because\nwe've compressed all the row keys into single vectors. And we have the sparse adjacency\nmatrix, which stores things.",
    "start": "773834",
    "end": "782000"
  },
  {
    "text": "And so that makes it a\nlittle bit better there. ",
    "start": "782000",
    "end": "788890"
  },
  {
    "text": "If we actually look at that\nprogram here-- so we can see we basically are reading it in.",
    "start": "788890",
    "end": "796190"
  },
  {
    "text": "And then what we're\ndoing is we're basically creating an associative array. We read in each set of triples.",
    "start": "796190",
    "end": "803149"
  },
  {
    "text": "And then the constructor\ntakes the list of row strings, column strings. We just all want this-- since\nwe knew they were all one,",
    "start": "803150",
    "end": "810500"
  },
  {
    "text": "we were just\nletting that be one. And then there's this optional\nfourth argument that tells us, what do we want to do\nif we put in two triples",
    "start": "810500",
    "end": "820520"
  },
  {
    "text": "with the same row and\ncolumn, what to do? The default is it\nwill just do the min.",
    "start": "820520",
    "end": "827600"
  },
  {
    "text": "So if I have a collision,\nit will just do a min. If I give it this\noptional fourth argument",
    "start": "827600",
    "end": "832670"
  },
  {
    "text": "at sum-- in fact, you\ncan put in essentially any binary operation there. But at sum will just\nadd them together.",
    "start": "832670",
    "end": "840010"
  },
  {
    "text": "So now we'll have-- in\nthe associative array, a particular row and column will\nhave how many that occurred.",
    "start": "840010",
    "end": "848120"
  },
  {
    "text": "And so we're summing\nup as we go here. And then after we create\nthe associative array, we save them out to a file.",
    "start": "848120",
    "end": "854830"
  },
  {
    "text": "And so we have that step done. ",
    "start": "854830",
    "end": "861370"
  },
  {
    "text": "Now, the whole reason I\nshowed you this process is because now I'm actually in\na position I can start doing computation just on the files.",
    "start": "861370",
    "end": "868110"
  },
  {
    "text": "As I said before, I don't\nhave to use the database. If I'm going to do any\nkind of calculation that's going to involve\ntraversing all the data,",
    "start": "868110",
    "end": "875149"
  },
  {
    "text": "it's going to be faster just\nto read in those Matlab files and do my processing on that. It's also very easy\nto make parallel.",
    "start": "875150",
    "end": "881460"
  },
  {
    "text": "I have a lot of files. I just have different-- if\nI launch a parallel job,",
    "start": "881460",
    "end": "886750"
  },
  {
    "text": "I can just have\ndifferent processes reading separate files. It will scale very well.",
    "start": "886750",
    "end": "892730"
  },
  {
    "text": "The data array read\nrates will be very fast. Reading these files in parallel\nwill take much less time",
    "start": "892730",
    "end": "901100"
  },
  {
    "text": "than trying to pull out all the\ndata from the database again. So we're going to do a\nlittle analytics here.",
    "start": "901100",
    "end": "907269"
  },
  {
    "start": "907270",
    "end": "912661"
  },
  {
    "text": "pDB04 so I'm going to\nbasically compute--",
    "start": "912661",
    "end": "918160"
  },
  {
    "text": "I'm going to take those eight\nfiles, read them all in, and accumulate the\nresults as we go. ",
    "start": "918160",
    "end": "925800"
  },
  {
    "text": "And there we go. We get to the in\ndegree distribution and the out degree\ndistribution of this result.",
    "start": "925800",
    "end": "936860"
  },
  {
    "text": "If you look to\nthat program here, you can see all we did is we\nlooped over all the files,",
    "start": "936860",
    "end": "944110"
  },
  {
    "text": "just loaded them from in Matlab,\nand then basically summed the rows and added that\nto a temp variable,",
    "start": "944110",
    "end": "952600"
  },
  {
    "text": "and summed the columns,\nand then plotted them out. So we just sort of\naccumulated them as we went.",
    "start": "952600",
    "end": "959140"
  },
  {
    "text": "This actually-- this\nmethod of just summing on top of an associative\narray is something that you can certainly do.",
    "start": "959140",
    "end": "964710"
  },
  {
    "text": "It's a very convenient\nway to do it. I should say, though--\nand you can kind of see it here a little bit.",
    "start": "964710",
    "end": "970990"
  },
  {
    "text": "You notice that the\ntime is beginning to-- it's not so clear here,\nthis took so little time.",
    "start": "970990",
    "end": "976110"
  },
  {
    "text": "But on a larger example,\nwhat you would see is that every single time\nwe did that-- because we're",
    "start": "976110",
    "end": "981720"
  },
  {
    "text": "building and then adding,\nwe're basically redoing the construction process.",
    "start": "981720",
    "end": "986907"
  },
  {
    "text": "And so, eventually, this will\nbecome longer, and longer, and longer. And so it's OK for\nsmall stuff to do that,",
    "start": "986907",
    "end": "992990"
  },
  {
    "text": "or if you're only going\nto do it a few times. But if you're going to be\naccumulating an enormous amount of data, then what\nwe can actually do",
    "start": "992990",
    "end": "1003125"
  },
  {
    "text": "is we have another version\nof this program pDB04 cat",
    "start": "1003125",
    "end": "1010740"
  },
  {
    "text": "DegreeTest And you can tell\nthat was a little bit faster. You see here it's all\nin milliseconds of time.",
    "start": "1010740",
    "end": "1018900"
  },
  {
    "text": " And this is a little\nbit longer program. ",
    "start": "1018900",
    "end": "1030910"
  },
  {
    "text": "What we're doing here\nis, basically, we're",
    "start": "1030910",
    "end": "1036480"
  },
  {
    "text": "reading in-- doing\nthe exact same thing. We're loading our Matlab file.",
    "start": "1036480",
    "end": "1041720"
  },
  {
    "text": "We're doing the sum. And then since I know something\nabout the structure of that.",
    "start": "1041720",
    "end": "1050460"
  },
  {
    "text": "That is, basically\nI'm summing the rows. ",
    "start": "1050460",
    "end": "1056500"
  },
  {
    "text": "I can just append that to a\nlonger list, and then at the",
    "start": "1056500",
    "end": "1062240"
  },
  {
    "text": "and do one large sum.",
    "start": "1062240",
    "end": "1067700"
  },
  {
    "text": "And that's, obviously,\nmuch faster. And so these kind of tricks\nyou just need to be aware of.",
    "start": "1067700",
    "end": "1073255"
  },
  {
    "text": "If you're trying to do\nvery-- people typically want to do a large\namount of data. You just do the simple sum.",
    "start": "1073255",
    "end": "1079049"
  },
  {
    "text": "That will be OK. But if you're doing a\nlot over a large list, that essentially becomes\nalmost an n squared operation",
    "start": "1079050",
    "end": "1086260"
  },
  {
    "text": "with the loop variable. And this is one that\nwill be even faster.",
    "start": "1086260",
    "end": "1091720"
  },
  {
    "text": "You can make it even\nfaster, because we are doing this concatenation here.",
    "start": "1091720",
    "end": "1097110"
  },
  {
    "text": "When you do a concatenation in\nMatlab, you're doing a malak. If you want to make\nit even faster, you can pre-allocate\na large buffer,",
    "start": "1097110",
    "end": "1104440"
  },
  {
    "text": "and then append and\ninto that buffer. And then when you hit\nthe edge, do a sum then,",
    "start": "1104440",
    "end": "1112770"
  },
  {
    "text": "and do it that way. And that's the\nfastest you can do. So these are tricks--\nvery, very large sums,",
    "start": "1112770",
    "end": "1119809"
  },
  {
    "text": "you can do them very\nquickly, and all with files. You don't need a database.",
    "start": "1119810",
    "end": "1125440"
  },
  {
    "text": "And this is the\nway to go if you're going to be doing an\nanalytic where you really want to traverse most of\nthe data in the database,",
    "start": "1125440",
    "end": "1134250"
  },
  {
    "text": "in your data set. If you just need to get pieces\nof the data in the database, then the database\nwill be a better tool.",
    "start": "1134250",
    "end": "1140190"
  },
  {
    "text": " We did that.",
    "start": "1140190",
    "end": "1145600"
  },
  {
    "text": "So those show how we\nworked with files. And that's always a\ngood place to start.",
    "start": "1145600",
    "end": "1152990"
  },
  {
    "start": "1146000",
    "end": "1509000"
  },
  {
    "text": "Even if you are working\nwith the database, if you find that you're doing\none query over and over again that you're going to be\nthen working with that data,",
    "start": "1152990",
    "end": "1159430"
  },
  {
    "text": "a lot times better to\njust do that query, and then save those results\nto a file, and then just work with that file while\nyou're doing it.",
    "start": "1159430",
    "end": "1165500"
  },
  {
    "text": "And, again, this is\nsomething that people often do in our business. Now we're going to get to the\nactual database part of it.",
    "start": "1165500",
    "end": "1177260"
  },
  {
    "text": "So the first thing\nwe're going to do is we have to set\nup our database. So we're going to create\nsome tables in Accumulo.",
    "start": "1177260",
    "end": "1184850"
  },
  {
    "text": "And so we want to\ncreate those first so they're created properly. And so I'm going to show you\nthe program that does that.",
    "start": "1184850",
    "end": "1191110"
  },
  {
    "text": "The first thing that\nyou're going to do, it's going to call\na DB setup command. And so let me-- this program,\nI'm going to now show you that.",
    "start": "1191110",
    "end": "1197700"
  },
  {
    "text": "And so when you\nrun these examples, you will have to modify\nthis DB setup program. ",
    "start": "1197700",
    "end": "1205950"
  },
  {
    "text": "So the first thing\nyou'll notice is that we're all using the\nsame-- each group that's",
    "start": "1205950",
    "end": "1215210"
  },
  {
    "text": "with those databases is\nall using one user account. And you can say, well, that's\nnot the best way to do it.",
    "start": "1215210",
    "end": "1222720"
  },
  {
    "text": "Well, it's very consistent\nwith the group structure, in that it's basically\nyou're all users. The database is there to\nshare data amongst your group.",
    "start": "1222720",
    "end": "1231010"
  },
  {
    "text": "And so it is not an\nuncommon practice to have a single user account\nin which you put that data.",
    "start": "1231010",
    "end": "1236910"
  },
  {
    "text": "So we have a bit of\na namespace problem. If you all just ran\nthis example together,",
    "start": "1236910",
    "end": "1242549"
  },
  {
    "text": "you'd all create the exact\nsame table, and all fill it up. So the first thing\nwe're going to do is just pre-pend the tables.",
    "start": "1242550",
    "end": "1249389"
  },
  {
    "text": "And I would suggest that\nyou put your name-- instead of having my name there,\nyou put your name there.",
    "start": "1249390",
    "end": "1254964"
  },
  {
    "text": "And then we have\na special command you're called DB Setup LLGrid,\nwhich basically creates a binding to a database just\nusing the name of the database.",
    "start": "1254964",
    "end": "1265056"
  },
  {
    "text": "So it's a special function. That's not a generic function. It only works with\nour LLGrid system. And it only works if you have\nmounted the LLGrid file system.",
    "start": "1265056",
    "end": "1273760"
  },
  {
    "text": "So hide all this stuff\nhere, get rid of that.",
    "start": "1273760",
    "end": "1281488"
  },
  {
    "start": "1281488",
    "end": "1287160"
  },
  {
    "text": "So as you see here, I have\nmounted the yellow grid file system. ",
    "start": "1287160",
    "end": "1295700"
  },
  {
    "text": "And you need to do that because\nthe DB setup command, when",
    "start": "1295700",
    "end": "1300919"
  },
  {
    "text": "it binds to the\ndatabase it actually goes get the keys from\nthe LLGrid file system.",
    "start": "1300920",
    "end": "1307400"
  },
  {
    "text": "And those keys are sitting in\nthe group directory for that. So, basically, from a password\nmanagement perspective,",
    "start": "1307400",
    "end": "1315130"
  },
  {
    "text": "all we need to do is\nadd you to the group. And then you have\naccess to the database. Or if we remove\nyou from the group,",
    "start": "1315130",
    "end": "1321789"
  },
  {
    "text": "you no longer have\naccess to the database. So that's how we\ndo-- otherwise, we'd have to distribute keys to\nevery single user all the time.",
    "start": "1321790",
    "end": "1332170"
  },
  {
    "text": "And so this is why we do that. So this greatly simplifies it. But you will not be able\nto make a connection to one",
    "start": "1332170",
    "end": "1339269"
  },
  {
    "text": "of these databases unless\nyou are either logged into your LLGrid account. Or if you are on your computer,\nyou've mounted the file system,",
    "start": "1339270",
    "end": "1346980"
  },
  {
    "text": "and D4M knows where\nto look for the keys when you pass in\nthat setup command.",
    "start": "1346980",
    "end": "1352730"
  },
  {
    "start": "1352730",
    "end": "1360530"
  },
  {
    "text": "So if we look at that again--\nand this is just a shorthand",
    "start": "1360530",
    "end": "1366300"
  },
  {
    "text": "for the full DB server command. So if you were connecting to\nsome database directly other",
    "start": "1366300",
    "end": "1373430"
  },
  {
    "text": "than one of these--\nor you could even do it with these-- you\nwould have to pass in, essentially, a five\nargument thing,",
    "start": "1373430",
    "end": "1379130"
  },
  {
    "text": "which is the hostname of\nthe computer and the port,",
    "start": "1379130",
    "end": "1385560"
  },
  {
    "text": "the name of the instance,\nthe name of the-- I guess there's a couple instance\nnames here-- and then the name",
    "start": "1385560",
    "end": "1393809"
  },
  {
    "text": "of the user, and then\nan actual password. And so that's the generic\nway to connect in general.",
    "start": "1393810",
    "end": "1399090"
  },
  {
    "text": "But for of those of you\nconnected to LLGrid, we can just use this\nshorthand, which is very nice.",
    "start": "1399090",
    "end": "1405960"
  },
  {
    "text": "Then we're going to\nbuild a couple of tables. So we have these--\nfirst thing we're",
    "start": "1405960",
    "end": "1411420"
  },
  {
    "text": "going to do is we're going to\nwant to create a table that's going to hold that adjacency\nmatrix that I just created",
    "start": "1411420",
    "end": "1418049"
  },
  {
    "text": "with the files. And so we're going to do\nthat with a database pair. So if we have our\ndatabase object here",
    "start": "1418050",
    "end": "1424450"
  },
  {
    "text": "and we give it two\nstring names, it will know to create two\ntables in the database,",
    "start": "1424450",
    "end": "1431309"
  },
  {
    "text": "and return a binding to that\ntable that's a transposed pair.",
    "start": "1431310",
    "end": "1436340"
  },
  {
    "text": "So whenever we do an\ninsert into that table, it will insert the row and\nthe column in one table,",
    "start": "1436340",
    "end": "1442360"
  },
  {
    "text": "and then flip those and\ninsert the column and the row in the other table. And then whenever\nyou do a lookup,",
    "start": "1442360",
    "end": "1449000"
  },
  {
    "text": "it will know if it's doing a\nrow lookup to look on one table, and if it's doing a\ncolumn lookup to do it",
    "start": "1449000",
    "end": "1454560"
  },
  {
    "text": "on the other table. And this allows you to do\nfast lookups of both rows and columns and makes\nit all nice for you.",
    "start": "1454560",
    "end": "1461250"
  },
  {
    "text": "We're also going to\nwant to take advantage of Accumulo's built-in\nability to sum as we insert.",
    "start": "1461250",
    "end": "1466695"
  },
  {
    "text": "And so we're going to\ncreate something that's going to hold the degree as\nwe go-- very useful to have",
    "start": "1466695",
    "end": "1475059"
  },
  {
    "text": "these statistics,\nbecause a lot of times you want to look up something. But the first thing\nyou want to do",
    "start": "1475060",
    "end": "1480780"
  },
  {
    "text": "is to see, well, how many\nof them are in there? And so if you\ncreate, essentially, a column vector with that\ninformation, it's very helpful.",
    "start": "1480780",
    "end": "1488850"
  },
  {
    "text": "Later, we're going\nto do something where we actually store the\nraw edges that were created.",
    "start": "1488850",
    "end": "1494429"
  },
  {
    "text": "So when we create\nthe adjacency matrix, we actually lose a little\nbit of information.",
    "start": "1494430",
    "end": "1499806"
  },
  {
    "text": "And so when we create\nthis edge matrix, we'll be able to preserve\nthat matrix, that information. And, likewise, we'll\nbe doing the tallies",
    "start": "1499806",
    "end": "1506880"
  },
  {
    "text": "of the edges in that as well. So that's what this does. And that's the setup. You'll need to modify that\nand this program here.",
    "start": "1506880",
    "end": "1515690"
  },
  {
    "start": "1509000",
    "end": "1556000"
  },
  {
    "text": "Actually, basically\nafter the setup is done, it adds these accumulator things\nby designating certain columns",
    "start": "1515690",
    "end": "1524490"
  },
  {
    "text": "to be what they call combiners. So in this adjacency\ndegree table, I've said,",
    "start": "1524490",
    "end": "1529870"
  },
  {
    "text": "I want to create two new\ncolumns-- an out degree, in degree column,\nand the operation-- that I want to be\napplied when there",
    "start": "1529870",
    "end": "1536190"
  },
  {
    "text": "are collisions on\nthose values is sum. It will then sum the values.",
    "start": "1536190",
    "end": "1541620"
  },
  {
    "text": "And, likewise, with the\nedge, since I only have one I'm going to have to\ndegree and sum there.",
    "start": "1541620",
    "end": "1549630"
  },
  {
    "text": "So that's how we do that. So if we now go to our database\npage here-- so you can see,",
    "start": "1549630",
    "end": "1557360"
  },
  {
    "start": "1556000",
    "end": "1635000"
  },
  {
    "text": "class DB3, it started. We can actually view the info. And this is what a nice,\nfresh, never before used",
    "start": "1557360",
    "end": "1565942"
  },
  {
    "text": "Accumulo instance looks like. It has very little data. It has one table, a meta\ndata table and a trace table.",
    "start": "1565942",
    "end": "1574210"
  },
  {
    "text": "And there's no\nerrors or anything like that-- so a\nvery clean instance.",
    "start": "1574210",
    "end": "1579460"
  },
  {
    "text": " So that's what one looks like.",
    "start": "1579460",
    "end": "1585530"
  },
  {
    "text": "We're going to use one that\nwe've already started though, which is DB1.",
    "start": "1585530",
    "end": "1590920"
  },
  {
    "text": "And if we look at\nthe tables here, there's already some tables.",
    "start": "1590920",
    "end": "1597180"
  },
  {
    "text": "Michelle ran a\npractice run on this. [? Chansup ?] ran\na practice run. I'm going to now create those\ntables by live setup test.",
    "start": "1597180",
    "end": "1607169"
  },
  {
    "start": "1607170",
    "end": "1617160"
  },
  {
    "text": "There, it created\nall those tables. You can now see, did\nit actually work? ",
    "start": "1617160",
    "end": "1625300"
  },
  {
    "text": "So if I refresh that--\nand you can see, it's now created these six\ntables which are empty.",
    "start": "1625300",
    "end": "1636240"
  },
  {
    "start": "1635000",
    "end": "1764000"
  },
  {
    "text": "We do have abilities\nto set the write and read permissions\nof these tables. So right now, everyone\nhas the ability",
    "start": "1636240",
    "end": "1641980"
  },
  {
    "text": "to read, and write, and\ndelete everyone else's tables in a class database.",
    "start": "1641980",
    "end": "1647534"
  },
  {
    "text": "In a project, that's not such\na difficult thing to manage. You all know that. But you could imagine in\na situation [INAUDIBLE],",
    "start": "1647534",
    "end": "1653500"
  },
  {
    "text": "we had a big ingest. This is a corpus of data. We don't want anybody-- we can\nactually make the permissions.",
    "start": "1653500",
    "end": "1659680"
  },
  {
    "text": "We can make it read only so\nthat no one can delete it. Or we can make it so it's\nstill read and write, but it can't be deleted, whole\ncloth, those permissions exist.",
    "start": "1659680",
    "end": "1668059"
  },
  {
    "text": "A feature we will add\nto this database manager will also be a\ncheckpoint feature. So, for instance, if\nyou did a big ingest,",
    "start": "1668060",
    "end": "1675690"
  },
  {
    "text": "have a bunch of data that\nyou're very happy with, you can checkpoint it. You'll have to\nstop the database.",
    "start": "1675690",
    "end": "1681500"
  },
  {
    "text": "Then you can create a checkpoint\nof that stop database, name checkpoint. And then you can restart\nfrom that, if for some reason",
    "start": "1681500",
    "end": "1688300"
  },
  {
    "text": "your database gets corrupted. As I like to say, Accumulo,\nlike all other databases,",
    "start": "1688300",
    "end": "1693960"
  },
  {
    "text": "is stable for production. But it can be unstable\nfor development. New database users, the\ndatabase will train you",
    "start": "1693960",
    "end": "1702790"
  },
  {
    "text": "in terms of the things that\nyou should not do to it. And so over time, you will not\ndo things that destroy data,",
    "start": "1702790",
    "end": "1709740"
  },
  {
    "text": "or cause your database\nto be very unhappy. And then you will have a\nnice production database, because you will only do\nthings that make it happy.",
    "start": "1709740",
    "end": "1716190"
  },
  {
    "text": "But in that phase\nwhere you're learning, or you're experimenting\nwith things, as with all databases,\nany database,",
    "start": "1716190",
    "end": "1722580"
  },
  {
    "text": "it's easy to do\ncommands that will put the database in a\nfairly unhappy state, even",
    "start": "1722580",
    "end": "1727670"
  },
  {
    "text": "to the point of corrupting\nor losing the data. ",
    "start": "1727670",
    "end": "1733780"
  },
  {
    "text": "But for the most part, once it's\nup and running in production-- and we have a database that's\nbeen running for almost two",
    "start": "1733780",
    "end": "1739620"
  },
  {
    "text": "years continuously using a very\nold version of this software.",
    "start": "1739620",
    "end": "1744730"
  },
  {
    "text": "So it just continues\nto hum away. It's got billions\nof entries in it. ",
    "start": "1744730",
    "end": "1751620"
  },
  {
    "text": "It's running on a single Mac. And so it definitely, we've seen\nsituations where it's-- it has",
    "start": "1751620",
    "end": "1759610"
  },
  {
    "text": "the same stability as just\nabout any other database. So now we've created\nthese tables.",
    "start": "1759610",
    "end": "1767010"
  },
  {
    "start": "1764000",
    "end": "2263000"
  },
  {
    "text": "And let's insert\nsome data into them. So I do pDB06.",
    "start": "1767010",
    "end": "1776130"
  },
  {
    "text": "So I'm now going to insert\nthe adjacency matrix. ",
    "start": "1776130",
    "end": "1784230"
  },
  {
    "text": "And now it's basically\nereading in each file and ingesting that data.",
    "start": "1784230",
    "end": "1791710"
  },
  {
    "text": "And it's not a lot of data. It doesn't take very long. And now you can see up here\nthat data is getting ingested.",
    "start": "1791710",
    "end": "1803049"
  },
  {
    "text": "And you see there. So we just inserted about 62,000\nin each of those two tables,",
    "start": "1803050",
    "end": "1809340"
  },
  {
    "text": "and 25,000, which for\nAccumulo is a trivial amount.",
    "start": "1809340",
    "end": "1814390"
  },
  {
    "text": "We just inserted 150,000\nentries into a database,",
    "start": "1814390",
    "end": "1819480"
  },
  {
    "text": "which is pretty\nimpressive, to be able to do that in, essentially,\nthe blink of an eye.",
    "start": "1819480",
    "end": "1825630"
  },
  {
    "text": "And that's really the\nreal power of Accumulo, is this-- on a lot of other\ndatabases, 150,000 entries,",
    "start": "1825630",
    "end": "1833320"
  },
  {
    "text": "you're talking\nabout a few minutes. And here, it's just\nyou wouldn't even think about doing that twice. ",
    "start": "1833320",
    "end": "1842780"
  },
  {
    "text": "So we can take a\nlook at that program. ",
    "start": "1842780",
    "end": "1848080"
  },
  {
    "text": "So here we go. So we had eight files here,\nand basically loaded the data.",
    "start": "1848080",
    "end": "1855080"
  },
  {
    "text": "And, basically, one\nthing we have to remember is that our adjacency\nmatrix has numeric values",
    "start": "1855080",
    "end": "1864260"
  },
  {
    "text": "in an associative array. And Accumulo can\nonly hold strings. So we have to call\nNumtoString function, which",
    "start": "1864260",
    "end": "1871310"
  },
  {
    "text": "will convert those numbers\ninto strings to be stored.",
    "start": "1871310",
    "end": "1876630"
  },
  {
    "text": "So the first thing we do is we\nload our adjacency matrix A.",
    "start": "1876630",
    "end": "1882800"
  },
  {
    "text": "We convert the numeric\nvalues to strings. And we just do a put. So we can just insert the\nassociative array directly",
    "start": "1882800",
    "end": "1889120"
  },
  {
    "text": "into the adjacency matrix. It pulls apart the triples. And it knows how to\ntake care of the fact",
    "start": "1889120",
    "end": "1896720"
  },
  {
    "text": "that it recognizes this is\na transposed table pair. And it does that ingest for you.",
    "start": "1896720",
    "end": "1901860"
  },
  {
    "text": "And, likewise, same thing here--\nnow on these other things, we pulled it out. We summed it, convert it to\nstrings to do the out degree,",
    "start": "1901860",
    "end": "1910150"
  },
  {
    "text": "and the same thing\nto do in degree. And so this is actually where\nthe adjacency matrix comes in very handy because when\nwe're doing accumulating,",
    "start": "1910150",
    "end": "1918409"
  },
  {
    "text": "if we didn't first sum\nit and then do it-- if we put those raw\ntriples into insert,",
    "start": "1918410",
    "end": "1925529"
  },
  {
    "text": "we're essentially redoing\nthe complete insert. And so this saves\nusually an order",
    "start": "1925530",
    "end": "1931570"
  },
  {
    "text": "of magnitude in\nnumber of inserts by basically doing the sum\nin our D4M program first,",
    "start": "1931570",
    "end": "1937510"
  },
  {
    "text": "and then just inserting those\nsum values, just a nice way to save the database a little\nbit of trouble in doing that.",
    "start": "1937510",
    "end": "1944280"
  },
  {
    "text": "And so we certainly recommend\nthis type of approach for doing that. ",
    "start": "1944280",
    "end": "1955860"
  },
  {
    "text": "So the next one DB07. So now we're going to a query. We're going to get some\ndata out of that table.",
    "start": "1955860",
    "end": "1963220"
  },
  {
    "start": "1963220",
    "end": "1970570"
  },
  {
    "text": "And so what we did\nhere is we said, I want to pick 100\nrandom vertices.",
    "start": "1970570",
    "end": "1977190"
  },
  {
    "text": "So in this case, I randomly\ngenerate 100 random vertices",
    "start": "1977190",
    "end": "1982259"
  },
  {
    "text": "over the range 1 to 1,000. OK And I then convert those\nto a string, because these",
    "start": "1982260",
    "end": "1991269"
  },
  {
    "text": "are numeric values. And I will look up strings. And then the first\nthing I'm going to do is I'm going to look up\nthe degrees, essentially,",
    "start": "1991269",
    "end": "1998420"
  },
  {
    "text": "of those vertices. So I have my sum table here\ncalled T adjacency degree.",
    "start": "1998420",
    "end": "2004159"
  },
  {
    "text": "I'm going to pass\nthose strings in. And then I'm going to\nget just the degrees. So that's just a big,\nlong, skinny vector.",
    "start": "2004160",
    "end": "2010910"
  },
  {
    "text": "Looking things up from\nthat takes much less time than looking up whole\nrows or columns.",
    "start": "2010910",
    "end": "2017457"
  },
  {
    "text": "And it stores all\nthose values for me. So that's a great\nplace to start. And then I want to\nsay, you know what? I only care about degrees that\nhave been a particular range.",
    "start": "2017457",
    "end": "2026290"
  },
  {
    "text": "This is a very\ncommon thing to do. There will be vertices that\nare so common you're like, I don't care about those.",
    "start": "2026290",
    "end": "2033000"
  },
  {
    "text": "I have their tally. And these are sometimes\ncalled super nodes. And doing anything with\nthose is a waste of my time,",
    "start": "2033000",
    "end": "2040220"
  },
  {
    "text": "and forces me to end up\ntraversing enormous swathes of the database. So I'll set an upper threshold\nhere and a lower threshold.",
    "start": "2040220",
    "end": "2049199"
  },
  {
    "text": "So, basically, I take a degree. I'm just going to look\nat the out degree. And I say, I want things\nthat are greater than the min",
    "start": "2049199",
    "end": "2055460"
  },
  {
    "text": "and less than the max. And I want to get\njust those rows. So that's this query, a\nfairly complicated thing,",
    "start": "2055460",
    "end": "2061619"
  },
  {
    "text": "analytic here done\nin just one line. And now a new set of vertices,\nwhich are just the rows that",
    "start": "2061620",
    "end": "2068230"
  },
  {
    "text": "satisfy this requirement. And then I'm going to\nlook those up again. So I'm just going to look up\nthe ones that satisfy those--",
    "start": "2068230",
    "end": "2074449"
  },
  {
    "text": "now I'm going to get the\nwhole row of those things. So before, I was just\nlooking up their counts.",
    "start": "2074449",
    "end": "2079502"
  },
  {
    "text": "Now I'm going to\nget the whole row. And I know that\nthere's none that have more than this certain\nvalue, or have too few.",
    "start": "2079502",
    "end": "2086800"
  },
  {
    "text": "And then I'm going to plot it. And so if we look at the\nfigure, there we see.",
    "start": "2086800",
    "end": "2094219"
  },
  {
    "text": "So we ended up finding one,\ntwo, three, four rows that",
    "start": "2094219",
    "end": "2101440"
  },
  {
    "text": "had between-- these should all\nwrite-- one, two, three, four, five, six, seven, so\nthat's between five and 10.",
    "start": "2101440",
    "end": "2107160"
  },
  {
    "text": "These should all be\nbetween five and 10. And then this shows what\ntheir actual column was.",
    "start": "2107160",
    "end": "2112590"
  },
  {
    "text": "And so that's a\nvery quick example of that kind of analytic. And, again, real bread\nand butter, and this",
    "start": "2112590",
    "end": "2119390"
  },
  {
    "text": "is basically standard from a\nsignal processing perspective. The max is our\nclutter threshold.",
    "start": "2119390",
    "end": "2126400"
  },
  {
    "text": "We don't want that. It's too bright. And then we'll have\na noise threshold. We're like, we\ndon't care anything",
    "start": "2126400",
    "end": "2132140"
  },
  {
    "text": "that's below a certain value. And this sort of narrows\nin on the signal. Same kind of processing\nand signal processing,",
    "start": "2132140",
    "end": "2137910"
  },
  {
    "text": "we're doing it here on graphs. And Accumulo supports that\nvery, very nicely for us. ",
    "start": "2137910",
    "end": "2149030"
  },
  {
    "text": "So let's move on to\nthe next example. And, actually, if we look here,\nif we go back to the overview--",
    "start": "2149030",
    "end": "2161987"
  },
  {
    "text": "so you see here, that\nwas that ingest I did. This is the ingest--\nso very quick, it's getting about\n5,000 inserts a second.",
    "start": "2161987",
    "end": "2168290"
  },
  {
    "text": "That was over a very\nshort period of time. It doesn't even time to get\nreach its full rise time there. And then you can\nsee the scan rate.",
    "start": "2168290",
    "end": "2174420"
  },
  {
    "text": "And it was very small. It was a very tiny\namount type of thing. As we do larger data sets,\nyou'll really see that.",
    "start": "2174420",
    "end": "2180010"
  },
  {
    "text": "And this is a great tool here. It really shows you\nwhat's really going on.",
    "start": "2180010",
    "end": "2185960"
  },
  {
    "text": " Before you use the database,\nalways check this page.",
    "start": "2185960",
    "end": "2194220"
  },
  {
    "text": "If you can't get to the\npage of the database, you're not going to be able\nto get to the database. There's no point in\ndoing anything with D4M",
    "start": "2194220",
    "end": "2201480"
  },
  {
    "text": "if this page is not responding. Likewise, if you look\nat this, and you see this thing is just hamming away.",
    "start": "2201480",
    "end": "2209222"
  },
  {
    "text": "You're seeing hundreds\nof thousands or millions of inserts a second, it\nmeans that, guess what? Someone is probably\nusing your database.",
    "start": "2209222",
    "end": "2215170"
  },
  {
    "text": "And you might want to either\npick a different database, or find out who that\nis and say, hey, when are you going to be\ndone, or something like that?",
    "start": "2215170",
    "end": "2221890"
  },
  {
    "text": "Likewise, on the scan side. Likewise, when you do inserts--\nyou'll get some examples here",
    "start": "2221890",
    "end": "2229150"
  },
  {
    "text": "of the kinds of rates\nyou should be seeing. You want to make sure\nyou're seeing those rates. If you're not\nseeing those rates,",
    "start": "2229150",
    "end": "2234244"
  },
  {
    "text": "if you're basically\njust using the resource but only inserting\nat a low rate, then you're actually\ndoing yourself",
    "start": "2234244",
    "end": "2240590"
  },
  {
    "text": "and everybody else a disservice. You're using the database. But you're using\nit inefficiently. And it's much better to\nhave your inserts go fast,",
    "start": "2240590",
    "end": "2247010"
  },
  {
    "text": "because then you're\nout of the way. Your work gets done quicker. And then you're out of everybody\nelse's way quicker too. So I highly recommend\npeople look at this",
    "start": "2247010",
    "end": "2256730"
  },
  {
    "text": "to see what's going on. So I think the\nlast one was seven. So we'll move on to eight here.",
    "start": "2256730",
    "end": "2264049"
  },
  {
    "start": "2263000",
    "end": "2820000"
  },
  {
    "text": "So now we're going to do\nanother type of query. We're going to do a little\nbit more sophisticated query",
    "start": "2264050",
    "end": "2269170"
  },
  {
    "text": "That query used\nthe degree tables to sort of prune our query. So you think about it.",
    "start": "2269170",
    "end": "2275712"
  },
  {
    "text": "There was probably\nan edge in there that had like 100 entries. And we just were\nable to avoid that,",
    "start": "2275712",
    "end": "2282270"
  },
  {
    "text": "never had to touch that edge. But if we had touched\nit, that could have been a much bigger query.",
    "start": "2282270",
    "end": "2287830"
  },
  {
    "text": "You might be like, well,\n100 doesn't sound bad. Well, it's easy to get\ndatabases where you'll have some rows with\na million entries,",
    "start": "2287830",
    "end": "2293760"
  },
  {
    "text": "or columns with a million\nentries, or a billion entries. And you really\ndon't want to have to query those rows or\ncolumns, because they will just",
    "start": "2293760",
    "end": "2302970"
  },
  {
    "text": "send back so much data. But you can still\nhave situations where you're doing\nqueries that are going",
    "start": "2302970",
    "end": "2308420"
  },
  {
    "text": "to take-- they're going to send\nback a lot of data, more data that you can really handle\nin your memory segment.",
    "start": "2308420",
    "end": "2315920"
  },
  {
    "text": "So we have a thing\ncalled an iterator. So we've created an iterator\nlog to set up a query and have it work through it.",
    "start": "2315920",
    "end": "2322379"
  },
  {
    "text": "Now, this table is so\nsmall that you won't really get to see the\niteration happening.",
    "start": "2322379",
    "end": "2327644"
  },
  {
    "text": "But I'll show you the setup. So we'll do that. So that was very quick. So, essentially, we're\ndoing a similar thing.",
    "start": "2327644",
    "end": "2333706"
  },
  {
    "text": "We're creating a\nrandom set of vertices here, about 100, creating\nover the range 1 to 1,000.",
    "start": "2333706",
    "end": "2341740"
  },
  {
    "text": "And we're creating an\niterator here called Tadjacency iterator. ",
    "start": "2341740",
    "end": "2349599"
  },
  {
    "text": "It's this function\nhere, iterator. We pass it in the table. Then we have a flag,\nwhich is element,",
    "start": "2349600",
    "end": "2354650"
  },
  {
    "text": "which is, how many entries do\nwe want this iterator-- it's the chunk size. How many entries do\nwe want this iterator",
    "start": "2354650",
    "end": "2362000"
  },
  {
    "text": "to return every single\ntime we call it? And here, we've set max element\nto be a pretty small number,",
    "start": "2362000",
    "end": "2367760"
  },
  {
    "text": "to be 1,000. So what we're saying is every\nsingle time we do this query, we want you to return\n1,000 at a time.",
    "start": "2367760",
    "end": "2376869"
  },
  {
    "text": "Now for those of you who\nare Matlab aficionados,",
    "start": "2376870",
    "end": "2381940"
  },
  {
    "text": "you should be in awe,\nbecause Matlab is supposed to be a stateless language. And there's nothing more\nstateful than an iterator.",
    "start": "2381940",
    "end": "2388690"
  },
  {
    "text": "And so we have tricked Matlab\nwith a combination of Matlab on the surface and some\nhidden Java under the covers",
    "start": "2388690",
    "end": "2395580"
  },
  {
    "text": "to make it have the feel\nof Matlab, yet hold state. So now what we're\ngoing to do is we're",
    "start": "2395580",
    "end": "2402000"
  },
  {
    "text": "going to-- this just\ncreates the iterator. We then initialize the query\nby actually passing in a query.",
    "start": "2402000",
    "end": "2409460"
  },
  {
    "text": "So we now say, OK, the query we\nwant is over this set of rows",
    "start": "2409460",
    "end": "2414960"
  },
  {
    "text": "here. And so we're going to run\nthe query the first time. And since that thing\nreturns string values,",
    "start": "2414960",
    "end": "2421599"
  },
  {
    "text": "and we want numbers, we\nhave to do a string to num. And that's our first\nassociative array that's",
    "start": "2421600",
    "end": "2426640"
  },
  {
    "text": "the result of the first query. We then initialize\nour tally here.",
    "start": "2426640",
    "end": "2431930"
  },
  {
    "text": "And then we just do a\nwhile on this result. So we're going to say, oh,\nif there's something there,",
    "start": "2431930",
    "end": "2438640"
  },
  {
    "text": "then we want sum that,\nand add it to our tally, to our in degree tally.",
    "start": "2438640",
    "end": "2443770"
  },
  {
    "text": "And then we call it again. So we do the next\nround of the iteration by just calling the\nobject with no argument.",
    "start": "2443770",
    "end": "2451970"
  },
  {
    "text": "And it will just run it\nuntil the query is empty. If we put in an argument,\nit would re-initialize",
    "start": "2451970",
    "end": "2458269"
  },
  {
    "text": "the iterator to that new query. And so you don't have\nto create a new iterator every single time you want\nto put in a different query.",
    "start": "2458270",
    "end": "2464770"
  },
  {
    "text": "You can reuse the object. Not that it really\nmatters, but this is how you get it to do again.",
    "start": "2464770",
    "end": "2470720"
  },
  {
    "text": "So it's a pretty elegant\nsyntax for basically doing an iterator. And it allows you to deal\nwith things very nicely.",
    "start": "2470720",
    "end": "2479100"
  },
  {
    "text": "And as we see here, then we\ndid the calculation here, which is all right.",
    "start": "2479100",
    "end": "2484440"
  },
  {
    "text": "I want it to then return\nthe value with the largest",
    "start": "2484440",
    "end": "2490170"
  },
  {
    "text": "maximum degree. So, basically, I\ncompute the max. I get the adjacency\nmatrix of the degree.",
    "start": "2490170",
    "end": "2496870"
  },
  {
    "text": "And I compute its maximum. And then I set that\nequal to n degree. And it tells me that the first\nvertex had a degree of 14",
    "start": "2496870",
    "end": "2505025"
  },
  {
    "text": "in this query,\nwhich makes sense. In the Kronecker\nmatrix, 1, 1 is always",
    "start": "2505025",
    "end": "2510190"
  },
  {
    "text": "the largest and densest value.",
    "start": "2510190",
    "end": "2515942"
  },
  {
    "text": "So that's just how\nwe use iterators.  Let us continue on here.",
    "start": "2515942",
    "end": "2521680"
  },
  {
    "text": " Now I'm going to use iterators\nin a more complicated way",
    "start": "2521680",
    "end": "2528720"
  },
  {
    "text": "to do a join. So a join is where I want\nto basically-- maybe there's",
    "start": "2528720",
    "end": "2536690"
  },
  {
    "text": "a row in the table. And I only want\nthe rows that have",
    "start": "2536690",
    "end": "2542210"
  },
  {
    "text": "both of a certain\ntype of value in them. So, for instance, if I had\na table of network records,",
    "start": "2542210",
    "end": "2548180"
  },
  {
    "text": "I might like, look, please\nonly return records that have this source IP, and are\ntalking to this domain name.",
    "start": "2548180",
    "end": "2556500"
  },
  {
    "text": "So we have to figure out how\nwe do joins in this technology. So I'm going to do that.",
    "start": "2556500",
    "end": "2562040"
  },
  {
    "text": "So let me run that. ",
    "start": "2562040",
    "end": "2568080"
  },
  {
    "text": "So join-- so a little\nbit more complicated, obviously, we're building up\nfairly complicated analytics",
    "start": "2568080",
    "end": "2573460"
  },
  {
    "text": "here. So I create my\niterator limit here.",
    "start": "2573460",
    "end": "2580590"
  },
  {
    "text": "I'm going to pick two columns\nto join, column 1 and column 2. And this just does a simple\njoin over those columns.",
    "start": "2580590",
    "end": "2588260"
  },
  {
    "text": "So basically what\nI'm doing is I'm saying, please return\nall the columns that",
    "start": "2588260",
    "end": "2595589"
  },
  {
    "text": "contain-- this is an or\nbasically either column 1 or 2.",
    "start": "2595590",
    "end": "2600860"
  },
  {
    "text": "I'm going to then convert\nthose values, which would have been string values\nof numerics, to just zeros or 1.",
    "start": "2600860",
    "end": "2609000"
  },
  {
    "text": "Then I'm going to sum that. So, basically, I\ngot the two columns. I converted all the values to 1.",
    "start": "2609000",
    "end": "2615085"
  },
  {
    "text": "Now I'm going to\nsum them together. And then I'm going\nto ask the question,",
    "start": "2615085",
    "end": "2621650"
  },
  {
    "text": "where were those equal to 2? Those show me the records. So that's what I'm doing here.",
    "start": "2621650",
    "end": "2627540"
  },
  {
    "text": "I'm saying, those equal to 2. So that shows me all the records\nwhere that value is equal to 2.",
    "start": "2627540",
    "end": "2633270"
  },
  {
    "text": "And I can then get the\nrow of those things, and then pass that back\nin to the original matrix.",
    "start": "2633270",
    "end": "2642550"
  },
  {
    "text": "And now I will get back\nthose rows with those things.",
    "start": "2642550",
    "end": "2648390"
  },
  {
    "text": "And so we can see that. I think that's the first\nfigure that we did here. We go to figure one.",
    "start": "2648390",
    "end": "2655869"
  },
  {
    "text": "And those show,\nbasically-- what did we do?",
    "start": "2655870",
    "end": "2661500"
  },
  {
    "text": "Right. ",
    "start": "2661500",
    "end": "2675080"
  },
  {
    "text": "This shows us the complete\nrows of all the records",
    "start": "2675080",
    "end": "2680690"
  },
  {
    "text": "that had the value 1. So this is here,\n1, and I think it was 100, which is somewhere\nright probably in there.",
    "start": "2680690",
    "end": "2689960"
  },
  {
    "text": "So basically every single one\nof these records had 1 and 100",
    "start": "2689960",
    "end": "2695110"
  },
  {
    "text": "in it. And then it shows us all\nthe rest of the values that are also in that record. If we just wanted those\ncolumns and those values,",
    "start": "2695111",
    "end": "2702980"
  },
  {
    "text": "when we just summed them\nequal to 2, we were done. But this allowed us to then\ngo back into the record, and now into the full set,\nand just get those records.",
    "start": "2702980",
    "end": "2711690"
  },
  {
    "text": "So this is a way\nto do a join if you can hold the complete results\nof both of those things,",
    "start": "2711690",
    "end": "2719260"
  },
  {
    "text": "like give me the whole column\n1, and the whole column 2. That's one way to do a join,\nperfectly reasonable way",
    "start": "2719260",
    "end": "2726700"
  },
  {
    "text": "to do a join. I'm going to now do this\nagain, but with a column range.",
    "start": "2726700",
    "end": "2732589"
  },
  {
    "text": "So I'm going to say, I want to\ndo a join of all columns that",
    "start": "2732590",
    "end": "2737600"
  },
  {
    "text": "begin with 111, and all\ncolumns that begin with 222. So that would return more.",
    "start": "2737600",
    "end": "2743500"
  },
  {
    "text": "I'm going to create two\niterators now to do that. So I have initialized my\niterator, iterator one",
    "start": "2743500",
    "end": "2749295"
  },
  {
    "text": "and iterator two. And so now I'm going to start\nthe first query iterator here",
    "start": "2749295",
    "end": "2755119"
  },
  {
    "text": "by giving it its column\nrange that initializes it. And I get an A1. And then I check to\nsee if A1 is not empty.",
    "start": "2755120",
    "end": "2763460"
  },
  {
    "text": "If it isn't empty, I'm going to\nthen sum it, and then call it again until it proceeds.",
    "start": "2763460",
    "end": "2768809"
  },
  {
    "text": "And since it's\nsuch a small thing, it only went through that once. And then now I'm going to\ndo the same thing again",
    "start": "2768810",
    "end": "2775770"
  },
  {
    "text": "with the other iterator and\nsum them to get together again. ",
    "start": "2775770",
    "end": "2786140"
  },
  {
    "text": "And now I'm going to\njoin those two columns.",
    "start": "2786140",
    "end": "2793064"
  },
  {
    "text": "And that's a way\nof doing the join with essentially two\nnested iterators, and doing the join that way.",
    "start": "2793064",
    "end": "2798480"
  },
  {
    "text": "So that's something you\ncan do if you couldn't hold the whole column in memory\nand you wanted to build it up",
    "start": "2798480",
    "end": "2805579"
  },
  {
    "text": "as you went. That's a way to do\nit with iterators. Then let's see here. ",
    "start": "2805580",
    "end": "2813750"
  },
  {
    "text": "There's an example of\nthe results from that. ",
    "start": "2813750",
    "end": "2820860"
  },
  {
    "start": "2820000",
    "end": "2870000"
  },
  {
    "text": "And just so you know,\nwhen you do an SQL query in an SQL database, this is what\nit's doing under the covers.",
    "start": "2820860",
    "end": "2827470"
  },
  {
    "text": "It's trying to do whatever\ninformation it can. It will [INAUDIBLE] hold a\nlot of internal statistical",
    "start": "2827470",
    "end": "2833560"
  },
  {
    "text": "information. It's trying to figure out, can\nI hold the results in memory? Or can I not?",
    "start": "2833560",
    "end": "2838884"
  },
  {
    "text": "Do I have to go\nthrough in chunks? Or do I not? Do I have information about\noh-- you know, this query,",
    "start": "2838884",
    "end": "2844910"
  },
  {
    "text": "do I have a sum table sitting\naround that will tell me, oh, which column\nshould I query first,",
    "start": "2844910",
    "end": "2852330"
  },
  {
    "text": "because it will\nreturn fewer results? And then I can go from\nthere type of thing. So this is all going\nunder the covers.",
    "start": "2852330",
    "end": "2859220"
  },
  {
    "text": "Here, you get the power to do\nthat directly on the database. And it's pretty easy to do.",
    "start": "2859220",
    "end": "2866570"
  },
  {
    "text": "But you do have to\nunderstand these concepts. So now we'll move on.",
    "start": "2866570",
    "end": "2872760"
  },
  {
    "text": "So that was all with\nthe adjacency matrix. And as I said before, when we\nformed the adjacency matrix, we threw away a\nlittle information,",
    "start": "2872760",
    "end": "2879809"
  },
  {
    "text": "because if we had multiple-- if\nwe had a collision of any kind, we lost the distinctness of\nthat record, or that edge.",
    "start": "2879810",
    "end": "2889910"
  },
  {
    "text": "And a lot of times, like, no\nwe want to keep these edges, because, yeah, we'll have other\ninformation about those edges.",
    "start": "2889910",
    "end": "2897190"
  },
  {
    "text": "And we want to keep things. So we want to store that.",
    "start": "2897190",
    "end": "2902530"
  },
  {
    "text": "So we're going to now reinsert\nthe data in the table, and use, essentially, instead\nof an adjacency matrix,",
    "start": "2902530",
    "end": "2910380"
  },
  {
    "text": "an incidence matrix. An incidence matrix, every\nsingle row is an edge.",
    "start": "2910380",
    "end": "2915770"
  },
  {
    "text": "And every single\ncolumn is a vertice. And so an edge can then\nconnect multiple vertices.",
    "start": "2915770",
    "end": "2922330"
  },
  {
    "text": "It also allows us\nto store essentially what we call hyper edges. So if you have an edge that\nconnects multiple vertices",
    "start": "2922330",
    "end": "2928590"
  },
  {
    "text": "at the same time,\nwe can do that. So let's do that.",
    "start": "2928590",
    "end": "2933700"
  },
  {
    "text": "This is inserting about\ntwice as much data. So it naturally takes a\nlittle bit longer there.",
    "start": "2933700",
    "end": "2942410"
  },
  {
    "text": "And you see the\nedge insertion rates that we're getting there,\n30,000 edges per second.",
    "start": "2942410",
    "end": "2948960"
  },
  {
    "text": "So let's go and see what\nit did to our data here.",
    "start": "2948960",
    "end": "2956060"
  },
  {
    "text": "So if we look at our\ntables, we can see now that there's our edge data set.",
    "start": "2956060",
    "end": "2964850"
  },
  {
    "text": "And you see we've inserted\nabout 270,000 distinct entries",
    "start": "2964850",
    "end": "2970970"
  },
  {
    "text": "in this data. So there's the edge table. And there's this transpose. And there's the degree count.",
    "start": "2970970",
    "end": "2977660"
  },
  {
    "text": "And as you saw\nbefore, we had 53,000. So that just shows you the\nadditional information.",
    "start": "2977660",
    "end": "2985310"
  },
  {
    "text": "Let's look at that program here. ",
    "start": "2985310",
    "end": "2990650"
  },
  {
    "text": "So, again, we're looping\nover all our files here.",
    "start": "2990650",
    "end": "2995880"
  },
  {
    "text": "We're reading them in. I should say, this case\nwe're reading in the raw text files again. We're not reading in\nthe associative array",
    "start": "2995880",
    "end": "3003020"
  },
  {
    "text": "because we just want\nto insert those edges. And then the only\nthing we've done is that, basically,\nto create our edge we",
    "start": "3003020",
    "end": "3009800"
  },
  {
    "text": "had to create-- this data\ndidn't come with a record label. So we don't have any.",
    "start": "3009800",
    "end": "3015339"
  },
  {
    "text": "So we're constructing a unique\nrecord label for each edge here just so that we\nhave it for the row key.",
    "start": "3015340",
    "end": "3021310"
  },
  {
    "text": "And then we're pre-pending the\nword out into the row string",
    "start": "3021310",
    "end": "3026800"
  },
  {
    "text": "and in into the column string. So we know when we\ncreate our record,",
    "start": "3026800",
    "end": "3032970"
  },
  {
    "text": "out shows the\ndirection it came from. And in shows the\ndirection it left. And so that's a way\nof creating the edge.",
    "start": "3032970",
    "end": "3040319"
  },
  {
    "text": "And then, likewise, we do\nthe count degree and such",
    "start": "3040320",
    "end": "3046340"
  },
  {
    "text": "to preserve that\ninformation so we can sum the new total\nnumber of counts there.",
    "start": "3046340",
    "end": "3051495"
  },
  {
    "start": "3051496",
    "end": "3057410"
  },
  {
    "text": "So let's do some\nqueries on that. ",
    "start": "3057410",
    "end": "3065600"
  },
  {
    "text": "So I'm going to ask for\n100 random vertices here. So I get my random vertices.",
    "start": "3065600",
    "end": "3071390"
  },
  {
    "text": "And then I'm going to do\nmy query of the strings. But I have to pre-pend this\nout, slash, the value in it",
    "start": "3071390",
    "end": "3080390"
  },
  {
    "text": "so I know I'm looking for\nvertices from which the edge is",
    "start": "3080390",
    "end": "3086819"
  },
  {
    "text": "departing. And I'm going to\nget those edges. So I get those edges. So I created the query.",
    "start": "3086820",
    "end": "3093040"
  },
  {
    "text": "I get the edges. I'm going to do my\nthresholding again. I want a certain min and max.",
    "start": "3093040",
    "end": "3100010"
  },
  {
    "text": "And then I'm going\nto do the threshold.",
    "start": "3100010",
    "end": "3106660"
  },
  {
    "text": "So this just gave me\nthe degree counts. And I thresholded\nbetween this range.",
    "start": "3106660",
    "end": "3112150"
  },
  {
    "text": "And then now I then do the same\nthing back with the-- I say,",
    "start": "3112150",
    "end": "3120289"
  },
  {
    "text": "give me everything\ngreater than degree min and less than degree max. I get a new set of rows. So that will just\nreturn the edges",
    "start": "3120290",
    "end": "3127800"
  },
  {
    "text": "that are a part of vertices\nwith these degree range.",
    "start": "3127800",
    "end": "3134130"
  },
  {
    "text": "And then I'm going to get all\nthose edges, all the records",
    "start": "3134130",
    "end": "3141230"
  },
  {
    "text": "that contain those vertices,\nthrough this nested query here.",
    "start": "3141230",
    "end": "3146480"
  },
  {
    "text": "The result is this. So, basically, this\nshows me all the edges",
    "start": "3146480",
    "end": "3152890"
  },
  {
    "text": "there are a part of this\nrandom set of vertices",
    "start": "3152890",
    "end": "3160309"
  },
  {
    "text": "that have a degree range\nbetween five and 10.",
    "start": "3160310",
    "end": "3165430"
  },
  {
    "text": "This is a fairly\nsophisticated analytic. ",
    "start": "3165430",
    "end": "3170984"
  },
  {
    "text": "We're doing about\nseven or eight queries here, doing a lot\nof mathematics. And you see how dense it is.",
    "start": "3170984",
    "end": "3178040"
  },
  {
    "text": "And, hopefully, from what\nwe've learned in prior has some intuition for you.",
    "start": "3178040",
    "end": "3184170"
  },
  {
    "text": " And we'll continue on. ",
    "start": "3184170",
    "end": "3194610"
  },
  {
    "text": "So now I'm going to do a\nquery with the iterator-- again, same type of drill. I set the maximum number of\nelements to the iterator.",
    "start": "3194610",
    "end": "3200960"
  },
  {
    "text": "I get my random set of things. I create an iterator, again\nsetting the number of elements.",
    "start": "3200960",
    "end": "3206570"
  },
  {
    "text": "I initialize the iterator\nto be over these vertices. I then check to see if\nit returned anything.",
    "start": "3206570",
    "end": "3214599"
  },
  {
    "text": "If it did, I'm going\nto then actually pass",
    "start": "3214600",
    "end": "3219710"
  },
  {
    "text": "the rows of that back into it\nto get the edges containing",
    "start": "3219710",
    "end": "3227670"
  },
  {
    "text": "those vertices,\nand then do a sum to compute the in degree,\nand so on and so forth.",
    "start": "3227670",
    "end": "3233029"
  },
  {
    "text": "And then I get here\nthe maximum in degree of that set of vertices was 25.",
    "start": "3233030",
    "end": "3239520"
  },
  {
    "text": "So that's just an\nexample of that. And that was 12.",
    "start": "3239520",
    "end": "3245140"
  },
  {
    "text": "And I think 13 is our last one. ",
    "start": "3245140",
    "end": "3256300"
  },
  {
    "text": "All right, and again, a\nmore complicated example showing basically a join\nover this space creating,",
    "start": "3256300",
    "end": "3266760"
  },
  {
    "text": "essentially, a couple\nof sets of edges,",
    "start": "3266760",
    "end": "3273420"
  },
  {
    "text": "a couple of column\nranges, iterators, and so on and so forth. And I won't belabor this point.",
    "start": "3273420",
    "end": "3278490"
  },
  {
    "text": "But this just shows how you\ncan combine between using the degree table and iterators.",
    "start": "3278490",
    "end": "3286155"
  },
  {
    "text": "You have all the\ntools at your disposal that any type of query planning\nsystem would have inside it,",
    "start": "3286155",
    "end": "3294990"
  },
  {
    "text": "that it would use to\nmake sure that you're not over-taxing the results\nthat you're returning too.",
    "start": "3294990",
    "end": "3302871"
  },
  {
    "text": "And that's a lot of times if\nyou do a query on any database, you get the big spinning\nwatch or whatever.",
    "start": "3302871",
    "end": "3308100"
  },
  {
    "text": "It's because the query you\nasked was simply too long.",
    "start": "3308100",
    "end": "3313590"
  },
  {
    "text": "It also gives a\nlot of nice places to-- if you're making a query\nsystem, to interrupt it.",
    "start": "3313590",
    "end": "3321420"
  },
  {
    "text": "So if you do the query\nagainst the counts, you can quickly tell the user,\nlook, you just did a query.",
    "start": "3321420",
    "end": "3327440"
  },
  {
    "text": "And this is going to\nreturn 10 million results. Do you want to proceed?",
    "start": "3327440",
    "end": "3333312"
  },
  {
    "text": "And so you, of\ncourse, [INAUDIBLE]. Or likewise, you can set a\nmaximum number of iterations.",
    "start": "3333312",
    "end": "3338600"
  },
  {
    "text": "Like it says, OK, I\nwant to get them back in units of 100,000 entries.",
    "start": "3338600",
    "end": "3344070"
  },
  {
    "text": "But I only want to\ngo up to a million. And then I'm going\nto pause and get",
    "start": "3344070",
    "end": "3349220"
  },
  {
    "text": "some kind of additional guidance\nfrom the user to continue. So those are the\nsame tools and tricks that are in any query planner\nvery elegantly exposed",
    "start": "3349220",
    "end": "3357250"
  },
  {
    "text": "to you here for managing\nthese types of queries.",
    "start": "3357250",
    "end": "3363120"
  },
  {
    "text": "With that, I want\nto do some stuff where we do a little\nbit of bigger data sets. So I've walked\nthrough the examples.",
    "start": "3363120",
    "end": "3369580"
  },
  {
    "text": "I want to show you what this is\nlike running on a bigger data.",
    "start": "3369580",
    "end": "3374830"
  },
  {
    "text": "So let's close all that. ",
    "start": "3374830",
    "end": "3380530"
  },
  {
    "text": "Close that. ",
    "start": "3380530",
    "end": "3394070"
  },
  {
    "text": "I want to do this one. So now I'm logged\ninto-- I just SSHed",
    "start": "3394070",
    "end": "3401619"
  },
  {
    "text": "into classdb02.cloud.\nllgrid.ll.mit.edu, which",
    "start": "3401620",
    "end": "3408180"
  },
  {
    "text": "happens-- it tells you which\nnode it's actually mapped to, which is node F-15-11\nin our cluster.",
    "start": "3408180",
    "end": "3415030"
  },
  {
    "text": "And this is a fairly\npowerful compute node. These are our next generation\ncompute nodes for LLGrid. So those of you who've\nbeen using LLGrid",
    "start": "3415030",
    "end": "3421230"
  },
  {
    "text": "for all these past\nyears, may have noticed that they're getting\na little long in the tooth. These are the first\nset of the new nodes.",
    "start": "3421230",
    "end": "3428180"
  },
  {
    "text": "And we'll have about 500 of\nthem total in various systems. And so here, I am doing\nsomething a little bit larger.",
    "start": "3428180",
    "end": "3439960"
  },
  {
    "text": "So let me see here. ",
    "start": "3439960",
    "end": "3446060"
  },
  {
    "text": "Examples-- so I'm on\nmy LLGrid account here. And I'm going to\ngo to 3 and then 2.",
    "start": "3446060",
    "end": "3453810"
  },
  {
    "text": "Then I do open dots. So that's the directory.",
    "start": "3453810",
    "end": "3460030"
  },
  {
    "text": "And so the first thing I\ndid is in my DB setup here,",
    "start": "3460030",
    "end": "3465520"
  },
  {
    "text": "you'll notice that I\nhave done class DB 0.",
    "start": "3465520",
    "end": "3473150"
  },
  {
    "text": "And also, we don't need to do 1. But I will do 2 here.",
    "start": "3473150",
    "end": "3478200"
  },
  {
    "text": "I've made this bigger. So I have made this now\n2 to the 18th vertices,",
    "start": "3478200",
    "end": "3483320"
  },
  {
    "text": "instead of what I had before. So let's go [INAUDIBLE] anymore.",
    "start": "3483320",
    "end": "3491940"
  },
  {
    "text": "So if I do PDB02, it's going\nto now generate these things.",
    "start": "3491940",
    "end": "3498936"
  },
  {
    "text": "And so it's generating\na lot more data. And you see it's doing at about\n200,000 vertices per second.",
    "start": "3498936",
    "end": "3504684"
  },
  {
    "text": "Just shows you the difference\nbetween the capability of my laptop and one\nof these servers here.",
    "start": "3504684",
    "end": "3512900"
  },
  {
    "text": "And this will also-- I'm\nlogged onto this system. It has 32 cores.",
    "start": "3512900",
    "end": "3518390"
  },
  {
    "text": "I can do things in parallel. And so, for instance,\nif I did eval p run,",
    "start": "3518390",
    "end": "3526310"
  },
  {
    "text": "for those of you who have had\nthe parallel Matlab training,",
    "start": "3526310",
    "end": "3532690"
  },
  {
    "text": "I can say before. And since I'm logged\ninto this node, and I just do curly\nbrackets, it just",
    "start": "3532690",
    "end": "3539119"
  },
  {
    "text": "says launch locally\non that node. Don't launch onto the grid. ",
    "start": "3539120",
    "end": "3545599"
  },
  {
    "text": "And now it's launching that in\nparallel on this node data one,",
    "start": "3545600",
    "end": "3550660"
  },
  {
    "text": "did that. Data two, did that. Now it's done. And the others finished there\nwork too, probably right",
    "start": "3550660",
    "end": "3557170"
  },
  {
    "text": "about now. So that's just an\nexample of being able to do things in parallel. We've created here-- I\nmean, you look at it.",
    "start": "3557170",
    "end": "3563580"
  },
  {
    "text": "We did eight times 300,000. We did 2.5 million edges\nin that, essentially,",
    "start": "3563580",
    "end": "3571880"
  },
  {
    "text": "five seconds type of thing. So multiply this by 4.",
    "start": "3571880",
    "end": "3577420"
  },
  {
    "text": "You're doing like a\nmillion edges a second just in that one type of\ncalculation there.",
    "start": "3577420",
    "end": "3584400"
  },
  {
    "text": "Move on TBPB03. And-- oh, I should say, I did\nmodify that program slightly.",
    "start": "3584400",
    "end": "3594200"
  },
  {
    "text": "Let's see here.  So if I look at-- the line\nlabeled in big capital letters",
    "start": "3594200",
    "end": "3607400"
  },
  {
    "text": "parallel, I uncommented it. That's what allows each\none of the processors when",
    "start": "3607400",
    "end": "3613450"
  },
  {
    "text": "they launched to then\nwork on different files. Otherwise, they all would\nhave worked on the same files.",
    "start": "3613450",
    "end": "3619650"
  },
  {
    "text": "So by uncommenting\nthat parallel, this now becomes\na parallel program",
    "start": "3619650",
    "end": "3624730"
  },
  {
    "text": "that I can run with\nevalp run command. Of course, you have to have\nparallel Matlab installed, which of course you all\ndo since you're on LLGrid.",
    "start": "3624730",
    "end": "3630753"
  },
  {
    "text": "But for anyone seeing\nthis on the internet, they would need to have that\nsoftware installed too, which",
    "start": "3630753",
    "end": "3636470"
  },
  {
    "text": "is also available on the\nweb and installable there. So that's all we\nneeded to do, was uncomment that one line to\nmake that program parallel,",
    "start": "3636470",
    "end": "3644320"
  },
  {
    "text": "and did the right\nthing for us as well. And we're going to go\non to the next example. And we did the same thing there.",
    "start": "3644320",
    "end": "3651089"
  },
  {
    "text": "We just uncommented parallel. And it's now going to create\nthese associate arrays in parallel.",
    "start": "3651090",
    "end": "3656490"
  },
  {
    "text": "So if I do PDB30-- so it's\nnow actually constructing",
    "start": "3656490",
    "end": "3667410"
  },
  {
    "text": "these associate arrays. You see it takes\nabout four seconds to do each one of those. It's doing about 120,000,\n130,000 entries per second.",
    "start": "3667410",
    "end": "3677740"
  },
  {
    "text": "So this thing will take about 25\nseconds to do the whole thing. ",
    "start": "3677740",
    "end": "3695730"
  },
  {
    "text": "And, again, if we ran that\nin parallel, it automatically",
    "start": "3695730",
    "end": "3710380"
  },
  {
    "text": "tries to kill the\nlast job you ran if you're in the same\ndirectory so that you're not [INAUDIBLE] on top of yourself.",
    "start": "3710380",
    "end": "3717330"
  },
  {
    "text": "And now you see it's\ndoing that again. And now it's done.",
    "start": "3717330",
    "end": "3723900"
  },
  {
    "text": "And the other one\nis finished as well. You can actually check\nthat, if you really want to.",
    "start": "3723900",
    "end": "3730310"
  },
  {
    "text": "Just hit Control Z, if I\ndo more [INAUDIBLE] out.",
    "start": "3730310",
    "end": "3738062"
  },
  {
    "text": "You can see those for the output\nfiles of each one of them. I'm not lying. They didn't take a\nridiculous amount of time.",
    "start": "3738062",
    "end": "3743394"
  },
  {
    "text": "They all completed. You always encourage\npeople to check those dot out files, and then\nthat [INAUDIBLE] directory.",
    "start": "3743394",
    "end": "3748845"
  },
  {
    "text": "That's where it sends\nall the standard out from all the other nodes. It's probably the\nnumber one feedback we get from a user who\nsays, my job didn't run.",
    "start": "3748845",
    "end": "3756570"
  },
  {
    "text": "We're like, what does it\nsay in your .out files? And usually, like, oh\nthere's an error on node 3 because this calculation is\nwrong on that particular node,",
    "start": "3756570",
    "end": "3763700"
  },
  {
    "text": "or something like that-- so\njust reminding folks of that.",
    "start": "3763700",
    "end": "3768800"
  },
  {
    "text": "Moving on-- so what\ndid we just do? We did three.",
    "start": "3768800",
    "end": "3774130"
  },
  {
    "text": "So we did PDB4, re-test.",
    "start": "3774130",
    "end": "3779380"
  },
  {
    "text": " And this is doing a little\nbit bigger calculation.",
    "start": "3779380",
    "end": "3785200"
  },
  {
    "text": "And so you can see\nhere-- I told you it does begin to\nget bigger here.",
    "start": "3785200",
    "end": "3791040"
  },
  {
    "text": "So it started out--\nthe first iteration was about 0.6 seconds. And then it goes\non to 0.8 seconds.",
    "start": "3791040",
    "end": "3798390"
  },
  {
    "text": "If we did that cat approach,\nit would do it faster. ",
    "start": "3798390",
    "end": "3805210"
  },
  {
    "text": "I'll show you a\nlittle neat trick. This is also a parallel\nprogram when I run it.",
    "start": "3805210",
    "end": "3810600"
  },
  {
    "text": "And, basically, I loop\nover each file here.",
    "start": "3810600",
    "end": "3817600"
  },
  {
    "text": "I'm just doing this\nlittle ag thing just to sync the processors\njust for fun so I don't have to wait for them to start.",
    "start": "3817600",
    "end": "3824839"
  },
  {
    "text": "And then it's going to go. And they're going\nto do their sums. And then when they're\nall done, they're going to call this-- so each\none will have a local sum.",
    "start": "3824840",
    "end": "3831903"
  },
  {
    "text": "And it needs to be\npulled together. So we have this function called\nGAG, which basically takes associative rays and we'll just\nsum them all together, and very",
    "start": "3831903",
    "end": "3840280"
  },
  {
    "text": "nice tool for doing that. And, of course, we had to\nuncomment that in order for that to work.",
    "start": "3840280",
    "end": "3846000"
  },
  {
    "text": "And so let's go give that a try. And so if we do eval pRUN,\nso it's launching them.",
    "start": "3846000",
    "end": "3865380"
  },
  {
    "text": "And it's reading. And then now it's going\nto have to wait a second. OK, so it took about two seconds\nto pull them all together",
    "start": "3865380",
    "end": "3871480"
  },
  {
    "text": "and do the sum across\nthose processors. So that's a parallel\ncomputation, a classic example of what\npeople do with LLGrid",
    "start": "3871480",
    "end": "3880160"
  },
  {
    "text": "and can do with D4M is\nthey have a bunch files. Each processor processes\nthem independently. And at the end, they pull\nsomething all together using",
    "start": "3880160",
    "end": "3890190"
  },
  {
    "text": "this GAG command. All, right moving on-- so\nnow I'm on database 2 here.",
    "start": "3890190",
    "end": "3904484"
  },
  {
    "text": "So I'm going to go to that. And let's look at our tables. Very little activity-- and you\nsee we have no tables there.",
    "start": "3904485",
    "end": "3910320"
  },
  {
    "text": "So I have to create them. So I'm going to pd\n[INAUDIBLE] setup 05. That's going to create those\ntables on that database.",
    "start": "3910320",
    "end": "3917616"
  },
  {
    "start": "3917616",
    "end": "3923599"
  },
  {
    "text": "We can now look, see. And it created all my tables.",
    "start": "3923600",
    "end": "3930090"
  },
  {
    "text": "So now I'm ready to go. And now we're going to\nbe insert again, PDB06.",
    "start": "3930090",
    "end": "3935914"
  },
  {
    "text": "I'm going to insert\nthe adjacency matrix. ",
    "start": "3935915",
    "end": "3949619"
  },
  {
    "text": "And this obviously takes\na little bit longer. Each one of these, there's\na parameter associated",
    "start": "3949620",
    "end": "3955110"
  },
  {
    "text": "with the table, which\nis-- you would think, normally, it should\njust send all its data to the database at once.",
    "start": "3955110",
    "end": "3961432"
  },
  {
    "text": "But it turns out\none thing we found is that actually\nthe database prefers to receive the data in a\nsmaller increment, typically",
    "start": "3961432",
    "end": "3968990"
  },
  {
    "text": "around half a megabyte chunk. So every single time\nit's calling this, it's sending half a megabyte\nwaiting to get the all clear",
    "start": "3968990",
    "end": "3975734"
  },
  {
    "text": "again, and then\nsetting the next one. And we've actually found that\nmakes a fairly significant-- so you can see here, we're\ngetting about 60,000 inserts",
    "start": "3975734",
    "end": "3983600"
  },
  {
    "text": "per second. This is from one processor. And this takes a little while.",
    "start": "3983600",
    "end": "3990205"
  },
  {
    "text": "Let's see if we can go and\nlook at it while it's going on. If we go here, we should\nbegin to see some.",
    "start": "3990205",
    "end": "3996280"
  },
  {
    "text": "So there you go. That's what a real insert\nis beginning to look like. It just changes its axis\nfor you dynamically here.",
    "start": "3996280",
    "end": "4003910"
  },
  {
    "text": "But we're getting about\n60,000 inserts a second there.",
    "start": "4003910",
    "end": "4009049"
  },
  {
    "text": "Let me just go along here. It'll start leveling\noff a little bit. ",
    "start": "4009050",
    "end": "4021192"
  },
  {
    "text": "And then it will show you what's\ngoing on in the tables there. ",
    "start": "4021192",
    "end": "4034180"
  },
  {
    "text": "And, I mean, not too\nmany of you are probably database aficionados. But 60,000 inserts a seconds\non a single node database",
    "start": "4034180",
    "end": "4044340"
  },
  {
    "text": "is pretty darn amazing. I mean, you would mostly have\nhad to use a parallel database. And that's actually one of\nthe great powers of Accumulo",
    "start": "4044340",
    "end": "4050680"
  },
  {
    "text": "is there's a lot\nof-- even though it's a parallel database, there's\na lot of problems you can now do with a single node database\nthat you would have had to have",
    "start": "4050680",
    "end": "4057510"
  },
  {
    "text": "a parallel system to do before. And that's really--\nbecause, parallel computing is a real pain.",
    "start": "4057510",
    "end": "4063180"
  },
  {
    "text": "I should know.  If you can make your\nparallel problem fast enough",
    "start": "4063180",
    "end": "4069120"
  },
  {
    "text": "to now work on a\nsingle one, that's really a tremendously\nconvenient capability. ",
    "start": "4069120",
    "end": "4082460"
  },
  {
    "text": "So we inserted there, what,\neight million entries-- so",
    "start": "4082460",
    "end": "4089230"
  },
  {
    "text": "pretty impressive. But that did take a while. And so maybe I want to\ndo that in parallel.",
    "start": "4089230",
    "end": "4096330"
  },
  {
    "text": "So if I just do eval pRUN, let's\ntry four and see what happens.",
    "start": "4096330",
    "end": "4104452"
  },
  {
    "text": " Now I would expect,\nactually, this to begin to top this thing out.",
    "start": "4104452",
    "end": "4110660"
  },
  {
    "text": "And so the individual\ninserts rates on each node probably go down a little bit. ",
    "start": "4110660",
    "end": "4118930"
  },
  {
    "text": "And you'll see it will get\na little bit noisy here, because now we have four\nseparate processes all doing",
    "start": "4118930",
    "end": "4124520"
  },
  {
    "text": "inserts. You see there was one. It took a little\nbit, almost a second. And you get this noise\nbeginning to happen here.",
    "start": "4124520",
    "end": "4131179"
  },
  {
    "text": "But we're getting\n50,000 edges per second on one node, which means\nwe should be getting",
    "start": "4131180",
    "end": "4136460"
  },
  {
    "text": "close to four times that. So let's go check. What's it seeing here?",
    "start": "4136460",
    "end": "4141540"
  },
  {
    "text": "So if we update that--\nand there you see, we're sort of now climbing\nthe hill well over 100,000.",
    "start": "4141540",
    "end": "4148630"
  },
  {
    "text": "That was our first insert there. And now we're entering\nthe second one here.",
    "start": "4148630",
    "end": "4154224"
  },
  {
    "text": "Whoops, don't want\nto check my email. ",
    "start": "4154224",
    "end": "4165770"
  },
  {
    "text": "Let's see here. So how are we doing there? Oh, it's done. ",
    "start": "4165770",
    "end": "4171750"
  },
  {
    "text": "We may not have even get\nthe full rise time of that. Yeah, so it basically finished\nbefore we could even really hit",
    "start": "4171750",
    "end": "4178240"
  },
  {
    "text": "the-- it has a little filter\nhere, has a certain resolution. You really need to do an\ninsert for about 10 minutes",
    "start": "4178240",
    "end": "4184080"
  },
  {
    "text": "before you can get\nreally a sense of that. But there you see, we probably\ngot over 200,000 inserts",
    "start": "4184080",
    "end": "4192120"
  },
  {
    "text": "a second using four\nprocesses on one node.",
    "start": "4192120",
    "end": "4197220"
  },
  {
    "text": "And we could probably keep\non going up this ramp. For this data set,\nI'd expect we'd",
    "start": "4197220",
    "end": "4202760"
  },
  {
    "text": "be able to get maybe\n500,000 inserts a second if I kept adding processors\nand stuff like that.",
    "start": "4202760",
    "end": "4208540"
  },
  {
    "text": "And if you look at our\ndata, what do we got here?",
    "start": "4208540",
    "end": "4213710"
  },
  {
    "text": "We got like 15 million\nentries now in our database. Again, one of the nice things\nis for a typical databases,",
    "start": "4213710",
    "end": "4221010"
  },
  {
    "text": "a lot of times if you have to\nre-ingest the whole database, that's fine. In our cyber program,\nwe have a month of data.",
    "start": "4221010",
    "end": "4228040"
  },
  {
    "text": "And we can re-ingest\nit in a couple hours. And that's a very powerful\ntool to be able to like, oh, you know what?",
    "start": "4228040",
    "end": "4233390"
  },
  {
    "text": "I didn't like the ingestion. That's fine. I'll just rewrite the\ningestion and redo it. And this gives you\na very powerful tool",
    "start": "4233390",
    "end": "4239810"
  },
  {
    "text": "for exploring your data here. So that's kind of what\nI want to do with that.",
    "start": "4239810",
    "end": "4244920"
  },
  {
    "text": "One of our students here\nvery generously gave me some Twitter data.",
    "start": "4244920",
    "end": "4250440"
  },
  {
    "text": "And so I wanted to show you a\nlittle bit with that Twitter data, because it's\nprobably maybe a hair more",
    "start": "4250440",
    "end": "4256180"
  },
  {
    "text": "meaningful than this abstract\nKronecker graph data. And by definition, Twitter data\nis about the most public data",
    "start": "4256180",
    "end": "4264230"
  },
  {
    "text": "that one can imagine. I think no one who\nposts to Twitter is expecting any sense\nof privacy there.",
    "start": "4264230",
    "end": "4270310"
  },
  {
    "text": "So I think we can use that OK. So let's see here.",
    "start": "4270310",
    "end": "4278027"
  },
  {
    "text": "Let me exit out of that. ",
    "start": "4278027",
    "end": "4288270"
  },
  {
    "text": "[INAUDIBLE] desktop,\n[INAUDIBLE], Twitter.",
    "start": "4288270",
    "end": "4297027"
  },
  {
    "text": " And so, basically, just a few\nexamples here-- the first thing",
    "start": "4297027",
    "end": "4304800"
  },
  {
    "text": "we did is construct\nthe associative array. So let's start up here. ",
    "start": "4304800",
    "end": "4312130"
  },
  {
    "text": "And I think it was\nlike a million Twitter. Is that right? A million entries, and how many\ntweets do you think that was?",
    "start": "4312130",
    "end": "4322288"
  },
  {
    "text": "We should be able\nto find out, right? We should be able to find out. ",
    "start": "4322289",
    "end": "4330150"
  },
  {
    "text": "So let's do the\nfirst thing here.  So it's reading these\nin, and chunked,",
    "start": "4330150",
    "end": "4337744"
  },
  {
    "text": "and writing them out\nto associative arrays. ",
    "start": "4337744",
    "end": "4343234"
  },
  {
    "text": "That's going to be annoying. Isn't it? Let's go to a faster system. ",
    "start": "4343234",
    "end": "4360610"
  },
  {
    "text": "So this is running on\nthe database system. ",
    "start": "4360610",
    "end": "4369889"
  },
  {
    "text": "And I broke it up\ninto chunks of 10. I couldn't quite on my\nlaptop fit the whole thing in one associative array.",
    "start": "4369890",
    "end": "4375605"
  },
  {
    "text": "So I broke it up\ninto chunks of 10. ",
    "start": "4375605",
    "end": "4387169"
  },
  {
    "text": "Yeah, see we're\nstill cruising there. ",
    "start": "4387169",
    "end": "4392320"
  },
  {
    "text": "So that just reads it all in. In fact, we can take\na look at that file. ",
    "start": "4392320",
    "end": "4404530"
  },
  {
    "text": "So I just took that\nexact same example and just put his\ndata in-- so just to take a look at\nwhat that involved,",
    "start": "4404530",
    "end": "4410400"
  },
  {
    "text": "pretty much all the same. It was one big file. But I couldn't process it.",
    "start": "4410400",
    "end": "4417890"
  },
  {
    "text": "I mean, I could read it in. He did a great job of\ncreating it into triples. And I could easily\nhold those triples.",
    "start": "4417890",
    "end": "4424890"
  },
  {
    "text": "But I couldn't quite construct\nthe associative array. And so I basically\njust go through",
    "start": "4424890",
    "end": "4431470"
  },
  {
    "text": "and find all the separators,\nand then basically take them out",
    "start": "4431470",
    "end": "4436780"
  },
  {
    "text": "of the vector in memory. And so that's what I'm doing\nhere, is I'm looping over here.",
    "start": "4436780",
    "end": "4443960"
  },
  {
    "text": "So, basically, I\nread in all the data. I find all the separators. And then I go through.",
    "start": "4443960",
    "end": "4449490"
  },
  {
    "text": "And it's a little bit\nof a messy calculation to basically do them in\nthese particular blocks. And then I can construct\nthe associative array",
    "start": "4449490",
    "end": "4456240"
  },
  {
    "text": "and save those out, no problem. ",
    "start": "4456240",
    "end": "4462408"
  },
  {
    "text": "And let's see here. So what else [INAUDIBLE]. We can do it in little degree\ncalculation from that data.",
    "start": "4462409",
    "end": "4471247"
  },
  {
    "text": "So it's now reading\neach one of those, and computing the degrees. ",
    "start": "4471247",
    "end": "4480840"
  },
  {
    "text": "[INAUDIBLE] do the same\nthing on this system. It's pretty fast.",
    "start": "4480840",
    "end": "4485886"
  },
  {
    "start": "4485887",
    "end": "4505530"
  },
  {
    "text": "Proceed then to-- let's\ncreate some tables.",
    "start": "4505530",
    "end": "4511719"
  },
  {
    "text": "So I created a special\nclass of tables for that. [INAUDIBLE] modify\nthat [INAUDIBLE] that.",
    "start": "4511720",
    "end": "4518100"
  },
  {
    "text": "If you go over here, I\nthink it was on this one. ",
    "start": "4518100",
    "end": "4523710"
  },
  {
    "text": "Nope, I did it on the other\ndatabase-- database 1,",
    "start": "4523710",
    "end": "4532300"
  },
  {
    "text": "got tables there. So all I was doing there\nwas plotting the degree",
    "start": "4532300",
    "end": "4539810"
  },
  {
    "text": "distribution. So this shows us--\nso, for each tweet--",
    "start": "4539810",
    "end": "4553400"
  },
  {
    "text": "let's go to figure\none-- are you done?",
    "start": "4553400",
    "end": "4561790"
  },
  {
    "text": "It's very Twitter-like. No, no one is ever\ndone on Twitter. So-- wow, what did I do?",
    "start": "4561790",
    "end": "4569776"
  },
  {
    "text": " I went to town, didn't I?",
    "start": "4569776",
    "end": "4576440"
  },
  {
    "text": "Done now? So we go to figure 1. You see for each tweet, this\nshows us how much information",
    "start": "4576440",
    "end": "4583480"
  },
  {
    "text": "was in each tweet. And you see that, on average--\nthis is because he basically parsed out each word uniquely.",
    "start": "4583480",
    "end": "4589340"
  },
  {
    "text": "So this shows there is about\n1,000 pieces of information associated with each tweet,\nwhich seems a little high.",
    "start": "4589340",
    "end": "4599030"
  },
  {
    "text": "So we should probably\ndouble check that.  And then what did I do?",
    "start": "4599030",
    "end": "4605780"
  },
  {
    "text": " So we loaded all of them up.",
    "start": "4605780",
    "end": "4611470"
  },
  {
    "text": "We summed the degrees. And then-- oh, I said, show me\nall the locations with counts",
    "start": "4611470",
    "end": "4618090"
  },
  {
    "text": "greater than 100, and then\nall the words with at signs",
    "start": "4618090",
    "end": "4624790"
  },
  {
    "text": "greater than 100, and all\nthe hashtags greater than 50. So that's what these\nother guys are. So this was the--\nessentially, for each tweet,",
    "start": "4624790",
    "end": "4631880"
  },
  {
    "text": "how many do you have? If we go to figure 2, this\nshows the degree distribution",
    "start": "4631880",
    "end": "4637970"
  },
  {
    "text": "of all the words and\nother things in there. So there's some guy here\nwho is really, really high.",
    "start": "4637970",
    "end": "4643310"
  },
  {
    "text": "In fact, we can find him out. But as, of course, most\nthings occur only once-- like,",
    "start": "4643310",
    "end": "4649590"
  },
  {
    "text": "there's a lot of unique keys. There's the message ID, which\nof course is probably something that only appears once.",
    "start": "4649590",
    "end": "4655990"
  },
  {
    "text": "If we go to figure 3-- so\nthis just shows the locations. And this was tweets from the\nday before the hurricane,",
    "start": "4655990",
    "end": "4662910"
  },
  {
    "text": "or the Wednesday\nbefore Hurricane Sandy. And so this shows us-- but\nlimited to the New York",
    "start": "4662910",
    "end": "4671690"
  },
  {
    "text": "area or something like that? AUDIENCE: Yeah, 40 miles\naround New York City. JEREMY KEPNER: 40 miles\naround New York City.",
    "start": "4671690",
    "end": "4677180"
  },
  {
    "text": "Basically, this shows\nall the locations here. So this is a classic\nexample of the kind",
    "start": "4677180",
    "end": "4682618"
  },
  {
    "text": "of things you want to do,\nbecause the first thing that we see is that we have some\nproblems with our data, which",
    "start": "4682619",
    "end": "4688660"
  },
  {
    "text": "is New York City and\nNew York City space got",
    "start": "4688660",
    "end": "4694420"
  },
  {
    "text": "to go in and correct all those. So that's a classic example. This is really what\nD4M-- it's the number one",
    "start": "4694420",
    "end": "4701590"
  },
  {
    "text": "thing that people\ndo with D4M, is it's the first time\nthat you really can do sums and tallies\nover the entire data.",
    "start": "4701590",
    "end": "4708620"
  },
  {
    "text": "And these things\njust don't pop out. They stick out\nlike a sore thumb. Like, oh got to correct that.",
    "start": "4708620",
    "end": "4714321"
  },
  {
    "text": "You can either correct\nit in the database, or correct it\nafterwards in the query. But that just immediately\nimproves the quality",
    "start": "4714321",
    "end": "4720580"
  },
  {
    "text": "of everything else you have. And then there's this clutter\none, like location none.",
    "start": "4720580",
    "end": "4726170"
  },
  {
    "text": "Well, clearly, you'd want\nto just get rid of that, or do something with\nthat, and then just plain old normal\nspelled New York.",
    "start": "4726170",
    "end": "4733530"
  },
  {
    "text": "So most people can\nspell correctly. And so we're very good. But location, iPhone,\nwhat's that about?",
    "start": "4733530",
    "end": "4739520"
  },
  {
    "text": "Jersey City-- well, we\ndon't care about that.",
    "start": "4739520",
    "end": "4745420"
  },
  {
    "text": "South Jersey-- well, what's--\nSouth Jersey people don't know that they're 40 miles\nfrom New York, I guess?",
    "start": "4745420",
    "end": "4752840"
  },
  {
    "text": "AUDIENCE: It's\nwhatever they have. JEREMY KEPNER: In their profile. So a lot of people in South\nJersey who say they're",
    "start": "4752840",
    "end": "4759580"
  },
  {
    "text": "from New York. So what's her name\nfrom Jersey Shore?",
    "start": "4759580",
    "end": "4769070"
  },
  {
    "text": "Snooki, right Snooki says\nshe's actually from New York City, not South Jersey.",
    "start": "4769070",
    "end": "4775900"
  },
  {
    "text": "So there's a great\nexample of that. And then let's see\nhere, figure 4. So this just shows\nall the at signs.",
    "start": "4775900",
    "end": "4784410"
  },
  {
    "text": "So you see, basically,\ndamnitstrue,",
    "start": "4784410",
    "end": "4790290"
  },
  {
    "text": "is like the most-- is this like\na retweeted thing or something?",
    "start": "4790290",
    "end": "4795310"
  },
  {
    "text": "I don't know. What does the at\nsign mean again? AUDIENCE: It's to another user.",
    "start": "4795310",
    "end": "4801119"
  },
  {
    "text": "JEREMY KEPNER: To a user. So most people tweet to\ndamnitstrue in New York. There you go.",
    "start": "4801119",
    "end": "4806320"
  },
  {
    "text": "Funny fact, relatable quote,\nand then Donald Trump,",
    "start": "4806320",
    "end": "4812900"
  },
  {
    "text": "the real Donald Trump, and\nthen just word at sign. So those are another\nexample-- another here",
    "start": "4812900",
    "end": "4819820"
  },
  {
    "text": "is a hilarious idiot,\nbadgalv, an Marilyn Monroe ID.",
    "start": "4819820",
    "end": "4827320"
  },
  {
    "text": "So there you go, a lot of\nfun stuff there on Twitter.",
    "start": "4827320",
    "end": "4832569"
  },
  {
    "text": "But this is sort of-- he's going\nto establish his background, and then go back and look\nat during the hurricane. So this is all basically the\nnormal situation, very clearly.",
    "start": "4832569",
    "end": "4842790"
  },
  {
    "text": "And then the hashtags-- so\nwe can look at the hashtags. So what do we got here?",
    "start": "4842790",
    "end": "4849030"
  },
  {
    "text": "Favorite movie quotes. AUDIENCE: Favorite\nmovie quotes misspelled. JEREMY KEPNER: And\nfavorite movie quotes misspelled right up there.",
    "start": "4849030",
    "end": "4855310"
  },
  {
    "text": "The Knicks, and then\nwhat I love the most, and all this type--\nteam follow back.",
    "start": "4855310",
    "end": "4862880"
  },
  {
    "text": "I don't know, team auto--\nno, what's this one? What's TFB? ",
    "start": "4862880",
    "end": "4869260"
  },
  {
    "text": "Maybe we don't want to know. You can always look it\nup in Urban Dictionary.",
    "start": "4869260",
    "end": "4876460"
  },
  {
    "text": "It's a bad one? All right, OK, good, we'll\nwill leave it at that, won't add that to the video. ",
    "start": "4876460",
    "end": "4884870"
  },
  {
    "text": "So continuing on\nhere, let's see. ",
    "start": "4884870",
    "end": "4892580"
  },
  {
    "text": "Well, you get the idea. And so all these examples,\nthey work in parallel to, you get a lot of speed up, lots\nof interesting stuff like that.",
    "start": "4892580",
    "end": "4899910"
  },
  {
    "text": "But that's very classic\nthe kind of thing you do. You get data. You parse it. You maybe stick\nit in Matlab files",
    "start": "4899910",
    "end": "4906210"
  },
  {
    "text": "to do your initial\nsweep through it. But then if it gets\nreally, really big and you want to do more\ndetailed things that you",
    "start": "4906210",
    "end": "4912129"
  },
  {
    "text": "insert in the database,\ncan do queries there. Leverage using your counts, so\nthat you don't accidentally--",
    "start": "4912129",
    "end": "4917827"
  },
  {
    "text": "you can imagine if we put\nall the tweets in the world and you had location,\nNew York City. And you looked at--\nyou had to, give me",
    "start": "4917827",
    "end": "4923160"
  },
  {
    "text": "all this set of locations. And one of them\nwas New York City. You'd be like, oh\nmy God, I've just",
    "start": "4923160",
    "end": "4928360"
  },
  {
    "text": "done a query that's going to\ngive me 5% of all the data back. That's going to just\nflush your system.",
    "start": "4928360",
    "end": "4934044"
  },
  {
    "text": "But if you can just do\nthe count, and be like, oh, New York City has\ngot a million entries. Don't touch that one.",
    "start": "4934044",
    "end": "4939480"
  },
  {
    "text": "Or put an iterator on\nthat one so that I only",
    "start": "4939480",
    "end": "4944570"
  },
  {
    "text": "handle it in manageable chunks. So I want to thank you. So hopefully this was worth it.",
    "start": "4944570",
    "end": "4950810"
  },
  {
    "text": "We have one more\nclass, which deals with a little bit\nof wrapping up some of the theory on this stuff,\nand some stuff on performance",
    "start": "4950810",
    "end": "4958590"
  },
  {
    "text": "metrics. And then in two weeks, for\nthose of you who signed up, we have the Accumulo folks\ncoming in showing you",
    "start": "4958590",
    "end": "4964760"
  },
  {
    "text": "how to run your own\ndatabase all day on just-- we're setting\nup a database for you guys",
    "start": "4964760",
    "end": "4974250"
  },
  {
    "text": "on LLGrid. But you're definitely going\nto run in with your customers Accumulo instances.",
    "start": "4974250",
    "end": "4979429"
  },
  {
    "text": "It's good to know some\nbasics about that, because a lot of\ntimes you're not going to have all the nice\nstuff that we've provided.",
    "start": "4979430",
    "end": "4986320"
  },
  {
    "text": "And it's good to know how\nto set up your own Accumulo and interact with\nthat in the field. So with that, that brings\nthe lecture to the end.",
    "start": "4986320",
    "end": "4992950"
  },
  {
    "text": "And happy to stay for any\nquestions, if anybody has them. ",
    "start": "4992950",
    "end": "5001553"
  }
]