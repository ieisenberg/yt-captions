[
  {
    "text": "Today we're going to talk about how to translate\nhigh-level languages into code that computers",
    "start": "350",
    "end": "5060"
  },
  {
    "text": "can execute.",
    "start": "5060",
    "end": "6700"
  },
  {
    "text": "So far we've seen the Beta ISA, which includes\ninstructions that control the datapath operations",
    "start": "6700",
    "end": "12020"
  },
  {
    "text": "performed on 32-bit data stored in the registers.",
    "start": "12020",
    "end": "15880"
  },
  {
    "text": "There are also instructions for accessing\nmain memory and changing the program counter.",
    "start": "15880",
    "end": "20320"
  },
  {
    "text": "The instructions are formatted as opcode,\nsource, and destination fields that form 32-bit",
    "start": "20320",
    "end": "25130"
  },
  {
    "text": "values in main memory.",
    "start": "25130",
    "end": "27810"
  },
  {
    "text": "To make our lives easier, we developed assembly\nlanguage as a way of specifying sequences",
    "start": "27810",
    "end": "32590"
  },
  {
    "text": "of instructions.",
    "start": "32590",
    "end": "34390"
  },
  {
    "text": "Each assembly language statement corresponds\nto a single instruction.",
    "start": "34390",
    "end": "38579"
  },
  {
    "text": "As assembly language programmers, we're responsible\nfor managing which values are in registers",
    "start": "38579",
    "end": "43198"
  },
  {
    "text": "and which are in main memory, and we need\nto figure out how to break down complicated",
    "start": "43199",
    "end": "48019"
  },
  {
    "text": "operations,\ne.g., accessing an element of an array, into",
    "start": "48019",
    "end": "52019"
  },
  {
    "text": "the right sequence of Beta operations.",
    "start": "52019",
    "end": "55710"
  },
  {
    "text": "We can go one step further and use high-level\nlanguages to describe the computations we",
    "start": "55710",
    "end": "60170"
  },
  {
    "text": "want to perform.",
    "start": "60170",
    "end": "61978"
  },
  {
    "text": "These languages use variables and other data\nstructures to abstract away the details of",
    "start": "61979",
    "end": "66840"
  },
  {
    "text": "storage allocation and the movement of data\nto and from main memory.",
    "start": "66840",
    "end": "71679"
  },
  {
    "text": "We can just refer to a data object by name\nand let the language processor handle the",
    "start": "71680",
    "end": "76200"
  },
  {
    "text": "details.",
    "start": "76200",
    "end": "77200"
  },
  {
    "text": "Similarly, we'll write expressions and other\noperators such as assignment (=) to efficiently",
    "start": "77200",
    "end": "82320"
  },
  {
    "text": "describe what would require many statements\nin assembly language.",
    "start": "82320",
    "end": "87320"
  },
  {
    "text": "Today we're going to dive into how to translate\nhigh-level language programs into code that",
    "start": "87320",
    "end": "92439"
  },
  {
    "text": "will run on the Beta.",
    "start": "92439",
    "end": "94140"
  },
  {
    "text": "Here we see Euclid's algorithm for determining\nthe greatest common divisor of two numbers,",
    "start": "94140",
    "end": "99290"
  },
  {
    "text": "in this case the algorithm is written in the\nC programming language.",
    "start": "99290",
    "end": "103420"
  },
  {
    "text": "We'll be using a simple subset of C as our\nexample high-level language.",
    "start": "103420",
    "end": "107938"
  },
  {
    "text": "Please see the brief overview of C in the\nHandouts section if you'd like an introduction",
    "start": "107939",
    "end": "112109"
  },
  {
    "text": "to C syntax and semantics.",
    "start": "112109",
    "end": "115429"
  },
  {
    "text": "C was developed by Dennis Ritchie at AT&T\nBell Labs in the late 60's and early 70's",
    "start": "115429",
    "end": "120689"
  },
  {
    "text": "to use when implementing the Unix operating\nsystem.",
    "start": "120689",
    "end": "124180"
  },
  {
    "text": "Since that time many new high-level languages\nhave been introduced providing modern abstractions",
    "start": "124180",
    "end": "128660"
  },
  {
    "text": "like object-oriented programming along with\nuseful new data and control structures.",
    "start": "128660",
    "end": "136150"
  },
  {
    "text": "Using C allows us describe a computation without\nreferring to any of the details of the Beta",
    "start": "136150",
    "end": "141060"
  },
  {
    "text": "ISA like registers, specific Beta instructions,\nand so on.",
    "start": "141060",
    "end": "145920"
  },
  {
    "text": "The absence of such details means there is\nless work required to create the program and",
    "start": "145920",
    "end": "150930"
  },
  {
    "text": "makes it easier for others to read and understand\nthe algorithm implemented by the program.",
    "start": "150930",
    "end": "157469"
  },
  {
    "text": "There are many advantages to using a high-level\nlanguage.",
    "start": "157470",
    "end": "160750"
  },
  {
    "text": "They enable programmers to be very productive\nsince the programs are concise and readable.",
    "start": "160750",
    "end": "166430"
  },
  {
    "text": "These attributes also make it easy to maintain\nthe code.",
    "start": "166430",
    "end": "169719"
  },
  {
    "text": "Often it is harder to make certain types of\nmistakes since the language allows us to check",
    "start": "169720",
    "end": "175280"
  },
  {
    "text": "for silly errors like storing a string value\ninto a numeric variable.",
    "start": "175280",
    "end": "180370"
  },
  {
    "text": "And more complicated tasks like dynamically\nallocating and deallocating storage can be",
    "start": "180370",
    "end": "185540"
  },
  {
    "text": "completely automated.",
    "start": "185540",
    "end": "188090"
  },
  {
    "text": "The result is that it can take much less time\nto create a correct program in a high-level",
    "start": "188090",
    "end": "193200"
  },
  {
    "text": "language than it would it when writing in\nassembly language.",
    "start": "193200",
    "end": "197720"
  },
  {
    "text": "Since the high-level language has abstracted\naway the details of a particular ISA, the",
    "start": "197720",
    "end": "202930"
  },
  {
    "text": "programs are portable in the sense that we\ncan expect to run the same code on different",
    "start": "202930",
    "end": "208010"
  },
  {
    "text": "ISAs without having to rewrite the code.",
    "start": "208010",
    "end": "210920"
  },
  {
    "text": "What do we lose by using a high-level language?",
    "start": "210920",
    "end": "215490"
  },
  {
    "text": "Should we worry that we'll pay a price in\nterms of the efficiency and performance we",
    "start": "215490",
    "end": "219580"
  },
  {
    "text": "might get by crafting each instruction by\nhand?",
    "start": "219580",
    "end": "222980"
  },
  {
    "text": "The answer depends on how we choose to run\nhigh-level language programs.",
    "start": "222980",
    "end": "227330"
  },
  {
    "text": "The two basic execution strategies are \"interpretation\"\nand \"compilation\".",
    "start": "227330",
    "end": "233050"
  },
  {
    "text": "To interpret a high-level language program,\nwe'll write a special program called an \"interpreter\"",
    "start": "233050",
    "end": "238230"
  },
  {
    "text": "that runs on the actual computer, M1.",
    "start": "238230",
    "end": "241629"
  },
  {
    "text": "The interpreter mimics the behavior of some\nabstract easy-to-program machine M2 and for",
    "start": "241630",
    "end": "247431"
  },
  {
    "text": "each M2 operation executes sequences of M1\ninstructions to achieve the desired result.",
    "start": "247431",
    "end": "254340"
  },
  {
    "text": "We can think of the interpreter along with\nM1 as an implementation of M2, i.e., given",
    "start": "254340",
    "end": "260370"
  },
  {
    "text": "a program written for M2, the interpreter\nwill, step-by-step, emulate the effect of",
    "start": "260370",
    "end": "266710"
  },
  {
    "text": "M2 instructions.",
    "start": "266710",
    "end": "268620"
  },
  {
    "text": "We often use several layers of interpretation\nwhen tackling computation tasks.",
    "start": "268620",
    "end": "274120"
  },
  {
    "text": "For example, an engineer may use her laptop\nwith an Intel CPU to run the Python interpreter.",
    "start": "274120",
    "end": "281240"
  },
  {
    "text": "In Python, she loads the SciPy toolkit, which\nprovides a calculator-like interface for numerical",
    "start": "281240",
    "end": "287139"
  },
  {
    "text": "analysis for matrices and data.",
    "start": "287140",
    "end": "290180"
  },
  {
    "text": "For each SciPy command, e.g., \"find the maximum\nvalue of a dataset\", the SciPy tool kit executes",
    "start": "290180",
    "end": "296650"
  },
  {
    "text": "many Python statements, e.g., to loop over\neach element of the array, remembering the",
    "start": "296650",
    "end": "301389"
  },
  {
    "text": "largest value.",
    "start": "301389",
    "end": "303600"
  },
  {
    "text": "For each Python statement, the Python interpreter\nexecutes many x86 instructions, e.g., to increment",
    "start": "303600",
    "end": "309920"
  },
  {
    "text": "the loop index and check for loop termination.",
    "start": "309920",
    "end": "314310"
  },
  {
    "text": "Executing a single SciPy command may require\nexecuting of tens of Python statements, which",
    "start": "314310",
    "end": "320000"
  },
  {
    "text": "in turn each may require executing hundreds\nof x86 instructions.",
    "start": "320000",
    "end": "324000"
  },
  {
    "text": "The engineer is very happy she didn't have\nto write each of those instructions herself!",
    "start": "324000",
    "end": "331320"
  },
  {
    "text": "Interpretation is an effective implementation\nstrategy when performing a computation once,",
    "start": "331320",
    "end": "335820"
  },
  {
    "text": "or when exploring which computational approach\nis most effective before making a more substantial",
    "start": "335820",
    "end": "341020"
  },
  {
    "text": "investment in creating a more efficient implementation.",
    "start": "341020",
    "end": "344470"
  },
  {
    "text": "We'll use a compilation implementation strategy\nwhen we have computational tasks that we need",
    "start": "344470",
    "end": "350270"
  },
  {
    "text": "to execute repeatedly and hence we are willing\nto invest more time up-front for more efficiency",
    "start": "350270",
    "end": "356210"
  },
  {
    "text": "in the long-term.",
    "start": "356210",
    "end": "357910"
  },
  {
    "text": "In compilation, we also start with our actual\ncomputer M1.",
    "start": "357910",
    "end": "362430"
  },
  {
    "text": "Then we'll take our high-level language program\nP2 and translate it statement-by-statement",
    "start": "362430",
    "end": "367639"
  },
  {
    "text": "into a program for M1.",
    "start": "367639",
    "end": "369950"
  },
  {
    "text": "Note that we're not actually running the P2\nprogram.",
    "start": "369950",
    "end": "373330"
  },
  {
    "text": "Instead we're using it as a template to create\nan equivalent P1 program that can execute",
    "start": "373330",
    "end": "378590"
  },
  {
    "text": "directly on M1.",
    "start": "378590",
    "end": "380750"
  },
  {
    "text": "The translation process is called \"compilation\"\nand the program that does the translation",
    "start": "380750",
    "end": "385870"
  },
  {
    "text": "is called a \"compiler\".",
    "start": "385870",
    "end": "388540"
  },
  {
    "text": "We compile the P2 program once to get the\ntranslation P1, and then we'll run P1 on M1",
    "start": "388540",
    "end": "394780"
  },
  {
    "text": "whenever we want to execute P2.",
    "start": "394780",
    "end": "397300"
  },
  {
    "text": "Running P1 avoids the overhead of having to\nprocess the P2 source and the costs of executing",
    "start": "397300",
    "end": "403479"
  },
  {
    "text": "any intervening layers of interpretation.",
    "start": "403480",
    "end": "406410"
  },
  {
    "text": "Instead of dynamically figuring out the necessary\nmachine instructions for each P2 statement",
    "start": "406410",
    "end": "411240"
  },
  {
    "text": "as it's encountered,\nin effect we've arranged to capture that stream",
    "start": "411240",
    "end": "415060"
  },
  {
    "text": "of machine instructions and save them as a\nP1 program for later execution.",
    "start": "415060",
    "end": "420600"
  },
  {
    "text": "If we're willing to pay the up-front costs\nof compilation, we'll get more efficient execution.",
    "start": "420600",
    "end": "426070"
  },
  {
    "text": "And, with different compilers, we can arrange\nto run P2 on many different machines - M2,",
    "start": "426070",
    "end": "432420"
  },
  {
    "text": "M3, etc. - without having rewrite P2.",
    "start": "432420",
    "end": "437360"
  },
  {
    "text": "So we now have two ways to execute a high-level\nlanguage program: interpretation and compilation.",
    "start": "437360",
    "end": "445020"
  },
  {
    "text": "Both allow us to change the original source\nprogram.",
    "start": "445020",
    "end": "448168"
  },
  {
    "text": "Both allow us to abstract away the details\nof the actual computer we'll use to run the",
    "start": "448169",
    "end": "452540"
  },
  {
    "text": "program.",
    "start": "452540",
    "end": "453540"
  },
  {
    "text": "And both strategies are widely used in modern\ncomputer systems!",
    "start": "453540",
    "end": "458080"
  },
  {
    "text": "Let's summarize the differences between interpretation\nand compilation.",
    "start": "458080",
    "end": "462770"
  },
  {
    "text": "Suppose the statement \"x+2\" appears in the\nhigh-level program.",
    "start": "462770",
    "end": "467960"
  },
  {
    "text": "When the interpreter processes this statement\nit immediately fetches the value of the variable",
    "start": "467960",
    "end": "472699"
  },
  {
    "text": "x and adds 2 to it.",
    "start": "472699",
    "end": "474760"
  },
  {
    "text": "On the other hand, the compiler would generate\nBeta instructions that would LD the variable",
    "start": "474760",
    "end": "478949"
  },
  {
    "text": "x into a register and then ADD 2 to that value.",
    "start": "478949",
    "end": "484360"
  },
  {
    "text": "The interpreter is executing each statement\nas it's processed and, in fact, may process",
    "start": "484360",
    "end": "489759"
  },
  {
    "text": "and execute the same statement many times\nif, e.g., it was in a loop.",
    "start": "489760",
    "end": "494810"
  },
  {
    "text": "The compiler is just generating instructions\nto be executed at some later time.",
    "start": "494810",
    "end": "501650"
  },
  {
    "text": "Interpreters have the overhead of processing\nthe high-level source code during execution",
    "start": "501650",
    "end": "506590"
  },
  {
    "text": "and that overhead may be incurred many times\nin loops.",
    "start": "506590",
    "end": "511650"
  },
  {
    "text": "Compilers incur the processing overhead once,\nmaking the eventual execution more efficient.",
    "start": "511650",
    "end": "517169"
  },
  {
    "text": "But during development, the programmer may\nhave to compile and run the program many times,",
    "start": "517169",
    "end": "522550"
  },
  {
    "text": "often incurring the cost of compilation for\nonly a single execution of the program.",
    "start": "522550",
    "end": "528079"
  },
  {
    "text": "So the compile-run-debug loop can take more\ntime.",
    "start": "528079",
    "end": "532790"
  },
  {
    "text": "The interpreter is making decisions about\nthe data type of x and the type of operations",
    "start": "532790",
    "end": "537709"
  },
  {
    "text": "necessary at run time, i.e., while the program\nis running.",
    "start": "537709",
    "end": "542490"
  },
  {
    "text": "The compiler is making those decisions during\nthe compilation process.",
    "start": "542490",
    "end": "547880"
  },
  {
    "text": "Which is the better approach?",
    "start": "547880",
    "end": "549779"
  },
  {
    "text": "In general, executing compiled code is much\nfaster than running the code interpretively.",
    "start": "549779",
    "end": "554759"
  },
  {
    "text": "But since the interpreter is making decisions\nat run time, it can change its behavior depending,",
    "start": "554759",
    "end": "559920"
  },
  {
    "text": "say, on the type of the data in the variable\nX, offering considerable flexibility in handling",
    "start": "559920",
    "end": "566128"
  },
  {
    "text": "different types of data with the same algorithm.",
    "start": "566129",
    "end": "570610"
  },
  {
    "text": "Compilers take away that flexibility in exchange\nfor fast execution.",
    "start": "570610",
    "end": "574470"
  }
]