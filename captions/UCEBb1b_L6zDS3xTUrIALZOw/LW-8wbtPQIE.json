[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "Here's a failed attempt at pipelining a circuit.",
    "start": "1000",
    "end": "4100"
  },
  {
    "text": "For what value of K is the circuit a K-pipeline?",
    "start": "4100",
    "end": "7450"
  },
  {
    "text": "Well, let's count the number of registers\nalong each path from system inputs to system",
    "start": "7450",
    "end": "12920"
  },
  {
    "text": "outputs.",
    "start": "12920",
    "end": "14620"
  },
  {
    "text": "The top path through the A and C components\nhas 2 registers.",
    "start": "14620",
    "end": "19080"
  },
  {
    "text": "As does the bottom path through the B and\nC components.",
    "start": "19080",
    "end": "22630"
  },
  {
    "text": "But the middle path through all three components\nhas only 1 register.",
    "start": "22630",
    "end": "27189"
  },
  {
    "text": "Oops, this not a well-formed K-pipeline.",
    "start": "27190",
    "end": "30279"
  },
  {
    "text": "Why do we care?",
    "start": "30279",
    "end": "33360"
  },
  {
    "text": "We care because this pipelined circuit does\nnot compute the same answer as the original",
    "start": "33360",
    "end": "38079"
  },
  {
    "text": "unpipelined circuit.",
    "start": "38079",
    "end": "39870"
  },
  {
    "text": "The problem is that successive generations\nof inputs get mixed together during processing.",
    "start": "39870",
    "end": "44989"
  },
  {
    "text": "For example, during cycle i+1, the B module\nis computing with the current value of the",
    "start": "44989",
    "end": "50089"
  },
  {
    "text": "X input but the previous value of the Y input.",
    "start": "50090",
    "end": "54690"
  },
  {
    "text": "This can't happen with a well-formed K-pipeline.",
    "start": "54690",
    "end": "57960"
  },
  {
    "text": "So we need to develop a technique for pipelining\na circuit that guarantees the result will",
    "start": "57960",
    "end": "62770"
  },
  {
    "text": "be well-formed.",
    "start": "62770",
    "end": "65390"
  },
  {
    "start": "65000",
    "end": "65000"
  },
  {
    "text": "Here's our strategy that will ensure if we\nadd a pipeline register along one path from",
    "start": "65390",
    "end": "69990"
  },
  {
    "text": "system inputs to system outputs, we will add\npipeline registers along every path.",
    "start": "69990",
    "end": "76399"
  },
  {
    "text": "Step 1 is to draw a contour line that crosses\nevery output in the circuit and mark its endpoints",
    "start": "76400",
    "end": "82220"
  },
  {
    "text": "as the terminal points for all the other contours\nwe'll add.",
    "start": "82220",
    "end": "86930"
  },
  {
    "text": "During Step 2 continue to draw contour lines\nbetween the two terminal points across the",
    "start": "86930",
    "end": "92200"
  },
  {
    "text": "signal connections between modules.",
    "start": "92200",
    "end": "95240"
  },
  {
    "text": "Make sure that every signal connection crosses\nthe new contour line in the same direction.",
    "start": "95240",
    "end": "100850"
  },
  {
    "text": "This means that system inputs will be one\nside of the contour and system outputs will",
    "start": "100850",
    "end": "105270"
  },
  {
    "text": "be on the other side.",
    "start": "105270",
    "end": "107479"
  },
  {
    "text": "These contours demarcate pipeline stages.",
    "start": "107479",
    "end": "112170"
  },
  {
    "text": "Place a pipeline register wherever a signal\nconnection intersects the pipelining contours.",
    "start": "112170",
    "end": "118000"
  },
  {
    "text": "Here we've marked the location of pipeline\nregisters with large black dots.",
    "start": "118000",
    "end": "123480"
  },
  {
    "text": "By drawing the contours from terminal point\nto terminal point we guarantee that we cross",
    "start": "123480",
    "end": "127790"
  },
  {
    "text": "every input-output path, thus ensuring our\npipeline will be well-formed.",
    "start": "127790",
    "end": "133420"
  },
  {
    "text": "Now we can compute the system's clock period\nby looking for the pipeline stage with the",
    "start": "133420",
    "end": "137090"
  },
  {
    "text": "longest register-to-register or input-to-register\npropagation delay.",
    "start": "137090",
    "end": "142470"
  },
  {
    "text": "With these contours and assuming ideal zero-delay\npipeline registers, the system clock must",
    "start": "142470",
    "end": "147720"
  },
  {
    "text": "have a period of 8 ns to accommodate the operation\nof the C module.",
    "start": "147720",
    "end": "153590"
  },
  {
    "text": "This gives a system throughput of 1 output\nevery 8 ns.",
    "start": "153590",
    "end": "158379"
  },
  {
    "text": "Since we drew 3 contours, this is a 3-pipeline\nand the system latency is 3 times 8 ns or",
    "start": "158380",
    "end": "165420"
  },
  {
    "text": "24 ns total.",
    "start": "165420",
    "end": "167160"
  },
  {
    "text": "Our usual goal in pipelining a circuit is\nto achieve maximum throughput using the fewest",
    "start": "167160",
    "end": "171730"
  },
  {
    "text": "possible registers.",
    "start": "171730",
    "end": "173769"
  },
  {
    "text": "So our strategy is to find the slowest system\ncomponent (in our example, the C component)",
    "start": "173769",
    "end": "179130"
  },
  {
    "text": "and place pipeline registers on its inputs\nand outputs.",
    "start": "179130",
    "end": "182840"
  },
  {
    "text": "So we drew contours that pass on either side\nof the C module.",
    "start": "182840",
    "end": "187209"
  },
  {
    "text": "This sets the clock period at 8 ns, so we\nposition the contours so that longest path",
    "start": "187209",
    "end": "192460"
  },
  {
    "text": "between any two pipeline registers is at most\n8.",
    "start": "192460",
    "end": "196940"
  },
  {
    "text": "There are often several choices for how to\ndraw a contour while maintaining the same",
    "start": "196940",
    "end": "201310"
  },
  {
    "text": "throughput and latency.",
    "start": "201310",
    "end": "203190"
  },
  {
    "text": "For example, we could have included the E\nmodule in the same pipeline stage as the F",
    "start": "203190",
    "end": "207850"
  },
  {
    "text": "module.",
    "start": "207850",
    "end": "208970"
  },
  {
    "text": "Okay, let's review our pipelining strategy.",
    "start": "208970",
    "end": "212989"
  },
  {
    "start": "209000",
    "end": "209000"
  },
  {
    "text": "First we draw a contour across all the outputs.",
    "start": "212989",
    "end": "216239"
  },
  {
    "text": "This creates a 1-pipeline, which, as you can\nsee, will always have the same throughput",
    "start": "216239",
    "end": "220849"
  },
  {
    "text": "and latency as the original combinational\ncircuit.",
    "start": "220849",
    "end": "224680"
  },
  {
    "text": "Then we draw our next contour, trying to isolate\nthe slowest component in the system.",
    "start": "224680",
    "end": "230310"
  },
  {
    "text": "This creates a 2-pipeline with a clock period\nof 2 and hence a throughput of 1/2, or double",
    "start": "230310",
    "end": "235840"
  },
  {
    "text": "that of the 1-pipeline.",
    "start": "235840",
    "end": "238459"
  },
  {
    "text": "We can add additional contours, but note that\nthe 2-pipeline had the smallest possible clock",
    "start": "238459",
    "end": "243450"
  },
  {
    "text": "period, so after that additional contours\nadd stages and hence increase the system's",
    "start": "243450",
    "end": "248819"
  },
  {
    "text": "latency without increasing its throughput.",
    "start": "248820",
    "end": "251700"
  },
  {
    "text": "Not illegal, just not a worthwhile investment\nin hardware.",
    "start": "251700",
    "end": "257150"
  },
  {
    "text": "Note that the signal connection between the\nA and C module now has two back-to-back pipelining",
    "start": "257150",
    "end": "262630"
  },
  {
    "text": "registers.",
    "start": "262630",
    "end": "263630"
  },
  {
    "text": "Nothing wrong with that; it often happens\nwhen we pipeline a circuit where the input-output",
    "start": "263630",
    "end": "268720"
  },
  {
    "text": "paths are of different lengths.",
    "start": "268720",
    "end": "270410"
  },
  {
    "text": "So our pipelining strategy will be to pipeline\nimplementations with increased throughput,",
    "start": "270410",
    "end": "276650"
  },
  {
    "text": "usually at the cost of increased latency.",
    "start": "276650",
    "end": "279160"
  },
  {
    "text": "Sometimes we get lucky and the delays of each\npipeline stage are perfectly balanced, in",
    "start": "279160",
    "end": "284311"
  },
  {
    "text": "which case the latency will not increase.",
    "start": "284311",
    "end": "287190"
  },
  {
    "text": "Note that a pipelined circuit will NEVER have\na smaller latency than the unpipelined circuit.",
    "start": "287190",
    "end": "293190"
  },
  {
    "text": "Notice that once we've isolated the slowest\ncomponent, we can't increase the throughput",
    "start": "293190",
    "end": "297300"
  },
  {
    "text": "any further.",
    "start": "297300",
    "end": "298810"
  },
  {
    "text": "How do we continue to improve the performance\nof circuits in light of these performance",
    "start": "298810",
    "end": "303340"
  },
  {
    "text": "bottlenecks?",
    "start": "303340",
    "end": "305280"
  },
  {
    "start": "305000",
    "end": "305000"
  },
  {
    "text": "One solution is to use pipelined components\nif they're available!",
    "start": "305280",
    "end": "309020"
  },
  {
    "text": "Suppose we're able to replace the original\nA component with a 2-stage pipelined version",
    "start": "309020",
    "end": "314210"
  },
  {
    "text": "A-prime.",
    "start": "314210",
    "end": "315970"
  },
  {
    "text": "We can redraw our pipelining contours, making\nsure we account for the internal pipeline",
    "start": "315970",
    "end": "321220"
  },
  {
    "text": "registers in the A-prime component.",
    "start": "321220",
    "end": "323460"
  },
  {
    "text": "This means that 2 of our contours have to\npass through the A-prime component, guaranteeing",
    "start": "323460",
    "end": "328250"
  },
  {
    "text": "that we'll add pipeline registers elsewhere\nin the system that will account for the two-cycle",
    "start": "328250",
    "end": "332860"
  },
  {
    "text": "delay introduced by A-prime.",
    "start": "332860",
    "end": "336370"
  },
  {
    "text": "Now the maximum propagation delay in any stage\nis 1 ns, doubling the throughput from 1/2",
    "start": "336370",
    "end": "342860"
  },
  {
    "text": "to 1/1.",
    "start": "342860",
    "end": "345490"
  },
  {
    "text": "This is a 4-pipeline so the latency will be\n4 ns.",
    "start": "345490",
    "end": "349509"
  },
  {
    "text": "This is great!",
    "start": "349510",
    "end": "351030"
  },
  {
    "text": "But what can we do if our bottleneck component\ndoesn't have a pipelined substitute.",
    "start": "351030",
    "end": "355380"
  },
  {
    "text": "We'll tackle that question in the next section.",
    "start": "355380",
    "end": "358419"
  }
]