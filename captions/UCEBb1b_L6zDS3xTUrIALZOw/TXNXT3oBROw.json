[
  {
    "start": "0",
    "end": "7000"
  },
  {
    "start": "0",
    "end": "1050"
  },
  {
    "text": "PROFESSOR: Recursive data play\na key role in programming,",
    "start": "1050",
    "end": "3680"
  },
  {
    "text": "so let's take a mathematical\nlook at what goes on.",
    "start": "3680",
    "end": "8050"
  },
  {
    "start": "7000",
    "end": "53000"
  },
  {
    "text": "So the basic idea\nof recursive data",
    "start": "8050",
    "end": "9910"
  },
  {
    "text": "is roughly that\nyou're going to define",
    "start": "9910",
    "end": "11940"
  },
  {
    "text": "a class of objects in\nterms of the simpler",
    "start": "11940",
    "end": "16098"
  },
  {
    "text": "versions of the same object.",
    "start": "16099",
    "end": "17265"
  },
  {
    "start": "17265",
    "end": "21029"
  },
  {
    "text": "With a little more\nprecision, the idea",
    "start": "21030",
    "end": "23120"
  },
  {
    "text": "is that you [? can ?]\nbuild up a recursive data",
    "start": "23120",
    "end": "25165"
  },
  {
    "text": "type by starting with some stuff\nthat you understand that's not",
    "start": "25165",
    "end": "27790"
  },
  {
    "text": "recursive and you give me some\nbase objects that I can begin",
    "start": "27790",
    "end": "32189"
  },
  {
    "text": "with and declare that they\nbelong to this recursive datum,",
    "start": "32189",
    "end": "35700"
  },
  {
    "text": "and then you give me some rules\ncalled constructor rules which",
    "start": "35700",
    "end": "39740"
  },
  {
    "text": "enable me to build new\nobjects of the recursive type",
    "start": "39740",
    "end": "43850"
  },
  {
    "text": "by applying these constructors\nto objects that I've already",
    "start": "43850",
    "end": "46899"
  },
  {
    "text": "built up.",
    "start": "46900",
    "end": "47516"
  },
  {
    "text": "There's nothing\ncircular about it",
    "start": "47516",
    "end": "48890"
  },
  {
    "text": "because I'm always\nbuilding up new stuff",
    "start": "48890",
    "end": "51040"
  },
  {
    "text": "from stuff I already have.",
    "start": "51040",
    "end": "53070"
  },
  {
    "start": "53000",
    "end": "135000"
  },
  {
    "text": "Let's look at an example.",
    "start": "53070",
    "end": "54770"
  },
  {
    "text": "I'm going to define\na set E that's",
    "start": "54770",
    "end": "57000"
  },
  {
    "text": "a subset of the\nintegers, and I'm",
    "start": "57000",
    "end": "58550"
  },
  {
    "text": "going to give you a recursive\ndefinition of E. The base",
    "start": "58550",
    "end": "62610"
  },
  {
    "text": "case is that I'm going to\ntell you that 0 is an E",
    "start": "62610",
    "end": "65850"
  },
  {
    "text": "and I'm going to give\nyou two constructors.",
    "start": "65850",
    "end": "68140"
  },
  {
    "text": "The first one says that if\nyou have an n that's an E,",
    "start": "68140",
    "end": "71220"
  },
  {
    "text": "you can add 2 to it and\nget a new element in E,",
    "start": "71220",
    "end": "74260"
  },
  {
    "text": "providing that n\nis not negative.",
    "start": "74260",
    "end": "76660"
  },
  {
    "text": "The second constructor is that\nif you have an n that's an E,",
    "start": "76660",
    "end": "79900"
  },
  {
    "text": "you can negate it.",
    "start": "79900",
    "end": "80760"
  },
  {
    "text": "You can take minus n,\nproviding that n is positive,",
    "start": "80760",
    "end": "84864"
  },
  {
    "text": "and those are the two\nconstructor rules.",
    "start": "84864",
    "end": "86530"
  },
  {
    "text": "Well, let's look at\nwhat goes on here.",
    "start": "86530",
    "end": "88350"
  },
  {
    "text": "What is this telling us?",
    "start": "88350",
    "end": "90100"
  },
  {
    "text": "Well, let's just use the\nfirst constructor rule",
    "start": "90100",
    "end": "92229"
  },
  {
    "text": "and use it repeatedly.",
    "start": "92230",
    "end": "93890"
  },
  {
    "text": "I can start off with 0.",
    "start": "93890",
    "end": "94909"
  },
  {
    "text": "That's the base case, and then\nI can apply the constructor",
    "start": "94910",
    "end": "97326"
  },
  {
    "text": "to add 2 to it.",
    "start": "97326",
    "end": "98649"
  },
  {
    "text": "Then I can apply the constructor\nagain to add 2 to 0 plus 2,",
    "start": "98650",
    "end": "105260"
  },
  {
    "text": "and then I can apply the\nthird time to get add 2 to 0",
    "start": "105260",
    "end": "108110"
  },
  {
    "text": "plus 2 plus 2.",
    "start": "108110",
    "end": "109650"
  },
  {
    "text": "And it's clear what I'm getting\nis 0, 2, 4, 6, and so on,",
    "start": "109650",
    "end": "112950"
  },
  {
    "text": "and I'm going to get all of\nthe non-negative even numbers",
    "start": "112950",
    "end": "116420"
  },
  {
    "text": "in that way.",
    "start": "116420",
    "end": "118770"
  },
  {
    "text": "Now, I can apply to these,\nthe positive numbers,",
    "start": "118770",
    "end": "122640"
  },
  {
    "text": "I can apply the\nnegation constructor.",
    "start": "122640",
    "end": "125290"
  },
  {
    "text": "So I can get minus\n2, minus 4, minus 6,",
    "start": "125290",
    "end": "128250"
  },
  {
    "text": "and it becomes apparent\nthen that I can",
    "start": "128250",
    "end": "130520"
  },
  {
    "text": "get all of the even numbers.",
    "start": "130520",
    "end": "132593"
  },
  {
    "start": "132593",
    "end": "135470"
  },
  {
    "start": "135000",
    "end": "189000"
  },
  {
    "text": "So we just figured out that\nE contains the even numbers.",
    "start": "135470",
    "end": "139230"
  },
  {
    "text": "Is there anything else in E?",
    "start": "139230",
    "end": "141180"
  },
  {
    "text": "And the answer is\nno, and the reason",
    "start": "141180",
    "end": "144290"
  },
  {
    "text": "is that an implicit part of the\nunderstanding of a definition",
    "start": "144290",
    "end": "148819"
  },
  {
    "text": "like this is that the only\nway that things can get into E",
    "start": "148820",
    "end": "153900"
  },
  {
    "text": "is by being a base case\nor by being constructed",
    "start": "153900",
    "end": "157560"
  },
  {
    "text": "from previously\nconstructed elements",
    "start": "157560",
    "end": "159680"
  },
  {
    "text": "by applying the\nconstructor rules.",
    "start": "159680",
    "end": "161150"
  },
  {
    "text": "In other words, there's\nan implicit clause here",
    "start": "161150",
    "end": "163180"
  },
  {
    "text": "that says that's all.",
    "start": "163180",
    "end": "165069"
  },
  {
    "text": "That implicit clause is\ncalled the extremal clause.",
    "start": "165070",
    "end": "168180"
  },
  {
    "text": "And it's taken for granted and\nrarely mentioned explicitly",
    "start": "168180",
    "end": "171819"
  },
  {
    "text": "as part of a\nrecursive definition,",
    "start": "171820",
    "end": "173600"
  },
  {
    "text": "but it's always\nto be understood.",
    "start": "173600",
    "end": "175396"
  },
  {
    "start": "175396",
    "end": "178870"
  },
  {
    "text": "So what we can\nconclude from this",
    "start": "178870",
    "end": "180370"
  },
  {
    "text": "is that E is exactly\nthe even integers",
    "start": "180370",
    "end": "182370"
  },
  {
    "text": "because there's nothing else\nthere except those ones that",
    "start": "182370",
    "end": "185239"
  },
  {
    "text": "were built up in\nthe way indicated.",
    "start": "185240",
    "end": "188070"
  },
  {
    "text": "So let's look at a slightly\nmore interesting example now.",
    "start": "188070",
    "end": "191290"
  },
  {
    "text": "I want to define the set\nof strings that consists",
    "start": "191290",
    "end": "194329"
  },
  {
    "text": "only of left and\nright parentheses",
    "start": "194330",
    "end": "197550"
  },
  {
    "text": "such that the left and\nright parentheses match up.",
    "start": "197550",
    "end": "200040"
  },
  {
    "text": "Well, writing\nparentheses on the slide",
    "start": "200040",
    "end": "201890"
  },
  {
    "text": "turns out to be confusing with\nparentheses that are actually",
    "start": "201890",
    "end": "204930"
  },
  {
    "text": "used to delimit things, so I'm\ngoing to replace parentheses",
    "start": "204930",
    "end": "208290"
  },
  {
    "text": "by brackets in blue-- a right\nbracket and a left bracket.",
    "start": "208290",
    "end": "213000"
  },
  {
    "text": "This notation here,\nby the way, stands",
    "start": "213000",
    "end": "215360"
  },
  {
    "text": "for the set of finite strings\nof right and left brackets.",
    "start": "215360",
    "end": "220490"
  },
  {
    "text": "It's a general notation.",
    "start": "220490",
    "end": "221827"
  },
  {
    "text": "If you have some\ncollection of objects",
    "start": "221827",
    "end": "223409"
  },
  {
    "text": "which you think of as\nletters and you write",
    "start": "223410",
    "end": "225400"
  },
  {
    "text": "an asterisk as a\nsuperscript, that",
    "start": "225400",
    "end": "227680"
  },
  {
    "text": "means the finite strings\nof those letters.",
    "start": "227680",
    "end": "231420"
  },
  {
    "text": "So these are the finite strings\nof right and left brackets,",
    "start": "231420",
    "end": "235830"
  },
  {
    "text": "and I want to give a\nrecursive definition of a set",
    "start": "235830",
    "end": "238610"
  },
  {
    "text": "M which I plan will be\nprecisely those strings where",
    "start": "238610",
    "end": "242870"
  },
  {
    "text": "the left and right brackets\nmatch up appropriately.",
    "start": "242870",
    "end": "246234"
  },
  {
    "text": "The way to think\nabout matching up",
    "start": "246234",
    "end": "247650"
  },
  {
    "text": "is take let's say a standard\narithmetic expression involving",
    "start": "247650",
    "end": "251370"
  },
  {
    "text": "plus and times and\nso on, and make sure",
    "start": "251370",
    "end": "253530"
  },
  {
    "text": "that it's fully parenthesized.",
    "start": "253530",
    "end": "254980"
  },
  {
    "text": "So whenever you add\ntwo things, there's",
    "start": "254980",
    "end": "256190"
  },
  {
    "text": "parentheses around\nthat, and whenever",
    "start": "256190",
    "end": "257730"
  },
  {
    "text": "you multiply two things,\nthere's parentheses",
    "start": "257731",
    "end": "259789"
  },
  {
    "text": "around that, meaning brackets.",
    "start": "259790",
    "end": "263480"
  },
  {
    "text": "Then if you erased everything\nbut the brackets, what",
    "start": "263480",
    "end": "267080"
  },
  {
    "text": "you'd be left with would be\na set of matched brackets.",
    "start": "267080",
    "end": "270110"
  },
  {
    "text": "Actually, it would be a\nset of matched brackets",
    "start": "270110",
    "end": "272879"
  },
  {
    "text": "or you could have several\nof them next to each other.",
    "start": "272880",
    "end": "275310"
  },
  {
    "text": "Those would still could\nbe considered matched,",
    "start": "275310",
    "end": "277440"
  },
  {
    "text": "so that's the way our\ndefinition is going to behave.",
    "start": "277440",
    "end": "279920"
  },
  {
    "text": "Let's give it.",
    "start": "279920",
    "end": "282330"
  },
  {
    "text": "So the base case is about\nthe simplest it could be.",
    "start": "282330",
    "end": "284990"
  },
  {
    "text": "I'm going to start\nwith the empty string.",
    "start": "284990",
    "end": "286810"
  },
  {
    "text": "An empty string is this\nthing that acts like a zero",
    "start": "286810",
    "end": "289690"
  },
  {
    "text": "under putting strings\nnext to each other,",
    "start": "289690",
    "end": "291660"
  },
  {
    "text": "or the concatenation operation.",
    "start": "291660",
    "end": "293450"
  },
  {
    "text": "If you concatenate the empty\nstring with any string,",
    "start": "293450",
    "end": "296820"
  },
  {
    "text": "it doesn't change the string.",
    "start": "296820",
    "end": "299550"
  },
  {
    "text": "And by definition,\nthen, the empty string",
    "start": "299550",
    "end": "301479"
  },
  {
    "text": "is a string with no\ncharacters, has length zero,",
    "start": "301480",
    "end": "304090"
  },
  {
    "text": "and it acts as an identity\nunder putting strings",
    "start": "304090",
    "end": "307810"
  },
  {
    "text": "next to each other.",
    "start": "307810",
    "end": "310100"
  },
  {
    "text": "There's going to be one\nconstructor in M that's",
    "start": "310100",
    "end": "313160"
  },
  {
    "text": "slightly ingenious.",
    "start": "313160",
    "end": "314440"
  },
  {
    "text": "There's other maybe\nsimpler or more natural",
    "start": "314440",
    "end": "317090"
  },
  {
    "text": "ways to make up constructors\nthat would define M,",
    "start": "317090",
    "end": "319889"
  },
  {
    "text": "but this one is\nparticularly nice",
    "start": "319890",
    "end": "321430"
  },
  {
    "text": "because I can get\naway with just one,",
    "start": "321430",
    "end": "322979"
  },
  {
    "text": "and it has some nice properties\nthat we'll explore later.",
    "start": "322980",
    "end": "325970"
  },
  {
    "text": "So here's the rule--\nif I've built up",
    "start": "325970",
    "end": "328430"
  },
  {
    "text": "two strings s and t of matched\nbrackets that are in M,",
    "start": "328430",
    "end": "332860"
  },
  {
    "text": "then I can build a new one\nby putting matched brackets",
    "start": "332860",
    "end": "335919"
  },
  {
    "text": "around s and concatenating\nit with t-- that",
    "start": "335920",
    "end": "339590"
  },
  {
    "text": "is, if s and t are\nstrings of brackets in M,",
    "start": "339590",
    "end": "343490"
  },
  {
    "text": "then if I start with a\nleft bracket followed",
    "start": "343490",
    "end": "346410"
  },
  {
    "text": "by the brackets in s followed\nby a right bracket followed",
    "start": "346410",
    "end": "349860"
  },
  {
    "text": "by the brackets in t, that new\nstring is yet another element",
    "start": "349860",
    "end": "355250"
  },
  {
    "text": "that I've built up in M.",
    "start": "355250",
    "end": "357890"
  },
  {
    "text": "Let's practice this\nto see how it works.",
    "start": "357890",
    "end": "360110"
  },
  {
    "text": "So there's the\nconstructor again.",
    "start": "360110",
    "end": "362169"
  },
  {
    "text": "Well, how do I get started?",
    "start": "362170",
    "end": "363930"
  },
  {
    "text": "To start, all I have\nis the base case.",
    "start": "363930",
    "end": "366229"
  },
  {
    "text": "s and t have to both be the\nempty string because that's",
    "start": "366230",
    "end": "369440"
  },
  {
    "text": "the only thing available to\napply the constructor to.",
    "start": "369440",
    "end": "372110"
  },
  {
    "text": "So if I do that,\nbasically the s and the t",
    "start": "372110",
    "end": "374530"
  },
  {
    "text": "disappear in this\nconstructor expression",
    "start": "374530",
    "end": "377410"
  },
  {
    "text": "and all I'm left with is\na matching left and right",
    "start": "377410",
    "end": "381360"
  },
  {
    "text": "bracket.",
    "start": "381360",
    "end": "383659"
  },
  {
    "text": "But now I've got a matching\nleft and right bracket,",
    "start": "383660",
    "end": "386100"
  },
  {
    "text": "so I can use that to\napply the constructor to,",
    "start": "386100",
    "end": "389350"
  },
  {
    "text": "so I could let s be\nthe matching brackets",
    "start": "389350",
    "end": "392680"
  },
  {
    "text": "and t still be the empty string.",
    "start": "392680",
    "end": "394990"
  },
  {
    "text": "Now when I plug into\nthe constructor,",
    "start": "394990",
    "end": "397130"
  },
  {
    "text": "the t still disappears, but I\nfind brackets within brackets,",
    "start": "397130",
    "end": "401940"
  },
  {
    "text": "and that's another string\nthat I've built up in M.",
    "start": "401940",
    "end": "404840"
  },
  {
    "text": "Now, being methodical,\nI could let s",
    "start": "404840",
    "end": "407560"
  },
  {
    "text": "be empty and t be the brackets.",
    "start": "407560",
    "end": "409620"
  },
  {
    "text": "And if I do that,\nthen the s goes away",
    "start": "409620",
    "end": "412020"
  },
  {
    "text": "and the t becomes the\nmatched pair of brackets",
    "start": "412020",
    "end": "414550"
  },
  {
    "text": "and I wind up with a matched\npair next to a matched pair.",
    "start": "414550",
    "end": "418970"
  },
  {
    "text": "Then, of course, I\ncould let both of them",
    "start": "418970",
    "end": "421020"
  },
  {
    "text": "be the matched brackets,\nand then I get a nested pair",
    "start": "421020",
    "end": "426030"
  },
  {
    "text": "next to a matched pair.",
    "start": "426030",
    "end": "428220"
  },
  {
    "text": "And now that I've got also\ngoing back to the very beginning",
    "start": "428220",
    "end": "431886"
  },
  {
    "text": "the next most\ncomplicated string that I",
    "start": "431886",
    "end": "433509"
  },
  {
    "text": "had was the nested\npair of brackets,",
    "start": "433510",
    "end": "437390"
  },
  {
    "text": "I could let s be\nthat and t be empty,",
    "start": "437390",
    "end": "439600"
  },
  {
    "text": "and then I would get brackets\nnested to depth three,",
    "start": "439600",
    "end": "443180"
  },
  {
    "text": "and so on.",
    "start": "443180",
    "end": "444009"
  },
  {
    "text": "That's the idea.",
    "start": "444010",
    "end": "444840"
  },
  {
    "start": "444840",
    "end": "448550"
  },
  {
    "text": "Now, it may or may\nnot be clear that you",
    "start": "448550",
    "end": "450720"
  },
  {
    "text": "get exactly the strings of\nmatched brackets in this way.",
    "start": "450720",
    "end": "454750"
  },
  {
    "text": "That's taken up further in the\nnotes and in some problems,",
    "start": "454750",
    "end": "458260"
  },
  {
    "text": "but we're just\ntrying to understand",
    "start": "458260",
    "end": "459880"
  },
  {
    "text": "how this definition works\nand take it for granted",
    "start": "459880",
    "end": "462990"
  },
  {
    "text": "that, in fact, it's right.",
    "start": "462990",
    "end": "465039"
  },
  {
    "text": "Let's use that definition to\nprove some things about M,",
    "start": "465040",
    "end": "468470"
  },
  {
    "text": "but I want to prove the things\nbased on the definition of M",
    "start": "468470",
    "end": "472320"
  },
  {
    "text": "not assuming that it\nworks as intended.",
    "start": "472320",
    "end": "474830"
  },
  {
    "text": "So I'm going to claim\nbased on the definition",
    "start": "474830",
    "end": "478699"
  },
  {
    "text": "that it's impossible to\nfind a string in M that",
    "start": "478700",
    "end": "482430"
  },
  {
    "text": "starts with a right bracket.",
    "start": "482430",
    "end": "483720"
  },
  {
    "text": "Now, of course,\nsince we're assuming",
    "start": "483720",
    "end": "485220"
  },
  {
    "text": "M is the right definition\nof matched brackets,",
    "start": "485220",
    "end": "487840"
  },
  {
    "text": "it's clear that a string that\nstarts with a right bracket",
    "start": "487840",
    "end": "490810"
  },
  {
    "text": "already has nothing to match--\nno left bracket matching it--",
    "start": "490810",
    "end": "493770"
  },
  {
    "text": "so it shouldn't be\nin there, but let's",
    "start": "493770",
    "end": "495419"
  },
  {
    "text": "just make sure that the\ndefinition behaves in the way",
    "start": "495420",
    "end": "497680"
  },
  {
    "text": "that we intend or\nit might be wrong.",
    "start": "497680",
    "end": "499919"
  },
  {
    "text": "So how do I prove\nthat no string in M",
    "start": "499920",
    "end": "502550"
  },
  {
    "text": "starts with a right bracket?",
    "start": "502550",
    "end": "503949"
  },
  {
    "text": "Well, let's look\nat the definition.",
    "start": "503950",
    "end": "506290"
  },
  {
    "text": "The base case doesn't\nhave any brackets at all,",
    "start": "506290",
    "end": "508770"
  },
  {
    "text": "so it certainly doesn't\nstart with a right bracket.",
    "start": "508770",
    "end": "511770"
  },
  {
    "text": "And looking at the constructor\nrule, all the strings",
    "start": "511770",
    "end": "515209"
  },
  {
    "text": "that you can construct\nstart with a left bracket.",
    "start": "515210",
    "end": "518120"
  },
  {
    "text": "And so we're really appealing\nto the implicit that's",
    "start": "518120",
    "end": "522929"
  },
  {
    "text": "all clause, the\nextremal clause that",
    "start": "522929",
    "end": "524770"
  },
  {
    "text": "says that since the only\nway to get things in M",
    "start": "524770",
    "end": "527610"
  },
  {
    "text": "is by applying the\nconstructor, you're",
    "start": "527610",
    "end": "530589"
  },
  {
    "text": "not going to be able\nto get anything that",
    "start": "530590",
    "end": "532720"
  },
  {
    "text": "starts with a right bracket.",
    "start": "532720",
    "end": "534076"
  },
  {
    "start": "534076",
    "end": "536709"
  },
  {
    "start": "536000",
    "end": "761000"
  },
  {
    "text": "One more example of a\nrecursively-defined data type",
    "start": "536710",
    "end": "539700"
  },
  {
    "text": "that's interesting, and we'll\nbe doing some lovely class",
    "start": "539700",
    "end": "544610"
  },
  {
    "text": "problems with, is the class\nthat I call F18 functions.",
    "start": "544610",
    "end": "549000"
  },
  {
    "text": "These are the functions from\na first term of calculus,",
    "start": "549000",
    "end": "551956"
  },
  {
    "text": "like as you study\nin 18.01, functions",
    "start": "551956",
    "end": "555240"
  },
  {
    "text": "of a single real variable, and\nhere's a recursive definition",
    "start": "555240",
    "end": "558930"
  },
  {
    "text": "that I think covers all\nof the functions that",
    "start": "558930",
    "end": "561270"
  },
  {
    "text": "are considered in 18.01.",
    "start": "561270",
    "end": "564444"
  },
  {
    "text": "I'm going to start\noff with the identity",
    "start": "564444",
    "end": "566110"
  },
  {
    "text": "function and any\nconstant function",
    "start": "566110",
    "end": "569399"
  },
  {
    "text": "and the function sine\nof x, and declare",
    "start": "569400",
    "end": "571870"
  },
  {
    "text": "that those are the base cases.",
    "start": "571870",
    "end": "573569"
  },
  {
    "text": "Those are the functions in F18.",
    "start": "573569",
    "end": "574860"
  },
  {
    "start": "574860",
    "end": "577510"
  },
  {
    "text": "Then here are the\nconstructor rules.",
    "start": "577510",
    "end": "579330"
  },
  {
    "text": "If I have two functions\nthat are in F18,",
    "start": "579330",
    "end": "581890"
  },
  {
    "text": "I can add and multiply\nthem or take 2 to the f",
    "start": "581890",
    "end": "585810"
  },
  {
    "text": "where f is in there,\nand those will all also",
    "start": "585810",
    "end": "588370"
  },
  {
    "text": "be functions in F18.",
    "start": "588370",
    "end": "589870"
  },
  {
    "text": "So I can start\nbuilding up a bunch",
    "start": "589870",
    "end": "592480"
  },
  {
    "text": "of interesting stuff like\npolynomials and exponentials.",
    "start": "592480",
    "end": "595880"
  },
  {
    "text": "In addition, if I have a\nfunction that's in F18,",
    "start": "595880",
    "end": "598850"
  },
  {
    "text": "I can take it's inverse--\nat least, insofar",
    "start": "598850",
    "end": "601259"
  },
  {
    "text": "as the inverse is\ndefined in the function--",
    "start": "601260",
    "end": "604130"
  },
  {
    "text": "and I can also compose\ntwo functions that",
    "start": "604130",
    "end": "607560"
  },
  {
    "text": "are in F18 to get another one.",
    "start": "607560",
    "end": "610590"
  },
  {
    "text": "Let's look at how\nthis definition works.",
    "start": "610590",
    "end": "612460"
  },
  {
    "text": "I claim that, in fact, the\nfunction minus x is in F18.",
    "start": "612460",
    "end": "616010"
  },
  {
    "text": "How do I build up\nminus x from the rules?",
    "start": "616010",
    "end": "620840"
  },
  {
    "text": "Well, minus 1 is a constant\nfunction, so I have that.",
    "start": "620840",
    "end": "625860"
  },
  {
    "text": "And x is just the\nidentity function,",
    "start": "625860",
    "end": "628040"
  },
  {
    "text": "and I can multiply two\nfunctions that I have.",
    "start": "628040",
    "end": "630620"
  },
  {
    "text": "So if I multiply minus\n1 times x, guess what?",
    "start": "630620",
    "end": "633420"
  },
  {
    "text": "I got minus x, so\nI've just figured out",
    "start": "633420",
    "end": "635790"
  },
  {
    "text": "that that function is in F18.",
    "start": "635790",
    "end": "638800"
  },
  {
    "text": "What about the square root of x?",
    "start": "638800",
    "end": "640420"
  },
  {
    "text": "Well, if I multiply\nthe identity by itself,",
    "start": "640420",
    "end": "643910"
  },
  {
    "text": "I get the function x squared.",
    "start": "643910",
    "end": "646250"
  },
  {
    "text": "And then if I take its inverse,\nthat's square root of x.",
    "start": "646250",
    "end": "650860"
  },
  {
    "text": "Well, I gave you sine x, but\nnot cosine x or any other trig",
    "start": "650860",
    "end": "654610"
  },
  {
    "text": "functions.",
    "start": "654610",
    "end": "655430"
  },
  {
    "text": "Why not?",
    "start": "655430",
    "end": "656360"
  },
  {
    "text": "Well, I want them all, but I can\nget them by the rules already.",
    "start": "656360",
    "end": "659970"
  },
  {
    "text": "So how do you get cosine x?",
    "start": "659970",
    "end": "661139"
  },
  {
    "text": "Well, cosine x is just\nsine of x plus pi.",
    "start": "661140",
    "end": "664510"
  },
  {
    "text": "Well, why is that in there?",
    "start": "664510",
    "end": "666250"
  },
  {
    "text": "Pi is a constant,\nx is the identity.",
    "start": "666250",
    "end": "669080"
  },
  {
    "text": "So the sum is a\nfunction that's in F18.",
    "start": "669080",
    "end": "672750"
  },
  {
    "text": "And then if I compose\nthat function with sine,",
    "start": "672750",
    "end": "676490"
  },
  {
    "text": "I get sine of x plus\npi, which is cosine x.",
    "start": "676490",
    "end": "678870"
  },
  {
    "text": "So cosine x is there.",
    "start": "678870",
    "end": "680290"
  },
  {
    "text": "Now, this was actually\npointed out to me",
    "start": "680290",
    "end": "683190"
  },
  {
    "text": "by students, this simple\nway of getting cosine x.",
    "start": "683190",
    "end": "685960"
  },
  {
    "text": "The original way\nthat I thought, and I",
    "start": "685960",
    "end": "687830"
  },
  {
    "text": "was using that square\nroot operation where",
    "start": "687830",
    "end": "690200"
  },
  {
    "text": "I was going to use the\nidentity that cosine squared",
    "start": "690200",
    "end": "692340"
  },
  {
    "text": "plus sine squared is equal to 1.",
    "start": "692340",
    "end": "694360"
  },
  {
    "text": "So if I take 1 minus sine\nsquared and then take",
    "start": "694360",
    "end": "697690"
  },
  {
    "text": "the square root, that's another\nway to get cosine x, the point",
    "start": "697690",
    "end": "701600"
  },
  {
    "text": "being that there's a\nlot of ways to derive",
    "start": "701600",
    "end": "704930"
  },
  {
    "text": "the same function as\nbeing in F18 built up",
    "start": "704930",
    "end": "708940"
  },
  {
    "text": "from the operations\napplied to other functions.",
    "start": "708940",
    "end": "711960"
  },
  {
    "text": "What about log of x?",
    "start": "711960",
    "end": "712910"
  },
  {
    "text": "Let's just close with that.",
    "start": "712910",
    "end": "714290"
  },
  {
    "text": "How do I get log of x?",
    "start": "714290",
    "end": "715370"
  },
  {
    "text": "Well, log of x is the\ninverse of e of the x.",
    "start": "715370",
    "end": "718200"
  },
  {
    "text": "How do I get e to the x?",
    "start": "718200",
    "end": "719540"
  },
  {
    "text": "Well, e to the x is\nwhat you get by taking 2",
    "start": "719540",
    "end": "723535"
  },
  {
    "text": "to the log to the base\n2 of e, which is e,",
    "start": "723535",
    "end": "728470"
  },
  {
    "text": "and then raising\nthat to the power x.",
    "start": "728470",
    "end": "734310"
  },
  {
    "text": "So if I take log e, which is\na constant log to the base 2",
    "start": "734310",
    "end": "738903"
  },
  {
    "text": "of e, which is a\nconstant, I multiply it",
    "start": "738903",
    "end": "740570"
  },
  {
    "text": "by x the identity function\nand I take 2 to that power,",
    "start": "740570",
    "end": "744430"
  },
  {
    "text": "I'm composing, in other words,\nx log x with the constructor 2",
    "start": "744430",
    "end": "748835"
  },
  {
    "text": "to the F, then I wind up\nwith the function e to the x.",
    "start": "748835",
    "end": "752790"
  },
  {
    "text": "And when I take its inverse,\nI get log of x, as claimed.",
    "start": "752790",
    "end": "758940"
  },
  {
    "start": "758940",
    "end": "761938"
  }
]