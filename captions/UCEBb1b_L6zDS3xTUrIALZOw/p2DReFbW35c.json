[
  {
    "text": "The simplest cache hardware consists of an\nSRAM with a few additional pieces of logic.",
    "start": "1300",
    "end": "7200"
  },
  {
    "text": "The cache hardware is designed so that each\nmemory location in the CPU's address space",
    "start": "7200",
    "end": "12129"
  },
  {
    "text": "maps to a particular cache line, hence the\nname \"direct-mapped (DM) cache\".",
    "start": "12130",
    "end": "18249"
  },
  {
    "text": "There are, of course, many more memory locations\nthen there are cache lines, so many addresses",
    "start": "18249",
    "end": "23079"
  },
  {
    "text": "are mapped to the same cache line and the\ncache will only be able to hold the data for",
    "start": "23079",
    "end": "27650"
  },
  {
    "text": "one of those addresses at a time.",
    "start": "27650",
    "end": "31168"
  },
  {
    "text": "The operation of a DM cache is straightforward.",
    "start": "31169",
    "end": "34250"
  },
  {
    "text": "We'll use part of the incoming address as\nan index to select a single cache line to",
    "start": "34250",
    "end": "39239"
  },
  {
    "text": "be searched.",
    "start": "39240",
    "end": "40899"
  },
  {
    "text": "The \"search\" consists of comparing the rest\nof the incoming address with the address tag",
    "start": "40899",
    "end": "46128"
  },
  {
    "text": "of the selected cache line.",
    "start": "46129",
    "end": "48600"
  },
  {
    "text": "If the tag matches the address, there's a\ncache hit and we can immediately use the data",
    "start": "48600",
    "end": "53838"
  },
  {
    "text": "in the cache to satisfy the request.",
    "start": "53839",
    "end": "58160"
  },
  {
    "text": "In this design, we've included an additional\n\"valid bit\" which is 1 when the tag and data",
    "start": "58160",
    "end": "63570"
  },
  {
    "text": "fields hold valid information.",
    "start": "63570",
    "end": "66590"
  },
  {
    "text": "The valid bit for each cache line is initialized\nto 0 when the cache is powered on, indicating",
    "start": "66590",
    "end": "72109"
  },
  {
    "text": "that all cache lines are empty.",
    "start": "72110",
    "end": "75830"
  },
  {
    "text": "As data is brought into the cache, the valid\nbit is set to 1 when the cache line's tag",
    "start": "75830",
    "end": "81070"
  },
  {
    "text": "and data fields are filled.",
    "start": "81070",
    "end": "84110"
  },
  {
    "text": "The CPU can request that the valid bit be\ncleared for a particular cache line - this",
    "start": "84110",
    "end": "88460"
  },
  {
    "text": "is called \"flushing the cache\".",
    "start": "88460",
    "end": "90549"
  },
  {
    "text": "If, for example, the CPU initiates a read\nfrom disk, the disk hardware will read its",
    "start": "90550",
    "end": "95840"
  },
  {
    "text": "data into a block of main memory, so any cached\nvalues for that block will out-of-date.",
    "start": "95840",
    "end": "102570"
  },
  {
    "text": "So the CPU will flush those locations from\nthe cache by marking any matching cache lines",
    "start": "102570",
    "end": "108750"
  },
  {
    "text": "as invalid.",
    "start": "108750",
    "end": "110610"
  },
  {
    "text": "Let's see how this works using a small DM\ncache with 8 lines where each cache line contains",
    "start": "110610",
    "end": "116580"
  },
  {
    "text": "a single word (4 bytes) of data.",
    "start": "116580",
    "end": "120200"
  },
  {
    "text": "Here's a CPU request for the location at byte\naddress 0xE8.",
    "start": "120200",
    "end": "125390"
  },
  {
    "text": "Since there 4 bytes of data in each cache\nline, the bottom 2 address bits indicate the",
    "start": "125390",
    "end": "130229"
  },
  {
    "text": "appropriate byte offset into the cached word.",
    "start": "130229",
    "end": "134390"
  },
  {
    "text": "Since the cache deals only with word accesses,\nthe byte offset bits aren't used.",
    "start": "134390",
    "end": "140160"
  },
  {
    "text": "Next, we'll need to use 3 address bits to\nselect which of the 8 cache lines to search.",
    "start": "140160",
    "end": "147060"
  },
  {
    "text": "We choose these cache index bits from the\nlow-order bits of the address.",
    "start": "147060",
    "end": "151700"
  },
  {
    "text": "Why?",
    "start": "151700",
    "end": "152750"
  },
  {
    "text": "Well, it's because of locality.",
    "start": "152750",
    "end": "156100"
  },
  {
    "text": "The principle of locality tells us that it's\nlikely that the CPU will be requesting nearby",
    "start": "156100",
    "end": "160430"
  },
  {
    "text": "addresses and for the cache to perform well,\nwe'd like to arrange for nearby locations",
    "start": "160430",
    "end": "165980"
  },
  {
    "text": "to be able to be held in the cache at the\nsame time.",
    "start": "165980",
    "end": "170400"
  },
  {
    "text": "This means that nearby locations will have\nto be mapped to different cache lines.",
    "start": "170400",
    "end": "176250"
  },
  {
    "text": "The addresses of nearby locations differ in\ntheir low-order address bits, so we'll use",
    "start": "176250",
    "end": "181280"
  },
  {
    "text": "those bits as the cache index bits - that\nway nearby locations will map to different",
    "start": "181280",
    "end": "186840"
  },
  {
    "text": "cache lines.",
    "start": "186840",
    "end": "189370"
  },
  {
    "text": "The data, tag and valid bits selected by the\ncache line index are read from the SRAM.",
    "start": "189370",
    "end": "195629"
  },
  {
    "text": "To complete the search, we check the remaining\naddress against the tag field of the cache.",
    "start": "195630",
    "end": "200490"
  },
  {
    "text": "If they're equal and the valid bit is 1, we\nhave a cache hit, and the data field can be",
    "start": "200490",
    "end": "205940"
  },
  {
    "text": "used to satisfy the request.",
    "start": "205940",
    "end": "209740"
  },
  {
    "text": "How come the tag field isn't 32 bits, since\nwe have a 32-bit address?",
    "start": "209740",
    "end": "215260"
  },
  {
    "text": "We could have done that, but since all values\nstored in cache line 2 will have the same",
    "start": "215260",
    "end": "219620"
  },
  {
    "text": "index bits (0b010), we saved a few bits of\nSRAM and chose not save those bits in the",
    "start": "219620",
    "end": "226860"
  },
  {
    "text": "tag.",
    "start": "226860",
    "end": "227860"
  },
  {
    "text": "In other words, there's no point in using\nSRAM to save bits we can generate from the",
    "start": "227860",
    "end": "232620"
  },
  {
    "text": "incoming address.",
    "start": "232620",
    "end": "235180"
  },
  {
    "text": "So the cache hardware in this example is an\n8-location by 60 bit SRAM plus a 27-bit comparator",
    "start": "235180",
    "end": "242379"
  },
  {
    "text": "and a single AND gate.",
    "start": "242380",
    "end": "244730"
  },
  {
    "text": "The cache access time is the access time of\nthe SRAM plus the propagation delays of the",
    "start": "244730",
    "end": "250220"
  },
  {
    "text": "comparator and AND gate.",
    "start": "250220",
    "end": "252459"
  },
  {
    "text": "About as simple and fast as we could hope\nfor.",
    "start": "252459",
    "end": "256380"
  },
  {
    "text": "The downside of the simplicity is that for\neach CPU request, we're only looking in a",
    "start": "256380",
    "end": "262120"
  },
  {
    "text": "single cache location to see if the cache\nholds the desired data.",
    "start": "262120",
    "end": "267599"
  },
  {
    "text": "Not much of \"search\" is it?",
    "start": "267599",
    "end": "269819"
  },
  {
    "text": "But the mapping of addresses to cache lines\nhelps us out here.",
    "start": "269819",
    "end": "273770"
  },
  {
    "text": "Using the low-order address bit as the cache\nindex, we've arranged for nearby locations",
    "start": "273770",
    "end": "278180"
  },
  {
    "text": "to be mapped to different cache lines.",
    "start": "278180",
    "end": "280449"
  },
  {
    "text": "So, for example, if the CPU were executing\nan 8-instruction loop, all 8 instructions",
    "start": "280449",
    "end": "285240"
  },
  {
    "text": "can be held in the cache at the same time.",
    "start": "285240",
    "end": "287689"
  },
  {
    "text": "A more complicated search mechanism couldn't\nimprove on that.",
    "start": "287689",
    "end": "292309"
  },
  {
    "text": "The bottom line: this extremely simple \"search\"\nis sufficient to get good cache hit ratios",
    "start": "292309",
    "end": "297479"
  },
  {
    "text": "for the cases we care about.",
    "start": "297479",
    "end": "300349"
  },
  {
    "text": "Let's try a few more examples, in this case\nusing a DM cache with 64 lines.",
    "start": "300349",
    "end": "306310"
  },
  {
    "text": "Suppose the cache gets a read request for\nlocation 0x400C.",
    "start": "306310",
    "end": "311550"
  },
  {
    "text": "To see how the request is processed, we first\nwrite the address in binary so we can easily",
    "start": "311550",
    "end": "316740"
  },
  {
    "text": "divide it into the offset, index and tag fields.",
    "start": "316740",
    "end": "321310"
  },
  {
    "text": "For this address the offset bits have the\nvalue 0, the cache line index bits have the",
    "start": "321310",
    "end": "326749"
  },
  {
    "text": "value 3, and the tag bits have the value 0x40.",
    "start": "326749",
    "end": "332009"
  },
  {
    "text": "So the tag field of cache line 3 is compared\nwith the tag field of the address.",
    "start": "332009",
    "end": "337520"
  },
  {
    "text": "Since there's a match, we have a cache hit\nand the value in the data field of cache line",
    "start": "337520",
    "end": "342240"
  },
  {
    "text": "can be used to satisfy the request.",
    "start": "342240",
    "end": "346029"
  },
  {
    "text": "Would an access to location 0x4008 be a cache\nhit?",
    "start": "346029",
    "end": "350900"
  },
  {
    "text": "This address is similar to that in our first\nexample, except the cache line index is now",
    "start": "350900",
    "end": "355379"
  },
  {
    "text": "2 instead of 3.",
    "start": "355379",
    "end": "358449"
  },
  {
    "text": "Looking in cache line 2, we that its tag field\n(0x58) doesn't match the tag field in the",
    "start": "358449",
    "end": "364330"
  },
  {
    "text": "address (0x40), so this access would be a\ncache miss.",
    "start": "364330",
    "end": "368159"
  },
  {
    "text": "What are the addresses of the words held by\ncache lines 0, 1, and 2, all of which have",
    "start": "368159",
    "end": "374930"
  },
  {
    "text": "the same tag field?",
    "start": "374930",
    "end": "376850"
  },
  {
    "text": "Well, we can run the address matching process\nbackwards!",
    "start": "376850",
    "end": "382110"
  },
  {
    "text": "For an address to match these three cache\nlines it would have look like the binary shown",
    "start": "382110",
    "end": "386219"
  },
  {
    "text": "here, where we've used the information in\nthe cache tag field to fill in the high-order",
    "start": "386219",
    "end": "390370"
  },
  {
    "text": "address bits and low-order address bits will\ncome from the index value.",
    "start": "390370",
    "end": "395680"
  },
  {
    "text": "If we fill in the indices 0, 1, and 2, then\nconvert the resulting binary to hex we get",
    "start": "395680",
    "end": "401150"
  },
  {
    "text": "0x5800, 0x5804, and 0x5808 as the addresses\nfor the data held in cache lines 0, 1, and",
    "start": "401150",
    "end": "408650"
  },
  {
    "text": "2.",
    "start": "408650",
    "end": "411150"
  },
  {
    "text": "Note that the complete address of the cached\nlocations is formed by combining the tag field",
    "start": "411150",
    "end": "416089"
  },
  {
    "text": "of the cache line with the index of the cache\nline.",
    "start": "416089",
    "end": "419899"
  },
  {
    "text": "We of course need to be able to recover the\ncomplete address from the information held",
    "start": "419899",
    "end": "424050"
  },
  {
    "text": "in the cache so it can be correctly compared\nagainst address requests from the CPU.",
    "start": "424050",
    "end": "429179"
  }
]