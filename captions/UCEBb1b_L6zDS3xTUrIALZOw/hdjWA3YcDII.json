[
  {
    "start": "0",
    "end": "4900"
  },
  {
    "text": "KENDRA PUGH: Hi.",
    "start": "4900",
    "end": "6150"
  },
  {
    "text": "Let's talk about\nobject oriented",
    "start": "6150",
    "end": "7220"
  },
  {
    "text": "programming in Python.",
    "start": "7220",
    "end": "8809"
  },
  {
    "text": "First, object oriented\nprogramming is",
    "start": "8810",
    "end": "10260"
  },
  {
    "text": "a programming paradigm.",
    "start": "10260",
    "end": "11370"
  },
  {
    "text": "It's in the same category as\nthings like functional",
    "start": "11370",
    "end": "14170"
  },
  {
    "text": "programming and imperative\nprogramming.",
    "start": "14170",
    "end": "16280"
  },
  {
    "text": "But object oriented programming\nis going to be the",
    "start": "16280",
    "end": "18730"
  },
  {
    "text": "programming paradigm that\ndescribes most of the code",
    "start": "18730",
    "end": "21010"
  },
  {
    "text": "that you're going to interact\nwith in 6.01.",
    "start": "21010",
    "end": "23180"
  },
  {
    "text": "So it's important to understand\nhow it works and",
    "start": "23180",
    "end": "25100"
  },
  {
    "text": "how, in particular, you want\nto be able to code in an",
    "start": "25100",
    "end": "28620"
  },
  {
    "text": "object oriented programming\nparadigm in Python.",
    "start": "28620",
    "end": "31860"
  },
  {
    "text": "So today, I'm going to go over a\nquick crash course on object",
    "start": "31860",
    "end": "35370"
  },
  {
    "text": "oriented programming, and also\nindicate all the little tips",
    "start": "35370",
    "end": "37840"
  },
  {
    "text": "and tricks you need in order\nto program in Python.",
    "start": "37840",
    "end": "41140"
  },
  {
    "text": "Let's look at what I\nhave written up.",
    "start": "41140",
    "end": "42899"
  },
  {
    "text": "So the most important thing to\nremember when you're learning",
    "start": "42900",
    "end": "47930"
  },
  {
    "text": "about the object oriented\nprogramming paradigm is that",
    "start": "47930",
    "end": "50090"
  },
  {
    "text": "everything is an object.",
    "start": "50090",
    "end": "51480"
  },
  {
    "text": "And what I mean when I say that,\nand what people mean",
    "start": "51480",
    "end": "53480"
  },
  {
    "text": "when people say that, is that\nthe ideals behind the paradigm",
    "start": "53480",
    "end": "60510"
  },
  {
    "text": "are that you interact with your\ncode in the same way that",
    "start": "60510",
    "end": "63379"
  },
  {
    "text": "you would interact with\nobjects in the",
    "start": "63380",
    "end": "64660"
  },
  {
    "text": "physical world, right?",
    "start": "64660",
    "end": "65950"
  },
  {
    "text": "There's a particular piece\nof paper on the",
    "start": "65950",
    "end": "68840"
  },
  {
    "text": "desk in front of me.",
    "start": "68840",
    "end": "69920"
  },
  {
    "text": "And it is a kind of\npiece of paper.",
    "start": "69920",
    "end": "72159"
  },
  {
    "text": "So I know how to interact with\nit the way you would interact",
    "start": "72160",
    "end": "74430"
  },
  {
    "text": "with any other piece of paper.",
    "start": "74430",
    "end": "76920"
  },
  {
    "text": "If you want to codify this in an\nobject oriented programming",
    "start": "76920",
    "end": "79400"
  },
  {
    "text": "paradigm, you write\nup classes.",
    "start": "79400",
    "end": "81650"
  },
  {
    "text": "Classes are your basic\nunit of code block.",
    "start": "81650",
    "end": "84200"
  },
  {
    "text": "They describe what a thing can\ndo and what a thing has or",
    "start": "84200",
    "end": "90149"
  },
  {
    "text": "what attributes a thing has.",
    "start": "90150",
    "end": "91380"
  },
  {
    "text": "And in object oriented\nprogramming--",
    "start": "91380",
    "end": "93290"
  },
  {
    "text": "frequently object oriented\nprogramming and in object",
    "start": "93290",
    "end": "95320"
  },
  {
    "text": "oriented programming\nin Python--",
    "start": "95320",
    "end": "97050"
  },
  {
    "text": "we refer to those things as\nmethods or functions that a",
    "start": "97050",
    "end": "100300"
  },
  {
    "text": "particular object may have, and\nattributes or particular",
    "start": "100300",
    "end": "103810"
  },
  {
    "text": "variables that an\nobject may have.",
    "start": "103810",
    "end": "107100"
  },
  {
    "text": "Once you've codified what any\nobject of a particular class",
    "start": "107100",
    "end": "111119"
  },
  {
    "text": "can do, you can then use the\ncode that you've written to",
    "start": "111120",
    "end": "114590"
  },
  {
    "text": "instantiate an object.",
    "start": "114590",
    "end": "116259"
  },
  {
    "text": "An object is the functional unit\nin the object oriented",
    "start": "116260",
    "end": "121060"
  },
  {
    "text": "programming paradigm.",
    "start": "121060",
    "end": "122009"
  },
  {
    "text": "It's the thing that you interact\nwith, and tell what",
    "start": "122010",
    "end": "124010"
  },
  {
    "text": "to do, and produces\nresults for you.",
    "start": "124010",
    "end": "127080"
  },
  {
    "text": "It's the thing that makes up--",
    "start": "127080",
    "end": "129389"
  },
  {
    "text": "it and classes those are the\ntwo things that you need to",
    "start": "129389",
    "end": "131340"
  },
  {
    "text": "think about.",
    "start": "131340",
    "end": "131819"
  },
  {
    "text": "But you also have to think about\nhow they're different.",
    "start": "131820",
    "end": "135330"
  },
  {
    "text": "I have a particular sheet\nof paper in front of me.",
    "start": "135330",
    "end": "136970"
  },
  {
    "text": "It has all the properties\nof a sheet of paper.",
    "start": "136970",
    "end": "139040"
  },
  {
    "text": "And when I think about all the\nthings I can do to a sheet of",
    "start": "139040",
    "end": "141010"
  },
  {
    "text": "paper, that constitutes\na class.",
    "start": "141010",
    "end": "143120"
  },
  {
    "text": "But the particular piece of\npaper that I have is an",
    "start": "143120",
    "end": "145629"
  },
  {
    "text": "instance of that class.",
    "start": "145630",
    "end": "147260"
  },
  {
    "text": "It's a particular\npiece of paper.",
    "start": "147260",
    "end": "150930"
  },
  {
    "text": "That's the gist of object\noriented programming and the",
    "start": "150930",
    "end": "153959"
  },
  {
    "text": "things that you need to know.",
    "start": "153960",
    "end": "155640"
  },
  {
    "text": "Now that I've covered them, I'm\ngoing to go over the most",
    "start": "155640",
    "end": "158000"
  },
  {
    "text": "basic class I could come up\nwith in terms of object",
    "start": "158000",
    "end": "160135"
  },
  {
    "text": "oriented programming\nin Python.",
    "start": "160135",
    "end": "162709"
  },
  {
    "text": "This is a class that specifies\nwhat a 6.01 staff member has",
    "start": "162710",
    "end": "167600"
  },
  {
    "text": "in terms of an attribute\nor a method in Python.",
    "start": "167600",
    "end": "175270"
  },
  {
    "text": "If I want every instance of a\nparticular class or every",
    "start": "175270",
    "end": "181480"
  },
  {
    "text": "staff member of the class, staff\nmember 6.01, to have a",
    "start": "181480",
    "end": "184909"
  },
  {
    "text": "particular attribute, I\ncan specify like this.",
    "start": "184910",
    "end": "188450"
  },
  {
    "text": "Every instance of Staff6.01\nis going to have",
    "start": "188450",
    "end": "191440"
  },
  {
    "text": "an attribute room.",
    "start": "191440",
    "end": "192540"
  },
  {
    "text": "And that attribute room is going\nto be set to the string",
    "start": "192540",
    "end": "195180"
  },
  {
    "text": "describing 34-501,\nthe 6.01 lab.",
    "start": "195180",
    "end": "198980"
  },
  {
    "text": "If I want every 6.01 staff\nmember to be able to do a",
    "start": "198980",
    "end": "203300"
  },
  {
    "text": "particular thing, or have a\nparticular method, or call a",
    "start": "203300",
    "end": "205660"
  },
  {
    "text": "particular function, then\nI specify it like this.",
    "start": "205660",
    "end": "209610"
  },
  {
    "text": "This is the beginning of a\nmethod in the class Staff6.01.",
    "start": "209610",
    "end": "213120"
  },
  {
    "text": "It's called sayHi.",
    "start": "213120",
    "end": "215209"
  },
  {
    "text": "I'll talk about self\nin a second.",
    "start": "215210",
    "end": "216850"
  },
  {
    "text": "Don't worry about it.",
    "start": "216850",
    "end": "217560"
  },
  {
    "text": "Act as though--",
    "start": "217560",
    "end": "218670"
  },
  {
    "text": "if this is your introduction\nto Python programming, then",
    "start": "218670",
    "end": "223030"
  },
  {
    "text": "pretty much pretend\nit's not there.",
    "start": "223030",
    "end": "224209"
  },
  {
    "text": "It's kind of like this, but\nwe'll cover that in a second.",
    "start": "224210",
    "end": "228280"
  },
  {
    "text": "And if any instance of the\nStaff6.01 class calls sayHi,",
    "start": "228280",
    "end": "233500"
  },
  {
    "text": "then \"hello\" will be printed\nto standard out.",
    "start": "233500",
    "end": "236770"
  },
  {
    "text": "I have a couple examples up\non the board behind me.",
    "start": "236770",
    "end": "239310"
  },
  {
    "text": "And if you type them into Idle\nand see what their return is",
    "start": "239310",
    "end": "242020"
  },
  {
    "text": "like, you'll be able to--",
    "start": "242020",
    "end": "244510"
  },
  {
    "text": "after you've typed in this--",
    "start": "244510",
    "end": "245950"
  },
  {
    "text": "you'll be able to interact a\nlittle bit better with what",
    "start": "245950",
    "end": "248700"
  },
  {
    "text": "Python considers classes,\nand objects, and",
    "start": "248700",
    "end": "251290"
  },
  {
    "text": "that sort of thing.",
    "start": "251290",
    "end": "252540"
  },
  {
    "start": "252540",
    "end": "254579"
  },
  {
    "text": "If you look at type Staff6.01,\nit'll tell you about a class,",
    "start": "254580",
    "end": "258299"
  },
  {
    "text": "which is an object in itself.",
    "start": "258300",
    "end": "259799"
  },
  {
    "text": "But it's a specification for\ninstances of an object.",
    "start": "259800",
    "end": "264729"
  },
  {
    "text": "If you want to instantiate\nan object that is of type",
    "start": "264730",
    "end": "268900"
  },
  {
    "text": "Staff6.01, you need to use the\nparenthesess on the end.",
    "start": "268900",
    "end": "272370"
  },
  {
    "text": "This treats Staff6.01 like a\ncall and creates an object.",
    "start": "272370",
    "end": "277090"
  },
  {
    "text": "If you just type Staff6.01,\nyou're just reassigning",
    "start": "277090",
    "end": "279610"
  },
  {
    "text": "Staff6.01 class to the name\nkpugh, and that's not useful.",
    "start": "279610",
    "end": "283009"
  },
  {
    "text": "Every Staff6.01 member\nshould not be",
    "start": "283010",
    "end": "284610"
  },
  {
    "text": "considered a Kendra, right?",
    "start": "284610",
    "end": "288860"
  },
  {
    "text": "Once you have instantiated a\nparticular object of type",
    "start": "288860",
    "end": "293060"
  },
  {
    "text": "Staff6.01, you can look at the\ntype of that object, right?",
    "start": "293060",
    "end": "296570"
  },
  {
    "text": "Now you've got one object,\nkpugh, myself.",
    "start": "296570",
    "end": "300230"
  },
  {
    "text": "And that is a class\nof Staff6.01.",
    "start": "300230",
    "end": "304200"
  },
  {
    "text": "Likewise, now that you have this\nobject, kpugh, you can",
    "start": "304200",
    "end": "307400"
  },
  {
    "text": "look at its attributes\nand methods.",
    "start": "307400",
    "end": "309090"
  },
  {
    "text": "If you look at kpugh.room, then\nit should print to the",
    "start": "309090",
    "end": "311940"
  },
  {
    "text": "screen \"34-501.\" That's because\nthat's the attribute",
    "start": "311940",
    "end": "317460"
  },
  {
    "text": "associated with this instance.",
    "start": "317460",
    "end": "319750"
  },
  {
    "text": "If you call kpugh.sayHi(), it\nwill use the method in the",
    "start": "319750",
    "end": "326250"
  },
  {
    "text": "class type of this object.",
    "start": "326250",
    "end": "328860"
  },
  {
    "text": "So when you call .sayHi(), it\nlooks at kpugh, looks at the",
    "start": "328860",
    "end": "332770"
  },
  {
    "text": "type, says, that's of type\nStaff6.01, goes to class",
    "start": "332770",
    "end": "336509"
  },
  {
    "text": "Staff6.01, finds the definition\nfor sayHi(), and",
    "start": "336510",
    "end": "339790"
  },
  {
    "text": "then executes this code.",
    "start": "339790",
    "end": "341640"
  },
  {
    "text": "Hopefully, that all\nmade sense.",
    "start": "341640",
    "end": "343040"
  },
  {
    "start": "343040",
    "end": "345560"
  },
  {
    "text": "Now, I want to talk\nabout self.",
    "start": "345560",
    "end": "348480"
  },
  {
    "text": "And you might say, Kendra, I\ndon't understand where that",
    "start": "348480",
    "end": "352590"
  },
  {
    "text": "comes into play.",
    "start": "352590",
    "end": "353400"
  },
  {
    "text": "And you didn't even\nuse it over here!",
    "start": "353400",
    "end": "355790"
  },
  {
    "text": "If you're familiar with C++ or\nJava, self is a lot like this.",
    "start": "355790",
    "end": "359880"
  },
  {
    "text": "Self is an implicit argument\npassed in here.",
    "start": "359880",
    "end": "362980"
  },
  {
    "text": "Even though you specify zero\narguments, it's considered the",
    "start": "362980",
    "end": "365830"
  },
  {
    "text": "first argument.",
    "start": "365830",
    "end": "366849"
  },
  {
    "text": "And you'll probably see a lot\ntype errors when you're first",
    "start": "366850",
    "end": "369090"
  },
  {
    "text": "programming in object oriented\nprogramming that say that",
    "start": "369090",
    "end": "370910"
  },
  {
    "text": "you've either passed in too\nmany or too few arguments.",
    "start": "370910",
    "end": "373580"
  },
  {
    "text": "It has to do with this\ndefinition, with self.",
    "start": "373580",
    "end": "378340"
  },
  {
    "text": "Self says, I am talking\nabout myself.",
    "start": "378340",
    "end": "382750"
  },
  {
    "text": "That's not particularly\nintuitive.",
    "start": "382750",
    "end": "384220"
  },
  {
    "text": "But I'll try to explain\na little bit more.",
    "start": "384220",
    "end": "386580"
  },
  {
    "text": "When kpugh calls .sayHi(),\nsayHi() always has an implicit",
    "start": "386580",
    "end": "393849"
  },
  {
    "text": "reference to whatever\ncalled it.",
    "start": "393850",
    "end": "397810"
  },
  {
    "text": "When you look at this code,\nother instances can call this",
    "start": "397810",
    "end": "402889"
  },
  {
    "text": "code, right?",
    "start": "402890",
    "end": "403520"
  },
  {
    "text": "If I had an instance of Adam\nHartz or an instance of Ike",
    "start": "403520",
    "end": "407370"
  },
  {
    "text": "Chuang they would also have\naccess to the method sayHi().",
    "start": "407370",
    "end": "414380"
  },
  {
    "text": "And when they called sayHi(),\nsayHi() would point back to",
    "start": "414380",
    "end": "418040"
  },
  {
    "text": "the class definition, but also\nhave a reference to whatever",
    "start": "418040",
    "end": "421700"
  },
  {
    "text": "instance called it.",
    "start": "421700",
    "end": "423500"
  },
  {
    "text": "So when you substitute in this\nself, you substitute in",
    "start": "423500",
    "end": "429530"
  },
  {
    "text": "whatever instance called\nthe method.",
    "start": "429530",
    "end": "432900"
  },
  {
    "text": "That doesn't seem particularly\nuseful right now because that",
    "start": "432900",
    "end": "435225"
  },
  {
    "text": "class definition does not\nactually make any use of the",
    "start": "435225",
    "end": "438910"
  },
  {
    "text": "self, or the ability to use\nunique instances of an object",
    "start": "438910",
    "end": "445830"
  },
  {
    "text": "as sort of unique storage\ncontainers.",
    "start": "445830",
    "end": "450220"
  },
  {
    "text": "I'm kpugh.",
    "start": "450220",
    "end": "450910"
  },
  {
    "text": "I'm different from Adam Hartz.",
    "start": "450910",
    "end": "453520"
  },
  {
    "text": "And therefore, I should be\nable to have different",
    "start": "453520",
    "end": "456090"
  },
  {
    "text": "attributes, or different\nmethods, or things that act",
    "start": "456090",
    "end": "458720"
  },
  {
    "text": "slightly differently from the\nway they do for Adam.",
    "start": "458720",
    "end": "462370"
  },
  {
    "text": "I'm going to look at a revised\ndefinition of class Staff6.01,",
    "start": "462370",
    "end": "465139"
  },
  {
    "text": "and that definition will use\nself in a way that indicates",
    "start": "465140",
    "end": "470180"
  },
  {
    "text": "that you can have different\nfunctionality",
    "start": "470180",
    "end": "475750"
  },
  {
    "text": "for different instances.",
    "start": "475750",
    "end": "477000"
  },
  {
    "start": "477000",
    "end": "479300"
  },
  {
    "text": "It's right here.",
    "start": "479300",
    "end": "481870"
  },
  {
    "text": "Class Staff6.01--",
    "start": "481870",
    "end": "483650"
  },
  {
    "text": "it looks really similar.",
    "start": "483650",
    "end": "484880"
  },
  {
    "text": "In fact, the first two lines\nare exactly the same.",
    "start": "484880",
    "end": "487360"
  },
  {
    "text": "We've got a class attribute.",
    "start": "487360",
    "end": "488909"
  },
  {
    "text": "That means that every instance\nof this class is going to have",
    "start": "488910",
    "end": "492180"
  },
  {
    "text": "this attribute because it's\na class attribute.",
    "start": "492180",
    "end": "495850"
  },
  {
    "text": "If I want different\ninstantiations of my class to",
    "start": "495850",
    "end": "499390"
  },
  {
    "text": "have different properties,\nthen I need to explicitly",
    "start": "499390",
    "end": "503760"
  },
  {
    "text": "address the initialization\nof those properties.",
    "start": "503760",
    "end": "506940"
  },
  {
    "text": "In Python, when we want\nto do that, we",
    "start": "506940",
    "end": "509780"
  },
  {
    "text": "define the method __init__.",
    "start": "509780",
    "end": "511750"
  },
  {
    "text": "__init__ is a very\nspecial method.",
    "start": "511750",
    "end": "513380"
  },
  {
    "text": "It's got these underscores.",
    "start": "513380",
    "end": "515979"
  },
  {
    "text": "I think it's a protected\nkeyword.",
    "start": "515980",
    "end": "520669"
  },
  {
    "text": "And it always has the format\n\"self,\" and then whatever",
    "start": "520669",
    "end": "523830"
  },
  {
    "text": "arguments you want to\npass in when you're",
    "start": "523830",
    "end": "525890"
  },
  {
    "text": "instantiating an object.",
    "start": "525890",
    "end": "527140"
  },
  {
    "start": "527140",
    "end": "530140"
  },
  {
    "text": "__init__ is not exactly\na constructor.",
    "start": "530140",
    "end": "531910"
  },
  {
    "text": "But for those of you that are\nfamiliar with C++ and Java, it",
    "start": "531910",
    "end": "536209"
  },
  {
    "text": "acts like a constructor.",
    "start": "536210",
    "end": "537730"
  },
  {
    "text": "Immediately after the object is",
    "start": "537730",
    "end": "541310"
  },
  {
    "text": "constructed, __init__ is called.",
    "start": "541310",
    "end": "543200"
  },
  {
    "text": "And all the set up that\nis required to set",
    "start": "543200",
    "end": "545140"
  },
  {
    "text": "up the object happens.",
    "start": "545140",
    "end": "547660"
  },
  {
    "text": "So any time you instantiate an\nobject, all of these things",
    "start": "547660",
    "end": "551009"
  },
  {
    "text": "are going to be executed.",
    "start": "551010",
    "end": "551830"
  },
  {
    "text": "Or all the things\nunder __init__",
    "start": "551830",
    "end": "553200"
  },
  {
    "text": "is going to be executed.",
    "start": "553200",
    "end": "555290"
  },
  {
    "text": "In particular, we're going to\nset the attribute greeting to",
    "start": "555290",
    "end": "559800"
  },
  {
    "text": "whatever argument we\npassed in when we",
    "start": "559800",
    "end": "563149"
  },
  {
    "text": "instantiated the object.",
    "start": "563150",
    "end": "564400"
  },
  {
    "start": "564400",
    "end": "566840"
  },
  {
    "text": "So every instance that we create\nof this class is going",
    "start": "566840",
    "end": "570470"
  },
  {
    "text": "to have the class\nattribute, room.",
    "start": "570470",
    "end": "572360"
  },
  {
    "text": "They're all going to be\nin the same room.",
    "start": "572360",
    "end": "574579"
  },
  {
    "text": "But they're also going\nto have a greeting.",
    "start": "574580",
    "end": "575860"
  },
  {
    "text": "And you have the option of\nspecifying the greeting to be",
    "start": "575860",
    "end": "578060"
  },
  {
    "text": "whatever you want.",
    "start": "578060",
    "end": "580920"
  },
  {
    "text": "We're going to make use of this\nin the method sayHi(),",
    "start": "580920",
    "end": "585019"
  },
  {
    "text": "which still only takes the\nargument self, or the",
    "start": "585020",
    "end": "587910"
  },
  {
    "text": "reference to whatever object\ncalled the method",
    "start": "587910",
    "end": "591560"
  },
  {
    "text": "in the first place.",
    "start": "591560",
    "end": "594080"
  },
  {
    "text": "That reference is going to\nget substituted in here.",
    "start": "594080",
    "end": "597640"
  },
  {
    "text": "So no matter which object calls\nthe method, you will",
    "start": "597640",
    "end": "603050"
  },
  {
    "text": "have access to its particular\ngreeting using this syntax.",
    "start": "603050",
    "end": "608240"
  },
  {
    "text": "Let's walk through an example.",
    "start": "608240",
    "end": "609490"
  },
  {
    "start": "609490",
    "end": "612200"
  },
  {
    "text": "Let's say I make an example\nof Adam Hartz, and he is a",
    "start": "612200",
    "end": "616470"
  },
  {
    "text": "Staff6.01 member.",
    "start": "616470",
    "end": "617410"
  },
  {
    "text": "And his greeting is going to be\n\"hi.\" Likewise, let's make",
    "start": "617410",
    "end": "621470"
  },
  {
    "text": "another instance of me using the\nnew Staff6.01 definition.",
    "start": "621470",
    "end": "625329"
  },
  {
    "text": "Make sure you type this\nin because it's not",
    "start": "625330",
    "end": "626600"
  },
  {
    "text": "going to work otherwise.",
    "start": "626600",
    "end": "629089"
  },
  {
    "text": "And make my greeting \"HELLO,\"\nas opposed to just \"hi.\"",
    "start": "629090",
    "end": "634770"
  },
  {
    "text": "If you call the sayHi() method\nusing hartz, then you should",
    "start": "634770",
    "end": "640820"
  },
  {
    "text": "get a different result then\nwhen you call the sayHi()",
    "start": "640820",
    "end": "642850"
  },
  {
    "text": "method using kpugh.",
    "start": "642850",
    "end": "645290"
  },
  {
    "text": "But if you call the\nroom method--",
    "start": "645290",
    "end": "648060"
  },
  {
    "text": "or, excuse me.",
    "start": "648060",
    "end": "649630"
  },
  {
    "text": "If you were after the room\nattribute of both instances,",
    "start": "649630",
    "end": "654700"
  },
  {
    "text": "then you should get the same\nresult because this is the",
    "start": "654700",
    "end": "656940"
  },
  {
    "text": "class attribute definition,\nwhereas this attribute is",
    "start": "656940",
    "end": "662690"
  },
  {
    "text": "specific to each instance.",
    "start": "662690",
    "end": "663940"
  },
  {
    "start": "663940",
    "end": "667370"
  },
  {
    "text": "That's all I have to say for\nnow about object oriented",
    "start": "667370",
    "end": "669210"
  },
  {
    "text": "programming.",
    "start": "669210",
    "end": "669840"
  },
  {
    "text": "In my next video, I'll start\nto talk about inheritance,",
    "start": "669840",
    "end": "672290"
  },
  {
    "text": "which is another really\nimportant property in 6.01 and",
    "start": "672290",
    "end": "675430"
  },
  {
    "text": "also object oriented programming\nin Python, and",
    "start": "675430",
    "end": "678060"
  },
  {
    "text": "also has some slip ups.",
    "start": "678060",
    "end": "678920"
  },
  {
    "text": "So I'd like to talk to\nyou about those next.",
    "start": "678920",
    "end": "680839"
  },
  {
    "start": "680840",
    "end": "682090"
  }
]