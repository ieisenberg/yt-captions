[
  {
    "text": "[SQUEAKING] [RUSTLING] [CLICKING] ",
    "start": "0",
    "end": "12690"
  },
  {
    "text": "YAEL T. KALAI: Let me first\nstart with some administration. So actually, some of you noticed\nthat the pset problem number two",
    "start": "12690",
    "end": "20585"
  },
  {
    "text": "B, there is a slight problem. I posted a comment about\nthis in the website.",
    "start": "20585",
    "end": "27110"
  },
  {
    "text": " So there's an\nassumption I want you to make for problem\ntwo B. Just look",
    "start": "27110",
    "end": "33570"
  },
  {
    "text": "at the website and\nthe announcement. If you have any\nquestions, come to me. So that's one thing. The other thing is in--",
    "start": "33570",
    "end": "40710"
  },
  {
    "text": "well, next week is Thanksgiving,\nso happy Thanksgiving. And the week after, I'm actually\naway giving some keynote talk.",
    "start": "40710",
    "end": "49150"
  },
  {
    "text": "But actually, it\nworked out really well because the\ntopic of that lecture",
    "start": "49150",
    "end": "56040"
  },
  {
    "text": "is going to be\nabout what's called BARGs, or batch arguments. That would lead us kind\nof in the final class",
    "start": "56040",
    "end": "62880"
  },
  {
    "text": "to get our SNARGs that we\nwere kind of building for. And that lecture covers a work\nby three authors, Jain Jin,",
    "start": "62880",
    "end": "77645"
  },
  {
    "text": "Choudhuri, Jain Jin. And Jain Jin is going to come\nhere and present the results.",
    "start": "77645",
    "end": "83427"
  },
  {
    "text": "So you'll get the author kind\nof presenting the relevant work. And then the final class,\nwe'll kind wrap everything up and show you how to get what we\nworked for this entire semester.",
    "start": "83427",
    "end": "93109"
  },
  {
    "text": "So just of what we're\ngoing to focus on for today-- so any questions\nabout administration,",
    "start": "93110",
    "end": "99030"
  },
  {
    "text": "about questions from\nlast class, anything before we go into the material? ",
    "start": "99030",
    "end": "105910"
  },
  {
    "text": "Yeah? AUDIENCE: Yeah, when I'm\ndoing the homework, I realized there's one thing.",
    "start": "105910",
    "end": "110979"
  },
  {
    "text": "I'm not sure if that's something\nyou changed with gk alpha. [INAUDIBLE] Is there any way\nto get subtraction to work?",
    "start": "110980",
    "end": "121022"
  },
  {
    "text": "YAEL T. KALAI: So let's talk. Come to me after class. OK? OK. OK.",
    "start": "121022",
    "end": "126790"
  },
  {
    "text": "Any other questions? We'll talk about\nthis after class. So what's the plan for today?",
    "start": "126790",
    "end": "133190"
  },
  {
    "text": "Or where are we kind\nof left off last class and where we're heading\nfor today, so last class",
    "start": "133190",
    "end": "140239"
  },
  {
    "text": "we defined the\nFiat-Shamir paradigm. So kind of from the\nbeginning, what did we do? We showed this\ninteractive protocols.",
    "start": "140240",
    "end": "147379"
  },
  {
    "text": "And then we showed,\nfor example, GKR, which is only for bounded\ndepth computations.",
    "start": "147380",
    "end": "152730"
  },
  {
    "text": "Then we showed you can build\nfrom that a PCP and then use that PCP to shrink\nit using cryptography",
    "start": "152730",
    "end": "160400"
  },
  {
    "text": "and get actually four message-- That was the key in\nMicali protocol--",
    "start": "160400",
    "end": "165530"
  },
  {
    "text": "protocol, proofs, or arguments,\ncomputationally sound proofs, for all of NP\nwhere it's very succinct.",
    "start": "165530",
    "end": "173040"
  },
  {
    "text": "So we can take any\nwitness for NP. And instead of sending this\nwitness, which is long,",
    "start": "173040",
    "end": "178800"
  },
  {
    "text": "I don't know, poly\nn bits, I'm going to shrink it to be an\ninteractive protocol, so four messages, to get it--",
    "start": "178800",
    "end": "185660"
  },
  {
    "text": "the number of bits is\nproportional to the security parameter, which can\nbe much, much smaller.",
    "start": "185660",
    "end": "190958"
  },
  {
    "text": "So that's what we showed. That was the\nKilian-Micali protocol, but that was for messages. So now, we're kind of\ntowards the homestretch.",
    "start": "190958",
    "end": "197220"
  },
  {
    "text": "We want to get around\nthese four messages and reduce it down\nto just one message.",
    "start": "197220",
    "end": "202490"
  },
  {
    "text": "So how do we do that? So last class, we defined\nthis paradigm called the Fiat-Shamir paradigm.",
    "start": "202490",
    "end": "208500"
  },
  {
    "text": "It was introduced\nexactly for this purpose to eliminate interaction\nfrom interactive protocols",
    "start": "208500",
    "end": "216650"
  },
  {
    "text": "by essentially replacing the\nverifier with a hash function. And now, there was a question.",
    "start": "216650",
    "end": "223290"
  },
  {
    "text": "It's a very nice, very simple,\nvery efficient kind of paradigm, very elegant, in my opinion. But then there's a\nquestion, is it sound?",
    "start": "223290",
    "end": "229319"
  },
  {
    "text": "If you start with an\ninteractive protocol that you can prove\nsoundness, when you apply the\nFiat-Shamir paradigm,",
    "start": "229320",
    "end": "234360"
  },
  {
    "text": "is the protocol or\nthe proof still sound? That's the question. And what we proved\nfor this protocol,",
    "start": "234360",
    "end": "241230"
  },
  {
    "text": "Kilian-Micali protocol,\nis it is sound if you apply the\nFiat-Shamir paradigm. But this hash function\nis a random oracle.",
    "start": "241230",
    "end": "250560"
  },
  {
    "text": "So instead of being actually\nan explicit kind of circuit, if we think of it as a\ncompletely random function,",
    "start": "250560",
    "end": "257209"
  },
  {
    "text": "that both parties have oracle\naccess to, then it's sound. But in real world,\nthere is no kind",
    "start": "257209",
    "end": "262718"
  },
  {
    "text": "of random oracles in the sky\nthat all parties have access to. We have to use specific circuits\nto replace this hash function.",
    "start": "262718",
    "end": "270360"
  },
  {
    "text": "And then there was\nthis question of, when we actually use\nthe Fiat-Shamir paradigm with a specific circuit,\nwith a specific hash, that's",
    "start": "270360",
    "end": "280460"
  },
  {
    "text": "computable by a specific\nkind of circuit, is it sound? And that was kind of\nopen for a long time.",
    "start": "280460",
    "end": "288789"
  },
  {
    "text": "It was a very, very\nimportant open problem because Fiat-Shamir was used\nall over the place in practice. So understanding whether it's\nsecure or not is very important.",
    "start": "288790",
    "end": "296700"
  },
  {
    "text": "And we could only analyze it in\nthe random oracle model, so not",
    "start": "296700",
    "end": "301910"
  },
  {
    "text": "in real world settings. And as I pointed out last\ntime, the random oracle model",
    "start": "301910",
    "end": "307370"
  },
  {
    "text": "actually worked out to\nbe a very good proxy. So none of the schemes\nin practice actually that we proved security\nin the random oracle model",
    "start": "307370",
    "end": "313490"
  },
  {
    "text": "turned out to be broken. So it turns out it's a very,\nvery good proxy for security.",
    "start": "313490",
    "end": "319250"
  },
  {
    "text": "But still, at least for\nme as a theoretician, I want to understand,\nwhen we replace it",
    "start": "319250",
    "end": "326270"
  },
  {
    "text": "with an actual function,\nan actual program, why is it secure. And frankly, I still\ndon't understand",
    "start": "326270",
    "end": "333020"
  },
  {
    "text": "why it's such a good proxy. I have to say. It's surprising to me\nthat never, ever we had--",
    "start": "333020",
    "end": "338690"
  },
  {
    "text": "it's really, really\napproximates security very well.",
    "start": "338690",
    "end": "346920"
  },
  {
    "text": "Even though, as I mentioned,\nwe do have counterexamples. We do have examples contrived,\nnot real world examples,",
    "start": "346920",
    "end": "353010"
  },
  {
    "text": "but contrived examples\nwhere the protocol are secure in the random\noracle model and not secure",
    "start": "353010",
    "end": "358970"
  },
  {
    "text": "when applied Fiat-Shamir\nAnd actually, interestingly, Kilian-Micali is one of them.",
    "start": "358970",
    "end": "364160"
  },
  {
    "text": "It's actually one\nof the protocols where actually it\nwas proven that,",
    "start": "364160",
    "end": "369419"
  },
  {
    "text": "if you use a certain\nhash function-- collision resistant,\nbut certain hash",
    "start": "369420",
    "end": "374550"
  },
  {
    "text": "function-- then actually\nyou can't prove security. No matter which\nspecific function you use for the Fiat-Shamir\nfunction, it will not be secure.",
    "start": "374550",
    "end": "385289"
  },
  {
    "text": "But this specific hash function,\nwhich is collision resistant, is contrived. So we still don't have real\nworld natural application",
    "start": "385290",
    "end": "392790"
  },
  {
    "text": "of where security was proven\nin the random oracle model but turned out to be\nfalse in the real world.",
    "start": "392790",
    "end": "398000"
  },
  {
    "text": " So that's where\nwe're heading to,",
    "start": "398000",
    "end": "404180"
  },
  {
    "text": "trying to prove the\nsecurity of or the soundness of the Fiat-Shamir paradigm.",
    "start": "404180",
    "end": "409190"
  },
  {
    "text": "And along the way,\nwhat we did is I defined a certain protocol,\nwhich is zero knowledge.",
    "start": "409190",
    "end": "416070"
  },
  {
    "text": "We kind of took a detour,\ntalked about zero knowledge. And we looked at the specific\nprotocols, zero knowledge",
    "start": "416070",
    "end": "421099"
  },
  {
    "text": "protocol, for Hamiltonicity,\nfor whether a graph",
    "start": "421100",
    "end": "426440"
  },
  {
    "text": "has a Hamiltonian cycle or not. That's an NP complete problem. And so here is just a recap\nbecause we'll look at it again",
    "start": "426440",
    "end": "433490"
  },
  {
    "text": "today. So here is a proof, a\nthree-message proof system.",
    "start": "433490",
    "end": "438870"
  },
  {
    "text": "The prover is trying to\nprove to the verifier that a graph G has\na Hamiltonian cycle.",
    "start": "438870",
    "end": "444470"
  },
  {
    "text": "And we want to do it\nin zero knowledge, so in a proof that\ngives no information. And the way we did it, we said,\nOK, the prover, so the prover",
    "start": "444470",
    "end": "452150"
  },
  {
    "text": "has a Hamiltonian cycle. He does not want to\nreveal any information about this Hamiltonian\ncycle to the verifier.",
    "start": "452150",
    "end": "458060"
  },
  {
    "text": "What would the prover do? He will choose a\nrandom permutation, pi.",
    "start": "458060",
    "end": "463430"
  },
  {
    "text": "He will commit, put in\na safe, locked safe, only the Hamiltonian\ncycle of pi of g.",
    "start": "463430",
    "end": "472810"
  },
  {
    "text": "So if c is the path\nHamiltonian cycle in g, he will compute pi of the cycle,\nso the cycle inside pi of g.",
    "start": "472810",
    "end": "483590"
  },
  {
    "text": "And then he's going\nto get a random bit. And he's going to\ngive an answer. What is the answer?",
    "start": "483590",
    "end": "489110"
  },
  {
    "text": "If the bit is zero, he's\njust going to open the cycle.",
    "start": "489110",
    "end": "494229"
  },
  {
    "text": "Hi. He's just going\nto open the cycle.",
    "start": "494230",
    "end": "499419"
  },
  {
    "text": "Or maybe I should say pi of c. So he's going to open only the\nplaces where there's a cycle.",
    "start": "499420",
    "end": "507182"
  },
  {
    "text": "And the guy is\ngoing to check that, yes, it's an, indeed, cycle. But we need to make sure\nthat the cycle has something",
    "start": "507182",
    "end": "513740"
  },
  {
    "text": "to do with the graph itself. So if the b is 1,\nthen we check, indeed,",
    "start": "513740",
    "end": "520280"
  },
  {
    "text": "that you give the permutation. You do not give the\npermitted cycle. Otherwise, it will\ngive information.",
    "start": "520280",
    "end": "526560"
  },
  {
    "text": "So you only give\nthem the permutation. And you open only\nnonedges in pi of g.",
    "start": "526560",
    "end": "533870"
  },
  {
    "text": "So now you know everywhere in\npi of g that there is no edge.",
    "start": "533870",
    "end": "539029"
  },
  {
    "text": "In this commitment,\nthere is no edges. So again, let me just\nemphasize to recap.",
    "start": "539030",
    "end": "544600"
  },
  {
    "text": "This commitment, if n is the\nnumber of nodes in the graph,",
    "start": "544600",
    "end": "550940"
  },
  {
    "text": "it's committing to\nn squared values where there's a 1 if there's an\nedge, 0 if there's not an edge.",
    "start": "550940",
    "end": "556269"
  },
  {
    "text": "For any ij, it says 01 whether\nit's an edge or not an edge. And if b equals 0, we\nonly open the places",
    "start": "556270",
    "end": "564460"
  },
  {
    "text": "where there's a\nHamiltonian cycle. We check that everything\nthere should be 1. And you check that\nit kind of closes,",
    "start": "564460",
    "end": "569839"
  },
  {
    "text": "that it corresponds to a cycle. And if b equals 1, you give\nthe entire permutation,",
    "start": "569840",
    "end": "575029"
  },
  {
    "text": "and you open the nonedges. Now, the claim was that this\nis, indeed, zero knowledge.",
    "start": "575030",
    "end": "580970"
  },
  {
    "text": "And the intuition was,\nwell, if you open zero, he doesn't learn\nanything because he just gets a random cycle.",
    "start": "580970",
    "end": "586323"
  },
  {
    "text": "It has nothing to\ndo with the graph. Just any random cycle,\nthat's what he sees. He could have information\nabout the graph.",
    "start": "586323",
    "end": "593690"
  },
  {
    "text": "And if he gets b equals\n1, then what does he see? A random permutation and a\nbunch of openings of zero, that's no information.",
    "start": "593690",
    "end": "601680"
  },
  {
    "text": "And as we said, the\nsoundness here is only half. That's the problem. So with the half, you can cheat. Because if you guessed--",
    "start": "601680",
    "end": "607680"
  },
  {
    "text": "a cheating prover,\nI can guess b. And if I guess b, I can\nat least cheat on that b.",
    "start": "607680",
    "end": "613590"
  },
  {
    "text": " Even if g doesn't have\na Hamiltonian cycle,",
    "start": "613590",
    "end": "619720"
  },
  {
    "text": "I can always answer correctly\non one of them, but not both. So if I guess your\nb, I can answer.",
    "start": "619720",
    "end": "626190"
  },
  {
    "text": "I can cheat you. So this gives only\nsoundness half. This is just a recap.",
    "start": "626190",
    "end": "632870"
  },
  {
    "text": "I motivated this to\nshow that this is not even secure in the\nrandom oracle model. So actually, to get security\neven in the random oracle model,",
    "start": "632870",
    "end": "639890"
  },
  {
    "text": "you need to repeat in parallel. So today, when I say\nnow P, V, like this,",
    "start": "639890",
    "end": "647290"
  },
  {
    "text": "so when I say like\nthe protocol P, V, I want you to-- throughout\nthis class, let's think of it",
    "start": "647290",
    "end": "653440"
  },
  {
    "text": "as parallel repetition of this\nwith security parameter lambda",
    "start": "653440",
    "end": "662490"
  },
  {
    "text": "copies. So now, I mean, some of the\nstuff is really not good for us. That's not what we want.",
    "start": "662490",
    "end": "668010"
  },
  {
    "text": "So think of it that we repeat\nthis in parallel security parameter number of times.",
    "start": "668010",
    "end": "674130"
  },
  {
    "text": "So in other words, the\nprover lambda number of times each time chooses a fresh\npermutation pi, commits.",
    "start": "674130",
    "end": "682269"
  },
  {
    "text": "So he does this lambda times\neach time with a new permutation pi. This is very important.",
    "start": "682270",
    "end": "687460"
  },
  {
    "text": "And people see\nwhy it's important that the permutation\nis fresh each time? If you use the same permutation\nand you open b0, b1,",
    "start": "687460",
    "end": "694940"
  },
  {
    "text": "you learn everything. So each time you give a fresh\nkind of random permutation, you send it lambda times,\nyou get a b for each one.",
    "start": "694940",
    "end": "703509"
  },
  {
    "text": "And now, you send a\nmessage for each one.  So that was the protocol.",
    "start": "703510",
    "end": "710460"
  },
  {
    "text": "Now, we proved that it's secure\nin the random oracle model. Actually, we proved that\nany comes around protocol",
    "start": "710460",
    "end": "719310"
  },
  {
    "text": "that has negligible soundness\nis secure in the random oracle model. We showed that last time.",
    "start": "719310",
    "end": "724330"
  },
  {
    "text": "So it's secure in the\nrandom oracle model. And now, there is a question, is\nit secure in the standard model",
    "start": "724330",
    "end": "730819"
  },
  {
    "text": "when we use Fiat-Shamir? And what we're going to show\ntoday is, yes, it is secure.",
    "start": "730820",
    "end": "738282"
  },
  {
    "text": "So that's kind of\nthe first thing. We're going to show that\nthis protocol, P and V-- and, again, when I say P and\nV throughout today's class,",
    "start": "738283",
    "end": "744660"
  },
  {
    "text": "it's the parallel\nrepeated version. So we're going to show that P\nand V are secure when you apply",
    "start": "744660",
    "end": "750680"
  },
  {
    "text": "Fiat-Shamir in the standard\nmodel for some commitment, not every commitment.",
    "start": "750680",
    "end": "755765"
  },
  {
    "text": "So we'll open this\nbox a little bit and show that this is a very\nnatural commitment scheme.",
    "start": "755765",
    "end": "761610"
  },
  {
    "text": "But with that\ncommitment scheme, we can argue that\nthis is secure when the hash function--\nwe'll actually",
    "start": "761610",
    "end": "767090"
  },
  {
    "text": "construct a hash function. I'll give you an\nexact hash function and say, if you use this hash\nfunction for the Fiat-Shamir,",
    "start": "767090",
    "end": "772770"
  },
  {
    "text": "you will get security\nor soundness. But this hash\nfunction, to argue,",
    "start": "772770",
    "end": "778204"
  },
  {
    "text": "you need to assume\nsomething about the hash-- I mean, this hash function\nassumes some cryptography.",
    "start": "778205",
    "end": "783890"
  },
  {
    "text": "And the cryptography\nit assumes is the existence of a fully\nhomomorphic encryption. I'll define what that is.",
    "start": "783890",
    "end": "789830"
  },
  {
    "text": "But not just a fully\nhomomorphic encryption, we'll assume, also, that\nit's circular secure fully",
    "start": "789830",
    "end": "795600"
  },
  {
    "text": "homomorphic encryption. I'll define what\nthat is as well. I just want to say\nactually, today, we don't need the circular\nsecure version.",
    "start": "795600",
    "end": "801670"
  },
  {
    "text": "We know how to get rid of it. But what I'm going to explain\ntoday does use this version. It's just simpler.",
    "start": "801670",
    "end": "806705"
  },
  {
    "text": " We believe this is true. There's an instantiation based\non circular secure Learning",
    "start": "806705",
    "end": "814200"
  },
  {
    "text": "With Error, LWE. But we don't need to\nget into these details. So that's what we're going to do\nin the first part of the class.",
    "start": "814200",
    "end": "821880"
  },
  {
    "text": "And the second\npart of the class-- so now, you can say, OK, let's\nsay we prove Fiat-Shamir. Why am I obsessed\nwith this protocol?",
    "start": "821880",
    "end": "827640"
  },
  {
    "text": "And let's say we prove\nFiat-Shamir for this protocol. So what? Why should you be engaged? So let me try to give you a\nmotivation for you to stay awake",
    "start": "827640",
    "end": "834600"
  },
  {
    "text": "and listen to me. So why is it? So this protocol, in\nparticular, is very important.",
    "start": "834600",
    "end": "840700"
  },
  {
    "text": "Why? What I'm going to show is\nwhen you apply Fiat-Shamir to this protocol, you get what's\ncalled a Noninteractive Zero",
    "start": "840700",
    "end": "849089"
  },
  {
    "text": "Knowledge proof, NIZK for short. So once we do that for this\nprotocol, because it was zero",
    "start": "849090",
    "end": "857245"
  },
  {
    "text": "knowledge, we can argue that,\nwhen you apply Fiat-Shamir, you get noninteractive\nzero knowledge. And to get noninteractive zero\nknowledge based on lattices",
    "start": "857245",
    "end": "864450"
  },
  {
    "text": "was an open question for\na very, very long time. And this was resolved\nin this paper",
    "start": "864450",
    "end": "869455"
  },
  {
    "text": "that I'm going to\npresent, in this work that I'm going to present to you\nby Canetti, Lombardi and Wichs.",
    "start": "869455",
    "end": "876640"
  },
  {
    "text": "So one of the\nmotivating examples is that we get this\nnoninteractive zero knowledge.",
    "start": "876640",
    "end": "882279"
  },
  {
    "text": "That's one. But the other motivating example\nis that actually this technique",
    "start": "882280",
    "end": "887880"
  },
  {
    "text": "is much more general. The technique of Fiat-Shamir\nthat I'm going to show you is much more general than\njust for this protocol.",
    "start": "887880",
    "end": "894530"
  },
  {
    "text": "Actually, it's a very\ngeneral technique that can be used for many protocols. And in particular, we used it\nlater, this exact technique.",
    "start": "894530",
    "end": "901690"
  },
  {
    "text": "And I'm going to\ntry to show you how it can be used to show that the\nG-CARE protocol that we studied",
    "start": "901690",
    "end": "908520"
  },
  {
    "text": "in the beginning\nactually is secure.  When you apply\nFiat-Shamir to it,",
    "start": "908520",
    "end": "915160"
  },
  {
    "text": "you get security under\nlearning with error, or FHE. Again, as I mentioned,\nthis proven security",
    "start": "915160",
    "end": "920250"
  },
  {
    "text": "can be prevented. I'm just showing you the result\nthat uses it for simplicity. So it's not just for this\nprotocol to get NIZK.",
    "start": "920250",
    "end": "928460"
  },
  {
    "text": "You can actually use\nit to get SNARGs. And moreover, what you'll\nsee after Thanksgiving",
    "start": "928460",
    "end": "934380"
  },
  {
    "text": "that Jain Jin is\ngoing to present, he's going to use\nthis exact same tool to get batch arguments for NP.",
    "start": "934380",
    "end": "940870"
  },
  {
    "text": "So this kind of Fiat-Shamir\nis baked into all our results",
    "start": "940870",
    "end": "946270"
  },
  {
    "text": "almost. So it's actually very\ngeneral and nice. Yes.",
    "start": "946270",
    "end": "952166"
  },
  {
    "text": "AUDIENCE: How does\nthat relate to-- because last time, we went\na little bit over the result",
    "start": "952166",
    "end": "960279"
  },
  {
    "text": "of [INAUDIBLE]-- YAEL T. KALAI: Great question. Great, great, great question.",
    "start": "960280",
    "end": "965840"
  },
  {
    "text": "OK. Let me repeat your\nquestion because you have a great question. So last time, I\nkind of showed you",
    "start": "965840",
    "end": "971067"
  },
  {
    "text": "that there's actually a tension. If you have an interactive\nproof that is zero knowledge, then I kind of gave you this\nhigh-level intuition that,",
    "start": "971067",
    "end": "980700"
  },
  {
    "text": "if it is really zero knowledge,\nyou cannot apply Fiat-Shamir to it. It will fail.",
    "start": "980700",
    "end": "987010"
  },
  {
    "text": "And here, I'm saying,\noh, we're going to apply Fiat-Shamir to it. And not only that,\nwe're going to get",
    "start": "987010",
    "end": "993650"
  },
  {
    "text": "noninteractive zero knowledge. It's like, wait, wait,\nwait, wait, wait. Last time, you said you\ncan't get your knowledge.",
    "start": "993650",
    "end": "999410"
  },
  {
    "text": "And I'm kind of\ncontradicting myself here. So again, let me repeat it just\nto make sure we're all on board.",
    "start": "999410",
    "end": "1006410"
  },
  {
    "text": "Last time, I said a protocol\nthat is zero knowledge cannot be Fiat-Shamir secure.",
    "start": "1006410",
    "end": "1012970"
  },
  {
    "text": "Now, I'm saying, guess what? This protocol is\nFiat-Shamir secure. So first of all,\nindeed, I have no reason",
    "start": "1012970",
    "end": "1022709"
  },
  {
    "text": "to believe that this protocol,\nwhen you repeat it in parallel, that it's zero knowledge.",
    "start": "1022710",
    "end": "1027880"
  },
  {
    "text": "We know that it's zero knowledge\nif without parallel repetition.",
    "start": "1027880",
    "end": "1035150"
  },
  {
    "text": "We know that it's zero knowledge\nif you repeat it sequentially. If you repeat it in\nparallel, we don't",
    "start": "1035150",
    "end": "1040579"
  },
  {
    "text": "know that it's zero\nknowledge anymore. That's first. Second, next thing you\ncan say is, oh, so now we",
    "start": "1040579",
    "end": "1047760"
  },
  {
    "text": "know that it's not\nzero knowledge. Almost, almost. Actually, the result does show\nthat parallel repetition does",
    "start": "1047760",
    "end": "1055230"
  },
  {
    "text": "not preserve zero knowledge. But actually, it's\nnot going to be completely because I'm going to\nchange the commitment in a way",
    "start": "1055230",
    "end": "1062400"
  },
  {
    "text": "that you'll see in a\nminute, so not quite. But then you can say, OK, but\nhow do you get NIZK out of it?",
    "start": "1062400",
    "end": "1071009"
  },
  {
    "text": "It seems completely opposite. Because I just said\nFiat-Shamir in contradictory of zero knowledge.",
    "start": "1071010",
    "end": "1076280"
  },
  {
    "text": "And now, I'm saying\nyou apply Fiat-Shamir, and you get zero knowledge. OK, so what we get is\nnoninteractive zero knowledge.",
    "start": "1076280",
    "end": "1085480"
  },
  {
    "text": "And noninteractive zero\nknowledge, the simulator, I didn't define what it is.",
    "start": "1085480",
    "end": "1091070"
  },
  {
    "text": "So it's hard. I'll explain it as I go. But the simulator has more\npower than the cheating prover.",
    "start": "1091070",
    "end": "1098770"
  },
  {
    "text": "Remember, the\nreason I said that, if you have a zero\nknowledge protocol, why can't you apply Fiat-Shamir?",
    "start": "1098770",
    "end": "1104710"
  },
  {
    "text": "Because we said, look,\na cheating verifier can use the\nFiat-Shamir function.",
    "start": "1104710",
    "end": "1111410"
  },
  {
    "text": "He can behave maliciously. He's behaving like a\nFiat-Shamir function. Now, you should be able\nto simulate the view.",
    "start": "1111410",
    "end": "1117750"
  },
  {
    "text": "So if you have an\nefficient simulator that simulates the view\nfor x in the language,",
    "start": "1117750",
    "end": "1123778"
  },
  {
    "text": "he's efficient simulator. He doesn't know which\ninstances are in the language or outside the language. It's NP. It's hard languages.",
    "start": "1123778",
    "end": "1129520"
  },
  {
    "text": "So he probably will succeed in\nsimulating the view of instances outside the language. Otherwise, he's like a P.\nhe's a kind of distinguisher.",
    "start": "1129520",
    "end": "1138029"
  },
  {
    "text": "You can use him to show that the\nlanguage isn't in P, not in NP. ",
    "start": "1138030",
    "end": "1143700"
  },
  {
    "text": "And that's why there\ncannot be a simulator. Because, the simulator, he can\nact like a cheating prover.",
    "start": "1143700",
    "end": "1150389"
  },
  {
    "text": "In the noninteractive\nsetting, he cannot. Because we're giving the\nsimulator extra power",
    "start": "1150390",
    "end": "1155400"
  },
  {
    "text": "to choose the common\nreference string. We'll talk about it\nwhen we get there. But it's a model that's\na little different.",
    "start": "1155400",
    "end": "1161340"
  },
  {
    "text": "So actually, I planned\nI'm going to talk about this more in\nlength when I get there.",
    "start": "1161340",
    "end": "1167170"
  },
  {
    "text": "But since you asked, I\nwant to give a preview. So indeed, there's tension. And we'll see how\nto overcome it.",
    "start": "1167170",
    "end": "1172450"
  },
  {
    "text": "It's actually really\ninteresting that it's a belief",
    "start": "1172450",
    "end": "1177750"
  },
  {
    "text": "that you can't use Fiat-Shamir. One, zero knowledge is a kind of\nin contradiction to Fiat-Shamir.",
    "start": "1177750",
    "end": "1183110"
  },
  {
    "text": "But actually, we use\nFiat-Shamir to get the noninteractive\nversion of zero knowledge. But we'll go into detail\nwhen we get there.",
    "start": "1183110",
    "end": "1190530"
  },
  {
    "text": "Great question. Any other questions?",
    "start": "1190530",
    "end": "1195640"
  },
  {
    "text": "So my plan next is to\nprove the soundness of this protocol,\nthe parallel repeated",
    "start": "1195640",
    "end": "1200770"
  },
  {
    "text": "version under Fiat-Shamir. But any question\nbefore we go there? ",
    "start": "1200770",
    "end": "1207519"
  },
  {
    "text": "OK, so let's-- the\nresult. So as I said, this is a result of a Canetti,\nLombardi, and Wichs from 2019.",
    "start": "1207520",
    "end": "1220030"
  },
  {
    "text": "It's so beautiful and simple. So this was an open question\nfor a very long time.",
    "start": "1220030",
    "end": "1226210"
  },
  {
    "text": "And I want to give it to\nyou as a kind of evidence or an example of\nsomething that we thought",
    "start": "1226210",
    "end": "1232720"
  },
  {
    "text": "was so hard, so hard, so hard. And then if you\njust think about it like a little differently,\nyou twist a little bit,",
    "start": "1232720",
    "end": "1239270"
  },
  {
    "text": "it's so easy. So I'm going to have\nyou guys try to come up with a proof of this.",
    "start": "1239270",
    "end": "1245610"
  },
  {
    "text": "So let's try to do\nit interactively. And I want you to prove to\nme that this protocol P, V--",
    "start": "1245610",
    "end": "1250820"
  },
  {
    "text": "but think of it, again,\nrepeated in parallel-- is sound. So I'm going to give\nyou a few hints,",
    "start": "1250820",
    "end": "1258740"
  },
  {
    "text": "and we'll get there together. So one thing that's really\nnice about this protocol is I want to argue--",
    "start": "1258740",
    "end": "1266645"
  },
  {
    "text": " let's recall, what is\nthe Fiat-Shamir paradigm?",
    "start": "1266645",
    "end": "1272640"
  },
  {
    "text": "The Fiat-Shamir paradigm\nsays that we choose some hash function, some hash key, from--",
    "start": "1272640",
    "end": "1281169"
  },
  {
    "text": "there's some Fiat-Shamir\nhash function that generates a hash key. And now, we want to say,\nlet me denote for simplicity",
    "start": "1281170",
    "end": "1287890"
  },
  {
    "text": "these messages by\nalpha, beta and gamma.",
    "start": "1287890",
    "end": "1292910"
  },
  {
    "text": "Even for now, let's even not\nthink of this specific protocol. Let's think of just a protocol.",
    "start": "1292910",
    "end": "1298639"
  },
  {
    "text": "The prover sends alpha, verifier\nsends beta, prover sends gamma.",
    "start": "1298640",
    "end": "1304820"
  },
  {
    "text": "Let's not even go into\nthe specific details. I want to prove to come\nup with a hash function.",
    "start": "1304820",
    "end": "1311142"
  },
  {
    "text": "So I want to come up\nwith a hash function h, which generates a key for\na hash and then evaluates.",
    "start": "1311142",
    "end": "1318230"
  },
  {
    "text": "That's just a hash function\nsuch that this remains sound.",
    "start": "1318230",
    "end": "1323820"
  },
  {
    "text": "OK, so I have this. There's some NP language x. I want to prove whether\nit's in the language or not. This is my proof system.",
    "start": "1323820",
    "end": "1329930"
  },
  {
    "text": "And I want to find a hash\nfunction for which it's sound. ",
    "start": "1329930",
    "end": "1337060"
  },
  {
    "text": "At first, it seems like\nit should be very easy. Why should it be very easy? Look, take, let's say,\nx not in the language.",
    "start": "1337060",
    "end": "1343727"
  },
  {
    "text": "We need to focus on x not in\nthe language. x in the language, it's complete. Completeness, that's easy. I want to argue\nyou cannot cheat.",
    "start": "1343728",
    "end": "1350120"
  },
  {
    "text": "So now, what do I need to say? I want that, for any\nx in the language-- so fix 1x on the language--",
    "start": "1350120",
    "end": "1356260"
  },
  {
    "text": "I want to argue that you\ncannot find an alpha and beta,",
    "start": "1356260",
    "end": "1362260"
  },
  {
    "text": "which is h of alpha, and\nthe gamma that's accepting. But now, this is a proof system.",
    "start": "1362260",
    "end": "1369030"
  },
  {
    "text": "So every alpha\nhas very few betas for which there even exists\na gamma that's accepting.",
    "start": "1369030",
    "end": "1376290"
  },
  {
    "text": "So again, because it's\nfixed x on the language, first thing we know is just\nby definition of a proof",
    "start": "1376290",
    "end": "1382990"
  },
  {
    "text": "that, for every alpha,\nany possible alpha, there exists very few\nbetas for which there",
    "start": "1382990",
    "end": "1389530"
  },
  {
    "text": "exists an accepting answer. So there exists few,\nvery few, betas such",
    "start": "1389530",
    "end": "1397490"
  },
  {
    "text": "that there exists gamma for\nwhich alpha, beta, gamma",
    "start": "1397490",
    "end": "1405770"
  },
  {
    "text": "are accepted.  So that's the first\nthing we know.",
    "start": "1405770",
    "end": "1411580"
  },
  {
    "text": "Because it's a proof system, by\nthe virtue of a proof system, for every alpha, there\nare very, very few.",
    "start": "1411580",
    "end": "1418720"
  },
  {
    "text": "Actually, note, in this protocol\nspecifically, there's one. One.",
    "start": "1418720",
    "end": "1424250"
  },
  {
    "text": "Because if the graph g does\nnot have a Hamiltonian cycle,",
    "start": "1424250",
    "end": "1431140"
  },
  {
    "text": "take a cheating prover\nthat sends alpha. Alpha is a bunch of commitments. Now, let's act in\neach commitment.",
    "start": "1431140",
    "end": "1438440"
  },
  {
    "text": "Look, either they're setting\na Hamiltonian cycle or not.",
    "start": "1438440",
    "end": "1444177"
  },
  {
    "text": "You can't answer both questions. We know that, if you can\nanswer both questions, well, it won't be sound. So you can only\nanswer one question.",
    "start": "1444177",
    "end": "1450550"
  },
  {
    "text": "And each one can\nonly answer one. So this protocol, even for\nthis specific protocol,",
    "start": "1450550",
    "end": "1455750"
  },
  {
    "text": "let's assume even. Let's even assume\nwhat any proof tells",
    "start": "1455750",
    "end": "1462370"
  },
  {
    "text": "you is that, for every\nalpha, there exists a few. But for simplicity,\nbecause that's the protocol we're\ndealing with, let's",
    "start": "1462370",
    "end": "1470400"
  },
  {
    "text": "suppose there exists a unique-- this is a symbol for\nunique, by the way.",
    "start": "1470400",
    "end": "1476730"
  },
  {
    "text": "There exists a unique\nbeta that can be extended. ",
    "start": "1476730",
    "end": "1483250"
  },
  {
    "text": "Now, we need to do\nis not hit that beta. So all we need--",
    "start": "1483250",
    "end": "1489110"
  },
  {
    "text": "I mean, think about it. It seems so easy. All we need is to find a\nhash h, like a hash key,",
    "start": "1489110",
    "end": "1495419"
  },
  {
    "text": "such that even of hash\nkey in alpha is not equal.",
    "start": "1495420",
    "end": "1504500"
  },
  {
    "text": "For every alpha there\nexists a single bit, let me call it beta bad. That's a beta we want to avoid.",
    "start": "1504500",
    "end": "1512330"
  },
  {
    "text": "OK, so for every alpha,\nthere exists a single beta bad of alpha.",
    "start": "1512330",
    "end": "1517958"
  },
  {
    "text": "It's a function of alpha. For every alpha, for\nevery commitment, there's a different-- either you can answer 0 or 1.",
    "start": "1517958",
    "end": "1523890"
  },
  {
    "text": "So for any alpha, there\nexists one challenge, beta, for which the prover can cheat.",
    "start": "1523890",
    "end": "1530320"
  },
  {
    "text": "Now, the cheating prover\nwants to hit that bad beta because that's what\nhe can cheat on.",
    "start": "1530320",
    "end": "1536010"
  },
  {
    "text": "Our job of protecting\nthis is to make sure that every alpha does not\nequal to this beta bad.",
    "start": "1536010",
    "end": "1544210"
  },
  {
    "text": " But how hard can it be? We just want to avoid one.",
    "start": "1544210",
    "end": "1551060"
  },
  {
    "text": "You know what? Here, let me give a suggestion. Eval hash key or--",
    "start": "1551060",
    "end": "1558860"
  },
  {
    "text": "here, h of alpha equals\nbeta bad of alpha plus 1.",
    "start": "1558860",
    "end": "1568040"
  },
  {
    "text": "It's not beta bad. I avoid the bad one. ",
    "start": "1568040",
    "end": "1574763"
  },
  {
    "text": "I'm going to use this\nfor my hash function. ",
    "start": "1574763",
    "end": "1580880"
  },
  {
    "text": "Anybody see a problem with this? ",
    "start": "1580880",
    "end": "1588630"
  },
  {
    "text": "Yeah. AUDIENCE: Well, it's\nnot really unique because you're using the\ncomputational assumption",
    "start": "1588630",
    "end": "1596130"
  },
  {
    "text": "for the commitments. YAEL T. KALAI: No, actually,\nI'm using the computation. OK, good. So we'll say, well,\nactually, it's not unique",
    "start": "1596130",
    "end": "1604260"
  },
  {
    "text": "because the commitment here\nhas a computational assumption. But, actually, this commitment\nwill be statistically binding.",
    "start": "1604260",
    "end": "1610750"
  },
  {
    "text": "So it's only the hiding,\nthe zero knowledge, is computational. But actually, you can open it.",
    "start": "1610750",
    "end": "1616390"
  },
  {
    "text": "Suppose there's really\nlike you're binded. You can really only\nopen it in one--",
    "start": "1616390",
    "end": "1621929"
  },
  {
    "text": "you can't open it\ntwo different ways. AUDIENCE: But the\npigeonhole principle is going to be many\nconditions for one.",
    "start": "1621930",
    "end": "1630255"
  },
  {
    "text": "YAEL T. KALAI: That's fine. That's fine. But you're right, there's\nmany permutations. But suppose you\ncan open to both.",
    "start": "1630255",
    "end": "1635600"
  },
  {
    "text": "Then you can give me both\nthis message and this message. If you give me both\nthis and both this,",
    "start": "1635600",
    "end": "1641690"
  },
  {
    "text": "it means that this\ng must have a cycle.",
    "start": "1641690",
    "end": "1649159"
  },
  {
    "text": "Because I know that\nthere's a cycle. And guess what? It's not in the nonedges.",
    "start": "1649160",
    "end": "1655830"
  },
  {
    "text": "So the cycle has\nto be in the edges. So you can open only one.",
    "start": "1655830",
    "end": "1663260"
  },
  {
    "text": "So again, all I want,\nit seems so easy. I have a proof system.",
    "start": "1663260",
    "end": "1669190"
  },
  {
    "text": "For every alpha,\nactually, the prover can only cheat on\none single data.",
    "start": "1669190",
    "end": "1675080"
  },
  {
    "text": "All I want to do\nis avoid that beta. So OK, I'll just avoid that.",
    "start": "1675080",
    "end": "1680220"
  },
  {
    "text": "Do beta plus 1. ",
    "start": "1680220",
    "end": "1685330"
  },
  {
    "text": "This is delicate. Anybody see why\nthis doesn't work?",
    "start": "1685330",
    "end": "1690670"
  },
  {
    "text": "Yeah. AUDIENCE: Don't you have to\nopen the commitment to find out which is the bad beta? YAEL T. KALAI: Exactly.",
    "start": "1690670",
    "end": "1696330"
  },
  {
    "text": "The problem is computing\nbeta bad is really hard. How do you know what\nbeta-- for example,",
    "start": "1696330",
    "end": "1702090"
  },
  {
    "text": "so computing this is hard. Actually, if it were easy,\nyou wouldn't need interaction at all.",
    "start": "1702090",
    "end": "1707760"
  },
  {
    "text": "It would be NP. You'd have a succinct\nwitness for NP. You just give alpha.",
    "start": "1707760",
    "end": "1712836"
  },
  {
    "text": "You compute. This is the beta, and\nthen you give gamma. And everything is\ninformation theoretic.",
    "start": "1712836",
    "end": "1718309"
  },
  {
    "text": "The problem is computing. ",
    "start": "1718310",
    "end": "1724190"
  },
  {
    "text": "The power of this\ninteraction lies in the fact that computing what the\nbad beta is is hard.",
    "start": "1724190",
    "end": "1731670"
  },
  {
    "text": "Here, for example,\nhow do you know which beta you can cheat on? Well, if you open the\ncommitment, then you see, OK,",
    "start": "1731670",
    "end": "1741870"
  },
  {
    "text": "is there a lot of 1s? Is it only in cycle? But you need to open\nthis commitment.",
    "start": "1741870",
    "end": "1747340"
  },
  {
    "text": "So computing this beta is hard\nwithout additional information.",
    "start": "1747340",
    "end": "1754500"
  },
  {
    "text": "So now, what do we do? So we can't give that as a\nhash function because this is a hard computation.",
    "start": "1754500",
    "end": "1761410"
  },
  {
    "text": "So here is the first kind of--",
    "start": "1761410",
    "end": "1767820"
  },
  {
    "text": "so there are a few a-ha\nmoments in this paper. The first one is, you know what?",
    "start": "1767820",
    "end": "1773340"
  },
  {
    "text": "Maybe if this commitment\nhad some trapdoor, maybe there's some\ntrapdoor information",
    "start": "1773340",
    "end": "1780640"
  },
  {
    "text": "that, with the trapdoor,\nit becomes easy. So then let's do that.",
    "start": "1780640",
    "end": "1786210"
  },
  {
    "text": "Let's use trapdoor\nin our hash function. So now, two things\nI'm going to do next--",
    "start": "1786210",
    "end": "1792480"
  },
  {
    "text": "first, show you how you\nconstruct a commitment with a trapdoor. That will also be\nuseful here, so it's",
    "start": "1792480",
    "end": "1797539"
  },
  {
    "text": "going to be a stepping stone. So I'll show you\nspecific commitment, which is what we use, which has\na trapdoor to make beta easy.",
    "start": "1797540",
    "end": "1806960"
  },
  {
    "text": "And then we're going to deal\nwith the next issue that comes up, which the next\na-ha moment appears in,",
    "start": "1806960",
    "end": "1813030"
  },
  {
    "text": "which is, well, you can't use\nthis trapdoor in the clear. Because you can't give the\ncheating people the trapdoor.",
    "start": "1813030",
    "end": "1823289"
  },
  {
    "text": "Actually, the problem will\nnot be the cheating prover. The problem, if you\ngive the trapdoor, it's not zero knowledge anymore.",
    "start": "1823290",
    "end": "1828720"
  },
  {
    "text": "So this trapdoor\nneeds to stay hidden. You can't just use it.",
    "start": "1828720",
    "end": "1833742"
  },
  {
    "text": "The reason it's a\ncommitment, it has a purpose. We don't put things in\nthe clear for a reason.",
    "start": "1833742",
    "end": "1839000"
  },
  {
    "text": "So we'll first see you can make\nit efficient given the trapdoor.",
    "start": "1839000",
    "end": "1844770"
  },
  {
    "text": "And then we'll show\nhow this, nevertheless, even though we need to\nkeep this trapdoor secret,",
    "start": "1844770",
    "end": "1851309"
  },
  {
    "text": "the mere fact that it\nexists can be useful for us to do the Fiat-Shamir.",
    "start": "1851310",
    "end": "1858380"
  },
  {
    "text": "OK, questions? Let me remind you that\nI really like questions.",
    "start": "1858380",
    "end": "1863920"
  },
  {
    "text": "Good, bad, all of them,\nthey're all fantastic. Yeah. AUDIENCE: I'm just curious. So the common random\nstring, how did you",
    "start": "1863920",
    "end": "1870260"
  },
  {
    "text": "use to get step where you want\nto make the trapdoor somehow",
    "start": "1870260",
    "end": "1875590"
  },
  {
    "text": "random enough that\nit's not known? YAEL T. KALAI: So the\ncommon random string will be used in many places.",
    "start": "1875590",
    "end": "1881098"
  },
  {
    "text": "The first place it's\ngoing to be used is even to make sure my\ncommitment has a trapdoor. And then it's going to\nbe used again and again.",
    "start": "1881098",
    "end": "1888052"
  },
  {
    "text": "It's going to be used\nall over the place. So we'll see that next. So any other questions\nbefore we proceed?",
    "start": "1888052",
    "end": "1896900"
  },
  {
    "text": "So step one, let\nme just tell you how to construct the commitment\nso that it has a trapdoor.",
    "start": "1896900",
    "end": "1902360"
  },
  {
    "text": "And the way I'm going to do it\nis just using encryption scheme. So let me define the notion\nof public key encryption.",
    "start": "1902360",
    "end": "1910789"
  },
  {
    "text": "And did we define public\nkey encryption last time? ",
    "start": "1910790",
    "end": "1917710"
  },
  {
    "text": "No, right? So let me define the\nnotion of encryption, and we'll use that as\nour commitment scheme.",
    "start": "1917710",
    "end": "1923590"
  },
  {
    "text": "So what is an encryption? So a public key encryption\nwith message space,",
    "start": "1923590",
    "end": "1936740"
  },
  {
    "text": "there's a message space\nassociated with it-- ",
    "start": "1936740",
    "end": "1943602"
  },
  {
    "text": "these are the messages that\nwe're going to encrypt-- it consists of three algorithms.",
    "start": "1943603",
    "end": "1952900"
  },
  {
    "text": "So one is gen. It has its\nown key generation not",
    "start": "1952900",
    "end": "1958800"
  },
  {
    "text": "to be confused with\nthe hash function that generates hash key. This generates public\nkey and secret key.",
    "start": "1958800",
    "end": "1965710"
  },
  {
    "text": "So this just generates a pair,\na public key and a secret key.",
    "start": "1965710",
    "end": "1974870"
  },
  {
    "text": "Let me just mention\nthree PPT algorithms.",
    "start": "1974870",
    "end": "1980490"
  },
  {
    "text": "So we have Probabilistic\nPolynomial Time algorithms. The first just generates\ntwo keys, a public key",
    "start": "1980490",
    "end": "1985670"
  },
  {
    "text": "and a secret key. The encryption algorithm\ntakes, as input, a public key",
    "start": "1985670",
    "end": "1991560"
  },
  {
    "text": "and a message from\nthe message space. And it generates a ciphertext\nfrom a ciphertext space.",
    "start": "1991560",
    "end": "2000970"
  },
  {
    "text": "And the third\nalgorithm decrypts. So it takes a secret\nkey and the ciphertext,",
    "start": "2000970",
    "end": "2007830"
  },
  {
    "text": "and it generates a message in\nthe message space or like that.",
    "start": "2007830",
    "end": "2013710"
  },
  {
    "text": "Maybe I failed. I tried to decrypt,\nbut I failed. And the properties we want,\nthe first is correctness",
    "start": "2013710",
    "end": "2022679"
  },
  {
    "text": "or completeness, which just\nsays, if you encrypt the message",
    "start": "2022680",
    "end": "2027940"
  },
  {
    "text": "and then you decrypt it,\nyou get your message back. So it just says, for every m,\nfor any message, the probability",
    "start": "2027940",
    "end": "2038140"
  },
  {
    "text": "that you decrypt--\nso the probability is over a sample public key\nand secret key from key Gen.",
    "start": "2038140",
    "end": "2052770"
  },
  {
    "text": "And then use the secret key\nto decrypt an encryption of m.",
    "start": "2052770",
    "end": "2058924"
  },
  {
    "start": "2058924",
    "end": "2065370"
  },
  {
    "text": "So it says, if you encrypt m,\nyou generate a pair of keys, you encrypt the message m\nand then you decrypt it,",
    "start": "2065370",
    "end": "2074250"
  },
  {
    "text": "you get back the message\nwith probability 1. That's just correctness,\nwhat you expect.",
    "start": "2074250",
    "end": "2080888"
  },
  {
    "text": "If you take a message,\nyou encrypt it, and then you decrypt it, you\nshould get the message back.",
    "start": "2080889",
    "end": "2088199"
  },
  {
    "text": "The important property\nis security or what's called semantic security.",
    "start": "2088199",
    "end": "2093790"
  },
  {
    "start": "2093790",
    "end": "2100400"
  },
  {
    "text": "And this says that\nany two messages, if you encrypt one\nor encrypt the other,",
    "start": "2100400",
    "end": "2106290"
  },
  {
    "text": "can distinguish between the two. They look the same. They're computationally\nindistinguishable. So it just says, for every m0\nand m1 in the message space--",
    "start": "2106290",
    "end": "2118500"
  },
  {
    "text": "so typically, we think-- by the way, the length\nof m is revealed. Typically, we think\nof the message space",
    "start": "2118500",
    "end": "2124680"
  },
  {
    "text": "as having fixed size. For us, throughout this entire\nlecture and often is the case,",
    "start": "2124680",
    "end": "2130900"
  },
  {
    "text": "we can think of m as just\ncontaining two messages, the 0 message or the 1 message.",
    "start": "2130900",
    "end": "2136140"
  },
  {
    "text": "And if you want to\nencrypt longer message, you just encrypt\nbit by bit by bit. That's a common way\nto do encryption.",
    "start": "2136140",
    "end": "2141740"
  },
  {
    "text": "Not in practice, but in theory. In practice, it's\noften not fast enough. But in theory, you can just\nencrypt each bit separately.",
    "start": "2141740",
    "end": "2147990"
  },
  {
    "text": "But in general, for any two\nmessages, the message space, if it's just 0, 1s, for the\nmessage 0 and for the message 1,",
    "start": "2147990",
    "end": "2155500"
  },
  {
    "text": "the claim is that, if you\ngenerate public key according to Gen and encrypt m0,\nthis is indistinguishable,",
    "start": "2155500",
    "end": "2166619"
  },
  {
    "text": "computationally\nindistinguishable, from generating a public key\naccording to Gen and encrypting",
    "start": "2166620",
    "end": "2175260"
  },
  {
    "text": "message 1. So for any messages,\nyou know the messages. I'm telling you.",
    "start": "2175260",
    "end": "2180810"
  },
  {
    "text": "I'm encrypting m0 or m1. You can't tell the difference. You don't know.",
    "start": "2180810",
    "end": "2186410"
  },
  {
    "text": "I'm giving you one of them. You have no idea if it's m0\nencrypted or m1 encrypted. Note, there's no randomness\nover the messages for any two",
    "start": "2186410",
    "end": "2193780"
  },
  {
    "text": "messages, fixed messages. Yeah. So even you don't\nknow if I encrypt M-- if I give you two encryptions\nof 0 or I give you encryption",
    "start": "2193780",
    "end": "2201790"
  },
  {
    "text": "of 01, can't tell\nthe difference. ",
    "start": "2201790",
    "end": "2207110"
  },
  {
    "text": "So that's the definition. And we have these public\nkey encryption schemes and a whole slew of assumptions,\nlattice-based assumption,",
    "start": "2207110",
    "end": "2216109"
  },
  {
    "text": "not lattice-based,\nlike discrete log that we saw earlier in\nthe semester and so on.",
    "start": "2216110",
    "end": "2222090"
  },
  {
    "text": "But I don't want to talk about\ninstantiation because this is more class on proof systems.",
    "start": "2222090",
    "end": "2227790"
  },
  {
    "text": "And I don't want to make\nit too hard core crypto. So let me just use this-- not\nshow how to actually construct",
    "start": "2227790",
    "end": "2233910"
  },
  {
    "text": "this, but we have many\ninstantiation constructions. But suppose we have this.",
    "start": "2233910",
    "end": "2239130"
  },
  {
    "text": "Let me show you what\nthe commitment would be. So now, what I want\nthe commitment to be,",
    "start": "2239130",
    "end": "2244290"
  },
  {
    "text": "instead of commitment,\nmake this an encryption. Let me actually\nput another color.",
    "start": "2244290",
    "end": "2250545"
  },
  {
    "start": "2250545",
    "end": "2257059"
  },
  {
    "text": "So make this be an encryption\nwith some public key of pi.",
    "start": "2257060",
    "end": "2264860"
  },
  {
    "text": "So what I'm telling the prover\nnow, I'm telling him, look, I want to be able in\nthe analysis at least,",
    "start": "2264860",
    "end": "2271470"
  },
  {
    "text": "to open up there and see\nwhere the 1s are and where are",
    "start": "2271470",
    "end": "2277099"
  },
  {
    "text": "the 01s, so that later I'll\nbe able to understand where the nonedges are. And so what's the bad beta?",
    "start": "2277100",
    "end": "2284490"
  },
  {
    "text": "So now, I want to\ntell the prover-- so please, the commitment\nI want you to send me",
    "start": "2284490",
    "end": "2291240"
  },
  {
    "text": "is the encryption. Now, it's hiding. It's still hiding. Yeah? ",
    "start": "2291240",
    "end": "2297782"
  },
  {
    "text": "So it's still zero knowledge. It's still satisfies\nkind of-- it's locked. It's like the verifier has\nno idea what's in there.",
    "start": "2297782",
    "end": "2303590"
  },
  {
    "text": " And it's still binding. Because once you\nencrypt, you're stuck.",
    "start": "2303590",
    "end": "2312440"
  },
  {
    "text": " The message is sitting\nthere because then you can",
    "start": "2312440",
    "end": "2317740"
  },
  {
    "text": "use a secret key to decrypt it. So it really has the hiding\nand binding property. Great, it's like a\nreal commitment scheme.",
    "start": "2317740",
    "end": "2324190"
  },
  {
    "text": " Yeah?",
    "start": "2324190",
    "end": "2330410"
  },
  {
    "text": "Yeah. AUDIENCE: Does\npublic key encryption imply that there's\nno possibility",
    "start": "2330410",
    "end": "2336869"
  },
  {
    "text": "of a second secret key that\ndecrypts it to something else? YAEL T. KALAI: OK,\ngreat question.",
    "start": "2336870",
    "end": "2342119"
  },
  {
    "text": "Great question. Great. So you're asking, wait,\nwhat if the public key has",
    "start": "2342120",
    "end": "2348690"
  },
  {
    "text": "many secret keys associated with\nit and one of them decrypts to m",
    "start": "2348690",
    "end": "2354839"
  },
  {
    "text": "and the other one decrypts\nto m prime, let's say? So now, here I say, no. By my definition, no.",
    "start": "2354840",
    "end": "2361119"
  },
  {
    "text": "Because my\ncorrectness says that, if you choose public\nkey and secret key pair with probability\n1, you will always",
    "start": "2361120",
    "end": "2370090"
  },
  {
    "text": "get your message back. So there's no secret key that\nwill give you different message.",
    "start": "2370090",
    "end": "2375109"
  },
  {
    "text": "That's my definition. So what you're\nproposing is not for me.",
    "start": "2375110",
    "end": "2380530"
  },
  {
    "text": "It doesn't satisfy\nmy definition. So now, use a public encryption\nthat satisfies my definition.",
    "start": "2380530",
    "end": "2389830"
  },
  {
    "text": "Now, you're binded. Good? Great question. These are really,\nreally great questions.",
    "start": "2389830",
    "end": "2394940"
  },
  {
    "text": "Yeah. AUDIENCE: Here in the\nprobability expression, you're choosing public key\nas secret key here all coming",
    "start": "2394940",
    "end": "2400720"
  },
  {
    "text": "from the same Gen function. YAEL T. KALAI: Yeah. AUDIENCE: But what if-- it doesn't give you\nanything about a different--",
    "start": "2400720",
    "end": "2406630"
  },
  {
    "text": "YAEL T. KALAI: OK, very,\nvery good question, very good question. So the point was the following.",
    "start": "2406630",
    "end": "2413980"
  },
  {
    "text": "Look, we have all these\nguarantees, the correctness and the security,\nassuming the public key is",
    "start": "2413980",
    "end": "2420640"
  },
  {
    "text": "generated according to Gen. Now, my question here, who\ngenerates this public key?",
    "start": "2420640",
    "end": "2428840"
  },
  {
    "text": "How do I know it generates\naccording to Gen? If we let the prover generate\nthe public key, then maybe",
    "start": "2428840",
    "end": "2437760"
  },
  {
    "text": "it's a bad public key that is\nnever going to appear here. And for that bad public key,\nmaybe your concern is valid.",
    "start": "2437760",
    "end": "2446510"
  },
  {
    "text": "Maybe you can open\nit in different ways. And you're completely right.",
    "start": "2446510",
    "end": "2451740"
  },
  {
    "text": "That is a problem. Actually, it's not a\nhypothetical problem.",
    "start": "2451740",
    "end": "2457890"
  },
  {
    "text": "Our scheme that we use\nthat we want to get-- we want to get this under\nlattice assumption. That specific scheme we use has\nthat property, has that problem",
    "start": "2457890",
    "end": "2464990"
  },
  {
    "text": "that, if the key is generated\nbadly, actually, there is no binding. I can cheat.",
    "start": "2464990",
    "end": "2470090"
  },
  {
    "text": "I can open two different ways. I will never be able to do that\nif I generate according to Gen.",
    "start": "2470090",
    "end": "2475200"
  },
  {
    "text": "But if I generated\nmaliciously, I can choose a very\nbad public key. Nobody will be able to\ntell the difference.",
    "start": "2475200",
    "end": "2480640"
  },
  {
    "text": "It will look like\na good public key, but it's actually generated\ncompletely differently.",
    "start": "2480640",
    "end": "2485790"
  },
  {
    "text": "And it would have\nnever appeared in Gen. And with that public key,\nthere is no correctness.",
    "start": "2485790",
    "end": "2492020"
  },
  {
    "text": "And I can cheat and I\ncan do whatever I want. So very good, you found the\nproblem in this approach.",
    "start": "2492020",
    "end": "2500710"
  },
  {
    "text": "So what do we do? How do we fix it?  So this comes to your\nquestion at the beginning.",
    "start": "2500710",
    "end": "2507797"
  },
  {
    "text": "Well, you know what? Let's assume that there's a\ntrusted party that generates this public key for us.",
    "start": "2507797",
    "end": "2513869"
  },
  {
    "text": "So let's assume, for\nnow, that there's kind of a common reference string. We all agree there's a\npublic key sitting here.",
    "start": "2513870",
    "end": "2520920"
  },
  {
    "text": "That's in what's called\na common reference string or a common random string. Everybody knows it, both\nthe prover and the verifier.",
    "start": "2520920",
    "end": "2529036"
  },
  {
    "text": "We all agree on this public key. And we assume that\nit was trusted, like generated according to\nGen. Nobody has the secret key.",
    "start": "2529037",
    "end": "2536720"
  },
  {
    "text": "Nobody has a secret key. We'll never need to\nopen the secret key. So in this protocol,\nwhat do I do?",
    "start": "2536720",
    "end": "2543380"
  },
  {
    "text": "I'm a prover. I encrypt bit by bit. So how do I encrypt? So I didn't say,\nbut this encryption",
    "start": "2543380",
    "end": "2548890"
  },
  {
    "text": "is a randomized protocol. So I choose randomness. I encrypt the bit.",
    "start": "2548890",
    "end": "2553940"
  },
  {
    "text": "I choose randomness. I encrypt the next bit. I choose randomness. I encrypt the next bit\nand so on and so forth. And when I'm asked to open,\nI reveal my randomness.",
    "start": "2553940",
    "end": "2560470"
  },
  {
    "text": "Look, how I encrypted. See, there is randomness. I took the encryption\nwith public key and my bit",
    "start": "2560470",
    "end": "2567160"
  },
  {
    "text": "0 or 1 with this randomness. And see, that's\nwhat's written here. So I can just open\nwithout using secret key.",
    "start": "2567160",
    "end": "2574402"
  },
  {
    "text": "Nobody knows the secret key. The secret key is gone. Someone just came\nwith the public key.",
    "start": "2574403",
    "end": "2579670"
  },
  {
    "text": "And I open here not\nwith the secret key, but I show you the randomness\nthat I used to encrypt.",
    "start": "2579670",
    "end": "2586309"
  },
  {
    "text": "And that kind of is\nan opening for me. ",
    "start": "2586310",
    "end": "2593890"
  },
  {
    "text": "Yeah. AUDIENCE: Does that\nmean the CRS can't be like a fully\nuniformly random string?",
    "start": "2593890",
    "end": "2599342"
  },
  {
    "text": "Because if you were to\nread out the public key, you could also pull\nout the secret key?",
    "start": "2599342",
    "end": "2604610"
  },
  {
    "text": "YAEL T. KALAI: OK,\ngreat, great question. The question was, does that\nmean that the CRS here cannot be",
    "start": "2604610",
    "end": "2610089"
  },
  {
    "text": "truly random? Because it's not truly random. It's a public key. A public key may\nnot be truly random.",
    "start": "2610090",
    "end": "2616260"
  },
  {
    "text": "And the answer is,\nwell, first of all, some public key happened\nto be truly random.",
    "start": "2616260",
    "end": "2623009"
  },
  {
    "text": "The public key for this\nscheme is not truly random. However, it's indistinguishable\nfrom being truly random.",
    "start": "2623010",
    "end": "2632280"
  },
  {
    "text": "So the scheme we actually use,\nthe public key has the property. It's not random. It's like a LWE for those who\nknow what learning with error",
    "start": "2632280",
    "end": "2639089"
  },
  {
    "text": "is. But that's not truly random. However, it is\nindistinguishable from random.",
    "start": "2639090",
    "end": "2647860"
  },
  {
    "text": "Now, if you have soundness\nwith public key that's indistinguishable\nfrom random, soundness should hold even if\nit's completely random.",
    "start": "2647860",
    "end": "2655420"
  },
  {
    "text": "So actually, you can make\nthis completely random. And actually, in the paper, they\nactually take advantage of that.",
    "start": "2655420",
    "end": "2661599"
  },
  {
    "text": "Because if the public\nkey is completely random, then you get statistical\nzero knowledge,",
    "start": "2661600",
    "end": "2666970"
  },
  {
    "text": "computational soundness.  In this protocol,\nespecially when",
    "start": "2666970",
    "end": "2673480"
  },
  {
    "text": "you go to the noninteractive\nversion, there's a tension. You can either get\nstatistical soundness",
    "start": "2673480",
    "end": "2679120"
  },
  {
    "text": "and computational zero knowledge\nor statistical zero knowledge and computational soundness. And you can play\nwith this public key,",
    "start": "2679120",
    "end": "2685060"
  },
  {
    "text": "whether to make it kind of the\ntrue public key in which case you get statistical\nsoundness and computational",
    "start": "2685060",
    "end": "2690190"
  },
  {
    "text": "zero knowledge. Or if you want to take a fake\npublic key, which is all 0, and then you get computational\nsoundness and statistical zero",
    "start": "2690190",
    "end": "2699109"
  },
  {
    "text": "knowledge. So you can play\nwith these things. ",
    "start": "2699110",
    "end": "2706799"
  },
  {
    "text": "So this is the protocol\nfor which we'll show that Fiat-Shamir holds.",
    "start": "2706800",
    "end": "2713030"
  },
  {
    "text": "So again, the commitment\nis just replaced with a public key encryption.",
    "start": "2713030",
    "end": "2719020"
  },
  {
    "text": "Yeah. AUDIENCE: The common\nreference string, I mean, the public key is\nby, for example,",
    "start": "2719020",
    "end": "2724670"
  },
  {
    "text": "change is a way of opening. For example, we also\nrequire the prover",
    "start": "2724670",
    "end": "2730870"
  },
  {
    "text": "to provide the\nrandomness for Gen.",
    "start": "2730870",
    "end": "2737603"
  },
  {
    "text": "YAEL T. KALAI: Oh,\nthat's a good-- OK. OK, good. Good suggestion.",
    "start": "2737603",
    "end": "2742660"
  },
  {
    "text": "What you're saying\nis you're saying, wait, how about he\ngives this public key.",
    "start": "2742660",
    "end": "2747760"
  },
  {
    "text": "It can be malicious. But when he opens,\nwe'll ask him-- OK, so I'll tell you\nthe problem with that.",
    "start": "2747760",
    "end": "2754410"
  },
  {
    "text": "If, when he opens, he\ngives the randomness he used-- so you're\nsuggesting, why don't he give the\nrandomness he used",
    "start": "2754410",
    "end": "2760410"
  },
  {
    "text": "to generate this public key? And now, you know that\nit's a valid public key. That will, indeed,\nensure soundness.",
    "start": "2760410",
    "end": "2766240"
  },
  {
    "text": "However, that will break\nthe zero knowledge. Because once you\ngive the randomness, you also give the\nsecret key away.",
    "start": "2766240",
    "end": "2772890"
  },
  {
    "text": "Because this randomness was\nused to generate both of them. And if the secret key, then\nyou lost the zero knowledge.",
    "start": "2772890",
    "end": "2780869"
  },
  {
    "text": "But great suggestion. OK, great, you guys. It's clear that you're\nthinking, which is fantastic. Great suggestions.",
    "start": "2780870",
    "end": "2788000"
  },
  {
    "text": "Any other questions\nbefore we move on? ",
    "start": "2788000",
    "end": "2796140"
  },
  {
    "text": "So we're making progress. Now, what do we know? So let me hide this\nencryption for a second.",
    "start": "2796140",
    "end": "2803780"
  },
  {
    "text": "Let's go back here. Now, I want you\nactually to forget",
    "start": "2803780",
    "end": "2810670"
  },
  {
    "text": "that this was an\nencryption, because we'll use another encryption. And I don't want you to be\nconfused with this encryption,",
    "start": "2810670",
    "end": "2816385"
  },
  {
    "text": "the other encryption. What I want you to remember\nabout the commitment, that there's some trapdoor,\nlike a secret key.",
    "start": "2816385",
    "end": "2823253"
  },
  {
    "text": "I'll call it trapdoor\non purpose because we'll have another encryption\nwhich will have a secret key.",
    "start": "2823253",
    "end": "2828270"
  },
  {
    "text": "So what I want you to\nremember about this commitment is that there's some\ntrapdoor information",
    "start": "2828270",
    "end": "2835100"
  },
  {
    "text": "that, with that\ntrapdoor information, you can open and\nknow which b is bad.",
    "start": "2835100",
    "end": "2840595"
  },
  {
    "text": " So a trapdoor has a commitment,\nhas some trapdoor information,",
    "start": "2840595",
    "end": "2850609"
  },
  {
    "text": "which allows you to open it, in\nthat case, open the encryption. And then where the 1s are. And that will help you\ndecide where the bad b lies.",
    "start": "2850610",
    "end": "2863890"
  },
  {
    "text": "Actually, you know, I think I\nneed to also add a commitment to pi there.",
    "start": "2863890",
    "end": "2869910"
  },
  {
    "text": "Because, otherwise,\nhow do you know which--",
    "start": "2869910",
    "end": "2875930"
  },
  {
    "text": "maybe you can tell anyway. If you had a commitment\nto pi, it's easier. But if you don't add\na commitment to pi,",
    "start": "2875930",
    "end": "2882630"
  },
  {
    "text": "is it clear that just by\nseeing 1s it's easy to test? ",
    "start": "2882630",
    "end": "2899266"
  },
  {
    "text": "Yeah, I guess. I guess if you open\nboth, you can see both. Yeah, I don't think you need it. But anyway-- so, good.",
    "start": "2899267",
    "end": "2904610"
  },
  {
    "text": "Sorry. So now, what I\nwant to do, I want to say here's my hash function.",
    "start": "2904610",
    "end": "2909960"
  },
  {
    "text": "It has trapdoor hardwired to it. Once he knows the\ntrapdoor, it's a trapdoor,",
    "start": "2909960",
    "end": "2916500"
  },
  {
    "text": "depends on the public\nkey and the CRS. It doesn't depend\non the actual-- once he has the\ntrapdoor, he'll know",
    "start": "2916500",
    "end": "2921830"
  },
  {
    "text": "what the bad thing is and done. ",
    "start": "2921830",
    "end": "2927420"
  },
  {
    "text": "So one can say, OK, use this as\nthe Fiat-Shamir hash function.",
    "start": "2927420",
    "end": "2934930"
  },
  {
    "text": "Sufficient, it's good. However, as we said, the problem\nis then you know the trapdoor. It's sitting there,\nthe trapdoor.",
    "start": "2934930",
    "end": "2942440"
  },
  {
    "text": "And once you're in the trapdoor,\nit's not zero knowledge. So that's the problem.",
    "start": "2942440",
    "end": "2948170"
  },
  {
    "text": "And then there were\nattempts to try to do, OK, let's obfuscate these things.",
    "start": "2948170",
    "end": "2954619"
  },
  {
    "text": "And a lot of hammers were\nthrown in this direction. And it resulted in\ncrazy assumptions.",
    "start": "2954620",
    "end": "2959850"
  },
  {
    "text": "And anyway, there was a\nlong line of work where that's what we tried to do. ",
    "start": "2959850",
    "end": "2966340"
  },
  {
    "text": "And then here is their idea. So now, I can tell you\nthe next a-ha moment.",
    "start": "2966341",
    "end": "2972320"
  },
  {
    "text": "So again, one option\nis to throw what's called obfuscation at this. For those who don't\nknow obfuscation,",
    "start": "2972320",
    "end": "2978322"
  },
  {
    "text": "don't worry about\nit-- essentially, garbling so that the trapdoor\nwill be really hidden there. Nobody will be able to find it.",
    "start": "2978322",
    "end": "2984440"
  },
  {
    "text": "And even then, it was a\nmessy approach that we tried. And we got really, really\nstrong assumptions,",
    "start": "2984440",
    "end": "2990069"
  },
  {
    "text": "which I have no idea if\nthey were true or not. It was kind of a messy\napproach that a bunch of papers",
    "start": "2990070",
    "end": "2995560"
  },
  {
    "text": "kind of followed that\napproach, very complicated. ",
    "start": "2995560",
    "end": "3001050"
  },
  {
    "text": "Then came this paper. And here is the beautiful idea.",
    "start": "3001050",
    "end": "3008100"
  },
  {
    "text": "So the beautiful idea\nwas the following. They said, you know what? Yeah, you can't give trapdoor.",
    "start": "3008100",
    "end": "3013400"
  },
  {
    "text": "That's a problem. Give an encryption of trapdoor. Forget about this encryption. That's a different encryption.",
    "start": "3013400",
    "end": "3019340"
  },
  {
    "text": "So it's now fresh,\nnew encryption. Why don't you give\nencryption-- let me denote the encryption\nof trapdoor here by hat.",
    "start": "3019340",
    "end": "3026860"
  },
  {
    "text": "That's a common way we use fully\nhomomorphic encryption, which I'm going to define next.",
    "start": "3026860",
    "end": "3032530"
  },
  {
    "text": "So they said put in this\nFiat-Shamir hash function, an encryption of\nthe trapdoor that",
    "start": "3032530",
    "end": "3039760"
  },
  {
    "text": "helps you open the commitment. That's like, so, OK. And then what?",
    "start": "3039760",
    "end": "3045307"
  },
  {
    "text": "What are we going to\ndo with the ciphertext? We can't do anything with it. Ciphertext is like junk. What are we going\nto do with that?",
    "start": "3045307",
    "end": "3051320"
  },
  {
    "text": "So the idea is you know what? Don't just use any encryption. Use what's called a fully\nhomomorphic encryption.",
    "start": "3051320",
    "end": "3061240"
  },
  {
    "text": "What is a fully\nhomomorphic encryption? I'll explain that next. But essentially,\nwhat it does, it",
    "start": "3061240",
    "end": "3067180"
  },
  {
    "text": "allows you to compute\nunencrypted data. So a fully\nhomomorphic encryption",
    "start": "3067180",
    "end": "3074380"
  },
  {
    "text": "is exactly the same as\nan encryption scheme.",
    "start": "3074380",
    "end": "3080200"
  },
  {
    "text": "So a fully homomorphic, it's\na public key encryption. ",
    "start": "3080200",
    "end": "3085630"
  },
  {
    "text": "So let me write a\nfully homomorphic",
    "start": "3085630",
    "end": "3096549"
  },
  {
    "text": "public key encryption scheme\nis encryption scheme Gen encrypt and decrypt.",
    "start": "3096550",
    "end": "3101700"
  },
  {
    "text": "But it also allows you to do\ncomputation on encrypted data. So what do I mean?",
    "start": "3101700",
    "end": "3107290"
  },
  {
    "text": "There is an eval function.  It takes a bunch of\nciphertexts, and it",
    "start": "3107290",
    "end": "3114599"
  },
  {
    "text": "can do computation\non the bits hiding underneath the ciphertext.",
    "start": "3114600",
    "end": "3119780"
  },
  {
    "text": "So it takes a public key, a\ndescription of a circuit, c.",
    "start": "3119780",
    "end": "3127100"
  },
  {
    "text": "Think of it with additions\nand multiplication mod 2. And it gets a ciphertext.",
    "start": "3127100",
    "end": "3132280"
  },
  {
    "text": "So encryption of b1, bit\n1, let me think of it now, as I said, think of it as the\nmessage space being 0 and 1.",
    "start": "3132280",
    "end": "3142250"
  },
  {
    "text": "So it gets encryption of bits. Let's say encryption-- or\nI'll just call it ciphertext,",
    "start": "3142250",
    "end": "3148250"
  },
  {
    "text": "ciphertext 1 up to\nciphertext n each one encrypting a single bit.",
    "start": "3148250",
    "end": "3154860"
  },
  {
    "text": "The circuit takes as input\nn bits and produces a bit.",
    "start": "3154860",
    "end": "3160130"
  },
  {
    "text": "And it output some ciphertext. And this ciphertext\nif, here, you",
    "start": "3160130",
    "end": "3166640"
  },
  {
    "text": "have encryption of\nb1, b2 up to bn, this ciphertext should have\nencryption of c of b1 up to bn.",
    "start": "3166640",
    "end": "3177650"
  },
  {
    "text": "So what this eval does, it\ngets encryption of bits,",
    "start": "3177650",
    "end": "3183130"
  },
  {
    "text": "and it can compute an encryption\nof the addition of the bits, an encryption of the\nmultiplication of the bits,",
    "start": "3183130",
    "end": "3189110"
  },
  {
    "text": "and so on and so forth. It can do arbitrary computation. It can compute an\narbitrary circuit c.",
    "start": "3189110",
    "end": "3195040"
  },
  {
    "text": "c goes from 01 to the n to 01.",
    "start": "3195040",
    "end": "3201130"
  },
  {
    "text": "It can do arbitrary\ncomputation under the FHE.",
    "start": "3201130",
    "end": "3206289"
  },
  {
    "text": "So I'll just write-- maybe I'll write here\nthe completeness property for the eval.",
    "start": "3206290",
    "end": "3211849"
  },
  {
    "text": "So I wrote the completeness\nproperty where all you do is decrypt. If you encrypt and decrypt,\nyou get back the message.",
    "start": "3211850",
    "end": "3218740"
  },
  {
    "text": "The eval also has a\ncompleteness property which essentially says-- so\nlet me just write it down.",
    "start": "3218740",
    "end": "3224700"
  },
  {
    "text": "So completeness of eval,\nI'll write it here. ",
    "start": "3224700",
    "end": "3234790"
  },
  {
    "text": "It says that for every b1\nup to bn and the probability",
    "start": "3234790",
    "end": "3244400"
  },
  {
    "text": "that when you decrypt eval-- sorry, for every c, for every\ncircuit c, when you decrypt--",
    "start": "3244400",
    "end": "3259980"
  },
  {
    "text": "so choose a public\nkey, secret key pair. ",
    "start": "3259980",
    "end": "3268790"
  },
  {
    "text": "When you decrypt,\nuse the secret key. To decrypt the\neval function, so,",
    "start": "3268790",
    "end": "3274670"
  },
  {
    "text": "now, evaluate with respect to\nthe public key and the circuit",
    "start": "3274670",
    "end": "3280280"
  },
  {
    "text": "c. Evaluate on this--\nand ciphertext",
    "start": "3280280",
    "end": "3286490"
  },
  {
    "text": "corresponding to b1 up to bn. So encryption public key\nwith b1 up to encryption",
    "start": "3286490",
    "end": "3294530"
  },
  {
    "text": "of public key and bit bn, so\nencrypt each of these bits.",
    "start": "3294530",
    "end": "3302220"
  },
  {
    "text": "You'll get encryption of\nb1 up to encryption bn. Then evaluate. Do homomorphic computations\non these encrypted bits",
    "start": "3302220",
    "end": "3309290"
  },
  {
    "text": "with respect to circuit c.  Now, you get a ciphertext.",
    "start": "3309290",
    "end": "3314960"
  },
  {
    "text": "You should get a ciphertext\nthat encrypts c of b1 up to bn. And indeed, the probability that\nwhen you decrypt you get c of b1",
    "start": "3314960",
    "end": "3325090"
  },
  {
    "text": "up to bn is 1 or close to 1. ",
    "start": "3325090",
    "end": "3337210"
  },
  {
    "text": "So again, what eval does,\nit does a computation on this encrypted data.",
    "start": "3337210",
    "end": "3343029"
  },
  {
    "text": "It computes an\narbitrary circuit c that, when you\ndecrypt it-- and did",
    "start": "3343030",
    "end": "3349360"
  },
  {
    "text": "you get c with probability\nvery, very close to 1. I wrote here 1 minus\nnegligible as opposed",
    "start": "3349360",
    "end": "3354550"
  },
  {
    "text": "to 1 because our scheme have\nthis negative probability of error. So that's why I--",
    "start": "3354550",
    "end": "3360820"
  },
  {
    "text": " So again, high level what\nthe FHE, Fully Homomorphic",
    "start": "3360820",
    "end": "3369470"
  },
  {
    "text": "Encryption, allows you to\ndo is to do this computation on encrypted data. ",
    "start": "3369470",
    "end": "3377730"
  },
  {
    "text": "Questions about the fully\nhomomorphic encryption? ",
    "start": "3377730",
    "end": "3384370"
  },
  {
    "text": "We're good? Yeah. AUDIENCE: I guess does\nit matter what c is?",
    "start": "3384370",
    "end": "3389540"
  },
  {
    "text": "Oh, never mind. Never mind. I was thinking just\narithmetic or-- YAEL T. KALAI: Good, good. No, that's actually\na very good question.",
    "start": "3389540",
    "end": "3396257"
  },
  {
    "text": "It's a very good question. So the question was this\ncircuit c, what is it? So the circuit c, think\nof it as a circuit that",
    "start": "3396257",
    "end": "3403030"
  },
  {
    "text": "has addition and\nmultiplication gates mod 2, so any polynomial size\ncircuit that has addition",
    "start": "3403030",
    "end": "3411440"
  },
  {
    "text": "and multiplication gates mod 2. Great, thank you. Other questions?",
    "start": "3411440",
    "end": "3416720"
  },
  {
    "text": " So now, let's go back. So now, we have an\nencryption scheme",
    "start": "3416720",
    "end": "3422790"
  },
  {
    "text": "that we can do computation\nand encrypted data. Now, let's go back. Remember, where are we?",
    "start": "3422790",
    "end": "3428470"
  },
  {
    "text": "We're saying all we want\nis to avoid this bad. We want a hash function,\nits only purpose",
    "start": "3428470",
    "end": "3433530"
  },
  {
    "text": "to avoid one single point. How hard can that be?",
    "start": "3433530",
    "end": "3439190"
  },
  {
    "text": "I'll tell you the\nhard problem is it needs to avoid the bad\npoint for each and every alpha. That's kind of the hard\npart that, for every alpha,",
    "start": "3439190",
    "end": "3446160"
  },
  {
    "text": "you need to avoid the bad one. If you just want to avoid\nthe bad one for one alpha, choose random. Probably, you're not\ngoing to hit the bad one.",
    "start": "3446160",
    "end": "3452400"
  },
  {
    "text": "But you need to avoid the bad\none for each and every alpha. That's kind of harder.",
    "start": "3452400",
    "end": "3460260"
  },
  {
    "text": "But if we have the\ntrapdoor, then it's easy. But we said, look, we\ncan't give the trapdoor. That will break zero knowledge.",
    "start": "3460260",
    "end": "3467780"
  },
  {
    "text": "So instead, we\nsay, you know what? Let's give a homomorphic\nencryption of the trapdoor.",
    "start": "3467780",
    "end": "3473020"
  },
  {
    "text": " Now, this seems not helpful.",
    "start": "3473020",
    "end": "3478510"
  },
  {
    "text": "Why is it not helpful? OK, let's say you can\ncompute on encrypted data.",
    "start": "3478510",
    "end": "3484915"
  },
  {
    "text": "You do the computation\nof computing bad. So now, here's my hash function.",
    "start": "3484915",
    "end": "3490099"
  },
  {
    "text": "It has trapdoor, hardwire. So think of it like h of,\ninstead of trapdoor, it",
    "start": "3490100",
    "end": "3495940"
  },
  {
    "text": "will have hat of trapdoor. Why not? And it will do this computation\nunder the hood with eval",
    "start": "3495940",
    "end": "3503590"
  },
  {
    "text": "under the hood of the\nencryption, very nice. So now, on input alpha,\nyou won't get the bad alpha",
    "start": "3503590",
    "end": "3515069"
  },
  {
    "text": "plus 1, very nice,\nbut encrypted. So why is that helpful?",
    "start": "3515070",
    "end": "3520910"
  },
  {
    "text": "Yeah. AUDIENCE: [INAUDIBLE] you could\nalso encrypt the eval part, so",
    "start": "3520910",
    "end": "3526145"
  },
  {
    "text": "that encryption, the ciphertext,\nthe two different messages are now equal. YAEL T. KALAI: Again,\nwhat are you saying?",
    "start": "3526145",
    "end": "3531790"
  },
  {
    "text": "Encrypt? AUDIENCE: Encrypt the eval-- the left-hand side\nof the equality, the eval hash [INAUDIBLE].",
    "start": "3531790",
    "end": "3537920"
  },
  {
    "text": "YAEL T. KALAI: Oh,\nyou can encrypt-- exactly. So that's kind of\nwhat I'm doing.",
    "start": "3537920",
    "end": "3545109"
  },
  {
    "text": " This is the shorthand for--",
    "start": "3545110",
    "end": "3550170"
  },
  {
    "text": "this is actually eval of--\nthis is kind of the hash key.",
    "start": "3550170",
    "end": "3555329"
  },
  {
    "text": "The hash key will\nhave trapdoor in it. And an input alpha,\nit should output this.",
    "start": "3555330",
    "end": "3562590"
  },
  {
    "text": "And what we're doing is\nwe're saying, OK encrypt-- or you can think of it the\nhash key being trapdoor",
    "start": "3562590",
    "end": "3569070"
  },
  {
    "text": "and encrypt the entire thing. You can do everything under\nthe hood of the encryption.",
    "start": "3569070",
    "end": "3575560"
  },
  {
    "text": "You want the output to\nbe different than beta. You get a ciphertext.",
    "start": "3575560",
    "end": "3580660"
  },
  {
    "text": "I want this to be\ndifferent than beta. That's what I want.",
    "start": "3580660",
    "end": "3586690"
  },
  {
    "text": "I don't want underneath\nthe hood to be something that's different than beta. So this seems like a bad idea.",
    "start": "3586690",
    "end": "3594470"
  },
  {
    "text": "It gets us nowhere. Yes, again, where are we? We said, if we knew\ntrapdoor, we would be done.",
    "start": "3594470",
    "end": "3602717"
  },
  {
    "text": "The hash function, the\neval of the hash function, will take this trapdoor, compute\nbeta, and output not beta,",
    "start": "3602718",
    "end": "3608420"
  },
  {
    "text": "move it by one, move one of\nthe bits by one, whatever, as long as it doesn't--\nit's not the beta. And now, they say, no, let's\ndo everything under the hood.",
    "start": "3608420",
    "end": "3616360"
  },
  {
    "text": "What? Then we'll get an encryption. Why would that not be-- it seems like you're not\ngetting anywhere to me.",
    "start": "3616360",
    "end": "3625153"
  },
  {
    "text": "It seemed like, when they\nfirst presented this idea, I'm like, OK, this seems\ncompletely useless. So what? Now, everything\nis under the hood.",
    "start": "3625153",
    "end": "3631770"
  },
  {
    "text": "And guess what? We're almost done. Yeah. AUDIENCE: [INAUDIBLE] ",
    "start": "3631770",
    "end": "3639580"
  },
  {
    "text": "YAEL T. KALAI: You\ntake the randomness. AUDIENCE: Define the randomness\nso that computes encryption",
    "start": "3639580",
    "end": "3645780"
  },
  {
    "text": "of eval plus 1 gets us that-- ",
    "start": "3645780",
    "end": "3651937"
  },
  {
    "text": "YAEL T. KALAI: So you know what? I want to say something\neven before that. There's even a mismatch.",
    "start": "3651937",
    "end": "3657300"
  },
  {
    "text": "Beta, let's say,\nconsists of lambda bits. For example, in our case,\nbecause we repeat it,",
    "start": "3657300",
    "end": "3662520"
  },
  {
    "text": "its lambda bits. This is not even lambda bits. It's much more than lambda bits\nbecause we encrypt bit by bit.",
    "start": "3662520",
    "end": "3668530"
  },
  {
    "text": "It's much bigger.  It seems like completely bogus.",
    "start": "3668530",
    "end": "3674339"
  },
  {
    "text": "This is going to be the\nlength of beta times security parameter. So it's not it doesn't\neven correspond to--",
    "start": "3674340",
    "end": "3683340"
  },
  {
    "text": "the sizes don't even match. So it seems like an\nencryption is not helpful.",
    "start": "3683340",
    "end": "3691970"
  },
  {
    "text": "Yeah. AUDIENCE: How could\nit computer beta bad given alpha has trapdoor?",
    "start": "3691970",
    "end": "3697546"
  },
  {
    "text": "YAEL T. KALAI: Oh, Good The\nonly way he can compute beta bad is if he has the-- oh, how can\nyou compute given the trapdoor,",
    "start": "3697546",
    "end": "3703640"
  },
  {
    "text": "you're saying? AUDIENCE: Yeah. YAEL T. KALAI: OK. AUDIENCE: Then it\nwill [INAUDIBLE]? YAEL T. KALAI: Yeah. So what he will do? The trapdoor in\nthis protocol allows",
    "start": "3703640",
    "end": "3711049"
  },
  {
    "text": "you to open the commitment. So now, you see each point\nif it has a 01, 01, 01.",
    "start": "3711050",
    "end": "3718990"
  },
  {
    "text": "So now, why do you\nknow what's beta bad? Because, now, you look.",
    "start": "3718990",
    "end": "3724150"
  },
  {
    "text": "If it has just a\nHamiltonian cycle, I mean, the truth is,\nit's easier to see it",
    "start": "3724150",
    "end": "3730280"
  },
  {
    "text": "if you have the pi. Suppose you always\nalso committed to pi. Well, it's just easier\nto see it that way.",
    "start": "3730280",
    "end": "3735369"
  },
  {
    "text": "Suppose I tell you, don't\nonly commit to that. Commit also to your pi. Now, you see what's in there.",
    "start": "3735370",
    "end": "3742070"
  },
  {
    "text": "Either if you remove pi-- ",
    "start": "3742070",
    "end": "3750790"
  },
  {
    "text": "so you look at all\nthe edges of pi of g. And you make sure that\nthese edges are 0.",
    "start": "3750790",
    "end": "3758020"
  },
  {
    "text": "Everywhere, they're 0. If one of them is 1, you\nknow that he won't succeed.",
    "start": "3758020",
    "end": "3763460"
  },
  {
    "text": "Then this is not bad. Then the b equals 1 is not\nbad because he will fail.",
    "start": "3763460",
    "end": "3769440"
  },
  {
    "text": "The bad is where\nhe will succeed. A bad beta is the beta that\nwill allow him to succeed.",
    "start": "3769440",
    "end": "3775880"
  },
  {
    "text": "So now, if you can open\neverything, now you can see. If there is one edge\nof pi of g, if there",
    "start": "3775880",
    "end": "3783170"
  },
  {
    "text": "is a nonedge that\nhas a 1, then you know this is definitely not bad.",
    "start": "3783170",
    "end": "3788820"
  },
  {
    "text": "And so he won't be able to see--\nso, this, this is the beta bad. On the other hand, if all of\nthe nonedges are, indeed, 0,",
    "start": "3788820",
    "end": "3796640"
  },
  {
    "text": "you know he can't open\nHamiltonian cycle because there is no Hamiltonian cycle.",
    "start": "3796640",
    "end": "3802970"
  },
  {
    "text": "So then this becomes the bad. So if you know what's\nin the commitment, you can tell which\none is the bad.",
    "start": "3802970",
    "end": "3807990"
  },
  {
    "text": "So the trapdoor allows you to\ncompute the bad efficiently. That's the point. Yeah? AUDIENCE: So does that mean the\n[INAUDIBLE] the random coins",
    "start": "3807990",
    "end": "3815120"
  },
  {
    "text": "used in each [INAUDIBLE]? YAEL T. KALAI: The\nrandom coins used? AUDIENCE: The randomness\nthat's used inside each--",
    "start": "3815120",
    "end": "3822079"
  },
  {
    "text": "is that what the trapdoor is?  YAEL T. KALAI: No.",
    "start": "3822080",
    "end": "3827928"
  },
  {
    "text": "I'm thinking of the\ntrapdoor as being the secret key corresponding\nto the public key. I'll tell you the problem.",
    "start": "3827928",
    "end": "3833490"
  },
  {
    "text": "The problem of using\nthe randomness, then it's chosen by\nthe cheating prover.",
    "start": "3833490",
    "end": "3838890"
  },
  {
    "text": "I don't know how\nhe's going to use it. The trapdoor, you\nwrite the trapdoor--",
    "start": "3838890",
    "end": "3845005"
  },
  {
    "text": "this is an important point. So note, I can open\nthis commitment",
    "start": "3845005",
    "end": "3850829"
  },
  {
    "text": "by giving you the\nrandomness that I used to generate this commitment. That would be a good trapdoor.",
    "start": "3850830",
    "end": "3857180"
  },
  {
    "text": "But when I designed the\nFiat-Shamir hash function, I have no idea what\nrandomness the cheating",
    "start": "3857180",
    "end": "3862442"
  },
  {
    "text": "prover is going to use. Maybe it's even deterministic. I don't know what he's doing. He may just give me-- I don't know.",
    "start": "3862442",
    "end": "3868110"
  },
  {
    "text": "So I don't know ahead of\ntime it's random coins. And different\ncheating provers will have different random coins.",
    "start": "3868110",
    "end": "3874670"
  },
  {
    "text": "So I want to put\nsomething in the CRS, in the hash function, the\nFiat-Shamir hash function. So this trapdoor\nis actually going",
    "start": "3874670",
    "end": "3880670"
  },
  {
    "text": "to be the secret key\ncorresponding to the public key. The secret key is not\ngoing to be used in here.",
    "start": "3880670",
    "end": "3887350"
  },
  {
    "text": "It's never going to be\nused in the protocol, but it will be used\nin the analysis. ",
    "start": "3887350",
    "end": "3894320"
  },
  {
    "text": "OK? Great. Yes. AUDIENCE: Is this only if you\ndo an interactive proof where",
    "start": "3894320",
    "end": "3900890"
  },
  {
    "text": "you commit to the\nwitness, or can you draw this to put\nfirst [INAUDIBLE]?",
    "start": "3900890",
    "end": "3907100"
  },
  {
    "text": "YAEL T. KALAI: Again,\nyou're saying, is this-- AUDIENCE: To proof system where\nyou commit to the witness,",
    "start": "3907100",
    "end": "3912290"
  },
  {
    "text": "or can you draw\nthis to proof system where the first [INAUDIBLE]?",
    "start": "3912290",
    "end": "3918302"
  },
  {
    "start": "3918302",
    "end": "3924707"
  },
  {
    "text": "YAEL T. KALAI: So\nthis technique works for this protocol where you\ncommit to something in open.",
    "start": "3924707",
    "end": "3930440"
  },
  {
    "text": "And after, I'll show you why. I'll show you that it's\nactually more general. And it applies to a large,\nactually, slew of protocols",
    "start": "3930440",
    "end": "3938300"
  },
  {
    "text": "where there's no\ncommitment whatsoever. For example, it\napplies to GCR protocol where it's just sum-check.",
    "start": "3938300",
    "end": "3944070"
  },
  {
    "text": "It applies to\nsum-check protocol. And so it's not\nspecific to this.",
    "start": "3944070",
    "end": "3949810"
  },
  {
    "text": "And I'll show you\nlater all you need is this trapdoor that tells you\nwhere the bad kind of challenges",
    "start": "3949810",
    "end": "3956079"
  },
  {
    "text": "are. And once you have a\ntrapdoor that tells you where the bad challenges\nare, then you can use it.",
    "start": "3956080",
    "end": "3962509"
  },
  {
    "text": "But we'll mention that\nat the end of class, like towards the end. But yeah, we'll see\nthat it's general.",
    "start": "3962510",
    "end": "3969010"
  },
  {
    "text": "So in some sense, you don't even\nneed to look too, too detailed into that protocol. The idea here is\nmore high level.",
    "start": "3969010",
    "end": "3975380"
  },
  {
    "text": "We say, look, in an\ninteractive proof, there's the beta that are\nbad, bad for security, that",
    "start": "3975380",
    "end": "3983350"
  },
  {
    "text": "are good for the adversary. But they're bad for security. If the adversary managed\nto hit a bad beta",
    "start": "3983350",
    "end": "3989020"
  },
  {
    "text": "and alpha for which h of\nalpha gives him a bad beta, then he can cheat me.",
    "start": "3989020",
    "end": "3994760"
  },
  {
    "text": "I want to avoid these bad betas. And now, we're\nsaying, well, there's only one bad beta\nfor simplicity.",
    "start": "3994760",
    "end": "4000220"
  },
  {
    "text": "This one has one bad\nbeta, so we're good. If it has one bad beta,\nI want to avoid that one.",
    "start": "4000220",
    "end": "4006240"
  },
  {
    "text": "Now, if there's\nsome trapdoor that allows me to compute\nthat bad beta,",
    "start": "4006240",
    "end": "4013350"
  },
  {
    "text": "then I can't put the\ntrapdoor in the hash function and give it to the world.",
    "start": "4013350",
    "end": "4018810"
  },
  {
    "text": "There's a reason why it's\na trapdoor and not public. Here, in this case,\nit's for zero knowledge.",
    "start": "4018810",
    "end": "4024030"
  },
  {
    "text": "But what I can do is give an\nencryption of the trapdoor.",
    "start": "4024030",
    "end": "4029220"
  },
  {
    "text": "And actually, in\nthe actual scheme, it won't be encryption\non that trapdoor. It'll be encryption of zero. Nobody's going to ever\ndecrypt this thing.",
    "start": "4029220",
    "end": "4035160"
  },
  {
    "text": "But let's think of\nit as an encryption of the trapdoor for now.",
    "start": "4035160",
    "end": "4040210"
  },
  {
    "text": "Now, again, where are we? Why did we make\nany progress here? ",
    "start": "4040210",
    "end": "4049510"
  },
  {
    "text": "So next, is the most\namazing point, I think.",
    "start": "4049510",
    "end": "4055330"
  },
  {
    "text": "When I saw this, it\ntook me a very long time to process because it's\nsuch an ingenious idea.",
    "start": "4055330",
    "end": "4060705"
  },
  {
    "text": " But here's the idea.",
    "start": "4060705",
    "end": "4065960"
  },
  {
    "text": "So they say, yeah,\nyou know what? Nevertheless, my hash function--",
    "start": "4065960",
    "end": "4074920"
  },
  {
    "text": "so then they say,\nOK, you're right. This kind of hash function\nthat has the trapdoor in it",
    "start": "4074920",
    "end": "4082390"
  },
  {
    "text": "and you evaluate the\ntrapdoor, you're right. It's not good. It doesn't even type check. The output is not the\nlength it's supposed to be.",
    "start": "4082390",
    "end": "4089150"
  },
  {
    "text": "Yeah, this is nonsense. Let us fix this. And here's how they fix it. Let me put the eval here\nbecause it'd be nice to see.",
    "start": "4089150",
    "end": "4097239"
  },
  {
    "text": "So here's their fix. They said, you know what? Fine, that may have\nbeen the wrong function.",
    "start": "4097240",
    "end": "4103149"
  },
  {
    "text": "We're going to encrypt. So our CRR hash key is going\nto consist of encryption",
    "start": "4103149",
    "end": "4109960"
  },
  {
    "text": "of another function, g. By the way, I'm using\nthe hat to denote",
    "start": "4109960",
    "end": "4115950"
  },
  {
    "text": "fully homomorphic encryption as\nopposed to standard encryption. That's often we use\nin the literature.",
    "start": "4115950",
    "end": "4121109"
  },
  {
    "text": "The hat is kind of a shortcut\nto denote public key comma encryption of g. And when you use\nthis hat, we usually",
    "start": "4121109",
    "end": "4128580"
  },
  {
    "text": "use it when we want\nto talk about fully homomorphic encryption. So now, they say, this\nis going to be my--",
    "start": "4128580",
    "end": "4137009"
  },
  {
    "text": "nevertheless, I'm\ngoing to encrypt a g. What's this g? We'll see. I'm going to encrypt a g.",
    "start": "4137010",
    "end": "4142290"
  },
  {
    "text": " So here's their hash key.",
    "start": "4142290",
    "end": "4148560"
  },
  {
    "text": "The hash key is going to be I'm\ngoing to generate a public key",
    "start": "4148560",
    "end": "4153720"
  },
  {
    "text": "and encrypt a function g. So it's like the public\nkey corresponding to g and then g, which is\njust another shortcut",
    "start": "4153720",
    "end": "4161270"
  },
  {
    "text": "to say encryption of g. And when I say encrypted g,\njust think of the description",
    "start": "4161270",
    "end": "4168560"
  },
  {
    "text": "of the circuit. So there is some way to\ndescribe the circuit. I encrypt the description.",
    "start": "4168560",
    "end": "4174700"
  },
  {
    "text": "So I encrypt this\ndescription of a circuit g. What this g is we'll see.",
    "start": "4174700",
    "end": "4180310"
  },
  {
    "text": "But that's my hash key. So this is the hash key.",
    "start": "4180310",
    "end": "4185640"
  },
  {
    "text": "How do you evaluate\nhash key and alpha?",
    "start": "4185640",
    "end": "4191850"
  },
  {
    "text": "They say you know what? Just compute g of\nalpha under the hood.",
    "start": "4191850",
    "end": "4196920"
  },
  {
    "text": "How do you compute g of\nalpha under the hood. Essentially, they say, do\nthey eval of the f and g.",
    "start": "4196920",
    "end": "4203520"
  },
  {
    "text": "There's two evals, so\nit's a bit confusing. Because we usually denote\nthe evaluation computing",
    "start": "4203520",
    "end": "4209250"
  },
  {
    "text": "the hash function by eval. But now, we also have the\neval of the full homomorphic encryption scheme.",
    "start": "4209250",
    "end": "4214710"
  },
  {
    "text": "So take the fully homomorphic\nencryption scheme. Take the ciphertext g.",
    "start": "4214710",
    "end": "4219970"
  },
  {
    "text": "So take the public key\ncorresponding to the ciphertext. What's the function?",
    "start": "4219970",
    "end": "4225219"
  },
  {
    "text": "What's the circuit c? It's going to be kind of a\nuniversal circuit sub alpha. ",
    "start": "4225220",
    "end": "4231795"
  },
  {
    "text": "I'll tell you what\nthis is in a second. And the ciphertext is g. And this universal circuit\nof alpha, all it does,",
    "start": "4231795",
    "end": "4239380"
  },
  {
    "text": "the definition, it takes\nas input a circuit g and it outputs g of alpha.",
    "start": "4239380",
    "end": "4247000"
  },
  {
    "text": "So essentially, what we do,\nwhat this hash function does, is exactly what we said before. It takes an encryption of g.",
    "start": "4247000",
    "end": "4252850"
  },
  {
    "text": "How does it relate\nto the trapdoor? I'll tell you in a second. Before, we said, g, it just\nhas the trapdoor in it.",
    "start": "4252850",
    "end": "4262000"
  },
  {
    "text": "Before, we say g is just\nthis g, computes bad. And it has the trapdoor. And we encrypt g.",
    "start": "4262000",
    "end": "4268310"
  },
  {
    "text": "Now, they say, OK, you're right. There's a problem. We'll tell you what\ng is in a second. But same idea, same\nidea, we encrypt this g.",
    "start": "4268310",
    "end": "4275900"
  },
  {
    "text": "Maybe it'll be a little\ndifferent, but we encrypt g. And the hash function computes\ng and alpha under the hood.",
    "start": "4275900",
    "end": "4282389"
  },
  {
    "text": " So it takes the original\nfirst message alpha",
    "start": "4282390",
    "end": "4287639"
  },
  {
    "text": "and computes the function\ng under the hood. We just went over for it.",
    "start": "4287640",
    "end": "4293300"
  },
  {
    "text": "It doesn't work. Then you get the encryption. It doesn't even type check. What? ",
    "start": "4293300",
    "end": "4300410"
  },
  {
    "text": "So here's their idea. Now, this is the most beautiful\npart of today's lecture.",
    "start": "4300410",
    "end": "4306505"
  },
  {
    "start": "4306505",
    "end": "4314130"
  },
  {
    "text": "Let me just write it\nshort kind of hand-way. This is going to be g of\nalpha encrypted because this",
    "start": "4314130",
    "end": "4321660"
  },
  {
    "text": "is what u does. u does,\nit computes g of alpha. So what you get back is\nencryption of g of alpha.",
    "start": "4321660",
    "end": "4328039"
  },
  {
    "text": "Now, they say, OK. And by the way, let me first\nsay, in their scheme, what is g?",
    "start": "4328040",
    "end": "4333752"
  },
  {
    "text": "It doesn't matter\nbecause it's encrypted. It's the all-zero circuit\nof a certain size. So in their scheme,\nthis g is going",
    "start": "4333752",
    "end": "4340470"
  },
  {
    "text": "to be all-zero\ncircuit of size T0. What T is we'll see in a second.",
    "start": "4340470",
    "end": "4347320"
  },
  {
    "text": "But that's all it is. This is the Fiat-Shamir\nhash function. The question is,\nwhy is it secure? Because it seems like\nthere is no way this works.",
    "start": "4347320",
    "end": "4354220"
  },
  {
    "text": "But let me just say,\nagain, the Fiat-Shamir hash function, what does it do?",
    "start": "4354220",
    "end": "4359400"
  },
  {
    "text": "It generates a public key. It encrypts in the actual\nscheme, all-zero string,",
    "start": "4359400",
    "end": "4365909"
  },
  {
    "text": "000 up to T times. We'll see what T is in a second. In the analysis, we're\ngoing to play with this g.",
    "start": "4365910",
    "end": "4371880"
  },
  {
    "text": "But this is what it is. And when you give him\nalpha, it computes",
    "start": "4371880",
    "end": "4377550"
  },
  {
    "text": "the circuit, which is\nthe all-zero circuit, under the hood. That's all it does.",
    "start": "4377550",
    "end": "4382650"
  },
  {
    "text": "And that's the b. That's going to be the beta.",
    "start": "4382650",
    "end": "4388010"
  },
  {
    "text": "You should be very\nconfused, but I'll explain. Yeah. AUDIENCE: All-zero\ncircuit board?",
    "start": "4388010",
    "end": "4393590"
  },
  {
    "text": "YAEL T. KALAI: Just think\nof the zero-- everything is, I don't know, whatever. It doesn't matter, all\npluses, all plus gates.",
    "start": "4393590",
    "end": "4400991"
  },
  {
    "text": "Or it actually doesn't\nmatter, because nobody's going to ever decrypt it.",
    "start": "4400992",
    "end": "4406080"
  },
  {
    "text": "So I guess I'm\nsaying, each circuit, you can describe it with\nbit 010101 in some way.",
    "start": "4406080",
    "end": "4414320"
  },
  {
    "text": "So put all 0 bits. So I don't know if it\neven describes a circuit.",
    "start": "4414320",
    "end": "4420659"
  },
  {
    "text": "Yeah, Anand. AUDIENCE: Could you just use\nthe original beta bad plus 1/2",
    "start": "4420660",
    "end": "4426530"
  },
  {
    "text": "[INAUDIBLE], the\nprover has some-- because gamma is a\nfunction of beta.",
    "start": "4426530",
    "end": "4432170"
  },
  {
    "text": "So just do that under the FHE\nand get an encryption of gamma,",
    "start": "4432170",
    "end": "4437360"
  },
  {
    "text": "or is this not what [INAUDIBLE]? YAEL T. KALAI: No, I'll tell\nyou why it doesn't work. OK, good.",
    "start": "4437360",
    "end": "4442540"
  },
  {
    "text": "No, great question. So the question\nwas the following. You're saying you know what? Change the protocol altogether.",
    "start": "4442540",
    "end": "4447850"
  },
  {
    "text": "Change this protocol\nand ask the guy,",
    "start": "4447850",
    "end": "4453690"
  },
  {
    "text": "you don't need to be blinded\nto this Fiat-Shamir paradigm. Change it a little bit.",
    "start": "4453690",
    "end": "4459409"
  },
  {
    "text": "And now, you put an\nencryption of the trapdoor.",
    "start": "4459410",
    "end": "4465890"
  },
  {
    "text": "So now, he computes\nbetter under the hood. Tell him to compute gamma\nalso under the hood. And then we don't\nhave a problem.",
    "start": "4465890",
    "end": "4471790"
  },
  {
    "text": "The problem is\nthat he can cheat. Why? Because when he answers\ngamma, he knows the trapdoor.",
    "start": "4471790",
    "end": "4477045"
  },
  {
    "text": " No. But actually, one\nsecond, you're right.",
    "start": "4477045",
    "end": "4483810"
  },
  {
    "text": "Under the hood, he\nknows the trapdoor. Yeah. So hold on.",
    "start": "4483810",
    "end": "4489700"
  },
  {
    "text": "Yeah, the problem is that, under\nthe hood, he knows the trapdoor. However, I'm not sure actually\nthat that's a problem.",
    "start": "4489700",
    "end": "4498880"
  },
  {
    "text": "Because at that point,\nlet me think for a second.",
    "start": "4498880",
    "end": "4503975"
  },
  {
    "text": " I think it actually may work.",
    "start": "4503975",
    "end": "4510370"
  },
  {
    "text": "So look, it changes\nthe protocol. For example, now, it's no\nlonger publicly verifiable.",
    "start": "4510370",
    "end": "4517469"
  },
  {
    "text": "Now, his message is\nencrypted, so you need to decrypt in\norder to learn it. So there are issue with this.",
    "start": "4517470",
    "end": "4525880"
  },
  {
    "text": "But also, I'll tell\nyou more than that. If, indeed, you put in the\nFiat-Shamir in the actual",
    "start": "4525880",
    "end": "4534869"
  },
  {
    "text": "scheme-- you should think of it, the\npeople who generate Fiat-Shamir, they actually don't\nknow the trapdoor.",
    "start": "4534870",
    "end": "4540770"
  },
  {
    "text": "They don't know the trapdoor. There's a scheme,\nand it's sound. And there is a trapdoor,\nbut nobody knows it.",
    "start": "4540770",
    "end": "4546090"
  },
  {
    "text": "And the people, they don't\nactually know the trapdoor. So in the actual\nscheme, there won't be any encryption of the trapdoor.",
    "start": "4546090",
    "end": "4552380"
  },
  {
    "text": "The idea is we'll\nsay, well, actually, we don't use the trapdoor. But it's indistinguishable. You don't know if\nyou're encrypted",
    "start": "4552380",
    "end": "4557840"
  },
  {
    "text": "zero, encrypted the trapdoor. So we're going to\nprove soundness, assuming you encrypt\nthe trapdoor. But in the scheme, won't\nencrypt the trapdoor.",
    "start": "4557840",
    "end": "4563640"
  },
  {
    "text": "So then in the\nscheme, the gamma is going to be useless because\nit won't correspond.",
    "start": "4563640",
    "end": "4568800"
  },
  {
    "text": "Yeah? OK, great. OK, great, great,\ngreat questions. So where are we?",
    "start": "4568800",
    "end": "4574868"
  },
  {
    "text": "So we said, here's the\nFiat-Shamir hash function. The Fiat-Shamir hash function\nwill take actually an arbitrary",
    "start": "4574868",
    "end": "4580530"
  },
  {
    "text": "g of a certain size. It doesn't matter\nbecause nobody's going to decrypt that\nciphertext anyway.",
    "start": "4580530",
    "end": "4586989"
  },
  {
    "text": "And all it will do is a\ncomputation under the hood. And now, it seems like I don't\nknow it seems like that cannot",
    "start": "4586990",
    "end": "4594449"
  },
  {
    "text": "work. Nevertheless, I'm going to prove\nsecurity in, like, two lines. ",
    "start": "4594450",
    "end": "4601250"
  },
  {
    "text": "And the proof is\ningenious, really. This construction, it's\nvery tempting to try.",
    "start": "4601250",
    "end": "4607040"
  },
  {
    "text": "It just doesn't work. When you look at it, it's\nlike OK, and then what? And then what?",
    "start": "4607040",
    "end": "4612100"
  },
  {
    "text": "But here's their idea. Their idea is following. Look, all we need to argue\nis that, for every alpha,",
    "start": "4612100",
    "end": "4621370"
  },
  {
    "text": "g of alpha is not beta bad. ",
    "start": "4621370",
    "end": "4628440"
  },
  {
    "text": "That's all we need. ",
    "start": "4628440",
    "end": "4633739"
  },
  {
    "text": "So then in the analysis,\nI'm going to say-- so again, this is the actual\nhash function.",
    "start": "4633740",
    "end": "4639745"
  },
  {
    "text": "You have an\nencryption here of g. What g? This g is-- I don't care. It's like the fixed\ncircuit, whatever",
    "start": "4639745",
    "end": "4645620"
  },
  {
    "text": "circuit you want to put. And nobody's going\nto decrypt it. In the analysis, I'm going\nto say, you know what? I'm going to replace this\ng with a very special g,",
    "start": "4645620",
    "end": "4653869"
  },
  {
    "text": "with a g whose encryption\nis not beta bad.",
    "start": "4653870",
    "end": "4659600"
  },
  {
    "text": " But you're like, which g hat?",
    "start": "4659600",
    "end": "4667940"
  },
  {
    "text": "Which g hat? How do we construct the g so\nthat we know that encryption",
    "start": "4667940",
    "end": "4675090"
  },
  {
    "text": "of g and alpha is not beta? Yeah? AUDIENCE: Just a\nsyntactic question,",
    "start": "4675090",
    "end": "4680730"
  },
  {
    "text": "what does this notation mean? Is it like an encryption of g--\nis the hat over the whole thing? YAEL T. KALAI: Yeah.",
    "start": "4680730",
    "end": "4686420"
  },
  {
    "text": "Sorry, yeah. Sorry. This is an encryption with\npublic key of g alpha.",
    "start": "4686420",
    "end": "4693795"
  },
  {
    "text": "AUDIENCE: Yeah. YAEL T. KALAI: Yeah, sorry. Thanks. Thank you. ",
    "start": "4693795",
    "end": "4701730"
  },
  {
    "text": "So any idea what-- ",
    "start": "4701730",
    "end": "4708140"
  },
  {
    "text": "OK, I'll tell you. You won't believe me,\nbut I'll tell you anyway. It's math. So of course, you'll believe.",
    "start": "4708140",
    "end": "4713430"
  },
  {
    "text": "But you'll be\nmind-boggled for a while. So here's their idea. Their idea is they\nsay, OK, here's my g.",
    "start": "4713430",
    "end": "4720850"
  },
  {
    "text": "I need to ensure\nthat you're not beta, so I'm going to make my g be the\ndecryption secret key of beta.",
    "start": "4720850",
    "end": "4733980"
  },
  {
    "text": " And I'm just going to add the\n1 to it so I know you're not--",
    "start": "4733980",
    "end": "4741560"
  },
  {
    "text": "I guess we're right XOR\nbecause we're over 01. I'll XOR with this with 1. That's my g in the analysis.",
    "start": "4741560",
    "end": "4747650"
  },
  {
    "text": "So in the analysis,\nI'm going to say, suppose you succeed in\nbreaking the Fiat-Shamir. You're also going to\nsucceed with this g.",
    "start": "4747650",
    "end": "4755620"
  },
  {
    "text": "Because it's encrypted, you\ndon't know the difference. You have no idea what's\nunderneath the encryption.",
    "start": "4755620",
    "end": "4762200"
  },
  {
    "text": "So you should also succeed\nin breaking with this g. Now, this g looks bizarre\nbecause I'm decrypting.",
    "start": "4762200",
    "end": "4768880"
  },
  {
    "text": "This is not a ciphertext. This is just a bunch of\nstrings, a 01 string. It's a random string.",
    "start": "4768880",
    "end": "4774330"
  },
  {
    "text": "It's not ciphertext. What does it mean to\ndecrypt this thing. It's like, this makes no sense. ",
    "start": "4774330",
    "end": "4786130"
  },
  {
    "text": "But if the length\nof this is the-- take a ciphertext\nthat the length is like these lambda bits.",
    "start": "4786130",
    "end": "4791434"
  },
  {
    "text": " Look, this is a function. So you can compute this\nfunction, not on a ciphertext,",
    "start": "4791435",
    "end": "4797520"
  },
  {
    "text": "but compute this function. So I decrypt the beta message,\nwhich is not even a ciphertext.",
    "start": "4797520",
    "end": "4804230"
  },
  {
    "text": "And I add 1. I XORed with 1. I XORed with anything that's not\n0 just to move it from the bad.",
    "start": "4804230",
    "end": "4809305"
  },
  {
    "text": " Now, I want to argue, now, we\nknow that encryption of this",
    "start": "4809305",
    "end": "4817480"
  },
  {
    "text": "cannot be beta. Why? Now, I can argue this.",
    "start": "4817480",
    "end": "4823329"
  },
  {
    "text": "Why? Because if it was equal,\nif you decrypt this,",
    "start": "4823330",
    "end": "4830120"
  },
  {
    "text": "then you'll get a\ndescription of this. If you have two strings\nand they're equal, if you decrypt one, you\ncan apply decryption,",
    "start": "4830120",
    "end": "4835580"
  },
  {
    "text": "but they'll still be equal. The decryption is just a\ndeterministic function. So I guess.",
    "start": "4835580",
    "end": "4842230"
  },
  {
    "text": " For this g, I want\nto argue that this,",
    "start": "4842230",
    "end": "4850700"
  },
  {
    "text": "which is Fiat-Shamir\nhash function in alpha-- this is the Fiat-Shamir\nhash function in alpha. I want to argue this.",
    "start": "4850700",
    "end": "4858370"
  },
  {
    "text": "I want to argue,\nif it was beta, I'm going to get a contradiction.",
    "start": "4858370",
    "end": "4863620"
  },
  {
    "text": "I want to argue it's not beta. Why? If it was, then I can apply\ndecryption on both sides.",
    "start": "4863620",
    "end": "4873360"
  },
  {
    "text": "Then it means that\ndecryption of this will be equal to\ndecryption of this.",
    "start": "4873360",
    "end": "4879840"
  },
  {
    "text": "Of course. What is decryption of this? ",
    "start": "4879840",
    "end": "4887730"
  },
  {
    "text": "g alpha. So I just decrypt the\nencryption of g alpha. I get back g alpha.",
    "start": "4887730",
    "end": "4893280"
  },
  {
    "text": " But I know g alpha is not\nthe decryption of bad alpha.",
    "start": "4893280",
    "end": "4901740"
  },
  {
    "text": "Because g alpha is\nthe decryption-- not plus 1.",
    "start": "4901740",
    "end": "4907050"
  },
  {
    "text": "So it can't be. ",
    "start": "4907050",
    "end": "4913970"
  },
  {
    "text": "So again, in the analysis-- so\nlet me maybe write this a bit formally. So let me write it up there.",
    "start": "4913970",
    "end": "4920860"
  },
  {
    "start": "4920860",
    "end": "4927510"
  },
  {
    "text": "I'll use this part. So here is the actual\nproof of soundness.",
    "start": "4927510",
    "end": "4933119"
  },
  {
    "text": "So suppose-- oh, sorry. There's one thing I\nglossed over fast. ",
    "start": "4933120",
    "end": "4942075"
  },
  {
    "text": "We'll go over it\nin the analysis. We'll see it. So I say, suppose there exists\npoly size cheating prover.",
    "start": "4942075",
    "end": "4950430"
  },
  {
    "text": " And he fixes some\ngraph g that's not--",
    "start": "4950430",
    "end": "4958940"
  },
  {
    "text": "does not have a Hamiltonian\ncycle and cheats and cheats",
    "start": "4958940",
    "end": "4968739"
  },
  {
    "text": "with probability big. Let's say greater than epsilon. Epsilon is non-negligible.",
    "start": "4968740",
    "end": "4976800"
  },
  {
    "text": "Then I'm going to say,\nthen I want to argue.",
    "start": "4976800",
    "end": "4982739"
  },
  {
    "text": "Then it means that\np star also succeeds",
    "start": "4982740",
    "end": "4988250"
  },
  {
    "text": "with probability close to--",
    "start": "4988250",
    "end": "4995240"
  },
  {
    "text": "epsilon maybe minus negligible,\nbut similar probability. If I change the hash key--",
    "start": "4995240",
    "end": "5001360"
  },
  {
    "text": "before, the hash key was\npublic key and some encryption",
    "start": "5001360",
    "end": "5007119"
  },
  {
    "text": "of some bogus g. Now, I say it will\nalso succeed if I take",
    "start": "5007120",
    "end": "5012409"
  },
  {
    "text": "public key and this specific g. Let me call this g, g star.",
    "start": "5012410",
    "end": "5018230"
  },
  {
    "text": "So that's the g in the analysis. So again, how does\nthe analysis go?",
    "start": "5018230",
    "end": "5023760"
  },
  {
    "text": "I say, suppose there exists\na cheating prover that takes a false\nstatement and succeeds",
    "start": "5023760",
    "end": "5029990"
  },
  {
    "text": "in proving nevertheless\nand convincing. Then I want to say\nthat he will also",
    "start": "5029990",
    "end": "5036170"
  },
  {
    "text": "succeed with hash key which is\npublic key and encryption of g",
    "start": "5036170",
    "end": "5052310"
  },
  {
    "text": "star, of this g star. Why?",
    "start": "5052310",
    "end": "5057510"
  },
  {
    "text": "By semantic security\nbecause you can't distinguish between encryption\nof g star and encryption of g.",
    "start": "5057510",
    "end": "5066239"
  },
  {
    "text": "Yeah. AUDIENCE: So here, we're\nusing the proof is efficient? YAEL T. KALAI:\nWe're using the fact that the proof is efficient. AUDIENCE: So there's\ncomputational soundness.",
    "start": "5066240",
    "end": "5072210"
  },
  {
    "text": "YAEL T. KALAI:\nComputational soundness. Computational soundness, yes. We're using the fact that\nthe poly size is efficient.",
    "start": "5072210",
    "end": "5078810"
  },
  {
    "text": "And therefore, he cannot\nbreak semantic security. So he cannot\ndistinguish between g, whatever the bogus g that\nwe put in the zero's one,",
    "start": "5078810",
    "end": "5085469"
  },
  {
    "text": "the all-zero circuit or\nwhatever, and this g star. ",
    "start": "5085470",
    "end": "5092510"
  },
  {
    "text": "I cheated slightly here. But let me move on, and we'll\ngo to the cheat in a second.",
    "start": "5092510",
    "end": "5098170"
  },
  {
    "text": "But let's say you believe that\neven though you shouldn't. But it's very delicate,\nso we'll go there.",
    "start": "5098170",
    "end": "5104760"
  },
  {
    "text": "OK, semantic security. Now, I'm saying with\nthis g star, now,",
    "start": "5104760",
    "end": "5110159"
  },
  {
    "text": "information theoretically,\nhe cannot cheat. He's stuck. Because guess what? You're saying he produces alpha,\nbeta, gamma accepting, right?",
    "start": "5110160",
    "end": "5121030"
  },
  {
    "text": "That's what he means he cheated. It means that he got alpha\nsuch that h of alpha is bad.",
    "start": "5121030",
    "end": "5128870"
  },
  {
    "text": "Because you can only\ncheat with a bad alpha. That's the definition\nof a bad beta. That's the definition\nof a bad beta,",
    "start": "5128870",
    "end": "5134480"
  },
  {
    "text": "one that you can cheat with. So we found an alpha so\nthat h of alpha is bad.",
    "start": "5134480",
    "end": "5140520"
  },
  {
    "text": "But this g star never hits bad. That's how we made it.",
    "start": "5140520",
    "end": "5145660"
  },
  {
    "text": "It's so that g of alpha\nis never the bad alpha. Yeah. AUDIENCE: So g start\nis [INAUDIBLE].",
    "start": "5145660",
    "end": "5151842"
  },
  {
    "text": "YAEL T. KALAI: Ah, that's\nwhat I glossed over, exactly. Good. So that's the proof.",
    "start": "5151842",
    "end": "5158050"
  },
  {
    "text": "However, there is a cheat. And the cheat is, look, g\nstar, to compute g star--",
    "start": "5158050",
    "end": "5165990"
  },
  {
    "text": "I said, just describe g star. When I mean encrypt\ng star, I mean",
    "start": "5165990",
    "end": "5171060"
  },
  {
    "text": "give the description,\nlike encrypt the description of g star. So let's recall what does\ng star do. g star decrypts.",
    "start": "5171060",
    "end": "5179370"
  },
  {
    "text": "So you need to know the secret\nkey corresponding to public key.",
    "start": "5179370",
    "end": "5184420"
  },
  {
    "text": "We said that you can encrypt-- semantic security holds if, for\nany fixed messages m0 and m1,",
    "start": "5184420",
    "end": "5192310"
  },
  {
    "text": "you cannot distinguish between-- ",
    "start": "5192310",
    "end": "5198960"
  },
  {
    "text": "is it here? Yeah. For any fixed m0 and m1, you\ncannot distinguish between",
    "start": "5198960",
    "end": "5205060"
  },
  {
    "text": "encryption of m0\nencryption of m1. But here, I'm saying you cannot\ndistinguish between encryption",
    "start": "5205060",
    "end": "5211409"
  },
  {
    "text": "of the secret key and encryption\nof, let's say, other bits. That's a different story.",
    "start": "5211410",
    "end": "5218550"
  },
  {
    "text": "And indeed, we assume what's\ncalled circular secure FHE.",
    "start": "5218550",
    "end": "5226230"
  },
  {
    "text": " We assume all that you cannot\ndistinguish an encryption",
    "start": "5226230",
    "end": "5231270"
  },
  {
    "text": "of the secret key an\nencryption of the all-zeros. That's an assumption.",
    "start": "5231270",
    "end": "5236477"
  },
  {
    "text": "You have a question? Yeah. AUDIENCE: So far it seems like\nb beta, beta bad, is also given,",
    "start": "5236477",
    "end": "5247420"
  },
  {
    "text": "not computed? How do we-- YAEL T. KALAI: Oh, no. No, it's computed. Sorry, sorry, sorry.",
    "start": "5247420",
    "end": "5253073"
  },
  {
    "text": "OK, good. No, what I meant here-- OK, thanks. Thank you very much\nfor your question. Here's what g star alpha does.",
    "start": "5253073",
    "end": "5259200"
  },
  {
    "text": "g star of alpha,\nit has-- actually, let me write more carefully.",
    "start": "5259200",
    "end": "5264300"
  },
  {
    "text": "It has trapdoor and\nsecret key hardwire.",
    "start": "5264300",
    "end": "5269360"
  },
  {
    "text": "The first thing it does,\nit computes bad alpha using trapdoor.",
    "start": "5269360",
    "end": "5277700"
  },
  {
    "text": "This is kind corresponding\nto our scheme. Then he takes what he\ngot, the bad alpha, he",
    "start": "5277700",
    "end": "5284570"
  },
  {
    "text": "decrypted using the secret key. Then he XORs 1 to the\nleast significant bit or something like that.",
    "start": "5284570",
    "end": "5290270"
  },
  {
    "text": "So yeah, it does compute it. Yeah, so this g star, you\nneed to encrypt trapdoor. And you need to\nencrypt secret key.",
    "start": "5290270",
    "end": "5297320"
  },
  {
    "text": "Now, encrypting the\ntrapdoor is not a problem. It has nothing to\ndo with the key. But the problem is you\nalso need to encrypt",
    "start": "5297320",
    "end": "5303289"
  },
  {
    "text": "the secret key corresponding\nto the public key. But yeah, thank you\nfor the question.",
    "start": "5303290",
    "end": "5309250"
  },
  {
    "text": "That's a great question. So g alpha-- I want to repeat.\ng star alpha, what does it do?",
    "start": "5309250",
    "end": "5314420"
  },
  {
    "text": "It takes alpha. It first computes the\nbad beta corresponding to the alpha using the trapdoor.",
    "start": "5314420",
    "end": "5320870"
  },
  {
    "text": "Then he takes the string. He decrypts this weird\nstring using the secret key.",
    "start": "5320870",
    "end": "5325910"
  },
  {
    "text": "And then he XORs the least\nsignificant bit with 1 or any bit with 1 just\nto make it not equal.",
    "start": "5325910",
    "end": "5334061"
  },
  {
    "text": "AUDIENCE: What is trapdoor? Is it still the secret key? YAEL T. KALAI: It's the\nsecret key corresponding to this commitment.",
    "start": "5334061",
    "end": "5339800"
  },
  {
    "text": "That's why I said this\ntrapdoor, in some sense, is also a secret key of\na public key encryption. But there's two\nencryption going on.",
    "start": "5339800",
    "end": "5347880"
  },
  {
    "text": "One is the FHE encryption. And one is how we\nimplement this commitment.",
    "start": "5347880",
    "end": "5354580"
  },
  {
    "text": "So you write that we\nimplement this commitment also with an encryption scheme,\nbut it's better to forget it.",
    "start": "5354580",
    "end": "5360093"
  },
  {
    "text": "Because, otherwise,\nit's confusing that there's two\nencryption scheme. So here, I want to say,\nsuppose you have a commitment.",
    "start": "5360093",
    "end": "5365180"
  },
  {
    "text": "And there's a chapter that\nallows you to open it. Forget that this trapdoor\nis also a secret key.",
    "start": "5365180",
    "end": "5370840"
  },
  {
    "text": "So now, I'm saying you need this\ntrapdoor to open the commitment, which you're right. This trapdoor happens also\nto be a secret key, too.",
    "start": "5370840",
    "end": "5377710"
  },
  {
    "text": "Because that's how we\nimplemented the commitment. And it has a secret\nkey corresponding",
    "start": "5377710",
    "end": "5384010"
  },
  {
    "text": "to this same public key. You see? So I guess what's\nthe problematic part",
    "start": "5384010",
    "end": "5391010"
  },
  {
    "text": "is that the hash key consists\nof a public key of a fully",
    "start": "5391010",
    "end": "5396590"
  },
  {
    "text": "homomorphic encryption scheme. And to describe g star,\nyou need the trapdoor,",
    "start": "5396590",
    "end": "5407152"
  },
  {
    "text": "which is not a problem. You could just encrypt this\ntrapdoor under public key. It's a fresh public key. You can encrypt any--\nthis is kind of fixed",
    "start": "5407152",
    "end": "5413020"
  },
  {
    "text": "compared to this public key. But you also need to encrypt\nthe secret key corresponding",
    "start": "5413020",
    "end": "5418090"
  },
  {
    "text": "to this public key. And for that, we need to\nrely on circular security.",
    "start": "5418090",
    "end": "5425080"
  },
  {
    "text": "So let me just\nquickly write what I mean by circular security,\nand then we'll break.",
    "start": "5425080",
    "end": "5430890"
  },
  {
    "text": "So I'll write it here. ",
    "start": "5430890",
    "end": "5442110"
  },
  {
    "text": "It just means that public key\nand encryption of the secret key",
    "start": "5442110",
    "end": "5451770"
  },
  {
    "text": "is indistinguishable from\npublic key and encryption",
    "start": "5451770",
    "end": "5458400"
  },
  {
    "text": "of, let's say, the all-zeros. And let me just mention\nthat secret key here",
    "start": "5458400",
    "end": "5465580"
  },
  {
    "text": "you can think of\nit as lambda bits. Let's say a security\nparameter number of bits. Then if we think of\nbit-wise encryption,",
    "start": "5465580",
    "end": "5474870"
  },
  {
    "text": "it's like encryption\nof secret key, the first bit of the secret\nkey encryption, the second bit, it's like lambda encryptions.",
    "start": "5474870",
    "end": "5481500"
  },
  {
    "text": "And this also, I\nmean, encryption of 0, encryption of 0,\nencryption of 0. We do everything bit by bit.",
    "start": "5481500",
    "end": "5487159"
  },
  {
    "text": "And the assumption is that you\nhave an FHE scheme so that you cannot distinguish between\nwhether the lambda encryptions--",
    "start": "5487160",
    "end": "5496280"
  },
  {
    "text": "each one encrypts a bit--\nwhether these encryptions are all-zero or whether they\ncorrespond to the bits",
    "start": "5496280",
    "end": "5502820"
  },
  {
    "text": "of the secret key. So that's an assumption. By the way, so the\nquestion is, well,",
    "start": "5502820",
    "end": "5512760"
  },
  {
    "text": "do we have FHE that have\ncircular security, question mark? Well, we do under an assumption.",
    "start": "5512760",
    "end": "5519469"
  },
  {
    "text": "It's called circular\nsecure learning with error. So we just move this circular\nsecure into the assumption.",
    "start": "5519470",
    "end": "5525830"
  },
  {
    "text": "We believe this\nassumption to be true. We don't know. But actually, we\ncan remove all this.",
    "start": "5525830",
    "end": "5532650"
  },
  {
    "text": "It turns out we don't need\nto put the secret key there. And there's a follow-up\nwork that did more work,",
    "start": "5532650",
    "end": "5539450"
  },
  {
    "text": "a lot of lattice work. Here, I didn't\ntalk at all about-- I mean, as long as you have\nfully homomorphic encryption",
    "start": "5539450",
    "end": "5546469"
  },
  {
    "text": "that's circular\nsecure, we're all set. I don't care what this is like. But then there's\nfollow-up work that",
    "start": "5546470",
    "end": "5551960"
  },
  {
    "text": "looks at the specific fully\nhomomorphic encryption scheme based on lattices and\ndoes a bunch of lattice tricks",
    "start": "5551960",
    "end": "5557660"
  },
  {
    "text": "to remove the need\nfor circular security. So this is something\nI didn't show you,",
    "start": "5557660",
    "end": "5562800"
  },
  {
    "text": "but there is a follow-up\nwork that does that. So I want to take a break.",
    "start": "5562800",
    "end": "5569120"
  },
  {
    "text": "But before a break, are\nthere any questions? Yeah. AUDIENCE: So here, the\nsize of the circuit T has to be large enough\nto contain this--",
    "start": "5569120",
    "end": "5575746"
  },
  {
    "text": "YAEL T. KALAI: Good. Exactly. So good question,\nvery good question. Guys, you're really having\nfantastic questions today.",
    "start": "5575747",
    "end": "5581330"
  },
  {
    "text": "Thank you. So going back, what is this T? This T is the number of bits\nneeded to represent this g star.",
    "start": "5581330",
    "end": "5587620"
  },
  {
    "text": "Because in the analysis,\nI convert the 0 to the T",
    "start": "5587620",
    "end": "5593170"
  },
  {
    "text": "with g star, with the\ndecryption of g star. So this is exactly what\nT is in the analysis.",
    "start": "5593170",
    "end": "5599030"
  },
  {
    "start": "5599030",
    "end": "5605849"
  },
  {
    "text": "Any further questions? So let's take like, maybe, I\ndon't know, 8 minute break.",
    "start": "5605850",
    "end": "5612750"
  },
  {
    "text": "It feels intense. Take like 8 minute break or so. And when we go back,\nwe'll do the NIZK.",
    "start": "5612750",
    "end": "5620449"
  }
]