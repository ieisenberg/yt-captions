[
  {
    "text": "The LD and ST instructions access main memory.",
    "start": "410",
    "end": "3750"
  },
  {
    "text": "Note that its the same main memory that holds\nthe instructions, even though for drafting",
    "start": "3750",
    "end": "8780"
  },
  {
    "text": "convenience we show it has two separate boxes\nin our datapath diagram.",
    "start": "8780",
    "end": "14330"
  },
  {
    "text": "In the form we show it here, main memory has\nthree ports:",
    "start": "14330",
    "end": "18160"
  },
  {
    "text": "two read ports for fetching instructions and\nreading load data, and one write port used",
    "start": "18160",
    "end": "23230"
  },
  {
    "text": "by the ST instruction to write data into main\nmemory.",
    "start": "23230",
    "end": "27678"
  },
  {
    "text": "The address calculation is exactly the same\ncomputation as performed by the ADDC instruction:",
    "start": "27679",
    "end": "33590"
  },
  {
    "text": "the contents of the RA register are added\nto the sign-extended 16-bit literal from the",
    "start": "33590",
    "end": "39070"
  },
  {
    "text": "low-order 16 bits of the instruction.",
    "start": "39070",
    "end": "42420"
  },
  {
    "text": "So we'll simply reuse the existing datapath\nhardware to compute the address.",
    "start": "42420",
    "end": "48780"
  },
  {
    "text": "For the LD instruction the output of the ALU\nis routed to main memory as the address of",
    "start": "48780",
    "end": "53780"
  },
  {
    "text": "the location we wish to access.",
    "start": "53780",
    "end": "57170"
  },
  {
    "text": "After the memory's propagation delay, the\ncontents of the addressed location is returned",
    "start": "57170",
    "end": "61788"
  },
  {
    "text": "by the memory and we need to route that back\nto the register file to be written into the",
    "start": "61789",
    "end": "67000"
  },
  {
    "text": "RC register.",
    "start": "67000",
    "end": "69760"
  },
  {
    "text": "The memory has two control signals: MOE (memory\noutput enable), which we set to 1 when we",
    "start": "69760",
    "end": "76070"
  },
  {
    "text": "want to read a value from the memory.",
    "start": "76070",
    "end": "78530"
  },
  {
    "text": "And MWE (memory write enable) which is set\nto 1 when we want main memory to store the",
    "start": "78530",
    "end": "84850"
  },
  {
    "text": "value on its write data (WD) port into the\naddressed memory location.",
    "start": "84850",
    "end": "91630"
  },
  {
    "text": "We need to add another MUX to select which\nvalue to write back to the register file:",
    "start": "91630",
    "end": "96740"
  },
  {
    "text": "the output of the ALU or the data returning\nfrom main memory.",
    "start": "96740",
    "end": "101000"
  },
  {
    "text": "We've used a 3-to-1 MUX and we'll see the\nuse for the other MUX input when we get to",
    "start": "101000",
    "end": "105330"
  },
  {
    "text": "the implementation of branches and jumps.",
    "start": "105330",
    "end": "108880"
  },
  {
    "text": "The two-bit WDSEL signal is used to select\nthe source of the write-back value.",
    "start": "108880",
    "end": "115090"
  },
  {
    "text": "Let's follow the flow of data when executing\nthe LD instruction.",
    "start": "115090",
    "end": "119359"
  },
  {
    "text": "The ALU operands are chosen just as they are\nfor the ADDC instruction and the ALU is requested",
    "start": "119360",
    "end": "125810"
  },
  {
    "text": "to perform an ADD operation.",
    "start": "125810",
    "end": "128399"
  },
  {
    "text": "The ALU result is connected to the address\nport of main memory, who's control signals",
    "start": "128399",
    "end": "133730"
  },
  {
    "text": "are set for a read operation.",
    "start": "133730",
    "end": "136310"
  },
  {
    "text": "The WDSEL control signals are set to 2 to\nroute the returning data to the register file.",
    "start": "136310",
    "end": "143340"
  },
  {
    "text": "Execution of the ST instruction is very similar\nto the execution of the LD instruction, with",
    "start": "143340",
    "end": "147750"
  },
  {
    "text": "one extra complication.",
    "start": "147750",
    "end": "150480"
  },
  {
    "text": "The value to be written to memory comes from\nthe RC register, but the RC instruction field",
    "start": "150480",
    "end": "155760"
  },
  {
    "text": "is not connected a register file read address.",
    "start": "155760",
    "end": "159780"
  },
  {
    "text": "Happily, the RB register address isn't being\nused by the ST instruction since the second",
    "start": "159780",
    "end": "165260"
  },
  {
    "text": "ALU operand comes from the literal field.",
    "start": "165260",
    "end": "168390"
  },
  {
    "text": "So we'll use a MUX to enable the RC field\nto be selected as the address for the register",
    "start": "168390",
    "end": "174420"
  },
  {
    "text": "file's second read port.",
    "start": "174420",
    "end": "176330"
  },
  {
    "text": "When the RA2SEL control signal is 0, the RB\nfield is selected as the address.",
    "start": "176330",
    "end": "182069"
  },
  {
    "text": "When RA2SEL is 1, the RC field is selected.",
    "start": "182069",
    "end": "187010"
  },
  {
    "text": "The output from the second read data port\nis connected to the write data port of main",
    "start": "187010",
    "end": "191319"
  },
  {
    "text": "memory.",
    "start": "191320",
    "end": "193510"
  },
  {
    "text": "The ST instruction is the only instruction\nthat does not write a result into the register",
    "start": "193510",
    "end": "198319"
  },
  {
    "text": "file.",
    "start": "198320",
    "end": "199480"
  },
  {
    "text": "So the WERF control signal will be 0 when\nexecuting ST.",
    "start": "199480",
    "end": "204730"
  },
  {
    "text": "Here's the flow of data when executing ST.",
    "start": "204730",
    "end": "207709"
  },
  {
    "text": "The operands are selected as for LD and the\nALU performs the address computation with",
    "start": "207710",
    "end": "213030"
  },
  {
    "text": "the result sent to main memory as the address.",
    "start": "213030",
    "end": "216980"
  },
  {
    "text": "Meanwhile the RC field is selected as the\naddress for the second register file read",
    "start": "216980",
    "end": "221810"
  },
  {
    "text": "port and the value from the RC register becomes\nthe write data for main memory.",
    "start": "221810",
    "end": "228040"
  },
  {
    "text": "By setting the MWR control signal to 1, the\nmain memory will write the WD data into the",
    "start": "228040",
    "end": "233640"
  },
  {
    "text": "selected memory location at the end of the\ncycle.",
    "start": "233640",
    "end": "238150"
  },
  {
    "text": "The WERF control signal is set to zero since\nwe won't be writing a value into the register",
    "start": "238150",
    "end": "242640"
  },
  {
    "text": "file.",
    "start": "242640",
    "end": "243640"
  },
  {
    "text": "And, since we're not writing to the register\nfile, we don't care about the value for the",
    "start": "243640",
    "end": "247590"
  },
  {
    "text": "WDSEL signal.",
    "start": "247590",
    "end": "249069"
  },
  {
    "text": "Of course, the logic will need to supply some\nvalue for WDSEL.",
    "start": "249070",
    "end": "253030"
  },
  {
    "text": "The \"don't care\" annotation is telling the\nlogic designer that she's welcome to supply",
    "start": "253030",
    "end": "258269"
  },
  {
    "text": "whatever value is most convenient.",
    "start": "258269",
    "end": "261320"
  },
  {
    "text": "This is particularly useful when using Karnaugh\nmaps to optimize the control logic, where",
    "start": "261320",
    "end": "266370"
  },
  {
    "text": "the value can be chosen as either 0 or 1,\nwhichever results in the best minimization",
    "start": "266370",
    "end": "272290"
  },
  {
    "text": "of the logic equations.",
    "start": "272290",
    "end": "273490"
  }
]