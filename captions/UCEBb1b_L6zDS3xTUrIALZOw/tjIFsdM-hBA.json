[
  {
    "text": "Boolean logic can be used to simplify logic\nequations into their simplest form.",
    "start": "1069",
    "end": "6809"
  },
  {
    "text": "This simplest form is known as the function's\nminimal sum of products representation.",
    "start": "6809",
    "end": "12639"
  },
  {
    "text": "Having a simplified equation allows us to\nimplement the function using the fewest number",
    "start": "12639",
    "end": "17369"
  },
  {
    "text": "of gates.\nOne commonly used method for taking any boolean",
    "start": "17369",
    "end": "21670"
  },
  {
    "text": "expression and converting it to its minimal\nsum-of-products equivalent is the use of Karnaugh",
    "start": "21670",
    "end": "27480"
  },
  {
    "text": "maps.\nThe way Karnaugh maps work is as follows.",
    "start": "27480",
    "end": "31570"
  },
  {
    "text": "You start with the original truth table specification\nof a function.",
    "start": "31570",
    "end": "35899"
  },
  {
    "text": "You then express each set of inputs, that\nmakes the function equal to 1, as a basic",
    "start": "35899",
    "end": "40780"
  },
  {
    "text": "product term.\nORing all of these product terms together",
    "start": "40780",
    "end": "45399"
  },
  {
    "text": "produces a sum of products representation\nfor the function.",
    "start": "45399",
    "end": "49050"
  },
  {
    "text": "Note that this representation is not yet minimal.\nFor our example, the sum of products is F",
    "start": "49050",
    "end": "56300"
  },
  {
    "text": "= NOT(A) NOT(B) NOT(C) + NOT(A) B C + A NOT(B)\nNOT(C) + A NOT(B) C + A B C.",
    "start": "56300",
    "end": "72119"
  },
  {
    "text": "We then create the Karnaugh map for the function\nby making a 2D grid representing all possible",
    "start": "72119",
    "end": "78350"
  },
  {
    "text": "input combinations, and ensuring that from\none column or row to the next in the grid,",
    "start": "78350",
    "end": "83900"
  },
  {
    "text": "only one single input can be changed.\nThis is known as Gray code.",
    "start": "83900",
    "end": "89240"
  },
  {
    "text": "Once we label the Karnaugh map, we can fill\nit with 1's for each combination that produces",
    "start": "89240",
    "end": "93979"
  },
  {
    "text": "a 1 output and 0 for each combination that\nproduces a 0 output.",
    "start": "93979",
    "end": "99469"
  },
  {
    "text": "Next, we try to merge as many adjacent ones\nas possible into groups that are of size that",
    "start": "99470",
    "end": "105130"
  },
  {
    "text": "is a power of 2.\nNote that adjacent ones can be merged across",
    "start": "105130",
    "end": "109930"
  },
  {
    "text": "rows, along columns, and across the edges\nof the Karnaugh map like a taurus.",
    "start": "109930",
    "end": "115170"
  },
  {
    "text": "Every largest grouping of 1's that is required\nin order to cover all of the one's becomes",
    "start": "115170",
    "end": "120758"
  },
  {
    "text": "one term in the minimal sum of products representation\nof the function.",
    "start": "120759",
    "end": "125740"
  },
  {
    "text": "To figure out what the term is, look at the\nlabels of all the columns and rows that are",
    "start": "125740",
    "end": "130440"
  },
  {
    "text": "covered by the grouping of 1's and eliminate\nall inputs that appear as both a 1 and 0 input.",
    "start": "130440",
    "end": "137720"
  },
  {
    "text": "Because these inputs are represented in both\ntheir 0 and 1 form, it means that that input",
    "start": "137720",
    "end": "143160"
  },
  {
    "text": "is not affecting the result of that term and\ncan thus be eliminated.",
    "start": "143160",
    "end": "147780"
  },
  {
    "text": "By doing this for all groupings of 1's and\nthen ORing the results together, one produces",
    "start": "147780",
    "end": "152980"
  },
  {
    "text": "a minimal sum of products representation for\nthe function.",
    "start": "152980",
    "end": "157190"
  },
  {
    "text": "Note that having overlapping ones in your\ngroupings is allowed and desired if it will",
    "start": "157190",
    "end": "162330"
  },
  {
    "text": "result in a simpler product term.\nIn our example, we circle the bottom two middle",
    "start": "162330",
    "end": "168340"
  },
  {
    "text": "1's which represent the term BC because A\nappears in both its low and high form in the",
    "start": "168340",
    "end": "174209"
  },
  {
    "text": "grouping.\nThe next set of ones are the two in the rightmost",
    "start": "174210",
    "end": "178510"
  },
  {
    "text": "column.\nThese ones represent the term A NOT(B).",
    "start": "178510",
    "end": "182620"
  },
  {
    "text": "Finally, our last grouping wraps around the\nfirst row to create the term NOT(B) NOT(C).",
    "start": "182620",
    "end": "189760"
  },
  {
    "text": "This is a minimal sum of products representation\nof our function.",
    "start": "189760",
    "end": "193750"
  },
  {
    "text": "Note, however, that instead of grouping the\ntwo one's in the rightmost column, we could",
    "start": "193750",
    "end": "198720"
  },
  {
    "text": "have instead grouped the two rightmost ones\nin the bottom row.",
    "start": "198720",
    "end": "202870"
  },
  {
    "text": "That would have produced the term AC instead\nof A NOT(B).",
    "start": "202870",
    "end": "207730"
  },
  {
    "text": "Either combination of terms is a valid minimal\nsum of products representation for this function.",
    "start": "207730",
    "end": "212720"
  }
]