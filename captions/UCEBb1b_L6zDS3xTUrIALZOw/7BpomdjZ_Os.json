[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help MIT\nOpenCourseWare continue to",
    "start": "0",
    "end": "7410"
  },
  {
    "text": "offer high quality educational\nresources for free. To make a donation or view\nadditional materials from",
    "start": "7410",
    "end": "13960"
  },
  {
    "text": "hundreds of MIT courses, visit\nMIT OpenCourseWare at",
    "start": "13960",
    "end": "19790"
  },
  {
    "text": "ocw.mit.edu.  PROFESSOR: So we're going to\npick up where we left off last",
    "start": "19790",
    "end": "25470"
  },
  {
    "text": "Friday on recursion.  Well first of all, can anyone\ntell me what recursion is or",
    "start": "25470",
    "end": "34240"
  },
  {
    "text": "what a recursive function is? ",
    "start": "34240",
    "end": "41614"
  },
  {
    "text": "No one knows. OK. AUDIENCE: To divide\nand conquer. PROFESSOR: OK. It's a divide-and-conquer\ntechnique.",
    "start": "41615",
    "end": "49710"
  },
  {
    "text": "How does it do it? It's a recursive function.",
    "start": "49710",
    "end": "56227"
  },
  {
    "text": "AUDIENCE: You have\na base case. And usually a return function,\nyou return",
    "start": "56228",
    "end": "61804"
  },
  {
    "text": "the value of something. But because you keep returning\nthe function back. PROFESSOR: Right. So it's a function that\ncalls itself.",
    "start": "61804",
    "end": "70590"
  },
  {
    "text": "And it works by one, identifying\na base case, which is the smallest sub-problem\npossible.",
    "start": "70590",
    "end": "78010"
  },
  {
    "text": "And then in the other case, the\nrecursive case, it tries to chunk the problem down into\na smaller sub-problem that it",
    "start": "78010",
    "end": "85910"
  },
  {
    "text": "then solves by calling itself. ",
    "start": "85910",
    "end": "91299"
  },
  {
    "text": "So we went over a\nfew examples. And one of the things that we\nwanted to talk about is that",
    "start": "91300",
    "end": "101500"
  },
  {
    "text": "for many problems, a recursive\nfunction can be written iteratively, or actually\nfor most problems.",
    "start": "101500",
    "end": "109360"
  },
  {
    "text": "So there usually is some sort of\na subjective choice in how",
    "start": "109360",
    "end": "116070"
  },
  {
    "text": "to write a function. And it really comes down to\nease of understanding. So what we've done is we've\ntaken a couple of the",
    "start": "116070",
    "end": "123840"
  },
  {
    "text": "algorithms that we\nshowed last week. And we've written them\niteratively.",
    "start": "123840",
    "end": "129130"
  },
  {
    "text": "We also have the recursive\nversion. We'll compare and contrast and\nsee where we would want to use",
    "start": "129130",
    "end": "137230"
  },
  {
    "text": "a recursive function. So on the screen on the\nleft here, we have the",
    "start": "137230",
    "end": "144900"
  },
  {
    "text": "multiplication version, the\nrecursive multiplication, that we showed you last week.",
    "start": "144900",
    "end": "150440"
  },
  {
    "text": "It's a little different because\nit turns out there's a couple of simplifications\nyou can make. ",
    "start": "150440",
    "end": "160930"
  },
  {
    "text": "Can someone walk me through\nhow this works? So what's my base case first?",
    "start": "160930",
    "end": "166470"
  },
  {
    "text": " AUDIENCE: 0",
    "start": "166470",
    "end": "171573"
  },
  {
    "text": "PROFESSOR: 0, right? And so obviously when n is 0, if\nwe multiply by 0, then our",
    "start": "171574",
    "end": "178010"
  },
  {
    "text": "result is 0. Now there are two\nrecursive cases.",
    "start": "178010",
    "end": "183129"
  },
  {
    "text": "And I'm not really sure how to\nexplain this intuitively.",
    "start": "183130",
    "end": "189600"
  },
  {
    "text": "But let's say that\nmy n is positive. So I'm multiplying\nby a positive n.",
    "start": "189600",
    "end": "195209"
  },
  {
    "text": "Well, then all I'm going to do\nis take m and just add it to",
    "start": "195210",
    "end": "201630"
  },
  {
    "text": "the recursive version of\nitself n minus 1 times. That's how to read that.",
    "start": "201630",
    "end": "209610"
  },
  {
    "text": "And then analogously, if n is\nless than or equal to 1, then",
    "start": "209610",
    "end": "216120"
  },
  {
    "text": "I'm going to take negative m and\nadd the recursive result of n plus 1 times m.",
    "start": "216120",
    "end": "223060"
  },
  {
    "text": " It is not too intuitive right?",
    "start": "223060",
    "end": "228099"
  },
  {
    "text": "So if we implement it\niteratively though, I think",
    "start": "228100",
    "end": "233506"
  },
  {
    "text": "it's a little easier\nto understand. Now this is also a subjective\njudgment, so you might disagree.",
    "start": "233506",
    "end": "239810"
  },
  {
    "text": "You're free to.  Here's our base case again. n is\nequal to 0 or m is equal to",
    "start": "239810",
    "end": "245940"
  },
  {
    "text": "0, return 0. In this case though, if we don't\nhave the base case, then",
    "start": "245940",
    "end": "252750"
  },
  {
    "text": "we're going to initialize\nthe result variable. And then for n is greater than\nor equal to 1, we're just",
    "start": "252750",
    "end": "260480"
  },
  {
    "text": "going to enter a while\nloop and keep adding m to result n times.",
    "start": "260480",
    "end": "265535"
  },
  {
    "text": " It's a little bit easier to\nunderstand I think than the",
    "start": "265535",
    "end": "271630"
  },
  {
    "text": "recursive version. And then same thing for-- Oh I have a bug here.",
    "start": "271630",
    "end": "277950"
  },
  {
    "start": "277950",
    "end": "284790"
  },
  {
    "text": "Same thing for n is less than\nequal to negative 1. So I'm going to run the two\nversions of this function.",
    "start": "284790",
    "end": "295020"
  },
  {
    "text": "So here's the recursive\nversion and here's the",
    "start": "295020",
    "end": "300250"
  },
  {
    "text": "iterative function. They both return the\nsame exact thing. They both work in generally\nthe same manner.",
    "start": "300250",
    "end": "307000"
  },
  {
    "text": "It's just that in one case we're\nusing recursion to solve it, which I don't find\ntoo intuitive.",
    "start": "307000",
    "end": "315350"
  },
  {
    "text": "And the other case, we're\nusing WHILE loops. All right.",
    "start": "315350",
    "end": "320580"
  },
  {
    "text": "So in this case in my opinion,\nwriting this iteratively, it",
    "start": "320580",
    "end": "326039"
  },
  {
    "text": "makes a little bit more\nintuitive sense. But in other cases, let's say\ngood old Fibonacci, we can",
    "start": "326040",
    "end": "347260"
  },
  {
    "text": "write the recursive\nversion and then the iterative version. ",
    "start": "347260",
    "end": "353479"
  },
  {
    "text": "So here's recursive Fibonacci. We have our base\ncase or cases.",
    "start": "353480",
    "end": "358975"
  },
  {
    "text": "And then we have our\nrecursive case. You can almost rewrite\nthe mathematical",
    "start": "358975",
    "end": "365990"
  },
  {
    "text": "formula from this directly. ",
    "start": "365990",
    "end": "378341"
  },
  {
    "text": "All right now.  Now what was it?",
    "start": "378342",
    "end": "383764"
  },
  {
    "start": "383765",
    "end": "394080"
  },
  {
    "text": "So here's the iterative\nversion of Fibonacci. ",
    "start": "394080",
    "end": "401480"
  },
  {
    "text": "We still have our base case. But when we get to what was the\nrecursive case, we have to",
    "start": "401480",
    "end": "410210"
  },
  {
    "text": "do a lot of bookkeeping. We have to save off the previous\nFibonacci what we're",
    "start": "410210",
    "end": "418000"
  },
  {
    "text": "currently computing. And then we have to iterate,\nget the next Fibonacci and",
    "start": "418000",
    "end": "427360"
  },
  {
    "text": "then save off the prior\nversions of it.",
    "start": "427360",
    "end": "433199"
  },
  {
    "text": "This is all stuff that in the\nrecursive version gets done for us by virtue of just calling\nanother function.",
    "start": "433200",
    "end": "439820"
  },
  {
    "text": " So this is an example of a\ncase where your recursive",
    "start": "439820",
    "end": "446730"
  },
  {
    "text": "version is actually a little\nbit easier to understand. Doesn't mean that it's\nmore efficient.",
    "start": "446730",
    "end": "453400"
  },
  {
    "text": "And later on in the class we'll\nactually use this to talk about complexity.",
    "start": "453400",
    "end": "460150"
  },
  {
    "text": "But the left version I think is\neasier to understand than the right version.",
    "start": "460150",
    "end": "465169"
  },
  {
    "text": "Are there any disagreements? ",
    "start": "465170",
    "end": "470870"
  },
  {
    "text": "If you disagree, I'm not\ngoing to bite you. So anyway, we can run this.",
    "start": "470870",
    "end": "476260"
  },
  {
    "text": "And we can see that the\noutput's identical. ",
    "start": "476260",
    "end": "481844"
  },
  {
    "text": "AUDIENCE: What's x-range? PROFESSOR: x-range? ",
    "start": "481845",
    "end": "487445"
  },
  {
    "text": "Probably something I shouldn't\nhave put in there. x-range is like range, except\nthat it returns what's known",
    "start": "487445",
    "end": "495470"
  },
  {
    "text": "as a generator object that\nyou can iterate over.",
    "start": "495470",
    "end": "501330"
  },
  {
    "text": "So that I don't have to explain\nthat right now-- Well actually, we'll probably\ntalk about it",
    "start": "501330",
    "end": "507870"
  },
  {
    "text": "later in the semester. ",
    "start": "507870",
    "end": "515669"
  },
  {
    "text": "The difference is efficiency. Range will return an\nentire list to you.",
    "start": "515669",
    "end": "521969"
  },
  {
    "text": "Whereas x-range is a little bit\nmore conservative in how it manages it's memory\nfor these purposes.",
    "start": "521970",
    "end": "529680"
  },
  {
    "text": "But changing it won't make a\ndifference in the program. And for a program as simple as\nthis, range is perfectly fine.",
    "start": "529680",
    "end": "539680"
  },
  {
    "text": "I just used x-range\nout of habit. So we'll do one last example.",
    "start": "539680",
    "end": "545149"
  },
  {
    "text": "And then we'll move on\nto a different topic. ",
    "start": "545150",
    "end": "550500"
  },
  {
    "text": "If I didn't mention it before,\nin problem set 4, recursion is highly recommended for the\nfinal portion of it.",
    "start": "550500",
    "end": "558760"
  },
  {
    "text": "So it's kind of important you\nunderstand what's going on.",
    "start": "558760",
    "end": "565690"
  },
  {
    "text": "Anyway, so remember we\nlooked at bisection",
    "start": "565690",
    "end": "573220"
  },
  {
    "text": "early on in the semester. And we showed you an iterative\nversion of bisection.",
    "start": "573220",
    "end": "579960"
  },
  {
    "text": "This shouldn't really\nbe unfamiliar to anyone at this point. ",
    "start": "579960",
    "end": "591529"
  },
  {
    "text": "So all this is doing is finding\nthe square root of a number using bisection search.",
    "start": "591530",
    "end": "598589"
  },
  {
    "text": "And we set our low and our\nhigh, get our midpoint.",
    "start": "598590",
    "end": "604900"
  },
  {
    "text": "And we just keep looping until\nwe get a value that when we",
    "start": "604900",
    "end": "610800"
  },
  {
    "text": "square it is close\nenough to x. ",
    "start": "610800",
    "end": "616769"
  },
  {
    "text": "And on each iteration we set\nour lows and our highs, depending on how good\nour guess was.",
    "start": "616770",
    "end": "624329"
  },
  {
    "text": " Now the recursive version\nlooks like this.",
    "start": "624330",
    "end": "631890"
  },
  {
    "text": "It has a few more\nlines of code. And before I launch into it,\ndid we explain default",
    "start": "631890",
    "end": "642820"
  },
  {
    "text": "parameters to you,\nfor functions? So Python has this feature where\nif you have a function",
    "start": "642820",
    "end": "657639"
  },
  {
    "text": "such as rec bisection search,\nyou can specify that certain",
    "start": "657640",
    "end": "663400"
  },
  {
    "text": "parameters are optional\nor you can give",
    "start": "663400",
    "end": "668490"
  },
  {
    "text": "default values to them. So let's just show a\nsimple example so I",
    "start": "668490",
    "end": "676480"
  },
  {
    "text": "can get past this. ",
    "start": "676480",
    "end": "700610"
  },
  {
    "text": "So if I define this function,\nthis one's really easy. All it's going to do\nis print out x. I can call it like this, in\nwhich case it's going to pass",
    "start": "700610",
    "end": "713540"
  },
  {
    "text": "150 in and x will be 150 when\nthe function's executing. ",
    "start": "713540",
    "end": "721130"
  },
  {
    "text": "See I'm not lying. Or I can call it like this. ",
    "start": "721130",
    "end": "729900"
  },
  {
    "text": "And it'll be 100. So that's, in a nutshell, what\ndefault parameters do for you.",
    "start": "729900",
    "end": "735720"
  },
  {
    "text": "They're useful in some\ninstances, as in this example. So in this recursive version of\nbisection square root, we",
    "start": "735720",
    "end": "753740"
  },
  {
    "text": "have a low and a high parameter\nthat we specify. It's exactly equivalent to the\nlow and the high parameter in",
    "start": "753740",
    "end": "759360"
  },
  {
    "text": "this iterative version. ",
    "start": "759360",
    "end": "766880"
  },
  {
    "text": "This is a common idiom for\nrecursive functions in Python. If we're calling it for the\nfirst time, we're not going to",
    "start": "766880",
    "end": "772839"
  },
  {
    "text": "specify in a low and a high. So low and high will be none\ncoming into this function.",
    "start": "772840",
    "end": "778090"
  },
  {
    "text": "And then we just set\nthem as we did in this iterative version. And then we set the midpoint.",
    "start": "778090",
    "end": "783920"
  },
  {
    "text": "And then we have slightly\ndifferent structure here. If the midpoint that we guess is\nclose enough to the square",
    "start": "783920",
    "end": "793850"
  },
  {
    "text": "root of x, then we just\nreturn the midpoint.",
    "start": "793850",
    "end": "800230"
  },
  {
    "text": "On the other hand, if it's too\nlow of a guess, then we're going to recursively call\nourselves with the same x,",
    "start": "800230",
    "end": "810230"
  },
  {
    "text": "same epsilon, but we're\ngoing to use midpoint for the low parameter. So midpoint, in this\ncase, is here and",
    "start": "810230",
    "end": "819520"
  },
  {
    "text": "the same high parameter. And then if we've guessed\ntoo high, then our low",
    "start": "819520",
    "end": "826970"
  },
  {
    "text": "parameter is low. And then our high parameter's\nthe midpoint. So it's doing the exact\nsame thing as the iterative version.",
    "start": "826970",
    "end": "833390"
  },
  {
    "text": "We have recursive, iterative,\nrecursive, iterative.",
    "start": "833390",
    "end": "838870"
  },
  {
    "text": "Same thing, just different\nforms.  All right. Before I leave recursion, does\nanyone have any questions, or",
    "start": "838870",
    "end": "849310"
  },
  {
    "text": "want to ask anything,\nor complain?",
    "start": "849310",
    "end": "855048"
  },
  {
    "text": "No? All right. AUDIENCE: Do you use a lot of\nrecursion in your work? Do you normally use iterative\nor recursion?",
    "start": "855048",
    "end": "862984"
  },
  {
    "text": "Or is it just case by case? PROFESSOR: It's case by case. It depends on the problem.",
    "start": "862984",
    "end": "868570"
  },
  {
    "text": "And what we are trying to show\nhere is that there are some",
    "start": "868570",
    "end": "876250"
  },
  {
    "text": "problems that are better\nexpressed recursively and others that are better expressed\niteratively.",
    "start": "876250",
    "end": "881639"
  },
  {
    "text": "And by better, it's a very\nsubjective term.",
    "start": "881640",
    "end": "886650"
  },
  {
    "text": "In my mind, it means more\nintuitive, easier to understand. It allows you to focus on\nsolving the problem rather",
    "start": "886650",
    "end": "894560"
  },
  {
    "text": "than fiddling with code. ",
    "start": "894560",
    "end": "899630"
  },
  {
    "text": "On the other hand, sometimes\nefficiency comes into play. And we're going to be talking\nabout that pretty shortly.",
    "start": "899630",
    "end": "906060"
  },
  {
    "text": "And in that case, you might want\nto do a recursive version because it's easier\nto understand. But it takes too long\nto run, so you write",
    "start": "906060",
    "end": "913220"
  },
  {
    "text": "an iterative version.  Computer programming, in a lot\nof cases, actually in all",
    "start": "913220",
    "end": "920370"
  },
  {
    "text": "cases, is a bunch\nof trade offs. Often times you'll trade off\nspeed for memory, elegance for",
    "start": "920370",
    "end": "929880"
  },
  {
    "text": "efficiency, that\nsort of thing. And part of the skill of\nbecoming good computer",
    "start": "929880",
    "end": "935950"
  },
  {
    "text": "programmers is figuring\nout where those balance points are. And it's something that I think\ncomes only comes with",
    "start": "935950",
    "end": "943700"
  },
  {
    "text": "experience. All right, so we've talked about\nfloating point to death.",
    "start": "943700",
    "end": "950700"
  },
  {
    "text": "But we just want to really\nemphasize it. Because it's something that\neven for experienced programmers, still\ntrips us up.",
    "start": "950700",
    "end": "959680"
  },
  {
    "text": "So the thing that we want you to\nunderstand is that floating point is inexact.",
    "start": "959680",
    "end": "965730"
  },
  {
    "text": "So you shouldn't compare\nfor exact equality.",
    "start": "965730",
    "end": "972430"
  },
  {
    "text": "So looking at the code here,\nI have to find a variable 10/100, which is just 10 over\n100, and 1/100, which is just",
    "start": "972430",
    "end": "980610"
  },
  {
    "text": "1 over 100, and then 9/100,\nwhich is 9 over 100. And so in real math, this\ncondition would be true.",
    "start": "980610",
    "end": "991330"
  },
  {
    "text": "I add 1/100 and 9/100. I should get 10/100.",
    "start": "991330",
    "end": "996810"
  },
  {
    "text": "So if we were not dealing\nin computer land, this would print out.",
    "start": "996810",
    "end": "1003310"
  },
  {
    "text": "But because we are dealing in\ncomputer-land, we get that.",
    "start": "1003310",
    "end": "1009580"
  },
  {
    "text": " And the reason is because of\nPython's representation.",
    "start": "1009580",
    "end": "1018460"
  },
  {
    "text": "Now when you write print x, if\nx is a float variable, Python does a little bit of nice\nformatting for you.",
    "start": "1018460",
    "end": "1025194"
  },
  {
    "text": "It kind of saves you from its\ninternal representation. ",
    "start": "1025194",
    "end": "1031740"
  },
  {
    "text": "So here is 10/100, as you\njust printed out.",
    "start": "1031740",
    "end": "1036780"
  },
  {
    "text": "It's what you would\nexpect it to be. But this is what Python sees\nwhen it does its math.",
    "start": "1036780",
    "end": "1041897"
  },
  {
    "text": " And it's not just Python. This applies for anything\non a binary computer.",
    "start": "1041898",
    "end": "1049650"
  },
  {
    "text": "It's an inherent limitation. And you know we can\nget arbitrarily",
    "start": "1049650",
    "end": "1055660"
  },
  {
    "text": "close, but never exact. ",
    "start": "1055660",
    "end": "1061300"
  },
  {
    "text": "And then again, we have 1/100\nand 9/100, Python",
    "start": "1061300",
    "end": "1068050"
  },
  {
    "text": "will show us 0.1. So when you print these out,\nthey'll look fine.",
    "start": "1068050",
    "end": "1073419"
  },
  {
    "text": "If you were writing debugging\ncode and you were wondering why if you compared x to y, it\nwasn't exactly equal, you",
    "start": "1073420",
    "end": "1081040"
  },
  {
    "text": "would naturally print out\nx and then print out y. But it would look\nequal to you. But the code wouldn't\nbe working properly.",
    "start": "1081040",
    "end": "1088100"
  },
  {
    "text": "Well the reason is, is that the\ninternal application that Python is using to compare\nthem is that.",
    "start": "1088100",
    "end": "1094890"
  },
  {
    "text": " So what's the solution?",
    "start": "1094890",
    "end": "1100050"
  },
  {
    "text": " It's a natural question.",
    "start": "1100050",
    "end": "1105490"
  },
  {
    "text": "I don't know the answer.  AUDIENCE: If they're close\nenough, then it would be",
    "start": "1105490",
    "end": "1113544"
  },
  {
    "text": "inside variance-- PROFESSOR: Right. We're going to say\ngood enough.",
    "start": "1113545",
    "end": "1119780"
  },
  {
    "text": "And the traditional way of\nrepresenting that is epsilon. Epsilon, you've seen in\nyour problem sets.",
    "start": "1119781",
    "end": "1127130"
  },
  {
    "text": "And you've seen it\nin code before. And if you've come to office\nhours, someone's probably explained it to you.",
    "start": "1127130",
    "end": "1132320"
  },
  {
    "text": "Epsilon is the amount of error\nwe're willing to tolerate in our calculations.",
    "start": "1132320",
    "end": "1138360"
  },
  {
    "text": "So in Python-land, you can\nhave arbitrary precision.",
    "start": "1138360",
    "end": "1147000"
  },
  {
    "text": "Don't quote me on that though. But for purposes of this class,\nif you're using an",
    "start": "1147000",
    "end": "1153290"
  },
  {
    "text": "epsilon it's like 0.0001,\nwe're not going to get too upset.",
    "start": "1153290",
    "end": "1158640"
  },
  {
    "text": " All this function does, and this\nis a handy function to",
    "start": "1158640",
    "end": "1164530"
  },
  {
    "text": "keep around, is it just tests to\nsee if the distance between",
    "start": "1164530",
    "end": "1171220"
  },
  {
    "text": "x and y are less than epsilon. If it is, then we say they're\nclose enough to each other to be considered equal.",
    "start": "1171220",
    "end": "1177220"
  },
  {
    "text": " So I don't like the function\nnamed compare.",
    "start": "1177220",
    "end": "1182740"
  },
  {
    "text": "I don't think it's intuitive. ",
    "start": "1182740",
    "end": "1189809"
  },
  {
    "text": "Close enough is probably\nbetter. ",
    "start": "1189810",
    "end": "1195450"
  },
  {
    "text": "But it's also going\nto break my code. ",
    "start": "1195450",
    "end": "1207590"
  },
  {
    "text": "Uh oh. This is an actual bug. ",
    "start": "1207590",
    "end": "1214390"
  },
  {
    "text": "Line 203. What did I do to myself? ",
    "start": "1214390",
    "end": "1223130"
  },
  {
    "text": "I commented out my definition\nis what I did. ",
    "start": "1223130",
    "end": "1232020"
  },
  {
    "text": "All right. So if we compare the two values,\n10/100 and 1/100 plus 9/100 and we use our close\nenough, our compare function,",
    "start": "1232020",
    "end": "1243720"
  },
  {
    "text": "then yeah it's within epsilon. ",
    "start": "1243720",
    "end": "1249059"
  },
  {
    "text": "Again, notice here that we're\nusing a default parameter. So if we don't pass in\nsomething explicitly.",
    "start": "1249060",
    "end": "1254480"
  },
  {
    "text": "So I can say something\nlike this. ",
    "start": "1254480",
    "end": "1261559"
  },
  {
    "text": "Let's make epsilon\nreally tiny. ",
    "start": "1261560",
    "end": "1283140"
  },
  {
    "text": "So if I make epsilon really,\nreally tiny, then it's going to say no. So how you determine epsilon\nreally depends on your",
    "start": "1283140",
    "end": "1294470"
  },
  {
    "text": "specific application. If you're doing high precision\nmathematics, you're modeling",
    "start": "1294470",
    "end": "1302590"
  },
  {
    "text": "faults on a bridge or something,\nprobably I want to be pretty precise.",
    "start": "1302590",
    "end": "1307850"
  },
  {
    "text": "Because if you have the wrong\nepsilon, then you might have cars falling of the bridge\nor the bridge collapsing.",
    "start": "1307850",
    "end": "1313630"
  },
  {
    "text": "And it would just\nbe a bad day. So are there any questions so\nfar about floating point?",
    "start": "1313630",
    "end": "1323080"
  },
  {
    "text": "No. AUDIENCE: You normally\ngo as close as the areas will let you.",
    "start": "1323080",
    "end": "1329130"
  },
  {
    "text": "PROFESSOR: What's that? AUDIENCE: You can't get\nas close anymore. How can you make the\nerror that small.",
    "start": "1329130",
    "end": "1336063"
  },
  {
    "text": "Because it's not going\nto get that close. PROFESSOR: Well yeah,\nthat's what I mean. So there is a limit to how\nclose you can get.",
    "start": "1336063",
    "end": "1343700"
  },
  {
    "text": "And it depends on the\nlanguage and it also depends on the hardware. ",
    "start": "1343700",
    "end": "1349390"
  },
  {
    "text": "There are, and this group is\ngetting a little bit more technical than I want, but you\ncan define pretty precisely",
    "start": "1349390",
    "end": "1358470"
  },
  {
    "text": "the smallest value that\nepsilon can be.",
    "start": "1358470",
    "end": "1363580"
  },
  {
    "text": "In a language like C, its\ndefined as the minimum",
    "start": "1363580",
    "end": "1372570"
  },
  {
    "text": "difference between two floating\npoint variables that's representable on the\nhost machine's hardware.",
    "start": "1372570",
    "end": "1380639"
  },
  {
    "text": "So yeah, there is a limit. There are some math packages\nthough, and we'll be using",
    "start": "1380640",
    "end": "1389550"
  },
  {
    "text": "something called NumPy later\non the semester, that allow you to do pretty high precision\nmathematics.",
    "start": "1389550",
    "end": "1396033"
  },
  {
    "text": " Keep that in the back\nof your mind. But yeah you're right.",
    "start": "1396033",
    "end": "1402179"
  },
  {
    "text": "You do eventually hit a limit. ",
    "start": "1402180",
    "end": "1407380"
  },
  {
    "text": "OK so the last thing that I\nwant to cover on floating point is that even though it's\ninexact, it's consistent.",
    "start": "1407380",
    "end": "1420690"
  },
  {
    "text": "So let's say I define a variable\n9/100 plus 1/100.",
    "start": "1420690",
    "end": "1427870"
  },
  {
    "text": "And it's exactly what it\nsays, 9/100 plus 1/100. Now we know that this is not\ngoing to equal 10/100, right.",
    "start": "1427870",
    "end": "1434570"
  },
  {
    "text": "We just demonstrated\nthat ad nauseum. And also, yeah, still defined.",
    "start": "1434570",
    "end": "1442230"
  },
  {
    "text": "The question though is, if I\nsubtract 1/100 from this",
    "start": "1442230",
    "end": "1447630"
  },
  {
    "text": "variable that I've defined, this\n9/100 plus 1/100, will",
    "start": "1447630",
    "end": "1454380"
  },
  {
    "text": "9/100 now be equal to\n9/100 plus 1/100?",
    "start": "1454380",
    "end": "1459760"
  },
  {
    "text": "So in other words, will\nthis be true? And the answer is yes.",
    "start": "1459760",
    "end": "1469100"
  },
  {
    "text": "And the reason is that if I'm\nadding or subtracting, even",
    "start": "1469100",
    "end": "1476510"
  },
  {
    "text": "though 1/100 we know is an\ninexact representation, it's still the same.",
    "start": "1476510",
    "end": "1482490"
  },
  {
    "text": "And so when we do the\nsubtraction, we're subtracting the same inexact value. So this appeared as a quiz\nquestion at one point.",
    "start": "1482490",
    "end": "1497605"
  },
  {
    "text": "It probably won't\nthis semester. But it's something\nto keep in mind.",
    "start": "1497605",
    "end": "1504890"
  },
  {
    "text": "So any questions on\nfloating point?",
    "start": "1504890",
    "end": "1511780"
  },
  {
    "text": "If you're a mathy type and want\nto, look up IEEE 754.",
    "start": "1511780",
    "end": "1521680"
  },
  {
    "text": "And this will give you all\nthe gory details about representation and mathematical\noperations on",
    "start": "1521680",
    "end": "1527100"
  },
  {
    "text": "floating point. And if you don't, then\ndon't worry about it. It's not required\nfor the class.",
    "start": "1527100",
    "end": "1534450"
  },
  {
    "text": "OK. So the next topic we want\nto cover is pseudocode.",
    "start": "1534450",
    "end": "1541730"
  },
  {
    "text": "So can someone take a stab at\ndefining pseudocode for me? AUDIENCE: From what I gathered,\nit's basically",
    "start": "1541730",
    "end": "1550220"
  },
  {
    "text": "you're writing out what you're\nplanning on doing in just normal English.",
    "start": "1550220",
    "end": "1555621"
  },
  {
    "text": "PROFESSOR: I wouldn't just\nsay normal English. But it's an English of sorts. ",
    "start": "1555621",
    "end": "1564000"
  },
  {
    "text": "And a lot of the difficulty\nthat programmers have with writing programs or new programs\nis that we don't",
    "start": "1564000",
    "end": "1572309"
  },
  {
    "text": "naturally think in computer\nlanguages.  You think in English.",
    "start": "1572310",
    "end": "1578350"
  },
  {
    "text": "Or well, you think in\na human language. So what pseudocode allows us to\ndo is to kind of be in the",
    "start": "1578350",
    "end": "1588080"
  },
  {
    "text": "intermediate. We still want to develop a\nstep by step process for solving a problem, but we want\nto be able to describe it in",
    "start": "1588080",
    "end": "1595280"
  },
  {
    "text": "words and not variables\nand syntax.",
    "start": "1595280",
    "end": "1602670"
  },
  {
    "text": "Sometimes what'll happen is\nprogrammers will get so wrapped around kind of getting\nthe syntax right that they'll",
    "start": "1602670",
    "end": "1607680"
  },
  {
    "text": "forget the problem that they're actually trying to solve. So let's walk through\nan example.",
    "start": "1607680",
    "end": "1618150"
  },
  {
    "text": "Let's talk about pseudocode\nfor Hangman. ",
    "start": "1618150",
    "end": "1623590"
  },
  {
    "text": "And because you've all done\nthis on the problem set, I don't have to explain\nthe rules right. So what would be a good\nkind of English",
    "start": "1623590",
    "end": "1630930"
  },
  {
    "text": "first step for Hangman? ",
    "start": "1630930",
    "end": "1639715"
  },
  {
    "text": "AUDIENCE: You have\nto choose a word. PROFESSOR: Right. So let's not be too specific.",
    "start": "1639715",
    "end": "1646175"
  },
  {
    "text": "We'll just say, select\nrandom word. ",
    "start": "1646175",
    "end": "1655170"
  },
  {
    "text": "OK. Now what would be another\ngood step, next step. ",
    "start": "1655170",
    "end": "1662065"
  },
  {
    "text": "AUDIENCE: Display the amount\nof spaces maybe? PROFESSOR: So display a masked\nversion of the word.",
    "start": "1662065",
    "end": "1670351"
  },
  {
    "text": "AUDIENCE: Exactly. Hide the word but display it. PROFESSOR: Hide the word\nbut display it.",
    "start": "1670352",
    "end": "1676422"
  },
  {
    "text": "AUDIENCE: Well, display\nthe amount of spaces. ",
    "start": "1676422",
    "end": "1683892"
  },
  {
    "text": "You probably want to state how\nmany letters are in the word at some point. PROFESSOR: Ah, that's\na good point.",
    "start": "1683892",
    "end": "1689450"
  },
  {
    "text": "Where should that go? AUDIENCE: That should probably\nbe before the display. PROFESSOR: OK. So tell how many letters.",
    "start": "1689450",
    "end": "1697630"
  },
  {
    "start": "1697630",
    "end": "1703430"
  },
  {
    "text": "All right. Now what would come\nafter this? AUDIENCE: After display? PROFESSOR: Yeah. AUDIENCE: See how many letters\nyou have to choose from.",
    "start": "1703430",
    "end": "1710377"
  },
  {
    "text": "PROFESSOR: OK. ",
    "start": "1710378",
    "end": "1717713"
  },
  {
    "text": "AUDIENCE: First time\nyou don't. PROFESSOR: At first\ntime you don't. But the nice thing about\npseudocode is that we can barf",
    "start": "1717713",
    "end": "1725840"
  },
  {
    "text": "things onto paper and then\nrearrange them as we-- It's sort of like brainstorming\nin a sense.",
    "start": "1725840",
    "end": "1731070"
  },
  {
    "text": " You're trying to derive\nthe structure.",
    "start": "1731070",
    "end": "1737580"
  },
  {
    "text": "And it's easier to do like\nthis than to try and do it in code.",
    "start": "1737580",
    "end": "1743660"
  },
  {
    "text": "But yeah, you're right. You don't have to. AUDIENCE: You would ask the\nperson to put a letter.",
    "start": "1743660",
    "end": "1750539"
  },
  {
    "text": "PROFESSOR: OK. For a letter. And then what would\ncome after that?",
    "start": "1750540",
    "end": "1757965"
  },
  {
    "text": "AUDIENCE: So then you want\nto check if it's the --",
    "start": "1757965",
    "end": "1763409"
  },
  {
    "text": "PROFESSOR: Check if\nit's in the word. ",
    "start": "1763410",
    "end": "1772320"
  },
  {
    "text": "All right. And? AUDIENCE: If it is-- PROFESSOR: If it is?",
    "start": "1772320",
    "end": "1777721"
  },
  {
    "text": "AUDIENCE: Add it to the word. PROFESSOR: Add, let's say,\nto correct letters guess.",
    "start": "1777721",
    "end": "1783030"
  },
  {
    "text": "AUDIENCE: Yeah. ",
    "start": "1783030",
    "end": "1790825"
  },
  {
    "text": "PROFESSOR: OK. And if it isn't? AUDIENCE: If it isn't,\nreject it. ",
    "start": "1790825",
    "end": "1798940"
  },
  {
    "text": "PROFESSOR: Let's say-- AUDIENCE: You want to remove\nit from the options.",
    "start": "1798940",
    "end": "1804462"
  },
  {
    "text": "PROFESSOR: So if it's not, then\nwe're going to remove from options. ",
    "start": "1804462",
    "end": "1811219"
  },
  {
    "text": "So letters remaining. ",
    "start": "1811219",
    "end": "1816470"
  },
  {
    "text": "Probably want to tell the\nuser they're wrong too. AUDIENCE: And use up a turn.",
    "start": "1816470",
    "end": "1822080"
  },
  {
    "text": "PROFESSOR: What's that? AUDIENCE: You want\nto use up a turn. PROFESSOR: I'm sorry. AUDIENCE: Then you\nuse up a turn.",
    "start": "1822080",
    "end": "1829218"
  },
  {
    "text": "If you had a set amount\nof turns. PROFESSOR: OK, so we're\nactually going get to that in a second. AUDIENCE: I sent last week.",
    "start": "1829218",
    "end": "1834395"
  },
  {
    "text": "[INAUDIBLE] game. PROFESSOR: I actually played\nall of your Hangman games. It was quite fun.",
    "start": "1834395",
    "end": "1840412"
  },
  {
    "text": " So again, yeah you're right.",
    "start": "1840412",
    "end": "1846760"
  },
  {
    "text": "So we have a number of guesses\nthat are remaining. And the thing is that we know\nthat the user has a certain",
    "start": "1846760",
    "end": "1856399"
  },
  {
    "text": "number of terms. So we're probably going to\nrepeat a lot of this. So at some point, we probably\nwant to have a WHILE.",
    "start": "1856400",
    "end": "1866890"
  },
  {
    "text": "It'll just say, WHILE we have\nguesses left remaining.",
    "start": "1866890",
    "end": "1877455"
  },
  {
    "text": " By the way, the reason why I\nprogram computers is because",
    "start": "1877455",
    "end": "1884259"
  },
  {
    "text": "my handwriting is horrible. So WHILE we have guesses\nremaining, we're going to keep",
    "start": "1884260",
    "end": "1889559"
  },
  {
    "text": "doing all this. All right? And then we're going\nto remove--",
    "start": "1889560",
    "end": "1895715"
  },
  {
    "start": "1895715",
    "end": "1903590"
  },
  {
    "text": "But is this the only\nstopping criteria? What if they win?",
    "start": "1903590",
    "end": "1910140"
  },
  {
    "text": "So WHILE they have guesses\nremaining and",
    "start": "1910140",
    "end": "1915630"
  },
  {
    "text": "the word is not guessed. ",
    "start": "1915630",
    "end": "1922700"
  },
  {
    "text": "So this is in essence your\nHangman program. It's English language.",
    "start": "1922700",
    "end": "1929559"
  },
  {
    "text": "It's not easy to read because\nthat's my handwriting. But it's kind of easy\nto understand it at an intuitive level.",
    "start": "1929560",
    "end": "1934620"
  },
  {
    "text": " And the reason we're talking\nabout this is because we're",
    "start": "1934620",
    "end": "1939990"
  },
  {
    "text": "going to get to some more\ncomplicated programs as we move through the semester.",
    "start": "1939990",
    "end": "1946670"
  },
  {
    "text": "And a good starting off point\nfor a lot of you, when you're trying to do your problem sets,\nis instead of trying to",
    "start": "1946670",
    "end": "1953190"
  },
  {
    "text": "jump right into the coding\nportion of it, to sit down with a piece of paper, index\ncards, or a whiteboard and",
    "start": "1953190",
    "end": "1959539"
  },
  {
    "text": "kind of sketch out a high level\nview of the algorithm. ",
    "start": "1959540",
    "end": "1966600"
  },
  {
    "text": "So that we can see this\nin code form.",
    "start": "1966600",
    "end": "1972250"
  },
  {
    "text": "So let's say that I want to\nwrite a function that tests a",
    "start": "1972250",
    "end": "1977760"
  },
  {
    "text": "number to see if it's prime. First question is, what\nis a prime number?",
    "start": "1977760",
    "end": "1987225"
  },
  {
    "text": "AUDIENCE: One where the only\nfactors are 1 and itself. PROFESSOR: Right. So a number that is only\ndivisible by itself and 1.",
    "start": "1987225",
    "end": "1996390"
  },
  {
    "text": " Are even numbers prime?",
    "start": "1996390",
    "end": "2001990"
  },
  {
    "text": "Can they ever be prime? Really? What about 2? Right.",
    "start": "2001990",
    "end": "2007250"
  },
  {
    "text": "So 2 is one of our\nspecial cases. All right. So what would be maybe a good\nstarting off point for",
    "start": "2007250",
    "end": "2016550"
  },
  {
    "text": "pseudocode to test primality,\nknowing those facts.",
    "start": "2016550",
    "end": "2021935"
  },
  {
    "text": " AUDIENCE: [INAUDIBLE]",
    "start": "2021935",
    "end": "2027020"
  },
  {
    "text": "PROFESSOR: All right. Can I erase this or should\nI leave it up? Because I can go over there.",
    "start": "2027020",
    "end": "2033180"
  },
  {
    "start": "2033180",
    "end": "2039570"
  },
  {
    "text": "It's not like I'm erasing\nany deep dark secrets. There's no magic here.",
    "start": "2039570",
    "end": "2046190"
  },
  {
    "text": "All right so test number, if,\nwhat, equal to, say what?",
    "start": "2046190",
    "end": "2059510"
  },
  {
    "text": "2? Yeah. Why not? And maybe 3.",
    "start": "2059510",
    "end": "2064750"
  },
  {
    "text": " Now what do I do if it is?",
    "start": "2064750",
    "end": "2071679"
  },
  {
    "start": "2071679",
    "end": "2077595"
  },
  {
    "text": "Are they prime?  So I'm done right. So I'm going to return true.",
    "start": "2077595",
    "end": "2086095"
  },
  {
    "text": " Now what do I do if the number\ngiven is not 2 or 3?",
    "start": "2086095",
    "end": "2094773"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: You're talking about\nthe module operator. Right.",
    "start": "2094774",
    "end": "2100089"
  },
  {
    "text": "So we will use that. That will tell us whether or not\nan integer divides evenly",
    "start": "2100090",
    "end": "2106200"
  },
  {
    "text": "into another integer or the\nremainder after an integer is divided into another integer. ",
    "start": "2106200",
    "end": "2113290"
  },
  {
    "text": "Let me ask you another\nquestion. What is the maximum value of\nan integer divisor for a",
    "start": "2113290",
    "end": "2119165"
  },
  {
    "text": "non-prime number? So for a composite number. AUDIENCE: So itself. PROFESSOR: What's that?",
    "start": "2119165",
    "end": "2124555"
  },
  {
    "text": "AUDIENCE: Number itself. PROFESSOR: OK, excluding\nthe number itself.",
    "start": "2124555",
    "end": "2130060"
  },
  {
    "text": " Well let's say that I have n\nas the number I'm testing,",
    "start": "2130060",
    "end": "2139110"
  },
  {
    "text": "square root of n, because I'm\nnot going to have a factor that's larger than that.",
    "start": "2139110",
    "end": "2146100"
  },
  {
    "text": "And I ask that because there's\na loop involved. So how would I go about\nthis systematically?",
    "start": "2146100",
    "end": "2154944"
  },
  {
    "text": "I'd probably start\nat, let's say 5.",
    "start": "2154945",
    "end": "2162000"
  },
  {
    "text": " OK. And then test if n modula, let's\nsay 5, is equal to 0.",
    "start": "2162000",
    "end": "2178099"
  },
  {
    "text": "Now if n is evenly divisible by\n5, then that must mean that",
    "start": "2178100",
    "end": "2183250"
  },
  {
    "text": "n is composite, because\n5 is a factor. So if it is then return false.",
    "start": "2183250",
    "end": "2196065"
  },
  {
    "text": " Now what if it isn't?",
    "start": "2196065",
    "end": "2205690"
  },
  {
    "text": "So that means that n is not\nevenly divisible by 5. Does that mean that the number's\nautomatically prime?",
    "start": "2205690",
    "end": "2212760"
  },
  {
    "text": "So after 5, what would\nbe a good number to test, to move to? ",
    "start": "2212760",
    "end": "2222450"
  },
  {
    "text": "All right. 6? No. That wouldn't be it.",
    "start": "2222450",
    "end": "2228089"
  },
  {
    "text": "Because if 6 is a factor,\nthen obviously it's not.",
    "start": "2228090",
    "end": "2235790"
  },
  {
    "text": "Whatever. So we're going to\nmove on to 7. ",
    "start": "2235790",
    "end": "2245370"
  },
  {
    "text": "So basically we're going to\ntest all the odd numbers. And this is going to be\nthe same as that.",
    "start": "2245370",
    "end": "2251540"
  },
  {
    "text": "So this repetition indicates\nhere that I probably need a loop.",
    "start": "2251540",
    "end": "2256730"
  },
  {
    "text": "So instead of doing this, I want\nto say x is equal to 5",
    "start": "2256730",
    "end": "2270390"
  },
  {
    "text": "while x is less than--",
    "start": "2270390",
    "end": "2277075"
  },
  {
    "text": " We're going to test if\nx evenly divides n.",
    "start": "2277075",
    "end": "2290340"
  },
  {
    "start": "2290340",
    "end": "2296100"
  },
  {
    "text": "And if it does, return false.",
    "start": "2296100",
    "end": "2303280"
  },
  {
    "text": "And if it doesn't, then we just\nincrement x and repeat.",
    "start": "2303280",
    "end": "2316740"
  },
  {
    "text": "And what happens when x\nbecomes greater than square root of n?",
    "start": "2316740",
    "end": "2323420"
  },
  {
    "text": "Well the WHILE loop's\ngoing to stop. And that also means that if I've\nmade it to that point,",
    "start": "2323420",
    "end": "2328510"
  },
  {
    "text": "then I've not found any numbers\nbetween 5 and square root of n that will\nevenly divide n.",
    "start": "2328510",
    "end": "2335960"
  },
  {
    "text": "So that means that n is prime.",
    "start": "2335960",
    "end": "2343160"
  },
  {
    "text": "So if I translate this into\ncode, it would look",
    "start": "2343160",
    "end": "2368020"
  },
  {
    "text": "something like this. ",
    "start": "2368020",
    "end": "2373350"
  },
  {
    "text": "Now I see.",
    "start": "2373350",
    "end": "2378700"
  },
  {
    "text": " So first we're going to\ncheck if n is less",
    "start": "2378700",
    "end": "2384490"
  },
  {
    "text": "than or equal to 3. If it's 2 or 3, then\nwe'll return true.",
    "start": "2384490",
    "end": "2390370"
  },
  {
    "text": "If it's not 2 or 3, then\nthat means it's 1 or 0. So return false.",
    "start": "2390370",
    "end": "2397040"
  },
  {
    "text": "So we've got those cases. And then we're going\nto iterate-- or if n is greater than 3,\nwe're going to iterate--",
    "start": "2397040",
    "end": "2404950"
  },
  {
    "text": " now why would you go from 2--",
    "start": "2404950",
    "end": "2411450"
  },
  {
    "text": "we're going to integrate through\nall the possible divisors and check\nfor divisibility.",
    "start": "2411450",
    "end": "2418119"
  },
  {
    "text": " And if we evenly divide\nit, return false.",
    "start": "2418120",
    "end": "2423760"
  },
  {
    "text": "And if we make it through the\nloop, we'd return true. ",
    "start": "2423760",
    "end": "2429399"
  },
  {
    "text": "AUDIENCE: Does that RETURN\nstop the loop? PROFESSOR: Yes.",
    "start": "2429399",
    "end": "2436119"
  },
  {
    "text": "Well think about what\nRETURN is doing. You're in this function, test\nprimality, And as soon as",
    "start": "2436120",
    "end": "2442800"
  },
  {
    "text": "Python sees return, that's\ntelling Python to kick out of the function and return\nwhatever is",
    "start": "2442800",
    "end": "2449990"
  },
  {
    "text": "after the return statement. So this false here, it says\nreturn false, that means that",
    "start": "2449990",
    "end": "2455250"
  },
  {
    "text": "it doesn't matter where you are,\nit's just going to kick out of the innermost function or\nthe function that encloses that return and return\nthat value.",
    "start": "2455250",
    "end": "2461290"
  },
  {
    "text": " Any questions?",
    "start": "2461290",
    "end": "2467380"
  },
  {
    "text": " All right. ",
    "start": "2467380",
    "end": "2481630"
  },
  {
    "text": "So testing primality, 1 is\nfalse, 2 is true, 3 is true, 4",
    "start": "2481630",
    "end": "2487220"
  },
  {
    "text": "is false, and 5 is true. So it looks like the\nprogram works.",
    "start": "2487220",
    "end": "2494730"
  },
  {
    "text": "And if no one has any questions,\nI'm going to move on to the last major topic. ",
    "start": "2494730",
    "end": "2503720"
  },
  {
    "text": "Everyone's good on pseudocode? All right. AUDIENCE: What would the main\npurpose of pseudocode is for",
    "start": "2503720",
    "end": "2511867"
  },
  {
    "text": "yourself when you're writing a\nprogram or when you want to explain it to other people? PROFESSOR: Both.",
    "start": "2511867",
    "end": "2518769"
  },
  {
    "text": "So the question was, is writing\npseudocode useful for just understanding a program\nyourself or for explaining it to other people?",
    "start": "2518770",
    "end": "2525390"
  },
  {
    "text": "The answer is both. ",
    "start": "2525390",
    "end": "2531000"
  },
  {
    "text": "I don't know. It's the difference between\nshowing someone the derivative of the function and then\nexplaining that what you're",
    "start": "2531000",
    "end": "2538059"
  },
  {
    "text": "doing is finding a function that\ngives you the slope of a function at that point.",
    "start": "2538060",
    "end": "2543620"
  },
  {
    "text": "So it's one is more\nintuitive for some people than the other.",
    "start": "2543620",
    "end": "2550415"
  },
  {
    "text": "A mathematician would\nunderstand the former pretty quickly. An English major would\nunderstand the latter maybe.",
    "start": "2550415",
    "end": "2556720"
  },
  {
    "start": "2556720",
    "end": "2562440"
  },
  {
    "text": "So when I explain my research\nto people, I don't tell them",
    "start": "2562440",
    "end": "2567849"
  },
  {
    "text": "that I mess around with Gaussian\nMixture models and Hidden Markov models.",
    "start": "2567850",
    "end": "2574310"
  },
  {
    "text": "I tell them that I'm trying\nto figure out how people mispronounce words when they\nspeak foreign languages.",
    "start": "2574310",
    "end": "2580869"
  },
  {
    "text": "A lot easier for people\nto digest. With debugging, what are bugs?",
    "start": "2580870",
    "end": "2587500"
  },
  {
    "text": "AUDIENCE: Mistakes. PROFESSOR: Mistakes. And if you see one bug, there\nare probably many more.",
    "start": "2587500",
    "end": "2595615"
  },
  {
    "text": " So when you're debugging, your\ngoal is not to move quickly.",
    "start": "2595615",
    "end": "2604520"
  },
  {
    "text": "This is an instance where the\nmaxim fast is slow and slow is fast comes into play.",
    "start": "2604520",
    "end": "2611890"
  },
  {
    "text": "You want to be very deliberate\nand systematic when you're trying to debug code.",
    "start": "2611890",
    "end": "2617380"
  },
  {
    "text": "You want to ask the question\nwhy your code is doing what it does. And remember, the first\nrecitation I said, that your",
    "start": "2617380",
    "end": "2626720"
  },
  {
    "text": "computer's not going to do\nanything that you do not tell it to do. ",
    "start": "2626720",
    "end": "2635420"
  },
  {
    "text": "It's not something that\npeople do naturally. If you watch some of the TAs and\nsometimes a student will",
    "start": "2635420",
    "end": "2644370"
  },
  {
    "text": "say, how do you find\nthe bug so quickly? Well it's because I've been\nprogramming for 18 years.",
    "start": "2644370",
    "end": "2651590"
  },
  {
    "text": "Professor Guttag's\nbeen programming for longer than that. So a lot of it is experience. And it's just when we've debug\nour own programs and when we",
    "start": "2651590",
    "end": "2661050"
  },
  {
    "text": "were learning to program, it\nwas as painful for us as it was for you. So that said, you want to start\nwith asking, how could",
    "start": "2661050",
    "end": "2671990"
  },
  {
    "text": "your code have produced the\noutput that it did? Then you want to figure out\nsome experiments that are",
    "start": "2671990",
    "end": "2680200"
  },
  {
    "text": "repeatable and that you have\nan idea of what the output should be.",
    "start": "2680200",
    "end": "2687020"
  },
  {
    "text": "So after you do that, then you\nwant to test your code one by",
    "start": "2687020",
    "end": "2694920"
  },
  {
    "text": "one on these different test\ncases and see what it does.",
    "start": "2694920",
    "end": "2700510"
  },
  {
    "text": "And in order to see\nwhat it does, you can use a print statement. So when you think you found a\nbug and you think you have a",
    "start": "2700510",
    "end": "2710460"
  },
  {
    "text": "solution to your code, you want\nto make as few changes as possible at a time, it's because\nas you're making",
    "start": "2710460",
    "end": "2720500"
  },
  {
    "text": "corrections, you can still\nintroduce bugs. ",
    "start": "2720500",
    "end": "2728230"
  },
  {
    "text": "Let's see. So a useful way to do this\nis to use a test harness. So when we actually grade your\nproblem sets, a lot of the",
    "start": "2728230",
    "end": "2735339"
  },
  {
    "text": "time the TAs will put together\na set of test cases for your code.",
    "start": "2735340",
    "end": "2741840"
  },
  {
    "text": "So one of the things is a lot of\nthe times when you get one of the problems or when you look\nat the problems, it'll",
    "start": "2741840",
    "end": "2748130"
  },
  {
    "text": "have some example input\nand output. But that doesn't necessarily\nmean that we",
    "start": "2748130",
    "end": "2753250"
  },
  {
    "text": "only test on that. There's additional test\ncases that we use. And it's not to trip you up.",
    "start": "2753250",
    "end": "2758630"
  },
  {
    "text": "It's because there's a lot\nof different variations.  And it's also, if you read the\nspecification, you follow the",
    "start": "2758630",
    "end": "2767470"
  },
  {
    "text": "specification, then\nyou'll be fine. Moving on.",
    "start": "2767470",
    "end": "2773420"
  },
  {
    "text": "So let's look at an example. I have a function here,\nis palindrome.",
    "start": "2773420",
    "end": "2778570"
  },
  {
    "text": "You've seen this\nbefore, right? Yes? Yeah. OK.",
    "start": "2778570",
    "end": "2783940"
  },
  {
    "text": "So it's supposed to return\ntrue if string s is a palindrome.",
    "start": "2783940",
    "end": "2790340"
  },
  {
    "text": "And so I've written\nthis function. And I've also written\na test harness. Now there's a lot more code in\nthe test harness, but it's",
    "start": "2790340",
    "end": "2798130"
  },
  {
    "text": "pretty simple code. ",
    "start": "2798130",
    "end": "2804039"
  },
  {
    "text": "When you're writing functions,\nyou want to think of the type of input you could receive.",
    "start": "2804040",
    "end": "2809970"
  },
  {
    "text": "And you want to think\nof, what are the kind of boundary cases?",
    "start": "2809970",
    "end": "2815520"
  },
  {
    "text": "So the extremes of input\nthat you can get. We call these boundary\ncases, edge cases.",
    "start": "2815520",
    "end": "2821000"
  },
  {
    "text": "For the is_palindrome function,\nit would be like the empty string would be one.",
    "start": "2821000",
    "end": "2827960"
  },
  {
    "text": "Or just a single character. These are the kind of minimum\nwe can have or",
    "start": "2827960",
    "end": "2835600"
  },
  {
    "text": "we could think of. On the opposite end of the\nspectrum, theoretically we",
    "start": "2835600",
    "end": "2841269"
  },
  {
    "text": "could have an infinitely\nlong string. So we're not going to\nactually test for an",
    "start": "2841270",
    "end": "2846349"
  },
  {
    "text": "infinitely long string. Anyway, all we're going to do is\nin our test harness, we're",
    "start": "2846350",
    "end": "2852710"
  },
  {
    "text": "just going to run the function\non these inputs. And we know that an empty\nstring should be true.",
    "start": "2852710",
    "end": "2858740"
  },
  {
    "text": "We know that a single character string should be true.  We know that if I have a string\nthat's two characters",
    "start": "2858740",
    "end": "2867630"
  },
  {
    "text": "long and they're the\nsame character, that should be true. If they're two characters,\nthen it should be false.",
    "start": "2867630",
    "end": "2873099"
  },
  {
    "text": " And what I'm going to do now\nis I'm looking at kind of",
    "start": "2873100",
    "end": "2879694"
  },
  {
    "text": "expecting what we call\nexpected input. So after I've hit my edge cases,\nI'm going to look at",
    "start": "2879694",
    "end": "2885710"
  },
  {
    "text": "all the strings of an even\nlength and make sure that the function works properly.",
    "start": "2885710",
    "end": "2891890"
  },
  {
    "text": "And then I'm going to look at\nstrings with an odd length. And then once I get to this\npoint where I've tested a",
    "start": "2891890",
    "end": "2899490"
  },
  {
    "text": "number of different lengths, and\nin this case, it's just 2 through 5 or 0 through\n5, if you want to include the edge cases.",
    "start": "2899490",
    "end": "2906630"
  },
  {
    "text": "Then I'm going to say, well it\nlooks like all tests are pass. And I think that this function\nworks pretty good for anything",
    "start": "2906630",
    "end": "2912210"
  },
  {
    "text": "we can expect it to encounter\nreasonably. So the way that you use test\nharnesses, is every time you",
    "start": "2912210",
    "end": "2921540"
  },
  {
    "text": "make a change to your program,\nyou want to run the test harness, because that'll catch\nany bugs you may have",
    "start": "2921540",
    "end": "2927950"
  },
  {
    "text": "introduced. And so I'm going to finish up\nwith this really quickly because I know my time's up.",
    "start": "2927950",
    "end": "2933119"
  },
  {
    "text": " So I got a bug. It's telling me that one of\nmy test cases failed.",
    "start": "2933120",
    "end": "2941910"
  },
  {
    "text": "So line 299, which is\nthis test case.",
    "start": "2941910",
    "end": "2948339"
  },
  {
    "text": "So what we can do is now that we\nknow that it fails, we can",
    "start": "2948340",
    "end": "2956430"
  },
  {
    "text": "say, maybe printout our input\nand see what we have.",
    "start": "2956430",
    "end": "2966270"
  },
  {
    "text": "And instead of just running, I'm\njust going to run that one",
    "start": "2966270",
    "end": "2973150"
  },
  {
    "text": "test case that failed. ",
    "start": "2973150",
    "end": "2986450"
  },
  {
    "text": "So obviously this\nshould be true. And what we're seeing is that\non the first call to",
    "start": "2986450",
    "end": "2991760"
  },
  {
    "text": "is_palindrome, s is abba. And then on the recursive call\nto it, we only get bba.",
    "start": "2991760",
    "end": "3002119"
  },
  {
    "text": "That means that we've\nonly chopped of the front character. So you see the bug?",
    "start": "3002120",
    "end": "3007170"
  },
  {
    "text": " Well here.",
    "start": "3007170",
    "end": "3012600"
  },
  {
    "text": " So there we go.",
    "start": "3012600",
    "end": "3018330"
  },
  {
    "start": "3018330",
    "end": "3023273"
  }
]