[
  {
    "start": "0",
    "end": "21000"
  },
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help MIT\nOpenCourseWare continue to",
    "start": "0",
    "end": "6910"
  },
  {
    "text": "offer high quality educational\nresources for free. To make a donation or view\nadditional materials from",
    "start": "6910",
    "end": "13460"
  },
  {
    "text": "hundreds of MIT courses, visit\nMIT OpenCourseWare at",
    "start": "13460",
    "end": "19290"
  },
  {
    "text": "ocw.mit.edu.  PROFESSOR: For those of you who\nare unaccustomed to seeing",
    "start": "19290",
    "end": "24880"
  },
  {
    "start": "21000",
    "end": "66000"
  },
  {
    "text": "it, that blue stuff through\nthe window is called sky. ",
    "start": "24880",
    "end": "32159"
  },
  {
    "text": "OK. I left you last time\nwith a question.",
    "start": "32159",
    "end": "37220"
  },
  {
    "text": "I'd shown you a bisection search\nimplementation, or I should say putative\nimplementation of the square",
    "start": "37220",
    "end": "44550"
  },
  {
    "text": "root, and told you that it was\nflawed, and asked you to think about what was wrong with it.",
    "start": "44550",
    "end": "51610"
  },
  {
    "text": "So first, I'd just like\nto take a poll. How many of you know what the\nproblem is, or at least what a",
    "start": "51610",
    "end": "57230"
  },
  {
    "text": "problem is? OK well that's a good start. And I won't ask how many of\nyou don't know, because I",
    "start": "57230",
    "end": "64319"
  },
  {
    "text": "presume that's the\nrest of you. So let's look at it now. I'm not going to ask you the\nanswer, because I want to show",
    "start": "64319",
    "end": "71750"
  },
  {
    "start": "66000",
    "end": "104000"
  },
  {
    "text": "people how to find it. So here's a slightly simplified\nversion of it.",
    "start": "71750",
    "end": "78500"
  },
  {
    "start": "78500",
    "end": "85920"
  },
  {
    "text": "Just get rid of this stuff here,\nso it doesn't confuse the picture. ",
    "start": "85920",
    "end": "95070"
  },
  {
    "text": "So this is roughly the one we\nlooked at on Tuesday, but I just took out some print\nstatements and things and",
    "start": "95070",
    "end": "100250"
  },
  {
    "text": "simplified it. And let's just run it.",
    "start": "100250",
    "end": "106770"
  },
  {
    "start": "104000",
    "end": "177000"
  },
  {
    "text": "And we'll run it with\ntrying to find the square root of 0.5.",
    "start": "106770",
    "end": "113610"
  },
  {
    "text": "See what happens\nwhen we run it. ",
    "start": "113610",
    "end": "121729"
  },
  {
    "text": "Well, not much happens\nwhen we run it. Actually quite a lot\nis happening. We just can't see it.",
    "start": "121730",
    "end": "128000"
  },
  {
    "text": "So this program is running\nlonger than I expected it to. So if you go to the keyboard and\nyou hit Control and C. It",
    "start": "128000",
    "end": "138990"
  },
  {
    "text": "will interrupt the program. It generates what's called\na keyboard interrupt, and it stops it.",
    "start": "138990",
    "end": "147430"
  },
  {
    "text": "And it tells us where it\nhappened to stop it. It happened to stop\nit in line seven--",
    "start": "147430",
    "end": "153300"
  },
  {
    "text": "the test of the while loop. And the problem is, the program\njust seemed to be",
    "start": "153300",
    "end": "158650"
  },
  {
    "text": "running forever. So despite my, perhaps\npersuasive, argument last time",
    "start": "158650",
    "end": "165240"
  },
  {
    "text": "about the decrementing function,\nthere's clearly a flaw in my logic. And, in fact, it does not\nalways terminate.",
    "start": "165240",
    "end": "173730"
  },
  {
    "text": "So what do we do about it? Well this is the main trick.",
    "start": "173730",
    "end": "179260"
  },
  {
    "start": "177000",
    "end": "298000"
  },
  {
    "text": "And one of the things I need\nyou to understand this semester is perhaps the most\nimportant thing you'll learn",
    "start": "179260",
    "end": "188010"
  },
  {
    "text": "is how to debug programs. Too many people think the hard\npart is done when they write",
    "start": "188010",
    "end": "194330"
  },
  {
    "text": "the code the first time. No, that's actually\nthe easy part. The hard part is actually\ngetting it to work.",
    "start": "194330",
    "end": "202820"
  },
  {
    "text": "So the thing you need to learn\nis how to debug code, and the nice thing is it's a\ntransferable skill.",
    "start": "202820",
    "end": "209580"
  },
  {
    "text": "It's also fine for debugging\nlab experiences or family members or anything else that\ncan be seriously awry.",
    "start": "209580",
    "end": "218290"
  },
  {
    "text": "So the way I do it when I\nprogram is typically with print statements.",
    "start": "218290",
    "end": "223660"
  },
  {
    "text": "So the fact that the program was\nrunning forever, suggests that I'm not exiting\nthe while loop.",
    "start": "223660",
    "end": "230510"
  },
  {
    "text": "So clearly, I need to print\nsomething in the while loop. ",
    "start": "230510",
    "end": "236350"
  },
  {
    "text": "And the only three variables\nit seems to be using are answer, low, and high.",
    "start": "236350",
    "end": "244280"
  },
  {
    "text": "Those are the three\nthat change. So let's see what\nthe value is.",
    "start": "244280",
    "end": "249680"
  },
  {
    "text": "Notice, by the way, that I\nactually went to the trouble to type ans equals ans, low\nequals low, et cetera.",
    "start": "249680",
    "end": "258898"
  },
  {
    "text": "A lot of people would just say,\nOK I'm going to print and they'll ans comma\nlow comma high.",
    "start": "258899",
    "end": "265420"
  },
  {
    "text": "And then when they run\nthe code they'll forget which is which. The most common problem that\npeople have in debugging",
    "start": "265420",
    "end": "273880"
  },
  {
    "text": "programs is that\nthey are lazy. They think they're saving\nthemselves work, and in fact",
    "start": "273880",
    "end": "281330"
  },
  {
    "text": "they're creating work. So my first piece of\nadvice to you as debuggers is don't be lazy.",
    "start": "281330",
    "end": "289100"
  },
  {
    "text": "Maybe you heard this from your\nmother at some point in life, or your father. But now you're hearing\nit from me.",
    "start": "289100",
    "end": "295000"
  },
  {
    "text": "Try and just do it right\nthe first time. So let's run it and see\nwhat happens now.",
    "start": "295000",
    "end": "300985"
  },
  {
    "start": "298000",
    "end": "386000"
  },
  {
    "text": " Well at least it's printing\nsome output.",
    "start": "300985",
    "end": "306085"
  },
  {
    "text": " And it's chugging away\nand chug-- uh-oh--",
    "start": "306085",
    "end": "313610"
  },
  {
    "text": "so now, we see we have\na real problem. We've reached a fixed point,\nwhere every time through the",
    "start": "313610",
    "end": "322819"
  },
  {
    "text": "loop, nothing is changing. Well the first time we go\nthrough the loop and nothing changes we know we're in\ntrouble, because nothing's",
    "start": "322820",
    "end": "331550"
  },
  {
    "text": "going to ever change. And therefore, we're going to\nbe in the loop forever. So we see, I've gone\nto a stage where",
    "start": "331550",
    "end": "339120"
  },
  {
    "text": "everything equals 0.5. And now if I go back and look at\nthe code, and I ask myself",
    "start": "339120",
    "end": "346620"
  },
  {
    "text": "the question well what happens\nwhen everything is 0.5, and I",
    "start": "346620",
    "end": "352070"
  },
  {
    "text": "can see the problem. It's this statement here. ",
    "start": "352070",
    "end": "360270"
  },
  {
    "text": "Yep, turn it around maybe.  But that's never going to change\nnow, because it's 0.5",
    "start": "360270",
    "end": "368600"
  },
  {
    "text": "plus 0.5, divided by 2 is 0.5.",
    "start": "368600",
    "end": "375230"
  },
  {
    "text": "And it'll just stay\nthere forever. So that's my problem. I have to somehow change\nmy code now, so that",
    "start": "375230",
    "end": "382770"
  },
  {
    "text": "this doesn't happen.  So what is the problem?",
    "start": "382770",
    "end": "389610"
  },
  {
    "start": "386000",
    "end": "456000"
  },
  {
    "text": "Now somebody can tell\nme, simply. What is the problem here? What was the flaw in my\nreasoning when I first set",
    "start": "389610",
    "end": "397570"
  },
  {
    "text": "this program up? Yeah? AUDIENCE: [INAUDIBLE]",
    "start": "397570",
    "end": "404652"
  },
  {
    "text": "PROFESSOR: Louder please? AUDIENCE: You don't have a high\nminus low is less than or equal to epsilon.",
    "start": "404652",
    "end": "412019"
  },
  {
    "text": "PROFESSOR: So the comment was I\ndon't have a high minus low is less than or equal\nto epsilon.",
    "start": "412019",
    "end": "418230"
  },
  {
    "text": "True, but that's not really\nthe real flaw. Yeah?",
    "start": "418230",
    "end": "423569"
  },
  {
    "text": "AUDIENCE: The fraction is\ngreater than the original fraction, so the solution is\nnot in the search space. PROFESSOR: Exactly.",
    "start": "423569",
    "end": "429979"
  },
  {
    "text": "So the answer is the problem was\nthat I did a search in a",
    "start": "429980",
    "end": "436700"
  },
  {
    "text": "region, and the answer wasn't\nin that region. Because the square root\nof 0.5 does not lie",
    "start": "436700",
    "end": "445770"
  },
  {
    "text": "between 0 and 0.5. Silly me, when I thought about\nit, I didn't think of finding",
    "start": "445770",
    "end": "452860"
  },
  {
    "text": "the square root of numbers\nless than 1. So what's a simple fix?",
    "start": "452860",
    "end": "460380"
  },
  {
    "start": "456000",
    "end": "586000"
  },
  {
    "text": "Well what I can do is the\nfollowing: I'll go back and say high is going to be\nthe max of x and 1.",
    "start": "460380",
    "end": "468895"
  },
  {
    "start": "468895",
    "end": "474199"
  },
  {
    "text": "So now I'm going to ensure that\nthe square root actually does lie in the region\nI'm searching. ",
    "start": "474200",
    "end": "482050"
  },
  {
    "text": "I hope. Let's run it. Ah.",
    "start": "482050",
    "end": "487289"
  },
  {
    "text": "All right, well I got to some\nstuff at the end which you shouldn't worry about, but it\nfound something that I guess",
    "start": "487290",
    "end": "494800"
  },
  {
    "text": "is a good enough answer. ",
    "start": "494800",
    "end": "501724"
  },
  {
    "text": "We'll get rid of that code I\nput in this morning which",
    "start": "501724",
    "end": "518990"
  },
  {
    "text": "we'll get to this later. ",
    "start": "518990",
    "end": "528090"
  },
  {
    "text": "OK so I've now fixed\nthe program. Everyone with me on that?",
    "start": "528090",
    "end": "533410"
  },
  {
    "text": "Any questions? And the thing to understand is\nconceptually what was wrong",
    "start": "533410",
    "end": "539600"
  },
  {
    "text": "with my reasoning, that I'm\ndoing a search in a region where the answer doesn't lie.",
    "start": "539600",
    "end": "545139"
  },
  {
    "text": "So I'm not going to find it. And the other thing to\nunderstand is my systematic",
    "start": "545140",
    "end": "550920"
  },
  {
    "text": "way of finding the bug. Now I confess I knew the bug\nwas there when I wrote the",
    "start": "550920",
    "end": "556120"
  },
  {
    "text": "code, so I kind of cheated\nwith the debugging. But even if I hadn't\nknown, this is what I would have done.",
    "start": "556120",
    "end": "561490"
  },
  {
    "text": "I would have put in that\nprint statement. All right, so now we have\nactually a pretty good piece",
    "start": "561490",
    "end": "568769"
  },
  {
    "text": "of code for finding\nsquare roots. And as we looked at on Tuesday,\nI can use the same",
    "start": "568770",
    "end": "574540"
  },
  {
    "text": "piece of code. I can modify it to get cube\nroots, or fourth roots, or",
    "start": "574540",
    "end": "579640"
  },
  {
    "text": "fifth roots. And so I have a general\nframework for doing things.",
    "start": "579640",
    "end": "586029"
  },
  {
    "text": "But it's pretty unsatisfying in\nthat sense, because let's",
    "start": "586030",
    "end": "592020"
  },
  {
    "text": "look at it. If I wanted to find the square\nroot of some number other than",
    "start": "592020",
    "end": "598060"
  },
  {
    "text": "0.5, I have to go and edit the\ncode, replace the assignment",
    "start": "598060",
    "end": "604216"
  },
  {
    "text": "to x by whatever I'm\ntrying to do. If I want to do cube roots I\nhave to cut and paste and edit",
    "start": "604216",
    "end": "611880"
  },
  {
    "text": "and do things.  There's no very good way to now\nembed this piece of code",
    "start": "611880",
    "end": "619560"
  },
  {
    "text": "inside a larger computation. Imagine that I've got some\n10,000 line program that needs",
    "start": "619560",
    "end": "627330"
  },
  {
    "text": "to find the square root six or\nseven times, well now I'm going to have six or seven\ncopies of this code in my",
    "start": "627330",
    "end": "633500"
  },
  {
    "text": "program, for every time I\nneed the square root. ",
    "start": "633500",
    "end": "639230"
  },
  {
    "text": "Clearly not what\nyou want to do.  In general, having more\ncode is a bad thing.",
    "start": "639230",
    "end": "649870"
  },
  {
    "text": "So it's not like you're given an\nessay to write and someone tells you it's got to be 5,000\nwords, and you just sweat",
    "start": "649870",
    "end": "657030"
  },
  {
    "text": "blood trying to figure out how\nto stretch it to be that long. In code, it's the other\nway around.",
    "start": "657030",
    "end": "664020"
  },
  {
    "text": "Most of the time we want to make\nit shorter not longer. And the reason we want to do\nthat is the difficulty of",
    "start": "664020",
    "end": "671330"
  },
  {
    "text": "getting code to work grows,\nmaybe even grows quadratically, or worse but\nthe size of the code.",
    "start": "671330",
    "end": "679860"
  },
  {
    "text": "So the more code you have,\nthe harder it is to get it to work. So one of the things good\nprogrammers learn to do is",
    "start": "679860",
    "end": "686950"
  },
  {
    "text": "write less code. And so we don't measure\nproductivity of a programmer",
    "start": "686950",
    "end": "692839"
  },
  {
    "text": "by the number of lines of code\nthey produce each day, but we measure it by the amount\nof functionality they",
    "start": "692840",
    "end": "698889"
  },
  {
    "text": "produce each day. And we give them bonus points\nif they achieve the desired functionality with less code.",
    "start": "698890",
    "end": "706610"
  },
  {
    "text": "So let's talk about how\nwe can write less code and accomplish more.",
    "start": "706610",
    "end": "714980"
  },
  {
    "text": "Well to do that, we're going\nto look at a new language mechanism--",
    "start": "714980",
    "end": "720090"
  },
  {
    "start": "716000",
    "end": "1059000"
  },
  {
    "text": "actually not new, but\nnew to this class-- called a function.",
    "start": "720090",
    "end": "725750"
  },
  {
    "text": "But before we do that, I want\nto pull back and talk about",
    "start": "725750",
    "end": "731310"
  },
  {
    "text": "what it is we hope to accomplish\nby introducing functions into our programming\nlanguage.",
    "start": "731310",
    "end": "738610"
  },
  {
    "text": "We want to provide a mechanism\nthat provides for two things:",
    "start": "738610",
    "end": "744160"
  },
  {
    "text": "decomposition and abstraction.",
    "start": "744160",
    "end": "751899"
  },
  {
    "start": "751900",
    "end": "762400"
  },
  {
    "text": "What decomposition does, is\nit creates structure. ",
    "start": "762400",
    "end": "775770"
  },
  {
    "text": "It allows us to break our\nprogram up into something called modules.",
    "start": "775770",
    "end": "780990"
  },
  {
    "text": " And the module we'll focus on\ntoday is function, but later",
    "start": "780990",
    "end": "787440"
  },
  {
    "text": "we'll see there's another\nimportant kind of module in Python called the class.",
    "start": "787440",
    "end": "793900"
  },
  {
    "text": "And the advantage of a module is\nit should be self-contained",
    "start": "793900",
    "end": "802650"
  },
  {
    "text": "and reusable.  So it's a self-contained unit\nof functionality that can be",
    "start": "802650",
    "end": "810510"
  },
  {
    "text": "used in multiple contexts. ",
    "start": "810510",
    "end": "815680"
  },
  {
    "text": "Abstraction suppresses\ndetails. ",
    "start": "815680",
    "end": "828410"
  },
  {
    "text": "It allows us to use a piece\nof code as if it were a black box.",
    "start": "828410",
    "end": "835070"
  },
  {
    "text": "That is, something whose\ninterior details we can't see, don't need to see, and shouldn't\neven want to see.",
    "start": "835070",
    "end": "843640"
  },
  {
    "text": " We only need to understand\nwhat it does,",
    "start": "843640",
    "end": "849220"
  },
  {
    "text": "not how it does it. And that lets us use code\nthat other people",
    "start": "849220",
    "end": "855610"
  },
  {
    "text": "have written easily. And, in fact, use code that\nwe have written easily.",
    "start": "855610",
    "end": "861095"
  },
  {
    "text": " It's one of those few occasions\nwhere I think Thomas",
    "start": "861095",
    "end": "868790"
  },
  {
    "text": "Gray was right, when he said,\n\"ignorance is bliss.\" Sometimes knowing\nless is better.",
    "start": "868790",
    "end": "875505"
  },
  {
    "text": " All right, so let's look at\nthe way functions work.",
    "start": "875505",
    "end": "881399"
  },
  {
    "text": "The functions let us\nbreak code into reusable, coherent pieces.",
    "start": "881400",
    "end": "889390"
  },
  {
    "text": "Now we've already looked at\nsimilar kinds of things. When we looked at say floating\npoint numbers, and we wrote",
    "start": "889390",
    "end": "897089"
  },
  {
    "text": "operations like plus or divide,\nwhatever, we didn't worry about how they\nwere actually",
    "start": "897090",
    "end": "903240"
  },
  {
    "text": "implemented in the machine. We said OK they do something,\nthey're kind of like dividing real numbers, let's not worry\nabout the details.",
    "start": "903240",
    "end": "910570"
  },
  {
    "text": " We do that with a\nlot of things. We looked at strings.",
    "start": "910570",
    "end": "916589"
  },
  {
    "text": "We concatenated strings. Well we didn't worry about\nhow did Python go about doing that.",
    "start": "916590",
    "end": "922589"
  },
  {
    "text": "We just assumed it did it,\nand it had the meaning we wanted it to.",
    "start": "922590",
    "end": "927709"
  },
  {
    "text": "What functions let us do is\nextend the language in some sense by adding new primitives\nthat we can use just the way",
    "start": "927710",
    "end": "938290"
  },
  {
    "text": "we used the built-in\nprimitives.  So let's look at an\nexample here.",
    "start": "938290",
    "end": "946060"
  },
  {
    "text": "I've written a very\nsimple function. ",
    "start": "946060",
    "end": "956440"
  },
  {
    "text": "Does something that we actually\ndid already when we looked at square roots.",
    "start": "956440",
    "end": "962220"
  },
  {
    "text": "It's a function called\nwithin epsilon. And let me comment this out\nwhile I'm thinking about it,",
    "start": "962220",
    "end": "969990"
  },
  {
    "text": "so we don't have to live\nwith it later. ",
    "start": "969990",
    "end": "977150"
  },
  {
    "text": "And I now want to walk you,\nslowly, through what this function does.",
    "start": "977150",
    "end": "983550"
  },
  {
    "text": "So at the start, it uses the\nkeyword Def, short for define.",
    "start": "983550",
    "end": "990399"
  },
  {
    "text": "Following that is a name. I chose the name\nwithin epsilon.",
    "start": "990400",
    "end": "995519"
  },
  {
    "text": "You can choose any name you\nwant for a function. I'm strongly encourage you to\nchoose mnemonic names, that is",
    "start": "995520",
    "end": "1003660"
  },
  {
    "text": "to say names that\nhave a meaning. So in some sense you see it says\nwithin epsilon, and you",
    "start": "1003660",
    "end": "1010430"
  },
  {
    "text": "know what it does already. Following that, it has three\nthings called formal",
    "start": "1010430",
    "end": "1017070"
  },
  {
    "text": "parameters. I'll come back to in a minute,\nwhat that means.",
    "start": "1017070",
    "end": "1022459"
  },
  {
    "text": "And then after that, it's\ngot something called the function body.",
    "start": "1022460",
    "end": "1027959"
  },
  {
    "text": "So we see that a function has a\nname, it has parameters, and",
    "start": "1027960",
    "end": "1041589"
  },
  {
    "text": "it has a body.  The body is the code that's\npart of the function.",
    "start": "1041589",
    "end": "1048990"
  },
  {
    "start": "1048990",
    "end": "1056380"
  },
  {
    "text": "In the body, you can write\nany code you want.",
    "start": "1056380",
    "end": "1061600"
  },
  {
    "start": "1059000",
    "end": "1093000"
  },
  {
    "text": "Plus, there's something you\ncan't write outside of a function, called return.",
    "start": "1061600",
    "end": "1068160"
  },
  {
    "text": "That's a special command that\nsays whoever calls me has",
    "start": "1068160",
    "end": "1074760"
  },
  {
    "text": "called me to have me\ncompute a value. I'm going to return the value\nthat this person would want.",
    "start": "1074760",
    "end": "1081570"
  },
  {
    "text": "And then here we see something\nthat's very important. This is where we get\nabstraction, and that's the",
    "start": "1081570",
    "end": "1089380"
  },
  {
    "text": "specification of the function. And it says here, there\nare two pieces to it.",
    "start": "1089380",
    "end": "1095170"
  },
  {
    "start": "1093000",
    "end": "1163000"
  },
  {
    "text": "One that its parameters x, y,\nand epsilon, are all floats.",
    "start": "1095170",
    "end": "1101720"
  },
  {
    "text": "And furthermore, epsilon\nis greater than 0. ",
    "start": "1101720",
    "end": "1108450"
  },
  {
    "text": "You can imagine this is\nimportant, and it returns true",
    "start": "1108450",
    "end": "1114789"
  },
  {
    "text": "if x is within epsilon of y. Otherwise it will\nreturn false.",
    "start": "1114790",
    "end": "1122450"
  },
  {
    "text": "If I want to use within epsilon,\nI don't need to look at the code.",
    "start": "1122450",
    "end": "1129130"
  },
  {
    "text": "I look instead at the\nspecification. Now here where the code is one\nline, maybe I haven't gained a",
    "start": "1129130",
    "end": "1136730"
  },
  {
    "text": "lot by looking at the\nspecification instead of the code. But you can imagine if the code\nwere 1,000 lines, I'd",
    "start": "1136730",
    "end": "1144350"
  },
  {
    "text": "much rather read the\nspecification than the code. We'll also see for other reasons\nlater why it's in fact",
    "start": "1144350",
    "end": "1154920"
  },
  {
    "text": "dangerous to look at the code. ",
    "start": "1154920",
    "end": "1160210"
  },
  {
    "text": "How do I use it? I use it by invoking it.",
    "start": "1160210",
    "end": "1167210"
  },
  {
    "start": "1163000",
    "end": "1321000"
  },
  {
    "text": "So I could, for example write\nsomething like print within",
    "start": "1167210",
    "end": "1174559"
  },
  {
    "text": "epsilon, of two, three, one.",
    "start": "1174560",
    "end": "1185210"
  },
  {
    "text": "What's it going to print?  Pardon?",
    "start": "1185210",
    "end": "1190840"
  },
  {
    "text": "Why is it going to print\nan error do you think? AUDIENCE: Because you\nhaven't put epsilon. PROFESSOR: Ah, typed it wrong.",
    "start": "1190840",
    "end": "1195875"
  },
  {
    "text": "Thank you. You're correct. It would have printed\nan error.",
    "start": "1195875",
    "end": "1201320"
  },
  {
    "text": "Now what will it print? AUDIENCE: [INAUDIBLE] ",
    "start": "1201320",
    "end": "1208270"
  },
  {
    "text": "PROFESSOR: Sure enough.  I could also, if I chose,\nwrite something like val",
    "start": "1208270",
    "end": "1219850"
  },
  {
    "text": "equals that, then if I want\nI could print val.",
    "start": "1219850",
    "end": "1237575"
  },
  {
    "start": "1237575",
    "end": "1242750"
  },
  {
    "text": "Now it's going to print false. So within epsilon is just like\nplus or something else, does",
    "start": "1242750",
    "end": "1249760"
  },
  {
    "text": "some computation,\nreturns a value. I can use that value any place\nI could have used an",
    "start": "1249760",
    "end": "1256529"
  },
  {
    "text": "expression.  Now one more thing to\nlook at with this.",
    "start": "1256530",
    "end": "1263130"
  },
  {
    "text": "Suppose I don't return\nanything. ",
    "start": "1263130",
    "end": "1271799"
  },
  {
    "text": "Anyone want to guess what\nit's going to do now? I point this out, because this\nis a very common error.",
    "start": "1271800",
    "end": "1277830"
  },
  {
    "text": "People write lots of code,\ncalculate some wonderful value and then forget to return it.",
    "start": "1277830",
    "end": "1285059"
  },
  {
    "text": "What's it going to do now? Well let's run it and see. That, by the way, is a good\nhabit to get into.",
    "start": "1285060",
    "end": "1292770"
  },
  {
    "text": "It's going to return the\nspecial value none. Remember we looked at that\nearlier, meaning I",
    "start": "1292770",
    "end": "1298150"
  },
  {
    "text": "don't have a value. So if you see in your code some\nnone popping up where you",
    "start": "1298150",
    "end": "1305330"
  },
  {
    "text": "don't expect it to, it's\nprobably because you forgot to",
    "start": "1305330",
    "end": "1310820"
  },
  {
    "text": "return a value. So just keep that in mind. ",
    "start": "1310820",
    "end": "1317980"
  },
  {
    "text": "All right, now there's a\nbig advantage of this.",
    "start": "1317980",
    "end": "1324870"
  },
  {
    "text": "Once I've written this code I\ncan now anywhere I want call",
    "start": "1324870",
    "end": "1330630"
  },
  {
    "text": "within epsilon, and I don't have\nto duplicate the code. I only do it once.",
    "start": "1330630",
    "end": "1336010"
  },
  {
    "text": " As I said earlier maybe I'm not\ngaining much, because the",
    "start": "1336010",
    "end": "1342010"
  },
  {
    "text": "body is so short. On the other hand, I'm still\ngaining something.",
    "start": "1342010",
    "end": "1349490"
  },
  {
    "text": "Notice that when I look at the\ncode down here, it's easy to",
    "start": "1349490",
    "end": "1355880"
  },
  {
    "text": "read, I'm printing within\nepsilon two, three, and one. ",
    "start": "1355880",
    "end": "1362010"
  },
  {
    "text": "And I don't have to decode this\nand tell me that that's what that's doing.",
    "start": "1362010",
    "end": "1367420"
  },
  {
    "text": "So if I have a function and I\nchoose the names properly, code that uses the function\nis much easier to read.",
    "start": "1367420",
    "end": "1376460"
  },
  {
    "text": "And that can be a big value. ",
    "start": "1376460",
    "end": "1384000"
  },
  {
    "text": "All right, let's look\nat another example. ",
    "start": "1384000",
    "end": "1392880"
  },
  {
    "text": "So here I've got this\nfunction, f. ",
    "start": "1392880",
    "end": "1399470"
  },
  {
    "text": "I've chose a non-mnemonic name,\nbecause there isn't much meaning to this function. ",
    "start": "1399470",
    "end": "1407650"
  },
  {
    "text": "What f does, it is a\nformal parameter x. It sets x to x plus 1.",
    "start": "1407650",
    "end": "1414220"
  },
  {
    "text": "Then it prints x\nand returns x-- pretty boring. ",
    "start": "1414220",
    "end": "1426340"
  },
  {
    "text": "So let's see what\nit does here. ",
    "start": "1426340",
    "end": "1432299"
  },
  {
    "text": "So now I'm going to set x to\nthree, set z, or zed if you",
    "start": "1432300",
    "end": "1438260"
  },
  {
    "text": "happen to be Canadian,\nto f of x. And then print the values\nof z and x.",
    "start": "1438260",
    "end": "1445899"
  },
  {
    "text": "Also in f, before I return\nx, I'm going to print it. ",
    "start": "1445900",
    "end": "1454159"
  },
  {
    "text": "So let's see what happens\nwhen I run this one. ",
    "start": "1454160",
    "end": "1460210"
  },
  {
    "text": "It prints four, four,\nand then three.",
    "start": "1460210",
    "end": "1465590"
  },
  {
    "text": "All right, what's going on? Why did it do that?",
    "start": "1465590",
    "end": "1471250"
  },
  {
    "text": "Well it's pretty easy to see\nwhy it printed four here,",
    "start": "1471250",
    "end": "1476650"
  },
  {
    "text": "because I called f of x with\nan x equal to 3, and then I",
    "start": "1476650",
    "end": "1486020"
  },
  {
    "text": "incremented it by one, and\nthen I printed it. ",
    "start": "1486020",
    "end": "1491379"
  },
  {
    "text": "It's probably also easy to\nunderstand why z was four,",
    "start": "1491380",
    "end": "1500120"
  },
  {
    "text": "because I returned the value of\nx here, which was four and",
    "start": "1500120",
    "end": "1505200"
  },
  {
    "text": "it printed it. But why is this x three? ",
    "start": "1505200",
    "end": "1512130"
  },
  {
    "text": "And the answer is this x and\nthat x have nothing to do with",
    "start": "1512130",
    "end": "1519550"
  },
  {
    "text": "each other.  Right?",
    "start": "1519550",
    "end": "1524660"
  },
  {
    "text": "I could just as easily have\nchosen some other value for the formal parameter, say\nGeorge, and said George is",
    "start": "1524660",
    "end": "1535340"
  },
  {
    "text": "equal to George plus 1, print\nGeorge, return George. ",
    "start": "1535340",
    "end": "1542549"
  },
  {
    "start": "1541000",
    "end": "1849000"
  },
  {
    "text": "There is no relation between the\nname of the formal and, in",
    "start": "1542550",
    "end": "1548080"
  },
  {
    "text": "this case, x defined in the\ncalling environment.",
    "start": "1548080",
    "end": "1554130"
  },
  {
    "text": "So now let's think about that\nby working slowly and carefully through what happens\nwhen we call a function.",
    "start": "1554130",
    "end": "1562120"
  },
  {
    "text": " So the first thing that happens\nat the call, and I'll",
    "start": "1562120",
    "end": "1569190"
  },
  {
    "text": "just work it through this one,\nis the formal parameter, x in",
    "start": "1569190",
    "end": "1582909"
  },
  {
    "text": "this case, is bound--",
    "start": "1582910",
    "end": "1589520"
  },
  {
    "text": "and I'll come back to what\nbinding means, that's a critical concept here-- ",
    "start": "1589520",
    "end": "1597960"
  },
  {
    "text": "to the value of the\nactual parameter.",
    "start": "1597960",
    "end": "1606804"
  },
  {
    "text": " So these are important terms,\nactual and formal, which in",
    "start": "1606805",
    "end": "1618550"
  },
  {
    "text": "this case, also happens\nto be called x. ",
    "start": "1618550",
    "end": "1627129"
  },
  {
    "text": "But what's happening here, is\nupon entry of a function, a",
    "start": "1627130",
    "end": "1640900"
  },
  {
    "text": "new scope is created. ",
    "start": "1640900",
    "end": "1653160"
  },
  {
    "text": "What's a scope? A scope is a mapping from\nnames to objects.",
    "start": "1653160",
    "end": "1665070"
  },
  {
    "start": "1665070",
    "end": "1677380"
  },
  {
    "text": "So if we look at what's going\non over here, we can draw a little picture.",
    "start": "1677380",
    "end": "1683420"
  },
  {
    "text": "Well before I draw a picture,\nI'm going to look at a slightly more complicated\nexample. Well, yeah let's do that.",
    "start": "1683420",
    "end": "1690740"
  },
  {
    "text": "This one is not in your\nhandout, but it is",
    "start": "1690740",
    "end": "1696530"
  },
  {
    "text": "illustrative of, I think, what's\nreally going on here. ",
    "start": "1696530",
    "end": "1712590"
  },
  {
    "text": "Here I've got another\nbeautifully named function, in this case f1, and inside it,\nI've defined another function,",
    "start": "1712590",
    "end": "1722250"
  },
  {
    "text": "called g, which takes\nno arguments. ",
    "start": "1722250",
    "end": "1728720"
  },
  {
    "text": "I've set x to abc. ",
    "start": "1728720",
    "end": "1735460"
  },
  {
    "text": "Then I haven't shown you these\nassert statements yet, or haven't talked about them.",
    "start": "1735460",
    "end": "1740480"
  },
  {
    "text": "Assert is a command in which the\nkeyword assert is followed",
    "start": "1740480",
    "end": "1747350"
  },
  {
    "text": "by an expression that\nevaluates to either true or false.",
    "start": "1747350",
    "end": "1752950"
  },
  {
    "text": "If it evaluates to true,\nit does nothing. It just continues.",
    "start": "1752950",
    "end": "1758419"
  },
  {
    "text": "If it evaluates to false,\nit stops your program dead in its tracks.",
    "start": "1758420",
    "end": "1764480"
  },
  {
    "text": "So I've just used it here as a\ntrick to make my program stop when I run it.",
    "start": "1764480",
    "end": "1770930"
  },
  {
    "text": "In general, you'll find that\nI use asserts quite a lot.",
    "start": "1770930",
    "end": "1776140"
  },
  {
    "text": "So for example, in the next\npiece of code, which is called find root.",
    "start": "1776140",
    "end": "1783310"
  },
  {
    "text": "It takes the root, is it square,\nor cube, whatever, the value, and epsilon.",
    "start": "1783310",
    "end": "1790690"
  },
  {
    "text": "It assumes that powers, and\nint, and val, and epsilon float, in the specification.",
    "start": "1790690",
    "end": "1797880"
  },
  {
    "text": "And then you'll notice, I\nstart by putting in an assertion here.",
    "start": "1797880",
    "end": "1804250"
  },
  {
    "text": "And what I'm asserting is that\nthe actuals to which these formals are bound, have the\nproperties the specification",
    "start": "1804250",
    "end": "1812530"
  },
  {
    "text": "says they do. This is what's called defensive\nprogramming.",
    "start": "1812530",
    "end": "1818149"
  },
  {
    "text": "In principle, I shouldn't have\nto do that, because in principle, nobody should call\nthis with incorrect values.",
    "start": "1818150",
    "end": "1827130"
  },
  {
    "text": "But, in fact, it can happen. Programmers occasionally\nmake mistakes.",
    "start": "1827130",
    "end": "1832550"
  },
  {
    "text": "And so I'm protecting myself\nby checking that the assumptions are met, and\nif they're not, my",
    "start": "1832550",
    "end": "1839059"
  },
  {
    "text": "program will just stop. Then I can go hunt down the fool\nthat called it with the",
    "start": "1839060",
    "end": "1844549"
  },
  {
    "text": "wrong parameters-- probably myself. ",
    "start": "1844550",
    "end": "1849770"
  },
  {
    "text": "So asserts are good for that,\nand I'll use them a lot for these kinds of things. I'll also use them when I\nthink I know what value",
    "start": "1849770",
    "end": "1858590"
  },
  {
    "text": "something should be in a program\nat some point, and I'm not sure it really is. I'll assert that it has the\nvalue I think it is.",
    "start": "1858590",
    "end": "1865710"
  },
  {
    "text": "I'll assert that x is six, if I\nthink it's going to be six. And then my program will\nconveniently stop for me if",
    "start": "1865710",
    "end": "1871840"
  },
  {
    "text": "it's not true. All right so that's assert. ",
    "start": "1871840",
    "end": "1879970"
  },
  {
    "text": "Other than that, I think there's\nnothing here you haven't seen before. ",
    "start": "1879970",
    "end": "1887350"
  },
  {
    "text": "So what's going to happen, we're\ngoing to step through this piece by piece.",
    "start": "1887350",
    "end": "1893645"
  },
  {
    "text": " So initially, as we look at it,\nwe enter the main body of",
    "start": "1893645",
    "end": "1905250"
  },
  {
    "text": "the program, which is not\nwrapped in a function. So what IDLE will do, or the\ninterpreter will do, is it",
    "start": "1905250",
    "end": "1912210"
  },
  {
    "text": "will start by executing\neach def.",
    "start": "1912210",
    "end": "1917730"
  },
  {
    "text": "But executing a def doesn't do\nanything, but put some names in the environment.",
    "start": "1917730",
    "end": "1923570"
  },
  {
    "text": "Then it will go and start\nactually running and interpreting the code that's not\nnested inside a function.",
    "start": "1923570",
    "end": "1931440"
  },
  {
    "text": "So the first thing that will\nhappen is the interpreter will build for me what's\ncalled the scope.",
    "start": "1931440",
    "end": "1940240"
  },
  {
    "text": "I've already mentioned,\nthat's a mapping from names to objects.",
    "start": "1940240",
    "end": "1947260"
  },
  {
    "text": "So in the outermost scope, it\nwill first find the name f1.",
    "start": "1947260",
    "end": "1955881"
  },
  {
    "start": "1955881",
    "end": "1961140"
  },
  {
    "text": "F1 it will tell me that f1 maps\nto an object that happens",
    "start": "1961140",
    "end": "1966860"
  },
  {
    "text": "to be a function. ",
    "start": "1966860",
    "end": "1973179"
  },
  {
    "text": "So it will come over here-- and I'm just going to draw some\npicture, we'll assume",
    "start": "1973180",
    "end": "1979310"
  },
  {
    "text": "that's the memory of\nthe computer-- and it will map to something\nthat happens to be a bunch of",
    "start": "1979310",
    "end": "1985590"
  },
  {
    "text": "code, if you will. All right? ",
    "start": "1985590",
    "end": "1991190"
  },
  {
    "text": "It will then stop. ",
    "start": "1991190",
    "end": "1996650"
  },
  {
    "text": "It will then notice that it's\ngot, at the outermost level a variable called x.",
    "start": "1996650",
    "end": "2001985"
  },
  {
    "text": " And that will map to an integer,\nwhich will initially",
    "start": "2001985",
    "end": "2010500"
  },
  {
    "text": "have no value in it. And then after the assignment,\nit will now be bound to the",
    "start": "2010500",
    "end": "2016830"
  },
  {
    "text": "object three. ",
    "start": "2016830",
    "end": "2023860"
  },
  {
    "text": "It will then create another\nobject z, but before it can",
    "start": "2023860",
    "end": "2032030"
  },
  {
    "text": "bind a value to it, it will\ninvoke the function f1. ",
    "start": "2032030",
    "end": "2039460"
  },
  {
    "text": "Now the interpreter starts\nto execute f1. ",
    "start": "2039460",
    "end": "2045460"
  },
  {
    "text": "When it does that, it will\ncreate another scope.",
    "start": "2045460",
    "end": "2051658"
  },
  {
    "text": "So this is the main scope. ",
    "start": "2051659",
    "end": "2058399"
  },
  {
    "text": "It will next create a scope\ncalled the f1 scope. ",
    "start": "2058400",
    "end": "2066520"
  },
  {
    "text": "In that, it will have another\nname g, which will be",
    "start": "2066520",
    "end": "2074500"
  },
  {
    "text": "bound to some code. ",
    "start": "2074500",
    "end": "2082600"
  },
  {
    "text": "It will have a name x, which\nwill be initially",
    "start": "2082600",
    "end": "2089489"
  },
  {
    "text": "bound to the actual. So in this case, it will be\nbound to the object three.",
    "start": "2089489",
    "end": "2098750"
  },
  {
    "start": "2098750",
    "end": "2106070"
  },
  {
    "text": "We'll then eventually\ndo a print. It will involve g, which will\nnow create the g scope.",
    "start": "2106070",
    "end": "2113205"
  },
  {
    "start": "2113205",
    "end": "2121500"
  },
  {
    "text": "And the g scope will create a\nname x, which in this case",
    "start": "2121500",
    "end": "2129640"
  },
  {
    "text": "will be bound to\nthe string abc. ",
    "start": "2129640",
    "end": "2138070"
  },
  {
    "text": "It will then start executing\ng, and it will stop. ",
    "start": "2138070",
    "end": "2145890"
  },
  {
    "start": "2145000",
    "end": "2237000"
  },
  {
    "text": "So let's see what\nthat looks like. ",
    "start": "2145890",
    "end": "2153270"
  },
  {
    "text": "Sure enough, it got an\nassert false, gave an assertion error.",
    "start": "2153270",
    "end": "2158630"
  },
  {
    "text": "What I can do now is go up to\nthis debug here, and go to",
    "start": "2158630",
    "end": "2165119"
  },
  {
    "text": "what's called a stack viewer. Each of these scopes is what's\ncalled a stack frame.",
    "start": "2165120",
    "end": "2175800"
  },
  {
    "text": "Now why are they called\nstack frames? ",
    "start": "2175800",
    "end": "2182109"
  },
  {
    "text": "Because when we do it, we begin\nwith the main scope.",
    "start": "2182110",
    "end": "2188105"
  },
  {
    "text": " We call f, and we\nget the scope.",
    "start": "2188105",
    "end": "2195955"
  },
  {
    "text": " f calls g and we get\nthe g scope.",
    "start": "2195955",
    "end": "2202190"
  },
  {
    "text": " When g completes, which alas\nit doesn't because of the",
    "start": "2202190",
    "end": "2210060"
  },
  {
    "text": "error, it pops the stack, and\ngets rid of the g scope.",
    "start": "2210060",
    "end": "2217820"
  },
  {
    "text": "And now the stack is the f and\nthe main, and then when f completes, it will have\njust the main.",
    "start": "2217820",
    "end": "2226180"
  },
  {
    "text": "So it's last in, first out,\nwhich is typically called a stack in computing-- ",
    "start": "2226180",
    "end": "2233660"
  },
  {
    "text": "or a LIFO, if you're a course\n15 major, and do accounting. So let's look at the\nstack viewer.",
    "start": "2233660",
    "end": "2242330"
  },
  {
    "start": "2237000",
    "end": "2392000"
  },
  {
    "text": "And I apologize for the small\ntype font, but I was unable to make it look bigger.",
    "start": "2242330",
    "end": "2248970"
  },
  {
    "text": "So it says at the top we've\ngot an assertion error. And then you'll note it's got\nthree stacks: the main, the f1",
    "start": "2248970",
    "end": "2259240"
  },
  {
    "text": "stack, and the g stack. I forgot I called\nit f1, not f.",
    "start": "2259240",
    "end": "2264859"
  },
  {
    "text": "Then I can inspect\nthem further. So the g stack has local\nand global variables.",
    "start": "2264860",
    "end": "2272349"
  },
  {
    "text": "The local variables include\nx, which is equal to abc.",
    "start": "2272350",
    "end": "2278850"
  },
  {
    "text": "Globals we'll get to later. If I look at f1, it also has a\nlocal called x, but its value",
    "start": "2278850",
    "end": "2290040"
  },
  {
    "text": "is now four, not abc. And it has a value called\ng, which is a",
    "start": "2290040",
    "end": "2296789"
  },
  {
    "text": "function, as we discussed. And if I look at main, it has a\nbunch of things, but it has",
    "start": "2296790",
    "end": "2312660"
  },
  {
    "text": "everything that's available in\nthe interpreter, which because we've looked at within\nepsilon it's there.",
    "start": "2312660",
    "end": "2318200"
  },
  {
    "text": "But you'll notice it's x is 3. All right?",
    "start": "2318200",
    "end": "2324340"
  },
  {
    "text": "So the stack viewer can be very\nhandy, to look at what you've got, when you've\ngot a bunch of calls.",
    "start": "2324340",
    "end": "2330610"
  },
  {
    "text": " Now if we go back to our code\nhere, and we'll take this out.",
    "start": "2330610",
    "end": "2340010"
  },
  {
    "text": "And suppose what we do is\nwe assert false here.",
    "start": "2340010",
    "end": "2347015"
  },
  {
    "start": "2347015",
    "end": "2354510"
  },
  {
    "text": "Now if we look at the stack\nviewer, we see that we have f1",
    "start": "2354510",
    "end": "2363980"
  },
  {
    "text": "in main, but g is\nno longer there. It's gone.",
    "start": "2363980",
    "end": "2369610"
  },
  {
    "text": "All those variables don't exist\nanymore, because I'm no longer in g. ",
    "start": "2369610",
    "end": "2376089"
  },
  {
    "text": "This is the nice thing, because\nit means if you call something 1,000 times,\nit doesn't use up all your memory.",
    "start": "2376090",
    "end": "2382530"
  },
  {
    "text": "Every time it's finished,\nit gets rid of what it no longer needs. ",
    "start": "2382530",
    "end": "2391579"
  },
  {
    "text": "All right? Does that make sense? This is an important\nthing to get-- yeah, thank you, question.",
    "start": "2391580",
    "end": "2399036"
  },
  {
    "start": "2392000",
    "end": "2575000"
  },
  {
    "text": "AUDIENCE: --the assertion. PROFESSOR: Where did I-- AUDIENCE: Where did you put this\nother assertion, when you just changed--",
    "start": "2399036",
    "end": "2404470"
  },
  {
    "text": "PROFESSOR: Ah, where did I\nput the other assertion? If we look at the code, you'll\nsee I put it after I call g,",
    "start": "2404470",
    "end": "2415850"
  },
  {
    "text": "and g is by now returned, but\nbefore I left f1, which is why",
    "start": "2415850",
    "end": "2422040"
  },
  {
    "text": "the f1 stack is still present. That makes sense to you?",
    "start": "2422040",
    "end": "2428810"
  },
  {
    "text": "Which stacks exist, which stack\nframes exist, depends",
    "start": "2428810",
    "end": "2434320"
  },
  {
    "text": "upon which functions\nare still active. Yeah? AUDIENCE: How come\nyou don't need a",
    "start": "2434320",
    "end": "2439679"
  },
  {
    "text": "return under the g function? PROFESSOR: Oh, because there's\nnot going to be anything",
    "start": "2439679",
    "end": "2444973"
  },
  {
    "text": "interesting. It's useless. Right? Why don't I need a\nreturn under g? Well if I wanted it to do\nsomething useful, I would need",
    "start": "2444973",
    "end": "2452070"
  },
  {
    "text": "to return something. But I'd probably also want to\npass it some arguments, rather than have it take no\narguments, as well.",
    "start": "2452070",
    "end": "2458810"
  },
  {
    "text": "So it's here just to be the\nsimplest thing I could put that created a stack frame. But don't try and interpre it as\nbeing anything meaningful.",
    "start": "2458810",
    "end": "2468250"
  },
  {
    "text": "Yeah? AUDIENCE: Would you run into\nproblems assuming that g did something to x and\nthen returned it?",
    "start": "2468250",
    "end": "2473270"
  },
  {
    "text": "Would you run into any problems\nthat you named the variable the same? You know, that you\nused x twice?",
    "start": "2473270",
    "end": "2478572"
  },
  {
    "text": "Would you want to-- PROFESSOR: No. If an x exists, or any variable\nexists within a",
    "start": "2478572",
    "end": "2484620"
  },
  {
    "text": "function body, when you leave\nthat function, that variable is gone forever.",
    "start": "2484620",
    "end": "2491010"
  },
  {
    "text": "These are just names. They have no intrinsic\nmeaning.",
    "start": "2491010",
    "end": "2496920"
  },
  {
    "text": "So one of the ways to think\nabout it, and we'll see this later when we get to classes--",
    "start": "2496920",
    "end": "2503720"
  },
  {
    "text": "a lot later. You could, if you wanted, think\nabout this as really the",
    "start": "2503720",
    "end": "2508859"
  },
  {
    "text": "name g.x, and you could really\nthink of this as the name of",
    "start": "2508860",
    "end": "2515000"
  },
  {
    "text": "f1.x, and you could think of\nthis as the name of main.x,",
    "start": "2515000",
    "end": "2521710"
  },
  {
    "text": "indicating that they're\nreally not the same. But it would be kind of a pain\nto write them all that way.",
    "start": "2521710",
    "end": "2530430"
  },
  {
    "text": "OK? So different scopes have\ndifferent names available to them.",
    "start": "2530430",
    "end": "2536039"
  },
  {
    "text": "You can use the names in the\nscope, and you have to keep track of what they mean. ",
    "start": "2536040",
    "end": "2543990"
  },
  {
    "text": "OK? Any other questions? These are great questions, and\nI really do appreciate them. Yeah? AUDIENCE: Does this also\nhappen with four loops?",
    "start": "2543990",
    "end": "2550841"
  },
  {
    "text": "Like if you say 4x in\nrange something, can you use x later? Or is it x-- PROFESSOR: You can\nuse x later.",
    "start": "2550842",
    "end": "2556638"
  },
  {
    "text": "AUDIENCE: Okay so-- PROFESSOR: x will be available\noutside the loop. ",
    "start": "2556638",
    "end": "2563019"
  },
  {
    "text": "This was if you said for x in\nsomething, is x available outside the loop? Yes.",
    "start": "2563020",
    "end": "2568599"
  },
  {
    "text": "And in fact, you'll often want\nto test what the final value of x is, when you\nleave the loop. ",
    "start": "2568600",
    "end": "2576810"
  },
  {
    "start": "2575000",
    "end": "2783000"
  },
  {
    "text": "OK, the next thing on your\nhandout, and I'm not going to go over it, is using functions\nto implement something that",
    "start": "2576810",
    "end": "2585520"
  },
  {
    "text": "finds roots. There's no real point in\nmy walking you through this code in class.",
    "start": "2585520",
    "end": "2591569"
  },
  {
    "text": "I did include it\nin the handout. And by the way, the handouts\nare all available after lecture, online.",
    "start": "2591570",
    "end": "2598910"
  },
  {
    "text": "Is that, I think you should work\nthrough in your own, and make sure you understand it,\nto get a sense of how",
    "start": "2598910",
    "end": "2605339"
  },
  {
    "text": "functions work. And it's certainly related to\nthe current problem set, which would be another good reason\nto work through it--",
    "start": "2605340",
    "end": "2612190"
  },
  {
    "text": "the problem set that will\nbe posted today-- the new problem set, PS 2.",
    "start": "2612190",
    "end": "2618210"
  },
  {
    "text": "Note again how careful I am\nabout the specifications. And I should point out something\ninteresting, if I",
    "start": "2618210",
    "end": "2636600"
  },
  {
    "text": "type find root, open para--\nwell let's do this here.",
    "start": "2636600",
    "end": "2642330"
  },
  {
    "start": "2642330",
    "end": "2654070"
  },
  {
    "text": "Let's clear things up. Let's get rid of things\nthat will cause",
    "start": "2654070",
    "end": "2662210"
  },
  {
    "text": "the program to halt. ",
    "start": "2662210",
    "end": "2673190"
  },
  {
    "text": "Notice that when I type find\nroot open, open paren, it's given me the values--",
    "start": "2673190",
    "end": "2679230"
  },
  {
    "text": "the names of the formal\nparameters, which I've chosen in such way that will remind me\nwhat their value should be.",
    "start": "2679230",
    "end": "2686430"
  },
  {
    "text": "And it's also given me part of\nthe specification, the piece in the triple quotation marks\nto tell me the rules I'm",
    "start": "2686430",
    "end": "2696830"
  },
  {
    "text": "supposed to be following\nhere on these things. So it's a very handy thing.",
    "start": "2696830",
    "end": "2702079"
  },
  {
    "text": "And as you use IDLE, you'll get\nused to the fact that this is a convenience.",
    "start": "2702080",
    "end": "2709480"
  },
  {
    "text": "All right, work your way\nthrough that code. Make sure you know\nwhat it does.",
    "start": "2709480",
    "end": "2714820"
  },
  {
    "text": "Finally, today I want to switch\ngears, and talk about",
    "start": "2714820",
    "end": "2720670"
  },
  {
    "text": "something else. Up till now, all of the programs\nwe've looked at have",
    "start": "2720670",
    "end": "2726620"
  },
  {
    "text": "been numeric-- they've played with numbers. And I've done that, because I\nassumed you guys all had some",
    "start": "2726620",
    "end": "2733060"
  },
  {
    "text": "intuition about numbers. I've use strings as a primitive\ndata element to",
    "start": "2733060",
    "end": "2739890"
  },
  {
    "text": "print things, but we haven't\ndone anything very interesting with strings. ",
    "start": "2739890",
    "end": "2746570"
  },
  {
    "text": "However strings are indeed quite\ninteresting, in that",
    "start": "2746570",
    "end": "2752590"
  },
  {
    "text": "they're the first non-scalar\nvalue we've looked at. You'll recall non-scalar values\nare values that can be",
    "start": "2752590",
    "end": "2761250"
  },
  {
    "text": "decomposed. So if we now look at the code\nagain, I've got this little",
    "start": "2761250",
    "end": "2785109"
  },
  {
    "text": "piece of code called\nsumDigits. So before, the for statement\nwe looked at",
    "start": "2785110",
    "end": "2791500"
  },
  {
    "text": "was for x in range. Well you can apply it to a for\nstatement to any type that has",
    "start": "2791500",
    "end": "2802850"
  },
  {
    "text": "a way to enumerate\nits elements. So for c in STR, actually of\n1952, so I've taken the number",
    "start": "2802850",
    "end": "2816860"
  },
  {
    "text": "1952 and converted it to a\nstring so it will now be quote one nine five two, I can now\ndo something to every",
    "start": "2816860",
    "end": "2827110"
  },
  {
    "text": "character in that string. And what I'm doing is converting\nit back to an int,",
    "start": "2827110",
    "end": "2833840"
  },
  {
    "text": "and then adding it. So this will give me the\nsum of the digits. ",
    "start": "2833840",
    "end": "2845289"
  },
  {
    "text": "17.  This is a very convenient\nmechanism, and you'll use for",
    "start": "2845290",
    "end": "2852500"
  },
  {
    "text": "a lot, this way. You'll use it in fact more for\nthis sort of thing then you will for ints.",
    "start": "2852500",
    "end": "2858480"
  },
  {
    "text": " Now I can also select values.",
    "start": "2858480",
    "end": "2863680"
  },
  {
    "text": " So if I look at-- ",
    "start": "2863680",
    "end": "2877470"
  },
  {
    "text": "I don't know what's\ngoing on here. Every once in while when you go\nback and forth between the editor and the shell, the shell\nhangs and you have to go",
    "start": "2877470",
    "end": "2885910"
  },
  {
    "text": "try it again. If I go to s equals abc, I can\nlook at individual elements of",
    "start": "2885910",
    "end": "2896849"
  },
  {
    "text": "s, for example s sub\n0, which will be a.",
    "start": "2896850",
    "end": "2902780"
  },
  {
    "text": "I can also look at\nslices of s. So for example s\nfrom 0 to one.",
    "start": "2902780",
    "end": "2908970"
  },
  {
    "text": " That's interesting.",
    "start": "2908970",
    "end": "2915950"
  },
  {
    "text": "What is it doing? Now try and infer. I'll give you another example. ",
    "start": "2915950",
    "end": "2927060"
  },
  {
    "text": "So you'll remember when we\ndid range from x to y, it went y minus 1.",
    "start": "2927060",
    "end": "2932770"
  },
  {
    "text": "Same kind of thing is\nhappening here. ",
    "start": "2932770",
    "end": "2938430"
  },
  {
    "text": "So that's why s from 0 to one\ngives me only one character, but s from 0 to two gives me\nthe character string ab.",
    "start": "2938430",
    "end": "2947190"
  },
  {
    "text": "This is what's called slicing,\nand it's very common.",
    "start": "2947190",
    "end": "2957800"
  },
  {
    "text": "What a slice does, is it\nmakes a new copy-- makes a new object, in this\ncase-- which is a sub-string",
    "start": "2957800",
    "end": "2964970"
  },
  {
    "text": "of the original string. ",
    "start": "2964970",
    "end": "2970180"
  },
  {
    "text": "There are many other things\nI can do on strings. I can do something like s.find,\nand it will tell me",
    "start": "2970180",
    "end": "2981470"
  },
  {
    "text": "that b is at position\nnumber one in s. So use Google, whatever you use,\nto find the Python web",
    "start": "2981470",
    "end": "2991440"
  },
  {
    "text": "page that describe strings, and\nit will give you all of the operations you can do.",
    "start": "2991440",
    "end": "2996880"
  },
  {
    "text": "And they're quite convenient. ",
    "start": "2996880",
    "end": "3002309"
  },
  {
    "text": "One other scalar type that\nyou're going to need for the problem set is tuples, and\nthat will be discussed in",
    "start": "3002310",
    "end": "3009520"
  },
  {
    "text": "recitation tomorrow. OK, thanks a lot. ",
    "start": "3009520",
    "end": "3017727"
  }
]