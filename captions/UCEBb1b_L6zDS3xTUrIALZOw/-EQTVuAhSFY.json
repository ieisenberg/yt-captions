[
  {
    "text": " Good morning everyone.\nToday we are going to do some algorithms, back to algorithms,\nand we are going to use a lot",
    "start": "14000",
    "end": "23000"
  },
  {
    "text": "of the, well,\nsome of the simpler mathematics that we developed last class\nlike the master theorem for",
    "start": "23000",
    "end": "31000"
  },
  {
    "text": "solving recurrences.\nWe are going to use this a lot. Because we are going to talk\nabout recursive algorithms",
    "start": "31000",
    "end": "39000"
  },
  {
    "text": "today.\nAnd so we will find their running time using the master\ntheorem. This is just the same as it was\nlast time, I hope,",
    "start": "39000",
    "end": "46000"
  },
  {
    "text": "unless I made a mistake.\nA couple of reminders. You should all go to recitation\non Friday.",
    "start": "46000",
    "end": "52000"
  },
  {
    "text": "That is required.\nIf you want to, you can go to homework lab on\nSunday. That may be a good excuse for\nyou to actually work on your",
    "start": "52000",
    "end": "59000"
  },
  {
    "text": "problem set a few hours early.\nWell, actually, it's due on Wednesday so you\nhave lots of time.",
    "start": "59000",
    "end": "67000"
  },
  {
    "text": "And there is no class on\nMonday. It is the holiday known as\nStudent Holiday,",
    "start": "67000",
    "end": "73000"
  },
  {
    "text": "so don't come.\nToday we are going to cover something called Divide and\nConquer.",
    "start": "73000",
    "end": "80000"
  },
  {
    "start": "80000",
    "end": "87000"
  },
  {
    "text": "Also known as divide and rule\nor divide et impera for those of you who know Latin,\nwhich is a tried and tested way",
    "start": "87000",
    "end": "94000"
  },
  {
    "text": "of conquering a land by dividing\nit into sections of some kind. It could be different political\nfactions, different whatever.",
    "start": "94000",
    "end": "103000"
  },
  {
    "text": "And then somehow making them no\nlonger like each other. Like starting a family feud is\nalways a good method.",
    "start": "103000",
    "end": "110000"
  },
  {
    "text": "You should remember this on\nyour quiz. I'm kidding.\nAnd if you can separate this",
    "start": "110000",
    "end": "116000"
  },
  {
    "text": "big power structure into little\npower structures such that you dominate each little power\nstructure then you can conquer",
    "start": "116000",
    "end": "123000"
  },
  {
    "text": "all of them individually,\nas long as you make sure they don't get back together.\nThat is divide and conquer as",
    "start": "123000",
    "end": "129000"
  },
  {
    "text": "practiced, say,\nby the British. But today we are going to do\ndivide and conquer as practiced in Cormen, Leiserson,\nRivest and Stein or every other",
    "start": "129000",
    "end": "137000"
  },
  {
    "text": "algorithm textbook.\nThis is a very basic and very powerful algorithm design\ntechnique. So, this is our first real\nalgorithm design experience.",
    "start": "137000",
    "end": "147000"
  },
  {
    "text": "We are still sort of mostly in\nthe analysis mode, but we are going to do some\nactual design.",
    "start": "147000",
    "end": "153000"
  },
  {
    "text": "We're going to cover maybe only\nthree or four major design techniques.\nThis is one of them,",
    "start": "153000",
    "end": "159000"
  },
  {
    "text": "so it is really important.\nAnd it will lead to all sorts of recurrences,\nso we will get to use",
    "start": "159000",
    "end": "165000"
  },
  {
    "text": "everything from last class and\nsee why it is useful. As you might expect,\nthe first step in",
    "start": "165000",
    "end": "171000"
  },
  {
    "text": "divide-and-conquer is divide and\nthe second step is conquer.",
    "start": "171000",
    "end": "177000"
  },
  {
    "text": "But you may not have guessed\nthat there are three steps. And I am leaving some blank\nspace here, so you should,",
    "start": "177000",
    "end": "184000"
  },
  {
    "text": "too.\nDivide-and-conquer is an algorithmic technique.\nYou are given some big problem",
    "start": "184000",
    "end": "190000"
  },
  {
    "text": "you want to solve,\nyou don't really know how to solve it in an efficient way,\nso you are going to split it up",
    "start": "190000",
    "end": "198000"
  },
  {
    "text": "into subproblems.\nThat is the divide. You are going to divide that\nproblem, or more precisely the",
    "start": "198000",
    "end": "206000"
  },
  {
    "text": "instance of that problem,\nthe particular instance of that problem you have into\nsubproblems.",
    "start": "206000",
    "end": "212000"
  },
  {
    "text": "And those subproblems should be\nsmaller in some sense. And smaller means normally that\nthe value of N is smaller than",
    "start": "212000",
    "end": "221000"
  },
  {
    "text": "it was in the original problem.\nSo, you sort of made some progress.\nNow you have one,",
    "start": "221000",
    "end": "227000"
  },
  {
    "text": "or more likely you have several\nsubproblems you need to solve. Each of them is smaller.\nSo, you recursively solve each",
    "start": "227000",
    "end": "235000"
  },
  {
    "text": "subproblem.\nThat is the conquer step. You conquer each subproblem\nrecursively.",
    "start": "235000",
    "end": "244000"
  },
  {
    "text": "And then somehow you combine\nthose solutions into a solution",
    "start": "244000",
    "end": "251000"
  },
  {
    "text": "for the whole problem. ",
    "start": "251000",
    "end": "263000"
  },
  {
    "text": "So, this is the general\ndivide-and-conquer paradigm. And lots of algorithms fit it.\nYou have already seen one",
    "start": "263000",
    "end": "269000"
  },
  {
    "text": "algorithm that fits this\nparadigm, if you can remember. Merge sort, good.\nWow, you are all awake.",
    "start": "269000",
    "end": "276000"
  },
  {
    "text": "I'm impressed.\nSo, we saw merge sort. And, if I am clever,\nI could fit it in this space.",
    "start": "276000",
    "end": "282000"
  },
  {
    "text": "Sure.\nLet's be clever. A quick review on merge sort.\nPhrased in this 1,",
    "start": "282000",
    "end": "288000"
  },
  {
    "text": "2, 3 kind of method.\nThe first step was to divide your array into two halves.\nThis really doesn't mean",
    "start": "288000",
    "end": "296000"
  },
  {
    "text": "anything because you just sort\nof think, oh, I will pretend my array is\ndivided into two halves.",
    "start": "296000",
    "end": "305000"
  },
  {
    "text": "There is no work here.\nThis is zero time. You just look at your array.\nHere is your array.",
    "start": "305000",
    "end": "311000"
  },
  {
    "text": "I guess maybe you compute n/2\nand take the floor. That takes constant time.\nAnd you say OK,",
    "start": "311000",
    "end": "317000"
  },
  {
    "text": "I am pretending my array is now\ndivided into the left part and the right part.\nAnd then the interesting part",
    "start": "317000",
    "end": "324000"
  },
  {
    "text": "is that you recursively solve\neach one. That's the conquer.\nWe recursively sort each",
    "start": "324000",
    "end": "332000"
  },
  {
    "text": "subarray.\nAnd then the third step is to combine those solutions.\nAnd so here we really see what",
    "start": "332000",
    "end": "344000"
  },
  {
    "text": "this means.\nWe now have a sorted version of this array by induction.\nWe have a sorted version of",
    "start": "344000",
    "end": "355000"
  },
  {
    "text": "this array by induction.\nWe now want the sorted version",
    "start": "355000",
    "end": "362000"
  },
  {
    "text": "of the whole array.\nAnd we saw that was the merge problem, merging two sorted\narrays.",
    "start": "362000",
    "end": "370000"
  },
  {
    "text": "And that we saw how to do in\nlinear time, order n time. I am not going to repeat that,\nbut the point is it falls into",
    "start": "370000",
    "end": "380000"
  },
  {
    "text": "that framework.\nI want to write the running time and merge sort as a\nrecurrence.",
    "start": "380000",
    "end": "389000"
  },
  {
    "text": "You have already seen the\nrecurrence, you have already been told the solution,\nbut now we actually know how to",
    "start": "389000",
    "end": "397000"
  },
  {
    "text": "solve it.\nAnd, furthermore, every algorithm that follows\nthe divide-and-conquer paradigm",
    "start": "397000",
    "end": "403000"
  },
  {
    "text": "will have a recurrence of pretty\nmuch the same form, very much like our good friend\nthe master method.",
    "start": "403000",
    "end": "411000"
  },
  {
    "text": "Let's do it for merge sort\nwhere we sort of already know the answer and get a bit of\npractice.",
    "start": "411000",
    "end": "420000"
  },
  {
    "text": "This is the merge sort\nrecurrence. You should know and love this\nrecurrence because it comes up",
    "start": "420000",
    "end": "426000"
  },
  {
    "text": "all over the place.\nIt comes from this general approach by just seeing what are\nthe sizes of the subproblems you",
    "start": "426000",
    "end": "433000"
  },
  {
    "text": "are solving and how many there\nare and how much extra work you are doing.\nYou have here the size of the",
    "start": "433000",
    "end": "440000"
  },
  {
    "text": "subproblems.\nIt happens here that both subproblems have the same size\nroughly. There is this sloppiness that\nwe have, which really should be",
    "start": "440000",
    "end": "449000"
  },
  {
    "text": "T of floor of n over 2 plus T of\nceiling of n over 2. And when you go to recitation\non Friday you will see why that",
    "start": "449000",
    "end": "457000"
  },
  {
    "text": "is OK, the floors and ceilings\ndon't matter. There is a theorem you can\nprove that that's happy.",
    "start": "457000",
    "end": "463000"
  },
  {
    "text": "You can assume that N is a\npower of 2, but we are just going to assume that for now.\nWe just have two problems with",
    "start": "463000",
    "end": "471000"
  },
  {
    "text": "size n over 2.\nThis 2 is the number of subproblems. ",
    "start": "471000",
    "end": "480000"
  },
  {
    "text": "And this order n is all the\nextra work we are doing. Now, what is the extra work\npotentially?",
    "start": "480000",
    "end": "487000"
  },
  {
    "text": "Well, the conquering is always\njust recursion. There is sort of no work there\nexcept this lead part.",
    "start": "487000",
    "end": "494000"
  },
  {
    "text": "The dividing in this case is\ntrivial, but in general it might involve some work.\nAnd the combining here involves",
    "start": "494000",
    "end": "503000"
  },
  {
    "text": "linear work.\nSo, this is the divide-and-conquer running\ntimes.",
    "start": "503000",
    "end": "509000"
  },
  {
    "text": "So, this is the nonrecursive\nwork. And that is generally how you\nconvert a divide-and-conquer",
    "start": "509000",
    "end": "516000"
  },
  {
    "text": "algorithm into a recurrence.\nIt's really easy and you usually get to apply the master\nmethod.",
    "start": "516000",
    "end": "524000"
  },
  {
    "text": "Here we are in Case 2.\nVery good. This is Case 2.\nAnd k is zero here. And so in the recursion tree,\nall of the costs are roughly",
    "start": "524000",
    "end": "534000"
  },
  {
    "text": "the same.\nThey are all n to the log base b of a.\nHere n to the log base 2 of 2",
    "start": "534000",
    "end": "542000"
  },
  {
    "text": "is just n.\nSo these are equal. We get an extra log factor\nbecause of the number of levels in the recursion tree.\nRemember the intuition behind",
    "start": "542000",
    "end": "551000"
  },
  {
    "text": "the master method.\nThis is n log n, and that is good.\nMerge sort is a fast sorting algorithm n log n.\nInsertion sort was n squared.",
    "start": "551000",
    "end": "560000"
  },
  {
    "text": "In some sense,\nn log n is the best you can do. We will cover that in two\nlectures from now,",
    "start": "560000",
    "end": "566000"
  },
  {
    "text": "but just foreshadowing.\nToday we are going to do different divide-and-conquer\nalgorithms.",
    "start": "566000",
    "end": "572000"
  },
  {
    "text": "Sorting is one problem.\nThere are all sorts of problems we might want to solve.\nIt turns out a lot of them you",
    "start": "572000",
    "end": "579000"
  },
  {
    "text": "can apply divide-and-conquer to.\nNot every problem. Like how to wake up in the\nmorning, it's not so easy to",
    "start": "579000",
    "end": "585000"
  },
  {
    "text": "solve a divide-and-conquer,\nalthough maybe that's a good problem set problem.",
    "start": "585000",
    "end": "591000"
  },
  {
    "start": "591000",
    "end": "599000"
  },
  {
    "text": "The next divide-and-conquer\nalgorithm we are going to look at is even simpler than sorting,\neven simpler than merge sort,",
    "start": "599000",
    "end": "609000"
  },
  {
    "text": "but it drives home the point of\nwhen you have only one subproblem.\nHow many people have seen",
    "start": "609000",
    "end": "616000"
  },
  {
    "text": "binary search before?\nAnyone hasn't? One, OK.\nI will go very quickly then.",
    "start": "616000",
    "end": "622000"
  },
  {
    "text": "You have some element X.\nYou want to find X in a sorted array.\nHow many people had not seen it",
    "start": "622000",
    "end": "631000"
  },
  {
    "text": "before they saw it in\nrecitation? No one, OK.\nGood. You have seen it in another\nclass, probably 6.001 or",
    "start": "631000",
    "end": "638000"
  },
  {
    "text": "something.\nVery good. You took the prerequisites.\nOK. I just want to phrase it as a\ndivide-and-conquer because you",
    "start": "638000",
    "end": "646000"
  },
  {
    "text": "don't normally see it that way.\nThe divide step is you compare X with the middle element in\nyour array.",
    "start": "646000",
    "end": "653000"
  },
  {
    "text": "Then the conquer step.\nHere is your array. Here is the middle element.\nYou compare X with this thing",
    "start": "653000",
    "end": "662000"
  },
  {
    "text": "if let's say X is smaller than\nthe middle element in your array.\nYou know that X is in the left",
    "start": "662000",
    "end": "669000"
  },
  {
    "text": "half because it is sorted,\na nice loop invariant there, whatever, but we are just going\nto think of that as recursively",
    "start": "669000",
    "end": "677000"
  },
  {
    "text": "I am going to solve the problem\nof finding X in this subarray. We recurse in one subarray,\nunlike merge sort where we had",
    "start": "677000",
    "end": "686000"
  },
  {
    "text": "two recursions.\nAnd then the combined step we don't do anything.\nI mean if you find X in here",
    "start": "686000",
    "end": "695000"
  },
  {
    "text": "then you've found X in the whole\narray. There is nothing to bring it\nback up really.",
    "start": "695000",
    "end": "702000"
  },
  {
    "text": "So, this is just phrasing\nbinary search in the divide-and-conquer paradigm.\nIt is kind of a trivial",
    "start": "702000",
    "end": "711000"
  },
  {
    "text": "example, but there are lots of\ncircumstances where you only need to recurse in one side.\nAnd it is important to see how",
    "start": "711000",
    "end": "722000"
  },
  {
    "text": "much of a difference making one\nrecursion versus making two recursions can be.\nThis is the recurrence for",
    "start": "722000",
    "end": "729000"
  },
  {
    "text": "binary search.\nWe start with a problem size n. We reduce it to 1.\nThere is an implicit 1 factor",
    "start": "729000",
    "end": "736000"
  },
  {
    "text": "here.\nOne subproblem of size n over 2 roughly.\nAgain, floors and ceilings don't matter.\nPlus a constant which is to",
    "start": "736000",
    "end": "744000"
  },
  {
    "text": "compare X with the middle\nelement, so it is actually like one comparison.\nThis has a solution,",
    "start": "744000",
    "end": "752000"
  },
  {
    "text": "log n.\nAnd you all know the running time of binary search,\nbut here it is at solving the",
    "start": "752000",
    "end": "758000"
  },
  {
    "text": "recurrence.\nI mean, there are a couple of differences here.\nWe don't have the additive",
    "start": "758000",
    "end": "764000"
  },
  {
    "text": "order n term.\nIf we did, it would be linear, the running the time.\nStill better than n log n.",
    "start": "764000",
    "end": "771000"
  },
  {
    "text": "So, we are getting rid of the\n2, bringing it down to a 1, taking the n and bringing it\ndown to a 1.",
    "start": "771000",
    "end": "780000"
  },
  {
    "text": "That is making the running time\na lot faster, the whole factor of n faster.\nNo big surprise there. Let's do some more interesting\nalgorithms.",
    "start": "780000",
    "end": "788000"
  },
  {
    "start": "788000",
    "end": "798000"
  },
  {
    "text": "The powering a number problem\nis I give you a number X.",
    "start": "798000",
    "end": "804000"
  },
  {
    "text": "I give that as like a real\nnumber or floating point number",
    "start": "804000",
    "end": "811000"
  },
  {
    "text": "or whatever.\nAnd I give you an integer n, at least zero.\nI want to compute X to the",
    "start": "811000",
    "end": "820000"
  },
  {
    "text": "power n.\nSo, it's a very simple problem. It is, in some sense,\neven easier than all of these.",
    "start": "820000",
    "end": "829000"
  },
  {
    "text": "But here it is.\nAnd divide-and-conquer is sort of the right thing to do.\nSo, the naÔve algorithm is very",
    "start": "829000",
    "end": "840000"
  },
  {
    "text": "simple.\nHow do you compute X to the power n?\nWell, the definition of X to",
    "start": "840000",
    "end": "847000"
  },
  {
    "text": "the power n is I take X and I\nmultiply by X n times. So, I take X times X times X\ntimes X where there are n copies",
    "start": "847000",
    "end": "856000"
  },
  {
    "text": "of X totally.\nAnd that's X to the n. No big surprise.\nThat is n multiplications,",
    "start": "856000",
    "end": "862000"
  },
  {
    "text": "or n minus 1 multiplications,\ntheta n time. ",
    "start": "862000",
    "end": "874000"
  },
  {
    "text": "But that's not the best you can\ndo for this problem. Any suggestions on what we\nmight do using",
    "start": "874000",
    "end": "884000"
  },
  {
    "text": "divide-and-conquer?\nHas anyone seen this algorithm before?\nA few, OK.",
    "start": "884000",
    "end": "891000"
  },
  {
    "text": "For the rest?\nTesting on the spot creativity, which is very difficult,\nbut I always like a challenge.",
    "start": "891000",
    "end": "904000"
  },
  {
    "text": "I mean random ideas.\nWhat could we possibly do to solve this problem in less than\nlinear time?",
    "start": "904000",
    "end": "912000"
  },
  {
    "text": "How is this sort of a\ndivide-and-conquer problem? We have to inputs,\nX and n.",
    "start": "912000",
    "end": "919000"
  },
  {
    "text": "Yeah?\nWe could try to divide on X. It seems a bit hard.\nIt is just some number.",
    "start": "919000",
    "end": "925000"
  },
  {
    "text": "Or, we could try to divide on\nn. Any guesses?\nLook at X to the n over 2,",
    "start": "925000",
    "end": "932000"
  },
  {
    "text": "very good.\nThat is exactly the idea of the divide-and-conquer algorithm.",
    "start": "932000",
    "end": "938000"
  },
  {
    "start": "938000",
    "end": "948000"
  },
  {
    "text": "We would like to look at X to\nthe n over 2. This is going to be a little\nbit tricky. Now we are going to have to pay\nattention to floors and",
    "start": "948000",
    "end": "956000"
  },
  {
    "text": "ceilings.\nWhat I would like to say is while X to the n is X to the n\nover 2 times X to the n over 2.",
    "start": "956000",
    "end": "964000"
  },
  {
    "text": "And this is true if n is even.\nIf it is odd then I need to be a little bit more careful.\nBut let's just think about the",
    "start": "964000",
    "end": "971000"
  },
  {
    "text": "intuition why this is a good\ndivide-and-conquer algorithm. We have a problem of size n,\nlet's say.",
    "start": "971000",
    "end": "977000"
  },
  {
    "text": "We convert it into,\nit looks like two subproblems of size n over 2,\nbut in fact they are the same",
    "start": "977000",
    "end": "983000"
  },
  {
    "text": "subproblems.\nSo, I only have to solve one of them.\nIf I compute X to the n over 2. Yeah, I know X to the n over 2.\nSo, there is one conversive",
    "start": "983000",
    "end": "993000"
  },
  {
    "text": "call, problem of size n over 2,\nthen I square that number. And that is one computation.\nSo, exactly the same recurrence",
    "start": "993000",
    "end": "1004000"
  },
  {
    "text": "as binary search,\nlog n time much better than n. Cool.\nI also have to solve the odd",
    "start": "1004000",
    "end": "1011000"
  },
  {
    "text": "case.\nSo, n is odd.\n267\n00:16:53,000 --> 00:00:02,000\nI will look at n minus 1 over  N minus 1 better be even.\nAnd then I am missing another",
    "start": "1011000",
    "end": "1022000"
  },
  {
    "text": "factor of X.\nIf n is odd, I am going to have to do one\nrecursive call and two",
    "start": "1022000",
    "end": "1029000"
  },
  {
    "text": "multiplications.\nThe same recurrence. One recursive problem of size n\nover 2, plus constant time.",
    "start": "1029000",
    "end": "1037000"
  },
  {
    "text": "The dividing work here is\ndividing by 2 and the combination work is doing one or\npossibly two multiplications.",
    "start": "1037000",
    "end": "1047000"
  },
  {
    "text": "And this is lg n.\nAnd if all you are allowed to do is multiply numbers,\nlg n is the best you can do.",
    "start": "1047000",
    "end": "1057000"
  },
  {
    "text": "Good.\nSimple but powerful. Whenever you want to compute a\npower of a number,",
    "start": "1057000",
    "end": "1064000"
  },
  {
    "text": "now you know what to do. ",
    "start": "1064000",
    "end": "1075000"
  },
  {
    "text": "Does anyone not know the\ndefinition of Fibonacci numbers and is willing to admit it?\nOK, so this is a good old",
    "start": "1075000",
    "end": "1081000"
  },
  {
    "text": "friend.\nI will write down the definition as just a reminder.\nAnd, in particular, the base cases.",
    "start": "1081000",
    "end": "1087000"
  },
  {
    "start": "1087000",
    "end": "1097000"
  },
  {
    "text": "Fibonacci numbers,\nI will claim, are very important because it\nappears throughout nature. You look at certain fruits,\nyou see the Fibonacci sequence.",
    "start": "1097000",
    "end": "1104000"
  },
  {
    "text": "If you count the number of\nlittle bumps around each ring. If you look at the sand on the\nbeach and how the waves hit it,",
    "start": "1104000",
    "end": "1111000"
  },
  {
    "text": "it's the Fibonacci sequence I\nam told. If you look all over the place,\nFibonacci sequence is there.",
    "start": "1111000",
    "end": "1119000"
  },
  {
    "text": "How does nature compute the\nFibonacci sequence? Well, that is a different\nclass.",
    "start": "1119000",
    "end": "1126000"
  },
  {
    "text": "But how are we going to compute\nthe Fibonacci sequence as fast",
    "start": "1126000",
    "end": "1132000"
  },
  {
    "text": "as possible?\nYou have probably seen two algorithms.\nThe most naÔve algorithm is the",
    "start": "1132000",
    "end": "1139000"
  },
  {
    "text": "recursive algorithm.\nWhere you say OK, f of n.\nI say well, if n is zero,",
    "start": "1139000",
    "end": "1146000"
  },
  {
    "text": "return zero,\nif n is 1, return one. Otherwise, recursively compute\nf of n minus 1 and f of n minus",
    "start": "1146000",
    "end": "1153000"
  },
  {
    "text": "2, add them together.\nHow much time does this algorithm take,\nfor those who have seen it",
    "start": "1153000",
    "end": "1160000"
  },
  {
    "text": "before?\nThis is not obvious to guess. It doesn't have to be exact.",
    "start": "1160000",
    "end": "1166000"
  },
  {
    "text": " OK.\nAnd how many people have seen",
    "start": "1166000",
    "end": "1173000"
  },
  {
    "text": "this algorithm before and\nanalyzed it? Half, OK.\nSo what is the running time?",
    "start": "1173000",
    "end": "1179000"
  },
  {
    "text": "Really, really long,\nvery good. Anymore precise answers?\nWhat's that? Exponential,\nyes.",
    "start": "1179000",
    "end": "1185000"
  },
  {
    "text": "That is also correct and more\nprecise. I will be even more precise.\nMaybe you haven't seen this",
    "start": "1185000",
    "end": "1192000"
  },
  {
    "text": "analysis before.\nIt's phi to the n where phi is the Golden Ratio.\nAgain, Golden Ratio appears",
    "start": "1192000",
    "end": "1201000"
  },
  {
    "text": "throughout the world in\nmathematics. This is probably the only time\nin this class,",
    "start": "1201000",
    "end": "1207000"
  },
  {
    "text": "I'm afraid, but there we go.\nIt made its cameo so we are happy.\nThis is called exponential",
    "start": "1207000",
    "end": "1214000"
  },
  {
    "text": "time.\nThis is bigger than one, that's all you need to know.\nThis is exponential time.",
    "start": "1214000",
    "end": "1220000"
  },
  {
    "text": "Exponential time means\nbasically some constant to the power n.\nExponential time is a very long",
    "start": "1220000",
    "end": "1228000"
  },
  {
    "text": "time.\nIt's bad. Polynomial time is good.\n[LAUGHTER] This is what we",
    "start": "1228000",
    "end": "1235000"
  },
  {
    "text": "want, polynomial time\nalgorithms. This class is basically\nentirely about polynomial time",
    "start": "1235000",
    "end": "1242000"
  },
  {
    "text": "algorithms.\nQuestion? Oh, say what the algorithm does\nagain. Define function Fibonacci of n?\nI check for the base cases.",
    "start": "1242000",
    "end": "1253000"
  },
  {
    "text": "Otherwise, I recursively call\nFibonacci of n minus 1.",
    "start": "1253000",
    "end": "1259000"
  },
  {
    "text": "I recursively call Fibonacci of\nn minus 2 and add those two numbers together.\nSo, you get this branching tree.\nYou are solving two subproblems",
    "start": "1259000",
    "end": "1266000"
  },
  {
    "text": "of almost the same size,\njust additively smaller by one or two.\nI mean you are almost not reducing the problem size at\nall, so that's intuitively why",
    "start": "1266000",
    "end": "1273000"
  },
  {
    "text": "it is exponential.\nYou can draw a recursion tree and you will see how big it gets\nand how quickly. I mean by n over two levels,\nyou've only reduced on one",
    "start": "1273000",
    "end": "1281000"
  },
  {
    "text": "branch the problem from n to n\nover 2. The other one,\nmaybe you've gotten from n down to one, but none of the branches\nhave stopped after n of two",
    "start": "1281000",
    "end": "1289000"
  },
  {
    "text": "levels.\nYou have at least 2 to the power n over 2 which is like\nsquare root of 2 to the power n,",
    "start": "1289000",
    "end": "1297000"
  },
  {
    "text": "which is getting close to phi\nto the n. So, this is definitely\nexponential. And exponential is bad.\nWe want polynomial.",
    "start": "1297000",
    "end": "1306000"
  },
  {
    "text": "N squared, n cubed,\nlog n would be nice. Anything that is bounded above\nby a polynomial is good.",
    "start": "1306000",
    "end": "1313000"
  },
  {
    "text": "This is an old idea.\nIt goes back to one of the main people who said polynomial is\ngood, Jack Edmonds who is famous",
    "start": "1313000",
    "end": "1321000"
  },
  {
    "text": "in the combinatorial\noptimization world. He is my academic grandfather\non one side.",
    "start": "1321000",
    "end": "1332000"
  },
  {
    "text": "He is a very interesting guy.",
    "start": "1332000",
    "end": "1338000"
  },
  {
    "start": "1338000",
    "end": "1352000"
  },
  {
    "text": "OK, so that's a really bad\nalgorithm. You have probably seen a\nsomewhat better algorithm, which you might think of as the\nbottom-up implantation of that",
    "start": "1352000",
    "end": "1361000"
  },
  {
    "text": "recursive algorithm. ",
    "start": "1361000",
    "end": "1369000"
  },
  {
    "text": "Or, another way to think of it\nis if you build out the recursion tree for Fibonacci of\nn, you will see that there are lots of common subtrees that you\nare just wasting time on.",
    "start": "1369000",
    "end": "1378000"
  },
  {
    "text": "When you solve Fibonacci of n\nminus 1, it again solves Fibonacci of n minus 2.\nWhy solve it twice?",
    "start": "1378000",
    "end": "1384000"
  },
  {
    "text": "You only need to solve it once.\nSo, it is really easy to do that if you do it bottom-up.\nBut you could also do it",
    "start": "1384000",
    "end": "1391000"
  },
  {
    "text": "recursively with some cache of\nthings you have already computed.\nSo, no big surprise. You compute the Fibonacci\nnumbers in order.",
    "start": "1391000",
    "end": "1399000"
  },
  {
    "text": "And each time,\nwhen you compute Fibonacci of n, let's say,\nyou have already computed the previous two,\nyou add them together,",
    "start": "1399000",
    "end": "1407000"
  },
  {
    "text": "it takes constant time.\nSo, the running time here is linear, linear in n,\nand as our input.",
    "start": "1407000",
    "end": "1416000"
  },
  {
    "text": "Great.\nIs that the best we can do? No.\nAny ideas on how we could",
    "start": "1416000",
    "end": "1422000"
  },
  {
    "text": "compute Fibonacci of n faster\nthan linear time? Now we should diverge from what\nyou have already seen,",
    "start": "1422000",
    "end": "1432000"
  },
  {
    "text": "most of you.\nAny ideas using techniques you have already seen?\nYes?",
    "start": "1432000",
    "end": "1440000"
  },
  {
    "text": "Yes.\nWe can use the mathematical trick of phi and psi to the nth\npowers. In fact, you can just use phi,\nphi, pi, pho,",
    "start": "1440000",
    "end": "1449000"
  },
  {
    "text": "phum, whatever you want to call\nthis Greek letter. Good.\nHere is the mathematical trick.",
    "start": "1449000",
    "end": "1456000"
  },
  {
    "text": "And, indeed,\nthis is cheating, as you have said.\nThis is no good, but so it is.\nWe will call it naÔve recursive",
    "start": "1456000",
    "end": "1464000"
  },
  {
    "text": "squaring and say well,\nwe know recursive squaring.",
    "start": "1464000",
    "end": "1470000"
  },
  {
    "text": "Recursive squaring takes log n\ntime. Let's use recursive squaring.\nAnd if you happen to know lots",
    "start": "1470000",
    "end": "1476000"
  },
  {
    "text": "of properties of the Fibonacci\nnumbers, you don't have to, but here is one of them.\nIf you take phi to the n",
    "start": "1476000",
    "end": "1484000"
  },
  {
    "text": "divided by root 5 and you round\nit to the nearest integer that is the nth Fibonacci number.",
    "start": "1484000",
    "end": "1491000"
  },
  {
    "start": "1491000",
    "end": "1498000"
  },
  {
    "text": "This is pretty cool.\nFibonacci of n is basically phi to the n.\nWe could apply recursive squaring to compute phi to the n\nin log n time,",
    "start": "1498000",
    "end": "1507000"
  },
  {
    "text": "divide by root 5,\nassume that our computer has an operation that rounds a number\nto its nearest integer and poof,",
    "start": "1507000",
    "end": "1516000"
  },
  {
    "text": "we are done.\nThat doesn't work for many different reasons.\nOn a real machine,",
    "start": "1516000",
    "end": "1522000"
  },
  {
    "text": "probably you would represent\nphi and root 5 as floating point numbers which have some fixed\namount of precise bits.",
    "start": "1522000",
    "end": "1532000"
  },
  {
    "text": "And if you do this computation,\nyou will lose some of the important bits.\nAnd when you round to the nearest integer you won't get\nthe right answer.",
    "start": "1532000",
    "end": "1539000"
  },
  {
    "text": "So, floating point round off\nwill kill you on a floating point machine.\nOn a theoretical machine where",
    "start": "1539000",
    "end": "1545000"
  },
  {
    "text": "we magically have numbers that\ncan do crazy things like this, I mean it really takes more\nthan constant time per",
    "start": "1545000",
    "end": "1551000"
  },
  {
    "text": "multiplication.\nSo, we are sort of in a different model.\nYou cannot multiply phi times phi in constant time.\nI mean that's sort of outside",
    "start": "1551000",
    "end": "1558000"
  },
  {
    "text": "the boundaries of this course,\nbut that's the way it is. In fact, in a normal machine,\nsome problems you can only",
    "start": "1558000",
    "end": "1566000"
  },
  {
    "text": "solve in exponential time.\nIn a machine where you can multiply real numbers and round\nthem to the nearest integers,",
    "start": "1566000",
    "end": "1573000"
  },
  {
    "text": "you can solve them in\npolynomial time. So, it really breaks the model.\nYou can do crazy things if you",
    "start": "1573000",
    "end": "1579000"
  },
  {
    "text": "were allowed to do this.\nThis is not allowed. And I am foreshadowing like\nthree classes ahead,",
    "start": "1579000",
    "end": "1585000"
  },
  {
    "text": "or three courses ahead,\nso I shouldn't talk more about it.\nBut it turns out we can use",
    "start": "1585000",
    "end": "1592000"
  },
  {
    "text": "recursive squaring in a\ndifferent way if we use a different property of Fibonacci\nnumbers.",
    "start": "1592000",
    "end": "1598000"
  },
  {
    "text": "And then we will just stick\nwith integers and everything will be happy.\nDon't forget to go to",
    "start": "1598000",
    "end": "1605000"
  },
  {
    "text": "recitation and if you want to\nhomework lab. Don't come here on Monday.\nThat is required.",
    "start": "1605000",
    "end": "1611000"
  },
  {
    "text": "This is sort of the right\nrecursive squaring algorithm.",
    "start": "1611000",
    "end": "1617000"
  },
  {
    "text": "And this is a bit hard to guess\nif you haven't already seen it, so I will just give it to you.\nI will call this a theorem.",
    "start": "1617000",
    "end": "1627000"
  },
  {
    "text": "It's the first time I get to\nuse the word theorem in this class.\nIt turns out the nth Fibonacci",
    "start": "1627000",
    "end": "1635000"
  },
  {
    "text": "number is the nth power of this\nmatrix. Cool.\nIf you look at it a little bit",
    "start": "1635000",
    "end": "1641000"
  },
  {
    "text": "you say oh, yeah,\nof course. And we will prove this theorem\nin a second.",
    "start": "1641000",
    "end": "1649000"
  },
  {
    "text": "But once we have this theorem,\nwe can compute f of n by computing the nth power of this\nmatrix. It's a two-by-two matrix.\nYou multiply two two-by-two",
    "start": "1649000",
    "end": "1656000"
  },
  {
    "text": "matrixes together,\nyou get a two-by-two matrix. So that is constant size,\nfour numbers. I can handle four numbers.\nWe don't have crazy precision",
    "start": "1656000",
    "end": "1664000"
  },
  {
    "text": "problems on the floating point\nside. There are only four numbers to\ndeal with. Matrixes aren't getting bigger.\nSo, the running time of this",
    "start": "1664000",
    "end": "1672000"
  },
  {
    "text": "divide-and-conquer algorithm\nwill still be log n because it takes a constant time per\ntwo-by-two matrix multiplication.\nYes?",
    "start": "1672000",
    "end": "1680000"
  },
  {
    "text": "Oh, yes.\nThank you. I have a type error.\nSorry about that.",
    "start": "1680000",
    "end": "1686000"
  },
  {
    "text": "F of n is indeed the upper left\ncorner, I hope.",
    "start": "1686000",
    "end": "1692000"
  },
  {
    "text": "I better check I don't have it\noff by one. I do.\nIt's F_n upper right corner,",
    "start": "1692000",
    "end": "1701000"
  },
  {
    "text": "indeed.\nThat's what you said. F of n.\nI need more space.",
    "start": "1701000",
    "end": "1707000"
  },
  {
    "text": "Sorry.\nI really ought to have a two-by-two matrix on the\nleft-hand side there.",
    "start": "1707000",
    "end": "1716000"
  },
  {
    "text": "Thank you.\nSo, I compute this nth power of a matrix in log n time,\nI take the upper right corner",
    "start": "1716000",
    "end": "1724000"
  },
  {
    "text": "or the lower left corner,\nyour choice, that is the nth Fibonacci\nnumber.",
    "start": "1724000",
    "end": "1731000"
  },
  {
    "text": "This implies an order log n\ntime algorithm with the same recurrence as the last two,\nbinary search and really the",
    "start": "1731000",
    "end": "1741000"
  },
  {
    "text": "recursive squaring algorithm.\nIt is log n plus a constant,",
    "start": "1741000",
    "end": "1747000"
  },
  {
    "text": "so log n.\nLet's prove that theorem. ",
    "start": "1747000",
    "end": "1770000"
  },
  {
    "text": "Any suggestions on what\ntechniques we might use for proving this theorem,\nor what technique,",
    "start": "1770000",
    "end": "1777000"
  },
  {
    "text": "singular?\nInduction, very good. I think any time I ask that\nquestion the answer is",
    "start": "1777000",
    "end": "1784000"
  },
  {
    "text": "induction.\nHint for the future in this class. ",
    "start": "1784000",
    "end": "1794000"
  },
  {
    "text": "A friend of mine,\nwhen he took an analysis class, whenever the professor asked,\nand what is the answer to this question, the answer was always\nzero.",
    "start": "1794000",
    "end": "1801000"
  },
  {
    "text": "If you have taken analysis\nclass that is funny. [LAUGHTER] Maybe I will try to\nask some questions whose answers",
    "start": "1801000",
    "end": "1810000"
  },
  {
    "text": "are zero just for our own\namusement. We are going to induct on n.\nIt's pretty much the obvious",
    "start": "1810000",
    "end": "1817000"
  },
  {
    "text": "thing to do.\nBut we have to check some cases.\nSo, the base case is we have",
    "start": "1817000",
    "end": "1823000"
  },
  {
    "text": "this to the first power.\nAnd that is itself [(1, 1), (1, 0)].\nAnd I should have said n is at",
    "start": "1823000",
    "end": "1833000"
  },
  {
    "text": "least 1.\nAnd you can check. This is supposed to be F_2,\nF_1, F_1, F_0.",
    "start": "1833000",
    "end": "1840000"
  },
  {
    "text": "And you can check it is,\nF_0 is 0, F_1 is 1 and F_2 is\n497\n00:30:46,000 --> 00:00:01,000\nBase case is correct,\nstep case is about as exciting, Good.",
    "start": "1840000",
    "end": "1846000"
  },
  {
    "text": "but you've got to prove that\nyour algorithm works.",
    "start": "1852000",
    "end": "1859000"
  },
  {
    "text": "Suppose this is what we want to\ncompute. I am just going to sort of,\nwell, there are many ways I can",
    "start": "1859000",
    "end": "1870000"
  },
  {
    "text": "do this.\nI will just do it the fast way because it's really not that\nexciting.",
    "start": "1870000",
    "end": "1878000"
  },
  {
    "text": "Which direction?\nLet's do this direction. I want to use induction on n.\nIf I want to use induction on",
    "start": "1878000",
    "end": "1889000"
  },
  {
    "text": "n, presumably I should use what\nI already know is true. If I decrease n by 1,\nI have this property that this",
    "start": "1889000",
    "end": "1897000"
  },
  {
    "text": "thing is going to be [(1,\n1), (1, 0)] to the power n minus 1.\nThis I already know, by the induction hypothesis,\n[(1, 1), (1,",
    "start": "1897000",
    "end": "1905000"
  },
  {
    "text": "0)] to the n minus 1.\nSo, presumably I should use it in some way.\nThis equality is not yet true,",
    "start": "1905000",
    "end": "1911000"
  },
  {
    "text": "you may have noticed.\nSo, I need to add something on. What could I possibly add on to\nbe correct?",
    "start": "1911000",
    "end": "1919000"
  },
  {
    "text": "Well, another factor of [(1,\n1), (1, 0)]. The way I am developing this\nproof is the only way it could",
    "start": "1919000",
    "end": "1925000"
  },
  {
    "text": "possibly be, in some sense.\nIf you know its induction, this is all that you could do.\nAnd then you check.",
    "start": "1925000",
    "end": "1932000"
  },
  {
    "text": "Indeed, this equality holds\nconveniently. For example,\nF_(n plus 1) is the product of these two things.\nIt is this row times this",
    "start": "1932000",
    "end": "1940000"
  },
  {
    "text": "column.\nSo, it is F_n times 1 plus F_(n minus 1) times 1,\nwhich is indeed the definition of F_(n plus 1).\nAnd you could check four of the",
    "start": "1940000",
    "end": "1950000"
  },
  {
    "text": "entries.\nThis is true. Great.\nIf that is true then I would",
    "start": "1950000",
    "end": "1956000"
  },
  {
    "text": "just put these together.\nThat is [(1, 1), (1, 0)] to the n minus 1\ntimes [(1, 1),",
    "start": "1956000",
    "end": "1963000"
  },
  {
    "text": "(1, 0)], which is [(1,\n1), (1, 0)] to the n, end of proof.\nA very simple proof,",
    "start": "1963000",
    "end": "1970000"
  },
  {
    "text": "but you have to do that in\norder to know if this algorithm really works.\nGood.",
    "start": "1970000",
    "end": "1977000"
  },
  {
    "text": "Question?\nOh, yes. Thank you.\nThis, in the lower right,",
    "start": "1977000",
    "end": "1983000"
  },
  {
    "text": "we should have F_(n minus 1).\nThis is why you should really check your proofs.\nWe would have discovered that",
    "start": "1983000",
    "end": "1992000"
  },
  {
    "text": "when I checked that this was\nthat row times that column, but that is why you are here,\nto fix my bugs.",
    "start": "1992000",
    "end": "2000000"
  },
  {
    "text": "That's the great thing about\nbeing up here instead of in a quiz.\nBut that is a minor mistake.",
    "start": "2000000",
    "end": "2009000"
  },
  {
    "text": "You wouldn't lose much for\nthat. All right.\nMore divide-and-conquer algorithms.\nStill, we have done relatively",
    "start": "2009000",
    "end": "2017000"
  },
  {
    "text": "simple ones so far.\nIn fact, the fanciest has been merge sort, which we already\nsaw.",
    "start": "2017000",
    "end": "2024000"
  },
  {
    "text": "So, that is not too exciting.\nThe rest have all be log n time.\nLet's break out of the log n",
    "start": "2024000",
    "end": "2031000"
  },
  {
    "text": "world.\nWell, you all have the master method memorized,\nright, so I can erase that.",
    "start": "2031000",
    "end": "2038000"
  },
  {
    "text": "Good.\nThis will be a good test. Next problem is matrix\nmultiplication,",
    "start": "2038000",
    "end": "2044000"
  },
  {
    "text": "following right up on this\ntwo-by-two matrix multiplication.\nLet's see how we can compute",
    "start": "2044000",
    "end": "2051000"
  },
  {
    "text": "n-by-n matrix multiplications.\nJust for a recap, you should know how to multiply\nmatrixes, but here is the",
    "start": "2051000",
    "end": "2059000"
  },
  {
    "text": "definition so we can turn it\ninto an algorithm. You have two matrixes,\nA and B, which are capital",
    "start": "2059000",
    "end": "2066000"
  },
  {
    "text": "levels.\nThe ijth entry. Ith row, jth column is called\nlittle a_ij or little b_ij.",
    "start": "2066000",
    "end": "2074000"
  },
  {
    "text": "And your goal is to compute the\nproducts of those matrixes.",
    "start": "2074000",
    "end": "2080000"
  },
  {
    "text": "I should probably say that i\nand j range from 1 to n. So, they are square matrixes.\nThe output is to compute C",
    "start": "2080000",
    "end": "2091000"
  },
  {
    "text": "which has entry c_ij which is\nthe product of A and B.",
    "start": "2091000",
    "end": "2097000"
  },
  {
    "text": "And, for a recap,\nthe ijth entry of the product is the inner product of the ith\nrow of A with the jth column of",
    "start": "2097000",
    "end": "2108000"
  },
  {
    "text": "B.\nBut you can write that out as a sum like so.\nWe want to compute this thing",
    "start": "2108000",
    "end": "2117000"
  },
  {
    "text": "for every i and j.\nWhat is the obvious algorithm for doing this?\nWell, for every i and j you",
    "start": "2117000",
    "end": "2127000"
  },
  {
    "text": "compute the sum.\nYou compute all the products. You compute the sum.\nSo, it's like n operations here",
    "start": "2127000",
    "end": "2135000"
  },
  {
    "text": "roughly.\nI mean like 2n minus 1, whatever.\nIt is order n operations. There are n^2 entries of C that\nI need to compute,",
    "start": "2135000",
    "end": "2143000"
  },
  {
    "text": "so that's n^3 time.\nI will write this out just for the programmers at heart.\nHere is the pseudocode.",
    "start": "2143000",
    "end": "2150000"
  },
  {
    "text": "It's rare that I will write\npseudocode. And this is a simple enough\nalgorithm that I can write it in",
    "start": "2150000",
    "end": "2157000"
  },
  {
    "text": "gory detail.\nBut it gives you some basis for",
    "start": "2157000",
    "end": "2163000"
  },
  {
    "text": "this analysis if you like to\nprogram. It is a triply nested for loop.",
    "start": "2163000",
    "end": "2170000"
  },
  {
    "start": "2170000",
    "end": "2177000"
  },
  {
    "text": "And I made a coding error.\nHopefully you haven't written",
    "start": "2177000",
    "end": "2183000"
  },
  {
    "text": "that far yet.\nI need c_ij to be initialized to zero.\nAnd then I add to c_ij the",
    "start": "2183000",
    "end": "2191000"
  },
  {
    "text": "appropriate product,\na_ik, b_kj. That is the algorithm.\nAnd the point is you have a",
    "start": "2191000",
    "end": "2199000"
  },
  {
    "text": "nesting of n for loops from 1 to\nn. That takes n^3 time because\nthis is constant and that is",
    "start": "2199000",
    "end": "2206000"
  },
  {
    "text": "constant.\nSo, very simple, n^3.\nLet's do better. ",
    "start": "2206000",
    "end": "2217000"
  },
  {
    "text": "And, of course,\nwe are going to use divide-and-conquer. ",
    "start": "2217000",
    "end": "2224000"
  },
  {
    "text": "Now, how are we going to divide\na matrix? There are a lot of numbers in a\nmatrix, n^2 of them in each one.",
    "start": "2224000",
    "end": "2230000"
  },
  {
    "text": "There are all sorts of ways you\ncould divide. So far all of the\ndivide-and-conquers we have done have been problems of size n\ninto some number of problems of",
    "start": "2230000",
    "end": "2239000"
  },
  {
    "text": "size n over 2.\nI am going to say I start with some matrixes of size n-by-n.\nI want to convert it down to",
    "start": "2239000",
    "end": "2245000"
  },
  {
    "text": "something like n/2-by-n/2.\nAny suggestions how I might do that?\nYeah? Block form the matrix,\nindeed.",
    "start": "2245000",
    "end": "2253000"
  },
  {
    "text": "That is the right answer.\nSo, this is the first divide-and-conquer algorithm.\nThis will not work,",
    "start": "2253000",
    "end": "2263000"
  },
  {
    "text": "but it has the first idea that\nwe need. We have a n-by-n matrix.\nWe can view it,",
    "start": "2263000",
    "end": "2271000"
  },
  {
    "text": "this equality is more,\nyou can think of it as, it's really the thing,\na two-by-two block matrix where",
    "start": "2271000",
    "end": "2281000"
  },
  {
    "text": "each entry in this two-by-two\nblock matrix is a block of n/2-by-n/2 submatrixes.",
    "start": "2281000",
    "end": "2291000"
  },
  {
    "start": "2291000",
    "end": "2300000"
  },
  {
    "text": "I will think of C as being\ndivided into three parts,",
    "start": "2300000",
    "end": "2307000"
  },
  {
    "text": "r, s, t and u.\nEven though I write them as lower case letters they are\nreally matrixes.",
    "start": "2307000",
    "end": "2317000"
  },
  {
    "text": "Each is n/2-by-n/2.\nAnd A, I will split into a, b, c, d, times B,\nI will split into e,",
    "start": "2317000",
    "end": "2326000"
  },
  {
    "text": "f, g, h.\nWhy not? This is certainly true.\nAnd if you've seen some linear",
    "start": "2326000",
    "end": "2333000"
  },
  {
    "text": "algebra, this is basically what\nyou can do with matrixes.",
    "start": "2333000",
    "end": "2341000"
  },
  {
    "text": "Now I can pretend these are\ntwo-by-two and sort of forget the fact that these little\nletters are matrixes and say",
    "start": "2341000",
    "end": "2349000"
  },
  {
    "text": "well, r is the inner product of\nthis row with this column. It is ae times bg.\nLet me not cheat or else it",
    "start": "2349000",
    "end": "2357000"
  },
  {
    "text": "will be too easy.\nr=ae+bg, s=af+bh,",
    "start": "2357000",
    "end": "2363000"
  },
  {
    "text": "t=ce+dh and u=cf+dg.\nIt's nothing like making it too",
    "start": "2363000",
    "end": "2374000"
  },
  {
    "text": "hard on yourself.\nOK, got them right.",
    "start": "2374000",
    "end": "2381000"
  },
  {
    "text": "Good.\nI mean this is just a fact",
    "start": "2381000",
    "end": "2388000"
  },
  {
    "text": "about how you would expand out\nthis product.",
    "start": "2388000",
    "end": "2399000"
  },
  {
    "text": "And so now we have a recursive\nalgorithm. In fact, we have a\ndivide-and-conquer algorithm. We start with our n-by-n\nmatrix.",
    "start": "2399000",
    "end": "2407000"
  },
  {
    "text": "Well, we have two of them\nactually. We divide it into eight little\npieces, a, b, c, d, e, f, g,\nh.",
    "start": "2407000",
    "end": "2413000"
  },
  {
    "text": "Then we compute these things\nand that gives us C, just by sticking them together.\nNow, how do we compute these",
    "start": "2413000",
    "end": "2420000"
  },
  {
    "text": "things?\nWell, these innocent-looking little products between these\ntwo little numbers are actually",
    "start": "2420000",
    "end": "2427000"
  },
  {
    "text": "recursive matrix\nmultiplications. Because each of these little\nletters is an n/2-by-n/2 matrix",
    "start": "2427000",
    "end": "2437000"
  },
  {
    "text": "so I have to recursively compute\nthe product. There are like eight recursive\nmultiplications of n/2-by-n/2",
    "start": "2437000",
    "end": "2449000"
  },
  {
    "text": "matrixes.\nThat is what bites us. And then there are like four\nadditions, plus minor work of",
    "start": "2449000",
    "end": "2459000"
  },
  {
    "text": "gluing things together.\nHow long does it take to add",
    "start": "2459000",
    "end": "2465000"
  },
  {
    "text": "two matrixes together?\nn^2. This is cheap.\nIt just takes n^2. Remember, we are trying to beat\nn^3 for our matrix",
    "start": "2465000",
    "end": "2472000"
  },
  {
    "text": "multiplication.\nAddition is a really easy problem.\nYou just have to add every number.\nThere is no way you can do",
    "start": "2472000",
    "end": "2480000"
  },
  {
    "text": "better than n^2.\nSo, that is not recursive. That is the nice thing.\nBut the bad thing is we have",
    "start": "2480000",
    "end": "2486000"
  },
  {
    "text": "eight of these recursions.\nWe have T(n)=8T(n/2)+Theta(n^2).\nAnd I have erased the master",
    "start": "2486000",
    "end": "2499000"
  },
  {
    "text": "method, but you should all have\nit memorized.",
    "start": "2499000",
    "end": "2506000"
  },
  {
    "text": "What is the solution to this\nrecurrence?",
    "start": "2506000",
    "end": "2512000"
  },
  {
    "text": "Theta(n^3).\nThat is annoying. All right.\nA is 8, b is 2,",
    "start": "2512000",
    "end": "2521000"
  },
  {
    "text": "log base 2 of 8 is 3.\nEvery computer scientist should",
    "start": "2521000",
    "end": "2527000"
  },
  {
    "text": "know that.\nn^log_b(a)=n^3. That is polynomially larger\nthan n^2, so we are in Case 1.",
    "start": "2527000",
    "end": "2535000"
  },
  {
    "text": "Thank you.\nLet's get them upside down. This is n^3,\nno better than our previous",
    "start": "2535000",
    "end": "2543000"
  },
  {
    "text": "algorithm.\nThat kind of sucks. And now comes the divine\ninspiration.",
    "start": "2543000",
    "end": "2550000"
  },
  {
    "text": "Let's go over here. ",
    "start": "2550000",
    "end": "2561000"
  },
  {
    "text": "There are some algorithms like\nthis Fibonacci algorithm where if you sat down for a little\nwhile, it's no big deal,",
    "start": "2561000",
    "end": "2567000"
  },
  {
    "text": "you would figure it out.\nI mean it is kind of clever to look at that matrix and then\neverything works happily.",
    "start": "2567000",
    "end": "2574000"
  },
  {
    "text": "It is not obvious but it is not\nthat amazingly clever. This is an algorithm that is\namazingly clever.",
    "start": "2574000",
    "end": "2581000"
  },
  {
    "text": "You may have seen it before\nwhich steals the thunder a little bit, but it is still\nreally, really cool so you",
    "start": "2581000",
    "end": "2590000"
  },
  {
    "text": "should be happy to see it again.\nAnd how Strassen came up with this algorithm,\nhe must have been very clever.",
    "start": "2590000",
    "end": "2599000"
  },
  {
    "text": "The idea is we've got to get\nrid of these multiplications. I could do a hundred additions.\nThat only costs Theta(n^2).",
    "start": "2599000",
    "end": "2610000"
  },
  {
    "text": "I have to reduce this 8 to\nsomething smaller. It turns out,\nif you try to split the matrices into three-by-three or\nsomething, that doesn't help",
    "start": "2610000",
    "end": "2619000"
  },
  {
    "text": "you.\nYou get the same problem because we're using\nfundamentally the same algorithm, just in a different\norder.",
    "start": "2619000",
    "end": "2627000"
  },
  {
    "text": "We have got to somehow reduce\nthe number of multiplications. We are going to reduce it to 7.\nThe claim is that if we have",
    "start": "2627000",
    "end": "2635000"
  },
  {
    "text": "two two-by-two matrices we can\ntake their product using seven multiplications.\nIf that were true,",
    "start": "2635000",
    "end": "2643000"
  },
  {
    "text": "we would reduce the 8 to a 7\nand presumably make things run faster.\nWe will see how fast in a",
    "start": "2643000",
    "end": "2651000"
  },
  {
    "text": "moment.\nYou can compute it in your head.\nIf you are bored and like computing logs that are\nnon-integral logs then go ahead.",
    "start": "2651000",
    "end": "2661000"
  },
  {
    "text": "All right.\nHere we are. This algorithm is unfortunately\nrather long, but it is only",
    "start": "2661000",
    "end": "2668000"
  },
  {
    "text": "seven multiplications. ",
    "start": "2668000",
    "end": "2685000"
  },
  {
    "text": "Each of these P's is a product\nof two things which only involves addition or\nsubtraction, the same thing.",
    "start": "2685000",
    "end": "2694000"
  },
  {
    "start": "2694000",
    "end": "2738000"
  },
  {
    "text": "Those are seven\nmultiplications. And I can compute those in\n7T(n/2).",
    "start": "2738000",
    "end": "2744000"
  },
  {
    "text": "Oh, indeed it is.\nSix was wrong. Six and seven are the same,\nvery good.",
    "start": "2744000",
    "end": "2751000"
  },
  {
    "text": "You know, you think that\ncopying something would not be",
    "start": "2751000",
    "end": "2757000"
  },
  {
    "text": "such a challenging task.\nBut when you become an absent-minded professor like me\nthen you will know how easy it",
    "start": "2757000",
    "end": "2767000"
  },
  {
    "text": "is.\nOK.\nWe have them all correct,\nhopefully. We continue.\nThat wasn't enough. Of course we had seven things.\nClearly we have to reduce this",
    "start": "2767000",
    "end": "2776000"
  },
  {
    "text": "down to four things,\nthe elements of C. Here they are,\nthe elements of C,",
    "start": "2776000",
    "end": "2782000"
  },
  {
    "text": "r, s, t, u.\nIt turns out r=P_5+P_4-P_2+P_6. Of course.\nDidn't you all see that? [LAUGHTER]\nI mean this one is really easy,",
    "start": "2782000",
    "end": "2793000"
  },
  {
    "text": "s=P_1+P2.\nt=P_3+P_4. I mean that is clearly how they\nwere chosen.",
    "start": "2793000",
    "end": "2801000"
  },
  {
    "text": "And then u is another tricky\none, u=P_5+P_1-P_3-P_7.",
    "start": "2801000",
    "end": "2808000"
  },
  {
    "text": "OK.\nNow, which one of these would you like me to check?\nDon't be so nice.",
    "start": "2808000",
    "end": "2817000"
  },
  {
    "text": "How about s?\nI can show you s is right.",
    "start": "2817000",
    "end": "2823000"
  },
  {
    "text": "Any preferences?\nu. Oh, no, sign errors.\nOK.",
    "start": "2823000",
    "end": "2829000"
  },
  {
    "text": "Here we go.\nThe claim that this really works is you have to check all\nfour of them.",
    "start": "2829000",
    "end": "2841000"
  },
  {
    "text": "And I did in my notes.\nu=P_5. P_5=(ae + ah + de + dh).\nThat is P_5.",
    "start": "2841000",
    "end": "2851000"
  },
  {
    "text": "Check me.\nIf I screw up, I am really hosed.\n(af - ah) = P_1.",
    "start": "2851000",
    "end": "2860000"
  },
  {
    "text": "P_3 has a minus sign in front,\nso that is (ce + de).",
    "start": "2860000",
    "end": "2868000"
  },
  {
    "text": "And then we have minus P_7,\nwhich is a big one,",
    "start": "2868000",
    "end": "2875000"
  },
  {
    "text": "(ae + af - ce - cf).\nOK. Now I need like the assistant\nthat crosses off things in",
    "start": "2875000",
    "end": "2892000"
  },
  {
    "text": "parallel like the movie,\nright?",
    "start": "2892000",
    "end": "2899000"
  },
  {
    "text": "ah, de, af, ce,\nae, thank you,",
    "start": "2899000",
    "end": "2905000"
  },
  {
    "text": "and hopefully these survive,\ndh minus minus cf.",
    "start": "2905000",
    "end": "2917000"
  },
  {
    "text": "And, if we are lucky,\nthat is exactly what is written here, except in the opposite\norder. Magic, right?\nWhere the hell did Strassen get",
    "start": "2917000",
    "end": "2925000"
  },
  {
    "text": "this?\nYou have to be careful. It is OK that the plus is in\nthe wrong order because plus is",
    "start": "2925000",
    "end": "2931000"
  },
  {
    "text": "commutative, but the\nmultiplications better not be in the wrong order because\nmultiplication over matrixes is",
    "start": "2931000",
    "end": "2938000"
  },
  {
    "text": "not commutative.\nI check cf, OK, dh, they are in the right\norder.",
    "start": "2938000",
    "end": "2945000"
  },
  {
    "text": "I won't check the other three.\nThat is matrix multiplication",
    "start": "2945000",
    "end": "2951000"
  },
  {
    "text": "in hopefully subcubic time.\nLet's write down the",
    "start": "2951000",
    "end": "2957000"
  },
  {
    "text": "recurrence.\nT(n) is now 7. Maybe I should write down the\nalgorithm for kicks.",
    "start": "2957000",
    "end": "2965000"
  },
  {
    "text": "Why not?\nAssuming I have time. Lots of time.\nLast lecture I was ten minutes",
    "start": "2965000",
    "end": "2973000"
  },
  {
    "text": "early.\nI ended ten minutes early. I apologize for that.\nI know it really upsets you.",
    "start": "2973000",
    "end": "2980000"
  },
  {
    "text": "And I didn't realize exactly\nwhen the class was supposed to",
    "start": "2980000",
    "end": "2986000"
  },
  {
    "text": "end.\nSo, today, I get to go ten minutes late.\nOK. Good.\nI'm glad you all agree.",
    "start": "2986000",
    "end": "2992000"
  },
  {
    "text": "[LAUGHTER] I am kidding.\nDon't worry. OK.\nAlgorithm. This is Strassen.\nFirst we divide,",
    "start": "2992000",
    "end": "3002000"
  },
  {
    "text": "then we conquer and then we\ncombine. As usual, I don't have it\nwritten anywhere here.",
    "start": "3002000",
    "end": "3014000"
  },
  {
    "text": "Fine.\nDivide A and B. This is sort of trivial.\nThen we compute the terms --",
    "start": "3014000",
    "end": "3027000"
  },
  {
    "start": "3027000",
    "end": "3036000"
  },
  {
    "text": "-- for the products.\nThis means we get ready to compute all the P's.\nWe compute a+b,",
    "start": "3036000",
    "end": "3042000"
  },
  {
    "text": "c+d, g-e, a+d,\ne+h and so on. All of the terms that appear in\nhere, we compute those.",
    "start": "3042000",
    "end": "3049000"
  },
  {
    "text": "That takes n2 time because it\nis just a bunch of additions and subtractions.\nNo big deal.",
    "start": "3049000",
    "end": "3056000"
  },
  {
    "text": "A constant number of them.\nThen we conquer by recursively",
    "start": "3056000",
    "end": "3064000"
  },
  {
    "text": "computing all the P_i's.\nThat is each our product of",
    "start": "3064000",
    "end": "3072000"
  },
  {
    "text": "seven of them.\nWe have P_1, P_2 up to P_7.\nAnd, finally,",
    "start": "3072000",
    "end": "3081000"
  },
  {
    "text": "we combine, which is to compute\nr, s, t and u.",
    "start": "3081000",
    "end": "3090000"
  },
  {
    "start": "3090000",
    "end": "3096000"
  },
  {
    "text": "And those are just additions\nand subtractions again, so they take n^2 times.\nSo, here we finally get an",
    "start": "3096000",
    "end": "3103000"
  },
  {
    "text": "algorithm that is nontrivial\nboth in dividing and in combining.\nRecursion is always recursion,",
    "start": "3103000",
    "end": "3111000"
  },
  {
    "text": "but now we have interesting\nsteps one and three. The recurrence is T(n) is seven\nrecursive subproblems,",
    "start": "3111000",
    "end": "3119000"
  },
  {
    "text": "each are size n/2 plus order\nn^2, to do all this addition work.\nNow we need to solve this",
    "start": "3119000",
    "end": "3127000"
  },
  {
    "text": "recurrence.\nWe compute n^log_b(a), which here is nlog_2(7).\nAnd we know log base 2 of 8 is\n793\n00:52:16,000 --> 00:00:03,000 Log base 2 of 7 is going be a",
    "start": "3127000",
    "end": "3140000"
  },
  {
    "text": "little bit less than 3 but still\nbigger than 2 because log base 2",
    "start": "3140000",
    "end": "3146000"
  },
  {
    "text": "of 4 is 2.\nSo, it is going to be polynomially larger than n^2 but\npolynomially smaller than n^3.",
    "start": "3146000",
    "end": "3156000"
  },
  {
    "text": "We are again in Case 1.\nAnd this is the cheating way to write n log base 2 of 7,\nnlg7.",
    "start": "3156000",
    "end": "3164000"
  },
  {
    "text": "lg means log base 2.\nYou should know that. It is all over the textbook and\nin our problem sets and what",
    "start": "3164000",
    "end": "3173000"
  },
  {
    "text": "not, nlg7.\nAnd, in particular, if I have my calculator here.\nThis is a good old-fashion",
    "start": "3173000",
    "end": "3182000"
  },
  {
    "text": "calculator.\nNo, that is wrong. Sorry.\nIt is strictly less than 2.81. It is strictly less than 2.81.\nThat is cool.",
    "start": "3182000",
    "end": "3191000"
  },
  {
    "text": "I mean it is polynomially\nbetter than n^3. Still not as good as addition,\nwhich is n^2.",
    "start": "3191000",
    "end": "3198000"
  },
  {
    "text": "It is generally believed,\nalthough we don't know whether you can multiply as fast as you\ncan divide for matrices.",
    "start": "3198000",
    "end": "3209000"
  },
  {
    "text": "We think you cannot get n^2,\nbut who knows? It could still happen.\nThere are no lower bounds.",
    "start": "3209000",
    "end": "3216000"
  },
  {
    "text": "This is not the best algorithm\nfor matrix multiplication. It is sort of the simplest that\nbeats n^3.",
    "start": "3216000",
    "end": "3224000"
  },
  {
    "text": "The best so far is like\nn^2.376. Getting closer to 2.\nYou might think these numbers",
    "start": "3224000",
    "end": "3230000"
  },
  {
    "text": "are a bit weird.\nMaybe the constants out here dominate the improvement you are\ngetting in the exponent.",
    "start": "3230000",
    "end": "3240000"
  },
  {
    "text": "It turns out improving the\nexponent is a big deal. I mean, as n gets larger\nexponents really come out to",
    "start": "3240000",
    "end": "3246000"
  },
  {
    "text": "bite you.\nSo, n^3 is pretty impractical for any very large values of n.\nAnd we known that Strassen will",
    "start": "3246000",
    "end": "3253000"
  },
  {
    "text": "beat normal matrix\nmultiplication if n is sufficiently large.\nThe claim is that roughly at",
    "start": "3253000",
    "end": "3259000"
  },
  {
    "text": "about 32 or so already you get\nan improvement, for other reasons,\nnot just because the exponent",
    "start": "3259000",
    "end": "3265000"
  },
  {
    "text": "gets better, but there you go.\nSo, this is pretty good. This is completely impractical,\nso don't use whatever this",
    "start": "3265000",
    "end": "3273000"
  },
  {
    "text": "algorithm is.\nI don't have the reference handy, but it is just trying to\nget a theoretical improvement.",
    "start": "3273000",
    "end": "3280000"
  },
  {
    "text": "There may be others that are in\nbetween and more reasonable but that is not it.\nWow, lots of time.",
    "start": "3280000",
    "end": "3286000"
  },
  {
    "text": "Any questions?\nWe're not done yet, but any questions before we\nmove on for matrix",
    "start": "3286000",
    "end": "3292000"
  },
  {
    "text": "multiplication?\nOK. I have one more problem. ",
    "start": "3292000",
    "end": "3315000"
  },
  {
    "text": "Divide-and-conquer is a pretty\ngeneral idea. I mean, you can use it to\ndominate countries. You can use it to multiply\nmatrices.",
    "start": "3315000",
    "end": "3322000"
  },
  {
    "text": "I mean, who would have thought?\nHere is a very different kind of problem you can solve with\ndivide-and-conquer.",
    "start": "3322000",
    "end": "3330000"
  },
  {
    "text": "It is not exactly an\nalgorithmic problem, although it is computer\nscience. That is clear.\nThis is very large-scale",
    "start": "3330000",
    "end": "3337000"
  },
  {
    "text": "integration.\nThe chips, they are very large scale integrated.\nProbably even more these days,",
    "start": "3337000",
    "end": "3344000"
  },
  {
    "text": "but that is the catch phrase.\nHere is a problem, and it arises in VLSI layout.\nWe won't get into too many",
    "start": "3344000",
    "end": "3351000"
  },
  {
    "text": "details why, but you have some\ncircuit. And here I am going to assume\nthat the circuit is a binary",
    "start": "3351000",
    "end": "3358000"
  },
  {
    "text": "tree.\nThis is just part of a circuit. Assume for now here that it is\njust a complete binary tree.",
    "start": "3358000",
    "end": "3367000"
  },
  {
    "text": "A complete binary tree looks\nlike this. In all of my teachings,\nI have drawn this figure for",
    "start": "3367000",
    "end": "3375000"
  },
  {
    "text": "sure the most.\nIt is my favorite figure, the height four complete binary\ntree.",
    "start": "3375000",
    "end": "3381000"
  },
  {
    "text": "OK, there it is.\nI have some tree like that as some height.\nI want to imbed it into some",
    "start": "3381000",
    "end": "3390000"
  },
  {
    "text": "chip layout on a grid.\nLet's say it has n leaves.",
    "start": "3390000",
    "end": "3396000"
  },
  {
    "text": "I want to imbed it into a grid\nwith minimum area. This is a very cute problem and\nit really shows you another way",
    "start": "3396000",
    "end": "3407000"
  },
  {
    "text": "in which divide-and-conquer is a\nuseful and powerful tool.",
    "start": "3407000",
    "end": "3413000"
  },
  {
    "text": "So, I have this tree.\nI like to draw it in this way.",
    "start": "3413000",
    "end": "3420000"
  },
  {
    "text": "I want to somehow draw it on\nthe grid. What that means is the vertices\nhave to be imbedded onto dots on",
    "start": "3420000",
    "end": "3426000"
  },
  {
    "text": "the grid, and I am talking about\nthe square grid. It has to go to vertices of the\ngrid.",
    "start": "3426000",
    "end": "3432000"
  },
  {
    "text": "And these edges have to be\nrouted as sort of orthogonal paths between one dot and\nanother, so that should be an",
    "start": "3432000",
    "end": "3439000"
  },
  {
    "text": "edge and they shouldn't cross\nand all these good things because wires do not like to\ncross.",
    "start": "3439000",
    "end": "3445000"
  },
  {
    "text": "There is the obvious way to\nsolve this problem and there is the right way.",
    "start": "3445000",
    "end": "3451000"
  },
  {
    "text": " And let's talk about both of\nthem.",
    "start": "3451000",
    "end": "3457000"
  },
  {
    "text": "Neither of them is particularly\nobvious, but divide-and-conquer sort of gives you a hint in the\nright direction.",
    "start": "3457000",
    "end": "3464000"
  },
  {
    "text": "So, the naÔve imbedding.\nI seem to like the word naÔve here. ",
    "start": "3464000",
    "end": "3474000"
  },
  {
    "text": "I am going to draw this bottom\nup because it is easier, so leave three grid lines and\nthen start drawing.",
    "start": "3474000",
    "end": "3482000"
  },
  {
    "text": "I don't know how big that is\ngoing to be. Here is the bottom of our tree.\nThis is like the little three",
    "start": "3482000",
    "end": "3491000"
  },
  {
    "text": "nodes there.\nAnd then I leave a blank column and then a blank column.\nI don't actually need to leave",
    "start": "3491000",
    "end": "3501000"
  },
  {
    "text": "those blank columns,\nbut it makes a prettier drawing.\nAnd then we work our way up.",
    "start": "3501000",
    "end": "3510000"
  },
  {
    "start": "3510000",
    "end": "3517000"
  },
  {
    "text": "There is the tree,\nwhich should be aligned, on a grid.\nNo crossings. Everything is happy.\nHow much area does it take?",
    "start": "3517000",
    "end": "3525000"
  },
  {
    "text": "By area, I mean sort of the\narea of the bounding box. So, I count this blank space\neven though I am not using it",
    "start": "3525000",
    "end": "3534000"
  },
  {
    "text": "and I count all this blank space\neven though I am not using it.",
    "start": "3534000",
    "end": "3540000"
  },
  {
    "text": "I want to look at the height.\nLet's call this H(n). And to look at the width,\nwhich I will call W(n).",
    "start": "3540000",
    "end": "3548000"
  },
  {
    "text": "Now, it is probably pretty\nobvious that H(n) is like log n, W(n) is like n or whatever.\nBut I want to write it as a",
    "start": "3548000",
    "end": "3558000"
  },
  {
    "text": "recurrence because that will\ninspire us to do the right thing.\nH(n). Well, if you think of this as a\nrecursion-tree,",
    "start": "3558000",
    "end": "3567000"
  },
  {
    "text": "in some sense.\nWe start with the big tree. We split it into two halves,\ntwo subtrees of size n/2 indeed",
    "start": "3567000",
    "end": "3575000"
  },
  {
    "text": "because we are counting leaves.\nIt is exactly n/2 on each side. Then for height they are in\nparallel so it is no big deal.",
    "start": "3575000",
    "end": "3583000"
  },
  {
    "text": "The height is just the height\nof this thing, one of these subproblems plus\none. The width, you have to add\ntogether the two widths and also",
    "start": "3583000",
    "end": "3592000"
  },
  {
    "text": "add on 1.\nYou don't have to add on 1 here, but it doesn't matter.\nIt is certainly at most 1.",
    "start": "3592000",
    "end": "3600000"
  },
  {
    "text": "H(n) = H(n/2) + Theta(1),\nthere you do have to add 1,",
    "start": "3600000",
    "end": "3610598"
  },
  {
    "text": "and W(n) = 2W(n/2) + O(1).\nThe usual base cases.",
    "start": "3610598",
    "end": "3620178"
  },
  {
    "text": "I mean, these are recurrences\nwe should know and love.",
    "start": "3620178",
    "end": "3632000"
  },
  {
    "text": "This is log n,\nI sort of have already given away the answers,\nand this better be linear.",
    "start": "3632000",
    "end": "3640409"
  },
  {
    "text": "This is again Case 1.\nAnd to the log base 2 of 2 is n, which is the answer,\nmuch bigger than 1.",
    "start": "3640409",
    "end": "3649512"
  },
  {
    "text": "And here n to the log base 2 of\n1 is n to the zero, which is 1, which is the same\nso we get log n.",
    "start": "3649512",
    "end": "3660000"
  },
  {
    "text": "The area is n log n,\nbut if you are making chips you want the area as small as\npossible so you can fit more",
    "start": "3660000",
    "end": "3668331"
  },
  {
    "text": "good stuff in there.\nSo, we would like to aim for, well, we certainly cannot do a\nbetter area than n.",
    "start": "3668331",
    "end": "3676182"
  },
  {
    "text": "You've got to put the leaves\ndown somewhere, but this is already pretty\ngood.",
    "start": "3676182",
    "end": "3682109"
  },
  {
    "text": "It is only a log factor off,\nbut we want to aim for n. How could we get n?\nAny guesses on what needs to",
    "start": "3682110",
    "end": "3691053"
  },
  {
    "text": "change in this layout?\nNot how to do it because that is not obvious,\nbut in terms of height and",
    "start": "3691053",
    "end": "3697801"
  },
  {
    "text": "width what should we do?\nIt is pretty hard to get the height smaller than log n,\nI will tell you,",
    "start": "3697801",
    "end": "3704696"
  },
  {
    "text": "because this is a tree.\nIt cannot really get its width down to less than log n.\nWhat could we do to make the",
    "start": "3704696",
    "end": "3712398"
  },
  {
    "text": "product linear?\nJust random ideas. What are two functions whose\nproduct is n?",
    "start": "3712398",
    "end": "3719000"
  },
  {
    "start": "3719000",
    "end": "3727000"
  },
  {
    "text": "Square root of n and square\nroot of n. That is a good choice.\nWere there other suggestions?",
    "start": "3727000",
    "end": "3732298"
  },
  {
    "text": "n times constant.\nYeah, n times constant would be nice.\nBut I claim you cannot get either of these down to less\nthan a constant.",
    "start": "3732298",
    "end": "3739703"
  },
  {
    "text": "You could aim for n over log n\nby log n, that is more likely, but I think that is almost\nimpossible.",
    "start": "3739704",
    "end": "3745544"
  },
  {
    "text": "Root n by root n is the right\nanswer, so let's go with that. So, root n by root n.\nWe haven't seen any recurrences",
    "start": "3745544",
    "end": "3756050"
  },
  {
    "text": "whose solution is root n,\nbut surely they are out there.",
    "start": "3756050",
    "end": "3762450"
  },
  {
    "text": "Let's say the goal is to get\nW(n) = Theta(root n) and to get",
    "start": "3762450",
    "end": "3769316"
  },
  {
    "text": "H(n) = Theta(root n).\nIf we did that we would be",
    "start": "3769316",
    "end": "3774785"
  },
  {
    "text": "happy, because then the area is\nthe product is linear.",
    "start": "3774785",
    "end": "3782000"
  },
  {
    "text": "How?\nWhat is a recurrence that is in the usual master method form\nwhose solution is root n?",
    "start": "3782000",
    "end": "3791245"
  },
  {
    "text": "I mean, you could think of it\nthat way. Recurrence is a bit tricky,\nbut let's just think of",
    "start": "3791245",
    "end": "3800490"
  },
  {
    "text": "n^log_b(a).\nWhen is log base b of a Ω? Because then n^log_b(a) is root\nn.",
    "start": "3800490",
    "end": "3809000"
  },
  {
    "text": "And there is some hope that I\ncould get a root n solution to recurrence.\nThis is designed by knowing",
    "start": "3809000",
    "end": "3816770"
  },
  {
    "text": "that it is divide-and-conquer,\nand therefore it must be something like this.\nIt is easy once you know the",
    "start": "3816770",
    "end": "3824940"
  },
  {
    "text": "approach you are supposed to\ntake and you can try this approach.\nWhen is log base b of a Ω?",
    "start": "3824940",
    "end": "3831989"
  },
  {
    "text": "Lots of solutions,\nshout them out. 4 and 2, that is a good one.\nI better get this right.",
    "start": "3831989",
    "end": "3840000"
  },
  {
    "text": "Log base 4 of 2 is Ω because\nthe square root of 4 is 2.",
    "start": "3840000",
    "end": "3846410"
  },
  {
    "text": "So, let's aim for this.\nWhy not? When would we get log base 4 of\n2?",
    "start": "3846410",
    "end": "3854007"
  },
  {
    "text": "This is b, this is a,\nso it should be 2T(n/4) plus",
    "start": "3854007",
    "end": "3859823"
  },
  {
    "text": "something.\nAnd if I want the n^log_b(a) to dominate, it has got to be\npolynomially smaller than root",
    "start": "3859823",
    "end": "3871338"
  },
  {
    "text": "n.\nSo, this should be n^1/2-epsilon.\nBut it could be smaller.",
    "start": "3871338",
    "end": "3877319"
  },
  {
    "text": "It could be 1.\nZero would be nice, but that is probably too much\nto hope for.",
    "start": "3877320",
    "end": "3883029"
  },
  {
    "text": "So, something smaller,\nstrictly polynomially smaller than root n.\nThat is our goal.",
    "start": "3883029",
    "end": "3889203"
  },
  {
    "text": "And now comes the magic.\nIf you played with this for a while you would find it,\nI think, at this point.",
    "start": "3889203",
    "end": "3898000"
  },
  {
    "text": "When you know that you are\nsomehow solve this problem of size n with two subproblems of\nsize n/4 what could you do?",
    "start": "3898000",
    "end": "3907287"
  },
  {
    "text": "Well, if you start thinking of\nthings as squares, this is the natural thing that\nhappens.",
    "start": "3907287",
    "end": "3915000"
  },
  {
    "text": " This is called the H layout.\nYou can imagine why.",
    "start": "3915000",
    "end": "3930000"
  },
  {
    "text": "It would be much easier to draw\nif I had a grid board,",
    "start": "3930000",
    "end": "3935578"
  },
  {
    "text": "a graph board,\nwhatever, if that exists. ",
    "start": "3935578",
    "end": "3946000"
  },
  {
    "text": "This is a recursive layout.\nI am only going to draw a couple iterations,\nbut hopefully you can imagine",
    "start": "3946000",
    "end": "3951680"
  },
  {
    "text": "the generalization. ",
    "start": "3951680",
    "end": "3965000"
  },
  {
    "text": "I take four Hs,\na good plan because I want problems of size n/4.\nThis has n/4 leaves.",
    "start": "3965000",
    "end": "3972155"
  },
  {
    "text": "This has n/4 leaves.\nThis is the root, by the way, in the middle.\nThis has n/4 leaves.",
    "start": "3972156",
    "end": "3979400"
  },
  {
    "text": "This has n/4 leaves.\nSo, I have four problems of size n/4.\nSomehow I have got to get that",
    "start": "3979400",
    "end": "3986904"
  },
  {
    "text": "down to two.\nThankfully, if I look at width or if I look at height,\nthere are only two that matter.",
    "start": "3986904",
    "end": "3995920"
  },
  {
    "text": "And these two matter and these\ntwo get along for free. They are going in parallel,\njust like we had with height",
    "start": "3995920",
    "end": "4004817"
  },
  {
    "text": "over here.\nBut I get that both in height and in width.\nIf I measure,",
    "start": "4004818",
    "end": "4010173"
  },
  {
    "text": "well, now they are equal,\nso I will just call them the length.\nWe have L(n)-by-L(n).",
    "start": "4010173",
    "end": "4018000"
  },
  {
    "text": "And if I compute well,\nwhat is L(n)? I have here L(n/4) because\nthere are only a quarter of the",
    "start": "4018000",
    "end": "4026193"
  },
  {
    "text": "leaves in this one or in that\none, then I have a constant,",
    "start": "4026194",
    "end": "4031271"
  },
  {
    "text": "Theta(1), no big deal,\nand then I have L(n/4) again. So, I get the recurrence that I\nwanted.",
    "start": "4031271",
    "end": "4040000"
  },
  {
    "start": "4040000",
    "end": "4046000"
  },
  {
    "text": "L(n) = 2L(n/4) + Theta(1).\nAnd that has solution square",
    "start": "4046000",
    "end": "4055170"
  },
  {
    "text": "root of n, as we claimed before.\nAgain, we are in Case 1 of the master method.\nCool, ha?",
    "start": "4055170",
    "end": "4061759"
  },
  {
    "text": "This is a much more compact\nlayout. Charles, did you invent this\nlayout?",
    "start": "4061759",
    "end": "4067108"
  },
  {
    "text": "No.\nBut I know it appears on your PhD thesis and you extended it\nin various directions.",
    "start": "4067108",
    "end": "4073620"
  },
  {
    "text": "So, this is sort of a classic\ncool layout of trees into grids and another application of\ndivide-and-conquer.",
    "start": "4073620",
    "end": "4083000"
  },
  {
    "text": "I mean this is not particularly\nuseful for algorithms directly. It is useful for VLSI layout\ndirectly.",
    "start": "4083000",
    "end": "4090647"
  },
  {
    "text": "But it gives you more flavor of\nhow you should think. If you know what running time\nyou are aiming for,",
    "start": "4090647",
    "end": "4098371"
  },
  {
    "text": "like in problem sets in quizzes\noften we say here is the running time you have got to get,\nthink about the recurrence that",
    "start": "4098371",
    "end": "4107563"
  },
  {
    "text": "will get you there.\nAnd that could inspire you. And that is it.\nRecitation Friday.",
    "start": "4107563",
    "end": "4113665"
  },
  {
    "text": "Homework lab Sunday.\nNo class Monday. See you Wednesday.",
    "start": "4113665",
    "end": "4119000"
  }
]