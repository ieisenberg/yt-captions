[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6360"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6360",
    "end": "13320"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu.",
    "start": "13320",
    "end": "18450"
  },
  {
    "text": " ERIK DEMAINE: All right. Time for some more geometry,\nand, in particular,",
    "start": "18450",
    "end": "25349"
  },
  {
    "text": "some more fractional\ncascading, which is a cool topic we\nsaw last lecture.",
    "start": "25349",
    "end": "31150"
  },
  {
    "text": "And then we're going to do\na different kind of data structure called\nkinetic data structures, where you have moving data.",
    "start": "31150",
    "end": "37690"
  },
  {
    "text": "And that will actually\nbe most of the lecture. But last time, we saw this\nnice general black box transformation,\nfractional cascading,",
    "start": "37690",
    "end": "44410"
  },
  {
    "text": "and we didn't really see a\nlot of applications of it. We saw a simple example in\northogonal range searching.",
    "start": "44410",
    "end": "49680"
  },
  {
    "text": "But I want to show you\ntoday a much cooler one in the original\nfractional cascading papers.",
    "start": "49680",
    "end": "55210"
  },
  {
    "text": "So remember, in\ngeneral, what it lets you do is search for\na common element x, find its predecessor and\nsuccessor in k sorted lists,",
    "start": "55210",
    "end": "64180"
  },
  {
    "text": "in order log n plus\nk time, instead of the obvious k\ntimes log n, where",
    "start": "64180",
    "end": "69650"
  },
  {
    "text": "n is the length of each list. And the general version\nthat we talked about",
    "start": "69650",
    "end": "75790"
  },
  {
    "text": "is, if you're\nnavigating a graph, and at each node of the graph,\nyou have one of these lists, then you can instantly know\nwhere x fits in that list",
    "start": "75790",
    "end": "85299"
  },
  {
    "text": "in constant time per thing, as\nlong as you spend log n time to get started, provided your\ngraph has bounded degree.",
    "start": "85300",
    "end": "92140"
  },
  {
    "text": "That was necessary to do\nall the fractional cascading stuff of copying half\ninto the next level up.",
    "start": "92140",
    "end": "98950"
  },
  {
    "text": "So we're going to\nuse this result to get a lag factor improvement\nin our old friend orthogonal",
    "start": "98950",
    "end": "105310"
  },
  {
    "text": "range searching. So let's do orthogonal\nrange searching.",
    "start": "105310",
    "end": "113800"
  },
  {
    "text": "So last time, we\nsaw how to do two dimensional orthogonal range\nsearching in log n per query.",
    "start": "113800",
    "end": "120250"
  },
  {
    "text": "That was using fractional\ncascading, or, really, half of fractional\ncascading, which was just a cross-linking idea.",
    "start": "120250",
    "end": "126520"
  },
  {
    "text": " This time we're going to do\n3D orthogonal range searching",
    "start": "126520",
    "end": "133720"
  },
  {
    "text": "in log n time. Our space is going to go\nup by a couple log factors.",
    "start": "133720",
    "end": "140580"
  },
  {
    "text": "But this is pretty cool. In general, for d\ndimensions, this gives us log to the d minus\ntwo, whereas last class, we saw",
    "start": "140580",
    "end": "147099"
  },
  {
    "text": "how to do log the d minus 1. Now, this is static only. You could probably\ndo poly-log update.",
    "start": "147100",
    "end": "153573"
  },
  {
    "text": "But let's not worry\nabout updates. We're just trying to do static. So 3D orthogonal range search\nusing fractional cascading--",
    "start": "153574",
    "end": "163300"
  },
  {
    "text": "this is kind of a tour de force. There's a really\ncool result. It's in the \"Applications of\nFractional Cascading\"",
    "start": "163300",
    "end": "170349"
  },
  {
    "text": "paper by Chazelle and Guibas. And it proceeds in\nfour easy steps.",
    "start": "170350",
    "end": "175360"
  },
  {
    "text": "Each of the steps are easy,\nbut it's kind of amazing where we get to. We're going to start out with\na two dimensional restricted",
    "start": "175360",
    "end": "184300"
  },
  {
    "text": "orthogonal range query. We'll see why at the very end. But this is actually\nfrom another paper",
    "start": "184300",
    "end": "191140"
  },
  {
    "text": "of Chazelle in the same year. OK, in general,\nremember, in 3-D,",
    "start": "191140",
    "end": "199660"
  },
  {
    "text": "we're trying to do\nquerying with a rectangle--",
    "start": "199660",
    "end": "205270"
  },
  {
    "text": "a1, b1, a2, b2, a3, b3.",
    "start": "205270",
    "end": "212770"
  },
  {
    "text": "We want to know all the\npoints in that rectangle. So I'm going to start out with\na very restricted form, which is only two dimensional,\nfor whatever reason.",
    "start": "212770",
    "end": "219805"
  },
  {
    "text": "And we'll see why later. y-coordinate and\nz-coordinate, skipping x-- and the left end\npoint doesn't exist.",
    "start": "219805",
    "end": "226510"
  },
  {
    "text": "So you go all the way up to\nb2, and you go all the way up to b3. This is a quarter plane\nin two dimensions.",
    "start": "226510",
    "end": "233284"
  },
  {
    "text": "I want to know all\nthe points in there. It's the same as saying\nall the points that are dominated by this point.",
    "start": "233285",
    "end": "239860"
  },
  {
    "text": "Both y- and z-coordinates\nare dominated by that yz coordinate. This is b2, b3.",
    "start": "239860",
    "end": "248500"
  },
  {
    "text": "So we can solve this\nin log n time plus k.",
    "start": "248500",
    "end": "253524"
  },
  {
    "text": "But I want to be a little bit\nmore precise about what that log in is, and say that\nthis costs whatever it costs",
    "start": "253524",
    "end": "259630"
  },
  {
    "text": "to search for b3, the\nz-coordinate, in a z list--",
    "start": "259630",
    "end": "267080"
  },
  {
    "text": "in a list of\nz-coordinates of points-- plus order k.",
    "start": "267080",
    "end": "273195"
  },
  {
    "text": "I write it this\nway because if we have many searches among lists,\nthen we can speed things up.",
    "start": "273196",
    "end": "278380"
  },
  {
    "text": "So I don't want to just\nthink of it as log n. I want to think of it as one\nof these fractional cascading",
    "start": "278380",
    "end": "284350"
  },
  {
    "text": "operations. So this is the time bound I\nwant to get for finding the k",
    "start": "284350",
    "end": "289360"
  },
  {
    "text": "points in this search range.  Now, here's the fun part.",
    "start": "289360",
    "end": "296620"
  },
  {
    "text": "We're going to transform this\ninto a kind of stabbing ray problem, like we saw last class,\nand in the retroactive stuff,",
    "start": "296620",
    "end": "304630"
  },
  {
    "text": "and so on. ",
    "start": "304630",
    "end": "327400"
  },
  {
    "text": "So let's suppose I\nhave some points. ",
    "start": "327400",
    "end": "333640"
  },
  {
    "text": "I'm just going to draw\nan arbitrary arrangement. Hopefully, it's\nreasonably interesting.",
    "start": "333640",
    "end": "340140"
  },
  {
    "text": "Those are the points I\nwant to be able to query. And if I'm given, say,\na query like this one,",
    "start": "340140",
    "end": "349199"
  },
  {
    "text": "I want to know all\nthe points in here. So what I'm going to do is\ndraw a leftward horizontal ray",
    "start": "349200",
    "end": "357090"
  },
  {
    "text": "from the query point. And I'm going to draw--\nmaybe use a color--",
    "start": "357090",
    "end": "363150"
  },
  {
    "text": "upward vertical rays\nfrom each of the points. ",
    "start": "363150",
    "end": "373581"
  },
  {
    "text": "OK. And where there's\ncrossings, those correspond to points that are\nin the query quarter plane.",
    "start": "373581",
    "end": "382610"
  },
  {
    "text": "OK, so same problem-- but now, thinking about rays. So here's a cool thing you\ncan do with this approach.",
    "start": "382610",
    "end": "391460"
  },
  {
    "text": "So we want to preprocess these\nvertical rays so that, then, we can stab with a horizontal ray.",
    "start": "391460",
    "end": "398135"
  },
  {
    "text": "And it's actually\neasier to think of it as coming from the\nleft, because that's kind of a consistent\nx-coordinate,",
    "start": "398135",
    "end": "403479"
  },
  {
    "text": "and walking to the right. I'd like to find\nthis intersection, then find this one,\nthen find this one. Eventually, I get to the\ndesired y-coordinate.",
    "start": "403480",
    "end": "410650"
  },
  {
    "text": "This is the y direction,\nand this is z direction.",
    "start": "410650",
    "end": "416630"
  },
  {
    "text": "Then I stop. So if I could get started\nover here in log n time, and then do a walk in constant\ntime per intersection,",
    "start": "416630",
    "end": "424150"
  },
  {
    "text": "I'd be golden. That is possible. And the way that\nChazelle did this--",
    "start": "424150",
    "end": "433690"
  },
  {
    "text": "I'm going to erase\nthe query ray-- ",
    "start": "433690",
    "end": "439440"
  },
  {
    "text": "is to decompose the plane\nin a pretty simple way. We're going to draw a horizontal\nsegment from each point.",
    "start": "439440",
    "end": "447480"
  },
  {
    "text": "We're going to extend\nit to the right until it hits something,\nextend it to the left. In this case, it\ngoes off to infinity.",
    "start": "447480",
    "end": "452940"
  },
  {
    "text": "Here, I extend this guy. I extend this guy. I extend this guy.",
    "start": "452940",
    "end": "459629"
  },
  {
    "text": "I extend this guy. And extend this one out here. ",
    "start": "459630",
    "end": "468814"
  },
  {
    "text": "I'm going to add one\nmore point over here-- a little more exciting.",
    "start": "468815",
    "end": "474000"
  },
  {
    "text": " So this stops there. This goes to there.",
    "start": "474000",
    "end": "479370"
  },
  {
    "text": "AUDIENCE: One\nmore-- to the right. ERIK DEMAINE: One\nmore up here-- thanks. OK.",
    "start": "479370",
    "end": "485220"
  },
  {
    "text": "So this is kind of decomposition\ninto slabs or bricks or something.",
    "start": "485220",
    "end": "490330"
  },
  {
    "text": "It looks good. And so the idea is, over\nhere, there's, at most, n",
    "start": "490330",
    "end": "495510"
  },
  {
    "text": "different rays that make\nit all the way to the left. ",
    "start": "495510",
    "end": "501210"
  },
  {
    "text": "Do a search. That's your z search. So that's this search\nfor b3 in the z list.",
    "start": "501210",
    "end": "508139"
  },
  {
    "text": "So remember, our goal\nis to get to here. So we search for that\nz-coordinate over here. We say, OK, it falls here.",
    "start": "508140",
    "end": "514080"
  },
  {
    "text": "Then I enter this face. I'd like to then\nnavigate to this face, say, OK, that's where I am now.",
    "start": "514080",
    "end": "521070"
  },
  {
    "text": "By crossing this edge, I know\nthat this point is actually in my answer. And then I cross this edge,\nso I know that this point",
    "start": "521070",
    "end": "528330"
  },
  {
    "text": "is in my answer. Then I cross this ray,\nso I know that this point is in my answer.",
    "start": "528330",
    "end": "533529"
  },
  {
    "text": "Then I say, OK, I reached\nmy desired y-coordinate. Stop. So if I can do each of these\ntraversals in constant time,",
    "start": "533530",
    "end": "541650"
  },
  {
    "text": "I'd be all set. So I do one search at\nthe beginning, then constant time per query.",
    "start": "541650",
    "end": "546873"
  },
  {
    "text": "We know how to\nsolve this problem. We can do it with range trees\nand log n time preparation. But this is a particular\nway to solve it",
    "start": "546874",
    "end": "554264"
  },
  {
    "text": "that will work with\nfractional cascading when we do many of them. OK.",
    "start": "554264",
    "end": "559560"
  },
  {
    "text": "Cool. Can I do this in constant time? ",
    "start": "559560",
    "end": "567320"
  },
  {
    "text": "Maybe not, because it's\nthis sort of scenario. If I draw a whole bunch\nof points like this,",
    "start": "567320",
    "end": "574460"
  },
  {
    "text": "they'll each have a segment. And in general, this face\nwill have large degree.",
    "start": "574460",
    "end": "580300"
  },
  {
    "text": "And so I need to sort of\nfind my z-coordinate again,",
    "start": "580300",
    "end": "585649"
  },
  {
    "text": "somewhere in here. It turns out, with, essentially,\nfractional cascading again,",
    "start": "585650",
    "end": "590959"
  },
  {
    "text": "you can avoid that. If you have many segments\nhere, just extend half of them.",
    "start": "590960",
    "end": "598400"
  },
  {
    "text": "So maybe I'll extend this\none over and this one over.",
    "start": "598400",
    "end": "603422"
  },
  {
    "text": "It looks like\nfractional cascading. I'm taking half of\nthe elements here, inserting them into the\nprevious list, which",
    "start": "603422",
    "end": "609199"
  },
  {
    "text": "is the left side of the face. If this now has too many, well,\nhalf of them get promoted.",
    "start": "609200",
    "end": "614390"
  },
  {
    "text": "But it decreases exponentially. And so the total amount of\nextra edges I'm adding here",
    "start": "614390",
    "end": "619430"
  },
  {
    "text": "is only linear. So linear space--",
    "start": "619430",
    "end": "624790"
  },
  {
    "text": "I'm not going to prove\nthis formally here, but it's the same idea\nas fractional cascading. We just need it as\na tool to get to 3D.",
    "start": "624790",
    "end": "632690"
  },
  {
    "text": "You can extend these\nthings, and then every face will have bounded degree. And so you can just look at\nevery single rightward edge",
    "start": "632690",
    "end": "639027"
  },
  {
    "text": "in constant time,\nand figure out which one has your z-coordinate. Follow that edge. And so every time\nyou're crossing a ray",
    "start": "639027",
    "end": "646520"
  },
  {
    "text": "and getting an output, you\ncan pay only constant time to get it. Pretty cool.",
    "start": "646520",
    "end": "652700"
  },
  {
    "text": "That's the first step. Question. AUDIENCE: So when you say\nthat a particular face has too many crossings, what\ndo you define too many?",
    "start": "652700",
    "end": "660992"
  },
  {
    "text": "ERIK DEMAINE: More\nthan a constant. In general, you just look\nat the right side of a face,",
    "start": "660992",
    "end": "666900"
  },
  {
    "text": "and just take half\nof those things and propagate it to the left. Just do that right\nto left in one pass.",
    "start": "666900",
    "end": "672560"
  },
  {
    "text": "I think you might also need\nto do it left to right, if you want to have\nbounded leftward degree. But I'm not sure\nthat really matters.",
    "start": "672560",
    "end": "680510"
  },
  {
    "text": "I think you just do\none pass right to left, and half the guys\nkeep getting promoted.",
    "start": "680510",
    "end": "685672"
  },
  {
    "text": "And it's the same thing, where\nyou're promoting from the LI primes, not from the LI. So it's everybody who\ncame from the right plus",
    "start": "685672",
    "end": "691820"
  },
  {
    "text": "whatever you originally had. Half of them get\npromoted to the left, but because it's geometrically\ndecreasing, all is OK.",
    "start": "691820",
    "end": "697850"
  },
  {
    "text": "This is earlier than\nfractional cascading, but I would guess it's what\nmotivated them to then do",
    "start": "697850",
    "end": "704300"
  },
  {
    "text": "general fractional cascading. Other questions?",
    "start": "704300",
    "end": "711084"
  },
  {
    "text": "I know this is a\nlittle bit vague. But the more exciting stuff,\nto me, is the next three steps.",
    "start": "711084",
    "end": "717360"
  },
  {
    "text": "So let's move on to those. . ",
    "start": "717360",
    "end": "724310"
  },
  {
    "text": "So this is a tool for doing\ntwo dimensional quarter",
    "start": "724310",
    "end": "739830"
  },
  {
    "text": "plane searching. The next thing we're going to\ndo is make it three dimensional.",
    "start": "739830",
    "end": "745829"
  },
  {
    "text": "This is actually something\nwe already know how to do. And we're going to do it\nin exactly the same way we",
    "start": "745830",
    "end": "751200"
  },
  {
    "text": "knew how to before. Suppose you have a\nthree dimensional query,",
    "start": "751200",
    "end": "756750"
  },
  {
    "text": "and two of the intervals\nstart at minus infinity, but the new x-coordinate\nis a regular interval.",
    "start": "756750",
    "end": "763590"
  },
  {
    "text": "You can specify both endpoints. I want to do this in\nlog n searches plus k.",
    "start": "763590",
    "end": "777529"
  },
  {
    "text": "k is the size of the output. How do I do this using one?",
    "start": "777530",
    "end": "783162"
  },
  {
    "text": " Two words-- range tree.",
    "start": "783162",
    "end": "791500"
  },
  {
    "text": "Yep. Easy. Just do 1D range tree on x.",
    "start": "791500",
    "end": "799740"
  },
  {
    "text": "And then each node stores\nthat data structure--",
    "start": "799740",
    "end": "808560"
  },
  {
    "text": "one-- on points in the subtree. ",
    "start": "808560",
    "end": "819110"
  },
  {
    "text": "And so just like before,\nyou get log n subtrees",
    "start": "819110",
    "end": "825120"
  },
  {
    "text": "that represent your x interval. ",
    "start": "825120",
    "end": "832580"
  },
  {
    "text": "You look at the\nroot of each one, and it stores a\none data structure.",
    "start": "832580",
    "end": "837889"
  },
  {
    "text": "You query each of\nthem for b2 and b3 for that interval among\nthe y- and z-coordinates.",
    "start": "837890",
    "end": "846170"
  },
  {
    "text": "And each of them costs\na search plus order k. The k's sum up to order k.",
    "start": "846170",
    "end": "851660"
  },
  {
    "text": "So we end up doing\nlog n searches of that type plus k time.",
    "start": "851660",
    "end": "858100"
  },
  {
    "text": "And we can now solve\nthis kind of 3D query. This is really easy. This is what we did last class.",
    "start": "858100",
    "end": "863570"
  },
  {
    "text": "The cool thing, of course, is\nthat, by doing log n searches, it's always searching\nfor the same thing-- b3--",
    "start": "863570",
    "end": "870140"
  },
  {
    "text": "in various c lists. We know by fractional cascading\nthis is actually log n time. We're doing log n\nsearches in k lists--",
    "start": "870140",
    "end": "880329"
  },
  {
    "text": "and slightly different\nk here, sorry. ",
    "start": "880330",
    "end": "885730"
  },
  {
    "text": "It's actually log n lists. But we know from this\nbound, we're going to get order log n plus k.",
    "start": "885730",
    "end": "890961"
  },
  {
    "text": "But I don't want to do\nfractional cascading yet, because we're not done. This is a sort of three\ndimensional orthogonal range",
    "start": "890961",
    "end": "897771"
  },
  {
    "text": "query. But I want to put\na2 here and a3 here. We're going to do\nthat step by step.",
    "start": "897771",
    "end": "904030"
  },
  {
    "text": "First step is a2. We're going to do it in\nexactly the same way, twice. ",
    "start": "904030",
    "end": "927630"
  },
  {
    "text": "Again, I want to do it\nin log n searches plus k.",
    "start": "927630",
    "end": "934620"
  },
  {
    "text": "It's the same time bound\nI want to put into a2. The cost will be a\nlog n factor in space.",
    "start": "934620",
    "end": "941650"
  },
  {
    "text": "And it's a cool transformation. It's a general transformation. Whenever you have a data\nstructure has a minus infinity,",
    "start": "941650",
    "end": "949330"
  },
  {
    "text": "you can turn it into a\nlower bound, magically--",
    "start": "949330",
    "end": "955260"
  },
  {
    "text": "almost the same\nway as we did here, except we're not going to\nlose a log factor in time--",
    "start": "955260",
    "end": "960450"
  },
  {
    "text": "only in space. So I'm going to say it's\nkind of like a range",
    "start": "960450",
    "end": "968529"
  },
  {
    "text": "tree on the y-coordinate.\ny-coordinate is the one that\nwe want to extend.",
    "start": "968530",
    "end": "973690"
  },
  {
    "text": " And you may remember there was\nthis brief question last time.",
    "start": "973690",
    "end": "985140"
  },
  {
    "text": "In a 1D range tree, what\nkey does a node store? It just has to store\nsomething that's in between what's\nin the left subtree",
    "start": "985140",
    "end": "992070"
  },
  {
    "text": "and what's in the right subtree. So I proposed you could\nstore max of left subtree.",
    "start": "992070",
    "end": "999210"
  },
  {
    "text": " And that's enough\nto do a search. Then you know whether you\nshould go in the left subtree",
    "start": "999210",
    "end": "1005436"
  },
  {
    "text": "or the right subtree. Just compare with that key. So same as before-- we're\ngoing to store that key. Except now, I'm\nmaking it explicit,",
    "start": "1005436",
    "end": "1011660"
  },
  {
    "text": "because we really need\nto know what that key is. A node v will also\nstore two of these.",
    "start": "1011660",
    "end": "1023730"
  },
  {
    "text": "So it's going to store the two\ndata structure on the points",
    "start": "1023730",
    "end": "1029599"
  },
  {
    "text": "in the right subtree--  not the entire subtree,\njust the right subtree.",
    "start": "1029599",
    "end": "1036740"
  },
  {
    "text": "And it's going to store a\ny-inverted two structure",
    "start": "1036740",
    "end": "1045920"
  },
  {
    "text": "on points in the left subtree.",
    "start": "1045920",
    "end": "1052860"
  },
  {
    "text": "So this is the new part. And what does y-inverted mean?",
    "start": "1052860",
    "end": "1059480"
  },
  {
    "text": "It means that you can\nsearch for boxes like this.",
    "start": "1059480",
    "end": "1075130"
  },
  {
    "text": "So regularly, a two structure\nis sort of left-centered, and the left end\npoint is undefined,",
    "start": "1075130",
    "end": "1081510"
  },
  {
    "text": "and it goes up to b3. Now, I want something\nthat's right-centered. It goes up to infinity\non the right side.",
    "start": "1081510",
    "end": "1087240"
  },
  {
    "text": "But you can start\nat an arbitrary a2. How do I make such a\ndata structure do exactly the same thing, but with\nthis inverted, which means,",
    "start": "1087240",
    "end": "1093900"
  },
  {
    "text": "do exactly this, but\nwith this inverted? ",
    "start": "1093900",
    "end": "1100259"
  },
  {
    "text": "Easy to do-- just twice\nas many data structures. So you can think of that\nas one prime and two prime.",
    "start": "1100260",
    "end": "1105480"
  },
  {
    "text": "I'll call this two\nprime, explicitly. OK, now, the big question\nis, why is this enough?",
    "start": "1105480",
    "end": "1113260"
  },
  {
    "text": "So let's do that. ",
    "start": "1113260",
    "end": "1122010"
  },
  {
    "text": "How do I do a query in\ndata structure three? ",
    "start": "1122010",
    "end": "1129920"
  },
  {
    "text": "The basic idea is simple. We're going to\nwalk down the tree. Now, before we\nwalk down the tree,",
    "start": "1129920",
    "end": "1136500"
  },
  {
    "text": "and the interval is represented\nby log n different subtrees-- we can't afford that anymore. We can really only afford\na constant number of calls",
    "start": "1136500",
    "end": "1143670"
  },
  {
    "text": "to this data structure,\nif we're not going to get an extra log blowup. So I don't want to walk and\nthen fork and then visit",
    "start": "1143670",
    "end": "1150559"
  },
  {
    "text": "all these subtrees. I could do that. But it turns out,\nwith this structure, I can be a little\nbit more efficient.",
    "start": "1150559",
    "end": "1156990"
  },
  {
    "text": "Because, essentially, I want\nto do an interval like this. ",
    "start": "1156990",
    "end": "1165059"
  },
  {
    "text": "The queries I'm\nallowed is, I can do a query that's\ninfinite to the left, and I can do a query that's\ninfinite to the right.",
    "start": "1165060",
    "end": "1172447"
  },
  {
    "text": "So the intersection of\nthose would be what I want. I can't really\ncompute intersection. So it take too much\ntime to list those.",
    "start": "1172447",
    "end": "1179452"
  },
  {
    "text": "But if, somehow, I could\nget this left endpoint in another way, using\nthe tree, then I can do a leftward\ninfinity query.",
    "start": "1179452",
    "end": "1186065"
  },
  {
    "text": "So that's what\nwe're going to do.  And once I say\nwalk down the tree,",
    "start": "1186065",
    "end": "1192720"
  },
  {
    "text": "it's pretty clear\nwhat you have to do. When you visit a node, if the\nkey of the node is less than--",
    "start": "1192720",
    "end": "1204870"
  },
  {
    "text": "what are you searching\nfor-- a2, b2-- so a2 is less than b2.",
    "start": "1204870",
    "end": "1210870"
  },
  {
    "text": "And if the key of the\nnode is to the left, that means that the stuff we're\ninterested to is to the right.",
    "start": "1210870",
    "end": "1217809"
  },
  {
    "text": "So walk right. ",
    "start": "1217810",
    "end": "1223710"
  },
  {
    "text": "If the key of the node is\ngreater than the interval,",
    "start": "1223710",
    "end": "1231240"
  },
  {
    "text": "then walk left. That's sort of the easy case. And then the interesting\ncase is this fork.",
    "start": "1231240",
    "end": "1237960"
  },
  {
    "text": "Before, we had to do a\nlot of work at the fork. Now, I claim we only need to\ndo constant work at the fork.",
    "start": "1237960",
    "end": "1244500"
  },
  {
    "text": "So if the key falls\nbetween a2 and b2,",
    "start": "1244500",
    "end": "1249720"
  },
  {
    "text": "so our interval is stabbed\nby the key of the node, then I want to query\nthe two data structure--",
    "start": "1249720",
    "end": "1260430"
  },
  {
    "text": "two is the right number-- yeah-- and I want to query the\ntwo prime data structure.",
    "start": "1260430",
    "end": "1265450"
  },
  {
    "text": "So I'm going to do two\ncalls to data structure two. And so I only get a\nconstant factor blowup.",
    "start": "1265450",
    "end": "1271530"
  },
  {
    "text": "And what could I\npossibly search for? Well, two-- I'm able to do--",
    "start": "1271530",
    "end": "1280780"
  },
  {
    "text": "what is it-- a1, b1,\nminus infinity b2,",
    "start": "1280780",
    "end": "1289920"
  },
  {
    "text": "and minus infinity b3. We're not fixing the\nz-coordinate yet. And with two prime, I can do\nthe left endpoint bounded.",
    "start": "1289920",
    "end": "1298559"
  },
  {
    "text": " Once I've set things up,\nthis is, like, the only thing you could possibly do.",
    "start": "1298560",
    "end": "1304569"
  },
  {
    "text": "But I claim it's actually\nthe right answer. ",
    "start": "1304569",
    "end": "1312210"
  },
  {
    "text": "OK, what does this mean? Two prime is-- we're doing\nrightward infinity searches",
    "start": "1312210",
    "end": "1319350"
  },
  {
    "text": "in the left subtree. So here's v. Here is\nthe left subtree of v, and the right subtree of v.\nSo this is a bunch of points",
    "start": "1319350",
    "end": "1326400"
  },
  {
    "text": "down here, a bunch\nof points down here. We know that the interval\nlooks something like this.",
    "start": "1326400",
    "end": "1331780"
  },
  {
    "text": "It straddles this node. That's what this means.",
    "start": "1331780",
    "end": "1337840"
  },
  {
    "text": "And so what we'd really like\nis this stuff plus this stuff. That looks good. Because this goes to\ninfinity on the right.",
    "start": "1337840",
    "end": "1344580"
  },
  {
    "text": "That's the two prime search. And this goes to\ninfinity on the left. That's the two search. As long as you restrict\nto this subtree, which",
    "start": "1344580",
    "end": "1350700"
  },
  {
    "text": "is what we've always been\ndoing, and, in particular, here, too, it's\nonly on the points",
    "start": "1350700",
    "end": "1356159"
  },
  {
    "text": "that are in the right subtree. Two prime is only on the\npoints in the left subtree. And so that's it. We're golden.",
    "start": "1356160",
    "end": "1362220"
  },
  {
    "text": "Actually, we only need to do\na rightward infinity search, and a leftward infinity search.",
    "start": "1362220",
    "end": "1367860"
  },
  {
    "text": "So that is data structure three.",
    "start": "1367860",
    "end": "1373570"
  },
  {
    "text": "And it's really easy. Once you have the ability\nto do a 3D search-- ",
    "start": "1373570",
    "end": "1382500"
  },
  {
    "text": "even if this one was\nminus infinity b1-- if we just could do-- would you call that-- octants--",
    "start": "1382500",
    "end": "1388760"
  },
  {
    "text": "octant search in 3D,\nthen we could just sit there and apply\nthis transformation,",
    "start": "1388760",
    "end": "1394280"
  },
  {
    "text": "and turn each one of them into\ndouble-sided, with a log n penalty each time in space,\nbut no extra query time.",
    "start": "1394280",
    "end": "1402500"
  },
  {
    "text": "We do a single log n\ntraversal of this tree. So this part costs log n.",
    "start": "1402500",
    "end": "1409520"
  },
  {
    "text": " And then we reduce to\nthe previous problem--",
    "start": "1409520",
    "end": "1415935"
  },
  {
    "text": "it's constant number of calls. So I could have written\nminus infinity here. But I pay an extra\nlog factor in space.",
    "start": "1415935",
    "end": "1422270"
  },
  {
    "text": "So this one we get for\nfree, because we're using range trees. We do one transformation.",
    "start": "1422270",
    "end": "1428450"
  },
  {
    "text": "We get this one. And now we're basically\ndone, because we just do this again on the\nz-coordinate, and we",
    "start": "1428450",
    "end": "1435920"
  },
  {
    "text": "get a1, b1, a2, b2,\na3, b3, as desired.",
    "start": "1435920",
    "end": "1443860"
  },
  {
    "text": "For our queries, just\nditto on z, and using three",
    "start": "1443860",
    "end": "1459210"
  },
  {
    "text": "in place of two. So we want to add in this a3. We build a three data structure.",
    "start": "1459210",
    "end": "1465320"
  },
  {
    "text": "We build three prime\ndata structures in exactly the same way. Three primes are on the left. Threes are on the right.",
    "start": "1465320",
    "end": "1472520"
  },
  {
    "text": "Every node in this\nrange tree on z. And we do a log n\nsearch at the beginning.",
    "start": "1472520",
    "end": "1479302"
  },
  {
    "text": "Then we do a constant of calls\nto the data structure three. Data structure three\ndoes a log n search at the beginning--\nconstant number",
    "start": "1479302",
    "end": "1484646"
  },
  {
    "text": "of calls to data structure two. Data structure two does our\nusual range tree thing--",
    "start": "1484646",
    "end": "1489650"
  },
  {
    "text": "identifies log n different\ncalls to data structure one. Data structure one is\na search and a list,",
    "start": "1489650",
    "end": "1495350"
  },
  {
    "text": "plus every time I walk to the\nright and spend constant time, that is an element of my output.",
    "start": "1495350",
    "end": "1502190"
  },
  {
    "text": "How much time has\nthis taken total? Normally, there's log n\nof these, plus order of k.",
    "start": "1502190",
    "end": "1507700"
  },
  {
    "text": "Normally, that would be\nlog squared n plus k. But with fractional cascading-- we have to check this is valid\nwithin fractional cascading.",
    "start": "1507700",
    "end": "1514520"
  },
  {
    "text": "We've got a graph of\ndata structures here, but each node has\nonly constant degree. You can come from your parent.",
    "start": "1514520",
    "end": "1521191"
  },
  {
    "text": "You can go to your left child. You can go to your right child. And you can go to previous\ndimension data structure,",
    "start": "1521191",
    "end": "1528649"
  },
  {
    "text": "or the inverted version of it. So the degree five-- if you count in and out degree. ",
    "start": "1528650",
    "end": "1536030"
  },
  {
    "text": "And so fractional\ncascading applies. We're always searching\nfor the same thing--",
    "start": "1536030",
    "end": "1541400"
  },
  {
    "text": "not quite, actually-- a\nlittle bit of a cheat. Because of this\ninversion thing, we'll",
    "start": "1541400",
    "end": "1547370"
  },
  {
    "text": "sometimes be searching\nfor b3 in the z list, but we'll also sometimes be\nsearching for a3 in the z list.",
    "start": "1547370",
    "end": "1554180"
  },
  {
    "text": "But hey-- just a factor of two. So we have two fractional\ncascading data structures-- one for searching for b3,\none for searching for a3.",
    "start": "1554180",
    "end": "1562105"
  },
  {
    "text": "It's the inverted\nversions of one, and the uninverted\nversions of one-- z-inverted.",
    "start": "1562105",
    "end": "1568399"
  },
  {
    "text": "But that's fine. And in the end, we get log n to\ndo the first search, and then",
    "start": "1568400",
    "end": "1574670"
  },
  {
    "text": "plus the number of searches. Number of searches is\nlog n plus k, where",
    "start": "1574670",
    "end": "1579870"
  },
  {
    "text": "k is the size of the output. So total time is log n plus k.",
    "start": "1579870",
    "end": "1594000"
  },
  {
    "text": "This is pretty amazing. We can do 3D orthogonal range\nqueries, still in log n.",
    "start": "1594000",
    "end": "1601170"
  },
  {
    "text": "And if you go to higher\ndimensions, the best we know, basically, is to\nuse range trees. And so you get, in general, log\nto the d minus two n plus k.",
    "start": "1601170",
    "end": "1613559"
  },
  {
    "text": "So last class, we could do one. Now, we improved it by one more. ",
    "start": "1613560",
    "end": "1620430"
  },
  {
    "text": "Questions?  AUDIENCE: Yeah, I\nhave a quick question.",
    "start": "1620430",
    "end": "1627050"
  },
  {
    "text": "[INAUDIBLE] question.  So we do three, and\nthen we do four.",
    "start": "1627050",
    "end": "1638160"
  },
  {
    "text": "And it's not hard to imagine\nthat same [INAUDIBLE], when you might try to do the same\nargument for step three, step",
    "start": "1638160",
    "end": "1644434"
  },
  {
    "text": "four, step five. ERIK DEMAINE: Why can't we keep\ndoing this for all dimensions? So what three is,\nand also four, is",
    "start": "1644435",
    "end": "1651770"
  },
  {
    "text": "using the same\ntransformation, which is, if I have a minus\ninfinity something interval,",
    "start": "1651770",
    "end": "1657300"
  },
  {
    "text": "I can transform it into\nan a2, b2 interval. So I can make a one-sided\ninterval into two-sided.",
    "start": "1657300",
    "end": "1663110"
  },
  {
    "text": "The trouble is actually\ngetting the one-sided interval. So we started, in one\nand two, just getting up",
    "start": "1663110",
    "end": "1669800"
  },
  {
    "text": "to three dimensions. And that's where\nthings are hard. So fine, in two\ndimensions, we can do all sorts of fancy tricks.",
    "start": "1669800",
    "end": "1675628"
  },
  {
    "text": "We saw one way to\ndo it last time. This is a particularly\ncute way to do it that lets you\nfractionally cascade.",
    "start": "1675628",
    "end": "1681649"
  },
  {
    "text": "We could add a dimension. To add a dimension, we\njust use range trees. This is kind of pathetic. Every time we do this, we're\ngoing to pay a log n factor.",
    "start": "1681650",
    "end": "1689750"
  },
  {
    "text": "So we could afford to do\nit once and get to 3D. We paid a log n\nfactor here, but we",
    "start": "1689750",
    "end": "1695480"
  },
  {
    "text": "were lucky fractional\ncascading will remove one log factor, but only one. If we had to go to\nfour dimensions,",
    "start": "1695480",
    "end": "1700820"
  },
  {
    "text": "we'd have to use another\nlevel of range trees. And then we'd get a\nlog squared searches.",
    "start": "1700820",
    "end": "1706950"
  },
  {
    "text": "And then we have to pay\nunit cost for every search. So we'll get log squared\nfor four dimensions.",
    "start": "1706950",
    "end": "1712916"
  },
  {
    "text": "So it's just getting\nup to the right number of dimensions that's hard. What you're seeing here is\nthat one-sided intervals",
    "start": "1712916",
    "end": "1718490"
  },
  {
    "text": "are just the same as\ntwo-sided intervals, if you don't mind extra space. The space here is, I think,\nlog cubed n log cubed n.",
    "start": "1718490",
    "end": "1729830"
  },
  {
    "text": " Data structure one is linear\nspace, but every other level,",
    "start": "1729830",
    "end": "1736110"
  },
  {
    "text": "we lost a log factor. So one of those was to get up\na dimension by range trees. The other two were to convert\nthe one-sided intervals",
    "start": "1736110",
    "end": "1743450"
  },
  {
    "text": "into two-sided intervals. And that generalizes. You could do that as\nmany times as you want. The hard part is just getting\nthe right number of intervals",
    "start": "1743450",
    "end": "1751619"
  },
  {
    "text": "in the first place. And that's where we\npay log per dimension. So kind of annoying you can't do\nlog n for any dimension, but--",
    "start": "1751619",
    "end": "1758720"
  },
  {
    "text": "pretty sure that's impossible. ",
    "start": "1758720",
    "end": "1764216"
  },
  {
    "text": "There are models under\nwhich it's impossible, but we're not going\nto get into that. Yeah? AUDIENCE: So when our\nquery is log n plus k,",
    "start": "1764216",
    "end": "1771552"
  },
  {
    "text": "k is actually the\nnumber of points that are coming back, because--",
    "start": "1771552",
    "end": "1777398"
  },
  {
    "text": "ERIK DEMAINE: Yeah. Good question. Here, k has to be-- this is for what we\ncall range reporting,",
    "start": "1777399",
    "end": "1784940"
  },
  {
    "text": "where you really want to\nlist everybody in there.  And if we wanted to do range\ncounting queries, which just",
    "start": "1784940",
    "end": "1793520"
  },
  {
    "text": "give me the number of\nelements that match, I don't think this will work.",
    "start": "1793520",
    "end": "1799309"
  },
  {
    "text": "In particular, our seed\ndata structure up here had to pay for everything.",
    "start": "1799310",
    "end": "1804802"
  },
  {
    "text": "It doesn't know how\nmany times it's going to have to walk to the right. It's got to actually do it. So range counting-- not so much.",
    "start": "1804802",
    "end": "1811979"
  },
  {
    "text": "Our previous data\nstructures could do range counting, without the\nplus k, just paying log",
    "start": "1811979",
    "end": "1818680"
  },
  {
    "text": "to the d minus one. But this is just\nfor range reporting. Good question.",
    "start": "1818680",
    "end": "1824809"
  },
  {
    "text": "I don't think anyone knows how\nto do range counting faster. AUDIENCE: And the\nreason we're only hitting points we know about\nis because the one data",
    "start": "1824810",
    "end": "1832945"
  },
  {
    "text": "structure is on the bottom,\nso we never actually-- ERIK DEMAINE: Right. So you need to check, why\nis it only order k, where",
    "start": "1832945",
    "end": "1840429"
  },
  {
    "text": "k is the actual output size? Because by the time we get\ndown to the one data structural level, we're guaranteed\nthat x already matches.",
    "start": "1840430",
    "end": "1848110"
  },
  {
    "text": "It's already in our interval\na1, b1 by the range tree. And we're guaranteed that\nthese two open intervals--",
    "start": "1848110",
    "end": "1856720"
  },
  {
    "text": "the minus infinity\nactually is a2 here, and it actually is a3\nhere, or, actually,",
    "start": "1856720",
    "end": "1862879"
  },
  {
    "text": "something bigger than it. So we're guaranteed whatever\nthis thing outputs is a result. And we're never doing\noverlapping intervals.",
    "start": "1862879",
    "end": "1869240"
  },
  {
    "text": "So we never double charge. Yeah. You do need to check that. There's a lot of pointers to\nfollow here, but it works.",
    "start": "1869240",
    "end": "1878770"
  },
  {
    "text": "All right. You look convinced. Let's move on to\nkinetic data structures.",
    "start": "1878770",
    "end": "1884854"
  },
  {
    "start": "1884854",
    "end": "1913899"
  },
  {
    "text": "The idea with kinetic\ndata structures is, you have moving data. Deal with it.",
    "start": "1913899",
    "end": "1919460"
  },
  {
    "text": "So normally, we're\nthinking of data that-- at best, it's\ndynamic data, meaning we can delete something\nand then reinsert it.",
    "start": "1919460",
    "end": "1926360"
  },
  {
    "text": "But what if everything\nis constantly changing? So normally, OK, I've got some\npoints in my data structure.",
    "start": "1926360",
    "end": "1932120"
  },
  {
    "text": "But now, what if they\nalso have velocities? And maybe some guy's just\nsitting there stationary,",
    "start": "1932120",
    "end": "1939020"
  },
  {
    "text": "but some of them are\nmoving relative to it. And my operations-- this is\nkind of like time travel,",
    "start": "1939020",
    "end": "1944414"
  },
  {
    "text": "but now we're going\nto time travel into the future, which\nwe do all the time. But we'd like to do it\nreally quickly, and say, OK,",
    "start": "1944414",
    "end": "1954290"
  },
  {
    "text": "advanced time by five units. And now, in that frame, do\nan orthogonal range query",
    "start": "1954290",
    "end": "1961880"
  },
  {
    "text": "or something. Do some kind of query. We're always going to be\ndoing queries in the present.",
    "start": "1961880",
    "end": "1967700"
  },
  {
    "text": "So this is not\nfancy time travel. This is regular,\nforward time travel. We just want to quickly say,\njump forward 10 time units,",
    "start": "1967700",
    "end": "1976070"
  },
  {
    "text": "do some queries, jump forward\nsome other time units. There's actually another\noperation, which is, ah,",
    "start": "1976070",
    "end": "1981440"
  },
  {
    "text": "this point is no longer\nmoving in that direction. Now, it's moving\nin this direction. So the operations are,\nadvance to time t--",
    "start": "1981440",
    "end": "1998779"
  },
  {
    "text": "so this is like setting\nnow equal to t-- and change a point x to have\nsome new f of t trajectory.",
    "start": "1998780",
    "end": "2012574"
  },
  {
    "text": "AUDIENCE: I thought it was\nsupposed to be arbitrary. ERIK DEMAINE: Well, arbitrary\ntrajectory is not-- not quite.",
    "start": "2012574",
    "end": "2019799"
  },
  {
    "text": "I'm going to restrict what\nthose trajectories are. But that is the\nremaining question.",
    "start": "2019800",
    "end": "2024970"
  },
  {
    "text": "What kind of f of\nt's do we allow? ",
    "start": "2024970",
    "end": "2030420"
  },
  {
    "text": "I'm drawing the picture in\nd dimensions, let's say. And most of the work in\nkinetic structures in 2D--",
    "start": "2030420",
    "end": "2036540"
  },
  {
    "text": "a little bit in 3D-- but I'm going to focus\ntoday mostly on 1D. Because it's easy\nto analyze, clean.",
    "start": "2036540",
    "end": "2043110"
  },
  {
    "text": "There's a lot of\nopen questions in 2D. So we can also think of these--\nthere's points on a line.",
    "start": "2043110",
    "end": "2049739"
  },
  {
    "text": "They have velocities,\naccelerations, who knows what. That would be-- ",
    "start": "2049739",
    "end": "2058649"
  },
  {
    "text": "OK, let's say-- models\nof trajectories.",
    "start": "2058650",
    "end": "2064710"
  },
  {
    "start": "2064710",
    "end": "2071429"
  },
  {
    "text": "The simplest one that\nwould be affine-- f of t equals a plus bt.",
    "start": "2071429",
    "end": "2078706"
  },
  {
    "text": "a and b here would be\npoints. a and d dimensions are just values\nin one dimension.",
    "start": "2078706",
    "end": "2083864"
  },
  {
    "text": " So the motivation is, maybe,\nyou have cell phones or cars",
    "start": "2083864",
    "end": "2090030"
  },
  {
    "text": "or something. You have some current\nestimates on which way they're going and at what speed.",
    "start": "2090030",
    "end": "2095580"
  },
  {
    "text": "Then this would be\nthe simple model. And if either those\ntwo things change,",
    "start": "2095580",
    "end": "2100630"
  },
  {
    "text": "you have to do a\nchange operation. So you pay for that every time\nthey change their trajectory.",
    "start": "2100630",
    "end": "2105700"
  },
  {
    "text": "But otherwise, it's going\nto be super efficient, because advance is\ngoing to be super fast. That's the plan.",
    "start": "2105700",
    "end": "2112349"
  },
  {
    "text": "But maybe it's not just\nposition and speed. Maybe also have\nacceleration and stuff.",
    "start": "2112350",
    "end": "2120210"
  },
  {
    "text": " And then the extension\nof that would",
    "start": "2120210",
    "end": "2128049"
  },
  {
    "text": "be bounded degree\nalgebraic, which",
    "start": "2128050",
    "end": "2134640"
  },
  {
    "text": "is, you have some polynomial\nof bounded degree--",
    "start": "2134640",
    "end": "2144450"
  },
  {
    "text": "sorry, that should be c-- but bounded.",
    "start": "2144450",
    "end": "2149610"
  },
  {
    "text": "And the reason we\ncare about bounded is really the following. There's an even\nmore general model",
    "start": "2149610",
    "end": "2155250"
  },
  {
    "text": "which we call pseudo algebraic. ",
    "start": "2155250",
    "end": "2190760"
  },
  {
    "text": "So we would like to bound the\ncost of this advance operation. What we'd like is that when we\nadvance time a large amount,",
    "start": "2190760",
    "end": "2198500"
  },
  {
    "text": "stuff doesn't change\ncrazy number of times. And pseudo algebraic says\nthat if you look at anything",
    "start": "2198500",
    "end": "2205250"
  },
  {
    "text": "you care about-- we call this\na certificate of interest. We'll be talking a lot\nabout certificates today.",
    "start": "2205250",
    "end": "2210860"
  },
  {
    "text": "Certificate is\nsomething like, is this point left of that point. It's a Boolean question\nabout the moving points.",
    "start": "2210860",
    "end": "2216630"
  },
  {
    "text": "It's either true or false. And what I'd like is that-- I have some point.",
    "start": "2216630",
    "end": "2222369"
  },
  {
    "text": "It has some crazy trajectory. I have another point. It has some crazy trajectory.",
    "start": "2222370",
    "end": "2227569"
  },
  {
    "text": "I don't want, is this\npoint left of this point, to change an unbounded\nnumber of times. I'd like it to be constant,\nas long as no change",
    "start": "2227570",
    "end": "2235580"
  },
  {
    "text": "operations are called. So for a single\ntrajectory, I'd like these to flip a constant\nnumber of times.",
    "start": "2235580",
    "end": "2241070"
  },
  {
    "text": "Now, if you're algebraic\nwith bounded degree, then that will be the case. But more generally,\nas long as you sort of",
    "start": "2241070",
    "end": "2247940"
  },
  {
    "text": "switch between left and right\nbounded number of times, then that particular\ncertificate will only change",
    "start": "2247940",
    "end": "2253040"
  },
  {
    "text": "unbounded number of times. But in general, anything\nwhere all the certificates I care about change a\nconstant number of times",
    "start": "2253040",
    "end": "2259369"
  },
  {
    "text": "is just as good as algebraic. This is really why we like this. I think I've talked enough\nabout trajectory models.",
    "start": "2259370",
    "end": "2265190"
  },
  {
    "text": "So it's not totally generic. But it covers a lot of\nthings you might care about.",
    "start": "2265190",
    "end": "2270578"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]\ncertificate of interest? ERIK DEMAINE:\nCertificate of interest is just a Boolean function\non a constant number of data",
    "start": "2270578",
    "end": "2278970"
  },
  {
    "text": "points over time-- a constant\nnumber of trajectories, I should say.",
    "start": "2278970",
    "end": "2285045"
  },
  {
    "text": "I'll probably actually\ndefine certificate right now. AUDIENCE: Good. ",
    "start": "2285045",
    "end": "2291217"
  },
  {
    "text": "ERIK DEMAINE:\nCertificates-- I'm going to define them more\nas a tool that we use to build data structures,\nbut they're really",
    "start": "2291217",
    "end": "2296220"
  },
  {
    "text": "the same thing that I mean here. ",
    "start": "2296220",
    "end": "2306330"
  },
  {
    "text": "So pretty much all\nkinetic data structures",
    "start": "2306330",
    "end": "2311520"
  },
  {
    "text": "follow this unified approach. Kinetic data structures are\nactually a pretty new thing, introduced in 1999.",
    "start": "2311520",
    "end": "2317890"
  },
  {
    "text": "So as data structures\ngo, that's new. And over the last however\nmany years that is--",
    "start": "2317890",
    "end": "2323039"
  },
  {
    "text": "13-- there's been a bunch\nof kinetic data structures.",
    "start": "2323040",
    "end": "2329320"
  },
  {
    "text": "So what we're going to do\nis store the data structure",
    "start": "2329320",
    "end": "2335790"
  },
  {
    "text": "that is accurate now. So this will make queries\nabout the present really easy.",
    "start": "2335790",
    "end": "2342369"
  },
  {
    "text": "It just is . You look at the data\nstructure, you do a query. And so the hard part\nbecomes, how do I do advance?",
    "start": "2342370",
    "end": "2350310"
  },
  {
    "text": "How do I advance time and make\nthe new data structure, which is correct, about the new now?",
    "start": "2350310",
    "end": "2355480"
  },
  {
    "text": " The way we do that\nis with certificates.",
    "start": "2355480",
    "end": "2360770"
  },
  {
    "text": "So what I'm going to do is\nadditionally store, basically,",
    "start": "2360770",
    "end": "2368180"
  },
  {
    "text": "a proof that this data\nstructure is valid. We can say conditions\nwhich are currently true--",
    "start": "2368180",
    "end": "2378860"
  },
  {
    "text": "and as long as they remain\ntrue, the data structure remains valid. ",
    "start": "2378860",
    "end": "2387250"
  },
  {
    "text": "So these conditions\nare true now, and-- sorry-- under which\ndata structure",
    "start": "2387250",
    "end": "2394540"
  },
  {
    "text": "is accurate or correct. ",
    "start": "2394540",
    "end": "2400150"
  },
  {
    "text": "And those conditions\nare true now. OK, so for example--",
    "start": "2400150",
    "end": "2407810"
  },
  {
    "text": "well, we'll get to\nexamples in a moment. ",
    "start": "2407810",
    "end": "2414720"
  },
  {
    "text": "We'll just keep abstract\nfor a little bit longer. Each of these certificates, you\ncan figure out a failure time.",
    "start": "2414720",
    "end": "2423010"
  },
  {
    "start": "2423010",
    "end": "2439830"
  },
  {
    "text": "So you have some\ncertificate, like, this point is to the left of that point.",
    "start": "2439830",
    "end": "2445740"
  },
  {
    "text": "And you just look ahead in time. If you have some constant\ndefined trajectories,",
    "start": "2445740",
    "end": "2451300"
  },
  {
    "text": "you just see, when\nis the time when they will be aligned vertically? After that time, they're going\nto switch who is left of whom.",
    "start": "2451300",
    "end": "2458694"
  },
  {
    "text": "So just compute\nthat failure time. I'm going to assume-- that's another assumption\nabout the trajectory model-- that this takes constant\ntime for trajectory.",
    "start": "2458694",
    "end": "2466265"
  },
  {
    "text": " I do that for every certificate,\nand then put those failure",
    "start": "2466266",
    "end": "2477460"
  },
  {
    "text": "times into a priority queue. ",
    "start": "2477460",
    "end": "2483232"
  },
  {
    "text": "Do you want to\nask your question? AUDIENCE: So is it required\nthat a certificate needs to be--",
    "start": "2483232",
    "end": "2490352"
  },
  {
    "text": "like, that we've checked\nthat a certificate is true. It just needs to be\nbounded by order one, or--",
    "start": "2490352",
    "end": "2495909"
  },
  {
    "text": "ERIK DEMAINE: Yeah. So I'm assuming checking\na certificate takes constant time, whether\nit currently holds,",
    "start": "2495909",
    "end": "2502819"
  },
  {
    "text": "and computing the failure\ntime takes constant time. Yeah. I mean, you could assume it,\nor maybe you pay a little more.",
    "start": "2502820",
    "end": "2510011"
  },
  {
    "text": "I mean, this is how we're going\nto build the data structure. So whatever it\ncosts, it will cost. But I think everything\nwe'll talk about",
    "start": "2510011",
    "end": "2516350"
  },
  {
    "text": "and pretty much every\ncertificate out there is sort of a\nconstant size thing. Some of them are bigger.",
    "start": "2516350",
    "end": "2521810"
  },
  {
    "text": "But we'll get to\nthe costs involved. Maybe we won't worry\nabout time too much.",
    "start": "2521810",
    "end": "2527771"
  },
  {
    "text": "So priority queue is going\nto take log n time, where n is the number of certificates\nin the data structure, to find,",
    "start": "2527771",
    "end": "2533960"
  },
  {
    "text": "when is the next failure? So if I want to do an\nadvance, basically, I'm going to do discrete\nevent simulation.",
    "start": "2533960",
    "end": "2539450"
  },
  {
    "text": "I find the next event\nwhen something changes, i.e. a certificate fails. I'm going to fix that event--",
    "start": "2539450",
    "end": "2545560"
  },
  {
    "text": "fix that certificate-- make the\ndata structure correct again. Then advance to\nthe next failure.",
    "start": "2545560",
    "end": "2551240"
  },
  {
    "text": "Repeat. As long as there aren't too\nmany certificates to mess me up, this advance will be fast.",
    "start": "2551240",
    "end": "2557150"
  },
  {
    "text": " So yeah.",
    "start": "2557150",
    "end": "2563155"
  },
  {
    "start": "2563155",
    "end": "2582010"
  },
  {
    "text": "So here's how we're going\nto implement advance. Basically in all\nkinetic data structures,",
    "start": "2582010",
    "end": "2587770"
  },
  {
    "text": "we just say, while\nt is greater than",
    "start": "2587770",
    "end": "2593020"
  },
  {
    "text": "or equal to the next failure\nof the priority queue,",
    "start": "2593020",
    "end": "2599020"
  },
  {
    "text": "we advance to that\nmoment in time, when something\ninteresting happens. ",
    "start": "2599020",
    "end": "2605560"
  },
  {
    "text": "We do an event.  I'll write it this way.",
    "start": "2605560",
    "end": "2611385"
  },
  {
    "start": "2611385",
    "end": "2619960"
  },
  {
    "text": "And then we set now to t. ",
    "start": "2619960",
    "end": "2628550"
  },
  {
    "text": "And this event thing has to\nsomehow fix the data structure and fix the certificates.",
    "start": "2628550",
    "end": "2636511"
  },
  {
    "text": " So that is the challenge, is,\nhow do you deal with an event",
    "start": "2636511",
    "end": "2642380"
  },
  {
    "text": "when one of your\ncertificates breaks? So if you have a data structure,\nand you want to make it, kinetic you just first\nwrite down some certificates",
    "start": "2642380",
    "end": "2650210"
  },
  {
    "text": "under which it's\nguaranteed to be valid, and then see how to fix\nthem as things happen.",
    "start": "2650210",
    "end": "2656760"
  },
  {
    "text": "Then there's the analysis\nissue, which we will get to. Let's start with an example\nbefore we get to analyzing,",
    "start": "2656760",
    "end": "2662460"
  },
  {
    "text": "so this becomes a\nlittle more concrete. ",
    "start": "2662460",
    "end": "2672602"
  },
  {
    "text": "AUDIENCE: I have\nanother question. ERIK DEMAINE: Yeah. AUDIENCE: So are the change\noperations sort of online,",
    "start": "2672602",
    "end": "2679030"
  },
  {
    "text": "or do you have the\nsequence of changes that you're going to [INAUDIBLE] ERIK DEMAINE: All of these\noperations are online.",
    "start": "2679030",
    "end": "2684151"
  },
  {
    "text": "So at any moment, someone says\nadvance, someone says change, or someone says query. And query is respect to now.",
    "start": "2684151",
    "end": "2693950"
  },
  {
    "text": "So we have no idea which\nof these are coming, in what order, whatever. I don't think anyone's\nstudied the case where",
    "start": "2693950",
    "end": "2700703"
  },
  {
    "text": "you know up front all the\nthings that are going to happen. Though there are, presumably,\napplications for that. I mean, time can just be a\neuphemism for a dimension,",
    "start": "2700704",
    "end": "2708089"
  },
  {
    "text": "or whatever. But a lot of the\nkinetic people really want to be tracking points and\nmaintaining what's happening.",
    "start": "2708090",
    "end": "2717300"
  },
  {
    "text": "So let's do a 1D problem-- a simple one-- sort of\nthe most basic problem,",
    "start": "2717300",
    "end": "2724369"
  },
  {
    "text": "which is a predecessor problem. Insert, delete. We won't worry too much\nabout insert and delete here.",
    "start": "2724370",
    "end": "2730829"
  },
  {
    "text": "It's hard enough, because the\npoints are moving around-- and predecessor and successor.",
    "start": "2730830",
    "end": "2736020"
  },
  {
    "text": "So I want to know, on the\nline, I have some points. They're moving. Now, query is, at the current\ntime, who's to the left",
    "start": "2736020",
    "end": "2745380"
  },
  {
    "text": "and who's to the\nright of this query? OK. ",
    "start": "2745380",
    "end": "2751360"
  },
  {
    "text": "How do we maintain this? This is a problem we'll be\nstudying a lot in this class.",
    "start": "2751360",
    "end": "2757030"
  },
  {
    "text": "But the basic structure for\nsolving predecessor, insert, delete, predecessor, is--",
    "start": "2757030",
    "end": "2763591"
  },
  {
    "text": "AUDIENCE: Binary search tree. ERIK DEMAINE:\nBinary search tree-- balanced binary search tree.",
    "start": "2763592",
    "end": "2769839"
  },
  {
    "text": "OK, so let's use a log n\nhigh AVL trees-- whatever.",
    "start": "2769840",
    "end": "2774970"
  },
  {
    "text": "So what do we need\nfor certificates? I was going to use\nthis as an example, but it's actually\na little tricky",
    "start": "2774970",
    "end": "2781055"
  },
  {
    "text": "to think about what\nthe certificates are. Because the binary\nsearch tree property is x plus or equal to x\ngreater or equal to x.",
    "start": "2781055",
    "end": "2792254"
  },
  {
    "text": "That's kind of a\nlot of certificates. If I want to compare x to\nevery single guy in here and compare x to every single\nguy in here, that would be a,",
    "start": "2792254",
    "end": "2799440"
  },
  {
    "text": "I think, quadratic number\nof certificates, in general. Almost everyone has a relation.",
    "start": "2799440",
    "end": "2804550"
  },
  {
    "text": "I'd prefer to get away\nwith fewer certificates. Because then, less\ncertificates will fail.",
    "start": "2804550",
    "end": "2811400"
  },
  {
    "text": "So cute idea-- I really only need to compare x\nwith this one and this one. --",
    "start": "2811400",
    "end": "2819960"
  },
  {
    "text": "the max in the subtree and\nthe min in the subtree. In general, if I look at\nthe data in sorted order,",
    "start": "2819960",
    "end": "2826900"
  },
  {
    "text": "it has to stay\nsorted order, where",
    "start": "2826900",
    "end": "2835770"
  },
  {
    "text": "it's not going to be sorted. But this is an\ninorder traversal. ",
    "start": "2835770",
    "end": "2842810"
  },
  {
    "text": "Inorder traversal\nis something we can understand without\nknowing what the data is.",
    "start": "2842810",
    "end": "2847874"
  },
  {
    "text": "Because remember, data\nis constantly changing. We can't really\nuse the keys here. But we can use the\nabstract shape of the tree",
    "start": "2847874",
    "end": "2853770"
  },
  {
    "text": "and do an inorder\ntraversal, and say, look, as long as x i is less than\nor equal to x i plus one",
    "start": "2853770",
    "end": "2859890"
  },
  {
    "text": "in the inorder\ntraversal for all i, then this is a valid\nbinary search tree. If an inorder traversal\nstays sorted, we're golden.",
    "start": "2859890",
    "end": "2867637"
  },
  {
    "text": "So those are my certificates. There's only n of them. So that's nice. ",
    "start": "2867637",
    "end": "2875910"
  },
  {
    "text": "And we need to check that we\ncan compute a failure time. This is usually really easy. But we'll go through the\nexercise of writing it down.",
    "start": "2875910",
    "end": "2891790"
  },
  {
    "text": " So I want to know, among\nall times greater than",
    "start": "2891790",
    "end": "2899410"
  },
  {
    "text": "or equal to now, when will x i-- am I doing strict here?",
    "start": "2899410",
    "end": "2904695"
  },
  {
    "text": "This should probably\nbe greater than. Yeah, so that's why\nI have an infimum.",
    "start": "2904695",
    "end": "2911760"
  },
  {
    "text": "OK, I take the earliest\nmoment when x i of t is greater than x i\nof plus one, which",
    "start": "2911760",
    "end": "2917770"
  },
  {
    "text": "is the opposite of\nwhat I want, and take the infimum of those times. And so that will be the\nmoment of transition",
    "start": "2917770",
    "end": "2924789"
  },
  {
    "text": "when they're equal. And then-- boom-- it's\ngoing to jump over. I'm assuming these\nthings are continuous.",
    "start": "2924790",
    "end": "2929911"
  },
  {
    "text": "AUDIENCE: That's why\nyou take the infimum? ERIK DEMAINE: Yeah. So it would be an infimum,\nbecause these guys",
    "start": "2929911",
    "end": "2935619"
  },
  {
    "text": "are going to cross. I mean, I don't care about\nthis kind of happening. But if it's going to\nactually go across,",
    "start": "2935620",
    "end": "2942040"
  },
  {
    "text": "then there'll be the moment of\ntransition where they're equal. And that's going\nto be this infimum.",
    "start": "2942040",
    "end": "2947810"
  },
  {
    "text": "OK. How do you compute that? Well, it depends what these\ntrajectory functions are like. If it's algebraic, then this\nis just a polynomial thing.",
    "start": "2947810",
    "end": "2956080"
  },
  {
    "text": "You can do it in bounded degree. You can do it in constant time. That's our model.",
    "start": "2956080",
    "end": "2961869"
  },
  {
    "text": "OK, so you put them\ninto a priority queue. Do this advance. And now, the question is,\nhow do you process an event?",
    "start": "2961870",
    "end": "2969130"
  },
  {
    "text": "When one of these\nthings happens, you're about to\ntransition to x i being bigger than x i plus one.",
    "start": "2969130",
    "end": "2974830"
  },
  {
    "text": "What do you do? ",
    "start": "2974830",
    "end": "2980570"
  },
  {
    "text": "So that's the real heart\nof the data structure. ",
    "start": "2980570",
    "end": "2989800"
  },
  {
    "text": "Although, really, the heart\nof a kinetic data structure is the choice of certificates.",
    "start": "2989800",
    "end": "2995080"
  },
  {
    "text": "If you choose certificates\nwell, then you're going to be efficient.",
    "start": "2995080",
    "end": "3000390"
  },
  {
    "text": "We haven't defined\nefficient yet. We will. Otherwise, you're not\ngoing to be so fast.",
    "start": "3000390",
    "end": "3006708"
  },
  {
    "text": "So it's all about using\ncertificates right. The rest is kind\nof straightforward.",
    "start": "3006708",
    "end": "3013825"
  },
  {
    "text": " So let's suppose that this\ncertificate is about to fail.",
    "start": "3013825",
    "end": "3020600"
  },
  {
    "text": "And we're guaranteed by this\nalgorithm that it fails now. We have advanced to the time\nwhen it is about to fail.",
    "start": "3020600",
    "end": "3028180"
  },
  {
    "text": "We process that event. So now is the time when\nthese two things are equal. Right after now, we will\nget to greater than.",
    "start": "3028180",
    "end": "3036990"
  },
  {
    "text": "So here's what I do. ",
    "start": "3036990",
    "end": "3042710"
  },
  {
    "text": "Swap them in the\nbinary search tree.",
    "start": "3042710",
    "end": "3049000"
  },
  {
    "text": "So right now, maybe\njust in general, it's going to look\nsomething like this.",
    "start": "3049000",
    "end": "3054490"
  },
  {
    "text": "We have x i, x i plus one. Or it could be the reverse\nscenario, where x i plus one",
    "start": "3054490",
    "end": "3060310"
  },
  {
    "text": "is a leaf, and x i\nis the predecessor. Right now, they're\nequal in value.",
    "start": "3060310",
    "end": "3066010"
  },
  {
    "text": "So I'm just going to interchange\nthem, move x i up here.",
    "start": "3066010",
    "end": "3072070"
  },
  {
    "text": "So it's a little confusing. But this is x i plus\none, and this is x i.",
    "start": "3072070",
    "end": "3077560"
  },
  {
    "text": "Replace those. These are really pointers\nto the trajectories, however they're described.",
    "start": "3077560",
    "end": "3084070"
  },
  {
    "text": "Interchange them. It's still valid as\na binary search tree. Actually, this\nbinary search tree never becomes invalid, because\nat this moment, they're equal.",
    "start": "3084070",
    "end": "3090550"
  },
  {
    "text": "And after now,\nthings will continue to be OK, because this guy\nwill be bigger than this one.",
    "start": "3090550",
    "end": "3096080"
  },
  {
    "text": "That's the assumption. We just need to fix\nthe certificates. Fixing the data structure was\npretty trivial-- constant time.",
    "start": "3096080",
    "end": "3104000"
  },
  {
    "text": "So what certificates\ndo we need to do? We need to add this\nnew certificate.",
    "start": "3104000",
    "end": "3109359"
  },
  {
    "text": "I'm going to call it\nx i prime is less than or equal to x i plus one prime. So this is actually\nx i plus one,",
    "start": "3109360",
    "end": "3117190"
  },
  {
    "text": "formerly known as x i plus\none, formerly known as x i. But it'd be really confusing.",
    "start": "3117190",
    "end": "3122860"
  },
  {
    "text": "So I'm going to use the primes\nto be the new data structure. Because this is always the\nkind of certificate we want.",
    "start": "3122860",
    "end": "3128840"
  },
  {
    "text": "We also need to\nupdate certificates.",
    "start": "3128840",
    "end": "3134740"
  },
  {
    "text": "So there used to be an x i minus\none less than or equal to x i. We want to turn that into\nx i minus one less than",
    "start": "3134740",
    "end": "3142440"
  },
  {
    "text": "or equal to x i prime. And we used to have an x i less\nthan or equal to x i plus one.",
    "start": "3142440",
    "end": "3149230"
  },
  {
    "text": "We want to turn that\ninto x i prime less than or equal-- oh, that\none, we already did.",
    "start": "3149230",
    "end": "3154441"
  },
  {
    "text": "Sorry. So I want x i plus\none to x i plus two.",
    "start": "3154441",
    "end": "3159550"
  },
  {
    "text": "And I want to do, now, x i\nplus one prime to x i plus two.",
    "start": "3159550",
    "end": "3165000"
  },
  {
    "text": "OK, basically, wherever\nthe primes happen, which is x i and x i plus one-- whatever certificates\nthey're involved in,",
    "start": "3165000",
    "end": "3170230"
  },
  {
    "text": "you have to update them-- meaning, rip out the old\none, put in the new one. And the main issue\nhere is that you have",
    "start": "3170230",
    "end": "3176950"
  },
  {
    "text": "to maintain the priority queue. So you've got to take them\nout of the priority queue, recompute their failure times,\nput them back in the priority",
    "start": "3176950",
    "end": "3184960"
  },
  {
    "text": "queue with that failure time. But the point is, this is a\nconstant number of updates.",
    "start": "3184960",
    "end": "3192010"
  },
  {
    "text": "In general, pretty much, as long\nas the things you're messing with-- the items\nyou're changing--",
    "start": "3192010",
    "end": "3197980"
  },
  {
    "text": "are involved in a small\nnumber of certificates each, then this will be cheap.",
    "start": "3197980",
    "end": "3203413"
  },
  {
    "text": "I'm writing this explicitly. But in general, it's just,\nupdate whatever certificates those points were involved in. The issue is how many\nthings you change,",
    "start": "3203414",
    "end": "3210400"
  },
  {
    "text": "and how many certificates\neach of those things is in. In this case, changing\na constant number of things-- each of them\nis in a constant number",
    "start": "3210400",
    "end": "3217319"
  },
  {
    "text": "of certificates. So it's not constant time,\nbut a constant number of calls to priority queue\nupdates-- so log n time.",
    "start": "3217319",
    "end": "3225655"
  },
  {
    "text": "AUDIENCE: Question. ERIK DEMAINE: Yeah, question. AUDIENCE: So but how do you\nfind the things that you just",
    "start": "3225655",
    "end": "3230830"
  },
  {
    "text": "changed in the priority\nqueue of the failure times. ERIK DEMAINE: How do you find\nthem in the priority queue?",
    "start": "3230830",
    "end": "3236440"
  },
  {
    "text": "How do you find these x\ni's and x i plus ones?  Every point knows\nwhat certificates",
    "start": "3236440",
    "end": "3242730"
  },
  {
    "text": "it's in, meaning it\nhas a point or two-- a list of certificates it's in. There's only two of them. And each certificate\nhas a pointer",
    "start": "3242730",
    "end": "3247820"
  },
  {
    "text": "into its existence in\nthe priority queue. So then you know where it\nis in the priority queue and you can rip it out.",
    "start": "3247820",
    "end": "3253548"
  },
  {
    "text": "Yeah. Lots of pointers\nand cross-linking. Yeah?",
    "start": "3253548",
    "end": "3259619"
  },
  {
    "text": "AUDIENCE: So in something\nthat's pseudo algebraic,",
    "start": "3259620",
    "end": "3264755"
  },
  {
    "text": "any certificate of interest\nchanges o of one times. But here, there's o of n\nsquared-- even though we're",
    "start": "3264755",
    "end": "3272505"
  },
  {
    "text": "only taking n\ncertificates at a time, there's o of n squared possible\ncertificates in each of them. ERIK DEMAINE: You're\nasking about efficiency,",
    "start": "3272505",
    "end": "3279320"
  },
  {
    "text": "which we'll go to now. This looks disconcerting,\nbecause even though pseudo",
    "start": "3279320",
    "end": "3287180"
  },
  {
    "text": "algebraic gives us that each\ncertificate won't change too many times, there\nare quadratic number",
    "start": "3287180",
    "end": "3292520"
  },
  {
    "text": "of potential certificates. They could all become relevant. And indeed, that is the case,\nif you have these points, spaced",
    "start": "3292520",
    "end": "3305900"
  },
  {
    "text": "out a lot, and then\nyou have these points, spaced out a little-- four and four.",
    "start": "3305900",
    "end": "3312110"
  },
  {
    "text": "And these guys are all moving\nconstant velocity this way. And the white guys\nare stationary.",
    "start": "3312110",
    "end": "3320240"
  },
  {
    "text": "Then what happens? Well, there's event, event,\nevent, event, event, event,",
    "start": "3320240",
    "end": "3325959"
  },
  {
    "text": "event, event, event, event,\nevent, event, event, event, event, event, event,\nevent, event, event, event.",
    "start": "3325959",
    "end": "3331160"
  },
  {
    "text": "You're going to get\nn squared events. You get, like, n over two each\ntime you cross a white point.",
    "start": "3331160",
    "end": "3341040"
  },
  {
    "text": "I call this OK. Why? Because of efficiency.",
    "start": "3341040",
    "end": "3347044"
  },
  {
    "text": " The claim is, this is sort of\nthe best you could hope to do.",
    "start": "3347044",
    "end": "3352440"
  },
  {
    "text": "So in that sense, it's as\ngood as you can hope to do. If you want to\nmaintain predecessors--",
    "start": "3352440",
    "end": "3360050"
  },
  {
    "text": "let's put it this way. If we need to know-- ",
    "start": "3360050",
    "end": "3365950"
  },
  {
    "text": "\"know\" is a sort\nof vague thing-- the sorted order of the points,\nthen you need an event--",
    "start": "3365950",
    "end": "3384200"
  },
  {
    "text": "if we're going to keep a\ndata structure that is always accurate now-- so this is\nsort of an assumption--",
    "start": "3384200",
    "end": "3390530"
  },
  {
    "text": "then you need an event every\ntime you have an order change.",
    "start": "3390530",
    "end": "3398336"
  },
  {
    "text": "That's sort of a tautology. But it's a perspective.",
    "start": "3398336",
    "end": "3404150"
  },
  {
    "text": "And what's happening\nhere is that we have an event every time\nthere's an order change. So sometimes, yeah,\nit's going to be bad.",
    "start": "3404150",
    "end": "3411550"
  },
  {
    "text": "Worst case here is quadratic. You can actually prove\nfor pseudo algebraic,",
    "start": "3411550",
    "end": "3418070"
  },
  {
    "text": "it is order n squared events. So this was really\na lower bound. ",
    "start": "3418070",
    "end": "3424950"
  },
  {
    "text": "But it is also order n\nsquared all the time, because, if you look\nat any pair of guys,",
    "start": "3424950",
    "end": "3430679"
  },
  {
    "text": "they're only going to change a\nconstant number of times who's above whom, for\npseudo algebraic,",
    "start": "3430679",
    "end": "3435740"
  },
  {
    "text": "if there are no change events. So for efficiency,\nbecause it's really hard",
    "start": "3435740",
    "end": "3440870"
  },
  {
    "text": "to analyze if points are\nchanging their trajectories all the time, assume\nthere's no changes.",
    "start": "3440870",
    "end": "3446150"
  },
  {
    "text": "We basically just\nadvance to infinity. How much could\nthat possibly cost? That's how kinetic people\nlike to analyze things.",
    "start": "3446150",
    "end": "3453060"
  },
  {
    "text": "And for this problem, for\nmaintaining sorted order at all times, the worst case\nanswer is theta n squared.",
    "start": "3453060",
    "end": "3458900"
  },
  {
    "text": "This data structure\nachieves theta n squared, so we consider it worst case\noptimal, in this weird sense.",
    "start": "3458900",
    "end": "3465000"
  },
  {
    "text": "OK, this is if you really want\nto maintain the sorted order. Now, we didn't say we wanted\nto maintain the sorted order.",
    "start": "3465000",
    "end": "3470240"
  },
  {
    "text": "We said we want to maintain\na predecessor data structure. But it feels kind of like those\nare the same thing, maybe.",
    "start": "3470240",
    "end": "3477284"
  },
  {
    "text": "I don't know if there's a\nformal sense in which this is the case. And efficiency, in general, is\nthe vaguest part of kinetic.",
    "start": "3477284",
    "end": "3484336"
  },
  {
    "text": "And for each problem,\nyou have to think hard to understand,\nwhat does efficient mean for this problem?",
    "start": "3484336",
    "end": "3489380"
  },
  {
    "text": " But maybe don't even\nworry about efficiency--",
    "start": "3489380",
    "end": "3494700"
  },
  {
    "text": "what does a lower bound mean-- but bottom line is-- worst\ncase, n squared events, if there are no\nchange operations.",
    "start": "3494700",
    "end": "3502280"
  },
  {
    "text": "So you can think of the\nrunning time, if you want, of jumping to infinity as order\nn squared in the worst case.",
    "start": "3502280",
    "end": "3508010"
  },
  {
    "text": "That's how we\nanalyze these things. There are other things\nwe'd like to analyze. Efficiency is one of them.",
    "start": "3508010",
    "end": "3514650"
  },
  {
    "text": "We have three others,\nwhich I sort of hinted at.",
    "start": "3514650",
    "end": "3520309"
  },
  {
    "text": "There's responsiveness, which\nis time spent to do an event.",
    "start": "3520310",
    "end": "3526870"
  },
  {
    "text": "So when a certificate\nis invalidated, how much time does\nit take to do that? There's locality, which\nis closely related.",
    "start": "3526870",
    "end": "3534380"
  },
  {
    "text": "This is the number of-- oh, I see-- number of\ncertificates per data object.",
    "start": "3534380",
    "end": "3547730"
  },
  {
    "text": " I said over here, this is\ngood, because each item",
    "start": "3547730",
    "end": "3554570"
  },
  {
    "text": "x i is only involved\nin a constant number of certificates. So we say the\nlocality is constant--",
    "start": "3554570",
    "end": "3559802"
  },
  {
    "text": "constant number of\ncertificates per object. Usually, locality\nimplies responsive. As long as you can update\nthe data structure,",
    "start": "3559802",
    "end": "3566760"
  },
  {
    "text": "you can also update the\ncertificates in whatever-- you pay a log factor,\nbecause you're updating a priority queue.",
    "start": "3566760",
    "end": "3573150"
  },
  {
    "text": "But you can update\nall those events, or redo all the\ncertificates in an event,",
    "start": "3573150",
    "end": "3579109"
  },
  {
    "text": "provided you are local. So locally usually implies\nresponsive, more or less. And then-- what's the\nother one-- compact.",
    "start": "3579110",
    "end": "3585845"
  },
  {
    "text": " This is about space. And we just like the number\nof certificates to be small.",
    "start": "3585845",
    "end": "3595170"
  },
  {
    "text": "So in this case, number\nof certificates is linear. That's that up here. So we consider the structure\nto be optimally compact.",
    "start": "3595170",
    "end": "3602540"
  },
  {
    "text": "You need at least n. So in our case, we're getting\norder n here, order one here,",
    "start": "3602540",
    "end": "3608720"
  },
  {
    "text": "order log n here. And efficiency I guess you'd\ncall constant, kind of.",
    "start": "3608720",
    "end": "3617210"
  },
  {
    "text": "Efficiency is the ratio\nof how many events you do divided by how many\nevents you need to do.",
    "start": "3617210",
    "end": "3624950"
  },
  {
    "text": "And here, it is optimal,\nin a certain vague sense.",
    "start": "3624950",
    "end": "3630500"
  },
  {
    "text": "Sorry, that's a\nlittle unsatisfying. But it's unsatisfying. That's the literature\nfor that problem.",
    "start": "3630500",
    "end": "3638720"
  },
  {
    "text": "We're going to do\nanother problem, which is more satisfying, I would say. ",
    "start": "3638720",
    "end": "3645440"
  },
  {
    "text": "And it kind of shows\nyou why kinetic problems are pretty interesting. ",
    "start": "3645440",
    "end": "3653220"
  },
  {
    "text": "Data structures are\noften pretty darn simple, and the fun part\nis the analysis.",
    "start": "3653220",
    "end": "3659952"
  },
  {
    "text": "Or, where it can get\nintricate is the analysis. So let's solve kinetic heap.",
    "start": "3659952",
    "end": "3666990"
  },
  {
    "text": "Our goal is to be\nable to do find min. ",
    "start": "3666990",
    "end": "3672490"
  },
  {
    "text": "And yeah, there's also\ninsertions and deletions.",
    "start": "3672490",
    "end": "3677730"
  },
  {
    "text": "But I'm not going\nto think about them. Because they're not\nreally that different. They're kind of like a change.",
    "start": "3677730",
    "end": "3683520"
  },
  {
    "text": "Let's not worry about it. The goal is to\nmaintain the minimum. Now, if you look at this point\nset and their velocities,",
    "start": "3683520",
    "end": "3692100"
  },
  {
    "text": "how many times does\nthe minimum change? Once. Initially, the min is this.",
    "start": "3692100",
    "end": "3698609"
  },
  {
    "text": "Eventually, the\nmin will be this-- one change to the minimum. So this data structure is a bad\nway to maintain the minimum.",
    "start": "3698610",
    "end": "3705960"
  },
  {
    "text": "Yes, it does\nmaintain the minimum. But it's going to spend a\nquadratic number of events in this situation, where\nthe min only changes once.",
    "start": "3705960",
    "end": "3713859"
  },
  {
    "text": "So can we get a-- ideally, you have\none certificate, which is like, this\npoint is the minimum.",
    "start": "3713860",
    "end": "3719030"
  },
  {
    "text": "But that's not such\na good certificate, because then, every\npoint is involved in it. And how do you know when\nit's going to be violated?",
    "start": "3719030",
    "end": "3725030"
  },
  {
    "text": "I guess you could compute it in,\nlike, linear time or something. It's not a good plan.",
    "start": "3725030",
    "end": "3730680"
  },
  {
    "text": "We need to break down\nthe certificates that only involve a constant\nnumber of things",
    "start": "3730680",
    "end": "3736359"
  },
  {
    "text": "and maintain the minimum. And somehow, I want to get below\nquadratic number of events,",
    "start": "3736359",
    "end": "3741920"
  },
  {
    "text": "in the worst case. And you can. And you do it with a heap.",
    "start": "3741920",
    "end": "3748521"
  },
  {
    "text": "Remember heaps?  Store min heap.",
    "start": "3748521",
    "end": "3755080"
  },
  {
    "text": "So min heap has this property. You have x, y, and z.",
    "start": "3755080",
    "end": "3761550"
  },
  {
    "text": "Then x is less\nthan or equal to y, and x is less than\nor equal to z. This is nice, because--\nlocal property.",
    "start": "3761550",
    "end": "3768220"
  },
  {
    "text": "These are my certificates. For every node x, I have\nto have this property.",
    "start": "3768220",
    "end": "3775230"
  },
  {
    "text": "So I have order n certificates. ",
    "start": "3775230",
    "end": "3780941"
  },
  {
    "text": "That's good. I had order n\ncertificates before. But I claim these,\nmagically, are easier to maintain than\nthose, even though they",
    "start": "3780941",
    "end": "3788069"
  },
  {
    "text": "look almost the same-- kind of crazy. ",
    "start": "3788070",
    "end": "3793760"
  },
  {
    "text": "I don't know if I\nreally need to write it, but how do we do an event? ",
    "start": "3793760",
    "end": "3801930"
  },
  {
    "text": "If x and y are about\nto invert in order-- so currently, x lets me go to y.",
    "start": "3801930",
    "end": "3807059"
  },
  {
    "text": "In a moment, x will\nbe bigger than y. I swap x and y, update\nall the certificates--",
    "start": "3807060",
    "end": "3813270"
  },
  {
    "text": "constant for each. There's two items I'm moving. Each one is involved in a\nconstant of certificates-- three now, instead of two--",
    "start": "3813270",
    "end": "3820440"
  },
  {
    "text": "but constant number of\ncertificate changes and stuff-- AUDIENCE: Question. ERIK DEMAINE: --log n time. I update the priority queue.",
    "start": "3820440",
    "end": "3826809"
  },
  {
    "text": "Question? AUDIENCE: How is it three?  ERIK DEMAINE: Why\nis it three? x is",
    "start": "3826810",
    "end": "3833070"
  },
  {
    "text": "involved in a certificate\nwith its two children, and with its parent. Its parent has a\nrelation, as well.",
    "start": "3833070",
    "end": "3838820"
  },
  {
    "text": "Yeah. So you have to be careful\nin counting locality. How many certificates\nin each object in?",
    "start": "3838820",
    "end": "3845920"
  },
  {
    "text": "OK so we're responsive--\nlog n time, local, constant, certificates per object,\ncompact, linear number",
    "start": "3845920",
    "end": "3851840"
  },
  {
    "text": "certificates-- all\nthese are the same. Big issue is about efficiency. How many events is\nit, in the worst case?",
    "start": "3851840",
    "end": "3858720"
  },
  {
    "text": "How many events do I need? OK, here, for\nkinetic heap, where",
    "start": "3858720",
    "end": "3867780"
  },
  {
    "text": "I want to maintain the\nminimum at all times, there's actually a\nvery clear lower bound. The number of events--",
    "start": "3867780",
    "end": "3876800"
  },
  {
    "text": "or let's say, the number\nof changes to the min-- ",
    "start": "3876800",
    "end": "3883580"
  },
  {
    "text": "I think this is what some\npeople call external events. Like, you can't control\nwhen the min changes. The user controls that by how\nthey set up the trajectories.",
    "start": "3883580",
    "end": "3893610"
  },
  {
    "text": "Changes to the min is at\nleast n in the worst case. ",
    "start": "3893610",
    "end": "3902847"
  },
  {
    "text": "It's pretty easy to set this up. You have a point, another point\nmoving at constant velocity to the left, it will overtake.",
    "start": "3902847",
    "end": "3908800"
  },
  {
    "text": "You have another point farther\naway, with a bigger velocity, to the left. It will overtake after this\none overtakes-- and, you know,",
    "start": "3908800",
    "end": "3916960"
  },
  {
    "text": "something like this. You've got to make\nsure they don't all cross at the same moment. But this one will go first, and\nthen this guy will cross over.",
    "start": "3916960",
    "end": "3923173"
  },
  {
    "text": "And eventually-- So it's easy to set up. The min can change a\nlinear number of times.",
    "start": "3923173",
    "end": "3928540"
  },
  {
    "text": "I claim in this data\nstructure, well, of course, the min will change, at most,\na linear number of times.",
    "start": "3928540",
    "end": "3934630"
  },
  {
    "text": "Well, it's not\nclear it's at most. But that's true. What we care about\nthough, is, we're storing way more\ncertificates than the min.",
    "start": "3934630",
    "end": "3940870"
  },
  {
    "text": "We have a linear\nnumber of certificates. I claim the total number of\nevents in this data structure,",
    "start": "3940870",
    "end": "3947170"
  },
  {
    "text": "if there are no change\noperations, if we just advance to infinity-- number of events\nis order n log n.",
    "start": "3947170",
    "end": "3955060"
  },
  {
    "text": " And so we call the\nefficiency log n,",
    "start": "3955060",
    "end": "3960160"
  },
  {
    "text": "because you're log in factor\naway from this lower bound. This is the interesting part.",
    "start": "3960160",
    "end": "3966310"
  },
  {
    "text": "And this requires a proof. ",
    "start": "3966310",
    "end": "3999620"
  },
  {
    "text": "So why is the number of\nevents order n log n? We're going to prove this by\namortization, with a somewhat",
    "start": "3999620",
    "end": "4010330"
  },
  {
    "text": "tedious potential function. But it's sort of\nthe obvious one. ",
    "start": "4010330",
    "end": "4023230"
  },
  {
    "text": "At a time t, I wanted to find\nmy potential at time t to be, how many events will\nhappen in the future?",
    "start": "4023230",
    "end": "4029450"
  },
  {
    "text": "This is the thing\nI want to bound. So I want to prove this is\norder n log n at time zero.",
    "start": "4029450",
    "end": "4035132"
  },
  {
    "text": "But let's think about\nhow it changes over time. ",
    "start": "4035132",
    "end": "4042290"
  },
  {
    "text": "So I'm going to rewrite\nthis as follows. ",
    "start": "4042290",
    "end": "4076066"
  },
  {
    "text": "I'm going to Sum\nover all items x. And we're thinking about\nthe potential at time t.",
    "start": "4076066",
    "end": "4083180"
  },
  {
    "text": "So I look-- x is in some node. And which node it's\nin changes over time. But at time t,\nit's in some node.",
    "start": "4083180",
    "end": "4089599"
  },
  {
    "text": "I look at all the\ndescendants of that node. I look at those items. And I see which of\nthose items will",
    "start": "4089600",
    "end": "4095060"
  },
  {
    "text": "overtake x in a future time. Those are the ones\nthat I care about. When you overtake an ancestor,\nthat's when an event happens.",
    "start": "4095060",
    "end": "4105909"
  },
  {
    "text": "I claim these two\nthings are equal. I probably don't even\nneed to prove that. So this is in parentheses.",
    "start": "4105910",
    "end": "4112622"
  },
  {
    "text": "Don't worry about\nthis being equal. Think of this as the\npotential function. ",
    "start": "4112622",
    "end": "4120380"
  },
  {
    "text": "Now, I want to look at an\nevent and see how this changes. I need a little\nbit more notation.",
    "start": "4120380",
    "end": "4126799"
  },
  {
    "text": "I'm going to call this\nthing phi of t comma x.",
    "start": "4126800",
    "end": "4133189"
  },
  {
    "text": "So phi of t is the sum over\nall x of this thing, which is phi of t comma x-- number of descendants\nof x at this time that",
    "start": "4133189",
    "end": "4139759"
  },
  {
    "text": "will, in the future,\novertake x, meaning their key will get larger than x.",
    "start": "4139760",
    "end": "4145290"
  },
  {
    "text": "OK. I can also expand phi\nof t, x in a simple way.",
    "start": "4145290",
    "end": "4152009"
  },
  {
    "text": "It's kind of trivial. But if I look at each child\nof x-- there's two of them--",
    "start": "4152010",
    "end": "4158839"
  },
  {
    "text": "call that y-- and then\nmeasure how many descendants",
    "start": "4158840",
    "end": "4167299"
  },
  {
    "text": "of y at time t will overtake x?",
    "start": "4167300",
    "end": "4178339"
  },
  {
    "text": "So it's almost the\nsame words, but I changed one of the x's to\na y-- but only one of them.",
    "start": "4178340",
    "end": "4183410"
  },
  {
    "text": " Sorry-- \"future\" I\nwrite greater than \"t.\"",
    "start": "4183410",
    "end": "4190399"
  },
  {
    "text": "This is a different quantity--\nslightly different-- which I'm going to call\nphi of t comma x comma y.",
    "start": "4190399",
    "end": "4197360"
  },
  {
    "text": "I just need to be able\nto talk about this. So this is mostly to\nintroduce notation.",
    "start": "4197360",
    "end": "4202560"
  },
  {
    "text": "OK, and descendants of y--\nthis is including y itself. So there's y and all of its\nchildren-- descendants--",
    "start": "4202560",
    "end": "4208670"
  },
  {
    "text": "whatever-- which are those that\nwill overtake x. If I add that up\nfor both children,",
    "start": "4208670",
    "end": "4213885"
  },
  {
    "text": "that is the total\nnumber of descendants of x that will overtake x. So this equality is trivial.",
    "start": "4213885",
    "end": "4220190"
  },
  {
    "text": "Mainly, I wanted\nto introduce that. OK. So what now?",
    "start": "4220190",
    "end": "4226010"
  },
  {
    "text": "Let's look at an event,\nand see what changes. ",
    "start": "4226010",
    "end": "4246530"
  },
  {
    "text": "So-- try a little bigger-- x, y, z.",
    "start": "4246530",
    "end": "4254370"
  },
  {
    "text": "Let's say we need to\nchange it to y, x, z. Because y is about\nto overtake x.",
    "start": "4254370",
    "end": "4262920"
  },
  {
    "text": "How does the potential change? OK, well, potential is the\nsum of all these phi t, x's.",
    "start": "4262920",
    "end": "4269969"
  },
  {
    "text": "So which of these\nphi t, x's change? I claim that phi of--",
    "start": "4269970",
    "end": "4276441"
  },
  {
    "text": "I'm going to call it t-plus,\nwhich is the moment right after now-- infintesimally larger--",
    "start": "4276441",
    "end": "4282750"
  },
  {
    "text": "I claim it does not\nchange for most vertices. ",
    "start": "4282750",
    "end": "4289050"
  },
  {
    "text": "It only changes for x and y. If x and y are the guys\nthat are switching order, this will not change\nfor any others.",
    "start": "4289050",
    "end": "4296230"
  },
  {
    "text": "Why is that? Because we're looking at number\nof descendants to some vertex that will overtake that vertex.",
    "start": "4296230",
    "end": "4301270"
  },
  {
    "text": "So do the descendants change? No. Descendants of x and y\nchange, but no one else, their descendants change.",
    "start": "4301270",
    "end": "4307190"
  },
  {
    "text": "This is just a swap of\ntwo adjacent elements. Will overtaking change? No.",
    "start": "4307190",
    "end": "4312530"
  },
  {
    "text": "I mean, overtaking\ndoesn't change. If you're going to be overtaken\nby x before, you still be overtaken by x.",
    "start": "4312530",
    "end": "4318120"
  },
  {
    "text": "And it's still a\ndescendant-- unless it was y. y is the only one\nfor which it changed. OK, so we only have\nto think about x and y",
    "start": "4318120",
    "end": "4325400"
  },
  {
    "text": "and how their\npotentials are changing. OK. ",
    "start": "4325400",
    "end": "4332250"
  },
  {
    "text": "So let's look at x. x is pretty simple.",
    "start": "4332250",
    "end": "4337500"
  },
  {
    "text": "x went down.  So we care about now\nthe descendants of x.",
    "start": "4337500",
    "end": "4343600"
  },
  {
    "text": "Those are what used to\nbe the descendants of y. So what are the descendants\nof y that will overtake x?",
    "start": "4343600",
    "end": "4351480"
  },
  {
    "text": "That is phi of t, x, y.",
    "start": "4351480",
    "end": "4357616"
  },
  {
    "text": "That's the definition here. The descendants of y\nthat will overtake x-- we had that written down.",
    "start": "4357616",
    "end": "4363239"
  },
  {
    "text": "So that is its new potential,\nexcept as a minus 1, because y used to\nbe a descendant that",
    "start": "4363240",
    "end": "4369840"
  },
  {
    "text": "would overtake x. But it just overtook x--\nnot going to happen again. Not gonna happen again.",
    "start": "4369840",
    "end": "4375119"
  },
  {
    "text": "I'm assuming here affine\nmotion, I suppose. It could really happen a\nconstant number of times. But let's keep it simple.",
    "start": "4375120",
    "end": "4383429"
  },
  {
    "text": "OK. That was easy. Next one's a little harder. ",
    "start": "4383430",
    "end": "4390360"
  },
  {
    "text": "The other one is y.  What is the new potential of y?",
    "start": "4390360",
    "end": "4398309"
  },
  {
    "text": "y has new descendants now. It used to just have\nthis many descendants. It still has those descendants.",
    "start": "4398310",
    "end": "4404700"
  },
  {
    "text": "It now has x, which\ndoesn't matter, if we assume it will\nnever be overtaken again. And now, it has this\nwhole subtree of z.",
    "start": "4404700",
    "end": "4412980"
  },
  {
    "text": "So we have whatever it used\nto have, which is phi of t, y. That's all it's old descendants.",
    "start": "4412980",
    "end": "4420210"
  },
  {
    "text": "And now we have this new\nthing phi of t, y, z.",
    "start": "4420210",
    "end": "4426450"
  },
  {
    "text": "If you plug that into here, that\nis the number of descendants of z that will overtake y.",
    "start": "4426450",
    "end": "4432090"
  },
  {
    "text": " That's the new thing\nthat we add on.",
    "start": "4432090",
    "end": "4437882"
  },
  {
    "text": "So this is an increase. This was a decrease and\nthis is an increase. We hope that they're\nabout the same. In fact, they will\nbe basically equal.",
    "start": "4437882",
    "end": "4445500"
  },
  {
    "text": "So first claim is this is,\nat most, this other thing--",
    "start": "4445500",
    "end": "4451870"
  },
  {
    "text": "phi of t, y-- phi of t, x, z.",
    "start": "4451870",
    "end": "4457046"
  },
  {
    "start": "4457046",
    "end": "4462969"
  },
  {
    "text": "So I'm just replacing\nthis y with an x. Why is this true?",
    "start": "4462970",
    "end": "4468520"
  },
  {
    "text": "Because this is overtaking y.",
    "start": "4468520",
    "end": "4474200"
  },
  {
    "text": "If you're going to\novertake y at this time, you would overtake\nx at this time.",
    "start": "4474200",
    "end": "4479790"
  },
  {
    "text": "Because x and y are\nequal right now. I'm pretty sure this\nis actually equal. I don't know why I wrote my\nnotes \"less than or equal to.\"",
    "start": "4479790",
    "end": "4485140"
  },
  {
    "text": "Less than or equal\nto is all I need. But I think, at\nthis moment in time, when they're actually\nequal to each other,",
    "start": "4485140",
    "end": "4491798"
  },
  {
    "text": "it doesn't matter whether\nyou have x and y here. You will overtake\none if and only if you overtake the\nother at this moment.",
    "start": "4491798",
    "end": "4497580"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] ERIK DEMAINE: No, I see. Right. Actually, this is\nabout future time. In future time, we\nknow that y is always",
    "start": "4497580",
    "end": "4504220"
  },
  {
    "text": "going to be less than x,\nbecause it's moving up. In future time,\nif you overtake y,",
    "start": "4504220",
    "end": "4510070"
  },
  {
    "text": "you'll certainly\novertake x, because-- no, the other way around. If you overtake x, meaning you\ngo below x, one of these ways--",
    "start": "4510070",
    "end": "4522710"
  },
  {
    "text": "overtaking is actually\ngoing up in the tree, but it's actually\ngetting smaller in value. If you get smaller than\ny, you rise above y.",
    "start": "4522710",
    "end": "4529510"
  },
  {
    "text": "That means you will have\nalready risen above x. You already be a\nvalue smaller than x.",
    "start": "4529510",
    "end": "4534696"
  },
  {
    "text": "So hopefully, that\nis the way that it's less than or equal to. Because that's what we need. OK, good.",
    "start": "4534696",
    "end": "4540610"
  },
  {
    "text": "Now, I understand. AUDIENCE: So at this point,\nwe're assuming affine? ERIK DEMAINE: We're\nassuming affine.",
    "start": "4540610",
    "end": "4546770"
  },
  {
    "text": "Yeah. Sorry. Forgot to mention that. I think this works\nfor pseudo algebraic, but this proof does not,\nassuming that x and y only",
    "start": "4546770",
    "end": "4554620"
  },
  {
    "text": "switch places once. OK, then we have this simple\nequation, which is phi of t,",
    "start": "4554620",
    "end": "4563650"
  },
  {
    "text": "x equals phi of t, x,\ny plus phi of t, x, z, where you just sum\nover the two children.",
    "start": "4563650",
    "end": "4569900"
  },
  {
    "text": "So this is phi of t, x, z. So-- I need more space, I guess. ",
    "start": "4569900",
    "end": "4582550"
  },
  {
    "text": "So phi of t, x, z, that is phi\nof t, x minus phi of t, x, y.",
    "start": "4582550",
    "end": "4590260"
  },
  {
    "text": "So we have, let's say,\non the left-hand side,",
    "start": "4590260",
    "end": "4595269"
  },
  {
    "text": "is less than or equal\nto phi of t, y plus--",
    "start": "4595270",
    "end": "4603490"
  },
  {
    "text": "this is what we had\nbefore-- t of x, z. But now, that is the same as phi\nof t, x minus the other child.",
    "start": "4603490",
    "end": "4609880"
  },
  {
    "text": " Sorry-- y.",
    "start": "4609880",
    "end": "4615460"
  },
  {
    "text": " OK, that was just that equation.",
    "start": "4615460",
    "end": "4621340"
  },
  {
    "text": "Now, do things simplify? Hope so. Phi of t, y-- ",
    "start": "4621340",
    "end": "4630370"
  },
  {
    "text": "these two things-- ",
    "start": "4630370",
    "end": "4636170"
  },
  {
    "text": "OK. Not so pretty. What we care about is\nthe sum of these things.",
    "start": "4636170",
    "end": "4644950"
  },
  {
    "text": "We care about sum-- the overall potential. So we want phi of t-plus\nis phi of t plus something.",
    "start": "4644950",
    "end": "4656270"
  },
  {
    "text": "How it changes is, well, how\ndoes phi of t prime x change?",
    "start": "4656270",
    "end": "4662549"
  },
  {
    "text": "Well, it went down a lot. It went all the way\ndown to phi of t, x, y.",
    "start": "4662549",
    "end": "4667989"
  },
  {
    "text": "Well, actually, we just\nadd these together. Add them up.",
    "start": "4667990",
    "end": "4674160"
  },
  {
    "text": "This is messy. Sorry. ",
    "start": "4674160",
    "end": "4680500"
  },
  {
    "text": "Let's look at this sum-- phi of t plus x and y.",
    "start": "4680500",
    "end": "4687250"
  },
  {
    "text": "So we get this thing-- phi of t, x, y minus 1.",
    "start": "4687250",
    "end": "4695210"
  },
  {
    "text": "And then we get this thing-- so\nphi of t, y, plus phi of t, x,",
    "start": "4695210",
    "end": "4702760"
  },
  {
    "text": "minus phi of t, x, y. It's an elaborate way of\nsaying this cancels with this.",
    "start": "4702760",
    "end": "4711220"
  },
  {
    "text": "So we are left with\nthe old value-- phi of t, x, plus\nphi of t, y, minus 1.",
    "start": "4711220",
    "end": "4716690"
  },
  {
    "text": "So that means phi-- sorry, this is less\nthan or equal to.",
    "start": "4716690",
    "end": "4722650"
  },
  {
    "text": "This means phi of t-plus is less\nthan or equal phi of t minus 1.",
    "start": "4722650",
    "end": "4728210"
  },
  {
    "text": "In other words, every\ntime an event happens, the potential goes\ndown by at least one.",
    "start": "4728210",
    "end": "4734710"
  },
  {
    "text": "This is basically confirming\nthis intuition, but roughly.",
    "start": "4734710",
    "end": "4740020"
  },
  {
    "text": "But our definition\nwas this-- the number of descendants of x that\novertake x in the future.",
    "start": "4740020",
    "end": "4746760"
  },
  {
    "text": "How big could this thing be? It is, at most, the sum\nover all nodes of the number of descendants of that node.",
    "start": "4746761",
    "end": "4753160"
  },
  {
    "text": "So it is, by definition,\nat most, n log n. If we look at phi of\n0, it's order n log n.",
    "start": "4753160",
    "end": "4761820"
  },
  {
    "text": "And what we're doing is\nusing a balanced heap here. And so for order n\nlog n, initially,",
    "start": "4761820",
    "end": "4767230"
  },
  {
    "text": "in every event that\nhappens, we go down by one. And we're never negative. That thing is\nalways non-negative.",
    "start": "4767230",
    "end": "4774360"
  },
  {
    "text": "Then the number of events\nis, at most, order n log n. Cool? OK, I only have one\nmore page of notes",
    "start": "4774360",
    "end": "4780940"
  },
  {
    "text": "to cover in zero minutes-- about 15 seconds. Let me quickly tell you\nabout what's on this page,",
    "start": "4780940",
    "end": "4787690"
  },
  {
    "text": "and you can read it at home. It's a little survey of lots\nof different kinetic data structures, in particular,\nfor more than one dimension.",
    "start": "4787690",
    "end": "4796329"
  },
  {
    "text": "So there's a lot of\nwork on 2D convex hull. You have moving points\nin two dimensions. You want to maintain\nthe convex hull.",
    "start": "4796330",
    "end": "4802120"
  },
  {
    "text": "The number of events-- the best we know how\nto achieve is order n to the two plus epsilon--",
    "start": "4802120",
    "end": "4808420"
  },
  {
    "text": "a little bit bigger\nthan n squared. And there's a lower bound that\nit can change n squared times. So it's almost optimal--",
    "start": "4808420",
    "end": "4815590"
  },
  {
    "text": "unknown how to do that in 3D. A problem that we solved in\nthe open problems in this class",
    "start": "4815590",
    "end": "4821800"
  },
  {
    "text": "two years ago is\nsmallest enclosing disk. So you have points\nmoving in the plane, and you want to maintain,\nwhat is the smallest",
    "start": "4821800",
    "end": "4828700"
  },
  {
    "text": "enclosing disk of those points? Number of events we got was\nn to the 3 plus epsilon, which is a little bit painful.",
    "start": "4828700",
    "end": "4834460"
  },
  {
    "text": "Best lower round is n squared-- so still a gap there. Those closely related to\nanother open problem, which",
    "start": "4834460",
    "end": "4839950"
  },
  {
    "text": "is, you want to\nmaintain something called a Delaunay triangulation. If you know what that is, great. If not, it's a\nbig open problem--",
    "start": "4839950",
    "end": "4846026"
  },
  {
    "text": "how many times can the\nDelaunay triangulation change if you have just points\nmoving along straight lines?",
    "start": "4846026",
    "end": "4851384"
  },
  {
    "text": "Best upper bound is n cubed. Best lower bound is n squared--\nso similar linear gap. If you just want to\nmaintain some triangulation",
    "start": "4851384",
    "end": "4857680"
  },
  {
    "text": "on your points,\nyou can do better. Best upper bound is\nn to the 2.33333.",
    "start": "4857680",
    "end": "4863490"
  },
  {
    "text": "Best lower bound is n squared. So a smaller gap-- just cube root of n gap.",
    "start": "4863490",
    "end": "4870460"
  },
  {
    "text": "Collision detection is probably\nthe most obvious application here. You have a video game. Things are moving\nwith known velocities.",
    "start": "4870460",
    "end": "4878121"
  },
  {
    "text": "You update those\nvelocities-- like, you have bullets, and\npeople running around, and whatever you\nwant to know when they bounce into each other--\nwalls, which are stationary.",
    "start": "4878122",
    "end": "4884920"
  },
  {
    "text": "When does that happen? There's pretty good algorithms\nfor kinetic collision detection. Although, it's very unclear\nwhat efficient means.",
    "start": "4884920",
    "end": "4892810"
  },
  {
    "text": "Because you want to\noptimize for the case when not many collisions happen. And these algorithms do-- in a\ncertain sense, they're optimal.",
    "start": "4892810",
    "end": "4899800"
  },
  {
    "text": "But it's much harder to\nstate what that sense is. Minimum spanning tree\nis another one I have. This is tough.",
    "start": "4899800",
    "end": "4906580"
  },
  {
    "text": "Easy thing to do is, you\ndo kinetic predecessor on the entire sorted\norder of the edge lengths.",
    "start": "4906580",
    "end": "4912590"
  },
  {
    "text": "And then you just run\na [? stem ?] thing that processes the edges in order. So that gets a quadratic\nnumber of events.",
    "start": "4912590",
    "end": "4919060"
  },
  {
    "text": "It's unknown whether you can do\nany better for minimum spanning tree. So that was your quick\nsurvey of kinetic.",
    "start": "4919060",
    "end": "4925079"
  },
  {
    "text": "And that ends geometry. The end.",
    "start": "4925080",
    "end": "4929099"
  }
]