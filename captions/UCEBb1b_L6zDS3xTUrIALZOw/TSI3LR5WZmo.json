[
  {
    "start": "0",
    "end": "659000"
  },
  {
    "text": "hi everybody um glad to have you all back",
    "start": "25039",
    "end": "30320"
  },
  {
    "text": "for our next to last installment of theory of computation",
    "start": "30320",
    "end": "37600"
  },
  {
    "text": "today um we are going to embark on the very last",
    "start": "37600",
    "end": "44640"
  },
  {
    "text": "big topic for the semester and that is in some ways going to be",
    "start": "44640",
    "end": "51360"
  },
  {
    "text": "following on what we started a couple of lectures back when we looked",
    "start": "51360",
    "end": "58480"
  },
  {
    "text": "at probabilistic turing machines and probabilistic computation",
    "start": "58480",
    "end": "64239"
  },
  {
    "text": "and its associated class bpp now what we're going to",
    "start": "64239",
    "end": "69680"
  },
  {
    "text": "discuss is in some sense a probabilistic version of np",
    "start": "69680",
    "end": "77200"
  },
  {
    "text": "and that's going to be a complexity class called ip which stands for interactive proof",
    "start": "77200",
    "end": "82320"
  },
  {
    "text": "systems um and so we're going to present that model",
    "start": "82320",
    "end": "88400"
  },
  {
    "text": "and look at a couple of examples uh i would",
    "start": "88400",
    "end": "93600"
  },
  {
    "text": "just like to say at the beginning that the this model is a very important one it's",
    "start": "93600",
    "end": "98720"
  },
  {
    "text": "really uh has been the starting point for a great deal of research",
    "start": "98720",
    "end": "105439"
  },
  {
    "text": "in complexity theory so we're just really going to be touching on it but there's a lot more that people have",
    "start": "105439",
    "end": "113200"
  },
  {
    "text": "pursued with this model and it's also a connection in to the cryptography field",
    "start": "113200",
    "end": "119680"
  },
  {
    "text": "which also makes use of the interactive proof system model in fact",
    "start": "119680",
    "end": "125360"
  },
  {
    "text": "some of the genesis of that model comes out of cryptography",
    "start": "125360",
    "end": "131840"
  },
  {
    "text": "where you're having uh multiple parties either communicating or",
    "start": "131840",
    "end": "137680"
  },
  {
    "text": "in some ways interacting uh to achieve certain uh goals of",
    "start": "137680",
    "end": "145440"
  },
  {
    "text": "communication or signing or passwords or or or what have",
    "start": "145520",
    "end": "150640"
  },
  {
    "text": "you so uh this is a both a an applied area and also one that has a lot of very",
    "start": "150640",
    "end": "156720"
  },
  {
    "text": "interesting theory uh um associated to it so with that one we we're going to jump",
    "start": "156720",
    "end": "162160"
  },
  {
    "text": "in um and uh start out by uh",
    "start": "162160",
    "end": "167680"
  },
  {
    "text": "making myself smaller and just do a an introduction i'm going to",
    "start": "167680",
    "end": "174160"
  },
  {
    "text": "introduce the model or the the concept of an interactive proof",
    "start": "174160",
    "end": "180239"
  },
  {
    "text": "with an example and that example involves the graph isomorphism problem",
    "start": "180239",
    "end": "187440"
  },
  {
    "text": "that's the problem of testing whether two graphs are isomorphic what we mean by two graphs being",
    "start": "187440",
    "end": "193519"
  },
  {
    "text": "isomorphic is that they're really just the same graph",
    "start": "193519",
    "end": "198800"
  },
  {
    "text": "with one of them perhaps being re-labeled or permuted",
    "start": "198800",
    "end": "204159"
  },
  {
    "text": "so that they may look superficially different they may appear with a different",
    "start": "204159",
    "end": "210480"
  },
  {
    "text": "sequence of labels or the nodes are appearing in a different order but",
    "start": "210480",
    "end": "216879"
  },
  {
    "text": "except for that it's really just the same graph so i'm kind of illustrating that here if you can see those two",
    "start": "217519",
    "end": "223360"
  },
  {
    "text": "graphs here which look different from each other both on eight notes they are in fact the same graph",
    "start": "223360",
    "end": "229760"
  },
  {
    "text": "as i can illustrate by a little animation which will convert this one into that one",
    "start": "229760",
    "end": "236560"
  },
  {
    "text": "so uh the um [Music]",
    "start": "239360",
    "end": "244480"
  },
  {
    "text": "so the two graphs um these graphs being the same um they're",
    "start": "244480",
    "end": "252319"
  },
  {
    "text": "we call that isomorphic so these are graphs g and h and they're really the same graph so we we um call",
    "start": "252319",
    "end": "259840"
  },
  {
    "text": "them isomorphic graphs and we are have an associated computational problem",
    "start": "259840",
    "end": "265759"
  },
  {
    "text": "called iso which is given a pair of graphs we'd like to know",
    "start": "265759",
    "end": "270960"
  },
  {
    "text": "are they isomorphic or not so the iso is the collection of pairs of graphs which are isomorphic",
    "start": "270960",
    "end": "276479"
  },
  {
    "text": "and it's easy to see that this problem is an np",
    "start": "276479",
    "end": "283440"
  },
  {
    "text": "problem because all you need to do in order to see or to",
    "start": "283440",
    "end": "288800"
  },
  {
    "text": "give a certificate that the two graphs are isomorphic to each other is tell you it's just to say which nodes in the one",
    "start": "288800",
    "end": "296240"
  },
  {
    "text": "graph correspond to which other nodes in the other graph um and then you all you need to check is",
    "start": "296240",
    "end": "302000"
  },
  {
    "text": "that the edge relationships are consistent with that mapping or that isomorphism as it's",
    "start": "302000",
    "end": "308240"
  },
  {
    "text": "called um so it's easy to see that the iso problem",
    "start": "308240",
    "end": "313759"
  },
  {
    "text": "is an np and if you're not getting that make sure you uh understand because this is the",
    "start": "313759",
    "end": "320240"
  },
  {
    "text": "whole first part of the lecture will be lost if you don't understand this iso problem",
    "start": "320240",
    "end": "325440"
  },
  {
    "text": "now the question of whether you can test two graphs",
    "start": "325440",
    "end": "331120"
  },
  {
    "text": "being isomorphic in polynomial time",
    "start": "331120",
    "end": "335680"
  },
  {
    "text": "is not clear and in fact that's an unsolved problem to this day uh",
    "start": "336479",
    "end": "342400"
  },
  {
    "text": "and it's a problem that has generated an enormous literature uh",
    "start": "342400",
    "end": "348080"
  },
  {
    "text": "there are hundreds of papers on the graph isomorphism problem as it's called um to try to uh resolve",
    "start": "348080",
    "end": "356240"
  },
  {
    "text": "um you know uh to try to see if one can find a polynomial time algorithm and in fact it was a very big result",
    "start": "356240",
    "end": "363600"
  },
  {
    "text": "just in the last 10 years where there was a sub-exponential algorithm given so that was more",
    "start": "363600",
    "end": "369600"
  },
  {
    "text": "than faster than the brute force search approach but didn't get it all the way down to polynomial now why is there so",
    "start": "369600",
    "end": "376639"
  },
  {
    "text": "much attention just to this one particular np problem it's because it's not known whether the graph",
    "start": "376639",
    "end": "383039"
  },
  {
    "text": "isomorphism problem is np-complete iso is not known to be an np-complete problem and that puts it into a very",
    "start": "383039",
    "end": "389600"
  },
  {
    "text": "very small class of problems in np which are no not known to be either in p",
    "start": "389600",
    "end": "395680"
  },
  {
    "text": "or np-complete it's kind of a curiosity that for np problems",
    "start": "395680",
    "end": "401039"
  },
  {
    "text": "almost all of them have ended up being in one side or the other and in fact",
    "start": "401039",
    "end": "406840"
  },
  {
    "text": "um it's a uh um",
    "start": "406840",
    "end": "413919"
  },
  {
    "text": "in fact the the um i i think it's the only problem that",
    "start": "413919",
    "end": "420720"
  },
  {
    "text": "just involves graphs that's not known to be either in p or an np",
    "start": "420720",
    "end": "426160"
  },
  {
    "text": "um so so i got a question here what would be in between exponential and",
    "start": "426160",
    "end": "431440"
  },
  {
    "text": "polynomial for example i don't remember what the the bound is but it's it's something in the uh",
    "start": "431440",
    "end": "437199"
  },
  {
    "text": "in the range of n to the log n uh",
    "start": "437199",
    "end": "442720"
  },
  {
    "text": "time complexity for the graphite some more i might be getting that wrong um i don't remember exactly what the bound is",
    "start": "442720",
    "end": "449039"
  },
  {
    "text": "but um that's significantly better than two to the n or some",
    "start": "449039",
    "end": "455280"
  },
  {
    "text": "some exponential amount of time but it it's more than enter any constant so it's more than any polynomial time",
    "start": "455280",
    "end": "464440"
  },
  {
    "text": "so um another question uh of the same sort is",
    "start": "464960",
    "end": "470160"
  },
  {
    "text": "whether the complementary problem is in np or whether whether iso is in co-np or",
    "start": "470160",
    "end": "475680"
  },
  {
    "text": "let's let's talk about it in terms of the complement whether the complement of iso which i'll refer to as",
    "start": "475680",
    "end": "482000"
  },
  {
    "text": "the non-iso problem whether that's known to be in np so that's also not known um",
    "start": "482000",
    "end": "490160"
  },
  {
    "text": "in other words if i give you two graphs and i ask you to show that they're not",
    "start": "490560",
    "end": "495599"
  },
  {
    "text": "isomorphic suppose they aren't isomorphic and you go through the effort of you know determining that by a brute",
    "start": "495599",
    "end": "500879"
  },
  {
    "text": "force search and now you want to prove that they're not isomorphic well that's",
    "start": "500879",
    "end": "506720"
  },
  {
    "text": "not it's not known to be an np either so there's no known short certificate certificate of",
    "start": "506720",
    "end": "514080"
  },
  {
    "text": "two graphs not being isomorphic we don't know how to do that either but there's something that's very",
    "start": "514080",
    "end": "519440"
  },
  {
    "text": "interesting nevertheless um and it has to do with the ability to for one",
    "start": "519440",
    "end": "527120"
  },
  {
    "text": "party to prove to another that graphs are either isomorphic or not isomorphic",
    "start": "527120",
    "end": "532800"
  },
  {
    "text": "so if you're just having like a prover we haven't really been necessarily formulating that this way so much in",
    "start": "532800",
    "end": "539120"
  },
  {
    "text": "this class but this is a completely equivalent way of formulating the notion of np whether you have a polynomial time",
    "start": "539120",
    "end": "545279"
  },
  {
    "text": "verifier an approver who can produce certificates say it's a powerful prover",
    "start": "545279",
    "end": "550880"
  },
  {
    "text": "so um if you have a problem that's in np approver can convince a polynomial time",
    "start": "550880",
    "end": "557120"
  },
  {
    "text": "verifier that uh strings are in the language if in fact they are so in the case of the",
    "start": "557120",
    "end": "563680"
  },
  {
    "text": "iso problem a prover can convince a polynomial time verifier the graphs are isomorphic just by exhibiting the",
    "start": "563680",
    "end": "569839"
  },
  {
    "text": "isomorphism now for the non-isomorphism case",
    "start": "569839",
    "end": "578000"
  },
  {
    "text": "we don't know that that problem's in np but it's still possible for approver to convince a verifier that",
    "start": "578000",
    "end": "585519"
  },
  {
    "text": "graphs are not isomorphic if you change the rules of the game",
    "start": "585519",
    "end": "591279"
  },
  {
    "text": "slightly um so even though the non-iso problem",
    "start": "591279",
    "end": "597279"
  },
  {
    "text": "is not known to be an np approver can still convince a polynomial time verifier that graphs are not",
    "start": "597279",
    "end": "603279"
  },
  {
    "text": "isomorphic assuming they they are in fact not isomorphic um provided",
    "start": "603279",
    "end": "609360"
  },
  {
    "text": "that um the prover and the verifier can interact with one another so the verifier can ask",
    "start": "609360",
    "end": "616480"
  },
  {
    "text": "questions of the prover and the verifier gets to be probabilistic",
    "start": "616480",
    "end": "621839"
  },
  {
    "text": "so that's in this in that's in sense in which i mean that this notion is a kind of a",
    "start": "621839",
    "end": "628640"
  },
  {
    "text": "probabilistic version of np",
    "start": "628640",
    "end": "633480"
  },
  {
    "text": "okay so um let me show you how that's done",
    "start": "633920",
    "end": "640720"
  },
  {
    "text": "so before we jump in to the uh to the method for approver to um show a verifier that",
    "start": "640720",
    "end": "648399"
  },
  {
    "text": "graphs are not isomorphic um let me let let's try to get a little clearer on the model so i'm going to",
    "start": "648399",
    "end": "654640"
  },
  {
    "text": "first show it to you informally and then we'll look at it formally",
    "start": "654640",
    "end": "660000"
  },
  {
    "start": "659000",
    "end": "1185000"
  },
  {
    "text": "okay so in in interactive proofs there are two parties",
    "start": "660000",
    "end": "665120"
  },
  {
    "text": "um and i'm going to think about them as one of them is going to be the professor",
    "start": "665120",
    "end": "672079"
  },
  {
    "text": "okay so the professor is going to play the role of the verifier in a sense but",
    "start": "672079",
    "end": "677680"
  },
  {
    "text": "it's like that the one who checks um and uh the professor being kind of old",
    "start": "677680",
    "end": "684640"
  },
  {
    "text": "and tired he's been teaching too long maybe can only operate in",
    "start": "684640",
    "end": "691680"
  },
  {
    "text": "probabilistic polynomial time so the professor if wants to tell",
    "start": "691680",
    "end": "696880"
  },
  {
    "text": "whether two graphs are isomorphic or not probabilistic polynomial time doesn't seem to be enough",
    "start": "696880",
    "end": "702880"
  },
  {
    "text": "to tell whether two graphs are isomorphic or not because it seems to be a more than polynomial problem",
    "start": "702880",
    "end": "710320"
  },
  {
    "text": "however the professor has um",
    "start": "710320",
    "end": "716720"
  },
  {
    "text": "help it has an army of",
    "start": "716720",
    "end": "722399"
  },
  {
    "text": "graduate students and the graduate students they're not limited uh in the same way",
    "start": "722399",
    "end": "729279"
  },
  {
    "text": "the professor is the graduate students are young they",
    "start": "729279",
    "end": "734800"
  },
  {
    "text": "are energetic they can stay up all night they know how to code so",
    "start": "734800",
    "end": "740079"
  },
  {
    "text": "the graduate students have unlimited computational ability",
    "start": "740079",
    "end": "745839"
  },
  {
    "text": "so that we're going to think of the graduate students playing the role of the approver because they're not they're not limited in their",
    "start": "746399",
    "end": "752240"
  },
  {
    "text": "capabilities we'll assume the professor on the other hand is limited so the professor wants to know",
    "start": "752240",
    "end": "758480"
  },
  {
    "text": "if the two graphs are isomorphic let's say whatever they are",
    "start": "758480",
    "end": "764399"
  },
  {
    "text": "um can't do it by himself so he's going to ask his students to figure out the",
    "start": "764399",
    "end": "770079"
  },
  {
    "text": "answer and report back now there's only one problem",
    "start": "770079",
    "end": "776320"
  },
  {
    "text": "the professor knows that students uh well in the old days they'd like to",
    "start": "776320",
    "end": "781360"
  },
  {
    "text": "party i guess these days they like to play on uh play computer games a lot",
    "start": "781360",
    "end": "786880"
  },
  {
    "text": "and so they're not really that eager to spend all their time figuring out whether graphs are isomorphic",
    "start": "786880",
    "end": "792800"
  },
  {
    "text": "so he's worried that the the students will just come up with some answer and figure that he won't be able",
    "start": "792800",
    "end": "798160"
  },
  {
    "text": "to tell the difference so the professor does not trust the",
    "start": "798160",
    "end": "804399"
  },
  {
    "text": "students it's not enough to he for the professor to give the problem to the students and just take any answer that",
    "start": "804399",
    "end": "810480"
  },
  {
    "text": "they're going to give the professor wants wants to be convinced",
    "start": "810480",
    "end": "816480"
  },
  {
    "text": "okay so um",
    "start": "817440",
    "end": "821760"
  },
  {
    "text": "now how could the students convince the professor of the answer that they've",
    "start": "822560",
    "end": "828560"
  },
  {
    "text": "really done the work and figured out whether the graphs are isomorphic or not well if the graphs are isomorphic if it",
    "start": "828560",
    "end": "834800"
  },
  {
    "text": "turns out that the graphs were isomorphic and the students figure that out then life is good",
    "start": "834800",
    "end": "840839"
  },
  {
    "text": "because what are they going to do to convince the professor they're going to hand over the",
    "start": "840839",
    "end": "846480"
  },
  {
    "text": "isomorphism and show yeah i mean they are you know those graphs really are",
    "start": "846480",
    "end": "852880"
  },
  {
    "text": "isomorphic and here's how the correspondence works professor can check oh yeah i i now not now i'm convinced",
    "start": "852880",
    "end": "860560"
  },
  {
    "text": "but suppose the graphs were not isomorphic what are we going to do then",
    "start": "860560",
    "end": "867680"
  },
  {
    "text": "um the students have figured out where after night else the professor wants",
    "start": "867680",
    "end": "872720"
  },
  {
    "text": "wants to be convinced oh no what are we going to do well in fact we're going to engage the",
    "start": "872720",
    "end": "878160"
  },
  {
    "text": "the professor and the students are going to engage in the following protocol dialogue",
    "start": "878160",
    "end": "885279"
  },
  {
    "text": "what's going to happen is now you have to make sure you're you're this is critical to follow to understand",
    "start": "885279",
    "end": "890959"
  },
  {
    "text": "this little part of the story here because it's really going to set the pattern for everything in today's and tomorrow and",
    "start": "890959",
    "end": "897120"
  },
  {
    "text": "to today's lecture and the and the next lecture okay so",
    "start": "897120",
    "end": "902480"
  },
  {
    "text": "we're going to engage in a following interaction between the students and the",
    "start": "902480",
    "end": "907600"
  },
  {
    "text": "professor which is going to enable the students to convince the professor that",
    "start": "907600",
    "end": "913440"
  },
  {
    "text": "the two graphs really are not isomorphic so how is that going to work",
    "start": "913440",
    "end": "920959"
  },
  {
    "text": "this is a beautiful little uh thing by the way so the professor is going to take the",
    "start": "920959",
    "end": "927040"
  },
  {
    "text": "two graphs and pick one of them at random because the two graphs g and h",
    "start": "927040",
    "end": "934959"
  },
  {
    "text": "um let's say they're not they really are not isomorphic the professor doesn't know that for sure that's what the",
    "start": "934959",
    "end": "940320"
  },
  {
    "text": "students claim the professor really wants to not be convinced that the students are right",
    "start": "940320",
    "end": "945440"
  },
  {
    "text": "um so the professor's gonna pick one of the two at random randomly permute that",
    "start": "945440",
    "end": "950880"
  },
  {
    "text": "uh that choice the one that he picked and hand it over to the students",
    "start": "950880",
    "end": "956639"
  },
  {
    "text": "say okay here is one of those two graphs randomly scrambled",
    "start": "956639",
    "end": "963040"
  },
  {
    "text": "then i'm going to ask the students which one did i pick",
    "start": "963279",
    "end": "969480"
  },
  {
    "text": "okay now if the graphs were really not isomorphic",
    "start": "972880",
    "end": "978720"
  },
  {
    "text": "the students can check whether that randomly scrambled graph",
    "start": "978720",
    "end": "984320"
  },
  {
    "text": "is isomorphic to either g or to h it's going to be isomorphic to one or the other",
    "start": "984320",
    "end": "989920"
  },
  {
    "text": "and then they students can figure it out and they say oh you picked g or no you picked h",
    "start": "989920",
    "end": "995120"
  },
  {
    "text": "as the case may be the students can figure that out but if the graphs were isomorphic",
    "start": "995120",
    "end": "1002639"
  },
  {
    "text": "then that scrambled version of g or h could equally well have come from either of",
    "start": "1002639",
    "end": "1008880"
  },
  {
    "text": "them and the students would have no way of knowing",
    "start": "1008880",
    "end": "1015600"
  },
  {
    "text": "which one the professor picked so that there's nothing they could do which would be better than guessing",
    "start": "1016399",
    "end": "1024798"
  },
  {
    "text": "so if we do that a bunch of times the professor picks at random sometimes secretly of course the picks the grip",
    "start": "1024799",
    "end": "1032400"
  },
  {
    "text": "picks either g or picks h and the students get it right every time",
    "start": "1032400",
    "end": "1041280"
  },
  {
    "text": "either the students are really doing the work and the graphs are really not isomorphic",
    "start": "1041280",
    "end": "1046400"
  },
  {
    "text": "or the students are just incredibly lucky they're managing to guess right let's",
    "start": "1046400",
    "end": "1052320"
  },
  {
    "text": "say a hundred times",
    "start": "1052320",
    "end": "1055360"
  },
  {
    "text": "so how the the the professor randomly and secretly picks grh uses this uses its probabilism",
    "start": "1058160",
    "end": "1066160"
  },
  {
    "text": "flips a coin just a two-sided coin and says okay sometimes if we're going to do g",
    "start": "1066160",
    "end": "1071520"
  },
  {
    "text": "sometimes they're going to do h just completely at random picks one or the other",
    "start": "1071520",
    "end": "1076720"
  },
  {
    "text": "and then with some more randomness gets finds a random permutation of the",
    "start": "1076720",
    "end": "1081919"
  },
  {
    "text": "one that he picked and then sends that over to the students and say which one did it come from",
    "start": "1081919",
    "end": "1089440"
  },
  {
    "text": "um i'm not sure okay so let's pause here",
    "start": "1092000",
    "end": "1098400"
  },
  {
    "text": "let's let's make sure we all understand this because this is really important um so i'm getting a question here how do we",
    "start": "1098400",
    "end": "1105360"
  },
  {
    "text": "i'm not sure what your question is um okay so let me just say yeah the professor's going to play the role the",
    "start": "1105360",
    "end": "1111120"
  },
  {
    "text": "verifier the graduate students play they're all approver that's coming but i really want to understand this protocol here okay so how is the professor",
    "start": "1111120",
    "end": "1118080"
  },
  {
    "text": "picking the graph skin if you're okay i don't you know picking the graphs at random you have just two graphs",
    "start": "1118080",
    "end": "1123679"
  },
  {
    "text": "they're in part of the input uh the both the students and the professor can see the graphs",
    "start": "1123679",
    "end": "1129679"
  },
  {
    "text": "and the professors are just picking one of them at random using a coin so i'm not sure i understand the question there could p and v engage in a protocol where",
    "start": "1129679",
    "end": "1136080"
  },
  {
    "text": "the secretary is on the prover side instead the question of revealing the isomorphism i there is no why so i'm not",
    "start": "1136080",
    "end": "1142080"
  },
  {
    "text": "sure i understand this question either um maybe we'll make this clear you know if",
    "start": "1142080",
    "end": "1147760"
  },
  {
    "text": "for for this little illustration the professor",
    "start": "1147760",
    "end": "1153200"
  },
  {
    "text": "doesn't know the graphs could be isomorphic or they could be not isomorphic",
    "start": "1153200",
    "end": "1158799"
  },
  {
    "text": "and so uh the professor wants to be convinced either way whatever the students whatever answer the students",
    "start": "1158799",
    "end": "1164160"
  },
  {
    "text": "come up with we're going to shift this into a problem about a um deciding a",
    "start": "1164160",
    "end": "1170000"
  },
  {
    "text": "language next but right now i'm just trying to give a sense of the how the model works",
    "start": "1170000",
    "end": "1175039"
  },
  {
    "text": "i want to move from this informal model and now i'm going to formalize that in terms of",
    "start": "1175039",
    "end": "1180160"
  },
  {
    "text": "model which will be deciding a language okay so",
    "start": "1180160",
    "end": "1186000"
  },
  {
    "text": "so the interactive proof system model we have two interacting parties a",
    "start": "1186000",
    "end": "1192960"
  },
  {
    "text": "verifier which is probabilistic polynomial time playing played by the professor in the previous slide",
    "start": "1192960",
    "end": "1198720"
  },
  {
    "text": "and the prover which is unlimited computational power played by the students in the previous slide",
    "start": "1198720",
    "end": "1207320"
  },
  {
    "text": "both of them get to see the input which in the previous case well it could be for example the pair of",
    "start": "1208159",
    "end": "1215120"
  },
  {
    "text": "graphs they exchange a polynomial number of polynomial size messages so the whole",
    "start": "1215120",
    "end": "1221840"
  },
  {
    "text": "exchange including the verifier's own computation",
    "start": "1221840",
    "end": "1227120"
  },
  {
    "text": "is going to be polynomial the only thing that's not not not included within the computational cost is the prover's work",
    "start": "1227120",
    "end": "1234640"
  },
  {
    "text": "which is unlimited um",
    "start": "1234640",
    "end": "1240000"
  },
  {
    "text": "after that the verifier after the interaction the verifier will accept or reject",
    "start": "1240000",
    "end": "1245200"
  },
  {
    "text": "and we're going to define the probability that the verifier together with a particular approver ends up",
    "start": "1245200",
    "end": "1251440"
  },
  {
    "text": "accepting as you look over the different possible coin",
    "start": "1251440",
    "end": "1257760"
  },
  {
    "text": "tosses of the verifier which could lead to different",
    "start": "1257760",
    "end": "1264559"
  },
  {
    "text": "behavior on the part of the verifier and therefore different behavior on the part of the approver",
    "start": "1264559",
    "end": "1270400"
  },
  {
    "text": "so over all the different possibility possibilities for the verifiers computation",
    "start": "1270400",
    "end": "1275440"
  },
  {
    "text": "we're going to look at the probability that the verifier with this particular approver ends up accepting and i've",
    "start": "1275440",
    "end": "1280880"
  },
  {
    "text": "written it this way this is the probability of the verifier interacting with the prover accepts the input",
    "start": "1280880",
    "end": "1287600"
  },
  {
    "text": "is just simply that um and so we're going to work through an",
    "start": "1287600",
    "end": "1293840"
  },
  {
    "text": "example we're going to work through the previous example more",
    "start": "1293840",
    "end": "1299039"
  },
  {
    "text": "precisely in a second the class ip for interactive proofs",
    "start": "1299039",
    "end": "1305840"
  },
  {
    "text": "stands for it's the class of languages such that for some verifier and approver",
    "start": "1305840",
    "end": "1313600"
  },
  {
    "text": "um for strings in the language the prover makes the verifier accept",
    "start": "1313600",
    "end": "1319280"
  },
  {
    "text": "with high probability and here's the interesting part for strings not in the language the",
    "start": "1319280",
    "end": "1326000"
  },
  {
    "text": "prover makes it except with low probability but every there's no prover which can make it except with high",
    "start": "1326000",
    "end": "1331360"
  },
  {
    "text": "probability so there's no way to cheat if you think about it in the case of the",
    "start": "1331360",
    "end": "1337360"
  },
  {
    "text": "graphic non-isomorphism there's nothing you know if",
    "start": "1337360",
    "end": "1343520"
  },
  {
    "text": "if the graphs were really isomorphic and the students were trying to in a",
    "start": "1343520",
    "end": "1348720"
  },
  {
    "text": "devious way prove through that protocol that they're not",
    "start": "1348720",
    "end": "1354320"
  },
  {
    "text": "isomorphic they would fail because there's nothing they can do if the graphs were isomorphic",
    "start": "1354320",
    "end": "1360480"
  },
  {
    "text": "then um when the verifier the the professor picks one or",
    "start": "1360480",
    "end": "1365919"
  },
  {
    "text": "the other at random um and scrambles it the students would have no way of telling which one the",
    "start": "1365919",
    "end": "1371919"
  },
  {
    "text": "professor did so no matter what kind of scheme they try to come up with",
    "start": "1371919",
    "end": "1377039"
  },
  {
    "text": "they're going to be out of luck so it's no mat for any strategy",
    "start": "1377039",
    "end": "1383039"
  },
  {
    "text": "for strings that are not in the language for any s any prover calling that p with",
    "start": "1383039",
    "end": "1388400"
  },
  {
    "text": "a tilde to stand for a devious or crooked prover for any uh possibly crooked prover",
    "start": "1388400",
    "end": "1396320"
  },
  {
    "text": "even that with working with the verifier is still going to end up accepting with low probability",
    "start": "1396320",
    "end": "1403520"
  },
  {
    "text": "so strings in the language there's going to be an honest prover who just follows the protocol",
    "start": "1403520",
    "end": "1408559"
  },
  {
    "text": "in the correct way which makes the verifier accept with high probability for strings not in the language every",
    "start": "1408559",
    "end": "1414320"
  },
  {
    "text": "prover is going to fail to make it accept with high probability um",
    "start": "1414320",
    "end": "1421519"
  },
  {
    "text": "okay so that i mean the way i like to think about it is that p tilde is a possibly crooked proverb which is",
    "start": "1422240",
    "end": "1429279"
  },
  {
    "text": "trying to make the verifier accept when it shouldn't because the string is not in the language",
    "start": "1429279",
    "end": "1434320"
  },
  {
    "text": "it's like you know it's like even you can think of this in the case of um satisfiability",
    "start": "1434320",
    "end": "1440640"
  },
  {
    "text": "um you know you a crooked prover might try to convince",
    "start": "1440640",
    "end": "1446559"
  },
  {
    "text": "of the verifier that the formula is satisfiable when it isn't by by somehow",
    "start": "1446559",
    "end": "1451600"
  },
  {
    "text": "trying to produce a satisfying assignment but that's going to be impossible there's nothing any strategy can possibly work when the formula is",
    "start": "1451600",
    "end": "1458559"
  },
  {
    "text": "not satisfiable if that's what the verifier is going to check it's going to be looking for that satisfying assignment",
    "start": "1458559",
    "end": "1464480"
  },
  {
    "text": "okay and by the way this is we're not going to prove this but it's really going to be proved in the same way you can make",
    "start": "1464480",
    "end": "1470799"
  },
  {
    "text": "that one third error that could that occurs here something very tiny by",
    "start": "1470799",
    "end": "1476480"
  },
  {
    "text": "the same kind of repetition argument okay so let's see um",
    "start": "1476480",
    "end": "1484400"
  },
  {
    "text": "so why can't the prover in the first case be crooked um the prover in the first case would could",
    "start": "1484880",
    "end": "1490960"
  },
  {
    "text": "be crooked but that's not going to serve the purposes um you know what what we want to show",
    "start": "1490960",
    "end": "1498720"
  },
  {
    "text": "um you think about it like we think about np for strings in the language there exists",
    "start": "1498720",
    "end": "1505360"
  },
  {
    "text": "a certificate there is a proof that you're in the language so if somebody is going to",
    "start": "1505360",
    "end": "1512480"
  },
  {
    "text": "not produce the proof that's irrelevant",
    "start": "1512480",
    "end": "1518480"
  },
  {
    "text": "the question is if you look at the best possible case the best possible prover um",
    "start": "1518480",
    "end": "1524480"
  },
  {
    "text": "you know who's going to be able we're asking does there exist a way to convince the verifier that the um",
    "start": "1524480",
    "end": "1534080"
  },
  {
    "text": "string is in the language so it doesn't matter that there might be some other",
    "start": "1534080",
    "end": "1539120"
  },
  {
    "text": "uh silly way that doesn't work we're just looking at the best possible way so the best possible way when you're in",
    "start": "1539120",
    "end": "1545120"
  },
  {
    "text": "the language is going to end up with a verifier having high probability when you're not in the language the best",
    "start": "1545120",
    "end": "1550400"
  },
  {
    "text": "possible way is still going to end up with low probability when when i talk about best possible i'm",
    "start": "1550400",
    "end": "1555600"
  },
  {
    "text": "trying to maximize the probability that the verifier is going to end up accepting let's continue um not sure as",
    "start": "1555600",
    "end": "1562080"
  },
  {
    "text": "clear as i would like but um maybe again we're going to we're going",
    "start": "1562080",
    "end": "1567200"
  },
  {
    "text": "to stick with that example because this is a very uh helpful example and to try to",
    "start": "1567200",
    "end": "1574799"
  },
  {
    "text": "understand the setup and uh so we're gonna i'm gonna revisit",
    "start": "1574799",
    "end": "1581039"
  },
  {
    "text": "that previous example about non-isomorphism but now in the context of this",
    "start": "1581039",
    "end": "1586480"
  },
  {
    "text": "thinking about as a language so we're going to take this non-isomorphism",
    "start": "1586480",
    "end": "1592640"
  },
  {
    "text": "um uh yeah",
    "start": "1592640",
    "end": "1598720"
  },
  {
    "text": "we're going to take the non-isomorphism problem and show that it's an ip so there's going to be a verifier together with",
    "start": "1598720",
    "end": "1605360"
  },
  {
    "text": "approver which are going to make the verifier accept with high probability for strings in the language namely",
    "start": "1605360",
    "end": "1611760"
  },
  {
    "text": "graphs not ice being isomorphic and nothing there's going to be no way to make the verifier except with high",
    "start": "1611760",
    "end": "1618320"
  },
  {
    "text": "probability for strings out of the language therefore that's when the graphs are isomorphic",
    "start": "1618320",
    "end": "1624000"
  },
  {
    "text": "okay um so the protocol is just gonna we're gonna repeat the following thing twice",
    "start": "1624000",
    "end": "1629360"
  },
  {
    "text": "you know i said in the previous case do it a hundred times just to help us think about it but actually",
    "start": "1629360",
    "end": "1634880"
  },
  {
    "text": "twice is gonna be enough to get the bound we need so the verifier is going to operate like this in terms of this is the verifiers",
    "start": "1634880",
    "end": "1642480"
  },
  {
    "start": "1637000",
    "end": "2079000"
  },
  {
    "text": "in first communicating sending messages to the approver it's going to randomly choose grh",
    "start": "1642480",
    "end": "1650480"
  },
  {
    "text": "just like what the professor did last time randomly permute the result to get a new",
    "start": "1650480",
    "end": "1655600"
  },
  {
    "text": "graph k which was going to be which was which is isomorphic either to grh",
    "start": "1655600",
    "end": "1661440"
  },
  {
    "text": "depending upon the choice the verifier made and then send that graph k",
    "start": "1661440",
    "end": "1668159"
  },
  {
    "text": "now the provers turn is going to respond by the proof is going to compare k with",
    "start": "1668159",
    "end": "1674240"
  },
  {
    "text": "the two one of the both of the original graphs it's got to be isomorphic to one or the other",
    "start": "1674240",
    "end": "1679360"
  },
  {
    "text": "and it's going to report back which one just going to say well you pick g no or",
    "start": "1679360",
    "end": "1685039"
  },
  {
    "text": "you picked h because the prover with its unlimited capabilities can determine that",
    "start": "1685039",
    "end": "1691520"
  },
  {
    "text": "um and then v accepts if the approval was right both times",
    "start": "1691520",
    "end": "1697600"
  },
  {
    "text": "um and if the approval was ever not right the verify says oh something's fishy",
    "start": "1697600",
    "end": "1703440"
  },
  {
    "text": "here because we know that the prover has unlimited capability so could get it right if you know um if there was if",
    "start": "1703440",
    "end": "1711440"
  },
  {
    "text": "this was an honest approver um and so um if uh",
    "start": "1711440",
    "end": "1716799"
  },
  {
    "text": "if it's not getting it right then the verify is going to reject",
    "start": "1716799",
    "end": "1722080"
  },
  {
    "text": "so if the graphs are not isomorphic the proofer can tell which one it picked randomly so therefore",
    "start": "1723200",
    "end": "1730559"
  },
  {
    "text": "if the graphs are not isomorphic the verifier with that that honest prover will accept with probability one",
    "start": "1730640",
    "end": "1738720"
  },
  {
    "text": "because that honest proof is always going to get the right answer which is at least two-thirds is what the bound we need",
    "start": "1738720",
    "end": "1746320"
  },
  {
    "text": "uh we don't care about the space used in answer to a question um if",
    "start": "1746960",
    "end": "1753919"
  },
  {
    "text": "we were not in the language so g and i h are not isomorphic then there's nothing any crooked pervert",
    "start": "1753919",
    "end": "1760159"
  },
  {
    "text": "could possibly do because it gets a graph can't tell there's no way to tell",
    "start": "1760159",
    "end": "1765200"
  },
  {
    "text": "whether it came from g or came from h um so that crooked proofer would have all",
    "start": "1765200",
    "end": "1772080"
  },
  {
    "text": "it could the best thing you could do is guess sort of a 50 chance advancing correctly each time and only a 25 chance",
    "start": "1772080",
    "end": "1779200"
  },
  {
    "text": "for doing it twice and that's why i did it twice in order to get that error um",
    "start": "1779200",
    "end": "1786559"
  },
  {
    "text": "uh to be small so there's only a 25 chance of the approver getting lucky so that",
    "start": "1786559",
    "end": "1792320"
  },
  {
    "text": "would be an error case if the proof of just by chance picked the right answer twice even though the",
    "start": "1792320",
    "end": "1799120"
  },
  {
    "text": "graphs were isomorphic so therefore for the isomorphic case",
    "start": "1799120",
    "end": "1804559"
  },
  {
    "text": "the verifier interacting with any prover is going to accept that input with at most one quarter 25 of the time",
    "start": "1804559",
    "end": "1812320"
  },
  {
    "text": "which is less than a third so those are that's just to achieve that bound okay",
    "start": "1812320",
    "end": "1817679"
  },
  {
    "text": "so let's let's answer some questions first and then i'll try to um",
    "start": "1817679",
    "end": "1824080"
  },
  {
    "text": "uh i'll ask you",
    "start": "1824080",
    "end": "1830559"
  },
  {
    "text": "you understand this so this it's i think it's worth trying to understand this model um of this interactive proof",
    "start": "1830720",
    "end": "1837039"
  },
  {
    "text": "system it's a little little slippery i i realize but um",
    "start": "1837039",
    "end": "1843520"
  },
  {
    "text": "if you just hold your hold on to your intuition of the prover trying to convince you know of uh",
    "start": "1843520",
    "end": "1850399"
  },
  {
    "text": "you know a powerful prover trying to convince a limited verifier",
    "start": "1850399",
    "end": "1855520"
  },
  {
    "text": "um of some string being in a language",
    "start": "1855520",
    "end": "1861519"
  },
  {
    "text": "uh you want the proven to be able to succeed when the string is in the language but fail when the string is not",
    "start": "1861519",
    "end": "1868240"
  },
  {
    "text": "in the language yes we are going to somebody's asking if",
    "start": "1868240",
    "end": "1874000"
  },
  {
    "text": "the prover is identifying grh by brute force yes the prover is going to use its unlimited capabilities to determine",
    "start": "1874000",
    "end": "1881679"
  },
  {
    "text": "given k whether it came from g or h",
    "start": "1881679",
    "end": "1886320"
  },
  {
    "text": "the um the computational cost of the approver is irrelevant for",
    "start": "1888399",
    "end": "1893679"
  },
  {
    "text": "this it's just like when we think about a certificate um you know for satisfiability we don't",
    "start": "1893679",
    "end": "1899279"
  },
  {
    "text": "talk about the cost of finding that certificate uh for np for ip again we don't talk about the",
    "start": "1899279",
    "end": "1905519"
  },
  {
    "text": "cost of the prover running so somebody's asking does the crooked per prover answer just randomly or does",
    "start": "1905519",
    "end": "1911919"
  },
  {
    "text": "uh can the cr quick approver has have a strategy the crooked perimeter can have a strategy",
    "start": "1911919",
    "end": "1917440"
  },
  {
    "text": "now we're not we're assuming the crooked approver is devious but it's still going to fail",
    "start": "1917440",
    "end": "1922880"
  },
  {
    "text": "okay um let's do the check-in suppose we change the model",
    "start": "1922880",
    "end": "1929200"
  },
  {
    "text": "so that the prover can watch the verifier picking its random choices",
    "start": "1929200",
    "end": "1934480"
  },
  {
    "text": "so uh the verifier cannot act in secret anymore but the the prover can watch the",
    "start": "1934480",
    "end": "1940480"
  },
  {
    "text": "verifier now let's suppose we had the same protocol that i just described",
    "start": "1940480",
    "end": "1946320"
  },
  {
    "text": "what language do we end up with is it the same language different language and what is that language",
    "start": "1946320",
    "end": "1952559"
  },
  {
    "text": "okay so i want to hopefully um let's let's",
    "start": "1952559",
    "end": "1959039"
  },
  {
    "text": "it'll give me some sense of how well you're following me by how well this uh this goes",
    "start": "1959039",
    "end": "1964480"
  },
  {
    "text": "yeah someone's asking about how this connects up for example with np so we're going to look at that",
    "start": "1964480",
    "end": "1969760"
  },
  {
    "text": "also in a second",
    "start": "1969760",
    "end": "1973320"
  },
  {
    "text": "okay so this is reassuring that most of you i think are on the right track at least for this check-in uh do we assume",
    "start": "1977360",
    "end": "1982880"
  },
  {
    "text": "p uses this access to guess right what access p is not really guessing the",
    "start": "1982880",
    "end": "1988159"
  },
  {
    "text": "p is tr is actually i don't think a p is non-deterministic or anything like that p is actually trying to get the right",
    "start": "1988159",
    "end": "1993679"
  },
  {
    "text": "answer and using its computational ability to do that if it's",
    "start": "1993679",
    "end": "1999279"
  },
  {
    "text": "possible may not be possible then there's nothing you can do okay so let's uh end this are you all in",
    "start": "1999279",
    "end": "2007919"
  },
  {
    "text": "two seconds left please vote vote now or never",
    "start": "2008159",
    "end": "2013760"
  },
  {
    "text": "okay ending um yeah so c is the correct answer here",
    "start": "2013760",
    "end": "2021120"
  },
  {
    "text": "if the prover can watch what the verify is doing the prover can see what graph the verifier picked right",
    "start": "2021519",
    "end": "2028159"
  },
  {
    "text": "from the beginning and so the prover without having to do any work can say you know it proves looks over",
    "start": "2028159",
    "end": "2034559"
  },
  {
    "text": "the verifier's shoulder and says oh you picked g and now you're randomly permitting it",
    "start": "2034559",
    "end": "2039600"
  },
  {
    "text": "but i don't care about that i just i know you pick g uh so uh the",
    "start": "2039600",
    "end": "2045519"
  },
  {
    "text": "proof is going to respond back uh g even if the graphs were isomorphic the proof",
    "start": "2045519",
    "end": "2050560"
  },
  {
    "text": "is going to be able to get the right answer kind of interestingly um uh",
    "start": "2050560",
    "end": "2057520"
  },
  {
    "text": "you can make a you can change the protocol somewhat um to make it uh that",
    "start": "2057520",
    "end": "2063679"
  },
  {
    "text": "even if the prover has access to the verifier's randomness you can still achieve this but not with",
    "start": "2063679",
    "end": "2069520"
  },
  {
    "text": "the same protocol um so that's uh that's a separate question",
    "start": "2069520",
    "end": "2075839"
  },
  {
    "text": "um okay so let's move on here i want to get too bogged down okay here's another check-in um",
    "start": "2075839",
    "end": "2083679"
  },
  {
    "start": "2079000",
    "end": "2502000"
  },
  {
    "text": "uh okay so",
    "start": "2083679",
    "end": "2089838"
  },
  {
    "text": "you have to tell me which of the following statements are true",
    "start": "2091119",
    "end": "2096480"
  },
  {
    "text": "as far as you know now you have to think about a little bit",
    "start": "2096879",
    "end": "2103280"
  },
  {
    "text": "how this these uh relate to um how np and ip or bpp",
    "start": "2103280",
    "end": "2111200"
  },
  {
    "text": "and ip relate to one another okay how are we doing on this",
    "start": "2111200",
    "end": "2117839"
  },
  {
    "text": "okay so we're gonna have to close this pretty soon too do the best you can",
    "start": "2124079",
    "end": "2129440"
  },
  {
    "text": "interesting okay closing up shop last last vote",
    "start": "2129440",
    "end": "2137599"
  },
  {
    "text": "okay one two three there's one more person out there who hasn't voted who voted last time oh well",
    "start": "2137599",
    "end": "2144000"
  },
  {
    "text": "uh all right in fact they're all true",
    "start": "2144000",
    "end": "2150800"
  },
  {
    "text": "um let's see why is np contained with ip",
    "start": "2150800",
    "end": "2156000"
  },
  {
    "text": "contained in ip uh well many of you have seen this already so let's just quickly go through it um",
    "start": "2156000",
    "end": "2162000"
  },
  {
    "text": "[Music] if we just had a deterministic v",
    "start": "2162000",
    "end": "2167760"
  },
  {
    "text": "um you know the uh you can",
    "start": "2167760",
    "end": "2174800"
  },
  {
    "text": "uh maybe it's just that that can be enough of deterministic v",
    "start": "2174800",
    "end": "2180079"
  },
  {
    "text": "i think it's just going to be equivalent but actually just to be doubly sure the deterministic v and the approver just",
    "start": "2180079",
    "end": "2186640"
  },
  {
    "text": "sends a message to the verifier and then checks it that's the way we normally think about a certificate for np",
    "start": "2186640",
    "end": "2193119"
  },
  {
    "text": "uh i don't think it's going to change anything but should double check that if the verifier can still ask questions but",
    "start": "2193119",
    "end": "2198160"
  },
  {
    "text": "i think as long as the verifier is deterministic you're going to get exactly np here",
    "start": "2198160",
    "end": "2204000"
  },
  {
    "text": "um and um now how about bpp",
    "start": "2204000",
    "end": "2210400"
  },
  {
    "text": "well there you don't even need approver because the verifier is already probabilistic",
    "start": "2210400",
    "end": "2215440"
  },
  {
    "text": "so verifier can ignore the approver and this one is a little tricky uh i p",
    "start": "2215440",
    "end": "2222480"
  },
  {
    "text": "containing p space because we haven't covered that so there's no way for you to know that unless you happen to read ahead in the book but it's in fact true",
    "start": "2222480",
    "end": "2229920"
  },
  {
    "text": "um in some ways it's a little bit like the proof that",
    "start": "2229920",
    "end": "2235599"
  },
  {
    "text": "uh np is contained in p space ip is sort of an",
    "start": "2235599",
    "end": "2241119"
  },
  {
    "text": "enhanced version of np and you and there's just a basically a uh a piece based brute force algorithm",
    "start": "2241119",
    "end": "2248079"
  },
  {
    "text": "that goes through the entire tree of possibilities um of the verifier exchange",
    "start": "2248079",
    "end": "2253760"
  },
  {
    "text": "verifier with exchanges with approver and can uh determine that um the",
    "start": "2253760",
    "end": "2260480"
  },
  {
    "text": "verifier is either going to accept for some approver or is going to end up projecting for every approver um",
    "start": "2260480",
    "end": "2266720"
  },
  {
    "text": "so we're not going to prove this statement but something good for you to know anyway they're just a fact",
    "start": "2266720",
    "end": "2272480"
  },
  {
    "text": "uh but we're going to do what the surprising thing in reference to part c",
    "start": "2272480",
    "end": "2278480"
  },
  {
    "text": "is that the containment also goes the other way this is the amazing um uh",
    "start": "2278480",
    "end": "2286160"
  },
  {
    "text": "was is an amazing result that everything in p space",
    "start": "2286720",
    "end": "2293359"
  },
  {
    "text": "you can do with in ip so this is ip is actually turns out to be incredibly powerful gives you",
    "start": "2293359",
    "end": "2299680"
  },
  {
    "text": "everything up in p space you get i p equals p space so that says that any problem that you",
    "start": "2299680",
    "end": "2305440"
  },
  {
    "text": "can solve in p space like any of the a game for example um if you can imagine you know",
    "start": "2305440",
    "end": "2311599"
  },
  {
    "text": "formulating you know checkers or chess as a piece based problem which you know",
    "start": "2311599",
    "end": "2317280"
  },
  {
    "text": "depending upon some details of the rules you can do because you know you have to generalize it to an end by end board but",
    "start": "2317280",
    "end": "2322960"
  },
  {
    "text": "okay let's not quibble um",
    "start": "2322960",
    "end": "2328079"
  },
  {
    "text": "uh then uh um [Music]",
    "start": "2328079",
    "end": "2335599"
  },
  {
    "text": "we don't know which side has a forced win in chess um and even if somebody goes through the",
    "start": "2335599",
    "end": "2341359"
  },
  {
    "text": "effort of going through the game tree um and determines that let's say white has a forced win",
    "start": "2341359",
    "end": "2347680"
  },
  {
    "text": "uh there's no way for them to there's no short certificate we don't know that that problem is not an np",
    "start": "2347680",
    "end": "2354400"
  },
  {
    "text": "but by going through an interactive proof an all-powerful prover",
    "start": "2354400",
    "end": "2360720"
  },
  {
    "text": "could still convince somebody that white had a force you know convince somebody in polynomial",
    "start": "2360720",
    "end": "2366000"
  },
  {
    "text": "time that a white has a forced wind let's say in um",
    "start": "2366000",
    "end": "2371520"
  },
  {
    "text": "in chess again little uh stretching things because this is",
    "start": "2371520",
    "end": "2377440"
  },
  {
    "text": "you know you really need to talk about this as an n by n not an eight by eight but i think in this the spirit is is uh",
    "start": "2377440",
    "end": "2383839"
  },
  {
    "text": "fair so um okay uh so let's continue",
    "start": "2383839",
    "end": "2391760"
  },
  {
    "text": "so wha when we're not going to quite prove that that p base is contained in ip we're going to prove",
    "start": "2391760",
    "end": "2397520"
  },
  {
    "text": "a somewhat weaker statement but very similar um is that uh and historically came first",
    "start": "2397520",
    "end": "2404240"
  },
  {
    "text": "that co-np is contained in ip so not only is np contained in ip but",
    "start": "2404240",
    "end": "2409680"
  },
  {
    "text": "we're going to prove that co np is contained in ip and this actually has most of the i most of the idea for the p",
    "start": "2409680",
    "end": "2416400"
  },
  {
    "text": "space being contained in ip and itself it's just an amazing proof a little easier",
    "start": "2416400",
    "end": "2422720"
  },
  {
    "text": "um okay",
    "start": "2422720",
    "end": "2428160"
  },
  {
    "text": "and th this was done if i'm remembering somebody's asking me when how old is this it's something in",
    "start": "2428160",
    "end": "2434240"
  },
  {
    "text": "the 19 i think late 90s but i'm not i don't remember but maybe early 90s i think it's late 90s",
    "start": "2434240",
    "end": "2440800"
  },
  {
    "text": "when this was shown so it's been a while now um",
    "start": "2440800",
    "end": "2446640"
  },
  {
    "text": "okay so um",
    "start": "2446640",
    "end": "2451720"
  },
  {
    "text": "yeah so in terms of the relationship with cryptography there were two parallel threads",
    "start": "2452000",
    "end": "2458480"
  },
  {
    "text": "um that both independently came up with the notion of an interactive purge system",
    "start": "2458480",
    "end": "2464240"
  },
  {
    "text": "uh i was a little bit personally involved with this in in a way as well but but mainly that",
    "start": "2464240",
    "end": "2471280"
  },
  {
    "text": "the the there was one group in cryptography um working on this and there was another",
    "start": "2471280",
    "end": "2476880"
  },
  {
    "text": "group who was actually coming out of the graph isomorphism world working on it and they they came up with",
    "start": "2476880",
    "end": "2485440"
  },
  {
    "text": "two separate models one involving the private randomness and one involving the public randomness um and it was turned",
    "start": "2485440",
    "end": "2492240"
  },
  {
    "text": "out that was that they're actually equivalent um and uh",
    "start": "2492240",
    "end": "2498400"
  },
  {
    "text": "it's an interesting story but unfortunately we don't have time for it uh so",
    "start": "2498400",
    "end": "2504160"
  },
  {
    "start": "2502000",
    "end": "2800000"
  },
  {
    "text": "why don't we move on and i'm gonna start showing you how the proof that",
    "start": "2504160",
    "end": "2510880"
  },
  {
    "text": "co-np is contained in ip goes and what we're going to do is work",
    "start": "2510880",
    "end": "2517200"
  },
  {
    "text": "with a problem that's almost like co p complete but um",
    "start": "2517200",
    "end": "2522880"
  },
  {
    "text": "going to be uh well it's going to be this number sat problem we'll see the connection with co-np in a second",
    "start": "2522880",
    "end": "2529119"
  },
  {
    "text": "uh so cohen p so it's supposed to be exactly k",
    "start": "2529119",
    "end": "2535200"
  },
  {
    "text": "satisfying assignments fee comma k is the set of pairs where the formula fee has exactly",
    "start": "2535200",
    "end": "2543119"
  },
  {
    "text": "k satisfying assignments so really that's a problem of counting how many satisfying assignments you have in a formula",
    "start": "2543119",
    "end": "2549119"
  },
  {
    "text": "um so you know for np you have at least one",
    "start": "2549119",
    "end": "2554319"
  },
  {
    "text": "um but i'm i want to know exactly how many uh so the numbers that problem is the",
    "start": "2554319",
    "end": "2560480"
  },
  {
    "text": "pairs formula and the count so",
    "start": "2560480",
    "end": "2565920"
  },
  {
    "text": "um and uh so if we define the count",
    "start": "2565920",
    "end": "2572240"
  },
  {
    "text": "number fee is the number of satisfying assignments of a fee",
    "start": "2572240",
    "end": "2577599"
  },
  {
    "text": "then another way of writing this uh number stat problem is",
    "start": "2577599",
    "end": "2582800"
  },
  {
    "text": "uh the pairs phi k where k is the number of satisfying assignments of fee",
    "start": "2582800",
    "end": "2589359"
  },
  {
    "text": "so we're going to be using this notation number fee a lot so just make sure you get you got that notation this is the",
    "start": "2589359",
    "end": "2595520"
  },
  {
    "text": "number of satisfying assignments of that formula",
    "start": "2595520",
    "end": "2600640"
  },
  {
    "text": "okay and here's a definition i probably should have given you earlier in the term but better late than never um",
    "start": "2602000",
    "end": "2609200"
  },
  {
    "text": "uh so the notion that a language is np hard",
    "start": "2609200",
    "end": "2614640"
  },
  {
    "text": "it's like np complete except without being necessarily being in np",
    "start": "2614640",
    "end": "2622720"
  },
  {
    "text": "so this is just the reduction part a language is np-hard or co-np-hard or p-space hard or any of those other",
    "start": "2622720",
    "end": "2629359"
  },
  {
    "text": "classes that we looked at if every problem in the class is reducible to that language",
    "start": "2629359",
    "end": "2636480"
  },
  {
    "text": "but you don't know whether this that that language is in the class so we just call it np hard instead of mp",
    "start": "2636480",
    "end": "2642640"
  },
  {
    "text": "complete so you could say the language is np complete if it's hard",
    "start": "2642640",
    "end": "2648880"
  },
  {
    "text": "and it's in np okay and so we're going to show that",
    "start": "2648880",
    "end": "2655119"
  },
  {
    "text": "this number set problem is co np hard so everything in cohen p is polynomial",
    "start": "2655119",
    "end": "2661680"
  },
  {
    "text": "time reducible to number set that's easy because what we're going to do is take a",
    "start": "2661680",
    "end": "2667680"
  },
  {
    "text": "co np complete problem which is the",
    "start": "2667680",
    "end": "2673560"
  },
  {
    "text": "unsatisfiability problem the complement of satisfiability and sure that reduces",
    "start": "2673560",
    "end": "2678720"
  },
  {
    "text": "to the numbers that problem and that's easy because a formula is unsatisfiable exactly when",
    "start": "2678720",
    "end": "2685040"
  },
  {
    "text": "it has zero satisfying assignments so if you can tell",
    "start": "2685040",
    "end": "2690720"
  },
  {
    "text": "how many satisfying assignments something has exactly or you can answer the question you know",
    "start": "2690720",
    "end": "2697040"
  },
  {
    "text": "does a formula have exactly a thousand satisfying assignments if you can do",
    "start": "2697040",
    "end": "2703680"
  },
  {
    "text": "that in general then you can solve co and p uh you can solve the unsatisfiability problem by asking with",
    "start": "2703680",
    "end": "2710079"
  },
  {
    "text": "zero satisfying assignments and that allows you to solve anything in cohen p",
    "start": "2710079",
    "end": "2716000"
  },
  {
    "text": "okay so we're gonna just work with this one problem the number set problem and show that that problem's in ip",
    "start": "2716000",
    "end": "2723839"
  },
  {
    "text": "okay let's take a quick break um",
    "start": "2723839",
    "end": "2730920"
  },
  {
    "text": "okay feel free to send me let me see if i can catch up with some of the questions that have been cropping up here so if the approver",
    "start": "2732960",
    "end": "2740000"
  },
  {
    "text": "knows the random choices of the verifier can it can flip the answer to make the verifier reject",
    "start": "2740000",
    "end": "2747280"
  },
  {
    "text": "not sure what that you mean in the context just of the graph isomorphism problem or um something in general i'm not sure",
    "start": "2747280",
    "end": "2755760"
  },
  {
    "text": "you'll have to explain sorry i'll respond with a question mark what else can i answer for you guys so i got a",
    "start": "2757040",
    "end": "2762720"
  },
  {
    "text": "question might if i p equals p space does that mean that iso or the or non-iso might be um",
    "start": "2762720",
    "end": "2771520"
  },
  {
    "text": "in might be p space complete but no that's not known",
    "start": "2771520",
    "end": "2777599"
  },
  {
    "text": "so we're about out of time",
    "start": "2777599",
    "end": "2781640"
  },
  {
    "text": "okay let's continue here [Music]",
    "start": "2793200",
    "end": "2800099"
  },
  {
    "start": "2800000",
    "end": "3192000"
  },
  {
    "text": "okay so this this is where we're kind of getting going to start to get into the meat of things um",
    "start": "2800880",
    "end": "2807030"
  },
  {
    "text": "[Music] and if you didn't quite understand everything up till now maybe just try to",
    "start": "2807030",
    "end": "2812960"
  },
  {
    "text": "keep your intuition about how do i you know how does a powerful party",
    "start": "2812960",
    "end": "2820319"
  },
  {
    "text": "convince a um a polynomial probabilistic polynomial time party",
    "start": "2820319",
    "end": "2826319"
  },
  {
    "text": "of the number of satisfying assignments exact number not",
    "start": "2826319",
    "end": "2832079"
  },
  {
    "text": "not at least but you won't know exactly the number um of satisfying assignments",
    "start": "2832079",
    "end": "2837359"
  },
  {
    "text": "um so it could be zero for example how do you convince that how do you convince",
    "start": "2837359",
    "end": "2843440"
  },
  {
    "text": "someone that there were zero assignments and and and you know you can have an interaction which does that and that's",
    "start": "2843440",
    "end": "2849440"
  },
  {
    "text": "not obvious at all how you're gonna do that um",
    "start": "2849440",
    "end": "2855760"
  },
  {
    "text": "uh all right so um",
    "start": "2856319",
    "end": "2861520"
  },
  {
    "text": "okay so we're gonna have to introduce some notation which i don't hope this doesn't",
    "start": "2862400",
    "end": "2868240"
  },
  {
    "text": "cause heartburn here uh so let's say",
    "start": "2868240",
    "end": "2873920"
  },
  {
    "text": "again here is the the computational the language we're working with number set",
    "start": "2873920",
    "end": "2879440"
  },
  {
    "text": "and we have a fee where that has m variables",
    "start": "2879440",
    "end": "2884720"
  },
  {
    "text": "x1 to xm now here's our notation i'm going to if i",
    "start": "2884720",
    "end": "2889839"
  },
  {
    "text": "write phi with this free phi of 0 that just means the formula that i get",
    "start": "2889839",
    "end": "2897200"
  },
  {
    "text": "by plugging in 0 for x one and leaving all the rest of the",
    "start": "2897200",
    "end": "2902400"
  },
  {
    "text": "variables uh alone okay so i substitute zero for x one",
    "start": "2902400",
    "end": "2908640"
  },
  {
    "text": "where zero means false and one means true as usual and but that's it's going it's still",
    "start": "2908640",
    "end": "2914160"
  },
  {
    "text": "going to be some other formula but just with that substitution if i write fee 0 1 that means i preset",
    "start": "2914160",
    "end": "2922319"
  },
  {
    "text": "the first two variables to 0 and 1. um if i write fee with",
    "start": "2922319",
    "end": "2929599"
  },
  {
    "text": "a bunch of preset values i'm just setting the first i variables x1 to xi to some values",
    "start": "2929599",
    "end": "2938480"
  },
  {
    "text": "and leaving the other variables as unset so i'm calling the ones that i'm",
    "start": "2939280",
    "end": "2945119"
  },
  {
    "text": "nailing in there as i'm already saying these are the presets okay so this is just converting some",
    "start": "2945119",
    "end": "2952160"
  },
  {
    "text": "formulas into other formulas that have somewhat fewer variables all right",
    "start": "2952160",
    "end": "2958640"
  },
  {
    "text": "now let's recall that number notation the number sign notation number fee is",
    "start": "2958640",
    "end": "2964240"
  },
  {
    "text": "the number of satisfying assignments now if i say number fee of 0 that's the number of satisfying",
    "start": "2964240",
    "end": "2970480"
  },
  {
    "text": "assignments when i've preset x1 to 0.",
    "start": "2970480",
    "end": "2976000"
  },
  {
    "text": "similarly if i preset the first i variables to some values",
    "start": "2977280",
    "end": "2982960"
  },
  {
    "text": "and then i take i want to think how many how many satisfying assignments subject",
    "start": "2982960",
    "end": "2988319"
  },
  {
    "text": "to those prefix presets i write it this way so i'm going to use this notation a lot",
    "start": "2988319",
    "end": "2993920"
  },
  {
    "text": "you have to understand this notation ask if you don't none if you don't get it so another way of writing it i don't know",
    "start": "2993920",
    "end": "2999520"
  },
  {
    "text": "if this is helpful but another way of writing number fee of a1 to a i",
    "start": "2999520",
    "end": "3004800"
  },
  {
    "text": "remember we have m variables all together that means i take the",
    "start": "3004800",
    "end": "3011520"
  },
  {
    "text": "variables which i have not yet preset um",
    "start": "3011520",
    "end": "3016960"
  },
  {
    "text": "and i allow them to range over all possible zeros and ones and i add up",
    "start": "3016960",
    "end": "3022160"
  },
  {
    "text": "the the formulas values for all of those so there's a one every time i satisfy and a",
    "start": "3022160",
    "end": "3029440"
  },
  {
    "text": "zero every time i don't satisfy so i'm adding up all the satisfying assignments subject to these i presets",
    "start": "3029440",
    "end": "3038240"
  },
  {
    "text": "okay so here are two critical facts about this",
    "start": "3039520",
    "end": "3044880"
  },
  {
    "text": "number sign notation first of all if i preset the first i values to",
    "start": "3044880",
    "end": "3051359"
  },
  {
    "text": "something now i can in addition set the next variable either to zero or",
    "start": "3051359",
    "end": "3059280"
  },
  {
    "text": "to one and i get this relationship",
    "start": "3059280",
    "end": "3064559"
  },
  {
    "text": "which is just simply a generalization of the fact that the total number of satisfying",
    "start": "3064559",
    "end": "3070000"
  },
  {
    "text": "assignments of the formula is equal to the number of satisfying assignments when x1 is 0 plus the number",
    "start": "3070000",
    "end": "3076960"
  },
  {
    "text": "of satisfying assignments when x1 is 1. right they together have to add up to",
    "start": "3076960",
    "end": "3082400"
  },
  {
    "text": "the total number because x1 is going to be the either zero or one so that's fact number one",
    "start": "3082400",
    "end": "3088480"
  },
  {
    "text": "fact number two is that if i preset everything all of the variables so there are no",
    "start": "3088480",
    "end": "3094480"
  },
  {
    "text": "variables left then the number of satisfying assignments subject to that preset",
    "start": "3094480",
    "end": "3101359"
  },
  {
    "text": "of everything is just whether or not i've satisfied the formula which is the value of the formula on that those",
    "start": "3101359",
    "end": "3107280"
  },
  {
    "text": "presets okay both two simple facts but it's going to",
    "start": "3107280",
    "end": "3112400"
  },
  {
    "text": "be critical in the protocol i'm about to describe",
    "start": "3112400",
    "end": "3116960"
  },
  {
    "text": "questions on this i think actually i do have a question for you",
    "start": "3118319",
    "end": "3125200"
  },
  {
    "text": "so let's just see what do you think",
    "start": "3125200",
    "end": "3131839"
  },
  {
    "text": "just to check your understanding okay got about 80",
    "start": "3132319",
    "end": "3139839"
  },
  {
    "text": "getting this um i'm not sure that's good but uh",
    "start": "3139839",
    "end": "3146799"
  },
  {
    "text": "all right almost done closing",
    "start": "3148240",
    "end": "3154078"
  },
  {
    "text": "okay okay so uh yes a is the correct answer",
    "start": "3155280",
    "end": "3161920"
  },
  {
    "text": "you know if if there are nine satisfying assignments all together and there are six satisfying assignments where the",
    "start": "3161920",
    "end": "3168480"
  },
  {
    "text": "first variable is set to zero then there's only three satisfying assignments with the first variable set",
    "start": "3168480",
    "end": "3174559"
  },
  {
    "text": "to one because nine has got to be equal to six plus three that's actually this fact number one",
    "start": "3174559",
    "end": "3182160"
  },
  {
    "text": "it's not going to be 15 this is not true either so it's just a",
    "start": "3182160",
    "end": "3189920"
  },
  {
    "text": "good okay okay so let's try to with with that knowledge let's try to",
    "start": "3190720",
    "end": "3197119"
  },
  {
    "start": "3192000",
    "end": "3599000"
  },
  {
    "text": "see how we can put number sat in ip so this is not going to quite work",
    "start": "3197119",
    "end": "3202880"
  },
  {
    "text": "but it's really going to set us up to do this to finish this next time",
    "start": "3202880",
    "end": "3208240"
  },
  {
    "text": "um so you might immediately see where this is going wrong but you'll",
    "start": "3208240",
    "end": "3216160"
  },
  {
    "text": "you'll have to put up with it because um the setup is what's important",
    "start": "3216160",
    "end": "3222400"
  },
  {
    "text": "um okay so understand now here's the here's the the setup we have",
    "start": "3222400",
    "end": "3228880"
  },
  {
    "text": "um the input is a formula and a number",
    "start": "3228880",
    "end": "3235520"
  },
  {
    "text": "where that number is supposed to be the number of satisfying assignments",
    "start": "3235520",
    "end": "3240720"
  },
  {
    "text": "you know it could be wrong and in which case we're not in the language um but if it's right you're in the",
    "start": "3240720",
    "end": "3247200"
  },
  {
    "text": "language so the approver is supposed to convince the verifier",
    "start": "3247200",
    "end": "3252880"
  },
  {
    "text": "that it's correct if it is correct and it's not gonna it's gonna fail no matter what it tries to do",
    "start": "3252880",
    "end": "3259440"
  },
  {
    "text": "if it's uh not correct so this is the approver is going",
    "start": "3259440",
    "end": "3265119"
  },
  {
    "text": "to send first of all um so so the proof is going to send a claim",
    "start": "3265119",
    "end": "3273359"
  },
  {
    "text": "about the number of satisfying assignments going to send when i say this value here",
    "start": "3273359",
    "end": "3280559"
  },
  {
    "text": "this is what the prover if it's honest is going to send the right value of course the verifier does",
    "start": "3280559",
    "end": "3286640"
  },
  {
    "text": "not know if the approver is honest but i'm describing how the honest",
    "start": "3286640",
    "end": "3291839"
  },
  {
    "text": "approver is going to operate and we'll have to understand what happens if the prover tries to cheat",
    "start": "3291839",
    "end": "3297920"
  },
  {
    "text": "so the proof is going to send the honest proof is going to send the number of satisfying assignments all together and the prover verifier just makes sure that",
    "start": "3298240",
    "end": "3304880"
  },
  {
    "text": "that matches up with the input if it doesn't match up with the input uh the verifier is just gonna",
    "start": "3304880",
    "end": "3310319"
  },
  {
    "text": "you know you know the the verifier is gonna not be convinced that the input is um in the language",
    "start": "3310319",
    "end": "3316880"
  },
  {
    "text": "so it's gonna just uh reject at that point",
    "start": "3316880",
    "end": "3321839"
  },
  {
    "text": "um okay uh then now the verifier says okay that was",
    "start": "3321920",
    "end": "3327440"
  },
  {
    "text": "very good that you sent me this how do i know that's right so what the verif prover is going to do",
    "start": "3327440",
    "end": "3333599"
  },
  {
    "text": "to try to convince the verifier that this value was correct",
    "start": "3333599",
    "end": "3338640"
  },
  {
    "text": "is uh unravel that by one level by say well you know there were nine satisfying",
    "start": "3338799",
    "end": "3345440"
  },
  {
    "text": "assignments all together uh six of them were when the when x one is zero and",
    "start": "3345440",
    "end": "3351839"
  },
  {
    "text": "three of them were when x one is one to verify what does the verify have to",
    "start": "3351839",
    "end": "3357760"
  },
  {
    "text": "check that these add up correctly when i preset x1",
    "start": "3357760",
    "end": "3363839"
  },
  {
    "text": "to zero and to one it had better add up to the total number of satisfying assignments",
    "start": "3363839",
    "end": "3370160"
  },
  {
    "text": "if that works out the verifier is happy is still being it's still consistent with being convinced that this k was the",
    "start": "3370160",
    "end": "3377440"
  },
  {
    "text": "right value um",
    "start": "3377440",
    "end": "3381839"
  },
  {
    "text": "so um the next step is well the verifier says well how do i know those two values are correct the",
    "start": "3382559",
    "end": "3390240"
  },
  {
    "text": "prover says okay well i'm going to prove send un unravel them one level further",
    "start": "3390240",
    "end": "3397520"
  },
  {
    "text": "then here's a number of satisfying assignments when the next variable is set to both possibilities for each of",
    "start": "3397599",
    "end": "3403359"
  },
  {
    "text": "the possibilities of the first variable now if you're",
    "start": "3403359",
    "end": "3409119"
  },
  {
    "text": "understanding me about what the prover is sending you should start to be getting a little nervous",
    "start": "3409119",
    "end": "3415520"
  },
  {
    "text": "because something is i mean this is going to be correct but it's going to start it looks like",
    "start": "3415520",
    "end": "3422000"
  },
  {
    "text": "it's starting to blow up in terms of the number of amount of work that's involved and that's actually a problem",
    "start": "3422000",
    "end": "3428640"
  },
  {
    "text": "but let's bear with that for the moment let's just worry about correctness not about complexity for the moment",
    "start": "3428640",
    "end": "3436720"
  },
  {
    "text": "so the proof is going to now send the number of satisfying assignments for each of those four possible ways of",
    "start": "3437200",
    "end": "3443839"
  },
  {
    "text": "presetting the first two variables and the verifier is going to check that that was consistent with the information",
    "start": "3443839",
    "end": "3450079"
  },
  {
    "text": "the prover sent in the previous round right by again checking this identity",
    "start": "3450079",
    "end": "3456640"
  },
  {
    "text": "here so then the proof is going to continue on doing that until it's got it's done that",
    "start": "3456640",
    "end": "3462720"
  },
  {
    "text": "through m rounds where m is the number of variables so at this point",
    "start": "3462720",
    "end": "3467920"
  },
  {
    "text": "the proof is going to send all possible ways of presetting all of",
    "start": "3467920",
    "end": "3474799"
  },
  {
    "text": "the variables so that now there's two to the m possibilities here",
    "start": "3474799",
    "end": "3480000"
  },
  {
    "text": "again this is hopelessly not allowed but okay ignoring that",
    "start": "3480000",
    "end": "3486079"
  },
  {
    "text": "the proofer's got to use this at the nth round to check what happens at the at the previous round so that's when they",
    "start": "3486079",
    "end": "3492240"
  },
  {
    "text": "were m minus one values sent because each one has one more",
    "start": "3492240",
    "end": "3498319"
  },
  {
    "text": "uh uh you're extending the presets by one so which using this to check that the",
    "start": "3498319",
    "end": "3504400"
  },
  {
    "text": "previous round was the values were correct so it's looking for um",
    "start": "3504400",
    "end": "3510160"
  },
  {
    "text": "you know the m minus one presets have to add up correctly um you know in",
    "start": "3510160",
    "end": "3517680"
  },
  {
    "text": "terms of the m the presets of m uh values uh for each of those ways of uh doing",
    "start": "3517680",
    "end": "3523760"
  },
  {
    "text": "those uh m minus one presets and so now the provers send all of those",
    "start": "3523760",
    "end": "3528799"
  },
  {
    "text": "two to the m counts which are by the way ones and",
    "start": "3528799",
    "end": "3533920"
  },
  {
    "text": "zeros because at this point we have preset all of the values of the variables and so there's",
    "start": "3533920",
    "end": "3540960"
  },
  {
    "text": "only one possible assignment at most that there can be",
    "start": "3540960",
    "end": "3546880"
  },
  {
    "text": "and now the verifier the approver is done the verifier is going to check",
    "start": "3547760",
    "end": "3553839"
  },
  {
    "text": "by itself that these values make sense that these values are correct",
    "start": "3553839",
    "end": "3560960"
  },
  {
    "text": "so it's going to do that by looking back at the formula so far up at this point the verifier has",
    "start": "3560960",
    "end": "3566880"
  },
  {
    "text": "not been looking at the formula it's just been checking the internal consistency of the provers messages with",
    "start": "3566880",
    "end": "3573040"
  },
  {
    "text": "each other but now at the end the verifier is going to take the messages these these values",
    "start": "3573040",
    "end": "3578880"
  },
  {
    "text": "that the approver sent for each of the two to the m presets and see if it matches up with what the formula would",
    "start": "3578880",
    "end": "3584640"
  },
  {
    "text": "do remember that was the other sort of the base case of the the end the fact number two",
    "start": "3584640",
    "end": "3592160"
  },
  {
    "text": "um from the uh slider to ago make sure that these agree",
    "start": "3592160",
    "end": "3598880"
  },
  {
    "text": "okay and now the verifier says well okay if everything has checked out and all of",
    "start": "3599680",
    "end": "3605119"
  },
  {
    "text": "these are are in agreement then the verifier is",
    "start": "3605119",
    "end": "3610240"
  },
  {
    "text": "going to be convinced that um that uh fee had k satisfying assignments",
    "start": "3610240",
    "end": "3619599"
  },
  {
    "text": "but if anywhere along the way one of these checks fails the approver is not the verifier is not",
    "start": "3619599",
    "end": "3624799"
  },
  {
    "text": "going to be convinced and is going to reject",
    "start": "3624799",
    "end": "3629319"
  },
  {
    "text": "okay so in a sense this is kind of dopey you know you know we've just i'm just kind of giving you a",
    "start": "3631280",
    "end": "3636720"
  },
  {
    "text": "complicated way of just counting up one by one each of the satisfying",
    "start": "3636720",
    "end": "3642000"
  },
  {
    "text": "assignments of the formula and seeing if that matches k",
    "start": "3642000",
    "end": "3647359"
  },
  {
    "text": "but nevertheless this way of looking at it is gonna be",
    "start": "3651680",
    "end": "3657119"
  },
  {
    "text": "uh help us to understand um the way to fix this so",
    "start": "3657119",
    "end": "3663520"
  },
  {
    "text": "so bear with me for another minute on this one so another way of looking at this which i",
    "start": "3663520",
    "end": "3669440"
  },
  {
    "text": "think is is particularly useful is to think of",
    "start": "3669440",
    "end": "3674960"
  },
  {
    "text": "what happens well okay we'll get there in a second i want to",
    "start": "3675200",
    "end": "3681440"
  },
  {
    "text": "look at what happens if k was wrong but before i do that let's look at the i'm going to give a kind of a graphic a",
    "start": "3681440",
    "end": "3688400"
  },
  {
    "text": "graphical view of um the information that the prover sends",
    "start": "3688400",
    "end": "3694480"
  },
  {
    "text": "and the and the verifiers actions in this protocol so the the values that the",
    "start": "3694480",
    "end": "3699760"
  },
  {
    "text": "prover sending are going to be in yellow so the and the information that the verifier",
    "start": "3699760",
    "end": "3706000"
  },
  {
    "text": "has or checks is going to be in white so the the verifier has the k the the",
    "start": "3706000",
    "end": "3713040"
  },
  {
    "text": "input value which is supposed to be the number of satisfying assignments and the prover",
    "start": "3713040",
    "end": "3718960"
  },
  {
    "text": "sends some value and the verifier checks that this value which is supposed to be",
    "start": "3718960",
    "end": "3725359"
  },
  {
    "text": "the number of satisfying assignments corresponds with k so that's one of the checks it does",
    "start": "3725359",
    "end": "3730799"
  },
  {
    "text": "then the approver is going to send kind of take to justify this value it",
    "start": "3730799",
    "end": "3736000"
  },
  {
    "text": "um sends the number of satisfying assignments when you have",
    "start": "3736000",
    "end": "3741280"
  },
  {
    "text": "x1 set to zero or set to one the verify adds those up to give you",
    "start": "3741280",
    "end": "3748079"
  },
  {
    "text": "and it's supposed to equal the total number of satisfying assignments and so this is if you understood this protocol",
    "start": "3748079",
    "end": "3753760"
  },
  {
    "text": "this is just i'm writing it out in a sort of a simplified way perhaps",
    "start": "3753760",
    "end": "3760000"
  },
  {
    "text": "okay and so um keeps checking that these things add up correctly until you get down to",
    "start": "3760000",
    "end": "3768000"
  },
  {
    "text": "setting all m values in all two to the impossible ways and now the verifier is",
    "start": "3768000",
    "end": "3773440"
  },
  {
    "text": "going to then check to make sure that that equals the what the formula would say",
    "start": "3773440",
    "end": "3780880"
  },
  {
    "text": "um okay okay so now let's what happens",
    "start": "3780880",
    "end": "3788799"
  },
  {
    "text": "if k was the wrong value",
    "start": "3788799",
    "end": "3793280"
  },
  {
    "text": "it did not agree with the number of satisfying assignments",
    "start": "3794000",
    "end": "3798880"
  },
  {
    "text": "um and what does what happens now um",
    "start": "3799200",
    "end": "3809000"
  },
  {
    "text": "could the prover what happens if the approver tries to make the verifier accept anyway",
    "start": "3810799",
    "end": "3817440"
  },
  {
    "text": "so um so the only thing the prover can do at the very first step would be to lie",
    "start": "3817440",
    "end": "3826319"
  },
  {
    "text": "um about you know if the approver sends the if k is wrong",
    "start": "3826319",
    "end": "3831520"
  },
  {
    "text": "and the proof approver sends the correct value for the the the total count the verifier is",
    "start": "3831520",
    "end": "3837920"
  },
  {
    "text": "going to reject so i'm trying to see is it could the approver try to make the",
    "start": "3837920",
    "end": "3843520"
  },
  {
    "text": "verifier accept what what happens so the prover has to lie here and i'm",
    "start": "3843520",
    "end": "3848880"
  },
  {
    "text": "going to indicate that by saying the approver is sending in the wrong value",
    "start": "3848880",
    "end": "3855599"
  },
  {
    "text": "for um uh the the total count",
    "start": "3855599",
    "end": "3861119"
  },
  {
    "text": "well if the proof is going to lie here um then",
    "start": "3861119",
    "end": "3867359"
  },
  {
    "text": "just like you know if you you know you have a child who um",
    "start": "3867359",
    "end": "3873440"
  },
  {
    "text": "tells a lie and then you start you know as the parent you start asking questions to try to",
    "start": "3873440",
    "end": "3878480"
  },
  {
    "text": "see if the story is consistent one lie is going to lead to another lie",
    "start": "3878480",
    "end": "3883920"
  },
  {
    "text": "um and that's what happens here if the uh in order to justify this lie",
    "start": "3883920",
    "end": "3891119"
  },
  {
    "text": "um the proof is going to have to a lie in one or perhaps both but at least one",
    "start": "3891119",
    "end": "3896160"
  },
  {
    "text": "of these two values because you can't have the two correct values adding up to the incorrect value",
    "start": "3896160",
    "end": "3903760"
  },
  {
    "text": "because you have to think about what's going on here so if this is a lie that's going to force a lie",
    "start": "3904799",
    "end": "3910319"
  },
  {
    "text": "at one of one side of the other one level down which is then going to force a lie",
    "start": "3910319",
    "end": "3915359"
  },
  {
    "text": "to propagate down and so there's a lie at every stage is going to force a lie at least in one",
    "start": "3915359",
    "end": "3921440"
  },
  {
    "text": "one place or another to propagate all the way down to the bottom and then at the bottom the verifier will",
    "start": "3921440",
    "end": "3930319"
  },
  {
    "text": "see that the check doesn't work as when it turns when it tries to connect it up with the formula itself",
    "start": "3930319",
    "end": "3937119"
  },
  {
    "text": "and the form verifier will reject okay so just a way of looking at this",
    "start": "3937119",
    "end": "3945119"
  },
  {
    "text": "um if the form if the value if the input was not in the language",
    "start": "3945119",
    "end": "3951839"
  },
  {
    "text": "um so uh but the problem is that as i said that this is exponential",
    "start": "3952079",
    "end": "3958640"
  },
  {
    "text": "so how are we going to fix that so just looking ahead to what we're going to do on tuesday",
    "start": "3958640",
    "end": "3965359"
  },
  {
    "text": "okay let's see if there's any questions here first of all",
    "start": "3965440",
    "end": "3970400"
  },
  {
    "text": "uh okay yes i got a question should this be",
    "start": "3973599",
    "end": "3979200"
  },
  {
    "text": "uh",
    "start": "3979200",
    "end": "3981440"
  },
  {
    "text": "should this be a minus i i purposely made this bracket only go not include the very last zero yeah",
    "start": "3984960",
    "end": "3991520"
  },
  {
    "text": "there's a total of m zeroes here all together but the i left out the last zero that's why i said n minus one maybe it would have",
    "start": "3991520",
    "end": "3998000"
  },
  {
    "text": "been better to say m",
    "start": "3998000",
    "end": "4001799"
  },
  {
    "text": "okay so and you got another interesting question here why can't we reject right away if k is wrong",
    "start": "4006640",
    "end": "4012240"
  },
  {
    "text": "um uh well the verifier is probabilistic polynomial",
    "start": "4012240",
    "end": "4018880"
  },
  {
    "text": "time how does the verifier know if k is wrong",
    "start": "4018880",
    "end": "4023599"
  },
  {
    "text": "um so it means or or or right so what we're trying to do is something",
    "start": "4025200",
    "end": "4031680"
  },
  {
    "text": "like you know like np where we have a certificate but now we have this kind of interactive certificate in the form of",
    "start": "4031680",
    "end": "4037520"
  },
  {
    "text": "disprover maybe that's another way to look at it um",
    "start": "4037520",
    "end": "4042640"
  },
  {
    "text": "where if you're in the language there should be some way for the prover to convince to get make you accept but if",
    "start": "4042640",
    "end": "4048079"
  },
  {
    "text": "you're not not in the language there should be no way for the proverb to make you accept um",
    "start": "4048079",
    "end": "4054640"
  },
  {
    "text": "uh so the verifier just can't reject right away because there's no way",
    "start": "4054640",
    "end": "4059680"
  },
  {
    "text": "to tell how does the verifier know it's going to start rejecting things when it shouldn't if it's just going to be rejecting willy-nilly here",
    "start": "4059680",
    "end": "4065680"
  },
  {
    "text": "um okay how does the verifier need to determine if the prover is",
    "start": "4065680",
    "end": "4070880"
  },
  {
    "text": "internally consistent instead of just asking",
    "start": "4070880",
    "end": "4075640"
  },
  {
    "text": "so why does the verifier need to determine if the approver is internally consistent instead of just asking the",
    "start": "4077520",
    "end": "4082799"
  },
  {
    "text": "questions in step n plus one yeah so maybe that's",
    "start": "4082799",
    "end": "4088960"
  },
  {
    "text": "because it looks like all of the work is happening at the very end um",
    "start": "4088960",
    "end": "4094400"
  },
  {
    "text": "but i'm really presenting this to you as a preparation",
    "start": "4094400",
    "end": "4100318"
  },
  {
    "text": "for what we're going to do on tuesday um so it's important to think about the",
    "start": "4100319",
    "end": "4105600"
  },
  {
    "text": "connection from each step to the next each step is going to be justified by",
    "start": "4105600",
    "end": "4110719"
  },
  {
    "text": "what happens at the next step until we get to the very end so you have to just understand it for",
    "start": "4110719",
    "end": "4116560"
  },
  {
    "text": "what it is don't try to make it more efficient yeah i realize this is kind of dumb",
    "start": "4116560",
    "end": "4122400"
  },
  {
    "text": "um good point we're not using the probabilism here um",
    "start": "4122400",
    "end": "4127679"
  },
  {
    "text": "and moreover we're not really even using the interaction here the prover is doing all the sending the verifier is just",
    "start": "4127679",
    "end": "4134318"
  },
  {
    "text": "accepting at the end yeah this is we're not using the power and we're getting a weaker result so let's",
    "start": "4134319",
    "end": "4140080"
  },
  {
    "text": "move on before we run out of time here so how do we gonna fix this",
    "start": "4140080",
    "end": "4145440"
  },
  {
    "text": "so the problem is is blowing up each to justify each stage where",
    "start": "4145440",
    "end": "4151440"
  },
  {
    "text": "each value we're um needing to present two values which add",
    "start": "4151440",
    "end": "4157838"
  },
  {
    "text": "up to it um and that's uh good leading to a blow up",
    "start": "4157839",
    "end": "4165679"
  },
  {
    "text": "now it would be nice if we can do something where each value was supported by just a single value",
    "start": "4165679",
    "end": "4173199"
  },
  {
    "text": "at the next level so we know here's an idea well you know",
    "start": "4173199",
    "end": "4179199"
  },
  {
    "text": "in order to understand to see that uh that that this total count is correct",
    "start": "4179199",
    "end": "4184640"
  },
  {
    "text": "why don't we just pick at random either zero or one and only follow that one down",
    "start": "4184640",
    "end": "4190318"
  },
  {
    "text": "well the problem with doing that is because the the",
    "start": "4190319",
    "end": "4195679"
  },
  {
    "text": "the sequence of lies is could be just a single path through this uh tree",
    "start": "4195679",
    "end": "4201360"
  },
  {
    "text": "and the chances you're going to find that path down to a contradiction at the bottom is very low if you're just doing it at",
    "start": "4201360",
    "end": "4207440"
  },
  {
    "text": "random um so just randomly picking zeros and",
    "start": "4207440",
    "end": "4213600"
  },
  {
    "text": "ones as as the as the one you're going to justify used to justify the previous",
    "start": "4213600",
    "end": "4218800"
  },
  {
    "text": "value is not going to be good enough so what but this is what we're going to do",
    "start": "4218800",
    "end": "4224159"
  },
  {
    "text": "however the values that we're going to pick for um for these random",
    "start": "4224159",
    "end": "4230560"
  },
  {
    "text": "um inputs are not going to be boolean values we're going to pick",
    "start": "4230560",
    "end": "4236480"
  },
  {
    "text": "non-boolean assignments to the variables which again just as with the branching",
    "start": "4236480",
    "end": "4242480"
  },
  {
    "text": "program case didn't make any sense on the surface of it we're going to have",
    "start": "4242480",
    "end": "4247760"
  },
  {
    "text": "to make it make sense and we'll have to see how to do that on tues",
    "start": "4247760",
    "end": "4253120"
  },
  {
    "text": "in tuesday's lecture okay so that's kind of the setup",
    "start": "4253120",
    "end": "4261040"
  },
  {
    "text": "okay um",
    "start": "4261840",
    "end": "4266080"
  },
  {
    "text": "yeah so in a similar question why is this any different from just non-deterministically guessing the",
    "start": "4268880",
    "end": "4274719"
  },
  {
    "text": "assignments it's because of this we're really setting the stage",
    "start": "4274719",
    "end": "4279840"
  },
  {
    "text": "okay so what we did today was we introduced them the the model and defined the complexity class",
    "start": "4279840",
    "end": "4286400"
  },
  {
    "text": "we can we did show this one in its full glory we showed that non-iso is an",
    "start": "4286400",
    "end": "4292080"
  },
  {
    "text": "ip really worth understanding this uh protocol here making sure you",
    "start": "4292080",
    "end": "4298719"
  },
  {
    "text": "you're comfortable with that and and also the the model itself",
    "start": "4298719",
    "end": "4304239"
  },
  {
    "text": "and so for tuesday's lecture we're going to finish this up uh well we started showing that number set as an ip which",
    "start": "4304239",
    "end": "4310320"
  },
  {
    "text": "is what we need to to do to prove co-np is an ip and we'll finish that",
    "start": "4310320",
    "end": "4316960"
  },
  {
    "text": "next time which will be our last time okay so that's it for today",
    "start": "4316960",
    "end": "4323199"
  },
  {
    "text": "i'll stick around for questions so a good question here why can't um",
    "start": "4323199",
    "end": "4330080"
  },
  {
    "text": "v just reject if some of the checks are incorrect yes v could as soon as",
    "start": "4330080",
    "end": "4336800"
  },
  {
    "text": "there's a check that fails we can just reject at that stage i'm just trying to argue that at some",
    "start": "4336800",
    "end": "4343040"
  },
  {
    "text": "point along the way if the input is not in the language there's going to be a check that fails",
    "start": "4343040",
    "end": "4349760"
  },
  {
    "text": "so i mean i said reject at the end but yeah i mean you could have rejected at any point",
    "start": "4349760",
    "end": "4356000"
  },
  {
    "text": "along the way um",
    "start": "4356000",
    "end": "4361280"
  },
  {
    "text": "okay",
    "start": "4362880",
    "end": "4365198"
  },
  {
    "text": "um someone's asking for what what role did i play uh so i did",
    "start": "4368840",
    "end": "4374480"
  },
  {
    "text": "my my own personal role in this i were to which was twofold first of all i i came up with the idea",
    "start": "4374480",
    "end": "4381120"
  },
  {
    "text": "uh of well not the idea i came up with the name interactive proof uh",
    "start": "4381120",
    "end": "4386719"
  },
  {
    "text": "i remember when sylvia mccauley was explaining this to me in my apartment many many years ago he had a kind of a",
    "start": "4386719",
    "end": "4395678"
  },
  {
    "text": "little bit complicated and i don't even remember what the protocol was for it was not for something simple was something involving uh prime numbers",
    "start": "4396640",
    "end": "4403840"
  },
  {
    "text": "and i said oh that's a kind of an interactive proof and it's and it it stuck from that point",
    "start": "4403840",
    "end": "4409360"
  },
  {
    "text": "on so um that was one thing but the other thing in terms of more mathematically",
    "start": "4409360",
    "end": "4415679"
  },
  {
    "text": "i my role was so uh shafi goldwater and i approved the equivalence of the two models the public",
    "start": "4415679",
    "end": "4422880"
  },
  {
    "text": "coin and the private coin version um so that that was uh",
    "start": "4422880",
    "end": "4428960"
  },
  {
    "text": "my uh my role in this back and when this was all first coming out",
    "start": "4428960",
    "end": "4434880"
  },
  {
    "text": "approved it approved it on an airplane on the way to a conference somewhere so i think we're going to",
    "start": "4434880",
    "end": "4441600"
  },
  {
    "text": "notice any other questions i think we'll head out take care everybody see one",
    "start": "4441600",
    "end": "4447520"
  },
  {
    "text": "see you on tuesday bye bye",
    "start": "4447520",
    "end": "4452840"
  },
  {
    "text": "you",
    "start": "4469600",
    "end": "4471679"
  }
]