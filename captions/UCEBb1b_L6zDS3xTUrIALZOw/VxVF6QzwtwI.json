[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "Now let's figure out how to implement semaphores.",
    "start": "900",
    "end": "4220"
  },
  {
    "text": "They are themselves shared data and implementing\nthe WAIT and SIGNAL operations will require",
    "start": "4220",
    "end": "10240"
  },
  {
    "text": "read/modify/write sequences that must be executed\nas critical sections.",
    "start": "10240",
    "end": "15389"
  },
  {
    "text": "Normally we'd use a lock semaphore to implement\nthe mutual exclusion constraint for critical",
    "start": "15389",
    "end": "19869"
  },
  {
    "text": "sections.",
    "start": "19869",
    "end": "20869"
  },
  {
    "text": "But obviously we can't use semaphores to implement\nsemaphores!",
    "start": "20869",
    "end": "25258"
  },
  {
    "text": "We have what's called a bootstrapping problem:\nwe need to implement the required functionality",
    "start": "25259",
    "end": "29980"
  },
  {
    "text": "from scratch.",
    "start": "29980",
    "end": "31710"
  },
  {
    "text": "Happily, if we're running on a timeshared\nprocessor with an uninterruptible OS kernel,",
    "start": "31710",
    "end": "37820"
  },
  {
    "text": "we can use the supervisor call (SVC) mechanism\nto implement the required functionality.",
    "start": "37820",
    "end": "42600"
  },
  {
    "text": "We can also extend the ISA to include a special\ntest-and-set instruction that will let us",
    "start": "42600",
    "end": "47860"
  },
  {
    "text": "implement a simple lock semaphore,\nwhich can then be used to protect critical",
    "start": "47860",
    "end": "52420"
  },
  {
    "text": "sections that implement more complex semaphore\nsemantics.",
    "start": "52420",
    "end": "57059"
  },
  {
    "text": "Single instructions are inherently atomic\nand, in a multi-core processor, will do what",
    "start": "57060",
    "end": "62150"
  },
  {
    "text": "we want if the shared main memory supports\nreading the old value and writing a new value",
    "start": "62150",
    "end": "66970"
  },
  {
    "text": "to a specific memory location as a single\nmemory access.",
    "start": "66970",
    "end": "72310"
  },
  {
    "text": "There are other, more complex, software-only\nsolutions that rely only on the atomicity",
    "start": "72310",
    "end": "77110"
  },
  {
    "text": "of individual reads and writes to implement\na simple lock.",
    "start": "77110",
    "end": "80370"
  },
  {
    "text": "For example, see \"Dekker's Algorithm\" on Wikipedia.",
    "start": "80370",
    "end": "83600"
  },
  {
    "text": "We'll look in more detail at the first two\napproaches.",
    "start": "83600",
    "end": "86650"
  },
  {
    "text": "Here are the OS handlers for the WAIT and\nSIGNAL supervisor calls.",
    "start": "86650",
    "end": "91700"
  },
  {
    "start": "87000",
    "end": "87000"
  },
  {
    "text": "Since SVCs are run kernel mode, they can't\nbe interrupted, so the handler code is naturally",
    "start": "91700",
    "end": "98039"
  },
  {
    "text": "executed as a critical section.",
    "start": "98040",
    "end": "101380"
  },
  {
    "text": "Both handlers expect the address of the semaphore\nlocation to be passed as an argument in the",
    "start": "101380",
    "end": "106409"
  },
  {
    "text": "user's R0.",
    "start": "106409",
    "end": "109090"
  },
  {
    "text": "The WAIT handler checks the semaphore's value\nand if it's non-zero, the value is decremented",
    "start": "109090",
    "end": "113990"
  },
  {
    "text": "and the handler resumes execution of the user's\nprogram at the instruction following the WAIT",
    "start": "113990",
    "end": "118939"
  },
  {
    "text": "SVC.",
    "start": "118940",
    "end": "119940"
  },
  {
    "text": "If the semaphore is 0, the code arranges to\nre-execute the WAIT SVC when the user program",
    "start": "119940",
    "end": "125650"
  },
  {
    "text": "resumes execution and then calls SLEEP to\nmark the process as inactive until the corresponding",
    "start": "125650",
    "end": "132569"
  },
  {
    "text": "WAKEUP call is made.",
    "start": "132569",
    "end": "135660"
  },
  {
    "text": "The SIGNAL handler is simpler: it increments\nthe semaphore value and calls WAKEUP to mark",
    "start": "135660",
    "end": "140549"
  },
  {
    "text": "as active any processes that were WAITing\nfor this particular semaphore.",
    "start": "140549",
    "end": "146830"
  },
  {
    "text": "Eventually the round-robin scheduler will\nselect a process that was WAITing and it will",
    "start": "146830",
    "end": "150700"
  },
  {
    "text": "be able to decrement the semaphore and proceed.",
    "start": "150700",
    "end": "154299"
  },
  {
    "text": "Note that the code makes no provision for\nfairness, i.e., there's no guarantee that",
    "start": "154299",
    "end": "159030"
  },
  {
    "text": "a WAITing process will eventually succeed\nin finding the semaphore non-zero.",
    "start": "159030",
    "end": "164400"
  },
  {
    "text": "The scheduler has a specific order in which\nit runs processes, so the next-in-sequence",
    "start": "164400",
    "end": "169430"
  },
  {
    "text": "WAITing process will always get the semaphore\neven if there are later-in-sequence processes",
    "start": "169430",
    "end": "174769"
  },
  {
    "text": "that have been WAITing longer.",
    "start": "174769",
    "end": "177870"
  },
  {
    "text": "If fairness is desired, WAIT could maintain\na queue of waiting processes and use the queue",
    "start": "177870",
    "end": "182028"
  },
  {
    "text": "to determine which process is next in line,\nindependent of scheduling order.",
    "start": "182029",
    "end": "187840"
  },
  {
    "text": "Many ISAs support an instruction like the\nTEST-and-CLEAR instruction shown here.",
    "start": "187840",
    "end": "193420"
  },
  {
    "start": "188000",
    "end": "188000"
  },
  {
    "text": "The TCLR instruction reads the current value\nof a memory location and then sets it to zero,",
    "start": "193420",
    "end": "198999"
  },
  {
    "text": "all as a single operation.",
    "start": "198999",
    "end": "201319"
  },
  {
    "text": "It's like a LD except that it zeros the memory\nlocation after reading its value.",
    "start": "201319",
    "end": "206769"
  },
  {
    "text": "To implement TCLR, the memory needs to support\nread-and-clear operations, as well as normal",
    "start": "206769",
    "end": "211730"
  },
  {
    "text": "reads and writes.",
    "start": "211730",
    "end": "213680"
  },
  {
    "text": "The assembly code at the bottom of the slide\nshows how to use TCLR to implement a simple",
    "start": "213680",
    "end": "217778"
  },
  {
    "text": "lock.",
    "start": "217779",
    "end": "219540"
  },
  {
    "text": "The program uses TCLR to access the value\nof the lock semaphore.",
    "start": "219540",
    "end": "223969"
  },
  {
    "text": "If the returned value in RC is zero, then\nsome other process has the lock and the program",
    "start": "223969",
    "end": "229590"
  },
  {
    "text": "loops to try TCLR again.",
    "start": "229590",
    "end": "232930"
  },
  {
    "text": "If the returned value is non-zero, the lock\nhas been acquired and execution of the critical",
    "start": "232930",
    "end": "237939"
  },
  {
    "text": "section can proceed.",
    "start": "237939",
    "end": "240299"
  },
  {
    "text": "In this case, TCLR has also set the lock to\nzero, so that other processes will be prevented",
    "start": "240299",
    "end": "245778"
  },
  {
    "text": "from entering the critical section.",
    "start": "245779",
    "end": "248779"
  },
  {
    "text": "When the critical section has finished executing,\na ST instruction is used to set the semaphore",
    "start": "248779",
    "end": "253890"
  },
  {
    "text": "to a non-zero value.",
    "start": "253890",
    "end": "255420"
  }
]