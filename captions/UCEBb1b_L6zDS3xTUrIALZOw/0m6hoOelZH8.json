[
  {
    "start": "0",
    "end": "15314"
  },
  {
    "text": "PROFESSOR: Well today we're\ngoing to learn about something quite amazing. We're going to understand what\nwe mean by a program a little",
    "start": "15314",
    "end": "22950"
  },
  {
    "text": "bit more profoundly than\nwe have up till now. Up till now, we've been thinking\nof programs as",
    "start": "22950",
    "end": "30650"
  },
  {
    "text": "describing machines. So for example, looking at this\nstill store, we see here",
    "start": "30650",
    "end": "38800"
  },
  {
    "text": "is a program for factorial. And what it is, is a character\nstring description, if you",
    "start": "38800",
    "end": "46970"
  },
  {
    "text": "will, of the wiring\ndiagram of a potentially infinite machine.",
    "start": "46970",
    "end": "52230"
  },
  {
    "text": "And we can look at that\na little bit and just see the idea. That this is a sort of compact\nnotation which says, if n is",
    "start": "52230",
    "end": "58950"
  },
  {
    "text": "0, the result is one. Well here comes n coming into\nthis machine, and if it's 0, then I control this switch in\nsuch a way that the switch",
    "start": "58950",
    "end": "66720"
  },
  {
    "text": "allows the output to be one. Otherwise, it's n times\nfactorial of n minus one.",
    "start": "66720",
    "end": "72969"
  },
  {
    "text": "Well, I'm computing factorial of\nn minus one and multiplying that by n, and, in the case that\nit's not 0, this switch",
    "start": "72970",
    "end": "79350"
  },
  {
    "text": "makes the output come\nfrom there. Of course, this is a machine\nwith a potentially infinite",
    "start": "79350",
    "end": "84460"
  },
  {
    "text": "number of parts, because\nfactorial occurs within factorial, so we don't know\nhow deep it has to be.",
    "start": "84460",
    "end": "91070"
  },
  {
    "text": "But that's basically what our\nnotation for programs really",
    "start": "91070",
    "end": "96479"
  },
  {
    "text": "means to us at this point. It's a character string\ndescription, if you will, of a",
    "start": "96480",
    "end": "101810"
  },
  {
    "text": "wiring diagram that could also\nbe drawn some other way. And, in fact, many people have\nproposed to me, programming",
    "start": "101810",
    "end": "107520"
  },
  {
    "text": "languages look graphical\nlike this. I'm not sure I believe there\nare many advantages. The major disadvantage, of\ncourse, is that it takes up",
    "start": "107520",
    "end": "114470"
  },
  {
    "text": "more space on a page, and,\ntherefore, it's harder to pack into a listing or to\nedit very well.",
    "start": "114470",
    "end": "121090"
  },
  {
    "text": "But in any case, there's\nsomething very remarkable that can happen in the competition\nworld which is that you can",
    "start": "121090",
    "end": "128810"
  },
  {
    "text": "have something called\na universal machine. If we look at the second\nslide, what we see is a",
    "start": "128810",
    "end": "138340"
  },
  {
    "text": "special machine called eval. There is a machine called eval,\nand I'm going to show it",
    "start": "138340",
    "end": "143670"
  },
  {
    "text": "to you today. It's very simple. What is remarkable is that it\nwill fit on the blackboard.",
    "start": "143670",
    "end": "150490"
  },
  {
    "text": " However, eval is a machine\nwhich takes as input a",
    "start": "150490",
    "end": "158310"
  },
  {
    "text": "description of another\nmachine. It could take the wiring\ndiagram of a factorial machine as input.",
    "start": "158310",
    "end": "166489"
  },
  {
    "text": "Having done so, it becomes a\nsimulator for the factorial",
    "start": "166490",
    "end": "172020"
  },
  {
    "text": "machine such that, if you put\na six in, out comes a 720.",
    "start": "172020",
    "end": "178910"
  },
  {
    "text": "That's a very remarkable\nsort of machine. And the most amazing part of\nit is that it fits on a",
    "start": "178910",
    "end": "184560"
  },
  {
    "text": "blackboard. By contrast, one could imagine\nin the analog electronics",
    "start": "184560",
    "end": "190069"
  },
  {
    "text": "world a very different machine,\na machine which also",
    "start": "190070",
    "end": "197180"
  },
  {
    "text": "was, in some sense, universal,\nwhere you gave a circuit diagram as one of the inputs,\nfor example, of this little",
    "start": "197180",
    "end": "204830"
  },
  {
    "text": "low-pass filter, one-pole\nlow-pass filter. And you can imagine that\nyou could, for",
    "start": "204830",
    "end": "210230"
  },
  {
    "text": "example, scan this out-- the scan lines are the signal\nthat's describing what this",
    "start": "210230",
    "end": "217950"
  },
  {
    "text": "machine is to simulate-- then the analog of that which\nis made out of electrical",
    "start": "217950",
    "end": "223040"
  },
  {
    "text": "circuits, should configure\nitself into a filter that has the frequency response\nspecified by the circuit diagram.",
    "start": "223040",
    "end": "229890"
  },
  {
    "text": "That's a very hard machine to\nmake, and, surely, there's no chance that I could put\nit on a blackboard.",
    "start": "229890",
    "end": "235670"
  },
  {
    "text": "So we're going to see an\namazing thing today. We're going to see,\non the blackboard,",
    "start": "235670",
    "end": "241239"
  },
  {
    "text": "the universal machine. And we'll see that among other\nthings, it's extremely simple.",
    "start": "241240",
    "end": "246780"
  },
  {
    "text": "Now, we're getting very close\nto the real spirit in the computer at this point. So I have to show a certain\namount of reverence and",
    "start": "246780",
    "end": "254110"
  },
  {
    "text": "respect, so I'm going to wear\na suit jacket for the only time that you'll ever see me\nwear a suit jacket here.",
    "start": "254110",
    "end": "260470"
  },
  {
    "text": "And I think I'm also going to\nput on an appropriate hat for",
    "start": "260470",
    "end": "265730"
  },
  {
    "text": "the occasion.  Now, this is a lecturer which\nI have to warn you--",
    "start": "265730",
    "end": "271389"
  },
  {
    "text": " let's see, normally, people\nunder 40 and who don't have",
    "start": "271390",
    "end": "277690"
  },
  {
    "text": "several children are advised\nto be careful. If they're really worried, they\nshould leave. Because",
    "start": "277690",
    "end": "284169"
  },
  {
    "text": "there's a certain amount of\nmysticism that will appear here which may be disturbing\nand cause",
    "start": "284170",
    "end": "290140"
  },
  {
    "text": "trouble in your minds. Well in any case, let's see,\nI wish to write for you the",
    "start": "290140",
    "end": "297300"
  },
  {
    "text": "evaluator for Lisp.",
    "start": "297300",
    "end": "302509"
  },
  {
    "text": "Now the evaluator isn't\nvery complicated. It's very much like all the\nprograms we've seen already.",
    "start": "302510",
    "end": "308240"
  },
  {
    "text": "That's the amazing part of it. It's going to be-- and I'm going\nto write it right here--",
    "start": "308240",
    "end": "315370"
  },
  {
    "text": "it's a program called eval. ",
    "start": "315370",
    "end": "322900"
  },
  {
    "text": "And it's a procedure of two\narguments in expression of an",
    "start": "322900",
    "end": "328780"
  },
  {
    "text": "environment.  And like every interesting procedure, it's a case analysis.",
    "start": "328780",
    "end": "334940"
  },
  {
    "start": "334940",
    "end": "340460"
  },
  {
    "text": "But before I start on this, I\nwant to tell you some things. The program we're going to write\non the blackboard is",
    "start": "340460",
    "end": "346880"
  },
  {
    "text": "ugly, dirty, disgusting, not the\nway I would write this is",
    "start": "346880",
    "end": "352450"
  },
  {
    "text": "a professional. It is written with concrete\nsyntax, meaning you've got",
    "start": "352450",
    "end": "357940"
  },
  {
    "text": "really to use lots of CARs and\nCDRs which is exactly what I told you not to do. That's on purpose in this case,\nbecause I want it to be",
    "start": "357940",
    "end": "367180"
  },
  {
    "text": "small, compact, fit on the\nblackboard so you can get the whole thing.",
    "start": "367180",
    "end": "372420"
  },
  {
    "text": "So I don't want to use long\nnames like I normally use. I want to use CAR-CDR\nbecause it's short.",
    "start": "372420",
    "end": "379580"
  },
  {
    "text": "Now, that's a trade-off. I don't want you writing\nprograms like this. This is purely for an effect.",
    "start": "379580",
    "end": "386090"
  },
  {
    "text": "Now, you're going to have to\nwork a little harder to read it, but I'm going to try\nto make it clear as I'm writing it.",
    "start": "386090",
    "end": "391270"
  },
  {
    "text": "I'm also-- this is a pretty much complete\ninterpreter, but there's going to be room for putting\nin more things--",
    "start": "391270",
    "end": "396289"
  },
  {
    "text": "I'm going to leave out\ndefinition and assignment, just because they are not\nessential, for a mathematical",
    "start": "396290",
    "end": "405310"
  },
  {
    "text": "reason I'll show you later and\nalso they take up more space.",
    "start": "405310",
    "end": "411669"
  },
  {
    "text": "But, in any case, what\ndo we have to do? We have to do a dispatch which\nbreaks the types of",
    "start": "411670",
    "end": "417160"
  },
  {
    "text": "expressions up into particular\nclasses. So that's what we're\ngoing to have here.",
    "start": "417160",
    "end": "423525"
  },
  {
    "text": "Well, what expressions\nare there? Let's look at the kinds\nof expressions. We can have things like\nthe numeral three.",
    "start": "423525",
    "end": "430419"
  },
  {
    "text": "What do I want that to do? I can make choices, but I think\nright now, I want it to",
    "start": "430420",
    "end": "435640"
  },
  {
    "text": "be a three. That's what I want. So that's easy enough. That means I want, if the\nthing is a number, the",
    "start": "435640",
    "end": "447520"
  },
  {
    "text": "expression, that I want\nthe expression itself as the answer. ",
    "start": "447520",
    "end": "455420"
  },
  {
    "text": "Now the next possibility\nis things that we represent as symbols. Examples of symbols are things\nlike x, n, eval, number, x.",
    "start": "455420",
    "end": "467614"
  },
  {
    "text": "What do I mean them to be? Those are things that stand\nfor other things. Those are the variables\nof our language.",
    "start": "467614",
    "end": "474770"
  },
  {
    "text": "And so I want to be able to say,\nfor example, that x, for example, transforms to it's\nvalue which might be three.",
    "start": "474770",
    "end": "482930"
  },
  {
    "text": "Or I might ask something\nlike car. I want to have as its value--",
    "start": "482930",
    "end": "489710"
  },
  {
    "text": "be something like some\nprocedure, which I don't know",
    "start": "489710",
    "end": "497380"
  },
  {
    "text": "what is inside there, perhaps\na machine language code or something like that.",
    "start": "497380",
    "end": "503100"
  },
  {
    "text": "So, well, that's easy enough. I'm going to push that\noff on someone else. If something is a symbol, if\nthe expression is a symbol,",
    "start": "503100",
    "end": "513370"
  },
  {
    "text": "then I want the answer to be\nthe result, looking up the expression in the environment.",
    "start": "513370",
    "end": "520159"
  },
  {
    "start": "520159",
    "end": "526480"
  },
  {
    "text": "Now the environment is a\ndictionary which maps the",
    "start": "526480",
    "end": "532410"
  },
  {
    "text": "symbol names to their values. And that's all it is. How it's done?",
    "start": "532410",
    "end": "537530"
  },
  {
    "text": "Well, we'll see that later. It's very easy. It's easy to make data\nstructures that are tables of",
    "start": "537530",
    "end": "543630"
  },
  {
    "text": "various sorts. But it's only a table, and this\nis the access routine for some table.",
    "start": "543630",
    "end": "550040"
  },
  {
    "text": "Well, the next thing, another\nkind of expression-- you have things that are\ndescribed constants that are not numbers, like 'foo.",
    "start": "550040",
    "end": "557430"
  },
  {
    "text": " Well, for my convenience,\nI want to syntactically",
    "start": "557430",
    "end": "562450"
  },
  {
    "text": "transform that into a list\nstructure which is, quote foo.",
    "start": "562450",
    "end": "571520"
  },
  {
    "text": " A quoted object, whatever it is,\nis going to be actually an",
    "start": "571520",
    "end": "579950"
  },
  {
    "text": "abbreviation, which is not\npart of the evaluator but happens somewhere else, an\nabbreviation for an expression",
    "start": "579950",
    "end": "586959"
  },
  {
    "text": "that looks like this. This way, I can test for the\ntype of the expression as",
    "start": "586960",
    "end": "592120"
  },
  {
    "text": "being a quotation by examining\nthe car of the expression. ",
    "start": "592120",
    "end": "598459"
  },
  {
    "text": "So I'm not going to worry about\nthat in the evaluator. It's happening somewhere\nearlier in the reader or something.",
    "start": "598460",
    "end": "605540"
  },
  {
    "text": "If the expression of the\nexpression is quote, then what",
    "start": "605540",
    "end": "618620"
  },
  {
    "text": "I want, I want quote foo to\nitself evaluate to foo.",
    "start": "618620",
    "end": "625140"
  },
  {
    "text": "It's a constant. This is just a way of saying\nthat this evaluates to itself.",
    "start": "625140",
    "end": "630645"
  },
  {
    "text": " What is that? That's the second of the list.\nIt's the second element of the",
    "start": "630645",
    "end": "637329"
  },
  {
    "text": "list. The second element of the\nlist is it's CADR. So I'm just going to write\nhere, CADR.",
    "start": "637330",
    "end": "651290"
  },
  {
    "text": "What else do we have here? We have lambda expressions,\nfor example, lambda of x plus x y.",
    "start": "651290",
    "end": "664160"
  },
  {
    "text": "Well, I going have to have some\nrepresentation for the procedure which is the value of\nan expression, of a lambda expression.",
    "start": "664160",
    "end": "669600"
  },
  {
    "text": "The procedure here is not\nthe expression lambda x. That's the description of it,\nthe textual description.",
    "start": "669600",
    "end": "676170"
  },
  {
    "text": "However, what what I going\nto expect to see here is something which contains an\nenvironment as one of its parts if I'm implementing\na lexical language.",
    "start": "676170",
    "end": "687360"
  },
  {
    "text": "And so what I'd like to see\nis some type flags. I'm going to have to be able\nto distinguish procedures",
    "start": "687360",
    "end": "693440"
  },
  {
    "text": "later, procedures which were\nproduced by lambdas, from ones that may be primitive.",
    "start": "693440",
    "end": "699060"
  },
  {
    "text": "And so I'm going to have some\nflag, which I'll just arbitrarily call closure, just\nfor historical reasons.",
    "start": "699060",
    "end": "704935"
  },
  {
    "text": " Now, to say what parts of\nthis are important. I'm going to need to know\nthe bound variable",
    "start": "704935",
    "end": "711970"
  },
  {
    "text": "list and the body. Well, that's the CDR of this, so\nit's going to be x and plus",
    "start": "711970",
    "end": "720870"
  },
  {
    "text": "x y and some environment. ",
    "start": "720870",
    "end": "728170"
  },
  {
    "text": "Now this is not something that\nusers should ever see, this is",
    "start": "728170",
    "end": "733980"
  },
  {
    "text": "purely a representation,\ninternally, for a procedure object. It contains a bound variable\nlist, a body, and an",
    "start": "733980",
    "end": "742010"
  },
  {
    "text": "environment, and some type tag\nsaying, I am a procedure. I'm going to make one now.",
    "start": "742010",
    "end": "748080"
  },
  {
    "text": "So if the CAR of the expression\nis quote lambda,",
    "start": "748080",
    "end": "763720"
  },
  {
    "text": "then what I'm going\nto put here is-- I'm going to make a list of\nclosure, the CDR of the",
    "start": "763720",
    "end": "778860"
  },
  {
    "text": "procedure description was\neverything except the lambda,",
    "start": "778860",
    "end": "787519"
  },
  {
    "text": "and the current environment. This implements the rule\nfor environments in the",
    "start": "787520",
    "end": "794470"
  },
  {
    "text": "environment model. It has to do with construction\nof procedures from lambda expressions. The environment that was\naround at the time the",
    "start": "794470",
    "end": "802180"
  },
  {
    "text": "evaluator encountered the\nlambda expression is the environment where the procedure\nresulting interprets",
    "start": "802180",
    "end": "810990"
  },
  {
    "text": "it's free variables.  So that's part of that. And so we have to capture that\nenvironment as part of the",
    "start": "810990",
    "end": "818120"
  },
  {
    "text": "procedure object. And we'll see how that\ngets used later. There are also conditional\nexpressions of things like",
    "start": "818120",
    "end": "825140"
  },
  {
    "text": "COND of say, p one, e\none, p two, e two.",
    "start": "825140",
    "end": "834520"
  },
  {
    "text": "Where this is a predicate, a\npredicate is a thing that is either true or false, and the\nexpression to be evaluated if",
    "start": "834520",
    "end": "840930"
  },
  {
    "text": "the predicate is true. A set of clauses, if you\nwill, that's the name for such a thing.",
    "start": "840930",
    "end": "846790"
  },
  {
    "text": "So I'm going put that\nsomewhere else. We're going to worry about that\nin another piece of code.",
    "start": "846790",
    "end": "852420"
  },
  {
    "text": "So EQ--  if the CAR of the expression is\nCOND, then I'm going to do",
    "start": "852420",
    "end": "864710"
  },
  {
    "text": "nothing more than evaluate\nthe COND, the CDR of the",
    "start": "864710",
    "end": "870800"
  },
  {
    "text": "expression.  That's all the clauses in the\nenvironment that I'm given.",
    "start": "870800",
    "end": "878380"
  },
  {
    "text": " Well, there's one more case,\narbitrary thing like the sum",
    "start": "878380",
    "end": "886480"
  },
  {
    "text": "of x and three, where this\nis an operator applied to",
    "start": "886480",
    "end": "893380"
  },
  {
    "text": "operands, and there's nothing\nspecial about it. It's not one of the special\ncases, the special forms.",
    "start": "893380",
    "end": "899850"
  },
  {
    "text": "These are the special forms.",
    "start": "899850",
    "end": "909649"
  },
  {
    "text": "And if I were writing here a\nprofessional program, again, I would somehow make this\ndata directed. So there wouldn't be a sequence\nof conditionals here,",
    "start": "909650",
    "end": "916690"
  },
  {
    "text": "there'd be a dispatch on some\nbits if I were trying to do this in a more professional\nway.",
    "start": "916690",
    "end": "922360"
  },
  {
    "text": "So that, in fact, I can add to\nthe thing without changing my program much. So, for example, they would run\nfast, but I'm not worried",
    "start": "922360",
    "end": "929850"
  },
  {
    "text": "about that. Here we're trying to look\nat this in its entirety.",
    "start": "929850",
    "end": "934890"
  },
  {
    "text": "So it's else. Well, what do we do? In this case, I have to somehow\ndo an addition.",
    "start": "934890",
    "end": "940965"
  },
  {
    "text": " Well, I could find out\nwhat the plus is.",
    "start": "940965",
    "end": "946565"
  },
  {
    "text": "I have to find out what the\nx and the three are. And then I have to apply the\nresult of finding what the",
    "start": "946565",
    "end": "953330"
  },
  {
    "text": "plus is to the result of\nfinding out what the x and the three are. We'll have a name for that.",
    "start": "953330",
    "end": "959830"
  },
  {
    "text": "So I'm going to apply the result\nof evaluating the CAR",
    "start": "959830",
    "end": "971280"
  },
  {
    "text": "of the expression-- the car of the expression\nis the operator--",
    "start": "971280",
    "end": "977210"
  },
  {
    "text": "in the environment given. So evaluating the operator\ngets me the procedure.",
    "start": "977210",
    "end": "984050"
  },
  {
    "text": "Now I have to evaluate all the\noperands to get the arguments. I'll call that EVLIST, the CDR\nof the operands, of the",
    "start": "984050",
    "end": "994709"
  },
  {
    "text": "expression, with respect\nto the environment. ",
    "start": "994710",
    "end": "1001940"
  },
  {
    "text": "EVLIST will come up later-- EVLIST, apply, COND pair,\nCOND, lambda, define.",
    "start": "1001940",
    "end": "1008070"
  },
  {
    "text": " So that what you are seeing here\nnow is pretty much all",
    "start": "1008070",
    "end": "1013630"
  },
  {
    "text": "there is in the evaluator\nitself. It's the case dispatch on the\ntype of the expression with",
    "start": "1013630",
    "end": "1021370"
  },
  {
    "text": "the default being a general\napplication or a combination.",
    "start": "1021370",
    "end": "1027470"
  },
  {
    "start": "1027470",
    "end": "1037520"
  },
  {
    "text": "Now there is lots of things\nwe haven't defined yet. Let's just look at them\nand see what they are. We're going to have to do\nthis later, evcond.",
    "start": "1037520",
    "end": "1045480"
  },
  {
    "text": "We have to write apply. We're going to have to\nwrite EVLIST. We're going to write LOOKUP.",
    "start": "1045480",
    "end": "1051790"
  },
  {
    "text": "I think that's everything,\nisn't there? Everything else is something\nwhich is simple, or primitive, or something like that.",
    "start": "1051790",
    "end": "1058570"
  },
  {
    "text": "And, of course, we could many\nmore special forms here, but that would be a bad idea in\ngeneral in a language.",
    "start": "1058570",
    "end": "1064450"
  },
  {
    "text": "You make a language very\ncomplicated by putting a lot of things in there. The number of reserve words\nthat should exist in a",
    "start": "1064450",
    "end": "1069830"
  },
  {
    "text": "language should be no more than\na person could remember on his fingers and toes. And I get very upset with\nlanguages which have hundreds",
    "start": "1069830",
    "end": "1076820"
  },
  {
    "text": "of reserve words. But that's where the\nreserve words go. ",
    "start": "1076820",
    "end": "1084750"
  },
  {
    "text": "Well, now let's get to\nthe next part of this, the kernel, apply. What else is this doing?",
    "start": "1084750",
    "end": "1091590"
  },
  {
    "text": "Well, apply's job is to take a\nprocedure and apply it to its",
    "start": "1091590",
    "end": "1097020"
  },
  {
    "text": "arguments after both have been\nevaluated to come up with a procedure and the arguments\nrather the operator symbols",
    "start": "1097020",
    "end": "1102560"
  },
  {
    "text": "and the operand symbols,\nwhatever they are-- symbolic expressions. ",
    "start": "1102560",
    "end": "1113270"
  },
  {
    "text": "So we will define apply to be a\nprocedure of two arguments,",
    "start": "1113270",
    "end": "1120810"
  },
  {
    "text": "a procedure and arguments. ",
    "start": "1120810",
    "end": "1127110"
  },
  {
    "text": "And what does it do? It does nothing very\ncomplicated. It's got two cases. ",
    "start": "1127110",
    "end": "1133580"
  },
  {
    "text": "Either the procedure\nis primitive-- ",
    "start": "1133580",
    "end": "1142970"
  },
  {
    "text": "And I don't know exactly\nhow that is done. It's possible there's some type\ninformation just like we",
    "start": "1142970",
    "end": "1150930"
  },
  {
    "text": "made closure for, here, being\nthe description of the type of a compound thing--",
    "start": "1150930",
    "end": "1156809"
  },
  {
    "text": "probably so. But it is not essential how that\nworks, and, in fact, it turns out, as you probably know\nor have deduced, that you",
    "start": "1156810",
    "end": "1164140"
  },
  {
    "text": "don't need any primitives\nanyway. You can compute anything without\nthem because some of",
    "start": "1164140",
    "end": "1170731"
  },
  {
    "text": "the lambda that I've\nbeen playing with. But it's nice to have them. So here we're going to do\nsome magic which I'm",
    "start": "1170732",
    "end": "1176630"
  },
  {
    "text": "not going to explain. Go to machine language,\napply primop.",
    "start": "1176630",
    "end": "1182860"
  },
  {
    "text": "Here's how it adds. Execute an add instruction. ",
    "start": "1182860",
    "end": "1190360"
  },
  {
    "text": "However, the interesting part\nof a language is the glue by which the predicates\nare glued together. So let's look at that.",
    "start": "1190360",
    "end": "1196909"
  },
  {
    "text": "Well, the other possibility is\nthat this is a compound made up by executing a lambda\nexpression, this",
    "start": "1196910",
    "end": "1205140"
  },
  {
    "text": "is a compound procedure. Well, we'll check its type. If it is closure, if it's one of\nthose, then I have to do an",
    "start": "1205140",
    "end": "1223010"
  },
  {
    "text": "eval of the body. The way I do this, the way I\ndeal with this at all, is the",
    "start": "1223010",
    "end": "1228960"
  },
  {
    "text": "way I evaluate the application\nof a procedure to its arguments, is by evaluating the\nbody of the procedure in",
    "start": "1228960",
    "end": "1234399"
  },
  {
    "text": "the environment resulting from\nextending the environment of the procedure with the bindings\nof the formal",
    "start": "1234400",
    "end": "1239670"
  },
  {
    "text": "parameters of the procedure\nto the arguments that were passed to it. ",
    "start": "1239670",
    "end": "1247030"
  },
  {
    "text": "That was a long sentence.  Well that's easy enough.",
    "start": "1247030",
    "end": "1252822"
  },
  {
    "text": "Now here's going to be\na lot of CAR-CDRing. I have to get the body\nof the procedure.",
    "start": "1252822",
    "end": "1259400"
  },
  {
    "text": "Where's the body of the\nprocedure in here? Well here's the CAR, here's\nthe CDR is the",
    "start": "1259400",
    "end": "1265490"
  },
  {
    "text": "whole rest of this. So here's the CADR. And so I\nsee, what I have here is the body is the second element\nof the second",
    "start": "1265490",
    "end": "1271430"
  },
  {
    "text": "element of the procedure. So it's the CADR of the\nCADR or the CADADR.",
    "start": "1271430",
    "end": "1279169"
  },
  {
    "text": "It's the C-A-D-A-D-R, CADADR\nof the procedure.",
    "start": "1279170",
    "end": "1287495"
  },
  {
    "text": " To evaluate the body in the\nresult of binding that's",
    "start": "1287495",
    "end": "1295170"
  },
  {
    "text": "making up more environment,\nwell I need the formal parameters of the of the\nprocedure, what is that?",
    "start": "1295170",
    "end": "1303500"
  },
  {
    "text": "That's the CAR of the CDR.\nIt's horrible isn't it?",
    "start": "1303500",
    "end": "1308780"
  },
  {
    "text": " --of the procedure.",
    "start": "1308780",
    "end": "1315440"
  },
  {
    "text": "Bind that to the arguments\nthat were passed in the environment, which is passed\nalso as part of the procedure.",
    "start": "1315440",
    "end": "1324540"
  },
  {
    "text": "Well, that's the CAR of the\nCDR of the CDR of this,",
    "start": "1324540",
    "end": "1329670"
  },
  {
    "text": "CADADR, of the procedure.",
    "start": "1329670",
    "end": "1336315"
  },
  {
    "text": " Bind, eval, pair, COND,\nlamda, define--",
    "start": "1336315",
    "end": "1346490"
  },
  {
    "text": "Now, of course, if I were being\nreally a neat character, and I was being very careful, I\nwould actually put an extra",
    "start": "1346490",
    "end": "1353490"
  },
  {
    "text": "case here for checking for\ncertain errors like, did you try to apply one\nto an argument?",
    "start": "1353490",
    "end": "1359000"
  },
  {
    "text": "You get a undefined\nprocedure type. So I may as well\ndo that anyway.",
    "start": "1359000",
    "end": "1365500"
  },
  {
    "text": "--else, some sort of\nerror, like that.",
    "start": "1365500",
    "end": "1377610"
  },
  {
    "text": "Now, of course, again, in some\nsort of more real system,",
    "start": "1377610",
    "end": "1382620"
  },
  {
    "text": "written for professional\nreasons, this would be written with a case analysis done by\nsome sort of dispatch.",
    "start": "1382620",
    "end": "1390750"
  },
  {
    "text": "Over here, I would probably have\nother cases like, is this compiled code?",
    "start": "1390750",
    "end": "1396220"
  },
  {
    "text": "It's very important. I might have distinguished the\nkind of code that's produced by a directly evaluating a\nlambda in interpretation from",
    "start": "1396220",
    "end": "1403150"
  },
  {
    "text": "code that was produced by\nsomebody's compiler or something like that. And we'll talk about\nthat later. Or is this a piece Fortran\nprogram I have",
    "start": "1403150",
    "end": "1408710"
  },
  {
    "text": "to go off and execute. It's a perfectly possible\nthing, at this point, to do that. In fact, in this concrete syntax\nevaluator I'm writing",
    "start": "1408710",
    "end": "1416070"
  },
  {
    "text": "here, there's an assumption\nbuilt in that this is Lisp,",
    "start": "1416070",
    "end": "1422600"
  },
  {
    "text": "because I'm using\nCARs and CDRs. CAR means the operator, and\nCDR means the operand. In the text, there is an\nabstract syntax evaluator for",
    "start": "1422600",
    "end": "1430500"
  },
  {
    "text": "which these could be-- these are given abstract names\nlike operator, and operand, and all these other things\nare like that.",
    "start": "1430500",
    "end": "1436160"
  },
  {
    "text": "And, in that case, you could\nreprogram it to be ALGOL with no problem.",
    "start": "1436160",
    "end": "1441570"
  },
  {
    "text": " Well, here we have added another\ncouple of things that",
    "start": "1441570",
    "end": "1447410"
  },
  {
    "text": "we haven't defined.  I don't think I'll worry about\nthese at all, however, this",
    "start": "1447410",
    "end": "1453800"
  },
  {
    "text": "one will be interesting later.  Let's just proceed through\nthis and get it done.",
    "start": "1453800",
    "end": "1460550"
  },
  {
    "text": "There's only two more\nblackboards so it can't be very long. ",
    "start": "1460550",
    "end": "1467056"
  },
  {
    "text": "It's carefully tailored\nto exactly fit. Well, what do we have left? We have to define EVLIST,\nwhich is over here.",
    "start": "1467056",
    "end": "1473730"
  },
  {
    "text": "And EVLIST is nothing more than\na map down a bunch of",
    "start": "1473730",
    "end": "1480620"
  },
  {
    "text": "operands producing arguments. But I'm going to write it out.",
    "start": "1480620",
    "end": "1485820"
  },
  {
    "text": "And one of the reasons I'm going\nto write this out is for a mystical reason, which is I\nwant to make this evaluator so",
    "start": "1485820",
    "end": "1491820"
  },
  {
    "text": "simple that it can understand\nitself.  I'm going to really worry\nabout that a little bit.",
    "start": "1491820",
    "end": "1500230"
  },
  {
    "text": "So let's write it\nout completely. See, I don't want to worry about\nwhether or not the thing can pass functional arguments.",
    "start": "1500230",
    "end": "1506080"
  },
  {
    "text": "The value evaluator is not\ngoing to use them. The evaluator is not going to\nproduce functional values. So even if there were a\ndifferent, alternative",
    "start": "1506080",
    "end": "1512310"
  },
  {
    "text": "language that were very close\nto this, this evaluates a complex language like Scheme\nwhich does allow procedural",
    "start": "1512310",
    "end": "1519830"
  },
  {
    "text": "arguments, procedural values,\nand procedural data. But even if I were evaluating\nALGOL, which doesn't allow",
    "start": "1519830",
    "end": "1528100"
  },
  {
    "text": "procedural values, I could\nuse this evaluator. And this evaluator\nis not making any assumptions about that.",
    "start": "1528100",
    "end": "1534050"
  },
  {
    "text": "And, in fact, if this value were\nto be restricted to not being able to that, it wouldn't\nmatter, because it doesn't use any of those\nclever things.",
    "start": "1534050",
    "end": "1540639"
  },
  {
    "text": "So that's why I'm arranging\nthis to be super simple. This is sort of the kernel\nof all possible language",
    "start": "1540640",
    "end": "1545970"
  },
  {
    "text": "evaluators. How about that? Evlist-- ",
    "start": "1545970",
    "end": "1552525"
  },
  {
    "text": "well, what is it? It's the procedure of two\narguments, l and an environment, where l is a list\nsuch that if the list of",
    "start": "1552525",
    "end": "1566260"
  },
  {
    "text": "arguments is the empty list,\nthen the result is the empty",
    "start": "1566260",
    "end": "1572380"
  },
  {
    "text": "list. Otherwise, I want to\ncons up the result of",
    "start": "1572380",
    "end": "1581480"
  },
  {
    "text": "evaluating the CAR of the\nlist of operands in the",
    "start": "1581480",
    "end": "1591880"
  },
  {
    "text": "environment. So I want the first operand\nevaluated, and I'm going to make a list of the results by\nCONSing that onto the result",
    "start": "1591880",
    "end": "1600735"
  },
  {
    "text": "of this EVLISTing as a CDR\nrecursion, the CDR of the list",
    "start": "1600735",
    "end": "1608880"
  },
  {
    "text": "relative to the same\nenvironment.  Evlist, cons, else, COND,\nlambda, define--",
    "start": "1608880",
    "end": "1617960"
  },
  {
    "text": " And I have one more that I want\nto put on the blackboard.",
    "start": "1617960",
    "end": "1623620"
  },
  {
    "text": "It's the essence of\nthis whole thing. And there's some sort\nof next layer down. ",
    "start": "1623620",
    "end": "1634540"
  },
  {
    "text": "Conditionals-- conditionals are the only thing\nleft that are sort of substantial. Then below that, we have to\nworry about things like lookup",
    "start": "1634540",
    "end": "1642320"
  },
  {
    "text": "and bind, and we'll look\nat that in a second. But of the substantial stuff at\nthis level of detail, next",
    "start": "1642320",
    "end": "1649030"
  },
  {
    "text": "important thing is how you\ndeal with conditionals. Well, how do we have a\nconditional thing? ",
    "start": "1649030",
    "end": "1657669"
  },
  {
    "text": "It's a procedure of a set of\nclauses and an environment.",
    "start": "1657670",
    "end": "1664720"
  },
  {
    "text": " And what does it do?",
    "start": "1664720",
    "end": "1669820"
  },
  {
    "text": "It says, if I've no more\nclauses, well, I have to give",
    "start": "1669820",
    "end": "1683309"
  },
  {
    "text": "this a value. It could be that it\nwas an error. Supposing it run off\nthe end of a conditional, it's pretty arbitrary.",
    "start": "1683310",
    "end": "1690060"
  },
  {
    "text": "It's up to me as programmer to\nchoose what I want to happen. It's convenient for me, right\nnow, to write down that this",
    "start": "1690060",
    "end": "1695940"
  },
  {
    "text": "has a value which is the empty\nlist, doesn't matter. For error checking,\nsome people might",
    "start": "1695940",
    "end": "1701530"
  },
  {
    "text": "prefer something else. But the interesting things\nare the following ones. If I've got an else clause--",
    "start": "1701530",
    "end": "1707450"
  },
  {
    "text": " You see, if I have a list of\nclauses, then each clause is a",
    "start": "1707450",
    "end": "1714120"
  },
  {
    "text": "list. And so the predicate\npart is the CAAR of the clauses.",
    "start": "1714120",
    "end": "1720265"
  },
  {
    "text": " It's the CAR, which is the first\npart of the first clause",
    "start": "1720265",
    "end": "1728070"
  },
  {
    "text": "in the list of clauses. If it's an else, then it means\nI want my result of the",
    "start": "1728070",
    "end": "1735900"
  },
  {
    "text": "conditional to be the result\nof evaluating the matching expression. So I eval the CADR. So this is\nthe first clause, the second",
    "start": "1735900",
    "end": "1750610"
  },
  {
    "text": "element of it, CADAR-- CADAR of a CAR--",
    "start": "1750610",
    "end": "1756360"
  },
  {
    "text": "of the clauses, with respect\nto the environment.",
    "start": "1756360",
    "end": "1762195"
  },
  {
    "text": " Now the next possibility\nis more interesting.",
    "start": "1762195",
    "end": "1769630"
  },
  {
    "text": "If it's false, if the first\npredicate in the predicate",
    "start": "1769630",
    "end": "1774860"
  },
  {
    "text": "list is not an else, and it's\nnot false, if it's not the word else, and if it's\nnot a false thing--",
    "start": "1774860",
    "end": "1782049"
  },
  {
    "text": "Let's write down what it is\nif it's a false thing. If the result of evaluating\nthe first",
    "start": "1782050",
    "end": "1789590"
  },
  {
    "text": "predicate, the clauses-- ",
    "start": "1789590",
    "end": "1795490"
  },
  {
    "text": "respect the environment, if that\nevaluation yields false,",
    "start": "1795490",
    "end": "1801630"
  },
  {
    "text": "then it means, I want to look\nat the next clause. So I want to discard\nthe first one. So we just go around loop,\nevcond, the CDR of the clauses",
    "start": "1801630",
    "end": "1815450"
  },
  {
    "text": "relative to that environment. ",
    "start": "1815450",
    "end": "1821240"
  },
  {
    "text": "And otherwise, I had a true\nclause, in which case, what I",
    "start": "1821240",
    "end": "1827740"
  },
  {
    "text": "want is to evaluate the CADAR\nof the clauses relative to",
    "start": "1827740",
    "end": "1840710"
  },
  {
    "text": "that environment. ",
    "start": "1840710",
    "end": "1848200"
  },
  {
    "text": "Boy, it's almost done. It's quite close to done.",
    "start": "1848200",
    "end": "1853730"
  },
  {
    "text": "I think we're going to\nfinish this part off. So just buzzing through this\nevaluator, but so far you're",
    "start": "1853730",
    "end": "1859529"
  },
  {
    "text": "seeing almost everything. Let's look at the next\ntransparency here. ",
    "start": "1859530",
    "end": "1868980"
  },
  {
    "text": "Here is bind. Bind is for making more table.",
    "start": "1868980",
    "end": "1875460"
  },
  {
    "text": "And what we are going to\ndo here is make a-- we're going to make a no-frame\nfor an environment structure.",
    "start": "1875460",
    "end": "1882800"
  },
  {
    "text": "The environment structure is\ngoing to be represented as a list of frames.",
    "start": "1882800",
    "end": "1888080"
  },
  {
    "text": "So given an existing environment\nstructure, I'm going to make a new environment\nstructure by consing a new frame onto the\nexisting environment",
    "start": "1888080",
    "end": "1895270"
  },
  {
    "text": "structure, where the new frame\nconsists of the result of pairing up the variables, which\nare the bound variables",
    "start": "1895270",
    "end": "1901940"
  },
  {
    "text": "of the procedure I'm applying,\nto the values which are the arguments that were passed\nthat procedure.",
    "start": "1901940",
    "end": "1909690"
  },
  {
    "text": "This is just making a list,\nadding a new element to our list of frames, which is an\nenvironment structure, to make",
    "start": "1909690",
    "end": "1916070"
  },
  {
    "text": "a new environment. Where pair-up is very simple.",
    "start": "1916070",
    "end": "1921540"
  },
  {
    "text": "Pair-up is nothing more than if\nI have a list of variables and a list of values, well, if\nI run out of variables and if",
    "start": "1921540",
    "end": "1927830"
  },
  {
    "text": "I run out of values,\neverything's OK. Otherwise, I've given\ntoo many arguments.",
    "start": "1927830",
    "end": "1932990"
  },
  {
    "text": "If I've not run out of\nvariables, but I've run out of values, that I have\ntoo few arguments.",
    "start": "1932990",
    "end": "1938560"
  },
  {
    "text": "And in the general case, where\nI don't have any errors, and I'm not done, then I really am\njust adding a new pair of the",
    "start": "1938560",
    "end": "1946860"
  },
  {
    "text": "first variable with the first\nargument, the first value,",
    "start": "1946860",
    "end": "1952809"
  },
  {
    "text": "onto a list resulting from\npairing-up the rest of the variables with the rest\nof the values.",
    "start": "1952810",
    "end": "1962950"
  },
  {
    "text": "Lookup is of course\nequally simple. If I have to look up a symbol\nin an environment, well, if",
    "start": "1962950",
    "end": "1970230"
  },
  {
    "text": "the environment is empty, then\nI've got an unbound variable. Otherwise, what I'm going to do\nis use a special pair list",
    "start": "1970230",
    "end": "1979770"
  },
  {
    "text": "lookup procedure, which we'll\nhave very shortly, of the symbol in the first frame\nof the environment.",
    "start": "1979770",
    "end": "1985930"
  },
  {
    "text": "Since I know the environment is\nnot empty, it must have a first frame. So I lookup the symbol\nin the first frame.",
    "start": "1985930",
    "end": "1991139"
  },
  {
    "text": "That becomes the value\ncell here. And then, if the value cell is\nempty, if there is no such",
    "start": "1991140",
    "end": "1999860"
  },
  {
    "text": "value cell, then I have to\ncontinue and look at the rest of the frames. It means there was nothing\nfound there.",
    "start": "1999860",
    "end": "2005990"
  },
  {
    "text": "So that's a property of ASSQ is\nit returns emptiness if it doesn't find something.",
    "start": "2005990",
    "end": "2012010"
  },
  {
    "text": "but if it did find something,\nthen I'm going to use the CDR of the value cell here, which is\nthe thing that was the pair",
    "start": "2012010",
    "end": "2018080"
  },
  {
    "text": "consisting of the variable\nand the value. So the CDR of it is\nthe value part.",
    "start": "2018080",
    "end": "2025000"
  },
  {
    "text": "Finally, ASSQ is something\nyou've probably seen already. ASSQ takes a symbol and a list\nof pairs, and if the list is",
    "start": "2025000",
    "end": "2032400"
  },
  {
    "text": "empty, it's empty. If the symbol is the first\nthing in the list--",
    "start": "2032400",
    "end": "2037850"
  },
  {
    "text": "That's an error. That should be CAAR, C-A-A-R.\nEverybody note that.",
    "start": "2037850",
    "end": "2044159"
  },
  {
    "text": " Right there, OK? ",
    "start": "2044160",
    "end": "2053121"
  },
  {
    "text": "And in any case, if the symbol\nis the CAAR of the A list, then I want the first, the first\npair, in the A list. So,",
    "start": "2053121",
    "end": "2062339"
  },
  {
    "text": "in other words, if this is the\nkey matching the right entry, otherwise, I want to look up\nthat symbol in the rest. Sorry",
    "start": "2062340",
    "end": "2070429"
  },
  {
    "text": "for producing a bug,\nbugs appear. Well, in any case, you're\npretty much seeing",
    "start": "2070429",
    "end": "2078388"
  },
  {
    "text": "the whole thing now.  It's a very beautiful thing,\neven though it's written in an",
    "start": "2078389",
    "end": "2085149"
  },
  {
    "text": "ugly style, being the kernel\nof every language. I suggest that we just--",
    "start": "2085150",
    "end": "2090210"
  },
  {
    "text": "let's look at it for a while. ",
    "start": "2090210",
    "end": "2096749"
  },
  {
    "text": "[MUSIC PLAYING]",
    "start": "2096749",
    "end": "2149750"
  },
  {
    "text": "Are there any questions? ",
    "start": "2149750",
    "end": "2161180"
  },
  {
    "text": "Alright, I suppose it's time\nto take a small break then. [MUSIC PLAYING]",
    "start": "2161180",
    "end": "2216780"
  },
  {
    "text": "OK, now we're just going to do\na little bit of practice understanding what it is\nwe've just shown you.",
    "start": "2216780",
    "end": "2223470"
  },
  {
    "text": "What we're going to do is go\nthrough, in detail, an evaluation by informally\nsubstituting through the",
    "start": "2223470",
    "end": "2229720"
  },
  {
    "text": "interpreter. And since we have no assignments\nor definitions in this interpreter, we have no\npossible side effects, and so",
    "start": "2229720",
    "end": "2238470"
  },
  {
    "text": "the we can do substitution with\nimpunity and not worry about results.",
    "start": "2238470",
    "end": "2245329"
  },
  {
    "text": "So the particular problem I'd\nlike to look at is it an interesting one.",
    "start": "2245330",
    "end": "2250690"
  },
  {
    "text": "It's the evaluation of quote,\nopen, open, open, lambda of x,",
    "start": "2250690",
    "end": "2261910"
  },
  {
    "text": "lambda of y plus x y, lambda,\nlambda, applied to three,",
    "start": "2261910",
    "end": "2275099"
  },
  {
    "text": "applied to four, in some\nglobal environment which I'll call e0. ",
    "start": "2275100",
    "end": "2284930"
  },
  {
    "text": "So what we have here is a\nprocedure of one argument x, which produces as its value a\nprocedure of one argument y,",
    "start": "2284930",
    "end": "2290980"
  },
  {
    "text": "which adds x to y. We are applying the procedure\nof one argument x to three.",
    "start": "2290980",
    "end": "2297960"
  },
  {
    "text": "So x should become three. And the result of that should\nbe procedure of one argument",
    "start": "2297960",
    "end": "2303589"
  },
  {
    "text": "y, which will then apply to 4. ",
    "start": "2303590",
    "end": "2308910"
  },
  {
    "text": "And there is a very simple\ncase, they will then add those results.",
    "start": "2308910",
    "end": "2314790"
  },
  {
    "text": "And now in order to do that, I\nwant to make a very simple environment model. And at this point, you should\nalready have in your mind the",
    "start": "2314790",
    "end": "2321200"
  },
  {
    "text": "environments that\nthis produces. But we're going to start out\nwith a global environment,",
    "start": "2321200",
    "end": "2328810"
  },
  {
    "text": "which I'll call e0,\nwhich is that.",
    "start": "2328810",
    "end": "2336740"
  },
  {
    "text": "And it's going to have in it\nthings, definitions for plus, and times, and--",
    "start": "2336740",
    "end": "2347390"
  },
  {
    "text": "using Greek letters, isn't that interesting, for the objects-- and minus, and quotient, and\nCAR, and CDR, and CONS, and",
    "start": "2347390",
    "end": "2367330"
  },
  {
    "text": "EQ, and everything else you\nmight imagine in a global environment. It's got something there for\neach of those things,",
    "start": "2367330",
    "end": "2374590"
  },
  {
    "text": "something the machine is\nborn with, that's e0. Now what does it mean to\ndo this evaluation?",
    "start": "2374590",
    "end": "2382940"
  },
  {
    "text": "Well, we go through the set of\nspecial forms. First of all, this is not a number.",
    "start": "2382940",
    "end": "2388670"
  },
  {
    "text": "This is not a symbol.  Gee, it's not a quoted\nexpression.",
    "start": "2388670",
    "end": "2396520"
  },
  {
    "text": "This is a quoted expression,\nbut that's not what I interested in. The question is, whether or not\nthe thing which is quoted",
    "start": "2396520",
    "end": "2402700"
  },
  {
    "text": "is quoted expression? I'm evaluating an expression.",
    "start": "2402700",
    "end": "2407960"
  },
  {
    "text": "This just says it's this\nparticular expression. This is not a quoted\nexpression. ",
    "start": "2407960",
    "end": "2415230"
  },
  {
    "text": "It's not a thing that\nbegins with lambda. It's not a thing that\nbegins with COND.",
    "start": "2415230",
    "end": "2422030"
  },
  {
    "text": "Therefore, it's an application\nof its of an operated operands. It's a combination.",
    "start": "2422030",
    "end": "2428570"
  },
  {
    "text": "The combination thus has this\nas the operator and this is",
    "start": "2428570",
    "end": "2435230"
  },
  {
    "text": "the operands.  Well, that means that what I'm\ngoing to do is transform this",
    "start": "2435230",
    "end": "2443539"
  },
  {
    "text": "into apply of eval, of quote,\nopen, open lambda of",
    "start": "2443540",
    "end": "2454010"
  },
  {
    "text": "x, lambda of y-- I'm evaluating the operator--",
    "start": "2454010",
    "end": "2459980"
  },
  {
    "text": "plus x y, in the environment,\nalso e0, with the operands",
    "start": "2459980",
    "end": "2473609"
  },
  {
    "text": "that I'm going to apply this\nto, the arguments being the result of EVLIST, the list\ncontaining four, fin e0.",
    "start": "2473610",
    "end": "2484450"
  },
  {
    "text": " I'm using this funny notation\nhere for e0 because this",
    "start": "2484450",
    "end": "2493010"
  },
  {
    "text": "should be that environment. I haven't a name for it, because\nI have no environment",
    "start": "2493010",
    "end": "2498640"
  },
  {
    "text": "to name it in.  So this is just a representation\nof what would",
    "start": "2498640",
    "end": "2504630"
  },
  {
    "text": "be a quoted expression,\nif you will. The data structure, which is the\nenvironment, goes there.",
    "start": "2504630",
    "end": "2513040"
  },
  {
    "text": "Well, that's what we're\nseeing here. Well in order to do this,\nI have to do this, and I have to do that.",
    "start": "2513040",
    "end": "2519610"
  },
  {
    "text": "Well this one's easy, so why\ndon't we do that one first. This turns into apply\nof eval-- just",
    "start": "2519610",
    "end": "2527780"
  },
  {
    "text": "copying something now. Most of the substitution\nrule is copying. ",
    "start": "2527780",
    "end": "2538530"
  },
  {
    "text": "So I'm going to not say the\nwords when I copy, because it's faster. ",
    "start": "2538530",
    "end": "2546100"
  },
  {
    "text": "And then the EVLIST is going to\nturn into a cons, of eval,",
    "start": "2546100",
    "end": "2554130"
  },
  {
    "text": "of four, in e0--  because it was not\nan empty list--",
    "start": "2554130",
    "end": "2562260"
  },
  {
    "text": "onto the result of EVLISTing,\non the empty list, in e0.",
    "start": "2562260",
    "end": "2568910"
  },
  {
    "text": " And I'm going to start leaving\nout steps soon, because it's",
    "start": "2568910",
    "end": "2574550"
  },
  {
    "text": "going to get boring. ",
    "start": "2574550",
    "end": "2579870"
  },
  {
    "text": "But this is basically the same\nthing as apply, of eval--",
    "start": "2579870",
    "end": "2585025"
  },
  {
    "text": " I'm going to keep doing this--",
    "start": "2585025",
    "end": "2590230"
  },
  {
    "text": "the lambda of x, the lambda of\ny, plus xy, 3, close, e0.",
    "start": "2590230",
    "end": "2600240"
  },
  {
    "text": "I'm a pretty good machine.  Well, eval of four,\nthat's meets the",
    "start": "2600240",
    "end": "2607410"
  },
  {
    "text": "question, is it a number. So that's cons, cons of 4.",
    "start": "2607410",
    "end": "2615280"
  },
  {
    "text": "And EVLIST of the empty\nlist is the empty list, so that's this. ",
    "start": "2615280",
    "end": "2623270"
  },
  {
    "text": "And that's very simple to\nunderstand, because that means the list containing\nfour itself.",
    "start": "2623270",
    "end": "2628710"
  },
  {
    "text": "So this is nothing more than\napply of eval, quote, open,",
    "start": "2628710",
    "end": "2636339"
  },
  {
    "text": "open, lambda of x, lambda of y,\nplus x y, three applied to,",
    "start": "2636340",
    "end": "2646590"
  },
  {
    "text": "e0, applied to the list four--",
    "start": "2646590",
    "end": "2651678"
  },
  {
    "text": "bang. So that's that step. ",
    "start": "2651678",
    "end": "2658099"
  },
  {
    "text": "Now let's look at the next,\nmore interesting thing. What do I do to evaluate that? Evaluating this means\nI have to evaluate--",
    "start": "2658100",
    "end": "2667780"
  },
  {
    "text": "Well, it's not. It's nothing but\nan application. It's not one of the\nspecial things.",
    "start": "2667780",
    "end": "2673569"
  },
  {
    "text": "If the application of this\noperator, which we see here-- here's the operator--",
    "start": "2673570",
    "end": "2680270"
  },
  {
    "text": "applied to this operands,\nthat combination.",
    "start": "2680270",
    "end": "2686570"
  },
  {
    "text": "But we know how to do that,\nbecause that's the last case of the conditional.",
    "start": "2686570",
    "end": "2692369"
  },
  {
    "text": "So substituting in for this\nevaluation, it's apply of eval of the operator in the EVLIST\nof the operands.",
    "start": "2692370",
    "end": "2701160"
  },
  {
    "text": "Well, it's apply, of apply, of\neval, of quote, open, lambda",
    "start": "2701160",
    "end": "2712099"
  },
  {
    "text": "of x, lambda of y, plus\nx y, lambda, lambda,",
    "start": "2712100",
    "end": "2723780"
  },
  {
    "text": "in environment e0. ",
    "start": "2723780",
    "end": "2730520"
  },
  {
    "text": "I'm going to short circuit the\nevaluation of the operands , because they're the same\nas they were before. I got a list containing\nthree, apply that, and",
    "start": "2730520",
    "end": "2738080"
  },
  {
    "text": "apply that to four.  Well let's see.",
    "start": "2738080",
    "end": "2744410"
  },
  {
    "text": "Eval of a lambda expression\nproduces a procedure object.",
    "start": "2744410",
    "end": "2749450"
  },
  {
    "text": " So this is apply, of apply, of\nthe procedure object closure,",
    "start": "2749450",
    "end": "2764530"
  },
  {
    "text": "which contains the body of the\nprocedure, x, which is lambda-- which binds\nx [UNINTELLIGIBLE]",
    "start": "2764530",
    "end": "2772130"
  },
  {
    "text": "the internals of the body, it\nreturns the procedure of one",
    "start": "2772130",
    "end": "2777230"
  },
  {
    "text": "argument y, which adds x to y. ",
    "start": "2777230",
    "end": "2783210"
  },
  {
    "text": "Environment e0 is now captured\nin it, because this was evaluated with respect to e0.",
    "start": "2783210",
    "end": "2790339"
  },
  {
    "text": "e0 is part now of the\nclosure object. Apply that to open, three,\nclose, apply, to open, 4,",
    "start": "2790340",
    "end": "2800050"
  },
  {
    "text": "close, apply. ",
    "start": "2800050",
    "end": "2807390"
  },
  {
    "text": "So going from this step to this\nstep meant that I made up a procedure object which\ncaptured in it e0 as part of",
    "start": "2807390",
    "end": "2815060"
  },
  {
    "text": "the procedure object. Now, we're going to pass\nthose to apply. We have to apply this procedure",
    "start": "2815060",
    "end": "2820480"
  },
  {
    "text": "to that set of arguments. Well, but that procedure\nis not primitive.",
    "start": "2820480",
    "end": "2827380"
  },
  {
    "text": "It's, in fact, a thing which has\ngot the tag closure, and, therefore, what we have\nto do is do a bind.",
    "start": "2827380",
    "end": "2833710"
  },
  {
    "text": "We have to bind. A new environment is made at\nthis point, which has as its",
    "start": "2833710",
    "end": "2841850"
  },
  {
    "text": "parent environment the one\nover here, e0, that",
    "start": "2841850",
    "end": "2846980"
  },
  {
    "text": "environment.  And we'll call this one, e1. ",
    "start": "2846980",
    "end": "2854620"
  },
  {
    "text": "Now what's bound in there? x is bound to three. So I have x equal three.",
    "start": "2854620",
    "end": "2861480"
  },
  {
    "text": "That's what's in there.  And we'll call that e1. So what this transforms into\nis an eval of the body of",
    "start": "2861480",
    "end": "2871940"
  },
  {
    "text": "this, which is this, the body\nof that procedure, in the environment that you just saw.",
    "start": "2871940",
    "end": "2880290"
  },
  {
    "text": "So that's an apply, of eval,\nquote, open, lambda of y, plus",
    "start": "2880290",
    "end": "2891480"
  },
  {
    "text": "x y-- the body--  in e1.",
    "start": "2891480",
    "end": "2896520"
  },
  {
    "text": " And apply the result of that\nto four, open, close, 4--",
    "start": "2896520",
    "end": "2906039"
  },
  {
    "text": "list of arguments. Well, that's sensible enough\nbecause evaluating a lambda, I",
    "start": "2906040",
    "end": "2911599"
  },
  {
    "text": "know what to do. That means I apply, the\nprocedure which is closure,",
    "start": "2911600",
    "end": "2923680"
  },
  {
    "text": "binds one argument y, adds x to\ny, with e1 captured in it.",
    "start": "2923680",
    "end": "2932150"
  },
  {
    "text": " And you should really\nsee this.",
    "start": "2932150",
    "end": "2937800"
  },
  {
    "text": "I somehow manufactured\na closure. I should've put this here. There was one over here too.",
    "start": "2937800",
    "end": "2943040"
  },
  {
    "text": " Well, there's one here now.",
    "start": "2943040",
    "end": "2948080"
  },
  {
    "text": "I've captured e1, and this is\nthe procedure of one argument",
    "start": "2948080",
    "end": "2953710"
  },
  {
    "text": "y, whatever this is. That's what that is there,\nthat closure.",
    "start": "2953710",
    "end": "2960434"
  },
  {
    "text": " I'm going to apply\nthat to four.",
    "start": "2960435",
    "end": "2966230"
  },
  {
    "text": " Well, that's easy enough.",
    "start": "2966230",
    "end": "2971940"
  },
  {
    "text": " That means I have to make a\nnew environment by copying",
    "start": "2971940",
    "end": "2979720"
  },
  {
    "text": "this pointer, which was the\npointer of the procedure,",
    "start": "2979720",
    "end": "2985030"
  },
  {
    "text": "which binds y equal 4 with\nthat environment. And here's my new environment,\nwhich I'll call e2.",
    "start": "2985030",
    "end": "2992460"
  },
  {
    "text": " And, of course, this application\nthen is evaluate",
    "start": "2992460",
    "end": "2998990"
  },
  {
    "text": "the body in e2. So this is eval, the body,\nwhich is plus x y, in the",
    "start": "2998990",
    "end": "3010829"
  },
  {
    "text": "environment e2. But this is an application, so\nthis is the apply, of eval,",
    "start": "3010830",
    "end": "3022220"
  },
  {
    "text": "plus in e2, an EVLIST, quote,\nopen, x y, in e2.",
    "start": "3022220",
    "end": "3037340"
  },
  {
    "start": "3037340",
    "end": "3044880"
  },
  {
    "text": "Well, but let's see. That is apply, the\nobject which is a",
    "start": "3044880",
    "end": "3052480"
  },
  {
    "text": "result of that and plus. So here we are in e2, plus is\nnot here, it's not here, oh,",
    "start": "3052480",
    "end": "3057920"
  },
  {
    "text": "yes, but's here as some\nprimitive operator. So it's the primitive operator\nfor addition.",
    "start": "3057920",
    "end": "3064745"
  },
  {
    "text": " Apply that to the result of\nevaluating x and y in e2.",
    "start": "3064745",
    "end": "3074369"
  },
  {
    "text": "But we can see that x is\nthree and y is four. So that's a three\nand four, here.",
    "start": "3074370",
    "end": "3083936"
  },
  {
    "text": "And that magically produces\nfor me a seven. ",
    "start": "3083936",
    "end": "3090520"
  },
  {
    "text": "I wanted to go through this so\nyou would see, essentially, one important ingredient, which\nis what's being passed",
    "start": "3090520",
    "end": "3096960"
  },
  {
    "text": "around, and who owns what,\nand what his job is. So what do we have here? We have eval, and we have apply,\nthe two main players.",
    "start": "3096960",
    "end": "3106520"
  },
  {
    "text": " And there is a big loop the\ngoes around like this.",
    "start": "3106520",
    "end": "3112320"
  },
  {
    "text": "Which is eval produces\na procedure and",
    "start": "3112320",
    "end": "3120780"
  },
  {
    "text": "arguments for apply.",
    "start": "3120780",
    "end": "3126270"
  },
  {
    "text": "Now some things eval\ncould do by itself. Those are little self\nthings here. They're not interesting.",
    "start": "3126270",
    "end": "3132700"
  },
  {
    "text": "Also eval evaluates all of the\narguments, one after another. That's not very interesting. Apply can apply some procedures\nlike plus, not very",
    "start": "3132700",
    "end": "3141539"
  },
  {
    "text": "interesting. However, if apply can't apply\na procedure like plus, it produces an expression and\nenvironment for eval.",
    "start": "3141540",
    "end": "3152880"
  },
  {
    "text": " The procedural arguments wrap up\nessentially the state of a",
    "start": "3152880",
    "end": "3159770"
  },
  {
    "text": "computation and, certainly, the\nexpression of environment. And so what we're actually going\nto do next is not the",
    "start": "3159770",
    "end": "3165600"
  },
  {
    "text": "complete state, because\nit doesn't say who wants the answers. ",
    "start": "3165600",
    "end": "3171280"
  },
  {
    "text": "But what we're going to do--\nit's always got something like an expression of environment or\nprocedure and arguments as",
    "start": "3171280",
    "end": "3176580"
  },
  {
    "text": "the main loop that we're\ngoing around. There are minor little sub\nloops like eval through EVLIST, or eval through evcond,\nor apply through a",
    "start": "3176580",
    "end": "3191030"
  },
  {
    "text": "primitive apply. ",
    "start": "3191030",
    "end": "3196140"
  },
  {
    "text": "But they're not the\nessential things. So that's what I wanted\nyou to see.",
    "start": "3196140",
    "end": "3201860"
  },
  {
    "text": "Are there any questions?  Yes.",
    "start": "3201860",
    "end": "3208690"
  },
  {
    "text": "AUDIENCE: I'm trying to\nunderstand how x got down to three instead of four.",
    "start": "3208690",
    "end": "3217069"
  },
  {
    "text": "At the early part of the-- PROFESSOR: Here. You want to know how x\ngot down to three?",
    "start": "3217070",
    "end": "3223310"
  },
  {
    "text": "AUDIENCE: Because x is the outer\nprocedure, and x and y",
    "start": "3223310",
    "end": "3229770"
  },
  {
    "text": "are the inner procedure. PROFESSOR: Fine. Well, I was very careful\nand mechanical.",
    "start": "3229770",
    "end": "3235280"
  },
  {
    "text": "First of all, I should write\nthose procedures again for you, pretty printed.",
    "start": "3235280",
    "end": "3240610"
  },
  {
    "text": "First order of business, because\nyou're probably not reading them well. So I have here that\nprocedure of--",
    "start": "3240610",
    "end": "3248500"
  },
  {
    "text": "was it x over there-- which is-- value of that procedure of y,\nwhich adds x to y, lambda,",
    "start": "3248500",
    "end": "3260710"
  },
  {
    "text": "lambda, applied that to three,\ntakes the result of that, and applied that to four.",
    "start": "3260710",
    "end": "3266140"
  },
  {
    "text": "Is that not what I wrote? Now, you should immediately\nsee that here is an",
    "start": "3266140",
    "end": "3274170"
  },
  {
    "text": "application-- let me get a white\npiece of chalk-- here is an application,\na combination.",
    "start": "3274170",
    "end": "3280734"
  },
  {
    "text": " That combination has this\nas the operator",
    "start": "3280735",
    "end": "3288270"
  },
  {
    "text": "and this as the operand. The three is going in\nfor the x here.",
    "start": "3288270",
    "end": "3294900"
  },
  {
    "text": "The result of this is a\nprocedure of one argument y, which gets applied to four.",
    "start": "3294900",
    "end": "3301530"
  },
  {
    "text": "So you just weren't reading\nthe expression right. The way you see that over here\nis that here I have the actual",
    "start": "3301530",
    "end": "3311579"
  },
  {
    "text": "procedure object, x. It's getting applied to three,\nthe list containing three.",
    "start": "3311580",
    "end": "3318980"
  },
  {
    "text": "What I'm left over with\nis something which gets applied to four.",
    "start": "3318980",
    "end": "3324080"
  },
  {
    "text": "Are there any other questions?  Time for our next small\nbreak then.",
    "start": "3324080",
    "end": "3330900"
  },
  {
    "text": "Thank you. [MUSIC PLAYING]",
    "start": "3330900",
    "end": "3368410"
  },
  {
    "text": "Let's see, at this point, you\nshould be getting the feeling,",
    "start": "3368410",
    "end": "3374730"
  },
  {
    "text": "what's this nonsense\nthis Sussman character is feeding me? ",
    "start": "3374730",
    "end": "3380740"
  },
  {
    "text": "There's an awful lot of\nstrange nonsense here. After all, he purported to\nexplain to me Lisp, and he",
    "start": "3380740",
    "end": "3388300"
  },
  {
    "text": "wrote me a Lisp program\non the blackboard. The Lisp program was intended\nto be interpreted for Lisp,",
    "start": "3388300",
    "end": "3393560"
  },
  {
    "text": "but you need a Lisp interpreter\nin order to understand that program. How could that program have told\nme anything there is to",
    "start": "3393560",
    "end": "3401160"
  },
  {
    "text": "be known about Lisp? How is that not completely\nvacuous? ",
    "start": "3401160",
    "end": "3408490"
  },
  {
    "text": "It's a very strange thing. Does it tell me anything\nat all? ",
    "start": "3408490",
    "end": "3416069"
  },
  {
    "text": "Well, you see, the whole thing\nis sort of like these Escher's hands that we see\non this slide.",
    "start": "3416070",
    "end": "3423105"
  },
  {
    "text": " Yes, eval and apply each sort\nof draw each other and",
    "start": "3423105",
    "end": "3431750"
  },
  {
    "text": "construct the real thing,\nwhich can sit out and draw itself.",
    "start": "3431750",
    "end": "3437109"
  },
  {
    "text": "Escher was a very brilliant man,\nhe just didn't know the names of these spirits. ",
    "start": "3437110",
    "end": "3443910"
  },
  {
    "text": "Well, I'm going to do now, is\nI'm going to try to convince you that both this mean\nsomething, and, as a aside,",
    "start": "3443910",
    "end": "3453060"
  },
  {
    "text": "I'm going to show you why you\ndon't need definitions. Just turns out that that sort of\nfalls out, why definitions",
    "start": "3453060",
    "end": "3458760"
  },
  {
    "text": "are not essential in a\nmathematical sense for doing all the things we need\nto do for computing.",
    "start": "3458760",
    "end": "3464890"
  },
  {
    "text": " Well, let's see here.",
    "start": "3464890",
    "end": "3470690"
  },
  {
    "text": "Consider the following small\nprogram, what does it mean? This is a program for computing\nexponentials.",
    "start": "3470690",
    "end": "3477035"
  },
  {
    "start": "3477035",
    "end": "3487270"
  },
  {
    "text": "The exponential of x to\nthe nth power is if--",
    "start": "3487270",
    "end": "3493350"
  },
  {
    "text": " and is zero, then the\nresult is one.",
    "start": "3493350",
    "end": "3502069"
  },
  {
    "text": "Otherwise, I want the product\nof x and the result of",
    "start": "3502070",
    "end": "3509520"
  },
  {
    "text": "exponentiating x to the\nn minus one power. ",
    "start": "3509520",
    "end": "3522858"
  },
  {
    "text": "I think I got it right. Now this is a recursive\ndefinition.",
    "start": "3522858",
    "end": "3529470"
  },
  {
    "text": "It's a definition of the\nexponentiation procedure in terms of itself.",
    "start": "3529470",
    "end": "3536410"
  },
  {
    "text": "And, as it has been mentioned\nbefore, your high school geometry teacher probably\ngave you a hard time",
    "start": "3536410",
    "end": "3543010"
  },
  {
    "text": "about things like that. Was that justified? Why does this self referential\ndefinition make any sense?",
    "start": "3543010",
    "end": "3553430"
  },
  {
    "text": "Well, first of all, I'm going to\nconvince you that your high school geometry teacher was\nI telling you nonsense. ",
    "start": "3553430",
    "end": "3560370"
  },
  {
    "text": "Consider the following set\nof definitions here. x plus y equals three, and\nx minus y equal one.",
    "start": "3560370",
    "end": "3573070"
  },
  {
    "text": "Well, gee, this tells you x in\nterms of y, and this one tells you y in terms of\nx, presumably. ",
    "start": "3573070",
    "end": "3580150"
  },
  {
    "text": "And yet this happens to have a\nunique solution in x and y. ",
    "start": "3580150",
    "end": "3595910"
  },
  {
    "text": "However, I could also write\ntwo x plus two y is six.",
    "start": "3595910",
    "end": "3606599"
  },
  {
    "text": "These two equations have an\ninfinite number solutions. ",
    "start": "3606600",
    "end": "3615730"
  },
  {
    "text": "And I could write you, for\nexample, x minus y equal 2,",
    "start": "3615730",
    "end": "3621520"
  },
  {
    "text": "and these two equations\nhave no solutions. ",
    "start": "3621520",
    "end": "3629820"
  },
  {
    "text": "Well, I have here three sets\nof simultaneous linear equations, this set, this\nset, and this set.",
    "start": "3629820",
    "end": "3639510"
  },
  {
    "text": "But they have different\nnumbers of solutions. The number of solutions is not\nin the form of the equations.",
    "start": "3639510",
    "end": "3645760"
  },
  {
    "text": "They all three sets have\nthe same form. The number of solutions\nis in the content. ",
    "start": "3645760",
    "end": "3653000"
  },
  {
    "text": "I can't tell by looking at the\nform of a definition whether it makes sense, only by\nits detailed content.",
    "start": "3653000",
    "end": "3659660"
  },
  {
    "text": "What are the coefficients,\nfor example, in the case of linear equations?",
    "start": "3659660",
    "end": "3665099"
  },
  {
    "text": "So I shouldn't expect to be\nable to tell looking at something like this, from some\nsimple things like, oh yes,",
    "start": "3665100",
    "end": "3671500"
  },
  {
    "text": "EXPT is the solution of this\nrecursion equation. Expt is the procedure which\nif substituted in here,",
    "start": "3671500",
    "end": "3682110"
  },
  {
    "text": "gives me EXPT back. I can't tell, looking at this\nform, whether or not there's a",
    "start": "3682110",
    "end": "3690750"
  },
  {
    "text": "single, unique solution for\nEXPT, an infinite number of solutions, or no solutions.",
    "start": "3690750",
    "end": "3697200"
  },
  {
    "text": "It's got to be how it\ncounts and things like that, the details. And it's harder in programming\nthan linear algebra.",
    "start": "3697200",
    "end": "3702900"
  },
  {
    "text": "There aren't too many theorems\nabout it in programming. ",
    "start": "3702900",
    "end": "3708450"
  },
  {
    "text": "Well, I want to rewrite these\nequations a little bit, these over here.",
    "start": "3708450",
    "end": "3713970"
  },
  {
    "text": "Because what we're\ninvestigating is equations like this. But I want to play a little with\nequations like this that we understand, just so we\nget some insight into",
    "start": "3713970",
    "end": "3722050"
  },
  {
    "text": "this kind of question. We could rewrite our equations\nhere, say these two, the ones",
    "start": "3722050",
    "end": "3727869"
  },
  {
    "text": "that are interesting, as x\nequals three minus y, and y",
    "start": "3727870",
    "end": "3737070"
  },
  {
    "text": "equals x minus one.  What do we call this\ntransformation?",
    "start": "3737070",
    "end": "3744050"
  },
  {
    "text": "This is a linear transformation,\nt. ",
    "start": "3744050",
    "end": "3749430"
  },
  {
    "text": "Then what we're getting here\nis an equation x y",
    "start": "3749430",
    "end": "3755390"
  },
  {
    "text": "equals t of x y. ",
    "start": "3755390",
    "end": "3762990"
  },
  {
    "text": "What am I looking for? I'm looking for a fixed\npoint of t. The solution is a fixed\npoint of t.",
    "start": "3762990",
    "end": "3779350"
  },
  {
    "text": " So the methods we should have\nfor looking for solutions to",
    "start": "3779350",
    "end": "3784829"
  },
  {
    "text": "equations, if I can do it by\nfixed points, might be applicable.",
    "start": "3784830",
    "end": "3790880"
  },
  {
    "text": "If I have a means of finding a\nsolution to an equations by fixed points-- just, might not work--",
    "start": "3790880",
    "end": "3798619"
  },
  {
    "text": "but it might be applicable to\ninvestigating solutions of equations like this. ",
    "start": "3798620",
    "end": "3807240"
  },
  {
    "text": "But what I want you to feel is\nthat this is an equation. It's an expression with several\ninstances of various",
    "start": "3807240",
    "end": "3812930"
  },
  {
    "text": "names which puts a constraint on\nthe name, saying what that",
    "start": "3812930",
    "end": "3819020"
  },
  {
    "text": "name could have as its value,\nrather than some sort of mechanical process of\nsubstitution right now.",
    "start": "3819020",
    "end": "3825010"
  },
  {
    "text": " This is an equation which I'm\ngoing to try to solve.",
    "start": "3825010",
    "end": "3831220"
  },
  {
    "text": "Well, let's play around\nand solve it. First of all, I want to write\ndown the function which",
    "start": "3831220",
    "end": "3837800"
  },
  {
    "text": "corresponds to t. First I want to write down the\nfunction which corresponds to t whose fixed point is the\nanswer to this question.",
    "start": "3837800",
    "end": "3846960"
  },
  {
    "text": " Well, let's consider the\nfollowing procedure f.",
    "start": "3846960",
    "end": "3854240"
  },
  {
    "text": " I claim it computes\nthat function.",
    "start": "3854240",
    "end": "3859340"
  },
  {
    "text": "f is that procedure of one\nargument g, which is that",
    "start": "3859340",
    "end": "3866860"
  },
  {
    "text": "procedure of two arguments\nx and n.",
    "start": "3866860",
    "end": "3873430"
  },
  {
    "text": "Which have the property that if\nn is zero, then the result",
    "start": "3873430",
    "end": "3882410"
  },
  {
    "text": "is one, otherwise, the result\nis the product of x and g,",
    "start": "3882410",
    "end": "3896049"
  },
  {
    "text": "applied to x, and minus n1. ",
    "start": "3896050",
    "end": "3903369"
  },
  {
    "text": "g, times, else, COND,\nlambda, lambda-- ",
    "start": "3903370",
    "end": "3911900"
  },
  {
    "text": "Here f is a procedure, which\nif I had a solution to that",
    "start": "3911900",
    "end": "3917230"
  },
  {
    "text": "equation, if I had a good\nexponentiation procedure, and",
    "start": "3917230",
    "end": "3923640"
  },
  {
    "text": "I applied f to that procedure,\nthen the result would be a",
    "start": "3923640",
    "end": "3929500"
  },
  {
    "text": "good exponentiation procedure. ",
    "start": "3929500",
    "end": "3937460"
  },
  {
    "text": "Because, what does it do? Well, all it is is exposing g\nwere a good exponentiation",
    "start": "3937460",
    "end": "3944200"
  },
  {
    "text": "procedure, well then this would\nproduce, as its value, a procedure to arguments x and n,\nsuch that if n were 0, the",
    "start": "3944200",
    "end": "3951650"
  },
  {
    "text": "result would be one, which\nis certainly true of exponentiation. Otherwise, it will be the result\nof multiplying x by the",
    "start": "3951650",
    "end": "3957730"
  },
  {
    "text": "exponentiation procedure given\nto me with x and n minus one as arguments.",
    "start": "3957730",
    "end": "3963470"
  },
  {
    "text": "So if this computed the correct\nexponentiation for n minus one, then this would be\nthe correct exponentiation for",
    "start": "3963470",
    "end": "3970500"
  },
  {
    "text": "exponent n, so this would\nhave been the right exponentiation procedure. ",
    "start": "3970500",
    "end": "3977500"
  },
  {
    "text": "So what I really want to say\nhere is E-X-P-T is a fixed",
    "start": "3977500",
    "end": "3986560"
  },
  {
    "text": "point of f.",
    "start": "3986560",
    "end": "3992320"
  },
  {
    "start": "3992320",
    "end": "3997550"
  },
  {
    "text": "Now our problem is there might\nbe more than one fixed point. There might be no\nfixed points.",
    "start": "3997550",
    "end": "4003270"
  },
  {
    "text": "I have to go hunting for\nthe fixed points. ",
    "start": "4003270",
    "end": "4008290"
  },
  {
    "text": "Got to solve this equation.  Well there are various ways\nto hunt for fixed points.",
    "start": "4008290",
    "end": "4015579"
  },
  {
    "text": "Of course, the one we played\nwith at the beginning of this term worked for cosine.",
    "start": "4015580",
    "end": "4020815"
  },
  {
    "start": "4020815",
    "end": "4026079"
  },
  {
    "text": "Go into radians mode on your\ncalculator and push cosine, and just keep doing it, and you\nget to some number which",
    "start": "4026080",
    "end": "4032990"
  },
  {
    "text": "is about 0.73 or 0.74. I can't remember which. ",
    "start": "4032990",
    "end": "4042900"
  },
  {
    "text": "By iterating a function, whose\nfixed point I'm searching for, it is sometimes the case that\nthat function will converge in",
    "start": "4042900",
    "end": "4052089"
  },
  {
    "text": "producing the fixed point. I think we luck out in this\ncase, so let's look for it.",
    "start": "4052090",
    "end": "4059910"
  },
  {
    "text": "Let's look at this slide.",
    "start": "4059910",
    "end": "4068030"
  },
  {
    "text": "Consider the following sequence\nof procedures. ",
    "start": "4068030",
    "end": "4076400"
  },
  {
    "text": "e0 over here is the procedure\nwhich does nothing at all.",
    "start": "4076400",
    "end": "4082940"
  },
  {
    "text": "It's the procedure which\nproduces an error for any arguments you give it. It's basically useless.",
    "start": "4082940",
    "end": "4089030"
  },
  {
    "start": "4089030",
    "end": "4094480"
  },
  {
    "text": "Well, however, I can make\nan approximation.",
    "start": "4094480",
    "end": "4100080"
  },
  {
    "text": "Let's consider it the worst\npossible approximation to exponentiation, because\nit does nothing.",
    "start": "4100080",
    "end": "4106990"
  },
  {
    "text": "Well, supposing I substituted e0\nfor g by calling f, as you",
    "start": "4106990",
    "end": "4114170"
  },
  {
    "text": "see over here on e0. So you see over here,\nhave e0 there.",
    "start": "4114170",
    "end": "4120729"
  },
  {
    "text": "Then gee, what's e1? e1 is a procedure which\nexponentiate things to the 0th",
    "start": "4120729",
    "end": "4127189"
  },
  {
    "text": "power, with no trouble. It gets the right answer,\nanything to the zero is one,",
    "start": "4127189",
    "end": "4132420"
  },
  {
    "text": "and it makes an error\non anything else.  Well, now what if I take e1 and\nI substitute if for g by",
    "start": "4132420",
    "end": "4146040"
  },
  {
    "text": "calling f on e1?  Oh gosh, I have here a procedure\nof two arguments.",
    "start": "4146040",
    "end": "4155670"
  },
  {
    "text": "Now remember e1 was appropriate\nfor taking exponentiations of 0, for\nraising to the 0 exponent.",
    "start": "4155670",
    "end": "4164200"
  },
  {
    "text": "So here, is n is 0, the result\nis one, so this guy is good for that too.",
    "start": "4164200",
    "end": "4169520"
  },
  {
    "text": "However, I can use something for\nraising to the 0th power to multiply it by x to raise\nsomething to the first power.",
    "start": "4169520",
    "end": "4175979"
  },
  {
    "text": "So e2 is good for both\npower 0 and one. ",
    "start": "4175979",
    "end": "4183799"
  },
  {
    "text": "And e3 is constructed from\ne2 in the same way. And e3, of course, by the same\nargument is good for powers 0,",
    "start": "4183800",
    "end": "4192239"
  },
  {
    "text": "one, and two. And so I will assert for you,\nwithout proof, because the",
    "start": "4192240",
    "end": "4200140"
  },
  {
    "text": "proof is horribly difficult. And that's the sort of thing\nthat people called denotational semanticists do.",
    "start": "4200140",
    "end": "4207710"
  },
  {
    "text": "This great idea was invented\nby Scott and Strachey. ",
    "start": "4207710",
    "end": "4214240"
  },
  {
    "text": "They're very famous\nmathematician types who invented the interpretation\nfor these programs that we",
    "start": "4214240",
    "end": "4221030"
  },
  {
    "text": "have that I'm talking to\nyou about right now. And they proved, by topology\nthat there is such a fixed",
    "start": "4221030",
    "end": "4228950"
  },
  {
    "text": "point in the cases\nthat we want. But the assertion is E-X-P-T\nis limit as n goes",
    "start": "4228950",
    "end": "4241180"
  },
  {
    "text": "to infinity of em. and And that we've constructed\nthis by the following way.",
    "start": "4241180",
    "end": "4247900"
  },
  {
    "text": " --is Well, it's f of, f\nof, f of, f of, f of--",
    "start": "4247900",
    "end": "4257530"
  },
  {
    "text": "f applied to anything at all. It didn't matter what that was,\nbecause, in fact, this",
    "start": "4257530",
    "end": "4264070"
  },
  {
    "text": "always produces an error.  Applied to this-- ",
    "start": "4264070",
    "end": "4272840"
  },
  {
    "text": "That's by infinite\nnesting of f's. So now my problem is to make\nsome infinite things.",
    "start": "4272840",
    "end": "4279760"
  },
  {
    "text": " We need some infinite things.",
    "start": "4279760",
    "end": "4284920"
  },
  {
    "text": "How am I going to nest up an f\nan infinite number of times? I'd better construct this.",
    "start": "4284920",
    "end": "4292380"
  },
  {
    "text": "Well, I don't know. How would I make an infinite\nloop at all? Let's take a very simple\ninfinite loop, the simplest infinite loop imaginable.",
    "start": "4292380",
    "end": "4298340"
  },
  {
    "start": "4298340",
    "end": "4303550"
  },
  {
    "text": "If I were to take that procedure\nof one argument x which applies x to x and apply\nthat to the procedure of one",
    "start": "4303550",
    "end": "4317579"
  },
  {
    "text": "argument x which applies\nx to x, then this",
    "start": "4317580",
    "end": "4325320"
  },
  {
    "text": "is an infinite loop. The reason why this is an\ninfinite loop is as follows. The way I understand this is I\nsubstitute the argument for",
    "start": "4325320",
    "end": "4334390"
  },
  {
    "text": "the formal parameter\nin the body. But if I do that, I take for\neach of these x's, I",
    "start": "4334390",
    "end": "4342590"
  },
  {
    "text": "substitute one of these, making\na copy of the original expression I just started\nwith, the",
    "start": "4342590",
    "end": "4348410"
  },
  {
    "text": "simplest infinite loop. ",
    "start": "4348410",
    "end": "4355440"
  },
  {
    "text": "Now I want to tell you about a\nparticular operator which is",
    "start": "4355440",
    "end": "4360750"
  },
  {
    "text": "constructed by a perturbation\nfrom this infinite loop. ",
    "start": "4360750",
    "end": "4367040"
  },
  {
    "text": "I'll call it y. ",
    "start": "4367040",
    "end": "4372290"
  },
  {
    "text": "This is called Curry's\nParadoxical Combinator of y after a fellow by the name of\nCurry, who was a logician of",
    "start": "4372290",
    "end": "4380510"
  },
  {
    "text": "the 1930s also. And if I have a procedure of\none argument f, what's it",
    "start": "4380510",
    "end": "4388670"
  },
  {
    "text": "going to have in it? It's going to have a kind of\ninfinite loop in it, which is that procedure of one argument\nx which applies f to x of x,",
    "start": "4388670",
    "end": "4401670"
  },
  {
    "text": "applied to that procedure of one\nargument x, which applies f to f of x.",
    "start": "4401670",
    "end": "4407899"
  },
  {
    "text": " Now what's this do?",
    "start": "4407899",
    "end": "4414590"
  },
  {
    "text": "Suppose we apply y to F. Well,\nthat's easy enough.",
    "start": "4414590",
    "end": "4422949"
  },
  {
    "text": "That's this capital\nF over here. Well, the easiest thing\nto say there is, I",
    "start": "4422950",
    "end": "4428670"
  },
  {
    "text": "substitute F for here. ",
    "start": "4428670",
    "end": "4435320"
  },
  {
    "text": "So that's going to give\nme, basically-- because then I'm going to\nsubstitute this for x in here.",
    "start": "4435320",
    "end": "4442800"
  },
  {
    "start": "4442800",
    "end": "4448969"
  },
  {
    "text": "Let me actually do it in steps,\nso you can see it completely. I'm going to be very careful.",
    "start": "4448970",
    "end": "4455020"
  },
  {
    "text": "This is open, open, lambda of\nx , capital F, x, x, applied",
    "start": "4455020",
    "end": "4467510"
  },
  {
    "text": "to itself, F of x of x.",
    "start": "4467510",
    "end": "4477909"
  },
  {
    "text": "Substituting this for this in\nhere, this is F applied to--",
    "start": "4477910",
    "end": "4485600"
  },
  {
    "text": "what is it-- substituting this in here, open,\nopen, lambda of x, F, of",
    "start": "4485600",
    "end": "4493850"
  },
  {
    "text": "x and x, applied to lambda of\nx, F of x of x, F, lambda,",
    "start": "4493850",
    "end": "4508910"
  },
  {
    "text": "pair, F. Oh, but what is this? This thing over here that\nI just computed, is",
    "start": "4508910",
    "end": "4517489"
  },
  {
    "text": "this thing over here. But I just wrapped another\nF around it.",
    "start": "4517490",
    "end": "4523369"
  },
  {
    "text": "So by applying y to F, I make\nan infinite series of F's. If I just let this run forever,\nI'll just keep making",
    "start": "4523370",
    "end": "4530520"
  },
  {
    "text": "more and more F's outside. I ran an infinite loop which\nis useless, but it doesn't",
    "start": "4530520",
    "end": "4535600"
  },
  {
    "text": "matter that the inside\nis useless.  So y of F is F applied to y of\nF. So y is a magical thing",
    "start": "4535600",
    "end": "4553900"
  },
  {
    "text": "which, when applied to some\nfunction, produces the object which is the fixed point of that\nfunction, if it exists,",
    "start": "4553900",
    "end": "4563199"
  },
  {
    "text": "and if this all works.  Because, indeed, if I take y of\nF and put it into F, I get",
    "start": "4563200",
    "end": "4570380"
  },
  {
    "text": "y of F out. ",
    "start": "4570380",
    "end": "4576239"
  },
  {
    "text": "Now I want you to think this\nin terms of the eval-apply interpreter for a bit.",
    "start": "4576240",
    "end": "4583860"
  },
  {
    "text": "I wrote down a whole bunch of\nrecursion equations out there. They're simultaneous in\nthe same way these are",
    "start": "4583860",
    "end": "4590210"
  },
  {
    "text": "simultaneous equations. Exponentiation was not a\nsimultaneous equation. It was only one variable I was\nlooking for a meaning for.",
    "start": "4590210",
    "end": "4598150"
  },
  {
    "text": "But what Lisp is is the fixed\npoint of the process which says, if I knew what Lisp was\nand substituted it in for",
    "start": "4598150",
    "end": "4604739"
  },
  {
    "text": "eval, and apply, and so on, on\nthe right hand sides of all those recursion equations, then\nif it was a real good",
    "start": "4604740",
    "end": "4611929"
  },
  {
    "text": "Lisp, is a real one, then\nthe left hand side would also be Lisp.",
    "start": "4611930",
    "end": "4618219"
  },
  {
    "text": "So I made sense of\nthat definition.  Now whether or not there's an\nanswer isn't so obvious.",
    "start": "4618220",
    "end": "4625410"
  },
  {
    "text": "I can't attack that. Now these arguments that\nI'm giving you now are quite dangerous.",
    "start": "4625410",
    "end": "4630660"
  },
  {
    "text": "Let's look over here. These are limit arguments. We're talking about limits, and\nit's really calculus, or",
    "start": "4630660",
    "end": "4637020"
  },
  {
    "text": "topology, or something like\nthat, a kind of analysis. Now here's an argument\nthat you all believe.",
    "start": "4637020",
    "end": "4643380"
  },
  {
    "text": "And I want to make sure you\nrealize that I could be bullshitting you.",
    "start": "4643380",
    "end": "4649659"
  },
  {
    "text": "What is this?  u is the sum of 1/2, 1/4, and\n1/8, and so on, the sum of a",
    "start": "4649660",
    "end": "4660300"
  },
  {
    "text": "geometric series. And, of course, I could\nplay a game here. u minus one is 1/2, plus 1/4,\nplus 1/8, and so on.",
    "start": "4660300",
    "end": "4667570"
  },
  {
    "start": "4667570",
    "end": "4673590"
  },
  {
    "text": "What I could do here-- oops. There is a parentheses\nerror here.",
    "start": "4673590",
    "end": "4678920"
  },
  {
    "text": "But I can put here two times u\nminus one is one plus 1/2, plus 1/4, plus 1/8.",
    "start": "4678920",
    "end": "4683990"
  },
  {
    "text": " Can I fix that? ",
    "start": "4683990",
    "end": "4694010"
  },
  {
    "text": "Yes, well. ",
    "start": "4694010",
    "end": "4699520"
  },
  {
    "text": "But that gives me back two\ntimes u minus one is u,",
    "start": "4699520",
    "end": "4707850"
  },
  {
    "text": "therefore, we conclude\nthat u is two. And this actually is true. There's no problem like that.",
    "start": "4707850",
    "end": "4713910"
  },
  {
    "text": "But supposing I did something\ndifferent. Supposing I start up with\nsomething which",
    "start": "4713910",
    "end": "4719740"
  },
  {
    "text": "manifestly has no sum. v is one, plus two, plus four,\nplus 8, plus dot, dot, dot.",
    "start": "4719740",
    "end": "4727390"
  },
  {
    "text": "Well, v minus one is surely two,\nplus four, plus eight, plus dot, dot, dot. v minus one over two, gee,\nthat looks like v again.",
    "start": "4727390",
    "end": "4737409"
  },
  {
    "text": "From that I should be able\nto conclude that-- that's also wrong, apparently.",
    "start": "4737410",
    "end": "4743070"
  },
  {
    "text": "v equals minus one. ",
    "start": "4743070",
    "end": "4752454"
  },
  {
    "text": "That should be a minus one. And that's certainly\na false conclusion. ",
    "start": "4752455",
    "end": "4762000"
  },
  {
    "text": "So when you play with limits,\narguments that may work in one",
    "start": "4762000",
    "end": "4767300"
  },
  {
    "text": "case they may not work\nin some other case. You have to be very careful. The arguments have to\nbe well formed.",
    "start": "4767300",
    "end": "4775752"
  },
  {
    "text": "And I don't know, in general,\nwhat the story is about",
    "start": "4775752",
    "end": "4780790"
  },
  {
    "text": "arguments like this. We can read a pile of topology\nand find out.",
    "start": "4780790",
    "end": "4786060"
  },
  {
    "text": "But, surely, at least you\nunderstand now, why it might be some meaning to the things\nwe've been writing on the",
    "start": "4786060",
    "end": "4792230"
  },
  {
    "text": "blackboard. And you understand what\nthat might mean. So, I suppose, it's almost about\ntime for you to merit",
    "start": "4792230",
    "end": "4802900"
  },
  {
    "text": "being made a member of the\ngrand recursive order of lambda calculus hackers.",
    "start": "4802900",
    "end": "4809320"
  },
  {
    "text": "This is the badge. Because you now understand, for\nexample, what it says at",
    "start": "4809320",
    "end": "4814540"
  },
  {
    "text": "the very top, y F equals\nF y F. Thank you.",
    "start": "4814540",
    "end": "4821890"
  },
  {
    "text": "Are there any questions? Yes, Lev. AUDIENCE: With this, it seems\nthat then there's no need to",
    "start": "4821890",
    "end": "4828250"
  },
  {
    "text": "define, as you imply,\nto just remember a value, to apply it later.",
    "start": "4828250",
    "end": "4834090"
  },
  {
    "text": "Defines were kind of\na side-effect it seemed in the language. [INTERPOSING] are order dependent.",
    "start": "4834090",
    "end": "4839300"
  },
  {
    "text": "Does this eliminate the\nside-effect from the [INTERPOSING] PROFESSOR: The answer is, this\nis not the way these things",
    "start": "4839300",
    "end": "4846010"
  },
  {
    "text": "were implemented. Define, indeed is implemented as\nan operation that actually",
    "start": "4846010",
    "end": "4853830"
  },
  {
    "text": "modifies an environment\nstructure, changes the frame",
    "start": "4853830",
    "end": "4859000"
  },
  {
    "text": "that the define is\nexecuted in. And there are many reasons for\nthat, but a lot of this has to",
    "start": "4859000",
    "end": "4868440"
  },
  {
    "text": "do with making an interactive\nsystem. What this is saying is that if\nyou've made a system, and you",
    "start": "4868440",
    "end": "4874750"
  },
  {
    "text": "know you're not going to do any\ndebugging or anything like that, and you know everything\nthere is all at once, and you",
    "start": "4874750",
    "end": "4880930"
  },
  {
    "text": "want to say, what is\nthe meaning of a final set of equations? This gives you a\nmeaning for it. But in order to make an\ninteractive system, where you",
    "start": "4880930",
    "end": "4887740"
  },
  {
    "text": "can change the meaning of one\nthing without changing everything else, incrementally,\nyou can't do",
    "start": "4887740",
    "end": "4893580"
  },
  {
    "text": "that by implementing\nit this way. ",
    "start": "4893580",
    "end": "4900990"
  },
  {
    "text": "Yes. AUDIENCE: Another question\non your danger slide. It seemed that the two examples\nthat you gave had to",
    "start": "4900990",
    "end": "4907350"
  },
  {
    "text": "do with convergence and\nnon-convergence? And that may or may not have\nsomething to do with function",
    "start": "4907350",
    "end": "4913380"
  },
  {
    "text": "theory in a way which would\nlead you to think of it in terms of linear systems, or\nnon-linear systems. How does",
    "start": "4913380",
    "end": "4919710"
  },
  {
    "text": "this convergence relate to being\nable to see a priori what properties of that\nmight be violated?",
    "start": "4919710",
    "end": "4925430"
  },
  {
    "text": "PROFESSOR: I don't know. The answer is, I don't know\nunder what circumstances.",
    "start": "4925430",
    "end": "4930610"
  },
  {
    "text": "I don't know how to translate\nthat into less than an hour of talk more.",
    "start": "4930610",
    "end": "4936910"
  },
  {
    "text": "What are the conditions under\nwhich, for which we know that these things converge?",
    "start": "4936910",
    "end": "4942720"
  },
  {
    "text": "And v, all that was telling you\nthat arguments that are based on convergence are flaky\nif you don't know the",
    "start": "4942720",
    "end": "4950420"
  },
  {
    "text": "convergence beforehand. You can make wrong arguments. You can make deductions, as if\nyou know the answer, and not",
    "start": "4950420",
    "end": "4957810"
  },
  {
    "text": "be stopped somewhere by some\nobvious contradiction. AUDIENCE: So can we say then\nthat if F is a convergent",
    "start": "4957810",
    "end": "4963635"
  },
  {
    "text": "mathematical expression,\nthen the recursion property can be-- PROFESSOR: Well, I think there's\na technical kind of F,",
    "start": "4963635",
    "end": "4972739"
  },
  {
    "text": "there is a technical description\nof those F's that have the property that when\nyou iteratively apply them",
    "start": "4972740",
    "end": "4980790"
  },
  {
    "text": "like this, you converge. Things that are monotonic,\nand continuous, and",
    "start": "4980790",
    "end": "4988470"
  },
  {
    "text": "I forgot what else. There is a whole bunch of little\nconditions like that which have this property. Now the real problem is deducing\nfrom looking at the",
    "start": "4988470",
    "end": "4995820"
  },
  {
    "text": "F, its definition here, whether\nnot it has those properties, and that's\nvery hard.",
    "start": "4995820",
    "end": "5002010"
  },
  {
    "text": "The properties are easy. You can write them down. You can look in a book\nby Joe Stoy. It's a great book--",
    "start": "5002010",
    "end": "5008660"
  },
  {
    "text": "Stoy.  It's called, The Scott-Strachey\nMethod of",
    "start": "5008660",
    "end": "5017360"
  },
  {
    "text": "Denotational Semantics, and it's\nby Joe Stoy, MIT Press. ",
    "start": "5017360",
    "end": "5027960"
  },
  {
    "text": "And he works out all this in\ngreat detail, enough to horrify you. ",
    "start": "5027960",
    "end": "5035080"
  },
  {
    "text": "But it really is readable. ",
    "start": "5035080",
    "end": "5049150"
  },
  {
    "text": "OK, well, thank you. Time for the bigger\nbreak, I suppose. ",
    "start": "5049150",
    "end": "5076990"
  }
]