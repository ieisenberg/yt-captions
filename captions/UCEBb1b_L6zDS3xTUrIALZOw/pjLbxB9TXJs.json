[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help MIT\nOpenCourseWare continue to",
    "start": "0",
    "end": "6910"
  },
  {
    "text": "offer high-quality educational\nresources for free. To make a donation or view\nadditional materials from",
    "start": "6910",
    "end": "13460"
  },
  {
    "text": "hundreds of MIT courses, visit\nMIT OpenCourseWare at",
    "start": "13460",
    "end": "19290"
  },
  {
    "text": "ocw.mit.edu.  PROFESSOR: I want to finish up\nour little excursion into",
    "start": "19290",
    "end": "27070"
  },
  {
    "text": "searching and sorting, a very\nimportant topic in computing. How do you sort lists\nor databases?",
    "start": "27070",
    "end": "35060"
  },
  {
    "text": "How do you search them? And I want to finish\nit up with hashing.",
    "start": "35060",
    "end": "41140"
  },
  {
    "text": "Hashing is how dictionaries\nare implemented in Python.",
    "start": "41140",
    "end": "46670"
  },
  {
    "text": "And this leads to a\nvery efficient-- at least most of the\ntime-- search.",
    "start": "46670",
    "end": "53250"
  },
  {
    "text": "But it comes at the\ncost of space. So this is an example where one\ncan trade space for time.",
    "start": "53250",
    "end": "61969"
  },
  {
    "text": "So I want to start\nwith a simple example to explain hashing. And I'm going to begin by\nassuming that what we're",
    "start": "61970",
    "end": "69800"
  },
  {
    "text": "hashing is a set of integers.",
    "start": "69800",
    "end": "75480"
  },
  {
    "text": "So we want to build a set of\nintegers and detect whether or not a particular integer\nis in that set.",
    "start": "75480",
    "end": "83290"
  },
  {
    "text": "And we want to do\nthat quickly.",
    "start": "83290",
    "end": "88360"
  },
  {
    "text": "So the basic idea is we're going\nto take an integer--",
    "start": "88360",
    "end": "97610"
  },
  {
    "text": "call it i-- and we're going to hash it. I'll tell you what that\nmeans in a minute.",
    "start": "97610",
    "end": "104869"
  },
  {
    "text": "And what a hash function does\nis it converts i to a",
    "start": "104870",
    "end": "111420"
  },
  {
    "text": "different integer, perhaps,\nin some range.",
    "start": "111420",
    "end": "117090"
  },
  {
    "text": "So it, say, converts i to some\ninteger in the range 0 to k,",
    "start": "117090",
    "end": "129729"
  },
  {
    "text": "for some constant k. We're going to then use\nthis integer to index",
    "start": "129729",
    "end": "141659"
  },
  {
    "text": "into a list of lists.",
    "start": "141660",
    "end": "151320"
  },
  {
    "text": "So each of these is\ncalled a bucket.",
    "start": "151320",
    "end": "156580"
  },
  {
    "text": "And a bucket will itself\nbe a list. ",
    "start": "156580",
    "end": "161740"
  },
  {
    "text": "So this together is\ncalled a bucket. ",
    "start": "161740",
    "end": "169880"
  },
  {
    "text": "We've already seen that we can\nfind the i-th element of a list in constant time.",
    "start": "169880",
    "end": "177470"
  },
  {
    "text": " So when we ask whether some\nintegers in this set will hash",
    "start": "177470",
    "end": "187910"
  },
  {
    "text": "it, we'll go immediately to the\ncorrect bucket, the bucket",
    "start": "187910",
    "end": "194870"
  },
  {
    "text": "associated with that integer. And then we'll search the list\nat that bucket to see if the",
    "start": "194870",
    "end": "201430"
  },
  {
    "text": "integer is there. If this list is short enough,\nit will be very efficient.",
    "start": "201430",
    "end": "208129"
  },
  {
    "text": "All, right I realize that's\nvery abstract. But let's look at the code,\nwhich will make it much less abstract.",
    "start": "208130",
    "end": "214660"
  },
  {
    "start": "214660",
    "end": "227330"
  },
  {
    "text": "So the code starts with\nsomething very ugly that I'll apologize for. But very soon, we'll see\nhow to get rid of that.",
    "start": "227330",
    "end": "235030"
  },
  {
    "text": "I'm using a global variable here\nto say how many buckets there are going to be.",
    "start": "235030",
    "end": "241220"
  },
  {
    "text": "And I've very arbitrarily\nchosen 47. ",
    "start": "241220",
    "end": "247200"
  },
  {
    "text": "I then have a function called\ncreate, which uses this global variable and creates a\nlist of lists, each",
    "start": "247200",
    "end": "257620"
  },
  {
    "text": "element of which is empty. Because initially, we have\nno elements in the set.",
    "start": "257620",
    "end": "264595"
  },
  {
    "text": " When I want to insert an element\nin the set, I'll call",
    "start": "264595",
    "end": "273680"
  },
  {
    "text": "the function insert, which\nwill hash the element.",
    "start": "273680",
    "end": "281215"
  },
  {
    "text": "It doesn't actually even need\nto use the global numBuckets in this case, in fact.",
    "start": "281215",
    "end": "287639"
  },
  {
    "text": "And then append it to\nthe correct list. So it calls this function\nhashElem, which could hardly",
    "start": "287640",
    "end": "296950"
  },
  {
    "text": "be simpler. It just takes the remainder, the\nmodulus of the element and",
    "start": "296950",
    "end": "303780"
  },
  {
    "text": "the number of buckets. So that will give me a\nvalue between 0 and",
    "start": "303780",
    "end": "309490"
  },
  {
    "text": "numBuckets minus 1.  It gives me one of the\nlist, and I'll just",
    "start": "309490",
    "end": "315940"
  },
  {
    "text": "insert it at the end.  When I want to check for\nmembership, you'll see it's",
    "start": "315940",
    "end": "325300"
  },
  {
    "text": "quite simple. All I do is ask the question,\nis i in the list associated",
    "start": "325300",
    "end": "335760"
  },
  {
    "text": "with the correct bucket? ",
    "start": "335760",
    "end": "341250"
  },
  {
    "text": "Remove is a little bit more\ncomplicated, but in fact, we don't need to spend much\ntime looking at it now.",
    "start": "341250",
    "end": "347889"
  },
  {
    "text": "It's just some code. And the only reason it's\ncomplicated is Insert doesn't",
    "start": "347890",
    "end": "353290"
  },
  {
    "text": "look whether or not the element\nis already there. So it may occur multiple\ntimes in the list.",
    "start": "353290",
    "end": "358530"
  },
  {
    "text": "So I would have to remove\neach one of them. ",
    "start": "358530",
    "end": "365580"
  },
  {
    "text": "People see the basic\nstructure of this? ",
    "start": "365580",
    "end": "374240"
  },
  {
    "text": "Why a list of lists? Why don't I just, say, have a\nlist of Booleans, where I hash",
    "start": "374240",
    "end": "383780"
  },
  {
    "text": "the integer, and it's true or\nfalse, whether or not I've seen it, depending upon the\nvalue of that bucket?",
    "start": "383780",
    "end": "390660"
  },
  {
    "text": "Why can't I do that? ",
    "start": "390660",
    "end": "397690"
  },
  {
    "text": "Somebody?  Well, what's the property\nof this hash function?",
    "start": "397690",
    "end": "404430"
  },
  {
    "text": "The key issue here is\nthe hash function -- ",
    "start": "404430",
    "end": "413950"
  },
  {
    "text": "is many-to-one. ",
    "start": "413950",
    "end": "420850"
  },
  {
    "text": "That is to say, an infinite\nnumber of different integers will hash to the same value.",
    "start": "420850",
    "end": "428690"
  },
  {
    "text": "Because after all, I have\na set in which I can store any integer--",
    "start": "428690",
    "end": "434170"
  },
  {
    "text": "or any positive integer,\nat least-- and there are only 47 buckets.",
    "start": "434170",
    "end": "441660"
  },
  {
    "text": "So it's pretty obvious that many\nintegers will hash to the same bucket.",
    "start": "441660",
    "end": "447040"
  },
  {
    "text": " When two different elements hash\nto the same bucket, we",
    "start": "447040",
    "end": "455930"
  },
  {
    "text": "have what is called\na collision. ",
    "start": "455930",
    "end": "464889"
  },
  {
    "text": "There are lots of different\nways to handle collisions. What I've shown you here is\nprobably the simplest way,",
    "start": "464890",
    "end": "473170"
  },
  {
    "text": "which is called linear\nrehashing. ",
    "start": "473170",
    "end": "478550"
  },
  {
    "text": "I'm not actually rehashing.  I'm just keeping a list.",
    "start": "478550",
    "end": "483930"
  },
  {
    "text": " Does that makes sense?",
    "start": "483930",
    "end": "491570"
  },
  {
    "text": "Yes, thank you for-- I'm glad somebody\nhas a question. ",
    "start": "491570",
    "end": "498800"
  },
  {
    "text": "You have to ask loudly. AUDIENCE: When you take\nthe modulus 47, what does that return?",
    "start": "498800",
    "end": "505120"
  },
  {
    "text": " PROFESSOR: 0. AUDIENCE: So hashElem\nalways returns 0?",
    "start": "505120",
    "end": "513210"
  },
  {
    "text": "PROFESSOR: Well, no, sorry. It depends what I'm hashing. Sorry, I thought if you\nwere saying that if I",
    "start": "513210",
    "end": "518865"
  },
  {
    "text": "asked 47 mod 47. If I take 48 mod 47, I get 1.",
    "start": "518865",
    "end": "527394"
  },
  {
    "text": "If I take 49 mod 47-- it's the remainder. Maybe I should have called\nit just the remainder.",
    "start": "527395",
    "end": "533675"
  },
  {
    "text": " Look up. I'm about to throw\nsomething at you.",
    "start": "533675",
    "end": "539910"
  },
  {
    "text": "Ooh, I threw a curve ball. ",
    "start": "539910",
    "end": "549829"
  },
  {
    "text": "OK. What's the complexity here\nof the membership test? ",
    "start": "549830",
    "end": "560970"
  },
  {
    "text": "Kind of hard to analyze. Roughly speaking, or exactly,\nit will be the length of the",
    "start": "560970",
    "end": "571380"
  },
  {
    "text": "bucket, the size\nof the bucket. Now, I don't know how\nmany elements",
    "start": "571380",
    "end": "577710"
  },
  {
    "text": "will be in the bucket. But what will this depend on? ",
    "start": "577710",
    "end": "584250"
  },
  {
    "text": "It will depend upon the\nnumber of buckets. If I have a million buckets,\nI'll get a lot fewer",
    "start": "584250",
    "end": "592250"
  },
  {
    "text": "collisions than if I\nhave two buckets.",
    "start": "592250",
    "end": "597280"
  },
  {
    "text": "So let's look at an\nexample here. There's a small program\ncalled test.",
    "start": "597280",
    "end": "602490"
  },
  {
    "start": "602490",
    "end": "611700"
  },
  {
    "text": "I said numBuckets to\n47 in this case. And then I'm going to create\nit, create a set.",
    "start": "611700",
    "end": "619819"
  },
  {
    "text": "And then I'm going to put a\nbunch of integers in it, then",
    "start": "619820",
    "end": "625220"
  },
  {
    "text": "a few more, just for fun,\nincluding one very big integer, just to show\nthat it works.",
    "start": "625220",
    "end": "631180"
  },
  {
    "text": "Then I'm going to show you\nwhat the set looks like. And in fact, what we'll do is\nwe'll stop it here and see",
    "start": "631180",
    "end": "638430"
  },
  {
    "text": "what we get. ",
    "start": "638430",
    "end": "652960"
  },
  {
    "text": "So what we'll see here is, as\nyou would expect with that number of buckets, each of the\nsmall numbers hashes to a",
    "start": "652960",
    "end": "660650"
  },
  {
    "text": "separate thing. That's just the way\nremainder works. ",
    "start": "660650",
    "end": "666920"
  },
  {
    "text": "Not surprisingly-- in fact, it would be\ndisappointing if 325 didn't have the same value both\ntimes I inserted it.",
    "start": "666920",
    "end": "675200"
  },
  {
    "text": "So we say we happen to have\none bucket that's got two elements in it. Happen to be the same.",
    "start": "675200",
    "end": "680950"
  },
  {
    "text": "But this very big number\nhappened to hash to the same value of 30 as 34.",
    "start": "680950",
    "end": "687500"
  },
  {
    "text": "So here we have two\nelements in it. ",
    "start": "687500",
    "end": "693190"
  },
  {
    "text": "A good hash function has the\nproperty that it will widely",
    "start": "693190",
    "end": "699910"
  },
  {
    "text": "disperse the values you hash. So they end up in different\nbuckets, rather than some",
    "start": "699910",
    "end": "709740"
  },
  {
    "text": "stupid hash function that tends\nto put everything in the same bucket.",
    "start": "709740",
    "end": "715830"
  },
  {
    "text": "Now, let's see what happens if I\nchange the number of buckets",
    "start": "715830",
    "end": "723970"
  },
  {
    "text": "to, say, 3. ",
    "start": "723970",
    "end": "737240"
  },
  {
    "text": "Well, not surprisingly, we get\nsome very big buckets, because",
    "start": "737240",
    "end": "746770"
  },
  {
    "text": "there are relatively\nfew choices. So what we see here is we have\na genuine trade off between",
    "start": "746770",
    "end": "754260"
  },
  {
    "text": "time and space.  If the number of buckets is\nlarge relative to the number",
    "start": "754260",
    "end": "763550"
  },
  {
    "text": "of elements that we insert in\nthe table, then looking at",
    "start": "763550",
    "end": "770980"
  },
  {
    "text": "whether or not an element in\nit is roughly order one. Because these lists will\nbe very short.",
    "start": "770980",
    "end": "779949"
  },
  {
    "text": "So we can actually look up\nsomething in constant time if we dedicate enough space\nto the hash table.",
    "start": "779950",
    "end": "786759"
  },
  {
    "text": " If the hash table\nis very small--",
    "start": "786760",
    "end": "793310"
  },
  {
    "text": "the reduction ad absurdium\ncase of one bucket-- then it's order n.",
    "start": "793310",
    "end": "800610"
  },
  {
    "text": "It's not constant time. It's linear in the number\nof elements. ",
    "start": "800610",
    "end": "806040"
  },
  {
    "text": "Typically, when people use hash\ntables, they make the hash tables big enough that for\nall intents and purposes,",
    "start": "806040",
    "end": "815240"
  },
  {
    "text": "you can assume that looking\nsomething up is constant time, order 1.",
    "start": "815240",
    "end": "822370"
  },
  {
    "text": "And that, in fact, is what\nPython does with dictionaries.",
    "start": "822370",
    "end": "828060"
  },
  {
    "text": "It hashes the keys and chooses\na big enough table so that",
    "start": "828060",
    "end": "835640"
  },
  {
    "text": "looking up whether or not\nsomething is in a dictionary can be done in constant time.",
    "start": "835640",
    "end": "842600"
  },
  {
    "text": "If it then notices that the\ntable is too small, because you've ended up putting a lot\nof elements in it, it just",
    "start": "842600",
    "end": "851390"
  },
  {
    "text": "re-does it and gets\na bigger table. ",
    "start": "851390",
    "end": "857660"
  },
  {
    "text": "So hashing is an extremely\npowerful technique. And it's used all the time for\nquite complicated things.",
    "start": "857660",
    "end": "867420"
  },
  {
    "text": "Now is it useful here only when\nwe want to store ints? No. It would be kind of bad\nif that were the case.",
    "start": "867420",
    "end": "874810"
  },
  {
    "text": "In fact, any kind of immutable\nobject can be hashed.",
    "start": "874810",
    "end": "880225"
  },
  {
    "text": " Now, you may have wondered\nwhy the keys in",
    "start": "880225",
    "end": "888569"
  },
  {
    "text": "dicts have to be immutable. And that's so that they\ncan be hashed.",
    "start": "888570",
    "end": "895070"
  },
  {
    "text": "Why does it have to\nbe immutable? Well, imagine that you\nused a list as a key.",
    "start": "895070",
    "end": "900970"
  },
  {
    "text": "You'd hash it when you put the\nlist in the hash table. But then you might mutate it,\nand the next time you hashed",
    "start": "900970",
    "end": "906459"
  },
  {
    "text": "it, you'd get a different value,\nand so you wouldn't be able to find it again.",
    "start": "906460",
    "end": "912110"
  },
  {
    "text": "So you need it to be a kind of\nobject, where every time you apply the hash function,\nyou get the same value.",
    "start": "912110",
    "end": "918384"
  },
  {
    "start": "918385",
    "end": "928370"
  },
  {
    "text": "I don't need to show you\nthat this works. You'll just believe\nme, I'm sure. Let's look at a slightly more\ncomplicated hash function.",
    "start": "928370",
    "end": "936600"
  },
  {
    "text": " Here, I want to hash something\nthat could be",
    "start": "936600",
    "end": "943220"
  },
  {
    "text": "either an int or a string. So I first check and\nsee if it's an int.",
    "start": "943220",
    "end": "948480"
  },
  {
    "text": "If so, I'll set the\nvalue to be e. Then down at the bottom, I'll do\nthe modulus operator again.",
    "start": "948480",
    "end": "959040"
  },
  {
    "text": "But if it's a string,\nI'm going to first convert e to an int.",
    "start": "959040",
    "end": "966150"
  },
  {
    "text": "And this is basically the trick\nthat people typically use when they're doing hashing,\nis they convert",
    "start": "966150",
    "end": "971940"
  },
  {
    "text": "whatever thing they have,\nto some integer.  People do this with all\nsorts of things.",
    "start": "971940",
    "end": "979519"
  },
  {
    "text": "For example, this is the way\nairport security systems today do face recognition.",
    "start": "979520",
    "end": "987250"
  },
  {
    "text": "They hash every picture of a\nface to an integer, and then look it up.",
    "start": "987250",
    "end": "994009"
  },
  {
    "text": "So we can see it here. The way I'm doing it--\nand the details don't very much matter--",
    "start": "994010",
    "end": "1000000"
  },
  {
    "text": "is I'm going to do it a\ncharacter at a time, do a",
    "start": "1000000",
    "end": "1005350"
  },
  {
    "text": "shift ord of C, takes the\nASCII, the internal",
    "start": "1005350",
    "end": "1010540"
  },
  {
    "text": "representation bits\nof each character.",
    "start": "1010540",
    "end": "1015949"
  },
  {
    "text": "And again, I don't care\nif you understand how the code works here. What I just want you to see is\nthat it's not very long.",
    "start": "1015950",
    "end": "1023579"
  },
  {
    "text": "And in, fact it's typically\nfairly simple to hash almost any kind of an object.",
    "start": "1023580",
    "end": "1029880"
  },
  {
    "text": "Because deep down, we know\nthat every object is represented by some string of\nbits in the computer's memory.",
    "start": "1029880",
    "end": "1037380"
  },
  {
    "text": "And we can always convert a\nstring of bits to an integer. ",
    "start": "1037380",
    "end": "1045750"
  },
  {
    "text": "All right, so that's hashing, a\nvery powerful and extremely useful technique.",
    "start": "1045750",
    "end": "1051690"
  },
  {
    "text": " Yeah?",
    "start": "1051690",
    "end": "1058250"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] you're returning something,\nwill you always find the remainder, or can you\nuse [INAUDIBLE]?",
    "start": "1058250",
    "end": "1065656"
  },
  {
    "text": "PROFESSOR: There are many\ndifferent ways of doing hash. All the hash function has to\ndo is convert its argument",
    "start": "1065656",
    "end": "1074770"
  },
  {
    "text": "into an integer in some way or\nanother within a fixed range. ",
    "start": "1074770",
    "end": "1081420"
  },
  {
    "text": "It happens to be that remainder\nis a very simple way to do that and is often used.",
    "start": "1081420",
    "end": "1087960"
  },
  {
    "text": "There's a whole theory\nabout hash functions. You can read about them in\ngory detail on Wikipedia.",
    "start": "1087960",
    "end": "1095730"
  },
  {
    "text": "The math can actually be quite\ncomplicated, and there's no real need to understand it. I typically do something like\ndividing by a prime number,",
    "start": "1095730",
    "end": "1103780"
  },
  {
    "text": "which is known to have\ngood properties. But, again, you can get carried\naway with this.",
    "start": "1103780",
    "end": "1110000"
  },
  {
    "text": "And it's usually not worth the\ntrouble, unless you're very deeply involved in something.",
    "start": "1110000",
    "end": "1117550"
  },
  {
    "text": "OK? And then I've got another\nprogram that does this, but again, I don't think much\nwould be served by",
    "start": "1117550",
    "end": "1123750"
  },
  {
    "text": "running it for you. Any questions about hashing? ",
    "start": "1123750",
    "end": "1130970"
  },
  {
    "text": "Yes? AUDIENCE: So does this only\nwork because you said [INAUDIBLE] Python treats lists\nin a certain way?",
    "start": "1130970",
    "end": "1137513"
  },
  {
    "text": "You said other languages, you\ncan't have this constant time list search.",
    "start": "1137513",
    "end": "1142825"
  },
  {
    "text": "So how would hashing work? PROFESSOR: So the question is\nthat, because Python gives us",
    "start": "1142826",
    "end": "1148410"
  },
  {
    "text": "constant-time looking up for\nlists is the key to making this work --",
    "start": "1148410",
    "end": "1153710"
  },
  {
    "text": "every programming language\nI know has some concept that's similar.",
    "start": "1153710",
    "end": "1159680"
  },
  {
    "text": "In, say, C, it's not a list,\nbut it's an array. And so in C, you would use\narray for this purpose?",
    "start": "1159680",
    "end": "1166620"
  },
  {
    "text": "In Java, you would use the\narrays for this purpose? But yes, you can do this in\nany programming language,",
    "start": "1166620",
    "end": "1174730"
  },
  {
    "text": "because every reasonable\nprogramming language has some way to create the equivalent\nof a list, in which you can",
    "start": "1174730",
    "end": "1184380"
  },
  {
    "text": "get a particular index\nin constant time. So it's a universally\nuseful technique.",
    "start": "1184380",
    "end": "1190440"
  },
  {
    "text": " Good question. Anything else?",
    "start": "1190440",
    "end": "1196010"
  },
  {
    "text": "If not, we're about to abandon\nsearching and sorting, and in",
    "start": "1196010",
    "end": "1201160"
  },
  {
    "text": "fact, abandon algorithms\nin general for a while. ",
    "start": "1201160",
    "end": "1207650"
  },
  {
    "text": "Bounced right off his hands. I will not sign you to\na baseball contract.",
    "start": "1207650",
    "end": "1213110"
  },
  {
    "text": " Pardon?",
    "start": "1213110",
    "end": "1219460"
  },
  {
    "text": "Yes, I threw him\na Butterfinger? Oh, it's terrible. Boy, your jokes are\nworse than mine.",
    "start": "1219460",
    "end": "1225330"
  },
  {
    "start": "1225330",
    "end": "1231490"
  },
  {
    "text": "I now want to move\non to the last-- go back to Python, away from\nalgorithms, away from computer",
    "start": "1231490",
    "end": "1239540"
  },
  {
    "text": "science in general, and talk\nabout the last three major linguistic concepts in Python,\nexceptions, classes, and then",
    "start": "1239540",
    "end": "1248240"
  },
  {
    "text": "later iterators.  Let's start with exceptions,\nbecause we've already seen",
    "start": "1248240",
    "end": "1254309"
  },
  {
    "text": "them, and they're\npretty simple. Exceptions are everywhere\nin Python.",
    "start": "1254310",
    "end": "1262250"
  },
  {
    "text": "And we've certainly seen\nplenty of them all semester already. ",
    "start": "1262250",
    "end": "1271960"
  },
  {
    "text": "We get them if we set some\nlist to, say [1,2]",
    "start": "1271960",
    "end": "1282970"
  },
  {
    "text": "and then I asked for a test of\n12, I get an index error.",
    "start": "1282970",
    "end": "1290539"
  },
  {
    "text": "This is an exception.  We've got exceptions when we've\ntried to convert things",
    "start": "1290540",
    "end": "1297150"
  },
  {
    "text": "to incorrect types. So if I go into test, I'll\nget a type error.",
    "start": "1297150",
    "end": "1304820"
  },
  {
    "text": "Anything that ends in the word\n\"error\" is a built-in kind of exception in Python.",
    "start": "1304820",
    "end": "1311630"
  },
  {
    "text": "We've got them when we\naccessed, nonexistent variables, a name error.",
    "start": "1311630",
    "end": "1317429"
  },
  {
    "text": "So there are a whole bunch\nof these things. In each of these cases--",
    "start": "1317430",
    "end": "1322490"
  },
  {
    "text": "here, I'm just kind of playing\naround in Python. And it printed an error message,\nand it stopped.",
    "start": "1322490",
    "end": "1330930"
  },
  {
    "text": "These kind of exceptions are\ncalled unhandled exceptions,",
    "start": "1330930",
    "end": "1338500"
  },
  {
    "text": "where they cause the program\nto effectively crash. ",
    "start": "1338500",
    "end": "1364309"
  },
  {
    "text": "The program just\nstops running.  And I suspect that some of you\nhave written programs in which",
    "start": "1364310",
    "end": "1373650"
  },
  {
    "text": "this has happened. In fact, is there anybody here\nwho has not written a program",
    "start": "1373650",
    "end": "1379250"
  },
  {
    "text": "that crashed because of an\nunhandled exception? ",
    "start": "1379250",
    "end": "1384600"
  },
  {
    "text": "Good. For those of you watching\non TV, no hands went up.",
    "start": "1384600",
    "end": "1389730"
  },
  {
    "text": " Almost every day, I write a\nprogram that crashes because",
    "start": "1389730",
    "end": "1394900"
  },
  {
    "text": "of an unhandled exception. On the other hand, once my\nprogram is debugged--",
    "start": "1394900",
    "end": "1402140"
  },
  {
    "text": "once your program is\ndebugged-- this should never happen. Because there are mechanisms\nin Python for handling",
    "start": "1402140",
    "end": "1410090"
  },
  {
    "text": "exceptions. And in fact, as we'll see, it's\na perfectly valid flow of",
    "start": "1410090",
    "end": "1417700"
  },
  {
    "text": "control concept. You will sometimes write\nprograms that are intended to raise exceptions.",
    "start": "1417700",
    "end": "1424760"
  },
  {
    "text": "And then you'll catch the\nexception and do something useful with it. ",
    "start": "1424760",
    "end": "1431680"
  },
  {
    "text": "The way we use exceptions\nis in something called a try-except block.",
    "start": "1431680",
    "end": "1439080"
  },
  {
    "text": "So you write the word \"try,\" and\nthen you have some code,",
    "start": "1439080",
    "end": "1447080"
  },
  {
    "text": "and then \"except,\" and\nthen some more code.",
    "start": "1447080",
    "end": "1452325"
  },
  {
    "start": "1452325",
    "end": "1457740"
  },
  {
    "text": "What the interpreter does is it\nstarts executing this code.",
    "start": "1457740",
    "end": "1464059"
  },
  {
    "text": "If it gets through this code\nwithout raising any kind of an exception, it jumps to the code",
    "start": "1464060",
    "end": "1470289"
  },
  {
    "text": "following the except block. ",
    "start": "1470290",
    "end": "1475330"
  },
  {
    "text": "On the other hand, if an\nexception gets raised here, it",
    "start": "1475330",
    "end": "1480659"
  },
  {
    "text": "immediately stops executing\nthis code and jumps to the start of this code, the code\nassociated with the except,",
    "start": "1480660",
    "end": "1489940"
  },
  {
    "text": "and executes that. And, then when it finishes this,\nit again goes to the",
    "start": "1489940",
    "end": "1495600"
  },
  {
    "text": "code following the except.  Just like an if, you can\nnest these things.",
    "start": "1495600",
    "end": "1504760"
  },
  {
    "text": "It's just a control concept. It's nothing more.",
    "start": "1504760",
    "end": "1511350"
  },
  {
    "text": "Let's look at an example. ",
    "start": "1511350",
    "end": "1531940"
  },
  {
    "text": "So here's readVal.  This is a function.",
    "start": "1531940",
    "end": "1538080"
  },
  {
    "text": "It's a polymorphic function. Its first argument is\nof type 'type'.",
    "start": "1538080",
    "end": "1545550"
  },
  {
    "text": "Remember-- and you'll hear me say this a\n1,000 more times at least--",
    "start": "1545550",
    "end": "1550760"
  },
  {
    "text": "in Python, everything is an\nobject and can be manipulated by the program.",
    "start": "1550760",
    "end": "1557200"
  },
  {
    "text": "It's one of the beauties\nof Python. It's something that's not true\nin many programming languages.",
    "start": "1557200",
    "end": "1563860"
  },
  {
    "text": "So types are objects, just\nlike ints or floats.",
    "start": "1563860",
    "end": "1570220"
  },
  {
    "text": "So the first argument to\nreadVal is a type. And then there are two strings,\nthe request message",
    "start": "1570220",
    "end": "1577740"
  },
  {
    "text": "and the error message. It then sets a local variable,\nnumTries, to 0.",
    "start": "1577740",
    "end": "1586730"
  },
  {
    "text": "And while numTries is less than\n4, it sets val equal to",
    "start": "1586730",
    "end": "1592169"
  },
  {
    "text": "raw input, printing the\nrequest message. ",
    "start": "1592170",
    "end": "1598830"
  },
  {
    "text": "And then it tries to convert val\nto valType, whatever that",
    "start": "1598830",
    "end": "1605409"
  },
  {
    "text": "happens to be. And if it succeeds,\nit returns it.",
    "start": "1605410",
    "end": "1611950"
  },
  {
    "text": "On the other hand, if during\nthis attempt to convert it an exception is raised--",
    "start": "1611950",
    "end": "1618470"
  },
  {
    "text": "for example, the user is asked\nto input an integer, and they",
    "start": "1618470",
    "end": "1623720"
  },
  {
    "text": "type in the letter b, which\ncan't be converted to an int-- then a type error exception\nwill be raised, or a value",
    "start": "1623720",
    "end": "1634130"
  },
  {
    "text": "error exception. And if a value error exception\nis raised, it prints the error",
    "start": "1634130",
    "end": "1639809"
  },
  {
    "text": "message, increases numTries by\n1, and goes back to the top of",
    "start": "1639810",
    "end": "1646740"
  },
  {
    "text": "the y loop.  If it goes through this y loop\ntoo many times, it leaves,",
    "start": "1646740",
    "end": "1655740"
  },
  {
    "text": "raising the type error with the\nmessage that the argument \"numTries",
    "start": "1655740",
    "end": "1660880"
  },
  {
    "text": "exceeded.\" All right.",
    "start": "1660880",
    "end": "1666970"
  },
  {
    "text": "Let's run this and\nsee what happens. ",
    "start": "1666970",
    "end": "1690990"
  },
  {
    "text": "Every once in a while,\nfunny things happen. When that happens, somehow,\nclicking in this window, and",
    "start": "1690990",
    "end": "1698430"
  },
  {
    "text": "then clicking back in\nthat window tends to make it work again. This is a bug in Python.",
    "start": "1698430",
    "end": "1704290"
  },
  {
    "start": "1704290",
    "end": "1710420"
  },
  {
    "text": "So it's now asked me\nto enter an int. If I enter an int, everything\nis good.",
    "start": "1710420",
    "end": "1720870"
  },
  {
    "text": "It just prints it. On the other hand, if I run it,\nand I enter the letter A,",
    "start": "1720870",
    "end": "1731630"
  },
  {
    "text": "it will give me another\nchance. And now I can enter an\nint, and it's happy.",
    "start": "1731630",
    "end": "1739190"
  },
  {
    "start": "1739190",
    "end": "1750269"
  },
  {
    "text": "All right. Now, suppose I am unhappy with\nthe fact that if four times in",
    "start": "1750270",
    "end": "1757290"
  },
  {
    "text": "a row I've failed to enter an\nint, something bad happens. It comes back, and it\nraises an exception.",
    "start": "1757290",
    "end": "1765110"
  },
  {
    "text": "Well, I can catch that in the\ncode that calls readVal.",
    "start": "1765110",
    "end": "1779049"
  },
  {
    "text": "So here at the top level, I'm\ngoing to try readVal. ",
    "start": "1779050",
    "end": "1784480"
  },
  {
    "text": "And then I'm going to say,\nexcept if a type error is raised, print the argument\nreturned by that exception.",
    "start": "1784480",
    "end": "1792340"
  },
  {
    "text": " So this is what's called the\nhandler for the exception.",
    "start": "1792340",
    "end": "1798320"
  },
  {
    "text": " And so I don't have to crash\nwhen the exception is raised.",
    "start": "1798320",
    "end": "1805030"
  },
  {
    "text": "But I can actually deal with it\nand do something sensible.",
    "start": "1805030",
    "end": "1811030"
  },
  {
    "text": "If following the word \"except,\"\nas you see over there, I have not listed any\nexception names, then I'll go",
    "start": "1811030",
    "end": "1822370"
  },
  {
    "text": "to the except clause\nfor all exceptions. Doesn't matter what\nthe exception is. I will go there.",
    "start": "1822370",
    "end": "1829649"
  },
  {
    "text": "So I can write code that\ncaptures any exception. ",
    "start": "1829650",
    "end": "1838610"
  },
  {
    "text": "OK. Usually, that's not as good a\nthing, because it shows that I did not anticipate what the\nexception might be.",
    "start": "1838610",
    "end": "1845510"
  },
  {
    "text": " But you can see that\nthis is a pretty",
    "start": "1845510",
    "end": "1850680"
  },
  {
    "text": "powerful programming paradigm. I can write this fairly compact\nreadVal function",
    "start": "1850680",
    "end": "1858080"
  },
  {
    "text": "that's pretty robust. It's polymorphic, it can take\nin what the error messages",
    "start": "1858080",
    "end": "1864130"
  },
  {
    "text": "are, and it can try as\nmany times as I want. ",
    "start": "1864130",
    "end": "1870900"
  },
  {
    "text": "Yeah? AUDIENCE: [INAUDIBLE] after\ntype error [INAUDIBLE]?",
    "start": "1870900",
    "end": "1876649"
  },
  {
    "text": "AUDIENCE: PROFESSOR: You'll note\nthat when I raised the exception type error after it, I\nhad an open [UNINTELLIGIBLE]",
    "start": "1876650",
    "end": "1883330"
  },
  {
    "text": "a string. So what this basically says is\nthat an exception can have",
    "start": "1883330",
    "end": "1890030"
  },
  {
    "text": "associated with it a\nset of arguments, a sequence of arguments.",
    "start": "1890030",
    "end": "1895299"
  },
  {
    "text": "And I've just chosen to call the\nfirst of the arguments s,",
    "start": "1895300",
    "end": "1900360"
  },
  {
    "text": "so that I could then print it. So this is a fairly common\nparadigm, that you associate a",
    "start": "1900360",
    "end": "1906810"
  },
  {
    "text": "message with an exception,\nexplaining the exception. Since after all, type error is\nnot all that meaningful.",
    "start": "1906810",
    "end": "1915750"
  },
  {
    "text": "And this tells me why it\nwas raised, that I tried too many times.",
    "start": "1915750",
    "end": "1921030"
  },
  {
    "text": "OK, does it make sense? Anything else? ",
    "start": "1921030",
    "end": "1927980"
  },
  {
    "text": "Yeah? AUDIENCE: [INAUDIBLE] ",
    "start": "1927980",
    "end": "1933586"
  },
  {
    "text": "before you said [INAUDIBLE]? PROFESSOR: Well, what we'll see\nwhen I execute something",
    "start": "1933586",
    "end": "1942340"
  },
  {
    "text": "like assert false, it's actually\nraising an exception.",
    "start": "1942340",
    "end": "1954010"
  },
  {
    "text": "It's raising an assertion\nerror exception. And so I can actually catch that\nand do something with it.",
    "start": "1954010",
    "end": "1961560"
  },
  {
    "text": "I've been using these\nasserts just basically to stop the program. But we've also seen that\nsometimes in functions, we use",
    "start": "1961560",
    "end": "1969290"
  },
  {
    "text": "assertions to check the types\nof the arguments. But if you don't catch that\nexception, then the program",
    "start": "1969290",
    "end": "1976559"
  },
  {
    "text": "crashes with the wrong\narguments, without doing anything useful. Because that's just an\nexception, I can catch it, and",
    "start": "1976560",
    "end": "1985040"
  },
  {
    "text": "then do something useful. So it's, again, just\nan example of that.",
    "start": "1985040",
    "end": "1991250"
  },
  {
    "text": "We're going to try your\nhands once more. I'll throw you a different\nkind of candy.",
    "start": "1991250",
    "end": "1996860"
  },
  {
    "text": "And this time he caught it. Two for two. ",
    "start": "1996860",
    "end": "2005360"
  },
  {
    "text": "Very powerful. A very useful mechanism.",
    "start": "2005360",
    "end": "2012140"
  },
  {
    "text": "You can use them for sort\nof catching errors, as we've done here. ",
    "start": "2012140",
    "end": "2019100"
  },
  {
    "text": "They are frequently used in\nsituations where you are getting input from a user.",
    "start": "2019100",
    "end": "2026350"
  },
  {
    "text": "So for example, if you were\nwriting a text editor, and you wanted to open up a file, and\nyou typed in the file name,",
    "start": "2026350",
    "end": "2034710"
  },
  {
    "text": "and it didn't exist, you would\nin Python get an error message when you try to open\nthat file.",
    "start": "2034710",
    "end": "2041130"
  },
  {
    "text": "It would raise an exception,\n\"File Not Found,\" basically, which you could then catch, and\nthen print to the user a",
    "start": "2041130",
    "end": "2049870"
  },
  {
    "text": "useful error message saying,\n\"File Not Found.\" Similarly, if you try and write\nto a file that already",
    "start": "2049870",
    "end": "2057510"
  },
  {
    "text": "exists, you can get an exception\nsaying, do you really want to overwrite\nthis file?",
    "start": "2057510",
    "end": "2064649"
  },
  {
    "text": "And ask the user. So it's very commonly\nused in a lot of programs as a mechanism.",
    "start": "2064650",
    "end": "2071800"
  },
  {
    "text": "And now, as we go on and see\nmore and more code, you'll see that I'm going to start using\nexceptions fairly frequently",
    "start": "2071800",
    "end": "2079850"
  },
  {
    "text": "as a flow of control\nmechanism. It makes certain kinds of\ncode easier to write.",
    "start": "2079850",
    "end": "2085830"
  },
  {
    "text": " All right. That's all I have to say\nabout exceptions.",
    "start": "2085830",
    "end": "2093230"
  },
  {
    "text": "Simple but useful mechanism. Now, on to something\nthat's even more",
    "start": "2093230",
    "end": "2099900"
  },
  {
    "text": "useful, but not so simple.  It is probably the\ndistinguishing thing, not only",
    "start": "2099900",
    "end": "2108770"
  },
  {
    "text": "in Python, but in\na whole class of modern programming languages.",
    "start": "2108770",
    "end": "2115620"
  },
  {
    "text": "And that's the notion\nof a class. ",
    "start": "2115620",
    "end": "2126230"
  },
  {
    "text": "I'm not going to finish\nit today. I'm barely going to scratch\nthe surface of it today.",
    "start": "2126230",
    "end": "2132220"
  },
  {
    "text": "But we're going to start leading\nup and I will pretty much finish it on Thursday. ",
    "start": "2132220",
    "end": "2139880"
  },
  {
    "text": "We've already seen the notion of\na module, which has been a",
    "start": "2139880",
    "end": "2152099"
  },
  {
    "text": "collection of related\nfunctions. ",
    "start": "2152100",
    "end": "2161480"
  },
  {
    "text": "So, for example, we've seen code\nthat includes something",
    "start": "2161480",
    "end": "2166660"
  },
  {
    "text": "like import math. ",
    "start": "2166660",
    "end": "2173160"
  },
  {
    "text": "And that provided me\nwith access to functions like math.log.",
    "start": "2173160",
    "end": "2178619"
  },
  {
    "start": "2178620",
    "end": "2183710"
  },
  {
    "text": "What the module mechanism does\nin the import mechanism, it makes it convenient\nto import a lot of",
    "start": "2183710",
    "end": "2192690"
  },
  {
    "text": "related things at once. And then we use this dot\nnotation to disambiguate, to",
    "start": "2192690",
    "end": "2207920"
  },
  {
    "text": "tell us, well, which log. Typically, there's probably\nonly one log function.",
    "start": "2207920",
    "end": "2214760"
  },
  {
    "text": "But certainly, you might imagine\nthat set.member and",
    "start": "2214760",
    "end": "2223540"
  },
  {
    "text": "table.member would\nbe different, and",
    "start": "2223540",
    "end": "2229940"
  },
  {
    "text": "that both might exist. ",
    "start": "2229940",
    "end": "2235250"
  },
  {
    "text": "And as we've said before, the\ndot notation avoids conflicts by disambiguating.",
    "start": "2235250",
    "end": "2241280"
  },
  {
    "start": "2241280",
    "end": "2251460"
  },
  {
    "text": "OK. That's a module. What a class is, it is like a\nmodule, but it's not just a",
    "start": "2251460",
    "end": "2261100"
  },
  {
    "text": "collection of functions. A class is a collection of data\nand functions, functions",
    "start": "2261100",
    "end": "2284010"
  },
  {
    "text": "that operate on that data.  They are bound together, so that\nyou can pass an object",
    "start": "2284010",
    "end": "2293520"
  },
  {
    "text": "from one part of a program\nto another. And the part of the program\nto which you pass it",
    "start": "2293520",
    "end": "2301950"
  },
  {
    "text": "automatically gets access to the\nfunctions associated with",
    "start": "2301950",
    "end": "2307680"
  },
  {
    "text": "that type of object. ",
    "start": "2307680",
    "end": "2313670"
  },
  {
    "text": "And this is really the key\nto what people call object-oriented programming,\na very popular buzzword.",
    "start": "2313670",
    "end": "2322430"
  },
  {
    "start": "2322430",
    "end": "2333150"
  },
  {
    "text": "So we've already seen that kind\nof thing, where if we pass a list from one function\nto another, we can write",
    "start": "2333150",
    "end": "2341690"
  },
  {
    "text": "something like L.append,\nsome value.",
    "start": "2341690",
    "end": "2347775"
  },
  {
    "start": "2347775",
    "end": "2356690"
  },
  {
    "text": "The data and functions\nassociated with an object are",
    "start": "2356690",
    "end": "2361760"
  },
  {
    "text": "called that object's\nattributes. ",
    "start": "2361760",
    "end": "2372510"
  },
  {
    "text": "So you can think of this as a\nway to associate attributes",
    "start": "2372510",
    "end": "2381670"
  },
  {
    "text": "with objects. ",
    "start": "2381670",
    "end": "2391400"
  },
  {
    "text": "Now, I've been talking about\ndata and functions as if they're different\nkinds of things.",
    "start": "2391400",
    "end": "2397720"
  },
  {
    "text": "In fact, they're not really,\nbecause they're just objects. In Python, everything is an\nobject, including, as we'll",
    "start": "2397720",
    "end": "2405359"
  },
  {
    "text": "see on Thursday, the class\nitself is an object.",
    "start": "2405360",
    "end": "2410570"
  },
  {
    "text": "When people talk about objects\nand object-oriented programming, they often use a\nmessage passing metaphor.",
    "start": "2410570",
    "end": "2421570"
  },
  {
    "text": "And I want to emphasize it's\nnothing more than a metaphor. ",
    "start": "2421570",
    "end": "2428980"
  },
  {
    "text": "And I almost hesitate to bring\nit up, because it makes it all sound more complicated\nthan it is.",
    "start": "2428980",
    "end": "2435460"
  },
  {
    "text": "But you will see this phrase\nin the literature. People will use it. So you need to know\nwhat it is.",
    "start": "2435460",
    "end": "2442050"
  },
  {
    "text": "The basic metaphor is that when\nI write something like",
    "start": "2442050",
    "end": "2448970"
  },
  {
    "text": "L.append, I am passing the\nmessage append e to the object",
    "start": "2448970",
    "end": "2457690"
  },
  {
    "text": "L. And then there's a mechanism\nfor looking up what",
    "start": "2457690",
    "end": "2463970"
  },
  {
    "text": "that object means, what\nthat message means. And then the object, L, executes\nthat message, and",
    "start": "2463970",
    "end": "2473270"
  },
  {
    "text": "does something.  So, for example, if I had a\nclass called Circle, I might",
    "start": "2473270",
    "end": "2489150"
  },
  {
    "text": "pass the object C -- the message area, which would\ncause this object to return",
    "start": "2489150",
    "end": "2496850"
  },
  {
    "text": "the area of its own area, the\narea of the circle that is that object.",
    "start": "2496850",
    "end": "2502370"
  },
  {
    "text": " Again, nothing dramatic\ngoing on here.",
    "start": "2502370",
    "end": "2508510"
  },
  {
    "text": "If you just think of this as\na fancy way of writing functions, you'll be\nabsolutely correct.",
    "start": "2508510",
    "end": "2517000"
  },
  {
    "text": "But I did think you should\nhear about this metaphor. I add by the way --\nshould have--",
    "start": "2517000",
    "end": "2525160"
  },
  {
    "text": "I've been using the word... Method is a function associated\nwith an object.",
    "start": "2525160",
    "end": "2538290"
  },
  {
    "start": "2538290",
    "end": "2549110"
  },
  {
    "text": "So in this case, the method area\nis associated with the",
    "start": "2549110",
    "end": "2554280"
  },
  {
    "text": "object C. And purists would say,\nalways refer to append as",
    "start": "2554280",
    "end": "2560610"
  },
  {
    "text": "a method, rather than a\nfunction, because we use the dot notation to get to it, and\nit's always associated with",
    "start": "2560610",
    "end": "2568890"
  },
  {
    "text": "some object of type list. ",
    "start": "2568890",
    "end": "2578800"
  },
  {
    "text": "Now, just as data can have\ntypes, objects, as we know,",
    "start": "2578800",
    "end": "2586310"
  },
  {
    "text": "have types. What a class is is it's a\ncollection of objects with",
    "start": "2586310",
    "end": "2596290"
  },
  {
    "text": "identical characteristics\nthat form a type.",
    "start": "2596290",
    "end": "2603870"
  },
  {
    "text": "So we can use classes to\nintroduce new types into the programming environment.",
    "start": "2603870",
    "end": "2610490"
  },
  {
    "text": "So as you think about\nexisting things-- now, I won't put that up,\nbecause it will disappear",
    "start": "2610490",
    "end": "2617569"
  },
  {
    "text": "behind the screen. We've looked at things\nlike lists and dict.",
    "start": "2617570",
    "end": "2626365"
  },
  {
    "start": "2626365",
    "end": "2631980"
  },
  {
    "text": "What these are are\nbuilt-in classes. ",
    "start": "2631980",
    "end": "2640240"
  },
  {
    "text": "They happen to be classes that\nare so useful that somebody",
    "start": "2640240",
    "end": "2646960"
  },
  {
    "text": "decided they should be part of\nthe language, they should have efficient implementations,\nthey should be built-in,",
    "start": "2646960",
    "end": "2653160"
  },
  {
    "text": "people shouldn't have to\nreimplement them themselves. And in fact, there are a whole\nbunch of interesting built-in",
    "start": "2653160",
    "end": "2659180"
  },
  {
    "text": "classes in Python. And there are a whole bunch of\nlibraries of classes you can",
    "start": "2659180",
    "end": "2664580"
  },
  {
    "text": "bring in-- and we'll look\nat many of those-- that extend it.",
    "start": "2664580",
    "end": "2670390"
  },
  {
    "text": "And that's the beauty of\nthe class mechanism. It lets you add new types to\nthe language that are every",
    "start": "2670390",
    "end": "2679180"
  },
  {
    "text": "bit as easy to use as\nthe built-in types. So in effect, the language can\nbe extended to add new and",
    "start": "2679180",
    "end": "2687220"
  },
  {
    "text": "useful types. And we'll look at several\nexamples of that starting on Thursday.",
    "start": "2687220",
    "end": "2692510"
  },
  {
    "start": "2692510",
    "end": "2696107"
  }
]