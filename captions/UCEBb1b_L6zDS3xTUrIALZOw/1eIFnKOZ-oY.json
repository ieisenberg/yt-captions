[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "In this lecture you'll learn various techniques\nfor creating combinational logic circuits",
    "start": "1100",
    "end": "5790"
  },
  {
    "text": "that implement a particular functional specification.",
    "start": "5790",
    "end": "9420"
  },
  {
    "text": "A functional specification is part of the\nstatic discipline we use to create the combinational",
    "start": "9420",
    "end": "14240"
  },
  {
    "text": "logic abstraction of a circuit.",
    "start": "14240",
    "end": "17020"
  },
  {
    "text": "One approach is to use natural language to\ndescribe the operation of a device.",
    "start": "17020",
    "end": "21750"
  },
  {
    "text": "This approach has its pros and cons.",
    "start": "21750",
    "end": "24230"
  },
  {
    "text": "In its favor, natural language can convey\ncomplicated concepts in surprisingly compact",
    "start": "24230",
    "end": "29750"
  },
  {
    "text": "form and it is a notation that most of us\nknow how to read and understand.",
    "start": "29750",
    "end": "34520"
  },
  {
    "text": "But, unless the words are very carefully crafted,\nthere may be ambiguities introduced by words",
    "start": "34520",
    "end": "39129"
  },
  {
    "text": "with multiple interpretations or by lack of\ncompleteness since it's not always obvious",
    "start": "39129",
    "end": "43699"
  },
  {
    "text": "whether all eventualities have been dealt\nwith.",
    "start": "43699",
    "end": "46379"
  },
  {
    "text": "There are good alternatives that address the\nshortcomings mentioned above.",
    "start": "46379",
    "end": "50999"
  },
  {
    "text": "Truth tables are a straightforward tabular\nrepresentation that specifies the values of",
    "start": "50999",
    "end": "55920"
  },
  {
    "text": "the outputs for each possible combination\nof the digital inputs.",
    "start": "55920",
    "end": "60609"
  },
  {
    "text": "If a device has N digital inputs, its truth\ntable will have 2^N rows.",
    "start": "60610",
    "end": "66640"
  },
  {
    "text": "In the example shown here, the device has\n3 inputs, each of which can have the value",
    "start": "66640",
    "end": "72000"
  },
  {
    "text": "0 or the value 1.",
    "start": "72000",
    "end": "74850"
  },
  {
    "text": "There are 2*2*2 = 2^3 = 8 combinations of\nthe three input values, so there are 8 rows",
    "start": "74850",
    "end": "81950"
  },
  {
    "text": "in the truth table.",
    "start": "81950",
    "end": "84020"
  },
  {
    "text": "It's straightforward to systematically enumerate\nthe 8 combinations, which makes it easy to",
    "start": "84020",
    "end": "88799"
  },
  {
    "text": "ensure that no combination is omitted when\nbuilding the specification.",
    "start": "88800",
    "end": "93920"
  },
  {
    "text": "And since the output values are specified\nexplicitly, there isn't much room for misinterpreting",
    "start": "93920",
    "end": "98920"
  },
  {
    "text": "the desired functionality!",
    "start": "98920",
    "end": "101640"
  },
  {
    "text": "Truth tables are an excellent choice for devices\nwith small numbers of inputs and outputs.",
    "start": "101640",
    "end": "106960"
  },
  {
    "text": "Sadly, they aren't really practical when the\ndevices have many inputs.",
    "start": "106960",
    "end": "111329"
  },
  {
    "text": "If, for example, we were describing the functionality\nof a circuit to add two 32-bit numbers, there",
    "start": "111329",
    "end": "117841"
  },
  {
    "text": "would be 64 inputs altogether and the truth\ntable would need 2^64 rows.",
    "start": "117841",
    "end": "124069"
  },
  {
    "text": "Hmm, not sure how practical that is!",
    "start": "124069",
    "end": "127710"
  },
  {
    "text": "If we entered the correct output value for\na row once per second, it would take 584 billion",
    "start": "127710",
    "end": "133660"
  },
  {
    "text": "years to fill in the table!",
    "start": "133660",
    "end": "136730"
  },
  {
    "text": "Another alternative specification is to use\nBoolean equations to describe how to compute",
    "start": "136730",
    "end": "141560"
  },
  {
    "text": "the output values from the input values using\nBoolean algebra.",
    "start": "141560",
    "end": "145810"
  },
  {
    "text": "The operations we use are the logical operations\nAND, OR, and XOR, each of which takes two",
    "start": "145810",
    "end": "151360"
  },
  {
    "text": "Boolean operands, and NOT which takes a single\nBoolean operand.",
    "start": "151360",
    "end": "157190"
  },
  {
    "text": "Using the truth tables that describe these\nlogical operations, it's straightforward to",
    "start": "157190",
    "end": "161500"
  },
  {
    "text": "compute an output value from a particular\ncombination of input values using the sequence",
    "start": "161500",
    "end": "166320"
  },
  {
    "text": "of operations laid out in the equation.",
    "start": "166320",
    "end": "170300"
  },
  {
    "text": "Let me say a quick word about the notation\nused for Boolean equations.",
    "start": "170300",
    "end": "175210"
  },
  {
    "text": "Input values are represented by the name of\nthe input, in this example one of \"A\", \"B\",",
    "start": "175210",
    "end": "180500"
  },
  {
    "text": "or \"C\".",
    "start": "180500",
    "end": "182120"
  },
  {
    "text": "The digital input value 0 is equivalent to\nthe Boolean value FALSE and the digital input",
    "start": "182120",
    "end": "188010"
  },
  {
    "text": "value 1 is equivalent to the Boolean value\nTRUE.",
    "start": "188010",
    "end": "192170"
  },
  {
    "text": "The Boolean operation NOT is indicated by\na horizontal line drawn above a Boolean expression.",
    "start": "192170",
    "end": "198599"
  },
  {
    "text": "In this example, the first symbol following\nthe equal sign is a \"C\" with line above it,",
    "start": "198600",
    "end": "204230"
  },
  {
    "text": "indicating that the value of C should be inverted\nbefore it's used in evaluating the rest of",
    "start": "204230",
    "end": "208430"
  },
  {
    "text": "the expression.",
    "start": "208430",
    "end": "210760"
  },
  {
    "text": "The Boolean operation AND is represented by\nthe multiplication operation using standard",
    "start": "210760",
    "end": "215840"
  },
  {
    "text": "mathematical notation.",
    "start": "215840",
    "end": "218480"
  },
  {
    "text": "Sometimes we'll use an explicit multiplication\noperator - usually written as a dot between",
    "start": "218480",
    "end": "223569"
  },
  {
    "text": "two Boolean expressions - as shown in the\nfirst term of the example equation.",
    "start": "223570",
    "end": "229150"
  },
  {
    "text": "Sometimes the AND operator is implicit as\nshown in the remaining three terms of the",
    "start": "229150",
    "end": "233870"
  },
  {
    "text": "example equation.",
    "start": "233870",
    "end": "236400"
  },
  {
    "text": "The Boolean operation OR is represented by\nthe addition operation, always shown as a",
    "start": "236400",
    "end": "241409"
  },
  {
    "text": "\"+\" sign.",
    "start": "241410",
    "end": "243720"
  },
  {
    "text": "Boolean equations are useful when the device\nhas many inputs.",
    "start": "243720",
    "end": "246900"
  },
  {
    "text": "And, as we'll see, it's easy to convert a\nBoolean equation into a circuit schematic.",
    "start": "246900",
    "end": "254549"
  },
  {
    "text": "Truth tables and Boolean equations are interchangeable.",
    "start": "254550",
    "end": "257500"
  },
  {
    "text": "If we have a Boolean equation for each output,\nwe can fill in the output columns for a row",
    "start": "257500",
    "end": "262130"
  },
  {
    "text": "of the truth table by evaluating the Boolean\nequations using the particular combination",
    "start": "262130",
    "end": "267760"
  },
  {
    "text": "of input values for that row.",
    "start": "267760",
    "end": "270470"
  },
  {
    "text": "For example, to determine the value for Y\nin the first row of the truth table, we'd",
    "start": "270470",
    "end": "275530"
  },
  {
    "text": "substitute the Boolean value FALSE for the\nsymbols A, B, and C in the equation and then",
    "start": "275530",
    "end": "280850"
  },
  {
    "text": "use Boolean algebra to compute the result.",
    "start": "280850",
    "end": "284250"
  },
  {
    "text": "We can go the other way too.",
    "start": "284250",
    "end": "286060"
  },
  {
    "text": "We can always convert a truth table into a\nparticular form of Boolean equation called",
    "start": "286060",
    "end": "290810"
  },
  {
    "text": "a sum-of-products.",
    "start": "290810",
    "end": "292150"
  },
  {
    "text": "Let's see howâ€¦",
    "start": "292150",
    "end": "294940"
  },
  {
    "start": "294000",
    "end": "294000"
  },
  {
    "text": "Start by looking at the truth table and answering\nthe question \"When does Y have the value 1?\"",
    "start": "294940",
    "end": "301260"
  },
  {
    "text": "Or, in the language of Boolean algebra: \"When\nis Y TRUE?\".",
    "start": "301260",
    "end": "306020"
  },
  {
    "text": "Well, Y is TRUE when the inputs correspond\nto row 2 of the truth table, OR to row 4,",
    "start": "306020",
    "end": "313750"
  },
  {
    "text": "OR to rows 7 OR 8.",
    "start": "313750",
    "end": "316930"
  },
  {
    "text": "Altogether there are 4 combinations of inputs\nfor which Y is TRUE.",
    "start": "316930",
    "end": "320970"
  },
  {
    "text": "The corresponding Boolean equation thus is\nthe OR for four terms, where each term is",
    "start": "320970",
    "end": "326370"
  },
  {
    "text": "a boolean expression which evaluates to TRUE\nfor a particular combination of inputs.",
    "start": "326370",
    "end": "332510"
  },
  {
    "text": "Row 2 of the truth table corresponds to C=0,\nB=0, and A=1.",
    "start": "332510",
    "end": "339020"
  },
  {
    "text": "The corresponding Boolean expression is (NOT\nC) AND (NOT B)",
    "start": "339020",
    "end": "343780"
  },
  {
    "text": "AND A, an expression that evaluates to TRUE\nif and only if C is 0, B is 0, and A is 1.",
    "start": "343780",
    "end": "352260"
  },
  {
    "text": "The boolean expression corresponding to row\n4 is (NOT C) AND B AND A.",
    "start": "352260",
    "end": "359169"
  },
  {
    "text": "And so on for rows 7 and 8.",
    "start": "359169",
    "end": "363070"
  },
  {
    "text": "The approach will always give us an expression\nin the form of a sum-of-products.",
    "start": "363070",
    "end": "367590"
  },
  {
    "text": "\"Sum\" refers to the OR operations and \"products\"\nrefers to the groups of AND operations.",
    "start": "367590",
    "end": "374030"
  },
  {
    "text": "In this example we have the sum of four product\nterms.",
    "start": "374030",
    "end": "378680"
  },
  {
    "text": "Our next step is to use the Boolean expression\nas a recipe for constructing a circuit implementation",
    "start": "378680",
    "end": "384310"
  },
  {
    "text": "using combinational logic gates.",
    "start": "384310",
    "end": "387620"
  },
  {
    "start": "387000",
    "end": "387000"
  },
  {
    "text": "As circuit designers we'll be working with\na library of combinational logic gates, which",
    "start": "387620",
    "end": "392389"
  },
  {
    "text": "either is given to us by the integrated circuit\nmanufacturer, or which we've designed ourselves",
    "start": "392390",
    "end": "398200"
  },
  {
    "text": "as CMOS gates using NFET and PFET switches.",
    "start": "398200",
    "end": "402900"
  },
  {
    "text": "One of the simplest gates is the inverter,\nwhich has the schematic symbol shown here.",
    "start": "402900",
    "end": "408139"
  },
  {
    "text": "The small circle on the output wire indicates\nan inversion, a common convention used in",
    "start": "408139",
    "end": "413240"
  },
  {
    "text": "schematics.",
    "start": "413240",
    "end": "415039"
  },
  {
    "text": "We can see from its truth table that the inverter\nimplements the Boolean NOT function.",
    "start": "415040",
    "end": "421620"
  },
  {
    "text": "The AND gate outputs 1 if and only if the\nA input is 1 *and* the B input is 1, hence",
    "start": "421620",
    "end": "428710"
  },
  {
    "text": "the name \"AND\".",
    "start": "428710",
    "end": "430430"
  },
  {
    "text": "The library will usually include AND gates\nwith 3 inputs, 4 inputs, etc., which produce",
    "start": "430430",
    "end": "436340"
  },
  {
    "text": "a 1 output if and only if all of their inputs\nare 1.",
    "start": "436340",
    "end": "442060"
  },
  {
    "text": "The OR gate outputs 1 if the A input is 1\n*or* if the B input is 1, hence the name \"OR\".",
    "start": "442060",
    "end": "448840"
  },
  {
    "text": "Again, the library will usually include OR\ngates with 3 inputs, 4 inputs, etc., which",
    "start": "448840",
    "end": "454500"
  },
  {
    "text": "produce a 1 output when at least one of their\ninputs is 1.",
    "start": "454500",
    "end": "459040"
  },
  {
    "text": "These are the standard schematic symbols for\nAND and OR gates.",
    "start": "459040",
    "end": "462820"
  },
  {
    "text": "Note that the AND symbol is straight on the\ninput side, while the OR symbol is curved.",
    "start": "462820",
    "end": "467370"
  },
  {
    "text": "With a little practice, you'll find it easy\nto remember which schematic symbols are which.",
    "start": "467370",
    "end": "473370"
  },
  {
    "text": "Now let's use these building blocks to build\na circuit that implements a sum-of-products",
    "start": "473370",
    "end": "477949"
  },
  {
    "text": "equation.",
    "start": "477949",
    "end": "478949"
  },
  {
    "text": "The structure of the circuit exactly follows\nthe structure of the Boolean equation.",
    "start": "478949",
    "end": "484340"
  },
  {
    "start": "479000",
    "end": "479000"
  },
  {
    "text": "We use inverters to perform the necessary\nBoolean NOT operations.",
    "start": "484340",
    "end": "488710"
  },
  {
    "text": "In a sum-of-products equation the inverters\nare operating on particular input values,",
    "start": "488710",
    "end": "493430"
  },
  {
    "text": "in this case A, B and C.\nTo keep the schematic easy to read we've used",
    "start": "493430",
    "end": "498800"
  },
  {
    "text": "a separate inverter for each of the four NOT\noperations in the Boolean equation, but in",
    "start": "498800",
    "end": "503590"
  },
  {
    "text": "real life we might invert the C input once\nto produce a NOT-C signal, then use that signal",
    "start": "503590",
    "end": "509419"
  },
  {
    "text": "whenever a NOT-C value is needed.",
    "start": "509419",
    "end": "513180"
  },
  {
    "text": "Each of the four product terms is built using\na 3-input AND gate.",
    "start": "513180",
    "end": "517589"
  },
  {
    "text": "And the product terms are ORed together using\na 4-input OR gate.",
    "start": "517589",
    "end": "522409"
  },
  {
    "text": "The final circuit has a layer of inverters,\na layer of AND gates and final OR gate.",
    "start": "522409",
    "end": "527569"
  },
  {
    "text": "In the next section we'll talk about how to\nbuild AND or OR gates with many inputs from",
    "start": "527569",
    "end": "532128"
  },
  {
    "text": "library components with fewer inputs.",
    "start": "532129",
    "end": "536149"
  },
  {
    "text": "The propagation delay for a sum-of-products\ncircuit looks pretty short: the longest path",
    "start": "536149",
    "end": "541449"
  },
  {
    "text": "from inputs to outputs includes an inverter,\nan AND gate and an OR gate.",
    "start": "541449",
    "end": "547490"
  },
  {
    "text": "Can we really implement any Boolean equation\nin a circuit with a tPD of three gate delays?",
    "start": "547490",
    "end": "554420"
  },
  {
    "text": "Actually not, since building ANDs and ORs\nwith many inputs will require additional layers",
    "start": "554420",
    "end": "559188"
  },
  {
    "text": "of components, which will increase the propagation\ndelay.",
    "start": "559189",
    "end": "563459"
  },
  {
    "text": "We'll learn about this in the next section.",
    "start": "563459",
    "end": "566748"
  },
  {
    "text": "The good news is that we now have straightforward\ntechniques for converting a truth table to",
    "start": "566749",
    "end": "571490"
  },
  {
    "text": "its corresponding sum-of-products Boolean\nequation, and for building a circuit that",
    "start": "571490",
    "end": "575949"
  },
  {
    "text": "implements that equation.",
    "start": "575949",
    "end": "577108"
  }
]