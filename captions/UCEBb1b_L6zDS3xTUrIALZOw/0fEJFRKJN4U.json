[
  {
    "text": "[SQUEAKING] [RUSTLING] [CLICKING]",
    "start": "0",
    "end": "7904"
  },
  {
    "text": " ANA BELL: All right, everyone,\nso let's get started.",
    "start": "7904",
    "end": "14889"
  },
  {
    "text": "Last lecture, we\nintroduced functions, and we saw some syntax around\nhow to create functions.",
    "start": "14890",
    "end": "22150"
  },
  {
    "text": "But mostly, we were interested\nin motivating functions as a way for us to start\nwriting really clean code,",
    "start": "22150",
    "end": "28330"
  },
  {
    "text": "code that's easy to\ndebug, and code that's easy to read in the future. Today, we will continue our\nfun adventure with functions.",
    "start": "28330",
    "end": "37840"
  },
  {
    "text": "And we'll see what it means\nto treat functions as objects.",
    "start": "37840",
    "end": "43160"
  },
  {
    "text": "So let's recall the example\nwe talked about last lecture. We created this\nfunction, is even.",
    "start": "43160",
    "end": "51310"
  },
  {
    "text": "So the syntax for creating\na function is basically the keyword def tells Python\nwe're defining a function.",
    "start": "51310",
    "end": "59440"
  },
  {
    "text": "We decide what name\nto give our function. Parentheses tells\nPython in here we're",
    "start": "59440",
    "end": "64720"
  },
  {
    "text": "going to name all the arguments,\nall the inputs to the function. The colon starts the\nbody of the function.",
    "start": "64720",
    "end": "71990"
  },
  {
    "text": "The first part,\nit's not required but should always be in\nthere as a way for us",
    "start": "71990",
    "end": "79360"
  },
  {
    "text": "to implement abstraction. It's called the docstring. So this in green\nis the docstring.",
    "start": "79360",
    "end": "85030"
  },
  {
    "text": "Triple quotes starts\nour docstring, and triple quotes\nends the docstring. And you think of the\ndocstring, also known",
    "start": "85030",
    "end": "91509"
  },
  {
    "text": "as the specification, as\njust a really long comment. And in it, it's--",
    "start": "91510",
    "end": "97689"
  },
  {
    "text": "and the docstring is kind of-- I called it a contract\nbetween the person who writes the function and a\nperson who uses the function.",
    "start": "97690",
    "end": "105490"
  },
  {
    "text": "And in the contract,\nthe person who writes the function\nbasically says, this function is going\nto take these inputs,",
    "start": "105490",
    "end": "112000"
  },
  {
    "text": "and I guarantee this\nfunction to work correctly when you give me these\ninputs of these types",
    "start": "112000",
    "end": "117939"
  },
  {
    "text": "and these restrictions on\nthem, things like that. And then you also state what\nthe function is going to do.",
    "start": "117940",
    "end": "124490"
  },
  {
    "text": "And then you also state what\nthe function will return. In this particular function,\nwe have only one line.",
    "start": "124490",
    "end": "132730"
  },
  {
    "text": "This is the body\nof the function. But you've hopefully\nseen functions that are a little\nbit longer as you did",
    "start": "132730",
    "end": "138670"
  },
  {
    "text": "the practice from last lecture. And the body of the\nfunction itself-- so the lines of code are\nbasically lines of code",
    "start": "138670",
    "end": "145600"
  },
  {
    "text": "that we've seen before. There's nothing\nspecial about that except for lines that\nstart with a return.",
    "start": "145600",
    "end": "153620"
  },
  {
    "text": "So lines that\nstart with a return basically tell Python\nthat as soon as I see",
    "start": "153620",
    "end": "159159"
  },
  {
    "text": "this line with a return, hit. And when I'm\nexecuting my function,",
    "start": "159160",
    "end": "164600"
  },
  {
    "text": "I need to stop\nexecuting this function, take the value associated\nwith this return and pass it back to\nwhoever called me.",
    "start": "164600",
    "end": "173300"
  },
  {
    "text": "A function always\nreturns something. In this particular\ncase, the function",
    "start": "173300",
    "end": "178430"
  },
  {
    "text": "will return either True\nor False, a Boolean. But you can write functions\nthat return integers, floats,",
    "start": "178430",
    "end": "184740"
  },
  {
    "text": "strings, things like that.  In this case, this\nis what is returned.",
    "start": "184740",
    "end": "190830"
  },
  {
    "text": "It is possible, and\nwe actually saw this in one of the you-try-its\nas we were writing our code-- it is\npossible to write",
    "start": "190830",
    "end": "196709"
  },
  {
    "text": "a function that doesn't actually\nreturn anything explicitly. So here is an is_even function.",
    "start": "196710",
    "end": "203069"
  },
  {
    "text": "And inside the body, the\nonly change I've made is I've eliminated the\nlittle return keyword.",
    "start": "203070",
    "end": "208109"
  },
  {
    "text": "But otherwise, the work\nthat is done is the same. So here I'm just calculating\nwhether the remainder is 0",
    "start": "208110",
    "end": "213959"
  },
  {
    "text": "or not. So this line of code, when\nthe function is executed",
    "start": "213960",
    "end": "219390"
  },
  {
    "text": "is replaced with\neither True or False. Notice this function doesn't\nhave a return keyword.",
    "start": "219390",
    "end": "224580"
  },
  {
    "text": "But all functions\nreturn something. So while function is being\nexecuted because of a function",
    "start": "224580",
    "end": "230190"
  },
  {
    "text": "call, if the function\nreaches the end of all of these indented lines here,\neverything that's indented--",
    "start": "230190",
    "end": "238440"
  },
  {
    "text": "if it reaches the end and no\nreturn statement has been hit, then Python automatically\nreturns None.",
    "start": "238440",
    "end": "245002"
  },
  {
    "text": "So this is the line\nwithout a return statement. You can think of this code as\nbasically behind the scenes",
    "start": "245002",
    "end": "251020"
  },
  {
    "text": "Python putting this little\nline at the bottom that says return None. Now, this is not something\nthat we would ever write.",
    "start": "251020",
    "end": "258458"
  },
  {
    "text": "You just do the operations,\nmaybe you print some stuff out, and then you just\nomit the return",
    "start": "258459",
    "end": "263470"
  },
  {
    "text": "keyword if you want to return\nNone from the function. And None is this NoneType, is a\nvalue that is of type NoneType.",
    "start": "263470",
    "end": "273430"
  },
  {
    "text": "We talked about it back in\nmaybe lecture one or two, and we haven't really\nused it that much since.",
    "start": "273430",
    "end": "279310"
  },
  {
    "text": "But basically, you think of\nit as just having the type NoneType, and there's just one\nvalue associated with it, None.",
    "start": "279310",
    "end": "285729"
  },
  {
    "text": "And usually, we use this\nvalue to represent the absence of a value in our code.",
    "start": "285730",
    "end": "291800"
  },
  {
    "text": "So let me just run\nsome code first just to show you exactly some\nof the kind of things",
    "start": "291800",
    "end": "297340"
  },
  {
    "text": "you might observe when you write\ncode that doesn't have a return statement. So here, I promise\nthis is the last time",
    "start": "297340",
    "end": "304690"
  },
  {
    "text": "we're going to see is_even. So here I have two versions\nof the is_even function.",
    "start": "304690",
    "end": "310460"
  },
  {
    "text": "So I have one that I\nnamed is_even_with_return, and I have one that is named\nis_even_without_return.",
    "start": "310460",
    "end": "318080"
  },
  {
    "text": "They do very similar things. The difference is that this one\nhas a return statement, where",
    "start": "318080",
    "end": "323900"
  },
  {
    "text": "I return whether the\nremainder is equal to 0. And this one has no\nreturn statement,",
    "start": "323900",
    "end": "329300"
  },
  {
    "text": "but it just prints whether\nthe remainder is equal to 0.",
    "start": "329300",
    "end": "334340"
  },
  {
    "text": "OK, so let's look at running\nthe code is_even_with_return.",
    "start": "334340",
    "end": "339680"
  },
  {
    "text": "And as we're doing so,\nthis first function will be a recap of last lecture,\ntracing through what happens",
    "start": "339680",
    "end": "346820"
  },
  {
    "text": "when we make a function call. So I've uncommented this line. And now I'm running line 13.",
    "start": "346820",
    "end": "355669"
  },
  {
    "text": "So when Python sees\nthis file, it basically sees this function definition. And this is not\ncode that runs yet.",
    "start": "355670",
    "end": "363070"
  },
  {
    "text": "It's just telling\nPython that I've created this function inside memory. When I have this line\nbeing run, that's",
    "start": "363070",
    "end": "370630"
  },
  {
    "text": "when the function is actually\nbeing called and actually being run.",
    "start": "370630",
    "end": "375690"
  },
  {
    "text": "So i is replaced\nwith a parameter 3.",
    "start": "375690",
    "end": "381170"
  },
  {
    "text": "And at this point, the body\nof the function is executed. So the first thing that\nwe tell the function to do",
    "start": "381170",
    "end": "386840"
  },
  {
    "text": "is print the string\n\"with return.\" So if I run it, you'll see\nit prints \"with return.\"",
    "start": "386840",
    "end": "393080"
  },
  {
    "text": "Then it calculates this\nvariable remainder, which is going to be 1,\nbecause 3 % 2 equals 1.",
    "start": "393080",
    "end": "399620"
  },
  {
    "text": "And then I'm going to return\nwhether 1 equals to 0. So that's going to be False.",
    "start": "399620",
    "end": "405120"
  },
  {
    "text": "So as soon as we see\nthis return statement, Python returns out\nof this function call",
    "start": "405120",
    "end": "410150"
  },
  {
    "text": "and replaces the function call\nentirely with the return value.",
    "start": "410150",
    "end": "415320"
  },
  {
    "text": "So this entire line after\nthe function call is executed is replaced with False.",
    "start": "415320",
    "end": "420410"
  },
  {
    "text": "So I've just noted that here. We're not doing anything\nwith this return, right? All we're doing is\nmaking the function call,",
    "start": "420410",
    "end": "428330"
  },
  {
    "text": "and it just kind\nof sits on line 13.  In order to see the result\nof the function call,",
    "start": "428330",
    "end": "436100"
  },
  {
    "text": "we saw last lecture that we\nactually wrap the function call",
    "start": "436100",
    "end": "441230"
  },
  {
    "text": "around a print statement. And function calls in that sense\nare kind of just expressions.",
    "start": "441230",
    "end": "447199"
  },
  {
    "text": "They do some work. Python evaluates\nthem to some value and then replaces that\nfunction call with a value.",
    "start": "447200",
    "end": "453750"
  },
  {
    "text": "So if we wrap\nis_even_with_return 3, this function call, around\nwith a print statement,",
    "start": "453750",
    "end": "459980"
  },
  {
    "text": "Python does the\nwhole thing again. I is 3. It returns False. And this line effectively\nbecomes print parentheses",
    "start": "459980",
    "end": "468100"
  },
  {
    "text": "False. And we know what that does. It just prints\nFalse to the screen. And there it goes.",
    "start": "468100",
    "end": "474160"
  },
  {
    "text": "Notice we still did\nthis print statement because as part of\nthe function body, we tell it to do this print.",
    "start": "474160",
    "end": "481680"
  },
  {
    "text": "Everyone OK so far?  So now let's see what happens\nwhen we run this function",
    "start": "481680",
    "end": "490130"
  },
  {
    "text": "is_even_without_return. So very similar. I've just created an\nextra parameter here--",
    "start": "490130",
    "end": "498039"
  },
  {
    "text": "or variable here just to\nshow you that you can. So this function,\nis_even_without_return 3",
    "start": "498040",
    "end": "505509"
  },
  {
    "text": "is being run on line 27. So i is 3. This function will\nprint \"without return.\"",
    "start": "505510",
    "end": "513070"
  },
  {
    "text": "And then it calculates\nremainder to be 1. And then has_rem will be False.",
    "start": "513070",
    "end": "521409"
  },
  {
    "text": "So the variable has_rem\nwill have a value of False. And then as part of\nthe function body,",
    "start": "521409",
    "end": "527230"
  },
  {
    "text": "we're going to print the value\nof has_rem, which is False. So this line here will\nactually print for me",
    "start": "527230",
    "end": "534610"
  },
  {
    "text": "\"without return\" and\nthen this thing, False. ",
    "start": "534610",
    "end": "541360"
  },
  {
    "text": "And then the function\nhas no return statement explicitly in there. So you think about it like\nPython kind of implicitly",
    "start": "541360",
    "end": "550510"
  },
  {
    "text": "adds this return None at the\nend of the function call. We don't add this. I just wrote it there\njust to show you",
    "start": "550510",
    "end": "556330"
  },
  {
    "text": "that Python would add a\nline such as this when it reaches the end\nof the function, but you would never add it.",
    "start": "556330",
    "end": "562579"
  },
  {
    "text": "So that means that\nthe entire function call is replaced with None. ",
    "start": "562580",
    "end": "571345"
  },
  {
    "text": "Yes? AUDIENCE: So when you--\nwhat happens when you put print in the definition\nversus when you put return?",
    "start": "571345",
    "end": "577112"
  },
  {
    "text": "ANA BELL: What happens when\nyou put print in the definition versus around the function call?",
    "start": "577112",
    "end": "582500"
  },
  {
    "text": "AUDIENCE: Versus when you\nput return in the definition. ANA BELL: Versus when you\nput return in the definition. So that's the next line.",
    "start": "582500",
    "end": "588250"
  },
  {
    "text": "So in the next one,\nif we were to do what we did before,\nwhich is let's print the result of\nthe function call,",
    "start": "588250",
    "end": "596399"
  },
  {
    "text": "well, Python will do\neverything we just did. So it'll print \"without return.\"",
    "start": "596400",
    "end": "601800"
  },
  {
    "text": "It'll print False. But then it'll additionally\nprint the return",
    "start": "601800",
    "end": "607260"
  },
  {
    "text": "from the function call. So if the return\nis None, this line effectively becomes print None.",
    "start": "607260",
    "end": "615700"
  },
  {
    "text": "So what we end up seeing or\nwhat the user would end up seeing if they actually\nrun this program is",
    "start": "615700",
    "end": "621399"
  },
  {
    "text": "they'll see \"without\nreturn,\" they see False, and then they see this\nextraneous None in the console.",
    "start": "621400",
    "end": "627760"
  },
  {
    "text": "So you'll see probably\nthis in problem set two. You'll probably encounter\nan error such as this",
    "start": "627760",
    "end": "633420"
  },
  {
    "text": "and maybe problem set three. But don't be scared. Whenever you see a None\nout in the console,",
    "start": "633420",
    "end": "638730"
  },
  {
    "text": "it just means you have to be\ncareful about the function that was called. You probably forgot\nto return something.",
    "start": "638730",
    "end": "645480"
  },
  {
    "text": "And instead, we're just\nprinting the correct value within the function but\njust never returned it.",
    "start": "645480",
    "end": "651639"
  },
  {
    "text": "So that's just\nsomething to be wary of. AUDIENCE: So should\nyou always use",
    "start": "651640",
    "end": "656675"
  },
  {
    "text": "return instead of [INAUDIBLE]? ANA BELL: Yeah, so\nthat's a good question. Should you always use return? It depends on what you\nwant the function to do.",
    "start": "656675",
    "end": "662740"
  },
  {
    "text": "Most functions are useful\nbecause they go off on their own. They do a task, and they\nget a value at the end.",
    "start": "662740",
    "end": "668709"
  },
  {
    "text": "And they pass the value\nback to whoever called it. And then you can\nuse that function with many different\ninputs to give you",
    "start": "668710",
    "end": "674110"
  },
  {
    "text": "many different outputs. So usually, you'd want to make\nfunctions that return something that you can then do\nsomething else with further",
    "start": "674110",
    "end": "681160"
  },
  {
    "text": "in another part of the program. The print within the\nfunction should usually",
    "start": "681160",
    "end": "687120"
  },
  {
    "text": "be maybe for debugging\nor for maybe the status of the function, what\npart it's executing",
    "start": "687120",
    "end": "694589"
  },
  {
    "text": "or something like that. AUDIENCE: OK. And then when you\nrun the function, then it will give\nyou the return. But if you run the\nprint in the function,",
    "start": "694590",
    "end": "700870"
  },
  {
    "text": "that's when it does the None? ANA BELL: Exactly. If the function is not\nreturning anything, then it'll print None.",
    "start": "700870",
    "end": "707370"
  },
  {
    "text": "Right, yeah. But if the function is returning\nsomething, it will print--",
    "start": "707370",
    "end": "712913"
  },
  {
    "text": "if you wrap it\nwith a print, it'll print whatever got returned. ",
    "start": "712913",
    "end": "719540"
  },
  {
    "text": "OK. So let's have you work on this. Actually, there's\nnothing to write.",
    "start": "719540",
    "end": "725959"
  },
  {
    "text": "But think about it. So I've got four\nlines of code here-- add 1, 2; print, wrap\nthat around the print",
    "start": "725960",
    "end": "732620"
  },
  {
    "text": "statement; mult\n3, 4; and then add that around a print statement. So try to trace\nthrough and tell me",
    "start": "732620",
    "end": "738890"
  },
  {
    "text": "what outputs each function\ncall will give me.",
    "start": "738890",
    "end": "744830"
  },
  {
    "text": "So add 1, 2, what happens? What do you think the\noutput of this function is? What gets printed to the screen?",
    "start": "744830",
    "end": "750515"
  },
  {
    "start": "750515",
    "end": "756680"
  },
  {
    "text": "What is it? AUDIENCE: Is it addition? [INAUDIBLE] 3. ANA BELL: Am I telling\nit to print anything?",
    "start": "756680",
    "end": "763750"
  },
  {
    "text": "That's the question. So nothing is actually\nprinted to the screen. Because in the function\ncall add comma 2,",
    "start": "763750",
    "end": "772120"
  },
  {
    "text": "we basically map the\nparameters one at a time. X is 1, y is 2. That was good.",
    "start": "772120",
    "end": "777170"
  },
  {
    "text": "We return 3. And so this entire function\ncall is replaced with 3.",
    "start": "777170",
    "end": "785200"
  },
  {
    "text": "But we never told that line\nof code to print that result. So there's nothing\nprinted in this case.",
    "start": "785200",
    "end": "791770"
  },
  {
    "text": "Well, what if we wrap\nthis in a print statement?",
    "start": "791770",
    "end": "797230"
  },
  {
    "start": "797230",
    "end": "802399"
  },
  {
    "text": "Is anything printed\nin this case? AUDIENCE: Yes. ANA BELL: Yes, what is printed? AUDIENCE: 5. ANA BELL: Yeah, exactly.",
    "start": "802400",
    "end": "808040"
  },
  {
    "text": "The add itself gives me 5. And so I'm telling\nit to print 5.",
    "start": "808040",
    "end": "813930"
  },
  {
    "text": "What about the next one, mult-- what is that, 3, 4.",
    "start": "813930",
    "end": "820060"
  },
  {
    "text": "Is anything printed as a\nresult of running this line? AUDIENCE: No.",
    "start": "820060",
    "end": "825514"
  },
  {
    "text": "Yes. ANA BELL: I heard\nsome yes, some no. AUDIENCE: The print\nis in the function. ANA BELL: Yeah, the print\nis in the function, exactly.",
    "start": "825514",
    "end": "832019"
  },
  {
    "text": "So just because it's a\nfunction call doesn't mean we don't print anything, right?",
    "start": "832020",
    "end": "837390"
  },
  {
    "text": "We need to check out what the\nfunction is actually doing. So in mult, x gets mapped\nto 3, y gets mapped to 4,",
    "start": "837390",
    "end": "845400"
  },
  {
    "text": "and the function body itself\nsays to print the result. So this will print as\na part of the body--",
    "start": "845400",
    "end": "853995"
  },
  {
    "start": "853995",
    "end": "859970"
  },
  {
    "text": "prints the 12.  Anything else it prints?",
    "start": "859970",
    "end": "866440"
  },
  {
    "text": "No. And lastly, what if we\nput a print statement",
    "start": "866440",
    "end": "871920"
  },
  {
    "text": "around the mult 4, 5? What will that print?",
    "start": "871920",
    "end": "878515"
  },
  {
    "text": "AUDIENCE: 20 then None? ANA BELL: Yeah,\nexactly, 20 then None. So the mult itself is going\nto print same as there.",
    "start": "878515",
    "end": "886570"
  },
  {
    "text": "It prints the 20. So the function\ncall returns None.",
    "start": "886570",
    "end": "895699"
  },
  {
    "text": "So this entire\nfunction call basically is replaced with None, and the\nline then becomes print None.",
    "start": "895700",
    "end": "901750"
  },
  {
    "text": "So this will print the\nNone to the screen. So there's actually four--",
    "start": "901750",
    "end": "906940"
  },
  {
    "text": "four print-outs generated\nfrom these four lines. The first one generates\nnothing, but the last one",
    "start": "906940",
    "end": "913810"
  },
  {
    "text": "generates two lines\nof print-outs. Any questions\nabout this example?",
    "start": "913810",
    "end": "920375"
  },
  {
    "text": "Yes? AUDIENCE: Can you go over\nwhy it prints out None? ANA BELL: This one here? AUDIENCE: Yeah. ANA BELL: Yeah, so the mult,\ncheck out what it's doing.",
    "start": "920375",
    "end": "928460"
  },
  {
    "text": "It's doing a print statement. So that 20 gets printed\nout to the console.",
    "start": "928460",
    "end": "934010"
  },
  {
    "text": "But what's the\nreturn value of mult?  There is no return, right?",
    "start": "934010",
    "end": "939910"
  },
  {
    "text": "So if there's no return,\nPython adds the None. That's just something\nthat's implicitly done.",
    "start": "939910",
    "end": "945850"
  },
  {
    "text": "So the return from mult because\nit doesn't actually have an explicit return is None. So we're asking it to print\nthe return, which is None.",
    "start": "945850",
    "end": "955110"
  },
  {
    "text": "OK, so a couple of words\non return versus print. So the return only has a\nmeaning inside a function.",
    "start": "955110",
    "end": "965089"
  },
  {
    "text": "So as an example, if I\njust have this file open and I have return\n5 just randomly",
    "start": "965090",
    "end": "972610"
  },
  {
    "text": "that's not within a\nfunction definition, already I'm in trouble. You see that red X.\nAnd if I run that code,",
    "start": "972610",
    "end": "978940"
  },
  {
    "text": "Python gives me a syntax error. This one's pretty easy to debug. There's a return\noutside of a function.",
    "start": "978940",
    "end": "984339"
  },
  {
    "text": "Yep, there it is. So return only has a\nmeaning inside a function.",
    "start": "984340",
    "end": "990270"
  },
  {
    "text": "It basically says this function\nhas done some work for me, and it's returning\nback this value.",
    "start": "990270",
    "end": "995580"
  },
  {
    "text": "Print statements\ncan be put wherever you'd like, inside\nfunctions, outside functions, wherever you'd like.",
    "start": "995580",
    "end": "1001640"
  },
  {
    "text": "And they all get executed. You can have many return\nstatements inside a function.",
    "start": "1001640",
    "end": "1006710"
  },
  {
    "text": "Like if you have a\nfunction that returns 0 if some condition applies\nor 1 if some other condition",
    "start": "1006710",
    "end": "1012560"
  },
  {
    "text": "applies, then you can have\nthose two return statements. But as soon as Python\nduring execution",
    "start": "1012560",
    "end": "1019310"
  },
  {
    "text": "hits one return statement, it\nimmediately ends the function, takes that return\nvalue, and pops it",
    "start": "1019310",
    "end": "1025880"
  },
  {
    "text": "back to whoever called it. So it's not going to run more\nthan one return statement.",
    "start": "1025880",
    "end": "1032280"
  },
  {
    "text": "Print, on the\nother hand, you can run as many print statements as\nyou'd like inside the program. And they can all be\nhit, and they can all",
    "start": "1032280",
    "end": "1040345"
  },
  {
    "text": "generate some sort of\noutput to the console. ",
    "start": "1040346",
    "end": "1047269"
  },
  {
    "text": "So the return statement has\na value associated with it. So return 5, return--",
    "start": "1047270",
    "end": "1053950"
  },
  {
    "text": "we had remainder\nequals 0, whatever, there's the associated value\nwith that return statement.",
    "start": "1053950",
    "end": "1058960"
  },
  {
    "text": "That value is what\ngets passed back to whoever called the function. The print statement also you can\nthink of it as having a value",
    "start": "1058960",
    "end": "1066790"
  },
  {
    "text": "associated with it. That's the thing that gets\nput out to the console. But that value associated\nwith the print statement",
    "start": "1066790",
    "end": "1074230"
  },
  {
    "text": "is just something that's\noutputted to the console. It's not being passed around\nthrough the program at all.",
    "start": "1074230",
    "end": "1079910"
  },
  {
    "text": "It's just kind of static. It gets put to the console,\nand then that's it. Nobody else can really use that\nvalue unless it's a variable.",
    "start": "1079910",
    "end": "1086919"
  },
  {
    "text": "And then you're just\nusing a regular variable. The last thing I\nwant to show you--",
    "start": "1086920",
    "end": "1092330"
  },
  {
    "text": "this is kind of cool. So if we have a print statement\njust in here, and we run it,",
    "start": "1092330",
    "end": "1100190"
  },
  {
    "text": "obviously that prints\nthat to the console. But what is this print?",
    "start": "1100190",
    "end": "1105750"
  },
  {
    "text": "It's a function, right? It has all the telltale\nsigns of a function. The name is print.",
    "start": "1105750",
    "end": "1112700"
  },
  {
    "text": "The parentheses are there. And I'm giving it\none parameter, 5.",
    "start": "1112700",
    "end": "1118250"
  },
  {
    "text": "So if I print the return\nof the print function.",
    "start": "1118250",
    "end": "1124920"
  },
  {
    "text": "So if I wrap my print function\nin another print function, what do you think this\nis going to output? ",
    "start": "1124920",
    "end": "1139440"
  },
  {
    "text": "I'll run it. It outputs None. So the first 5 is due to this.",
    "start": "1139440",
    "end": "1146945"
  },
  {
    "text": "This shows up on the console. But print being a function,\nit doesn't actually return anything.",
    "start": "1146945",
    "end": "1152960"
  },
  {
    "text": "It does something useful, like\ntake whatever you want and show it on the console, but it\ndoesn't return anything",
    "start": "1152960",
    "end": "1160130"
  },
  {
    "text": "back to whoever called it. And so if I wrap my print\nfunction around another print",
    "start": "1160130",
    "end": "1165860"
  },
  {
    "text": "function, I'm basically\nprinting the return of the print function, which is None. So that's where the\nsecond None comes in.",
    "start": "1165860",
    "end": "1173529"
  },
  {
    "text": "All right, so thought of another\nway, you can make a variable a equals print 5.",
    "start": "1173530",
    "end": "1178980"
  },
  {
    "text": "And if I print a,\nbasically we're saying the return of that first\nprint function is just None.",
    "start": "1178980",
    "end": "1185430"
  },
  {
    "text": " Yeah. ",
    "start": "1185430",
    "end": "1197150"
  },
  {
    "text": "OK, so I'm going\nto have you work on this code for a little bit. Nothing to write, but\nthere is something to fix.",
    "start": "1197150",
    "end": "1204750"
  },
  {
    "text": "So here's a function\ncalled is_triangular. It takes in one parameter,\nand it's a number, an integer",
    "start": "1204750",
    "end": "1210680"
  },
  {
    "text": "greater than 0. I want this function to\nreturn True if n is triangular",
    "start": "1210680",
    "end": "1215990"
  },
  {
    "text": "and False otherwise. So triangular just means\nit's a whole number such",
    "start": "1215990",
    "end": "1221240"
  },
  {
    "text": "that it's equal\nto 1 plus 2 plus 3 plus some summation like that.",
    "start": "1221240",
    "end": "1227730"
  },
  {
    "text": "All right, so 1 is triangular, 3\nis triangular, 6 is triangular, and so on and so on.",
    "start": "1227730",
    "end": "1234500"
  },
  {
    "text": "So take a look at this code. It's on line around 49ish.",
    "start": "1234500",
    "end": "1243590"
  },
  {
    "text": "So start by running it,\nseeing what you get, and I'll",
    "start": "1243590",
    "end": "1249230"
  },
  {
    "text": "give you about a minute or so\nto see if you can try to fix it. Make sure it runs with\nall these test cases here.",
    "start": "1249230",
    "end": "1254450"
  },
  {
    "text": " OK, what's the first thing you\nshould do when you're asked",
    "start": "1254450",
    "end": "1261059"
  },
  {
    "text": "to fix some code that's buggy? Yes. AUDIENCE: Could you [INAUDIBLE]?",
    "start": "1261060",
    "end": "1269008"
  },
  {
    "text": "ANA BELL: We can do that. But first, let's run\nit with something.",
    "start": "1269008",
    "end": "1274690"
  },
  {
    "text": "So let's run it\nwith the first one. Print is triangular 4. So we know the answer\nshould be False.",
    "start": "1274690",
    "end": "1281620"
  },
  {
    "text": "I mean, I told you,\nso that's good. Yes, it does give me\nFalse, which is good.",
    "start": "1281620",
    "end": "1290180"
  },
  {
    "text": "But it also prints out a None. What does that mean for us?",
    "start": "1290180",
    "end": "1297575"
  },
  {
    "text": "Yes? AUDIENCE: There's no actual\nreturn statement [INAUDIBLE].. ",
    "start": "1297575",
    "end": "1304110"
  },
  {
    "text": "ANA BELL: Yeah,\nexactly, perfect. So there's no actual\nreturn statement. Like I mentioned with\nthe is_even example,",
    "start": "1304110",
    "end": "1311020"
  },
  {
    "text": "if you're seeing some\nNones show up in places, check your returns. So is this function actually\nreturning something?",
    "start": "1311020",
    "end": "1318180"
  },
  {
    "text": "No, it's just\nprinting the result. So it's printing the\nright thing in this case.",
    "start": "1318180",
    "end": "1324330"
  },
  {
    "text": "So let's start by changing\nthe prints to returns.",
    "start": "1324330",
    "end": "1330365"
  },
  {
    "text": "Yeah. AUDIENCE: When I run it, it\nsays True and then False? ANA BELL: For this one?",
    "start": "1330365",
    "end": "1336250"
  },
  {
    "text": " AUDIENCE: Oh, nevermind. I think I just ran [INAUDIBLE].",
    "start": "1336250",
    "end": "1341750"
  },
  {
    "text": "ANA BELL: OK. All right, let's run it.",
    "start": "1341750",
    "end": "1346820"
  },
  {
    "text": "Perfect. Yeah, so that seems\nto have fixed it. ",
    "start": "1346820",
    "end": "1352720"
  },
  {
    "text": "What should we do next? ",
    "start": "1352720",
    "end": "1362800"
  },
  {
    "text": "Yes? AUDIENCE: You check the\nrest of the print statements if it doesn't work for one. ANA BELL: Yes, exactly.",
    "start": "1362800",
    "end": "1368220"
  },
  {
    "text": "Let's check the rest of\nthe print statements. So the second one,\n6, is triangular.",
    "start": "1368220",
    "end": "1373290"
  },
  {
    "text": "So that prints True. And last one, as you mentioned,\nis going to fail on us.",
    "start": "1373290",
    "end": "1380490"
  },
  {
    "text": "It prints False, but 1\nis triangular, right, because 1 is just the sum of 1.",
    "start": "1380490",
    "end": "1385860"
  },
  {
    "text": "So do you know what\na fix could be? AUDIENCE: Change the\nrange to n plus 1? ANA BELL: Yeah, exactly.",
    "start": "1385860",
    "end": "1392010"
  },
  {
    "text": "So you've spotted it. The range should be n plus 1. If you didn't spot\nthat right away,",
    "start": "1392010",
    "end": "1397770"
  },
  {
    "text": "as I think somebody\nmentioned there, the first thing we\nshould do is just start putting some\nprint statements.",
    "start": "1397770",
    "end": "1402840"
  },
  {
    "text": "And inside the loop is a great\nplace to put a print statement. We can see what thing\nwe're iterating over.",
    "start": "1402840",
    "end": "1410040"
  },
  {
    "text": "And so if this was still n and\nwe didn't manage to fix it, and we run it, we see\nthat we've iterated",
    "start": "1410040",
    "end": "1416100"
  },
  {
    "text": "when i is 0 right here, and\nwe never actually hit 1.",
    "start": "1416100",
    "end": "1422830"
  },
  {
    "text": "So the fix for that is make\nsure we go up to n including n. And now if we run it and\nremove this print statement",
    "start": "1422830",
    "end": "1431050"
  },
  {
    "text": "because it might be\na little confusing, that now gives me\nthe correct answer.",
    "start": "1431050",
    "end": "1437050"
  },
  {
    "text": "Last step should probably be to\nrun the other two cases again, just in case my fix\nbroke something else.",
    "start": "1437050",
    "end": "1443800"
  },
  {
    "text": "And it didn't. The other two cases\nare still the same. ",
    "start": "1443800",
    "end": "1449290"
  },
  {
    "text": "Questions about this code? Does it make sense? ",
    "start": "1449290",
    "end": "1460000"
  },
  {
    "text": "OK, so now, last\nlecture, I mentioned that once we write\nfunctions, it's really easy to include\nthese functions",
    "start": "1460000",
    "end": "1465640"
  },
  {
    "text": "in larger pieces of code. And it makes those larger pieces\nof code very nicely readable.",
    "start": "1465640",
    "end": "1471170"
  },
  {
    "text": "So let's try to do the\nsame with a slightly more complex example. Let's try to create-- take\nour bisection_root code",
    "start": "1471170",
    "end": "1480340"
  },
  {
    "text": "and make it into a function. And then there's going to be an\nexercise in a couple of slides where you get to\nuse this function.",
    "start": "1480340",
    "end": "1487310"
  },
  {
    "text": "So inside of this\nfunction here is basically",
    "start": "1487310",
    "end": "1493290"
  },
  {
    "text": "what we had like\nthree lectures ago. It's just the bisection\nsquare root code.",
    "start": "1493290",
    "end": "1498990"
  },
  {
    "text": "The only thing I've\ndone is I've wrapped it around a function definition. So def, I gave it a name--",
    "start": "1498990",
    "end": "1505140"
  },
  {
    "text": "bisection_root is a\npretty nice name-- and figured out what input\nthis function should take.",
    "start": "1505140",
    "end": "1510340"
  },
  {
    "text": "So the input should\nbe the x I would like to approximate\nthe square root of.",
    "start": "1510340",
    "end": "1515700"
  },
  {
    "text": "One thing I didn't do is\nput a docstring on this, so that's my bad.",
    "start": "1515700",
    "end": "1521640"
  },
  {
    "text": "But the docstring would say x\nis a positive integer greater than 1 and returns\nthe approximation",
    "start": "1521640",
    "end": "1528539"
  },
  {
    "text": "to the square root of x\nor something like that. OK, so here we're hard\ncoding epsilon to be 0.01.",
    "start": "1528540",
    "end": "1537580"
  },
  {
    "text": "We've got our low\nand high endpoints, just remembering what\nthe bisection_root does. And we're starting\nout with a guess",
    "start": "1537580",
    "end": "1544880"
  },
  {
    "text": "that's right in between\nthe low and high. The while loop here is\ngoing to do the work for us.",
    "start": "1544880",
    "end": "1552260"
  },
  {
    "text": "So the while loop condition\nis while the difference, the absolute value, the\ndifference between our guess",
    "start": "1552260",
    "end": "1560260"
  },
  {
    "text": "squared and the\nactual x we're trying to find the square root\nof is bigger than epsilon. So while we're still\nfarther away than epsilon,",
    "start": "1560260",
    "end": "1567309"
  },
  {
    "text": "we have more guesses to make. The way we make the\nguesses is by updating",
    "start": "1567310",
    "end": "1572320"
  },
  {
    "text": "the low endpoint or\nthe high endpoint, depending on whether our\nguess was too low or too high. This should be review hopefully.",
    "start": "1572320",
    "end": "1579070"
  },
  {
    "text": "And then after we've decided\non which endpoint to update, we update our new guess to\nbe whatever high plus low is",
    "start": "1579070",
    "end": "1586929"
  },
  {
    "text": "divided by 2 again,\nso the midpoint of those where either high or\nlow would have just changed",
    "start": "1586930",
    "end": "1593380"
  },
  {
    "text": "right because of this if else. And this loop will\njust keep going over and over and over again,\nmaking better and better",
    "start": "1593380",
    "end": "1599290"
  },
  {
    "text": "approximations until we come\nwithin plus or minus epsilon of the square root of x. ",
    "start": "1599290",
    "end": "1607630"
  },
  {
    "text": "The difference between\nthis code and what we wrote a few lectures\nago is this part down here.",
    "start": "1607630",
    "end": "1615170"
  },
  {
    "text": "So a few lectures ago,\nall we could do really was write a print\nstatement where",
    "start": "1615170",
    "end": "1621820"
  },
  {
    "text": "we took our guess\nthat we ended up with and we printed it\nalong with that guess",
    "start": "1621820",
    "end": "1627520"
  },
  {
    "text": "is close to the root\nof our original x. But instead, since we're\nwriting a function,",
    "start": "1627520",
    "end": "1635020"
  },
  {
    "text": "I would like to take the\nresult, my approximation to x, and return it.",
    "start": "1635020",
    "end": "1640870"
  },
  {
    "text": "So somebody can call\nthis function many, many, many times with different values\nof x and figure out a bunch",
    "start": "1640870",
    "end": "1647250"
  },
  {
    "text": "of different approximations\nfor all of these different x's. So here I have the\nfunction calls.",
    "start": "1647250",
    "end": "1655080"
  },
  {
    "text": "So I've got bisection_root with\n4 and bisection_root with 123. And then I can just print\nthe results of these.",
    "start": "1655080",
    "end": "1662170"
  },
  {
    "text": "So here is the\nbisection_root function. I've got my printout commented\nout because I don't actually",
    "start": "1662170",
    "end": "1669850"
  },
  {
    "text": "need it. The rest of the code\nwe'll do something useful with the approximations.",
    "start": "1669850",
    "end": "1675080"
  },
  {
    "text": "So in this case, bisection_root\nof 4 gave me 2.0. So that's the approximation.",
    "start": "1675080",
    "end": "1680770"
  },
  {
    "text": "And the bisection root of 123\nwas approximated to 11.09.",
    "start": "1680770",
    "end": "1688090"
  },
  {
    "text": "OK, so what I would\nlike you to do,",
    "start": "1688090",
    "end": "1693440"
  },
  {
    "text": "and this is going to be a\nlittle bit involved code, it will require\nsome thinking, is",
    "start": "1693440",
    "end": "1698780"
  },
  {
    "text": "to write a function\ncalled \"count the numbers with the\nsquare root close to\" n plus or minus epsilon.",
    "start": "1698780",
    "end": "1707750"
  },
  {
    "text": "And I'll help you out by\ndrawing something on the board. But I would like you\nto do the code for it.",
    "start": "1707750",
    "end": "1715080"
  },
  {
    "text": "So the idea here is that\nyou have some n that's given as an input.",
    "start": "1715080",
    "end": "1720860"
  },
  {
    "text": "And you have an epsilon\nthat's also given as an input. What you'd like to find out\nis how many whole numbers have",
    "start": "1720860",
    "end": "1730909"
  },
  {
    "text": "their square root within\nplus or minus epsilon of n. So this is kind of\nhard to wrap your mind",
    "start": "1730910",
    "end": "1739309"
  },
  {
    "text": "around without actually\ndrawing a picture. So this is also\nsomething you should try to do in quiz situations,\np sets, things like that.",
    "start": "1739310",
    "end": "1745970"
  },
  {
    "text": "Don't code right away. Try to draw a picture\nkind of depicting what we're asking for here.",
    "start": "1745970",
    "end": "1751260"
  },
  {
    "text": "So here, we'll\nstart with a line. This is our number line because\nwe're doing the square root.",
    "start": "1751260",
    "end": "1758030"
  },
  {
    "text": " We want to know how many\nintegers have a square root",
    "start": "1758030",
    "end": "1763600"
  },
  {
    "text": "with an epsilon of n. So let's start with an n. And we have something\nplus or minus epsilon.",
    "start": "1763600",
    "end": "1773350"
  },
  {
    "text": "So this is epsilon, and\nthis is also epsilon.",
    "start": "1773350",
    "end": "1779860"
  },
  {
    "text": "In the end, we want to\nknow how many integers have a square root of i-- so\nactually, I'll do it like this.",
    "start": "1779860",
    "end": "1788230"
  },
  {
    "text": "Square root of i is equal\nto somewhere in this range.",
    "start": "1788230",
    "end": "1795309"
  },
  {
    "text": "Does that make sense so far? That's what we're\ntrying to figure out. The square root of i is\nsomewhere in this range.",
    "start": "1795310",
    "end": "1802299"
  },
  {
    "text": "So that means i is going to\nbe some giant number out here.",
    "start": "1802300",
    "end": "1808080"
  },
  {
    "text": "So this line can go further out.  So in the example here,\nI've got n is equal to 10.",
    "start": "1808080",
    "end": "1816530"
  },
  {
    "text": " So I know for sure that an i of\n100, just kind of us as humans,",
    "start": "1816530",
    "end": "1824420"
  },
  {
    "text": "would work because\nthe square root of 100 is probably going\nto be approximated",
    "start": "1824420",
    "end": "1830120"
  },
  {
    "text": "to pretty darn close to 10. So I know that that value will\nbe within plus or minus epsilon",
    "start": "1830120",
    "end": "1836480"
  },
  {
    "text": "of 10. But there's probably a\ncouple numbers around 100",
    "start": "1836480",
    "end": "1842049"
  },
  {
    "text": "that also match this criteria. If I take the square root of\n99, according to this example,",
    "start": "1842050",
    "end": "1850030"
  },
  {
    "text": "that approximation puts me\nwithin plus or minus epsilon of 10.",
    "start": "1850030",
    "end": "1855070"
  },
  {
    "text": "So it's going to be-- square root of 99 is going to be\nlike 9 point whatever is here,",
    "start": "1855070",
    "end": "1860410"
  },
  {
    "text": ".95. So that's within plus\nor minus epsilon. And similarly, square\nroot of 101 and 102",
    "start": "1860410",
    "end": "1869710"
  },
  {
    "text": "also work because if I take\nthe square root of these guys, that will also put me within\nplus or minus epsilon of 10.",
    "start": "1869710",
    "end": "1879740"
  },
  {
    "text": "So the goal here is basically\nto figure out these numbers, 99, 100, 101, and 102.",
    "start": "1879740",
    "end": "1885890"
  },
  {
    "text": "You should use the power of\ncomputation and computers being able to do a task\nreally, really quickly",
    "start": "1885890",
    "end": "1892460"
  },
  {
    "text": "to basically say I'm\njust going to brute force my way through this\nproblem and say I'm",
    "start": "1892460",
    "end": "1898460"
  },
  {
    "text": "going to test each number,\none at a time, all the way up",
    "start": "1898460",
    "end": "1905779"
  },
  {
    "text": "to some pretty large number. So you want to make sure you\nhit 99, 100, 101, 102, maybe",
    "start": "1905780",
    "end": "1911809"
  },
  {
    "text": "going up to maybe n cubed. If you go and take the\nsquare root of some i cubed,",
    "start": "1911810",
    "end": "1918500"
  },
  {
    "text": "you know you're going\nto hit all these values within plus or minus epsilon. So you're just going\nto brute force, look",
    "start": "1918500",
    "end": "1924470"
  },
  {
    "text": "at all the integers between\n0 and n cubed, and figure out if this square root--\nthe approximation",
    "start": "1924470",
    "end": "1932300"
  },
  {
    "text": "to this square root is within\nplus or minus epsilon of n. If it is, keep a counter\nand increment it.",
    "start": "1932300",
    "end": "1940060"
  },
  {
    "text": "And if it's not, ignore it. And that's the idea\nto this question.",
    "start": "1940060",
    "end": "1945330"
  },
  {
    "text": " Loop and a check, that's it.",
    "start": "1945330",
    "end": "1953200"
  },
  {
    "text": "And you can definitely\nfeel free to make use of the\nbisection_root function that we wrote in our code.",
    "start": "1953200",
    "end": "1960760"
  },
  {
    "text": "You should definitely use it\nbecause it's very helpful. So around line 96 is where\nyou can write your code.",
    "start": "1960760",
    "end": "1966760"
  },
  {
    "start": "1966760",
    "end": "1974220"
  },
  {
    "text": "All right, does anyone have a\nstart for writing this code? Or how would you think about it?",
    "start": "1974220",
    "end": "1980800"
  },
  {
    "text": "Yes. AUDIENCE: For i in\n[INAUDIBLE] n cubed?",
    "start": "1980800",
    "end": "1986182"
  },
  {
    "text": "ANA BELL: For i in range n\ncubed, yeah, we can do that.",
    "start": "1986182",
    "end": "1995480"
  },
  {
    "text": "All right, so this will give\nme numbers 0 through n cubed.",
    "start": "1995480",
    "end": "2002799"
  },
  {
    "text": "Perfect. So I've generated basically\nthis sequence now. What do I want to\ndo once I have i?",
    "start": "2002800",
    "end": "2008220"
  },
  {
    "text": "And you can always write a\nlittle comment for yourself what you want to\ndo once you have i.",
    "start": "2008220",
    "end": "2013943"
  },
  {
    "text": "So in English,\nwhat would you want to do once you have\na number like this? ",
    "start": "2013943",
    "end": "2020330"
  },
  {
    "text": "Take the square root, yeah. Take the square root of i.",
    "start": "2020330",
    "end": "2026090"
  },
  {
    "text": "How do you want to take\nthe square root of i? AUDIENCE: [INAUDIBLE]. ANA BELL: We can.",
    "start": "2026090",
    "end": "2032500"
  },
  {
    "text": "Shall we use our bisection_root? We can too.",
    "start": "2032500",
    "end": "2037860"
  },
  {
    "text": " Yeah, we can do both. So let's use the\nfunction we just wrote.",
    "start": "2037860",
    "end": "2045610"
  },
  {
    "text": "So bisection_root of i,\nthis gives me square root.",
    "start": "2045610",
    "end": "2053030"
  },
  {
    "text": "So now sqrt is going\nto be some value here.",
    "start": "2053030",
    "end": "2058840"
  },
  {
    "text": "It could be 10. It could be 99.5. It could be 99.7. What do I do with\nthis number now?",
    "start": "2058840",
    "end": "2065320"
  },
  {
    "start": "2065320",
    "end": "2074169"
  },
  {
    "text": "Yes? AUDIENCE: Could you use an\nif statement [INAUDIBLE]?? ANA BELL: Yes, exactly. Let's use an if statement.",
    "start": "2074169",
    "end": "2080080"
  },
  {
    "text": "So if-- and there's many ways\nwe can use the if statement. We could do absolute value.",
    "start": "2080080",
    "end": "2086037"
  },
  {
    "text": "That's what we've\nbeen doing already. So if we take n minus\nthe square root--",
    "start": "2086038",
    "end": "2096899"
  },
  {
    "text": "so n minus this value\nwe just calculated is less than epsilon.",
    "start": "2096900",
    "end": "2103600"
  },
  {
    "text": " So here we know that square\nroot is within epsilon.",
    "start": "2103600",
    "end": "2118457"
  },
  {
    "text": "And what do we want to do once\nwe know that the square root is within epsilon? ",
    "start": "2118457",
    "end": "2127920"
  },
  {
    "text": "Well, if we don't know, we\ncan look at the docstring. So we need to return how many\nintegers have that square root",
    "start": "2127920",
    "end": "2134670"
  },
  {
    "text": "with an epsilon of n. AUDIENCE: [INAUDIBLE]. ANA BELL: Yeah, exactly,\nkeep count of it.",
    "start": "2134670",
    "end": "2139920"
  },
  {
    "text": "So count plus equals 1. AUDIENCE: [INAUDIBLE].",
    "start": "2139920",
    "end": "2146510"
  },
  {
    "text": "ANA BELL: Yes, and I do\nhave to initialize count. Count equals 0,\nright before my--",
    "start": "2146510",
    "end": "2152690"
  },
  {
    "text": "OK, anything else? ",
    "start": "2152690",
    "end": "2158369"
  },
  {
    "text": "AUDIENCE: The return function? ANA BELL: Yeah, we\ndo need to return. So at the end of the loop,\nwe can return our count.",
    "start": "2158370",
    "end": "2164880"
  },
  {
    "text": " OK, run it.",
    "start": "2164880",
    "end": "2172030"
  },
  {
    "text": "What is this from? Oh, this is from the\nother two lines here. So four.",
    "start": "2172030",
    "end": "2178040"
  },
  {
    "text": "I think that works\nbecause from the example there were four\nnumbers that worked. To double check, we can--",
    "start": "2178040",
    "end": "2185349"
  },
  {
    "text": "or if something went wrong\nand the number you got wasn't what you were expecting--",
    "start": "2185350",
    "end": "2191869"
  },
  {
    "text": "again, print\nstatements very useful. So we could print\nthe value of i, so this thing here we're trying\nto find the square root of.",
    "start": "2191870",
    "end": "2199400"
  },
  {
    "text": "And we can print the\nsquare root of that value. And so if we actually\nadd it to the print--",
    "start": "2199400",
    "end": "2205190"
  },
  {
    "text": "to the code here, we see the\nfour values that we grabbed, 99, 100, 101, 102.",
    "start": "2205190",
    "end": "2212660"
  },
  {
    "text": "And now that we\nwrote this code, we can actually make really\nsimple changes to it.",
    "start": "2212660",
    "end": "2218730"
  },
  {
    "text": "And we have some\npretty useful code. So if we make our boundary\nbigger, 10 plus or minus 1,",
    "start": "2218730",
    "end": "2225140"
  },
  {
    "text": "we're going to get more values\nthat match this criteria. So in fact, we got 40\nof them, all the way",
    "start": "2225140",
    "end": "2232640"
  },
  {
    "text": "from 81 all the way up to 120. They all match the\ncriteria, which",
    "start": "2232640",
    "end": "2238370"
  },
  {
    "text": "is when you take the\nsquare root of that value, it's plus or minus 9 to 11.",
    "start": "2238370",
    "end": "2246690"
  },
  {
    "text": " Any questions\nabout this example?",
    "start": "2246690",
    "end": "2252630"
  },
  {
    "text": "I know it's kind of involved. But I hope that actually\ndrawing a picture helped explain what we\nwere trying to get at.",
    "start": "2252630",
    "end": "2259509"
  },
  {
    "text": "And then at that\npoint, it should have been pretty\neasy to figure out the structure of\nthe code itself.",
    "start": "2259510",
    "end": "2265570"
  },
  {
    "text": "Any questions? Yes? AUDIENCE: A question\nregarding the range. Why does it have to\nbe that large number?",
    "start": "2265570",
    "end": "2275309"
  },
  {
    "text": "It can be smaller. ANA BELL: It could\nbe smaller, yeah. I mean, we could have\ndone n to the power of 4.",
    "start": "2275310",
    "end": "2281549"
  },
  {
    "text": "We just couldn't do n\nsquared because then we might miss-- well, we would\ndefinitely miss 101 and 102",
    "start": "2281550",
    "end": "2288509"
  },
  {
    "text": "in that particular example. And in fact, if our epsilon\nis really big, we might--",
    "start": "2288510",
    "end": "2296287"
  },
  {
    "text": "actually, I'm not\nsure about the math, but if our epsilon\nis really big, we might actually need to go\nbigger than n cubed as well.",
    "start": "2296287",
    "end": "2302460"
  },
  {
    "text": "I'd have to think about that. But we just-- it's OK. I mean, it's fine\nto make it big.",
    "start": "2302460",
    "end": "2307860"
  },
  {
    "text": "It doesn't take that\nmuch longer to compute because running the function\nis very quick to Python anyway.",
    "start": "2307860",
    "end": "2313664"
  },
  {
    "text": " Yeah, there's a question. AUDIENCE: I had a\nsimilar question.",
    "start": "2313665",
    "end": "2318910"
  },
  {
    "text": "So is there a reason why we\nchose n cubed as the arbitrary number that's big enough? ANA BELL: Yeah, arbitrary\nnumber that's big enough.",
    "start": "2318910",
    "end": "2326609"
  },
  {
    "text": "What we could have also\ndone just along those lines is we could have done something\na little bit smarter in here,",
    "start": "2326610",
    "end": "2332940"
  },
  {
    "text": "where once we find a\nnumber that actually works, like once we start\nincrementing our count,",
    "start": "2332940",
    "end": "2339180"
  },
  {
    "text": "we could have some\nsort of flag that keeps track of as long as\nwe're incrementing the count,",
    "start": "2339180",
    "end": "2345360"
  },
  {
    "text": "keep going. But at some point,\nyou know you're going to reach a\nnumber that's too big. And at that point, you can\njust end the function early.",
    "start": "2345360",
    "end": "2352950"
  },
  {
    "text": "You can just break\nout of the loop, and you don't need to keep\nlooking all the way up",
    "start": "2352950",
    "end": "2358289"
  },
  {
    "text": "to n cubed. So we could have done\nsomething a little bit smarter to make\nthe function just",
    "start": "2358290",
    "end": "2364080"
  },
  {
    "text": "a little faster with\nflags, which you can try.",
    "start": "2364080",
    "end": "2370730"
  },
  {
    "text": "So see if you can\nhave the program stop as soon as you hit 103. See if you can write the\nprogram that uses a flag",
    "start": "2370730",
    "end": "2377359"
  },
  {
    "text": "to trigger that event. And then when that\nevent is true, just break out of the\nloop or return immediately",
    "start": "2377360",
    "end": "2382609"
  },
  {
    "text": "or something like that.  Other questions? ",
    "start": "2382610",
    "end": "2391410"
  },
  {
    "text": "OK, so let's zoom out a\nlittle bit on functions. We did this a little\nbit last lecture.",
    "start": "2391410",
    "end": "2397578"
  },
  {
    "text": "This is a function that we\nactually wrote last lecture. It was sum of odd\nnumbers between a and b. This was essentially\nour black box.",
    "start": "2397578",
    "end": "2404670"
  },
  {
    "text": "Remember that now that\nwe're writing functions, we are kind of\nseparating ourselves",
    "start": "2404670",
    "end": "2409740"
  },
  {
    "text": "as a programmer who writes\na function-- you basically make this nice modular\npiece of code that can",
    "start": "2409740",
    "end": "2416400"
  },
  {
    "text": "be reused over and over again. So we're separating that\naspect from somebody",
    "start": "2416400",
    "end": "2421500"
  },
  {
    "text": "who's using a function. So once there's a function\nalready written for you, you just use it in code, like\nwe used the bisection_root here.",
    "start": "2421500",
    "end": "2429360"
  },
  {
    "text": "I know we wrote it, but I\nguess technically I wrote it. But here we just\nkind of used it.",
    "start": "2429360",
    "end": "2434640"
  },
  {
    "text": "And we used it to write this\nnicer, more complex piece of code.",
    "start": "2434640",
    "end": "2439720"
  },
  {
    "text": "And so this is what we do. We basically create\nthis black box. And once the specification or\nthe docstring of the black box,",
    "start": "2439720",
    "end": "2445900"
  },
  {
    "text": "you don't need to know how it's\nimplemented in order to use it. But what I wanted to\nmention is something",
    "start": "2445900",
    "end": "2452110"
  },
  {
    "text": "I mentioned last\nlecture is the function definition is just\ncreating a function",
    "start": "2452110",
    "end": "2458590"
  },
  {
    "text": "object inside the memory. And the name of\nthis function object",
    "start": "2458590",
    "end": "2464010"
  },
  {
    "text": "is the name of the function. So if we're thinking\nabout the program, there's the orange\nbox, we have an object",
    "start": "2464010",
    "end": "2471720"
  },
  {
    "text": "that just happens to\nbe a function, which has some code associated with\nit, whose name is sum_odd.",
    "start": "2471720",
    "end": "2479310"
  },
  {
    "text": "And kind of drawing\na parallel to that is when we create\njust a variable, as we have been so far.",
    "start": "2479310",
    "end": "2485400"
  },
  {
    "text": "Here we're creating an\nobject 2 whose name is low. So in that same way, that\nblack box is basically saying,",
    "start": "2485400",
    "end": "2493120"
  },
  {
    "text": "I am creating a function object\nthat has some code associated with it whose name is sum_odd.",
    "start": "2493120",
    "end": "2499500"
  },
  {
    "text": "So in this case, I've got\nsum_odd, low, and high as three sort of objects\ninside my program.",
    "start": "2499500",
    "end": "2505710"
  },
  {
    "text": "And then only when I\nmake a function call does the code associated\nwith the function object run.",
    "start": "2505710",
    "end": "2514180"
  },
  {
    "text": "So when I'm defining the\nfunction, it does not run. It just stays inside\ncomputer memory as an object that exists.",
    "start": "2514180",
    "end": "2520560"
  },
  {
    "text": "And when I make my function\ncall is when I use that object. So the function call\nbasically takes my variables",
    "start": "2520560",
    "end": "2528390"
  },
  {
    "text": "and matches them to the\nfunction definition.",
    "start": "2528390",
    "end": "2534640"
  },
  {
    "text": "So a gets matched to low,\nand b gets matched to high. And low and high in\nthe function call",
    "start": "2534640",
    "end": "2540760"
  },
  {
    "text": "have actual values associated\nwith them, 2 and 7. And so that function will\nthen go ahead and do the work.",
    "start": "2540760",
    "end": "2548812"
  },
  {
    "text": "And at the end, it's\ngoing to return something, either an actual value or None. And then that actual value\nreplaces the entire function",
    "start": "2548812",
    "end": "2555770"
  },
  {
    "text": "call. So in my program,\nthe variable my_sum here is going to be\nequal to the return.",
    "start": "2555770",
    "end": "2562470"
  },
  {
    "text": "Just a little recap,\nbut hopefully this kind of keeps bringing\nthat point home.",
    "start": "2562470",
    "end": "2567740"
  },
  {
    "text": "So now we're going to talk\nabout in more detail what exactly happens when we\nmake a function call.",
    "start": "2567740",
    "end": "2573560"
  },
  {
    "text": "So when we make a function call,\nyou can think of the program as sort of taking a pause.",
    "start": "2573560",
    "end": "2580238"
  },
  {
    "text": "I've got my main program,\nand in my main program, I have a function call. That main program will\njust pause for a bit.",
    "start": "2580238",
    "end": "2586540"
  },
  {
    "text": "And that function\ncall, you can treat it as sort of a little\nmini program that needs to run and\nterminate, return a value,",
    "start": "2586540",
    "end": "2594670"
  },
  {
    "text": "before the main program\ncan resume executing. So that little mini program,\nthat function call basically",
    "start": "2594670",
    "end": "2602740"
  },
  {
    "text": "creates its own little\nenvironment that it lives in. So in that little\nenvironment, it",
    "start": "2602740",
    "end": "2608020"
  },
  {
    "text": "can create variables just like\nwe would in a regular program. It can modify variables.",
    "start": "2608020",
    "end": "2613120"
  },
  {
    "text": "It can print things. It can do all this\nwork within its body. And at some point, it'll finish\nits job, finish its task,",
    "start": "2613120",
    "end": "2621850"
  },
  {
    "text": "and it'll have some value that's\nthe result of all of that work that it did. And that value is what\nit hopefully returns back",
    "start": "2621850",
    "end": "2629150"
  },
  {
    "text": "to the main program. And then the main\nprogram can finish its-- can finish its job.",
    "start": "2629150",
    "end": "2635630"
  },
  {
    "text": "So what's key here is that every\ntime you make a function call, you basically create\na new environment.",
    "start": "2635630",
    "end": "2642500"
  },
  {
    "text": "And that environment\nis completely separate from the main\nprogram environment. As soon as the function\ncall terminates,",
    "start": "2642500",
    "end": "2649430"
  },
  {
    "text": "that function call\nenvironment disappears. So any variables\nthat were created",
    "start": "2649430",
    "end": "2655430"
  },
  {
    "text": "within that environment\nof the function call will also disappear. So all we're left with is just\nwhat's in the main program.",
    "start": "2655430",
    "end": "2663080"
  },
  {
    "text": "So now we're going to talk a\nlittle bit about environments. And if you understand\nthis, you'll understand 80% of functions\nand what to do with them.",
    "start": "2663080",
    "end": "2672340"
  },
  {
    "text": "So basically, when you\nfirst run your program, the program enters what we\ncall the global environment,",
    "start": "2672340",
    "end": "2678100"
  },
  {
    "text": "the main program environment. And any time you\nmake a function call, we're creating this\nnew environment.",
    "start": "2678100",
    "end": "2685280"
  },
  {
    "text": "So what exactly happens\nwhen we create these-- when we do these function calls?",
    "start": "2685280",
    "end": "2690380"
  },
  {
    "text": "How do these\nenvironments interact? And the answer is they\ndon't actually interfere",
    "start": "2690380",
    "end": "2695677"
  },
  {
    "text": "with each other that much. They only interfere\nwith each other through passing in parameters\nand through returning values.",
    "start": "2695677",
    "end": "2703930"
  },
  {
    "text": "But beyond that, these two\ndifferent environments, the main program environment\nand a function call environment,",
    "start": "2703930",
    "end": "2709690"
  },
  {
    "text": "can actually have variables\nthat have the same name but don't interfere\nwith each other because they exist in\ndifferent environments.",
    "start": "2709690",
    "end": "2717380"
  },
  {
    "text": "So we're going to look at\nthis example to showcase that. So here's a function.",
    "start": "2717380",
    "end": "2723220"
  },
  {
    "text": "It's pretty simple. It does not do much. It takes in one parameter,\nprobably a number,",
    "start": "2723220",
    "end": "2729580"
  },
  {
    "text": "and adds 1 to it. So it takes in an x and does\nx plus 1, reassigns x to it.",
    "start": "2729580",
    "end": "2736850"
  },
  {
    "text": "And then it does\nthis print statement and then returns\nthe new value of x. So it added 1 to whatever\nyou passed into it,",
    "start": "2736850",
    "end": "2743950"
  },
  {
    "text": "and it returns that new value. So that's the definition.",
    "start": "2743950",
    "end": "2749609"
  },
  {
    "text": "Again, this just sits\nin Python memory. It doesn't actually get run\nuntil we make a function call.",
    "start": "2749610",
    "end": "2755319"
  },
  {
    "text": "The parameters here when\nwe wrote our function are called formal parameters\nbecause there's no actual value",
    "start": "2755320",
    "end": "2762370"
  },
  {
    "text": "associated with them. We're writing this function\nassuming that at some point we're going to\nget a value for x.",
    "start": "2762370",
    "end": "2768880"
  },
  {
    "text": "But at the time we're\nwriting the function, there's no value for x. It's just this\nabstract variable.",
    "start": "2768880",
    "end": "2775720"
  },
  {
    "text": "And we're using that variable\nx within the function body, assuming that at some\npoint we're going",
    "start": "2775720",
    "end": "2781150"
  },
  {
    "text": "to get an initial value for x. So x is equal to\n3, at which point the body can then execute.",
    "start": "2781150",
    "end": "2787660"
  },
  {
    "text": "Now, when you make a function\ncall in the main program scope, that's when you pass--",
    "start": "2787660",
    "end": "2792910"
  },
  {
    "text": "make a function call\nwith an actual parameter. So here, you'll notice\nI'm using the same name x.",
    "start": "2792910",
    "end": "2799180"
  },
  {
    "text": "But this x inside\nthe main program is different than the x\nthat's this formal parameter",
    "start": "2799180",
    "end": "2804880"
  },
  {
    "text": "of the function. This actual parameter, when\nwe make the function call,",
    "start": "2804880",
    "end": "2811660"
  },
  {
    "text": "is mapped to the\nformal parameter. So at that point,\nthe formal parameter can get the value of the\nfunction call, which is 3.",
    "start": "2811660",
    "end": "2820450"
  },
  {
    "text": "And in fact, it doesn't\nactually matter what we name this variable out here.",
    "start": "2820450",
    "end": "2826570"
  },
  {
    "text": "We can name x is equal to 3 and\nmake the function call f of x. But we can also have\ny is equal to 3,",
    "start": "2826570",
    "end": "2833530"
  },
  {
    "text": "and we make the exact same\nfunction call, f of y, because we want to pass in 3\nas a parameter to this function",
    "start": "2833530",
    "end": "2839930"
  },
  {
    "text": "call.  So this x out here is different\nthan this x over here.",
    "start": "2839930",
    "end": "2849119"
  },
  {
    "text": "So the-- oh, yeah, go ahead. AUDIENCE: Which\none is the formal? ANA BELL: The formal is the one\nfrom the function definition.",
    "start": "2849120",
    "end": "2855343"
  },
  {
    "text": "We say it's formal\nbecause there's no value associated with it when\nyou first write the function.",
    "start": "2855343",
    "end": "2861140"
  },
  {
    "text": "You write the function first. There's nothing going on here. And then you have some\ncode that actually now",
    "start": "2861140",
    "end": "2868070"
  },
  {
    "text": "is taking on some values\nand you can run it. ",
    "start": "2868070",
    "end": "2873220"
  },
  {
    "text": "So let's trace through\nthis code little by little to see exactly what\nenvironments get created",
    "start": "2873220",
    "end": "2879610"
  },
  {
    "text": "as we make function calls. So again, this is my black box. It's a function. When I first run the program,\nwe finished the function",
    "start": "2879610",
    "end": "2887780"
  },
  {
    "text": "definition. So we're at this\npoint in our program, right before we do\nx is equal to 3. Inside my computer Python\nmemory what I have is",
    "start": "2887780",
    "end": "2896180"
  },
  {
    "text": "one environment created. And that's the environment\nof the main program. The only thing I have\nin this environment",
    "start": "2896180",
    "end": "2902150"
  },
  {
    "text": "is my f because at this\npoint in the program, where the red arrow is, I just\nhad a function definition.",
    "start": "2902150",
    "end": "2910010"
  },
  {
    "text": "So again, it's a definition--\nit's a function whose name is f, and it's an object.",
    "start": "2910010",
    "end": "2916660"
  },
  {
    "text": "It's not being run quite yet. It's an object that\ncontains some code. Now we have x is equal to 3.",
    "start": "2916660",
    "end": "2923480"
  },
  {
    "text": "So that's pretty easy. Inside my main\nprogram environment, I've got a variable name\nx, whose value is 3.",
    "start": "2923480",
    "end": "2931010"
  },
  {
    "text": "And then I have\nmy function call. So as soon as Python\nsees a function call,",
    "start": "2931010",
    "end": "2936230"
  },
  {
    "text": "it creates a new environment. And the current\nenvironment, where the call is being made from,\nso the main program one,",
    "start": "2936230",
    "end": "2943820"
  },
  {
    "text": "will be put on hold. So here I'm calling function f. So now I'm creating this\nnew environment that--",
    "start": "2943820",
    "end": "2951962"
  },
  {
    "text": "think of it like\nthis mini program, this little task\nthat needs to get done before the main program\ncan continue executing.",
    "start": "2951962",
    "end": "2958760"
  },
  {
    "text": "So I need to figure out what's\ngoing on in this mini program, in this function call to f.",
    "start": "2958760",
    "end": "2965090"
  },
  {
    "text": "All right, so here's my new\nenvironment, the scope of f. The first thing that we\nneed to do is figure out,",
    "start": "2965090",
    "end": "2970700"
  },
  {
    "text": "what are the parameters of f? So we look at the\nfunction definition, and we see it has one\nparameter named x.",
    "start": "2970700",
    "end": "2977360"
  },
  {
    "text": "So we're going to take\nthat x, and the first thing we're going to do is\nmap the formal parameter",
    "start": "2977360",
    "end": "2982610"
  },
  {
    "text": "to the actual parameter. So we're going to make\nthe formal parameter of f",
    "start": "2982610",
    "end": "2987950"
  },
  {
    "text": "named x take on the value 3. That's kind of what\nwe've been doing already.",
    "start": "2987950",
    "end": "2994670"
  },
  {
    "text": "But now this is getting down\nto details, just details.",
    "start": "2994670",
    "end": "2999950"
  },
  {
    "text": "We've mapped all the parameters. The body of the\nfunction executes. I've, again, kind of\nblurred out this one",
    "start": "2999950",
    "end": "3007420"
  },
  {
    "text": "because we're not in\nthis global scope. We're trying to figure\nout what f is doing. So the body of f says\ntake x, add 1 to it,",
    "start": "3007420",
    "end": "3015220"
  },
  {
    "text": "and reassign it to x. So what's x inside my function? It's 3.",
    "start": "3015220",
    "end": "3020650"
  },
  {
    "text": "We add 1 to it,\nand we make x be 4.",
    "start": "3020650",
    "end": "3026240"
  },
  {
    "text": "I skipped one thing, which is\nif in my main program I had y is equal to 3 and f\nof y, nothing really",
    "start": "3026240",
    "end": "3032600"
  },
  {
    "text": "would have changed. My formal parameter\nof f is still x. And I'm still mapping x to\nthe value that's in my--",
    "start": "3032600",
    "end": "3042350"
  },
  {
    "text": "here, in the actual parameter. So in my scope of\nf, I've got x is 3.",
    "start": "3042350",
    "end": "3049230"
  },
  {
    "text": "I increment it by 1. It gives me 4, and I\nresave it back into x.",
    "start": "3049230",
    "end": "3054320"
  },
  {
    "text": "And again, there's\nno collusion-- there's no collision\nhere in terms of naming because the scope\nof f, the environment f,",
    "start": "3054320",
    "end": "3062150"
  },
  {
    "text": "has a variable named x, and\nI'm just doing stuff with the x that f knows.",
    "start": "3062150",
    "end": "3067829"
  },
  {
    "text": "I do have another x\ninside my global scope. But that one's put\non hold for now.",
    "start": "3067830",
    "end": "3073520"
  },
  {
    "text": "All right, so I've\ndone x equals x plus 1. Then I do the print statement. So in f of x, x equals\n4, that gets printed out.",
    "start": "3073520",
    "end": "3080730"
  },
  {
    "text": "And then I return x. So the thing that gets returned\nis the value of x, so 4. And this again replaces\nthe function call.",
    "start": "3080730",
    "end": "3088590"
  },
  {
    "text": "So this gets returned\nback to whoever called me. And the environment that called\nme was just my main program.",
    "start": "3088590",
    "end": "3094430"
  },
  {
    "text": "And here I'm going to return 4. And this is going to\nreplace that with 4. As soon as the function\nsees the return",
    "start": "3094430",
    "end": "3101890"
  },
  {
    "text": "and returns that value\nback, it goes away. So notice that x that\nwe had created is gone.",
    "start": "3101890",
    "end": "3107710"
  },
  {
    "text": "Now we're in the main\nprogram, there's no confusion. My main program has its own x.",
    "start": "3107710",
    "end": "3113830"
  },
  {
    "text": "That other x that was\npart of the execution of f is gone because that\nfunction finished its job,",
    "start": "3113830",
    "end": "3120609"
  },
  {
    "text": "and it doesn't need its\nenvironment anymore. So now the return of the\nfunction replaces f of x,",
    "start": "3120610",
    "end": "3127140"
  },
  {
    "text": "and we see z is equal to 4. OK, that was super detailed.",
    "start": "3127140",
    "end": "3133060"
  },
  {
    "text": "But that's kind of what\nhappens step by step when we make a function call with the\nnew environments being created.",
    "start": "3133060",
    "end": "3138950"
  },
  {
    "text": "So if you can understand\nthat, it should be-- it should be pretty\nstraightforward,",
    "start": "3138950",
    "end": "3145600"
  },
  {
    "text": "and you won't get confused\nwhen you see an x out here. You have f of x as one function\nand then maybe another function",
    "start": "3145600",
    "end": "3153130"
  },
  {
    "text": "that has g of x and so on. So in order to know the\nscope that you're in,",
    "start": "3153130",
    "end": "3159592"
  },
  {
    "text": "the environment\nthat you're in, you need to know what expression\nyou're evaluating. So here, we were evaluating\nthis function call.",
    "start": "3159592",
    "end": "3167000"
  },
  {
    "text": "So that means that we were\ninside the environment of f.",
    "start": "3167000",
    "end": "3172680"
  },
  {
    "text": "Another example, and this\none's a little bit weird. It shows some of the\nnuances of Python.",
    "start": "3172680",
    "end": "3179640"
  },
  {
    "text": "And these aren't necessarily\ntrue in other languages. So I'm just going to do the\ndrawing of the scopes out here.",
    "start": "3179640",
    "end": "3188579"
  },
  {
    "text": "So let's start with\nthe one on the left. So you can see here I've\ngot one function f of y.",
    "start": "3188580",
    "end": "3193940"
  },
  {
    "text": "And I've got the main program\nthat creates x is equal to 5 and then a call to y. So inside my main program,\nI've got x is equal to 5.",
    "start": "3193940",
    "end": "3203450"
  },
  {
    "text": "And then I have a\nfunction call to f. Function call means we\nneed to create a new scope.",
    "start": "3203450",
    "end": "3209339"
  },
  {
    "text": "So this one's put\non hold for now until we figure out what f\nparentheses x is right here.",
    "start": "3209340",
    "end": "3216290"
  },
  {
    "text": "So the first thing\nwe need to do is grab f and take all the\nformal parameters of f--",
    "start": "3216290",
    "end": "3222059"
  },
  {
    "text": "there's one; its name is y-- and map them to the\nactual parameters.",
    "start": "3222060",
    "end": "3227670"
  },
  {
    "text": "So I'm calling f with 5. So I'm going to map y to 5. ",
    "start": "3227670",
    "end": "3234360"
  },
  {
    "text": "This function is going to take-- now the body of its\nfunction, x is equal to 1.",
    "start": "3234360",
    "end": "3241710"
  },
  {
    "text": "So it creates also\nan x whose value is 1 just within its scope. It adds 1 to x,\nso this becomes 2.",
    "start": "3241710",
    "end": "3250890"
  },
  {
    "text": "And then it prints x, so\nit's going to print 2. And then the\nfunction terminates.",
    "start": "3250890",
    "end": "3256260"
  },
  {
    "text": "It returns None. There's no return statement. And the function is done.",
    "start": "3256260",
    "end": "3263589"
  },
  {
    "text": "So this line has now finished. And the last thing\nthat the function does after it's done the\nreturn is the scope goes away.",
    "start": "3263590",
    "end": "3273600"
  },
  {
    "text": "And the last thing we\nneed to do now is print x. So this will print the value\nof x in the global scope, which",
    "start": "3273600",
    "end": "3278790"
  },
  {
    "text": "is 5. So the output of this little\npiece of code on the left side here is 2 and 5.",
    "start": "3278790",
    "end": "3284145"
  },
  {
    "start": "3284145",
    "end": "3289950"
  },
  {
    "text": "OK, what about the middle code? Similarly, I've got a\nfunction definition,",
    "start": "3289950",
    "end": "3296859"
  },
  {
    "text": "and then I create\nx is equal to 5. And then I make a call to g. All right, x is 5.",
    "start": "3296860",
    "end": "3302859"
  },
  {
    "text": "So as soon as I see\na function call, I need to create a new scope. And I need a map all the\nformal parameters of g.",
    "start": "3302860",
    "end": "3311650"
  },
  {
    "text": "It has one formal parameter. Its name is y. That one will be mapped to\nwhatever I made the function",
    "start": "3311650",
    "end": "3318580"
  },
  {
    "text": "call with, 5. X is 5 out here. So that gets mapped to 5.",
    "start": "3318580",
    "end": "3323710"
  },
  {
    "text": " What is this\nfunction going to do? Well, it prints x.",
    "start": "3323710",
    "end": "3331060"
  },
  {
    "text": "What's x inside the scope of g? Do I have a g inside x--",
    "start": "3331060",
    "end": "3337490"
  },
  {
    "text": "an x inside g? No. So this is something\nthat Python does.",
    "start": "3337490",
    "end": "3342500"
  },
  {
    "text": "It says, well, if\nyour environment doesn't have a variable named x,\nin this case, look further out",
    "start": "3342500",
    "end": "3350810"
  },
  {
    "text": "and see who called you. Well, which environment\ncalled this g?",
    "start": "3350810",
    "end": "3356450"
  },
  {
    "text": "The main one, right? Does your bigger environment,\nthe one who called you,",
    "start": "3356450",
    "end": "3361640"
  },
  {
    "text": "have a variable named x? It does, right? It's 5. So Python grabs the\nvalue associated",
    "start": "3361640",
    "end": "3368869"
  },
  {
    "text": "with that larger environment. And if that larger\nenvironment didn't have one, it would look further\nout and further out,",
    "start": "3368870",
    "end": "3374300"
  },
  {
    "text": "out until it doesn't have\nan environment to look at. So g is going to print the\nvalue of x, which is 5.",
    "start": "3374300",
    "end": "3383359"
  },
  {
    "text": "And then it's going to\nprint x plus 1, which is 6. And then it's done.",
    "start": "3383360",
    "end": "3390240"
  },
  {
    "text": "It returns None. And then as soon as it returns\nNone, this scope goes away.",
    "start": "3390240",
    "end": "3397560"
  },
  {
    "text": "And what we're left with\nis the global program, and we print x,\nwhich is still five.",
    "start": "3397560",
    "end": "3403290"
  },
  {
    "text": "What I want you to notice is\nthat that function g printed x plus 1 but never modified x.",
    "start": "3403290",
    "end": "3410839"
  },
  {
    "text": "We never said something\nlike x is equal to x plus 1 or something like that. We just figured out what x\nplus 1 was and printed it.",
    "start": "3410840",
    "end": "3418430"
  },
  {
    "text": " All right, one more\nexample, and this one",
    "start": "3418430",
    "end": "3425130"
  },
  {
    "text": "will actually end\nup in an error. So here I've got x is equal\nto 5, just like before.",
    "start": "3425130",
    "end": "3432130"
  },
  {
    "text": "And then I have a\nfunction call to h. So again, a function call\nmeans a new scope is created.",
    "start": "3432130",
    "end": "3438690"
  },
  {
    "text": "I've got one variable, y. That's my formal parameter. It gets mapped to whatever\nI call the function with, 5.",
    "start": "3438690",
    "end": "3446790"
  },
  {
    "text": "Oops, that's an s. And then what is\nthis function doing? That line, x plus equals 1\nis x is equal to x plus 1.",
    "start": "3446790",
    "end": "3458495"
  },
  {
    "start": "3458495",
    "end": "3464730"
  },
  {
    "text": "This is actually an error. Python doesn't let you do that. And the error it gives you is\nactually what it says there,",
    "start": "3464730",
    "end": "3471790"
  },
  {
    "text": "so UnboundLocalError,\nlocal variable x is referenced\nbefore an assignment.",
    "start": "3471790",
    "end": "3477250"
  },
  {
    "text": "So it doesn't actually grab\nthe value from the outer scope, like we did in the middle bit.",
    "start": "3477250",
    "end": "3483450"
  },
  {
    "text": "It doesn't grab it\nbecause it thinks you're trying to create a\nvariable named x inside h.",
    "start": "3483450",
    "end": "3492990"
  },
  {
    "text": "And you're trying to add 1 to x. But you never had a line that\nsaid x is equal to something",
    "start": "3492990",
    "end": "3502680"
  },
  {
    "text": "originally inside h. ",
    "start": "3502680",
    "end": "3507720"
  },
  {
    "text": "And so when you're trying to\nsay x is equal to x plus 1, it's trying to look for an\nx inside the scope of h,",
    "start": "3507720",
    "end": "3514410"
  },
  {
    "text": "but it doesn't have one. And so that's where we\nget that error from.",
    "start": "3514410",
    "end": "3521270"
  },
  {
    "text": "And this is not-- I mean, it's just\na nuance of Python, but it's kind of important to\nunderstand that you can access",
    "start": "3521270",
    "end": "3530060"
  },
  {
    "text": "variables, but you can't\nchange variables outside of your scope.",
    "start": "3530060",
    "end": "3535280"
  },
  {
    "text": "So the middle one just accesses\na variable, adds 1 to it, and prints it. But we never said x is\nequal to this value.",
    "start": "3535280",
    "end": "3544790"
  },
  {
    "text": "And it's kind of like,\nI guess the error you get is kind of like if\nyou made this be something",
    "start": "3544790",
    "end": "3549800"
  },
  {
    "text": "completely different, like z. You would get the same error. It would be error variable z\nreferenced before assignment.",
    "start": "3549800",
    "end": "3559610"
  },
  {
    "text": "So you can get x plus 1,\nbut I don't know what z is. ",
    "start": "3559610",
    "end": "3565742"
  },
  {
    "text": "This should be z.  AUDIENCE: So could you say,\nlike instead of the definition,",
    "start": "3565742",
    "end": "3572980"
  },
  {
    "text": "like z equals x, and\nthen do x plus equal 1? Because you're taking\nit from outside and--",
    "start": "3572980",
    "end": "3579640"
  },
  {
    "text": "ANA BELL: So if you-- no, because if you want to--\nif you want to explicitly say that you're taking\nit from outside,",
    "start": "3579640",
    "end": "3586240"
  },
  {
    "text": "there's a keyword called\nglobal that you would need to write that\nexplicitly says, hey, I'm grabbing this variable\nthat is not part of me.",
    "start": "3586240",
    "end": "3594950"
  },
  {
    "text": "It's part of-- it's in the\nmain program, the global scope. ",
    "start": "3594950",
    "end": "3601280"
  },
  {
    "text": "OK, the last thing\nI want to talk about is using functions as\narguments to other functions.",
    "start": "3601280",
    "end": "3607830"
  },
  {
    "text": "So the way I've sort of\nbeen explaining a function definition is basically saying\nthat when we define a function,",
    "start": "3607830",
    "end": "3616579"
  },
  {
    "text": "Python essentially puts\nsome code in memory whose name is the function name.",
    "start": "3616580",
    "end": "3623180"
  },
  {
    "text": "So basically, the function\nname creates for me an object inside\nmemory that happens to be a function object.",
    "start": "3623180",
    "end": "3629910"
  },
  {
    "text": "And just to show you\nwhat that means is we have a function is_even. We've definitely created it.",
    "start": "3629910",
    "end": "3635840"
  },
  {
    "text": "If we say the type of\nis_even, it's function.",
    "start": "3635840",
    "end": "3641510"
  },
  {
    "text": "So the function is_even\nactually has a type, and its type is a\nfunction in Python.",
    "start": "3641510",
    "end": "3647510"
  },
  {
    "text": "So functions are\nbasically just objects, just like an integer is an\nobject, a Boolean is an object,",
    "start": "3647510",
    "end": "3654740"
  },
  {
    "text": "a float is an object. A function it an object. It just looks different.",
    "start": "3654740",
    "end": "3660329"
  },
  {
    "text": "It has a bunch of code\nassociated with it. So if a function is an\nobject, what that means is we",
    "start": "3660330",
    "end": "3666319"
  },
  {
    "text": "can use an assignment\noperator on a function name.",
    "start": "3666320",
    "end": "3671330"
  },
  {
    "text": "So we can have two names\nof functions that point to the same function code.",
    "start": "3671330",
    "end": "3676520"
  },
  {
    "text": "We can use a function as an\nargument to another function, like a parameter to a function. Or we can return a function\nfrom another function.",
    "start": "3676520",
    "end": "3686099"
  },
  {
    "text": "So here's an example. Pretend that this\nis our code file. We've got the memory.",
    "start": "3686100",
    "end": "3693740"
  },
  {
    "text": "The first line of code\nhere, the definition, basically creates this function\nobject for me in memory.",
    "start": "3693740",
    "end": "3699530"
  },
  {
    "text": "It's kind of like a variable. Is_even is the name of\nthis function object.",
    "start": "3699530",
    "end": "3705500"
  },
  {
    "text": "And this variable is bound\nto my function object with some code\nassociated with it.",
    "start": "3705500",
    "end": "3711150"
  },
  {
    "text": "So you think of the\nfunction as just an object. Similarly, when we\nwrite r is equal to 2,",
    "start": "3711150",
    "end": "3718190"
  },
  {
    "text": "I think of that\nas the same thing. R is the name, and\nI've got an integer object whose value is 2.",
    "start": "3718190",
    "end": "3723410"
  },
  {
    "text": "That's exactly what happens\nwhen we create a function definition. Similarly, pi is\nequal to 22 over 7.",
    "start": "3723410",
    "end": "3731180"
  },
  {
    "text": "Pi is the name\nassociated with a float object that has that value.",
    "start": "3731180",
    "end": "3736300"
  },
  {
    "text": "So what we can do, now\nthat we've established that a function is basically\nan object with a name,",
    "start": "3736300",
    "end": "3742780"
  },
  {
    "text": "we can say a line like this,\nmy_func equals to is_even.",
    "start": "3742780",
    "end": "3749350"
  },
  {
    "text": "The right-hand side here is\njust the name of my function.",
    "start": "3749350",
    "end": "3755020"
  },
  {
    "text": "It's not a function call. Notice, there's no\nparentheses after is_even. There's no parameter,\nnone of that.",
    "start": "3755020",
    "end": "3761710"
  },
  {
    "text": "It's literally the\nname of my function. So inside memory what I've\nended up doing is I have two--",
    "start": "3761710",
    "end": "3769500"
  },
  {
    "text": "oops, I have two names,\nmy_func and is_even, that both point to the\nexact same function object.",
    "start": "3769500",
    "end": "3777369"
  },
  {
    "text": "So that means that\nthat function object, so this is_even function,\ncan be referenced",
    "start": "3777370",
    "end": "3784650"
  },
  {
    "text": "by both of these names. So on the next two lines here,\na equals this and b equals this,",
    "start": "3784650",
    "end": "3790530"
  },
  {
    "text": "I'm running the same code just\nreferenced by different names. So then a is going\nto be bound to False,",
    "start": "3790530",
    "end": "3797430"
  },
  {
    "text": "and b is bound to\nTrue because I'm accessing the same\ncode, fundamentally, by different names.",
    "start": "3797430",
    "end": "3804490"
  },
  {
    "text": "Does that make sense? Yes, awesome. So everything in Python is an\nobject, including functions.",
    "start": "3804490",
    "end": "3809859"
  },
  {
    "text": "It's strange to think,\nbut there you have it. So let's look at this code.",
    "start": "3809860",
    "end": "3816260"
  },
  {
    "text": "I've got three function\ndefinitions and only one function call. ",
    "start": "3816260",
    "end": "3825020"
  },
  {
    "text": "What are the\nfunction definitions? One, I have named calc. It takes in three parameters.",
    "start": "3825020",
    "end": "3831620"
  },
  {
    "text": "One I have add. It takes in two parameters. And one I have div. It takes in two parameters.",
    "start": "3831620",
    "end": "3837410"
  },
  {
    "text": "Add does something\npretty simple. Div has maybe a print\nstatement but also does",
    "start": "3837410",
    "end": "3843770"
  },
  {
    "text": "something pretty simple. Calc is the one that's\nreally strange, right? Because it takes in\nthese three parameters,",
    "start": "3843770",
    "end": "3850790"
  },
  {
    "text": "but what's the thing\nit's doing in here? It's kind of treating one\nof the parameters, op,",
    "start": "3850790",
    "end": "3857030"
  },
  {
    "text": "operation, as a function. ",
    "start": "3857030",
    "end": "3863310"
  },
  {
    "text": "That's what's\nstrange about calc. Let's trace through\nthe code to see exactly what that means for us.",
    "start": "3863310",
    "end": "3868570"
  },
  {
    "text": "So when I first\nrun my program, I have three function definitions.",
    "start": "3868570",
    "end": "3874240"
  },
  {
    "text": "So I'm creating three function\nobjects inside memory-- calc, a function object\nthat has some code;",
    "start": "3874240",
    "end": "3880050"
  },
  {
    "text": "add, a function object\nthat has some code; and div, a function\nobject that has some code.",
    "start": "3880050",
    "end": "3886560"
  },
  {
    "text": "And then we get\nto the good stuff, res equals the function call.",
    "start": "3886560",
    "end": "3892150"
  },
  {
    "text": "So res is going\nto be a variable. That's going to have a value. What value?",
    "start": "3892150",
    "end": "3897330"
  },
  {
    "text": "We need to figure that out. Calc is a function call.",
    "start": "3897330",
    "end": "3902660"
  },
  {
    "text": "Every time we have\na function call, we need to create\na new environment.",
    "start": "3902660",
    "end": "3908580"
  },
  {
    "text": "So now we are creating\nour calc environment.",
    "start": "3908580",
    "end": "3913890"
  },
  {
    "text": "So we've put aside the\nmain program scope for now. And we're focusing on\nwhat calc is going to do.",
    "start": "3913890",
    "end": "3920000"
  },
  {
    "text": "First thing we\nneed to do is take every single one\nof our parameters and map it to the\nactual parameters.",
    "start": "3920000",
    "end": "3927290"
  },
  {
    "text": "So the first parameter is op. It gets mapped to add.",
    "start": "3927290",
    "end": "3937180"
  },
  {
    "text": "The next parameter is x. It gets mapped to 2. The last parameter is y. It gets mapped to 3.",
    "start": "3937180",
    "end": "3942550"
  },
  {
    "text": "Is everyone OK so far? Yes, OK. I've literally just matched\nnames of formal parameter",
    "start": "3942550",
    "end": "3948550"
  },
  {
    "text": "to actual parameter. OK, so now we finished\nmapping the parameters.",
    "start": "3948550",
    "end": "3954500"
  },
  {
    "text": "Next we get to run the\nbody of the function. Return, what is this?",
    "start": "3954500",
    "end": "3960480"
  },
  {
    "text": "Let's replace op x and y\nwith the actual values. This basically becomes return\na function call, add 2, 3.",
    "start": "3960480",
    "end": "3971510"
  },
  {
    "text": "I've just replaced the names. That's it. What's add 2, 3? ",
    "start": "3971510",
    "end": "3979200"
  },
  {
    "text": "It's another\nfunction call, right? So calc is going to\nhave to be put on hold because I have to figure out\nwhat add is going to return.",
    "start": "3979200",
    "end": "3986490"
  },
  {
    "text": " OK, so what's add\ngoing to return for me?",
    "start": "3986490",
    "end": "3992430"
  },
  {
    "text": "Well, add 2, 3 is what\nI'm trying to figure out. So I'm going to\nmap a to 2, b to 3.",
    "start": "3992430",
    "end": "3998530"
  },
  {
    "text": "It's going to do\n5 as the return. So it returns 5 to\nwhoever called it.",
    "start": "3998530",
    "end": "4004950"
  },
  {
    "text": "And whoever called it\nwas calc, right here. So this expression here, op\nx, y, which was add 2, 3,",
    "start": "4004950",
    "end": "4013280"
  },
  {
    "text": "is replaced with 5. Everyone OK so far? Awesome.",
    "start": "4013280",
    "end": "4019380"
  },
  {
    "text": "And then calc can now finish. Notice add finished its job. So it went away. Now calc can finally\nreturn its value.",
    "start": "4019380",
    "end": "4026650"
  },
  {
    "text": "So it can finish as well. So this one will\nreturn 5 to whoever",
    "start": "4026650",
    "end": "4031750"
  },
  {
    "text": "called it, which was\nthe main program. And finally, calc has finished\nits job, and it returned 5.",
    "start": "4031750",
    "end": "4037464"
  },
  {
    "text": " So step by step, we just kind\nof trace through the code,",
    "start": "4037465",
    "end": "4044420"
  },
  {
    "text": "functions out to in,\nand replacing variables wherever needed.",
    "start": "4044420",
    "end": "4050010"
  },
  {
    "text": "So it's your turn. Tell me what's the value\nof res given this function",
    "start": "4050010",
    "end": "4055940"
  },
  {
    "text": "call to calc. And what's going to get printed? ",
    "start": "4055940",
    "end": "4064799"
  },
  {
    "text": "So we can even\nwrite our functions. So in the main program,\nwhat do I have?",
    "start": "4064800",
    "end": "4072730"
  },
  {
    "text": " AUDIENCE: Calc and div.",
    "start": "4072730",
    "end": "4079482"
  },
  {
    "text": "ANA BELL: Yep, calc and\ndiv are my functions. ",
    "start": "4079482",
    "end": "4085810"
  },
  {
    "text": "That's it? AUDIENCE: Is res also there? ANA BELL: Which one? AUDIENCE: Res. ANA BELL: Yeah, res\nwill be the result, yep.",
    "start": "4085810",
    "end": "4091920"
  },
  {
    "text": "And the res we will\nhave a question mark because we don't\nknow what it is yet. And what's the first\nthing I need to do?",
    "start": "4091920",
    "end": "4097649"
  },
  {
    "text": " Yeah, make a new scope, exactly.",
    "start": "4097649",
    "end": "4103068"
  },
  {
    "text": "So that's the scope of calc. And we're going\nto map op to div.",
    "start": "4103069",
    "end": "4110420"
  },
  {
    "text": "What do I have? X and y to 2 and 0. Thank you. ",
    "start": "4110420",
    "end": "4118028"
  },
  {
    "text": "So what's op going to do? AUDIENCE: [INAUDIBLE].",
    "start": "4118029",
    "end": "4123409"
  },
  {
    "text": "ANA BELL: Yes, exactly. We make another scope for div.",
    "start": "4123409",
    "end": "4128639"
  },
  {
    "text": "A is 2, and b is 0. ",
    "start": "4128640",
    "end": "4134420"
  },
  {
    "text": "So we're kind of\ntwo scopes deep. What's div going to do?",
    "start": "4134420",
    "end": "4141082"
  },
  {
    "text": "AUDIENCE: Print out a\ndenominator [INAUDIBLE].. ANA BELL: Yep, so div prints\nout the thing, \"Denom was 0.\"",
    "start": "4141082",
    "end": "4146689"
  },
  {
    "text": "And what's div returning? AUDIENCE: None. ANA BELL: None, perfect. So div returns\nNone here to calc.",
    "start": "4146689",
    "end": "4153940"
  },
  {
    "text": " And then div is gone.",
    "start": "4153940",
    "end": "4161439"
  },
  {
    "text": "And then None gets\nreturned from calc here. ",
    "start": "4161439",
    "end": "4168339"
  },
  {
    "text": "And then calc is gone. And all I'm left with\nis res equals None.",
    "start": "4168340",
    "end": "4175299"
  },
  {
    "text": "Exactly, the return of calc. ",
    "start": "4175300",
    "end": "4180549"
  },
  {
    "text": "One more example showing scope,\njust kind of showcasing these--",
    "start": "4180550",
    "end": "4187520"
  },
  {
    "text": "sort of the same idea. So I've got three\nfunctions here, func_a, func_b, and func_c.",
    "start": "4187520",
    "end": "4193310"
  },
  {
    "text": "Func_a takes in, you\ncan see, no parameters. Func_b takes in one parameter. Func_c takes in two parameters.",
    "start": "4193310",
    "end": "4199970"
  },
  {
    "text": "And if we scan the code,\nwe see that one of them is weirdly doing something.",
    "start": "4199970",
    "end": "4205370"
  },
  {
    "text": "So it's actually\ngoing to be a function because you see we're calling\nit like a function inside here.",
    "start": "4205370",
    "end": "4211050"
  },
  {
    "text": "So we know f is going to\nhave to be a function. So if we run this program, first\nthree function definitions,",
    "start": "4211050",
    "end": "4218880"
  },
  {
    "text": "basically put some code\nfor us in the memory, when we make func call--",
    "start": "4218880",
    "end": "4225270"
  },
  {
    "text": "sorry, func_a call, this\ncreates a new scope. A has no parameter-- or\nfunc_a has no parameters.",
    "start": "4225270",
    "end": "4232179"
  },
  {
    "text": "So there's nothing to bind. All this function is going to\ndo is print \"inside func_a\"",
    "start": "4232180",
    "end": "4237450"
  },
  {
    "text": "and then return None. So that whole thing is\ngoing to print None.",
    "start": "4237450",
    "end": "4244260"
  },
  {
    "text": "Next, func_b is going\nto be another function call right here.",
    "start": "4244260",
    "end": "4249940"
  },
  {
    "text": "So it creates a function\nscope right here. We map the formal\nparameter y to 2.",
    "start": "4249940",
    "end": "4258570"
  },
  {
    "text": "And then we finish mapping\nall the parameters. And what we need to do\nnext is do the body.",
    "start": "4258570",
    "end": "4264099"
  },
  {
    "text": "So we print \"inside\nfunc_b,\" and it just returns the value you passed\ninto it, so not a very smart or interesting function.",
    "start": "4264100",
    "end": "4271000"
  },
  {
    "text": "So it prints that and returns\n2 back to whoever called it. Whoever called it was here.",
    "start": "4271000",
    "end": "4276909"
  },
  {
    "text": "So this print statement becomes\nprint 5 plus 2, the return. So that's going to\nprint 7 to the console.",
    "start": "4276910",
    "end": "4284380"
  },
  {
    "text": "And lastly, the interesting\none is going to be func_c. So func_c, notice I'm calling\nit with an actual function I",
    "start": "4284380",
    "end": "4290790"
  },
  {
    "text": "have in hand, func_b, one of\nthese that I've defined here.",
    "start": "4290790",
    "end": "4295820"
  },
  {
    "text": "So func_c is a function call. So there's my scope. I am mapping formal parameter\nf to func_b and z to 3.",
    "start": "4295820",
    "end": "4306410"
  },
  {
    "text": "So just mapping one by one. And then I'm doing\nthe body of func_c.",
    "start": "4306410",
    "end": "4312940"
  },
  {
    "text": "So the body says now print\nthis and return this. So we print the statement.",
    "start": "4312940",
    "end": "4319620"
  },
  {
    "text": "And then the return\nbasically says, well, what's f function call f z?",
    "start": "4319620",
    "end": "4325860"
  },
  {
    "text": "We have to figure out what\nthe actual values are. And it's func_b parentheses 3.",
    "start": "4325860",
    "end": "4334770"
  },
  {
    "text": "So that's another\nfunction call, which means another function scope. Again, not a very smart\nor interesting function,",
    "start": "4334770",
    "end": "4341040"
  },
  {
    "text": "this func_b. It just takes in the 3,\nit prints inside func_b, and it returns the 3 back\nto whoever called it.",
    "start": "4341040",
    "end": "4347820"
  },
  {
    "text": "So that function is done. And then the func_c can\nterminate and return",
    "start": "4347820",
    "end": "4353250"
  },
  {
    "text": "3 to whoever called\nit, which was out here. ",
    "start": "4353250",
    "end": "4359190"
  },
  {
    "text": "And notice as soon\nas a function call terminates and does a\nreturn, it immediately-- all of its variables,\neverything that got",
    "start": "4359190",
    "end": "4365880"
  },
  {
    "text": "created inside that\nenvironment go away. They get wiped out.",
    "start": "4365880",
    "end": "4372210"
  },
  {
    "text": "OK, I'll give you about\na minute to try this. So write a function that meets\nthe following specifications.",
    "start": "4372210",
    "end": "4378870"
  },
  {
    "text": "So I have a function\nnamed apply. Criteria is a formal parameter.",
    "start": "4378870",
    "end": "4384507"
  },
  {
    "text": "So at some point,\nyou're going to have a function that does this. It takes a number, an integer,\nand returns a Boolean.",
    "start": "4384507",
    "end": "4391790"
  },
  {
    "text": "So however a function\ndoes that, that's what's going to be passed in. And then n is an integer.",
    "start": "4391790",
    "end": "4397590"
  },
  {
    "text": "And what I want you to do is\ntell me how many numbers from 0 to n match that criteria.",
    "start": "4397590",
    "end": "4404280"
  },
  {
    "text": "So when I apply the\nfunction criteria to numbers 0 through\nn, how many of those actually return True\non that function?",
    "start": "4404280",
    "end": "4411480"
  },
  {
    "text": "So just to show you something-- what this means concretely,\nhere's my function apply.",
    "start": "4411480",
    "end": "4418460"
  },
  {
    "text": "Here's a function that I could\ncall the apply with, is_even. Sorry, I lied. I guess we are seeing is_even a\nfew more times in this lecture.",
    "start": "4418460",
    "end": "4426960"
  },
  {
    "text": "So here's a function is_even. And basically, I\nrun apply by saying I want to run function\napply with the name is_even.",
    "start": "4426960",
    "end": "4434790"
  },
  {
    "text": "So here I'm mapping name\nto numbers 0 through 10.",
    "start": "4434790",
    "end": "4440530"
  },
  {
    "text": "So I'll give you about\na minute to try it out. And then I can write it\njust so we have some--",
    "start": "4440530",
    "end": "4446490"
  },
  {
    "text": "so we finish on time. Does anyone have a start? ",
    "start": "4446490",
    "end": "4455720"
  },
  {
    "text": "So we know we want\nto touch each number 0 through n to see whether\nthis criteria applies to them.",
    "start": "4455720",
    "end": "4462560"
  },
  {
    "text": "So what's the start\nto get that going?  Yeah.",
    "start": "4462560",
    "end": "4467720"
  },
  {
    "text": "AUDIENCE: For i in range-- ANA BELL: For i in range n plus\n1 because we want to include n?",
    "start": "4467721",
    "end": "4476969"
  },
  {
    "text": "How do we apply the\nfunction criteria to each one of these values? ",
    "start": "4476970",
    "end": "4485703"
  },
  {
    "text": "AUDIENCE: Criteria parentheses? ANA BELL: Yeah, exactly. We just say criteria. And this name will be replaced\nwith whatever function we're",
    "start": "4485703",
    "end": "4492840"
  },
  {
    "text": "going to call apply with, i. And this criteria\ni will basically",
    "start": "4492840",
    "end": "4499560"
  },
  {
    "text": "be the return of criteria. What did I say criteria returns? It takes in a number\nand returns a Boolean.",
    "start": "4499560",
    "end": "4508880"
  },
  {
    "text": "So we know that\nthis is a Boolean. What do I want to do\nwith this Boolean? ",
    "start": "4508880",
    "end": "4518809"
  },
  {
    "text": "If it's true, I\nwant to count it. If it's not, I don't. So if criteria i\ncount plus equals 1.",
    "start": "4518810",
    "end": "4528325"
  },
  {
    "text": " I'll put this up here. And let's remember to\ninitialize our count.",
    "start": "4528325",
    "end": "4536565"
  },
  {
    "text": " And then that's it, right? If it doesn't match,\nthen I don't care",
    "start": "4536565",
    "end": "4543360"
  },
  {
    "text": "about doing anything with it. So then we just return count. ",
    "start": "4543360",
    "end": "4548630"
  },
  {
    "text": "So notice I'm using\nmy function here. That's just the parameter,\nkind of like a placeholder for any other function.",
    "start": "4548630",
    "end": "4555240"
  },
  {
    "text": "So this is_even function, when\nit's a parameter to apply,",
    "start": "4555240",
    "end": "4562270"
  },
  {
    "text": "will tell me 6, right? 0, 2, 4, 6, 8, 10,\nthat's six values that",
    "start": "4562270",
    "end": "4567880"
  },
  {
    "text": "match this criteria. And what's cool is that I can\nactually create any function.",
    "start": "4567880",
    "end": "4573230"
  },
  {
    "text": "So if I want a function that's\ncalled is_five, for example,",
    "start": "4573230",
    "end": "4578650"
  },
  {
    "text": "it takes in a number\nand returns True if that number is equal to 5. It's still a function\nthat takes in an integer",
    "start": "4578650",
    "end": "4586050"
  },
  {
    "text": "and returns a Boolean. All I need to do then is run\nthis apply with the function",
    "start": "4586050",
    "end": "4592050"
  },
  {
    "text": "is_five. So I just changed that\nhere, and then if I run it,",
    "start": "4592050",
    "end": "4597300"
  },
  {
    "text": "it should just give me one\nvalue, the 5, of course, is one that matches this is_five\ncriteria between 0 and 10.",
    "start": "4597300",
    "end": "4608160"
  },
  {
    "text": "Yeah, so that's basically it. So we saw some functions-- a lot\nmore you can do with functions.",
    "start": "4608160",
    "end": "4613500"
  },
  {
    "text": "They're basically\nobjects in Python. So they can be\nmanipulated just like you would any other object.",
    "start": "4613500",
    "end": "4618510"
  },
  {
    "text": "You can have them be\nparameters to a function. You can have them be\nreturned from a function.",
    "start": "4618510",
    "end": "4624420"
  },
  {
    "text": "You can assign another\nname to this function body, things like that.",
    "start": "4624420",
    "end": "4629790"
  },
  {
    "text": "I showed you how to think about\nenvironments so that the naming doesn't get confusing.",
    "start": "4629790",
    "end": "4635730"
  },
  {
    "text": "As soon as a function\ncall is made, that means another\nenvironment is created. So variables created\nwithin that environment",
    "start": "4635730",
    "end": "4642090"
  },
  {
    "text": "have no influence\non other variables created in other environments.",
    "start": "4642090",
    "end": "4647730"
  },
  {
    "text": "And functions are\na very nice way for us to write code that\ncan be easily be built up on.",
    "start": "4647730",
    "end": "4655610"
  },
  {
    "text": "OK, that's it. Thank you. AUDIENCE: Thank you. ",
    "start": "4655610",
    "end": "4665000"
  }
]