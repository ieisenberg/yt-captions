[
  {
    "start": "0",
    "end": "20000"
  },
  {
    "text": " The following\ncontent is provided under a Creative\nCommons license. Your support will help MIT\nOpenCourseWare continue",
    "start": "0",
    "end": "6860"
  },
  {
    "text": "to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6860",
    "end": "13330"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13330",
    "end": "21830"
  },
  {
    "start": "20000",
    "end": "120000"
  },
  {
    "text": "PROFESSOR: If you guys\nwant me to cover anything in particular, is\nthere anything you didn't understand in lecture? ",
    "start": "21830",
    "end": "29840"
  },
  {
    "text": "In the last section, I\ncovered the recursion trees because they will\nbe on the Pset, and people said they\nwere a bit unclear,",
    "start": "29840",
    "end": "35940"
  },
  {
    "text": "so we can do that and cover less\nof the stuff that I have here.",
    "start": "35940",
    "end": "42312"
  },
  {
    "text": "Or if there's anything else,\nyou can tell me what you want. So there I cover recursion\ntrees because someone said, hey,",
    "start": "42312",
    "end": "48040"
  },
  {
    "text": "can you go over that again? Is there any pain points? ",
    "start": "48040",
    "end": "56620"
  },
  {
    "text": "No? OK. So then I'm going to\ngive you the same choice that I gave to people\nlast time, and that",
    "start": "56620",
    "end": "62310"
  },
  {
    "text": "is we can go over\nrecursion trees again, but if I do that, then I\nwon't have time to go over",
    "start": "62310",
    "end": "68630"
  },
  {
    "text": "the code for deleting a node\nfrom a binary search tree. So we'll go through\nthe theory and you guys will have to go through\nthe code on your own.",
    "start": "68630",
    "end": "75070"
  },
  {
    "text": "But instead, we'll go\nover recursion trees again and remember how you\nsolve a recurrence using",
    "start": "75070",
    "end": "81770"
  },
  {
    "text": "recursion trees. The alternative is\nwe don't do that and we complete\nthe deletions part.",
    "start": "81770",
    "end": "89982"
  },
  {
    "text": "AUDIENCE: I feel like\ncovering deletions, since we didn't do that in\nlecture, that would probably be more helpful.",
    "start": "89982",
    "end": "96032"
  },
  {
    "text": "PROFESSOR: Let's take a vote. Who wants to do deletions\nin painstaking detail? So deletions and not recursion?",
    "start": "96032",
    "end": "105410"
  },
  {
    "text": "Who wants to do recursion\ntrees and not deletion? AUDIENCE: It's about equal.",
    "start": "105410",
    "end": "110580"
  },
  {
    "text": "PROFESSOR: It's equal\nand nobody cares. I'm really sad. ",
    "start": "110580",
    "end": "118376"
  },
  {
    "text": "AUDIENCE: Let's do\nboth in half detail. PROFESSOR: OK, sure. Who remembers merge sort?",
    "start": "118376",
    "end": "124079"
  },
  {
    "start": "120000",
    "end": "215000"
  },
  {
    "text": "What does merge sort\ndo really quick? AUDIENCE: It takes some\nsort of unsorted array,",
    "start": "124080",
    "end": "130050"
  },
  {
    "text": "splits it in half, and\nthen continually splits it, and then once it finally\ngets to the point",
    "start": "130050",
    "end": "135480"
  },
  {
    "text": "where you have arrays of two\nelements, then it sorts them,",
    "start": "135480",
    "end": "140540"
  },
  {
    "text": "and then sorts those,\nand then sorts those. It's a fun thing. And then it merges [INAUDIBLE].",
    "start": "140540",
    "end": "145960"
  },
  {
    "text": "PROFESSOR: That's so much code. I don't like to write much code\nbecause for every line of code",
    "start": "145960",
    "end": "151359"
  },
  {
    "text": "that you write, you\nmight have a bug in it, so I like to write less code. So the way I do it is when I\nget to an array size of one",
    "start": "151360",
    "end": "157950"
  },
  {
    "text": "element, I know\nit's already sorted. So merge sort. You have an array,\nit's unsorted.",
    "start": "157950",
    "end": "163380"
  },
  {
    "text": "Split it into two halves,\ncall merge sort on each half, assume that magically, they're\ngoing to come back sorted,",
    "start": "163380",
    "end": "169780"
  },
  {
    "text": "and then you merge\nthe sorted halves. How much time does merging take? ",
    "start": "169780",
    "end": "177590"
  },
  {
    "text": "OK. So the recursion for the\nrunning time of merge sort?",
    "start": "177590",
    "end": "183042"
  },
  {
    "text": "AUDIENCE: Why does\nit take n time? Just too large? AUDIENCE: Isn't it\nthe finger thing where you take each element,\nand you're like, this one,",
    "start": "183042",
    "end": "189018"
  },
  {
    "text": "is that greater or less than,\nthen you put it in the array. So you get-- PROFESSOR: Please take my\nword for it that it's order n.",
    "start": "189018",
    "end": "196694"
  },
  {
    "text": "AUDIENCE: I'll explain it\nand then I'll be confused.  PROFESSOR: OK, so order n.",
    "start": "196694",
    "end": "202985"
  },
  {
    "text": "What's the recursion? ",
    "start": "202985",
    "end": "208422"
  },
  {
    "text": "Don't give me the\nsolution because then I can't do the trees anymore,\nso give me the recursion before it's solved.",
    "start": "208422",
    "end": "213675"
  },
  {
    "text": "Give me the recurrence formula. So it starts with T of N, right?",
    "start": "213675",
    "end": "219566"
  },
  {
    "start": "215000",
    "end": "263000"
  },
  {
    "text": "AUDIENCE: It starts with\nN over 2 plus N, I think. ",
    "start": "219566",
    "end": "226844"
  },
  {
    "text": "PROFESSOR: Perfect.  So you take the array,\nyou split it into two,",
    "start": "226844",
    "end": "232690"
  },
  {
    "text": "you call merge sort on the\ntwo halves of the arrays. So you call merge sort twice. That's why you have a 2 here.",
    "start": "232690",
    "end": "239140"
  },
  {
    "text": "The 2 matters. Without it, you get\na different answer. And when you call it,\nthe arrays that you give it are half the\nsize, and then merge",
    "start": "239140",
    "end": "246909"
  },
  {
    "text": "takes order and time. Splitting depends on what you're\nusing to store your arrays. Can be constant time or it\ncan be order N. So the time",
    "start": "246910",
    "end": "254860"
  },
  {
    "text": "won't change because of split. How do we solve this recurrence?",
    "start": "254860",
    "end": "260845"
  },
  {
    "text": " The recursion tree\nmethod says that we're",
    "start": "260845",
    "end": "265870"
  },
  {
    "start": "263000",
    "end": "385000"
  },
  {
    "text": "going to draw a call graph. So we start out\nwith a call to merge sort with an array\nof size N. Then",
    "start": "265870",
    "end": "271910"
  },
  {
    "text": "it's going to call\nmerge sort again, but after the array is split. So it's going to call merge\nsort twice, size is N over 2.",
    "start": "271910",
    "end": "278730"
  },
  {
    "text": " This guy gets an array of\nN over 2, calls merge sort.",
    "start": "278730",
    "end": "285680"
  },
  {
    "text": "Two arrays, sizes\nN over 4, N over 4.",
    "start": "285680",
    "end": "290759"
  },
  {
    "text": "This does the same.  So this goes on forever and ever\nand ever until at some point",
    "start": "290760",
    "end": "300420"
  },
  {
    "text": "we reach our base case. So we're going to\nhave a bunch of calls",
    "start": "300420",
    "end": "305940"
  },
  {
    "text": "here where the array size is? What's our base case? 1.",
    "start": "305940",
    "end": "311020"
  },
  {
    "text": "Excellent.  So this is the call graph\nfor merge sort, and let's",
    "start": "311020",
    "end": "318240"
  },
  {
    "text": "put the base case here so we\nknow what we're talking about. T of 1 is theta 1.",
    "start": "318240",
    "end": "323370"
  },
  {
    "text": " Now inside the\nnodes, we're going to put the cost for each\ncall without counting",
    "start": "323370",
    "end": "332150"
  },
  {
    "text": "the sub-call, so\nthe children here. That's this guy here,\nexcept instead of order N,",
    "start": "332150",
    "end": "338370"
  },
  {
    "text": "I will write CN. Remember how sometimes\nwe use CN instead of the order of notation?",
    "start": "338370",
    "end": "345500"
  },
  {
    "text": "The reason we do that is if I\nput in the asymptotic notation, then we're going to be\ntempted to sum them up.",
    "start": "345500",
    "end": "352930"
  },
  {
    "text": "You're allowed to sum terms\nusing asymptotic notation as long as there's a\nfinite number of them,",
    "start": "352930",
    "end": "359200"
  },
  {
    "text": "but here, it turns out there's\nan infinite number of them. Also, if you go this way,\nyou can never go wrong.",
    "start": "359200",
    "end": "365150"
  },
  {
    "text": "You always get the\nright answer, so that's why we switch from\norder N to CN.",
    "start": "365150",
    "end": "371620"
  },
  {
    "text": "In order to merge sort\nan array of size N, we're going to merge sort\ntwo arrays of size N over 2",
    "start": "371620",
    "end": "378100"
  },
  {
    "text": "and then spend CN time\non doing the merge. What are the costs here?",
    "start": "378100",
    "end": "383355"
  },
  {
    "text": " To sort an array\nof N over 2, what's the cost outside\nthe cost to merge?",
    "start": "383355",
    "end": "391670"
  },
  {
    "start": "385000",
    "end": "450000"
  },
  {
    "text": "AUDIENCE: C of N over 2. PROFESSOR: Perfect. C times N over 2.",
    "start": "391670",
    "end": "397000"
  },
  {
    "text": "C times N over 2. How about here? AUDIENCE: C times N over 4.",
    "start": "397000",
    "end": "402978"
  },
  {
    "text": "PROFESSOR: Perfect. CN over 4.",
    "start": "402978",
    "end": "408850"
  },
  {
    "text": "My nodes are really ugly. I should have drawn them\nlike this from the beginning. CN over 4.",
    "start": "408850",
    "end": "414270"
  },
  {
    "text": "There you go. How about down here? AUDIENCE: C of N\nover 2 to the i.",
    "start": "414270",
    "end": "421142"
  },
  {
    "text": "PROFESSOR: You're\ngoing on step ahead. We'll do that right next. AUDIENCE: C of N\nover log N, right?",
    "start": "421142",
    "end": "428539"
  },
  {
    "text": "Because they're\nlog N levels, so-- PROFESSOR: Let's not worry\nabout the number of levels.",
    "start": "428540",
    "end": "434140"
  },
  {
    "text": "You're ruining my steps. I was going to get to\nthat two steps after this. AUDIENCE: Is it just C?",
    "start": "434140",
    "end": "439564"
  },
  {
    "text": "PROFESSOR: Yep. So array size is 1, right? So the cost is C. C, C,\nC, C. OK, you guys got it",
    "start": "439564",
    "end": "448139"
  },
  {
    "text": "if you're thinking\nof levels already. The next thing I\nwant to do is I want to figure out how many\nlevels I have in this tree.",
    "start": "448140",
    "end": "454740"
  },
  {
    "start": "450000",
    "end": "720000"
  },
  {
    "text": "Why do I care about that? The answer for T of N is the\nsum of all these costs in here",
    "start": "454740",
    "end": "460900"
  },
  {
    "text": "because the cost of merge\nsorting an array of size N is the merge sort plus the costs\nfor sorting the two arrays.",
    "start": "460900",
    "end": "469940"
  },
  {
    "text": "And the nodes here keep\ntrack of all the time spent in recursive sub-calls, so if\nwe can add up everything up,",
    "start": "469940",
    "end": "476840"
  },
  {
    "text": "we have the answer to T of\nN. It turns out the easiest",
    "start": "476840",
    "end": "481880"
  },
  {
    "text": "way to do that is to sum\nup the cost at each level because the costs are\nthis guy copied over here.",
    "start": "481880",
    "end": "490875"
  },
  {
    "text": "For a level, they\ntend to be the same, so it's reasonably\neasy to add them up,",
    "start": "490875",
    "end": "497360"
  },
  {
    "text": "except in order to be\nable to add those up, you have to know how\nmany levels you have.",
    "start": "497360",
    "end": "502979"
  },
  {
    "text": "So how do I know how\nmany levels I have? Someone already told me log\nN. How do I get to that log N?",
    "start": "502980",
    "end": "510470"
  },
  {
    "start": "510470",
    "end": "515979"
  },
  {
    "text": "So when I get to the\nbottommost level, the number has to be 1, the\nnumber next to the node,",
    "start": "515980",
    "end": "523460"
  },
  {
    "text": "because that's my base case. When I have a one element\narray, it's sorted, I'm done. I return.",
    "start": "523460",
    "end": "529649"
  },
  {
    "text": "So I can say that\nfor each level, the number next to the node is\nsomething as a function of L.",
    "start": "529650",
    "end": "538150"
  },
  {
    "text": "Here, I'm going to\nsay that this is N over 1, which is N\nover 2 to the 0 power.",
    "start": "538150",
    "end": "546850"
  },
  {
    "text": "And this is N over 2, so it's\nN over 2 to the first power. This is N over 2 to the\nsecond, and so on and so forth.",
    "start": "546850",
    "end": "556279"
  },
  {
    "text": "It might not be obvious if\nyou only have two levels. I don't want to draw\na lot on the board because I don't have a lot\nof space and I'd get my nodes",
    "start": "556280",
    "end": "563180"
  },
  {
    "text": "all messed into each other. If it takes more than two levels\nto see the pattern, go for it.",
    "start": "563180",
    "end": "568690"
  },
  {
    "text": "Expand for three levels,\nfour levels, five levels, whatever it takes to get it\nright on a Pset or on a test.",
    "start": "568690",
    "end": "575070"
  },
  {
    "text": "So you see the pattern,\nthen you write the formula for the node size at the level.",
    "start": "575070",
    "end": "582140"
  },
  {
    "text": "And assuming this\npattern holds, we see that the size of a\nnode at level l, the size",
    "start": "582140",
    "end": "590270"
  },
  {
    "text": "is 2 N over 2 to the l minus 1.",
    "start": "590270",
    "end": "596880"
  },
  {
    "text": "Fair enough? You can say N over 2\nto the l, and forget that there's a minus 1, and then\nthe asymptotics will save you,",
    "start": "596880",
    "end": "604730"
  },
  {
    "text": "so it's no big deal, but\nthis is the real number. So that means that at the\nbottommost level, at level l,",
    "start": "604730",
    "end": "616310"
  },
  {
    "text": "this size is going to be 1. N over 2 to the l\nminus 1 equals 1.",
    "start": "616310",
    "end": "624110"
  },
  {
    "text": "So now this is an equation,\nso I can solve for l. I pull this on the right side,\nN equals 2 to the l minus 1,",
    "start": "624110",
    "end": "631630"
  },
  {
    "text": "so l minus 1 equals-- anyone?",
    "start": "631630",
    "end": "637771"
  },
  {
    "text": "The inverse of an exponential?  AUDIENCE: I wasn't\npaying attention.",
    "start": "637771",
    "end": "643220"
  },
  {
    "text": "Sorry. AUDIENCE: Log N.",
    "start": "643220",
    "end": "650837"
  },
  {
    "text": "PROFESSOR: The inverse of an\nexponential is a logarithm. Keep that in mind for\nsolving 6.006 problems.",
    "start": "650837",
    "end": "658470"
  },
  {
    "text": "l minus 1 is log N so l is\nlog n plus 1, roughly log n.",
    "start": "658470",
    "end": "666288"
  },
  {
    "text": "I could use log n plus 1\nand go through the math. It's a bit more painful\nand, because we're using asymptotics, it\ndoesn't really matter.",
    "start": "666289",
    "end": "673940"
  },
  {
    "text": "So now we know how\nmany levels we have. Let's see what's the\ncost at the level. So all the calls\nat a certain level,",
    "start": "673940",
    "end": "679740"
  },
  {
    "text": "what's the sum of the costs? For this level, what's the cost?",
    "start": "679740",
    "end": "685400"
  },
  {
    "text": " CN. And That was the easy question.",
    "start": "685400",
    "end": "692310"
  },
  {
    "text": "Just the root, right? How about this level? ",
    "start": "692310",
    "end": "698770"
  },
  {
    "text": "Because I have two nodes, the\ncost in each node is CN over 2. How about this level?",
    "start": "698770",
    "end": "704060"
  },
  {
    "start": "704060",
    "end": "709800"
  },
  {
    "text": "Four levels, each\nlevel CN over 4. How about the bottom level? ",
    "start": "709800",
    "end": "718752"
  },
  {
    "text": "AUDIENCE: CN. PROFESSOR: Why is it CN?",
    "start": "718752",
    "end": "724486"
  },
  {
    "start": "720000",
    "end": "850000"
  },
  {
    "text": "AUDIENCE: Because there\nare N arrays of size 1. PROFESSOR: N arrays of size 1.",
    "start": "724486",
    "end": "729710"
  },
  {
    "text": "Excellent. A cute argument I heard once\nis you start out with N, you split it into N\nover 2 and N over 2.",
    "start": "729710",
    "end": "736910"
  },
  {
    "text": "Then you split this guy\nin N over 4, N over 4, so this is like\nconservation of mass.",
    "start": "736910",
    "end": "741980"
  },
  {
    "text": "If you start with N and here,\nyou don't end up with N total, then you lost some element\nsomewhere on the way.",
    "start": "741980",
    "end": "750210"
  },
  {
    "text": "So CN. CN, CN, CN, CN. I think I see a pattern. I think it's reasonable to say\nthat for every level, it's CN.",
    "start": "750210",
    "end": "758540"
  },
  {
    "text": "And if you write the\nproof, you can prove that by using math instead\nof waving hands.",
    "start": "758540",
    "end": "764300"
  },
  {
    "text": "So CN times the number\nof levels, right? The answer for this guy\nis C of N is CN times l.",
    "start": "764300",
    "end": "776040"
  },
  {
    "text": "What's l? AUDIENCE: N log N. PROFESSOR: Roughly. OK So order of N\nlog N. C becomes",
    "start": "776040",
    "end": "790240"
  },
  {
    "text": "order of, l is order of\nlog N, N stays the same. ",
    "start": "790240",
    "end": "798320"
  },
  {
    "text": "Any questions? ",
    "start": "798320",
    "end": "804100"
  },
  {
    "text": "Are people getting it or\ndid I confuse you even more? AUDIENCE: We got it. PROFESSOR: OK, sweet.",
    "start": "804100",
    "end": "809897"
  },
  {
    "text": "Thank you for the encouragement. So this gets you through\nproblem one of Pset 2.",
    "start": "809897",
    "end": "816199"
  },
  {
    "text": "So in this case, the\ntree is nicely balanced. The cost at each\nlevel is the same. When [INAUDIBLE] talked about\nrecursion trees in lectures,",
    "start": "816200",
    "end": "822700"
  },
  {
    "text": "he showed two more\ntrees, one where pretty much all the cost was up\nhere-- the cost of the children",
    "start": "822700",
    "end": "829350"
  },
  {
    "text": "was negligible-- and one\ntree where all the cost was concentrated here, so the\ncost of all the inner nodes",
    "start": "829350",
    "end": "837240"
  },
  {
    "text": "was negligible and the leaves\nwere doing all the real work. So don't be scared if your\ncosts aren't the same.",
    "start": "837240",
    "end": "843803"
  },
  {
    "text": "Just sum them up and you'll\nget to the right answer. ",
    "start": "843804",
    "end": "851470"
  },
  {
    "start": "850000",
    "end": "1050000"
  },
  {
    "text": "Now I'm going to talk\nabout binary search trees, except I will make a five\nminute general talk about data",
    "start": "851470",
    "end": "858920"
  },
  {
    "text": "structures before I do that. So we use the term\n\"data structures.\" I think we covered\nit well, and I",
    "start": "858920",
    "end": "864296"
  },
  {
    "text": "want to give you\na couple of tips for dealing with them on Pset 1. A data structure is\na bunch of algorithms",
    "start": "864296",
    "end": "871390"
  },
  {
    "text": "that help you store and\nthen retrieve information. You have two types\nof algorithms.",
    "start": "871390",
    "end": "876960"
  },
  {
    "text": "You have queries,\nand you have updates.",
    "start": "876960",
    "end": "884795"
  },
  {
    "start": "884795",
    "end": "889850"
  },
  {
    "text": "You start out with an\nempty data structure, like an empty binary search\ntree or an empty list,",
    "start": "889850",
    "end": "895870"
  },
  {
    "text": "and then you throw\nsome data at it. That's when you update it. Then you ask it some questions,\nand that's when you query it.",
    "start": "895870",
    "end": "903129"
  },
  {
    "text": "Then maybe you throw more data\nat it, so you do more updates, and you ask more questions,\nso you do more queries. ",
    "start": "903129",
    "end": "910190"
  },
  {
    "text": "What are the queries\nand the updates for the binary search trees\nthat we talked about in lecture?",
    "start": "910190",
    "end": "915200"
  },
  {
    "text": " AUDIENCE: A query\nwould be like, what's",
    "start": "915200",
    "end": "921139"
  },
  {
    "text": "your right child,\nwhat's your left child? PROFESSOR: So that's for a node. ",
    "start": "921140",
    "end": "928502"
  },
  {
    "text": "AUDIENCE: What are\nyou looking for? PROFESSOR: I'm\nlooking for something for the entire infrastructure. So for the entire\ntree, what's a question",
    "start": "928502",
    "end": "934520"
  },
  {
    "text": "that you would ask the tree? PROFESSOR: Max. PROFESSOR: OK. ",
    "start": "934520",
    "end": "946750"
  },
  {
    "text": "Min.  AUDIENCE: Next larger.",
    "start": "946750",
    "end": "951830"
  },
  {
    "text": "PROFESSOR: Next larger. Are you looking at the nodes? ",
    "start": "951830",
    "end": "958640"
  },
  {
    "text": "AUDIENCE: Is there an are\nyou balanced question? PROFESSOR: Well, I would say\nthat the most popular operation",
    "start": "958640",
    "end": "965665"
  },
  {
    "text": "in a binary search\ntree is Search, which looks for-- we call\nit Find in the code",
    "start": "965665",
    "end": "972560"
  },
  {
    "text": "because most code\nimplementations call it Find nowadays, but\nbinary search tree.",
    "start": "972560",
    "end": "978359"
  },
  {
    "text": "What are you going to do in it? You search for a value. That's why it has the\nSearch in binary search.",
    "start": "978359",
    "end": "983920"
  },
  {
    "text": "So queries are operations where\nyou ask questions to the data structure and it doesn't change.",
    "start": "983920",
    "end": "991540"
  },
  {
    "text": "How about updates? What did we learn for updates? ",
    "start": "991540",
    "end": "996712"
  },
  {
    "text": "AUDIENCE: Insert. PROFESSOR: Excellent. So Insert was\ncovered in lecture, and we're doing Delete today.",
    "start": "996712",
    "end": "1004400"
  },
  {
    "start": "1004400",
    "end": "1009740"
  },
  {
    "text": "So data structures\nhave this property that's called the\nrepresentation invariant, RI,",
    "start": "1009740",
    "end": "1016460"
  },
  {
    "text": "or Rep Invariant. ",
    "start": "1016460",
    "end": "1025819"
  },
  {
    "text": "Actually, before I get\nthere, the rep invariant says that the data in\nthe data structures",
    "start": "1025819",
    "end": "1032640"
  },
  {
    "text": "is organized in this\nway, and as long as it's organized in this way,\nthe data structure functions correctly.",
    "start": "1032640",
    "end": "1038490"
  },
  {
    "text": "Can someone guess\nfor a sorted array what's the\nrepresentation invariant?",
    "start": "1038490",
    "end": "1044829"
  },
  {
    "text": "AUDIENCE: It can mean sorted. PROFESSOR: Yeah. A sorted array should be sorted. Sounds like a very\ngood rep invariant.",
    "start": "1044829",
    "end": "1051690"
  },
  {
    "start": "1050000",
    "end": "1260000"
  },
  {
    "text": "So the elements should\nbe stored an array. Every element should be smaller\nthan any element after it.",
    "start": "1051690",
    "end": "1058340"
  },
  {
    "text": "And as long as the rep\ninvariant holds, so as long as elements are stored in\nthe right way in the data",
    "start": "1058340",
    "end": "1064770"
  },
  {
    "text": "structure, the queries will\nreturn the right results. If the rep invariant\ndoesn't hold,",
    "start": "1064770",
    "end": "1070360"
  },
  {
    "text": "then God knows what's\ngoing to happen. What can you do\nin a storage array as long as the rep\ninvariant holds?",
    "start": "1070360",
    "end": "1076800"
  },
  {
    "text": " Sorted array.",
    "start": "1076800",
    "end": "1081927"
  },
  {
    "text": "What's the reason why I\nwould have a sorted array? What can I do that's\nfast in a sorted array? AUDIENCE: Min and Max.",
    "start": "1081927",
    "end": "1088660"
  },
  {
    "text": "PROFESSOR: I can\ndo that very fast. That's good. What's the running time? AUDIENCE: A constant. PROFESSOR: Perfect.",
    "start": "1088660",
    "end": "1094219"
  },
  {
    "text": "Min you look at the beginning,\nMax you look at the end. Yes? AUDIENCE: Binary search. PROFESSOR: Binary search.",
    "start": "1094219",
    "end": "1099251"
  },
  {
    "text": "That's the other\nreason for that. So binary search\nruns in order log N time, doesn't have to\nlook at most of the array,",
    "start": "1099251",
    "end": "1106690"
  },
  {
    "text": "tells you whether an\nelement is there are not. Now, what if the\narray is unsorted? Will the algorithm work?",
    "start": "1106690",
    "end": "1113840"
  },
  {
    "text": "It might say\nsomething isn't there when it actually is there. You can do binary search\non a non-sorted array. So if the rep\ninvariant doesn't hold,",
    "start": "1113840",
    "end": "1120440"
  },
  {
    "text": "your queries might give\nyou a wrong answer.  How about updates?",
    "start": "1120440",
    "end": "1126460"
  },
  {
    "text": "How do you search\nsomething in a sorted list? ",
    "start": "1126460",
    "end": "1133223"
  },
  {
    "text": "AUDIENCE: You find\nwhere it should go and you move everything. PROFESSOR: Yep. So you have to move\neverything, make room for it,",
    "start": "1133223",
    "end": "1139110"
  },
  {
    "text": "and put it there so\nthat the array is still sorted at the end. You can't just append\nthings at the end,",
    "start": "1139110",
    "end": "1144570"
  },
  {
    "text": "even though that would be\nfaster and lazier and less code.",
    "start": "1144570",
    "end": "1150610"
  },
  {
    "text": "When you do an update\nto a data structure, you have to make sure that\nthe rep invariant still holds at the end.",
    "start": "1150610",
    "end": "1156300"
  },
  {
    "text": "Sort of a correctness proof\nfor an update algorithm says that if the rep invariant\nholds at the beginning,",
    "start": "1156300",
    "end": "1161580"
  },
  {
    "text": "the rep invariant is\nguaranteed to hold at the end. Why do we care about\nthis rep invariant stuff?",
    "start": "1161580",
    "end": "1167640"
  },
  {
    "text": "Suppose you have a problem,\nsay on the next Pset, that",
    "start": "1167640",
    "end": "1172700"
  },
  {
    "text": "asks you to find the place\nthat's slow in your code and then speed it up.",
    "start": "1172700",
    "end": "1179490"
  },
  {
    "text": "And suppose you recognize\nthe data structure there, and you say that's\ninefficient, and you want to implement another\ndata structure that",
    "start": "1179490",
    "end": "1186429"
  },
  {
    "text": "would be more efficient. You're going to implement it.",
    "start": "1186430",
    "end": "1192000"
  },
  {
    "text": "You might have\nbugs in an update. How do you find the bugs? Queries give you\nthe wrong answers.",
    "start": "1192000",
    "end": "1198570"
  },
  {
    "text": "You might do queries a long\ntime after you do updates, and you're not going to\nknow which update failed.",
    "start": "1198570",
    "end": "1204624"
  },
  {
    "text": "The right way to do this\nis you implement the method called Check RI-- that's\nwhat I call it-- so",
    "start": "1204624",
    "end": "1210250"
  },
  {
    "text": "check the representation\ninvariant. And that method walks through\nthe entire data structure and make sure that the\nrep invariant holds,",
    "start": "1210250",
    "end": "1216960"
  },
  {
    "text": "and if it doesn't, it\nraises an exception because you know that whatever\nyou try to do from there is not going to work, so\nthere's no reason to keep going.",
    "start": "1216960",
    "end": "1225580"
  },
  {
    "text": "So at the end of every\nupdate, you add a call to this Check RI\nmethod until you're",
    "start": "1225580",
    "end": "1232049"
  },
  {
    "text": "sure that your code is correct. And after you're done\ndebugging your code, you remove this method\nand you submit the code.",
    "start": "1232050",
    "end": "1240180"
  },
  {
    "text": "Why do I want to\nremove the method? It might be painfully slow\nand inefficient, much slower",
    "start": "1240180",
    "end": "1245290"
  },
  {
    "text": "than the actual\nqueries and updates. For example, let's take a heap. Do people remember\nheaps from lecture?",
    "start": "1245290",
    "end": "1252610"
  },
  {
    "text": "What's the query for a heap? Say you have a max heap. What's a query?",
    "start": "1252610",
    "end": "1258567"
  },
  {
    "text": "AUDIENCE: Where's the max? PROFESSOR: OK, cool. So for a max heap, a\nquery would be max.",
    "start": "1258567",
    "end": "1263570"
  },
  {
    "start": "1260000",
    "end": "1345000"
  },
  {
    "text": "Running time?  AUDIENCE: Constant. PROFESSOR: Perfect.",
    "start": "1263570",
    "end": "1269248"
  },
  {
    "text": "Constant. What do you do? Look at the top?",
    "start": "1269248",
    "end": "1275122"
  },
  {
    "text": "AUDIENCE: Yeah, exactly. PROFESSOR: OK. Sweet. So what are the two popular\nupdates in a max heap?",
    "start": "1275122",
    "end": "1283430"
  },
  {
    "text": "AUDIENCE: There would\nbe Insert as well. PROFESSOR: OK.",
    "start": "1283430",
    "end": "1288480"
  },
  {
    "text": "Insert. And did we teach\nyou general delete? ",
    "start": "1288480",
    "end": "1299310"
  },
  {
    "text": "Usually Extract Max is simpler.",
    "start": "1299310",
    "end": "1304817"
  },
  {
    "text": "That's all you need. ",
    "start": "1304817",
    "end": "1311570"
  },
  {
    "text": "What's the running\ntime for Insert? ",
    "start": "1311570",
    "end": "1316830"
  },
  {
    "text": "Do people remember heaps? AUDIENCE: I think it was per\nN, but I'm not completely sure.",
    "start": "1316830",
    "end": "1323190"
  },
  {
    "text": "PROFESSOR: Anyone else? It's not. Life would be bad\nif it would be N. AUDIENCE: N squared?",
    "start": "1323190",
    "end": "1329217"
  },
  {
    "text": "PROFESSOR: No.  It's better than N, so you\nguys are doing a binary search",
    "start": "1329217",
    "end": "1336210"
  },
  {
    "text": "over the few running times\nthat I gave you earlier. AUDIENCE: [INAUDIBLE]\nadd to the N, and then you compare your\nneighbor, and then you",
    "start": "1336210",
    "end": "1342498"
  },
  {
    "text": "[INAUDIBLE]. AUDIENCE: If it's an\narray, there isn't-- PROFESSOR: So conceptually,\na heap looks like this.",
    "start": "1342498",
    "end": "1349272"
  },
  {
    "text": "And yeah, it becomes\nan array eventually, but let's look at it this way. ",
    "start": "1349272",
    "end": "1356500"
  },
  {
    "text": "It is a full binary tree. Binary tree means that each\nnode has at most two children, and full means that every\nlevel except for the last level",
    "start": "1356500",
    "end": "1364160"
  },
  {
    "text": "is completely populated. So every internal node\nhas exactly two children, and in here, every node\nexcept for some nodes",
    "start": "1364160",
    "end": "1373050"
  },
  {
    "text": "and then some nodes\nafter it will not have. Everything to the left\nis fully populated,",
    "start": "1373050",
    "end": "1379090"
  },
  {
    "text": "and then at some point,\nyou stop having children. It turns out that this is\neasy to store in an array,",
    "start": "1379090",
    "end": "1385150"
  },
  {
    "text": "but I will not go over that. Instead, I want to\ngo over inserting. What's the rep\ninvariant for a heap?",
    "start": "1385150",
    "end": "1393980"
  },
  {
    "text": "AUDIENCE: The max\nin the top, right? Well, for max heap, and\nthen the two children are less than the next node.",
    "start": "1393980",
    "end": "1400456"
  },
  {
    "text": "PROFESSOR: All right. So the guy here has to be\nbigger than these guys, then the guy here has to\nbe bigger than these guys,",
    "start": "1400456",
    "end": "1405640"
  },
  {
    "text": "and so on and so forth. And if you use\ninduction, you can prove that if this\nis bigger than this,",
    "start": "1405640",
    "end": "1412212"
  },
  {
    "text": "it has to be bigger than\nthese guys, and bigger than these guys, and bigger\nthan everything, and it's a max. That's the reason why we\nhave that rep invariant.",
    "start": "1412212",
    "end": "1420059"
  },
  {
    "text": "So the way we insert\na node is we add it at the bottom, the only\nplace where we could add it.",
    "start": "1420060",
    "end": "1425280"
  },
  {
    "text": "And then if this guy is\nbigger than this guy, the rep invariant is\nviolated, so we swap them",
    "start": "1425280",
    "end": "1431110"
  },
  {
    "text": "in order to fix that. Now the guy is here. If this is bigger than\nthis, we do another swap.",
    "start": "1431110",
    "end": "1436890"
  },
  {
    "text": "If this is bigger than\nthis, we do another swap. So you're going to go from the\nbottom of the heap potentially",
    "start": "1436890",
    "end": "1443990"
  },
  {
    "text": "all the way up to the root. So the running time\nof insert is order of the height of the heap.",
    "start": "1443990",
    "end": "1450700"
  },
  {
    "text": " Now, the heap is a\nfull binary tree.",
    "start": "1450700",
    "end": "1456809"
  },
  {
    "text": "I said \"full.\" I keep saying \"full.\" The reason I care about full\nis that the full binary tree is guaranteed to have a\nheight of log N. It's always",
    "start": "1456810",
    "end": "1464767"
  },
  {
    "text": "log N, where N is\nthe number of nodes. ",
    "start": "1464767",
    "end": "1470120"
  },
  {
    "text": "So inserting in a\nheap takes log N.",
    "start": "1470120",
    "end": "1475303"
  },
  {
    "text": "AUDIENCE: I have a question. Didn't they say that\nbecause it's in an array, then to find it-- oh no, I\nguess because you can still",
    "start": "1475303",
    "end": "1484230"
  },
  {
    "text": "do the swaps. PROFESSOR: You can\nstill do the swaps when you have it\nserialized in an array. You know that given\nan item's index,",
    "start": "1484230",
    "end": "1490450"
  },
  {
    "text": "the parent is that\nindex divided by 2. So you add an element\nat the end of the array,",
    "start": "1490450",
    "end": "1495810"
  },
  {
    "text": "and then you know\nwhat the parent is, and then you keep swapping\nand swapping and swapping towards the [INAUDIBLE]. AUDIENCE: You don't\never have to put it in",
    "start": "1495810",
    "end": "1501299"
  },
  {
    "text": "and shift everything over. You're only swapping. PROFESSOR: Yep. You only swap. That's important. Thanks for asking.",
    "start": "1501300",
    "end": "1506880"
  },
  {
    "text": "That's important. So log N. Extract max,\ntake my word for it, also log N. What's the\nrunning time for checking",
    "start": "1506880",
    "end": "1516380"
  },
  {
    "text": "the invariant in a heap? So to make sure that this guy is\na heap, if I had numbers here,",
    "start": "1516380",
    "end": "1522590"
  },
  {
    "text": "what would you have to do? ",
    "start": "1522590",
    "end": "1529280"
  },
  {
    "text": "AUDIENCE: You'd have\nto look at every node. PROFESSOR: Yep. So running time?",
    "start": "1529280",
    "end": "1534304"
  },
  {
    "text": "AUDIENCE: Theta of N. PROFESSOR: Yep. ",
    "start": "1534304",
    "end": "1540820"
  },
  {
    "text": "So if I'm going to\nsubmit code for a heap where the operations\nare our order of log N,",
    "start": "1540820",
    "end": "1546410"
  },
  {
    "text": "or order 1, but then each\nof these calls Check RI, that's going to be\npainfully slow because I'm",
    "start": "1546410",
    "end": "1552640"
  },
  {
    "text": "making the updates be\norder N instead of log N. So you're putting Check\nRI calls in every update.",
    "start": "1552640",
    "end": "1559160"
  },
  {
    "text": "You debug your code. When you make sure it's\ncorrect, you remove those, and then you submit the Pset.",
    "start": "1559160",
    "end": "1565809"
  },
  {
    "text": "Make sense? Sweet. And we looked a little bit\nat heaps, which is good.",
    "start": "1565810",
    "end": "1572070"
  },
  {
    "text": " Binary search trees.",
    "start": "1572070",
    "end": "1578320"
  },
  {
    "start": "1575000",
    "end": "1615000"
  },
  {
    "text": "So a binary tree is a\ntree where every node has at most two children.",
    "start": "1578320",
    "end": "1583830"
  },
  {
    "text": "When we code this up, we\nrepresent a node as a Python object, and for a node, we\nkeep track of the left child,",
    "start": "1583830",
    "end": "1594809"
  },
  {
    "text": "of the right child, parent,\nand then this is a hollow tree.",
    "start": "1594810",
    "end": "1601880"
  },
  {
    "text": "It's not very useful. This becomes useful when you\nstart putting keys in the nodes so that you can find them and\ndo other things with them.",
    "start": "1601880",
    "end": "1609690"
  },
  {
    "text": "So each node has a key.  Let me draw a\nbinary search tree.",
    "start": "1609690",
    "end": "1615390"
  },
  {
    "start": "1615000",
    "end": "2165000"
  },
  {
    "start": "1615390",
    "end": "1631275"
  },
  {
    "text": "Can people see this? So this is a binary tree. Can someone say something a\nbit more specific about it?",
    "start": "1631275",
    "end": "1638360"
  },
  {
    "text": " AUDIENCE: It's unbalanced.",
    "start": "1638360",
    "end": "1644400"
  },
  {
    "text": "PROFESSOR: OK. It's imbalanced.  So that means that\nfinding things all the way",
    "start": "1644400",
    "end": "1651260"
  },
  {
    "text": "at the bottom is\ngoing to be expensive. What else? ",
    "start": "1651260",
    "end": "1657520"
  },
  {
    "text": "So I said it's a binary tree. Give me something more specific. ",
    "start": "1657520",
    "end": "1665830"
  },
  {
    "text": "So binary tree just means that\nevery node has two children. There's a bit more\nstructure in this guy.",
    "start": "1665830",
    "end": "1672470"
  },
  {
    "text": "So if I look at the\nroot, if I look at 23, all the nodes to the\nleft are smaller.",
    "start": "1672470",
    "end": "1678740"
  },
  {
    "text": "All the nodes to the\nright are bigger. Now, if I look at 8, all the\nnodes to the left are smaller,",
    "start": "1678740",
    "end": "1684320"
  },
  {
    "text": "all the nodes to the\nright are greater. ",
    "start": "1684320",
    "end": "1690309"
  },
  {
    "text": "This additional rep invariant\ndefines a binary search tree.",
    "start": "1690310",
    "end": "1695750"
  },
  {
    "text": "This is what we\ntalked about in class. BST.",
    "start": "1695750",
    "end": "1702320"
  },
  {
    "text": "Why would I want to\nhave this rep invariant? It sounds like a pain\nto maintain nodes",
    "start": "1702320",
    "end": "1707539"
  },
  {
    "text": "with all these\nordering constraints. What's the advantage\nof doing that?",
    "start": "1707540",
    "end": "1712710"
  },
  {
    "text": "AUDIENCE: Search is fast. PROFESSOR: Yep. Search is fast. How do I do search?",
    "start": "1712710",
    "end": "1717960"
  },
  {
    "text": "If you're looking\nfor 42 or for 16, you'd be like, oh,\nit's less than 23.",
    "start": "1717960",
    "end": "1723440"
  },
  {
    "text": "I'll get on this path. PROFESSOR: So start at the root,\ncompare my key to the root.",
    "start": "1723440",
    "end": "1728880"
  },
  {
    "text": "If it's smaller, go left. If it's bigger, go right. Then keep doing that\nuntil I arrive somewhere or until I arrive at a dead\nend if I'm looking for 14.",
    "start": "1728880",
    "end": "1737590"
  },
  {
    "text": "This is a lot like\nbinary search. Binary search in an array,\nyou look at the middle. If your key is smaller, go left.",
    "start": "1737590",
    "end": "1743758"
  },
  {
    "text": "If your key is\nbigger, then go right. ",
    "start": "1743759",
    "end": "1749680"
  },
  {
    "text": "Let's look at the\ncode for a little bit. Look at the BST Node\nClass, and you'll",
    "start": "1749680",
    "end": "1756490"
  },
  {
    "text": "see that it has the fields\nthat we have up here. And look at the Find method,\nand this is pretty much the binary search code.",
    "start": "1756490",
    "end": "1763020"
  },
  {
    "text": "Lines 8 and 9 have the return\ncondition when you're happy and you found the key,\nand then line 10 compares",
    "start": "1763020",
    "end": "1771187"
  },
  {
    "text": "the key that you're looking\nfor with the key in the node that you're at, and then lines\n11, 14, 16, and 19 are pretty",
    "start": "1771187",
    "end": "1778010"
  },
  {
    "text": "much copy pasted,\nexcept one of them deals with the left\ncase, the other one deals with the right case.",
    "start": "1778010",
    "end": "1784910"
  },
  {
    "text": "What is the running\ntime for Find? ",
    "start": "1784910",
    "end": "1797890"
  },
  {
    "text": "AUDIENCE: Wouldn't\nit be log N, right? PROFESSOR: I wish.",
    "start": "1797890",
    "end": "1803440"
  },
  {
    "text": "If this is all you have\nto do to get log N, then I would have to\nwrite a lot less code. ",
    "start": "1803440",
    "end": "1811059"
  },
  {
    "text": "So not quite log N. We will\nhave to go through next lecture to get to log N. Until then,\nwhat's the running time?",
    "start": "1811060",
    "end": "1820020"
  },
  {
    "text": "AUDIENCE: Order h. PROFESSOR: Yep.  So you told me at the\nbeginning it's unbalanced.",
    "start": "1820020",
    "end": "1826030"
  },
  {
    "text": "AUDIENCE: Yeah. PROFESSOR: So then it's\nnot going to be fast. ",
    "start": "1826030",
    "end": "1832800"
  },
  {
    "text": "OK, so order h. The reason why we care\nabout h, and the reason we don't say order\nN, is because next",
    "start": "1832800",
    "end": "1839980"
  },
  {
    "text": "lecture after we learn\nhow to balance a tree, there's some magic that you can\ndo to these binary search trees",
    "start": "1839980",
    "end": "1845040"
  },
  {
    "text": "to guarantee that the\nheight is order of log N. And then we'll go through all\nthe running times that we have",
    "start": "1845040",
    "end": "1850220"
  },
  {
    "text": "and replace h with log N. Now, it happens that in this\ncase, if you would have told me order N, I couldn't argue\nwith you because worst case,",
    "start": "1850220",
    "end": "1859260"
  },
  {
    "text": "searches are order N. Can\nsomeone give me a binary search tree that exposes\nthis degenerate case?",
    "start": "1859260",
    "end": "1867071"
  },
  {
    "text": "Yes? AUDIENCE: If it's\ncompletely unbalanced and every node is greater\nthan the parent nodes.",
    "start": "1867071",
    "end": "1873149"
  },
  {
    "text": "PROFESSOR: So give me some\ninserts that create it. AUDIENCE: Insert 5.",
    "start": "1873150",
    "end": "1878820"
  },
  {
    "text": "PROFESSOR: 5. AUDIENCE: Insert 10. PROFESSOR: 10. AUDIENCE: Insert 15.",
    "start": "1878820",
    "end": "1884520"
  },
  {
    "text": "PROFESSOR: 15. AUDIENCE: Insert 20. PROFESSOR: Yep. And I could keep going. I could say, 1, 2, 3, 4, 5.",
    "start": "1884520",
    "end": "1890539"
  },
  {
    "text": "I could say 5, 10, 15. As long as these keep\ngrowing, this is basically going to be a list,\nso searching is",
    "start": "1890540",
    "end": "1897290"
  },
  {
    "text": "order N. This is\na degenerate case. Turns out it doesn't happen\ntoo often in practice.",
    "start": "1897290",
    "end": "1903600"
  },
  {
    "text": "If you have random data, the\nheight will be roughly log N. But in order to avoid\nthose degenerate cases,",
    "start": "1903600",
    "end": "1909529"
  },
  {
    "text": "we'll be doing balanced\ntrees later on. So we covered Find.",
    "start": "1909530",
    "end": "1915680"
  },
  {
    "text": "We know it's order h. How do you insert,\nreally quickly? ",
    "start": "1915680",
    "end": "1929104"
  },
  {
    "text": "AUDIENCE: Do you\nmean in searching when it's balanced\nor unbalanced? PROFESSOR: This guy.",
    "start": "1929104",
    "end": "1934520"
  },
  {
    "text": "So the trees look\nexactly the same. If it's balanced, it's\ngoing to look more like that than like this.",
    "start": "1934520",
    "end": "1940380"
  },
  {
    "text": "Actually, this is balanced. This is perfectly unbalanced. This is somewhere in the middle. If it's balanced, it's just\ngoing to look more like this,",
    "start": "1940380",
    "end": "1947500"
  },
  {
    "text": "but it's still a\nbinary search tree. How would you insert a node?",
    "start": "1947500",
    "end": "1953481"
  },
  {
    "text": "Yes? AUDIENCE: Can't you\nstart at the root and find your way down, and\nthen the first open child that you see that's applicable\nto your element, state it then?",
    "start": "1953481",
    "end": "1963686"
  },
  {
    "text": "PROFESSOR: Yep. So if I wanted to insert\n14, which way do I go?",
    "start": "1963686",
    "end": "1969406"
  },
  {
    "text": "AUDIENCE: So you'd look\nat 23, and you'd say, it's less than 23, go left. You'd look at 8.",
    "start": "1969406",
    "end": "1974669"
  },
  {
    "text": "You'd say, it's greater than 8. You'd go right. Look at 16. You'd say it's less,\nso you go left.",
    "start": "1974670",
    "end": "1980004"
  },
  {
    "text": "15, it's less. Then you have an open spot\nso you stick it there. PROFESSOR: Excellent. Thank you.",
    "start": "1980005",
    "end": "1986929"
  },
  {
    "text": "Yes? AUDIENCE: I have a question. What if we want to insert 5? Then--",
    "start": "1986930",
    "end": "1992359"
  },
  {
    "text": "PROFESSOR: So if you\nwant to insert who? AUDIENCE: 5. Or actually no, we can't.",
    "start": "1992359",
    "end": "1997590"
  },
  {
    "text": "I'm thinking, is there any case\nin which need to move a node? PROFESSOR: How\nwould you insert 5?",
    "start": "1997590",
    "end": "2003600"
  },
  {
    "text": "Let's see. What would you do for 5? AUDIENCE: For 5, then we'd\ninsert it to the right of 4,",
    "start": "2003600",
    "end": "2009408"
  },
  {
    "text": "right? PROFESSOR: Smaller,\nsmaller, greater, 5. Right? ",
    "start": "2009408",
    "end": "2016410"
  },
  {
    "text": "AUDIENCE: So there would\nbe no case in which we'd need to swap nodes or something? PROFESSOR: No.",
    "start": "2016410",
    "end": "2022084"
  },
  {
    "text": "You're thinking ahead. We'll talk about that a little\nlater when we get to deleting. As long as you follow a path in\nthe tree, the path that finding",
    "start": "2022084",
    "end": "2031720"
  },
  {
    "text": "would get you to, as soon\nas you hit a dead end, that's where your node belongs. Because you know next time\nyou're going to search for it,",
    "start": "2031720",
    "end": "2038420"
  },
  {
    "text": "the search is going to follow\nthat path and find the node. Yes? AUDIENCE: If you have values\nare the same, like two",
    "start": "2038420",
    "end": "2044924"
  },
  {
    "text": "nodes at the same\nnumber, does it matter which side you put it on? PROFESSOR: You don't.",
    "start": "2044924",
    "end": "2050991"
  },
  {
    "text": "AUDIENCE: Oh, I see. It's more like you would only\nhave four 1's in the tree. PROFESSOR: Yes.",
    "start": "2050991",
    "end": "2056440"
  },
  {
    "text": "So if you're trying to\nstore keys and values, then what you'd\nhave to do if you want to allow multiple\nvalues for the same key",
    "start": "2056440",
    "end": "2061945"
  },
  {
    "text": "is you have a linked\nlist going off of this, which node\nbecomes an array of values aside from the key.",
    "start": "2061945",
    "end": "2068304"
  },
  {
    "text": "Smart question. Thank you. That trips you up every\ntime you do actual code,",
    "start": "2068305",
    "end": "2073800"
  },
  {
    "text": "so that's the right\nquestion to ask yourself when you're implementing this. Will I have duplicates? How do I handle them?",
    "start": "2073800",
    "end": "2079809"
  },
  {
    "text": "We don't. We take the easy way out. So if you look at\nInsert, on the next page,",
    "start": "2079810",
    "end": "2085460"
  },
  {
    "text": "you will see that the code\nis pretty much the Find code copy pasted, except\nwhen Self Left is None",
    "start": "2085460",
    "end": "2093868"
  },
  {
    "text": "or Self Right is None,\ninstead of returning, it creates a new node. ",
    "start": "2093869",
    "end": "2102296"
  },
  {
    "text": "Does that make sense to people?  All right.",
    "start": "2102296",
    "end": "2107415"
  },
  {
    "text": " So Delete is going to be the\nhardest operation for today.",
    "start": "2107415",
    "end": "2113730"
  },
  {
    "text": "Before we do that, let's\ndo a warm up operation. ",
    "start": "2113730",
    "end": "2118820"
  },
  {
    "text": "Let's say I want to implement\nFind Next Larger, also called",
    "start": "2118820",
    "end": "2129350"
  },
  {
    "text": "Successor in some\nimplementations. So I have a node. Say I have node 8, and I\nwant to find the next key",
    "start": "2129350",
    "end": "2141130"
  },
  {
    "text": "in the tree that's\nstrictly larger than 8 but smaller than anything else.",
    "start": "2141130",
    "end": "2146190"
  },
  {
    "text": "So if I would take these nodes\nand write them down in order, I want to find the element\nthat would go right after it.",
    "start": "2146190",
    "end": "2152400"
  },
  {
    "text": "How do I do that? Don't cheat. Don't look at the code, or make\nmy life easier and do searches.",
    "start": "2152400",
    "end": "2159588"
  },
  {
    "text": "AUDIENCE: Go down\none to the right, and you try to get down\nleft as far as you can. PROFESSOR: OK. Very good.",
    "start": "2159588",
    "end": "2164869"
  },
  {
    "text": "So I have a node, and it\nhas some subtree here,",
    "start": "2164870",
    "end": "2171310"
  },
  {
    "start": "2165000",
    "end": "2455000"
  },
  {
    "text": "so I can go to the right here,\nI can go all the way left.",
    "start": "2171310",
    "end": "2177690"
  },
  {
    "text": "We have an operation\nthat does this, and it's called Min for a tree. In order to find the minimum\nin a binary search tree,",
    "start": "2177690",
    "end": "2184390"
  },
  {
    "text": "you keep going left. For example, in this case,\nyou get 4, which is good. So the way you would code\nthis up is if you have Min,",
    "start": "2184390",
    "end": "2191970"
  },
  {
    "text": "you go to the right\nif you can, and then you call Min on the subtree. And you can see that lines\n3 and 4 do exactly that.",
    "start": "2191970",
    "end": "2201339"
  },
  {
    "text": "Good guess. But you can line\n1 says case one, so you have the right\nanswer for one case.",
    "start": "2201340",
    "end": "2210039"
  },
  {
    "text": "Now we have to handle\nmore difficult cases. What if instead, I go\ndown a bunch of nodes,",
    "start": "2210040",
    "end": "2219490"
  },
  {
    "text": "and I want to find the successor\nfor this guy, for example,",
    "start": "2219490",
    "end": "2224780"
  },
  {
    "text": "and there's nothing here. What do I do? ",
    "start": "2224780",
    "end": "2232090"
  },
  {
    "text": "So if I want to find the\nsuccessor for 8, what do I do?",
    "start": "2232090",
    "end": "2237160"
  },
  {
    "text": "Sorry. It has an answer. What if I want to find\nthe successor for 4?",
    "start": "2237160",
    "end": "2244246"
  },
  {
    "text": " AUDIENCE: Go up one. PROFESSOR: OK. Go up one.",
    "start": "2244247",
    "end": "2249900"
  },
  {
    "text": "Why does that work? AUDIENCE: You know it's\ngoing to be greater. PROFESSOR: So I'm\ngoing up right.",
    "start": "2249900",
    "end": "2257780"
  },
  {
    "text": "So I know that everything here\nis guaranteed to be smaller, everything here is guaranteed\nto be greater than this guy.",
    "start": "2257780",
    "end": "2264330"
  },
  {
    "text": "This guy is up right, so this\nis guaranteed to be greater than this, and\neverything here is",
    "start": "2264330",
    "end": "2270040"
  },
  {
    "text": "guaranteed to be greater than\nthis, and so on and so forth for the entire tree. So if I go up right, I'm happy.",
    "start": "2270040",
    "end": "2278150"
  },
  {
    "text": "I definitely found my answer. Now, what if I have something\nthat looks like this,",
    "start": "2278150",
    "end": "2286040"
  },
  {
    "text": "and I want to find the\nsuccessor for this guy? ",
    "start": "2286040",
    "end": "2293039"
  },
  {
    "text": "AUDIENCE: There is none. PROFESSOR: In this\ncase, there is none if there's nothing else here.",
    "start": "2293040",
    "end": "2298210"
  },
  {
    "text": "What if I have this,\nbut then I have this? So I came down this way.",
    "start": "2298210",
    "end": "2304299"
  },
  {
    "start": "2304300",
    "end": "2312760"
  },
  {
    "text": "AUDIENCE: Are you saying you're\ncalling on that last node? PROFESSOR: Yep. AUDIENCE: Find the larger? ",
    "start": "2312760",
    "end": "2321299"
  },
  {
    "text": "I guess you'd just\ntrace back up. PROFESSOR: And where do I stop? ",
    "start": "2321300",
    "end": "2331410"
  },
  {
    "text": "AUDIENCE: It affects the tree,\nso you go up one from there. You don't stop there. PROFESSOR: Why\ncan't I stop here?",
    "start": "2331410",
    "end": "2338890"
  },
  {
    "text": "AUDIENCE: Because you know\nthat that-- not necessarily.",
    "start": "2338890",
    "end": "2343911"
  },
  {
    "text": "AUDIENCE: You know that\neverything in that long branch right there is less than\nthat node [INAUDIBLE].",
    "start": "2343911",
    "end": "2349429"
  },
  {
    "text": "PROFESSOR: This is to\nthe left of this guy, so this guy has to be\ngreater than everything here,",
    "start": "2349429",
    "end": "2356619"
  },
  {
    "text": "and then you can repeat the\nargument that we had before. So here, we could\nstop right away",
    "start": "2356620",
    "end": "2362059"
  },
  {
    "text": "because we could branch left. In this case, you have\nto go up until you're able to go left and up.",
    "start": "2362060",
    "end": "2369580"
  },
  {
    "text": "If you get to the root,\nthen what happened? Then we're in this case,\nand you have no successor.",
    "start": "2369580",
    "end": "2377025"
  },
  {
    "text": " So take a look at the code.",
    "start": "2377025",
    "end": "2382740"
  },
  {
    "text": "The next larger,\nlines 1 through 9. Case two, 6 through\n8, does exactly that.",
    "start": "2382740",
    "end": "2389070"
  },
  {
    "text": "If I can't go to my right\nand find the tree there, then I go up through\nmy parent chain,",
    "start": "2389070",
    "end": "2397569"
  },
  {
    "text": "and as long as I have\nto go up to the left, so as long as I'm the\nright child of my parent,",
    "start": "2397570",
    "end": "2402900"
  },
  {
    "text": "I have to keep going. The moment I find the parent\nwhere I'm the left child, I stop. That's my successor.",
    "start": "2402900",
    "end": "2408255"
  },
  {
    "text": " What if I would have to find\nthe predecessor instead?",
    "start": "2408255",
    "end": "2414270"
  },
  {
    "text": "So the element that's\nsmaller than me but bigger than everything\nelse in the tree.",
    "start": "2414270",
    "end": "2419734"
  },
  {
    "text": "What would I do? ",
    "start": "2419734",
    "end": "2431624"
  },
  {
    "text": "AUDIENCE: It's\njust the opposite. PROFESSOR: Just the opposite. So how do I do the opposite?",
    "start": "2431624",
    "end": "2439718"
  },
  {
    "text": "AUDIENCE: You can take the\nmax of the left side tree, or traverse up, and\nif that's less than--",
    "start": "2439718",
    "end": "2453400"
  },
  {
    "text": "PROFESSOR: OK, so if I\nhave a left subtree, fine. Call max on it and get\nthe rightmost node there.",
    "start": "2453400",
    "end": "2459069"
  },
  {
    "text": "If not, I go up,\nand when do I stop?",
    "start": "2459070",
    "end": "2464250"
  },
  {
    "text": "When I go left or right?",
    "start": "2464250",
    "end": "2470598"
  },
  {
    "text": "AUDIENCE: You'd\nhave to go right. Is that right? PROFESSOR: Yep.",
    "start": "2470598",
    "end": "2475630"
  },
  {
    "text": "So last time, in this\ncase, when I was going up, if I was going left,\nI had to keep going,",
    "start": "2475630",
    "end": "2482160"
  },
  {
    "text": "and the moment I went right,\nI was happy and I stopped. What if I want to\nfind the predecessor?",
    "start": "2482160",
    "end": "2488560"
  },
  {
    "text": "It's the opposite, right? So I will go this way, and\nthe moment I can go this way,",
    "start": "2488560",
    "end": "2494770"
  },
  {
    "text": "I'm done. How do you do this in code? ",
    "start": "2494770",
    "end": "2502570"
  },
  {
    "text": "Slightly tricky. Just slightly, I promise. ",
    "start": "2502570",
    "end": "2509079"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: It's hard. What I would do is\ncopy paste the code,",
    "start": "2509080",
    "end": "2516630"
  },
  {
    "text": "replace \"left\" with \"right\"\neverywhere, and replace \"min\" with \"max.\"",
    "start": "2516630",
    "end": "2523251"
  },
  {
    "text": "You get it done. So we talked about how the\ntree is symmetric, right? So every time, instead of\nsaying \"left,\" you say \"right,\"",
    "start": "2523251",
    "end": "2532670"
  },
  {
    "text": "and instead of saying\n\"min,\" you say \"max.\" That's how you do this. ",
    "start": "2532670",
    "end": "2538760"
  },
  {
    "text": "How do we do deletions?  So suppose I'm in this tree\nand I want to delete 15.",
    "start": "2538760",
    "end": "2545910"
  },
  {
    "text": "What do I do? AUDIENCE: Kill it. PROFESSOR: Kill it. Very good.",
    "start": "2545910",
    "end": "2551714"
  },
  {
    "text": "What if I want to delete 16? What do I do? ",
    "start": "2551714",
    "end": "2559663"
  },
  {
    "text": "AUDIENCE: You need to\nput 15 where 16 is. PROFESSOR: OK. So I would put 15 here.",
    "start": "2559663",
    "end": "2566714"
  },
  {
    "start": "2566715",
    "end": "2571770"
  },
  {
    "text": "So I had 16.  Suppose I have a big tree here.",
    "start": "2571770",
    "end": "2578085"
  },
  {
    "start": "2578085",
    "end": "2583087"
  },
  {
    "text": "Actually, let's go\nfor an easier case. Let's say I have this tree here.",
    "start": "2583087",
    "end": "2589920"
  },
  {
    "text": "So you're here, you\nhave a big tree here, you don't have\nanything here, and you want to delete this guy. ",
    "start": "2589920",
    "end": "2597450"
  },
  {
    "text": "AUDIENCE: You know\nthat everything less than the top node is\ngoing to be less than it, so you can just move that up.",
    "start": "2597450",
    "end": "2602830"
  },
  {
    "text": "PROFESSOR: Everything\nless than this guy is also going to be less than this guy.",
    "start": "2602830",
    "end": "2609060"
  },
  {
    "text": "So you're saying move\nthe whole tree up. AUDIENCE: Yep. PROFESSOR: So the\nway we do that is",
    "start": "2609060",
    "end": "2614450"
  },
  {
    "text": "we'd take this node's left\nlink and make it point here, and take this guy's parent\nlink and make it point here,",
    "start": "2614450",
    "end": "2622690"
  },
  {
    "text": "and this guy sort of goes away. ",
    "start": "2622690",
    "end": "2628250"
  },
  {
    "text": "So we have two\ncases for deleting. We have if you're a\nleaf, we'll take you out. ",
    "start": "2628250",
    "end": "2640600"
  },
  {
    "text": "Sorry. I got confused. If you have one\nchild and that child is in the same direction as your\nparent, then you can do this.",
    "start": "2640600",
    "end": "2647860"
  },
  {
    "text": "What if you have one child,\nbut it's a zigzag like this?",
    "start": "2647860",
    "end": "2661730"
  },
  {
    "text": "What do you do? ",
    "start": "2661730",
    "end": "2669519"
  },
  {
    "text": "AUDIENCE: It's still greater\nthan, so you do the same thing. PROFESSOR: Exactly. Same thing. ",
    "start": "2669520",
    "end": "2677200"
  },
  {
    "text": "Just change this guy, change\nthis guy, and I'm happy. So it doesn't matter if you have\na zigzag or a straight line.",
    "start": "2677200",
    "end": "2682810"
  },
  {
    "text": "It might help you think\nabout it to convince yourself that the code is correct, but in\nthe end, you do the same thing.",
    "start": "2682810",
    "end": "2689970"
  },
  {
    "text": "Now, what if I want\nto delete node 8? So what if I have a nasty case\nwhere I want to delete this guy",
    "start": "2689970",
    "end": "2710370"
  },
  {
    "text": "and it has children both on\nthe left and on the right? ",
    "start": "2710370",
    "end": "2722200"
  },
  {
    "text": "AUDIENCE: You have to take\n8, compare it to its parent and compare it to\nits right child, and see which one\nis greater in order",
    "start": "2722200",
    "end": "2728667"
  },
  {
    "text": "to figure out which node\ngets replaced in its spot.",
    "start": "2728667",
    "end": "2733857"
  },
  {
    "text": "PROFESSOR: OK. So there is replacing\nthat's going to happen. The answer is really tricky. I always forget\nthis when coding.",
    "start": "2733857",
    "end": "2741290"
  },
  {
    "start": "2735000",
    "end": "2965000"
  },
  {
    "text": "Try to understand it,\nand if it doesn't work, refer to the textbook. When you forget it, because\nyou will, refer to the textbook",
    "start": "2741290",
    "end": "2748270"
  },
  {
    "text": "or to the internet. So what you do is I can't just\nmagically replace this node",
    "start": "2748270",
    "end": "2754650"
  },
  {
    "text": "with one of the subtrees,\nbut we talked right before this about Next Greater,\nso finding a node's successor.",
    "start": "2754650",
    "end": "2767029"
  },
  {
    "text": "If this node has both a left\nsubtree and a right subtree, then I know that if I\ncall Find Successor on it,",
    "start": "2767030",
    "end": "2773460"
  },
  {
    "text": "I'm going to go\nsomewhere inside here, and I'm going to find a node\nsomewhere in here all the way",
    "start": "2773460",
    "end": "2783000"
  },
  {
    "text": "to the left that is\nthis guy's successor. ",
    "start": "2783000",
    "end": "2789670"
  },
  {
    "text": "So what I'm going\nto do is I'm going to delete this node instead, and\nthen I'm going to take its key",
    "start": "2789670",
    "end": "2798030"
  },
  {
    "text": "and put it up here.  So if I want to delete 8, what\nI do is I find its successor,",
    "start": "2798030",
    "end": "2808549"
  },
  {
    "text": "then I delete it, then I take\nthe 15 that was here-- you can see it, right?",
    "start": "2808550",
    "end": "2813930"
  },
  {
    "text": "It's still there.  Put it here.",
    "start": "2813930",
    "end": "2819680"
  },
  {
    "text": "So the reason this works\nis that everything here",
    "start": "2819680",
    "end": "2825470"
  },
  {
    "text": "is greater than this guy. Everything here is\nsmaller than this guy.",
    "start": "2825470",
    "end": "2831240"
  },
  {
    "text": "This is the next node that's\ngreater than this guy, but everything else\nis bigger than it,",
    "start": "2831240",
    "end": "2836760"
  },
  {
    "text": "right, because we wanted\nit to be a successor. So if I take this value\nand I put it up here,",
    "start": "2836760",
    "end": "2842840"
  },
  {
    "text": "everything in here is still\ngoing to be greater than it. ",
    "start": "2842840",
    "end": "2850310"
  },
  {
    "text": "This is a successor of this\nguy, so everything here is still going to be\nsmaller than the successor. ",
    "start": "2850310",
    "end": "2864310"
  },
  {
    "text": "Great. In order to do a delete,\nI find the successor, and then I call Delete on it.",
    "start": "2864310",
    "end": "2870455"
  },
  {
    "text": "How do I know that\nthis will end? How do I know that\nI'm not going to go into a loop that runs forever?",
    "start": "2870455",
    "end": "2878533"
  },
  {
    "text": "AUDIENCE: Because it's not-- AUDIENCE: It's acyclic, right? PROFESSOR: OK. ",
    "start": "2878533",
    "end": "2885670"
  },
  {
    "text": "First answer, good. Eventually, worst case, I'm\ngoing to get to the maximum,",
    "start": "2885670",
    "end": "2891290"
  },
  {
    "text": "and then not going on have to\ndelete the successor anymore.",
    "start": "2891290",
    "end": "2896340"
  },
  {
    "text": "Now, another thing\nto note here is that if this guy is the\nsuccessor of this guy, it can't have anything on the\nleft, because if it would,",
    "start": "2896340",
    "end": "2904300"
  },
  {
    "text": "then whatever is down here\nhas to be bigger than this, and whatever's to\nthe left of this node",
    "start": "2904300",
    "end": "2909520"
  },
  {
    "text": "has to be smaller than this. But we said that this is\nthe successor of this,",
    "start": "2909520",
    "end": "2914740"
  },
  {
    "text": "so there's nothing here. So this will be one of the easy\ncases that we talked about.",
    "start": "2914740",
    "end": "2920000"
  },
  {
    "text": "The successor\neither has no kids, or it has only one\nchild, only one subtree.",
    "start": "2920000",
    "end": "2927940"
  },
  {
    "text": "So then I can delete it\nusing one of the easy cases. So in fact, worst case that\nhappens in a delete is my node",
    "start": "2927940",
    "end": "2935170"
  },
  {
    "text": "has two subtrees. Then I find the successor that's\nonly going to have one subtree, I change my links\nthere, and I'm done.",
    "start": "2935170",
    "end": "2941130"
  },
  {
    "text": " What is the running\ntime for Delete? ",
    "start": "2941130",
    "end": "2955103"
  },
  {
    "text": "AUDIENCE: Is it order h,\nbecause you should do it all the way down to the\nbottom of the tree, right? PROFESSOR: You have\nthe right answer.",
    "start": "2955103",
    "end": "2961480"
  },
  {
    "text": "Let's see why it's order h. It has to be order h, right? Otherwise, the tree\nwould be too slow. If it's order N, then it's bad.",
    "start": "2961480",
    "end": "2969130"
  },
  {
    "start": "2965000",
    "end": "3255000"
  },
  {
    "text": "So why would Delete be order h? This was a heap, right,\nso I can't use this.",
    "start": "2969130",
    "end": "2975350"
  },
  {
    "text": "I'm going to write\n\"delete\" here again. So the first thing you do is\nyou have to search for the key,",
    "start": "2975350",
    "end": "2981900"
  },
  {
    "text": "right? That's order h.  Now, if it's a happy case,\nif it's case one or two,",
    "start": "2981900",
    "end": "2988960"
  },
  {
    "text": "you change some links\nand you're done. What's the time for that? ",
    "start": "2988960",
    "end": "2994679"
  },
  {
    "text": "AUDIENCE: Constant. PROFESSOR: Constant. So happy case, order h for sure.",
    "start": "2994679",
    "end": "2999950"
  },
  {
    "text": "Now sad case. If you have two\nchildren, what do you have to do after you realize\nthat you have two subtrees?",
    "start": "2999950",
    "end": "3006579"
  },
  {
    "text": "AUDIENCE: Find the successor. PROFESSOR: OK. What's the running time\nfor finding a successor?",
    "start": "3006580",
    "end": "3012378"
  },
  {
    "text": "AUDIENCE: Order h. PROFESSOR: Order h. ",
    "start": "3012378",
    "end": "3019310"
  },
  {
    "text": "Once I find the\nsuccessor, what do I do? ",
    "start": "3019310",
    "end": "3025560"
  },
  {
    "text": "Call Delete on that,\nand what happens? It's a happy case or a sad case?",
    "start": "3025560",
    "end": "3030620"
  },
  {
    "text": "AUDIENCE: It's a happy case. PROFESSOR: Happy case,\na few links get swapped, constant time.",
    "start": "3030620",
    "end": "3036069"
  },
  {
    "text": "So worst case, order\nh plus order h. Order h.",
    "start": "3036070",
    "end": "3041260"
  },
  {
    "text": "So insertions are order\nh, deletions are order h. AUDIENCE: The first one.",
    "start": "3041260",
    "end": "3046410"
  },
  {
    "text": "Because the second one is\nfrom finding the successor. What is the first one for? PROFESSOR: Finding the\nnode for a key in the tree.",
    "start": "3046410",
    "end": "3052930"
  },
  {
    "text": "So if I say Delete 8,\nthen you have to find 8. If I give you the node,\nthen you don't have that.",
    "start": "3052930",
    "end": "3058880"
  },
  {
    "text": "Good question. It's a good question. Thank you. ",
    "start": "3058880",
    "end": "3066380"
  },
  {
    "text": "So that's insertion. That's deletion.  Let's look at the\ncode for Delete.",
    "start": "3066380",
    "end": "3072585"
  },
  {
    "text": " Looks kind of long.",
    "start": "3072585",
    "end": "3078809"
  },
  {
    "text": " So lines through 21,\nhappy case or sad case?",
    "start": "3078810",
    "end": "3086637"
  },
  {
    "text": " Try to do it by\nlooking at the \"if\"",
    "start": "3086637",
    "end": "3093150"
  },
  {
    "text": "instead of looking\nat the comments.  So lines through 21 for Delete.",
    "start": "3093150",
    "end": "3102180"
  },
  {
    "text": " AUDIENCE: On this tree? Which tree, because\nthere are two deletes?",
    "start": "3102180",
    "end": "3109257"
  },
  {
    "text": "PROFESSOR: Oh really?  Sorry. Why do we have two deletes?",
    "start": "3109258",
    "end": "3116145"
  },
  {
    "text": "AUDIENCE: There's BST Delete and\nthen there's BST Node Delete.",
    "start": "3116145",
    "end": "3121409"
  },
  {
    "text": "PROFESSOR: So BST Delete.  Finds the node, and then\ncalls Delete on the node.",
    "start": "3121409",
    "end": "3128400"
  },
  {
    "text": " And then if the node\nis a tree's root,",
    "start": "3128400",
    "end": "3133460"
  },
  {
    "text": "then it updates the tree's root. So let's look at\nthe nodes delete.",
    "start": "3133460",
    "end": "3139410"
  },
  {
    "text": "Oh, I see. I think I was looking\nat the wrong one. ",
    "start": "3139410",
    "end": "3146020"
  },
  {
    "text": "Thank you. My Delete was much\nlonger than yours. So lines 3 through 12,\nhappy case or sad case?",
    "start": "3146020",
    "end": "3153760"
  },
  {
    "start": "3153760",
    "end": "3160180"
  },
  {
    "text": "Look at the \"if\" on\nline 3 and tell me, what case is it going for?",
    "start": "3160180",
    "end": "3165650"
  },
  {
    "start": "3165650",
    "end": "3171208"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE].  PROFESSOR: If it doesn't\nhave a left child",
    "start": "3171208",
    "end": "3177579"
  },
  {
    "text": "or it doesn't have\na right child, is that the happy\ncase or the sad case? AUDIENCE: Happy. PROFESSOR: Happy case.",
    "start": "3177580",
    "end": "3183396"
  },
  {
    "text": "So lines 4 through 12\nhandle the happy case. Lines 14 through 16\nhandle the sad case.",
    "start": "3183396",
    "end": "3190990"
  },
  {
    "text": " Do lines 14 through\n16 make sense?",
    "start": "3190990",
    "end": "3197859"
  },
  {
    "text": "Find the successor,\nthen swap the keys, then delete that successor. ",
    "start": "3197860",
    "end": "3206820"
  },
  {
    "text": "Now, lines 4 through\n11 are pretty much what we talked about here, except I\ncan't draw arrows on the board",
    "start": "3206820",
    "end": "3213960"
  },
  {
    "text": "and instead I have to\nchange left and right links. Line 4 has to see if we're a\nleft child or a right child,",
    "start": "3213960",
    "end": "3221130"
  },
  {
    "text": "and then lines 5 through 7 and\n9 through 11 are pretty much copy paste, swap\nleft with right.",
    "start": "3221130",
    "end": "3228600"
  },
  {
    "text": "And they changed the links\nlike we changed them here. ",
    "start": "3228600",
    "end": "3239330"
  },
  {
    "text": "Do we have any\nquestions on Deletes? AUDIENCE: So if the\nsuccessor had a right child,",
    "start": "3239330",
    "end": "3248440"
  },
  {
    "text": "then all you do, you just do\nthe workaround thing where",
    "start": "3248440",
    "end": "3255050"
  },
  {
    "start": "3255000",
    "end": "3555000"
  },
  {
    "text": "you just-- PROFESSOR: Yep. So the case that it\ndoesn't have two children. As long as it doesn't\nhave both children,",
    "start": "3255050",
    "end": "3261869"
  },
  {
    "text": "you're in the happy case and\nyou can do some link swapping. ",
    "start": "3261870",
    "end": "3268355"
  },
  {
    "text": "Are you guys burned out already?  Fair enough.",
    "start": "3268355",
    "end": "3273910"
  },
  {
    "text": " I left a part out. What I left out is how\nto augment a binary tree.",
    "start": "3273910",
    "end": "3283120"
  },
  {
    "text": "So binary trees by default\ncan answer the question, what's the minimum node\nin a tree in order h.",
    "start": "3283120",
    "end": "3289500"
  },
  {
    "text": "You go all the way to the\nleft, you find the minimum. That's the minimum. It turns out that if you make\na node a little bit fatter,",
    "start": "3289500",
    "end": "3296920"
  },
  {
    "text": "so if instead of storing, say,\n23 in this node, I store 23,",
    "start": "3296920",
    "end": "3303069"
  },
  {
    "text": "and I store the fact that the\nminimum in my left subtree is 4, then it turns out that\nI can answer the question",
    "start": "3303070",
    "end": "3310230"
  },
  {
    "text": "in constant time,\nwhat's the minimum? Oh gee, if you store\nthe minimum here,",
    "start": "3310230",
    "end": "3315474"
  },
  {
    "text": "of course you can retrieve\nit in constant time, right? The hard part is, how do you\nhandle insertions and updates",
    "start": "3315475",
    "end": "3321940"
  },
  {
    "text": "in the same time? So the idea is that\nif I have a node",
    "start": "3321940",
    "end": "3327770"
  },
  {
    "text": "and I have a function here,\nsay the minimum of everything,",
    "start": "3327770",
    "end": "3333990"
  },
  {
    "text": "if I have two children,\nhere they're 15 and 42,",
    "start": "3333990",
    "end": "3340530"
  },
  {
    "text": "and say the minimum\nin this tree is 4 and the minimum in this tree is.",
    "start": "3340530",
    "end": "3345850"
  },
  {
    "text": "So if I already computed\nthe function for these guys, how do I compute the\nfunction for this?",
    "start": "3345850",
    "end": "3351700"
  },
  {
    "text": " AUDIENCE: [INAUDIBLE]\nand compare it? PROFESSOR: Yep. Take the minimum of\nthese two guys, right?",
    "start": "3351700",
    "end": "3359190"
  },
  {
    "text": "There are some special cases\nif you don't have a child. If you don't have a left\nchild, then you're the minimum.",
    "start": "3359190",
    "end": "3366540"
  },
  {
    "text": "But you write down\nthose special cases, and you can compute\nthis in how much time? ",
    "start": "3366540",
    "end": "3374650"
  },
  {
    "text": "AUDIENCE: Order h, right? PROFESSOR: What if I\nalready computed the answer for the children?",
    "start": "3374650",
    "end": "3380759"
  },
  {
    "text": "How much time does\nit take to compute the answer for a single node? AUDIENCE: Constant. PROFESSOR: Constant.",
    "start": "3380759",
    "end": "3386137"
  },
  {
    "text": "OK. AUDIENCE: For a tree, though. PROFESSOR: For a\ntree, it's order h. Yeah. You're getting ahead.",
    "start": "3386137",
    "end": "3392791"
  },
  {
    "text": "You're rushing me. You're not letting me finish. AUDIENCE: Are you saying that\nwe store the minimum value?",
    "start": "3392791",
    "end": "3398200"
  },
  {
    "text": "PROFESSOR: So for every-- AUDIENCE: Each node\nhas a field that",
    "start": "3398200",
    "end": "3403425"
  },
  {
    "text": "says what the minimum\nvalue is in that tree. PROFESSOR: Yep, exactly. So for each node, what's\nthe minimum in the subtree.",
    "start": "3403425",
    "end": "3411340"
  },
  {
    "text": "So if I add a node here,\nsuppose I add three and I had my minimums,\nwhat changed?",
    "start": "3411340",
    "end": "3421840"
  },
  {
    "text": "This subtree changed,\nthis subtree changed, this subtree changed, and\nthen this subtree changed.",
    "start": "3421840",
    "end": "3427670"
  },
  {
    "text": "So I have to update the\nminimums here, here, here, here. Nothing else changed.",
    "start": "3427670",
    "end": "3433910"
  },
  {
    "text": "Outside the path where\nI did the Insert, nothing changed, so I don't\nhave to update anything.",
    "start": "3433910",
    "end": "3439680"
  },
  {
    "text": "So what I do is after\nthe Insert, I go back up and I re-compute the values.",
    "start": "3439680",
    "end": "3445305"
  },
  {
    "text": "So here, I'll have 3. I go back up 3, 3, 3. AUDIENCE: You could when\nyou're passing down, though.",
    "start": "3445305",
    "end": "3452980"
  },
  {
    "text": "When you're going\ndown that column, you can just compare\nit on the way down. You don't have to\ngo back up, right?",
    "start": "3452980",
    "end": "3459100"
  },
  {
    "text": "PROFESSOR: Yep. So the advantage of doing\nit the way I'm saying it is that you can have other\nfunctions instead of minimum.",
    "start": "3459100",
    "end": "3466400"
  },
  {
    "text": "As long as you can\ncompute the function inside the parent\nin constant time",
    "start": "3466400",
    "end": "3471480"
  },
  {
    "text": "using the function\nfrom the children, it makes sense to compute the\nfunction on the children first.",
    "start": "3471480",
    "end": "3477379"
  },
  {
    "text": "There's an obvious function\nthat I can't tell you because that's on the Pset,\nbut when you see the next Pset,",
    "start": "3477379",
    "end": "3482760"
  },
  {
    "text": "you'll see what I mean. So if you have a\nfunction where you",
    "start": "3482760",
    "end": "3488565"
  },
  {
    "text": "know the result for the children\nand you can compute the result for the parent in constant time,\nthen after you do the Insert,",
    "start": "3488565",
    "end": "3495819"
  },
  {
    "text": "you go up on the path and\nyou re-compute the function.",
    "start": "3495820",
    "end": "3501550"
  },
  {
    "text": "When you delete, what do you do? AUDIENCE: Same thing.",
    "start": "3501550",
    "end": "3506874"
  },
  {
    "text": "PROFESSOR: Same thing.  If this goes away, then this\nsubtree changed, and then",
    "start": "3506874",
    "end": "3515849"
  },
  {
    "text": "if there would be\nsomething else here, then this subtree changed,\nbut nothing else changed.",
    "start": "3515850",
    "end": "3521240"
  },
  {
    "text": "So whenever you do an Insert\nor a Delete, all you have to do is go back up the\npath to the parent and re-compute the function\nthat you're trying to compute.",
    "start": "3521240",
    "end": "3532000"
  },
  {
    "text": "And that's tree augmentation. Does this make sense somewhat?",
    "start": "3532000",
    "end": "3538370"
  },
  {
    "text": "That's it. So what you'll find\nin lecture notes is a harder way of doing\nit that works for minimum,",
    "start": "3538370",
    "end": "3545849"
  },
  {
    "text": "but what I told you\nworks for everything. So don't tell people I told you\nhow to do this for everything.",
    "start": "3545850",
    "end": "3552790"
  },
  {
    "text": "Sure nobody's going to know.",
    "start": "3552790",
    "end": "3555250"
  }
]