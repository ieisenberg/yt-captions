[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "We're on the home stretch now.",
    "start": "390",
    "end": "2330"
  },
  {
    "text": "For all the instructions up until now, the\nnext instruction has come from the location",
    "start": "2330",
    "end": "6660"
  },
  {
    "text": "following the current instruction - hence\nthe \"PC+4\" logic.",
    "start": "6660",
    "end": "11600"
  },
  {
    "text": "Branches and JMPs change that by altering\nthe value in the PC.",
    "start": "11600",
    "end": "16660"
  },
  {
    "text": "The JMP instruction simply takes the value\nin the RA register and makes it the next PC",
    "start": "16660",
    "end": "21490"
  },
  {
    "text": "value.",
    "start": "21490",
    "end": "23039"
  },
  {
    "text": "The PCSEL MUX in the upper left-hand corner\nlets the control logic select the source of",
    "start": "23039",
    "end": "28178"
  },
  {
    "text": "the next PC value.",
    "start": "28179",
    "end": "30279"
  },
  {
    "text": "When PCSEL is 0, the incremented PC value\nis chosen.",
    "start": "30279",
    "end": "35039"
  },
  {
    "text": "When PCSEL is 2, the value of the RA register\nis chosen.",
    "start": "35039",
    "end": "39829"
  },
  {
    "text": "We'll see how the other inputs to the PCSEL\nMUX are used in just a moment.",
    "start": "39829",
    "end": "44468"
  },
  {
    "text": "The JMP and branch instructions also cause\nthe address of the following instruction,",
    "start": "44469",
    "end": "48840"
  },
  {
    "text": "i.e., the PC+4 value, to be written to the\nRC register.",
    "start": "48840",
    "end": "54180"
  },
  {
    "text": "When WDSEL is 0, the \"0\" input of the WDSEL\nMUX is used to select the PC+4 value as the",
    "start": "54180",
    "end": "61570"
  },
  {
    "text": "write-back data.",
    "start": "61570",
    "end": "64350"
  },
  {
    "text": "Here's how the data flow works.",
    "start": "64350",
    "end": "66710"
  },
  {
    "text": "The output of the PC+4 adder is is routed\nto the register file and WERF is set to 1",
    "start": "66710",
    "end": "73290"
  },
  {
    "text": "to enable that value to be written at the\nend of the cycle.",
    "start": "73290",
    "end": "76910"
  },
  {
    "text": "Meanwhile, the value of RA register coming\nout of the register file is connected to the",
    "start": "76910",
    "end": "83229"
  },
  {
    "text": "\"2\" input of the PCSEL MUX.",
    "start": "83229",
    "end": "85329"
  },
  {
    "text": "So setting PCSEL to 2 will select the value\nin the RA register as the next value for the",
    "start": "85330",
    "end": "90860"
  },
  {
    "text": "PC.",
    "start": "90860",
    "end": "91960"
  },
  {
    "text": "The rest of the control signals are \"don't\ncares\", except, of course for the memory write",
    "start": "91960",
    "end": "96210"
  },
  {
    "text": "enable (MWR), which can never be \"don't care\"\nlest we cause an accidental write to some",
    "start": "96210",
    "end": "101070"
  },
  {
    "text": "memory location.",
    "start": "101070",
    "end": "103310"
  },
  {
    "start": "103000",
    "end": "103000"
  },
  {
    "text": "The branch instruction requires an additional\nadder to compute the target address by adding",
    "start": "103310",
    "end": "108130"
  },
  {
    "text": "the scaled offset from the instruction's literal\nfield to the current PC+4 value.",
    "start": "108130",
    "end": "114328"
  },
  {
    "text": "Remember that we scale the offset by a factor\nof 4 to convert it from the word offset stored",
    "start": "114329",
    "end": "119829"
  },
  {
    "text": "in the literal to the byte offset required\nfor the PC.",
    "start": "119829",
    "end": "124430"
  },
  {
    "text": "The output of the offset adder becomes the\n\"1\" input to the PCSEL MUX, where, if the",
    "start": "124430",
    "end": "129619"
  },
  {
    "text": "branch is taken, it will become the next value\nof the PC.",
    "start": "129619",
    "end": "134420"
  },
  {
    "text": "Note that multiplying by 4 is easily accomplished\nby shifting the literal two bits to the left,",
    "start": "134420",
    "end": "140709"
  },
  {
    "text": "which inserts two 0-bits at the low-order\nend of the value.",
    "start": "140709",
    "end": "144150"
  },
  {
    "text": "And, like before, the sign-extension just\nrequires replicating bit ID[15], in this case",
    "start": "144150",
    "end": "151040"
  },
  {
    "text": "fourteen times.",
    "start": "151040",
    "end": "153129"
  },
  {
    "text": "So implementing this complicated-looking expression\nrequires care in wiring up the input to the",
    "start": "153129",
    "end": "158670"
  },
  {
    "text": "offset adder, but no additional logic!",
    "start": "158670",
    "end": "163090"
  },
  {
    "text": "We do need some logic to determine if we should\nbranch or not.",
    "start": "163090",
    "end": "166910"
  },
  {
    "text": "The 32-bit NOR gate connected to the first\nread port of the register file tests the value",
    "start": "166910",
    "end": "172920"
  },
  {
    "text": "of the RA register.",
    "start": "172920",
    "end": "173920"
  },
  {
    "text": "The NOR's output Z will be 1 if all the bits\nof the RA register value are 0, and 0 otherwise.",
    "start": "173920",
    "end": "181799"
  },
  {
    "text": "The Z value can be used by the control logic\nto determine the correct value for PCSEL.",
    "start": "181799",
    "end": "190110"
  },
  {
    "text": "If Z indicates the branch is taken, PCSEL\nwill be 1 and the output of the offset adder",
    "start": "190110",
    "end": "196769"
  },
  {
    "text": "becomes the next value of the PC.",
    "start": "196769",
    "end": "200220"
  },
  {
    "text": "If the branch is not taken, PCSEL will be\n0 and execution will continue with the next",
    "start": "200220",
    "end": "206010"
  },
  {
    "text": "instruction at PC+4.",
    "start": "206010",
    "end": "210510"
  },
  {
    "text": "As in the JMP instruction, the PC+4 value\nis routed to the register file to be written",
    "start": "210510",
    "end": "215930"
  },
  {
    "text": "into the RC register at end of the cycle.",
    "start": "215930",
    "end": "219260"
  },
  {
    "text": "Meanwhile, the value of Z is computed from\nthe value of the RA register while the branch",
    "start": "219260",
    "end": "225659"
  },
  {
    "text": "offset adder computes the address of the branch\ntarget.",
    "start": "225659",
    "end": "229980"
  },
  {
    "text": "The output of the offset adder is routed to\nthe PCSEL MUX where the value of the 3-bit",
    "start": "229980",
    "end": "235250"
  },
  {
    "text": "PCSEL control signal, computed by the control\nlogic based on Z, determines whether the next",
    "start": "235250",
    "end": "241830"
  },
  {
    "text": "PC value is the branch target or the PC+4\nvalue.",
    "start": "241830",
    "end": "246850"
  },
  {
    "text": "The remaining control signals are unused and\nset to their default \"don't care\" values.",
    "start": "246850",
    "end": "253140"
  },
  {
    "start": "253000",
    "end": "253000"
  },
  {
    "text": "We have one last instruction to introduce:\nthe LDR or load-relative instruction.",
    "start": "253140",
    "end": "258950"
  },
  {
    "text": "LDR behaves like a normal LD instruction except\nthat the memory address is taken from the",
    "start": "258950",
    "end": "264140"
  },
  {
    "text": "branch offset adder.",
    "start": "264140",
    "end": "266630"
  },
  {
    "text": "Why would it be useful to load a value from\na location near the LDR instruction?",
    "start": "266630",
    "end": "272260"
  },
  {
    "text": "Normally such addresses would refer to the\nneighboring instructions, so why would we",
    "start": "272260",
    "end": "276480"
  },
  {
    "text": "want to load the binary encoding of an instruction\ninto a register to be used as data?",
    "start": "276480",
    "end": "283040"
  },
  {
    "text": "The use case for LDR is accessing large constants\nthat have to be stored in main memory because",
    "start": "283040",
    "end": "288790"
  },
  {
    "text": "they are too large to fit into the 16-bit\nliteral field of an instruction.",
    "start": "288790",
    "end": "294260"
  },
  {
    "text": "In the example shown here, the compiled code\nneeds to load the constant 123456.",
    "start": "294260",
    "end": "301170"
  },
  {
    "text": "So it uses an LDR instruction that refers\nto a nearby location C1: that has been initialized",
    "start": "301170",
    "end": "308540"
  },
  {
    "text": "with the required value.",
    "start": "308540",
    "end": "311520"
  },
  {
    "text": "Since this read-only constant is part of the\nprogram, it makes sense to store it with the",
    "start": "311520",
    "end": "316410"
  },
  {
    "text": "instructions for the program, usually just\nafter the code for a procedure.",
    "start": "316410",
    "end": "322110"
  },
  {
    "text": "Note that we have to be careful to place the\nstorage location so that it won't be executed",
    "start": "322110",
    "end": "326780"
  },
  {
    "text": "as an instruction!",
    "start": "326780",
    "end": "329330"
  },
  {
    "start": "329000",
    "end": "329000"
  },
  {
    "text": "To route the output of the offset adder to\nthe main memory address port, we'll add ASEL",
    "start": "329330",
    "end": "334729"
  },
  {
    "text": "MUX so we can select either the RA register\nvalue (when ASEL=0) or the output of the offset",
    "start": "334730",
    "end": "341580"
  },
  {
    "text": "adder (when ASEL=1) as the first ALU operand.",
    "start": "341580",
    "end": "347189"
  },
  {
    "text": "For LDR, ASEL will be 1, and we'll then ask\nthe ALU compute the Boolean operation \"A\",",
    "start": "347190",
    "end": "354090"
  },
  {
    "text": "i.e., the boolean function whose output is\njust the value of the first operand.",
    "start": "354090",
    "end": "360380"
  },
  {
    "text": "This value then appears on the ALU output,\nwhich is connected to the main memory address",
    "start": "360380",
    "end": "364810"
  },
  {
    "text": "port and the remainder of the execution proceeds\njust like it did for LD.",
    "start": "364810",
    "end": "370650"
  },
  {
    "text": "This seems a bit complicated!",
    "start": "370650",
    "end": "372970"
  },
  {
    "text": "Mr. Blue has a good question:\nwhy not just put the ASEL MUX on the wire",
    "start": "372970",
    "end": "377840"
  },
  {
    "text": "leading to the main memory address port and\nbypass the ALU altogether?",
    "start": "377840",
    "end": "384230"
  },
  {
    "text": "The answer has to do with the amount of time\nneeded to compute the memory address.",
    "start": "384230",
    "end": "389440"
  },
  {
    "text": "If we moved the ASEL MUX here, the data flow\nfor LD and ST addresses would then pass through",
    "start": "389440",
    "end": "396310"
  },
  {
    "text": "two MUXes, the BSEL MUX and the ASEL MUX,\nslowing down the arrival of the address by",
    "start": "396310",
    "end": "403090"
  },
  {
    "text": "a small amount.",
    "start": "403090",
    "end": "405340"
  },
  {
    "text": "This may not seem like a big deal, but the\nadditional time would have to be added the",
    "start": "405340",
    "end": "410139"
  },
  {
    "text": "clock period, thus slowing down every instruction\nby a little bit.",
    "start": "410140",
    "end": "415630"
  },
  {
    "text": "When executing billions of instructions, a\nlittle extra time on each instruction really",
    "start": "415630",
    "end": "420830"
  },
  {
    "text": "impacts the overall performance of the processor.",
    "start": "420830",
    "end": "425750"
  },
  {
    "text": "By placing the ASEL MUX where we did, its\npropagation delay overlaps that of the BSEL",
    "start": "425750",
    "end": "431130"
  },
  {
    "text": "MUX, so the increased functionality it provides\ncomes with no cost in performance.",
    "start": "431130",
    "end": "438360"
  },
  {
    "text": "Here's the data flow for the LDR instruction.",
    "start": "438360",
    "end": "441250"
  },
  {
    "text": "The output of the offset adder is routed through\nthe ASEL MUX to the ALU.",
    "start": "441250",
    "end": "446650"
  },
  {
    "text": "The ALU performs the Boolean computation \"A\"\nand the result becomes the address for main",
    "start": "446650",
    "end": "452400"
  },
  {
    "text": "memory.",
    "start": "452400",
    "end": "453780"
  },
  {
    "text": "The returning data is routed through the WDSEL\nMUX so it can be written into the RC register",
    "start": "453780",
    "end": "459810"
  },
  {
    "text": "at the end of the cycle.",
    "start": "459810",
    "end": "462310"
  },
  {
    "text": "The remaining control values are given their\nusual default values.",
    "start": "462310",
    "end": "466060"
  }
]