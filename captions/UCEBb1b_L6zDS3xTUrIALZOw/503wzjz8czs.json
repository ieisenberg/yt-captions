[
  {
    "text": "The following content is\nprovided under a Creative Commons license. Your support will help MIT\nOpenCourseWare continue to",
    "start": "0",
    "end": "6540"
  },
  {
    "text": "offer high quality educational\nresources for free. To make a donation or to view\nadditional materials from",
    "start": "6540",
    "end": "12780"
  },
  {
    "text": "hundreds of MIT courses, visit\nMIT OpenCourseWare at ocw.mit.edu.",
    "start": "12780",
    "end": "18030"
  },
  {
    "text": " PROFESSOR: I'm going to spend a\ncouple of minutes reviewing",
    "start": "18030",
    "end": "24800"
  },
  {
    "text": "the major things that we talked\nabout last time and then get into discrete source\ncoding, which is the major",
    "start": "24800",
    "end": "34739"
  },
  {
    "text": "topic for today. The first major thing that we\ntalked about last time, along",
    "start": "34740",
    "end": "41199"
  },
  {
    "text": "with all of the philosophy and\nall those other things, was",
    "start": "41200",
    "end": "48460"
  },
  {
    "text": "the sense of what digital\ncommunication really is. I said that what digital\ncommunication is, is it's",
    "start": "48460",
    "end": "56270"
  },
  {
    "text": "communication where there's\na binary interface between source and destination.",
    "start": "56270",
    "end": "62630"
  },
  {
    "text": "The source is very\noften analog. The most interesting\nsources are analog.",
    "start": "62630",
    "end": "67740"
  },
  {
    "text": "The channel is often analog,\nmost interesting. Channels are analog, and we'll\nsay more about what I mean by",
    "start": "67740",
    "end": "74040"
  },
  {
    "text": "analog later. What's important is that you\nhave this binary interface",
    "start": "74040",
    "end": "80070"
  },
  {
    "text": "between source and\nchannel coding. We said a little bit about why\nwe wanted a binary interface,",
    "start": "80070",
    "end": "86640"
  },
  {
    "text": "aside from the fact that it's\nthere now, there's nothing you can do about it even if\nyou don't like it.",
    "start": "86640",
    "end": "93340"
  },
  {
    "text": "One reason is standardization,\nwhich means it simplifies implementation, which\nmeans you can do",
    "start": "93340",
    "end": "100630"
  },
  {
    "text": "everything in the same way. If you have ten different kinds\nof channel coding and you have ten different kinds of\nsource coding and you have",
    "start": "100630",
    "end": "108470"
  },
  {
    "text": "a binary interface, it means\nyou need to develop 20 different things -- ten at the\nsource and ten at the decoder.",
    "start": "108470",
    "end": "116299"
  },
  {
    "text": "If you don't have that\nstandardization with a binary interface between them, you\nneed 100 different things.",
    "start": "116300",
    "end": "121780"
  },
  {
    "text": "You need to match every kind of\nsource with every kind of destination. That raises the price of\nall chips enormously.",
    "start": "121780",
    "end": "129800"
  },
  {
    "text": "One of the other things we said\nis the price of chips is very much the cost of\ndevelopment divided by the",
    "start": "129800",
    "end": "135450"
  },
  {
    "text": "number of them that\nyou stamp out. That's not quite true,\nbut it's a good first approximation. In other words, standardization\nis important.",
    "start": "135450",
    "end": "143040"
  },
  {
    "text": "Layering. Layering is in many ways very\nsimilar to standardization",
    "start": "143040",
    "end": "149099"
  },
  {
    "text": "because this binary interface is\nalso a layer between source and destination.",
    "start": "149100",
    "end": "155080"
  },
  {
    "text": "But the idea there is not that\nit standardizes to make things cheaper, but it simplifies\nthe conceptualization of",
    "start": "155080",
    "end": "163530"
  },
  {
    "text": "what's going on. You can look at a source and\nonly focus on one thing. How do I take that source and\nturn it into the smallest",
    "start": "163530",
    "end": "171290"
  },
  {
    "text": "number of binary digits\npossible? We'll talk a good deal about\nwhat that means later because",
    "start": "171290",
    "end": "178200"
  },
  {
    "text": "there's something stochastic\ninvolved in there and will take us awhile to really\nunderstand that.",
    "start": "178200",
    "end": "183950"
  },
  {
    "text": "Finally, using a binary\ninterface loses nothing in performance.",
    "start": "183950",
    "end": "189430"
  },
  {
    "text": "That's what Shannon said,\nit's what he proved. There's some questions there\nwhen you get to networks, but",
    "start": "189430",
    "end": "199000"
  },
  {
    "text": "the important thing is the\nplaces where you want to study",
    "start": "199000",
    "end": "204160"
  },
  {
    "text": "non-binary interfaces, you will\nnever get a clue of what it is that you're looking at or\nwhy if you don't first very",
    "start": "204160",
    "end": "211820"
  },
  {
    "text": "well understand why\nyou want a binary interface to start with. In other words, if you look at\nthese other cases, there's",
    "start": "211820",
    "end": "218010"
  },
  {
    "text": "exceptions to the rule, and if\nyou don't know what the rule is, you certainly can't\nunderstand what",
    "start": "218010",
    "end": "224755"
  },
  {
    "text": "the exceptions are. So for today we're going to\nstart out by studying this",
    "start": "224755",
    "end": "235270"
  },
  {
    "text": "part of the problem in here. Namely, how do you turn a\nsource and put a general",
    "start": "235270",
    "end": "241909"
  },
  {
    "text": "source input into binary digits\nthat you're going to put into the channel. How do I study this without\nstudying that?",
    "start": "241910",
    "end": "249920"
  },
  {
    "text": "Well, one thing is these\nare binary digits here. But the other thing is we're\ngoing to assume that what",
    "start": "249920",
    "end": "257180"
  },
  {
    "text": "binary digits go in here\ncome out here. In other words, there\naren't any errors.",
    "start": "257180",
    "end": "262669"
  },
  {
    "text": "It's an error-free system. Part of the purpose of studying\nchannel encoding and channel decoding is to say how\nis it that you get that",
    "start": "262670",
    "end": "271180"
  },
  {
    "text": "error-free performance. You can't quite get error-free\nperformance, you get almost error-free performance, but the\nidea is when errors come",
    "start": "271180",
    "end": "279940"
  },
  {
    "text": "out here, it's not this guy's\nfault, it's this guy's fault. Therefore, what we're going to\nstudy here is how we do our",
    "start": "279940",
    "end": "287729"
  },
  {
    "text": "job over here. Namely, how we deal with\ndecoding, the same string of",
    "start": "287730",
    "end": "292940"
  },
  {
    "text": "bits that went into there and\ndecode them coming out. So that's where we'll be for\nthe next three weeks or so.",
    "start": "292940",
    "end": "303970"
  },
  {
    "text": "We talked a little bit last time\nabout how do you layer source coding itself.",
    "start": "303970",
    "end": "309230"
  },
  {
    "text": "I want to come back, because we\nwere talking about so many things last time, and emphasize\nwhat this means a",
    "start": "309230",
    "end": "317850"
  },
  {
    "text": "little bit. We're going to break source\ncoding up into three different layers again.",
    "start": "317850",
    "end": "323890"
  },
  {
    "text": "You start out with some kind of\ninput wave form or image or video or whatever\nthe heck it is.",
    "start": "323890",
    "end": "331850"
  },
  {
    "text": "You're going to do something\nlike sampling it or expanding it in some kind of expansion,\nand we'll talk a great deal",
    "start": "331850",
    "end": "338700"
  },
  {
    "text": "about that later. That's not an obvious thing,\nhow to do that. When you finish doing\nthat, you wind up",
    "start": "338700",
    "end": "344770"
  },
  {
    "text": "with an analog sequence. In other words, you wind up\nwith a sequence of real numbers or sequence of\ncomplex numbers.",
    "start": "344770",
    "end": "352250"
  },
  {
    "text": "Those go into a quantizer. What the quantizer does is to\nturn an uncountably infinite",
    "start": "352250",
    "end": "359070"
  },
  {
    "text": "set of things into a finite\nset of things.",
    "start": "359070",
    "end": "364130"
  },
  {
    "text": "When you turn an uncountably\ninfinite set of possibilities into a finite set of\npossibilities, you get",
    "start": "364130",
    "end": "370240"
  },
  {
    "text": "distortion. There's no way you\ncan avoid it. So that's a part of what\nhappens there. Then at this point you have a\nfinite alphabet of symbols.",
    "start": "370240",
    "end": "381590"
  },
  {
    "text": "That goes into the discrete\ncoder, goes through what we're now calling a reliable binary\nchannel and comes out here.",
    "start": "381590",
    "end": "390470"
  },
  {
    "text": "What we're going to be studying\nfor the next two weeks or so is this piece of\nthe system right in here.",
    "start": "390470",
    "end": "400669"
  },
  {
    "text": "Again, what we're going to be\ndoing is assuming a reliable binary channel to the right\nof this, which is",
    "start": "400670",
    "end": "406370"
  },
  {
    "text": "what we already assumed. We're going to assume\nthat these things do whatever they have to.",
    "start": "406370",
    "end": "411610"
  },
  {
    "text": "But this problem here, this\nisolated problem is important because this is dealing with\nthe entire problem of text,",
    "start": "411610",
    "end": "421940"
  },
  {
    "text": "and you know what text is,\nit's computer files, it's English language text, it's\nChinese text, it's whatever",
    "start": "421940",
    "end": "429630"
  },
  {
    "text": "kind of text.  If we understand how to do that,\nwe can then go on to",
    "start": "429630",
    "end": "437439"
  },
  {
    "text": "talk about quantization because\nwe'll have some idea of what we're trying to\naccomplish with quantization.",
    "start": "437440",
    "end": "442950"
  },
  {
    "text": "Without that we won't know\nwhat the purpose of quantization is. Without the quantization we\nwon't know what we're trying",
    "start": "442950",
    "end": "450400"
  },
  {
    "text": "to accomplish over here. There's another reason for\nstudying this problem, which",
    "start": "450400",
    "end": "455430"
  },
  {
    "text": "is that virtually all the ideas\nthat come into this whole bunch of things are all\ntucked into this one subject",
    "start": "455430",
    "end": "463910"
  },
  {
    "text": "in the simplest possible way. One of the nice things about\ninformation theory, which",
    "start": "463910",
    "end": "470390"
  },
  {
    "text": "we're going to touch on I said\nin this course, is that one of",
    "start": "470390",
    "end": "475600"
  },
  {
    "text": "the reasons for studying these\nsimple things first is that",
    "start": "475600",
    "end": "480880"
  },
  {
    "text": "information theory is really\nlike a symphony. You see themes coming out, those\nthemes get repeated,",
    "start": "480880",
    "end": "487150"
  },
  {
    "text": "they get repeated again with\nmore and more complexity each time, and when you understand\nthe simple idea of the theme,",
    "start": "487150",
    "end": "493690"
  },
  {
    "text": "then you understand\nwhat's going on. So, that's the other reason\nfor dealing with that.",
    "start": "493690",
    "end": "499640"
  },
  {
    "text": "To summarize those things --\nmost of this I already said. Examples of analog sources are\nvoice, music, video, images.",
    "start": "499640",
    "end": "510500"
  },
  {
    "text": "We're going to restrict this\nto just wave form sources, which is voice and music.",
    "start": "510500",
    "end": "515909"
  },
  {
    "text": "In other words, an image is\nsomething where you're mapping from two dimensions this way and\nthis way into a sequence",
    "start": "515910",
    "end": "526730"
  },
  {
    "text": "of binary digits. So it's a mapping after you\nget done sampling from r",
    "start": "526730",
    "end": "531820"
  },
  {
    "text": "square, which is this axis and\nthis axis, into your outut.",
    "start": "531820",
    "end": "538380"
  },
  {
    "text": "Namely, for each point in this\nplane, there's some real number that represents the\namplitude at that point.",
    "start": "538380",
    "end": "547250"
  },
  {
    "text": "Video is a three-dimensional\nto one-dimensional thing, namely, you have time.",
    "start": "547250",
    "end": "552820"
  },
  {
    "text": "You also have this way, you\nhave this way, so you're mapping from r cubed into r.",
    "start": "552820",
    "end": "560200"
  },
  {
    "text": "We're not going to deal with\nthose because really all the ideas are just contained\nin dealing",
    "start": "560200",
    "end": "565840"
  },
  {
    "text": "with wave form sources. In other words, the conventional\nfunctions that you're used to seeing.",
    "start": "565840",
    "end": "572140"
  },
  {
    "text": "Namely, things that you can draw\non a piece of paper and you can understand what's\ngoing on with them.",
    "start": "572140",
    "end": "577980"
  },
  {
    "text": "These are usually samples\nor expanded into series expansions almost invariably,\nand we'll",
    "start": "577980",
    "end": "584440"
  },
  {
    "text": "understand why later. That, in fact, is a major\nportion of the course.",
    "start": "584440",
    "end": "591050"
  },
  {
    "text": "That's where all of the\nstuff from signals and systems come in. We'll have to expand that a\nwhole lot because you didn't",
    "start": "591050",
    "end": "598710"
  },
  {
    "text": "learn enough there. We need a lot of other things,\nand that's what we need to",
    "start": "598710",
    "end": "605000"
  },
  {
    "text": "deal with wave forms. We'll take the sequence\nof numbers that comes out of the sampler.",
    "start": "605000",
    "end": "611670"
  },
  {
    "text": "We're then going to quantize\nthat sequence of numbers. That's the next thing we're\ngoing to study.",
    "start": "611670",
    "end": "617890"
  },
  {
    "text": "Then we're going to get into\nanalog and discrete sources, which is the topic we will\nstudy right now.",
    "start": "617890",
    "end": "626770"
  },
  {
    "text": "So we're going to study this. After we get done this, we're\ngoing to study this also. When we study this, we'll have\nwhat we know about this as a",
    "start": "626770",
    "end": "635060"
  },
  {
    "text": "way of knowing how to deal with\nthe whole problem from here out to here. Finally, we'll deal with wave\nforms and deal with the whole",
    "start": "635060",
    "end": "642130"
  },
  {
    "text": "problem from here out to here. So that's our plan.",
    "start": "642130",
    "end": "647770"
  },
  {
    "text": "In fact, this whole course is\ndevoted to studying this problem, then this problem, then\nthis problem -- that's",
    "start": "647770",
    "end": "655740"
  },
  {
    "text": "the source part of the course. Then dealing with -- if I can\nfind it again -- with the",
    "start": "655740",
    "end": "663630"
  },
  {
    "text": "various parts of this problem. So first we study sources,\nthen we study channels.",
    "start": "663630",
    "end": "669010"
  },
  {
    "text": "Because of the binary interface,\nwhen we're all done with that we understand\ndigital communication.",
    "start": "669010",
    "end": "675340"
  },
  {
    "text": "When we get towards the end of\nthe term we'll be looking at more sophisticated kinds of\nchannels than we look at",
    "start": "675340",
    "end": "681890"
  },
  {
    "text": "earlier, which are really models\nfor wireless channels. So that's where we're\ngoing to end up.",
    "start": "681890",
    "end": "688120"
  },
  {
    "text": " So discrete source coding,\nwhich is what we want",
    "start": "688120",
    "end": "693785"
  },
  {
    "text": "to deal with now. What's the objective? We're going to map a sequence\nof symbols into a binary",
    "start": "693785",
    "end": "702329"
  },
  {
    "text": "sequence and we're going to do\nit with unique decodability. I'm not going to define unique\ndecodability at this point.",
    "start": "702330",
    "end": "711220"
  },
  {
    "text": "I'm going to define it\na little bit later. But roughly what it\nmeans is this.",
    "start": "711220",
    "end": "726240"
  },
  {
    "text": "We have a sequence of symbols\nwhich come into the encoding encoder. They go through this\nbinary channel.",
    "start": "726240",
    "end": "733930"
  },
  {
    "text": "They come out as a sequence\nof binary digits. Unique decodability says if\nthis guy does his job, can",
    "start": "733930",
    "end": "742000"
  },
  {
    "text": "this guy do his job? If this guy can always do his\njob when these digits are",
    "start": "742000",
    "end": "747480"
  },
  {
    "text": "correct, then you have something\ncalled unique decodability. Namely, you can guarantee that\nwhatever comes out here,",
    "start": "747480",
    "end": "755940"
  },
  {
    "text": "whatever comes in here,\nwill turn into a sequence of binary digits.",
    "start": "755940",
    "end": "761100"
  },
  {
    "text": "That sequence of binary digits\ngoes through here. These symbols are the same\nas these symbols.",
    "start": "761100",
    "end": "768270"
  },
  {
    "text": "In other words, you are\nreproducing things error-free if, in fact, this reproduces\nthings error-free.",
    "start": "768270",
    "end": "775459"
  },
  {
    "text": "So that's our objective.  There's a very trivial approach\nto this, and I hope",
    "start": "775460",
    "end": "782600"
  },
  {
    "text": "all of you will agree\nthat this is really, in fact, trivial. You map each source\nsymbol into an",
    "start": "782600",
    "end": "789490"
  },
  {
    "text": "l-tuple of binary digits. If you have an alphabet of size\nm, how many different",
    "start": "789490",
    "end": "801800"
  },
  {
    "text": "binary strings are there\nof length l? Well, there are 2 to\nthe l of them. If l is equal to 2, you have\n0, 0, 0, 1, 1, 0, and 1, 1.",
    "start": "801800",
    "end": "812230"
  },
  {
    "text": "If l is equal to 3, you have\nstrings of 3, which is 0, 0, 0, 0, 0, 1, 0, 1, 0, blah,\nblah, blah, blah, blah.",
    "start": "812230",
    "end": "819790"
  },
  {
    "text": " What comes out to be 2 to the\n3, which is equal to 8.",
    "start": "819790",
    "end": "826050"
  },
  {
    "text": "So what we need if we're going\nto use this approach, which is the simplest possible approach,\nwhich is called the",
    "start": "826050",
    "end": "832940"
  },
  {
    "text": "fixed length approach, is you\nneed the alphabet size to be",
    "start": "832940",
    "end": "838100"
  },
  {
    "text": "less than or equal to the number\nof binary digits that you use in these strings.",
    "start": "838100",
    "end": "844839"
  },
  {
    "text": "Now, is that trivial or\nisn't it trivial? I hope it's trivial. ",
    "start": "844840",
    "end": "852480"
  },
  {
    "text": "We don't want to waste bits\nwhen we're doing this, particularly, so we don't want\nto make l any bigger than we",
    "start": "852480",
    "end": "858520"
  },
  {
    "text": "have to, because for every\nsymbol that comes in, we get l symbols coming out.",
    "start": "858520",
    "end": "863910"
  },
  {
    "text": "So we'd like to minimize l\nsubject to this constraint that 2 to the l has to\nbe bigger, greater",
    "start": "863910",
    "end": "870810"
  },
  {
    "text": "than or equal to m. So, what we want to do is we\nwant to choose l as the",
    "start": "870810",
    "end": "876420"
  },
  {
    "text": "smallest integer which\nsatisfies this. In other words, when you take\nthe logarithm to the base 2 of",
    "start": "876420",
    "end": "883160"
  },
  {
    "text": "this, you get log to the base 2\nof m has to be less than or equal to l, and l is then going\nto be less than log to",
    "start": "883160",
    "end": "891660"
  },
  {
    "text": "the base 2 of m plus 1. This is the constraint which\nsays you don't make l any",
    "start": "891660",
    "end": "898120"
  },
  {
    "text": "bigger than you have\nto make it. So in other words, we're going\nto choose l equal to the",
    "start": "898120",
    "end": "903570"
  },
  {
    "text": "ceiling function of\nlog to the base m. In other words, this is the\ninteger which is greater than",
    "start": "903570",
    "end": "911230"
  },
  {
    "text": "or equal to log to\nthe base 2 of m. So let me give you a couple\nof examples of that.",
    "start": "911230",
    "end": "918570"
  },
  {
    "text": "Excuse me for boring you with\nsomething which really is trivial, but there's notation\nhere you have to get used to.",
    "start": "918570",
    "end": "925300"
  },
  {
    "text": "You get confused with this\nbecause there's the alphabet size which we call m, there's\nthe string length which we",
    "start": "925300",
    "end": "932330"
  },
  {
    "text": "call l, and you keep getting\nmixed up between these two. Everybody gets mixed\nup between them.",
    "start": "932330",
    "end": "938550"
  },
  {
    "text": "I had a doctoral student the\nother day who got mixed up in it, and I read what she had\nwritten four times and I",
    "start": "938550",
    "end": "945740"
  },
  {
    "text": "didn't catch it either. So this does get confusing\nat times.",
    "start": "945740",
    "end": "951320"
  },
  {
    "text": "If you have an alphabet, which\nis five different kinds of the letter a --",
    "start": "951320",
    "end": "956360"
  },
  {
    "text": "that's one reason why these\nsource codes get messy, you have too many different kinds\nof each letter, which",
    "start": "956360",
    "end": "962790"
  },
  {
    "text": "technical people who like a lot\nof jargon use all of them.",
    "start": "962790",
    "end": "967870"
  },
  {
    "text": "In fact, when people start\nwriting papers and books you find many more than\nfive there.",
    "start": "967870",
    "end": "974000"
  },
  {
    "text": "In terms of Latex, you get math\ncow, you get math gold, you get math blah, blah, blah.",
    "start": "974000",
    "end": "979550"
  },
  {
    "text": "Everything in little and big. You get the Greek version. You get the Roman version and\nthe Arabic version, if you're",
    "start": "979550",
    "end": "987820"
  },
  {
    "text": "smart enough to know that\nlanguage, those languages. What we mean by code is alpha\ngets mapped into 0, 0, 0. a",
    "start": "987820",
    "end": "996520"
  },
  {
    "text": "gets mapped into 0, 0, 1. Capital A into this\nand so forth.",
    "start": "996520",
    "end": "1003220"
  },
  {
    "text": "Does it make any difference\nwhat mapping you use here?",
    "start": "1003220",
    "end": "1009009"
  },
  {
    "text": "Can you find any possible reason\nwhy it wouldn't make a difference whether I map alpha\ninto 0, 0, 0, and a into 0, 0,",
    "start": "1009010",
    "end": "1016670"
  },
  {
    "text": "1 or vice versa? I can't find any reason\nfor that.",
    "start": "1016670",
    "end": "1022399"
  },
  {
    "text": "Would it make any difference\nof instead of having this alphabet I had beta b, capital\nB, script b, and capital B",
    "start": "1022400",
    "end": "1032870"
  },
  {
    "text": "with a line over it? I can't see any reason\nwhy that would make a difference either. In other words, when we're\ntalking about fixed length",
    "start": "1032870",
    "end": "1039420"
  },
  {
    "text": "codes, there are only two\nthings of importance. One of them is how big is the\nalphabet -- that's why we talk",
    "start": "1039420",
    "end": "1046640"
  },
  {
    "text": "about alphabets all the time. After you know how big the\nalphabet is and after you know",
    "start": "1046640",
    "end": "1051980"
  },
  {
    "text": "you want to do a fixed length\nbinary encoding, then you just assign a binary string to\neach of these letters.",
    "start": "1051980",
    "end": "1062600"
  },
  {
    "text": "In other words, there's nothing important in these symbols.",
    "start": "1062600",
    "end": "1067650"
  },
  {
    "text": "This is a very important\nprinciple of information theory. It sort of underlines\nthe whole subject.",
    "start": "1067650",
    "end": "1075850"
  },
  {
    "text": "I'm not really talking about\ninformation theory here, as I said, we're talking about\ncommunication.",
    "start": "1075850",
    "end": "1080929"
  },
  {
    "text": "But communication these days is\nbuilt on these information theoretic ideas.",
    "start": "1080930",
    "end": "1086340"
  },
  {
    "text": "Symbols don't have any\ninherent meaning. As far as communication is\nconcerned, all you're",
    "start": "1086340",
    "end": "1092389"
  },
  {
    "text": "interested in is what is\nthe set of things -- I could call this a1, a2, a3,\na4, a5, and we're going to",
    "start": "1092390",
    "end": "1100100"
  },
  {
    "text": "start doing this after awhile\nbecause we will recognize that the name of the symbols don't\nmake any difference.",
    "start": "1100100",
    "end": "1107549"
  },
  {
    "text": "If you listen to a political\nspeech if it's by a Republican there are n different things\nthey might say, and you might",
    "start": "1107550",
    "end": "1114730"
  },
  {
    "text": "as well number them\na1 to a sub n. If you listen to one of the\nDemocratic candidates there",
    "start": "1114730",
    "end": "1121620"
  },
  {
    "text": "are m different things\nthey might say. You can number them 1 to m,\nand you can talk to other",
    "start": "1121620",
    "end": "1127360"
  },
  {
    "text": "people about it and say oh, he\nsaid a1 today, which is how do we get out of the war in Iraq.",
    "start": "1127360",
    "end": "1135169"
  },
  {
    "text": "Or he said number 2 today, which\nis we need more taxes or less taxes and so forth.",
    "start": "1135170",
    "end": "1141620"
  },
  {
    "text": "So it's not what they say as\nfar as communication is concerned, it's just\ndistinguishing the different",
    "start": "1141620",
    "end": "1148289"
  },
  {
    "text": "possible symbols. So, you can easily\ndecode this --",
    "start": "1148290",
    "end": "1153610"
  },
  {
    "text": "you see three bits and\nyou decode them. Can I? Is this right or is there\nsomething missing here?",
    "start": "1153610",
    "end": "1161730"
  },
  {
    "text": " Of course, there's something\nmissing. You need synchronization if\nyou're going to do this.",
    "start": "1161730",
    "end": "1168890"
  },
  {
    "text": "If I see a very long string of\nbinary digits and I'm going to decode them into these letters\nhere, I need to know where the",
    "start": "1168890",
    "end": "1176980"
  },
  {
    "text": "beginning is. In other words, if it's a\nsemi-infinite string of binary",
    "start": "1176980",
    "end": "1182659"
  },
  {
    "text": "digits, I don't know\nhow to look at it. So, inherently, we believe that\nsomebody else gives us",
    "start": "1182660",
    "end": "1190870"
  },
  {
    "text": "synchronization. This is one of these things\nwe always assume. When you start building a system\nafter you decide how to",
    "start": "1190870",
    "end": "1198139"
  },
  {
    "text": "do this kind of coding, somebody\nat some point has to go through and decide\nwhere do you get the",
    "start": "1198140",
    "end": "1203519"
  },
  {
    "text": "synchronization from. But you shouldn't think of the\nsynchronization first.",
    "start": "1203520",
    "end": "1208610"
  },
  {
    "text": "If I'm encoding 10 million\nsymbols and it takes me 1,000",
    "start": "1208610",
    "end": "1214309"
  },
  {
    "text": "bits to achieve the\nsynchronization, that 1,000 bits gets amortized over 10\nmillion different symbols, and",
    "start": "1214310",
    "end": "1221950"
  },
  {
    "text": "therefore, it doesn't make any\ndifference, and therefore, we're going to ignore it. It's an important problem\nbut we ignore it.",
    "start": "1221950",
    "end": "1231290"
  },
  {
    "text": "The ASCII code is a more\nimportant example in this. It was invented many,\nmany years ago.",
    "start": "1231290",
    "end": "1237220"
  },
  {
    "text": "It was a mapping from 256\ndifferent symbols which are all the letters, all the\nnumbers, all the things that",
    "start": "1237220",
    "end": "1244810"
  },
  {
    "text": "people used on typewriters. Anybody remember what\na typewriter is? Well, it's something people used\nto use before they had",
    "start": "1244810",
    "end": "1251289"
  },
  {
    "text": "computers, and these typewriters\nhad a lot of different keys on them and\nthey had a lot of special",
    "start": "1251290",
    "end": "1257139"
  },
  {
    "text": "things you could do with them. And somebody dreamed up 256\ndifferent things that they",
    "start": "1257140",
    "end": "1263040"
  },
  {
    "text": "might want to do. Why do they use l equals 8? Nothing to do with communication\nor with",
    "start": "1263040",
    "end": "1270020"
  },
  {
    "text": "information theory or with\nany of these things. It was that 8 is\na nice number.",
    "start": "1270020",
    "end": "1275240"
  },
  {
    "text": "It's 2 to the 3. In other words, this was a\nstandard length of both",
    "start": "1275240",
    "end": "1281640"
  },
  {
    "text": "computer words and of lots\nof other things. Everybody likes to deal with 8\nbits, which you call a byte,",
    "start": "1281640",
    "end": "1289020"
  },
  {
    "text": "rather than 7 bits which is\nsort of awkward or 6 bits which was an earlier standard,\nwhich would have been",
    "start": "1289020",
    "end": "1294600"
  },
  {
    "text": "perfectly adequate for most\nthings that people wanted. But no, they had to go\nto 8 bits because it",
    "start": "1294600",
    "end": "1301620"
  },
  {
    "text": "just sounded nicer. These codes are called\nfixed length codes.",
    "start": "1301620",
    "end": "1307820"
  },
  {
    "text": "I'd like to say more about them\nbut there really isn't much more to say about them.",
    "start": "1307820",
    "end": "1313500"
  },
  {
    "text": "There is a more general version\nof them, which we'll call generalized fixed\nlength codes.",
    "start": "1313500",
    "end": "1320820"
  },
  {
    "text": "The idea there is to segment\nthe source sequence. In other words, we're always\nvisualizing now having a",
    "start": "1320820",
    "end": "1328110"
  },
  {
    "text": "sequence of symbols\nwhich starts at time zero, runs forever.",
    "start": "1328110",
    "end": "1333640"
  },
  {
    "text": "We want to segment that into\nblocks of length n. Namely, you pick off the first\nn symbols, you find the code",
    "start": "1333640",
    "end": "1341590"
  },
  {
    "text": "word for those n symbols, then\nyou find the code word for the next n symbols, then you find\nthe code word for the next n",
    "start": "1341590",
    "end": "1348640"
  },
  {
    "text": "symbols and so forth. So it's really the\nsame problem that we looked at before.",
    "start": "1348640",
    "end": "1353860"
  },
  {
    "text": "It's just that the alphabet\nbefore had the number of symbols as the alphabet size.",
    "start": "1353860",
    "end": "1363380"
  },
  {
    "text": "Now, instead of having an\nalphabet size which is m, we're looking at blocks of m\nsymbols and how many possible",
    "start": "1363380",
    "end": "1372899"
  },
  {
    "text": "combinations are there of blocks\nwhere every symbol is one of m different things.",
    "start": "1372900",
    "end": "1378980"
  },
  {
    "text": "Well, if you have two symbols,\nthe first one can be any one of m things, the second one can\nbe any one of m things.",
    "start": "1378980",
    "end": "1385529"
  },
  {
    "text": "So there are m squared possible\ncombinations for the first two symbols, there are m\ncubed possible combinations",
    "start": "1385530",
    "end": "1392399"
  },
  {
    "text": "for the first three symbols\nand so forth. So we're going to have an\nalphabet on blocks of m to the",
    "start": "1392400",
    "end": "1399890"
  },
  {
    "text": "n different n tuples\nof source letters. Well, once you see that we're\ndone because what we're going",
    "start": "1399890",
    "end": "1407434"
  },
  {
    "text": "to do is find a binary sequence\nfor every one of these blocks of m to\nthe n symbols.",
    "start": "1407435",
    "end": "1413810"
  },
  {
    "text": "As I said before, the only\nthing important is how many are there. It doesn't matter that they're\nblocks or that they're stacked",
    "start": "1413810",
    "end": "1421660"
  },
  {
    "text": "this way or that they're stacked\naround in a circle or anything else. All you're interested in is how\nmany of them are there.",
    "start": "1421660",
    "end": "1429020"
  },
  {
    "text": "So there are m to\nthe n of them. So, what we want to do is make\nthe binary length that we're",
    "start": "1429020",
    "end": "1436480"
  },
  {
    "text": "dealing with equal to log to the\nbase 2 of m to the n, the ceiling function of that.",
    "start": "1436480",
    "end": "1443760"
  },
  {
    "text": "Which says log to the base 2 of\nm is less than or equal to",
    "start": "1443760",
    "end": "1450240"
  },
  {
    "text": "l bar where l bar is going to be\nthe bits per source symbol. I'm going to abbreviate that\nbits per source symbol.",
    "start": "1450240",
    "end": "1458100"
  },
  {
    "text": "I would like to abbreviate it\nbps, but I and everyone else",
    "start": "1458100",
    "end": "1464130"
  },
  {
    "text": "will keep thinking that bps\nmeans bits per second. We don't have to worry about\nseconds here, seconds had",
    "start": "1464130",
    "end": "1470160"
  },
  {
    "text": "nothing to do with\nthis problem. We're just dealing with\nsequences of things and we don't care how often\nthey occur.",
    "start": "1470160",
    "end": "1477460"
  },
  {
    "text": "They might just be sitting in\na computer file and we're doing them offline, so seconds\nhas nothing to",
    "start": "1477460",
    "end": "1483000"
  },
  {
    "text": "do with this problem. So, log to the base 2 of m is\nless than or equal to l over",
    "start": "1483000",
    "end": "1491789"
  },
  {
    "text": "n, which is less than log to the\nbase 2 of m plus 1 over n. In other words, we're just\ntaking this dividing it by n,",
    "start": "1491790",
    "end": "1501450"
  },
  {
    "text": "we're taking this dividing by\nn, the ceiling function is between log to the base 2 of m\nto the n, and log to the base",
    "start": "1501450",
    "end": "1508520"
  },
  {
    "text": "2 of m to the n plus 1. When we divide by n, that\n1 becomes 1 over n.",
    "start": "1508520",
    "end": "1515550"
  },
  {
    "text": "What happens when you make n\nlarge? l approaches log to the base 2 of m from above.",
    "start": "1515550",
    "end": "1522270"
  },
  {
    "text": "Therefore, fixed length coding\nrequires log to the base 2 of",
    "start": "1522270",
    "end": "1527830"
  },
  {
    "text": "n bits per source symbol\nif, in fact, you make n large enough.",
    "start": "1527830",
    "end": "1533909"
  },
  {
    "text": "In other words, for the example\nof five different kinds of a's, we had\nm equal to 5.",
    "start": "1533910",
    "end": "1541030"
  },
  {
    "text": "So if you have m equal to 5,\nthat leads to m squared equals",
    "start": "1541030",
    "end": "1552030"
  },
  {
    "text": "25, that leads to l equals --\nwhat's the ceiling function of",
    "start": "1552030",
    "end": "1563350"
  },
  {
    "text": "log of this? It's 5. l bar is equal to --\nwhat's half of 5?",
    "start": "1563350",
    "end": "1575010"
  },
  {
    "text": "2 and 1/2, yes.  As you get older you can't\ndo arithmetic anymore.",
    "start": "1575010",
    "end": "1582110"
  },
  {
    "text": "So look what we've\naccomplished. We've gone from three bits per\nsymbol down to two and and half bits per symbol,\nisn't that exciting?",
    "start": "1582110",
    "end": "1589870"
  },
  {
    "text": "Well, you look at it\nand you say no, that's not very exciting. I mean yes, you can do it, but\nmost people don't do that.",
    "start": "1589870",
    "end": "1598919"
  },
  {
    "text": "So why do we bother with this? Well, it's the same reason we\nbother with a lot of things in",
    "start": "1598920",
    "end": "1603960"
  },
  {
    "text": "this course, and the whole first\ntwo weeks of this course will be dealing with things\nwhere when you look at them",
    "start": "1603960",
    "end": "1610740"
  },
  {
    "text": "and you ask is this important,\nyou have to answer no, it's not important, it doesn't really\nhave much to do with",
    "start": "1610740",
    "end": "1617750"
  },
  {
    "text": "anything, it's a mathematical\nidea. What it does have to do with is\nthe principle involved here",
    "start": "1617750",
    "end": "1626500"
  },
  {
    "text": "is important. It says that the lower limit of\nwhat you can do with fixed coding is log to the\nbase 2 of m.",
    "start": "1626500",
    "end": "1634140"
  },
  {
    "text": "You have an alphabet of size\nm, you can get as close to this as you want to.",
    "start": "1634140",
    "end": "1639260"
  },
  {
    "text": "We will find out later that\nif you have equally likely symbols when we get to talking\nabout probability, we will",
    "start": "1639260",
    "end": "1646870"
  },
  {
    "text": "find out that nothing\nin the world can do any better than this. That's the more important thing,\nbecause what we're",
    "start": "1646870",
    "end": "1653350"
  },
  {
    "text": "eventually interested in is\nwhat's the best you can do if you do things very\ncomplicated.",
    "start": "1653350",
    "end": "1659250"
  },
  {
    "text": "Why do you want to know what\nthe best is if you do something very complicated? Because if you can do that\nsimply then you know you don't",
    "start": "1659250",
    "end": "1666450"
  },
  {
    "text": "have to look any further. So that's the important thing. Namely, it lets you do something\nsimple and know",
    "start": "1666450",
    "end": "1673960"
  },
  {
    "text": "that, in fact, what you're\ndoing makes sense.  That's why we do all of that.",
    "start": "1673960",
    "end": "1681140"
  },
  {
    "text": "But then after we say well\nthere's no place else to go on fixed length codes, we say well,\nlet's look at variable",
    "start": "1681140",
    "end": "1688559"
  },
  {
    "text": "length codes. The motivation for variable\nlength codes is that probable",
    "start": "1688560",
    "end": "1695580"
  },
  {
    "text": "symbols should probably have\nshorter code words than very",
    "start": "1695580",
    "end": "1701419"
  },
  {
    "text": "unlikely symbols. And Morse thought of this a\nlong, long time ago when Morse",
    "start": "1701420",
    "end": "1707650"
  },
  {
    "text": "code came along. Probably other people thought of\nit earlier, but he actually",
    "start": "1707650",
    "end": "1713799"
  },
  {
    "text": "developed the system\nand it worked. Everyone since then has\nunderstood that if you have a",
    "start": "1713800",
    "end": "1721880"
  },
  {
    "text": "symbol that only occurs very,\nvery, very rarely, you would",
    "start": "1721880",
    "end": "1727040"
  },
  {
    "text": "like to do something, make a\ncode word which is very long for it so it doesn't interfere\nwith other code words.",
    "start": "1727040",
    "end": "1735630"
  },
  {
    "text": "Namely, one of the things that\nyou often do when you're developing a code is think of a\nwhole bunch of things which",
    "start": "1735630",
    "end": "1741710"
  },
  {
    "text": "are sort of exceptions. They hardly ever happen. You use the fixed length code\nfor all the things that happen",
    "start": "1741710",
    "end": "1748450"
  },
  {
    "text": "all the time, and you make one\nextra code word for all these exceptions.",
    "start": "1748450",
    "end": "1755110"
  },
  {
    "text": "Then you have this exception and\npaste it on at the end of the exception is a number\nwhich represents which",
    "start": "1755110",
    "end": "1762670"
  },
  {
    "text": "exception you're looking at. Presto, you have a variable\nlength code.",
    "start": "1762670",
    "end": "1767710"
  },
  {
    "text": "Namely, you have two different\npossible code lengths -- one of them for all of the likely\nthings and the indication that",
    "start": "1767710",
    "end": "1774780"
  },
  {
    "text": "there is an exception, and two,\nall the unlikely things. There's an important\nfeature there.",
    "start": "1774780",
    "end": "1781630"
  },
  {
    "text": "You can't drop out having\nthe code word saying this is an exception. If you just have a bunch of\nshort code words and a bunch",
    "start": "1781630",
    "end": "1788950"
  },
  {
    "text": "of long code words, then you see\na short code word and you don't know -- well, if you see\na long code word starting or",
    "start": "1788950",
    "end": "1797530"
  },
  {
    "text": "you have a short code word, you\ndon't know which it is and you're stuck. So one example of a variable\nlength code -- we'll use some",
    "start": "1797530",
    "end": "1807040"
  },
  {
    "text": "jargon here. We'll call the code\na script c.",
    "start": "1807040",
    "end": "1814700"
  },
  {
    "text": "We'll think of script c as a\nmapping which goes from the symbols onto binary strings.",
    "start": "1814700",
    "end": "1821620"
  },
  {
    "text": "In other words, c of x is the\ncode word corresponding to the symbol x.",
    "start": "1821620",
    "end": "1827600"
  },
  {
    "text": "So for each x in the alphabet,\ncapital X, and we have to",
    "start": "1827600",
    "end": "1833390"
  },
  {
    "text": "think of what the\ncapital X is. But as we say, the only thing\nwe're really interested in is",
    "start": "1833390",
    "end": "1839030"
  },
  {
    "text": "how big is this alphabet -- that's the only thing\nof importance. So if we have an alphabet which\nconsists of the three",
    "start": "1839030",
    "end": "1846540"
  },
  {
    "text": "letters a, b and c, we might\nmake a code where the code word for a is equal to zero, the\ncode word for b is equal",
    "start": "1846540",
    "end": "1854840"
  },
  {
    "text": "to 1, zero, and the code word\nfor c is equal to 1,1. Now it turns out that's\na perfectly fine",
    "start": "1854840",
    "end": "1861310"
  },
  {
    "text": "code and that works. Let me show you another\nexample of a code.",
    "start": "1861310",
    "end": "1866380"
  },
  {
    "text": " Let me just show you an example\nof a code here so we",
    "start": "1866380",
    "end": "1874560"
  },
  {
    "text": "can see that not everything\nworks. Suppose c of a is zero, c of b\nis 1, and c of c is -- this is",
    "start": "1874560",
    "end": "1890210"
  },
  {
    "text": "a script c, that's a little\nc -- is 1, zero.",
    "start": "1890210",
    "end": "1895799"
  },
  {
    "text": "Does that work?  Well, all of the symbols have\ndifferent code words, but this",
    "start": "1895800",
    "end": "1904800"
  },
  {
    "text": "is an incredibly stupid\nthing to do. It's an incredibly stupid thing\nto do because if I send",
    "start": "1904800",
    "end": "1912880"
  },
  {
    "text": "a b followed by an a, what the\npoor decoder sees is 1",
    "start": "1912880",
    "end": "1919110"
  },
  {
    "text": "followed by zero. In other words, one of the\nthings that I didn't tell you about is when we're using\nvariable length codes we're",
    "start": "1919110",
    "end": "1927610"
  },
  {
    "text": "just concatenating all of these\ncode words together. We don't put any spaces\nbetween them.",
    "start": "1927610",
    "end": "1933009"
  },
  {
    "text": "We don't put any commas\nbetween them. If, in fact, I put a space\nbetween them, I would really",
    "start": "1933010",
    "end": "1938570"
  },
  {
    "text": "have not a binary alphabet\nbut a ternary alphabet. I would have zeros and I would\nhave 1's and I would have",
    "start": "1938570",
    "end": "1945180"
  },
  {
    "text": "spaces, and you don't\nlike to do that because it's much harder. When we start to study channels\nwe'll see that",
    "start": "1945180",
    "end": "1951590"
  },
  {
    "text": "ternary alphabets are much more\ndifficult to work with than binary alphabets.",
    "start": "1951590",
    "end": "1956660"
  },
  {
    "text": "So this doesn't work,\nthis does work. Part of what we're going to be\ninterested in is what are the",
    "start": "1956660",
    "end": "1964940"
  },
  {
    "text": "conditions under why\nthis works and why this doesn't work.",
    "start": "1964940",
    "end": "1971650"
  },
  {
    "text": "Again, when you understand this\nproblem you will say it's very simple, and then you come\nback to look at it again and",
    "start": "1971650",
    "end": "1979570"
  },
  {
    "text": "you'll say it's complicated\nand then it looks simple. It's one of these problems that\nlooks simple when you",
    "start": "1979570",
    "end": "1985470"
  },
  {
    "text": "look at it in the right way, and\nit looks complicated when you get turned around and you\nlook at it backwards.",
    "start": "1985470",
    "end": "1994140"
  },
  {
    "text": "So the success of code words of\na variable length code are",
    "start": "1994140",
    "end": "1999330"
  },
  {
    "text": "all transmitted just as a\ncontinuing sequence of bits. You don't have any of these\ncommas or spaces in them.",
    "start": "1999330",
    "end": "2006080"
  },
  {
    "text": "If I have a sequence of symbols\nwhich come into the encoder, those get mapped into\na sequence of bits, variable",
    "start": "2006080",
    "end": "2013480"
  },
  {
    "text": "length sequences of bits\nwhich come out. They all get pushed together\nand just come out",
    "start": "2013480",
    "end": "2020020"
  },
  {
    "text": "one after the other. Buffering can be a problem here,\nbecause when you have a",
    "start": "2020020",
    "end": "2025490"
  },
  {
    "text": "variable length code -- I mean look at what\nhappens here.",
    "start": "2025490",
    "end": "2031640"
  },
  {
    "text": "If I've got a very long string\nof a's coming in, I got a very short string of bits\ncoming out.",
    "start": "2031640",
    "end": "2037480"
  },
  {
    "text": "If I have a long string of b's\nand c's coming in, I have a very long string of\nbits coming out.",
    "start": "2037480",
    "end": "2043330"
  },
  {
    "text": "Now usually the way the channels\nwork is that you put in bits at a fixed\nrate in time.",
    "start": "2043330",
    "end": "2050510"
  },
  {
    "text": "Usually the way that sources\nwork is that symbols arrive at a fixed rate in time.",
    "start": "2050510",
    "end": "2057030"
  },
  {
    "text": "Therefore, here, if symbols are\ncoming in at a fixed rate in time, they're going out at\na non-fixed rate in time.",
    "start": "2057030",
    "end": "2065000"
  },
  {
    "text": "We have to bring them into a\nchannel at a fixed rate in time, so we need a buffer to\ntake care of the difference",
    "start": "2065000",
    "end": "2071990"
  },
  {
    "text": "between the rate at which they\ncome out and the rate at which they go in. We will talk about that problem\nlater, but for now we",
    "start": "2071990",
    "end": "2079879"
  },
  {
    "text": "just say OK, we have\na buffer, we'll put them all in a buffer. If the buffer ever empties out\n-- well, that's sort of like",
    "start": "2079880",
    "end": "2086510"
  },
  {
    "text": "the problem of initial\nsynchronization. It's something that doesn't\nhappen very often, and we'll",
    "start": "2086510",
    "end": "2092119"
  },
  {
    "text": "put some junior engineer on\nthat because it's a hard problem, and seeing your\nengineers never deal with the",
    "start": "2092120",
    "end": "2097280"
  },
  {
    "text": "hard problems, they always\ngive those to the junior engineers so that they can\nassert their superiority over",
    "start": "2097280",
    "end": "2103430"
  },
  {
    "text": "the junior engineers. It's a standard thing you\nfind in the industry. ",
    "start": "2103430",
    "end": "2112810"
  },
  {
    "text": "We also require unique\ndecodability. Namely, the encoded bit stream\nhas to be uniquely deparsed at",
    "start": "2112810",
    "end": "2121289"
  },
  {
    "text": "the decoder. I have to have some way of\ntaking that long string of bits and figuring out where the\ncommas would have gone if",
    "start": "2121290",
    "end": "2128990"
  },
  {
    "text": "I put commas in it. Then from that I have\nto decode things. In other words, it means that\nevery symbol in the alphabet",
    "start": "2128990",
    "end": "2138970"
  },
  {
    "text": "has to have a distinct code\nword connected with it. We have that here.",
    "start": "2138970",
    "end": "2145039"
  },
  {
    "text": "We have that here. Every symbol has a distinct\ncode word. But it has to be\nmore than that.",
    "start": "2145040",
    "end": "2152060"
  },
  {
    "text": "I'm not even going to talk about\nprecisely what that more means for a little bit.",
    "start": "2152060",
    "end": "2159089"
  },
  {
    "text": "We also assume to make life easy\nfor the decoder that it has initial synchronization.",
    "start": "2159090",
    "end": "2166200"
  },
  {
    "text": "There's another obvious\nproperty that we have. Namely, both the encoder and the\ndecoder know what the code",
    "start": "2166200",
    "end": "2173980"
  },
  {
    "text": "is to start with. In other words, the code is\nbuilt into these devices. When you design a coder and a\ndecoder, what you're doing is",
    "start": "2173980",
    "end": "2183320"
  },
  {
    "text": "you figure out what an\nappropriate code should be, you give it to both the encoder\nand the decoder, both",
    "start": "2183320",
    "end": "2190609"
  },
  {
    "text": "of them know what the code is\nand therefore, both of them can start decoding. A piece of confusion.",
    "start": "2190610",
    "end": "2198619"
  },
  {
    "text": "We have an alphabet here which\nhas a list of symbols in it. So there's a symbol a1,\na2, a3, up to a sub m.",
    "start": "2198620",
    "end": "2208540"
  },
  {
    "text": "We're sending a sequence of\nsymbols, and we usually call the sequence of symbols we're\nsending x1, x2, x3,",
    "start": "2208540",
    "end": "2215990"
  },
  {
    "text": "x4, x5 and so forth. The difference is the symbols\nin the alphabet are all",
    "start": "2215990",
    "end": "2223490"
  },
  {
    "text": "distinct, we're listing them\none after the other. Usually there's a finite\nnumber of them. Incidentally, we could have a\ncountable number of symbols.",
    "start": "2223490",
    "end": "2231680"
  },
  {
    "text": "You could try to do everything\nwe're doing here say with the",
    "start": "2231680",
    "end": "2237880"
  },
  {
    "text": "integers, and there's a\ncountable number of integers. All of this theory pretty much\ncarries through with various",
    "start": "2237880",
    "end": "2244710"
  },
  {
    "text": "little complications. We're leaving that out here\nbecause after you understand",
    "start": "2244710",
    "end": "2250350"
  },
  {
    "text": "what we're doing, making\nit apply to integers is straightforward. Putting in the integers to start\nwith, you'll always be",
    "start": "2250350",
    "end": "2257590"
  },
  {
    "text": "fussing about various silly\nlittle special cases, and I don't know a single situation\nwhere anybody deals with a",
    "start": "2257590",
    "end": "2264975"
  },
  {
    "text": "countable alphabet, except\nby truncating it. When you truncate an infinite\nalphabet you",
    "start": "2264975",
    "end": "2272130"
  },
  {
    "text": "get a finite alphabet. So, we'll assume initial\nsynchronization, we'll also",
    "start": "2272130",
    "end": "2277680"
  },
  {
    "text": "assume that there's\na finite alphabet. You should always make sure that\nyou know whether you're",
    "start": "2277680",
    "end": "2284339"
  },
  {
    "text": "talking about a listing of the\nsymbols in the alphabet or a listing of the symbols\nin a sequence.",
    "start": "2284340",
    "end": "2290470"
  },
  {
    "text": "The symbols in a sequence can\nall be the same, they can all be different. They can be anything at all.",
    "start": "2290470",
    "end": "2297619"
  },
  {
    "text": "The listing of symbols in the\nalphabet, there's just one for each symbol.",
    "start": "2297620",
    "end": "2303230"
  },
  {
    "text": "We're going to talk about a very\nsimple case of uniquely decodable codes which are called\nprefix-free codes.",
    "start": "2303230",
    "end": "2311329"
  },
  {
    "text": "A code is prefix-free if no code\nword is a prefix of any other code word.",
    "start": "2311330",
    "end": "2317000"
  },
  {
    "text": "In other words, a code word is\na string of binary digits. A prefix of a string\nof binary digits.",
    "start": "2317000",
    "end": "2324710"
  },
  {
    "text": " For example, if we have the\nbinary string 1, 0, 1, 1, 1.",
    "start": "2324710",
    "end": "2333070"
  },
  {
    "text": "What are the prefixes of that? Well, one prefix\nis 1, 0, 1, 1.",
    "start": "2333070",
    "end": "2346790"
  },
  {
    "text": "Another one is 1, 0, 1. Another one is 1, 0.",
    "start": "2346790",
    "end": "2351900"
  },
  {
    "text": "Another is 1. In other words, it's what you\nget by starting out at the",
    "start": "2351900",
    "end": "2356940"
  },
  {
    "text": "beginning and not quite\ngetting to the end. All of these things are\ncalled prefixes.",
    "start": "2356940",
    "end": "2362620"
  },
  {
    "text": "If you want to be general you\ncould call 1, 0, 1, 1, 1, a prefix of itself.",
    "start": "2362620",
    "end": "2368130"
  },
  {
    "text": "We won't bother to do that\nbecause it just is -- that's the kind of things that\nmathematicians do to save a",
    "start": "2368130",
    "end": "2373180"
  },
  {
    "text": "few words in the proofs\nthat they give and we won't bother with that. We will rely a little more\non common sense.",
    "start": "2373180",
    "end": "2381390"
  },
  {
    "text": "Incidentally, I prove a lot of\nthings in these notes here.",
    "start": "2381390",
    "end": "2388660"
  },
  {
    "text": "I will ask you to prove\na lot of things. One of the questions that people\nalways have is what",
    "start": "2388660",
    "end": "2397780"
  },
  {
    "text": "does a proof really mean? I mean what is a proof and\nwhat isn't a proof? When you take mathematics\ncourses you get one idea of",
    "start": "2397780",
    "end": "2406540"
  },
  {
    "text": "what a proof is, which\nis appropriate for mathematics courses. Namely, you prove things using\nthe correct terminology for",
    "start": "2406540",
    "end": "2414860"
  },
  {
    "text": "proving them. Namely, everything that you deal\nwith you define it ahead of time so that all of the\nterminology you're using all",
    "start": "2414860",
    "end": "2424470"
  },
  {
    "text": "has correct definitions. Then everything should follow\nfrom those definitions and you",
    "start": "2424470",
    "end": "2430930"
  },
  {
    "text": "should be able to follow a\nproof through without any insight at all about\nwhat is going on.",
    "start": "2430930",
    "end": "2437220"
  },
  {
    "text": "You should be able to follow\na mathematical proof step-by-step without knowing\nanything about what this is",
    "start": "2437220",
    "end": "2443600"
  },
  {
    "text": "going to be used for, why\nanybody is interested in it or anything else, and that's an\nimportant thing to learn.",
    "start": "2443600",
    "end": "2450230"
  },
  {
    "text": "That's not what we're\ninterested in here. What we're interested in\nhere for a proof -- I mean yes, you know all of\nthe things around this",
    "start": "2450230",
    "end": "2459119"
  },
  {
    "text": "particular proof that we're\ndealing with, and what you're trying to do is to construct\na proof that covers",
    "start": "2459120",
    "end": "2465280"
  },
  {
    "text": "all possible cases. You're going to use insight for\nthat, you're going to use common sense, you're going to\nuse whatever you have to use.",
    "start": "2465280",
    "end": "2475320"
  },
  {
    "text": "And eventually you start to get\nsome sort of second sense",
    "start": "2475320",
    "end": "2481350"
  },
  {
    "text": "about when you're leaving\nsomething out that really should be there. That's what we're going to be\nfocusing on when we worry",
    "start": "2481350",
    "end": "2488410"
  },
  {
    "text": "about trying to be\nprecise here. When I start proving things\nabout prefix codes, I think",
    "start": "2488410",
    "end": "2494210"
  },
  {
    "text": "you'll see this because you will\nlook at it and say that's not a proof, and, in fact,\nit really is a proof.",
    "start": "2494210",
    "end": "2501770"
  },
  {
    "text": "Any good mathematician would\nlook at it and say yes, that is a proof. Bad mathematicians sometimes\nlook at it and say well, it",
    "start": "2501770",
    "end": "2508369"
  },
  {
    "text": "doesn't look like proof so\nit can't be a proof. But they are.",
    "start": "2508370",
    "end": "2513990"
  },
  {
    "text": "So here we have prefix-free\ncodes. The definition is no code\nword is a prefix of",
    "start": "2513990",
    "end": "2519360"
  },
  {
    "text": "any other code word. If you have a prefix-free code,\nyou can express it in",
    "start": "2519360",
    "end": "2524510"
  },
  {
    "text": "terms of a binary tree. Now a binary tree starts at a\nroot, this is the beginning,",
    "start": "2524510",
    "end": "2530570"
  },
  {
    "text": "moves off to the right -- you\nmight have it start at the bottom and move up or whatever\ndirection you want to go in,",
    "start": "2530570",
    "end": "2536820"
  },
  {
    "text": "it doesn't make any\ndifference. If you take the zero path\nyou come to some leaf.",
    "start": "2536820",
    "end": "2543430"
  },
  {
    "text": "If you take the one path\nyou come to some intermediate node here.",
    "start": "2543430",
    "end": "2548760"
  },
  {
    "text": "From the intermediate\nnode, you either go up or you go down. Namely, you have\na 1 or a zero.",
    "start": "2548760",
    "end": "2555540"
  },
  {
    "text": "From this intermediate node\nyou go up and you go down. In other words, a binary tree,\nevery node in it is either an",
    "start": "2555540",
    "end": "2562740"
  },
  {
    "text": "intermediate node, which means\nthere are two branches going out from it, or it's a leaf\nwhich means there aren't any",
    "start": "2562740",
    "end": "2570330"
  },
  {
    "text": "branches going out from it. You can't, in a binary tree,\nhave just one branch coming",
    "start": "2570330",
    "end": "2576480"
  },
  {
    "text": "out of a node. There are either no branches\nor two branches, just by definition of what we mean\nby a binary tree --",
    "start": "2576480",
    "end": "2584589"
  },
  {
    "text": "binary says two. So, here this tree corresponds\nwhere we label",
    "start": "2584590",
    "end": "2593319"
  },
  {
    "text": "various ones of the leafs. It corresponds to the code where\na corresponds to the",
    "start": "2593320",
    "end": "2602000"
  },
  {
    "text": "string zero, b corresponds\nto the string 1, 1, and c",
    "start": "2602000",
    "end": "2607930"
  },
  {
    "text": "corresponds to the\nstring 1, 0, 1. Now you look at this and when\nyou look at the tree, when you",
    "start": "2607930",
    "end": "2615460"
  },
  {
    "text": "look at this as a\ncode, it's not. Obvious that it's something\nreally stupid about it.",
    "start": "2615460",
    "end": "2621650"
  },
  {
    "text": "When you look at the tree,\nit's pretty obvious that there's something stupid about\nit, because here we have this",
    "start": "2621650",
    "end": "2629840"
  },
  {
    "text": "c here, which is sitting off on\nthis leaf, and here we have",
    "start": "2629840",
    "end": "2635460"
  },
  {
    "text": "this leaf here which isn't doing\nanything for us at all. We say gee, we could still keep\nthis prefix condition if",
    "start": "2635460",
    "end": "2643690"
  },
  {
    "text": "we moved this into here\nand we drop this off.",
    "start": "2643690",
    "end": "2649030"
  },
  {
    "text": " So any time that there's\nsomething hanging here without",
    "start": "2649030",
    "end": "2655790"
  },
  {
    "text": "corresponding to a symbol,\nyou would really like to shorten it.",
    "start": "2655790",
    "end": "2661050"
  },
  {
    "text": "When you shorten these things\nand you can't shorten anything else, namely, when every leaf\nhas a symbol on it you call it",
    "start": "2661050",
    "end": "2667430"
  },
  {
    "text": "a full tree. So a full tree is more than a\ntree, a full tree is a code",
    "start": "2667430",
    "end": "2672680"
  },
  {
    "text": "tree where the leaves correspond\nto symbols. So a full tree has\nno empty leaves.",
    "start": "2672680",
    "end": "2679770"
  },
  {
    "text": "Empty leaves can be shortened\njust like I showed you here, so we'll talk about full trees,\nand full trees are sort",
    "start": "2679770",
    "end": "2686920"
  },
  {
    "text": "of the good trees. But prefix-free codes don't\nnecessarily have to worry",
    "start": "2686920",
    "end": "2693119"
  },
  {
    "text": "about that. Well, now I'm going to prove\nsomething to you, and at this",
    "start": "2693120",
    "end": "2700869"
  },
  {
    "text": "point you really should object,\nbut I don't care. We will come back\nand you'll get",
    "start": "2700870",
    "end": "2706320"
  },
  {
    "text": "straightened out on it later. I'm going to prove that\nprefix-free codes are uniquely decodable, and you should cry\nfoul because I really haven't",
    "start": "2706320",
    "end": "2716230"
  },
  {
    "text": "defined what uniquely\ndecodable means yet. ",
    "start": "2716230",
    "end": "2721290"
  },
  {
    "text": "You think you know what uniquely\ndecodable means, which is good. It means physically that you can\nlook at a string of code",
    "start": "2721290",
    "end": "2728120"
  },
  {
    "text": "words and you can pick out\nwhat all of them are. We will define it later\nand you'll find out",
    "start": "2728120",
    "end": "2734609"
  },
  {
    "text": "it's not that simple. As we move on, when we start\ntalking about Lempel Ziv codes",
    "start": "2734610",
    "end": "2740310"
  },
  {
    "text": "and things like that. You will start to really\nwonder what uniquely decodable means.",
    "start": "2740310",
    "end": "2746109"
  },
  {
    "text": "So it's not quite as\nsimple as it looks. But anyway, let's prove that\nprefix-free codes are uniquely",
    "start": "2746110",
    "end": "2752640"
  },
  {
    "text": "decodable anyway, because\nprefix-free codes are a particularly simple example of\nuniquely decodable codes, and",
    "start": "2752640",
    "end": "2760810"
  },
  {
    "text": "it's sort of clear that you\ncan, in fact, decode them because of one of the properties\nthat they have.",
    "start": "2760810",
    "end": "2768230"
  },
  {
    "text": "The way we're going to prove\nthis is we want to look at a sequence of symbols or a string\nof symbols that come",
    "start": "2768230",
    "end": "2775710"
  },
  {
    "text": "out of the source. As that string of symbols come\nout of the source, each symbol",
    "start": "2775710",
    "end": "2783110"
  },
  {
    "text": "in the string gets mapped into\na binary string, and then we",
    "start": "2783110",
    "end": "2789080"
  },
  {
    "text": "concatenate all those binary\nstrings together. That's a big mouthful.",
    "start": "2789080",
    "end": "2794180"
  },
  {
    "text": "So let's look at this code we\nwere just talking about where",
    "start": "2794180",
    "end": "2799599"
  },
  {
    "text": "the code words are b, c and a.",
    "start": "2799600",
    "end": "2805010"
  },
  {
    "text": "So if a 1 comes out of the\nsource and then another 1, it",
    "start": "2805010",
    "end": "2810060"
  },
  {
    "text": "corresponds to the\nfirst letter b. If a 1, zero comes out,\nit corresponds to the first letter c.",
    "start": "2810060",
    "end": "2816410"
  },
  {
    "text": "If a zero comes out, that\ncorresponds to the letter a. Well now the second symbol comes\nin and what happens on",
    "start": "2816410",
    "end": "2824540"
  },
  {
    "text": "that second symbol is if the\nfirst symbol was an a, the second symbol could be a b or a\nc or an a, which gives rise",
    "start": "2824540",
    "end": "2834150"
  },
  {
    "text": "to this little sub-tree here.  If the first letter is a b,\nthe second letter could be",
    "start": "2834150",
    "end": "2842700"
  },
  {
    "text": "either an a, b or a c, which\ngives rise to this little sub-tree here.",
    "start": "2842700",
    "end": "2849030"
  },
  {
    "text": "If we have a c followed by\nanything, that gives rise to this little sub-tree here.",
    "start": "2849030",
    "end": "2856300"
  },
  {
    "text": "You can imagine growing this\ntree as far as you want to, although it gets hard\nto write down.",
    "start": "2856300",
    "end": "2862950"
  },
  {
    "text": "How do you decode this? Well, as many things, you want\nto start at the beginning, and",
    "start": "2862950",
    "end": "2870290"
  },
  {
    "text": "we know where the\nbeginning is. That's a basic assumption on\nall of this source coding.",
    "start": "2870290",
    "end": "2876260"
  },
  {
    "text": "So knowing where the beginning\nis, you sit there and you look at it, and you see a zero as\nthe first letter as a first",
    "start": "2876260",
    "end": "2884050"
  },
  {
    "text": "binary digit, and zero says I\nmove this way in the tree, and",
    "start": "2884050",
    "end": "2889690"
  },
  {
    "text": "presto, I say gee, an a must\nhave occurred as the first",
    "start": "2889690",
    "end": "2895440"
  },
  {
    "text": "source letter. So what do I do? I remove the a, I print out a,\nand then I start to look at",
    "start": "2895440",
    "end": "2903900"
  },
  {
    "text": "this point. At this point I'm back where I\nstarted at, so if I can decode",
    "start": "2903900",
    "end": "2909730"
  },
  {
    "text": "the first letter,\nI can certainly decode everything else. If the first letter is a\nb, what I see is a 1",
    "start": "2909730",
    "end": "2917000"
  },
  {
    "text": "followed by a 1. Namely, when I see the first\nbinary 1 come out of the",
    "start": "2917000",
    "end": "2923839"
  },
  {
    "text": "channel, I don't know\nwhat was said. I know either a b\nor c was sent.",
    "start": "2923840",
    "end": "2928940"
  },
  {
    "text": "I have to look at the second\nletter, the second binary digit resolves my confusion.",
    "start": "2928940",
    "end": "2935230"
  },
  {
    "text": "I know that the first source\nletter was in a b, if it's 1 1, or a c, if it's 1 zero.",
    "start": "2935230",
    "end": "2941940"
  },
  {
    "text": "I decode that first source\nletter and then where am I? I'm either on this tree or on\nthis tree, each of which goes",
    "start": "2941940",
    "end": "2949610"
  },
  {
    "text": "extending off into the\nwild blue yonder. So this says if I know where the\nbeginning is, I can decode",
    "start": "2949610",
    "end": "2958410"
  },
  {
    "text": "the first letter. But if I can decode the first\nletter, I know where the",
    "start": "2958410",
    "end": "2963510"
  },
  {
    "text": "beginning is for everything\nelse. Therefore, I can decode\nthat also.",
    "start": "2963510",
    "end": "2970570"
  },
  {
    "text": "Well, aside from any small\namount of confusion about what uniquely decodable means,\nthat's a perfectly fine",
    "start": "2970570",
    "end": "2976540"
  },
  {
    "text": "mathematical proof. So, prefix-free codes are, in\nfact, uniquely decodable and",
    "start": "2976540",
    "end": "2985010"
  },
  {
    "text": "that's nice. So then there's a question. ",
    "start": "2985010",
    "end": "2991670"
  },
  {
    "text": "What is the condition on the\nlengths of a prefix-free code",
    "start": "2991670",
    "end": "3001290"
  },
  {
    "text": "which allow you to have\nunique decodability?  The Kraft inequality is a test\non whether there are",
    "start": "3001290",
    "end": "3011650"
  },
  {
    "text": "prefix-free codes or there\nare not prefix-free codes",
    "start": "3011650",
    "end": "3016849"
  },
  {
    "text": "connected with any given set\na code word lengths. This is a very interesting\nenough inequality.",
    "start": "3016850",
    "end": "3023890"
  },
  {
    "text": "This is one of the relatively\nfew things in information theory that was not invented\nby Claude Shannon.",
    "start": "3023890",
    "end": "3030780"
  },
  {
    "text": "You sit there and you wonder\nwhy didn't Claude Shannon realize this? Well, it's because I\nthink he sort of",
    "start": "3030780",
    "end": "3038820"
  },
  {
    "text": "realized that it was trivial. He sort of understood it and he\nwas really eager to get on",
    "start": "3038820",
    "end": "3044030"
  },
  {
    "text": "to the meat of things, which is\nunusual for him because he was somebody, more than anyone\nelse I know, who really",
    "start": "3044030",
    "end": "3052140"
  },
  {
    "text": "understood why you should\nunderstand the simple things before you go on to the more\ncomplicated thing.",
    "start": "3052140",
    "end": "3057660"
  },
  {
    "text": "But anyway, he missed this. Bob Fano, who some of you\nmight know, who was a",
    "start": "3057660",
    "end": "3062930"
  },
  {
    "text": "professor emeritus over in\nLCS, was interested in",
    "start": "3062930",
    "end": "3068280"
  },
  {
    "text": "information theory. Then he was teaching a graduate\ncourse back in the '50s here at MIT, and as he\noften did, he threw out these",
    "start": "3068280",
    "end": "3078280"
  },
  {
    "text": "problems and said nobody knows\nhow to figure this out. How kinds of lengths can you\nhave on prefix-free codes, and",
    "start": "3078280",
    "end": "3085650"
  },
  {
    "text": "what kinds of lengths\ncan't you have? Kraft was a graduate student\nat the time.",
    "start": "3085650",
    "end": "3091880"
  },
  {
    "text": "The next day he came in with\nthis beautiful, elegant proof and everybody's always known who\nKraft is ever since then.",
    "start": "3091880",
    "end": "3100850"
  },
  {
    "text": "Nobody's ever known what\nhe did after that. But at least he made his\nmark on the world",
    "start": "3100850",
    "end": "3106200"
  },
  {
    "text": "as a graduate student. So, in a sense, those were\ngood days to be around,",
    "start": "3106200",
    "end": "3113500"
  },
  {
    "text": "because all the obvious things\nhadn't been done yet.",
    "start": "3113500",
    "end": "3118670"
  },
  {
    "text": "But the other thing is you never\nknow what the obvious things are until you do them.",
    "start": "3118670",
    "end": "3124059"
  },
  {
    "text": "This didn't look like an obvious\nproblem ahead of time. Don't talk about a number of\nother obvious things that cuts",
    "start": "3124060",
    "end": "3129520"
  },
  {
    "text": "off, because somebody was\nlooking at it in a slightly different way than other people\nwere looking at it.",
    "start": "3129520",
    "end": "3135340"
  },
  {
    "text": "You see, back then people said\nwe want to look at these variable length codes because\nwe want to have some",
    "start": "3135340",
    "end": "3144369"
  },
  {
    "text": "capability of mapping improbable\nsymbols into long code words and probable symbols\ninto short code words.",
    "start": "3144370",
    "end": "3153819"
  },
  {
    "text": "You'll notice that I've done\nsomething strange here. That was our motivation for\nlooking at variable length",
    "start": "3153820",
    "end": "3159359"
  },
  {
    "text": "codes, but I haven't said a\nthing about probability. All I'm dealing with now is\nthe question of what is",
    "start": "3159360",
    "end": "3166530"
  },
  {
    "text": "possible and what\nis not possible. We'll bring in probability\nlater, but now all we're",
    "start": "3166530",
    "end": "3172770"
  },
  {
    "text": "trying to figure out is what\nare the sets of code word lengths you can use, and what\nare the sets of code word",
    "start": "3172770",
    "end": "3178580"
  },
  {
    "text": "lengths you can't use. So what Kraft said is every\nprefix-free code for an",
    "start": "3178580",
    "end": "3184530"
  },
  {
    "text": "alphabet x with code word\nlengths l of x for each letter",
    "start": "3184530",
    "end": "3190090"
  },
  {
    "text": "in the alphabet x satisfies the\nsum 2 to the minus length",
    "start": "3190090",
    "end": "3195950"
  },
  {
    "text": "less than or equal to 1. In other words, you take all\nof the code words in the",
    "start": "3195950",
    "end": "3201050"
  },
  {
    "text": "alphabet, you take the length\nof each of those code words,",
    "start": "3201050",
    "end": "3206640"
  },
  {
    "text": "you take 2 to the minus\nl of that length. And if this inequality is not\nsatisfied, your code does not",
    "start": "3206640",
    "end": "3215950"
  },
  {
    "text": "satisfy the prefix condition,\nthere's no way you can create a prefix-free code which\nhas these lengths, so",
    "start": "3215950",
    "end": "3226279"
  },
  {
    "text": "you're out of luck. So you better create a new set\nof lengths which satisfies this inequality.",
    "start": "3226280",
    "end": "3231720"
  },
  {
    "text": "There's also a simple procedure\nyou can go through which lets you construct a code\nwhich has these lengths.",
    "start": "3231720",
    "end": "3238349"
  },
  {
    "text": "So, in other words, this, in\na sense, is a necessary and sufficient condition on the\npossibility of constructing",
    "start": "3238350",
    "end": "3245600"
  },
  {
    "text": "codes with a particular\nset of lengths. It has nothing to do\nwith probability.",
    "start": "3245600",
    "end": "3251600"
  },
  {
    "text": "So it's, in a sense, cleaner\nthan these other results. ",
    "start": "3251600",
    "end": "3258500"
  },
  {
    "text": "So, conversely, if this\ninequality is satisfied, you can construct a prefix-free\ncode, and even more strangely,",
    "start": "3258500",
    "end": "3265850"
  },
  {
    "text": "you can construct it very, very\neasily, as we'll see. Finally, a prefix-free code is\nfull -- you remember what a",
    "start": "3265850",
    "end": "3272920"
  },
  {
    "text": "full prefix-free code is? It's a code where the tree has\nnothing that's unused if and",
    "start": "3272920",
    "end": "3279180"
  },
  {
    "text": "only if this inequality is\nsatisfied with a quality. So it's a neat result.",
    "start": "3279180",
    "end": "3287250"
  },
  {
    "text": "It's useful in a lot of places\nother than source coding.",
    "start": "3287250",
    "end": "3292520"
  },
  {
    "text": "If you ever get involved with\ndesigning protocols for computer networks or protocols\nfor any kind of computer",
    "start": "3292520",
    "end": "3299500"
  },
  {
    "text": "communication, you'll find\nthat you use this all the time, because this says you can\ndo some things, you can't",
    "start": "3299500",
    "end": "3306320"
  },
  {
    "text": "do other things. So let's see why it's true.",
    "start": "3306320",
    "end": "3311590"
  },
  {
    "text": "I'll give you another funny\nproof that doesn't look like a proof but it really is.",
    "start": "3311590",
    "end": "3317090"
  },
  {
    "text": "What I'm going to do is to\nassociate code words with base",
    "start": "3317090",
    "end": "3322680"
  },
  {
    "text": "2 expansions.  There's a little Genie that\nearly in the morning leaves",
    "start": "3322680",
    "end": "3329400"
  },
  {
    "text": "things out of these slides\nwhen I make them. It wasn't me, I put it in.",
    "start": "3329400",
    "end": "3336410"
  },
  {
    "text": "So we're going to prove this by\nassociating code words with base 2 expansions, which are\nlike decimals, but decimals to",
    "start": "3336410",
    "end": "3342760"
  },
  {
    "text": "the base 2. In other words, we're going to\ntake a code word, y1, y2 up to",
    "start": "3342760",
    "end": "3350180"
  },
  {
    "text": "y sub m where y1 is a binary\ndigit, y2 is a binary digit. This is a string of binary\ndigits, and we're going to",
    "start": "3350180",
    "end": "3357870"
  },
  {
    "text": "represent this as\na real number. The real number is the decimal,\nbut it's not a",
    "start": "3357870",
    "end": "3363490"
  },
  {
    "text": "decimal, it's a becimal, if you\nwill, which is dot y1, y2",
    "start": "3363490",
    "end": "3371160"
  },
  {
    "text": "up to y sub m. Which means y1 over 2 plus y2\nover 4 plus dot dot dot plus y",
    "start": "3371160",
    "end": "3377430"
  },
  {
    "text": "sub m over 2 to the minus m. If you think of it, an ordinary\nbecimal, y1, y2 up to",
    "start": "3377430",
    "end": "3384850"
  },
  {
    "text": "y sub m, means y1 over 10 plus\ny2 over 100 plus y3 over 1,000",
    "start": "3384850",
    "end": "3391770"
  },
  {
    "text": "and so forth. So this is what people would\nhave developed for decimals",
    "start": "3391770",
    "end": "3398200"
  },
  {
    "text": "if, in fact, we lived in\na base 2 world instead of a base 10 world.",
    "start": "3398200",
    "end": "3404770"
  },
  {
    "text": "If you were born without fingers\nand you only had two fingers, this is the number\nsystem you would use.",
    "start": "3404770",
    "end": "3411130"
  },
  {
    "text": " When we think about\ndecimals there's something more involved.",
    "start": "3411130",
    "end": "3417530"
  },
  {
    "text": "We use decimals all the time\nto approximate things. Namely, if I say that a number\nis 0.12, I don't mean usually",
    "start": "3417530",
    "end": "3429840"
  },
  {
    "text": "that it's exactly 12\none hundredths. Usually I mean it's about\n12 one hundredths.",
    "start": "3429840",
    "end": "3437340"
  },
  {
    "text": "The easiest way to do this is\nto round things down to two decimal points.",
    "start": "3437340",
    "end": "3442440"
  },
  {
    "text": "In other words, when I say 0.12,\nwhat I really mean is I am talking about a real number\nwhich lies between 12 one",
    "start": "3442440",
    "end": "3450050"
  },
  {
    "text": "hundredths and 13\none hundredths. It's greater than or equal to\n12 one hundredths and it's",
    "start": "3450050",
    "end": "3455570"
  },
  {
    "text": "less than 13 one hundredths. I'll do the same thing\nin base 2.",
    "start": "3455570",
    "end": "3460740"
  },
  {
    "text": "As soon as I do this you'll see\nwhere the Kraft inequality comes from. ",
    "start": "3460740",
    "end": "3467070"
  },
  {
    "text": "So I'm going to have this\ninterval here, which the interval associated with a\nbinary expansion to m digits,",
    "start": "3467070",
    "end": "3477730"
  },
  {
    "text": "there's a number associated\nwith it which is this number here. There's also an interval\nassociated with it, which is 2",
    "start": "3477730",
    "end": "3484840"
  },
  {
    "text": "to the minus m. So if I have a code consisting\nof 0, 0, 0, 1 and 1, what I'm",
    "start": "3484840",
    "end": "3499450"
  },
  {
    "text": "going to do is represent zero\nzero as a binary expansion, so",
    "start": "3499450",
    "end": "3504869"
  },
  {
    "text": "0, 0, is a binary expansion\nis 0.00, which is zero.",
    "start": "3504870",
    "end": "3510450"
  },
  {
    "text": "But also as an approximation\nit's between zero and 1/4. So I have this interval\nassociated with 0, 0, which is",
    "start": "3510450",
    "end": "3519330"
  },
  {
    "text": "the interval from\nzero up to 1/4. For the code word zero 1, if I'm\ntrying to see whether that",
    "start": "3519330",
    "end": "3527660"
  },
  {
    "text": "is part of a prefix code, I map\nit into a number, 0.01 as",
    "start": "3527660",
    "end": "3533750"
  },
  {
    "text": "a binary expansion. This number corresponds to the\nnumber 1/4, and it also",
    "start": "3533750",
    "end": "3541460"
  },
  {
    "text": "corresponds into sub length 2\nto an interval of size 1/4. So we go from 1/4 up to 1/2.",
    "start": "3541460",
    "end": "3550530"
  },
  {
    "text": "Finally, I have 1, which\ncorresponds to the number 1/2,",
    "start": "3550530",
    "end": "3557170"
  },
  {
    "text": "and since it's only one binary\ndigit long, it corresponds to the interval 1/2 to 1.",
    "start": "3557170",
    "end": "3562460"
  },
  {
    "text": "Namely, if I truncate thing to\none binary digit, I'm talking about the entire interval\nfrom 1/2 to 1.",
    "start": "3562460",
    "end": "3569380"
  },
  {
    "text": " So where does the Kraft\ninequality come from and what",
    "start": "3569380",
    "end": "3578330"
  },
  {
    "text": "does it have to do with this? Incidentally, this isn't the\nway that Kraft proved it.",
    "start": "3578330",
    "end": "3583559"
  },
  {
    "text": "Kraft was very smart. He did this as his Master's\nthesis, too, I believe, and",
    "start": "3583560",
    "end": "3590200"
  },
  {
    "text": "since he wanted it to be his\nMaster's thesis he didn't want to make it look quite that\ntrivial or Bob Fano would have",
    "start": "3590200",
    "end": "3595960"
  },
  {
    "text": "said oh, you ought to do\nsomething else for a Master's thesis also. So he was cagey and made his\nproof look a little more",
    "start": "3595960",
    "end": "3604270"
  },
  {
    "text": "complicated. So, if a code word x is a prefix\nof code word y, in",
    "start": "3604270",
    "end": "3610350"
  },
  {
    "text": "other words, y has some binary\nexpansion, x has some binary",
    "start": "3610350",
    "end": "3616950"
  },
  {
    "text": "expansion which is the first\nfew letters of y. Then the number corresponding\nto x and the interval",
    "start": "3616950",
    "end": "3625549"
  },
  {
    "text": "corresponding to x, namely, x\ncovers that entire range of",
    "start": "3625550",
    "end": "3632240"
  },
  {
    "text": "decimal expansions which start\nwith x and goes up to something which differs from x\nonly in that mth binary digit.",
    "start": "3632240",
    "end": "3643819"
  },
  {
    "text": "In other words, let me\nshow you what that means in terms of here.",
    "start": "3643820",
    "end": "3652660"
  },
  {
    "text": "If I tried to create a code word\n0, 0, 0, 1, 0, 0, 0, 1",
    "start": "3652660",
    "end": "3661990"
  },
  {
    "text": "would correspond to\nthe number 1/16. ",
    "start": "3661990",
    "end": "3668970"
  },
  {
    "text": "1/16 lies in that\ninterval there. In other words, any time I\ncreate a code word which lies",
    "start": "3668970",
    "end": "3676980"
  },
  {
    "text": "in the interval corresponding to\nanother code word, it means that this code word has a prefix\nof that code word.",
    "start": "3676980",
    "end": "3686200"
  },
  {
    "text": "Sure enough it does -- 0, 0, 0, 1, this has\nthis as a prefix.",
    "start": "3686200",
    "end": "3691530"
  },
  {
    "text": "In other words, there is a\nperfect mapping between intervals associated\nwith code words and",
    "start": "3691530",
    "end": "3699060"
  },
  {
    "text": "prefixes of code words. So in other words, if we have\na prefix-free code, the",
    "start": "3699060",
    "end": "3707569"
  },
  {
    "text": "intervals for each of these code\nwords has to be distinct.",
    "start": "3707570",
    "end": "3712740"
  },
  {
    "text": "Well, now we're in nice shape\nbecause we know what the size of each of these intervals is.",
    "start": "3712740",
    "end": "3718610"
  },
  {
    "text": "The size of the interval\nassociated with a code word of length 2 is 2 to the minus 2.",
    "start": "3718610",
    "end": "3726609"
  },
  {
    "text": "To be a prefix-free\ncode, all these intervals have to be disjoint. But everything is contained here\nbetween zero and 1, and",
    "start": "3726610",
    "end": "3735030"
  },
  {
    "text": "therefore, when we add up all\nof these intervals we get a number which is at most 1.",
    "start": "3735030",
    "end": "3740049"
  },
  {
    "text": " That's the Kraft inequality. That's all there is to it.",
    "start": "3740050",
    "end": "3748450"
  },
  {
    "text": "There was one more\nthing in it. It's a full code if and only\nif the Kraft inequality is",
    "start": "3748450",
    "end": "3754970"
  },
  {
    "text": "satisfied with a quality.  Where was that?",
    "start": "3754970",
    "end": "3760720"
  },
  {
    "text": " The code is full if and only\nif the expansion intervals",
    "start": "3760720",
    "end": "3766660"
  },
  {
    "text": "fill up zero and 1. In other words, suppose this was\n1 zero, which would lead",
    "start": "3766660",
    "end": "3778910"
  },
  {
    "text": "into 0.1 with an interval 1/2\nto 3/4, and this was all you",
    "start": "3778910",
    "end": "3789520"
  },
  {
    "text": "had, then this interval up here\nwould be empty, and, in",
    "start": "3789520",
    "end": "3794830"
  },
  {
    "text": "fact, since this interval\nis empty you could shorten the code down.",
    "start": "3794830",
    "end": "3800200"
  },
  {
    "text": "In other words, you'd have\nintervals which weren't full which means that you would have\ncode words that could be",
    "start": "3800200",
    "end": "3807390"
  },
  {
    "text": "put in there which\nare not there. So, that completes the proof.",
    "start": "3807390",
    "end": "3813060"
  },
  {
    "start": "3813060",
    "end": "3822090"
  },
  {
    "text": "So now finally, it's time to\ndefine unique decodability. ",
    "start": "3822090",
    "end": "3828630"
  },
  {
    "text": "The definition in the notes is\na mouthful, so I broke it",
    "start": "3828630",
    "end": "3833910"
  },
  {
    "text": "apart into a bunch of different\npieces here. A code c for a discrete source\nis uniquely decodable if for",
    "start": "3833910",
    "end": "3844670"
  },
  {
    "text": "each string of source letters,\nx1 up to x sub m, these are not distinct letters of the\nalphabet, these are just the",
    "start": "3844670",
    "end": "3852100"
  },
  {
    "text": "things that might come out of\nthe source. x1 could be the same as x2, it could be\ndifferent from x2.",
    "start": "3852100",
    "end": "3858510"
  },
  {
    "text": "If all of these letters coming\nout of the source, that corresponds to some\nconcatenation of these code",
    "start": "3858510",
    "end": "3867810"
  },
  {
    "text": "words, namely, c of x1, c of\nx2 up to c of x sub m.",
    "start": "3867810",
    "end": "3874130"
  },
  {
    "text": "So I have this coming out of the\nsource, this is a string of binary digits that come out\ncorresponding to this, and I",
    "start": "3874130",
    "end": "3882900"
  },
  {
    "text": "require that this differs from\nthe concatenation of the code words c of x1 prime up\nto c of xm prime.",
    "start": "3882900",
    "end": "3890750"
  },
  {
    "text": "For any other string, x1 prime\nx2 prime, x of m prime of source letters.",
    "start": "3890750",
    "end": "3896060"
  },
  {
    "text": "Example of this, the thing\nthat we were trying to construct before c of a equals\n1c of b equals zero, c of c",
    "start": "3896060",
    "end": "3911910"
  },
  {
    "text": "equals 1 zero, doesn't work\nbecause the concatenation of a",
    "start": "3911910",
    "end": "3920950"
  },
  {
    "text": "and b yields 1 zero, c of\nx1 -- take x1 to be a,",
    "start": "3920950",
    "end": "3926940"
  },
  {
    "text": "take x2 to be b. This concatenation, c of x1,\nc of x2 is c of a, c",
    "start": "3926940",
    "end": "3936630"
  },
  {
    "text": "of b equals 1 zero. C of c equals 1 zero, and\ntherefore, you don't have",
    "start": "3936630",
    "end": "3946200"
  },
  {
    "text": "something that works. Note that n here can be\ndifferent from m here.",
    "start": "3946200",
    "end": "3952150"
  },
  {
    "text": "You'll deal with that in the\nhomework a little bit, not this week's set.",
    "start": "3952150",
    "end": "3958300"
  },
  {
    "text": "But that's what unique\ndecodability says. ",
    "start": "3958300",
    "end": "3966540"
  },
  {
    "text": "Let me give you an example. ",
    "start": "3966540",
    "end": "3975760"
  },
  {
    "text": "Here's an example.  Turns out that all uniquely\ndecodable codes have to",
    "start": "3975760",
    "end": "3985170"
  },
  {
    "text": "satisfy the Kraft\ninequality also. Kraft didn't prove this.",
    "start": "3985170",
    "end": "3991150"
  },
  {
    "text": "In fact, it's a bit of a\nbear to prove it, and we'll prove it later.",
    "start": "3991150",
    "end": "3997540"
  },
  {
    "text": "I suspect that about 2/3 of you\nwill see the proof and say ugh, and 1/3 of you will say\noh, this is really, really",
    "start": "3997540",
    "end": "4005550"
  },
  {
    "text": "interesting. I sort of say gee, this is\ninteresting sometimes, and",
    "start": "4005550",
    "end": "4011869"
  },
  {
    "text": "more often I say ugh, why\ndo we have to do this? But one example of a code which\nis uniquely decodable is",
    "start": "4011870",
    "end": "4023420"
  },
  {
    "text": "first code word is 1, second\ncode word is 1, 0, third is 1, 0, 0, and the fourth\nis 1, 0, 0, 0.",
    "start": "4023420",
    "end": "4032849"
  },
  {
    "text": "It doesn't satisfy the Kraft\ninequality with the quality, it satisfies it with\ninequality.",
    "start": "4032850",
    "end": "4038110"
  },
  {
    "text": "It is uniquely decodable. How do I know it's uniquely\ndecodable by just looking at it?",
    "start": "4038110",
    "end": "4044290"
  },
  {
    "text": "Because any time I see\na 1 I know it's the beginning of a code word. So I look at some along binary\nstring, it starts out with the",
    "start": "4044290",
    "end": "4051450"
  },
  {
    "text": "1, I just read digits till it\ncomes to the next one, I say ah-ha, that next 1 is the first\nbinary digit in the",
    "start": "4051450",
    "end": "4059690"
  },
  {
    "text": "second code word, the third 1\nthat I see is the first digit in the third code word\nand so forth.",
    "start": "4059690",
    "end": "4067570"
  },
  {
    "text": "You might say why don't I make\nthe 1 the end of the code word instead of the beginning of the\ncode word and then we'll",
    "start": "4067570",
    "end": "4073610"
  },
  {
    "text": "have the prefix condition\nagain. All I can say is because I want\nto be perverse and I want",
    "start": "4073610",
    "end": "4082960"
  },
  {
    "text": "to give you an example of\nsomething that is uniquely decodable but doesn't satisfy\nthe Kraft inequality.",
    "start": "4082960",
    "end": "4088610"
  },
  {
    "text": " So it's a question. Why don't we just stick the\nprefix-free codes and forget",
    "start": "4088610",
    "end": "4095120"
  },
  {
    "text": "about unique decodability? You won't understand the answer\nto that really until we",
    "start": "4095120",
    "end": "4101880"
  },
  {
    "text": "start looking at things like\nLempel Ziv codes, which are, in fact, a bunch of different\nthings all put together which",
    "start": "4101880",
    "end": "4109849"
  },
  {
    "text": "are, in fact, very, very\npractical codes. But they're not prefix-free\ncodes, and you'll see why",
    "start": "4109850",
    "end": "4116990"
  },
  {
    "text": "they're not prefix-free codes\nwhen we study them. Then you will see why we want\nto have a definition of",
    "start": "4116990",
    "end": "4124059"
  },
  {
    "text": "something which is more\ninvolved than that. So don't worry about that\nfor the time being. For the time being, the correct\nidea to take away from",
    "start": "4124060",
    "end": "4132380"
  },
  {
    "text": "this is that why not just use\nprefix-free codes, and the answer is for quite\na while we will.",
    "start": "4132380",
    "end": "4140559"
  },
  {
    "text": "We know that anything we can do\nwith prefix-free codes we can also do with uniquely\ndecodable codes, anything we",
    "start": "4140560",
    "end": "4147180"
  },
  {
    "text": "can do with uniquely decodable\ncodes, we can do with prefix-free codes. Namely, any old code that you\ninvent has like certain set of",
    "start": "4147180",
    "end": "4156490"
  },
  {
    "text": "lengths associated with the\ncode words, and if it satisfies the Kraft inequality,\nyou can easily",
    "start": "4156490",
    "end": "4164650"
  },
  {
    "text": "develop a prefix-free code which\nhas those lengths and you might as well do it because\nthen it makes the",
    "start": "4164650",
    "end": "4171410"
  },
  {
    "text": "coding a lot easier. Namely, if we have a prefix-free\ncode -- let's go",
    "start": "4171410",
    "end": "4177529"
  },
  {
    "text": "back and look at that because\nI never mentioned it and it really is one of the important\nadvantages",
    "start": "4177530",
    "end": "4185239"
  },
  {
    "text": "of prefix-free codes. When I look at this picture and\nI look at the proof of how",
    "start": "4185240",
    "end": "4191359"
  },
  {
    "text": "I saw that this was uniquely\ndecodable, what we said was you start at the beginning and\nas soon as the decoder sees",
    "start": "4191360",
    "end": "4200929"
  },
  {
    "text": "the last binary digit of a code\nword, the decoder can say",
    "start": "4200930",
    "end": "4206400"
  },
  {
    "text": "ah-ah, it's that code word. So it's instantaneously\ndecodable.",
    "start": "4206400",
    "end": "4213119"
  },
  {
    "text": "In other words, all you need to\nsee is the end of the code word and at that point you\nknow it's the end.",
    "start": "4213120",
    "end": "4219710"
  },
  {
    "text": "Incidentally, that makes\nfiguring out when you have a long sequence of code words and\nyou want to stop the whole",
    "start": "4219710",
    "end": "4225880"
  },
  {
    "text": "thing, it makes things\na little bit easier. This example we started\nout with of --",
    "start": "4225880",
    "end": "4232610"
  },
  {
    "text": "I can't find it anymore -- but the example of a uniquely\ndecodable, but non-prefix-free",
    "start": "4232610",
    "end": "4240200"
  },
  {
    "text": "code, you always had to look at\nthe first digit of the next code word to know that the old\ncode word was finished.",
    "start": "4240200",
    "end": "4247460"
  },
  {
    "text": "So, prefix-free codes have\nthat advantage also. ",
    "start": "4247460",
    "end": "4256140"
  },
  {
    "text": "The next topic that we're going\nto take up is discrete memoryless sources.",
    "start": "4256140",
    "end": "4262020"
  },
  {
    "text": "Namely, at this point we have\ngone as far as we can in studying prefix-free codes and\nuniquely decodable codes",
    "start": "4262020",
    "end": "4269600"
  },
  {
    "text": "strictly in terms of their\nnon-probabalistic properties. Namely, the question of what set\nof lengths can you use in",
    "start": "4269600",
    "end": "4277420"
  },
  {
    "text": "a prefix-free code or uniquely\ndecodable code, and what sets of lengths can't you use.",
    "start": "4277420",
    "end": "4282920"
  },
  {
    "text": "So the next thing we want to do\nis to start looking at the probabilities of these different\nsymbols and looking",
    "start": "4282920",
    "end": "4290060"
  },
  {
    "text": "at the probabilities of\nthe different symbols. We want to find out what sort of\nlengths we want to choose.",
    "start": "4290060",
    "end": "4296500"
  },
  {
    "text": " There will be a simple\nanswer to that.",
    "start": "4296500",
    "end": "4302430"
  },
  {
    "text": "In fact, there'll be two ways of\nlooking at it, one of which will lead to the idea of\nentropy, and the other which",
    "start": "4302430",
    "end": "4308350"
  },
  {
    "text": "will lead to the idea of\ngenerating an optimal code. Both of those approaches are\nextremely interesting.",
    "start": "4308350",
    "end": "4314850"
  },
  {
    "text": "But to do that we have\nto think about a very simple kind of source.",
    "start": "4314850",
    "end": "4320150"
  },
  {
    "text": "The simple kind of source\nis called a discrete memoryless source. We know what a discrete source\nis -- it's a source which",
    "start": "4320150",
    "end": "4328510"
  },
  {
    "text": "spews out a sequence of symbols\nfrom this finite alphabet that we know and\nthe decoder knows.",
    "start": "4328510",
    "end": "4336130"
  },
  {
    "text": " The next thing we have to do\nis to put a probability",
    "start": "4336130",
    "end": "4343650"
  },
  {
    "text": "measure on the output\nof the source. There's a little review\nof probability at",
    "start": "4343650",
    "end": "4350550"
  },
  {
    "text": "the end of this lecture. You should read it carefully. When you study probability, you\nhave undoubtedly studied",
    "start": "4350550",
    "end": "4359199"
  },
  {
    "text": "it like most students do,\nas a way of learning",
    "start": "4359200",
    "end": "4364650"
  },
  {
    "text": "how to do the problems. You don't necessarily think of\nthe generalizations of this,",
    "start": "4364650",
    "end": "4373260"
  },
  {
    "text": "you don't necessarily think of\nwhy is it that when you define a probability space you start\nout with a sample space and",
    "start": "4373260",
    "end": "4381760"
  },
  {
    "text": "you talk about elements in the\nsample space, what's their sample points. What do those sample points\nhave to do with random",
    "start": "4381760",
    "end": "4388380"
  },
  {
    "text": "variables and all\nof that stuff? That's the first thing you\nforget when you haven't been",
    "start": "4388380",
    "end": "4395050"
  },
  {
    "text": "looking at probability\nfor a while. Unfortunately, it's something\nyou have to understand when",
    "start": "4395050",
    "end": "4402870"
  },
  {
    "text": "we're dealing with this because\nwe have a bunch of things which are not random\nvariables here.",
    "start": "4402870",
    "end": "4408290"
  },
  {
    "text": "These letters here are\nthings which we will call chance variables.",
    "start": "4408290",
    "end": "4413980"
  },
  {
    "text": "A chance variable is just like\na random variable but the set of possible values that it has\nare not necessarily numbers,",
    "start": "4413980",
    "end": "4423110"
  },
  {
    "text": "they're just events,\nas it turns out. So the sample space is just\nsome set of letters, as we",
    "start": "4423110",
    "end": "4430500"
  },
  {
    "text": "call them, which are\nreally events in this probability space. The probability space assigns\nprobabilities to",
    "start": "4430500",
    "end": "4437030"
  },
  {
    "text": "sequences of letters. What we're assuming here is that\nthe sequence of letters",
    "start": "4437030",
    "end": "4443199"
  },
  {
    "text": "are all statistically\nindependent of each other. So for example, if you go to Las\nVegas and you're reporting",
    "start": "4443200",
    "end": "4456210"
  },
  {
    "text": "the outcome of some gambling\ngame and you're sending it back your home computer and your\nhome computer is figuring",
    "start": "4456210",
    "end": "4463940"
  },
  {
    "text": "out what your odds are in black\njack or something, then every time the dice are rolled\nyou get an independent -- we",
    "start": "4463940",
    "end": "4471970"
  },
  {
    "text": "hope it's independent if\nthe game is fair -- outcome of the dice.",
    "start": "4471970",
    "end": "4479869"
  },
  {
    "text": "So that what we're sending\nthen, what we're going to encode is a sequence of\nindependent, random -- not",
    "start": "4479870",
    "end": "4487450"
  },
  {
    "text": "random variables because it's\nnot necessarily numbers that you're interested in, it's\nthis sequence of symbols.",
    "start": "4487450",
    "end": "4497340"
  },
  {
    "text": "But if we deal with the English\ntext, for example, the",
    "start": "4497340",
    "end": "4504619"
  },
  {
    "text": "idea that the letters in English\ntext are independent of each other is absolutely\nludicrous.",
    "start": "4504620",
    "end": "4513140"
  },
  {
    "text": "If it's early enough in the\nterm that you're not overloaded already, I would\nsuggest that those of you with",
    "start": "4513140",
    "end": "4521679"
  },
  {
    "text": "a little time go back and read\nat least the first part of Shannon's original article about\ninformation theory where",
    "start": "4521680",
    "end": "4529780"
  },
  {
    "text": "he talks about the problem\nof modeling English. It's a beautiful treatment,\nbecause he starts out same way",
    "start": "4529780",
    "end": "4536769"
  },
  {
    "text": "we are, dealing with sources\nwhich are independent, identically distributed\nchance variables.",
    "start": "4536770",
    "end": "4544159"
  },
  {
    "text": "Then he goes from there, as we\nwill, to looking at Markov",
    "start": "4544160",
    "end": "4549180"
  },
  {
    "text": "chains of source variables.",
    "start": "4549180",
    "end": "4554210"
  },
  {
    "text": "Some of you will cringe at this\nbecause you might have seen Markov chains and forgotten\nabout them or you",
    "start": "4554210",
    "end": "4560820"
  },
  {
    "text": "might have never seen them. Don't worry about it, there's\nnot that much that's peculiar about them.",
    "start": "4560820",
    "end": "4566670"
  },
  {
    "text": "Then he goes on from\nthere to talk about actual English language.",
    "start": "4566670",
    "end": "4572810"
  },
  {
    "text": "But the point that he makes is\nthat when you want to study something as complicated as the\nEnglish language, the way",
    "start": "4572810",
    "end": "4581060"
  },
  {
    "text": "that you do it is not to start\nout by taking a lot of statistics about English.",
    "start": "4581060",
    "end": "4587390"
  },
  {
    "text": "If you want to encode English,\nyou start out by making highly simplifying assumptions, like\nthe assumption that we're",
    "start": "4587390",
    "end": "4594060"
  },
  {
    "text": "making here that we're\ndealing with a discrete memoryless source. You then learn how to encode\ndiscrete memoryless sources.",
    "start": "4594060",
    "end": "4601760"
  },
  {
    "text": "You then look at blocks of\nletters out of these sources, and if they're not independent\nyou look at the probabilities",
    "start": "4601760",
    "end": "4609010"
  },
  {
    "text": "of these blocks. If you know how to generate an\noptimal code for IID letters,",
    "start": "4609010",
    "end": "4617240"
  },
  {
    "text": "then all you have to do is take\nthese blocks of length m where you'd have a probability\non each possible block, and",
    "start": "4617240",
    "end": "4625070"
  },
  {
    "text": "your generate a code\nfor the block. You don't worry about the\nstatistical relationships",
    "start": "4625070",
    "end": "4631100"
  },
  {
    "text": "between different blocks. You just say well, if I make my\nblock long enough I don't care about what happens at the\nedges, and I'm going to get",
    "start": "4631100",
    "end": "4638940"
  },
  {
    "text": "everything of interest. So the idea is by starting out\nhere you have all the clues",
    "start": "4638940",
    "end": "4646285"
  },
  {
    "text": "you need to start looking at\nthe more interesting cases. As it turns out with source\ncoding there's another",
    "start": "4646285",
    "end": "4652390"
  },
  {
    "text": "advantage involved -- looking\nat independent letters is in some sense a worst case.",
    "start": "4652390",
    "end": "4659530"
  },
  {
    "text": "When you look at this worst\ncase, in fact, presto, you",
    "start": "4659530",
    "end": "4665010"
  },
  {
    "text": "will say if the letters are\nstatistically related, fine. I'd do even better.",
    "start": "4665010",
    "end": "4671470"
  },
  {
    "text": "I could do better if I took that\ninto account, but if I'm not taking it into account,\nI know exactly",
    "start": "4671470",
    "end": "4677619"
  },
  {
    "text": "how well I can do. So what's the definition\nof that? Source output is an unending\nsequence -- x1, x2, x3 --",
    "start": "4677620",
    "end": "4685620"
  },
  {
    "text": "of randomly selected letters,\nand these randomly selected letters are called\nchance variables.",
    "start": "4685620",
    "end": "4692239"
  },
  {
    "text": "Each source output is selected\nfrom the alphabet using a common probability measure.",
    "start": "4692240",
    "end": "4698280"
  },
  {
    "text": "In other words, they're\nidentically distributed. Each source output is\nstatistically independent of",
    "start": "4698280",
    "end": "4705200"
  },
  {
    "text": "the other source outputs,\nx1 up to x k plus 1. We will call that independent\nidentically distributed, and",
    "start": "4705200",
    "end": "4714610"
  },
  {
    "text": "we'll abbreviate it IID. It doesn't mean that the\nprobability measure is 1 over",
    "start": "4714610",
    "end": "4722780"
  },
  {
    "text": "m for each letter, it's not what\nwe were assuming before. It means you can have an\narbitrary probability",
    "start": "4722780",
    "end": "4729490"
  },
  {
    "text": "assignment on the different\nletters, but every letter has the same probability assignment\non it and they're",
    "start": "4729490",
    "end": "4735730"
  },
  {
    "text": "all independent of each other. So that's the kind of source\nwe're going to be dealing with first.",
    "start": "4735730",
    "end": "4741140"
  },
  {
    "text": "We will find out everything we\nwant to know about how we deal with that source. You will understand that source\ncompletely and the",
    "start": "4741140",
    "end": "4748280"
  },
  {
    "text": "other sources you will half\nunderstand a little later. ",
    "start": "4748280",
    "end": "4754425"
  }
]