[
  {
    "text": "[SQUEAKING] [RUSTLING]  [CLICKING]",
    "start": "0",
    "end": "5445"
  },
  {
    "start": "5445",
    "end": "16350"
  },
  {
    "text": "ANA BELL: Let's get\nstarted, everybody. So last lecture,\nwe began talking about this topic of recursion.",
    "start": "16350",
    "end": "23250"
  },
  {
    "text": "And it hopefully solidified a\nfew really fundamental ideas",
    "start": "23250",
    "end": "29310"
  },
  {
    "text": "about recursion that we're\ngoing to use in today's lecture. Today's lecture,\nthe first half of it",
    "start": "29310",
    "end": "35969"
  },
  {
    "text": "ish we're going to talk\nabout recursion just to review on some actual\nnumerical examples.",
    "start": "35970",
    "end": "44050"
  },
  {
    "text": "But then the second half, which\nis the main event for today, is going to be recursion on\nnon-numerics, so specifically",
    "start": "44050",
    "end": "50309"
  },
  {
    "text": "recursion on lists. But the techniques\nwe'll see on lists can be applied to other\nthings that are non-numerics",
    "start": "50310",
    "end": "56430"
  },
  {
    "text": "as well, like tuples, or\nstrings, or things like that. So let's start the review a\nlittle bit of a review of what",
    "start": "56430",
    "end": "63805"
  },
  {
    "text": "we talked about last time\nand some of the big ideas by looking at this example. So we're going to write\na recursive function",
    "start": "63805",
    "end": "70100"
  },
  {
    "text": "for the Fibonacci sequence. And the Fibonacci\nsequence exists in nature in a lot of places.",
    "start": "70100",
    "end": "76230"
  },
  {
    "text": "One specific place is you\ncan model mating of rabbits using Fibonacci sequence.",
    "start": "76230",
    "end": "81740"
  },
  {
    "text": " But we won't be studying\nthat in depth today. We're just going to be looking\nat the sequence itself.",
    "start": "81740",
    "end": "88590"
  },
  {
    "text": "So just to remind you,\nthe idea behind Fibonacci is we start out with two sort\nof basic values, Fibonacci of 1",
    "start": "88590",
    "end": "96079"
  },
  {
    "text": "is 1 and Fibonacci of 2 is 1. So in my table here, I've got\nthese two starting values.",
    "start": "96080",
    "end": "102259"
  },
  {
    "text": "And we can fill in the\nremainder of the table by basically saying Fibonacci\nof n is Fibonacci of n minus 1",
    "start": "102260",
    "end": "108110"
  },
  {
    "text": "plus Fibonacci of n minus 2. So Fibonacci of 3\nwill be 1 plus 1. Fibonacci of 4 will be 2 plus 1.",
    "start": "108110",
    "end": "115009"
  },
  {
    "text": "Fibonacci of 5 is 3 plus 2. Fibonacci of 6 is 5 plus 3. And Fibonacci of 7 is 8 plus 5.",
    "start": "115010",
    "end": "120759"
  },
  {
    "text": "Right. That's the sequence\nwe all know and love. OK. So our two base\ncases, if we're going",
    "start": "120760",
    "end": "127700"
  },
  {
    "text": "to put this in mathematical\nterms, are Fibonacci of 1 is 1. Fibonacci of 2 is 1.",
    "start": "127700",
    "end": "133550"
  },
  {
    "text": "And our recursive step right\nin terms of the math and slash programming lingo is going\nto be the Fibonacci of n",
    "start": "133550",
    "end": "142580"
  },
  {
    "text": "is equal to Fibonacci of n minus\n1 plus Fibonacci of n minus 2. So we put that in our function.",
    "start": "142580",
    "end": "149250"
  },
  {
    "text": "So we slap a definition\naround that code and turn it into a nice\nfunction that we can run.",
    "start": "149250",
    "end": "154970"
  },
  {
    "text": "If x is 1 or x is 2-- those are\nour two base cases-- we just return one right off the bat.",
    "start": "154970",
    "end": "160470"
  },
  {
    "text": "Right. Nothing to call. No functions to call. They're our base cases. But otherwise, we're\ngoing to return a value.",
    "start": "160470",
    "end": "168512"
  },
  {
    "text": "And the thing we're\ngoing to return is a call to\nFibonacci of n minus 1 plus Fibonacci of\nn minus 2 just like",
    "start": "168512",
    "end": "175010"
  },
  {
    "text": "the mathematical\ndefinition said to do. OK. So this is different than\nwhat we saw last lecture.",
    "start": "175010",
    "end": "181400"
  },
  {
    "text": "Last lecture in\nour recursive step, we had basically just one\nfunction call to ourselves.",
    "start": "181400",
    "end": "186900"
  },
  {
    "text": "So whatever function\nwe had defined up here, we only had return some\nvariation of that function down",
    "start": "186900",
    "end": "193290"
  },
  {
    "text": "here with something\nelse tacked on to it, like an addition of some\nvalue or something else. In this case, we actually\nhave the function",
    "start": "193290",
    "end": "200940"
  },
  {
    "text": "being called twice. OK. So we're going to see\nwhat implications this has",
    "start": "200940",
    "end": "207390"
  },
  {
    "text": "as we trace through the code. And so as I trace\nthrough the code, I'll remind you of\nsome of the big ideas",
    "start": "207390",
    "end": "213120"
  },
  {
    "text": "that we learned last lecture. So let's say that we wanted\nto calculate Fibonacci of 6.",
    "start": "213120",
    "end": "219690"
  },
  {
    "text": "And so I'm going to illustrate\na function call just by the name of the function with\nthe parameter that I'm calling.",
    "start": "219690",
    "end": "227790"
  },
  {
    "text": "So one of the big\nideas from last lecture was that when you\nmake a function call to a function\nthat's recursive,",
    "start": "227790",
    "end": "235510"
  },
  {
    "text": "you're going to trace\nthrough that function call and the environment\nfor that function just as you normally would.",
    "start": "235510",
    "end": "241310"
  },
  {
    "text": "But as soon as you see another\nfunction call, so in this case, Fibonacci of 6 doesn't\nenter the base cases.",
    "start": "241310",
    "end": "247760"
  },
  {
    "text": "It goes up into\nthe recursive step. And it says I'm\ngoing to calculate Fibonacci of x minus 1 plus\nFibonacci of x minus 2.",
    "start": "247760",
    "end": "256838"
  },
  {
    "text": "So for this Fibonacci\nof 6 function call, let's follow along and\nsay, well, Fibonacci of 6,",
    "start": "256839",
    "end": "263620"
  },
  {
    "text": "we'll say I want to\ncalculate Fibonacci of 5. ",
    "start": "263620",
    "end": "270580"
  },
  {
    "text": "This is my question to you. Is it going to now\ncalculate Fibonacci of 4? ",
    "start": "270580",
    "end": "278900"
  },
  {
    "text": "No. Very good because Fibonacci\nof 5 is a function call.",
    "start": "278900",
    "end": "284659"
  },
  {
    "text": "Right. We need to explore what\nthis function will return before Fibonacci of 6 can\nadd the result of this,",
    "start": "284660",
    "end": "292070"
  },
  {
    "text": "the return of this,\nto Fibonacci of 4. So that means then\nthis new Fib(5)",
    "start": "292070",
    "end": "298730"
  },
  {
    "text": "is an entirely new environment\ncalling Fibonacci with n is equal to 5,\ncompletely separate",
    "start": "298730",
    "end": "304820"
  },
  {
    "text": "than our original\nFibonacci of 6 call. So let's explore what\nFibonacci of 5 is going to do.",
    "start": "304820",
    "end": "309830"
  },
  {
    "text": "Well, in its function call,\nit's going to again go in the recursive step. It's going to figure\nout Fibonacci of 4.",
    "start": "309830",
    "end": "316570"
  },
  {
    "text": "And then it's going\nto pause there because it needs to figure\nout what Fibonacci of 4 is before it finishes its other\nhalf to do Fibonacci of 3.",
    "start": "316570",
    "end": "324860"
  },
  {
    "text": "So Fibonacci of 4 will now\ncreate a new environment. And now it has to\nexplore its return.",
    "start": "324860",
    "end": "330240"
  },
  {
    "text": "So it figures out\nFibonacci of 4 is, again, going into the recursive\nstep to calculate Fibonacci of 3 plus something.",
    "start": "330240",
    "end": "336980"
  },
  {
    "text": "But we don't know what\nthat something is yet because we have to explore\nwhat Fibonacci of 3 is.",
    "start": "336980",
    "end": "342080"
  },
  {
    "text": "So already we're four\nfunction calls deep and we haven't\nreally done any work",
    "start": "342080",
    "end": "347750"
  },
  {
    "text": "that we can see the result of. There's no values\nbeing passed back. All we're doing is\nexploring this path down",
    "start": "347750",
    "end": "354350"
  },
  {
    "text": "until we get to some\nsort of base case that will kick off our\nconquer step where we",
    "start": "354350",
    "end": "361250"
  },
  {
    "text": "pass values back up the chain. So Fibonacci of\n3, again, is going to look at Fibonacci of 2.",
    "start": "361250",
    "end": "367980"
  },
  {
    "text": "And finally, we've\nreached a base case. So Fibonacci of 2 will\nimmediately return.",
    "start": "367980",
    "end": "375600"
  },
  {
    "text": "It doesn't make\nanother function call. So Fibonacci of 2 will return a\nvalue and then Fibonacci of 3,",
    "start": "375600",
    "end": "383230"
  },
  {
    "text": "in its function call, has\nthe result for Fibonacci of 2 and then it's going to do plus\nthat value plus Fibonacci of 1,",
    "start": "383230",
    "end": "392680"
  },
  {
    "text": "3 minus 2. So that's this one here. It can easily do that addition\nand return the value back up",
    "start": "392680",
    "end": "401140"
  },
  {
    "text": "to Fibonacci of 3. So now Fibonacci of 3\nhas its first half ready.",
    "start": "401140",
    "end": "409750"
  },
  {
    "text": "So Fibonacci of 4-- sorry. So Fibonacci of 4 has its first\nhalf ready, Fibonacci of 3.",
    "start": "409750",
    "end": "416320"
  },
  {
    "text": "So Fibonacci of 4 was trying\nto figure out what Fib(3) was. And it did.",
    "start": "416320",
    "end": "421660"
  },
  {
    "text": "It was Fib(2) plus Fib(1), 2. So now it has a value\nfor its first half here.",
    "start": "421660",
    "end": "427240"
  },
  {
    "text": "And it needs to add that value\nto Fibonacci of 2, 4 minus 2.",
    "start": "427240",
    "end": "433389"
  },
  {
    "text": "So it will explore that path. That's a base case. So all it does is return\nthe value immediately",
    "start": "433390",
    "end": "438520"
  },
  {
    "text": "and now Fibonacci\nof 4 has its value, whatever Fib(3) was that we\nfigured out, plus Fib(2).",
    "start": "438520",
    "end": "444970"
  },
  {
    "text": " Now Fib(4), we have a value\nfor it when we called Fib(5).",
    "start": "444970",
    "end": "452229"
  },
  {
    "text": "So Fib(5) is now\nhalfway happy because it knows what Fib(4) is.",
    "start": "452230",
    "end": "457240"
  },
  {
    "text": "But it needs to\nadd that to Fib(3). So Fib(5) is still halted.",
    "start": "457240",
    "end": "464600"
  },
  {
    "text": "It can't return anything\nbecause now it needs to explore what Fib(3) is. Well, Fib(3) is going to\ndo another function call.",
    "start": "464600",
    "end": "476630"
  },
  {
    "text": "Right? So it's going to call\nFib(2) and Fib(1), which are two base cases which\neasily return the value back",
    "start": "476630",
    "end": "483070"
  },
  {
    "text": "up to Fib(3). And now Fib(5) is happy\nbecause it knows this value. And now it knows this value.",
    "start": "483070",
    "end": "489340"
  },
  {
    "text": "It can add them together. And Fib(5) now has a value\nthat it can keep track of.",
    "start": "489340",
    "end": "494350"
  },
  {
    "text": "And now, finally, Fib(6)-- we're not even close to\nbeing done, you guys. Fib(6) has a Fib(5)\nvalue so it has",
    "start": "494350",
    "end": "501640"
  },
  {
    "text": "half of the things it\nneeds to figure out what Fib(6) is\nbecause now it has to figure out what Fib(4) is.",
    "start": "501640",
    "end": "507610"
  },
  {
    "text": "And already you can tell\nwhat we're going to do next. We're going to start\nexploring the exact same way like we did before.",
    "start": "507610",
    "end": "513789"
  },
  {
    "text": "Fib(4) needs to\ncalculate Fib(3). It can't do Fib(2)\nyet because Fib(3) needs to calculate Fib(2) and\nFib(1), pass back up the value.",
    "start": "513789",
    "end": "522460"
  },
  {
    "text": "Fib(4) can now finish its job by\ncalculating Fib(3) and Fib(2), pass up the value, and\nnow, finally, Fib(6)",
    "start": "522460",
    "end": "529840"
  },
  {
    "text": "has its two halves\nhere, Fib(5) and Fib(4). And it can add them together\nand return the value.",
    "start": "529840",
    "end": "536269"
  },
  {
    "text": "OK. So a super inefficient\nalgorithm because there's",
    "start": "536270",
    "end": "542600"
  },
  {
    "text": "a lot of stuff going on\nbut not much work being done until the end.",
    "start": "542600",
    "end": "548029"
  },
  {
    "text": "We've got a bunch of\nbase cases we get to. And then we can start\nbuilding back up our result.",
    "start": "548030",
    "end": "553170"
  },
  {
    "text": "And the reason why I\nsay it's inefficient is because, well, we're\nexploring these paths.",
    "start": "553170",
    "end": "558210"
  },
  {
    "text": "And as we go along the way,\nwe figure out what Fib(3) is and what Fib(4) is.",
    "start": "558210",
    "end": "563850"
  },
  {
    "text": "Right? But then when we explore the\nright half of Fib(6) over here,",
    "start": "563850",
    "end": "570389"
  },
  {
    "text": "we're actually recalculating\nthese values all over again. That's why I said we're\nnot even halfway done",
    "start": "570390",
    "end": "576150"
  },
  {
    "text": "because when we got Fib(5),\nwe had to explore Fib(4). And Fib(4), this\nbranch down here,",
    "start": "576150",
    "end": "582360"
  },
  {
    "text": "is basically a copy\nof this one down here. OK. So there's a lot of\nwork being done here",
    "start": "582360",
    "end": "588930"
  },
  {
    "text": "where you just do the same\nthing over and over again. And so that leads\nme to say, well,",
    "start": "588930",
    "end": "595480"
  },
  {
    "text": "what if we didn't have to do\nall this work all over again? If only there was\nsome sort of data",
    "start": "595480",
    "end": "601470"
  },
  {
    "text": "structure that we could\nuse to keep track of things as we calculate them. Right?",
    "start": "601470",
    "end": "606930"
  },
  {
    "text": "Right? To basically map one\nthing to another. So if we already calculated\nFib(4) to be some value,",
    "start": "606930",
    "end": "614280"
  },
  {
    "text": "why don't we just look it up? So any time we use things\nlike keeping track of",
    "start": "614280",
    "end": "619470"
  },
  {
    "text": "and looking things\nup, that should ring a little bell\nthat says dictionaries",
    "start": "619470",
    "end": "625930"
  },
  {
    "text": "can help us do that. And so what we\ncan do is actually write a more efficient\nrecursive Fibonacci function",
    "start": "625930",
    "end": "633459"
  },
  {
    "text": "that it's still recursive but it\nuses dictionaries to keep track",
    "start": "633460",
    "end": "639040"
  },
  {
    "text": "of values as we calculate them. OK. And so this is the Fibonacci\nefficient function.",
    "start": "639040",
    "end": "646620"
  },
  {
    "text": "So my name is fib_efficient. Notice we're still calculating\nFibonacci of some n",
    "start": "646620",
    "end": "652010"
  },
  {
    "text": "but we're going to pass\nin another parameter, a dictionary. And this dictionary will keep\ntrack of the Fibonacci values",
    "start": "652010",
    "end": "659029"
  },
  {
    "text": "as we calculate them. So the key will be the n and\nthe value will be fib of that n.",
    "start": "659030",
    "end": "666399"
  },
  {
    "text": "And so down here\nyou can see we're going to initialize a dictionary\nthat has fib of 1 maps to 1",
    "start": "666400",
    "end": "673030"
  },
  {
    "text": "and fib of 2 maps to 1. Those are our base cases.",
    "start": "673030",
    "end": "678450"
  },
  {
    "text": "So let's take a look at our\nFibonacci recursive function now that uses dictionaries.",
    "start": "678450",
    "end": "684170"
  },
  {
    "text": "No longer do we need to\nthink about the base cases as Fibonacci of 1 is this\nand Fibonacci of 2 is this.",
    "start": "684170",
    "end": "690620"
  },
  {
    "text": "Now, all we need to do is\nsay, well, let's look up the value in our dictionary.",
    "start": "690620",
    "end": "696139"
  },
  {
    "text": "That's what our\nbase case will be. And we don't need to make a\ncall to ourselves if the item is",
    "start": "696140",
    "end": "701690"
  },
  {
    "text": "already in the dictionary. So we can just return the value\nassociated with n in dictionary",
    "start": "701690",
    "end": "709130"
  },
  {
    "text": "d if that n is already\nin the dictionary. So our two base cases\ndown here will initially",
    "start": "709130",
    "end": "716900"
  },
  {
    "text": "be in our dictionary. And as we figure out\nthe values of Fibonacci, we'll add them to\nour dictionary.",
    "start": "716900",
    "end": "722280"
  },
  {
    "text": "And that's exactly what\nthe recursive step will do. So else the value is\nnot in our dictionary.",
    "start": "722280",
    "end": "728209"
  },
  {
    "text": "So unfortunately, we have to\ncalculate it, which is fine. We'll basically do\nthat the first time",
    "start": "728210",
    "end": "733720"
  },
  {
    "text": "through that sort of exploring\nthe left half of our path. But that's pretty much\nthe only times that we're",
    "start": "733720",
    "end": "739449"
  },
  {
    "text": "going to calculate it. All the other times,\nwe'll just look it up. So this is going to\nbe a little different",
    "start": "739450",
    "end": "745660"
  },
  {
    "text": "than what we've seen\nbefore because I'm not, right off the bat, returning fib\nn minus 1 plus fib n minus 2.",
    "start": "745660",
    "end": "753399"
  },
  {
    "text": "I'm actually still\nrunning the same recursive step, fib n minus 1\nplus fib n minus 2,",
    "start": "753400",
    "end": "759670"
  },
  {
    "text": "but I'm saving it in a variable. And that's totally fine to do.",
    "start": "759670",
    "end": "764850"
  },
  {
    "text": "And then before I actually\nreturn this value, let me add it to my dictionary. So this is simply just\nsaying this dictionary",
    "start": "764850",
    "end": "772560"
  },
  {
    "text": "at this particular n for\nthis particular function is equal to this thing\nthat I just calculated, just a straight-up dictionary\naddition, adding this item",
    "start": "772560",
    "end": "781170"
  },
  {
    "text": "to the dictionary. And then after I've added\nit to my dictionary, I can return the answer--\nor return that value.",
    "start": "781170",
    "end": "787740"
  },
  {
    "text": "So still passing it back up\nthe chain of function calls, but we'll save it first.",
    "start": "787740",
    "end": "794100"
  },
  {
    "text": "Everyone OK with this code? OK. So then this is the dictionary\nI mentioned where we",
    "start": "794100",
    "end": "801750"
  },
  {
    "text": "initialize our two base cases. And then we can\nprint the function. So let's trace through the code\nto see what exactly happens",
    "start": "801750",
    "end": "810270"
  },
  {
    "text": "with these function calls now. So we're initializing\nour dictionary, where we have n1 Fibonacci of\n1 is 1 and n2 Fibonacci of 2",
    "start": "810270",
    "end": "818550"
  },
  {
    "text": "is 1, our base cases. Fibonacci of 6 again. We're doing the\nsame function calls,",
    "start": "818550",
    "end": "824890"
  },
  {
    "text": "so that means there's\nnothing stored for fib 5, so we still have to explore\nwhat value it will be.",
    "start": "824890",
    "end": "832030"
  },
  {
    "text": "Nothing stored for fib 4. We're still exploring. Nothing stored for fib 3. We're still exploring. We've reached a base case.",
    "start": "832030",
    "end": "838550"
  },
  {
    "text": "So now, the first\nthing we do is check if it's in the dictionary. It is, so we just\nreturn the 1 directly.",
    "start": "838550",
    "end": "846580"
  },
  {
    "text": "Check if the other half\nis in the dictionary. Return the 1 directly. And now, we've got\na value for fib 3.",
    "start": "846580",
    "end": "852190"
  },
  {
    "text": "Before returning it, let's\nstore it in our dictionary. So I just calculated\nwhat fib 3 was.",
    "start": "852190",
    "end": "857920"
  },
  {
    "text": "Let's put it in. The key is 3 and fib 3 is 2.",
    "start": "857920",
    "end": "864820"
  },
  {
    "text": "So far, so good. It's pretty similar to\nwhat we've done before, except that we're storing\nthis value in the dictionary.",
    "start": "864820",
    "end": "870170"
  },
  {
    "text": "So now, we explore the\nright half of this fib 4, fib 3 plus fib 2.",
    "start": "870170",
    "end": "875380"
  },
  {
    "text": "It's already in the\ndictionary, so it immediately returns this addition. Now, we know what fib 4, is so\nwe add it to our dictionary.",
    "start": "875380",
    "end": "883870"
  },
  {
    "text": "fib 4 is 3. Explore the right part of\nfib 5, so fib 4 plus fib 3.",
    "start": "883870",
    "end": "891290"
  },
  {
    "text": "Do we go further now? In the previous case,\nwe explored 2 and 1. In this case, do\nwe keep exploring?",
    "start": "891290",
    "end": "897740"
  },
  {
    "text": "No, exactly, because\nour base case says, if 3 is already\nin the dictionary, simply return the value\nassociated with it.",
    "start": "897740",
    "end": "904769"
  },
  {
    "text": "So yep, there it is right there. We added it a while ago. We just return\nthe 2 immediately. No need to go down this path.",
    "start": "904770",
    "end": "912800"
  },
  {
    "text": "So now fib 5 is\ndone pretty quickly. So the right half. So that means we have\nthe value for fib 5",
    "start": "912800",
    "end": "918650"
  },
  {
    "text": "and we add it to a dictionary. We explore the\nright half of fib 6. Remember, beforehand, I\nsaid we were not done.",
    "start": "918650",
    "end": "925560"
  },
  {
    "text": "We don't need to explore\nthis fib 4 anymore because we added it to\nour dictionary long ago.",
    "start": "925560",
    "end": "931950"
  },
  {
    "text": "So now, all we need\nto do is look up the value associated with\n4 from our dictionary.",
    "start": "931950",
    "end": "937820"
  },
  {
    "text": "So boom, there it is. And then we can just add\nfib 5 and fib 4 together and get the value for fib 6,\nstore it in the dictionary,",
    "start": "937820",
    "end": "945560"
  },
  {
    "text": "and in this case, it's the end. We don't need to do anything\nelse with this value, passing it back or\nanything like that.",
    "start": "945560",
    "end": "953460"
  },
  {
    "text": "So we're not recalculating\nanything else. We're just checking the\ndictionary, and if need be,",
    "start": "953460",
    "end": "958740"
  },
  {
    "text": "we calculate it. So it's an improvement. But how much of an\nimprovement is it, actually?",
    "start": "958740",
    "end": "965820"
  },
  {
    "text": "So if we run this function--\nand it's in the Python code. You can play around\nwith it yourself.",
    "start": "965820",
    "end": "971160"
  },
  {
    "text": "If you run the function\nthat we originally wrote, the one where we don't\nstore anything in dictionary,",
    "start": "971160",
    "end": "978450"
  },
  {
    "text": "if we try to calculate\nFibonacci of 34, it results in 11.5\nmillion function calls.",
    "start": "978450",
    "end": "987940"
  },
  {
    "text": "That's a lot of function\ncalls, because even fib 6 had fib 3 being called\ntwice, fib 4 being called--",
    "start": "987940",
    "end": "995590"
  },
  {
    "text": "fib 3 being called three times,\nfib 4 being called twice, things like that. So can you imagine\nhow many times",
    "start": "995590",
    "end": "1001410"
  },
  {
    "text": "fib 3 will be called when we\nare trying to calculate fib 34? Probably thousands, if not more.",
    "start": "1001410",
    "end": "1009089"
  },
  {
    "text": "So overall, the number of\nfunction calls we're making is 11.5 million with\nour original code.",
    "start": "1009090",
    "end": "1014400"
  },
  {
    "text": "But the efficient\nversion only makes 65.",
    "start": "1014400",
    "end": "1020480"
  },
  {
    "text": "It's not like we went from\n11.5 million to 2 million.",
    "start": "1020480",
    "end": "1025849"
  },
  {
    "text": "We went from the\norder of millions to tens, which is really, really\nimpressive in terms of speed.",
    "start": "1025849",
    "end": "1033073"
  },
  {
    "text": "So if you try to\nrun this program, it'll take a couple\nof seconds for fib 34, but the efficient\none will be instant.",
    "start": "1033073",
    "end": "1039829"
  },
  {
    "text": "And all of these function\ncalls have some overhead. You need to create an\nenvironment in Python.",
    "start": "1039829",
    "end": "1045290"
  },
  {
    "text": "It needs to pass\nthese parameters. So all of these function\ncalls take a lot of time, whereas a dictionary lookup\nis basically instantaneous.",
    "start": "1045290",
    "end": "1054020"
  },
  {
    "text": "So in this particular\ncase, we've given up some of our\nmemory to store values.",
    "start": "1054020",
    "end": "1060470"
  },
  {
    "text": "The dictionary is storing 34\nentries, which is not much, but there are applications\nwhere you can't spare 34 entries",
    "start": "1060470",
    "end": "1067790"
  },
  {
    "text": "in your memory, in which case,\nyou might spare some time to continue calculating\nwithout taking up some memory.",
    "start": "1067790",
    "end": "1075410"
  },
  {
    "text": "So there's a little bit of\ntrade-off between these two programs. One of them doesn't store,\nanything but is slow.",
    "start": "1075410",
    "end": "1081090"
  },
  {
    "text": "The other one stores\nthings, but is fast. Let's look at one\nmore example where",
    "start": "1081090",
    "end": "1087679"
  },
  {
    "text": "we do Fibonacci on numerics. And I don't know when you'd use\nFibonacci in your real world--",
    "start": "1087680",
    "end": "1094400"
  },
  {
    "text": "real life, but knowing\nall the possible ways you can make a score\nof x in basketball",
    "start": "1094400",
    "end": "1099620"
  },
  {
    "text": "is a little bit more useful. So let's think about\nthis problem recursively. Certainly, we could do\nit iteratively and brute",
    "start": "1099620",
    "end": "1107180"
  },
  {
    "text": "force our way through all\nthe possible combinations of scores. So in basketball,\nyou can make a basket",
    "start": "1107180",
    "end": "1113240"
  },
  {
    "text": "that's worth 1 point,\n2 points, or 3 points. So you can think about all\nthe possible combinations you can make to give\nyou some score of x.",
    "start": "1113240",
    "end": "1122070"
  },
  {
    "text": "We're going to think about\nthis problem recursively. So let's start with\nour base cases.",
    "start": "1122070",
    "end": "1128400"
  },
  {
    "text": "Base cases-- we've\ngot three of them. So if we think about a score\nof 1, so if x is equal to 1,",
    "start": "1128400",
    "end": "1135600"
  },
  {
    "text": "so that means if we have a\nscore of 1 in basketball, what are all the possible\nways we could have made a 1?",
    "start": "1135600",
    "end": "1141179"
  },
  {
    "text": "Well, you could just score\none point and then that's it. I just did 1 plus 0 just to\nemphasize that we're just",
    "start": "1141180",
    "end": "1147210"
  },
  {
    "text": "scoring 1 and nothing else. If we make a basket\nthat's worth 2 points-- or if we have 2\npoints in basketball,",
    "start": "1147210",
    "end": "1153870"
  },
  {
    "text": "what are all the possible\nways we could have made 2? Well, we could have\nscored a 1 and a 1,",
    "start": "1153870",
    "end": "1159120"
  },
  {
    "text": "or we could have just\nscored 2 right off the bat. So that's two possible\nways to make a score of 2.",
    "start": "1159120",
    "end": "1165640"
  },
  {
    "text": "And similarly, to\nmake a score of 3, what are all the\npossible ways well? Well, we could have scored\na 1, then a 1, then a 1, we",
    "start": "1165640",
    "end": "1172000"
  },
  {
    "text": "could have scored\na 2 and a 1, or we could have square root\nof 3 right off the bat. So that's three different\nways you can make a score of 3",
    "start": "1172000",
    "end": "1178840"
  },
  {
    "text": "in basketball. Everyone with me so far? These are our base cases.",
    "start": "1178840",
    "end": "1186200"
  },
  {
    "text": "Because the recursive\nstep will be very-- will blow your mind. It's so simple. So the recursive\nstep looks like this.",
    "start": "1186200",
    "end": "1194440"
  },
  {
    "text": " Now, somebody give me-- what's a reasonable\nbasketball score for a team?",
    "start": "1194440",
    "end": "1203740"
  },
  {
    "text": "87? OK. It's been, probably,\n25 years since I've",
    "start": "1203740",
    "end": "1209230"
  },
  {
    "text": "played pro basketball\nin grade 5, you guys, so I forgot what's\na reasonable score.",
    "start": "1209230",
    "end": "1214360"
  },
  {
    "text": "So 87. So let's say, now, we're not\ndealing with our base case. We're dealing with some\nnumber that's bigger",
    "start": "1214360",
    "end": "1221649"
  },
  {
    "text": "than one of these base cases. How do we think about\nthis problem recursively?",
    "start": "1221650",
    "end": "1227250"
  },
  {
    "text": "Well, there's three\npossibilities. If I have a final\nscore of 87, let's",
    "start": "1227250",
    "end": "1233690"
  },
  {
    "text": "say that I think\nabout the score of 86.",
    "start": "1233690",
    "end": "1240590"
  },
  {
    "text": "If I know all the possible\nways I can make a score of 86, all I need to do is\nadd 1 to that score.",
    "start": "1240590",
    "end": "1250000"
  },
  {
    "text": "It'll give me 87. So that's one possibility here.",
    "start": "1250000",
    "end": "1255970"
  },
  {
    "text": "But that's not the\nonly possibility, because I could have a score of\n85, and if I add 2 to that 85--",
    "start": "1255970",
    "end": "1266930"
  },
  {
    "text": "not two counts, just the score. If I have an\noriginal score of 85, if I just add 2 to\nthat score, it gives me",
    "start": "1266930",
    "end": "1273590"
  },
  {
    "text": "my desired score of 87. So if I know the possible\ncombinations to make 85,",
    "start": "1273590",
    "end": "1280070"
  },
  {
    "text": "then I know that all I need\nto do is add a 2 to my score and that will give me 87.",
    "start": "1280070",
    "end": "1286010"
  },
  {
    "text": "And then the last possibility\nis to know all the possible ways",
    "start": "1286010",
    "end": "1292370"
  },
  {
    "text": "to make 84-- a score of 84-- because then I would take\nthat score and add a 3",
    "start": "1292370",
    "end": "1298880"
  },
  {
    "text": "to it to give me 87. So I'm using my base cases\nto guide my recursive step.",
    "start": "1298880",
    "end": "1306419"
  },
  {
    "text": "So the number of ways I\ncan make a score of 87 is the sum of all the possible\nways I can make 86 or 85",
    "start": "1306420",
    "end": "1315330"
  },
  {
    "text": "or 84, because if I've made\n86, I would just add 1 to it,",
    "start": "1315330",
    "end": "1321600"
  },
  {
    "text": "if I made 85, I add 2\nto it, and if I made 84, I'd add 3 to the score.",
    "start": "1321600",
    "end": "1326890"
  },
  {
    "text": "So that's essentially what\nthis recursive step is doing. I've got, these are\nall the possible ways",
    "start": "1326890",
    "end": "1333150"
  },
  {
    "text": "I can make a score of 80-- x minus 1. So 87, 86.",
    "start": "1333150",
    "end": "1338730"
  },
  {
    "text": "And that's just me\ncalling my function. So score count x minus\n1, score count x.",
    "start": "1338730",
    "end": "1344700"
  },
  {
    "text": "Plus all the possible ways\nto make a score of x minus 2 plus all the possible ways\nto make a score of x minus 3.",
    "start": "1344700",
    "end": "1351500"
  },
  {
    "text": "So if I add all these\nthree ways together, I would get all the possible\nways I can make a score of x.",
    "start": "1351500",
    "end": "1358310"
  },
  {
    "text": " Does that make sense? ",
    "start": "1358310",
    "end": "1364130"
  },
  {
    "text": "OK. So that's it. It's pretty clean code. It looks really nice.",
    "start": "1364130",
    "end": "1370400"
  },
  {
    "text": "If we were to write\nthis iteratively, it would be a mess,\nbecause we'd probably have a whole bunch of nested\nloops to try to brute force",
    "start": "1370400",
    "end": "1377840"
  },
  {
    "text": "all the possible combinations\nof scores that we can make, and it wouldn't look\nvery nice, very pythonic.",
    "start": "1377840",
    "end": "1384890"
  },
  {
    "text": " So let's do a trace of this code\njust to bring it all together.",
    "start": "1384890",
    "end": "1393809"
  },
  {
    "text": "The trace will be very similar\nto the Fibonacci trace, except that now, we have\nthree paths to explore",
    "start": "1393810",
    "end": "1399510"
  },
  {
    "text": "before having a return value. So for a score of\n6, I would explore,",
    "start": "1399510",
    "end": "1404880"
  },
  {
    "text": "how can I make a score of 5? And of course, I will\nexplore how can I make a score of 4 and 3,\nbut I'm not there yet.",
    "start": "1404880",
    "end": "1412890"
  },
  {
    "text": "First, I need to explore\nhow to make a score of 5, which is a function call. This one will\nexplore how to make a score of 4, and of course,\na 3 and 2, but not just yet.",
    "start": "1412890",
    "end": "1421950"
  },
  {
    "text": "A score of 4 will lead\nus to our base cases. It's just how to make a\nscore of 3 and 2 and 1.",
    "start": "1421950",
    "end": "1428680"
  },
  {
    "text": "These are base cases. They immediately return and we\nknow how to make a score of 4. A score of 3 is also a\nbase case and a score of 2",
    "start": "1428680",
    "end": "1435760"
  },
  {
    "text": "is also a base case. So these ones will\nimmediately return to give us the score of 5.",
    "start": "1435760",
    "end": "1440790"
  },
  {
    "text": "So now we know how\nto make a score of 5, we need to follow through\nhow to make a score of 4, which is just 3 and 2 and 1.",
    "start": "1440790",
    "end": "1447180"
  },
  {
    "text": "Whoops, I should\nchange that to be a 1. And then how to\nmake a score of 3.",
    "start": "1447180",
    "end": "1452760"
  },
  {
    "text": "And that's just a base case. So very similar traits\nas the Fibonacci code.",
    "start": "1452760",
    "end": "1458585"
  },
  {
    "text": " Questions about those examples?",
    "start": "1458585",
    "end": "1465750"
  },
  {
    "text": "Are they OK? Do they make sense? OK.",
    "start": "1465750",
    "end": "1470840"
  },
  {
    "text": "So there is one exercise\nin the Python file. It's for at home.",
    "start": "1470840",
    "end": "1476940"
  },
  {
    "text": "I would like you to try\nto memo-ize this code. So memo-ize means,\nbasically, try",
    "start": "1476940",
    "end": "1482650"
  },
  {
    "text": "to use a memo, like a\ndictionary, to store values as you calculate\nthem, because you",
    "start": "1482650",
    "end": "1488260"
  },
  {
    "text": "see that it's going to be just\nas inefficient as the Fibonacci code. So here, we're\ncalculating a score of 4",
    "start": "1488260",
    "end": "1493660"
  },
  {
    "text": "again where we had\ncalculated it way back here. And so try your hand at adding\na dictionary to this code",
    "start": "1493660",
    "end": "1502299"
  },
  {
    "text": "to try to speed it up. ",
    "start": "1502300",
    "end": "1507310"
  },
  {
    "text": "So the second half\nof this lecture, we're now going to move away\nfrom recursion on numbers",
    "start": "1507310",
    "end": "1514120"
  },
  {
    "text": "and having these nice\nmathematical operations that we can just translate\nto code easily and start",
    "start": "1514120",
    "end": "1520600"
  },
  {
    "text": "looking at recursion on\nnon-numerical things. And we're just going to look\nat lists, but again, as I said,",
    "start": "1520600",
    "end": "1527990"
  },
  {
    "text": "you can apply these\nvery similar codes to any sequences of\nvalues, tuples or strings",
    "start": "1527990",
    "end": "1534550"
  },
  {
    "text": "or things like that. So the reason why\nwe're looking at lists is because lists are\nnaturally recursive.",
    "start": "1534550",
    "end": "1540730"
  },
  {
    "text": "So one of the motivations I gave\nat the end of the last lecture is that we have lists that\ncan have elements that",
    "start": "1540730",
    "end": "1548230"
  },
  {
    "text": "are other lists that\ncan have elements that are other lists that can\nhave elements of other lists. So without knowing how deep\nthese lists within lists",
    "start": "1548230",
    "end": "1556780"
  },
  {
    "text": "within lists go, it's\ngoing to be really hard to write iterative code. It's possible, but it's\ngoing to be really hard.",
    "start": "1556780",
    "end": "1564490"
  },
  {
    "text": "And instead, we're going to\nsee that the recursive version of this code is going\nto be a lot more",
    "start": "1564490",
    "end": "1570130"
  },
  {
    "text": "intuitive in the long run-- maybe not right off the\nbat, but definitely,",
    "start": "1570130",
    "end": "1576970"
  },
  {
    "text": "it's a lot easier to\nwrite and to read. So let's think about\nlists in a recursive way.",
    "start": "1576970",
    "end": "1586809"
  },
  {
    "text": "So if we were doing\niteratively, what we'd say is, we're going to loop through\neach element and do something.",
    "start": "1586810",
    "end": "1592660"
  },
  {
    "text": "The problem we're going\nto solve is figuring out the sum of all the elements\nin a list to begin with.",
    "start": "1592660",
    "end": "1598170"
  },
  {
    "text": "So iteratively, we\njust said we loop over each element in the list\nand keep it in our result.",
    "start": "1598170",
    "end": "1603960"
  },
  {
    "text": "So I've got these\nstate variables I talked about last\ntime, result in e, that keep track of which element\nwe're at and what the value is.",
    "start": "1603960",
    "end": "1612450"
  },
  {
    "text": "Recursively,\nremember, we're going to make all these function\ncalls until we get to a base",
    "start": "1612450",
    "end": "1618530"
  },
  {
    "text": "case, at which point, we're\ngoing to start to build up our result. So how can we think\nabout this list recursively?",
    "start": "1618530",
    "end": "1628480"
  },
  {
    "text": "Well, let's say\nthat we have a list and we want to find the\nsum of all its elements. That's our original problem.",
    "start": "1628480",
    "end": "1636590"
  },
  {
    "text": "Now, let's say that we\ntake the first element and we just extract it out.",
    "start": "1636590",
    "end": "1643980"
  },
  {
    "text": "We have this list with\na bunch of elements. Let's take the first one. We know it's a 10.",
    "start": "1643980",
    "end": "1649380"
  },
  {
    "text": "And then let's consider\nthe remaining elements, so the 20 onward.",
    "start": "1649380",
    "end": "1656130"
  },
  {
    "text": "If I take my 10 and\nI know the answer",
    "start": "1656130",
    "end": "1663830"
  },
  {
    "text": "to the sum of all the\nelements in 20 onward, then all I need to\ndo to figure out",
    "start": "1663830",
    "end": "1670009"
  },
  {
    "text": "the sum of my original\nlist, this one here, is to say it's the 10\nplus the sum of whatever",
    "start": "1670010",
    "end": "1677300"
  },
  {
    "text": "the sum of the 20 onward is. Now, the sum for\nelements 20 onward",
    "start": "1677300",
    "end": "1683990"
  },
  {
    "text": "is the same problem again. It's the problem\nof finding the sum of all the elements in a list.",
    "start": "1683990",
    "end": "1689420"
  },
  {
    "text": "It just so happens that our\nlist is now our original list without that first\nelement in it.",
    "start": "1689420",
    "end": "1696810"
  },
  {
    "text": "Does everyone understand that? We've got our original\nproblem and we've just made the same problem again,\njust a slightly different",
    "start": "1696810",
    "end": "1703590"
  },
  {
    "text": "version of it-- all the list\nexcept for that first element. So now, we do the same thing.",
    "start": "1703590",
    "end": "1709289"
  },
  {
    "text": "Let's say this is our new list. We extract the first\nelement from it and we consider the elements\nexcept for that first one",
    "start": "1709290",
    "end": "1718049"
  },
  {
    "text": "as a new list. And again, if I knew what the\nsum of 30 all the way onto 60",
    "start": "1718050",
    "end": "1723780"
  },
  {
    "text": "was, all I need to do is add\nit to the 20 that I extracted and I would know the\nsum of this list.",
    "start": "1723780",
    "end": "1729510"
  },
  {
    "text": "So we keep doing that. We take our list,\nextract the 30, and consider the remaining\nelements as a list.",
    "start": "1729510",
    "end": "1737220"
  },
  {
    "text": "Same deal. If I knew what 40\nplus 50 plus 60 was, the sum of all the\nelements in this list,",
    "start": "1737220",
    "end": "1742650"
  },
  {
    "text": "I just add it to the 30\nand I have the answer to that problem. And we keep doing this,\nextracting an element",
    "start": "1742650",
    "end": "1749170"
  },
  {
    "text": "and considering the\nremaining lists, all the way down to when we have a list\nwith just one element in it.",
    "start": "1749170",
    "end": "1755390"
  },
  {
    "text": "Well, this is a pretty\nsimple problem to solve. If I have a list with\none element in it, the sum of the elements\nwithin that list",
    "start": "1755390",
    "end": "1762160"
  },
  {
    "text": "is just the value\nof that element. It's just 60. So very simple problem.",
    "start": "1762160",
    "end": "1767200"
  },
  {
    "text": "No need to keep going\nfurther, dividing this problem into smaller pieces. I already know the\nanswer to this one.",
    "start": "1767200",
    "end": "1773403"
  },
  {
    "text": "It's very simple. So this is our base case. And we know the sum of the\nelements in a list with length",
    "start": "1773403",
    "end": "1780720"
  },
  {
    "text": "1 is that element. So once we reach the base case,\nwe build back up our result.",
    "start": "1780720",
    "end": "1787899"
  },
  {
    "text": "We take the 60 and we had\nextracted the 50 originally,",
    "start": "1787900",
    "end": "1793120"
  },
  {
    "text": "so we're going to\npass the sum back up to whoever called it,\nwhich was the function that extracted the 50.",
    "start": "1793120",
    "end": "1799190"
  },
  {
    "text": "So now, the 50\nplus the 60 is 110. Now, this 110 gets\npassed back up the chain.",
    "start": "1799190",
    "end": "1804670"
  },
  {
    "text": "When we extracted the\n40, we said, well, I'm going to add the\n40 to the sum of the 50 and the 60, 110, which is 150.",
    "start": "1804670",
    "end": "1811570"
  },
  {
    "text": "Pass that answer\nback up the chain. When I extracted the\n30, I said I was just going to add the 30 with the sum\nof the remaining things, which",
    "start": "1811570",
    "end": "1818950"
  },
  {
    "text": "I figured out is 150. The 20-- I had\nextracted it-- becomes 20 plus the sum of everybody\nelse, which is 180.",
    "start": "1818950",
    "end": "1826570"
  },
  {
    "text": "So the sum is 200. And then finally,\nmy original question was to extract the 10,\nadd it to everything else,",
    "start": "1826570",
    "end": "1832940"
  },
  {
    "text": "which is the 200\nthat we figured out. So the full sum is 210.",
    "start": "1832940",
    "end": "1838669"
  },
  {
    "text": "Does that make sense,\nthis animation? OK. So we've got the division all\nthe way down to the base case",
    "start": "1838670",
    "end": "1844309"
  },
  {
    "text": "and building back up the result.\nSo let's try to write it. So we're going to\nwrite it in pieces.",
    "start": "1844310",
    "end": "1850110"
  },
  {
    "text": "So the function is\ncalled total_recur. It takes in a list l. We're going to\nrecursively figure out",
    "start": "1850110",
    "end": "1855140"
  },
  {
    "text": "the sum of all the\nelements in this list. So we can have a base case\nwhen the list is empty.",
    "start": "1855140",
    "end": "1860620"
  },
  {
    "text": "We can return 0. Up to you. Another base case,\nwhich is the one that I illustrated on\nthe previous slide,",
    "start": "1860620",
    "end": "1866558"
  },
  {
    "text": "is when the length\nof the list is 1. So when the length\nof the list is 1,",
    "start": "1866558",
    "end": "1872100"
  },
  {
    "text": "what's the sum going to be? No need for recursion. It's just that element. And so in these\nslides, what I've also",
    "start": "1872100",
    "end": "1878140"
  },
  {
    "text": "included in addition to the\ncode is a little example. So it helps you think about\nwhat the function returns.",
    "start": "1878140",
    "end": "1884559"
  },
  {
    "text": "So in this base case, when\nthe length of the list is 1, the list would look\nsomething like this. And all I'd need to do is\nreturn l at index 0, so the 50.",
    "start": "1884560",
    "end": "1893860"
  },
  {
    "text": "And that's my sum. And that's what I'm doing\nhere, returning l at index 0.",
    "start": "1893860",
    "end": "1899350"
  },
  {
    "text": "Cool. Now, the recursive step. Remember, in the recursive step,\nI extracted the first element",
    "start": "1899350",
    "end": "1906040"
  },
  {
    "text": "and I said, let me save\nthis first element. So here it is being\nsaved as l at index 0.",
    "start": "1906040",
    "end": "1912190"
  },
  {
    "text": "And I'm going to\nadd it to something. So in this example\nhere, I've got this list that's longer than 1.",
    "start": "1912190",
    "end": "1918850"
  },
  {
    "text": "I'm extracting\nthe 30, l index 0, and I'm going to\nadd it to something.",
    "start": "1918850",
    "end": "1923920"
  },
  {
    "text": "Well, that something\nbased on the slides. The previous slide, where\nI did the animation,",
    "start": "1923920",
    "end": "1930940"
  },
  {
    "text": "is going to be us putting\nour trust in the fact that we write this\nfunction correctly.",
    "start": "1930940",
    "end": "1938299"
  },
  {
    "text": "That something is going\nto be us figuring out what the sum is of 40 and 50.",
    "start": "1938300",
    "end": "1945403"
  },
  {
    "text": "It's the same\nproblem we're trying to solve right now--\nthe sum of 30, 40, 50-- except that now, I'm just going\nto take the sum of just the 40",
    "start": "1945403",
    "end": "1952220"
  },
  {
    "text": "and the 50. So that something\nbecomes the same function we're writing right now,\ntotal_recur, except that I'm",
    "start": "1952220",
    "end": "1961919"
  },
  {
    "text": "not calling it on l, not the\nwhole thing all over again. That would be bad. But I'm going to call it\non L from index 1 onward,",
    "start": "1961920",
    "end": "1969030"
  },
  {
    "text": "so essentially removing\nthat first element. Is everyone OK with that?",
    "start": "1969030",
    "end": "1974540"
  },
  {
    "text": " So that's it.",
    "start": "1974540",
    "end": "1979790"
  },
  {
    "text": "That's the function. Nothing else to write. No loop. We've basically\nwritten a function",
    "start": "1979790",
    "end": "1984860"
  },
  {
    "text": "assuming that we wrote\nthe function correctly, which is a very strange way\nto think about recursion,",
    "start": "1984860",
    "end": "1991903"
  },
  {
    "text": "but that's essentially\nwhat it is. You're trusting yourself to\nwrite this function correctly such that your recursive step\nleads you to the base case",
    "start": "1991903",
    "end": "1999480"
  },
  {
    "text": "so that you can build back\nup the result correctly. So there's a lot of\ntrust involved in writing these functions recursively.",
    "start": "1999480",
    "end": "2005910"
  },
  {
    "text": " So I'm not going to go\nthrough the Python Tutor,",
    "start": "2005910",
    "end": "2012640"
  },
  {
    "text": "but you should definitely\ngo through it on your own as a practice for the\nquiz, things like that.",
    "start": "2012640",
    "end": "2019380"
  },
  {
    "text": "Let's have you write this, then. So it's going to be\na slight modification to the code we just wrote.",
    "start": "2019380",
    "end": "2025620"
  },
  {
    "text": "So it's going to take in\na list as its parameter, and instead of summing\nthe elements in the list",
    "start": "2025620",
    "end": "2032509"
  },
  {
    "text": "like we did-- 10 plus 20 plus 30, whatever-- I would like you\nto sum the lengths of the elements in the list.",
    "start": "2032510",
    "end": "2038929"
  },
  {
    "text": "So if I pass it\nin this function, it's going to sum\nthe length of this 2 plus the length of this 1 plus\nthe length of this 5, 2 plus 1",
    "start": "2038930",
    "end": "2046190"
  },
  {
    "text": "plus 5. So it'll be a very slight\nmodification to the code that we just looked at.",
    "start": "2046190",
    "end": "2052109"
  },
  {
    "text": "And here it is on line 70-ish. So think about the base case.",
    "start": "2052110",
    "end": "2057860"
  },
  {
    "text": "If you have a list\nwith one element in it, what do you return? And if you have a list\nwith many elements, how can",
    "start": "2057860",
    "end": "2063050"
  },
  {
    "text": "you put your trust in\nsomething that you just wrote to help you get to the answer?",
    "start": "2063050",
    "end": "2069800"
  },
  {
    "text": "What do you guys have for me? So let's start\nwith the base case. And if you're having\ntrouble, I encourage",
    "start": "2069800",
    "end": "2076520"
  },
  {
    "text": "you to, just in\na little comment, just write down what that\nbase case looks like,",
    "start": "2076520",
    "end": "2082079"
  },
  {
    "text": "like I did in the slides. It looks like this. So what would I return if I have\na list with one element in it?",
    "start": "2082080",
    "end": "2088980"
  },
  {
    "text": "Yeah. AUDIENCE: [INAUDIBLE] ANA BELL: Yep, exactly.",
    "start": "2088980",
    "end": "2094780"
  },
  {
    "text": "So we would return the\nlength of that element. So the length of whatever\nthis is, ab, whatever.",
    "start": "2094780",
    "end": "2101319"
  },
  {
    "text": "Awesome. How do we do the recursive step?",
    "start": "2101320",
    "end": "2106610"
  },
  {
    "text": "Yeah. AUDIENCE: [INAUDIBLE]",
    "start": "2106610",
    "end": "2113990"
  },
  {
    "text": "ANA BELL: Yes, exactly. Total len_recur with what list?",
    "start": "2113990",
    "end": "2120680"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] ANA BELL: Yep. So we're going to\nextract that first one.",
    "start": "2120680",
    "end": "2126468"
  },
  {
    "text": "So this will give us the sum of\nthe lengths of everybody else. AUDIENCE: [INAUDIBLE]",
    "start": "2126468",
    "end": "2132620"
  },
  {
    "text": "ANA BELL: Exactly. So we also need to add it to-- yeah, I'll add a 0.",
    "start": "2132620",
    "end": "2139710"
  },
  {
    "text": "So it's fine to do it either\nbefore or after, because we're just summing these two values. So doesn't matter the order\nthat you're summing them.",
    "start": "2139710",
    "end": "2147839"
  },
  {
    "text": "So that's perfect. Any questions about this code? ",
    "start": "2147840",
    "end": "2154745"
  },
  {
    "text": "Yes. AUDIENCE: [INAUDIBLE] is it more\nor less efficient than doing",
    "start": "2154745",
    "end": "2165410"
  },
  {
    "text": "the classic first? ANA BELL: Than doing the what? AUDIENCE: The classic\none [INAUDIBLE].. ANA BELL: So in\nterms of efficiency,",
    "start": "2165410",
    "end": "2174260"
  },
  {
    "text": "this function will be slightly\nless efficient, I would say,",
    "start": "2174260",
    "end": "2181570"
  },
  {
    "text": "because there's a little\noverhead in actually making a function call, whereas if\nyou use a built-in operator,",
    "start": "2181570",
    "end": "2188980"
  },
  {
    "text": "it's been optimized\nto work pretty fast. Yeah. AUDIENCE: [INAUDIBLE]\ndoing the plus equals,",
    "start": "2188980",
    "end": "2195670"
  },
  {
    "text": "it's not doing this\nin the background? ANA BELL: No. When it's doing plus\nequals, it's definitely not doing this in the background.",
    "start": "2195670",
    "end": "2201348"
  },
  {
    "text": "Exactly. Yeah. But this is just-- I mean, I'm trying to show\nyour recursion on something",
    "start": "2201348",
    "end": "2209570"
  },
  {
    "text": "that you wouldn't\ntypically use recursion on just to help illustrate\nthe idea of recursion.",
    "start": "2209570",
    "end": "2215900"
  },
  {
    "text": "Certainly, you can use an\niterative algorithm, obviously, to calculate the sum\nof these elements. And it's more\nintuitive, more in line",
    "start": "2215900",
    "end": "2222349"
  },
  {
    "text": "with what we've been\nlearning so far. ",
    "start": "2222350",
    "end": "2230950"
  },
  {
    "text": "Excellent. So now, let's look at a\nslightly different problem.",
    "start": "2230950",
    "end": "2237829"
  },
  {
    "text": "So instead of finding the sum\nof all the elements in a list, let's tackle the\nproblem of looking",
    "start": "2237830",
    "end": "2243070"
  },
  {
    "text": "for an element in a list. Completely different,\nbut we're still doing some sort of\nlist operations.",
    "start": "2243070",
    "end": "2248697"
  },
  {
    "text": "We're going to start with\nan implementation that's not quite right. And we'll see why\nin a little bit.",
    "start": "2248697",
    "end": "2254540"
  },
  {
    "text": "So let's follow the\nsame sort of pattern that we've seen in\nthe previous one. So let's consider\na list of length 1.",
    "start": "2254540",
    "end": "2262440"
  },
  {
    "text": "In this particular\ncase, if I have a list with only one element\nin it, how do I",
    "start": "2262440",
    "end": "2267510"
  },
  {
    "text": "know if that element is\nthe one I'm looking for? Well, I'm just going\nto return this Boolean,",
    "start": "2267510",
    "end": "2273690"
  },
  {
    "text": "whether l at index 0-- that element-- is the one\nI'm looking for, the e. So notice, this\nn list is passing",
    "start": "2273690",
    "end": "2279780"
  },
  {
    "text": "in the list itself and the\nelement I'm looking for. ",
    "start": "2279780",
    "end": "2287440"
  },
  {
    "text": "I think-- OK.",
    "start": "2287440",
    "end": "2292680"
  },
  {
    "text": "So then let's look at\nthe recursive step. The recursive step, in\nthis particular case,",
    "start": "2292680",
    "end": "2299010"
  },
  {
    "text": "let's say it says, well else. We might think to\nsay, well, if it's not",
    "start": "2299010",
    "end": "2304940"
  },
  {
    "text": "the one I'm looking\nfor, then let's look in the remainder of the list. So like we did in\nthe previous case,",
    "start": "2304940",
    "end": "2311630"
  },
  {
    "text": "let's apply the\nsame function we're writing right now\nto all the elements except for the first one.",
    "start": "2311630",
    "end": "2318200"
  },
  {
    "text": "And we're still\nlooking for element e in those remaining elements.",
    "start": "2318200",
    "end": "2325200"
  },
  {
    "text": "So we can test it out. And if we actually run\nit-- again, please, I encourage you to do\nPython Tutor on your own.",
    "start": "2325200",
    "end": "2330918"
  },
  {
    "text": "But we can test it out and say,\nif, in this particular case, 2,",
    "start": "2330918",
    "end": "2336310"
  },
  {
    "text": "5, 8, 1, if I actually run this\ncode, it will give me true. So it found the 1 inside the\nlist 2, 5, 8, 1, which is good.",
    "start": "2336310",
    "end": "2346690"
  },
  {
    "text": "It's exactly what we wanted. But if I change my\ninput list slightly",
    "start": "2346690",
    "end": "2352170"
  },
  {
    "text": "and I've got 2, 1,\n5, 8, the element I'm looking for is here. The code will actually give\nme false, the one that I just",
    "start": "2352170",
    "end": "2359960"
  },
  {
    "text": "wrote, which is not OK. I see the 1 is right over there.",
    "start": "2359960",
    "end": "2365859"
  },
  {
    "text": "And so what exactly is going on? We can run the code here.",
    "start": "2365860",
    "end": "2373859"
  },
  {
    "text": "So this is this code here. If you see that it gives\nyou the incorrect value, one thing you could do\nwhen you're doing recursion",
    "start": "2373860",
    "end": "2380923"
  },
  {
    "text": "is to put a print statement\nwithin the function itself. So we can print, maybe,\nthe list we're currently at",
    "start": "2380923",
    "end": "2388560"
  },
  {
    "text": "and the element\nwe're looking for and see exactly what's going on. So if I run it,\nit will say, well,",
    "start": "2388560",
    "end": "2395220"
  },
  {
    "text": "first time through\nthe function call, I'm looking for the\nnumber 1 in this list.",
    "start": "2395220",
    "end": "2400890"
  },
  {
    "text": "The next time, I'm looking\nfor the 1 in this list. The next time, I'm looking\nfor the 1 in this list.",
    "start": "2400890",
    "end": "2407250"
  },
  {
    "text": "And the last time,\nfor my function call, I'm looking for\nthe 1 in this list.",
    "start": "2407250",
    "end": "2413600"
  },
  {
    "text": "And already, we see\nsomething went wrong because as I was looking\nthrough these lists,",
    "start": "2413600",
    "end": "2420920"
  },
  {
    "text": "I'm basically skipping\nover important elements.",
    "start": "2420920",
    "end": "2426309"
  },
  {
    "text": "What this code is\nactually doing is only checking if the last element\nis the one you're looking for,",
    "start": "2426310",
    "end": "2434560"
  },
  {
    "text": "because it basically ignores\nthat first element in the code. The code here, yes, it\nextracts that first element,",
    "start": "2434560",
    "end": "2443230"
  },
  {
    "text": "but it doesn't do\nanything with it.  So that's our problem.",
    "start": "2443230",
    "end": "2450369"
  },
  {
    "text": "What we want to do is still\nlook at further elements in the list. So that part of the\ncode is correct.",
    "start": "2450370",
    "end": "2456490"
  },
  {
    "text": "But we only want to do it\nin a certain situation. And that situation is when the\nelement that we just extracted,",
    "start": "2456490",
    "end": "2464290"
  },
  {
    "text": "l at index 0, is not the\none we're looking for, the little else case.",
    "start": "2464290",
    "end": "2471990"
  },
  {
    "text": "So we still want to\nextract the first element if we have a list with more\nthan one element in it.",
    "start": "2471990",
    "end": "2477550"
  },
  {
    "text": "But as we've extracted\nit, check if it's the one we're looking for. If it is, return true.",
    "start": "2477550",
    "end": "2483510"
  },
  {
    "text": "No need to keep\nsearching the rest of the elements in the list. If it's not the one we're\nlooking for, this else here,",
    "start": "2483510",
    "end": "2490170"
  },
  {
    "text": "then we can look at the\nremaining elements in the list and run the exact\nsame function we're writing to check if the element\nis in the remaining list.",
    "start": "2490170",
    "end": "2499839"
  },
  {
    "text": "Does this code make sense? Is it all right? OK. So the way I wrote this\ncode is how I personally",
    "start": "2499840",
    "end": "2508550"
  },
  {
    "text": "think about the problem. And if we run the\ncode again, it'll give me the correct\nanswers each time.",
    "start": "2508550",
    "end": "2515339"
  },
  {
    "text": "But I wanted to mention\nthat we can actually clean up the code a little bit\nand write it a little bit more",
    "start": "2515340",
    "end": "2521630"
  },
  {
    "text": "Pythonically so it's a\nlittle bit nicer to read,",
    "start": "2521630",
    "end": "2526789"
  },
  {
    "text": "it's more cleaned up. But one of the things\nthat was confusing for me when I first started\nlearning recursion",
    "start": "2526790",
    "end": "2533600"
  },
  {
    "text": "is that I would always see\nthese beautiful, cleaned up versions of code that\ndo the recursion,",
    "start": "2533600",
    "end": "2541400"
  },
  {
    "text": "and that's not how we approach\nthinking about the problem. I can't come up with this\nnice form right off the bat.",
    "start": "2541400",
    "end": "2549269"
  },
  {
    "text": "And this is one example,\nbut there are certainly other examples of\nmore complicated code where you see it and it's\njust-- it looks beautiful.",
    "start": "2549270",
    "end": "2555440"
  },
  {
    "text": "And yes, if I look at\nit, I can figure it out. And I say, OK, yeah,\nthat makes sense. But I personally could never\ncome up with it on my own.",
    "start": "2555440",
    "end": "2563330"
  },
  {
    "text": "So as I was writing these\nlectures, I thought, well, how do I actually link\nabout the problem? So I just went back one slide.",
    "start": "2563330",
    "end": "2568970"
  },
  {
    "text": "And the way I think\nabout the problem is to separate it\ninto these smaller--",
    "start": "2568970",
    "end": "2574910"
  },
  {
    "text": "a bunch of different base cases,\nor a bunch of different cases. And so that's what\nI've been trying to do in this particular\nlecture to help you",
    "start": "2574910",
    "end": "2581660"
  },
  {
    "text": "guys understand recursion. It's, think about\nthe case when we have a list with one element in it.",
    "start": "2581660",
    "end": "2587330"
  },
  {
    "text": "How would you\nsolve that problem? And then think about the\ncase when you have a list with many elements in it. How would you\nsolve that problem?",
    "start": "2587330",
    "end": "2594420"
  },
  {
    "text": "Yes, it's true. There are some pieces\nhere that are repeating. So we've got L at 0 equal\ne is in a couple places.",
    "start": "2594420",
    "end": "2602720"
  },
  {
    "text": "But you can do\nthat cleanup later. So here, I've got two\ntest cases that return--",
    "start": "2602720",
    "end": "2607970"
  },
  {
    "text": "two cases that\nreturn L at 0 so we can pop them into the\nsame test case here.",
    "start": "2607970",
    "end": "2613069"
  },
  {
    "text": "And then we can check if\nthe length of the list is 0. We can add that test case. And else, we check the\nremainder of the list.",
    "start": "2613070",
    "end": "2619310"
  },
  {
    "text": "That's totally fine. And if it helps you think\nabout the problem this way, that's OK too.",
    "start": "2619310",
    "end": "2624680"
  },
  {
    "text": "But personally, for\nme, it was a lot easier to think about the\nproblem in terms of a list with one element in\nit and then a list",
    "start": "2624680",
    "end": "2630440"
  },
  {
    "text": "with many elements in it. And it's totally fine to have\nto write a little bit quote,",
    "start": "2630440",
    "end": "2636140"
  },
  {
    "text": "unquote, \"inefficient-looking\"\ncode to begin with. Certainly, don't hardcode\nall the base cases.",
    "start": "2636140",
    "end": "2642670"
  },
  {
    "text": "If length is 0, do this. If length is 1, do this. If length is 2, do this. But some reasonable\nbase cases are OK to do.",
    "start": "2642670",
    "end": "2650410"
  },
  {
    "text": "So this is just showing\nthe simplified code. One thing that I\nwanted to mention--",
    "start": "2650410",
    "end": "2656290"
  },
  {
    "text": "and hopefully, you've\nnoticed this already-- is the function\nthat you're writing,",
    "start": "2656290",
    "end": "2661809"
  },
  {
    "text": "all of the returns\nfrom this function need to have the same type.",
    "start": "2661810",
    "end": "2667830"
  },
  {
    "text": "When we wrote-- I'll go back a couple slides. When we wrote the function\nthat calculated the sum",
    "start": "2667830",
    "end": "2673079"
  },
  {
    "text": "of all the elements in a list-- so that's this one here-- what were we returning?",
    "start": "2673080",
    "end": "2678900"
  },
  {
    "text": "Here, we were returning\nan actual number, and then here, we were assuming\nthat this function returned",
    "start": "2678900",
    "end": "2684360"
  },
  {
    "text": "an actual number that we can\nadd to this actual number. So every single\nreturn statement needs",
    "start": "2684360",
    "end": "2690900"
  },
  {
    "text": "to return the same\ntype of object, because if you don't, if\nyou're assuming that the base",
    "start": "2690900",
    "end": "2697470"
  },
  {
    "text": "case returns a list, but then\nat some point in the code, you're going to be working\nwith a number or a Boolean,",
    "start": "2697470",
    "end": "2704790"
  },
  {
    "text": "then Python, as soon as\nit gets that base case, is going to say,\nhey, you're trying to add a Boolean to a list. What's up?",
    "start": "2704790",
    "end": "2711060"
  },
  {
    "text": "And so in the summing\nof the list elements, all the test cases\nreturned a number,",
    "start": "2711060",
    "end": "2717300"
  },
  {
    "text": "and in this case\nwhere we are trying to return whether the element\nis in the list or not,",
    "start": "2717300",
    "end": "2722700"
  },
  {
    "text": "notice, every single\none of my returns is going to return a Boolean. So here, Boolean, here,\na Boolean, and here,",
    "start": "2722700",
    "end": "2729550"
  },
  {
    "text": "in the recursive\nstep, I'm assuming that I'm just passing\nthis Boolean back up the chain of command.",
    "start": "2729550",
    "end": "2735520"
  },
  {
    "text": "So very, very important thing. Again, something that\nwas not made clear to me when I first started recursion.",
    "start": "2735520",
    "end": "2741430"
  },
  {
    "text": "But once I knew this, it\njust made so much more sense and it helped me write my\ncode better, more perfectly,",
    "start": "2741430",
    "end": "2749529"
  },
  {
    "text": "right off the bat. Let's look at a slightly\ndifferent example now. So we've looked\nat taking the sum",
    "start": "2749530",
    "end": "2755730"
  },
  {
    "text": "of all the elements in a list. We've looked at figuring\nout whether an element is in a list. Let's do something\ncompletely different.",
    "start": "2755730",
    "end": "2762660"
  },
  {
    "text": "Still working with\nlists, let's say that we now have an input\nlist that looks like this.",
    "start": "2762660",
    "end": "2768550"
  },
  {
    "text": "So we've got a list. This is my list,\nbeginning and end.",
    "start": "2768550",
    "end": "2773790"
  },
  {
    "text": "And this list only has\nlist elements within it. So no integers.",
    "start": "2773790",
    "end": "2779520"
  },
  {
    "text": "But its elements are lists. So here's one list element. Here's another list element.",
    "start": "2779520",
    "end": "2784809"
  },
  {
    "text": "And here's another list element. So in this example, I've got a\nlist with three list elements.",
    "start": "2784810",
    "end": "2792710"
  },
  {
    "text": "What I'd like to do is to\nflatten this list, which means that I want to remove\nany semblance of sublists",
    "start": "2792710",
    "end": "2800870"
  },
  {
    "text": "and take just all the\nelements of these sublists and put them top-level.",
    "start": "2800870",
    "end": "2806720"
  },
  {
    "text": " Does this task make sense?",
    "start": "2806720",
    "end": "2813410"
  },
  {
    "text": "OK. So I'm not assuming\nI've got lists within lists within lists. I'm just assuming I've got lists\nwith list elements that have",
    "start": "2813410",
    "end": "2820940"
  },
  {
    "text": "integers or whatever in them.  So again, let's think\nabout the base case,",
    "start": "2820940",
    "end": "2828670"
  },
  {
    "text": "let's think about\nthe case when we have a list with\none element in it, and then we can figure\nout the recursive step.",
    "start": "2828670",
    "end": "2835100"
  },
  {
    "text": "So if I have a list with\none element in it-- again, I've got an example here\non the right-hand side. It's a list with one\nlist element in it.",
    "start": "2835100",
    "end": "2844250"
  },
  {
    "text": "That's why I've got the\ndouble square brackets. If I wanted to flatten\nthis, what could I do?",
    "start": "2844250",
    "end": "2851900"
  },
  {
    "text": "I could just grab the\nelement at index 0, because the element at\nindex 0 is this inner list,",
    "start": "2851900",
    "end": "2858940"
  },
  {
    "text": "and it is a flattened\nversion of my list. ",
    "start": "2858940",
    "end": "2866910"
  },
  {
    "text": "Else, what am I going to do? Well, let's do the same pattern. It seems to have\nworked so far for us.",
    "start": "2866910",
    "end": "2872730"
  },
  {
    "text": "Let's do the pattern of\nextracting that first element. So grab element at index 0.",
    "start": "2872730",
    "end": "2878579"
  },
  {
    "text": "So here, we would grab something\nlike square brackets, 1, comma, 2, and concatenate\nit with something.",
    "start": "2878580",
    "end": "2887830"
  },
  {
    "text": "OK, remember, when\nwe concatenate a list with another\nlist, it gives us a big list with all\nthe elements in it,",
    "start": "2887830",
    "end": "2893860"
  },
  {
    "text": "exactly what we're looking for\nwhen we want to flatten a list. So the something we're going\nto add this l at index 0 with",
    "start": "2893860",
    "end": "2902950"
  },
  {
    "text": "is just us flattening the\nremainder of our list.",
    "start": "2902950",
    "end": "2908900"
  },
  {
    "text": "Again, same pattern we've\nbeen seeing already. So if I extract, in\nthis example here,",
    "start": "2908900",
    "end": "2914750"
  },
  {
    "text": "the 1, comma, 2 as\na list, I'm going to concatenate it\nwith the assumption",
    "start": "2914750",
    "end": "2920589"
  },
  {
    "text": "that the function I'm\nwriting will work correctly to flatten 3, comma, 4\nand 9, comma, 8, comma, 7.",
    "start": "2920590",
    "end": "2927250"
  },
  {
    "text": "So if I flatten that, this\nwill give me just a list with 3, 4, 9, 8, 7 in it.",
    "start": "2927250",
    "end": "2933800"
  },
  {
    "text": "And if I concatenate 1,\ncomma, 2 with 3, 4, 9, 8, 7, that just gives\nme 3, 4, 9, 8, 7. ",
    "start": "2933800",
    "end": "2941460"
  },
  {
    "text": "Everyone with me? Is that all right? OK, good. I see some nods, so that's\nactually a pretty good sign.",
    "start": "2941460",
    "end": "2946470"
  },
  {
    "text": " OK, you are with me, right?",
    "start": "2946470",
    "end": "2951530"
  },
  {
    "text": "Because now, it is your turn. So we're going to write a\nvariation of whether an element",
    "start": "2951530",
    "end": "2960350"
  },
  {
    "text": "is in a list. So I'm going to give you\na very similar scenario to this flattened one.",
    "start": "2960350",
    "end": "2965780"
  },
  {
    "text": "So I'm going to give you a list\nthat contains list elements. So here's my list that\ncontains list elements in it.",
    "start": "2965780",
    "end": "2973940"
  },
  {
    "text": "And what I'd like you to do\nis write a recursive function that checks whether\nthis element, whatever",
    "start": "2973940",
    "end": "2980570"
  },
  {
    "text": "the second parameter\nin my function call, is in these list elements.",
    "start": "2980570",
    "end": "2986960"
  },
  {
    "text": "So not at the top level, like\nwe wrote the at the last code to check if an element is in\na list, but in these sublists.",
    "start": "2986960",
    "end": "2995930"
  },
  {
    "text": "So just to show\nyou the difference, if I check whether 3 is\nin 1, comma, 2, comma, 3,",
    "start": "2995930",
    "end": "3002859"
  },
  {
    "text": "that will be true. But if I check whether 3 is in\nthe list containing the list",
    "start": "3002860",
    "end": "3008900"
  },
  {
    "text": "1, comma, 2, comma,\n3, that's false, because it's checking whether\nthe 3 is equal to this list.",
    "start": "3008900",
    "end": "3015020"
  },
  {
    "text": "It's just doing a\ntop-level equality here. ",
    "start": "3015020",
    "end": "3020320"
  },
  {
    "text": "So let's have you write\nthis code down on line 166.",
    "start": "3020320",
    "end": "3028920"
  },
  {
    "text": "You may use the in\noperator to check if an element is\nin a list itself,",
    "start": "3028920",
    "end": "3034950"
  },
  {
    "text": "but obviously, you won't be\nable to use in operator-- nor should you, because then\nwe're not writing a recursive",
    "start": "3034950",
    "end": "3040020"
  },
  {
    "text": "function-- to check if the\nelement is within a list element.",
    "start": "3040020",
    "end": "3045250"
  },
  {
    "text": "So have you work on it\nfor a couple of minutes, and then we can\nwrite it together.",
    "start": "3045250",
    "end": "3051030"
  },
  {
    "text": " Does anyone have a start? So let's look at the case where\nwe have one element in it.",
    "start": "3051030",
    "end": "3058750"
  },
  {
    "text": "How do you check whether that\nelement is within the list",
    "start": "3058750",
    "end": "3064320"
  },
  {
    "text": "inside?  So if-- this is our case\nwith one element in it.",
    "start": "3064320",
    "end": "3072809"
  },
  {
    "text": "The length of L equals 1. ",
    "start": "3072810",
    "end": "3082190"
  },
  {
    "text": "Yeah? AUDIENCE: Um, I'm not\nsure, but [INAUDIBLE] e",
    "start": "3082190",
    "end": "3089099"
  },
  {
    "text": "and L [INAUDIBLE]. ANA BELL: Yeah, exactly. e and L is the\ncorrect thing to do.",
    "start": "3089099",
    "end": "3096430"
  },
  {
    "text": "L at index 0. So if this is our l-- that's\nwhy I added this little example",
    "start": "3096430",
    "end": "3101880"
  },
  {
    "text": "here, so it can help us. So L at index 0 is this guy\nhere, and all I need to do",
    "start": "3101880",
    "end": "3107370"
  },
  {
    "text": "is check if e is\nin L at index 0. And I can just return\nthat right off the bat.",
    "start": "3107370",
    "end": "3113549"
  },
  {
    "text": " I could do if e in L0, return\ntrue, else, return false.",
    "start": "3113550",
    "end": "3122250"
  },
  {
    "text": "But e in L0 is\nalready a Boolean. So I can just return\nthat directly. ",
    "start": "3122250",
    "end": "3130170"
  },
  {
    "text": "else, we have a list with\nmore than one element in it.",
    "start": "3130170",
    "end": "3136640"
  },
  {
    "text": "So what do we do here? Remember, extract the first\nelement and then do the rest.",
    "start": "3136640",
    "end": "3144915"
  },
  {
    "start": "3144915",
    "end": "3151090"
  },
  {
    "text": "So let's say this. Let's say the first\nelement is L at index 0. That'll help us think\nabout it a little bit.",
    "start": "3151090",
    "end": "3157150"
  },
  {
    "text": " So before looking at the\nremainder of the list",
    "start": "3157150",
    "end": "3162930"
  },
  {
    "text": "and calling our\nrecursive function, what did we do when we checked\nif an element was in a list when we just had a plain list?",
    "start": "3162930",
    "end": "3169960"
  },
  {
    "text": "We just said if e is in\nfirst, return true. else,",
    "start": "3169960",
    "end": "3179990"
  },
  {
    "text": "return false. ",
    "start": "3179990",
    "end": "3186430"
  },
  {
    "text": "But we don't want to do\nan else return false, because that's not quite true.",
    "start": "3186430",
    "end": "3193250"
  },
  {
    "text": "else, we want to look at\nthe remainder of the list.",
    "start": "3193250",
    "end": "3199500"
  },
  {
    "text": "We want to see if the-- obviously, if the element\nis not in the first thing",
    "start": "3199500",
    "end": "3205110"
  },
  {
    "text": "that I just extracted, this list\nhere, then I would like to say,",
    "start": "3205110",
    "end": "3212050"
  },
  {
    "text": "is it in the rest\nof this list, which is us calling the\nfunction that we're just",
    "start": "3212050",
    "end": "3218040"
  },
  {
    "text": "writing all over again. So we can return the name of\nthis function in lists of--",
    "start": "3218040",
    "end": "3227278"
  },
  {
    "text": "what did I call it? Lists of lists. And then L from 1 onward\nwith the same element",
    "start": "3227278",
    "end": "3234944"
  },
  {
    "text": "we're trying to find. ",
    "start": "3234945",
    "end": "3240720"
  },
  {
    "text": "And of course, we\ncan simplify this just like we could\nsimplify the previous one. But it helps to think about\nit in these two cases,",
    "start": "3240720",
    "end": "3247559"
  },
  {
    "text": "a list with one element and\na list with many elements. ",
    "start": "3247560",
    "end": "3258220"
  },
  {
    "text": "Any questions about this? Yes. AUDIENCE: [INAUDIBLE]",
    "start": "3258220",
    "end": "3264234"
  },
  {
    "start": "3264235",
    "end": "3269460"
  },
  {
    "text": "ANA BELL: This one? This one, we're considering a\nlist with one list inside it.",
    "start": "3269460",
    "end": "3275690"
  },
  {
    "text": "Yeah.  We could include another\nbase case, I suppose,",
    "start": "3275690",
    "end": "3282050"
  },
  {
    "text": "if the length of L\nis 0 returned false. That would also work,\nbecause obviously, if the list is empty,\nthen it's not in there.",
    "start": "3282050",
    "end": "3288210"
  },
  {
    "text": " So when do we use recursion? Obviously, a lot of the\nexamples we've seen here,",
    "start": "3288210",
    "end": "3295720"
  },
  {
    "text": "they're very intuitive\nto write iteratively. But I mentioned a couple\nexamples last time,",
    "start": "3295720",
    "end": "3301240"
  },
  {
    "text": "where it's more intuitive\nto use recursion. And specifically, I wanted to\ndraw a little bit of a parallel",
    "start": "3301240",
    "end": "3310340"
  },
  {
    "text": "to this thing when we\nlearned about while loops. We said, well, what if we tried\nto code a little game that",
    "start": "3310340",
    "end": "3315470"
  },
  {
    "text": "just used if and elses? I said that we would have\na bunch of nested if/else",
    "start": "3315470",
    "end": "3321590"
  },
  {
    "text": "statements without a while loop,\nbecause we don't know how deep to make these\nif/else/if statements.",
    "start": "3321590",
    "end": "3329630"
  },
  {
    "text": "And so a very similar\nidea exists with recursion and when to use recursion.",
    "start": "3329630",
    "end": "3335340"
  },
  {
    "text": "So if I had a list with a\nwhole bunch of lists in it, and those lists could have lists\nwithin it, and so on and so on,",
    "start": "3335340",
    "end": "3342240"
  },
  {
    "text": "I don't know how\nlong I need to-- how deep I need to\nmake my code go.",
    "start": "3342240",
    "end": "3347839"
  },
  {
    "text": "So an example using a\nfor loop would be to say, for each element in\nL, I'm going to say,",
    "start": "3347840",
    "end": "3353382"
  },
  {
    "text": "I'm going to look\nat each element. I'm going to say, well,\nif you're not a list, then I can deal\nwith you directly.",
    "start": "3353383",
    "end": "3358800"
  },
  {
    "text": "But if you are a list, then\nI need to iterate over you. And so I've got this other\niteration here for each j in i",
    "start": "3358800",
    "end": "3367080"
  },
  {
    "text": "for one of those lists. Again, I would say,\nare you a list? If not, I'll deal\nwith you directly.",
    "start": "3367080",
    "end": "3372640"
  },
  {
    "text": "else, you are a list, so I\ndo need to iterate over you. And you can see this nested\nidea now comes into play here.",
    "start": "3372640",
    "end": "3379780"
  },
  {
    "text": "And of course, we could try to\nuse a while loop to optimize the code a little bit, say,\nwhile this element type is not",
    "start": "3379780",
    "end": "3386020"
  },
  {
    "text": "a list, do this,\nthings like that. But it leads to some\nreally verbose code.",
    "start": "3386020",
    "end": "3393400"
  },
  {
    "text": "And so recursion is\na way for us to deal with these lists within lists\nwithin lists, and of course,",
    "start": "3393400",
    "end": "3399200"
  },
  {
    "text": "when you have data structures\nthat you don't know how long-- or how deep they go. So I mentioned file systems\nand a set of operations",
    "start": "3399200",
    "end": "3406480"
  },
  {
    "text": "last lecture as really nice\nplaces to use recursion. Scooby-Doo gang looking\nfor their culprit, rooms",
    "start": "3406480",
    "end": "3415397"
  },
  {
    "text": "that have doors that lead to\nother rooms that have doors lead to other rooms,\nthey don't know how many doors they need to\ngo through to get to a room",
    "start": "3415397",
    "end": "3420640"
  },
  {
    "text": "without doors. Obviously, recursion,\nthey should use. And then a bunch of\nother fun examples",
    "start": "3420640",
    "end": "3425830"
  },
  {
    "text": "of places to use recursion. So the last bit\nof class, I would",
    "start": "3425830",
    "end": "3432020"
  },
  {
    "text": "like to work\nthrough this example where we're going\nto see the code",
    "start": "3432020",
    "end": "3437600"
  },
  {
    "text": "to solve lists within lists\nwithin lists within lists. But before we do\nthat, we're going",
    "start": "3437600",
    "end": "3444050"
  },
  {
    "text": "to talk about-- so\nwe're going to do that example in the context\nof reversing a list.",
    "start": "3444050",
    "end": "3449160"
  },
  {
    "text": "But before we look\nat a list that has all these different\nsublists within it, let's look at a list\nthat has just integers.",
    "start": "3449160",
    "end": "3456569"
  },
  {
    "text": "How would we think about\nthis problem recursively to reverse all the\nelements in this list?",
    "start": "3456570",
    "end": "3463880"
  },
  {
    "text": "So again, we're going to use\nthe very same pattern we've been using all\nthroughout today when",
    "start": "3463880",
    "end": "3468980"
  },
  {
    "text": "we've been dealing with lists. We're going to take out the\nfirst element, extract it,",
    "start": "3468980",
    "end": "3474079"
  },
  {
    "text": "and we're going to deal with\nthe remainder of the list, basically, by running the\nsame function we're writing",
    "start": "3474080",
    "end": "3480349"
  },
  {
    "text": "on the remainder of the list. So let's say I have\nmy original list and I look at my first\nelement, just like before.",
    "start": "3480350",
    "end": "3487220"
  },
  {
    "text": "I'm going to extract it out. If I take this first element\nand I pop it at the end,",
    "start": "3487220",
    "end": "3495150"
  },
  {
    "text": "and then I consider the\nremainder list, everything except for that first element\nthat I put at the end,",
    "start": "3495150",
    "end": "3501900"
  },
  {
    "text": "I can just call\nthe same function I'm writing right now to reverse\nthe remaining list, which",
    "start": "3501900",
    "end": "3509460"
  },
  {
    "text": "means that I'm going to\ntake this remaining list, grab the first element,\npop it at the end,",
    "start": "3509460",
    "end": "3514470"
  },
  {
    "text": "and deal with the\nremaining list. Again, take the first\nelement, pop it at the end,",
    "start": "3514470",
    "end": "3520940"
  },
  {
    "text": "deal with the\nremaining list, until I have a list with length 1. How do I reverse a list that\nonly has one element in it?",
    "start": "3520940",
    "end": "3529109"
  },
  {
    "text": "It's just that list. Reversing a list L is just\nL. So that's the idea.",
    "start": "3529110",
    "end": "3541230"
  },
  {
    "text": "And notice that when we're\nbuilding back up the result, we took that first element\nand we tacked it onto the end.",
    "start": "3541230",
    "end": "3550359"
  },
  {
    "text": "So we're going to do\nanother list concatenation kind of deal, except\nthat the thing that I'm concatenating now, the first\nelement, will be at the end.",
    "start": "3550360",
    "end": "3559590"
  },
  {
    "text": "It'll be the second\npart of my plus. So I'm just giving\nyou a heads-up. That's what it will look like.",
    "start": "3559590",
    "end": "3565590"
  },
  {
    "text": "So let's write the code. If the length of the\nlist is 1, if I'm reversing a list with\none element in it,",
    "start": "3565590",
    "end": "3573170"
  },
  {
    "text": "just return that list. Easy-peasy. It's just the list itself.",
    "start": "3573170",
    "end": "3578810"
  },
  {
    "text": "else-- and this is\nwhere the fun comes in. I've got something.",
    "start": "3578810",
    "end": "3585130"
  },
  {
    "text": "So I'm going to do\nsomething concatenated with something else.",
    "start": "3585130",
    "end": "3591339"
  },
  {
    "text": "So I'm extracting\nthe first element. There it is, L at index 0. But it's sitting\nsomewhere funny that we",
    "start": "3591340",
    "end": "3597330"
  },
  {
    "text": "haven't seen it sit before. It's sitting on the second to\nthe right of the concatenation.",
    "start": "3597330",
    "end": "3602880"
  },
  {
    "text": "And that's fine, because\nwhat we want to do is take the element from\nthe beginning of the list and tack it on to the end.",
    "start": "3602880",
    "end": "3610080"
  },
  {
    "text": "And there's something else\nthat's funny about it. I've put it in square brackets.",
    "start": "3610080",
    "end": "3616910"
  },
  {
    "text": "Now, again, I'm\nincluding this example to help us think about it. Why are those square\nbrackets there?",
    "start": "3616910",
    "end": "3623870"
  },
  {
    "text": "Think about what we want\nthis function to return. Is it returning a number?",
    "start": "3623870",
    "end": "3629040"
  },
  {
    "text": "No. Is it returning a Boolean? No. It's returning a list. This function, I want to take in\na list and give me back a list,",
    "start": "3629040",
    "end": "3638750"
  },
  {
    "text": "but where my elements\nare in reversed order. So what I want to do-- you can already see this return\nover here is returning a list.",
    "start": "3638750",
    "end": "3647470"
  },
  {
    "text": "So it'll be square\nbrackets 10 or whatever. In my recursive step,\nif I'm concatenating,",
    "start": "3647470",
    "end": "3658230"
  },
  {
    "text": "I want to concatenate\nthis thing here, which I'll tell you\nabout in the next slide. But I'm going to\nconcatenate it with-- it's",
    "start": "3658230",
    "end": "3664290"
  },
  {
    "text": "going to be a list\nwith some other list. If I concatenate a list with\na number, that L at 0 is--",
    "start": "3664290",
    "end": "3670529"
  },
  {
    "text": "L at 0 is a 10. So if I concatenate\na list with a number, Python will yell at me.",
    "start": "3670530",
    "end": "3677330"
  },
  {
    "text": "So what I need to do is\nmake that number that I just extracted, L at 0, be a list.",
    "start": "3677330",
    "end": "3683130"
  },
  {
    "text": "So I'm just going to slap\na square bracket around it and say, hey, Python, this is\na list with one element in it.",
    "start": "3683130",
    "end": "3690580"
  },
  {
    "text": "Does that make sense? Cool. So then what that means is, I've\ngot this 10 that I extracted.",
    "start": "3690580",
    "end": "3696870"
  },
  {
    "text": "I'm going to concatenate\nsomething with that 10. And that's something\nis me putting my trust into the function\nI'm writing to say,",
    "start": "3696870",
    "end": "3703530"
  },
  {
    "text": "that something is\ngoing to be the 20, 30, 40 successfully\nreversed, 40, 30, 20.",
    "start": "3703530",
    "end": "3710430"
  },
  {
    "text": "If I can do that, 40, 30, 20,\nand I concatenate it with a 10, my job is done.",
    "start": "3710430",
    "end": "3715470"
  },
  {
    "text": "I've successfully\nreversed 10, 20, 30, 40 to be 40, 30, 20, 10. And so let's just do that.",
    "start": "3715470",
    "end": "3723720"
  },
  {
    "text": "That's me putting my trust\nin this function I'm writing. I'm calling the\nsame function again,",
    "start": "3723720",
    "end": "3728940"
  },
  {
    "text": "saying, hey, I would\nlike to reverse the remainder of\nthe list, exactly as we have been in the past.",
    "start": "3728940",
    "end": "3736210"
  },
  {
    "text": "Super weird to think about\nstill because we're trusting something that we're writing.",
    "start": "3736210",
    "end": "3742150"
  },
  {
    "text": "Cool. So then let's test it out. Let's run it. So if I run it with\nlist 1, 2, abc, Python",
    "start": "3742150",
    "end": "3750430"
  },
  {
    "text": "will reverse my list. So it will print abc,\nthen the 2, then the 1.",
    "start": "3750430",
    "end": "3756700"
  },
  {
    "text": "Let's say I run it now with\nsomething slightly different. So I run it with this list here.",
    "start": "3756700",
    "end": "3762590"
  },
  {
    "text": "How many elements\ndoes this list have? Test. You guys tell me.",
    "start": "3762590",
    "end": "3769170"
  },
  {
    "text": "Three. Exactly. The first one is an integer,\nthe second one is a list, and the last one is a list\nthat's got a bunch of garbage",
    "start": "3769170",
    "end": "3775530"
  },
  {
    "text": "in it, but as\ntest, I don't care, because I just care that I\nhave three elements inside.",
    "start": "3775530",
    "end": "3781480"
  },
  {
    "text": "And so when I run\nthis function on test, it will reverse\njust the top level,",
    "start": "3781480",
    "end": "3787109"
  },
  {
    "text": "because that's\nwhat this is doing. Nowhere in here did I say I want\nto reverse lists within lists.",
    "start": "3787110",
    "end": "3793860"
  },
  {
    "text": "I didn't say, if you're a\nlist, also reverse yourself. I just said, top-level,\ntake this element,",
    "start": "3793860",
    "end": "3799500"
  },
  {
    "text": "put it at the end. So when I reverse test, this\nfunky-looking test over here,",
    "start": "3799500",
    "end": "3805020"
  },
  {
    "text": "it will take that first\nelement, put it at the end. The middle element\nstays where it is and the last element\nbecomes first.",
    "start": "3805020",
    "end": "3814540"
  },
  {
    "text": "is everyone OK so far? I'm worried there aren't\nmany more questions. ",
    "start": "3814540",
    "end": "3820445"
  },
  {
    "text": "OK.  So that's good.",
    "start": "3820445",
    "end": "3826380"
  },
  {
    "text": "But this is now not\nreally what I'd like.",
    "start": "3826380",
    "end": "3832210"
  },
  {
    "text": "What I'd like is,\nif I have lists within lists within\nlists within lists,",
    "start": "3832210",
    "end": "3838120"
  },
  {
    "text": "and those lists have some\nsort of elements within them-- at the lowest level,\nI've got a list",
    "start": "3838120",
    "end": "3843520"
  },
  {
    "text": "that's going to have some\ninteger or string or whatever in it-- what I would like to do is to\nreverse those elements as well.",
    "start": "3843520",
    "end": "3851540"
  },
  {
    "text": "So really, what I\nwould have liked to have if I passed in this\nfunction here-- this list",
    "start": "3851540",
    "end": "3857230"
  },
  {
    "text": "here-- is to say, well, why\ndon't you reverse everything? So I would like to have had\ngf as a list, and then the e,",
    "start": "3857230",
    "end": "3866470"
  },
  {
    "text": "and then the d, and then the 1. And so this is where\nwe're going to do that.",
    "start": "3866470",
    "end": "3874790"
  },
  {
    "text": "So let's say I now have a list. So each one of these\nblue squares is my list--",
    "start": "3874790",
    "end": "3880460"
  },
  {
    "text": "or my list elements\nand my top level. And they happen to have some\nsort of lists within them.",
    "start": "3880460",
    "end": "3887950"
  },
  {
    "text": "How do I do this? Well, now that I have\npotential list elements,",
    "start": "3887950",
    "end": "3893230"
  },
  {
    "text": "I need to have my\nrecursive function test whether the element I'm\ncurrently considering is a list",
    "start": "3893230",
    "end": "3899740"
  },
  {
    "text": "or not. If it's not, like\nthe 3 and the 4, I can treat them in\nthe exact same way",
    "start": "3899740",
    "end": "3905990"
  },
  {
    "text": "that we treated\nthem in this case. But if it is a list,\nas this one is--",
    "start": "3905990",
    "end": "3913070"
  },
  {
    "text": "this is a list element,\nand this is also a list element that has\nlist elements within it. So that's even funkier.",
    "start": "3913070",
    "end": "3918740"
  },
  {
    "text": "Then we need to consider\nthem separately. So let's take the code that we\nwrote in the previous slide,",
    "start": "3918740",
    "end": "3925320"
  },
  {
    "text": "because it's a good start,\nextract the first element,",
    "start": "3925320",
    "end": "3930540"
  },
  {
    "text": "put it at the end. That's what we did before. But before leaving, let's\nsay, if you are a list,",
    "start": "3930540",
    "end": "3939920"
  },
  {
    "text": "if you are a list, then\nalso reverse yourself.",
    "start": "3939920",
    "end": "3945619"
  },
  {
    "text": "So not only do I want,\ntop-level, that list-- that element to go\nto the end, I also",
    "start": "3945620",
    "end": "3951350"
  },
  {
    "text": "want to consider what you are. I don't want this last\nelement to be 1, comma, 2. I want to reverse its elements\ntoo, to be 2, comma, 1.",
    "start": "3951350",
    "end": "3958880"
  },
  {
    "text": "So in the end, what I want\nthis to give me is 87654321.",
    "start": "3958880",
    "end": "3965599"
  },
  {
    "text": "So that deals with that first\nelement being popped at the end there. Now, I consider my new list.",
    "start": "3965600",
    "end": "3972339"
  },
  {
    "text": "And again, this is going\nto be a recursive step. The element at the front,\nagain, I extract it.",
    "start": "3972340",
    "end": "3978050"
  },
  {
    "text": "It's just a number. Nothing special here. So you just go to the\nend, just like before.",
    "start": "3978050",
    "end": "3984580"
  },
  {
    "text": "Nothing to consider. Nothing to reverse for that 3. Again, the 4, just like\nbefore, it goes to the end.",
    "start": "3984580",
    "end": "3992560"
  },
  {
    "text": "And now, what about this list\nwith lists within it and so on? Well, we've reached sort of this\nquote, unquote, \"base case.\"",
    "start": "3992560",
    "end": "4000938"
  },
  {
    "text": "So there's nothing\nto put at the end. But you can imagine\nbeing put at the end if there were other\nelements within it.",
    "start": "4000938",
    "end": "4007820"
  },
  {
    "text": "So this one is\ngoing to stay as is. Sorry about that. This one is going to stay as is. But what we're going\nto do is going to say,",
    "start": "4007820",
    "end": "4014300"
  },
  {
    "text": "well, you are a list, just\nlike this one was a list. It was a list with\ntwo numbers in it. So you are also a list\nwith two elements in it.",
    "start": "4014300",
    "end": "4022700"
  },
  {
    "text": "So the first step I would like\nyou to do is reverse yourself. So the 7, 8 will come\nto the front and the 5,",
    "start": "4022700",
    "end": "4029380"
  },
  {
    "text": "6 will go after it.  But its elements also are lists.",
    "start": "4029380",
    "end": "4038870"
  },
  {
    "text": "So not only do I\nwant to reverse you, but I want you to tell all your\nelements to reverse themselves.",
    "start": "4038870",
    "end": "4045840"
  },
  {
    "text": "So the 5, 6 should reverse\nto become a 6, 5, and the 7,",
    "start": "4045840",
    "end": "4052280"
  },
  {
    "text": "8 should reverse\nitself to become 8, 7. ",
    "start": "4052280",
    "end": "4058650"
  },
  {
    "text": "Does that make sense? Conceptually, I think we got it. So we want to reverse as far\ndeep as we can until we get",
    "start": "4058650",
    "end": "4068010"
  },
  {
    "text": "to some numbers.  So let's write the code.",
    "start": "4068010",
    "end": "4075690"
  },
  {
    "text": "We're going to do a\nvery similar thing to what we've done\nin the past, write all of these examples following\nthe exact same pattern.",
    "start": "4075690",
    "end": "4083369"
  },
  {
    "text": "Consider a list with\none element in it, and then consider a list\nwith many elements in it.",
    "start": "4083370",
    "end": "4090760"
  },
  {
    "text": "If I have a list with\none element in it-- so here, here's a list.",
    "start": "4090760",
    "end": "4097990"
  },
  {
    "text": "It's going to have\nonly one element in it. If the list is a--",
    "start": "4097990",
    "end": "4104689"
  },
  {
    "text": "if that element within\nthat list is a number, I'm going to do something\ndifferent than if the element",
    "start": "4104689",
    "end": "4113219"
  },
  {
    "text": "within this list is a list. So what I actually want to\ndo inside this if len(L)",
    "start": "4113220",
    "end": "4120009"
  },
  {
    "text": "is equal to 1 is\nhave two subparts depending on whether\nit's a list or not,",
    "start": "4120010",
    "end": "4125859"
  },
  {
    "text": "because if it's\njust a number, I'm happy to just leave it as is.",
    "start": "4125859",
    "end": "4131710"
  },
  {
    "text": "This number is already in place. It's already reversed. But if the element\nwithin it is a list,",
    "start": "4131710",
    "end": "4144729"
  },
  {
    "text": "this element is one element\ninside my list is also a list, I want it to reverse itself.",
    "start": "4144729",
    "end": "4151278"
  },
  {
    "text": "So if the length of the list\nis 1, I now check the type.",
    "start": "4151279",
    "end": "4157630"
  },
  {
    "text": "If it's not a list, I do exactly\nthe same thing as I did before. If it's not a list, you\nare already reversed.",
    "start": "4157630",
    "end": "4164278"
  },
  {
    "text": "No need to reverse\nanything else. Yes, question. AUDIENCE: I guess I'm a little\nbit confused by the one element",
    "start": "4164279",
    "end": "4170422"
  },
  {
    "text": "[INAUDIBLE] first part. ANA BELL: Yeah, so\nwe're just dividing it into one element or\ntwo-- or more than one.",
    "start": "4170422",
    "end": "4177410"
  },
  {
    "text": "So in the case where we have\none element, this is my list. And this is the one element.",
    "start": "4177410",
    "end": "4184290"
  },
  {
    "text": "And if I have an element\nthat's a list itself, then this is still one element.",
    "start": "4184290",
    "end": "4191609"
  },
  {
    "text": "Yeah. AUDIENCE: Let's say you raise\nthe brackets on the outside of the [INAUDIBLE].",
    "start": "4191609",
    "end": "4196760"
  },
  {
    "text": "ANA BELL: Yeah. This is now a list with\ntwo elements in it.",
    "start": "4196760",
    "end": "4203150"
  },
  {
    "text": "Yep. Yep. Exactly. But I am considering\nthe case where I have a list with one element.",
    "start": "4203150",
    "end": "4208640"
  },
  {
    "text": "It happens to be another list. And what's inside it, I don't\ncurrently care, because-- yeah.",
    "start": "4208640",
    "end": "4213920"
  },
  {
    "text": "So if it's not a list,\nit's already reversed. Otherwise, what do we do?",
    "start": "4213920",
    "end": "4221699"
  },
  {
    "text": "Well, we want to ask\nit to reverse itself. And that's the function\nwe're currently writing. ",
    "start": "4221700",
    "end": "4231719"
  },
  {
    "text": "Is that cool, I guess? OK. Again, a lot of trust\ngoing on here, you guys.",
    "start": "4231720",
    "end": "4237780"
  },
  {
    "text": "So we're calling\ndeep reverse, this function we are\ncurrently writing,",
    "start": "4237780",
    "end": "4243570"
  },
  {
    "text": "on this list element,\nL at index 0. It's our only element.",
    "start": "4243570",
    "end": "4249239"
  },
  {
    "text": " And notice, again, I've got\nthese square brackets around",
    "start": "4249240",
    "end": "4257730"
  },
  {
    "text": "here because this function\nis supposed to return a list.",
    "start": "4257730",
    "end": "4266690"
  },
  {
    "text": " So just like in\nthe previous case,",
    "start": "4266690",
    "end": "4272550"
  },
  {
    "text": "where I slapped on some square\nbrackets around the number, I have to do it here as well.",
    "start": "4272550",
    "end": "4278750"
  },
  {
    "text": "Everyone OK with this case? Because the recursive step\nis going to be even crazier. OK, else, we have a list with\nmore than one element in it.",
    "start": "4278750",
    "end": "4288740"
  },
  {
    "text": "So we have a list\nwith some stuff here, and then I have,\npotentially, another list",
    "start": "4288740",
    "end": "4295490"
  },
  {
    "text": "and a bunch of other stuff\nhere, like this, whatever it is. So then what I\nwould like to do is,",
    "start": "4295490",
    "end": "4302910"
  },
  {
    "text": "again, according to\nour sort of pattern",
    "start": "4302910",
    "end": "4308540"
  },
  {
    "text": "that we've been\nlooking at, is to say, I'm going to extract the\nfirst element in the list.",
    "start": "4308540",
    "end": "4313700"
  },
  {
    "text": "So if I have a list\nwith many elements, let's extract the first\none and deal with it.",
    "start": "4313700",
    "end": "4319560"
  },
  {
    "text": "But again, I need to take care,\nbecause that first element may be a number or a string or\nwhatever, or it may be a list.",
    "start": "4319560",
    "end": "4327170"
  },
  {
    "text": " And I deal with these\ntwo cases separately.",
    "start": "4327170",
    "end": "4333380"
  },
  {
    "text": "If it's just a number-- so\nthat's this if case here. So if the type of L at 0, the\nthing that I've extracted,",
    "start": "4333380",
    "end": "4338960"
  },
  {
    "text": "is a list, then\nwhat I need to do is what I had in the\nprevious example.",
    "start": "4338960",
    "end": "4344480"
  },
  {
    "text": "I grab that first element,\nslap square brackets around it, and concatenate it with deep\nreverse of the rest of it.",
    "start": "4344480",
    "end": "4352300"
  },
  {
    "text": "Exactly the same as\nthe previous case, because it's just a number. I do what I did before, plop\nit to the end and we're done.",
    "start": "4352300",
    "end": "4359010"
  },
  {
    "text": "And again, I'm making a\nfunction call here to myself. else, this thing here, this L\nat index 0 that I've extracted,",
    "start": "4359010",
    "end": "4369370"
  },
  {
    "text": "is a list. So not only do I have to call\ndeep reverse on these guys",
    "start": "4369370",
    "end": "4376830"
  },
  {
    "text": "here, but-- everybody together-- we\nhave to call deep reverse",
    "start": "4376830",
    "end": "4383490"
  },
  {
    "text": "on the first element as\nwell, because it's a list. I can't just put it to the end. I want it to reverse\nall of its elements.",
    "start": "4383490",
    "end": "4392250"
  },
  {
    "text": "So this is the code to do that. This bit here, deep\nreverse L 1 colon,",
    "start": "4392250",
    "end": "4400480"
  },
  {
    "text": "tells the remaining\nof the list-- the remainder of the list\nto reverse itself, exactly",
    "start": "4400480",
    "end": "4406410"
  },
  {
    "text": "like we did in the integer case. All is the same. But we concatenate that, again,\nby putting square brackets",
    "start": "4406410",
    "end": "4414210"
  },
  {
    "text": "around it, because we want\nto concatenate with the list. We concatenate that with\ndeep reversing our element",
    "start": "4414210",
    "end": "4419910"
  },
  {
    "text": "at index 0. So not only do we put this\nat the end to reverse it, but we need it to reverse\nall of its elements as well.",
    "start": "4419910",
    "end": "4426600"
  },
  {
    "text": " There are no more\nlines to this code,",
    "start": "4426600",
    "end": "4432690"
  },
  {
    "text": "but what are your thoughts? AUDIENCE: [INAUDIBLE] ANA BELL: I know.",
    "start": "4432690",
    "end": "4437850"
  },
  {
    "text": "Yeah. AUDIENCE: Why do you keep\nputting the square brackets? ANA BELL: So yeah.",
    "start": "4437850",
    "end": "4442910"
  },
  {
    "text": "So we put square\nbrackets because we want to maintain the\nsame structure of what the original list was.",
    "start": "4442910",
    "end": "4448190"
  },
  {
    "text": "So if it's an integer,\nis, I guess, the simplest case to explain it.",
    "start": "4448190",
    "end": "4453210"
  },
  {
    "text": "So if it's an integer, you\ncan't concatenate the list with the integer. It will be a problem. So you want to\nconcatenate the list",
    "start": "4453210",
    "end": "4459230"
  },
  {
    "text": "with the integer inside a\nlist as a single element. ",
    "start": "4459230",
    "end": "4466100"
  },
  {
    "text": "So what we can do is we\ncan simplify the code. Again, I personally think\nof this as a little bit easier to think about, just\nas I'm extracting out the case",
    "start": "4466100",
    "end": "4475870"
  },
  {
    "text": "where I have a\nlist with one thing and a list with many things. But you can certainly\nthink of it like this.",
    "start": "4475870",
    "end": "4483469"
  },
  {
    "text": "So if I have an empty list,\njust return an empty list. Else, I'm extracting the\nelement at index 0 directly,",
    "start": "4483470",
    "end": "4489280"
  },
  {
    "text": "and I deep reverse that-- the rest of the list--\nconcatenated with that element",
    "start": "4489280",
    "end": "4494630"
  },
  {
    "text": "at the end. Again-- oops--\nnoting that we are putting this element as a list.",
    "start": "4494630",
    "end": "4500050"
  },
  {
    "text": "And else, we can\ndeep reverse the rest of the list concatenated with\ndeep reversing this guy here.",
    "start": "4500050",
    "end": "4507590"
  },
  {
    "text": "So not only do we\nput it at the end, but we also reverse\nall of its elements. So this is the\nsimplified version--",
    "start": "4507590",
    "end": "4514060"
  },
  {
    "text": "the simplified code. So this recursion that we\nsaw, all these examples here",
    "start": "4514060",
    "end": "4522270"
  },
  {
    "text": "that we applied to\nlists can actually be applied to any indexable\nordered sequences.",
    "start": "4522270",
    "end": "4528090"
  },
  {
    "text": "The same code will\nwork for tuples. The same code will\nwork for strings,",
    "start": "4528090",
    "end": "4533454"
  },
  {
    "text": "except for the one where--\nbecause you can't have strings within strings within strings. But certainly, summing\nthe elements in a list",
    "start": "4533455",
    "end": "4539850"
  },
  {
    "text": "and checking whether\nan element is in a list will work for tuples as\nwell, and some of these will work for strings, as long\nas you can do that operation",
    "start": "4539850",
    "end": "4546990"
  },
  {
    "text": "on the strings, because these\nare all indexable sequences, so it shouldn't be a problem. ",
    "start": "4546990",
    "end": "4554490"
  },
  {
    "text": "So lots of takeaways\nhere with recursion. This last example,\nnamely, it looks really",
    "start": "4554490",
    "end": "4561920"
  },
  {
    "text": "nice in the cleaned-up form. And it's, what,\nfive lines of code to solve this really\nkind of hard problem",
    "start": "4561920",
    "end": "4567590"
  },
  {
    "text": "that you would\notherwise have to solve using while loops and for\nloops and things like that. So I definitely encourage you to\ntake a look through the Python",
    "start": "4567590",
    "end": "4575239"
  },
  {
    "text": "Tutor links that I've put in. My two tips, so the two\nbig takeaways on recursion,",
    "start": "4575240",
    "end": "4580340"
  },
  {
    "text": "is this thing about\nbase cases-- or cases. Any time you have\na return statement",
    "start": "4580340",
    "end": "4585630"
  },
  {
    "text": "and you're writing a\nrecursive function, make sure that\nevery single return statement is returning something\nthat is of that same type.",
    "start": "4585630",
    "end": "4592100"
  },
  {
    "text": "Otherwise, you'll have type\nmismatches all over the place. And then the recursive step\ntakes advantage of the fact",
    "start": "4592100",
    "end": "4599060"
  },
  {
    "text": "that you are returning\nthese kinds of types. So then those operations\nin the recursive step will work with those types.",
    "start": "4599060",
    "end": "4605570"
  },
  {
    "text": "And the second is,\nthe function doesn't have to be efficient\non the first pass. So the way we thought\nabout the problem",
    "start": "4605570",
    "end": "4611930"
  },
  {
    "text": "by separating it in a\nlist with one element and many is easier\nfor me to think about",
    "start": "4611930",
    "end": "4616980"
  },
  {
    "text": "because I can wrap my\nhead around the problem. And you don't have to write\nthe most efficient code right",
    "start": "4616980",
    "end": "4623040"
  },
  {
    "text": "off the bat for recursion. Certainly no need to do that. But you can\ndefinitely clean it up after you have\nsomething that works.",
    "start": "4623040",
    "end": "4628770"
  },
  {
    "text": "Many practice problems on\nthe Python file for today. Many, many practice problems.",
    "start": "4628770",
    "end": "4634860"
  },
  {
    "text": "Memo-izing the basketball. Obviously, I mentioned that. An example-- a little practice\nwith no lists within lists,",
    "start": "4634860",
    "end": "4643530"
  },
  {
    "text": "a practice with lists\nwithin lists within lists, and then I included three\nbuggy recursion implementations",
    "start": "4643530",
    "end": "4649679"
  },
  {
    "text": "for you to try to fix. So a little bit of\ndebugging practice plus recursion practice.",
    "start": "4649680",
    "end": "4656100"
  },
  {
    "text": "Thanks, all. ",
    "start": "4656100",
    "end": "4673000"
  }
]