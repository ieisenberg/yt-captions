[
  {
    "start": "0",
    "end": "29000"
  },
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help MIT\nOpenCourseWare continue to",
    "start": "0",
    "end": "6950"
  },
  {
    "text": "offer high-quality educational\nresources for free. To make a donation or view\nadditional materials from",
    "start": "6950",
    "end": "13500"
  },
  {
    "text": "hundreds of MIT courses, visit\nMIT OpenCourseWare at ocw.mit.edu.",
    "start": "13500",
    "end": "19380"
  },
  {
    "start": "19380",
    "end": "28664"
  },
  {
    "text": "PROFESSOR: So a couple of things\nI want to say about the final project. ",
    "start": "28664",
    "end": "36800"
  },
  {
    "start": "29000",
    "end": "235000"
  },
  {
    "text": "You guys should start\nthinking about it. So of course, you guys should\nthink about the teams first,",
    "start": "36800",
    "end": "44920"
  },
  {
    "text": "and submit team information. Say who you're going\nto team up with.",
    "start": "44920",
    "end": "49940"
  },
  {
    "text": "By when? Team information,\nJosh, by when? Team information\nhas to be in--",
    "start": "49940",
    "end": "54990"
  },
  {
    "text": "AUDIENCE: By tomorrow. PROFESSOR: By tomorrow. OK, good. You should know your teams. Get them together, use the same\nmechanism that we used",
    "start": "54990",
    "end": "62200"
  },
  {
    "text": "before to get the team\ninformation before. So we are going to add one small\nthing this year I think",
    "start": "62200",
    "end": "67210"
  },
  {
    "text": "that would be useful. Once you have submitted your\ndesign documents, we are going",
    "start": "67210",
    "end": "72430"
  },
  {
    "text": "to get a design review\ndone by Masters. So what that means is next week\nwe are going to schedule",
    "start": "72430",
    "end": "79130"
  },
  {
    "text": "a design review with\nyour Masters. And you should send mail to your\nMasters, hopefully in the",
    "start": "79130",
    "end": "90000"
  },
  {
    "text": "middle of next week, to schedule\na design review. The design review will happen\nthe week after Thanksgiving.",
    "start": "90000",
    "end": "96150"
  },
  {
    "text": "So you'll submit your design\ndoc next week, and then the week after Thanksgiving, you'll schedule your design review.",
    "start": "96150",
    "end": "101930"
  },
  {
    "text": "The earlier the better, because\nyou can hopefully get some really good feedback\nbefore you go into implementation.",
    "start": "101930",
    "end": "107079"
  },
  {
    "text": "So have an idea what\nyou're doing. Of course you're write it up\nfor your design document.",
    "start": "107080",
    "end": "112170"
  },
  {
    "text": "And then go to your Masters\nand say, here's what I'm planning to do. Get some good feedback, and\nhopefully it will help your life to do that.",
    "start": "112170",
    "end": "118100"
  },
  {
    "text": "And then beforehand, performance\nonly mattered for",
    "start": "118100",
    "end": "123890"
  },
  {
    "text": "your grade. We did this absolute grading. This year, we are going to\nhave actually an in-class competition on the final day\nof class, to figure out who",
    "start": "123890",
    "end": "132660"
  },
  {
    "text": "has the fastest ray tracer\nin the class. And for that we will actually\ngive [? you ?]",
    "start": "132660",
    "end": "140440"
  },
  {
    "text": "a little but of a different\n[UNINTELLIGIBLE] than what I have given you. And so you don't go too much\ninto really hand coding to",
    "start": "140440",
    "end": "148770"
  },
  {
    "text": "that teammate because\nthat might not work. And so here's something\nhot off the press. So for the winning team, there's\ngoing to be an Akamai",
    "start": "148770",
    "end": "158120"
  },
  {
    "text": "prize for the winning team. And this prize includes a\ncelebration/demonstration at Akamai headquarters.",
    "start": "158120",
    "end": "164820"
  },
  {
    "text": "You're going to go visit\nthere [UNINTELLIGIBLE] and perhaps show off to their\nengineers the cool",
    "start": "164820",
    "end": "169890"
  },
  {
    "text": "ray tracer you did. And also every team member of\nthe winning team is going to",
    "start": "169890",
    "end": "177040"
  },
  {
    "text": "get the iPod Nano. Sorry, guys, last year\nit didn't happen. First time.",
    "start": "177040",
    "end": "182480"
  },
  {
    "text": "So there's a lot at stake. So make sure your program\nis going to run",
    "start": "182480",
    "end": "189370"
  },
  {
    "text": "as fast as you can. OK, with that, let's\nget your slides on.",
    "start": "189370",
    "end": "199440"
  },
  {
    "text": "So I'd like to introduce\nBradley Kuszmaul. Bradley has been at MIT, in\nand out of MIT, for a long",
    "start": "199440",
    "end": "207430"
  },
  {
    "text": "time doing lots of cool stuff\nwith high-performance--",
    "start": "207430",
    "end": "212620"
  },
  {
    "text": "yeah, make the screen bigger-- high-performance computing.",
    "start": "212620",
    "end": "217660"
  },
  {
    "text": "He has done some really\ninteresting data structure work, performance optimization\nwork, and stuff like that.",
    "start": "217660",
    "end": "223739"
  },
  {
    "text": "And today he's going to talk\nabout an interesting data structure that goes all the way\nfrom theory into getting",
    "start": "223740",
    "end": "230970"
  },
  {
    "text": "really, really high-performance. Thank you, Bradley. OK, you have the mic. BRADLEY KUSZMAUL: So I'm going\nto talk about a data structure",
    "start": "230970",
    "end": "241290"
  },
  {
    "text": "called fractal trees, which in\nthe academic world are called streaming B-trees. But the marketing people didn't\nthink very much of",
    "start": "241290",
    "end": "248310"
  },
  {
    "text": "that, and so a lot of these\nslides are borrowed from a company that I've started. So rather than redo that, I'm\njust going to stick to the",
    "start": "248310",
    "end": "255710"
  },
  {
    "text": "terminology \"fractal tree.\" I'm\nresearch faculty at MIT, and I'm a founder at Tokutek.",
    "start": "255710",
    "end": "261789"
  },
  {
    "text": "And so that's sort\nof who I am. I'll do a little bit\nmore introduction. So I have been around\nat MIT a long time.",
    "start": "261790",
    "end": "269060"
  },
  {
    "text": "I have four MIT degrees. And I was one of the architects\nof the Connection Machine CM-5.",
    "start": "269060",
    "end": "275190"
  },
  {
    "text": "And Charles was also one of the architects of that machine.",
    "start": "275190",
    "end": "280380"
  },
  {
    "text": "So at the time, that was the\nfastest machine in the world, at least for some\napplications. And after getting my degrees and\nbeing an architect, I went",
    "start": "280380",
    "end": "291229"
  },
  {
    "text": "and was a professor\nat Yale, and then later I was at Akamai. So I don't know what an Akamai\nprize is beyond an iPod, but",
    "start": "291230",
    "end": "299080"
  },
  {
    "text": "maybe it's like all your content\ndelivered free for a month or something. And I'm now research faculty\nin the SuperTech Group,",
    "start": "299080",
    "end": "307009"
  },
  {
    "text": "working with Charles. And I'm a founder of Tokutek,\nwhich is commercializing some work we did.",
    "start": "307010",
    "end": "313130"
  },
  {
    "text": "A couple years ago, I started\ncollaborating with Michael Bender and Martin Farach-Colton\non data",
    "start": "313130",
    "end": "320229"
  },
  {
    "text": "structures for that are suited\nfor storing data on disk.",
    "start": "320230",
    "end": "326260"
  },
  {
    "text": "And we ended up a bit later\nstarting a company to commercialize the research. And basically, I'll tell you\nsort of what the background",
    "start": "326260",
    "end": "334330"
  },
  {
    "text": "is, and actually go into some technical on the data structure. So I don't know exactly what\nyou've spent most of your time",
    "start": "334330",
    "end": "342470"
  },
  {
    "start": "339000",
    "end": "457000"
  },
  {
    "text": "on, but a lot of\nhigh-performance work, especially in academia, focuses\non the CPUs and using",
    "start": "342470",
    "end": "349190"
  },
  {
    "text": "the CPUs efficiently,\nmaybe getting lots of FLOPS or something. The Cilk work that Charles and\nI did, for example, is",
    "start": "349190",
    "end": "355730"
  },
  {
    "text": "squarely in the category of how\ndo you get more FLOPS, or more computrons out of\na particular machine.",
    "start": "355730",
    "end": "363770"
  },
  {
    "text": "But it turns out often I/O is\na big bottleneck, and so you see systems that look a\nlittle bit like this.",
    "start": "363770",
    "end": "369850"
  },
  {
    "text": "You have a whole bunch of\nsensors somewhere, and the sensors might be something like\na bunch of telescopes in",
    "start": "369850",
    "end": "380900"
  },
  {
    "text": "an astronomy system. They're sending millions of\ndata items per second, and they have to be stored.",
    "start": "380900",
    "end": "386100"
  },
  {
    "text": "And disk is where you have to\nstore large amounts of data, because disk is orders of\nmagnitude per byte than other",
    "start": "386100",
    "end": "393830"
  },
  {
    "text": "storage systems. And then you want to do queries\non that data, and you",
    "start": "393830",
    "end": "402560"
  },
  {
    "text": "want to look at the data\nthat's recent. So it's not good enough just to\nlook at yesterday's data. You want to know what's\ngoing on right now.",
    "start": "402560",
    "end": "408500"
  },
  {
    "text": "If your sensor array is a bunch\nof telescopes, and a supernova starts happening, you\nwant to be able to find",
    "start": "408500",
    "end": "413980"
  },
  {
    "text": "out quickly what's going on, so\nthat you can broadcast the message to everybody in the\nworld so they can all point their telescopes at the\nsupernova while it's fresh.",
    "start": "413980",
    "end": "422690"
  },
  {
    "text": "So that's the picture. Another example of a sensor\nsystem is the internet, where",
    "start": "422690",
    "end": "428730"
  },
  {
    "text": "you have thousands or millions\nof people clicking away on Facebook, for example.",
    "start": "428730",
    "end": "433850"
  },
  {
    "text": "You could view that collection\nof mice as, abstractly, a bunch of sensors.",
    "start": "433850",
    "end": "439580"
  },
  {
    "text": "And so you see it in science. You see it in internet. There's lots of applications. For example, another one would\nbe that you're looking for",
    "start": "439580",
    "end": "447220"
  },
  {
    "text": "attacks on your internet\ninfrastructure in a large corporation, or something.",
    "start": "447220",
    "end": "454370"
  },
  {
    "text": "So trying to reduce this big\nsensor system to what is the",
    "start": "454370",
    "end": "463320"
  },
  {
    "start": "457000",
    "end": "515000"
  },
  {
    "text": "fundamental problem, basically\nwe need to index the data. So the data indexing\nproblem is this.",
    "start": "463320",
    "end": "469550"
  },
  {
    "text": "Data is arriving in one order,\nand you want to ask about it in another order.",
    "start": "469550",
    "end": "475440"
  },
  {
    "text": "So typically data is arriving\nin the order by time. When an observation is made,\nthe event is logged.",
    "start": "475440",
    "end": "483260"
  },
  {
    "text": "When the next observation is\nmade, the event is logged. And then you want\nto do a query. Tell me everything that's\nhappening in that particular",
    "start": "483260",
    "end": "491040"
  },
  {
    "text": "area of the sky over\nthe past month. So there's a big transposition\nthat has to be done for these",
    "start": "491040",
    "end": "498060"
  },
  {
    "text": "queries, abstractly, is the\ndata's coming in in one order, and you want to sort\nit and get the data",
    "start": "498060",
    "end": "503490"
  },
  {
    "text": "out in another order.  So one solution to this problem\nthat a lot of people",
    "start": "503490",
    "end": "510699"
  },
  {
    "text": "use is simply to\nsort the data. The data comes in. Sort it. ",
    "start": "510700",
    "end": "516860"
  },
  {
    "start": "515000",
    "end": "593000"
  },
  {
    "text": "Then you can query it in the\norder that it makes sense. This is basically a\nsimple-minded explanation of",
    "start": "516860",
    "end": "523150"
  },
  {
    "text": "what a data warehouse is. A data warehouse is all\nthis data comes in-- Walmart runs one of\nthese in Arkansas.",
    "start": "523150",
    "end": "529610"
  },
  {
    "text": "All these events which are\npeople scanning cans of soup on bar codes all over the\ncountry out in Walmart stores,",
    "start": "529610",
    "end": "536560"
  },
  {
    "text": "all that data arrives in\nArkansas, in one location. They sort the data overnight,\nand then the next morning they",
    "start": "536560",
    "end": "543870"
  },
  {
    "text": "can answer questions like what's\nthe most popular food in the week before a\nhurricane strikes?",
    "start": "543870",
    "end": "552070"
  },
  {
    "text": "Because this is the kind of\nrequest that Walmart might care about, because they get a\nforecast that a hurricane's",
    "start": "552070",
    "end": "557230"
  },
  {
    "text": "coming, and it turns out they\nneed to ship beer and blueberry Pop-Tarts to the local\nstores, which are the",
    "start": "557230",
    "end": "563920"
  },
  {
    "text": "things that basically you can\neat even if power has failed. The problem with sorting\nis that you",
    "start": "563920",
    "end": "570550"
  },
  {
    "text": "have to wait overnight. And for Walmart, that might\nactually be good enough. But if you're the\nastronomer, that",
    "start": "570550",
    "end": "576889"
  },
  {
    "text": "application is not so great. So this problem is called\nthe indexing problem.",
    "start": "576890",
    "end": "582940"
  },
  {
    "text": "We have to maintain indexes. And traditionally, the classical\nsolution is to use a",
    "start": "582940",
    "end": "590790"
  },
  {
    "text": "data structure called\na B-tree. So do you all know\nwhat a B-tree is? [INAUDIBLE] data structures\nto algorithms?",
    "start": "590790",
    "end": "597120"
  },
  {
    "start": "593000",
    "end": "875000"
  },
  {
    "text": "A B-tree is like a search tree,\nexcept it's got some fan-out, and I'll talk\nabout it in a second.",
    "start": "597120",
    "end": "603030"
  },
  {
    "text": "They show up in virtually all\nstorage systems today, and they were invented about 40\nyears ago, and they show up in",
    "start": "603030",
    "end": "610160"
  },
  {
    "text": "databases such as MyISAM\nor Oracle. They show up in file\nsystems like XFS.",
    "start": "610160",
    "end": "616010"
  },
  {
    "text": "You can think of what Unix file\nsystems like EXT do as being a variation of a B-tree. Basically they're everywhere.",
    "start": "616010",
    "end": "622630"
  },
  {
    "text": "Mike might drew this picture\nof a B-tree. And I said, I don't get it.",
    "start": "622630",
    "end": "631090"
  },
  {
    "text": "He said, well, there's a\ntree, and there's bees. And I said, but those\nare wasps.",
    "start": "631090",
    "end": "636709"
  },
  {
    "text": "So anyway-- ",
    "start": "636710",
    "end": "645670"
  },
  {
    "text": "So a B-tree looks like this. It's a search tree, so that\nmeans everything is organized. It's got left children and right\nchildren, and there's",
    "start": "645670",
    "end": "652990"
  },
  {
    "text": "actually many children. And like any other search tree,\nall the things to the left are before all the\nthings to the right.",
    "start": "652990",
    "end": "658820"
  },
  {
    "text": "That's sort of the property of\ntrees that lets you do more than just a hash table. A hash table lets you\ndo get and put.",
    "start": "658820",
    "end": "665850"
  },
  {
    "text": "But a tree lets you do next. And that's the key observation,\nwhy you need",
    "start": "665850",
    "end": "671870"
  },
  {
    "text": "something like a tree instead\nof a hash table. A lot of database queries-- if\nyou go and click on Facebook",
    "start": "671870",
    "end": "677510"
  },
  {
    "text": "on somebody's page, there's\nall these things that have been posted on somebody's\nwall.",
    "start": "677510",
    "end": "685770"
  },
  {
    "text": "And what they've done when they\norganized that data is that they've organized it so\nthat each of those items is a",
    "start": "685770",
    "end": "691750"
  },
  {
    "text": "row in the database, and they're\nnext to each other so that you fetch the first one,\nwhich is like the home page of",
    "start": "691750",
    "end": "697380"
  },
  {
    "text": "the person, and then the next\nand next and next gives each of the messages that they\nwant to display.",
    "start": "697380",
    "end": "702860"
  },
  {
    "text": "And by making those things\nadjacent to each other, it means that they don't incur\na disk I/O every time.",
    "start": "702860",
    "end": "709630"
  },
  {
    "text": "if it were just a hash table,\nyou'd be having to look all over the place to find\nthose things. So B-trees are really fast, if\nyou have to do insertions",
    "start": "709630",
    "end": "718010"
  },
  {
    "text": "sequentially. And the reason is you have a\ndata structure that's too big to fit in main memory.",
    "start": "718010",
    "end": "725350"
  },
  {
    "text": "If the data structure fits in\nmain memory, this is just the wrong data structure, right? If it fits in main memory, what\nshould you use to solve",
    "start": "725350",
    "end": "733320"
  },
  {
    "text": "this problem?  Any ideas?",
    "start": "733320",
    "end": "739450"
  },
  {
    "text": "What data structure is like a\nB-tree except it doesn't have lots of fan-out?",
    "start": "739450",
    "end": "744660"
  },
  {
    "text": " Does anybody know this\nstuff in this class?",
    "start": "744660",
    "end": "750784"
  },
  {
    "text": " Do you people know data\nstructures at all?",
    "start": "750784",
    "end": "756780"
  },
  {
    "text": "Maybe I'm in the wrong place. Because it's OK. Just a binary tree would be the\ndata structure if you were",
    "start": "756780",
    "end": "763550"
  },
  {
    "text": "doing this in memory, right? A binary tree would be fine. Or maybe you would try to\nminimize the number of cache",
    "start": "763550",
    "end": "770365"
  },
  {
    "text": "misses or something. So for sequential inserts, if\nyou're inserting at the end,",
    "start": "770365",
    "end": "776640"
  },
  {
    "text": "basically all the stuff down the\nright spine of the tree is in main memory, and\nan insertion just inserts and inserts.",
    "start": "776640",
    "end": "781870"
  },
  {
    "text": "You have no disk I/Os,\nand basically it runs extremely fast. The disk I/O is sequential.",
    "start": "781870",
    "end": "788210"
  },
  {
    "text": "You get basically performance\nthat's limited by the disk bandwidth, which is the rate\nat which the disk can write",
    "start": "788210",
    "end": "795269"
  },
  {
    "text": "consecutive blocks. But B-trees are really slow if\nyou're doing insertions that",
    "start": "795270",
    "end": "801649"
  },
  {
    "text": "look random. The database world calls\nthose high-entropy. And so basically the idea is I\npick some leaf at random, and",
    "start": "801650",
    "end": "809320"
  },
  {
    "text": "then I have to bring it into\nmain memory, put the new record in there, and then\neventually write it back out.",
    "start": "809320",
    "end": "815610"
  },
  {
    "text": "And because the data structure\nis spread all over disk, then each of those random blocks that\nI choose, when I bring it",
    "start": "815610",
    "end": "822530"
  },
  {
    "text": "in, that's a random disk I/O,\nwhich is very expensive. So here, for this workload,\nunlike the previous workload,",
    "start": "822530",
    "end": "829389"
  },
  {
    "text": "the performance of the system is\nlimited by how fast can you move the disk head around,\nrather than how fast can you",
    "start": "829390",
    "end": "837259"
  },
  {
    "text": "write having placed\nthe disk head. And you perhaps you can only, on\na disk drive, do something",
    "start": "837260",
    "end": "843920"
  },
  {
    "text": "like 100 disk head movements\nper second. And if you're writing small\nrecords that are like 100",
    "start": "843920",
    "end": "853010"
  },
  {
    "text": "bytes or something, you might\nfind yourself using a thousandth of a percent of the\ndisk I/O, of the disk's",
    "start": "853010",
    "end": "860500"
  },
  {
    "text": "bandwidth performance. And so people hate that. They hate buying something and\nonly being able to use a",
    "start": "860500",
    "end": "865690"
  },
  {
    "text": "thousandth of a percent\nof its capacity. Right? ",
    "start": "865690",
    "end": "874440"
  },
  {
    "text": "New B-trees. Something's wrong\nwith that title. So B-trees are really fast in\ndoing range queries, because",
    "start": "874440",
    "end": "881190"
  },
  {
    "text": "basically once you've are\nbrought a block in and you want to do the next item,\nchances are the next item's",
    "start": "881190",
    "end": "886470"
  },
  {
    "text": "also on the same page. So once in while you go over a\npage boundary, but mostly you just reading stuff very fast.",
    "start": "886470",
    "end": "893410"
  },
  {
    "text": "Oh, I know what this is about. When a B-tree's new and it's\nbeen constructed sequentially, it's also very fast.",
    "start": "893410",
    "end": "899350"
  },
  {
    "text": "When it gets old, what happens\nis the blocks themselves get moved around on disk. They're not next\nto each other.",
    "start": "899350",
    "end": "905280"
  },
  {
    "text": "And this is a problem that\npeople have spent a lot of time trying to solve, is that\nas B-trees get older, their",
    "start": "905280",
    "end": "912370"
  },
  {
    "text": "performance degrades. This aging problem-- I saw one report that suggested\nthat something like",
    "start": "912370",
    "end": "920790"
  },
  {
    "text": "2% of all the money spent by\ncorporations on IT is spent",
    "start": "920790",
    "end": "927430"
  },
  {
    "text": "dumping and reloading their\nB-trees to try to make this problem go away.",
    "start": "927430",
    "end": "932820"
  },
  {
    "text": "So that's a lot of money\nor pain or something. ",
    "start": "932820",
    "end": "940890"
  },
  {
    "text": "Well, B-trees are optimal\nfor doing lookups.",
    "start": "940890",
    "end": "946880"
  },
  {
    "start": "945000",
    "end": "1089000"
  },
  {
    "text": "If you just want to look\nsomething up, there's an old argument that says, gee,\nif going to have a tree",
    "start": "946880",
    "end": "952660"
  },
  {
    "text": "structure, which is what you\nneed in order to do next operations, then you're going to\nhave some path through the",
    "start": "952660",
    "end": "959220"
  },
  {
    "text": "B-tree which is a certain depth,\nand you do it optimally",
    "start": "959220",
    "end": "964370"
  },
  {
    "text": "by having the fan-out\nbe the block size. And everything works. ",
    "start": "964370",
    "end": "971520"
  },
  {
    "text": "But that argument of optimality\nis not actually true for insertion workloads.",
    "start": "971520",
    "end": "977899"
  },
  {
    "text": "And this is where the data\nstructures work that I've done with Mike and Martin sort of\ngets to be an advantage.",
    "start": "977900",
    "end": "985440"
  },
  {
    "text": "To see that B-trees aren't\noptimal for insertions-- here's a data structure that's\nreally good at insertions.",
    "start": "985440",
    "end": "992339"
  },
  {
    "text": "What is the data structure? I'm just going to append\nto the end of a file. Right?",
    "start": "992340",
    "end": "997920"
  },
  {
    "text": "So it's great. Basically, it doesn't matter\nwhat the keys are. I can insert data\ninto this data",
    "start": "997920",
    "end": "1004010"
  },
  {
    "text": "structure at disk bandwidth.  What's the disadvantage of\nthis data structure?",
    "start": "1004010",
    "end": "1011468"
  },
  {
    "text": "AUDIENCE: Lookups? BRADLEY KUSZMAUL: Lookups. So what is the disadvantage?",
    "start": "1011468",
    "end": "1017530"
  },
  {
    "text": "Lookups aren't so good. What is the cost of\ndoing a lookup? AUDIENCE: Order N?",
    "start": "1017530",
    "end": "1022536"
  },
  {
    "text": "BRADLEY KUSZMAUL: Order n. Yeah. You have to look\nat everything.",
    "start": "1022536",
    "end": "1027730"
  },
  {
    "text": "It requires a scan of\nthe entire table. And we'll get into what the\ncost model is in a second.",
    "start": "1027730",
    "end": "1033849"
  },
  {
    "text": "But basically, you have\nto look at everything. So it's order n.",
    "start": "1033849",
    "end": "1039250"
  },
  {
    "text": "It turns out the number of\nblocks you have to read in, which is the thing\nyou care about--",
    "start": "1039250",
    "end": "1045319"
  },
  {
    "text": "it's order n over b. So we'll get into a performance model in just a second.",
    "start": "1045319",
    "end": "1050480"
  },
  {
    "text": "So here we are. We have two data structures--\na B-tree, which is not so great at insertions.",
    "start": "1050480",
    "end": "1057140"
  },
  {
    "text": "It's quite good at point queries\nand quite good at ranged queries, especially\nwhen it's young.",
    "start": "1057140",
    "end": "1062529"
  },
  {
    "text": "And we have this other data\nstructure, which is the append data structure, which is\nwonderful for insertions and",
    "start": "1062530",
    "end": "1068700"
  },
  {
    "text": "really bad for queries. So can you do something that's\nlike the best of",
    "start": "1068700",
    "end": "1075010"
  },
  {
    "text": "all possible worlds? You can imagine a data structure\nthat's the worst of all possible, but it turns out\nthat there are data structures",
    "start": "1075010",
    "end": "1082570"
  },
  {
    "text": "that do well for this. And I'll show you how one\nworks in a minute",
    "start": "1082570",
    "end": "1089480"
  },
  {
    "start": "1089000",
    "end": "2117000"
  },
  {
    "text": "So to explain how it works and\nto do the analysis, we need to have a cost model. And we got into this just a\nminute ago, with what is the",
    "start": "1089480",
    "end": "1096059"
  },
  {
    "text": "cost model for a table scan? Is it order N? Well, if you're only counting\nthe number of CPU cycles that",
    "start": "1096060",
    "end": "1103080"
  },
  {
    "text": "you're using up, it's order N,\nbecause you have to look at every item. But if what you really care\nabout is the number of disk",
    "start": "1103080",
    "end": "1108910"
  },
  {
    "text": "I/Os, then you just count\nup the number of blocks. And so in that model, the cost\nis order N over B. And that's",
    "start": "1108910",
    "end": "1115820"
  },
  {
    "text": "the model that we're going to\nuse to do this analysis. So in this model, we aren't\ngoing to care about CPU cost.",
    "start": "1115820",
    "end": "1123030"
  },
  {
    "text": "We are going to care about disk\nI/O. And that's a pretty good place to design in if\nyou're an engineer, because",
    "start": "1123030",
    "end": "1128510"
  },
  {
    "text": "right now the number of CPU\ncycles that you get for a dollar is going up.",
    "start": "1128510",
    "end": "1134620"
  },
  {
    "text": "It's been going up. It's continuing to go up. You have to write parallel\nprograms today to get that,",
    "start": "1134620",
    "end": "1140140"
  },
  {
    "text": "but you get a lot of cycles\nin a $100 package.",
    "start": "1140140",
    "end": "1146650"
  },
  {
    "text": "But the number of disk I/Os\nthat you're getting is essentially unchanged. It's maybe improved by a factor\nof two in 40 years.",
    "start": "1146650",
    "end": "1154520"
  },
  {
    "text": "So that's the one to optimize\nfor, is the one that's not changing.",
    "start": "1154520",
    "end": "1159960"
  },
  {
    "text": "And use all those CPU cycles,\nif you can, to do something. So the model here is that we're\ngoing to have a memory",
    "start": "1159960",
    "end": "1166880"
  },
  {
    "text": "and a disk. And you could use this, and\nthere's some block size, B,",
    "start": "1166880",
    "end": "1173340"
  },
  {
    "text": "which we may or may not\nknow what it is. And it's actually quite tricky\non real disk systems to figure",
    "start": "1173340",
    "end": "1179340"
  },
  {
    "text": "out what the right\nblock size is. It's not 500 bytes, because\nthat's not going to be a good",
    "start": "1179340",
    "end": "1188100"
  },
  {
    "text": "block size. It might be more like\na megabyte. And when we move stuff back and\nforth, we're going to move",
    "start": "1188100",
    "end": "1193880"
  },
  {
    "text": "a block at a time. We're going to bring in a whole\nblock from disk, and when we have to write a\nblock out, we write",
    "start": "1193880",
    "end": "1199440"
  },
  {
    "text": "the whole block out. So we're just going\nto count that up. There's two parameters. There's the block size, B, and\nthe memory size, M. So if the",
    "start": "1199440",
    "end": "1208790"
  },
  {
    "text": "memory is as big as the entire\ndisk, then the problem goes away, and if the memory's way\ntoo small-- like you can only",
    "start": "1208790",
    "end": "1214700"
  },
  {
    "text": "have one block-- then it's very difficult\nto get anything done. So you need to be able\nto hold several",
    "start": "1214700",
    "end": "1220540"
  },
  {
    "text": "blocks worth of storage. The memory is treated\nas a cache for disk. So once we've brought a block\nin, we can keep using it for a",
    "start": "1220540",
    "end": "1228429"
  },
  {
    "text": "while until we get rid of it. So have you guys done any\ncache-oblivious data structures? OK.",
    "start": "1228430",
    "end": "1233990"
  },
  {
    "text": "So you've seen this model. So the game here is to minimize\nthe number of clock",
    "start": "1233990",
    "end": "1239170"
  },
  {
    "text": "cycles and not worrying\nabout the CPU cycles. So here's the theoretical\nresults.",
    "start": "1239170",
    "end": "1244300"
  },
  {
    "text": "We'll start with a B-tree. So a B-tree which has\na block size b-- and here I'm going to assume\nthat the things you're storing",
    "start": "1244300",
    "end": "1251270"
  },
  {
    "text": "are unit sized. Because you can do the analysis,\nbut it gets more complicated. So the cost of a lookup, which\nis the upper right side, is",
    "start": "1251270",
    "end": "1262540"
  },
  {
    "text": "log N over log B. That's\nthe same as-- ",
    "start": "1262540",
    "end": "1273040"
  },
  {
    "text": "you may not be used to\nmanipulating these, but usually people write this as\nlog base B of N. But that's",
    "start": "1273040",
    "end": "1280800"
  },
  {
    "text": "the same as log N over log B.\nAnd I'm going to write it this",
    "start": "1280800",
    "end": "1286920"
  },
  {
    "text": "way, because then it's easier\nto compare things. So if B is 1,000 or\nsomething, then",
    "start": "1286920",
    "end": "1295010"
  },
  {
    "text": "basically instead of paying-- ",
    "start": "1295010",
    "end": "1300590"
  },
  {
    "text": "just as an example, if N is,\nsay, 2 to the 40th-- ",
    "start": "1300590",
    "end": "1306490"
  },
  {
    "text": "let's these all to\nlg's because it basically doesn't matter. So it's 40 over log base B,\nand if B is, say, 2 to the",
    "start": "1306490",
    "end": "1314880"
  },
  {
    "text": "10th, then that means that if\nyou have a trillion items and",
    "start": "1314880",
    "end": "1322710"
  },
  {
    "text": "you have a fan-out of 1,000, it\ntakes you at most four disk I/Os to find any particular\nitem.",
    "start": "1322710",
    "end": "1331880"
  },
  {
    "text": "An insertion cost is the same,\nbecause to do an insertion, we have to find the leaf that the\nitem should have been in, and",
    "start": "1331880",
    "end": "1338820"
  },
  {
    "text": "then put it there.  So the append log-- well, what's\nthe cost of insertion?",
    "start": "1338820",
    "end": "1346370"
  },
  {
    "text": "Well, we're appending\naway, right? And once every B items, we\nactually have to do a disk",
    "start": "1346370",
    "end": "1352630"
  },
  {
    "text": "I/O. So the cost of an\ninsertion in the append log isn't 0.",
    "start": "1352630",
    "end": "1358120"
  },
  {
    "text": "It's one Bth of a block\nI/O per object. And the point query cost\nlooks really bad.",
    "start": "1358120",
    "end": "1364640"
  },
  {
    "text": "It's N over B, which we\nalready discussed. So the fractal tree has this\nkind of performance.",
    "start": "1364640",
    "end": "1371760"
  },
  {
    "text": "It's log N over-- it's not B, which would\nbe really great.",
    "start": "1371760",
    "end": "1378370"
  },
  {
    "text": "It's something smaller. It's maybe square root of B\nfor the insertion cost.",
    "start": "1378370",
    "end": "1386450"
  },
  {
    "text": "And the lookup cost is log N\nover something, which I'm going to just hide.",
    "start": "1386450",
    "end": "1393630"
  },
  {
    "text": "Let's set epsilon to 1/2 and\nwork out what that is.",
    "start": "1393630",
    "end": "1400750"
  },
  {
    "text": "Because epsilon 1/2 is a\ngood engineering point. So the insertion cost is log N\nover B to the 1/2, which is",
    "start": "1400750",
    "end": "1412809"
  },
  {
    "text": "log N over root B. And the other\none, the lookup cost--",
    "start": "1412810",
    "end": "1420275"
  },
  {
    "start": "1420275",
    "end": "1425540"
  },
  {
    "text": "there's all big 0's around here,\nbut I'm not going to draw those again-- over 1/2-- so I'm going to maybe\nignore that--",
    "start": "1425540",
    "end": "1431540"
  },
  {
    "text": "of the log of the square root\nof B. Did I do that right?",
    "start": "1431540",
    "end": "1442370"
  },
  {
    "text": "B to the 1 minus 1/2. Put the 1/2 back in\nto make you happy.",
    "start": "1442370",
    "end": "1448179"
  },
  {
    "text": "So big-O of that-- well, what's log of root B? ",
    "start": "1448180",
    "end": "1456850"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] BRADLEY KUSZMAUL: I can't\nquite hear you, but I know the answer.",
    "start": "1456850",
    "end": "1463020"
  },
  {
    "text": "I can just say that's the same\nas log B, when I'm doing big 0's Get rid of the halves. So it's log N over log B. So\nif you sort of choose block",
    "start": "1463020",
    "end": "1473890"
  },
  {
    "text": "sizes, if you set this parameter\nto be something",
    "start": "1473890",
    "end": "1479530"
  },
  {
    "text": "where you're doing something\nwith the square root, you end up having lookups that cost,\nasymptotically the",
    "start": "1479530",
    "end": "1485320"
  },
  {
    "text": "same as for a B-tree. But there are these constants\nin there. There's a factor of 4\nor something that",
    "start": "1485320",
    "end": "1491480"
  },
  {
    "text": "I've glossed over. But asymptotically,\nit's the same. And insertions have this much\nbetter performance.",
    "start": "1491480",
    "end": "1499290"
  },
  {
    "text": "What if B was 1,000? Then we're dividing\nby 30 here.",
    "start": "1499290",
    "end": "1505090"
  },
  {
    "text": "But B isn't really 1,000. B's more like a million\nin a modern system. So you actually get to divide by\nsomething like 1,000 here.",
    "start": "1505090",
    "end": "1514940"
  },
  {
    "text": "And that's a huge advantage, to\nbasically make insertions asymptotically be 1,000 times\nfaster, whatever that means.",
    "start": "1514940",
    "end": "1522851"
  },
  {
    "text": " When you actually work out the\nconstants, perhaps it's a factor of 100, is what\nwe see in practice.",
    "start": "1522852",
    "end": "1532120"
  },
  {
    "text": "So this is basically working\nout those details.",
    "start": "1532120",
    "end": "1539070"
  },
  {
    "text": "So here's an example. Here is a data structure that\ncan achieve this kind of performance.",
    "start": "1539070",
    "end": "1544380"
  },
  {
    "text": "It's a simple version of\na streaming B-tree or a fractal tree. And what this data\nstructure is--",
    "start": "1544380",
    "end": "1550179"
  },
  {
    "text": "so first of all, we're kind of\ngoing to switch modes from",
    "start": "1550180",
    "end": "1555340"
  },
  {
    "text": "marketoid, or at least\nexplaining what it's good for, to talking about what a data\nstructure is that actually",
    "start": "1555340",
    "end": "1560640"
  },
  {
    "text": "solves the problem. So any questions before we\ndive down that path? OK. So if there are any questions,\nstop me.",
    "start": "1560640",
    "end": "1567210"
  },
  {
    "text": "Because I like to race through\nthis stuff if possible.",
    "start": "1567210",
    "end": "1572700"
  },
  {
    "text": "So the deal here is that you're\ngoing to have log N arrays, and each one is a\npower of two in size.",
    "start": "1572700",
    "end": "1580230"
  },
  {
    "text": "And you're going to have one\nfor each power of 2. So there's going to be one array\nof size 1, one of size 2, one of size 4 and 8 and 16,\nall the way up to a trillion,",
    "start": "1580230",
    "end": "1591620"
  },
  {
    "text": "2 to the 40th.  The second invariant of this\ndata structure is each array",
    "start": "1591620",
    "end": "1597920"
  },
  {
    "text": "is either completely full\nor completely empty. And the third one is that\neach array is sorted.",
    "start": "1597920",
    "end": "1605140"
  },
  {
    "text": " So I'll do an example here.",
    "start": "1605140",
    "end": "1613390"
  },
  {
    "text": "If I have four elements in the\narray, and these are the numbers, there's only one way\nfor me to put those in that",
    "start": "1613390",
    "end": "1620670"
  },
  {
    "text": "satisfy all those\nrequirements. Because there's four items,\nit has to go into the",
    "start": "1620670",
    "end": "1625720"
  },
  {
    "text": "array of size four. It has to fill it up. I can't have any other\nway of doing that. And within that array of size\nfour, they have to be sorted.",
    "start": "1625720",
    "end": "1632900"
  },
  {
    "text": "So those four elements uniquely\ngo there, and that's the end of the story for\nwhere four elements go.",
    "start": "1632900",
    "end": "1638390"
  },
  {
    "text": " If there's 10 elements, you get\na little freedom, because,",
    "start": "1638390",
    "end": "1644710"
  },
  {
    "text": "well, we have to fill up the 2\narray and we have to fill up the 8 array, because there's\nonly one way to write in",
    "start": "1644710",
    "end": "1649880"
  },
  {
    "text": "binary 10, which is 0101. But we get a little choice.",
    "start": "1649880",
    "end": "1655870"
  },
  {
    "text": "It turns out that the bottom\narray has to be sorted and the top array, the array\ncontaining 5 and",
    "start": "1655870",
    "end": "1661950"
  },
  {
    "text": "10 has to be sorted. But we could have put the five\ndown here and, say, swapped the 5 and the 6, and that\nwould've been a perfectly",
    "start": "1661950",
    "end": "1669210"
  },
  {
    "text": "valid data structure for this\nset of data as well. So we get a little\nbit of freedom.",
    "start": "1669210",
    "end": "1675080"
  },
  {
    "text": "OK? So that's the basic\ndata structure. So now what do we do?",
    "start": "1675080",
    "end": "1680910"
  },
  {
    "text": "How do you search this\ndata structure? Well, the idea is just to\nperform a binary search in",
    "start": "1680910",
    "end": "1686890"
  },
  {
    "text": "each of the arrays. ",
    "start": "1686890",
    "end": "1693060"
  },
  {
    "text": "The advantage of this is it\nworks, and it's a lot faster than a table scan. The disadvantage is it's\nactually quite a bit slower",
    "start": "1693060",
    "end": "1700670"
  },
  {
    "text": "than a B-tree, because if you do\nthe analysis here, which in",
    "start": "1700670",
    "end": "1706380"
  },
  {
    "text": "this class, you probably--\nyou've done things like master theorem and stuff, right? So you know what the cost of\ndoing the search in the",
    "start": "1706380",
    "end": "1713550"
  },
  {
    "text": "biggest array is, right? How many disk I/Os is that\nin the worst case?",
    "start": "1713550",
    "end": "1718552"
  },
  {
    "text": "AUDIENCE: Log N. BRADLEY KUSZMAUL: It's log N.\nIt's going to be log base 2 of",
    "start": "1718552",
    "end": "1725170"
  },
  {
    "text": "N, plus or minus a little bit. Just ignore all that stuff.",
    "start": "1725170",
    "end": "1731720"
  },
  {
    "text": "I'll just do L-O-G. So what's\nthe size of doing the second-biggest array?",
    "start": "1731720",
    "end": "1736810"
  },
  {
    "text": "What's the cost of searching\nthe second-biggest array? ",
    "start": "1736810",
    "end": "1742009"
  },
  {
    "text": "It's half as big, so it's\nlog of N over 2, right?",
    "start": "1742010",
    "end": "1750930"
  },
  {
    "text": "I can't write.  So this is log N. This is equal\nto log of N minus 1.",
    "start": "1750930",
    "end": "1763590"
  },
  {
    "text": "What's the next array? What's the cost of searching\nthe next biggest array? ",
    "start": "1763590",
    "end": "1772150"
  },
  {
    "text": "Log of N minus 2-- ",
    "start": "1772150",
    "end": "1778570"
  },
  {
    "text": "you add that up, and\nwhat's the sum? We don't even need recurrences\nfor this.",
    "start": "1778570",
    "end": "1784639"
  },
  {
    "text": "We could have done it that\nway, but what's the sum? When we finally get down to 1,\nand you search the bottom",
    "start": "1784640",
    "end": "1790309"
  },
  {
    "text": "array, you have to do one disk\nI/O in the worst case. So this is an arithmetic\nsequence, right?",
    "start": "1790310",
    "end": "1798380"
  },
  {
    "text": "So what's the answer? Big-O. I'm not even going\nto ask for the--",
    "start": "1798380",
    "end": "1804679"
  },
  {
    "text": "pardon? AUDIENCE: Log squared? BRADLEY KUSZMAUL: Yes, it's log\nsquared, which is right there in green.",
    "start": "1804680",
    "end": "1809960"
  },
  {
    "text": " So basically, this thing\nis really expensive. Log squared N, when we were\ntrying to match a B-tree,",
    "start": "1809960",
    "end": "1818900"
  },
  {
    "text": "which is log N over log B. So\nnot only is it not log base B,",
    "start": "1818900",
    "end": "1823920"
  },
  {
    "text": "it's log base 2 or something. But it's squaring it. So if you think of having a\nmillion items in your data",
    "start": "1823920",
    "end": "1831710"
  },
  {
    "text": "structure, even a relatively\nsmall one, log base 1 million is 20.",
    "start": "1831710",
    "end": "1837720"
  },
  {
    "text": "If you square that,\nthat's 400. Maybe you get to divide by 2. It's hundreds of disk I/Os\njust to do a look",
    "start": "1837720",
    "end": "1843730"
  },
  {
    "text": "up, instead of four. So this is just sucking\nat this point.",
    "start": "1843730",
    "end": "1849440"
  },
  {
    "text": "So let's put that aside and see\nif we can do insertion, since we are doing so badly\nat [? logging. ?]",
    "start": "1849440",
    "end": "1856510"
  },
  {
    "text": "So to make this easier to think\nabout, I'm going to add another set of temporary\narrays.",
    "start": "1856510",
    "end": "1862750"
  },
  {
    "text": "So I'm actually going to have\ntwo arrays of each size. And the idea is at the beginning\nof each step, after",
    "start": "1862750",
    "end": "1868490"
  },
  {
    "text": "doing an insertion, all the\ntemporary arrays are empty. I'm only going to have arrays\non the left side that are",
    "start": "1868490",
    "end": "1874810"
  },
  {
    "text": "going to have data in them. So to insert 15 into this data\nstructure, there's only one",
    "start": "1874810",
    "end": "1880290"
  },
  {
    "text": "place to put it. I put it in the one array, if\nI'm trying to be lazy about how much work I want to do.",
    "start": "1880290",
    "end": "1886170"
  },
  {
    "text": "And it turns out, this is\nexactly what you want to do. You have an an empty one array,\na new element comes in,",
    "start": "1886170",
    "end": "1892210"
  },
  {
    "text": "just put it in there.  Now I want to insert a 7.",
    "start": "1892210",
    "end": "1897520"
  },
  {
    "text": "There's no place in the one\narray, so I'm going to put it in the one array over\non the temp side.",
    "start": "1897520",
    "end": "1902870"
  },
  {
    "text": "And then I'm going to merge\nthe two one arrays to make a two array. So the 15 and the 7 become\n7 and 15 here.",
    "start": "1902870",
    "end": "1912310"
  },
  {
    "text": "I couldn't put it there\nbecause that array already was full. And then I merge those two\nto make a new four array.",
    "start": "1912310",
    "end": "1921110"
  },
  {
    "text": "So this is the final\nresult after inserting those two items.",
    "start": "1921110",
    "end": "1926332"
  },
  {
    "text": "Does that make sense?  It's not a hard data\nstructure.",
    "start": "1926332",
    "end": "1933299"
  },
  {
    "text": "So one insertion can cause\na whole bunch of merges. Here we have sort\nof an animation.",
    "start": "1933300",
    "end": "1939200"
  },
  {
    "text": "So here I've laid out the one\narray across the top, and then the temporary array just under\nit, and then going down, we",
    "start": "1939200",
    "end": "1947200"
  },
  {
    "text": "have a sequence of steps for the\ndata structure over time. So we have the whole arrays.",
    "start": "1947200",
    "end": "1953170"
  },
  {
    "text": "We have one and the two and the\nfour and the eight array are all full, and we insert\none more item, which causes a big carry.",
    "start": "1953170",
    "end": "1959720"
  },
  {
    "text": "So the one creates a two, the\ntwo twos create two fours, the two fours and the eight create\ntwo eights, and so forth.",
    "start": "1959720",
    "end": "1966659"
  },
  {
    "text": "So here you are. You're running. You've built up a terabyte\nof data.",
    "start": "1966660",
    "end": "1972309"
  },
  {
    "text": "Your insert one more item,\nand now you have to rewrite all of disk. So that also sounds a\nlittle unappealing.",
    "start": "1972310",
    "end": "1979860"
  },
  {
    "text": "But we'll build on this to make\na data structure that actually works.",
    "start": "1979860",
    "end": "1985620"
  },
  {
    "text": "So first let's analyze what the\naverage cost for this data structure is. I've just sort of explained\nwhy-- there are some really",
    "start": "1985620",
    "end": "1992860"
  },
  {
    "text": "bad cases where you're doing an insertion and it's expensive. But on average, it turns\nout it's really good.",
    "start": "1992860",
    "end": "1999040"
  },
  {
    "text": "And the reason is that merging\nof sorted arrays is really I/O",
    "start": "1999040",
    "end": "2004430"
  },
  {
    "text": "efficient, because the merge\nis essentially operating on that append data structure.",
    "start": "2004430",
    "end": "2010480"
  },
  {
    "text": "We're reading two append data\nstructures and then writing the answer into another\nappend data structure.",
    "start": "2010480",
    "end": "2015789"
  },
  {
    "text": "And that does hardly any I/O. So if you have two arrays of\nsize X, the cost to merge them",
    "start": "2015790",
    "end": "2024960"
  },
  {
    "text": "is you have to read the two\narrays and you have to write the new array. And you add it all up, and\nthat's order X over B I/Os.",
    "start": "2024960",
    "end": "2034070"
  },
  {
    "text": "Maybe it's 4x over\nb or something. But big-O of X over B. So\nthe merge is efficient.",
    "start": "2034070",
    "end": "2040210"
  },
  {
    "text": "The cost per element for the\nmerge is 1 over B, because",
    "start": "2040210",
    "end": "2045770"
  },
  {
    "text": "order X elements were merged\nwhen we did that. And we get to spread the cost. Sure, we had to rewrite a\ntrillion items when we filled",
    "start": "2045770",
    "end": "2054649"
  },
  {
    "text": "up our disk, but actually, when\nyou divide that out over",
    "start": "2054650",
    "end": "2059940"
  },
  {
    "text": "the trillion items, it's not\nthat much cost per item. And so the cost for each item of\nthat big operation is only",
    "start": "2059940",
    "end": "2069658"
  },
  {
    "text": "1 over B disk I/Os. And each item only has to be\nrewritten log N times.",
    "start": "2069659",
    "end": "2076029"
  },
  {
    "text": "So the total average cost for an\ninsertion of one element is",
    "start": "2076030",
    "end": "2081129"
  },
  {
    "text": "log N over B, which is actually\nbetter than what I promised here.",
    "start": "2081130",
    "end": "2086899"
  },
  {
    "text": "But this data structure's\ngoing to be worse somewhere else. So this is a simplified\nversion. I'll get to within--",
    "start": "2086900",
    "end": "2093179"
  },
  {
    "text": "ignoring epsilons and things,\nit'll be good enough. So does that analysis\nmakes sense?",
    "start": "2093179",
    "end": "2099280"
  },
  {
    "text": "It's not hard analysis, so if\nit doesn't make sense, it's not because of you.",
    "start": "2099280",
    "end": "2104840"
  },
  {
    "text": "It's got to be because I didn't\nexplain it, because it's too easy to\nnot understand.",
    "start": "2104840",
    "end": "2110410"
  },
  {
    "start": "2110410",
    "end": "2115910"
  },
  {
    "text": "So if you're going to build\nsomething like this, you can't just say, oh, well, your\ndatabase is great except once",
    "start": "2115910",
    "end": "2123940"
  },
  {
    "start": "2117000",
    "end": "3111000"
  },
  {
    "text": "every couple days it hangs for\nan hour while we resort",
    "start": "2123940",
    "end": "2129099"
  },
  {
    "text": "everything. So the fix of this is that we're\ngoing to get rid of the worst case. And the idea is, well, let's\njust have a separate thread",
    "start": "2129100",
    "end": "2136310"
  },
  {
    "text": "that does the merging\nof the arrays. So we insert something into\na temporary array and just return immediately.",
    "start": "2136310",
    "end": "2142779"
  },
  {
    "text": "And as long as the merge thread\ngets to do at least log",
    "start": "2142780",
    "end": "2148640"
  },
  {
    "text": "N moves every time we insert\nsomething, it can keep up.",
    "start": "2148640",
    "end": "2153829"
  },
  {
    "text": "You could actually do a very\ncareful dance, where I insert something, and part of the\ninsertion is I have to move",
    "start": "2153830",
    "end": "2159400"
  },
  {
    "text": "something from this array and\nsomething from this array and something from this array, and\nI can keep everything up to date that way.",
    "start": "2159400",
    "end": "2165589"
  },
  {
    "text": "So it's not very hard to\nde-amortize this algorithm-- that is, to turn the algorithm\nfrom a good average-case",
    "start": "2165590",
    "end": "2174400"
  },
  {
    "text": "behavior to good worst-case\nbehavior. The worst-case behavior just\nbecomes that it has to do log",
    "start": "2174400",
    "end": "2181827"
  },
  {
    "text": "N work for an insertion,\nwhich isn't so bad. ",
    "start": "2181827",
    "end": "2188450"
  },
  {
    "text": "Does that make sense? Yeah. AUDIENCE: Does that work if\nthese are [INAUDIBLE] items",
    "start": "2188450",
    "end": "2194872"
  },
  {
    "text": "[INAUDIBLE]? What if somebody wants\n[INAUDIBLE]?",
    "start": "2194872",
    "end": "2200680"
  },
  {
    "text": "BRADLEY KUSZMAUL: Ah. Well, OK, so the question-- let me repeat it and see if-- so you're in the middle of doing\nthese merges and you",
    "start": "2200680",
    "end": "2209440"
  },
  {
    "text": "have a background thread doing\nthat, say, and somebody comes along and wants to do a query. AUDIENCE: Yeah. [INAUDIBLE]",
    "start": "2209440",
    "end": "2215230"
  },
  {
    "text": "BRADLEY KUSZMAUL: So the trick\nto there is that you put a bit on the array that says,\nthe new arrays is not ready to query. Keep using the old arrays,\nwhich are still there.",
    "start": "2215230",
    "end": "2223670"
  },
  {
    "text": "Just don't destroy the\nold ones until the new one's ready. So basically you have these\ntwo megabyte-sized things.",
    "start": "2223670",
    "end": "2232250"
  },
  {
    "text": "You're trying to make a two\nmegabyte-sized one. You leave the one-megabyte ones\nlying around for a while",
    "start": "2232250",
    "end": "2238520"
  },
  {
    "text": "while you're incrementally\nmoving things down. And then suddenly, when the big\nones done, you flip the",
    "start": "2238520",
    "end": "2244819"
  },
  {
    "text": "bits, so in order one\noperations, you can say, no, those two are no longer valid,\nand this one's valid.",
    "start": "2244820",
    "end": "2250960"
  },
  {
    "text": "So queries should use this\none instead of those. So that's basically the kind\nof trick you might do.",
    "start": "2250960",
    "end": "2258400"
  },
  {
    "text": "Or you would just search the\npartially constructed arrays, if you have locks. There's lots of ways to do it. ",
    "start": "2258400",
    "end": "2267440"
  },
  {
    "text": "So that's a pretty\ngood question. Yes. That's one that we had to\nthink about a little.",
    "start": "2267440",
    "end": "2273380"
  },
  {
    "text": "So it sounds glib, but it's\nlike, how do we do this? Any other questions?",
    "start": "2273380",
    "end": "2279849"
  },
  {
    "text": "OK. So now we've got to do something\nabout the search,",
    "start": "2279850",
    "end": "2286340"
  },
  {
    "text": "because the search\nis really bad. Well, it's not as bad as the\ninsertion worst-case thing.",
    "start": "2286340",
    "end": "2292380"
  },
  {
    "text": "I'm going to show you how to\nshave off a factor of log N, and I don't think I'm going to\nshow you how to shave off the",
    "start": "2292380",
    "end": "2297840"
  },
  {
    "text": "factor of 1 over log B. so we'll\njust get it down to log N instead of log squared N.\nBecause if I actually want to",
    "start": "2297840",
    "end": "2306150"
  },
  {
    "text": "get it down, then I\nhave to give up-- remember, the performance that\nI had was log of N over B. If",
    "start": "2306150",
    "end": "2311410"
  },
  {
    "text": "I actually want to get rid\nof things, I have to do something else. There's a lower-bound\nargument.",
    "start": "2311410",
    "end": "2317250"
  },
  {
    "text": "So the idea here is\nwe're searching-- I'm going to flip those.",
    "start": "2317250",
    "end": "2327985"
  },
  {
    "text": " We've got these arrays\nof various sizes. ",
    "start": "2327985",
    "end": "2336099"
  },
  {
    "text": "And I've just done a binary\nsearch on here and then here and then here, and I found out\nthe thing I'm looking for",
    "start": "2336100",
    "end": "2341750"
  },
  {
    "text": "wasn't here and it wasn't\nhere and it wasn't here. That's where it would have been,\nif it had been there.",
    "start": "2341750",
    "end": "2347800"
  },
  {
    "text": "It should have been there\nbut it wasn't. It should have been here\nbut it wasn't. And then I'm going to start\nsearching in this array.",
    "start": "2347800",
    "end": "2354910"
  },
  {
    "text": "And the intuition you might have\nis that, gee, it's kind of wasteful to start a whole new\nsearch on this array when",
    "start": "2354910",
    "end": "2361890"
  },
  {
    "text": "we already knew where it\nwasn't in this array.  Right?",
    "start": "2361890",
    "end": "2367630"
  },
  {
    "text": "So for example, if the data\nwere uniformly randomly distributed, and the thing was,\nsay, 1/3 of the array",
    "start": "2367630",
    "end": "2375270"
  },
  {
    "text": "here, I might gain some\nadvantage by searching at the 1/3 point over here to\nsee if it's there.",
    "start": "2375270",
    "end": "2382770"
  },
  {
    "text": "Now, that's kind of\nan intuition. I don't know how to\nmake that work. But I do know how to make\nsomething work.",
    "start": "2382770",
    "end": "2390290"
  },
  {
    "text": "But the intuition is, having\ndone some search here, I should in principal have\ninformation about where to",
    "start": "2390290",
    "end": "2396850"
  },
  {
    "text": "limit the search so that I don't\nhave to search the whole thing on the next array. ",
    "start": "2396850",
    "end": "2403770"
  },
  {
    "text": "OK? And here's basically what you\ndo, is every element, you get",
    "start": "2403770",
    "end": "2408920"
  },
  {
    "text": "a forward pointer to where that\nelement would go in the next array. So for example, you have\nsomething here and something",
    "start": "2408920",
    "end": "2415960"
  },
  {
    "text": "here, which are the two things\nthat are less than and greater than the thing you're\nlooking for.",
    "start": "2415960",
    "end": "2421620"
  },
  {
    "text": "And it says, oh, those\nshould have gone here in the next array.",
    "start": "2421620",
    "end": "2427849"
  },
  {
    "text": "So if you maintain that information, it's almost enough.",
    "start": "2427850",
    "end": "2434150"
  },
  {
    "text": "But let's gloss over\nthe almost part. If those two destinations of\nthose two pointers are close",
    "start": "2434150",
    "end": "2441910"
  },
  {
    "text": "together, then you've\nsaved a lot of search in the next array. ",
    "start": "2441910",
    "end": "2449840"
  },
  {
    "text": "Does anybody see\na bug in this? There is one. The almost part.",
    "start": "2449840",
    "end": "2455450"
  },
  {
    "text": "You don't have to see it,\nbecause I've been thinking about this a lot. ",
    "start": "2455450",
    "end": "2461740"
  },
  {
    "text": "The problem is, what if all of\nthese items are less than all of these items, for example?",
    "start": "2461740",
    "end": "2468718"
  },
  {
    "text": "In which case, these pointers\nall point down to the beginning, and we've\ngot nothing.",
    "start": "2468718",
    "end": "2476220"
  },
  {
    "text": "That's a case where\nthis fails. And that's allowed, right? In particular, if we were\ninserting things--",
    "start": "2476220",
    "end": "2483330"
  },
  {
    "text": "yeah. AUDIENCE: Then we know the\nelement is in the biggest array, because the element\nwas supposed to",
    "start": "2483330",
    "end": "2488925"
  },
  {
    "text": "go between the two. BRADLEY KUSZMAUL: Ah, but in\nthis array, we found out that it's above the last element,\nwhen we did our search, right?",
    "start": "2488926",
    "end": "2497700"
  },
  {
    "text": "That's one of the\npossible ways-- the worst-case behavior is we've\ngot something where this array is less than this array.",
    "start": "2497700",
    "end": "2503870"
  },
  {
    "text": "We're looking for that item. So we do a binary search and\nfind out, it's over here.",
    "start": "2503870",
    "end": "2509029"
  },
  {
    "text": "And it doesn't help to special\ncase this or something, because they could be all to the\nright or they could be all bunched up in funny ways.",
    "start": "2509030",
    "end": "2515190"
  },
  {
    "text": "There's lots of screwy ways\nthat this could go wrong. But the simple version, it's\neasy to come up with an",
    "start": "2515190",
    "end": "2521710"
  },
  {
    "text": "example, which is everything's\nto the left. Yeah. AUDIENCE: Can you still save\ntime by, when you do the",
    "start": "2521710",
    "end": "2530248"
  },
  {
    "text": "binary search on the smallest\narray-- but I guess you'd want [INAUDIBLE] search. It will help reduced cost\nwhich gives you the",
    "start": "2530248",
    "end": "2535869"
  },
  {
    "text": "next one and so on? BRADLEY KUSZMAUL: Yeah. So there is a way to fix it so\nthat the pointers in the",
    "start": "2535870",
    "end": "2542950"
  },
  {
    "text": "smaller array do help\nyou reduce the cost in the next array.",
    "start": "2542950",
    "end": "2548010"
  },
  {
    "text": "And that is to seed the smaller\narray with some values from the next array. Like, suppose I put in every\n20th item, and I stuck it in",
    "start": "2548010",
    "end": "2555760"
  },
  {
    "text": "that array with a bit on it\nthat says, oh, this is a repeat, it's going to\nbe repeated again.",
    "start": "2555760",
    "end": "2561100"
  },
  {
    "text": "So then I could guarantee that\nthere's these dummies that I throw in here, which are evenly\nspaced, plus whatever",
    "start": "2561100",
    "end": "2570509"
  },
  {
    "text": "else is in there. So put the other things in\nthere, and they have forward pointers too.",
    "start": "2570510",
    "end": "2575900"
  },
  {
    "text": "And now I'm guaranteed that\nthe distance between two",
    "start": "2575900",
    "end": "2582309"
  },
  {
    "text": "adjacent items is guaranteed\nto be a constant. Does that make sense?",
    "start": "2582310",
    "end": "2590430"
  },
  {
    "text": "The trick is to make it so that\nhaving found two adjacent",
    "start": "2590430",
    "end": "2596040"
  },
  {
    "text": "items that the thing\nyou want-- then on the next array, the\nimage of those two items is",
    "start": "2596040",
    "end": "2601570"
  },
  {
    "text": "separated by at most 20 items. And so that gets you down to\nonly log of N instead of log",
    "start": "2601570",
    "end": "2609890"
  },
  {
    "text": "squared of n, because you're\nsearching constant items in this array, and there's\nonly log N arrays.",
    "start": "2609890",
    "end": "2615535"
  },
  {
    "text": " Yeah. AUDIENCE: Doesn't that slow down\nthe merging of the rays?",
    "start": "2615535",
    "end": "2622601"
  },
  {
    "text": "BRADLEY KUSZMAUL: Not\nasymptotically. Because asymptotically,\nwhat this means--",
    "start": "2622601",
    "end": "2628390"
  },
  {
    "text": "if I'm going to build that\narray, so I'm going to merge two arrays to make this array,\nI have to do an additional scan of this other array as\nI'm constructing this one.",
    "start": "2628390",
    "end": "2635890"
  },
  {
    "text": "So the picture is I have two\narrays, and I'm trying to merge them into this array.",
    "start": "2635890",
    "end": "2642390"
  },
  {
    "text": "And I'm trying to also insert\nthese dummy forward pointers",
    "start": "2642390",
    "end": "2648230"
  },
  {
    "text": "from the next array, which\nis only twice as big. So the big 0's are, if it's X,\ninstead of it being 1, 2, 3,",
    "start": "2648230",
    "end": "2655751"
  },
  {
    "text": "4X, it's 8X. So it's only a constant. ",
    "start": "2655751",
    "end": "2663320"
  },
  {
    "text": "So basically, I can read\nall three of these. I can read an array and the next\none and the next array,",
    "start": "2663320",
    "end": "2669660"
  },
  {
    "text": "which is twice as big, and\nthe next array which is four times as big. It all adds up to 8 times the\nsize of the original array.",
    "start": "2669660",
    "end": "2676510"
  },
  {
    "text": "So at least the asymptotics\naren't messed up. Maybe the engineer in you goes,\nbleh, I have to read the data eight times.",
    "start": "2676510",
    "end": "2682200"
  },
  {
    "text": "But remember, the game here is\nnot to get 100% of the disk's",
    "start": "2682200",
    "end": "2688320"
  },
  {
    "text": "insertion capacity. That's not the game, going\nback to the marketing",
    "start": "2688320",
    "end": "2695200"
  },
  {
    "text": "perspective. The competition is only\ngetting 0.001%",
    "start": "2695200",
    "end": "2700470"
  },
  {
    "text": "of the disk's capacity.  That's what a B-tree gets\nin the worst case.",
    "start": "2700470",
    "end": "2707640"
  },
  {
    "text": "And so we don't have to get\n100% to be three orders of magnitude better, which\nis where we are.",
    "start": "2707640",
    "end": "2715680"
  },
  {
    "text": "So it turns out that for this\nkind of thing, we end up getting 1% of the disk's\ncapacity, and everybody's",
    "start": "2715680",
    "end": "2723369"
  },
  {
    "text": "jumping around saying that's\ngreat, because it's 1,000 times faster. ",
    "start": "2723370",
    "end": "2730630"
  },
  {
    "text": "And why do we only get 1%? Well, there's a factor of two\nhere and there's a log N over",
    "start": "2730630",
    "end": "2739100"
  },
  {
    "text": "there, and you divide all that,\nand it's a constant",
    "start": "2739100",
    "end": "2746050"
  },
  {
    "text": "challenge, because the engineers\nat Tokutek always are having ideas for how\nto make it faster.",
    "start": "2746050",
    "end": "2753310"
  },
  {
    "text": "And right now, making this data\nstructure faster is not the thing that's going to\nmake people buy it.",
    "start": "2753310",
    "end": "2759330"
  },
  {
    "text": "Because it's already 1,000\ntimes faster than the competition. What's going to make it faster\nis some other thing that adds",
    "start": "2759330",
    "end": "2766140"
  },
  {
    "text": "features that make it\nso it's easy to use. So I keep having to-- no, you really need to work on\nmaking it so that we can do",
    "start": "2766140",
    "end": "2773760"
  },
  {
    "text": "backups, or something. It turns out, if you're selling\na database, you need",
    "start": "2773760",
    "end": "2780820"
  },
  {
    "text": "to do more than just queries\nand insertions. You need to be able\nto do backups. You need to be able to\nrecover from a crash.",
    "start": "2780820",
    "end": "2786360"
  },
  {
    "text": "You need to be able to cope\nwith the problem of some",
    "start": "2786360",
    "end": "2793540"
  },
  {
    "text": "particularly heavy query that's\ngoing and starving all the other queries from getting\ntheir work done.",
    "start": "2793540",
    "end": "2799300"
  },
  {
    "text": "All those problems turn out to\nbe the problems that, if you do any of them badly, people\nwon't buy you.",
    "start": "2799300",
    "end": "2804460"
  },
  {
    "text": "And so I suspect that there's\nanother factor of 10 to be",
    "start": "2804460",
    "end": "2809710"
  },
  {
    "text": "gotten over this data structure,\nif you were to sit down and try to say, how could\nI make it be the fastest",
    "start": "2809710",
    "end": "2817089"
  },
  {
    "text": "possible thing. And someday, that work will have\nto be done, because the",
    "start": "2817090",
    "end": "2822110"
  },
  {
    "text": "competition will have\nit and we won't. ",
    "start": "2822110",
    "end": "2827369"
  },
  {
    "text": "So let's see. I mentioned some of\nthese just now. So some of the things you have\nto do in order to have an",
    "start": "2827370",
    "end": "2834010"
  },
  {
    "text": "industrial strength dictionary\nare you need to cope with variable-size rows.",
    "start": "2834010",
    "end": "2840240"
  },
  {
    "text": "Now we assumed for the analysis\nthat the rows were all unit size. In fact, database rows\nvary in size.",
    "start": "2840240",
    "end": "2845630"
  },
  {
    "text": "And some of them are huge. Some of them are megabytes. Or sometimes people do things\nlike they put satellite images",
    "start": "2845630",
    "end": "2851670"
  },
  {
    "text": "into databases. So they end up having\nvery large rows. You have to do deletions\nas well as insertions.",
    "start": "2851670",
    "end": "2858295"
  },
  {
    "text": " And it turns out we can do\ndeletions just as fast as insertions.",
    "start": "2858295",
    "end": "2865060"
  },
  {
    "text": "And the idea there is basically,\nif you want to do a delete, you just you insert\nthe thing with a bit on it",
    "start": "2865060",
    "end": "2873310"
  },
  {
    "text": "that says, hey, this is\nreally a deletion. And then, whatever you get a\nchance, when you're doing a merge, if you find something\nthat has the same value, you",
    "start": "2873310",
    "end": "2881490"
  },
  {
    "text": "just annihilate it. And the delete has to keep\ngoing down, because there",
    "start": "2881490",
    "end": "2887700"
  },
  {
    "text": "might be more copies\nof it further down that were shadowed. And eventually, when you finally\ndo the last merge,",
    "start": "2887700",
    "end": "2895480"
  },
  {
    "text": "that tombstone goes away. You have to do transactions\nand logging.",
    "start": "2895480",
    "end": "2901460"
  },
  {
    "text": "You have to do crash recovery. And it's a big pain to get\nthat right, and a lot of companies have foundered when\nthey tried to move from one",
    "start": "2901460",
    "end": "2909980"
  },
  {
    "text": "mode to the other. How many of you have experienced\nthe phenomena that your file system didn't come\nback properly after a crash?",
    "start": "2909980",
    "end": "2917030"
  },
  {
    "text": " You see the difference\nin age here.",
    "start": "2917030",
    "end": "2922049"
  },
  {
    "text": "They're all using file systems\nthat have transactional logging underneath them.",
    "start": "2922050",
    "end": "2928490"
  },
  {
    "text": "When's the last time\nit happened? AUDIENCE: Tuesday. BRADLEY KUSZMAUL: Tuesday. So the difference is you're\npaying attention and they're",
    "start": "2928490",
    "end": "2936994"
  },
  {
    "text": "not, right? AUDIENCE: [INAUDIBLE]\ndisk failure. BRADLEY KUSZMAUL:\nDisk failure.",
    "start": "2936994",
    "end": "2942660"
  },
  {
    "text": "That's a different problem. AUDIENCE: Cacheing is\nnot [? finalized. ?] BRADLEY KUSZMAUL: Yeah. You say everybody's running\nwith their disk",
    "start": "2942660",
    "end": "2949650"
  },
  {
    "text": "cache turned on. And on some file systems,\nthat's a bad idea. So we're still suffering that\nit's been difficult to switch",
    "start": "2949650",
    "end": "2958520"
  },
  {
    "text": "from the original Unix file\nsystem, which is 30 years old",
    "start": "2958520",
    "end": "2963840"
  },
  {
    "text": "and wasn't designed to\nrecover from crash. You have to run fsck, and\nit doesn't always work.",
    "start": "2963840",
    "end": "2970869"
  },
  {
    "text": "We still have file systems\nthat don't recover from crashes. So you can see why that\ncould be difficult.",
    "start": "2970870",
    "end": "2976305"
  },
  {
    "text": " It turns out that one common use\ncase is that the data is",
    "start": "2976305",
    "end": "2983450"
  },
  {
    "text": "coming in sequentially, and this\ndata structure just sucks compared to a B-tree in the case\nwhere you're inserting",
    "start": "2983450",
    "end": "2991060"
  },
  {
    "text": "things and the data actually\nis already sorted as it's inserted. Because this is moving things\nall around and moving things",
    "start": "2991060",
    "end": "2996220"
  },
  {
    "text": "all around. And it's like, why didn't you\njust notice that it's sorted and put it in?",
    "start": "2996220",
    "end": "3002000"
  },
  {
    "text": "You have to get rid of the log\nbase B to get it down to log base B of N instead of log base\n2 of N for search costs.",
    "start": "3002000",
    "end": "3010619"
  },
  {
    "text": "Because people in fact do a\nlot more searches than--",
    "start": "3010620",
    "end": "3016060"
  },
  {
    "text": "if you have to choose which\nto do better, you want to generally do searches better. And compression turns\nout to be important.",
    "start": "3016060",
    "end": "3022550"
  },
  {
    "text": "I had one customer who\nhad a database",
    "start": "3022550",
    "end": "3029250"
  },
  {
    "text": "which was 300 gigabytes. He has a whole bunch of servers,\nand on each server,",
    "start": "3029250",
    "end": "3034910"
  },
  {
    "text": "he had a 300 gigabyte\ndatabase. And with us, it was 70",
    "start": "3034910",
    "end": "3040210"
  },
  {
    "text": "gigabytes, because we compress. And we just do simple\ncompression of, basically,",
    "start": "3040210",
    "end": "3045380"
  },
  {
    "text": "large blocks. When we do I/Os, we do I/Os\nof like a megabyte. ",
    "start": "3045380",
    "end": "3051480"
  },
  {
    "text": "So when we take one of those\nmegabytes, we compress it. And it's a big advantage to\ncompress a megabyte at a time,",
    "start": "3051480",
    "end": "3057790"
  },
  {
    "text": "instead of what-- a lot of B-trees, they have\nmaybe 16 kilobytes. And gzip hardly gets a chance to\nget anywhere when you only",
    "start": "3057790",
    "end": "3065579"
  },
  {
    "text": "have 16 kilobytes. And it gets down to\n12 kilobytes. But if you have a megabyte to\nwork with and you compress it,",
    "start": "3065580",
    "end": "3073000"
  },
  {
    "text": "particularly if it's sorted-- so this is a megabyte of data\nthat's sorted, so compression works pretty well\non sorted data.",
    "start": "3073000",
    "end": "3079650"
  },
  {
    "text": "So you get factors of 5\nor 10 or something. And so we asked him to dump the\ndata without the indexes,",
    "start": "3079650",
    "end": "3086950"
  },
  {
    "text": "so just the primary table with\nno indexes, and then run that through gzip. And it was 50 gigabytes.",
    "start": "3086950",
    "end": "3093210"
  },
  {
    "text": "So the smallest he could store\nthe raw data was 50 gigabytes, and we were giving him a useful\ndatabase that was 70",
    "start": "3093210",
    "end": "3099140"
  },
  {
    "text": "gigabytes that had a\nbunch of indexes. So he was like, yeah. ",
    "start": "3099140",
    "end": "3105150"
  },
  {
    "text": "And you have to deal with\nmultithreading and lots of clients and stuff. So here's an example.",
    "start": "3105150",
    "end": "3110990"
  },
  {
    "text": "We worked with Mark Callahan,\nwho was at Google at the time-- he's now at Facebook-- on trying to come up with some\nbenchmarks, because none of",
    "start": "3110990",
    "end": "3117190"
  },
  {
    "start": "3111000",
    "end": "3146000"
  },
  {
    "text": "the benchmarks out in the\nworld do a good job of",
    "start": "3117190",
    "end": "3123650"
  },
  {
    "text": "measuring this insertion\nperformance problem. So iiBench is an insertion\nbenchmark.",
    "start": "3123650",
    "end": "3129860"
  },
  {
    "text": "And basically what it does is\nit sets up a database with three indexes, and the\nindexes are random.",
    "start": "3129860",
    "end": "3138210"
  },
  {
    "text": "So it's actually harder\nthan real workloads. This workload, you basically\nhave a row and then you create",
    "start": "3138210",
    "end": "3144040"
  },
  {
    "text": "a random key to point\ninto that from three different places. Real databases, it turns out,\nprobably have more of a",
    "start": "3144040",
    "end": "3151619"
  },
  {
    "start": "3146000",
    "end": "3516000"
  },
  {
    "text": "Zipfian distribution. Have you talked at all about\nZipfian distributions of data?",
    "start": "3151620",
    "end": "3156660"
  },
  {
    "text": "So this is sort of an\ninteresting thing. If you're dealing with\nreal-world caches, you should",
    "start": "3156660",
    "end": "3169810"
  },
  {
    "text": "know that data ain't uniformly\nrandomly distributed. That's a poor model.",
    "start": "3169810",
    "end": "3175970"
  },
  {
    "text": "So in particular, suppose I have\nmemory and disk, and this",
    "start": "3175970",
    "end": "3183150"
  },
  {
    "text": "is 10% of the disk. Very simple situation. Very common ratio.",
    "start": "3183150",
    "end": "3189660"
  },
  {
    "text": "You'll see, this\nis how Facebook sets up their databases. ",
    "start": "3189660",
    "end": "3195550"
  },
  {
    "text": "They'll have a 300-gigabyte\ndatabase and 30 gigs of RAM. If the queries that you wanted\nto do were random, it wouldn't",
    "start": "3195550",
    "end": "3205710"
  },
  {
    "text": "matter what data structure\nyou were using. Let's suppose that God tells\nyou where it is on disk, so",
    "start": "3205710",
    "end": "3211520"
  },
  {
    "text": "you don't have to find it. You just have to move the\ndisk head and move it. If they're random, then\nbasically, no matter what",
    "start": "3211520",
    "end": "3217309"
  },
  {
    "text": "you've done, 90% of the queries\nyou have to do are going to do a random disk I/O.\n10% are going to already be",
    "start": "3217310",
    "end": "3225360"
  },
  {
    "text": "there, because you got lucky. So that is not reflecting\nwhat's going on on any",
    "start": "3225360",
    "end": "3231980"
  },
  {
    "text": "workload that I know. What they'll see is more like\n99% of the queries hit here,",
    "start": "3231980",
    "end": "3237570"
  },
  {
    "text": "and 1% go out here, or maybe 95%\nhere and 5% go out there.",
    "start": "3237570",
    "end": "3243150"
  },
  {
    "text": "And it turns out that, that for\na lot of things, there is a model of what's going on\ncalled a Zipfian distribution.",
    "start": "3243150",
    "end": "3250710"
  },
  {
    "text": "This would a random uniform\ndistribution. It's like every item has equal\nprobability of being chosen",
    "start": "3250710",
    "end": "3255859"
  },
  {
    "text": "for a query. It turns out that for things\nlike what's the popularity of",
    "start": "3255860",
    "end": "3263810"
  },
  {
    "text": "web pages, or if you have a\nlibrary, what's the frequency",
    "start": "3263810",
    "end": "3270590"
  },
  {
    "text": "at which words appear\nin the library-- so words like \"the\" appear\nfrequently, and words like",
    "start": "3270590",
    "end": "3276880"
  },
  {
    "text": "\"polymorphic\" are\nless frequent. So Zipf came up with this model,\nand there's a simple",
    "start": "3276880",
    "end": "3284520"
  },
  {
    "text": "version of the model, which\nsays that the most popular word has probability\nproportional to 1.",
    "start": "3284520",
    "end": "3292039"
  },
  {
    "text": "It's not going to be 1. It's going to be proportional\nto 1. The second most popular word\nis going to have 1/2.",
    "start": "3292040",
    "end": "3298330"
  },
  {
    "text": "The third most popular\nword is 1/3. And the fourth most popular word\nis 1/4 the probability of",
    "start": "3298330",
    "end": "3306160"
  },
  {
    "text": "the first word, and so forth. So if you plot this\ndistribution, it kind of looks",
    "start": "3306160",
    "end": "3313260"
  },
  {
    "text": "like this, right? It's like 1 over x. And what would you tell me if\nI told you that I had an",
    "start": "3313260",
    "end": "3320930"
  },
  {
    "text": "infinite universe of objects\nthat had a probability distribution like this.",
    "start": "3320930",
    "end": "3329690"
  },
  {
    "text": "Does that seem plausible? Why? You're saying no.",
    "start": "3329690",
    "end": "3334796"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE PHRASE] ",
    "start": "3334796",
    "end": "3340507"
  },
  {
    "text": "try adding them all together. BRADLEY KUSZMAUL: If\nyou add them all together, it doesn't converge.",
    "start": "3340508",
    "end": "3345520"
  },
  {
    "text": "So it's a heavy-tailed\ndistribution. So it turns out that if you sum\nup these up to 1, the sum",
    "start": "3345520",
    "end": "3355430"
  },
  {
    "text": "from 1 to n of 1 over i, it's\nthe nth harmonic number.",
    "start": "3355430",
    "end": "3365540"
  },
  {
    "text": "And that grows over time. It's basically like the integral\nunder this curve, from 1 to n.",
    "start": "3365540",
    "end": "3374410"
  },
  {
    "text": "It's close to that. And what is the integral\nof that? ",
    "start": "3374410",
    "end": "3380900"
  },
  {
    "text": "It's like something you learned\nseven years ago, and now you've forgotten, right? You learned it when you\nwere sophomores in",
    "start": "3380900",
    "end": "3386589"
  },
  {
    "text": "high school, or something. So it's approximately\nlog of n.",
    "start": "3386590",
    "end": "3393770"
  },
  {
    "text": "It's actually like log of n\nplus 0.57, is a very good",
    "start": "3393770",
    "end": "3399410"
  },
  {
    "text": "approximation for the\nnth harmonic number. When you're doing this kind of\nanalysis, boy, it depresses people, because you say, oh,\nthat's H of n, and if you have",
    "start": "3399410",
    "end": "3407000"
  },
  {
    "text": "a million items in your\ndatabase, then the sum of all those things is H of\n1 million, and",
    "start": "3407000",
    "end": "3412270"
  },
  {
    "text": "what's H of 1 million? Well, the log base 2 of 1\nmillion, I know that, because I'm a computer scientist.",
    "start": "3412270",
    "end": "3418520"
  },
  {
    "text": "So it's going to be like 20,\nand because we're doing log base e in that formula, maybe\nit's 15 or something.",
    "start": "3418520",
    "end": "3425370"
  },
  {
    "text": "So if you have 1 million items,\nthen the most popular item is going to-- you have\nto divide by H of n here.",
    "start": "3425370",
    "end": "3433619"
  },
  {
    "text": "So the most popular\nitem is going to appear 1/15 of the time. And the next most popular item\nis going to appear--",
    "start": "3433620",
    "end": "3439300"
  },
  {
    "text": " emergency backup chalk. ",
    "start": "3439300",
    "end": "3446800"
  },
  {
    "text": "Somebody's been burning both\nends of this chalk. 1/30 of the time, and 1/45 of\nthe time, and those add up.",
    "start": "3446800",
    "end": "3454810"
  },
  {
    "text": "When you go up to 1\nover 1 million-- ",
    "start": "3454810",
    "end": "3461609"
  },
  {
    "text": "another zero in there-- times 15, that finite series\nwill add up to 1,",
    "start": "3461610",
    "end": "3469060"
  },
  {
    "text": "approximately. Except to the extent that\nI've approximated. So this is what's going on.",
    "start": "3469060",
    "end": "3475079"
  },
  {
    "text": "So the most popular\nFacebook page--",
    "start": "3475080",
    "end": "3481270"
  },
  {
    "text": "they might have 1 billion\npages, so how does that change things? Well, that means the most\npopular one has a probability",
    "start": "3481270",
    "end": "3488120"
  },
  {
    "text": "1 in 20, and the second\nmost is 1 in 40. And this explains why\ncache works for",
    "start": "3488120",
    "end": "3494540"
  },
  {
    "text": "this kind of workload. Nobody really knows why Facebook\npages and words in",
    "start": "3494540",
    "end": "3500370"
  },
  {
    "text": "libraries and everything else\nhave this distribution, which is named after a\nguy named Zipf.",
    "start": "3500370",
    "end": "3508870"
  },
  {
    "text": " But they do. Everything has this property. And so you can sort of predict\nwhat's happening.",
    "start": "3508870",
    "end": "3516000"
  },
  {
    "start": "3516000",
    "end": "3599000"
  },
  {
    "text": "So iiBench should\nhave a Zipfian distribution and it doesn't. So this is painting\na worse picture.",
    "start": "3516000",
    "end": "3521590"
  },
  {
    "text": "Or a better picture. It's making us look better than\nwe really are, because the real world is going to have\nmore hits on the stuff",
    "start": "3521590",
    "end": "3529840"
  },
  {
    "text": "that's in memory for a B-tree\nthan this model, where basically you're completely\nhosed all the time because",
    "start": "3529840",
    "end": "3536240"
  },
  {
    "text": "it's random. So this is an example in the\ncategory of how to lie with statistics.",
    "start": "3536240",
    "end": "3542089"
  },
  {
    "text": "And it's a pretty sophisticated\nlie. If you're going to lie,\nbe sophisticated.",
    "start": "3542090",
    "end": "3547255"
  },
  {
    "text": " So these measurements were\ntaken in the top graph.",
    "start": "3547255",
    "end": "3554050"
  },
  {
    "text": "Up is good. It's how many rows per second\nwe could insert. And this axis is how many rows\nhave been inserted so far.",
    "start": "3554050",
    "end": "3562800"
  },
  {
    "text": "And the green one is a B-tree. According to Mark Callahan,\nwho's essentially a",
    "start": "3562800",
    "end": "3569750"
  },
  {
    "text": "disinterested observer, it's the\nbest implementation of a B-tree ever.",
    "start": "3569750",
    "end": "3576130"
  },
  {
    "text": "And you can sort of see what\nhappens, is that as you insert stuff, the system falls out\nof main memory, and the",
    "start": "3576130",
    "end": "3581450"
  },
  {
    "text": "performance was really good\nat the beginning-- 40,000 per second-- and then\nboom, you're down to 200 down here at the end, by\nthe time you've",
    "start": "3581450",
    "end": "3587410"
  },
  {
    "text": "inserted a billion rows. Whereas, for the fractal\ntree, you can",
    "start": "3587410",
    "end": "3593005"
  },
  {
    "text": "sort of see this noise. That's because some insertions\nare a little cheaper than other insertions.",
    "start": "3593005",
    "end": "3599690"
  },
  {
    "text": "Every other insertion's\ncompletely free, right? You had a free spot. You just put it in. ",
    "start": "3599690",
    "end": "3607609"
  },
  {
    "text": "One out of four insertions, the\nones that weren't free, half of them only had to do a\nlittle operation in memory.",
    "start": "3607610",
    "end": "3613260"
  },
  {
    "text": "So you see this high frequency\nnoise, because some things are cheaper than others.",
    "start": "3613260",
    "end": "3618540"
  },
  {
    "text": "And that's like a factor\nof 30 or something. ",
    "start": "3618540",
    "end": "3624640"
  },
  {
    "text": "It turns out it even works\non SSD, solid state disk. You might think-- all this time I've been talking\nabout disk drives.",
    "start": "3624640",
    "end": "3631500"
  },
  {
    "text": "Solid state disk has a\ncomplicated cache hierarchy inside it, and we were\nsurprised to see that",
    "start": "3631500",
    "end": "3637250"
  },
  {
    "text": "basically we're faster on this\nworkload on a rotating disk",
    "start": "3637250",
    "end": "3643840"
  },
  {
    "text": "than a B-tree is on an SSD,\nwhich is orders of magnitude",
    "start": "3643840",
    "end": "3649220"
  },
  {
    "text": "faster in principle, but turns\nout that for various reasons it's not. ",
    "start": "3649220",
    "end": "3659440"
  },
  {
    "text": "One question I get often is, the\nworld is moving away from rotating disk to solid\nstate disk.",
    "start": "3659440",
    "end": "3665660"
  },
  {
    "text": "A lot of applications-- how many of you have solid state\ndisks in your laptops? That's a really good application\nfor a solid state",
    "start": "3665660",
    "end": "3672430"
  },
  {
    "text": "disk, because it's\nnot sensitive to being knocked around. So it's worth it to have a solid\nstate disk even if it",
    "start": "3672430",
    "end": "3680550"
  },
  {
    "text": "were more expensive,\nwhich it is. It turns out it's not\nthat much more expensive for a laptop. It's a couple of hundred dollars\nmore or something.",
    "start": "3680550",
    "end": "3687990"
  },
  {
    "text": "But the advantage of it is\nthat if you go up in an airplane and you're sitting\nand trying to type in the middle of a thunderstorm,\nflying across--",
    "start": "3687990",
    "end": "3695140"
  },
  {
    "text": "it doesn't care. Disk drives, if you do that--",
    "start": "3695140",
    "end": "3700414"
  },
  {
    "text": "disk drives do not like flying\nat high altitude, because they work by having a cushion of air\nthat the head is flying",
    "start": "3700415",
    "end": "3707380"
  },
  {
    "text": "on, and in airplanes, which\npressurize the cabin to the",
    "start": "3707380",
    "end": "3712670"
  },
  {
    "text": "same altitude as 8,000 feet,\nthat's half an atmosphere. So there's only half as much\nair keeping it off.",
    "start": "3712670",
    "end": "3719339"
  },
  {
    "text": "So if you travel a lot, that's\nwhen your disk drive will fail, is when you're flying.",
    "start": "3719340",
    "end": "3726100"
  },
  {
    "text": "OK. So it looks like, however that\nrotating disk is getting",
    "start": "3726100",
    "end": "3732940"
  },
  {
    "text": "cheaper faster then solid\nstate disk is. So rotating disk is an order of\nmagnitude cheaper per byte",
    "start": "3732940",
    "end": "3741200"
  },
  {
    "text": "than solid state disk today. Maybe two orders of\nmagnitude cheaper. It's hard to measure fairly.",
    "start": "3741200",
    "end": "3747480"
  },
  {
    "text": "But rotating disk, according\nto Seagate-- they're saying, by the end of\nthe decade, we'll have 70",
    "start": "3747480",
    "end": "3753650"
  },
  {
    "text": "terabyte drives that are\nthe same form factor.",
    "start": "3753650",
    "end": "3758869"
  },
  {
    "text": "And so you figure out what the\nMoore's Law is for that, and it's better than for\nlithography.",
    "start": "3758870",
    "end": "3765330"
  },
  {
    "text": "Lithography is not going\nto be that much more dense in that timeframe.",
    "start": "3765330",
    "end": "3770579"
  },
  {
    "text": "So at least for the next 5 or\n10 years, it looks like disk drives are going to maintain\ntheir cost advantage over",
    "start": "3770580",
    "end": "3779460"
  },
  {
    "text": "solid state storage,\nand maybe even spread that cost advantage. So for any particular\napplication, for storing your",
    "start": "3779460",
    "end": "3785920"
  },
  {
    "text": "music, SSD will be cheap enough,\nbut for those people that have really big data\nsets, like these new",
    "start": "3785920",
    "end": "3791819"
  },
  {
    "text": "telescopes they're\nputting up-- these new telescopes\nare crazy. These people are putting\nup these telescopes.",
    "start": "3791820",
    "end": "3797480"
  },
  {
    "text": "They're putting up 1,500\ntelescopes across the Australian Outback. And each of those telescopes in\nthe first 15 minutes live",
    "start": "3797480",
    "end": "3804370"
  },
  {
    "text": "is going to produce more data\nthan has come down from the Hubble, total.",
    "start": "3804370",
    "end": "3809910"
  },
  {
    "text": "And there's just no\nway for them to-- I don't know what they're\ngoing to do. But it's a huge amount of data,\nand they're going to",
    "start": "3809910",
    "end": "3817140"
  },
  {
    "text": "have to use disks to store\nwhatever it is that they want to keep. And they don't like throwing\naway data, because it's so expensive to make.",
    "start": "3817140",
    "end": "3823790"
  },
  {
    "text": "So if I were a disk maker, I'd\nmake sure that my salesmen had an office somewhere out there. ",
    "start": "3823790",
    "end": "3831930"
  },
  {
    "text": "So the conclusion is you're not\ngoing to be able to, at least for those applications,\njust have an index in main memory.",
    "start": "3831930",
    "end": "3837250"
  },
  {
    "text": "You're going to have to have\na data structure that works well on disk. ",
    "start": "3837250",
    "end": "3843520"
  },
  {
    "text": "The speed trends-- well, seek time is not\ngoing to change.",
    "start": "3843520",
    "end": "3848530"
  },
  {
    "text": "It hasn't changed. It's not going to change. The bandwidth of a disk drive\ngrows with the square root of",
    "start": "3848530",
    "end": "3855000"
  },
  {
    "text": "its capacity. So if you quadruple the storage\non the disk because you've made the bits twice as\ndense in each dimension, then",
    "start": "3855000",
    "end": "3864500"
  },
  {
    "text": "one spin of the disk sees twice\nas many disks, not four times as many disks. So that projects out to\nsomething like disks that are",
    "start": "3864500",
    "end": "3872110"
  },
  {
    "text": "500 megabytes per second. So how long is it going to take\nto back up a 67 terabyte",
    "start": "3872110",
    "end": "3877650"
  },
  {
    "text": "disk drive? ",
    "start": "3877650",
    "end": "3882859"
  },
  {
    "text": "So there remain systems\nproblems. And I was explaining to my son\nthat there's all these",
    "start": "3882860",
    "end": "3891720"
  },
  {
    "text": "problems in systems. Data structures aren't suited,\nand all these systems suck.",
    "start": "3891720",
    "end": "3899320"
  },
  {
    "text": "He said, well, isn't\nthat horrible if you're computer scientist? I said, no, because\nwe make our living",
    "start": "3899320",
    "end": "3909650"
  },
  {
    "text": "off of these problems.  So here are some problems.",
    "start": "3909650",
    "end": "3915270"
  },
  {
    "text": "There's plenty of living\nto be made yet. ",
    "start": "3915270",
    "end": "3923760"
  },
  {
    "text": "Power consumption is also a big\nissue for these things. If you fill up a room a Google\ndata center, a room which is",
    "start": "3923760",
    "end": "3932299"
  },
  {
    "text": "probably bigger than this\nroom, full of machines. The Facebook data center is\nprobably a room about this",
    "start": "3932300",
    "end": "3939930"
  },
  {
    "text": "size, full of machines. And power and cooling is\nsomething like half the cost",
    "start": "3939930",
    "end": "3946420"
  },
  {
    "text": "of the machines. The machines for something like\nFacebook, the hardware",
    "start": "3946420",
    "end": "3952940"
  },
  {
    "text": "might cost them $10 million or\n$20 million a year, and the heating and cooling is another\n$10 million or $20 million a year, which is why they go off\nand they build these data",
    "start": "3952940",
    "end": "3960080"
  },
  {
    "text": "centers in places like North\nCarolina, where I guess they're willing to give them\npower for free or something.",
    "start": "3960080",
    "end": "3968349"
  },
  {
    "text": "So making good use of disk\nbandwidth offers huge power savings, because basically you\ncan use disks which are",
    "start": "3968350",
    "end": "3975530"
  },
  {
    "text": "cheaper than solid\nstate for power. And you want to use that well.",
    "start": "3975530",
    "end": "3984000"
  },
  {
    "text": "CPU trends. Well, you've probably talked\nabout this, right? CPUs are going to get\na lot more cores.",
    "start": "3984000",
    "end": "3990599"
  },
  {
    "text": "I actually have a 48-core\nmachine that cost $10,000 that I bought about a month ago.",
    "start": "3990600",
    "end": "3997339"
  },
  {
    "text": "And our customers mostly\nuse machines that are like $5,000 machines.",
    "start": "3997340",
    "end": "4004000"
  },
  {
    "text": "So when I provisioned this\nmachine, I said, well, I should spend and buy a machine\nthat's twice as good as what",
    "start": "4004000",
    "end": "4009370"
  },
  {
    "text": "they're buying, because I'm\ndeveloping software that they're going to\nuse next year.",
    "start": "4009370",
    "end": "4015010"
  },
  {
    "text": "So I bought a $10,000 machine,\nwhich is 48 cores. And we're having all\nsorts of making a",
    "start": "4015010",
    "end": "4023160"
  },
  {
    "text": "living with that machine. The memory bandwidth and the I/O\nbus bandwidth will grow.",
    "start": "4023160",
    "end": "4029790"
  },
  {
    "text": "And so I think it's going to get\nmore and more exciting to try to use all these cores.",
    "start": "4029790",
    "end": "4035970"
  },
  {
    "text": "Fractal trees have a lot of\nopportunity to use those cores",
    "start": "4035970",
    "end": "4041180"
  },
  {
    "text": "to improve and reduce the\nnumber of disk I/Os. So the conclusion is, basically,\nthese data",
    "start": "4041180",
    "end": "4050140"
  },
  {
    "text": "structures dominate B-trees\nasymptotically.",
    "start": "4050140",
    "end": "4055849"
  },
  {
    "text": "And then B-trees have 40 years\nof engineering advantage, but",
    "start": "4055850",
    "end": "4060870"
  },
  {
    "text": "that will evaporate\neventually.  These data structures ride\nbetter technology curves than",
    "start": "4060870",
    "end": "4068170"
  },
  {
    "text": "B-trees do, and so I find it\nhard to believe that in 10 years that anybody would\ndesign a system using a",
    "start": "4068170",
    "end": "4076180"
  },
  {
    "text": "B-tree, because how do you\novercome those advantages. So basically all storage systems\nare going to use data",
    "start": "4076180",
    "end": "4083660"
  },
  {
    "text": "structures that are like this,\nor something else. There's a whole bunch of other\nkinds of indexes that we",
    "start": "4083660",
    "end": "4089000"
  },
  {
    "text": "haven't attacked, things like\nindexing multi-dimensional data or indexing data where you\nhave very large keys, very",
    "start": "4089000",
    "end": "4099609"
  },
  {
    "text": "large rows. Imagine that you're trying to\nindex DNA sequences, which are",
    "start": "4099609",
    "end": "4105729"
  },
  {
    "text": "much bigger than a disk block. So there's a whole bunch of\ninteresting opportunities.",
    "start": "4105729",
    "end": "4113160"
  },
  {
    "text": "And that's what I'm\nworking on. So any questions or comments?",
    "start": "4113160",
    "end": "4121659"
  },
  {
    "text": "Arguments? Fistfights? ",
    "start": "4121660",
    "end": "4133540"
  },
  {
    "text": "OK. AUDIENCE: Where's the mic? BRADLEY KUSZMAUL: Where\nis the mic? AUDIENCE: That's OK. I can [INAUDIBLE].",
    "start": "4133540",
    "end": "4139527"
  },
  {
    "text": "BRADLEY KUSZMAUL:\nIt's on my coat. ",
    "start": "4139528",
    "end": "4145122"
  },
  {
    "text": "PROFESSOR: So actually, this is\na very interesting point, because if you think where the\nworld is leading, I think that",
    "start": "4145122",
    "end": "4151028"
  },
  {
    "text": "big data is something that's\nvery, very interesting, because all these people are\ngathering huge amounts of",
    "start": "4151029",
    "end": "4156818"
  },
  {
    "text": "data, and they're storing\nhuge amounts of data. And what do with data, accessing\nthem, is going to be",
    "start": "4156819",
    "end": "4162299"
  },
  {
    "text": "one big problem. I mean, if you look at what\npeople like Google are doing, they're just collecting\nall those.",
    "start": "4162300",
    "end": "4167710"
  },
  {
    "text": "Nobody's throwing\nanything out. And I believe if you to kind of\nlook at them, analyze them,",
    "start": "4167710",
    "end": "4174799"
  },
  {
    "text": "do cool things with the\ndata, it's going to be very, very important. So I think that would\nbe very interesting,",
    "start": "4174800",
    "end": "4180729"
  },
  {
    "text": "high-performance end. It's not just doing\nnumber crunching.",
    "start": "4180729",
    "end": "4186220"
  },
  {
    "text": "Until now, when people look at high-performance, it's about CPU. It's about how many FLOPS\nper second can you do?",
    "start": "4186220",
    "end": "4192290"
  },
  {
    "text": "TeraFLOPS, petaFLOP machines\nand stuff like that. But I think one thing\nthat's really interesting is it's not petaFLOPS.",
    "start": "4192290",
    "end": "4198250"
  },
  {
    "text": "How many terabytes of\ndata can you process through to find something. BRADLEY KUSZMAUL: So I was at\na talk by Facebook, and they",
    "start": "4198250",
    "end": "4209120"
  },
  {
    "text": "serve 37 gigabytes per data\nper second out of their",
    "start": "4209120",
    "end": "4214410"
  },
  {
    "text": "database tier. And that's a lot of serving.",
    "start": "4214410",
    "end": "4225130"
  },
  {
    "text": "Out of one little piece of\nwhatever they're doing.  Those guys have three\nor five petabytes.",
    "start": "4225130",
    "end": "4233860"
  },
  {
    "text": "And in the petabyte club,\nthey're small potatoes. There's people who have hundreds\nof petabytes, people",
    "start": "4233860",
    "end": "4242040"
  },
  {
    "text": "with three-letter acronyms.  PROFESSOR: I mean, some of those\nthree-letter acronym",
    "start": "4242040",
    "end": "4248795"
  },
  {
    "text": "places, the amount of data they\nare getting and they are processing is just gigantic.",
    "start": "4248795",
    "end": "4255000"
  },
  {
    "text": "And I think to a point that even\nsome of the interesting",
    "start": "4255000",
    "end": "4260170"
  },
  {
    "text": "things about-- if they keep growing their data\ncenters at the rate they",
    "start": "4260170",
    "end": "4266040"
  },
  {
    "text": "keep growing in the next couple\nof decades, they will need the entire power of the\nUnited States to power their",
    "start": "4266040",
    "end": "4271290"
  },
  {
    "text": "data centers, because they\nare at that kind of thing at this point. ",
    "start": "4271290",
    "end": "4276940"
  },
  {
    "text": "Even in these big national labs,\nthe reason they can't",
    "start": "4276940",
    "end": "4282150"
  },
  {
    "text": "expand is not that they don't\nhave money to buy the machines, but they don't have\nmoney to pay for the electricity, and also they don't\nhave electricity-- that",
    "start": "4282150",
    "end": "4288750"
  },
  {
    "text": "much electricity-- [UNINTELLIGIBLE] them to basically feed it. BRADLEY KUSZMAUL: I've run into\npeople for whom the power",
    "start": "4288750",
    "end": "4295739"
  },
  {
    "text": "issue was a big deal. I look at it and say, eh, you\nbought a $5,000 machine.",
    "start": "4295740",
    "end": "4300780"
  },
  {
    "text": "You spend $5,000 in power over\nthe lifetime of the machine. It doesn't seem like it's\nthat big a deal.",
    "start": "4300780",
    "end": "4307390"
  },
  {
    "text": "But they've filled up their data\ncenter, and the cost of adding one more machine has a\nhuge incremental cost, because",
    "start": "4307390",
    "end": "4314310"
  },
  {
    "text": "they can't fit one more in. So that means they have to\nbuild another building.",
    "start": "4314310",
    "end": "4319330"
  },
  {
    "text": "And so almost everybody's facing\nthat problem who's in",
    "start": "4319330",
    "end": "4326260"
  },
  {
    "text": "this business. And then they try to build a\nbuilding somewhere where there's natural cooled--",
    "start": "4326260",
    "end": "4332350"
  },
  {
    "text": "Google's written these papers\nabout, oh, it turns out if you don't air condition your\ncomputers, most of them work anyway.",
    "start": "4332350",
    "end": "4337860"
  },
  {
    "start": "4337860",
    "end": "4344179"
  },
  {
    "text": "So, well, air conditioning is a\nquarter of the cost over the lifetime of the computer. So if you can make more than 3/4\nof them give you service,",
    "start": "4344180",
    "end": "4353489"
  },
  {
    "text": "you come out ahead. GUEST SPEAKER: On that note,\nMIT is part of a consortium",
    "start": "4353490",
    "end": "4360660"
  },
  {
    "text": "that includes Harvard,\nNortheastern, Boston University, and University of\nMassachusetts Amherst, to",
    "start": "4360660",
    "end": "4370130"
  },
  {
    "text": "relocate all of our\nhigh-performance computing into a new green data center\nin Holyoke, Massachusetts.",
    "start": "4370130",
    "end": "4380280"
  },
  {
    "text": "So the idea is that rather than\nus locating things here on campus, where the energy\ncosts are high and we get a",
    "start": "4380280",
    "end": "4388130"
  },
  {
    "text": "lot of our energy from fuels\nthat have a big carbon",
    "start": "4388130",
    "end": "4396060"
  },
  {
    "text": "footprint, locating\nit in Holyoke-- they have a lot of hydro power\nand nuclear power there.",
    "start": "4396060",
    "end": "4407080"
  },
  {
    "text": "And they're able to build a\nbuilding that is extremely energy-efficient.",
    "start": "4407080",
    "end": "4413140"
  },
  {
    "text": "And it turns out that a bunch\nof years ago when they were digging up the Route 90, the\nMass Pike, they laid a lot of",
    "start": "4413140",
    "end": "4422780"
  },
  {
    "text": "dark fiber down the length. And so what they're going to\ndo is light up that fiber,",
    "start": "4422780",
    "end": "4428080"
  },
  {
    "text": "which comes right back here\nto the Boston area. And so for most people who\nare using these very",
    "start": "4428080",
    "end": "4433940"
  },
  {
    "text": "high-performance things, it\ndoesn't really matter where it's located anymore, at\nthe level of that.",
    "start": "4433940",
    "end": "4439590"
  },
  {
    "text": "So instead of just locating some\npiece of equipment here, we just will locate it out\nthere, and the price will drop",
    "start": "4439590",
    "end": "4448490"
  },
  {
    "text": "dramatically. And it'll be a much greener\nway for us to be doing our high-end computing.",
    "start": "4448490",
    "end": "4455450"
  },
  {
    "text": "Yeah, question? AUDIENCE: Isn't someone talking\nabout water-cooled offshore floating\ndata centers? GUEST SPEAKER: Sure.",
    "start": "4455450",
    "end": "4461050"
  },
  {
    "text": "Sure. So the question is, are people\ntalking about water-coooled offshore floating data centers.",
    "start": "4461050",
    "end": "4467630"
  },
  {
    "text": "Yeah. I mean, locating things in some\narea where you can cool",
    "start": "4467630",
    "end": "4474500"
  },
  {
    "text": "things easily makes\na lot of sense. Usually, they tend to want those\nnear rivers rather than",
    "start": "4474500",
    "end": "4481489"
  },
  {
    "text": "in the middle of the ocean,\njust because you get the hydropower. But even in the ocean, you can\nuse currents to do very much",
    "start": "4481490",
    "end": "4489210"
  },
  {
    "text": "the same kind of thing. So for some of these things,\npeople are looking very seriously at a whole bunch of\ndifferent strategies for",
    "start": "4489210",
    "end": "4500830"
  },
  {
    "text": "containing large-scale\nequipment. PROFESSOR: So one that's very\ncounterintuitive is people are",
    "start": "4500830",
    "end": "4508060"
  },
  {
    "text": "trying to build data centers in\nthe middle of deserts, when it's very hot.",
    "start": "4508060",
    "end": "4513130"
  },
  {
    "text": "I mean, why do you think people\nwant to build a data center in the middle\nof the desert? AUDIENCE: Solar power?",
    "start": "4513130",
    "end": "4519309"
  },
  {
    "text": "PROFESSOR: Solar power\nis one thing. No, it's not solar power. AUDIENCE: It gets really\ncold at night. PROFESSOR: No, it's not\nreally cold at night.",
    "start": "4519310",
    "end": "4525760"
  },
  {
    "text": "That's not it. GUEST SPEAKER: Cheap property. PROFESSOR: No, the biggest thing\nabout cooling is either",
    "start": "4525760",
    "end": "4533120"
  },
  {
    "text": "you can do air conditioning,\nwhere you're using power to pull heat out, or you can\nuse just water to cool.",
    "start": "4533120",
    "end": "4539920"
  },
  {
    "text": "And what happens is most of\nother places is the humidity is too high. And when you go to the desert,\nhumidity is low enough that",
    "start": "4539920",
    "end": "4547469"
  },
  {
    "text": "you can just pump water through\nthe thing and get the water evaporation going\nby, and then use that to cool the system.",
    "start": "4547470",
    "end": "4553750"
  },
  {
    "text": "So sometimes they're looking\nat data centers in places where it could be 120 degrees,\nbut very low humidity.",
    "start": "4553750",
    "end": "4560480"
  },
  {
    "text": "And they think that is\na lot more efficient to cool than that. So there are a lot of these\ninteresting nonintuitive",
    "start": "4560480",
    "end": "4566570"
  },
  {
    "text": "things people are looking at. So what [UNINTELLIGIBLE] they\nsay is that humidity's the killer, not the temperature.",
    "start": "4566570",
    "end": "4571988"
  },
  {
    "text": "AUDIENCE: What if you're\nlocated on the South-- if you're located on the South\nPole, then that's both cold",
    "start": "4571988",
    "end": "4579910"
  },
  {
    "text": "and really low humidity. GUEST SPEAKER: Yeah.",
    "start": "4579910",
    "end": "4585540"
  },
  {
    "text": "I mean it'll be interesting to\nsee how these things develop. It's a very so-called hot topic\nthese days, is energy",
    "start": "4585540",
    "end": "4595300"
  },
  {
    "text": "for computing. And the energy for computing\nof course matters also not only at the large scale but\nalso at the small scale,",
    "start": "4595300",
    "end": "4602000"
  },
  {
    "text": "because you want your\nfavorite handheld to",
    "start": "4602000",
    "end": "4609410"
  },
  {
    "text": "use very little battery. So your batteries last longer. So the issue of energy, using\nthat as a measure--",
    "start": "4609410",
    "end": "4616620"
  },
  {
    "text": "we've mostly been looking at\nhow fast we can make things run in this class, but many of\nthe lessons you can use to",
    "start": "4616620",
    "end": "4623260"
  },
  {
    "text": "say, well, how can I\nmake this run as energy-efficient as possible?",
    "start": "4623260",
    "end": "4629179"
  },
  {
    "text": "And what you'll learn is that\nmany of the lessons we've had in the class during the term\nwe focused, as I say, on",
    "start": "4629180",
    "end": "4637310"
  },
  {
    "text": "performance. But there are many resources\nin any given situation that you might want to optimize.",
    "start": "4637310",
    "end": "4642389"
  },
  {
    "text": "And so understanding something\nabout how do I minimize energy, how do I minimize disk\nI/Os, how do I minimize clock",
    "start": "4642390",
    "end": "4649200"
  },
  {
    "text": "cycles, how do I minimize\noff-chip accesses-- which tend to be much\nmore energy",
    "start": "4649200",
    "end": "4654429"
  },
  {
    "text": "intensive than on-chip-- all those different kinds of\nmeasures end up being part of",
    "start": "4654430",
    "end": "4660739"
  },
  {
    "text": "the mix of what you have to do\nwhen you're really engineering these systems. ",
    "start": "4660740",
    "end": "4666142"
  },
  {
    "text": "PROFESSOR: So I think another\ninteresting thing is, because we are in this time where some\nstuff grows at exponential",
    "start": "4666142",
    "end": "4674170"
  },
  {
    "text": "rates and stuff like that, some\nof those ratios that made sense at some point just\nsuddenly start making really",
    "start": "4674170",
    "end": "4682330"
  },
  {
    "text": "bad things. Like, for example, in this, at\nsome point the seek times were normal enough that\nyou didn't care.",
    "start": "4682330",
    "end": "4688870"
  },
  {
    "text": "And at some point, because the\nrest of the things took off so fast, suddenly it becomes\nthis really, really big",
    "start": "4688870",
    "end": "4696610"
  },
  {
    "text": "bottlenecks. BRADLEY KUSZMAUL: B-trees\nwere a really good data structure in 1972.",
    "start": "4696610",
    "end": "4702750"
  },
  {
    "text": "Because, well, the seek\ntime and the transfer time and the CPU--",
    "start": "4702750",
    "end": "4708659"
  },
  {
    "text": "the CPUs actually couldn't\nread in the data in one rotation, so people didn't even\nread consecutive blocks,",
    "start": "4708660",
    "end": "4716530"
  },
  {
    "text": "because the CPU just couldn't\nhandle data coming in that fast. You would stagger blocks around\nthe disk, so that when",
    "start": "4716530",
    "end": "4722200"
  },
  {
    "text": "you did sequential reads, you'd\nget this one and then this one and this one. There was this whole thing about\ntuning your file system.",
    "start": "4722200",
    "end": "4728730"
  },
  {
    "text": "It's like-- AUDIENCE: By the way, back\nwhen disks were-- BRADLEY KUSZMAUL: Yeah.",
    "start": "4728730",
    "end": "4734310"
  },
  {
    "text": "Washing machine. AUDIENCE: Washing\nmachine size. BRADLEY KUSZMAUL: For\n20 megabytes.",
    "start": "4734310",
    "end": "4739565"
  },
  {
    "text": "PROFESSOR: Oh, yeah, that's\nthe big disk. ",
    "start": "4739565",
    "end": "4745540"
  },
  {
    "text": "So hopefully you guys\ngot a feel for-- we have been looking at this\nperformance on a small multi-core and stuff like that,\nhow it can scale in",
    "start": "4745540",
    "end": "4752440"
  },
  {
    "text": "different directions and\nthe kind of impact performance can have. And in fact, if anybody has read\nbooks on why Google is",
    "start": "4752440",
    "end": "4762050"
  },
  {
    "text": "successful, one of the biggest\nthings for their success is they managed to do a huge amount\nof work very cheaply,",
    "start": "4762050",
    "end": "4769090"
  },
  {
    "text": "because the amount of work they\ndo, if anybody did in the traditional way, they can't\nafford that model, to give it",
    "start": "4769090",
    "end": "4776400"
  },
  {
    "text": "for free or give it supplied\nfor advertising. Because they can get it done\nbecause it's about",
    "start": "4776400",
    "end": "4782360"
  },
  {
    "text": "optimization. Performance, Performance\nbasically relates to cost.",
    "start": "4782360",
    "end": "4787770"
  },
  {
    "text": "And if the cost is low enough,\nthen they don't have to keep charging a huge amount of\nmoney for each search.",
    "start": "4787770",
    "end": "4793370"
  },
  {
    "text": "GUEST SPEAKER: So let's\nthank Dr. Kuszmaul for an excellent talk.",
    "start": "4793370",
    "end": "4801438"
  },
  {
    "text": "And can you hang out for just\na little bit, if people want to come down? OK. Thanks.",
    "start": "4801438",
    "end": "4807450"
  },
  {
    "start": "4807450",
    "end": "4814805"
  }
]