[
  {
    "text": "[SQUEAKING] [RUSTLING] [CLICKING]",
    "start": "0",
    "end": "5401"
  },
  {
    "start": "5401",
    "end": "25550"
  },
  {
    "text": "MICHAEL SIPSER: Hi, everybody. I hope you can hear me. Give me a thumbs up if you can.",
    "start": "25550",
    "end": "30900"
  },
  {
    "text": "Good.  I see them coming through.",
    "start": "30900",
    "end": "36805"
  },
  {
    "text": "So we're going to get started.  So getting back to\nwhat we've been doing.",
    "start": "36805",
    "end": "44820"
  },
  {
    "text": "We've been talking\nabout space complexity. Measures how much memory\nthe algorithm requires",
    "start": "44820",
    "end": "51630"
  },
  {
    "text": "or various problems require. And we defined the space\ncomplexity classes,",
    "start": "51630",
    "end": "62850"
  },
  {
    "text": "space f of n and\nnon-deterministic space f of n, the polynomial space\nand non-deterministic space",
    "start": "62850",
    "end": "69930"
  },
  {
    "text": "classes, and gave some\nexamples and so on. And today we're going to pick\nup where we left off last time.",
    "start": "69930",
    "end": "77070"
  },
  {
    "text": "One of the examples,\nwhich is going to be an important one for\nus, concerns this latter DFA",
    "start": "77070",
    "end": "82320"
  },
  {
    "text": "problem. So I'm going to go over that\nagain, give a little bit more emphasis to the space\nanalysis, which I got",
    "start": "82320",
    "end": "90210"
  },
  {
    "text": "some questions about last time. And then we are going\nto move on from there and prove Savitch's\ntheorem and then",
    "start": "90210",
    "end": "96659"
  },
  {
    "text": "talk about a complete\nproblems for PSPACE and show that this problem TQBF,\nwhich we introduced last time,",
    "start": "96660",
    "end": "103649"
  },
  {
    "text": "is actually a PSPACE\ncomplete problem. But all in due course.",
    "start": "103650",
    "end": "110740"
  },
  {
    "text": "A little bit of review. So we defined what we\nmean by a Turing machine to run in a certain\namount of space.",
    "start": "110740",
    "end": "117450"
  },
  {
    "text": "That means it uses\nat most f of n. If it's running in space f of\nn, uses at most f of n cells,",
    "start": "117450",
    "end": "124740"
  },
  {
    "text": "tape cells, on every\ninput of length n. And similarly, a\nnon-deterministic Turing",
    "start": "124740",
    "end": "131430"
  },
  {
    "text": "machine does the same. But in addition to that, the\nnon-deterministic machine",
    "start": "131430",
    "end": "138150"
  },
  {
    "text": "has to halt on every\nbranch of its computation. And each branch\nof its computation",
    "start": "138150",
    "end": "143580"
  },
  {
    "text": "has to use at most that\nbounded amount of tape cells.",
    "start": "143580",
    "end": "149833"
  },
  {
    "text": "So we're going to be talking\nabout non-deterministic space computation today as well. It's going to be relevant to us.",
    "start": "149833",
    "end": "157959"
  },
  {
    "text": "So we defined the\nclasses, as I mentioned, and the polynomial\nand the PSPACE",
    "start": "157960",
    "end": "165660"
  },
  {
    "text": "and non-deterministic\nPSPACE classes. And this is how we believe\nthey relate to one another.",
    "start": "165660",
    "end": "173670"
  },
  {
    "text": "The classes coNP and NP as well. And of course, as I\nmentioned last time,",
    "start": "173670",
    "end": "181440"
  },
  {
    "text": "there are some very major\nunsolved problems in this area. So everything could\nconceivably collapse down",
    "start": "181440",
    "end": "187620"
  },
  {
    "text": "to P, which would, of\ncourse, be very surprising. But we don't know how\nto prove otherwise.",
    "start": "187620",
    "end": "194770"
  },
  {
    "text": "And the big theorem that\nwe're going to prove today is that polynomial space and\nnon-deterministic polynomial",
    "start": "194770",
    "end": "200640"
  },
  {
    "text": "space actually do collapse\ndown to each other. And being the same class.",
    "start": "200640",
    "end": "208998"
  },
  {
    "text": "So in contrast with the\nsituation that we believe to be the case for\ntime complexity where we believe converting\nnon-deterministic",
    "start": "208998",
    "end": "216920"
  },
  {
    "text": "to deterministic gives an\nexponential increase for space complexity, it only gives\na squaring increase,",
    "start": "216920",
    "end": "224900"
  },
  {
    "text": "as we'll see. So any questions on any of this?",
    "start": "224900",
    "end": "234110"
  },
  {
    "text": "We will just march into a little\nreview of this latter problem. ",
    "start": "234110",
    "end": "241500"
  },
  {
    "text": "So reviewing some\nof the notation. And let me emphasize that.",
    "start": "241500",
    "end": "247447"
  },
  {
    "text": "So the big theorem we're\ngoing to be proving today is that PSPACE and\nNPSPACE are equal.",
    "start": "247447",
    "end": "254563"
  },
  {
    "text": "And also we're\ngoing to be talking about PSPACE completeness.",
    "start": "254563",
    "end": "260989"
  },
  {
    "text": "But both of those\ninvolve proving theorems.",
    "start": "260990",
    "end": "266180"
  },
  {
    "text": "In the first case,\nSavitch's theorem that converting\nnon-deterministic to",
    "start": "266180",
    "end": "271610"
  },
  {
    "text": "deterministic\nspaces is squaring. And in the second case, proving\nthat TQBF is PSPACE complete.",
    "start": "271610",
    "end": "278870"
  },
  {
    "text": "Both of those theorems can be\nthought of as generalizations of this theorem here that\nthe latter DFA problem can",
    "start": "278870",
    "end": "291110"
  },
  {
    "text": "be done in the deterministic\npolynomial space or n squared space.",
    "start": "291110",
    "end": "296405"
  },
  {
    "text": " So it really pays\nto try to understand",
    "start": "296405",
    "end": "304580"
  },
  {
    "text": "how the proof of\nthis theorem works. Because in a sense, this theorem\nis a more concrete version",
    "start": "304580",
    "end": "311210"
  },
  {
    "text": "of what we're going to be seeing\nin those other two theorems in a somewhat more\nabstract form.",
    "start": "311210",
    "end": "316550"
  },
  {
    "text": "So I like understanding things\nin a more concrete way first. So that's why this is a good\nexample to start out with.",
    "start": "316550",
    "end": "323570"
  },
  {
    "text": "But really in the\nend of the day, it's the same\nproof just repeated for those three theorems.",
    "start": "323570",
    "end": "328970"
  },
  {
    "text": "So this is really three\nfor the price of one. Three theorems, one proof here.",
    "start": "328970",
    "end": "335630"
  },
  {
    "text": "So you're going to be seeing\nthe same proof repeated three times but in different\nlevels of abstraction.",
    "start": "335630",
    "end": "343910"
  },
  {
    "text": "So let's review again. I know some of you got it,\nbut maybe some of you didn't.",
    "start": "343910",
    "end": "352289"
  },
  {
    "text": "And let's just try to be\nclear on the algorithm",
    "start": "352290",
    "end": "358160"
  },
  {
    "text": "to solve the ladder DFA problem. So if you remember, first of\nall, let me just jump on ahead.",
    "start": "358160",
    "end": "363260"
  },
  {
    "text": "The ladder problem is-- a ladder, first of\nall, is a sequence",
    "start": "363260",
    "end": "368270"
  },
  {
    "text": "of strings that change one\nsymbol at a time that perhaps",
    "start": "368270",
    "end": "373789"
  },
  {
    "text": "connect, go from one\nstring to another. So you're going to\ngo from work to play, changing one symbol at a time.",
    "start": "373790",
    "end": "379919"
  },
  {
    "text": "So we gave an example\nof this or you can easily come up with\nan example of doing this.",
    "start": "379920",
    "end": "385009"
  },
  {
    "text": "But the computational\nproblem is can you do it? Can you get from this\nstring to that string",
    "start": "385010",
    "end": "392270"
  },
  {
    "text": "and stay within a\ncertain language? So it might be the\nlanguage of English words or it might be the\nlanguage of all strings",
    "start": "392270",
    "end": "398930"
  },
  {
    "text": "that some specific\nDFA recognizes.",
    "start": "398930",
    "end": "407990"
  },
  {
    "text": "So it might be\nall of the string. These might all be\nstrings that some DFA accepts or might be English\nwords or some other rule.",
    "start": "407990",
    "end": "418280"
  },
  {
    "text": "And so that's what\nwe mean by trying",
    "start": "418280",
    "end": "424639"
  },
  {
    "text": "to test if there's a ladder. And so the ladder problem\nis, well, I don't think I",
    "start": "424640",
    "end": "432800"
  },
  {
    "text": "wrote down the ladder\nproblem itself. But the bounded ladder problem\nis basically the same idea.",
    "start": "432800",
    "end": "438960"
  },
  {
    "text": "You're given the DFA. You're given the\nstrings u and v. And now this is\nthe bounded version",
    "start": "438960",
    "end": "444650"
  },
  {
    "text": "of the problem where\nI'm going to give you a limit on the number\nof steps you can take.",
    "start": "444650",
    "end": "449750"
  },
  {
    "text": "So I'm illustrating that here. So you're going to be given a b. And you want to say, can\nI get from this string",
    "start": "449750",
    "end": "454820"
  },
  {
    "text": "to that string within b steps? ",
    "start": "454820",
    "end": "460620"
  },
  {
    "text": "And we had a notation\nfor writing that. Going from u to v, if there's\na ladder that connects",
    "start": "460620",
    "end": "468720"
  },
  {
    "text": "u to v within at most b steps. And so the bounded\nladder problem, which I'm introducing\nbecause I'm",
    "start": "468720",
    "end": "474900"
  },
  {
    "text": "going to be aiming toward\na recursive algorithm to solve this problem is can\nI get from u to v by a ladder,",
    "start": "474900",
    "end": "484319"
  },
  {
    "text": "changing one symbol at a time,\nwhere each string along the way is accepted by b, and\nI'm only allowed b steps.",
    "start": "484320",
    "end": "492389"
  },
  {
    "text": "Little b steps.  So that is the\ncomputational problem",
    "start": "492390",
    "end": "499170"
  },
  {
    "text": "that I'm going to be\nsolving with the algorithm that I'm going to describe.",
    "start": "499170",
    "end": "504570"
  },
  {
    "text": "So the algorithm\nI'm going to call BL for bounded ladder problem.",
    "start": "504570",
    "end": "510090"
  },
  {
    "text": "And here is the input. And the algorithm\nis, first of all,",
    "start": "510090",
    "end": "516000"
  },
  {
    "text": "going to look to\nsee if b equals 1. If I'm just trying to get\nfrom u to v in a single step.",
    "start": "516000",
    "end": "522870"
  },
  {
    "text": "In that case, it's a\nvery simple problem, because you want to test,\nobviously, that u and v are",
    "start": "522870",
    "end": "530400"
  },
  {
    "text": "accepted by the automaton. And they just have to\ndiffer in one place.",
    "start": "530400",
    "end": "535920"
  },
  {
    "text": "And then you have a\nvery simple one step ladder that takes u to v.\nSo for the case b equals 1,",
    "start": "535920",
    "end": "542820"
  },
  {
    "text": "it's very simple. For larger values\nof b, we're going",
    "start": "542820",
    "end": "549450"
  },
  {
    "text": "to solve the problem\nrecursively in terms of smaller values of b.",
    "start": "549450",
    "end": "555330"
  },
  {
    "text": "So for b greater than 1, we're\ngoing to recursively test.",
    "start": "555330",
    "end": "564180"
  },
  {
    "text": "If you're trying to solve the\nproblem can I get from u to v, instead we're going to try\neach possible halfway through.",
    "start": "564180",
    "end": "573443"
  },
  {
    "text": "We don't know that\nit's halfway through. So we're just going to\ntry each possible string. And we're going to test can we\nget from u, the initial string,",
    "start": "573443",
    "end": "583290"
  },
  {
    "text": "to that new string, that w,\nin half the number of steps.",
    "start": "583290",
    "end": "588670"
  },
  {
    "text": "And can I get to\nthe final string v in half the number of steps? If I can do that, then\nI can get from u to v",
    "start": "588670",
    "end": "598010"
  },
  {
    "text": "the total number of steps b. So I'm just going to\ntry to do this one w",
    "start": "598010",
    "end": "603620"
  },
  {
    "text": "at a time for every possible w. This is going to be very\nexpensive in terms of time,",
    "start": "603620",
    "end": "609500"
  },
  {
    "text": "but we're not worried\nabout time right now. We're trying to cut down\non the amount of space that we're using. And this is going to be\na big savings in space.",
    "start": "609500",
    "end": "616070"
  },
  {
    "text": " Let's not worry about the\ndivision, b over 2 here.",
    "start": "616070",
    "end": "622600"
  },
  {
    "text": "All of the divisions,\nwe're going to be seeing this several times\ngoing forward in the lecture,",
    "start": "622600",
    "end": "628047"
  },
  {
    "text": "we'll think of them rounding up. But I'm not going to\nmake the notation look cumbersome by writing\nthat every time.",
    "start": "628047",
    "end": "636160"
  },
  {
    "text": "OK. So here we go. Here is some candidate w string,\nwhich is halfway through.",
    "start": "636160",
    "end": "642370"
  },
  {
    "text": " Recursively test. Can I get from the starting\nstring to that w and from w",
    "start": "642370",
    "end": "651410"
  },
  {
    "text": "to that ending string? If I can, if I find\nsuch a w, then I accept.",
    "start": "651410",
    "end": "657760"
  },
  {
    "text": "And if I try all possible w and\nI never manage to find a way",
    "start": "657760",
    "end": "664930"
  },
  {
    "text": "to make both the top\nand the bottom work, then I know I cannot get\nfrom the starting string",
    "start": "664930",
    "end": "670840"
  },
  {
    "text": "to the ending string\nwithin b steps. And so I reject. And now I'm going to solve\nthe original unbounded ladder",
    "start": "670840",
    "end": "679149"
  },
  {
    "text": "problem by simply\nputting the biggest possible bound into the\nbounded ladder problem.",
    "start": "679150",
    "end": "685900"
  },
  {
    "text": "And that's this value t, which\ngives the very trivial bound",
    "start": "685900",
    "end": "692350"
  },
  {
    "text": "of the total number\nof possible strings that I can write down within my\nlength m that I'm working with.",
    "start": "692350",
    "end": "701070"
  },
  {
    "text": "So this if sigma is the\nalphabet of these strings, it's just sigma to the m.",
    "start": "701070",
    "end": "706520"
  },
  {
    "text": "That's all possible strings. Of course, that's going to be\na maximum size on the ladder.",
    "start": "706520",
    "end": "711740"
  },
  {
    "text": " So now how much\nspace does this take?",
    "start": "711740",
    "end": "718600"
  },
  {
    "text": "And I think this is where\npeople got a little bit lost in the lecture last time.",
    "start": "718600",
    "end": "725390"
  },
  {
    "text": "So I'm going to try\nto animate this. I don't know if that's\ngoing to help or not. But in the end of\nthe day, you're",
    "start": "725390",
    "end": "731130"
  },
  {
    "text": "just going to have to think\nthrough how do you account for the cost of this recursion.",
    "start": "731130",
    "end": "736450"
  },
  {
    "text": " But the main thing,\nto start off, you have to make sure you\nunderstand the algorithm.",
    "start": "736450",
    "end": "743410"
  },
  {
    "text": "And if you get\nfrom here to there, we're going to try\nall possible midpoints",
    "start": "743410",
    "end": "748510"
  },
  {
    "text": "and then solve the upper part\nand the lower part recursively, reusing the space.",
    "start": "748510",
    "end": "756189"
  },
  {
    "text": "That's the way we're\ngoing to get a saving. By solving this problem,\nreusing the space that we use to\nsolve this problem.",
    "start": "756190",
    "end": "765100"
  },
  {
    "text": "So I'm going to try to show\nthis to you on actually how the space gets used\non the Turing machine.",
    "start": "765100",
    "end": "770800"
  },
  {
    "text": "You can kind of think\nof here's the input and then after that is going to\nbe the stack for the recursion.",
    "start": "770800",
    "end": "775960"
  },
  {
    "text": "If you're not that familiar\nwith how to implement recursion, it doesn't really matter. But you can just think about\nwhat the algorithm needs",
    "start": "775960",
    "end": "783889"
  },
  {
    "text": "to keep track of.  And so as it's trying\nevery possible w,",
    "start": "783890",
    "end": "791700"
  },
  {
    "text": "so just in order like\nan odometer, just",
    "start": "791700",
    "end": "796740"
  },
  {
    "text": "trying every possible\nstring, eventually maybe it finds a string that's\nin the language that",
    "start": "796740",
    "end": "804480"
  },
  {
    "text": "hears an English word, one\nof the first English words of length 4 that\nyou might run into.",
    "start": "804480",
    "end": "810160"
  },
  {
    "text": "And so now it makes sense,\nactually, to do the recursion. So that's all.",
    "start": "810160",
    "end": "816810"
  },
  {
    "text": "Every time you're going\nto have to have a register or a location on the tape where\nyou're going to be writing down",
    "start": "816810",
    "end": "823140"
  },
  {
    "text": "those different w's. So let's say it's over here. And we're just\ngoing to go through.",
    "start": "823140",
    "end": "828570"
  },
  {
    "text": "I hope that's not too\nsmall for you to see. That's really where that\naction is happening.",
    "start": "828570",
    "end": "835300"
  },
  {
    "text": "And finally, maybe you\ngot to the string w. Now you're going to try\nto do the recursion. So here as you're doing the\nrecursion on the top half",
    "start": "835300",
    "end": "846930"
  },
  {
    "text": "again, you're going\nto be cutting-- you're going to be finding a\nnew w for the intermediate point",
    "start": "846930",
    "end": "853830"
  },
  {
    "text": "just solving this upper\nproblem where we're testing if I can get from work to able.",
    "start": "853830",
    "end": "859140"
  },
  {
    "text": "Later I'm going to have to deal\nwith getting from able to play. ",
    "start": "859140",
    "end": "869010"
  },
  {
    "text": "Good. So here, again, we're\ngoing to be fixing able,",
    "start": "869010",
    "end": "874650"
  },
  {
    "text": "fixing the first w. We're going to try\nevery possible way",
    "start": "874650",
    "end": "880530"
  },
  {
    "text": "of getting from the start\nstring to that middle string.",
    "start": "880530",
    "end": "886240"
  },
  {
    "text": "So we're going to try\nevery possible thing here. Eventually maybe we find some\nother string in the language.",
    "start": "886240",
    "end": "892920"
  },
  {
    "text": "We get down to the string book. And that's all\ngoing to get stored.",
    "start": "892920",
    "end": "900420"
  },
  {
    "text": "You can't forget\nthe string able. But now we're going\nto use some more space to store those candidates.",
    "start": "900420",
    "end": "908160"
  },
  {
    "text": "So that's a second version\nof w deeper in the recursion.",
    "start": "908160",
    "end": "913230"
  },
  {
    "text": "So here we're going to be\ntriangle to possible strings here. Again, eventually we\nget to some string book.",
    "start": "913230",
    "end": "921860"
  },
  {
    "text": "And if that succeeds in getting\nus from work to able via book,",
    "start": "921860",
    "end": "929029"
  },
  {
    "text": "now we're going to jump\ndown to do the bottom half, to see if I can get\nfrom able to play",
    "start": "929030",
    "end": "934490"
  },
  {
    "text": "as a separate problem, which\ngets solved in the same space. So now here we're going to try\nall these possibilities getting",
    "start": "934490",
    "end": "943850"
  },
  {
    "text": "from able to play. Maybe call is the right\nintermediate string there. And so now we're going\nto erase the book",
    "start": "943850",
    "end": "951662"
  },
  {
    "text": "and now we're going\nto solve the lower sub problem in the same location. I hope this is helpful.",
    "start": "951662",
    "end": "956892"
  },
  {
    "text": "This was a lot of work\nmaking these animations. ",
    "start": "956892",
    "end": "965970"
  },
  {
    "text": "So the point of all\nthis is every time we go down the level\nof the recursion,",
    "start": "965970",
    "end": "971460"
  },
  {
    "text": "there's another\nregister whose size is big enough to hold one\nof the strings, is needed.",
    "start": "971460",
    "end": "980870"
  },
  {
    "text": "And that register\ngets reused times",
    "start": "980870",
    "end": "990460"
  },
  {
    "text": "throughout as we're going\nthrough this recursion. So anyway, I hope\nthat's helpful.",
    "start": "990460",
    "end": "999819"
  },
  {
    "text": "Anyway. So each level of the recursion\nadds another order in",
    "start": "999820",
    "end": "1006450"
  },
  {
    "text": "to record the w. And so you have to do--\nhow many levels do we get.",
    "start": "1006450",
    "end": "1011470"
  },
  {
    "text": "Well, the depth of\nthe recursion is going to be how\nmany times we end up having to divide this picture\nin half until we get down to 1.",
    "start": "1011470",
    "end": "1021120"
  },
  {
    "text": "And so the height of\nthis when we start off is going to be basically\nan exponential in m. m",
    "start": "1021120",
    "end": "1029564"
  },
  {
    "text": "is roughly the size of n. So when you take the log of\nthat, you're going to get--",
    "start": "1029565",
    "end": "1035175"
  },
  {
    "text": " you're going to pull\ndown the exponential.",
    "start": "1035175",
    "end": "1041949"
  },
  {
    "text": "So it's going to be\norder m or, which is, again, roughly the\nsame size as the input. m is like half the input\nbecause the whole input is u",
    "start": "1041950",
    "end": "1049416"
  },
  {
    "text": "and v. m is just the size of u. And so each level\nrequires order n,",
    "start": "1049416",
    "end": "1056139"
  },
  {
    "text": "and the depth is going\nto be order n deep. The log of the initial\nheight of this ladder.",
    "start": "1056140",
    "end": "1064630"
  },
  {
    "text": "And so the total space used is\ngoing to be order n squared. So why don't we\njust take a minute?",
    "start": "1064630",
    "end": "1071600"
  },
  {
    "text": "I'm happy to spend a little\ntime going through this, either the algorithm's\ncorrectness,",
    "start": "1071600",
    "end": "1077990"
  },
  {
    "text": "understanding recursion,\nor understanding the space analysis. If there's any\nquestion that you feel you can ask that would be\nclarifying for you, jump in.",
    "start": "1077990",
    "end": "1087950"
  },
  {
    "text": "I'll set aside a few minutes\njust to answer questions here. ",
    "start": "1087950",
    "end": "1093640"
  },
  {
    "text": "So I've got a question here. In step five, why\ndo we reject if all",
    "start": "1093640",
    "end": "1099030"
  },
  {
    "text": "fail instead of just one fails? ",
    "start": "1099030",
    "end": "1105519"
  },
  {
    "text": "Well, here, so remember\nwhat we're trying to do. We're trying to say can I\nget from u to v in b steps?",
    "start": "1105520",
    "end": "1114110"
  },
  {
    "text": " The way I'm going\nto be doing that is",
    "start": "1114110",
    "end": "1119340"
  },
  {
    "text": "trying every possible\nintermediate string w. ",
    "start": "1119340",
    "end": "1125750"
  },
  {
    "text": "If I find some w\nwhich does not work,",
    "start": "1125750",
    "end": "1132130"
  },
  {
    "text": "that doesn't mean\nthat there's not some other w which might work. All I need is one\nw for which I can",
    "start": "1132130",
    "end": "1139230"
  },
  {
    "text": "get from u to w in half\nthe number of steps and w to v in half the\nnumber of steps. So I'm going to try\nevery possible w.",
    "start": "1139230",
    "end": "1146159"
  },
  {
    "text": "If any one of them is\ngood, then I can accept. If any one of them\nsucceeds where",
    "start": "1146160",
    "end": "1152370"
  },
  {
    "text": "I can get from u to\nw in half the steps and to w to v in half\nthe steps, then I",
    "start": "1152370",
    "end": "1157875"
  },
  {
    "text": "know I can get from u to v\nin the full number of steps. So I only need to find one.",
    "start": "1157875",
    "end": "1164820"
  },
  {
    "text": "If one particular\none doesn't work, I'll just go on to the next one. ",
    "start": "1164820",
    "end": "1177460"
  },
  {
    "text": "OK. This is a good question.  Do we have to save\nthe word book?",
    "start": "1177460",
    "end": "1184570"
  },
  {
    "text": "So once we succeed in\ngetting from work to able, let's say via book, do\nwe need to save that word",
    "start": "1184570",
    "end": "1191050"
  },
  {
    "text": "book anywhere? No. All we need to remember\nis that we've succeeded",
    "start": "1191050",
    "end": "1196059"
  },
  {
    "text": "in getting from work to able. We don't need to\nremember book anymore. We just remember\nthat we've succeeded.",
    "start": "1196060",
    "end": "1204640"
  },
  {
    "text": "And that is by virtue of\nwhere we are in the algorithm. If we have succeeded,\nthen we move",
    "start": "1204640",
    "end": "1212350"
  },
  {
    "text": "on to the second recursion,\nsecond call, recursive call.",
    "start": "1212350",
    "end": "1218350"
  },
  {
    "text": "So we found some way to do it. So we found some\nintermediate point",
    "start": "1218350",
    "end": "1224289"
  },
  {
    "text": "which succeeds for this one. So we move on to that one. We don't have to keep\nany of that work anymore.",
    "start": "1224290",
    "end": "1229429"
  },
  {
    "text": "All you have to do\nis remember, yes, I can get from work to able\nin half the number of steps. Now all that's left is\nto get from able to play",
    "start": "1229430",
    "end": "1237820"
  },
  {
    "text": "in half the number of steps. It doesn't matter how I got\nto able in the first place.",
    "start": "1237820",
    "end": "1243110"
  },
  {
    "text": "So we don't have\nto remember that. That was a good question though. ",
    "start": "1243110",
    "end": "1249300"
  },
  {
    "text": "So I think I understand this. Before we replace the\nvalue for book with call",
    "start": "1249300",
    "end": "1260430"
  },
  {
    "text": "with the work\ninvolved to find call, yeah, we have to check that\nwe can get from work to book",
    "start": "1260430",
    "end": "1266910"
  },
  {
    "text": "and book to able. So we keep onto book while\nwe're working on the upper half.",
    "start": "1266910",
    "end": "1274140"
  },
  {
    "text": "And only when we've\nfinally succeeded in getting from work to\nable, let's say via book,",
    "start": "1274140",
    "end": "1280440"
  },
  {
    "text": "then you can throw a book away. But while you're working on\nthe upper half, you try book,",
    "start": "1280440",
    "end": "1287020"
  },
  {
    "text": "you try different strings of\nlength four until one of them works.",
    "start": "1287020",
    "end": "1292270"
  },
  {
    "start": "1292270",
    "end": "1299230"
  },
  {
    "text": "I'm not sure. Somebody is asking me about\nbreadth first search and depth for search. I'm not sure I see it.",
    "start": "1299230",
    "end": "1304299"
  },
  {
    "start": "1304300",
    "end": "1309595"
  },
  {
    "text": "I'm not sure that's going to\nbe a helpful way of thinking about this. So I'm not going to\nanswer that right now. But you can ask that\noffline later if you want.",
    "start": "1309595",
    "end": "1320730"
  },
  {
    "text": "Why is the recursion depth\nlog t instead of log m?",
    "start": "1320730",
    "end": "1326340"
  },
  {
    "text": "Well, how high is this thing? Initially it's t high.",
    "start": "1326340",
    "end": "1333280"
  },
  {
    "text": "But every time\nwe're doing a level, we're calling the recursion,\nwe're cutting t in half.",
    "start": "1333280",
    "end": "1339160"
  },
  {
    "text": " I'm solving this\nin general for b, but we starting off with b equal\nto t. t is the maximum size.",
    "start": "1339160",
    "end": "1348980"
  },
  {
    "text": "So initially this\nis going to be t, and then it's going to be\nt over 2, then t over 4.",
    "start": "1348980",
    "end": "1355200"
  },
  {
    "text": "So it's going to be log t\nlevels before we get down to 1. ",
    "start": "1355200",
    "end": "1366720"
  },
  {
    "text": "Yeah. So somebody is\nasking, can we think of this as a memory stack? Yes, this is like--\nthat's the way your typical\nimplementation of recursion",
    "start": "1366720",
    "end": "1373009"
  },
  {
    "text": "is kind of with a stack, where\nyou push when you make a call and you pop when you\nreturn from the call. ",
    "start": "1373010",
    "end": "1382320"
  },
  {
    "text": "Is it possible that v can\nappear during BL procedure on t?",
    "start": "1382320",
    "end": "1388990"
  },
  {
    "text": "Is it possible\nthat v can appear? I'm not sure what that means. It can reappear.",
    "start": "1388990",
    "end": "1396200"
  },
  {
    "text": "So I'm starting with\nu to v. Is it possible that v might be one of\nthese intermediate strings?",
    "start": "1396200",
    "end": "1401210"
  },
  {
    "text": "Yeah.  You're going to try every\npossible intermediate stream",
    "start": "1401210",
    "end": "1407930"
  },
  {
    "text": "blindly. Including v is one of them. ",
    "start": "1407930",
    "end": "1413330"
  },
  {
    "text": "If you can reach v more\nquickly, well, great.",
    "start": "1413330",
    "end": "1419029"
  },
  {
    "text": "I guess I have not dealt\nwith the issue of what happens if you get to a-- ",
    "start": "1419030",
    "end": "1430950"
  },
  {
    "text": "technically it's\ngoing to work out because I'm allowing\nthe difference",
    "start": "1430950",
    "end": "1436080"
  },
  {
    "text": "to be in at most one place. So even if you get\nthere early, you're allowed to not change\nanything, and that still",
    "start": "1436080",
    "end": "1442020"
  },
  {
    "text": "is a legal step in the ladder. ",
    "start": "1442020",
    "end": "1448280"
  },
  {
    "text": "Yeah. I don't see how to do this\nfrom a bottom up perspective. Somebody's is asking is there\na bottom up version of this.",
    "start": "1448280",
    "end": "1454539"
  },
  {
    "text": "I don't think so. No, I don't think so.",
    "start": "1454540",
    "end": "1460500"
  },
  {
    "text": "All right. Why don't we move on? So now we're going to\nsee this proof again.",
    "start": "1460500",
    "end": "1468049"
  },
  {
    "text": "But this time we're\ngoing to be proving",
    "start": "1468050",
    "end": "1474120"
  },
  {
    "text": "that you can convert\nany NFA to a DFA",
    "start": "1474120",
    "end": "1479460"
  },
  {
    "text": "with only a squaring increase. So really, well, let me\njust put that up there.",
    "start": "1479460",
    "end": "1490600"
  },
  {
    "text": "So this is going to be\nSavitch's theorem, that among other things proves\nthat PSPACE equals NPSPACE.",
    "start": "1490600",
    "end": "1497470"
  },
  {
    "text": "So it says that you can convert\na non-deterministic machine to a deterministic machine only\nsquaring the amount of space.",
    "start": "1497470",
    "end": "1505553"
  },
  {
    "text": "So you're comfortable\nwith this notation here. Anything that you can do in f\nof n space non-deterministically",
    "start": "1505553",
    "end": "1510909"
  },
  {
    "text": "you can do in f squared of\nn based deterministically. And we're going\nto accomplish that",
    "start": "1510910",
    "end": "1517660"
  },
  {
    "text": "by converting an NTM\nto a deterministic TM",
    "start": "1517660",
    "end": "1524050"
  },
  {
    "text": "but only squaring\nthe space used. So n is going to\nconvert it to an m. And now this proof\nis going to look",
    "start": "1524050",
    "end": "1531250"
  },
  {
    "text": "very similar to the proof\nin the previous slide. It's the same proof.",
    "start": "1531250",
    "end": "1536940"
  },
  {
    "start": "1536940",
    "end": "1542129"
  },
  {
    "text": "And the fact from the\nprevious slide about ladder really is implied\nby this, because we",
    "start": "1542130",
    "end": "1549090"
  },
  {
    "text": "had an easy algorithm to show\nthat the latter problem is solvable in\nnon-deterministic, in NPSPACE.",
    "start": "1549090",
    "end": "1556980"
  },
  {
    "text": "So ladder problem was\neasily shown to be in here. If you remember, you\njust basically guess",
    "start": "1556980",
    "end": "1566299"
  },
  {
    "text": "the steps of the ladder. So non-deterministically,\nyou can easily check, can I get from the\nstart to the end?",
    "start": "1566300",
    "end": "1573500"
  },
  {
    "text": "But Savitch's theorem\ntells us that anything you can do non-deterministically\nin polynomial space you",
    "start": "1573500",
    "end": "1580669"
  },
  {
    "text": "can do deterministically\nin polynomial space. So what we showed in\nthe previous slide follows from this\nslide, but this slide",
    "start": "1580670",
    "end": "1588080"
  },
  {
    "text": "is really just a generalization\nof the same proof.  Maybe I've said it\ntoo many times now.",
    "start": "1588080",
    "end": "1595549"
  },
  {
    "text": "So we're going to\nintroduce a notation very similar to the notation\nwe had last time.",
    "start": "1595550",
    "end": "1602125"
  },
  {
    "text": "But now we're\ngoing to be talking about simulating this\nnon-deterministic machine",
    "start": "1602125",
    "end": "1607130"
  },
  {
    "text": "with a deterministic machine. And we're going to\ntake two configurations of this non-deterministic\nmachine, ci and cj,",
    "start": "1607130",
    "end": "1616179"
  },
  {
    "text": "and say can I get from ci\nto cj in at most b steps?",
    "start": "1616180",
    "end": "1623120"
  },
  {
    "text": "I'm going to have a notation. Very similar to the notation\nfor the ladder where",
    "start": "1623120",
    "end": "1628580"
  },
  {
    "text": "I can get from this word\nto that word in at most b steps by a ladder. Here can I get from\nthis word to that--",
    "start": "1628580",
    "end": "1635335"
  },
  {
    "text": "can I get from\nthis configuration to that configuration\nwith at most b steps of the Turing\nmachine's operation?",
    "start": "1635335",
    "end": "1643900"
  },
  {
    "text": "So these are two\nconfigurations now of n. So can n go from\nthis configuration ci",
    "start": "1643900",
    "end": "1652260"
  },
  {
    "text": "to that other\nconfiguration cj but only taking b steps along the way?",
    "start": "1652260",
    "end": "1657779"
  },
  {
    "text": "That's now the\ncomputational problem that I'm going to solve\nfor you with an algorithm. And it's going to be a recursion\nexactly like the previous one.",
    "start": "1657780",
    "end": "1664889"
  },
  {
    "text": " So n gets its input\nthe two configurations",
    "start": "1664890",
    "end": "1671919"
  },
  {
    "text": "ci and cj and the bound\nb and want to check can I get from i to j within b?",
    "start": "1671920",
    "end": "1679620"
  },
  {
    "text": "So now the picture is a little\ndifferent but very similar. So instead of a\nladder appearing here,",
    "start": "1679620",
    "end": "1688800"
  },
  {
    "text": "it's really something\nthat's basically a tableau for the\nmachine n where",
    "start": "1688800",
    "end": "1696580"
  },
  {
    "text": "I have an initial configuration\nand an ending configuration. This would happen to\nbe the starting point",
    "start": "1696580",
    "end": "1707505"
  },
  {
    "text": "for the whole\nprocedure if you're testing whether n accepts w. But we would be solving\nthis in general for any--",
    "start": "1707505",
    "end": "1715390"
  },
  {
    "text": "so that case, so I have the\nstart configuration of n on w and the accepting configuration\nor an accepting configuration.",
    "start": "1715390",
    "end": "1722650"
  },
  {
    "text": "But in general, what\nI will be solving",
    "start": "1722650",
    "end": "1728420"
  },
  {
    "text": "is starting with\nany configuration ci and going to any\nconfiguration cj.",
    "start": "1728420",
    "end": "1734160"
  },
  {
    "text": "So I want to test\ncan I get from ci to cj within at most b steps.",
    "start": "1734160",
    "end": "1741730"
  },
  {
    "text": "So first of all, if b is 1, you\ncan just check that directly.",
    "start": "1741730",
    "end": "1748280"
  },
  {
    "text": "And now, again, we're\noperating deterministically to simulate the\nnon-deterministic machine.",
    "start": "1748280",
    "end": "1755430"
  },
  {
    "text": "So this is the\ndeterministic machine m. So m can easily, if it's\ngiven two configurations of n",
    "start": "1755430",
    "end": "1761637"
  },
  {
    "text": "and says, can I get\nfrom the first one to the second one in one step? Well, that's an easy check. You just lay out those\ntwo configurations,",
    "start": "1761637",
    "end": "1768620"
  },
  {
    "text": "look at the n's transition\nfunction, and say is this a legal move for n? ",
    "start": "1768620",
    "end": "1777140"
  },
  {
    "text": "Yes or no? And you accept or\nreject accordingly. Now, if b is larger\nthan 1, you're",
    "start": "1777140",
    "end": "1784909"
  },
  {
    "text": "going to try all possible\nintermediate configurations,",
    "start": "1784910",
    "end": "1792340"
  },
  {
    "text": "calling them c mid. This was like the w from\nthe previous theorem.",
    "start": "1792340",
    "end": "1797400"
  },
  {
    "text": "This is all possible strings c-- all possible\nconfigurations c mid.",
    "start": "1797400",
    "end": "1802840"
  },
  {
    "text": "And a configuration is\njust going to be a-- ",
    "start": "1802840",
    "end": "1811370"
  },
  {
    "text": "so far so-- OK. This is all possible. Looked like my PowerPoint\ncrashed, but it seems OK.",
    "start": "1811370",
    "end": "1819650"
  },
  {
    "text": "This is all possible\nconfigurations, which is just a string\nwith a string of tape symbols with a state\nsymbol appearing somewhere.",
    "start": "1819650",
    "end": "1826610"
  },
  {
    "text": "That's all it is. Going to try all possible\nconfigurations as candidate",
    "start": "1826610",
    "end": "1834720"
  },
  {
    "text": "middle configurations. And say can I get from the upper\none to this candidate middle",
    "start": "1834720",
    "end": "1839820"
  },
  {
    "text": "one and from that middle one\nto the lower one within half the number of steps each time. ",
    "start": "1839820",
    "end": "1847419"
  },
  {
    "text": "And solving that\nproblem recursively. ",
    "start": "1847420",
    "end": "1856320"
  },
  {
    "text": "So I got a question here\nabout the possibility of looping forever. ",
    "start": "1856320",
    "end": "1863309"
  },
  {
    "text": "First of all, if n is\ngoing to be looping, I don't have to worry about\nit, because I'm starting off,",
    "start": "1863310",
    "end": "1871950"
  },
  {
    "text": "I only need to simulate\nmachines that are deciders. Because I'm trying to show\nthat any language in here",
    "start": "1871950",
    "end": "1878730"
  },
  {
    "text": "has to be accepted,\nhas to be decided by some non-deterministic\nmachine.",
    "start": "1878730",
    "end": "1885823"
  },
  {
    "text": "So I'm not going to worry about\nmachines that are looping. If they're looping, m may\nmisbehave in some way,",
    "start": "1885823",
    "end": "1893820"
  },
  {
    "text": "but that's not going\nto be a problem for me. So let's keep life simple. Think about the deciders only.",
    "start": "1893820",
    "end": "1901350"
  },
  {
    "text": " So we're going to\nrecursively test here.",
    "start": "1901350",
    "end": "1906910"
  },
  {
    "text": "So that means I'm going to\ntry every possible middle, see if I can get from the start\nto the middle and the middle",
    "start": "1906910",
    "end": "1913980"
  },
  {
    "text": "to the end. If both of them work after\nI test them recursively,",
    "start": "1913980",
    "end": "1922110"
  },
  {
    "text": "then I'm going to accept. If not, I'm going to continue. And I reject if I try them all\nand none of them have worked.",
    "start": "1922110",
    "end": "1928410"
  },
  {
    "text": "Then I know there's no way for\nn to get from this configuration to that configuration\nin b steps.",
    "start": "1928410",
    "end": "1934500"
  },
  {
    "text": " And the overall picture, I\ntest whether n accepts w,",
    "start": "1934500",
    "end": "1941880"
  },
  {
    "text": "as I mentioned, by\nstarting with ci is the start configuration and\ncj is the accept configuration.",
    "start": "1941880",
    "end": "1951190"
  },
  {
    "text": "And now how big is t? Because I need to calculate\na bound on how deep",
    "start": "1951190",
    "end": "1958560"
  },
  {
    "text": "the recursions are going to be. So t here is going to\nbe the total number",
    "start": "1958560",
    "end": "1966480"
  },
  {
    "text": "of possible configurations. If this is the whole thing, it\nnever repeats a configuration.",
    "start": "1966480",
    "end": "1971789"
  },
  {
    "text": "So this is going to be a\nbound on how many steps then can be taken. And that's simply we\ncalculated this before.",
    "start": "1971790",
    "end": "1980220"
  },
  {
    "text": "It's the number of\nstates times the number of head positions times the\nnumber of tape contents.",
    "start": "1980220",
    "end": "1988830"
  },
  {
    "text": "And this is really going to\nbe the dominant consideration anyway. And so now each recursive\nlevel, and maybe I",
    "start": "1988830",
    "end": "1997595"
  },
  {
    "text": "should have emphasized\nthis at the beginning, how wide is this picture? It's big enough to\nstore a configuration.",
    "start": "1997595",
    "end": "2003534"
  },
  {
    "text": "A configuration is\nessentially a tape contents. So that's going\nto be f of n wide.",
    "start": "2003535",
    "end": "2010890"
  },
  {
    "text": "So each recursive level\nstores one configuration. Now the w costs f of\nn space to write down.",
    "start": "2010890",
    "end": "2019490"
  },
  {
    "text": "And the number of\nlevels is going to be the log of the initial\nheight, which is this.",
    "start": "2019490",
    "end": "2025640"
  },
  {
    "text": "So this is going to be\nthe dominating part of it. So the log of this is going\nto be, again, order f of n.",
    "start": "2025640",
    "end": "2033710"
  },
  {
    "text": "So each one takes f of\nn space to write down. The depth of the recursion\nis going to be order f of n.",
    "start": "2033710",
    "end": "2039919"
  },
  {
    "text": "So the total is going to\nbe order f squared of n, and that's how much\nspace this uses.",
    "start": "2039920",
    "end": "2045370"
  },
  {
    "text": "And that's the proof\nof Savitch's theorem. So yeah, so this is\na good point there.",
    "start": "2045370",
    "end": "2053169"
  },
  {
    "text": "Somebody asks can\nthere be multiple accepting configurations. I should have made the--",
    "start": "2053170",
    "end": "2059800"
  },
  {
    "text": "I forgot to say this and\nI was just realizing it as I was explaining it. One of the things\nI should have--",
    "start": "2059800",
    "end": "2066638"
  },
  {
    "text": "you can enforce that there\nis just a single accepting configuration. This is kind of a\ndetail, so don't worry",
    "start": "2066639",
    "end": "2073810"
  },
  {
    "text": "about it if you don't want to. But you can make sure that\nthere's a single accepting",
    "start": "2073810",
    "end": "2080199"
  },
  {
    "text": "configuration by telling\nthe machine when it accepts, it should erase its\ntape and move its head",
    "start": "2080199",
    "end": "2087039"
  },
  {
    "text": "into the left most cell in\nthe accept configuration. So there's just going to be a\nsingle accepting configuration",
    "start": "2087040",
    "end": "2092830"
  },
  {
    "text": "to worry about instead of having\nto try multiple possibilities, which you could do\nin this algorithm,",
    "start": "2092830",
    "end": "2099160"
  },
  {
    "text": "but it would just\nbe annoying to have to write that down that way. So we often assume\nthere's just going to be a single\naccepting configuration",
    "start": "2099160",
    "end": "2105882"
  },
  {
    "text": "for these machines. ",
    "start": "2105883",
    "end": "2114310"
  },
  {
    "text": "How do you know f of n? So that's actually a little\nbit of a delicate issue.",
    "start": "2114310",
    "end": "2122840"
  },
  {
    "text": "I mean, if you could\ncompute f of n, the bound, which is,\nfor example, if it's",
    "start": "2122840",
    "end": "2128470"
  },
  {
    "text": "going to be a polynomial bound,\nyou can just compute f of n. It's very easy to compute\nn squared or n cubed.",
    "start": "2128470",
    "end": "2135160"
  },
  {
    "text": "And so you can just\ncompute that and then use",
    "start": "2135160",
    "end": "2142210"
  },
  {
    "text": "that as the size\nof the registers you're going to be writing down.",
    "start": "2142210",
    "end": "2148720"
  },
  {
    "text": "If you want to prove this\nin general for f of n, it's a little bit technical\nto have to deal with it.",
    "start": "2148720",
    "end": "2154270"
  },
  {
    "text": "And I'm going to have to refer\nyou to the book on that one. The book tells you how solve\nthis for a general f of n.",
    "start": "2154270",
    "end": "2159819"
  },
  {
    "text": "You basically have to try\nevery possible value from one",
    "start": "2159820",
    "end": "2164950"
  },
  {
    "text": "until it works. And I'm afraid that's\ngoing to derail",
    "start": "2164950",
    "end": "2174310"
  },
  {
    "text": "us trying to decipher that. So let's not worry\nabout that aspect of it. But you can handle\ngeneral f of n here.",
    "start": "2174310",
    "end": "2183082"
  },
  {
    "text": "You don't need to put\nany conditions on f of n. ",
    "start": "2183082",
    "end": "2188850"
  },
  {
    "text": "Can we go over this term here? So we've seen this\nterm once before when",
    "start": "2188850",
    "end": "2195180"
  },
  {
    "text": "we talked about LBAs and\nseeing that LBAs always--",
    "start": "2195180",
    "end": "2200849"
  },
  {
    "text": "we can solve the ALBA problem. This is simply the number\nof different configurations the machine can have.",
    "start": "2200850",
    "end": "2208140"
  },
  {
    "text": "Because the\nconfiguration is a state. It's a head position and\na contents of the tape.",
    "start": "2208140",
    "end": "2213269"
  },
  {
    "text": "And this is the number\nof each of those that you can possibly have.",
    "start": "2213270",
    "end": "2218280"
  },
  {
    "text": "Number of states. A head position, the size of\nthe tape of f of n is f of n.",
    "start": "2218280",
    "end": "2225349"
  },
  {
    "text": "So this is that many\ndifferent head positions. And this is the number-- if d is the size of\nthe tape alphabet,",
    "start": "2225350",
    "end": "2232220"
  },
  {
    "text": "this is the number of tape\ncontents that you can have. ",
    "start": "2232220",
    "end": "2241450"
  },
  {
    "text": "How is seeing if n accepts\nw with this algorithm convert a\nnon-deterministic Turing",
    "start": "2241450",
    "end": "2246490"
  },
  {
    "text": "machine to some\ndeterministic Turing machine? Well, n is the\nnon-deterministic Turing.",
    "start": "2246490",
    "end": "2251559"
  },
  {
    "text": "So n is we're converting\nnon-deterministic Turing machine n to deterministic\nTuring machine m.",
    "start": "2251560",
    "end": "2260050"
  },
  {
    "text": "So m is a deterministic\nsimulator of n. That's what this whole m is.",
    "start": "2260050",
    "end": "2265260"
  },
  {
    "text": "So if we can do this for any n,\nthen we've proved our theorem.",
    "start": "2265260",
    "end": "2271020"
  },
  {
    "text": " Why don't we defer.",
    "start": "2271020",
    "end": "2278018"
  },
  {
    "text": "I think I got through most\nof the questions here. If there's other\nthings, we can save them for the coffee break,\nwhich is coming soon.",
    "start": "2278018",
    "end": "2286180"
  },
  {
    "text": "I think we have one\nmore slide before that. So I'm going to define\nPSPACE completeness I think.",
    "start": "2286180",
    "end": "2292640"
  },
  {
    "text": "Yeah. And then I think after\nthat we have the break.",
    "start": "2292640",
    "end": "2298010"
  },
  {
    "text": "So PSPACE completeness is\ndefined and very much inspired",
    "start": "2298010",
    "end": "2305040"
  },
  {
    "text": "similarly to NP completeness. So a problem is PSPACE\ncomplete if it's in NPSPACE",
    "start": "2305040",
    "end": "2313980"
  },
  {
    "text": "and every other member of\nPSPACE is reducible to it in polynomial time.",
    "start": "2313980",
    "end": "2320510"
  },
  {
    "text": "And we'll say a bit about\nwhy we choose polynomial time reducibility here.",
    "start": "2320510",
    "end": "2326970"
  },
  {
    "text": "So here's kind of a\npicture of how PSPACE-- how complete problems relate\nto their complexity classes.",
    "start": "2326970",
    "end": "2339940"
  },
  {
    "text": "So you kind of think of a\ncomplete problem for a class. It's kind of the hardest\nproblem in that class",
    "start": "2339940",
    "end": "2346420"
  },
  {
    "text": "because you can convert. You can reduce any other\nproblem in that class",
    "start": "2346420",
    "end": "2351430"
  },
  {
    "text": "to the complete problem. So here are the NP\ncomplete problems. Sort of the hardest for NP.",
    "start": "2351430",
    "end": "2357260"
  },
  {
    "text": "You have the PSPACE\ncomplete problems, kind of the hardest for PSPACE.",
    "start": "2357260",
    "end": "2363190"
  },
  {
    "text": "If an NP complete\nproblem goes into P, that pulls down all of NP to P.\nIf any PSPACE complete problem",
    "start": "2363190",
    "end": "2370600"
  },
  {
    "text": "goes into P, it pulls\ndown all the PSPACE into P by following the\nchain of reductions,",
    "start": "2370600",
    "end": "2375970"
  },
  {
    "text": "because any PSPACE\nproblem is reducible to the complete problem. Which in turn if it's in P,\nthen everything goes into P.",
    "start": "2375970",
    "end": "2382900"
  },
  {
    "text": "So if you have a PSPACE\ncomplete problem which is in P, then all the PSPACE goes into P.",
    "start": "2382900",
    "end": "2391620"
  },
  {
    "text": "So why do we use polynomial time\nreducibility instead of, say,",
    "start": "2391620",
    "end": "2397290"
  },
  {
    "text": "polynomial space reducibility\nwhen we define this notion?",
    "start": "2397290",
    "end": "2403530"
  },
  {
    "text": "It's kind of a very\nreasonable question. But if you think about it, using\npolynomial space reducibility",
    "start": "2403530",
    "end": "2409350"
  },
  {
    "text": "would be a terrible idea.  And we've seen this\nphenomenon happen before.",
    "start": "2409350",
    "end": "2417920"
  },
  {
    "text": "Every two problems\nin PSPACE are going to be PSPACE reducible\nto one another.",
    "start": "2417920",
    "end": "2423303"
  },
  {
    "text": "We haven't even defined\nthat notion yet, but you can imagine\nwhat it would be. Because a PSPACE reduction\ncan solve the problem",
    "start": "2423303",
    "end": "2432080"
  },
  {
    "text": "for a problem in PSPACE. And then it can direct its\nanswer anywhere that it likes.",
    "start": "2432080",
    "end": "2438049"
  },
  {
    "text": "So in general, when we\nthink about reductions, the reduction should be not\ncapable of solving the problems",
    "start": "2438050",
    "end": "2446330"
  },
  {
    "text": "in the class. Because if they could, then\nevery two problems in the class",
    "start": "2446330",
    "end": "2451940"
  },
  {
    "text": "would be reducible\nto one another. And then all\nproblems in the class would be complete, because\neverything in the class",
    "start": "2451940",
    "end": "2457890"
  },
  {
    "text": "would be reducible to any\none of the other problems. So it would not be an\ninteresting notion. What you want to have happen\nis that the reductions",
    "start": "2457890",
    "end": "2466760"
  },
  {
    "text": "should be weaker than\nthe power of the class. ",
    "start": "2466760",
    "end": "2477690"
  },
  {
    "text": "And if you look\nat the reductions that we've defined so far,\nthey're actually very simple.",
    "start": "2477690",
    "end": "2483720"
  },
  {
    "text": "The only thing is they\nhave to make sure that they can make the output big enough.",
    "start": "2483720",
    "end": "2489779"
  },
  {
    "text": "But actually\nconstructing the output, they're very simple\ntransformations. In fact, even polynomial time\nis more than you typically need.",
    "start": "2489780",
    "end": "2496590"
  },
  {
    "text": "There's even much\nmore limited classes that are capable of doing\nthe reductions, as we'll see.",
    "start": "2496590",
    "end": "2502450"
  },
  {
    "text": "So having powerful\nreductions is really not in the spirit of what\nreductions are all about. You want very, very\nsimple transformations",
    "start": "2502450",
    "end": "2511980"
  },
  {
    "text": "to be the reductions. Anyway, I hope that's helpful. So what we're going to be\naiming for in the second part",
    "start": "2511980",
    "end": "2518099"
  },
  {
    "text": "of the lecture is showing\nthat TQBF is PSPACE complete.",
    "start": "2518100",
    "end": "2523200"
  },
  {
    "text": "And let me-- here\nis the check in. ",
    "start": "2523200",
    "end": "2530019"
  },
  {
    "text": "So this is our first\ncheck in, coming a little late in the lecture. Suppose we have proven\nthat, as we will,",
    "start": "2530020",
    "end": "2537690"
  },
  {
    "text": "that TQBF is PSPACE complete. What can we conclude if TQBF is\nactually not necessarily in P,",
    "start": "2537690",
    "end": "2546289"
  },
  {
    "text": "only goes to NP? And this is relevant\nto a question that's coming in from the chat,\nbut I'll answer that later.",
    "start": "2546290",
    "end": "2553810"
  },
  {
    "text": "So suppose TQBF\nends up being an NP and not in P. What\ncan we conclude?",
    "start": "2553810",
    "end": "2560940"
  },
  {
    "text": "Remember, if TQBF\nis in P, then PSPACE",
    "start": "2560940",
    "end": "2566400"
  },
  {
    "text": "equals P. Suppose it goes to NP.",
    "start": "2566400",
    "end": "2571869"
  },
  {
    "text": "What happens then? There may be several\ncorrect answers here.",
    "start": "2571870",
    "end": "2577369"
  },
  {
    "text": " Check all that apply. ",
    "start": "2577370",
    "end": "2585270"
  },
  {
    "text": "All right, so we're near\nthe end of the poll.",
    "start": "2585270",
    "end": "2591930"
  },
  {
    "text": "So let me give you\nanother 10 seconds and then we're going\nto shut it down. ",
    "start": "2591930",
    "end": "2600510"
  },
  {
    "text": "OK, are we all in? Closing it down. ",
    "start": "2600510",
    "end": "2607520"
  },
  {
    "text": "Here are the results. So yes, so first of all, the\nmost reasonable solution,",
    "start": "2607520",
    "end": "2613910"
  },
  {
    "text": "most reasonable answer is\nb, which I think most of you have gotten.",
    "start": "2613910",
    "end": "2619700"
  },
  {
    "text": "That if a PSPACE complete\nproblem goes down to NP,",
    "start": "2619700",
    "end": "2625250"
  },
  {
    "text": "well, NP is capable of\nsimulating the polynomial time reduction.",
    "start": "2625250",
    "end": "2630380"
  },
  {
    "text": "And so any other\nproblem in PSPACE would then also be in NP.",
    "start": "2630380",
    "end": "2636710"
  },
  {
    "text": "And PSPACE would equal NP. But note if PSPACE\nequals NP, they're",
    "start": "2636710",
    "end": "2642050"
  },
  {
    "text": "also NP equals coNP,\nbecause PSPACE itself is",
    "start": "2642050",
    "end": "2648800"
  },
  {
    "text": "closed under complementation. So that was kind of a\nlittle bit extra fact",
    "start": "2648800",
    "end": "2654890"
  },
  {
    "text": "that you could conclude\nfrom this as well. So let's move on then\nto our coffee break,",
    "start": "2654890",
    "end": "2662420"
  },
  {
    "text": "and we'll pick up the proof\nthat TQBF is PSPACE complete",
    "start": "2662420",
    "end": "2668180"
  },
  {
    "text": "after that. ",
    "start": "2668180",
    "end": "2683859"
  },
  {
    "text": "So was d true or not? D was P equal NP. No, we cannot conclude that\nP equals NP from PSPACE equal",
    "start": "2683860",
    "end": "2697930"
  },
  {
    "text": "to NP. So if TQBF is in NP, it\ndoesn't tell us anything.",
    "start": "2697930",
    "end": "2705190"
  },
  {
    "text": "For all we know, P equals NP. But from the stuff\nthat we know so far,",
    "start": "2705190",
    "end": "2711710"
  },
  {
    "text": "we cannot conclude\nthat P equals NP. ",
    "start": "2711710",
    "end": "2717630"
  },
  {
    "text": "Oh, and yeah, so you can\nconclude-- oh, I'm sorry. B and d are both correct here.",
    "start": "2717630",
    "end": "2725190"
  },
  {
    "text": " Let me just shut this thing off. ",
    "start": "2725190",
    "end": "2732950"
  },
  {
    "text": "So b and d are correct. So if a PSPACE complete\nproblem goes to NP, then NP equals\nPSPACE, N equals coNP.",
    "start": "2732950",
    "end": "2741740"
  },
  {
    "text": "So the correct answer, b and d. Sorry. I got myself confused.",
    "start": "2741740",
    "end": "2747380"
  },
  {
    "text": "But c is not something\nyou can conclude or a. ",
    "start": "2747380",
    "end": "2755640"
  },
  {
    "text": "So somebody is asking\nme a fair question.",
    "start": "2755640",
    "end": "2760950"
  },
  {
    "text": "I say the reduction\nmethod should be weaker than the class.",
    "start": "2760950",
    "end": "2767400"
  },
  {
    "text": "But for example, even\nin the case of PSPACE, PSPACE might be\nequal to P. And then",
    "start": "2767400",
    "end": "2774030"
  },
  {
    "text": "it wouldn't be\nweaker than the class if we use polynomial\ntime reductions. But I think maybe I should\nsay apparently weaker.",
    "start": "2774030",
    "end": "2782880"
  },
  {
    "text": "As far as we know, it's weaker. But we believe it to be weaker. It's true if P equals PSPACE,\nthen every problem in P",
    "start": "2782880",
    "end": "2792059"
  },
  {
    "text": "is going to be PSPACE complete. It's just going to be a weird\nworld if P equals PSPACE. Same thing for NP and NP.",
    "start": "2792060",
    "end": "2800020"
  },
  {
    "text": "So I'm getting a\nnumber of questions also about other\npossible reducibilities",
    "start": "2800020",
    "end": "2805330"
  },
  {
    "text": "that are even weaker than\npolynomial time reducibility. So we're going to see\nvery soon weaker reduce--",
    "start": "2805330",
    "end": "2815789"
  },
  {
    "text": "complexity classes within\nP. So first of all, PSPACE seems to be bigger\nthan P. We're also",
    "start": "2815790",
    "end": "2821609"
  },
  {
    "text": "going to look at log space. But that's going to be\nactually in Thursday's lecture.",
    "start": "2821610",
    "end": "2827099"
  },
  {
    "text": "These are classes that\nseem to be inside. Well, they're\ninside P. We believe",
    "start": "2827100",
    "end": "2834120"
  },
  {
    "text": "they're properly inside P.\nBut we'll see that later. ",
    "start": "2834120",
    "end": "2840900"
  },
  {
    "text": "Let me just see here.  So we're almost out of time.",
    "start": "2840900",
    "end": "2848110"
  },
  {
    "text": "Let me put our timer back. In fact, our timer is\nshowing us out of time. So why don't we get going?",
    "start": "2848110",
    "end": "2859300"
  },
  {
    "text": "Let me move this back to-- ",
    "start": "2859300",
    "end": "2866830"
  },
  {
    "text": "OK. Continuing.  TQBF is PSPACE complete.",
    "start": "2866830",
    "end": "2872680"
  },
  {
    "text": "So first of all,\nlet's remember TQBF. ",
    "start": "2872680",
    "end": "2878330"
  },
  {
    "text": "These are all of the quantified\nBoolean formulas that are true. So TQBF stands for True\nQuantified Boolean Formulas.",
    "start": "2878330",
    "end": "2888005"
  },
  {
    "text": " And remember, we\nsaw these examples",
    "start": "2888005",
    "end": "2893940"
  },
  {
    "text": "from the previous lecture that\nthese are two quantified--",
    "start": "2893940",
    "end": "2902430"
  },
  {
    "text": "these are two QBFs. The first one is true. The second one is false. And it's going to be\ninteresting to think about.",
    "start": "2902430",
    "end": "2909150"
  },
  {
    "text": "Here they're exactly\nthe same except for the order of\nthe quantifiers. And so what's really\ngoing on here?",
    "start": "2909150",
    "end": "2917770"
  },
  {
    "text": "I think it's good to\nunderstand these expressions. They come up everywhere in\nmathematics, these quantifiers.",
    "start": "2917770",
    "end": "2927610"
  },
  {
    "text": "In the upper one, when\nwe say for every x, there exists a y, that y can\ndepend on the choice of x.",
    "start": "2927610",
    "end": "2937690"
  },
  {
    "text": "You choose to make\na different x. You're allowed to\npick a different y. But the lower expression\nsays there's a universal y.",
    "start": "2937690",
    "end": "2946810"
  },
  {
    "text": "There's one particular y\nthat works for every x.",
    "start": "2946810",
    "end": "2952080"
  },
  {
    "text": "So in a sense, the\nlower statement is a stronger statement.",
    "start": "2952080",
    "end": "2959130"
  },
  {
    "text": "Whatever you have in the\nquantifier free part. So the lower one\nimplies the upper one.",
    "start": "2959130",
    "end": "2965849"
  },
  {
    "text": "Happens that the lower\none in this case is false and the upper one is true. But in general, when\nyou have this change",
    "start": "2965850",
    "end": "2974070"
  },
  {
    "text": "of quantifiers like\nthis, the lower one would imply the upper one.",
    "start": "2974070",
    "end": "2980850"
  },
  {
    "text": "Anyway, that's sort\nof a side remark. So let's get back to the proof\nthat TQBF is PSPACE complete.",
    "start": "2980850",
    "end": "2987000"
  },
  {
    "text": "That's what our goal is. All right.",
    "start": "2987000",
    "end": "2992100"
  },
  {
    "text": "Now, as I mentioned,\nthis is the same proof. You're going to be seeing\nit for the third time today.",
    "start": "2992100",
    "end": "2998250"
  },
  {
    "text": "But there's a certain amount\nof-- it's sort of the context",
    "start": "2998250",
    "end": "3004780"
  },
  {
    "text": "changes in each case. So now we want to show that\nTQBF is PSPACE complete.",
    "start": "3004780",
    "end": "3011930"
  },
  {
    "text": "So it's one of these\nhardest problems now but for PSPACE,\nwhere satisfiability",
    "start": "3011930",
    "end": "3020060"
  },
  {
    "text": "was the hardest problem for NP. ",
    "start": "3020060",
    "end": "3025579"
  },
  {
    "text": "So we want to show that\nevery language in PSPACE",
    "start": "3025580",
    "end": "3030590"
  },
  {
    "text": "is reducible to TQBF. ",
    "start": "3030590",
    "end": "3035660"
  },
  {
    "text": "And so we're going to give\npolynomial time reductions that map some particular problem\na, which can be done in space n",
    "start": "3035660",
    "end": "3044030"
  },
  {
    "text": "to the k. It's a problem\nsolvable in PSPACE. We're going to show\nhow f maps a to TQBF.",
    "start": "3044030",
    "end": "3053119"
  },
  {
    "text": "We have to construct the f. So f is going to be a\nmapping that map strings",
    "start": "3053120",
    "end": "3059840"
  },
  {
    "text": "which may or may not be in a. So strings w, which may or may\nnot be in a, to these formulas,",
    "start": "3059840",
    "end": "3068270"
  },
  {
    "text": "these quantified formulas. So w is going to get mapped\nto some formula phi sub mw.",
    "start": "3068270",
    "end": "3077540"
  },
  {
    "text": "It had exactly the\nsame even symbols we used when the proof of\nthe Cook-Levin theorem about",
    "start": "3077540",
    "end": "3083600"
  },
  {
    "text": "SAT being NP complete. This is a very similar proof.",
    "start": "3083600",
    "end": "3089300"
  },
  {
    "text": "But you'll see that we have\nto do something more in order to make it work in this case. ",
    "start": "3089300",
    "end": "3097269"
  },
  {
    "text": "So w is in a if and only if this\nformula is going to be in TQBF.",
    "start": "3097270",
    "end": "3103890"
  },
  {
    "text": "In other words, if and only\nif this formula is true. ",
    "start": "3103890",
    "end": "3109840"
  },
  {
    "text": "So this formula is going\nto kind of express the fact that m accepts w,\nwhich means that w",
    "start": "3109840",
    "end": "3118050"
  },
  {
    "text": "is in a, because\nm is the machine, is the PSPACE machine for a.",
    "start": "3118050",
    "end": "3124470"
  },
  {
    "text": "So this formula\nsays m accepts w, and it achieves that by building\nin a simulation of m on w.",
    "start": "3124470",
    "end": "3137870"
  },
  {
    "text": "It kind of describes a\nsimulation for m on w which ends up accepting.",
    "start": "3137870",
    "end": "3143930"
  },
  {
    "text": "And if m does not accept\nw, that description is going to inevitably be false.",
    "start": "3143930",
    "end": "3151025"
  },
  {
    "text": " So let's just see what\nthat's going to look like.",
    "start": "3151025",
    "end": "3159010"
  },
  {
    "text": "So we're going to\nuse the same idea that we used for the\nCook-Levin theorem",
    "start": "3159010",
    "end": "3164730"
  },
  {
    "text": "that SAT is NP complete. This notion of a tableau. So if you remember,\nit was basically",
    "start": "3164730",
    "end": "3171270"
  },
  {
    "text": "a table which was just\nsimply a way of writing down",
    "start": "3171270",
    "end": "3176830"
  },
  {
    "text": "a computation\nhistory for m on w. So the rows are the\nsteps of the machine.",
    "start": "3176830",
    "end": "3186060"
  },
  {
    "text": "The top row is the\nstart configuration. The bottom row is, let's\nsay, some particular accept",
    "start": "3186060",
    "end": "3194150"
  },
  {
    "text": "configuration such as\nI just described where the machine clears its tapes and\nmoves its head to the left end.",
    "start": "3194150",
    "end": "3201349"
  },
  {
    "text": "So there's only one\naccepting configuration we have to worry about. ",
    "start": "3201350",
    "end": "3207700"
  },
  {
    "text": "And each of the rows here\nis a configuration of m. ",
    "start": "3207700",
    "end": "3217090"
  },
  {
    "text": "Because m runs in\nspace into the k, the tableau kind of similarly\nto what I described before",
    "start": "3217090",
    "end": "3223630"
  },
  {
    "text": "has width n to the k. So now we're talking about\npolynomial time machines.",
    "start": "3223630",
    "end": "3230569"
  },
  {
    "text": "So the f, which is the\nbound, the space bound, is going to be some\npolynomial n to the k.",
    "start": "3230570",
    "end": "3236500"
  },
  {
    "text": "So the width of this\ntableau, the size of these configurations\nare going to be n to the k.",
    "start": "3236500",
    "end": "3244420"
  },
  {
    "text": "How high is this\ntableau going to be? Well, that's going to be\nlimited by the possible running",
    "start": "3244420",
    "end": "3251050"
  },
  {
    "text": "time of the machine, which is\nsimilar to what we saw before.",
    "start": "3251050",
    "end": "3259330"
  },
  {
    "text": "It's going to be exponential\nin the space bound. So it's going to be d\nto the n to the k, where",
    "start": "3259330",
    "end": "3265530"
  },
  {
    "text": "d is essentially the tape\nalphabet of the machine. ",
    "start": "3265530",
    "end": "3272230"
  },
  {
    "text": "So are we all together on this? This is very similar to the\nproof of SAT is NP complete.",
    "start": "3272230",
    "end": "3283660"
  },
  {
    "text": "The key difference there\nwas m was non-deterministic,",
    "start": "3283660",
    "end": "3289473"
  },
  {
    "text": "which might be something\nto think about later. But let's not focus\non that right now. This m is deterministic.",
    "start": "3289473",
    "end": "3295380"
  },
  {
    "text": " But the important difference\nwas the shape of the tableau.",
    "start": "3295380",
    "end": "3301829"
  },
  {
    "text": "The size of the tableau\nwas very different. In the case of SAT\nis NP complete,",
    "start": "3301830",
    "end": "3307590"
  },
  {
    "text": "we started off with a polynomial\ntime non-deterministic machine. So it only could run for a\npolynomial number of steps.",
    "start": "3307590",
    "end": "3314460"
  },
  {
    "text": "Here is a polynomial\nspace machine, which can run for an\nexponential number of steps. That's going to be an\nimportant difference here.",
    "start": "3314460",
    "end": "3323940"
  },
  {
    "text": "So let's see why. ",
    "start": "3323940",
    "end": "3329320"
  },
  {
    "text": "The reduction has to\nconstruct this formula phi",
    "start": "3329320",
    "end": "3336705"
  },
  {
    "text": "sub of mw, which basically\nsays that this tableau exists.",
    "start": "3336705",
    "end": "3343990"
  },
  {
    "text": "Now, we already saw\nhow to do that when we proved the Cook-Levin\ntheorem that SAT is NP complete.",
    "start": "3343990",
    "end": "3352059"
  },
  {
    "text": "Remember, we had all of those. We had variables for each\ncell that told us what",
    "start": "3352060",
    "end": "3357100"
  },
  {
    "text": "the contents of that cell was. And then we had a\nlot of logic here. We had a bunch of\nlogic that said",
    "start": "3357100",
    "end": "3363430"
  },
  {
    "text": "that all those\nneighborhoods were correct, which basically says that\nthe tableau corresponds",
    "start": "3363430",
    "end": "3370420"
  },
  {
    "text": "to a correct computation\nof the machine.",
    "start": "3370420",
    "end": "3375549"
  },
  {
    "text": "So why don't we just\ndo the same thing? ",
    "start": "3375550",
    "end": "3381100"
  },
  {
    "text": "Why don't we just\nbuild our formula using exactly the\nsame process that we",
    "start": "3381100",
    "end": "3386800"
  },
  {
    "text": "used to build the formula when\nwe had SAT being NP complete?",
    "start": "3386800",
    "end": "3392860"
  },
  {
    "text": "Something goes wrong. We can't quite do that. The problem is that if\nyou remember the formula",
    "start": "3392860",
    "end": "3401470"
  },
  {
    "text": "that we built before was really\nabout as big as the tableau is.",
    "start": "3401470",
    "end": "3406800"
  },
  {
    "text": "Because it had some logic\nfor each one of the cells. It had a set of some\nof the variables",
    "start": "3406800",
    "end": "3412140"
  },
  {
    "text": "for each one of the cells\nand it had some logic for each of those\nneighborhoods, basically. So it says that each of the\ncells does the right thing.",
    "start": "3412140",
    "end": "3420660"
  },
  {
    "text": " So it was a pretty big formula,\nbut it was still polynomial.",
    "start": "3420660",
    "end": "3427300"
  },
  {
    "text": "The problem is that tableau is\nnow n to the k by d to the n to the k.",
    "start": "3427300",
    "end": "3433210"
  },
  {
    "text": "That's an exponentially\nbig object. ",
    "start": "3433210",
    "end": "3438230"
  },
  {
    "text": "So if your formula is going\nto be as big as the tableau, there's no way you can hope\nto produce that formula",
    "start": "3438230",
    "end": "3444849"
  },
  {
    "text": "in polynomial time. ",
    "start": "3444850",
    "end": "3451110"
  },
  {
    "text": "And that's the problem. The formula is\ngoing to be too big. Remember, we're trying\nto get a polynomial time",
    "start": "3451110",
    "end": "3458020"
  },
  {
    "text": "reduction from this language a. So we have an input\nto a, a string that",
    "start": "3458020",
    "end": "3464790"
  },
  {
    "text": "might be an a, which is\nsimulating the machine. And the size of the\ntableau relative to w",
    "start": "3464790",
    "end": "3473670"
  },
  {
    "text": "is going to be\nsomething enormous. And so the formula is\nas big as the tableau.",
    "start": "3473670",
    "end": "3478843"
  },
  {
    "text": "There's no way to produce that\nformula in polynomial time. So this is not going to work.",
    "start": "3478843",
    "end": "3485390"
  },
  {
    "text": "Let's try again. So now we have here-- ",
    "start": "3485390",
    "end": "3491260"
  },
  {
    "text": "now, so remember this notation\nfrom ci to cj in b steps. ",
    "start": "3491260",
    "end": "3499750"
  },
  {
    "text": "So we're going to give a general\nway of constructing formulas",
    "start": "3499750",
    "end": "3505470"
  },
  {
    "text": "which express this\nfact that I can get from configuration i of\nm to configuration j of m",
    "start": "3505470",
    "end": "3515280"
  },
  {
    "text": "in b steps. Whatever that b is. b is\ngoing to be some bound. And I want to know can I\nget from this configuration",
    "start": "3515280",
    "end": "3522890"
  },
  {
    "text": "to that configuration. And I want to write that\ndown as a formula, which is going to express that fact.",
    "start": "3522890",
    "end": "3527990"
  },
  {
    "text": "And it'll be either\ntrue or false.  And I'm going to give you\na recursive construction",
    "start": "3527990",
    "end": "3536170"
  },
  {
    "text": "for this formula. So I'm going to build\nthat formula for a value",
    "start": "3536170",
    "end": "3541810"
  },
  {
    "text": "b out of formulas for\nsmaller values of b.",
    "start": "3541810",
    "end": "3549390"
  },
  {
    "text": "So this is going to be\na way of constructing that formula in terms\nof other formulas that I'm going to build.",
    "start": "3549390",
    "end": "3555150"
  },
  {
    "text": "And there's going to be\na basis for the recursion when b equals 1. So that's the big picture.",
    "start": "3555150",
    "end": "3560900"
  },
  {
    "text": "So let's see how does\nthis formula look. ",
    "start": "3560900",
    "end": "3567110"
  },
  {
    "text": "So let's not worry about the\ncase for b equal 1 right now. This is the case for\nlarger values of b.",
    "start": "3567110",
    "end": "3575500"
  },
  {
    "text": "So the fact that I can get\nfrom ci to cj within b steps.",
    "start": "3575500",
    "end": "3582080"
  },
  {
    "text": "I'm going to write\nthis down in this way. And let's try to unpack that\nand see what it's saying.",
    "start": "3582080",
    "end": "3592400"
  },
  {
    "text": " Without worrying about how are\nwe going to carry this out,",
    "start": "3592400",
    "end": "3600340"
  },
  {
    "text": "let's just try to understand\nat a high level of semantics of this thing what it's\ntrying to say to you.",
    "start": "3600340",
    "end": "3605890"
  },
  {
    "text": "It's going to say, well, I can\nget from ci to cj in b steps. So m can get from\nci to cj in b steps.",
    "start": "3605890",
    "end": "3614750"
  },
  {
    "text": "If there is some\nother configuration c mid, some other\nconfiguration, I'm",
    "start": "3614750",
    "end": "3620860"
  },
  {
    "text": "calling it c mid, very much\ninspired by the previous proof",
    "start": "3620860",
    "end": "3627100"
  },
  {
    "text": "of Savitch's\ntheorem, where there was c mid was that\nintermediate configuration. So now instead of trying\nthem all, I'm saying",
    "start": "3627100",
    "end": "3633730"
  },
  {
    "text": "does there exist one\nwhere I can get from ci to c mid in half\nthe number of steps",
    "start": "3633730",
    "end": "3639480"
  },
  {
    "text": "and from c mid to cj in\nhalf the number of steps? ",
    "start": "3639480",
    "end": "3645220"
  },
  {
    "text": "So if I can build\nthese two formulas, then I can combine them with\nthis sort of extra stuff",
    "start": "3645220",
    "end": "3653520"
  },
  {
    "text": "out here, and them together,\nand put an exist quantifier that says, does there exist\nsome configuration, some way",
    "start": "3653520",
    "end": "3660810"
  },
  {
    "text": "to find a configuration\nsuch that it works as these formulas require?",
    "start": "3660810",
    "end": "3668410"
  },
  {
    "text": "If I can do that, then\nI'm going to be good. Because then I can--",
    "start": "3668410",
    "end": "3673809"
  },
  {
    "text": "well, good. At least I'll be good in\nterms of making something that is going to work.",
    "start": "3673810",
    "end": "3679160"
  },
  {
    "text": "So first of all,\nlet's understand what I mean by writing down\ndoes there exist c mid.",
    "start": "3679160",
    "end": "3684610"
  },
  {
    "text": "It's really if\nyou're thinking back to the way we did the\nCook-Levin theorem,",
    "start": "3684610",
    "end": "3690780"
  },
  {
    "text": "we represented\nthese configurations by variables which were\nindicator variables for each",
    "start": "3690780",
    "end": "3698040"
  },
  {
    "text": "of the cells. And we're going to do\nexactly the same thing. So we're going to have a\nbunch of Boolean variables which are going to represent\nsome configuration.",
    "start": "3698040",
    "end": "3707810"
  },
  {
    "text": "So more formally, or\nin more detail, what",
    "start": "3707810",
    "end": "3713000"
  },
  {
    "text": "this does, there\nexists a c mid, really is an assignment to all\nof those variables that",
    "start": "3713000",
    "end": "3718490"
  },
  {
    "text": "represent the contents of the\ncells of that configuration.",
    "start": "3718490",
    "end": "3726080"
  },
  {
    "text": "OK, so now let's see how to-- how will the recursion work?",
    "start": "3726080",
    "end": "3732440"
  },
  {
    "text": "So to get this value\nhere, I'm going to do the recursion further.",
    "start": "3732440",
    "end": "3739640"
  },
  {
    "text": "So does there exist a c mid? And now for getting\nfrom ci to this c mid,",
    "start": "3739640",
    "end": "3746869"
  },
  {
    "text": "is there some other c mid? This is like another value of\nw from the previous slide where",
    "start": "3746870",
    "end": "3752212"
  },
  {
    "text": "I'm getting, again, I'm cutting\nthe number of steps in half again. So going from b over 2\nsteps to b over 4 steps.",
    "start": "3752212",
    "end": "3758480"
  },
  {
    "text": "And I'm going to do the\nsame thing over here. So I'm just unraveling\nthe construction",
    "start": "3758480",
    "end": "3769920"
  },
  {
    "text": "of this formula in\nterms of building-- by building it up recursively.",
    "start": "3769920",
    "end": "3775859"
  },
  {
    "text": " And then I'm just going to keep\ndoing that until I get down",
    "start": "3775860",
    "end": "3783450"
  },
  {
    "text": "to the case where b equals 1.  And if I'm now trying to make\na formula that's going to be,",
    "start": "3783450",
    "end": "3792410"
  },
  {
    "text": "say I can get from ci to\ncj in just a single step. So this is really\ntalking about a tableau",
    "start": "3792410",
    "end": "3799510"
  },
  {
    "text": "of height 1 or height 2. Then I can just directly\nwrite that down the way",
    "start": "3799510",
    "end": "3806109"
  },
  {
    "text": "I-- now the tableau\nis not very big. So now I can write that\ndown using the neighborhoods and so on that I did in the\nCook-Levin theorem proof.",
    "start": "3806110",
    "end": "3813520"
  },
  {
    "text": " And this is how you\nput it all together.",
    "start": "3813520",
    "end": "3818600"
  },
  {
    "text": " And now if you want to\ntalk about the getting from",
    "start": "3818600",
    "end": "3829400"
  },
  {
    "text": "does m accept w. So I initially say, can I get\nfrom the start configuration",
    "start": "3829400",
    "end": "3834530"
  },
  {
    "text": "to the accept configuration\nin t steps, which is the maximum running\ntime of the machine? So again.",
    "start": "3834530",
    "end": "3840109"
  },
  {
    "text": "And if you followed me, what\nhappened in Savitch's theorem, it's the same values.",
    "start": "3840110",
    "end": "3846140"
  },
  {
    "text": " Now, the thing is we\nhave to understand how big this formula is.",
    "start": "3846140",
    "end": "3852490"
  },
  {
    "text": "And if you think it\nthrough, there's a problem.",
    "start": "3852490",
    "end": "3868950"
  },
  {
    "text": "Because what's going on here? I'm expressing this formula\nin terms of formulas",
    "start": "3868950",
    "end": "3874610"
  },
  {
    "text": "where the size of\nb is cut in half. But now there are two of them.",
    "start": "3874610",
    "end": "3881710"
  },
  {
    "text": "So it's two formulas\non half the value of b. That's not going to\nbe a recursion that's",
    "start": "3881710",
    "end": "3887460"
  },
  {
    "text": "going to work in our favor. So let's just see what happens. So each recursive level\ndoubles the number of formulas.",
    "start": "3887460",
    "end": "3899160"
  },
  {
    "text": "Here we have two formulas. Here we're going to have\nfour formulas and so on.",
    "start": "3899160",
    "end": "3905340"
  },
  {
    "text": "So the number of formulas\ndoubles each time. So the length of the thing\nthat we're writing down",
    "start": "3905340",
    "end": "3912080"
  },
  {
    "text": "is doubling in size each time\nwe go down the recursion. That's going to be OK if we\ndon't go too many levels.",
    "start": "3912080",
    "end": "3919068"
  },
  {
    "text": "But unfortunately, we are\ngoing quite a few levels, because the number\nof levels is going to be log of this initial\nexponential size thing.",
    "start": "3919068",
    "end": "3927120"
  },
  {
    "text": "So it's going to be\nn to the k levels. And so if you're doubling\nsomething n to the k times, you're going to end up with an\nexponentially sized formula.",
    "start": "3927120",
    "end": "3936150"
  },
  {
    "text": "And again, we failed. ",
    "start": "3936150",
    "end": "3943450"
  },
  {
    "text": "OK, so I have a\ncheck in on this. But maybe we should\nspend a couple of minutes just\ntrying to understand",
    "start": "3943450",
    "end": "3949900"
  },
  {
    "text": "what's going on here. Because the next slide\nis really my last slide,",
    "start": "3949900",
    "end": "3955030"
  },
  {
    "text": "and it's going to\nfix this problem. But let's make sure we\nunderstand what the problem is",
    "start": "3955030",
    "end": "3960700"
  },
  {
    "text": "before we try to fix it. ",
    "start": "3960700",
    "end": "3967260"
  },
  {
    "text": "Why can we no longer write over\neach layer of the recursion as we did in ladder? Oh, that's kind of\na cool question.",
    "start": "3967260",
    "end": "3972840"
  },
  {
    "text": "What does it even mean to write\nover the different-- well,",
    "start": "3972840",
    "end": "3980280"
  },
  {
    "text": "so that's kind of an\ninteresting question here. So in a sense, that's\ngoing to be the solution.",
    "start": "3980280",
    "end": "3987070"
  },
  {
    "text": "We're going to reuse\nthings in a certain way.",
    "start": "3987070",
    "end": "3995020"
  },
  {
    "text": "But I want you to understand\nthat this method itself",
    "start": "3995020",
    "end": "4002010"
  },
  {
    "text": "does not work, because\nthis recursion here where I'm writing the\nformula, I'm building",
    "start": "4002010",
    "end": "4007770"
  },
  {
    "text": "the formula for\nb out of formulas for smaller values of b.",
    "start": "4007770",
    "end": "4015000"
  },
  {
    "text": "If I do it that way,\nI'm going to end up-- if I do it as it's described\nin this procedure here,",
    "start": "4015000",
    "end": "4023310"
  },
  {
    "text": "I'm going to end up with an\nexponentially big formula. And that's not good enough.",
    "start": "4023310",
    "end": "4030109"
  },
  {
    "text": "So if you cut the formula\nin half each time, even though you\nhave two formulas, won't the length be the same?",
    "start": "4030110",
    "end": "4035855"
  },
  {
    "text": " I'm not cutting the\nformula in half. I'm cutting the\nvalue of b in half.",
    "start": "4035855",
    "end": "4042410"
  },
  {
    "text": " So you have to\nsay b is initially an exponentially big value.",
    "start": "4042410",
    "end": "4049150"
  },
  {
    "text": "So we're going to end up with\nan exponentially big formula. So it's not really cutting\nthe formula in half.",
    "start": "4049150",
    "end": "4055210"
  },
  {
    "text": "Cutting the b in half. b starts out big. I mean, b is initially\nthis value here,",
    "start": "4055210",
    "end": "4063320"
  },
  {
    "text": "d to the n to the k.  I'm worried. Not too many questions here.",
    "start": "4063320",
    "end": "4069157"
  },
  {
    "text": "I have a feeling that's\nprobably not a good sign. ",
    "start": "4069157",
    "end": "4077980"
  },
  {
    "text": "Well, I mean, if you're\nhopelessly confused, maybe I can't fix it quickly. So anyway, why don't we move\non and see how to repair this,",
    "start": "4077980",
    "end": "4088630"
  },
  {
    "text": "how to fix this problem.  And that is going\nto be by a trick.",
    "start": "4088630",
    "end": "4095530"
  },
  {
    "text": " In fact, I know the\npeople who were involved",
    "start": "4095530",
    "end": "4101147"
  },
  {
    "text": "with coming up with this. This was actually, this proof\nwas done originally at MIT",
    "start": "4101147",
    "end": "4107370"
  },
  {
    "text": "many years ago in the 1970s. And the folks who\nwere involved with it",
    "start": "4107370",
    "end": "4112710"
  },
  {
    "text": "called it the\nabbreviation trick. So that's what we're going\nto do on the next slide.",
    "start": "4112710",
    "end": "4118750"
  },
  {
    "text": "Oh no, there's a check in first. Why shouldn't we be surprised\nthat this construction fails?",
    "start": "4118750",
    "end": "4125369"
  },
  {
    "text": " A, well, we can't--",
    "start": "4125370",
    "end": "4131450"
  },
  {
    "text": "just the notion of defining\na quantified Boolean formula by using recursion\nis just not allowed.",
    "start": "4131450",
    "end": "4141710"
  },
  {
    "text": "So you can't define\nformulas that way. Doesn't use the for all\nquantifier anywhere.",
    "start": "4141710",
    "end": "4149318"
  },
  {
    "text": "Or because we know that TQBF is\nnot in P. You can see we do--",
    "start": "4149319",
    "end": "4156790"
  },
  {
    "text": "what do you think? Why should we not be surprised?",
    "start": "4156790",
    "end": "4164509"
  },
  {
    "text": "I guess I could have\nput a d in there. Not surprised because you\ndon't know what's going on.",
    "start": "4164510",
    "end": "4173710"
  },
  {
    "text": "That's another reason\nnot to be surprised. But anyway, hopefully\nyou have some glimmer",
    "start": "4173710",
    "end": "4180700"
  },
  {
    "text": "of what's happening here. And why don't we just-- almost finished.",
    "start": "4180700",
    "end": "4187068"
  },
  {
    "text": "So I'm going to shut\nthis down in a second. Last call. ",
    "start": "4187069",
    "end": "4194410"
  },
  {
    "text": "OK, ending. All right.",
    "start": "4194410",
    "end": "4199650"
  },
  {
    "text": "So in fact, the\nright answer is b. I mean, one should be suspicious\nthat if there's no for alls",
    "start": "4199650",
    "end": "4209280"
  },
  {
    "text": "appearing in this\nconstruction anywhere. So really what\nwe're doing is we're constructing a formula that\nhas only exist qualifiers.",
    "start": "4209280",
    "end": "4216550"
  },
  {
    "text": "So it's a\nsatisfiability problem. So really what we just\ndid was we constructed--",
    "start": "4216550",
    "end": "4222810"
  },
  {
    "text": "we did in a more complicated\nway the Cook-Levin construction,",
    "start": "4222810",
    "end": "4228360"
  },
  {
    "text": "because we end up\nwith a SAT formula only with exist quantifiers. And so really try one and\ntry two were the same.",
    "start": "4228360",
    "end": "4237576"
  },
  {
    "text": "So it's not surprising\nthat you end up with an exponentially\nbig formula as a result.",
    "start": "4237577",
    "end": "4244260"
  },
  {
    "text": "I don't know. A lot of you answered\nwe know that TQBF is in P. It's not in\nP. We don't know that.",
    "start": "4244260",
    "end": "4251100"
  },
  {
    "text": "I don't know where you-- what's happening with you guys?",
    "start": "4251100",
    "end": "4257280"
  },
  {
    "text": "But no. Maybe that was a protest vote. But anyway, we don't know that.",
    "start": "4257280",
    "end": "4264840"
  },
  {
    "text": "And what has that got to\ndo with anything anyway? So anyway, let's see. We solve this in our\nremaining few minutes here.",
    "start": "4264840",
    "end": "4273195"
  },
  {
    "start": "4273195",
    "end": "4280170"
  },
  {
    "text": "So here is the solution.  Remember, this part where we're\nsaying we're trying to find c",
    "start": "4280170",
    "end": "4288364"
  },
  {
    "text": "mid, does there\nexist a c mid such that I can get from ci to c\nmid in half the number of steps",
    "start": "4288365",
    "end": "4294260"
  },
  {
    "text": "and c mid to cj in half\nthe number of steps. I'm expressing one formula\nin terms of two formulas.",
    "start": "4294260",
    "end": "4301039"
  },
  {
    "text": "That's where the\nblow up is occurring. Because these two are then\nin terms are going to each--",
    "start": "4301040",
    "end": "4307130"
  },
  {
    "text": "so these two are going to\nbecome 4, become 8, and that's not good. Can I express this fact in\nterms of just one formula?",
    "start": "4307130",
    "end": "4314750"
  },
  {
    "text": "And this kind of a little bit in\nthe spirit of your suggestions. Can we kind of reuse\nthings in a way?",
    "start": "4314750",
    "end": "4320510"
  },
  {
    "text": "And that's what we're\nactually going to kind do. So here's another way\nof saying the same thing",
    "start": "4320510",
    "end": "4325909"
  },
  {
    "text": "but with just a single formula. And it uses a for all. And the idea behind\nit is that an and",
    "start": "4325910",
    "end": "4332750"
  },
  {
    "text": "is kind of like a for all. Or a for all is\nkind of like an and. Just like in exist as\nkind of like an or.",
    "start": "4332750",
    "end": "4339530"
  },
  {
    "text": "So when you're saying\ndoes something exist, is it this thing or that thing\nor that thing or that thing?",
    "start": "4339530",
    "end": "4345760"
  },
  {
    "text": "And when you're\nsaying for all, it has this thing and that thing\nand that thing and that thing.",
    "start": "4345760",
    "end": "4351570"
  },
  {
    "text": "Ands and for alls are\nvery much related. And so we're going to convert\nthis and into a for all.",
    "start": "4351570",
    "end": "4356950"
  },
  {
    "text": "We're going to say for all\nconfiguration cg and ch that",
    "start": "4356950",
    "end": "4362820"
  },
  {
    "text": "are either set to ci c mid or\nto c mid cj, the formula cg ch--",
    "start": "4362820",
    "end": "4370380"
  },
  {
    "text": "I can get from cg to ch in\nhalf the number of steps. So you have to think about\nwhat this is meaning here.",
    "start": "4370380",
    "end": "4375930"
  },
  {
    "text": " And I also want to\nmake sure that you don't feel I'm cheating you,\nbecause well, first of all,",
    "start": "4375930",
    "end": "4384630"
  },
  {
    "text": "so now we have just\na single formula. We're going to go down\nto the case b equals 1,",
    "start": "4384630",
    "end": "4390370"
  },
  {
    "text": "as we did before. You have to make sure that\nsaying this restricted for all",
    "start": "4390370",
    "end": "4397489"
  },
  {
    "text": "is not a cheat. When you have for all x is\nin s, like we have over here,",
    "start": "4397490",
    "end": "4403780"
  },
  {
    "text": "is equivalent to saying for\nall x if x happens to be in s, then the other thing follows.",
    "start": "4403780",
    "end": "4409510"
  },
  {
    "text": "And this implication can be\nexpressed using ands and ors.",
    "start": "4409510",
    "end": "4414960"
  },
  {
    "text": "And as before, the\ninitial starting point is going to be going from c\nstart to c accept in t steps.",
    "start": "4414960",
    "end": "4424870"
  },
  {
    "text": "And so the analysis\nthat we get is that because there's\nno longer a blow up,",
    "start": "4424870",
    "end": "4431699"
  },
  {
    "text": "each recursive level just\nadds this stuff here in front.",
    "start": "4431700",
    "end": "4439060"
  },
  {
    "text": "The exist c mid and\nthis for all part. So that's going to be adding\norder n to the formula instead",
    "start": "4439060",
    "end": "4448120"
  },
  {
    "text": "of multiplying because\nwe have two formulas. And now the total number of\nlevels is order n to the k,",
    "start": "4448120",
    "end": "4454810"
  },
  {
    "text": "as before. So the size is going to be n to\nthe k times n to the k order n",
    "start": "4454810",
    "end": "4461409"
  },
  {
    "text": "to the 2k. I actually I had a\nbrief check in here,",
    "start": "4461410",
    "end": "4466490"
  },
  {
    "text": "which I'd like you to do just\nin our remaining few seconds.",
    "start": "4466490",
    "end": "4471850"
  },
  {
    "text": "Does this construction depend\non m being deterministic? So let me just launch that.",
    "start": "4471850",
    "end": "4479380"
  },
  {
    "text": "I want you to guys to get\nyour check in credit here. But in fact, you have\nto think this through.",
    "start": "4479380",
    "end": "4493880"
  },
  {
    "text": "That formula says that the\ntableau, you get a tableau.",
    "start": "4493880",
    "end": "4499485"
  },
  {
    "text": "Is that going to\nmatter depending upon whether it's deterministic\nor non-deterministic? It's actually, well, it's\nkind of running 50/50 here.",
    "start": "4499485",
    "end": "4509840"
  },
  {
    "text": " Why don't you just\npick something? Because I'd like to just\nclose this out and just",
    "start": "4509840",
    "end": "4517220"
  },
  {
    "text": "get to our last slide. So if you don't\nfollow, don't worry. But it's actually an interesting\npoint that the fact that this--",
    "start": "4517220",
    "end": "4527270"
  },
  {
    "text": "so I'm going to end this. All in? ",
    "start": "4527270",
    "end": "4533750"
  },
  {
    "text": "So in fact, the right\nanswer is it still would work if it's non-deterministic.",
    "start": "4533750",
    "end": "4538790"
  },
  {
    "text": "And this would give\nyou an alternative way of proving Savitch's theorem. So really this all comes\ndown to this proof,",
    "start": "4538790",
    "end": "4546079"
  },
  {
    "text": "which implies Savitch's\ntheorem and then in turn implies the ladder DFA problem.",
    "start": "4546080",
    "end": "4552150"
  },
  {
    "text": "So anyway, that's side note,\nnot critical for understanding, really. You can take those as all\nseparate, the results,",
    "start": "4552150",
    "end": "4558530"
  },
  {
    "text": "and that's good enough. All right, so coming back.",
    "start": "4558530",
    "end": "4569369"
  },
  {
    "text": "Whoops. Coming back. ",
    "start": "4569370",
    "end": "4575650"
  },
  {
    "text": "This is what we did. And so each recursive\nlevel, the size of the QBF",
    "start": "4575650",
    "end": "4582310"
  },
  {
    "text": "is not the same. Somebody's asking is it the\nsame at each recursive level. No, we had to add in-- ",
    "start": "4582310",
    "end": "4593530"
  },
  {
    "text": "let's just see. Each recursion. ",
    "start": "4593530",
    "end": "4599094"
  },
  {
    "text": "This is recursively\nbuilt here, but now we have to add this part in front\nand this part here in front.",
    "start": "4599095",
    "end": "4606380"
  },
  {
    "text": "So the quantifier\nwhich is quantified over a bunch of\nvariables representing",
    "start": "4606380",
    "end": "4611710"
  },
  {
    "text": "the configuration, that\ngets added on at each level. So it's not just\nit stays the same.",
    "start": "4611710",
    "end": "4618373"
  },
  {
    "text": "There's stuff\nthat's get added in. But what's important is that it\ndoesn't blow up exponentially.",
    "start": "4618373",
    "end": "4625470"
  },
  {
    "text": "The stuff gets added in every\ntime but not multiplied. ",
    "start": "4625470",
    "end": "4634030"
  },
  {
    "text": "OK. So we're done here. So anybody, you\ncan all take off. I think many of\nyou already have.",
    "start": "4634030",
    "end": "4639690"
  },
  {
    "text": "Bye bye. Thank you. ",
    "start": "4639690",
    "end": "4655137"
  }
]