[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6060"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or to\nview additional materials",
    "start": "6060",
    "end": "12690"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "12690",
    "end": "25955"
  },
  {
    "text": "PROFESSOR: All right. So today we finish our\ngame characterization. We have this giant table.",
    "start": "25955",
    "end": "32310"
  },
  {
    "text": "We've done two players, zero\nplayers, one player, of course. That's the oldest.",
    "start": "32310",
    "end": "38260"
  },
  {
    "text": "Today we're going to do\nteam imperfect information games, which when you\nhave a polynomial bound",
    "start": "38260",
    "end": "43870"
  },
  {
    "text": "on the number of moves,\nyou get NEXPTIME-- nondeterministic\nexponential time. This is the exponential\nversion of NP.",
    "start": "43870",
    "end": "50730"
  },
  {
    "text": "And for games with unbounded\nnumber of moves-- normally, I would say exponentially\nmany moves, but, in fact,",
    "start": "50730",
    "end": "56660"
  },
  {
    "text": "this will be really\nunbounded, could be close to infinitely many\nmoves-- we get Undecidability,",
    "start": "56660",
    "end": "63550"
  },
  {
    "text": "so no algorithm,\nwhatsoever, to solve it. We don't know any natural\ngames in these classes.",
    "start": "63550",
    "end": "69140"
  },
  {
    "text": "But I have a couple of\nquestion marks here. Bridge is an example of a game\nwith imperfect information",
    "start": "69140",
    "end": "74670"
  },
  {
    "text": "and teams in one hand. And it has bounded play. Once you play your cards--\nall of the cards are down--",
    "start": "74670",
    "end": "80939"
  },
  {
    "text": "you're done. So potentially, it\nfalls in this class. Although, I don't know if\nBridge is sophisticated enough",
    "start": "80940",
    "end": "86340"
  },
  {
    "text": "or-- it depends on your\nnotion of the bidding rules and what can be\ncommunicated there.",
    "start": "86340",
    "end": "92799"
  },
  {
    "text": "On the other hand, for\nthe unbounded game, one candidate problem is\ncalled Rengo Kriegspiel.",
    "start": "92800",
    "end": "98630"
  },
  {
    "text": "Kriegspiel is blind chess. Rengo Kriegspiel is\nblind Go with teams.",
    "start": "98630",
    "end": "104040"
  },
  {
    "text": "So there are two black\nplayers, two white players. And you make moves\nwithout knowing what the other moves of\nany of the other players",
    "start": "104040",
    "end": "110400"
  },
  {
    "text": "are, usually by writing\non a piece of paper and giving it to some\nreferee who tells you whether that was valid.",
    "start": "110400",
    "end": "117390"
  },
  {
    "text": "This is a game\npeople actually play. And I'm told-- I know\nBob Hearn has played it.",
    "start": "117390",
    "end": "122770"
  },
  {
    "text": "He likes playing Go. But it's open, whether that\nproblem is Undecidable.",
    "start": "122770",
    "end": "128919"
  },
  {
    "text": "Potentially, yes. That seems more likely. And then finally, one other\ncell that we didn't do,",
    "start": "128919",
    "end": "135710"
  },
  {
    "text": "which I'll get to\nafter those two, is this box, which sounds\npretty boring because it's just",
    "start": "135710",
    "end": "142520"
  },
  {
    "text": "polynomial time things--\npolynomial bounded zero player games. It's just like Game of Life\nrunning for a polynomial amount",
    "start": "142520",
    "end": "150290"
  },
  {
    "text": "of time. You can generate-- I mean,\nyou can solve those problems in polynomial time.",
    "start": "150290",
    "end": "155476"
  },
  {
    "text": "But there's a stronger sense\nin which all polynomial time problems can be represented,\nsay, by Game of Life.",
    "start": "155476",
    "end": "160730"
  },
  {
    "text": "And this, actually, is\nrelevant to parallel computing. And it essentially says,\nthere's no good way",
    "start": "160730",
    "end": "166350"
  },
  {
    "text": "to parallelize Game of\nLife, among other problems. So I mentioned that way\nback in lecture one.",
    "start": "166350",
    "end": "172060"
  },
  {
    "text": "And a lot of people\nsaid, oh, what's this P-completeness business? And so today we will\ncover that, as well.",
    "start": "172061",
    "end": "177850"
  },
  {
    "text": "But let's start with\nNEXPTIME and Undecidability.",
    "start": "177850",
    "end": "182990"
  },
  {
    "text": "Let's start with a bounded case. ",
    "start": "182990",
    "end": "193069"
  },
  {
    "text": "So in the bounded case,\nthere's this cool paper by Peterson and\nReif, introducing",
    "start": "193070",
    "end": "198680"
  },
  {
    "text": "a problem variation of QSAT. ",
    "start": "198680",
    "end": "207190"
  },
  {
    "text": "Remember, QSAT,\nalso known as QBF. So this is DQBF. ",
    "start": "207190",
    "end": "213580"
  },
  {
    "text": "And it's a funny problem. First, I'll phrase it\nas a formula problem.",
    "start": "213580",
    "end": "220020"
  },
  {
    "text": "And then I'll talk\nabout it as a game. ",
    "start": "220020",
    "end": "238629"
  },
  {
    "text": "So normally, in QSAT QBF, we\nhave N alternating quantifiers. And that's PSACE complete.",
    "start": "238630",
    "end": "244910"
  },
  {
    "text": "And every quantifier can depend\non all of the previous values. But now we're going\nto have two sort",
    "start": "244910",
    "end": "250900"
  },
  {
    "text": "of in parallel\nexistential quantifiers. So we have two universal--\nI should mention the capital",
    "start": "250900",
    "end": "256170"
  },
  {
    "text": "letters. That's a bunch of variables. So there's like N bits\nhere, N bits here that has to work for all\nchoices of those.",
    "start": "256171",
    "end": "263256"
  },
  {
    "text": "Why do I separate them out? Because over here, I'm\ngoing to separate them out. And Y1-- the choice of Y1 is\nonly allowed to depend on X1.",
    "start": "263256",
    "end": "270669"
  },
  {
    "text": "And the choice of Y2 is only\nallowed to depend on X2. And then we're going\nto have some CNF",
    "start": "270670",
    "end": "276569"
  },
  {
    "text": "formula on the X1, X2, Y1, Y2. ",
    "start": "276570",
    "end": "287139"
  },
  {
    "text": "So we can think of that\nas this is one player.",
    "start": "287140",
    "end": "292480"
  },
  {
    "text": "It could be two players. But it doesn't really matter. So make it one-- simpler.",
    "start": "292480",
    "end": "297770"
  },
  {
    "text": "It's going to be a\nthree player game. Black makes these choices. And then white player\n1 chooses the Y1s.",
    "start": "297770",
    "end": "309400"
  },
  {
    "text": "And the private information\naspect of this game is that the white player one\ncan only see the X1 variables--",
    "start": "309400",
    "end": "316419"
  },
  {
    "text": "choices made by black. Maybe it's more\nintuitive to think of this as a four player game.",
    "start": "316420",
    "end": "321570"
  },
  {
    "text": "There are two black players. And the white 1 player\ncan see the values chosen by the black 1 player\nbut not the values",
    "start": "321570",
    "end": "327210"
  },
  {
    "text": "chosen by the black 2 player. And then, over here, we have\nwhite player two, who can only",
    "start": "327210",
    "end": "333860"
  },
  {
    "text": "see the variables chosen-- X2. Question? AUDIENCE: Does the black\nteam have full information?",
    "start": "333860",
    "end": "339319"
  },
  {
    "text": "PROFESSOR: Black team\nhas full information. I mean, the black\nteam goes first. So it doesn't,\nobviously, see Y1 and Y2.",
    "start": "339319",
    "end": "344514"
  },
  {
    "text": "But they can see each other. Yeah. So X2 can see X1. Yeah.",
    "start": "344514",
    "end": "349830"
  },
  {
    "text": "So if I don't write a\nparenthetical dependency, then it can depend\non everything.",
    "start": "349830",
    "end": "355630"
  },
  {
    "text": "Yeah. Really, this is one player. So they get to choose\neverything in the X [INAUDIBLE].",
    "start": "355630",
    "end": "361111"
  },
  {
    "text": "OK? So then the question\nis given this-- I mean, this quantified\nformula's equivalent to saying,",
    "start": "361111",
    "end": "368580"
  },
  {
    "text": "can white force a\nwin, where white wins",
    "start": "368580",
    "end": "376789"
  },
  {
    "text": "if that formula is satisfied? And white collectively\nneeds to make these choices.",
    "start": "376790",
    "end": "381830"
  },
  {
    "text": "But it's acting as a team\nwith impartial information. So it's not acting\nas a single player anymore, unlike when we\nhad full information.",
    "start": "381830",
    "end": "389150"
  },
  {
    "text": "Then three players\nwas the same as two. OK? So let's first observe\nthat this is in NEXPTIME.",
    "start": "389150",
    "end": "397210"
  },
  {
    "text": "And then, furthermore, the\nclaim, which I won't prove, is that this is\nNEXPTIME complete.",
    "start": "397210",
    "end": "403820"
  },
  {
    "text": "So the idea is there are only\nexponentially many choices for these variables.",
    "start": "403820",
    "end": "410240"
  },
  {
    "text": "So then I can guess--\nboth player 1 and player 2 can guess what--\nwhite 1 and white 2",
    "start": "410240",
    "end": "416979"
  },
  {
    "text": "can guess what the possibilities\nare for all possible choices of X1 and X2.",
    "start": "416980",
    "end": "422090"
  },
  {
    "text": "So they're making\nexponentially many guesses. For every state of X1, X2, guess\nwhat the right strategy is.",
    "start": "422090",
    "end": "429290"
  },
  {
    "text": "And then just combine--\nthen check whether everyone plays properly.",
    "start": "429290",
    "end": "436070"
  },
  {
    "text": "So then white can decide\nwhether they can win. ",
    "start": "436070",
    "end": "442280"
  },
  {
    "text": "That's cool.  This can be reduced to a bounded\nteam, private information",
    "start": "442280",
    "end": "451550"
  },
  {
    "text": "version of constraint\nlogic-- TPCL. Let me define that.",
    "start": "451550",
    "end": "457050"
  },
  {
    "start": "457050",
    "end": "466150"
  },
  {
    "text": "We're going to do this\nwith three players",
    "start": "466150",
    "end": "473160"
  },
  {
    "text": "And a plane or a graph.  I think just and/or\ngraph is enough.",
    "start": "473160",
    "end": "481110"
  },
  {
    "text": "But it's a team. There are going to be,\nagain, two white players, one black player.",
    "start": "481110",
    "end": "486949"
  },
  {
    "text": "And it's private\ninformation, meaning that each edge is marked\nas visible to white",
    "start": "486950",
    "end": "493430"
  },
  {
    "text": "or visible to black. Now, the figures-- it's\na little hard to draw. So the figures--\nthe color is just indicating whether that player\nis allowed to flip that edge.",
    "start": "493430",
    "end": "501430"
  },
  {
    "text": "Each player can only flip--\neach white player can only flip white edges. Black player can only flip\nblack edges, just like before.",
    "start": "501430",
    "end": "507880"
  },
  {
    "text": "Well, now it's\nwhite team can only flip-- either of\nthe white players can only flip a white edge.",
    "start": "507880",
    "end": "514500"
  },
  {
    "text": "So some edges are\nflippable by two players. But then, in addition, some\nedges-- some white edges",
    "start": "514500",
    "end": "520890"
  },
  {
    "text": "are going to be marked\nas invisible to black. And some black edges\nare going to be marked as invisible to white. And furthermore, you can say\ninvisible to this white player",
    "start": "520890",
    "end": "527959"
  },
  {
    "text": "or this white player. OK? So it's a little\nbit more general. And the rules of the\ngame are pretty simple.",
    "start": "527960",
    "end": "534630"
  },
  {
    "text": "You can make moves\njust like before. But you must be able to know\nthat that move is legal.",
    "start": "534630",
    "end": "542350"
  },
  {
    "start": "542350",
    "end": "547660"
  },
  {
    "text": "So unlike Rengo\nKriegspiel, you're not allowed to make\nimpossible moves. ",
    "start": "547660",
    "end": "555920"
  },
  {
    "text": "You must know, based on the\ninformation that you can see, that the movie is valid.",
    "start": "555920",
    "end": "562794"
  },
  {
    "text": "There are probably other\nvariations that work. But this is a clean\none to work with. So if you can see\nall of the edges,",
    "start": "562794",
    "end": "569240"
  },
  {
    "text": "or you see that there's enough\nincoming white to an edge, then you can reverse one of\nthe ones you have control over. ",
    "start": "569240",
    "end": "575949"
  },
  {
    "text": "So this problem-- I mean,\nso a funny thing about DQBF is that there's sort of\nonly one round to the game--",
    "start": "575950",
    "end": "582920"
  },
  {
    "text": "I mean, black plays,\nwhite plays, white plays, and then you see who won--\nwhereas most games we think",
    "start": "582920",
    "end": "589260"
  },
  {
    "text": "of as having many rounds. And in particular, bounded\nTPCL has many rounds.",
    "start": "589260",
    "end": "594420"
  },
  {
    "text": "They play in round robin. You've got black, white 1, white\n2, black, white 1, white two. And you play in that\nsequence, over and over.",
    "start": "594420",
    "end": "599914"
  },
  {
    "text": "Each turn, someone's just\nreversing a single edge, whereas over here, you're\nchoosing a ton of variables.",
    "start": "599914",
    "end": "605720"
  },
  {
    "text": "Turns out this problem\nis also in NEXPTIME, essentially because if there is\na winning strategy for white,",
    "start": "605720",
    "end": "617330"
  },
  {
    "text": "over here, that winning\nstrategy is deterministic. And it's just a function\nof the visible state.",
    "start": "617330",
    "end": "624910"
  },
  {
    "text": "And there are at most\nN different edges that you can see. So the number of possible\nstates is exponential.",
    "start": "624910",
    "end": "631160"
  },
  {
    "text": "So at the beginning, you\njust guess your strategy. That's exponentially\nmany bits to guess.",
    "start": "631160",
    "end": "638050"
  },
  {
    "text": "So in NEXPTIME, you can do that. And then you just play\ndeterministically, with that strategy.",
    "start": "638050",
    "end": "643080"
  },
  {
    "text": "So even though the game may\nrun for a very long time, and you do many,\nmany rounds, still, the information you need to\nguess was only exponential.",
    "start": "643080",
    "end": "649685"
  },
  {
    "text": "So you can do this in NEXPTIME. So it's a funny thing here. In this particular\nworld, unlike all",
    "start": "649685",
    "end": "655450"
  },
  {
    "text": "of the other cells\nof that matrix, one round versus many\nrounds is the same.",
    "start": "655450",
    "end": "662250"
  },
  {
    "text": "You get NEXPTIME\ncompleteness in both cases. OK. So let me tell you how we reduce\nfrom DQBF to bounded TPCL.",
    "start": "662250",
    "end": "672842"
  },
  {
    "text": "So many acronyms.  So the idea's pretty simple.",
    "start": "672842",
    "end": "681580"
  },
  {
    "text": "Again, we want\nblack to play first. So there's a bunch of\nblack variables, here,",
    "start": "681580",
    "end": "687690"
  },
  {
    "text": "which are represented by this. These two figures\nare almost the same. Just these edges are blacked\ndown here and white down here.",
    "start": "687690",
    "end": "695090"
  },
  {
    "text": "That's going to correspond\nto the variable setting. In this context, we only want\nvariables to be set once.",
    "start": "695090",
    "end": "700650"
  },
  {
    "text": "You don't get to reset them\nbecause it's a bounded game. As in all of the bounded\nconstraint logic games,",
    "start": "700650",
    "end": "707009"
  },
  {
    "text": "you can only flip\neach edge once. Question? AUDIENCE: It's kind of a\nquestion about your earlier point, but could you\nclarify the difference",
    "start": "707010",
    "end": "712492"
  },
  {
    "text": "between why having one\nround of one of the games is equivalent to having\nall-around [INAUDIBLE] game?",
    "start": "712492",
    "end": "719869"
  },
  {
    "text": "PROFESSOR: I don't have\nan intuitive reason why-- only that this game\nis in NEXPTIME and this game",
    "start": "719869",
    "end": "726709"
  },
  {
    "text": "is NEXPTIME complete. I mean, they both are\nNEXPTIME complete. So in that sense,\nthey're equivalent.",
    "start": "726710",
    "end": "732970"
  },
  {
    "text": "Yeah. So we're going to\nsimulate this one round game with multiple\nrounds, over here.",
    "start": "732970",
    "end": "739440"
  },
  {
    "text": "But yeah. It's a little bit odd that\nalternation doesn't help. It doesn't give you more power.",
    "start": "739440",
    "end": "744580"
  },
  {
    "text": "All of the other game\nsettings that it does. So it's just a weird\nthing about team.",
    "start": "744580",
    "end": "749600"
  },
  {
    "text": "Yeah. AUDIENCE: So are you [INAUDIBLE]\nkind of rely on the fact",
    "start": "749600",
    "end": "754691"
  },
  {
    "text": "that white doesn't learn\nanything from black's moves when black moves on\nan invisible edge? Sorry.",
    "start": "754692",
    "end": "759790"
  },
  {
    "text": "It seems like in some\nboard configurations, if black moves on\nan invisible edge, you can actually\nlearn something based on what moves were allowed,\nand not allowed, for black.",
    "start": "759790",
    "end": "768211"
  },
  {
    "text": "PROFESSOR: Maybe I\nshould say that passing is allowed in this game. Otherwise, the fact that you\nmoved does tell you something.",
    "start": "768211",
    "end": "775249"
  },
  {
    "text": "But if you're always\nallowed to pass, you really have no idea\nwhether something happened, except by what was visible.",
    "start": "775249",
    "end": "780501"
  },
  {
    "text": "Yeah. So that's-- make explicit,\npassing is allowed. ",
    "start": "780501",
    "end": "789040"
  },
  {
    "text": "Yeah, these are a bit subtle. OK. So the intent is, first, we\nlet black choose variables,",
    "start": "789040",
    "end": "796880"
  },
  {
    "text": "either by flipping true edge,\nflipping the false edge. We want to set it up\nso you can't do-- well, you can't do both because\nof this vertex constraint.",
    "start": "796880",
    "end": "803925"
  },
  {
    "text": "So that's cool. As soon as that\nhappens, probably, white will flip this edge and\nblack will flip this edge.",
    "start": "803925",
    "end": "811500"
  },
  {
    "text": "That's a split, activating--\nwell, not yet activating the formula part, but enabling\nblack to activate the chosen",
    "start": "811500",
    "end": "820460"
  },
  {
    "text": "edge, saying that this\nvariable has been chosen. And so black will\nsort of output that.",
    "start": "820460",
    "end": "827470"
  },
  {
    "text": "Then in here, so there's\nn such variables. And B1 and B2 are both in here.",
    "start": "827470",
    "end": "833730"
  },
  {
    "text": "And we take the and of\nall of those chosen edges. And that's this chosen wire.",
    "start": "833730",
    "end": "839770"
  },
  {
    "text": "So this-- black is\nmotivated to do this. Black wants to set\ntheir variable some way.",
    "start": "839770",
    "end": "844940"
  },
  {
    "text": "And they could, I\nguess, set them back and change the variables. But there won't be any\nmotivation to do that.",
    "start": "844940",
    "end": "850149"
  },
  {
    "text": "The goal for black is\nto flip this edge, which is connected by a long path from\nthe AND of all of the chosen",
    "start": "850150",
    "end": "855540"
  },
  {
    "text": "wires. So basically, B has to\nchoose all of the variables, get this AND to be true,\nand then just sit there,",
    "start": "855540",
    "end": "861350"
  },
  {
    "text": "flipping these edges,\nuntil this edge is flipped. So that's a threat line, once\nB has set their variables.",
    "start": "861350",
    "end": "868270"
  },
  {
    "text": "So B is going to\nrace to do that. White is going to have\njust enough time to satisfy the formula and flip this\nedge if the formula was true,",
    "start": "868270",
    "end": "876740"
  },
  {
    "text": "obviously. So what happens next--\nwhite will basically",
    "start": "876740",
    "end": "882690"
  },
  {
    "text": "sit there and\ntwiddle their thumbs, flipping some useless\nedge, until all",
    "start": "882690",
    "end": "890026"
  },
  {
    "text": "of the black variables are set. They could actually\ndo something else. But there's going to\nbe enough time to wait.",
    "start": "890026",
    "end": "895130"
  },
  {
    "text": "So it's better to wait. Then the white variables can\ndepend on the black variables",
    "start": "895130",
    "end": "901410"
  },
  {
    "text": "that it can see. Obviously, pretty much\nall of the edges in here",
    "start": "901410",
    "end": "907840"
  },
  {
    "text": "are visible to only one\nof the white players. If this is a B1\nvariable, then this",
    "start": "907840",
    "end": "913480"
  },
  {
    "text": "is only visible the white 1. White 1 can see\nthat it was chosen but can't see which\nof these edges",
    "start": "913480",
    "end": "919250"
  },
  {
    "text": "got flipped and can't\nsee which of these edges got flipped or these ones.",
    "start": "919250",
    "end": "924459"
  },
  {
    "text": "OK? So that's representing\nthe visibility. And so then white will\nset their variables,",
    "start": "924460",
    "end": "930410"
  },
  {
    "text": "the same kind of construction. And once chosen is\nactivated for both of them,",
    "start": "930410",
    "end": "938639"
  },
  {
    "text": "we take the AND here, and\nwe trigger the unlock paths. It's going to unlock the white\n1, unlock the white 2, unlock",
    "start": "938640",
    "end": "947110"
  },
  {
    "text": "all of the black variables. And the unlock part is what\nlets you trigger the formula",
    "start": "947110",
    "end": "955190"
  },
  {
    "text": "activation. So if true was selected\nhere, and this was flipped,",
    "start": "955190",
    "end": "960490"
  },
  {
    "text": "once the unlock is\nflipped, then this guy can activate and start inputting\nall of the true variables",
    "start": "960490",
    "end": "965560"
  },
  {
    "text": "into the formula. And then white will sit there\nand evaluate the formula. It has just enough time, if it's\nsatisfied, to flip and be done.",
    "start": "965560",
    "end": "974350"
  },
  {
    "text": "So that's how we\nrepresent dependency QBF. I mean, it's pretty natural.",
    "start": "974350",
    "end": "979800"
  },
  {
    "text": "It's just some fun stuff\nto get these to happen in essentially two rounds.",
    "start": "979800",
    "end": "985050"
  },
  {
    "text": "The visibility constraints of\nthe partial-- the privateness of visible information\nmakes this part really easy",
    "start": "985050",
    "end": "991669"
  },
  {
    "text": "to implement. So no big surprises. Questions?",
    "start": "991669",
    "end": "997474"
  },
  {
    "text": "OK. Let's go to the\nunbounded case, which is the much more exciting one.",
    "start": "997474",
    "end": "1002820"
  },
  {
    "start": "1002820",
    "end": "1008520"
  },
  {
    "text": "So I mean, Undecidability\nis weird and unusual. It's weird in this\ncontext because this game",
    "start": "1008520",
    "end": "1016410"
  },
  {
    "text": "has finite resources. All of our games--\nin particular, in constraint logic-- you\nhave some graph of size n.",
    "start": "1016410",
    "end": "1023690"
  },
  {
    "text": "And Undecidability is\nabout, essentially, simulating a Turing machine\nfor arbitrary amounts of time",
    "start": "1023690",
    "end": "1030764"
  },
  {
    "text": "and arbitrary amounts of space.  It's bigger than 2 to the n.",
    "start": "1030764",
    "end": "1036020"
  },
  {
    "text": "It's bigger than\n2 to 2 to the n. It's bigger than 2 tower. And it's bigger than\nany-- I guess, it's",
    "start": "1036020",
    "end": "1041500"
  },
  {
    "text": "any computable function of\nn is how far you have to go. So a little bit less\nthan busy beaver. ",
    "start": "1041500",
    "end": "1048710"
  },
  {
    "text": "That's a lot of space. So in game graph,\nwe can't represent",
    "start": "1048710",
    "end": "1055179"
  },
  {
    "text": "the state of the machine that\nwe're trying to simulate. So I should say-- we haven't\ndone Undecidability at all,",
    "start": "1055179",
    "end": "1063520"
  },
  {
    "text": "but the canonical\nproblem to start from",
    "start": "1063520",
    "end": "1068850"
  },
  {
    "text": "is a halting problem. You're given a Turing machine. And here, I'd like\nto say algorithm,",
    "start": "1068850",
    "end": "1075490"
  },
  {
    "text": "but we need some model\nof the machine growing to arbitrarily large sizes. And this Turing machine\nis really ideal for this.",
    "start": "1075490",
    "end": "1083770"
  },
  {
    "text": "Given the Turing machine,\ndoes it ever halt? ",
    "start": "1083770",
    "end": "1092040"
  },
  {
    "text": "So remember, a Turing\nmachine, you have some tape. Let's say, initially, all of\nthe tape squares are empty.",
    "start": "1092040",
    "end": "1099770"
  },
  {
    "text": "You have some pointer\ninto the tape, starts at some canonical position. And you can read and\nwrite squares in the tape.",
    "start": "1099770",
    "end": "1108010"
  },
  {
    "text": "And you can move left and right. And that's it. The feeling, as this\ncorresponds-- this",
    "start": "1108010",
    "end": "1114480"
  },
  {
    "text": "includes all\npossible computation. And so deciding whether\nthis machine will ever",
    "start": "1114480",
    "end": "1119847"
  },
  {
    "text": "finish-- so there's an\ninstruction that just says, halt-- or whether to just\nkeep going on forever seems--",
    "start": "1119847",
    "end": "1127750"
  },
  {
    "text": "is provably impossible. There is no algorithm\nto decide that, essentially because it's an\nalgorithm to study algorithms.",
    "start": "1127750",
    "end": "1133890"
  },
  {
    "text": "But I won't prove that here. I'm going to reduce\nfrom this problem. And so I need to be able to\nsimulate a Turing machine",
    "start": "1133890",
    "end": "1140325"
  },
  {
    "text": "of arbitrary size and time. ",
    "start": "1140325",
    "end": "1145549"
  },
  {
    "text": "Cool. So while most of the time\nI don't show you the source",
    "start": "1145550",
    "end": "1151480"
  },
  {
    "text": "problem, I think, here, it's\ninstructive to see-- well, I guess I'm not proving\nthis as undecidable.",
    "start": "1151480",
    "end": "1156800"
  },
  {
    "text": "But it's instructive to see\nhow we turn this into a game, with bounded resources.",
    "start": "1156800",
    "end": "1161850"
  },
  {
    "text": "So before I get to the\nconstrain logic version, I'm going to talk about\nsomething called a team",
    "start": "1161850",
    "end": "1167659"
  },
  {
    "text": "computation game-- this is\nfrom our book, Games, Puzzles,",
    "start": "1167660",
    "end": "1177670"
  },
  {
    "text": "Computation-- that will allow\nus to simulate the halting",
    "start": "1177670",
    "end": "1183260"
  },
  {
    "text": "problem, but using\nfinite resources. This is where the action is. Going from here to\na constrain logic is not that hard and\nnot super interesting.",
    "start": "1183260",
    "end": "1191770"
  },
  {
    "text": "But this part is\nquite interesting. ",
    "start": "1191770",
    "end": "1197100"
  },
  {
    "text": "OK. So in team computation\ngame, there's going to be three players--\none black player, two",
    "start": "1197100",
    "end": "1203000"
  },
  {
    "text": "white players. And the instance to the game--\nsort of the board set up,",
    "start": "1203000",
    "end": "1209900"
  },
  {
    "text": "whatever-- is\ngoing to be-- here,",
    "start": "1209900",
    "end": "1216740"
  },
  {
    "text": "I could use any algorithm\nor Turing machine. It's going to be machine. And it has some\nspace bound which",
    "start": "1216740",
    "end": "1225320"
  },
  {
    "text": "are called k. k is going to\nbe, essentially, a constant. But it's part of the input. ",
    "start": "1225320",
    "end": "1232560"
  },
  {
    "text": "And the idea-- if\nthis is an algorithm, it starts with blank memory. If it's a Turing machine,\nit starts with a blank tape.",
    "start": "1232560",
    "end": "1239350"
  },
  {
    "text": "And then we're going to define\nblack moves and white moves. ",
    "start": "1239350",
    "end": "1245370"
  },
  {
    "text": "So remember, there's\none black player. And what the black player does,\nor what the black player's",
    "start": "1245370",
    "end": "1253400"
  },
  {
    "text": "forced to do, is run the\nalgorithm or the machine for k time steps.",
    "start": "1253400",
    "end": "1260080"
  },
  {
    "text": " So k obviously is an input.",
    "start": "1260080",
    "end": "1266990"
  },
  {
    "text": "So black is forced to do that. Now, that algorithm\nmay return an answer.",
    "start": "1266990",
    "end": "1273310"
  },
  {
    "text": "And the answer is always\nblack wins or white wins. Or it may not do\nanything, in which case",
    "start": "1273310",
    "end": "1278489"
  },
  {
    "text": "it wants to keep running. In the next black\nmove, it's going to run for another k steps. And in the next black moves,\nit runs for another k steps,",
    "start": "1278489",
    "end": "1284850"
  },
  {
    "text": "and so on. Think of k as a constant.  So if there's output from\nthis algorithm or machine,",
    "start": "1284850",
    "end": "1297339"
  },
  {
    "text": "that will determine the winner. ",
    "start": "1297339",
    "end": "1305550"
  },
  {
    "text": "OK? And otherwise, black actually\ngets to make a choice.",
    "start": "1305550",
    "end": "1310690"
  },
  {
    "text": "This was completely forced,\nwhat black had to do here. You could think of it\nas part of black's move. But it's really-- the game\nmechanics make this happen.",
    "start": "1310690",
    "end": "1319680"
  },
  {
    "text": "And in this case, black can\nset two variables-- X1 and X2--",
    "start": "1319680",
    "end": "1325570"
  },
  {
    "text": "to be anything in\nthe set A, B. OK?",
    "start": "1325570",
    "end": "1330960"
  },
  {
    "text": "Black gets to choose two\nbits if the machine doesn't say that the game is over.",
    "start": "1330960",
    "end": "1336390"
  },
  {
    "text": "OK? We'll see what those\nbits do, in a moment. ",
    "start": "1336390",
    "end": "1343960"
  },
  {
    "text": "So that was black's move. Now, what about white?",
    "start": "1343960",
    "end": "1349070"
  },
  {
    "text": "Again, there are two\nplayers-- white 1 and white 2. And white i is basically blind.",
    "start": "1349070",
    "end": "1358870"
  },
  {
    "text": "White i can only see Xi. These Xis are messages\nto the white players.",
    "start": "1358870",
    "end": "1364504"
  },
  {
    "text": "And that's all\nthat white can see. White can't see anything\nelse about the machine. Good that it knows what\nthe machine is, knows what",
    "start": "1364504",
    "end": "1371350"
  },
  {
    "text": "it's doing, probably knows k. But that's because that's\nall part of the instance. But you don't know anything else\nabout the state of the machine.",
    "start": "1371350",
    "end": "1379540"
  },
  {
    "text": "And white can also\ndo one other thing. ",
    "start": "1379540",
    "end": "1387770"
  },
  {
    "text": "There's one memory cell\nin the machine, called M1. And there's another\none called M2.",
    "start": "1387770",
    "end": "1392940"
  },
  {
    "text": "And player white i can set Mi.",
    "start": "1392940",
    "end": "1398230"
  },
  {
    "text": "And so that will\ncommunicate, back into the machine,\nwhat white i did.",
    "start": "1398230",
    "end": "1403550"
  },
  {
    "text": "And that is exactly\nthe move of white i. White i move is just set Mi.",
    "start": "1403550",
    "end": "1413190"
  },
  {
    "text": "And I'm not specifying\nhow big that is. It's not just a single bit. It could be some stuff.",
    "start": "1413190",
    "end": "1422269"
  },
  {
    "text": "In particular, it's going to be\none cell in the Turing machine we want to simulate,\nessentially.",
    "start": "1422270",
    "end": "1428490"
  },
  {
    "text": "But OK. So now the question is, does\nwhite have a forced win?",
    "start": "1428490",
    "end": "1433860"
  },
  {
    "start": "1433860",
    "end": "1439020"
  },
  {
    "text": "So this is the problem I\nwant to prove undecidable by a reduction from\nhalting problem.",
    "start": "1439020",
    "end": "1445809"
  },
  {
    "text": " OK. ",
    "start": "1445810",
    "end": "1462910"
  },
  {
    "text": "So is the problem clear? We have a finite setup, which\nis this space k situation,",
    "start": "1462910",
    "end": "1469330"
  },
  {
    "text": "that the entire state of\nthe game is, in some sense, encoded by that-- the state of\nthat algorithm, it would seem.",
    "start": "1469330",
    "end": "1476900"
  },
  {
    "text": " And black is just\ntelling-- in each turn,",
    "start": "1476900",
    "end": "1483840"
  },
  {
    "text": "white 1 says A or B, white 2, it\nsays A or B. White 1 and 2 then respond with some symbol.",
    "start": "1483840",
    "end": "1490690"
  },
  {
    "text": "And then the game continues. So a pretty simple setup. But amazingly, this can\nsimulate any Turing machine.",
    "start": "1490690",
    "end": "1498570"
  },
  {
    "text": " So let's do it. ",
    "start": "1498570",
    "end": "1514700"
  },
  {
    "text": "So this algorithm is\ngoing to be a function. Given the Turing\nmachine, we're going to construct the\nalgorithm, naturally.",
    "start": "1514700",
    "end": "1520570"
  },
  {
    "text": "So we basically need a\nconstant space algorithm",
    "start": "1520570",
    "end": "1527929"
  },
  {
    "text": "to check that the\nwhite players produce--",
    "start": "1527930",
    "end": "1537716"
  },
  {
    "text": "so the white players are\noutputting a strain of symbols. White 1 is outputting M1 and\nthen outputting something",
    "start": "1537716",
    "end": "1543210"
  },
  {
    "text": "else to M1, and so on. That strain of symbols,\nfor both white players,",
    "start": "1543210",
    "end": "1548460"
  },
  {
    "text": "should essentially form a\nvalid computation history, an execution trace\nof the Turing machine",
    "start": "1548460",
    "end": "1555149"
  },
  {
    "text": "we want to simulate--\nthe given Turing machine. ",
    "start": "1555150",
    "end": "1560585"
  },
  {
    "text": "It's a little bit more\ncomplicated than that. But that's the idea. ",
    "start": "1560585",
    "end": "1602600"
  },
  {
    "text": "And we'd like it to\nend in a halt state. So there are lots\nof canonical ways to write down the state\nof the Turing machine.",
    "start": "1602600",
    "end": "1609820"
  },
  {
    "text": "Basically, you\nwrite down the tape and what instruction it's on.",
    "start": "1609820",
    "end": "1615240"
  },
  {
    "text": "And that should be about it. And we're going to put\na special symbol-- hash mark-- in between\neach of these states.",
    "start": "1615240",
    "end": "1620914"
  },
  {
    "text": "So this is the state of\nthe machine at time 0. It's going to be a blank tape. And you only have to write\nas many symbols as you need.",
    "start": "1620914",
    "end": "1626550"
  },
  {
    "text": "So in the beginning,\ndon't write any symbols. As you start writing stuff to\ntape, this will get longer.",
    "start": "1626550",
    "end": "1632389"
  },
  {
    "text": "And yeah. And then the goal is to\nget it to a halt state. Each of these states should be\nthe uniquely determined state",
    "start": "1632390",
    "end": "1640050"
  },
  {
    "text": "from the previous one, which\nis, if I do one instruction, what happens? OK? Now, this is problematic.",
    "start": "1640050",
    "end": "1648299"
  },
  {
    "text": "So our goal-- we're trying\nto design this algorithm to confirm that these states\nare being generated correctly.",
    "start": "1648300",
    "end": "1656164"
  },
  {
    "text": "That's really hard to do because\nwe can't compute the next state from the previous one\nbecause we can't even store the previous\nstate in space k.",
    "start": "1656164",
    "end": "1664559"
  },
  {
    "text": "We have constant space. Very soon, the state\nis going to get huge. So you think of this as kind\nof a streaming [INAUDIBLE]",
    "start": "1664560",
    "end": "1671650"
  },
  {
    "text": "We're just seeing\nthese characters go by. And we can't remember the\nentire previous states. So the fact-- to check\nthat the next state is",
    "start": "1671650",
    "end": "1679000"
  },
  {
    "text": "almost the same as the\nprevious one is very hard. And that's where we're going\nto use this A, B thing.",
    "start": "1679000",
    "end": "1686280"
  },
  {
    "text": "This is not literally true. The sequence of\ncharacters-- M1, say--",
    "start": "1686280",
    "end": "1691580"
  },
  {
    "text": "will not produce a valid state. Essentially, what we\nwant player white 1",
    "start": "1691580",
    "end": "1698590"
  },
  {
    "text": "to do is to maintain two\npointers into this state-- A and B. And when we-- I'm\nidentifying with black here.",
    "start": "1698590",
    "end": "1709799"
  },
  {
    "text": "When we specify X1\nequals A, we would like to know what character's\nbeing pointed to by pointer A.",
    "start": "1709800",
    "end": "1716970"
  },
  {
    "text": "And then we'd like to advance\nA to the next character. OK? When we request B,\nwith X1 equals B,",
    "start": "1716970",
    "end": "1724180"
  },
  {
    "text": "we want to know what\ncharacter is at position B, and then advance to\nthe next character. So there's one strain that\nwe're trying to look at.",
    "start": "1724180",
    "end": "1731940"
  },
  {
    "text": "And each white player has to\nmaintain an A pointer and a B pointer. And as black, we can\nmake independent requests",
    "start": "1731940",
    "end": "1739490"
  },
  {
    "text": "to each of the two. It's like you have two disks\nwith two heads on the disk.",
    "start": "1739490",
    "end": "1747720"
  },
  {
    "text": "And they both have\nthe exact same data. Or they're supposed to. And I can say, give\nme the next character",
    "start": "1747720",
    "end": "1753320"
  },
  {
    "text": "at this pointer from this disk. And I can give you-- ask for\nwhat is-- simultaneously, I get one character\nfrom one of the two",
    "start": "1753320",
    "end": "1760030"
  },
  {
    "text": "pointers on the other disk. And then it advances by one. OK? Seems almost the same.",
    "start": "1760030",
    "end": "1765829"
  },
  {
    "text": "But that's what will\nmake this undecidable. ",
    "start": "1765829",
    "end": "1779610"
  },
  {
    "text": "OK. ",
    "start": "1779610",
    "end": "1784970"
  },
  {
    "text": "So here's the trick, how we're\ngoing to build this algorithm. I mean, the real trick is\nthat we have nondeterminism.",
    "start": "1784970",
    "end": "1792889"
  },
  {
    "text": "We're asking whether white wins. That means-- or whether\nwhite has a winning strategy.",
    "start": "1792890",
    "end": "1799769"
  },
  {
    "text": "For white to have\na winning strategy, that must mean it can win or the\nwhite team can win, no matter",
    "start": "1799770",
    "end": "1806610"
  },
  {
    "text": "how black plays. And black is just non--\nso basically, black",
    "start": "1806610",
    "end": "1811780"
  },
  {
    "text": "is nondeterministically\nchoosing between the A and the B pointer requests.",
    "start": "1811780",
    "end": "1819410"
  },
  {
    "text": "And so what this is\nsaying is, no matter what sequence of As and Bs\nyou get, white must win.",
    "start": "1819410",
    "end": "1826890"
  },
  {
    "text": "And winning is going\nto happen because we will build this algorithm to\nonly output yes when it gets",
    "start": "1826890",
    "end": "1833870"
  },
  {
    "text": "to a halt state, basically. ",
    "start": "1833870",
    "end": "1839700"
  },
  {
    "text": "The algorithm must not\ncomplain, no matter how we choose the A and B sequence.",
    "start": "1839700",
    "end": "1845194"
  },
  {
    "text": "So let me get to what\nwe're going to do. ",
    "start": "1845194",
    "end": "1853850"
  },
  {
    "text": "So the algorithm maintains--\nlet's call this white 1.",
    "start": "1853850",
    "end": "1870725"
  },
  {
    "start": "1870725",
    "end": "1880100"
  },
  {
    "text": "I would like to\nknow when-- let me be specific-- when white 1's A\nstate equals white 2's B state.",
    "start": "1880100",
    "end": "1888811"
  },
  {
    "text": "But in fact, we'll do\nthis for all pairs. It'll be four different things. A, B here. A, B here.",
    "start": "1888812",
    "end": "1893980"
  },
  {
    "text": "But let's say I want to\nknow when white 1's A state is in exactly the same\nplace as white 2's B state.",
    "start": "1893980",
    "end": "1901000"
  },
  {
    "text": "So we have-- in\nsome sense, there are two of the strains, one\nfor white 1, one for white 2.",
    "start": "1901000",
    "end": "1911006"
  },
  {
    "text": "And I want to know when I have\njust to read through a state",
    "start": "1911006",
    "end": "1918010"
  },
  {
    "text": "by white 1 and I've also read\nthrough the exact same state from white 2.",
    "start": "1918010",
    "end": "1923740"
  },
  {
    "text": "So that will happen when--\nfirst of all, both white players should have just\nreturned a hash mark.",
    "start": "1923740",
    "end": "1931040"
  },
  {
    "text": "And then-- hash\ntag, if you prefer. And then also, while we were\nrunning through this tape,",
    "start": "1931040",
    "end": "1939490"
  },
  {
    "text": "I see whether they happen to\nalways return the same result. So this will basically\nhappen when-- so whenever",
    "start": "1939490",
    "end": "1961289"
  },
  {
    "text": "both A and-- so if we just ask\nfor A, A, and white 1 returns",
    "start": "1961290",
    "end": "1966540"
  },
  {
    "text": "a hash mark and white\n2 returns a hash mark, then we're going to\nstart paying attention to every single\ncharacter we see.",
    "start": "1966540",
    "end": "1972380"
  },
  {
    "text": "If-- assuming we keep\nplaying A, A, is black. And this has to work for all\npossible assigned choices of A,",
    "start": "1972380",
    "end": "1978500"
  },
  {
    "text": "B. So in particular,\nit will be an execution where we play A, A\nthroughout this entire state.",
    "start": "1978500",
    "end": "1984965"
  },
  {
    "text": "And as we're doing that, we just\ncheck, character by character, are they returning\nexactly the same result, and have they, so\nfar-- have they always,",
    "start": "1984965",
    "end": "1992510"
  },
  {
    "text": "since the last hash mark? ",
    "start": "1992510",
    "end": "1998730"
  },
  {
    "text": "OK? And if they did, that's a\nconstant space algorithm. I just compare\ncharacter by character. Remember the AND of all\nof those comparisons.",
    "start": "1998730",
    "end": "2006480"
  },
  {
    "text": "If they were all the same,\nand I reach a hash mark, that means I know that both\nthe W1 strain and the W2",
    "start": "2006480",
    "end": "2015510"
  },
  {
    "text": "strain just output\nthe same state. So that means the A\nand the A pointers are in the same\nplace at this moment.",
    "start": "2015510",
    "end": "2023575"
  },
  {
    "text": " Cool. That's not quite\nwhere I want them.",
    "start": "2023575",
    "end": "2029080"
  },
  {
    "text": "But at least I can detect that. OK? I can detect identical states. Remember, I can't even\nstore-- I can't even",
    "start": "2029080",
    "end": "2035380"
  },
  {
    "text": "count A and B\nbecause these could get to really huge numbers. That only buys me an exponential\nwhen I write things in binary.",
    "start": "2035380",
    "end": "2041779"
  },
  {
    "text": "So I can't afford to write\ndown the A and the B pointers. It's what I'd like to do. But I can check, oh, did they\njust output the same state?",
    "start": "2041780",
    "end": "2049580"
  },
  {
    "text": "So far so good? Now, what I'd really like them\nto be is one step out of sync because what I do have a\nstreaming algorithm for is",
    "start": "2049580",
    "end": "2058148"
  },
  {
    "text": "if I have the previous\ndata of the Turing machine and the proposed next date\nof this Turing machine, and I compare them letter\nby letter, I can just check,",
    "start": "2058149",
    "end": "2066090"
  },
  {
    "text": "are all of the tape squares\nidentical except for the one that the pointer's on? And that got changed\nby a simple rule.",
    "start": "2066090",
    "end": "2073050"
  },
  {
    "text": "And then all the others\nshould be identical. So it's very easy,\nin a streaming sense. If I'm giving the previous\nstate and the next state,",
    "start": "2073050",
    "end": "2079739"
  },
  {
    "text": "I'd be happy. So my goal is to get W1 state\nto be one step out of sync,",
    "start": "2079739",
    "end": "2086580"
  },
  {
    "text": "one step behind W2 state.  OK. So how can I make that happen?",
    "start": "2086580",
    "end": "2095960"
  },
  {
    "start": "2095960",
    "end": "2115150"
  },
  {
    "text": "Again, so I mean, black\nisn't really making-- well, black is making all possible\nchoices among A and B,",
    "start": "2115150",
    "end": "2121370"
  },
  {
    "text": "at all times. So in particular, we can\nconsider the situation in which black plays, let's\nsay A for the W1 player,",
    "start": "2121370",
    "end": "2132369"
  },
  {
    "text": "and plays B on the other player. W2's A state does not change\nbecause we're advancing B.",
    "start": "2132370",
    "end": "2138780"
  },
  {
    "text": "And then W1's\nstate is advancing. And if I keep doing that,\nand then, at some point,",
    "start": "2138780",
    "end": "2144850"
  },
  {
    "text": "I get a hash mark,\nwhich I can obviously detect in constant space,\nthen I advance my finite state",
    "start": "2144850",
    "end": "2150830"
  },
  {
    "text": "machine, and say,\nOK, cool, that means W1 is one step ahead--\none state ahead of W2.",
    "start": "2150830",
    "end": "2157530"
  },
  {
    "text": " And now I'm going to compare.",
    "start": "2157530",
    "end": "2163790"
  },
  {
    "text": "So when that happens, so\nthen out of sync by 1.",
    "start": "2163790",
    "end": "2171010"
  },
  {
    "start": "2171010",
    "end": "2177420"
  },
  {
    "text": "And now what I'd like to\nhappen next is X1 and X2 moves. ",
    "start": "2177420",
    "end": "2186780"
  },
  {
    "text": "Then now I'm going to run\nmy streaming algorithm to check that this was\na valid transition.",
    "start": "2186780",
    "end": "2192960"
  },
  {
    "start": "2192960",
    "end": "2212210"
  },
  {
    "text": "So from whatever\nW2 is outputting to whatever W1 is outputting\nbecause W1 is ahead,",
    "start": "2212210",
    "end": "2219530"
  },
  {
    "text": "that should be a valid state. So basically, I had--\nI ran for some time.",
    "start": "2219530",
    "end": "2225450"
  },
  {
    "text": "Who knows what happened. Then I got this thing which\nis identical to this thing.",
    "start": "2225450",
    "end": "2232549"
  },
  {
    "text": "I detect that. And I see a hash mark. So I say, OK, they must\nbe in the same state.",
    "start": "2232550",
    "end": "2237570"
  },
  {
    "text": "Now I'm going to\nskip over whatever state was written here.",
    "start": "2237570",
    "end": "2242650"
  },
  {
    "text": "And then I'm going to check\nthat every thing I get here",
    "start": "2242650",
    "end": "2247740"
  },
  {
    "text": "is a valid transition\nfor whenever I get here. ",
    "start": "2247740",
    "end": "2252829"
  },
  {
    "text": "So this should go to that. This should go to that. And I don't need any\nmemory to do this.",
    "start": "2252830",
    "end": "2258030"
  },
  {
    "text": "I'm just looking at\nthis square, knowing the state of this machine,\nlooking at this square,",
    "start": "2258030",
    "end": "2263750"
  },
  {
    "text": "making sure that was\na valid transition. Usually, it's just that\nthis is equal to that, except at the one place\nwhere the tape head is,",
    "start": "2263750",
    "end": "2270480"
  },
  {
    "text": "which is written in\nthat little symbol. And in that spot, I do\nwhatever the Turing machine",
    "start": "2270480",
    "end": "2276347"
  },
  {
    "text": "does to that symbol. If the writes to\nit, it might change. Maybe it moves the\npointer left or right.",
    "start": "2276347",
    "end": "2281480"
  },
  {
    "text": "But in constant\nspace, I just need to know what's happening here. And maybe it's\nneighboring squares.",
    "start": "2281480",
    "end": "2286559"
  },
  {
    "text": "I can figure out what\nshould be written here. And if white 1 ever\ndoes the wrong thing, if it's not a valid\ntransition, then I",
    "start": "2286560",
    "end": "2294100"
  },
  {
    "text": "will say black wins\nas this algorithm. So for white to win, it\ncan't make any mistakes.",
    "start": "2294100",
    "end": "2304160"
  },
  {
    "text": "White has to conform to this\nidea that basically, first, it-- well, it basically--\nas it's playing,",
    "start": "2304160",
    "end": "2310690"
  },
  {
    "text": "it must be computing whatever\nthe Turing machine that's part of the game, essentially.",
    "start": "2310690",
    "end": "2316650"
  },
  {
    "text": "It's embedded in this\nalgorithm, the Turing machine. And so we have to-- it has to be\nsimulating the Turing machine,",
    "start": "2316650",
    "end": "2325930"
  },
  {
    "text": "maintaining these pointers,\nA and B, and running through. It has to do that\nbecause it has to win,",
    "start": "2325930",
    "end": "2331240"
  },
  {
    "text": "no matter what black does. And it could be that black\ndoes this really weird sequence",
    "start": "2331240",
    "end": "2336530"
  },
  {
    "text": "of As and Bs in order to\nverify the one place where you lied about one of these\nbeing an invalid transition.",
    "start": "2336530",
    "end": "2344107"
  },
  {
    "text": "It will eventually check for\nsome choices of the A and B moves. It will check that it\nwas a valid transition,",
    "start": "2344107",
    "end": "2349470"
  },
  {
    "text": "from here to here. And therefore, all\ntransitions must be valid.",
    "start": "2349470",
    "end": "2357869"
  },
  {
    "text": "So it's a pretty crazy\nuse of essentially the universal quantifier\nthat's given to black.",
    "start": "2357870",
    "end": "2363080"
  },
  {
    "text": " White has to win, no matter\nwhat black's moves are.",
    "start": "2363080",
    "end": "2368290"
  },
  {
    "text": " So you might ask, where is\nthe Turing machine state.",
    "start": "2368290",
    "end": "2378690"
  },
  {
    "text": "And it's essentially\nin the heads of the white players, which\nare not represented directly by the game.",
    "start": "2378690",
    "end": "2384750"
  },
  {
    "text": "The game is just, you know, what\nis the state of this algorithm? And it's, in some sense,\ninformed by the history",
    "start": "2384750",
    "end": "2391450"
  },
  {
    "text": "of the plays, the sequence\nof moves that have been made. ",
    "start": "2391450",
    "end": "2398560"
  },
  {
    "text": "That's, in some sense,\nwhere you can also see this long sequence of moves.",
    "start": "2398560",
    "end": "2404670"
  },
  {
    "text": "I mean, each of these\ngot output at some point. But initially, you could sort of\nthink of, all of the execution",
    "start": "2404670",
    "end": "2409940"
  },
  {
    "text": "was in the players' heads. Then they're just maintaining\nthese A and B pointers and playing. And there must be such an\nexecution in order for white",
    "start": "2409940",
    "end": "2417450"
  },
  {
    "text": "to win. So white will win, if, and only\nif, there's a-- the machine halts, basically, because this\nalgorithm only output yes--",
    "start": "2417450",
    "end": "2426860"
  },
  {
    "text": "output that white wins\nwhen the machine halts. And it will report that black\nwins, if you ever cheat.",
    "start": "2426860",
    "end": "2433160"
  },
  {
    "text": "So you have to not cheat. And you have to get\nto a halting state.",
    "start": "2433160",
    "end": "2439640"
  },
  {
    "text": "It's pretty crazy. And this probably won't make\nsense the first or second time. But it's clear to me,\nagain, every time I learn.",
    "start": "2439640",
    "end": "2447000"
  },
  {
    "text": "It's like, oh, yeah,\nthat's really cool. Hopefully, it will\nbecome clear to you. But if there are any questions--",
    "start": "2447000",
    "end": "2452120"
  },
  {
    "text": "AUDIENCE: Why is it\nimportant that the algorithm is only one space, in\nthe first place, though? PROFESSOR: I mean,\nit's not technically--",
    "start": "2452120",
    "end": "2460490"
  },
  {
    "text": "the overall algorithm is not\ntechnically constant space because it needs to include the\nentire Turing machine as part",
    "start": "2460490",
    "end": "2466450"
  },
  {
    "text": "of it, to know how to run. But I mentioned that\nthe checking algorithm",
    "start": "2466450",
    "end": "2471900"
  },
  {
    "text": "is constant space. And the point is, really, that\nthe size of this space key",
    "start": "2471900",
    "end": "2478980"
  },
  {
    "text": "algorithm has to be only a\nfunction of the given Turing machine. It can't depend on the\nexecution time or the execution",
    "start": "2478980",
    "end": "2486779"
  },
  {
    "text": "space of the Turing machine. But that's all I\nwant to emphasize. So effectively, I mean, if you\nthink of the Turing machine",
    "start": "2486780",
    "end": "2493726"
  },
  {
    "text": "as being pretty small,\nbut it's running for some huge amount of\ntime, like busy beaver time,",
    "start": "2493726",
    "end": "2499900"
  },
  {
    "text": "relative to that, we're\nthinking, basically, constant space. And in fact, we can get\naway with constant space.",
    "start": "2499900",
    "end": "2505740"
  },
  {
    "text": "That's for the checking part. That's my point. If you view the Turing machine\nexecution as an oracle.",
    "start": "2505740",
    "end": "2512390"
  },
  {
    "text": "So when I check that this\ngoes to this-- in fact, I have to run the Turing\nmachine on this tape head input,",
    "start": "2512390",
    "end": "2520210"
  },
  {
    "text": "to see what it would output. But the Turing machine\nis inside the algorithm.",
    "start": "2520210",
    "end": "2525280"
  },
  {
    "text": "So I can do that and\n[INAUDIBLE] some time with the lookup table.",
    "start": "2525280",
    "end": "2531520"
  },
  {
    "text": "So the point is, really, you\nneed, effectively, a streaming algorithm to do this\nbecause these states get",
    "start": "2531520",
    "end": "2537360"
  },
  {
    "text": "to be really, really\nhuge, because we",
    "start": "2537360",
    "end": "2542870"
  },
  {
    "text": "want this reduction\nto be polynomial time. And it is.",
    "start": "2542870",
    "end": "2549964"
  },
  {
    "text": "Basically, copy the\nTuring machine over, write some constant amount\nof code to do this checking, and that's all you need.",
    "start": "2549964",
    "end": "2557690"
  },
  {
    "text": "I guess we don't need it\nto be polynomial time. But it is. So it's kind of nice. But we need that\nit's finite time.",
    "start": "2557690",
    "end": "2565440"
  },
  {
    "text": "And there's no finite way\nto give an upper bound on the running time\nof the Turing machine, other than running it.",
    "start": "2565440",
    "end": "2570980"
  },
  {
    "text": "So polynomial time is good. ",
    "start": "2570980",
    "end": "2578740"
  },
  {
    "text": "OK. Let me briefly mention a\nmore formula-oriented game.",
    "start": "2578740",
    "end": "2583850"
  },
  {
    "start": "2583850",
    "end": "2591790"
  },
  {
    "text": "This is not terribly exciting. ",
    "start": "2591790",
    "end": "2597567"
  },
  {
    "text": "I'll just write it down quickly. ",
    "start": "2597567",
    "end": "2618569"
  },
  {
    "text": "Basically, you can convert this\nproblem-- team computation game",
    "start": "2618570",
    "end": "2624280"
  },
  {
    "text": "where black is forced to run\na particular machine-- you can convert machines into formulas.",
    "start": "2624280",
    "end": "2629580"
  },
  {
    "text": "So it ends up looking\nsomething like this. It might be possible\nto simplify. ",
    "start": "2629580",
    "end": "2643779"
  },
  {
    "text": "This is one thing\nthat definitely works. ",
    "start": "2643779",
    "end": "2672660"
  },
  {
    "text": "OK. So again, white 1 can only\nsee one variable-- X1--",
    "start": "2672660",
    "end": "2678670"
  },
  {
    "text": "that is set by black. And white 2 can only\nsee one variable-- X2-- that's set by black.",
    "start": "2678670",
    "end": "2684510"
  },
  {
    "text": "Black can set a bunch of\nvariables in one round. And there's some condition\nthat it has to satisfy.",
    "start": "2684510",
    "end": "2690830"
  },
  {
    "text": "This will basically force you\nto simulate the Turing machine and not break any rules. And if black ever\nsatisfies something,",
    "start": "2690830",
    "end": "2698210"
  },
  {
    "text": "which is when the Turing\nmachine's, hey, black wins. Then black wins. And then you just turn\nthat into a formula.",
    "start": "2698210",
    "end": "2704720"
  },
  {
    "text": "And then black sets\nsome other stuff. And so this is more in the\nstyle of the dependency QBF.",
    "start": "2704720",
    "end": "2711990"
  },
  {
    "text": "Again, you have this\nkind of dependency. But now there are\nmultiple rounds. And now there's no bound to\nthe number of moves you make.",
    "start": "2711990",
    "end": "2718830"
  },
  {
    "text": "We can reset\nvariables many times. And this is undecidable\nby essentially simulating",
    "start": "2718830",
    "end": "2724990"
  },
  {
    "text": "this machine, turning that\nmachine into a formula. ",
    "start": "2724990",
    "end": "2731040"
  },
  {
    "text": "So once we have that, we can\nturn it into a constraint logic version.",
    "start": "2731040",
    "end": "2736050"
  },
  {
    "text": "This is the team private but\nnot bounded constraint logic. Pretty much the same setup.",
    "start": "2736050",
    "end": "2742300"
  },
  {
    "text": "Black has these\nvariables, X and X prime. Y1 has these variables, Y1.",
    "start": "2742300",
    "end": "2747360"
  },
  {
    "text": "Y2 has these variables, Y2. They're fed into this formula. And there are various\nthings to-- that",
    "start": "2747360",
    "end": "2753240"
  },
  {
    "text": "when those conditions\nthat I wrote down happen, you trigger the\nappropriate target edge.",
    "start": "2753240",
    "end": "2758690"
  },
  {
    "text": "And then black wins, up there,\nor white wins, down there. So not too exciting to go\nthrough the details of that.",
    "start": "2758690",
    "end": "2764790"
  },
  {
    "text": "But the result is team private\ninformation constraint logic is",
    "start": "2764790",
    "end": "2770070"
  },
  {
    "text": "undecidable for three players. And you can use a crossover. And you can make this\nplanar graphs if you want.",
    "start": "2770070",
    "end": "2777315"
  },
  {
    "text": " Any more questions\nabout Undecidability?",
    "start": "2777315",
    "end": "2784784"
  },
  {
    "text": "AUDIENCE: Are you\never going to give some examples of\nundecidable-- like real games?",
    "start": "2784784",
    "end": "2791057"
  },
  {
    "text": "PROFESSOR: No. There are no known\ngood examples of games. These are the games, I'm afraid.",
    "start": "2791057",
    "end": "2796952"
  },
  {
    "text": "Yeah. Sorry. So I would like to switch gears\nand go to the extreme opposite.",
    "start": "2796952",
    "end": "2805190"
  },
  {
    "text": "Instead of Undecidability,\nwhen there's no algorithm, let's go back to good\nold-fashioned polynomial time",
    "start": "2805190",
    "end": "2810660"
  },
  {
    "text": "algorithms. I think you remember what P is. ",
    "start": "2810660",
    "end": "2817300"
  },
  {
    "text": "But let me tell you a stronger\nnotion of P, which comes up in parallel algorithms.",
    "start": "2817300",
    "end": "2823300"
  },
  {
    "text": "There are many different\nmodels of parallel computing. So it's a little\nbit-- you know, it's",
    "start": "2823300",
    "end": "2830680"
  },
  {
    "text": "hard to write down one\ngood model of computation for parallel computing.",
    "start": "2830680",
    "end": "2836650"
  },
  {
    "text": "But fortunately, if we're\nproving lower bounds, it doesn't matter whether\nour model is good. It really matters that our\nmodel is super powerful.",
    "start": "2836650",
    "end": "2845010"
  },
  {
    "text": "If we can prove\nsomething is impossible in a super powerful model, that\nmeans it's impossible in weaker models too.",
    "start": "2845010",
    "end": "2850790"
  },
  {
    "text": "So I'm going to give you a\nsuper powerful model called NC. So NC is Nick's class,\nnamed after Nick Pippinger,",
    "start": "2850790",
    "end": "2857780"
  },
  {
    "text": "who did a lot of\nparallel algorithms. And there are a few\nequivalent definitions.",
    "start": "2857780",
    "end": "2864130"
  },
  {
    "text": "Let me give you two of them. ",
    "start": "2864130",
    "end": "2876849"
  },
  {
    "text": "I would like my\nproblem to be solvable. With P, we wanted things to\nbe solvable in poly time.",
    "start": "2876850",
    "end": "2881980"
  },
  {
    "text": "So a natural\nimprovement is that I want to run in poly log time\nfor parallel algorithms,",
    "start": "2881980",
    "end": "2888200"
  },
  {
    "text": "given a huge number\nof processors, but not incredibly huge--\njust polynomial number of processors.",
    "start": "2888200",
    "end": "2894550"
  },
  {
    "text": "OK?  If I was given an exponential\nnumber of processors,",
    "start": "2894550",
    "end": "2899840"
  },
  {
    "text": "I could solve SAT and all\nsorts of crazy things. So shouldn't go too extreme.",
    "start": "2899840",
    "end": "2905540"
  },
  {
    "text": "But let's say polynomial--\nnot problems but processors. ",
    "start": "2905540",
    "end": "2913594"
  },
  {
    "text": "Polynomial number of\nprocessors is reasonable, maybe a little overkill, but OK. With polynomial\nnumber of processors,",
    "start": "2913594",
    "end": "2918890"
  },
  {
    "text": "I'd like to get poly log time. That's a pretty\nnatural, good situation.",
    "start": "2918890",
    "end": "2924470"
  },
  {
    "text": "I let these processors\ncommunicate however they want, super fast. You can think of\nit as a circuit.",
    "start": "2924470",
    "end": "2932415"
  },
  {
    "text": " If you're thinking\nabout the p-set, you'll be thinking about\nsmall weft circuits.",
    "start": "2932415",
    "end": "2939170"
  },
  {
    "text": "But here, it's just good\nold-fashioned depth. We want poly log depth.",
    "start": "2939170",
    "end": "2945220"
  },
  {
    "text": "That will be the running time\nif every gate of the circuit can run in parallel.",
    "start": "2945220",
    "end": "2952089"
  },
  {
    "text": "You still have to run in\nsequence, along the depth lines. But if there are a polynomial\nnumber of gates-- OK,",
    "start": "2952090",
    "end": "2958111"
  },
  {
    "text": "that should be, of size. Polynomial number of\ngates and poly log depth,",
    "start": "2958111",
    "end": "2963760"
  },
  {
    "text": "then in particular, this\ngives you an algorithm. Each processor just waits\nfor the inputs to be ready",
    "start": "2963760",
    "end": "2969880"
  },
  {
    "text": "and then writes out the output\nto the next gate that it-- or to whatever gates it has that\nit's connected to by a wire.",
    "start": "2969880",
    "end": "2977524"
  },
  {
    "text": "And you get an\nalgorithm that runs in poly log time, polynomial\nnumber of processors. So whichever you think\nof is more intuitive.",
    "start": "2977524",
    "end": "2983190"
  },
  {
    "text": " OK.",
    "start": "2983190",
    "end": "2988260"
  },
  {
    "text": "So I have a small example here. Suppose you want to sort n\nnumbers in the comparison",
    "start": "2988260",
    "end": "2994359"
  },
  {
    "text": "model. You can do that. And there are good\nalgorithms to do it. I will give you a not\nso great algorithm.",
    "start": "2994360",
    "end": "3000318"
  },
  {
    "text": "But at least it works in NC. Namely, with n\nsquared processors, I'm going to compare, in\nparallel, all pairs of items.",
    "start": "3000318",
    "end": "3008910"
  },
  {
    "text": "I'm going to compare ai\nto aj for all i and j. Now I know which items\nare less than which.",
    "start": "3008910",
    "end": "3015119"
  },
  {
    "text": "And now, for each\nitem i, I basically just want to compute how many\nitems are smaller than it.",
    "start": "3015120",
    "end": "3021714"
  },
  {
    "text": "If there are items smaller than\nit-- let's say all of the items are distinct-- then\nthat item should go to the I-th\nposition in the array.",
    "start": "3021715",
    "end": "3029620"
  },
  {
    "text": "So it's going to compute\nthis matrix, i versus j. Each one says ai is\nsmaller or greater than aj.",
    "start": "3029620",
    "end": "3038670"
  },
  {
    "text": "And now, for a\ngiven-- what do I say, a given row-- I want to compute\nhow many less than signs",
    "start": "3038670",
    "end": "3045210"
  },
  {
    "text": "are in that row. This is basically computing a\nsum where I view less than as 1 and greater than as 0.",
    "start": "3045210",
    "end": "3051320"
  },
  {
    "text": "And you can compute a sum\nof n items in log n time, just by building a binary tree.",
    "start": "3051320",
    "end": "3056599"
  },
  {
    "text": "I'm going to add these\ntwo guys in parallel with these two guys, and so on. And then I compute my sum.",
    "start": "3056599",
    "end": "3062654"
  },
  {
    "text": " And I can do each of\nthese rows in parallel.",
    "start": "3062655",
    "end": "3068000"
  },
  {
    "text": "So in log n time, I can\ncompute all of these sums. Then I know where every item\nneeds to go and put it there.",
    "start": "3068000",
    "end": "3074420"
  },
  {
    "text": "So this is a little overkill,\nthat I use a ton of processors. But still polynomial. So in n square processors,\nI can easily, in log n time,",
    "start": "3074420",
    "end": "3082140"
  },
  {
    "text": "sort n numbers. There are more\nefficient algorithms. But the point is when\nyou have a par-- when",
    "start": "3082140",
    "end": "3087380"
  },
  {
    "text": "there is a parallel algorithm,\nin this powerful model, you can do it without\ntoo much effort.",
    "start": "3087380",
    "end": "3093160"
  },
  {
    "text": "But what we're\ngoing to show, here, is something called\nP-hardness, which,",
    "start": "3093160",
    "end": "3101140"
  },
  {
    "text": "assuming not all problems\ncan be solved in this-- not all polynomial time\nalgorithms can be solved",
    "start": "3101140",
    "end": "3106970"
  },
  {
    "text": "in this model, these\nproblems can't. Just like NP hardness.",
    "start": "3106970",
    "end": "3112680"
  },
  {
    "text": "Note, in particular,\nNC is contained in P. If I had\nsuch an algorithm, I could simulate this algorithm.",
    "start": "3112680",
    "end": "3118289"
  },
  {
    "text": "Because I have parallelism\nonly polynomial, I could simulate the whole\nalgorithm in polynomial time, still.",
    "start": "3118290",
    "end": "3123330"
  },
  {
    "text": "So this is stronger\nthan being in P. And P hardness means\nthat all problems in NC",
    "start": "3123330",
    "end": "3132359"
  },
  {
    "text": "can be reduced in the\nusual Karp-style reduction,",
    "start": "3132360",
    "end": "3137970"
  },
  {
    "text": "in P reduction. But now the reduction must\nbe a parallel time reduction.",
    "start": "3137970",
    "end": "3144160"
  },
  {
    "text": "So it must be an NC\nalgorithm to your problem.",
    "start": "3144160",
    "end": "3153299"
  },
  {
    "text": " So P-hard means you're as\nhard as all problems in P.",
    "start": "3153300",
    "end": "3160940"
  },
  {
    "text": "And reductions must be\nparallel algorithms. They must in NC. And so this implies\nthat you're not in NC,",
    "start": "3160940",
    "end": "3170600"
  },
  {
    "text": "assuming NC does\nnot equal P, which",
    "start": "3170600",
    "end": "3178200"
  },
  {
    "text": "is another standard complexity\ntheoretic assumption. Makes sense-- not all problems\nshould be parallelizable.",
    "start": "3178200",
    "end": "3184900"
  },
  {
    "text": "So in particular,\nP-hard problems would be such problems. And P-complete, of course,\nmeans you're in P and P-hard.",
    "start": "3184900",
    "end": "3193580"
  },
  {
    "text": "OK.  AUDIENCE: Shouldn't it\nbe that all problems in P",
    "start": "3193580",
    "end": "3199912"
  },
  {
    "text": "can be reduced by\nan NC algorithm? ",
    "start": "3199912",
    "end": "3205080"
  },
  {
    "text": "PROFESSOR: Yes. Thank you. ",
    "start": "3205080",
    "end": "3210640"
  },
  {
    "text": "All problems in P. Yeah. Cool. So all problems, presumably\nincluding the ones",
    "start": "3210640",
    "end": "3215670"
  },
  {
    "text": "that are hard to parallelize--\nnot just the NC ones-- can be reduced to your problem. And so that means your problem\nis probably in P minus NC.",
    "start": "3215670",
    "end": "3225380"
  },
  {
    "text": "Good. ",
    "start": "3225380",
    "end": "3242500"
  },
  {
    "text": "So let me give you some\nbase P-complete problems,",
    "start": "3242500",
    "end": "3256590"
  },
  {
    "text": "starting with a very natural\none-- general machine simulation, sequential machine.",
    "start": "3256590",
    "end": "3263865"
  },
  {
    "start": "3263865",
    "end": "3271800"
  },
  {
    "text": "OK? So given a sequential algorithm,\nsuch as a Turing machine,",
    "start": "3271800",
    "end": "3280060"
  },
  {
    "text": "run it for t steps. Now, this is a\nlittle bit subtle. ",
    "start": "3280060",
    "end": "3292932"
  },
  {
    "text": "Let me write this down. And then I'm going to modify it. ",
    "start": "3292932",
    "end": "3299390"
  },
  {
    "text": "Does the algorithm, say,\nhalt within t steps? ",
    "start": "3299390",
    "end": "3308010"
  },
  {
    "text": "Or does it keep running\nfor longer than t? So this is a version\nof the halting problem. I mean, we-- same thing with\na nondeterministic Turing",
    "start": "3308010",
    "end": "3315170"
  },
  {
    "text": "machine. Running for polynomial time was\nour prototype for NP problems. We've done this kind\nof problem a lot.",
    "start": "3315170",
    "end": "3321740"
  },
  {
    "text": "We did a similar thing with W1. It was a run for k steps. And k was a parameter. I want this problem to be in\nP. But if I phrase it this way,",
    "start": "3321740",
    "end": "3331740"
  },
  {
    "text": "it would be X time complete\nbecause t could represent an exponentially large value.",
    "start": "3331740",
    "end": "3337580"
  },
  {
    "text": "So what I want is for\nthis to be encoded in unary, which usually,\nwe're not supposed to do.",
    "start": "3337580",
    "end": "3343307"
  },
  {
    "text": "But here, I'm going to\nexplicitly say, look, t is bounded by a polynomial\nin the size of the machine--",
    "start": "3343307",
    "end": "3349910"
  },
  {
    "text": "or equivalently, it's\nwritten in unary. And now I can do this\nin polynomial time.",
    "start": "3349910",
    "end": "3355970"
  },
  {
    "text": "Because I have t\nsteps to do it, I'll just run the machine t steps. OK? So this is in P. And if\nyou believe anything is not",
    "start": "3355970",
    "end": "3364099"
  },
  {
    "text": "parallelizable, then this\nshouldn't be because this lets you simulate all things. So pretty easy to reduce\nall problems in P.",
    "start": "3364100",
    "end": "3371636"
  },
  {
    "text": "If they're in P, that means\nthere's an algorithm to solve them, sequential algorithm. So you plug it in here. It's going to run for\nonly polynomial time.",
    "start": "3371636",
    "end": "3378240"
  },
  {
    "text": "So you can set t\nto that polynomial. And boom. You know, the algorithm\nhalting is it's answering, yes.",
    "start": "3378240",
    "end": "3386430"
  },
  {
    "text": "Or you could change this\nto returning s or whatever. ",
    "start": "3386430",
    "end": "3392950"
  },
  {
    "text": "OK? So that's actually how\nyou prove this problem is P-hard, or actually P-complete.",
    "start": "3392950",
    "end": "3398224"
  },
  {
    "text": "AUDIENCE: Is there any\nproblem with symmetry between yea and\nno answers, here? ",
    "start": "3398225",
    "end": "3404240"
  },
  {
    "text": "PROFESSOR: Here, yes\nand no are the same. Yeah. Unlike NP. NP had an asymmetry\nbetween yes and no.",
    "start": "3404240",
    "end": "3410581"
  },
  {
    "text": "So I could also change\nthis to return no. That would also be as hard. Yeah. ",
    "start": "3410582",
    "end": "3425900"
  },
  {
    "text": "But of course, this is\nnot a very useful problem. It's just a starting point. And it's a very natural\nP-complete problem.",
    "start": "3425900",
    "end": "3433470"
  },
  {
    "text": "More useful for reductions\nare these circuit value problems, CVP.",
    "start": "3433470",
    "end": "3441644"
  },
  {
    "start": "3441645",
    "end": "3448100"
  },
  {
    "text": "This is going to be\nlike circuit set. So with circuit set, we were\ngiven an acyclic Boolean",
    "start": "3448100",
    "end": "3453460"
  },
  {
    "text": "circuit which had one output.",
    "start": "3453460",
    "end": "3459431"
  },
  {
    "text": "Or maybe we're given a\nparticular output we care about. And we wanted to know whether\nthere was some input setting",
    "start": "3459431",
    "end": "3465100"
  },
  {
    "text": "that made the output true. Here, we are given\nthe input setting. ",
    "start": "3465100",
    "end": "3475920"
  },
  {
    "text": "So I mean, the circuit actually\nhas the inputs written down, like 0, 1, 1.",
    "start": "3475920",
    "end": "3482250"
  },
  {
    "text": "And then let's say\nwe take an AND, and then we take an OR,\nsomething like that.",
    "start": "3482250",
    "end": "3488310"
  },
  {
    "text": "And we want to know, what\nis this thing at the output? Of course, this can be\nsolved in polynomial time. You compute this\nAND, and you get a 0.",
    "start": "3488310",
    "end": "3495030"
  },
  {
    "text": "This was a 1. So you compute this\nOR, and you get 1. So the answer is 1.",
    "start": "3495030",
    "end": "3500205"
  },
  {
    "text": "OK? And you can do that\nin linear time. But to do it parallel\nis really hard",
    "start": "3500205",
    "end": "3505730"
  },
  {
    "text": "because it's really\nhard to predict what these inputs are going to be. So you can't do\nanything on this gate",
    "start": "3505730",
    "end": "3511500"
  },
  {
    "text": "until the inputs are ready. So presumably, this circuit\nwill not have poly log depth.",
    "start": "3511500",
    "end": "3518040"
  },
  {
    "text": "Otherwise, it isn't in NC. But if you have a really large\ndebt circuit, simulating--",
    "start": "3518040",
    "end": "3523070"
  },
  {
    "text": "running it in parallel is\njust as hard as this problem. So you can reduce a\ngeneral machine simulation",
    "start": "3523070",
    "end": "3530190"
  },
  {
    "text": "to a circuit value. And the standard way\nof converting machines into circuits, that's the\nelectrical engineering problem.",
    "start": "3530190",
    "end": "3536550"
  },
  {
    "text": "OK. What was the question? Is the output true? ",
    "start": "3536550",
    "end": "3546490"
  },
  {
    "text": "OK. Now, there are\nmany special cases of this that are also hard. For example, NAM CVP.",
    "start": "3546490",
    "end": "3555230"
  },
  {
    "text": "OK. We know how to build\ncomputers out of NAND. We know how to build\ncomputers out of NOR. Cool.",
    "start": "3555230",
    "end": "3560530"
  },
  {
    "text": "So that's easy. More interesting\nis monotone CVP.",
    "start": "3560530",
    "end": "3566750"
  },
  {
    "text": " So in monotone CVP, you\njust have AND and OR gates.",
    "start": "3566750",
    "end": "3573510"
  },
  {
    "text": "You don't have negation or\nan AND or an OR or an XOR. Those sorts of things.",
    "start": "3573510",
    "end": "3578770"
  },
  {
    "text": "This is also hard, essentially. By dual-rail logic, representing\nthe true and the false",
    "start": "3578770",
    "end": "3583920"
  },
  {
    "text": "as separate wires and\nmanipulating them, you can get this to be hard. Also kind of similar\nto constraint logic.",
    "start": "3583920",
    "end": "3590670"
  },
  {
    "text": "OK? But I won't prove it here. A little stronger is\nalternating monotone CVP.",
    "start": "3590670",
    "end": "3599310"
  },
  {
    "text": " This alternates AND\nOR down any path.",
    "start": "3599310",
    "end": "3610680"
  },
  {
    "text": "So if you take a path from\nan input bit to the output, it alternates AND\nOR, AND OR, AND OR.",
    "start": "3610680",
    "end": "3617859"
  },
  {
    "text": "And furthermore, we can\nassume that it starts and ends with OR. ",
    "start": "3617860",
    "end": "3625270"
  },
  {
    "text": "It's nice to nail this down. It's not hard to prove. But I will prove it in a\nmoment, once I tell you",
    "start": "3625270",
    "end": "3632670"
  },
  {
    "text": "a general enough version\nthat I want to analyze.",
    "start": "3632670",
    "end": "3637691"
  },
  {
    "text": "This will just let us\nworry about fewer gadgets. So up here, we had to think\nabout all Boolean gates. Now we just have to\nthink about AND and OR.",
    "start": "3637691",
    "end": "3644480"
  },
  {
    "text": "And we can always assume\nthe output of an AND is the input of an\nOR, and vice versa, and that we only need to\nconnect inputs to OR gates",
    "start": "3644480",
    "end": "3651640"
  },
  {
    "text": "and not like this\npicture, and we only have to get the output\nfrom an OR gate.",
    "start": "3651640",
    "end": "3656815"
  },
  {
    "text": "So it reduces the number of\ncases we need to worry about. ",
    "start": "3656815",
    "end": "3664339"
  },
  {
    "text": "Yeah? AUDIENCE: So is this\nwith bounded fanin? PROFESSOR: Good question. ",
    "start": "3664340",
    "end": "3675040"
  },
  {
    "text": "Basically, bounded fanin\ndoesn't matter with this model. So usually, when NC is defined,\nit's bounded fanin and fanout.",
    "start": "3675040",
    "end": "3687490"
  },
  {
    "text": "And there's another\nclass, called AC, which is when you have\nunbounded fanouts and fanin,",
    "start": "3687490",
    "end": "3692960"
  },
  {
    "text": "let's say. But that only hurts\nus by a log factor. So it matters if you're\nworried about something",
    "start": "3692960",
    "end": "3698720"
  },
  {
    "text": "called AC0 and NC0, when this is\n0 and you want constant height. AUDIENCE: It matters for\nalternation, as well.",
    "start": "3698720",
    "end": "3705730"
  },
  {
    "text": "PROFESSOR: Please wait, I guess.  It won't matter, is the answer.",
    "start": "3705730",
    "end": "3711609"
  },
  {
    "text": "AUDIENCE: Is this the only\nsetting of starting and ending that works?",
    "start": "3711610",
    "end": "3718690"
  },
  {
    "text": "PROFESSOR: Sorry? AUDIENCE: Starting and\nending with both AND or starting with AND? PROFESSOR: Oh, yeah. I think you could\nalso make this an AND,",
    "start": "3718690",
    "end": "3724575"
  },
  {
    "text": "although I haven't checked that. I don't think it's\ncritical that this is OR. But you could probably do one\nof them in OR, one of them",
    "start": "3724575",
    "end": "3731172"
  },
  {
    "text": "in AND-- all of\nthose combinations. But this is the one\nI've seen proved. We'd need to check\nthe other cases.",
    "start": "3731172",
    "end": "3736280"
  },
  {
    "text": "But I think it's not hard. ",
    "start": "3736280",
    "end": "3741570"
  },
  {
    "text": "This is called AM2CVP. ",
    "start": "3741570",
    "end": "3747420"
  },
  {
    "text": "Great acronyms. Every gate has\nfanin2 and fanout2.",
    "start": "3747420",
    "end": "3753320"
  },
  {
    "text": "So in particular, bounded\nbut also nice and uniform. Every single-- not less\nthan or equal to 2.",
    "start": "3753320",
    "end": "3758819"
  },
  {
    "text": "This is exactly 2. OK? We'll prove that. And even stronger,\nsynchronous AM2CVP.",
    "start": "3758820",
    "end": "3770980"
  },
  {
    "text": " I prefer AVP, personally.",
    "start": "3770980",
    "end": "3778060"
  },
  {
    "text": "So this is SAM2CVP. ",
    "start": "3778060",
    "end": "3783970"
  },
  {
    "text": "Synchronous means that all\nof the inputs of the gate are available at\nexactly the same time.",
    "start": "3783970",
    "end": "3789270"
  },
  {
    "text": "If you imagine running all of\nthe gates of depth i at time i,",
    "start": "3789270",
    "end": "3794360"
  },
  {
    "text": "then you can do that. At time i, all gates of\ndepth i will be ready. They'll have all\nof their inputs.",
    "start": "3794360",
    "end": "3799970"
  },
  {
    "text": "In other words, a gate of\ndepth i has one of its inputs at depth i, minus 1.",
    "start": "3799970",
    "end": "3805530"
  },
  {
    "text": "But in the synchronous\ncircuit, both of the inputs will have depth i, minus 1. And so at time i, you'll\nactually be ready to do it.",
    "start": "3805530",
    "end": "3813010"
  },
  {
    "text": "This is useful, in\nparticular, for things like constraint logic and\nother constructions, as well.",
    "start": "3813010",
    "end": "3820390"
  },
  {
    "text": "One more. Planar CVP. I don't know how\nmany of these things",
    "start": "3820390",
    "end": "3825720"
  },
  {
    "text": "you can import into\nthe planar case. Probably many of them.",
    "start": "3825720",
    "end": "3831070"
  },
  {
    "text": "But just like planar circuit\nset, out of NAND and NOR, for example, you can\nbuild crossovers.",
    "start": "3831070",
    "end": "3836680"
  },
  {
    "text": "And so planar circuits\nare also hard. But actually, not all\nof them because planar",
    "start": "3836680",
    "end": "3845200"
  },
  {
    "text": "monotone CVP is in NC.",
    "start": "3845200",
    "end": "3853420"
  },
  {
    "text": "So you can't take the\nmonotone AND OR- ness with planarity, which is kind\nof annoying because that problem",
    "start": "3853420",
    "end": "3860650"
  },
  {
    "text": "can be done in parallel. But planar with an AND--\nthen you've got negation. And you can build a crossover.",
    "start": "3860650",
    "end": "3868390"
  },
  {
    "text": "OK. Let me prove some\nof these things. This was to give you a\nflavor for what's hard. Still, all of these\nproblems up are P-complete.",
    "start": "3868390",
    "end": "3876820"
  },
  {
    "start": "3876820",
    "end": "3882640"
  },
  {
    "text": "And we're going to do it\nin a series of reductions. So first, let's deal with\nstarting and ending with OR.",
    "start": "3882640",
    "end": "3894244"
  },
  {
    "text": "So this is the\npart you'd switch. If you want to start\nor end with an AND, it should be no problem. So this is an input bit.",
    "start": "3894245",
    "end": "3900599"
  },
  {
    "text": "Either 0 or 1, they're going\nto be drawn with squares. Oh, I should\nmention, by the way, there's a textbook\ndevoted to P completeness.",
    "start": "3900600",
    "end": "3907824"
  },
  {
    "text": "It's a short textbook. But it's a nice read. And it's online. So I linked to it\nfrom the website now.",
    "start": "3907824",
    "end": "3913440"
  },
  {
    "text": "So if you want to learn a little\nmore, check out that book. These are figures\nfrom that book. So if I have some input\nbeing sent to some gates,",
    "start": "3913440",
    "end": "3924559"
  },
  {
    "text": "I'm just going to\nput an OR there. And let's say i OR\nthat bit with itself. So now everything\nstarts with an OR.",
    "start": "3924560",
    "end": "3931100"
  },
  {
    "text": "Done. If I want to make\nthings end with an OR and they end with an AND,\nI'll just put an OR gate.",
    "start": "3931100",
    "end": "3936940"
  },
  {
    "text": "I don't know why here\nwe use only one input, here we put two inputs. But I could have just\nput one input up there.",
    "start": "3936940",
    "end": "3943380"
  },
  {
    "text": "I'm allowing, for now,\none input OR gate. So I'm going to fix that later. Question? AUDIENCE: [INAUDIBLE]",
    "start": "3943380",
    "end": "3949770"
  },
  {
    "text": "PROFESSOR: Coming soon. So this is just to\nstart and end with ORs. Next thing I'd like to do\nis make things alternating.",
    "start": "3949770",
    "end": "3956930"
  },
  {
    "text": "So if I have two gates--\nactually, before I do this, I need to do this later. It's important to get\nthe sequence right.",
    "start": "3956930",
    "end": "3963240"
  },
  {
    "text": "First, I want to make sure\nthe fanout is less than or equal to 2, in this way. This is a standard trick.",
    "start": "3963240",
    "end": "3968910"
  },
  {
    "text": "If I have large fanout, I\njust build a binary tree. And you can put\nORs or ANDs here.",
    "start": "3968910",
    "end": "3973940"
  },
  {
    "text": "There's only one input. So it doesn't do anything to it. But now I have\nfanout, at most, 2.",
    "start": "3973940",
    "end": "3979480"
  },
  {
    "text": "Fanin is whatever. Did we deal with large fanin?",
    "start": "3979480",
    "end": "3984800"
  },
  {
    "text": "Not yet.  So I'm going to do that first.",
    "start": "3984800",
    "end": "3990160"
  },
  {
    "text": "This will make lots of\nORs next to each other. But then whenever I have two ORs\nor two ANDs next to each other, I just add the opposite\ngate, in between.",
    "start": "3990160",
    "end": "3997010"
  },
  {
    "text": "OK. So now it's alternating\nfanout, at most, 2. So we've gotten this\nproperty in a weak sense,",
    "start": "3997010",
    "end": "4003870"
  },
  {
    "text": "with less than or equal to 2. We're going to fix the 1s later. We haven't dealt with this yet.",
    "start": "4003870",
    "end": "4009609"
  },
  {
    "text": " I assumed-- sorry-- that\nI'm starting with monotones.",
    "start": "4009610",
    "end": "4014790"
  },
  {
    "text": "So I just have ANDs and ORs. No indication. I'm reducing from monotone\nCVP to these other problems.",
    "start": "4014790",
    "end": "4020552"
  },
  {
    "text": "I've got alternation,\nstarting and ending with or and fanout, at\nmost, 2, at this point. Next reduction is to\nmake fanin exactly 2.",
    "start": "4020552",
    "end": "4030460"
  },
  {
    "text": "So yeah. I guess I didn't write it. But we can use the same\ntrick on the other side.",
    "start": "4030460",
    "end": "4036950"
  },
  {
    "text": "If you have fanin\nlarger than 2, then you can just take ANDs\nand ANDs and ANDs.",
    "start": "4036950",
    "end": "4042060"
  },
  {
    "text": "So you can also get\nfanin, at most, 2. Now if I have fanin 1, which\nI've used all over the place,",
    "start": "4042060",
    "end": "4047140"
  },
  {
    "text": "now I'm going to get rid of\nit in two different ways. If I have an OR gate\nwith one input that",
    "start": "4047140",
    "end": "4052819"
  },
  {
    "text": "happens to be an\nAND or original bit, I'll just add in\nanother input of 0. That won't affect things.",
    "start": "4052820",
    "end": "4059410"
  },
  {
    "text": "And if I have an AND bit, I\nwould like to put a 1 here. But I'm not allowed to feed a\nnumber-- an input-- directly",
    "start": "4059410",
    "end": "4066380"
  },
  {
    "text": "to an AND gate because I want\nto preserve the property that I start and end with ORs. So this is one thing\nthat would be--",
    "start": "4066380",
    "end": "4072440"
  },
  {
    "text": "you'd have to tweak a little\nbit if you want to start and end with ANDs. But you can do, I\nthink, a similar trick.",
    "start": "4072440",
    "end": "4077949"
  },
  {
    "text": "I want to build the 1\nbit using an OR gate. So I take two one\nbits, OR them together. Now I have a 1\nbit fed into here.",
    "start": "4077949",
    "end": "4083400"
  },
  {
    "text": "And then that will\njust pass through. OK? So now I have fanin, exactly 2. No 1s.",
    "start": "4083400",
    "end": "4088555"
  },
  {
    "text": "You can imagine this is\nuseful when you're actually building gadgets\nbecause then you don't have to do all of the work.",
    "start": "4088555",
    "end": "4093660"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] ",
    "start": "4093660",
    "end": "4098973"
  },
  {
    "text": "PROFESSOR: I haven't\ndealt with fanout 2, yet. At this point, just fanin 2. So variables-- some of them\nstill only have fanout 1.",
    "start": "4098973",
    "end": "4106711"
  },
  {
    "text": "But they will have at most, 2. So now we're going to\ndo fanout, exactly 2. So what I'm going to\ndo is take my circuit,",
    "start": "4106711",
    "end": "4115409"
  },
  {
    "text": "make two copies of it. There's the primed copy\nand the original copy.",
    "start": "4115410",
    "end": "4120659"
  },
  {
    "text": "OK? So now I just need to hook\nthings how I want them.",
    "start": "4120660",
    "end": "4126100"
  },
  {
    "text": "The inputs, which\nare not drawn here-- if I have an input out\ndegree 1, then I'll",
    "start": "4126100",
    "end": "4133424"
  },
  {
    "text": "merge them into one copy. Then I'll have out degree 2. If they already\nhave out degree 2, just leave them as two copies.",
    "start": "4133425",
    "end": "4138501"
  },
  {
    "text": "OK? So now all of the inputs have\nout degree 2, or fanout 2. If I have an AND gate\nwith out degree 2, again,",
    "start": "4138501",
    "end": "4146091"
  },
  {
    "text": "I don't touch it. I'll leave them as two copies. If I have an AND gate with\none-- a fanout of one-- then",
    "start": "4146092",
    "end": "4153479"
  },
  {
    "text": "here are the two copies of it. I basically want to add an extra\noutput that gets thrown away.",
    "start": "4153479",
    "end": "4159121"
  },
  {
    "text": "So because I have\nto end with an OR, I'm going to put it OR here. And then that's an output. It's not the output that we're\nasking the question about,",
    "start": "4159121",
    "end": "4165089"
  },
  {
    "text": "where I want to know, does\nthe output become true? That's a specific output. So for this reduction\nI need to allow",
    "start": "4165090",
    "end": "4170960"
  },
  {
    "text": "there to be multiple\noutputs in my circuit, but only one of\nthem of interest.",
    "start": "4170960",
    "end": "4176649"
  },
  {
    "text": "OK? And the rest is\nconnected as before. So now these guys have fanout 2.",
    "start": "4176649",
    "end": "4183350"
  },
  {
    "text": "If I have an OR gate\nwith one output, this is a little trickier\nbecause I want to end with ORs,",
    "start": "4183350",
    "end": "4188470"
  },
  {
    "text": "I guess. We're going to combine\nthese two bits. And I have to alternate. So next thing is I\nhave to go to an AND.",
    "start": "4188470",
    "end": "4195390"
  },
  {
    "text": "This also has to\nhave two outputs. So I'm going to put one of\nthem here and one of them here.",
    "start": "4195390",
    "end": "4201760"
  },
  {
    "text": "These guys need two\ninputs because I don't want to [INAUDIBLE]\nwith the two input conditions. So I add another bit.",
    "start": "4201760",
    "end": "4206862"
  },
  {
    "text": "It could be 0, 1. It doesn't matter. Feed it to both of them. Now this has out degree 2. These have in degree 2.",
    "start": "4206862",
    "end": "4212660"
  },
  {
    "text": "And this is an output. So output is-- you could think\nof there as being two of them.",
    "start": "4212660",
    "end": "4218034"
  },
  {
    "text": "Yeah? AUDIENCE: Can you chain\nthe outputs together, so that there's a 1 output? PROFESSOR: Oh, combine the\ndifferent outputs together?",
    "start": "4218034",
    "end": "4224650"
  },
  {
    "text": "AUDIENCE: If you have\nfanout, exactly 2, and fanin, exactly\n2, doesn't that mean that you're preserving\nthe number of inputs,",
    "start": "4224650",
    "end": "4232994"
  },
  {
    "text": "So that you can't reduce\nthose extra outputs to 1?",
    "start": "4232994",
    "end": "4238090"
  },
  {
    "text": "PROFESSOR: Yes. Good. So I think if we tried to\ncombine all of the outputs together, we'd end up\nwith a similar problem.",
    "start": "4238090",
    "end": "4245850"
  },
  {
    "text": "And we'd basically have to\ndo this construction again, and then produce more outputs. Good.",
    "start": "4245850",
    "end": "4252101"
  },
  {
    "text": "Yeah. So we violate fanin 2,\nobviously, at the inputs. But you're right.",
    "start": "4252101",
    "end": "4257130"
  },
  {
    "text": "After the input level,\nthe number of lines should be preserved. OK. So never mind.",
    "start": "4257130",
    "end": "4262639"
  },
  {
    "text": "We do need multiple outputs. And exactly one\nof them is marked as the one we care about,\nwhether an output's true.",
    "start": "4262640",
    "end": "4270014"
  },
  {
    "text": "Is that the end? Yes. At this point, we've proved\nAM2CVP is P-complete.",
    "start": "4270014",
    "end": "4278449"
  },
  {
    "text": "OK. So one more. Reduction is for the\nsynchronous case. ",
    "start": "4278450",
    "end": "4285870"
  },
  {
    "text": "This is cool.  Let me, maybe, first\nsay what we're doing.",
    "start": "4285870",
    "end": "4293255"
  },
  {
    "text": " So for the\nsynchronous reduction,",
    "start": "4293255",
    "end": "4299885"
  },
  {
    "text": "we're going to make n over 2\ncopies of the circuit, where n is the number of gates. ",
    "start": "4299886",
    "end": "4310160"
  },
  {
    "text": "At a high level, that's\nwhat we're doing. And basically,\nthe i-th copy will feed into the i plus 1st copy.",
    "start": "4310160",
    "end": "4316199"
  },
  {
    "text": "Well, not quite, because we\nwant to alternate ANDs and ORs. So in the i-th copy-- the\ni-th copy of the circuit",
    "start": "4316200",
    "end": "4326469"
  },
  {
    "text": "will be the depth\nlevels 2i and 2i plus 1,",
    "start": "4326470",
    "end": "4334640"
  },
  {
    "text": "in the final circuit\nthat I'm producing, where these are ANDs and inputs.",
    "start": "4334640",
    "end": "4341545"
  },
  {
    "text": " And this level is\ngoing to be ORs.",
    "start": "4341545",
    "end": "4348781"
  },
  {
    "text": "OK? So basically, I want to take\nan AND level and an OR level from one copy, then an\nAND level and an OR level",
    "start": "4348781",
    "end": "4354810"
  },
  {
    "text": "from the next copy, and so on. The inputs are a\nlittle more subtle.",
    "start": "4354810",
    "end": "4360419"
  },
  {
    "text": "But in particular,\nI'm at least going to make the copies\nof the inputs. And I'm going to\nchange them later.",
    "start": "4360419",
    "end": "4366280"
  },
  {
    "text": "And so the outputs of\nthe ORs from one copy will go to the inputs of\nthe ANDs in the next copy,",
    "start": "4366280",
    "end": "4375660"
  },
  {
    "text": "and vice versa. So the outputs from the ANDs\nstay within the same copy.",
    "start": "4375660",
    "end": "4381740"
  },
  {
    "text": "And then the outputs from\nhere go to the next copy. Basically, this will force\nsynchronization, in a sense.",
    "start": "4381740",
    "end": "4388200"
  },
  {
    "text": "Now, the one tricky\npart is the inputs. I want the i-th copy to be\ntriggered at time 2i, exactly.",
    "start": "4388200",
    "end": "4396489"
  },
  {
    "text": "And so for that, I can't\njust have the inputs. Maybe some of the gates\nin there take an input",
    "start": "4396490",
    "end": "4401520"
  },
  {
    "text": "from-- sort of straight. I need to delay that\ninput from coming",
    "start": "4401520",
    "end": "4406750"
  },
  {
    "text": "and still preserve fanin and\nfanout 2 and alternation.",
    "start": "4406750",
    "end": "4412060"
  },
  {
    "text": "So to do that, I'm going\nto use this gadget. So I just have the\nsame bit written twice.",
    "start": "4412060",
    "end": "4420420"
  },
  {
    "text": "And then I OR them\nwith themselves and then AND then with\nthemselves and OR them. OK? It seems innocent enough.",
    "start": "4420420",
    "end": "4425840"
  },
  {
    "text": "That latter obviously will\nnot change any of the bits. So just duplicating those\nbits at every time step.",
    "start": "4425840",
    "end": "4432420"
  },
  {
    "text": "It's all about timing here. And now here's the fun thing. If this gate needs\nthis bit, obviously, I",
    "start": "4432420",
    "end": "4440385"
  },
  {
    "text": "can just take it out, here. That will still\npreserve fanout 2, here.",
    "start": "4440386",
    "end": "4445469"
  },
  {
    "text": "And if I'm taking\none bit from here, I'm going to have to\nthrow away another bit.",
    "start": "4445470",
    "end": "4451680"
  },
  {
    "text": "And magically-- this is very\ncool-- if I throw away a bit here, it doesn't matter\nwhat that bit value is.",
    "start": "4451680",
    "end": "4458350"
  },
  {
    "text": "This will still be X2. ",
    "start": "4458350",
    "end": "4464100"
  },
  {
    "text": "You can think of the two cases--\neither x2 is 0, in which case",
    "start": "4464100",
    "end": "4470470"
  },
  {
    "text": "this is 0, and then it doesn't\nmatter what this bit is. It will output 0. OK? Or this bit could be a 1.",
    "start": "4470470",
    "end": "4477460"
  },
  {
    "text": "Then I go here. And I mean, it actually doesn't\nmatter that it's preserved. But it is.",
    "start": "4477460",
    "end": "4482700"
  },
  {
    "text": "I think it's kind of cool. If this was a 1, then this will\noutput whatever that bit is.",
    "start": "4482700",
    "end": "4488190"
  },
  {
    "text": "But because, again,\nthis will be a 1 because it gets it\nfrom here, then the OR",
    "start": "4488190",
    "end": "4494080"
  },
  {
    "text": "will turn it back into a 1. So either way, the\nbit is restored. So you could actually\nreuse this gadget a few times if you wanted.",
    "start": "4494080",
    "end": "4499663"
  },
  {
    "text": "But we can also be lazy and just\nmake many copies of this gadget because we have polynomial size.",
    "start": "4499663",
    "end": "4506639"
  },
  {
    "text": "So basically, we can get a 1\nbit and also destroy an output, basically, with\nthis kind of gadget,",
    "start": "4506640",
    "end": "4514850"
  },
  {
    "text": "and get the inputs to\nbe triggered exactly at the right time. So the i-th copy-- all of the\ngates will trigger at time 2i.",
    "start": "4514850",
    "end": "4522789"
  },
  {
    "text": "And then all of the AND\ngates will trigger at 2i. And then all of\nthe OR gates will trigger at time 2i, plus 1. And they'll feed\ninto the next copy.",
    "start": "4522789",
    "end": "4531639"
  },
  {
    "text": "All of those will trigger. And so on. So it's a little bit redundant. But it works.",
    "start": "4531640",
    "end": "4537500"
  },
  {
    "text": " And then the output\nis going to be",
    "start": "4537500",
    "end": "4543800"
  },
  {
    "text": "the output of the last\ncopy, n over second copy, I guess you'd call it.",
    "start": "4543800",
    "end": "4550119"
  },
  {
    "text": "OK. So you can, of\ncourse, convert this",
    "start": "4550120",
    "end": "4555630"
  },
  {
    "text": "into bounded deterministic\nconstraint logic, where each edge only flips once. Once you have the synchronous\nversion of CVP, it's very easy.",
    "start": "4555630",
    "end": "4563084"
  },
  {
    "text": "I didn't draw a\nsynchronous picture here because it's tedious\nto draw these pictures. But if you just set these--\nwhichever the 1 bits are--",
    "start": "4563084",
    "end": "4570870"
  },
  {
    "text": "as your initially\nactive edges-- those are the ones that just\nflipped, just reversed, then things will just\npropagate and everything",
    "start": "4570870",
    "end": "4577040"
  },
  {
    "text": "will be timed exactly right,\nwhenever you arrive at a gate. Both of the inputs\nhave just activated. And then the output\nwill activate.",
    "start": "4577040",
    "end": "4582880"
  },
  {
    "text": "So just like before. But now each edge only\nhas to reverse once. And you'll get the\nresults at the end.",
    "start": "4582880",
    "end": "4588420"
  },
  {
    "text": "So deciding whether\nthe last edge flips is the same as whether the\noutput was a 1 in the circuit.",
    "start": "4588420",
    "end": "4594540"
  },
  {
    "text": "Open problem, I guess, would\nbe to use bounded deterministic constrain logic to\nprove interesting games P-complete or interesting\nproblems P-complete.",
    "start": "4594540",
    "end": "4600909"
  },
  {
    "text": "That hasn't been done. But I have, for fun, an example\nof the P completeness-- P",
    "start": "4600910",
    "end": "4611510"
  },
  {
    "text": "hardness reduction. So suppose you want to\nfind an independence set.",
    "start": "4611510",
    "end": "4616640"
  },
  {
    "text": "Independence set is hard. Suppose I want to find a\nmaximal independence set, an independence set where I\ncan't add anymore vertices.",
    "start": "4616640",
    "end": "4622770"
  },
  {
    "text": "So here's a way to do that. I start with nothing. I do a for loop.",
    "start": "4622770",
    "end": "4628090"
  },
  {
    "text": "Let's say the\nvertices are numbered. It's going to be important. And if I can add\nthat vertex, add it.",
    "start": "4628090",
    "end": "4638070"
  },
  {
    "text": "If V is not adjacent\nto S, add it. OK. I mean, this whole\nworld is weird",
    "start": "4638070",
    "end": "4643280"
  },
  {
    "text": "because it's all about\npolynomial time problems. Here's a polynomial\ntime algorithm. It produces what I would call\nthe lexically first maximal",
    "start": "4643280",
    "end": "4651600"
  },
  {
    "text": "independence set because\nit adds 1, if it can. And then, subject to that, it\nadds 2 if it can, and so on.",
    "start": "4651600",
    "end": "4658550"
  },
  {
    "text": "I will always add one, I guess. So with this\nlabeling of vertices, it finds the lexically\nsmallest one.",
    "start": "4658550",
    "end": "4665810"
  },
  {
    "text": "Suppose you want to find\nthe lexically smallest maximal independence set. finding a maximal independence\nset can be done in parallel.",
    "start": "4665810",
    "end": "4673050"
  },
  {
    "text": "But finding the lexically\nsmallest one cannot. This is P-complete. ",
    "start": "4673050",
    "end": "4681570"
  },
  {
    "text": "And the reduction is super cute.  Reduction from NOR CVP.",
    "start": "4681570",
    "end": "4693800"
  },
  {
    "text": "Suppose I give\nyou a NOR circuit, and I want to know whether\nthe output becomes true.",
    "start": "4693800",
    "end": "4699710"
  },
  {
    "text": "What I'm going to do is\nbuild a special vertex, called 0, which is connected\nto all of the 0 inputs.",
    "start": "4699710",
    "end": "4711180"
  },
  {
    "text": "So the circuit has 0\ninputs and 1 inputs. I'm going to make the\ninputs into nodes. OK?",
    "start": "4711180",
    "end": "4716560"
  },
  {
    "text": "And so there are some 1 nodes. Those are just\ngoing to be nodes. They connect to\nwhatever the gates are.",
    "start": "4716560",
    "end": "4723280"
  },
  {
    "text": "Then these things are combined\nwith various gates, and so on. I'm just going to replace\na gate with a node.",
    "start": "4723280",
    "end": "4728450"
  },
  {
    "text": "I'm going to replace\nan input with a node. And I'm going to add\na special node, 0, which is numbered\nfirst, that connects",
    "start": "4728450",
    "end": "4735080"
  },
  {
    "text": "to all of the 0 inputs. And then I'm also going\nto order the vertices",
    "start": "4735080",
    "end": "4741570"
  },
  {
    "text": "in a topological sort. So this will have\nthe earliest number. Then these guys. And so on.",
    "start": "4741570",
    "end": "4747380"
  },
  {
    "text": "So any topological sort. Lemma topological sorting\ncan be done in parallel. There's an NC algorithm\nfor topological sorting.",
    "start": "4747380",
    "end": "4754250"
  },
  {
    "text": "We need that here because this\nreduction has to be in NC. But once you do\nthat, I claim that V",
    "start": "4754250",
    "end": "4763570"
  },
  {
    "text": "will be in S if, and only\nif, that gate outputs a 1.",
    "start": "4763570",
    "end": "4769000"
  },
  {
    "text": " Proof by induction. So initially, this\nis going to be",
    "start": "4769000",
    "end": "4775240"
  },
  {
    "text": "put in the independent set,\nwhich means these guys won't, but these guys will because\nthey're lexically first--",
    "start": "4775240",
    "end": "4781520"
  },
  {
    "text": "or they're first in\nthe topological order-- and then induction. ",
    "start": "4781520",
    "end": "4786992"
  },
  {
    "text": "There's only one\ntype of gate here. It's a NOR. So basically, this\nguy will be circled if, and only if, neither\nof the inputs are circles.",
    "start": "4786992",
    "end": "4796000"
  },
  {
    "text": "So that's a NOR. And so then the\ndecision question is there's some last thing\ncorresponding to the output. It's going to be circled if, and\nonly if, the circuit outputs 1.",
    "start": "4796000",
    "end": "4803940"
  },
  {
    "text": "And that's it. It's kind of a\nbeautiful reduction. And I just, for fun, I have a\nlist of some more P-complete",
    "start": "4803940",
    "end": "4809760"
  },
  {
    "text": "problems without proofs. Game of Life, obviously. When you're given a time bound\nthat is written in unary,",
    "start": "4809760",
    "end": "4816930"
  },
  {
    "text": "and I want to know, is this\ncell alive at time t, where t is written in unary, by\nthe proof we did already,",
    "start": "4816930",
    "end": "4822940"
  },
  {
    "text": "that's P-complete. And just, it's with\nthe unary version. Also, one-dimensional\ncellular automata.",
    "start": "4822940",
    "end": "4829639"
  },
  {
    "text": "Same kind of thing. Generalize geography. Remember that PSPACE\ncomplete problem. But if you have an\nacyclic directed graph,",
    "start": "4829640",
    "end": "4836845"
  },
  {
    "text": "and you want to solve\ngeography on an acyclic directed graph-- so it's\na two player game-- that can be done in polynomial time.",
    "start": "4836846",
    "end": "4843460"
  },
  {
    "text": "But it's P-complete. If I have a point\nset in the plane, and I compute the convex\nhull, remove those points,",
    "start": "4843460",
    "end": "4850635"
  },
  {
    "text": "compute the convex hull,\nremove those points, it's called an onion peeling. And given a point, I want to\nknow, is it on the k-th layer",
    "start": "4850635",
    "end": "4858010"
  },
  {
    "text": "for some value k,\nthat's P-complete. Basically, you have to\nsequentially compute the convex hulls.",
    "start": "4858010",
    "end": "4864580"
  },
  {
    "text": "Another good canonical\none is multilist ranking. Suppose I give you k, say,\nsorted lists of numbers,",
    "start": "4864580",
    "end": "4871230"
  },
  {
    "text": "and I want to know,\ngiven an item, what is its rank in\nthe union of the lists?",
    "start": "4871230",
    "end": "4877610"
  },
  {
    "text": "So items can appear\nin multiple lists. And I want to know, is it the\nkth item, in sorted order,",
    "start": "4877610",
    "end": "4883210"
  },
  {
    "text": "in the union? So basically, I want\nto sort the union. That's P-complete.",
    "start": "4883210",
    "end": "4889070"
  },
  {
    "text": "If I want to compute A mod\nB1, mod B2, mod B3, mod B4, n times-- so the\nrepeated mod-- I",
    "start": "4889070",
    "end": "4895660"
  },
  {
    "text": "want to know whether that\nequals 0, that's P-complete. If I wanted to--\nlinear programming,",
    "start": "4895660",
    "end": "4901270"
  },
  {
    "text": "that's polynomial time. This is P-complete, even when\nthe coefficients are 0 and 1. So this is called\nstrongly P-complete.",
    "start": "4901270",
    "end": "4908220"
  },
  {
    "text": "You don't need large numbers,\nwhereas something like max flow",
    "start": "4908220",
    "end": "4913560"
  },
  {
    "text": "is weakly P-complete and can be,\nin the analogy to full P test--",
    "start": "4913560",
    "end": "4919657"
  },
  {
    "text": "fully polynomial time\napproximation scheme-- there is a fully RNC\napproximation scheme. R means there's randomization.",
    "start": "4919657",
    "end": "4926620"
  },
  {
    "text": "I think it's open, whether\nyou can get rid of that. There's some fun open problems,\nlike deciding whether two numbers are relatively prime.",
    "start": "4926620",
    "end": "4932860"
  },
  {
    "text": "It's conjectured\nto be P-complete. But we don't know. Computing A or the B mod C is\nconjectured to be P-complete.",
    "start": "4932860",
    "end": "4940440"
  },
  {
    "text": "Maximum matching is conjectured\nto be-- with large edge weights, it's conjectured\nto be P-complete.",
    "start": "4940440",
    "end": "4946860"
  },
  {
    "text": "But there is a\npseudo RNC algorithm. So if the weights are small,\nand you allow randomization,",
    "start": "4946860",
    "end": "4953980"
  },
  {
    "text": "then it's parallelizable. Another open problem\nis graph isomorphism with bounded degree,\nwhich is polynomial time.",
    "start": "4953980",
    "end": "4961328"
  },
  {
    "text": "I didn't know that. But bounded degree\ngraph isomorphism is easy in a serial setting. But a conjecture is it's\nhard in a parallel setting.",
    "start": "4961329",
    "end": "4967770"
  },
  {
    "text": "So lots of things out there. I don't see too many\npapers about P completeness",
    "start": "4967770",
    "end": "4973290"
  },
  {
    "text": "these days. But it's a fun thing. Once you decide your problem is\nin P, next thing, next level,",
    "start": "4973290",
    "end": "4978790"
  },
  {
    "text": "you can find hardness\nanywhere, it turns out. Next thing is to prove P\ncompleteness for your problem,",
    "start": "4978790",
    "end": "4984234"
  },
  {
    "text": "make sure there's no\nparallel algorithm, or find an NC algorithm. If you do the upper bound\nside, once you have NC,",
    "start": "4984234",
    "end": "4989780"
  },
  {
    "text": "you want to get the\nsmallest depth possible. That's another story. Cool.",
    "start": "4989780",
    "end": "4995140"
  },
  {
    "text": "That's it for today. ",
    "start": "4995140",
    "end": "5001648"
  }
]