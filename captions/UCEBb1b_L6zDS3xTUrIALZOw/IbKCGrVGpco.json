[
  {
    "start": "0",
    "end": "74000"
  },
  {
    "text": "A conceptual schematic for a multicore processor\nis shown below.",
    "start": "610",
    "end": "5000"
  },
  {
    "text": "To reduce the average memory access time,\neach of the four cores has its own cache,",
    "start": "5000",
    "end": "9990"
  },
  {
    "text": "which will satisfy most memory requests.",
    "start": "9990",
    "end": "13630"
  },
  {
    "text": "If there's a cache miss, a request is sent\nto the shared main memory.",
    "start": "13630",
    "end": "17060"
  },
  {
    "text": "With a modest number of cores and a good cache\nhit ratio, the number of memory requests that",
    "start": "17060",
    "end": "22890"
  },
  {
    "text": "must access main memory during normal operation\nshould be pretty small.",
    "start": "22890",
    "end": "27859"
  },
  {
    "text": "To keep the number of memory accesses to a\nminimum, the caches implement a write-back",
    "start": "27860",
    "end": "33320"
  },
  {
    "text": "strategy,\nwhere ST instructions update the cache, but",
    "start": "33320",
    "end": "36950"
  },
  {
    "text": "main memory is only updated when a dirty cache\nline is replaced.",
    "start": "36950",
    "end": "42240"
  },
  {
    "text": "Our goal is that each core should share the\ncontents of main memory, i.e., changes made",
    "start": "42240",
    "end": "46989"
  },
  {
    "text": "by one core should visible to all the other\ncores.",
    "start": "46989",
    "end": "51309"
  },
  {
    "text": "In the example shown here, core 0 is running\nThread A and core 1 is running Thread B.",
    "start": "51310",
    "end": "58329"
  },
  {
    "text": "Both threads reference two shared memory locations\nholding the values for the variables X and",
    "start": "58329",
    "end": "63600"
  },
  {
    "text": "Y.",
    "start": "63600",
    "end": "65510"
  },
  {
    "text": "The current values of X and Y are 1 and 2,\nrespectively.",
    "start": "65510",
    "end": "69890"
  },
  {
    "text": "Those values are held in main memory as well\nas being cached by each core.",
    "start": "69890",
    "end": "75120"
  },
  {
    "text": "What happens when the threads are executed?",
    "start": "75120",
    "end": "78090"
  },
  {
    "text": "Each thread executes independently, updating\nits cache during stores to X and Y.",
    "start": "78090",
    "end": "83500"
  },
  {
    "text": "For any possible execution order, either concurrent\nor sequential, the result is the same: Thread",
    "start": "83500",
    "end": "89241"
  },
  {
    "text": "A prints \"2\", Thread B prints \"1\".",
    "start": "89241",
    "end": "93049"
  },
  {
    "text": "Hardware engineers would point to the consistent\noutcomes and declare victory!",
    "start": "93050",
    "end": "98120"
  },
  {
    "text": "But closer examination of the final system\nstate reveals some problems.",
    "start": "98120",
    "end": "102840"
  },
  {
    "text": "After execution is complete, the two cores\ndisagree on the values of X and Y.",
    "start": "102840",
    "end": "107590"
  },
  {
    "text": "Threads running on core 0 will see X=3 and\nY=2.",
    "start": "107590",
    "end": "112240"
  },
  {
    "text": "Threads running on core 1 will see X=1 and\nY=4.",
    "start": "112240",
    "end": "117340"
  },
  {
    "text": "Because of the caches, the system isn't behaving\nas if there's a single shared memory.",
    "start": "117340",
    "end": "122590"
  },
  {
    "text": "On the other hand, we can't eliminate the\ncaches since that would cause the average",
    "start": "122590",
    "end": "126420"
  },
  {
    "text": "memory access time to skyrocket, ruining any\nhoped-for performance improvement from using",
    "start": "126420",
    "end": "131940"
  },
  {
    "text": "multiple cores.",
    "start": "131940",
    "end": "133849"
  },
  {
    "start": "133000",
    "end": "182000"
  },
  {
    "text": "What outcome should we expect?",
    "start": "133849",
    "end": "136310"
  },
  {
    "text": "One plausible standard of correctness is the\noutcome when the threads are run a single",
    "start": "136310",
    "end": "140650"
  },
  {
    "text": "timeshared core.",
    "start": "140650",
    "end": "143000"
  },
  {
    "text": "The argument would be that a multicore implementation\nshould produce the same outcome but more quickly,",
    "start": "143000",
    "end": "148460"
  },
  {
    "text": "with parallel execution replacing timesharing.",
    "start": "148460",
    "end": "151510"
  },
  {
    "text": "The table shows the possible results of the\ntimesharing experiment, where the outcome",
    "start": "151510",
    "end": "156569"
  },
  {
    "text": "depends on the order in which the statements\nare executed.",
    "start": "156569",
    "end": "160340"
  },
  {
    "text": "Programmers will understand that there is\nmore than one possible outcome and know that",
    "start": "160340",
    "end": "165230"
  },
  {
    "text": "they would have to impose additional constraints\non execution order, say, using semaphores,",
    "start": "165230",
    "end": "170640"
  },
  {
    "text": "if they wanted a specific outcome.",
    "start": "170640",
    "end": "173910"
  },
  {
    "text": "Notice that the multicore outcome of 2,1 doesn't\nappear anywhere on the list of possible outcomes",
    "start": "173910",
    "end": "180239"
  },
  {
    "text": "from sequential timeshared execution.",
    "start": "180239",
    "end": "183190"
  },
  {
    "start": "182000",
    "end": "222000"
  },
  {
    "text": "The notion that executing N threads in parallel\nshould correspond to some interleaved execution",
    "start": "183190",
    "end": "188330"
  },
  {
    "text": "of those threads on a single core is called\n\"sequential consistency\".",
    "start": "188330",
    "end": "193080"
  },
  {
    "text": "If multicore systems implement sequential\nconsistency, then programmers can think of",
    "start": "193080",
    "end": "197910"
  },
  {
    "text": "the systems as providing hardware-accelerated\ntimesharing.",
    "start": "197910",
    "end": "201230"
  },
  {
    "text": "So, our simple multicore system fails on two\naccounts.",
    "start": "201230",
    "end": "204870"
  },
  {
    "text": "First, it doesn't correctly implement a shared\nmemory since, as we've seen, it's possible",
    "start": "204870",
    "end": "209500"
  },
  {
    "text": "for the two cores to disagree about the current\nvalue of a shared variable.",
    "start": "209500",
    "end": "213780"
  },
  {
    "text": "Second, as a consequence of the first problem,\nthe system doesn't implement sequential consistency.",
    "start": "213780",
    "end": "219940"
  },
  {
    "text": "Clearly, we'll need to figure out a fix!",
    "start": "219940",
    "end": "223110"
  },
  {
    "start": "222000",
    "end": "350000"
  },
  {
    "text": "One possible fix is to give up on sequential\nconsistency.",
    "start": "223110",
    "end": "226890"
  },
  {
    "text": "An alternative memory semantics is \"weak consistency\",\nwhich only requires that the memory operations",
    "start": "226890",
    "end": "232150"
  },
  {
    "text": "from each thread appear to be performed in\nthe order issued by that thread.",
    "start": "232150",
    "end": "236239"
  },
  {
    "text": "In other words, in a weakly consistent system,\nif a particular thread writes to X and then",
    "start": "236239",
    "end": "241909"
  },
  {
    "text": "writes to Y, the possible outcomes from reads\nof X and Y by any thread would be one of",
    "start": "241909",
    "end": "247879"
  },
  {
    "text": "(unchanged X, unchanged Y),\nor (changed X, unchanged Y),",
    "start": "247879",
    "end": "253870"
  },
  {
    "text": "or (changed X, changed Y).",
    "start": "253870",
    "end": "257680"
  },
  {
    "text": "But no thread would see changed Y but unchanged\nX.",
    "start": "257680",
    "end": "262580"
  },
  {
    "text": "In a weakly consistent system, memory operations\nfrom other threads may overlap in arbitrary",
    "start": "262580",
    "end": "266948"
  },
  {
    "text": "ways (not necessarily consistent with any\nsequential interleaving).",
    "start": "266949",
    "end": "272470"
  },
  {
    "text": "Note that our multicore cache system doesn't\nitself guarantee even weak consistency.",
    "start": "272470",
    "end": "277819"
  },
  {
    "text": "A thread that executes \"write X; write Y\"\nwill update its local cache, but later cache",
    "start": "277819",
    "end": "283110"
  },
  {
    "text": "replacements may cause the updated Y value\nto be written to main memory before the updated",
    "start": "283110",
    "end": "288138"
  },
  {
    "text": "X value.",
    "start": "288139",
    "end": "290039"
  },
  {
    "text": "To implement weak consistency, the thread\nshould be modified to \"write X; communicate",
    "start": "290039",
    "end": "295460"
  },
  {
    "text": "changes to all other processors; write Y\".",
    "start": "295460",
    "end": "299270"
  },
  {
    "text": "In the next section, we'll discuss how to\nmodify the caches to perform the required",
    "start": "299270",
    "end": "303149"
  },
  {
    "text": "communication automatically.",
    "start": "303149",
    "end": "306800"
  },
  {
    "text": "Out-of-order cores have an extra complication\nsince there's no guarantee that successive",
    "start": "306800",
    "end": "311020"
  },
  {
    "text": "ST instructions will complete in the order\nthey appeared in the program.",
    "start": "311020",
    "end": "316259"
  },
  {
    "text": "These architectures provide a BARRIER instruction\nthat guarantees that memory operations before",
    "start": "316259",
    "end": "320629"
  },
  {
    "text": "the BARRIER are completed before memory operation\nexecuted after the BARRIER.",
    "start": "320629",
    "end": "325779"
  },
  {
    "text": "There are many types of memory consistency\n- each commercially-available multicore system",
    "start": "325779",
    "end": "331638"
  },
  {
    "text": "has its own particular guarantees about what\nhappens when.",
    "start": "331639",
    "end": "335409"
  },
  {
    "text": "So the prudent programmer needs to read the\nISA manual carefully to ensure that her program",
    "start": "335409",
    "end": "342610"
  },
  {
    "text": "will do what she wants.",
    "start": "342610",
    "end": "344219"
  },
  {
    "text": "See the referenced PDF file for a very readable\ndiscussion about memory semantics in multicore",
    "start": "344219",
    "end": "350229"
  },
  {
    "text": "systems.",
    "start": "350229",
    "end": "350490"
  }
]