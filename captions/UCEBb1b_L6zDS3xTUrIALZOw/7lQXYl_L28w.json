[
  {
    "start": "0",
    "end": "23000"
  },
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "7029"
  },
  {
    "text": "continue to offer high-quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "7030",
    "end": "13990"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13990",
    "end": "24090"
  },
  {
    "start": "23000",
    "end": "152000"
  },
  {
    "text": "ERIC GRIMSON: Last\ntime, we started talking about complexity. And I want to quickly\nremind you of what",
    "start": "24090",
    "end": "29700"
  },
  {
    "text": "we're doing, because we're\ngoing to talk some more about that today. And when I say \"complexity,\"\nit was the question of,",
    "start": "29700",
    "end": "35940"
  },
  {
    "text": "can we estimate the amount\nof resources-- typically time-- that we're going to need\nto get an algorithm to solve",
    "start": "35940",
    "end": "43230"
  },
  {
    "text": "a problem of a particular size? And we talked about\nthat both in terms of estimating, how much\ntime is it going to take",
    "start": "43230",
    "end": "51210"
  },
  {
    "text": "and using it to go\nthe other direction and think about how design\nchoices in an algorithm",
    "start": "51210",
    "end": "56790"
  },
  {
    "text": "have implications for\nthe cost that's going to be associated with that. So we introduced\nthe idea of what",
    "start": "56790",
    "end": "62700"
  },
  {
    "text": "we call big O notation,\norders of growth, a way of measuring complexity. And we started talking\nabout different classes",
    "start": "62700",
    "end": "69750"
  },
  {
    "text": "of algorithms. So today, I'm going to quickly\nrecap those basic ideas.",
    "start": "69750",
    "end": "75012"
  },
  {
    "text": "And what we're\ngoing to do is we're going to see examples of\nstandard classes of algorithms with the idea that\nyou're going to want",
    "start": "75012",
    "end": "81420"
  },
  {
    "text": "to begin to recognize when an\nalgorithm is in that class.",
    "start": "81420",
    "end": "86430"
  },
  {
    "text": "So very quick recap-- I've\nalready said part of this. We want to have a mechanism,\na method for being",
    "start": "86430",
    "end": "93990"
  },
  {
    "text": "able to estimate\nor reason about, how much time do we think\nan algorithm's going to take to solve a problem\nof a particular size.",
    "start": "93990",
    "end": "101910"
  },
  {
    "text": "And especially as we increase\nthe size of the input to the algorithm,\nwhat does that do in terms of the increase in the\namount of time that we need?",
    "start": "101910",
    "end": "110950"
  },
  {
    "text": "Some ways, we don't care\nabout exact versions. In a second, we're going to\nsee the definition of this. But what we care about\nis that notion of,",
    "start": "110950",
    "end": "117078"
  },
  {
    "text": "how does it grow as we\nincrease the problem size. And what we're going\nto focus in going, if you like, in the forward\ndirection-- as I said,",
    "start": "117078",
    "end": "125070"
  },
  {
    "text": "a lot of the\ninterest is actually thinking about what\nyou might think of as the backwards\nor reverse direction.",
    "start": "125070",
    "end": "130710"
  },
  {
    "text": "How does a choice in algorithm\ndesign impact efficiency",
    "start": "130710",
    "end": "136470"
  },
  {
    "text": "of the algorithm? And really, what\nwe want you to do is to begin to recognize\nstandard patterns,",
    "start": "136470",
    "end": "142629"
  },
  {
    "text": "that, if you make a\nparticular choice, this fits in a class of\nalgorithms you've seen before. And I know, in essence, how\nmuch time-- what the cost is",
    "start": "142630",
    "end": "150640"
  },
  {
    "text": "going to be as I do that. All right, so just to recap,\nas it says on the top,",
    "start": "150640",
    "end": "156340"
  },
  {
    "text": "we talked about\norders of growth. And the idea is, we want to be\nable to evaluate a program's",
    "start": "156340",
    "end": "161879"
  },
  {
    "text": "efficiency when the\ninput is very big. We talked about timing\nthings just with a timer.",
    "start": "161880",
    "end": "167110"
  },
  {
    "text": "We suggested that,\nunfortunately, conflates the algorithm\nwith the implementation",
    "start": "167110",
    "end": "172500"
  },
  {
    "text": "with the particular machine. We want to get rid\nof those latter two and just focus on the algorithm. So we're going to talk\nabout counting operations,",
    "start": "172500",
    "end": "179970"
  },
  {
    "text": "but in a very general sense. So we're going to\nexpress what we call the growth of\nthe program's runtime",
    "start": "179970",
    "end": "185940"
  },
  {
    "text": "as the input size\ngrows very large. And because we're\nonly interested not in the exact\nnumber, but in, if you",
    "start": "185940",
    "end": "193440"
  },
  {
    "text": "like, the growth of\nthat, we're going to focus on putting\nan upper bound on the growth, an expression\nthat grows at least as",
    "start": "193440",
    "end": "200100"
  },
  {
    "text": "fast as what the cost\nof the algorithm is. Now, you could just cheat and\npick a really big upper bound.",
    "start": "200100",
    "end": "206759"
  },
  {
    "text": "That doesn't help us very much. So in general, we're\ngoing to try and use as tight an upper\nbound as we can. What's the class of\nalgorithm it falls in?",
    "start": "206759",
    "end": "214920"
  },
  {
    "text": "But as we've seen before, we\ncare about the order of growth, not being exact. So if something grows\nas 2 to the n plus 5n,",
    "start": "214920",
    "end": "223319"
  },
  {
    "text": "I don't care about the 5n. Because when n gets\nbig, that 2 to the n is the really big factor. And therefore we're going to\nlook at the largest factors",
    "start": "223320",
    "end": "230430"
  },
  {
    "text": "when we think about that. We've seen some examples. We're going to do a\nbunch more examples today to fill those in.",
    "start": "230430",
    "end": "236680"
  },
  {
    "start": "232000",
    "end": "307000"
  },
  {
    "text": "One of the things\nthat we want to now do is say, with that\nidea in mind, there are classes of\ncomplexity of algorithms.",
    "start": "236680",
    "end": "244730"
  },
  {
    "text": "So in some sense, the best\nones are way up here, O of 1, order 1, constant.",
    "start": "244730",
    "end": "250930"
  },
  {
    "text": "It says cost doesn't change as\nI change the size of the input. That's great.",
    "start": "250930",
    "end": "256328"
  },
  {
    "text": "It's always going\nto be the same cost. Order log n says the cost\ngrows logarithmically",
    "start": "256329",
    "end": "262780"
  },
  {
    "text": "with the size of the input. It's a slow growth, and\nI'm going to remind you of that in a second.",
    "start": "262780",
    "end": "267910"
  },
  {
    "text": "We saw lots of examples of\nlinear running time-- we're going to see a few more today--\nwhat we call log-linear,",
    "start": "267910",
    "end": "274270"
  },
  {
    "text": "polynomial, and exponential. And the thing I\nwant to remind you is that, ideally--\nwhoops, sorry--",
    "start": "274270",
    "end": "282520"
  },
  {
    "text": "we'd like our\nalgorithms to be as close to the top of this\ncategorization as we can. This is actually described in\nincreasing order of complexity.",
    "start": "282520",
    "end": "290960"
  },
  {
    "text": "Something that takes\nthe same amount of time no matter how big the input\nis, unless that amount of time is a couple of centuries, seems\nlike a really good algorithm",
    "start": "290960",
    "end": "298080"
  },
  {
    "text": "to have. Something that grows\nlinearly is not bad. Something that grows, as we've\nseen down here, exponentially",
    "start": "298080",
    "end": "304010"
  },
  {
    "text": "tends to say, this is\ngoing to be painful. And in fact, you can\nsee that graphically.",
    "start": "304010",
    "end": "310080"
  },
  {
    "start": "307000",
    "end": "362000"
  },
  {
    "text": "I'll just remind you here. Something that's constant\nsays, if I draw out the amount of time it\ntakes as a function",
    "start": "310080",
    "end": "315870"
  },
  {
    "text": "of the size of the\ninput, it doesn't change. Logarithmic glows-- gah,\nsorry-- grows very slowly.",
    "start": "315870",
    "end": "322889"
  },
  {
    "text": "Linear will grow,\nobviously, in a linear way. And I actually\nmisspoke last time.",
    "start": "322890",
    "end": "329929"
  },
  {
    "text": "I know it's rare for a professor\nto ever admit they misspeak, but I did. Because I said linear is, if you\ndouble the size of the input,",
    "start": "329929",
    "end": "336760"
  },
  {
    "text": "it's going to double the\namount of time it takes. Actually, that's an\nincorrect statement. Really, what I\nshould have said was,",
    "start": "336760",
    "end": "342550"
  },
  {
    "text": "the increment-- if I go\nfrom, say, 10 to 100, the increase in time-- is going\nto be the same as the increment",
    "start": "342550",
    "end": "348610"
  },
  {
    "text": "if I go from 100 to 1,000. Might be more than\ndouble depending on what the constant is. But that growth is linear.",
    "start": "348610",
    "end": "355532"
  },
  {
    "text": "If you want to think of\nit, take the derivative of time with respect\nto input size. It's just going\nto be a constant.",
    "start": "355532",
    "end": "361020"
  },
  {
    "text": "It's not going to change within. And of course, when\nwe get down to here, things like exponential,\nit grows really fast.",
    "start": "361020",
    "end": "366430"
  },
  {
    "text": "And just as a last\nrecap, again, I want to be towards\nthe top of that. There was my little\nchart just showing you",
    "start": "366430",
    "end": "373669"
  },
  {
    "text": "things that grow constant, log,\nlinear, log-linear, quadratic, and exponential.",
    "start": "373670",
    "end": "379510"
  },
  {
    "text": "If I go from n of 10, to\n100, to 1,000, to a million,",
    "start": "379510",
    "end": "384780"
  },
  {
    "text": "you see why I want to be\nat the top of that chart. Something up here that\ngrows logarithmically,",
    "start": "384780",
    "end": "389970"
  },
  {
    "text": "the amount of time grows very\nslowly as I increase the input. Down here, well, like\nit says, good luck.",
    "start": "389970",
    "end": "398010"
  },
  {
    "text": "It's going to grow\nup really quickly as I move up in that scale. I want to be at the top\nof this chart if I can.",
    "start": "398010",
    "end": "406669"
  },
  {
    "start": "405000",
    "end": "498000"
  },
  {
    "text": "OK, with that in mind,\nwhen I'm going to do today is show you examples filling\nin most of this chart.",
    "start": "406670",
    "end": "413229"
  },
  {
    "text": "We've already seen\nsome examples. We've seen examples of linear. We've seen examples\nof quadratic. I'm going to just\nremind you of those.",
    "start": "413230",
    "end": "418750"
  },
  {
    "text": "What I want to do\nis show you how you can begin to recognize\na choice of an algorithm in terms of where it lies.",
    "start": "418750",
    "end": "425650"
  },
  {
    "text": "So algorithms that are\nconstant complexity, they're kind of boring. They tend to be pretty simple.",
    "start": "425650",
    "end": "431320"
  },
  {
    "text": "Because this says,\nthis code is going to run in, basically, the same\namount of time independent",
    "start": "431320",
    "end": "437410"
  },
  {
    "text": "of the size of the input. Now, notice the\nbottom thing here. It doesn't say you\ncan't-- blah, try again.",
    "start": "437410",
    "end": "444570"
  },
  {
    "text": "It doesn't say you couldn't\nhave a loop or a recursive call. You could, it's just that that\nloop cannot depend on the size",
    "start": "444570",
    "end": "452910"
  },
  {
    "text": "of the input. So there aren't many\ninteresting algorithms here. We're going to see pieces\nof code that fit into this",
    "start": "452910",
    "end": "460000"
  },
  {
    "text": "when we do our analysis. But something that's\nconstant in complexity says, independent of\nthe size of the input.",
    "start": "460000",
    "end": "467304"
  },
  {
    "text": "All right, a little more\ninteresting-- not a little, a lot more interesting--\nare algorithms that are logarithmic\nin their complexity.",
    "start": "467304",
    "end": "473870"
  },
  {
    "text": "So they're going to\ngrow with the logarithm of the size of the input. You saw an example much\nearlier in the term when Ana",
    "start": "473870",
    "end": "481690"
  },
  {
    "text": "showed you bisection search. It was searching for a number\nwith a particular property. I want to show you\nanother example,",
    "start": "481690",
    "end": "487450"
  },
  {
    "text": "both to let you recognize\nthe form of the algorithm, but especially, to show you how\nwe can reason about the growth.",
    "start": "487450",
    "end": "493210"
  },
  {
    "text": "And that's another trick\ncalled binary search or, again, it's a version\nof bisection search.",
    "start": "493210",
    "end": "499600"
  },
  {
    "start": "498000",
    "end": "557000"
  },
  {
    "text": "Suppose I give you a list,\na list of numbers, integers. And I want to know if\na particular element is",
    "start": "499600",
    "end": "505030"
  },
  {
    "text": "in that list. We saw, last time, you could\njust walk down the list, just iterate through the entire list\nlooking to see if it's there.",
    "start": "505030",
    "end": "513099"
  },
  {
    "text": "In the worst case, which\nis what we worry about, it's going to be linear. You're going to have to look\nat every element in the list",
    "start": "513100",
    "end": "518325"
  },
  {
    "text": "till you get to the end. So complexity was\nlinear in that case. And then we said, suppose we\nknow that the list is sorted.",
    "start": "518325",
    "end": "524620"
  },
  {
    "text": "It's ordered from\nsmallest to largest. And we saw, a simple\nalgorithm says, again,",
    "start": "524620",
    "end": "530140"
  },
  {
    "text": "walk down the list checking\nto see if it's there. But when you get to an element\nthat's bigger than the thing",
    "start": "530140",
    "end": "535540"
  },
  {
    "text": "you're looking at,\nyou can just stop. There's no reason to look\nat the rest of the list. They've all got to be\nbigger than the thing you're",
    "start": "535540",
    "end": "541779"
  },
  {
    "text": "searching for. Practically, in\nthe average case, that's going to be\nfaster than just looking",
    "start": "541780",
    "end": "547820"
  },
  {
    "text": "at an unsorted list. But the complexity\nis still linear. Because in the\nworst case, I've got",
    "start": "547820",
    "end": "553660"
  },
  {
    "text": "to go all the way\nthrough the list before I deduce that\nthe thing is not there.",
    "start": "553660",
    "end": "558760"
  },
  {
    "start": "557000",
    "end": "617000"
  },
  {
    "text": "OK, so even sequential\nsearch in an ordered list is still linear.",
    "start": "558760",
    "end": "563830"
  },
  {
    "text": "Can we do better? And the answer is, sure. So here's how we do better.",
    "start": "563830",
    "end": "570489"
  },
  {
    "text": "I'm going to take that list. I'm going to assume it's sorted. And I'm going to pick an index\nthat divides the list in half,",
    "start": "570489",
    "end": "577130"
  },
  {
    "text": "just pick the\nmidpoint in the list. And I'm going to\ncheck that value. I'm going to ask, is the element\nin the list at that point",
    "start": "577130",
    "end": "583800"
  },
  {
    "text": "the thing I'm looking for? If it is, great, I'm done. If I'm not that lucky,\nI'm then going to ask,",
    "start": "583800",
    "end": "590300"
  },
  {
    "text": "is it larger or smaller than\nthe thing I'm looking for? And based on that,\nI'm either going",
    "start": "590300",
    "end": "596530"
  },
  {
    "text": "to search the front half or\nthe back half of the list.",
    "start": "596530",
    "end": "602182"
  },
  {
    "text": "Ooh, that's nice, OK? Because if you think about\nit, in something that was just a linear algorithm,\nat each step,",
    "start": "602182",
    "end": "608960"
  },
  {
    "text": "I reduced the size\nthe problem by 1. I went from a problem of size n\nto a problem of size n minus 1",
    "start": "608960",
    "end": "615290"
  },
  {
    "text": "to a problem of size n minus 2. Here, I'm taking a\nproblem of size n.",
    "start": "615290",
    "end": "620579"
  },
  {
    "start": "617000",
    "end": "752000"
  },
  {
    "text": "I'm reducing it to\nn/2 in one step, because I can throw\nhalf the list away.",
    "start": "620580",
    "end": "626740"
  },
  {
    "text": "So this is a version\nof divide and conquer, things we've seen before. I'm breaking it down\ninto smaller versions of the problem.",
    "start": "626740",
    "end": "632680"
  },
  {
    "text": "So let's look at that. And then, let's write some code. And then, let's analyze it. So suppose I have a list\nof size n, all right?",
    "start": "632680",
    "end": "639300"
  },
  {
    "text": "There are n elements in there. I'm going to look at\nthe middle one, say, is it the thing I'm looking for.",
    "start": "639300",
    "end": "644430"
  },
  {
    "text": "If it's not, is it\nbigger than or less than the thing I'm looking for? And in this case, let's\nassume that, in fact,",
    "start": "644430",
    "end": "650650"
  },
  {
    "text": "the thing I'm looking for is\nsmaller than that element. Great. I'm going to throw\naway half the list.",
    "start": "650650",
    "end": "656470"
  },
  {
    "text": "Now I only have to look at\nthe lower half of the list. I'll do the same thing. I'll look at the element\nin the middle here.",
    "start": "656470",
    "end": "661990"
  },
  {
    "text": "And I'll say, is it the\nthing I'm looking for? If not, is it bigger\nthan or smaller than the thing I'm looking for?",
    "start": "661990",
    "end": "668060"
  },
  {
    "text": "OK, and I'm down\nto n/2 elements. And after I do that, I throw\naway half the list again.",
    "start": "668060",
    "end": "673535"
  },
  {
    "text": "In this case, I'm assuming\nthat the thing I'm looking for is bigger than\nthat middle point.",
    "start": "673535",
    "end": "678819"
  },
  {
    "text": "Until I find it,\nat each step, I'm looking at the middle element. And I'm either throwing\naway the left half or the right half of that list.",
    "start": "678820",
    "end": "687880"
  },
  {
    "text": "So after i steps, I'm down to a\nlist of size n over 2 to the i.",
    "start": "687880",
    "end": "693931"
  },
  {
    "text": "Now, what's the worst case? The worst case is the\nelement's not in the list. I'm going to have\nto keep doing this",
    "start": "693931",
    "end": "699410"
  },
  {
    "text": "until I get down to just\na list of one element. And at that point, if it's\nnot the thing I'm looking for,",
    "start": "699410",
    "end": "706060"
  },
  {
    "text": "I know I'm done, and I can stop. Different pattern-- notice\nhow I'm cutting down",
    "start": "706060",
    "end": "712102"
  },
  {
    "text": "the size of the problem by 2. So I can ask, before we\nlook at the code, what's the complexity of this?",
    "start": "712102",
    "end": "718050"
  },
  {
    "text": "How many steps do I have to\ngo through in the worst case? And I know I'm going to be\ndone looking at the list when",
    "start": "718050",
    "end": "724620"
  },
  {
    "text": "n over 2 to the i is\nequal to 1, meaning there's only one element left\nthat I'm still looking at.",
    "start": "724620",
    "end": "731340"
  },
  {
    "text": "And I can solve that. It says I'm going to have\nto take, at most, i equal to log n steps, all right?",
    "start": "731340",
    "end": "738060"
  },
  {
    "text": "So logarithmically,\nI'm cutting this down. And so the complexity\nof the recursion-- we haven't talked\nabout the code yet,",
    "start": "738060",
    "end": "744190"
  },
  {
    "text": "but in terms of\nthe number of steps I have to do in\nthe worst case-- is just logarithmic in\nthe length of the list.",
    "start": "744190",
    "end": "752470"
  },
  {
    "start": "752000",
    "end": "976000"
  },
  {
    "text": "That's nice. It's a lot better than looking\nat everything inside the list. And in fact, you\ncan see it, right?",
    "start": "752470",
    "end": "758100"
  },
  {
    "text": "I don't look at everything\ninside the list here. I'm throwing half the\nthings away at a time.",
    "start": "758100",
    "end": "763850"
  },
  {
    "text": "OK, so let's look at\nsome code to do that. Bisection search-- I'm going\nto give it a list of numbers. I'm going to give it\nsomething I'm looking for.",
    "start": "763850",
    "end": "771990"
  },
  {
    "text": "We can walk through this code. Hopefully it's\nsomething that you're going to be able to\nrecognize pretty clearly. It says if the list is\nempty, there's nothing there,",
    "start": "771990",
    "end": "778800"
  },
  {
    "text": "the thing I'm looking for\ncan't be there, I return False. If there's exactly one\nelement in the list,",
    "start": "778800",
    "end": "785970"
  },
  {
    "text": "then I just check it. If that thing's the thing\nI'm looking for, return True. Otherwise, return False.",
    "start": "785970",
    "end": "791040"
  },
  {
    "text": "So I'm just going to\nreturn the value there. Otherwise, find the midpoint--\nnotice the integer division",
    "start": "791040",
    "end": "797210"
  },
  {
    "text": "here-- find the midpoint\nin that list and check it. In particular, say, if\nthe thing at the midpoint",
    "start": "797210",
    "end": "804320"
  },
  {
    "text": "is bigger than the\nthing I'm looking for, then I'm going to\nreturn a recursive call",
    "start": "804320",
    "end": "809600"
  },
  {
    "text": "to this function only looking\nat the first half of the list. I'm just slicing into it.",
    "start": "809600",
    "end": "816210"
  },
  {
    "text": "Otherwise, I'll\ndo the same thing on the second half of the list.",
    "start": "816210",
    "end": "822160"
  },
  {
    "text": "Nice, this is implementing\nexactly what I said. We could actually try it. I'll do that in a\nsecond if I remember.",
    "start": "822160",
    "end": "828440"
  },
  {
    "text": "But let's think about\ncomplexity here. That's constant, right?",
    "start": "828440",
    "end": "834145"
  },
  {
    "text": "Doesn't depend on\nthe size of the list. That's constant, doesn't\ndepend on the size of the list.",
    "start": "834145",
    "end": "839340"
  },
  {
    "text": "That's consonant. Sounds good. And what about that?",
    "start": "839340",
    "end": "845730"
  },
  {
    "text": "Well, it looks like it\nshould be constant, right, other than the number of times\nI have to go through there. Remember, I know I'm going\nto have order log n recursive",
    "start": "845730",
    "end": "853850"
  },
  {
    "text": "calls. I'm looking at what's\nthe cost to set it up. It looks like it\nshould be constant. So does that.",
    "start": "853850",
    "end": "860260"
  },
  {
    "text": "But I'm going to claim it's not. Anybody see why it's not?",
    "start": "860260",
    "end": "865480"
  },
  {
    "text": "You can look at the slides\nyou've already printed out. Right there-- I'm actually\ncopying the list, all right?",
    "start": "865480",
    "end": "873520"
  },
  {
    "text": "When I slice into\nthe list like that, it makes a copy of the list. Oh, crud.",
    "start": "873520",
    "end": "880440"
  },
  {
    "text": "I was about to say\nsomething different, but I won't, because this is\ngoing to cost me a little bit",
    "start": "880440",
    "end": "885490"
  },
  {
    "text": "as I think about the work. So let's look at that a\nlittle more carefully.",
    "start": "885490",
    "end": "891139"
  },
  {
    "text": "I've got order log\nn search calls. We just deduced that.",
    "start": "891140",
    "end": "896380"
  },
  {
    "text": "I've just repeated\nit here, right? On each call, I'm reducing\nthe size of the list in half. So it goes from n, to n/2,\nto n/4, to n/8, to n/16.",
    "start": "896380",
    "end": "904380"
  },
  {
    "text": "I'll be done, in\nthe worst case, when I get down to having\nonly a list of size 1. That takes a log n steps,\nbecause n over 2 to the log n",
    "start": "904380",
    "end": "912280"
  },
  {
    "text": "is n/n, which is 1. But to set up the\nsearch for each cell,",
    "start": "912280",
    "end": "919459"
  },
  {
    "text": "I've got to copy the list. And the list starts out n\nlong, so in principle, I've got order n work to do to\nset up the recursive call.",
    "start": "919460",
    "end": "928730"
  },
  {
    "text": "And so by the things\nwe saw last time, I got order log n for the number\nof recursive calls times order",
    "start": "928730",
    "end": "934280"
  },
  {
    "text": "n work inside of each call. And that's order n log n.",
    "start": "934280",
    "end": "940430"
  },
  {
    "text": "So it's not what I wanted. Now, if you're thinking\nabout this carefully,",
    "start": "940430",
    "end": "945710"
  },
  {
    "text": "you'll realize, on each\nstep, I'm not actually copying the whole list. I'm copying half the list, and\nthen, a quarter of the list,",
    "start": "945710",
    "end": "952149"
  },
  {
    "text": "and then, an eighth of the list. So if I was actually\nreally careful-- I'm not going to do the math here--\nand in fact, what we'll see--",
    "start": "952150",
    "end": "958215"
  },
  {
    "text": "and if you like, in your copious\nspare time, you can go off and work this through--\nwhat you'll discover is that you're actually doing\norder n work to do the copying.",
    "start": "958215",
    "end": "967854"
  },
  {
    "text": "But that's still a\nproblem, because then, I've got something that's\norder n plus log n.",
    "start": "967854",
    "end": "973400"
  },
  {
    "text": "And the n is going to dominate,\nso this is still linear. Sounds like I led you\ndown a primrose path here.",
    "start": "973400",
    "end": "980150"
  },
  {
    "start": "976000",
    "end": "1247000"
  },
  {
    "text": "Can we fix this? Sure. Because we could\ndo the following.",
    "start": "980150",
    "end": "986280"
  },
  {
    "text": "We could say, when I want\nto look at that list, do I need to copy everything? What about if,\ninstead, I said, here's",
    "start": "986280",
    "end": "992510"
  },
  {
    "text": "the beginning and\nthe end of the list. When I test the middle, I'll\nmove one of the pointers",
    "start": "992510",
    "end": "997936"
  },
  {
    "text": "to the middle of the list. When I test the middle again,\nI'll move another pointer in. So in other words, I\ncan test the middle.",
    "start": "997937",
    "end": "1003220"
  },
  {
    "text": "And based on that,\nI could say, I only need to search this\npart of the list. Just keep track of that point\nand that point in the list.",
    "start": "1003220",
    "end": "1010630"
  },
  {
    "text": "And when I test the\nmiddle again, same idea. Now I'm not actually\ncopying the list,",
    "start": "1010630",
    "end": "1016540"
  },
  {
    "text": "I am simply keeping\ntrack of, where are the pieces of the\nlist that bound my search.",
    "start": "1016540",
    "end": "1024451"
  },
  {
    "text": "Ha, all right? I'm still reducing the size of\nthe problem by a factor of 2",
    "start": "1024451",
    "end": "1029740"
  },
  {
    "text": "at each step. That's great. All I'd need to do now,\nthough, is just keep track of which portion of\nthe list I'm searching.",
    "start": "1029740",
    "end": "1035770"
  },
  {
    "text": "I'm going to avoid\ncopying the list. So the number of\nrecursive calls, again, will be logarithmic.",
    "start": "1035770",
    "end": "1040869"
  },
  {
    "text": "Let's see if that\nactually fixes my problem.  A little bit of code, not\nas bad as it looks-- I've",
    "start": "1040869",
    "end": "1047760"
  },
  {
    "text": "got an internal function here\nthat I'm going to come back to. But let's look at what\nhappens in this case. I'm going to say, again,\nif there's nothing",
    "start": "1047760",
    "end": "1055260"
  },
  {
    "text": "in the list, just return False. Element can't possibly be there. Otherwise, call this\nfunction with the list,",
    "start": "1055260",
    "end": "1062700"
  },
  {
    "text": "the element for\nwhom I'm searching, and the beginning and end of\nthe list-- so 0 at one end,",
    "start": "1062700",
    "end": "1070380"
  },
  {
    "text": "length of n l minus\n1 at the other end. It's just that idea\nof, I'm keeping track of the two pieces, OK?",
    "start": "1070380",
    "end": "1076650"
  },
  {
    "text": "Now let's look at\nwhat this does. It says, here's the\nlow part of the list, the high part of the list. Initially, it's 0 and\nlength of list minus 1.",
    "start": "1076650",
    "end": "1084870"
  },
  {
    "text": "It says, if they are the\nsame, oh cool, then I've got a list of length 1.",
    "start": "1084870",
    "end": "1090410"
  },
  {
    "text": "Just test to see if it's\nthe thing I'm looking for. If they're not,\nfind the midpoint.",
    "start": "1090410",
    "end": "1097420"
  },
  {
    "text": "And the midpoint's\njust the average of low plus high, integer\ndivision by 2.",
    "start": "1097420",
    "end": "1102676"
  },
  {
    "text": "Think about it. If it's 0 and n,\nmidpoint is n/2. But if it's, for example,\nn/2 and n, midpoint is 3/4 n.",
    "start": "1102676",
    "end": "1112800"
  },
  {
    "text": "So that mid picks\nthe middle point. If it's the thing I'm\nlooking for, great, I'm done.",
    "start": "1112800",
    "end": "1119120"
  },
  {
    "text": "Otherwise, check to see,\nis the thing at the middle bigger than or less than\nthe thing I'm looking for.",
    "start": "1119120",
    "end": "1124880"
  },
  {
    "text": "And based on that-- I'm going\nto skip this one for a second-- I'm either going to\nsearch everything",
    "start": "1124880",
    "end": "1129970"
  },
  {
    "text": "from the low point up\nto the middle point or from the middle point\nup to the high point.",
    "start": "1129970",
    "end": "1135820"
  },
  {
    "text": "And the last piece\nhere is, if, in fact, the low point and the\nmiddle point are the same, I've got a list of size 1.",
    "start": "1135820",
    "end": "1141940"
  },
  {
    "text": "There's nothing left to do. I'm done.  OK, I know it's a lot of code.",
    "start": "1141940",
    "end": "1148929"
  },
  {
    "text": "I would invite you just\nto walk through it. But I want to take you\nback again to just, simply, this point and say,\nhere's what we're doing.",
    "start": "1148929",
    "end": "1156590"
  },
  {
    "text": "We're starting off with pointers\nat the beginning and end of the list. We're testing the middle point. And based on that,\nwe're giving a call",
    "start": "1156590",
    "end": "1164180"
  },
  {
    "text": "where, now, the pointer is to\nthe beginning and the middle of the list, simply\npassing it down,",
    "start": "1164180",
    "end": "1169780"
  },
  {
    "text": "and same as I go through\nall of these pieces. So that code now gives\nme what I'd like.",
    "start": "1169780",
    "end": "1176480"
  },
  {
    "text": "Because here, in the\nprevious case, I had a cost. The cost was to copy the list.",
    "start": "1176480",
    "end": "1183820"
  },
  {
    "text": "In this case, it's constant. Because what am I doing? I'm passing in three values.",
    "start": "1183820",
    "end": "1189190"
  },
  {
    "text": "And what does it take\nto compute those values? It's a constant amount of\nwork, because I'm simply computing mid right there, just\nwith an arithmetic operation.",
    "start": "1189190",
    "end": "1198660"
  },
  {
    "text": "And that means\norder log n steps, because I keep reducing\nthe problem in half.",
    "start": "1198660",
    "end": "1204690"
  },
  {
    "text": "And the cost at each\npoint is constant. And this is, as a consequence,\na really nice example",
    "start": "1204690",
    "end": "1211539"
  },
  {
    "text": "of a logarithmic\ncomplexity function.",
    "start": "1211540",
    "end": "1216930"
  },
  {
    "text": "Now, if you think about it, I'm\ncheating slightly-- second time today. Because we said we really don't\ncare about the implementation.",
    "start": "1216930",
    "end": "1224130"
  },
  {
    "text": "We want to get a sense of the\ncomplexity of the algorithm. And that's generally true. But here is a place in which\nthe implementation actually has",
    "start": "1224130",
    "end": "1231570"
  },
  {
    "text": "an impact on that complexity. And I want to be conscious of\nthat as I make these decisions.",
    "start": "1231570",
    "end": "1237450"
  },
  {
    "text": "But again, logarithmic\nin terms of number of steps, constant\nwork for each step,",
    "start": "1237450",
    "end": "1242540"
  },
  {
    "text": "because I'm just\npassing in values. And as a consequence, the\noverall algorithm is log.",
    "start": "1242540",
    "end": "1249060"
  },
  {
    "text": "Notice one other thing. I said I want you to see\ncharacteristics of algorithms",
    "start": "1249060",
    "end": "1254320"
  },
  {
    "text": "that tell you something\nabout the complexity of that algorithm. Something that's iterative and\nreduces the problem by size 1",
    "start": "1254320",
    "end": "1262220"
  },
  {
    "text": "each time, from n, to n minus\n1, to n minus 2-- linear. Something that reduces\nthe size of the problem",
    "start": "1262220",
    "end": "1269269"
  },
  {
    "text": "in half, or in thirds, or\nin quarters each time-- logarithmic,\ngenerally, unless I've",
    "start": "1269270",
    "end": "1275740"
  },
  {
    "text": "got a hidden cost somewhere. Here's another\nlittle example just",
    "start": "1275740",
    "end": "1280980"
  },
  {
    "text": "to give you a sense of log. I want to convert an\ninteger to a string. I know I can just\ncall str() on it.",
    "start": "1280980",
    "end": "1287510"
  },
  {
    "text": "But how might we do that\ninside of the machine? Well, here's a nice\nlittle algorithm for it. I'm going to set up\nsomething I call digits.",
    "start": "1287510",
    "end": "1294390"
  },
  {
    "text": "It's just a string\nof all the digits. If the thing I'm\ntrying to convert is 0, I just return the string \"0\".",
    "start": "1294390",
    "end": "1301060"
  },
  {
    "text": "Otherwise, let's run\nthrough a little loop where I take that\ninteger divided",
    "start": "1301060",
    "end": "1307480"
  },
  {
    "text": "by 10, the remainder of that. What is that? Oh, that's the zeroth or the\n1-order, the first order bit.",
    "start": "1307480",
    "end": "1315640"
  },
  {
    "text": "And I'm going to index\ninto digits to find that. And I'm going to add it on to\na string that I'm [INAUDIBLE].",
    "start": "1315640",
    "end": "1321755"
  },
  {
    "text": "And I'll divide i by 10. So this says,\ngiven an integer, I",
    "start": "1321755",
    "end": "1327840"
  },
  {
    "text": "want to convert it to a string. I divide the integer by\n10, take the remainder. That gives me the zeroth, or\nif you like, the ones element.",
    "start": "1327840",
    "end": "1336065"
  },
  {
    "text": "I index into the\nstring, and I record it. And then I add it to what\nI get by dividing i by 10",
    "start": "1336065",
    "end": "1342528"
  },
  {
    "text": "and doing the same thing. So I'll just walk down\neach of the digits, converting it into a string. ",
    "start": "1342529",
    "end": "1350380"
  },
  {
    "text": "What I care about is the\norder of growth here. This is all constant. All I want to worry about\nhere is, how many times",
    "start": "1350380",
    "end": "1357570"
  },
  {
    "text": "do I go through the loop. And inside of the loop,\nthis is just constant. It doesn't depend on\nthe size of the integer.",
    "start": "1357570",
    "end": "1365820"
  },
  {
    "text": "So how many times do\nI go through the loop? Well, how many times\ncan I divide i by 10?",
    "start": "1365820",
    "end": "1373140"
  },
  {
    "text": "And that's log of i, right? So it's not i itself. It's not the size\nof the integer.",
    "start": "1373140",
    "end": "1378539"
  },
  {
    "text": "It's the number of\ndigits in the integer. And here's another\nnice example of log.",
    "start": "1378540",
    "end": "1385310"
  },
  {
    "text": "I'll point you,\nagain, right here. I'm reducing the\nsize of the problem",
    "start": "1385311",
    "end": "1391350"
  },
  {
    "text": "by a constant\nfactor-- in this case, by 10-- each time--\nnice characteristic of a logarithmic algorithm.",
    "start": "1391350",
    "end": "1399870"
  },
  {
    "text": "OK, we've got constant. We've got log. What about linear?",
    "start": "1399870",
    "end": "1405590"
  },
  {
    "text": "We saw it last time, right? Something like searching\na list in sequence was an example of\nsomething that was linear.",
    "start": "1405590",
    "end": "1411200"
  },
  {
    "text": "In fact, most of the\nexamples we saw last time were things with\niterative loops.",
    "start": "1411200",
    "end": "1416400"
  },
  {
    "text": "So for example, fact, written\nintuitively-- factorial, right-- n times n\nminus 1 times n minus 2",
    "start": "1416400",
    "end": "1422960"
  },
  {
    "text": "all the way down to 1. I set product to 1. I go for a loop where i\ngoes from 1 up to n minus 1,",
    "start": "1422960",
    "end": "1429290"
  },
  {
    "text": "or just below n minus\n1-- incrementally multiplying product by i and\nrestoring that back away.",
    "start": "1429290",
    "end": "1436197"
  },
  {
    "text": "Again, we know that this loop\nhere-- how many times do I go through it? I go through it n times. The cost inside the loop, there\nare three steps, changing i,",
    "start": "1436197",
    "end": "1444790"
  },
  {
    "text": "I'm multiplying product times\ni, I'm storing that value back in product. And as we saw, that\nconstant doesn't matter.",
    "start": "1444790",
    "end": "1450260"
  },
  {
    "text": "This is linear. So n times around the loop,\nconstant cost each time-- order n.",
    "start": "1450260",
    "end": "1456650"
  },
  {
    "text": "What about recursive? I could write fact recursively. I actually prefer\nit this way, right?",
    "start": "1456650",
    "end": "1463230"
  },
  {
    "text": "If n is less than or\nequal to 1, return 1. Otherwise, multiply\nn by whatever I get by calling this on n minus 1.",
    "start": "1463230",
    "end": "1472700"
  },
  {
    "text": "The cost inside the\nloop is just constant. I'm doing one subtraction,\none multiplication.",
    "start": "1472700",
    "end": "1478160"
  },
  {
    "text": "How many times I go through it? Again, n times, because I've\ngot to go from n to n minus 1 to n minus 2.",
    "start": "1478160",
    "end": "1484309"
  },
  {
    "text": "So again, this is linear. Now, if you were\nto time it, you'd",
    "start": "1484310",
    "end": "1490800"
  },
  {
    "text": "probably see a difference. My guess is-- I'm sure\nProfessor Guttag will correct me if I get it wrong-- is that\nthe factorial one probably",
    "start": "1490800",
    "end": "1497370"
  },
  {
    "text": "takes a little more\ntime, because you've got to set up the frame\nfor the recursive call. But in terms of what we care\nabout, they're the same.",
    "start": "1497370",
    "end": "1504817"
  },
  {
    "text": "They're both linear. They're order n. And so interestingly, both\niterative and recursive factorial have same\norder of growth.",
    "start": "1504817",
    "end": "1513580"
  },
  {
    "text": "Again, I want you to\nnotice, what's the key here. Reducing the size of the problem\nby 1 is indicative, generally,",
    "start": "1513580",
    "end": "1521890"
  },
  {
    "text": "of something that's going\nto have linear growth. I say in general. If it's a loop inside\nof a loop, as we saw,",
    "start": "1521890",
    "end": "1527380"
  },
  {
    "text": "it might be a little bigger. But this is generally linear.  Constant, log, linear,\nlog-linear-- that is,",
    "start": "1527380",
    "end": "1537370"
  },
  {
    "text": "n log n-- we're going\nto see this next time. I'm certainly going\nto push it ahead. It invites you to come back\non Wednesday and see this.",
    "start": "1537370",
    "end": "1544750"
  },
  {
    "text": "It's actually something that's\na really powerful algorithm. It's going to be really useful. We're going to look\nat something called",
    "start": "1544750",
    "end": "1550155"
  },
  {
    "text": "merge sort, which is a very\ncommon sorting algorithm and has that property\nof being log-linear. So we'll come back\nto this next time.",
    "start": "1550155",
    "end": "1557616"
  },
  {
    "text": "How about polynomial? Well, we saw this\nlast time as well.",
    "start": "1557616",
    "end": "1563260"
  },
  {
    "text": "This commonly occurs\nwhen we have nested loops or where we have nested\nrecursive function",
    "start": "1563260",
    "end": "1569290"
  },
  {
    "text": "calls-- nested loop meaning\nI'm looping over some variable, and inside of there,\nI've got another loop.",
    "start": "1569290",
    "end": "1575500"
  },
  {
    "text": "And what we saw\nis the outer loop, if it's a standard iterative\nthing, will be linear. But inside of the loop, I'm\ndoing a linear amount of work",
    "start": "1575500",
    "end": "1582760"
  },
  {
    "text": "each time. So it becomes n times\nn, so order n squared.",
    "start": "1582760",
    "end": "1587890"
  },
  {
    "text": "OK, exponential-- these\nare things-- sorry,",
    "start": "1587890",
    "end": "1597044"
  },
  {
    "text": "yes, I did that right. I'm going to go back to it. Exponential-- these are things\nthat we'd like to stay away from, but sometimes, we can't.",
    "start": "1597044",
    "end": "1602900"
  },
  {
    "text": "And a common\ncharacteristic here is when we've got a\nrecursive function where there's more\nthan one recursive",
    "start": "1602900",
    "end": "1609130"
  },
  {
    "text": "call inside the problem. Remember Towers of Hanoi, that\nwonderful demonstration I did.",
    "start": "1609130",
    "end": "1616085"
  },
  {
    "text": "I was tempted to bring it\nback, because it's always fun to get a little bit\nof applause when I do it. But I won't do it this time. But remember, we\nlooked at that problem",
    "start": "1616085",
    "end": "1622749"
  },
  {
    "text": "of solving the Towers of Hanoi. How do I move a stack of size\nn of different-sized disks from one peg to another\nwhere I can only",
    "start": "1622749",
    "end": "1629730"
  },
  {
    "text": "move the top disk\nonto another one and I can't cover\nup a smaller disk? Want to remind\nyou, we saw, there",
    "start": "1629730",
    "end": "1635580"
  },
  {
    "text": "was a wonderful recursive\nsolution to that. It said, move a stack of size\nn minus 1 onto the spare peg.",
    "start": "1635580",
    "end": "1643070"
  },
  {
    "text": "Move the bottom one. And then, move that stack\nover onto the thing you were headed towards, OK?",
    "start": "1643070",
    "end": "1650810"
  },
  {
    "start": "1649000",
    "end": "1891000"
  },
  {
    "text": "What's the complexity of that? Well, I'm going to show you a\ntrick for figuring that out.",
    "start": "1650810",
    "end": "1655816"
  },
  {
    "text": "It's called a\nrecurrence relation for a very deliberate reason. But it'll give us\na little, handy way to think about, what's\nthe order of growth here.",
    "start": "1655816",
    "end": "1663620"
  },
  {
    "text": "So I'm going to let t sub\nn denote the time it takes to move a tower of size n.",
    "start": "1663620",
    "end": "1669351"
  },
  {
    "text": "And I want to get\nan expression for, how much time is\nthat going to take. What do I know?",
    "start": "1669351",
    "end": "1675290"
  },
  {
    "text": "I know that's 2 times t\nto the n minus 1, right? I've got to move a stack of\nsize 1 less onto the spare peg,",
    "start": "1675290",
    "end": "1683210"
  },
  {
    "text": "and then, 1 to move that\nbottom thing over, and then, whatever it takes me to move\na stack of size n minus 1",
    "start": "1683210",
    "end": "1689330"
  },
  {
    "text": "over to that peg. OK, so how does that help me?",
    "start": "1689330",
    "end": "1694760"
  },
  {
    "text": "Well, let's play the same game. What's t of n minus 1? Oh, that's 2t of\nn minus 2 plus 1.",
    "start": "1694760",
    "end": "1703906"
  },
  {
    "text": "I'm just substituting in. I'm using exactly the\nsame relationship here.",
    "start": "1703906",
    "end": "1709080"
  },
  {
    "text": "All right, let's just do\na little math on that. That's 4t to the n\nminus 2 plus 2 plus 1.",
    "start": "1709080",
    "end": "1715400"
  },
  {
    "text": "And you're still\ngoing, OK, who cares. Well, let's do the same\nthing one more time.",
    "start": "1715400",
    "end": "1720670"
  },
  {
    "text": "t of n minus 2-- that's\n2t of n minus 3 plus 1.",
    "start": "1720670",
    "end": "1726582"
  },
  {
    "text": "Oh, see the pattern? You can start to see\nit emerge here, right?",
    "start": "1726582",
    "end": "1731940"
  },
  {
    "text": "Each time I reduce this, I'm\nadding another power of 2, and I'm increasing the\ncoefficient out front.",
    "start": "1731940",
    "end": "1739840"
  },
  {
    "text": "And so, in fact, after k\nsteps, I'll have 1 plus 2 plus 4 all the way up\nto 2 to the k minus 1",
    "start": "1739840",
    "end": "1746190"
  },
  {
    "text": "plus 2 to the k times\nt sub n minus k.",
    "start": "1746190",
    "end": "1751521"
  },
  {
    "text": "Hopefully you can see\nit if you just look. This expression is capturing\nall of those up there. I'm just pulling\nit out each time.",
    "start": "1751521",
    "end": "1759289"
  },
  {
    "text": "When am I done? When this is size 0,\nwhen k is equal to n.",
    "start": "1759290",
    "end": "1764702"
  },
  {
    "text": "And so that's when I\nget that expression. If this is going by too fast,\njust walk it through yourself",
    "start": "1764702",
    "end": "1772090"
  },
  {
    "text": "later on. But I'm literally just\nusing this expression to do the reduction\nuntil I see the pattern.",
    "start": "1772090",
    "end": "1777700"
  },
  {
    "text": "All right, what's that? Well, if your Course 18\nmajor, you've seen it before.",
    "start": "1777700",
    "end": "1783169"
  },
  {
    "text": "If you haven't, here's\na nice, little trick. Let me let a equal that sum,\n2 to the n minus 1 plus 2",
    "start": "1783170",
    "end": "1790110"
  },
  {
    "text": "to the n minus 2 all\nthe way down to 1. Let me multiply both the\nleft and the right side by 2.",
    "start": "1790110",
    "end": "1796670"
  },
  {
    "text": "That gives me, 2a is equal\nto 2 to the n plus 2 to the n minus 1 all the way down to 2.",
    "start": "1796670",
    "end": "1801760"
  },
  {
    "text": "I'm just taking\neach of the terms and multiplying them by 2. Now subtract this from that.",
    "start": "1801760",
    "end": "1809575"
  },
  {
    "text": "And then on the left\nside, you get a. And on the right side,\nyou get that term. These all cancel out minus\n1-- geometric series, cool.",
    "start": "1809575",
    "end": "1819840"
  },
  {
    "text": "So that sum is just\n2 to the n minus 1. And if I plug that\nback in there,",
    "start": "1819840",
    "end": "1825420"
  },
  {
    "text": "ah, I've got my order of\ngrowth, exponential, 2 to the n.",
    "start": "1825420",
    "end": "1830844"
  },
  {
    "text": " OK, I was a\nmath/physics undergrad. I like these kinds of things.",
    "start": "1830844",
    "end": "1837284"
  },
  {
    "text": "But I wanted you\nto see how we can reason through it, because this\nis letting us see the growth. What I want you to\npull away from this is,",
    "start": "1837284",
    "end": "1844250"
  },
  {
    "text": "notice the characteristic. In Towers of Hanoi--\nwe're going to do another example in a\nsecond-- the characteristic",
    "start": "1844250",
    "end": "1849620"
  },
  {
    "text": "was, at the recursive\nstep, I had not one, but two recursive calls.",
    "start": "1849620",
    "end": "1856270"
  },
  {
    "text": "And that is characteristic\nof something with exponential growth, which\nI just saw here, 2 to the n.",
    "start": "1856270",
    "end": "1862415"
  },
  {
    "text": "That, by the way,\nI'll remind you of the story of Towers of--\nTowers of Hanoi, right? When the priests in that temple\nmove the entire stack from one",
    "start": "1862415",
    "end": "1870380"
  },
  {
    "text": "peg to another, we all reach\nnirvana, and the world ends. n is equal to 64 here.",
    "start": "1870380",
    "end": "1877290"
  },
  {
    "text": "Go figure out what\n2 to the 64 is. And if you're doing one move\nper second, which they will,",
    "start": "1877290",
    "end": "1882580"
  },
  {
    "text": "I think we're certainly\ngoing to be here a while before the universe ends\nand we reach nirvana, probably several times over.",
    "start": "1882580",
    "end": "1889670"
  },
  {
    "text": "AUDIENCE: I thought we\nwere already in nirvana. ERIC GRIMSON: We are in\nnirvana, we're at MIT. You're right, John. But we're worrying about\nthe rest of the world.",
    "start": "1889670",
    "end": "1896018"
  },
  {
    "start": "1891000",
    "end": "2127000"
  },
  {
    "text": "So, OK, we'll keep moving on. Nirvana will be next week\nwhen they do the quiz, John. So we'll keep moving quickly.",
    "start": "1896018",
    "end": "1902130"
  },
  {
    "text": "All right. I want to show you\none more example. It's a cool problem\nfrom math, but mostly",
    "start": "1902130",
    "end": "1908019"
  },
  {
    "text": "to see that characteristic\nof exponential growth. And then we're going to\npull all of this together.",
    "start": "1908020",
    "end": "1913770"
  },
  {
    "text": "This is something\ncalled the power set. So if I have a set\nof things-- well, let's assume I have a set of\nintegers-- with no repeats--",
    "start": "1913770",
    "end": "1920779"
  },
  {
    "text": "so 1 through n, 1, 2,\n3, 4, for example-- I want to generate\nthe collection of all possible subsets--\nso subset with no elements,",
    "start": "1920780",
    "end": "1930927"
  },
  {
    "text": "with one element, with two\nelements, with three amounts, all the way up to n elements. So for example, if my\nset is 1 through 4,",
    "start": "1930927",
    "end": "1940710"
  },
  {
    "text": "then the power set\nwould be the empty set with no elements in it, all of\nthe instances with one element,",
    "start": "1940710",
    "end": "1947340"
  },
  {
    "text": "all of them with two,\nall of them with three, and all of them with four. I'd like to write\ncode to generate this.",
    "start": "1947340",
    "end": "1954470"
  },
  {
    "text": "It's actually handy problem in\nnumber theory or in set theory. By the way, the\norder doesn't matter.",
    "start": "1954470",
    "end": "1959620"
  },
  {
    "text": "I could do it this way, but this\nwould be a perfectly reasonable way of generating it as well. And I'm going to come\nback to that in a second",
    "start": "1959620",
    "end": "1965536"
  },
  {
    "text": "as we think about solving this. The question is, how would I\ngo about finding all of these. ",
    "start": "1965536",
    "end": "1972500"
  },
  {
    "text": "I'm going to use-- well,\nwe could stop and say, you could imagine writing\na big iterative loop.",
    "start": "1972500",
    "end": "1978310"
  },
  {
    "text": "You start with n, and you\ndecide, do I include it or not. And then you go to n minus 1. Do I include it or not?",
    "start": "1978310",
    "end": "1983590"
  },
  {
    "text": "And you could think about\nwriting a big loop that would generate all\nof these-- actually, a bunch of nested loops.",
    "start": "1983590",
    "end": "1989270"
  },
  {
    "text": "But there's a nice\nrecursive solution. And I want to encourage\nyou to think that way. So here's the way\nI'm going to do it.",
    "start": "1989270",
    "end": "1994918"
  },
  {
    "text": "What did we do when we said\nwe want to think recursively? We say, let's assume we can\nsolve a smaller size problem.",
    "start": "1994918",
    "end": "2002010"
  },
  {
    "text": "If I want to generate the\npower set of all the integers from 1 to n, I'm\ngoing to assume that I can generate the power set of\nintegers from 1 to n minus 1.",
    "start": "2002010",
    "end": "2011460"
  },
  {
    "text": "If I have that solution, then\nI can construct the solution to the bigger problem\nreally easily.",
    "start": "2011460",
    "end": "2019289"
  },
  {
    "text": "Wow. Well, all of the\nthings that were in that solution to\nthe smaller problem",
    "start": "2019290",
    "end": "2025750"
  },
  {
    "text": "have to be part of the\nsolution to the bigger problem. They're all subsets of\n1 to n, because they're all subsets of 1 to n minus 1.",
    "start": "2025750",
    "end": "2033560"
  },
  {
    "text": "So I'm going to\nadd all those in. And then I'm going to say,\nlet's take each one of those",
    "start": "2033560",
    "end": "2038840"
  },
  {
    "text": "and add n to each\nof those subsets. Because that gives me all\nthe rest of the solutions.",
    "start": "2038840",
    "end": "2044150"
  },
  {
    "text": "I've got all the ways to\nfind solutions without n. I get all the ways to\nfind solutions with n.",
    "start": "2044150",
    "end": "2049995"
  },
  {
    "text": "That may sound like a\nlot of gobbledygook, but let me show you the example. There is the power\nset of the empty set.",
    "start": "2049995",
    "end": "2056449"
  },
  {
    "text": "It's just the empty set. Get the power set of\n1, I include that,",
    "start": "2056449",
    "end": "2061869"
  },
  {
    "text": "and I include a version\nof everything there with 1 added to it. There's the power set of 1.",
    "start": "2061870",
    "end": "2069719"
  },
  {
    "text": "Now, given that, how do\nI get the power set of 2? Well, both of those are\ncertainly things I want.",
    "start": "2069719",
    "end": "2075719"
  },
  {
    "text": "And for each one of\nthem, let me just add 2. And if you look at\nthat, right, that's",
    "start": "2075719",
    "end": "2081810"
  },
  {
    "text": "the set of all ways of getting\nnothing, 1, 2, or both of them. And you get the idea.",
    "start": "2081810",
    "end": "2087190"
  },
  {
    "text": "Now, having that solution, I\ncan get the solution for 3, because all of those\nhave to belong. And I simply add 3\nto each one of those.",
    "start": "2087190",
    "end": "2098420"
  },
  {
    "text": "Oh, that's cool, right? All right, you don't have to be\na math geek to admit it's cool. It is kind of cool.",
    "start": "2098420",
    "end": "2103819"
  },
  {
    "text": "Because it says,\ngee, got a solution to the smaller problem. Generating the next\npiece is a natural step.",
    "start": "2103820",
    "end": "2112072"
  },
  {
    "text": "And you can also see,\nthe size of that set's doubling each time. Because you get to 4, I'm\ngoing to add everything",
    "start": "2112072",
    "end": "2117530"
  },
  {
    "text": "in to all of those pieces--\nreally nice recursive description.",
    "start": "2117530",
    "end": "2124640"
  },
  {
    "text": "Let's write some code. So I'll also hand it out to\nyou, but here's the code. And I'm going to walk\nthrough it carefully.",
    "start": "2124640",
    "end": "2131310"
  },
  {
    "start": "2127000",
    "end": "2294000"
  },
  {
    "text": "And then we're\ngoing to analyze it. But it's actually, for me,\na beautiful piece of code. I did not write it,\nby the way, John did.",
    "start": "2131310",
    "end": "2136860"
  },
  {
    "text": "But it's a beautiful\npiece of code. I want to generate all\nthe subsets with a power set of some list of elements.",
    "start": "2136860",
    "end": "2143960"
  },
  {
    "text": "Here's how I'm going to do it. I'm going to set up some\ninternal variable called res, OK?",
    "start": "2143960",
    "end": "2151809"
  },
  {
    "text": "And then, what am I going to do? Actually, I don't know\nwhy I put res in there. I don't need it. But we'll come back to that.",
    "start": "2151810",
    "end": "2156980"
  },
  {
    "text": "If the list is empty,\nlength of the list is 0,",
    "start": "2156980",
    "end": "2162190"
  },
  {
    "text": "I'm going to just\nreturn that solution. And this is not a typo.",
    "start": "2162190",
    "end": "2168700"
  },
  {
    "text": "What is that funky thing there? It is a list of one\nelement, which is the empty list, which I need.",
    "start": "2168700",
    "end": "2175540"
  },
  {
    "text": "Because the solution\nin this case is a set with nothing in it. So there is the thing I\nreturn in the base case.",
    "start": "2175540",
    "end": "2184360"
  },
  {
    "text": "Otherwise, what do I do? I take all the elements of\nthe list except the last one,",
    "start": "2184360",
    "end": "2191872"
  },
  {
    "text": "and I call it recursively. I generate all of\nthe subsets of that. Perfect, so I'm going\nto call that smaller.",
    "start": "2191872",
    "end": "2199099"
  },
  {
    "text": "I then take the last\nelement, and I make a list of just the last element.",
    "start": "2199100",
    "end": "2204447"
  },
  {
    "text": "And what did I say I need to do? I need all of these guys,\nplus I need all of them",
    "start": "2204447",
    "end": "2210010"
  },
  {
    "text": "where I add that\nelement in-- oh, nice. I'll set up new as\na variable here.",
    "start": "2210010",
    "end": "2215440"
  },
  {
    "text": "And I'll loop over\nall of the elements from the smaller problem,\nwhere I basically",
    "start": "2215440",
    "end": "2220510"
  },
  {
    "text": "add that list to that list. And I put it into new.",
    "start": "2220510",
    "end": "2226350"
  },
  {
    "text": "That's simply taking all\nof the solutions of subsets of up to n minus 1 and creating\na new set of subsets where n is",
    "start": "2226350",
    "end": "2232740"
  },
  {
    "text": "included in every one of them. And now I take this,\nand I take that.",
    "start": "2232740",
    "end": "2238220"
  },
  {
    "text": "I append them-- or\nconcatenate them, rather. I should say \"append them\"--\nconcatenate them together and return them.",
    "start": "2238220",
    "end": "2245020"
  },
  {
    "text": "That's a crisp piece of code. And I'm sorry, John, I have no\nidea why I put res up there.",
    "start": "2245020",
    "end": "2250660"
  },
  {
    "text": "I don't think I need that\nanywhere in this code. And I won't blame it on John. It was my recopying of the code. AUDIENCE: [INAUDIBLE] .",
    "start": "2250660",
    "end": "2256610"
  },
  {
    "text": "ERIC GRIMSON: Sorry? AUDIENCE: Maybe. ERIC GRIMSON: Maybe, right. Look, I know I'm flaming at you. I get to do it.",
    "start": "2256610",
    "end": "2261970"
  },
  {
    "text": "I'm tenured, as I've said\nmultiple times in this course. That's a cool piece of code.",
    "start": "2261970",
    "end": "2268780"
  },
  {
    "text": "Imagine trying to write it\nwith a bunch of loops iterating over indices. Good luck.",
    "start": "2268780",
    "end": "2274450"
  },
  {
    "text": "You can do it. Maybe it'll be on the quiz. Actually, no, it won't. That's way too hard to ask.",
    "start": "2274450",
    "end": "2279760"
  },
  {
    "text": "But it's a cool piece of\ncode, because I can look at it and say, what's the solution,\nsolve the smaller problem,",
    "start": "2279760",
    "end": "2286360"
  },
  {
    "text": "and then, given\nthat, take every one of the things in\nthat smaller problem, add that element into it, and\nput the two pieces together.",
    "start": "2286360",
    "end": "2293450"
  },
  {
    "text": "Wonderful. OK, with that in mind, let's\nsee if we can figure out",
    "start": "2293450",
    "end": "2299560"
  },
  {
    "start": "2294000",
    "end": "2635000"
  },
  {
    "text": "the complexity of this.  Up here, that's constant.",
    "start": "2299560",
    "end": "2305860"
  },
  {
    "text": "That's OK. Right there, I've got\nthe recursive call. So I know, first of\nall, that this is going",
    "start": "2305860",
    "end": "2312170"
  },
  {
    "text": "to call itself n times, right? Because each stage reduces\nthe size of the problem by 1.",
    "start": "2312170",
    "end": "2318509"
  },
  {
    "text": "So if I'm trying to\nget the power set of n, I'm going to have to\ndo it to get n minus 1, and then, n minus 2. So I know the recursion of\ngenSubsets() to genSubsets().",
    "start": "2318510",
    "end": "2326810"
  },
  {
    "text": "This is going to\ngo around n times. That's not so bad.",
    "start": "2326810",
    "end": "2332740"
  },
  {
    "text": "But right down here,\nI've got to figure out, what's the cost of\nthis, all right?",
    "start": "2332740",
    "end": "2339864"
  },
  {
    "text": "This is constant. That's setting up as constant. That's constant. But there, I've\ngot another loop.",
    "start": "2339864",
    "end": "2345359"
  },
  {
    "text": "And the loop depends\non how big smaller is. And \"smaller's\" a bad choice\nof term here, because it's",
    "start": "2345360",
    "end": "2351600"
  },
  {
    "text": "going to grow on me. But let's think about it. By the way, I'm assuming\nappend is constant time, which, generally, it is.",
    "start": "2351600",
    "end": "2358550"
  },
  {
    "text": "The time I need to\nsolve this problem includes the time to\nsolve the smaller problem.",
    "start": "2358550",
    "end": "2364350"
  },
  {
    "text": "That recursive call, I know\nthat's going to be linear. But I also need\nthe time it takes",
    "start": "2364350",
    "end": "2369359"
  },
  {
    "text": "to make the copy of all the\nthings in that smaller version. So how big is that?",
    "start": "2369360",
    "end": "2376510"
  },
  {
    "text": "Oh, crud number two-- number\nof things in the power set",
    "start": "2376510",
    "end": "2382060"
  },
  {
    "text": "grows as a factor of 2, right? If I've got something of,\nyou know, 1 through 3, I've got all the things\nwith nothing in it,",
    "start": "2382060",
    "end": "2387970"
  },
  {
    "text": "all the things with one\nin it, all the things with two things in it, all the\nthings with three things in it. That's 8.",
    "start": "2387970",
    "end": "2392980"
  },
  {
    "text": "And each time around, I'm\ndoubling the size of it. So for a set of size k,\nthere are 2 the k cases.",
    "start": "2392980",
    "end": "2400360"
  },
  {
    "text": "And that says that\nthis loop right here is going to be\ngrowing exponentially.",
    "start": "2400360",
    "end": "2406980"
  },
  {
    "text": "Because I've got to go\ndown that entire list to find all of the pieces. So what's the\noverall complexity?",
    "start": "2406980",
    "end": "2414080"
  },
  {
    "text": "I'm going to play the same game. Let's let t sub n\ncapture the time it takes",
    "start": "2414080",
    "end": "2420430"
  },
  {
    "text": "to solve a problem of size n. Just temporarily,\nI'm going to let s sub n denote the size of the\nsolution for a problem of size",
    "start": "2420430",
    "end": "2428670"
  },
  {
    "text": "n. How big is that thing, smaller? And what do I know?",
    "start": "2428670",
    "end": "2434750"
  },
  {
    "text": "The amount of time it takes me\nto solve the problem of size n is the amount of time it\ntakes me to solve the slightly",
    "start": "2434750",
    "end": "2441260"
  },
  {
    "text": "smaller problem-- that's\nthe recursive call to genSubsets()-- plus the\namount of time it takes me",
    "start": "2441260",
    "end": "2446540"
  },
  {
    "text": "to run over that loop looking\nat everything in smaller and adding in a new version,\nplus some constant c,",
    "start": "2446540",
    "end": "2453660"
  },
  {
    "text": "which is just the number\nof constant operations, the constant steps\ninside that loop, OK? And if I go back to it,\nt sub n is the cost here.",
    "start": "2453660",
    "end": "2462130"
  },
  {
    "text": "t sub n minus 1\nis the cost there. s sub n is the size of this. And then I've got,\none, two, three, four,",
    "start": "2462130",
    "end": "2468950"
  },
  {
    "text": "five constant steps. So c is probably 5 in this case. So what can I say?",
    "start": "2468950",
    "end": "2476240"
  },
  {
    "text": "There's the relationship. Because I know s of n minus\n1 is 2 to the n minus 1.",
    "start": "2476240",
    "end": "2482090"
  },
  {
    "text": "There are 2 to the n minus\n1 elements inside of that. How do I deal with this?",
    "start": "2482090",
    "end": "2487650"
  },
  {
    "text": "Let's play the same game. What's t sub n minus 1? That's t of n minus 2 plus\n2 to the n minus 2 plus c.",
    "start": "2487650",
    "end": "2496200"
  },
  {
    "text": "And I could keep doing this. You can see what the\npattern's going to look like. I'm going to have k\ntimes c constant steps.",
    "start": "2496200",
    "end": "2504270"
  },
  {
    "text": "For each reduction, I'm going\nto get another power of 2. And I'm going to reduce this\noverall term, after k steps,",
    "start": "2504270",
    "end": "2510120"
  },
  {
    "text": "to t the n minus k. When am I done? When that's down to\nsomething of size 0.",
    "start": "2510120",
    "end": "2517430"
  },
  {
    "text": "And there's the expression. And what you can\nsee is what I wanted you to see, order n-- or\nsorry, order 2 to the n--",
    "start": "2517430",
    "end": "2524640"
  },
  {
    "text": "is exponential in the\nsize of the problem. What's the characteristic?",
    "start": "2524640",
    "end": "2531210"
  },
  {
    "text": "Something that has a\nrecursive call-- sorry, multiple recursive\ncalls at each step--",
    "start": "2531210",
    "end": "2537029"
  },
  {
    "text": "is likely to lead\nto exponential. But that can also\nbe buried inside of how I grow the\nsize of the problem.",
    "start": "2537030",
    "end": "2543255"
  },
  {
    "text": "And that was the case here. There's only one recursive\ncall, but that loop grows in size each time around.",
    "start": "2543255",
    "end": "2550470"
  },
  {
    "text": "So the complexity\nis exponential. I'm going to pull this together.",
    "start": "2550470",
    "end": "2557070"
  },
  {
    "text": "I said one of the things I'd\nlike to start to recognize is, what are the characteristics\nof a choice in algorithm that",
    "start": "2557070",
    "end": "2563070"
  },
  {
    "text": "leads to a particular\ncomplexity class. And you now have some of them. If the code doesn't depend\non the size of the problem,",
    "start": "2563070",
    "end": "2570050"
  },
  {
    "text": "that's constant. And in fact, we've\nbeen using that as we look at pieces of the code. If we can reduce the problem--\nI said, in this case--",
    "start": "2570050",
    "end": "2577700"
  },
  {
    "text": "by half each time, by\nsome constant factor, from n, to n/2, to\nn/4, to n/8, that",
    "start": "2577700",
    "end": "2583499"
  },
  {
    "text": "tends to be characteristic--\nunless there's a hidden cost somewhere else--\nof a logarithmic algorithm.",
    "start": "2583499",
    "end": "2588590"
  },
  {
    "text": "These are really nice. Simple things that reduce\nthe size of the problem by 1 at each step--\nan iterative call",
    "start": "2588590",
    "end": "2595480"
  },
  {
    "text": "that goes from n, to n minus\n1, and then to n minus 2, and then to n minus\n3-- characteristic",
    "start": "2595480",
    "end": "2600590"
  },
  {
    "text": "of linear algorithms. Log-linear we're going\nto see next time.",
    "start": "2600590",
    "end": "2606220"
  },
  {
    "text": "Polynomial--\ntypically quadratic n squared when we have nested\nloops or nested recursive",
    "start": "2606220",
    "end": "2613180"
  },
  {
    "text": "calls. I'm looping over something. Inside of there, I'm\nlooping over something else",
    "start": "2613180",
    "end": "2618340"
  },
  {
    "text": "on a size that depends on\nthe size of the problem. And then, we just\nsaw this last one. Multiple recursive\ncalls at each level",
    "start": "2618340",
    "end": "2624280"
  },
  {
    "text": "tends to be characteristic\nof exponential. And as I said, we'd like to\nbe as high up in this list",
    "start": "2624280",
    "end": "2631060"
  },
  {
    "text": "as we can, because those are\nreally nice algorithms to have. Let me give you one more\nexample of looking at this,",
    "start": "2631060",
    "end": "2638750"
  },
  {
    "start": "2635000",
    "end": "2853000"
  },
  {
    "text": "and then we'll be done. Fibonacci-- standard\nproblem, right?",
    "start": "2638750",
    "end": "2646589"
  },
  {
    "text": "The nth Fibonacci number is\nthe sum of the previous two Fibonacci numbers. This was the example we\nsaw of multiplying rabbits,",
    "start": "2646590",
    "end": "2652440"
  },
  {
    "text": "if you like. Here's an iterative\nversion of Fibonacci, which says if n is 0, it's just 0.",
    "start": "2652440",
    "end": "2657840"
  },
  {
    "text": "If it's 1 is just 1. Otherwise, I'm going\nto set up, initially,",
    "start": "2657840",
    "end": "2663270"
  },
  {
    "text": "the two previous\nFibonacci numbers. And then I'm just going\nto run through a loop where I temporarily keep\ntrack of that number.",
    "start": "2663270",
    "end": "2670200"
  },
  {
    "text": "I move the second previous one\ninto the last previous one. I add those two. That becomes the\nsecond previous number.",
    "start": "2670200",
    "end": "2677390"
  },
  {
    "text": "And I just keep running\nthrough that loop. You can go run it. You see it does the right thing. What I want to look\nat is the complexity.",
    "start": "2677390",
    "end": "2684660"
  },
  {
    "text": "So that's constant. That's constant. That's linear, because the work\ninside the loop is constant,",
    "start": "2684660",
    "end": "2692410"
  },
  {
    "text": "but I'm doing it n times. So this is nice. [INAUDIBLE] I should say,\nthe bottom thing is constant.",
    "start": "2692410",
    "end": "2698720"
  },
  {
    "text": "The overall algorithm, the\nworst case is just order n.",
    "start": "2698720",
    "end": "2704310"
  },
  {
    "text": "Great. What about the\nrecursive version?",
    "start": "2704310",
    "end": "2710230"
  },
  {
    "text": "For me, this is much nicer code. It's nice and clean. It says if n is equal\nto 0, fib is 0, 0.",
    "start": "2710230",
    "end": "2715770"
  },
  {
    "text": "If n is equal to 1, fib of\n1-- or the first and second Fibonacci numbers-- are 0 and 1. Otherwise, just return\nwhat I get by summing",
    "start": "2715770",
    "end": "2724240"
  },
  {
    "text": "both of those pieces. And you can probably\nalready guess what the complexity is\ngoing to be here, right?",
    "start": "2724240",
    "end": "2730800"
  },
  {
    "text": "Because I've now\ngot two recursive calls inside of this call.",
    "start": "2730800",
    "end": "2737976"
  },
  {
    "text": "So one way to think\nabout it is, if I'm going to solve the\nproblem up here, I've got to solve two\nversions of the problem below,",
    "start": "2737976",
    "end": "2744100"
  },
  {
    "text": "which has got to solve two\nversions of the problem below. And in general, this is going\nto be exponential, 2 to the n.",
    "start": "2744100",
    "end": "2753010"
  },
  {
    "text": "Now you say, wait a minute. I was paying attention\nwhen this guy was yattering on a couple of weeks ago.",
    "start": "2753010",
    "end": "2758250"
  },
  {
    "text": "Honest, I was. And in fact, what we saw\nwas that fib isn't balanced",
    "start": "2758250",
    "end": "2764020"
  },
  {
    "text": "in terms of how it goes, right? It's not that, on the\nright-hand side of the tree, I have to solve all\nof those portions,",
    "start": "2764020",
    "end": "2769570"
  },
  {
    "text": "because the problem\ngets smaller. Does that change the complexity?",
    "start": "2769570",
    "end": "2775269"
  },
  {
    "text": "Well, the answer is,\nit changes the base, but it's actually\nstill exponential.",
    "start": "2775270",
    "end": "2781312"
  },
  {
    "text": "And if you want to\ngo look this up, I'm sure you can find\nWikipedia very quickly. This actually has a very\ncool exponential growth.",
    "start": "2781312",
    "end": "2790060"
  },
  {
    "text": "It's the golden ratio\nto the nth power. And in fact, I\nencourage you to go look",
    "start": "2790060",
    "end": "2795494"
  },
  {
    "text": "at it in the even more\ncopious spare time you have. It's a very cool\nproof to see it. But the bottom line\nis, while we can",
    "start": "2795495",
    "end": "2801160"
  },
  {
    "text": "do a little bit better\nthan 2 to the n, it still grows\nexponentially with n. ",
    "start": "2801160",
    "end": "2808520"
  },
  {
    "text": "So what do we have? We've got big O\nnotation as a way of talking about comparing\nefficiency of algorithms.",
    "start": "2808520",
    "end": "2817210"
  },
  {
    "text": "What I want you to\nsee here is that you ought to be able to begin\nto reason about what's",
    "start": "2817210",
    "end": "2822490"
  },
  {
    "text": "the cost of an\nalgorithm by recognizing those common patterns. I keep saying it, but it's going\nto be really valuable to you.",
    "start": "2822490",
    "end": "2829630"
  },
  {
    "text": "And you should be\nable to therefore work the other direction. When you're given\na new problem, how do I get this into a\nlinear algorithm if I can?",
    "start": "2829630",
    "end": "2837010"
  },
  {
    "text": "Log-linear, if I can,\nwould be really great. But you know, if I\ncan't, how do I stay away from exponential algorithms?",
    "start": "2837010",
    "end": "2843559"
  },
  {
    "text": "And finally, what we're\ngoing to show later on is that, in fact, there\nare some problems that, as far as we know, are\nfundamentally exponential.",
    "start": "2843560",
    "end": "2851110"
  },
  {
    "text": "And they're\nexpensive to compute. The very last\nthing is, you might have decided I was cheating\nin a different way.",
    "start": "2851110",
    "end": "2858599"
  },
  {
    "start": "2853000",
    "end": "2952000"
  },
  {
    "text": "So I'm using a set of\nbuilt-in Python functions.",
    "start": "2858600",
    "end": "2863962"
  },
  {
    "text": "I'm not going to go\nthrough all of these. But this is just a\nlist, for example, for lists, of what\nthe complexity",
    "start": "2863962",
    "end": "2869760"
  },
  {
    "text": "of those built-in functions are. And if you look through the\nlist, they kind of make sense. Indexing, you can go\nstraight to that point.",
    "start": "2869760",
    "end": "2876829"
  },
  {
    "text": "Computing the length,\nyou compute it once, you've stored it. Comparison-- order\nn, because I've",
    "start": "2876830",
    "end": "2881970"
  },
  {
    "text": "got to compare all the\nelements of the list. Similarly, to remove\nsomething from the list, I've got to find where it is\nin the list and remove it.",
    "start": "2881970",
    "end": "2888730"
  },
  {
    "text": "Worst case, that's\ngoing to be order n. So you can see that these\noperations are typically",
    "start": "2888730",
    "end": "2894540"
  },
  {
    "text": "linear in the size of a list. These are constant. For dictionaries,\nremember, dictionaries",
    "start": "2894540",
    "end": "2899595"
  },
  {
    "text": "were this nice thing. They weren't ordered. It gave me a power in\nterms of storing them. But as a consequence, some\nof the costs then go up.",
    "start": "2899595",
    "end": "2908240"
  },
  {
    "text": "For a list, indexing, going\nto a particular point, I just go to that\nspot and retrieve it. Indexing into a\ndictionary, I have",
    "start": "2908240",
    "end": "2914420"
  },
  {
    "text": "to find that point in the\ndictionary that has the key and get the value back. So that's going to be\nlinear, because I have to,",
    "start": "2914420",
    "end": "2921110"
  },
  {
    "text": "in principle, walk\nall the way down it. It's a slight misstatement,\nas we'll see later on. A dictionary actually\nuses a clever indexing",
    "start": "2921110",
    "end": "2928340"
  },
  {
    "text": "scheme called a hash. But in the worst case,\nthis is going to be linear. So you see a trade-off.",
    "start": "2928340",
    "end": "2933800"
  },
  {
    "text": "For dictionaries,\nI get more power. I get more flexibility. But it comes as a cost.",
    "start": "2933800",
    "end": "2940140"
  },
  {
    "text": "And so these,\nbasically, are what let me reason on\ntop of the things I've been doing to\nfigure out complexity.",
    "start": "2940140",
    "end": "2947143"
  },
  {
    "text": "And next time, we'll do\nthe last piece of this when we look at sorting. So we'll see you\nall on Wednesday.",
    "start": "2947144",
    "end": "2952358"
  },
  {
    "start": "2952358",
    "end": "2952857"
  }
]