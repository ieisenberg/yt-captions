[
  {
    "start": "0",
    "end": "275000"
  },
  {
    "text": " The following\ncontent is provided under a Creative\nCommons license. Your support will help MIT\nOpenCourseWare continue",
    "start": "0",
    "end": "6860"
  },
  {
    "text": "to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6860",
    "end": "13330"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13330",
    "end": "22730"
  },
  {
    "text": "PROFESSOR: Hi. I'm Srini Devadas. I'm a professor of electrical\nengineering and computer science. I'm going to be co-lecturing\n6.006-- Introduction",
    "start": "22730",
    "end": "30970"
  },
  {
    "text": "to Algorithms-- this term\nwith professor Erik Domane. Eric, say hi.",
    "start": "30970",
    "end": "36001"
  },
  {
    "text": "ERIK DOMANE: Hi. [LAUGHTER] PROFESSOR: And we\nhope you're going to have a fun time\nin 6.006 learning",
    "start": "36001",
    "end": "43710"
  },
  {
    "text": "a variety of algorithms. What I want to do today is\nspend literally a minute or so",
    "start": "43710",
    "end": "50760"
  },
  {
    "text": "on administrative\ndetails, maybe even less. What I'd like to\ndo is to tell you",
    "start": "50760",
    "end": "56420"
  },
  {
    "text": "to go to the website that's\nlisted up there and read it. And you'll get all\ninformation you",
    "start": "56420",
    "end": "62250"
  },
  {
    "text": "need about what this class\nis about from a standpoint of syllabus; what's expected\nof you; the problem set",
    "start": "62250",
    "end": "71590"
  },
  {
    "text": "schedule; the quiz schedule;\nand so on and so forth. I want to dive right in and tell\nyou about interesting things,",
    "start": "71590",
    "end": "79460"
  },
  {
    "text": "like algorithms and\ncomplexity of algorithms.",
    "start": "79460",
    "end": "84550"
  },
  {
    "text": "I want to spend\nsome time giving you an overview of the\ncourse content. And then we're\ngoing to dive right",
    "start": "84550",
    "end": "91640"
  },
  {
    "text": "in and look at a\nparticular problem of peak finding-- both the one\ndimensional version and a two",
    "start": "91640",
    "end": "98360"
  },
  {
    "text": "dimensional version-- and\ntalk about algorithms to solve this peak finding problem--\nboth varieties of it.",
    "start": "98360",
    "end": "106670"
  },
  {
    "text": "And you'll find\nthat there's really a difference between\nthese various algorithms",
    "start": "106670",
    "end": "113090"
  },
  {
    "text": "that we'll look at in\nterms of their complexity. And what I mean\nby that is you're",
    "start": "113090",
    "end": "119070"
  },
  {
    "text": "going to have different run\ntimes of these algorithms depending on input\nsize, based on how",
    "start": "119070",
    "end": "126210"
  },
  {
    "text": "efficient these algorithms are. And a prerequisite for\nthis class is 6.042.",
    "start": "126210",
    "end": "134370"
  },
  {
    "text": "And in 6.042 you learned\nabout asymptotic complexity. And you'll see that\nin this lecture",
    "start": "134370",
    "end": "141239"
  },
  {
    "text": "we'll analyze relatively\nsimple algorithms today in terms of their\nasymptotic complexity.",
    "start": "141240",
    "end": "148069"
  },
  {
    "text": "And you'll be able\nto compare and say that this algorithm is fasten\nthis other one-- assuming",
    "start": "148070",
    "end": "153940"
  },
  {
    "text": "that you have large\ninputs-- because it's asymptotically less complex.",
    "start": "153940",
    "end": "160840"
  },
  {
    "text": "So let's dive right in\nand talk about the class. ",
    "start": "160840",
    "end": "172420"
  },
  {
    "text": "So the one sentence\nsummary of this class is that this is about\nefficient procedures",
    "start": "172420",
    "end": "178910"
  },
  {
    "text": "for solving problems\non large inputs.",
    "start": "178910",
    "end": "184850"
  },
  {
    "text": "And when I say large\ninputs, I mean things like the US highway\nsystem, a map",
    "start": "184850",
    "end": "190720"
  },
  {
    "text": "of all of the highways\nin the United States; the human genome, which\nhas a billion letters",
    "start": "190720",
    "end": "197850"
  },
  {
    "text": "in its alphabet; a social\nnetwork responding to Facebook,",
    "start": "197850",
    "end": "203170"
  },
  {
    "text": "that I guess has 500\nmillion nodes or so. So these are large inputs.",
    "start": "203170",
    "end": "208280"
  },
  {
    "text": "Now our definition of large has\nreally changed with the times. And so really the 21st\ncentury definition of large",
    "start": "208280",
    "end": "215440"
  },
  {
    "text": "is, I guess, a trillion. Right? Back when I was your age\nlarge was like 1,000.",
    "start": "215440",
    "end": "220680"
  },
  {
    "text": "[LAUGHTER] I guess I'm dating myself here. Back when Eric was your\nage, it was a million.",
    "start": "220680",
    "end": "226760"
  },
  {
    "text": "Right? [LAUGHTER] But what's happening really\nthe world is moving faster,",
    "start": "226760",
    "end": "235000"
  },
  {
    "text": "things are getting bigger. We have the capability of\ncomputing on large inputs,",
    "start": "235000",
    "end": "240880"
  },
  {
    "text": "but that doesn't\nmean that efficiency isn't of paramount concern. The fact of matter is\nthat you can, maybe,",
    "start": "240880",
    "end": "248689"
  },
  {
    "text": "scan a billion elements\nin a matter of seconds. But if you had an algorithm\nthat required cubic complexity,",
    "start": "248690",
    "end": "257750"
  },
  {
    "text": "suddenly you're not talking\nabout 10 raised to 9, you're talking about\n10 raised to 27. And even current\ncomputers can't really",
    "start": "257750",
    "end": "264510"
  },
  {
    "text": "handle those kinds of numbers,\nso efficiency is a concern.",
    "start": "264510",
    "end": "270890"
  },
  {
    "text": "And as inputs get larger, it\nbecomes more of a concern. All right? So we're concerned about--",
    "start": "270890",
    "end": "279398"
  },
  {
    "start": "275000",
    "end": "507000"
  },
  {
    "text": " --efficient procedures-- for\nsolving large scale problems",
    "start": "279398",
    "end": "291310"
  },
  {
    "text": "in this class. ",
    "start": "291310",
    "end": "298140"
  },
  {
    "text": "And we're concerned\nabout scalability, because-- just as,\nyou know, 1,000",
    "start": "298140",
    "end": "307030"
  },
  {
    "text": "was a big number a\ncouple of decades ago, and now it's kind of\na small number-- it's",
    "start": "307030",
    "end": "312140"
  },
  {
    "text": "quite possible that by the\ntime you guys are professors teaching this class\nin some university",
    "start": "312140",
    "end": "318220"
  },
  {
    "text": "that a trillion is going\nto be a small number. And we're going to be talking\nabout-- I don't know--",
    "start": "318220",
    "end": "324430"
  },
  {
    "text": "10 raised to 18\nas being something that we're concerned with from\na standpoint of a common case",
    "start": "324430",
    "end": "332620"
  },
  {
    "text": "input for an algorithm. So scalability is important.",
    "start": "332620",
    "end": "338120"
  },
  {
    "text": "And we want to be able to track\nhow our algorithms are going to do as inputs get\nlarger and larger.",
    "start": "338120",
    "end": "344000"
  },
  {
    "text": " You going to learn a bunch\nof different data structures.",
    "start": "344000",
    "end": "352180"
  },
  {
    "text": "We'll call them classic\ndata structures, like binary search\ntrees, hash tables-- that",
    "start": "352180",
    "end": "361449"
  },
  {
    "text": "are called dictionaries\nin Python-- and data structures-- such as balanced\nbinary search trees-- that",
    "start": "361450",
    "end": "369470"
  },
  {
    "text": "are more efficient than just\nthe regular binary search trees. And these are all\ndata structures that were invented\nmany decades ago.",
    "start": "369470",
    "end": "378540"
  },
  {
    "text": "But they've stood\nthe test of time, and they continue to be useful. We're going to augment these\ndata structures in various ways",
    "start": "378540",
    "end": "386210"
  },
  {
    "text": "to make them more efficient\nfor certain kinds of problems. And while you're not going to be\ndoing a whole lot of algorithm",
    "start": "386210",
    "end": "393979"
  },
  {
    "text": "design in this\nclass, you will be doing some design and a\nwhole lot of analysis. ",
    "start": "393980",
    "end": "400880"
  },
  {
    "text": "The class following this\none, 6.046 Designing Analysis",
    "start": "400880",
    "end": "406060"
  },
  {
    "text": "of Algorithms, is\na class that you should take if\nyou like this one.",
    "start": "406060",
    "end": "412080"
  },
  {
    "text": "And you can do a whole lot more\ndesign of algorithms in 6.046.",
    "start": "412080",
    "end": "417180"
  },
  {
    "text": "But you will look at\nclassic data structures and classical algorithms\nfor these data structures,",
    "start": "417180",
    "end": "426260"
  },
  {
    "text": "including things like sorting\nand matching, and so on.",
    "start": "426260",
    "end": "432470"
  },
  {
    "text": "And one of the nice\nthings about this class is that you'll be doing real\nimplementations of these data",
    "start": "432470",
    "end": "441800"
  },
  {
    "text": "structures and\nalgorithms in Python. ",
    "start": "441800",
    "end": "448220"
  },
  {
    "text": "And in particular are\neach of the problem sets in this class are\ngoing to have both a theory",
    "start": "448220",
    "end": "458680"
  },
  {
    "text": "part to them, and a\nprogramming part to them. So hopefully it'll\nall tie together. The kinds of things we're going\nto be talking about in lectures",
    "start": "458680",
    "end": "466060"
  },
  {
    "text": "and recitations are going\nto be directly connected",
    "start": "466060",
    "end": "471200"
  },
  {
    "text": "to the theory parts\nof the problem sets. And you'll be programming the\nalgorithms that we talk about in lecture, or augmenting\nthem, running them.",
    "start": "471200",
    "end": "478680"
  },
  {
    "text": "Figuring out whether they work\nwell on large inputs or not. ",
    "start": "478680",
    "end": "486509"
  },
  {
    "text": "So let me talk a little\nbit about the modules in this class and\nthe problem sets. And we hope that\nthese problem sets",
    "start": "486510",
    "end": "492920"
  },
  {
    "text": "are going to be fun for you. And by fun I don't mean easy.",
    "start": "492920",
    "end": "499430"
  },
  {
    "text": "I mean challenging and\nworthwhile, so at the end of it you feel like you've\nlearned something, and you had some\nfun along the way.",
    "start": "499430",
    "end": "506870"
  },
  {
    "text": "All right? So content wise-- ",
    "start": "506870",
    "end": "517349"
  },
  {
    "start": "507000",
    "end": "925000"
  },
  {
    "text": "--we have eight\nmodules in the class. Each of which,\nroughly speaking, has",
    "start": "517350",
    "end": "524490"
  },
  {
    "text": "a problem set\nassociated with it. The first of these is what\nwe call algorithmic thinking.",
    "start": "524490",
    "end": "531950"
  },
  {
    "text": " And we'll kick start\nthat one today.",
    "start": "531950",
    "end": "539130"
  },
  {
    "text": "We'll look at a particular\nproblem, as I mentioned, of peak finding. And as part of\nthis, you're going",
    "start": "539130",
    "end": "544350"
  },
  {
    "text": "to have a problem set that's\ngoing to go out today as well. And you'll find that\nin this problem set",
    "start": "544350",
    "end": "552320"
  },
  {
    "text": "some of these algorithms\nI talk about today will be coded in Python and given to. A couple of them are going\nto have bugs in them.",
    "start": "552320",
    "end": "560190"
  },
  {
    "text": "You'll have to analyze the\ncomplexity of these algorithms; figure out which ones are\ncorrect and efficient;",
    "start": "560190",
    "end": "567380"
  },
  {
    "text": "and write a proof\nfor one of them. All right? So that's sort of an\nexample problem set.",
    "start": "567380",
    "end": "573320"
  },
  {
    "text": "And you can expect that\nmost of the problem sets are going to follow\nthat sort of template.",
    "start": "573320",
    "end": "580035"
  },
  {
    "text": "All right. So you'll get a\nbetter sense of this by the end of the\nday today for sure.",
    "start": "580036",
    "end": "586690"
  },
  {
    "text": "Or a concrete sense\nof this, because we'll be done with lecture and you'll\nsee your first problem set.",
    "start": "586690",
    "end": "592850"
  },
  {
    "text": "We're going to be doing a\nmodule on sorting and trees. Sorting you now about,\nsorting a bunch of numbers.",
    "start": "592850",
    "end": "600618"
  },
  {
    "text": "Imagine if you had\na trillion numbers and you wanted to sort them. What kind of algorithm\ncould use for that?",
    "start": "600619",
    "end": "607610"
  },
  {
    "text": "Trees are a wonderful\ndata structure. There's different varieties, the\nmost common being binary trees.",
    "start": "607610",
    "end": "614760"
  },
  {
    "text": "And there's ways of doing\nall sorts of things, like scheduling, and sorting,\nusing various kinds of trees,",
    "start": "614760",
    "end": "622560"
  },
  {
    "text": "including binary trees. And we have a problem set on\nsimulating a logic network",
    "start": "622560",
    "end": "631330"
  },
  {
    "text": "using a particular kind of\nsorting algorithm in a data",
    "start": "631330",
    "end": "636660"
  },
  {
    "text": "structure. That is going to be\nyour second problem set. And more quickly, we're going\nto have modules on hashing,",
    "start": "636660",
    "end": "647190"
  },
  {
    "text": "where we do things\nlike genome comparison. In past terms we compared a\nhuman genome to a rat genome,",
    "start": "647190",
    "end": "656330"
  },
  {
    "text": "and discovered they\nwere pretty similar. 99% similar, which\nis kind of amazing.",
    "start": "656330",
    "end": "661860"
  },
  {
    "text": "But again, these things\nare so large that you have to have efficiency\nin the comparison methods",
    "start": "661860",
    "end": "667590"
  },
  {
    "text": "that you use. And you'll find that if you\ndon't get the complexity low enough, you just won't\nbe able to complete--",
    "start": "667590",
    "end": "675300"
  },
  {
    "text": "your program won't be able to\nfinish running within the time that your problem set is do.",
    "start": "675300",
    "end": "681260"
  },
  {
    "text": "Right? Which is a bit of a problem. So that's something to keep\nin mind as you test your code.",
    "start": "681260",
    "end": "688860"
  },
  {
    "text": "The fact is that you will get\nlarge inputs to run your code. And you want to keep\ncomplexity in mind",
    "start": "688860",
    "end": "694960"
  },
  {
    "text": "as you're coding and thinking\nabout the pseudocode,",
    "start": "694960",
    "end": "700070"
  },
  {
    "text": "if you will, of your\nalgorithm itself. We will talk about numerics. ",
    "start": "700070",
    "end": "707420"
  },
  {
    "text": "A lot of the time we talk\nabout such large numbers that 32 bits isn't enough.",
    "start": "707420",
    "end": "714290"
  },
  {
    "text": "Or 64 bits isn't enough to\nrepresent these numbers. These numbers have\nthousands of bits. A good example is\nRSA encryption,",
    "start": "714290",
    "end": "721110"
  },
  {
    "text": "that is used in\nSSL, for example. And when you go-- use\nhttps on websites,",
    "start": "721110",
    "end": "729720"
  },
  {
    "text": "RSA is used at the back end. And typically you work\nwith prime numbers",
    "start": "729720",
    "end": "735360"
  },
  {
    "text": "that are thousands\nof bits long in RSA. So how do you handle that? How does Python handle that?",
    "start": "735360",
    "end": "741270"
  },
  {
    "text": "How do you write\nalgorithms that can deal with what are called\ninfinite precision numbers? So we have a module on numerics\nin the middle of the term that",
    "start": "741270",
    "end": "750500"
  },
  {
    "text": "talks about that. Graphs, really a\nfundamental data structure in all of computer science.",
    "start": "750500",
    "end": "757970"
  },
  {
    "text": "You might have heard of the\nfamous Rubik's cube assignment from .",
    "start": "757970",
    "end": "763110"
  },
  {
    "text": "006 a 2 by 2 by 2 Rubik's cube. What's the minimum\nnumber of moves",
    "start": "763110",
    "end": "768690"
  },
  {
    "text": "necessary to go from a\ngiven starting configuration to the final end configuration,\nwhere all of the faces-- each",
    "start": "768690",
    "end": "776640"
  },
  {
    "text": "of the faces has uniform color? And that can be posed\nas a graph problem.",
    "start": "776640",
    "end": "781830"
  },
  {
    "text": "We'll probably do\nthat one this term. In previous terms\nwe've done other things like the 15 puzzle.",
    "start": "781830",
    "end": "787310"
  },
  {
    "text": "And so some of\nthese are tentative. We definitely know what the\nfirst problem set is like,",
    "start": "787310",
    "end": "792420"
  },
  {
    "text": "but the rest of them are,\nat this moment, tentative. And to finish up shortest paths.",
    "start": "792420",
    "end": "800339"
  },
  {
    "text": "Again in terms past\nwe've asked you to write code using a\nparticular algorithm that",
    "start": "800340",
    "end": "807379"
  },
  {
    "text": "finds the shortest path\nfrom Caltech to MIT. This time we may do things\na little bit differently.",
    "start": "807380",
    "end": "813150"
  },
  {
    "text": "We were thinking maybe we'll\ngive you a street map of Boston and go figure out\nif Paul Revere used",
    "start": "813150",
    "end": "821360"
  },
  {
    "text": "the shortest path to get\nto where he was going, or things like that. We'll try and make it fun.",
    "start": "821360",
    "end": "827540"
  },
  {
    "text": "Dynamic programming is an\nimportant algorithm design",
    "start": "827540",
    "end": "834420"
  },
  {
    "text": "technique that's used\nin many, many problems.",
    "start": "834420",
    "end": "840690"
  },
  {
    "text": "And it can be used to do a\nvariety of things, including image compression.",
    "start": "840690",
    "end": "846600"
  },
  {
    "text": "How do you compress an image\nso the number of pixels reduces, but it still\nlooks like the image",
    "start": "846600",
    "end": "852960"
  },
  {
    "text": "that you started out with,\nthat had many more pixels? All right? So you could use dynamic\nprogramming for that.",
    "start": "852960",
    "end": "858970"
  },
  {
    "text": "And finally, advanced topics,\ncomplexity theory, research and algorithms.",
    "start": "858970",
    "end": "865760"
  },
  {
    "text": "Hopefully by now-- by\nthis time in the course, you have been sold\non algorithms. And most, if not\nall of you, would",
    "start": "865760",
    "end": "872605"
  },
  {
    "text": "want to pursue a\ncarrier in algorithms. And we'll give you a sense\nof what else is there.",
    "start": "872605",
    "end": "877680"
  },
  {
    "text": "We're just scratching the\nsurface in this class, and there's many, many\nclasses that you can possibly take if you want to continue\nin-- to learn about algorithms,",
    "start": "877680",
    "end": "887650"
  },
  {
    "text": "or to pursue a\ncareer in algorithms. All right? So that's the\nstory of the class,",
    "start": "887650",
    "end": "893990"
  },
  {
    "text": "or the synopsis of the class. And I encourage you to go spend\na few minutes on the website.",
    "start": "893990",
    "end": "901950"
  },
  {
    "text": "In particular please read the\ncollaboration policy, and get a sense of what is\nexpected of you.",
    "start": "901950",
    "end": "908440"
  },
  {
    "text": "What the rules are in terms\nof doing the problem sets.",
    "start": "908440",
    "end": "913580"
  },
  {
    "text": "And the course\ngrading break down, the grading policies are all\nlisted on the website as well.",
    "start": "913580",
    "end": "920860"
  },
  {
    "text": "All right. OK. So let's get started.",
    "start": "920860",
    "end": "926210"
  },
  {
    "start": "925000",
    "end": "1105000"
  },
  {
    "text": "I want to talk about\na specific problem. And talk about algorithms\nfor a specific problem.",
    "start": "926210",
    "end": "932000"
  },
  {
    "text": "We picked this problem, because\nit's so easy to understand. And they're fairly\nstraightforward algorithms",
    "start": "932000",
    "end": "938790"
  },
  {
    "text": "that are not particularly\nefficient to solve this problem. And so this is a, kind\nof, a toy problem.",
    "start": "938790",
    "end": "945060"
  },
  {
    "text": "But like a lot of\ntoy problems, it's very evocative in that it\npoints out the issues involved",
    "start": "945060",
    "end": "955230"
  },
  {
    "text": "in designing\nefficient algorithms. So we'll start with\na one dimensional version of what we\ncall peak finding.",
    "start": "955230",
    "end": "962395"
  },
  {
    "text": " And a peak finder is something\nin the one dimensional case.",
    "start": "962395",
    "end": "970635"
  },
  {
    "text": " Runs on an array of numbers.",
    "start": "970635",
    "end": "978240"
  },
  {
    "text": "And I'm just putting-- --symbols for each of\nthese numbers here.",
    "start": "978240",
    "end": "987020"
  },
  {
    "text": "And the numbers are\npositive, negative. We'll just assume\nthey're all positive,",
    "start": "987020",
    "end": "993170"
  },
  {
    "text": "it doesn't really matter. The algorithms we\ndescribe will work.",
    "start": "993170",
    "end": "998459"
  },
  {
    "text": "And so we have this\none dimensional array that has nine\ndifferent positions. And a through i are numbers.",
    "start": "998460",
    "end": "1007405"
  },
  {
    "text": " And we want to find a peak.",
    "start": "1007405",
    "end": "1013029"
  },
  {
    "text": "And so we have to define\nwhat we mean by a peak. And so, in particular,\nas an example,",
    "start": "1013030",
    "end": "1020320"
  },
  {
    "text": "position 2 is a\npeak if, and only",
    "start": "1020320",
    "end": "1027369"
  },
  {
    "text": "if, b greater than or equal to\na, and b greater than or equal",
    "start": "1027369",
    "end": "1036520"
  },
  {
    "text": "to c. So it's really a very local\nproperty corresponding to a peak.",
    "start": "1036520",
    "end": "1042270"
  },
  {
    "text": "In the one dimensional\ncase, it's trivial. Look to your left. Look to your right.",
    "start": "1042270",
    "end": "1047990"
  },
  {
    "text": "If you are equal or greater\nthan both of the elements that you see on the left and\nthe right, you're a peak.",
    "start": "1047990",
    "end": "1055120"
  },
  {
    "text": "OK? And in the case of\nthe edges, you only have to look to one side.",
    "start": "1055120",
    "end": "1060700"
  },
  {
    "text": "So position 9 is a peak if i\ngreater than or equal to h.",
    "start": "1060700",
    "end": "1073566"
  },
  {
    "text": "So you just have to\nlook to your left there, because you're all the way\non the right hand side. All right? So that's it.",
    "start": "1073567",
    "end": "1080480"
  },
  {
    "text": "And the statement of the\nproblem, the one dimensional version, is find the\npeak if it exists.",
    "start": "1080480",
    "end": "1093820"
  },
  {
    "start": "1093820",
    "end": "1099490"
  },
  {
    "text": "All right? That's all there is to it.",
    "start": "1099490",
    "end": "1104509"
  },
  {
    "text": "I'm going to give you a\nstraightforward algorithm. And then we'll see\nif we can improve it.",
    "start": "1104510",
    "end": "1110630"
  },
  {
    "start": "1105000",
    "end": "1645000"
  },
  {
    "text": "All right? You can imagine that the\nstraightforward algorithm is something that just, you\nknow, walks across the array.",
    "start": "1110630",
    "end": "1119440"
  },
  {
    "text": "But we need that as a starting\npoint for building something more sophisticated. ",
    "start": "1119440",
    "end": "1129680"
  },
  {
    "text": "So let's say we start\nfrom left and all",
    "start": "1129680",
    "end": "1137340"
  },
  {
    "text": "we have is one\ntraversal, really. ",
    "start": "1137340",
    "end": "1145360"
  },
  {
    "text": "So let's say we have\n1, 2, and then we have n over 2 over\nhere corresponding",
    "start": "1145360",
    "end": "1150810"
  },
  {
    "text": "to the middle of\nthis n element array. And then we have\nn minus 1, and n.",
    "start": "1150810",
    "end": "1158970"
  },
  {
    "text": "What I'm interested\nin doing is, not only coming up with a\nstraightforward algorithm,",
    "start": "1158970",
    "end": "1164880"
  },
  {
    "text": "but also precisely\ncharacterizing what its complexity\nis in relation",
    "start": "1164880",
    "end": "1172030"
  },
  {
    "text": "to n, which is the\nnumber of inputs. Yeah? Question? AUDIENCE: Why do\nyou say if it exists",
    "start": "1172030",
    "end": "1178456"
  },
  {
    "text": "when the criteria\nin the [INAUDIBLE] guarantees [INAUDIBLE]? PROFESSOR: That's exactly right. I was going to get to that.",
    "start": "1178456",
    "end": "1184540"
  },
  {
    "text": "So if you look at the\ndefinition of the peak,",
    "start": "1184540",
    "end": "1190530"
  },
  {
    "text": "then what I have here is\ngreater than or equal to. OK?",
    "start": "1190530",
    "end": "1196010"
  },
  {
    "text": "And so this-- That's a great\nquestion that was asked. Why is there \"if it\nexists\" in this problem?",
    "start": "1196010",
    "end": "1204470"
  },
  {
    "text": "Now in the case where I have\ngreater than or equal to, then-- this is a homework\nquestion for you,",
    "start": "1204470",
    "end": "1212309"
  },
  {
    "text": "and for the rest of you-- argue\nthat any array will always",
    "start": "1212310",
    "end": "1218240"
  },
  {
    "text": "have a peak. OK? Now if you didn't have the\ngreater than or equal to,",
    "start": "1218240",
    "end": "1224300"
  },
  {
    "text": "and you had a greater than,\nthen can you make that argument? No, you can't.",
    "start": "1224300",
    "end": "1230120"
  },
  {
    "text": "Right? So great question. In this case it's\njust a question--",
    "start": "1230120",
    "end": "1235859"
  },
  {
    "text": "You would want to\nmodify this problem statement to find the peak. But if I had a different\ndefinition of a peak-- and this",
    "start": "1235859",
    "end": "1243710"
  },
  {
    "text": "is part of algorithmic thinking. You want to be able to create\nalgorithms that are general,",
    "start": "1243710",
    "end": "1249580"
  },
  {
    "text": "so if the problem\ndefinition changes on you, you still have a starting\npoint to go attack the second version\nof the problem.",
    "start": "1249580",
    "end": "1256500"
  },
  {
    "text": "OK? So you could eliminate\nthis in the case of the greater than or\nequal to definition.",
    "start": "1256500",
    "end": "1263270"
  },
  {
    "text": "The \"if it exists\", because\na peak will always exist. But you probably want\nto argue that when you want to show the\ncorrectness of your algorithm.",
    "start": "1263270",
    "end": "1269950"
  },
  {
    "text": "And if in fact you had\na different definition, well you would have to create\nan algorithm that tells you",
    "start": "1269950",
    "end": "1279130"
  },
  {
    "text": "for sure that a peak\ndoesn't exist, or find a peak if it exists. All right?",
    "start": "1279130",
    "end": "1284400"
  },
  {
    "text": "So that's really\nthe general case. Many a time it's possible that\nyou're asked to do something,",
    "start": "1284400",
    "end": "1289830"
  },
  {
    "text": "and you can't actually give\nan answer to the question,",
    "start": "1289830",
    "end": "1294990"
  },
  {
    "text": "or find something that satisfies\nall the constraints required. And in that case, you want to\nbe able to put up your hand",
    "start": "1294990",
    "end": "1301710"
  },
  {
    "text": "and say, you know what? I searched long and hard. I searched exhaustively.",
    "start": "1301710",
    "end": "1306730"
  },
  {
    "text": "Here's my argument that\nI searched exhaustively, and I couldn't find it. Right? If you do that, you\nget to keep your job.",
    "start": "1306730",
    "end": "1313490"
  },
  {
    "text": "Right? Otherwise there's\nalways the case that you didn't\nsearch hard enough.",
    "start": "1313490",
    "end": "1319060"
  },
  {
    "text": "So it's nice to\nhave that argument. All right? Great. Thanks for the question.",
    "start": "1319060",
    "end": "1324190"
  },
  {
    "text": "Feel free to interrupt. Raise your hand, and\nI'm watching you guys, and I'm happy to answer\nquestions at any time.",
    "start": "1324190",
    "end": "1331549"
  },
  {
    "text": "So let's talk about the\nstraightforward algorithm. The straightforward\nalgorithm is something that starts from the left\nand just walks across.",
    "start": "1331550",
    "end": "1340940"
  },
  {
    "text": "And you might have something\nthat looks like that. All right? By that-- By this I mean\nthe numbers are increasing",
    "start": "1340940",
    "end": "1347830"
  },
  {
    "text": "as you start from the\nleft, the peak is somewhere in the middle, and then\nthings start decreasing.",
    "start": "1347830",
    "end": "1353620"
  },
  {
    "text": "Right? So in this case, you know,\nthis might be the peak.",
    "start": "1353620",
    "end": "1359570"
  },
  {
    "start": "1359570",
    "end": "1366950"
  },
  {
    "text": "You also may have\na situation where the peak is all the\nway on the right, you started from the left.",
    "start": "1366950",
    "end": "1372780"
  },
  {
    "text": "And it's 1, 2, 3,\n4, 5, 6, literally in terms of the numbers. And you're going to look at\nn elements going all the way",
    "start": "1372780",
    "end": "1381000"
  },
  {
    "text": "to the right in order\nto find the peak. So in the case of\nthe middle you'd",
    "start": "1381000",
    "end": "1387310"
  },
  {
    "text": "look at n over 2 elements. ",
    "start": "1387310",
    "end": "1393769"
  },
  {
    "text": "If it was right in the middle.  And the complexity,\nworst case complexity--",
    "start": "1393770",
    "end": "1406340"
  },
  {
    "text": "--is what we call theta n. And it's theta n, because\nin the worst case,",
    "start": "1406340",
    "end": "1413580"
  },
  {
    "text": "you may have to look\nat all n elements. And that would be the case\nwhere you started from the left",
    "start": "1413580",
    "end": "1418710"
  },
  {
    "text": "and you had to go all\nthe way to the right. Now remember theta n is\nessentially something",
    "start": "1418710",
    "end": "1423850"
  },
  {
    "text": "that's says of the order of n. So it gives you both the lower\nbound and an upper bound.",
    "start": "1423850",
    "end": "1429399"
  },
  {
    "text": "Big [? O ?] of n is\njust upper bound. And what we're\nsaying here is, we're saying this algorithm\nthat starts from the left",
    "start": "1429400",
    "end": "1438110"
  },
  {
    "text": "is going to, essentially,\nrequire in the worst case",
    "start": "1438110",
    "end": "1443470"
  },
  {
    "text": "something that's a\nconstant times n. OK? And you know that\nconstant could be 1.",
    "start": "1443470",
    "end": "1451210"
  },
  {
    "text": "You could certainly\nset things up that way. Or if you had a different\nkind of algorithm, maybe you could work\non the constant.",
    "start": "1451210",
    "end": "1458460"
  },
  {
    "text": "But bottom line, we're only\nconcerned, at this moment, about as asymptotic complexity.",
    "start": "1458460",
    "end": "1464760"
  },
  {
    "text": "And the asymptotic complexity\nof this algorithm is linear. All right? That make sense?",
    "start": "1464760",
    "end": "1472149"
  },
  {
    "text": "OK. So someone help me do better.",
    "start": "1472150",
    "end": "1478950"
  },
  {
    "text": "How can we do better? How can we lower the\nasymptotic complexity of a one dimensional\npeak finder?",
    "start": "1478950",
    "end": "1486700"
  },
  {
    "text": "Anybody want to\ntake a stab at that? Yeah? Back there. AUDIENCE: Do a\nbinary search subset.",
    "start": "1486700",
    "end": "1492078"
  },
  {
    "text": "You look at the\nmiddle, and whatever is higher-- whichever side is\nhigher, then cut that in half,",
    "start": "1492078",
    "end": "1498552"
  },
  {
    "text": "because you know there's a peak. PROFESSOR: On-- AUDIENCE: For example\nif you're in the middle on the right side--\nthere's a higher number on the right side--\nthen you would just",
    "start": "1498552",
    "end": "1505116"
  },
  {
    "text": "look at that, because you know\nthat your peak's somewhere in there. And you continue\ncutting in half. PROFESSOR: Excellent! Excellent! That's exactly right.",
    "start": "1505116",
    "end": "1511200"
  },
  {
    "text": "So you can-- You can do\nsomething different, which is essentially try and\nbreak up this problem.",
    "start": "1511200",
    "end": "1519240"
  },
  {
    "text": "Use a divide and conquer\nstrategy, and recursively break up this one dimensional\narray into smaller arrays.",
    "start": "1519240",
    "end": "1526550"
  },
  {
    "text": "And try and get this\ncomplexity down. Yeah? AUDIENCE: Are we assuming\nthat there's only one peak?",
    "start": "1526550",
    "end": "1533238"
  },
  {
    "text": "PROFESSOR: No, we're not. AUDIENCE: OK. PROFESSOR: It's find\na peak if it exists.",
    "start": "1533239",
    "end": "1539219"
  },
  {
    "text": "And in this case\nit's, \"find a peak\", because of the definition. We don't really need\nthis as it was discussed.",
    "start": "1539219",
    "end": "1545910"
  },
  {
    "text": "All right? OK. So-- So that was a great answer,\nand-- You know this class",
    "start": "1545910",
    "end": "1553392"
  },
  {
    "text": "after while is\ngoing to get boring. Right? Every class gets boring. So we, you know, try and\nbreak the monotony here a bit.",
    "start": "1553392",
    "end": "1560777"
  },
  {
    "text": "And so-- And then the other\nthing that we realized was that these seats\nyou're sitting on-- this is a nice classroom-- but\nthe seats you're sitting on",
    "start": "1560777",
    "end": "1566998"
  },
  {
    "text": "are kind of hard. Right? So what Eric and I\ndid was we decided we'll help you guys\nout, especially the ones",
    "start": "1566998",
    "end": "1572620"
  },
  {
    "text": "who are-- who are\ninteracting with us. And we have these-- [LAUGHTER]",
    "start": "1572620",
    "end": "1578610"
  },
  {
    "text": "--cushions that\nare 6.006 cushions. And, you know, that's a 2\nby 2 by 2 Rubik's cube here.",
    "start": "1578610",
    "end": "1585170"
  },
  {
    "text": "And since you answered the first\nquestion, you get a cushion. This is kind of like a\nFrisbee, but not really.",
    "start": "1585170",
    "end": "1591510"
  },
  {
    "text": "So-- [LAUGHTER] I'm not sure-- I'm not sure\nI'm going to get it to you. But the other\nthing I want to say",
    "start": "1591510",
    "end": "1596565"
  },
  {
    "text": "is this is not a baseball game. Right? Where you just grab the\nball as it comes by. This is meant for him, my\nfriend in the red shirt.",
    "start": "1596565",
    "end": "1603670"
  },
  {
    "text": "So here you go. Ah, too bad. All right. It is soft. So, you know, it won't-- it\nwon't hurt you if hits you.",
    "start": "1603670",
    "end": "1611255"
  },
  {
    "text": "[LAUGHTER] All right. So we got a bunch of these. And raise your hands,\nyou know, going",
    "start": "1611255",
    "end": "1617299"
  },
  {
    "text": "to ask-- There's going\nto be-- I think-- There's some trivial questions that\nwe're going to ask just",
    "start": "1617300",
    "end": "1623150"
  },
  {
    "text": "to make sure you're awake. So an answer to that\ndoesn't get you a cushion. But an answer like--\nWhat's your name?",
    "start": "1623150",
    "end": "1630514"
  },
  {
    "text": "AUDIENCE: Chase. PROFESSOR: Chase. An answer like\nChase just gave is-- that's a good answer to\na nontrivial question.",
    "start": "1630514",
    "end": "1637050"
  },
  {
    "text": "That gets you a cushion. OK? All right, great. So let's put up by\nChase's algorithm up here.",
    "start": "1637050",
    "end": "1644230"
  },
  {
    "text": "I'm going to write it\nout for the 1D version. ",
    "start": "1644230",
    "end": "1661390"
  },
  {
    "start": "1645000",
    "end": "1975000"
  },
  {
    "text": "So what we have here is\na recursive algorithm. ",
    "start": "1661390",
    "end": "1682966"
  },
  {
    "text": "So the picture you want\nto keep in your head is this picture\nthat I put up there. And this is a divide\nand conquer algorithm.",
    "start": "1682967",
    "end": "1691010"
  },
  {
    "text": "You're going to see this over\nand over-- this paradigm-- over and over in 6.006.",
    "start": "1691010",
    "end": "1697360"
  },
  {
    "text": "We're going to look at\nthe n over 2 position.",
    "start": "1697360",
    "end": "1702745"
  },
  {
    "text": " And we're going to\nlook to the left,",
    "start": "1702745",
    "end": "1708700"
  },
  {
    "text": "and we're going to\nlook to the right. And we're going to\ndo that in sequence. So--",
    "start": "1708700",
    "end": "1713920"
  },
  {
    "text": " --if a n over 2 is less than\na n over 2 minus 1, then--",
    "start": "1713920",
    "end": "1730950"
  },
  {
    "text": "--only look at the left half. ",
    "start": "1730950",
    "end": "1737680"
  },
  {
    "text": "1 through n over 2 minus 1 to\nlook for peak-- for a peak.",
    "start": "1737680",
    "end": "1744410"
  },
  {
    "text": " All right? So that's step one.",
    "start": "1744410",
    "end": "1750295"
  },
  {
    "text": "And you know I could\nput it on the right hand side or the left hand side,\ndoesn't really matter.",
    "start": "1750295",
    "end": "1755990"
  },
  {
    "text": "I chose to do the left hand\nside first, the left half. And so what I've done is,\nthrough that one step,",
    "start": "1755990",
    "end": "1764570"
  },
  {
    "text": "if in fact you have that\ncondition-- a n over 2",
    "start": "1764570",
    "end": "1770009"
  },
  {
    "text": "is less than a n over 2 minus\n1-- then you move to your left and you work on one\nhalf of the problem.",
    "start": "1770010",
    "end": "1777490"
  },
  {
    "text": "But if that's not the case,\nthen if n over-- n over 2",
    "start": "1777490",
    "end": "1783120"
  },
  {
    "text": "is less than a over n\nover-- n by 2 plus 1,",
    "start": "1783120",
    "end": "1788170"
  },
  {
    "text": "then only look at n over 2\nplus 1 through n for a peak.",
    "start": "1788170",
    "end": "1797520"
  },
  {
    "text": "So I haven't bothered\nwriting out all the words. They're exactly the same\nas the left hand side.",
    "start": "1797520",
    "end": "1803480"
  },
  {
    "text": "You just look to\nthe right hand side. Otherwise if both of these\nconditions don't fire,",
    "start": "1803480",
    "end": "1810430"
  },
  {
    "text": "you're actually done. OK? That's actually the best case\nin terms of finishing early,",
    "start": "1810430",
    "end": "1816130"
  },
  {
    "text": "at least in this recursive step. Because now the n over\n2 position is a peak.",
    "start": "1816130",
    "end": "1822580"
  },
  {
    "text": " Because what you found is\nthat the n over 2 position",
    "start": "1822580",
    "end": "1830500"
  },
  {
    "text": "is greater than or equal to\nboth of its adjacent positions, and that's exactly the\ndefinition of a peak.",
    "start": "1830500",
    "end": "1836850"
  },
  {
    "text": "So you're done. OK? So all of this is good.",
    "start": "1836850",
    "end": "1844500"
  },
  {
    "text": "You want to write an argument\nthat this algorithm is correct.",
    "start": "1844500",
    "end": "1853307"
  },
  {
    "text": "And I'm not going\nto bother with that. I just wave my hands a\nbit, and you all nodded,",
    "start": "1853307",
    "end": "1859530"
  },
  {
    "text": "so we're done with that. But the point being you\nwill see in your problem set",
    "start": "1859530",
    "end": "1867309"
  },
  {
    "text": "a precise argument for a more\ncomplicated algorithm, the 2D version of this.",
    "start": "1867310",
    "end": "1872720"
  },
  {
    "text": "And that should be a template\nfor you to go write a proof, or an argument, a\nformal argument,",
    "start": "1872720",
    "end": "1879200"
  },
  {
    "text": "that a particular\nalgorithm is correct. That it does what\nit claims to do. And in this case it's two,\nthree lines of careful reasoning",
    "start": "1879200",
    "end": "1890370"
  },
  {
    "text": "that essentially say, given\nthe definition of the peak, that this is going to\nfind a peak in the array",
    "start": "1890370",
    "end": "1898600"
  },
  {
    "text": "that you're given. All right? So we all believe that\nthis algorithm is correct.",
    "start": "1898600",
    "end": "1904910"
  },
  {
    "text": "Let's talk now about the\ncomplexity of this algorithm. Because the whole\npoint of this algorithm",
    "start": "1904910",
    "end": "1910630"
  },
  {
    "text": "was because we didn't\nlike this theta n complexity corresponding to\nthe straightforward algorithm.",
    "start": "1910630",
    "end": "1916350"
  },
  {
    "text": "So it'd like to do better. ",
    "start": "1916350",
    "end": "1928350"
  },
  {
    "text": "So what I'd like to\ndo is ask one of you to give me a recurrence relation\nof the kind, you know, T of n",
    "start": "1928350",
    "end": "1934890"
  },
  {
    "text": "equals blah, blah, blah. That would correspond to\nthis recursive algorithm,",
    "start": "1934890",
    "end": "1942310"
  },
  {
    "text": "this divide and\nconquer algorithm. And then using that, I'd like\nto get to the actual complexity",
    "start": "1942310",
    "end": "1949050"
  },
  {
    "text": "in terms of what the theta\nof complexity corresponds to. Yeah? Back there?",
    "start": "1949050",
    "end": "1954752"
  },
  {
    "text": "AUDIENCE: So the worst\ncase scenario if T of n is going to be some\nconstant amount of time--",
    "start": "1954752",
    "end": "1962795"
  },
  {
    "text": "PROFESSOR: Yep. AUDIENCE: --it takes to\ninvestigate whether a certain element is [INAUDIBLE], plus--",
    "start": "1962795",
    "end": "1969851"
  },
  {
    "text": "[COUGH] --T of n over 2? PROFESSOR: Great. Exactly right. That's exactly right. So if you look at this\nalgorithm and you say,",
    "start": "1969851",
    "end": "1978370"
  },
  {
    "start": "1975000",
    "end": "2155000"
  },
  {
    "text": "from a computation\nstandpoint, can I write an equation\ncorresponding to the execution",
    "start": "1978370",
    "end": "1985510"
  },
  {
    "text": "of this algorithm? And you say, T of n is the work\nthat this algorithm does on--",
    "start": "1985510",
    "end": "1991350"
  },
  {
    "text": "as input of size n. OK? ",
    "start": "1991350",
    "end": "2005390"
  },
  {
    "text": "Then I can write this equation. ",
    "start": "2005390",
    "end": "2011310"
  },
  {
    "text": "And this theta 1 corresponds\nto the two comparisons that you do looking at--\npotentially the two comparisons",
    "start": "2011310",
    "end": "2017697"
  },
  {
    "text": "that you do-- looking\nat the left hand side and the right hand side. So that's-- 2 is a constant,\nso that's why we put theta 1.",
    "start": "2017697",
    "end": "2024580"
  },
  {
    "text": "All right? So you get a cushion, too. Watch out guys.",
    "start": "2024580",
    "end": "2029630"
  },
  {
    "text": "Whoa! Oh actually that wasn't so bad. Good. Veers left, Eric.",
    "start": "2029630",
    "end": "2035620"
  },
  {
    "text": "Veers left. So if you take this and\nyou start expanding it,",
    "start": "2035620",
    "end": "2043360"
  },
  {
    "text": "eventually you're going\nto get to the base case, which is T\nof 1 is theta 1.",
    "start": "2043360",
    "end": "2052091"
  },
  {
    "text": "Right? Because you have a one element\narray you just for that array it's just going to\nreturn that as a peak.",
    "start": "2052091",
    "end": "2059649"
  },
  {
    "text": "And so if you do that, and\nyou expand it all the way out, then you can write T of n\nequals theta 1 plus theta 1.",
    "start": "2059650",
    "end": "2071079"
  },
  {
    "text": "And you're going to do this\nlog to the base 2 of n times.",
    "start": "2071080",
    "end": "2079300"
  },
  {
    "text": "And adding these\nall up, gives you a complexity theta log 2 of n.",
    "start": "2079300",
    "end": "2086359"
  },
  {
    "text": "Right? So now you compare\nthis with that.",
    "start": "2086360",
    "end": "2093089"
  },
  {
    "text": "And there's really\na huge difference. There's an exponential\ndifference. If you coded up this\nalgorithm in Python--",
    "start": "2093089",
    "end": "2101859"
  },
  {
    "text": "and I did-- both these\nalgorithms for the 1D version-- and if you run it on n\nbeing 10 million or so,",
    "start": "2101860",
    "end": "2114160"
  },
  {
    "text": "then this algorithm\ntakes 13 seconds. OK? The-- The theta 10\nalgorithm takes 13 seconds.",
    "start": "2114160",
    "end": "2121880"
  },
  {
    "text": "And this one takes\n0.001 seconds. OK? Huge difference.",
    "start": "2121880",
    "end": "2127929"
  },
  {
    "text": "So there is a big difference\nbetween theta n and theta log n. It's literally the difference\nbetween 2 raised to n, and n.",
    "start": "2127929",
    "end": "2135840"
  },
  {
    "text": "It makes sense to try\nand reduce complexity as you can see,\nespecially if you're",
    "start": "2135840",
    "end": "2143000"
  },
  {
    "text": "talking about large inputs. All right? And you'll see that\nmore clearly as we",
    "start": "2143000",
    "end": "2148859"
  },
  {
    "text": "go to a 2D version\nof this problem. All right? So you can't really\ndo better for the 1D.",
    "start": "2148860",
    "end": "2153910"
  },
  {
    "text": "The 1D is a\nstraightforward problem. It gets a little\nmore interesting-- the problems get a\nlittle-- excuse me,",
    "start": "2153910",
    "end": "2161080"
  },
  {
    "start": "2155000",
    "end": "2545000"
  },
  {
    "text": "the algorithms get a\nlittle more sophisticated when we look at a 2D\nversion of peak finding.",
    "start": "2161080",
    "end": "2168340"
  },
  {
    "text": "So let's talk about\nthe 2D version. ",
    "start": "2168340",
    "end": "2175809"
  },
  {
    "text": "So as you can imagine\nin the 2D version you have a matrix, or a\ntwo dimensional array. ",
    "start": "2175810",
    "end": "2183490"
  },
  {
    "text": "And we'll say this thing\nhas n rows and m columns.",
    "start": "2183490",
    "end": "2189575"
  },
  {
    "start": "2189575",
    "end": "2194700"
  },
  {
    "text": "And now we have to\ndefine what a peak is. And it's a hill. It's the obvious\ndefinition of a peak.",
    "start": "2194700",
    "end": "2201540"
  },
  {
    "text": "So if you had a in\nhere, c, b, d, e.",
    "start": "2201540",
    "end": "2210490"
  },
  {
    "text": "Then as you can guess, a is\na 2D peak if, and only if,",
    "start": "2210490",
    "end": "2222250"
  },
  {
    "text": "a greater than or equal to b;\na greater than or equal to d, c",
    "start": "2222250",
    "end": "2228830"
  },
  {
    "text": "and e. All right? So it's a little hill up there. All right? And again I've used the\ngreater than or equal to here,",
    "start": "2228830",
    "end": "2235119"
  },
  {
    "text": "so that's similar to\nthe 1D in the case that you'll always find\na peak in any 2D matrix.",
    "start": "2235120",
    "end": "2241345"
  },
  {
    "text": " Now again I'll give you the\nstraightforward algorithm,",
    "start": "2241345",
    "end": "2249210"
  },
  {
    "text": "and we'll call it the\nGreedy Ascent algorithm. ",
    "start": "2249210",
    "end": "2261660"
  },
  {
    "text": "And the Greedy Ascent algorithm\nessentially picks a direction and, you know, tries to\nfollow that direction in order",
    "start": "2261660",
    "end": "2270560"
  },
  {
    "text": "to find a peak. So for example, if I\nhad this particular--",
    "start": "2270560",
    "end": "2281840"
  },
  {
    "text": "--matrix; 14, 13,\n12, 15, 9, 11, 17--",
    "start": "2281840",
    "end": "2290790"
  },
  {
    "start": "2290790",
    "end": "2297010"
  },
  {
    "text": "Then what might happen is if\nI started at some arbitrary midpoint-- So the\nGreedy Ascent algorithm",
    "start": "2297010",
    "end": "2303360"
  },
  {
    "text": "has to make choices\nas to where to start. Just like we had\ndifferent cases here,",
    "start": "2303360",
    "end": "2309141"
  },
  {
    "text": "you have to make a choice\nas to where to start. You might want to\nstart in the middle, and you might want to\nwork your way left first.",
    "start": "2309142",
    "end": "2315560"
  },
  {
    "text": "Or you're going to all--\nYou just keep going left, our keep going right. And if you hit an\nedge, you go down.",
    "start": "2315560",
    "end": "2322340"
  },
  {
    "text": "So you make some choices as\nto what the default traversal directions are.",
    "start": "2322340",
    "end": "2327810"
  },
  {
    "text": "And so if you say you\nwant to start with 12, you are going to go look\nfor something to left.",
    "start": "2327810",
    "end": "2334050"
  },
  {
    "text": "And if it's greater than, you're\ngoing to follow that direction. If it's not, if it's\nless, then you're",
    "start": "2334050",
    "end": "2340950"
  },
  {
    "text": "going to go in the other\ndirection, in this case, for example. So in this case you'll go to\n12, 13 , 14, 15, 16, 17, 19,",
    "start": "2340950",
    "end": "2353119"
  },
  {
    "text": "and 20. And you'd find-- You\n'd find this peak. Now I haven't given you\nthe specific details",
    "start": "2353120",
    "end": "2361680"
  },
  {
    "text": "of a Greedy Ascent algorithm. But I think if you look at\nthe worst case possibilities",
    "start": "2361680",
    "end": "2373400"
  },
  {
    "text": "here, with respect\nto a given matrix, and for any given\nstarting point,",
    "start": "2373400",
    "end": "2378920"
  },
  {
    "text": "and for any given strategy-- in\nterms of choosing left first, versus right first, or down\nfirst versus up first--",
    "start": "2378920",
    "end": "2388630"
  },
  {
    "text": "you will have a\nsituation where-- just like we had in the 1D\ncase-- you may end up",
    "start": "2388630",
    "end": "2395450"
  },
  {
    "text": "touching a large fraction of\nthe elements in this 2D array.",
    "start": "2395450",
    "end": "2402015"
  },
  {
    "text": "OK? So in this case, we\nended up, you know, touching a bunch of\ndifferent elements. And it's quite possible that\nyou could end up touching--",
    "start": "2402015",
    "end": "2410528"
  },
  {
    "text": "starting from the midpoint--\nyou could up touching half the elements, and in some cases,\ntouching all the elements.",
    "start": "2410529",
    "end": "2416990"
  },
  {
    "text": "So if you do a worst case\nanalysis of this algorithm--",
    "start": "2416990",
    "end": "2423000"
  },
  {
    "text": "a particular algorithm with\nparticular choices in terms of the starting point and\nthe direction of search--",
    "start": "2423000",
    "end": "2430369"
  },
  {
    "text": "a Greedy Ascent algorithm would\nhave theta n m complexity. All right? And in the case where n\nequals m, or m equals n,",
    "start": "2430370",
    "end": "2442480"
  },
  {
    "text": "you'd have theta n\nsquared complexity. OK? I won't spend very\nmuch time on this,",
    "start": "2442480",
    "end": "2448440"
  },
  {
    "text": "because I want to talk\nto you about the divide and conquer versions of this\nalgorithm for the 2D peak.",
    "start": "2448440",
    "end": "2458020"
  },
  {
    "text": "But hopefully you're\nall with me with respect to what the worst\ncase complexity is.",
    "start": "2458020",
    "end": "2463530"
  },
  {
    "text": "All right? People buy that? Yeah. Question back there. AUDIENCE: Can you-- Is\nthat an approximation?",
    "start": "2463530",
    "end": "2469264"
  },
  {
    "text": "Or can you actually get\nto n times m traversals?",
    "start": "2469264",
    "end": "2474630"
  },
  {
    "text": "PROFESSOR: So there are specific\nGreedy Ascent algorithms, and specific matrices\nwhere, if I give you",
    "start": "2474630",
    "end": "2481680"
  },
  {
    "text": "the code for the algorithm, and\nI give you a specific matrix, that I could make you touch\nall of these elements.",
    "start": "2481680",
    "end": "2488200"
  },
  {
    "text": "That's correct. So we're talking\nabout worst case. You're being very\nparanoid when you talk about worst\ncase complexity.",
    "start": "2488200",
    "end": "2494540"
  },
  {
    "text": "And so I'm-- hand\nwaving a bit here, simply because I haven't\ngiven you the specifics",
    "start": "2494540",
    "end": "2501150"
  },
  {
    "text": "of the algorithm yet. Right? This is really a\nset of algorithms, because I haven't\ngiven you the code,",
    "start": "2501150",
    "end": "2506210"
  },
  {
    "text": "I haven't told you\nwhere it starts, and which direction it goes. But you go, do\nthat, fix it, and I",
    "start": "2506210",
    "end": "2512380"
  },
  {
    "text": "would be the person who tries to\nfind the worst case complexity. Suddenly it's very\neasy to get to theta n",
    "start": "2512380",
    "end": "2518250"
  },
  {
    "text": "m in terms of having some\nconstant multiplying n times m. But you can definitely\nget to that constant",
    "start": "2518250",
    "end": "2525809"
  },
  {
    "text": "being very close to 1. OK? If not 1.",
    "start": "2525810",
    "end": "2531349"
  },
  {
    "text": "All right. So let's talk about\ndivide and conquer. And let's say that\nI did something",
    "start": "2531350",
    "end": "2538720"
  },
  {
    "text": "like this, where I just tried\nto jam the binary search algorithm into the 2D version.",
    "start": "2538720",
    "end": "2546340"
  },
  {
    "text": "All right? ",
    "start": "2546340",
    "end": "2557780"
  },
  {
    "text": "So what I'm going to do is--",
    "start": "2557780",
    "end": "2563830"
  },
  {
    "text": "--I'm going to pick the middle\ncolumn, j equals m over 2.",
    "start": "2563830",
    "end": "2575430"
  },
  {
    "text": "And I'm going to\nfind a 1D peak using",
    "start": "2575430",
    "end": "2580710"
  },
  {
    "text": "whatever algorithm I want. And I'll probably end up using\nthe more efficient algorithm, the binary search\nversion that's gone",
    "start": "2580710",
    "end": "2587850"
  },
  {
    "text": "all the way to the left\nof the board there. And let's say I find a\nbinary peak at (i, j).",
    "start": "2587850",
    "end": "2594000"
  },
  {
    "text": "Because I've picked a column,\nand I'm just finding a 1D peak. ",
    "start": "2594000",
    "end": "2600320"
  },
  {
    "text": "So this is j equals m over 2. That's i.",
    "start": "2600320",
    "end": "2605690"
  },
  {
    "text": "Now I use (i,j). In particular row i as a start--",
    "start": "2605690",
    "end": "2618730"
  },
  {
    "text": "--to find a 1D peak on row i. ",
    "start": "2618730",
    "end": "2627470"
  },
  {
    "text": "And I stand up here,\nI'm really happy. OK? Because I say, wow.",
    "start": "2627470",
    "end": "2633440"
  },
  {
    "text": "I picked a middle column,\nI found a 1D peak, that is theta m complexity to\nfind a 1D peak as we argued.",
    "start": "2633440",
    "end": "2641350"
  },
  {
    "text": "And one side-- the theta m--",
    "start": "2641350",
    "end": "2646665"
  },
  {
    "text": "AUDIENCE: Log n. PROFESSOR: Oh, I'm sorry. You're right. The log n complexity,\nthat's what this was.",
    "start": "2646665",
    "end": "2653490"
  },
  {
    "text": "So I do have that here. Yeah. Log n complexity. Thanks, Eric.",
    "start": "2653490",
    "end": "2658920"
  },
  {
    "text": "And then once I do that, I\ncan find a 1D peak on row i.",
    "start": "2658920",
    "end": "2666130"
  },
  {
    "text": "In this case row\ni would be m wide, so it would be log m complexity. If n equals m, then I have\na couple of steps of log n,",
    "start": "2666130",
    "end": "2673839"
  },
  {
    "text": "and I'm done. All right? Am I done? No.",
    "start": "2673840",
    "end": "2679640"
  },
  {
    "text": "Can someone tell me\nwhy I'm not done? Precisely? Yep. AUDIENCE: Because when\nyou do the second part",
    "start": "2679640",
    "end": "2686841"
  },
  {
    "text": "to find the peak in\nrow i, you might not have that column\npeak-- There might not",
    "start": "2686841",
    "end": "2692987"
  },
  {
    "text": "be a peak on the column anymore. PROFESSOR: That's\nexactly correct. So this algorithm is incorrect.",
    "start": "2692987",
    "end": "2699280"
  },
  {
    "text": "OK? It doesn't work. It's efficient, but incorrect.",
    "start": "2699280",
    "end": "2704380"
  },
  {
    "text": "OK? It's-- You want to be correct. You know being correcting\nand inefficient",
    "start": "2704380",
    "end": "2709640"
  },
  {
    "text": "is definitely better than\nbeing inefficient-- I'm sorry. Being incorrect and efficient.",
    "start": "2709640",
    "end": "2715790"
  },
  {
    "text": "So this is an\nefficient algorithm, in the sense that it will\nonly take log n time,",
    "start": "2715790",
    "end": "2722077"
  },
  {
    "text": "but it doesn't work. And I'll give you\na simple example here where it doesn't work.",
    "start": "2722077",
    "end": "2727650"
  },
  {
    "start": "2725000",
    "end": "3200000"
  },
  {
    "text": " The problem is--",
    "start": "2727650",
    "end": "2735680"
  },
  {
    "text": "--a 2D peak-- --may not exist--",
    "start": "2735680",
    "end": "2744150"
  },
  {
    "text": "--on row i. And here's an example of that. ",
    "start": "2744150",
    "end": "2753640"
  },
  {
    "text": "Actually this is-- This is\nexactly the example of that. Let's say that I\nstarted with this row.",
    "start": "2753640",
    "end": "2762690"
  },
  {
    "text": "Since it's-- I'm starting\nwith the middle row, and I could start with\nthis one or that one. Let's say I started\nwith that one.",
    "start": "2762690",
    "end": "2770640"
  },
  {
    "text": "I end up finding a peak.",
    "start": "2770640",
    "end": "2776349"
  },
  {
    "text": "And if this were 10 up here,\nI'd choose 12 as a peak.",
    "start": "2776350",
    "end": "2782330"
  },
  {
    "text": "And it's quite possible\nthat I return 12 as a peak. Even though 19 is\nbigger, because 12",
    "start": "2782330",
    "end": "2787900"
  },
  {
    "text": "is a peak given\n10 and 11 up here. And then when I choose\nthis particular row,",
    "start": "2787900",
    "end": "2793060"
  },
  {
    "text": "and I find a peak on\nthis row, it would be 14. That is a 1D peak on this row.",
    "start": "2793060",
    "end": "2798869"
  },
  {
    "text": "But 14 is not a 2D peak. OK? So this particular example,\n14 would return 14.",
    "start": "2798870",
    "end": "2807402"
  },
  {
    "text": "And 14 is not a 2D peak. All right?",
    "start": "2807402",
    "end": "2813730"
  },
  {
    "text": "You can collect your\ncushion after the class. So not so good.",
    "start": "2813730",
    "end": "2821880"
  },
  {
    "text": "Look like an efficient\nalgorithm, but doesn't work. All right? So how can we get to\nsomething that actually works?",
    "start": "2821880",
    "end": "2829290"
  },
  {
    "text": "So the last algorithm that\nI'm going to show you--",
    "start": "2829290",
    "end": "2834300"
  },
  {
    "text": "And you'll see four different\nalgorithms in your problem set--",
    "start": "2834300",
    "end": "2841260"
  },
  {
    "text": "--that you'll have to analyze\nthe complexity for and decide if they're efficient,\nand if they're correct.",
    "start": "2841260",
    "end": "2848180"
  },
  {
    "text": "But here's a-- a\nrecursive version",
    "start": "2848180",
    "end": "2853440"
  },
  {
    "text": "that is better than,\nin terms of complexity, than the Greedy\nAscent algorithm.",
    "start": "2853440",
    "end": "2860119"
  },
  {
    "text": "And this one works. So what I'm going to do\nis pick a middle column.",
    "start": "2860120",
    "end": "2866470"
  },
  {
    "text": " j equals m over 2 as before. ",
    "start": "2866470",
    "end": "2874050"
  },
  {
    "text": "I'm going to find the\nglobal maximum on column j.",
    "start": "2874050",
    "end": "2882480"
  },
  {
    "text": " And that's going\nto be at (i, j). ",
    "start": "2882480",
    "end": "2889579"
  },
  {
    "text": "I'm going to compare (i comma\nj minus 1), (i comma j),",
    "start": "2889580",
    "end": "2898230"
  },
  {
    "text": "and (i,j plus 1). Which means that once I've\nfound the maximum in this row,",
    "start": "2898230",
    "end": "2903619"
  },
  {
    "text": "all I'm going to look to\nthe left and the right, and compare. I'm going to pick\nthe left columns.",
    "start": "2903620",
    "end": "2910825"
  },
  {
    "text": " If (i comma j minus 1) is\ngreater than (i comma j)--",
    "start": "2910825",
    "end": "2920890"
  },
  {
    "text": "and similarly for the right. ",
    "start": "2920890",
    "end": "2929490"
  },
  {
    "text": "And if in fact I-- either\nof these two conditions",
    "start": "2929490",
    "end": "2935720"
  },
  {
    "text": "don't fire, and what\nI have is (i comma j) is greater than or equal\nto (i comma j minus 1)",
    "start": "2935720",
    "end": "2944280"
  },
  {
    "text": "and (i comma j plus\n1), then I'm done. Just like I had\nfor the 1D version.",
    "start": "2944280",
    "end": "2952759"
  },
  {
    "text": "If (i comma j) is greater\nthan or equal to (i comma j minus 1), and (i comma j\nplus 1), that implies (i, j)",
    "start": "2952760",
    "end": "2966350"
  },
  {
    "text": "is a 2D peak. OK? And the reason that\nis the case, is because (i comma j) was the\nmaximum element in that column.",
    "start": "2966350",
    "end": "2975901"
  },
  {
    "text": "So you know that\nyou've compared it to all of the adjacent elements,\nlooking up and looking down,",
    "start": "2975902",
    "end": "2981520"
  },
  {
    "text": "that's the maximum element. Now you've look at the\nleft and the right, and in fact it's greater\nthan or equal to the elements",
    "start": "2981520",
    "end": "2987750"
  },
  {
    "text": "on the left and the right. And so therefore it's a 2D peak. OK? So in this case, when you pick\nthe left or the right columns--",
    "start": "2987750",
    "end": "2997710"
  },
  {
    "text": "you'll pick one of\nthem-- you're going to solve the new problem with\nhalf the number of columns.",
    "start": "2997710",
    "end": "3008025"
  },
  {
    "start": "3008025",
    "end": "3016539"
  },
  {
    "text": "All right? And again, you have to\ngo through an analysis, or an argument, to make sure\nthat this algorithm is correct.",
    "start": "3016540",
    "end": "3024950"
  },
  {
    "text": "But its intuitively correct,\nsimply because it matches the 1D version\nmuch more closely.",
    "start": "3024950",
    "end": "3033190"
  },
  {
    "text": "And you also have your condition\nwhere you break away right here, where you have a 2D\npeak, just like the 1D version.",
    "start": "3033190",
    "end": "3041160"
  },
  {
    "text": "And what you've done\nis break this matrix up into half the size.",
    "start": "3041160",
    "end": "3046190"
  },
  {
    "text": "And that's essentially\nwhy this algorithm works. When you have a single column--",
    "start": "3046190",
    "end": "3055806"
  },
  {
    "start": "3055806",
    "end": "3061069"
  },
  {
    "text": "--find the global\nmaximum and you're done.",
    "start": "3061070",
    "end": "3069610"
  },
  {
    "text": "All right? So that's the base case. So let me end with\njust writing out",
    "start": "3069610",
    "end": "3074670"
  },
  {
    "text": "what the recurrence relation\nfor the complexity of this is, and argue what the overall\ncomplexity of this algorithm",
    "start": "3074670",
    "end": "3082481"
  },
  {
    "text": "is.  And then I'll give\nyou the bad news. ",
    "start": "3082481",
    "end": "3090781"
  },
  {
    "text": "All right. So overall what you have is, you\nhave something like T of (n, m)",
    "start": "3090781",
    "end": "3096260"
  },
  {
    "text": "equals T of (n, m\nover 2) plus theta n.",
    "start": "3096260",
    "end": "3102570"
  },
  {
    "text": "Why is that? Well n is the number of rows,\nm is the number of columns.",
    "start": "3102570",
    "end": "3107829"
  },
  {
    "text": "In one case you'll be\nbreaking things down into half the number of\ncolumns, which is m over 2.",
    "start": "3107830",
    "end": "3114630"
  },
  {
    "text": "And in order to find\nthe global maximum, you'll be doing theta\nn work, because you're",
    "start": "3114630",
    "end": "3120220"
  },
  {
    "text": "finding the global maximum. Right? You just have to\nscan it-- this--",
    "start": "3120220",
    "end": "3125270"
  },
  {
    "text": "That's the way-- That's\nwhat it's going to take. And so if you do that, and\nyou go run it through--",
    "start": "3125270",
    "end": "3131960"
  },
  {
    "text": "and you know that T of\n(n, 1) is theta n-- which is this last part over\nhere-- that's your base case.",
    "start": "3131960",
    "end": "3140880"
  },
  {
    "text": "You get T of (n, m) is theta\nof n added to theta of n,",
    "start": "3140880",
    "end": "3148559"
  },
  {
    "text": "log of m times--\nlog 2 of m times.",
    "start": "3148560",
    "end": "3154820"
  },
  {
    "text": "Which is theta of\nn-- log 2 of m.",
    "start": "3154820",
    "end": "3162250"
  },
  {
    "text": "All right? So you're not done\nwith peak finding.",
    "start": "3162250",
    "end": "3168119"
  },
  {
    "text": "What you'll see is at four\nalgorithms coded in Python-- I'm not going to give away\nwhat those algorithms are,",
    "start": "3168120",
    "end": "3175290"
  },
  {
    "text": "but you'll have\nto recognize them. You will have seen versions\nof those algorithms already in lecture.",
    "start": "3175290",
    "end": "3181849"
  },
  {
    "text": "And your job is going to be to\nanalyze the algorithms, as I said before, prove that\none of them is correct,",
    "start": "3181850",
    "end": "3189690"
  },
  {
    "text": "and find counter-examples for\nthe ones that aren't correct. The course staff\nwill stick around here to answer questions--\nlogistical questions--",
    "start": "3189690",
    "end": "3197109"
  },
  {
    "text": "or questions about lecture. And I owe that\ngentleman a cushion.",
    "start": "3197110",
    "end": "3201650"
  }
]