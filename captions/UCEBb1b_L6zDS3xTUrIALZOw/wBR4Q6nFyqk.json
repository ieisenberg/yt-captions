[
  {
    "start": "0",
    "end": "308000"
  },
  {
    "text": " PROFESSOR ERIK\nDEMAINE: All right, so this lecture we\ntalked about fold",
    "start": "0",
    "end": "6640"
  },
  {
    "text": "and one cut, two\nmethods and a little bit about polyhedron flattening,\nso most of the questions",
    "start": "6640",
    "end": "11860"
  },
  {
    "text": "are about fold and one cut. I'll stick to that. First question is, is\nthere an equal software",
    "start": "11860",
    "end": "17900"
  },
  {
    "text": "for doing fold-and-cut now? And the answer is yes,\nthere's some software. Maybe not the coolest possible\nyet, but it's getting there.",
    "start": "17900",
    "end": "25840"
  },
  {
    "text": "There's two pieces of software. One is from Final Project after\nthis lecture was given, 2010.",
    "start": "25840",
    "end": "34150"
  },
  {
    "text": "And another one is in\nSourceForge project called JOrigami, or J Origami.",
    "start": "34150",
    "end": "39880"
  },
  {
    "text": "Both are written\nin Java, I believe. I have this one. This is the swan, which\nyou've seen before.",
    "start": "39880",
    "end": "47620"
  },
  {
    "text": "I have it here. We can try it out. ",
    "start": "47620",
    "end": "55790"
  },
  {
    "text": "It's not online yet, because\nit could use some improvements, but it's already pretty cool.",
    "start": "55790",
    "end": "64268"
  },
  {
    "text": "So you can take something\nlike the angelfish here, and if you like,\nit has an editor",
    "start": "64269",
    "end": "73490"
  },
  {
    "text": "so you can move\nyour polygon around. And you can say, OK, please\ngive me the straight skeleton,",
    "start": "73490",
    "end": "79090"
  },
  {
    "text": "first straight skeleton only,\nand it will update on the fly, and gives you some nice\nintuition about how that works.",
    "start": "79090",
    "end": "85570"
  },
  {
    "text": "I know that looks weird\nthat it goes up that way, but it is correct,\nbecause it's bisecting",
    "start": "85570",
    "end": "91380"
  },
  {
    "text": "this edge and some\nedge, this one I guess.",
    "start": "91380",
    "end": "98986"
  },
  {
    "text": "They meet out here, and\nthen you go that way. ",
    "start": "98986",
    "end": "104286"
  },
  {
    "text": "So you can play with\nthat, and then you can add in the\nperpendiculars too. Takes a little bit\nlonger, so the refresh",
    "start": "104286",
    "end": "109870"
  },
  {
    "text": "may not be as immediate. But it works. It's really complicated behavior\nin there, some spiraling in,",
    "start": "109870",
    "end": "118430"
  },
  {
    "text": "spiraling out, but it's\nfairly well-behaved. ",
    "start": "118430",
    "end": "126220"
  },
  {
    "text": "Here's one of the simpler\nspiraling examples. ",
    "start": "126220",
    "end": "133319"
  },
  {
    "text": "This one is stable under\nperturbation more or less. You move the vertices\nall a little bit. They should continue spiraling.",
    "start": "133320",
    "end": "141420"
  },
  {
    "text": "It looks like that one is\na little bit degenerate. So we'll go around, and as you\ngo get bigger and bigger pieces of paper, you'll get\nmore and more creases.",
    "start": "141420",
    "end": "148201"
  },
  {
    "text": " I should mention, you can\nadd new vertices as well",
    "start": "148201",
    "end": "156990"
  },
  {
    "text": "and draw polygon. You can delete edges. I'm holding all sorts\nof crazy modifier keys",
    "start": "156990",
    "end": "163650"
  },
  {
    "text": "to make this happen,\nbut it does work. The one other thing you\ncan do is snap to a grid.",
    "start": "163650",
    "end": "169290"
  },
  {
    "text": "This is probably hard to see,\nbut there's a square grid underneath. If you hold down Alt, it\nsnaps to a square grid.",
    "start": "169290",
    "end": "176000"
  },
  {
    "text": "I have one other\nexample I've prepared. It has save and load,\nwhich is pretty cool. And this example is one\nof the dense instances.",
    "start": "176000",
    "end": "187980"
  },
  {
    "text": "Although this one has\nrational multiples, so it doesn't\nactually go forever. Because I drew it\non the grid so that",
    "start": "187980",
    "end": "193370"
  },
  {
    "text": "could get all the\nhorizontal and verticals. And you can see in\nparticular it stops here, because at some\npoint it gives up",
    "start": "193370",
    "end": "202189"
  },
  {
    "text": "in reflecting perpendiculars,\nsays that's enough. It won't draw anymore. So it's fairly\nrobust in that sense.",
    "start": "202190",
    "end": "209750"
  },
  {
    "text": "Occasionally it's using\nsome straight skeleton code they did not write,\nand it has some issues when you have really\ndegenerate situations,",
    "start": "209750",
    "end": "216630"
  },
  {
    "text": "which they tried to mitigate. But occasionally\nit's not perfect. But there are lots\nof possible follow on projects to this work,\nimproving the user interface.",
    "start": "216630",
    "end": "224882"
  },
  {
    "text": "Actually putting it\non the web for people to play with, I think,\nwould be super cool. Alternatively, could port\nit to JavaScript-- right now",
    "start": "224882",
    "end": "230689"
  },
  {
    "text": "it's in Java-- and make it\neven more accessible run on iPhones and things like that. ",
    "start": "230690",
    "end": "237989"
  },
  {
    "text": "Still, one of the questions\nI've posed in lecture was, can you make a\nnice interface that would let you\nforce degeneracies,",
    "start": "237990",
    "end": "244170"
  },
  {
    "text": "make like in-- I think the swan\nhas instances of this, where",
    "start": "244170",
    "end": "252760"
  },
  {
    "text": "you'd like more than three\nskeleton edges to come together",
    "start": "252760",
    "end": "262540"
  },
  {
    "text": "at a point. Here they almost do. It would be nice to be able\nto say, and for it to snap",
    "start": "262540",
    "end": "268104"
  },
  {
    "text": "to a position where many\nthings come together. Because that, in general,\nreduces number of creases substantially. You could also try to\ncompute the folded state.",
    "start": "268104",
    "end": "275010"
  },
  {
    "text": "That would be another\ninteresting project based on what we're\ngoing to talk about in a little bit,\nfolding the underlying",
    "start": "275010",
    "end": "282800"
  },
  {
    "text": "structure of corridors. And then you can computer\na crease pattern. And there you have\nvarious choices, and that lets you throw\naway some of these creases.",
    "start": "282800",
    "end": "288925"
  },
  {
    "text": "Like this is much messier\nthan the swan crease pattern that's on my\nweb page, because you don't need all these folds.",
    "start": "288925",
    "end": "294050"
  },
  {
    "text": "If you choose the\nright subset of folds you can save a lot of time.",
    "start": "294050",
    "end": "299690"
  },
  {
    "text": "So, still lots of cool\nprojects to do here. It'd be great to get\nthis software online,",
    "start": "299690",
    "end": "305190"
  },
  {
    "text": "but that's its current state. Next question is, what\nabout odd degree vertices?",
    "start": "305190",
    "end": "311180"
  },
  {
    "start": "308000",
    "end": "718000"
  },
  {
    "text": "This is actually a\npretty natural question. ",
    "start": "311180",
    "end": "316490"
  },
  {
    "text": "Even degree vertices seem nice\nbecause you can kind of-- well, it relates to a page\nthat I didn't really",
    "start": "316490",
    "end": "322479"
  },
  {
    "text": "talk very much about\nin the lecture, but it was in the lecture notes,\nthis idea of a side assignment.",
    "start": "322480",
    "end": "330319"
  },
  {
    "text": "So in general, if you have\nsomething like a swan, there's the inside of the\nswan, the outside of the swan, and generally you have\na bunch of regions.",
    "start": "330320",
    "end": "336069"
  },
  {
    "text": "And for each region\nyou'd like to know is it above the cut line\nor below the cut line? If you imagine the cut\nline as horizontal.",
    "start": "336070",
    "end": "343690"
  },
  {
    "text": "And in general,\nthe side assignment would specify, do I want\nmy region above or below? And you could do\nwhatever you want.",
    "start": "343690",
    "end": "350200"
  },
  {
    "text": "Now with even degree\nvertices, this is great. You could just alternate\naround and say, above, below, above, below.",
    "start": "350200",
    "end": "355660"
  },
  {
    "text": "With odd degree\nvertices, you can't, so you're going to\nhave two regions that are adjacent to each other which\nare both above or both below.",
    "start": "355660",
    "end": "362729"
  },
  {
    "text": "So what does that mean?  It means it's a little\nbit hard to cut.",
    "start": "362730",
    "end": "369960"
  },
  {
    "text": "And there's actually\ntwo models of cuts. There's scissor cuts-- which are\nin particular what the question",
    "start": "369960",
    "end": "379210"
  },
  {
    "text": "poser had in mind,\nand probably what you might have had in mind in\ngeneral-- where the cut you're",
    "start": "379210",
    "end": "384509"
  },
  {
    "text": "going to make separates material\nfrom above and below the line. So this is the cut line here.",
    "start": "384510",
    "end": "392020"
  },
  {
    "text": "And it'd be really nice if you\nhad material on both sides, because that's usually how\nscissors work, they tear apart",
    "start": "392020",
    "end": "398310"
  },
  {
    "text": "material. An alternative is that you\nhave a mathematical cut.",
    "start": "398310",
    "end": "405520"
  },
  {
    "text": "And a mathematical cut can\ncut right along a crease line. So it could be you\nhave two polygons,",
    "start": "405520",
    "end": "414100"
  },
  {
    "text": "there's a fold here between\nthem, and you can cut right along that line.",
    "start": "414100",
    "end": "420260"
  },
  {
    "text": "Maybe I shouldn't draw scissors. Imagine a laser beam which\ncan zap right along the line,",
    "start": "420260",
    "end": "427315"
  },
  {
    "text": "so there's no material on the\nleft side of the line, just material on the\nright, but yet it separates the two\nthings on the right.",
    "start": "427315",
    "end": "433240"
  },
  {
    "text": "So we call that\nmathematical cut, because it is the natural\ndefinition mathematically.",
    "start": "433240",
    "end": "439690"
  },
  {
    "text": "You're erasing a line. But practically it's\na little hard to do. So scissor cuts are also nice. This is a more\nrestrictive model.",
    "start": "439690",
    "end": "445990"
  },
  {
    "text": "This is general model. So what I was talking\nabout in lecture, implicitly use\nmathematical cuts.",
    "start": "445990",
    "end": "451569"
  },
  {
    "text": "And that's when you could\nmake anything with one cut. But, it would be nice to get\nscissor cuts when possible.",
    "start": "451570",
    "end": "461290"
  },
  {
    "text": "And when possible\nis basically when you have even degree\nat every vertex. And one fun example of\nthat is checkerboard.",
    "start": "461290",
    "end": "468980"
  },
  {
    "text": "This is actually\nan old magic trick. You have a piece of usually\ntissue paper, so it's really thin, pre colored\nas checkered squares,",
    "start": "468980",
    "end": "477460"
  },
  {
    "text": "both sides matching. And you can fold this,\nbecause every vertex here",
    "start": "477460",
    "end": "483520"
  },
  {
    "text": "has degree 4, so\neven degree, you can assign the\nblack squares to be",
    "start": "483520",
    "end": "489169"
  },
  {
    "text": "on one side or the\nblue squares to be one side, the white squares\nto be on the other side. And so you could make one cut\nand simultaneously cut out",
    "start": "489169",
    "end": "495340"
  },
  {
    "text": "all the white squares and\nall the black squares which is kind of cool. This is old, decades old.",
    "start": "495340",
    "end": "501389"
  },
  {
    "text": " So in general, you can do\nsomething with scissor cuts.",
    "start": "501390",
    "end": "517054"
  },
  {
    "text": " Or scissor cuts are going\nto be possible if and only",
    "start": "517054",
    "end": "523549"
  },
  {
    "text": "if you can find\na side assignment",
    "start": "523549",
    "end": "531300"
  },
  {
    "text": "that sort of alternates between\nabove and below the cut line.",
    "start": "531300",
    "end": "537880"
  },
  {
    "text": " Meaning when you have two\nregions that are adjacent,",
    "start": "537880",
    "end": "545532"
  },
  {
    "text": "you don't want them both\nto be above and below. You'd like one to be\nabove, one to be below.",
    "start": "545532",
    "end": "550670"
  },
  {
    "text": "And this is what's called a face\n2-coloring in planar graphs.",
    "start": "550670",
    "end": "556420"
  },
  {
    "text": "You want to color the faces,\nthe regions of your graph, with two colors such that\nno two adjacent cells have",
    "start": "556420",
    "end": "563399"
  },
  {
    "text": "the same color, no two adjacent\nfaces have the same color, and that turns out to\nbe equivalent to having",
    "start": "563400",
    "end": "568620"
  },
  {
    "text": "all vertices of even degree. ",
    "start": "568620",
    "end": "573940"
  },
  {
    "text": "So this is why that question\nwas asking about odd degree, because indeed with scissor\ncuts, you can't do odd degree.",
    "start": "573940",
    "end": "580720"
  },
  {
    "text": "There is a fun fact, though,\nthat relates these two things. So if you have even\ndegree like polygons,",
    "start": "580720",
    "end": "587060"
  },
  {
    "text": "which is typical case, scissor\ncuts should be possible. ",
    "start": "587060",
    "end": "593710"
  },
  {
    "text": "Mathematical cuts\ncan do everything. What if I have something\nthat has odd degree vertices, but I still want to\nuse scissor cuts?",
    "start": "593710",
    "end": "600110"
  },
  {
    "text": "Well then, it turns out two\ncuts are enough, pretty much. That if you have, I'll call it\na 2-edge-connected planar graph,",
    "start": "600110",
    "end": "623630"
  },
  {
    "text": "equals the union\nof two even graphs.",
    "start": "623630",
    "end": "629505"
  },
  {
    "text": " I should say even subgraphs.",
    "start": "629505",
    "end": "635144"
  },
  {
    "text": "It doesn't much matter. So there's one\nexception, which is, if you have an edge in\nyour desired set of cuts,",
    "start": "635144",
    "end": "643620"
  },
  {
    "text": "that partitions the\ngraph into two parts. So if you could delete an\nedge and disconnect the graph",
    "start": "643620",
    "end": "651540"
  },
  {
    "text": "into more parts, there's\nno hope of decomposing this into even graphs.",
    "start": "651540",
    "end": "658186"
  },
  {
    "text": "I think. Should check that. But as long as you\ndo not have such,",
    "start": "658186",
    "end": "664290"
  },
  {
    "text": "these are called\nbridges, typically. So bridges are forbidden. If you have no\nbridges, then you're",
    "start": "664290",
    "end": "671190"
  },
  {
    "text": "at what's called a\n2-edge-connected planar graph. And then you can\ndecompose your graph into two parts, each\nof which is even.",
    "start": "671190",
    "end": "677300"
  },
  {
    "text": "So you could fold,\nmake one straight cut, and get one even graph,\nfold, make once straight cut, get the other even graph.",
    "start": "677300",
    "end": "683130"
  },
  {
    "text": "Good luck folding it the\nsecond time if it decomposed. But in theory at least,\nwith two scissor cuts,",
    "start": "683130",
    "end": "689779"
  },
  {
    "text": "you can make anything\nthat doesn't have bridges. So that's just kind of an aside.",
    "start": "689780",
    "end": "697130"
  },
  {
    "text": "Some graph theory that\ntells you a little bit more about what you can\ndo with two scissor cuts-- pretty much everything.",
    "start": "697130",
    "end": "704420"
  },
  {
    "text": "Any more questions about that? So that was odd degree vertices.",
    "start": "704420",
    "end": "709755"
  },
  {
    "text": " Next questions are about\nfolding and how exactly-- so",
    "start": "709755",
    "end": "721100"
  },
  {
    "start": "718000",
    "end": "1044000"
  },
  {
    "text": "I kind of briefly sketched the\nproof for linear corridors, how you would fold\nor how you would",
    "start": "721100",
    "end": "728220"
  },
  {
    "text": "prove that this\nthing actually folds. This is the skeleton\nmethod first. We'll go to\ndisk-packing afterwards.",
    "start": "728220",
    "end": "735270"
  },
  {
    "text": "So how do you convert a set of\nlinear quarters into a tree? Then once you have\nthat correspondence,",
    "start": "735270",
    "end": "741490"
  },
  {
    "text": "how does trees\nfolding flat relate to corridors folding flat?",
    "start": "741490",
    "end": "746530"
  },
  {
    "text": "And so I redrew this figure to\nmake it a little bit clearer. So this is one of the images\nin the textbook where I just",
    "start": "746530",
    "end": "753910"
  },
  {
    "text": "face colored, in this case with\nthree colors, the corridors. Those are the regions\nof constant width",
    "start": "753910",
    "end": "759580"
  },
  {
    "text": "bounded by perpendiculars. This is for making a turtle. That sort of doesn't\nreally matter.",
    "start": "759580",
    "end": "765450"
  },
  {
    "text": "And this is the\ncorresponding tree. And this is the folded\nstate of this blue guy",
    "start": "765450",
    "end": "772670"
  },
  {
    "text": "here between B and C. And to really illustrate\nwhat's going on here,",
    "start": "772670",
    "end": "778230"
  },
  {
    "text": "I folded this thing. It's tricky to fold, let's say. And I added a few paper\nclips to make it really stay.",
    "start": "778230",
    "end": "787240"
  },
  {
    "text": "But if you hold it right, which\nis a little bit challenging, the projection of this\nstructure is exactly this tree.",
    "start": "787240",
    "end": "797690"
  },
  {
    "text": "Maybe let me show\nyou some examples. Out here, for example,\nthis flap is labeled A B,",
    "start": "797690",
    "end": "806830"
  },
  {
    "text": "so it corresponds to this flap. And it corresponds to the\nmaterial here between A and B.",
    "start": "806830",
    "end": "814180"
  },
  {
    "text": "And this A part is at the very\ntip here, and attached to this is this guy.",
    "start": "814180",
    "end": "820190"
  },
  {
    "text": "That would be this\nunlabeled pink edge, which corresponds to this one. It's unlabeled, because it goes\noff to infinity in principle.",
    "start": "820190",
    "end": "826500"
  },
  {
    "text": "So this would just keep going. This one turns\naround right here. Then there's this edge,\nthis bit of material.",
    "start": "826500",
    "end": "833290"
  },
  {
    "text": "Sorry, it's probably easier\nfor you to see from that side. And that corresponds\nto this BC part,",
    "start": "833290",
    "end": "839540"
  },
  {
    "text": "which is exactly this folding. And if I laser cut\nor even scissor cut down these two\nlines, and just",
    "start": "839540",
    "end": "847930"
  },
  {
    "text": "cut out that little\nfolded part, it would look exactly like this. So conversely, I was sort\nof begging the question",
    "start": "847930",
    "end": "855279"
  },
  {
    "text": "by assuming I could\nfold this thing, if you don't know how\nto fold this thing, you can go on the\nreverse direction",
    "start": "855280",
    "end": "861070"
  },
  {
    "text": "and figure out how to\nfold it by first modeling these corridors as a tree. How do you do that?",
    "start": "861070",
    "end": "867009"
  },
  {
    "text": "It's just like in\nthe tree method, going from crease pattern\nfrom the tree method",
    "start": "867010",
    "end": "873010"
  },
  {
    "text": "to the shadow tree. Except there, we were given\nthe shadow tree as input.",
    "start": "873010",
    "end": "878480"
  },
  {
    "text": "Here, we have to compute it. But it's like what you\nsolved in the problem set.",
    "start": "878480",
    "end": "883935"
  },
  {
    "text": "Is it one or two? For each of these corridors,\nit has fixed width,",
    "start": "883935",
    "end": "889500"
  },
  {
    "text": "so you make an edge\nof that length. It's not quite\ndrawn to scale here. This has been scaled up by\nroughly a factor of two.",
    "start": "889500",
    "end": "896090"
  },
  {
    "text": "So this length\nbecomes this length. And you label it the same thing.",
    "start": "896090",
    "end": "901209"
  },
  {
    "text": "This set of connecting\ncomponent of perpendiculars A goes to that point. The connected component\nof perpendiculars here,",
    "start": "901210",
    "end": "908860"
  },
  {
    "text": "this thing which\nbranches, all of that is B. It's like a hinge\nin the tree method.",
    "start": "908860",
    "end": "914200"
  },
  {
    "text": "So that's going to be a hinge\nbetween this flap and two other flaps, whatever\ntouches the B perpendicular.",
    "start": "914200",
    "end": "921779"
  },
  {
    "text": "So there's this pink one,\nand there's the cyan one. Cyan one is here.",
    "start": "921780",
    "end": "927800"
  },
  {
    "text": "It's attached to whatever\nC is attached to. so here's C.",
    "start": "927800",
    "end": "932810"
  },
  {
    "text": "It branches off\nhere, bounces around. All that's C, and it's adjacent\nto the blue thing we just did.",
    "start": "932810",
    "end": "937830"
  },
  {
    "text": "The yellow and the pink-- that's\nthis yellow and this pink-- connecting to D and G, and\nso on through the thing.",
    "start": "937830",
    "end": "945529"
  },
  {
    "text": "So it's actually really\neasy to map from here to the tree, just every\ncorridor maps to an edge.",
    "start": "945530",
    "end": "951010"
  },
  {
    "text": "Every connected component\nof the perpendicular graph maps to a point.",
    "start": "951010",
    "end": "956616"
  },
  {
    "text": "And this is the projection. It will always look\nexactly like this. You'll be able to\nindependently manipulate",
    "start": "956616",
    "end": "961840"
  },
  {
    "text": "each of these\ncorridors as a flap. And individually it's pretty\neasy to fold each corridor.",
    "start": "961840",
    "end": "968150"
  },
  {
    "text": "It just looks like\nthis accordion thing. So the faces will be stacked\nlinearly in order from",
    "start": "968150",
    "end": "977449"
  },
  {
    "text": "back to front, and\nbe really clean. They'll all line up in\nthis nice vertical strip.",
    "start": "977450",
    "end": "985120"
  },
  {
    "text": " So that's easy to\nprove it exists from sketching the proof now.",
    "start": "985120",
    "end": "992319"
  },
  {
    "text": "And then all you have to\ndo is attach them together. So basically first you take this\ntree view, you fold it flat.",
    "start": "992320",
    "end": "999120"
  },
  {
    "text": "Here, I can fold it flat just by\ncollapsing the top and bottom. Then I replace\neach of these edges with one of these\nvertical accordion strips.",
    "start": "999120",
    "end": "1006989"
  },
  {
    "text": "And then I just need to\ncheck that at each vertex I can actually attach\neverything that needs to attach without\ngetting crossings.",
    "start": "1006989",
    "end": "1012470"
  },
  {
    "text": "So that's the one\npart of the proof I'm not going to show you,\nbecause it's kind of tedious. But basically, because\nthe structure was planar,",
    "start": "1012470",
    "end": "1019670"
  },
  {
    "text": "because it came\nfrom one sheet, you can show there's not going\nto be any crossings there.",
    "start": "1019670",
    "end": "1024760"
  },
  {
    "text": "All of these layers,\neach of these edges expands to be many\nlayers, and the layers will nicely connect together.",
    "start": "1024760",
    "end": "1031380"
  },
  {
    "text": "So that's the sketch\nof that proof. Any questions? This is for just linear\ncorridors, not circular ones.",
    "start": "1031380",
    "end": "1038339"
  },
  {
    "text": "OK. Cool. ",
    "start": "1038339",
    "end": "1046679"
  },
  {
    "start": "1044000",
    "end": "1303000"
  },
  {
    "text": "Next question is\nabout the bad example that makes a dense set of\ncreases that completely fills",
    "start": "1046680",
    "end": "1054880"
  },
  {
    "text": "the plane, and therefore\nis completely unfoldable. And the question was,\nis it really unlikely",
    "start": "1054880",
    "end": "1063270"
  },
  {
    "text": "or is actually very\nlikely that this happens? And there are two\nthings going on. Here's the example,\nagain, from the textbook.",
    "start": "1063270",
    "end": "1071280"
  },
  {
    "text": "So it's got, the dark blue\nis the desire cut graph, then the black lines are\nthe straight skeleton,",
    "start": "1071280",
    "end": "1076490"
  },
  {
    "text": "and then the dash\nlines are the beginning of the perpendiculars. And the point was to\nmake this corridor width",
    "start": "1076490",
    "end": "1086049"
  },
  {
    "text": "verses this corridor\nwidth verses this quarter width versus this\ncorner width, make those all irrational\nmultiples of each other.",
    "start": "1086050",
    "end": "1093230"
  },
  {
    "text": "And then as this thing spirals\naround, it never finishes. It never hits itself. And so it just keeps going.",
    "start": "1093230",
    "end": "1098610"
  },
  {
    "text": "I think this is where this\none's currently going. ",
    "start": "1098610",
    "end": "1105470"
  },
  {
    "text": "And so the question is,\nwell, irrational multiples are actually very common.",
    "start": "1105470",
    "end": "1110760"
  },
  {
    "text": "If you, for example, randomly\nperturb all these vertices and you measure the\nsizes of those corridors,",
    "start": "1110760",
    "end": "1117370"
  },
  {
    "text": "with probability 1, they\nwill be irrational multiples of each other,\nbecause irrationals are much more common\nthan rational numbers.",
    "start": "1117370",
    "end": "1124390"
  },
  {
    "text": "And that's true. But the other thing that\nthis example requires",
    "start": "1124390",
    "end": "1129990"
  },
  {
    "text": "is this outer boundary. We need that none of\nthese perpendiculars can escape out to infinity.",
    "start": "1129990",
    "end": "1135340"
  },
  {
    "text": "If they do, they\nwon't stay in there. Eventually, if there's\na tiny, tiny gap here,",
    "start": "1135340",
    "end": "1140659"
  },
  {
    "text": "if these guys didn't\nquite match up, eventually because this thing is dense,\nit will find that little gap",
    "start": "1140660",
    "end": "1145959"
  },
  {
    "text": "because it has positive length. When it finds the\ngap, it's going to spiral around and\naround and around and go out to infinity instead\nof being trapped inside.",
    "start": "1145959",
    "end": "1153450"
  },
  {
    "text": "So the unlikely\nthing in this example is actually this\nouter pink polygon, that the perpendicular\ncoming out this way",
    "start": "1153450",
    "end": "1161190"
  },
  {
    "text": "bounced around,\ndid lots of things, and eventually hit\nthe same vertex. That's actually unlikely.",
    "start": "1161190",
    "end": "1167360"
  },
  {
    "text": "Definitely in this\nexample and in general we claim that we do not get\ncycles of perpendiculars",
    "start": "1167360",
    "end": "1173470"
  },
  {
    "text": "except in one kind\nof scenario, which I guess I could draw\nin the software.",
    "start": "1173470",
    "end": "1179710"
  },
  {
    "text": "Let's try it. So whenever you have a vertex\nof degree more than two,",
    "start": "1179710",
    "end": "1192779"
  },
  {
    "text": "so let's do something like that. ",
    "start": "1192780",
    "end": "1198720"
  },
  {
    "text": "Little too far away. So let me just add a\nlittle guy like this. ",
    "start": "1198720",
    "end": "1205510"
  },
  {
    "text": "And this a little closer. ",
    "start": "1205510",
    "end": "1217360"
  },
  {
    "text": "It's got a lot of spiraling. Let's make it a little\nbit cleaner here. It's actually kind\nof degenerate,",
    "start": "1217360",
    "end": "1223299"
  },
  {
    "text": "but the point is, if-- here\nI have three cut edges.",
    "start": "1223300",
    "end": "1229030"
  },
  {
    "text": "I've kind of made them roughly\nequal so this doesn't get huge, but in general, if you have\nany straight skeleton vertex",
    "start": "1229030",
    "end": "1235840"
  },
  {
    "text": "and you reflect it'\naround these bisectors, you will always come back\nto where you started.",
    "start": "1235840",
    "end": "1243600"
  },
  {
    "text": "So this requires that\neach of these angles is strictly convex, so this is\nwhy you need at least three cut",
    "start": "1243600",
    "end": "1249450"
  },
  {
    "text": "edges to come together here. But once you have\nat least three,",
    "start": "1249450",
    "end": "1254470"
  },
  {
    "text": "you'll always cycle around. You'll always come back\nto where you started. It actually happens again here. This guy cycles\naround and comes back.",
    "start": "1254470",
    "end": "1262595"
  },
  {
    "text": "So that's-- well, sorry, that\none's actually a little bit special because of what\nI did with the dragging.",
    "start": "1262595",
    "end": "1269809"
  },
  {
    "text": "In general, it's going\nto be more like this. It's a little hard to see.",
    "start": "1269810",
    "end": "1276610"
  },
  {
    "text": "What's going on here is that\nthis innermost guy cycles around, indeed,\nbut everyone else",
    "start": "1276610",
    "end": "1282430"
  },
  {
    "text": "spirals around and keeps going. So that's actually\nthe perpendicular. It comes from here\nand goes that way,",
    "start": "1282430",
    "end": "1289560"
  },
  {
    "text": "and then it spirals around. It hasn't finished yet,\nbut it would actually spiral all the way\nout to infinity.",
    "start": "1289560",
    "end": "1296170"
  },
  {
    "text": "So the claim is, in general,\nthe-- this is conjecture.",
    "start": "1296170",
    "end": "1304865"
  },
  {
    "start": "1303000",
    "end": "1793000"
  },
  {
    "start": "1304865",
    "end": "1315050"
  },
  {
    "text": "With probability 1, if you\nrandomly perturb the vertices slightly, the only cycles of\nperpendiculars that you get",
    "start": "1315050",
    "end": "1336950"
  },
  {
    "text": "are around a single vertex. ",
    "start": "1336950",
    "end": "1345549"
  },
  {
    "text": "So something like\nthis example, which we saw where there is a straight\nskeleton edge here, here,",
    "start": "1345550",
    "end": "1352400"
  },
  {
    "text": "and then this guy-- I guess I\nshould draw the skeleton edges.",
    "start": "1352400",
    "end": "1359040"
  },
  {
    "text": "It's a good test of\nhow accurate I drew it, because I know if\nthis is perpendicular, this is perpendicular,\nand this is perpendicular,",
    "start": "1359040",
    "end": "1367060"
  },
  {
    "text": "this will always come back\nto its starting point. It's just property\nof reflections. Basically, because we\nsatisfy Kawasaki here,",
    "start": "1367060",
    "end": "1373799"
  },
  {
    "text": "this must be true because these\nare bisectors of these guys.",
    "start": "1373800",
    "end": "1379690"
  },
  {
    "text": "So this has to happen. The claim is, that's the\nonly situation it happens. And if this is all\nthat happens, you",
    "start": "1379690",
    "end": "1385870"
  },
  {
    "text": "can prove there's no density,\nand in fact, it folds flat. So this is the good case. Unfortunately, when\nwe make real examples,",
    "start": "1385870",
    "end": "1392050"
  },
  {
    "text": "we like degeneracies\nbecause they reduce the number of folds. So the theory says, avoid\ndegeneracies Let's perturb",
    "start": "1392050",
    "end": "1398360"
  },
  {
    "text": "things slightly, then\nit's guaranteed to fold. But in practice, you want\nto add degeneracies, just",
    "start": "1398360",
    "end": "1404200"
  },
  {
    "text": "carefully so that you\ndon't get dense behavior like the weird\nexample I showed you.",
    "start": "1404200",
    "end": "1411350"
  },
  {
    "text": "So that's clarification why\nwe think this does not happen.",
    "start": "1411350",
    "end": "1420080"
  },
  {
    "text": "Or, sorry, why we think with\nprobability 1 things are good. But sadly we can't prove this. Maybe we'll work on it in\nthe open problem session.",
    "start": "1420080",
    "end": "1426340"
  },
  {
    "text": "I think it's tractable, I\njust haven't worked on it in a long time. ",
    "start": "1426340",
    "end": "1431846"
  },
  {
    "text": "Questions?  OK. So, right.",
    "start": "1431846",
    "end": "1437900"
  },
  {
    "text": "The claim is if you\nperturb this example, everybody will escape out to\ninfinity like in the spiral.",
    "start": "1437900",
    "end": "1445840"
  },
  {
    "text": "OK. So I think this is the end\nof the skeleton method, but before we go on, I\nwant to show some examples.",
    "start": "1445840",
    "end": "1453050"
  },
  {
    "text": "So problem set-- we have up to\nfour [INAUDIBLE] later today.",
    "start": "1453050",
    "end": "1458540"
  },
  {
    "text": "One of the questions is\ndesign your own folding cut, and draw it. So you probably want to draw\nit into a program like Inkscape",
    "start": "1458540",
    "end": "1465910"
  },
  {
    "text": "or Adobe Illustrator. It has good snapping, so you can\nfind intersections and things",
    "start": "1465910",
    "end": "1471190"
  },
  {
    "text": "like that, and compute\nangular bisectors as in ruler and compass.",
    "start": "1471190",
    "end": "1477240"
  },
  {
    "text": "And these are some examples\nfrom 2010, same question. There are lots of\nthem, but I chose",
    "start": "1477240",
    "end": "1482360"
  },
  {
    "text": "three that are\nparticularly cool. This one has a line\nof symmetry, you get a fish bone\nby [? Ji, ?] who's",
    "start": "1482360",
    "end": "1489490"
  },
  {
    "text": "a Ph.D. student\nin the media lab. This is by\n[? Sarah Eisenstadt ?],",
    "start": "1489490",
    "end": "1495150"
  },
  {
    "text": "who's a Ph.D. student in CSAIL\nworking on folding things. Witch's hat is pretty\ncool, pretty fairly simple.",
    "start": "1495150",
    "end": "1503470"
  },
  {
    "text": "You have to fold your examples. It can't be too complicated. And then Jason [? Ku ?], who\nwe saw the guest lecture by",
    "start": "1503470",
    "end": "1510260"
  },
  {
    "text": "wasn't sufficiently impressed\nby my jack o' lantern, so he made a really\ncomplicated one and folded it.",
    "start": "1510260",
    "end": "1517360"
  },
  {
    "text": "So those are some\ninspiration points. And I thought I'd show\nyou a magic trick which",
    "start": "1517360",
    "end": "1524560"
  },
  {
    "text": "is one of the sources\nfor inspiration for the fold and\none cut problem. ",
    "start": "1524560",
    "end": "1531720"
  },
  {
    "text": "So, a piece of paper. So this is a magic\ntrick of unknown origin. It was described\nby Martin Gardner,",
    "start": "1531720",
    "end": "1539540"
  },
  {
    "text": "I think, probably in\nthe '60s, and then the book appeared in the '90s. And it's a story\nof two politicians,",
    "start": "1539540",
    "end": "1547450"
  },
  {
    "text": "and let's just be generic. Let's say one politician was\nvery much liked by the people,",
    "start": "1547450",
    "end": "1552820"
  },
  {
    "text": "and the other politician\nwas disliked by the people. Imagine a simple world\nwhere it was so simple.",
    "start": "1552820",
    "end": "1559470"
  },
  {
    "text": "And by a freak accident,\nboth politicians die at the same time. And they both happen\nto be Christians,",
    "start": "1559470",
    "end": "1565919"
  },
  {
    "text": "so they go to the\ngates of Heaven. That's how the story goes. And arrive at the\ngates of Heaven. I guess Saint Peter's\nthe keeper of the gates,",
    "start": "1565920",
    "end": "1572750"
  },
  {
    "text": "and Saint Peter\nsays, well not just anyone can get into heaven. You have to have a ticket.",
    "start": "1572750",
    "end": "1578320"
  },
  {
    "text": "And the good politician\nbeing liked by the people has a ticket, which\nhe folds flat. And the bad politician\nhas no ticket.",
    "start": "1578320",
    "end": "1584683"
  },
  {
    "text": "So the bad politician\nsays, well you know, we've had our\ndisagreements, but maybe you could put in a good\nword to Saint Peter",
    "start": "1584683",
    "end": "1589990"
  },
  {
    "text": "or do something to help me out. I hear Heaven's a nice place. Maybe we could go\nthere together,",
    "start": "1589990",
    "end": "1595320"
  },
  {
    "text": "resolve our\ndifferences, whatever. So the good politician, having\na ticket and a pair of scissors",
    "start": "1595320",
    "end": "1600860"
  },
  {
    "text": "like any respecting\npolitician, takes his ticket and makes one\ncomplete straight cut.",
    "start": "1600860",
    "end": "1606790"
  },
  {
    "text": "And it's going to\nget a lot of pieces, so I've got to be,\nhold this carefully.",
    "start": "1606790",
    "end": "1613149"
  },
  {
    "text": "So, put that down. And he hands all these\npieces to the bad politician,",
    "start": "1613150",
    "end": "1620010"
  },
  {
    "text": "says there you go. The bad politician has\nno idea what they're for, so he hands them to Saint Peter. Saint Peter starts\nunfolding the pieces, says,",
    "start": "1620010",
    "end": "1629240"
  },
  {
    "text": "I wonder what shapes I get. I hear there's a cool\nproblem about this. So it's a little hard\nto do without a table.",
    "start": "1629240",
    "end": "1636429"
  },
  {
    "text": "So I'm going to have\nto use the board. First, we get the letter H. Then\nwe get-- put these down here.",
    "start": "1636430",
    "end": "1656669"
  },
  {
    "text": "Then we get the letter E. OK?",
    "start": "1656670",
    "end": "1666010"
  },
  {
    "text": "Then we get letter\nL, and the letter L. And if it was on a\ntable, I'd arrange it,",
    "start": "1666010",
    "end": "1671460"
  },
  {
    "text": "and clearly Saint\nPeter's not happy, and the bad politician\ngets sent straight to hell. The good politician hung\non to one piece cleverly,",
    "start": "1671460",
    "end": "1679190"
  },
  {
    "text": "and his ticket is still\nmore or less intact, and he gets into heaven.",
    "start": "1679190",
    "end": "1685050"
  },
  {
    "text": "That's the magic trick. It's very simple folding.",
    "start": "1685050",
    "end": "1690520"
  },
  {
    "text": "I've known this, memorized\nthis even, for years. And you get exactly\nthose pieces.",
    "start": "1690520",
    "end": "1695610"
  },
  {
    "text": "So pretty cool. Of course, from a\nmathematical standpoint, it's a little unsatisfying.",
    "start": "1695610",
    "end": "1701370"
  },
  {
    "text": "Because, come on, use\nthree pieces for the H, three pieces for the E.\nSurely you could do better.",
    "start": "1701370",
    "end": "1707170"
  },
  {
    "text": "And from a rectangle, you\ncan kind of do better. It's a little awkward\nbecause the pieces",
    "start": "1707170",
    "end": "1713860"
  },
  {
    "text": "are not all the same size,\nbut is one scissor cut because all the vertices\nare even degree. You cut it, and you get\nall these pieces, which",
    "start": "1713860",
    "end": "1723850"
  },
  {
    "text": "if I were more\npracticed at this, I could immediately pick\nout which one's the H. OK,",
    "start": "1723850",
    "end": "1732110"
  },
  {
    "text": "I'll just do them out of order. Here is the cross. Well, kind of a cross.",
    "start": "1732110",
    "end": "1737340"
  },
  {
    "text": "Not quite perfect\nproportions, but good enough.  This is the letter E. This one's\nactually more impressive when",
    "start": "1737340",
    "end": "1744380"
  },
  {
    "text": "you don't have a table, because\nyou can't tell that they're all different sizes. The letter E. We've got the\nletter-- these look like L's.",
    "start": "1744380",
    "end": "1754944"
  },
  {
    "text": "And they're small\nL's, but there you go. They're different orientations. And then I've got the\nletter H. There you go.",
    "start": "1754944",
    "end": "1763801"
  },
  {
    "text": "OK. So that's our new and improved\nversion using universality of folding cut.",
    "start": "1763801",
    "end": "1769290"
  },
  {
    "text": "So it gives you some idea\nof A, where folding cut came from in recent times,\nis the magic community.",
    "start": "1769290",
    "end": "1775452"
  },
  {
    "text": "I mentioned Harry Houdini\ndid some tricks, and Gerald [? Low ?], but there's a\nbunch of these tricks around,",
    "start": "1775452",
    "end": "1780470"
  },
  {
    "text": "and kind of cool. So the checkerboard trick\nand the previous hell trick.",
    "start": "1780470",
    "end": "1787020"
  },
  {
    "text": "So those are some examples. Now we move onto the\ndisk-packing method.",
    "start": "1787020",
    "end": "1792840"
  },
  {
    "text": "So I have one\nquestion about this, which is, how exactly do we\ngo from the disk-packing to--",
    "start": "1792840",
    "end": "1800350"
  },
  {
    "text": "yeah, cool proof,\nthough, cool proof, bro. So how do we go from\nthe disk-packing",
    "start": "1800350",
    "end": "1806050"
  },
  {
    "text": "to the decomposition into\ntriangles and quadrilaterals. So I thought I'd just\nreview this slide.",
    "start": "1806050",
    "end": "1812039"
  },
  {
    "text": "We start with our graph. We offset it by\nsome tiny epsilon. That's to get things\noff the line, basically.",
    "start": "1812040",
    "end": "1819620"
  },
  {
    "text": "Then we do this disk-packing. And remember roughly how\nthe disk-packing works. We put some disks at\neach of the centers.",
    "start": "1819620",
    "end": "1826997"
  },
  {
    "text": "Here, it's a little awkward\nbecause of the offset, but you put one at each\nof these four corners. Also the corners of\nthe piece of paper.",
    "start": "1826997",
    "end": "1832940"
  },
  {
    "text": "Why not? Then you also pack small\nenough disks along the edge, so that you cover the edge\nby diameters of the disks.",
    "start": "1832940",
    "end": "1840759"
  },
  {
    "text": "I do that the same\non all the sides. Basically, you try\nto put a big one in, but if that big one intersects,\nyou decompose it into half.",
    "start": "1840760",
    "end": "1848020"
  },
  {
    "text": "That's how the algorithm works. So now you've covered the\nvertices and the edges, but you may have\nbig gaps like this,",
    "start": "1848020",
    "end": "1856150"
  },
  {
    "text": "too many sides on this gap. And so then you\njust greedily put the largest disk you\ncan in those gaps",
    "start": "1856150",
    "end": "1862129"
  },
  {
    "text": "until all you're left\nwith in these yellow gaps are triangles and\nquadrilaterals,",
    "start": "1862130",
    "end": "1867220"
  },
  {
    "text": "or three-sided gaps\nand four-sided gaps. And then all we do is\ndraw this red graph",
    "start": "1867220",
    "end": "1872730"
  },
  {
    "text": "by putting a vertex at\nthe center of each disk. That's what the\nquestion was about. And then whenever\ntwo disks touch,",
    "start": "1872730",
    "end": "1880510"
  },
  {
    "text": "we call this kissing disks\nfor historic reasons, because they're just\nbarely touching I guess,",
    "start": "1880510",
    "end": "1886655"
  },
  {
    "text": "at their lips. Got a lot of lips for disks. At least we're in flat land.",
    "start": "1886655",
    "end": "1892370"
  },
  {
    "text": "So then whenever\nthey touch, we draw the edge between\nthe two centers.",
    "start": "1892370",
    "end": "1897790"
  },
  {
    "text": "So that decomposes this\npiece of paper into parts, and because the gaps\nare three sides, those will correspond to\ntriangles, or four sides,",
    "start": "1897790",
    "end": "1905059"
  },
  {
    "text": "those will correspond\nto quadrilaterals. So that's all. And then we put\nrabbit ears in here,",
    "start": "1905060",
    "end": "1910309"
  },
  {
    "text": "and line universal quad\nmolecules in there, and it folds flat. It will align all\nof the red edges",
    "start": "1910310",
    "end": "1916970"
  },
  {
    "text": "plus these black\nedges on the outside, and it will align all\nthese inner red edges",
    "start": "1916970",
    "end": "1922212"
  },
  {
    "text": "with these black\nedges, and then we do the sync folds\nthat we mentioned. And that will get one of these\nout of the way of the other,",
    "start": "1922212",
    "end": "1928600"
  },
  {
    "text": "and we'll end up aligning\njust these cut edges. ",
    "start": "1928600",
    "end": "1934560"
  },
  {
    "text": "So that's a quick\nreview of that method. So one question is, how\ndo you allocate the disks.",
    "start": "1934560",
    "end": "1942230"
  },
  {
    "start": "1937000",
    "end": "2280000"
  },
  {
    "text": "Is there sort of a best way? And I guess there could\nbe several measures. Maybe you don't want\nreally tiny disks,",
    "start": "1942230",
    "end": "1947970"
  },
  {
    "text": "because that tends to\nlead to very tiny folds. But the standard measure here\nis how many disks do you need,",
    "start": "1947970",
    "end": "1953870"
  },
  {
    "text": "because that will reduce\nthe number of folds. So can you minimize\nthe number of disks, and in general,\nit's known roughly",
    "start": "1953870",
    "end": "1961070"
  },
  {
    "text": "how many disks you need. And the algorithm\nI just told you achieves that number of disks.",
    "start": "1961070",
    "end": "1967230"
  },
  {
    "text": "So first I'll give\nyou the number. Number of disks is\nproportional to the integral--",
    "start": "1967230",
    "end": "1978482"
  },
  {
    "text": "I didn't say it\nwas the easy bound, but it is the right answer. ",
    "start": "1978482",
    "end": "1986809"
  },
  {
    "text": "OK, there's a lot\nof notation in here, and this one you\nshould definitely not know unless you've taken a\ncomputational geometry class.",
    "start": "1986810",
    "end": "1993210"
  },
  {
    "text": "Even then, you probably\nwouldn't know it. It's not that common. It mostly comes up in\nmeshing and disk-packing,",
    "start": "1993210",
    "end": "1998655"
  },
  {
    "text": "so it's pretty specific. It's called local feature size. ",
    "start": "1998655",
    "end": "2005390"
  },
  {
    "text": "And this is if,\nonce I define it, it is actually fairly\nintuitive, this bound.",
    "start": "2005390",
    "end": "2010940"
  },
  {
    "text": "Local feature size\nat X. So we're imagining some kind\nof polygon here.",
    "start": "2010940",
    "end": "2016170"
  },
  {
    "text": " And at every point\nof the polygon-- let's look at a\nvertex here-- but it",
    "start": "2016170",
    "end": "2023170"
  },
  {
    "text": "works for any point\nalong the boundary. Actually maybe not\neven on the boundary, but we're interested\nhere-- this notation del p",
    "start": "2023170",
    "end": "2031830"
  },
  {
    "text": "is the boundary of the polygon. So this is del p. That just means edges and\nvertices, all of those points.",
    "start": "2031830",
    "end": "2040310"
  },
  {
    "text": "So we take some point\nX on the boundary, and we look at the\nsmallest disk centered",
    "start": "2040310",
    "end": "2045809"
  },
  {
    "text": "at that point that\ntouches another feature. So that's the feature size.",
    "start": "2045810",
    "end": "2052090"
  },
  {
    "text": "Features here are\nedges of the polygon. That's all we have. Now of course, no matter what\nsize disk, you hit this feature",
    "start": "2052090",
    "end": "2058570"
  },
  {
    "text": "and you hit this feature,\nso those don't count. Those are incident features. So in general, it is\nthe smallest radius disk",
    "start": "2058570",
    "end": "2072510"
  },
  {
    "text": "that hits a non incident feature\non incident feature, which",
    "start": "2072510",
    "end": "2081899"
  },
  {
    "text": "is an edge. So here, as soon as\nthe disk gets this big,",
    "start": "2081900",
    "end": "2087320"
  },
  {
    "text": "it hits this edge. And so the local feature\nsize is this radius.",
    "start": "2087320",
    "end": "2094879"
  },
  {
    "text": "In general, for every point,\nyou can draw some size disk. So over here, it's going\nto be a little bit bigger.",
    "start": "2094880",
    "end": "2100984"
  },
  {
    "text": "You can maybe get up to here. ",
    "start": "2100985",
    "end": "2106990"
  },
  {
    "text": "Actually, I guess it\nshould be non-adjacent. That was going to be\na little bit awkward.",
    "start": "2106990",
    "end": "2112500"
  },
  {
    "text": "I also don't want\nto count this edge, because if I'm right here, the\nfeature size is super tiny, and I don't want\nLFS ever to be 0.",
    "start": "2112500",
    "end": "2120480"
  },
  {
    "text": "So you also have to skip\nthe adjacent edges, which means local feature\nsize of this point",
    "start": "2120480",
    "end": "2126460"
  },
  {
    "text": "is going to be more like--\nhard to draw circles--",
    "start": "2126460",
    "end": "2131660"
  },
  {
    "text": "it's going to be more\nlike that distance. That's when you hit a\nnon-adjacent feature, sorry.",
    "start": "2131660",
    "end": "2137742"
  },
  {
    "text": "So you have to exclude\nthis edge that you're on and the two adjacent\nones, otherwise this definition\ndoesn't quite work out.",
    "start": "2137742",
    "end": "2144099"
  },
  {
    "text": "So then you measure\nthis for all points. There's infinitely\nmany, of course, continuum along the boundary.",
    "start": "2144100",
    "end": "2150359"
  },
  {
    "text": "That's the integral over\nX in the boundary of P. And you take 1 over the\nlocal feature size of X,",
    "start": "2150360",
    "end": "2156860"
  },
  {
    "text": "and you integrate that for\nall X. It gives you a number, and it turns out, some\nconstant times that number",
    "start": "2156860",
    "end": "2163660"
  },
  {
    "text": "is the right answer. The algorithm I achieve,\nwhich I described, which is put the biggest disk\nyou can or divide in half",
    "start": "2163660",
    "end": "2169250"
  },
  {
    "text": "if you can't will get within\na constant factor of the best possible bound of all\npossible to disk-packings.",
    "start": "2169250",
    "end": "2175480"
  },
  {
    "text": "So this is pretty much known. You get within a constant factor\nof the optimal disk-packing if you're counting disks.",
    "start": "2175480",
    "end": "2183059"
  },
  {
    "text": "Not a great number. I can't say they're N\ndisks or N squared disks, because you just can't do that.",
    "start": "2183059",
    "end": "2190119"
  },
  {
    "text": "If you have a piece of\npaper and some really long-- here's your cut graph. Doesn't quite go to the\nends, though-- then you've",
    "start": "2190120",
    "end": "2197790"
  },
  {
    "text": "got to have a tiny\ndisk here, and that's going to require you to\nhave a bunch of disks. Even though this has constant\nsize, you're going to need,",
    "start": "2197790",
    "end": "2204660"
  },
  {
    "text": "I don't know how\nmany disks here. Especially if your\npaper's really narrow, you're going to\nneed a lot of disks.",
    "start": "2204660",
    "end": "2210854"
  },
  {
    "text": "That's the best you can\nhope for disk-packing. I actually brought a\nlittle example of something like that where\nyour goal is just",
    "start": "2210854",
    "end": "2217389"
  },
  {
    "text": "to cut out a single segment\nin the middle of the paper. This is to illustrate\nodd degree vertices. These are degree 1 vertices,\nand you might think,",
    "start": "2217389",
    "end": "2224060"
  },
  {
    "text": "wow, it's impossible for me\nto cut this thing without, I don't know, just cutting.",
    "start": "2224060",
    "end": "2229309"
  },
  {
    "text": "I could cut with my X-ACTO\nknife from here to here. If I want to make a\ncomplete straight cut,",
    "start": "2229310",
    "end": "2234640"
  },
  {
    "text": "you can fold it like this. This is what the skeleton\nmethod would give you.",
    "start": "2234640",
    "end": "2240610"
  },
  {
    "text": "Fold it like this, and\nthen you use your laser to cut right along the line. With scissor cuts,\nit's not so bad, right?",
    "start": "2240610",
    "end": "2247050"
  },
  {
    "text": "I cut slightly in.  It's pretty much\ncutting along the line.",
    "start": "2247050",
    "end": "2254200"
  },
  {
    "text": "Just not quite. I made a tiny mistake. So I cut off a line,\nslightly thicker line,",
    "start": "2254200",
    "end": "2261569"
  },
  {
    "text": "and I get my slit in the paper. So mathematical cuts\nare not really that bad.",
    "start": "2261570",
    "end": "2267280"
  },
  {
    "text": "You just are cutting a\nslightly larger version than the single slit\nthat you wanted to make.",
    "start": "2267280",
    "end": "2272730"
  },
  {
    "text": "You just have to\ncut very carefully. OK. That was number of disks.",
    "start": "2272730",
    "end": "2279589"
  },
  {
    "text": "Next question is, how does all\nthis relate to the tree method? This is kind of a neat question. Both methods, skeleton method\nand the disk-packing method",
    "start": "2279590",
    "end": "2287780"
  },
  {
    "text": "relate to the tree\nmethod in different ways. I thought I would\ntalk about that. So first, let's compare\nthe disk-packing method",
    "start": "2287780",
    "end": "2294580"
  },
  {
    "text": "which we just talked\nabout to the tree method. Both of them use\nuniversal molecules.",
    "start": "2294580",
    "end": "2299850"
  },
  {
    "text": "This one only uses\nuniversal molecules for triangles and quads. We know in general,\nthe universal molecule",
    "start": "2299850",
    "end": "2305640"
  },
  {
    "text": "works for any convex polygon. This is an example\nof a pentagon. And it works.",
    "start": "2305640",
    "end": "2310690"
  },
  {
    "text": "It has a gusset to get\nthe tree lengths right. Here we use gussets to kind\nof get the tree lengths right.",
    "start": "2310690",
    "end": "2316296"
  },
  {
    "text": "As you may recall, we\nwant the perpendiculars to go to the disk kissing\npoints, those tangencies.",
    "start": "2316296",
    "end": "2323010"
  },
  {
    "text": "Because then they\nalign with the others, and then we never\nget the perpendicular spiraling or doing\nother bad things.",
    "start": "2323010",
    "end": "2328552"
  },
  {
    "text": "So the number of creases becomes\nproportional to the number of disks. The number of disks\nis this messy thing.",
    "start": "2328552",
    "end": "2335190"
  },
  {
    "text": "So that's that. Let's see, what else? Here, we only use disks.",
    "start": "2335190",
    "end": "2341320"
  },
  {
    "text": "Over here, we could\njust use disks, but there's also the\nability to use rivers, so this is more general in\nthat we can do bigger polygons",
    "start": "2341320",
    "end": "2349630"
  },
  {
    "text": "than' just quads, and we can\ndo rivers, not just circles. Here, the input, though, is a\ntree with specified lengths,",
    "start": "2349630",
    "end": "2358310"
  },
  {
    "text": "and it's actually NP-hard to\nplace the disks correctly.",
    "start": "2358310",
    "end": "2363780"
  },
  {
    "text": "We proved that last time. Over here, the\ninput is a polygon.",
    "start": "2363780",
    "end": "2369209"
  },
  {
    "text": "It's already been embedded\non the sheet of paper. There's no really hard\ndecisions here except you have to fill the\npaper with disks.",
    "start": "2369209",
    "end": "2376810"
  },
  {
    "text": "But that's not so hard. So you can do this\nin polynomial time. Polynomial and even,\nalmost, roughly this time.",
    "start": "2376810",
    "end": "2385740"
  },
  {
    "text": "Times a log factor. You can find\ndisplacement of disks. So that's not too hard,\nwhereas over here, it's",
    "start": "2385740",
    "end": "2392620"
  },
  {
    "text": "NP-hard to place a disk,\noptimally at least. Find a displacement\nyou could do.",
    "start": "2392620",
    "end": "2398250"
  },
  {
    "text": "So basically the\ninputs differ, and it's using the same\nbackbone or the same,",
    "start": "2398250",
    "end": "2406020"
  },
  {
    "text": "what do you call it, front end. The same back end, I\nsuppose, after we've",
    "start": "2406020",
    "end": "2411780"
  },
  {
    "text": "decomposed into a\nbunch of molecules, you just fold the molecules\nand you're basically done. Here we have to do\nsome syncs at the end,",
    "start": "2411780",
    "end": "2417240"
  },
  {
    "text": "but it's using it for\ndifferent purposes. Otherwise they're very similar. And indeed, this is\ninspired by that.",
    "start": "2417240",
    "end": "2425130"
  },
  {
    "text": "OK, so that was the\ndisk-packing method. Then there's the\nstraight skeleton method. These look much more\ndifferent, but in fact, they",
    "start": "2425130",
    "end": "2431660"
  },
  {
    "text": "are quite related. If you do fold-and-cut\non a convex polygon,",
    "start": "2431660",
    "end": "2437090"
  },
  {
    "text": "it gives you roughly\nthe universal molecule, just with no gussets. So here, neither one is\nmore general than the other.",
    "start": "2437090",
    "end": "2444170"
  },
  {
    "text": "The universal molecule\nis more general in that it has\ngussets, which lets it control the tree\ntopology you get and control",
    "start": "2444170",
    "end": "2449790"
  },
  {
    "text": "the lengths you get in the tree. Over here, we saw the\ntree just happens. You can't control the tree.",
    "start": "2449790",
    "end": "2457980"
  },
  {
    "text": "The shadow tree is just a tool\nto prove that it falls flat, but you can do non\nconvex polygons, which is much more general\nthan convex polygons.",
    "start": "2457980",
    "end": "2465400"
  },
  {
    "text": "So they each have their\nown unique claims to fame. A natural question is,\ncan you combine them.",
    "start": "2465400",
    "end": "2472009"
  },
  {
    "text": "And in fact, you can. And this was, you may remember\na bunch of lectures ago--",
    "start": "2472010",
    "end": "2477500"
  },
  {
    "text": "I think class four\nor so-- I showed this slide of the meat\nof origami design secrets",
    "start": "2477500",
    "end": "2483860"
  },
  {
    "text": "volume two, or the\nsecond edition, rather. There's tree theory,\nwhich we talked about.",
    "start": "2483860",
    "end": "2489000"
  },
  {
    "text": "There was a box pleating tree\ntheory which we briefly showed. And there's this more general\nthing called polygon packing,",
    "start": "2489000",
    "end": "2494318"
  },
  {
    "text": "and this is in some\nsense the fusion of straight skeleton\nmethod of fold-and-cut, basically the straight\nskeleton, plus tree theory.",
    "start": "2494318",
    "end": "2503839"
  },
  {
    "text": "And this is done jointly between\nRobert Lang and the domains. And here's an example\nof what it looks like.",
    "start": "2503840",
    "end": "2510640"
  },
  {
    "text": "It's a little hard to see\nhere, but I will point out if you look at the blue lines,\nwhich are the cut lines-- here,",
    "start": "2510640",
    "end": "2517830"
  },
  {
    "text": "of course, they're\nthe active paths. This guy is non convex.",
    "start": "2517830",
    "end": "2525480"
  },
  {
    "text": "And if you look at the\nred stuff in there, it is exactly the straight\nskeleton of that polygon.",
    "start": "2525480",
    "end": "2532589"
  },
  {
    "text": "So those red lines are\nthe straight skeleton of this blue thing. So there you go. I've got the fold-and-cut\nstraight skeleton",
    "start": "2532590",
    "end": "2539290"
  },
  {
    "text": "being used in that setting. You've got perpendiculars\nall over the place, which is an annoying feature\nof the skeleton method.",
    "start": "2539290",
    "end": "2546090"
  },
  {
    "text": "It is inherited by this method. And if you look at something\nlike this rectangle.",
    "start": "2546090",
    "end": "2553109"
  },
  {
    "text": "It's convex, but\nyou have gussets. This is a gusset, this is\na gusset, gusset, gusset.",
    "start": "2553110",
    "end": "2558490"
  },
  {
    "text": "It's a little hard to\nsee, but we basically split the rectangle into\nthis rectangle, this square,",
    "start": "2558490",
    "end": "2563869"
  },
  {
    "text": "this rectangle, this\nsquare, this rectangle. So this is really the\nfusion of the two.",
    "start": "2563870",
    "end": "2570980"
  },
  {
    "text": "It's not yet been\nmathematically formalized, because we're first proving\nthat the tree method works. Then we will\nfinally get to this.",
    "start": "2570980",
    "end": "2576870"
  },
  {
    "text": "But if you want these slightly\nmore informal but practical version, read Oragami Design\nSecrets and it will explain",
    "start": "2576870",
    "end": "2584042"
  },
  {
    "text": "all the different\ncases and what we believe is a correct algorithm. We just haven't proved\nall the cases yet.",
    "start": "2584042",
    "end": "2589880"
  },
  {
    "text": "And you can use it to design\ncool things in the box pleating setting and get more efficient\nthan if you required rectangles",
    "start": "2589880",
    "end": "2596160"
  },
  {
    "text": "or some convex shape. Cool. So that's that.",
    "start": "2596160",
    "end": "2603616"
  },
  {
    "text": "What else do we have? ",
    "start": "2603616",
    "end": "2610490"
  },
  {
    "text": "I have one-- almost done-- one\ncool open question posed by you is, what if instead of\ncutting with a straight line,",
    "start": "2610490",
    "end": "2618870"
  },
  {
    "start": "2613000",
    "end": "2681000"
  },
  {
    "text": "I cut with a constant\ncurvature line? So a piece of a circular arc.",
    "start": "2618870",
    "end": "2623886"
  },
  {
    "text": "Then, of course,\nthe things I get will have circular\narc boundaries, but can I get any\ncircular arc boundary",
    "start": "2623886",
    "end": "2628940"
  },
  {
    "text": "with that fixed curvature? Or are there limitations? And at first I thought\nthe answer is clearly yes,",
    "start": "2628940",
    "end": "2635849"
  },
  {
    "text": "but I do wonder about\nsituations like this.",
    "start": "2635850",
    "end": "2644870"
  },
  {
    "text": "Can you align these\ntwo by folding? I haven't thought\nabout it enough to be sure, but\nnot totally sure.",
    "start": "2644870",
    "end": "2651950"
  },
  {
    "text": "Whereas if I have things like\nthis, I think this is good.",
    "start": "2651950",
    "end": "2658617"
  },
  {
    "text": "I mean, I could fold\nhere, and in general, I could just kind of\npretend there's a segment. And the segment I saw fold\nand cut on the segments,",
    "start": "2658617",
    "end": "2664930"
  },
  {
    "text": "and that will also\nalign the circular arc. That won't work\nin general, but I feel comfortable if they\nhave the same orientation,",
    "start": "2664930",
    "end": "2669970"
  },
  {
    "text": "it looks good. When they flip\norientations, I'm not sure. So a neat problem\nto think about.",
    "start": "2669970",
    "end": "2675819"
  },
  {
    "text": "And one final thing\nis about flattening.",
    "start": "2675820",
    "end": "2681300"
  },
  {
    "start": "2681000",
    "end": "2796000"
  },
  {
    "text": "This is about this\nquestion, this picture. So we said, oh great, because\nwe can solve fold-and-cut,",
    "start": "2681300",
    "end": "2686890"
  },
  {
    "text": "we can also take the\nboundary of that polygon and flatten it like this.",
    "start": "2686890",
    "end": "2692180"
  },
  {
    "text": "Of course, the folding\nof the interior here which we're\nignoring-- in general, this whole thing goes\nthrough three dimensions",
    "start": "2692180",
    "end": "2698610"
  },
  {
    "text": "until we end up here. One dimension up, if we solve\nthe 3D fold-and-cut problem where you have a polyhedron,\nyou fold it through 4D",
    "start": "2698610",
    "end": "2705800"
  },
  {
    "text": "back into 3D which is\nflat so that you align all the boundaries of the\nfaces of that polyhedron.",
    "start": "2705800",
    "end": "2714082"
  },
  {
    "text": "And then just take the\nboundary of that motion. It's like flattening\na polyhedron like cereal box or whatever.",
    "start": "2714082",
    "end": "2719960"
  },
  {
    "text": "And indeed, that will\nfind a folded state of a polyhedron that is flat.",
    "start": "2719960",
    "end": "2727630"
  },
  {
    "text": "But of course, you can't\nreally use that motion, because it goes through 4D. This one will go\nthrough 3D, so if you",
    "start": "2727630",
    "end": "2734020"
  },
  {
    "text": "want it to flatten this\nlinkage, that's also not valid. So you get a folded\nstate, but you",
    "start": "2734020",
    "end": "2739150"
  },
  {
    "text": "don't get the\nfolding motion if you could solve 3D fold-and-cut. Our current state\nis, we don't know",
    "start": "2739150",
    "end": "2744300"
  },
  {
    "text": "how to solve 3D fold-and-cut. We do know how to solve\npolyhedron flattening. So this relation is\njust kind of interest,",
    "start": "2744300",
    "end": "2751494"
  },
  {
    "text": "it doesn't imply\nanything super useful. An open problem\nis, so we know how",
    "start": "2751495",
    "end": "2757220"
  },
  {
    "text": "to solve polyhedron\nflattening as a folded state. What we don't know so much\nabout is folding motions. There is a recent paper\nfrom just last year which",
    "start": "2757220",
    "end": "2767680"
  },
  {
    "text": "will continuously flatten\nby continuous motion any convex polyhedron. But non convex polyhedron\nwe still don't know.",
    "start": "2767680",
    "end": "2774890"
  },
  {
    "text": "These are roughly\nhand drawn figures. An interesting project\nwould be to actually animate their motion.",
    "start": "2774890",
    "end": "2780650"
  },
  {
    "text": "I think it would\nlook pretty cool and be much more\nconvincing that it works. I mean, I'm convinced\nthat it works,",
    "start": "2780650",
    "end": "2785890"
  },
  {
    "text": "but it's a lot harder to see\nvisually from these pictures. It'd be really cool to see the\nmotions, the actual continuous",
    "start": "2785890",
    "end": "2792160"
  },
  {
    "text": "animation. And a couple last project ideas.",
    "start": "2792160",
    "end": "2797910"
  },
  {
    "start": "2796000",
    "end": "2837000"
  },
  {
    "text": "One would be to make a\nfold-and-cut alphabet, like the maze software\nthat you just used. It would be fun if you\njust type in a message,",
    "start": "2797910",
    "end": "2803956"
  },
  {
    "text": "and out comes the\ncrease patterns. This is sort of like a special\ncase of a fold-and-cut design tool, but in letters\nit's a little bit easier.",
    "start": "2803956",
    "end": "2811330"
  },
  {
    "text": "And a different challenge\nwould be if I just want to be able to fold a\nsingle letter at a time,",
    "start": "2811330",
    "end": "2816600"
  },
  {
    "text": "can you always do it\nwith simple folds? So can you design\nan alphabet that is simply fold-and-cuttable.",
    "start": "2816600",
    "end": "2821660"
  },
  {
    "text": "That would be even nicer. And there's some magicians\nwho worked on that, but they couldn't\nget all the letters, so it would be nice to do with\njust a few folds, any letter",
    "start": "2821660",
    "end": "2828740"
  },
  {
    "text": "of the alphabet, any digit. This is one we did\nfor our conference in honor of Martin Gardner,\ngathering for Gardner five,",
    "start": "2828740",
    "end": "2834450"
  },
  {
    "text": "back in 2002. And here's another possible\nidea for a project,",
    "start": "2834450",
    "end": "2840010"
  },
  {
    "start": "2837000",
    "end": "2998000"
  },
  {
    "text": "although mostly it's\nan excuse to show you really cool pictures. This is Peter Callesen,\nand he takes usually",
    "start": "2840010",
    "end": "2845900"
  },
  {
    "text": "four sheets of paper, cuts\nthem probably an X-ACTO knife or something, and then from\nthat material that he acquires,",
    "start": "2845900",
    "end": "2855760"
  },
  {
    "text": "builds a 3D structure\non that sheet. So you see all the\nmaterial that was used, and these are just amazing.",
    "start": "2855760",
    "end": "2862230"
  },
  {
    "text": "And I don't think you could\nnecessarily do this level of fidelity from\na fold-and-cut , but it would be cool to do a\nfold-and-cut and then build",
    "start": "2862230",
    "end": "2869309"
  },
  {
    "text": "a sculpture out of the\nslits that you made. And I mean, it's\nreally cool when",
    "start": "2869310",
    "end": "2875620"
  },
  {
    "text": "he can use the cutout parts\nto be shadows of the things that he builds, especially\nwhen those shadows",
    "start": "2875620",
    "end": "2881580"
  },
  {
    "text": "are more complicated than the\nsheet he actually assembles. That's a fairly cool effect\nof the monsters in the closet.",
    "start": "2881580",
    "end": "2889190"
  },
  {
    "text": "Pandora's box, or box\nin a box in a box. You can't see that here,\nbut you see it unfolding.",
    "start": "2889190",
    "end": "2896289"
  },
  {
    "text": "The bones inside the hand,\nthe old versus new cities.",
    "start": "2896290",
    "end": "2902275"
  },
  {
    "text": " Using the positive\nand the negative.",
    "start": "2902275",
    "end": "2907330"
  },
  {
    "text": "There's actually a little boat\nup there, which you can see.",
    "start": "2907330",
    "end": "2912360"
  },
  {
    "text": "So pretty amazing stuff. And for free versus\ncaged, and so on.",
    "start": "2912360",
    "end": "2919616"
  },
  {
    "text": "Interesting project would\nbe to try to make art out of fold-and-cut, just doing one\ncut instead of a zillion cuts.",
    "start": "2919616",
    "end": "2926560"
  },
  {
    "text": "That's it. Any more questions? Yeah. AUDIENCE: In the\ncircle-packing method,",
    "start": "2926560",
    "end": "2934066"
  },
  {
    "text": "how do you assign the\nmountain-valley [INAUDIBLE]? PROFESSOR ERIK DEMAINE: OK,\nin the circle-packing method,",
    "start": "2934066",
    "end": "2939650"
  },
  {
    "text": "how do you assign\nmountains and valleys? That was briefly\ncovered in lecture. First you take a spanning\ntree of all of the molecules,",
    "start": "2939650",
    "end": "2946880"
  },
  {
    "text": "and you basically\nfold each molecule into your parent in the tree. So each one has a\ndirection, and from that",
    "start": "2946880",
    "end": "2954250"
  },
  {
    "text": "you can extract the\nmountain-valley assignment. You go into the parent. It's a mountain there,\neveryone else's valley. Basically you're reversing\none perpendicular fold",
    "start": "2954250",
    "end": "2961251"
  },
  {
    "text": "per molecule. I think. Maybe two. With triangles, it's just one.",
    "start": "2961251",
    "end": "2966579"
  },
  {
    "text": "For quads you might\nbe reversing two. So you start with all\nof the straight skeleton being mountains, all the\nperpendiculars being valleys,",
    "start": "2966580",
    "end": "2973820"
  },
  {
    "text": "and you have to flip a few to\njust get them to fit together. Little more complicated\nthan what I said,",
    "start": "2973820",
    "end": "2979350"
  },
  {
    "text": "but I would need a slide\nto show you the details. It's in the textbook.",
    "start": "2979350",
    "end": "2985490"
  },
  {
    "text": "Anything else? All right, that's fold-and-cut. ",
    "start": "2985490",
    "end": "2998507"
  }
]