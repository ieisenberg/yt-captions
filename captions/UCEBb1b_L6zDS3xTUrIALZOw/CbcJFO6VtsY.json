[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "Let's follow along as the assembler processes\nour source file.",
    "start": "550",
    "end": "4740"
  },
  {
    "text": "The assembler maintains a symbol table that\nmaps symbols names to their numeric values.",
    "start": "4740",
    "end": "10250"
  },
  {
    "text": "Initially the symbol table is loaded with\nmappings for all the register symbols.",
    "start": "10250",
    "end": "15260"
  },
  {
    "text": "The assembler reads the source file line-by-line,\ndefining symbols and labels, expanding macros,",
    "start": "15260",
    "end": "21150"
  },
  {
    "text": "or evaluating expressions to generate bytes\nfor the output array.",
    "start": "21150",
    "end": "25460"
  },
  {
    "text": "Whenever the assembler encounters a use of\na symbol or label, it's replaced by the corresponding",
    "start": "25460",
    "end": "30599"
  },
  {
    "text": "numeric value found in the symbol table.",
    "start": "30599",
    "end": "34080"
  },
  {
    "text": "The first line, N = 12, defines the value\nof the symbol N to be 12, so the appropriate",
    "start": "34080",
    "end": "40219"
  },
  {
    "text": "entry is made in the symbol table.",
    "start": "40219",
    "end": "42980"
  },
  {
    "text": "Advancing to the next line, the assembler\nencounters an invocation of the ADDC macro",
    "start": "42980",
    "end": "47980"
  },
  {
    "text": "with the arguments \"r31\", \"N\", and \"r1\".",
    "start": "47980",
    "end": "52329"
  },
  {
    "text": "As we'll see in a couple of slides, this triggers\na series of nested macro expansions that eventually",
    "start": "52329",
    "end": "57858"
  },
  {
    "text": "lead to generating a 32-bit binary value to\nbe placed in memory location 0.",
    "start": "57859",
    "end": "63840"
  },
  {
    "text": "The 32-bit value is formatted here to show\nthe instruction fields and the destination",
    "start": "63840",
    "end": "68640"
  },
  {
    "text": "address is shown in brackets.",
    "start": "68640",
    "end": "71810"
  },
  {
    "text": "The next instruction is processed in the same\nway, generating a second 32-bit word.",
    "start": "71810",
    "end": "77610"
  },
  {
    "text": "On the fourth line, the label loop is defined\nto have the value of the location in memory",
    "start": "77610",
    "end": "82180"
  },
  {
    "text": "that's about to filled, in this case, location\n8.",
    "start": "82180",
    "end": "86600"
  },
  {
    "text": "So the appropriate entry is made in the symbol\ntable and the MUL macro is expanded into the",
    "start": "86600",
    "end": "91780"
  },
  {
    "text": "32-bit word to be placed in location 8.",
    "start": "91780",
    "end": "95560"
  },
  {
    "text": "The assembler processes the file line-by-line\nuntil it reaches the end of the file.",
    "start": "95560",
    "end": "101360"
  },
  {
    "text": "Actually the assembler makes two passes through\nthe file.",
    "start": "101360",
    "end": "103720"
  },
  {
    "text": "On the first pass it loads the symbol table\nwith the values from all the symbol and label",
    "start": "103720",
    "end": "107930"
  },
  {
    "text": "definitions.",
    "start": "107930",
    "end": "108930"
  },
  {
    "text": "Then, on the second pass, it generates the\nbinary output.",
    "start": "108930",
    "end": "112860"
  },
  {
    "text": ".152 The two-pass approach allows a statement\nto refer to symbol or label that is defined",
    "start": "112860",
    "end": "118290"
  },
  {
    "text": "later in the file, e.g., a forward branch\ninstruction could refer to the label for an",
    "start": "118290",
    "end": "123321"
  },
  {
    "text": "instruction later in the program.",
    "start": "123321",
    "end": "125820"
  },
  {
    "text": "As we saw in the previous slide, there's nothing\nmagic about the register symbols.",
    "start": "125820",
    "end": "130030"
  },
  {
    "start": "126000",
    "end": "126000"
  },
  {
    "text": "They are just symbolic names for the values\n0 through 31.",
    "start": "130030",
    "end": "134569"
  },
  {
    "text": "So when processing ADDC(r31,N,r1), UASM replaces\nthe symbols with their values and actually",
    "start": "134570",
    "end": "142120"
  },
  {
    "text": "expands ADDC(31,12,1).",
    "start": "142120",
    "end": "144470"
  },
  {
    "text": "UASM is very simple.",
    "start": "144470",
    "end": "148890"
  },
  {
    "text": "It simply replaces symbols with their values,\nexpands macros and evaluates expressions.",
    "start": "148890",
    "end": "154590"
  },
  {
    "text": "So if you use a register symbol where a numeric\nvalue is expected, the value of the symbol",
    "start": "154590",
    "end": "159361"
  },
  {
    "text": "is used as the numeric constant.",
    "start": "159361",
    "end": "162019"
  },
  {
    "text": "Probably not what the programmer intended.",
    "start": "162020",
    "end": "164460"
  },
  {
    "text": "Similarly, if you use a symbol or expression\nwhere a register number is expected, the low-order",
    "start": "164460",
    "end": "170290"
  },
  {
    "text": "5 bits of the value is used as the register\nnumber, in this example, as the Rb register",
    "start": "170290",
    "end": "176030"
  },
  {
    "text": "number.",
    "start": "176030",
    "end": "177030"
  },
  {
    "text": "Again probably not what the programmer intended.",
    "start": "177030",
    "end": "180740"
  },
  {
    "text": "The moral of the story is that when writing\nUASM assembly language programs, you have",
    "start": "180740",
    "end": "185300"
  },
  {
    "text": "to keep your wits about you and recognize\nthat the interpretation of an operand is determined",
    "start": "185300",
    "end": "190180"
  },
  {
    "text": "by the opcode macro, not by the way you wrote\nthe operand.",
    "start": "190180",
    "end": "195370"
  },
  {
    "start": "195000",
    "end": "195000"
  },
  {
    "text": "Recall from Lecture 9 that branch instructions\nuse the 16-bit constant field of the instruction",
    "start": "195370",
    "end": "201150"
  },
  {
    "text": "to encode the address of the branch target\nas a word offset from the location of the",
    "start": "201150",
    "end": "205920"
  },
  {
    "text": "branch instruction.",
    "start": "205920",
    "end": "207680"
  },
  {
    "text": "Well, actually the offset is calculated from\nthe instruction immediately following the",
    "start": "207680",
    "end": "213040"
  },
  {
    "text": "branch, so an offset of -1 would refer to\nthe branch itself.",
    "start": "213040",
    "end": "218250"
  },
  {
    "text": "The calculation of the offset is a bit tedious\nto do by hand and would, of course, change",
    "start": "218250",
    "end": "223100"
  },
  {
    "text": "if we added or removed instructions between\nthe branch instruction and branch target.",
    "start": "223100",
    "end": "228270"
  },
  {
    "text": "Happily macros for the branch instructions\nincorporate the necessary formula to compute",
    "start": "228270",
    "end": "233220"
  },
  {
    "text": "the offset from the address of the branch\nand the address of the branch target.",
    "start": "233220",
    "end": "238330"
  },
  {
    "text": "So we just specify the address of the branch\ntarget, usually with a label, and let UASM",
    "start": "238330",
    "end": "243450"
  },
  {
    "text": "do the heavy lifting.",
    "start": "243450",
    "end": "246030"
  },
  {
    "text": "Here we see that BNE branches backwards by\nthree instructions (remember to count from",
    "start": "246030",
    "end": "251099"
  },
  {
    "text": "the instruction following the branch) so the\noffset is -3.",
    "start": "251099",
    "end": "256729"
  },
  {
    "text": "The 16-bit two's complement representation\nof -3 is the value placed in the constant",
    "start": "256729",
    "end": "261629"
  },
  {
    "text": "field of the BNE instruction.",
    "start": "261629",
    "end": "263330"
  }
]