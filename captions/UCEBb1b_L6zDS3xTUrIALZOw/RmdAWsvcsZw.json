[
  {
    "text": " So what we're going\nto do today is continue our discussion of\nmodular computer software,",
    "start": "760",
    "end": "7310"
  },
  {
    "text": "and specifically\nfocus on the topic we started talking about last\ntime called soft modularity.",
    "start": "7310",
    "end": "13959"
  },
  {
    "text": "And once we figure out,\nyou know, finish our story with regard to soft\nmodularity and understand",
    "start": "18770",
    "end": "27720"
  },
  {
    "text": "exactly what this\nmeans, we're going to start talking about a\ndifferent kind of modularity",
    "start": "27720",
    "end": "33890"
  },
  {
    "text": "called enforced modularity.",
    "start": "33890",
    "end": "35780"
  },
  {
    "text": "And enforced modularity\nis going to actually take us through three lectures,\ntoday and the next two lectures",
    "start": "39187",
    "end": "45950"
  },
  {
    "text": "next week. And the topic for today\nin terms of enforced modularity is a particular\nway of obtaining modularity",
    "start": "45950",
    "end": "53110"
  },
  {
    "text": "in computer systems called\nclient/service organization.",
    "start": "53110",
    "end": "56185"
  },
  {
    "text": "Some people call it\nclient/server computing. And that's the plan for today.",
    "start": "61530",
    "end": "68100"
  },
  {
    "text": "So what we saw the last time was\nbasically a lecture describing, for the most part,\nhow linking worked.",
    "start": "68100",
    "end": "74850"
  },
  {
    "text": "And the idea in\nlinking is that when you have a number\nof software modules,",
    "start": "74850",
    "end": "81369"
  },
  {
    "text": "and your goal is\nto take all of them and get an executable\nprogram out of them that another program\ncould load into memory and run.",
    "start": "81370",
    "end": "90450"
  },
  {
    "text": "And that task was\nbeing done by a piece of system software\ncalled a linker,",
    "start": "90450",
    "end": "96890"
  },
  {
    "text": "and out pops an\nexecutable program. So at the end of the lecture\nlast time, a couple of students",
    "start": "96890",
    "end": "104789"
  },
  {
    "text": "asked me two things. One was why we were\nactually talking about this. And the second more\nimportant question",
    "start": "104789",
    "end": "111160"
  },
  {
    "text": "was why it wasn't in the notes. And so let me answer the first\nquestion [SOUND OFF/THEN ON] question first.",
    "start": "111160",
    "end": "118320"
  },
  {
    "text": "The plan in lectures is to\nunderstand concepts of computer systems with examples. And oftentimes we\nfind examples that",
    "start": "118320",
    "end": "124982"
  },
  {
    "text": "aren't actually in the notes. And we use them,\nA, because if we don't use different\nexamples, there's sort of not as much\nincentive to show up.",
    "start": "124982",
    "end": "132089"
  },
  {
    "text": "But often because some of\nthe examples that work better in lecture don't actually work\nout as clearly in the notes.",
    "start": "132089",
    "end": "137840"
  },
  {
    "text": "So we do tend to use\ndifferent examples. To answer the first\nquestion, why we actually looked at the\nlinker, first of all",
    "start": "137840",
    "end": "145349"
  },
  {
    "text": "it's a common piece of software\nthat pretty much every program that you run today goes\nthrough a process of linking.",
    "start": "145350",
    "end": "152599"
  },
  {
    "text": "But what it actually\nallowed us to do was illustrate two\nmain concepts in naming",
    "start": "152599",
    "end": "158490"
  },
  {
    "text": "having to do with the way\nin which the main mapping algorithm worked.",
    "start": "158490",
    "end": "162030"
  },
  {
    "text": "And in the context\nof the linker, the problem was to\ntake these symbols that you find in the program,\nand basically resolve them,",
    "start": "166290",
    "end": "173970"
  },
  {
    "text": "in other words, find out\nwhere they are defined, and where the instructions\ncorresponding to those symbols, or where the data\ncorresponding to the symbol",
    "start": "173970",
    "end": "180390"
  },
  {
    "text": "was actually located. And the concepts that we saw\nwere two different concepts.",
    "start": "180390",
    "end": "187900"
  },
  {
    "text": "The first was name mapping\nusing a table lookup, where",
    "start": "187900",
    "end": "194530"
  },
  {
    "text": "within each object file\nthere was a symbol table that mapped between the\nsymbols found in a module",
    "start": "194530",
    "end": "199590"
  },
  {
    "text": "to the location where the\nsymbols were defined further. And another example of\ndoing name mapping, which",
    "start": "199590",
    "end": "207870"
  },
  {
    "text": "was the process of search\nthrough a series of contexts.",
    "start": "207870",
    "end": "210500"
  },
  {
    "text": "And in particular, we\nlooked at the problem of when you are in the context\nof LD, which GCC uses when",
    "start": "213930",
    "end": "222079"
  },
  {
    "text": "it finds, goes through\na sequence of dot O files as well as\nlibraries on the command line, what algorithm it actually\nuses to resolve its symbols.",
    "start": "222079",
    "end": "231770"
  },
  {
    "text": "And I realize now that what\nI had left out on the board, there was a couple of\nmistakes in the algorithm,",
    "start": "231770",
    "end": "238159"
  },
  {
    "text": "and I asked what mistakes were. And I realized I didn't show\nyou what the actual algorithm is",
    "start": "238160",
    "end": "244681"
  },
  {
    "text": "correctly. So I thought I'd spend\na minute doing that so that if you have something\nwrong in your notes, you can fix that up, because\nI actually never said",
    "start": "244681",
    "end": "252200"
  },
  {
    "text": "what the right thing was. So if you recall,\nthe general problem was you have GCC running\non a set of dot O files,",
    "start": "252200",
    "end": "259010"
  },
  {
    "text": "F1 dot O all the way\nthrough Fn dot O. And what we're trying to do\nis describe an algorithm where",
    "start": "259010",
    "end": "266789"
  },
  {
    "text": "when you obtain the I'th\nobject file and you have a set of currently defined symbols,\nand a set of currently",
    "start": "266790",
    "end": "272379"
  },
  {
    "text": "undefined symbols, how you\ncan maintain three sets: the set of object files\nthat go into the executable,",
    "start": "272380",
    "end": "278340"
  },
  {
    "text": "the set of defined symbols\nthat have been seen so far, and the set of undefined symbols\nthat have been seen so far.",
    "start": "278340",
    "end": "284169"
  },
  {
    "text": "And you want to\nkeep updating that. So one way to easily see what's\ngoing on is with a picture.",
    "start": "284170",
    "end": "290389"
  },
  {
    "text": "So up until now, until you've\nfinished I minus one files, let's say you've built\nup a set, U, of all",
    "start": "290390",
    "end": "298710"
  },
  {
    "text": "of the undefined symbols that\nhave been encountered so far. And likewise, you have another\nset, D, of all the symbols",
    "start": "298710",
    "end": "305531"
  },
  {
    "text": "that have been defined so\nfar that you've encountered and have been defined so far. So, D and U dynamically\nchange as you",
    "start": "305532",
    "end": "311580"
  },
  {
    "text": "go from left to right through\nthe sequence of files. Now, when you are\non the I'th file, there is a set of symbols that\nhave been defined that are",
    "start": "311580",
    "end": "318140"
  },
  {
    "text": "going to be defined\nin the I'th file. And that set does not\nintersect with a set, D,",
    "start": "318140",
    "end": "323910"
  },
  {
    "text": "because if it did, then you have\nan overlapping defined symbol and that's an error. So the interesting case is to\nlook at this kind of an example",
    "start": "323910",
    "end": "332340"
  },
  {
    "text": "where you have a set, Di, of\nthe symbols that were defined in the I'th file.",
    "start": "332340",
    "end": "338630"
  },
  {
    "text": "And likewise, in the I'th file,\nthere are going to be a set of undefined symbols.",
    "start": "338630",
    "end": "344099"
  },
  {
    "text": "And clearly, that set doesn't\noverlap with a set, Di, because if it's\nundefined, it can't be defined in the same file.",
    "start": "344100",
    "end": "350420"
  },
  {
    "text": "So that said, in general,\nlooks something like this. It has some symbols undefined\nin this object file that",
    "start": "350420",
    "end": "358190"
  },
  {
    "text": "are also undefined previously. Some symbols that are\nundefined in this file that have been defined previously,\nand some symbols that",
    "start": "358190",
    "end": "365240"
  },
  {
    "text": "have been undefined here\nthat you've have really never seen before.",
    "start": "365240",
    "end": "368080"
  },
  {
    "text": "So you've got to\nupdate to things. So D gets updated pretty easily. D just becomes D union Di.",
    "start": "370830",
    "end": "376570"
  },
  {
    "text": "And if D intersection\nDi is not null, then you know there's an error. And now you need to update\nU, and there are many ways",
    "start": "376570",
    "end": "384080"
  },
  {
    "text": "to do it that are more\nefficient than what we're going to write out. But it's pretty\neasy to see that U needs to get updated by unioning\nthe current set with Ui.",
    "start": "384080",
    "end": "396099"
  },
  {
    "text": "So that kind of gives you\nthis together with that. But now, you have to\nsubtract out everything that's been defined already.",
    "start": "396100",
    "end": "401890"
  },
  {
    "text": "And since we updated D first,\nwe could do that very easily by just subtracting out the\nset of all defined symbols.",
    "start": "401890",
    "end": "408595"
  },
  {
    "text": "And you run this\nthrough until the end. And if you find that in\nthe end U is not null, then you know that there's\nan undefined symbol",
    "start": "408596",
    "end": "415390"
  },
  {
    "text": "so that the linking\ndoesn't actually work. You can produce an executable\nout of it with static linking, OK?",
    "start": "415390",
    "end": "420590"
  },
  {
    "text": "OK, so when you do combined\nprograms in this fashion to produce an executable, there\nare all these different modules",
    "start": "423130",
    "end": "431940"
  },
  {
    "text": "that have been brought together\nto run in an interpreter. And you have to ask,\nwhat kind of properties",
    "start": "431940",
    "end": "438350"
  },
  {
    "text": "that program ends up having. What kind of modularity do you\nget by combining these modules together in this fashion?",
    "start": "438350",
    "end": "444570"
  },
  {
    "text": "It will turn out\nthat modularity is, it's a form of modularity\ncalled soft modularity.",
    "start": "444570",
    "end": "451230"
  },
  {
    "text": "And to understand why,\nyou have to understand what the interfaces between the\ndifferent modules look like.",
    "start": "451230",
    "end": "457860"
  },
  {
    "text": "Basically when you\nlook at a C program, and you saw an example last\ntime of how these modules hook together, the different\nmodules track with one another",
    "start": "457860",
    "end": "465580"
  },
  {
    "text": "through procedures. And procedures\nbetween modules have something that I'll call\na procedure contract.",
    "start": "465580",
    "end": "471370"
  },
  {
    "text": "And really, to understand the\nproperty of the modularity that you get from\nprocedural contract, we need to understand\na little bit",
    "start": "477047",
    "end": "483080"
  },
  {
    "text": "about what happens\nunderneath the callers when a caller of a\nprocedure invokes",
    "start": "483080",
    "end": "488120"
  },
  {
    "text": "a callee of a procedure. And this is actually\nmaterial from 004. So if you have forgotten,\nI'll refresh your memory",
    "start": "488120",
    "end": "496169"
  },
  {
    "text": "a little bit about it. So, very abstractly, if\nyou look at a computer,",
    "start": "496170",
    "end": "502440"
  },
  {
    "text": "it's got a processor in it that\nactually executes instructions,",
    "start": "502440",
    "end": "507500"
  },
  {
    "text": "and it has a chunk of memory. And in that memory, there\nis a portion of memory that corresponds to the\nstack which is really",
    "start": "507500",
    "end": "514289"
  },
  {
    "text": "where procedures,\nthe interesting stuff with procedures\ngets implemented.",
    "start": "514289",
    "end": "520000"
  },
  {
    "text": "And you also have a\nbunch of registers, so, inside the processor. And you have a\nspecial variable here",
    "start": "520000",
    "end": "528649"
  },
  {
    "text": "called the stack\npointer, which keeps track of where the\ncurrent head of the stack is that you can then start\npulling elements off.",
    "start": "528650",
    "end": "536060"
  },
  {
    "text": "The general plan, the\ncaller and the callee interact with one another\nby means of the stack.",
    "start": "538840",
    "end": "544510"
  },
  {
    "text": "So when a caller wants to\ninvoke the callee, what it does is it takes arguments\nof the procedure,",
    "start": "544510",
    "end": "551350"
  },
  {
    "text": "and pushes them on to the\nstack one after another. Then the last thing it\ndoes is to tell the callee",
    "start": "551350",
    "end": "557550"
  },
  {
    "text": "where it should return control\nafter the procedure function has actually been executed.",
    "start": "557550",
    "end": "562590"
  },
  {
    "text": "And that's the last thing that\npushed on top of the stack is the [NOISE OBSCURES].",
    "start": "562590",
    "end": "568620"
  },
  {
    "text": "So then, after it does that, the\ncaller then jumps to a location where the callee's\nmodule is located,",
    "start": "568620",
    "end": "575040"
  },
  {
    "text": "and then control\npasses to the callee. What the callee then\ndoes is it finds out",
    "start": "575040",
    "end": "581194"
  },
  {
    "text": "what the return address\nis, pops the arguments one after the other, and\nthen goes ahead and runs the function.",
    "start": "581194",
    "end": "586880"
  },
  {
    "text": "And then at the end of that,\nit looks at the return address and passes control back. And before it does that, it\nactually puts the answer.",
    "start": "586880",
    "end": "595390"
  },
  {
    "text": "Let's assume that it puts the\nanswer in a special register. And that's part of\nthe contract as well.",
    "start": "595390",
    "end": "600940"
  },
  {
    "text": "And once the caller gets the\ncontrol back from the callee, it can proceed as before.",
    "start": "604880",
    "end": "611450"
  },
  {
    "text": "Now, the important\nthing about this way of interacting between caller\nand callee with procedure stack",
    "start": "611450",
    "end": "617509"
  },
  {
    "text": "is this contract has to obey an\ninvariant or discipline called",
    "start": "617510",
    "end": "622536"
  },
  {
    "text": "the stack discipline.",
    "start": "622536",
    "end": "623410"
  },
  {
    "text": "And the essence of\nthe stack discipline is that the callee should\nleave the stack exactly the way the caller left it when\nit invoked the callee, which",
    "start": "631196",
    "end": "641320"
  },
  {
    "text": "means the caller had set up\na bunch of arguments on it, and it but the\nreturn address on it.",
    "start": "641320",
    "end": "647340"
  },
  {
    "text": "The callee should\nleave things as is. And in fact, the callee is\nnot allowed to touch anything. It should leave everything\nas is this pretty",
    "start": "647340",
    "end": "652733"
  },
  {
    "text": "much except for the register\nthat has the answer. And as long as this\ndiscipline is maintained, and that invariant is maintained\nacross procedure implications,",
    "start": "652733",
    "end": "660255"
  },
  {
    "text": "this model of using stacks\nis extremely powerful. You could implement all sorts\nof procedures, nested procedure,",
    "start": "660255",
    "end": "665544"
  },
  {
    "text": "I mean, recursive procedure,\nmutually recursive procedures and so on because each of these\nimplications of the procedure",
    "start": "665544",
    "end": "671970"
  },
  {
    "text": "has a certain portion of\nthe stack that corresponds to an activation frame. And as long as this\ndiscipline is maintained,",
    "start": "671970",
    "end": "678670"
  },
  {
    "text": "you can do quite complicated\nand interesting combinations of modules.",
    "start": "678670",
    "end": "685470"
  },
  {
    "text": "But the problem is that that\nmodularity depends crucially",
    "start": "685470",
    "end": "690610"
  },
  {
    "text": "on the stack discipline\nbeing maintained. And any violation of\n[SOUND  OFF/THEN ON] callee can disrupt the caller\nand bring it down.",
    "start": "690610",
    "end": "699480"
  },
  {
    "text": "And there are many ways\nin which this discipline could be violated. And the easiest\none is that there",
    "start": "699480",
    "end": "705160"
  },
  {
    "text": "is some error or\nbug in the callee, and the callee\ncorrupts the stack.",
    "start": "705160",
    "end": "708210"
  },
  {
    "text": "Or the callee corrupts\nthe stack pointer, so it actually\n[SOUND OFF/THEN  ON] control, but the stack pointer\npoints somewhere else",
    "start": "714040",
    "end": "719530"
  },
  {
    "text": "and some bad instruction\nruns, or you have a problem.",
    "start": "719530",
    "end": "726530"
  },
  {
    "text": "Now, another problem is\nthat the callee crashes.",
    "start": "726530",
    "end": "729490"
  },
  {
    "text": "For instance, there\nis a divide by zero, or there is some\nother violation that causes the callee to crash. And then the caller comes\ncrashing down as well.",
    "start": "735460",
    "end": "743670"
  },
  {
    "text": "And there's a bunch of other\nreasons, but all of them have to do with the stack\ndiscipline being violated, or with the callee\ncrashing and control never",
    "start": "749342",
    "end": "756040"
  },
  {
    "text": "returning to the\ncaller, which means that the caller and\nthe callee share fate.",
    "start": "756040",
    "end": "762529"
  },
  {
    "text": "If something bad happens to\nthe person who has called, sorry, the callee, then the\ncaller struggles as well",
    "start": "762530",
    "end": "770220"
  },
  {
    "text": "and isn't able to continue.",
    "start": "770220",
    "end": "772110"
  },
  {
    "text": "So colloquially this is\nreferred to as fate sharing.",
    "start": "777790",
    "end": "780509"
  },
  {
    "text": "And the resulting\nmodularity is soft because any fault or error in\nthe callee affects the caller.",
    "start": "783940",
    "end": "790070"
  },
  {
    "text": "The caller, there isn't\nany kind of a firewall where errors in the\ncallee are insulated",
    "start": "790070",
    "end": "797067"
  },
  {
    "text": "from errors in the caller. There's no shielding between\nthe caller and callee. And, where is this thing going?",
    "start": "797067",
    "end": "804440"
  },
  {
    "text": "Like, all right, so\nthere's no insulation between caller and callee. And the resulting\nmodularity is not as hard",
    "start": "804440",
    "end": "812980"
  },
  {
    "text": "as we would like it to be.",
    "start": "812980",
    "end": "818990"
  },
  {
    "text": "So this is the problem\nwe'd like to solve today. And the first solution\nwe're going to discuss",
    "start": "818990",
    "end": "826089"
  },
  {
    "text": "is a way of organizing\ncallers and callees",
    "start": "826090",
    "end": "833070"
  },
  {
    "text": "into an organization called\nclient service organization.",
    "start": "833070",
    "end": "836430"
  },
  {
    "text": "And the main idea is\ngoing to actually involve a different abstraction by which\ncallers and callees communicate",
    "start": "844440",
    "end": "850280"
  },
  {
    "text": "with one another\nfrom the abstractions we've seen already. We've already seen\nthe memory abstraction",
    "start": "850280",
    "end": "855490"
  },
  {
    "text": "where you could write\nvalues to a name, and another person\ncould read from it.",
    "start": "855490",
    "end": "861775"
  },
  {
    "text": "And we've already seen the\ninterpreter abstraction. It could turn out we are going\nto use a different abstraction",
    "start": "861775",
    "end": "867760"
  },
  {
    "text": "A location path abstraction to\nimplement the client service organization.",
    "start": "867760",
    "end": "874210"
  },
  {
    "text": "And the idea is the following. The program is going\nto be decomposed",
    "start": "874210",
    "end": "879640"
  },
  {
    "text": "into clients and services. And you might have many\nclients and many services, and you could have\na client which",
    "start": "879640",
    "end": "885540"
  },
  {
    "text": "is a client of one service\nand service in turn is a client of yet another\nservice and complicated things like that.",
    "start": "885540",
    "end": "892170"
  },
  {
    "text": "But any pair-wise\ninteraction is going to be between a\nclient and a service.",
    "start": "892170",
    "end": "898680"
  },
  {
    "text": "And think of mapping\nthat example onto here. Think of the callee, for\nexample, being the service",
    "start": "898680",
    "end": "904566"
  },
  {
    "text": "and the caller being the client. The caller wants some work\ndone, so it's the client. And it invokes the service, the\ncallee, to get that work done.",
    "start": "904567",
    "end": "913149"
  },
  {
    "text": "And the plan is going to be\nthat the client and the service are going to run on different\ncomputers, physically",
    "start": "913150",
    "end": "918240"
  },
  {
    "text": "different computers,\nand we are going to connect the\ncomputers up with wire.",
    "start": "918240",
    "end": "923300"
  },
  {
    "text": "And the idea is the moment you\ndo that, the crash of a callee doesn't actually bring\nthe caller coming down",
    "start": "923300",
    "end": "929146"
  },
  {
    "text": "because it's running on a\ncompletely different processor. The stack is not shared. The memory is not shared.",
    "start": "929146",
    "end": "935880"
  },
  {
    "text": "The stack point is not shared. There's really no problem with\nregard to the callee crashing,",
    "start": "935880",
    "end": "941320"
  },
  {
    "text": "bringing the caller down. Of course, we now need a\nway by which the client can communicate its\narguments to the service,",
    "start": "941320",
    "end": "947720"
  },
  {
    "text": "and the service can\ncommunicate its arguments back to the client. Previously, we\ndid the first one. The arguments were communicated\nby putting them using memory",
    "start": "947720",
    "end": "957660"
  },
  {
    "text": "on the stack, and the answers\nwere coming back to us from register.",
    "start": "957660",
    "end": "963110"
  },
  {
    "text": "And we don't have that\nshared state anymore. So, we're going to have to\nimplement that using messages.",
    "start": "963110",
    "end": "969515"
  },
  {
    "text": "And we're going to\ntake these messages, use the communication\npath abstraction, and send messages from\nthe client to the service.",
    "start": "969515",
    "end": "976940"
  },
  {
    "text": "So imagine that time flows\ndownwards starting from when the client invokes the service.",
    "start": "976940",
    "end": "984339"
  },
  {
    "text": "A message is sent\nfrom the client as a message to the\nservice saying here's all the arguments, and\nhere's the procedure",
    "start": "984340",
    "end": "991620"
  },
  {
    "text": "that I want you to run. And it takes that information\nup, somehow packages it up",
    "start": "991620",
    "end": "997020"
  },
  {
    "text": "into a message, and calls send. OK, and the assumption is\nthat the client somehow",
    "start": "997020",
    "end": "1002029"
  },
  {
    "text": "already knows something\nabout the name of the service or the location of the service.",
    "start": "1002030",
    "end": "1007380"
  },
  {
    "text": "That's outside of the scope\nof the current discussion. Let's pretend somebody\ntells you that here's",
    "start": "1007380",
    "end": "1013020"
  },
  {
    "text": "where the service\nis running that can run this function for you. So it takes the arguments in\nthe name of the procedure,",
    "start": "1013020",
    "end": "1020500"
  },
  {
    "text": "packages it up the message,\nand send it across. When the service\ngets the message.",
    "start": "1020500",
    "end": "1025949"
  },
  {
    "text": "It validates the message to make\nsure that it's the right sizes, and it's not too big, and so on.",
    "start": "1025950",
    "end": "1033420"
  },
  {
    "text": "And then, it takes this message\nand then does some processing on that message. The technical term\nfor it is going",
    "start": "1033420",
    "end": "1039760"
  },
  {
    "text": "to be called\nun-marshalling because when we took these arguments\nand put into a message, that process is\ncalled marshalling.",
    "start": "1039760",
    "end": "1047240"
  },
  {
    "text": "The service is going to\nun-marshall this message and obtain the actual arguments\nand the name of the procedure,",
    "start": "1047240",
    "end": "1052360"
  },
  {
    "text": "and then it's going to run it.",
    "start": "1052360",
    "end": "1054140"
  },
  {
    "text": "I don't know if it's\none L or two L's. And then it's going to run the\nprocedure that's named here.",
    "start": "1060890",
    "end": "1068429"
  },
  {
    "text": "And it's going to\nfind the answer. And then when it\ngets the answer, it does the same thing back. It puts it back into the\nmessage and sends it across",
    "start": "1068430",
    "end": "1075000"
  },
  {
    "text": "to the client. And now the client is\nwaiting for this message because it sends off the\nmessage to the service",
    "start": "1075000",
    "end": "1081060"
  },
  {
    "text": "to run this thing. It gets this answer back. It does the same thing. It takes the message in that\nit recovers the answer from it,",
    "start": "1081060",
    "end": "1087960"
  },
  {
    "text": "and then it runs continuously.",
    "start": "1087960",
    "end": "1089350"
  },
  {
    "text": "So this is the basic idea in\nclient/server organization.",
    "start": "1093600",
    "end": "1098929"
  },
  {
    "text": "And the way in which\nwe solve this problem is that these two problems are\nsolved because the callee can't",
    "start": "1098930",
    "end": "1104610"
  },
  {
    "text": "really corrupt the\nstack or the stack point or anything else\nthat in this model would have affected the caller.",
    "start": "1104610",
    "end": "1111811"
  },
  {
    "text": "And because we have put\nthem both on physically different computers and\nhooked them up with, let's say, a wire, the service\ncrashing does not actually",
    "start": "1111812",
    "end": "1119630"
  },
  {
    "text": "bring the client, if the\nservice decides that it crashes, then the client actually\ndoesn't come crashing down.",
    "start": "1119630",
    "end": "1126559"
  },
  {
    "text": "Of course, the\nclient has to somehow have a plan by which it knows\nthat the service is still, for example, the\nclient has to know",
    "start": "1126560",
    "end": "1132810"
  },
  {
    "text": "whether the service has crashed\nor whether the service is just taking a long time\nto run something. That's something we have to\naddress, and we will in a bit.",
    "start": "1132810",
    "end": "1140299"
  },
  {
    "text": "But as long as the client\nis able to do that, a service going away or\ncrashing is not really",
    "start": "1140300",
    "end": "1146160"
  },
  {
    "text": "going to bring the caller\nor the client down with it.",
    "start": "1146160",
    "end": "1151640"
  },
  {
    "text": "So, some properties\nof this organization are, first of all,\nthat it's modular. It has essentially\nthe same modularity",
    "start": "1151640",
    "end": "1156720"
  },
  {
    "text": "as we had with\nprocedures because if you had enough computers,\nyou could move all of the different procedures\non different computers, all",
    "start": "1156720",
    "end": "1164129"
  },
  {
    "text": "of the caller/callee\nrelationships, and you can preserve,\nessentially, the same modularity\nthat you had before.",
    "start": "1164130",
    "end": "1169880"
  },
  {
    "text": "Moreover, this modularity\nhas a different adjective in front of it\ndifferent from soft.",
    "start": "1173540",
    "end": "1179970"
  },
  {
    "text": "This modularity is enforced.",
    "start": "1179970",
    "end": "1181340"
  },
  {
    "text": "What that means\nis not only is it a modular organization, it's one\nwhere errors of, for example,",
    "start": "1185770",
    "end": "1193830"
  },
  {
    "text": "things where one\nmodule fails or crashes does not bring the other\none come crashing down.",
    "start": "1193830",
    "end": "1200420"
  },
  {
    "text": "So the modularity\nis more enforced than when they were both running\non the same computer using",
    "start": "1200420",
    "end": "1207179"
  },
  {
    "text": "the procedure interface. And the third property of\nthis kind of modularity",
    "start": "1207180",
    "end": "1212900"
  },
  {
    "text": "is something already mentioned. It lies on the message\nabstraction, actually",
    "start": "1212900",
    "end": "1219221"
  },
  {
    "text": "the communication\npath abstraction. The client and service\ncommunicate with each other",
    "start": "1219222",
    "end": "1229990"
  },
  {
    "text": "through messages. And these aren't\nactually messages. You can't just sort of take\na random string of bytes",
    "start": "1229990",
    "end": "1236140"
  },
  {
    "text": "and send it to the service. It's actually messages\nthat correspond to a particular format.",
    "start": "1236140",
    "end": "1241149"
  },
  {
    "text": "And these are really\nknown in advance. So, that way the\nservice isn't surprised and the client\nisn't surprised when",
    "start": "1241150",
    "end": "1246690"
  },
  {
    "text": "messages that don't conform\nto that pattern arrive. I mean, you know exactly\nwhat kind of message is going to arrive.",
    "start": "1246690",
    "end": "1252140"
  },
  {
    "text": "And anything that\ndoesn't conform to what is agreed upon\nin advance is rejected.",
    "start": "1252140",
    "end": "1255655"
  },
  {
    "text": "But you basically make\nit so that you explicitly declare the nature of\nthese messages much",
    "start": "1258160",
    "end": "1263270"
  },
  {
    "text": "like you did the nature\nof procedural interface. But now, because you've\nphysically separated it,",
    "start": "1263270",
    "end": "1268630"
  },
  {
    "text": "you have a more\nenforced modularity than in the previous model.",
    "start": "1268630",
    "end": "1273130"
  },
  {
    "text": "Of course, nothing\ncomes for free. It's not like you got\nthis enforced modularity, and you have all of these nice\nproperties that you did before.",
    "start": "1277574",
    "end": "1284105"
  },
  {
    "text": "Here, you had a nice\nproperty that the callee could, has the property\nthat either when",
    "start": "1287360",
    "end": "1293049"
  },
  {
    "text": "it runs and it returns to you,\nyou know exactly what happened. And if it doesn't return,\nyou know that you usually",
    "start": "1293050",
    "end": "1301469"
  },
  {
    "text": "come crashing down. If the callee doesn't return,\nit means that control never comes back to the caller.",
    "start": "1301469",
    "end": "1306590"
  },
  {
    "text": "So it's not like\nthe caller is left wondering what really happened\nbecause the caller doesn't get control again.",
    "start": "1306590",
    "end": "1312020"
  },
  {
    "text": "Here, you have a problem. If the callee, the service\ndoesn't return back",
    "start": "1314549",
    "end": "1319620"
  },
  {
    "text": "to the client, the\nclient actually doesn't know what's going on. When you have two machines, two\ncomputers connected over a wire",
    "start": "1319620",
    "end": "1327040"
  },
  {
    "text": "or over a network,\nit's extremely hard to distinguish between a service\nrunning really, really slow,",
    "start": "1327040",
    "end": "1333000"
  },
  {
    "text": "and a service that's gone away. And we'll revisit this a few\ndifferent times in the course.",
    "start": "1333000",
    "end": "1340490"
  },
  {
    "text": "But it's going to be impossible\nfor us to tell for sure, although we're going\nto try very hard.",
    "start": "1340490",
    "end": "1345964"
  },
  {
    "text": "It's going to be really\nhard for us to tell for sure whether something\nexactly happened.",
    "start": "1345964",
    "end": "1350995"
  },
  {
    "text": "And if the service\ndidn't return, we don't really know for sure\nwithout much more machinery whether it was just that the\nservice is still running,",
    "start": "1350995",
    "end": "1358310"
  },
  {
    "text": "or whether it's crashed,\nand we are just waiting. And so, this organization\nrequires a timer at the client,",
    "start": "1358310",
    "end": "1367540"
  },
  {
    "text": "and there are many names\ngiven to this timer. I mean, people call\nthem keep-alives, or people call them\nwith various names.",
    "start": "1367540",
    "end": "1373420"
  },
  {
    "text": "I'm going to call it a\nwatchdog timer, where the client has to\nkeep track using",
    "start": "1373420",
    "end": "1380570"
  },
  {
    "text": "some kind of a timer\nof the service. And if the service doesn't\nreturn within a certain period of time, the client has\nto time out and say,",
    "start": "1380570",
    "end": "1388490"
  },
  {
    "text": "well, the service didn't\nreturn, and I'm not quite sure what happened.",
    "start": "1388490",
    "end": "1393520"
  },
  {
    "text": "It might be that the procedure\nI wanted to execute had ran, but I didn't get the answer. Or it might be that\nthe procedure didn't",
    "start": "1393520",
    "end": "1400390"
  },
  {
    "text": "get executed at all, and\nI have to deal with it. And you might be able to,\nby retrying the procedure,",
    "start": "1400390",
    "end": "1405880"
  },
  {
    "text": "or you might contact\nanother service which provides the same\nfunctionality, but the client has to deal with all of that.",
    "start": "1405880",
    "end": "1410980"
  },
  {
    "text": "So fundamental to this\nclient's organization is the notion of a time out.",
    "start": "1415930",
    "end": "1422340"
  },
  {
    "text": "And we didn't have\nthat here because here, if the callee decides that\nit's just going to continue on",
    "start": "1422340",
    "end": "1429630"
  },
  {
    "text": "and not return, the caller\nnever gets a message back. So, it doesn't have\nthis decision to make. There is no such\nnotion of a watchdog",
    "start": "1429630",
    "end": "1436160"
  },
  {
    "text": "that we have to worry about\nin this other organization.",
    "start": "1436160",
    "end": "1438475"
  },
  {
    "text": "So another nice property of\nthis client service organization is that so far\nwe've presented it",
    "start": "1453150",
    "end": "1459139"
  },
  {
    "text": "in the context of the\nclient and the service being modularized\nfrom each other, and we've enforced modularity\nto the client and the service.",
    "start": "1459140",
    "end": "1468390"
  },
  {
    "text": "But in fact, there is\nanother nice property to it, which is that a client\nservice organization allows",
    "start": "1468390",
    "end": "1474120"
  },
  {
    "text": "us to design modules and design\nsystems where clients get modularized from each other.",
    "start": "1474120",
    "end": "1481530"
  },
  {
    "text": "We can achieve soft modularity\nby protecting clients from each other.",
    "start": "1481530",
    "end": "1496080"
  },
  {
    "text": "The idea here is that if you\nhave many clients all of which want to use a given service,\nfor example, there's",
    "start": "1496080",
    "end": "1503480"
  },
  {
    "text": "a service that's, let's\nsay, implemented by a bank and what it does is\nit's the service that",
    "start": "1503480",
    "end": "1509934"
  },
  {
    "text": "deals with managing\nyour accounts, and you can move money\nbetween accounts, and it will tell you your\naccount balance and so on.",
    "start": "1509934",
    "end": "1516720"
  },
  {
    "text": "You can implement\nthat as one service, and many, many clients can\nshare the same service.",
    "start": "1516720",
    "end": "1522649"
  },
  {
    "text": "Now, all of the clients trust\nthe service because, I mean, if you are a customer of a bank,\nand you are using your browser",
    "start": "1522650",
    "end": "1527950"
  },
  {
    "text": "to look for your account\nbalance, that means you sort of trust the bank. And all the clients\ntrust the service.",
    "start": "1527950",
    "end": "1534470"
  },
  {
    "text": "But the clients sure\ndon't trust each other. And the nice thing\nabout this organization",
    "start": "1534470",
    "end": "1539960"
  },
  {
    "text": "is that you can use the service\nin the form of an intermediary that allows the clients to be\nseparated from each other, each",
    "start": "1539960",
    "end": "1550320"
  },
  {
    "text": "of which can use the service. But the clients don't\nhave to trust each other, and clients don't\nreally have to know",
    "start": "1550320",
    "end": "1556460"
  },
  {
    "text": "about each other's information. And this idea of using a\nservice to modularize clients",
    "start": "1556460",
    "end": "1563279"
  },
  {
    "text": "from each other is called\na trusted intermediary. There is many examples\nof trusted intermediaries",
    "start": "1563280",
    "end": "1573180"
  },
  {
    "text": "that we'll see in this course. In fact, tomorrow's recitation\non the X Windows system",
    "start": "1573180",
    "end": "1578350"
  },
  {
    "text": "has a system where\nyour computer screen is going to be managed by a\nservice called by the X Windows",
    "start": "1578350",
    "end": "1586120"
  },
  {
    "text": "system. And there are many clients that\nare going to use that service. And the clients don't\nactually trust each other.",
    "start": "1586120",
    "end": "1592440"
  },
  {
    "text": "They want to get modularized\naway from each other. And the X Windows system\nas a trusted intermediary",
    "start": "1592440",
    "end": "1599644"
  },
  {
    "text": "deals with that. It managed this resource\n-- your display, and it arranges for the clients\nto be designed each independent",
    "start": "1599644",
    "end": "1607035"
  },
  {
    "text": "from the other. And in general, we are going to\nsee in the next few lectures,",
    "start": "1607035",
    "end": "1613539"
  },
  {
    "text": "many examples of the operating\nsystem being a trusted intermediary, arranging\nfor many different clients",
    "start": "1613540",
    "end": "1620799"
  },
  {
    "text": "to use some resource on your\ncomputer like the processor or the memory or the disk. And our architecture\nfor the operating",
    "start": "1620800",
    "end": "1628340"
  },
  {
    "text": "is going to end up being in\nthe form of these trusted intermediaries.",
    "start": "1628340",
    "end": "1631850"
  },
  {
    "text": "So, so far we've seen what\nclient service organization means. It means you have a\nclient and the service,",
    "start": "1649940",
    "end": "1656141"
  },
  {
    "text": "and they communicate\nwith messages using the communication\npath abstraction of send and receive.",
    "start": "1656141",
    "end": "1661420"
  },
  {
    "text": "And we've seen some properties\nof client service organization. But I haven't\nactually told you how to implement any of this stuff.",
    "start": "1661420",
    "end": "1668110"
  },
  {
    "text": "And so that's what we're\ngoing to do the rest of today. And in fact, we are\ngoing to continue",
    "start": "1668110",
    "end": "1673130"
  },
  {
    "text": "with different ways\nof implementing various forms of client service\nmany times in the course.",
    "start": "1673130",
    "end": "1678450"
  },
  {
    "text": "So there are many ways to\nimplement client service organization. And all of them have\nto do with, all of them",
    "start": "1695910",
    "end": "1702960"
  },
  {
    "text": "involved different ways\nin which messages are sent between client and service.",
    "start": "1702960",
    "end": "1708830"
  },
  {
    "text": "A common way, and a\npretty standard way, of implementing it is something\ncalled a remote procedure call.",
    "start": "1708830",
    "end": "1714800"
  },
  {
    "text": "There are many examples\nof remote procedure called systems. I mean, one of the\nmost common ones",
    "start": "1723620",
    "end": "1729929"
  },
  {
    "text": "is something called the\nSun Remote Procedure Call system, or Sun RPC. That's one example.",
    "start": "1729929",
    "end": "1736120"
  },
  {
    "text": "There are many other\nexamples as well. A more modern example which\nsome of you may have heard of",
    "start": "1736120",
    "end": "1743159"
  },
  {
    "text": "is a relatively new system,\nabout five years old, called XML RPC.",
    "start": "1743160",
    "end": "1747630"
  },
  {
    "text": "So if you've heard of\nbuzzwords like Web services in business-to-business\ninteractions,",
    "start": "1751670",
    "end": "1758110"
  },
  {
    "text": "or business-to-business\napplications, these things use\nsomething called XML RPC.",
    "start": "1758110",
    "end": "1764409"
  },
  {
    "text": "And, there is a lot of different\nthree letter acronyms and four letter acronyms.",
    "start": "1764410",
    "end": "1770020"
  },
  {
    "text": "This has led to\nsomething called SOAP, which stands for the Simple\nObject Access Protocol.",
    "start": "1770020",
    "end": "1777750"
  },
  {
    "text": "So there are many different ways\nof implementing RPC systems. And until last year\nor a couple of years",
    "start": "1777750",
    "end": "1786700"
  },
  {
    "text": "ago, we used to\ntalk about Sun RPC as an example in this class. But I decided that's\nso 20th century.",
    "start": "1786700",
    "end": "1792289"
  },
  {
    "text": "So we're going to talk\nabout XML RPC today. It has a property that's\nmuch more inefficient,",
    "start": "1792290",
    "end": "1799559"
  },
  {
    "text": "but that's sort of\nkeeping with the fact that computers\nhave become faster. We don't have to worry in\nmany cases about efficiency.",
    "start": "1799560",
    "end": "1806030"
  },
  {
    "text": "So we are going to talk a little\nbit about how XML RPC works.",
    "start": "1806030",
    "end": "1810350"
  },
  {
    "text": "So let me first show you\nwhat a client written what",
    "start": "1814450",
    "end": "1822200"
  },
  {
    "text": "this kind of RPC looks like. It's going to show\nyou a code snippet.",
    "start": "1822200",
    "end": "1828090"
  },
  {
    "text": "All right, I had to work hard to\nmake sure it would fit on this.",
    "start": "1832620",
    "end": "1843320"
  },
  {
    "text": "OK, all right, the\nway this thing works is actually very, very simple.",
    "start": "1843320",
    "end": "1850420"
  },
  {
    "text": "This uses something called XML\nRPC Library for Java that was written by the Apache people.",
    "start": "1850420",
    "end": "1858520"
  },
  {
    "text": "And once you incorporate\nthat library, your program becomes\ncompletely easy. So let me just walk\nyou through this.",
    "start": "1858520",
    "end": "1864620"
  },
  {
    "text": "The high level idea\nhere is that it's transferring money from\none account to the other",
    "start": "1864620",
    "end": "1870780"
  },
  {
    "text": "through a service\nthat's run by the bank. So, the first line\nof this thing here",
    "start": "1870780",
    "end": "1877320"
  },
  {
    "text": "creates an XML RPC object,\nan XML RPC client object. And what you give it is actually\nthe name of the service.",
    "start": "1877320",
    "end": "1883830"
  },
  {
    "text": "So somebody has to tell you\nthe name of the service. And I don't want to get into\nthe details of everything here, but the basic idea\nis your backname.com",
    "start": "1883830",
    "end": "1891010"
  },
  {
    "text": "colon 8080 is the name, the DNS\nname at which the service runs and the port. The thing about\nXML RPC is that it",
    "start": "1891010",
    "end": "1897200"
  },
  {
    "text": "runs over HTTP which\nis what you use to transfer objects on the Web.",
    "start": "1897200",
    "end": "1902260"
  },
  {
    "text": "And underneath, we talk\nabout how it's implemented; underneath this is implemented\nusing a standard method in HTTP",
    "start": "1902260",
    "end": "1908040"
  },
  {
    "text": "called a POST which\nallows, normally HTTP has a GET\nwhere you retrieve But it also has a\nPOST that many of you",
    "start": "1908040",
    "end": "1913700"
  },
  {
    "text": "are familiar with\nwhere the client can push some stuff to the server. And it just uses POST method.",
    "start": "1913700",
    "end": "1921752"
  },
  {
    "text": "What's going on is very easy? You create a vector\nof parameters, and you fill that\nvector in with,",
    "start": "1921752",
    "end": "1927610"
  },
  {
    "text": "in this case, your\naccount number. And let's say here the\nidea is this sort of thing",
    "start": "1927610",
    "end": "1933720"
  },
  {
    "text": "is very popular in big\ncompanies like Ford or Cisco, which have thousands\nof suppliers. And, they never\nactually maintain a lot",
    "start": "1933720",
    "end": "1941799"
  },
  {
    "text": "of inventory of their own. They're always trying\nto figure out the latest cost of any of their supplies.",
    "start": "1941800",
    "end": "1947190"
  },
  {
    "text": "And they are using this\nWeb service like interface. In fact, this is also called\na Web service interface",
    "start": "1947190",
    "end": "1952702"
  },
  {
    "text": "to communicate with\ntheir suppliers to always have the latest info\nwhether their suppliers have",
    "start": "1952702",
    "end": "1958040"
  },
  {
    "text": "any given item in stock, and\nhow much it costs and so on. So, let's pretend you have\ndone that in your company, and you are trying\nto pay off, you",
    "start": "1958040",
    "end": "1965220"
  },
  {
    "text": "are taking your\nsuppliers' account number and pay some money to him, OK? So in this case, whatever,\ndollars is that argument.",
    "start": "1965220",
    "end": "1974750"
  },
  {
    "text": "So you create parameters. And all you do at the end is\nyou use these XML RPC client objects, and invoke a method it\npresents to you called execute.",
    "start": "1974750",
    "end": "1983799"
  },
  {
    "text": "And you give it two arguments. The second argument\nis the parameters. And the first argument is\nthe name of the procedure",
    "start": "1983800",
    "end": "1989380"
  },
  {
    "text": "that you wish to\nrun on the service. OK, that's in this case\ncalled MoneyTransfer.",
    "start": "1989380",
    "end": "1995590"
  },
  {
    "text": "So, corresponding to\nthis, somewhat longer is a piece of code running on\nthe service which implements the server side of it,\nwhich basically obtains",
    "start": "1995590",
    "end": "2005610"
  },
  {
    "text": "[SOUND OFF/THEN ON] calls an\nobject that will un-marshall",
    "start": "2005610",
    "end": "2013130"
  },
  {
    "text": "the arguments, and then it\nwill execute money transfer, both of which [SOUND There\nis very little that actually",
    "start": "2013130",
    "end": "2020310"
  },
  {
    "text": "has to run on the service. It's just a little\nbit longer than this.",
    "start": "2020310",
    "end": "2023190"
  },
  {
    "text": "Now, this line\nhere is important. That's the line on which\nyou get your result. And this gives the\nresult as a string.",
    "start": "2025700",
    "end": "2032530"
  },
  {
    "text": "If I tell you that I\nfinished transferring X dollars from this account to\nthat account, or if I tell you",
    "start": "2032530",
    "end": "2039160"
  },
  {
    "text": "I couldn't transfer, and there\nwas some kind of an error, or you might actually not\nget any answer, in which case",
    "start": "2039160",
    "end": "2046210"
  },
  {
    "text": "the underlying library that\nimplements this procedure call would throw an exception\nyour code has to deal with.",
    "start": "2046210",
    "end": "2053580"
  },
  {
    "text": "And how you deal with it is\na little tricky because you don't, and you'll\nsee this in a moment, you don't quite\nknow what happened",
    "start": "2053580",
    "end": "2059350"
  },
  {
    "text": "when you didn't\nget an answer back from the You don't know if\nthis actually got your transfer",
    "start": "2059350",
    "end": "2065638"
  },
  {
    "text": "request and crashed after that. And, it got the request.",
    "start": "2065639",
    "end": "2071500"
  },
  {
    "text": "It actually implemented the\ntransfer and then crashed. It just couldn't send\nyour response back. So, you're not quite\nsure whether you need",
    "start": "2071500",
    "end": "2076748"
  },
  {
    "text": "to retry the request or not. You will actually\nsee how to deal with this in a few minutes.",
    "start": "2076748",
    "end": "2085239"
  },
  {
    "text": "Now, there's one\nthing that's really important about\nthis line of code. This xmlrpc.execute(\n\"MoneyTransfer\") block,",
    "start": "2085239",
    "end": "2094649"
  },
  {
    "text": "that line of code actually\nis not something that runs on the service. OK, it's a local procedure.",
    "start": "2094650",
    "end": "2102000"
  },
  {
    "text": "xmlprc.execute() is\na local procedure. OK, and that procedure is an\nexample of something called",
    "start": "2102000",
    "end": "2110109"
  },
  {
    "text": "a stub because what it is,\nis a stub that to this caller",
    "start": "2110110",
    "end": "2115205"
  },
  {
    "text": "fakes out the fact that there's\na service somewhere else. I mean, it prevents\nthe caller from having",
    "start": "2115205",
    "end": "2120330"
  },
  {
    "text": "to deal with 15 arguments\nand putting it in the message and sending it to\nthe other side. The caller just calls\nit over the procedure,",
    "start": "2120330",
    "end": "2126800"
  },
  {
    "text": "giving it suitable arguments\nthat pinch for this function now to do\nthe work of sending a message across the network.",
    "start": "2126800",
    "end": "2133079"
  },
  {
    "text": "But this is a local call. So, what happens underneath? Underneath in the library,\nonce you call xmlrpc.execute()",
    "start": "2133080",
    "end": "2141400"
  },
  {
    "text": "in this example,\nsomebody does work. That library does the work of\ntaking the different arguments",
    "start": "2141400",
    "end": "2146540"
  },
  {
    "text": "that have been presented\nto it and converting them into a message, marshalling all\nof the stuff into a message,",
    "start": "2146540",
    "end": "2152930"
  },
  {
    "text": "and then shipping that\nmessage off to the server. That has to be going to some\nkind of a format on the Fly, right?",
    "start": "2152930",
    "end": "2158260"
  },
  {
    "text": "Ultimately on this wire\nconnecting the client to the service, there's format. And I already mentioned that\nthis runs on top of HTTP.",
    "start": "2158260",
    "end": "2164670"
  },
  {
    "text": "And so we can actually look\nat what that looks like.",
    "start": "2164670",
    "end": "2168609"
  },
  {
    "text": "OK, so POST here is the\nmethod that you use in HTTP.",
    "start": "2172750",
    "end": "2180520"
  },
  {
    "text": "The /RPC2 is actually the same\nthing that was used in, if you remember in the\nprevious screenshot,",
    "start": "2180520",
    "end": "2188890"
  },
  {
    "text": "when we did the new call to\nget a new XML RPC client,",
    "start": "2188890",
    "end": "2194769"
  },
  {
    "text": "we gave it a server\nname and a port number. But we also gave it\nsomething called RPC2. Now, that's just like a\nfile on the other side.",
    "start": "2194770",
    "end": "2201599"
  },
  {
    "text": "It says there are many\ndifferent RPC programs running on your service. And I want RPC2 to run. I mean, I could have named\nit anything I wanted.",
    "start": "2201600",
    "end": "2210610"
  },
  {
    "text": "And that's a lot like\ngiving a file name on a URL. And then, you go on.",
    "start": "2210610",
    "end": "2216887"
  },
  {
    "text": "You give it the host name. This is a lot like\nan HTTP header. The interesting new stuff\nhere is in the XML arguments.",
    "start": "2216887",
    "end": "2224900"
  },
  {
    "text": "But those were not\nfamiliar with XML. It's just a method,\na way of sending things that have attributes and\nvalues associated with them.",
    "start": "2224900",
    "end": "2231520"
  },
  {
    "text": "So, every method has\nthe format that it's attributes and\nvalues, and they can",
    "start": "2231520",
    "end": "2236609"
  },
  {
    "text": "be nested within each other. The only interesting\nthing that's here, this particular XML RPC system\nsupports a few different data",
    "start": "2236610",
    "end": "2243750"
  },
  {
    "text": "formats. You can do integers, and\ncharacters, and strings, and doubles, and floats, and a\nfew different things like that.",
    "start": "2243750",
    "end": "2250410"
  },
  {
    "text": "And I thought it just means\nthat the 32 bit integer, and you can take numbers that\nsum up your account number,",
    "start": "2250410",
    "end": "2256569"
  },
  {
    "text": "your supplier's account\nnumber, and the amount of money that you want to transfer.",
    "start": "2256570",
    "end": "2261769"
  },
  {
    "text": "The good thing is\nthat all this stuff has gone underneath the\ncovers, and you don't actually have to deal with it if\nyou are writing the client",
    "start": "2261769",
    "end": "2267180"
  },
  {
    "text": "or you are writing the service. All this work\nhappens underneath. So, it greatly simplifies\nyour ability to take,",
    "start": "2267180",
    "end": "2274150"
  },
  {
    "text": "implement client\nservice programs with clients and services being\nseparated from one another.",
    "start": "2274150",
    "end": "2288950"
  },
  {
    "text": "OK. So, so far, we've\nmade it look a lot except for this little timer\nthat you have to maintain.",
    "start": "2288950",
    "end": "2294771"
  },
  {
    "text": "We've made it look a lot\nlike a remote procedure call,",
    "start": "2294771",
    "end": "2300660"
  },
  {
    "text": "it's like a procedure call. In fact, the code here,\nthe only difference is you replace\nwhat was previously what would have been one\nbig transfer with arguments",
    "start": "2300660",
    "end": "2307610"
  },
  {
    "text": "we replace with a\nstub call, taking the name of the\nprocedure we want to run on the service\n[NOISE  OBSCURES].",
    "start": "2307610",
    "end": "2313740"
  },
  {
    "text": "So, it looks a lot\nlike a procedure call. That actually is a\npretty deceptive thing. And in fact, a\nhint at that is you",
    "start": "2313740",
    "end": "2320930"
  },
  {
    "text": "can get at the bottom\nof this thing up there, there is a light\nthat says you have",
    "start": "2320930",
    "end": "2327540"
  },
  {
    "text": "to deal with XML RPC exception. And that's the kind of exception\nyou get when the underlying RPC",
    "start": "2327540",
    "end": "2333619"
  },
  {
    "text": "library decides\nthat it hasn't heard an answer from the service in a\nwhile, it throws an exception. And your code has\nto deal with it.",
    "start": "2333620",
    "end": "2340460"
  },
  {
    "text": "You are never going to\nget that kind of exception from a regular procedure call. I didn't hear back\nfrom the caller",
    "start": "2340460",
    "end": "2346150"
  },
  {
    "text": "or from the callee\nto do something. See, that's a new exception\nmode that you didn't previously",
    "start": "2346150",
    "end": "2353120"
  },
  {
    "text": "have to deal with. I mean, you have to deal with\nother kinds of exceptions but not this one.",
    "start": "2353120",
    "end": "2359160"
  },
  {
    "text": "So, an RPC is not the\nsame as a procedure call. And in fact, it's a\nlittle unfortunate",
    "start": "2359160",
    "end": "2364820"
  },
  {
    "text": "that, for historical reasons, we\nare stuck a little bit with a remote",
    "start": "2364840",
    "end": "2371040"
  },
  {
    "text": "procedure call. In fact, increasingly\nmore and more RPC systems",
    "start": "2371040",
    "end": "2376080"
  },
  {
    "text": "don't look like\nprocedure calls at all in terms of the semantics. But we were so\nstuck with the name",
    "start": "2376080",
    "end": "2382240"
  },
  {
    "text": "that people continue to have\nvarious kinds of remote procedure calls, and they used\nthe same name for it.",
    "start": "2382260",
    "end": "2387480"
  },
  {
    "text": "And the first main difference\narises from the fact that there is no fate sharing\nbetween client and service.",
    "start": "2388840",
    "end": "2397300"
  },
  {
    "text": "If the service crashes,\nthe client doesn't crash. Already you have\na big difference between a regular\nprocedure call.",
    "start": "2397300",
    "end": "2405150"
  },
  {
    "text": "And previously I presented\nthis as an advantage because if you have\nfate sharing, then",
    "start": "2405150",
    "end": "2411450"
  },
  {
    "text": "this caller is always at\nthe mercy of the callee. But because you have\nno fate sharing,",
    "start": "2411450",
    "end": "2416579"
  },
  {
    "text": "you have other\nproblems to deal with. And in particular, all of\nthese stem from the fact that it's extremely hard to\ndistinguish between a failure",
    "start": "2416580",
    "end": "2425049"
  },
  {
    "text": "versus extremely slow.",
    "start": "2425050",
    "end": "2427570"
  },
  {
    "text": "And it will turn out\nthat we revisit this over and over again. We'll talk about networks\nand reliable transmission",
    "start": "2434590",
    "end": "2440900"
  },
  {
    "text": "over networks and\ndeal with it, and then we're going to talk\nabout fall tolerance, and we're going to talk about\nan idea for atomicity,",
    "start": "2440900",
    "end": "2447414"
  },
  {
    "text": "and then we're going to\ntalk about something called transactions. And they're all going to\ndeal with this problem that it's going to be\nvery hard for us to tell,",
    "start": "2447415",
    "end": "2455150"
  },
  {
    "text": "when you ask somebody\nto do a piece of work, whether they did it\nfully or did nothing. OK, and this is going\nto be a repeated theme,",
    "start": "2455150",
    "end": "2463470"
  },
  {
    "text": "a theme that is going\nto repeat in the course. But to complicate\nwhy this is hard,",
    "start": "2463470",
    "end": "2471020"
  },
  {
    "text": "let me say three\npossible things that could happen when you have\na client talk to service and what kind of semantics you\nwant from a client They all",
    "start": "2471020",
    "end": "2480200"
  },
  {
    "text": "stem from the fact that this\nis extremely hard to determine. The first semantics\nthat you might want",
    "start": "2480200",
    "end": "2485839"
  },
  {
    "text": "is the idea semantic. The client talks to the service,\nand either the service answers",
    "start": "2485840",
    "end": "2491560"
  },
  {
    "text": "with a response or it doesn't. OK, and that's something\ncalled exactly-once semantics.",
    "start": "2491560",
    "end": "2496840"
  },
  {
    "text": "So in this example here,\nunderneath the library, it may time out. And it may wish to retransmit. Or it may wish to throw an\nexception at the caller.",
    "start": "2500750",
    "end": "2507890"
  },
  {
    "text": "The client may want\nto send this again. But in an ideal case,\nyou want exactly",
    "start": "2507890",
    "end": "2515160"
  },
  {
    "text": "once this amount of money\nto be moved from bank account one to bank\naccount two, right? You certainly don't want\nyour amount of money",
    "start": "2515160",
    "end": "2521350"
  },
  {
    "text": "to be moved twice\nto your supplier. The term of this\nis ideal, and it's",
    "start": "2521350",
    "end": "2526740"
  },
  {
    "text": "going to be pretty difficult,\nand extremely hard, to achieve\nexactly-once semantics.",
    "start": "2526740",
    "end": "2532310"
  },
  {
    "text": "And, we're going to talk\nabout different methods in the course. This is not an easy\nproblem at all.",
    "start": "2532310",
    "end": "2537703"
  },
  {
    "text": "It stems from the fact that\nit is very hard to know. So, you might give\nup a little bit",
    "start": "2537704",
    "end": "2544100"
  },
  {
    "text": "and say, OK, I can't really\nget exactly-once semantics very easily. But let me try\nfor at least once.",
    "start": "2544100",
    "end": "2551200"
  },
  {
    "text": "So what this means is the\nclient will keep retrying or the the library will keep retrying.",
    "start": "2554100",
    "end": "2559930"
  },
  {
    "text": "And you can decompose\nit in either way until it is sure that this\ncall succeeded at least once.",
    "start": "2559930",
    "end": "2565960"
  },
  {
    "text": "Now, it might have\nsucceeded more than once because the service\nis very slow.",
    "start": "2565960",
    "end": "2571494"
  },
  {
    "text": "And then it times out. You try it again, the service\nsays, oh, OK, I see it; I must not do it again. But, it's at least once, OK?",
    "start": "2571494",
    "end": "2578610"
  },
  {
    "text": "Now, at least once\nis not nice semantics that you're using at least\none semantics in your code here, right, because your\nsupplier might end up with $7",
    "start": "2578610",
    "end": "2586540"
  },
  {
    "text": "million instead of $1 million. But at least once\nis OK if the service has some kind of semantic\ncalled idem-potent semantics.",
    "start": "2586540",
    "end": "2594220"
  },
  {
    "text": "What that means is that when you\ndo an operation more than once, the answers are the\nsame as at-least-once.",
    "start": "2597990",
    "end": "2604859"
  },
  {
    "text": "A simple example of this\nwas the transfer of money, but you checking\nyour bank account",
    "start": "2604860",
    "end": "2610440"
  },
  {
    "text": "It doesn't really matter that\nyou do it a hundred times. As long as one of them succeeds\nand you get your bank balance,",
    "start": "2610440",
    "end": "2615900"
  },
  {
    "text": "you are fine. I mean, doing it seven\ntimes does not really change anything; it does not\nmove extra money anywhere else. So that's an example of\nan idem-potent action,",
    "start": "2615900",
    "end": "2623347"
  },
  {
    "text": "which works out well with\nat-least-once semantics.",
    "start": "2623347",
    "end": "2625430"
  },
  {
    "text": "And at-least-once\nsemantics is much easier to obtain than\nexactly-once semantics.",
    "start": "2629910",
    "end": "2638400"
  },
  {
    "text": "And the third kind of semantics\nis something converse:",
    "start": "2638400",
    "end": "2643430"
  },
  {
    "text": "most-once semantics. That means zero or more times.",
    "start": "2643430",
    "end": "2648420"
  },
  {
    "text": "And here, the\nchallenge is really figuring out if it really\nworked at least once around.",
    "start": "2651290",
    "end": "2657740"
  },
  {
    "text": "I mean, I pushed once or not. So, if you don't get a response\nback, then you time out.",
    "start": "2657740",
    "end": "2663154"
  },
  {
    "text": "And it might be that it\ndidn't succeed at all. And you say that's fine. I'll deal with it separately. And if you get a response back,\nthen you know that it worked.",
    "start": "2663154",
    "end": "2670286"
  },
  {
    "text": "It turns out, even that is\ngoing to be a little bit tricky to implement. But these kinds of\nsemantics you could",
    "start": "2670286",
    "end": "2675319"
  },
  {
    "text": "expect from your RPC system. Now, actually the first R in\nmost RPC systems like XML RPC",
    "start": "2675320",
    "end": "2681596"
  },
  {
    "text": "don't really deal with any\nof this in a particular, I mean, they don't\nreally provide any well-defined semantics. It's usually for the\nclient sitting on top,",
    "start": "2681596",
    "end": "2688450"
  },
  {
    "text": "and the service is\nstill, they don't know what kind of\nsemantics they need, and implement that at\na higher layer at least",
    "start": "2688450",
    "end": "2694430"
  },
  {
    "text": "with most of these\nstandard protocols. But many of them\nare well equipped to deal with\nat-least-once semantics.",
    "start": "2694430",
    "end": "2701710"
  },
  {
    "text": "OK, and through\nthe course, there are different ways\nin which we'll accomplish these\ndifferent goals,",
    "start": "2701710",
    "end": "2708010"
  },
  {
    "text": "these different semantics that\nwe want from our different RPC",
    "start": "2708010",
    "end": "2715050"
  },
  {
    "text": "systems. Now, there's another difference\nbetween regular procedure calls",
    "start": "2715050",
    "end": "2724010"
  },
  {
    "text": "and remote procedure\ncalls, or more generally from client service.",
    "start": "2724010",
    "end": "2729660"
  },
  {
    "text": "Remember in the\nsecond lecture, I told you that you can\nalways get more bandwidth,",
    "start": "2729660",
    "end": "2735050"
  },
  {
    "text": "and you can always get more\nprocessing past Moore's law, but one thing you\ncan't actually change is the legacy between\ntwo computers connected",
    "start": "2735050",
    "end": "2742319"
  },
  {
    "text": "by a wire connected\nby a network. The speed of light\ndoesn't change. What that means\nis that with time,",
    "start": "2742320",
    "end": "2749089"
  },
  {
    "text": "the number of constructions\nthat you can run, when you have two computers\nseparated by a wire, there is a certain delay between\nthat no matter what you do.",
    "start": "2749090",
    "end": "2755600"
  },
  {
    "text": "So there is a certain delay that\nyou do a procedure call that's a remote procedure call. It takes a certain\ndelay to send a message",
    "start": "2755600",
    "end": "2760869"
  },
  {
    "text": "and to get a response back. Even as computers get faster\nand faster and faster, that isn't changing at all.",
    "start": "2760870",
    "end": "2766447"
  },
  {
    "text": "But the problem is that\nthe number of instructions you can run but\nwithin that duration is increasing with time because\nit's a fixed amount of time,",
    "start": "2766447",
    "end": "2772610"
  },
  {
    "text": "and the number of instructions\nyou could run locally on the computer\nincreases with time.",
    "start": "2772610",
    "end": "2778430"
  },
  {
    "text": "So that has led people to be\nmore aggressive about what they do in a remote procedure call.",
    "start": "2778430",
    "end": "2784721"
  },
  {
    "text": "What people said is, wait,\nit doesn't make sense for a client to issue\na procedure call,",
    "start": "2784721",
    "end": "2790380"
  },
  {
    "text": "relocate to a\nservice, and then just sit and wait like in a regular\nprocedure call, for the answer.",
    "start": "2790380",
    "end": "2795490"
  },
  {
    "text": "I mean, I'm just sitting\nthere twiddling my thumbs, and this thing is that way, and\nI'm waiting for it to respond.",
    "start": "2795490",
    "end": "2801170"
  },
  {
    "text": "I could be doing work. So, that's led people to\nchanging the synchronous model",
    "start": "2801170",
    "end": "2811370"
  },
  {
    "text": "of RPC, of a procedure\ncall interface to do something called\nasynchronous procedure call interface.",
    "start": "2811370",
    "end": "2816690"
  },
  {
    "text": "And all the things like\nXML RPC and its follow-on, and the difference\nbetween SOAP and XML RPC",
    "start": "2816690",
    "end": "2821700"
  },
  {
    "text": "is that I can understand this,\nand this builds on XML RPC. It seems like very few\npeople understand SOAP.",
    "start": "2821700",
    "end": "2831820"
  },
  {
    "text": "There is a lot of\npeople who have given up on trying to understand\nthe specification. But XML RPC turns out to be a\nreally simple seven or ten page",
    "start": "2831820",
    "end": "2840299"
  },
  {
    "text": "document that's very\neasy to understand. A lot of people use it. But anyway, all these systems\nsupport asynchronous RPC.",
    "start": "2840300",
    "end": "2847620"
  },
  {
    "text": "The idea here is\nthat the client sends a procedure call indicating a\nremote request to the service.",
    "start": "2847620",
    "end": "2853150"
  },
  {
    "text": "And then it goes\nabout doing its work. When the service\nresponds with an answer,",
    "start": "2853150",
    "end": "2858430"
  },
  {
    "text": "it responds with not\njust the answer, but also something that tells\nthe client which service request, which\nprocedure caller request",
    "start": "2858430",
    "end": "2864759"
  },
  {
    "text": "it's responding to. And when the response comes\nback, the client can handle it.",
    "start": "2864760",
    "end": "2872050"
  },
  {
    "text": "Now, the way in which you\nhave to implement this, or the way you\nhave to design this is that associated with\nevery procedure call request,",
    "start": "2872050",
    "end": "2878780"
  },
  {
    "text": "you also have to\nassociate what's called a handler\nbecause you're going to issue this request\nto the service",
    "start": "2878780",
    "end": "2885630"
  },
  {
    "text": "and then go about\ndoing your work. When the answer comes back,\nthe RPC library underneath,",
    "start": "2885630",
    "end": "2891360"
  },
  {
    "text": "the communication library has\nto know: who gets this answer? Because you might have to a\nsheet of many such service",
    "start": "2891360",
    "end": "2896390"
  },
  {
    "text": "requests. So who gets this answer? So you associate\nwith every request",
    "start": "2896390",
    "end": "2901770"
  },
  {
    "text": "a callback, a handler,\nwhich then is called back. And that handler runs,\ndealing with the answer that comes back.",
    "start": "2901770",
    "end": "2907740"
  },
  {
    "text": "And so, that actually allows you\nto be a little more decoupled than we were with the remote\nprocedure call; even more",
    "start": "2907740",
    "end": "2913830"
  },
  {
    "text": "decoupled. The client services\nare even more decoupled because the client is no\nlonger waiting for the service",
    "start": "2913830",
    "end": "2919350"
  },
  {
    "text": "to return an answer to. So that's the first way which\npeople have extended it.",
    "start": "2919350",
    "end": "2926390"
  },
  {
    "text": "The second way in which\npeople have extended is using this intermediary\nidea that we talked about",
    "start": "2926390",
    "end": "2931680"
  },
  {
    "text": "before where the services\ncross the intermediary. To use this intermediary\nidea to actually make",
    "start": "2931680",
    "end": "2938250"
  },
  {
    "text": "design remote message based\ncommunication systems where the client and service\ndon't actually have to be up",
    "start": "2938250",
    "end": "2947160"
  },
  {
    "text": "and running at the same time. So actually, the client\ncould send a request out",
    "start": "2947160",
    "end": "2953260"
  },
  {
    "text": "to the service. But the service is actually\nnot up and running. So, the idea is there\nis an intermediary that acts as a broker on\nbehalf of the service,",
    "start": "2953260",
    "end": "2960240"
  },
  {
    "text": "and buffers the message. And then, when the\nservice comes up, the service knows to pull the\nmessage from this intermediary.",
    "start": "2960240",
    "end": "2966380"
  },
  {
    "text": "That's buffered\nmessages, correct? And then it processes the message,\nand then pushes the answer back to the\nintermediary, which then",
    "start": "2966380",
    "end": "2972420"
  },
  {
    "text": "stores the message to some\nother intermediary perhaps. And then the client\nknows to get the answer from that intermediary.",
    "start": "2972420",
    "end": "2978230"
  },
  {
    "text": "So now, we can actually\nhave clients and services that interact with each\nother without actually",
    "start": "2978230",
    "end": "2983330"
  },
  {
    "text": "having to be up and\nrunning at the same time. There are many examples\nof this, and the notes talk about various examples\nof intermediary communication.",
    "start": "2983330",
    "end": "2993740"
  },
  {
    "text": "So the general summary of\nwhat we've talked about so far is that we looked at different\nways of attaining modularity,",
    "start": "2993740",
    "end": "2999680"
  },
  {
    "text": "talked about soft\nmodularity last time, and today about a particular way\nof enforcing modularity using",
    "start": "2999680",
    "end": "3006150"
  },
  {
    "text": "client service organization. And the next few\nlectures, we are going to solve a big weakness\nof the current system which",
    "start": "3006150",
    "end": "3012080"
  },
  {
    "text": "is that you need many\ndifferent computers. So we are going to\ntake these ideas, and implement them\nall on one computer.",
    "start": "3012080",
    "end": "3017580"
  },
  {
    "text": "See you next week Tuesday.",
    "start": "3017580",
    "end": "3019560"
  }
]