[
  {
    "text": "Today we're going to talk about\nsorting, which may not come as such a big surprise.\nWe talked about sorting for a",
    "start": "8000",
    "end": "15908"
  },
  {
    "text": "while, but we're going to talk\nabout it at a somewhat higher level and question some of the\nassumptions that we've been",
    "start": "15908",
    "end": "24248"
  },
  {
    "text": "making so far.\nAnd we're going to ask the question how fast can we sort?\nA pretty natural question.",
    "start": "24248",
    "end": "32591"
  },
  {
    "text": "You may think you know the\nanswer. Perhaps you do.\nAny suggestions on what the",
    "start": "32591",
    "end": "40066"
  },
  {
    "text": "answer to this question might\nbe? There are several possible\nanswers.",
    "start": "40066",
    "end": "46644"
  },
  {
    "text": "Many of them are partially\ncorrect. Let's hear any kinds of answers\nyou'd like and start waking up",
    "start": "46644",
    "end": "56112"
  },
  {
    "text": "this fresh morning.\nSorry? Theta n log n.\nThat's a good answer.",
    "start": "56112",
    "end": "62741"
  },
  {
    "text": "That's often correct.\nAny other suggestions? N squared.\nThat's correct if all you're",
    "start": "62741",
    "end": "69086"
  },
  {
    "text": "allowed to do is swap adjacent\nelements. Good.\nThat was close. I will see if I can make every\nanswer correct.",
    "start": "69086",
    "end": "77232"
  },
  {
    "text": "Usually n squared is not the\nright answer, but in some models it is.\nYeah?",
    "start": "77232",
    "end": "82793"
  },
  {
    "text": "Theta n is also sometimes the\nright answer. The real answer is \"it\ndepends\".",
    "start": "82793",
    "end": "90000"
  },
  {
    "text": "That's the point of today's\nlecture. It depends on what we call the\ncomputational model,",
    "start": "90000",
    "end": "97748"
  },
  {
    "text": "what you're allowed to do.\nAnd, in particular here, with sorting,\nwhat we care about is the order",
    "start": "97748",
    "end": "106317"
  },
  {
    "text": "of the elements,\nhow are you allowed to manipulate the elements,\nwhat are you allowed to do with",
    "start": "106317",
    "end": "114795"
  },
  {
    "text": "them and find out their order.\nThe model is what you can do",
    "start": "114795",
    "end": "120082"
  },
  {
    "text": "with the elements.",
    "start": "120082",
    "end": "123000"
  },
  {
    "text": "Now, we've seen several sorting\nalgorithms. Do you want to shout some out?\nI think we've seen four,",
    "start": "134000",
    "end": "143422"
  },
  {
    "text": "but maybe you know even more\nalgorithms. Quicksort.\nKeep going.",
    "start": "143423",
    "end": "150000"
  },
  {
    "text": "Heapsort.\nMerge sort. You can remember all the way\nback to Lecture 1.",
    "start": "150000",
    "end": "157122"
  },
  {
    "text": "Any others?\nInsertion sort. All right.\nYou're on top of it today.",
    "start": "157122",
    "end": "163812"
  },
  {
    "text": "I don't know exactly why,\nbut these two are single words",
    "start": "163812",
    "end": "169748"
  },
  {
    "text": "and these two are two words.\nThat's the style. What is the running time of\nquicksort?",
    "start": "169748",
    "end": "180000"
  },
  {
    "text": "This is a bit tricky.\nN log n in the average case. Or, if we randomize quicksort,\nrandomized quicksort runs in n",
    "start": "180000",
    "end": "190827"
  },
  {
    "text": "log n expected for any input\nsequence. Let's say n lg n randomized.\nThat's theta.",
    "start": "190827",
    "end": "198576"
  },
  {
    "text": "And the worst-case with plain\nold quicksort where you just",
    "start": "198576",
    "end": "204238"
  },
  {
    "text": "pick the first element as the\npartition element.",
    "start": "204238",
    "end": "210000"
  },
  {
    "text": "That's n^2.\nHeapsort, what's the running time there?\nn lg n always.",
    "start": "210000",
    "end": "217483"
  },
  {
    "text": "Merge sort, I hope you can\nremember that as well,",
    "start": "217483",
    "end": "223096"
  },
  {
    "text": "n lg n.\nAnd insertion sort? n^2.\nAll of these algorithms run no",
    "start": "223096",
    "end": "230112"
  },
  {
    "text": "faster than n lg n,\nso we might ask, can we do better than n lg n?",
    "start": "230112",
    "end": "239000"
  },
  {
    "text": "And that is a question,\nin some sense, we will answer both yes and no\nto today.",
    "start": "251000",
    "end": "256799"
  },
  {
    "text": "But all of these algorithms\nhave something in common in terms of the model of what\nyou're allowed to do with the",
    "start": "256799",
    "end": "265116"
  },
  {
    "text": "elements.\nAny guesses on what that model might be?\nYeah? You compare pairs of elements,\nexactly.",
    "start": "265116",
    "end": "273518"
  },
  {
    "text": "That is indeed the model used\nby all four of these algorithms.",
    "start": "273518",
    "end": "279166"
  },
  {
    "text": "And in that model n lg n is the\nbest you can do. We have so far just looked at\nwhat are called comparison",
    "start": "279166",
    "end": "288611"
  },
  {
    "text": "sorting algorithms or\n\"comparison sorts\". And this is a model for the\nsorting problem of what you're",
    "start": "288611",
    "end": "297591"
  },
  {
    "text": "allowed to do.\nHere all you can do is use comparisons meaning less than,\ngreater than,",
    "start": "297592",
    "end": "306819"
  },
  {
    "text": "less than or equal to,\ngreater than or equal to, equals to determine the\nrelative order of elements.",
    "start": "306819",
    "end": "317000"
  },
  {
    "text": "This is a restriction on\nalgorithms. It is, in some sense,\nstating what kinds of elements we're dealing with.\nThey are elements that we can",
    "start": "325000",
    "end": "332841"
  },
  {
    "text": "somehow compare.\nThey have a total order, some are less,\nsome are bigger. But is also restricts the\nalgorithm.",
    "start": "332841",
    "end": "339507"
  },
  {
    "text": "You could say,\nwell, I'm sorting integers, but still I'm only allowed to\ndo comparisons with them.",
    "start": "339507",
    "end": "345539"
  },
  {
    "text": "I'm not allowed to multiply the\nintegers or do other weird things.\nThat's the comparison sorting",
    "start": "345539",
    "end": "351444"
  },
  {
    "text": "model.\nAnd this lecture, in some sense,\nfollows the standard mathematical progression where\nyou have a theorem,",
    "start": "351444",
    "end": "358173"
  },
  {
    "text": "then you have a proof,\nthen you have a counter example.\nIt's always a good way to have",
    "start": "358174",
    "end": "365164"
  },
  {
    "text": "a math lecture.\nWe're going to prove the theorem that no comparison\nsorting algorithm runs better",
    "start": "365164",
    "end": "371944"
  },
  {
    "text": "than n lg n.\nComparisons. State the theorem,\nprove that, and then we'll give",
    "start": "371945",
    "end": "377211"
  },
  {
    "text": "a counter example in the sense\nthat if you go outside the comparison sorting model you can\ndo better, you can get linear",
    "start": "377211",
    "end": "385651"
  },
  {
    "text": "time in some cases,\nbetter than n lg n. So, that is what we're doing\ntoday.",
    "start": "385651",
    "end": "392000"
  },
  {
    "text": "But first we're going to stick\nto this comparison model and try to understand why we need n lg n\ncomparisons if that's all we're",
    "start": "392000",
    "end": "401811"
  },
  {
    "text": "allowed to do.\nAnd for that we're going to look at something called\ndecision trees,",
    "start": "401811",
    "end": "408090"
  },
  {
    "text": "which in some sense is another\nmodel of what you're allowed to do in an algorithm,\nbut it's more general than the",
    "start": "408090",
    "end": "416723"
  },
  {
    "text": "comparison model.\nAnd let's try and example to",
    "start": "416723",
    "end": "421775"
  },
  {
    "text": "get some intuition.\nSuppose we want to sort three elements.\nThis is not very challenging,",
    "start": "421775",
    "end": "430301"
  },
  {
    "text": "but we'll get to draw the\ndecision tree that corresponds",
    "start": "430301",
    "end": "435754"
  },
  {
    "text": "to sorting three elements.\nHere is one solution I claim.",
    "start": "435754",
    "end": "442000"
  },
  {
    "text": "This is, in a certain sense,\nan algorithm, but it's drawn as a tree\ninstead of pseudocode.",
    "start": "462000",
    "end": "470000"
  },
  {
    "text": "What this tree means is that\neach node you're making a comparison.\nThis says compare a_1 versus",
    "start": "495000",
    "end": "501634"
  },
  {
    "text": "a_2.\nIf a_1 is smaller than a_2 you go this way, if it is bigger\nthan a_2 you go this way,",
    "start": "501634",
    "end": "507908"
  },
  {
    "text": "and then you proceed.\nWhen you get down to a leaf, this is the answer.\nRemember, the sorting problem",
    "start": "507908",
    "end": "516422"
  },
  {
    "text": "is you're trying to find a\npermutation of the inputs that puts it in sorted order.\nLet's try it with some sequence",
    "start": "516422",
    "end": "525802"
  },
  {
    "text": "of numbers, say 9,\n4 and 6. We want to sort 9,\n4 and 6, so first we compare",
    "start": "525802",
    "end": "531887"
  },
  {
    "text": "the first element with the\nsecond element. 9 is bigger than 4 so we go\ndown this way.",
    "start": "531887",
    "end": "540000"
  },
  {
    "text": "Then we compare the first\nelement with the third element, that's 9 versus 6.\n9 is bigger than 6,",
    "start": "540000",
    "end": "545625"
  },
  {
    "text": "so we go this way.\nAnd then we compare the second element with the third element,\n4 is less than 6 and,",
    "start": "545625",
    "end": "551673"
  },
  {
    "text": "so we go this way.\nAnd the claim is that this is the correct permutation of the\nelements.",
    "start": "551673",
    "end": "556875"
  },
  {
    "text": "You take a_2,\nwhich is 4, then you take a_3, which is 6, and then you take\na_1, which is 9,",
    "start": "556875",
    "end": "562196"
  },
  {
    "text": "so indeed that works out.\nAnd if I wrote this down right, this is a sorting algorithm in\nthe decision tree model.",
    "start": "562197",
    "end": "570000"
  },
  {
    "text": "In general, let me just say the\nrules of this game.",
    "start": "570000",
    "end": "576993"
  },
  {
    "text": "In general, we have n elements\nwe want to sort.",
    "start": "576993",
    "end": "583425"
  },
  {
    "text": "And I only drew the n = 3 case\nbecause these trees get very big",
    "start": "583426",
    "end": "592097"
  },
  {
    "text": "very quickly.\nEach internal node, so every non-leaf node,\nhas a label of the form i :",
    "start": "592097",
    "end": "603566"
  },
  {
    "text": "j where i and j are between 1\nand n.",
    "start": "603566",
    "end": "610000"
  },
  {
    "text": "And this means that we compare\na_i with a_j.",
    "start": "615000",
    "end": "623000"
  },
  {
    "text": "And we have two subtrees from\nevery such node. We have the left subtree which\ntells you what the algorithm",
    "start": "629000",
    "end": "640119"
  },
  {
    "text": "does, what subsequent\ncomparisons it makes if it comes",
    "start": "640119",
    "end": "645840"
  },
  {
    "text": "out less than.",
    "start": "645840",
    "end": "648000"
  },
  {
    "text": "And we have to be a little bit\ncareful because it could also come out equal.\nWhat we will do is the left",
    "start": "654000",
    "end": "659799"
  },
  {
    "text": "subtree corresponds to less than\nor equal to and the right subtree corresponds to strictly\ngreater than.",
    "start": "659799",
    "end": "666000"
  },
  {
    "text": "That is a little bit more\nprecise than what we were doing here.\nHere all the elements were",
    "start": "677000",
    "end": "683214"
  },
  {
    "text": "distinct so no problem.\nBut, in general, we care about the equality case\ntoo to be general.",
    "start": "683214",
    "end": "690000"
  },
  {
    "text": "So, that was the internal\nnodes. And then each leaf node gives\nyou a permutation.",
    "start": "690000",
    "end": "696000"
  },
  {
    "text": "So, in order to be the answer\nto that sorting problem, that permutation better have\nthe property that it orders the",
    "start": "704000",
    "end": "712124"
  },
  {
    "text": "elements.\nThis is from the first lecture when we defined the sorting\nproblem.",
    "start": "712124",
    "end": "718000"
  },
  {
    "text": "Some permutation on n things\nsuch that a_pi(1) is less than",
    "start": "718000",
    "end": "725088"
  },
  {
    "text": "or equal to a_pi(2) and so on.",
    "start": "725088",
    "end": "729000"
  },
  {
    "text": "So, that is the definition of a\ndecision tree. Any binary tree with these\nkinds of labels satisfies all",
    "start": "735000",
    "end": "741849"
  },
  {
    "text": "these properties.\nThat is, in some sense, a sorting algorithm.\nIt's a sorting algorithm in the",
    "start": "741849",
    "end": "748082"
  },
  {
    "text": "decision tree model.\nNow, as you might expect, this is really not too\ndifferent than the comparison",
    "start": "748082",
    "end": "755560"
  },
  {
    "text": "model.\nIf I give you a comparison sorting algorithm,\nwe have these four,",
    "start": "755560",
    "end": "760608"
  },
  {
    "text": "quicksort, heapsort,\nmerge sort and insertion sort. All of them can be translated\ninto the decision tree model.",
    "start": "760609",
    "end": "768512"
  },
  {
    "text": "It's sort of a graphical\nrepresentation of what the algorithm does.\nIt's not a terribly useful one",
    "start": "768512",
    "end": "775463"
  },
  {
    "text": "for writing down an algorithm.\nAny guesses why? Why do we not draw these\npictures as a definition of",
    "start": "775463",
    "end": "783416"
  },
  {
    "text": "quicksort or a definition of\nmerge sort? It depends on the size of the\ninput, that's a good point.",
    "start": "783416",
    "end": "789779"
  },
  {
    "text": "This tree is specific to the\nvalue of n, so it is, in some sense,\nnot as generic.",
    "start": "789779",
    "end": "795004"
  },
  {
    "text": "Now, we could try to write down\na construction for an arbitrary value of n of one of these\ndecision trees and that would",
    "start": "795004",
    "end": "802842"
  },
  {
    "text": "give us sort of a real algorithm\nthat works for any input size.",
    "start": "802842",
    "end": "808000"
  },
  {
    "text": "But even then this is not a\nterribly convenient representation for writing down\nan algorithm.",
    "start": "808000",
    "end": "814296"
  },
  {
    "text": "Well, let's write down a\ntransformation that converts a comparison sorting algorithm to\na decision tree and then maybe",
    "start": "814296",
    "end": "822341"
  },
  {
    "text": "you will see why.\nThis is not a useless model, obviously, I wouldn't be\ntelling you otherwise.",
    "start": "822341",
    "end": "828707"
  },
  {
    "text": "It will be very powerful for\nproving that we cannot do better than n lg n, but as writing down\nan algorithm,",
    "start": "828707",
    "end": "836053"
  },
  {
    "text": "if you were going to implement\nsomething, this tree is not so useful.\nEven if you had a decision tree",
    "start": "836053",
    "end": "845131"
  },
  {
    "text": "computer, whatever that is.\nBut let's prove this theorem",
    "start": "845131",
    "end": "850686"
  },
  {
    "text": "that decision trees,\nin some sense, model comparison sorting\nalgorithms, which we call just",
    "start": "850686",
    "end": "859574"
  },
  {
    "text": "comparison sorts.",
    "start": "859575",
    "end": "862000"
  },
  {
    "text": "This is a transformation.\nAnd we're going to build one tree for each value of n.\nThe decision trees depend on n.",
    "start": "869000",
    "end": "878909"
  },
  {
    "text": "The algorithm hopefully,\nwell, it depends on n, but it works for all values of\nn.",
    "start": "878909",
    "end": "886000"
  },
  {
    "text": "And we're just going to think\nof the algorithm as splitting",
    "start": "886000",
    "end": "891272"
  },
  {
    "text": "into two forks,\nthe left subtree and the right subtree whenever it makes a\ncomparison.",
    "start": "891272",
    "end": "900000"
  },
  {
    "text": "If we take a comparison sort\nlike merge sort. And it does lots of stuff.\nIt does index arithmetic,",
    "start": "907000",
    "end": "912906"
  },
  {
    "text": "it does recursion,\nwhatever. But at some point it makes a\ncomparison and then we say,",
    "start": "912906",
    "end": "918005"
  },
  {
    "text": "OK, there are two halves of the\nalgorithm. There is what the algorithm\nwould do if the comparison came",
    "start": "918005",
    "end": "924160"
  },
  {
    "text": "out less than or equal to and\nwhat the algorithm would do if the comparison came out greater\nthan.",
    "start": "924160",
    "end": "931000"
  },
  {
    "text": "So, you can build a tree in\nthis way. In some sense,\nwhat this tree is doing is",
    "start": "931000",
    "end": "937302"
  },
  {
    "text": "listing all possible executions\nof this algorithm considering what would happen for all\npossible values of those",
    "start": "937302",
    "end": "946341"
  },
  {
    "text": "comparisons.",
    "start": "946341",
    "end": "948000"
  },
  {
    "text": "We will call these all possible\ninstruction traces. If you write down all the\ninstructions that are executed",
    "start": "959000",
    "end": "969140"
  },
  {
    "text": "by this algorithm,\nfor all possible input arrays, a_1 to a_n, see what all the\ncomparisons, how they could come",
    "start": "969140",
    "end": "979570"
  },
  {
    "text": "and what the algorithm does,\nin the end you will get a tree.",
    "start": "979570",
    "end": "985267"
  },
  {
    "text": "Now, how big will that tree be\nroughly?",
    "start": "985267",
    "end": "990000"
  },
  {
    "text": "As a function of n. Yeah?",
    "start": "1003000",
    "end": "1008000"
  },
  {
    "text": "Right.\nIf it's got to be able to sort every possible list of length n,\nat the leaves I have to have",
    "start": "1015000",
    "end": "1021906"
  },
  {
    "text": "all the permutations of those\nelements. That is a lot.\nThere are a lot of permeations",
    "start": "1021906",
    "end": "1027925"
  },
  {
    "text": "on n elements.\nThere's n factorial of them. N factorial is exponential,\nit's really big.",
    "start": "1027925",
    "end": "1033576"
  },
  {
    "text": "So, this tree is huge.\nIt's going to be exponential on the input size n.\nThat is why we don't write",
    "start": "1033576",
    "end": "1039958"
  },
  {
    "text": "algorithms down normally as a\ndecision tree, even though in some cases maybe\nwe could.",
    "start": "1039958",
    "end": "1045475"
  },
  {
    "text": "It's not a very compact\nrepresentation. These algorithms,\nyou write them down in",
    "start": "1045476",
    "end": "1051266"
  },
  {
    "text": "pseudocode, they have constant\nlength. It's a very succinct\nrepresentation of this algorithm.\nHere the length depends on n",
    "start": "1051266",
    "end": "1058066"
  },
  {
    "text": "and it depends exponentially on\nn, which is not useful if you wanted to implement the\nalgorithm because writing down",
    "start": "1058066",
    "end": "1064632"
  },
  {
    "text": "the algorithm would take a long\ntime. But, nonetheless,\nwe can use this as a tool to analyze these comparison sorting\nalgorithms.",
    "start": "1064633",
    "end": "1071839"
  },
  {
    "text": "We have all of these.\nAny algorithm can be transformed in this way into a\ndecision tree.",
    "start": "1071839",
    "end": "1078000"
  },
  {
    "text": "And now we have this\nobservation that the number of",
    "start": "1078000",
    "end": "1083365"
  },
  {
    "text": "leaves in this decision tree has\nto be really big.",
    "start": "1083365",
    "end": "1088624"
  },
  {
    "text": "Let me talk about leaves in a\nsecond. Before we get to leaves,\nlet's talk about the depth of",
    "start": "1088624",
    "end": "1098175"
  },
  {
    "text": "the tree.",
    "start": "1098175",
    "end": "1100000"
  },
  {
    "text": "This decision tree represents\nall possible executions of the algorithm.\nIf I look at a particular",
    "start": "1106000",
    "end": "1111546"
  },
  {
    "text": "execution, which corresponds to\nsome root to leaf path in the tree, the running time or the\nnumber of comparisons made by",
    "start": "1111546",
    "end": "1118845"
  },
  {
    "text": "that execution is just the\nlength of the path.",
    "start": "1118845",
    "end": "1122000"
  },
  {
    "text": "And, therefore,\nthe worst-case running time,",
    "start": "1127000",
    "end": "1132160"
  },
  {
    "text": "over all possible inputs of\nlength n, is going to be --",
    "start": "1132160",
    "end": "1139000"
  },
  {
    "text": "n - 1?\nCould be. Depends on the decision tree.\nBut, as a function of the",
    "start": "1145000",
    "end": "1151355"
  },
  {
    "text": "decision tree?\nThe longest path, right, which is called the\nheight of the tree.",
    "start": "1151355",
    "end": "1159000"
  },
  {
    "text": "So, this is what we want to\nmeasure. We want to claim that the\nheight of the tree has to be at",
    "start": "1164000",
    "end": "1169796"
  },
  {
    "text": "least n lg n with an omega in\nfront. That is what we'll prove.",
    "start": "1169796",
    "end": "1174000"
  },
  {
    "text": "And the only thing we're going\nto use is that the number of leaves in that tree has to be\nbig, has to be n factorial.",
    "start": "1182000",
    "end": "1188000"
  },
  {
    "text": "This is a lower bound on\ndecision tree sorting.",
    "start": "1200000",
    "end": "1209000"
  },
  {
    "text": "And the lower bound says that\nif you have any decision tree",
    "start": "1221000",
    "end": "1226523"
  },
  {
    "text": "that sorts n elements then its\nheight has to be at least n lg n",
    "start": "1226523",
    "end": "1232428"
  },
  {
    "text": "up to constant factors.",
    "start": "1232428",
    "end": "1235000"
  },
  {
    "text": "So, that is the theorem.\nNow we're going to prove the",
    "start": "1245000",
    "end": "1252090"
  },
  {
    "text": "theorem.\nAnd we're going to use that the",
    "start": "1252090",
    "end": "1257408"
  },
  {
    "text": "number of leaves in that tree\nmust be at least n factorial.",
    "start": "1257409",
    "end": "1266000"
  },
  {
    "text": "Because there are n factorial\npermutations of the inputs. All of them could happen.\nAnd so, for this algorithm to",
    "start": "1266000",
    "end": "1274784"
  },
  {
    "text": "be correct, it has detect every\none of those permutations in some way.\nNow, it may do it very quickly.",
    "start": "1274784",
    "end": "1282690"
  },
  {
    "text": "We better only need n lg n\ncomparisons because we know that's possible.\nThe depth of the tree may not",
    "start": "1282690",
    "end": "1291116"
  },
  {
    "text": "be too big, but it has to have a\nhuge number of leaves down there.\nIt has to branch enough to get",
    "start": "1291116",
    "end": "1297978"
  },
  {
    "text": "n factorial leaves because it\nhas to give the right answer in possible inputs.\nThis is, in some sense,",
    "start": "1297978",
    "end": "1305204"
  },
  {
    "text": "counting the number of possible\ninputs that we have to distinguish.\nThis is the number of leaves.",
    "start": "1305204",
    "end": "1312065"
  },
  {
    "text": "What we care about is the\nheight of the tree. Let's call the height of the\ntree h.",
    "start": "1312065",
    "end": "1319000"
  },
  {
    "text": "Now, if I have a tree of height\nh, how many leaves could it have?\nWhat's the maximum number of",
    "start": "1319000",
    "end": "1324491"
  },
  {
    "text": "leaves it could have?",
    "start": "1324491",
    "end": "1326000"
  },
  {
    "text": "2^h, exactly.\nBecause this is binary tree, comparison trees always have a\nbranching factor of 2,",
    "start": "1339000",
    "end": "1349023"
  },
  {
    "text": "the number of leaves has to be\nat most 2^h, if I have a height",
    "start": "1349023",
    "end": "1355597"
  },
  {
    "text": "h tree.\nNow, this gives me a relation. The number of leaves has to be\ngreater than or equal to n",
    "start": "1355598",
    "end": "1361777"
  },
  {
    "text": "factorial and the number of\nleaves has to be less than or equal to 2^h.\nTherefore, n factorial is less",
    "start": "1361777",
    "end": "1367277"
  },
  {
    "text": "than or equal to 2^h,\nif I got that right.",
    "start": "1367277",
    "end": "1370000"
  },
  {
    "text": "Now, again, we care about h in\nterms of n factorial, so we solve this by taking\nlogs.",
    "start": "1378000",
    "end": "1384710"
  },
  {
    "text": "And I am also going to flip\nsides. Now h is at least log base 2,\nbecause there is a 2 over here,",
    "start": "1384710",
    "end": "1392322"
  },
  {
    "text": "of n factorial.\nThere is a property that I'm using here in order to derive\nthis inequality from this",
    "start": "1392322",
    "end": "1400259"
  },
  {
    "text": "inequality.\nThis is a technical aside, but it's important that you\nrealize there is a technical",
    "start": "1400260",
    "end": "1407789"
  },
  {
    "text": "issue here.",
    "start": "1407790",
    "end": "1410000"
  },
  {
    "text": "The general principle I'm\napplying is I have some inequality, I do the same thing\nto both sides,",
    "start": "1420000",
    "end": "1426458"
  },
  {
    "text": "and hopefully that inequality\nshould still be true. But, in order for that to be\nthe case, I need a property",
    "start": "1426458",
    "end": "1433750"
  },
  {
    "text": "about that operation that I'm\nperforming. It has to be a monotonic\ntransformation.",
    "start": "1433750",
    "end": "1440000"
  },
  {
    "text": "Here what I'm using is that log\nis a monotonically increasing function.\nThat is important.",
    "start": "1440000",
    "end": "1446598"
  },
  {
    "text": "If I multiply both sides by -1,\nwhich is a decreasing function, the inequality would have to\nget flipped.",
    "start": "1446598",
    "end": "1454334"
  },
  {
    "text": "The fact that the inequality is\nnot flipping here, I need to know that log is\nmonotonically increasing.",
    "start": "1454334",
    "end": "1461918"
  },
  {
    "text": "If you see log that's true.\nWe need to be careful here.",
    "start": "1461918",
    "end": "1467000"
  },
  {
    "text": "Now we need some approximation\nof n factorial in order to figure out what its log is.\nDoes anyone know a good",
    "start": "1467000",
    "end": "1476344"
  },
  {
    "text": "approximation for n factorial?\nNot necessarily the equation",
    "start": "1476344",
    "end": "1481457"
  },
  {
    "text": "but the name.\nStirling's formula. Good.\nYou all remember Stirling.",
    "start": "1481457",
    "end": "1487011"
  },
  {
    "text": "And I just need the highest\norder term, which I believe is",
    "start": "1487011",
    "end": "1492035"
  },
  {
    "text": "that.\nN factorial is at least (n/e)^n.\nSo, that's all we need here.",
    "start": "1492035",
    "end": "1499000"
  },
  {
    "text": "Now I can use properties of\nlogs to bring the n outside.",
    "start": "1499000",
    "end": "1506236"
  },
  {
    "text": "This is n lg (n/e).",
    "start": "1506236",
    "end": "1509000"
  },
  {
    "text": "And then lg (n/e) I can\nsimplify.",
    "start": "1515000",
    "end": "1518000"
  },
  {
    "text": "That is just lg n - lg e.\nSo, this is n(lg n - lg e). Lg e is a constant,\nso it's really tiny compared to",
    "start": "1528000",
    "end": "1537041"
  },
  {
    "text": "this lg n which is growing\nwithin. This is Omega(n lg n).\nAll we care about is the",
    "start": "1537041",
    "end": "1544044"
  },
  {
    "text": "leading term.\nIt is actually Theta(n lg n), but because we have it greater\nthan or equal to all we care",
    "start": "1544044",
    "end": "1552908"
  },
  {
    "text": "about is the omega.\nA theta here wouldn't give us anything stronger.\nOf course, not all algorithms",
    "start": "1552908",
    "end": "1561797"
  },
  {
    "text": "have n lg n running time or make\nn lg n comparisons. Some of them do,\nsome of them are worse,",
    "start": "1561797",
    "end": "1567376"
  },
  {
    "text": "but this proves that all of\nthem require a height of at least n lg n.\nThere you see proof,",
    "start": "1567376",
    "end": "1572768"
  },
  {
    "text": "once you observe the fact about\nthe number of leaves, and if you remember Stirling's\nformula.",
    "start": "1572768",
    "end": "1578346"
  },
  {
    "text": "So, you should know this proof.\nYou can show that all sorts of problems require n lg n time\nwith this kind of technique,",
    "start": "1578347",
    "end": "1585599"
  },
  {
    "text": "provided you're in some kind of\na decision tree model. That's important.\nWe really need that our",
    "start": "1585599",
    "end": "1592474"
  },
  {
    "text": "algorithm can be phrased as a\ndecision tree. And, in particular,\nwe know from this transformation that all\ncomparison sorts can be",
    "start": "1592474",
    "end": "1600205"
  },
  {
    "text": "represented as the decision\ntree. But there are some sorting\nalgorithms which cannot be",
    "start": "1600206",
    "end": "1605402"
  },
  {
    "text": "represented as a decision tree.\nAnd we will turn to that momentarily.\nBut before we get there I",
    "start": "1605402",
    "end": "1611091"
  },
  {
    "text": "phrased this theorem as a lower\nbound on decision tree sorting. But, of course,\nwe also get a lower bound on",
    "start": "1611092",
    "end": "1617587"
  },
  {
    "text": "comparison sorting.\nAnd, in particular, it tells us that merge sort and\nheapsort are asymptotically",
    "start": "1617587",
    "end": "1628554"
  },
  {
    "text": "optimal.\nTheir dependence on n, in terms of asymptotic\nnotation, so ignoring constant",
    "start": "1628555",
    "end": "1637665"
  },
  {
    "text": "factors, these algorithms are\noptimal in terms of growth of n,",
    "start": "1637666",
    "end": "1644444"
  },
  {
    "text": "but this is only in the\ncomparison model.",
    "start": "1644444",
    "end": "1650000"
  },
  {
    "text": "So, among comparison sorting\nalgorithms, which these are, they are asymptotically\noptimal.",
    "start": "1650000",
    "end": "1655661"
  },
  {
    "text": "They use the minimum number of\ncomparisons up to constant factors.\nIn fact, their whole running",
    "start": "1655661",
    "end": "1661648"
  },
  {
    "text": "time is dominated by the number\nof comparisons. It's all Theta(n lg n).\nSo, this is good news.",
    "start": "1661648",
    "end": "1667570"
  },
  {
    "text": "And I should probably mention a\nlittle bit about what happens with randomized algorithms.\nWhat I've described here really",
    "start": "1667570",
    "end": "1675249"
  },
  {
    "text": "only applies,\nin some sense, to deterministic algorithms.\nDoes anyone see what would",
    "start": "1675249",
    "end": "1682054"
  },
  {
    "text": "change with randomized\nalgorithms or where I've assumed that I've had a deterministic\ncomparison sort?",
    "start": "1682055",
    "end": "1689882"
  },
  {
    "text": "This is a bit subtle.\nAnd I only noticed it reading the notes this morning,\noh, wait.",
    "start": "1689883",
    "end": "1697000"
  },
  {
    "text": "I will give you a hint.\nIt's over here, the right-hand side of the\nworld.",
    "start": "1708000",
    "end": "1713000"
  },
  {
    "text": "If I have a deterministic\nalgorithm, what the algorithm",
    "start": "1730000",
    "end": "1735400"
  },
  {
    "text": "does is completely determinate\nat each step. As long as I know all the\ncomparisons that it made up to",
    "start": "1735400",
    "end": "1745789"
  },
  {
    "text": "some point, it's determinate\nwhat that algorithm will do.",
    "start": "1745789",
    "end": "1751684"
  },
  {
    "text": "But, if I have a randomized\nalgorithm, it also depends on",
    "start": "1751684",
    "end": "1757578"
  },
  {
    "text": "the outcomes of some coin flips.\nAny suggestions of what breaks",
    "start": "1757578",
    "end": "1764105"
  },
  {
    "text": "over here?\nThere is more than one tree, exactly.\nSo, we had this assumption that",
    "start": "1764105",
    "end": "1771757"
  },
  {
    "text": "we only have one tree for each\nn. In fact, what we get is a\nprobability distribution over trees.\nFor each value of n,",
    "start": "1771758",
    "end": "1778109"
  },
  {
    "text": "if you take all the possible\nexecutions of that algorithm, all the instruction traces,\nwell, now, in addition to",
    "start": "1778109",
    "end": "1784291"
  },
  {
    "text": "branching on comparisons,\nwe also branch on whether a coin flip came out heads or\ntails, or however we're",
    "start": "1784291",
    "end": "1790075"
  },
  {
    "text": "generating random numbers it\ncame out with some value between 1 and n.\nSo, we get a probability",
    "start": "1790075",
    "end": "1795293"
  },
  {
    "text": "distribution over trees.\nThis lower bound still applies, though.\nBecause, no matter what tree we",
    "start": "1795293",
    "end": "1802219"
  },
  {
    "text": "get, I don't really care.\nI get at least one tree for each n.\nAnd this proof applies to every",
    "start": "1802219",
    "end": "1808662"
  },
  {
    "text": "tree.\nSo, no matter what tree you get, if it is a correct tree it\nhas to have height Omega(n lg",
    "start": "1808662",
    "end": "1815249"
  },
  {
    "text": "n).\nThis lower bound applies even for randomized algorithms.\nYou cannot get better than n lg",
    "start": "1815249",
    "end": "1821621"
  },
  {
    "text": "n, because no matter what tree\nit comes up with, no matter how those coin flips\ncome out, this argument still",
    "start": "1821621",
    "end": "1829210"
  },
  {
    "text": "applies.\nEvery tree that comes out has to be correct,\nso this is really at least one",
    "start": "1829210",
    "end": "1837308"
  },
  {
    "text": "tree.",
    "start": "1837308",
    "end": "1838000"
  },
  {
    "text": "And that will now work.\nWe also get the fact that randomized quicksort is\nasymptotically optimal in",
    "start": "1843000",
    "end": "1852428"
  },
  {
    "text": "expectation.",
    "start": "1852428",
    "end": "1854000"
  },
  {
    "text": "But, in order to say that\nrandomized quicksort is asymptotically optimal,\nwe need to know that all",
    "start": "1865000",
    "end": "1873940"
  },
  {
    "text": "randomized algorithms require\nOmega(n lg n) comparisons.",
    "start": "1873941",
    "end": "1879117"
  },
  {
    "text": "Now we know that so all is\nwell. That is the comparison model.\nAny questions before we go on?",
    "start": "1879117",
    "end": "1887588"
  },
  {
    "text": "Good.\nThe next topic is to burst outside of the comparison model\nand try to sort in linear time.",
    "start": "1887588",
    "end": "1897000"
  },
  {
    "text": "It is pretty clear that,\nas long as you don't have some kind of a parallel algorithm or\nsomething really fancy,",
    "start": "1903000",
    "end": "1908468"
  },
  {
    "text": "you cannot sort any better than\nlinear time because you've at least got to look at the data.\nNo matter what you're doing",
    "start": "1908468",
    "end": "1914392"
  },
  {
    "text": "with the data,\nyou've got to look at it, otherwise you're not sorting it\ncorrectly. So, linear time is the best we\ncould hope for.",
    "start": "1914392",
    "end": "1921876"
  },
  {
    "text": "N lg n is pretty close.\nHow could we sort in linear time?\nWell, we're going to need some",
    "start": "1921876",
    "end": "1927309"
  },
  {
    "text": "more powerful assumption.\nAnd this is the counter example.\nWe're going to have to move",
    "start": "1927309",
    "end": "1932614"
  },
  {
    "text": "outside the comparison model and\ndo something else with our elements.\nAnd what we're going to do is",
    "start": "1932614",
    "end": "1938750"
  },
  {
    "text": "assume that they're integers in\na particular range, and we will use that to sort in\nlinear time.",
    "start": "1938750",
    "end": "1944694"
  },
  {
    "text": "We're going to see two\nalgorithms for sorting faster than n lg n.\nThe first one is pretty simple,",
    "start": "1944694",
    "end": "1952525"
  },
  {
    "text": "and we will use it in the\nsecond algorithm. It's called counting sort.\nThe input to counting sort is",
    "start": "1952525",
    "end": "1960426"
  },
  {
    "text": "an array, as usual,\nbut we're going to assume what those array elements look like.\nEach A[i] is an integer from",
    "start": "1960426",
    "end": "1969224"
  },
  {
    "text": "the range of 1 to k.\nThis is a pretty strong assumption.\nAnd the running time is",
    "start": "1969224",
    "end": "1975497"
  },
  {
    "text": "actually going to depend on k.\nIf k is small it is going to be",
    "start": "1975497",
    "end": "1981984"
  },
  {
    "text": "a good algorithm.\nIf k is big it's going to be a really bad algorithm,\nworse than n lg n.",
    "start": "1981984",
    "end": "1990263"
  },
  {
    "text": "Our goal is to output some\nsorted version of this array.",
    "start": "1990263",
    "end": "1995559"
  },
  {
    "text": "Let's call this sorting of A.\nIt's going to be easier to",
    "start": "1995559",
    "end": "2000854"
  },
  {
    "text": "write down the output directly\ninstead of writing down",
    "start": "2000854",
    "end": "2005956"
  },
  {
    "text": "permutation for this algorithm.\nAnd then we have some auxiliary",
    "start": "2005956",
    "end": "2012841"
  },
  {
    "text": "storage.\nI'm about to write down the pseudocode, which is why I'm\ndeclaring all my variables here.",
    "start": "2012841",
    "end": "2021549"
  },
  {
    "text": "And the auxiliary storage will\nhave length k, which is the range on my input\nvalues.",
    "start": "2021549",
    "end": "2028974"
  },
  {
    "text": "Let's see the algorithm.",
    "start": "2028974",
    "end": "2032000"
  },
  {
    "text": "This is counting sort.",
    "start": "2047000",
    "end": "2049000"
  },
  {
    "text": "And it takes a little while to\nwrite down but it's pretty straightforward.",
    "start": "2057000",
    "end": "2062000"
  },
  {
    "text": "First we do some\ninitialization. Then we do some counting.",
    "start": "2068000",
    "end": "2076000"
  },
  {
    "text": "Then we do some summing.",
    "start": "2104000",
    "end": "2106000"
  },
  {
    "text": "And then we actually write the\noutput.",
    "start": "2150000",
    "end": "2154000"
  },
  {
    "text": "Is that algorithm perfectly\nclear to everyone? No one.\nGood. This should illustrate how\nobscure pseudocode can be.",
    "start": "2188000",
    "end": "2193660"
  },
  {
    "text": "And when you're solving your\nproblem sets, you should keep in mind that\nit's really hard to understand",
    "start": "2193660",
    "end": "2199321"
  },
  {
    "text": "an algorithm just given\npseudocode like this. You need some kind of English\ndescription of what's going on",
    "start": "2199322",
    "end": "2205214"
  },
  {
    "text": "because, while you could work\nthrough and figure out what this means, it could take half an\nhour to an hour.",
    "start": "2205214",
    "end": "2211219"
  },
  {
    "text": "And that's not a good way of\nexpressing yourself. And so what I will give you now\nis the English description,",
    "start": "2211219",
    "end": "2217282"
  },
  {
    "text": "but we will refer back to this\nto understand. This is sort of our bible of\nwhat the algorithm is supposed",
    "start": "2217282",
    "end": "2225440"
  },
  {
    "text": "to do.\nLet me go over it briefly. The first step is just some\ninitialization.",
    "start": "2225440",
    "end": "2231105"
  },
  {
    "text": "The C[i]'s are going to count\nsome things, count occurrences of values.\nAnd so first we set them to",
    "start": "2231105",
    "end": "2238454"
  },
  {
    "text": "zero.\nThen, for every value we see A[j], we're going to increment\nthe counter for that value A[j].",
    "start": "2238454",
    "end": "2245727"
  },
  {
    "text": "Then the C[i]s will give me the\nnumber of elements equal to a particular value i.\nThen I'm going to take prefix",
    "start": "2245727",
    "end": "2255037"
  },
  {
    "text": "sums, which will make it so that\nC[i] gives me the number of keys, the number of elements\nless than or equal to [i]",
    "start": "2255037",
    "end": "2262908"
  },
  {
    "text": "instead of equals.\nAnd then, finally, it turns out that's enough to\nput all the elements in the",
    "start": "2262908",
    "end": "2269372"
  },
  {
    "text": "right place.\nThis I will call distribution. This is the distribution step.\nAnd it's probably the least",
    "start": "2269372",
    "end": "2276328"
  },
  {
    "text": "obvious of all the steps.\nAnd let's do an example to make",
    "start": "2276329",
    "end": "2281421"
  },
  {
    "text": "it more obvious what's going on.",
    "start": "2281421",
    "end": "2284000"
  },
  {
    "text": "Let's take an array A = [4,\n1, 3, 4, 3].",
    "start": "2292000",
    "end": "2310000"
  },
  {
    "text": "And then I want some array C.\nAnd let me add some indices",
    "start": "2310000",
    "end": "2316693"
  },
  {
    "text": "here so we can see what the\nalgorithm is really doing.",
    "start": "2316693",
    "end": "2323027"
  },
  {
    "text": "Here it turns out that all of\nmy numbers are in the range 1 to",
    "start": "2323027",
    "end": "2330318"
  },
  {
    "text": "4, so k = 4.\nMy array C has four values. Initially, I set them all to\nzero.",
    "start": "2330318",
    "end": "2340000"
  },
  {
    "text": "That's easy.\nAnd now I want to count through everything.\nAnd let me not cheat here.",
    "start": "2340000",
    "end": "2347133"
  },
  {
    "text": "I'm in the second step,\nso to speak. And I look for each element in\norder.",
    "start": "2347133",
    "end": "2353463"
  },
  {
    "text": "I look at the C[i] value.\nThe first element is 4, so I look at C4.\nThat is 0.",
    "start": "2353464",
    "end": "2360063"
  },
  {
    "text": "I increment it to 1.\nThen I look at element 1. That's 0.\nI increment it to 1.",
    "start": "2360063",
    "end": "2368000"
  },
  {
    "text": "Then I look at 3 and that's\nhere. It is also 0.\nI increment it to 1.",
    "start": "2368000",
    "end": "2373891"
  },
  {
    "text": "Not so exciting so far.\nNow I see 4, which I've seen before,\nhow exciting.",
    "start": "2373892",
    "end": "2380328"
  },
  {
    "text": "I had value 1 in here,\nI increment it to 2. Then I see value 3,\nwhich also had a value of 1.",
    "start": "2380328",
    "end": "2388396"
  },
  {
    "text": "I increment that to 2.\nThe result is [1, 0, 2, 2].\nThat's what my array C looks",
    "start": "2388396",
    "end": "2395286"
  },
  {
    "text": "like at this point in the\nalgorithm. Now I do a relatively simple\ntransformation of taking prefix",
    "start": "2395286",
    "end": "2404244"
  },
  {
    "text": "sums.\nI want to know, instead of these individual\nvalues, the sum of this prefix,",
    "start": "2404244",
    "end": "2409856"
  },
  {
    "text": "the sum of this prefix,\nthe sum of this prefix and the sum of this prefix.\nI will call that C prime just",
    "start": "2409856",
    "end": "2417121"
  },
  {
    "text": "so we don't get too lost in all\nthese different versions of C. This is just 1.\nAnd 1 plus 0 is 1.",
    "start": "2417122",
    "end": "2423884"
  },
  {
    "text": "1 plus 2 is 3.\n3 plus 2 is 5. So, these are sort of the\nrunning totals.",
    "start": "2423884",
    "end": "2430000"
  },
  {
    "text": "There are five elements total,\nthere are three elements less than or equal to 3,\nthere is one element less than",
    "start": "2430000",
    "end": "2437105"
  },
  {
    "text": "or equal to 2,\nand so on. Now, the fun part,\nthe distribution. And this is where we get our\narray B.",
    "start": "2437105",
    "end": "2443355"
  },
  {
    "text": "B better have the same size,\nevery element better appear here somewhere and they should\ncome out in sorted order.",
    "start": "2443355",
    "end": "2450591"
  },
  {
    "text": "Let's just run the algorithm.\nj is going to start at the end of the array and work its way\ndown to 1, the beginning of the",
    "start": "2450592",
    "end": "2458421"
  },
  {
    "text": "array.\nAnd what we do is we pick up the last element of A,\nA[n].",
    "start": "2458421",
    "end": "2465808"
  },
  {
    "text": "We look at the counter.\nWe look at the C vector for",
    "start": "2465808",
    "end": "2471089"
  },
  {
    "text": "that value.\nHere the value is 3, and this is the third column,\nso that has number 3.",
    "start": "2471089",
    "end": "2479643"
  },
  {
    "text": "And the claim is that's where\nit belongs in B. You take this number 3,\nyou put it in index 3 of the",
    "start": "2479643",
    "end": "2489782"
  },
  {
    "text": "array B.\nAnd then you decrement the counter.\nI'm going to replace 3 here",
    "start": "2489782",
    "end": "2497583"
  },
  {
    "text": "with 2.\nAnd the idea is these numbers tell you where those values\nshould go.",
    "start": "2497583",
    "end": "2504264"
  },
  {
    "text": "Anything of value 1 should go\nat position 1. Anything with value 3 should go\nat position 3 or less.",
    "start": "2504264",
    "end": "2513050"
  },
  {
    "text": "This is going to be the last\nplace that a 3 should go.",
    "start": "2513050",
    "end": "2519000"
  },
  {
    "text": "And then anything with value 4\nshould go at position 5 or less, definitely should go at the end\nof the array because 4 is the",
    "start": "2519000",
    "end": "2526700"
  },
  {
    "text": "largest value.\nAnd this counter will work out perfectly because these counts\nhave left enough space in each",
    "start": "2526700",
    "end": "2533264"
  },
  {
    "text": "section of the array.\nEffectively, this part is reserved for ones,\nthere are no twos,",
    "start": "2533264",
    "end": "2538439"
  },
  {
    "text": "this part is reserved for\nthrees, and this part is reserved for fours.\nYou can check if that's really",
    "start": "2538439",
    "end": "2544625"
  },
  {
    "text": "what this array means.\nLet's finish running the algorithm.\nThat was the last element.",
    "start": "2544625",
    "end": "2551000"
  },
  {
    "text": "I won't cross it off,\nbut we've sort of done that. Now I look at the next to last\nelement.",
    "start": "2551000",
    "end": "2556413"
  },
  {
    "text": "That's a 4.\nFours go in position 5. So, I put my 4 here in position\n5 and I decrement that counter.",
    "start": "2556413",
    "end": "2562386"
  },
  {
    "text": "Next I look at another 3.\nThrees now go in position 2, so that goes there.\nAnd then I decrement that",
    "start": "2562386",
    "end": "2568422"
  },
  {
    "text": "counter.\nI won't actually use that counter anymore,\nbut let's decrement it because that's what the algorithm says.\nI look at the previous element.",
    "start": "2568422",
    "end": "2577194"
  },
  {
    "text": "That's a 1.\nOnes go in position 1, so I put it here and decrement\nthat counter.",
    "start": "2577195",
    "end": "2584591"
  },
  {
    "text": "And finally I have another 4.\nAnd fours go in position 4 now,",
    "start": "2584591",
    "end": "2589752"
  },
  {
    "text": "position 4 is here,\nand I decrement that counter. So, that's counting sort.\nAnd you'll notice that all the",
    "start": "2589752",
    "end": "2598612"
  },
  {
    "text": "elements appear and they appear\nin order, so that's the algorithm.\nNow, what's the running time of",
    "start": "2598612",
    "end": "2606784"
  },
  {
    "text": "counting sort?\nkn is an upper bound. It's a little bit better than\nthat.",
    "start": "2606784",
    "end": "2615717"
  },
  {
    "text": "Actually, quite a bit better.\nThis requires some summing.",
    "start": "2615717",
    "end": "2623488"
  },
  {
    "text": "Let's go back to the top of the\nalgorithm.",
    "start": "2623488",
    "end": "2629177"
  },
  {
    "text": "How much time does this step\ntake? k.\nHow much time does this step",
    "start": "2629177",
    "end": "2637918"
  },
  {
    "text": "take?\nn. How much time does this step\ntake?",
    "start": "2637918",
    "end": "2645151"
  },
  {
    "text": "k.\nEach of these operations in the for loops is taking constant\ntime, so it is how many",
    "start": "2645152",
    "end": "2657517"
  },
  {
    "text": "iterations of that for loop are\nthere?",
    "start": "2657517",
    "end": "2662964"
  },
  {
    "text": "And, finally,\nthis step takes n.",
    "start": "2662964",
    "end": "2669000"
  },
  {
    "text": "So, the total running time of\ncounting sort is k + n.",
    "start": "2669000",
    "end": "2675948"
  },
  {
    "text": "And this is a great algorithm\nif k is relatively small,",
    "start": "2675948",
    "end": "2683163"
  },
  {
    "text": "like at most n.\nIf k is big like n^2 or 2^n or",
    "start": "2683163",
    "end": "2689176"
  },
  {
    "text": "whatever, this is not such a\ngood algorithm,",
    "start": "2689176",
    "end": "2694922"
  },
  {
    "text": "but if k = O(n) this is great.\nAnd we get our linear time",
    "start": "2694922",
    "end": "2701715"
  },
  {
    "text": "sorting algorithm.\nNot only do we need the assumption that our numbers are\nintegers, but we need that the",
    "start": "2701715",
    "end": "2708447"
  },
  {
    "text": "range of the integers is pretty\nsmall for this algorithm to work.\nIf all the numbers are between",
    "start": "2708447",
    "end": "2714585"
  },
  {
    "text": "1 and order n then we get a\nlinear time algorithm. But as soon as they're up to n\nlg n we're toast.",
    "start": "2714585",
    "end": "2720922"
  },
  {
    "text": "We're back to n lg n sorting.\nIt's not so great. So, you could write a\ncombination algorithm that says,",
    "start": "2720922",
    "end": "2727521"
  },
  {
    "text": "well, if k is bigger than n lg\nn, then I will just use merge sort.\nAnd if it's less than n lg n",
    "start": "2727521",
    "end": "2735333"
  },
  {
    "text": "I'll use counting sort.\nAnd that would work, but we can do better than that.\nHow's the time?",
    "start": "2735333",
    "end": "2742750"
  },
  {
    "text": "It is worth noting that we've\nbeaten our bound, but only assuming that we're\noutside the comparison model.",
    "start": "2742750",
    "end": "2751333"
  },
  {
    "text": "We haven't really contradicted\nthe original theorem, we're just changing the model.\nAnd it's always good to",
    "start": "2751333",
    "end": "2760527"
  },
  {
    "text": "question what you're allowed to\ndo in any problem scenario. In, say, some practical\nscenarios, this would be great",
    "start": "2760527",
    "end": "2767899"
  },
  {
    "text": "if the numbers you're dealing\nwith are, say, a byte long.\nThen k is only 2^8, which is 256.\nYou need this auxiliary array",
    "start": "2767899",
    "end": "2775603"
  },
  {
    "text": "of size 256, and this is really\nfast. 256 + n, no matter how big n is\nit's linear in n.",
    "start": "2775603",
    "end": "2781182"
  },
  {
    "text": "If you know your numbers are\nsmall, it's great. But if you're numbers are\nbigger, say you still know",
    "start": "2781182",
    "end": "2787624"
  },
  {
    "text": "they're integers but they fit in\nlike 32 bit words, then life is not so easy.\nBecause k is then 2^32,",
    "start": "2787624",
    "end": "2795784"
  },
  {
    "text": "which is 4.2 billion or so,\nwhich is pretty big. And you would need this\nauxiliary array of 4.2 billion",
    "start": "2795784",
    "end": "2803545"
  },
  {
    "text": "words, which is probably like 16\ngigabytes. So, you just need to initialize\nthat array before you can even",
    "start": "2803545",
    "end": "2811537"
  },
  {
    "text": "get started.\nUnless n is like much, much more than 4 billion and\nyou have 16 gigabytes of storage",
    "start": "2811538",
    "end": "2818833"
  },
  {
    "text": "just to throw away,\nwhich I don't even have any machines with 16 gigabytes of\nRAM, this is not such a great",
    "start": "2818833",
    "end": "2826904"
  },
  {
    "text": "algorithm.\nJust to get a feel, it's good, the numbers are\nreally small.",
    "start": "2826904",
    "end": "2833410"
  },
  {
    "text": "What we're going to do next is\ncome up with a fancier algorithm that uses this as a subroutine\non small numbers and combines",
    "start": "2833410",
    "end": "2842612"
  },
  {
    "text": "this algorithm to handle larger\nnumbers. That algorithm is called radix\nsort.",
    "start": "2842612",
    "end": "2849000"
  },
  {
    "text": "But we need one important\nproperty of counting sort before",
    "start": "2849000",
    "end": "2854320"
  },
  {
    "text": "we can go there.",
    "start": "2854320",
    "end": "2856000"
  },
  {
    "text": "And that important property is\nstability.",
    "start": "2862000",
    "end": "2865000"
  },
  {
    "text": "A stable sorting algorithm\npreserves the order of equal",
    "start": "2870000",
    "end": "2878526"
  },
  {
    "text": "elements, let's say the relative\norder.",
    "start": "2878526",
    "end": "2885000"
  },
  {
    "text": "This is a bit subtle because\nusually we think of elements just as numbers.\nAnd, yeah, we had a couple",
    "start": "2899000",
    "end": "2904242"
  },
  {
    "text": "threes and we had a couple\nfours. It turns out,\nif you look at the order of those threes and the order of\nthose fours, we kept them in",
    "start": "2904242",
    "end": "2911144"
  },
  {
    "text": "order.\nBecause we took the last three and we put it here.\nThen we took the next to the",
    "start": "2911144",
    "end": "2916320"
  },
  {
    "text": "last three and we put it to the\nleft of that where O is decrementing our counter and\nmoving from the end of the array",
    "start": "2916320",
    "end": "2922717"
  },
  {
    "text": "to the beginning of the array.\nNo matter how we do that, the orders of those threes are\npreserved, the orders of the",
    "start": "2922717",
    "end": "2929057"
  },
  {
    "text": "fours are preserved.\nThis may seem like a relatively simple thing,\nbut if you look at the other",
    "start": "2929058",
    "end": "2934220"
  },
  {
    "text": "four sorting algorithms we've\nseen, not all of them are stable.\nSo, this is an exercise.",
    "start": "2934220",
    "end": "2940000"
  },
  {
    "text": "Exercise is figure out which\nother sorting algorithms that",
    "start": "2946000",
    "end": "2951181"
  },
  {
    "text": "we've seen are stable and which\nare not.",
    "start": "2951181",
    "end": "2955000"
  },
  {
    "text": "I encourage you to work that\nout because this is the sort of thing that we ask on quizzes.\nBut for now all we need is that",
    "start": "2961000",
    "end": "2969904"
  },
  {
    "text": "counting sort is stable.\nAnd I won't prove this, but it should be pretty obvious\nfrom the algorithm.",
    "start": "2969904",
    "end": "2977866"
  },
  {
    "text": "Now we get to talk about radix\nsort.",
    "start": "2977866",
    "end": "2981000"
  },
  {
    "text": "Radix sort is going to work for\na much larger range of numbers",
    "start": "2995000",
    "end": "3001256"
  },
  {
    "text": "in linear time.\nStill it has to have an assumption about how big those\nnumbers are, but it will be a",
    "start": "3001256",
    "end": "3009532"
  },
  {
    "text": "much more lax assumption.\nNow, to increase suspense even further, I am going to tell you\nsome history about radix sort.",
    "start": "3009532",
    "end": "3018774"
  },
  {
    "text": "This is one of the oldest\nsorting algorithms. It's probably the oldest\nimplemented sorting algorithm.",
    "start": "3018774",
    "end": "3026582"
  },
  {
    "text": "It was implemented around 1890.\nThis is Herman Hollerith.",
    "start": "3026582",
    "end": "3032000"
  },
  {
    "text": "Let's say around 1890.\nHas anyone heard of Hollerith before?\nA couple people.",
    "start": "3032000",
    "end": "3037676"
  },
  {
    "text": "Not too many.\nHe is sort of an important guy. He was a lecturer at MIT at\nsome point.",
    "start": "3037676",
    "end": "3043967"
  },
  {
    "text": "He developed an early version\nof punch cards. Punch card technology.\nThis is before my time so I",
    "start": "3043967",
    "end": "3051101"
  },
  {
    "text": "even have to look at my notes to\nremember. Oh, yeah, they're called punch\ncards.",
    "start": "3051101",
    "end": "3057008"
  },
  {
    "text": "You may have seen them.\nIf not they're in the",
    "start": "3057008",
    "end": "3062036"
  },
  {
    "text": "PowerPoint lecture notes.\nThere's this big grid. These days, if you've used a\nmodern punch card recently,",
    "start": "3062036",
    "end": "3071929"
  },
  {
    "text": "they are 80 characters wide\nand, I don't know, I think it's something like 16,\nI don't remember exactly.",
    "start": "3071929",
    "end": "3081724"
  },
  {
    "text": "And then you punch little holes\nhere. You have this magic machine.\nIt's like a typewriter.",
    "start": "3081725",
    "end": "3090552"
  },
  {
    "text": "You press a letter and that\ncorresponds to some character. Maybe it will punch out a hole\nhere, punch out a hole here.",
    "start": "3090552",
    "end": "3098316"
  },
  {
    "text": "You can see the website if you\nwant to know exactly how this works for historical reasons.\nYou don't see these too often",
    "start": "3098316",
    "end": "3106215"
  },
  {
    "text": "anymore, but this is in\nparticular the reason why most terminals are 80 characters wide\nbecause that was how things",
    "start": "3106215",
    "end": "3113776"
  },
  {
    "text": "were.\nHollerith actually didn't develop these punch cards\nexactly, although eventually he",
    "start": "3113776",
    "end": "3119582"
  },
  {
    "text": "did.\nIn the beginning, in 1890, the big deal was the\nUS Census. If you watched the news,\nI guess like a year or two ago,",
    "start": "3119582",
    "end": "3127220"
  },
  {
    "text": "the US Census was a big deal\nbecause it's really expensive to collect all this data from\neveryone.",
    "start": "3127220",
    "end": "3132544"
  },
  {
    "text": "And the Constitution says\nyou've got to collect data about everyone every ten years.\nAnd it was getting hard.",
    "start": "3132544",
    "end": "3138485"
  },
  {
    "text": "In particular,\nin 1880, they did the census. And it took them almost ten\nyears to complete the census.",
    "start": "3138485",
    "end": "3144033"
  },
  {
    "text": "The population kept going up,\nand ten years to do a ten-year census, that's going to start\ngetting expensive when they",
    "start": "3144033",
    "end": "3150478"
  },
  {
    "text": "overlap with each other.\nSo, for 1890 they wanted to do something fancier.\nAnd Hollerith said,",
    "start": "3150478",
    "end": "3157307"
  },
  {
    "text": "OK, I'm going to build a\nmachine that you take in the data.\nIt was a modified punch card",
    "start": "3157308",
    "end": "3162773"
  },
  {
    "text": "where you would mark out\nparticular squares depending on your status, whether you were\nsingle or married or whatever.",
    "start": "3162773",
    "end": "3170104"
  },
  {
    "text": "All the things they wanted to\nknow on the census they would encode in binary onto this card.\nAnd then he built a machine",
    "start": "3170104",
    "end": "3177627"
  },
  {
    "text": "that would sort these cards so\nyou could do counting. And, in some sense,\nthese are numbers.",
    "start": "3177627",
    "end": "3185221"
  },
  {
    "text": "And the numbers aren't too big,\nbut they're big enough that",
    "start": "3185221",
    "end": "3190272"
  },
  {
    "text": "counting sort wouldn't work.\nI mean if there were a hundred",
    "start": "3190272",
    "end": "3195323"
  },
  {
    "text": "numbers here,\n2^100 is pretty overwhelming, so we cannot use counting sort.\nThe first idea was the wrong",
    "start": "3195323",
    "end": "3204117"
  },
  {
    "text": "idea.\nI'm going to think of these as numbers.\nLet's say each of these columns",
    "start": "3204117",
    "end": "3210561"
  },
  {
    "text": "is one number.\nAnd so there's sort of the most significant number out here and\nthere is the least significant",
    "start": "3210561",
    "end": "3218227"
  },
  {
    "text": "number out here.\nThe first idea was you sort by the most significant digit\nfirst.",
    "start": "3218227",
    "end": "3223000"
  },
  {
    "text": "That's not such a great\nalgorithm, because if you sort by the most significant digit\nyou get a bunch of buckets each",
    "start": "3230000",
    "end": "3238188"
  },
  {
    "text": "with a pile of cards.\nAnd this was a physical device. It wasn't exactly an\nelectronically controlled",
    "start": "3238188",
    "end": "3244261"
  },
  {
    "text": "computer.\nIt was a human that would push down some kind of reader.\nIt would see which holes in the",
    "start": "3244261",
    "end": "3249588"
  },
  {
    "text": "first column are punched.\nAnd then it would open a physical bin in which the person\nwould sort of swipe it and it",
    "start": "3249588",
    "end": "3255756"
  },
  {
    "text": "would just fall into the right\nbin. It was a semi-automated.\nI mean the computer was the human plus the machine,\nbut never mind.",
    "start": "3255757",
    "end": "3262654"
  },
  {
    "text": "This was the procedure.\nYou sorted it into bins. Then you had to go through and\nsort each bin by the second",
    "start": "3262654",
    "end": "3268485"
  },
  {
    "text": "digit.\nAnd pretty soon the number of bins gets pretty big.\nAnd if you don't have too many",
    "start": "3268485",
    "end": "3276349"
  },
  {
    "text": "digits this is OK,\nbut it's not the right thing to do.\nThe right idea,",
    "start": "3276349",
    "end": "3281666"
  },
  {
    "text": "which is what Hollerith came up\nwith after that, was to sort by the least\nsignificant digit first.",
    "start": "3281666",
    "end": "3290000"
  },
  {
    "text": "And you should also do that\nusing a stable sorting algorithm.\nNow, Hollerith probably didn't",
    "start": "3300000",
    "end": "3305778"
  },
  {
    "text": "call it a stable sorting\nalgorithm at the time, but we will.\nAnd this won Hollerith lots of",
    "start": "3305779",
    "end": "3311493"
  },
  {
    "text": "money and good things.\nHe founded this tabulating machine company in 1911,\nand that merged with several",
    "start": "3311493",
    "end": "3317987"
  },
  {
    "text": "other companies to form\nsomething you may have heard of called IBM in 1924.\nThat may be the context in",
    "start": "3317987",
    "end": "3324415"
  },
  {
    "text": "which you've heard of Hollerith,\nor if you've done punch cards before.\nThe whole idea is that we're",
    "start": "3324415",
    "end": "3332315"
  },
  {
    "text": "doing a digit by digit sort.\nI should have mentioned that at the beginning.\nAnd we're going to do it from",
    "start": "3332315",
    "end": "3340749"
  },
  {
    "text": "least significant to most\nsignificant. It turns out that works.\nAnd to see that let's do an",
    "start": "3340749",
    "end": "3348025"
  },
  {
    "text": "example.\nI think I'm going to need a whole two boards ideally.\nFirst we'll see an example.",
    "start": "3348025",
    "end": "3355219"
  },
  {
    "text": "Then we'll prove the theorem.\nThe proof is actually pretty darn easy.\nBut, nonetheless,",
    "start": "3355219",
    "end": "3363255"
  },
  {
    "text": "it's rather counterintuitive\nthis works if you haven't seen it before.\nCertainly, the first time I saw",
    "start": "3363255",
    "end": "3370569"
  },
  {
    "text": "it, it was quite a surprise.\nThe nice thing also about this algorithm is there are no bins.\nIt's all one big bin at all",
    "start": "3370569",
    "end": "3379139"
  },
  {
    "text": "times.\nLet's take some numbers. 329.\nThis is a three digit number. I'm spacing out the digits so\nwe can see them a little bit",
    "start": "3379139",
    "end": "3388005"
  },
  {
    "text": "better.\n457. 657, 839, 436,\n720 and 355.",
    "start": "3388005",
    "end": "3393277"
  },
  {
    "text": "I'm assuming here we're using\ndecimal numbers.",
    "start": "3393277",
    "end": "3398949"
  },
  {
    "text": "Why not?\nHopefully this are not yet sorted.\nWe'd like to sort them.",
    "start": "3398949",
    "end": "3407016"
  },
  {
    "text": "The first thing we do is take\nthe least significant digit,",
    "start": "3407016",
    "end": "3414201"
  },
  {
    "text": "sort by the least significant\ndigit.",
    "start": "3414201",
    "end": "3420000"
  },
  {
    "text": "And whenever we have equal\nelements like these two nines, we preserve their relative\norder.",
    "start": "3420000",
    "end": "3427833"
  },
  {
    "text": "So, 329 is going to remain\nabove 839. It doesn't matter here because\nwe're doing the first sort,",
    "start": "3427833",
    "end": "3436112"
  },
  {
    "text": "but in general we're always\nusing a stable sorting algorithm.\nWhen we sort by this column,",
    "start": "3436112",
    "end": "3443857"
  },
  {
    "text": "first we get the zero,\nso that's 720, then we get 5,\n355.",
    "start": "3443857",
    "end": "3450000"
  },
  {
    "text": "Then we get 6,\n436. Stop me if I make a mistake.\nThen we get the 7s,",
    "start": "3450000",
    "end": "3456914"
  },
  {
    "text": "and we preserve the order.\nHere it happens to be the right",
    "start": "3456914",
    "end": "3462978"
  },
  {
    "text": "order, but it may not be at this\npoint. We haven't even looked at the\nother digits.",
    "start": "3462978",
    "end": "3471489"
  },
  {
    "text": "Then we get 9s,\nthere are two 9s, 329 and 839.\nAll right so far?",
    "start": "3471489",
    "end": "3477978"
  },
  {
    "text": "Good.\nNow we sort by the middle",
    "start": "3477978",
    "end": "3483061"
  },
  {
    "text": "digit, the next least\nsignificant. And we start out with what\nlooks like the 2s.",
    "start": "3483061",
    "end": "3492489"
  },
  {
    "text": "There is a 2 up here and a 2\ndown here. Of course, we write the first 2\nfirst, 720, then 329.",
    "start": "3492489",
    "end": "3503510"
  },
  {
    "text": "Then we have the 3s,\nso we have 436 and 839.",
    "start": "3503510",
    "end": "3510000"
  },
  {
    "text": "Then we have a bunch of 5s it\nlooks like. Have I missed anyone so far?\nNo.",
    "start": "3510000",
    "end": "3516301"
  },
  {
    "text": "Good.\nWe have three 5s, 355, 457 and 657.\nI like to check that I haven't",
    "start": "3516301",
    "end": "3522426"
  },
  {
    "text": "lost any elements.\nWe have seven here, seven here and seven elements\nhere.",
    "start": "3522426",
    "end": "3528727"
  },
  {
    "text": "Good.\nFinally, we sort by the last digit.\nOne thing to notice,",
    "start": "3528727",
    "end": "3533964"
  },
  {
    "text": "by the way, is before we sorted\nby the last digit --",
    "start": "3533964",
    "end": "3540000"
  },
  {
    "text": "Currently these numbers don't\nresemble sorted order at all.",
    "start": "3540000",
    "end": "3545319"
  },
  {
    "text": "But if you look at everything\nbeyond the digit we haven't yet",
    "start": "3545319",
    "end": "3550822"
  },
  {
    "text": "sorted, so these two digits,\nthat's nice and sorted, 20, 29, 36, 39,\n55, 57, 57.",
    "start": "3550822",
    "end": "3557884"
  },
  {
    "text": "Pretty cool.\nLet's finish it off. We stably sort by the first\ndigit.",
    "start": "3557884",
    "end": "3563846"
  },
  {
    "text": "And the smallest number we get\nis a 3, so we get 329 and then",
    "start": "3563846",
    "end": "3569349"
  },
  {
    "text": "355.\nThen we get some 4s,",
    "start": "3569349",
    "end": "3576858"
  },
  {
    "text": "436 and 457,\nthen we get a 6,",
    "start": "3576858",
    "end": "3585059"
  },
  {
    "text": "657, then a 7,\nand then we have an 8.",
    "start": "3585060",
    "end": "3595606"
  },
  {
    "text": "And check.\nI still have seven elements.",
    "start": "3595606",
    "end": "3601630"
  },
  {
    "text": "Good.\nI haven't lost anyone. And, indeed,\nthey're now in sorted order. And you can start to see why\nthis is working.",
    "start": "3601631",
    "end": "3608097"
  },
  {
    "text": "When I have equal elements\nhere, I have already sorted the suffix.\nLet's write down a proof of",
    "start": "3608097",
    "end": "3613398"
  },
  {
    "text": "that.\nWhat is nice about this algorithm is we're not\npartitioning into bins. We always keep the huge batch\nof elements in one big pile,",
    "start": "3613398",
    "end": "3620970"
  },
  {
    "text": "but we're just going through it\nmultiple times. In general, we sort of need to\ngo through it multiple times.",
    "start": "3620970",
    "end": "3627087"
  },
  {
    "text": "Hopefully not too many times.\nBut let's first argue correctness.\nTo analyze the running time is",
    "start": "3627087",
    "end": "3636019"
  },
  {
    "text": "a little bit tricky here because\nit depends how you partition",
    "start": "3636019",
    "end": "3641751"
  },
  {
    "text": "into digits.\nCorrectness is easy. We just induct on the digit\nposition that we're currently",
    "start": "3641751",
    "end": "3650159"
  },
  {
    "text": "sorting, so let's call that t.\nAnd we can assume by induction",
    "start": "3650159",
    "end": "3655890"
  },
  {
    "text": "that it's sorted beyond digit t.\nThis is our induction",
    "start": "3655891",
    "end": "3662656"
  },
  {
    "text": "hypothesis.\nWe assume that we're sorted on",
    "start": "3662656",
    "end": "3667841"
  },
  {
    "text": "the low-order t - 1 digits.\nAnd then the next thing we do",
    "start": "3667841",
    "end": "3674924"
  },
  {
    "text": "is sort on the t-th digit.\nWe just need to check that",
    "start": "3674924",
    "end": "3681501"
  },
  {
    "text": "things work.\nAnd we restore the induction",
    "start": "3681501",
    "end": "3686561"
  },
  {
    "text": "hypothesis for t instead of t -\n1.",
    "start": "3686561",
    "end": "3692000"
  },
  {
    "text": "When we sort on the t-th digit\nthere are two cases. If we look at any two elements,\nwe want to know whether they're",
    "start": "3692000",
    "end": "3700981"
  },
  {
    "text": "put in the right order.\nIf two elements are the same, let's say they have the same\nt-th digit --",
    "start": "3700981",
    "end": "3709000"
  },
  {
    "text": "This is the tricky case.\nIf they have the same t-th digit then their order should\nnot be changed.",
    "start": "3718000",
    "end": "3725519"
  },
  {
    "text": "So, by stability,\nwe know that they remain in the same order because stability is\nsupposed to preserve things that",
    "start": "3725519",
    "end": "3734400"
  },
  {
    "text": "have the same key that we're\nsorting on. And then, by the induction\nhypothesis, we know that that",
    "start": "3734400",
    "end": "3741920"
  },
  {
    "text": "keeps them in sorted order\nbecause induction hypothesis says that they used to be\nsorted.",
    "start": "3741920",
    "end": "3750000"
  },
  {
    "text": "Adding on this value in the\nfront that's the same in both",
    "start": "3750000",
    "end": "3755369"
  },
  {
    "text": "doesn't change anything so they\nremain sorted. And if they have differing t-th\ndigits --",
    "start": "3755369",
    "end": "3764000"
  },
  {
    "text": "-- then this sorting step will\nput them in the right order.",
    "start": "3774000",
    "end": "3780000"
  },
  {
    "text": "Because that's what sorting\ndoes. This is the most significant\ndigit, so you've got to order",
    "start": "3780000",
    "end": "3788869"
  },
  {
    "text": "them by the t-th digit if they\ndiffer. The rest are irrelevant.\nSo, proof here of correctness",
    "start": "3788870",
    "end": "3797840"
  },
  {
    "text": "is very simple once you know the\nalgorithm. Any questions before we go on?\nGood.",
    "start": "3797840",
    "end": "3805514"
  },
  {
    "text": "We're going to use counting\nsort. We could use any sorting\nalgorithm we want for individual digits, but the only algorithm\nthat we know that runs in less",
    "start": "3805514",
    "end": "3810713"
  },
  {
    "text": "than n lg n time is counting\nsort. So, we better use that one to\nsort of bootstrap and get an even faster and more general\nalgorithm. I just erased the running time.\nCounting sort runs in order k + n time.\nWe need to remember that.",
    "start": "3810713",
    "end": "3816003"
  },
  {
    "text": "And the range of the numbers is\n1 to k or 0 to k - 1.",
    "start": "3816003",
    "end": "3824328"
  },
  {
    "text": "When we sort by a particular\ndigit, we shouldn't use n lg n",
    "start": "3824329",
    "end": "3833616"
  },
  {
    "text": "algorithm because then this\nthing will take n lg n for one",
    "start": "3833616",
    "end": "3842743"
  },
  {
    "text": "round and it's going to have\nmultiple rounds.",
    "start": "3842743",
    "end": "3849787"
  },
  {
    "text": "That's going to be worse than n\nlg n.",
    "start": "3849788",
    "end": "3855552"
  },
  {
    "text": "We're going to use counting\nsort for each round.",
    "start": "3855552",
    "end": "3865000"
  },
  {
    "text": "We use counting sort for each\ndigit. And we know the running time of\ncounting sort here is order k +",
    "start": "3872000",
    "end": "3880125"
  },
  {
    "text": "n .\nBut I don't want to assume that my integers are split into\ndigits for me.",
    "start": "3880125",
    "end": "3886324"
  },
  {
    "text": "That's sort of giving away too\nmuch flexibility. Because if I have some number\nwritten in whatever form it is,",
    "start": "3886324",
    "end": "3895286"
  },
  {
    "text": "probably written in binary,\nI can cluster together some of those bits and call that a\ndigit.",
    "start": "3895287",
    "end": "3904000"
  },
  {
    "text": "Let's think of our numbers as\nbinary. Suppose we have n integers.\nAnd they're in some range.",
    "start": "3904000",
    "end": "3912442"
  },
  {
    "text": "And we want to know how big a\nrange they can be. Let's say, a sort of practical\nway of thinking,",
    "start": "3912442",
    "end": "3921264"
  },
  {
    "text": "you know, we're in a binary\nworld, each integer is b bits",
    "start": "3921264",
    "end": "3926577"
  },
  {
    "text": "long.\nSo, in other words, the range is from 0 to 2b - 1.\nI will assume that my numbers",
    "start": "3926577",
    "end": "3935283"
  },
  {
    "text": "are non-negative.\nIt doesn't make much difference if they're negative,\ntoo.",
    "start": "3935283",
    "end": "3942005"
  },
  {
    "text": "I want to know how big a b I\ncan handle, but I don't want to",
    "start": "3942006",
    "end": "3947515"
  },
  {
    "text": "split into bits as my digits\nbecause then I would have b",
    "start": "3947515",
    "end": "3952650"
  },
  {
    "text": "digits and I would have to do b\nrounds of this algorithm.",
    "start": "3952650",
    "end": "3959000"
  },
  {
    "text": "The number of rounds of this\nalgorithm is the number of digits that I have.\nAnd each one costs me,",
    "start": "3959000",
    "end": "3965754"
  },
  {
    "text": "let's hope, for linear time.\nAnd, indeed, if I use a single bit,\nk = 2. And so this is order n.\nBut then the running time would",
    "start": "3965754",
    "end": "3974428"
  },
  {
    "text": "be order n per round.\nAnd there are b digits, if I consider them to be bits,\norder n times b time.",
    "start": "3974428",
    "end": "3981182"
  },
  {
    "text": "And even if b is something\nsmall like log n, if I have log n bits,\nthen these are numbers between",
    "start": "3981183",
    "end": "3987866"
  },
  {
    "text": "0 and n - 1.\nI already know how to sort numbers between 0 and n - 1 in\nlinear time.",
    "start": "3987866",
    "end": "3996666"
  },
  {
    "text": "Here I'm spending n lg n time,\nso that's no good. Instead, what we're going to do\nis take a bunch of bits and call",
    "start": "3996666",
    "end": "4007549"
  },
  {
    "text": "that a digit,\nthe most bits we can handle with counting sort.\nThe notation will be I split",
    "start": "4007549",
    "end": "4016078"
  },
  {
    "text": "each integer into b/r digits.\nEach r bits long.",
    "start": "4016078",
    "end": "4021847"
  },
  {
    "text": "In other words,\nI think of my number as being in base 2^r.\nAnd I happen to be writing it",
    "start": "4021847",
    "end": "4031086"
  },
  {
    "text": "down in binary,\nbut I cluster together r bits and I get a bunch of digits in\nbase 2^r.",
    "start": "4031086",
    "end": "4040108"
  },
  {
    "text": "And then there are b/ r digits.\nThis b/r is the number of",
    "start": "4040108",
    "end": "4046194"
  },
  {
    "text": "rounds.\nAnd this base -- This is the maximum value I\nhave in one of these digits.",
    "start": "4046195",
    "end": "4054104"
  },
  {
    "text": "It's between 0 and 2^r.\nThis is, in some sense, k for a run of counting sort.",
    "start": "4054104",
    "end": "4060000"
  },
  {
    "text": "What is the running time?\nWell, I have b/r rounds.",
    "start": "4069000",
    "end": "4074673"
  },
  {
    "text": "It's b/r times the running time\nfor a round.",
    "start": "4074673",
    "end": "4080000"
  },
  {
    "text": "Which I have n numbers and my\nvalue of k is 2^r.",
    "start": "4080000",
    "end": "4085830"
  },
  {
    "text": "This is the running time of\ncounting sort,",
    "start": "4085830",
    "end": "4090917"
  },
  {
    "text": "n + k, this is the number of\nrounds, so this is b/r (n+2^r).",
    "start": "4090917",
    "end": "4098235"
  },
  {
    "text": "And I am free to choose r\nhowever I want. What I would like to do is\nminimize this run time over my",
    "start": "4098236",
    "end": "4110146"
  },
  {
    "text": "choices of r.\nAny suggestions on how I might",
    "start": "4110146",
    "end": "4115704"
  },
  {
    "text": "find the minimum running time\nover all choices of r? Techniques, not necessarily\nsolutions.",
    "start": "4115704",
    "end": "4124000"
  },
  {
    "text": "We're not used to this because\nit's asymptomatic, but forget the big O here.\nHow do I minimize a function",
    "start": "4133000",
    "end": "4138287"
  },
  {
    "text": "with respect to one variable?\nTake the derivative, yeah.\nI can take the derivative of",
    "start": "4138288",
    "end": "4143541"
  },
  {
    "text": "this function by r,\ndifferentiate by r, set the derivative equal to 0,\nand that should be a critical",
    "start": "4143541",
    "end": "4150022"
  },
  {
    "text": "point in this function.\nIt turns out this function is unimodal in r and you will find\nthe minimum.",
    "start": "4150022",
    "end": "4156369"
  },
  {
    "text": "We could do that.\nI'm not going to do it because it takes a little bit more work.\nYou should try it at home.",
    "start": "4156369",
    "end": "4163384"
  },
  {
    "text": "It will give you the exact\nminimum, which is good if you know what this constant is.\nDifferentiate with respect to r",
    "start": "4163385",
    "end": "4172284"
  },
  {
    "text": "and set to 0.\nI am going to do it a little bit more intuitively,\nin other words less precisely,",
    "start": "4172284",
    "end": "4179063"
  },
  {
    "text": "but I will still get the right\nanswer. And definitely I will get an\nupper bound because I can choose",
    "start": "4179063",
    "end": "4186210"
  },
  {
    "text": "r to be whatever I want.\nIt turns out this will be the right answer.\nLet's just think about growth",
    "start": "4186210",
    "end": "4193210"
  },
  {
    "text": "in terms of r.\nThere are essentially two terms here.\nI have b/r(n) and I have",
    "start": "4193210",
    "end": "4200024"
  },
  {
    "text": "b/r(2^r).\nNow, b/r(n) would like r to be as big as possible.\nThe bigger r is the number of",
    "start": "4200024",
    "end": "4207364"
  },
  {
    "text": "rounds goes down.\nThis number in front of n, this coefficient in front of n\ngoes down, so I would like r to",
    "start": "4207364",
    "end": "4216138"
  },
  {
    "text": "be big.\nSo, b/r(n) wants r big. However, r cannot be too big.\nThis is saying I want digits",
    "start": "4216138",
    "end": "4223478"
  },
  {
    "text": "that have a lot of bits in them.\nIt cannot be too big because",
    "start": "4223478",
    "end": "4228540"
  },
  {
    "text": "there's 2^r term out here.\nIf this happens to be bigger",
    "start": "4228540",
    "end": "4234465"
  },
  {
    "text": "than n then this will dominate\nin terms of growth of r. This is going to be b times 2\nto the r over r.",
    "start": "4234465",
    "end": "4243182"
  },
  {
    "text": "2 the r is much,\nmuch bigger than r, so it's going to grow much\nfaster is what I mean.",
    "start": "4243182",
    "end": "4250490"
  },
  {
    "text": "And so I really don't want r to\nbe too big for this other term.",
    "start": "4250490",
    "end": "4255949"
  },
  {
    "text": "So, that is b/4(2^r) wants r\nsmall. Provided that this term is\nbigger or equal to this term",
    "start": "4255949",
    "end": "4266684"
  },
  {
    "text": "then I can set r pretty big for\nthat term.",
    "start": "4266684",
    "end": "4271758"
  },
  {
    "text": "What I want is the n to\ndominate the 2^r. Provided I have that then I can\nset r as large as I want.",
    "start": "4271758",
    "end": "4283641"
  },
  {
    "text": "Let's say I want to choose r to\nbe maximum subject to this",
    "start": "4283641",
    "end": "4290697"
  },
  {
    "text": "condition that n is greater than\nor equal to 2^r.",
    "start": "4290697",
    "end": "4298000"
  },
  {
    "text": "This is an upper bound to 2^r,\nand upper bound on r. In other words,\nI want r = lg n.",
    "start": "4298000",
    "end": "4304899"
  },
  {
    "text": "This turns out to be the right\nanswer up to constant factors.",
    "start": "4304899",
    "end": "4309948"
  },
  {
    "text": "There we go.\nAnd definitely choosing r to be lg n will give me an upper bound\non the best running time I could",
    "start": "4309948",
    "end": "4318950"
  },
  {
    "text": "get because I can choose it to\nbe whatever I want.",
    "start": "4318951",
    "end": "4324000"
  },
  {
    "text": "If you differentiate you will\nindeed get the same answer.",
    "start": "4324000",
    "end": "4330564"
  },
  {
    "text": "This was not quite a formal\nargument but close,",
    "start": "4330564",
    "end": "4335956"
  },
  {
    "text": "because the big O is all about\nwhat grows fastest.",
    "start": "4335956",
    "end": "4341699"
  },
  {
    "text": "If we plug in r = lg n we get\nbn/lg n. The n and the 2^r are equal,\nthat's a factor of 2,",
    "start": "4341699",
    "end": "4351780"
  },
  {
    "text": "2 times n, not a big deal.\nIt comes out into the O.",
    "start": "4351780",
    "end": "4358703"
  },
  {
    "text": "We have bn/lg n which is r.\nWe have to think about what",
    "start": "4358704",
    "end": "4364788"
  },
  {
    "text": "this means and translate it in\nterms of range.",
    "start": "4364788",
    "end": "4369859"
  },
  {
    "text": "b was the number of bits in our\nnumber, which corresponds to the",
    "start": "4369859",
    "end": "4376957"
  },
  {
    "text": "range of the number.\nI've got 20 minutes under so",
    "start": "4376957",
    "end": "4383417"
  },
  {
    "text": "far in lecture so I can go 20\nminutes over,",
    "start": "4383417",
    "end": "4388543"
  },
  {
    "text": "right?\nNo, I'm kidding. Almost done.\nLet's say that our numbers,",
    "start": "4388543",
    "end": "4395988"
  },
  {
    "text": "are integers are in the range,\nwe have 0 to 2^b,",
    "start": "4395988",
    "end": "4401723"
  },
  {
    "text": "I'm going to say that it's\nrange 0 to nd. This should be a -1 here.\nIf I have numbers that are",
    "start": "4401724",
    "end": "4413448"
  },
  {
    "text": "between 0 and n^d - 1 where d is\na constant or d is some",
    "start": "4413449",
    "end": "4418632"
  },
  {
    "text": "parameter, so this is a\npolynomial in n, then you work out this running\ntime.",
    "start": "4418632",
    "end": "4425604"
  },
  {
    "text": "It is order dn.\nThis is the way to think about it because now we can compare to\ncounting sort.",
    "start": "4425604",
    "end": "4434179"
  },
  {
    "text": "Counting sort could handle 0 up\nto some constant times d in",
    "start": "4434179",
    "end": "4439644"
  },
  {
    "text": "linear time.\nNow I can handle 0 up to n to some constant power in linear\ntime.",
    "start": "4439644",
    "end": "4447434"
  },
  {
    "text": "This is if d = order 1 then we\nget a linear time sorting algorithm.\nAnd that is cool as long as d",
    "start": "4447434",
    "end": "4455543"
  },
  {
    "text": "is at most lg n.\nAs long as your numbers are at most n lg n then we have\nsomething that beats our n lg n",
    "start": "4455543",
    "end": "4464255"
  },
  {
    "text": "sorting algorithms.\nAnd this is pretty nice. Whenever you know that your\nnumbers are order log end bits",
    "start": "4464255",
    "end": "4473099"
  },
  {
    "text": "long we are happy,\nand you get some smooth tradeoff there.\nFor example, if we have our 32 bit numbers\nand we split into let's say",
    "start": "4473099",
    "end": "4482018"
  },
  {
    "text": "eight bit chunks then we'll only\nhave to do four rounds each linear time and we have just 256\nworking space.",
    "start": "4482018",
    "end": "4489570"
  },
  {
    "text": "We were doing four rounds for\n32 bit numbers. If you use n lg n algorithm,\nyou're going to be doing lg n",
    "start": "4489570",
    "end": "4496835"
  },
  {
    "text": "rounds through your numbers.\nn is like 2000, and that's at least 11 rounds\nfor example.",
    "start": "4496835",
    "end": "4503515"
  },
  {
    "text": "You would think this algorithm\nis going to be much faster for small numbers.\nUnfortunately,",
    "start": "4503515",
    "end": "4509037"
  },
  {
    "text": "counting sort is not very good\non a cache. In practice,\nrating sort is not that fast an",
    "start": "4509038",
    "end": "4514311"
  },
  {
    "text": "algorithm unless your numbers\nare really small. Something like quicksort can do\nbetter.",
    "start": "4514311",
    "end": "4519584"
  },
  {
    "text": "It's sort of shame,\nbut theoretically this is very beautiful.\nAnd there are contexts where",
    "start": "4519584",
    "end": "4525045"
  },
  {
    "text": "this is really the right way to\nsort things. I will mention finally that if\nyou have arbitrary integers that",
    "start": "4525045",
    "end": "4534352"
  },
  {
    "text": "are one word length long.\nHere we're assuming that there are b bits in a word and we have\nsome depends indirectly on b",
    "start": "4534352",
    "end": "4544280"
  },
  {
    "text": "here.\nBut, in general, if you have a bunch of integers\nand they're one word length",
    "start": "4544280",
    "end": "4551099"
  },
  {
    "text": "long, and you can manipulate a\nword in constant time, then the best algorithm we know\nfor sorting runs in n times",
    "start": "4551100",
    "end": "4560596"
  },
  {
    "text": "square root of lg lg n time\nexpected. It is a randomized algorithm.\nWe're not going to cover that",
    "start": "4560597",
    "end": "4568719"
  },
  {
    "text": "algorithm in this class.\nIt's rather complicated. I didn't even cover it in\nAdvanced Algorithms when I",
    "start": "4568719",
    "end": "4575068"
  },
  {
    "text": "taught it.\nIf you want something easier, you can get n times square root\nof lg lg n time worst-case.",
    "start": "4575068",
    "end": "4581289"
  },
  {
    "text": "And that paper is almost\nreadable. I have taught that in Advanced\nAlgorithms. If you're interested in this\nkind of stuff,",
    "start": "4581289",
    "end": "4588729"
  },
  {
    "text": "take Advanced Algorithms next\nfall. It's one of the follow-ons to\nthis class.",
    "start": "4588729",
    "end": "4594552"
  },
  {
    "text": "These are much more complicated\nalgorithms, but it gives you some sense.\nYou can even break out of the",
    "start": "4594552",
    "end": "4600870"
  },
  {
    "text": "dependence on b,\nas long as you know that b is at most a word.\nAnd I will stop there unless",
    "start": "4600870",
    "end": "4606486"
  },
  {
    "text": "there are any questions.\nThen see you Wednesday.",
    "start": "4606486",
    "end": "4609618"
  }
]