[
  {
    "start": "0",
    "end": "20000"
  },
  {
    "start": "0",
    "end": "20970"
  },
  {
    "start": "20000",
    "end": "351000"
  },
  {
    "text": "PROFESSOR: OK, well, we've been\nlooking at streams, this signal processing way of putting\nsystems together.",
    "start": "20970",
    "end": "28869"
  },
  {
    "text": "And remember, the key idea is\nthat we decouple the apparent",
    "start": "28870",
    "end": "35200"
  },
  {
    "text": "order of events in our programs\nfrom the actual order of events in the computer.",
    "start": "35200",
    "end": "40635"
  },
  {
    "text": "And that means that we can start\ndealing with very long streams and only having\nto generate",
    "start": "40635",
    "end": "46340"
  },
  {
    "text": "the elements on demand. That sort of on-demand\ncomputation is built into the stream's data structure.",
    "start": "46340",
    "end": "51560"
  },
  {
    "text": " So if we have a very long\nstream, we only compute what we need.",
    "start": "51560",
    "end": "58040"
  },
  {
    "text": "The things only get computed\nwhen we actually ask for them. Well, what are examples? Are they actually\nasking for them?",
    "start": "58040",
    "end": "64800"
  },
  {
    "text": "For instance, we might ask for\nthe n-th element of a stream.",
    "start": "64800",
    "end": "71050"
  },
  {
    "start": "71050",
    "end": "76360"
  },
  {
    "text": "Here's a procedure that\ncomputes the n-th element of a stream. An integer n, the n-th element\nof some stream s, and we just",
    "start": "76360",
    "end": "83810"
  },
  {
    "text": "recursively walk down\nthe stream. And the end of 0, we\ncompute the head. Otherwise, it's the n-th the\nminus 1 element of the tail of",
    "start": "83810",
    "end": "92350"
  },
  {
    "text": "the stream. Those two are just like for\nLisp, but the difference is those elements aren't going to\nget computed until we walk",
    "start": "92350",
    "end": "99580"
  },
  {
    "text": "down, taking successive n-ths. So that's one way\nthat the stream elements might get forced.",
    "start": "99580",
    "end": "105909"
  },
  {
    "text": "And another way, here's\na little procedure that prints a stream. We say print a stream, so\nto print a stream s.",
    "start": "105910",
    "end": "114150"
  },
  {
    "text": "Well, what do we do? We print the head of the stream,\nand that will cause the head to be computed.",
    "start": "114150",
    "end": "119719"
  },
  {
    "text": "And then we recursively print\nstream the tail of the stream.",
    "start": "119720",
    "end": "124990"
  },
  {
    "text": "And if we're already done,\nmaybe we have to return something about the\nmessage done. OK, and then so if you make a\nstream, you could say here's",
    "start": "124990",
    "end": "132250"
  },
  {
    "text": "the stream, this very\nlong stream. And then you say print the\nstream, and the elements of the stream will get computed\nsuccessively as that print",
    "start": "132250",
    "end": "140550"
  },
  {
    "text": "calls them. They won't get all computed\ninitially. So in this way, we can deal with\nsome very long streams.",
    "start": "140550",
    "end": "150189"
  },
  {
    "text": "Well, how long can\na stream be? Well, it can be infinitely\nlong.",
    "start": "150190",
    "end": "156360"
  },
  {
    "text": "Let's look at an example\nhere on the computer. I could walk up to this\ncomputer, and I could say--",
    "start": "156360",
    "end": "163400"
  },
  {
    "text": "how about we'll define the\nstream of integers starting",
    "start": "163400",
    "end": "172269"
  },
  {
    "text": "with some number N, the stream\nof positive integers starting with some number n.",
    "start": "172270",
    "end": "177420"
  },
  {
    "text": " And that's cons-stream\nof n onto the",
    "start": "177420",
    "end": "192989"
  },
  {
    "text": "integers from one more.",
    "start": "192990",
    "end": "199010"
  },
  {
    "start": "199010",
    "end": "204680"
  },
  {
    "text": "So there are the integers.  Then I could say let's\nget all the integers.",
    "start": "204680",
    "end": "211500"
  },
  {
    "text": " define the stream of integers\nto be the integers",
    "start": "211500",
    "end": "223330"
  },
  {
    "text": "starting with 1. ",
    "start": "223330",
    "end": "228840"
  },
  {
    "text": "And now if I say something like\nwhat's the what's the",
    "start": "228840",
    "end": "234950"
  },
  {
    "text": "20th integer.",
    "start": "234950",
    "end": "242995"
  },
  {
    "text": "So it's 21 because we\nstart counting at 0. Or I can do more complicated\nthings.",
    "start": "242995",
    "end": "249450"
  },
  {
    "text": "Let me to define a little\npredicate here.  How about define no-seven.",
    "start": "249450",
    "end": "259160"
  },
  {
    "text": "It's going to test an\ninteger, and it's going to say it's not. ",
    "start": "259160",
    "end": "268820"
  },
  {
    "text": "I take the remainder of\nx by 7, I don't get 0.",
    "start": "268820",
    "end": "278175"
  },
  {
    "text": " And then I could say define the\nintegers with no sevens to",
    "start": "278175",
    "end": "290360"
  },
  {
    "text": "be, take all the integers and\nfilter them to have no sevens.",
    "start": "290360",
    "end": "298884"
  },
  {
    "start": "298885",
    "end": "311570"
  },
  {
    "text": "So now I've got the stream of\nall the integers that are not divisible by seven. So if I say what's the 100th\ninteger and the list not",
    "start": "311570",
    "end": "325419"
  },
  {
    "text": "divisible by seven, I get 117. Or if I'd like to say well,\ngee, what are all of them?",
    "start": "325420",
    "end": "335270"
  },
  {
    "text": "So I could say print stream\nall these integers with no seven, it goes off printing.",
    "start": "335270",
    "end": "341700"
  },
  {
    "text": " You may have to wait a very\nlong time to see them all.",
    "start": "341700",
    "end": "347070"
  },
  {
    "start": "347070",
    "end": "352670"
  },
  {
    "start": "351000",
    "end": "495000"
  },
  {
    "text": "Well, you can start asking, gee,\nis it really true that this data structure with\nthe integers is",
    "start": "352670",
    "end": "359080"
  },
  {
    "text": "really all the integers? And let me draw a picture of\nthat program I just wrote. ",
    "start": "359080",
    "end": "368170"
  },
  {
    "text": "Here's the definition of the\nintegers again that I just typed in, Right it's a cons of\nthe first integer under the",
    "start": "368170",
    "end": "374850"
  },
  {
    "text": "integer starting with the\nrest. Now, we can make a picture of that and see\nwhat it looks like. ",
    "start": "374850",
    "end": "382720"
  },
  {
    "text": "Conceptually, what I have is\na box that's the integer starting with n. It takes in some number\nn, and it's going to",
    "start": "382720",
    "end": "391900"
  },
  {
    "text": "return a stream of-- this infinite stream of all\nintegers starting with n.",
    "start": "391900",
    "end": "397705"
  },
  {
    "text": "And what do I do? Well, this is an integers\nfrom box. ",
    "start": "397705",
    "end": "405070"
  },
  {
    "text": "What's it got in it? Well, it takes in this n,\nand it increments it.",
    "start": "405070",
    "end": "414110"
  },
  {
    "text": " And then it puts the result\ninto recursively another",
    "start": "414110",
    "end": "421920"
  },
  {
    "text": "integer's from box.  It takes the result of that and\nthe original n and puts",
    "start": "421920",
    "end": "430630"
  },
  {
    "text": "those together with a cons\nand forms a stream. So that's a picture of\nthat program I wrote.",
    "start": "430630",
    "end": "438530"
  },
  {
    "text": "Let's see. These kind of diagrams we\nfirst saw drawn by Peter Henderson, the same guy who\ndid the Escher language. We call them Henderson diagrams.\nAnd the convention",
    "start": "438530",
    "end": "446170"
  },
  {
    "text": "here is that you put these\nthings together. And the solid lines are things\ncoming out are streams, and",
    "start": "446170",
    "end": "453260"
  },
  {
    "text": "dotted lines are initial\nvalues going in. So this one has the shape of--",
    "start": "453260",
    "end": "459440"
  },
  {
    "text": "it takes in some integer,\nsome initial value, and outputs a stream. ",
    "start": "459440",
    "end": "466410"
  },
  {
    "text": "Again, you can ask. Is that data structure integers really all the integers?",
    "start": "466410",
    "end": "472340"
  },
  {
    "text": "Or is it is something that's\ncleverly arranged so that whenever you look for an integer\nyou find it there?",
    "start": "472340",
    "end": "478190"
  },
  {
    "text": "That's sort of a philosophical\nquestion, right? If something is there whenever\nyou look, is it really there or not?",
    "start": "478190",
    "end": "484449"
  },
  {
    "text": "It's sort of the same sense\nin which the money in your savings account is\nin the bank. ",
    "start": "484450",
    "end": "492380"
  },
  {
    "text": "Well, let me do another\nexample.",
    "start": "492380",
    "end": "499830"
  },
  {
    "start": "495000",
    "end": "614000"
  },
  {
    "text": "Gee, we started the course\nwith an algorithm from Alexandria, which was Heron of\nAlexandria's algorithm for",
    "start": "499830",
    "end": "505910"
  },
  {
    "text": "computing the square root. Let's take a look at another\nAlexandrian algorithm.",
    "start": "505910",
    "end": "512030"
  },
  {
    "text": "This one is Eratosthenes method\nfor computing all of",
    "start": "512030",
    "end": "517860"
  },
  {
    "text": "the primes.  It is called the Sieve\nof Eratosthenes. And what you do is you start\nout, and you list all the",
    "start": "517860",
    "end": "531830"
  },
  {
    "text": "integers, say, starting\nwith 2. And then you take the first\ninteger, and you say, oh, that's prime.",
    "start": "531830",
    "end": "537310"
  },
  {
    "text": "And then you go look at the\nrest, and you cross out all the things divisible by 2. So I cross out this\nand this and this.",
    "start": "537310",
    "end": "545250"
  },
  {
    "text": "This takes a long time because\nI have to do it for all of the integers.",
    "start": "545250",
    "end": "551160"
  },
  {
    "text": "So I go through the entire list\nof integers, crossing the",
    "start": "551160",
    "end": "559680"
  },
  {
    "text": "ones divisible by 2. And now when I finish with all\nof the integers, I go back and",
    "start": "559680",
    "end": "565400"
  },
  {
    "text": "look and say what\nam I left with? Well, the first thing that\nstarts there is 3. So 3 is a prime.",
    "start": "565400",
    "end": "570770"
  },
  {
    "text": "And now I go back through what\nI'm left with, and I cross out all the things divisible by 3. So let's see, 9 and 15 and 21\nand 27 and 33 and so on.",
    "start": "570770",
    "end": "584050"
  },
  {
    "text": "I won't finish. Then I see what I'm left with. And the next one I have is 5.",
    "start": "584050",
    "end": "590860"
  },
  {
    "text": "Now I can through the rest,\nand I find the first one that's divisible by 5. I cross out from the remainder\nall the ones that are",
    "start": "590860",
    "end": "596589"
  },
  {
    "text": "divisible by 5. And I do that, and then I\ngo through and find 7.",
    "start": "596590",
    "end": "601890"
  },
  {
    "text": "Go through all the rest, cross\nout things divisible 7, and I keep doing that forever. And when I'm done, what\nI'm left with is a",
    "start": "601890",
    "end": "608100"
  },
  {
    "text": "list of all the primes. So that's the Sieve\nof Eratosthenes.",
    "start": "608100",
    "end": "615430"
  },
  {
    "start": "614000",
    "end": "750000"
  },
  {
    "text": "Let's look at it as a\ncomputer program. It's a procedure called sieve. ",
    "start": "615430",
    "end": "627910"
  },
  {
    "text": "Now, I just write what I did. I'll say to sieve\nsome stream s.",
    "start": "627910",
    "end": "634510"
  },
  {
    "text": " I'm going to build a stream\nwhose first element is the",
    "start": "634510",
    "end": "641280"
  },
  {
    "text": "head of this. Remember, I always found the\nfirst thing I was left with, and the rest of it is the result\nof taking the tail of",
    "start": "641280",
    "end": "648480"
  },
  {
    "text": "this, filtering it to throw away\nall the things that are",
    "start": "648480",
    "end": "654029"
  },
  {
    "text": "divisible by the head of this,\nand now sieving the result. That's just what I did.",
    "start": "654030",
    "end": "661980"
  },
  {
    "text": "And now to get the infinite\nstream of times, we just sieve all the integers starting\nfrom 2. ",
    "start": "661980",
    "end": "674920"
  },
  {
    "text": "Let's try that. We can actually do it. I typed in the definition of\nsieve before, I hope, so I can",
    "start": "674920",
    "end": "683170"
  },
  {
    "text": "say something like define the\nprimes to be the result of",
    "start": "683170",
    "end": "695339"
  },
  {
    "text": "sieving the integers\nstarting with 2.",
    "start": "695340",
    "end": "701350"
  },
  {
    "start": "701350",
    "end": "706759"
  },
  {
    "text": "So now I've got this\nlist of primes. That's all of the\nprimes, right? So, if for example, what's the\n20th prime in that list?",
    "start": "706760",
    "end": "721010"
  },
  {
    "text": "73. See, and that little pause, it\nwas only at the point when I started asking for\nthe 20th prime is",
    "start": "721010",
    "end": "726500"
  },
  {
    "text": "that it started computing.  Or I can say here let's look\nat all of the primes.",
    "start": "726500",
    "end": "734960"
  },
  {
    "start": "734960",
    "end": "742780"
  },
  {
    "text": "And there it goes computing\nall of the primes. Of course, it will take a while\nagain if I want to look at all of them, so\nlet's stop it.",
    "start": "742780",
    "end": "748569"
  },
  {
    "text": " Let me draw you a\npicture of that. Well, I've got a picture\nof that.",
    "start": "748570",
    "end": "754890"
  },
  {
    "start": "750000",
    "end": "867000"
  },
  {
    "text": "What's that program\nreally look like? Again, some practice with\nthese diagrams, I have a sieve box.",
    "start": "754890",
    "end": "762610"
  },
  {
    "text": "How does sieve work? It takes in a stream. ",
    "start": "762610",
    "end": "768850"
  },
  {
    "text": "It splits off the head\nfrom the tail. And the first thing that's going\nto come out of the sieve is the head of the\noriginal stream.",
    "start": "768850",
    "end": "774970"
  },
  {
    "text": " Then it also takes the\nhead and uses that.",
    "start": "774970",
    "end": "782550"
  },
  {
    "text": "It takes the stream. It filters the tail and uses\nthe head to filter for nondivisibility.",
    "start": "782550",
    "end": "789152"
  },
  {
    "text": "It takes the result of\nnondivisibility and puts it through another sieve box and\nputs the result together.",
    "start": "789152",
    "end": "795130"
  },
  {
    "text": "So you can think of this sieve a\nfilter, but notice that it's an infinitely recursive\nfilter. Because inside the sieve box\nis another sieve box, and",
    "start": "795130",
    "end": "803560"
  },
  {
    "text": "inside that is another sieve\nbox and another sieve box. So you see we start getting\nsome very powerful things.",
    "start": "803560",
    "end": "808960"
  },
  {
    "text": "We're starting to mix this\nsignal processing view of the world with things like recursion\nthat come from",
    "start": "808960",
    "end": "815760"
  },
  {
    "text": "computation. And there are all sorts of\ninteresting things you can do that are like this.",
    "start": "815760",
    "end": "820970"
  },
  {
    "text": "All right, any questions? ",
    "start": "820970",
    "end": "828189"
  },
  {
    "text": "OK, let's take a break. ",
    "start": "828190",
    "end": "868820"
  },
  {
    "start": "867000",
    "end": "1399000"
  },
  {
    "text": "Well, we've been looking at a\ncouple of examples of stream programming. ",
    "start": "868820",
    "end": "874790"
  },
  {
    "text": "All the stream procedures that\nwe've looked at so far have",
    "start": "874790",
    "end": "879920"
  },
  {
    "text": "the same kind of character. We've been writing these\nrecursive procedures that kind of generate these stream\nelements one at a time and put",
    "start": "879920",
    "end": "886819"
  },
  {
    "text": "them together in cons-streams.\nSo we've been thinking a lot about generators. There's another way to think\nabout stream processing, and",
    "start": "886820",
    "end": "893970"
  },
  {
    "text": "that's to focus not on programs\nthat sort of process these elements as you walk down\nthe stream, but on things",
    "start": "893970",
    "end": "900840"
  },
  {
    "text": "that kind of process the\nstreams all at once.",
    "start": "900840",
    "end": "907350"
  },
  {
    "text": "To show you what I mean, let\nme start by defining two procedures that will\ncome in handy.",
    "start": "907350",
    "end": "912410"
  },
  {
    "text": "The first one's called add\nstreams. Add streams takes two",
    "start": "912410",
    "end": "917579"
  },
  {
    "text": "streams: s1 and s2. and. It's going to produce a stream\nwhose elements are the are the",
    "start": "917580",
    "end": "927240"
  },
  {
    "text": "corresponding sums. We just sort\nof add them element-wise.",
    "start": "927240",
    "end": "932970"
  },
  {
    "text": "If either stream is empty, we\njust return the other one. Otherwise, we're going to make a\nnew stream whose head is the",
    "start": "932970",
    "end": "942000"
  },
  {
    "text": "sum of the two heads and whose\ntail is the result of recursively adding the tails.",
    "start": "942000",
    "end": "950090"
  },
  {
    "text": "So that will produce the\nelement-wise sum of two streams. And then another useful\nthing to have",
    "start": "950090",
    "end": "955830"
  },
  {
    "text": "around is scale stream. Scale stream takes some constant\nnumber in a stream s",
    "start": "955830",
    "end": "964150"
  },
  {
    "text": "and is going to produce the\nstream of elements of s multiplied by this constant.",
    "start": "964150",
    "end": "969710"
  },
  {
    "text": "And that's easy, that's just\na map of the function of an element that multiplies it by\nthe constant, and we map that",
    "start": "969710",
    "end": "977040"
  },
  {
    "text": "down the stream.  So given those two, let me\nshow you what I mean by",
    "start": "977040",
    "end": "983630"
  },
  {
    "text": "programs that operate on\nstreams all at once. Let's look at this.",
    "start": "983630",
    "end": "990199"
  },
  {
    "text": "Suppose I write this. I say define-- ",
    "start": "990200",
    "end": "996618"
  },
  {
    "text": "I'll call it ones-- to be cons-stream\nof 1 onto ones.",
    "start": "996618",
    "end": "1012190"
  },
  {
    "text": " What's that? That's going to be an infinite\nstream of ones because the",
    "start": "1012190",
    "end": "1020530"
  },
  {
    "text": "first thing is 1. And the tail of it is a thing\nwhose first thing is 1 and",
    "start": "1020530",
    "end": "1027819"
  },
  {
    "text": "whose tail is a thing whose\nfirst thing is 1 and so on and so on and so on. So that's an infinite\nstream of ones.",
    "start": "1027819",
    "end": "1035130"
  },
  {
    "text": "And now using that, let me give\nyou another definition of the integers. We can define the\nintegers to be--",
    "start": "1035130",
    "end": "1048270"
  },
  {
    "text": "well, the first integer we'll\ntake to be 1, this cons-stream of 1 onto the element-wise sum\nonto add streams of the",
    "start": "1048270",
    "end": "1062789"
  },
  {
    "text": "integers to ones.",
    "start": "1062790",
    "end": "1068270"
  },
  {
    "start": "1068270",
    "end": "1074950"
  },
  {
    "text": "The integers are a thing whose\nfirst element is 1, and the",
    "start": "1074950",
    "end": "1081240"
  },
  {
    "text": "rest of them you get by taking\nthose integers and incrementing each one by one.",
    "start": "1081240",
    "end": "1086639"
  },
  {
    "text": "So the second element of the\nintegers is the first element of the integers incremented\nby one.",
    "start": "1086640",
    "end": "1093940"
  },
  {
    "text": "And the rest of that is the\nnext one, and the third element of that is the same as\nthe first element of the tail",
    "start": "1093940",
    "end": "1099690"
  },
  {
    "text": "of the integers incremented by\none, which is the same as the",
    "start": "1099690",
    "end": "1105049"
  },
  {
    "text": "first element of the original\nintegers incremented by one and incremented by one\nagain and so on.",
    "start": "1105050",
    "end": "1111250"
  },
  {
    "text": " That looks pretty suspicious.",
    "start": "1111250",
    "end": "1116309"
  },
  {
    "text": "See, notice that it works\nbecause of delay. See, this looks like--",
    "start": "1116310",
    "end": "1122480"
  },
  {
    "text": "let's take a look at ones. This looks like it couldn't even\nbe processed because it's suddenly saying in order to know\nwhat ones is, I say it's",
    "start": "1122480",
    "end": "1129410"
  },
  {
    "text": "cons-stream of something\nonto ones. The reason that works is because\nof that very sneaky hidden delay in there.",
    "start": "1129410",
    "end": "1135250"
  },
  {
    "text": "Because what this really is,\nremember, cons-stream is just an abbreviation.",
    "start": "1135250",
    "end": "1140290"
  },
  {
    "text": "This really is cons of\n1 onto delay of ones.",
    "start": "1140290",
    "end": "1148785"
  },
  {
    "text": " So how does that work?",
    "start": "1148785",
    "end": "1155500"
  },
  {
    "text": "You say I'm going\nto define ones. First I see what ones is\nsupposed to be defined as.",
    "start": "1155500",
    "end": "1160700"
  },
  {
    "text": "Well, ones is supposed to be\ndefined as a cons whose first",
    "start": "1160700",
    "end": "1167320"
  },
  {
    "text": "part is 1 and whose second part\nis, well, it's a promise to compute something that\nI don't worry about yet.",
    "start": "1167320",
    "end": "1172710"
  },
  {
    "text": "So it doesn't bother me that\nat the point I do this definition, ones\nisn't defined. Having run the definition\nnow, ones is defined.",
    "start": "1172710",
    "end": "1180670"
  },
  {
    "text": "So that when I go and look at\nthe tail of it, it's defined. It's very sneaky.",
    "start": "1180670",
    "end": "1186590"
  },
  {
    "text": "And an integer is\nthe same way. I can refer to integers here\nbecause hidden way down--",
    "start": "1186590",
    "end": "1192059"
  },
  {
    "text": "because of this cons-stream. It's the cons-stream of 1\nonto something that I don't worry that yet. So I don't look at it, and I\ndon't notice that integers",
    "start": "1192060",
    "end": "1198970"
  },
  {
    "text": "isn't defined at the point\nwhere I try and run the definition. ",
    "start": "1198970",
    "end": "1206320"
  },
  {
    "text": "OK, let me draw a picture of\nthat integers thing because it still maybe seems a\nlittle bit shaky.",
    "start": "1206320",
    "end": "1212429"
  },
  {
    "text": "What do I do? I've got the stream of ones, and\nthat sort of comes in and",
    "start": "1212430",
    "end": "1223490"
  },
  {
    "text": "goes into an adder that's\ngoing to be this add streams thing. ",
    "start": "1223490",
    "end": "1229309"
  },
  {
    "text": "And that goes in-- that's going to put\nout the integers.",
    "start": "1229310",
    "end": "1235760"
  },
  {
    "text": " And the other thing that goes\ninto the adder here is the",
    "start": "1235760",
    "end": "1245280"
  },
  {
    "text": "integer, so there's a little\nfeedback loop. And all I need to start it off\nis someplace I've got a stick",
    "start": "1245280",
    "end": "1251930"
  },
  {
    "text": "that initial 1. ",
    "start": "1251930",
    "end": "1257100"
  },
  {
    "text": "In a real signal processing\nthing, this might be a delay element with that was\ninitialized to 1.",
    "start": "1257100",
    "end": "1262910"
  },
  {
    "text": "But there's a picture of\nthat ones program. And in fact, that looks\na lot like--",
    "start": "1262910",
    "end": "1269860"
  },
  {
    "text": "if you've seen real signal block\ndiagram things, that looks a lot like accumulators,\nfinite state accumulators.",
    "start": "1269860",
    "end": "1277360"
  },
  {
    "text": "And in fact, we can modify this\na little bit to change this into something that\nintegrates a stream or a",
    "start": "1277360",
    "end": "1285700"
  },
  {
    "text": "finite state accumulator,\nhowever you like to think about it. So instead of the ones coming\nin and getting out the integers, what we'll do is say\nthere's a stream s coming in,",
    "start": "1285700",
    "end": "1295460"
  },
  {
    "text": "and we're going to get out the\nintegral of this, successive",
    "start": "1295460",
    "end": "1303210"
  },
  {
    "text": "values of that, and it looks\nalmost the same. The only thing we're going to\ndo is when s comes in here,",
    "start": "1303210",
    "end": "1309220"
  },
  {
    "text": "before we just add it in we're\ngoing to multiply it by some number dt.",
    "start": "1309220",
    "end": "1314260"
  },
  {
    "text": " And now what we have\nhere, this is exactly the same thing.",
    "start": "1314260",
    "end": "1320000"
  },
  {
    "text": "We have a box, which\nis an integrator. ",
    "start": "1320000",
    "end": "1329790"
  },
  {
    "text": "And it takes in a stream s, and\ninstead of 1 here, we can",
    "start": "1329790",
    "end": "1335250"
  },
  {
    "text": "put the additional value\nfor the integral. And that one looks very much\nlike a signal processing block",
    "start": "1335250",
    "end": "1343940"
  },
  {
    "text": "diagram program. In fact, here's the procedure\nthat looks exactly like that. ",
    "start": "1343940",
    "end": "1351490"
  },
  {
    "text": "Find the integral of a stream. So an integral's going to take\na stream and produce a new stream, and it takes\nin an initial value",
    "start": "1351490",
    "end": "1359559"
  },
  {
    "text": "and some time constant. And what do we do? Well, we internally define this\nthing int, and we make",
    "start": "1359560",
    "end": "1365560"
  },
  {
    "text": "this internal name so\nwe can feed it back, loop it around itself. And int is defined to be\nsomething that starts out at",
    "start": "1365560",
    "end": "1372380"
  },
  {
    "text": "the initial value, and\nthe rest of it is",
    "start": "1372380",
    "end": "1378500"
  },
  {
    "text": "gotten by adding together. We take our input stream,\nscale it by dt,",
    "start": "1378500",
    "end": "1383980"
  },
  {
    "text": "and add that to int. And now we'll return from all\nthat the value of integral is",
    "start": "1383980",
    "end": "1389130"
  },
  {
    "text": "this thing int. And we use this internal\ndefinition syntax so we could write a little internal\ndefinition",
    "start": "1389130",
    "end": "1394670"
  },
  {
    "text": "that refers to itself. ",
    "start": "1394670",
    "end": "1401880"
  },
  {
    "start": "1399000",
    "end": "1531000"
  },
  {
    "text": "Well, there are all sorts\nof things we can do. Let's try this one. how about the Fibonacci\nnumbers.",
    "start": "1401880",
    "end": "1406895"
  },
  {
    "text": "You can say define fibs.",
    "start": "1406895",
    "end": "1412625"
  },
  {
    "text": " Well, what are the Fibonacci\nnumbers?",
    "start": "1412625",
    "end": "1417985"
  },
  {
    "text": "They're something that starts\nout with 0, and",
    "start": "1417985",
    "end": "1428840"
  },
  {
    "text": "the next one is 1. ",
    "start": "1428840",
    "end": "1436260"
  },
  {
    "text": "And the rest of the Fibonacci\nnumbers are gotten by adding",
    "start": "1436260",
    "end": "1446470"
  },
  {
    "text": "the Fibonacci numbers\nto their own tail. ",
    "start": "1446470",
    "end": "1457570"
  },
  {
    "text": "There's a definition of\nthe Fibonacci numbers. How does that work? Well, we start off, and someone\nsays compute for us",
    "start": "1457570",
    "end": "1465520"
  },
  {
    "text": "the Fibonacci numbers, and we're\ngoing to tell you it starts out with 0 and 1.",
    "start": "1465520",
    "end": "1471870"
  },
  {
    "text": " And everything after the 0 and\n1 is gotten by summing two",
    "start": "1471870",
    "end": "1480320"
  },
  {
    "text": "streams. One is the fibs\nthemselves, and the other one is the tail of the fibs.",
    "start": "1480320",
    "end": "1485830"
  },
  {
    "text": " So if I know that these start\nout with 0 and 1, I know that",
    "start": "1485830",
    "end": "1492430"
  },
  {
    "text": "the fibs now start out with 0\nand 1, and the tail of the fibs start out with 1.",
    "start": "1492430",
    "end": "1498360"
  },
  {
    "text": "So as soon as I know that, I\nknow that the next one here is 0 plus 1 is 1, and that tells me\nthat the next one here is 1",
    "start": "1498360",
    "end": "1504600"
  },
  {
    "text": "and the next one here is 1. And as soon as I know that, I\nknow that the next one is 2. So the next one here is 2 and\nthe next one here is 2.",
    "start": "1504600",
    "end": "1511700"
  },
  {
    "text": "And this is 3.  This one goes to 3,\nand this is 5.",
    "start": "1511700",
    "end": "1518530"
  },
  {
    "text": "So it's a perfectly sensible\ndefinition. It's a one-line definition. And again, I could walk over to\nthe computer and type that",
    "start": "1518530",
    "end": "1525590"
  },
  {
    "text": "in, exactly that, and then say\nprint stream the Fibonacci numbers, and they all\ncome flying out. ",
    "start": "1525590",
    "end": "1532790"
  },
  {
    "start": "1531000",
    "end": "1566000"
  },
  {
    "text": "See, this is a lot\nlike learning about recursion again. Instead of thinking that\nrecursive procedures, we have",
    "start": "1532790",
    "end": "1541350"
  },
  {
    "text": "recursively defined\ndata objects. But that shouldn't surprise you\nat all, because by now,",
    "start": "1541350",
    "end": "1548150"
  },
  {
    "text": "you should be coming to really\nbelieve that there's no difference really between\nprocedures and data. In fact, in some sense, the\nunderlying streams are",
    "start": "1548150",
    "end": "1555549"
  },
  {
    "text": "procedures sitting there,\nalthough we don't think of them that way. So the fact that we have\nrecursive procedures, well,",
    "start": "1555550",
    "end": "1560909"
  },
  {
    "text": "then it should be natural that\nwe have recursive data, too. ",
    "start": "1560910",
    "end": "1567840"
  },
  {
    "start": "1566000",
    "end": "1805000"
  },
  {
    "text": "OK, well, this is\nall pretty neat. Unfortunately, there are\nproblems that streams aren't",
    "start": "1567840",
    "end": "1573120"
  },
  {
    "text": "going to solve. Let me show you one of them. See, in the same way, let's\nimagine that we're building an",
    "start": "1573120",
    "end": "1581190"
  },
  {
    "text": "analog computer to solve some\ndifferential equation like,",
    "start": "1581190",
    "end": "1586809"
  },
  {
    "text": "say, we want to solve the\nequation y prime dy dt is y",
    "start": "1586810",
    "end": "1593720"
  },
  {
    "text": "squared, and I'm going to give\nyou some initial value. I'll tell you y of 0 equals 1. ",
    "start": "1593720",
    "end": "1601060"
  },
  {
    "text": "Let's say dt is equal\nto something. ",
    "start": "1601060",
    "end": "1606769"
  },
  {
    "text": "Now, in the old days, people\nbuilt analog computers to solve these kinds of things. And the way you do that\nis really simple.",
    "start": "1606770",
    "end": "1613020"
  },
  {
    "text": "You get yourself an integrator,\nlike that one, an",
    "start": "1613020",
    "end": "1621030"
  },
  {
    "text": "integrator box. And we put in the initial\nvalue y of 0 is 1.",
    "start": "1621030",
    "end": "1628530"
  },
  {
    "text": "And now if we feed something\nin and get something out, we'll say, gee, what we're\ngetting out is the answer.",
    "start": "1628530",
    "end": "1633890"
  },
  {
    "text": "And what we're going to feed in\nis the derivative, and the derivative is supposed to be\nthe square of the answer.",
    "start": "1633890",
    "end": "1641490"
  },
  {
    "text": "So if we take these values and\nmap using square, and if I",
    "start": "1641490",
    "end": "1651070"
  },
  {
    "text": "feed this around, that's how I\nbuild a block diagram for an",
    "start": "1651070",
    "end": "1658750"
  },
  {
    "text": "analog computer that solves this\ndifferential equation. Now, what we'd like to do is\nwrite a stream program that",
    "start": "1658750",
    "end": "1665630"
  },
  {
    "text": "looks exactly like that. And what do I mean exactly\nlike that? Well, I'd say define y to be the\nintegral of dy starting at",
    "start": "1665630",
    "end": "1688100"
  },
  {
    "text": "1 with 0.001 as a time step.",
    "start": "1688100",
    "end": "1693789"
  },
  {
    "text": "And I'd like to say\nthat says this. And then I'd like to say, well,\ndy is gotten by mapping",
    "start": "1693790",
    "end": "1699635"
  },
  {
    "text": "the square along y. So define dy to be map\nsquare along y.",
    "start": "1699635",
    "end": "1713510"
  },
  {
    "text": "So there's a stream description\nof this analog computer, and unfortunately,\nit doesn't work.",
    "start": "1713510",
    "end": "1721410"
  },
  {
    "text": "And you can see why it doesn't\nwork because when I come in and say define y to be the\nintegral of dy, it says, oh,",
    "start": "1721410",
    "end": "1729549"
  },
  {
    "text": "the integral of y-- huh? Oh, that's undefined. So I can't write this definition\nbefore I've",
    "start": "1729550",
    "end": "1736860"
  },
  {
    "text": "written this one. On the other hand, if I try and\nwrite this one first, it says, oh, I define y to be the\nmap of square along y?",
    "start": "1736860",
    "end": "1743580"
  },
  {
    "text": "Oh, that's not defined yet. So I can't write this one first,\nand I can't write that one first. So I can't quite\nplay this game.",
    "start": "1743580",
    "end": "1751580"
  },
  {
    "start": "1751580",
    "end": "1757559"
  },
  {
    "text": "Well, is there a way out? See, we can do that with ones. See, over here, we did this\nthing ones, and we were able",
    "start": "1757560",
    "end": "1767820"
  },
  {
    "text": "to define ones in terms of ones\nbecause of this delay that was built inside because\ncons-stream had a delay.",
    "start": "1767820",
    "end": "1774770"
  },
  {
    "text": "Now, why's it sensible? Why's it sensible for\ncons-stream to be built with this delay?",
    "start": "1774770",
    "end": "1780730"
  },
  {
    "text": "The reason is that cons-stream\ncan do a useful thing without looking at its tail.",
    "start": "1780730",
    "end": "1785950"
  },
  {
    "text": "See, if I say this is\ncons-stream of 1 onto something without knowing\nanything about something, I",
    "start": "1785950",
    "end": "1792340"
  },
  {
    "text": "know that the stream\nstarts off with 1. That's why it was sensible\nto build something like cons-stream.",
    "start": "1792340",
    "end": "1797910"
  },
  {
    "text": " So we put a delay in there,\nand that allows us to have this sort of self-referential\ndefinition.",
    "start": "1797910",
    "end": "1806320"
  },
  {
    "start": "1805000",
    "end": "2047000"
  },
  {
    "text": "Well, integral is a little\nbit the same way. See, notice for an\nintegral, I can--",
    "start": "1806320",
    "end": "1814620"
  },
  {
    "text": "let's go back and look at\nintegral for a second. See, notice integral, it makes\nsense to say what's the first",
    "start": "1814620",
    "end": "1824010"
  },
  {
    "text": "thing in the integral without\nknowing the stream that you're integrating. Because the first thing in the\nintegral is always going to be",
    "start": "1824010",
    "end": "1830770"
  },
  {
    "text": "the initial value that\nyou're handed. So integral could be a procedure\nlike cons-stream.",
    "start": "1830770",
    "end": "1837090"
  },
  {
    "text": "You could define it, and then\neven before it knows what it's supposed to be integrating, it\nknows enough to say what its",
    "start": "1837090",
    "end": "1844360"
  },
  {
    "text": "initial value is. So we can make a smarter\nintegral, which is aha, you're going to give me a stream to\nintegrate and an initial",
    "start": "1844360",
    "end": "1851390"
  },
  {
    "text": "value, but I really don't have\nto look at that stream that I'm supposed to integrate until\nyou ask me to work down",
    "start": "1851390",
    "end": "1856430"
  },
  {
    "text": "the stream. In other words, integral can be\nlike cons-stream, and you can expect that there's\ngoing to be a",
    "start": "1856430",
    "end": "1862690"
  },
  {
    "text": "delay around its integrand. And we can write that. Here's a procedure\nthat does that. Another version of integral,\nand this is almost like the",
    "start": "1862690",
    "end": "1869810"
  },
  {
    "text": "previous one, except the stream\nit's going to get in is going to expect to be\na delayed object.",
    "start": "1869810",
    "end": "1877110"
  },
  {
    "text": "And how does this\nintegral work? Well, the little thing it's\ngoing to define inside of itself says on the cons-stream,\nthe initial value",
    "start": "1877110",
    "end": "1885350"
  },
  {
    "text": "is the initial value, but only\ninside of that cons-stream, and remember, there's going to\nbe a hidden delay inside here.",
    "start": "1885350",
    "end": "1892300"
  },
  {
    "text": " Only inside of that cons-stream\nwill I start",
    "start": "1892300",
    "end": "1898260"
  },
  {
    "text": "looking at what the actual\ndelayed object is. So my answer is the first\nthing's the initial value.",
    "start": "1898260",
    "end": "1905970"
  },
  {
    "text": "If anybody now asks me for my\ntail, at that point, I'm going to force that delayed object--",
    "start": "1905970",
    "end": "1912680"
  },
  {
    "text": "and I'll call that s-- and I do the add streams. So\nthis is an integral which is",
    "start": "1912680",
    "end": "1918300"
  },
  {
    "text": "sort of like cons-stream. It's not going to actually try\nand see what you handed it as",
    "start": "1918300",
    "end": "1924120"
  },
  {
    "text": "the thing to integrate\nuntil you look past the first element. ",
    "start": "1924120",
    "end": "1930120"
  },
  {
    "text": "And if we do that and we can\nmake this work, all we have to do here is say define y to the\nintegral of delay of y, of",
    "start": "1930120",
    "end": "1944120"
  },
  {
    "text": "delay of dy. So y is going to be the integral\nof delay of dy",
    "start": "1944120",
    "end": "1953380"
  },
  {
    "text": "starting at 1, and now\nthis will work. Because I type in the definition\nof y, and that says, oh, I'm supposed to use\nthe integral of something I",
    "start": "1953380",
    "end": "1960840"
  },
  {
    "text": "don't care about right now\nbecause it's a delay. And these things, now\nyou define dy.",
    "start": "1960840",
    "end": "1966320"
  },
  {
    "text": "Now, y is defined. So when I define dy, it can\nsee that definition for y.",
    "start": "1966320",
    "end": "1971700"
  },
  {
    "text": "Everything is now started up. Both streams have their\nfirst element. And then when I start mapping\ndown, looking at successive",
    "start": "1971700",
    "end": "1977030"
  },
  {
    "text": "elements, both y and\ndy are defined. So there's a little game you\ncan play that goes a little",
    "start": "1977030",
    "end": "1982820"
  },
  {
    "text": "bit beyond just using the delay\nthat's hidden inside streams. Questions?",
    "start": "1982820",
    "end": "1988659"
  },
  {
    "text": " OK, let's take a break.",
    "start": "1988660",
    "end": "1994428"
  },
  {
    "start": "1994428",
    "end": "2047299"
  },
  {
    "start": "2047000",
    "end": "2162000"
  },
  {
    "text": "Well, just before the break,\nI'm not sure if you noticed it, but something nasty\nstarted to happen.",
    "start": "2047300",
    "end": "2054320"
  },
  {
    "text": "We've been going along with the\nstreams and divorcing time",
    "start": "2054320",
    "end": "2061040"
  },
  {
    "text": "in the programs from time in\nthe computers, and all that divorcing got hidden inside the\nstreams. And then at the",
    "start": "2061040",
    "end": "2067840"
  },
  {
    "text": "very end, we saw that sometimes\nin order to really take advantage of this\nmethod, you have to pull out other delays.",
    "start": "2067840",
    "end": "2074388"
  },
  {
    "text": "You have to write some explicit\ndelays that are not hidden inside that\ncons-stream. And I did a very simple example\nwith differential",
    "start": "2074389",
    "end": "2081399"
  },
  {
    "text": "equations, but if you have some\nvery complicated system with all kinds of self-loops,\nit becomes very, very",
    "start": "2081400",
    "end": "2087309"
  },
  {
    "text": "difficult to see where you\nneed those delays. And if you leave them out by\nmistake, it becomes very, very",
    "start": "2087310",
    "end": "2092388"
  },
  {
    "text": "difficult to see why the thing\nmaybe isn't working. So that's kind of mess, that\nby getting this power and",
    "start": "2092389",
    "end": "2100330"
  },
  {
    "text": "allowing us to use delay,\nwe end up with some very complicated programming\nsometimes, because it can't all be hidden inside\nthe streams.",
    "start": "2100330",
    "end": "2108690"
  },
  {
    "text": "Well, is there a way\nout of that? Yeah, there is a way\nout of that. We could change the language so\nthat all procedures acted",
    "start": "2108690",
    "end": "2117230"
  },
  {
    "text": "like cons-stream, so that every\nprocedure automatically",
    "start": "2117230",
    "end": "2122320"
  },
  {
    "text": "has an implicit delay around\nits arguments. And what would that mean?",
    "start": "2122320",
    "end": "2127520"
  },
  {
    "text": "That would mean when you call\na procedure, the arguments wouldn't get evaluated. Instead, they'd only be\nevaluated when you need them,",
    "start": "2127520",
    "end": "2134820"
  },
  {
    "text": "so they might be passed off to\nsome other procedure, which wouldn't evaluate them either. So all these procedures would\nbe passing promises around.",
    "start": "2134820",
    "end": "2142150"
  },
  {
    "text": "And then finally maybe when you\nfinally got down to having to look at the value of\nsomething that was handed to a",
    "start": "2142150",
    "end": "2148040"
  },
  {
    "text": "primitive operator would you\nactually start calling in all those promises. If we did that, since everything\nwould have a",
    "start": "2148040",
    "end": "2154400"
  },
  {
    "text": "uniform delay, then you wouldn't\nhave to write any explicit delays, because it\nwould be automatically built",
    "start": "2154400",
    "end": "2160369"
  },
  {
    "text": "into the way the\nlanguage works. Or another way to say that,\ntechnically what I'm",
    "start": "2160370",
    "end": "2165869"
  },
  {
    "start": "2162000",
    "end": "2491000"
  },
  {
    "text": "describing is what's called-- if we did that, our language\nwould be so-called",
    "start": "2165870",
    "end": "2172720"
  },
  {
    "text": "normal-order evaluation language\nversus what we've",
    "start": "2172720",
    "end": "2182270"
  },
  {
    "text": "actually been working\nwith, which is called applicative order-- ",
    "start": "2182270",
    "end": "2191240"
  },
  {
    "text": "versus applicative-order\nevaluation. And remember the substitution\nmodel for applicative order.",
    "start": "2191240",
    "end": "2196835"
  },
  {
    "text": "It says when you go and evaluate\na combination, you find the values of\nall the pieces.",
    "start": "2196835",
    "end": "2203589"
  },
  {
    "text": "You evaluate the arguments and\nthen you substitute them in the body of the procedure. Normal order says no,\ndon't do that.",
    "start": "2203590",
    "end": "2209890"
  },
  {
    "text": "What you do is effectively\nsubstitute in the body of the procedure, but instead of\nevaluating the arguments, you",
    "start": "2209890",
    "end": "2216640"
  },
  {
    "text": "just put a promise to\ncompute them there. Or another way to say that is\nyou take the expressions for the arguments, if you like,\nand substitute them in the",
    "start": "2216640",
    "end": "2223370"
  },
  {
    "text": "body of the procedure and go on,\nand never really simplify anything until you get down\nto a primitive operator.",
    "start": "2223370",
    "end": "2229340"
  },
  {
    "text": "So that would be a normal-order\nlanguage. Well, why don't we do that? Because if we did, we'd get all\nthe advantages of delayed",
    "start": "2229340",
    "end": "2236550"
  },
  {
    "text": "evaluation with none\nof the mess. In fact, if we did that and\ncons was just a delayed",
    "start": "2236550",
    "end": "2242250"
  },
  {
    "text": "procedure, that would make cons\nthe same as cons-stream. We wouldn't need streams of\nall because lists would automatically be streams. That's\nhow lists would behave,",
    "start": "2242250",
    "end": "2250675"
  },
  {
    "text": "and data structures would\nbehave that way. Everything would behave\nthat way, right? You'd never really do any\ncomputation until you actually",
    "start": "2250675",
    "end": "2258510"
  },
  {
    "text": "needed the answer. You wouldn't have to worry\nabout all these explicit annoying delays.",
    "start": "2258510",
    "end": "2264790"
  },
  {
    "text": "Well, why don't we do that? First of all, I should say\npeople do do that. There's some very beautiful\nlanguages.",
    "start": "2264790",
    "end": "2271850"
  },
  {
    "text": "One of the very nicest is a\nlanguage called Miranda, which is developed by David Turner\nat the University of Kent.",
    "start": "2271850",
    "end": "2280710"
  },
  {
    "text": "And that's how this\nlanguage works. It's a normal-order language and\nits data structures, which",
    "start": "2280710",
    "end": "2286430"
  },
  {
    "text": "look like lists, are actually\nstreams. And you write ordinary procedures in Miranda,\nand they do these",
    "start": "2286430",
    "end": "2291710"
  },
  {
    "text": "prime things and eight\nqueens things, just without anything special. It's all built in there.",
    "start": "2291710",
    "end": "2297790"
  },
  {
    "text": "But there's a price.  Remember how we got here.",
    "start": "2297790",
    "end": "2303170"
  },
  {
    "text": "We're decoupling time\nin the programs from time in the machines. And if we put delay, that sort\nof decouples it everywhere,",
    "start": "2303170",
    "end": "2310400"
  },
  {
    "text": "not just in streams. Remember\nwhat we're trying to do. We're trying to think about\nprogramming as a way to",
    "start": "2310400",
    "end": "2316900"
  },
  {
    "text": "specify processes. And if we give up too much time,\nour language becomes more elegant, but it becomes a\nlittle bit less expressive.",
    "start": "2316900",
    "end": "2327030"
  },
  {
    "text": "There are certain distinctions\nthat we can't draw. One of them, for instance,\nis iteration.",
    "start": "2327030",
    "end": "2333980"
  },
  {
    "text": "Remember this old procedure,\niterative factorial, that we looked at quite a\nlong time ago.",
    "start": "2333980",
    "end": "2341230"
  },
  {
    "text": "Iterative factorial had a thing,\nand it said there was an internal procedure, and there\nwas a state which was a",
    "start": "2341230",
    "end": "2346289"
  },
  {
    "text": "product and a counter,\nand we iterate that going around the loop.",
    "start": "2346290",
    "end": "2352119"
  },
  {
    "text": "And we said that was an\niterative procedure because it didn't build up state. And the reason it didn't build\nup state is because this iter",
    "start": "2352120",
    "end": "2359630"
  },
  {
    "text": "that's called is just passing\nthese things around to itself. Or in the substitution model,\nyou could see in the",
    "start": "2359630",
    "end": "2366130"
  },
  {
    "text": "substitution model that Jerry\ndid, that in an iterative procedure, that state doesn't\nhave to grow.",
    "start": "2366130",
    "end": "2371660"
  },
  {
    "text": "And in fact, we said\nit doesn't, so this is an iteration. But now think about this exact\nsame text if we had a",
    "start": "2371660",
    "end": "2377890"
  },
  {
    "text": "normal-order language. What would happen is this\nwould no longer be an",
    "start": "2377890",
    "end": "2384230"
  },
  {
    "text": "iterative procedure? And if you really think about\nthe details of the substitution model, which I'm\nnot going to do here, this",
    "start": "2384230",
    "end": "2391460"
  },
  {
    "text": "expression would grow. Why would it grow? It's because when iter calls\nitself, it calls itself with",
    "start": "2391460",
    "end": "2396740"
  },
  {
    "text": "this product. If it's a normal-order language,\nthat multiplication is not going to get done.",
    "start": "2396740",
    "end": "2402510"
  },
  {
    "text": "That's going to say I'm to call\nmyself with a promise to compute this product. And now iter goes\naround again.",
    "start": "2402510",
    "end": "2409760"
  },
  {
    "text": "And I'm going to call myself\nwith a promise to compute this product where now one of the\none factors is a promise.",
    "start": "2409760",
    "end": "2418400"
  },
  {
    "text": "And I call myself again. And if you write out the\nsubstitution model for that iterative process, you'll see\nexactly the same growth in",
    "start": "2418400",
    "end": "2426430"
  },
  {
    "text": "state, all those promises that\nare getting remembered that have to get called in\nat the very end.",
    "start": "2426430",
    "end": "2431790"
  },
  {
    "text": "So one of the disadvantages\nis that you can't really express iteration.",
    "start": "2431790",
    "end": "2436980"
  },
  {
    "text": "Maybe that's a little\ntheoretical reason why not, but in fact, people who are\ntrying to write real operating",
    "start": "2436980",
    "end": "2443510"
  },
  {
    "text": "systems in these languages are\nrunning into exactly these types of problems. Like it's\nperfectly possible to",
    "start": "2443510",
    "end": "2451650"
  },
  {
    "text": "implement a text editor in\nlanguages like these. But after you work a while, you\nsuddenly have 3 megabytes",
    "start": "2451650",
    "end": "2458830"
  },
  {
    "text": "of stuff, which is-- I guess they call them the\ndragging tail problem of",
    "start": "2458830",
    "end": "2464470"
  },
  {
    "text": "people who are looking at these,\nof promises that sort of haven't been called in\nbecause you couldn't quite express an iteration.",
    "start": "2464470",
    "end": "2470230"
  },
  {
    "text": "And one of the research\nquestions in these kinds of languages are figuring out the\nright compiler technology to",
    "start": "2470230",
    "end": "2477930"
  },
  {
    "text": "get rid of the so-called\ndragging tails. It's not simple.",
    "start": "2477930",
    "end": "2483940"
  },
  {
    "text": "But there's another kind of more\nstriking issue about why you just don't go ahead\nand make your",
    "start": "2483940",
    "end": "2490100"
  },
  {
    "text": "language normal order. And the reason is that\nnormal-order evaluation and",
    "start": "2490100",
    "end": "2497440"
  },
  {
    "text": "side effects just don't mix. They just don't go together\nvery well.",
    "start": "2497440",
    "end": "2505350"
  },
  {
    "text": "Somehow, you can't-- it's sort of you can't\nsimultaneously go around",
    "start": "2505350",
    "end": "2511500"
  },
  {
    "text": "trying to model objects with\nlocal state and change and at the same time do these\nnormal-order tricks of",
    "start": "2511500",
    "end": "2518520"
  },
  {
    "text": "de-coupling time. Let me just show you\na really simple example, very, very simple.",
    "start": "2518520",
    "end": "2523790"
  },
  {
    "text": "Suppose we had a normal-order\nlanguage. And I'm going to start\nout in this language.",
    "start": "2523790",
    "end": "2529550"
  },
  {
    "text": "This is now normal order. I'm going to define x to be 0. It's just some variable\nI'll initialize.",
    "start": "2529550",
    "end": "2535750"
  },
  {
    "text": "And now I'm going to define this\nlittle funny function, which is an identity function.",
    "start": "2535750",
    "end": "2542640"
  },
  {
    "text": "And what it does, it keeps track\nof the last time you called it using x. ",
    "start": "2542640",
    "end": "2551620"
  },
  {
    "text": "So the identity of n just\nreturns n, but it sets x to be n.",
    "start": "2551620",
    "end": "2556760"
  },
  {
    "text": "And now I'll define a little\nincrement function, which is a very little, simple scenario.",
    "start": "2556760",
    "end": "2562580"
  },
  {
    "text": "Now, imagine I'm interacting\nwith this in the normal-order language, and I type\nthe following. I say define y to be increment\nthe identity function of 3, so",
    "start": "2562580",
    "end": "2572940"
  },
  {
    "text": "y is going to be 4.  Now, I say what's x?",
    "start": "2572940",
    "end": "2579520"
  },
  {
    "text": "Well, x should have been the\nvalue that was remembered last when I called the identity\nfunction.",
    "start": "2579520",
    "end": "2584710"
  },
  {
    "text": "So you'd expect to say,\nwell, x is 3 at this point, but it's not. Because when I defined y here,\nwhat I really defined y to be",
    "start": "2584710",
    "end": "2593460"
  },
  {
    "text": "increment of a promise\nto do this thing. So I didn't look at y,\nso that identity",
    "start": "2593460",
    "end": "2599050"
  },
  {
    "text": "function didn't get run. So if I type in this definition\nand look at x, I'm",
    "start": "2599050",
    "end": "2604070"
  },
  {
    "text": "going to get 0.  Now, if I go look at y and say\nwhat's y, say y is 4, looking",
    "start": "2604070",
    "end": "2613120"
  },
  {
    "text": "at y, that very active looking\nat y caused the identity function to be run.",
    "start": "2613120",
    "end": "2618342"
  },
  {
    "text": "And now x will get\nremembered as 3. So here x will be 0. Here, x will be 3. That's a tiny, little, simple\nscenario, but you can see what",
    "start": "2618342",
    "end": "2627890"
  },
  {
    "text": "kind of a mess that's going to\nmake for debugging interactive programs when you have\nnormal-order evaluation.",
    "start": "2627890",
    "end": "2637099"
  },
  {
    "text": "It's very confusing. But it's very confusing for a\nvery deep reason, which is",
    "start": "2637100",
    "end": "2643200"
  },
  {
    "text": "that the whole idea of putting\nin delays is that you throw away time.",
    "start": "2643200",
    "end": "2649780"
  },
  {
    "text": "That's why we can have these\ninfinite processes. Since we've thrown away time, we\ndon't have to wait for them to run, right?",
    "start": "2649780",
    "end": "2657790"
  },
  {
    "text": "We decouple the order of events\nin the computer from what we write in our programs.\nBut when we talk about state",
    "start": "2657790",
    "end": "2663730"
  },
  {
    "text": "and set and change, that's\nexactly what we do want control of.",
    "start": "2663730",
    "end": "2668760"
  },
  {
    "text": "So it's almost as if there's\nthis fundamental contradiction in what you want.",
    "start": "2668760",
    "end": "2674570"
  },
  {
    "text": "And that brings us back to these\nsort of philosophical mutterings about what is it that\nyou're trying to model",
    "start": "2674570",
    "end": "2680720"
  },
  {
    "text": "and how do you look\nat the world. Or sometimes this is called\nthe debate over functional",
    "start": "2680720",
    "end": "2685890"
  },
  {
    "start": "2684000",
    "end": "3122000"
  },
  {
    "text": "programming. ",
    "start": "2685890",
    "end": "2693569"
  },
  {
    "text": "A so-called purely functional\nlanguage is one that just doesn't have any side effects.",
    "start": "2693570",
    "end": "2700440"
  },
  {
    "text": "Since you have no side effects,\nthere's no assignment operator, so there are no\nterrible consequences of it.",
    "start": "2700440",
    "end": "2706359"
  },
  {
    "text": "You can use a substitution-like\nthing. Programs really are like\nmathematics and not like models in the real\nworld, not like",
    "start": "2706360",
    "end": "2712640"
  },
  {
    "text": "objects in the real world. There are a lot of\nwonderful things about functional languages. Since there's no time, you never\nhave any synchronization",
    "start": "2712640",
    "end": "2719240"
  },
  {
    "text": "problems. And if you want to put\nsomething into a parallel algorithm, you can run the\npieces of that parallel",
    "start": "2719240",
    "end": "2726819"
  },
  {
    "text": "processing any way you want. There's just never any\nsynchronization to worry that, and it's a very congenial\nenvironment for doing this.",
    "start": "2726820",
    "end": "2733640"
  },
  {
    "text": "The price is you give\nup assignment. ",
    "start": "2733640",
    "end": "2739060"
  },
  {
    "text": "So an advocate of a functional\nlanguage would say, gee, that's just a tiny\nprice to pay.",
    "start": "2739060",
    "end": "2744520"
  },
  {
    "text": "You probably shouldn't\nuse assignment most of the time anyway. And if you just give up\nassignment, you can be in this much, much nicer world than\nthis place with objects.",
    "start": "2744520",
    "end": "2754190"
  },
  {
    "text": "Well, what's the rejoinder\nto that? Remember how we got\ninto this mess.",
    "start": "2754190",
    "end": "2760300"
  },
  {
    "text": "We started trying to model\nthings that had local state. So remember Jerry's random\nnumber generator.",
    "start": "2760300",
    "end": "2766839"
  },
  {
    "text": "There was this random number\ngenerator that had some little state in it to compute the next\nrandom number and the",
    "start": "2766840",
    "end": "2772290"
  },
  {
    "text": "next random number and the\nnext random number. And we wanted to hide that state\naway from the Cesaro",
    "start": "2772290",
    "end": "2777830"
  },
  {
    "text": "compute part process, and that's\nwhy we needed set. We wanted to package that\nstated modularly.",
    "start": "2777830",
    "end": "2784070"
  },
  {
    "text": "Well, a functional programming\nperson would say, well, you're just all wet. I mean, you can write\na perfectly good modular program.",
    "start": "2784070",
    "end": "2789840"
  },
  {
    "text": "It's just you're thinking\nabout modularity wrong. You're hung up in this next\nrandom number and the next",
    "start": "2789840",
    "end": "2795420"
  },
  {
    "text": "random number and the\nnext random number. Why don't you just say let's\nwrite a program. Let's write an enumerator\nwhich just generates an",
    "start": "2795420",
    "end": "2802990"
  },
  {
    "text": "infinite stream of\nrandom numbers. ",
    "start": "2802990",
    "end": "2809010"
  },
  {
    "text": "We can sort of have that stream\nall at once, and that's going to be our source\nof random numbers.",
    "start": "2809010",
    "end": "2814540"
  },
  {
    "text": "And then if you like, you can\nput that through some sort of processor, which is-- I don't know-- a Cesaro test, and that\ncan do what it wants.",
    "start": "2814540",
    "end": "2826880"
  },
  {
    "text": "And what would come out of there\nwould be a stream of",
    "start": "2826880",
    "end": "2836319"
  },
  {
    "text": "successive approximations\nto pi.",
    "start": "2836320",
    "end": "2848140"
  },
  {
    "text": "So as we looked further down\nthis stream, we'd tug on this Cesaro thing, and it\nwould pull out more",
    "start": "2848140",
    "end": "2854420"
  },
  {
    "text": "and more random numbers. And the further and further we\nlook down the stream, the better an approximation\nwe'd get to pi.",
    "start": "2854420",
    "end": "2859720"
  },
  {
    "text": "And it would do exactly the same\nas the other computation, except we're thinking about\nthe modularity different. We're saying imagine we had all\nthose infinite streams of",
    "start": "2859720",
    "end": "2866359"
  },
  {
    "text": "random numbers all at once. You can see the details of this\nprocedure in the book.",
    "start": "2866360",
    "end": "2873859"
  },
  {
    "text": "Similarly, there are other\nthings that we tend to get locked into on this one and that\none and the next one and",
    "start": "2873860",
    "end": "2880730"
  },
  {
    "text": "the next one, which don't\nhave to be that way. Like you might think about like\na banking system, which",
    "start": "2880730",
    "end": "2887930"
  },
  {
    "text": "is a very simple idea. Imagine we have a program\nthat sort of represents a bank account. ",
    "start": "2887930",
    "end": "2898810"
  },
  {
    "text": "The bank account might\nhave in it-- if we looked at this in a sort\nof message-passing view of the",
    "start": "2898810",
    "end": "2906020"
  },
  {
    "text": "world, we'd say a bank account\nis an object that has some local state in there, which\nis the balance, say.",
    "start": "2906020",
    "end": "2911510"
  },
  {
    "text": " And a user using this system\ncomes and sends a transaction",
    "start": "2911510",
    "end": "2917640"
  },
  {
    "text": "request. So the user sends a\ntransaction request, like deposit some money, and the\nbank account maybe--",
    "start": "2917640",
    "end": "2923970"
  },
  {
    "text": "let's say the bank account\nalways responds with what the current balance is. The user says let's deposits\nsome money, and the bank",
    "start": "2923970",
    "end": "2930360"
  },
  {
    "text": "account sends back a message\nwhich is the balance. And the user says deposit some\nmore, and the bank account",
    "start": "2930360",
    "end": "2937970"
  },
  {
    "text": "sends back a message. And just like the random number\ngenerator, you'd say, gee, we would like to use set.",
    "start": "2937970",
    "end": "2943200"
  },
  {
    "text": "We'd like to have balance be a\npiece of local state inside this bank account because we\nwant to separate the state of the user from the state\nof the bank account.",
    "start": "2943200",
    "end": "2949570"
  },
  {
    "text": " Well, that's the\nmessage-processing view.",
    "start": "2949570",
    "end": "2956420"
  },
  {
    "text": "There's a stream view with that\nthing, which does the same thing without any\nset or side effects.",
    "start": "2956420",
    "end": "2962740"
  },
  {
    "text": "And the idea is again we don't\nthink about anything having",
    "start": "2962740",
    "end": "2969380"
  },
  {
    "text": "local state. We think about the bank account\nas something that's going to process a stream\nof transaction requests.",
    "start": "2969380",
    "end": "2978640"
  },
  {
    "text": "So think about this bank account\nnot as something that goes message by message, but\nsomething that takes in a",
    "start": "2978640",
    "end": "2984510"
  },
  {
    "text": "stream of transaction\nrequests like maybe successive deposit announced. 1, 2, 2, 4, those might be\nsuccessive amounts to deposit.",
    "start": "2984510",
    "end": "2995940"
  },
  {
    "text": "And then coming out of\nit is the successive balances 1, 3, 5, 9.",
    "start": "2995940",
    "end": "3003770"
  },
  {
    "text": "So we think of the bank account\nnot as something that has state, but something that\nacts sort of on the infinite",
    "start": "3003770",
    "end": "3009970"
  },
  {
    "text": "stream of requests. But remember, we've\nthrown away time. So what we can do is if the\nuser's here, we can have this",
    "start": "3009970",
    "end": "3017950"
  },
  {
    "text": "infinite stream of requests\nbeing generated one at a time coming from the user and this\ntransaction stream coming back",
    "start": "3017950",
    "end": "3027000"
  },
  {
    "text": "on a printer being printed\none at a time. And if we drew a little line\nhere, right there to the user,",
    "start": "3027000",
    "end": "3033850"
  },
  {
    "text": "the user couldn't tell\nthat this system doesn't have state.",
    "start": "3033850",
    "end": "3039559"
  },
  {
    "text": "It looks just like the\nother one, but there's no state in there. ",
    "start": "3039560",
    "end": "3045119"
  },
  {
    "text": "And by the way, just to show\nyou, here's an actual implementation of this-- we'll\ncall it make deposit account",
    "start": "3045120",
    "end": "3052240"
  },
  {
    "text": "because you can only deposit. It takes an initial balance and\nthen a stream of deposits",
    "start": "3052240",
    "end": "3057430"
  },
  {
    "text": "you might make. And what is it? Well, it's just cons-stream of\nthe balance onto make a new",
    "start": "3057430",
    "end": "3064580"
  },
  {
    "text": "account stream whose initial\nbalance is the old balance plus the first thing in the\ndeposit stream and make",
    "start": "3064580",
    "end": "3074020"
  },
  {
    "text": "deposit account works on the\nrest of which is the tail of the deposit stream. So there's sort of a very\ntypical message-passing,",
    "start": "3074020",
    "end": "3084650"
  },
  {
    "text": "object-oriented thing\nthat's done without side effects at all. There are very many things\nyou can do this way.",
    "start": "3084650",
    "end": "3092250"
  },
  {
    "text": "Well, can you do everything\nwithout assignment? Can everybody go over to purely\nfunctional languages?",
    "start": "3092250",
    "end": "3100049"
  },
  {
    "text": "Well, we don't know, but there\nseem to be places where purely functional programming\nbreaks down.",
    "start": "3100050",
    "end": "3108099"
  },
  {
    "text": "Where it starts hurting is\nwhen you have things like this, but you also mix it up\nwith the other things that we",
    "start": "3108100",
    "end": "3113520"
  },
  {
    "text": "had to worry that, which are\nobjects and sharing and two independent agents\nbeing the same.",
    "start": "3113520",
    "end": "3118850"
  },
  {
    "text": "So under a typical one, suppose\nyou want to extend this bank account. So here's a bank account.",
    "start": "3118850",
    "end": "3124210"
  },
  {
    "start": "3122000",
    "end": "3319000"
  },
  {
    "start": "3124210",
    "end": "3132220"
  },
  {
    "text": "Bank accounts take in a stream\nof transaction requests and put out streams of, say,\nbalances or responses to that.",
    "start": "3132220",
    "end": "3138780"
  },
  {
    "text": "But suppose you want to model\nthe fact that this is a joint bank account between two\nindependent people.",
    "start": "3138780",
    "end": "3146090"
  },
  {
    "text": "So suppose there are two people,\nsay, Bill and Dave,",
    "start": "3146090",
    "end": "3151890"
  },
  {
    "text": "who have a joint bank account.  How would you model this? Well, Bill puts out a stream of\ntransaction requests, and",
    "start": "3151890",
    "end": "3160460"
  },
  {
    "text": "Dave puts out a stream of\ntransaction requests, and somehow, they have to merge\ninto this bank account.",
    "start": "3160460",
    "end": "3165880"
  },
  {
    "text": "So what you might do is write\na little stream processing thing called merge, which sort\nof takes these, merges them",
    "start": "3165880",
    "end": "3178660"
  },
  {
    "text": "together, produces a single\nstream for the bank account. Now they're both talking to\nthe same bank account. That's all great, but how\ndo you write merge?",
    "start": "3178660",
    "end": "3186600"
  },
  {
    "text": "What's this procedure merge? You want to do something\nthat's reasonable.",
    "start": "3186600",
    "end": "3192760"
  },
  {
    "text": "Your first guess might be\nto say, well, we'll take alternate requests from Bill and\nDave. But what happens if",
    "start": "3192760",
    "end": "3200049"
  },
  {
    "text": "suddenly in the middle of this\nthing, Dave goes away on vacation for two years? Then Bill's sort of stuck.",
    "start": "3200050",
    "end": "3207690"
  },
  {
    "text": "So what you want to do is--\nwell, it's hard to describe. What you want to do is what\npeople call fair merge.",
    "start": "3207690",
    "end": "3213380"
  },
  {
    "start": "3213380",
    "end": "3218410"
  },
  {
    "text": "The idea of fair merge is it\nsort of should do them alternately, but if there's\nnothing waiting here, it",
    "start": "3218410",
    "end": "3223930"
  },
  {
    "text": "should take one twice. Notice I can't even say that\nwithout talking about time. ",
    "start": "3223930",
    "end": "3231300"
  },
  {
    "text": "So one of the other active\nresearcher areas in functional languages is inventing little\nthings like fair merge and",
    "start": "3231300",
    "end": "3240480"
  },
  {
    "text": "maybe some others, which will\ntake the places where I used to need side effects and objects\nand sort of hide them",
    "start": "3240480",
    "end": "3248049"
  },
  {
    "text": "away in some very well-defined\nmodules of the system so that all the problems of assignment\ndon't sort of leak out all",
    "start": "3248050",
    "end": "3254430"
  },
  {
    "text": "over the system but are captured\nin some fairly well-understood things. ",
    "start": "3254430",
    "end": "3260780"
  },
  {
    "text": "More generally, I think what\nyou're seeing is that we're running across what I think\nis a very basic problem in",
    "start": "3260780",
    "end": "3265960"
  },
  {
    "text": "computer science, which is how\nto define languages that somehow can talk about delayed\nevaluation, but also be able",
    "start": "3265960",
    "end": "3276240"
  },
  {
    "text": "to reflect this view\nthat there are objects in the world. How do we somehow get both? And I think that's a\nvery hard problem.",
    "start": "3276240",
    "end": "3283040"
  },
  {
    "text": "And it may be that it's a very\nhard problem that has almost nothing to do with computer\nscience, that it really is a",
    "start": "3283040",
    "end": "3289260"
  },
  {
    "text": "problem having to do with two\nvery incompatible ways of looking at the world. OK, questions?",
    "start": "3289260",
    "end": "3295090"
  },
  {
    "start": "3295090",
    "end": "3317556"
  },
  {
    "text": "AUDIENCE: You mentioned\nearlier that once you introduce assignment, the\ngeneral rule for using the",
    "start": "3317556",
    "end": "3323930"
  },
  {
    "start": "3319000",
    "end": "3599000"
  },
  {
    "text": "substitution model\nis you can't. Unless you're very careful,\nyou can't. PROFESSOR: Right. AUDIENCE: Is there a set of\ntechniques or a set of",
    "start": "3323930",
    "end": "3332550"
  },
  {
    "text": "guidelines for localizing the\neffects of assignment so that the very careful becomes\ndefined?",
    "start": "3332550",
    "end": "3340300"
  },
  {
    "text": "PROFESSOR: I don't know. Let me think.",
    "start": "3340300",
    "end": "3345430"
  },
  {
    "text": "Well, certainly, there was an\nassignment inside memo proc, but that was sort\nof hidden away.",
    "start": "3345430",
    "end": "3351480"
  },
  {
    "text": "It ended up not making\nany difference. Part of the reason for that is\nonce this thing triggered that",
    "start": "3351480",
    "end": "3357385"
  },
  {
    "text": "it had run and gotten\nan answer, that answer will never change. So that was sort of a\none-time assignment. So one very general thing you\ncan do is if you only do",
    "start": "3357385",
    "end": "3365020"
  },
  {
    "text": "what's called a one-time\nassignment and never change anything, then you\ncan do better.",
    "start": "3365020",
    "end": "3371250"
  },
  {
    "text": "One of the problems in this\nmerge thing, people have--",
    "start": "3371250",
    "end": "3377156"
  },
  {
    "text": "let me see if this is right. I think it's true that with\nfair merge, with just fair",
    "start": "3377156",
    "end": "3382910"
  },
  {
    "text": "merge, you can begin effectively\nsimulating assignment in the rest\nof the language.",
    "start": "3382910",
    "end": "3390820"
  },
  {
    "text": "It seems like anything you\ndo to go outside-- I'm not quite sure that's true\nfor fair merge, but it's true",
    "start": "3390820",
    "end": "3396440"
  },
  {
    "text": "of a little bit more\ngeneral things that people have been doing. So it might be that any little\nbit you put in, suddenly if",
    "start": "3396440",
    "end": "3402630"
  },
  {
    "text": "they allow you to build\narbitrary stuff, it's almost as bad as having assignment\naltogether.",
    "start": "3402630",
    "end": "3407970"
  },
  {
    "text": "But that's an area that people\nare thinking about now. AUDIENCE: I guess I don't see\nthe problem here with merge if",
    "start": "3407970",
    "end": "3417010"
  },
  {
    "text": "I call Bill, if Bill is a\nprocedure, then Bill is going to increment the bank account\nor build the list that 's",
    "start": "3417010",
    "end": "3423690"
  },
  {
    "text": "going to put in the\nnext element. If I call Dave twice in a\nrow, that will do that. I'm not sure where fair merge\nhas to be involved.",
    "start": "3423690",
    "end": "3429349"
  },
  {
    "text": "PROFESSOR: The problem\nis imagine these really as people. See, here I have the user who's\ninteracting with this bank account.",
    "start": "3429350",
    "end": "3434850"
  },
  {
    "text": "Put in a request,\nget an answer. Put in a request,\nget an answer. AUDIENCE: Right. PROFESSOR: But if the only way\nI can process request is to",
    "start": "3434850",
    "end": "3440859"
  },
  {
    "text": "alternate them from\ntwo people-- AUDIENCE: Well, why would\nyou alternate them? PROFESSOR: Why don't I? AUDIENCE: Yes.",
    "start": "3440860",
    "end": "3446140"
  },
  {
    "text": "Why do you? PROFESSOR: Think of them\nas real people, right? This guy might go\naway for a year. And you're sitting here at the\nbank account window, and you",
    "start": "3446140",
    "end": "3452700"
  },
  {
    "text": "can't put in two requests\nbecause it's waiting for this guy. AUDIENCE: Why does it have\nto be waiting for one? PROFESSOR: Because it's trying\nto compute a function.",
    "start": "3452700",
    "end": "3459109"
  },
  {
    "text": "I have to define a function. Another way to say that is the\nanswer to what comes out of",
    "start": "3459110",
    "end": "3464210"
  },
  {
    "text": "this merge box is not a function\nof what goes in.",
    "start": "3464210",
    "end": "3471690"
  },
  {
    "text": "Because, see, what would\nthe function be? Suppose he puts in 1, 1, 1, 1,\nand he puts in 2, 2, 2, 2.",
    "start": "3471690",
    "end": "3483470"
  },
  {
    "text": "What's the answer\nsupposed to be? It's not good enough to say\nit's 1, 2, 1, 2, 1, 2.",
    "start": "3483470",
    "end": "3488740"
  },
  {
    "text": "AUDIENCE: I understand. But when Bill puts\nin 1, 1 goes in. When Dave puts in 2 twice,\n2 goes in twice.",
    "start": "3488740",
    "end": "3493950"
  },
  {
    "text": "When Bill puts in-- PROFESSOR: Right. AUDIENCE: Why can't\nit be hooked to the time of the input-- the actual procedural--",
    "start": "3493950",
    "end": "3500099"
  },
  {
    "text": "PROFESSOR: Because I\ndon't have time. See, all I can say is I'm going\nto define a function.",
    "start": "3500100",
    "end": "3506900"
  },
  {
    "text": "I don't have time. ",
    "start": "3506900",
    "end": "3512069"
  },
  {
    "text": "There's no concept if it's going\nto alternate, except if nobody's there, it's going\nto wait a while for him.",
    "start": "3512070",
    "end": "3518420"
  },
  {
    "text": "It's just going to say I have\nthe stream of requests, the timeless infinite streams of\nall the requests that Dave",
    "start": "3518420",
    "end": "3524579"
  },
  {
    "text": "would have made, right? And the timeless infinite stream\nof all the requests",
    "start": "3524580",
    "end": "3529710"
  },
  {
    "text": "Bill would have made, and I\nwant to operate on them. See, that's how this bank\naccount is working. ",
    "start": "3529710",
    "end": "3536710"
  },
  {
    "text": "And the problem is that these\npoor people who are sitting at the bank account windows\nhave the",
    "start": "3536710",
    "end": "3542180"
  },
  {
    "text": "misfortune to exist in time. They don't see their infinite\nstream of all the requests",
    "start": "3542180",
    "end": "3548490"
  },
  {
    "text": "they would have ever made. They're waiting now, and\nthey want an answer. ",
    "start": "3548490",
    "end": "3554290"
  },
  {
    "text": "So if you're sitting there-- if this is the screen operation\non some time-sharing",
    "start": "3554290",
    "end": "3560360"
  },
  {
    "text": "system and it's working\nfunctionally, you want an answer then when you\ntalk the character. You don't want it to have to\nwait for everybody in the",
    "start": "3560360",
    "end": "3566940"
  },
  {
    "text": "whole system to have typed one\ncharacter before it can get around to service you. So that's the problem.",
    "start": "3566940",
    "end": "3573890"
  },
  {
    "text": "I mean, the fact that people\nlive in time, apparently. If they didn't, it wouldn't\nbe a problem. ",
    "start": "3573890",
    "end": "3589100"
  },
  {
    "text": "AUDIENCE: I'm afraid I miss the\npoint of having no time in this banking transaction.",
    "start": "3589100",
    "end": "3594740"
  },
  {
    "text": "Isn't time very important? For instance, the sequence\nof events.",
    "start": "3594740",
    "end": "3600789"
  },
  {
    "text": "If Dave take out $100,\nthen the timing",
    "start": "3600790",
    "end": "3607150"
  },
  {
    "text": "sequence should be important. How do you treat transactions\nas streams? PROFESSOR: Well, that's\nthe thing I'm saying.",
    "start": "3607150",
    "end": "3614260"
  },
  {
    "text": "This is an example\nwhere you can't. You can't. The point is what comes out of\nhere is simply not a function",
    "start": "3614260",
    "end": "3621410"
  },
  {
    "text": "of the stream going in here and\nthe stream going in here. It's a function of the stream\ngoing in here and the stream",
    "start": "3621410",
    "end": "3626660"
  },
  {
    "text": "going in here and some kind of\ninformation about time, which is precisely what a normal-order\nlanguage won't let you say.",
    "start": "3626660",
    "end": "3632860"
  },
  {
    "text": " AUDIENCE: In order to brings\nthis back into a more functional perspective, could we\njust explicitly time stamp",
    "start": "3632860",
    "end": "3640475"
  },
  {
    "text": "all the inputs from Bill and\nDave and define fair merge to just be the sort on\nthose time stamps?",
    "start": "3640476",
    "end": "3646400"
  },
  {
    "text": " PROFESSOR: Yeah, you\ncan do that. You can do that sort of thing. Another thing you could say is\nimagine that really what this",
    "start": "3646400",
    "end": "3653830"
  },
  {
    "text": "function is, is that it does a\nread every microsecond, and",
    "start": "3653830",
    "end": "3659070"
  },
  {
    "text": "then if there's none\nthere, that's considered an empty one. That's about equivalent\nto what you said. And yes, you can do that,\nbut that's a clg.",
    "start": "3659070",
    "end": "3667110"
  },
  {
    "text": "So it's not quite only\nimplementation we're worried about. We're worried about expressive\npower in the language, and",
    "start": "3667110",
    "end": "3672829"
  },
  {
    "text": "what we're running across is a\nreal mismatch between what we can say easily and what\nwe'd like to say.",
    "start": "3672830",
    "end": "3678824"
  },
  {
    "text": "AUDIENCE: It sounds like where\nwe're getting hung up with that is the fact it expects one\ninput from both Bill and Dave at the same time.",
    "start": "3678824",
    "end": "3686080"
  },
  {
    "text": "PROFESSOR: It's not quite one,\nbut it's anything you define. So you can say Dave can go\ntwice as often, but if anything you predefine, it's\nnot the right thing.",
    "start": "3686080",
    "end": "3696110"
  },
  {
    "text": "You can't decide at some\nparticular function of their input requests.",
    "start": "3696110",
    "end": "3701930"
  },
  {
    "text": "Worse yet, I mean, worse yet,\nthere are things that even merge can't do.",
    "start": "3701930",
    "end": "3707290"
  },
  {
    "text": "One thing you might want to do\nthat's even more general is suddenly you add somebody else\nto this bank account system.",
    "start": "3707290",
    "end": "3712470"
  },
  {
    "text": "You go and you add John to\nthis bank account system. And now there's yet another\nstream that's going to come",
    "start": "3712470",
    "end": "3718250"
  },
  {
    "text": "into the picture at some time\nwhich we haven't prespecified. So that's something even fair\nmerge can't do, and they're",
    "start": "3718250",
    "end": "3724050"
  },
  {
    "text": "things called-- I forget-- natagers or something. That's a generalization of\nfair merge to allow that.",
    "start": "3724050",
    "end": "3731790"
  },
  {
    "text": "There's a whole sort of research\ndiscipline saying how far can you push this functional\nperspective by adding more and more\nmechanism?",
    "start": "3731790",
    "end": "3739580"
  },
  {
    "text": "And how far does that go before\nthe whole thing breaks down and you might as well\nbeen using set anyway.",
    "start": "3739580",
    "end": "3745609"
  },
  {
    "text": "AUDIENCE: You need to set him\nup on automatic deposit. [LAUGHTER]",
    "start": "3745610",
    "end": "3759630"
  },
  {
    "text": "PROFESSOR: OK, thank you. ",
    "start": "3759630",
    "end": "3780115"
  }
]