[
  {
    "start": "0",
    "end": "68000"
  },
  {
    "text": "Let's take a moment to look at a different\nexample.",
    "start": "729",
    "end": "3449"
  },
  {
    "text": "Automated teller machines allow bank customers\nto perform a variety of transactions: deposits,",
    "start": "3450",
    "end": "8780"
  },
  {
    "text": "withdrawals, transfers, etc.",
    "start": "8780",
    "end": "11139"
  },
  {
    "text": "Let's consider what happens when two customers\ntry to withdraw $50 from the same account",
    "start": "11139",
    "end": "16560"
  },
  {
    "text": "at the same time.",
    "start": "16560",
    "end": "17588"
  },
  {
    "text": "A portion of the bank's code for a withdrawal\ntransaction is shown in the upper right.",
    "start": "17589",
    "end": "23220"
  },
  {
    "text": "This code is responsible for adjusting the\naccount balance to reflect the amount of the",
    "start": "23220",
    "end": "28529"
  },
  {
    "text": "withdrawal.",
    "start": "28529",
    "end": "29529"
  },
  {
    "text": "Presumably the check to see if there is sufficient\nfunds has already happened.",
    "start": "29529",
    "end": "33050"
  },
  {
    "text": "What's supposed to happen?",
    "start": "33050",
    "end": "35200"
  },
  {
    "text": "Let's assume that the bank is using a separate\nprocess to handle each transaction, so the",
    "start": "35200",
    "end": "40489"
  },
  {
    "text": "two withdrawal transactions cause two different\nprocesses to be created, each of which will",
    "start": "40489",
    "end": "46370"
  },
  {
    "text": "run the Debit code.",
    "start": "46370",
    "end": "48989"
  },
  {
    "text": "If each of the calls to Debit run to completion\nwithout interruption, we get the desired outcome:",
    "start": "48989",
    "end": "55050"
  },
  {
    "text": "the first transaction debits the account by\n$50, then the second transaction does the",
    "start": "55050",
    "end": "59890"
  },
  {
    "text": "same.",
    "start": "59890",
    "end": "61210"
  },
  {
    "text": "The net result is that you and your friend\nhave $100 and the balance is $100 less.",
    "start": "61210",
    "end": "67020"
  },
  {
    "text": "So far, so good.",
    "start": "67020",
    "end": "68969"
  },
  {
    "start": "68000",
    "end": "245000"
  },
  {
    "text": "But what if the process for the first transaction\nis interrupted just after it's read the balance?",
    "start": "68970",
    "end": "75570"
  },
  {
    "text": "The second process subtracts $50 from the\nbalance, completing that transaction.",
    "start": "75570",
    "end": "80400"
  },
  {
    "text": "Now the first process resumes, using the now\nout-of-date balance it loaded just before",
    "start": "80400",
    "end": "86000"
  },
  {
    "text": "being interrupted.",
    "start": "86000",
    "end": "87660"
  },
  {
    "text": "The net result is that you and your friend\nhave $100, but the balance has only been debited",
    "start": "87660",
    "end": "92520"
  },
  {
    "text": "by $50.",
    "start": "92520",
    "end": "95049"
  },
  {
    "text": "The moral of the story is that we need to\nbe careful when writing code that reads and",
    "start": "95050",
    "end": "98690"
  },
  {
    "text": "writes shared data since other processes might\nmodify the data in the middle of our execution.",
    "start": "98690",
    "end": "104580"
  },
  {
    "text": "When, say, updating a shared memory location,\nwe'll need to LD the current value, modify",
    "start": "104580",
    "end": "111410"
  },
  {
    "text": "it, then ST the updated value.",
    "start": "111410",
    "end": "114430"
  },
  {
    "text": "We would like to ensure that no other processes\naccess the shared location between the start",
    "start": "114430",
    "end": "119360"
  },
  {
    "text": "of the LD and the completion of the ST.",
    "start": "119360",
    "end": "123000"
  },
  {
    "text": "The LD/modify/ST code sequence is what we\ncall a \"critical section\".",
    "start": "123000",
    "end": "128470"
  },
  {
    "text": "We need to arrange that other processes attempting\nto execute the same critical section are delayed",
    "start": "128470",
    "end": "133220"
  },
  {
    "text": "until our execution is complete.",
    "start": "133220",
    "end": "136379"
  },
  {
    "text": "This constraint is called \"mutual exclusion\",\ni.e., only one process at a time can be executing",
    "start": "136379",
    "end": "142519"
  },
  {
    "text": "code in the same critical section.",
    "start": "142519",
    "end": "146980"
  },
  {
    "text": "Once we've identified critical sections, we'll\nuse semaphores to guarantee they execute atomically,",
    "start": "146980",
    "end": "152500"
  },
  {
    "text": "i.e., that once execution of the critical\nsection begins, no other process will be able",
    "start": "152500",
    "end": "158140"
  },
  {
    "text": "to enter the critical section until the execution\nis complete.",
    "start": "158140",
    "end": "162650"
  },
  {
    "text": "The combination of the semaphore to enforce\nthe mutual exclusion constraint and the critical",
    "start": "162650",
    "end": "167819"
  },
  {
    "text": "section of code implement what's called a\n\"transaction\".",
    "start": "167819",
    "end": "171390"
  },
  {
    "text": "A transaction can perform multiple reads and\nwrites of shared data with the guarantee that",
    "start": "171390",
    "end": "176379"
  },
  {
    "text": "none of the data will be read or written by\nother processes while the transaction is in",
    "start": "176379",
    "end": "181920"
  },
  {
    "text": "progress.",
    "start": "181920",
    "end": "182920"
  },
  {
    "text": "Here's the original code to Debit, which we'll\nmodify by adding a LOCK semaphore.",
    "start": "182920",
    "end": "187200"
  },
  {
    "text": "In this case, the resource controlled by the\nsemaphore is the right to run the code in",
    "start": "187200",
    "end": "191650"
  },
  {
    "text": "the critical section.",
    "start": "191650",
    "end": "193569"
  },
  {
    "text": "By initializing LOCK to 1, we're saying that\nat most one process can execute the critical",
    "start": "193569",
    "end": "199569"
  },
  {
    "text": "section at a time.",
    "start": "199569",
    "end": "201060"
  },
  {
    "text": "A process running the Debit code WAITs on\nthe LOCK semaphore.",
    "start": "201060",
    "end": "205879"
  },
  {
    "text": "If the value of LOCK is 1, the WAIT will decrement\nvalue of LOCK to 0 and let the process enter",
    "start": "205879",
    "end": "212950"
  },
  {
    "text": "the critical section.",
    "start": "212950",
    "end": "214829"
  },
  {
    "text": "This is called acquiring the lock.",
    "start": "214829",
    "end": "217599"
  },
  {
    "text": "If the value of LOCK is 0, some other process\nhas acquired the lock and is executing the",
    "start": "217599",
    "end": "222629"
  },
  {
    "text": "critical section and our execution is suspended\nuntil the LOCK value is non-zero.",
    "start": "222629",
    "end": "228778"
  },
  {
    "text": "When the process completes execution of the\ncritical section, it releases the LOCK with",
    "start": "228779",
    "end": "233489"
  },
  {
    "text": "a call to SIGNAL, which will allow other processes\nto enter the critical section.",
    "start": "233489",
    "end": "238790"
  },
  {
    "text": "If there are multiple WAITing processes, only\none will be able to acquire the lock, and",
    "start": "238790",
    "end": "243409"
  },
  {
    "text": "the others will still have to wait their turn.",
    "start": "243409",
    "end": "246418"
  },
  {
    "start": "245000",
    "end": "382000"
  },
  {
    "text": "Used in this manner, semaphores are implementing\na mutual exclusion constraint, i.e., there's",
    "start": "246419",
    "end": "251730"
  },
  {
    "text": "a guarantee that two executions of the critical\nsection cannot overlap.",
    "start": "251730",
    "end": "256660"
  },
  {
    "text": "Note that if multiple processes need to execute\nthe critical section, they may run in any",
    "start": "256660",
    "end": "261500"
  },
  {
    "text": "order and the only guarantee is that their\nexecutions will not overlap.",
    "start": "261500",
    "end": "267470"
  },
  {
    "text": "There are some interesting engineering issues\nto consider.",
    "start": "267470",
    "end": "271390"
  },
  {
    "text": "There's the question of the granularity of\nthe lock, i.e., what shared data is controlled",
    "start": "271390",
    "end": "276200"
  },
  {
    "text": "by the lock?",
    "start": "276200",
    "end": "277560"
  },
  {
    "text": "In our bank example, should there be one lock\ncontrolling access to the balance for all",
    "start": "277560",
    "end": "282800"
  },
  {
    "text": "accounts?",
    "start": "282800",
    "end": "283889"
  },
  {
    "text": "That would mean that no one could access any\nbalance while a transaction was in progress.",
    "start": "283890",
    "end": "288920"
  },
  {
    "text": "That would mean that transactions accessing\ndifferent accounts would have to run one after",
    "start": "288920",
    "end": "293140"
  },
  {
    "text": "the other even though they're accessing different\ndata.",
    "start": "293140",
    "end": "297080"
  },
  {
    "text": "So one lock for all the balances would introduce\nunnecessary precedence constraints, greatly",
    "start": "297080",
    "end": "302060"
  },
  {
    "text": "slowing the rate at which transactions could\nbe processed.",
    "start": "302060",
    "end": "306870"
  },
  {
    "text": "Since the guarantee we need is that we shouldn't\npermit multiple simultaneous transactions",
    "start": "306870",
    "end": "311400"
  },
  {
    "text": "on the same account,\nit would make more sense to have a separate",
    "start": "311400",
    "end": "314820"
  },
  {
    "text": "lock for each account, and change the Debit\ncode to acquire the account's lock before",
    "start": "314820",
    "end": "319710"
  },
  {
    "text": "proceeding.",
    "start": "319710",
    "end": "321789"
  },
  {
    "text": "That will only delay transactions that truly\noverlap, an important efficiency consideration",
    "start": "321790",
    "end": "326890"
  },
  {
    "text": "for a large system processing many thousands\nof mostly non-overlapping transactions each",
    "start": "326890",
    "end": "332400"
  },
  {
    "text": "second.",
    "start": "332400",
    "end": "333400"
  },
  {
    "text": "Of course, having per-account locks would\nmean a lot of locks!",
    "start": "333400",
    "end": "338470"
  },
  {
    "text": "If that's a concern, we can adopt a compromise\nstrategy of having locks that protect groups",
    "start": "338470",
    "end": "343000"
  },
  {
    "text": "of accounts, e.g., accounts with same last\nthree digits in the account number.",
    "start": "343000",
    "end": "348580"
  },
  {
    "text": "That would mean we'd only need 1000 locks,\nwhich would allow up to 1000 transactions",
    "start": "348580",
    "end": "353220"
  },
  {
    "text": "to happen simultaneously.",
    "start": "353220",
    "end": "355970"
  },
  {
    "text": "The notion of transactions on shared data\nis so useful that we often use a separate",
    "start": "355970",
    "end": "360110"
  },
  {
    "text": "system called a database that provides the\ndesired functionality.",
    "start": "360110",
    "end": "364080"
  },
  {
    "text": "Database systems are engineered to provide\nlow-latency access to shared data, providing",
    "start": "364080",
    "end": "369639"
  },
  {
    "text": "the appropriate transactional semantics.",
    "start": "369640",
    "end": "373150"
  },
  {
    "text": "The design and implementation of databases\nand transactions is pretty interesting.",
    "start": "373150",
    "end": "377400"
  },
  {
    "text": "To follow up, I recommend reading about databases\non the web.",
    "start": "377400",
    "end": "382360"
  },
  {
    "start": "382000",
    "end": "412000"
  },
  {
    "text": "Returning to our producer/consumer example,\nwe see that if multiple producers are trying",
    "start": "382360",
    "end": "387379"
  },
  {
    "text": "to insert characters into the buffer at the\nsame time,",
    "start": "387380",
    "end": "390190"
  },
  {
    "text": "it's possible that their execution may overlap\nin a way that causes characters to be overwritten",
    "start": "390190",
    "end": "395570"
  },
  {
    "text": "and/or the index to be improperly incremented.",
    "start": "395570",
    "end": "400490"
  },
  {
    "text": "We just saw this bug in the bank example:\nthe producer code contains a critical section",
    "start": "400490",
    "end": "405690"
  },
  {
    "text": "of code that accesses the FIFO buffer and\nwe need to ensure that the critical section",
    "start": "405691",
    "end": "410390"
  },
  {
    "text": "is executed atomically.",
    "start": "410390",
    "end": "413000"
  },
  {
    "start": "412000",
    "end": "505000"
  },
  {
    "text": "Here we've added a third semaphore, called\nLOCK, to implement the necessary mutual exclusion",
    "start": "413000",
    "end": "418080"
  },
  {
    "text": "constraint for the critical section of code\nthat inserts characters into the FIFO buffer.",
    "start": "418080",
    "end": "424400"
  },
  {
    "text": "With this modification, the system will now\nwork correctly when there are multiple producer",
    "start": "424400",
    "end": "429580"
  },
  {
    "text": "processes.",
    "start": "429580",
    "end": "430580"
  },
  {
    "text": "There's a similar issue with multiple consumers,\nso we've used the same LOCK to protect the",
    "start": "430580",
    "end": "434990"
  },
  {
    "text": "critical section for reading from the buffer\nin the RCV code.",
    "start": "434990",
    "end": "439710"
  },
  {
    "text": "Using the same LOCK for producers and consumers\nwill work, but does introduce unnecessary",
    "start": "439710",
    "end": "445210"
  },
  {
    "text": "precedence constraints since producers and\nconsumers use different indices,",
    "start": "445210",
    "end": "450110"
  },
  {
    "text": "i.e., IN for producers and OUT for consumers.",
    "start": "450110",
    "end": "454610"
  },
  {
    "text": "To solve this problem we could use two locks:\none for producers and one for consumers.",
    "start": "454610",
    "end": "460750"
  },
  {
    "text": "Semaphores are a pretty handy swiss army knife\nwhen it comes to dealing with synchronization",
    "start": "460750",
    "end": "465080"
  },
  {
    "text": "issues.",
    "start": "465080",
    "end": "466400"
  },
  {
    "text": "When WAIT and SIGNAL appear in different processes,\nthe semaphore ensures the correct execution",
    "start": "466400",
    "end": "471490"
  },
  {
    "text": "timing between processes.",
    "start": "471490",
    "end": "474020"
  },
  {
    "text": "In our example, we used two semaphores to\nensure that consumers can't read from an empty",
    "start": "474020",
    "end": "478870"
  },
  {
    "text": "buffer and that producers can't write into\na full buffer.",
    "start": "478870",
    "end": "484240"
  },
  {
    "text": "We also used semaphores to ensure that execution\nof critical sections -- in our example, updates",
    "start": "484240",
    "end": "489930"
  },
  {
    "text": "of the indices IN and OUT -- were guaranteed\nto be atomic.",
    "start": "489930",
    "end": "493479"
  },
  {
    "text": "In other words, that the sequence of reads\nand writes needed to increment a shared index",
    "start": "493480",
    "end": "498710"
  },
  {
    "text": "would not be interrupted by another process\nbetween the initial read of the index and",
    "start": "498710",
    "end": "503699"
  },
  {
    "text": "the final write.",
    "start": "503700",
    "end": "504490"
  }
]