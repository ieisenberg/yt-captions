[
  {
    "text": "PROFESSOR: All right, I\nthought he would be. It's always a hazard putting\nup somebody who you know is going to lecture better\nthan you do.",
    "start": "0",
    "end": "7200"
  },
  {
    "text": "But I hope that was a\ngood change of pace. And, of course, he knows more\nabout the subject of",
    "start": "7200",
    "end": "13070"
  },
  {
    "text": "Reed-Solomon decoding than I\nor more than practically anyone else does, so --",
    "start": "13070",
    "end": "18860"
  },
  {
    "text": "did he have much time to\ntalk about decoding or was the most -- yeah. Talked about the decoding\nalgorithms, Sudan-type",
    "start": "18860",
    "end": "25189"
  },
  {
    "text": "decoding algorithms. Yeah? OK. Good. Well, in fact, he covered so\nmuch that I don't have much",
    "start": "25190",
    "end": "32650"
  },
  {
    "text": "left to do today.  I remind you, Ashish\nput out an email.",
    "start": "32650",
    "end": "41280"
  },
  {
    "text": "There's a review session\ntomorrow for the midterm from 5 to 7 in a different\nroom, 36-112.",
    "start": "41280",
    "end": "49760"
  },
  {
    "text": "The midterm is Wednesday\nin this room. It starts at 9:05 to give\nyou a little bit more",
    "start": "49760",
    "end": "56180"
  },
  {
    "text": "time to work on it. It's closed book except that\nyou're allowed to make up",
    "start": "56180",
    "end": "62880"
  },
  {
    "text": "three normal size\nsheets of notes. You can write as small\nas you like.",
    "start": "62880",
    "end": "70830"
  },
  {
    "text": "This experience has shown this\nis the very best way of getting you to consolidate what\nyou've learned up to this",
    "start": "70830",
    "end": "78380"
  },
  {
    "text": "point, is writing your own\nthree-page precis of the course to date. So, yes?",
    "start": "78380",
    "end": "84115"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]? PROFESSOR: What is\nthe rule, both -- what? AUDIENCE: Both sides.",
    "start": "84115",
    "end": "89970"
  },
  {
    "text": "PROFESSOR: Both sides. All right. Six sheets. If you can't write down the\nwhole course in six sheets,",
    "start": "89970",
    "end": "96640"
  },
  {
    "text": "then, well, you haven't\nbeen paying attention. ",
    "start": "96640",
    "end": "104200"
  },
  {
    "text": "OK. And you can bring calculators,\nbut we don't expect they'll be useful.",
    "start": "104200",
    "end": "111110"
  },
  {
    "text": "Please erase any erasable will\nmemories if you do bring calculators. These are things we tell\nundergraduates.",
    "start": "111110",
    "end": "117190"
  },
  {
    "text": "I guess they hardly\nseem necessary in a graduate course. Any other questions about the\nlogistics of the midterm?",
    "start": "117190",
    "end": "125500"
  },
  {
    "text": "AUDIENCE: What is the material\ngoing to be for the midterm?",
    "start": "125500",
    "end": "130738"
  },
  {
    "text": "PROFESSOR: Everything that's\nbeen covered up to today. I won't hold you responsible\nfor anything I've",
    "start": "130738",
    "end": "136440"
  },
  {
    "text": "talked about today. So it's basically chapters\none through eight. ",
    "start": "136440",
    "end": "144650"
  },
  {
    "text": "I really will only hold you\nresponsible for what we covered in class, which chapters\none, two, and three",
    "start": "144650",
    "end": "150790"
  },
  {
    "text": "were so brief, you can't say\nwe really covered them. So really, chapters four\nthrough eight.",
    "start": "150790",
    "end": "157702"
  },
  {
    "text": " Any other questions?",
    "start": "157703",
    "end": "165560"
  },
  {
    "text": "All right. You'll have more chance\nas we go along. ",
    "start": "165560",
    "end": "172170"
  },
  {
    "text": "So as I say, Ralf really covered\nthe main things about",
    "start": "172170",
    "end": "179209"
  },
  {
    "text": "Reed-Solomon codes, which are\nthe crowning achievement of",
    "start": "179210",
    "end": "185240"
  },
  {
    "text": "algebraic coding theory. They have a lot of favorable\nattributes.",
    "start": "185240",
    "end": "192180"
  },
  {
    "text": "They are optimum, from an n,\nk, d point of view, in the",
    "start": "192180",
    "end": "200280"
  },
  {
    "text": "sense that they're maximum\ndistance separable.",
    "start": "200280",
    "end": "206500"
  },
  {
    "text": "The parameters are as good as\nthey possibly could be by this very basic Singleton bound.",
    "start": "206500",
    "end": "213360"
  },
  {
    "text": "They have efficient algebraic\ndecoding algorithms. ",
    "start": "213360",
    "end": "222130"
  },
  {
    "text": "And traditionally, this has\nmeant hard decision bounded",
    "start": "222130",
    "end": "228170"
  },
  {
    "text": "distance decoding algorithms\nlike the Welch-Berlekamp algorithm or the\nBerlekamp-Massey match",
    "start": "228170",
    "end": "233750"
  },
  {
    "text": "algorithm, which take hard\ndecisions in, put hard",
    "start": "233750",
    "end": "239390"
  },
  {
    "text": "decisions on symbols out. But as Ralf suggested to you,\nnow there are algorithms that",
    "start": "239390",
    "end": "247210"
  },
  {
    "text": "can use soft decisions in,\nproduce a list, at least, coming out, some indication\nof the reliability of each",
    "start": "247210",
    "end": "255880"
  },
  {
    "text": "element of the list. So they've been softened up. ",
    "start": "255880",
    "end": "263080"
  },
  {
    "text": "Nonetheless, what are the\nnegatives is, basically, that",
    "start": "263080",
    "end": "269479"
  },
  {
    "text": "they work on bytes, or\nsymbols, not bits.",
    "start": "269480",
    "end": "276760"
  },
  {
    "text": " So if we have a basically binary\nchannel, as we very",
    "start": "276760",
    "end": "284080"
  },
  {
    "text": "frequently do, then they need\nsomething else to make them",
    "start": "284080",
    "end": "290970"
  },
  {
    "text": "adapted to the binary channel,\nor even on the additive white Gaussian noise channel.",
    "start": "290970",
    "end": "296060"
  },
  {
    "text": "I don't think we've gone through\nthe calculation. You could think of sending q or\ne symbols over the additive",
    "start": "296060",
    "end": "307099"
  },
  {
    "text": "white Gaussian noise channel,\nbut what would you need? You would need a q\nor e signal set.",
    "start": "307100",
    "end": "312490"
  },
  {
    "text": "Now, if you pick that to be a\nq simplex signals set or a orthogonal or biorthogonal\nsignal set, then that might",
    "start": "312490",
    "end": "320039"
  },
  {
    "text": "work because the distance\nstructure of such a signal set is like the Hamming distance\nstructure in GF of q.",
    "start": "320040",
    "end": "326900"
  },
  {
    "text": " In other words, it's\napproximately equally likely",
    "start": "326900",
    "end": "331960"
  },
  {
    "text": "to make an error to\nany other symbol. The symbols are more or less\nequally spread apart in",
    "start": "331960",
    "end": "339909"
  },
  {
    "text": "Euclidean space. Just as when we count distance\nin Hamming space, we give the",
    "start": "339910",
    "end": "346130"
  },
  {
    "text": "same weight to each possible\nkind of error or each possible kind of symbol difference.",
    "start": "346130",
    "end": "351610"
  },
  {
    "text": "So if you did that,\nthen Reed-Solomon",
    "start": "351610",
    "end": "356819"
  },
  {
    "text": "codes might work well. That's one form of a\nconcatenated scheme, which I will talk about in\njust a second.",
    "start": "356820",
    "end": "364290"
  },
  {
    "text": "But if you tried to apply\nReed-Solomon codes to a binary input additive white Gaussian\nnoise channel, just translate",
    "start": "364290",
    "end": "371266"
  },
  {
    "text": "the, say, 8-bit bytes into bits\nand send them one bit at a time, then the distance\nstructures don't",
    "start": "371266",
    "end": "380680"
  },
  {
    "text": "correspond at all well. It's much more likely to make\na single bit error than an error that involves all eight\nbits or something.",
    "start": "380680",
    "end": "388270"
  },
  {
    "text": "And for that fundamental reason,\nyou'll find that",
    "start": "388270",
    "end": "393699"
  },
  {
    "text": "performance is not so great. And certainly, this is not the\nway to get to capacity all by",
    "start": "393700",
    "end": "401330"
  },
  {
    "text": "itself unless it's married\nwith something else. So that's something we always\nhave to deal with in another",
    "start": "401330",
    "end": "408590"
  },
  {
    "text": "applications, as I will talk\nabout in a minute. We naturally do want\nto correct bytes,",
    "start": "408590",
    "end": "414470"
  },
  {
    "text": "or symbols, or blocks. There are many bits.",
    "start": "414470",
    "end": "419949"
  },
  {
    "text": "And then Reed-Solomon codes are\njust exactly what we want. They're optimal in any\nsuch situation.",
    "start": "419950",
    "end": "427569"
  },
  {
    "text": "And so what did I just say? They're not the way to get to\ncapacity, although they are",
    "start": "427570",
    "end": "436520"
  },
  {
    "text": "sometimes part of schemes\nfor getting to capacity.",
    "start": "436520",
    "end": "441930"
  },
  {
    "text": "And since getting to capacity in\nthe additive white Gaussian noise channel is the theme of\nthis course, then they play",
    "start": "441930",
    "end": "449780"
  },
  {
    "text": "only a peripheral role\nin that theme. Nonetheless, they're\ngreat codes.",
    "start": "449780",
    "end": "455750"
  },
  {
    "text": "They're in wide use. They're part of every\nsemiconductor manufacturer's core library.",
    "start": "455750",
    "end": "461400"
  },
  {
    "text": "You can buy (255,223) distance\n33, 16 error correcting",
    "start": "461400",
    "end": "471220"
  },
  {
    "text": "Reed-Solomon decoder in part of\nany chip package and it'll",
    "start": "471220",
    "end": "476250"
  },
  {
    "text": "go at gigabits nowadays. So it's kind of the all-purpose\nerror correcting",
    "start": "476250",
    "end": "484640"
  },
  {
    "text": "code, with the caveat that you\nneed to somehow get what you correct to be bytes rather\nthan bits, OK?",
    "start": "484640",
    "end": "495320"
  },
  {
    "text": "So today I thought I'd cover the\nlast two topics in chapter",
    "start": "495320",
    "end": "503200"
  },
  {
    "text": "eight and maybe, to the extent\nthat time permits, go back to",
    "start": "503200",
    "end": "512400"
  },
  {
    "text": "chapter seven. But we'll see how we\nfeel about that.",
    "start": "512400",
    "end": "519530"
  },
  {
    "text": "Applications of Reed-Solomon\ncodes. ",
    "start": "519530",
    "end": "525470"
  },
  {
    "text": "OK, basically, you can apply\nthem wherever you want to",
    "start": "525470",
    "end": "531100"
  },
  {
    "text": "correct blocks, rather than bits\nor packets or n-tuples or",
    "start": "531100",
    "end": "538690"
  },
  {
    "text": "what have you. So one obvious application is,\nwhen you send packets through",
    "start": "538690",
    "end": "546860"
  },
  {
    "text": "the internet, if you use\nReed-Solomon codes across the",
    "start": "546860",
    "end": "562510"
  },
  {
    "text": "packet, then you can correct\nerrors that occur in",
    "start": "562510",
    "end": "570820"
  },
  {
    "text": "individual packets. This is not the way the internet\nusually works.",
    "start": "570820",
    "end": "575950"
  },
  {
    "text": "The internet usually works by\nhaving an error detection code",
    "start": "575950",
    "end": "581330"
  },
  {
    "text": "within each packet, a cyclic\nredundancy check (CRC). You hash bits, whatever.",
    "start": "581330",
    "end": "589020"
  },
  {
    "text": "You provide some redundant bits\nwithin each packet if --",
    "start": "589020",
    "end": "594170"
  },
  {
    "text": "when you receive the packet, you\ncheck to see whether the parity check checks. If there are parity check bits,\nthen a very good rule of",
    "start": "594170",
    "end": "605400"
  },
  {
    "text": "thumb is that the probability of\nnot detecting an error for almost any type of error pattern\nis going to be of the",
    "start": "605400",
    "end": "612820"
  },
  {
    "text": "order of 2 to the minus r. That's exactly what it would\nbe if you had a completely random stream of bits.",
    "start": "612820",
    "end": "618939"
  },
  {
    "text": "Random stream of bits with r\nredundant bits in a block, the probability that all the check\nbits are random, the",
    "start": "618940",
    "end": "625990"
  },
  {
    "text": "probability that they're\nall equal to 0, is 2 to the minus r. All right? But it turns out that's very\ngood approximation for just",
    "start": "625990",
    "end": "634670"
  },
  {
    "text": "about any error mechanism. So you pick r large enough. It's often been picked to be\nsomething like r equals 32.",
    "start": "634670",
    "end": "643110"
  },
  {
    "text": "What kind of failure to\ndetect does that give? 2 to the minus 32, which is\nwhat, about 2 the minus 9th, 2",
    "start": "643110",
    "end": "651220"
  },
  {
    "text": "to the minus 10th -- 10 to the minus 9th, 10\nto the minus 10th. Is that low enough?",
    "start": "651220",
    "end": "658010"
  },
  {
    "text": "It was certainly -- when I started in this business,\nthat was considered just incredibly low, but now\nthat we're sending mega",
    "start": "658010",
    "end": "664930"
  },
  {
    "text": "packets per second, it doesn't\nseem quite so low anymore. And so 32 is a little bit\non the sloppy side.",
    "start": "664930",
    "end": "672639"
  },
  {
    "text": "There are going to be undetected\nerrors that get through if you're spending\n10 to the 9th, 10 to the 10th packets.",
    "start": "672640",
    "end": "679709"
  },
  {
    "text": "But 32 or, nowadays, 64 would\nbe a better number.",
    "start": "679710",
    "end": "686900"
  },
  {
    "text": "Just like cryptography, the\nnumber of bits has to go up as technology goes up.",
    "start": "686900",
    "end": "692020"
  },
  {
    "text": "But 32 is often used. OK, but here's an alternative\nscheme.",
    "start": "692020",
    "end": "697700"
  },
  {
    "text": "Suppose you coded\nacross packets. So here is a, say, a\n1,000-bit packet.",
    "start": "697700",
    "end": "708720"
  },
  {
    "text": "And here's packet one, here's\npacket two, here's packet",
    "start": "708720",
    "end": "715269"
  },
  {
    "text": "three, and so forth up to packet\nk, where we're going to",
    "start": "715270",
    "end": "724810"
  },
  {
    "text": "use n, k, d equals n minus k\nplus 1, RS code over, it",
    "start": "724810",
    "end": "736050"
  },
  {
    "text": "doesn't matter, GF of let's\nsay 256, just for definite",
    "start": "736050",
    "end": "741720"
  },
  {
    "text": "[INAUDIBLE]. Here I'm using older notation. This is the same as F-256.",
    "start": "741720",
    "end": "748140"
  },
  {
    "text": "Or we sometimes write that\nas F 2 to the 8th.  OK, how are we going to do\npacket error correction?",
    "start": "748140",
    "end": "756640"
  },
  {
    "text": "We're going to code crosswise\nin columns, all right? So these would be k.",
    "start": "756640",
    "end": "766860"
  },
  {
    "text": "Let's make this eight-wide. Just pick off a bite\nat a time here. So each of these can be\nconsidered to be a",
    "start": "766860",
    "end": "772840"
  },
  {
    "text": "symbol in GF of 256. And then we'll code n\nminus k parity check",
    "start": "772840",
    "end": "781060"
  },
  {
    "text": "packets down here. So these are redundant\ncheck packets.",
    "start": "781060",
    "end": "790200"
  },
  {
    "text": "Encoded bytes at this point.",
    "start": "790200",
    "end": "796030"
  },
  {
    "text": "They're not packets yet. But if we do that column-wise\nacross here, we can fill in n",
    "start": "796030",
    "end": "806610"
  },
  {
    "text": "minus k check packets and you\ncan see the block length is",
    "start": "806610",
    "end": "822160"
  },
  {
    "text": "quite huge here. So you might have a delay or\nlatency problem in executing",
    "start": "822160",
    "end": "828840"
  },
  {
    "text": "this scheme. Basically, you would have to\nsend this whole thing before",
    "start": "828840",
    "end": "834530"
  },
  {
    "text": "you could do error correction\nand then error correct the whole thing. But how does error\ncorrection work?",
    "start": "834530",
    "end": "840449"
  },
  {
    "text": "You send this. Perhaps some of the packets are\nerased or even received",
    "start": "840450",
    "end": "845740"
  },
  {
    "text": "incorrectly. You would then use some error\ncorrection or erasure and",
    "start": "845740",
    "end": "850760"
  },
  {
    "text": "error correction scheme, which\nRalf talked about, for correcting the Reed-Solomon\ncode.",
    "start": "850760",
    "end": "858610"
  },
  {
    "text": "And you could correct up to d\nover 2 errors, or up to d",
    "start": "858610",
    "end": "867470"
  },
  {
    "text": "minus 1 erasures, OK? So this would be a very\npowerful packet error",
    "start": "867470",
    "end": "875560"
  },
  {
    "text": "correction scheme. What are its costs? It's costs are quite a\nbit of redundancy.",
    "start": "875560",
    "end": "880590"
  },
  {
    "text": "It doesn't fit the internet\narchitecture very well. This is basically a\npoint-to-point scheme.",
    "start": "880590",
    "end": "888420"
  },
  {
    "text": "So when you're sending from a to\nb, you'd have to send b an additional n minus k streams.",
    "start": "888420",
    "end": "895390"
  },
  {
    "text": "And if you're sending the same\nwebpage, as you often do, to multiple people, you'd have\nto send this to everybody.",
    "start": "895390",
    "end": "903290"
  },
  {
    "text": "And it also doesn't have\nany feedback in it. The great thing about ARQ is\nthat you only have to send the",
    "start": "903290",
    "end": "910960"
  },
  {
    "text": "information that's necessary. You only have to restore\nthe packets that are actually lost.",
    "start": "910960",
    "end": "917185"
  },
  {
    "text": "You send them again. Whereas here, you're just kind\nof, a priori, deciding that",
    "start": "917185",
    "end": "923520"
  },
  {
    "text": "you're going to send a great\ndeal of redundant information down here to cover some kind\nof worst case, whatever you",
    "start": "923520",
    "end": "930380"
  },
  {
    "text": "think the worst-case number\nof packets would be. If there are more that\nworst-case number or packets,",
    "start": "930380",
    "end": "935430"
  },
  {
    "text": "then you could retransmit\nagain, but you're retransmitting this huge\nblock, all right?",
    "start": "935430",
    "end": "940730"
  },
  {
    "text": "So for that reason, this is not\nactually used, as far as I'm aware, in the internet.",
    "start": "940730",
    "end": "946839"
  },
  {
    "text": "ARQ, wherever you have\na feedback path, you should use it.",
    "start": "946840",
    "end": "952460"
  },
  {
    "text": "That's a general moral. So ARQ is a wonderful scheme\nthat is, on an erasure",
    "start": "952460",
    "end": "959540"
  },
  {
    "text": "channel, that's a\ncapacity-approaching scheme. Just on a bitwise basis, if\nyou have a binary erasure",
    "start": "959540",
    "end": "966490"
  },
  {
    "text": "channel with erasure probability\np, and then the capacity of the channel is 1\nminus p, and you can reach",
    "start": "966490",
    "end": "975139"
  },
  {
    "text": "that capacity if you simply\nretransmit each bit that was erased. As it's erased --",
    "start": "975140",
    "end": "980529"
  },
  {
    "text": "it's erased, you\nsend it again. And a quick calculation shows\nyou that the average number of retransmissions is p.",
    "start": "980530",
    "end": "986959"
  },
  {
    "text": "And so the average reduction\nfrom 1 bit per second is -- 1 bit per transmission is p bits\nper transmission, you can",
    "start": "986960",
    "end": "995259"
  },
  {
    "text": "achieve 1 minus p with no\ncoding at all, just by retransmission. So it's perfectly matched\nto the erasure channel.",
    "start": "995260",
    "end": "1001990"
  },
  {
    "text": "And the internet, especially\nwith parity checks, CRC,",
    "start": "1001990",
    "end": "1007250"
  },
  {
    "text": "within blocks, long enough\nCRC is basically a",
    "start": "1007250",
    "end": "1012980"
  },
  {
    "text": "packet erasure channel. You really, in practice,\nhardly ever make",
    "start": "1012980",
    "end": "1019630"
  },
  {
    "text": "a undetected -- let a packet with errors\ncome through.",
    "start": "1019630",
    "end": "1025920"
  },
  {
    "text": "OK? Any questions about this? AUDIENCE: [INAUDIBLE].",
    "start": "1025920",
    "end": "1032519"
  },
  {
    "text": "PROFESSOR: The TCP/IP protocol\njust has a 32-bit CRC, I",
    "start": "1032519",
    "end": "1038530"
  },
  {
    "text": "think, and if it fails to check,\nyou ask for that packet again by packet number.",
    "start": "1038530",
    "end": "1043604"
  },
  {
    "start": "1043604",
    "end": "1048930"
  },
  {
    "text": "OK? So Reed-Solomon codes, of\ncourse, are optimal if that's",
    "start": "1048930",
    "end": "1054039"
  },
  {
    "text": "what you want to do. You couldn't possibly have\na better code for coding across packets.",
    "start": "1054040",
    "end": "1059890"
  },
  {
    "text": "But it's cumbersome in the\npacket environment. ",
    "start": "1059890",
    "end": "1065860"
  },
  {
    "text": "OK.  Let's talk about concatenated\ncodes.",
    "start": "1065860",
    "end": "1074060"
  },
  {
    "text": "I guess I'll do it at\nthe same place. ",
    "start": "1074060",
    "end": "1092370"
  },
  {
    "text": "This is something -- I did in my thesis and last\nweek I was at a tribute to",
    "start": "1092370",
    "end": "1104530"
  },
  {
    "text": "Andy Viterbi, who invented\nthe Viterbi algorithm, among other things. Of course, everybody knows that\nthe Viterbi algorithm,",
    "start": "1104530",
    "end": "1112850"
  },
  {
    "text": "when Andy invented it, he had no\nidea it was actually going to be a practical algorithm.",
    "start": "1112850",
    "end": "1117960"
  },
  {
    "text": "It's become one of the super\npractical algorithms. He was just trying to prove a\ncertain result, exponential",
    "start": "1117960",
    "end": "1123200"
  },
  {
    "text": "error bounds for convolutional\ncodes. And he thought the proof was\neasier to understand if you",
    "start": "1123200",
    "end": "1128299"
  },
  {
    "text": "introduce this algorithm, which\nhe describes perfectly.",
    "start": "1128300",
    "end": "1134240"
  },
  {
    "text": "It is the Viterbi algorithm. But really, just a\nproof technique.",
    "start": "1134240",
    "end": "1140150"
  },
  {
    "text": "Didn't even realize it was\nan optimum decoder. And then somebody, not him, not\nme, but in his company,",
    "start": "1140150",
    "end": "1149200"
  },
  {
    "text": "fortunately, realized\nthat gee, this could be very practical. And that became a workhorse\ndecoding algorithm.",
    "start": "1149200",
    "end": "1156620"
  },
  {
    "text": "Very similarly, concatenated\ncodes are something that I did",
    "start": "1156620",
    "end": "1161700"
  },
  {
    "text": "in my thesis in 1965. And I was looking, basically,\nfor a theoretical result.",
    "start": "1161700",
    "end": "1168880"
  },
  {
    "text": "How could you approach capacity\nwith an exponentially",
    "start": "1168880",
    "end": "1175060"
  },
  {
    "text": "decreasing error probability\nnear capacity but with only polynomial increasing\ncomplexity?",
    "start": "1175060",
    "end": "1182010"
  },
  {
    "text": "And I looked into this very\nsimple idea of basically",
    "start": "1182010",
    "end": "1188610"
  },
  {
    "text": "taking two codes and using\none to correct the errors of the other. And I found that you\ncould do that.",
    "start": "1188610",
    "end": "1194590"
  },
  {
    "text": "And I'd also never realized\nthat this might actually be practical.",
    "start": "1194590",
    "end": "1200580"
  },
  {
    "text": "I remember going around giving\ntalks when I was interviewing afterwards that I was looking\nfor an industrial position.",
    "start": "1200580",
    "end": "1207580"
  },
  {
    "text": "I went down to places like Bell\nLabs, IBM labs, and did seminars talking about codes\nthat were thousands of symbols",
    "start": "1207580",
    "end": "1216520"
  },
  {
    "text": "long and everybody rolled their\neyes and said, boy, this guy is not very practical.",
    "start": "1216520",
    "end": "1222320"
  },
  {
    "text": "And to my surprise and everyone\nelse's surprise, this became and still is a very\npractical way of getting",
    "start": "1222320",
    "end": "1232990"
  },
  {
    "text": "high-performance codes. This, in conjunction -- well, I'll get into it, but this\nwas, again, a workhorse",
    "start": "1232990",
    "end": "1241450"
  },
  {
    "text": "coding technique and still\nis in wide use.",
    "start": "1241450",
    "end": "1247730"
  },
  {
    "text": "In fact, as you will see, this\ncontains some of the ideas",
    "start": "1247730",
    "end": "1253059"
  },
  {
    "text": "that go into modern\ncapacity-approaching codes.",
    "start": "1253060",
    "end": "1258650"
  },
  {
    "text": "But the idea is very simple. You can do it two ways, or\nprobably many more than two.",
    "start": "1258650",
    "end": "1270730"
  },
  {
    "text": "Suppose we have a basically\nbinary channel. ",
    "start": "1270730",
    "end": "1277910"
  },
  {
    "text": "I'll just say a core physical\nchannel there. The channel is what you can't\naffect as an engineer.",
    "start": "1277910",
    "end": "1285200"
  },
  {
    "text": "So let's say we have a binary\nsymmetric channel or a binary input additive white Gaussian\nnoise channel or",
    "start": "1285200",
    "end": "1292530"
  },
  {
    "text": "whatever you like. And then we could put on it an\nencoder and decoder for an n,",
    "start": "1292530",
    "end": "1308140"
  },
  {
    "text": "k, d binary linear block code. ",
    "start": "1308140",
    "end": "1316080"
  },
  {
    "text": "OK? Now, from the input and the\noutput, what is this channel",
    "start": "1316080",
    "end": "1323490"
  },
  {
    "text": "going to look like?  At the input, we're putting --",
    "start": "1323490",
    "end": "1329220"
  },
  {
    "text": "basically, per block,\nwe put k bits in. They're encoded into n bits.",
    "start": "1329220",
    "end": "1335390"
  },
  {
    "text": "They're sent over the channel,\nreceived some n-tuple of noisy",
    "start": "1335390",
    "end": "1341860"
  },
  {
    "text": "received symbols. The decoder tries to find\nthe best code word. The code word is identified\nby k bits.",
    "start": "1341860",
    "end": "1348755"
  },
  {
    "text": " Most of the time there'll\nbe no error and these --",
    "start": "1348755",
    "end": "1356370"
  },
  {
    "text": "let's call this u in\nand u hat out.",
    "start": "1356370",
    "end": "1361520"
  },
  {
    "text": "u hat is going to equal u. But, of course, let's\nimagine this is a",
    "start": "1361520",
    "end": "1368150"
  },
  {
    "text": "relatively short code. Let's imagine this is a maximum\nlikelihood decoder or",
    "start": "1368150",
    "end": "1373380"
  },
  {
    "text": "minimum distance decoder in\nthe appropriate space. Then the complexity is\ngoing to be of the",
    "start": "1373380",
    "end": "1381070"
  },
  {
    "text": "order of 2 to the k. And so you can't let\nk get very big.",
    "start": "1381070",
    "end": "1387080"
  },
  {
    "text": "We'll find somewhat\nbetter ways to do maximum likelihood decoding. But if you're really trying to\ndo optimum decoding, the",
    "start": "1387080",
    "end": "1393050"
  },
  {
    "text": "complexity is going to go up\nexponentially at this stage with the number of information\nbits k.",
    "start": "1393050",
    "end": "1398350"
  },
  {
    "text": "So this is not the scheme that\nwe're looking for that has only polynomial complexity.",
    "start": "1398350",
    "end": "1403940"
  },
  {
    "text": "We know that we can choose\ncodes like this that with optimum decoding get\nto capacity.",
    "start": "1403940",
    "end": "1409700"
  },
  {
    "text": "That's Shannon's theorem. But we don't know how to decode\nthem with reasonable",
    "start": "1409700",
    "end": "1416039"
  },
  {
    "text": "complexity. But, all right, here's\na start. We could use a relatively modest\nlength code that we can",
    "start": "1416040",
    "end": "1423909"
  },
  {
    "text": "feasibly decode. And this is what we get. OK.",
    "start": "1423910",
    "end": "1429740"
  },
  {
    "text": "So we have blocks going in. Block from an alphabet\nof size 2 to the k.",
    "start": "1429740",
    "end": "1435920"
  },
  {
    "text": "Blocks coming out, alphabet\nsize 2 to the k. Occasionally, we make errors.",
    "start": "1435920",
    "end": "1441710"
  },
  {
    "text": "What's a good idea to then do?  This is not very hard.",
    "start": "1441710",
    "end": "1447770"
  },
  {
    "text": "This is why you should have been\nin this field in the '60s rather than the year 2005.",
    "start": "1447770",
    "end": "1452870"
  },
  {
    "text": "There were lots of good ideas\njust laying around waiting to be picked up.",
    "start": "1452870",
    "end": "1458530"
  },
  {
    "text": "Class? Anyone have a suggestion\nfor how to make further improvement in this system? AUDIENCE: [INAUDIBLE].",
    "start": "1458530",
    "end": "1464168"
  },
  {
    "text": "PROFESSOR: Add another code. What should it be? Let's put an encoder\nhere for what?",
    "start": "1464168",
    "end": "1474830"
  },
  {
    "text": " AUDIENCE: [INAUDIBLE].",
    "start": "1474830",
    "end": "1481662"
  },
  {
    "text": "PROFESSOR: Everyone is\nextremely wide awake. An n, k, d Reed-Solomon\ncode over what field?",
    "start": "1481662",
    "end": "1490500"
  },
  {
    "start": "1490500",
    "end": "1495670"
  },
  {
    "text": "In principle, it should\nbe over F2 to the k.",
    "start": "1495670",
    "end": "1500965"
  },
  {
    "text": "Now, of course, if k is 64 or\nsomething here, you might not even go all the way to field\nof 2 to the 64 elements.",
    "start": "1500965",
    "end": "1507899"
  },
  {
    "text": "You might divide it up again as\nwe did in the packet error correction. But basically, the way this goes\nis you try to keep this",
    "start": "1507900",
    "end": "1516690"
  },
  {
    "text": "as small as possible so that\nthis can still work. There's a tradeoff between the\ncomplexity of the two codes",
    "start": "1516690",
    "end": "1527570"
  },
  {
    "text": "and therefore, the rates. The decoder -- ",
    "start": "1527570",
    "end": "1533390"
  },
  {
    "text": "here we have an algebraic\nReed-Solomon decoder, which,",
    "start": "1533390",
    "end": "1544160"
  },
  {
    "text": "in the simplest case, could\njust do error correction. Just take these k bits as a hard\ndecision on u hat and try",
    "start": "1544160",
    "end": "1553190"
  },
  {
    "text": "to correct any errors that\noccurred in this inner loop here, which we might think\nof this as being a",
    "start": "1553190",
    "end": "1560700"
  },
  {
    "text": "2 to the kre channel. So this whole thing\ntogether is a 2 to the kre super channel.",
    "start": "1560700",
    "end": "1566890"
  },
  {
    "text": " Sorry if you can't read that,\nbut you heard me say it.",
    "start": "1566890",
    "end": "1575020"
  },
  {
    "text": "So here's a channel that takes\nin 2 to the kre symbols, puts out 2 to the kre symbols and\nsometimes makes errors",
    "start": "1575020",
    "end": "1585900"
  },
  {
    "text": "according to whatever the error\nprobability you can achieve here is. ",
    "start": "1585900",
    "end": "1591560"
  },
  {
    "text": "Or some of the discussion back\nwhen we were talking about hard decision with binary\nsuggested that it would be",
    "start": "1591560",
    "end": "1599170"
  },
  {
    "text": "better to pass along more\nreliability information here along with just the\nhard decision.",
    "start": "1599170",
    "end": "1605660"
  },
  {
    "text": " And the very simplest kind of\nreliability information is if",
    "start": "1605660",
    "end": "1614600"
  },
  {
    "text": "this guy really isn't sure, if\neither the noise is too large",
    "start": "1614600",
    "end": "1619950"
  },
  {
    "text": "so he can't make any decision\nor if the noise leaves him exactly halfway between two\ncode words so it's a",
    "start": "1619950",
    "end": "1626980"
  },
  {
    "text": "completely ambiguous decision,\nor whatever criteria you have, this might make erasures.",
    "start": "1626980",
    "end": "1633600"
  },
  {
    "text": "And I'm sure Ralf told you how\nto do error and erasure correction with Reed-Solomon\ncodes.",
    "start": "1633600",
    "end": "1640870"
  },
  {
    "text": "Or this could be more likely\nthat information just -- how likely was the code\nword you actually saw?",
    "start": "1640870",
    "end": "1648490"
  },
  {
    "text": "And there are various ways of\ndevising an approximate likelihood metric.",
    "start": "1648490",
    "end": "1653899"
  },
  {
    "text": "You just do what makes sense\nthat indicates that some words, you're absolutely sure\nof in this decoding.",
    "start": "1653900",
    "end": "1660130"
  },
  {
    "text": "And other words, you\ndon't know -- if you have one or more good\ncandidates or you have no good",
    "start": "1660130",
    "end": "1668050"
  },
  {
    "text": "candidates. So based on this reliability\ninformation, you can actually",
    "start": "1668050",
    "end": "1674880"
  },
  {
    "text": "incorporate that. Did Ralf talk about\nreliability-based decoding? Soft decoding algorithms\nfor Reed-Solomon codes?",
    "start": "1674880",
    "end": "1682029"
  },
  {
    "text": "No? OK, well, that's a shame because\nhe and Alex Vardy are the inventors of a very\ngood class that's",
    "start": "1682030",
    "end": "1690250"
  },
  {
    "text": "recently been improved. So one of the knocks on\nReed-Solomon codes is that, at",
    "start": "1690250",
    "end": "1700060"
  },
  {
    "text": "one point, you might have said\na minus can only work with",
    "start": "1700060",
    "end": "1705670"
  },
  {
    "text": "hard decisions.  And then, fairly early,\nit was figured out how",
    "start": "1705670",
    "end": "1711410"
  },
  {
    "text": "to correct to erasures. But just in the last 10\nyears, we now have --",
    "start": "1711410",
    "end": "1719320"
  },
  {
    "text": "this is no longer true. We can have soft, meaning\nreliability-labeled inputs.",
    "start": "1719320",
    "end": "1725735"
  },
  {
    "start": "1725735",
    "end": "1735740"
  },
  {
    "text": "And this is a plus. That means we can do soft --",
    "start": "1735740",
    "end": "1741260"
  },
  {
    "text": "and we have corresponding\nalgorithms that can do soft Reed-Solomon decoding.",
    "start": "1741260",
    "end": "1747080"
  },
  {
    "text": "They are, of course, more\ncomplicated than just straightforward error correction with hard decisions.",
    "start": "1747080",
    "end": "1753720"
  },
  {
    "text": "But there's still polynomial\ncomplexity. They're maybe an order of\nslightly higher degree of n,",
    "start": "1753720",
    "end": "1765660"
  },
  {
    "text": "but still polynomial in the\nblock length or in k or d or whatever you're taking.",
    "start": "1765660",
    "end": "1771779"
  },
  {
    "text": "And so we now have some such\nalgorithms that do make substantial gains.",
    "start": "1771780",
    "end": "1777240"
  },
  {
    "text": "And, of course, if he didn't\ntell you about them, I'm not going to tell you about them.",
    "start": "1777240",
    "end": "1783720"
  },
  {
    "text": "It's a rather specialized\nsubject. But it's something\nthat's really happened the last 10 years.",
    "start": "1783720",
    "end": "1790649"
  },
  {
    "text": "And they've constantly\nbeen improved. The first ones, like one\nI came up with called generalized minimum distance\ndecoding, made a modest",
    "start": "1790650",
    "end": "1799560"
  },
  {
    "text": "improvement. In dB terms, 1 dB, where\nthere's 3 dB to be got.",
    "start": "1799560",
    "end": "1805809"
  },
  {
    "text": "Now they're up to 2, 2 1/2 out\nof the 3 dB with these new soft Reed-Solomon decoding\nalgorithms.",
    "start": "1805810",
    "end": "1814160"
  },
  {
    "text": "So anyway, if you pass some\nreliability information here, then you can improve the\nperformance of this decoder.",
    "start": "1814160",
    "end": "1820775"
  },
  {
    "text": "This decoder knows which symbols\nare reliable and it",
    "start": "1820775",
    "end": "1827640"
  },
  {
    "text": "won't change in the decoding\nin which are unreliable or completely erased. Where there's no information\nabout them, that actually",
    "start": "1827640",
    "end": "1834470"
  },
  {
    "text": "helps you in the decoding. If you knew that you had s\nerasures rather than s errors,",
    "start": "1834470",
    "end": "1843669"
  },
  {
    "text": "this helps you quite a lot. We can decode twice as\nmany erasures as we can decode errors.",
    "start": "1843670",
    "end": "1849679"
  },
  {
    "text": "And similarly, soft information\nin between can improve the capabilities\nof your decoder.",
    "start": "1849680",
    "end": "1856310"
  },
  {
    "text": "All right. So that's the set up.",
    "start": "1856310",
    "end": "1861620"
  },
  {
    "text": "You can see why it makes a\ncertain amount of sense. ",
    "start": "1861620",
    "end": "1867190"
  },
  {
    "text": "From a complexity point of\nview, what it does -- here, we're going to do maximum\nlikelihood decoding,",
    "start": "1867190",
    "end": "1872679"
  },
  {
    "text": "complexity order\nof 2 to the k. But we're not going\nto let k get very large, so this is feasible.",
    "start": "1872680",
    "end": "1878690"
  },
  {
    "text": "Then we're going to let the code\nget very long, as we know we have to do from Shannon's\nTheorem, using this outer code.",
    "start": "1878690",
    "end": "1886020"
  },
  {
    "text": "But now we know we have\npolynomial complexity Reed-Solomon decoding\nalgorithms, even for the soft",
    "start": "1886020",
    "end": "1893340"
  },
  {
    "text": "decision case. So if we balance the complexity\nhere, basically let",
    "start": "1893340",
    "end": "1902330"
  },
  {
    "text": "this length be exponential and\nthis length, as it is -- it's of the order of 2 to\nthe k itself --",
    "start": "1902330",
    "end": "1910190"
  },
  {
    "text": "then we can get polynomial\ncomplexity overall, all right? The overall complexity is going\nto be of the order of a",
    "start": "1910190",
    "end": "1917980"
  },
  {
    "text": "small power of 2 to the k. The overall block length is\ngoing to be of the order --",
    "start": "1917980",
    "end": "1924140"
  },
  {
    "text": "is going to be linear\nin 2 to the k. And therefore, you're going\nto get polynomial decoding",
    "start": "1924140",
    "end": "1930300"
  },
  {
    "text": "complexity. The other question\nis performance. And you can show\nthat if you --",
    "start": "1930300",
    "end": "1939770"
  },
  {
    "text": "well, even if you don't use\nreliability information, you can get all the way to the\ncapacity of this underlying",
    "start": "1939770",
    "end": "1947360"
  },
  {
    "text": "channel here with\nexponentially-decreasing error rate for any rate below\nthat capacity.",
    "start": "1947360",
    "end": "1955080"
  },
  {
    "text": "Not as good an exponent as if\nyou just used random codes per",
    "start": "1955080",
    "end": "1960529"
  },
  {
    "text": "Shannon and coded for the\nchannel, but nonetheless, you basically get what you want.",
    "start": "1960530",
    "end": "1966030"
  },
  {
    "text": "So using two smaller, simpler\ncodes to create one long code",
    "start": "1966030",
    "end": "1973310"
  },
  {
    "text": "turned out to be a good idea. First of all, for proving this\ntheoretical result, you could",
    "start": "1973310",
    "end": "1978520"
  },
  {
    "text": "get exponentially-decreasing\nerror rate for polynomial increasing decoding\ncomplexity.",
    "start": "1978520",
    "end": "1984190"
  },
  {
    "text": "And within about 10 years,\nthis is what people actually did. ",
    "start": "1984190",
    "end": "1990510"
  },
  {
    "text": "And, in fact, what people\nactually did -- I've got a block code here, but\nwhat people actually did",
    "start": "1990510",
    "end": "1999390"
  },
  {
    "text": "was they used a short\nconstraint length convolutional code here,\nwhich we'll be talking",
    "start": "1999390",
    "end": "2005380"
  },
  {
    "text": "about after the break. Convolutional codes tend to\nhave a better performance",
    "start": "2005380",
    "end": "2011260"
  },
  {
    "text": "complexity tradeoff,\nparticularly in soft decision situations than block\ncodes do.",
    "start": "2011260",
    "end": "2017059"
  },
  {
    "text": "So in a practical system, it's\nalmost always better to use a",
    "start": "2017060",
    "end": "2022270"
  },
  {
    "text": "convolutional code than\na block code. We'll discuss the reasons why. So this convolutional code\nhere, there is a maximum",
    "start": "2022270",
    "end": "2030270"
  },
  {
    "text": "likelihood sequence detector\nfor the convolutional code down here, which is the Viterbi\nalgorithm, which",
    "start": "2030270",
    "end": "2035710"
  },
  {
    "text": "you've probably all\nheard about. And this is very practical as\nlong as the constraint length,",
    "start": "2035710",
    "end": "2042390"
  },
  {
    "text": "k, now becomes the constraint\nlength, nu, of the code doesn't get too large.",
    "start": "2042390",
    "end": "2047600"
  },
  {
    "text": "So for about 20 years, the\nstandard for space",
    "start": "2047600",
    "end": "2052820"
  },
  {
    "text": "communication was this was a\n(255, 223, 33) Reed-Solomon",
    "start": "2052820",
    "end": "2060330"
  },
  {
    "text": "code over F-256.",
    "start": "2060330",
    "end": "2067270"
  },
  {
    "text": "This is a constraint length 6,\nrate 1/2 convolutional code.",
    "start": "2067270",
    "end": "2075560"
  },
  {
    "text": " This is a 64-state Viterbi\nalgorithm.",
    "start": "2075560",
    "end": "2085270"
  },
  {
    "text": "So what's the -- again, if we have a look at the\nerror channel, here is a",
    "start": "2085270",
    "end": "2092319"
  },
  {
    "text": "stream of bits coming along. After encoding and decoding,\nwhat we typically see is",
    "start": "2092320",
    "end": "2098960"
  },
  {
    "text": "bursts of errors, all right? So you get a burst\nthat starts --",
    "start": "2098960",
    "end": "2104640"
  },
  {
    "text": "in convolutional codes, it can\nstart at a random time, end at a random time. You might get another discrete\nerror event over here.",
    "start": "2104640",
    "end": "2114730"
  },
  {
    "text": "In other words, most\nof the time, the decoder is decoding properly. What you're receiving is what\nyou transmitted in a",
    "start": "2114730",
    "end": "2122220"
  },
  {
    "text": "streamwise fashion. The bits just are transmitted\nforever.",
    "start": "2122220",
    "end": "2127510"
  },
  {
    "text": "But every so often, the decoder\ngets off on the wrong track, puts out errors for\na while, then gets",
    "start": "2127510",
    "end": "2133000"
  },
  {
    "text": "resynchronized, and decodes\ncorrectly again. Is my picture clear?",
    "start": "2133000",
    "end": "2140140"
  },
  {
    "text": "I'm using words, mainly, to tell\nyou what it represents. OK.",
    "start": "2140140",
    "end": "2147290"
  },
  {
    "text": "So now, basically, what you want\nto do is, just as we did in the packet communication\ncase, you want to send",
    "start": "2147290",
    "end": "2156940"
  },
  {
    "text": "multiple parallel streams, up\nto 256 of them, such that in",
    "start": "2156940",
    "end": "2165940"
  },
  {
    "text": "this stream, you're going to get\nindependent error blocks. And this one, you're\ngoing to get errors",
    "start": "2165940",
    "end": "2172710"
  },
  {
    "text": "occurring somewhere else. They're going to have\na typical length. You can very well estimate what\nthe typical length of",
    "start": "2172710",
    "end": "2181290"
  },
  {
    "text": "error events is, but they\noccur randomly. And now you use the Reed-Solomon\ncode, coding",
    "start": "2181290",
    "end": "2187010"
  },
  {
    "text": "across this, and that will\nbasically give you this",
    "start": "2187010",
    "end": "2195430"
  },
  {
    "text": "picture over here.  How would I get this?",
    "start": "2195430",
    "end": "2202670"
  },
  {
    "text": "One way is by using a block\ninterleaver, which is",
    "start": "2202670",
    "end": "2214569"
  },
  {
    "text": "described in the notes. A block interleaver, you\nbasically take a long block",
    "start": "2214570",
    "end": "2221039"
  },
  {
    "text": "from the convolutional code\nand you just encode and transmit along here and\nultimately decode.",
    "start": "2221040",
    "end": "2228349"
  },
  {
    "text": "And after a very long time,\nyou come back and start transmitting the second\nrow just as part of the same stream.",
    "start": "2228350",
    "end": "2235140"
  },
  {
    "text": "And then the third\nrow and so forth. And if the block length n,\nhere, is long enough, the",
    "start": "2235140",
    "end": "2246630"
  },
  {
    "text": "errors in different rows\nwill be effectively independent, all right? So again, you wind up with\nvery long blocks in this",
    "start": "2246630",
    "end": "2254850"
  },
  {
    "text": "scheme, but analytically,\nit works. And in practice, this is roughly\nwhat's done, except",
    "start": "2254850",
    "end": "2265106"
  },
  {
    "text": "there is such a thing as a\nconvolutional interleaver, which again, operates streamwise\nand actually",
    "start": "2265106",
    "end": "2272790"
  },
  {
    "text": "performs better in practice. But I won't take the time to go\ninto this because we're not",
    "start": "2272790",
    "end": "2278300"
  },
  {
    "text": "going to really be getting into\nthings like interleavers. Do you see how this works?",
    "start": "2278300",
    "end": "2283780"
  },
  {
    "text": "OK. So it works well\ntheoretically. It gives us the theoretical\nresult we want.",
    "start": "2283780",
    "end": "2290380"
  },
  {
    "text": "Works well in practice. ",
    "start": "2290380",
    "end": "2295570"
  },
  {
    "text": "As I say, this was the\nstandard for space communications during the\n'70s and the '80s.",
    "start": "2295570",
    "end": "2303710"
  },
  {
    "text": "Around the end of the '80s,\nthey upgraded this. First of all, they replaced this\nby a nu equals 14, rate",
    "start": "2303710",
    "end": "2315860"
  },
  {
    "text": "1/6, lower rate convolutional\ncode, so this now becomes a 2",
    "start": "2315860",
    "end": "2321780"
  },
  {
    "text": "to the 1fourth state\nViterbi decoder. They built this huge rack at\nJPL that had 8,192 parallel",
    "start": "2321780",
    "end": "2333109"
  },
  {
    "text": "decoding units,\nadd-compare-select units in the Viterbi algorithm,\nto decode this thing.",
    "start": "2333110",
    "end": "2338560"
  },
  {
    "text": "But, of course, they only need\nto do that in one place, in the space program. Everything comes back to JPL.",
    "start": "2338560",
    "end": "2344559"
  },
  {
    "text": "So they built this BVD,\nBig Viterbi decoder. ",
    "start": "2344560",
    "end": "2350210"
  },
  {
    "text": "And first, they used it with\nthis code and then they souped up the Reed-Solomon code.",
    "start": "2350210",
    "end": "2357109"
  },
  {
    "text": "And by about 1990, 1991, they\ngot this thing operating up",
    "start": "2357110",
    "end": "2363810"
  },
  {
    "text": "within about 2 dB of the\nShannon limit, OK? Which was considered a heroic\nfeat at the time, or even now.",
    "start": "2363810",
    "end": "2372200"
  },
  {
    "text": "So that kind of tells you, in\nthe terms we've been using in this course, just what\nyou can get out of",
    "start": "2372200",
    "end": "2379400"
  },
  {
    "text": "this kind of approach.  At that point, that was\nconsidered coding is dead.",
    "start": "2379400",
    "end": "2388520"
  },
  {
    "text": "There's really nothing\nmore to do. We're within about 2 dB of the\nShannon limit and it's inconceivable that we\ncould actually get",
    "start": "2388520",
    "end": "2394820"
  },
  {
    "text": "any closer than that. Second half of the course will,\nof course, tell us how we can get within 0.0045 dB\nof the Shannon limit.",
    "start": "2394820",
    "end": "2403290"
  },
  {
    "text": "But that was the state of\nthe art as of about 1990, 15 years ago.",
    "start": "2403290",
    "end": "2411460"
  },
  {
    "text": "Questions? Comments? OK. ",
    "start": "2411460",
    "end": "2418849"
  },
  {
    "text": "All right. I'll just mention a third\napplication is burst error",
    "start": "2418850",
    "end": "2425260"
  },
  {
    "text": "correction, which really,\nwe've already been talking about. ",
    "start": "2425260",
    "end": "2435480"
  },
  {
    "text": "Suppose -- let's let this be a\nnaked channel now. Suppose you're transmitting\nwith an",
    "start": "2435480",
    "end": "2442870"
  },
  {
    "text": "interleave scheme like this. And now, in the same way -- it's a radio channel or\nsomething and every so often,",
    "start": "2442870",
    "end": "2449250"
  },
  {
    "text": "you have an outage just due to\nfading, or a thunderstorm, or somebody turns on his vacuum\ncleaner, or whatever.",
    "start": "2449250",
    "end": "2458010"
  },
  {
    "text": "Every so often, as you\ntransmit, you're going to get bursts. You don't have independent, identically-distributed errors.",
    "start": "2458010",
    "end": "2464350"
  },
  {
    "text": "The character of the channel is\nsuch that you see bursts of errors, which is precisely\nwhat you do in this super",
    "start": "2464350",
    "end": "2470210"
  },
  {
    "text": "channel here. Every so often, you see a bunch\nof errors if you have",
    "start": "2470210",
    "end": "2476380"
  },
  {
    "text": "the original transmitted scheme\nto compare it to. All right. In exactly the same way,\nyou can code --",
    "start": "2476380",
    "end": "2484290"
  },
  {
    "text": "with something like this block\ninterleaver, you can code across channels and correct\nthe bursts with",
    "start": "2484290",
    "end": "2491950"
  },
  {
    "text": "Reed-Solomon codes. And here, it's quite easy\nto show that, because",
    "start": "2491950",
    "end": "2497100"
  },
  {
    "text": "Reed-Solomon codes have optimal\nparameters n, k, d, that Reed-Solomon codes do\nthe best possible job of",
    "start": "2497100",
    "end": "2504140"
  },
  {
    "text": "correcting burst errors that you\npossibly could do, given some specification for how long\nthe bursts could possibly",
    "start": "2504140",
    "end": "2512579"
  },
  {
    "text": "be and the minimum guard\nspace between bursts.",
    "start": "2512580",
    "end": "2520820"
  },
  {
    "text": "This is classical stuff. Reed-Solomon codes are optimum\nburst correctors if you",
    "start": "2520820",
    "end": "2526819"
  },
  {
    "text": "describe the burst channel by\nmax burst length in a minimum guard space.",
    "start": "2526820",
    "end": "2534029"
  },
  {
    "text": "Is that too brief? Probably is. Give you some impression of\nwhat we're talking about.",
    "start": "2534029",
    "end": "2539700"
  },
  {
    "text": "So Reed-Solomon codes are\noptimum for burst error correction, which, most real\nchannels are bursty.",
    "start": "2539700",
    "end": "2549750"
  },
  {
    "text": "The only non-bursty channel\nthat we really have is the additive white Gaussian noise\nchannel, ultimately.",
    "start": "2549750",
    "end": "2556300"
  },
  {
    "text": "That is the channel in space\ncommunications, which is why you can apply a nice,\ntextbook-type code like this",
    "start": "2556300",
    "end": "2565280"
  },
  {
    "text": "to the space channel. For any other channel,\ntypically, you have to use some kind of interleaving to\nbreak up the bursts so",
    "start": "2565280",
    "end": "2572460"
  },
  {
    "text": "that you can -- this simply is no information\nover a long time.",
    "start": "2572460",
    "end": "2578120"
  },
  {
    "text": "If you tried to encode crossways\non this, you'd have to have a code that's long\nenough to see the average",
    "start": "2578120",
    "end": "2585700"
  },
  {
    "text": "burst's behavior. We'd make the burst have\nan ergodic model.",
    "start": "2585700",
    "end": "2593369"
  },
  {
    "text": "The way to do that in practice\nis to code across it so you get independent snippets of\nwidely separated bursts which",
    "start": "2593370",
    "end": "2601180"
  },
  {
    "text": "can be assumed to\nbe independent. Yeah. AUDIENCE: [INAUDIBLE]? ",
    "start": "2601180",
    "end": "2608890"
  },
  {
    "text": "PROFESSOR: No different,\nreally. AUDIENCE: [INAUDIBLE]. PROFESSOR: Yeah, in space\nchannel -- all right.",
    "start": "2608890",
    "end": "2616010"
  },
  {
    "text": "Here, I'm talking about\npower limit. That's a good question. But if you think about the\nband-limited regime,",
    "start": "2616010",
    "end": "2624540"
  },
  {
    "text": "let's suppose -- so this would be some\n[? MRE ?] channel. You would use some multilevel\nsignaling scheme like QAM with",
    "start": "2624540",
    "end": "2633570"
  },
  {
    "text": "a large signal set or QPSK or\nsomething like that to get a basic transmission with a\ndiscrete signal set that",
    "start": "2633570",
    "end": "2642710"
  },
  {
    "text": "doesn't lose too much\nover sending Gaussian over the channel.",
    "start": "2642710",
    "end": "2648730"
  },
  {
    "text": "Again, this will be later\nin the course. We'll talk about\nthis in detail. Other than that --",
    "start": "2648730",
    "end": "2655770"
  },
  {
    "text": "well, all right, so now this\nis an MRE channel. If M is large enough, then you\ncould apply Reed-Solomon codes",
    "start": "2655770",
    "end": "2662660"
  },
  {
    "text": "right here. But typically, it's not. M is like 16 or 64.",
    "start": "2662660",
    "end": "2668589"
  },
  {
    "text": "And so Reed-Solomon codes would\nstill be too short. You would not be able\nto get long enough",
    "start": "2668590",
    "end": "2674369"
  },
  {
    "text": "codes over such a channel. So a similar kind of\nthing can be done.",
    "start": "2674370",
    "end": "2680210"
  },
  {
    "text": "And the history of\nbandwidth-limited coding pretty much parallels that\nof power-limited coding.",
    "start": "2680210",
    "end": "2687530"
  },
  {
    "text": "What corresponds to block codes\nhere is lattice codes",
    "start": "2687530",
    "end": "2692740"
  },
  {
    "text": "for this channel. What corresponds to\nconvolutional codes is trellis-coded modulation.",
    "start": "2692740",
    "end": "2699510"
  },
  {
    "text": "And again, once you handle the\nbasic physical channel with",
    "start": "2699510",
    "end": "2705180"
  },
  {
    "text": "these codes that are well\nmatched to that channel but whose complexity increases too\nrapidly if you make them long",
    "start": "2705180",
    "end": "2711420"
  },
  {
    "text": "because of exponential decoding,\nthen you can always clean up whatever\nerrors you make.",
    "start": "2711420",
    "end": "2718430"
  },
  {
    "text": "You can think of this as a\ncleanup function out here. Typically, the rates out\nhere are very high.",
    "start": "2718430",
    "end": "2724290"
  },
  {
    "text": "You don't need much\nredundancy. It doesn't cost too much\nin overall rate.",
    "start": "2724290",
    "end": "2730550"
  },
  {
    "text": "But even with very high rates,\nlike 223 over 255, you can do",
    "start": "2730550",
    "end": "2736340"
  },
  {
    "text": "a rather large amount\nof error correction. You can correct up to\n16 errors or 32",
    "start": "2736340",
    "end": "2741430"
  },
  {
    "text": "erasures with us channel. So this is a cleanup function. You basically work very hard\nin here, get the best error",
    "start": "2741430",
    "end": "2749310"
  },
  {
    "text": "probability you can, which -- it doesn't have to be too low. 10 to the minus 2, 10\nto the minus 3.",
    "start": "2749310",
    "end": "2755340"
  },
  {
    "text": "And then you use this to clean\nit up and that drives the error probability down to 10 to\nthe minus 12 or 10 to the",
    "start": "2755340",
    "end": "2760428"
  },
  {
    "text": "minus 15 or whatever\nyou really want. ",
    "start": "2760428",
    "end": "2765910"
  },
  {
    "text": "But the principles are\nthe same in power limit and band limit. But nice question.",
    "start": "2765910",
    "end": "2773730"
  },
  {
    "text": "Any other questions?  OK.",
    "start": "2773730",
    "end": "2779250"
  },
  {
    "text": "So as a result, Reed-Solomon\ncodes are the general purpose",
    "start": "2779250",
    "end": "2786290"
  },
  {
    "text": "code that has emerged from\nalgebraic coding theory.",
    "start": "2786290",
    "end": "2792310"
  },
  {
    "text": "A good example of burst error\ncorrection is, you know on your CDs, there is an error\ncorrection scheme incorporated",
    "start": "2792310",
    "end": "2801260"
  },
  {
    "text": "such that if you scratch\nthe CD, it still works. How does that work? It could only be because\nthere's some error",
    "start": "2801260",
    "end": "2808380"
  },
  {
    "text": "correction in there. What, actually, is the error\ncorrection scheme?",
    "start": "2808380",
    "end": "2813809"
  },
  {
    "text": "I'm not sure I know what the\nlatest and greatest is, but generally, the error correction\nschemes for",
    "start": "2813810",
    "end": "2821310"
  },
  {
    "text": "magnetic memory recording\nlike that have used Reed-Solomon codes --",
    "start": "2821310",
    "end": "2828160"
  },
  {
    "text": "have used two Reed-Solomon\ncodes in interleave fashion like this. So the across code\nis Reed-Solomon.",
    "start": "2828160",
    "end": "2834290"
  },
  {
    "text": "The down code is Reed-Solomon. As a result, if you make a\nscratch through the disc, you",
    "start": "2834290",
    "end": "2840820"
  },
  {
    "text": "will cut all of these codes, but\nyou will cut each one in a",
    "start": "2840820",
    "end": "2848980"
  },
  {
    "text": "small enough place so that\nyou can correct it. So you can think of this as a\nactually a physical laying",
    "start": "2848980",
    "end": "2854620"
  },
  {
    "text": "down of Reed-Solomon codes on\nthe two-dimensional surface of the disc in such a way that --",
    "start": "2854620",
    "end": "2861710"
  },
  {
    "text": "well, even if your scratch came\nright across one whole channel here, then, of course,\nthis decoder would be dead.",
    "start": "2861710",
    "end": "2868780"
  },
  {
    "text": "But you still have somebody\ndecoding in this direction to pick up the errors.",
    "start": "2868780",
    "end": "2874740"
  },
  {
    "text": "And so that's why you can\ncompletely abuse these discs and they still work.",
    "start": "2874740",
    "end": "2881160"
  },
  {
    "text": "And when you think about what's\nactually going on, think of the transfer rates from\na CD to your computer.",
    "start": "2881160",
    "end": "2890120"
  },
  {
    "text": "It's up in the hundreds of\nmillions of bits per second.",
    "start": "2890120",
    "end": "2895160"
  },
  {
    "text": "Maybe its gigabits by now. Perhaps it is. And you've got this\nReed-Solomon -- these are non-trivial\nReed-Solomon decoders.",
    "start": "2895160",
    "end": "2902700"
  },
  {
    "text": "These are like this 16 error\ncorrecting decoder out here. And so these are working away at\nthat data rate, capable of",
    "start": "2902700",
    "end": "2911420"
  },
  {
    "text": "doing decoding. And they're cheap enough so that\nthey're just buried in part of one of the integrated\ncircuits in",
    "start": "2911420",
    "end": "2918990"
  },
  {
    "text": "your disc player circuitry. So that'd give you a physical\nsense for just how much error",
    "start": "2918990",
    "end": "2927150"
  },
  {
    "text": "correction power and speed you\ncan get out of this class of code decoder, OK?",
    "start": "2927150",
    "end": "2937050"
  },
  {
    "text": "So wherever you want an\nextremely powerful code and you're a little bit less\nconcerned with getting to",
    "start": "2937050",
    "end": "2943470"
  },
  {
    "text": "capacity, Reed-Solomon code\nis the way to go. It's absolutely part of\nyour toolbox, OK?",
    "start": "2943470",
    "end": "2952609"
  },
  {
    "text": " The last topic in chapter eight\nis BCH codes, which are",
    "start": "2952610",
    "end": "2970350"
  },
  {
    "text": "binary codes. So they're binary linear block\ncodes of the class we've been",
    "start": "2970350",
    "end": "2979760"
  },
  {
    "text": "discussing, comparable with\nReed-Muller codes. Reed-Muller codes were\ndiscovered in 1954 in two",
    "start": "2979760",
    "end": "2988960"
  },
  {
    "text": "separate papers by Reed\nand by Muller in two separate points of view.",
    "start": "2988960",
    "end": "2994790"
  },
  {
    "text": "And there are a million points\nof view you can have for Reed-Muller codes. We've used yet a third one.",
    "start": "2994790",
    "end": "3000050"
  },
  {
    "text": " BCH stands for Bose and\nChaudhury and Hocquenghem.",
    "start": "3000050",
    "end": "3009880"
  },
  {
    "text": "Bose and Chaudhury were both\nprofessors in the US. They wrote a paper about 1960\nintroducing Reed-Solomon",
    "start": "3009880",
    "end": "3018310"
  },
  {
    "text": "codes, which, by the way, and\nintroducing BC codes -- Bose-Chaudhury codes --",
    "start": "3018310",
    "end": "3025240"
  },
  {
    "text": "Reed-Solomon's paper\nwas in 1960 also. These were completely\nindependent of each other.",
    "start": "3025240",
    "end": "3031260"
  },
  {
    "text": "And then this fellow named\nHocquenghem in France, whose name I can't and few people can\npronounce, turned out he",
    "start": "3031260",
    "end": "3041230"
  },
  {
    "text": "had actually invented these\ncodes in 1959 in a paper that unfortunately was in French,\nso few people read it.",
    "start": "3041230",
    "end": "3049750"
  },
  {
    "text": "But anyway, in honor of all\nthree of these people, these are called BCH codes. These fit right into the main\ntheme of algebraic coding",
    "start": "3049750",
    "end": "3058070"
  },
  {
    "text": "theory at that time. Maybe stimulated it because\nthese turned out to be cyclic codes, or at least as they were\noriginally introduced.",
    "start": "3058070",
    "end": "3065920"
  },
  {
    "text": "And so when I was in school,\nwhich was in the early '60s,",
    "start": "3065920",
    "end": "3075130"
  },
  {
    "text": "these were considered the\ngreatest thing going. People were interested in binary\ncodes, algebraic codes",
    "start": "3075130",
    "end": "3083500"
  },
  {
    "text": "because they are slightly better\nthan Reed-Muller codes.",
    "start": "3083500",
    "end": "3089570"
  },
  {
    "text": "Now, I would say, there's sort\nof been a swing back. Shu Lin gave a paper about\n10 years ago that said",
    "start": "3089570",
    "end": "3095780"
  },
  {
    "text": "Reed-Muller codes\nare not so bad. In fact, in terms of performance\nversus complexity",
    "start": "3095780",
    "end": "3101140"
  },
  {
    "text": "for certain kinds of decoding\nschemes, trellis-based decoding, Reed-Muller codes\nare better than BCH codes.",
    "start": "3101140",
    "end": "3108000"
  },
  {
    "text": "So from a more modern\nprospective, we're more interested in Reed-Muller\nthan we are in BCH.",
    "start": "3108000",
    "end": "3113520"
  },
  {
    "text": "Nonetheless, you'll hear about\nthese a lot if you read the literature and so you ought\nto know what they are.",
    "start": "3113520",
    "end": "3121780"
  },
  {
    "text": "OK. Conceptually, what are they? Since we already know about\nReed-Solomon codes, the way",
    "start": "3121780",
    "end": "3131440"
  },
  {
    "text": "that I'm going to characterize\nBCH codes is as subfield subcodes of the Reed-Solomon\ncodes.",
    "start": "3131440",
    "end": "3139480"
  },
  {
    "text": "Now, if we have a Reed-Solomon\ncode over F2 to the 8 or",
    "start": "3139480",
    "end": "3145440"
  },
  {
    "text": "something, the field with 256\nelements, or any power of 2,",
    "start": "3145440",
    "end": "3152800"
  },
  {
    "text": "contains a subfield which is\njust 0 and 1, all right? All fields contains 0 and 1.",
    "start": "3152800",
    "end": "3160760"
  },
  {
    "text": "If the field has characteristic\n2, then 0 and 1 all by themselves are\nthe prime subfield.",
    "start": "3160760",
    "end": "3167730"
  },
  {
    "text": "So it's possible that there\nare certain words in the Reed-Muller code -- sorry, in\nthe Reed-Solomon code that are",
    "start": "3167730",
    "end": "3175660"
  },
  {
    "text": "completely made up\nof 0's and 1's. For instance, the all-0 word\nis certainly in the",
    "start": "3175660",
    "end": "3180740"
  },
  {
    "text": "Reed-Solomon code, so we have,\nat least, that one that's made up of all zeros.",
    "start": "3180740",
    "end": "3185890"
  },
  {
    "text": "Almost always, we find that the\nall-1 word is a code word. So we have a code with\nall 0's and all 1's.",
    "start": "3185890",
    "end": "3194349"
  },
  {
    "text": "And there might be\nmore of them. And that's actually very\nstraightforward, to find out",
    "start": "3194350",
    "end": "3199920"
  },
  {
    "text": "how many completely binary\nwords there are in a",
    "start": "3199920",
    "end": "3205290"
  },
  {
    "text": "Reed-Solomon code.  So it's the binary subfield.",
    "start": "3205290",
    "end": "3217080"
  },
  {
    "text": " We have F2 is a subfield of F2\nto the M for all M. OK, so a",
    "start": "3217080",
    "end": "3235079"
  },
  {
    "text": "subfield subcode, if we have\nan n, k, d equals n minus k",
    "start": "3235080",
    "end": "3247650"
  },
  {
    "text": "plus 1 Reed-Solomon code, then\nthe set of all BCH code is the",
    "start": "3247650",
    "end": "3264250"
  },
  {
    "text": "set of all binary code words,\ncode words that just use the 0",
    "start": "3264250",
    "end": "3272780"
  },
  {
    "text": "and 1 of the code alphabet. ",
    "start": "3272780",
    "end": "3279160"
  },
  {
    "text": "Call this c in C. So we\ncall this C prime.",
    "start": "3279160",
    "end": "3284319"
  },
  {
    "text": " OK, so what are its parameters\ngoing to be?",
    "start": "3284320",
    "end": "3292350"
  },
  {
    "text": "Its length is still going\nto be n, right? All the code words here are\nn-tuples, so these have got to",
    "start": "3292350",
    "end": "3300360"
  },
  {
    "text": "be n-tuples. We don't know its dimension. Let's just call it k prime.",
    "start": "3300360",
    "end": "3306109"
  },
  {
    "text": "That's how many such code\nwords are there? We're going to have to\ndo some combinatorics",
    "start": "3306110",
    "end": "3314190"
  },
  {
    "text": "to find that out. And what's the minimum\ndistance going to be?",
    "start": "3314190",
    "end": "3320600"
  },
  {
    "text": "Anybody?  AUDIENCE: [INAUDIBLE].",
    "start": "3320600",
    "end": "3327629"
  },
  {
    "text": "PROFESSOR: In general, well,\nit's certainly not going to be less than because, by definition\nof the minimum",
    "start": "3327629",
    "end": "3338090"
  },
  {
    "text": "distance, the minimum Hamming\ndistance between any two code words in this code is d, so\nwe're just looking at a subset",
    "start": "3338090",
    "end": "3345730"
  },
  {
    "text": "of the code words\nin this code. And the minimum squared distance\nhas to be at least d.",
    "start": "3345730",
    "end": "3351990"
  },
  {
    "text": " There's an example given\nin the notes. If we let c be the 4, 3 --",
    "start": "3351990",
    "end": "3362420"
  },
  {
    "text": "I think it's the 4, 2, 3, over\nF4, then C prime turns out to",
    "start": "3362420",
    "end": "3371109"
  },
  {
    "text": "be the 4, 1, 4 code over F2. ",
    "start": "3371110",
    "end": "3379390"
  },
  {
    "text": "In other words, the only two\ncode words in this code that are all binary are the all-0\nand all-1 sequences.",
    "start": "3379390",
    "end": "3386900"
  },
  {
    "text": "All right? So we actually get a minimum\ndistance of 4. It has to be at least 3 in\nthis particular case, so",
    "start": "3386900",
    "end": "3393470"
  },
  {
    "text": "here's an example where it\ncould be greater than 3. Or if there are cases where the\nsubcode just consists of",
    "start": "3393470",
    "end": "3401109"
  },
  {
    "text": "the all-0 word, then that, by\nconvention, has an infinite minimum distance.",
    "start": "3401110",
    "end": "3407330"
  },
  {
    "text": "So distance could be greater,\nbut it never can be less than what you started with.",
    "start": "3407330",
    "end": "3412980"
  },
  {
    "text": "On the other hand,\nthe dimension is clearly going to go down.",
    "start": "3412980",
    "end": "3418100"
  },
  {
    "text": "If it were still equal to what\nit was, then we'd have a binary MDS code and we know we\ndon't get binary MDS codes.",
    "start": "3418100",
    "end": "3426859"
  },
  {
    "text": "So in general, k prime decreases\nquite a bit. In this case, it just\ndecreases by 1.",
    "start": "3426860",
    "end": "3434640"
  },
  {
    "text": "And we have to find out\nhow it decreases. ",
    "start": "3434640",
    "end": "3442510"
  },
  {
    "text": "OK. I'm a little uncertain as to how\nmuch of the derivation --",
    "start": "3442510",
    "end": "3453059"
  },
  {
    "text": "so we need to find --  AUDIENCE: Is that [INAUDIBLE]\nat all points of",
    "start": "3453060",
    "end": "3458878"
  },
  {
    "text": "the field, is it? ",
    "start": "3458878",
    "end": "3468627"
  },
  {
    "text": "PROFESSOR: No. One of the characterizations\nyou have of Reed-Solomon",
    "start": "3468627",
    "end": "3474830"
  },
  {
    "text": "codes, I assume, was that\nthey're the set of all",
    "start": "3474830",
    "end": "3480390"
  },
  {
    "text": "polynomials of length n that\nevaluate to 0 at some",
    "start": "3480390",
    "end": "3486039"
  },
  {
    "text": "consecutive set of n minus\nk powers of alpha.",
    "start": "3486040",
    "end": "3492310"
  },
  {
    "text": "Did you see anything\nlike that? AUDIENCE: Yes. PROFESSOR: All right. In other words, they're --",
    "start": "3492310",
    "end": "3498950"
  },
  {
    "text": "let me write that down because\nRS code is the set of all",
    "start": "3498950",
    "end": "3513450"
  },
  {
    "text": "multiples f of x, g of x, of\ndegree less than n where of g",
    "start": "3513450",
    "end": "3535686"
  },
  {
    "text": "of x equals the product of x\nminus alpha to the i for i",
    "start": "3535686",
    "end": "3544560"
  },
  {
    "text": "equals 0 to n minus k minus one\nor something like that.",
    "start": "3544560",
    "end": "3550140"
  },
  {
    "text": "This is called a generator\npolynomial and -- so what does this mean? In other language, all\npolynomials of degree less",
    "start": "3550140",
    "end": "3558480"
  },
  {
    "text": "than n that have roots\nat 1 alpha, alpha squared, or so forth.",
    "start": "3558480",
    "end": "3566030"
  },
  {
    "text": "It's better to make this i\nequals 1 to n minus k. You can also make it minus i.",
    "start": "3566030",
    "end": "3573170"
  },
  {
    "text": "There are lots of\ndetails in here. But I'll just ask you broadly\nto recall that",
    "start": "3573170",
    "end": "3578950"
  },
  {
    "text": "characterization. This is a -- AUDIENCE: I have another\nquestion.",
    "start": "3578950",
    "end": "3584024"
  },
  {
    "text": "[INAUDIBLE] are not linear? PROFESSOR: OK, let's ask that. ",
    "start": "3584024",
    "end": "3590880"
  },
  {
    "text": "So we've got a set of\nbinary n-tuples, OK,",
    "start": "3590880",
    "end": "3598339"
  },
  {
    "text": "defined as the subset. So what do we need to\ndo to see whether it's linear or not?",
    "start": "3598340",
    "end": "3603560"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: We just check\nthe group property. Is it closed under addition?",
    "start": "3603560",
    "end": "3611710"
  },
  {
    "text": "Suppose we take two of these\ncode words we add them together, component-wise,\nvector form.",
    "start": "3611710",
    "end": "3617589"
  },
  {
    "text": " Seems to me we get A, that gives\nus another code word in",
    "start": "3617590",
    "end": "3626070"
  },
  {
    "text": "the Reed-Solomon code because\nit's closed under addition, and B, by the addition rules,\nit's going to be another",
    "start": "3626070",
    "end": "3633690"
  },
  {
    "text": "binary code word, all right? So it's another binary code\nword in the RS code,",
    "start": "3633690",
    "end": "3640450"
  },
  {
    "text": "therefore, it's in C prime. So that's proof that, in fact,\nthis code is linear.",
    "start": "3640450",
    "end": "3645670"
  },
  {
    "text": "AUDIENCE: What about\n[INAUDIBLE]? PROFESSOR: That's trivial. For a binary code, we only\nhave to consider two",
    "start": "3645670",
    "end": "3653190"
  },
  {
    "text": "scalars, 0 and 1. AUDIENCE: [INAUDIBLE]?  PROFESSOR: But now I'm\nasking whether this",
    "start": "3653190",
    "end": "3660160"
  },
  {
    "text": "binary code is linear.  There's the code over F2.",
    "start": "3660160",
    "end": "3665310"
  },
  {
    "text": " Yes? You had a -- AUDIENCE: Same question.",
    "start": "3665310",
    "end": "3671450"
  },
  {
    "text": "The base field is F2 to the x,\nso if you add 1 and 1 there, it wouldn't be just 0.",
    "start": "3671450",
    "end": "3677740"
  },
  {
    "text": "But I guess if you restrict the\nfield to F2, you have to check everything again,\ndon't you?",
    "start": "3677740",
    "end": "3683744"
  },
  {
    "text": "PROFESSOR: No, because we said\nF2 is the subfield of F2 to",
    "start": "3683745",
    "end": "3689710"
  },
  {
    "text": "the M. And what we actually\nshowed was that if you just stay in the prime field, the\nintegers of the field, then",
    "start": "3689710",
    "end": "3699520"
  },
  {
    "text": "you get exactly the same\naddition and multiplication rules as you do in\nthe prime field.",
    "start": "3699520",
    "end": "3706400"
  },
  {
    "text": "So in fact, in a field of\ncharacteristic 2, we always have 0 plus 1 is 1, 0 plus 1\nplus 0 is 1, 1 plus 1 is 0.",
    "start": "3706400",
    "end": "3717710"
  },
  {
    "text": "That last one is the only one\nyou really have to check. So that accounts for the\ndefinition of characteristic,",
    "start": "3717710",
    "end": "3725840"
  },
  {
    "text": "and that's the reason we can\nalways use just plus signs, because subtraction is\nthe same as addition.",
    "start": "3725840",
    "end": "3731890"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]?  PROFESSOR: Yeah.",
    "start": "3731890",
    "end": "3737809"
  },
  {
    "text": "We showed --  well, very simple proof.",
    "start": "3737810",
    "end": "3744255"
  },
  {
    "text": " The order of a subgroup has\nto define the order of",
    "start": "3744255",
    "end": "3750940"
  },
  {
    "text": "the group it's in. The additive group of the prime\nfield has order 2 to the M, so it has to be some divisor\nof 2 to the M, which",
    "start": "3750940",
    "end": "3758480"
  },
  {
    "text": "is a prime. ",
    "start": "3758480",
    "end": "3763740"
  },
  {
    "text": "I think we proved that another\nway, but that's a very simple proof.",
    "start": "3763740",
    "end": "3769329"
  },
  {
    "text": "OK, great questions, because it\nshows you're thinking about",
    "start": "3769330",
    "end": "3774350"
  },
  {
    "text": "how this relates to what you\nlearned back in chapter seven. But at this point you've kind\nof got a little vague about",
    "start": "3774350",
    "end": "3780420"
  },
  {
    "text": "chapter seven, what's\nreally in there. By Wednesday, you're really\ngoing to know chapter seven well.",
    "start": "3780420",
    "end": "3785900"
  },
  {
    "text": "Let me tell you. ",
    "start": "3785900",
    "end": "3791240"
  },
  {
    "text": "OK. Good. Thank you for the help.",
    "start": "3791240",
    "end": "3796290"
  },
  {
    "text": "Because these are all things\nthat I should have just said up here, but they come out much\nbetter, actually, if they come out in response\nto questions.",
    "start": "3796290",
    "end": "3802700"
  },
  {
    "text": " OK. ",
    "start": "3802700",
    "end": "3809650"
  },
  {
    "text": "So here's one characterization\nof a Reed-Solomon code which",
    "start": "3809650",
    "end": "3816990"
  },
  {
    "text": "apparently you did see. It's the set of all multiples of\nsome generator polynomial. The generator polynomial is\ndescribed as this polynomial",
    "start": "3816990",
    "end": "3825200"
  },
  {
    "text": "of degree n minus k whose roots\nare precisely alpha up",
    "start": "3825200",
    "end": "3833290"
  },
  {
    "text": "through alpha to\nthe n minus k. You did say that? OK. ",
    "start": "3833290",
    "end": "3840960"
  },
  {
    "text": "So similarly, the BCH code --",
    "start": "3840960",
    "end": "3850460"
  },
  {
    "text": "I'm just going to assert this\njust to show you how it goes. It's the set of all multiples of\ng prime of x, which is the",
    "start": "3850460",
    "end": "3867550"
  },
  {
    "text": "minimal degree binary\npolynomial",
    "start": "3867550",
    "end": "3887590"
  },
  {
    "text": "with the same roots. ",
    "start": "3887590",
    "end": "3895810"
  },
  {
    "text": "Now, how can a binary\npolynomial -- ",
    "start": "3895810",
    "end": "3901940"
  },
  {
    "text": "alpha to the n minus k. How can a binary polynomial\nhave non-binary roots?",
    "start": "3901940",
    "end": "3909280"
  },
  {
    "text": " Well, it clearly can.",
    "start": "3909280",
    "end": "3915290"
  },
  {
    "text": "Let's consider g\nof prime of x. ",
    "start": "3915290",
    "end": "3921260"
  },
  {
    "text": "It's an element of F2 to the x,\nthe set of all polynomials",
    "start": "3921260",
    "end": "3929030"
  },
  {
    "text": "over F2, which is a subset of\nthe set of all polynomials",
    "start": "3929030",
    "end": "3937550"
  },
  {
    "text": "over 2 to the M for\nthe same reason. F2 is the subfield of F2 to\nthe M, so some of the",
    "start": "3937550",
    "end": "3943599"
  },
  {
    "text": "polynomials over F2 to the\nM have purely binary coefficients, all right?",
    "start": "3943600",
    "end": "3949040"
  },
  {
    "text": "So that's the sense -- that's how we can get between\nthese two things.",
    "start": "3949040",
    "end": "3954615"
  },
  {
    "start": "3954615",
    "end": "3965260"
  },
  {
    "text": "So some binary polynomials have\nroots in GF of 2 the M",
    "start": "3965260",
    "end": "3972660"
  },
  {
    "text": "let me give you an example.  Let's consider x squared plus x\nplus 1 as a polynomial in F4",
    "start": "3972660",
    "end": "3989859"
  },
  {
    "text": "of x, which is certainly is.",
    "start": "3989860",
    "end": "3997320"
  },
  {
    "text": "It's a polynomial of degree\n2 and F4 of x.",
    "start": "3997320",
    "end": "4002740"
  },
  {
    "text": "What are its roots in F4 of x? Does it have any roots\nin F4 of x?",
    "start": "4002740",
    "end": "4008890"
  },
  {
    "text": "Does it have any\nroots in F2 -- sorry, I'm asking whether\nit has any roots in F4.",
    "start": "4008890",
    "end": "4016269"
  },
  {
    "text": "Now I step back and ask if\nit has any roots in F2. So how do we do that?",
    "start": "4016270",
    "end": "4021320"
  },
  {
    "text": "We just ask if F of x\nis 0 for x equals 0.",
    "start": "4021320",
    "end": "4028150"
  },
  {
    "text": "We get 1. So it's not a root of 0. Substitute 1, we get\n1 plus 1 plus 1.",
    "start": "4028150",
    "end": "4035609"
  },
  {
    "text": "1 is not a root F of x. All right. Well, we have two\nmore candidates.",
    "start": "4035610",
    "end": "4041620"
  },
  {
    "text": "How about alpha? For alpha, we get F of alpha\nequals alpha squared plus",
    "start": "4041620",
    "end": "4049490"
  },
  {
    "text": "alpha plus 1. And if you remember the addition\ntable of F4, however",
    "start": "4049490",
    "end": "4057579"
  },
  {
    "text": "it's constructed, this\nequals 0, OK? ",
    "start": "4057580",
    "end": "4070849"
  },
  {
    "text": "0, 1, alpha, alpha, squared. 0, 1 alpha, alpha squared. 0, 1, alpha, alpha, squared.",
    "start": "4070850",
    "end": "4079040"
  },
  {
    "text": "This is plus. 1, alpha, alpha, squared. 0, 1 plus alpha is\nalpha squared.",
    "start": "4079040",
    "end": "4086849"
  },
  {
    "text": "1 plus alpha squared is alpha. Any of these is telling\nyou the same thing.",
    "start": "4086850",
    "end": "4092130"
  },
  {
    "text": "0, 1, 0, 1 alpha,\nsquared alpha. So we conclude from that that 1\nplus 1 plus alpha, which is",
    "start": "4092130",
    "end": "4099818"
  },
  {
    "text": "alpha squared, plus alpha\nsquared is 0. ",
    "start": "4099819",
    "end": "4107609"
  },
  {
    "text": "So alpha is, in fact,\na root of this. And what about F of\nalpha squared?",
    "start": "4107609",
    "end": "4116859"
  },
  {
    "text": "Alpha squared squared is alpha\nfourth, but we can reduce that mod 3 --",
    "start": "4116859",
    "end": "4124229"
  },
  {
    "text": "the exponent mod 3. So this is alpha plus alpha\nsquared plus 1 and that is",
    "start": "4124229",
    "end": "4130350"
  },
  {
    "text": "equal to 0. So alpha and alpha squared are\nroots of this polynomial.",
    "start": "4130350",
    "end": "4136579"
  },
  {
    "start": "4136580",
    "end": "4145910"
  },
  {
    "text": "There's a lovely fact proved\nin the notes, which is that",
    "start": "4145910",
    "end": "4168859"
  },
  {
    "text": "every element of --",
    "start": "4168859",
    "end": "4177799"
  },
  {
    "text": "facts. Every element of F2 to the\nM is a root of x 2",
    "start": "4177800",
    "end": "4192660"
  },
  {
    "text": "to the M plus x. ",
    "start": "4192660",
    "end": "4201330"
  },
  {
    "text": "OK, did you see something\nlike this last time? I see some shaking of heads. ",
    "start": "4201330",
    "end": "4210010"
  },
  {
    "text": "OK.  And how many roots could there\npossibly be of x 2 to the M",
    "start": "4210010",
    "end": "4218100"
  },
  {
    "text": "plus x by the fundamental\ntheorem of algebra? AUDIENCE: 2 to the M. PROFESSOR: 2 to the M. So\nthat means that x 2 to",
    "start": "4218100",
    "end": "4228520"
  },
  {
    "text": "the M plus x -- and for every root, it's got to\nhave a factor of the form x",
    "start": "4228520",
    "end": "4239570"
  },
  {
    "text": "minus, or in this\ncase, plus beta. So this must have a complete\nfactorization of",
    "start": "4239570",
    "end": "4246590"
  },
  {
    "text": "the following form. ",
    "start": "4246590",
    "end": "4253750"
  },
  {
    "text": "x 2 to the M plus x is simply\nthe product of x minus beta. ",
    "start": "4253750",
    "end": "4262370"
  },
  {
    "text": "All right.  In fact, you can see that\n0 a root, obviously.",
    "start": "4262370",
    "end": "4271190"
  },
  {
    "text": "1 is a root, obviously. And we've checked up here.",
    "start": "4271190",
    "end": "4280730"
  },
  {
    "text": "Let's see, what are\nwe interested in? Here's another example. x to the fourth plus\n1, f of --",
    "start": "4280730",
    "end": "4288770"
  },
  {
    "text": "if we have g of x equals x to\nthe four -- sorry -- plus x, then g of alpha is alpha to\nthe fourth plus alpha.",
    "start": "4288770",
    "end": "4298619"
  },
  {
    "text": "But alpha to the fourth is equal\nto alpha, so that's 0. g to the alpha squared\nequals alpha to the",
    "start": "4298620",
    "end": "4307450"
  },
  {
    "text": "8th plus alpha squared. Alpha to the 8th is alpha to the\nfifth is alpha squared, so",
    "start": "4307450",
    "end": "4313570"
  },
  {
    "text": "that equals 0. So, in fact, that's true\nfor that case.",
    "start": "4313570",
    "end": "4319095"
  },
  {
    "start": "4319095",
    "end": "4324720"
  },
  {
    "text": "Every irreducible polynomial g\nof x and F2 of x whose degree",
    "start": "4324720",
    "end": "4358450"
  },
  {
    "text": "g of x divides 2 to the M --",
    "start": "4358450",
    "end": "4365555"
  },
  {
    "start": "4365555",
    "end": "4374440"
  },
  {
    "text": "is that right? This may be 2 to\nthe M minus --",
    "start": "4374440",
    "end": "4381225"
  },
  {
    "text": " I think it's whose degree\ndivides M --",
    "start": "4381225",
    "end": "4386989"
  },
  {
    "text": " is a factor of x to the 2M\nplus x in F2 to the x.",
    "start": "4386990",
    "end": "4403605"
  },
  {
    "start": "4403605",
    "end": "4409910"
  },
  {
    "text": "OK. So let's give you an\nexample again.",
    "start": "4409910",
    "end": "4417930"
  },
  {
    "text": "Example M equals 2. This means, what are the\nirreducible polynomials whose",
    "start": "4417930",
    "end": "4424170"
  },
  {
    "text": "degrees divide 2?  The prime polynomials of degree\n1 certainly divides to",
    "start": "4424170",
    "end": "4439320"
  },
  {
    "text": "our x and x plus 1. Do they divide x to\nthe fourth plus 1?",
    "start": "4439320",
    "end": "4448240"
  },
  {
    "text": "Yeah, they do. ",
    "start": "4448240",
    "end": "4453390"
  },
  {
    "text": "How many prime polynomials\nare there of degree 2? There's only one, x squared\nplus x plus 1.",
    "start": "4453390",
    "end": "4463080"
  },
  {
    "text": "And if you divide it out into\nx to the fourth plus 1, it",
    "start": "4463080",
    "end": "4469720"
  },
  {
    "text": "goes evenly.  It turns out that what this\nimplies is that this is",
    "start": "4469720",
    "end": "4482610"
  },
  {
    "text": "actually an if or only if. A polynomial g of x divides x\nto 2 to the M plus x if and",
    "start": "4482610",
    "end": "4490990"
  },
  {
    "text": "only if g of x has a degree\nwhich divides M and g of x is",
    "start": "4490990",
    "end": "4496940"
  },
  {
    "text": "irreducible. So this implies that x to the\nM plus x factors in F2 of x",
    "start": "4496940",
    "end": "4512120"
  },
  {
    "text": "into the product of all\nirreducible polynomials whose",
    "start": "4512120",
    "end": "4525010"
  },
  {
    "text": "degrees divide M. And I think\nyou did a homework problem",
    "start": "4525010",
    "end": "4532780"
  },
  {
    "text": "that used this, even though it\nwas never proved in class. So you at least read about it.",
    "start": "4532780",
    "end": "4538180"
  },
  {
    "text": " Again, for this example, that\nshould mean that x to the",
    "start": "4538180",
    "end": "4545429"
  },
  {
    "text": "fourth plus 1 equals x times\nx plus 1 times x",
    "start": "4545430",
    "end": "4551880"
  },
  {
    "text": "squared plus x plus 1. Is that true? ",
    "start": "4551880",
    "end": "4558510"
  },
  {
    "text": "Pretty easy to see that it is. x plus 1 times x squared\nplus x plus 1 is just x cubed plus 1.",
    "start": "4558510",
    "end": "4565440"
  },
  {
    "text": "Multiply by x -- I'm sorry, this x\nfourth plus x. How many times have\nI done this?",
    "start": "4565440",
    "end": "4570969"
  },
  {
    "text": "Should be x to the\nfourth plus x. Yes.",
    "start": "4570970",
    "end": "4577390"
  },
  {
    "text": "OK, it's kind of miracle\nwhen you first see it. This works over any field for\nany PNM again, lest you get",
    "start": "4577390",
    "end": "4586949"
  },
  {
    "text": "this kind of factorization.  OK, but now, comparing this to\nthis, what does that mean?",
    "start": "4586950",
    "end": "4596210"
  },
  {
    "text": "That means this is one\nfactorization.",
    "start": "4596210",
    "end": "4602290"
  },
  {
    "text": "This is in -- we can do a complete\nfactorization in",
    "start": "4602290",
    "end": "4608050"
  },
  {
    "text": "F2 to the M of x. We can only do complete in the\nsense that we reduce it to a",
    "start": "4608050",
    "end": "4615469"
  },
  {
    "text": "product of degree\n1 polynomials. In F2 of x, we can't do a\ncomplete factorization.",
    "start": "4615470",
    "end": "4622790"
  },
  {
    "text": "This is similar to, over the\ncomplex field you can always completely factor a polynomial\ninto one-dimensional",
    "start": "4622790",
    "end": "4632250"
  },
  {
    "text": "polynomials of this form, where\nbeta is the set of roots of the polynomial. Whereas over the real field,\nyou might have to have some",
    "start": "4632250",
    "end": "4641909"
  },
  {
    "text": "degree 2 polynomials in there. This is exactly analogous. You can't get complete",
    "start": "4641910",
    "end": "4648659"
  },
  {
    "text": "factorization over this subfield. But what does it mean?",
    "start": "4648660",
    "end": "4654700"
  },
  {
    "text": "Here we have a polynomial of\ndegree 4, has 4 roots. We factor like this. So each of these factors must\ncontain a number of roots",
    "start": "4654700",
    "end": "4663380"
  },
  {
    "text": "equal to its degree. So what are the roots? This is the polynomial\nthat has root 0.",
    "start": "4663380",
    "end": "4671170"
  },
  {
    "text": "This is the polynomial\nthat has root 1. As we just showed, this is the\npolynomial that has the roots",
    "start": "4671170",
    "end": "4676710"
  },
  {
    "text": "alpha and alpha squared, OK?  So it's always going to\nturn out that way.",
    "start": "4676710",
    "end": "4685290"
  },
  {
    "text": "So you can group the field\nelements into subsets where",
    "start": "4685290",
    "end": "4694430"
  },
  {
    "text": "each subset is the set of roots\nof some irreducible binary polynomial of some degree\nthat divides M, OK?",
    "start": "4694430",
    "end": "4705480"
  },
  {
    "text": "These are called cyclotomic\nsubsets. Whence the name of Elwyn\nBerlekamp's company,",
    "start": "4705480",
    "end": "4711570"
  },
  {
    "text": "Cyclotomics.  All right. So this is where, I think, the\ntheory gets just absolutely",
    "start": "4711570",
    "end": "4721099"
  },
  {
    "text": "lovely and unexpected, at\nleast when you start in. And people who have a taste for\nthese things, I encourage",
    "start": "4721100",
    "end": "4726950"
  },
  {
    "text": "you to read a real book\non the subject. Berlekamp's is one of\nthe most elegant.",
    "start": "4726950",
    "end": "4733340"
  },
  {
    "text": "But there are lots -- because it's an elegant subject,\nthere are lots of elegant treatments of it.",
    "start": "4733340",
    "end": "4739560"
  },
  {
    "text": "All right. So remember what we\nwere trying to do in the first place. We were trying to find the\ndimension of BCH codes.",
    "start": "4739560",
    "end": "4753510"
  },
  {
    "text": "So where are we now? We've defined a BCH code as\nthe set of all binary",
    "start": "4753510",
    "end": "4765960"
  },
  {
    "text": "polynomials with roots alpha up\nto alpha to the n minus k",
    "start": "4765960",
    "end": "4779270"
  },
  {
    "text": "where n and k are the parameters\nof the parent Reed-Solomon code.",
    "start": "4779270",
    "end": "4784760"
  },
  {
    "text": "And alpha is in the\nparent field. So alpha in",
    "start": "4784760",
    "end": "4790250"
  },
  {
    "text": "F2 to the M. OK.",
    "start": "4790250",
    "end": "4795920"
  },
  {
    "text": "One final fact, I guess,\nwe need to know here. ",
    "start": "4795920",
    "end": "4801415"
  },
  {
    "text": "All right, if alpha is a\nroot -- now I'm talking about any field --",
    "start": "4801415",
    "end": "4808540"
  },
  {
    "text": "then alpha squared is a root\nof a binary polynomial. ",
    "start": "4808540",
    "end": "4818480"
  },
  {
    "text": "And again, this is due to a\nvery lovely fact, which is that squaring is linear in\nfields of characteristic 2.",
    "start": "4818480",
    "end": "4829090"
  },
  {
    "text": "Why is squaring linear. A little side calculation. a plus b squared equals a\nsquared plus 2ab plus b",
    "start": "4829090",
    "end": "4838409"
  },
  {
    "text": "squared but characteristic 2. We can wipe that out.",
    "start": "4838410",
    "end": "4843449"
  },
  {
    "text": "So in general, f of x quantity\nsquared is f of x squared.",
    "start": "4843450",
    "end": "4854240"
  },
  {
    "text": " And that's why, if f of x\nevaluates to 0, then f of x",
    "start": "4854240",
    "end": "4863520"
  },
  {
    "text": "squared must evaluate to 0\nsince 0 squared is always",
    "start": "4863520",
    "end": "4869740"
  },
  {
    "text": "equal to 0. All right. So alpha is a root if and only\nif alpha squared is a root.",
    "start": "4869740",
    "end": "4877330"
  },
  {
    "text": "Is that true here? Yes. Alpha alpha squared. Well, is it also true if we\nsquared alpha squared?",
    "start": "4877330",
    "end": "4883080"
  },
  {
    "text": "What is the square\nof alpha squared? It's back to alpha, all right? So these sets now turn out to be\ncyclotomic cosets, they're",
    "start": "4883080",
    "end": "4896719"
  },
  {
    "text": "called, which is the set of all elements and their squares.",
    "start": "4896720",
    "end": "4901739"
  },
  {
    "text": "We get alpha, alpha squared,\nalpha fourth, alpha eighth. And then, at some point,\nit cycles.",
    "start": "4901740",
    "end": "4908170"
  },
  {
    "text": "Why? Because what does alpha\nto the 2M equal? AUDIENCE: [INAUDIBLE]. PROFESSOR: No.",
    "start": "4908170",
    "end": "4915820"
  },
  {
    "text": "Alpha. Right. Alpha to the 2M minus 1 is 1,\nso alpha to the 2M is alpha.",
    "start": "4915820",
    "end": "4921350"
  },
  {
    "text": "So it comes back to alpha\nagain because of that. So we get a finite number of\nroots which, of course, are",
    "start": "4921350",
    "end": "4928670"
  },
  {
    "text": "equal to the degree here. In some cases, it's fewer. It's whatever the degree is.",
    "start": "4928670",
    "end": "4934830"
  },
  {
    "text": "It's d, which divides M.",
    "start": "4934830",
    "end": "4943980"
  },
  {
    "text": "So from this, we\nsimply start -- suppose we want alpha\nto be a root.",
    "start": "4943980",
    "end": "4950929"
  },
  {
    "text": "Let's start with high\nrate codes.",
    "start": "4950930",
    "end": "4956180"
  },
  {
    "text": "I think here in the example,\nin the text, I used F16.",
    "start": "4956180",
    "end": "4964140"
  },
  {
    "text": "F16 is going to have -- the elements of F16 are going\nto be the roots of all the",
    "start": "4964140",
    "end": "4974110"
  },
  {
    "text": "degree 1, 2, and 4 polynomials\nbecause M is 4 and these are",
    "start": "4974110",
    "end": "4979830"
  },
  {
    "text": "the degrees that divide 4. So again, we get x and x plus\n1, which have roots 0 and 1.",
    "start": "4979830",
    "end": "4991300"
  },
  {
    "text": "We get x squared\nplus x plus 1. What are the roots of x squared\nplus x plus 1 and F16?",
    "start": "4991300",
    "end": "4999870"
  },
  {
    "text": "There are only going to be two\nof them and they've got to have the property that if we\nstart with the first one,",
    "start": "4999870",
    "end": "5008770"
  },
  {
    "text": "let's call it beta\nand beta squared. Beta fourth has got to\nequal beta because we",
    "start": "5008770",
    "end": "5014639"
  },
  {
    "text": "only have two of them. That more or less forces beta\nto be alpha to the fifth or",
    "start": "5014640",
    "end": "5023040"
  },
  {
    "text": "alpha to the tenth. Let's see if that works.",
    "start": "5023040",
    "end": "5028300"
  },
  {
    "text": "We get alpha to the fifth,\nalpha to the tenth. Square that, we get\nalpha to the 20th.",
    "start": "5028300",
    "end": "5034400"
  },
  {
    "text": "But we now take the exponents\nmod 15 and we get 5 again, all right?",
    "start": "5034400",
    "end": "5040440"
  },
  {
    "text": "So those are the two\nroots of x squared plus x plus 1 in F16.",
    "start": "5040440",
    "end": "5045990"
  },
  {
    "text": " Obviously, I'm not -- I guess that was a legitimate\nproof, but it",
    "start": "5045990",
    "end": "5053340"
  },
  {
    "text": "was certainly quick. OK, there are three polynomials\nof degree 4.",
    "start": "5053340",
    "end": "5058690"
  },
  {
    "text": "By the way, I think you can\nimagine how, given this result, we can now\nenumerate the",
    "start": "5058690",
    "end": "5067210"
  },
  {
    "text": "polynomials of each degree. We now have an expression. ",
    "start": "5067210",
    "end": "5075349"
  },
  {
    "text": "There are two irreducible\npolynomials of degree 1.",
    "start": "5075350",
    "end": "5080360"
  },
  {
    "text": "So how many more of degree 2\nis it going to take to make the overall degree 4? One of them.",
    "start": "5080360",
    "end": "5085560"
  },
  {
    "text": "So we're looking\nfor a single -- there must be a single\nirreducible polynomial degree 4.",
    "start": "5085560",
    "end": "5090620"
  },
  {
    "text": "Similarly over here, all right,\nwe've accounted for four of the elements of F16.",
    "start": "5090620",
    "end": "5096640"
  },
  {
    "text": "The only other possible degree\nwe could have is 4. So how many irreducible\npolynomials are there of",
    "start": "5096640",
    "end": "5103320"
  },
  {
    "text": "degree 4 over in F 2 of x? Must be three of them. And it always works out.",
    "start": "5103320",
    "end": "5111239"
  },
  {
    "text": "So, from this you can get a\nclosed-form combinatorial formula again in terms of the\nMobius inversion formula.",
    "start": "5111240",
    "end": "5118720"
  },
  {
    "text": "By doing a sieve or by some\nother method, you can find out that the three irreducible\npolynomials of degree 4 are",
    "start": "5118720",
    "end": "5131840"
  },
  {
    "text": "those three and the\ncorresponding roots",
    "start": "5131840",
    "end": "5136849"
  },
  {
    "text": "for this one -- if this is the irreducible\npolynomial you use to define the field, then alpha is a root\nof it and you're going to",
    "start": "5136850",
    "end": "5145100"
  },
  {
    "text": "get alpha, alpha squared,\nalpha fourth, alpha to the eightth.",
    "start": "5145100",
    "end": "5150560"
  },
  {
    "text": "Alpha to the eightth squared is\nalpha to the 16th, but that equals alpha, OK? So these are the roots\nof that equation.",
    "start": "5150560",
    "end": "5158670"
  },
  {
    "text": "Here you get --  sorry, x fourth plus x third\nplus 1, since that's basically",
    "start": "5158670",
    "end": "5166940"
  },
  {
    "text": "the reverse of this, turns out\nyou get alpha to the minus 1,",
    "start": "5166940",
    "end": "5172060"
  },
  {
    "text": "which is alpha to the 1fourth. Square that and you get alpha to\nthe minus 2, which is alpha",
    "start": "5172060",
    "end": "5179860"
  },
  {
    "text": "to the 13th, or equivalently,\nalpha to the 28 -- reduces to thirteen.",
    "start": "5179860",
    "end": "5185320"
  },
  {
    "text": "This becomes alpha the 11th,\nalpha to the seventh. and then alpha to the seventh\ngives you alpha",
    "start": "5185320",
    "end": "5190730"
  },
  {
    "text": "to the 1fourth again. AUDIENCE: [INAUDIBLE] same thing about taking the\nsquare [INAUDIBLE]?",
    "start": "5190730",
    "end": "5199310"
  },
  {
    "text": "PROFESSOR: Correct. AUDIENCE: --from the\n[INAUDIBLE]? PROFESSOR: Because you go\naround in a circle.",
    "start": "5199310",
    "end": "5205390"
  },
  {
    "text": "So it's a finite set. So you can obviously\ndivide by 2.",
    "start": "5205390",
    "end": "5211159"
  },
  {
    "text": "So there's one cyclotomic\ncoset. Here's the second one.",
    "start": "5211160",
    "end": "5216540"
  },
  {
    "text": "And then the third one must\nbe whatever's left over. What's left over? We don't have alpha\nto the third yet.",
    "start": "5216540",
    "end": "5222040"
  },
  {
    "text": "Alpha to the third, alpha to the\nsixth, alpha to the 12th,",
    "start": "5222040",
    "end": "5227680"
  },
  {
    "text": "and then alpha to the 2fourth,\nwhich is alpha to the ninth. And alpha to the 18th is equal\nalpha to the third again.",
    "start": "5227680",
    "end": "5235558"
  },
  {
    "text": " OK, what's the moral of this?",
    "start": "5235558",
    "end": "5241120"
  },
  {
    "text": "We want to start off with -- let's just take a look\nat the Reed-Solomon, the very first one.",
    "start": "5241120",
    "end": "5247380"
  },
  {
    "text": "We just want n minus k to be 1\nand we just want to have root alpha in here.",
    "start": "5247380",
    "end": "5254695"
  },
  {
    "text": "Well, if we get root alpha,\nwe're going to get root alpha squared, alpha fourth and alpha\neightth along with it.",
    "start": "5254695",
    "end": "5265070"
  },
  {
    "text": "If we want a binary polynomial\nwith root alpha, it has to this one. And it's going to\nhave four roots.",
    "start": "5265070",
    "end": "5272250"
  },
  {
    "text": "All right. So for root alpha, we're going\nto get x fourth plus x plus 1",
    "start": "5272250",
    "end": "5285370"
  },
  {
    "text": "as our generator polynomial. And it's actually going\nto have roots alpha and alpha squared.",
    "start": "5285370",
    "end": "5291190"
  },
  {
    "text": "So it's going to be the same\none as you would get if you wanted alpha and\nalpha squared. That means n minus k is already\nup to 2, which means",
    "start": "5291190",
    "end": "5303699"
  },
  {
    "text": "your distance is already\nup to 3. Distance is n minus k plus 1.",
    "start": "5303700",
    "end": "5309760"
  },
  {
    "text": "So this leads to a code\nwith n equals 16 --",
    "start": "5309760",
    "end": "5316630"
  },
  {
    "text": "is that right? Yes.  BCH codes are always defined\nto be one shorter.",
    "start": "5316630",
    "end": "5325420"
  },
  {
    "text": "We're going to have four\nredundant bits, so k equals 12",
    "start": "5325420",
    "end": "5338660"
  },
  {
    "text": "and distance equals 3. ",
    "start": "5338660",
    "end": "5344530"
  },
  {
    "text": "I think that's not\nquite right. ",
    "start": "5344530",
    "end": "5351429"
  },
  {
    "text": "When we're doing BCH codes,\nthey're always defined just on",
    "start": "5351430",
    "end": "5356490"
  },
  {
    "text": "the non-zero elements\nof the field. So we start with the shorter\nRead-Solomon code of",
    "start": "5356490",
    "end": "5368090"
  },
  {
    "text": "length q minus 1. 15 in this case rather\nthan 16. ",
    "start": "5368090",
    "end": "5375600"
  },
  {
    "text": "And 0 never appears here as\none of the possible roots.",
    "start": "5375600",
    "end": "5381530"
  },
  {
    "text": "So let me just do that. I apologize I haven't\ncarried through all the possible steps.",
    "start": "5381530",
    "end": "5388110"
  },
  {
    "text": "So we're getting all of the\npolynomial multiples of x fourth plus x plus 1 of degree\nless or equal to",
    "start": "5388110",
    "end": "5397230"
  },
  {
    "text": "14 rather than 15. So it's n equals 15. n minus k is going to be 4.",
    "start": "5397230",
    "end": "5405610"
  },
  {
    "text": "So this is 11. And the distance is going to\nbe greater than equal to 3.",
    "start": "5405610",
    "end": "5411280"
  },
  {
    "text": "In fact, it is 3. So it's a 15, 11, 3\ncode, which is, in",
    "start": "5411280",
    "end": "5418160"
  },
  {
    "text": "fact, the Hamming code. Yes? AUDIENCE: [INAUDIBLE] PROFESSOR: Oh, I'm sorry.",
    "start": "5418160",
    "end": "5424110"
  },
  {
    "text": "Wasn't this fun? You're supposed to\ndo that, Ashish. AUDIENCE: [INAUDIBLE].",
    "start": "5424110",
    "end": "5429475"
  },
  {
    "text": "PROFESSOR: OK, well, so you\ncan see how it goes. So this gets us both roots\nalpha and alpha squared.",
    "start": "5429476",
    "end": "5437770"
  },
  {
    "text": "If we want alpha third and alpha\nfourth, we already have alpha fourth from\nthis polynomial.",
    "start": "5437770",
    "end": "5445000"
  },
  {
    "text": "So all we need is this one,\nwhich gets us another. And that gives us an n equals\n15, k equals 7, d greater than",
    "start": "5445000",
    "end": "5455166"
  },
  {
    "text": "or equal to 5, which, in fact,\nis a 15, 7, 5 code.",
    "start": "5455166",
    "end": "5461170"
  },
  {
    "text": "So we get additional codes. There's a table in there that\nshows you that most the time for short block lengths for\ndistances which are equal to a",
    "start": "5461170",
    "end": "5469790"
  },
  {
    "text": "prime power, we get the\nsame parameters as Reed-Muller codes. For lengths 64 and higher,\nsometimes we do",
    "start": "5469790",
    "end": "5476070"
  },
  {
    "text": "a little bit better. In addition, we get a lot more\ncodes for every, basically,",
    "start": "5476070",
    "end": "5481559"
  },
  {
    "text": "odd distance when you take the\nlength odd or even distance if you take the length even. ",
    "start": "5481560",
    "end": "5490010"
  },
  {
    "text": "And that's definitely an asset,\nthat you have a larger number of codes to\nchoose from. So there's no doubt that in\nterms n, k, d, BCH is the",
    "start": "5490010",
    "end": "5498210"
  },
  {
    "text": "larger and, for longer block\nlength, slightly better class than Reed-Muller codes.",
    "start": "5498210",
    "end": "5503750"
  },
  {
    "text": "But as I said before, in terms\nof performance versus complexity, Reed-Muller\nmight still be the ones you want to use.",
    "start": "5503750",
    "end": "5509730"
  },
  {
    "text": "OK. Good luck in the review and\ngood luck in the exam. I will see you Wednesday. ",
    "start": "5509730",
    "end": "5523498"
  }
]