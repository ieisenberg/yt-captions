[
  {
    "text": "Let's turn our attention to how the operating\nsystem (OS) deals with input/output devices.",
    "start": "290",
    "end": "5950"
  },
  {
    "text": "There are actually two parts to the discussion.",
    "start": "5950",
    "end": "8370"
  },
  {
    "text": "First, we'll talk about how the OS interacts\nwith the devices themselves.",
    "start": "8370",
    "end": "14110"
  },
  {
    "text": "This will involve a combination of interrupt\nhandlers and kernel buffers.",
    "start": "14110",
    "end": "18170"
  },
  {
    "text": "Then we'll discuss how supervisor calls access\nthe kernel buffers in response to requests",
    "start": "18170",
    "end": "23750"
  },
  {
    "text": "from user-mode processes.",
    "start": "23750",
    "end": "26130"
  },
  {
    "text": "As we'll see, this can get a bit tricky when\nthe OS cannot complete the request at the",
    "start": "26130",
    "end": "31079"
  },
  {
    "text": "time the SVC was executed.",
    "start": "31080",
    "end": "34290"
  },
  {
    "text": "Here's the plan!",
    "start": "34290",
    "end": "35340"
  },
  {
    "text": "When the user types a key on the keyboard,\nthe keyboard triggers an interrupt request",
    "start": "35340",
    "end": "39440"
  },
  {
    "text": "to the CPU.",
    "start": "39440",
    "end": "40920"
  },
  {
    "text": "The interrupt suspends execution of the currently-running\nprocess and executes the handler whose job",
    "start": "40920",
    "end": "46680"
  },
  {
    "text": "it is to deal with this particular I/O event.",
    "start": "46680",
    "end": "49730"
  },
  {
    "text": "In this case, the keyboard handler reads the\ncharacter from the keyboard and saves it in",
    "start": "49730",
    "end": "53960"
  },
  {
    "text": "a kernel buffer associated with the process\nthat has been chosen to receive incoming keystrokes.",
    "start": "53960",
    "end": "60600"
  },
  {
    "text": "In the language of OSes, we'd say that process\nhas the keyboard focus.",
    "start": "60600",
    "end": "65619"
  },
  {
    "text": "This transfer takes just a handful of instructions\nand when the handler exits, we resume running",
    "start": "65620",
    "end": "71130"
  },
  {
    "text": "the interrupted process.",
    "start": "71130",
    "end": "74250"
  },
  {
    "text": "Assuming the interrupt request is serviced\npromptly, the CPU can easily keep up with",
    "start": "74250",
    "end": "78900"
  },
  {
    "text": "the arrival of typed characters.",
    "start": "78900",
    "end": "81190"
  },
  {
    "text": "Humans are pretty slow compared to the rate\nof executing instructions!",
    "start": "81190",
    "end": "85670"
  },
  {
    "text": "But the buffer in the kernel can hold only\nso many characters before it fills up.",
    "start": "85670",
    "end": "90048"
  },
  {
    "text": "What happens then?",
    "start": "90049",
    "end": "91180"
  },
  {
    "text": "Well, there are a couple of choices.",
    "start": "91180",
    "end": "94360"
  },
  {
    "text": "Overwriting characters received earlier doesn't\nmake much sense: why keep later characters",
    "start": "94360",
    "end": "99310"
  },
  {
    "text": "if the earlier ones have been discarded.",
    "start": "99310",
    "end": "101360"
  },
  {
    "text": "Better that the CPU discard any characters\nreceived after the buffer was full, but it",
    "start": "101360",
    "end": "107310"
  },
  {
    "text": "should give some indication that it's doing\nso.",
    "start": "107310",
    "end": "109990"
  },
  {
    "text": "And, in fact, many systems beep at the user\nto signal that the character they've just",
    "start": "109990",
    "end": "115280"
  },
  {
    "text": "typed is being ignored.",
    "start": "115280",
    "end": "118600"
  },
  {
    "text": "At some later time, a user-mode program executes\na ReadKey() supervisor call, requesting that",
    "start": "118600",
    "end": "124280"
  },
  {
    "text": "the OS return the next character in R0.",
    "start": "124280",
    "end": "128470"
  },
  {
    "text": "In the OS, the ReadKey SVC handler grabs the\nnext character from the buffer, places it",
    "start": "128470",
    "end": "134680"
  },
  {
    "text": "in the user's R0, and resumes execution at\nthe instruction following the SVC.",
    "start": "134680",
    "end": "141230"
  },
  {
    "text": "There are few tricky bits we need to figure\nout.",
    "start": "141230",
    "end": "144230"
  },
  {
    "text": "The ReadKey() SVC is what we call a \"blocking\nI/O\" request, i.e., the program assumes that",
    "start": "144230",
    "end": "151189"
  },
  {
    "text": "when the SVC returns, the next character is\nin R0.",
    "start": "151189",
    "end": "155939"
  },
  {
    "text": "If there isn't (yet) a character to be returned,\nexecution should be \"blocked\", i.e., suspended,",
    "start": "155939",
    "end": "162150"
  },
  {
    "text": "until such time that a character is available.",
    "start": "162150",
    "end": "165950"
  },
  {
    "text": "Many OSes also provide for non-blocking I/O\nrequests, which always return immediately",
    "start": "165950",
    "end": "171290"
  },
  {
    "text": "with both a status flag and a result.",
    "start": "171290",
    "end": "174610"
  },
  {
    "text": "The program can check the status flag to see\nif there was a character and do the right",
    "start": "174610",
    "end": "178430"
  },
  {
    "text": "thing if there wasn't, e.g., reissue the request\nat a later time.",
    "start": "178430",
    "end": "183749"
  },
  {
    "text": "Note that the user-mode program didn't have\nany direct interaction with the keyboard,",
    "start": "183749",
    "end": "187840"
  },
  {
    "text": "i.e., it's not constantly polling the device\nto see if there's a keystroke to be processed.",
    "start": "187840",
    "end": "193409"
  },
  {
    "text": "Instead, we're using an \"event-driven\" approach,\nwhere the device signals the OS, via an interrupt,",
    "start": "193409",
    "end": "199849"
  },
  {
    "text": "when it needs attention.",
    "start": "199849",
    "end": "201829"
  },
  {
    "text": "This is an elegant separation of responsibilities.",
    "start": "201829",
    "end": "204909"
  },
  {
    "text": "Imagine how cumbersome it would be if every\nprogram had to check constantly to see if",
    "start": "204909",
    "end": "210150"
  },
  {
    "text": "there were pending I/O operations.",
    "start": "210150",
    "end": "212329"
  },
  {
    "text": "Our event-driven organization provides for\non-demand servicing of devices, but doesn't",
    "start": "212329",
    "end": "218260"
  },
  {
    "text": "devote CPU resources to the I/O subsystem\nuntil there's actually work to be done.",
    "start": "218260",
    "end": "224430"
  },
  {
    "text": "The interrupt-driven OS interactions with\nI/O devices are completely transparent to",
    "start": "224430",
    "end": "229319"
  },
  {
    "text": "user programs.",
    "start": "229319",
    "end": "231909"
  },
  {
    "text": "Here's sketch of what the OS keyboard handler\ncode might actually look like.",
    "start": "231909",
    "end": "237120"
  },
  {
    "text": "Depending on the hardware, the CPU might access\ndevice status and data using special I/O instructions",
    "start": "237120",
    "end": "243569"
  },
  {
    "text": "in the ISA.",
    "start": "243569",
    "end": "245299"
  },
  {
    "text": "For example, in the simulated Beta used for\nlab assignments, there's a RDCHAR() instruction",
    "start": "245299",
    "end": "251150"
  },
  {
    "text": "for reading keyboard characters and a CLICK()\ninstruction for reading the coordinates of",
    "start": "251150",
    "end": "255430"
  },
  {
    "text": "a mouse click.",
    "start": "255430",
    "end": "257600"
  },
  {
    "text": "Another common approach is to use \"memory-mapped\nI/O\", where a portion of the kernel address",
    "start": "257600",
    "end": "263170"
  },
  {
    "text": "space is devoted to servicing I/O devices.",
    "start": "263170",
    "end": "266940"
  },
  {
    "text": "In this scheme, ordinary LD and ST store instructions\nare used to access specific addresses, which",
    "start": "266940",
    "end": "273650"
  },
  {
    "text": "the CPU recognizes as accesses to the keyboard\nor mouse device interfaces.",
    "start": "273650",
    "end": "279690"
  },
  {
    "text": "This is the scheme shown in the code here.",
    "start": "279690",
    "end": "282290"
  },
  {
    "text": "The C data structure represents the two I/O\nlocations devoted to the keyboard: one for",
    "start": "282290",
    "end": "287720"
  },
  {
    "text": "status and one for the actual keyboard data.",
    "start": "287720",
    "end": "293100"
  },
  {
    "text": "The keyboard interrupt handler reads the keystroke\ndata from the keyboard and places the character",
    "start": "293100",
    "end": "298430"
  },
  {
    "text": "into the next location in the circular character\nbuffer in the kernel.",
    "start": "298430",
    "end": "304560"
  },
  {
    "text": "In real life keyboard processing is usually\na bit more complicated.",
    "start": "304560",
    "end": "309700"
  },
  {
    "text": "What one actually reads from a keyboard is\na key number and a flag indicating whether",
    "start": "309700",
    "end": "314350"
  },
  {
    "text": "the event is a key press or a key release.",
    "start": "314350",
    "end": "317980"
  },
  {
    "text": "Knowing the keyboard layout, the OS translates\nthe key number into the appropriate ASCII",
    "start": "317980",
    "end": "323310"
  },
  {
    "text": "character,\ndealing with complications like holding down",
    "start": "323310",
    "end": "326260"
  },
  {
    "text": "the shift key or control key to indicate a\ncapital character or a control character.",
    "start": "326260",
    "end": "332300"
  },
  {
    "text": "And certain combination of keystrokes, e.g.,\nCTRL-ALT-DEL on a Windows system, are interpreted",
    "start": "332300",
    "end": "338759"
  },
  {
    "text": "as special user commands to start running\nparticular applications like the Task Manager.",
    "start": "338760",
    "end": "344110"
  },
  {
    "text": "Many OSes let the user specify whether they\nwant \"raw\" keyboard input (i.e., the key numbers",
    "start": "344110",
    "end": "350550"
  },
  {
    "text": "and status) or \"digested\" input (i.e., ASCII\ncharacters).",
    "start": "350550",
    "end": "355699"
  },
  {
    "text": "Whew!",
    "start": "355700",
    "end": "356700"
  },
  {
    "text": "Who knew that processing keystrokes could\nbe so complicated!",
    "start": "356700",
    "end": "360460"
  },
  {
    "text": "Next, we'll figure out how to code the associated\nsupervisor call that lets user programs read",
    "start": "360460",
    "end": "366949"
  },
  {
    "text": "characters.",
    "start": "366950",
    "end": "367160"
  }
]