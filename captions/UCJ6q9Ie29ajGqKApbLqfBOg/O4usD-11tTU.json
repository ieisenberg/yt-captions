[
  {
    "text": "hello I am s Choy from South Korea today I will present a talk about apid",
    "start": "120",
    "end": "7960"
  },
  {
    "text": "offcat how to resolve opos API functions in modern",
    "start": "7960",
    "end": "14759"
  },
  {
    "text": "Pickers why API diation matters um more",
    "start": "15279",
    "end": "20920"
  },
  {
    "text": "hide functionalities by API pation while writers use commercial peckers such as",
    "start": "20920",
    "end": "29160"
  },
  {
    "text": "the mid BR protect tocate their apis and some M Riders use their own",
    "start": "29160",
    "end": "38440"
  },
  {
    "text": "aration techniques yeah they even develop their own custom AOS",
    "start": "38440",
    "end": "45320"
  },
  {
    "text": "cators and so far there is no the officiation tools for M peckers I mean",
    "start": "45320",
    "end": "53719"
  },
  {
    "text": "the modern with uh latest version for example uh regarding",
    "start": "53719",
    "end": "60800"
  },
  {
    "text": "theida um we when we search for um D on pecker on",
    "start": "60800",
    "end": "69799"
  },
  {
    "text": "Google then we can find some articles how to",
    "start": "69799",
    "end": "75640"
  },
  {
    "text": "decate and some YouTube videos the technical details",
    "start": "75640",
    "end": "81600"
  },
  {
    "text": "but uh they work just on previous versions of doida yeah the latest",
    "start": "81600",
    "end": "88360"
  },
  {
    "text": "version is 2.3 3.5 but uh",
    "start": "88360",
    "end": "93479"
  },
  {
    "text": "the information that internet gives us how to unpack Doma",
    "start": "93479",
    "end": "100040"
  },
  {
    "text": "2.1 and so on and there is no x64 on Packers",
    "start": "100040",
    "end": "107960"
  },
  {
    "text": "so I want wanted to decate such latest version packed binary",
    "start": "107960",
    "end": "117479"
  },
  {
    "text": "finance and I will talk three things",
    "start": "117840",
    "end": "123159"
  },
  {
    "text": "first API officiation techniques second",
    "start": "123159",
    "end": "128239"
  },
  {
    "text": "how to decate it uh yeah such the API officiation technique and I will show",
    "start": "128239",
    "end": "136280"
  },
  {
    "text": "you some implementation and",
    "start": "136280",
    "end": "139640"
  },
  {
    "text": "demo modern peckers use various ofation techniques they use",
    "start": "143319",
    "end": "150440"
  },
  {
    "text": "debugging for example V VM detection debuger detection anti- disassembly anti",
    "start": "150440",
    "end": "158239"
  },
  {
    "text": "tempering anti debug attach and they often use virtualization ofation to lengthen",
    "start": "158239",
    "end": "167959"
  },
  {
    "text": "the dynamic instruction trace and they use polymorphism and metamorphism that",
    "start": "167959",
    "end": "174319"
  },
  {
    "text": "is opposite to code optimization yeah they lengthen by inserting garbage",
    "start": "174319",
    "end": "181920"
  },
  {
    "text": "instructions and API ofation today's s focus is on API",
    "start": "181920",
    "end": "190080"
  },
  {
    "text": "tication and API ofation techniques can be classified into two the first is CTIC",
    "start": "191280",
    "end": "199080"
  },
  {
    "text": "API ofation that ofation techniques are only",
    "start": "199080",
    "end": "204440"
  },
  {
    "text": "used compile time yeah that is packing time and the second is d Dynamic API",
    "start": "204440",
    "end": "211599"
  },
  {
    "text": "tication in Dynamic API tication pack executable",
    "start": "211599",
    "end": "217680"
  },
  {
    "text": "file contains some runtime offcat and that expands API code API function code",
    "start": "217680",
    "end": "226040"
  },
  {
    "text": "into some memory area and you can find more API tication techniques on",
    "start": "226040",
    "end": "235120"
  },
  {
    "text": "our Museum of API tication on v32 of C",
    "start": "235120",
    "end": "241720"
  },
  {
    "text": "okay in static API autic API functions are oated compile there pcking time it",
    "start": "244480",
    "end": "253680"
  },
  {
    "text": "is oated just once and when we load the binary with the burger the code is",
    "start": "253680",
    "end": "261040"
  },
  {
    "text": "always the same so it is relatively easy to analyze static API facated",
    "start": "261040",
    "end": "268720"
  },
  {
    "text": "binaries function instructions and addresses are the same with each execution although yeah the addresses",
    "start": "268720",
    "end": "276080"
  },
  {
    "text": "are moving because of aslr in the picture you can see how AP",
    "start": "276080",
    "end": "282759"
  },
  {
    "text": "fation is applied at original entry",
    "start": "282759",
    "end": "288919"
  },
  {
    "text": "point yeah that is yeah we when we unpacked yes partly then we can find",
    "start": "288919",
    "end": "297560"
  },
  {
    "text": "original API call is oated into um yeah the instruction itself Co",
    "start": "297560",
    "end": "304360"
  },
  {
    "text": "function address is oated so it redirect to other section of the binary there are",
    "start": "304360",
    "end": "313759"
  },
  {
    "text": "ticated color code and the aosc color code result the aosc address were",
    "start": "313759",
    "end": "321319"
  },
  {
    "text": "they're doing something different and finally they go to API function code but",
    "start": "321319",
    "end": "328520"
  },
  {
    "text": "some binary is also rated aate API function part of part of API function",
    "start": "328520",
    "end": "337560"
  },
  {
    "text": "code so here is an example I made",
    "start": "338479",
    "end": "343520"
  },
  {
    "text": "a binary Tracer and executed domar",
    "start": "343520",
    "end": "348919"
  },
  {
    "text": "2.3.3 packed binary files yeah I packed my own easiest sample",
    "start": "348919",
    "end": "356600"
  },
  {
    "text": "code uh on address 101 17 there is a call instruction to",
    "start": "356600",
    "end": "364240"
  },
  {
    "text": "another section of the orated file and",
    "start": "364240",
    "end": "369280"
  },
  {
    "text": "there are hundreds of instructions but most of them are garbage and",
    "start": "369280",
    "end": "376520"
  },
  {
    "text": "they Branch into other section and at last API call is performed by return",
    "start": "376520",
    "end": "384280"
  },
  {
    "text": "instruction yeah the last return instruction directs their control flow",
    "start": "384280",
    "end": "389720"
  },
  {
    "text": "to API function code and for VM protect they use",
    "start": "389720",
    "end": "397840"
  },
  {
    "text": "return yeah there the address is not the top of the stack yeah the return address",
    "start": "397840",
    "end": "403199"
  },
  {
    "text": "is somewhere in the",
    "start": "403199",
    "end": "407000"
  },
  {
    "text": "stack in Dynamic API tication API functions arec during runtime yeah while",
    "start": "408240",
    "end": "417440"
  },
  {
    "text": "yeah unpacking both API call instruction and API",
    "start": "417440",
    "end": "422840"
  },
  {
    "text": "function code are skated so uh call Api function R is can beated",
    "start": "422840",
    "end": "431800"
  },
  {
    "text": "sometimes and not aosc in doida 634",
    "start": "431800",
    "end": "437280"
  },
  {
    "text": "bit and API function code itself is upated runtime",
    "start": "437280",
    "end": "443120"
  },
  {
    "text": "so when the ticated API function address is called yeah it is directed the",
    "start": "443120",
    "end": "448960"
  },
  {
    "text": "control FL is directed to officiated API function code address that is runtime",
    "start": "448960",
    "end": "455599"
  },
  {
    "text": "allocated memory area and here is another",
    "start": "455599",
    "end": "463080"
  },
  {
    "text": "example I pck this Doma 634",
    "start": "463080",
    "end": "468360"
  },
  {
    "text": "bits and the first instruction in the picture calls to yeah another area newly allocated",
    "start": "469159",
    "end": "478400"
  },
  {
    "text": "area don't have names and executed some instructions hundreds of instructions",
    "start": "478400",
    "end": "484680"
  },
  {
    "text": "and and last they call something and",
    "start": "484680",
    "end": "490479"
  },
  {
    "text": "yeah they don't they don't even call the API function itself because whole API",
    "start": "490479",
    "end": "495720"
  },
  {
    "text": "functions are oated but they don't aosc the API function call inside the",
    "start": "495720",
    "end": "502280"
  },
  {
    "text": "aosc code yeah so we can we can uh sometimes we can check",
    "start": "502280",
    "end": "508919"
  },
  {
    "text": "yeah set break points on some other point of API function that is called",
    "start": "508919",
    "end": "514039"
  },
  {
    "text": "inside the oppos API API functions then how we can the aosc",
    "start": "514039",
    "end": "523399"
  },
  {
    "text": "aosc API functions in mod",
    "start": "523399",
    "end": "529240"
  },
  {
    "text": "papers uh in this research I didn't mean",
    "start": "529959",
    "end": "536000"
  },
  {
    "text": "to develop some unpack were dumping some that is",
    "start": "536000",
    "end": "542079"
  },
  {
    "text": "executable I just wanted to analyze their executable file by the Brokers and",
    "start": "542079",
    "end": "549320"
  },
  {
    "text": "disassemblers and the compilers and so after the tication uh",
    "start": "549320",
    "end": "557480"
  },
  {
    "text": "we have original entry point yeah two yeah that is used for debers and",
    "start": "557480",
    "end": "565320"
  },
  {
    "text": "yeah dis assemblers and I want to recover API function code was at original entry",
    "start": "565320",
    "end": "573000"
  },
  {
    "text": "point finding original entry point is somewhat easy",
    "start": "573560",
    "end": "579839"
  },
  {
    "text": "yeah in 2006 Royal Paul Royal wrote some",
    "start": "579839",
    "end": "585440"
  },
  {
    "text": "paper called poly unpack yeah he opened his tool on online so we can use it but",
    "start": "585440",
    "end": "593959"
  },
  {
    "text": "it's very slow and so I developed my",
    "start": "593959",
    "end": "600480"
  },
  {
    "text": "original my my own tools to find original entry point it records every",
    "start": "600480",
    "end": "606880"
  },
  {
    "text": "memory right and execute and yeah when I first developed",
    "start": "606880",
    "end": "613200"
  },
  {
    "text": "this tool it took so long because it save every written memory addresses so I",
    "start": "613200",
    "end": "621440"
  },
  {
    "text": "decided to save memory address power blocks to save memory and O is the last",
    "start": "621440",
    "end": "630079"
  },
  {
    "text": "written address that is",
    "start": "630079",
    "end": "633320"
  },
  {
    "text": "executed and after we find op we can resolve API functions for stady API",
    "start": "636200",
    "end": "643680"
  },
  {
    "text": "fation I suggest iterate run until API method is some function pre-run",
    "start": "643680",
    "end": "651600"
  },
  {
    "text": "analysis and dynamic for dynamic API tication I suggest memory access",
    "start": "651600",
    "end": "657320"
  },
  {
    "text": "analysis so for static ofos scalers that include",
    "start": "657320",
    "end": "665920"
  },
  {
    "text": "theida 634 and V prot 32 and",
    "start": "665920",
    "end": "671120"
  },
  {
    "text": "634 and yeah some other Packers and custom Packers use still use station",
    "start": "671120",
    "end": "677959"
  },
  {
    "text": "techniques so first we need to find API call candidates at OE I use",
    "start": "677959",
    "end": "687160"
  },
  {
    "text": "call patterns in 634 bit",
    "start": "687160",
    "end": "692399"
  },
  {
    "text": "binary call Q word pointer to something is change it into call relative 32 when",
    "start": "692399",
    "end": "703279"
  },
  {
    "text": "so yeah this is different from peckers so we need some prior knowledge on yeah",
    "start": "703279",
    "end": "711639"
  },
  {
    "text": "peckers but yeah we first find ticated color instructions yeah",
    "start": "711639",
    "end": "719440"
  },
  {
    "text": "there is yeah",
    "start": "719440",
    "end": "723320"
  },
  {
    "text": "this yeah we can find at o with deer yeah when we search for inter modular",
    "start": "729600",
    "end": "737720"
  },
  {
    "text": "Calles in dbg we can find a fisticated Calles that doesn't have any",
    "start": "737720",
    "end": "744680"
  },
  {
    "text": "name and I did it with uh Intel pin such aate called by pattern here called",
    "start": "744680",
    "end": "752120"
  },
  {
    "text": "relative 32 is a candidate and check whether the address",
    "start": "752120",
    "end": "757680"
  },
  {
    "text": "is in another section of the process image and we need to check the call",
    "start": "757680",
    "end": "765959"
  },
  {
    "text": "Target is disassembled correctly because the call Target addresses",
    "start": "765959",
    "end": "772720"
  },
  {
    "text": "are approximation we have redundant addresses so we need to check the call",
    "start": "772720",
    "end": "779880"
  },
  {
    "text": "Target is disassembled",
    "start": "779880",
    "end": "782959"
  },
  {
    "text": "correctly and finally when we run",
    "start": "787040",
    "end": "792839"
  },
  {
    "text": "the call instruction of a SK call instruction then the execution path go",
    "start": "792839",
    "end": "798600"
  },
  {
    "text": "into API function code",
    "start": "798600",
    "end": "804199"
  },
  {
    "text": "so yeah if we execute call of skated Coler then cated color code is executed",
    "start": "804199",
    "end": "811519"
  },
  {
    "text": "and finally API function code is executed",
    "start": "811519",
    "end": "817240"
  },
  {
    "text": "so yeah we can use some static analysis or symbolic execution techniques to yeah",
    "start": "817240",
    "end": "824760"
  },
  {
    "text": "resolve these course but uh it's somewhat hard and error prone so I",
    "start": "824760",
    "end": "832040"
  },
  {
    "text": "decided to use some deburger techniques so I",
    "start": "832040",
    "end": "841240"
  },
  {
    "text": "changed uh yeah for 634 bit RP and EIP",
    "start": "841240",
    "end": "846519"
  },
  {
    "text": "in 32 bits is change it into candidate API call addresses and just executed",
    "start": "846519",
    "end": "855519"
  },
  {
    "text": "until API function so the first call instruction is",
    "start": "855519",
    "end": "862560"
  },
  {
    "text": "executed and it branches into other section of code and finally it go to it",
    "start": "862560",
    "end": "872120"
  },
  {
    "text": "goes to yeah the API function",
    "start": "872120",
    "end": "877800"
  },
  {
    "text": "code and we need integrated check again",
    "start": "878079",
    "end": "884279"
  },
  {
    "text": "because yeah we use approximated candidate address so I",
    "start": "884279",
    "end": "892279"
  },
  {
    "text": "check stack pointer uh and check the stack itself whether it is Chang it",
    "start": "892279",
    "end": "901040"
  },
  {
    "text": "and do run API again and again until we",
    "start": "903399",
    "end": "908959"
  },
  {
    "text": "check all API call candidates so at last we",
    "start": "908959",
    "end": "916160"
  },
  {
    "text": "have here the call addresses and Target API",
    "start": "916160",
    "end": "923800"
  },
  {
    "text": "Coles ITA run on API method can be apply to various Pickers here you can unpack",
    "start": "925680",
    "end": "933920"
  },
  {
    "text": "VM protect D 64 yeah in VMP API function call is",
    "start": "933920",
    "end": "941759"
  },
  {
    "text": "virtualization ofc so it's lengthy the ex execution Trace is lengthy and do 64",
    "start": "941759",
    "end": "950120"
  },
  {
    "text": "yeah it is not so lengthy as V protect it is just mutated and in obsidium pecker yeah it",
    "start": "950120",
    "end": "958079"
  },
  {
    "text": "is a little bit Str but yeah it officiated the call instruction itself and also the first",
    "start": "958079",
    "end": "965399"
  },
  {
    "text": "few instructions in an API function so in obsidium packed binaries the",
    "start": "965399",
    "end": "971920"
  },
  {
    "text": "execution path go one of the API function",
    "start": "971920",
    "end": "976959"
  },
  {
    "text": "code and sometimes I analyze custom pcker packed binaries",
    "start": "976959",
    "end": "983279"
  },
  {
    "text": "yeah they use some tricky method to aate API function but it's for example they",
    "start": "983279",
    "end": "990120"
  },
  {
    "text": "use some encoding and decoding of the AP function using",
    "start": "990120",
    "end": "996040"
  },
  {
    "text": "strings but sometimes they use some their key with some runtime",
    "start": "996040",
    "end": "1002800"
  },
  {
    "text": "generated key so it is difficult in such cases but eventually execution is",
    "start": "1002800",
    "end": "1010560"
  },
  {
    "text": "redirected into our real API function",
    "start": "1010560",
    "end": "1015959"
  },
  {
    "text": "so we can deur yeah X 634 biner with I use x 634",
    "start": "1015959",
    "end": "1024839"
  },
  {
    "text": "deburger after the officiation and every add rest is are resolved to real e",
    "start": "1024839",
    "end": "1032438"
  },
  {
    "text": "function and it is running and we can",
    "start": "1032439",
    "end": "1037959"
  },
  {
    "text": "dump with you some execution dumpers and we can use I Pro and even it is DEC",
    "start": "1037959",
    "end": "1047079"
  },
  {
    "text": "compiled and i8 is",
    "start": "1047079",
    "end": "1051120"
  },
  {
    "text": "recovered and the second is apid ofation for dynamic opos",
    "start": "1055320",
    "end": "1062200"
  },
  {
    "text": "cators is a little bit complex than Ste API",
    "start": "1062200",
    "end": "1067799"
  },
  {
    "text": "tication in Dynamic ofation process uh we can observe",
    "start": "1067799",
    "end": "1074200"
  },
  {
    "text": "that every API functions are Theos skated one by one so runtime of scaler",
    "start": "1074200",
    "end": "1084760"
  },
  {
    "text": "embedded in the binary itself reads each",
    "start": "1084760",
    "end": "1089880"
  },
  {
    "text": "function and aate each instruction and writes the fisticated",
    "start": "1089880",
    "end": "1097039"
  },
  {
    "text": "code into a newly allocated memory and each function is of skated in",
    "start": "1097039",
    "end": "1104600"
  },
  {
    "text": "sequence in this picture I",
    "start": "1104600",
    "end": "1110360"
  },
  {
    "text": "put some yeah means of bind yeah when we look at the execution",
    "start": "1110880",
    "end": "1118760"
  },
  {
    "text": "Trace we can find some bind instruction bind function instructions",
    "start": "1118760",
    "end": "1126120"
  },
  {
    "text": "are read and the instruction is expanded to",
    "start": "1126120",
    "end": "1132799"
  },
  {
    "text": "other area and it is written and yeah next Buy and connect it",
    "start": "1132799",
    "end": "1140360"
  },
  {
    "text": "is done alphabetically",
    "start": "1140360",
    "end": "1145679"
  },
  {
    "text": "so instead of ENT doing some analysis I",
    "start": "1145919",
    "end": "1151000"
  },
  {
    "text": "decided to use the memory access pattern so memory access analysis relat",
    "start": "1151000",
    "end": "1159039"
  },
  {
    "text": "memory reads on API function code and corresponding memory rights on aosc",
    "start": "1159039",
    "end": "1166720"
  },
  {
    "text": "code there is instruction reses of skated API function is mapped into",
    "start": "1166720",
    "end": "1173520"
  },
  {
    "text": "original API function then after constructing a map",
    "start": "1173520",
    "end": "1179360"
  },
  {
    "text": "then we can recover original a function by thec called Target",
    "start": "1179360",
    "end": "1186240"
  },
  {
    "text": "addresses so you first need to construct a map from a facated address to API",
    "start": "1186240",
    "end": "1194360"
  },
  {
    "text": "function in this picture write addresses before next API function",
    "start": "1194360",
    "end": "1201840"
  },
  {
    "text": "read are is is approximation is bigger",
    "start": "1201840",
    "end": "1207120"
  },
  {
    "text": "than aosc function instruction addresses so AOS function instruction addresses",
    "start": "1207120",
    "end": "1214320"
  },
  {
    "text": "are read and written there are some garbage",
    "start": "1214320",
    "end": "1220520"
  },
  {
    "text": "rights so it is contained yeah it is contained read addresses are contained in right",
    "start": "1220520",
    "end": "1227400"
  },
  {
    "text": "address and and oppos API called Target address is contained in R read addresses",
    "start": "1227400",
    "end": "1234880"
  },
  {
    "text": "so we need to record every memory right before the next API function or dll",
    "start": "1234880",
    "end": "1241480"
  },
  {
    "text": "reads in regarding reads I need to check the memory read addresses is contained",
    "start": "1241480",
    "end": "1248720"
  },
  {
    "text": "in some API addresses and I limited the number memory rides for the last API function",
    "start": "1248720",
    "end": "1260360"
  },
  {
    "text": "and we need to identify a pated call at OE I did it also by pattern",
    "start": "1262039",
    "end": "1271880"
  },
  {
    "text": "matching matched patterns may contain false positives yeah and after Target",
    "start": "1271880",
    "end": "1279279"
  },
  {
    "text": "address resolution Miss interpreted instructions disappears by checking",
    "start": "1279279",
    "end": "1287080"
  },
  {
    "text": "and there are direct call and indirect call so we need other",
    "start": "1288760",
    "end": "1295159"
  },
  {
    "text": "things each uh direct call resolution is done um yeah if the call targets are in",
    "start": "1295159",
    "end": "1302440"
  },
  {
    "text": "the constructed map from aerior address to API function yeah we need to modify",
    "start": "1302440",
    "end": "1308320"
  },
  {
    "text": "call targets to the original API function address and regarding indirect",
    "start": "1308320",
    "end": "1317200"
  },
  {
    "text": "call because original segments text and ID data that contains",
    "start": "1317200",
    "end": "1325159"
  },
  {
    "text": "input address table are merg it into one segment when the binary is",
    "start": "1325159",
    "end": "1331240"
  },
  {
    "text": "packed we need to identify uh memory",
    "start": "1331240",
    "end": "1336640"
  },
  {
    "text": "block that contains successive oppos a function addresses the memory area is at",
    "start": "1336640",
    "end": "1344360"
  },
  {
    "text": "first all zeros in DOMA or some garbage code in brand",
    "start": "1344360",
    "end": "1352400"
  },
  {
    "text": "protect and we check yeah check it yeah whether it was meaningless before and it",
    "start": "1352400",
    "end": "1358000"
  },
  {
    "text": "contains some inut addresses it is a fistic so we need to",
    "start": "1358000",
    "end": "1364039"
  },
  {
    "text": "improve and at op we need to modify of security",
    "start": "1364039",
    "end": "1370039"
  },
  {
    "text": "call addresses in the I at candidate with the original API",
    "start": "1370039",
    "end": "1376520"
  },
  {
    "text": "function so after doing this we can deburg x86 binary with only deburger",
    "start": "1376520",
    "end": "1385480"
  },
  {
    "text": "after dication and yeah we can dump it to",
    "start": "1385480",
    "end": "1392320"
  },
  {
    "text": "executable file and compile and disassemble doic",
    "start": "1392320",
    "end": "1399600"
  },
  {
    "text": "analysis and I want to show two demos",
    "start": "1399880",
    "end": "1405960"
  },
  {
    "text": "um I prepared two pack samples it takes a long time first",
    "start": "1405960",
    "end": "1413559"
  },
  {
    "text": "is dynamic apid appication unpacking of 634 bit sample",
    "start": "1413559",
    "end": "1420080"
  },
  {
    "text": "and regarding static API dation I packed with theer",
    "start": "1420080",
    "end": "1427640"
  },
  {
    "text": "2.3.5 is commercial commercial peer packed 32bit mware I downloaded it",
    "start": "1427640",
    "end": "1434640"
  },
  {
    "text": "previously",
    "start": "1434640",
    "end": "1437640"
  },
  {
    "text": "yeah uh the file I made a sample code and packed",
    "start": "1444600",
    "end": "1450440"
  },
  {
    "text": "with doar 2.3.5 with tiger red P",
    "start": "1450440",
    "end": "1457400"
  },
  {
    "text": "machine my tool is not well developed so",
    "start": "1461039",
    "end": "1466360"
  },
  {
    "text": "I need to",
    "start": "1466360",
    "end": "1469760"
  },
  {
    "text": "type I developed it using Intel pin to trace memory read write and",
    "start": "1475440",
    "end": "1485440"
  },
  {
    "text": "execution oh",
    "start": "1488799",
    "end": "1492799"
  },
  {
    "text": "and I prepared yeah the text file in the text file it",
    "start": "1502520",
    "end": "1510679"
  },
  {
    "text": "contains the information of the analyze pack file it suggest some EP or new EP",
    "start": "1510679",
    "end": "1522000"
  },
  {
    "text": "and the First Column is the col address",
    "start": "1522000",
    "end": "1527559"
  },
  {
    "text": "and the second column indicates whether it is call or",
    "start": "1527559",
    "end": "1533000"
  },
  {
    "text": "jump and module and the last one",
    "start": "1533000",
    "end": "1538679"
  },
  {
    "text": "is the function function name so I used with this this information uh only deug",
    "start": "1538679",
    "end": "1547799"
  },
  {
    "text": "script and that in 6 634 I use x 64 de",
    "start": "1547799",
    "end": "1554080"
  },
  {
    "text": "and I used I translated it in to X",
    "start": "1554080",
    "end": "1561120"
  },
  {
    "text": "634 de script",
    "start": "1561120",
    "end": "1567240"
  },
  {
    "text": "so it can be done manually but yeah it can be done with deing",
    "start": "1567240",
    "end": "1575559"
  },
  {
    "text": "script I use this de but it is extremely slow and buy but I don't know whether",
    "start": "1576640",
    "end": "1584240"
  },
  {
    "text": "there is a better debuger for 60 for",
    "start": "1584240",
    "end": "1589960"
  },
  {
    "text": "bit I also use Ida Pro for debugging but it crashes a lot when we analyze of a",
    "start": "1589960",
    "end": "1597440"
  },
  {
    "text": "scal binary so I used it",
    "start": "1597440",
    "end": "1603480"
  },
  {
    "text": "and yeah here is the script and we can run",
    "start": "1603520",
    "end": "1610799"
  },
  {
    "text": "script yeah it t some B",
    "start": "1610799",
    "end": "1615120"
  },
  {
    "text": "so it takes B very very long",
    "start": "1616240",
    "end": "1621000"
  },
  {
    "text": "time yeah this is simple a simple example yeah just pop off some message",
    "start": "1622600",
    "end": "1631278"
  },
  {
    "text": "box",
    "start": "1634480",
    "end": "1637480"
  },
  {
    "text": "so this is the unpacking of 634 bit sample and for static API",
    "start": "1640919",
    "end": "1650158"
  },
  {
    "text": "I downloaded a file from virus toal 5 days",
    "start": "1653159",
    "end": "1659600"
  },
  {
    "text": "ago uh it is uh lengthy bware that is doing some bad",
    "start": "1659600",
    "end": "1670159"
  },
  {
    "text": "things it is packed wither and generate some draw files",
    "start": "1670159",
    "end": "1679360"
  },
  {
    "text": "and make some images and yeah doing bad things",
    "start": "1679360",
    "end": "1687279"
  },
  {
    "text": "here some system services and Sh commands doing bad things",
    "start": "1687559",
    "end": "1696360"
  },
  {
    "text": "so the name is po42 a.exe",
    "start": "1700360",
    "end": "1705679"
  },
  {
    "text": "it took minutes so I was prepared",
    "start": "1714760",
    "end": "1723240"
  },
  {
    "text": "already oh it's still warning",
    "start": "1724480",
    "end": "1729398"
  },
  {
    "text": "sorry the phone T is too small",
    "start": "1761039",
    "end": "1766120"
  },
  {
    "text": "yeah the script itself is similar to X 634 deburger yeah I used some plugins",
    "start": "1768320",
    "end": "1778200"
  },
  {
    "text": "only debug plugins called OBG script and",
    "start": "1778200",
    "end": "1784039"
  },
  {
    "text": "for evade anti- deving I used Phantom",
    "start": "1784039",
    "end": "1789240"
  },
  {
    "text": "and strong Ai and made some configuration and I changed the",
    "start": "1789240",
    "end": "1797120"
  },
  {
    "text": "configuration file of VM Fusion in this machine to avoid VM",
    "start": "1797120",
    "end": "1805720"
  },
  {
    "text": "detection yeah so it tells us what is the we",
    "start": "1807159",
    "end": "1816480"
  },
  {
    "text": "and IAT start and the size of",
    "start": "1816480",
    "end": "1822278"
  },
  {
    "text": "IAT clear break points and get some information on module and have to",
    "start": "1823440",
    "end": "1833679"
  },
  {
    "text": "resolve each API calls and yeah the specified",
    "start": "1833679",
    "end": "1839600"
  },
  {
    "text": "addresses",
    "start": "1839640",
    "end": "1842640"
  },
  {
    "text": "so the mware is loaded into ol burger and",
    "start": "1849519",
    "end": "1857159"
  },
  {
    "text": "it is packed so we need to decate it",
    "start": "1858399",
    "end": "1866639"
  },
  {
    "text": "by the script",
    "start": "1866639",
    "end": "1870639"
  },
  {
    "text": "generated and you can see in the address table here it is",
    "start": "1873360",
    "end": "1880279"
  },
  {
    "text": "changed and the address is resolved",
    "start": "1880279",
    "end": "1885320"
  },
  {
    "text": "and when we search",
    "start": "1890080",
    "end": "1892960"
  },
  {
    "text": "for sorry M moment all inter modular",
    "start": "1901240",
    "end": "1909880"
  },
  {
    "text": "cones now we we see that yeah my tool is not perfect so some",
    "start": "1915480",
    "end": "1922799"
  },
  {
    "text": "calls are not resolved but most of the API Calles are",
    "start": "1922799",
    "end": "1928960"
  },
  {
    "text": "resolved and I found that some cones",
    "start": "1936159",
    "end": "1943159"
  },
  {
    "text": "uh now now when you dump this file",
    "start": "1950679",
    "end": "1955720"
  },
  {
    "text": "with execution dumper I use Siller to dump the",
    "start": "1955720",
    "end": "1964399"
  },
  {
    "text": "file and it can be dumped by entering we and IAT address",
    "start": "1964559",
    "end": "1972159"
  },
  {
    "text": "and size so we check the o",
    "start": "1972159",
    "end": "1978919"
  },
  {
    "text": "and I address and",
    "start": "1996000",
    "end": "2003600"
  },
  {
    "text": "size then we to get Imports and dump",
    "start": "2005399",
    "end": "2013600"
  },
  {
    "text": "it it's a normal process to",
    "start": "2020159",
    "end": "2024440"
  },
  {
    "text": "dump so yeah here is stomped file although it",
    "start": "2027919",
    "end": "2035399"
  },
  {
    "text": "is not perfectly decad it import table is recovered and we can",
    "start": "2035399",
    "end": "2044760"
  },
  {
    "text": "check here the files and even we can decompile",
    "start": "2044760",
    "end": "2052320"
  },
  {
    "text": "it now there are some errors so we need to manually correct",
    "start": "2052520",
    "end": "2057878"
  },
  {
    "text": "this uh unresolved addresses",
    "start": "2057879",
    "end": "2064358"
  },
  {
    "text": "so this is my demo",
    "start": "2064359",
    "end": "2069000"
  },
  {
    "text": "uh and how I implemented it is I use pin tool to resolve API",
    "start": "2074159",
    "end": "2080638"
  },
  {
    "text": "addresses it is developed under Windows 8.17 3260 bit on VMware I used P studio",
    "start": "2080639",
    "end": "2090720"
  },
  {
    "text": "2013 Intel PN 2.14 yeah the latest version and use Python script to patch",
    "start": "2090720",
    "end": "2098920"
  },
  {
    "text": "call and you use reversing to tools x 64 de only deburger and I",
    "start": "2098920",
    "end": "2107720"
  },
  {
    "text": "Pro uh the the tication process is as follow API resolver that is a pin tool",
    "start": "2108480",
    "end": "2117480"
  },
  {
    "text": "get API information and generate a text file and API information in the text",
    "start": "2117480",
    "end": "2122839"
  },
  {
    "text": "file is used by python script is debug script generator so it produces Dev",
    "start": "2122839",
    "end": "2130560"
  },
  {
    "text": "script and when we debur the binary",
    "start": "2130560",
    "end": "2136000"
  },
  {
    "text": "with de script and the pack binary then we can",
    "start": "2136000",
    "end": "2141119"
  },
  {
    "text": "get deicated file and when you dump the file then we do we can do static",
    "start": "2141119",
    "end": "2147680"
  },
  {
    "text": "analysis with I Pro yeah I show the the text file",
    "start": "2147680",
    "end": "2155160"
  },
  {
    "text": "and the observation script",
    "start": "2155160",
    "end": "2159640"
  },
  {
    "text": "so to wrap up uh I suggested two API deification",
    "start": "2162240",
    "end": "2170760"
  },
  {
    "text": "methods one is memory access analysis for dynamic ofation one is iterative",
    "start": "2170760",
    "end": "2178160"
  },
  {
    "text": "runi method for C ofation and as a result our commercial",
    "start": "2178160",
    "end": "2185880"
  },
  {
    "text": "PE protected binary can be analyzed using API decator using",
    "start": "2185880",
    "end": "2192960"
  },
  {
    "text": "deburger and dis assembler and compiler but it has some limitations it",
    "start": "2192960",
    "end": "2200520"
  },
  {
    "text": "is depending on Dynamic binary instrumentation tools uh using I I use",
    "start": "2200520",
    "end": "2207000"
  },
  {
    "text": "pin I also use test it with Dynamo Rio but the behavior is the behavior is",
    "start": "2207000",
    "end": "2214480"
  },
  {
    "text": "almost the same uh but some peckers can detect dynamic dynamic binary instrumentation",
    "start": "2214480",
    "end": "2221520"
  },
  {
    "text": "tools there was a torque in blackhead last year maybe defeating the",
    "start": "2221520",
    "end": "2228480"
  },
  {
    "text": "transparency feature of dinary binary instrumentation",
    "start": "2228480",
    "end": "2233560"
  },
  {
    "text": "tools and the latest version of obsidium",
    "start": "2233560",
    "end": "2239200"
  },
  {
    "text": "detect Intel pin as a debugger so in this case I used o debuger to evade such",
    "start": "2239200",
    "end": "2247880"
  },
  {
    "text": "things it also delete Hardware break points so I need yeah",
    "start": "2247880",
    "end": "2253319"
  },
  {
    "text": "some uh patient patient job doing uh break points that cannot be detected",
    "start": "2253319",
    "end": "2261200"
  },
  {
    "text": "setting breakpoint Hardware breakpoint on some antd",
    "start": "2261200",
    "end": "2267280"
  },
  {
    "text": "FES and DBI to crash in some applications for example when I try to",
    "start": "2267280",
    "end": "2276240"
  },
  {
    "text": "analyze some game hacking program then yeah",
    "start": "2276240",
    "end": "2282280"
  },
  {
    "text": "maybe game programs use some weird applications and they also have some",
    "start": "2282280",
    "end": "2289079"
  },
  {
    "text": "protection mechanisms so uh they quit the pin itself so yeah DB to crash in",
    "start": "2289079",
    "end": "2298599"
  },
  {
    "text": "some applications and I don't know why it is Crash it so far so in such cases I",
    "start": "2298599",
    "end": "2305680"
  },
  {
    "text": "use also debugger and manually do some jobs we can set break point on memory",
    "start": "2305680",
    "end": "2313640"
  },
  {
    "text": "read and write at some point and manually log or develop some custom",
    "start": "2313640",
    "end": "2321960"
  },
  {
    "text": "script to unpack such files yeah but it takes too long uh the API decator I developed",
    "start": "2321960",
    "end": "2331079"
  },
  {
    "text": "require three or four minutes with large files but when I use use such de script",
    "start": "2331079",
    "end": "2338839"
  },
  {
    "text": "it took about hours yeah to decate decate",
    "start": "2338839",
    "end": "2344280"
  },
  {
    "text": "the uh special yeah packed application but yeah it works with",
    "start": "2344280",
    "end": "2352400"
  },
  {
    "text": "deers so as a future work I wanted to",
    "start": "2352400",
    "end": "2357880"
  },
  {
    "text": "develop um emulator just for unpacking I currently I have",
    "start": "2357880",
    "end": "2365000"
  },
  {
    "text": "some emulator that is some extraction of box and some extraction",
    "start": "2365000",
    "end": "2372440"
  },
  {
    "text": "of X6 X32 emu developed by",
    "start": "2372440",
    "end": "2378040"
  },
  {
    "text": "chisle and it is working but it is a little bit tricky because they doesn't",
    "start": "2378040",
    "end": "2383640"
  },
  {
    "text": "support yeah the multi thread when I extracted the CPU",
    "start": "2383640",
    "end": "2391040"
  },
  {
    "text": "only yesterday uh unicorn I heard a t",
    "start": "2391040",
    "end": "2396280"
  },
  {
    "text": "who developed unic corn yeah there is dream they they say the dream emulator",
    "start": "2396280",
    "end": "2402240"
  },
  {
    "text": "but it doesn't support multi-threading so we cannot apply that in this case",
    "start": "2402240",
    "end": "2409560"
  },
  {
    "text": "because doar use near uh around 20",
    "start": "2409560",
    "end": "2416000"
  },
  {
    "text": "threads to check whether it is analyzed or not so I need some multi thread",
    "start": "2416000",
    "end": "2423599"
  },
  {
    "text": "support emulator and for API call resolution",
    "start": "2423599",
    "end": "2429319"
  },
  {
    "text": "code optimization and binary diffing for cic whole function ofation and sometimes",
    "start": "2430119",
    "end": "2437680"
  },
  {
    "text": "for custom peckers use some weird tication so I",
    "start": "2437680",
    "end": "2443599"
  },
  {
    "text": "need code oppos cator only for Theos skating binaries",
    "start": "2443599",
    "end": "2451359"
  },
  {
    "text": "and I need backward dependence analysis for custom pckers",
    "start": "2451359",
    "end": "2458078"
  },
  {
    "text": "and that's all any",
    "start": "2458720",
    "end": "2462720"
  },
  {
    "text": "questions then thank you if you have any question you email me",
    "start": "2480200",
    "end": "2487838"
  }
]