[
  {
    "start": "0",
    "end": "62000"
  },
  {
    "text": "good afternoon and welcome to Pratt school web cache poisoning have you ever",
    "start": "30",
    "end": "6299"
  },
  {
    "text": "been working away and just noticed something that wasn't quite right and thought that's strange but that's rather",
    "start": "6299",
    "end": "14040"
  },
  {
    "text": "complex I think I'll just deal with that later on when I have more free time for",
    "start": "14040",
    "end": "20160"
  },
  {
    "text": "years web cache poisoning has been a vulnerability that people didn't want to think about it's existed mostly is one",
    "start": "20160",
    "end": "26789"
  },
  {
    "text": "of these theoretical vulnerabilities that are more often used to scare people than actually proven to exist and for",
    "start": "26789",
    "end": "35820"
  },
  {
    "text": "years I lived in fear of web cache poisoning and it's notorious complexity but I recently found myself in a",
    "start": "35820",
    "end": "42660"
  },
  {
    "text": "situation where I had no choice but to try it and discovered that actually web cache poisoning is wonderful so today in",
    "start": "42660",
    "end": "50910"
  },
  {
    "text": "this session I'm going to share with you practical tools and techniques to detect explore and exploit web cache poisoning",
    "start": "50910",
    "end": "58440"
  },
  {
    "text": "I don't normally share the story of how I got started on research because it's",
    "start": "58440",
    "end": "64080"
  },
  {
    "start": "62000",
    "end": "62000"
  },
  {
    "text": "generally pretty dry but this one time I'm gonna make an exception I started out about a year ago with a",
    "start": "64080",
    "end": "72390"
  },
  {
    "text": "simple plan and a lot of optimism I wrote this tool to find hidden query",
    "start": "72390",
    "end": "77790"
  },
  {
    "text": "parameters called parameter and my plan was I was going to run this tool on lots of sites it would find some really cool",
    "start": "77790",
    "end": "85200"
  },
  {
    "text": "weird parameters I'd find some awesome bugs and those and I'd give a talk about that and it started off quite well I",
    "start": "85200",
    "end": "92970"
  },
  {
    "text": "found some quite remarkable query parameters like this one here but the",
    "start": "92970",
    "end": "99570"
  },
  {
    "text": "next step just went horribly wrong the most interesting thing I could find in these query parameters that was actually",
    "start": "99570",
    "end": "106439"
  },
  {
    "text": "serious over and over was bullying old reflected cross-site scripting which is not something that I really want to give",
    "start": "106439",
    "end": "112740"
  },
  {
    "text": "a talk about and so I thought okay well this hasn't worked out but maybe all the",
    "start": "112740",
    "end": "119759"
  },
  {
    "text": "cool vulnerabilities are actually hiding in cookies so I hacked on my code to guess cookie names as well set it",
    "start": "119759",
    "end": "127020"
  },
  {
    "text": "running and found something that looks super promising and about eight hours",
    "start": "127020",
    "end": "132060"
  },
  {
    "text": "later I got absolutely nowhere and had to actually that was a waste of time as well and at this stage I only really had",
    "start": "132060",
    "end": "140820"
  },
  {
    "text": "one option left which was so once again hack up the code and this time make it guess HTTP headers so I did this and I",
    "start": "140820",
    "end": "149220"
  },
  {
    "text": "set out guessing headers and found loads of weird and wonderful headers and yet",
    "start": "149220",
    "end": "154920"
  },
  {
    "text": "once again in these headers I found nothing perfect for site scripting which I was pretty sick of at this point and",
    "start": "154920",
    "end": "161400"
  },
  {
    "text": "the cross-site scripting in headers is even less interesting than normal reflected XSS because there's no way for",
    "start": "161400",
    "end": "168150"
  },
  {
    "text": "me to make someone else's browser send a header across to mate there was only one",
    "start": "168150",
    "end": "174360"
  },
  {
    "text": "tiny glimmer of hope which was the summer some of these servers that had",
    "start": "174360",
    "end": "179430"
  },
  {
    "text": "exercise in their headers used caching and just maybe I could use their caches",
    "start": "179430",
    "end": "185040"
  },
  {
    "text": "as an exploit delivery mechanism for my header based XSS so I try this as an",
    "start": "185040",
    "end": "191430"
  },
  {
    "text": "absolute last resort and quite surprisingly it actually worked so first",
    "start": "191430",
    "end": "197820"
  },
  {
    "start": "197000",
    "end": "197000"
  },
  {
    "text": "I'm going to talk about what cache poisoning is and how you can find it then I'll demonstrate cache poisoning on",
    "start": "197820",
    "end": "203610"
  },
  {
    "text": "a bunch of well-known websites and show what goes wrong and what goes well and",
    "start": "203610",
    "end": "209340"
  },
  {
    "text": "then also do a live demo on a very well-known piece of software and talk",
    "start": "209340",
    "end": "214680"
  },
  {
    "text": "about how not to get your cache poisoned and then finally wrap up and take five minutes of questions so first of all a",
    "start": "214680",
    "end": "224760"
  },
  {
    "start": "223000",
    "end": "223000"
  },
  {
    "text": "bit of context as to this presentation in this presentation I'm not going to be",
    "start": "224760",
    "end": "230100"
  },
  {
    "text": "talking about browser cache poisoning browsers have built-in caches these are client-side caches and from a",
    "start": "230100",
    "end": "237150"
  },
  {
    "text": "security point of view from the cache poisoning point of view they're not that interesting I so I'm not talking about",
    "start": "237150",
    "end": "242280"
  },
  {
    "text": "those I'm talking about server-side caches also web cache poisoning is not",
    "start": "242280",
    "end": "247769"
  },
  {
    "text": "web cache deception web cache deception is a really cool technique that was there was there was a blackout",
    "start": "247769",
    "end": "253739"
  },
  {
    "text": "presentation on it last year and it's about tricking caches into storing",
    "start": "253739",
    "end": "259049"
  },
  {
    "text": "sensitive information belonging to users so that the attacker can get access to it web cache poisoning was about",
    "start": "259049",
    "end": "267660"
  },
  {
    "text": "using caches to save malicious payloads so those payloads get served up to other users so it's kind of related with the",
    "start": "267660",
    "end": "274500"
  },
  {
    "text": "inverse and the way you exploit them and find them is completely different also",
    "start": "274500",
    "end": "279590"
  },
  {
    "text": "this is not about web cache poisoning uses a response splitting or request smuggling these are both cool techniques",
    "start": "279590",
    "end": "285750"
  },
  {
    "text": "that will get you cache poisoning in the right circumstances but a lot of the",
    "start": "285750",
    "end": "291480"
  },
  {
    "text": "time they're they don't really work and they're not the topic of this presentation finally and most",
    "start": "291480",
    "end": "298350"
  },
  {
    "text": "importantly practical web cache poisoning is not theoretical every",
    "start": "298350",
    "end": "303930"
  },
  {
    "text": "example I'm using in this entire presentation is based on a real system that I've proven can be exploited using",
    "start": "303930",
    "end": "310230"
  },
  {
    "text": "this technique so first let's take a very quick look at how caching is",
    "start": "310230",
    "end": "317370"
  },
  {
    "text": "supposed to work here we've got three users fetching the same resource one",
    "start": "317370",
    "end": "322440"
  },
  {
    "text": "after the other this resource might be an image or a JavaScript file or even just a HTML web",
    "start": "322440",
    "end": "327900"
  },
  {
    "text": "page and when the cache sees this resource being fetched for the first time it saves a local copy of it which",
    "start": "327900",
    "end": "334860"
  },
  {
    "text": "means it can then the serve that copy up to other users without having to communicate with the backend server which speeds the website up and",
    "start": "334860",
    "end": "342410"
  },
  {
    "text": "everyone's happy all objective with web cache poisoning is to send a request to",
    "start": "342410",
    "end": "348990"
  },
  {
    "text": "the server that causes a harmful malicious response to come back to me and then we want the cache to save that",
    "start": "348990",
    "end": "355560"
  },
  {
    "start": "349000",
    "end": "349000"
  },
  {
    "text": "and serve it up to other users the first step to achieving this is to ask the",
    "start": "355560",
    "end": "362730"
  },
  {
    "text": "question how does the cache know that those first three users are all fetching the same resource",
    "start": "362730",
    "end": "368630"
  },
  {
    "text": "it can't be doing a full on byte by byte can Paris on the on the on their HTTP",
    "start": "368630",
    "end": "374340"
  },
  {
    "start": "370000",
    "end": "370000"
  },
  {
    "text": "requests because HTTP requests are full of all kinds of junk for example if those users had different",
    "start": "374340",
    "end": "379980"
  },
  {
    "text": "web browsers the user-agent header would be different so the caching wouldn't really work caches addressed this",
    "start": "379980",
    "end": "387720"
  },
  {
    "text": "problem with the concept of cache keats they say we only care about certain",
    "start": "387720",
    "end": "393390"
  },
  {
    "text": "parts of the of the request generally just the host header and the request light so this is all that the cache does",
    "start": "393390",
    "end": "400680"
  },
  {
    "text": "a comparison to work out if two requests are accessing the same results and that's",
    "start": "400680",
    "end": "408509"
  },
  {
    "text": "all well and good but it leads us on to the next question which is well what",
    "start": "408509",
    "end": "414389"
  },
  {
    "text": "happens if there's something important and it's not included in the cache key",
    "start": "414389",
    "end": "419509"
  },
  {
    "text": "this is where things start to get interesting so here we have two requests",
    "start": "419509",
    "end": "427280"
  },
  {
    "start": "425000",
    "end": "425000"
  },
  {
    "text": "to the same website to the same URL to retrieve a white paper but one of them is trying to fetch it in English and the",
    "start": "427280",
    "end": "433979"
  },
  {
    "text": "other one is trying to fetch it in Spanish thanks to this language cookie and that's absolutely fine and that will",
    "start": "433979",
    "end": "439949"
  },
  {
    "text": "work just great until you put a cache in front of this website once you don't",
    "start": "439949",
    "end": "446310"
  },
  {
    "text": "once you do that it will break because the cookie header is not part of the default cache key and so the cache is",
    "start": "446310",
    "end": "453060"
  },
  {
    "text": "completely oblivious to this language cookie and that means that if the",
    "start": "453060",
    "end": "458280"
  },
  {
    "text": "English user were to fetch this white paper first they would accidentally poison the cache with the English",
    "start": "458280",
    "end": "463889"
  },
  {
    "text": "version of the white paper and all the users of other languages would end up receiving the white paper in English and",
    "start": "463889",
    "end": "470580"
  },
  {
    "text": "by itself well obviously that's just a harmless nuisance but this is the",
    "start": "470580",
    "end": "476099"
  },
  {
    "text": "behavior that we're going to turn to our advantage in effect everything that's",
    "start": "476099",
    "end": "481650"
  },
  {
    "text": "not part of the cache key is part of the cache poisoning attack surface so how do",
    "start": "481650",
    "end": "491669"
  },
  {
    "start": "489000",
    "end": "489000"
  },
  {
    "text": "you find cache poisoning well the first step is to identify a non keyed input so",
    "start": "491669",
    "end": "498210"
  },
  {
    "text": "probably a HTTP header or a cookie and I'm releasing the talk around minor as",
    "start": "498210",
    "end": "503669"
  },
  {
    "text": "an open source tool that works in the Pro and free versions of book so everyone can just run that so when that",
    "start": "503669",
    "end": "509880"
  },
  {
    "text": "will hopefully do a decent job of finding some uncle'd inputs on your site once you've found the input the next",
    "start": "509880",
    "end": "516599"
  },
  {
    "text": "step is to work out if you can do anything interesting with it if genuinely all you can do with this input",
    "start": "516599",
    "end": "522328"
  },
  {
    "text": "is change the language like in the example I just showed you well that's pretty boring right that's not really",
    "start": "522329",
    "end": "527760"
  },
  {
    "text": "worth following up on but a lot of inputs can be used for more interesting stuff while you",
    "start": "527760",
    "end": "534580"
  },
  {
    "text": "doing these two steps it's absolutely crucial to specify a random cache buster",
    "start": "534580",
    "end": "539950"
  },
  {
    "text": "a parameter that changes its value on every request if you don't do this then",
    "start": "539950",
    "end": "545140"
  },
  {
    "text": "you you risk getting a response from the cache rather than from the backend server and that will effectively make",
    "start": "545140",
    "end": "551920"
  },
  {
    "text": "any unhealed inputs that you're sending completely invisible I think that this",
    "start": "551920",
    "end": "557440"
  },
  {
    "text": "is why cache poisoning has remained so low-profile for so many years even",
    "start": "557440",
    "end": "562570"
  },
  {
    "text": "though once you know how to do it it's actually pretty easy once you found that",
    "start": "562570",
    "end": "568630"
  },
  {
    "text": "once you've found your own heat input and established it has some kind of exploit potential the next step is just to try and get it saved in the cache and",
    "start": "568630",
    "end": "575920"
  },
  {
    "text": "you may find that already happened because it's kind of a job of caches to save stuff so they can be quite",
    "start": "575920",
    "end": "581650"
  },
  {
    "text": "aggressive about it but if your response hasn't been saved in the cache then you'll need to fingerprint the cache",
    "start": "581650",
    "end": "587590"
  },
  {
    "text": "rules because they may be saying things like we're only going to cache responses with Stern file extensions or certain",
    "start": "587590",
    "end": "593860"
  },
  {
    "text": "status codes and so on and then you'll just need to troll the app to find the target page as to find a page that",
    "start": "593860",
    "end": "599470"
  },
  {
    "text": "fulfills the conditions and that you can point during this step it's important to",
    "start": "599470",
    "end": "605410"
  },
  {
    "text": "have a static safety parameter I'm going to talk more about that shortly and that is pretty much all the theory of cache",
    "start": "605410",
    "end": "613420"
  },
  {
    "text": "poisoning so let's take a look at what",
    "start": "613420",
    "end": "619120"
  },
  {
    "text": "happens when we apply this methodology to some real websites now part of the",
    "start": "619120",
    "end": "624610"
  },
  {
    "text": "goal of the section is just that I want to show you the cache poisoning does work on real sites but I've chosen these",
    "start": "624610",
    "end": "631090"
  },
  {
    "text": "specific examples to show you some of the challenges you may run into with cache poisoning and give you some ideas",
    "start": "631090",
    "end": "637990"
  },
  {
    "text": "as to how to deal with those challenges as usual I've only targeted sites that",
    "start": "637990",
    "end": "643210"
  },
  {
    "text": "have bug bounty programs and all the specific examples I'm showing you here have been fixed but the technique still",
    "start": "643210",
    "end": "650620"
  },
  {
    "text": "work on many other websites I've exploited targets with all of the caches",
    "start": "650620",
    "end": "655660"
  },
  {
    "text": "that you can see logos off here and ultimately I think basically all caches can potentially be poisoned using this",
    "start": "655660",
    "end": "662260"
  },
  {
    "text": "technique because it's a design flaw in caches rather than an exploit for a",
    "start": "662260",
    "end": "667570"
  },
  {
    "text": "specific caching system so to begin we're going",
    "start": "667570",
    "end": "673329"
  },
  {
    "start": "671000",
    "end": "671000"
  },
  {
    "text": "to take a look at the home page of Reddit at home made of Red Hat popular Linux distribution now if you look at",
    "start": "673329",
    "end": "681700"
  },
  {
    "text": "the home page you might think this doesn't look very promising because we've got this cache control no cache",
    "start": "681700",
    "end": "687490"
  },
  {
    "text": "headers it explicitly says don't catch this and also there's no other headers",
    "start": "687490",
    "end": "692800"
  },
  {
    "text": "that suggest that this site is actually using caching so it would be tempting to",
    "start": "692800",
    "end": "698050"
  },
  {
    "text": "give up at this point but that would be a mistake because headers will lighten so if you run parameter on this and and",
    "start": "698050",
    "end": "706180"
  },
  {
    "text": "tell it to guess headers it will quickly find that the x4 did host header is",
    "start": "706180",
    "end": "711459"
  },
  {
    "start": "710000",
    "end": "710000"
  },
  {
    "text": "reflected inside a particular piece of HTML and so that's how I'm keyed input",
    "start": "711459",
    "end": "718060"
  },
  {
    "text": "right and the next step is just to see well what damage can we do this now what",
    "start": "718060",
    "end": "725019"
  },
  {
    "text": "do you think the most obvious attack to try here it's it's cross-site scripting",
    "start": "725019",
    "end": "730570"
  },
  {
    "text": "right and sure enough we can break out of that input and inject arbitrary JavaScript into the response now by",
    "start": "730570",
    "end": "738459"
  },
  {
    "start": "732000",
    "end": "732000"
  },
  {
    "text": "itself this is useless right because we are only exploiting ourselves we are a hundred percent relying on their cache",
    "start": "738459",
    "end": "745029"
  },
  {
    "text": "to deliver this exploit to genuine users so we need to see if this is being saved",
    "start": "745029",
    "end": "750970"
  },
  {
    "text": "in the cache and to do that we just send the same request but we don't send any",
    "start": "750970",
    "end": "756040"
  },
  {
    "text": "any funny headers so we're just doing what a normal user would do and then we look at the response and sure enough our",
    "start": "756040",
    "end": "763149"
  },
  {
    "text": "malicious JavaScript has come back so that was it we just got full control",
    "start": "763149",
    "end": "768579"
  },
  {
    "text": "over the home page of Reddit calm and it wasn't very difficult right the only",
    "start": "768579",
    "end": "774610"
  },
  {
    "text": "other point that I should make is this safe equals one parameter this highlighted in blue that's not part of",
    "start": "774610",
    "end": "781540"
  },
  {
    "text": "Red Hat's website that's something I've manually specified because if I didn't do that there was a risk that a lot of",
    "start": "781540",
    "end": "789100"
  },
  {
    "text": "genuine visitors to Red Hat site would start seeing pop-ups and they might get upset",
    "start": "789100",
    "end": "795660"
  },
  {
    "text": "so headers will lie to you but they will also tell you useful",
    "start": "796110",
    "end": "802120"
  },
  {
    "text": "so having just mentioned that safety parameter let's pretend you a malicious person and you genuinely want to poison",
    "start": "802120",
    "end": "809470"
  },
  {
    "text": "the actual homepage of the site this is slightly more difficult because this",
    "start": "809470",
    "end": "815860"
  },
  {
    "text": "means you're in a kind of a race with all the genuine users of the website because you want your malicious response",
    "start": "815860",
    "end": "821770"
  },
  {
    "text": "to be cached rather than a normal innocent response so you need your request to be the first request to hit",
    "start": "821770",
    "end": "828760"
  },
  {
    "text": "the server after the cache entry expires and sometimes headers will really help",
    "start": "828760",
    "end": "834940"
  },
  {
    "text": "you out when you're trying to it to achieve that so this is the homepage of unity3d com",
    "start": "834940",
    "end": "840820"
  },
  {
    "start": "836000",
    "end": "836000"
  },
  {
    "text": "makers of a well-known computer game engine and we can inject JavaScript and",
    "start": "840820",
    "end": "846250"
  },
  {
    "text": "stuff with this X host header but the interesting thing is these age and max",
    "start": "846250",
    "end": "851800"
  },
  {
    "text": "age headers taken together specify the exact second that this response is going",
    "start": "851800",
    "end": "857920"
  },
  {
    "text": "to expire in the cache so that tells us the exact second that we need to start",
    "start": "857920",
    "end": "863320"
  },
  {
    "text": "spamming our payload to the server in order to take full control over the site",
    "start": "863320",
    "end": "869670"
  },
  {
    "start": "871000",
    "end": "871000"
  },
  {
    "text": "HTTP headers can give you give you other clues - so here we've got a different website which unfortunately I can't name",
    "start": "871800",
    "end": "878260"
  },
  {
    "text": "but it is quite well known and once again we can inject JavaScript using the",
    "start": "878260",
    "end": "884020"
  },
  {
    "text": "exported host header I think there's something in rails that just adds support for this header by default so if",
    "start": "884020",
    "end": "889180"
  },
  {
    "text": "you're using rails you might want to share that out but the interesting thing here is this very user agent header so",
    "start": "889180",
    "end": "897310"
  },
  {
    "text": "that's an instruction to the cache to add the user agent into the cache key so",
    "start": "897310",
    "end": "903910"
  },
  {
    "text": "that means that this request that I've sent here will poison the cache but they will only poison it for other people",
    "start": "903910",
    "end": "910060"
  },
  {
    "text": "using the same web browser as me and that's both a blessing and a curse it's",
    "start": "910060",
    "end": "916780"
  },
  {
    "text": "a bit of a headache because if I want to poison the majority of visitors then I need to send this request over and over",
    "start": "916780",
    "end": "924400"
  },
  {
    "text": "with every possible user agent but on the other hand it gives me the chance to be a bit more creative with an elective",
    "start": "924400",
    "end": "932440"
  },
  {
    "text": "about who I target for example perhaps I happen to know that the development team for this website always",
    "start": "932440",
    "end": "939500"
  },
  {
    "text": "uses Microsoft edge well that means I can poison the cache for everyone who's",
    "start": "939500",
    "end": "944930"
  },
  {
    "text": "not using edge and then the developers are going to have a really hard time figuring out why all of their users keep",
    "start": "944930",
    "end": "950300"
  },
  {
    "text": "getting exploited",
    "start": "950300",
    "end": "953110"
  },
  {
    "start": "956000",
    "end": "956000"
  },
  {
    "text": "okay so I've looked at three websites and in each case the poison has been done using basic reflected cross-site",
    "start": "956650",
    "end": "962960"
  },
  {
    "text": "scripting although through the cache poisoning we've escalated it to stored XSS so it's still serious but it's not",
    "start": "962960",
    "end": "970100"
  },
  {
    "text": "always that easy on this website catalog data.gov the x4 did host header is",
    "start": "970100",
    "end": "977270"
  },
  {
    "text": "reflected inside this data site root actually and their encoding this input",
    "start": "977270",
    "end": "982760"
  },
  {
    "text": "so we can't just break out and inject HTML to exploit this we need to figure",
    "start": "982760",
    "end": "988760"
  },
  {
    "text": "out what this attribute is actually for so to do that I set up ahead of",
    "start": "988760",
    "end": "994310"
  },
  {
    "text": "injection role in burp so we just add this exported host header to all of my traffic and then I just browse the site",
    "start": "994310",
    "end": "1000700"
  },
  {
    "text": "and what I found was when I loaded certain pages my browser sent a request",
    "start": "1000700",
    "end": "1006310"
  },
  {
    "text": "to the collaborator server to fetch some internationalization data from it so",
    "start": "1006310",
    "end": "1012690"
  },
  {
    "text": "using this on keyed input with cache poisoning we can make people visiting this website",
    "start": "1012690",
    "end": "1018100"
  },
  {
    "text": "fetch some kind of internationalization data from our website let's have a look",
    "start": "1018100",
    "end": "1024280"
  },
  {
    "text": "at what this data is supposed to look like it's meant to be a mapping of English phrases into the phrase in a",
    "start": "1024280",
    "end": "1031900"
  },
  {
    "text": "different language and the translated phrase is just concatenated into the dot",
    "start": "1031900",
    "end": "1038730"
  },
  {
    "text": "so what we can do is to everybody use our translation file and then we can",
    "start": "1038730",
    "end": "1044949"
  },
  {
    "text": "make our own custom translation file that translates English phrases into malicious HTML that exploits users so",
    "start": "1044949",
    "end": "1052600"
  },
  {
    "text": "the end the end was all of this is that if anyone views a page on that website that has the text show more on it then",
    "start": "1052600",
    "end": "1059890"
  },
  {
    "text": "my exploit fights and this is a really this thing where you where you serve up",
    "start": "1059890",
    "end": "1067330"
  },
  {
    "text": "malicious JSON by tricking the scientists requesting JSON from your website is a really common",
    "start": "1067330",
    "end": "1073780"
  },
  {
    "text": "pattern with cache poisoning",
    "start": "1073780",
    "end": "1077340"
  },
  {
    "start": "1079000",
    "end": "1079000"
  },
  {
    "text": "now after that exploit I forgot to delete the header injection and match",
    "start": "1079080",
    "end": "1084280"
  },
  {
    "text": "from the place role in burp and a few days later when I was just tidying stuff up and closing everything down I know",
    "start": "1084280",
    "end": "1090790"
  },
  {
    "text": "just a really weird request and hit the collaborator server so the null origin",
    "start": "1090790",
    "end": "1098470"
  },
  {
    "text": "is quite rare by itself but I at this point I'd never seen a lowercase origin",
    "start": "1098470",
    "end": "1104560"
  },
  {
    "text": "header coming from the browser before and it definitely didn't look like this",
    "start": "1104560",
    "end": "1109600"
  },
  {
    "text": "request had come from data gov and investigating it turned out that it came from a core Firefox feature called a",
    "start": "1109600",
    "end": "1117670"
  },
  {
    "start": "1116000",
    "end": "1116000"
  },
  {
    "text": "Mozilla shield so this is a system for silently installing extensions in the",
    "start": "1117670",
    "end": "1124870"
  },
  {
    "text": "background for research and and marketing purposes it's turned on by default in Firefox and you may have",
    "start": "1124870",
    "end": "1131680"
  },
  {
    "text": "actually heard of it because they hit the news last year when they installed a mr. robot extension err on a lot of",
    "start": "1131680",
    "end": "1137230"
  },
  {
    "text": "systems and it was meant to be invisible when it wasn't and some people got upset so when you open Firefox it sends this",
    "start": "1137230",
    "end": "1145420"
  },
  {
    "text": "request which is to fetch a list of URLs that contain recipes and the recipes",
    "start": "1145420",
    "end": "1151570"
  },
  {
    "text": "specify what extensions should be installed and it also resends this request like every 30 minutes or",
    "start": "1151570",
    "end": "1157750"
  },
  {
    "text": "something like that that's fine but of course for me burp had injected this",
    "start": "1157750",
    "end": "1163480"
  },
  {
    "text": "header exported host and that had overridden the urals in the response and they were using",
    "start": "1163480",
    "end": "1171520"
  },
  {
    "text": "caching in that head and wasn't in the cache key so the end effect was I could make every Firefox browser on the planet",
    "start": "1171520",
    "end": "1179740"
  },
  {
    "text": "connect to my system to fetch this list of recipes which specify what extensions",
    "start": "1179740",
    "end": "1184960"
  },
  {
    "text": "to install so that's pretty cool that's like 15 million browsers or something like that right so I raised the question",
    "start": "1184960",
    "end": "1192850"
  },
  {
    "text": "well ok or what can you do with these recipes now unfortunately for me Mozilla",
    "start": "1192850",
    "end": "1198970"
  },
  {
    "text": "was smart enough to sign these recipes so I couldn't just make my own malicious extension and then install install that",
    "start": "1198970",
    "end": "1205749"
  },
  {
    "text": "on 50 million computers but what I could do was replay old recipes so for a start",
    "start": "1205749",
    "end": "1213070"
  },
  {
    "text": "I could reinstall the mr. robot extension on every one which would been hilarious but more practically speaking",
    "start": "1213070",
    "end": "1220450"
  },
  {
    "text": "I could look through all the extensions that had ever been been supported by",
    "start": "1220450",
    "end": "1225820"
  },
  {
    "text": "this system find one with a known vulnerability and then basically forcibly inflict that vulnerability on",
    "start": "1225820",
    "end": "1231970"
  },
  {
    "text": "every copy of Firefox worldwide also there were some unsigned versions of",
    "start": "1231970",
    "end": "1238419"
  },
  {
    "text": "these recipes which are used by Firefox 4 they are apparently used by Mumbai by",
    "start": "1238419",
    "end": "1244450"
  },
  {
    "text": "Mozilla's back-end recipe development infrastructure so I could potentially",
    "start": "1244450",
    "end": "1250539"
  },
  {
    "text": "have used that to gain access to that infrastructure got hold of the signing key and then got my 50 million browser",
    "start": "1250539",
    "end": "1256179"
  },
  {
    "text": "botnet they patched this one remarkably fast when I reported it so reoccurring",
    "start": "1256179",
    "end": "1267789"
  },
  {
    "start": "1265000",
    "end": "1265000"
  },
  {
    "text": "theme in cache poisoning is that we'll find some kind of unkeyed input and at first glance it will look completely",
    "start": "1267789",
    "end": "1273399"
  },
  {
    "text": "useless like this exported host header on this website of a well-known computer game that I can't name this value is",
    "start": "1273399",
    "end": "1281919"
  },
  {
    "text": "reflected in the domain attribute of the setcookie header now as far as I know that's more or less useless also on this",
    "start": "1281919",
    "end": "1289389"
  },
  {
    "text": "website the exported scheme header if you set that value to anything other than HTTPS the server responds with a",
    "start": "1289389",
    "end": "1297369"
  },
  {
    "text": "redirect to itself once again harmless but if you send both of these headers at",
    "start": "1297369",
    "end": "1304899"
  },
  {
    "text": "the same time then suddenly we've got a redirect to a website of our choice and",
    "start": "1304899",
    "end": "1310289"
  },
  {
    "text": "because this is being done at the server level and they've got the caching setup right I can effectively replace any",
    "start": "1310289",
    "end": "1317470"
  },
  {
    "text": "response on the entire server any URL on the whole site with a redirect to my",
    "start": "1317470",
    "end": "1322869"
  },
  {
    "text": "site so using that I could read I met post requests to still see surf tokens and I could also redirect JSON fetches",
    "start": "1322869",
    "end": "1330789"
  },
  {
    "text": "in order to serve up malicious JSON and once again get based cross-site scripting on various",
    "start": "1330789",
    "end": "1336160"
  },
  {
    "text": "pages much like why did earlier on data.gov",
    "start": "1336160",
    "end": "1341100"
  },
  {
    "text": "now some systems go beyond using headers to generate your goals and their user",
    "start": "1342090",
    "end": "1347770"
  },
  {
    "text": "for internal routing which is really pretty cool so go tyre comm is hosted using HubSpot",
    "start": "1347770",
    "end": "1354790"
  },
  {
    "text": "and HubSpot appear to use the exported server header to work out which client",
    "start": "1354790",
    "end": "1360010"
  },
  {
    "text": "you are now we can't exploit this directly because they're encoding the input to exploit this I needed to",
    "start": "1360010",
    "end": "1367270"
  },
  {
    "text": "register myself on good higher com make my own website but some malicious HTML",
    "start": "1367270",
    "end": "1372520"
  },
  {
    "text": "on that which they let me because it's my own website and then trick good hire into serving that up and trick HubSpot",
    "start": "1372520",
    "end": "1378910"
  },
  {
    "text": "into serving that up on good fire com so using this and then of course cloud for",
    "start": "1378910",
    "end": "1386260"
  },
  {
    "text": "that would cache that and serve out to everybody accessing code wire so using",
    "start": "1386260",
    "end": "1391360"
  },
  {
    "text": "this I could take full control over any page on any website hosted on HubSpot",
    "start": "1391360",
    "end": "1397350"
  },
  {
    "text": "now I reported this to good hire because those were the guys with the bug bounty program and they passed it on to HubSpot",
    "start": "1397350",
    "end": "1404530"
  },
  {
    "text": "who had decided to resolve the issue by permanently banning my IP address which",
    "start": "1404530",
    "end": "1411880"
  },
  {
    "text": "wasn't very polite but I've checked back and it does look like they have fixed the root issue so if you if you're using",
    "start": "1411880",
    "end": "1418900"
  },
  {
    "text": "hub spot then I think you're probably okay right now this one is my second",
    "start": "1418900",
    "end": "1425440"
  },
  {
    "start": "1422000",
    "end": "1422000"
  },
  {
    "text": "favorite attack in this research partly because I'm exploiting a security",
    "start": "1425440",
    "end": "1431260"
  },
  {
    "text": "company because they use their own security products on their website so",
    "start": "1431260",
    "end": "1437200"
  },
  {
    "text": "blog CloudFlare com he's hosted using ghost and ghost is",
    "start": "1437200",
    "end": "1444570"
  },
  {
    "text": "doing something with the exported host header but if we try the attack that just works on hub spot and specify our",
    "start": "1444570",
    "end": "1453400"
  },
  {
    "text": "own domain name after signing up with ghost it doesn't work they give the correct response after a mysterious",
    "start": "1453400",
    "end": "1459810"
  },
  {
    "text": "ten-second wait which I never figured out the cause off to exploit this site",
    "start": "1459810",
    "end": "1466200"
  },
  {
    "text": "we need to kind of hit a different point in ghosts stack and we can do that by",
    "start": "1466200",
    "end": "1471690"
  },
  {
    "text": "instead of specifying our custom ghost domain name we can specify our ghost",
    "start": "1471690",
    "end": "1477429"
  },
  {
    "text": "subdomain which triggers a redirect to our custom domain so using this I could replace any response on that site with a",
    "start": "1477429",
    "end": "1484240"
  },
  {
    "text": "redirect to my domain however when it",
    "start": "1484240",
    "end": "1489340"
  },
  {
    "text": "came to getting this stored in the cache things got a bit tricky because CloudFlare site was configured to only",
    "start": "1489340",
    "end": "1495940"
  },
  {
    "text": "cache things with certain file extensions so I could read over images",
    "start": "1495940",
    "end": "1502659"
  },
  {
    "start": "1496000",
    "end": "1496000"
  },
  {
    "text": "which was kind of funny I could just hijack any images on any of their blog posts but when I tried to do something",
    "start": "1502659",
    "end": "1510730"
  },
  {
    "text": "useful with it and hijack JavaScript I ran into quite a significant problem",
    "start": "1510730",
    "end": "1516309"
  },
  {
    "text": "which is that this redirect the ghost was issuing was using the HTTP protocol rather than HTTP and that means that",
    "start": "1516309",
    "end": "1524200"
  },
  {
    "text": "browsers mixed content protection kicks in and blocks this redirect effectively completely preventing my attack from",
    "start": "1524200",
    "end": "1531159"
  },
  {
    "text": "working how I spent ages trying to find Oh to find a way around this and how I",
    "start": "1531159",
    "end": "1538210"
  },
  {
    "text": "was even considering just contacting ghost support and just asking them to change the redirect to HTTPS but never",
    "start": "1538210",
    "end": "1546279"
  },
  {
    "text": "obviously somebody epic owns with that plan so I didn't go ahead with that in the end what I decided to do instead was",
    "start": "1546279",
    "end": "1553389"
  },
  {
    "text": "to try and crowdsource a solution so I built a replica of this mixed content",
    "start": "1553389",
    "end": "1559389"
  },
  {
    "text": "problem and I stuck it in my online hacking game and then I tweeted saying here's a challenge there's no known",
    "start": "1559389",
    "end": "1565960"
  },
  {
    "text": "solution and the first person to to solve it I will get half the back half the bug bounty and that led to a great",
    "start": "1565960",
    "end": "1573610"
  },
  {
    "text": "community response and two solid solutions the first one was someone",
    "start": "1573610",
    "end": "1580779"
  },
  {
    "text": "found their in Safari if the website you'll be directing to is in safaris strict Transport Security cache then it",
    "start": "1580779",
    "end": "1589029"
  },
  {
    "text": "will get automatically upgraded to HTTPS before the mixed content protection block happens so that means I can",
    "start": "1589029",
    "end": "1596320"
  },
  {
    "text": "exploit Safari users also someone then found in Microsoft",
    "start": "1596320",
    "end": "1603460"
  },
  {
    "text": "edge if your response sent over HTTP is a 302 redirect to HTTPS URL edge will",
    "start": "1603460",
    "end": "1611740"
  },
  {
    "text": "just follow that and execute it which is which is great for me so this so that",
    "start": "1611740",
    "end": "1617290"
  },
  {
    "text": "means this exploit will work on edge users as well and it's also a full mixed content bypass edge so if there's any",
    "start": "1617290",
    "end": "1624880"
  },
  {
    "text": "Microsoft people in the audience you might want to look at at that one so using this the end result is if you went",
    "start": "1624880",
    "end": "1631630"
  },
  {
    "text": "to blogs or CloudFlare comm or any other website hosted on ghost org",
    "start": "1631630",
    "end": "1637510"
  },
  {
    "text": "I could take full control over the site over your account on there if you were using edge or Safari and if not well I",
    "start": "1637510",
    "end": "1644080"
  },
  {
    "text": "could still hide write images which would be useful for tracking purposes at least right now things are beginning to",
    "start": "1644080",
    "end": "1653560"
  },
  {
    "start": "1650000",
    "end": "1650000"
  },
  {
    "text": "get more difficult so here using this X",
    "start": "1653560",
    "end": "1658750"
  },
  {
    "text": "footed host header yet again we can take control over this Open Graph euro meta",
    "start": "1658750",
    "end": "1665380"
  },
  {
    "text": "property we can't break out and get Exorcist so we need to figure out what this property is for Open Graph is a",
    "start": "1665380",
    "end": "1672120"
  },
  {
    "text": "protocol by Facebook for specifying what happens when your website is shared so",
    "start": "1672120",
    "end": "1677350"
  },
  {
    "text": "if someone presses the share button on your page or if someone just shares your URL on Facebook and so using this value",
    "start": "1677350",
    "end": "1685540"
  },
  {
    "text": "that we can control we can effectively make someone share arbitrary content",
    "start": "1685540",
    "end": "1690640"
  },
  {
    "text": "when they try to share this webpage now it took to get this cache that I had to find a specific page on the site that",
    "start": "1690640",
    "end": "1697060"
  },
  {
    "text": "had the right caching headers and I also had to specify this session ID cookie",
    "start": "1697060",
    "end": "1702370"
  },
  {
    "text": "for some reason but even after doing all of that my like hijacking attack wasn't",
    "start": "1702370",
    "end": "1708940"
  },
  {
    "text": "working and it turned out that this target was using CloudFlare and they",
    "start": "1708940",
    "end": "1714010"
  },
  {
    "text": "have a lot of caches and Facebook was hitting a different cache from the one that I was poisoning so Facebook was",
    "start": "1714010",
    "end": "1720880"
  },
  {
    "text": "hitting a cache that was in Atlanta so I googled for cheap VPN servers in Atlanta",
    "start": "1720880",
    "end": "1728310"
  },
  {
    "text": "found one and then use that to do the poisoning and that successfully poisoned the fact",
    "start": "1728310",
    "end": "1734159"
  },
  {
    "text": "the cash that Facebook was hit so here's a quick demo I've had to redact it quite heavily unfortunately so on this webpage",
    "start": "1734159",
    "end": "1742619"
  },
  {
    "text": "well-known computer game someone vs. share and they end up sharing my content",
    "start": "1742619",
    "end": "1747950"
  },
  {
    "text": "something particularly cool about this is that Facebook have their own cache so",
    "start": "1747950",
    "end": "1754619"
  },
  {
    "text": "that malicious open bar fewer will get cached in Facebook's caches will as",
    "start": "1754619",
    "end": "1760229"
  },
  {
    "text": "cloud flares cache and that means that even if they fix the vulnerability and then clear that clear the cowled flare",
    "start": "1760229",
    "end": "1766799"
  },
  {
    "text": "cache they will still continue to have their likes hijacked until Facebook's cache expires as well so it's quite a",
    "start": "1766799",
    "end": "1772799"
  },
  {
    "text": "persistent kind of attack so that was",
    "start": "1772799",
    "end": "1777989"
  },
  {
    "start": "1777000",
    "end": "1777000"
  },
  {
    "text": "great but do we really need to hire a VPS every single time that we want to",
    "start": "1777989",
    "end": "1783899"
  },
  {
    "text": "poison a specific cache whoa I decided to just do a bit of research to find out so CloudFlare has a lot of cash caches",
    "start": "1783899",
    "end": "1791219"
  },
  {
    "text": "you can see them all here and they have this fantastic feature which is on any",
    "start": "1791219",
    "end": "1796259"
  },
  {
    "text": "cloud flower website you can send a request to CD and CGI slash trace and you'll get some metadata back and",
    "start": "1796259",
    "end": "1802729"
  },
  {
    "text": "included in that metadata is the highlighted line which tells you which cache your request has hit so I wrote a",
    "start": "1802729",
    "end": "1812399"
  },
  {
    "text": "little bash one-liner that sends a request to my target website to this",
    "start": "1812399",
    "end": "1817619"
  },
  {
    "text": "trace page and it wrote this request through every single go through every",
    "start": "1817619",
    "end": "1824190"
  },
  {
    "text": "single IP the CloudFlare oh and then it looks at which cache this request hits",
    "start": "1824190",
    "end": "1829769"
  },
  {
    "text": "so their end result is that gave me a list of which IP I could send my request to to poison which cache so generally",
    "start": "1829769",
    "end": "1839129"
  },
  {
    "text": "speaking I you you can poison cache in Ann Arbor key location worldwide without",
    "start": "1839129",
    "end": "1844559"
  },
  {
    "text": "using a VPS as long as you're willing to do a bit of recon now at this stage",
    "start": "1844559",
    "end": "1852779"
  },
  {
    "start": "1850000",
    "end": "1850000"
  },
  {
    "text": "we've seen quite a few different attacks almost all of them have been doing some kind of host overrides just because that",
    "start": "1852779",
    "end": "1859409"
  },
  {
    "text": "header is widely supported by a lot of frameworks I'd also found exploit using",
    "start": "1859409",
    "end": "1865649"
  },
  {
    "text": "some and one off head is like bucket translate and path underscore info but",
    "start": "1865649",
    "end": "1872679"
  },
  {
    "text": "oh and I found one amazing one last week that hasn't been passed yet but they had",
    "start": "1872679",
    "end": "1878320"
  },
  {
    "text": "a Web Application Firewall that was scanning all there were all the request headers for Bert collaborator net so you",
    "start": "1878320",
    "end": "1885100"
  },
  {
    "text": "could specify an arbitrary request header for Bert collaborated on net in it and the wife would block this request",
    "start": "1885100",
    "end": "1891970"
  },
  {
    "text": "and then that would get saved in the cache so you could effectively make the",
    "start": "1891970",
    "end": "1897010"
  },
  {
    "text": "whack think that every single visitor to any page on the website was a hacker and just pop up anyway",
    "start": "1897010",
    "end": "1905669"
  },
  {
    "text": "why won't it introduce you to is my favorite header which is the ex original",
    "start": "1905669",
    "end": "1911169"
  },
  {
    "text": "URL header it also has a companion which is ex rewrite URL which is supported on",
    "start": "1911169",
    "end": "1917260"
  },
  {
    "text": "the same systems and does exactly the same thing this header overrides the",
    "start": "1917260",
    "end": "1923320"
  },
  {
    "text": "path that's used by the server so even before we get into cache poisoning it's",
    "start": "1923320",
    "end": "1929169"
  },
  {
    "text": "really quite useful because for example on unities website there my favorite",
    "start": "1929169",
    "end": "1934179"
  },
  {
    "text": "example if we access slash admin they've got a front-end server that blocks that",
    "start": "1934179",
    "end": "1940299"
  },
  {
    "text": "but if you put slash admin in the ex original URL their front in server doesn't see this header and lets it",
    "start": "1940299",
    "end": "1946929"
  },
  {
    "text": "through now the reason this head is so awesome is because it's supported by an",
    "start": "1946929",
    "end": "1951970"
  },
  {
    "text": "unbelievable number of systems well I originally spotted this header on some",
    "start": "1951970",
    "end": "1957309"
  },
  {
    "text": "targets that were running Drupal 8 and when I reported it to Drupal the",
    "start": "1957309",
    "end": "1964090"
  },
  {
    "text": "developer was like what is this header I've never seen this before and I can't find any references to in our code base",
    "start": "1964090",
    "end": "1970980"
  },
  {
    "text": "and it turns out Drupal 8 is partly built on symphony and symphony has this",
    "start": "1970980",
    "end": "1979029"
  },
  {
    "text": "header in it but the only reason that the symphony framework has this header is become because it comes from Zend so",
    "start": "1979029",
    "end": "1986260"
  },
  {
    "text": "I think if and if in effect if you're using any framework that's built on a framework that's me want a framework that using Zend you end up supporting",
    "start": "1986260",
    "end": "1993940"
  },
  {
    "text": "this header so let's have a look at what we can do with it",
    "start": "1993940",
    "end": "1999789"
  },
  {
    "start": "1999000",
    "end": "1999000"
  },
  {
    "text": "here yes so if the target is using an",
    "start": "1999789",
    "end": "2004799"
  },
  {
    "text": "external cash like CloudFlare like every example I've shown you so far then we",
    "start": "2004799",
    "end": "2009899"
  },
  {
    "text": "can replace any path on the server with the response to any other path so for",
    "start": "2009899",
    "end": "2019529"
  },
  {
    "text": "example on store unity comm we can't do anything with the query because the",
    "start": "2019529",
    "end": "2025529"
  },
  {
    "text": "query in that header is ignored but we can sort the paths around so that effect of sending this request to their server",
    "start": "2025529",
    "end": "2032309"
  },
  {
    "text": "is if someone tries to fetch the unity for education page they get the unity",
    "start": "2032309",
    "end": "2037799"
  },
  {
    "text": "for gambling page which looks like this so that's definitely entertaining and",
    "start": "2037799",
    "end": "2045210"
  },
  {
    "text": "obviously there's more harmful things we can do that do with this right like we can swap the change password page for",
    "start": "2045210",
    "end": "2051450"
  },
  {
    "text": "the logout page so you can't change your password but to really prove how",
    "start": "2051450",
    "end": "2057030"
  },
  {
    "text": "dangerous this header is I need a case study and for the case study I'm gonna",
    "start": "2057030",
    "end": "2062549"
  },
  {
    "text": "use a vanilla installation of Drupal 8 so triple 8 also has an internal cache",
    "start": "2062549",
    "end": "2071878"
  },
  {
    "start": "2066000",
    "end": "2066000"
  },
  {
    "text": "which is enabled by default and this cache is aware of the ex original URL header so we shouldn't be able to do",
    "start": "2071879",
    "end": "2078470"
  },
  {
    "text": "internal cache poisoning with this header right but when my colleague gareth hayes was helping me out testing",
    "start": "2078470",
    "end": "2085648"
  },
  {
    "text": "one of these sites he noticed something wasn't quite right and eventually figured out that Drupal's internal cache",
    "start": "2085649",
    "end": "2092940"
  },
  {
    "text": "has a bug in how it handles this ex original URL header for probably because",
    "start": "2092940",
    "end": "2097980"
  },
  {
    "text": "they don't know that the head of exists so this cache thinks that the query",
    "start": "2097980",
    "end": "2103049"
  },
  {
    "text": "string in this header is used so what we've got is kind of the inverse of what",
    "start": "2103049",
    "end": "2108450"
  },
  {
    "text": "I just showed you so now we're doing cache poisoning on a Drupal site that does not have an external cache we can't",
    "start": "2108450",
    "end": "2114480"
  },
  {
    "text": "do anything with the path but we can effectively replace the response to any query string with the response to any",
    "start": "2114480",
    "end": "2120630"
  },
  {
    "text": "other query so the in resolved sending this is if someone does a search for kittens they get search results for",
    "start": "2120630",
    "end": "2126390"
  },
  {
    "text": "snuff and that's obviously that example is not that great but this is really",
    "start": "2126390",
    "end": "2133150"
  },
  {
    "text": "powerful by itself but for generic mass exploitation of Drupal sites we need one",
    "start": "2133150",
    "end": "2140020"
  },
  {
    "text": "more ingredient and luckily Drupal provides so Drupal",
    "start": "2140020",
    "end": "2145990"
  },
  {
    "start": "2142000",
    "end": "2142000"
  },
  {
    "text": "has this feature on any response that's a redirect if you specify a parameter called destination you can overwrite the",
    "start": "2145990",
    "end": "2153880"
  },
  {
    "text": "destination of the redirect and they do some filtering and stuff to try and make sure this isn't a redirecting you to an",
    "start": "2153880",
    "end": "2159880"
  },
  {
    "text": "external site but we can bypass that fairly easily so by itself",
    "start": "2159880",
    "end": "2165400"
  },
  {
    "text": "this is just an open redirect right it's it's like it's nothing but now we've got all the ingredients that we need to",
    "start": "2165400",
    "end": "2171490"
  },
  {
    "text": "really have some fun so business Pinterest comm uses Drupal and on",
    "start": "2171490",
    "end": "2179740"
  },
  {
    "start": "2174000",
    "end": "2174000"
  },
  {
    "text": "certain pages they import JavaScript files via redirects so what we can do is",
    "start": "2179740",
    "end": "2187450"
  },
  {
    "text": "we can use internal cache poisoning to change the parameters on this JavaScript import and using the ability to change",
    "start": "2187450",
    "end": "2194500"
  },
  {
    "text": "parameters we're going to inject the destination parameter and the end result",
    "start": "2194500",
    "end": "2199569"
  },
  {
    "text": "is that when someone loads any of these pages on business da pinterest calm these pages that are meant to be",
    "start": "2199569",
    "end": "2204789"
  },
  {
    "text": "completely static they end up importing javascript from my website and I get",
    "start": "2204789",
    "end": "2209950"
  },
  {
    "text": "from control over there a cap so that's pretty cool but that's still not a",
    "start": "2209950",
    "end": "2215859"
  },
  {
    "text": "full-on exploitation of all Drupal sites because we have a light using this we can only hijack existing redirects what",
    "start": "2215859",
    "end": "2224950"
  },
  {
    "text": "we really want to do is hijack arbitrary responses from the server now in every",
    "start": "2224950",
    "end": "2231700"
  },
  {
    "text": "example that I've shown you so far we've poisoned the cache in order to exploit the end user the victim but Drupal is",
    "start": "2231700",
    "end": "2239920"
  },
  {
    "text": "generally used with two caches you've got this internal cache that's turned on by default and then every sort every",
    "start": "2239920",
    "end": "2246430"
  },
  {
    "text": "example of it that I've seen in the wild has also had another cache like varnish because if you don't have something like",
    "start": "2246430",
    "end": "2251890"
  },
  {
    "text": "that then it's incredibly slow so what if the victim of the first cache",
    "start": "2251890",
    "end": "2257770"
  },
  {
    "text": "poisoning attack is the other cache we can do a kind of two stage attack so the",
    "start": "2257770",
    "end": "2264400"
  },
  {
    "text": "first stage is roughly similar to what I just showed you on business stop Pinterest we're gonna poison an arbitrary redirect",
    "start": "2264400",
    "end": "2271770"
  },
  {
    "text": "response in the internal triple cache but then we can send another request",
    "start": "2271770",
    "end": "2278090"
  },
  {
    "text": "which will effectively use the poisoned internal cache to move this poison to an",
    "start": "2278090",
    "end": "2284070"
  },
  {
    "text": "arbitrary location in the external cache and the end result of that is that we",
    "start": "2284070",
    "end": "2289980"
  },
  {
    "text": "can replace any response on the server with a redirect to our site which is really quite powerful browsers weren't",
    "start": "2289980",
    "end": "2296160"
  },
  {
    "text": "built with that kind of attack in mind and for example on stored or unity comm",
    "start": "2296160",
    "end": "2302070"
  },
  {
    "text": "you can try and download the Unity installer but using this cache poisoning you could rely back the download so they",
    "start": "2302070",
    "end": "2309960"
  },
  {
    "text": "would be on unity com they click download button they're still on unity calm but the Installer actually came",
    "start": "2309960",
    "end": "2315870"
  },
  {
    "text": "from my website and it's malware and you can use this kind of technique on any",
    "start": "2315870",
    "end": "2322740"
  },
  {
    "text": "cooperate site so let's try and do a quick demo of this which is hopefully",
    "start": "2322740",
    "end": "2330440"
  },
  {
    "text": "going to work so here's as this is have just a vanilla installation of Drupal 8 the only",
    "start": "2330440",
    "end": "2337650"
  },
  {
    "text": "configuration I've done is I've turned on caching and I've put a varnish cache in front of it",
    "start": "2337650",
    "end": "2343200"
  },
  {
    "text": "if so first let me just quickly show if you right click until parameter to guess",
    "start": "2343200",
    "end": "2348630"
  },
  {
    "text": "headers then that will find some headers hopefully and all and also as of about",
    "start": "2348630",
    "end": "2357450"
  },
  {
    "text": "now there's an update to burp so the active scan will also find this stuff",
    "start": "2357450",
    "end": "2364880"
  },
  {
    "text": "let's see ok well the active scan worked anyway so here we can see that that's",
    "start": "2364880",
    "end": "2373020"
  },
  {
    "text": "spotted that and for my know we'll probably find the headers eventually but it's it's trying millions and millions",
    "start": "2373020",
    "end": "2379980"
  },
  {
    "text": "of headers so it does take a while sometimes so let's try and do this",
    "start": "2379980",
    "end": "2385050"
  },
  {
    "text": "attack on it the first thing you need to do is just find a redirects so we have one right here and then we're just going",
    "start": "2385050",
    "end": "2391920"
  },
  {
    "text": "to take that take that path and we're gonna hit it using the X original you're",
    "start": "2391920",
    "end": "2397380"
  },
  {
    "text": "headed and others Destin so now we're trying to poison the internal cache and that seems to be",
    "start": "2397380",
    "end": "2405150"
  },
  {
    "text": "working and we've poisoned so we've poisoned that URL on the internal cache",
    "start": "2405150",
    "end": "2411150"
  },
  {
    "text": "Acin and so what we're going to do now is try and shift this poison into the external cache so we're going to leave",
    "start": "2411150",
    "end": "2417690"
  },
  {
    "text": "this head of exactly the same but change the path so we should get the same spots",
    "start": "2417690",
    "end": "2423599"
  },
  {
    "text": "hopefully yes great so now the cache at",
    "start": "2423599",
    "end": "2429210"
  },
  {
    "text": "that point should be poisoned in varnish so now we're going to resend this this request as a normal user would and it",
    "start": "2429210",
    "end": "2436680"
  },
  {
    "text": "looks like it is poisoned so now if I just go to this website and",
    "start": "2436680",
    "end": "2442109"
  },
  {
    "text": "press the login button then with a bit of luck yeah we end up on my hostile web",
    "start": "2442109",
    "end": "2449010"
  },
  {
    "text": "site which just has a replica of the login page eagerly waiting for your credentials so there was a code there",
    "start": "2449010",
    "end": "2465300"
  },
  {
    "text": "was a coordinated security released by symfony drupal ones end last week to fix this issue",
    "start": "2465300",
    "end": "2470400"
  },
  {
    "text": "it was super low profile so please install that if you haven't also there's",
    "start": "2470400",
    "end": "2475800"
  },
  {
    "text": "probably loads of other frameworks based on Zend that won't back to port this fix for years so it's definitely still",
    "start": "2475800",
    "end": "2482400"
  },
  {
    "text": "something that you want to watch out for and I'd like to give a brief shout out to the unity security team for letting",
    "start": "2482400",
    "end": "2488250"
  },
  {
    "text": "them letting me use them in tons of examples here which they didn't have to because it's a private by bounty program",
    "start": "2488250",
    "end": "2495170"
  },
  {
    "text": "ok defense now the best defense against cache poisoning is obviously not to use",
    "start": "2495170",
    "end": "2502560"
  },
  {
    "start": "2496000",
    "end": "2496000"
  },
  {
    "text": "caching the my it sound like unrealistic advice but I think some people they",
    "start": "2502560",
    "end": "2508859"
  },
  {
    "text": "might do something like oh I'm experiencing a DDoS I'm gonna sign up for CloudFlare and they don't actually",
    "start": "2508859",
    "end": "2514530"
  },
  {
    "text": "particularly need cloud flares caching but it's turned on by default so they end up vulnerable to cache poisoning so",
    "start": "2514530",
    "end": "2521099"
  },
  {
    "text": "just turn it off if you don't need it regardless of whether you're intentionally using caching though some",
    "start": "2521099",
    "end": "2527310"
  },
  {
    "text": "of your some of your visitors may be going through servers that are doing caching",
    "start": "2527310",
    "end": "2533460"
  },
  {
    "text": "so it everyone should avoid on on qidan",
    "start": "2533460",
    "end": "2538710"
  },
  {
    "text": "but avoid taking input from haiti to be headers and cookies as much as possible",
    "start": "2538710",
    "end": "2544109"
  },
  {
    "text": "and also all audit your application with with parameter to see if you can find",
    "start": "2544109",
    "end": "2549390"
  },
  {
    "text": "any unkeyed inputs that your framework has just sneaked in the support for if you find them the best thing to do is",
    "start": "2549390",
    "end": "2555869"
  },
  {
    "text": "just to disable these but if that's not an option for some reason you may be able to configure the caching layer to",
    "start": "2555869",
    "end": "2562200"
  },
  {
    "text": "automatically strip the headers and has a last resort well if you need this header you can always add it into the",
    "start": "2562200",
    "end": "2569430"
  },
  {
    "text": "cache key which effectively means that it can't be used for cache poisoning so",
    "start": "2569430",
    "end": "2577079"
  },
  {
    "text": "you can grab the white paper on line parameters open source you can grab that",
    "start": "2577079",
    "end": "2582960"
  },
  {
    "text": "too and also for the first time this year I've built an online cache",
    "start": "2582960",
    "end": "2588030"
  },
  {
    "text": "poisoning challenge in my hacking game so you can have a shot at that to get",
    "start": "2588030",
    "end": "2593309"
  },
  {
    "text": "some practical experience with it without accidentally taking out any websites so the three key things to take",
    "start": "2593309",
    "end": "2601349"
  },
  {
    "start": "2599000",
    "end": "2599000"
  },
  {
    "text": "away the header based input is inherently dangerous frameworks can hide",
    "start": "2601349",
    "end": "2607280"
  },
  {
    "text": "lethal functionality and cache poisoning is not theoretical I'm going to take the",
    "start": "2607280",
    "end": "2614280"
  },
  {
    "text": "five minutes of questions now if you've got any more after that feel free to come and speak to me out",
    "start": "2614280",
    "end": "2619559"
  },
  {
    "text": "there back or just chat me an email don't forget to follow me on Twitter thank you for listening",
    "start": "2619559",
    "end": "2625849"
  },
  {
    "text": "[Applause]",
    "start": "2629890",
    "end": "2636250"
  }
]