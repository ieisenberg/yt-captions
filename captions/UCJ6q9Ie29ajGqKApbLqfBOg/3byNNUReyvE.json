[
  {
    "start": "0",
    "end": "86000"
  },
  {
    "text": "good afternoon and welcome to this talk is behind the scenes of iOS and Mac security",
    "start": "0",
    "end": "5670"
  },
  {
    "text": "this is South Pacific and our speaker is Yvonne curse stick so if that means a",
    "start": "5670",
    "end": "11759"
  },
  {
    "text": "lot to you you're in the right place so thank you very much just a few little notes before and we",
    "start": "11759",
    "end": "17550"
  },
  {
    "text": "begin so stop by the business hall located in Mandalay Bay Oceanside and shoreline ballrooms on level two the",
    "start": "17550",
    "end": "24000"
  },
  {
    "text": "black cat hostel is in the business hall on level two lunches in Bayside a/b from 1:00 to 2:30",
    "start": "24000",
    "end": "29939"
  },
  {
    "text": "and don't forget the merchandise store on level two and session recordings mess ok they have a desk on every level just",
    "start": "29939",
    "end": "36840"
  },
  {
    "text": "as a final reminder please make sure your cell phones are on vibrate it's way nicer for everybody else but without",
    "start": "36840",
    "end": "43649"
  },
  {
    "text": "further ado let's get started and please join me in giving our speaker a warm welcome Ivana Kirsten Thank You Chuck",
    "start": "43649",
    "end": "54829"
  },
  {
    "text": "great to be here my name is Yvonne I run seer security",
    "start": "54829",
    "end": "60629"
  },
  {
    "text": "engineering and architecture this is the group at Apple that's enter and responsible for the security of everything that we ship to our users we",
    "start": "60629",
    "end": "67049"
  },
  {
    "text": "have a lot to cover today so we're gonna just jump right into it and start talking about Mac secure boot we have",
    "start": "67049",
    "end": "73530"
  },
  {
    "text": "been investing heavily in to Mac OS security some things that you may have noticed are things like gatekeeper and",
    "start": "73530",
    "end": "80310"
  },
  {
    "text": "user privacy protection which are features that we pioneered in the Mac OS Mojave and continue to improve in",
    "start": "80310",
    "end": "86759"
  },
  {
    "start": "86000",
    "end": "86000"
  },
  {
    "text": "Catalina so in Catalina gatekeeper is getting vastly expanded there'll be malware",
    "start": "86759",
    "end": "93420"
  },
  {
    "text": "checks in virtually every execution path software has to be notarized to run and then user data protections which we",
    "start": "93420",
    "end": "99960"
  },
  {
    "start": "99000",
    "end": "99000"
  },
  {
    "text": "introduced with Mojave was a way of forcing apps to require user consent before being able to access highway",
    "start": "99960",
    "end": "106049"
  },
  {
    "text": "sensitive user data like these categories anytime an app tried to do this and not use traditional API it",
    "start": "106049",
    "end": "113250"
  },
  {
    "text": "would pop a dialog like this in Catalina we went and added many more areas to be covered by this protection so we've been",
    "start": "113250",
    "end": "120450"
  },
  {
    "text": "investing heavily in this but these are all features that are visible to the user and what about things that are",
    "start": "120450",
    "end": "125670"
  },
  {
    "text": "lower in the stack what about secure boot we have an incredibly powerful",
    "start": "125670",
    "end": "131610"
  },
  {
    "text": "secure boot implementation on iOS it's hardened it's been running for 11 years",
    "start": "131610",
    "end": "136980"
  },
  {
    "text": "and we think it's state-of-the-art but what that means is that we have a very clear picture of the kind of security",
    "start": "136980",
    "end": "143070"
  },
  {
    "text": "requirements that we would place on a Mac secure boot implementation and when we looked at the way secure boot tends",
    "start": "143070",
    "end": "149370"
  },
  {
    "text": "to work on x86 systems traditionally it's done with ufi secure boot we found",
    "start": "149370",
    "end": "154470"
  },
  {
    "text": "that it doesn't meet almost any of our security requirements for Makela secure boot so what we decided to do instead is",
    "start": "154470",
    "end": "162090"
  },
  {
    "text": "build our Mac secure boot on top of the t2 security trip this is our second generation custom silicon for the Mac",
    "start": "162090",
    "end": "168209"
  },
  {
    "text": "dedicated to security it brings a secure Enclave coprocessor with it in the way",
    "start": "168209",
    "end": "173730"
  },
  {
    "text": "our secure boot now works is that t2 is actually what initializes boot before passing over to x86",
    "start": "173730",
    "end": "179850"
  },
  {
    "text": "so if we break that down when power comes online the t2 rom runs and continues to cryptographic we verify",
    "start": "179850",
    "end": "185220"
  },
  {
    "text": "every subsequent step of boot terminating with ufi firmware which is still verified of the t2 side before",
    "start": "185220",
    "end": "191730"
  },
  {
    "text": "being moved over to x86 and executed where it will continue to check the remaining pieces of boot finally",
    "start": "191730",
    "end": "198269"
  },
  {
    "text": "culminating in Mac OS running now it turns out that there are some critical challenges with bringing a powerful",
    "start": "198269",
    "end": "205320"
  },
  {
    "start": "201000",
    "end": "201000"
  },
  {
    "text": "secure boot implementation to Mac that don't exist on Iowa's most importantly direct memory access attacks that are",
    "start": "205320",
    "end": "213120"
  },
  {
    "text": "possible from physical accessories which can basically read and write post memory without any involvement from the CPU as",
    "start": "213120",
    "end": "219209"
  },
  {
    "text": "well as an architectural feature of PCIe which is called option ramps or or arms which are device specific drivers for",
    "start": "219209",
    "end": "225510"
  },
  {
    "text": "the early boot environment so I'm going to walk you through what we have to do to be able to contend with these challenges before that a very quick",
    "start": "225510",
    "end": "233220"
  },
  {
    "text": "refresher this is operating systems 101 how page tables work so this is a CPU running in normal 64-bit protected mode",
    "start": "233220",
    "end": "239790"
  },
  {
    "text": "it's asking to read some memory from a virtual address that goes to the MMU which actually turns around consults",
    "start": "239790",
    "end": "245370"
  },
  {
    "text": "page tables determines that this virtual address corresponds to a specific physical address of memory and that is",
    "start": "245370",
    "end": "250769"
  },
  {
    "text": "the data that gets returned this is important because it'll be the basis of many of the systems that I'll be discussing with you in a moment",
    "start": "250769",
    "end": "257239"
  },
  {
    "start": "257000",
    "end": "257000"
  },
  {
    "text": "so I mentioned DNA the reason this exists is because certain kinds of",
    "start": "257239",
    "end": "262770"
  },
  {
    "text": "accessories have to be able to do very high throughput transfers if you're talking about storage or graphics or network cards you really want them to be",
    "start": "262770",
    "end": "269640"
  },
  {
    "text": "able to move data interim without having to go through the normal cpu path but what that means is in the good case a",
    "start": "269640",
    "end": "276270"
  },
  {
    "text": "network interface card can take a network packet that came in and DMA it directly into a packet buffer that's been allocated in the kernel heap in the",
    "start": "276270",
    "end": "283350"
  },
  {
    "text": "bad case the same device could take malicious code and simply place it over",
    "start": "283350",
    "end": "288570"
  },
  {
    "text": "to running curdle completely taking over execution of the system so in blue",
    "start": "288570",
    "end": "294420"
  },
  {
    "text": "introduced a technology called vtd which is a way to initialize an input-output memory management unit to manage these",
    "start": "294420",
    "end": "300120"
  },
  {
    "text": "kind of DMA transfers and we have used this technology to protect the kernel since OS 10 Mountain Lion in 2012 so",
    "start": "300120",
    "end": "308070"
  },
  {
    "start": "307000",
    "end": "307000"
  },
  {
    "text": "here's the premise with vtd rvtd packet",
    "start": "308070",
    "end": "314520"
  },
  {
    "text": "buffer here would say look only the packet buffer is writable by the accessory for DMA everything else is",
    "start": "314520",
    "end": "321150"
  },
  {
    "text": "simply not mapped which means that the network packet could never go and override the mac OS kernel so before btv",
    "start": "321150",
    "end": "329010"
  },
  {
    "start": "327000",
    "end": "327000"
  },
  {
    "text": "was introduced you were able to plug in a malicious underworld accessory while Mac OS kernel was running and you could",
    "start": "329010",
    "end": "334350"
  },
  {
    "text": "simply go and do the moshus DMA and take over execution of the system when in 2012 we've shipped vtd by setting up BPD",
    "start": "334350",
    "end": "341880"
  },
  {
    "text": "early enough before thunderboy accessories could be used we simply prevent the DISA tach because by the time you could plug in a",
    "start": "341880",
    "end": "348360"
  },
  {
    "text": "thunderbolt accessory it was contained with the DD and it would no longer do malicious DNA but there is an obvious",
    "start": "348360",
    "end": "354000"
  },
  {
    "text": "question here what if you plug in the malicious accessory earlier specifically what if you plug it in before Mac OS is",
    "start": "354000",
    "end": "360540"
  },
  {
    "text": "even running it turns out that BPD was originally really intended for operating",
    "start": "360540",
    "end": "365669"
  },
  {
    "text": "systems and it wasn't until 2015 that Intel published the paper showing how he could be used inside the UEFI firmware",
    "start": "365669",
    "end": "373320"
  },
  {
    "text": "environment we implemented this and we shipped at the 26 in 2016 which meant",
    "start": "373320",
    "end": "379290"
  },
  {
    "text": "essentially taking this architectural lip of moving VTD setup from mac OS side",
    "start": "379290",
    "end": "384510"
  },
  {
    "text": "to much earlier during ufi initialization and before Mochis accessories could be connected that",
    "start": "384510",
    "end": "392220"
  },
  {
    "text": "solved that problem but it turns out that PCIe devices are initialized even",
    "start": "392220",
    "end": "397950"
  },
  {
    "text": "earlier during firmware boot and so the way to address the is once again picking up the vtd setup",
    "start": "397950",
    "end": "403980"
  },
  {
    "text": "and making sure it can take place before a single PCIe device is initialized and is therefore able to do malicious DMA we",
    "start": "403980",
    "end": "411750"
  },
  {
    "text": "deployed this protection as well but it turns out there is one interesting piece",
    "start": "411750",
    "end": "418260"
  },
  {
    "text": "of this still left we talked about UEFI firmware as this monolithic box and what",
    "start": "418260",
    "end": "423780"
  },
  {
    "start": "423000",
    "end": "423000"
  },
  {
    "text": "actually ends up happening is that unify firmware boot has two stages there's the",
    "start": "423780",
    "end": "429270"
  },
  {
    "text": "stage that we think of as normal ufi firmware and this is where we now have DVDs setup and we have all the protections we want but there's a",
    "start": "429270",
    "end": "435450"
  },
  {
    "text": "portion of unified that executes before ram is available this is our pre ramp firmware in the during that execution",
    "start": "435450",
    "end": "442970"
  },
  {
    "text": "PCIe bus zero devices which are these hyper privileged Hardware vices like",
    "start": "442970",
    "end": "448530"
  },
  {
    "text": "SATA controllers X HDI controllers the management engine they are all initial",
    "start": "448530",
    "end": "454080"
  },
  {
    "text": "eyes and by virtue of being initialized at this point of the boot process they are able to execute malicious DMA",
    "start": "454080",
    "end": "459510"
  },
  {
    "text": "immediately so the answer feels pretty straightforward we could pick up vpv",
    "start": "459510",
    "end": "465720"
  },
  {
    "text": "setup and we could somehow move it before PCI bus 0 devices are initialized but there's a catch vtd relies on an ion",
    "start": "465720",
    "end": "474150"
  },
  {
    "text": "of you being configured you configure an iommu by pointing it at page tables and page tables have to live in RAM but Ram",
    "start": "474150",
    "end": "480570"
  },
  {
    "text": "is not up yet here's what this actually looks like this is the moment before Ram",
    "start": "480570",
    "end": "487020"
  },
  {
    "text": "is up and running you'll see the lower right-hand corner that's not initialized yet and there's a moment where execution",
    "start": "487020",
    "end": "494490"
  },
  {
    "text": "transfers Ram is just coming online the",
    "start": "494490",
    "end": "500850"
  },
  {
    "text": "moment frame comes on line we're going to try and take the ufi firmware from the t2 side and copy it into running Ram",
    "start": "500850",
    "end": "507240"
  },
  {
    "text": "but at this exact moment we have placed the firmware there we have not yet even begin executing a single instruction and",
    "start": "507240",
    "end": "513870"
  },
  {
    "text": "of course VPP is not configured which means that a malicious PCIe bus 0 device can strike right now while this form our",
    "start": "513870",
    "end": "521159"
  },
  {
    "text": "code is in memory but hasn't run yet and replace it with malicious code completely taking over the system so",
    "start": "521160",
    "end": "530190"
  },
  {
    "text": "what do you do in a situation like this how do you deploy BCD when you can't put a page there well here's the answer you initialized a",
    "start": "530190",
    "end": "537230"
  },
  {
    "text": "table full of zeros and you say that's gonna be our root table and we're gonna",
    "start": "537230",
    "end": "543050"
  },
  {
    "text": "use it for vtd as well as for interrupts remapping and if you take our firmware",
    "start": "543050",
    "end": "548690"
  },
  {
    "text": "and take a look at some of the bytes in it you'll find this interesting section",
    "start": "548690",
    "end": "553880"
  },
  {
    "text": "that is really just all zeros but it turns out that all of these zeros are a",
    "start": "553880",
    "end": "559990"
  },
  {
    "text": "compiled page table that we were able to place into our UEFI firmware binary this",
    "start": "559990",
    "end": "566089"
  },
  {
    "text": "means that we can during initialization before Ram is up point BPD at what looks",
    "start": "566089",
    "end": "572779"
  },
  {
    "text": "like a page table but again is really just a bunch of bytes mapped in the processor cache out of our firmware",
    "start": "572779",
    "end": "578779"
  },
  {
    "text": "binary what this gives us is the following property the moment the ufi",
    "start": "578779",
    "end": "583940"
  },
  {
    "text": "firmware moves into x86 Ram when ram has finally come online btv is already up",
    "start": "583940",
    "end": "590060"
  },
  {
    "text": "and running and if a malicious PCIe bus 0 device attempts to actually go and override that firmware the VTT will",
    "start": "590060",
    "end": "596360"
  },
  {
    "text": "consult page tables again that's our set of zeros which translates to deny everything and the transfer will be",
    "start": "596360",
    "end": "603740"
  },
  {
    "text": "denied so in this way we're able to do BTD set up before PCIe bus zero is",
    "start": "603740",
    "end": "609470"
  },
  {
    "text": "capable of doing any malicious DMA I also mentioned option roms option roms are interesting they're an",
    "start": "609470",
    "end": "616579"
  },
  {
    "start": "616000",
    "end": "616000"
  },
  {
    "text": "architectural property of PCIe and the way to think about it is maybe you're booting your system from something like",
    "start": "616579",
    "end": "622189"
  },
  {
    "text": "an external RAID controller your boot firmware doesn't know how to talk to the RAID controller and therefore it couldn't boot from it so PCIe provides",
    "start": "622189",
    "end": "629360"
  },
  {
    "text": "this ability for this external accessory to say hey boot environment I have a driver here it is run it and you'll know",
    "start": "629360",
    "end": "636920"
  },
  {
    "text": "how to talk to me unfortunately that option ROM runs in ring zero along with the rest of all of",
    "start": "636920",
    "end": "643670"
  },
  {
    "text": "you Fi which means that any code that runs after the storm runs including the booter and the kernel could be",
    "start": "643670",
    "end": "648740"
  },
  {
    "text": "completely compromised by an overwrite secure is essentially what this looks like you'll see that everything is in",
    "start": "648740",
    "end": "654860"
  },
  {
    "text": "ring 0 sharing one virtual memory space that means that every one of these option roms can go and directly write",
    "start": "654860",
    "end": "660259"
  },
  {
    "text": "over a core UEFI firmware if necessary what we want to do here is first pull",
    "start": "660259",
    "end": "666559"
  },
  {
    "text": "out all the option arms and put them in a ring 3 which is substantially less privileged but we want to go one step further and",
    "start": "666559",
    "end": "671690"
  },
  {
    "text": "give them each their own virtual memory space finally we want to initialize our",
    "start": "671690",
    "end": "677600"
  },
  {
    "text": "option arm sandbox driver which is going to mediate what these options are actually capable of doing so one option",
    "start": "677600",
    "end": "684620"
  },
  {
    "text": "I'm trying to interfere with another or trying to interfere with direct for ufi firmware would simply be denied by the",
    "start": "684620",
    "end": "690529"
  },
  {
    "text": "same box driver the premise here is that the option arm sandbox can limit both",
    "start": "690529",
    "end": "696020"
  },
  {
    "start": "692000",
    "end": "692000"
  },
  {
    "text": "what all runs can call and which interfaces they can install what they",
    "start": "696020",
    "end": "701570"
  },
  {
    "text": "can publish and we can do this in a way where normal options that are benign they're actually trying to help",
    "start": "701570",
    "end": "707270"
  },
  {
    "text": "accessories be used continue to work without any issue but an option ROM that",
    "start": "707270",
    "end": "713420"
  },
  {
    "text": "tries to say for example allow me to write to the NVRA interface which stores security configuration would simply be",
    "start": "713420",
    "end": "718730"
  },
  {
    "text": "denied but the option arm the sandbox meanwhile the first two option roms that are just saying I'm a driver for the",
    "start": "718730",
    "end": "725060"
  },
  {
    "text": "piece of hardware I came with are allowed through the third one continue to try to misbehave says I'm a secure",
    "start": "725060",
    "end": "730670"
  },
  {
    "text": "booth driver that's what I'm trying to publish the option i'm sandbox is going to block this as well the easiest way to",
    "start": "730670",
    "end": "737870"
  },
  {
    "text": "think about this is that the first thing the optional sandbox does is restrict the option ramp to only be able to talk",
    "start": "737870",
    "end": "743540"
  },
  {
    "text": "to the device in its sandbox which is the device that the option run came with and this we PD policy continues to allow",
    "start": "743540",
    "end": "750320"
  },
  {
    "text": "DMA between the device in its option ROM preserving the high throughput property",
    "start": "750320",
    "end": "755900"
  },
  {
    "text": "that we wanted from DMA and the Oram doesn't haven't even have to be VPD aware so I want to show you what this",
    "start": "755900",
    "end": "762950"
  },
  {
    "text": "looks like very quickly can we switch the demo please okay what I have here is",
    "start": "762950",
    "end": "774529"
  },
  {
    "text": "the Intel simek's full system simulation environment and I've booted it to a point where we are simulating that a",
    "start": "774529",
    "end": "781190"
  },
  {
    "text": "malicious accessory is plugged in and has a malicious option ROM so you can see the entries at the bottom left this",
    "start": "781190",
    "end": "787610"
  },
  {
    "text": "is where option arm started to run it located that it has access to 568 handles in the ufi environment and close",
    "start": "787610",
    "end": "794959"
  },
  {
    "text": "to 1500 published protocols it was able to go through them and locate the one for Apple secure boot and find its",
    "start": "794959",
    "end": "801650"
  },
  {
    "text": "address and the interesting thing here is that if we look at the current protection",
    "start": "801650",
    "end": "806699"
  },
  {
    "text": "level you'll see that this malware where we have a breakpoint is running in ring zero so if we now continue booting the",
    "start": "806699",
    "end": "818549"
  },
  {
    "text": "malware will proceed and find our target function the target function in this case is the firmware password screen and",
    "start": "818549",
    "end": "825239"
  },
  {
    "text": "the function that validates whether the correct firmware password was entered so let me show you what that looks like as",
    "start": "825239",
    "end": "830789"
  },
  {
    "text": "well if I disassemble at that address",
    "start": "830789",
    "end": "836759"
  },
  {
    "text": "that the malware found you see basically call to the function that will validate the password it will make sure that zero",
    "start": "836759",
    "end": "843059"
  },
  {
    "text": "is reached zero success and if it's not it's gonna jump elsewhere and say the password was not correct but if I let",
    "start": "843059",
    "end": "849839"
  },
  {
    "text": "the malware continue to run it'll go and modify its target and if we now disassemble the very same address you'll",
    "start": "849839",
    "end": "855809"
  },
  {
    "text": "see that this was completely patched out and replaced with something that'll allow any password to go through indeed if we continue execution this is our",
    "start": "855809",
    "end": "863159"
  },
  {
    "text": "malware firmware password screen that's our hacker Mallory wearing a black hat",
    "start": "863159",
    "end": "868229"
  },
  {
    "text": "and I can type any password into the screen and boot will continue as if I",
    "start": "868229",
    "end": "878729"
  },
  {
    "text": "supplied the correct password we're",
    "start": "878729",
    "end": "884639"
  },
  {
    "text": "going to bring up simek's now in a different configuration we're going to say same situation but in a piece of",
    "start": "884639",
    "end": "891899"
  },
  {
    "text": "unified that is running our option around sandbox we expect a pretty",
    "start": "891899",
    "end": "896999"
  },
  {
    "text": "different situation here for one thing we expect the bring the current",
    "start": "896999",
    "end": "903569"
  },
  {
    "text": "protection level to be different we also expect that simply the number of interfaces that will be published and",
    "start": "903569",
    "end": "909239"
  },
  {
    "text": "available to the malware is substantially different than what we saw before and indeed here we are the",
    "start": "909239",
    "end": "914489"
  },
  {
    "text": "malware is now running if I look at the current protection level we are no longer in ring zero we are deep",
    "start": "914489",
    "end": "919949"
  },
  {
    "text": "privileged in ring 3 you'll notice that the malware tried to enumerate to every handle and protocol available and found",
    "start": "919949",
    "end": "925829"
  },
  {
    "text": "three and six down from nearly 500 and 1500 which is just a massive surface",
    "start": "925829",
    "end": "932059"
  },
  {
    "text": "attack surface area reduction and finally when tried to find at the Apple secure booth protocol in order to",
    "start": "932059",
    "end": "938340"
  },
  {
    "text": "try and patch it it just couldn't find it when the den tried to blindly patch",
    "start": "938340",
    "end": "944520"
  },
  {
    "text": "something it took a page fault and simply couldn't do anything we're now at the real firmware screen it was not able",
    "start": "944520",
    "end": "949770"
  },
  {
    "text": "to patch any of that and if I try an arbitrary password in this screen it's",
    "start": "949770",
    "end": "955650"
  },
  {
    "text": "simply rejected thank you back the main machine of course what option on the",
    "start": "955650",
    "end": "970440"
  },
  {
    "start": "968000",
    "end": "968000"
  },
  {
    "text": "sandbox means is that attackers will be driven now the privilege escalation attacks in sandbox escapes so we didn't",
    "start": "970440",
    "end": "975840"
  },
  {
    "text": "stop here we added a strong set of exploit mitigations to efi on d2 systems that's everything from stack cookies",
    "start": "975840",
    "end": "981930"
  },
  {
    "text": "maps map and even suspect her and mel down mitigations in short the ppph security trip let us",
    "start": "981930",
    "end": "988380"
  },
  {
    "start": "986000",
    "end": "986000"
  },
  {
    "text": "take some key secure boot properties from our iOS secure booth bring them to the Mac and far out class UEFI secure",
    "start": "988380",
    "end": "994020"
  },
  {
    "text": "booth based systems we also built DMA protections for PCIe bus 0 which are",
    "start": "994020",
    "end": "1000500"
  },
  {
    "text": "state-of-the-art protection against DMA attacks targeting firmware in fact we are the first company to do this as well",
    "start": "1000500",
    "end": "1006620"
  },
  {
    "text": "as the Mac around sandbox which provides a new and novel defense against malicious option roms here again we were",
    "start": "1006620",
    "end": "1013220"
  },
  {
    "text": "the first to build a system like this I'm gonna switch gears and talk about",
    "start": "1013220",
    "end": "1018460"
  },
  {
    "text": "iOS code integrity protection iOS has always had code integrity protection",
    "start": "1018460",
    "end": "1025430"
  },
  {
    "start": "1022000",
    "end": "1022000"
  },
  {
    "text": "since day one both were Uslan and for kernel but before iOS 9 this was a",
    "start": "1025430",
    "end": "1031490"
  },
  {
    "text": "software only protection the check was done only at booth and a single kernel ride gadget was able to fully disable",
    "start": "1031490",
    "end": "1039500"
  },
  {
    "text": "the system so with iOS 9 we said we wanted to take a harder look at a",
    "start": "1039500",
    "end": "1045410"
  },
  {
    "start": "1042000",
    "end": "1042000"
  },
  {
    "text": "stronger kernel integrity protection mechanism and we specifically wanted to",
    "start": "1045410",
    "end": "1050480"
  },
  {
    "text": "build something that could live with in the harshest threat model we could imagine with arbitrary kernel read write",
    "start": "1050480",
    "end": "1057290"
  },
  {
    "text": "arbitrary instruction pointer control an arbitrary readwrite via DMA",
    "start": "1057290",
    "end": "1063580"
  },
  {
    "text": "so v-0 was our soccer only prototype and the way it worked is by creating a",
    "start": "1064340",
    "end": "1070740"
  },
  {
    "text": "secure l3 monitor that would create an array of Colonel page tables index",
    "start": "1070740",
    "end": "1076260"
  },
  {
    "text": "hashes periodically would verify them in with panic if there was a mismatch and as we expected this was effective",
    "start": "1076260",
    "end": "1083340"
  },
  {
    "text": "against long lived patches but a monitor like this is inherently vulnerable to racists which we knew so here's just",
    "start": "1083340",
    "end": "1090420"
  },
  {
    "text": "what death monitor looks like you can see the matter code collecting all the hashes on the right and that's a fairly",
    "start": "1090420",
    "end": "1097920"
  },
  {
    "text": "straightforward l3 implementation what's interesting about this use of yield tree is that it's pretty unusual yield tree",
    "start": "1097920",
    "end": "1105270"
  },
  {
    "text": "does not get direct access to user land or kernel page tables so what we have to",
    "start": "1105270",
    "end": "1111120"
  },
  {
    "text": "do instead is use the fact that l3 has access to floating-point instructions",
    "start": "1111120",
    "end": "1116280"
  },
  {
    "text": "and interrupts to force the kernel to periodically trap into the monitor letting us go and do these checks this",
    "start": "1116280",
    "end": "1125100"
  },
  {
    "start": "1124000",
    "end": "1124000"
  },
  {
    "text": "is an interesting prototype but we learned some pretty immediate tactical lessons from this which is as we knew",
    "start": "1125100",
    "end": "1130800"
  },
  {
    "text": "inherently vulnerable to racist it's not enough to just protect code we also have",
    "start": "1130800",
    "end": "1136020"
  },
  {
    "text": "to protect a bunch of critical data regions and it would be much easier to",
    "start": "1136020",
    "end": "1141390"
  },
  {
    "text": "build a hardware architecture that actually supports our security requirements than trying to do this in the other direction so with iPhone 7 we",
    "start": "1141390",
    "end": "1148560"
  },
  {
    "text": "introduced kernel integrity protection v1 and this was the first time that we built new hardware specifically tailored",
    "start": "1148560",
    "end": "1154950"
  },
  {
    "text": "to our goals we had three key requirements for our threat model that we wanted to be met in Hardware the CPU",
    "start": "1154950",
    "end": "1161730"
  },
  {
    "text": "would not allow any modification of kernel memory it would prevent any yell execution near one execution of non",
    "start": "1161730",
    "end": "1167670"
  },
  {
    "text": "kernel memory and the memory controller would prevent DMA writes to the protected physical range so this is what",
    "start": "1167670",
    "end": "1174510"
  },
  {
    "text": "that looks like and the important thing to realize about this is the MMU here is overriding page tables when it comes to",
    "start": "1174510",
    "end": "1182940"
  },
  {
    "text": "how the kernel is mapped in other words the MMU will make it so that the kernel is only ever read only even if page",
    "start": "1182940",
    "end": "1188730"
  },
  {
    "text": "tables say that it's in fact read and write this gave us a very strong design",
    "start": "1188730",
    "end": "1196560"
  },
  {
    "start": "1194000",
    "end": "1194000"
  },
  {
    "text": "for code but it turned out that protecting data required quite a bit of additional finesse neither kernel integrity protection v-0",
    "start": "1196560",
    "end": "1203920"
  },
  {
    "text": "nor v1 which I just showed you do anything to prevent modification of TTB r1 this is the register that tells the",
    "start": "1203920",
    "end": "1211000"
  },
  {
    "text": "CPU where to actually find the kernels page tables and so in keep we one to",
    "start": "1211000",
    "end": "1216040"
  },
  {
    "text": "protect against an attack on TTP r1 we have to set up a very very careful initialization sequence that makes sure",
    "start": "1216040",
    "end": "1222250"
  },
  {
    "text": "that by the time the CPU is done initializing there remain no instructions that could be used by an",
    "start": "1222250",
    "end": "1228280"
  },
  {
    "text": "attacker to modify TTB r1 we were able to do that but it required a pretty substantial rework of our kernel cache",
    "start": "1228280",
    "end": "1234730"
  },
  {
    "start": "1231000",
    "end": "1231000"
  },
  {
    "text": "layout it also required build time checks that no tpb r1 right gadget was inadvertently introduced into the kernel",
    "start": "1234730",
    "end": "1241150"
  },
  {
    "text": "cache the upside though is that it was very effective at protecting kernel it's",
    "start": "1241150",
    "end": "1246490"
  },
  {
    "text": "code integrity there was only one known public bypass ever and it was a simple off by one error in a protection range",
    "start": "1246490",
    "end": "1252549"
  },
  {
    "text": "calculation which we immediately addressed with iPhone 10s we decided to",
    "start": "1252549",
    "end": "1263440"
  },
  {
    "text": "go further we took all the lessons from kit v1 and applied them to the next version of kernel integrity protection",
    "start": "1263440",
    "end": "1270510"
  },
  {
    "text": "the key idea here is to vastly simplify the design and get something that is",
    "start": "1270510",
    "end": "1276070"
  },
  {
    "text": "much more secure as a result so all the control bits that would allow changes to",
    "start": "1276070",
    "end": "1281679"
  },
  {
    "text": "things like DTB r1 or DMM you are now guaranteed in the hardware as",
    "start": "1281679",
    "end": "1286770"
  },
  {
    "text": "unmodifiable and this replaces our complicated the initialization instructions from KP one another thing",
    "start": "1286770",
    "end": "1293650"
  },
  {
    "text": "we did in KP 2 is we vastly simplify the interaction with power management power management transitions frequently",
    "start": "1293650",
    "end": "1299049"
  },
  {
    "text": "introduced brittleness or fragility into security properties and here keep me to",
    "start": "1299049",
    "end": "1304270"
  },
  {
    "text": "simply preserved kernel integrity protection configuration across power management transitions in summary we",
    "start": "1304270",
    "end": "1312580"
  },
  {
    "text": "gained robust enforcement of kernel code and the read-only data integrity with a hardware implementation that is tailored",
    "start": "1312580",
    "end": "1318640"
  },
  {
    "text": "to software security requirements and this is something that only Apple can do because we control the silicon and we",
    "start": "1318640",
    "end": "1324190"
  },
  {
    "text": "control the software in this feature ended up being a pretty critical foundation for the next generation of",
    "start": "1324190",
    "end": "1329530"
  },
  {
    "text": "our security features one thing we learned when building Kip is that we could benefit from another",
    "start": "1329530",
    "end": "1335680"
  },
  {
    "start": "1331000",
    "end": "1331000"
  },
  {
    "text": "kind of CPU primitive this is something we call fast permission restrictions or APR are in the chip in iPhone 10 the way",
    "start": "1335680",
    "end": "1343840"
  },
  {
    "text": "to think about this is it's a CPU register to very quickly take a piece of memory that is rwx and restrict it to a",
    "start": "1343840",
    "end": "1352510"
  },
  {
    "text": "more restrictive configuration per thread by doing it this way where the processor register we don't have to take",
    "start": "1352510",
    "end": "1358930"
  },
  {
    "text": "a syst call we don't have to take at the time to walk page tables and flush them just to change permissions which is a",
    "start": "1358930",
    "end": "1364990"
  },
  {
    "text": "really substantial performance improvement so here's what this looks like in practice before APR existed this",
    "start": "1364990",
    "end": "1371290"
  },
  {
    "start": "1368000",
    "end": "1368000"
  },
  {
    "text": "is a memory diagram of a process that relies in the JavaScript for JIT and you'll see that the JIT memory is mapped",
    "start": "1371290",
    "end": "1377380"
  },
  {
    "text": "read write and execute with a PR R what we do is only for JavaScript core",
    "start": "1377380",
    "end": "1383290"
  },
  {
    "start": "1380000",
    "end": "1380000"
  },
  {
    "text": "execution threads do we set a non write APR our mask which means that the DOS",
    "start": "1383290",
    "end": "1389590"
  },
  {
    "text": "threads have effectively only read and execute access to the region whereas of course the JIT compiler sets a no",
    "start": "1389590",
    "end": "1395590"
  },
  {
    "start": "1394000",
    "end": "1394000"
  },
  {
    "text": "execute mask giving it read and write so",
    "start": "1395590",
    "end": "1401830"
  },
  {
    "text": "that's great but what about protecting userland code integrity tip gives us a",
    "start": "1401830",
    "end": "1408160"
  },
  {
    "start": "1406000",
    "end": "1406000"
  },
  {
    "text": "very strong mechanism for kernel text but it does this with the MMU relying on",
    "start": "1408160",
    "end": "1414430"
  },
  {
    "text": "being able to override page tables because kernel code is static user length code is not static it's",
    "start": "1414430",
    "end": "1419920"
  },
  {
    "text": "dynamically loaded we would somehow need some kind of dynamic override so with",
    "start": "1419920",
    "end": "1425740"
  },
  {
    "start": "1425000",
    "end": "1425000"
  },
  {
    "text": "iPhone 10s who introduced the page protection layer or ppl it ensures that user length code cannot be modified",
    "start": "1425740",
    "end": "1432040"
  },
  {
    "text": "after a signature check completes it builds on top of the other hardware mechanisms we've built before and it",
    "start": "1432040",
    "end": "1437890"
  },
  {
    "text": "basically hoists management of page tables and code signing validation into a very very small trusted computing base",
    "start": "1437890",
    "end": "1444700"
  },
  {
    "text": "that is tightly audited it guarantees that only code running within the page",
    "start": "1444700",
    "end": "1449740"
  },
  {
    "text": "protection layer can actually alter these protected pages so this is pretty interesting here's what it does it takes",
    "start": "1449740",
    "end": "1457810"
  },
  {
    "text": "kernel code and basically splits it into two worlds ppl code as well as its heap and data",
    "start": "1457810",
    "end": "1464310"
  },
  {
    "text": "page tables are simply not writable during normal execution in fact ppl code",
    "start": "1464310",
    "end": "1471690"
  },
  {
    "text": "is not even executable it's read-only then we have the special pair of",
    "start": "1471690",
    "end": "1477540"
  },
  {
    "text": "trampolines that can be used to transition into ppl mode but in a very carefully controlled fashion",
    "start": "1477540",
    "end": "1483330"
  },
  {
    "text": "deathtrap alene for example prevent a rabbit AK from entering ppl once we",
    "start": "1483330",
    "end": "1489930"
  },
  {
    "text": "enter ppl mode through the trampoline which verifies that the trampoline fully completed executing we suddenly flip our",
    "start": "1489930",
    "end": "1497040"
  },
  {
    "text": "ppl data in page tables using a prr to be both readable and writeable and we",
    "start": "1497040",
    "end": "1503160"
  },
  {
    "text": "can turn ppl code into executable code that can go and make whatever changes are necessary once that code finishes",
    "start": "1503160",
    "end": "1509070"
  },
  {
    "text": "running we can exit ppl mode and restore normal kernel mode in a way that's fully validated the page protection layer in",
    "start": "1509070",
    "end": "1518490"
  },
  {
    "start": "1515000",
    "end": "1515000"
  },
  {
    "text": "short gives us something pretty amazing it gives a system-wide dynamic code integrity enforcement even under the",
    "start": "1518490",
    "end": "1524280"
  },
  {
    "text": "assumption of a compromised kernel and it provides a massive attack surface reduction for code signing validation",
    "start": "1524280",
    "end": "1530790"
  },
  {
    "text": "and page table management on top of that it does this all with really low overhead there are no hypervisor traps",
    "start": "1530790",
    "end": "1537030"
  },
  {
    "text": "there's no nested page tables it's very very fast because we were able to build this into our silicon now we're in a",
    "start": "1537030",
    "end": "1551100"
  },
  {
    "text": "pretty good place about code integrity both in kernel and in userland but what about control flow last year",
    "start": "1551100",
    "end": "1559530"
  },
  {
    "start": "1557000",
    "end": "1557000"
  },
  {
    "text": "with iOS 12 we build support in iPhone 10s for RB 8 point 3 pointer",
    "start": "1559530",
    "end": "1567090"
  },
  {
    "text": "authentication instructions these are instructions that basically use spare bits and a pointer to store a cryptographic hash and this mechanism is",
    "start": "1567090",
    "end": "1574410"
  },
  {
    "text": "designed to be robust in the presence of even arbitrary readwrite primitives so let me give you an intuitive sense for how this works there's a set of keys and",
    "start": "1574410",
    "end": "1581310"
  },
  {
    "text": "I'll explain more about them in a moment one of them is selected for the write operation a pointer is taken optional",
    "start": "1581310",
    "end": "1587700"
  },
  {
    "text": "with some extra data for diversification that's all passed into an encryption function which produces signature which",
    "start": "1587700",
    "end": "1593280"
  },
  {
    "text": "we use to generate our sign pointers here's the premise this is a real pointer really if you look at it it has an address and some padding so a sign",
    "start": "1593280",
    "end": "1600480"
  },
  {
    "text": "operation will go perform the signature stop the signature into the padding a later authenticate operation will check",
    "start": "1600480",
    "end": "1607410"
  },
  {
    "text": "whether that signature is correct and if it is it will just zero it out which will turn this pointer back into a valid",
    "start": "1607410",
    "end": "1613170"
  },
  {
    "text": "pointer if the signature check fails instead of zeroing the South we will",
    "start": "1613170",
    "end": "1619740"
  },
  {
    "text": "leave the high bit set which turn this into an invalid pointer it's a pointer",
    "start": "1619740",
    "end": "1625110"
  },
  {
    "text": "that the next time is the referenced will simply crash we do this with five",
    "start": "1625110",
    "end": "1631560"
  },
  {
    "text": "different keys ia IB da DB and G a the way to the cheat",
    "start": "1631560",
    "end": "1637140"
  },
  {
    "text": "sheet here is I keys our instruction keys D Keys our data Keys and then a",
    "start": "1637140",
    "end": "1642390"
  },
  {
    "text": "keys are generated randomly at boot versus B keys which are generated I knew every time a process is created the",
    "start": "1642390",
    "end": "1649860"
  },
  {
    "text": "reason that a keys are generated once at boot and then reused across processes is because iOS being a mobile environment",
    "start": "1649860",
    "end": "1657810"
  },
  {
    "text": "that is memory constrained takes a strong set of performance optimizations",
    "start": "1657810",
    "end": "1662970"
  },
  {
    "text": "in the form of D Wildey shared cache and many other ways to basically map the same code into every userland process",
    "start": "1662970",
    "end": "1669510"
  },
  {
    "text": "and so if we insisted on not having any shared point our dedication keys across",
    "start": "1669510",
    "end": "1675000"
  },
  {
    "text": "different processes we would be paying an unacceptable memory overhead of many megabytes just to have the system",
    "start": "1675000",
    "end": "1680670"
  },
  {
    "text": "running ultimately these keys because they're backed by hardware are not readable by an attacker regardless of",
    "start": "1680670",
    "end": "1686700"
  },
  {
    "text": "the level of privilege so what do we do with this well we protect a number of types of pointers",
    "start": "1686700",
    "end": "1694260"
  },
  {
    "text": "to code here you see for each one of these what kind of key is used and then on the right hand side you see what is",
    "start": "1694260",
    "end": "1700860"
  },
  {
    "text": "used for diversification here's a again",
    "start": "1700860",
    "end": "1705930"
  },
  {
    "text": "intuitive example this is before back we have a function Prolog would normally",
    "start": "1705930",
    "end": "1711690"
  },
  {
    "text": "store the link register on the stack we would run the function at the end we would restore the link register and we",
    "start": "1711690",
    "end": "1716910"
  },
  {
    "text": "would return to it which pack we add this pair of instructions the first of",
    "start": "1716910",
    "end": "1722190"
  },
  {
    "text": "them you see in the upper right hand corner basically says hey take the link register use the IB",
    "start": "1722190",
    "end": "1728250"
  },
  {
    "text": "is the per process code key in the storage address of this specific thing on the stack as a diversifier signed apt",
    "start": "1728250",
    "end": "1736460"
  },
  {
    "text": "so that when we're finished executing a single instruction will both verify that",
    "start": "1736460",
    "end": "1741480"
  },
  {
    "text": "the signature is correct and return to it we don't just protect code with this",
    "start": "1741480",
    "end": "1748590"
  },
  {
    "text": "we also protect pointers to data and pointers to code via data so these are",
    "start": "1748590",
    "end": "1754050"
  },
  {
    "text": "some of the most important ones we don't want an attacker to be able to redirect",
    "start": "1754050",
    "end": "1759350"
  },
  {
    "text": "kernel code flow by waiting until an exception is being taken in kernel",
    "start": "1759350",
    "end": "1764400"
  },
  {
    "text": "thread state is being spilled and then simply overriding that kernel thread state so to fix that we sign and hash a",
    "start": "1764400",
    "end": "1771480"
  },
  {
    "text": "number of items in the kernel thread States to prevent modification during the exception handler the other one",
    "start": "1771480",
    "end": "1777600"
  },
  {
    "text": "that's interesting here is C++ vtable pointers we use PAC to protect both c++",
    "start": "1777600",
    "end": "1782760"
  },
  {
    "text": "me table pointers and entries which is interesting because it has an additional property over just control flow",
    "start": "1782760",
    "end": "1789180"
  },
  {
    "text": "integrity it's actually a very effective mitigation against use after free attacks on C++ objects not only could an",
    "start": "1789180",
    "end": "1799140"
  },
  {
    "text": "attacker no longer fake a V table pointer during exploitation of a user at the free bug but we actually record the",
    "start": "1799140",
    "end": "1807480"
  },
  {
    "text": "intended prototype of a function and to make sure during signature checking that",
    "start": "1807480",
    "end": "1813150"
  },
  {
    "text": "the thing that we're actually going to jump to matches that prototype which means that type confusion attacks are",
    "start": "1813150",
    "end": "1818340"
  },
  {
    "text": "very very difficult we first shipped",
    "start": "1818340",
    "end": "1824190"
  },
  {
    "text": "this type on 10s and iOS 12 but in iOS 13 we have been firing on all cylinders in getting broad adoption of pack across",
    "start": "1824190",
    "end": "1831420"
  },
  {
    "text": "different parts of the system in iOS 13 authentication failures failures in pack",
    "start": "1831420",
    "end": "1837510"
  },
  {
    "text": "during kernel execution abort they no longer just generate an invalid pointer that will later be the reference they",
    "start": "1837510",
    "end": "1844260"
  },
  {
    "text": "cause a full abort we have adoption across every Apple text we've hardened our jump tables we've",
    "start": "1844260",
    "end": "1849390"
  },
  {
    "text": "hardened our objective-c message dispatch handling we've hardened our exception handlers and in JavaScript or",
    "start": "1849390",
    "end": "1854700"
  },
  {
    "text": "JIT and extra data with yours throughout to increase the protection level on JavaScript core as well",
    "start": "1854700",
    "end": "1862580"
  },
  {
    "text": "in a future software update to iOS 13 we are going to start also signing high",
    "start": "1862890",
    "end": "1869500"
  },
  {
    "text": "value data structures not code not pointers just data structures that are",
    "start": "1869500",
    "end": "1874780"
  },
  {
    "text": "really high value to potential attackers so that's everything from processes and tasks to code signing structure members",
    "start": "1874780",
    "end": "1881490"
  },
  {
    "text": "structures in the virtual memory subsystem in certain IPC structures well",
    "start": "1881490",
    "end": "1895179"
  },
  {
    "text": "but not least I want to talk about find mine this is a new feature that feels",
    "start": "1895179",
    "end": "1901059"
  },
  {
    "start": "1899000",
    "end": "1899000"
  },
  {
    "text": "like a bit of practical magic we want to help users be able to find their lost devices even when those devices are",
    "start": "1901059",
    "end": "1908050"
  },
  {
    "text": "offline we want to make it the case that any device in proximity can help find a",
    "start": "1908050",
    "end": "1913630"
  },
  {
    "text": "lost device even if that device belonged to someone who is a complete stranger to the owner so the way we want to do this",
    "start": "1913630",
    "end": "1920830"
  },
  {
    "text": "is to have offline devices communicate via bluetooth with any participating stranger who might be a finder in this",
    "start": "1920830",
    "end": "1925900"
  },
  {
    "text": "case these finders would then report their location in the time stamp and the owner would use their second device to",
    "start": "1925900",
    "end": "1932679"
  },
  {
    "text": "find the last device doing this in the straightforward way the way it's been",
    "start": "1932679",
    "end": "1938740"
  },
  {
    "text": "traditionally done doesn't work if you assign a static identifier to a device that it kept broadcasting you could just",
    "start": "1938740",
    "end": "1944530"
  },
  {
    "text": "track that device anywhere it moves and even if you rotated the identifier the finder would not actually be able to",
    "start": "1944530",
    "end": "1950380"
  },
  {
    "text": "encrypt location end to end which means that whatever server was being contacted would actually have access to all of",
    "start": "1950380",
    "end": "1955929"
  },
  {
    "text": "this location information we had a much more rigorous set of security and",
    "start": "1955929",
    "end": "1962470"
  },
  {
    "start": "1959000",
    "end": "1959000"
  },
  {
    "text": "privacy goals we wanted to make sure that location reports are not accessible to Apple servers under any circumstances",
    "start": "1962470",
    "end": "1968860"
  },
  {
    "text": "that Apple service can neither read nor modify nor even add bogus location reports we also wanted to protect",
    "start": "1968860",
    "end": "1975429"
  },
  {
    "text": "finders both their identities and location in a way that's never revealed to Apple servers we wouldn't want to",
    "start": "1975429",
    "end": "1981250"
  },
  {
    "text": "record any finder identities and we'd want to make sure that any reported location is encrypted in a way that Apple service cannot read lastly we want",
    "start": "1981250",
    "end": "1988750"
  },
  {
    "text": "to make sure that whatever data a device is broadcasting when lost cannot be used to track it",
    "start": "1988750",
    "end": "1994659"
  },
  {
    "text": "except by the owner so how does this work each device undergoes a setup",
    "start": "1994659",
    "end": "2004679"
  },
  {
    "text": "procedure it generates an illiquid elliptic curve p224 key pair and as well as a symmetric key",
    "start": "2004679",
    "end": "2011340"
  },
  {
    "text": "in stores all of this in iCloud keychain where every other device belonging to the same user can access them the use of",
    "start": "2011340",
    "end": "2019529"
  },
  {
    "text": "p224 is key here because it generates a 28 byte public key which means we can just",
    "start": "2019529",
    "end": "2025830"
  },
  {
    "text": "barely stop it in the 32 byte packet limit for Bluetooth under version 5.0",
    "start": "2025830",
    "end": "2034399"
  },
  {
    "text": "when a device wants to broadcast its location it figures out the current time period which for us is 15 minutes long",
    "start": "2034460",
    "end": "2041369"
  },
  {
    "text": "and derives a symmetric key from the original symmetric key that is specific to this time period the KDF diffused",
    "start": "2041369",
    "end": "2049260"
  },
  {
    "text": "here is ansi x9 63 with sha-256 if you're curious and the broadcasting",
    "start": "2049260",
    "end": "2056940"
  },
  {
    "text": "device also drives an anti tracking secret pair which is in turn used to",
    "start": "2056940",
    "end": "2062309"
  },
  {
    "text": "unlink ibly diversify the original public key every 15 minutes in other words every 15 minutes a new public key",
    "start": "2062309",
    "end": "2069089"
  },
  {
    "text": "is generated that even though it is clearly connected to the original public key no one except the owner of that key",
    "start": "2069089",
    "end": "2075089"
  },
  {
    "text": "pair can figure out that these are linked finally it is this unlink ibly diversified public key specific to this",
    "start": "2075089",
    "end": "2082108"
  },
  {
    "text": "15-minute time period that is broadcast and nearby finders when a finder",
    "start": "2082109",
    "end": "2088230"
  },
  {
    "text": "receives a broadcast like this it does something called ici IES encryption to",
    "start": "2088230",
    "end": "2094950"
  },
  {
    "text": "the public key that's being broadcast the way to think about EC is is its non-interactive elliptic curve",
    "start": "2094950",
    "end": "2101250"
  },
  {
    "text": "diffie-hellman to the key as well as a symmetric key derivation and finally an encryption to that symmetric key in our",
    "start": "2101250",
    "end": "2108210"
  },
  {
    "text": "case that's what al GCM the finder also takes this public key that it received",
    "start": "2108210",
    "end": "2114029"
  },
  {
    "text": "it hashes it which turns into a lookup index and basically the finder will turn around and tell the Apple servers hey",
    "start": "2114029",
    "end": "2120299"
  },
  {
    "text": "for this lookup index store this encrypted data",
    "start": "2120299",
    "end": "2125720"
  },
  {
    "text": "when an owner then later tries to locate their lost device what they will do starting in the lower left-hand corner",
    "start": "2126369",
    "end": "2132789"
  },
  {
    "text": "is first they will retrieve their original information from iCloud keychain they will start going backwards",
    "start": "2132789",
    "end": "2139359"
  },
  {
    "text": "in time in 15-minute intervals from right now computing each diversified",
    "start": "2139359",
    "end": "2145390"
  },
  {
    "text": "public key that was active for that device in that 15 minute time period for",
    "start": "2145390",
    "end": "2151089"
  },
  {
    "text": "each of those it will compute what lookup index that device would have been reported under and finally it will query",
    "start": "2151089",
    "end": "2157989"
  },
  {
    "text": "the Apple Server database and say hey do you have a report for this index if the answer is yes the report comes back as",
    "start": "2157989",
    "end": "2164859"
  },
  {
    "text": "an encrypted blob which the owner can now easy is decrypt to retrieve the",
    "start": "2164859",
    "end": "2170440"
  },
  {
    "text": "location timeline of their lost device I",
    "start": "2170440",
    "end": "2174509"
  },
  {
    "text": "love this because it's a novel design and it enables something that feels",
    "start": "2175829",
    "end": "2181779"
  },
  {
    "text": "powerful which is to turn all of us into potential finders for Waze devices even",
    "start": "2181779",
    "end": "2187509"
  },
  {
    "text": "though we don't know each other but the privacy properties that are maintained here are exceptionally rigorous both in",
    "start": "2187509",
    "end": "2194710"
  },
  {
    "text": "terms of protection to device owners and finders in the devices themselves in",
    "start": "2194710",
    "end": "2200200"
  },
  {
    "text": "their own track ability",
    "start": "2200200",
    "end": "2203460"
  },
  {
    "text": "so here's what we talked about we built",
    "start": "2211270",
    "end": "2216920"
  },
  {
    "text": "a world-class secure booth implementation for the Mac using the t2 security chip and deployed a series of",
    "start": "2216920",
    "end": "2224150"
  },
  {
    "text": "novel industry-first protections like PCIe bus 0 as well as the option around",
    "start": "2224150",
    "end": "2229160"
  },
  {
    "text": "sandbox to significantly strengthen the secure boot process and deliver something that drives us to the level of",
    "start": "2229160",
    "end": "2236030"
  },
  {
    "text": "meeting our requirements with the iOS code integrity protection we iterated on",
    "start": "2236030",
    "end": "2243050"
  },
  {
    "text": "a series of approaches using our ability to build silicon in the right software until we converged on a set of",
    "start": "2243050",
    "end": "2249320"
  },
  {
    "text": "mechanisms that give us very strong protection for kernel code and data userland code and lastly using pointer",
    "start": "2249320",
    "end": "2257720"
  },
  {
    "text": "notification the ability to constrain control flow to exactly what is expected",
    "start": "2257720",
    "end": "2264309"
  },
  {
    "text": "lastly we find my we took something that felt like it should be possible but for",
    "start": "2264790",
    "end": "2271070"
  },
  {
    "text": "which traditional approaches were simply unacceptable to us from a privacy and security perspective and we found a way",
    "start": "2271070",
    "end": "2277550"
  },
  {
    "text": "to meet those strong requirements and make this something that we can make available to everyone I'd like to share",
    "start": "2277550",
    "end": "2287930"
  },
  {
    "text": "some news with you in 2016 at blackhat",
    "start": "2287930",
    "end": "2293120"
  },
  {
    "start": "2292000",
    "end": "2292000"
  },
  {
    "text": "we introduced the Apple security bounty and what we did was very different than most bounties to the time instead of",
    "start": "2293120",
    "end": "2300350"
  },
  {
    "text": "focusing on a wide variety of categories or trying to have many many reports from",
    "start": "2300350",
    "end": "2305360"
  },
  {
    "text": "many people even if they're of low immediate impact we said we're going to",
    "start": "2305360",
    "end": "2310700"
  },
  {
    "text": "focus on only the most high impact categories of vulnerabilities we're",
    "start": "2310700",
    "end": "2315800"
  },
  {
    "text": "going to constrain our platforms to iOS and iCloud and we will invite a very small number of exceptional researchers",
    "start": "2315800",
    "end": "2323090"
  },
  {
    "text": "to participate in this bounty program at the time our maximum payout of $200,000",
    "start": "2323090",
    "end": "2329030"
  },
  {
    "text": "was the largest in the industry this has worked really well for us even though we",
    "start": "2329030",
    "end": "2336140"
  },
  {
    "text": "focused on only the most high-impact vulnerabilities and invited only a very small number of researchers we received",
    "start": "2336140",
    "end": "2343100"
  },
  {
    "text": "around 50 there high-value reports in these exceptionally critical categories but",
    "start": "2343100",
    "end": "2351520"
  },
  {
    "text": "we'd like to take this further I'm happy to announce that the Apple security",
    "start": "2351520",
    "end": "2356530"
  },
  {
    "text": "bounty will be open to all researchers in the fall thank you and we're going to",
    "start": "2356530",
    "end": "2368230"
  },
  {
    "text": "expand our platforms as well from iCloud and iOS we're adding TV OS iPad OS and",
    "start": "2368230",
    "end": "2375640"
  },
  {
    "text": "watch OS and Mac OS we have completely",
    "start": "2375640",
    "end": "2389590"
  },
  {
    "text": "revised and expanded our bounty categories I'm not going to be showing",
    "start": "2389590",
    "end": "2394810"
  },
  {
    "text": "you the whole list today but I will highlight some of the most important ones so this is our new list of top-level categories the iCloud category",
    "start": "2394810",
    "end": "2402520"
  },
  {
    "text": "remains effectively unchanged but the device ID categories are now completely different they focus on attack via",
    "start": "2402520",
    "end": "2409690"
  },
  {
    "text": "physical access attack via a user installed app a network attack that requires user interaction and lastly a",
    "start": "2409690",
    "end": "2416140"
  },
  {
    "text": "network attack that requires no user interaction for each of these",
    "start": "2416140",
    "end": "2421840"
  },
  {
    "text": "subcategories for each of these categories the maximum payout per subcategory will be $100,000 for iCloud",
    "start": "2421840",
    "end": "2429600"
  },
  {
    "text": "up to $100,000 for lockscreen bypass up to 250,000 dollars for user data",
    "start": "2429600",
    "end": "2436810"
  },
  {
    "text": "extraction via physical access up to $100,000 for unauthorized access to",
    "start": "2436810",
    "end": "2443500"
  },
  {
    "text": "high-value user data from a user installed app up to 150,000 for kernel",
    "start": "2443500",
    "end": "2449920"
  },
  {
    "text": "code execution and up to 250,000 for CPU side-channel attacks against current",
    "start": "2449920",
    "end": "2456100"
  },
  {
    "text": "Apple silicon for one-click unauthorized",
    "start": "2456100",
    "end": "2461109"
  },
  {
    "text": "access to high-value user data it'll be up to $150,000 for one-click kernel code",
    "start": "2461109",
    "end": "2467770"
  },
  {
    "text": "execution up to 250,000 dollars and finally in the hardest category of",
    "start": "2467770",
    "end": "2474790"
  },
  {
    "text": "network attacks with no user interaction a zero click radio the colonel with physical proximity escalation is up to $250,000 in the zero",
    "start": "2474790",
    "end": "2484610"
  },
  {
    "text": "click access the high-value user data will be up to $500,000 we're going one",
    "start": "2484610",
    "end": "2492920"
  },
  {
    "text": "step further in certain pre-release builds like beta releases that we make",
    "start": "2492920",
    "end": "2498800"
  },
  {
    "text": "available to our developers that we will designate any vulnerabilities that are",
    "start": "2498800",
    "end": "2504170"
  },
  {
    "text": "discovered in those pre-release builds which were not introduced prior and are reported to us before that operating",
    "start": "2504170",
    "end": "2511250"
  },
  {
    "text": "system goes out to the customers we will offer a 50% bonus on top of all of those",
    "start": "2511250",
    "end": "2517760"
  },
  {
    "text": "payouts the second best reason to have a",
    "start": "2517760",
    "end": "2526940"
  },
  {
    "text": "bug bounty is to find out about a vulnerability that is already in the users hands and fix it quickly but the",
    "start": "2526940",
    "end": "2532010"
  },
  {
    "text": "number one best reason to have a bounty is to find a vulnerability before it ever hits a customer's hands we also",
    "start": "2532010",
    "end": "2539480"
  },
  {
    "text": "thought about what it's like to get started with one ability research on our",
    "start": "2539480",
    "end": "2544700"
  },
  {
    "text": "platform iOS changes are hard to come by and we want to attract some of the",
    "start": "2544700",
    "end": "2551900"
  },
  {
    "start": "2547000",
    "end": "2547000"
  },
  {
    "text": "exceptional researchers who have thus far been focusing their time on other platforms today many of them tell us",
    "start": "2551900",
    "end": "2558680"
  },
  {
    "text": "that they look at our platform and they want to do iOS research but the bar is just too high they would have to first",
    "start": "2558680",
    "end": "2564710"
  },
  {
    "text": "have a full chain just to bootstrap their research we also feel like existing iOS researcher researchers",
    "start": "2564710",
    "end": "2571700"
  },
  {
    "text": "should not have to hold back chains to be able to continue their research so",
    "start": "2571700",
    "end": "2578810"
  },
  {
    "text": "I'm proud today to announce the iOS security research device program this is",
    "start": "2578810",
    "end": "2584060"
  },
  {
    "start": "2583000",
    "end": "2583000"
  },
  {
    "text": "an unprecedented fully apple supported iOS security research platform it comes",
    "start": "2584060",
    "end": "2589940"
  },
  {
    "text": "with SSH a root shell and advanced debug capabilities right out of the box using",
    "start": "2589940",
    "end": "2595220"
  },
  {
    "text": "a new researcher fusing that's neither production nor development while this",
    "start": "2595220",
    "end": "2600590"
  },
  {
    "text": "program will be by application only we",
    "start": "2600590",
    "end": "2606140"
  },
  {
    "text": "will evaluate applications from anyone with a track record of high quality system security research",
    "start": "2606140",
    "end": "2612500"
  },
  {
    "text": "on any platform this program is coming next year the Apple security banning",
    "start": "2612500",
    "end": "2624650"
  },
  {
    "start": "2620000",
    "end": "2620000"
  },
  {
    "text": "have served as well and we're excited to take it to the next stage we will invite all of you to participate in the fall we",
    "start": "2624650",
    "end": "2631340"
  },
  {
    "text": "have a new fully expanded revised set of categories we have by far the highest",
    "start": "2631340",
    "end": "2636350"
  },
  {
    "text": "maximum payouts in the industry and we have the iOS security research device program for exceptional researchers that",
    "start": "2636350",
    "end": "2643520"
  },
  {
    "text": "are new to our platform but we asked ourselves one last question what if",
    "start": "2643520",
    "end": "2651230"
  },
  {
    "text": "someone came to us with a 0 click iOS full chain with kernel code execution and persistence I'm happy to announce",
    "start": "2651230",
    "end": "2659900"
  },
  {
    "text": "that we would reward it with up to a million dollars [Applause]",
    "start": "2659900",
    "end": "2670619"
  }
]