[
  {
    "start": "0",
    "end": "55000"
  },
  {
    "text": "[Music]",
    "start": "860",
    "end": "8800"
  },
  {
    "text": "hello everyone",
    "start": "8800",
    "end": "10400"
  },
  {
    "text": "my name is chien fong from baidu",
    "start": "10400",
    "end": "12559"
  },
  {
    "text": "security today i will be talking about",
    "start": "12559",
    "end": "15040"
  },
  {
    "text": "the am model mutator funding manabetas",
    "start": "15040",
    "end": "17920"
  },
  {
    "text": "in tensorflow this is a joint work with",
    "start": "17920",
    "end": "20480"
  },
  {
    "text": "my colleagues",
    "start": "20480",
    "end": "22320"
  },
  {
    "text": "thanks for their contribution especially",
    "start": "22320",
    "end": "25119"
  },
  {
    "text": "thanks zhao fung chen yakunjung yingwong",
    "start": "25119",
    "end": "28320"
  },
  {
    "text": "and kandi in this talk i will first",
    "start": "28320",
    "end": "31679"
  },
  {
    "text": "introduce",
    "start": "31679",
    "end": "32880"
  },
  {
    "text": "two business models in ai system and",
    "start": "32880",
    "end": "36000"
  },
  {
    "text": "then discuss why and how we conduct air",
    "start": "36000",
    "end": "39040"
  },
  {
    "text": "model mutation in tensorflow finally i",
    "start": "39040",
    "end": "42160"
  },
  {
    "text": "will discuss some experiments and the",
    "start": "42160",
    "end": "44160"
  },
  {
    "text": "takeaways from em model mutation and",
    "start": "44160",
    "end": "47039"
  },
  {
    "text": "hope those experiments can benefit this",
    "start": "47039",
    "end": "49840"
  },
  {
    "text": "community to fund bugs in other es",
    "start": "49840",
    "end": "52640"
  },
  {
    "text": "systems okay let's begin",
    "start": "52640",
    "end": "57399"
  },
  {
    "start": "55000",
    "end": "55000"
  },
  {
    "text": "there are two business models in system",
    "start": "58160",
    "end": "60879"
  },
  {
    "text": "for end users ai is a service other",
    "start": "60879",
    "end": "63840"
  },
  {
    "text": "users can access service through api",
    "start": "63840",
    "end": "66080"
  },
  {
    "text": "calls",
    "start": "66080",
    "end": "67040"
  },
  {
    "text": "for a i developers em models are",
    "start": "67040",
    "end": "70000"
  },
  {
    "text": "products more and more developers would",
    "start": "70000",
    "end": "72400"
  },
  {
    "text": "like to",
    "start": "72400",
    "end": "73439"
  },
  {
    "text": "purchase or download models from",
    "start": "73439",
    "end": "75520"
  },
  {
    "text": "third-party stores we call model stores",
    "start": "75520",
    "end": "78880"
  },
  {
    "text": "such as model zoom github tensorflow hub",
    "start": "78880",
    "end": "82159"
  },
  {
    "text": "or pedal hub",
    "start": "82159",
    "end": "83600"
  },
  {
    "text": "those developers will download this",
    "start": "83600",
    "end": "85920"
  },
  {
    "text": "model reuse them or build their own",
    "start": "85920",
    "end": "88400"
  },
  {
    "text": "model based on those third party models",
    "start": "88400",
    "end": "92560"
  },
  {
    "text": "however how can we guarantee those his",
    "start": "92560",
    "end": "94960"
  },
  {
    "text": "model has been done",
    "start": "94960",
    "end": "96400"
  },
  {
    "text": "if not the same model could exploit the",
    "start": "96400",
    "end": "99040"
  },
  {
    "text": "vulnerability inside the ai framework to",
    "start": "99040",
    "end": "102079"
  },
  {
    "text": "launch the tank",
    "start": "102079",
    "end": "103840"
  },
  {
    "text": "this will put all upstream service in",
    "start": "103840",
    "end": "106399"
  },
  {
    "text": "danger",
    "start": "106399",
    "end": "107680"
  },
  {
    "text": "this means any tiny bugs inside if ai",
    "start": "107680",
    "end": "111119"
  },
  {
    "text": "framework are dangerous",
    "start": "111119",
    "end": "113600"
  },
  {
    "text": "so finding af remote become very",
    "start": "113600",
    "end": "116719"
  },
  {
    "text": "important",
    "start": "116719",
    "end": "118799"
  },
  {
    "text": "since all the travel start from",
    "start": "118799",
    "end": "120880"
  },
  {
    "text": "statement model we can we would like to",
    "start": "120880",
    "end": "123680"
  },
  {
    "text": "conduct filing directly on the ship",
    "start": "123680",
    "end": "125759"
  },
  {
    "text": "model",
    "start": "125759",
    "end": "127680"
  },
  {
    "text": "mutation is not a good choice because it",
    "start": "127680",
    "end": "130800"
  },
  {
    "text": "doesn't work",
    "start": "130800",
    "end": "132319"
  },
  {
    "text": "it's hard to generate a valid model by",
    "start": "132319",
    "end": "134800"
  },
  {
    "text": "manipulating the batch in the",
    "start": "134800",
    "end": "137200"
  },
  {
    "text": "save the model files",
    "start": "137200",
    "end": "138879"
  },
  {
    "text": "because the model fails a serialized",
    "start": "138879",
    "end": "141440"
  },
  {
    "text": "data and intending modification out of",
    "start": "141440",
    "end": "143840"
  },
  {
    "text": "the data could damage the file format",
    "start": "143840",
    "end": "146480"
  },
  {
    "text": "and get started at the format checking",
    "start": "146480",
    "end": "148800"
  },
  {
    "text": "stage",
    "start": "148800",
    "end": "150000"
  },
  {
    "text": "our solution is structure aware model",
    "start": "150000",
    "end": "152879"
  },
  {
    "text": "mutation",
    "start": "152879",
    "end": "154000"
  },
  {
    "text": "our structure our model mutator will",
    "start": "154000",
    "end": "156640"
  },
  {
    "start": "155000",
    "end": "155000"
  },
  {
    "text": "load the model from the saving model",
    "start": "156640",
    "end": "159360"
  },
  {
    "text": "files and the constructor model graph",
    "start": "159360",
    "end": "162239"
  },
  {
    "text": "and the conduct mutation on this graph",
    "start": "162239",
    "end": "165599"
  },
  {
    "text": "for example the left side is sterilize",
    "start": "165599",
    "end": "168239"
  },
  {
    "text": "the data save the model and",
    "start": "168239",
    "end": "171120"
  },
  {
    "text": "after conversion it become a model graph",
    "start": "171120",
    "end": "174080"
  },
  {
    "text": "we can directly manipulate this graph to",
    "start": "174080",
    "end": "177040"
  },
  {
    "text": "generate different model",
    "start": "177040",
    "end": "180239"
  },
  {
    "text": "our current stage",
    "start": "180239",
    "end": "182000"
  },
  {
    "text": "is to only mutate the car's model in",
    "start": "182000",
    "end": "185120"
  },
  {
    "text": "tensorflow",
    "start": "185120",
    "end": "187760"
  },
  {
    "start": "187000",
    "end": "187000"
  },
  {
    "text": "let's use cars model to demonstrate our",
    "start": "187760",
    "end": "189920"
  },
  {
    "text": "idea here is one example",
    "start": "189920",
    "end": "193760"
  },
  {
    "text": "on the left side written in python is to",
    "start": "193760",
    "end": "196480"
  },
  {
    "text": "conduct item operator",
    "start": "196480",
    "end": "198400"
  },
  {
    "text": "on two input sensors",
    "start": "198400",
    "end": "201760"
  },
  {
    "text": "on the right side is",
    "start": "203280",
    "end": "205360"
  },
  {
    "text": "the model graph since the original model",
    "start": "205360",
    "end": "208480"
  },
  {
    "text": "graph is a little bit big so we use",
    "start": "208480",
    "end": "211280"
  },
  {
    "text": "action one to demonstrate",
    "start": "211280",
    "end": "213680"
  },
  {
    "text": "on this graph there node and edge the",
    "start": "213680",
    "end": "216400"
  },
  {
    "text": "node is operator and edge is a",
    "start": "216400",
    "end": "220080"
  },
  {
    "text": "tensor",
    "start": "220080",
    "end": "221440"
  },
  {
    "text": "in this case the add operator will take",
    "start": "221440",
    "end": "224239"
  },
  {
    "text": "two tensors from place holder and the",
    "start": "224239",
    "end": "227599"
  },
  {
    "text": "placeholder will accept the input tensor",
    "start": "227599",
    "end": "230879"
  },
  {
    "text": "to for the id operation",
    "start": "230879",
    "end": "233680"
  },
  {
    "text": "so",
    "start": "233680",
    "end": "234480"
  },
  {
    "text": "mutating model graph is to mutate the",
    "start": "234480",
    "end": "237360"
  },
  {
    "text": "operator under the tensor so let's",
    "start": "237360",
    "end": "240959"
  },
  {
    "text": "discuss in tensor mutation first",
    "start": "240959",
    "end": "244640"
  },
  {
    "text": "before discussing tensor mutation what's",
    "start": "244640",
    "end": "247840"
  },
  {
    "start": "246000",
    "end": "246000"
  },
  {
    "text": "a tensor tensor is a high dimensional",
    "start": "247840",
    "end": "250640"
  },
  {
    "text": "matrix with three properties",
    "start": "250640",
    "end": "253439"
  },
  {
    "text": "shape data type and value",
    "start": "253439",
    "end": "256400"
  },
  {
    "text": "value is constant or a list of values",
    "start": "256400",
    "end": "258959"
  },
  {
    "text": "such as 3",
    "start": "258959",
    "end": "260720"
  },
  {
    "text": "1 and a 2 data type is an object to",
    "start": "260720",
    "end": "264400"
  },
  {
    "text": "describe the data type of the value",
    "start": "264400",
    "end": "267520"
  },
  {
    "text": "shaped as a 2d array",
    "start": "267520",
    "end": "270160"
  },
  {
    "text": "it has two property dimension and rank",
    "start": "270160",
    "end": "273759"
  },
  {
    "text": "dimension",
    "start": "273759",
    "end": "275199"
  },
  {
    "text": "is the element in the shape array and",
    "start": "275199",
    "end": "278320"
  },
  {
    "text": "the junk is the length of the ring",
    "start": "278320",
    "end": "281520"
  },
  {
    "text": "mutating tensor is to mutate resources",
    "start": "281520",
    "end": "284320"
  },
  {
    "text": "value in the tensor",
    "start": "284320",
    "end": "287759"
  },
  {
    "text": "in potential mutation as to use",
    "start": "287840",
    "end": "290639"
  },
  {
    "text": "tensorflow apis",
    "start": "290639",
    "end": "292479"
  },
  {
    "text": "to generate those tensors",
    "start": "292479",
    "end": "296440"
  },
  {
    "text": "there are a lot of",
    "start": "297040",
    "end": "299120"
  },
  {
    "text": "tensorflow api to generate tensor for",
    "start": "299120",
    "end": "301600"
  },
  {
    "text": "example constant zero or other things in",
    "start": "301600",
    "end": "305440"
  },
  {
    "text": "this",
    "start": "305440",
    "end": "306320"
  },
  {
    "text": "in this example shown in slide it's a we",
    "start": "306320",
    "end": "309840"
  },
  {
    "text": "want to construct a constant tensor",
    "start": "309840",
    "end": "312240"
  },
  {
    "text": "using our argument",
    "start": "312240",
    "end": "314000"
  },
  {
    "text": "the value argument data type of argument",
    "start": "314000",
    "end": "316880"
  },
  {
    "text": "or shape",
    "start": "316880",
    "end": "318320"
  },
  {
    "text": "but random mutation is not it's not",
    "start": "318320",
    "end": "321440"
  },
  {
    "text": "going to work because the value should",
    "start": "321440",
    "end": "324400"
  },
  {
    "text": "be compatible with the shape and the",
    "start": "324400",
    "end": "326240"
  },
  {
    "text": "data type if we run mutated those",
    "start": "326240",
    "end": "328880"
  },
  {
    "text": "arguments well it will always get errors",
    "start": "328880",
    "end": "333120"
  },
  {
    "text": "let's talk about the constraint on each",
    "start": "333120",
    "end": "335600"
  },
  {
    "text": "of those apis",
    "start": "335600",
    "end": "337759"
  },
  {
    "text": "the constant that's like we discussed",
    "start": "337759",
    "end": "340160"
  },
  {
    "text": "before the ship can could be optional",
    "start": "340160",
    "end": "343919"
  },
  {
    "text": "if zero exists in the shape the value",
    "start": "343919",
    "end": "346400"
  },
  {
    "text": "should be arbitrary",
    "start": "346400",
    "end": "348160"
  },
  {
    "text": "there is no",
    "start": "348160",
    "end": "349440"
  },
  {
    "text": "zero in the shape the value should be",
    "start": "349440",
    "end": "351440"
  },
  {
    "text": "compatible with the shape for example if",
    "start": "351440",
    "end": "354400"
  },
  {
    "text": "the value is least the length or list",
    "start": "354400",
    "end": "357039"
  },
  {
    "text": "should be smaller than number elements",
    "start": "357039",
    "end": "359039"
  },
  {
    "text": "in the ship",
    "start": "359039",
    "end": "360319"
  },
  {
    "text": "the variable operation",
    "start": "360319",
    "end": "362479"
  },
  {
    "text": "it has initial value argument shift and",
    "start": "362479",
    "end": "365520"
  },
  {
    "text": "data argument initial value is required",
    "start": "365520",
    "end": "368880"
  },
  {
    "text": "if the ship is unknown the value can be",
    "start": "368880",
    "end": "371280"
  },
  {
    "text": "up free but if not the ship should be",
    "start": "371280",
    "end": "374160"
  },
  {
    "text": "compatible with sources values",
    "start": "374160",
    "end": "376880"
  },
  {
    "text": "ones and zeros",
    "start": "376880",
    "end": "379440"
  },
  {
    "text": "trying to generate tensor with all the",
    "start": "379440",
    "end": "381600"
  },
  {
    "text": "same number such as one or zero",
    "start": "381600",
    "end": "384880"
  },
  {
    "text": "it's argument",
    "start": "384880",
    "end": "386479"
  },
  {
    "text": "it has a shape argument but the shape",
    "start": "386479",
    "end": "388800"
  },
  {
    "text": "argument should be run too otherwise it",
    "start": "388800",
    "end": "391440"
  },
  {
    "text": "failed the data type cannot be string",
    "start": "391440",
    "end": "394160"
  },
  {
    "text": "while a resource otherwise it also will",
    "start": "394160",
    "end": "397440"
  },
  {
    "text": "gather",
    "start": "397440",
    "end": "398560"
  },
  {
    "text": "we can see there are so many constraints",
    "start": "398560",
    "end": "400800"
  },
  {
    "text": "on those",
    "start": "400800",
    "end": "402560"
  },
  {
    "text": "tensorflow generation apis so it's not a",
    "start": "402560",
    "end": "406080"
  },
  {
    "text": "trivial way to generate cancer by",
    "start": "406080",
    "end": "408639"
  },
  {
    "text": "manipulating the argument also on those",
    "start": "408639",
    "end": "411520"
  },
  {
    "text": "operations",
    "start": "411520",
    "end": "412720"
  },
  {
    "text": "and it require a lot of works",
    "start": "412720",
    "end": "416000"
  },
  {
    "text": "so we would like we would like to pursue",
    "start": "416000",
    "end": "418479"
  },
  {
    "text": "another easier way",
    "start": "418479",
    "end": "420639"
  },
  {
    "text": "here is our solution",
    "start": "420639",
    "end": "422479"
  },
  {
    "start": "421000",
    "end": "421000"
  },
  {
    "text": "we would like to generate random tensor",
    "start": "422479",
    "end": "424560"
  },
  {
    "text": "by numpy because numpy quite a lot of",
    "start": "424560",
    "end": "428199"
  },
  {
    "text": "manipulation apis on matrix we can",
    "start": "428199",
    "end": "431599"
  },
  {
    "text": "easily generate a matrix with lower and",
    "start": "431599",
    "end": "434000"
  },
  {
    "text": "upper bound use red inked",
    "start": "434000",
    "end": "437039"
  },
  {
    "text": "we as long as we can provide the lower",
    "start": "437039",
    "end": "439840"
  },
  {
    "text": "and upper bound and the size that is",
    "start": "439840",
    "end": "442560"
  },
  {
    "text": "which is cheap",
    "start": "442560",
    "end": "444080"
  },
  {
    "text": "we also can generate a random matrix in",
    "start": "444080",
    "end": "446800"
  },
  {
    "text": "descending or increasing order",
    "start": "446800",
    "end": "450880"
  },
  {
    "text": "by using numpy soft api",
    "start": "450880",
    "end": "455360"
  },
  {
    "text": "in this case in such",
    "start": "455680",
    "end": "457759"
  },
  {
    "text": "in this way we can generate random",
    "start": "457759",
    "end": "460639"
  },
  {
    "text": "tensor as many as we want without caring",
    "start": "460639",
    "end": "463759"
  },
  {
    "text": "about the",
    "start": "463759",
    "end": "465120"
  },
  {
    "text": "value shape data type compatibility",
    "start": "465120",
    "end": "469599"
  },
  {
    "text": "however what if we do not want to",
    "start": "470400",
    "end": "473120"
  },
  {
    "text": "generate tensor so randomly what if we",
    "start": "473120",
    "end": "476319"
  },
  {
    "text": "want to generate tensor with some",
    "start": "476319",
    "end": "478160"
  },
  {
    "text": "prefixed",
    "start": "478160",
    "end": "479680"
  },
  {
    "text": "properties",
    "start": "479680",
    "end": "481199"
  },
  {
    "text": "we can utilize some kind of",
    "start": "481199",
    "end": "484000"
  },
  {
    "text": "features define the intensive flow for",
    "start": "484000",
    "end": "486720"
  },
  {
    "text": "example",
    "start": "486720",
    "end": "488160"
  },
  {
    "text": "we if we want to generate tensor with",
    "start": "488160",
    "end": "490479"
  },
  {
    "text": "specific value or arbitrary shape we can",
    "start": "490479",
    "end": "493199"
  },
  {
    "text": "use a variable operation",
    "start": "493199",
    "end": "496000"
  },
  {
    "text": "and the set is shipped to be numb",
    "start": "496000",
    "end": "498720"
  },
  {
    "text": "and we want to general empty tensor for",
    "start": "498720",
    "end": "501360"
  },
  {
    "text": "actual rank value or",
    "start": "501360",
    "end": "503440"
  },
  {
    "text": "dimension value",
    "start": "503440",
    "end": "504960"
  },
  {
    "text": "for rank and dimension funding we can",
    "start": "504960",
    "end": "507440"
  },
  {
    "text": "use the consonant operation by setting",
    "start": "507440",
    "end": "510000"
  },
  {
    "text": "its dimension",
    "start": "510000",
    "end": "511599"
  },
  {
    "text": "to be zero",
    "start": "511599",
    "end": "513200"
  },
  {
    "text": "in this case we can generate as many",
    "start": "513200",
    "end": "516000"
  },
  {
    "start": "515000",
    "end": "515000"
  },
  {
    "text": "tensor as we want",
    "start": "516000",
    "end": "517839"
  },
  {
    "text": "but it's hard to schedule we need some",
    "start": "517839",
    "end": "520719"
  },
  {
    "text": "preference",
    "start": "520719",
    "end": "521919"
  },
  {
    "text": "otherwise it will filter and then work",
    "start": "521919",
    "end": "525680"
  },
  {
    "text": "for example it will get started as a",
    "start": "525680",
    "end": "527600"
  },
  {
    "text": "point without any coverage improvement",
    "start": "527600",
    "end": "530640"
  },
  {
    "text": "so we can schedule input by their tensor",
    "start": "530640",
    "end": "533440"
  },
  {
    "text": "value but the random selection on those",
    "start": "533440",
    "end": "535920"
  },
  {
    "text": "utensil value is not a good choice",
    "start": "535920",
    "end": "539120"
  },
  {
    "text": "because the tensor value is integer or",
    "start": "539120",
    "end": "541680"
  },
  {
    "text": "some string and then how large search",
    "start": "541680",
    "end": "544959"
  },
  {
    "text": "space",
    "start": "544959",
    "end": "546320"
  },
  {
    "text": "here is we need some preference",
    "start": "546320",
    "end": "548640"
  },
  {
    "text": "here is a hint empty tensor could be a",
    "start": "548640",
    "end": "551680"
  },
  {
    "text": "good choice",
    "start": "551680",
    "end": "553360"
  },
  {
    "text": "it always causes issues we find a lot of",
    "start": "553360",
    "end": "556959"
  },
  {
    "text": "bank found in tensorflow are caused by",
    "start": "556959",
    "end": "559440"
  },
  {
    "text": "empty tensor",
    "start": "559440",
    "end": "560959"
  },
  {
    "text": "here is one example this is empty tensor",
    "start": "560959",
    "end": "564240"
  },
  {
    "text": "it's consonant condenser with the empty",
    "start": "564240",
    "end": "567279"
  },
  {
    "text": "value inside",
    "start": "567279",
    "end": "568959"
  },
  {
    "text": "it looks fine but it's not if we use",
    "start": "568959",
    "end": "571600"
  },
  {
    "text": "them as input tensor for j",
    "start": "571600",
    "end": "574640"
  },
  {
    "text": "quantization during this operation",
    "start": "574640",
    "end": "576880"
  },
  {
    "text": "because the kernel instead of this",
    "start": "576880",
    "end": "580080"
  },
  {
    "text": "operation does not consider",
    "start": "580080",
    "end": "582640"
  },
  {
    "text": "the empty tensor this case and still",
    "start": "582640",
    "end": "585680"
  },
  {
    "text": "access the first element of the input",
    "start": "585680",
    "end": "588240"
  },
  {
    "text": "tensor empty tensor which will cause",
    "start": "588240",
    "end": "591360"
  },
  {
    "text": "outer boundary rate issue",
    "start": "591360",
    "end": "594880"
  },
  {
    "text": "we also can schedule input tensor by",
    "start": "595040",
    "end": "597600"
  },
  {
    "text": "their tensor dimension",
    "start": "597600",
    "end": "600000"
  },
  {
    "text": "still the random selection is not a good",
    "start": "600000",
    "end": "603040"
  },
  {
    "text": "choice because 100 dimension 18 integer",
    "start": "603040",
    "end": "606399"
  },
  {
    "text": "is still have a big search space",
    "start": "606399",
    "end": "609760"
  },
  {
    "text": "we need some preference",
    "start": "609760",
    "end": "612079"
  },
  {
    "text": "clear is zero here is a hint zero could",
    "start": "612079",
    "end": "615680"
  },
  {
    "text": "be a good candidate we also find a lot",
    "start": "615680",
    "end": "618560"
  },
  {
    "text": "of back fun in tensorflow caused by this",
    "start": "618560",
    "end": "621440"
  },
  {
    "text": "issue",
    "start": "621440",
    "end": "622720"
  },
  {
    "text": "for example",
    "start": "622720",
    "end": "624399"
  },
  {
    "text": "this bug",
    "start": "624399",
    "end": "626640"
  },
  {
    "text": "the dimple sensor is a is a tensor with",
    "start": "626640",
    "end": "629680"
  },
  {
    "text": "a zero dimension inside a chip",
    "start": "629680",
    "end": "632800"
  },
  {
    "text": "and we use them as a input for a reverse",
    "start": "632800",
    "end": "636160"
  },
  {
    "text": "operator it will cause issues because",
    "start": "636160",
    "end": "639360"
  },
  {
    "text": "internal design does not consider zero",
    "start": "639360",
    "end": "641839"
  },
  {
    "text": "this case it still use it as a divisor",
    "start": "641839",
    "end": "646320"
  },
  {
    "text": "so which will cause divided by zero",
    "start": "646320",
    "end": "648560"
  },
  {
    "text": "issues",
    "start": "648560",
    "end": "650720"
  },
  {
    "text": "we also can schedule input by tensor",
    "start": "650720",
    "end": "653760"
  },
  {
    "text": "rank",
    "start": "653760",
    "end": "655120"
  },
  {
    "text": "still the random selection is not good",
    "start": "655120",
    "end": "658000"
  },
  {
    "text": "choice",
    "start": "658000",
    "end": "659120"
  },
  {
    "text": "there are so many checks on the",
    "start": "659120",
    "end": "661600"
  },
  {
    "text": "operators and the most operators has the",
    "start": "661600",
    "end": "665040"
  },
  {
    "text": "ship inference check at the graph",
    "start": "665040",
    "end": "667680"
  },
  {
    "text": "generation stage",
    "start": "667680",
    "end": "669760"
  },
  {
    "text": "so if the random generator",
    "start": "669760",
    "end": "672560"
  },
  {
    "text": "tensor is different in the random",
    "start": "672560",
    "end": "674959"
  },
  {
    "text": "ranks it will get field all the time",
    "start": "674959",
    "end": "678240"
  },
  {
    "text": "for example here is a matrix there way",
    "start": "678240",
    "end": "681200"
  },
  {
    "text": "to operator this operator will check",
    "start": "681200",
    "end": "684079"
  },
  {
    "text": "each of its argument with",
    "start": "684079",
    "end": "686839"
  },
  {
    "text": "specific rank value",
    "start": "686839",
    "end": "689440"
  },
  {
    "text": "for example",
    "start": "689440",
    "end": "690959"
  },
  {
    "text": "at the checklist last two and two",
    "start": "690959",
    "end": "693839"
  },
  {
    "text": "arguments",
    "start": "693839",
    "end": "694959"
  },
  {
    "text": "whether they are",
    "start": "694959",
    "end": "697120"
  },
  {
    "text": "rank zero if not it failed so in vape",
    "start": "697120",
    "end": "701120"
  },
  {
    "text": "fade this operation with tensor or",
    "start": "701120",
    "end": "705839"
  },
  {
    "text": "with other rank values it will get error",
    "start": "705839",
    "end": "710640"
  },
  {
    "text": "we talked so many",
    "start": "713040",
    "end": "714880"
  },
  {
    "text": "things about how to schedule a single",
    "start": "714880",
    "end": "717760"
  },
  {
    "text": "tensor but instead of the model for each",
    "start": "717760",
    "end": "721279"
  },
  {
    "text": "operator it at least have more than one",
    "start": "721279",
    "end": "724560"
  },
  {
    "text": "tensor",
    "start": "724560",
    "end": "726880"
  },
  {
    "text": "so that means that when you schedule",
    "start": "726880",
    "end": "729279"
  },
  {
    "text": "multiple tensor at the same time",
    "start": "729279",
    "end": "732560"
  },
  {
    "text": "but we cannot randomly select each other",
    "start": "732560",
    "end": "735040"
  },
  {
    "text": "tensor",
    "start": "735040",
    "end": "736480"
  },
  {
    "text": "separately we need to consider their",
    "start": "736480",
    "end": "738880"
  },
  {
    "text": "correlation sometimes",
    "start": "738880",
    "end": "740959"
  },
  {
    "text": "especially for example for component",
    "start": "740959",
    "end": "743279"
  },
  {
    "text": "tensor",
    "start": "743279",
    "end": "745839"
  },
  {
    "text": "spat sensor is a compound tensor",
    "start": "745839",
    "end": "749279"
  },
  {
    "text": "if we want to construct a sparse tensor",
    "start": "749279",
    "end": "752639"
  },
  {
    "text": "we need to consider their",
    "start": "752639",
    "end": "756079"
  },
  {
    "text": "argument",
    "start": "756079",
    "end": "757360"
  },
  {
    "text": "index value and the dense shape",
    "start": "757360",
    "end": "760560"
  },
  {
    "text": "they have some q constraint on those",
    "start": "760560",
    "end": "763360"
  },
  {
    "text": "component tensors",
    "start": "763360",
    "end": "765040"
  },
  {
    "text": "for example the index should be two",
    "start": "765040",
    "end": "767440"
  },
  {
    "text": "dimensional ray the value should be one",
    "start": "767440",
    "end": "769760"
  },
  {
    "text": "dimensional ray and then shape should be",
    "start": "769760",
    "end": "772240"
  },
  {
    "text": "one dimensional ray",
    "start": "772240",
    "end": "774880"
  },
  {
    "text": "so if we generate tensor which are not",
    "start": "774880",
    "end": "779279"
  },
  {
    "text": "means that is standard it will cause",
    "start": "779279",
    "end": "781600"
  },
  {
    "text": "error",
    "start": "781600",
    "end": "782639"
  },
  {
    "text": "so we can prioritize those tensor which",
    "start": "782639",
    "end": "785760"
  },
  {
    "text": "meet standards first",
    "start": "785760",
    "end": "788160"
  },
  {
    "text": "on the other hand we still need to",
    "start": "788160",
    "end": "790160"
  },
  {
    "text": "consider some exceptions",
    "start": "790160",
    "end": "792399"
  },
  {
    "text": "because no internal design of the",
    "start": "792399",
    "end": "794880"
  },
  {
    "text": "tensorflow will meet those extenders if",
    "start": "794880",
    "end": "797920"
  },
  {
    "text": "they always generate the qualified",
    "start": "797920",
    "end": "800320"
  },
  {
    "text": "tensor we will miss some kind of bugs",
    "start": "800320",
    "end": "803440"
  },
  {
    "text": "for example this vulnerability which",
    "start": "803440",
    "end": "806480"
  },
  {
    "text": "found in tensorflow",
    "start": "806480",
    "end": "808320"
  },
  {
    "text": "it assumed it assumed that",
    "start": "808320",
    "end": "811760"
  },
  {
    "text": "the index should compatible with the",
    "start": "811760",
    "end": "814560"
  },
  {
    "text": "shape but in fact is not so is the cross",
    "start": "814560",
    "end": "818079"
  },
  {
    "text": "error",
    "start": "818079",
    "end": "820480"
  },
  {
    "text": "another example is that",
    "start": "821360",
    "end": "824320"
  },
  {
    "text": "those multiple tensor could be",
    "start": "824320",
    "end": "826079"
  },
  {
    "text": "constrained by their operation two or",
    "start": "826079",
    "end": "829040"
  },
  {
    "text": "for example the square",
    "start": "829040",
    "end": "831120"
  },
  {
    "text": "grade this operation it assumed to input",
    "start": "831120",
    "end": "833920"
  },
  {
    "text": "the tensor share the same dimension",
    "start": "833920",
    "end": "836560"
  },
  {
    "text": "but in their inter internal design and",
    "start": "836560",
    "end": "839120"
  },
  {
    "text": "not consider the exception so if we",
    "start": "839120",
    "end": "842560"
  },
  {
    "text": "provided this",
    "start": "842560",
    "end": "844320"
  },
  {
    "text": "operation with empty value it will get",
    "start": "844320",
    "end": "846959"
  },
  {
    "text": "exception",
    "start": "846959",
    "end": "848639"
  },
  {
    "text": "another case is that",
    "start": "848639",
    "end": "850880"
  },
  {
    "text": "unicode encode this operation it always",
    "start": "850880",
    "end": "854800"
  },
  {
    "text": "assume the value in the input displays",
    "start": "854800",
    "end": "857360"
  },
  {
    "text": "must be smaller than or equal to the",
    "start": "857360",
    "end": "860079"
  },
  {
    "text": "impotential lines",
    "start": "860079",
    "end": "861600"
  },
  {
    "text": "but if we provide the tensor width",
    "start": "861600",
    "end": "865360"
  },
  {
    "text": "which does not meet the this standard it",
    "start": "865360",
    "end": "868160"
  },
  {
    "text": "will cause this bug",
    "start": "868160",
    "end": "871519"
  },
  {
    "text": "we talk so many things about the in",
    "start": "871519",
    "end": "874079"
  },
  {
    "start": "872000",
    "end": "872000"
  },
  {
    "text": "potential mutation profile",
    "start": "874079",
    "end": "876800"
  },
  {
    "text": "performance so we list all those",
    "start": "876800",
    "end": "879519"
  },
  {
    "text": "performance and",
    "start": "879519",
    "end": "881199"
  },
  {
    "text": "in these two tables",
    "start": "881199",
    "end": "882959"
  },
  {
    "text": "we can prioritize",
    "start": "882959",
    "end": "884959"
  },
  {
    "text": "tensors during the scaling scheduling",
    "start": "884959",
    "end": "887920"
  },
  {
    "text": "process for example",
    "start": "887920",
    "end": "889839"
  },
  {
    "text": "we can prioritize the tensor",
    "start": "889839",
    "end": "892240"
  },
  {
    "text": "single tensor if their",
    "start": "892240",
    "end": "895360"
  },
  {
    "text": "emission has zero or we can pre-order",
    "start": "895360",
    "end": "898880"
  },
  {
    "text": "type single tensor if their value has",
    "start": "898880",
    "end": "901440"
  },
  {
    "text": "negative",
    "start": "901440",
    "end": "902880"
  },
  {
    "text": "once",
    "start": "902880",
    "end": "904800"
  },
  {
    "text": "for the multiple tensor coordination we",
    "start": "904800",
    "end": "907279"
  },
  {
    "text": "can",
    "start": "907279",
    "end": "908240"
  },
  {
    "text": "schedule or prioritize those tensor with",
    "start": "908240",
    "end": "911760"
  },
  {
    "text": "the same dimension all we can schedule",
    "start": "911760",
    "end": "914079"
  },
  {
    "text": "those is",
    "start": "914079",
    "end": "916480"
  },
  {
    "text": "tensors with different dimensions or we",
    "start": "917199",
    "end": "919519"
  },
  {
    "text": "can schedule those is a",
    "start": "919519",
    "end": "921240"
  },
  {
    "text": "prioritization tensors empty tensor at",
    "start": "921240",
    "end": "924079"
  },
  {
    "text": "first",
    "start": "924079",
    "end": "927079"
  },
  {
    "start": "927000",
    "end": "927000"
  },
  {
    "text": "we talked so many things about input",
    "start": "927279",
    "end": "929440"
  },
  {
    "text": "tensor mutation",
    "start": "929440",
    "end": "930880"
  },
  {
    "text": "let's talk about input placeholder",
    "start": "930880",
    "end": "932959"
  },
  {
    "text": "mutation",
    "start": "932959",
    "end": "934240"
  },
  {
    "text": "the placeholder does not have value it",
    "start": "934240",
    "end": "937279"
  },
  {
    "text": "only has a data type and a ship on the",
    "start": "937279",
    "end": "940320"
  },
  {
    "text": "left side is the",
    "start": "940320",
    "end": "942639"
  },
  {
    "text": "on the right side is the",
    "start": "942639",
    "end": "946399"
  },
  {
    "text": "structure of the placeholder stored in",
    "start": "946959",
    "end": "949279"
  },
  {
    "text": "graph model graph",
    "start": "949279",
    "end": "951440"
  },
  {
    "text": "so it has two sections the data type and",
    "start": "951440",
    "end": "954800"
  },
  {
    "text": "the shape",
    "start": "954800",
    "end": "956000"
  },
  {
    "text": "if we",
    "start": "956000",
    "end": "956959"
  },
  {
    "text": "want to mutate the page holder",
    "start": "956959",
    "end": "959440"
  },
  {
    "text": "we will mutate the",
    "start": "959440",
    "end": "961360"
  },
  {
    "text": "data type section and the shape section",
    "start": "961360",
    "end": "964639"
  },
  {
    "text": "respectively",
    "start": "964639",
    "end": "966160"
  },
  {
    "text": "however we can not conduct a random",
    "start": "966160",
    "end": "969120"
  },
  {
    "text": "mutation on those field",
    "start": "969120",
    "end": "971360"
  },
  {
    "text": "because the input tensor should be",
    "start": "971360",
    "end": "974240"
  },
  {
    "text": "compatible",
    "start": "974240",
    "end": "975600"
  },
  {
    "text": "with the input placeholder",
    "start": "975600",
    "end": "978160"
  },
  {
    "text": "otherwise it will have some error",
    "start": "978160",
    "end": "981839"
  },
  {
    "text": "here is one example",
    "start": "981839",
    "end": "984079"
  },
  {
    "text": "there here is a cars model we would like",
    "start": "984079",
    "end": "986560"
  },
  {
    "text": "to construct",
    "start": "986560",
    "end": "987839"
  },
  {
    "text": "there how to input tensor and two",
    "start": "987839",
    "end": "990560"
  },
  {
    "text": "placeholder but we can see they have",
    "start": "990560",
    "end": "993279"
  },
  {
    "text": "different shape",
    "start": "993279",
    "end": "994800"
  },
  {
    "text": "so if we want to",
    "start": "994800",
    "end": "997519"
  },
  {
    "text": "generate the model it will cause iron",
    "start": "997519",
    "end": "1002079"
  },
  {
    "text": "this means we need to modify the",
    "start": "1002079",
    "end": "1005199"
  },
  {
    "text": "placeholder for every",
    "start": "1005199",
    "end": "1007759"
  },
  {
    "text": "tensor with different shape or ranks",
    "start": "1007759",
    "end": "1010560"
  },
  {
    "text": "values",
    "start": "1010560",
    "end": "1013040"
  },
  {
    "text": "it's not a true way to do that",
    "start": "1013040",
    "end": "1015680"
  },
  {
    "text": "so we would like to generate a more",
    "start": "1015680",
    "end": "1018639"
  },
  {
    "text": "generic",
    "start": "1018639",
    "end": "1020000"
  },
  {
    "text": "placeholder",
    "start": "1020000",
    "end": "1021360"
  },
  {
    "text": "this placeholder can accept as many as",
    "start": "1021360",
    "end": "1024319"
  },
  {
    "text": "possible tensors with",
    "start": "1024319",
    "end": "1026798"
  },
  {
    "text": "minimal modification",
    "start": "1026799",
    "end": "1029600"
  },
  {
    "text": "clear is our generic model template",
    "start": "1029600",
    "end": "1033360"
  },
  {
    "text": "we put the noun for each",
    "start": "1033360",
    "end": "1036720"
  },
  {
    "text": "column in the shape for the placeholder",
    "start": "1036720",
    "end": "1039760"
  },
  {
    "text": "in this way place coder can take any",
    "start": "1039760",
    "end": "1043678"
  },
  {
    "text": "tensors as long as they share the same",
    "start": "1043679",
    "end": "1046079"
  },
  {
    "text": "rock",
    "start": "1046079",
    "end": "1048400"
  },
  {
    "text": "so we can directly",
    "start": "1048960",
    "end": "1051360"
  },
  {
    "text": "mutating the rank of the placeholder",
    "start": "1051360",
    "end": "1054000"
  },
  {
    "text": "instead of mutating the rank and the",
    "start": "1054000",
    "end": "1056799"
  },
  {
    "text": "dimension at the same time",
    "start": "1056799",
    "end": "1058799"
  },
  {
    "text": "it saved a lot of effort",
    "start": "1058799",
    "end": "1062480"
  },
  {
    "start": "1063000",
    "end": "1063000"
  },
  {
    "text": "now let's talk about the operator",
    "start": "1063440",
    "end": "1065520"
  },
  {
    "text": "mutation",
    "start": "1065520",
    "end": "1066720"
  },
  {
    "text": "operator represents the execution logic",
    "start": "1066720",
    "end": "1069919"
  },
  {
    "text": "in the model graph it has of name",
    "start": "1069919",
    "end": "1073120"
  },
  {
    "text": "argument",
    "start": "1073120",
    "end": "1074320"
  },
  {
    "text": "and the output in this talk we only",
    "start": "1074320",
    "end": "1077200"
  },
  {
    "text": "first the two part first part",
    "start": "1077200",
    "end": "1079679"
  },
  {
    "text": "the op name and the arguments",
    "start": "1079679",
    "end": "1082640"
  },
  {
    "text": "here is one example of the up node which",
    "start": "1082640",
    "end": "1086000"
  },
  {
    "text": "is stored in 7 model",
    "start": "1086000",
    "end": "1089919"
  },
  {
    "text": "the operator mutation s2 mutates the app",
    "start": "1090160",
    "end": "1093760"
  },
  {
    "text": "name argument",
    "start": "1093760",
    "end": "1095760"
  },
  {
    "text": "the app name is easy to mutate since all",
    "start": "1095760",
    "end": "1099039"
  },
  {
    "text": "operators are registered with the",
    "start": "1099039",
    "end": "1101280"
  },
  {
    "text": "specification instead of a tensorflow",
    "start": "1101280",
    "end": "1103679"
  },
  {
    "text": "framework so we can conduct the code",
    "start": "1103679",
    "end": "1106559"
  },
  {
    "text": "analysis in the tensorflow framework to",
    "start": "1106559",
    "end": "1109200"
  },
  {
    "text": "retrieve those is known",
    "start": "1109200",
    "end": "1111200"
  },
  {
    "text": "know the names",
    "start": "1111200",
    "end": "1112640"
  },
  {
    "text": "and then conduct random selection under",
    "start": "1112640",
    "end": "1115039"
  },
  {
    "text": "the node for mutation",
    "start": "1115039",
    "end": "1117360"
  },
  {
    "text": "for the argument tensor mutation",
    "start": "1117360",
    "end": "1119760"
  },
  {
    "text": "in this",
    "start": "1119760",
    "end": "1121039"
  },
  {
    "text": "case in our this talk we only consider",
    "start": "1121039",
    "end": "1124640"
  },
  {
    "text": "argument tensor which are from directly",
    "start": "1124640",
    "end": "1127360"
  },
  {
    "text": "from the input tensor so we use input",
    "start": "1127360",
    "end": "1130880"
  },
  {
    "text": "tensor mutation",
    "start": "1130880",
    "end": "1132320"
  },
  {
    "text": "instead",
    "start": "1132320",
    "end": "1134799"
  },
  {
    "text": "notice that the data type is constrained",
    "start": "1135039",
    "end": "1138559"
  },
  {
    "text": "by operations back this means if the",
    "start": "1138559",
    "end": "1141520"
  },
  {
    "text": "data type is by is specificated by the",
    "start": "1141520",
    "end": "1144960"
  },
  {
    "text": "operator we cannot change it otherwise",
    "start": "1144960",
    "end": "1147760"
  },
  {
    "text": "it will fail",
    "start": "1147760",
    "end": "1149120"
  },
  {
    "text": "so we can only mutate the shape and",
    "start": "1149120",
    "end": "1151200"
  },
  {
    "text": "value",
    "start": "1151200",
    "end": "1152400"
  },
  {
    "text": "at this time",
    "start": "1152400",
    "end": "1153840"
  },
  {
    "text": "the consonant argument which i'm not",
    "start": "1153840",
    "end": "1156799"
  },
  {
    "text": "a constant argument it cannot be",
    "start": "1156799",
    "end": "1159919"
  },
  {
    "text": "passed through the input tensor so",
    "start": "1159919",
    "end": "1163760"
  },
  {
    "text": "instead they are stored in the",
    "start": "1163760",
    "end": "1166080"
  },
  {
    "text": "attributes of the up node so we conduct",
    "start": "1166080",
    "end": "1169600"
  },
  {
    "text": "a random mutation on those is of node",
    "start": "1169600",
    "end": "1172480"
  },
  {
    "text": "for",
    "start": "1172480",
    "end": "1173280"
  },
  {
    "text": "our purpose",
    "start": "1173280",
    "end": "1176600"
  },
  {
    "text": "we talked so many things about ai model",
    "start": "1178160",
    "end": "1180799"
  },
  {
    "text": "mutator",
    "start": "1180799",
    "end": "1182000"
  },
  {
    "text": "how we conduct a monomial here is our",
    "start": "1182000",
    "end": "1185600"
  },
  {
    "text": "oro architecture it include i'm graph",
    "start": "1185600",
    "end": "1189919"
  },
  {
    "text": "constructor",
    "start": "1189919",
    "end": "1191280"
  },
  {
    "text": "policy selection and graph-based",
    "start": "1191280",
    "end": "1193840"
  },
  {
    "text": "mutation",
    "start": "1193840",
    "end": "1195039"
  },
  {
    "text": "the n-graph constructor is take the",
    "start": "1195039",
    "end": "1197600"
  },
  {
    "text": "model 7 model from the file",
    "start": "1197600",
    "end": "1202080"
  },
  {
    "text": "and convert them into the model graph",
    "start": "1202559",
    "end": "1205360"
  },
  {
    "text": "and the policy selection and to select",
    "start": "1205360",
    "end": "1207600"
  },
  {
    "text": "random select the policies we predefined",
    "start": "1207600",
    "end": "1211120"
  },
  {
    "text": "discussed",
    "start": "1211120",
    "end": "1212320"
  },
  {
    "text": "before",
    "start": "1212320",
    "end": "1213520"
  },
  {
    "text": "and the graph model mutation is to",
    "start": "1213520",
    "end": "1215760"
  },
  {
    "text": "mutate the doses to connect in potential",
    "start": "1215760",
    "end": "1218559"
  },
  {
    "text": "mutation or placeholder mutation or",
    "start": "1218559",
    "end": "1221760"
  },
  {
    "text": "object mutation on this graph",
    "start": "1221760",
    "end": "1225760"
  },
  {
    "start": "1227000",
    "end": "1227000"
  },
  {
    "text": "here is our result",
    "start": "1227200",
    "end": "1229360"
  },
  {
    "text": "we evaluated our am model mutator in",
    "start": "1229360",
    "end": "1232960"
  },
  {
    "text": "tensorflow",
    "start": "1232960",
    "end": "1234679"
  },
  {
    "text": "2.4.3",
    "start": "1234679",
    "end": "1236240"
  },
  {
    "text": "and we can successfully generate",
    "start": "1236240",
    "end": "1238799"
  },
  {
    "text": "malaysian models to trigger 66 cvs found",
    "start": "1238799",
    "end": "1243520"
  },
  {
    "text": "in tensorflows",
    "start": "1243520",
    "end": "1245200"
  },
  {
    "text": "we also find the six conform",
    "start": "1245200",
    "end": "1248799"
  },
  {
    "text": "vulnerabilities into in tensorflow 2.4.3",
    "start": "1248799",
    "end": "1254559"
  },
  {
    "text": "using our model",
    "start": "1254559",
    "end": "1256240"
  },
  {
    "text": "notator these techniques but it's hard",
    "start": "1256240",
    "end": "1259120"
  },
  {
    "text": "to fix so it has a release yet",
    "start": "1259120",
    "end": "1263200"
  },
  {
    "text": "so we will release details after we get",
    "start": "1263200",
    "end": "1265919"
  },
  {
    "text": "the cv number",
    "start": "1265919",
    "end": "1268559"
  },
  {
    "text": "this pretty much",
    "start": "1268559",
    "end": "1270159"
  },
  {
    "text": "about my talks",
    "start": "1270159",
    "end": "1271919"
  },
  {
    "text": "thanks for your attention",
    "start": "1271919",
    "end": "1274159"
  },
  {
    "text": "any questions are welcome thank you",
    "start": "1274159",
    "end": "1277510"
  },
  {
    "text": "[Music]",
    "start": "1277510",
    "end": "1287920"
  }
]