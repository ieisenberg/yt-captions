[
  {
    "start": "0",
    "end": "15000"
  },
  {
    "text": "hello and welcome to our talk page cash attacks micro architectural attacks on flawless",
    "start": "1680",
    "end": "7200"
  },
  {
    "text": "hardware uh this is a talk with trishita tiwari mikhail schwarz and eric croft",
    "start": "7200",
    "end": "13120"
  },
  {
    "text": "and me daniel goose so let's start right away so we want to talk about uh the micro",
    "start": "13120",
    "end": "19760"
  },
  {
    "start": "15000",
    "end": "60000"
  },
  {
    "text": "architecture today micro architectural components are components of the processor which are not defined in the",
    "start": "19760",
    "end": "26080"
  },
  {
    "text": "architecture but they still exist and they still are different and behave differently",
    "start": "26080",
    "end": "31519"
  },
  {
    "text": "depending on the processor so you can have for instance different caches buffers in different cpus",
    "start": "31519",
    "end": "37600"
  },
  {
    "text": "uh you can have predictors and all of these micro architectural elements they have a behavior that you can",
    "start": "37600",
    "end": "43440"
  },
  {
    "text": "observe but they are not documented or at least their their exact behavior is not documented in the",
    "start": "43440",
    "end": "49600"
  },
  {
    "text": "architecture specification so this is meant to be transparent for the programmer",
    "start": "49600",
    "end": "55280"
  },
  {
    "text": "but the timing optimizations for instance they will then lead to cycle leakage that all sounds a bit",
    "start": "55280",
    "end": "62800"
  },
  {
    "start": "60000",
    "end": "187000"
  },
  {
    "text": "abstract right maybe we should right go into some example like a cpu cache something that many",
    "start": "62800",
    "end": "68799"
  },
  {
    "text": "people will already know so if i like a cpu cache for example like here in the middle and i have a",
    "start": "68799",
    "end": "74720"
  },
  {
    "text": "short code snippet on the left that accesses one variable twice in a row so at first time i do",
    "start": "74720",
    "end": "81119"
  },
  {
    "text": "that this variable is not cached so i've never used that before and it has to be somewhere in the dram",
    "start": "81119",
    "end": "87759"
  },
  {
    "text": "so this request has to go to the dram in the main memory and search for this variable",
    "start": "87759",
    "end": "93119"
  },
  {
    "text": "this sounds very slow yes that sounds slow i have to wait for the respawns of the",
    "start": "93119",
    "end": "98400"
  },
  {
    "text": "memory and then it will be as you said before put into the cache transparently",
    "start": "98400",
    "end": "104960"
  },
  {
    "text": "and the next time i use this variable and it's already in the cache because i've recently used it",
    "start": "104960",
    "end": "111200"
  },
  {
    "text": "then i can take it directly this copy from the cache and use that one and as you said going",
    "start": "111200",
    "end": "118000"
  },
  {
    "text": "to the main memory this is really slow but if it's in the cache",
    "start": "118000",
    "end": "123119"
  },
  {
    "text": "then it's much much faster and we can really measure that this is really great so if",
    "start": "123119",
    "end": "129599"
  },
  {
    "text": "we get much faster cpus just by adding a cache then we can save a lot of time and",
    "start": "129599",
    "end": "135040"
  },
  {
    "text": "energy so let's take a look at the histogram here um if you look at this histogram this is",
    "start": "135040",
    "end": "140800"
  },
  {
    "text": "a log scale histogram right and you can see that literally all the excesses are here around in this case",
    "start": "140800",
    "end": "149680"
  },
  {
    "text": "below 80 cpu cycles and you can see that virtually all the excesses are here so this is a a",
    "start": "149680",
    "end": "157519"
  },
  {
    "text": "lot of time that we can save here because if you compare this with the cash",
    "start": "157519",
    "end": "162560"
  },
  {
    "text": "misses they are all very very slow so you can see the timing here is always above these maybe 200 cycles",
    "start": "162560",
    "end": "171920"
  },
  {
    "text": "see that's what i told you it's much faster if something is in the cache and you can really see that",
    "start": "171920",
    "end": "177120"
  },
  {
    "text": "when measuring the axis times this sounds like a really cool thing but why would that be relevant for",
    "start": "177120",
    "end": "183519"
  },
  {
    "text": "our talk about page cash attacks it turns out you can build a text with that with the",
    "start": "183519",
    "end": "190640"
  },
  {
    "start": "187000",
    "end": "381000"
  },
  {
    "text": "simple timing difference you can already attack some applications let's see for example in this setup here",
    "start": "190640",
    "end": "198159"
  },
  {
    "text": "with an attacker application we have a victim application and we have some shared memory",
    "start": "198159",
    "end": "203440"
  },
  {
    "text": "and of course this transparent cache that we have in every cpu now if the attacker or the victim access",
    "start": "203440",
    "end": "211519"
  },
  {
    "text": "to shared memory doesn't matter who does it it ends up being in the cache transparently",
    "start": "211519",
    "end": "217360"
  },
  {
    "text": "no one does anything actively darius just ends up there now if the attacker flushes something",
    "start": "217360",
    "end": "224159"
  },
  {
    "text": "from the cache so removes it from the cache removes this copy then it's also gone for both an attacker",
    "start": "224159",
    "end": "231200"
  },
  {
    "text": "and a victim application so an attacker can do that and then wait for the victim and the",
    "start": "231200",
    "end": "237840"
  },
  {
    "text": "victim now might access some shared data again the shared data might be some library like the lib c",
    "start": "237840",
    "end": "246000"
  },
  {
    "text": "or some keystroke library that handles keys or whatever some shared library some shared",
    "start": "246000",
    "end": "252879"
  },
  {
    "text": "memory but this doesn't really sound very dangerous right yes but think about that so when the",
    "start": "252879",
    "end": "260560"
  },
  {
    "text": "victim accesses that it's again in the cache the shared memory and now the attacker can also",
    "start": "260560",
    "end": "266560"
  },
  {
    "text": "access it it's shared so the attacker can see whether it's in the cache or not by",
    "start": "266560",
    "end": "271919"
  },
  {
    "text": "measuring the access time so then the attacker learns whether the victim",
    "start": "271919",
    "end": "277199"
  },
  {
    "text": "accessed some data or did not access some data so that's some information that you might not want to share with",
    "start": "277199",
    "end": "284320"
  },
  {
    "text": "any other application if you are an application so this sounds like a very simple attack but in many",
    "start": "284320",
    "end": "290479"
  },
  {
    "text": "cases the um attacker will not have shared memory with the victim right",
    "start": "290479",
    "end": "295919"
  },
  {
    "text": "so what can we do then so it turns out this is not the only",
    "start": "295919",
    "end": "301120"
  },
  {
    "text": "attack there's a different attack that's quite similar it also uses the cache it also",
    "start": "301120",
    "end": "306639"
  },
  {
    "text": "uses his timing differences but does not rely on shared memory so in this case the attacker",
    "start": "306639",
    "end": "312880"
  },
  {
    "text": "simply fills the cache with its own data and then waits if the victim now",
    "start": "312880",
    "end": "319520"
  },
  {
    "text": "accesses some data that falls into that same cache set then there is no space no empty space",
    "start": "319520",
    "end": "324720"
  },
  {
    "text": "for that and some data of the decker has to be evicted it's not in the cache anymore but replaced by the",
    "start": "324720",
    "end": "331199"
  },
  {
    "text": "victim's data now if the attacker again",
    "start": "331199",
    "end": "336400"
  },
  {
    "text": "fills the cache with its data the data that's already in there that will be fast it's a cache hit but if it was replaced",
    "start": "336400",
    "end": "343840"
  },
  {
    "text": "it has to fetch that from the main memory again put it into the cache and this will be slow",
    "start": "343840",
    "end": "349440"
  },
  {
    "text": "so overall we see a bit of a slowdown when doing that so it's a similar attack to the previous",
    "start": "349440",
    "end": "355199"
  },
  {
    "text": "one and you don't need shared memory so this is really nice but can you actually",
    "start": "355199",
    "end": "361039"
  },
  {
    "text": "leak information with that i mean there are not that many cache sets and there may be tons of noise in a",
    "start": "361039",
    "end": "367120"
  },
  {
    "text": "system right so maybe we'll start with an easier example didn't you do something with",
    "start": "367120",
    "end": "373680"
  },
  {
    "text": "flush and reload and keys recently oh yeah i think we did something there but i have a very very bad",
    "start": "373680",
    "end": "380000"
  },
  {
    "text": "memory so let's take a look at maybe this plot here so here we perform flush reload on",
    "start": "380000",
    "end": "387120"
  },
  {
    "text": "keystrokes and we just measured when the library has some activity and whenever it has",
    "start": "387120",
    "end": "394240"
  },
  {
    "text": "some activity we printed this and we plotted this in this graph here and you can see",
    "start": "394240",
    "end": "401680"
  },
  {
    "text": "clearly the ground truth is illustrated here with the green dots you can clearly see that um you can see",
    "start": "401680",
    "end": "409440"
  },
  {
    "text": "the keystrokes in this trace just based on the side channel attack so this is",
    "start": "409440",
    "end": "416479"
  },
  {
    "text": "flash and reload and it does not really reveal the actual key but it has a",
    "start": "416479",
    "end": "421759"
  },
  {
    "text": "timing difference between the keystrokes here and this you can use to actually",
    "start": "421759",
    "end": "428240"
  },
  {
    "text": "leak data for instance by using machine learning and learning what the",
    "start": "428240",
    "end": "433520"
  },
  {
    "text": "inter keystroke timings are okay but hopefully my password is not in",
    "start": "433520",
    "end": "439280"
  },
  {
    "text": "a dictionary not a word a normal word so you will have distinct movements if you think about the",
    "start": "439280",
    "end": "445440"
  },
  {
    "text": "keyboard you have movements from one letter to the other so there will be distinct movements from one letter to the other",
    "start": "445440",
    "end": "451520"
  },
  {
    "text": "um that have different timing and based on that you will be able to infer some of the keys okay i can believe that",
    "start": "451520",
    "end": "460000"
  },
  {
    "text": "but do we also have some stronger attacks i think we have some stronger attacks",
    "start": "460000",
    "end": "465280"
  },
  {
    "text": "and if i recall it correctly you even published some of those and you're even going to give another",
    "start": "465280",
    "end": "470879"
  },
  {
    "text": "asia talk about one of these oh yes true true now i remember",
    "start": "470879",
    "end": "476800"
  },
  {
    "text": "so one of them was meltdown for instance but we also had uh foreshadow we had um zombies the",
    "start": "476800",
    "end": "483360"
  },
  {
    "text": "zombie load right yes zombie load that's what i'm talking about in this talk",
    "start": "483360",
    "end": "488400"
  },
  {
    "text": "no no you're not in the zombie talk yet okay",
    "start": "488400",
    "end": "492800"
  },
  {
    "text": "yeah right thanks for reminding me okay and then spectre we also have specter and inspector is also a very interesting",
    "start": "494560",
    "end": "500240"
  },
  {
    "text": "attack but we don't have time to go into the details of these all and also we wanted to talk",
    "start": "500240",
    "end": "505440"
  },
  {
    "text": "more about the page cache attacks right yes we just wanted to have some examples",
    "start": "505440",
    "end": "511440"
  },
  {
    "text": "here on what you can do with this small timing differences in the micro architecture",
    "start": "511440",
    "end": "517680"
  },
  {
    "start": "517000",
    "end": "655000"
  },
  {
    "text": "so let's talk a bit about countermeasures for these attacks because this is also an interesting property",
    "start": "517680",
    "end": "524320"
  },
  {
    "text": "because these are attacks that we mount from software that exploit a problem in",
    "start": "524320",
    "end": "529600"
  },
  {
    "text": "the hardware and then leak the data again to the software-based attacker",
    "start": "529600",
    "end": "535360"
  },
  {
    "text": "so this crosses the layers somehow and this makes it difficult to mitigate",
    "start": "535360",
    "end": "540480"
  },
  {
    "text": "these attacks properly can we even do that it depends so for",
    "start": "540480",
    "end": "546240"
  },
  {
    "text": "processors that are already shipped you can't really fix them right i mean i can hand you a soldering iron",
    "start": "546240",
    "end": "554480"
  },
  {
    "text": "good luck with that and of course you can work around the",
    "start": "554560",
    "end": "561519"
  },
  {
    "text": "problem for instance we did that with the kaiser patch which is now in linux as kpti but",
    "start": "561519",
    "end": "566720"
  },
  {
    "text": "also the other operating systems all adopted this and this just adds more",
    "start": "566720",
    "end": "571839"
  },
  {
    "text": "software level isolation and makes exploitation harder but it doesn't",
    "start": "571839",
    "end": "577440"
  },
  {
    "text": "fundamentally solve or fix the problem it only works around the problem",
    "start": "577440",
    "end": "585040"
  },
  {
    "text": "yeah and then it's it's very difficult to to fix these for instance for",
    "start": "586160",
    "end": "593200"
  },
  {
    "text": "for caches um we talked about the cache timing effects right yeah you don't want to fix that yes",
    "start": "593200",
    "end": "600240"
  },
  {
    "text": "because we want the performance there so it's not very easy to fix that",
    "start": "600240",
    "end": "605680"
  },
  {
    "text": "no one wants to give up caches yes for spectra it would be predictions you don't want to give up predictions on what to do next",
    "start": "605680",
    "end": "614880"
  },
  {
    "text": "so we are only fixing the symptoms and that's of course not very good and we",
    "start": "615040",
    "end": "621920"
  },
  {
    "text": "have to get better at that but maybe in a few years we will know",
    "start": "621920",
    "end": "626959"
  },
  {
    "text": "how to fix these problems more fundamentally yes that sounds like we would need a new",
    "start": "626959",
    "end": "633279"
  },
  {
    "text": "design for that yeah maybe we will need that um yes",
    "start": "633279",
    "end": "639839"
  },
  {
    "text": "but what if we assume that we are in a parallel universe okay",
    "start": "639839",
    "end": "646640"
  },
  {
    "text": "and hardware is not that complex and and hardware is fine okay what about softwares and",
    "start": "646640",
    "end": "654160"
  },
  {
    "text": "side channels so we don't have any hardware side channels",
    "start": "654160",
    "end": "659760"
  },
  {
    "start": "655000",
    "end": "793000"
  },
  {
    "text": "now everything is fixed we're in a parallel universe we're in the future we had the greatest minds coming up with",
    "start": "659760",
    "end": "666480"
  },
  {
    "text": "hardware designs that are not vulnerable anymore that would be great i mean then we would be um we would be",
    "start": "666480",
    "end": "673440"
  },
  {
    "text": "uh all fine because the problem would not exist anymore right i think so perfect okay",
    "start": "673440",
    "end": "680640"
  },
  {
    "text": "so this is great and with that we are at the end of our talk right thanks for your attention um",
    "start": "680640",
    "end": "689200"
  },
  {
    "text": "we have so much more to talk about what about the software side channels that we just discussed about but the micro",
    "start": "689200",
    "end": "695680"
  },
  {
    "text": "market microarchitecture doesn't exist on the software level right this is the hardware thing",
    "start": "695680",
    "end": "703839"
  },
  {
    "text": "well but there are parallels between the hardware and the software for example",
    "start": "703920",
    "end": "709360"
  },
  {
    "text": "if you see there's the isa extensions and the private in the operating system is non-standard",
    "start": "709360",
    "end": "715440"
  },
  {
    "text": "system calls similarly hardware caches have software caches as",
    "start": "715440",
    "end": "720720"
  },
  {
    "text": "their parallel and the hardware prefactor has the software professor",
    "start": "720720",
    "end": "725920"
  },
  {
    "text": "so that would mean hardware and software is basically the same with respect to situational",
    "start": "725920",
    "end": "731200"
  },
  {
    "text": "tanks maybe so maybe what we could do is like apply some of the principles from",
    "start": "731200",
    "end": "737760"
  },
  {
    "text": "hardware side channels to software uh attacks and",
    "start": "737760",
    "end": "744560"
  },
  {
    "text": "now we can discuss our hardware agnostic side channel through the operating system page cache",
    "start": "744560",
    "end": "753360"
  },
  {
    "text": "so this side channel has a temporal resolution of about 2 microseconds which leads to",
    "start": "754079",
    "end": "761839"
  },
  {
    "text": "up to 6.7 measurements per second on linux and 466 nanoseconds which is about 233",
    "start": "761839",
    "end": "769200"
  },
  {
    "text": "measurements per second on windows and a spatial resolution since it's a page cache attack it's",
    "start": "769200",
    "end": "775519"
  },
  {
    "text": "about it's one page which is four kilobytes and we can do very very different types",
    "start": "775519",
    "end": "782240"
  },
  {
    "text": "of attacks through this so php random number generator attacks ui re-wrestling attacks",
    "start": "782240",
    "end": "788160"
  },
  {
    "text": "breaking aslr keystroke timing attacks you name it covert channels we have it all",
    "start": "788160",
    "end": "793440"
  },
  {
    "start": "793000",
    "end": "837000"
  },
  {
    "text": "so now let's talk about what the page cache is so the pagecache is basically a software",
    "start": "793440",
    "end": "798959"
  },
  {
    "text": "cache managed by the operating system and its main purpose is to buffer all",
    "start": "798959",
    "end": "804720"
  },
  {
    "text": "buffer file pages in physical memory so that their future accesses to them are faster",
    "start": "804720",
    "end": "810240"
  },
  {
    "text": "in an earlier world all file pages would be in the page cache so that every access to it is fast but in reality",
    "start": "810240",
    "end": "817360"
  },
  {
    "text": "you're limited by the amount of your physical memory nowadays all major operating systems so",
    "start": "817360",
    "end": "823920"
  },
  {
    "text": "linux windows and mac implement a page cache and",
    "start": "823920",
    "end": "829680"
  },
  {
    "text": "now that we know where the page hash is let's look at a simple simple example how we could exploit it",
    "start": "829680",
    "end": "836800"
  },
  {
    "start": "837000",
    "end": "950000"
  },
  {
    "text": "okay so let's now talk about a simplified page cache attack um over here we have",
    "start": "838800",
    "end": "845920"
  },
  {
    "text": "um a victim um and then on the side we have an attacker and uh",
    "start": "845920",
    "end": "852240"
  },
  {
    "text": "we have the operating system kind of in the middle so um what the victim does is it",
    "start": "852240",
    "end": "859519"
  },
  {
    "text": "reads a page the first time you read a page obviously it will be a cache misc so",
    "start": "859519",
    "end": "866240"
  },
  {
    "text": "um the operating system will go and have to fetch that page from disk and then any subsequent accesses to",
    "start": "866240",
    "end": "875120"
  },
  {
    "text": "that page will be from the page cache so now that page is in ram",
    "start": "875120",
    "end": "881760"
  },
  {
    "text": "and now if the attacker accesses that same page the access time should be very fast",
    "start": "881760",
    "end": "888079"
  },
  {
    "text": "because that page is already in ram um how and and what you have to do next",
    "start": "888079",
    "end": "894160"
  },
  {
    "text": "is now that the attacker has already like accessed this page and the attacker",
    "start": "894160",
    "end": "899199"
  },
  {
    "text": "knows that the victim accessed this page because of like seeing the past access time now",
    "start": "899199",
    "end": "905440"
  },
  {
    "text": "we want to evict that page out of the page cache so we can repeat this process and see when the next time the victim",
    "start": "905440",
    "end": "911680"
  },
  {
    "text": "brings that same page again so to do this eviction we basically access a bunch of other pages",
    "start": "911680",
    "end": "919519"
  },
  {
    "text": "that will eventually get rid of the target page that the attacker wants to bit and so",
    "start": "919519",
    "end": "926959"
  },
  {
    "text": "now we have that target page evicted and again so if the victim accesses the page",
    "start": "926959",
    "end": "933680"
  },
  {
    "text": "again uh it will again be fetched from disk and then it will be stored in cache again",
    "start": "933680",
    "end": "939519"
  },
  {
    "text": "and so this way the attacker can basically just spy on the victim by just measuring the access times of uh",
    "start": "939519",
    "end": "947360"
  },
  {
    "text": "shared pages so now that we know what the how an attack could",
    "start": "947360",
    "end": "953120"
  },
  {
    "start": "950000",
    "end": "1059000"
  },
  {
    "text": "look like let's look at the first big building block observing the page cache state state so",
    "start": "953120",
    "end": "958880"
  },
  {
    "text": "the first idea is like in this example you just measure the access time but",
    "start": "958880",
    "end": "964880"
  },
  {
    "text": "the problem with this is that if you access it you always load it into the cache and",
    "start": "964880",
    "end": "969920"
  },
  {
    "text": "therefore you destroy the current state of the cache and this means even if other process or",
    "start": "969920",
    "end": "977360"
  },
  {
    "text": "a victim didn't access the page you still have still have it in the cache and because",
    "start": "977360",
    "end": "984720"
  },
  {
    "text": "of that you also have to evict it again so that you can monitor future accesses and that means that your",
    "start": "984720",
    "end": "991120"
  },
  {
    "text": "average resolution in time decreases which is unfortunate but luckily the os develop",
    "start": "991120",
    "end": "998800"
  },
  {
    "text": "developers came to our rescue and have provided nice apis to do that so for example on linux it's called",
    "start": "998800",
    "end": "1006000"
  },
  {
    "text": "min core and it basically takes a virtual page range and gives you back the information if",
    "start": "1006000",
    "end": "1011279"
  },
  {
    "text": "this page is buffered in the page cache on windows there is a similar api called",
    "start": "1011279",
    "end": "1016320"
  },
  {
    "text": "query working set a x and it basically also tells you for a virtual page range",
    "start": "1016320",
    "end": "1023199"
  },
  {
    "text": "information about this pages so if it's in the working set how many process it processes use it and so on and with this",
    "start": "1023199",
    "end": "1030480"
  },
  {
    "text": "information you can also deduce if it's used by multiple working sets or if it's um",
    "start": "1030480",
    "end": "1036000"
  },
  {
    "text": "in some working set and um these things are non-destructive so",
    "start": "1036000",
    "end": "1042798"
  },
  {
    "text": "they don't buffer it and therefore we get a higher average resolution because in the case a victim",
    "start": "1042799",
    "end": "1048319"
  },
  {
    "text": "didn't access the page we don't have to evict it again and yeah",
    "start": "1048319",
    "end": "1053919"
  },
  {
    "text": "then we go to the next big building block um the eviction",
    "start": "1053919",
    "end": "1059440"
  },
  {
    "start": "1059000",
    "end": "1119000"
  },
  {
    "text": "awesome so the second part of this attack is to reset the page cache to evict the",
    "start": "1060640",
    "end": "1067840"
  },
  {
    "text": "target pages that the attacker wants to observe and obviously this is necessary because",
    "start": "1067840",
    "end": "1073760"
  },
  {
    "text": "we want to be able to detect multiple accesses to the same page so we want to get rid of the page so that",
    "start": "1073760",
    "end": "1079520"
  },
  {
    "text": "the next time the victim accesses you can repeat this process and see precisely when the victim",
    "start": "1079520",
    "end": "1085120"
  },
  {
    "text": "accessed this page again um so this is essentially the bottleneck of the site channel",
    "start": "1085120",
    "end": "1091600"
  },
  {
    "text": "um because eviction is slow um and so the ideal strategy depends on the",
    "start": "1091600",
    "end": "1098480"
  },
  {
    "text": "memory management implementation and there are differences in page replacement policies across",
    "start": "1098480",
    "end": "1104640"
  },
  {
    "text": "different systems for linux you have a global clock pro like algorithm",
    "start": "1104640",
    "end": "1110960"
  },
  {
    "text": "but for windows you have a different kind of uh replacement process where you have a per process working set with an aging",
    "start": "1110960",
    "end": "1118559"
  },
  {
    "text": "algorithm and as these page replacements algorithms are different also our",
    "start": "1118559",
    "end": "1124240"
  },
  {
    "start": "1119000",
    "end": "1230000"
  },
  {
    "text": "approaches are different and so now let's start with the linux approach so in linux it's basic the basic header",
    "start": "1124240",
    "end": "1130640"
  },
  {
    "text": "is the same as in our example we just access new unique pages until the target page",
    "start": "1130640",
    "end": "1136000"
  },
  {
    "text": "is replaced and therefore our basic eviction set is just a large memory mapped file",
    "start": "1136000",
    "end": "1141360"
  },
  {
    "text": "and because that's then still quite slow because the page cast can grow very big and it basically can grow as long as you",
    "start": "1141360",
    "end": "1148480"
  },
  {
    "text": "have available physical memory we have developed some optimizations for it so the first optimization is",
    "start": "1148480",
    "end": "1155760"
  },
  {
    "text": "to add pages and do this x to this eviction set which are already in the page cache so",
    "start": "1155760",
    "end": "1161039"
  },
  {
    "text": "basically we keep the approximation of the current working set active",
    "start": "1161039",
    "end": "1166160"
  },
  {
    "text": "and that means it is less probable that other pages than the target page are evicted",
    "start": "1166160",
    "end": "1171440"
  },
  {
    "text": "and that helps us with the with flow erection times and the system is more stable because pages that are used are",
    "start": "1171440",
    "end": "1177520"
  },
  {
    "text": "that likely kicked out and the second optimization is filling the um the memory with anonymous",
    "start": "1177520",
    "end": "1184880"
  },
  {
    "text": "dirty pages and by that we gained that anonymous dirty pages are there",
    "start": "1184880",
    "end": "1190320"
  },
  {
    "text": "basically the last candidates for eviction and even more so if you have swapping disabled they can't be evicted",
    "start": "1190320",
    "end": "1197919"
  },
  {
    "text": "and therefore this practically reduces the size of the a weak stable page cache and that means",
    "start": "1197919",
    "end": "1204559"
  },
  {
    "text": "we have less possible eviction candidates and that means we are faster at in the eviction and",
    "start": "1204559",
    "end": "1211520"
  },
  {
    "text": "yeah with all these optimizations we get to an average run time around 149 milliseconds depending on how",
    "start": "1211520",
    "end": "1219039"
  },
  {
    "text": "the optimizations are configured you can also get lower but then you have more cpu utilization and it's not so stealthy",
    "start": "1219039",
    "end": "1225440"
  },
  {
    "text": "anymore and after seeing this linux approaches let's look at the windows you want",
    "start": "1225440",
    "end": "1232080"
  },
  {
    "start": "1230000",
    "end": "1311000"
  },
  {
    "text": "okay so on the windows side a page cache eviction basically means the target page is",
    "start": "1232080",
    "end": "1239200"
  },
  {
    "text": "dropped out of all of the working sets um and so the previous approach will be kind of",
    "start": "1239200",
    "end": "1245280"
  },
  {
    "text": "slow and the optimizations we use for windows are to increase the working set size and the",
    "start": "1245280",
    "end": "1252480"
  },
  {
    "text": "memory pressure and this leads to self-eviction of the page and it's it's less than um",
    "start": "1252480",
    "end": "1259919"
  },
  {
    "text": "two seconds um you can also evict page in any other processes",
    "start": "1259919",
    "end": "1266000"
  },
  {
    "text": "uh by set process working set size you can limit the working set size and induce",
    "start": "1266000",
    "end": "1272559"
  },
  {
    "text": "eviction in another process if you want to um and this is for processes with the same",
    "start": "1272559",
    "end": "1280000"
  },
  {
    "text": "integrity level as the attacker so it won't work with a process a victim process that's more",
    "start": "1280000",
    "end": "1285520"
  },
  {
    "text": "privileged than the attackers and evicting pages in your own working set",
    "start": "1285520",
    "end": "1293600"
  },
  {
    "text": "uh is done by virtual unlock uh which gives around 7.69 microseconds",
    "start": "1293600",
    "end": "1300559"
  },
  {
    "text": "uh of latency so why is this doing this this is basically",
    "start": "1300559",
    "end": "1306480"
  },
  {
    "text": "not a documented feature uh so let's um come to the first example",
    "start": "1306480",
    "end": "1314640"
  },
  {
    "start": "1311000",
    "end": "1428000"
  },
  {
    "text": "of of our side channel how can you use it and the first simple thing you can do is just talking over the side channel",
    "start": "1314640",
    "end": "1321280"
  },
  {
    "text": "so basically chatting over files and this is done by using a shared file",
    "start": "1321280",
    "end": "1326960"
  },
  {
    "text": "as information carrier and then you encode the message bits as file page presence in the page cache",
    "start": "1326960",
    "end": "1333280"
  },
  {
    "text": "so for example you say the page is present in the page cache it's a one the page is not present it's a zero",
    "start": "1333280",
    "end": "1339039"
  },
  {
    "text": "and some pages you have to reserve for transmission control so you say yeah for example acknowledged or",
    "start": "1339039",
    "end": "1345360"
  },
  {
    "text": "ready to send and such things and there are quite a few different implementation approaches",
    "start": "1345360",
    "end": "1352159"
  },
  {
    "text": "and if you have a look on on them we see for example that the linux if we do it like in the",
    "start": "1352159",
    "end": "1357520"
  },
  {
    "text": "side channel so if this eviction approach we explained and used minkow observation we get a speed",
    "start": "1357520",
    "end": "1363440"
  },
  {
    "text": "about around 20.20 kilobytes and if you use m advice and postxf",
    "start": "1363440",
    "end": "1369120"
  },
  {
    "text": "advice which is only possible if they at their case the sole user of the file",
    "start": "1369120",
    "end": "1374320"
  },
  {
    "text": "then we can get 81.16 kilobytes a second",
    "start": "1374320",
    "end": "1379520"
  },
  {
    "text": "and on windows we use this process working set direction with virtual unlock",
    "start": "1379520",
    "end": "1384559"
  },
  {
    "text": "and query working set 8x for monitoring the account so basically",
    "start": "1384559",
    "end": "1389600"
  },
  {
    "text": "the attacker and the reader maps it and if they then see a move in the share count they know some the reader has flashed it from the",
    "start": "1389600",
    "end": "1397280"
  },
  {
    "text": "working set or vice versa and with this you can get a speed of around 100.11 kilobytes",
    "start": "1397280",
    "end": "1405280"
  },
  {
    "text": "per second and all these approaches have in common that they have a very low bit",
    "start": "1405280",
    "end": "1410640"
  },
  {
    "text": "error rate as long as no other application pressures the system memory so you can can get down to very low",
    "start": "1410640",
    "end": "1416880"
  },
  {
    "text": "numbers here and the next example we have is a is an attack on the php random number",
    "start": "1416880",
    "end": "1423840"
  },
  {
    "text": "generator awesome so now let's talk about our",
    "start": "1423840",
    "end": "1430000"
  },
  {
    "start": "1428000",
    "end": "1597000"
  },
  {
    "text": "second attack which is the php pseudorandom number generator attack",
    "start": "1430000",
    "end": "1435600"
  },
  {
    "text": "um so here the victim process basically seeds uh their um pseudorandom number",
    "start": "1435600",
    "end": "1442240"
  },
  {
    "text": "generator with uh the system time and it uses the micro time function",
    "start": "1442240",
    "end": "1447600"
  },
  {
    "text": "um which is used in some frameworks and the micro time function essentially returns the unix timestamp",
    "start": "1447600",
    "end": "1454000"
  },
  {
    "text": "in microseconds and um unfortunately this",
    "start": "1454000",
    "end": "1460159"
  },
  {
    "text": "uh seating is used for some cryptograph cryptographic operations which is not ideal because um it just makes the",
    "start": "1460159",
    "end": "1467360"
  },
  {
    "text": "system weaker uh because the time is kind of guessable and what we do here with the page cash",
    "start": "1467360",
    "end": "1473679"
  },
  {
    "text": "attack is we try to detect um the use of the micro time uh call",
    "start": "1473679",
    "end": "1481360"
  },
  {
    "text": "so we can get exactly when that call was used so through that we can infer um the system",
    "start": "1481360",
    "end": "1488080"
  },
  {
    "text": "time that was returned by microtime if we can detect when microtime was called",
    "start": "1488080",
    "end": "1493760"
  },
  {
    "text": "um so this makes the seed recoverable and uh what we do is we look for",
    "start": "1493760",
    "end": "1500240"
  },
  {
    "text": "the zip micro time call which is on page 781 of the uh",
    "start": "1500240",
    "end": "1506559"
  },
  {
    "text": "executable that is our target um and it depends uh",
    "start": "1506559",
    "end": "1513279"
  },
  {
    "text": "on different build environment settings for this particular attack we use php",
    "start": "1513279",
    "end": "1518679"
  },
  {
    "text": "7.3.5 and the average detection accuracy was within one millisecond which is pretty good and",
    "start": "1518679",
    "end": "1525840"
  },
  {
    "text": "so the seat was very easily recovered as we will now show",
    "start": "1525840",
    "end": "1531520"
  },
  {
    "text": "now let's look at the live demo of this attack so on the left side you see the bhb my faq",
    "start": "1531520",
    "end": "1537279"
  },
  {
    "text": "um framework which uses this microtime call to generate the password",
    "start": "1537279",
    "end": "1542400"
  },
  {
    "text": "and on the right side you see the deck window and now what i do is i request a new",
    "start": "1542400",
    "end": "1548880"
  },
  {
    "text": "password and by doing that i enter my credentials and then i send it and then this call to",
    "start": "1548880",
    "end": "1556960"
  },
  {
    "text": "the microtime function is detected by the attack and then we can basically recover the",
    "start": "1556960",
    "end": "1563600"
  },
  {
    "text": "approximate timestamp which was returned by microtime and using this information we can use the same algorithm as the page users for",
    "start": "1563600",
    "end": "1570559"
  },
  {
    "text": "creating passwords and then create the passwords by ourself and as you can see the ideal password",
    "start": "1570559",
    "end": "1579840"
  },
  {
    "text": "is so the from the recovered timestamp is not that far away from the real password created by the page it's around",
    "start": "1579840",
    "end": "1587120"
  },
  {
    "text": "11 positions away so that it's quite a good result",
    "start": "1587120",
    "end": "1592720"
  },
  {
    "text": "all right so the previous two attacks were really good now let's talk about our third attack which is the ui redressing attacks",
    "start": "1596720",
    "end": "1604640"
  },
  {
    "start": "1597000",
    "end": "1731000"
  },
  {
    "text": "so this attack is all about uh overlaying fake windows on top of",
    "start": "1604640",
    "end": "1609679"
  },
  {
    "text": "real windows uh to trick the user into typing in sensitive information so let's see how we can do that so what",
    "start": "1609679",
    "end": "1616640"
  },
  {
    "text": "the first thing we need to do is we need to detect the opening of an interesting window",
    "start": "1616640",
    "end": "1622080"
  },
  {
    "text": "so authentication windows are a very good example for this um and as soon as this happens as soon",
    "start": "1622080",
    "end": "1629679"
  },
  {
    "text": "as you detect that uh the the interesting window is open you overlay that window",
    "start": "1629679",
    "end": "1635760"
  },
  {
    "text": "with the fake window and trick the user into entering their information there so this would be like",
    "start": "1635760",
    "end": "1640880"
  },
  {
    "text": "a password that's entered into the fake authentication window and so how do we detect uh",
    "start": "1640880",
    "end": "1648080"
  },
  {
    "text": "when this interesting window is open so we use the site channel essentially the page hash side channel",
    "start": "1648080",
    "end": "1653760"
  },
  {
    "text": "as a trigger so the attacker detects when that page uh for the uh original window so the",
    "start": "1653760",
    "end": "1660960"
  },
  {
    "text": "real window is accessed and as soon as that's accessed the attacker triggers their own attack",
    "start": "1660960",
    "end": "1666240"
  },
  {
    "text": "and releases their own fake window on top of",
    "start": "1666240",
    "end": "1671679"
  },
  {
    "text": "the real window and so this provides a very low latency um and hardly noticeable attack",
    "start": "1671679",
    "end": "1679120"
  },
  {
    "text": "because it's very fast you can detect this very quickly and overlay your fake window and we",
    "start": "1679120",
    "end": "1685520"
  },
  {
    "text": "tested this with a root authentication window on ubuntu 16.04",
    "start": "1685520",
    "end": "1691679"
  },
  {
    "text": "and the page in question that the attacker had to detect was page 6 of this",
    "start": "1691679",
    "end": "1699039"
  },
  {
    "text": "library file essentially and so we'll show a demo of how this whole process works",
    "start": "1699039",
    "end": "1706559"
  },
  {
    "text": "you see that i have the update dialog of ubuntu 16.04 open",
    "start": "1706559",
    "end": "1711600"
  },
  {
    "text": "and if i now start an update a root authentication window spawns and this is detected by the deck and overlapped by a fake one and you saw it",
    "start": "1711600",
    "end": "1718640"
  },
  {
    "text": "it was a fake window now below is the real window and we basically stole the password from the user by this",
    "start": "1718640",
    "end": "1724559"
  },
  {
    "text": "and you can hardly know this is because latency so after we saw all these examples",
    "start": "1724559",
    "end": "1732000"
  },
  {
    "text": "um did we did it had any impact was somebody interested in this attack oh interest there was so much interest",
    "start": "1732000",
    "end": "1740000"
  },
  {
    "text": "in this i remember all of the press coverage that we got because of this attack and uh",
    "start": "1740000",
    "end": "1745679"
  },
  {
    "text": "um actually that's a good segue now actually let's talk about the impact um that this um attack had so",
    "start": "1745679",
    "end": "1753760"
  },
  {
    "text": "this attack was basically identified as cb 2019 5489 and it generated as i said",
    "start": "1753760",
    "end": "1760799"
  },
  {
    "text": "tons of press um and both linux and windows",
    "start": "1760799",
    "end": "1766000"
  },
  {
    "text": "deployed a lot of counter measures to prevent this attack and there were patches everywhere",
    "start": "1766000",
    "end": "1774640"
  },
  {
    "start": "1774000",
    "end": "1862000"
  },
  {
    "text": "patches batches patches so let's start with windows and what they did is they uh raised the",
    "start": "1774640",
    "end": "1781679"
  },
  {
    "text": "privilege for querying working set aax on other processes and that basically mean means you can't",
    "start": "1781679",
    "end": "1788240"
  },
  {
    "text": "make non-destructive probing of a different working set and they also hit",
    "start": "1788240",
    "end": "1796320"
  },
  {
    "text": "did hide the share count for unprivileged users because of this information you can also indirectly probe if a",
    "start": "1796320",
    "end": "1804240"
  },
  {
    "text": "page is used by a different working set and therefore non-destructive",
    "start": "1804240",
    "end": "1812000"
  },
  {
    "text": "growing is not no more possible for higher integrity processes and this basically makes their deck a",
    "start": "1812000",
    "end": "1818960"
  },
  {
    "text": "lot a lot weaker because you only can attack processes within the same user which is also",
    "start": "1818960",
    "end": "1825200"
  },
  {
    "text": "interesting but it's it's much worse if you add that higher integrity processes like the administrators process or something like",
    "start": "1825200",
    "end": "1831679"
  },
  {
    "text": "that and yeah that only holds true if kyrie working said ax is the only possible",
    "start": "1831679",
    "end": "1838000"
  },
  {
    "text": "leakage source which that doesn't has to be the case as we see on the next slide for",
    "start": "1838000",
    "end": "1843679"
  },
  {
    "text": "linux and yeah the eviction in itself is already a lot harder",
    "start": "1843679",
    "end": "1849440"
  },
  {
    "text": "on windows because of this working set approach they have and yeah then let's move on with the",
    "start": "1849440",
    "end": "1855760"
  },
  {
    "text": "linux countermeasures so now let's talk about what people did on the",
    "start": "1855760",
    "end": "1861360"
  },
  {
    "text": "linux site so the first thing that they fixed on the linux side was fixing the min core system call",
    "start": "1861360",
    "end": "1867279"
  },
  {
    "text": "which essentially is what was used to spy on these pages in the page cache so now after the",
    "start": "1867279",
    "end": "1873279"
  },
  {
    "text": "fixes mincor only reveals information on writable pages so this means that if the",
    "start": "1873279",
    "end": "1881120"
  },
  {
    "text": "attacker has only read permissions to a page it can no longer use mint core to spy on that page because of",
    "start": "1881120",
    "end": "1888880"
  },
  {
    "text": "the patch made to the mint core system call and so read-only files are excluded so all the",
    "start": "1888880",
    "end": "1895760"
  },
  {
    "text": "shared libraries it's executables and basically a lot of stuff that would be of interest to the",
    "start": "1895760",
    "end": "1901039"
  },
  {
    "text": "attacker is now no longer accessible through midcore and this was merged with the release of",
    "start": "1901039",
    "end": "1908640"
  },
  {
    "text": "the kernel version 5.1.4 and so is non-destructive probing no",
    "start": "1908640",
    "end": "1915519"
  },
  {
    "text": "longer possible let's see actually no because pre-advice",
    "start": "1915519",
    "end": "1921840"
  },
  {
    "text": "2 which is another system called used with the our rwf no wait flag leaks the exactly same",
    "start": "1921840",
    "end": "1928799"
  },
  {
    "text": "information um that meant core leaked and so that's not fixed yet um",
    "start": "1928799",
    "end": "1935840"
  },
  {
    "text": "and this basically shows how hard it is to fix uh an issue like this because there's a",
    "start": "1935840",
    "end": "1941760"
  },
  {
    "text": "lot of different ways that you can get the same information out um as an attacker so if",
    "start": "1941760",
    "end": "1947600"
  },
  {
    "text": "you it's like whack-a-mole so you fix one thing and then there's this other thing that you also need to fix",
    "start": "1947600",
    "end": "1953279"
  },
  {
    "text": "so yeah it's it's it's not easy to fix a vulnerability like this yes but the thing is also we want",
    "start": "1953279",
    "end": "1961440"
  },
  {
    "start": "1957000",
    "end": "2000000"
  },
  {
    "text": "performance optimization so we want to keep them we don't want to fix all these things that could be abused for attacks because",
    "start": "1961440",
    "end": "1969840"
  },
  {
    "text": "we might lease lose performance again so many of these things we see here they",
    "start": "1969840",
    "end": "1975840"
  },
  {
    "text": "show side channel leakage on the one side yes but they are also intended behavior for performance optimizations",
    "start": "1975840",
    "end": "1982559"
  },
  {
    "text": "so that's really really difficult to find this trade-off between security and performance",
    "start": "1982559",
    "end": "1990159"
  },
  {
    "text": "and every optimization that we have being in hardware built-in software has",
    "start": "1990159",
    "end": "1995760"
  },
  {
    "text": "this potential side channel if you optimize something for performance",
    "start": "1995760",
    "end": "2001200"
  },
  {
    "start": "2000000",
    "end": "2112000"
  },
  {
    "text": "so this does not look very good right so this means that we won't get rid of side",
    "start": "2001200",
    "end": "2006240"
  },
  {
    "text": "channels because we want to have the performance advantage",
    "start": "2006240",
    "end": "2011760"
  },
  {
    "text": "and with more and more optimizations that we now add in our software and hardware to keep up the the performance and",
    "start": "2012480",
    "end": "2019919"
  },
  {
    "text": "improve the performance year by year that means we add more and more side channels and that means we will have",
    "start": "2019919",
    "end": "2025840"
  },
  {
    "text": "more and more leakage so what we see here is what we asked",
    "start": "2025840",
    "end": "2031679"
  },
  {
    "text": "initially the micro architecture in software there is actually something like a micro",
    "start": "2031679",
    "end": "2037200"
  },
  {
    "text": "architecture of the operating system and here we presented attacks on this micro architecture",
    "start": "2037200",
    "end": "2043840"
  },
  {
    "text": "and we can expect more attacks on the operating system micro architecture in the future so um",
    "start": "2043840",
    "end": "2053040"
  },
  {
    "text": "conclusion is abstractions eventually lead to side channels it's an inevitable byproduct of these",
    "start": "2053040",
    "end": "2060878"
  },
  {
    "text": "abstractions and we saw that software cache decks are very similar to hardware",
    "start": "2060879",
    "end": "2066720"
  },
  {
    "text": "cache attacks and finding counter measures is",
    "start": "2066720",
    "end": "2072638"
  },
  {
    "text": "extremely devilishly difficult for these attacks",
    "start": "2072639",
    "end": "2077519"
  },
  {
    "text": "with that we would like to thank you um there were a lot of other people involved with",
    "start": "2077679",
    "end": "2082720"
  },
  {
    "text": "this work so please check out our paper and of course we have to also acknowledge a lot of people that helped",
    "start": "2082720",
    "end": "2089118"
  },
  {
    "text": "us and companies that helped us with funding this research um and with that we would like to",
    "start": "2089119",
    "end": "2095358"
  },
  {
    "text": "conclude our talk thank you for listening and if you have any questions we would really like to answer them now",
    "start": "2095359",
    "end": "2100400"
  },
  {
    "text": "in the q a where we are awakening now it's over",
    "start": "2100400",
    "end": "2114000"
  }
]