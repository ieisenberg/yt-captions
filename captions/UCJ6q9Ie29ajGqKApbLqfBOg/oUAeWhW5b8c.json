[
  {
    "start": "0",
    "end": "14000"
  },
  {
    "text": "my name is Avram you know time also known as upon tester principle security researcher with HP fortify team and here",
    "start": "0",
    "end": "6899"
  },
  {
    "text": "with me my colleague Alexander meters which is also security researcher with the HP fortified team so we have a",
    "start": "6899",
    "end": "14929"
  },
  {
    "start": "14000",
    "end": "140000"
  },
  {
    "text": "packed agenda for today so let's jump straight in 2016 last year was the year",
    "start": "14929",
    "end": "21449"
  },
  {
    "text": "of Java desalinization attacks right it was a very well known vector since 2011",
    "start": "21449",
    "end": "26630"
  },
  {
    "text": "but probably because of the lack of remote code execution gadgets in very popular libraries this vulnerability",
    "start": "26630",
    "end": "33300"
  },
  {
    "text": "kind of got ignored by the community and no one was actually looking for it until",
    "start": "33300",
    "end": "38309"
  },
  {
    "text": "last year so this is also true for the dotnet visualization it's a very well",
    "start": "38309",
    "end": "45000"
  },
  {
    "text": "known vector at least for the binary formatter and for the net data contract serializer because it was presented like",
    "start": "45000",
    "end": "52020"
  },
  {
    "text": "40 years ago here in the same conference by James for so but since there was no",
    "start": "52020",
    "end": "57510"
  },
  {
    "text": "remote code execution god yet again the community is not actually looking for this vulnerabilities or kind of ignoring",
    "start": "57510",
    "end": "62879"
  },
  {
    "text": "them so at that time the solution was like okay I stopped using Java this realization altogether it's dangerous",
    "start": "62879",
    "end": "69420"
  },
  {
    "text": "you should not be seer eyes and trusted there and developers were like well yeah I would like to do so by need to store",
    "start": "69420",
    "end": "75869"
  },
  {
    "text": "my objects into this database I need to move our send these objects across the",
    "start": "75869",
    "end": "81869"
  },
  {
    "text": "wire so I need to use something and then the security experts were like okay then use something like a secure JSON or XML",
    "start": "81869",
    "end": "90079"
  },
  {
    "text": "library instead so our goal with this talk is twofold",
    "start": "90079",
    "end": "95369"
  },
  {
    "text": "first of all we want to verify those JSON libraries are any better than the Java visualizer like the object input",
    "start": "95369",
    "end": "102540"
  },
  {
    "text": "stream and also raise awareness around the dotnet dissertation vulnerabilities",
    "start": "102540",
    "end": "107880"
  },
  {
    "text": "who will be providing a list of vulnerable libraries and gadgets so in",
    "start": "107880",
    "end": "114810"
  },
  {
    "text": "the first section we will cover JSON libraries for both dotnet and and Java we will provide gadgets live into",
    "start": "114810",
    "end": "122070"
  },
  {
    "text": "arbitrary code execution and then we will have some demos so in how to get arbitrary code execution on web",
    "start": "122070",
    "end": "127920"
  },
  {
    "text": "application frameworks and then the second block is about dotnet serializers we want to raise this awareness",
    "start": "127920",
    "end": "133620"
  },
  {
    "text": "we will provide courteous living to remote code execution got yet and again we will show you some some demos so with",
    "start": "133620",
    "end": "140550"
  },
  {
    "start": "140000",
    "end": "253000"
  },
  {
    "text": "any further ado let's jump into the JSON section and just to set the expectations",
    "start": "140550",
    "end": "145560"
  },
  {
    "text": "clear we are not talking about JSON when used to exchange simple data or simple",
    "start": "145560",
    "end": "152250"
  },
  {
    "text": "JavaScript object between the front end like a JavaScript front-end and maybe I don't know a spring controller in the",
    "start": "152250",
    "end": "158640"
  },
  {
    "text": "backend or something like that we're talking about replacing Java visualization and dotnet this",
    "start": "158640",
    "end": "163980"
  },
  {
    "text": "realization with JSON libraries which means that you need to serialize Java",
    "start": "163980",
    "end": "169680"
  },
  {
    "text": "objects and dotnet objects and in order to do so you need to deal with object-oriented programming features",
    "start": "169680",
    "end": "175799"
  },
  {
    "text": "like how I'm going to serialize a java applet or how I'm going to serialize a system object Internet I'm going to deal",
    "start": "175799",
    "end": "182670"
  },
  {
    "text": "with generics I'm going to deal with interface figures polymorphism and so on",
    "start": "182670",
    "end": "188959"
  },
  {
    "text": "so a very quick recap on how attackers were able to get a rhetorical execution with javadi's realization attacks",
    "start": "188959",
    "end": "195319"
  },
  {
    "text": "basically they were sending like a stream of untrusted data to the",
    "start": "195319",
    "end": "201139"
  },
  {
    "text": "visualizer to the vulnerable endpoint and this data contained some type",
    "start": "201139",
    "end": "207049"
  },
  {
    "text": "discriminators that is nothing else that the class name for this for some types",
    "start": "207049",
    "end": "212639"
  },
  {
    "text": "of arbitrary types that the attacker could control then the desi eliezer were basically instance here in these types",
    "start": "212639",
    "end": "218670"
  },
  {
    "text": "and then invoking some visualization callbacks on these types right so basically attacker need need to find a",
    "start": "218670",
    "end": "227609"
  },
  {
    "text": "type or a class containing a read object or read resolve method which could be",
    "start": "227609",
    "end": "233930"
  },
  {
    "text": "chained together with other types or classes in order to assembly a cut the",
    "start": "233930",
    "end": "239099"
  },
  {
    "text": "chains leading to arbitrary code execution however JSON libraries don't normally invoke any DC allocation callbacks so we",
    "start": "239099",
    "end": "248549"
  },
  {
    "text": "need to start this cut yet sense in a different way so let's see how the",
    "start": "248549",
    "end": "254099"
  },
  {
    "start": "253000",
    "end": "344000"
  },
  {
    "text": "adjacent libraries to reconstruct the objects when DC a licen and see if we cannot take benefit of some of these",
    "start": "254099",
    "end": "260880"
  },
  {
    "text": "methods in order to start our gadget chain so normally this libraries it depends on the library",
    "start": "260880",
    "end": "266270"
  },
  {
    "text": "every library is different from the others but normally they will invoke the default constructor which is not very",
    "start": "266270",
    "end": "271490"
  },
  {
    "text": "useful for the attackers because it takes no parameters and then they will use either reflection or Colin setters",
    "start": "271490",
    "end": "277400"
  },
  {
    "text": "in order to set the values of the fields or the properties of the class some of the libraries will invoke some",
    "start": "277400",
    "end": "283370"
  },
  {
    "text": "visualization callbacks or a special constructors some of them will call type converters that is I don't need a",
    "start": "283370",
    "end": "288800"
  },
  {
    "text": "specific type which we don't have time to cover in this talk but it's included",
    "start": "288800",
    "end": "294050"
  },
  {
    "text": "in our white paper that will be published today I think so let's just make sure that you check it out and then",
    "start": "294050",
    "end": "301220"
  },
  {
    "text": "most of the libraries will also invoke some common methods like for example when dealing with hash tables hash code",
    "start": "301220",
    "end": "307099"
  },
  {
    "text": "or equals maker invoke to a string may get invoke when raising an exception if",
    "start": "307099",
    "end": "312620"
  },
  {
    "text": "you can force the library to raise an exception finalizes always invoke by the",
    "start": "312620",
    "end": "317810"
  },
  {
    "text": "garbage collector where click when claiming the memory so we can actually start our gadget change using some of",
    "start": "317810",
    "end": "323690"
  },
  {
    "text": "these libraries by far the most common one used by all these data libraries is",
    "start": "323690",
    "end": "329000"
  },
  {
    "text": "the setters most of the libraries if not all of them will invoke setters so what we did is research and look for God yet",
    "start": "329000",
    "end": "336259"
  },
  {
    "text": "starting with setters living through arbitrary code execution both in Java and.net let's have a look on a few",
    "start": "336259",
    "end": "345949"
  },
  {
    "text": "godred in dotnet all of them can lead to arbitrary code execution some of them has the own requirements",
    "start": "345949",
    "end": "352340"
  },
  {
    "text": "and/or limitation but we believe so that it's not very difficult to pick up proper one for specific library so our",
    "start": "352340",
    "end": "360440"
  },
  {
    "text": "first gadget is a set of path property in assembly installer class it allows",
    "start": "360440",
    "end": "366020"
  },
  {
    "text": "code execution during library loading from path controlled by an attacker there is no additional requirements in",
    "start": "366020",
    "end": "373490"
  },
  {
    "text": "case if assembly this payload is on local machine but if we try to provide remote",
    "start": "373490",
    "end": "381800"
  },
  {
    "text": "resources dotnet framework may have some additional security checks the next two",
    "start": "381800",
    "end": "387380"
  },
  {
    "text": "gadgets are uses user sam'l parser we will show a bit",
    "start": "387380",
    "end": "393710"
  },
  {
    "text": "later how it can be used for arbitrary method invocation so",
    "start": "393710",
    "end": "399550"
  },
  {
    "text": "property inspector font and color data in workflow designer type a requires",
    "start": "399550",
    "end": "405660"
  },
  {
    "text": "single-threaded apartment set it's quite strong requirement but if your target has such",
    "start": "405660",
    "end": "411759"
  },
  {
    "text": "configuration you will get remote code execution the next gadget is source a setter in resource dictionary it has a",
    "start": "411759",
    "end": "419860"
  },
  {
    "text": "few requirements to Jason and Marshall s they should call setters in four types",
    "start": "419860",
    "end": "428470"
  },
  {
    "text": "that implement a dictionary interface often in such case our Marshalls are",
    "start": "428470",
    "end": "434440"
  },
  {
    "text": "just populating key value pairs also they should be able to reconstruct",
    "start": "434440",
    "end": "440259"
  },
  {
    "text": "system override type and this type does not have default constructor but very",
    "start": "440259",
    "end": "447639"
  },
  {
    "text": "often parser can do this and finally our guarded in object data",
    "start": "447639",
    "end": "452979"
  },
  {
    "text": "provider type it's quite flexible and I love allow allows us to use a lot of",
    "start": "452979",
    "end": "460090"
  },
  {
    "text": "vector attacks so as a result we were able to use this gadget in almost all",
    "start": "460090",
    "end": "465909"
  },
  {
    "text": "our and Marshalls and formatters let's have a look on it closer so it's called",
    "start": "465909",
    "end": "473860"
  },
  {
    "text": "diagram that will cover a fresh method a refreshment that will invoke begin choir begin query will call query worker and",
    "start": "473860",
    "end": "480909"
  },
  {
    "text": "finally in invoke method earnest instance we can see line that you is that you'll call our arbitrary matter",
    "start": "480909",
    "end": "488880"
  },
  {
    "text": "here we can see example of JSON payload that will pop-up calculator in json dot",
    "start": "489240",
    "end": "496449"
  },
  {
    "text": "net parser this gadget offer us the next way to for",
    "start": "496449",
    "end": "505260"
  },
  {
    "text": "attack we can call non default constructor with own parameters we can a",
    "start": "505260",
    "end": "510890"
  },
  {
    "text": "[Music] in invoke method on unmarshal at object",
    "start": "510890",
    "end": "516270"
  },
  {
    "text": "or we can call any public method including instance including instant and",
    "start": "516270",
    "end": "523080"
  },
  {
    "text": "static ones these are our own parameters",
    "start": "523080",
    "end": "527960"
  },
  {
    "text": "Java has the own setter gadget as well after our our last year research on JDI",
    "start": "529070",
    "end": "535320"
  },
  {
    "text": "injection attacks we have found a few setters that called gene yellow cup",
    "start": "535320",
    "end": "541140"
  },
  {
    "text": "method by the way oracle recently disabled ami and corba vectors in",
    "start": "541140",
    "end": "546870"
  },
  {
    "text": "default configuration of java but LDAP vector still works so set session factor",
    "start": "546870",
    "end": "553710"
  },
  {
    "text": "jin-gi name in statistic service class we already mentioned about this in our",
    "start": "553710",
    "end": "558750"
  },
  {
    "text": "talk at blackhat 2016 very similar to it",
    "start": "558750",
    "end": "563850"
  },
  {
    "text": "is to string gadget from remote client use the transaction Clause and finally",
    "start": "563850",
    "end": "569610"
  },
  {
    "text": "set auto commit from already known gdb 0 set in pal class let's have a closer",
    "start": "569610",
    "end": "578130"
  },
  {
    "text": "look on it it is from GRE libraries so we don't require we don't need any",
    "start": "578130",
    "end": "584400"
  },
  {
    "text": "additional and dependencies as we can see on this slide cetera will call",
    "start": "584400",
    "end": "590250"
  },
  {
    "text": "connect function and here we will call initial contacts contacts to lock up",
    "start": "590250",
    "end": "597060"
  },
  {
    "text": "method with our value from data source name properties so we will get we will",
    "start": "597060",
    "end": "604650"
  },
  {
    "text": "get a remote code execution apart from mention at the gadget that",
    "start": "604650",
    "end": "611100"
  },
  {
    "text": "allow code execution by themselves we have a few other interesting gadget some",
    "start": "611100",
    "end": "618600"
  },
  {
    "text": "of them can be used as building blocks for a gadget chains like string template",
    "start": "618600",
    "end": "625590"
  },
  {
    "text": "to think in Java or buildings source said that a member in dotnet can be used",
    "start": "625590",
    "end": "631200"
  },
  {
    "text": "for arbitrary gutter call other can trigger non remote code execution attack",
    "start": "631200",
    "end": "636510"
  },
  {
    "text": "like inner XML in XML data document type or data view setting collections in in",
    "start": "636510",
    "end": "644490"
  },
  {
    "text": "that view manager type can be used for external XML entities attack in some",
    "start": "644490",
    "end": "650040"
  },
  {
    "text": "version of the.net framework and now we will switch back to our bar he will show",
    "start": "650040",
    "end": "657120"
  },
  {
    "text": "where we can use all these gadgets so we analyze a set of different JSON",
    "start": "657120",
    "end": "663900"
  },
  {
    "start": "660000",
    "end": "722000"
  },
  {
    "text": "libraries but for Java and.net and we were able to create arbitrary code execution in most of them as long as",
    "start": "663900",
    "end": "669570"
  },
  {
    "text": "they meet these three simple requirements so the first one is that the attacker needs to be able to control",
    "start": "669570",
    "end": "674880"
  },
  {
    "text": "the type the class name that is going to be reconstructed at the service agent type so normally that means that the",
    "start": "674880",
    "end": "682320"
  },
  {
    "text": "JSON will contain something some attribute like this underscore type dollar type class class name or",
    "start": "682320",
    "end": "688320"
  },
  {
    "text": "something like that that contains a value that looks like Java class name with a namespace or something like a",
    "start": "688320",
    "end": "695040"
  },
  {
    "text": "dotnet assembly or something like that and then the libraries will to instantiate that type the second",
    "start": "695040",
    "end": "700890"
  },
  {
    "text": "requirement is that the library need to invoke any method normally it will invoke setters but we saw before that it",
    "start": "700890",
    "end": "706290"
  },
  {
    "text": "can invoke some other methods and the third requirement is that the attacker needs to be able to find large enough",
    "start": "706290",
    "end": "713760"
  },
  {
    "text": "gadget space for the him to craft or assembly a cadet a chain leading to",
    "start": "713760",
    "end": "718920"
  },
  {
    "text": "arbitrary code execution so we categorize all the libraries what we",
    "start": "718920",
    "end": "725460"
  },
  {
    "start": "722000",
    "end": "874000"
  },
  {
    "text": "analyzed according to this categorization that is basically based on two different factors the first one",
    "start": "725460",
    "end": "731339"
  },
  {
    "text": "is whether these libraries include the format or they sorry the type discriminator by default or not for",
    "start": "731339",
    "end": "737400"
  },
  {
    "text": "example in this case you can see here that this is jason dotnet library and",
    "start": "737400",
    "end": "742980"
  },
  {
    "text": "contain this dollar type with something that looks like a donut namespace and then the second factor is how they",
    "start": "742980",
    "end": "750300"
  },
  {
    "text": "control which classes or which types are going to be instantiated during this realization some libraries",
    "start": "750300",
    "end": "756450"
  },
  {
    "text": "performed just a post this allocation caste operation which is basically or basically offers no protection at all",
    "start": "756450",
    "end": "762520"
  },
  {
    "text": "because by the time that you get the cast exception they say recession has completed and the pay load has been",
    "start": "762520",
    "end": "768370"
  },
  {
    "text": "executed so you are already in trouble and the other type control that most of",
    "start": "768370",
    "end": "775720"
  },
  {
    "text": "the libraries do is perform what we call the inspection of the expected type object graph which looks like a little",
    "start": "775720",
    "end": "782050"
  },
  {
    "text": "bit complex but is actually very simple the library will shape what is the specter type so for example the library",
    "start": "782050",
    "end": "788740"
  },
  {
    "text": "may be expecting a user type and then it will recursively analyze the object",
    "start": "788740",
    "end": "796780"
  },
  {
    "text": "graph and when they serialize in from the JSON data it will check if the expected type is a signal from what the",
    "start": "796780",
    "end": "804610"
  },
  {
    "text": "attacker or what the user is sending so for example if the user or the library expects a string if we provide something",
    "start": "804610",
    "end": "811930"
  },
  {
    "text": "like an object data provider that is our gadget then the library will throw an exception and will fail to digitize the",
    "start": "811930",
    "end": "817570"
  },
  {
    "text": "data some of the libraries in addition to this a sigma bility check will also",
    "start": "817570",
    "end": "823180"
  },
  {
    "text": "build a whitelist during construction time so at runtime when they see a licen",
    "start": "823180",
    "end": "828310"
  },
  {
    "text": "they will apply this whitelist and only those types that appear in the object graph at construction type will be",
    "start": "828310",
    "end": "834010"
  },
  {
    "text": "allowed to be the seer lies we found that these libraries are still vulnerable if the attacker can control",
    "start": "834010",
    "end": "839920"
  },
  {
    "text": "the expected type which is more common that you may think and we will see an example later or if the attacker can",
    "start": "839920",
    "end": "846940"
  },
  {
    "text": "find an entry point in this object graph so for example in this simple object graph all the elements in red are entry",
    "start": "846940",
    "end": "854050"
  },
  {
    "text": "points that the attacker can actually use to place their load at their payload",
    "start": "854050",
    "end": "859810"
  },
  {
    "text": "so that may be for example a system dot object type or a non-generic collection like a hash table or array list so in",
    "start": "859810",
    "end": "868000"
  },
  {
    "text": "our paper we have like a more detailed explanation of how to find these entry points in the epigraph so this is the",
    "start": "868000",
    "end": "875470"
  },
  {
    "start": "874000",
    "end": "994000"
  },
  {
    "text": "list of the libraries that we analyzed as you can see we have some of them that are donate and some of them are Java we",
    "start": "875470",
    "end": "882010"
  },
  {
    "text": "included the most popular ones like the JSON donate for donate and the deduction probably the most common or most popular",
    "start": "882010",
    "end": "889090"
  },
  {
    "text": "one for Java the ones in red are those that are vulnerable by default out of the box no matter what you do you",
    "start": "889090",
    "end": "895970"
  },
  {
    "text": "cannot protect them and make them safe for example fast Jason sweet Jason Jason",
    "start": "895970",
    "end": "901610"
  },
  {
    "text": "IO or Fleck station because they include the type discriminators or type names in the satellite data and because they",
    "start": "901610",
    "end": "909140"
  },
  {
    "text": "perform no type control at all except for this post DC allocation cast operation they will always be vulnerable",
    "start": "909140",
    "end": "916339"
  },
  {
    "text": "because they invoke a setters and then we will be we will be able to use our setter gadgets to get a bit recall",
    "start": "916339",
    "end": "921920"
  },
  {
    "text": "execution the one in yellow depends on how the developers configure the library",
    "start": "921920",
    "end": "927620"
  },
  {
    "text": "in order to for the attacker to be able to get arbitrary code execution or not so by default normally they don't",
    "start": "927620",
    "end": "933110"
  },
  {
    "text": "include the type information in the data and they perform an inspection of the expected object graph and you may think",
    "start": "933110",
    "end": "941060"
  },
  {
    "text": "that these two requirements are hard to meet at the same time or to find in a real application but it's actually the",
    "start": "941060",
    "end": "947570"
  },
  {
    "text": "opposite because if developers are sterilized in something that contains or our object profit of containing for",
    "start": "947570",
    "end": "952610"
  },
  {
    "text": "example a system data object or a java language yet they will need to enable these configuration settings to include",
    "start": "952610",
    "end": "958580"
  },
  {
    "text": "the type information because otherwise they won't be able to serialize that data the one in green JSON is actually",
    "start": "958580",
    "end": "965780"
  },
  {
    "text": "the one that we consider secure because there is one way of making it insecure but I mean you need to be Jimmy you need",
    "start": "965780",
    "end": "973400"
  },
  {
    "text": "to be able to or you want to make it vulnerable in purpose because it's very difficult and in addition as you can see",
    "start": "973400",
    "end": "978950"
  },
  {
    "text": "here it invokes no setters at all it uses reflection so you cannot use our Center gadgets you need to find new",
    "start": "978950",
    "end": "984950"
  },
  {
    "text": "gadgets for example in finalize methods or other methods that may carry invoke in this and so we consider it as kind of",
    "start": "984950",
    "end": "991100"
  },
  {
    "text": "secure library so let's see some of these libraries for example first Jason",
    "start": "991100",
    "end": "996500"
  },
  {
    "start": "994000",
    "end": "1019000"
  },
  {
    "text": "was one in the in the red category they always included type discriminators they perform in no type control at all so if",
    "start": "996500",
    "end": "1003370"
  },
  {
    "text": "you find an application using frustration with untrusted data you will be able to get arbitrary code execution",
    "start": "1003370",
    "end": "1008770"
  },
  {
    "text": "and that's what we found for example in this calico a content management system that was visualizing untrusted data",
    "start": "1008770",
    "end": "1015270"
  },
  {
    "text": "leading to arbitrary code execution then we have JavaScript serialize ER that is",
    "start": "1015270",
    "end": "1021220"
  },
  {
    "start": "1019000",
    "end": "1060000"
  },
  {
    "text": "one of the dotnet native serializers by default is secure because it not include the type information so it's",
    "start": "1021220",
    "end": "1027520"
  },
  {
    "text": "good but when calling the constructor as you can see here developers come pass a",
    "start": "1027520",
    "end": "1036160"
  },
  {
    "text": "type resolver if they do that these type information will be included in the",
    "start": "1036160",
    "end": "1041319"
  },
  {
    "text": "sterilized JSON data and would be processed when this arise in the data so that will make the library vulnerable",
    "start": "1041319",
    "end": "1046720"
  },
  {
    "text": "because this library performs no type control at all just this post DC allocation cast operation so again these",
    "start": "1046720",
    "end": "1053110"
  },
  {
    "text": "libraries can be used securely with untrusted data as long as you don't use any type resolver then we have data",
    "start": "1053110",
    "end": "1061030"
  },
  {
    "start": "1060000",
    "end": "1173000"
  },
  {
    "text": "contract Jason serializable and a different dotnet native rotation",
    "start": "1061030",
    "end": "1066850"
  },
  {
    "text": "sterilizer by well this is probably one of the most secure Jason de salida that",
    "start": "1066850",
    "end": "1072160"
  },
  {
    "text": "we've seen it performs that type aspect the type of the graph inspection but it",
    "start": "1072160",
    "end": "1077230"
  },
  {
    "text": "also builds this whitelist at construction time that is applied at runtime so finding an entry point is not",
    "start": "1077230",
    "end": "1083740"
  },
  {
    "text": "an option for this library and the other way that you can attack it and get arbitrary code execution is if you can",
    "start": "1083740",
    "end": "1090220"
  },
  {
    "text": "control the expected type you may think that something like this that the spec that time comes from a cookie and then",
    "start": "1090220",
    "end": "1096670"
  },
  {
    "text": "is used to initialize the satellizer is nothing in common but we will show you a",
    "start": "1096670",
    "end": "1102190"
  },
  {
    "text": "demo on a very common or rapidly popular content management system in don't net that does exactly does then we have",
    "start": "1102190",
    "end": "1109809"
  },
  {
    "text": "Jason donate that is probably the most popular dish on the net Jason satellizer for the net by default is secure because",
    "start": "1109809",
    "end": "1117640"
  },
  {
    "text": "it does not include type information but again developers can enable this type name handling setting which will make",
    "start": "1117640",
    "end": "1124600"
  },
  {
    "text": "the library include the type is a discriminator sort type information in the json serialize data so this is",
    "start": "1124600",
    "end": "1130360"
  },
  {
    "text": "another example by the way all these examples are from github so this is real code in this case the title is going to",
    "start": "1130360",
    "end": "1136600"
  },
  {
    "text": "be set alight at his message contains this body property with his system object so because of that as I said",
    "start": "1136600",
    "end": "1143230"
  },
  {
    "text": "before developers will be forced to enable this type name handling setting that will force the library to include",
    "start": "1143230",
    "end": "1149440"
  },
  {
    "text": "the type information because otherwise add this allocation type it won't know to which type visualize that data",
    "start": "1149440",
    "end": "1157580"
  },
  {
    "text": "so this library will invoke set-aside realisable constructor callbacks even",
    "start": "1157580",
    "end": "1162619"
  },
  {
    "text": "some custom call box type converters so you can use a very broad set of Cadets",
    "start": "1162619",
    "end": "1168499"
  },
  {
    "text": "to get arbitrary code execution portation today okay so let's see one",
    "start": "1168499",
    "end": "1173899"
  },
  {
    "start": "1173000",
    "end": "1339000"
  },
  {
    "text": "example of an application or in this case a framework that is using JSON dotnet in an insecure way so we can we",
    "start": "1173899",
    "end": "1180679"
  },
  {
    "text": "were able to get a baterry call execution so this is bris this is a beta management framework which basically",
    "start": "1180679",
    "end": "1187539"
  },
  {
    "text": "exposes a REST API for both JavaScript and dotnet clients to connect and",
    "start": "1187539",
    "end": "1193460"
  },
  {
    "text": "perform like entity management operation like adding new records deleting records",
    "start": "1193460",
    "end": "1199549"
  },
  {
    "text": "updating records and so on it's kind of popular in the.net work and if we look",
    "start": "1199549",
    "end": "1205549"
  },
  {
    "text": "at the source code we will see that they use JSON dotnet as the global stabilizer",
    "start": "1205549",
    "end": "1210609"
  },
  {
    "text": "this JSON dotnet is configured to use this type name handling object which",
    "start": "1210609",
    "end": "1217279"
  },
  {
    "text": "means that when satirising system object properties they will include the type",
    "start": "1217279",
    "end": "1222499"
  },
  {
    "text": "information now if we check the source code we will see that at some point the",
    "start": "1222499",
    "end": "1228789"
  },
  {
    "text": "JSON donut satellizer is used to deserialize untrusted data and the expected type in this case is safe",
    "start": "1228789",
    "end": "1234950"
  },
  {
    "text": "option if we perform this inspection of the expected type of the graph that looks like very complex but it's nothing",
    "start": "1234950",
    "end": "1241309"
  },
  {
    "text": "I'll start looking at the expected type object graph in this case very simple and we can see that it contains attack",
    "start": "1241309",
    "end": "1248029"
  },
  {
    "text": "property that is system object so we will be able to place our payload in this property and get arbitrary code",
    "start": "1248029",
    "end": "1255739"
  },
  {
    "text": "execution so let's see that in action this is one of the sample application that comes with with breeze it's a",
    "start": "1255739",
    "end": "1263269"
  },
  {
    "text": "sample application that lets you update or create new car models just something",
    "start": "1263269",
    "end": "1268789"
  },
  {
    "text": "simple to teach developers so if we send like this change for the car model name",
    "start": "1268789",
    "end": "1275679"
  },
  {
    "text": "we will see that in our request we have the change of the model name like",
    "start": "1275679",
    "end": "1282950"
  },
  {
    "text": "Mustang 2 and then an empty dictionary with that is called safe options if we",
    "start": "1282950",
    "end": "1289490"
  },
  {
    "text": "send this request in the response we will see",
    "start": "1289490",
    "end": "1294559"
  },
  {
    "text": "this dollar type attribute with something that looks like a Jason donate cell ice type so this is a good",
    "start": "1294559",
    "end": "1301340"
  },
  {
    "text": "indicator that this application is vulnerable so now we're going to use our object data provider setter gadget in",
    "start": "1301340",
    "end": "1307970"
  },
  {
    "text": "order to call the process dot a start method and pop up a calculator so we",
    "start": "1307970",
    "end": "1313880"
  },
  {
    "text": "will copy and replace this empty safe options dictionary with our payload and",
    "start": "1313880",
    "end": "1322360"
  },
  {
    "text": "if we send it well let's check that the victim server is not running the calculator of course if we send it we",
    "start": "1322360",
    "end": "1329960"
  },
  {
    "text": "will get our calculator thank you so we",
    "start": "1329960",
    "end": "1340190"
  },
  {
    "start": "1339000",
    "end": "1391000"
  },
  {
    "text": "wanted to give a shot shout out to Morris Bachelor that is a recognized",
    "start": "1340190",
    "end": "1345350"
  },
  {
    "text": "data security researcher he published similar research on May 22 aware after",
    "start": "1345350",
    "end": "1350600"
  },
  {
    "text": "our research was finished and published and accepted for black hat and DEF CON",
    "start": "1350600",
    "end": "1356110"
  },
  {
    "text": "but he serves the same kind of premises and conclusions he focuses exclusively",
    "start": "1356110",
    "end": "1361700"
  },
  {
    "text": "on java and he overlaps with our research in both the jackson and this one i or libraries although for today",
    "start": "1361700",
    "end": "1367820"
  },
  {
    "text": "Shanaya he founds a completely different vector and here he also overlaps with us in this JDBC rosette imple Gardea that",
    "start": "1367820",
    "end": "1375530"
  },
  {
    "text": "was kind of no views choice because it was previously used in the Java devastation world but he also found a",
    "start": "1375530",
    "end": "1382520"
  },
  {
    "text": "very interesting gadget in spring libraries another library so if you are more interested in the java version of this talk less go and check his his",
    "start": "1382520",
    "end": "1390020"
  },
  {
    "text": "research and now Alice will switch gears and move into the dotnet section let's",
    "start": "1390020",
    "end": "1397549"
  },
  {
    "start": "1391000",
    "end": "1400000"
  },
  {
    "text": "back to the dead dotnet world potential security problems in binary",
    "start": "1397549",
    "end": "1403669"
  },
  {
    "text": "format and data contracts aerolizer where knows were known for the years",
    "start": "1403669",
    "end": "1409160"
  },
  {
    "text": "for example great work of James for flow about weaknesses and main attack vectors",
    "start": "1409160",
    "end": "1416780"
  },
  {
    "text": "in net formatters was presented and black",
    "start": "1416780",
    "end": "1423170"
  },
  {
    "text": "hat 2012 so five years ago anyway we",
    "start": "1423170",
    "end": "1428570"
  },
  {
    "text": "could not find a good remote code execution gadget chain there was one",
    "start": "1428570",
    "end": "1433640"
  },
  {
    "text": "published by by florian gold here but it uses memory corruption so it's quite",
    "start": "1433640",
    "end": "1441290"
  },
  {
    "text": "difficult to build universal exploit for different version of windows but we were",
    "start": "1441290",
    "end": "1447770"
  },
  {
    "text": "sure that there should be a lot of way to get code execution during dotnet this realization so we spent some our time",
    "start": "1447770",
    "end": "1456770"
  },
  {
    "text": "for searching cells guarded and have found one that can be used in binary format or some another other dotnet",
    "start": "1456770",
    "end": "1465380"
  },
  {
    "text": "formatters but after our talk our work was ready and talk was accepted by black",
    "start": "1465380",
    "end": "1471890"
  },
  {
    "text": "hat is the same james forceful published a couple remote code execution execution",
    "start": "1471890",
    "end": "1477920"
  },
  {
    "text": "gadget for binary for matter as he is owned as part of his own research by the",
    "start": "1477920",
    "end": "1485690"
  },
  {
    "text": "vein not connected with with jason or our talks anyway you could find details",
    "start": "1485690",
    "end": "1492080"
  },
  {
    "text": "about this guarded in on his post-op on google project zero block here we will",
    "start": "1492080",
    "end": "1498590"
  },
  {
    "text": "focus on our own we will use PS object",
    "start": "1498590",
    "end": "1503930"
  },
  {
    "text": "type this type is from powershell libraries so are available is available on almost all windows machine and before",
    "start": "1503930",
    "end": "1512600"
  },
  {
    "text": "we go further there are a couple remarks about this gadget in first version of",
    "start": "1512600",
    "end": "1518030"
  },
  {
    "text": "powershell this type is not serializable so it's not suitable for attack but all",
    "start": "1518030",
    "end": "1523310"
  },
  {
    "text": "modern web version of windows starting from a Windows 8 and Windows 2000 server",
    "start": "1523310",
    "end": "1528320"
  },
  {
    "text": "2012 are shipped with newer and vulnerable version also if you updated",
    "start": "1528320",
    "end": "1534080"
  },
  {
    "text": "your PowerShell in on older Windows version and this problem is",
    "start": "1534080",
    "end": "1539570"
  },
  {
    "text": "relevant for you as well next remark we we reported this problem",
    "start": "1539570",
    "end": "1547940"
  },
  {
    "text": "to Microsoft and two weeks ago they released a fix so if you are not",
    "start": "1547940",
    "end": "1553039"
  },
  {
    "text": "ignoring their updates you are safe so Pierce object it uses custom digitizer and in case of tea I am",
    "start": "1553039",
    "end": "1560659"
  },
  {
    "text": "instance it will call GIM instance rehydrate see I am instance property",
    "start": "1560659",
    "end": "1569769"
  },
  {
    "text": "here we can see that attacker is able to specify own type as element type of",
    "start": "1569769",
    "end": "1576649"
  },
  {
    "text": "array and the sterilizer will try to deconstruct object of this type for",
    "start": "1576649",
    "end": "1583929"
  },
  {
    "text": "finding proper way to do this it will use a figure conversion method it's",
    "start": "1583929",
    "end": "1589250"
  },
  {
    "text": "quite interesting for attacker us there a lot of option to attack and we",
    "start": "1589250",
    "end": "1594590"
  },
  {
    "text": "highlighted only the most obvious one we can call a concern on default constructor with one argument and we can",
    "start": "1594590",
    "end": "1601730"
  },
  {
    "text": "control this argument we can invoke setters on public properties so we can",
    "start": "1601730",
    "end": "1610279"
  },
  {
    "text": "use mention it earlier gadgets or we can",
    "start": "1610279",
    "end": "1615350"
  },
  {
    "text": "call static public parts method of arbitrary type let's try to use this one",
    "start": "1615350",
    "end": "1623350"
  },
  {
    "text": "as we said earlier some reader parts can be used for arbitrary method invocation",
    "start": "1627770",
    "end": "1635800"
  },
  {
    "text": "here we can see a payload that we'll call process start with our argument we",
    "start": "1635800",
    "end": "1643520"
  },
  {
    "text": "can notice nine space assembly type",
    "start": "1643520",
    "end": "1648760"
  },
  {
    "text": "method name and finally calc as our argument",
    "start": "1648760",
    "end": "1654970"
  },
  {
    "text": "apart from already mentioned binary format and net data contract serializer",
    "start": "1655660",
    "end": "1661090"
  },
  {
    "text": "dotnet offers a lot of other formatters unfortunately we don't have enough time",
    "start": "1661090",
    "end": "1667280"
  },
  {
    "text": "to cover to provide the talat view of each of them so we will briefly cover",
    "start": "1667280",
    "end": "1675170"
  },
  {
    "text": "them in today today talk and if you are interested in deeper analysis we can",
    "start": "1675170",
    "end": "1681980"
  },
  {
    "text": "offer our white paper as good source so we can group them in two big groups for",
    "start": "1681980",
    "end": "1688580"
  },
  {
    "text": "matters that are vulnerable in default configuration like binary format absorb format net data contract serializer also",
    "start": "1688580",
    "end": "1695870"
  },
  {
    "text": "we can adhere for matters that internally use them like object state",
    "start": "1695870",
    "end": "1701720"
  },
  {
    "text": "formatter loss formatter binary message format they should not be used for the",
    "start": "1701720",
    "end": "1707000"
  },
  {
    "text": "serialization of an untrusted data or you have to proper configure them to limit available types for example use",
    "start": "1707000",
    "end": "1714410"
  },
  {
    "text": "restricted type resolver with whitelisted types the second group is",
    "start": "1714410",
    "end": "1721120"
  },
  {
    "text": "for matters that are safe in the full configuration like XML sterilizer data",
    "start": "1721120",
    "end": "1727760"
  },
  {
    "text": "contract sterilizer and data contract JSON sterilizer but if you are using",
    "start": "1727760",
    "end": "1733270"
  },
  {
    "text": "weak data contractor resolver by the way we have found such examples even in",
    "start": "1733270",
    "end": "1739700"
  },
  {
    "text": "official Microsoft documentation or attacker is able to control expected",
    "start": "1739700",
    "end": "1745940"
  },
  {
    "text": "type you have a very serious security problem and we will show a bit later how",
    "start": "1745940",
    "end": "1752090"
  },
  {
    "text": "that in this case code execution in",
    "start": "1752090",
    "end": "1757490"
  },
  {
    "text": "Israel even for the most Limited for matters like for example XML",
    "start": "1757490",
    "end": "1762860"
  },
  {
    "text": "serializing now we will switch back to Alvaro and he will show our next demo so",
    "start": "1762860",
    "end": "1770570"
  },
  {
    "start": "1770000",
    "end": "1920000"
  },
  {
    "text": "because demo is probably worth of thousands lights let's see how can we",
    "start": "1770570",
    "end": "1775760"
  },
  {
    "text": "use our PS object Katya - Casper mode remote code execution on any application",
    "start": "1775760",
    "end": "1781150"
  },
  {
    "text": "build using this Nancy framework so for those of you that are not familiar with",
    "start": "1781150",
    "end": "1786380"
  },
  {
    "text": "Nancy's our web application framework for the.net world that is very similarly inspired by the Ruby Sinatra framework",
    "start": "1786380",
    "end": "1793690"
  },
  {
    "text": "they offer some security features like for example C soft protection which is",
    "start": "1793690",
    "end": "1799340"
  },
  {
    "text": "good but in order to protect against sis our protection SSR they open the doors",
    "start": "1799340",
    "end": "1805580"
  },
  {
    "text": "to remote code execution which is not that good in this case what they were doing were basically setting this unique",
    "start": "1805580",
    "end": "1812360"
  },
  {
    "text": "body that we used to protect against itself instead of putting that value directly into the cookie they were",
    "start": "1812360",
    "end": "1817850"
  },
  {
    "text": "putting that as the property of a class and then said arise in that class into the cookie and then do not send in the",
    "start": "1817850",
    "end": "1824180"
  },
  {
    "text": "cookie over the the wire so what we were able to get pre authenticated remote",
    "start": "1824180",
    "end": "1829820"
  },
  {
    "text": "code execution on any application built using Nancy and let's see well this is",
    "start": "1829820",
    "end": "1835760"
  },
  {
    "text": "actually the payload that is basics different coded if you find this eh-eh-eh D magic number in any of your",
    "start": "1835760",
    "end": "1842720"
  },
  {
    "text": "pen test then you do get remote code execution so this is a sample",
    "start": "1842720",
    "end": "1849170"
  },
  {
    "text": "application that we built using Nancy very simple if we take the cookies for",
    "start": "1849170",
    "end": "1856010"
  },
  {
    "text": "this application that this application is set in in our browser we will see this NC star cookie which contain these",
    "start": "1856010",
    "end": "1863120"
  },
  {
    "text": "magic numbers so we were like oh this is code execution nice now if we check the",
    "start": "1863120",
    "end": "1868940"
  },
  {
    "text": "source code we can see that this same value is also included as a hidden field",
    "start": "1868940",
    "end": "1874400"
  },
  {
    "text": "for this form so this is making this kind of data submission of the CSR",
    "start": "1874400",
    "end": "1880310"
  },
  {
    "text": "cookie now we will be used in our PS object code yet now because it's a fixed",
    "start": "1880310",
    "end": "1886460"
  },
  {
    "text": "by Microsoft you can use any of the gems for circuits instead so they will work as well as",
    "start": "1886460",
    "end": "1892229"
  },
  {
    "text": "and if we replace the cookie with our PS object Katya that is configured to pop",
    "start": "1892229",
    "end": "1897459"
  },
  {
    "text": "up a calculator and we just submit the form we can see that there is no",
    "start": "1897459",
    "end": "1902649"
  },
  {
    "text": "calculator again and if we send and submit the request we will get a 505",
    "start": "1902649",
    "end": "1909159"
  },
  {
    "text": "exception but no problem because we got our calculators running thank you",
    "start": "1909159",
    "end": "1919759"
  },
  {
    "text": "so we wanted to highlight that this is not a problem in Jason this is not a",
    "start": "1919759",
    "end": "1924960"
  },
  {
    "start": "1920000",
    "end": "1931000"
  },
  {
    "text": "problem in XML or for example in Java visualization or binary formatted for the net this is actually something that",
    "start": "1924960",
    "end": "1932100"
  },
  {
    "text": "is a problem in sterilizers themselves so most or if not all of the serial isit",
    "start": "1932100",
    "end": "1938070"
  },
  {
    "text": "will need to reconstruct those objects during this allocation and if you find that these serial icers are worth",
    "start": "1938070",
    "end": "1946320"
  },
  {
    "text": "satisfying these three requirement that we mentioned before so including including type information in the",
    "start": "1946320",
    "end": "1951360"
  },
  {
    "text": "sterilized data i invoking methods on those reconstructed objects and then",
    "start": "1951360",
    "end": "1956570"
  },
  {
    "text": "with some large enough cutted space for the attackers to assembly gadget",
    "start": "1956570",
    "end": "1963149"
  },
  {
    "text": "changing into arbitrary code execution then you will be able to attack any format in any language that you will",
    "start": "1963149",
    "end": "1969240"
  },
  {
    "text": "find also because most of the library libraries will invoke setters the katia",
    "start": "1969240",
    "end": "1975299"
  },
  {
    "text": "table we presented here today object data provided and the JDBC row setting imple can be used to attack most of the",
    "start": "1975299",
    "end": "1981899"
  },
  {
    "text": "CLI sirs out there that satisfy these dis requirements so we found many we",
    "start": "1981899",
    "end": "1988169"
  },
  {
    "start": "1986000",
    "end": "2083000"
  },
  {
    "text": "review many formats and we found many of them vulnerables we want to highlight these three because well we don't have",
    "start": "1988169",
    "end": "1994590"
  },
  {
    "text": "time for more for example FSP clear and subsidizes our dotnet c realises that work not just",
    "start": "1994590",
    "end": "2001549"
  },
  {
    "text": "with a donut framework but also with dotnet core silverlight windows mobile phone so developers may choose these",
    "start": "2001549",
    "end": "2008570"
  },
  {
    "text": "serializers over the native ones when working for example in silverlight or whatever so both of them include type",
    "start": "2008570",
    "end": "2015230"
  },
  {
    "text": "information by default both of them invoke setters and will FSP clear performs an inspection of the object",
    "start": "2015230",
    "end": "2021379"
  },
  {
    "text": "graph inspection of object spectrograph expect the type of the graph but so you",
    "start": "2021379",
    "end": "2027529"
  },
  {
    "text": "will need to find these entry points but subsidy eliezer performs no type control at all which means that it cannot be",
    "start": "2027529",
    "end": "2033769"
  },
  {
    "text": "used with untrusted data at all then we have wire that is now known as Hyperion and is the steriliser for a cadet akka",
    "start": "2033769",
    "end": "2041629"
  },
  {
    "text": "doughnuts basically the total net version of the famous s Colin and Java framework to deal with concurrency using",
    "start": "2041629",
    "end": "2049520"
  },
  {
    "text": "a dis actor based models which basically these factors communicate exchanging",
    "start": "2049520",
    "end": "2054888"
  },
  {
    "text": "messages that are satellites with taste on the net using the insecure configuration that we saw you before",
    "start": "2054889",
    "end": "2060260"
  },
  {
    "text": "this type name handling equals all however you can enable this new customs they realize that they implemented that",
    "start": "2060260",
    "end": "2066618"
  },
  {
    "text": "is called Hyperion that also includes type discriminators also invoke setters",
    "start": "2066619",
    "end": "2071868"
  },
  {
    "text": "and also performs no type control at all so if you can send any message to an",
    "start": "2071869",
    "end": "2077329"
  },
  {
    "text": "Academy net or akka actors you will be able to get remote code execution as well",
    "start": "2077329",
    "end": "2083108"
  },
  {
    "start": "2083000",
    "end": "2318000"
  },
  {
    "text": "also beware of rolling your own format this is like crypto right for example Nancy the framework that we",
    "start": "2083109",
    "end": "2089809"
  },
  {
    "text": "saw before they decided to move away from binary format because binary format was not going to be included in the",
    "start": "2089809",
    "end": "2095628"
  },
  {
    "text": "first version of.net core so they implemented their own JSON parser so what can go wrong",
    "start": "2095629",
    "end": "2101839"
  },
  {
    "text": "well they included this type object discriminator so attacker can control",
    "start": "2101839",
    "end": "2108859"
  },
  {
    "text": "the type and they invoke setters so we were also able to get arbitrary code execution in these pre-released to the",
    "start": "2108859",
    "end": "2115670"
  },
  {
    "text": "text version well it was released as a beta but it was not like the official version and then we also found one of",
    "start": "2115670",
    "end": "2123140"
  },
  {
    "text": "the most popular CMS for the.net world that is called the DotNetNuke beginning or if not the most popular library which",
    "start": "2123140",
    "end": "2131450"
  },
  {
    "text": "uses XML serialization to serialize untrusted data and in this",
    "start": "2131450",
    "end": "2137240"
  },
  {
    "text": "case for example the value in a request cooking what they wanted to use XML",
    "start": "2137240",
    "end": "2143780"
  },
  {
    "text": "serialization with arbitrary types so in order to do that they created this wrapper around XML sterilizer so they",
    "start": "2143780",
    "end": "2150470"
  },
  {
    "text": "send the type that is going to be like the Spector type and then the payload for the XML serialization",
    "start": "2150470",
    "end": "2158319"
  },
  {
    "text": "XML I'd say there I said is the most limited by far serial I said in the donut family so it",
    "start": "2158750",
    "end": "2164900"
  },
  {
    "text": "was like a challenge for us if we were able to get a better recall execution in this case we were sure like like we can",
    "start": "2164900",
    "end": "2171440"
  },
  {
    "text": "do that for any other libraries so we wanted to use our object beta providers data and gadget and well best so far so",
    "start": "2171440",
    "end": "2180290"
  },
  {
    "text": "good because it's XML satellizer friendly I see realized by XML is realizing no problem at all however if we want to",
    "start": "2180290",
    "end": "2187470"
  },
  {
    "text": "invoke processes of the start then we will get our first problem because process contains interface member and",
    "start": "2187470",
    "end": "2194550"
  },
  {
    "text": "for example XML serialization is very limited as I said it cannot settle eyes types with interface members it cannot",
    "start": "2194550",
    "end": "2200820"
  },
  {
    "text": "serialize types we have system dot type properties for example and many other limitations so we couldn't use the",
    "start": "2200820",
    "end": "2208050"
  },
  {
    "text": "process daughter start as the final cut yet however this was easily solved because we can use our summer reader load cut",
    "start": "2208050",
    "end": "2215520"
  },
  {
    "text": "yet or the object state formatter this I realized in order to get remote code execution or even better you can",
    "start": "2215520",
    "end": "2221130"
  },
  {
    "text": "actually search the target application class path for interesting gadgets and the guy is at DotNetNuke were kind",
    "start": "2221130",
    "end": "2228030"
  },
  {
    "text": "enough to provide us with this file system use class that contains methods",
    "start": "2228030",
    "end": "2233190"
  },
  {
    "text": "that are very convenient to deploy web web cells or to read flyers and put the response the data into the HTTP response",
    "start": "2233190",
    "end": "2240660"
  },
  {
    "text": "so that problem was solved no problems so far now when XML said I said builds",
    "start": "2240660",
    "end": "2247770"
  },
  {
    "text": "one of these white list that we talked about before so a construction type it",
    "start": "2247770",
    "end": "2253560"
  },
  {
    "text": "will see that the object data provided contains a system dot object property so it will include system dot object as the",
    "start": "2253560",
    "end": "2259950"
  },
  {
    "text": "in the white list but a runtime we will be providing something else we will be providing the sun'll reader or maybe the",
    "start": "2259950",
    "end": "2267089"
  },
  {
    "text": "file system units or maybe these object state format have something else right so these types won't be in the white",
    "start": "2267089",
    "end": "2274470"
  },
  {
    "text": "list and so the XML serializable prevent the visualisation of these types so we",
    "start": "2274470",
    "end": "2280830"
  },
  {
    "text": "needed to fool xml cell i satellizer into including these types into the white list and the way they we did it",
    "start": "2280830",
    "end": "2287910"
  },
  {
    "text": "was basically using this expected type which is basically basically a parameterized type and in the",
    "start": "2287910",
    "end": "2294930"
  },
  {
    "text": "parameterized type we're using we're placing our runtime types so these are",
    "start": "2294930",
    "end": "2301020"
  },
  {
    "text": "going to be included in the white list and when we send our payload it will work like a term so let's see that in",
    "start": "2301020",
    "end": "2309570"
  },
  {
    "text": "action as we said we were able to get a bit rowdy code execution pre authentication on any instance of the",
    "start": "2309570",
    "end": "2315300"
  },
  {
    "text": "dotnetnuke see and well this is the source code leading",
    "start": "2315300",
    "end": "2321180"
  },
  {
    "text": "to the vulnerability the source is in in this piece of code that gets executed for example in many cases but one of the",
    "start": "2321180",
    "end": "2328200"
  },
  {
    "text": "cases is when visiting the 404 page the error page so at that time this DNN",
    "start": "2328200",
    "end": "2334860"
  },
  {
    "text": "personalization cookie is going to be read and then pass to this DISA realized hash table XML method then here will",
    "start": "2334860",
    "end": "2343590"
  },
  {
    "text": "basically extract the type from the XML cookie and then use that type to build",
    "start": "2343590",
    "end": "2350100"
  },
  {
    "text": "our XML sterilizer so the attacker can control the expected type remember I told you that this is more common that",
    "start": "2350100",
    "end": "2355380"
  },
  {
    "text": "amazing here's an example and then it's this year they serialize in the rest of",
    "start": "2355380",
    "end": "2361320"
  },
  {
    "text": "the cookie so this is how a regular cookie looks like it contains the",
    "start": "2361320",
    "end": "2367890"
  },
  {
    "text": "expected type and then this blue box here is the payload for the XML",
    "start": "2367890",
    "end": "2373230"
  },
  {
    "text": "sterilizer and this is how our our payload looks like a little bit",
    "start": "2373230",
    "end": "2378390"
  },
  {
    "text": "different so here the expected type is this parameter S type and here here we",
    "start": "2378390",
    "end": "2384630"
  },
  {
    "text": "are telling XML Iser to include these types into the whitelist then we will",
    "start": "2384630",
    "end": "2390960"
  },
  {
    "text": "use this file system users class to download our webster deploy it in the I",
    "start": "2390960",
    "end": "2396150"
  },
  {
    "text": "is root directory and we will be able to deploy our Watson so let's see a video",
    "start": "2396150",
    "end": "2403770"
  },
  {
    "start": "2402000",
    "end": "2441000"
  },
  {
    "text": "of that so this is the out-of-the-box installation of DNN if we visit a",
    "start": "2403770",
    "end": "2412020"
  },
  {
    "text": "non-existent page we will get our 404 error page that will force the",
    "start": "2412020",
    "end": "2418620"
  },
  {
    "text": "processing of the DNN personalization cookie so we will send this page this",
    "start": "2418620",
    "end": "2424410"
  },
  {
    "text": "request to burp we will capture it and",
    "start": "2424410",
    "end": "2429980"
  },
  {
    "text": "because it's by default is not including this cookie even if it's processing the",
    "start": "2429980",
    "end": "2435120"
  },
  {
    "text": "cookies not including it we will include it we will write here our dnm personalization cookie and then we will",
    "start": "2435120",
    "end": "2441600"
  },
  {
    "start": "2441000",
    "end": "2465000"
  },
  {
    "text": "paste the XML payload that I just showed you basically it's invoking the pool file",
    "start": "2441600",
    "end": "2448049"
  },
  {
    "text": "method of the file system Uriel's class to download our website and deploy it in",
    "start": "2448049",
    "end": "2453269"
  },
  {
    "text": "the big team server so let's format this",
    "start": "2453269",
    "end": "2460019"
  },
  {
    "text": "a little bit now if we go to the victim server we will check that the cell aspx",
    "start": "2460019",
    "end": "2466559"
  },
  {
    "start": "2465000",
    "end": "2477000"
  },
  {
    "text": "file that we are going to download is not existing here if we send the if we",
    "start": "2466559",
    "end": "2474839"
  },
  {
    "text": "send the request it will be downloaded and we will get the cell available for the attacker to interact with the with a",
    "start": "2474839",
    "end": "2481199"
  },
  {
    "text": "system so at this point the attacker can just use the web cell as I said to interact with the system install metal /",
    "start": "2481199",
    "end": "2488069"
  },
  {
    "text": "tear or whatever they want to use thank",
    "start": "2488069",
    "end": "2493199"
  },
  {
    "text": "you and just to wrap up as I said before this is not a problem in JSON or XML or",
    "start": "2493199",
    "end": "2500519"
  },
  {
    "start": "2497000",
    "end": "2555000"
  },
  {
    "text": "Java DC allocation this is a problem in sterilizers themselves so try to avoid",
    "start": "2500519",
    "end": "2505759"
  },
  {
    "text": "visualizing entrusted data with any formatter even if you think it's secure but if you have to try to get that",
    "start": "2505759",
    "end": "2511799"
  },
  {
    "text": "library evaluated from a security point of view by your security expert of",
    "start": "2511799",
    "end": "2517589"
  },
  {
    "text": "choice and try avoiding libraries that performs no type control like the ones",
    "start": "2517589",
    "end": "2522660"
  },
  {
    "text": "that we saw that I've just do in a post a civilization caste also try to avoid those libraries that they are including",
    "start": "2522660",
    "end": "2529079"
  },
  {
    "text": "type information in the sterilized data because that's not sufficient to get arbitrary code execution but is a good",
    "start": "2529079",
    "end": "2534599"
  },
  {
    "text": "indicator that they it may lead to arbitrary code execution also don't let",
    "start": "2534599",
    "end": "2540539"
  },
  {
    "text": "the users control the expected type of any initializer because they will be able to control the object graph",
    "start": "2540539",
    "end": "2546900"
  },
  {
    "text": "inspection and they will be able to place anything there and that's what not least try to not roll your own format if",
    "start": "2546900",
    "end": "2552809"
  },
  {
    "text": "you don't know what you're doing so with that thank you very much what's a pleasure and if you have any",
    "start": "2552809",
    "end": "2559709"
  },
  {
    "start": "2555000",
    "end": "2589000"
  },
  {
    "text": "questions I think we have like 5 times 5 minutes 5 minutes questions please go to",
    "start": "2559709",
    "end": "2567989"
  },
  {
    "text": "the to the mics I think in the aisles no questions",
    "start": "2567989",
    "end": "2575029"
  },
  {
    "text": "also we will be publishing the white paper it will be published today in the",
    "start": "2575090",
    "end": "2580380"
  },
  {
    "text": "black hat side so does make sure that you check it out it contains a lot of information on details okay so thank you",
    "start": "2580380",
    "end": "2587850"
  },
  {
    "text": "very much [Applause]",
    "start": "2587850",
    "end": "2591859"
  }
]