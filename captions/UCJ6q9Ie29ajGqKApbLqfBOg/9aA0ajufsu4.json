[
  {
    "text": "thank you everyone for coming and um so today we're going to talk about how we",
    "start": "2679",
    "end": "8120"
  },
  {
    "text": "Pawn Google Chrome and Microsoft Edge at Ponto Vancouver 2024 uh so let's knock on chrom Shell by",
    "start": "8120",
    "end": "14839"
  },
  {
    "text": "letting the cash cash and the web assembly assemble uh so first quick words about",
    "start": "14839",
    "end": "20279"
  },
  {
    "text": "us we are two security researchers from palot networks and um we are working on",
    "start": "20279",
    "end": "25560"
  },
  {
    "text": "offensive and defensive research we are P winners and we have spoken to many conferences in the",
    "start": "25560",
    "end": "32238"
  },
  {
    "text": "past so in this talk we'll first introduce um uh Google Chrome explore",
    "start": "32239",
    "end": "37399"
  },
  {
    "text": "chain based on V8 ven abilities and how they evolved since the introduction of the V8 sandbox then we'll talk about the",
    "start": "37399",
    "end": "44680"
  },
  {
    "text": "book we used at ponton and how we actually exploited it uh in the third part we'll talk about the vet box and",
    "start": "44680",
    "end": "51160"
  },
  {
    "text": "how we escaped it to get render code execution uh and then we'll end by giving you a summary and some takeaways",
    "start": "51160",
    "end": "58359"
  },
  {
    "text": "uh and a quick demo of the exploitation on Chrome and maof Edge so let's start by taking a look at",
    "start": "58359",
    "end": "66000"
  },
  {
    "text": "what typical V exposion targeting Google Chrome without the VH sandbox uh is",
    "start": "66000",
    "end": "71240"
  },
  {
    "text": "looking like um so first you will need a VH viability that will lead to memory",
    "start": "71240",
    "end": "76320"
  },
  {
    "text": "corruption uh that memory corruption you will need to transform it into some arbitrary uh read WR uh that will uh",
    "start": "76320",
    "end": "83640"
  },
  {
    "text": "give you render code execution from there uh you still need to find a chrome sandbox Bypass or a viability in the",
    "start": "83640",
    "end": "91040"
  },
  {
    "text": "kernel in order to get some code execution outside of chrome uh now with the V8 sandbox on um",
    "start": "91040",
    "end": "99000"
  },
  {
    "text": "so you still need to get still need to get the V viability that will lead you to have some arbitrary read R Primitives",
    "start": "99000",
    "end": "106200"
  },
  {
    "text": "but that Primitives will actually be inside the V8 sandbox so here you need a V8 sandbox escape to get uh exploit",
    "start": "106200",
    "end": "113240"
  },
  {
    "text": "Primitives outside of it and get render Cod execution finally you still need to",
    "start": "113240",
    "end": "118600"
  },
  {
    "text": "go through the uh Chrome sandb Bypass or the O OS availability in order to get",
    "start": "118600",
    "end": "123640"
  },
  {
    "text": "code outside of chrome sandbox a quick word about the V8 sandbox we'll talk uh in more details",
    "start": "123640",
    "end": "130520"
  },
  {
    "text": "about it later during that talk but uh before the V8 sandbox bet release which was in March of this year uh all the",
    "start": "130520",
    "end": "137319"
  },
  {
    "text": "publicly available uh techniques that were used to escape the sandbox were using row pointers that were stored",
    "start": "137319",
    "end": "143640"
  },
  {
    "text": "inside the sandbox but since the Beta release all the pointers were removed from the sandbox so for Pon One win we",
    "start": "143640",
    "end": "150720"
  },
  {
    "text": "needed to find a new way to actually Escape it so through that talk we're going to",
    "start": "150720",
    "end": "156680"
  },
  {
    "text": "go through all those steps here and that's those steps that gave us the win at",
    "start": "156680",
    "end": "162280"
  },
  {
    "text": "ponon let's begin by talking about the vulnerability and um first we'll go",
    "start": "162280",
    "end": "167720"
  },
  {
    "text": "through some of the basics that are required to understand properly what's the viability about so let's create an",
    "start": "167720",
    "end": "173760"
  },
  {
    "text": "object uh one with uh five properties a b c d and e and values 1 2 3 4 five uh",
    "start": "173760",
    "end": "181080"
  },
  {
    "text": "in memory the object will look like that uh as you can see there are the values 1 2 3 4 and those are actually the",
    "start": "181080",
    "end": "187599"
  },
  {
    "text": "property values stored inside the object so they are the inob property values uh",
    "start": "187599",
    "end": "192920"
  },
  {
    "text": "the rest of the properties will be stored inside a property store outside of the the object another very crucial",
    "start": "192920",
    "end": "200040"
  },
  {
    "text": "field here in the object is its map it's basically defining the shape or the type",
    "start": "200040",
    "end": "205280"
  },
  {
    "text": "of the object and some interesting Fields can be also found here like the number of descriptors which which is",
    "start": "205280",
    "end": "210319"
  },
  {
    "text": "giving information about the number of properties the object has uh and the",
    "start": "210319",
    "end": "215560"
  },
  {
    "text": "descriptor array the descriptor array is a structure in memory that is giving information about uh uh the properties",
    "start": "215560",
    "end": "222080"
  },
  {
    "text": "themselves like the the their keys uh the index for where the properties are",
    "start": "222080",
    "end": "227480"
  },
  {
    "text": "actually stored inside the object or in the property store and the type of the",
    "start": "227480",
    "end": "232640"
  },
  {
    "text": "uh properties like for example all of them here are smis which stands for small",
    "start": "232640",
    "end": "238439"
  },
  {
    "text": "integers now go through some um uh creation of objects in JavaScript in",
    "start": "238439",
    "end": "244560"
  },
  {
    "text": "order to understand better what's the concept of descriptor array and transitions uh so let's say we have an",
    "start": "244560",
    "end": "250799"
  },
  {
    "text": "object one here and uh let's add um property a to it this will trigger the",
    "start": "250799",
    "end": "258239"
  },
  {
    "text": "creation of a new map um that will transition from map uh zero via the a",
    "start": "258239",
    "end": "263919"
  },
  {
    "text": "property and it will also trigger the uh um creation of a new descriptor array in",
    "start": "263919",
    "end": "269240"
  },
  {
    "text": "order to give give um information about the properties a now let's create an object two with A and B properties this",
    "start": "269240",
    "end": "277120"
  },
  {
    "text": "uh will create a new map for that uh object uh and that map will transition from map one via the B property and the",
    "start": "277120",
    "end": "283880"
  },
  {
    "text": "new descriptor we giving information about A and B properties will be uh created now because object one and",
    "start": "283880",
    "end": "290280"
  },
  {
    "text": "object two share the property a the object one will also now um um use that",
    "start": "290280",
    "end": "296080"
  },
  {
    "text": "descriptor array that new descriptor array in order to say space in in memory uh same thing here if we create a",
    "start": "296080",
    "end": "303400"
  },
  {
    "text": "third object um a new descriptor will be allocated with a B and C Properties uh",
    "start": "303400",
    "end": "309880"
  },
  {
    "text": "and because object one and object two are sharing some of the properties of object three they will use the same",
    "start": "309880",
    "end": "314960"
  },
  {
    "text": "descriptor array so that's it for the descript array and transitions now we'll talk",
    "start": "314960",
    "end": "320759"
  },
  {
    "text": "about foreign loops and enum cache so when you do a for Loop uh like that in",
    "start": "320759",
    "end": "326600"
  },
  {
    "text": "in JavaScript it will actually create a structure in memory which is called Anum cache that structure is made to filter",
    "start": "326600",
    "end": "332880"
  },
  {
    "text": "out uh enumerable properties from non aable properties um in order to uh make",
    "start": "332880",
    "end": "339520"
  },
  {
    "text": "the for Loop faster um and because the the cache was initialized with object",
    "start": "339520",
    "end": "345240"
  },
  {
    "text": "two which has two properties then the indices array and keys array inside the",
    "start": "345240",
    "end": "351080"
  },
  {
    "text": "inum cache will have will have a size of two now inside that foreign Loop uh the",
    "start": "351080",
    "end": "357960"
  },
  {
    "text": "um property values will be actually um uh accessed via the gate key property",
    "start": "357960",
    "end": "363800"
  },
  {
    "text": "bite code which is handled by the built-in function gate key property",
    "start": "363800",
    "end": "369360"
  },
  {
    "text": "hander now let's see what uh is actually happening if we um optimize the foreign",
    "start": "369520",
    "end": "376360"
  },
  {
    "text": "Loop so let's put that foreign Loop into a function test and let's optimize in using those uh buil-in function here",
    "start": "376360",
    "end": "383840"
  },
  {
    "text": "what will happen is that the U C of nodes that is representing the uh",
    "start": "383840",
    "end": "389759"
  },
  {
    "text": "JavaScript code that you can see on the left here will actually be reduced by the G compiler called turbofan in order",
    "start": "389759",
    "end": "396720"
  },
  {
    "text": "to optimize those nodes and one particular node that will be optimized it is the GS property um that will be",
    "start": "396720",
    "end": "403599"
  },
  {
    "text": "optimized by uh the toine in a node called load field by index so now the",
    "start": "403599",
    "end": "410319"
  },
  {
    "text": "properties will now be loaded by index via the enum cache that leads us to the CV 2023 4427",
    "start": "410319",
    "end": "420120"
  },
  {
    "text": "which was discovered by Sergey glazunov of Google Project zero and we're going to talk about that uh CV and more",
    "start": "420120",
    "end": "427160"
  },
  {
    "text": "precisely about it's PC because the vulnerability we use as pone is actually a viant of it we actually bypassed the",
    "start": "427160",
    "end": "433360"
  },
  {
    "text": "patch made for that uh vulnerability um can see okay yeah um so",
    "start": "433360",
    "end": "442080"
  },
  {
    "text": "the PC uh of the CV looks like that and as you can uh see here like most of the",
    "start": "442080",
    "end": "449879"
  },
  {
    "text": "code here was already um covered during the basics uh the only change here is",
    "start": "449879",
    "end": "455680"
  },
  {
    "text": "that the trigger function will have a parameter that will be called inside the FR Loop another thing to remember here is",
    "start": "455680",
    "end": "463160"
  },
  {
    "text": "that at the time of the trigger call here uh that trigger function will be optimized by the G compiler which will",
    "start": "463160",
    "end": "470039"
  },
  {
    "text": "um eventually uh uh produce some optimized code and load the property",
    "start": "470039",
    "end": "475759"
  },
  {
    "text": "values by index inside a foreign Loop now we'll go through some uh through the",
    "start": "475759",
    "end": "481879"
  },
  {
    "text": "execution of some of the most important lines in the PC uh in order to understand properly what's the",
    "start": "481879",
    "end": "487560"
  },
  {
    "text": "vulnerability about so on the left you have the object two layout in memory and we'll follow like how the layout is",
    "start": "487560",
    "end": "493159"
  },
  {
    "text": "actually uh evolving so let's call the Callback function in the forign loop uh",
    "start": "493159",
    "end": "498720"
  },
  {
    "text": "this will uh call the Callback and the first line here will change the property C of object three uh from a small",
    "start": "498720",
    "end": "506120"
  },
  {
    "text": "integer to a double and this will trigger a map update for the object",
    "start": "506120",
    "end": "511320"
  },
  {
    "text": "3 um that map update will actually change the map of object 3 and the descriptor array of object 3 and by",
    "start": "511320",
    "end": "518680"
  },
  {
    "text": "transition Tre um map two will also be updated as map 2 was linked to the map",
    "start": "518680",
    "end": "524680"
  },
  {
    "text": "of object three so now map 2 is linked to descript array four which is describing c as a",
    "start": "524680",
    "end": "531519"
  },
  {
    "text": "double um next we'll execute the foring loop in the object one which will",
    "start": "531760",
    "end": "537399"
  },
  {
    "text": "trigger the initialization of the cache based on that object and because object",
    "start": "537399",
    "end": "542519"
  },
  {
    "text": "one has one property then the enum cache and more precisely the keys and indices array inside enum cache will have a size",
    "start": "542519",
    "end": "549240"
  },
  {
    "text": "of one now we'll access actually the property values we're going to do that by um accessing the enum cache and",
    "start": "549240",
    "end": "556040"
  },
  {
    "text": "getting the indices array um then we're going to use the iteration count which is zero now because that's the first",
    "start": "556040",
    "end": "562680"
  },
  {
    "text": "iteration of the loop and use it in order to query the indices array um so",
    "start": "562680",
    "end": "568959"
  },
  {
    "text": "we get that index from the indices array and use it as an offset from the object two here in order to get the property",
    "start": "568959",
    "end": "576800"
  },
  {
    "text": "value which is one right now so we've done the first iteration let's go through the second iteration here we're",
    "start": "576800",
    "end": "583519"
  },
  {
    "text": "going to do the same call the cback function but uh nothing will happen because the object three was already",
    "start": "583519",
    "end": "589519"
  },
  {
    "text": "updated um now we'll access the property value uh and for that we're going to get the iteration count which is now one and",
    "start": "589519",
    "end": "596160"
  },
  {
    "text": "that's where we actually access out of bound of the IND is array and that's where the avability lies from there",
    "start": "596160",
    "end": "602640"
  },
  {
    "text": "we're going to use that out of bound value as an offset from object two and this will lead to um memory",
    "start": "602640",
    "end": "611079"
  },
  {
    "text": "corruption now for the patch of that viability uh it actually happens when we update the map of object 3 where a new",
    "start": "611480",
    "end": "619360"
  },
  {
    "text": "check is added that is uh checking if the object three um old descriptor had",
    "start": "619360",
    "end": "624600"
  },
  {
    "text": "Anum cache or if the new map of the object Tre has some enumerable",
    "start": "624600",
    "end": "630079"
  },
  {
    "text": "properties this was the case so we're going to actually go into that if statement and initialize a new cache but",
    "start": "630079",
    "end": "637480"
  },
  {
    "text": "based on the object three this time so the size of the indicis array will be three which which will avoid the out of",
    "start": "637480",
    "end": "645160"
  },
  {
    "text": "bound from uh happening now the bypass and that's actually the vulnerability we use at",
    "start": "645160",
    "end": "651120"
  },
  {
    "text": "ponon it is the p is on the left and the PC found by researcher Sergey glov is on",
    "start": "651120",
    "end": "656839"
  },
  {
    "text": "the right and as you can see there pretty similar and uh in fact the only",
    "start": "656839",
    "end": "662240"
  },
  {
    "text": "difference here is that we added an object with a B and G properties and we're going to see how those uh this",
    "start": "662240",
    "end": "669240"
  },
  {
    "text": "addition of that object will actually bypass the patch so the PC will look like that and",
    "start": "669240",
    "end": "675560"
  },
  {
    "text": "we're going to see uh in memory what's going on so um object four is created uh",
    "start": "675560",
    "end": "681600"
  },
  {
    "text": "with its map and it will trigger also the creation of a new descriptor array for A and D properties now object one",
    "start": "681600",
    "end": "687839"
  },
  {
    "text": "and object two are created uh uh and as you can also notice in map two of the",
    "start": "687839",
    "end": "693560"
  },
  {
    "text": "object two it has a transition array meaning that would have multiple Transitions and one of the transition is",
    "start": "693560",
    "end": "699160"
  },
  {
    "text": "to the map four via the D property now the object 3 is created and uh map two",
    "start": "699160",
    "end": "705160"
  },
  {
    "text": "uh as another transition uh to map three via the C property now object 3 will",
    "start": "705160",
    "end": "710760"
  },
  {
    "text": "also create its own descriptor array to uh give information about a B and C",
    "start": "710760",
    "end": "716000"
  },
  {
    "text": "Properties we'll continue by triggering the uh creation of enum cache for object two using the forign loop but this enum",
    "start": "716000",
    "end": "723040"
  },
  {
    "text": "cache will be um created inside the for the descriptor array",
    "start": "723040",
    "end": "728240"
  },
  {
    "text": "4 now we'll execute the M Map update of the object three uh and we're going to",
    "start": "728240",
    "end": "734399"
  },
  {
    "text": "go through the check of the patch so we're going to take a look at the uh the check here uh that is checking that the",
    "start": "734399",
    "end": "740399"
  },
  {
    "text": "old descriptor which is on the right here the old descriptor of the object three has Anum cache but doesn't have",
    "start": "740399",
    "end": "745920"
  },
  {
    "text": "one right it's the descriptor array four that has one so we're going to actually bypass it and then the map and the",
    "start": "745920",
    "end": "752079"
  },
  {
    "text": "descriptor array of object 3 will be updated to uh desri map five and descriptor five which is uh giving",
    "start": "752079",
    "end": "758880"
  },
  {
    "text": "information about the C property as a double um so now by transition tree and",
    "start": "758880",
    "end": "765079"
  },
  {
    "text": "because map 2 was linked to uh the map three and map one is linked to map two",
    "start": "765079",
    "end": "770120"
  },
  {
    "text": "basically uh those two maps will also be updated and points will point back to",
    "start": "770120",
    "end": "775519"
  },
  {
    "text": "the new descriptor array uh the one for object three and you might recognize actually the",
    "start": "775519",
    "end": "781639"
  },
  {
    "text": "same layout as the vulnerability by found by Sergey glov from there you we",
    "start": "781639",
    "end": "787800"
  },
  {
    "text": "just need to trigger the creation of a new enum cache of size one and we can trigger the same bag as before by",
    "start": "787800",
    "end": "794959"
  },
  {
    "text": "accessing out of bound of the indices array and uh us it uh using that out of",
    "start": "794959",
    "end": "800040"
  },
  {
    "text": "bound value as an offset from the object to get um memory corruption um I will now let the to talk",
    "start": "800040",
    "end": "808120"
  },
  {
    "text": "about the exploitation part good morning everyone my name is t let me introduce the exploitation part of",
    "start": "808120",
    "end": "814760"
  },
  {
    "text": "our V8 exploitation the first step of the exploitation is triggering J stabil in",
    "start": "814760",
    "end": "821440"
  },
  {
    "text": "Chrome we use native syntax to trigger J before in the real world native syntax is not supported usually people use a",
    "start": "821440",
    "end": "828920"
  },
  {
    "text": "big number of loop to make the code hard to trigger git so please check the code",
    "start": "828920",
    "end": "834279"
  },
  {
    "text": "on the right and left side both of them you can see have the same count guess",
    "start": "834279",
    "end": "840279"
  },
  {
    "text": "which one perform better um please raise your hand if you",
    "start": "840279",
    "end": "845360"
  },
  {
    "text": "think the left one perform better come on just guess you have",
    "start": "845360",
    "end": "852399"
  },
  {
    "text": "50% to to answer right yeah one please raise your hand if you think the right",
    "start": "852399",
    "end": "859120"
  },
  {
    "text": "one perform better wow yeah yeah",
    "start": "859120",
    "end": "866160"
  },
  {
    "text": "um if you choose the code on the right side you I we you are all you will be a",
    "start": "866160",
    "end": "872360"
  },
  {
    "text": "browser expert believe me uh the actually the turo and compiler has",
    "start": "872360",
    "end": "877800"
  },
  {
    "text": "characteristics for in linning functions and optimizing code it rely on many factors such as optimizing thresholds",
    "start": "877800",
    "end": "885399"
  },
  {
    "text": "Cod frequencies Sur time profile Etc the code density is the one of the most",
    "start": "885399",
    "end": "891160"
  },
  {
    "text": "important factors we have known it is inary out of",
    "start": "891160",
    "end": "896839"
  },
  {
    "text": "B read of vulnerability uh to exploit first we need to control the value of the auto bounce read to do that we set",
    "start": "896839",
    "end": "904040"
  },
  {
    "text": "up the number of object items to 1 9 10 11 for the object 1 2 3 4 so the index",
    "start": "904040",
    "end": "910560"
  },
  {
    "text": "size is one and there are nine items in object two so we can control the auto",
    "start": "910560",
    "end": "916519"
  },
  {
    "text": "bounce read index then we allocating a string right after the index ACC and in",
    "start": "916519",
    "end": "922240"
  },
  {
    "text": "Cache in a memory in the Callback function by Computing the offset of the auto bound read uh the control",
    "start": "922240",
    "end": "929600"
  },
  {
    "text": "the control string value is located at the index 7 so we can see the key of the",
    "start": "929600",
    "end": "935959"
  },
  {
    "text": "object two equals p7 here and finally we can read out of any controllable offset",
    "start": "935959",
    "end": "942480"
  },
  {
    "text": "of the object to after knowing the high level idea let's see some more details now itation",
    "start": "942480",
    "end": "949399"
  },
  {
    "text": "uh number is seven and uh for here for Loop is called an inum cache and index",
    "start": "949399",
    "end": "956040"
  },
  {
    "text": "are created and the controllable string is allocated right after the index three",
    "start": "956040",
    "end": "961399"
  },
  {
    "text": "in the memory um now the object two key will be will get property value VI index",
    "start": "961399",
    "end": "968880"
  },
  {
    "text": "accessory here aut of bound read happens and uh the controll value the control",
    "start": "968880",
    "end": "974759"
  },
  {
    "text": "value is retrieved as the offset finally we can control the",
    "start": "974759",
    "end": "979839"
  },
  {
    "text": "arbitary offset of the object two for other F read now we can read arbitrary address",
    "start": "979839",
    "end": "987399"
  },
  {
    "text": "of the object two in the assembly level to get the fake object primitive in the J JavaScript level we uh still need to",
    "start": "987399",
    "end": "994800"
  },
  {
    "text": "write the fake object address at a relative address of the object to and",
    "start": "994800",
    "end": "999920"
  },
  {
    "text": "write a bet Tre value at the uh fix object address to fix any useful object",
    "start": "999920",
    "end": "1005639"
  },
  {
    "text": "we want let's see how we make it without any help of other uh vulnerabilities first uh write the",
    "start": "1005639",
    "end": "1013240"
  },
  {
    "text": "arbitr value at a fix address uh we can create larery and use a loger element to",
    "start": "1013240",
    "end": "1019680"
  },
  {
    "text": "write the arbitrary value to the larger element address and it is the the",
    "start": "1019680",
    "end": "1025400"
  },
  {
    "text": "address is fixed per re size and a chrome version second writing the arbitrary",
    "start": "1025400",
    "end": "1031280"
  },
  {
    "text": "value at a relative address of an object usually people usually adjacent objects",
    "start": "1031280",
    "end": "1037240"
  },
  {
    "text": "are good candidates for that purpose but it doesn't work due to some limitations",
    "start": "1037240",
    "end": "1042600"
  },
  {
    "text": "so we play with larger reement since its address is fixed and we can easily spray",
    "start": "1042600",
    "end": "1049559"
  },
  {
    "text": "the arit value in its bu in the meantime the object to uh address is allocated in",
    "start": "1049559",
    "end": "1055720"
  },
  {
    "text": "a non memory scope uh here is around the hex 500 z uh in the specific CHR version",
    "start": "1055720",
    "end": "1063640"
  },
  {
    "text": "so we can calculate the fix offset with this equation the Middle",
    "start": "1063640",
    "end": "1070120"
  },
  {
    "text": "address of the larer element minus object two address although the object two address is not fixed since we spr",
    "start": "1070120",
    "end": "1077400"
  },
  {
    "text": "almost 32 megabytes F object address in the large array element so we have a",
    "start": "1077400",
    "end": "1084120"
  },
  {
    "text": "safe sliding zone for object two the size of sa sliding zone is also 32",
    "start": "1084120",
    "end": "1089640"
  },
  {
    "text": "megabytes it's which is huge memory scope to ensure the object two is allocating the safe sliding zone now we",
    "start": "1089640",
    "end": "1097400"
  },
  {
    "text": "succeed to write the arbitary value and the relative address of the object two",
    "start": "1097400",
    "end": "1103000"
  },
  {
    "text": "then let's see how we fake the object by using features of the v h ation and",
    "start": "1103000",
    "end": "1109720"
  },
  {
    "text": "manipulating the weight HP with a larger element the left side in the theory we",
    "start": "1109720",
    "end": "1115760"
  },
  {
    "text": "mentioned before the right side is our practice uh you can see the object two",
    "start": "1115760",
    "end": "1121400"
  },
  {
    "text": "address plus the computed offset will point to the fake object address Bri",
    "start": "1121400",
    "end": "1126799"
  },
  {
    "text": "area and finally we can use the larery element to create the fake object in",
    "start": "1126799",
    "end": "1132840"
  },
  {
    "text": "JavaScript level there are two objects larer and a fig object both pointing to",
    "start": "1132840",
    "end": "1138520"
  },
  {
    "text": "the same memory region causing a useful type confusion scenario the last step for faking the",
    "start": "1138520",
    "end": "1146400"
  },
  {
    "text": "object is writing the fake object FS with the larger element to do that we need to know the map values of the",
    "start": "1146400",
    "end": "1153200"
  },
  {
    "text": "object to be faked here are two useful type of arrays to be fixed to create",
    "start": "1153200",
    "end": "1159360"
  },
  {
    "text": "more powerful export Primitives double array and mixer and most importantly",
    "start": "1159360",
    "end": "1164840"
  },
  {
    "text": "their map values are also fixed per conversion",
    "start": "1164840",
    "end": "1170320"
  },
  {
    "text": "here are more details uh since we know the fixed map values of the object to be fixed we use a larger to write the fake",
    "start": "1170320",
    "end": "1177799"
  },
  {
    "text": "object map element address lens Etc to the corresponding offset finally we",
    "start": "1177799",
    "end": "1183799"
  },
  {
    "text": "succeed to fake AJ aray in JavaScript level as shown",
    "start": "1183799",
    "end": "1190760"
  },
  {
    "text": "here then we will go through more details about how to create arit read right and address of primitive from fake",
    "start": "1190760",
    "end": "1198000"
  },
  {
    "text": "object primitive now the idea is based on both F object and the larger element pointing to the",
    "start": "1198000",
    "end": "1204799"
  },
  {
    "text": "same memory region so we use larger rate to uh create fake object and use fake",
    "start": "1204799",
    "end": "1211200"
  },
  {
    "text": "object to do R rate and right for arit rate primitive we F double array map and",
    "start": "1211200",
    "end": "1218880"
  },
  {
    "text": "few arit address we which we want to read at the offset of the double element address field then we can call fix zero",
    "start": "1218880",
    "end": "1226880"
  },
  {
    "text": "to read arbitary double value in inside the V sand box as shown",
    "start": "1226880",
    "end": "1232600"
  },
  {
    "text": "here same case for the arit right primitive uh we also fake the same double array and um uh fill the same",
    "start": "1232600",
    "end": "1241320"
  },
  {
    "text": "arbitr address with arbitrary rate um then we use fix zero to write in 64 and",
    "start": "1241320",
    "end": "1247640"
  },
  {
    "text": "in 32 value to the arbitr address inside the 8 s box for address of perimeter we fake the",
    "start": "1247640",
    "end": "1256200"
  },
  {
    "text": "mix array with the packed element map and um also create a fake object element",
    "start": "1256200",
    "end": "1263360"
  },
  {
    "text": "right after the fake mix array when putting an object to the fake zero in the Javas JavaScript code the the object",
    "start": "1263360",
    "end": "1271520"
  },
  {
    "text": "address will be written to the zero offset of the F mixer element data which",
    "start": "1271520",
    "end": "1277240"
  },
  {
    "text": "is also larer three so we can use larer three to read uh any read the the",
    "start": "1277240",
    "end": "1284159"
  },
  {
    "text": "address of any object now if finish all export",
    "start": "1284159",
    "end": "1289919"
  },
  {
    "text": "Primitives creation but if we recall the whole process we may have a question are",
    "start": "1289919",
    "end": "1295400"
  },
  {
    "text": "the fixed values really fixed in all situations we can see all fixed values",
    "start": "1295400",
    "end": "1300840"
  },
  {
    "text": "we use our larger element address and two map values finally two map values",
    "start": "1300840",
    "end": "1306320"
  },
  {
    "text": "depends on free trunk base and a fixed offset per conversion um lury element address is",
    "start": "1306320",
    "end": "1312919"
  },
  {
    "text": "sometimes occasionally um uh swing to another",
    "start": "1312919",
    "end": "1318279"
  },
  {
    "text": "address s and when minor Ms is turn on there are some also differences let's",
    "start": "1318279",
    "end": "1324559"
  },
  {
    "text": "see how we solve these Coral cases to create a close to 100% successful rate",
    "start": "1324559",
    "end": "1331559"
  },
  {
    "text": "exploit for three possible lury element addresses uh the main idea we",
    "start": "1331559",
    "end": "1337840"
  },
  {
    "text": "use uh is the main idea is we use a larery to create multiple fake object",
    "start": "1337840",
    "end": "1344679"
  },
  {
    "text": "evenly distributed in a memory region here we create five uh fake objects with a gap size the hex",
    "start": "1344679",
    "end": "1352720"
  },
  {
    "text": "4 Z then we set in Anchor fake object at the address of the hex 140 to 141 after",
    "start": "1352720",
    "end": "1361120"
  },
  {
    "text": "that we only need to find which fake object is is the anchor fake object in",
    "start": "1361120",
    "end": "1367279"
  },
  {
    "text": "different possible addresses here we can see uh the anchor fake object is first",
    "start": "1367279",
    "end": "1373039"
  },
  {
    "text": "second and the last uh which is fif fake object respectively with that we can",
    "start": "1373039",
    "end": "1379000"
  },
  {
    "text": "calculate which larger rate pointing to the to the Anchor fic object accordingly",
    "start": "1379000",
    "end": "1385080"
  },
  {
    "text": "in different possible um larery element addresses to find the right index of the",
    "start": "1385080",
    "end": "1392919"
  },
  {
    "text": "larger element pointing to the fake object we uh write the fake fake object",
    "start": "1392919",
    "end": "1398200"
  },
  {
    "text": "zero with a floating number 1.1 then larger element value will be uh changed",
    "start": "1398200",
    "end": "1404159"
  },
  {
    "text": "accordingly so we just need to search uh which larger array element has the",
    "start": "1404159",
    "end": "1409799"
  },
  {
    "text": "changed value that that is the right larger element pointing to the fake",
    "start": "1409799",
    "end": "1415799"
  },
  {
    "text": "object last the scavenger versus minor Ms scavenger is the V current default",
    "start": "1415799",
    "end": "1423880"
  },
  {
    "text": "Young Generation garbage collector while minor uh Mark and sweep is the new uh V",
    "start": "1423880",
    "end": "1429679"
  },
  {
    "text": "Young Generation garbage collector is which is still in development and uh it's uh experimental feature uh you can",
    "start": "1429679",
    "end": "1437400"
  },
  {
    "text": "see feature Base address depends on the weight the garbage collector which is",
    "start": "1437400",
    "end": "1444200"
  },
  {
    "text": "fixed and the difference uh you can see the difference about the how freance",
    "start": "1444200",
    "end": "1450440"
  },
  {
    "text": "base is allocated from the free raing list by linear allocator in both garbage",
    "start": "1450440",
    "end": "1456200"
  },
  {
    "text": "collectors garbage collector is a big topic and we don't have time to cover more today and I leave some homework for",
    "start": "1456200",
    "end": "1463440"
  },
  {
    "text": "you if you are interested awesome thanks though um so",
    "start": "1463440",
    "end": "1469320"
  },
  {
    "text": "now we will talk about the V8 sandbox and how actually we escaped it to get renderer code execution so the goal of",
    "start": "1469320",
    "end": "1475880"
  },
  {
    "text": "the sandbox is basically to get rid of all the row pointers that are used to reference one object to another inside",
    "start": "1475880",
    "end": "1482320"
  },
  {
    "text": "the V8 hip so the va8 security team they remove those pointers and replace them by offsets from The sendbox Base address",
    "start": "1482320",
    "end": "1489279"
  },
  {
    "text": "so even if the attacker actually compromised that offset he won't be able to uh get outside of the V8 Heap um now",
    "start": "1489279",
    "end": "1496200"
  },
  {
    "text": "to reference objects that are outside of the uh the Hep like the sandbox um the",
    "start": "1496200",
    "end": "1502320"
  },
  {
    "text": "security team also removed those Ro pointers to replace them by uh index to",
    "start": "1502320",
    "end": "1508120"
  },
  {
    "text": "pointer tables that are pointing back to the object uh they want to reference so there are pointer tables for external",
    "start": "1508120",
    "end": "1514440"
  },
  {
    "text": "objects like for example for uh blink objects uh for trusted objects like code",
    "start": "1514440",
    "end": "1520000"
  },
  {
    "text": "metadata bite code uh and for executable object like g",
    "start": "1520000",
    "end": "1525080"
  },
  {
    "text": "code now we'll go through uh some of the we internals that are required to",
    "start": "1525080",
    "end": "1530640"
  },
  {
    "text": "understand properly uh what's the sendbox Escape about so we'll start",
    "start": "1530640",
    "end": "1535679"
  },
  {
    "text": "first by something simple and just creating a module and an instance uh web assembly module an instance inside the",
    "start": "1535679",
    "end": "1542159"
  },
  {
    "text": "JavaScript this will actually allocate uh lwx memory region um in the address",
    "start": "1542159",
    "end": "1548279"
  },
  {
    "text": "space of the process and uh when you actually uh call uh export function uh",
    "start": "1548279",
    "end": "1555360"
  },
  {
    "text": "from JavaScript it will jump to what is called the C Target here and that c",
    "start": "1555360",
    "end": "1561000"
  },
  {
    "text": "Target is actually Landing in a structure named M table which has the purpose of uh jumping directly to the uh",
    "start": "1561000",
    "end": "1569640"
  },
  {
    "text": "compiled code of the function that is being executed there is also a far jump table but we won't talk about it as it's",
    "start": "1569640",
    "end": "1576120"
  },
  {
    "text": "not very useful to the understanding of the Escape uh now we'll go through some of the uh structure uh inside memory so",
    "start": "1576120",
    "end": "1584159"
  },
  {
    "text": "instance and modules first so when you create a module from JavaScript you will create a web assembly instance object",
    "start": "1584159",
    "end": "1589919"
  },
  {
    "text": "that has an index um to a pointer a trusted pointer table which is pointing to a trusted instance data where there",
    "start": "1589919",
    "end": "1597200"
  },
  {
    "text": "are important Fields like web assembly dispatch table and Gem table start and we'll see later how they we are we use",
    "start": "1597200",
    "end": "1604919"
  },
  {
    "text": "them to actually escape the sandbox then that instance object is also linked to a",
    "start": "1604919",
    "end": "1610360"
  },
  {
    "text": "module object which has index to an extol pointer table uh pointing to a",
    "start": "1610360",
    "end": "1615440"
  },
  {
    "text": "native module and that native module pointing back to web assembly module now a very crucial field in the web assembly",
    "start": "1615440",
    "end": "1621559"
  },
  {
    "text": "module is the vector of web assembly function because we're going to use that also for for the sandbox Escape part now",
    "start": "1621559",
    "end": "1628480"
  },
  {
    "text": "when you create a when you actually get a reference to an export function web assembly export function it will create in memory that structure here um and",
    "start": "1628480",
    "end": "1636720"
  },
  {
    "text": "that will lead to its function data now in its function data there are also",
    "start": "1636720",
    "end": "1641760"
  },
  {
    "text": "interesting information like the index of the export function the instance the the function is actually linked to",
    "start": "1641760",
    "end": "1649039"
  },
  {
    "text": "um and um the internal uh representation of the function which is pointing back",
    "start": "1649039",
    "end": "1655440"
  },
  {
    "text": "to the external one now we'll introduce the concept of",
    "start": "1655440",
    "end": "1661440"
  },
  {
    "text": "web assembly table and indirect Cod so let's first create a module uh let's name it module zero and uh that module",
    "start": "1661440",
    "end": "1669279"
  },
  {
    "text": "is declaring a function called indirect um and it's just returning a simple float here 0.05 here and then we're",
    "start": "1669279",
    "end": "1677640"
  },
  {
    "text": "going to actually reference that function inside the JavaScript uh so we can use it later in",
    "start": "1677640",
    "end": "1683799"
  },
  {
    "text": "JavaScript uh we'll create now a new module let's name it module one uh and",
    "start": "1683799",
    "end": "1689279"
  },
  {
    "text": "uh we're going to create a web assembly table and import that table at the time of instantiation of the of the module",
    "start": "1689279",
    "end": "1697080"
  },
  {
    "text": "and I'm going to reference that that web table also inside the module",
    "start": "1697080",
    "end": "1702799"
  },
  {
    "text": "directly now what we're going to do is we're going to take the reference the indirect function which is from the the",
    "start": "1702799",
    "end": "1708200"
  },
  {
    "text": "module zero and set it at index zero of the web assembly table so when we call the main function here what will happen",
    "start": "1708200",
    "end": "1715080"
  },
  {
    "text": "is that um uh the module one will call indirectly uh the indirect function",
    "start": "1715080",
    "end": "1721440"
  },
  {
    "text": "which is from module zero and we will do that by querying like the web assembly table at index",
    "start": "1721440",
    "end": "1727320"
  },
  {
    "text": "zero here the result is just multiplying the return address of the indirect call by uh the parameter which is 1,000 here",
    "start": "1727320",
    "end": "1734360"
  },
  {
    "text": "so will give 15 as a result now interally what's going on when we",
    "start": "1734360",
    "end": "1739480"
  },
  {
    "text": "actually set the um indirect function at index zero of the web table it will call the internal API set function table",
    "start": "1739480",
    "end": "1746360"
  },
  {
    "text": "entry where we will uh first get the uh function index of the export function",
    "start": "1746360",
    "end": "1751919"
  },
  {
    "text": "past as a parameter the the structure parsing that you can see on the left uh then we're going to uh query um",
    "start": "1751919",
    "end": "1760600"
  },
  {
    "text": "the vector of web assembly function from the module of the uh instance that the",
    "start": "1760600",
    "end": "1767080"
  },
  {
    "text": "export function is linked in order to get the static representation of that function inside a",
    "start": "1767080",
    "end": "1772440"
  },
  {
    "text": "C++ code uh and use that function as a parameter inside the update dispatch",
    "start": "1772440",
    "end": "1778080"
  },
  {
    "text": "table where we're going to use that function and more specifically its function index inside uh as a parameter",
    "start": "1778080",
    "end": "1784440"
  },
  {
    "text": "for the get C Target call here which is computed the C Target of the function and use that uh in order to set the C",
    "start": "1784440",
    "end": "1791720"
  },
  {
    "text": "Target inside the dispatch table as can be seen on the left here the dispatch table has now index zero the C Target of",
    "start": "1791720",
    "end": "1798600"
  },
  {
    "text": "the indirect function um maybe a bit more Precision about how the C Target is actually",
    "start": "1798600",
    "end": "1804880"
  },
  {
    "text": "computed it is based on the jum table start which is the address of the um uh",
    "start": "1804880",
    "end": "1811200"
  },
  {
    "text": "the best address of the main G table plus a offset which is computed based on that equation you don't need to remember",
    "start": "1811200",
    "end": "1817320"
  },
  {
    "text": "the equation just that the um equation is based on the function ined function",
    "start": "1817320",
    "end": "1824279"
  },
  {
    "text": "index so when we go back to JavaScript we set the function so the call Target of the indirect function will be set",
    "start": "1824279",
    "end": "1830919"
  },
  {
    "text": "inside the dispatch table and when we uh call the main function which is from instance one it will access that",
    "start": "1830919",
    "end": "1838039"
  },
  {
    "text": "dispatch table at index zero to get the call Target of the indirect function to jump to the instant zero memory",
    "start": "1838039",
    "end": "1845200"
  },
  {
    "text": "allocated for for that instance and execute the code of the indirect",
    "start": "1845200",
    "end": "1850519"
  },
  {
    "text": "function now if you followed along you might have noticed that if we control the function index here we are actually",
    "start": "1850519",
    "end": "1856320"
  },
  {
    "text": "controlling the C Target and if to control the call Target we can pretty much jump everywhere inside the instance",
    "start": "1856320",
    "end": "1862120"
  },
  {
    "text": "rwx memory which give us a control flow hijacking primitive so that's leads us to talk",
    "start": "1862120",
    "end": "1868080"
  },
  {
    "text": "about the actual Escape for the Escape we have a setup to do uh first we need to create three modules uh so the first",
    "start": "1868080",
    "end": "1874679"
  },
  {
    "text": "module is just declaring a function that will be called indirectly doesn't really matter what it does uh module one uh is",
    "start": "1874679",
    "end": "1883279"
  },
  {
    "text": "uh uh actually importing a web assembly table and uh calling in L the function",
    "start": "1883279",
    "end": "1888880"
  },
  {
    "text": "that is from the module zero uh apart of that doesn't really matter what it does and the last module module two is",
    "start": "1888880",
    "end": "1896440"
  },
  {
    "text": "defining a large number of functions and and it does that because the last",
    "start": "1896440",
    "end": "1901720"
  },
  {
    "text": "function uh which will have an index n that index n which will be actually used",
    "start": "1901720",
    "end": "1908000"
  },
  {
    "text": "to compute the C Target so it needs to be actually um pretty",
    "start": "1908000",
    "end": "1914200"
  },
  {
    "text": "large um so now step two is actually to confuse some Fields inside the sandbox",
    "start": "1914200",
    "end": "1920639"
  },
  {
    "text": "and the first field we're going to confuse is uh the web assembly module object so now we're going to put and",
    "start": "1920639",
    "end": "1926799"
  },
  {
    "text": "using our arbitrary read write Primitives we're going to put the uh module object two inside the module",
    "start": "1926799",
    "end": "1932919"
  },
  {
    "text": "object uh inside the instance subject zero sorry so it would look like that and the other field that we're",
    "start": "1932919",
    "end": "1940279"
  },
  {
    "text": "going to confuse is the uh index of the export function so in its function data here we're going to replace the its",
    "start": "1940279",
    "end": "1947399"
  },
  {
    "text": "index which was Z by n here which is the uh index of the last function inside the",
    "start": "1947399",
    "end": "1953960"
  },
  {
    "text": "module two when we do that actually the memory will look like that so you can see the",
    "start": "1953960",
    "end": "1960320"
  },
  {
    "text": "function data of the indirect export function which is uh the index n that which has the index n now and the",
    "start": "1960320",
    "end": "1966720"
  },
  {
    "text": "instance zero is now pointing to the object two instead of module object",
    "start": "1966720",
    "end": "1974360"
  },
  {
    "text": "zero uh so if we go back to uh JavaScript and we set the function it will call the",
    "start": "1974360",
    "end": "1980679"
  },
  {
    "text": "uh set function table entry get the function index and now it will be n instead of zero and here we're going to",
    "start": "1980679",
    "end": "1986960"
  },
  {
    "text": "use the instance data of the instance zero um to get its module which will be now module two instead of um module zero",
    "start": "1986960",
    "end": "1994200"
  },
  {
    "text": "to get uh actually the static representation of the last function of the module two here using the N um uh",
    "start": "1994200",
    "end": "2002960"
  },
  {
    "text": "index and this is used to actually avoid a potential out of bound error uh but it",
    "start": "2002960",
    "end": "2008039"
  },
  {
    "text": "doesn't really matter the the only thing that matter is that the function that is queried here and that the function index",
    "start": "2008039",
    "end": "2013080"
  },
  {
    "text": "is n then we use that function here um as before uh to compute the call Target and",
    "start": "2013080",
    "end": "2021639"
  },
  {
    "text": "this is actually the confused web assembly function from module two not the function from module zero here uh so",
    "start": "2021639",
    "end": "2027880"
  },
  {
    "text": "its index will be n and we use that n index to compute the call Target so if",
    "start": "2027880",
    "end": "2033720"
  },
  {
    "text": "we come back to JavaScript here we are setting um the indirect",
    "start": "2033720",
    "end": "2041799"
  },
  {
    "text": "function at index zero but now indirect function as index n right uh so when we",
    "start": "2041799",
    "end": "2047519"
  },
  {
    "text": "compute it called Target it will be equal to jump table start plus n or like something based on N but for Simplicity",
    "start": "2047519",
    "end": "2054760"
  },
  {
    "text": "reason we we just put n here um so when we call the exploit function and access that dispatch table to get the call",
    "start": "2054760",
    "end": "2061040"
  },
  {
    "text": "Target um in order to jump to the instance zero will actually jump out of",
    "start": "2061040",
    "end": "2066599"
  },
  {
    "text": "bound of the main jump table and we can pretty much jump everywhere inside that awx memory which give us the control for",
    "start": "2066599",
    "end": "2073000"
  },
  {
    "text": "hijacking primitive now to go from that primitive to code execution we still have some um",
    "start": "2073000",
    "end": "2080040"
  },
  {
    "text": "some stuff to do because we don't have any arbitrary right so we can't write shod directly there so we use the trick",
    "start": "2080040",
    "end": "2086440"
  },
  {
    "text": "which is that um in web assembly floating points are compiled as 64 bit",
    "start": "2086440",
    "end": "2092200"
  },
  {
    "text": "values by the Baseline the web assembly Baseline compiler which is lift off and",
    "start": "2092200",
    "end": "2097359"
  },
  {
    "text": "uh so this is pretty cool uh because using that we can just encode our share",
    "start": "2097359",
    "end": "2102640"
  },
  {
    "text": "code AS 64 um as floating points and they will be compiled in lwx memory at",
    "start": "2102640",
    "end": "2108560"
  },
  {
    "text": "64-bit pointers from there we can use our control 4 hijacking primitive to",
    "start": "2108560",
    "end": "2114040"
  },
  {
    "text": "jump to uh the start of the First floating points in memory uh which will be the first 64-bit value and it will be",
    "start": "2114040",
    "end": "2121079"
  },
  {
    "text": "the start of our Shell Code um yeah so now we'll let to uh finish the talk yeah",
    "start": "2121079",
    "end": "2129119"
  },
  {
    "text": "we have talk a lot let's wrapping everything up right now um firstly we have a of B read vulnerability and we",
    "start": "2129119",
    "end": "2135359"
  },
  {
    "text": "converted to the fake object primitive and F further to more powerful exp",
    "start": "2135359",
    "end": "2141160"
  },
  {
    "text": "Primitives with some Advanced exploitation techniques and then we use a new field confusion technique to",
    "start": "2141160",
    "end": "2148079"
  },
  {
    "text": "hijack a web assembly car cor Target address to escape V",
    "start": "2148079",
    "end": "2153400"
  },
  {
    "text": "sandbox and last our exploit is robust and stable enough to work on both Chrome",
    "start": "2153400",
    "end": "2159720"
  },
  {
    "text": "and Edge although there are some difference between them such as versions uh the object two addresses",
    "start": "2159720",
    "end": "2168079"
  },
  {
    "text": "Etc now it's uh demo time we we all do a live demo",
    "start": "2168079",
    "end": "2174040"
  },
  {
    "text": "and let's see yeah perfect you can see the Chrome",
    "start": "2174040",
    "end": "2180880"
  },
  {
    "text": "version here is m123 it is a latest version at the P 202 for or cover and uh",
    "start": "2180880",
    "end": "2191040"
  },
  {
    "text": "we close",
    "start": "2191040",
    "end": "2197000"
  },
  {
    "text": "okay can we",
    "start": "2197000",
    "end": "2200359"
  },
  {
    "text": "close yeah this is uh Microsoft Edge uh you can see the version is m122 is the",
    "start": "2205839",
    "end": "2213640"
  },
  {
    "text": "update is a little bit later than Chrome but uh it doesn't matter or our exploit",
    "start": "2213640",
    "end": "2219599"
  },
  {
    "text": "is robust and stable enough to fit all of",
    "start": "2219599",
    "end": "2225318"
  },
  {
    "text": "them close then we clean the",
    "start": "2226240",
    "end": "2235319"
  },
  {
    "text": "environment make the environment clean",
    "start": "2235560",
    "end": "2240560"
  },
  {
    "text": "all right let's execute or exploit on Chrome",
    "start": "2252000",
    "end": "2261440"
  },
  {
    "text": "first let's go okay you can see the notepad pop out",
    "start": "2274880",
    "end": "2281280"
  },
  {
    "text": "very stable and",
    "start": "2281280",
    "end": "2284359"
  },
  {
    "text": "fast then Microsoft",
    "start": "2288160",
    "end": "2292359"
  },
  {
    "text": "Edge then let's go cool you can see the also very stable",
    "start": "2299520",
    "end": "2306800"
  },
  {
    "text": "and in the fast now we",
    "start": "2306800",
    "end": "2314599"
  },
  {
    "text": "last last Slide the summary and the takeaways the first history doesn't",
    "start": "2315240",
    "end": "2321800"
  },
  {
    "text": "repeat itself by the Rhymes human repeatedly make similar mistakes but how",
    "start": "2321800",
    "end": "2326920"
  },
  {
    "text": "to effectively and efficiently discover them wor small",
    "start": "2326920",
    "end": "2332520"
  },
  {
    "text": "Explorations second um the exploitation ideas and and the techniques used in our",
    "start": "2332520",
    "end": "2340000"
  },
  {
    "text": "V Expo chain uh are Universal and can be used in other similar vulnerability",
    "start": "2340000",
    "end": "2346800"
  },
  {
    "text": "exploitations and a also if you want to make it make your exploit to being art",
    "start": "2346800",
    "end": "2352920"
  },
  {
    "text": "one of the best way is to exploring and filling the big gap between a working SL",
    "start": "2352920",
    "end": "2359599"
  },
  {
    "text": "and a close to 100% successful read exploit third sandbox escaped uh sandbox",
    "start": "2359599",
    "end": "2368440"
  },
  {
    "text": "object field such as index offsets internal pointers are the design of the",
    "start": "2368440",
    "end": "2374839"
  },
  {
    "text": "V sandbox it is really hard to patch these kind of field confusion techniques",
    "start": "2374839",
    "end": "2380160"
  },
  {
    "text": "so we believe our new field confusion technique would lead the way to a new",
    "start": "2380160",
    "end": "2386319"
  },
  {
    "text": "way way V8 sandbox Escape era the last but not not the least think about",
    "start": "2386319",
    "end": "2392960"
  },
  {
    "text": "defense like an exploiter uh it's really really important",
    "start": "2392960",
    "end": "2399319"
  },
  {
    "text": "um thanks to everyone I think it's we're on time yeah yeah",
    "start": "2399680",
    "end": "2408210"
  },
  {
    "text": "[Applause]",
    "start": "2408210",
    "end": "2412070"
  }
]