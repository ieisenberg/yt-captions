[
  {
    "text": "thank you",
    "start": "8059",
    "end": "11120"
  },
  {
    "text": "my name is Greg Hoagland and this is James Butler this is actually Jamie's talk so I'm",
    "start": "28640",
    "end": "35399"
  },
  {
    "text": "just going to give a little introduction and then turn it over to Jamie he did all the technical material here",
    "start": "35399",
    "end": "41160"
  },
  {
    "text": "but I just wanted to say a little thing about Jamie he uh goes by Foos and op on",
    "start": "41160",
    "end": "46320"
  },
  {
    "text": "rookkit.com and I met him about a year ago and he impressed me a great deal with",
    "start": "46320",
    "end": "51840"
  },
  {
    "text": "the release of the fu root kit and he implemented a rather new",
    "start": "51840",
    "end": "57420"
  },
  {
    "text": "technique called direct kernel object manipulation in for a Windows roof kit he had to do a great deal of reverse",
    "start": "57420",
    "end": "64140"
  },
  {
    "text": "engineering to be able to figure out how those directors or those structures and memory work",
    "start": "64140",
    "end": "70080"
  },
  {
    "text": "so he's not only a very good reverse engineer his code is also very clean he pays a great deal of attention to",
    "start": "70080",
    "end": "76680"
  },
  {
    "text": "Quality and this impressed me to the point where I had to fight off a couple of other companies to try to hire him",
    "start": "76680",
    "end": "82860"
  },
  {
    "text": "but he finally chose HB Gary and started working for us in January",
    "start": "82860",
    "end": "88560"
  },
  {
    "text": "and I also want to point out that he he this is entirely his personal choice to",
    "start": "88560",
    "end": "93720"
  },
  {
    "text": "wear a tie I did not force him to do that so uh Jamie's uh Jamie's Elite uh turn",
    "start": "93720",
    "end": "100439"
  },
  {
    "text": "it over to him thanks okay so today we're going to discuss uh",
    "start": "100439",
    "end": "105720"
  },
  {
    "text": "a freeware tool called Vice that will catch hookers and mainly it looks the",
    "start": "105720",
    "end": "112079"
  },
  {
    "text": "motivation for writing this tool was to find uh user mode root kits that hook API calls and so forth and to also",
    "start": "112079",
    "end": "120420"
  },
  {
    "text": "convince the people at rootkit.com to stop writing userland root kits because",
    "start": "120420",
    "end": "125520"
  },
  {
    "text": "they're sort of lame so here's a quick agenda we have a lot",
    "start": "125520",
    "end": "132599"
  },
  {
    "text": "of slides to cover I hope I can get it all in because the vice stuff is new plus I'm going to cover some Advanced",
    "start": "132599",
    "end": "138720"
  },
  {
    "text": "root kit stuff so if you're in the room just because you want to learn about defense I'll give you a little bit of",
    "start": "138720",
    "end": "144420"
  },
  {
    "text": "that but my main areas of research are more offensive in",
    "start": "144420",
    "end": "149640"
  },
  {
    "text": "nature so I have to show you uh the fu rootkit",
    "start": "149640",
    "end": "155420"
  },
  {
    "text": "so quick overview of this operating system design you probably all know this if you've uh",
    "start": "155760",
    "end": "161879"
  },
  {
    "text": "programmed in Windows at all there's the userland portion of that kernel32.dll",
    "start": "161879",
    "end": "168480"
  },
  {
    "text": "and ntdll these expose the the kernel level functionality to the win32 API",
    "start": "168480",
    "end": "175379"
  },
  {
    "text": "you can use these in programming to request operations of the of the kernel",
    "start": "175379",
    "end": "181080"
  },
  {
    "text": "so once you get into kernel mode these are where the low level functions are actually implemented the kernel keeps",
    "start": "181080",
    "end": "187620"
  },
  {
    "text": "track of processes uh files or open files I should say ports and so forth",
    "start": "187620",
    "end": "194819"
  },
  {
    "text": "so the kernel has all this memory objects it keeps in memory that keeps",
    "start": "194819",
    "end": "200580"
  },
  {
    "text": "track of like Privileges and so on and so forth for accounting purposes so when you're a nice little task manager",
    "start": "200580",
    "end": "206940"
  },
  {
    "text": "request hey give me a list of the processes that are running this is it goes through kernel 32 and then ntdll",
    "start": "206940",
    "end": "214379"
  },
  {
    "text": "and then it hits kernel so typical attack scenario is an",
    "start": "214379",
    "end": "220019"
  },
  {
    "text": "attacker will gain elevated privilege once um after that we're not going to talk about gaining elevated privilege there",
    "start": "220019",
    "end": "227099"
  },
  {
    "text": "have been some talks about that uh the Metasploit talk was good and you all",
    "start": "227099",
    "end": "232680"
  },
  {
    "text": "know about zero day attacks but once you gain access to a system once you want to",
    "start": "232680",
    "end": "238260"
  },
  {
    "text": "be able to come back and you don't want to keep exploring the box over and over so attacker will put down a root kit to",
    "start": "238260",
    "end": "244140"
  },
  {
    "text": "hide their presence and their activity on the box from system administrators and so on and so forth and maybe ids's",
    "start": "244140",
    "end": "252780"
  },
  {
    "text": "so your root kit is acting as part of the operating system if it's intercepting API calls it's really part",
    "start": "252780",
    "end": "259919"
  },
  {
    "text": "of the operating system if it's down in the kernel so this is a brief overview of the state",
    "start": "259919",
    "end": "266160"
  },
  {
    "text": "of root kits in the past uh probably the early 80s or whatever we saw a lot of",
    "start": "266160",
    "end": "272940"
  },
  {
    "text": "trojaning of binaries on disk with like the PS and so on and so forth",
    "start": "272940",
    "end": "278340"
  },
  {
    "text": "and this this has been sort of solved in today's market with tripwire and a bunch",
    "start": "278340",
    "end": "284340"
  },
  {
    "text": "of other different vendors they look for changes on the hard drive itself and maybe changes in the environment",
    "start": "284340",
    "end": "290880"
  },
  {
    "text": "path or whatnot so a more advanced root kit which for",
    "start": "290880",
    "end": "297180"
  },
  {
    "text": "Windows Greg wrote the first Windows NT rootkit to filter",
    "start": "297180",
    "end": "303199"
  },
  {
    "text": "these API calls and he did it in the kernel by hooking the system call table",
    "start": "303199",
    "end": "309180"
  },
  {
    "text": "this way you could totally bypass Checkers like uh like tripwire and so forth that were just looking at disk",
    "start": "309180",
    "end": "315840"
  },
  {
    "text": "So within the kernel you can hook the system call table you can hook the interrupt descriptor table on older",
    "start": "315840",
    "end": "322520"
  },
  {
    "text": "versions of the operating system you can also hook the import address table and I'll talk about that in a",
    "start": "322520",
    "end": "328500"
  },
  {
    "text": "moment so here's just a quick overview of the",
    "start": "328500",
    "end": "335160"
  },
  {
    "text": "import address table when your process starts up it relies upon other dlls in the windows",
    "start": "335160",
    "end": "341100"
  },
  {
    "text": "environment and those dlls your your process maybe not did not write those",
    "start": "341100",
    "end": "346919"
  },
  {
    "text": "but it has to import the functionality so it keeps a table of where the actual",
    "start": "346919",
    "end": "352620"
  },
  {
    "text": "function is that it's going to use and the loader sets up this table for you so",
    "start": "352620",
    "end": "358259"
  },
  {
    "text": "you just say Okay I want to use create file ex and then the loader will put the",
    "start": "358259",
    "end": "363479"
  },
  {
    "text": "appropriate address of that function from the kernel 32 dll into your import address table",
    "start": "363479",
    "end": "369780"
  },
  {
    "text": "and this is just to blow up here um it's it's these um",
    "start": "369780",
    "end": "375479"
  },
  {
    "text": "functions are either exported by name or by ordinal and the number there is just a dummy number representing the function",
    "start": "375479",
    "end": "381600"
  },
  {
    "text": "address so normally what would happen is your",
    "start": "381600",
    "end": "386940"
  },
  {
    "text": "the code in the program that's written say task manager would then jump through",
    "start": "386940",
    "end": "392160"
  },
  {
    "text": "the import address table from the import address table it would go follow this path to",
    "start": "392160",
    "end": "398479"
  },
  {
    "text": "kernel32.dll or whatever well you see here that we have some root kit injected into the process address",
    "start": "398479",
    "end": "405419"
  },
  {
    "text": "space it's represented by the red bad code and we hook the import address table so",
    "start": "405419",
    "end": "412740"
  },
  {
    "text": "all we have to do is change one d word and you can't really use memory protections and so forth because",
    "start": "412740",
    "end": "419280"
  },
  {
    "text": "um this import address table needs to be written too a more advanced through kit would go",
    "start": "419280",
    "end": "426180"
  },
  {
    "text": "into the kernel kernel 32.dll eventually calls ntdll",
    "start": "426180",
    "end": "431660"
  },
  {
    "text": "which eventually calls through the system call table and that's what's represented here it goes to chaos system",
    "start": "431660",
    "end": "438360"
  },
  {
    "text": "service which takes the system called number and eventually calls through the system",
    "start": "438360",
    "end": "443940"
  },
  {
    "text": "service descriptor table or the system call table in the kernel",
    "start": "443940",
    "end": "449099"
  },
  {
    "text": "each entry in this this is a blow up here each entry is just a function pointer",
    "start": "449099",
    "end": "456900"
  },
  {
    "text": "to find the address of the function in question so here's normally what would happen",
    "start": "456900",
    "end": "463520"
  },
  {
    "text": "the application makes a system call goes to the system called table and then goes",
    "start": "463919",
    "end": "470340"
  },
  {
    "text": "to the appropriate function within ntos kernel again we have a rootkit in memory we",
    "start": "470340",
    "end": "477840"
  },
  {
    "text": "only have to patch One D word and we can alter the control path of the",
    "start": "477840",
    "end": "484680"
  },
  {
    "text": "application and by doing this we can intercept calls and filter out data so that our",
    "start": "484680",
    "end": "490440"
  },
  {
    "text": "processor so on so forth is not displayed now a more advanced technique",
    "start": "490440",
    "end": "498918"
  },
  {
    "text": "is to hook in line so it's sort of easy to check the system call table to see if",
    "start": "499379",
    "end": "504900"
  },
  {
    "text": "it's hooked but you can also patch do inline function patching also called",
    "start": "504900",
    "end": "510060"
  },
  {
    "text": "detours and what you do there is you put a jump in the Target function to jump to your",
    "start": "510060",
    "end": "516300"
  },
  {
    "text": "bag code and then eventually your root kit would call back into the good",
    "start": "516300",
    "end": "521520"
  },
  {
    "text": "function this is a bit tricky to do correctly um Greg's written a root kit that'll do",
    "start": "521520",
    "end": "527880"
  },
  {
    "text": "it and also all the hips vendors seem to do",
    "start": "527880",
    "end": "533279"
  },
  {
    "text": "this a lot so just a quick animation of this process",
    "start": "533279",
    "end": "539399"
  },
  {
    "text": "task manager whatever maybe this case is Explorer we create a file so",
    "start": "539399",
    "end": "545420"
  },
  {
    "text": "kernel32.dll runs for a bit create file W is the function question here it calls",
    "start": "545420",
    "end": "550620"
  },
  {
    "text": "into ntdll notice there's a different export name there it's NT create file at this point it",
    "start": "550620",
    "end": "558180"
  },
  {
    "text": "runs for a bit then it jumps into kernel mode in kernel mode in this case we're going",
    "start": "558180",
    "end": "564540"
  },
  {
    "text": "through the interrupt descriptor table you don't have to do that on your versions of the OS you can use the more",
    "start": "564540",
    "end": "570300"
  },
  {
    "text": "advanced uh fast calling mechanism from the Intel architecture called assist",
    "start": "570300",
    "end": "575760"
  },
  {
    "text": "Center but regardless if you don't go through the IDT you'll still go through the",
    "start": "575760",
    "end": "582240"
  },
  {
    "text": "system call table even with the center so it'll contain the address the true",
    "start": "582240",
    "end": "587279"
  },
  {
    "text": "address in the kernel of into of uh NT create file which is in in Tios kernel",
    "start": "587279",
    "end": "594839"
  },
  {
    "text": "you could also hook here I don't demonstrate in the slide but you could overwrite those first couple bytes with",
    "start": "594839",
    "end": "600959"
  },
  {
    "text": "the immediate jump so",
    "start": "600959",
    "end": "606360"
  },
  {
    "text": "Vice is a tool that will try to detect hooks we may we say it detects for your kids",
    "start": "606360",
    "end": "612899"
  },
  {
    "text": "but they're only part of the things that hook there's legitimate hooking that's done",
    "start": "612899",
    "end": "618420"
  },
  {
    "text": "by Microsoft themselves to redirect execution a lot of your personal",
    "start": "618420",
    "end": "623640"
  },
  {
    "text": "firewalls and other hips products will hook so just because it detects a hook it may",
    "start": "623640",
    "end": "629519"
  },
  {
    "text": "not be a root kit",
    "start": "629519",
    "end": "632360"
  },
  {
    "text": "Vice was written more or less it has API that could be incorporated into other",
    "start": "635580",
    "end": "641399"
  },
  {
    "text": "tools such as a full-blown IDs application",
    "start": "641399",
    "end": "646620"
  },
  {
    "text": "so we'll try to do a demonstration here see if it works although the demo gods have not been",
    "start": "646620",
    "end": "652260"
  },
  {
    "text": "happy at black hat this year",
    "start": "652260",
    "end": "655459"
  },
  {
    "text": "so one go run here is it's not a root kick because I'm not gonna root kit my own box",
    "start": "663420",
    "end": "668579"
  },
  {
    "text": "this is a TDI mon from sys internals and it hooks",
    "start": "668579",
    "end": "673680"
  },
  {
    "text": "it has an interesting hooking technique um I should explain what all Vice is looking for vice looks for hooks in the",
    "start": "673680",
    "end": "681720"
  },
  {
    "text": "import address table of every process Vice also looks for immediate jumps of",
    "start": "681720",
    "end": "687839"
  },
  {
    "text": "all those functions so if you put a jump to some bad code within an exported",
    "start": "687839",
    "end": "693720"
  },
  {
    "text": "function of a dll if I should catch that Vice will look at the system call table look for jumps that are outside of NTS",
    "start": "693720",
    "end": "701820"
  },
  {
    "text": "kernel because they're obviously hooks then it will follow all those functions",
    "start": "701820",
    "end": "707220"
  },
  {
    "text": "and analyze the first few bytes looking for jumps they are using the detour",
    "start": "707220",
    "end": "713100"
  },
  {
    "text": "trick I'm looking for root kits that use the detour trick then it will also go to",
    "start": "713100",
    "end": "718980"
  },
  {
    "text": "individual device drivers that you can specify there's a driver dot any file",
    "start": "718980",
    "end": "724920"
  },
  {
    "text": "that comes with Vice it has a few um a few devices that are listed",
    "start": "724920",
    "end": "730579"
  },
  {
    "text": "excuse me what it'll do is every device driver has a table that manages requests they're",
    "start": "730579",
    "end": "738660"
  },
  {
    "text": "called erps so there's a major function table that you can hook not many root",
    "start": "738660",
    "end": "743820"
  },
  {
    "text": "kits do this yet but you can achieve a lot of the same functionality of a rootkit just by hooking these herbs so",
    "start": "743820",
    "end": "750300"
  },
  {
    "text": "you could hook up tcprp.sys and watch for calls to hey give me a list of the",
    "start": "750300",
    "end": "755820"
  },
  {
    "text": "open ports you could hook at the Erp level and filter data",
    "start": "755820",
    "end": "761160"
  },
  {
    "text": "nobody I don't think I've seen a publicly available rootkit that does that but it's completely possible",
    "start": "761160",
    "end": "767459"
  },
  {
    "text": "and CIS internals tool TDI mon happens to hook at that Earp level Within",
    "start": "767459",
    "end": "772500"
  },
  {
    "text": "tcp.sys",
    "start": "772500",
    "end": "775500"
  },
  {
    "text": "so this is the um Vice tool starting up Gregory at the GUI",
    "start": "781440",
    "end": "786660"
  },
  {
    "text": "and helped me with some of the debugging it uses the.net framework",
    "start": "786660",
    "end": "793079"
  },
  {
    "text": "which is free from Microsoft so if you Vice came on your conference proceedings if you try to run it and you get some",
    "start": "793079",
    "end": "800040"
  },
  {
    "text": "crazy air it's probably because you don't have the.net framework installed and you can download for free from",
    "start": "800040",
    "end": "806100"
  },
  {
    "text": "Microsoft I think it's about 28 Meg though",
    "start": "806100",
    "end": "810139"
  },
  {
    "text": "so we'll just click scan the progress bar advances as it goes",
    "start": "811980",
    "end": "819300"
  },
  {
    "text": "through each process if you've looked advice before on rootkit.com this is a totally new",
    "start": "819300",
    "end": "825959"
  },
  {
    "text": "version it hasn't been released yet and I fixed the bugs",
    "start": "825959",
    "end": "831260"
  },
  {
    "text": "so in the top window you see there that's looking for user mode Hooks and",
    "start": "837839",
    "end": "843420"
  },
  {
    "text": "kernel 32 is being hooked a lot of places by ntdll obviously this is",
    "start": "843420",
    "end": "849660"
  },
  {
    "text": "probably just a false it is a hook so it is detecting it but it's not a malicious",
    "start": "849660",
    "end": "855420"
  },
  {
    "text": "hook so you don't have to worry about it as especially if you have some kind of file Integrity turned on in the win and",
    "start": "855420",
    "end": "862620"
  },
  {
    "text": "T system 32 directory you don't have to worry about that ntdll being a like a",
    "start": "862620",
    "end": "868500"
  },
  {
    "text": "replacement in tdll",
    "start": "868500",
    "end": "871639"
  },
  {
    "text": "notice that Vice will also tell you the full path if it can where on the file",
    "start": "874860",
    "end": "880139"
  },
  {
    "text": "system The Hook is so you can delete it if if um if it is malicious",
    "start": "880139",
    "end": "887540"
  },
  {
    "text": "in the bottom in the bottom window is the list of the herbs it found hooked",
    "start": "888000",
    "end": "896459"
  },
  {
    "text": "it also lists the hook address so you know where to go look in memory if you had windy bug or some other",
    "start": "896459",
    "end": "903800"
  },
  {
    "text": "kernel debugger running soft dice Etc you could unassemble the instructions",
    "start": "903800",
    "end": "909360"
  },
  {
    "text": "there at that address and you could try to glean what the root kit was doing",
    "start": "909360",
    "end": "914760"
  },
  {
    "text": "again it lists out where on the file system The Hook is so in this case it's",
    "start": "914760",
    "end": "919920"
  },
  {
    "text": "uh tdimsys.sys",
    "start": "919920",
    "end": "925380"
  },
  {
    "text": "okay if you look at the about button there's different little icons they're just",
    "start": "927480",
    "end": "933839"
  },
  {
    "text": "again to poke a little bit the root k Community to try to get them to do better the herb Hook is difficulty level medium",
    "start": "933839",
    "end": "941820"
  },
  {
    "text": "and it has that little orb connection type of Icon system call hooking is is",
    "start": "941820",
    "end": "948300"
  },
  {
    "text": "kind of easy now it gets a little bit more advanced if there's memory protections enabled on the system call",
    "start": "948300",
    "end": "955139"
  },
  {
    "text": "table but they're really easy to turn off and there's been a lot of people that",
    "start": "955139",
    "end": "960420"
  },
  {
    "text": "have talked about that including myself and some other hackers that use a different technique",
    "start": "960420",
    "end": "966779"
  },
  {
    "text": "if you do inline function patching that's sort of hard because you have to disassemble the first few bytes of the",
    "start": "966779",
    "end": "972120"
  },
  {
    "text": "function because you don't want to cut on a uneven instruction boundary since",
    "start": "972120",
    "end": "978480"
  },
  {
    "text": "in the x86 has a variable length instruction and then if you hook in the IET we have",
    "start": "978480",
    "end": "985980"
  },
  {
    "text": "a little Elmer's glue bottle because that's just really lame",
    "start": "985980",
    "end": "990620"
  },
  {
    "text": "so that was vice um here's some snapshots of real live root kits that was taken from one of our",
    "start": "995279",
    "end": "1002720"
  },
  {
    "text": "VMware machines here's Vice versus hacker Defender which",
    "start": "1002720",
    "end": "1009500"
  },
  {
    "text": "is pretty popular and extremely advanced the gentleman also contributes",
    "start": "1009500",
    "end": "1014779"
  },
  {
    "text": "occasionally to rootkit.com and he's pretty pretty knowledgeable",
    "start": "1014779",
    "end": "1020300"
  },
  {
    "text": "here's Vanquish it does a lot of API hooking up in the user land you can",
    "start": "1020300",
    "end": "1027079"
  },
  {
    "text": "see it may be small for you but I think it's in some of the slides it hooks kernel32.dll a lot it looks for",
    "start": "1027079",
    "end": "1035240"
  },
  {
    "text": "create process create process W Etc and what it's it's trying to every time",
    "start": "1035240",
    "end": "1041178"
  },
  {
    "text": "you try to create a process Vanquish will try to infect it so that's why it needs to hook some of these apis",
    "start": "1041179",
    "end": "1048760"
  },
  {
    "text": "how many read the uh Frac 62 article by KDM",
    "start": "1049040",
    "end": "1054400"
  },
  {
    "text": "okay well he said that Vice did not catch into illusion and he was exactly",
    "start": "1054740",
    "end": "1060440"
  },
  {
    "text": "right but uh he had an older version I hadn't released the new version yet because Vice had a sort of a severe bug",
    "start": "1060440",
    "end": "1067940"
  },
  {
    "text": "in it and now that I've fixed the bug it completely catches anti-illusion so he",
    "start": "1067940",
    "end": "1073940"
  },
  {
    "text": "and I have talked offline through email about that and I think I put up a snapshot",
    "start": "1073940",
    "end": "1079700"
  },
  {
    "text": "rookie.com and I think he even said nice job so that's sort of",
    "start": "1079700",
    "end": "1086000"
  },
  {
    "text": "the state of a lot of root kits that are publicly known about and contributed to somewhere even open source now we're",
    "start": "1086000",
    "end": "1092840"
  },
  {
    "text": "going to go into another area more Insidious root kit Fu using",
    "start": "1092840",
    "end": "1099500"
  },
  {
    "text": "dcom methods so customers are starting to demand more because their operating",
    "start": "1099500",
    "end": "1104720"
  },
  {
    "text": "system isn't providing all the security that they need they're looking to personal firewalls",
    "start": "1104720",
    "end": "1110539"
  },
  {
    "text": "and host based intrusion prevention systems so kids slash hips kids being high space",
    "start": "1110539",
    "end": "1118940"
  },
  {
    "text": "IDs hips High space intrusion prevention systems they try to detect or prevent",
    "start": "1118940",
    "end": "1125200"
  },
  {
    "text": "processes from running certain files from being created possibly device drivers from loading",
    "start": "1125200",
    "end": "1131179"
  },
  {
    "text": "privileged escalation and network connections being made outbound for the",
    "start": "1131179",
    "end": "1136220"
  },
  {
    "text": "most part but in a lot of cases they trust the underlying operating system to detect or",
    "start": "1136220",
    "end": "1144799"
  },
  {
    "text": "to report when these activities occur so if you can compromise the operating",
    "start": "1144799",
    "end": "1151340"
  },
  {
    "text": "system itself in many cases you can obviously compromise the hips",
    "start": "1151340",
    "end": "1157179"
  },
  {
    "text": "uses things like there's they can query the kernel just like any other",
    "start": "1157400",
    "end": "1162559"
  },
  {
    "text": "application to say you know like task man does etc they can hook userland API functions to",
    "start": "1162559",
    "end": "1170660"
  },
  {
    "text": "try to get into the code path they can hook the system call table also to try getting to the code path",
    "start": "1170660",
    "end": "1177380"
  },
  {
    "text": "most any hips or HIDs that you've seen that do registry",
    "start": "1177380",
    "end": "1183500"
  },
  {
    "text": "um they monitor the registry access they have to hook the system call table",
    "start": "1183500",
    "end": "1189559"
  },
  {
    "text": "there's about nine functions in there they're looking for also within the windows kernel it's",
    "start": "1189559",
    "end": "1196100"
  },
  {
    "text": "pretty Advanced you can register a callback for every single thread that's created so before the thread fully gets",
    "start": "1196100",
    "end": "1202100"
  },
  {
    "text": "established you'll get your function will get called and then you could take whatever",
    "start": "1202100",
    "end": "1207160"
  },
  {
    "text": "preventive measures or so forth you want to do there you can also register callbacks for things like image getting",
    "start": "1207160",
    "end": "1214100"
  },
  {
    "text": "loaded into memory or process creation",
    "start": "1214100",
    "end": "1219160"
  },
  {
    "text": "so some of the problems is you have to be in the the hips has to be in the execution path",
    "start": "1219799",
    "end": "1225679"
  },
  {
    "text": "to allow it to now deny access and these hooks look exactly like a",
    "start": "1225679",
    "end": "1232160"
  },
  {
    "text": "typical root kit there's really only the difference is while they're there they're there to protect instead to hide",
    "start": "1232160",
    "end": "1240860"
  },
  {
    "text": "but I say who says we have to use an API to implement our rootkit if you don't use",
    "start": "1240860",
    "end": "1247280"
  },
  {
    "text": "an API then any functions that the kernels filtering on or has Aquos around you can",
    "start": "1247280",
    "end": "1256220"
  },
  {
    "text": "still achieve the same results without going through those functions also if if your hips or so forth has a a",
    "start": "1256220",
    "end": "1264679"
  },
  {
    "text": "problem with it where you can load a device driver even though they try to prevent you from doing that then you can",
    "start": "1264679",
    "end": "1271160"
  },
  {
    "text": "circumvent all their API protections so the current design of operating",
    "start": "1271160",
    "end": "1277100"
  },
  {
    "text": "systems anyone who's taken a basic class of probably seen this before there's four",
    "start": "1277100",
    "end": "1283160"
  },
  {
    "text": "rings the kernel and other third-party device drivers run at ring zero applications",
    "start": "1283160",
    "end": "1288919"
  },
  {
    "text": "run at ring three Intel has a total four privileged rings but no one's for the",
    "start": "1288919",
    "end": "1295340"
  },
  {
    "text": "most part seems to use the other two uh this is not just Microsoft bashing",
    "start": "1295340",
    "end": "1301100"
  },
  {
    "text": "this is every OS it seems pretty much uh except maybe the really secure ones that I haven't seen",
    "start": "1301100",
    "end": "1306919"
  },
  {
    "text": "the rated by some federal agency is a level of confidence for security",
    "start": "1306919",
    "end": "1314260"
  },
  {
    "text": "so since there's only two privilege levels there's no separation of powers between a third-party device driver or a",
    "start": "1315740",
    "end": "1322880"
  },
  {
    "text": "little loadable kernel module Therefore your root kit can modify any",
    "start": "1322880",
    "end": "1329900"
  },
  {
    "text": "memory that the kernel can also modify",
    "start": "1329900",
    "end": "1334840"
  },
  {
    "text": "that's what I do with dcom it stands for direct current object manipulation a little play on letters",
    "start": "1335900",
    "end": "1342080"
  },
  {
    "text": "there so you have to be sort of",
    "start": "1342080",
    "end": "1348799"
  },
  {
    "text": "really careful when you just start modifying memory directly because you have to understand the underlying",
    "start": "1348799",
    "end": "1354740"
  },
  {
    "text": "structures in a great level of detail before you do otherwise when the kernel",
    "start": "1354740",
    "end": "1359840"
  },
  {
    "text": "tries to use the structures it'll blue screen the Box",
    "start": "1359840",
    "end": "1364658"
  },
  {
    "text": "so call that the goal of the root kit is to hide things and we'll talk about what",
    "start": "1364880",
    "end": "1370820"
  },
  {
    "text": "you can use dcom to hide so you can't use dcom for every application of a root kit that you may",
    "start": "1370820",
    "end": "1377539"
  },
  {
    "text": "want to do if you want to add something on the file system dcom is not the way to go because",
    "start": "1377539",
    "end": "1384260"
  },
  {
    "text": "there's not an object in memory representing every single file on disk obviously that's contained on the disk",
    "start": "1384260",
    "end": "1391220"
  },
  {
    "text": "directory structure also um I'm sure there's other examples that you",
    "start": "1391220",
    "end": "1397460"
  },
  {
    "text": "wouldn't use dcom 4 but you can use it if for any of the accounting mechanisms within the kernel for the most part",
    "start": "1397460",
    "end": "1404179"
  },
  {
    "text": "so you can hide processes add privileges to tokens add groups to tokens",
    "start": "1404179",
    "end": "1410260"
  },
  {
    "text": "manipulate a token to full most forensics that are out there",
    "start": "1410260",
    "end": "1415580"
  },
  {
    "text": "there are some very Advanced forensic tools that will catch decom type of",
    "start": "1415580",
    "end": "1421520"
  },
  {
    "text": "issues we had some of the students in our class who were from in case and they're wise",
    "start": "1421520",
    "end": "1427700"
  },
  {
    "text": "to these tricks you can also use dcom to hide ports",
    "start": "1427700",
    "end": "1434600"
  },
  {
    "text": "so everyone knows implication of hidden processes to how to process in Windows here's how",
    "start": "1434600",
    "end": "1440840"
  },
  {
    "text": "you would go about it the this here this box up top represents",
    "start": "1440840",
    "end": "1447799"
  },
  {
    "text": "the kernel processor control block it contains three useful pointers pointer",
    "start": "1447799",
    "end": "1453559"
  },
  {
    "text": "to the current thread pointed to the next thread and a pointer to the idle thread",
    "start": "1453559",
    "end": "1458780"
  },
  {
    "text": "these once you get to this processor control block which is simple to do you can",
    "start": "1458780",
    "end": "1466220"
  },
  {
    "text": "always find the currently running thread on the system you follow that that's in an e-thread e stands for executive and K",
    "start": "1466220",
    "end": "1473360"
  },
  {
    "text": "stands for kernel that's how windows in the operating system that's how they name these objects",
    "start": "1473360",
    "end": "1479059"
  },
  {
    "text": "they're not an object in the C plus sense of the word they're mainly structures",
    "start": "1479059",
    "end": "1484220"
  },
  {
    "text": "and they vary from OS to OS So within an e thread is a k thread and",
    "start": "1484220",
    "end": "1490940"
  },
  {
    "text": "when to thin a k thread you can find the underlying process block represented by E process",
    "start": "1490940",
    "end": "1498020"
  },
  {
    "text": "and there's this linked list notation here where all the processes all the",
    "start": "1498020",
    "end": "1503840"
  },
  {
    "text": "active processes are linked together active is a bit of a misnomer it's how",
    "start": "1503840",
    "end": "1511220"
  },
  {
    "text": "Microsoft names the list but just because it's marked as active doesn't mean it's not blocked or um",
    "start": "1511220",
    "end": "1519140"
  },
  {
    "text": "paged out or whatever it's it just means it's a process on the system so be in",
    "start": "1519140",
    "end": "1524539"
  },
  {
    "text": "this list so the how to process you locate the processor control block I have the",
    "start": "1524539",
    "end": "1531200"
  },
  {
    "text": "address there it's been in several books it's hard-coded you can always use that",
    "start": "1531200",
    "end": "1536419"
  },
  {
    "text": "if you don't like that methodology because it may have changed I haven't looked at 2003 or even XP but doesn't",
    "start": "1536419",
    "end": "1544220"
  },
  {
    "text": "matter because you can always use the fs register to find the processor control block and Define your current thread",
    "start": "1544220",
    "end": "1551779"
  },
  {
    "text": "the fs register contains different things depending on if you're in user land or if you're in kernel mode a lot",
    "start": "1551779",
    "end": "1558620"
  },
  {
    "text": "of people use the fs register and shell code to find the process environment block",
    "start": "1558620",
    "end": "1563740"
  },
  {
    "text": "in kernel it doesn't lead you to the process environment block",
    "start": "1563740",
    "end": "1569320"
  },
  {
    "text": "so again once we found the thread we can go to the K thread K thread to",
    "start": "1572299",
    "end": "1579860"
  },
  {
    "text": "the e-process e-process structure epros contains list and it's circular and doubly linked",
    "start": "1579860",
    "end": "1590380"
  },
  {
    "text": "to how to process it's pretty simple we just change the process in front of us",
    "start": "1590900",
    "end": "1596240"
  },
  {
    "text": "to point to the process behind us and we change the process behind us to point to the process in front of us and I'll",
    "start": "1596240",
    "end": "1602779"
  },
  {
    "text": "demonstrate this so in this example we're trying to hide the",
    "start": "1602779",
    "end": "1608900"
  },
  {
    "text": "currently running process which would be this e-process block we have a blink in a list entries",
    "start": "1608900",
    "end": "1616520"
  },
  {
    "text": "contained a members called blink that points backwards to the e-process block",
    "start": "1616520",
    "end": "1622460"
  },
  {
    "text": "behind us or behind the e-process that we're currently at and the flank points uh",
    "start": "1622460",
    "end": "1629240"
  },
  {
    "text": "forward so it's a forward link backward links so here we just changed the Flink of the",
    "start": "1629240",
    "end": "1635299"
  },
  {
    "text": "process behind us to point to the process in front of us",
    "start": "1635299",
    "end": "1640720"
  },
  {
    "text": "and we'll change the process in front of us to point to the process behind us",
    "start": "1641900",
    "end": "1647419"
  },
  {
    "text": "with those simple I think I can get it down to you know just two two lines of C code then we're",
    "start": "1647419",
    "end": "1656059"
  },
  {
    "text": "completely hidden so at first when I did this I thought",
    "start": "1656059",
    "end": "1661640"
  },
  {
    "text": "the process should freeze but it continued to run and that was somewhat of a mystery and it turns out that uh",
    "start": "1661640",
    "end": "1668539"
  },
  {
    "text": "the window scheduling is very Advanced and it's done on a thread basis",
    "start": "1668539",
    "end": "1673940"
  },
  {
    "text": "so even though the operating system reports on a process basis",
    "start": "1673940",
    "end": "1680000"
  },
  {
    "text": "it schedules on a thread basis so there's no there's a bit of a mismatch there they should always report on how",
    "start": "1680000",
    "end": "1687559"
  },
  {
    "text": "they schedule that way this trick wouldn't work",
    "start": "1687559",
    "end": "1692080"
  },
  {
    "text": "now I'm not a a Linux kernel guy by any means but I have written a few lkms",
    "start": "1694700",
    "end": "1701480"
  },
  {
    "text": "this was done about two years ago with whatever version of Linux kernel was",
    "start": "1701480",
    "end": "1706880"
  },
  {
    "text": "popular then I think it was early versions two four or something so Linux you can pull the same trick off",
    "start": "1706880",
    "end": "1713600"
  },
  {
    "text": "more or less you have to do a little bit of a modification at the end but they",
    "start": "1713600",
    "end": "1718640"
  },
  {
    "text": "have a task drop that represents every process so it's just like an e-process block there's a two pointers that are of",
    "start": "1718640",
    "end": "1727279"
  },
  {
    "text": "Interest the previous task and the next task they're just like our flank and blink within the e-process structure and",
    "start": "1727279",
    "end": "1733880"
  },
  {
    "text": "windows then they also have two other pointers that we'll see why they're important a moment called previous run and next run",
    "start": "1733880",
    "end": "1743380"
  },
  {
    "text": "so the how to process you go into its test struct and you modify the previous task and the next task",
    "start": "1744080",
    "end": "1750860"
  },
  {
    "text": "to point around you you just leave the next run in previous run alone",
    "start": "1750860",
    "end": "1757600"
  },
  {
    "text": "here's a representation of the list of task trucks in memory they're all linked together",
    "start": "1757940",
    "end": "1765080"
  },
  {
    "text": "but when we go to hide here the parent process or the first process on the system is the init",
    "start": "1765080",
    "end": "1772399"
  },
  {
    "text": "process it has ID of 0 or pit of zero and it has no parent",
    "start": "1772399",
    "end": "1778940"
  },
  {
    "text": "so it's parent pointer in the task truck is null because it is the first process",
    "start": "1778940",
    "end": "1784580"
  },
  {
    "text": "or the first task to hide this process we're hiding PID 19",
    "start": "1784580",
    "end": "1791840"
  },
  {
    "text": "01 and we have to change the init process to point to our hidden task",
    "start": "1791840",
    "end": "1798260"
  },
  {
    "text": "truck on Linux now explain why because if you don't change the",
    "start": "1798260",
    "end": "1805220"
  },
  {
    "text": "scheduler at all on Linux your process freezes and the reason this is true is because the Linux scheduler I'm not sure how it",
    "start": "1805220",
    "end": "1812179"
  },
  {
    "text": "is in the newer version with the more advanced threading model but in this version I was looking at the",
    "start": "1812179",
    "end": "1818960"
  },
  {
    "text": "Tom it was Linux was walking the Linux scheduler was walking the list in",
    "start": "1818960",
    "end": "1825080"
  },
  {
    "text": "previous task and next task every time I'd see a task it would update a goodness value it would",
    "start": "1825080",
    "end": "1831799"
  },
  {
    "text": "calculate goodness value for that process and based upon the goodness value ranking that you got it would then",
    "start": "1831799",
    "end": "1839419"
  },
  {
    "text": "schedule you a certain amount of time or jiffy's on the CPU to run",
    "start": "1839419",
    "end": "1845240"
  },
  {
    "text": "and put you in the appropriate place in the queue in the previous run and next run queue so if you removed yourself",
    "start": "1845240",
    "end": "1852440"
  },
  {
    "text": "from the previous task next task you never got the goodness value assigned to",
    "start": "1852440",
    "end": "1858440"
  },
  {
    "text": "yourself and you never got jiffies so you never ran",
    "start": "1858440",
    "end": "1863620"
  },
  {
    "text": "so now we're going to switch gears a little bit we're going to talk about some of the problems that can occur in",
    "start": "1864679",
    "end": "1870500"
  },
  {
    "text": "modifying these lists these lists are obviously private to the kernel they do not export the list they",
    "start": "1870500",
    "end": "1878480"
  },
  {
    "text": "do not export the mutexes to the list and if you're on a multi-cpu machine obviously modifying this list can be",
    "start": "1878480",
    "end": "1885679"
  },
  {
    "text": "very dangerous also just in a regular threaded machine if you're changing the list of any of these things you could",
    "start": "1885679",
    "end": "1892520"
  },
  {
    "text": "get swapped out a pointer could become invalid that you've already saved off you you get paid or",
    "start": "1892520",
    "end": "1899419"
  },
  {
    "text": "scheduled again to run and you dereference that pointer and you blue screen the Box",
    "start": "1899419",
    "end": "1904520"
  },
  {
    "text": "so in order to maintain synchronization you either have to find the mutex that the",
    "start": "1904520",
    "end": "1910640"
  },
  {
    "text": "kernel doesn't export to you or you have to try to raise the dispatch",
    "start": "1910640",
    "end": "1917299"
  },
  {
    "text": "raise the Urkel level in your driver to dispatch level which will stop you from",
    "start": "1917299",
    "end": "1922340"
  },
  {
    "text": "getting scheduled out or stop anyone else from getting scheduled in however that solution you have to do it",
    "start": "1922340",
    "end": "1928820"
  },
  {
    "text": "across every single CPU on the system because Urkel's levels are CPU specific",
    "start": "1928820",
    "end": "1936080"
  },
  {
    "text": "so just because one CPUs in dispatch State the other CPU may not be",
    "start": "1936080",
    "end": "1943100"
  },
  {
    "text": "um so here's a list of how you would of the names of the mutexes in the windows kernel to modify the list of loaded",
    "start": "1943100",
    "end": "1951260"
  },
  {
    "text": "device drivers or to modify the list of processes they're on the slide",
    "start": "1951260",
    "end": "1956799"
  },
  {
    "text": "so since they're not exported we could find these by hard coding them however",
    "start": "1957559",
    "end": "1962600"
  },
  {
    "text": "they move around a lot so that's probably not a very good solution also we could search for a",
    "start": "1962600",
    "end": "1969200"
  },
  {
    "text": "known pattern in memory there's functions within the kernel that obviously have to use these mutexes to",
    "start": "1969200",
    "end": "1976760"
  },
  {
    "text": "schedule threads or just swap threads in and so on and so forth or add processes I should say",
    "start": "1976760",
    "end": "1982700"
  },
  {
    "text": "so you could search for a gnome pattern within memory and then you would locate",
    "start": "1982700",
    "end": "1988279"
  },
  {
    "text": "the um the mutex however this is it's somehow at clergy because you're",
    "start": "1988279",
    "end": "1994880"
  },
  {
    "text": "going to have to do it for every single OS because the functions may change on",
    "start": "1994880",
    "end": "1999980"
  },
  {
    "text": "the recompile the kernel so you have to be very careful and very meticulous in",
    "start": "1999980",
    "end": "2005440"
  },
  {
    "text": "all the versions of the OS that you want your rootkit to run upon so this",
    "start": "2005440",
    "end": "2011200"
  },
  {
    "text": "um Fu has code now it's not I haven't released it yet I have to integrate it",
    "start": "2011200",
    "end": "2016360"
  },
  {
    "text": "with uh Sherry Sparks she did uh the research into finding those known patterns",
    "start": "2016360",
    "end": "2023679"
  },
  {
    "text": "so I'll put that in Fu soon and hopefully upload it to rootkit.com",
    "start": "2023679",
    "end": "2030059"
  },
  {
    "text": "so besides hiding processes we also may want to elevate the privilege of our",
    "start": "2030399",
    "end": "2035620"
  },
  {
    "text": "token or just manipulate the token a bit to appear like another user",
    "start": "2035620",
    "end": "2041700"
  },
  {
    "text": "this will make if we appear as another user it could be difficult for some forensics to be able to tell what truly",
    "start": "2043059",
    "end": "2050080"
  },
  {
    "text": "happened on the box for instance if you have uh if the administrator has detailed process",
    "start": "2050080",
    "end": "2055419"
  },
  {
    "text": "tracking turned on in the windows of Event Viewer every time the process is either created or destroyed they can see",
    "start": "2055419",
    "end": "2062980"
  },
  {
    "text": "that action happen and also log who did it so if you've you know stolen someone's",
    "start": "2062980",
    "end": "2070000"
  },
  {
    "text": "password installed rootkit elevated privilege or whatever and you have",
    "start": "2070000",
    "end": "2075398"
  },
  {
    "text": "netcat running you know as Joe user well you just tipped off the sysadmin to",
    "start": "2075399",
    "end": "2082000"
  },
  {
    "text": "that something's up with the Joe user account because he probably shouldn't be running netcat",
    "start": "2082000",
    "end": "2087099"
  },
  {
    "text": "however if you make it look like system did it it's gonna be a lot harder for him to knock on someone's door or to revoke the",
    "start": "2087099",
    "end": "2094540"
  },
  {
    "text": "account because who why is system spawning this his immediate thoughts will be go to the um",
    "start": "2094540",
    "end": "2101260"
  },
  {
    "text": "list of services that are running on the box try to figure out if anyone's running a system and he'll think he's",
    "start": "2101260",
    "end": "2106660"
  },
  {
    "text": "been compromised by buffer overflow this could result in a couple weeks of",
    "start": "2106660",
    "end": "2112420"
  },
  {
    "text": "him trying to figure out exactly what happened so in order to modify a token I'll",
    "start": "2112420",
    "end": "2118780"
  },
  {
    "text": "explain a little bit about what's in a token it has a static portion and a variable length portion",
    "start": "2118780",
    "end": "2124480"
  },
  {
    "text": "the static portion has things like session IDs the list of users the list of uh or I should say a pointer to the",
    "start": "2124480",
    "end": "2131260"
  },
  {
    "text": "list of users or groups pointer to list of privileges",
    "start": "2131260",
    "end": "2136720"
  },
  {
    "text": "and also like privilege accountant Etc",
    "start": "2136720",
    "end": "2142320"
  },
  {
    "text": "so in the variable length portion of the token you have all the Privileges such as SE load device driver SE shut down",
    "start": "2143079",
    "end": "2151119"
  },
  {
    "text": "privilege SC debug so on and so forth you also have the users and groups and",
    "start": "2151119",
    "end": "2156940"
  },
  {
    "text": "the restricted SIDS I won't talk about restricted SIDS that was introduced new in 2000",
    "start": "2156940",
    "end": "2163720"
  },
  {
    "text": "um I haven't seen a lot of processes that really use tokens with restricted SIDS",
    "start": "2163720",
    "end": "2169980"
  },
  {
    "text": "so it's sort of hard to manipulate a token because you can't just grow the token in other words add to the bottom",
    "start": "2172960",
    "end": "2178900"
  },
  {
    "text": "of it because you don't know what's there so it could be a region of memory that's invalid it could also be some other",
    "start": "2178900",
    "end": "2185619"
  },
  {
    "text": "processes token that you can start stomping on and that's not a good idea",
    "start": "2185619",
    "end": "2191880"
  },
  {
    "text": "you could allocate a new region of memory and copy the users and group SIDS",
    "start": "2192579",
    "end": "2199000"
  },
  {
    "text": "to that new region of memory with your new Privileges and so forth however",
    "start": "2199000",
    "end": "2204400"
  },
  {
    "text": "um turns out that when the pro when the system goes to create a child process",
    "start": "2204400",
    "end": "2211240"
  },
  {
    "text": "it knows certain things about the token that I haven't totally figured out yet and does some mathematical calculations",
    "start": "2211240",
    "end": "2217839"
  },
  {
    "text": "or when the where the token is because it's trying to copy the parent token",
    "start": "2217839",
    "end": "2222880"
  },
  {
    "text": "into the child process and because of this mathematical calculation just changing the pointers",
    "start": "2222880",
    "end": "2230140"
  },
  {
    "text": "within the static region of the token will not work you either just get",
    "start": "2230140",
    "end": "2235780"
  },
  {
    "text": "garbage in the child processes token or in the worst case you can blue screen the Box",
    "start": "2235780",
    "end": "2242880"
  },
  {
    "text": "so my Approach was there's a lot of privileges that are within a token that aren't really all that useful because",
    "start": "2244060",
    "end": "2250300"
  },
  {
    "text": "they're marked as disabled by default so if I'm not using the privilege then why do I need it my tokens just taking",
    "start": "2250300",
    "end": "2257200"
  },
  {
    "text": "up space so I'll discard all these uh privileges that I'm not using to make room for",
    "start": "2257200",
    "end": "2264579"
  },
  {
    "text": "the SIDS or the new privileges I want to add",
    "start": "2264579",
    "end": "2269220"
  },
  {
    "text": "so we'll talk first about adding privileges to a token using the dcom method every token is represented by",
    "start": "2271900",
    "end": "2278079"
  },
  {
    "text": "lewid and attribute structure a liquid is a locally unique ID",
    "start": "2278079",
    "end": "2283680"
  },
  {
    "text": "the attribute is such as the the Privileges enabled the privilege is disabled or the Privileges enabled by",
    "start": "2283900",
    "end": "2291339"
  },
  {
    "text": "default that's what's contained in the attribute d word",
    "start": "2291339",
    "end": "2296859"
  },
  {
    "text": "so here's a graphical representation of a token there's the static portion in Gray the",
    "start": "2296859",
    "end": "2304060"
  },
  {
    "text": "red the red privileges are disabled and the blue ones are enabled they're not",
    "start": "2304060",
    "end": "2309579"
  },
  {
    "text": "ordered like that but just for the purposes of this graphic they're ordered",
    "start": "2309579",
    "end": "2314680"
  },
  {
    "text": "by disabled and enabled so if we want to add some new privileges",
    "start": "2314680",
    "end": "2319780"
  },
  {
    "text": "we have to first get rid of the disabled ones so what I did was I just moved those up",
    "start": "2319780",
    "end": "2326020"
  },
  {
    "text": "in memory because I want to keep those around now the gray box in the middle",
    "start": "2326020",
    "end": "2331079"
  },
  {
    "text": "represents the free space you can think of it as free space that we have to add",
    "start": "2331079",
    "end": "2336760"
  },
  {
    "text": "new privileges and I just sort of stomp those into memory there and now",
    "start": "2336760",
    "end": "2343839"
  },
  {
    "text": "our token has two new privileges and it's properly aligned and so on and so forth so that when that process",
    "start": "2343839",
    "end": "2350560"
  },
  {
    "text": "creates a child process it will inherit the token properly",
    "start": "2350560",
    "end": "2357660"
  },
  {
    "text": "groups and attributes are adding groups a little bit more difficult",
    "start": "2357700",
    "end": "2363099"
  },
  {
    "text": "because the there's a table in the token",
    "start": "2363099",
    "end": "2368220"
  },
  {
    "text": "there's a table in the token of pointers to all the SIDS and then the",
    "start": "2368220",
    "end": "2373900"
  },
  {
    "text": "Sid attribute so this is a sid that is required for the process Etc",
    "start": "2373900",
    "end": "2380619"
  },
  {
    "text": "however the um the SIDS are variable length and they're not actually in this table they're at the bottom of the table",
    "start": "2380619",
    "end": "2387460"
  },
  {
    "text": "and they're pointed to by the pcid member of the sit and attribute",
    "start": "2387460",
    "end": "2392680"
  },
  {
    "text": "structure so if you're adding a sid you have to patch up all the pointers in in the SIDS",
    "start": "2392680",
    "end": "2400300"
  },
  {
    "text": "uh in the token so that they point to the new SIDS and I'll show you what I mean by that",
    "start": "2400300",
    "end": "2407400"
  },
  {
    "text": "so we just freed up the memory we got rid of the SIDS that were there and we're gonna put them back",
    "start": "2407920",
    "end": "2415119"
  },
  {
    "text": "here's the Sid and uh attribute table coming back into memory the orange colors were the ones that",
    "start": "2415119",
    "end": "2421119"
  },
  {
    "text": "were there originally so we want to replace those because we want to maintain the same the",
    "start": "2421119",
    "end": "2427720"
  },
  {
    "text": "same privileges that we have or the same groups that we had before we just want to add new ones",
    "start": "2427720",
    "end": "2434160"
  },
  {
    "text": "so we change the pointer to point to where the city is now",
    "start": "2434200",
    "end": "2439480"
  },
  {
    "text": "now a new sit and attribute structure comes into memory",
    "start": "2439480",
    "end": "2444579"
  },
  {
    "text": "and its new Sid comes in and we're all patched up",
    "start": "2444579",
    "end": "2450160"
  },
  {
    "text": "so this will add any group you want you can specify hey add the system group to my",
    "start": "2450160",
    "end": "2457420"
  },
  {
    "text": "CMD process and you know then CMD has system a lot",
    "start": "2457420",
    "end": "2463180"
  },
  {
    "text": "of this is even functionality it's not exposed Through the Windows gooey so much",
    "start": "2463180",
    "end": "2468400"
  },
  {
    "text": "because you're just writing the memory so you can add any any Sid that you can um",
    "start": "2468400",
    "end": "2473440"
  },
  {
    "text": "track back to its binary representation you can add",
    "start": "2473440",
    "end": "2478079"
  },
  {
    "text": "see I also mentioned that you can fake out the Windows Event Viewer using dcom methodology",
    "start": "2479680",
    "end": "2485980"
  },
  {
    "text": "there's um the auth ID or the session ID that we saw on the static portion of the token",
    "start": "2485980",
    "end": "2491859"
  },
  {
    "text": "if you change that to one of there's three or four that are",
    "start": "2491859",
    "end": "2497740"
  },
  {
    "text": "static that never change they're actually declared in a Microsoft a header file in the ddk I believe",
    "start": "2497740",
    "end": "2504820"
  },
  {
    "text": "that one of them happens to be the system lewid so you can add when you log",
    "start": "2504820",
    "end": "2510099"
  },
  {
    "text": "onto a machine you hit control delete your session ID is supposed to be created uniquely there at that time",
    "start": "2510099",
    "end": "2518079"
  },
  {
    "text": "so the system lewid you can just hard code that into your token using the dcom",
    "start": "2518079",
    "end": "2523900"
  },
  {
    "text": "method or you can well in addition to that you have to make the first Sid in the table",
    "start": "2523900",
    "end": "2531040"
  },
  {
    "text": "of Sid and attributes you have to make it the system Sid or some other Sid in",
    "start": "2531040",
    "end": "2536619"
  },
  {
    "text": "order to become that person on the box this wasn't entirely uh clear to me at",
    "start": "2536619",
    "end": "2543099"
  },
  {
    "text": "first when I wrote the fu root kit I just changed the system lewid or changed",
    "start": "2543099",
    "end": "2548500"
  },
  {
    "text": "the auth ID or session ID to the system lewid and half of the Event Viewer was",
    "start": "2548500",
    "end": "2554140"
  },
  {
    "text": "faked out by it and the other half wasn't so sort of just uh halfway solution I had to go back and",
    "start": "2554140",
    "end": "2560020"
  },
  {
    "text": "figure out exactly how the Windows Event Viewer determined who the owner of the of the process was",
    "start": "2560020",
    "end": "2568140"
  },
  {
    "text": "and simply does that by looking at the first Sid within the Sid Sid and group",
    "start": "2568660",
    "end": "2574359"
  },
  {
    "text": "structure so using this method you can make",
    "start": "2574359",
    "end": "2579760"
  },
  {
    "text": "anything appear to be someone else however there's a caveat here you cannot just arbitrarily change that",
    "start": "2579760",
    "end": "2586960"
  },
  {
    "text": "auth ID to someone who's not currently logged in if you do that windows will eventually",
    "start": "2586960",
    "end": "2593319"
  },
  {
    "text": "blue screen because every so often it seems to look at that auth ID and they'll blue screen with this really",
    "start": "2593319",
    "end": "2600160"
  },
  {
    "text": "cool message I forget what it is right now but it more or less tells you that something's really screwed up in the",
    "start": "2600160",
    "end": "2606160"
  },
  {
    "text": "security here because that the auth ID that corresponds to that user doesn't",
    "start": "2606160",
    "end": "2612579"
  },
  {
    "text": "exist there is no user with that alt ID so that's a nice way to to go down",
    "start": "2612579",
    "end": "2620980"
  },
  {
    "text": "so if you want to detect a hidden process that was using the dcom method",
    "start": "2620980",
    "end": "2628680"
  },
  {
    "text": "what you could do is you could look at you could modify the swap context function that's in the kernel I don't",
    "start": "2628720",
    "end": "2634900"
  },
  {
    "text": "I'm not sure if it's uh exported I doubt it but you can find it and modify it what it's responsible for is putting",
    "start": "2634900",
    "end": "2642000"
  },
  {
    "text": "threads paging or swapping one thread out in favor of another thread that's",
    "start": "2642000",
    "end": "2647980"
  },
  {
    "text": "then to be executed there's a project from hunt and Brewbaker at Microsoft research",
    "start": "2647980",
    "end": "2654060"
  },
  {
    "text": "sponsored it and it's called detours for intercepting win32 binary functions",
    "start": "2654060",
    "end": "2660040"
  },
  {
    "text": "you could apply the same technology although it's for user mode apps you could apply the same Concepts in your",
    "start": "2660040",
    "end": "2666640"
  },
  {
    "text": "kernel for swap context so what you would do is you'd overwrite",
    "start": "2666640",
    "end": "2672760"
  },
  {
    "text": "the beginning of swap context to jump to your detour function",
    "start": "2672760",
    "end": "2678099"
  },
  {
    "text": "your deep tour function has a has a call into a trampoline function",
    "start": "2678099",
    "end": "2683740"
  },
  {
    "text": "the trampoline saved off the original bytes that got overwritten and then at the end the trampoline will jump into",
    "start": "2683740",
    "end": "2690099"
  },
  {
    "text": "the original function which was swap contacts in this case and then when swap context returns it'll",
    "start": "2690099",
    "end": "2697300"
  },
  {
    "text": "jump back into the um The Detour function so you could do",
    "start": "2697300",
    "end": "2704339"
  },
  {
    "text": "filtering or Sandy checking or whatever there so what we recommend is patching",
    "start": "2704339",
    "end": "2710260"
  },
  {
    "text": "swap context so that it looks at the ethread that's about to get scheduled and determines if it's appropriately",
    "start": "2710260",
    "end": "2717579"
  },
  {
    "text": "linked the EDI register at right at the beginning of swap context the EDI",
    "start": "2717579",
    "end": "2724180"
  },
  {
    "text": "register points to the thread that's coming into the kernel and the ESR register points to the thread that's",
    "start": "2724180",
    "end": "2730480"
  },
  {
    "text": "leaving the kernel so if you use those tricks to follow from a k thread back to the",
    "start": "2730480",
    "end": "2737140"
  },
  {
    "text": "e-process as we showed in the previous diagram then you could determine if the",
    "start": "2737140",
    "end": "2742540"
  },
  {
    "text": "process was appropriately linked if it wasn't never admit its threads into the",
    "start": "2742540",
    "end": "2747760"
  },
  {
    "text": "kernel to begin with or never schedule it to run I should say",
    "start": "2747760",
    "end": "2753540"
  },
  {
    "text": "there's other ways to detect it last year in black hat Vegas Joanna",
    "start": "2753700",
    "end": "2759460"
  },
  {
    "text": "Rutkowski or rakowska representative presentation about a little bit about",
    "start": "2759460",
    "end": "2764619"
  },
  {
    "text": "rootkits and she had the fu root kit in there and she had a novel ideal to how",
    "start": "2764619",
    "end": "2771160"
  },
  {
    "text": "to detect it and that was to look at all the thread cues that are on the system and determine if",
    "start": "2771160",
    "end": "2778599"
  },
  {
    "text": "it they point to a process that's uh hidden so that was her approach the only",
    "start": "2778599",
    "end": "2784480"
  },
  {
    "text": "problem uh that I saw with it and she agreed was that the these Q addresses",
    "start": "2784480",
    "end": "2790119"
  },
  {
    "text": "had to be hard-coded and they move around from version to version of the operating system",
    "start": "2790119",
    "end": "2797319"
  },
  {
    "text": "she has not ported to XP although there's a few people every kid.com",
    "start": "2797319",
    "end": "2802420"
  },
  {
    "text": "who've tried to Port at XP and I've had some problems with getting that to happen",
    "start": "2802420",
    "end": "2807760"
  },
  {
    "text": "it seems that F uh XP has a few different thread cues that Windows 2000",
    "start": "2807760",
    "end": "2813339"
  },
  {
    "text": "did not and Windows 2000 has a few that XP does not so it's hard to find every",
    "start": "2813339",
    "end": "2820480"
  },
  {
    "text": "single thread on the system at this point because it's totally undocumented you just have to reverse engineer the kernel",
    "start": "2820480",
    "end": "2826720"
  },
  {
    "text": "if anybody wants to take up that project and contribute to rootkit.com I'm sure",
    "start": "2826720",
    "end": "2832060"
  },
  {
    "text": "there'll be a lot of people that be happy um I won't get into this too much you",
    "start": "2832060",
    "end": "2837520"
  },
  {
    "text": "can detect hidden processes in much the same way in Linux you could use some kind of injectso library or so forth",
    "start": "2837520",
    "end": "2844000"
  },
  {
    "text": "except in the kernel and then oops then go back and check for the",
    "start": "2844000",
    "end": "2851380"
  },
  {
    "text": "previous task and next task to make sure the the task structures are appropriately linked",
    "start": "2851380",
    "end": "2858000"
  },
  {
    "text": "now we're going to try to have a few demonstrations of the fu root kit and see see what happens",
    "start": "2859119",
    "end": "2866760"
  },
  {
    "text": "okay you can ask Fu to list all the processes on the box",
    "start": "2910839",
    "end": "2916780"
  },
  {
    "text": "this is this is better than um asking task manager because if you're",
    "start": "2916780",
    "end": "2924220"
  },
  {
    "text": "using if if there's a root Kettle in the box that's using hooking techniques Fu just walks the list of um e-process",
    "start": "2924220",
    "end": "2933339"
  },
  {
    "text": "blocks in memory so it never ask any API what processes you're running so there's",
    "start": "2933339",
    "end": "2938980"
  },
  {
    "text": "never a problem as far as filtering in that case so unless they're using dcom you can see",
    "start": "2938980",
    "end": "2945599"
  },
  {
    "text": "processes that are being hidden by filtering that's just one nice thing that Fu does",
    "start": "2945599",
    "end": "2953818"
  },
  {
    "text": "if you want to hide a process you do Fu Dash pH and then the PID number",
    "start": "2969460",
    "end": "2975280"
  },
  {
    "text": "and here I'm trying to hide the system process if it goes away you should see",
    "start": "2975280",
    "end": "2980940"
  },
  {
    "text": "obviously it disappear from task manager and if the Box continues the run then it",
    "start": "2980940",
    "end": "2986619"
  },
  {
    "text": "was successful so systems gone system can't even see",
    "start": "2986619",
    "end": "2993880"
  },
  {
    "text": "system this can provide a few different problems if you're doing some K wait for",
    "start": "2993880",
    "end": "3000359"
  },
  {
    "text": "single object and you're waiting on some things within the system process this can have interesting results",
    "start": "3000359",
    "end": "3008539"
  },
  {
    "text": "this is a process Explorer from CIS internals just go use it my CMD",
    "start": "3020400",
    "end": "3029599"
  },
  {
    "text": "cmd.exe is paid 3 16 there and I'll show you the token",
    "start": "3031760",
    "end": "3040039"
  },
  {
    "text": "so down at the bottom there's no system group within there",
    "start": "3040680",
    "end": "3045839"
  },
  {
    "text": "you see here that a lot of these privileges are disabled by default",
    "start": "3045839",
    "end": "3051300"
  },
  {
    "text": "there's in fact only five enabled privileges",
    "start": "3051300",
    "end": "3056240"
  },
  {
    "text": "so if I go to cmd.exe that's running here try regedit",
    "start": "3057359",
    "end": "3064200"
  },
  {
    "text": "32 you'll see I don't have access to the",
    "start": "3064200",
    "end": "3069480"
  },
  {
    "text": "security because I have to implicitly give myself access to that or I have to be in the",
    "start": "3069480",
    "end": "3076800"
  },
  {
    "text": "system group which I'm not",
    "start": "3076800",
    "end": "3081260"
  },
  {
    "text": "so let's try to add the um the system group to my pid316.",
    "start": "3088500",
    "end": "3095700"
  },
  {
    "text": "now if I type reg edit you'll see that the security key is no",
    "start": "3101940",
    "end": "3108660"
  },
  {
    "text": "longer grayed out so I do have the system group within my",
    "start": "3108660",
    "end": "3115260"
  },
  {
    "text": "CMD process now and that process spawned reg edit so it got properly inherited",
    "start": "3115260",
    "end": "3122420"
  },
  {
    "text": "we can look at the token there you see there's only five privileges because I got rid of all the",
    "start": "3123420",
    "end": "3128520"
  },
  {
    "text": "ones that were disabled and at the bottom of my groups there's now",
    "start": "3128520",
    "end": "3135780"
  },
  {
    "text": "the system Sid or the system group so that process is system",
    "start": "3135780",
    "end": "3143359"
  },
  {
    "text": "what else do we have we can also now in a few",
    "start": "3145319",
    "end": "3150960"
  },
  {
    "text": "I added away to high drivers if you're running XP or if you're",
    "start": "3150960",
    "end": "3156660"
  },
  {
    "text": "running Windows 2000 professional we had a problem in the class we found a bug in the way that I was",
    "start": "3156660",
    "end": "3163380"
  },
  {
    "text": "finding the list of loaded device drivers that's a really simple bug and",
    "start": "3163380",
    "end": "3169079"
  },
  {
    "text": "it will be fixed probably by time my plane touches down",
    "start": "3169079",
    "end": "3174558"
  },
  {
    "text": "so just wait off till next week to download Fu if you want to play with it",
    "start": "3174720",
    "end": "3180318"
  },
  {
    "text": "oh so if you can list and high drivers I",
    "start": "3181800",
    "end": "3186839"
  },
  {
    "text": "didn't make a nice uh I didn't display it in the command line window I just used the debug View",
    "start": "3186839",
    "end": "3194119"
  },
  {
    "text": "so here this is the list of all the drivers on the system and if you found that by walking it's similar to the",
    "start": "3195900",
    "end": "3202920"
  },
  {
    "text": "e-process struct there's a module entry structure within the kernel that's linked with list entries and you can",
    "start": "3202920",
    "end": "3210359"
  },
  {
    "text": "just run around this list and look for whatever you want and then",
    "start": "3210359",
    "end": "3216559"
  },
  {
    "text": "D-Link the object from the others so if I want to hide",
    "start": "3216559",
    "end": "3223079"
  },
  {
    "text": "like ipsec.sys I go fu Dash",
    "start": "3223079",
    "end": "3229079"
  },
  {
    "text": "um PhD ipsec.sys and this is case sensitive I",
    "start": "3229079",
    "end": "3235079"
  },
  {
    "text": "believe now ipsec was below this VMware driver",
    "start": "3235079",
    "end": "3243300"
  },
  {
    "text": "and above the USB store.sys",
    "start": "3243300",
    "end": "3250680"
  },
  {
    "text": "that'll be important or it's number 102.",
    "start": "3250800",
    "end": "3256020"
  },
  {
    "text": "so if I list it again hopefully at 102 yeah it's not there",
    "start": "3256020",
    "end": "3261780"
  },
  {
    "text": "anymore so there's some that say okay well we can detect Fu because we can see its",
    "start": "3261780",
    "end": "3268140"
  },
  {
    "text": "driver but I made no attempt in the original version to hide the driver and even now like the default install does",
    "start": "3268140",
    "end": "3275520"
  },
  {
    "text": "not try to hide the driver because if you if you is more of a research project",
    "start": "3275520",
    "end": "3280680"
  },
  {
    "text": "than an actual full-blown rootkit if you wanted to hide the file on disk",
    "start": "3280680",
    "end": "3287040"
  },
  {
    "text": "which is like after a few is released Symantec within about 11 days had a 14",
    "start": "3287040",
    "end": "3293160"
  },
  {
    "text": "or 15 page white paper on fu and that was sort of cool",
    "start": "3293160",
    "end": "3299359"
  },
  {
    "text": "but the gentleman missed the point even in the readme it says I make no attempt to hide the driver and he was looking",
    "start": "3301140",
    "end": "3307680"
  },
  {
    "text": "for it in the list of drivers and he was also looking at it on the file system so",
    "start": "3307680",
    "end": "3314339"
  },
  {
    "text": "it could hide itself in more ways but I don't want to release all that",
    "start": "3314339",
    "end": "3321319"
  },
  {
    "text": "so that's the conclusion of my talk we've shown that it's root kits are no longer just some Trojan programs on the",
    "start": "3328319",
    "end": "3335700"
  },
  {
    "text": "file system they're no longer just hooking because Vice and other tools will detect those now",
    "start": "3335700",
    "end": "3343260"
  },
  {
    "text": "they're acting as part of the trusted Computing base and with dcom there is no",
    "start": "3343260",
    "end": "3348900"
  },
  {
    "text": "end what you want to do with it more or less it's up to your imagination and how much reverse engineering skills you have",
    "start": "3348900",
    "end": "3356940"
  },
  {
    "text": "so who knows what will be next so any questions",
    "start": "3356940",
    "end": "3363078"
  },
  {
    "text": "okay well with that thanks",
    "start": "3365520",
    "end": "3368839"
  }
]