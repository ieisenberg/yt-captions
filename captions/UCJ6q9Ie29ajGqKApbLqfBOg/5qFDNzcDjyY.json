[
  {
    "text": "hi everyone welcome to Black at briefings this is the turbo talks 20-minute sessions uh this is a Mike",
    "start": "29519",
    "end": "36879"
  },
  {
    "text": "Palm ranning he's going to be talking about injection flaws uh please turn off your cell",
    "start": "36879",
    "end": "43320"
  },
  {
    "text": "phones hi everyone thanks for coming I'm Mike pom ring and this talk is injection flaws stop validating your input uh how",
    "start": "43960",
    "end": "51120"
  },
  {
    "text": "many of you in the audience are familiar with SQL injection or cross-site scripting flaws how many of you have",
    "start": "51120",
    "end": "56879"
  },
  {
    "text": "authored code introducing one or both of those flaws into to an application it's very bold of you how",
    "start": "56879",
    "end": "62800"
  },
  {
    "text": "many of you have come across such code in a review or or fixed such code or have just been disgusted by the",
    "start": "62800",
    "end": "68640"
  },
  {
    "text": "appearance of such code in the daily vulnerability feeds okay uh this presentation was",
    "start": "68640",
    "end": "75000"
  },
  {
    "text": "originally about 50 minutes so we're going to start on slide six we're going to skip the background uh which pretty",
    "start": "75000",
    "end": "82119"
  },
  {
    "text": "much establishes that we will only be focusing on SQL injection and cross- sight scripting the two most common",
    "start": "82119",
    "end": "87799"
  },
  {
    "text": "kinds of injection flaws we see exploit and uh whether or not we can do anything a little bit differently about them the",
    "start": "87799",
    "end": "94680"
  },
  {
    "text": "conventional wisdom regarding these two flaws is that they are input validation errors now this this is a very common",
    "start": "94680",
    "end": "101159"
  },
  {
    "text": "sense and pervasive taxonomy and it it makes sense you know I I intuitively",
    "start": "101159",
    "end": "106439"
  },
  {
    "text": "want to regard these as input validation errors it's kind of enshrined uh for me",
    "start": "106439",
    "end": "111479"
  },
  {
    "text": "at least in the security focused bug TR ID classification system if you chase down your favorite uh SQL injection or",
    "start": "111479",
    "end": "118840"
  },
  {
    "text": "cross-site scripting vulnerability and go to the security Focus P that's bid they'll have it classified as an input",
    "start": "118840",
    "end": "124560"
  },
  {
    "text": "validation error um it's it's in the language that we use to talk about these things the two cve IDs up there I think",
    "start": "124560",
    "end": "131760"
  },
  {
    "text": "uh 40 regards um uh an open source PHP application called cacti which is a",
    "start": "131760",
    "end": "137760"
  },
  {
    "text": "front end to the Rd tool if any of you are familiar with that and the the latter is a project I'm sorry that was a",
    "start": "137760",
    "end": "143480"
  },
  {
    "text": "SQL injection flaw in cacti and the latter is a cross-site scripting vulnerability in umnet Nuke and I don't",
    "start": "143480",
    "end": "150959"
  },
  {
    "text": "mean the cve ID uh cve entries themselves uh uh perpetuate this language they do not but the original",
    "start": "150959",
    "end": "156120"
  },
  {
    "text": "advisories uh one from I defense and one from an unaffiliated security researcher say quite plainly due to a lack of input",
    "start": "156120",
    "end": "163280"
  },
  {
    "text": "validation this application is vulnerable uh in the case of cacti there are there are at least two OS vendor",
    "start": "163280",
    "end": "169360"
  },
  {
    "text": "follow-up advisories from uh Debian and gentu I think that that mirror the same wording you know if only the input",
    "start": "169360",
    "end": "176440"
  },
  {
    "text": "validation had been better this wouldn't have happened there was an error in input validation um poor cacti had a counter advisory to",
    "start": "176440",
    "end": "184319"
  },
  {
    "text": "these advisories from Stefan Esser of the Harden PHP project this was all um",
    "start": "184319",
    "end": "190159"
  },
  {
    "text": "check out esser's work in the last this month I think he's got a lot of advisories that have come up bug track",
    "start": "190159",
    "end": "195760"
  },
  {
    "text": "and full disclosure they're really get at some of the uh the subtle attacks you can do with SQL injection and cross-site",
    "start": "195760",
    "end": "202159"
  },
  {
    "text": "scripting but but again he says you know the input validation routines uh uh put forth to fix the first problem we're not",
    "start": "202159",
    "end": "208120"
  },
  {
    "text": "good enough and so as program we're hearing something we've been hearing for a long long time validate your input",
    "start": "208120",
    "end": "214640"
  },
  {
    "text": "validate your input oh you were bitten by that bug oh if only you'd validated your input just a little bit better that wouldn't have happened um you know",
    "start": "214640",
    "end": "222239"
  },
  {
    "text": "arguably uh we've been hearing this since at least the gnu fuzz tests at the start of of the last decade it's the",
    "start": "222239",
    "end": "228599"
  },
  {
    "text": "same kind of principle right we all agree validating your input is good uh input can uh uh pervert uh the program",
    "start": "228599",
    "end": "234879"
  },
  {
    "text": "if it if it's not as you expect but um boy it just just doesn't seem to be helping the situation I kind of think of",
    "start": "234879",
    "end": "241560"
  },
  {
    "text": "it as running up to the scene of a recent car accident throwing open the door and seeing the driver in there kind",
    "start": "241560",
    "end": "246640"
  },
  {
    "text": "of groggy and injured seeing that the driver is not wearing a seat Bel the driver has no airbags and saying wow if",
    "start": "246640",
    "end": "251879"
  },
  {
    "text": "only you'd driven a little better this wouldn't have happened um maybe maybe there's something else we can do to uh",
    "start": "251879",
    "end": "257639"
  },
  {
    "text": "to mitigate these attacks um if we regard this as input validation errors what what kind of mental model does the",
    "start": "257639",
    "end": "263880"
  },
  {
    "text": "coder have when when he when he says input validation error because when you say something is an input validation error you're your class class ifying it",
    "start": "263880",
    "end": "270120"
  },
  {
    "text": "on the basis of uh a defense you know if we say it's an injection flaw we're classifying on the basis of the the",
    "start": "270120",
    "end": "276520"
  },
  {
    "text": "mechanism of exploit but when we say it's input validation we're saying oh no this classification is one of Defense",
    "start": "276520",
    "end": "282039"
  },
  {
    "text": "the technique is to validate your input a little better and I I think what it really does is keep our eye on the attacker out there you know uh kind of",
    "start": "282039",
    "end": "289199"
  },
  {
    "text": "kind of adopt a perimeter model where we are baggage screeners or or front desk security guards saying I'm going to stop",
    "start": "289199",
    "end": "296000"
  },
  {
    "text": "the bad stuff from getting in and let just the good stuff go behind me and so",
    "start": "296000",
    "end": "301199"
  },
  {
    "text": "uh I'm not sure that that's terribly effective and certainly it fails let's let's let's take a look at validation",
    "start": "301199",
    "end": "306800"
  },
  {
    "text": "and see if it's uh not everything we think it's cracked up to be rethinking input validation uh the first thing you",
    "start": "306800",
    "end": "312840"
  },
  {
    "text": "always hear in the validation debate is the complaints about undesirable data set restrictions particularly when",
    "start": "312840",
    "end": "318759"
  },
  {
    "text": "people can't make a distinction between encoding data for representation in a particular subsystem and getting rid of",
    "start": "318759",
    "end": "324680"
  },
  {
    "text": "characters that might pervert it on its way to that subsystem um so we don't want that tricky backslash to get into",
    "start": "324680",
    "end": "331039"
  },
  {
    "text": "our application because we know that can be used for SQL injection but we need the backslash if we're representing",
    "start": "331039",
    "end": "336360"
  },
  {
    "text": "Windows path names or or Windows fully qualified usernames um if we're writing a a bulletin board application for",
    "start": "336360",
    "end": "343800"
  },
  {
    "text": "algebraists or something we're going to need a lot of punctuation characters we're going to need to let greater than and less than appear so they can have",
    "start": "343800",
    "end": "350520"
  },
  {
    "text": "the kinds of discussions they want we can't just unilaterally exclude these and there's a very predictable debate um",
    "start": "350520",
    "end": "357240"
  },
  {
    "text": "that I I I'm sure many of you agree with me has been done done to death do we Whit list the characters do we Blacklist",
    "start": "357240",
    "end": "362680"
  },
  {
    "text": "the characters have we have we exhaustively and correctly enumerated the set of characters that we want to",
    "start": "362680",
    "end": "367800"
  },
  {
    "text": "allow or disallow what if we're wrong uh it just goes on and on uh the second",
    "start": "367800",
    "end": "373120"
  },
  {
    "text": "thing I don't really like about validation is the Primacy of regular Expressions regular expressions are King",
    "start": "373120",
    "end": "378319"
  },
  {
    "text": "now I love regular Expressions but I think they're kind of a complicated mini programming language and uh many of you",
    "start": "378319",
    "end": "383759"
  },
  {
    "text": "I'm sure have seen regular Expressions uh authored by others perhaps authored by yourself um that uh you look at them",
    "start": "383759",
    "end": "389960"
  },
  {
    "text": "and then they're just obviously not right how many times have you observed U this kind of back and forth you know we",
    "start": "389960",
    "end": "395240"
  },
  {
    "text": "need something that'll validate a simple token coder says okay A through Z big a through big Z 0 through 9 well hang on",
    "start": "395240",
    "end": "401400"
  },
  {
    "text": "there rookie you forgot to Anchor that oh okay there you go oh wait a minute I'm sorry we can't have a through z a",
    "start": "401400",
    "end": "406759"
  },
  {
    "text": "through z 0 through 9 we we we must restrict it so that the first character is not a number you know say it's a c",
    "start": "406759",
    "end": "412120"
  },
  {
    "text": "style token um okay so we we'll put two atoms in our regular expression and uh",
    "start": "412120",
    "end": "417240"
  },
  {
    "text": "it gets a little more complicated and someone steps in and say says okay accept that and also accept a dotted quad address um which is uh one of the",
    "start": "417240",
    "end": "424479"
  },
  {
    "text": "uh notoriously difficult things to do people have you know um masculinity",
    "start": "424479",
    "end": "430000"
  },
  {
    "text": "contests uh uh for how cool their their regular expression for validating dotted quad IP addresses are um and programmers",
    "start": "430000",
    "end": "436759"
  },
  {
    "text": "don't have uh sufficient training I don't think in regular expressions and many of them don't want it and so we see",
    "start": "436759",
    "end": "442199"
  },
  {
    "text": "a lot of cargo cult application of regular Expressions you know this this Rex appears to safely validate input uh",
    "start": "442199",
    "end": "448680"
  },
  {
    "text": "in this application my data types are kind of similar I'll lift it maybe maybe translate it from",
    "start": "448680",
    "end": "453879"
  },
  {
    "text": "Pearl into whatever I'm using Java regular expressions and uh and I'll go from there and uh uh it's not it's not",
    "start": "453879",
    "end": "460720"
  },
  {
    "text": "being done quite correctly uh validation problem that that's shocking but but uh quite",
    "start": "460720",
    "end": "467759"
  },
  {
    "text": "prevalent I think is validating the wrong thing at the wrong time um people are probably not mentally diagramming",
    "start": "467759",
    "end": "474319"
  },
  {
    "text": "the flow of data through their application you know data comes in off an input Channel you have layer six concerns about the presentation you need",
    "start": "474319",
    "end": "480400"
  },
  {
    "text": "to get it into some kind of normalized state and and and uh Denude it of any kind of encoding transport that it's had",
    "start": "480400",
    "end": "487680"
  },
  {
    "text": "then you can apply your validation routines then you can inspect it to see that it's what you want then you get",
    "start": "487680",
    "end": "492919"
  },
  {
    "text": "ready to pass that data to the output subsystem it's a SQL database it's a it's an end user browser you again have",
    "start": "492919",
    "end": "499680"
  },
  {
    "text": "a layer six concern again you have to encode it properly for that output mechanism uh we've all seen the the",
    "start": "499680",
    "end": "505000"
  },
  {
    "text": "vulnerability announcement on on bug tracker full disclosure say where a CGI",
    "start": "505000",
    "end": "510120"
  },
  {
    "text": "script is vulnerable to you know script alert I've got your cookies and scripts I don't mean to trivialize that those of",
    "start": "510120",
    "end": "515640"
  },
  {
    "text": "you who saw um Jeremiah Grossman's fishing with super bait presentation know that cross-site scripting is no no",
    "start": "515640",
    "end": "521479"
  },
  {
    "text": "laughing matter um and the attack is ineffective when we simply type um less",
    "start": "521479",
    "end": "528040"
  },
  {
    "text": "than script greater than and go on but it is effective when we encode those same characters for HTTP and that's just",
    "start": "528040",
    "end": "534800"
  },
  {
    "text": "ridiculous those of you who have done CGI programming know that what must be going on on is the application coder is",
    "start": "534800",
    "end": "541000"
  },
  {
    "text": "reaching behind his CGI abstraction to get to the raw text submitted by the web",
    "start": "541000",
    "end": "546240"
  },
  {
    "text": "server still encoded in HTTP still still with all of its transport Garb a and",
    "start": "546240",
    "end": "551560"
  },
  {
    "text": "applying the validation there and then later we'll probably be using the CGI API to pluck individual tokens you know",
    "start": "551560",
    "end": "558279"
  },
  {
    "text": "what was the value of that input variable um where where other Transformations are occurring and that's",
    "start": "558279",
    "end": "564320"
  },
  {
    "text": "just ridiculous um you know we we have two two passes that that we really care about in the application where the data",
    "start": "564320",
    "end": "570240"
  },
  {
    "text": "comes in data goes out we have the first passive validation where we want to make sure that the data is the correct data",
    "start": "570240",
    "end": "576320"
  },
  {
    "text": "type you know do do your monetary Fields look like currency representations do your strings look like strings and then",
    "start": "576320",
    "end": "582720"
  },
  {
    "text": "we have the second concern of validation which is to see that the data doesn't have uh syntactical meta characters that",
    "start": "582720",
    "end": "589279"
  },
  {
    "text": "are going to confound the output device that are going to screw up uh what we intend to do on the SQL server or in the",
    "start": "589279",
    "end": "595600"
  },
  {
    "text": "browser my favorite validation misstep you see this every every once in a while on the vulnerability news feeds is the",
    "start": "595600",
    "end": "601920"
  },
  {
    "text": "pre-encoded attack you know we're we're trying to attack a web application we want to get a a JavaScript protocol",
    "start": "601920",
    "end": "608640"
  },
  {
    "text": "Handler in we know the web application is dynamically generating an a tag and we can control the the value of the HF",
    "start": "608640",
    "end": "615480"
  },
  {
    "text": "attribute um so we T try JavaScript doesn't work maybe we're kicked out of the web application we try JavaScript in",
    "start": "615480",
    "end": "622399"
  },
  {
    "text": "uppercase doesn't work oh this is a clever programmer he's he's case insensitively looking for JavaScript um",
    "start": "622399",
    "end": "628880"
  },
  {
    "text": "and and we think well he's probably not encoding the output just prior to echoing it to the browser what if we do",
    "start": "628880",
    "end": "635399"
  },
  {
    "text": "it for him what if we turn the C and the colon into their HTML escapes now you",
    "start": "635399",
    "end": "641120"
  },
  {
    "text": "know the the the coder's filter sees the literal string of bytes j a v as Ampersand Hash 99 and so forth um and",
    "start": "641120",
    "end": "648839"
  },
  {
    "text": "does not see the token JavaScript lets it right on through and this renders just fine in the browser the alert pops",
    "start": "648839",
    "end": "654600"
  },
  {
    "text": "up the cookies are stolen it's Calamity similarly with relational database systems if you are a beginner to perhaps",
    "start": "654600",
    "end": "662480"
  },
  {
    "text": "an intermediate SQL programmer I suggest you take a look at the full grammar supported by your SQL server and I",
    "start": "662480",
    "end": "669040"
  },
  {
    "text": "expect you will find it to be kind of a an exotic superset of of what you know",
    "start": "669040",
    "end": "674240"
  },
  {
    "text": "sterile an csql is um what are the quoting and escaping conventions how do you escape a quote within a quoted",
    "start": "674240",
    "end": "680200"
  },
  {
    "text": "string do you backslash it do you double quote it uh what does it do with hex literals that's an interesting one to see does it support interpolated",
    "start": "680200",
    "end": "686519"
  },
  {
    "text": "variables kind of like the shell um if there's any wiggle room between the data",
    "start": "686519",
    "end": "692399"
  },
  {
    "text": "that you're going to pass to between the data that you're going to pass to your subsystem seal server or or the output",
    "start": "692399",
    "end": "698440"
  },
  {
    "text": "browser and uh um uh that that subsystems understanding of meta",
    "start": "698440",
    "end": "703720"
  },
  {
    "text": "characters the attackers are going to find out um they're going to try automated methods to to discover this",
    "start": "703720",
    "end": "709279"
  },
  {
    "text": "the attackers at the end of the day fundamentally know the inner workings of these things a lot better than we do most coders uh the final thing that's",
    "start": "709279",
    "end": "715920"
  },
  {
    "text": "tough about validation and raise your hand if this has affected you it lacks recognition uh it certainly affected me",
    "start": "715920",
    "end": "721839"
  },
  {
    "text": "can't see the future uh many of the Deferred or second order attacks uh that we that we see uh with these injection",
    "start": "721839",
    "end": "727800"
  },
  {
    "text": "flaws I I think are attributable to coders just focusing on what they're doing with the data right then and there you know they're not thinking about",
    "start": "727800",
    "end": "733720"
  },
  {
    "text": "what's going to happen once they get rid of it they're they're they're throwing it out to another subsystem and that'll be somebody else's problem later of",
    "start": "733720",
    "end": "739920"
  },
  {
    "text": "course you could argue that you know the that the problem is actually later when they read it back in um we'll get to that uh even uh where the output",
    "start": "739920",
    "end": "747519"
  },
  {
    "text": "subsystem is known and fixed the output subsystem is not really fixed um end",
    "start": "747519",
    "end": "752880"
  },
  {
    "text": "user browsers are a great example those of you who remember Gobles security advisory number 33 um Gobles details a",
    "start": "752880",
    "end": "759720"
  },
  {
    "text": "kind of JavaScript entity encoding that's only as far as I know supported by Netscape four I think it is it's a",
    "start": "759720",
    "end": "766480"
  },
  {
    "text": "it's a pretzel curly brace uh alert I've got your cookies um you know if your if",
    "start": "766480",
    "end": "772079"
  },
  {
    "text": "your validation routines are just looking for kind of classical HTML ordinary ecma script uh uh attributes it",
    "start": "772079",
    "end": "778600"
  },
  {
    "text": "won't see that uh similarly your it Department might suddenly decide to bring you into 2003 by upgrading that",
    "start": "778600",
    "end": "784399"
  },
  {
    "text": "MySQL server that they've had running since 200000 um you know we do things slowly um and uh the the the quoting and",
    "start": "784399",
    "end": "791240"
  },
  {
    "text": "escaping uh uh conventions are suddenly a little bit different a little bit improved variables interpolated variables have been introduced in the",
    "start": "791240",
    "end": "797440"
  },
  {
    "text": "SQL Server input sources can also change which is a very interesting Riff on this",
    "start": "797440",
    "end": "802519"
  },
  {
    "text": "um particularly as complicated projects are maintained and extended uh cacti",
    "start": "802519",
    "end": "807959"
  },
  {
    "text": "actually the the Stefan Esser counter advisory noted that the the input validation routine that was developed",
    "start": "807959",
    "end": "814360"
  },
  {
    "text": "for cacti was applied to the underscore request variable whereas the actual application was uh using the the value",
    "start": "814360",
    "end": "820680"
  },
  {
    "text": "of user supplied input from the underscore get variable those of you who are not familiar with PHP there are many",
    "start": "820680",
    "end": "825959"
  },
  {
    "text": "different ways to pass input into the PHP uh uh application and uh requesting",
    "start": "825959",
    "end": "831279"
  },
  {
    "text": "get are kind of magic variables that represent different views of the HTTP request and simply put they were",
    "start": "831279",
    "end": "836880"
  },
  {
    "text": "validating the wrong input stream they did their valid check over here their use over here and they they pulled the",
    "start": "836880",
    "end": "841959"
  },
  {
    "text": "input from different sources the worst thing about validation is that no one actually does it um",
    "start": "841959",
    "end": "848000"
  },
  {
    "text": "validation is inspectional right uh in in almost any uh outside of web",
    "start": "848000",
    "end": "853120"
  },
  {
    "text": "application security when we're talking about validating something we don't mean we're transforming it we mean that we",
    "start": "853120",
    "end": "858320"
  },
  {
    "text": "are establishing its correctness or soundness right we we are not making a material change to it but",
    "start": "858320",
    "end": "864560"
  },
  {
    "text": "um you know that's not what we mean when we talk about this in a a web application security context and part of",
    "start": "864560",
    "end": "870399"
  },
  {
    "text": "it is perhaps because nobody has the patience for it I certainly don't I don't want to have to develop a system whereby if I see a bad character and a",
    "start": "870399",
    "end": "877120"
  },
  {
    "text": "username I have to report back to the user that the username was rejected for this reason um please try again without",
    "start": "877120",
    "end": "883839"
  },
  {
    "text": "that character I don't want to have to develop the logging and auditing subsystem for this introduce a lot of complexity to support this I'd rather",
    "start": "883839",
    "end": "890079"
  },
  {
    "text": "just have kind of a straight through flow where the data comes in I do something to make it safe and then I just keep going on and on so what do we",
    "start": "890079",
    "end": "896800"
  },
  {
    "text": "do we mography the data we transform form it and we read things like the best practice is to strip special characters",
    "start": "896800",
    "end": "902959"
  },
  {
    "text": "that's a best practice from a document written this year just look for anything that might be kind of a syntactic meta",
    "start": "902959",
    "end": "908240"
  },
  {
    "text": "and and take it right out um there are three models for data validation now with OAS guide version four there are",
    "start": "908240",
    "end": "914079"
  },
  {
    "text": "four models of data validation um accept the data okay we've identified it as good we'll go on reject the data we've",
    "start": "914079",
    "end": "920639"
  },
  {
    "text": "identified it as bad we will invoke our error handling routine and communicate that back to the caller or sanitize the",
    "start": "920639",
    "end": "926639"
  },
  {
    "text": "data do something to the data to make it different um and you see regular Expressions come back here with a Vengeance uh you know the the said style",
    "start": "926639",
    "end": "934800"
  },
  {
    "text": "s/ notation is used pretty extensively in Pearl cgis to get rid of those terrible characters um I think in",
    "start": "934800",
    "end": "941240"
  },
  {
    "text": "general we've seen that the the client side approach to input validation has left uh We've brought it indoors um you",
    "start": "941240",
    "end": "947880"
  },
  {
    "text": "know we we've taken our our regular expressions and our length checks and whatnot and we've put them on the server and that's good but we're still we're",
    "start": "947880",
    "end": "953880"
  },
  {
    "text": "still kind of looking outside we're still focusing on the attacker we're we're not paying attention to the the subsystems that are actually going to be",
    "start": "953880",
    "end": "960240"
  },
  {
    "text": "perverted by the the input and uh I I think in the discourse there is a real conflation of terms when people say",
    "start": "960240",
    "end": "966560"
  },
  {
    "text": "stripping or sanitizing or scrubbing or filtering or validating or encoding I do not believe that it is clear uh uh to uh",
    "start": "966560",
    "end": "974240"
  },
  {
    "text": "collection of five people what exactly is meant um after uh uh the fishing uh",
    "start": "974240",
    "end": "979519"
  },
  {
    "text": "Speech a number of us descended on Jeremiah and uh tried to talk about uh",
    "start": "979519",
    "end": "984720"
  },
  {
    "text": "defense strategies and uh it it there substantive confusion it took a long",
    "start": "984720",
    "end": "990839"
  },
  {
    "text": "time to figure out where we were talking about a hypothetical at were we in the the input routine itself were we in the",
    "start": "990839",
    "end": "996600"
  },
  {
    "text": "canonicalization routine where we actually doing validation because some people were talking about sanitizing",
    "start": "996600",
    "end": "1001920"
  },
  {
    "text": "some people were talking about filtering some people it's not not quite clear to people what's what's going on here and",
    "start": "1001920",
    "end": "1007240"
  },
  {
    "text": "that's not a good thing so let let's turn it around let's let's not try to fix that problem let's not try to disambiguate let's just forget about it",
    "start": "1007240",
    "end": "1013399"
  },
  {
    "text": "and do something else um let's let's not focus on input let's focus on output this is our last chance to offend right",
    "start": "1013399",
    "end": "1019240"
  },
  {
    "text": "your web application uh uh firewall failed your server hardening module was misconfigured or shut off or or it was",
    "start": "1019240",
    "end": "1025839"
  },
  {
    "text": "tricked um your input validation routines are totally broken they were written by that noob in the other",
    "start": "1025839",
    "end": "1030918"
  },
  {
    "text": "cubicle he doesn't know what he's doing um and you're in this one segment of code where you're about to hand the data",
    "start": "1030919",
    "end": "1036079"
  },
  {
    "text": "off to the subsystem what are you going to do we're looking for something that is a discreet and tactical coding",
    "start": "1036079",
    "end": "1041839"
  },
  {
    "text": "practice we want something very specific we don't just want to tell people validate your input better we want to say do this exactly uh we want something",
    "start": "1041839",
    "end": "1049640"
  },
  {
    "text": "that doesn't care about what the data looks like right we've given up on it maybe the data has tainted characters maybe it doesn't it's too late that's",
    "start": "1049640",
    "end": "1056160"
  },
  {
    "text": "not where we are in the code uh we want an API abstraction that totally conceals the mechanics of how this functions um",
    "start": "1056160",
    "end": "1062320"
  },
  {
    "text": "we don't want programmers to have to reinvent things we don't want them to go down that regular Expressions path again",
    "start": "1062320",
    "end": "1067919"
  },
  {
    "text": "uh and everybody come up with a very complicated rubbe Goldberg type machine that doesn't necessarily work do you",
    "start": "1067919",
    "end": "1073440"
  },
  {
    "text": "remember what we did when format string vulnerabilities were a big problem uh uh there was a disc tactical change that we",
    "start": "1073440",
    "end": "1079760"
  },
  {
    "text": "could all make to our code that would more or less fix it it was not a 100% solution there was that uh that local uh",
    "start": "1079760",
    "end": "1086679"
  },
  {
    "text": "uh uh trickery that one could pull um but we we stopped letting users Supply the format string to you know print F",
    "start": "1086679",
    "end": "1093080"
  },
  {
    "text": "and SN SN print F and that sort of thing and that largely took care of the problem is there anything similar we can",
    "start": "1093080",
    "end": "1099320"
  },
  {
    "text": "do for SQL injection and cross-site scripting there is defense techniques",
    "start": "1099320",
    "end": "1105120"
  },
  {
    "text": "Lessons Learned From layer six uh SQL jection is largely solved by bind variables this is your 95% solution",
    "start": "1105120",
    "end": "1112120"
  },
  {
    "text": "right here uh according to one of the the sources at the end of the presentation this is the internal coding standard at Oracle uh one of the",
    "start": "1112120",
    "end": "1118600"
  },
  {
    "text": "conventioners here told me he believes it's the internal development standard at Microsoft uh you'll see different",
    "start": "1118600",
    "end": "1123840"
  },
  {
    "text": "names for this uh placeholders prepared statements pre-compiled query plans parameterized queries parameterized queries is arguably a better known term",
    "start": "1123840",
    "end": "1130720"
  },
  {
    "text": "than bind variables I've come to this from kind of the the Pearl perspective so that's why I chose bind variables and",
    "start": "1130720",
    "end": "1136320"
  },
  {
    "text": "what it does is provide proper syntactic iCal interpolation of anything you throw at your template IED query we've got",
    "start": "1136320",
    "end": "1142120"
  },
  {
    "text": "select secret from table where user equals question mark or hook we take our user Supply data and we cram it into",
    "start": "1142120",
    "end": "1149280"
  },
  {
    "text": "that question mark and the the driver magically encodes it and uh escapes it",
    "start": "1149280",
    "end": "1154880"
  },
  {
    "text": "and quotes it for us and and suddenly there's no problem the the syntactical structure of the query we intend to",
    "start": "1154880",
    "end": "1160360"
  },
  {
    "text": "execute is preserved they're not sticking a union in there they're not sticking a comments in there and an end",
    "start": "1160360",
    "end": "1166679"
  },
  {
    "text": "of statement and then a drop off tables um now the query May Fail there there",
    "start": "1166679",
    "end": "1172200"
  },
  {
    "text": "are there are semantic problems here of course they're going to feed us garbage we're going to be looking for something but we're not injuring anything we are",
    "start": "1172200",
    "end": "1179520"
  },
  {
    "text": "not allowing the attacker to execute arbitrary queries on the server um most bind variable implementations support",
    "start": "1179520",
    "end": "1186159"
  },
  {
    "text": "that hook style notation uh uh the principal limitation I think of bind variables is that you can only do this",
    "start": "1186159",
    "end": "1192880"
  },
  {
    "text": "on like dead SQL scaler data so for example in in the query there the token",
    "start": "1192880",
    "end": "1198240"
  },
  {
    "text": "secret table and user cannot be dynamically generated in a safe fashion",
    "start": "1198240",
    "end": "1203799"
  },
  {
    "text": "only the value of constraints in your wear Clause can be can be uh amenable to",
    "start": "1203799",
    "end": "1209280"
  },
  {
    "text": "bind variables but in practice that's what we need and in practice that's what people are doing when they're pasting",
    "start": "1209280",
    "end": "1214440"
  },
  {
    "text": "together these insecure SQL statements with user supplied data the the question mark there represents the thing that",
    "start": "1214440",
    "end": "1219480"
  },
  {
    "text": "they want to interpolate uh database independent apis are preferred at least by me um so let's take a look at some of",
    "start": "1219480",
    "end": "1225559"
  },
  {
    "text": "those right now jdbc anybody use this particular uh feature of jdbc the prepared statement um you can get your",
    "start": "1225559",
    "end": "1233280"
  },
  {
    "text": "uh SQL statement together and let's say username and hash pass are what we want to supply we we identify the uh the",
    "start": "1233280",
    "end": "1239760"
  },
  {
    "text": "hooks by by their position hook number one hook number two um there's a sophistication with callable statement",
    "start": "1239760",
    "end": "1246120"
  },
  {
    "text": "which I think is for stored procedures where you can name the parameters that's a little bit easier um",
    "start": "1246120",
    "end": "1252200"
  },
  {
    "text": "obbc is very difficult for me to look at but it can accomplish much the same",
    "start": "1252200",
    "end": "1257280"
  },
  {
    "text": "thing there there are high higher level uh interfaces to this that are a lot more tolerable I'm sure this one is is",
    "start": "1257280",
    "end": "1262600"
  },
  {
    "text": "is well known here Pearl DBI of course supports it the execute method is what takes your your buy variables um and the",
    "start": "1262600",
    "end": "1269480"
  },
  {
    "text": "you if you're familiar with the way that Pearl does the DBI and dbd you know that it's um uh uh it allows you to talk",
    "start": "1269480",
    "end": "1276120"
  },
  {
    "text": "directly to the driver too U so if your driver supports something better than Pearl you can use it uh PHP you got to",
    "start": "1276120",
    "end": "1282120"
  },
  {
    "text": "go to the pair or you got to go with adodb to get something that supports this but it is there and I would argue",
    "start": "1282120",
    "end": "1287720"
  },
  {
    "text": "that with its presence in pair there's really no excuse for anybody to be kind of manually generating these Dynamic SQL",
    "start": "1287720",
    "end": "1293320"
  },
  {
    "text": "queries anymore um python is one of my favorit simply because it natively supports this named uh substitution",
    "start": "1293320",
    "end": "1299600"
  },
  {
    "text": "syntax much like it does for for format strings in general and uh their API allows a very flexible specification of",
    "start": "1299600",
    "end": "1306520"
  },
  {
    "text": "what those bind variables look like cross-site scripting very simple output encoding this this uh problem here with",
    "start": "1306520",
    "end": "1313360"
  },
  {
    "text": "double Choco Latte bid 12894 very indicative of the kind of solution you see to cross-site scripting",
    "start": "1313360",
    "end": "1320720"
  },
  {
    "text": "uh uh vulnerabilities all we're doing is identifying the part where you know a variable is being spat back out to the",
    "start": "1320720",
    "end": "1326880"
  },
  {
    "text": "end user and we're calling HTML special characters uh if you're doing this in Pearl you have the HTML double colon",
    "start": "1326880",
    "end": "1332960"
  },
  {
    "text": "entities uh uh module I think it is if you're doing it in Python you have a CGI package if you're doing it in other",
    "start": "1332960",
    "end": "1338520"
  },
  {
    "text": "languages I'm sure you've got something um output encoding has been mentioned at",
    "start": "1338520",
    "end": "1343960"
  },
  {
    "text": "least as far back as the assert 2002 advisory on Cross scripting but it was",
    "start": "1343960",
    "end": "1349279"
  },
  {
    "text": "kind of it's kind of always getting the uh the the the second share you know it's it's not talked up a lot the CT",
    "start": "1349279",
    "end": "1355960"
  },
  {
    "text": "advisory says something quite odd like output encoding maybe resource intensive um which is which is kind of shocking",
    "start": "1355960",
    "end": "1363159"
  },
  {
    "text": "the the right thing to do is to encode everything just prior to Output everywhere if you are echoing anything that is raw to to the to the end user um",
    "start": "1363159",
    "end": "1371400"
  },
  {
    "text": "you're you're you're doing it incorrectly you're setting yourself up for a cross-site scripting uh Hole uh if not in the current release of your your",
    "start": "1371400",
    "end": "1377600"
  },
  {
    "text": "package in the subsequent release um anybody remember diabolic crab from bug track guy was uh getting a SQL injection",
    "start": "1377600",
    "end": "1384880"
  },
  {
    "text": "cross-site scripting advisories out like once every other day uh he says at the very bottom you know use HTML special",
    "start": "1384880",
    "end": "1390480"
  },
  {
    "text": "characters um and and that's that's really all that's necessary for most of these PHP cross-site scripting uh",
    "start": "1390480",
    "end": "1396159"
  },
  {
    "text": "attacks you'll want to set your content type to match the expectations of your encoding routine and you'll want to use double quotes on dynamically generated",
    "start": "1396159",
    "end": "1402919"
  },
  {
    "text": "attributes because I don't think special characters encodes double quotes but other than that that takes care of it a",
    "start": "1402919",
    "end": "1408720"
  },
  {
    "text": "templating system is something that you can use you know make make make a picture of what you want the output to",
    "start": "1408720",
    "end": "1414320"
  },
  {
    "text": "look like and then trust that the templating system say HTML Mason will do this takes any data you plug into that",
    "start": "1414320",
    "end": "1420279"
  },
  {
    "text": "picture and encodes it properly there's no problem I don't have time to get into remarks on HTML permissive content",
    "start": "1420279",
    "end": "1426320"
  },
  {
    "text": "Management Systems um that's the path to Madness I'll say um all right concluding",
    "start": "1426320",
    "end": "1432279"
  },
  {
    "text": "remarks you got to use buy variables you got to encode your output this is the very first thing you need to do when you get in your car you put on your seat",
    "start": "1432279",
    "end": "1437840"
  },
  {
    "text": "seat belt you turn on the airbag then you worry about what the actual road conditions are going to be like the first thing you need to be doing when",
    "start": "1437840",
    "end": "1444000"
  },
  {
    "text": "you're coding these things is using bind variables and encoding your output get it into your coding guidelines your review and your documentation if you",
    "start": "1444000",
    "end": "1450039"
  },
  {
    "text": "write uh modules and libraries make sure that you lead with these secure examples",
    "start": "1450039",
    "end": "1455320"
  },
  {
    "text": "um the third thing you need to do is use bind variables and encode your output it's really quite important the fourth thing is to identify trust boundaries",
    "start": "1455320",
    "end": "1461960"
  },
  {
    "text": "it's uh I I think there is a real confusion people don't sit down and think about their their software as as",
    "start": "1461960",
    "end": "1468440"
  },
  {
    "text": "interrelated components and and Trust boundaries you know the incoming trust boundaries are more or less easy to",
    "start": "1468440",
    "end": "1473559"
  },
  {
    "text": "identify but the the outgoing trust boundaries we don't turn around often enough and say oh I'm I'm passing to a",
    "start": "1473559",
    "end": "1478799"
  },
  {
    "text": "different subsystem there are there are concerns about the representation of this data um fifth bind variables output",
    "start": "1478799",
    "end": "1484919"
  },
  {
    "text": "and coding really honestly that's that's what you need to be doing and finally do validate your input but be precise in",
    "start": "1484919",
    "end": "1490720"
  },
  {
    "text": "your terminology what do you validating why what is the purpose of your validation are you doing it to see that that the currency field looks like um",
    "start": "1490720",
    "end": "1497799"
  },
  {
    "text": "monetary value or are you doing it to see that the currency field doesn't have uh you know SQL meta characters in it uh",
    "start": "1497799",
    "end": "1504240"
  },
  {
    "text": "it's it's going to have a bearing on how the application looks and uh finally let me just skip ahead a little bit here be",
    "start": "1504240",
    "end": "1510480"
  },
  {
    "text": "very careful when you read the references at the end of this uh presentation uh not all of them are correct some of them uh I I have",
    "start": "1510480",
    "end": "1516760"
  },
  {
    "text": "selected because they are indicative of the wrong way of approaching this I think so you know Trad tread",
    "start": "1516760",
    "end": "1523360"
  },
  {
    "text": "lightly uh if that's not legible my email address is uh mjp DB5 That's Mike",
    "start": "1523360",
    "end": "1529919"
  },
  {
    "text": "Juliet Papa stroke Bravo Hotel 05 at secure pipe.com and I'm happy to take",
    "start": "1529919",
    "end": "1536440"
  },
  {
    "text": "any questions URL references for",
    "start": "1536440",
    "end": "1544000"
  },
  {
    "text": "the oh it is the O guide version 2 which is a fabulous document um despite my my",
    "start": "1544000",
    "end": "1550360"
  },
  {
    "text": "objection uh uh to the placement of sanitization as a species of validation if you've not looked at the OS guide",
    "start": "1550360",
    "end": "1555720"
  },
  {
    "text": "since version one and if you didn't go to uh to Andrew's presentation uh go to the website and get it we",
    "start": "1555720",
    "end": "1561559"
  },
  {
    "text": "also Val marvelous the off guide has lots of",
    "start": "1561559",
    "end": "1568720"
  },
  {
    "text": "good recommendations yes sir so the reason",
    "start": "1568720",
    "end": "1573559"
  },
  {
    "text": "whyel Matrix 7 by seven inputs 49 different procedure they C the Chase and",
    "start": "1581360",
    "end": "1589159"
  },
  {
    "text": "do thiser us so what do you what do you",
    "start": "1589159",
    "end": "1596159"
  },
  {
    "text": "do easel always stop",
    "start": "1596159",
    "end": "1605200"
  },
  {
    "text": "from simple from the are you suggesting that the",
    "start": "1612399",
    "end": "1618520"
  },
  {
    "text": "programmers are dynamically generating queries based on things that bind variables can't handle like table names or dynamically generating like wear",
    "start": "1618520",
    "end": "1624679"
  },
  {
    "text": "constraints and things like that um that is uh just a simple matter of programming I find um now",
    "start": "1624679",
    "end": "1633120"
  },
  {
    "text": "it's uh indeed and and that's why I think this needs to be built into coding recommendations you can do it certainly",
    "start": "1633120",
    "end": "1639399"
  },
  {
    "text": "as you're piecing together the field and the value you can keep track of how many hooks you're inserting",
    "start": "1639399",
    "end": "1646520"
  },
  {
    "text": "just I agree in in my experience with um uh",
    "start": "1646520",
    "end": "1654600"
  },
  {
    "text": "code Snippets posted on the vulnerability news feeds however it is nothing that exotic you know the the",
    "start": "1654600",
    "end": "1660240"
  },
  {
    "text": "programmer is literally interpolating a string so like blah from table where user equals dollar sign F and uh it's",
    "start": "1660240",
    "end": "1668240"
  },
  {
    "text": "not uh it's not a complex uh building up of a",
    "start": "1668240",
    "end": "1673200"
  },
  {
    "text": "querium having an interface that",
    "start": "1676519",
    "end": "1680440"
  },
  {
    "text": "caning sure and this doesn't need to be pre-loaded as a a statically generated Matrix you can dynamically generate it",
    "start": "1700039",
    "end": "1706600"
  },
  {
    "text": "from a couple of known arrays and kind of lazily evaluate this but the point is",
    "start": "1706600",
    "end": "1712440"
  },
  {
    "text": "when you call execute you you'd better be using bind variables and I I don't think it's actually that difficult to to",
    "start": "1712440",
    "end": "1718679"
  },
  {
    "text": "follow it if you can go through the trouble of initializing that big Matrix or of lasery generating it you can certainly go through the trouble of",
    "start": "1718679",
    "end": "1724279"
  },
  {
    "text": "keeping track oh I've got another bind variable here oh I've got another bind variable here I I should think other",
    "start": "1724279",
    "end": "1731039"
  },
  {
    "text": "questions we got tool kits that allow us to do input validation fairly easily um",
    "start": "1731039",
    "end": "1736960"
  },
  {
    "text": "but the output validation techniques we've seen here have been scattered among different parts of programming",
    "start": "1736960",
    "end": "1742679"
  },
  {
    "text": "languages is there any one tool kit that incorporates a lot of these output",
    "start": "1742679",
    "end": "1747760"
  },
  {
    "text": "validation techniques as kind of a One-Stop as a small point I wouldn't call it output validation I would call",
    "start": "1747760",
    "end": "1753960"
  },
  {
    "text": "it output presentation or output encoding um because again we're not actually inspecting the character of the",
    "start": "1753960",
    "end": "1759120"
  },
  {
    "text": "data at all so I I I really think we're we're doing a disservice to to call that validation um uh no the the uh the",
    "start": "1759120",
    "end": "1766640"
  },
  {
    "text": "generic AP for database queries all generally support uh bind variables and",
    "start": "1766640",
    "end": "1771720"
  },
  {
    "text": "in language specific CGI development you need to find your language specific HTML encoding function one more",
    "start": "1771720",
    "end": "1779000"
  },
  {
    "text": "question all right thank you [Applause]",
    "start": "1781919",
    "end": "1791278"
  },
  {
    "text": "Mike",
    "start": "1796320",
    "end": "1799320"
  },
  {
    "text": "e",
    "start": "1916159",
    "end": "1919159"
  },
  {
    "text": "for",
    "start": "1946080",
    "end": "1949080"
  },
  {
    "text": "e",
    "start": "1976039",
    "end": "1979039"
  },
  {
    "text": "e",
    "start": "2005960",
    "end": "2008960"
  },
  {
    "text": "e",
    "start": "2035960",
    "end": "2038960"
  },
  {
    "text": "for",
    "start": "2125800",
    "end": "2128800"
  },
  {
    "text": "e",
    "start": "2155800",
    "end": "2158800"
  },
  {
    "text": "e",
    "start": "2185720",
    "end": "2188720"
  },
  {
    "text": "e",
    "start": "2215680",
    "end": "2218680"
  },
  {
    "text": "e",
    "start": "2245599",
    "end": "2248599"
  }
]