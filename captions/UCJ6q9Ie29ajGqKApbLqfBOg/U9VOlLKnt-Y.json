[
  {
    "text": "uh this is Jeff jarach hi I'm uh I'm currently a lead application security",
    "start": "199",
    "end": "6120"
  },
  {
    "text": "engineer at Salesforce um I was with NCC group until about a month ago so that's a recent change for me um but I do a lot",
    "start": "6120",
    "end": "13519"
  },
  {
    "text": "of rails work I've done some metas spit modules related to rails and uh couple other things with break B and whatnot",
    "start": "13519",
    "end": "20279"
  },
  {
    "text": "yeah and he used to work with me in the Chicago office so that's why we've got that flag up there um so just a brief",
    "start": "20279",
    "end": "26199"
  },
  {
    "text": "outline about what we're going to talk about today um I'm going to go into an introduction into rails just kind of the",
    "start": "26199",
    "end": "31519"
  },
  {
    "text": "important parts um that you'll need to know for this talk I'm going to pass it over to Jeff he'll talk about",
    "start": "31519",
    "end": "37079"
  },
  {
    "text": "authentication and then back to me for authorization and a new tool called boiler man um that we",
    "start": "37079",
    "end": "44000"
  },
  {
    "text": "released so jumping straight into it uh this is the command that you run when you want to build a new rails app so you",
    "start": "44000",
    "end": "49680"
  },
  {
    "text": "say rails new sample app and then this is the directory structure that starts to get built so the first three folders",
    "start": "49680",
    "end": "56760"
  },
  {
    "text": "we see here are the models the views and the controllers uh so the models are kind of the omm layer um that ties",
    "start": "56760",
    "end": "63440"
  },
  {
    "text": "objects to database rows we've got the views this is the Erb usually templating",
    "start": "63440",
    "end": "69280"
  },
  {
    "text": "engine uh so this is going to be what the client actually sees and renders in front of them the controllers are the",
    "start": "69280",
    "end": "76840"
  },
  {
    "text": "that's kind of the glue um that glues the models and the views together so the controllers just gather up the data and",
    "start": "76840",
    "end": "83360"
  },
  {
    "text": "gets it ready for the presentation layer in the configuration directory you have a file called routes.rb",
    "start": "83360",
    "end": "89920"
  },
  {
    "text": "so this is the file that prettyy much defines all of the public facing routes",
    "start": "89920",
    "end": "94960"
  },
  {
    "text": "in your application we're going to go into this a little bit later to to kind of see what the structure of that file",
    "start": "94960",
    "end": "100640"
  },
  {
    "text": "looks like and then we have two files called gem file and Gem file. loock so gem file is pretty much here are all the",
    "start": "100640",
    "end": "107680"
  },
  {
    "text": "list of external dependencies uh in Ruby they're called gems and Gem file. loock",
    "start": "107680",
    "end": "113240"
  },
  {
    "text": "is when you run bundle install it installs all of your gems those are going to be the it's going to contain",
    "start": "113240",
    "end": "119119"
  },
  {
    "text": "the version numbers of all the gems that were installed so if you're looking for vulner vulnerabilities in specific gems",
    "start": "119119",
    "end": "125039"
  },
  {
    "text": "you're going to want to look into that file um to see what version they're running so the rails Community has this",
    "start": "125039",
    "end": "132800"
  },
  {
    "text": "notion of the Rails way uh and this is kind of uh dhh who created rails calls it uh",
    "start": "132800",
    "end": "139040"
  },
  {
    "text": "Omas so it's more he kind of puts the menu together for you and leaves little",
    "start": "139040",
    "end": "145200"
  },
  {
    "text": "to to choice so his problem was that all of the kind of web Frameworks out there",
    "start": "145200",
    "end": "151360"
  },
  {
    "text": "were all a cart software environments so you had to kind of pick and choose and put all these pieces together so what he",
    "start": "151360",
    "end": "157640"
  },
  {
    "text": "wanted to do is say here's con convention over configuration here's what you get and here's how we think",
    "start": "157640",
    "end": "163400"
  },
  {
    "text": "that you know web framework should look so in active record uh this is kind of the model layer you're going to get a",
    "start": "163400",
    "end": "169920"
  },
  {
    "text": "lot of things by default like SQL protection um there's a lot of ways that",
    "start": "169920",
    "end": "175040"
  },
  {
    "text": "that can go wrong but you kind of have to go out of your way for that to happen so we have a link up here it's rail",
    "start": "175040",
    "end": "180080"
  },
  {
    "text": "ssi.org that's a resource we use pretty regularly to kind of make sure that when we're assessing code you know these are",
    "start": "180080",
    "end": "187239"
  },
  {
    "text": "the possible ways that it can go wrong and these are the things that we look for Action view is the view layer so",
    "start": "187239",
    "end": "193080"
  },
  {
    "text": "you're going to get things by default like HTML output encoding so you should have xss protection and there are ways",
    "start": "193080",
    "end": "199599"
  },
  {
    "text": "to kind of shoot yourself in the foot uh so those are things that we look for an action controller is a controller layer",
    "start": "199599",
    "end": "206560"
  },
  {
    "text": "uh so when you build a new application we'll go into this a little bit later but you get things like uh cross- site",
    "start": "206560",
    "end": "211599"
  },
  {
    "text": "request forgery protection by default via the protect from forgery",
    "start": "211599",
    "end": "217159"
  },
  {
    "text": "method uh so it's going to be you here yeah so um this talk though focuses on",
    "start": "217519",
    "end": "223319"
  },
  {
    "text": "some of the things that aren't really built into the framework um specifically authentication authorization and that's where we kind of go off the rails a",
    "start": "223319",
    "end": "230159"
  },
  {
    "text": "little bit um so the first point I want to make is that uh authentication authorization are two distinctly",
    "start": "230159",
    "end": "236159"
  },
  {
    "text": "separate processes um a lot of times people lump them together and just think terms of oth um and that mindset is",
    "start": "236159",
    "end": "242319"
  },
  {
    "text": "often times uh emblematic of of problems down the road um it really helps in the",
    "start": "242319",
    "end": "247920"
  },
  {
    "text": "security model to think of things as separate uh with authentication focusing solely on identifying the user um and",
    "start": "247920",
    "end": "253959"
  },
  {
    "text": "then authorization determining um what you know privileges they have in the application um in both cases there's not",
    "start": "253959",
    "end": "261600"
  },
  {
    "text": "a lot of support built into rails natively um on authentication front uh only httt HTTP BAS basic and digest are",
    "start": "261600",
    "end": "271240"
  },
  {
    "text": "natively supported out of the box um on authorization there's really no native facility um in both of these cases",
    "start": "271240",
    "end": "277199"
  },
  {
    "text": "there's some helper methods and things that that can help in building these that we'll talk about so when it comes to authentication",
    "start": "277199",
    "end": "283360"
  },
  {
    "text": "we've got um two options essentially of of how we're going to handle that in our application um and the first is to to",
    "start": "283360",
    "end": "290000"
  },
  {
    "text": "roll our own and just write our own um authentication framework um the risks",
    "start": "290000",
    "end": "295919"
  },
  {
    "text": "here are that you're kind of Reinventing the wheel and uh you're likely to make a lot of mistakes mes that you know others",
    "start": "295919",
    "end": "301120"
  },
  {
    "text": "have already uh made and corrected in in writing authentication systems um there's a lot more to authentication",
    "start": "301120",
    "end": "307600"
  },
  {
    "text": "than just checking and storing passwords uh you know the obvious thing that people think about um and then in the in",
    "start": "307600",
    "end": "313759"
  },
  {
    "text": "the rails framework there's a a helper method called has secure password that's been available since uh version 31 um so",
    "start": "313759",
    "end": "321000"
  },
  {
    "text": "that's something that's built into the framework that can help us uh to build an authentication system securely and and we'll see a little bit more about",
    "start": "321000",
    "end": "327639"
  },
  {
    "text": "that the second option then is uh to use an off-the-shelf gem that's one of these",
    "start": "327639",
    "end": "333199"
  },
  {
    "text": "third party libraries um there's some risks here as well vulnerabilities in gems tend to be more attractive to",
    "start": "333199",
    "end": "340360"
  },
  {
    "text": "attackers uh because you can compromise a you know wider number of applications um so you might have a little bit more",
    "start": "340360",
    "end": "347720"
  },
  {
    "text": "exposure uh for that reason um you know you need to pay real close attention to",
    "start": "347720",
    "end": "353919"
  },
  {
    "text": "uh ongoing updates and maintenance to incorporate fixes and improvements over time um that's really true of any um you",
    "start": "353919",
    "end": "360759"
  },
  {
    "text": "know any Library code but certainly uh something as security sensitive as",
    "start": "360759",
    "end": "365919"
  },
  {
    "text": "authentication we want to be careful um and then of course there's still some work that you have to do to integrate to",
    "start": "365919",
    "end": "371199"
  },
  {
    "text": "your application and and glue the logic together um and that could be a little bit tricky uh but on the plus side the",
    "start": "371199",
    "end": "377560"
  },
  {
    "text": "core code is generally uh pretty well vetted and well reviewed by the community uh there's a lot of people",
    "start": "377560",
    "end": "382960"
  },
  {
    "text": "depending on the on the common big players in in authentication um and for that reason it tends to uh benefit from",
    "start": "382960",
    "end": "389599"
  },
  {
    "text": "from the community experience and uh you know improvements over time as uh as new",
    "start": "389599",
    "end": "395440"
  },
  {
    "text": "discoveries are made so let's talk about some of the the common authentication gems um at the top",
    "start": "395440",
    "end": "402000"
  },
  {
    "text": "of the list here uh we've got devis that's far in way the most popular uh means of doing authentication in rails",
    "start": "402000",
    "end": "408560"
  },
  {
    "text": "apps um it's built on a middleware layer called Warden um the next one on the list that we have here is omnio um and",
    "start": "408560",
    "end": "416240"
  },
  {
    "text": "that's a primarily an ooth gem so when you're doing a third party authentication with you know Facebook or",
    "start": "416240",
    "end": "423080"
  },
  {
    "text": "Google or something like that uh omnio makes that really easy there's callbacks in devis to support omnio so uh the two",
    "start": "423080",
    "end": "430840"
  },
  {
    "text": "work together in some cases uh so you can have devis for your usual uh username and password authentication but",
    "start": "430840",
    "end": "436680"
  },
  {
    "text": "then if the user chooses to authenticate via oath uhu it'll just call back into device um doorkeeper is a little bit",
    "start": "436680",
    "end": "444280"
  },
  {
    "text": "different that turns your application into an no provider so that you can provide authentication services to other",
    "start": "444280",
    "end": "450400"
  },
  {
    "text": "applications um we see this a lot of times with API end points things like that and then uh the last one that we",
    "start": "450400",
    "end": "457720"
  },
  {
    "text": "have here and this is not an exhaustive list this is really just kind of the the larger players uh is O logic um o logic",
    "start": "457720",
    "end": "465759"
  },
  {
    "text": "is not nearly as common uh but it has a little bit of a unique model uh that",
    "start": "465759",
    "end": "471039"
  },
  {
    "text": "makes it kind of interesting of blending sessions in authentication uh whereas most times we think of authentication",
    "start": "471039",
    "end": "477360"
  },
  {
    "text": "being implemented in the in the user model on the other hand though uh there's some",
    "start": "477360",
    "end": "482759"
  },
  {
    "text": "arguments in favor of writing uh gems uh or I'm sorry writing uh your own",
    "start": "482759",
    "end": "488440"
  },
  {
    "text": "authentication system uh what we have here is a quote from uh the Ruby on Rails tutorial um it's a published book",
    "start": "488440",
    "end": "496240"
  },
  {
    "text": "uh as well as an online book that's freely available um that's really uh you",
    "start": "496240",
    "end": "501440"
  },
  {
    "text": "know the way a lot of people get started in in building rails applications um the key points here are things that we hear",
    "start": "501440",
    "end": "508080"
  },
  {
    "text": "developers say over over again uh the parts that I bolded that uh authentication requires extensive",
    "start": "508080",
    "end": "514640"
  },
  {
    "text": "customization and modifying a third-party product is often more work than writing your own um and then",
    "start": "514640",
    "end": "520680"
  },
  {
    "text": "off-the-shelf systems can be black boxes um I I don't entirely agree with this",
    "start": "520680",
    "end": "525800"
  },
  {
    "text": "logic uh authentication does require some customization um I think that statement is probably more true of",
    "start": "525800",
    "end": "532519"
  },
  {
    "text": "authorization which is going to be a little bit more tied to your business logic um authentication tends to be uh",
    "start": "532519",
    "end": "538600"
  },
  {
    "text": "you know pretty similar from application to application so I don't know that there's a ton of customization but",
    "start": "538600",
    "end": "543800"
  },
  {
    "text": "there's certainly a little bit of work to be done um modifying a third product uh third party product being more work",
    "start": "543800",
    "end": "550800"
  },
  {
    "text": "um again I don't really believe that that's the case if you consider all the little ancillary features that you need",
    "start": "550800",
    "end": "556120"
  },
  {
    "text": "in an authentication system um and then the last point that off-the-shelf systems can be black boxes um well",
    "start": "556120",
    "end": "563120"
  },
  {
    "text": "that's of course true of any any third party uh you know code that you use uh but that could be just as true of of the",
    "start": "563120",
    "end": "569600"
  },
  {
    "text": "Rails framework itself if you don't take the time to educate yourself and learn how it uh how it operates um so I I",
    "start": "569600",
    "end": "577480"
  },
  {
    "text": "don't think we entirely uh agree with this point but these are these are the things people say when they uh when they want to write their own authentication",
    "start": "577480",
    "end": "584399"
  },
  {
    "text": "system so let's talk a little bit about how we might do that um I mentioned this has secure password helper before um and",
    "start": "584399",
    "end": "592079"
  },
  {
    "text": "we have here an example where we have a simple uh user model that has a database schema with two uh columns both strings",
    "start": "592079",
    "end": "599959"
  },
  {
    "text": "name and password digest um and we just call that helper in the model uh what that gives us is uh some",
    "start": "599959",
    "end": "607360"
  },
  {
    "text": "functionality like this where we can do uh user new give it a password and a",
    "start": "607360",
    "end": "612800"
  },
  {
    "text": "password confirmation argument um and it'll go ahead and and uh securely store that password uh it does that using",
    "start": "612800",
    "end": "619720"
  },
  {
    "text": "bcrypt uh so it's a it's a reasonably secure uh password storage scheme uh a while back I wrote a really long blog",
    "start": "619720",
    "end": "626480"
  },
  {
    "text": "post with some of my thoughts on uh on the password storage problem um but overall I think pretty much everybody's",
    "start": "626480",
    "end": "632279"
  },
  {
    "text": "happy with uh with bcrypt um the other thing it gives you is uh some",
    "start": "632279",
    "end": "638200"
  },
  {
    "text": "authentication methods um so you can call authenticate and pass a password uh",
    "start": "638200",
    "end": "643360"
  },
  {
    "text": "if it's not the correct password the function just returns false if you pass the correct password it Returns the user",
    "start": "643360",
    "end": "649200"
  },
  {
    "text": "object uh so the interesting point here is that all of this is just provided by this by this uh helper that that mixes",
    "start": "649200",
    "end": "655320"
  },
  {
    "text": "into your model um so you didn't have to write a whole lot of code and you've got a pretty basic B authentication function",
    "start": "655320",
    "end": "661440"
  },
  {
    "text": "um that's backed by a bcrypt with secure password storage um the passwords are are digested and stored as bcrypt",
    "start": "661440",
    "end": "668079"
  },
  {
    "text": "digests in that password digest string uh but we can just handle them as you know password and password confirm",
    "start": "668079",
    "end": "674680"
  },
  {
    "text": "attributes on our model um so it's kind of nice uh but what we have here is really just a um an authentication",
    "start": "674680",
    "end": "682320"
  },
  {
    "text": "function it's not really an authentication system uh and there's a lot more that we need to do there uh",
    "start": "682320",
    "end": "688519"
  },
  {
    "text": "storing cred and having an authentication function is really just the start uh there's a lot",
    "start": "688519",
    "end": "694040"
  },
  {
    "text": "of other things that we need to think about like uh you know how we're going to integrate that with our session management logic um you know do we want",
    "start": "694040",
    "end": "700600"
  },
  {
    "text": "to implement any sort of password complexity requirements um the third point there is a big one what are we",
    "start": "700600",
    "end": "707120"
  },
  {
    "text": "going to do when the user loses or forgets their password um that's something that almost every application is going to need to account for uh and",
    "start": "707120",
    "end": "714040"
  },
  {
    "text": "is often something that we see uh problems with um and then lastly you've got uh you know know some other cases",
    "start": "714040",
    "end": "720240"
  },
  {
    "text": "depending on the nature of your application you might need uh the ability to log in with an API token uh",
    "start": "720240",
    "end": "726079"
  },
  {
    "text": "multiactor two- Factor you might need OA things like that that we we touched on a little bit before so let's talk a little",
    "start": "726079",
    "end": "733040"
  },
  {
    "text": "bit about about some of these points um we're not going to go into all of them just in the interest of time but uh",
    "start": "733040",
    "end": "739000"
  },
  {
    "text": "let's start with session management um so session management is just the idea of uh this process that identifies the",
    "start": "739000",
    "end": "745480"
  },
  {
    "text": "user throughout their interaction with the application um so the first step is just exchanging their credentials for a",
    "start": "745480",
    "end": "751959"
  },
  {
    "text": "cookie that's really the initial authentication um and then in subsequent uh request identifying the user based on",
    "start": "751959",
    "end": "759000"
  },
  {
    "text": "the value of that cookie um the third step is you know invalidating that session when when necessary either when",
    "start": "759000",
    "end": "765360"
  },
  {
    "text": "the user logs out when a timeout or some other event occurs um and then there's some options and rails about where we",
    "start": "765360",
    "end": "772000"
  },
  {
    "text": "store uh session State as uh as it goes you know between requests um so we're",
    "start": "772000",
    "end": "777639"
  },
  {
    "text": "going to talk about session State a little B um so we have here a you know simple",
    "start": "777639",
    "end": "783279"
  },
  {
    "text": "login form uh username password signin button um user comes to the application",
    "start": "783279",
    "end": "789800"
  },
  {
    "text": "enters their username they provide their password uh and click the sign-in button",
    "start": "789800",
    "end": "795800"
  },
  {
    "text": "um at which point we're going to see a call like this which is uh pretty similar to what we saw when we were we",
    "start": "795800",
    "end": "801199"
  },
  {
    "text": "were talking about the has secure password U just looking up the user in the database by their ID authenticating",
    "start": "801199",
    "end": "807600"
  },
  {
    "text": "with their password uh in this case it's correct so the user objects returned and",
    "start": "807600",
    "end": "812680"
  },
  {
    "text": "the server creates a session object server side now this is where things differ a little bit between uh between",
    "start": "812680",
    "end": "818560"
  },
  {
    "text": "some of these options um in the current default what's going to happen is that session object on the server will be",
    "start": "818560",
    "end": "825440"
  },
  {
    "text": "serialized um and and signed uh and encrypted and then returned to the user",
    "start": "825440",
    "end": "832040"
  },
  {
    "text": "and that actually makes up their their session token uh so on future visits to the application you know later page",
    "start": "832040",
    "end": "838360"
  },
  {
    "text": "requests they're going to prevent that present that signed serialized session object um as their session identifier um",
    "start": "838360",
    "end": "846079"
  },
  {
    "text": "the server then will verify the signature decrypt it deserialize it and recover the session state from that from",
    "start": "846079",
    "end": "851720"
  },
  {
    "text": "that value um another option is uh database backed",
    "start": "851720",
    "end": "857040"
  },
  {
    "text": "sessions so in this case we have a similar flow uh user provides their username and password uh but the server",
    "start": "857040",
    "end": "863920"
  },
  {
    "text": "now has a has a database where it can actively store information um so the same deal uh user is authenticated",
    "start": "863920",
    "end": "870839"
  },
  {
    "text": "assuming it's successful a session object is created in the database uh now in this case we generate a random value",
    "start": "870839",
    "end": "878480"
  },
  {
    "text": "uh and it needs to be cryptographically random uh so that it's not enumerable or uh you know guessable um that value is",
    "start": "878480",
    "end": "887160"
  },
  {
    "text": "stored in the database alongside the session object uh and then that's provided to the user uh as their cookie",
    "start": "887160",
    "end": "893959"
  },
  {
    "text": "value um so on sub secret requests the user provides that random value in their",
    "start": "893959",
    "end": "899360"
  },
  {
    "text": "cookie uh the server looks it up in the database and retrieves the session object from the database that's uh you",
    "start": "899360",
    "end": "905120"
  },
  {
    "text": "know that's associated with that user so there's uh is this me yeah",
    "start": "905120",
    "end": "912399"
  },
  {
    "text": "there's some pros and cons to each of these approaches um and this is just a table to summarize it um as we go",
    "start": "912399",
    "end": "919320"
  },
  {
    "text": "through this i' I've highlighted the ones that I think are um are a win for each type um so right off the bat uh the",
    "start": "919320",
    "end": "927199"
  },
  {
    "text": "cookie value that's provided with database sessions is random um with the the cookie based sessions it's uh you",
    "start": "927199",
    "end": "934440"
  },
  {
    "text": "know it's an encrypted serialized object so I see that as a wi for database sessions because there's you know less attex surface a little less Network",
    "start": "934440",
    "end": "941399"
  },
  {
    "text": "overhead because it's a smaller value things like that when it comes to revoking the",
    "start": "941399",
    "end": "948440"
  },
  {
    "text": "session um again I see that as a win for uh database sessions it's a little bit easier to enforce a maximum Lifetime on",
    "start": "948440",
    "end": "955519"
  },
  {
    "text": "your sessions when it's stored in a database um you can easily enforce uh a",
    "start": "955519",
    "end": "961519"
  },
  {
    "text": "limitation on the number of concurrent sessions just by um ensuring that you only record a maximum of one per user um",
    "start": "961519",
    "end": "969839"
  },
  {
    "text": "and then revoking it is a lot easier because you can just delete the session from your database um when you encrypt a",
    "start": "969839",
    "end": "975839"
  },
  {
    "text": "value and give it to the user you really can't revoke it because they now have that",
    "start": "975839",
    "end": "981480"
  },
  {
    "text": "value uh this is the this is really the one that says it all to me the attack",
    "start": "981880",
    "end": "987279"
  },
  {
    "text": "surface uh is completely different um on database sessions really the only option to compromise that that session uh is to",
    "start": "987279",
    "end": "995399"
  },
  {
    "text": "steal or enumerate that random value that we talked about um on cookie sessions you still have that uh you also",
    "start": "995399",
    "end": "1002399"
  },
  {
    "text": "have the possibility of cryptographic attacks um session reuse can be a big problem um if I'm storing U you know",
    "start": "1002399",
    "end": "1010319"
  },
  {
    "text": "session State and I'm not validating that it's you know validating it appropriately um you might have things",
    "start": "1010319",
    "end": "1016399"
  },
  {
    "text": "like uh you know an account balance that's stored in the SE um and I might be able to make a purchase and then replay an older",
    "start": "1016399",
    "end": "1022600"
  },
  {
    "text": "session token that's still valid and it shows my balance being unchanged um so",
    "start": "1022600",
    "end": "1027640"
  },
  {
    "text": "that can be a problem um long or infinite lived sessions can be more common because again the revocation is a",
    "start": "1027640",
    "end": "1034400"
  },
  {
    "text": "little harder you can't just delete it um and then you also have the idea of uh encryption key exposures um you know if",
    "start": "1034400",
    "end": "1041520"
  },
  {
    "text": "that encryption key is ever uh ever expose the user through you know a verbose air Message something along",
    "start": "1041520",
    "end": "1047400"
  },
  {
    "text": "those lines um then an attacker can just create a session that that identifies them as whoever you know whoever they'd",
    "start": "1047400",
    "end": "1054160"
  },
  {
    "text": "like to be um and the last point is to to think",
    "start": "1054160",
    "end": "1059799"
  },
  {
    "text": "about the overhead here um on the database side um there's a bit more",
    "start": "1059799",
    "end": "1065440"
  },
  {
    "text": "overhead because on each request I've got to do a look up to the database to retrieve that session object um caching",
    "start": "1065440",
    "end": "1072640"
  },
  {
    "text": "can help there's also some uh some gems that are similar to uh you know to the traditional active record sessions um",
    "start": "1072640",
    "end": "1079440"
  },
  {
    "text": "that back it instead with things like redis uh mcash um so you know those can be a",
    "start": "1079440",
    "end": "1086280"
  },
  {
    "text": "little more performant as well um cookie sessions uh your overhead is is",
    "start": "1086280",
    "end": "1091880"
  },
  {
    "text": "basically cryptographic with the uh the validation of signatures the decryption process and then the D serialization",
    "start": "1091880",
    "end": "1098200"
  },
  {
    "text": "process um with the uh the overhead here on database sessions has led the rails",
    "start": "1098200",
    "end": "1104400"
  },
  {
    "text": "team to remove support for uh database sessions from core rails in versions uh",
    "start": "1104400",
    "end": "1110080"
  },
  {
    "text": "it's still available as a as an external gem um but their concerns about the the scalability and the performance uh had",
    "start": "1110080",
    "end": "1116600"
  },
  {
    "text": "led them to remove it um it really wasn't the default for a long time but uh I'm kind of disappointed that it was",
    "start": "1116600",
    "end": "1123080"
  },
  {
    "text": "actually removed from the framework entirely uh because I think in in the large you know in the majority case the",
    "start": "1123080",
    "end": "1130600"
  },
  {
    "text": "performance issues really aren't that significant um so it's unfortunate but you can still uh enable database",
    "start": "1130600",
    "end": "1137000"
  },
  {
    "text": "sessions if you choose to so the uh the type of session you have",
    "start": "1137000",
    "end": "1142799"
  },
  {
    "text": "is is uh configured by this value in config initializer session store um so",
    "start": "1142799",
    "end": "1148720"
  },
  {
    "text": "here we have it set to a cookie store um the key value there this isn't really",
    "start": "1148720",
    "end": "1154799"
  },
  {
    "text": "the cryptographic key this is the the key for the key value pair in the cookie",
    "start": "1154799",
    "end": "1160360"
  },
  {
    "text": "um so it's really just the name of the cookie um I've also bolded there the expire after 2 hours um that's not",
    "start": "1160360",
    "end": "1166919"
  },
  {
    "text": "configured by default uh regard of session type that you choose you have to manually configure your uh session XPR",
    "start": "1166919",
    "end": "1174520"
  },
  {
    "text": "um so a lot of times we'll see that people don't do this and they end up with sessions that are honored uh infinitely um so that can be a you know",
    "start": "1174520",
    "end": "1181320"
  },
  {
    "text": "can be a vulnerability um if you wanted uh database sessions uh you can change that",
    "start": "1181320",
    "end": "1186760"
  },
  {
    "text": "to active record store again you have to include the uh you know the active record store gem um you know and there's",
    "start": "1186760",
    "end": "1193480"
  },
  {
    "text": "other other third party gems available as well so the cookie sessions um the uh",
    "start": "1193480",
    "end": "1201840"
  },
  {
    "text": "encryption key is stored in config Secrets uh it's broken down by environment so if you have production",
    "start": "1201840",
    "end": "1207960"
  },
  {
    "text": "development staging and so on um and then it's defined as secret key base",
    "start": "1207960",
    "end": "1214240"
  },
  {
    "text": "um now if you have a value called secret token instead of secret B secret key",
    "start": "1214240",
    "end": "1219840"
  },
  {
    "text": "base what you get is uh a serialized base 64 encoded and signed uh cookie so",
    "start": "1219840",
    "end": "1227840"
  },
  {
    "text": "the difference there is that but it's it's still signed so you can't tamper with it unless you know the key uh but you can decode it and view its contents",
    "start": "1227840",
    "end": "1235400"
  },
  {
    "text": "um so that could be a problem if there's ever any sensitive data stored in session objects um that's kind of a bad",
    "start": "1235400",
    "end": "1240840"
  },
  {
    "text": "pattern anyhow you usually want to just store references to objects and uh you know look them up in the database uh",
    "start": "1240840",
    "end": "1246919"
  },
  {
    "text": "rather than storing the entire object uh but we do see that arise from time to time where you'll be able to get uh you",
    "start": "1246919",
    "end": "1252480"
  },
  {
    "text": "know backend credentials apis to you know API keys to backend systems uh",
    "start": "1252480",
    "end": "1257600"
  },
  {
    "text": "things like that might be EXP Expos through that uh you know through that value so don't put secrets in your in your",
    "start": "1257600",
    "end": "1263320"
  },
  {
    "text": "sessions um the next point to talk about is uh is how that serialization process",
    "start": "1263320",
    "end": "1269400"
  },
  {
    "text": "works um in the config initializer session store uh the cookie serializer",
    "start": "1269400",
    "end": "1275080"
  },
  {
    "text": "parameter defines um how sessions are serialized um in versions of rails 4 One",
    "start": "1275080",
    "end": "1282760"
  },
  {
    "text": "and greater it defaults to using a Json for serialization uh less than 41",
    "start": "1282760",
    "end": "1289039"
  },
  {
    "text": "you're going to get Marshall sessions um and anybody who follows rail security is going to remember the uh the",
    "start": "1289039",
    "end": "1295200"
  },
  {
    "text": "deserialization vulnerabilities in 2013 um you know with yaml over XML and",
    "start": "1295200",
    "end": "1302720"
  },
  {
    "text": "Json um that was a was due to uh Marshall",
    "start": "1302720",
    "end": "1308400"
  },
  {
    "text": "deserialization so Marshall when it loads will allow you to uh to deserialize any arbitrary class that the",
    "start": "1308440",
    "end": "1314559"
  },
  {
    "text": "application knows about um and in some cases uh certain classes on the serialization will allow you to execute",
    "start": "1314559",
    "end": "1320559"
  },
  {
    "text": "arbitrary code um the other setting there hybrid is kind of a a",
    "start": "1320559",
    "end": "1325960"
  },
  {
    "text": "compatibility um migration setting um so when when an application's configured",
    "start": "1325960",
    "end": "1331080"
  },
  {
    "text": "with uh with hybrid serialization what happens is the server will issue Json serialized sessions but it will honor",
    "start": "1331080",
    "end": "1338000"
  },
  {
    "text": "either Json or Marshall serialized um so again you've got the possibility of a remote code execution if I know the key",
    "start": "1338000",
    "end": "1345320"
  },
  {
    "text": "so that I can uh you know create a session object um and that's kind of interesting because you might not notice",
    "start": "1345320",
    "end": "1351880"
  },
  {
    "text": "it if you're blackbox testing uh because you're going to see e Json serialized sessions uh but the the application will",
    "start": "1351880",
    "end": "1358240"
  },
  {
    "text": "honor it um if you have a lifetime configured on your session you really only need to have hybrid mode configured",
    "start": "1358240",
    "end": "1365080"
  },
  {
    "text": "for that lifetime because Beyond then um you know all of your older Marshall serialized sessions should have expired",
    "start": "1365080",
    "end": "1372039"
  },
  {
    "text": "and you should never see them um but it's something to be aware of",
    "start": "1372039",
    "end": "1378039"
  },
  {
    "text": "okay so let's talk about lost and forgotten passwords this is a this is a really big one um there's a ton of",
    "start": "1378600",
    "end": "1384400"
  },
  {
    "text": "different approaches to this uh people like to do Secret questions you know your favorite color or your mother's",
    "start": "1384400",
    "end": "1389480"
  },
  {
    "text": "main name uh those all suck um some applications will just generate a password and email it to you but then",
    "start": "1389480",
    "end": "1395720"
  },
  {
    "text": "you have your password sitting in clear text and email uh that's not good you know there's there's all kinds of bad",
    "start": "1395720",
    "end": "1401240"
  },
  {
    "text": "approaches um the approach that we like to see is a little bit more like this um",
    "start": "1401240",
    "end": "1406559"
  },
  {
    "text": "you know generate a a cryptograph LLY secure a random token um store it in your database uh associate with the user",
    "start": "1406559",
    "end": "1413360"
  },
  {
    "text": "object and store a Tim stamp when it was generated uh transmit that to the user out of band somehow um emails most",
    "start": "1413360",
    "end": "1420559"
  },
  {
    "text": "common you sometimes see SMS and things like that um the user visits the site",
    "start": "1420559",
    "end": "1425679"
  },
  {
    "text": "presents that token um in the email case they're probably just going to click a link in their email it says come here to reset your password um when they do that",
    "start": "1425679",
    "end": "1434559"
  },
  {
    "text": "the application looks up the user who's associated with that token verifies the expiration date that's important um you",
    "start": "1434559",
    "end": "1441440"
  },
  {
    "text": "know we don't want these tokens to be valid forever couple hours maybe a day",
    "start": "1441440",
    "end": "1446640"
  },
  {
    "text": "uh longer than that is is potentially a problem um and then uh go ahead and",
    "start": "1446640",
    "end": "1452559"
  },
  {
    "text": "change the password um and then the last step there one that people often Overlook is to delete the token um so",
    "start": "1452559",
    "end": "1459520"
  },
  {
    "text": "that that value that's sitting in their email box is is no longer",
    "start": "1459520",
    "end": "1464520"
  },
  {
    "text": "valid so let's talk a little bit about devis we're going to kind of switch gear here um devis is really realistically",
    "start": "1464600",
    "end": "1471000"
  },
  {
    "text": "the way most applications are going to deal with uh you know with their authentication um so here we've got a",
    "start": "1471000",
    "end": "1477240"
  },
  {
    "text": "simple user model that's enabled by devis devis actually generated this model for us it does that if we try to",
    "start": "1477240",
    "end": "1482559"
  },
  {
    "text": "turn it on in a model that doesn't exist um and this is what you get by default um so it just loads devis and passes all",
    "start": "1482559",
    "end": "1489880"
  },
  {
    "text": "these different modules to it uh so each of these modules turns on different uh different bits of functionality on and",
    "start": "1489880",
    "end": "1495520"
  },
  {
    "text": "off uh you know registerable allow somebody to come and provide their email and create an account um you know they",
    "start": "1495520",
    "end": "1501520"
  },
  {
    "text": "all do different things um the ones that are are disabled there you know omnio",
    "start": "1501520",
    "end": "1507840"
  },
  {
    "text": "timeout uh account locking uh email confirmations those aren't enabled by default but it's it's a simple flag to",
    "start": "1507840",
    "end": "1514640"
  },
  {
    "text": "turn it on um within the routes file that that Tok mentioned Maps URLs to controllers",
    "start": "1514640",
    "end": "1522200"
  },
  {
    "text": "um we really just see this one line it just calls this device for helper and tells it that we want device on our on",
    "start": "1522200",
    "end": "1527919"
  },
  {
    "text": "our user object if we do rake routes uh we see that that one line actually gives us a",
    "start": "1527919",
    "end": "1533880"
  },
  {
    "text": "whole bunch of different uh mappings to controllers from devis uh now again this is in the default and it's going to vary",
    "start": "1533880",
    "end": "1540559"
  },
  {
    "text": "depending on uh what modules we have turned on and off uh but you'll see that this gives us things like a signin page",
    "start": "1540559",
    "end": "1546880"
  },
  {
    "text": "a sign out page password change password reset and so on um when it comes to",
    "start": "1546880",
    "end": "1553200"
  },
  {
    "text": "actually using devis in our application uh the way we do that is through uh some",
    "start": "1553200",
    "end": "1558520"
  },
  {
    "text": "filters and helpers that are available to our controllers uh so the controller filter there um it's a before action",
    "start": "1558520",
    "end": "1565279"
  },
  {
    "text": "callback so it's going to run before the controller action uh and it simply authenticates the user uh determines",
    "start": "1565279",
    "end": "1571200"
  },
  {
    "text": "their identity stores that as a uh as a current user um this is often put in the",
    "start": "1571200",
    "end": "1577559"
  },
  {
    "text": "application controller uh and to Meck will touch on the inheritance of of controllers a little bit uh but that way",
    "start": "1577559",
    "end": "1583520"
  },
  {
    "text": "all the controllers across the application will uh inherit that dependency and require authentication",
    "start": "1583520",
    "end": "1589360"
  },
  {
    "text": "unless it's explicitly uh disabled for a given controller that needs to be available anonymously um so that's a good pattern",
    "start": "1589360",
    "end": "1597880"
  },
  {
    "text": "then within the controller we have these helpers that can let us check on the state of our authentication uh user signed in returns a a true false based",
    "start": "1597880",
    "end": "1605159"
  },
  {
    "text": "on whether the user signed in current user is really the important one because that Returns the actual uh user object",
    "start": "1605159",
    "end": "1611919"
  },
  {
    "text": "of the current user uh and then user session is similar it returns their their session object",
    "start": "1611919",
    "end": "1618760"
  },
  {
    "text": "device has a bit of a security history um these are you know just going through the change logs looking at things that",
    "start": "1618760",
    "end": "1625279"
  },
  {
    "text": "are are security relevant um and most of these are pretty minor you know there's an unreleased commit that uh allows you",
    "start": "1625279",
    "end": "1632480"
  },
  {
    "text": "to send password change notifications uh so if my password's changed it gives me an email it just says hey someone",
    "start": "1632480",
    "end": "1638640"
  },
  {
    "text": "changed your password if that wasn't you heads up um over the years we've had",
    "start": "1638640",
    "end": "1644159"
  },
  {
    "text": "things like uh disabling tokens that are outstanding for pass reset when the user",
    "start": "1644159",
    "end": "1649240"
  },
  {
    "text": "changes their email or password um there was an email numeration bug a little while ago uh in",
    "start": "1649240",
    "end": "1655480"
  },
  {
    "text": "310 I've got this bolded uh they no longer store reset tokens as plain text they store an hmac of the token um which",
    "start": "1655480",
    "end": "1662880"
  },
  {
    "text": "is something that that's that's really good um if you end up with a SQL injection vulnerability or something",
    "start": "1662880",
    "end": "1668159"
  },
  {
    "text": "like that where I can read the contents of the database um there's no longer a token there that will allow me to reset",
    "start": "1668159",
    "end": "1674440"
  },
  {
    "text": "a user's password in plain text because it's stored as in hmac um so that's a big Improvement and that's that's",
    "start": "1674440",
    "end": "1679880"
  },
  {
    "text": "something that uh can be really easy to overlook uh when we have these password reset tokens flying around um it helps",
    "start": "1679880",
    "end": "1686399"
  },
  {
    "text": "to think of them as credentials because they really are they'll give you access to the account um and so we need to",
    "start": "1686399",
    "end": "1692360"
  },
  {
    "text": "secure them in in similar ways that we would secure actual credentials um there was a a seeser",
    "start": "1692360",
    "end": "1698720"
  },
  {
    "text": "vulnerability in uh uh well was a token fixation vulnerability that allowed for",
    "start": "1698720",
    "end": "1703840"
  },
  {
    "text": "Cerf uh but then back in 223 there was a type confusion vulnerab and this one's",
    "start": "1703840",
    "end": "1708960"
  },
  {
    "text": "really interesting uh and we're going to spend a couple of slides talking about this vulnerability um this was disclosed by",
    "start": "1708960",
    "end": "1715760"
  },
  {
    "text": "je Chen uh back in February of 2013 so let's talk about how this works",
    "start": "1715760",
    "end": "1723480"
  },
  {
    "text": "because it's it's an older vulnerability um but it's kind of indicative of the sorts of things that can easily go wrong",
    "start": "1723480",
    "end": "1730200"
  },
  {
    "text": "with uh with password reset flows um the main point with this slide is that there's been all these changes but if",
    "start": "1730200",
    "end": "1736120"
  },
  {
    "text": "you look at them um a lot of them are these really subtle things that you know can be really easy to overlook um and I",
    "start": "1736120",
    "end": "1743200"
  },
  {
    "text": "I kind of see this slide as a win for device that they they're improving things and addressing these little subtle flaws that you know that would be",
    "start": "1743200",
    "end": "1750159"
  },
  {
    "text": "easy to overlook um and they're the sorts of things that uh that people introduce in in custom code all the time",
    "start": "1750159",
    "end": "1757519"
  },
  {
    "text": "um so this password reset vulnerability um this is pseudo code that kind of gives you an idea of how the password",
    "start": "1757519",
    "end": "1764559"
  },
  {
    "text": "reset flow in devise Works um in the paper I going into detail tracing it through like all the all the various",
    "start": "1764559",
    "end": "1770279"
  },
  {
    "text": "classes that are called and and uh it boils down to something like this um you know you've got a reset controller that",
    "start": "1770279",
    "end": "1777600"
  },
  {
    "text": "uh you know reads the password reset token from the request looks up the user object associated with that um if",
    "start": "1777600",
    "end": "1783320"
  },
  {
    "text": "there's a user there um then it goes ahead and changes their password to the value that the user provided so um",
    "start": "1783320",
    "end": "1790080"
  },
  {
    "text": "pretty straightforward right but uh there's a catch here and it comes from MySQL uh mysql's got some",
    "start": "1790080",
    "end": "1797600"
  },
  {
    "text": "really unexpected Behavior with uh with some of its equality operators um so the first one here we've got a simple query",
    "start": "1797600",
    "end": "1805159"
  },
  {
    "text": "um that returns you know where one equals one string um so notice that the",
    "start": "1805159",
    "end": "1810720"
  },
  {
    "text": "first one is an integer um and the second is a string that begins with the number one um when MySQL does this it",
    "start": "1810720",
    "end": "1818000"
  },
  {
    "text": "typ casts the uh string to an integer does the comparison and since 1 equals 1",
    "start": "1818000",
    "end": "1824000"
  },
  {
    "text": "it thinks that one equals one string uh and return true so that's kind of",
    "start": "1824000",
    "end": "1830600"
  },
  {
    "text": "unexpected um similarly uh the integer zero will match any string that doesn't",
    "start": "1830600",
    "end": "1837600"
  },
  {
    "text": "return with an integer uh and that or doesn't begin with an integer and that'll return true as well so what does",
    "start": "1837600",
    "end": "1844159"
  },
  {
    "text": "this mean to rails and and to that that password reset flow um usually in rails uh the pams hash is",
    "start": "1844159",
    "end": "1853279"
  },
  {
    "text": "is a hash of uh you know the parameters that the user provided with a request um",
    "start": "1853279",
    "end": "1858480"
  },
  {
    "text": "these are usually strings um and developers sometimes think that they're always strings uh so if we look at some",
    "start": "1858480",
    "end": "1865200"
  },
  {
    "text": "examples uh Fu equals bar Fizz equals Buzz we get you know we get a key value",
    "start": "1865200",
    "end": "1870240"
  },
  {
    "text": "pair with those values um if we pass integers Fu equals 1 fiz equals 2 uh we",
    "start": "1870240",
    "end": "1876080"
  },
  {
    "text": "still get back string representations of those integers if they're just get parameters but there's some uh some",
    "start": "1876080",
    "end": "1881600"
  },
  {
    "text": "behaviors and rails that'll let us manipulate these types um prior to 40 uh rails would",
    "start": "1881600",
    "end": "1888880"
  },
  {
    "text": "accept XML bodies and posts um that's no longer the case partly because of that",
    "start": "1888880",
    "end": "1894600"
  },
  {
    "text": "XML deserialization uh but it can be enabled uh by including an XML pars or",
    "start": "1894600",
    "end": "1900039"
  },
  {
    "text": "gem from actionpack um it still accepts Json though um it'll parse those bodies",
    "start": "1900039",
    "end": "1906559"
  },
  {
    "text": "automatically and typ cast according to those formats um so in the XML case if we pass",
    "start": "1906559",
    "end": "1912919"
  },
  {
    "text": "Fizz with a type of integer and give it a one you'll see that in the pams hash Fizz is now the integer one um so",
    "start": "1912919",
    "end": "1920679"
  },
  {
    "text": "that'll allow us to uh to pass integers to parameters um similarly with Json uh we",
    "start": "1920679",
    "end": "1927799"
  },
  {
    "text": "could do something like this and pass a Json body um set up password reset password uh password confirmation uh the",
    "start": "1927799",
    "end": "1935760"
  },
  {
    "text": "bolded bit there reset password token zero um so if you remember to the MySQL",
    "start": "1935760",
    "end": "1943039"
  },
  {
    "text": "comparisons um if the reset password token equals zero it's going to match a",
    "start": "1943039",
    "end": "1948080"
  },
  {
    "text": "string that begins with a non- integer um so we're going to end up with a query",
    "start": "1948080",
    "end": "1955120"
  },
  {
    "text": "that looks like this um you know in in uh rails code we're doing a lookup of a",
    "start": "1955120",
    "end": "1960960"
  },
  {
    "text": "user object based on that token zero uh which ultimately gives us a select where token equals integer zero uh and as a",
    "start": "1960960",
    "end": "1968880"
  },
  {
    "text": "result the pseudo code that I showed earlier is going to reset the password of the first user that has an",
    "start": "1968880",
    "end": "1974440"
  },
  {
    "text": "outstanding token um now that's a little bit simplified because it's it's going to be the first outstanding token that",
    "start": "1974440",
    "end": "1979880"
  },
  {
    "text": "doesn't begin with an integer um but you know generally you can think of it as as",
    "start": "1979880",
    "end": "1985000"
  },
  {
    "text": "the first outstanding token so I wrote a Metasploit module for this",
    "start": "1985000",
    "end": "1992120"
  },
  {
    "text": "uh again this is back in in 2013 um the way this works is kind of interesting because you you still can't",
    "start": "1992120",
    "end": "1998399"
  },
  {
    "text": "Target it since all you're providing is the token you're not providing an account ID um so I just Loop through",
    "start": "1998399",
    "end": "2004360"
  },
  {
    "text": "outstanding tokens um you can monitor the response code and just uh keep sending reset requests and resetting",
    "start": "2004360",
    "end": "2010399"
  },
  {
    "text": "passwords until you get a value back that says that there's no outstanding token that matches um once you do that",
    "start": "2010399",
    "end": "2016440"
  },
  {
    "text": "you can uh request a password change for a targeted user um you know oftentimes",
    "start": "2016440",
    "end": "2022720"
  },
  {
    "text": "you're going to want it to be an administrative user or something like that um once you know that that user has",
    "start": "2022720",
    "end": "2027840"
  },
  {
    "text": "an outstanding token um you can again Loop through um try zero first and you",
    "start": "2027840",
    "end": "2033240"
  },
  {
    "text": "know if that doesn't work maybe their token begins with one uh if that doesn't work maybe it begins with two and so on",
    "start": "2033240",
    "end": "2039200"
  },
  {
    "text": "um and eventually you'll you'll hit that token and uh and reset that password um this is really effective the only",
    "start": "2039200",
    "end": "2045600"
  },
  {
    "text": "downside is that the legitimate user will get an email um you know when you issue that password uh reset request",
    "start": "2045600",
    "end": "2052358"
  },
  {
    "text": "that will contain a token you know saying oh you tried to reset your password um but a lot of times people",
    "start": "2052359",
    "end": "2058358"
  },
  {
    "text": "aren't going to aren't going to be too suspicious of that um so this is patched in devis uh",
    "start": "2058359",
    "end": "2065240"
  },
  {
    "text": "again this goes back to to 2013 so there's the CV number um the uh you know",
    "start": "2065240",
    "end": "2071720"
  },
  {
    "text": "the specific versions that are patched U the patch is kind of interesting because if we think back to that pseudo code",
    "start": "2071720",
    "end": "2076760"
  },
  {
    "text": "where they're reading um the reset token from the pams hash all they really do is just typ cast it to a string um so that",
    "start": "2076760",
    "end": "2084000"
  },
  {
    "text": "way they know when they're looking it up in the database it's always a string and and it's going to uh it's going to behave as",
    "start": "2084000",
    "end": "2090000"
  },
  {
    "text": "expected um the core vulnerability here though with the MySQL type confusion uh exposed through active record uh affects",
    "start": "2090000",
    "end": "2097800"
  },
  {
    "text": "lot more than just AIS um so we found almost this exact same vulnerability in",
    "start": "2097800",
    "end": "2103160"
  },
  {
    "text": "uh you know in in first party code where people have written their own authentication um could also arise when",
    "start": "2103160",
    "end": "2109760"
  },
  {
    "text": "you have you know API token logic really any kind of uh you know token",
    "start": "2109760",
    "end": "2115000"
  },
  {
    "text": "authentication um the history of the fix on Rails is kind of interesting uh they rolled out a fix in 3212 that would uh",
    "start": "2115000",
    "end": "2122960"
  },
  {
    "text": "build the queries based on the type of the the database column that it was looking it up on",
    "start": "2122960",
    "end": "2128160"
  },
  {
    "text": "um so instead of allowing my SQL to do the typ casting rails would you know active record would try to do the typ",
    "start": "2128160",
    "end": "2133760"
  },
  {
    "text": "casting appropriately um was fixed in 3212 it's kind of an incomplete fix there's still some ways to exploit that",
    "start": "2133760",
    "end": "2140440"
  },
  {
    "text": "that uh that yor pointed out um he just wrote a paper for Frack uh that talked",
    "start": "2140440",
    "end": "2145680"
  },
  {
    "text": "about all kinds of uh rails vul vulnerabilities um and this is one of",
    "start": "2145680",
    "end": "2151400"
  },
  {
    "text": "them where you can pass uh arrays and still get uh you know still get uh you know integers through um the the fix in",
    "start": "2151400",
    "end": "2159599"
  },
  {
    "text": "3212 was actually reverted in 3213 because it broke some other functionality um so 32 active record",
    "start": "2159599",
    "end": "2166599"
  },
  {
    "text": "will still allow you to build queries like that um it's fixed in devis but uh you know other applications can can",
    "start": "2166599",
    "end": "2172720"
  },
  {
    "text": "still perform that um on the four and higher Branch uh it's not until 42 that",
    "start": "2172720",
    "end": "2178839"
  },
  {
    "text": "they started typ casting queries by default to uh you know to hedge this um",
    "start": "2178839",
    "end": "2184839"
  },
  {
    "text": "even when that's the case you still have things like this where rather than using an active record fine",
    "start": "2184839",
    "end": "2189920"
  },
  {
    "text": "by uh the user might use a wear clause and even though it's parameterized it's not going to be vulnerable to SQL",
    "start": "2189920",
    "end": "2195640"
  },
  {
    "text": "injection uh in this case I can still set the uh the type of that of that token uh and I can still exploit this",
    "start": "2195640",
    "end": "2202599"
  },
  {
    "text": "even on a even on a fixed version of rails um again the you know you can pass tokens as uh you know as arrays and",
    "start": "2202599",
    "end": "2209880"
  },
  {
    "text": "still get them typ cast um so it still kind of has some life even though it's a even though it's an old vulnerability um",
    "start": "2209880",
    "end": "2217800"
  },
  {
    "text": "so with that uh toc's going to talk about authorization a bit cool",
    "start": "2217800",
    "end": "2223720"
  },
  {
    "text": "nice all right uh so now that we've kind of authenticated the user um let's see",
    "start": "2223720",
    "end": "2229400"
  },
  {
    "text": "what what can they do so when we're looking at authorization this tends to be tied to the concept of roles um and I",
    "start": "2229400",
    "end": "2236319"
  },
  {
    "text": "like to kind of split it into two groups so you have this notion of vertical authorization uh so here we have kind of",
    "start": "2236319",
    "end": "2243240"
  },
  {
    "text": "a list of example RS uh roles you might have a site admin at the very top has full access to everything uh an",
    "start": "2243240",
    "end": "2249560"
  },
  {
    "text": "organization admin that might just have access full access to the subset of data that belongs to that organization you",
    "start": "2249560",
    "end": "2256200"
  },
  {
    "text": "know a regular user that might have limited read access local right access to like their user profile and then",
    "start": "2256200",
    "end": "2262960"
  },
  {
    "text": "unauthenticated uh then you have this notion of horizontal authorization so this is you know users from organization",
    "start": "2262960",
    "end": "2270599"
  },
  {
    "text": "one should never be able to get data from organization 2 for example um or",
    "start": "2270599",
    "end": "2276160"
  },
  {
    "text": "within an organization one uh within an organization one user shouldn't have access to another user's data so what",
    "start": "2276160",
    "end": "2283200"
  },
  {
    "text": "does this look like within rails a vertical authorization uh tends to be implemented through the use of what are",
    "start": "2283200",
    "end": "2289119"
  },
  {
    "text": "called before actions so this is just a notion that you know here we have an example controller called the post",
    "start": "2289119",
    "end": "2294560"
  },
  {
    "text": "controller uh the before action just says you know if we're looking at the first line here for require admin it",
    "start": "2294560",
    "end": "2300680"
  },
  {
    "text": "says run the method require admin only on the create organization action or if",
    "start": "2300680",
    "end": "2306480"
  },
  {
    "text": "we're looking at the last one it says require an organization user for every single action except public",
    "start": "2306480",
    "end": "2313040"
  },
  {
    "text": "posts so for horizontal authorization uh this tends to get implemented through the use of",
    "start": "2313040",
    "end": "2319040"
  },
  {
    "text": "associations uh so through your models you can connect uh you can connect models and create these associations",
    "start": "2319040",
    "end": "2324839"
  },
  {
    "text": "between models so here we have a current user we call organization to get the",
    "start": "2324839",
    "end": "2329880"
  },
  {
    "text": "organization that they belong to and then call. posts on that so when this",
    "start": "2329880",
    "end": "2335200"
  },
  {
    "text": "gets converted to the database query in the back end you're only querying the subset of posts that belong to that",
    "start": "2335200",
    "end": "2341960"
  },
  {
    "text": "user all right so jumping into controller routing uh we've previously kind of talked about the routes file so",
    "start": "2341960",
    "end": "2348960"
  },
  {
    "text": "this is going to be an example route that you'll see in routes.rb it's pretty straightforward you're given the uh the",
    "start": "2348960",
    "end": "2354920"
  },
  {
    "text": "HTTP method uh the path uh that a user would actually navigate to and then what",
    "start": "2354920",
    "end": "2360599"
  },
  {
    "text": "controller and action uh that points to so here we have an example post",
    "start": "2360599",
    "end": "2366440"
  },
  {
    "text": "controller with an index action and then on the post model we're calling all Gathering all the post putting it into",
    "start": "2366440",
    "end": "2373800"
  },
  {
    "text": "um this post variable which is going to get used by the view to actually present it so kind of now that we've looked at",
    "start": "2373800",
    "end": "2380599"
  },
  {
    "text": "the at what a controller looks like uh let's talk about the controller hierarchy here for a second so if we're",
    "start": "2380599",
    "end": "2386440"
  },
  {
    "text": "looking at this this is the application controller so when you actually generate a new rails application these are one of",
    "start": "2386440",
    "end": "2392319"
  },
  {
    "text": "the controllers that get generated by default and this is going to be the application controller gets in inherited",
    "start": "2392319",
    "end": "2397880"
  },
  {
    "text": "by all other controllers by default right so if you run rails generate controller and you give it some",
    "start": "2397880",
    "end": "2404359"
  },
  {
    "text": "parameters it's going to inherit from application controller and this gets some nice things by default which is a",
    "start": "2404359",
    "end": "2409880"
  },
  {
    "text": "protect from forgery here um that ultimately what that's going to do is run the uh verify authenticity token um",
    "start": "2409880",
    "end": "2418040"
  },
  {
    "text": "before every single action so you're getting SE serve here now here we just have an example before action that says",
    "start": "2418040",
    "end": "2424280"
  },
  {
    "text": "authorize user and so this is going to get run on every single s Le action inside of your application by",
    "start": "2424280",
    "end": "2431240"
  },
  {
    "text": "default um so if we're looking at the post controller we're inheriting from application controller um and that",
    "start": "2431240",
    "end": "2437200"
  },
  {
    "text": "itself inherits from application base and it kind of goes up the chain but I think the important thing to remember",
    "start": "2437200",
    "end": "2442440"
  },
  {
    "text": "here is the further up you go it starts stripping this functionality right so if you have some lightweight controllers",
    "start": "2442440",
    "end": "2448480"
  },
  {
    "text": "that may be inherit from application controller base you might lose some stuff there and we'll talk about that",
    "start": "2448480",
    "end": "2453560"
  },
  {
    "text": "later um so with authorization being implemented through the use of these before actions um we're going to dive",
    "start": "2453560",
    "end": "2460760"
  },
  {
    "text": "into that a little bit because there's ultimately three types of callbacks you have before around and after um but",
    "start": "2460760",
    "end": "2467200"
  },
  {
    "text": "because you want to authorize the user before you do any actions um most of the authorization in fact I'd say all of it",
    "start": "2467200",
    "end": "2473640"
  },
  {
    "text": "really is going to be implemented through the use of these before filters um and so you're going to see",
    "start": "2473640",
    "end": "2478720"
  },
  {
    "text": "this in a few different flavors these are some of the most common um and as we go down this list they get less common",
    "start": "2478720",
    "end": "2484440"
  },
  {
    "text": "but you can give it Flags to say only specific action um except wrong button",
    "start": "2484440",
    "end": "2491880"
  },
  {
    "text": "there um you can say if or unless so you can actually give it a method to call um",
    "start": "2491880",
    "end": "2497280"
  },
  {
    "text": "if that returns true or false then the uh the the before action will get run um",
    "start": "2497280",
    "end": "2502319"
  },
  {
    "text": "you can say skip before action so in the application controller we had that authorized user um and that's going to",
    "start": "2502319",
    "end": "2508480"
  },
  {
    "text": "get run by default in every action you would use this uh to say you know if you have a public controller for example",
    "start": "2508480",
    "end": "2515200"
  },
  {
    "text": "you'd say skip the authorized user action you can also give it procs which are just like blocks of code that can get",
    "start": "2515200",
    "end": "2520880"
  },
  {
    "text": "run uh this is you're not going to see this very often though so like devis uh",
    "start": "2520880",
    "end": "2526599"
  },
  {
    "text": "there are a few authorization gems uh that are available for rails and pundit and can can can formally can can uh are",
    "start": "2526599",
    "end": "2534760"
  },
  {
    "text": "the two probably most famous authorization gems um so pundit when you",
    "start": "2534760",
    "end": "2540520"
  },
  {
    "text": "kind of look at it um both pundit and can can can um try",
    "start": "2540520",
    "end": "2546520"
  },
  {
    "text": "to Central ize all of the authorization rules in a single place so for can can that's in the abilities file for pundit",
    "start": "2546520",
    "end": "2552200"
  },
  {
    "text": "it's through policy files um but ultimately you're still going to kind of get the same thing within your",
    "start": "2552200",
    "end": "2557280"
  },
  {
    "text": "controller actions here you'll see that we're calling like the authorized user um and so that'll take the current user",
    "start": "2557280",
    "end": "2565040"
  },
  {
    "text": "that's logged in um make sure that they're authorized if not it'll throw an exception and the controller action",
    "start": "2565040",
    "end": "2570960"
  },
  {
    "text": "won't complete um so there's kind of an interesting thing here where in the P",
    "start": "2570960",
    "end": "2577440"
  },
  {
    "text": "the documentation it says after action verify authorized um and this is kind of the",
    "start": "2577440",
    "end": "2583400"
  },
  {
    "text": "reason we touched on it a little bit before but you don't want to put any authorization code in after actions",
    "start": "2583400",
    "end": "2589200"
  },
  {
    "text": "because this is going to get run after the controller action occurs so if you have any state changing creates or",
    "start": "2589200",
    "end": "2594720"
  },
  {
    "text": "destroys that's going to get run that's going to change the database and then an exception is going to get thrown which",
    "start": "2594720",
    "end": "2600160"
  },
  {
    "text": "is kind of useless in the sense of actual authorization pundit this is",
    "start": "2600160",
    "end": "2605680"
  },
  {
    "text": "meant to just be used for the devel veler to say like hey this is going to throw an exception you should look at this and call",
    "start": "2605680",
    "end": "2611640"
  },
  {
    "text": "authorize so can can can is very similar based off of the abilities file uh you",
    "start": "2611640",
    "end": "2617359"
  },
  {
    "text": "can call authorize it does the same thing where it looks for a current user object takes that user and sees if if",
    "start": "2617359",
    "end": "2623119"
  },
  {
    "text": "they can um say read a post for example so uh let's be let's let's talk",
    "start": "2623119",
    "end": "2630800"
  },
  {
    "text": "about things to be on the lookout for um so the first one is going to be",
    "start": "2630800",
    "end": "2636520"
  },
  {
    "text": "calling find by methods directly on the model so here we have an example we're saying let's take post find by author",
    "start": "2636520",
    "end": "2643119"
  },
  {
    "text": "and pass it an email um so this is going to actually query the entire subset of",
    "start": "2643119",
    "end": "2648800"
  },
  {
    "text": "posts in the application um or portfolios or accounts um and so with",
    "start": "2648800",
    "end": "2654079"
  },
  {
    "text": "that you tend you know an attacker can just provide any arbitrary ID or email and get some and get data that they",
    "start": "2654079",
    "end": "2660359"
  },
  {
    "text": "potentially aren't supposed to access so we like seeing um associations that we",
    "start": "2660359",
    "end": "2665599"
  },
  {
    "text": "touched on before this is going to only the subset of data that belongs to the currently authenticated",
    "start": "2665599",
    "end": "2672160"
  },
  {
    "text": "user uh so white listing uh when when using before actions um so this is they're",
    "start": "2672160",
    "end": "2680559"
  },
  {
    "text": "going to so in the only in this array you're saying for the update destroy and create methods call the authorized user",
    "start": "2680559",
    "end": "2687480"
  },
  {
    "text": "method but then you have a developer that might come in add a new action to the post controller and they forget to",
    "start": "2687480",
    "end": "2693640"
  },
  {
    "text": "add their action to this array um so that's going to create an authorization flaw uh we prefer to use the use of the",
    "start": "2693640",
    "end": "2701800"
  },
  {
    "text": "kind of accept so this is going to say by default run it on every single action in the post controller except for this",
    "start": "2701800",
    "end": "2708800"
  },
  {
    "text": "method and so if we go back to that scenario a developer adds a new controller action it's going to throw an",
    "start": "2708800",
    "end": "2714640"
  },
  {
    "text": "error by default so it's going to force them to look into this uh before action and see whether or not they actually",
    "start": "2714640",
    "end": "2719680"
  },
  {
    "text": "need to run it so lightweight controllers here we have two examples that we've seen before",
    "start": "2719680",
    "end": "2726440"
  },
  {
    "text": "action control contrer base um and action controller metal well metal we haven't actually seen before but action controller Bas is pretty U pretty common",
    "start": "2726440",
    "end": "2734599"
  },
  {
    "text": "and so what's going to happen there is if you have a controller that skips the application controller um and just",
    "start": "2734599",
    "end": "2740839"
  },
  {
    "text": "inherits directly from action controller base which doesn't have cerve protection or doesn't have all of the authorization",
    "start": "2740839",
    "end": "2747079"
  },
  {
    "text": "filters that um you want to run by default then you're going to have quite not only ceser but potentially some",
    "start": "2747079",
    "end": "2753079"
  },
  {
    "text": "authorization authentication bypasses here um so if you see an inheriting",
    "start": "2753079",
    "end": "2758480"
  },
  {
    "text": "standard from application controller you should be in a relatively good position",
    "start": "2758480",
    "end": "2763640"
  },
  {
    "text": "authorization logic and Views uh so in the views they're correctly checking",
    "start": "2763640",
    "end": "2769200"
  },
  {
    "text": "whether or not you know someone's an admin and they're going to hide and show functionality but on the back end you",
    "start": "2769200",
    "end": "2775400"
  },
  {
    "text": "know there's nothing stopping an attacker from just making that request directly to the server and the controller is going to process it just",
    "start": "2775400",
    "end": "2781520"
  },
  {
    "text": "fine so here you just want to ensure that the application is also verifying the permissions and roles and in the",
    "start": "2781520",
    "end": "2787240"
  },
  {
    "text": "controller actions that correspond to um the links or the buttons in these",
    "start": "2787240",
    "end": "2792880"
  },
  {
    "text": "views uh skipping of filters uh this is something that I it's one of the first",
    "start": "2792880",
    "end": "2798079"
  },
  {
    "text": "things that I look for um you know pretty much grepping for skip before",
    "start": "2798079",
    "end": "2803160"
  },
  {
    "text": "action skip before filter and assessing why are they doing this like did they actually mean to do it was it like kind",
    "start": "2803160",
    "end": "2809240"
  },
  {
    "text": "of lazy coding might think of an example where developer uh wants to test their",
    "start": "2809240",
    "end": "2814839"
  },
  {
    "text": "application using curl right and so they're going to add Skip before action verify authenticity token cuz the Cerf",
    "start": "2814839",
    "end": "2820079"
  },
  {
    "text": "token is being annoying uh they forget to take it out and then so now you have an entire controller is vulnerable to C",
    "start": "2820079",
    "end": "2827960"
  },
  {
    "text": "serve um rail scaffolding well actually so rail scaffolding lets you generate",
    "start": "2827960",
    "end": "2834880"
  },
  {
    "text": "you know models views controllers uh really quickly so here we're saying rails generate scaffold a bank account",
    "start": "2834880",
    "end": "2841160"
  },
  {
    "text": "model and then we passed some parameters um to say you know what are going to be",
    "start": "2841160",
    "end": "2847000"
  },
  {
    "text": "The Columns in the model so here you get nice things like uh the controllers um",
    "start": "2847000",
    "end": "2852400"
  },
  {
    "text": "the views and then the models and that all gets generated you migrate it and you have a form that you can use really",
    "start": "2852400",
    "end": "2858119"
  },
  {
    "text": "quickly uh the problem comes in with these jbuilder files so uh one of the things that it'll it'll",
    "start": "2858119",
    "end": "2865400"
  },
  {
    "text": "generate this jbuilder file which if you request a Json extension um it'll return",
    "start": "2865400",
    "end": "2872599"
  },
  {
    "text": "this kind of this view but what will happen is that every single parameter that you pass into the scaffold command",
    "start": "2872599",
    "end": "2879000"
  },
  {
    "text": "will get added to this um and these are files that developers sometimes don't really look into or don't really use and",
    "start": "2879000",
    "end": "2886119"
  },
  {
    "text": "so if you have any sensitive um attributes on your model this is going to get added and those are going to be",
    "start": "2886119",
    "end": "2891359"
  },
  {
    "text": "available so that's something to look into um it also will add all those",
    "start": "2891359",
    "end": "2897040"
  },
  {
    "text": "parameters to the permit um method for Mass assignment so automatically all of your",
    "start": "2897040",
    "end": "2904720"
  },
  {
    "text": "attributes on on the model that you specify are going to be Mass assignable um",
    "start": "2904720",
    "end": "2911040"
  },
  {
    "text": "so looking at boiler man um so before boiler man you'd have to audit every",
    "start": "2911040",
    "end": "2917119"
  },
  {
    "text": "single controller manually not only every controller but you'd have to track the inheritance you know if there's a",
    "start": "2917119",
    "end": "2922280"
  },
  {
    "text": "base controller if there's an API controller you have to go into that and then kind of think about where is this potentially going to get",
    "start": "2922280",
    "end": "2928480"
  },
  {
    "text": "run uh so boiler man tries to help with that um by dynamically resolving call",
    "start": "2928480",
    "end": "2934280"
  },
  {
    "text": "backs through the inheritance chain and ultimately what it's doing is it's giving you a nice list of all the",
    "start": "2934280",
    "end": "2939520"
  },
  {
    "text": "controllers and actions in the rails application and giving you a list of all the filters that are being",
    "start": "2939520",
    "end": "2945839"
  },
  {
    "text": "run so a bit on how it works uh it's a dynamic analysis tool so it has to plug",
    "start": "2945839",
    "end": "2952200"
  },
  {
    "text": "into an existing rails application um and it it runs as an engine so at the",
    "start": "2952200",
    "end": "2959040"
  },
  {
    "text": "very least you need rails conso uh access um sometimes this isn't possible",
    "start": "2959040",
    "end": "2964240"
  },
  {
    "text": "with assessments but you know if you're on a kickoff call or something I would highly recommend getting rails console",
    "start": "2964240",
    "end": "2970160"
  },
  {
    "text": "access because even outside of this tool it's extremely powerful it pretty much gives you a scripting interface for the",
    "start": "2970160",
    "end": "2976079"
  },
  {
    "text": "entire application and I that's kind of the concept that I use to make this",
    "start": "2976079",
    "end": "2981400"
  },
  {
    "text": "tool um so I'm going to go into a demo here really quick",
    "start": "2981400",
    "end": "2987520"
  },
  {
    "text": "uh so here I'm using rails goat which is an intentionally vulnerable rails app um by oos it's a complete full",
    "start": "3000160",
    "end": "3006599"
  },
  {
    "text": "application um and so here I've got boiler man already installed uh so once",
    "start": "3006599",
    "end": "3012280"
  },
  {
    "text": "you actually have the gem install and run the generator you can just go to for for/",
    "start": "3012280",
    "end": "3017559"
  },
  {
    "text": "boilerman um and here's going to be the view that you're going to see so you're going to have a filter list at the top",
    "start": "3017559",
    "end": "3023799"
  },
  {
    "text": "and then here's the thing that's going to be the main kind of meat of this tool here this is all of the controllers in",
    "start": "3023799",
    "end": "3028839"
  },
  {
    "text": "the application and you have the column for every single action and every filter that's being run uh so I don't know if anybody here",
    "start": "3028839",
    "end": "3036400"
  },
  {
    "text": "has experience assessing rails apps but if we're looking at the filters on some of these controllers um there should be",
    "start": "3036400",
    "end": "3042880"
  },
  {
    "text": "something that you might be noticing not being run on every single action that should be um and you that's going to be",
    "start": "3042880",
    "end": "3049720"
  },
  {
    "text": "apparent here that's going to be the verify authenticity token so if we kind of look into the application controller",
    "start": "3049720",
    "end": "3055280"
  },
  {
    "text": "of the application at the top here what you would expect uh",
    "start": "3055280",
    "end": "3061720"
  },
  {
    "text": "they've commented out the protect from forgery with some note about uh se-",
    "start": "3061720",
    "end": "3066960"
  },
  {
    "text": "surfing uh but here in terms of so if we start looking at some of these filters",
    "start": "3066960",
    "end": "3072079"
  },
  {
    "text": "you start noticing the use of this authenticated filter uh so I might add this to the list to say show me all of",
    "start": "3072079",
    "end": "3078960"
  },
  {
    "text": "the controllers that don't aren't running authenticated for",
    "start": "3078960",
    "end": "3083839"
  },
  {
    "text": "example um so now this is going to pop up here and we're seeing some things that you might",
    "start": "3084920",
    "end": "3090280"
  },
  {
    "text": "expect the new and create actions for users uh so these usually aren't going",
    "start": "3090280",
    "end": "3095359"
  },
  {
    "text": "to actually require authentication because you want to either create a new session or create a new user um but if we start looking down",
    "start": "3095359",
    "end": "3102000"
  },
  {
    "text": "here um we start seeing that the API do not call authenticated and if we go",
    "start": "3102000",
    "end": "3108640"
  },
  {
    "text": "through this list here we do see that they are calling valid API token so there's a different authentication scheme being run here so if I'm looking",
    "start": "3108640",
    "end": "3115520"
  },
  {
    "text": "at the apis I might say you know show me all of the API",
    "start": "3115520",
    "end": "3120839"
  },
  {
    "text": "controllers uh now show me all the ones that don't run uh valid API token so",
    "start": "3120839",
    "end": "3126880"
  },
  {
    "text": "here we start to see that the mobile controller actually is not running this method so if we look at some of the",
    "start": "3126880",
    "end": "3132640"
  },
  {
    "text": "routes that are available for the mobile controller uh which are right here and if we look into act the actual",
    "start": "3132640",
    "end": "3139200"
  },
  {
    "text": "mobile controller code we see that okay we have a before filter here um we're",
    "start": "3139200",
    "end": "3144359"
  },
  {
    "text": "skipping authenticated because it's an API but we're not seeing any call to valid API token so theoretic we should",
    "start": "3144359",
    "end": "3150040"
  },
  {
    "text": "be able to access all these actions without authentication um so if we go to the",
    "start": "3150040",
    "end": "3155640"
  },
  {
    "text": "index action for",
    "start": "3155640",
    "end": "3158640"
  },
  {
    "text": "example so we're getting a null object where we would normally expect an http authorization uh if we look into the",
    "start": "3172720",
    "end": "3178640"
  },
  {
    "text": "index action we're saying it takes a parameter of class uh turns it into a class constanti is it and then calls",
    "start": "3178640",
    "end": "3185440"
  },
  {
    "text": "doall and renders it as tojson so we should be able to uh just say class",
    "start": "3185440",
    "end": "3192119"
  },
  {
    "text": "equals user and here we're in an unauthenticated session",
    "start": "3192119",
    "end": "3198680"
  },
  {
    "text": "um",
    "start": "3199040",
    "end": "3202040"
  },
  {
    "text": "and okay well I think I may not have run the",
    "start": "3204319",
    "end": "3210079"
  },
  {
    "text": "actual migrations oh he didn't get the database all",
    "start": "3210079",
    "end": "3218480"
  },
  {
    "text": "Json there we go uh so here it just returns all the users in the database um",
    "start": "3222559",
    "end": "3228119"
  },
  {
    "text": "with all tokens so yeah when it comes down to it if you've assessed rails",
    "start": "3228119",
    "end": "3234280"
  },
  {
    "text": "applications before and kind of see that list of all the controller and action breakdowns it's a really nice tool to have and it makes assessing",
    "start": "3234280",
    "end": "3240319"
  },
  {
    "text": "authorization rails just so much quicker um so yeah uh that's that's pretty much",
    "start": "3240319",
    "end": "3247680"
  },
  {
    "text": "all of it uh just run gem install boiler man put into the gem file again the takeaways rails console super powerful",
    "start": "3247680",
    "end": "3255200"
  },
  {
    "text": "always ask for it uh if you can during rails assessments future ideas for the app uh adding some D3 visualizations um",
    "start": "3255200",
    "end": "3262680"
  },
  {
    "text": "source quering so when we looked at pund in can can uh just being able to say give me all of the controller actions",
    "start": "3262680",
    "end": "3268799"
  },
  {
    "text": "that don't call authorize um so that should be coming up pretty soon hopefully you want to show",
    "start": "3268799",
    "end": "3274359"
  },
  {
    "text": "the console interface uh I just don't think we have time okay yeah yeah where we at we got okay questions yeah",
    "start": "3274359",
    "end": "3284400"
  },
  {
    "text": "questions yeah Dam analysis to what",
    "start": "3285480",
    "end": "3293839"
  },
  {
    "text": "like St yeah so it's so for for Breakman for",
    "start": "3293839",
    "end": "3300960"
  },
  {
    "text": "example that's a static analysis tool um that actually runs over the code and does static analysis over it uh boil",
    "start": "3300960",
    "end": "3307359"
  },
  {
    "text": "boiler man in the background is actually quering the application as it's running so um it's actually running as if you",
    "start": "3307359",
    "end": "3313839"
  },
  {
    "text": "were running rails console uh and dynamically as the app's running checking what filters are being run on",
    "start": "3313839",
    "end": "3319960"
  },
  {
    "text": "the controller actions so in that sense it's Dynamic um yeah",
    "start": "3319960",
    "end": "3328318"
  },
  {
    "text": "any else sure sure you mentioned it in the",
    "start": "3328520",
    "end": "3335480"
  },
  {
    "text": "presentation that while the approach with using or keeping the session",
    "start": "3335480",
    "end": "3344038"
  },
  {
    "text": "St yeah from I mean from a security standpoint like there's there's obviously performance benefits and and",
    "start": "3345599",
    "end": "3351319"
  },
  {
    "text": "you don't have to keep State on the server you know uh it scales better across larger clusters and things like",
    "start": "3351319",
    "end": "3356760"
  },
  {
    "text": "that but from a security standpoint yeah I definitely favor having sessions persisted server",
    "start": "3356760",
    "end": "3363880"
  },
  {
    "text": "side do you want sign well yeah and they're",
    "start": "3366160",
    "end": "3371960"
  },
  {
    "text": "signed said well so there's two there's two",
    "start": "3373000",
    "end": "3381200"
  },
  {
    "text": "different right right yeah and that's a good point maybe I wasn't clear enough there's two two um options depending on",
    "start": "3382440",
    "end": "3388799"
  },
  {
    "text": "which version of rails and how you define your key whether it's that that secret key base or uh or what's the",
    "start": "3388799",
    "end": "3394960"
  },
  {
    "text": "other one I don't even remember the exact name um but yeah so on the one option you get just you know PL taex",
    "start": "3394960",
    "end": "3401760"
  },
  {
    "text": "serialized b64 encoded signed so you still can't tamper with it but you can you can view it whereas you know in more",
    "start": "3401760",
    "end": "3408359"
  },
  {
    "text": "recent rails it is encrypted um and you know I'm not aware of any any vulnerabilities in the encryption um but",
    "start": "3408359",
    "end": "3415640"
  },
  {
    "text": "you know it's still kind of um I you know I think it's still best practice not to put sensitive information in that",
    "start": "3415640",
    "end": "3421599"
  },
  {
    "text": "session um also from things like you know the the the ability to to replay session tokens and things like that it's",
    "start": "3421599",
    "end": "3427599"
  },
  {
    "text": "going to make it uh less likely that those issues are going to arise if you kind of minimize what you're storing in your session State um you know so uh for",
    "start": "3427599",
    "end": "3436000"
  },
  {
    "text": "like the the user identity you maybe want to have their ID um and then you can look up their ID later on um versus",
    "start": "3436000",
    "end": "3444039"
  },
  {
    "text": "you know having their whole actual object that you know um so it's not as",
    "start": "3444039",
    "end": "3449680"
  },
  {
    "text": "big a concern on encrypted cookies because it's it's not as likely to be exposed um but it just kind of En",
    "start": "3449680",
    "end": "3455920"
  },
  {
    "text": "enforces good practices for for other reasons to you know to keep your sessions pretty",
    "start": "3455920",
    "end": "3462838"
  },
  {
    "text": "thin it's it's really uh let's say uh if you see all the gles that that that can",
    "start": "3463640",
    "end": "3468920"
  },
  {
    "text": "happen when you try to implement secur it's really maybe the best recation looks for something there that's",
    "start": "3468920",
    "end": "3477160"
  },
  {
    "text": "yeah that's really that's really one of the takeaways is like you know there's a lot of little subtleties um that can be",
    "start": "3477160",
    "end": "3483599"
  },
  {
    "text": "hard to get right so you know if you're using if you're using more popular code",
    "start": "3483599",
    "end": "3488640"
  },
  {
    "text": "you know you're probably going to be better off than than most cases where you write things you know yourself",
    "start": "3488640",
    "end": "3493760"
  },
  {
    "text": "unless you put a lot of time and thought into it so uh with that we're out of time if anybody has any other questions",
    "start": "3493760",
    "end": "3499680"
  },
  {
    "text": "uh you know we'll be around we'll be happy to chat so thanks a lot everyone for coming especially so early in the morning yeah thank you appreciate it",
    "start": "3499680",
    "end": "3507330"
  },
  {
    "text": "[Applause]",
    "start": "3507330",
    "end": "3511119"
  }
]