[
  {
    "start": "0",
    "end": "45000"
  },
  {
    "text": "hi good morning thank you for coming to the tour taught my name is a matzo they",
    "start": "0",
    "end": "6390"
  },
  {
    "text": "give from technical university domiciled in Germany and also Intel collaborative research institute for secure computing",
    "start": "6390",
    "end": "14570"
  },
  {
    "text": "Christopher and I are going to present this talk this is a joint work with our",
    "start": "14570",
    "end": "20880"
  },
  {
    "text": "colleagues from UC Irvine and immunity incorporation so the title suggests that",
    "start": "20880",
    "end": "28019"
  },
  {
    "text": "this is a defensive work it's not to work about attacks but it is based on our experience of several last year's on",
    "start": "28019",
    "end": "36260"
  },
  {
    "text": "runtime attacks and in general exploits especially specifically based on code",
    "start": "36260",
    "end": "41820"
  },
  {
    "text": "readers attacks so let me just motivate",
    "start": "41820",
    "end": "46980"
  },
  {
    "start": "45000",
    "end": "45000"
  },
  {
    "text": "this is amazing that after so many years there we are still concerned with many",
    "start": "46980",
    "end": "54329"
  },
  {
    "text": "problems that are actually three decades old the legacy is actually the all",
    "start": "54329",
    "end": "60989"
  },
  {
    "text": "problem there of course we want more functionality we sacrifice security for",
    "start": "60989",
    "end": "68700"
  },
  {
    "text": "functionality alrighty systems are getting more complex nearly everybody",
    "start": "68700",
    "end": "75000"
  },
  {
    "text": "has access to smartphones and thousands and 100 thousands of applications and",
    "start": "75000",
    "end": "81020"
  },
  {
    "text": "and the situation is not changing so we have many developers different",
    "start": "81020",
    "end": "86580"
  },
  {
    "text": "developers with different intentions and different knowledge specifically about security and the subject that it seems",
    "start": "86580",
    "end": "97170"
  },
  {
    "text": "to be very attractive to the research community in another community not only nekkid in here but also in industry",
    "start": "97170",
    "end": "102979"
  },
  {
    "text": "industrial research is that how can we build secure systems from insecure code",
    "start": "102979",
    "end": "110240"
  },
  {
    "text": "this sounds a bit odd somehow contradictory but it seems that this is",
    "start": "110240",
    "end": "116850"
  },
  {
    "text": "the general understanding at least currently that we just need to protect",
    "start": "116850",
    "end": "121920"
  },
  {
    "text": "our legacy code or native code and this is the actually one of the reasons why",
    "start": "121920",
    "end": "128220"
  },
  {
    "text": "and I would like to just explain the fact that just protecting insecure",
    "start": "128220",
    "end": "137250"
  },
  {
    "text": "systems by adding more and more new stuff is not really the ultimate",
    "start": "137250",
    "end": "142410"
  },
  {
    "text": "solution but it seems that you are not going to end with such a fancy solution",
    "start": "142410",
    "end": "148740"
  },
  {
    "text": "as we wish so if you go back to the history I just put some of the attacks",
    "start": "148740",
    "end": "157110"
  },
  {
    "start": "150000",
    "end": "150000"
  },
  {
    "text": "that have been published at least those that we are we know about and",
    "start": "157110",
    "end": "164130"
  },
  {
    "text": "interestingly many of these runtime attacks were used in packet community",
    "start": "164130",
    "end": "171590"
  },
  {
    "text": "but not really part by academia it just got attractive for academia as they",
    "start": "171590",
    "end": "179640"
  },
  {
    "text": "started to think about how they can put it together how they can give tasks to kc students that regard software",
    "start": "179640",
    "end": "186510"
  },
  {
    "text": "security so one of the papers that I'm ever due to technical difficulties a",
    "start": "186510",
    "end": "193950"
  },
  {
    "text": "portion of this presentation was not recorded we are joining the program already in progress struction sequences",
    "start": "193950",
    "end": "200400"
  },
  {
    "start": "200000",
    "end": "200000"
  },
  {
    "text": "are very short they end to be the return",
    "start": "200400",
    "end": "205440"
  },
  {
    "text": "instruction and when you put them together we call them gadget because",
    "start": "205440",
    "end": "212610"
  },
  {
    "text": "they realize they implement a certain task set and functionality like load",
    "start": "212610",
    "end": "218580"
  },
  {
    "text": "store and when we combine the gadgets we have their attack payload and it's a",
    "start": "218580",
    "end": "226830"
  },
  {
    "text": "debatable but regenerated programming can be seen as a generalization of",
    "start": "226830",
    "end": "232290"
  },
  {
    "text": "return to lipsy okay how does it work just a simple example if you have a",
    "start": "232290",
    "end": "238550"
  },
  {
    "start": "234000",
    "end": "234000"
  },
  {
    "text": "program stack and let's say these are the gadgets that sequences of",
    "start": "238550",
    "end": "244019"
  },
  {
    "text": "instructions that the adversary wants to change together then each of them is has",
    "start": "244019",
    "end": "249780"
  },
  {
    "text": "kind of return so usually assume that the adversary even wants to change the",
    "start": "249780",
    "end": "255959"
  },
  {
    "text": "content of registers so first there is a vulnerability this is the assumption and",
    "start": "255959",
    "end": "262049"
  },
  {
    "text": "then the attica puts his or hair stuff on understand and this is consisting of return",
    "start": "262049",
    "end": "269460"
  },
  {
    "text": "addresses and also those values that the attacker wants to compute with so this",
    "start": "269460",
    "end": "275670"
  },
  {
    "text": "is a stack pointer and then the first return address when you just go to the",
    "start": "275670",
    "end": "281670"
  },
  {
    "text": "first sequence which is the first gadget for example and then the stack pointer is moved then you go after the return",
    "start": "281670",
    "end": "288690"
  },
  {
    "text": "you use it there the return address which is on the stack and go to the second sequence where the register",
    "start": "288690",
    "end": "295440"
  },
  {
    "text": "values is or popped and change the content of the register based on the",
    "start": "295440",
    "end": "301590"
  },
  {
    "text": "values that the adversary has already chosen and then it goes further further",
    "start": "301590",
    "end": "307170"
  },
  {
    "text": "again so kind of loop that is just continuing until there the attack is",
    "start": "307170",
    "end": "313970"
  },
  {
    "text": "completed so this is the principle of this attack and one of the basic",
    "start": "313970",
    "end": "320460"
  },
  {
    "text": "problems also in the industrial solution is that when you use heuristics because of efficiency aspects is how big should",
    "start": "320460",
    "end": "328500"
  },
  {
    "text": "discard space be that I can still run an attack so I can put my gadgets together",
    "start": "328500",
    "end": "334169"
  },
  {
    "text": "and since it is shown that rope attacks are turing-complete that means you can",
    "start": "334169",
    "end": "340890"
  },
  {
    "text": "generate arbitrary behavior of the program so you can change together whatever you want build together",
    "start": "340890",
    "end": "347370"
  },
  {
    "text": "whatever malicious code you want and from that point of view there is",
    "start": "347370",
    "end": "353250"
  },
  {
    "text": "actually no point to say how big my space could be there is no answer to",
    "start": "353250",
    "end": "359580"
  },
  {
    "text": "that because it has been shown that even with a very small space of code that's a",
    "start": "359580",
    "end": "366000"
  },
  {
    "text": "code space you can run such an edge of such an attack okay what is the",
    "start": "366000",
    "end": "371580"
  },
  {
    "start": "369000",
    "end": "369000"
  },
  {
    "text": "adversary model in general that we are talking about and also the solution that we are going to present in this",
    "start": "371580",
    "end": "377460"
  },
  {
    "text": "adversary model where the application you have code you have data and we",
    "start": "377460",
    "end": "383100"
  },
  {
    "text": "assume that this application has also scripting capabilities because most web",
    "start": "383100",
    "end": "388380"
  },
  {
    "text": "browsers for example have this capability and we also assume that protections of modern systems like",
    "start": "388380",
    "end": "395030"
  },
  {
    "text": "memory pages are writable or executable are already in place so we make the work of the adversary",
    "start": "395030",
    "end": "402000"
  },
  {
    "text": "harder also we assume that there is a nerd randomization because most of the",
    "start": "402000",
    "end": "407070"
  },
  {
    "text": "realistic systems real-world systems they are using a SLR in conventional",
    "start": "407070",
    "end": "412860"
  },
  {
    "text": "sense so to say but we assume about the adversity itself that it can disclose",
    "start": "412860",
    "end": "419280"
  },
  {
    "text": "memory so get side channels general information it can write to the memory",
    "start": "419280",
    "end": "425210"
  },
  {
    "text": "and you can also perform arbitrary computation because it has access to the scripting engine so scripting jinkins",
    "start": "425210",
    "end": "432419"
  },
  {
    "text": "can be seen as an Oracle that is working for the anniversary as I mentioned this",
    "start": "432419",
    "end": "438330"
  },
  {
    "text": "is a very hot topic of research currently and the security conferences are full of papers against the code",
    "start": "438330",
    "end": "446070"
  },
  {
    "text": "reuse attacks and it's going on so there are two main differences that have been",
    "start": "446070",
    "end": "453330"
  },
  {
    "start": "449000",
    "end": "449000"
  },
  {
    "text": "immersed in in this area one of them is code randomization or in general",
    "start": "453330",
    "end": "459120"
  },
  {
    "text": "diversity code diversity and the other one is control flow integrity so in this",
    "start": "459120",
    "end": "464460"
  },
  {
    "text": "talk we are going to focus on code randomization but let me just give you a",
    "start": "464460",
    "end": "469470"
  },
  {
    "start": "465000",
    "end": "465000"
  },
  {
    "text": "flavor of what is actually in general a big picture the differences between them so or let say pros and cons so",
    "start": "469470",
    "end": "477720"
  },
  {
    "text": "randomization has low performance because you just run the minds permute",
    "start": "477720",
    "end": "483289"
  },
  {
    "text": "something in your memory it scales because you can use it for four you can",
    "start": "483289",
    "end": "491010"
  },
  {
    "text": "use it for more complex software like your browser or operating system however",
    "start": "491010",
    "end": "496950"
  },
  {
    "text": "if you have information disclosure or you have low entropy randomization then",
    "start": "496950",
    "end": "502440"
  },
  {
    "text": "you can break it control flow integrity gives you some kind of formal assurance",
    "start": "502440",
    "end": "510450"
  },
  {
    "text": "because if you remember about the control flow graph of a code when the code is executing you check at every",
    "start": "510450",
    "end": "518010"
  },
  {
    "text": "branching the best case would be at every branching you check if the benign",
    "start": "518010",
    "end": "523919"
  },
  {
    "text": "flow what was intended by there by the developer is followed or not if not you",
    "start": "523919",
    "end": "529680"
  },
  {
    "text": "just stop the execution so you can also do a formal analysis on that in theory",
    "start": "529680",
    "end": "536490"
  },
  {
    "text": "in practice beside the fact that we have we can't get a complete control flow",
    "start": "536490",
    "end": "545620"
  },
  {
    "text": "graph that a real precise one there is also trade-off between performance and",
    "start": "545620",
    "end": "551410"
  },
  {
    "text": "security because when you do so many checks for or branching it gets very inefficient and so you need to make",
    "start": "551410",
    "end": "558220"
  },
  {
    "text": "compromise that it's compromised made compromising security as it has been shown many times in the last three four",
    "start": "558220",
    "end": "564040"
  },
  {
    "text": "years and it is very challenging to use it for a complex software as mentioned",
    "start": "564040",
    "end": "569350"
  },
  {
    "text": "okay so let us go to the code randomization ASLR I think most of you",
    "start": "569350",
    "end": "575020"
  },
  {
    "start": "571000",
    "end": "571000"
  },
  {
    "text": "know what a SLR is and there is something which is called fine-grained SLR so you don't you don't just you",
    "start": "575020",
    "end": "584350"
  },
  {
    "text": "don't just push in a random offset your your memory or your addresses in your",
    "start": "584350",
    "end": "590920"
  },
  {
    "text": "memory just try to make it more complicated what does it mean if you have a set of instructions with returns",
    "start": "590920",
    "end": "596890"
  },
  {
    "text": "you can do different things you can a different granularities that means you",
    "start": "596890",
    "end": "604210"
  },
  {
    "text": "can premiere it functions you can even go to the level of instructions that you randomize instruction addresses and",
    "start": "604210",
    "end": "611500"
  },
  {
    "text": "there have been lots of effort in this area unfortunately fine great",
    "start": "611500",
    "end": "620320"
  },
  {
    "text": "randomization was shown to be worn erable to the so-called g drop just in",
    "start": "620320",
    "end": "625750"
  },
  {
    "text": "time regenerated programming it was presented by assets in black hat 2013",
    "start": "625750",
    "end": "631120"
  },
  {
    "text": "and it is actually relatively simple I",
    "start": "631120",
    "end": "636310"
  },
  {
    "text": "will come to that so what it does it undermines any fine grained",
    "start": "636310",
    "end": "641580"
  },
  {
    "text": "randomization scheme it shows that memory disclosure which was I think for",
    "start": "641580",
    "end": "647770"
  },
  {
    "text": "for many people who are working in in software security it is clear that memory disclosure is a realistic",
    "start": "647770",
    "end": "653170"
  },
  {
    "text": "assumption that you get kind of side channel from your memory if it's a function pointer or any other address",
    "start": "653170",
    "end": "659610"
  },
  {
    "text": "but memory disclosure was considered to be something which is there but it is",
    "start": "659610",
    "end": "665800"
  },
  {
    "text": "not so crucial what we see that it's very crucial given the attacks of the last years and it has been also shown that",
    "start": "665800",
    "end": "673630"
  },
  {
    "text": "you can you do that with a real word exploit so how does it work I just",
    "start": "673630",
    "end": "679570"
  },
  {
    "start": "677000",
    "end": "677000"
  },
  {
    "text": "explained to you very shortly how does G job board so we want to be assume that",
    "start": "679570",
    "end": "686470"
  },
  {
    "text": "we have a single address that leads to the leak leakage of a whole memory page",
    "start": "686470",
    "end": "692790"
  },
  {
    "text": "so you have an address like your function pointer and you have a memory",
    "start": "692790",
    "end": "698770"
  },
  {
    "text": "page and see spare memory pages let's say our four kilobyte align memory so we",
    "start": "698770",
    "end": "706450"
  },
  {
    "text": "know they are that we can simply compute the starting and the ending point and then we know that this page and",
    "start": "706450",
    "end": "714630"
  },
  {
    "text": "dysfunction a we know the address so if it disassembled this page then we get",
    "start": "714630",
    "end": "721150"
  },
  {
    "text": "maybe a call to another function function B and from that we have another",
    "start": "721150",
    "end": "726670"
  },
  {
    "text": "pointer to another page and we disassemble that page as valid that goes on at runtime through their scripting",
    "start": "726670",
    "end": "734710"
  },
  {
    "text": "engine of the remember the adversary model we assume that we have access to scripting ok so in that sense you",
    "start": "734710",
    "end": "742240"
  },
  {
    "start": "741000",
    "end": "741000"
  },
  {
    "text": "generate enough gadgets that you can put them together and put the payload at the",
    "start": "742240",
    "end": "750310"
  },
  {
    "text": "end by chaining these gadgets together to achieve your goal and these are just examples for interrupt for loading for",
    "start": "750310",
    "end": "757990"
  },
  {
    "text": "storing for moving and then you can also automate using a high-level language so",
    "start": "757990",
    "end": "769390"
  },
  {
    "text": "that you we just change all these things together in a you know don't have to do",
    "start": "769390",
    "end": "775450"
  },
  {
    "text": "everything manually this has been shown that it's very crucial attack so all the",
    "start": "775450",
    "end": "780910"
  },
  {
    "start": "778000",
    "end": "778000"
  },
  {
    "text": "randomization techniques need to add other defenses to be to defend against",
    "start": "780910",
    "end": "791050"
  },
  {
    "text": "de trop so now this slide should show you all the effort actually to summarize",
    "start": "791050",
    "end": "797890"
  },
  {
    "text": "all the effort of the past the years on how to let's say mitigate",
    "start": "797890",
    "end": "804649"
  },
  {
    "text": "randomization attacks like Dedra in the adverse event i was talking about so we",
    "start": "804649",
    "end": "809910"
  },
  {
    "text": "start again with summarize a single point did pointer disclosure can simply",
    "start": "809910",
    "end": "815480"
  },
  {
    "text": "wipe ass aslr convention on SNL where you just have a random offset then we",
    "start": "815480",
    "end": "821579"
  },
  {
    "text": "have fine grain randomization that one was bypassed by j trop then we have",
    "start": "821579",
    "end": "827819"
  },
  {
    "text": "direct code disclosure which which is actually what g drop is exploiting",
    "start": "827819",
    "end": "834569"
  },
  {
    "text": "direct we call it to our coding disclosure because if you have a pointer you have a direct access to to the whole",
    "start": "834569",
    "end": "841170"
  },
  {
    "text": "code page so for that how can we prevent the adversary of doing that we just make",
    "start": "841170",
    "end": "848069"
  },
  {
    "text": "the code page execute only so you cannot read it you have the point about you",
    "start": "848069",
    "end": "854489"
  },
  {
    "text": "cannot read it however it has been shown that this is a problem itself because",
    "start": "854489",
    "end": "860149"
  },
  {
    "text": "there is something that we call we defined as indirect code disclosure big you get a code a pointer to the code but",
    "start": "860149",
    "end": "867059"
  },
  {
    "text": "not the code itself but that is enough information to put it to just chain",
    "start": "867059",
    "end": "874139"
  },
  {
    "text": "again our gadgets so what we do and this",
    "start": "874139",
    "end": "879480"
  },
  {
    "text": "is why this talk is all about where to go it is code point hiding and",
    "start": "879480",
    "end": "885360"
  },
  {
    "text": "christopher is going to explain that and what that mean it means that if the",
    "start": "885360",
    "end": "891059"
  },
  {
    "text": "adversary doesn't know where the code pointers like which o functioning tables",
    "start": "891059",
    "end": "897769"
  },
  {
    "text": "or return addresses are that is done by",
    "start": "897769",
    "end": "904199"
  },
  {
    "text": "giving the address of only one address and this is a dress by using the good old idea of trampling and this is a kind",
    "start": "904199",
    "end": "912419"
  },
  {
    "text": "of list of jumps the adversary knows this address but from that address the",
    "start": "912419",
    "end": "917429"
  },
  {
    "text": "address I don't know doesn't know where are they actually the address of the",
    "start": "917429",
    "end": "923399"
  },
  {
    "text": "codes okay now the problem is if we have",
    "start": "923399",
    "end": "930480"
  },
  {
    "text": "trampolines then the adversary may have some idea what is behind those",
    "start": "930480",
    "end": "939780"
  },
  {
    "text": "addresses which is in the list of trampoline so for that we need to kind",
    "start": "939780",
    "end": "945510"
  },
  {
    "text": "of obfuscate his view and this is done by randomization of the registers in",
    "start": "945510",
    "end": "951780"
  },
  {
    "text": "that case we want to break the gadget chain this raises the bar but it doesn't",
    "start": "951780",
    "end": "959910"
  },
  {
    "text": "mean that it is the perfect solution because you have a certain number of a",
    "start": "959910",
    "end": "965460"
  },
  {
    "text": "limited number of registers and there are maybe ways to also bypass that we",
    "start": "965460",
    "end": "973200"
  },
  {
    "text": "just think that it could be and for that there is also a solution so this was",
    "start": "973200",
    "end": "979320"
  },
  {
    "start": "978000",
    "end": "978000"
  },
  {
    "text": "kind of effort of the community the academic community but also their",
    "start": "979320",
    "end": "984600"
  },
  {
    "text": "industrial research community to improve the randomization by adding code pointer",
    "start": "984600",
    "end": "991260"
  },
  {
    "text": "hiding and they raised the bar heavily so this is a very good news and now the",
    "start": "991260",
    "end": "1000290"
  },
  {
    "text": "system that we are going to explain to you in this talk is called redactor and it's a defensive system as I mentioned",
    "start": "1000290",
    "end": "1007520"
  },
  {
    "text": "and how to resist memory disclosure with more detail this is what Christopher is",
    "start": "1007520",
    "end": "1014600"
  },
  {
    "text": "going to explain Thanks no no yes yes no",
    "start": "1014600",
    "end": "1022940"
  },
  {
    "text": "very good yeah I'm going to explain how reactor works what we implement it and",
    "start": "1022940",
    "end": "1029750"
  },
  {
    "text": "what we have to consider during the implementation but let me first give you",
    "start": "1029750",
    "end": "1035480"
  },
  {
    "text": "a quick overview of our goats so our system should be secure because we want",
    "start": "1035480",
    "end": "1040790"
  },
  {
    "text": "to prevent the code reuse attacks are not just mentioned and we do randomization so and as I mentioned",
    "start": "1040790",
    "end": "1048310"
  },
  {
    "text": "memory disclosure is one of the biggest threat to randomization because if the",
    "start": "1048310",
    "end": "1053930"
  },
  {
    "text": "attacker can read or disclosed in a randomization secret and he can immediately undo it we want to be",
    "start": "1053930",
    "end": "1061400"
  },
  {
    "text": "comprehensive that means we don't only want to protect add of type time compile",
    "start": "1061400",
    "end": "1067720"
  },
  {
    "text": "but also did code and of course it should be practical at this we don't",
    "start": "1067720",
    "end": "1075039"
  },
  {
    "text": "want to protect hello world applications although in this calculator we want to protect your browser's complex software",
    "start": "1075039",
    "end": "1081520"
  },
  {
    "text": "so our solutions must scale to really big and complex programs and of course",
    "start": "1081520",
    "end": "1088030"
  },
  {
    "text": "we want to be fast because nobody is going to use our solution either even if it provides perfect security if there's",
    "start": "1088030",
    "end": "1094929"
  },
  {
    "text": "an over at of our chart under twenty percent so let me first say how we",
    "start": "1094929",
    "end": "1101260"
  },
  {
    "start": "1101000",
    "end": "1101000"
  },
  {
    "text": "prevent direct memory disclosure so in theory this is very simple we just have",
    "start": "1101260",
    "end": "1107140"
  },
  {
    "text": "to ensure that the adversary cannot reach code pages however in practice",
    "start": "1107140",
    "end": "1112360"
  },
  {
    "text": "there are some challenges mainly so there were some previous effort on",
    "start": "1112360",
    "end": "1118780"
  },
  {
    "text": "implementing execute only memory but these were suffer emulated solutions",
    "start": "1118780",
    "end": "1124539"
  },
  {
    "text": "which are basically not secure so if there's a page executed it automatically",
    "start": "1124539",
    "end": "1129730"
  },
  {
    "text": "also comes readable and an adversary can exploit this what we want to have is",
    "start": "1129730",
    "end": "1135240"
  },
  {
    "text": "execute only memory enforced by the artwork and of course it should run on current hardware so we don't want to",
    "start": "1135240",
    "end": "1142299"
  },
  {
    "text": "depend on any legacy features or anything else and the way we do this is",
    "start": "1142299",
    "end": "1149799"
  },
  {
    "text": "we use memory virtualization so but let",
    "start": "1149799",
    "end": "1154870"
  },
  {
    "start": "1154000",
    "end": "1154000"
  },
  {
    "text": "me first give you a quick recap on how memory protection in general works on",
    "start": "1154870",
    "end": "1160750"
  },
  {
    "text": "any pics 86 so we have virtual addresses which gets translated to using a",
    "start": "1160750",
    "end": "1168010"
  },
  {
    "text": "so-called page table to physical addresses physical addresses is the real address in your in your memory and",
    "start": "1168010",
    "end": "1174840"
  },
  {
    "text": "during the translation the memory management unit can enforce some",
    "start": "1174840",
    "end": "1180850"
  },
  {
    "text": "permissions however the advantageous advantage of this x86 page service is",
    "start": "1180850",
    "end": "1187539"
  },
  {
    "text": "that as soon as your code page is executable it is also readable so",
    "start": "1187539",
    "end": "1193780"
  },
  {
    "text": "there's no extra flag which you can say okay I only want to add this page executable but not readable",
    "start": "1193780",
    "end": "1201500"
  },
  {
    "text": "same goes for having a page writable so when a page is writable is also readable",
    "start": "1201500",
    "end": "1207950"
  },
  {
    "text": "and in theory also executable the way the vendors solve this issue they",
    "start": "1207950",
    "end": "1214010"
  },
  {
    "text": "introduce another bit to the page table which basically basically says okay this space should not be executable but as I",
    "start": "1214010",
    "end": "1222590"
  },
  {
    "text": "said we don't get executed only however if we enable memory virtualization we",
    "start": "1222590",
    "end": "1228800"
  },
  {
    "text": "actually add another layer of translation so our virtual addresses get",
    "start": "1228800",
    "end": "1235670"
  },
  {
    "text": "first translated to guests physical addresses which then again get",
    "start": "1235670",
    "end": "1241580"
  },
  {
    "text": "translated using the extended page tables to host physical addresses which are then the real physical addresses and",
    "start": "1241580",
    "end": "1249820"
  },
  {
    "text": "the extended page tables allow us to set the permission fits individually that is",
    "start": "1249820",
    "end": "1255230"
  },
  {
    "text": "we can actually say okay a page should only be executable and the effective",
    "start": "1255230",
    "end": "1261920"
  },
  {
    "text": "permission for our page is then determined by the intersection of the permission of the page table and the",
    "start": "1261920",
    "end": "1268370"
  },
  {
    "text": "extended patient so we can actually mark cool pages as an execute only as you can",
    "start": "1268370",
    "end": "1276050"
  },
  {
    "text": "see for all other pages we basically set",
    "start": "1276050",
    "end": "1281240"
  },
  {
    "text": "the permission and II extended page table to read write execute so that the effective Commission of the page is",
    "start": "1281240",
    "end": "1288640"
  },
  {
    "text": "determined by the Commission set only paige Taylor because again it's the intersection of posts so this is how we",
    "start": "1288640",
    "end": "1296530"
  },
  {
    "text": "can't prevent direct memory disclosure but as mentioned before they are still",
    "start": "1296530",
    "end": "1303890"
  },
  {
    "text": "this thing called indirect memory disorder and it can give you a quick example on how this actually works so",
    "start": "1303890",
    "end": "1311210"
  },
  {
    "start": "1306000",
    "end": "1306000"
  },
  {
    "text": "consider an application where we have execute only memory enabled and we have two functions so we apply some fine",
    "start": "1311210",
    "end": "1318950"
  },
  {
    "text": "grained randomization and permeate the function order so the attacker can no",
    "start": "1318950",
    "end": "1325010"
  },
  {
    "text": "longer know where these functions are located however the attacker does know that we only parrot eight functions and",
    "start": "1325010",
    "end": "1331820"
  },
  {
    "text": "that the content of the function is still the same so all the instructions remain the same and what the attacker can do you can",
    "start": "1331820",
    "end": "1340430"
  },
  {
    "text": "leak pointers to these functions it doesn't it actually doesn't matter whether the function pointer points the",
    "start": "1340430",
    "end": "1346730"
  },
  {
    "text": "beginning of the function or into the middle of the function once he has a pointer to somewhere in the function he",
    "start": "1346730",
    "end": "1353510"
  },
  {
    "text": "can infer the instructions within the function and then get get our schedules",
    "start": "1353510",
    "end": "1359890"
  },
  {
    "text": "so what we are going to do about that we do coat pointer hiding I don't know if",
    "start": "1359890",
    "end": "1367490"
  },
  {
    "start": "1363000",
    "end": "1363000"
  },
  {
    "text": "you're familiar with the famous computer scientists called David wheeler he wants",
    "start": "1367490",
    "end": "1372530"
  },
  {
    "text": "that all problems in computer science can be solved by another level level of",
    "start": "1372530",
    "end": "1377750"
  },
  {
    "text": "indirection and yeah this is basically what we did we added another layer of",
    "start": "1377750",
    "end": "1382970"
  },
  {
    "text": "indirection in form of so-called trampolines they basically just jumped",
    "start": "1382970",
    "end": "1389060"
  },
  {
    "text": "direct jump instructions however since they recite and execute only memory the attacker cannot disclose the destination",
    "start": "1389060",
    "end": "1397970"
  },
  {
    "text": "of this terms so while the attacker do know the address of the trampoline he",
    "start": "1397970",
    "end": "1403640"
  },
  {
    "text": "does not know where the trampoline is going to and an application of obviously",
    "start": "1403640",
    "end": "1408920"
  },
  {
    "text": "knows where which trampoline to use and can just use the trampoline and then go into the function note we own we also",
    "start": "1408920",
    "end": "1419120"
  },
  {
    "text": "permit eight the order of the front trampolines itself so an attacker can not just disclosed one trampoline",
    "start": "1419120",
    "end": "1425630"
  },
  {
    "text": "address and then also for all the others",
    "start": "1425630",
    "end": "1429820"
  },
  {
    "text": "so here's our did a coming to implementation here's our design of",
    "start": "1431230",
    "end": "1436520"
  },
  {
    "start": "1432000",
    "end": "1432000"
  },
  {
    "text": "protector so what we did we modified a compiler in particularly modified llvm",
    "start": "1436520",
    "end": "1443840"
  },
  {
    "text": "so one of the most crucial things is that llv m or the compiler does not put",
    "start": "1443840",
    "end": "1449390"
  },
  {
    "text": "data into the code section because our code sections will be marked as execute on lee and when there's data in there",
    "start": "1449390",
    "end": "1456500"
  },
  {
    "text": "which the program wants to use it will just crash next we apply some fine",
    "start": "1456500",
    "end": "1462560"
  },
  {
    "text": "grained run encode romanization and form of function permutation since this is a very cheap way of",
    "start": "1462560",
    "end": "1468890"
  },
  {
    "text": "in sense of performance to apply randomization and you also do register",
    "start": "1468890",
    "end": "1474730"
  },
  {
    "text": "randomization which I will come to later again and of course we for every coat",
    "start": "1474730",
    "end": "1480290"
  },
  {
    "text": "pointer which is used within the application we create some trampolines",
    "start": "1480290",
    "end": "1485690"
  },
  {
    "text": "so we can do Co point of hiding so at",
    "start": "1485690",
    "end": "1491810"
  },
  {
    "start": "1491000",
    "end": "1491000"
  },
  {
    "text": "runtime it basically looks like this we implement a very thin hypervisor this is",
    "start": "1491810",
    "end": "1498110"
  },
  {
    "text": "really just to enable memory virtualization and can be done in we",
    "start": "1498110",
    "end": "1503810"
  },
  {
    "text": "have like under 500 lines of c code and it really only enables memory",
    "start": "1503810",
    "end": "1509030"
  },
  {
    "text": "virtualization and sets up the extended page table to have execute only memory but the rest of the operating system",
    "start": "1509030",
    "end": "1515510"
  },
  {
    "text": "will execute on the bare metal system so there's no interaction required anymore",
    "start": "1515510",
    "end": "1520640"
  },
  {
    "text": "and we also did some modification to the operating system because currently they",
    "start": "1520640",
    "end": "1526550"
  },
  {
    "text": "I mean there's no support breaks you could only memory natively by izzy's 86",
    "start": "1526550",
    "end": "1532190"
  },
  {
    "text": "Harper a page tables so we also had to change the operating system a bit to",
    "start": "1532190",
    "end": "1539120"
  },
  {
    "text": "make use of the feature that we are providing through the same hypervisor from there on we can run both",
    "start": "1539120",
    "end": "1547130"
  },
  {
    "text": "application like a ridiculous of which protective our scheme which will just notify the operating system that every",
    "start": "1547130",
    "end": "1553490"
  },
  {
    "text": "code page of the application should be Marcus exude only as well as legacy application where the application will",
    "start": "1553490",
    "end": "1559280"
  },
  {
    "text": "just say okay I want to have my code pages as readable and executable so we don't break anything we can have",
    "start": "1559280",
    "end": "1565160"
  },
  {
    "text": "protected and unprotected applications on the same system it might look not so",
    "start": "1565160",
    "end": "1572330"
  },
  {
    "text": "good to have a hypervisor in there and actually it's also not really needed",
    "start": "1572330",
    "end": "1577520"
  },
  {
    "text": "anymore after we finished our work until announced their protection keys which",
    "start": "1577520",
    "end": "1584240"
  },
  {
    "text": "are meant to be / to protect keys in memory however we can also exploit this",
    "start": "1584240",
    "end": "1590450"
  },
  {
    "text": "feature to have executed only memory so we actually don't depend on the hypervisor anymore so now we can protect",
    "start": "1590450",
    "end": "1599530"
  },
  {
    "text": "ahead of time compiled code but yes we said like sophisticated",
    "start": "1599530",
    "end": "1607220"
  },
  {
    "text": "attacks are normally not launched against the windows calculator calculators after much know what",
    "start": "1607220",
    "end": "1615470"
  },
  {
    "text": "we want to protect applications which are target of sophisticated attacks",
    "start": "1615470",
    "end": "1621770"
  },
  {
    "text": "which is which are normally lunch through scripting engines so we want to",
    "start": "1621770",
    "end": "1627380"
  },
  {
    "text": "protect browsers or document views and AF cheat code cheat code is a little bit",
    "start": "1627380",
    "end": "1633520"
  },
  {
    "start": "1633000",
    "end": "1633000"
  },
  {
    "text": "hard to protect or a little bit which must handle differently because it",
    "start": "1633520",
    "end": "1639860"
  },
  {
    "text": "frequently changes or modifies the code so it just treated at the code is actually treated as code and data the",
    "start": "1639860",
    "end": "1648140"
  },
  {
    "text": "way we solve this problem is that we separate the really nice separate the",
    "start": "1648140",
    "end": "1654770"
  },
  {
    "text": "phases where the compile a digit compiler needs to treat the code as data and what can be treated as as normal",
    "start": "1654770",
    "end": "1664549"
  },
  {
    "text": "code so during the phases where some compilation optimized optimization is",
    "start": "1664549",
    "end": "1671390"
  },
  {
    "text": "applied we map the code as read and write a bill and for the rest of the",
    "start": "1671390",
    "end": "1676880"
  },
  {
    "text": "time we wrapped it as executable so yeah",
    "start": "1676880",
    "end": "1681950"
  },
  {
    "text": "this is basically our solution NV modify also modified JIT compiler which I will",
    "start": "1681950",
    "end": "1688250"
  },
  {
    "text": "talk about in the next in the evaluation",
    "start": "1688250",
    "end": "1692620"
  },
  {
    "start": "1692000",
    "end": "1692000"
  },
  {
    "text": "for the evaluation we want to see okay can we really apply our solution to the",
    "start": "1693880",
    "end": "1700429"
  },
  {
    "text": "real world there and we did this during",
    "start": "1700429",
    "end": "1706309"
  },
  {
    "text": "different things so for performance we actually took the spec benchmarking to",
    "start": "1706309",
    "end": "1711980"
  },
  {
    "text": "us I don't know if you're familiar with it but basically it's a connection of programs which get some input and then",
    "start": "1711980",
    "end": "1718610"
  },
  {
    "text": "based on that you can you can apply your modification let let it be compiler modification or some runtime",
    "start": "1718610",
    "end": "1725120"
  },
  {
    "text": "modifications and it matters the CPU overhead and we use it to be comparable to other solutions because everybody is",
    "start": "1725120",
    "end": "1732290"
  },
  {
    "text": "at earth using it up also use the chromium benchmarks to get",
    "start": "1732290",
    "end": "1738860"
  },
  {
    "text": "a feel for how it would affect reward software and as mentioned before we also",
    "start": "1738860",
    "end": "1744860"
  },
  {
    "text": "evaluate the practicability by protecting the chromium browser which is",
    "start": "1744860",
    "end": "1750830"
  },
  {
    "text": "an hour view point of view a fairly complex piece of software and we also",
    "start": "1750830",
    "end": "1756820"
  },
  {
    "text": "modify the JavaScript engine of chromium v8 to test if everything's okay so here",
    "start": "1756820",
    "end": "1766159"
  },
  {
    "start": "1766000",
    "end": "1766000"
  },
  {
    "text": "are the performance numbers as you can see for most of them they're fairly low",
    "start": "1766159",
    "end": "1771500"
  },
  {
    "text": "we have some sparks but let's focus on the geometric mean the average over head",
    "start": "1771500",
    "end": "1778909"
  },
  {
    "text": "of our solution and you can see that the full rejecter so having every protection",
    "start": "1778909",
    "end": "1787700"
  },
  {
    "text": "enabled we get roughly six dot four percent overhead but notice that I only",
    "start": "1787700",
    "end": "1795529"
  },
  {
    "text": "enabling the hypervisor and execute only when we we already this introduces two",
    "start": "1795529",
    "end": "1801620"
  },
  {
    "text": "percent overhead so actually by using the different way to have executed only memory being a TPP inter protection keys",
    "start": "1801620",
    "end": "1811009"
  },
  {
    "text": "or maybe intel or AMD one sat in the future to the action page table some",
    "start": "1811009",
    "end": "1816889"
  },
  {
    "text": "execute only bit then we could Kathy performance by another two percent which",
    "start": "1816889",
    "end": "1822379"
  },
  {
    "text": "will leave us at roughly four percent overhead which is very practical we also",
    "start": "1822379",
    "end": "1828620"
  },
  {
    "text": "did evaluation for VBA v8 engine and there we get a similar number so between",
    "start": "1828620",
    "end": "1835340"
  },
  {
    "text": "60 to two and seven or eight percent overhead and actually for the chromium",
    "start": "1835340",
    "end": "1841190"
  },
  {
    "text": "browser for its benchmarks we only get so which tests mainly the smoothness and responsiveness of the web pages and of",
    "start": "1841190",
    "end": "1848090"
  },
  {
    "text": "the browser we only get four percent over it so it's if you use the chromium",
    "start": "1848090",
    "end": "1853490"
  },
  {
    "text": "browser with our protection applied you doesn't it you don't actually feel the difference but it's our solution secure",
    "start": "1853490",
    "end": "1865090"
  },
  {
    "start": "1861000",
    "end": "1861000"
  },
  {
    "text": "yes we can we put up resilience again direct and indirect memory disclosure",
    "start": "1865090",
    "end": "1871960"
  },
  {
    "text": "which leaves the attacker basically to guessing where the gadgets are because we really ensure that every executable",
    "start": "1871960",
    "end": "1880070"
  },
  {
    "text": "code resides a non readable memory however what we cannot prevent is that",
    "start": "1880070",
    "end": "1886940"
  },
  {
    "text": "an attacker discloses trampoline addresses and in our adversary model the",
    "start": "1886940",
    "end": "1892190"
  },
  {
    "text": "at although we do some randomization also there but in our adversary model we",
    "start": "1892190",
    "end": "1898039"
  },
  {
    "text": "have to assume that sooner or later the attacker will get access to every trampoline address and there are",
    "start": "1898039",
    "end": "1904370"
  },
  {
    "text": "actually two types of trampoline a test so we have trampoline which point which",
    "start": "1904370",
    "end": "1909620"
  },
  {
    "text": "dumped into the code and add function beginnings and for classical rap you usually want to aim for trampolines",
    "start": "1909620",
    "end": "1916549"
  },
  {
    "text": "which jump into the code one thing returned read program heavily depends on",
    "start": "1916549",
    "end": "1922159"
  },
  {
    "text": "is the data flow between individual registers so for example if an attacker",
    "start": "1922159",
    "end": "1927440"
  },
  {
    "text": "wants to do return her programming to execute a specific system or he wants to",
    "start": "1927440",
    "end": "1933409"
  },
  {
    "text": "make sure that use it one he uses one gadget which loads a specific value into",
    "start": "1933409",
    "end": "1940580"
  },
  {
    "text": "a specific register and by applying register randomization we can ensure",
    "start": "1940580",
    "end": "1946640"
  },
  {
    "text": "that the first sketch at which you use make for example to load a value and",
    "start": "1946640",
    "end": "1952789"
  },
  {
    "text": "register a we're no longer use register a but maybe B C or D so when this will",
    "start": "1952789",
    "end": "1958789"
  },
  {
    "text": "break via text sooner or later but there's this other kind of trampoline switch point at a function beginning and",
    "start": "1958789",
    "end": "1966100"
  },
  {
    "text": "actually this doesn't make a difference for the attacker like if he has the",
    "start": "1966100",
    "end": "1973490"
  },
  {
    "text": "diode address of the function or a trampoline which shunsui function in either case you will be he can execute",
    "start": "1973490",
    "end": "1979970"
  },
  {
    "text": "the old function and actually we have shown that we can also launch true and",
    "start": "1979970",
    "end": "1985070"
  },
  {
    "text": "complete attacks so the same thing is rock basically using virtual functions",
    "start": "1985070",
    "end": "1992020"
  },
  {
    "text": "and here's how we protect these watch this now for B tables but it basically applies to every Taylor of functions we",
    "start": "1992020",
    "end": "2000370"
  },
  {
    "start": "1994000",
    "end": "1994000"
  },
  {
    "text": "split the function table into two parts one part besides the peculiar memory and only",
    "start": "2000370",
    "end": "2006130"
  },
  {
    "text": "contains a pointer to the exit to the part which results in execute only memory and here we have again",
    "start": "2006130",
    "end": "2012159"
  },
  {
    "text": "trampolines however we don't only have trampolines we introduce some fake",
    "start": "2012159",
    "end": "2018070"
  },
  {
    "text": "entries can call booby traps which when executed just terminate the program and",
    "start": "2018070",
    "end": "2023940"
  },
  {
    "text": "that we do this because let's consider we have a function table which has only two entries so it would be very easy for",
    "start": "2023940",
    "end": "2030909"
  },
  {
    "text": "an attack gets and just by using brute force attack which function reset at",
    "start": "2030909",
    "end": "2036789"
  },
  {
    "text": "which location but by adding booby trap addresses we first increase the entropy",
    "start": "2036789",
    "end": "2043419"
  },
  {
    "text": "and also build up resilience against brute force attacks because when they take are executed booby trap we",
    "start": "2043419",
    "end": "2049690"
  },
  {
    "text": "automatically shut down the program and possibly also maybe notify an intrusion",
    "start": "2049690",
    "end": "2056560"
  },
  {
    "text": "detection system that we don't want to I don't know that we make sure that the",
    "start": "2056560",
    "end": "2064810"
  },
  {
    "text": "specific webpage or specific document cannot be opened by the user anymore so this this limits the ability of the",
    "start": "2064810",
    "end": "2073628"
  },
  {
    "text": "attacker to brute force everything and again it's an execute only memory so the attacker never know where the booby trap",
    "start": "2073629",
    "end": "2080648"
  },
  {
    "text": "is and where the really entry is about the application which was compiled using which is aware of these booby traps and",
    "start": "2080649",
    "end": "2087429"
  },
  {
    "text": "the randomization obviously can use it without breaking the program so to",
    "start": "2087429",
    "end": "2095260"
  },
  {
    "start": "2095000",
    "end": "2095000"
  },
  {
    "text": "conclude our our defense technique code",
    "start": "2095260",
    "end": "2101290"
  },
  {
    "text": "reuse detects a severe threat this is acknowledged by the industry that we",
    "start": "2101290",
    "end": "2107080"
  },
  {
    "text": "have seen that Microsoft and Google they build up defenses against these these are texts however they oh they have to",
    "start": "2107080",
    "end": "2117000"
  },
  {
    "text": "and they have to make it performance and legacy compliant so there's always some",
    "start": "2117000",
    "end": "2124089"
  },
  {
    "text": "way around it with rejecter we built the first half Air Force execute only fine",
    "start": "2124089",
    "end": "2130510"
  },
  {
    "text": "great memory memory randomization scheme for current x86 hardware we are",
    "start": "2130510",
    "end": "2136690"
  },
  {
    "text": "resilient against both direct and indirect Co disclosure and we can protect complex",
    "start": "2136690",
    "end": "2144160"
  },
  {
    "text": "and rework things like cheat code or the chromium browser and with it okay so you",
    "start": "2144160",
    "end": "2151180"
  },
  {
    "text": "want me to say something about you and okay okay it's so they're coming soon",
    "start": "2151180",
    "end": "2157630"
  },
  {
    "start": "2156000",
    "end": "2156000"
  },
  {
    "text": "actually I don't like what I should say so we talked about redactor as a",
    "start": "2157630",
    "end": "2164260"
  },
  {
    "text": "software or hardware assisted solution",
    "start": "2164260",
    "end": "2170670"
  },
  {
    "text": "also something that we call reactor + + which is as Christopher was mentioning",
    "start": "2170670",
    "end": "2177960"
  },
  {
    "text": "how you can protect against whole function reuse these are some new class",
    "start": "2177960",
    "end": "2184869"
  },
  {
    "text": "of attacks that actually simply said are",
    "start": "2184869",
    "end": "2190740"
  },
  {
    "text": "similar to return to lipsy attacks something that is known for for many many years but still very challenging to",
    "start": "2190740",
    "end": "2198810"
  },
  {
    "text": "to stop it other things that we are doing currently is also together with",
    "start": "2198810",
    "end": "2206109"
  },
  {
    "text": "industrial partners is how to use these",
    "start": "2206109",
    "end": "2211510"
  },
  {
    "text": "techniques randomization for example techniques with added mitigation",
    "start": "2211510",
    "end": "2217800"
  },
  {
    "text": "mechanisms for mobile platforms and because there we have another world maybe there we don't have hardware",
    "start": "2217800",
    "end": "2226150"
  },
  {
    "text": "support for execute only not in all platforms and I don't know who if you",
    "start": "2226150",
    "end": "2233619"
  },
  {
    "text": "are familiar with embedded system so the animated system world security is a mess",
    "start": "2233619",
    "end": "2239589"
  },
  {
    "text": "and an admitted systems are used in many",
    "start": "2239589",
    "end": "2245730"
  },
  {
    "text": "let's say even safety critical applications from automotive to a",
    "start": "2245730",
    "end": "2251430"
  },
  {
    "text": "critical infrastructure and these attacks I mean regenerate the programming attacks for embedded systems",
    "start": "2251430",
    "end": "2257290"
  },
  {
    "text": "maybe it is too advanced but they're all regenerated program attacks on embedded",
    "start": "2257290",
    "end": "2262990"
  },
  {
    "text": "systems and since this this area is not explored as as PC and server area",
    "start": "2262990",
    "end": "2270560"
  },
  {
    "text": "I'm sure that in future we have very advanced attacks on those systems as well and the buzzword is here are your",
    "start": "2270560",
    "end": "2278000"
  },
  {
    "text": "teas or Internet of Things for me there are embedded systems are connected to each other and that will have another",
    "start": "2278000",
    "end": "2284420"
  },
  {
    "text": "dimension because once you attack one of them maybe you can have a cross over",
    "start": "2284420",
    "end": "2290000"
  },
  {
    "text": "let's say infection to other devices this is why my personal thing beside the",
    "start": "2290000",
    "end": "2298400"
  },
  {
    "text": "aspect of software and randomization because it is very efficient also for",
    "start": "2298400",
    "end": "2303530"
  },
  {
    "text": "embedded systems one thing that we are also considering is other approaches as",
    "start": "2303530",
    "end": "2309650"
  },
  {
    "text": "I mentioned at the beginning like control flow integrity and in that sense we have collaboration with Intel their",
    "start": "2309650",
    "end": "2317200"
  },
  {
    "text": "hardware based control for integrity are considered as a good option this is",
    "start": "2317200",
    "end": "2324830"
  },
  {
    "text": "another approached and randomization it can tease the control flow of your program at least it gives you in",
    "start": "2324830",
    "end": "2331730"
  },
  {
    "text": "practice it gives you some guarantees and that means extending the CPU",
    "start": "2331730",
    "end": "2339650"
  },
  {
    "text": "instructions with specific instructions that are used for control for integrity with that I come to the end of the talk",
    "start": "2339650",
    "end": "2347300"
  },
  {
    "text": "and thank you very much for your attention",
    "start": "2347300",
    "end": "2350680"
  }
]