[
  {
    "text": "good morning everyone my name is alpha - oh I am the CEO of X rays company the",
    "start": "89",
    "end": "6870"
  },
  {
    "text": "company that publishes the ida pro disassembler and express the decompiler",
    "start": "6870",
    "end": "13889"
  },
  {
    "text": "and today we will talk about the decompile internals the microcode this",
    "start": "13889",
    "end": "22020"
  },
  {
    "text": "is a presentation outline we will discuss the decompiler architecture and",
    "start": "22020",
    "end": "27390"
  },
  {
    "text": "then we will go and check how the microcode is built in the compiler then",
    "start": "27390",
    "end": "35250"
  },
  {
    "text": "they will talk about the opcodes and operands this is the most interesting part of the talk then once we have these",
    "start": "35250",
    "end": "42780"
  },
  {
    "text": "building blocks we can talk about we will start with stack and registers and",
    "start": "42780",
    "end": "48690"
  },
  {
    "text": "then we will talk about other parent types and then finally what kind of",
    "start": "48690",
    "end": "54329"
  },
  {
    "text": "things we can do with the microcode it enables data flow analysis and because",
    "start": "54329",
    "end": "61949"
  },
  {
    "text": "of that many new analysis types are possible then I will tell you about the",
    "start": "61949",
    "end": "70049"
  },
  {
    "text": "availability of the microcode and some time for questions and transfers if we",
    "start": "70049",
    "end": "75600"
  },
  {
    "text": "have time I don't know I hope that you've heard about the compiler",
    "start": "75600",
    "end": "81930"
  },
  {
    "text": "we have the compiler it is existing it has been existing since the 10 years now",
    "start": "81930",
    "end": "90560"
  },
  {
    "text": "it is interactive fast robust and program of the compiler and it evolved",
    "start": "90860",
    "end": "99090"
  },
  {
    "text": "over time even in the initial version that's quite powerful but over time we",
    "start": "99090",
    "end": "105420"
  },
  {
    "text": "added support for many many processors so we can say that it's a retarget of",
    "start": "105420",
    "end": "111329"
  },
  {
    "text": "all the compiler as you see it can handle 5 processors for now and you see",
    "start": "111329",
    "end": "121590"
  },
  {
    "text": "that it handles native code it is not any compiler that handles byte code like",
    "start": "121590",
    "end": "126810"
  },
  {
    "text": "a Java or.net which is also possible but we",
    "start": "126810",
    "end": "132770"
  },
  {
    "text": "focus it on native code as it compiled runs on top of either Pro and the",
    "start": "132770",
    "end": "140760"
  },
  {
    "text": "internals were never really published shipped so if you wanted to play with",
    "start": "140760",
    "end": "147090"
  },
  {
    "text": "the decompiler you could do so on a high level but the intermediate language was",
    "start": "147090",
    "end": "154410"
  },
  {
    "text": "never documented and this book will show",
    "start": "154410",
    "end": "162020"
  },
  {
    "text": "you a bit and tell you about about this the micro microcode how the compiler",
    "start": "162020",
    "end": "170070"
  },
  {
    "text": "have six phases and in my opinion it's",
    "start": "170070",
    "end": "175260"
  },
  {
    "text": "very good very logical steps first of all we generate microcode then we try to",
    "start": "175260",
    "end": "181980"
  },
  {
    "text": "transform it to kind of optimize it yes",
    "start": "181980",
    "end": "187770"
  },
  {
    "text": "we use the same optimization techniques as compilers do we analyze calls the",
    "start": "187770",
    "end": "195780"
  },
  {
    "text": "result memory references and other stuff then we allocate local variables",
    "start": "195780",
    "end": "201830"
  },
  {
    "text": "generate a so called c3 c3 is something similar to HT then be beautified because",
    "start": "201830",
    "end": "212610"
  },
  {
    "text": "it's the initial c3 is quite ugly to tell the truth and then finally we print",
    "start": "212610",
    "end": "218220"
  },
  {
    "text": "the c3 in a human readable form so the user can analyze it examine it and",
    "start": "218220",
    "end": "225290"
  },
  {
    "text": "improve there are some options for that in this talk we will focus only on the",
    "start": "225290",
    "end": "232410"
  },
  {
    "text": "first two steps if you are interested in the rest you can check my black cap talk",
    "start": "232410",
    "end": "238380"
  },
  {
    "text": "I gave a black hat presentation 10 years ago it explained in more detail all these",
    "start": "238380",
    "end": "245459"
  },
  {
    "text": "steps except the first two first of all the question is why do we need the",
    "start": "245459",
    "end": "252930"
  },
  {
    "text": "microcode and the answer is very simple we want to get rid of the complexity of",
    "start": "252930",
    "end": "258870"
  },
  {
    "text": "processor instructions because all processors have their own special",
    "start": "258870",
    "end": "265889"
  },
  {
    "text": "geosynchronous or oddities I will give you just a few examples for example the",
    "start": "265889",
    "end": "273780"
  },
  {
    "text": "x86 processors have segment registers the floating-point processor has a stack",
    "start": "273780",
    "end": "282020"
  },
  {
    "text": "the ARM processor has some motor dresses",
    "start": "282020",
    "end": "287189"
  },
  {
    "text": "that have the low bit set which is ignored by the processor because if you",
    "start": "287189",
    "end": "294060"
  },
  {
    "text": "have an odd odd address like 13 for example the the function to call is",
    "start": "294060",
    "end": "301080"
  },
  {
    "text": "located at the address 12 but the last bit signals to the processor that when",
    "start": "301080",
    "end": "309689"
  },
  {
    "text": "performing the call it should switch to the thumb mode this is a very special",
    "start": "309689",
    "end": "315029"
  },
  {
    "text": "thing I haven't seen something similar in any as a processor and therefore such",
    "start": "315029",
    "end": "322199"
  },
  {
    "text": "a thing should not be present in the microcode the marker could makes the",
    "start": "322199",
    "end": "330300"
  },
  {
    "text": "decompiler portable we can you can say that we just",
    "start": "330300",
    "end": "335460"
  },
  {
    "text": "need to replace the micro code generator and we get a de compiler for a new",
    "start": "335460",
    "end": "341479"
  },
  {
    "text": "processor but of course the devil is in details and when I say just it's a just",
    "start": "341479",
    "end": "348930"
  },
  {
    "text": "and the quotes anyway overall the compiler without an intermediate",
    "start": "348930",
    "end": "355500"
  },
  {
    "text": "language looks like waste of time to me because once you finish the compiler",
    "start": "355500",
    "end": "362759"
  },
  {
    "text": "which never happens you will have to redo everything for another processor and we don't want",
    "start": "362759",
    "end": "369360"
  },
  {
    "text": "to support many only one processor because there are many many of them very popular now the question is is",
    "start": "369360",
    "end": "376639"
  },
  {
    "text": "implementing an intermediate representation or language a difficult thing about local how many intermediate",
    "start": "376639",
    "end": "386009"
  },
  {
    "text": "languages do you know well there are plenty of them in fact",
    "start": "386009",
    "end": "391189"
  },
  {
    "text": "all all the Iranian binary needs intermediate language read deck",
    "start": "391189",
    "end": "397949"
  },
  {
    "text": "yesterday they were too cold to presentations at blackhat here and they",
    "start": "397949",
    "end": "404129"
  },
  {
    "text": "were presenting intermediate languages as well so why do we need one more",
    "start": "404129",
    "end": "410569"
  },
  {
    "text": "internal representation well I cannot",
    "start": "410569",
    "end": "416400"
  },
  {
    "text": "reply this answer maybe it would be possible to use an existing one but for",
    "start": "416400",
    "end": "424199"
  },
  {
    "text": "us the reason was that I started to work on the microcode entity compiler a",
    "start": "424199",
    "end": "430740"
  },
  {
    "text": "really long ago it was in 90s I don't even remember the exact date when I",
    "start": "430740",
    "end": "436770"
  },
  {
    "text": "decided to to create micro code and that's the main reason why fix race the",
    "start": "436770",
    "end": "443189"
  },
  {
    "text": "compiler has its own intermediate language so I started in around 98 and",
    "start": "443189",
    "end": "453289"
  },
  {
    "text": "well I am very bad with names so I decided it's called mic record-wise microphone because every instruction",
    "start": "453289",
    "end": "459659"
  },
  {
    "text": "every processor instruction is split into multiple micro instructions and one",
    "start": "459659",
    "end": "468930"
  },
  {
    "text": "micro structure not one thing no side effects it's a very simple thing and",
    "start": "468930",
    "end": "474870"
  },
  {
    "text": "that's why as the name microcode looked logical to me naturally it is virtually",
    "start": "474870",
    "end": "483210"
  },
  {
    "text": "impossible to design something from scratch and get everything right some",
    "start": "483210",
    "end": "490050"
  },
  {
    "text": "design decision turned out to be bad for example we have a notion of a visual",
    "start": "490050",
    "end": "495180"
  },
  {
    "text": "stack registers well a design decision",
    "start": "495180",
    "end": "500550"
  },
  {
    "text": "that is taken at the early stages is really difficult to fix later because",
    "start": "500550",
    "end": "507300"
  },
  {
    "text": "there are many saw so much code relies on it on this concept and implicitly",
    "start": "507300",
    "end": "514190"
  },
  {
    "text": "assumes that we have beautiful stack registers well one other hand I have to",
    "start": "514190",
    "end": "519959"
  },
  {
    "text": "tell you that beautiful stack registers will disappear in the future",
    "start": "519959",
    "end": "525709"
  },
  {
    "text": "microcode continues to evolve and we continue to modify it but once we",
    "start": "525900",
    "end": "531940"
  },
  {
    "text": "publish in fact we already published it we will not modify it anymore we at",
    "start": "531940",
    "end": "538510"
  },
  {
    "text": "least will try not to modify it so what my design goals when I decided to create",
    "start": "538510",
    "end": "548620"
  },
  {
    "text": "micro code the first and the most important thing is simplicity we already",
    "start": "548620",
    "end": "554320"
  },
  {
    "text": "work in handling very complex things so the simple we make it the easier will be",
    "start": "554320",
    "end": "561880"
  },
  {
    "text": "in the future as you will see later you will see that I failed at this task but",
    "start": "561880",
    "end": "569350"
  },
  {
    "text": "it is because the real world is really complex but anyway at the beginning what",
    "start": "569350",
    "end": "576130"
  },
  {
    "text": "do we have when we start from scratch we have no processor specific stuff one",
    "start": "576130",
    "end": "582490"
  },
  {
    "text": "instruction one mic restriction does one thing and a very limited number of",
    "start": "582490",
    "end": "587850"
  },
  {
    "text": "instructions there were only 45 in 99 but today we packed 72 instructional",
    "start": "587850",
    "end": "594760"
  },
  {
    "text": "codes just because we had to support floating-point arithmetic and other",
    "start": "594760",
    "end": "601710"
  },
  {
    "text": "fancy things in fact what is good with the microcode that it can it really can",
    "start": "601710",
    "end": "607570"
  },
  {
    "text": "handle real-world programs and initially",
    "start": "607570",
    "end": "613240"
  },
  {
    "text": "we started with simple instruction operands initially we had registers its constants and memory well by memory I",
    "start": "613240",
    "end": "621910"
  },
  {
    "text": "mean the global variables and stack variables and with it I decided that we consider only compiler generated code",
    "start": "621910",
    "end": "628930"
  },
  {
    "text": "because when you talk about handcrafted assembler code anything has happened you",
    "start": "628930",
    "end": "634360"
  },
  {
    "text": "cannot trust even a disassembly listing not to talk about micro code of the",
    "start": "634360",
    "end": "640540"
  },
  {
    "text": "compiler because it is possible to to modify things that when you Lia read the",
    "start": "640540",
    "end": "647920"
  },
  {
    "text": "listing you see lot simpler innocent-looking instruction like move but in fact",
    "start": "647920",
    "end": "653540"
  },
  {
    "text": "[Music] when this instruction is executed there will be an exception Tapani and the",
    "start": "653540",
    "end": "660840"
  },
  {
    "text": "exception handler will do something else not move so you read the code you see instructions but they do not mean what",
    "start": "660840",
    "end": "668040"
  },
  {
    "text": "they look like another thing that we don't care about the timing since we",
    "start": "668040",
    "end": "674250"
  },
  {
    "text": "will optimize the microcode and throw away non interesting dead code then",
    "start": "674250",
    "end": "680850"
  },
  {
    "text": "timing will change therefore no need to even try to preserve anything the",
    "start": "680850",
    "end": "687030"
  },
  {
    "text": "instruction order we decided not to keep not to preserved it neither it is just",
    "start": "687030",
    "end": "692910"
  },
  {
    "text": "impossible in fact and order of memory accesses",
    "start": "692910",
    "end": "698300"
  },
  {
    "text": "we will not also will not have care about it neither so the easiest thing I",
    "start": "698300",
    "end": "707220"
  },
  {
    "text": "think that just to show you how it looks like let's take this for instructions very simple x86 instructions",
    "start": "707220",
    "end": "714600"
  },
  {
    "text": "apparently we access memory we read from eb x + 4 apparently it is a pointer",
    "start": "714600",
    "end": "722250"
  },
  {
    "text": "because the next thing we do we read abide from EI x + 1 then we subtract 6",
    "start": "722250",
    "end": "732680"
  },
  {
    "text": "261 and if it's 0 then we jump somewhere else apparently it is a fancy way of",
    "start": "732680",
    "end": "739920"
  },
  {
    "text": "comparing DL against 64 hexadecimal let's look like how will what will",
    "start": "739920",
    "end": "746520"
  },
  {
    "text": "happen what kind of Miko Mike report will be generated for that that's it as",
    "start": "746520",
    "end": "751920"
  },
  {
    "text": "you see out of 4 instructions we got 20 instructions and on the column just",
    "start": "751920",
    "end": "762540"
  },
  {
    "text": "write to the semicolon you will see the addresses of the original instructions",
    "start": "762540",
    "end": "767940"
  },
  {
    "text": "for example the instruction at FB got translated into 5 micro instructions and",
    "start": "767940",
    "end": "778550"
  },
  {
    "text": "instruction at the 501 got translated",
    "start": "778550",
    "end": "783660"
  },
  {
    "text": "into how many of them 7 seven - microinstructions you see that",
    "start": "783660",
    "end": "788710"
  },
  {
    "text": "all side-effects are spelled out explicitly",
    "start": "788710",
    "end": "795120"
  },
  {
    "text": "it's very verbose so we cannot present",
    "start": "795120",
    "end": "800290"
  },
  {
    "text": "this to a human being because it's not that eye readable not very nice - to",
    "start": "800290",
    "end": "806220"
  },
  {
    "text": "handle anyway so anyway what we'll do the next step it will try to optimize it a bit we'll throw away anything that is",
    "start": "806220",
    "end": "813250"
  },
  {
    "text": "not that will be used we will remove the dead folds at dead code and then we end",
    "start": "813250",
    "end": "819010"
  },
  {
    "text": "up with only nine micro instructions another thing that we did with micro",
    "start": "819010",
    "end": "824050"
  },
  {
    "text": "code is that we forwarded propagated some instructions into another",
    "start": "824050",
    "end": "830380"
  },
  {
    "text": "instructions take for example the very first instruction here it's LD X which stands for load from memory it loads",
    "start": "830380",
    "end": "837730"
  },
  {
    "text": "from the memory and the offset is specified as EBE X plus four wishes an",
    "start": "837730",
    "end": "845910"
  },
  {
    "text": "additional instruction so the addition instruction got propagated into LD X",
    "start": "845910",
    "end": "853350"
  },
  {
    "text": "this kind of makes the microcode slightly more complex than initially but",
    "start": "853350",
    "end": "859480"
  },
  {
    "text": "on the other hand it will allow us to represent nicely at the very end when",
    "start": "859480",
    "end": "867010"
  },
  {
    "text": "the the compiler will finish its work let's continue there will be further",
    "start": "867010",
    "end": "872320"
  },
  {
    "text": "microcode transformations I will not stop at them in detail but what we all",
    "start": "872320",
    "end": "877780"
  },
  {
    "text": "have we will first have three instructions and finally we'll just have",
    "start": "877780",
    "end": "883210"
  },
  {
    "text": "one very long micro instruction this micro instruction does not really deserve its name anymore because not on",
    "start": "883210",
    "end": "890620"
  },
  {
    "text": "micro it's it became very very complex instruction but other on the other hand",
    "start": "890620",
    "end": "896050"
  },
  {
    "text": "it has a very nice feature of being",
    "start": "896050",
    "end": "901440"
  },
  {
    "text": "translatable into C 3 so if we translate",
    "start": "901440",
    "end": "907360"
  },
  {
    "text": "it into C 3 we will get a very nice if if RV apparently are the initial is a",
    "start": "907360",
    "end": "914770"
  },
  {
    "text": "EBX contained pointer to it was arc v then be just that if arc v1 1 is equal",
    "start": "914770",
    "end": "923410"
  },
  {
    "text": "to a then we do something well I'm sorry",
    "start": "923410",
    "end": "931810"
  },
  {
    "text": "that reading microcode is not easy because it was not one of the initial design goals as you see all operand",
    "start": "931810",
    "end": "939370"
  },
  {
    "text": "sizes I explode spelt out explicitly and well the initial macro code was simple",
    "start": "939370",
    "end": "946180"
  },
  {
    "text": "but then it became quite complex so the",
    "start": "946180",
    "end": "952450"
  },
  {
    "text": "translation from native processor instructions to micro instruction have",
    "start": "952450",
    "end": "959019"
  },
  {
    "text": "been implemented in plain C++ for now we don't use any automatic code generations",
    "start": "959019",
    "end": "966370"
  },
  {
    "text": "or machine description to generate them maybe it's a good idea but so far I",
    "start": "966370",
    "end": "971560"
  },
  {
    "text": "don't feel that we are ready for that now I will just go quite hopefully I",
    "start": "971560",
    "end": "981070"
  },
  {
    "text": "will go quickly and tell you about the possible instructions that exist in",
    "start": "981070",
    "end": "988120"
  },
  {
    "text": "micro code as you will see they are quite straightforward and on to the hand",
    "start": "988120",
    "end": "993990"
  },
  {
    "text": "this 72 up codes cover all current needs that we have with real-world programs so",
    "start": "993990",
    "end": "1002910"
  },
  {
    "text": "the first group is the two instructions they just move valuable values from one",
    "start": "1002910",
    "end": "1011100"
  },
  {
    "text": "place to another place in fact we have here L and R left and destination",
    "start": "1011100",
    "end": "1021620"
  },
  {
    "text": "operands in fact all micro instructions have three operands left right and",
    "start": "1021620",
    "end": "1029130"
  },
  {
    "text": "destination don't ask me why it's called left Ryan destination but okay this like this here we have load constant and move",
    "start": "1029130",
    "end": "1038970"
  },
  {
    "text": "instructions nothing fancy to represent",
    "start": "1038970",
    "end": "1044120"
  },
  {
    "text": "real-world programs we need to be able to work these parts of instruction parts",
    "start": "1044120",
    "end": "1051030"
  },
  {
    "text": "of registers read or write on the one byte or part of",
    "start": "1051030",
    "end": "1056909"
  },
  {
    "text": "the double word therefore we need to change the operand size for that we have",
    "start": "1056909",
    "end": "1062669"
  },
  {
    "text": "four instructions extents sign or extent with zero zero field and take low or",
    "start": "1062669",
    "end": "1071820"
  },
  {
    "text": "high parts of operand and here as in any",
    "start": "1071820",
    "end": "1077700"
  },
  {
    "text": "other instruction the left and destination operands can be anything it",
    "start": "1077700",
    "end": "1082769"
  },
  {
    "text": "can be register it can be stack it can be a global memory or even more complex",
    "start": "1082769",
    "end": "1089190"
  },
  {
    "text": "things there are only two instructions that work with the memory initially we",
    "start": "1089190",
    "end": "1095700"
  },
  {
    "text": "have stored to memory and read from memory they have they denote the memory",
    "start": "1095700",
    "end": "1103649"
  },
  {
    "text": "locations by using a pair of a selector and offset this will allow us to handle",
    "start": "1103649",
    "end": "1110659"
  },
  {
    "text": "segmented memory if there's an if if you need to do so so far we were using only",
    "start": "1110659",
    "end": "1118130"
  },
  {
    "text": "flat memory model so the this feature of micro code was not really used but it is",
    "start": "1118130",
    "end": "1125070"
  },
  {
    "text": "there for the future we have a very natural and standard set of comparisons",
    "start": "1125070",
    "end": "1132990"
  },
  {
    "text": "they compare the left operand against the right operand and put the result in",
    "start": "1132990",
    "end": "1139710"
  },
  {
    "text": "the form of 0 1 into the destination operand so these instructions are used",
    "start": "1139710",
    "end": "1147200"
  },
  {
    "text": "mainly to generate processor condition codes and the destination register is",
    "start": "1147200",
    "end": "1156899"
  },
  {
    "text": "usually something like a carry flag 0 flag and so on but we don't really limit",
    "start": "1156899",
    "end": "1163860"
  },
  {
    "text": "them to the Preda predefined set of registers so therefore even PowerPC for",
    "start": "1163860",
    "end": "1171210"
  },
  {
    "text": "example with its four sets of condition",
    "start": "1171210",
    "end": "1177210"
  },
  {
    "text": "codes can be handled very nicely by the microcode then we have",
    "start": "1177210",
    "end": "1183950"
  },
  {
    "text": "natural set of arithmetic and bitwise operations last thing to say here the",
    "start": "1183950",
    "end": "1193020"
  },
  {
    "text": "shifts we have only three shifts and no rotations at the rotation operator",
    "start": "1193020",
    "end": "1198809"
  },
  {
    "text": "operations we exist that initially in the microcode but later we decide to",
    "start": "1198809",
    "end": "1204450"
  },
  {
    "text": "throw them away because they turned out to be useless we cannot represent them nicely in in the C language and since",
    "start": "1204450",
    "end": "1212250"
  },
  {
    "text": "our target is C then it was not really",
    "start": "1212250",
    "end": "1217350"
  },
  {
    "text": "interesting to have them now the last microcode can represent rotations using",
    "start": "1217350",
    "end": "1224460"
  },
  {
    "text": "a so called helper functions I will show you later we have the following group of",
    "start": "1224460",
    "end": "1232169"
  },
  {
    "text": "very fancy and odd instructions they are",
    "start": "1232169",
    "end": "1237620"
  },
  {
    "text": "necessary to precisely track the carry and overflow beats after arithmetic",
    "start": "1237620",
    "end": "1244620"
  },
  {
    "text": "operations like add for example we have a pair of instructions like add and an",
    "start": "1244620",
    "end": "1249809"
  },
  {
    "text": "ADC this pair is used very often to handle to implement 64-bit operations on",
    "start": "1249809",
    "end": "1258090"
  },
  {
    "text": "the 32-bit platforms or even to implement 120 beta 28 bit operations on",
    "start": "1258090",
    "end": "1265559"
  },
  {
    "text": "64-bit processors and to be able to correct their present things we need",
    "start": "1265559",
    "end": "1271020"
  },
  {
    "text": "these odd instructions normally they get eliminated during micro transformations",
    "start": "1271020",
    "end": "1277789"
  },
  {
    "text": "once we detect that a add and a DC they",
    "start": "1277789",
    "end": "1283020"
  },
  {
    "text": "come in pair we will combine them into one big addition instruction and CF add",
    "start": "1283020",
    "end": "1290669"
  },
  {
    "text": "for example will simply disappear then",
    "start": "1290669",
    "end": "1296549"
  },
  {
    "text": "we have control flow instructions like indirect jab indirect jumps and go tools",
    "start": "1296549",
    "end": "1304650"
  },
  {
    "text": "indirect jumps normally should go away after some transformations if not then",
    "start": "1304650",
    "end": "1311789"
  },
  {
    "text": "it's bad luck because in the language there's no counterpart",
    "start": "1311789",
    "end": "1318310"
  },
  {
    "text": "there's no nice way of representing indirect jumps the calls there are two",
    "start": "1318310",
    "end": "1324310"
  },
  {
    "text": "different instructions for them direct and indirect calls this is a very tough",
    "start": "1324310",
    "end": "1332020"
  },
  {
    "text": "problem with the call instructions because when we have a call native instruction we don't know what is",
    "start": "1332020",
    "end": "1340210"
  },
  {
    "text": "the calling convention and we don't know with the return value and and this is",
    "start": "1340210",
    "end": "1346660"
  },
  {
    "text": "one of the biggest problems during reverse engineer during the compilation",
    "start": "1346660",
    "end": "1352380"
  },
  {
    "text": "to determine them and if we are lucky we",
    "start": "1352380",
    "end": "1360310"
  },
  {
    "text": "are calling a via we call a well-known function like closed handle create file",
    "start": "1360310",
    "end": "1366100"
  },
  {
    "text": "then we know the calling conversion everything if not the D compiler will",
    "start": "1366100",
    "end": "1371290"
  },
  {
    "text": "try to guess the this information of the calling conventions or call arguments",
    "start": "1371290",
    "end": "1378570"
  },
  {
    "text": "and all this information will be stored in the D operand and at the bottom of",
    "start": "1378570",
    "end": "1386860"
  },
  {
    "text": "the slide you will see that how we represent the cold instructions you see",
    "start": "1386860",
    "end": "1394180"
  },
  {
    "text": "that there's a lot of detail here and and this detail is enough to represent",
    "start": "1394180",
    "end": "1401100"
  },
  {
    "text": "again all real-world programs but almost all because recently as they were",
    "start": "1401100",
    "end": "1408600"
  },
  {
    "text": "someone complaining about our the compiler not being able to handle some",
    "start": "1408600",
    "end": "1415000"
  },
  {
    "text": "rust language constructs but we will fix that in the future the next group is the",
    "start": "1415000",
    "end": "1425680"
  },
  {
    "text": "conditional jumps group they are similar to the instructions that generating a",
    "start": "1425680",
    "end": "1432460"
  },
  {
    "text": "kind of processor condition codes so we have a jump very standard set of jump",
    "start": "1432460",
    "end": "1438220"
  },
  {
    "text": "zero jump non zero greater and so and so on maybe the first and the very last",
    "start": "1438220",
    "end": "1443920"
  },
  {
    "text": "instructions are somehow special here it's conditional means jump evaluate the left",
    "start": "1443920",
    "end": "1452720"
  },
  {
    "text": "operand and if it's nonzero then take the jump to the destination and jump",
    "start": "1452720",
    "end": "1459860"
  },
  {
    "text": "table is used to represent the switch idioms in the output initially we had no",
    "start": "1459860",
    "end": "1470210"
  },
  {
    "text": "floating-point operations but since our goal is to be able to represent",
    "start": "1470210",
    "end": "1476740"
  },
  {
    "text": "real-world programs then we had to add the necessary stuff as it turns out it's",
    "start": "1476740",
    "end": "1485420"
  },
  {
    "text": "not that big you see CT we just need a few conversion instructions and and a",
    "start": "1485420",
    "end": "1494030"
  },
  {
    "text": "few arithmetic operations for operations like add subtract multiply divide",
    "start": "1494030",
    "end": "1499840"
  },
  {
    "text": "negation and that's it the rest like built-in functions like casinos or",
    "start": "1499840",
    "end": "1509060"
  },
  {
    "text": "logarithm and other things can be handled using a so called helper",
    "start": "1509060",
    "end": "1514280"
  },
  {
    "text": "functions I will show you later hopefully and finally we have some the",
    "start": "1514280",
    "end": "1521900"
  },
  {
    "text": "last group it's called the miscellaneous the most interesting instruction here I",
    "start": "1521900",
    "end": "1527180"
  },
  {
    "text": "think that it's a external instruction because some processor instructions",
    "start": "1527180",
    "end": "1534080"
  },
  {
    "text": "cannot be expressive microcode take something like load interrupt this",
    "start": "1534080",
    "end": "1541310"
  },
  {
    "text": "descriptor or system call or other things we don't let's say square root we",
    "start": "1541310",
    "end": "1552950"
  },
  {
    "text": "don't have microcode instructions for them and they are represented either",
    "start": "1552950",
    "end": "1558820"
  },
  {
    "text": "using so called increasing calls or helper calls or the external destruction",
    "start": "1558820",
    "end": "1566060"
  },
  {
    "text": "the externally micro instruction just tells us that this is something that we",
    "start": "1566060",
    "end": "1573080"
  },
  {
    "text": "cannot express in the micro code but it helps us to trace the data dependencies",
    "start": "1573080",
    "end": "1579890"
  },
  {
    "text": "so we know for example sample that I am ill will used is it ax",
    "start": "1579890",
    "end": "1586599"
  },
  {
    "text": "eh I think that it used a H resistor and modifies al I don't remember what AM am",
    "start": "1586599",
    "end": "1593839"
  },
  {
    "text": "does but anyway it just allows us to trace the data dependencies and we also",
    "start": "1593839",
    "end": "1602929"
  },
  {
    "text": "the instruction called undefined is used to represent to express the fact that",
    "start": "1602929",
    "end": "1610389"
  },
  {
    "text": "something is spoiled in a way that we cannot predict to describe for example",
    "start": "1610389",
    "end": "1615889"
  },
  {
    "text": "the zero flag after multiplication is spoiled that's it you see that it does",
    "start": "1615889",
    "end": "1624589"
  },
  {
    "text": "not that fast and we have this 72 instructions maybe it should extend it a",
    "start": "1624589",
    "end": "1630289"
  },
  {
    "text": "bit but I don't feel the need right now exclude it looks good and I think that we will stay like this for a while so",
    "start": "1630289",
    "end": "1639639"
  },
  {
    "text": "now let's switch to the operands because I discovered discussed the instruction",
    "start": "1639639",
    "end": "1645229"
  },
  {
    "text": "of course but I did not show you what they operate on well if you take as",
    "start": "1645229",
    "end": "1655039"
  },
  {
    "text": "everyone knows we initially we had only two things numbers and registers it was",
    "start": "1655039",
    "end": "1660499"
  },
  {
    "text": "very simple because we take register we put a value into a register we know that it won't go away it won't disappear it",
    "start": "1660499",
    "end": "1667579"
  },
  {
    "text": "won't be changed by someone else in other words only direct accesses are",
    "start": "1667579",
    "end": "1673279"
  },
  {
    "text": "possible in direct accessible as access to registers are not possible and therefore it was very simple to analyze",
    "start": "1673279",
    "end": "1680419"
  },
  {
    "text": "things but the reality is much more diverse than that and we had to add a",
    "start": "1680419",
    "end": "1687259"
  },
  {
    "text": "lot of new operand types logically we started with stack variables then global",
    "start": "1687259",
    "end": "1694309"
  },
  {
    "text": "variables and addresses result of as instructions and so on and so on the",
    "start": "1694309",
    "end": "1700879"
  },
  {
    "text": "list is not exhaustive here they are much more instruction types than the slides trolls but anyway just I will",
    "start": "1700879",
    "end": "1708709"
  },
  {
    "text": "stop on some of these operands then we'll discuss what how Mia",
    "start": "1708709",
    "end": "1716900"
  },
  {
    "text": "microcode can be used the register operands if you work these xe6 you know",
    "start": "1716900",
    "end": "1723530"
  },
  {
    "text": "that it has a very funny way of funny",
    "start": "1723530",
    "end": "1730070"
  },
  {
    "text": "register set we have EAX it has parts of e l eh and it's quite difficult to work",
    "start": "1730070",
    "end": "1738950"
  },
  {
    "text": "with them we don't want this kind of mess in the microcode therefore all of them are mapped to micro registers for",
    "start": "1738950",
    "end": "1746360"
  },
  {
    "text": "example a ax is mapped into four micro register 1 micro register is 1 byte and",
    "start": "1746360",
    "end": "1753160"
  },
  {
    "text": "this mapping is very straightforward very simple it can be done",
    "start": "1753160",
    "end": "1758980"
  },
  {
    "text": "forward and backward we can go back from micro registers to back to processor",
    "start": "1758980",
    "end": "1764570"
  },
  {
    "text": "registers and it it helps to understand the code and usually there are more",
    "start": "1764570",
    "end": "1772760"
  },
  {
    "text": "micro registers in the in the code than processor resistors beacon we can",
    "start": "1772760",
    "end": "1777980"
  },
  {
    "text": "allocate them as needed when we generate the microcode once I implemented the",
    "start": "1777980",
    "end": "1788000"
  },
  {
    "text": "first very first version of the microcode engine and added some rules to",
    "start": "1788000",
    "end": "1796640"
  },
  {
    "text": "simplify it to optimize it nature well",
    "start": "1796640",
    "end": "1802670"
  },
  {
    "text": "it was natural that they work with registers like for example saw ax ax it",
    "start": "1802670",
    "end": "1809510"
  },
  {
    "text": "is the same thing as putting 0 into e ax and I had no logic to work with the",
    "start": "1809510",
    "end": "1818180"
  },
  {
    "text": "stack variables and I was lazy and decide ye not just map the stack frame",
    "start": "1818180",
    "end": "1826660"
  },
  {
    "text": "to micro registers since we have unlimited number of micro registers we",
    "start": "1826660",
    "end": "1834140"
  },
  {
    "text": "can just consider them as the same thing as what stack variables as micro",
    "start": "1834140",
    "end": "1840200"
  },
  {
    "text": "registers initially it helped a lot because I did not me",
    "start": "1840200",
    "end": "1845260"
  },
  {
    "text": "to implement to improve the existing optimization rules but later it kicked",
    "start": "1845260",
    "end": "1854860"
  },
  {
    "text": "up and it it it by it bit me because",
    "start": "1854860",
    "end": "1861450"
  },
  {
    "text": "there were many problems with the spec variables like indirect indirect",
    "start": "1861450",
    "end": "1867070"
  },
  {
    "text": "references to stack to the stack frame and therefore aspect variable cannot be",
    "start": "1867070",
    "end": "1872970"
  },
  {
    "text": "considered at the same thing as a register it can be modified by someone",
    "start": "1872970",
    "end": "1879690"
  },
  {
    "text": "using a pointer so we had to leave this",
    "start": "1879690",
    "end": "1885610"
  },
  {
    "text": "that for a while but finally I can tell you that we fix the problem and now this",
    "start": "1885610",
    "end": "1892480"
  },
  {
    "text": "bad design decision will go away just to",
    "start": "1892480",
    "end": "1900220"
  },
  {
    "text": "explain you in more detail where the problem is this slide shows the stack",
    "start": "1900220",
    "end": "1906760"
  },
  {
    "text": "frame of a typical stack frame of a function the red areas are the ones that",
    "start": "1906760",
    "end": "1915250"
  },
  {
    "text": "can be modified indirectly and therefore we cannot really reason about them and",
    "start": "1915250",
    "end": "1924180"
  },
  {
    "text": "we can we should not consider them as the same thing as virtual registers as",
    "start": "1924420",
    "end": "1930430"
  },
  {
    "text": "micro registers you see that in the middle of this diagram we see the return",
    "start": "1930430",
    "end": "1938710"
  },
  {
    "text": "address just below the return address this red area we have saved written some",
    "start": "1938710",
    "end": "1945550"
  },
  {
    "text": "local variables and beneath it we have",
    "start": "1945550",
    "end": "1950760"
  },
  {
    "text": "unalienable local variables therefore we can we have to handle this all red and",
    "start": "1950760",
    "end": "1957850"
  },
  {
    "text": "yellow areas in a different way for yet the yellow area we can we can reason",
    "start": "1957850",
    "end": "1967360"
  },
  {
    "text": "about the the variables we can perform dataflow",
    "start": "1967360",
    "end": "1972659"
  },
  {
    "text": "analysis while for the red area it is it is also possible but we have to remember",
    "start": "1972659",
    "end": "1980909"
  },
  {
    "text": "that any value that we stored can be modified indirectly the initial stack",
    "start": "1980909",
    "end": "1992089"
  },
  {
    "text": "registers and constants these three operant types they were not enough of",
    "start": "1992089",
    "end": "1997109"
  },
  {
    "text": "course very soon I had to add standard payers like EDX and e^x I was again it",
    "start": "1997109",
    "end": "2004759"
  },
  {
    "text": "was lazy to do so therefore I just mapped a e^x and EDX so that they add",
    "start": "2004759",
    "end": "2010489"
  },
  {
    "text": "just and as microwave II registers and instead of having two separate four byte",
    "start": "2010489",
    "end": "2018289"
  },
  {
    "text": "micro registers I ended up with a big 8 byte micro register but compilers get",
    "start": "2018289",
    "end": "2026209"
  },
  {
    "text": "better over time and modern compilers can can use any registers as a pair not",
    "start": "2026209",
    "end": "2032539"
  },
  {
    "text": "only a fixed like edx and TX it can be anything it can be even a stack location",
    "start": "2032539",
    "end": "2038979"
  },
  {
    "text": "plus a register so a value is stored in two different places the high part is",
    "start": "2038979",
    "end": "2045049"
  },
  {
    "text": "stored in the location pointed by SP plus 4 and the low part is stored in",
    "start": "2045049",
    "end": "2051799"
  },
  {
    "text": "register and the compiler can handle it nicely since compilers do this kind of",
    "start": "2051799",
    "end": "2057769"
  },
  {
    "text": "nasty things to us we had to introduce a new operant type for it so it's called",
    "start": "2057769",
    "end": "2063858"
  },
  {
    "text": "operant pair it exists in consists of tool to hots low and high part and this",
    "start": "2063859",
    "end": "2071179"
  },
  {
    "text": "house can be located anywhere anyway stack registers or global memory well in",
    "start": "2071179",
    "end": "2080059"
  },
  {
    "text": "fact this is not enough since we again we want to represent real world programs",
    "start": "2080059",
    "end": "2087970"
  },
  {
    "text": "it's not we cannot we have to represent real things that are used by compilers",
    "start": "2087970",
    "end": "2094628"
  },
  {
    "text": "with 60 in the 64-bit world these",
    "start": "2094629",
    "end": "2100780"
  },
  {
    "text": "the ABI that is defined like one one had",
    "start": "2100780",
    "end": "2105910"
  },
  {
    "text": "in the sixty four-bit walk we have a better situation because we don't have nightmare of calling conventions",
    "start": "2105910",
    "end": "2111690"
  },
  {
    "text": "everyone follows a calling conversion that is specified in the ABI well there",
    "start": "2111690",
    "end": "2117970"
  },
  {
    "text": "is a slight problem there because visual studio on Windows and GNU Compiler some",
    "start": "2117970",
    "end": "2125740"
  },
  {
    "text": "Linux they use different coding conversions but it's not a big problem for reverse engineering but this EP is",
    "start": "2125740",
    "end": "2133930"
  },
  {
    "text": "they introduced a very complex rules to",
    "start": "2133930",
    "end": "2140260"
  },
  {
    "text": "pass structures and unions to and from the functions for example we have a",
    "start": "2140260",
    "end": "2150730"
  },
  {
    "text": "structure it is only eight bytes so in theory it can be passed on the register",
    "start": "2150730",
    "end": "2156849"
  },
  {
    "text": "and yes that's what the compilers do they put the entire structure into a",
    "start": "2156849",
    "end": "2162430"
  },
  {
    "text": "register but sometimes they do even nasty things the past part of a",
    "start": "2162430",
    "end": "2168310"
  },
  {
    "text": "structure on a register and the rest on the stack let me show you an example",
    "start": "2168310",
    "end": "2176910"
  },
  {
    "text": "here we have a structure it's only eight bytes has two parts division the",
    "start": "2176910",
    "end": "2184750"
  },
  {
    "text": "division result it's a quotient and remainder and we have the division function it accepts two values and",
    "start": "2184750",
    "end": "2192369"
  },
  {
    "text": "divides them and then returns the result in in one register this is a nasty thing",
    "start": "2192369",
    "end": "2201359"
  },
  {
    "text": "if you look at the assembly code you will see that after the call call deal",
    "start": "2201359",
    "end": "2207490"
  },
  {
    "text": "we have move sign extended double word then we shift the double the quad reward",
    "start": "2207490",
    "end": "2218079"
  },
  {
    "text": "in our ax by 32 and the then we extract",
    "start": "2218079",
    "end": "2223480"
  },
  {
    "text": "the low part the second part to represent this in a",
    "start": "2223480",
    "end": "2231400"
  },
  {
    "text": "nice way in the output we need to have scattered",
    "start": "2231400",
    "end": "2238590"
  },
  {
    "text": "operands it's control operand is no parent that can have its parts scattered over",
    "start": "2238590",
    "end": "2246400"
  },
  {
    "text": "different places various places it can be registers or stack so you see that is",
    "start": "2246400",
    "end": "2254830"
  },
  {
    "text": "output is quite nice we have the result of the call is put into a variable",
    "start": "2254830",
    "end": "2260560"
  },
  {
    "text": "called v2 and the parent is v2 has is a structure and it has two fields the",
    "start": "2260560",
    "end": "2269170"
  },
  {
    "text": "quotient and remainder that were the",
    "start": "2269170",
    "end": "2276250"
  },
  {
    "text": "scattered operands turned out to be quite a complex things and we do have",
    "start": "2276250",
    "end": "2281770"
  },
  {
    "text": "support for them but not everything can be handled nicely we are working on it",
    "start": "2281770",
    "end": "2287740"
  },
  {
    "text": "but we are not there yet okay enough of",
    "start": "2287740",
    "end": "2295060"
  },
  {
    "text": "these minor details let's talk about what we can do with the microcode and",
    "start": "2295060",
    "end": "2301990"
  },
  {
    "text": "how the ducati compiler uses the microcode first of all the microcode as",
    "start": "2301990",
    "end": "2308320"
  },
  {
    "text": "you see that they generated microcode was very verbose and then we perform the",
    "start": "2308320",
    "end": "2313960"
  },
  {
    "text": "initial pre optimization step that use a very simple constant register a",
    "start": "2313960",
    "end": "2319990"
  },
  {
    "text": "propagation algorithm it's a very fast and gets rid of most temporary registers",
    "start": "2319990",
    "end": "2328620"
  },
  {
    "text": "reduces the microcode by two because it also removes unused instructions and",
    "start": "2328620",
    "end": "2337750"
  },
  {
    "text": "then later if you use another algorithm that will propagate",
    "start": "2337750",
    "end": "2344170"
  },
  {
    "text": "partial registers for example we can propagate EAX into an expression that",
    "start": "2344170",
    "end": "2350350"
  },
  {
    "text": "used only part of it it can move one instruction to inside another it can",
    "start": "2350350",
    "end": "2356710"
  },
  {
    "text": "work with all kinds of operands first we do all",
    "start": "2356710",
    "end": "2362439"
  },
  {
    "text": "these optimizations on the basic block level and then we build the control flow",
    "start": "2362439",
    "end": "2368469"
  },
  {
    "text": "graph and will to perform the dataflow analysis for that the result of the of",
    "start": "2368469",
    "end": "2377319"
  },
  {
    "text": "the dataflow analysis is represented as use and define chains so these chains",
    "start": "2377319",
    "end": "2387999"
  },
  {
    "text": "they used F information can later be used to to do many things with the",
    "start": "2387999",
    "end": "2394799"
  },
  {
    "text": "microcode we can delete the dead code for example it's at the beginning of a function we put some value into a",
    "start": "2394799",
    "end": "2402699"
  },
  {
    "text": "register but this value is never used in the function then we can delete it from",
    "start": "2402699",
    "end": "2409209"
  },
  {
    "text": "the output we can propagate operands and",
    "start": "2409209",
    "end": "2414279"
  },
  {
    "text": "we can generate a substance let me show you is assertions imagine the pics have",
    "start": "2414279",
    "end": "2421439"
  },
  {
    "text": "conditional jump jump non zero if he X is not zero then we jump to the block",
    "start": "2421439",
    "end": "2427059"
  },
  {
    "text": "number five otherwise we jump we don't jump we just continue to the next block",
    "start": "2427059",
    "end": "2434130"
  },
  {
    "text": "graphically it can be represented like this we have true two arrows true and false and if we don't jump then we can",
    "start": "2434130",
    "end": "2444119"
  },
  {
    "text": "deduce that AIX is zero since we did not",
    "start": "2444119",
    "end": "2449889"
  },
  {
    "text": "jump it is zero so what we do we generate an artificial instruction that",
    "start": "2449889",
    "end": "2457839"
  },
  {
    "text": "moves yeah x0 into X that instruction was not present in the native code in the",
    "start": "2457839",
    "end": "2463359"
  },
  {
    "text": "initial code that we in the input but since we explicitly put it there then it",
    "start": "2463359",
    "end": "2471099"
  },
  {
    "text": "can be propagated and ei X will be replaced by zeros in this block and",
    "start": "2471099",
    "end": "2477880"
  },
  {
    "text": "maybe in other blocks as well so this is a nice trick to be able to propagate",
    "start": "2477880",
    "end": "2484409"
  },
  {
    "text": "constant values over basic blocks",
    "start": "2484409",
    "end": "2491038"
  },
  {
    "text": "we have really literally hundreds of very small and same optimisation rules",
    "start": "2491500",
    "end": "2499690"
  },
  {
    "text": "for example if you have X minus y plus y it is the same thing at X please note",
    "start": "2499690",
    "end": "2507800"
  },
  {
    "text": "that this does not depend on the compiler we don't care if it's a new compiler or Microsoft Visual Studio or",
    "start": "2507800",
    "end": "2515300"
  },
  {
    "text": "anything else or LLVM all these rules they work regardless of the compiler and",
    "start": "2515300",
    "end": "2523330"
  },
  {
    "text": "I'm happy to tell that most although let's say you get only all",
    "start": "2523330",
    "end": "2529150"
  },
  {
    "text": "transformation rules that we apply to the microcode rules like that they are",
    "start": "2529150",
    "end": "2536180"
  },
  {
    "text": "sound they are simple and therefore we are quite sure that the output will be",
    "start": "2536180",
    "end": "2544670"
  },
  {
    "text": "correct of course there are some places where the compiler has to guess for",
    "start": "2544670",
    "end": "2550400"
  },
  {
    "text": "example the calling conventions the call instruction and there if you guess it wrongly then the output will be wrong",
    "start": "2550400",
    "end": "2556880"
  },
  {
    "text": "but this is an unsolvable problem and we just provide ways of for the user to fix",
    "start": "2556880",
    "end": "2567350"
  },
  {
    "text": "these things that the compiler does not need to guess but just uses the",
    "start": "2567350",
    "end": "2573320"
  },
  {
    "text": "information provided by the user we have also more complex rules for",
    "start": "2573320",
    "end": "2580010"
  },
  {
    "text": "example the following rule recognizes 64-bit test abstractions you see that it",
    "start": "2580010",
    "end": "2585380"
  },
  {
    "text": "is quite complex and it is what do I say",
    "start": "2585380",
    "end": "2594130"
  },
  {
    "text": "it is it looks complex the description looks complex and believe me the",
    "start": "2594130",
    "end": "2600410"
  },
  {
    "text": "implementation is complex as well so we implement such a rule in C++ and it is",
    "start": "2600410",
    "end": "2609250"
  },
  {
    "text": "big but on the hunt it works very fast because of that we have tons of rules",
    "start": "2609250",
    "end": "2615290"
  },
  {
    "text": "like that and they work like little and every rule doing it's a simple job a",
    "start": "2615290",
    "end": "2620810"
  },
  {
    "text": "simple job and and resolve is for me it's bigger than the sum of elements it is bigger and",
    "start": "2620810",
    "end": "2628300"
  },
  {
    "text": "it's it allows us to provide a very very nice output very human readable output",
    "start": "2628300",
    "end": "2637710"
  },
  {
    "text": "on the other hand one more thing that why our rules are more complex because",
    "start": "2637710",
    "end": "2644100"
  },
  {
    "text": "take for example this rule CNB 4343 it",
    "start": "2644100",
    "end": "2649660"
  },
  {
    "text": "tries to combine two parts of multiplication and generate and 8bit a",
    "start": "2649660",
    "end": "2655990"
  },
  {
    "text": "multiplication instruction there we have two instructions multiply or multiply",
    "start": "2655990",
    "end": "2661330"
  },
  {
    "text": "and law and the law instruction and between the low and multiply",
    "start": "2661330",
    "end": "2667150"
  },
  {
    "text": "instructions there can be many other instructions the only requirement is",
    "start": "2667150",
    "end": "2672340"
  },
  {
    "text": "that they don't spoil or modify x and y the operands that that I used in our",
    "start": "2672340",
    "end": "2681280"
  },
  {
    "text": "pattern how do we do that we don't know Eve check what is the next instruction",
    "start": "2681280",
    "end": "2688510"
  },
  {
    "text": "after mall instead we use again we rely on data dependencies we go and try to",
    "start": "2688510",
    "end": "2697960"
  },
  {
    "text": "find where the law instruction is we have also interblock rules they work on",
    "start": "2697960",
    "end": "2707170"
  },
  {
    "text": "multiple blocks at the you see that if you have three comparisons with some",
    "start": "2707170",
    "end": "2714340"
  },
  {
    "text": "relationship between them it can be collapsed into one simple comparison",
    "start": "2714340",
    "end": "2719770"
  },
  {
    "text": "that jump if it's lower between x and y",
    "start": "2719770",
    "end": "2725580"
  },
  {
    "text": "another rule another example division",
    "start": "2725580",
    "end": "2732580"
  },
  {
    "text": "pop by power sign division by power of 2 we divide instead of division we instead",
    "start": "2732580",
    "end": "2739870"
  },
  {
    "text": "of 3 blocks we just make it just one block Row one instruction now all these",
    "start": "2739870",
    "end": "2747370"
  },
  {
    "text": "things I explained to you about this rules microcode operands and so on what is the",
    "start": "2747370",
    "end": "2755170"
  },
  {
    "text": "interesting thing for you here the interesting thing is that you can use all this micro code and the",
    "start": "2755170",
    "end": "2763100"
  },
  {
    "text": "transformation rules because you can implement plugins that would examine",
    "start": "2763100",
    "end": "2769910"
  },
  {
    "text": "microcode find interesting scenes and you can even you can even improve things",
    "start": "2769910",
    "end": "2778820"
  },
  {
    "text": "by adding your own rules by hooking your rules to the optimization routine well",
    "start": "2778820",
    "end": "2785540"
  },
  {
    "text": "this DK has some samples explaining how to do that for example we have phenom",
    "start": "2785540",
    "end": "2793850"
  },
  {
    "text": "the compiler has a rule that converts in the indirect jump into return but for",
    "start": "2793850",
    "end": "2799580"
  },
  {
    "text": "that we need to prove that LR is the same as the lr at the beginning of the",
    "start": "2799580",
    "end": "2805340"
  },
  {
    "text": "entry point we can do that by using the dataflow analysis okay therefore I have",
    "start": "2805340",
    "end": "2813740"
  },
  {
    "text": "to tell you just a bit about the dataflow analysis you notice that to the",
    "start": "2813740",
    "end": "2820730"
  },
  {
    "text": "right all the instructions we have U and D lists you means list of locations used",
    "start": "2820730",
    "end": "2830480"
  },
  {
    "text": "by the instructions and D means defined by the instruction and this list maintained for you by the decompiler",
    "start": "2830480",
    "end": "2838880"
  },
  {
    "text": "engine and you can use them to to under",
    "start": "2838880",
    "end": "2844970"
  },
  {
    "text": "in your analysis first of all we have this list for each instruction for each",
    "start": "2844970",
    "end": "2851360"
  },
  {
    "text": "block and for each block and more than that we have even Mei and my mustn´t may",
    "start": "2851360",
    "end": "2858650"
  },
  {
    "text": "access lists for each instruction or block and these lists are very very",
    "start": "2858650",
    "end": "2870050"
  },
  {
    "text": "useful because they can they help us to answer questions like is a defined value",
    "start": "2870050",
    "end": "2875780"
  },
  {
    "text": "used anywhere if they are if it's used where exactly and so on and so on and so",
    "start": "2875780",
    "end": "2881930"
  },
  {
    "text": "on therefore you if you use a micro",
    "start": "2881930",
    "end": "2888160"
  },
  {
    "text": "you can really answer questions like that and therefore analyze things well I",
    "start": "2888160",
    "end": "2897579"
  },
  {
    "text": "think that I will skip these slides because I lacked I'm sorry just a few",
    "start": "2897579",
    "end": "2905380"
  },
  {
    "text": "words about the microcode the testing and hone we really try the microcode to",
    "start": "2905380",
    "end": "2912130"
  },
  {
    "text": "be reliable and powerful enough to",
    "start": "2912130",
    "end": "2917380"
  },
  {
    "text": "express real-world problems therefore we test the microcode extensively we have a",
    "start": "2917380",
    "end": "2924520"
  },
  {
    "text": "small farm of tester computers running all the time and checking if you have",
    "start": "2924520",
    "end": "2930400"
  },
  {
    "text": "any bugs by the way we have very little reports about microcode about the de",
    "start": "2930400",
    "end": "2935890"
  },
  {
    "text": "compiler in general because i see that it's thanks bigger to our testing techniques but anyway if you find",
    "start": "2935890",
    "end": "2944500"
  },
  {
    "text": "anything about the fishing about the microcode just send us a message we are happy to fix things we really",
    "start": "2944500",
    "end": "2951970"
  },
  {
    "text": "hate the bugs and we try to get rid of everything anyway the microcode is",
    "start": "2951970",
    "end": "2958270"
  },
  {
    "text": "available the API is available it's only C++ for the moment but the Python will",
    "start": "2958270",
    "end": "2963309"
  },
  {
    "text": "come very soon I think that it's not this year's the next year you will have",
    "start": "2963309",
    "end": "2968740"
  },
  {
    "text": "the Python API and I hope that will show you some interesting things that you can do with the microcode API we will block",
    "start": "2968740",
    "end": "2975940"
  },
  {
    "text": "about it anyway if you have any remarks so anything feedback about it just send",
    "start": "2975940",
    "end": "2982180"
  },
  {
    "text": "us a message or I think that I ran out of time so before the questions will be",
    "start": "2982180",
    "end": "2991240"
  },
  {
    "text": "in another room right ok thank you for your attention [Applause]",
    "start": "2991240",
    "end": "3003750"
  }
]