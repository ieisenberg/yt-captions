[
  {
    "text": "so Who am I my name is Maddy stone I am a reverse engineer on the Google Play protect team under Android security and",
    "start": "30",
    "end": "7319"
  },
  {
    "text": "I've been there for about a year before that I have about five years of experience doing hardware and firmware",
    "start": "7319",
    "end": "14009"
  },
  {
    "text": "reversing and exploit dev so why do we",
    "start": "14009",
    "end": "20340"
  },
  {
    "text": "even care what is the whole point of this where are we coming from so the reason why I'm talking and wanted to",
    "start": "20340",
    "end": "27210"
  },
  {
    "text": "focus on anti analysis techniques was very first off the reason they exist is",
    "start": "27210",
    "end": "32340"
  },
  {
    "text": "this whole sort of dynamic between us as malware analyst and the malware",
    "start": "32340",
    "end": "37410"
  },
  {
    "text": "developers and so we're both striving for asymmetric advantage so they want to",
    "start": "37410",
    "end": "42750"
  },
  {
    "text": "be able to create malware that super quickly that has the most market share",
    "start": "42750",
    "end": "48059"
  },
  {
    "text": "that they're accomplishing their goal while we want to be able to detect it that much faster so that's this mindset",
    "start": "48059",
    "end": "55199"
  },
  {
    "text": "that we're coming from of they can create anti analysis techniques but can we detect them and prevent them and get",
    "start": "55199",
    "end": "62730"
  },
  {
    "text": "around them with less investment than it takes for them to develop them so what",
    "start": "62730",
    "end": "69390"
  },
  {
    "text": "is this anti analysis technique basically just to make it harder for you to figure out what they're trying to",
    "start": "69390",
    "end": "75119"
  },
  {
    "text": "hide so that this is going to encompass all of anti reverse engineering anti",
    "start": "75119",
    "end": "81299"
  },
  {
    "text": "debugging anti emulation all of those things I'm packaging up into anti analysis so",
    "start": "81299",
    "end": "89790"
  },
  {
    "text": "let's take a step back and set the contacts what's the story where are we I on the Google Play protect team we have",
    "start": "89790",
    "end": "96630"
  },
  {
    "text": "so many apps coming in all the time and certain ones are flagged for a human reviewer when that's escalated to me I",
    "start": "96630",
    "end": "102960"
  },
  {
    "text": "want to take a look and decide as quickly as possible is this benign or is it malware and",
    "start": "102960",
    "end": "108600"
  },
  {
    "text": "should be started issuing warnings so this app came up it looked pretty normal",
    "start": "108600",
    "end": "115229"
  },
  {
    "text": "but there was one interesting thing it had an elf file embedded in the apk that just it didn't look right I couldn't",
    "start": "115229",
    "end": "122939"
  },
  {
    "text": "tell if it was actually malware or not yet but I also noticed that there were",
    "start": "122939",
    "end": "128009"
  },
  {
    "text": "at least a hundred their digests or apks out there that also included this elf library so that",
    "start": "128009",
    "end": "136140"
  },
  {
    "text": "got me in this mindset of one I need to decide very quickly whether this is malware at benign so that we can get",
    "start": "136140",
    "end": "144510"
  },
  {
    "text": "protections out but I also need to figure out why all of these different apks are using it so if you're sort of",
    "start": "144510",
    "end": "154829"
  },
  {
    "text": "new to the Android malware analysis we have our apk that's your Android application and in there you'll usually",
    "start": "154829",
    "end": "161370"
  },
  {
    "text": "see it's mostly running on the Java code which you will find in classes.dex however developers can choose to write",
    "start": "161370",
    "end": "168569"
  },
  {
    "text": "and have functionality that is also in the C or C++ compiled code and that's",
    "start": "168569",
    "end": "173790"
  },
  {
    "text": "what we're talking about today one of these elf libraries a shared object that is embedded in the apk and has the",
    "start": "173790",
    "end": "181590"
  },
  {
    "text": "native functionality so what are we talking about we are going to talk about",
    "start": "181590",
    "end": "188129"
  },
  {
    "text": "the wedding take anti analysis library which is this native code and why wedding-cake is cuz it's got lots of",
    "start": "188129",
    "end": "194940"
  },
  {
    "text": "layers so we're gonna go over all of these different layers why it's so robust what makes it so interesting and",
    "start": "194940",
    "end": "202919"
  },
  {
    "text": "how can you reverse engineer it more quickly and what would I have done instead of falling support each of their",
    "start": "202919",
    "end": "208739"
  },
  {
    "text": "traps along the way so once again why wedding-cake why is this interesting",
    "start": "208739",
    "end": "215970"
  },
  {
    "text": "so since doing this research I have found at least 5,000 distinct sip apks",
    "start": "215970",
    "end": "221699"
  },
  {
    "text": "in the wild that contain wedding cake none of these samples are benign all of",
    "start": "221699",
    "end": "228120"
  },
  {
    "text": "them are well malware and one of the most notable aspects is the newer variants of the chinois android botnet",
    "start": "228120",
    "end": "236579"
  },
  {
    "text": "family which this links to when the sides are posted a blog post we did about it before is using this to hide",
    "start": "236579",
    "end": "243209"
  },
  {
    "text": "their functionality so what wedding cake is is it wraps the functionality that",
    "start": "243209",
    "end": "249659"
  },
  {
    "text": "the malware authors are trying to hide so this diagram came from the initial blog post about Shinhwa in late 2016 so",
    "start": "249659",
    "end": "259380"
  },
  {
    "text": "what we're gonna focus on is stage 3 which is the elf so that's what they had studied analyzed",
    "start": "259380",
    "end": "264919"
  },
  {
    "text": "back then what's new is now you see this wedding cake packs jar but once I finally got",
    "start": "264919",
    "end": "272780"
  },
  {
    "text": "through all of the anti reversing and anti analysis techniques the decryption and everything we're gonna talk about",
    "start": "272780",
    "end": "278750"
  },
  {
    "text": "today what I found was I had just unpacked the packed on packer because that's what stage 3 was so I was",
    "start": "278750",
    "end": "286759"
  },
  {
    "text": "able to then say yes this is a part of this family and I now know that this",
    "start": "286759",
    "end": "292870"
  },
  {
    "text": "these signatures of this elf which I've now called wedding cake just wrap",
    "start": "292870",
    "end": "298370"
  },
  {
    "text": "everything else so what are all these different techniques that we're going to",
    "start": "298370",
    "end": "303560"
  },
  {
    "text": "talk about what makes it so interesting first one of the things that's interesting is previously an Android",
    "start": "303560",
    "end": "309400"
  },
  {
    "text": "what we've seen is generally if someone was going to implement anti analysis and",
    "start": "309400",
    "end": "314449"
  },
  {
    "text": "tie a debugging types of techniques they were usually still in job because that's what the malware developers were already",
    "start": "314449",
    "end": "320630"
  },
  {
    "text": "using it's sometimes have a lower point of entry than C or C++ compiled code so",
    "start": "320630",
    "end": "326330"
  },
  {
    "text": "the first notable thing was that all of this is in native code first we're gonna",
    "start": "326330",
    "end": "331699"
  },
  {
    "text": "start about some of the j'ni or Java native interface manipulations then we're gonna go into some places where",
    "start": "331699",
    "end": "338570"
  },
  {
    "text": "they've used anti reversing techniques in place decryption and finally to about 40 different runtime environment checks",
    "start": "338570",
    "end": "345289"
  },
  {
    "text": "that they use so none of these in and of themselves are super novel but the fact",
    "start": "345289",
    "end": "350539"
  },
  {
    "text": "that they embedded each one in each other is what made it so complex and difficult to both signature reverse and",
    "start": "350539",
    "end": "358220"
  },
  {
    "text": "understand what was happening so what's the characteristics how can you notice",
    "start": "358220",
    "end": "364580"
  },
  {
    "text": "if you've seen it or not very first thing is that as we've said it's an Elfa FL file in the apk usually it is three",
    "start": "364580",
    "end": "373520"
  },
  {
    "text": "to eight random lowercase letters is how they've named it probably not after this talk but you know so the other thing is",
    "start": "373520",
    "end": "380449"
  },
  {
    "text": "that the Java code that has to interact with this native library it is always",
    "start": "380449",
    "end": "385909"
  },
  {
    "text": "random lettered class names as well so what that also tells us is that this is distributed as source code or and so it",
    "start": "385909",
    "end": "394099"
  },
  {
    "text": "is dynamically generating the last names in the library names every time they build the application lastly",
    "start": "394099",
    "end": "400610"
  },
  {
    "text": "two things you can look for but probably not in a couple of weeks anymore are these two strings in the comment section",
    "start": "400610",
    "end": "408210"
  },
  {
    "text": "of the elf a few more of the more key",
    "start": "408210",
    "end": "413880"
  },
  {
    "text": "characteristics of wedding-cake is that there is always two native methods that",
    "start": "413880",
    "end": "421950"
  },
  {
    "text": "are declared in the java application so we're gonna go over a bit how the J&I works and how execution is passed from",
    "start": "421950",
    "end": "428070"
  },
  {
    "text": "the java code into the native code but what you'll see is that there are always these two functions and there's",
    "start": "428070",
    "end": "434700"
  },
  {
    "text": "sometimes this third depending on the sort of version and when they compiled",
    "start": "434700",
    "end": "440010"
  },
  {
    "text": "it so the main function that our method that we will talk about that they implement in the native code is here",
    "start": "440010",
    "end": "445710"
  },
  {
    "text": "called VX eg again dynamically generated at compile time but this is going to be",
    "start": "445710",
    "end": "450930"
  },
  {
    "text": "the function that performs all of our runtime environment checks and starts that main functionality of the elf that",
    "start": "450930",
    "end": "456900"
  },
  {
    "text": "the malware author was trying to hide in every version though you will see that",
    "start": "456900",
    "end": "462090"
  },
  {
    "text": "they have these same methods signatures so for example VX eg returns an int and",
    "start": "462090",
    "end": "467370"
  },
  {
    "text": "takes an object array as the arguments one of the other interesting things I",
    "start": "467370",
    "end": "473430"
  },
  {
    "text": "found is I really tried to understand all of the different variants and how well these different samples were using",
    "start": "473430",
    "end": "478530"
  },
  {
    "text": "it is that there are many different CPU variants of it so the most common is in",
    "start": "478530",
    "end": "484110"
  },
  {
    "text": "most of the Android ecosystem is a 32-bit what they call an Android generic arm so that uses a CPU cut keyword army",
    "start": "484110",
    "end": "492180"
  },
  {
    "text": "ABI but I've also seen verge 32-bit arm v7 arm 64 as well as x86 here is a link",
    "start": "492180",
    "end": "501210"
  },
  {
    "text": "to virustotal and a digest for one of the APK samples that includes three of",
    "start": "501210",
    "end": "506340"
  },
  {
    "text": "these different CPU variants in it and what's really interesting and what we can talk about and keep in mind going",
    "start": "506340",
    "end": "512430"
  },
  {
    "text": "through the rest of this talk is that every single one of these different CPU variants has the same functionality so",
    "start": "512430",
    "end": "519050"
  },
  {
    "text": "that's not changing across any of them so let's start analyzing this is the",
    "start": "519050",
    "end": "526820"
  },
  {
    "text": "sample that I have used as sort of walk through it later on you're interested it's up on virustotal as well so you can",
    "start": "526820",
    "end": "534230"
  },
  {
    "text": "look into it and follow along later when I post the slides if you're interested in that so first what is J and I how do",
    "start": "534230",
    "end": "543680"
  },
  {
    "text": "Android apps even use native code so basically Java native interface in",
    "start": "543680",
    "end": "549170"
  },
  {
    "text": "your java application where execution has to start in the Android app you can",
    "start": "549170",
    "end": "554210"
  },
  {
    "text": "declare that you have methods that are implemented in your C or C++ or other",
    "start": "554210",
    "end": "559340"
  },
  {
    "text": "compiled code so you just declare it as you see here native keyword there's",
    "start": "559340",
    "end": "565910"
  },
  {
    "text": "nothing else in that method then you just write it and C or C++ but the j'ni",
    "start": "565910",
    "end": "576050"
  },
  {
    "text": "interface has to actually know how to pair these two things so and it has to",
    "start": "576050",
    "end": "581600"
  },
  {
    "text": "know where to look for these methods and where they might be implemented for the so the very first thing you'll have to",
    "start": "581600",
    "end": "587540"
  },
  {
    "text": "do in the Java side of your or Kotlin of your hand roid application is load into",
    "start": "587540",
    "end": "593960"
  },
  {
    "text": "memory that native library so you have two options both basically perform the",
    "start": "593960",
    "end": "599900"
  },
  {
    "text": "same thing system dot load library or system got load the key thing to remember as we get into the disassembly",
    "start": "599900",
    "end": "607100"
  },
  {
    "text": "of the elf is that when either these two methods are called in Java that calls",
    "start": "607100",
    "end": "613190"
  },
  {
    "text": "the exported method in me or exported function any elf called j'ni onload so",
    "start": "613190",
    "end": "619400"
  },
  {
    "text": "this is going to become really important later in our analysis",
    "start": "619400",
    "end": "624280"
  },
  {
    "text": "so now you've loaded this into memory but how still is this J&I going to",
    "start": "624550",
    "end": "630290"
  },
  {
    "text": "understand that this Java declared method is going to match up and run this",
    "start": "630290",
    "end": "636680"
  },
  {
    "text": "native method there has to be some way to pair and know that these two things",
    "start": "636680",
    "end": "642380"
  },
  {
    "text": "go together so you have two options one is discovery where in your compiled",
    "start": "642380",
    "end": "649170"
  },
  {
    "text": "code the method or the implementation of the method so the function there is",
    "start": "649170",
    "end": "654690"
  },
  {
    "text": "named Java underscore the mangled class name underscored the mangled mess a name",
    "start": "654690",
    "end": "659940"
  },
  {
    "text": "this is really nice because it's a really easy indicator to look and find in your elf if you're trying to pair and",
    "start": "659940",
    "end": "666900"
  },
  {
    "text": "understand what's being run when that Java native method is called from the application the second option that",
    "start": "666900",
    "end": "673920"
  },
  {
    "text": "developers can use is called is using the register native function so this you",
    "start": "673920",
    "end": "680100"
  },
  {
    "text": "can you don't have to have any of your functions named in the elf but what you will still have to use is a string of",
    "start": "680100",
    "end": "687510"
  },
  {
    "text": "the both the method name and the method signature so they know that this",
    "start": "687510",
    "end": "692750"
  },
  {
    "text": "function and that is in the compiled code is what is run when you call the",
    "start": "692750",
    "end": "698130"
  },
  {
    "text": "Java native method so this is what register native signature looks like and",
    "start": "698130",
    "end": "704130"
  },
  {
    "text": "what the key we need to remember is that it requires this string or the car array",
    "start": "704130",
    "end": "710370"
  },
  {
    "text": "of name and the signature and what I mean by signature in this context is",
    "start": "710370",
    "end": "716130"
  },
  {
    "text": "here is one of our Java native declared methods so if it was returning a string",
    "start": "716130",
    "end": "724410"
  },
  {
    "text": "and taking a integer as an argument then you'll have the I in the parenthesis and",
    "start": "724410",
    "end": "730350"
  },
  {
    "text": "then the type that's being returned at the end so these are really easy things",
    "start": "730350",
    "end": "736440"
  },
  {
    "text": "to identify when you have your elf but when I opened up the library that was in",
    "start": "736440",
    "end": "743490"
  },
  {
    "text": "my sample to start I didn't see any of this there were no strings none of the functions were named it",
    "start": "743490",
    "end": "750270"
  },
  {
    "text": "didn't even have J and I on mode declared in the function and what this",
    "start": "750270",
    "end": "755310"
  },
  {
    "text": "was is that in every disassembler I've opened or every disassembler I've tried",
    "start": "755310",
    "end": "760740"
  },
  {
    "text": "this far including Ida Pro when you try and look at the code that is labeled as",
    "start": "760740",
    "end": "767370"
  },
  {
    "text": "J and I on mode I know it's not able to define it as a function due to these two",
    "start": "767370",
    "end": "772920"
  },
  {
    "text": "blocks of data that is another really strong indicator and signature when I've been able to",
    "start": "772920",
    "end": "779419"
  },
  {
    "text": "open it up because this has been true of every different sample that was compiled in 32-bit arm so first thing you gotta",
    "start": "779419",
    "end": "788659"
  },
  {
    "text": "do to figure it out is super-easy just declare it as code you have your function but now where do we start",
    "start": "788659",
    "end": "794829"
  },
  {
    "text": "because we wanted to focus our analysis on those Java declared methods they were",
    "start": "794829",
    "end": "800899"
  },
  {
    "text": "declared for a reason we see them called in the Java code yet we can't find what",
    "start": "800899",
    "end": "807499"
  },
  {
    "text": "is actually implemented to be associated with those methods because they should either have a native function here in",
    "start": "807499",
    "end": "815839"
  },
  {
    "text": "the elf with that mangled Java name or they should have the strings of the signature and the name for register",
    "start": "815839",
    "end": "822469"
  },
  {
    "text": "natives to run on it so where I decided to start with J&I onload because before",
    "start": "822469",
    "end": "830269"
  },
  {
    "text": "any of those native methods could run you still had to load the library into",
    "start": "830269",
    "end": "836119"
  },
  {
    "text": "memory and when I started looking at J&I onload it had all of these repetitive",
    "start": "836119",
    "end": "841609"
  },
  {
    "text": "calls to the same function at the end and it was taking in arguments of",
    "start": "841609",
    "end": "848149"
  },
  {
    "text": "different blocks of memory so this isn't a really really strong signal of encryption or decryption because you",
    "start": "848149",
    "end": "856699"
  },
  {
    "text": "have to run the decryption function over different places and then hopefully we'll have more information about how",
    "start": "856699",
    "end": "862579"
  },
  {
    "text": "this works so in this case all of the yellow blocks are the calls to the same",
    "start": "862579",
    "end": "868729"
  },
  {
    "text": "function sub 2 f 3 0 I highlighted one of them and that's gonna be our what we",
    "start": "868729",
    "end": "874879"
  },
  {
    "text": "believe right now is our decryption subroutine so that's the next place to",
    "start": "874879",
    "end": "881209"
  },
  {
    "text": "start because obviously I want to understand and be able to analyze this lab library as it runs in memory so go",
    "start": "881209",
    "end": "888859"
  },
  {
    "text": "ahead figure out put the different arguments in there it takes four arguments each time it's called first",
    "start": "888859",
    "end": "895519"
  },
  {
    "text": "the pointer to the encrypted bytes the length of those bytes that should be decrypted and then it has two arguments",
    "start": "895519",
    "end": "902929"
  },
  {
    "text": "that stay the same whole time we have a word co2 ray which is an array of four bytes of each mouth",
    "start": "902929",
    "end": "910890"
  },
  {
    "text": "or each byte in each value is four bytes and then a byte seat array so these are",
    "start": "910890",
    "end": "917070"
  },
  {
    "text": "generated before any of the trypsin calls start and then the same things is passed to each time so this is the idath",
    "start": "917070",
    "end": "925850"
  },
  {
    "text": "generated decompiler which I sort of cleaned up a little of what the seed arrays functions were I went ahead went",
    "start": "925850",
    "end": "934650"
  },
  {
    "text": "through this tried to understand it coated up a super simple thing in Python to go ahead and generate it so I could",
    "start": "934650",
    "end": "943230"
  },
  {
    "text": "see what those values were and what I found is that they simply were",
    "start": "943230",
    "end": "949340"
  },
  {
    "text": "allocating two arrays from 0 to 255 so they wrote this complex algorithm",
    "start": "949340",
    "end": "956640"
  },
  {
    "text": "instead of two lines to allocate these arrays so this was a first technique in",
    "start": "956640",
    "end": "962850"
  },
  {
    "text": "a really great use of my 6 hours as I was coding it up and trying to understand what it was doing so what I",
    "start": "962850",
    "end": "970140"
  },
  {
    "text": "would suggest in the future is that in what I would do instead was just run it",
    "start": "970140",
    "end": "976920"
  },
  {
    "text": "dynamically and grab them I already knew the same values were passed each time they weren't being regenerated but",
    "start": "976920",
    "end": "983310"
  },
  {
    "text": "instead I stuck with static reversing and fell for their anti reversing trap so hopefully if you all see this",
    "start": "983310",
    "end": "990810"
  },
  {
    "text": "algorithm in the future too you won't fall for the same things and I took the bullet for all of us",
    "start": "990810",
    "end": "996890"
  },
  {
    "text": "so we now have our seed arrays we can move on to the decryption the key and",
    "start": "996890",
    "end": "1006050"
  },
  {
    "text": "the overall framework of how the decryption works since it's in place and it is running during J&I onload so",
    "start": "1006050",
    "end": "1011930"
  },
  {
    "text": "before the elf is actually there in memory is that the decryption function",
    "start": "1011930",
    "end": "1018890"
  },
  {
    "text": "is called on that encrypted array of bytes it does its decryption and then it actually overrides the byte the",
    "start": "1018890",
    "end": "1025430"
  },
  {
    "text": "encrypted bytes in the same place so this gives us an idea of how to decrypt",
    "start": "1025430",
    "end": "1030800"
  },
  {
    "text": "it in how we can start to analyze it as it would look in memory too",
    "start": "1030800",
    "end": "1035829"
  },
  {
    "text": "I personally was not able to identify it as any known encryption decryption algorithm but hey if you all can find it",
    "start": "1035829",
    "end": "1044290"
  },
  {
    "text": "I would be more than uh I would be very happy to know if you see it as something that you already know and is out there",
    "start": "1044290",
    "end": "1052169"
  },
  {
    "text": "so at this point the key that I need is",
    "start": "1052230",
    "end": "1057340"
  },
  {
    "text": "I would needed a solution that was going to work fast and be flexible because again remember I'm still trying to",
    "start": "1057340",
    "end": "1063700"
  },
  {
    "text": "decide and make the decision do we need to start alerting users or is this benign and I can pass and also I knew",
    "start": "1063700",
    "end": "1070419"
  },
  {
    "text": "that there were at least a hundred other samples out there and each of them are",
    "start": "1070419",
    "end": "1075640"
  },
  {
    "text": "compiled differently so my key thoughts when going into this was that one I",
    "start": "1075640",
    "end": "1081250"
  },
  {
    "text": "don't need to fully understand the decryption algorithm I just need something that's going to run over it",
    "start": "1081250",
    "end": "1087100"
  },
  {
    "text": "and decrypt it for me so I can analyze the contents the second thing I needed was I needed it to be flexible because I",
    "start": "1087100",
    "end": "1093880"
  },
  {
    "text": "had so many samples I didn't want to have to copy and paste rewrite it just for different memory addresses different",
    "start": "1093880",
    "end": "1100240"
  },
  {
    "text": "registers that are used in different places to develop my solution so those are the two key things that I keep in",
    "start": "1100240",
    "end": "1106570"
  },
  {
    "text": "mind whenever I'm trying to develop a quick decryption solution for these types of packed things so I did open",
    "start": "1106570",
    "end": "1115270"
  },
  {
    "text": "source my Ida Python script and that is available there you can also just google",
    "start": "1115270",
    "end": "1121750"
  },
  {
    "text": "Ida python embedded toolkit and it's under the Android stuff I chose to use Ida Python because it is one of those",
    "start": "1121750",
    "end": "1128770"
  },
  {
    "text": "well it's one of my favorite tools to use and where I'm super fast and I also focused on translating that the",
    "start": "1128770",
    "end": "1136690"
  },
  {
    "text": "decryption to Python rather than trying to create true pseudo code or a code",
    "start": "1136690",
    "end": "1142960"
  },
  {
    "text": "representation of it what I mean by translating it and this is how I play",
    "start": "1142960",
    "end": "1148000"
  },
  {
    "text": "into the speed and move as quickly as possible and then instead of understanding in the assembly what each",
    "start": "1148000",
    "end": "1154390"
  },
  {
    "text": "of these registers do or what the developers might have called them or what their functions were I just named",
    "start": "1154390",
    "end": "1160570"
  },
  {
    "text": "variables in Python that have the same thing and I run through and say a move",
    "start": "1160570",
    "end": "1165669"
  },
  {
    "text": "is an equal you know you cannot it and just go step by step because that just allows you to follow along instead of",
    "start": "1165669",
    "end": "1172809"
  },
  {
    "text": "trying to be like pattern matching and figuring out all the different aspects of it",
    "start": "1172809",
    "end": "1178240"
  },
  {
    "text": "one thing that to keep in mind is that oops one thing to keep in mind is that Python",
    "start": "1178240",
    "end": "1184030"
  },
  {
    "text": "is obviously not a strongly typed language here in assembly the instructions know exactly what size",
    "start": "1184030",
    "end": "1189720"
  },
  {
    "text": "they're operating on whether it's a byte a half word a word so that leads to a",
    "start": "1189720",
    "end": "1196059"
  },
  {
    "text": "lot of bugs if you don't keep it in mind so it's not something's not working the way you're expecting that's generally",
    "start": "1196059",
    "end": "1201880"
  },
  {
    "text": "where I look I also tend to write helper functions which you can find and take in",
    "start": "1201880",
    "end": "1207490"
  },
  {
    "text": "the script for anything else you want to use for a lot of this sign operation since Python won't usually know that",
    "start": "1207490",
    "end": "1216130"
  },
  {
    "text": "okay this is a byte that is operated on assigned or not so let's do some demos",
    "start": "1216130",
    "end": "1223270"
  },
  {
    "text": "and talk through this assembly so this",
    "start": "1223270",
    "end": "1229150"
  },
  {
    "text": "is our sample library oh that's an interesting out of view oops",
    "start": "1229150",
    "end": "1242950"
  },
  {
    "text": "okay well we're not gonna look at it in",
    "start": "1242950",
    "end": "1249520"
  },
  {
    "text": "graph view so the first thing is it's very small on the right but there are",
    "start": "1249520",
    "end": "1255880"
  },
  {
    "text": "nothing named Java as we talked about there's only all of the imported functions so that's where we're pulling",
    "start": "1255880",
    "end": "1261970"
  },
  {
    "text": "into our our J&I onload function and so",
    "start": "1261970",
    "end": "1268390"
  },
  {
    "text": "that's what I'm scrolling through right here here is that decryption function that I already had showed you all the",
    "start": "1268390",
    "end": "1273700"
  },
  {
    "text": "screenshot of in each of the places that it takes bytes is there all right after each",
    "start": "1273700",
    "end": "1280750"
  },
  {
    "text": "other it's a block of memory and it's just random bytes there's nothing that looks key or anything like that",
    "start": "1280750",
    "end": "1287679"
  },
  {
    "text": "Ida doesn't know so all of them are declared as unknown data as we scroll through it so when we look at",
    "start": "1287679",
    "end": "1295430"
  },
  {
    "text": "our decryption subroutine that one it will let me do here is the overall graph",
    "start": "1295430",
    "end": "1303620"
  },
  {
    "text": "structure so what we have is two while loops there's one at the top and one at",
    "start": "1303620",
    "end": "1309680"
  },
  {
    "text": "the bottom and so when you're doing translation for that of those translation to Python in order to just",
    "start": "1309680",
    "end": "1316130"
  },
  {
    "text": "have a solution that can run over it it's oh it's I tend to find it's helpful to just that's where you can have a",
    "start": "1316130",
    "end": "1324140"
  },
  {
    "text": "variable that says keep looping true or keep looping at false and you can just set that in the same way as your as the",
    "start": "1324140",
    "end": "1332660"
  },
  {
    "text": "instructions did for like branch less than or not branch greater than and things like that to sort of have that",
    "start": "1332660",
    "end": "1338570"
  },
  {
    "text": "translation so going through that large",
    "start": "1338570",
    "end": "1344660"
  },
  {
    "text": "enough the first thing I did was I coded",
    "start": "1344660",
    "end": "1350840"
  },
  {
    "text": "up my decryption subroutine and Python that translation we've talked about and",
    "start": "1350840",
    "end": "1356060"
  },
  {
    "text": "tested over just one of the bite there bytes raised to see does anything come",
    "start": "1356060",
    "end": "1361550"
  },
  {
    "text": "out of it am I doing this right our bugs coming up and followed along once I",
    "start": "1361550",
    "end": "1367220"
  },
  {
    "text": "understood that that decryption subroutine was correct that's when I had to start thinking about the second",
    "start": "1367220",
    "end": "1373580"
  },
  {
    "text": "problem the adaptability I have so many samples coming in and I want to be able",
    "start": "1373580",
    "end": "1378890"
  },
  {
    "text": "to compare them to each other so I don't want to have to recode anything else for",
    "start": "1378890",
    "end": "1384200"
  },
  {
    "text": "each new sample I want something that I can run on anything and then be able to",
    "start": "1384200",
    "end": "1389420"
  },
  {
    "text": "quickly analyze and check does this decrypted library look like these others or does something different stand out so",
    "start": "1389420",
    "end": "1397160"
  },
  {
    "text": "that means that I can't hard code in where those encrypted array addresses are I can't hard code in what their",
    "start": "1397160",
    "end": "1403310"
  },
  {
    "text": "bites are I can't know for sure where does this decryption subroutine live so",
    "start": "1403310",
    "end": "1408890"
  },
  {
    "text": "in my main script where I start is first even just finding j'ni onload just like",
    "start": "1408890",
    "end": "1414140"
  },
  {
    "text": "as humans that's where we started that's where we can start with the Python script I then went ahead and it first",
    "start": "1414140",
    "end": "1420920"
  },
  {
    "text": "just went ahead and initialized my seed arrays but the next job that the script needed",
    "start": "1420920",
    "end": "1427810"
  },
  {
    "text": "to do for me was tell me where is each array read its contents and what it's",
    "start": "1427810",
    "end": "1432820"
  },
  {
    "text": "it's links because those are the two dynamically changing arguments to the",
    "start": "1432820",
    "end": "1438100"
  },
  {
    "text": "decryption subroutine so what I did was that I first wrote a subroutine called",
    "start": "1438100",
    "end": "1445810"
  },
  {
    "text": "find a kripp sub really creative and went through J and I on load so it",
    "start": "1445810",
    "end": "1461950"
  },
  {
    "text": "starts about hex 20 or no hex adizero off from the beginning of J and I on",
    "start": "1461950",
    "end": "1468310"
  },
  {
    "text": "load and then begins looking for repetitive calls using BL since that",
    "start": "1468310",
    "end": "1473500"
  },
  {
    "text": "we're in 32-bit arm I knew at the last chunk of the J&I onload function they",
    "start": "1473500",
    "end": "1479470"
  },
  {
    "text": "just repetitive a call to this so once I found a subroutine and used some string processing on Ida's disassembly all I",
    "start": "1479470",
    "end": "1486640"
  },
  {
    "text": "needed to get the disassembly just using get dis azzam from the Ida Python api's",
    "start": "1486640",
    "end": "1492190"
  },
  {
    "text": "I just did some string processing to see the address I then just checked that that same subroutine was called at least",
    "start": "1492190",
    "end": "1499060"
  },
  {
    "text": "file five times to make sure as a safety check that I'd found the right subroutine and then I recorded all of",
    "start": "1499060",
    "end": "1506740"
  },
  {
    "text": "the cross references are the addresses that called that subroutine each place because every time they call the",
    "start": "1506740",
    "end": "1513760"
  },
  {
    "text": "subroutine they had to allocate or assign the arguments earlier they had to say r0 is gonna equal this pointer so if",
    "start": "1513760",
    "end": "1521920"
  },
  {
    "text": "I have those addresses I can now figure out what's the encrypted array so once I",
    "start": "1521920",
    "end": "1528790"
  },
  {
    "text": "did that I then iterated through each of those different cross references and",
    "start": "1528790",
    "end": "1534420"
  },
  {
    "text": "every time I had a cross-reference I would use regular expressions to look",
    "start": "1534420",
    "end": "1539710"
  },
  {
    "text": "for the different types of instructions that could be assigning the encrypted",
    "start": "1539710",
    "end": "1546100"
  },
  {
    "text": "array bytes which are at the top of this thing so you can always change that if",
    "start": "1546100",
    "end": "1551800"
  },
  {
    "text": "you are looking at a different CPU of some sort and then I pass it to this function",
    "start": "1551800",
    "end": "1558250"
  },
  {
    "text": "called get array in length I do pass it pre the previous previously",
    "start": "1558250",
    "end": "1564190"
  },
  {
    "text": "used length as well and the reason for that is that there's a couple of different ways you can assign the length",
    "start": "1564190",
    "end": "1570010"
  },
  {
    "text": "if we look back let's see if it's gonna load yes at J and I on load first we see",
    "start": "1570010",
    "end": "1576730"
  },
  {
    "text": "an example of where they assign the length here to r1 using this immediate",
    "start": "1576730",
    "end": "1582130"
  },
  {
    "text": "assignment cool but later on they start storing that value on the stack as well",
    "start": "1582130",
    "end": "1590350"
  },
  {
    "text": "and also loading the length from the stack or sometimes that they're using",
    "start": "1590350",
    "end": "1595810"
  },
  {
    "text": "the same previous length so accounting for all of those different regular expressions in those different cases is",
    "start": "1595810",
    "end": "1601870"
  },
  {
    "text": "what I did within get array and length",
    "start": "1601870",
    "end": "1606270"
  },
  {
    "text": "so finally after that we have a map of here is where the array starts the",
    "start": "1607860",
    "end": "1614230"
  },
  {
    "text": "encrypted array starts and here's what its length then we can just thankfully use the ida python api s and call to our",
    "start": "1614230",
    "end": "1621010"
  },
  {
    "text": "decryption function which we'd already tested and then we get back the results of the decryption and now another reason",
    "start": "1621010",
    "end": "1628450"
  },
  {
    "text": "why I like to use Ida Python instead of API is it allows us to just patch those",
    "start": "1628450",
    "end": "1634510"
  },
  {
    "text": "bytes that previously were encrypted using the patch fight API and write them",
    "start": "1634510",
    "end": "1640030"
  },
  {
    "text": "over that address so now we are able to run or not run analyze our Ida database",
    "start": "1640030",
    "end": "1646990"
  },
  {
    "text": "in the same way as it looks after all of this decryption has run in memory so",
    "start": "1646990",
    "end": "1652090"
  },
  {
    "text": "what this looks like is obviously here we still have all of these unknowns if we look at our strings there's a lot of",
    "start": "1652090",
    "end": "1660820"
  },
  {
    "text": "jumbled but nothing really more oh this is really small sorry",
    "start": "1660820",
    "end": "1666180"
  },
  {
    "text": "so a lot of jumbled things and then some of the common imports exports in here",
    "start": "1670830",
    "end": "1676390"
  },
  {
    "text": "but nothing that really talks about that signature that we're still looking for or the declared Java method names that",
    "start": "1676390",
    "end": "1683020"
  },
  {
    "text": "we still need to be able to do that peering from the beginning of our apk says I have these native methods",
    "start": "1683020",
    "end": "1690070"
  },
  {
    "text": "what's run in this library so when I run this file script file and then run our",
    "start": "1690070",
    "end": "1705940"
  },
  {
    "text": "wedding cake crypt what we will see now back in our J&I onload is suddenly we have all these strengths so now we can",
    "start": "1705940",
    "end": "1713530"
  },
  {
    "text": "start our analysis because one of those keeping this look we have calls to decks",
    "start": "1713530",
    "end": "1719260"
  },
  {
    "text": "class loader we see an it we see right here was that class name that with all",
    "start": "1719260",
    "end": "1726460"
  },
  {
    "text": "those jumbled letters so now we can really start understanding what is this doing and getting past the decryption",
    "start": "1726460",
    "end": "1732940"
  },
  {
    "text": "and this script is going to run on all of our other samples - oops my sites go",
    "start": "1732940",
    "end": "1740410"
  },
  {
    "text": "so again focus just on speed and flexibility it's always hard for me",
    "start": "1740410",
    "end": "1745840"
  },
  {
    "text": "because I like to understand everything I'm reversing but sometimes it's not the right choice if you are better at",
    "start": "1745840",
    "end": "1754330"
  },
  {
    "text": "setting up our emulators or debuggers then that MCMAP could probably be a faster route - but that would have taken",
    "start": "1754330",
    "end": "1761200"
  },
  {
    "text": "me longer so yeah Oh in one of the ways that I generally get around hard-coded",
    "start": "1761200",
    "end": "1767290"
  },
  {
    "text": "addresses as well as registers as using regex so just a screenshot the top was all of",
    "start": "1767290",
    "end": "1775180"
  },
  {
    "text": "the encrypted block of memory and then a segment where the same segment decrypted",
    "start": "1775180",
    "end": "1780910"
  },
  {
    "text": "after running our script and the key thing was is now we do have that string",
    "start": "1780910",
    "end": "1786610"
  },
  {
    "text": "of our function named VX CG we have it signature and now we also see in the",
    "start": "1786610",
    "end": "1792280"
  },
  {
    "text": "structure the subroutine that is associated with it so this is now where we can go we can finally get to what we",
    "start": "1792280",
    "end": "1799330"
  },
  {
    "text": "actually wanted to analyze in the beginning the plus one at the end is just it's running in thumb mode so we have",
    "start": "1799330",
    "end": "1808659"
  },
  {
    "text": "our three declared native methods we know their native subroutines that are",
    "start": "1808659",
    "end": "1814960"
  },
  {
    "text": "run each time they're called we have their signatures because each of them are named differently in all the samples",
    "start": "1814960",
    "end": "1822279"
  },
  {
    "text": "I just added a function number and the leftmost column to say that any of the",
    "start": "1822279",
    "end": "1830440"
  },
  {
    "text": "native declared methods that have these same signatures would correspond in the same analysis as what I have here for BX",
    "start": "1830440",
    "end": "1837309"
  },
  {
    "text": "eg or two so that leads us into our runtime environment checks which I",
    "start": "1837309",
    "end": "1843820"
  },
  {
    "text": "didn't know at the time I just started my analysis on that function number one but what the goal of the malware",
    "start": "1843820",
    "end": "1851139"
  },
  {
    "text": "developers was they wanted to understand if they are being dynamically analyzed debug or emulated someone managed to get",
    "start": "1851139",
    "end": "1859240"
  },
  {
    "text": "through probably the JNA I mean manipulations the anti reversing and the decryption so now where are they and",
    "start": "1859240",
    "end": "1866230"
  },
  {
    "text": "they want to make sure this isn't a debugger that got around those things or it's not some automated pipeline and one",
    "start": "1866230",
    "end": "1872740"
  },
  {
    "text": "of the interesting things that's sort of different and is changing with the evolution of Android and how there's not",
    "start": "1872740",
    "end": "1878320"
  },
  {
    "text": "really the low-hanging fruit anymore is that they're willing to give up some of their market share as malware developers",
    "start": "1878320",
    "end": "1884950"
  },
  {
    "text": "if that means waiting at more heavily towards not being detected which is not",
    "start": "1884950",
    "end": "1892000"
  },
  {
    "text": "one of those things in a malware family such as gem wall which is focused on making money through different types of",
    "start": "1892000",
    "end": "1898750"
  },
  {
    "text": "fraud what we saw here is that they're willing to not run on every device as long as they're not being detected so",
    "start": "1898750",
    "end": "1907419"
  },
  {
    "text": "again the xcg firms runtime environment checks and there's 45 different ones of them if any single one of these 45",
    "start": "1907419",
    "end": "1914679"
  },
  {
    "text": "checks fails then we will stop execution of the app so we're going to go through",
    "start": "1914679",
    "end": "1922690"
  },
  {
    "text": "a couple different groups of these that make up the 45 the first one is going through sis all the system properties so",
    "start": "1922690",
    "end": "1930220"
  },
  {
    "text": "the all of them are sort of aimed at being whether or not you're hardware you're running",
    "start": "1930220",
    "end": "1935870"
  },
  {
    "text": "is an emulator or being debugged and the first 37 checks they do are checking to",
    "start": "1935870",
    "end": "1941809"
  },
  {
    "text": "see if the system property has a specific value I obviously could not list them all here so there is a link as well as in that",
    "start": "1941809",
    "end": "1949070"
  },
  {
    "text": "Ida Python embedded toolkit where the decryption is of all 37 of these checks if you're interested in seeing what",
    "start": "1949070",
    "end": "1955010"
  },
  {
    "text": "they're looking for but most of them are based on looking for common emulators debuggers but one of the interesting",
    "start": "1955010",
    "end": "1961550"
  },
  {
    "text": "ones too was they will not run if you do not have SELinux in enabling mode so",
    "start": "1961550",
    "end": "1967970"
  },
  {
    "text": "that is one of the places where they're not going to generally run if your device is rooted and things like that",
    "start": "1967970",
    "end": "1973550"
  },
  {
    "text": "the last five that they go through is using is just checking if any of these five on the right exists not even what",
    "start": "1973550",
    "end": "1980870"
  },
  {
    "text": "their value is and it's pretty clear why they're all related to different types of emulators or things that emulators",
    "start": "1980870",
    "end": "1989600"
  },
  {
    "text": "and debugger set up in order to make it look like a real device so the next",
    "start": "1989600",
    "end": "1998450"
  },
  {
    "text": "thing they do is they want to make sure what architecture they're running on they will not run if you are not running",
    "start": "1998450",
    "end": "2003610"
  },
  {
    "text": "on arm which is really really fascinating since we found x86 versions of this library to those x86 versions",
    "start": "2003610",
    "end": "2011080"
  },
  {
    "text": "also include this check even though they are running because you are on x86 so",
    "start": "2011080",
    "end": "2017530"
  },
  {
    "text": "they don't do this with a clear API call instead what they do is they open up",
    "start": "2017530",
    "end": "2023440"
  },
  {
    "text": "slash system flash LED flash led CSL and read the first 20 characters or 20 bytes",
    "start": "2023440",
    "end": "2030580"
  },
  {
    "text": "from that file this is still a part of the elf header being the first 20 bytes",
    "start": "2030580",
    "end": "2035830"
  },
  {
    "text": "and then out of those 20 bytes they only read three of them the first that check they do is for the byte that's at the ie",
    "start": "2035830",
    "end": "2043900"
  },
  {
    "text": "identity I class position in the elf header and that determines whether or",
    "start": "2043900",
    "end": "2049540"
  },
  {
    "text": "not you're running as 32-bit or 64-bit the last two bytes they do is what",
    "start": "2049540",
    "end": "2054878"
  },
  {
    "text": "machine our hardware you are on so in this case they're looking for these values of either hex 28 or hex b7 to say",
    "start": "2054879",
    "end": "2062648"
  },
  {
    "text": "your either arm or arc 64 so the only two combinations that are acceptable is",
    "start": "2062649",
    "end": "2067780"
  },
  {
    "text": "32-bit an arm or 64bit in art if you are running anything else the new exit and the",
    "start": "2067780",
    "end": "2074679"
  },
  {
    "text": "application stops the next thing they look for is to determine if monkey is",
    "start": "2074679",
    "end": "2081490"
  },
  {
    "text": "running if you don't know what monkey is it is a tool that allows developers to",
    "start": "2081490",
    "end": "2086819"
  },
  {
    "text": "emulate or pretend that a user is interacting with their device in their application so you know performing fake",
    "start": "2086819",
    "end": "2093819"
  },
  {
    "text": "touches fake clicks and things like that the way they go about trying to detect if monkey is running is they open up",
    "start": "2093819",
    "end": "2100990"
  },
  {
    "text": "croc they then iterate through every directory here yeah so they after they",
    "start": "2100990",
    "end": "2109990"
  },
  {
    "text": "open up croc they check what each file or notes value is and whether or not",
    "start": "2109990",
    "end": "2115960"
  },
  {
    "text": "it's a directory if it's a directory they check its name to determine whether or not it's an integer and they then",
    "start": "2115960",
    "end": "2121839"
  },
  {
    "text": "construct these two paths of the PIDs directory for calm or I mean file for",
    "start": "2121839",
    "end": "2127599"
  },
  {
    "text": "calm as well as command-line they read then out the max or a max up to seven F",
    "start": "2127599",
    "end": "2133839"
  },
  {
    "text": "fights and then choose whichever one has more information they then see if that",
    "start": "2133839",
    "end": "2139509"
  },
  {
    "text": "information contains the monkey package name at all if it does it means that",
    "start": "2139509",
    "end": "2144730"
  },
  {
    "text": "monkey is running and they choose to exit so just a note this no longer does",
    "start": "2144730",
    "end": "2150009"
  },
  {
    "text": "this doesn't work on anything Android an hour plus to open up proc and iterate through the pidz",
    "start": "2150009",
    "end": "2155490"
  },
  {
    "text": "so in that case that they are not actually able to open up proc and pit instead of exiting in that case they",
    "start": "2155490",
    "end": "2162819"
  },
  {
    "text": "will still just skip over that check and run it's only if they're able to open do",
    "start": "2162819",
    "end": "2169509"
  },
  {
    "text": "they exit if they see monkey the very",
    "start": "2169509",
    "end": "2177039"
  },
  {
    "text": "last runtime environment check they do is to determine if the xposed framework is running as well so exposed is a",
    "start": "2177039",
    "end": "2185829"
  },
  {
    "text": "framework that allows you to hook or modify system code on your android device it's used on a lot of different",
    "start": "2185829",
    "end": "2192039"
  },
  {
    "text": "forms for a lot of different reasons but they want to make sure that you haven't hooked their app for analysis so",
    "start": "2192039",
    "end": "2198200"
  },
  {
    "text": "they're going to check if these two files are existing and praça self maps me meaning they have been mapped into",
    "start": "2198200",
    "end": "2204770"
  },
  {
    "text": "memory and then if that one passes they then also check using je and I find",
    "start": "2204770",
    "end": "2209900"
  },
  {
    "text": "class methods if they are able to find either of these two exposed class methods are running two because you want",
    "start": "2209900",
    "end": "2216710"
  },
  {
    "text": "to be really sure exposed isn't running but if you make it through all of those",
    "start": "2216710",
    "end": "2223550"
  },
  {
    "text": "different 45 checks as well as the in-place decryption and anti reversing what I then found was it was code that",
    "start": "2223550",
    "end": "2231560"
  },
  {
    "text": "I'd already analyzed before and that other team members had documented as well and the sample I had been looking",
    "start": "2231560",
    "end": "2238010"
  },
  {
    "text": "at was a new variant of this Shinhwa family and it was just another unpacker so I spent you know a couple of days all",
    "start": "2238010",
    "end": "2246530"
  },
  {
    "text": "my time focused on getting through this to unpack the packed unpacker",
    "start": "2246530",
    "end": "2251980"
  },
  {
    "text": "but what was really interesting about this and what I had been thinking about a lot is one you know they're willing",
    "start": "2252670",
    "end": "2259760"
  },
  {
    "text": "even though there are a large sort of money-making fraud botnet and that's always been their goal is market share",
    "start": "2259760",
    "end": "2266330"
  },
  {
    "text": "because that's how you make money they had evolved to a point now that they were willing to miss out on potential",
    "start": "2266330",
    "end": "2271670"
  },
  {
    "text": "targets if that means not being detected and in addition they were very",
    "start": "2271670",
    "end": "2277430"
  },
  {
    "text": "intelligent and how they layered their ant analysis techniques because they targeted one I'm going to frustrate the",
    "start": "2277430",
    "end": "2284570"
  },
  {
    "text": "human analyst through the decryption and are the encryption and the anti reverse",
    "start": "2284570",
    "end": "2290090"
  },
  {
    "text": "engineering then they're also going to prevent dynamic static analysis tools",
    "start": "2290090",
    "end": "2298820"
  },
  {
    "text": "running over it to find strings or understanding of what was in the elf and",
    "start": "2298820",
    "end": "2303970"
  },
  {
    "text": "lastly you know they also are using techniques to detect if they are being",
    "start": "2303970",
    "end": "2310940"
  },
  {
    "text": "dynamically analyzed so packaging all of these together to try and target each of",
    "start": "2310940",
    "end": "2315980"
  },
  {
    "text": "those different types of analysis that we all have defenders or attackers try",
    "start": "2315980",
    "end": "2321680"
  },
  {
    "text": "to bring to the table here so what I hope and what I was hoping to help or",
    "start": "2321680",
    "end": "2326840"
  },
  {
    "text": "provide to you and why I hope you or I hope to have provided in the sense that you stayed it until 6 p.m. on the",
    "start": "2326840",
    "end": "2333239"
  },
  {
    "text": "last day of blackhat was some ideas of what is the current state of the art in terms of Android anti analysis",
    "start": "2333239",
    "end": "2339059"
  },
  {
    "text": "techniques and how could you possibly get through them faster things that you",
    "start": "2339059",
    "end": "2344190"
  },
  {
    "text": "could look for know that they're being used so you don't spend the same amount of time I did and also how can you write",
    "start": "2344190",
    "end": "2352979"
  },
  {
    "text": "decryption solutions with the goal being fast and sort of agnostic to the exact",
    "start": "2352979",
    "end": "2358049"
  },
  {
    "text": "sample you're looking at and with that thank you and are there any questions",
    "start": "2358049",
    "end": "2363880"
  },
  {
    "text": "[Applause]",
    "start": "2363880",
    "end": "2373488"
  }
]