[
  {
    "start": "0",
    "end": "15000"
  },
  {
    "text": "so hello everyone my name is anezka touch and I'm going to present our work",
    "start": "0",
    "end": "5040"
  },
  {
    "text": "in which we looked at a new security feature in LLVM client which is called",
    "start": "5040",
    "end": "10889"
  },
  {
    "text": "safe stack it's quite recently added to the compiler so let me give an outline",
    "start": "10889",
    "end": "17640"
  },
  {
    "start": "15000",
    "end": "45000"
  },
  {
    "text": "of the presentation first so I will first explain like what safes like this we will look at what it is good for look",
    "start": "17640",
    "end": "25170"
  },
  {
    "text": "at it a little bit added internals and then we will look at its weaknesses so",
    "start": "25170",
    "end": "31859"
  },
  {
    "text": "we will look at neglected pointers which are implementation issues then we will",
    "start": "31859",
    "end": "37530"
  },
  {
    "text": "look at more fundamental problems like that spraying and allocation Oracle's and then we will conclude the talk so",
    "start": "37530",
    "end": "46079"
  },
  {
    "start": "45000",
    "end": "60000"
  },
  {
    "text": "safes like what is it as I said some new security feature in the compiler in the",
    "start": "46079",
    "end": "51360"
  },
  {
    "text": "LLVM tool chain and it's essentially again to prevent controller hijacks on",
    "start": "51360",
    "end": "58859"
  },
  {
    "text": "the stack and originally this has been proposed by researchers Kuznetsov and",
    "start": "58859",
    "end": "67560"
  },
  {
    "start": "60000",
    "end": "159000"
  },
  {
    "text": "and others and code code pointer integrity paper in this paper they try",
    "start": "67560",
    "end": "73200"
  },
  {
    "text": "to hide and protect all the code pointers because attackers exploit the",
    "start": "73200",
    "end": "79290"
  },
  {
    "text": "code pointers they try to overwrite them and then get control of the program to do malicious stuff for example do Rob",
    "start": "79290",
    "end": "87390"
  },
  {
    "text": "execute a rope chain and in the end take control or compromise the machine or the computer yeah so and it has also been",
    "start": "87390",
    "end": "98909"
  },
  {
    "text": "proposed for integrating it into TTC I think some previous D developers are",
    "start": "98909",
    "end": "110520"
  },
  {
    "text": "thinking of providing the safe stack feature out of the box so this means",
    "start": "110520",
    "end": "116909"
  },
  {
    "text": "that if you install a freebsd operating system probably you will have the safe",
    "start": "116909",
    "end": "122610"
  },
  {
    "text": "side teacher on in its default configuration so",
    "start": "122610",
    "end": "129490"
  },
  {
    "text": "actually yeah quite I think that people",
    "start": "129490",
    "end": "135130"
  },
  {
    "text": "look at it right now and we thought we also wanted to look at it as my but from from its security",
    "start": "135130",
    "end": "142750"
  },
  {
    "text": "perspective how safe is the safe side so",
    "start": "142750",
    "end": "148240"
  },
  {
    "text": "what is safes like doing so let's say we",
    "start": "148240",
    "end": "154000"
  },
  {
    "text": "have so let me show this with an example so here we have a in a program where",
    "start": "154000",
    "end": "161110"
  },
  {
    "text": "safe sex is not applied to say the stack contains the program execution context",
    "start": "161110",
    "end": "168540"
  },
  {
    "text": "of the process and it has code pointers",
    "start": "168540",
    "end": "173620"
  },
  {
    "text": "to return addresses it has local variables pushed by the functions and",
    "start": "173620",
    "end": "180690"
  },
  {
    "text": "what saves like does is when you apply a stack it separates values on the stack",
    "start": "180690",
    "end": "188740"
  },
  {
    "text": "so it adds an additional second alternative stack which contains edges",
    "start": "188740",
    "end": "194020"
  },
  {
    "text": "taken which they define as a dangerous",
    "start": "194020",
    "end": "199380"
  },
  {
    "text": "data data that can potentially cause",
    "start": "199380",
    "end": "205420"
  },
  {
    "text": "problems like Oh over writing the code pointers on the stack like the return address I will show this with an example",
    "start": "205420",
    "end": "213599"
  },
  {
    "text": "so what is it good again so let's say we have a memory corruption in the program and buffer a can be overflowing with",
    "start": "214290",
    "end": "223870"
  },
  {
    "text": "data what the tacker can do is if it overflows the data and buffer a it can",
    "start": "223870",
    "end": "229450"
  },
  {
    "text": "override the return address and this is very valuable for an attacker because",
    "start": "229450",
    "end": "234670"
  },
  {
    "text": "here it can initiate the control flow hijack of the program but when you apply",
    "start": "234670",
    "end": "244210"
  },
  {
    "text": "a flag the vulnerability will happen on the unsafe stack and attacker cannot",
    "start": "244210",
    "end": "253959"
  },
  {
    "text": "override the sensitive information to sense the data the return address called pointer on the stack",
    "start": "253959",
    "end": "260739"
  },
  {
    "text": "so it's good again it protects return addresses so good it is good against",
    "start": "260739",
    "end": "266500"
  },
  {
    "text": "stack buffer overflows that try to override the return address on the stack",
    "start": "266500",
    "end": "272220"
  },
  {
    "text": "but it is also good against some other problem so let's say we have a variable",
    "start": "272220",
    "end": "279910"
  },
  {
    "text": "in the heap it has a pointer that is a pointer to the buffer to buffer",
    "start": "279910",
    "end": "287380"
  },
  {
    "text": "a on the stack so if the attacker has some information disclosure capability",
    "start": "287380",
    "end": "293770"
  },
  {
    "text": "it will be able to leak the location of the stack and continue its exploitation",
    "start": "293770",
    "end": "302550"
  },
  {
    "text": "so the thing is the stack should actually be hidden from the tackle and if the attacker can't find the stack it",
    "start": "302550",
    "end": "311169"
  },
  {
    "text": "can it also needs adversary and some bright capabilities to then overwrite",
    "start": "311169",
    "end": "317440"
  },
  {
    "text": "the values on the stack so information disclosures that's this one so the thing",
    "start": "317440",
    "end": "324610"
  },
  {
    "text": "is but for a will then be moved to the unsafe stack in your place a stack so",
    "start": "324610",
    "end": "331240"
  },
  {
    "text": "the buffer a pointer will not be pointing to the stack that contains return addresses but it will point to",
    "start": "331240",
    "end": "337360"
  },
  {
    "text": "the unsafe stack so it also stops actually the stack location disclosure",
    "start": "337360",
    "end": "345478"
  },
  {
    "text": "so programs also leaking the stack location so how does it look in the",
    "start": "346530",
    "end": "352719"
  },
  {
    "start": "349000",
    "end": "426000"
  },
  {
    "text": "process memory when you apply safe stack it separates the values in the unsafe",
    "start": "352719",
    "end": "358270"
  },
  {
    "text": "stack and puts the on say stack in a map area so nothing interesting the",
    "start": "358270",
    "end": "369490"
  },
  {
    "text": "interesting part is as I mentioned already if there's a pointer to the stack this pointer will be pointing to",
    "start": "369490",
    "end": "374800"
  },
  {
    "text": "the unsafe stacks or the safe stack will be protected from having pointers to so",
    "start": "374800",
    "end": "380949"
  },
  {
    "text": "pointers to save stack may not appear in reachable memory to keep the safe stack hidden so we want to try you want to",
    "start": "380949",
    "end": "387130"
  },
  {
    "text": "hide the safe stack from the attacker and with reachable memory I mean",
    "start": "387130",
    "end": "393530"
  },
  {
    "text": "like so if the attacker starts well has involved information disclosure",
    "start": "393530",
    "end": "399120"
  },
  {
    "text": "capabilities and it starts leaking data it can leave the data region and it can",
    "start": "399120",
    "end": "410520"
  },
  {
    "text": "follow pointers to other regions and click try to lick as many as possible in the memory space so that's the reach of",
    "start": "410520",
    "end": "417660"
  },
  {
    "text": "reachable memory and preferably there should be no pointer to the safe side so",
    "start": "417660",
    "end": "427140"
  },
  {
    "start": "426000",
    "end": "587000"
  },
  {
    "text": "let's also look a little bit at the internals here is an example main",
    "start": "427140",
    "end": "433080"
  },
  {
    "text": "function with a buffer this buffer is being provided to string copy and this",
    "start": "433080",
    "end": "442140"
  },
  {
    "text": "is not really a safe program an attacker could provide any length in the argument",
    "start": "442140",
    "end": "447840"
  },
  {
    "text": "ok so at 0 should be a 1 so if the tanker provides a very long argument it",
    "start": "447840",
    "end": "457770"
  },
  {
    "text": "will overflow the return address on the stack and so that's the problem here how",
    "start": "457770",
    "end": "467940"
  },
  {
    "text": "does it look in the assembly code second block shows the some assembly code where",
    "start": "467940",
    "end": "476750"
  },
  {
    "text": "safe sex multiply this piece of assembly up allocates some space on the normal",
    "start": "476750",
    "end": "483930"
  },
  {
    "text": "stack for the buffer so the buffer is located on this normal stack and when it",
    "start": "483930",
    "end": "490910"
  },
  {
    "text": "calls string copied Pro it's sent it gives an address it provides address of",
    "start": "490910",
    "end": "497850"
  },
  {
    "text": "buffer to string copy and yet it actually operates on the stack and in",
    "start": "497850",
    "end": "504060"
  },
  {
    "text": "the safe stack example the buffer is located on a safe stack the are safe",
    "start": "504060",
    "end": "511740"
  },
  {
    "text": "stack is maintained through a pointer in",
    "start": "511740",
    "end": "517200"
  },
  {
    "text": "the thread-local storage Jesus through the FS register that",
    "start": "517200",
    "end": "523240"
  },
  {
    "text": "register is a special register that contains the base of the thread control",
    "start": "523240",
    "end": "529540"
  },
  {
    "text": "block and so it takes an offset from this FS register and get the pointer",
    "start": "529540",
    "end": "536830"
  },
  {
    "text": "from the local storage end and then",
    "start": "536830",
    "end": "541930"
  },
  {
    "text": "stores the buffer on this a stack so it",
    "start": "541930",
    "end": "548710"
  },
  {
    "text": "doesn't use the RSP pointer budgets use FS register and takes offset to get the",
    "start": "548710",
    "end": "553900"
  },
  {
    "text": "other side pointed so instead of using",
    "start": "553900",
    "end": "562510"
  },
  {
    "text": "the RSP pointer and getting added to the stack it gets the it gets an address to",
    "start": "562510",
    "end": "568360"
  },
  {
    "text": "the unsafe stack so in the third block in the safe side example it retrieves",
    "start": "568360",
    "end": "574810"
  },
  {
    "text": "the address from a reading value in our",
    "start": "574810",
    "end": "580630"
  },
  {
    "text": "50 and in the normal example it uses RSP okay so since that can be enabled by",
    "start": "580630",
    "end": "589750"
  },
  {
    "start": "587000",
    "end": "628000"
  },
  {
    "text": "setting the safe stack sanitized flag and essentially it moves the others",
    "start": "589750",
    "end": "597880"
  },
  {
    "text": "taken objects to the alternative stack which prevents the end leaking the stack",
    "start": "597880",
    "end": "603730"
  },
  {
    "text": "location location of home safe sex and it relies on a SLR our question is how",
    "start": "603730",
    "end": "610930"
  },
  {
    "text": "safe is the safe sex actually and for this we look at these two things so can",
    "start": "610930",
    "end": "616360"
  },
  {
    "text": "we still leak the location of the of the sales tax and because it's relies on SLR",
    "start": "616360",
    "end": "625000"
  },
  {
    "text": "can we can this reline so we will look",
    "start": "625000",
    "end": "631630"
  },
  {
    "start": "628000",
    "end": "650000"
  },
  {
    "text": "at three problems one is that there are still pointers actually in the program",
    "start": "631630",
    "end": "639460"
  },
  {
    "text": "we'll go over them and then two more fundamental problems like thread spraying and allocation Oracle's let's",
    "start": "639460",
    "end": "647440"
  },
  {
    "text": "start with the neglected points but before we start",
    "start": "647440",
    "end": "652440"
  },
  {
    "start": "650000",
    "end": "682000"
  },
  {
    "text": "we are assuming that the program has a memory corruption and that this memory",
    "start": "653279",
    "end": "658600"
  },
  {
    "text": "corruption enables an attacker to have an absolutely right primitive which with",
    "start": "658600",
    "end": "666070"
  },
  {
    "text": "which the attacker can leak the heat and module data so it can which can read out",
    "start": "666070",
    "end": "671740"
  },
  {
    "text": "the data but it doesn't know where this stack is and the goal is to find locate",
    "start": "671740",
    "end": "679810"
  },
  {
    "text": "the safe stack so cystic ensures there",
    "start": "679810",
    "end": "686710"
  },
  {
    "start": "682000",
    "end": "728000"
  },
  {
    "text": "are no pointers to the stack so what we",
    "start": "686710",
    "end": "692290"
  },
  {
    "text": "did we analyzed some programs with a Python script and use gdb we walked the",
    "start": "692290",
    "end": "704800"
  },
  {
    "text": "whole memory space and then just looked for pointers that would point to the",
    "start": "704800",
    "end": "710350"
  },
  {
    "text": "safe stack region so we collected the spec locations and then just went over",
    "start": "710350",
    "end": "715420"
  },
  {
    "text": "the memory and then collected addresses that would point to the collected stack",
    "start": "715420",
    "end": "722589"
  },
  {
    "text": "regions and then we manually verified all the pointers so we found pointers in",
    "start": "722589",
    "end": "731190"
  },
  {
    "text": "a we found pointers and we categorize them in three groups like we found points in the heap we found pointers in",
    "start": "731190",
    "end": "738160"
  },
  {
    "text": "libraries and something very interesting is other thread ID mmm",
    "start": "738160",
    "end": "745510"
  },
  {
    "text": "we'll look at that so what we found in a heap we found some thread management",
    "start": "745510",
    "end": "753390"
  },
  {
    "start": "747000",
    "end": "865000"
  },
  {
    "text": "related structure which is called dynamic thread vector this contains",
    "start": "753390",
    "end": "761370"
  },
  {
    "text": "pointers to TLS blocks so the thread-local storage blocks and get a",
    "start": "761370",
    "end": "768700"
  },
  {
    "text": "thread-local storage corresponds to a module library and this module has its",
    "start": "768700",
    "end": "780579"
  },
  {
    "text": "own specific values which it stores in its own thread-local storage block libraries",
    "start": "780579",
    "end": "789000"
  },
  {
    "text": "and modules that are loaded with the program at at the load time of the program create static TLS blocks and",
    "start": "789000",
    "end": "797550"
  },
  {
    "text": "libraries that are loaded later during runtime they create dynamic TLS blocks",
    "start": "797550",
    "end": "803750"
  },
  {
    "text": "okay so in this dynamic thread vector there are pointers that point to the SEC",
    "start": "803750",
    "end": "811620"
  },
  {
    "text": "but how so the thread control block is",
    "start": "811620",
    "end": "819120"
  },
  {
    "text": "located on the stack and the static TLS thread lock slash blocks are adjacent to",
    "start": "819120",
    "end": "825960"
  },
  {
    "text": "this TCB to this thread control block and DTV the the dynamic set vector",
    "start": "825960",
    "end": "833820"
  },
  {
    "text": "points to the static TLS block so in the end it also points to the stack so you",
    "start": "833820",
    "end": "840450"
  },
  {
    "text": "have pointers in the heap that point to the stack for if you would like to know",
    "start": "840450",
    "end": "850950"
  },
  {
    "text": "more about the structure so here it's all about the pointers but if you like to know more about pointers you can",
    "start": "850950",
    "end": "857010"
  },
  {
    "text": "follow this link to read more about thread management and TLS blocks and TCP",
    "start": "857010",
    "end": "862350"
  },
  {
    "text": "box so there are also pointers in",
    "start": "862350",
    "end": "868470"
  },
  {
    "start": "865000",
    "end": "954000"
  },
  {
    "text": "libraries to very interesting ones that could give you all spec locations are",
    "start": "868470",
    "end": "877650"
  },
  {
    "text": "the stack used and the stack user variables in the P thread library so the",
    "start": "877650",
    "end": "882900"
  },
  {
    "text": "P set library uses these two variables to do its thread management spec used so",
    "start": "882900",
    "end": "890310"
  },
  {
    "text": "these two variables are linked lists that point to the TCD which are for",
    "start": "890310",
    "end": "895980"
  },
  {
    "text": "secondary stack so for secondary stress I will take a lot of secondary thread so",
    "start": "895980",
    "end": "902460"
  },
  {
    "text": "we have a main thread that is created by the kernel but program when the program starts you have one stack that is",
    "start": "902460",
    "end": "908760"
  },
  {
    "text": "created by the kernel that's the main stack and the threats that are created",
    "start": "908760",
    "end": "915450"
  },
  {
    "text": "afterwards during runtime those are the secondary threat and stacked used points to secondary to secondary threats stacks",
    "start": "915450",
    "end": "924510"
  },
  {
    "text": "and statues are points to sector to the main threat and actually they point to",
    "start": "924510",
    "end": "931230"
  },
  {
    "text": "the TCB and as I said the TCB's on stack but for me that the TCP is not on the",
    "start": "931230",
    "end": "936630"
  },
  {
    "text": "stack attend a in the heap so this is also interesting but if you have the TCB",
    "start": "936630",
    "end": "943290"
  },
  {
    "text": "you can get the stack because the tcp the thread control block has itself also",
    "start": "943290",
    "end": "950430"
  },
  {
    "text": "pointer to the stack like where the stack starts and how large the stack is",
    "start": "950430",
    "end": "958279"
  },
  {
    "start": "954000",
    "end": "1248000"
  },
  {
    "text": "okay so that's like you used em stack lizard there are also other pointers for",
    "start": "958279",
    "end": "966870"
  },
  {
    "text": "example Lipsy there is the program invocation name and a program implication short name this",
    "start": "966870",
    "end": "974220"
  },
  {
    "text": "just point to the name of the program but these are located on the main stack",
    "start": "974220",
    "end": "981270"
  },
  {
    "text": "so on the main stack you have that itself but also before just before the",
    "start": "981270",
    "end": "988380"
  },
  {
    "text": "stack we have its environment rivals and argument list and there these two",
    "start": "988380",
    "end": "993690"
  },
  {
    "text": "variables point to let GCC as the variable names they have mister pointers",
    "start": "993690",
    "end": "1001820"
  },
  {
    "text": "for point to the argument list also on the main stack the LD library the loader",
    "start": "1001820",
    "end": "1012220"
  },
  {
    "text": "also has some pointers as the main say",
    "start": "1012220",
    "end": "1018200"
  },
  {
    "text": "environment environment point to the environment list the LRV points the argument list and leave the stack end",
    "start": "1018200",
    "end": "1024140"
  },
  {
    "text": "points to start location of the main stack so where the stack starts growing",
    "start": "1024140",
    "end": "1030938"
  },
  {
    "text": "an RT LD global arrow structure a very",
    "start": "1030939",
    "end": "1037130"
  },
  {
    "text": "large structure but also has some pointers to environment Bible so there are pointers",
    "start": "1037130",
    "end": "1044439"
  },
  {
    "text": "yeah it can be six but another interesting one is a log n so Alec and",
    "start": "1044440",
    "end": "1053920"
  },
  {
    "text": "is used to in the memory management so",
    "start": "1053920",
    "end": "1060070"
  },
  {
    "text": "when an application calls Mal'akh it used a log end to to see where the last",
    "start": "1060070",
    "end": "1067510"
  },
  {
    "text": "allocation was and then it allocates more at that location but if the",
    "start": "1067510",
    "end": "1074500"
  },
  {
    "text": "application overloads malloc like Chrome and Firefox does this a lot and becomes",
    "start": "1074500",
    "end": "1080440"
  },
  {
    "text": "like a stale pointer and and this brings",
    "start": "1080440",
    "end": "1089350"
  },
  {
    "text": "us back to the TCD and the dynamic set vector that is",
    "start": "1089350",
    "end": "1094360"
  },
  {
    "text": "allocated for the main main thread these two are allocated in the heap these are the first two red structures remains",
    "start": "1094360",
    "end": "1101590"
  },
  {
    "text": "that these are in the heap and a look and points the region that contains these two structures or the dynamics at",
    "start": "1101590",
    "end": "1108670"
  },
  {
    "text": "sector and the TCD block of the main thread so it's a still pointer that's",
    "start": "1108670",
    "end": "1117010"
  },
  {
    "text": "point still to the region that has some interesting structures so an attacker",
    "start": "1117010",
    "end": "1122320"
  },
  {
    "text": "could get this pointer another",
    "start": "1122320",
    "end": "1128290"
  },
  {
    "text": "interesting one is the thread IDs pthread api so the API for trading",
    "start": "1128290",
    "end": "1137560"
  },
  {
    "text": "threads and managing threads use a thread ID pthread key type but this type",
    "start": "1137560",
    "end": "1146680"
  },
  {
    "text": "is not just some that some some number indicates the NS number of thread but",
    "start": "1146680",
    "end": "1153640"
  },
  {
    "text": "it's the address of the thread tgd blog",
    "start": "1153640",
    "end": "1160170"
  },
  {
    "text": "but tcp is on the stack so and so if so",
    "start": "1160170",
    "end": "1166240"
  },
  {
    "text": "if the plication does some threat management and it's pointers",
    "start": "1166240",
    "end": "1171770"
  },
  {
    "text": "I mean stores the threat IDs in its data region of the heap it is storing",
    "start": "1171770",
    "end": "1179140"
  },
  {
    "text": "pointers to the stack actually this was very interesting also libraries can yeah",
    "start": "1179140",
    "end": "1188170"
  },
  {
    "text": "here an example like let XML to that library stores the stores a pointer to",
    "start": "1188170",
    "end": "1195560"
  },
  {
    "text": "the main threat Italy like that's not the purpose but that's what happens okay",
    "start": "1195560",
    "end": "1205910"
  },
  {
    "text": "so let's assume these implementation issues are fixed and there are no pointers pointing to the stack then",
    "start": "1205910",
    "end": "1216740"
  },
  {
    "text": "what'm attacker could do is try to randomly hit the safe stack but if the",
    "start": "1216740",
    "end": "1222500"
  },
  {
    "text": "address space is so large that it's entropy is very high so the chance that",
    "start": "1222500",
    "end": "1228140"
  },
  {
    "text": "you hit this tag is quite low so what could he do to increase his chance to",
    "start": "1228140",
    "end": "1236510"
  },
  {
    "text": "hit the safe stack well reduce the entropy through threat spraying but",
    "start": "1236510",
    "end": "1244400"
  },
  {
    "text": "let's first go over what this entropy actually entropy is degree of randomness of",
    "start": "1244400",
    "end": "1251390"
  },
  {
    "text": "something in in the memory that is given in bits so let's start with a simple",
    "start": "1251390",
    "end": "1259550"
  },
  {
    "text": "example in which we where we have a three bit address space and then we will",
    "start": "1259550",
    "end": "1266360"
  },
  {
    "text": "look at 64-bit address space so this pretty big edge state has eight blocks",
    "start": "1266360",
    "end": "1272930"
  },
  {
    "text": "of eight blocks of one byte each and in",
    "start": "1272930",
    "end": "1279500"
  },
  {
    "text": "the figure on the right side of the slide we are trying to hide to by this",
    "start": "1279500",
    "end": "1287810"
  },
  {
    "text": "memory region since it is occupying",
    "start": "1287810",
    "end": "1292870"
  },
  {
    "text": "consuming one bit of the three that address space",
    "start": "1292870",
    "end": "1298120"
  },
  {
    "text": "we say this memory region has an entropy of two bits it's consuming one bit from",
    "start": "1298280",
    "end": "1305660"
  },
  {
    "text": "this entropy in bits you can understand that the head chance is 1/2 to the power",
    "start": "1305660",
    "end": "1312050"
  },
  {
    "text": "of 2 which the entropy which is 25% so if you try to randomly hit the safe side",
    "start": "1312050",
    "end": "1318920"
  },
  {
    "text": "or all this memory region then your chance of hitting it is 25% and if you",
    "start": "1318920",
    "end": "1325460"
  },
  {
    "text": "are if you have a probe capability and you're trying to probe for it you would need 4 probes in the worst case okay so",
    "start": "1325460",
    "end": "1334400"
  },
  {
    "text": "if the memory region would be 4 bytes would occupy all of the other states or",
    "start": "1334400",
    "end": "1341090"
  },
  {
    "text": "this 3 bit address states it will occupy 2 bits of the address space and entropy",
    "start": "1341090",
    "end": "1349160"
  },
  {
    "text": "would be one bit which means that a chance either 50% or the worst-case",
    "start": "1349160",
    "end": "1356300"
  },
  {
    "text": "probing number of probes is 2 okay so",
    "start": "1356300",
    "end": "1362030"
  },
  {
    "start": "1361000",
    "end": "1563000"
  },
  {
    "text": "let's now look at the 64-bit address space if we try to hide one byte the",
    "start": "1362030",
    "end": "1370040"
  },
  {
    "text": "entropy of this one bite is just 64 bits with Linux in the user space it uses 47",
    "start": "1370040",
    "end": "1379400"
  },
  {
    "text": "bits with addresses so entropy reducibility so 47 bits we try to hide",
    "start": "1379400",
    "end": "1388820"
  },
  {
    "text": "that one byte in the Linux head of state but you cannot just allocate one byte",
    "start": "1388820",
    "end": "1396740"
  },
  {
    "text": "and address space because memory allocation happens on a page granularity",
    "start": "1396740",
    "end": "1402470"
  },
  {
    "text": "which is 4096 bytes so you will be",
    "start": "1402470",
    "end": "1408320"
  },
  {
    "text": "allocating toothpowder bytes so it will consume 12 bits of the address space so",
    "start": "1408320",
    "end": "1414290"
  },
  {
    "text": "first entropy was 47 bits for one bite for 4096 bytes this entropy reduced to",
    "start": "1414290",
    "end": "1421250"
  },
  {
    "text": "35 bits okay of and Linux the default text size is 8",
    "start": "1421250",
    "end": "1431309"
  },
  {
    "text": "megabyte this consumes 2 to the power 23 bytes of",
    "start": "1431309",
    "end": "1436559"
  },
  {
    "text": "memory and which means entropy for one safe stack is for 24 bits in 64 30 so I",
    "start": "1436559",
    "end": "1454669"
  },
  {
    "text": "explained this to get to the thread spraying contact because thread spraying is about legitimately trying to form as",
    "start": "1454669",
    "end": "1464369"
  },
  {
    "text": "many threads as possible in the program and to reduce the entropy so we want to",
    "start": "1464369",
    "end": "1470669"
  },
  {
    "text": "have to entropy as low as possible what can we do so we can spawn another set if",
    "start": "1470669",
    "end": "1475830"
  },
  {
    "text": "we double the size of the stacks in the memory the entropy reduces by one bit if",
    "start": "1475830",
    "end": "1481619"
  },
  {
    "text": "we double size again it reduce it reduces the entropy of the sex by 1 bit again so if you can spawn like 128",
    "start": "1481619",
    "end": "1490289"
  },
  {
    "text": "thousand threads the entropy so finding",
    "start": "1490289",
    "end": "1495570"
  },
  {
    "text": "a stack becomes the entropy for sex becomes 7 bits which means that you",
    "start": "1495570",
    "end": "1505019"
  },
  {
    "text": "would need so the worst case the number of probes would be 128 probes the",
    "start": "1505019",
    "end": "1512690"
  },
  {
    "text": "interesting thing is that in Linux a map has an entropy of 40 bits which causes",
    "start": "1512690",
    "end": "1522869"
  },
  {
    "text": "to drop the entropy for the 120,000 threads and the Stags",
    "start": "1522869",
    "end": "1528720"
  },
  {
    "text": "to become their 0 bits so the idea is to",
    "start": "1528720",
    "end": "1537659"
  },
  {
    "text": "spawn lots of threads and just reduce adentro can increase the heat change because yeah we don't have pointers and",
    "start": "1537659",
    "end": "1544590"
  },
  {
    "text": "we want to find the safe stack so we instead",
    "start": "1544590",
    "end": "1549809"
  },
  {
    "text": "several applications so I will go over",
    "start": "1549809",
    "end": "1555509"
  },
  {
    "text": "Firefox a MySQL how we could spawn many",
    "start": "1555509",
    "end": "1560999"
  },
  {
    "text": "threats and spawn stacks so in Firefox",
    "start": "1560999",
    "end": "1567139"
  },
  {
    "start": "1563000",
    "end": "1700000"
  },
  {
    "text": "when you spawn when you start a dedicated web worker in JavaScript it",
    "start": "1567139",
    "end": "1572940"
  },
  {
    "text": "creates a new thread but the number of",
    "start": "1572940",
    "end": "1579840"
  },
  {
    "text": "threads the number of web workers is limited it is you can just create 20 web",
    "start": "1579840",
    "end": "1585989"
  },
  {
    "text": "workers per domain name and the web worker thread spec size is 2 megabytes",
    "start": "1585989",
    "end": "1593070"
  },
  {
    "text": "and it's entropy of this stack is 19 bits so how did I compute this the Linux",
    "start": "1593070",
    "end": "1601049"
  },
  {
    "text": "as I mentioned before has an entropy of 40 bits like m map for the stack because",
    "start": "1601049",
    "end": "1607889"
  },
  {
    "text": "the entropy of 40 bits 2 megabyte occupies 21 bits and at the state so the",
    "start": "1607889",
    "end": "1613440"
  },
  {
    "text": "stack has 90 bits of entropy if you are trying to hit this stack you would need",
    "start": "1613440",
    "end": "1621210"
  },
  {
    "text": "about 500,000 probes quite a lot",
    "start": "1621210",
    "end": "1627528"
  },
  {
    "text": "if you spawned 20 thread this number of",
    "start": "1627799",
    "end": "1632940"
  },
  {
    "text": "probes reduced to 30k 30,000 and entropy is 15 bit but we can do better we can",
    "start": "1632940",
    "end": "1643169"
  },
  {
    "text": "load more we can cause the page to have",
    "start": "1643169",
    "end": "1649469"
  },
  {
    "text": "more we can through iframes you can load",
    "start": "1649469",
    "end": "1656669"
  },
  {
    "text": "pages from other domains and and there is no limit on number of iframes in the",
    "start": "1656669",
    "end": "1663359"
  },
  {
    "text": "page so because you can have unlimited number of web workers in page um so for",
    "start": "1663359",
    "end": "1675470"
  },
  {
    "text": "sample if you spawn 16,000 webworkers",
    "start": "1675470",
    "end": "1680780"
  },
  {
    "text": "you would drop the entropy to five bits which is quite low and the number of",
    "start": "1680780",
    "end": "1687530"
  },
  {
    "text": "probes will be 32 probes and worst case within 32 probes to hit this create a",
    "start": "1687530",
    "end": "1697340"
  },
  {
    "text": "spec in MySQL a new thread is being",
    "start": "1697340",
    "end": "1706490"
  },
  {
    "start": "1700000",
    "end": "1838000"
  },
  {
    "text": "started with every network connection and the number of connections is 151",
    "start": "1706490",
    "end": "1713510"
  },
  {
    "text": "that's default the default configuration",
    "start": "1713510",
    "end": "1718270"
  },
  {
    "text": "the threads of excise is 256 kilobyte which has an entropy of 22 bits and if",
    "start": "1718870",
    "end": "1727340"
  },
  {
    "text": "you exhaustion on the connection so if you start 151 connections to MySQL you",
    "start": "1727340",
    "end": "1737630"
  },
  {
    "text": "will be having 151 more stacks in the other space and it's entropy reduced to",
    "start": "1737630",
    "end": "1745240"
  },
  {
    "text": "15 bits but as we assumed an attacker",
    "start": "1745240",
    "end": "1750880"
  },
  {
    "text": "has the arteries wide capability and in MySQL the number of connections is",
    "start": "1750880",
    "end": "1759740"
  },
  {
    "text": "regulated by a variable max connection so if the attacker changes this variable",
    "start": "1759740",
    "end": "1765159"
  },
  {
    "text": "it can create more connections to the server to mysql and start more thread",
    "start": "1765159",
    "end": "1773500"
  },
  {
    "text": "but it can also regulate the it can also modify the stack size because it's also",
    "start": "1773500",
    "end": "1779870"
  },
  {
    "text": "just in the data region of the MySQL binary so if an attacker sets the max",
    "start": "1779870",
    "end": "1787640"
  },
  {
    "text": "connections to 400 4096 connections and the stack size to 256 megabytes and",
    "start": "1787640",
    "end": "1796669"
  },
  {
    "text": "exhaust the connections it would reduce the entropy of the stack to 0 bits",
    "start": "1796669",
    "end": "1805659"
  },
  {
    "text": "so Linux use the 7s region in the address space so it would exhaust 7f",
    "start": "1805990",
    "end": "1813049"
  },
  {
    "text": "memory region and by well by exhausting",
    "start": "1813049",
    "end": "1822110"
  },
  {
    "text": "this region address so this address shown on slide 7 f 0 0 0 is a very high",
    "start": "1822110",
    "end": "1831260"
  },
  {
    "text": "chance of having locating a safe stack",
    "start": "1831260",
    "end": "1836590"
  },
  {
    "start": "1838000",
    "end": "1974000"
  },
  {
    "text": "so by spraying lots of threats and spawning stacks is welcome you weaken",
    "start": "1839650",
    "end": "1845270"
  },
  {
    "text": "and to chance to hit the safe sack will be increased but spraying might not",
    "start": "1845270",
    "end": "1851809"
  },
  {
    "text": "always be possible for example Firefox we were just lucky that by loading other",
    "start": "1851809",
    "end": "1857840"
  },
  {
    "text": "pages by I'm loading auto domain you would be able to start more thread and",
    "start": "1857840",
    "end": "1863150"
  },
  {
    "text": "in MySQL we could play with some variables in the data section but for",
    "start": "1863150",
    "end": "1870530"
  },
  {
    "text": "example nginx you might not be able to spawn more thread if it's not configured",
    "start": "1870530",
    "end": "1878409"
  },
  {
    "text": "as having as being multi-threaded for example for this there's a new approach",
    "start": "1878409",
    "end": "1887409"
  },
  {
    "text": "you can use allocation Oracle's quite interested let's see what it is so let's",
    "start": "1887409",
    "end": "1895820"
  },
  {
    "text": "look at the memory space again so we",
    "start": "1895820",
    "end": "1901580"
  },
  {
    "text": "want to find the safe stack but there are no pointers to it as we assumed in",
    "start": "1901580",
    "end": "1906679"
  },
  {
    "text": "the end we cannot spawn threads so how",
    "start": "1906679",
    "end": "1912620"
  },
  {
    "text": "can we find the safe stack so interesting to note is there are holes",
    "start": "1912620",
    "end": "1918080"
  },
  {
    "text": "in a memory space if we know the size",
    "start": "1918080",
    "end": "1923620"
  },
  {
    "text": "from the heap to the safe stack we can infer the location to save that because",
    "start": "1923620",
    "end": "1929080"
  },
  {
    "text": "we attack her in a threat model knows",
    "start": "1929080",
    "end": "1934390"
  },
  {
    "text": "the location of data and keep all this close so the location of the heap is not where",
    "start": "1934390",
    "end": "1940520"
  },
  {
    "text": "it ends if we can incur the size we can",
    "start": "1940520",
    "end": "1947470"
  },
  {
    "text": "size between hip and safe side we can get to the safe side by just adding the size to the hip location rating so in",
    "start": "1947470",
    "end": "1961130"
  },
  {
    "text": "this memory model for the process these three holes have a minimum and a maximum",
    "start": "1961130",
    "end": "1969250"
  },
  {
    "text": "size so what the idea is that we will",
    "start": "1969250",
    "end": "1978980"
  },
  {
    "text": "try to allocate large chunks of memory and and by doing this repeatedly we will",
    "start": "1978980",
    "end": "1988700"
  },
  {
    "text": "try to infer the size of the hole so we",
    "start": "1988700",
    "end": "1995299"
  },
  {
    "text": "will allocate some memory and if it succeeds we know the hole is probably",
    "start": "1995299",
    "end": "2001750"
  },
  {
    "text": "larger we will try again we will try a much larger size if it fails you know",
    "start": "2001750",
    "end": "2009010"
  },
  {
    "text": "this hole is smaller and we will repeat this until we find the right size of the",
    "start": "2009010",
    "end": "2017529"
  },
  {
    "text": "hole and this is done with a binary search it's quite bad so one primitive",
    "start": "2017529",
    "end": "2025929"
  },
  {
    "start": "2023000",
    "end": "2143000"
  },
  {
    "text": "so there are two primitives we define two primitives one primitive of allocation Oracle's is the ephemeral",
    "start": "2025929",
    "end": "2032049"
  },
  {
    "text": "allocation primitive where the allocated memory is short-lived",
    "start": "2032049",
    "end": "2037390"
  },
  {
    "text": "that gets allocated but shortly later get to be allocated and it looks as",
    "start": "2037390",
    "end": "2042760"
  },
  {
    "text": "follows so we control the size or for example malloc function it allocates some memory",
    "start": "2042760",
    "end": "2050470"
  },
  {
    "text": "the blade it frees this location this memory and then it replies the results",
    "start": "2050470",
    "end": "2058770"
  },
  {
    "text": "to the client",
    "start": "2058770",
    "end": "2062310"
  },
  {
    "text": "strategy is the client sends a request to the server server allocate some memory and then the server responds with",
    "start": "2064120",
    "end": "2073480"
  },
  {
    "text": "the result to the client and the client can infer what happened at the server so",
    "start": "2073480",
    "end": "2083290"
  },
  {
    "text": "let's say we induce what we insert the edge of the size of memory region middle",
    "start": "2083290",
    "end": "2090730"
  },
  {
    "text": "of the whole a with the short list primitive but we want to find we want to",
    "start": "2090730",
    "end": "2101020"
  },
  {
    "text": "know the size between the heap and say so we have to continue allocating and finding the size of this region but",
    "start": "2101020",
    "end": "2111820"
  },
  {
    "text": "because the allocated memory if we did with the short lift technique then we",
    "start": "2111820",
    "end": "2120580"
  },
  {
    "text": "get to be allocated so we need something to keep that region allocated because we want to continue we want to build on top",
    "start": "2120580",
    "end": "2127480"
  },
  {
    "text": "of it you won't have that we want to keep it there and then we want to do the",
    "start": "2127480",
    "end": "2133170"
  },
  {
    "text": "we want to probe again for the for a hole size and then we want it we want",
    "start": "2133170",
    "end": "2138850"
  },
  {
    "text": "this to end up in OB what can we do then",
    "start": "2138850",
    "end": "2145090"
  },
  {
    "start": "2143000",
    "end": "2207000"
  },
  {
    "text": "we can use the second primitive the persistent allocation primitive it's quite straightforward in this primitive",
    "start": "2145090",
    "end": "2152730"
  },
  {
    "text": "the the allocation we prevented the allocation of the memory and usually we",
    "start": "2152730",
    "end": "2163390"
  },
  {
    "text": "can transform the shortlist primitive into a long-lived primitive by for",
    "start": "2163390",
    "end": "2173170"
  },
  {
    "text": "example keeping the connection open or just not completing the request reply",
    "start": "2173170",
    "end": "2179610"
  },
  {
    "text": "communication so we can",
    "start": "2179610",
    "end": "2187089"
  },
  {
    "text": "keep the memory allocated for hole a and then we can use the shortly primitives",
    "start": "2187089",
    "end": "2194859"
  },
  {
    "text": "to get the size between heap and a safe stack once we have that we can compute",
    "start": "2194859",
    "end": "2202509"
  },
  {
    "text": "address of safe stack and then we and then we know we're safe thank you so how",
    "start": "2202509",
    "end": "2211630"
  },
  {
    "text": "can we do that and what do we need we want an easier way to allocate large",
    "start": "2211630",
    "end": "2220989"
  },
  {
    "text": "regions we need to find a way in the program and also to remove a way to",
    "start": "2220989",
    "end": "2227499"
  },
  {
    "text": "infer like what the server did so an",
    "start": "2227499",
    "end": "2232630"
  },
  {
    "text": "nginx you can what we found is you can change",
    "start": "2232630",
    "end": "2239979"
  },
  {
    "text": "the this variable in memory the pool size and when a new connection happens",
    "start": "2239979",
    "end": "2247299"
  },
  {
    "text": "it will use this full size to allocate",
    "start": "2247299",
    "end": "2253150"
  },
  {
    "text": "the memory and we found this by using a",
    "start": "2253150",
    "end": "2259630"
  },
  {
    "text": "taint propagation framework in which we",
    "start": "2259630",
    "end": "2264819"
  },
  {
    "text": "paint the whole memory when the server is idle and then we sent a connection to",
    "start": "2264819",
    "end": "2271960"
  },
  {
    "text": "the server and then we follow the taint propagation and as a change sink we set",
    "start": "2271960",
    "end": "2279339"
  },
  {
    "text": "the arguments of memory allocation functions and in this way we found the",
    "start": "2279339",
    "end": "2285279"
  },
  {
    "text": "full size and the",
    "start": "2285279",
    "end": "2291230"
  },
  {
    "text": "way to detect whether the allocation at the server field or not there are",
    "start": "2291230",
    "end": "2296740"
  },
  {
    "text": "different kind of options the one is the",
    "start": "2296740",
    "end": "2304400"
  },
  {
    "text": "server just replies with status it says",
    "start": "2304400",
    "end": "2309700"
  },
  {
    "text": "it gives you the page as you request it or just as something wrong happened or",
    "start": "2309700",
    "end": "2315619"
  },
  {
    "text": "it just so it can auto option is that",
    "start": "2315619",
    "end": "2323000"
  },
  {
    "text": "the server crashes so it just doesn't reply most of the connection closest or",
    "start": "2323000",
    "end": "2328580"
  },
  {
    "text": "it gives you when it succeeds it's it gives you okay it is and gives you the page or a site timing side channel can",
    "start": "2328580",
    "end": "2338960"
  },
  {
    "text": "happen so an example I will show you in which server we used such as a side",
    "start": "2338960",
    "end": "2347450"
  },
  {
    "text": "channel so in a side channel you measure the the time and then do the time for",
    "start": "2347450",
    "end": "2357080"
  },
  {
    "text": "the response and then if it's a if the server replied quick it means probably",
    "start": "2357080",
    "end": "2364780"
  },
  {
    "text": "everything it was fine well of course it depends on the server okay you can infer",
    "start": "2364780",
    "end": "2371090"
  },
  {
    "text": "like on response whether it succeed it or not nginx for example when the",
    "start": "2371090",
    "end": "2378859"
  },
  {
    "text": "allocation fails it closes the connection but like TBD it crashes so",
    "start": "2378859",
    "end": "2386980"
  },
  {
    "text": "the reason would likely to be crashes is that when allocates the large memory",
    "start": "2386980",
    "end": "2392960"
  },
  {
    "text": "region it tries to initialize this region imagine so it",
    "start": "2392960",
    "end": "2398990"
  },
  {
    "text": "allocate a large memory region and when allocate is not it's not a problem but",
    "start": "2398990",
    "end": "2405350"
  },
  {
    "text": "when it starts initiating initializing the memory it starts using physical",
    "start": "2405350",
    "end": "2413090"
  },
  {
    "text": "memory memory and if there's not enough physical memory it will run out of memory and then it will crash",
    "start": "2413090",
    "end": "2420460"
  },
  {
    "text": "but the nice thing is so if the location",
    "start": "2421539",
    "end": "2434349"
  },
  {
    "text": "fails the response will take long and if it succeeds it will be it will be much",
    "start": "2434349",
    "end": "2441399"
  },
  {
    "text": "faster and then light TPD restarts when",
    "start": "2441399",
    "end": "2447549"
  },
  {
    "text": "it crashes so the assumption with allocation",
    "start": "2447549",
    "end": "2452619"
  },
  {
    "text": "Oracle's is that a memory overcome it should be enabled but in some servers",
    "start": "2452619",
    "end": "2459299"
  },
  {
    "text": "this this feature is enabled because it also hosts like like big data software",
    "start": "2459299",
    "end": "2470559"
  },
  {
    "text": "like it is Hadoop or virtual virtualization in such cases memory",
    "start": "2470559",
    "end": "2476289"
  },
  {
    "text": "overcome it might be needed and interesting to notice then for example Android we learned recently that memory",
    "start": "2476289",
    "end": "2482499"
  },
  {
    "text": "overcommit is enabled by default and even if it is disabled an attacker can",
    "start": "2482499",
    "end": "2489369"
  },
  {
    "text": "still try it well might be able to do allocation might be executed occasional",
    "start": "2489369",
    "end": "2496359"
  },
  {
    "text": "Oracle primitives if you can control these flags of memory",
    "start": "2496359",
    "end": "2503189"
  },
  {
    "text": "memories being allocated for example it if it can set the map no reserve flag",
    "start": "2503189",
    "end": "2509649"
  },
  {
    "text": "and a map it doesn't look at the memory",
    "start": "2509649",
    "end": "2514779"
  },
  {
    "text": "over commit flag it just allocate the memory without reserving any physical",
    "start": "2514779",
    "end": "2522759"
  },
  {
    "text": "memory to conclude my talk implementing",
    "start": "2522759",
    "end": "2529239"
  },
  {
    "text": "safe sex without pointers to it might not be trivial as we have seen there are quite some pointers to it so some effort",
    "start": "2529239",
    "end": "2539739"
  },
  {
    "text": "is still needed to fix all of these pointers and SLR is maybe not a good",
    "start": "2539739",
    "end": "2547130"
  },
  {
    "start": "2541000",
    "end": "2592000"
  },
  {
    "text": "[Music] thing to rely on because there different",
    "start": "2547130",
    "end": "2553610"
  },
  {
    "text": "ways you can weaken it like first paying allocation Oracle's and we think that",
    "start": "2553610",
    "end": "2558830"
  },
  {
    "text": "proper isolation like software fault isolation or you put binaries on memory access might be a good way to protect",
    "start": "2558830",
    "end": "2567380"
  },
  {
    "text": "safe side and mitigate these attacks if",
    "start": "2567380",
    "end": "2572750"
  },
  {
    "text": "you are interesting we stock a below in these topics and you might also want to",
    "start": "2572750",
    "end": "2580940"
  },
  {
    "text": "read the papers that has more information about these things thank you for listening with your questions",
    "start": "2580940",
    "end": "2587900"
  },
  {
    "text": "ideally I would like [Applause]",
    "start": "2587900",
    "end": "2592829"
  }
]