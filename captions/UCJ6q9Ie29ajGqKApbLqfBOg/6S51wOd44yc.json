[
  {
    "start": "0",
    "end": "79000"
  },
  {
    "text": "hello everyone good morning welcome to the rise and fall of MC a bit about me",
    "start": "30",
    "end": "5790"
  },
  {
    "text": "my name is Talley Berman I'm a researcher focused on reverse",
    "start": "5790",
    "end": "11490"
  },
  {
    "text": "engineering and I mostly do low-level stuff for the past two years I was the",
    "start": "11490",
    "end": "17130"
  },
  {
    "text": "head of the research team at in silo and there I worked on processed doppelganger",
    "start": "17130",
    "end": "23160"
  },
  {
    "text": "and atom bombing which are attack techniques on Windows and currently I'm one of the founders at Pilar iam which",
    "start": "23160",
    "end": "29880"
  },
  {
    "text": "is a security company that provides software research services to big",
    "start": "29880",
    "end": "35100"
  },
  {
    "text": "companies governments and startups all over the world and today we're gonna be",
    "start": "35100",
    "end": "41040"
  },
  {
    "text": "talking about MC we're gonna start off by talking about an introduction we're",
    "start": "41040",
    "end": "46200"
  },
  {
    "text": "going to talk about script based threats and file of threats we're going to talk about obfuscation and the cat and mouse",
    "start": "46200",
    "end": "51840"
  },
  {
    "text": "game that attackers and defenders play in the scripting domain we're gonna take a look at at AMC from the developers",
    "start": "51840",
    "end": "59850"
  },
  {
    "text": "side from the app developer side and from the security vendors perspective then we're gonna take a look at building",
    "start": "59850",
    "end": "67020"
  },
  {
    "text": "and providing your own AMC provider and once we know all this we're gonna take a",
    "start": "67020",
    "end": "73080"
  },
  {
    "text": "look at bypassing MC because this is black hat and we're gonna really try to",
    "start": "73080",
    "end": "79049"
  },
  {
    "start": "79000",
    "end": "79000"
  },
  {
    "text": "think if MC is the tool that we need to deal with obfuscation and if this is a",
    "start": "79049",
    "end": "85530"
  },
  {
    "text": "long-term solution or not so script based threats well I feel like for the",
    "start": "85530",
    "end": "93150"
  },
  {
    "start": "89000",
    "end": "89000"
  },
  {
    "text": "past five or six years every single article that mentions script based malware tries to make it seem like",
    "start": "93150",
    "end": "99060"
  },
  {
    "text": "there's a trend of script based malware oh I think it's not really a trend anymore I think it's pretty mainstream",
    "start": "99060",
    "end": "105829"
  },
  {
    "text": "so I think it's safe to say that more threats today contain some kind of",
    "start": "105829",
    "end": "111360"
  },
  {
    "text": "script based component in them and the reasons for this are that first of all",
    "start": "111360",
    "end": "117450"
  },
  {
    "text": "PowerShell is available or BB script or on Linux you have bash is available in",
    "start": "117450",
    "end": "123030"
  },
  {
    "text": "all platforms on all machines it's vastly used in domain environments right you have system administrators who love",
    "start": "123030",
    "end": "129890"
  },
  {
    "text": "setting up your environment by using PowerShell Square and scripts are faster to develop and",
    "start": "129890",
    "end": "136530"
  },
  {
    "text": "there's a minimal skill set needed to to achieve decently function in malware now",
    "start": "136530",
    "end": "146330"
  },
  {
    "text": "another reason that they choose to use scripts is that scripts are text and",
    "start": "146330",
    "end": "152340"
  },
  {
    "text": "text is easier to obfuscate than machine code and empirically anti viruses and",
    "start": "152340",
    "end": "157530"
  },
  {
    "text": "security products have had trouble monitoring scripts compared to natively",
    "start": "157530",
    "end": "163860"
  },
  {
    "text": "compiled code and this is probably because when you have an engine such as",
    "start": "163860",
    "end": "169620"
  },
  {
    "text": "power shell or the dotnet framework or Java for that matter when you have an engine that's running code interpreted",
    "start": "169620",
    "end": "179300"
  },
  {
    "text": "it's very hard to tell where the engine ends and where the code begins and this makes it more difficult than that when",
    "start": "179300",
    "end": "186870"
  },
  {
    "text": "you try to inspect machine code that's running that's compiled natively and then it's very clear where the image ends and",
    "start": "186870",
    "end": "192360"
  },
  {
    "text": "where the operating system begins so Silas is another buzzword that's been",
    "start": "192360",
    "end": "198959"
  },
  {
    "text": "thrown around a lot basically a file always has to run if we're gonna if we're gonna survive a reboot except for",
    "start": "198959",
    "end": "205830"
  },
  {
    "text": "very special cases like if you find a vulnerability and DFS driver and you're able to get the kernel to run code while",
    "start": "205830",
    "end": "211170"
  },
  {
    "text": "it's parsing the raw NTFS data well okay that will qualify as truly truly file us but in all other scenarios we're talking",
    "start": "211170",
    "end": "217410"
  },
  {
    "text": "about abusing a signed executable such as powershell for that matter and having",
    "start": "217410",
    "end": "222630"
  },
  {
    "text": "it run your code and then your code is probably stored somewhere in the registry or in a file but there is no",
    "start": "222630",
    "end": "229470"
  },
  {
    "text": "file to scan or for the antivirus for that matter now a very simple example",
    "start": "229470",
    "end": "235410"
  },
  {
    "text": "you can see is here a command line of powershell running a download string",
    "start": "235410",
    "end": "241680"
  },
  {
    "text": "function to download something code from paste bin and then executing it at runtime so the malware comes from the",
    "start": "241680",
    "end": "248100"
  },
  {
    "text": "internet but the powershell is the one downloading it and running it without putting it on disk and there's not much",
    "start": "248100",
    "end": "254910"
  },
  {
    "text": "for a security product to scan at this point right now obfuscation according to",
    "start": "254910",
    "end": "260700"
  },
  {
    "start": "259000",
    "end": "259000"
  },
  {
    "text": "Wikipedia and software development application is the deliberate act of creating source or",
    "start": "260700",
    "end": "265970"
  },
  {
    "text": "chin coat that is difficult for humans to understand well I do agree with that but when you're talking about malware",
    "start": "265970",
    "end": "271310"
  },
  {
    "text": "scripting and obfuscation you're not just you're just trying to avoid comprehension by humans you're trying to",
    "start": "271310",
    "end": "277850"
  },
  {
    "text": "avoid the inspection of security products that are trying to understand what it is that you're trying to run now",
    "start": "277850",
    "end": "284240"
  },
  {
    "start": "284000",
    "end": "284000"
  },
  {
    "text": "there's a cat-and-mouse game a very simple one that goes on between attackers and defenders in the scripting",
    "start": "284240",
    "end": "289250"
  },
  {
    "text": "world now start with a simple example [Music] let's say I have a function that runs",
    "start": "289250",
    "end": "297280"
  },
  {
    "text": "right host malware which is basically like a hello world for PowerShell that prints out malware so a simple signature",
    "start": "297280",
    "end": "304400"
  },
  {
    "text": "would be okay well if I see right host single quote malware single quote then that is a malware so a simple bypass",
    "start": "304400",
    "end": "310730"
  },
  {
    "text": "would be to change the single quote to a double quote right and then the antivirus would say okay well I'm gonna",
    "start": "310730",
    "end": "316550"
  },
  {
    "text": "ignore the single quote for me as far as I'm concerned it could be a single quote double quote or any any other character",
    "start": "316550",
    "end": "321560"
  },
  {
    "text": "and so this is a simple bypass and this can be again a simple signature for that",
    "start": "321560",
    "end": "327080"
  },
  {
    "text": "and this can be bypassed by using screen string concatenation and this game can continue on and on we can use base64",
    "start": "327080",
    "end": "332990"
  },
  {
    "text": "encoding and then the antivirus can decide if it wants to either emulate the",
    "start": "332990",
    "end": "339230"
  },
  {
    "text": "basics T for decoding or to create a signature for the actual base64 data both things are quite easy to bypass and",
    "start": "339230",
    "end": "346400"
  },
  {
    "text": "then malware authors begin to use things like XOR based encoding so antivirus is",
    "start": "346400",
    "end": "353720"
  },
  {
    "text": "implement an emulation for that until finally malware authors realized you",
    "start": "353720",
    "end": "358940"
  },
  {
    "start": "357000",
    "end": "357000"
  },
  {
    "text": "could just really run a encryption",
    "start": "358940",
    "end": "364070"
  },
  {
    "text": "algorithm because PowerShell that allows you access to all types of encryption libraries that are available to Nets so",
    "start": "364070",
    "end": "369380"
  },
  {
    "text": "you could just simply use AES encryption for that matter and and you're able to execute whatever you want and for for",
    "start": "369380",
    "end": "376130"
  },
  {
    "text": "the antivirus this would be very very hard to brute-force probably impossible",
    "start": "376130",
    "end": "381440"
  },
  {
    "text": "and we can as antivirus products we can try to identify the key in the algorithm",
    "start": "381440",
    "end": "387440"
  },
  {
    "text": "but what if the key comes from like file or registry or the Internet it becomes very hard to do reliably so the point is",
    "start": "387440",
    "end": "395479"
  },
  {
    "text": "a bit of creative thinking and we can slip past the most advanced detection algorithm now at this point antivirus solutions",
    "start": "395479",
    "end": "404090"
  },
  {
    "start": "400000",
    "end": "400000"
  },
  {
    "text": "begin to write signatures for the opposite getters themselves instead of instead of the actual malware and",
    "start": "404090",
    "end": "409220"
  },
  {
    "text": "according to Lee Holmes from Microsoft he says that in fact it that is what it accounts for the vast majority of",
    "start": "409220",
    "end": "414920"
  },
  {
    "text": "signatures for script based malware now if we have an obfuscation that is as trivial as the one we saw before which",
    "start": "414920",
    "end": "420890"
  },
  {
    "text": "is here again then trying to create a signature for something like this would generate an unacceptable number of false",
    "start": "420890",
    "end": "426350"
  },
  {
    "text": "positives at this point we have anti-malware scan interface MC or Amos",
    "start": "426350",
    "end": "432080"
  },
  {
    "text": "ID which enters the picture now there's a long text on MSDN that describes the",
    "start": "432080",
    "end": "437120"
  },
  {
    "text": "purpose of this I'm gonna save you the trouble of reading it and I'll explain so MC or anti-malware scan interface was",
    "start": "437120",
    "end": "443600"
  },
  {
    "text": "introduced to help AV vendors deal with script based threats it's a mechanism",
    "start": "443600",
    "end": "448910"
  },
  {
    "text": "that standardizes the scanning of content right so any app can request any",
    "start": "448910",
    "end": "454640"
  },
  {
    "text": "content to be scanned it can be a file can be text to be a buffer and any security vendor can implement an MC",
    "start": "454640",
    "end": "462710"
  },
  {
    "text": "provider and register to receive those scans so basically we have the OS becoming like a middleman between application developers and antivirus",
    "start": "462710",
    "end": "469910"
  },
  {
    "text": "developers where any app can request content to be scanned and any antivirus",
    "start": "469910",
    "end": "475850"
  },
  {
    "text": "can scan that contact and return and answer to the app now the supported",
    "start": "475850",
    "end": "481820"
  },
  {
    "start": "481000",
    "end": "481000"
  },
  {
    "text": "vendors for MC are Windows Defender Windows Defender ATP which is the paid version of it which is Microsoft so",
    "start": "481820",
    "end": "488150"
  },
  {
    "text": "that's not a big surprise but also ESET supports it AVG and BitDefender and the funny thing is that if you google",
    "start": "488150",
    "end": "494500"
  },
  {
    "text": "BitDefender and MC the first thing you see is how do I disable MC service provider so that's kind of funny joke",
    "start": "494500",
    "end": "501560"
  },
  {
    "text": "but it's it's really the case so let's take a look at MC from a developer's",
    "start": "501560",
    "end": "507620"
  },
  {
    "text": "perspective right let's get into the mindset of someone who is writing an app such as the creators or PowerShell and",
    "start": "507620",
    "end": "513440"
  },
  {
    "text": "they want to use MC as clients they want to send requests to be scanned so we",
    "start": "513440",
    "end": "520280"
  },
  {
    "text": "start off by looking at the documentation on MSDN right and we see that the documentation is split into enumerations functions and interfaces",
    "start": "520280",
    "end": "526850"
  },
  {
    "text": "now out of the immunes we only worry about single enumeration which is the m-series",
    "start": "526850",
    "end": "532630"
  },
  {
    "start": "529000",
    "end": "529000"
  },
  {
    "text": "now this is just a list of different values that a scanner can return for a",
    "start": "532630",
    "end": "538000"
  },
  {
    "text": "specific contents and now the different values that we're gonna be discussing are the result clean which means I've",
    "start": "538000",
    "end": "544660"
  },
  {
    "text": "scanned it and it's clean it's not a malware result not detected which is the neutral value it's I've scanned it I",
    "start": "544660",
    "end": "550930"
  },
  {
    "text": "don't know that it's a Mauer I don't know that it's not a malware so I haven't detected anything and then results detected which is I've detected",
    "start": "550930",
    "end": "557320"
  },
  {
    "text": "a malware right then we have the functions now we have a bunch of different functions here",
    "start": "557320",
    "end": "562660"
  },
  {
    "start": "560000",
    "end": "560000"
  },
  {
    "text": "most of them deal with initialization and uninitialized a tion but the interesting two functions that",
    "start": "562660",
    "end": "568209"
  },
  {
    "text": "we're looking at our scan buffer and scan string which are two functions that an app developer can use to requests",
    "start": "568209",
    "end": "574690"
  },
  {
    "text": "content to be scanned now if you take a look at scan buffer we see that it accepts two parameters that describe the",
    "start": "574690",
    "end": "581019"
  },
  {
    "text": "buffer and an output result so we have the buffer pointer which points to a buffer to be scanned we have the length",
    "start": "581019",
    "end": "587140"
  },
  {
    "text": "parameter which is the length of the buffer and then we have the result so that's that now the result will be the",
    "start": "587140",
    "end": "594519"
  },
  {
    "text": "MC result as we discussed earlier one of the values that you can choose detected not detected and clean and according to",
    "start": "594519",
    "end": "603160"
  },
  {
    "text": "the documentation an app should use MC result is malware to decide if the",
    "start": "603160",
    "end": "611320"
  },
  {
    "text": "result that it received is a malware or not another function is the MC scan",
    "start": "611320",
    "end": "616329"
  },
  {
    "text": "string which is exactly the same function except in this case we receive a string instead of a buffer and a",
    "start": "616329",
    "end": "621370"
  },
  {
    "text": "length which means it's assuming a null terminated string and it seems like a sort of a wrapper around MC scan buffer",
    "start": "621370",
    "end": "628120"
  },
  {
    "text": "and if we take a look at it in code we can actually see that we have a bit of error checking here and here but mainly",
    "start": "628120",
    "end": "636940"
  },
  {
    "text": "what this does is simply calculate the length of the input string and then",
    "start": "636940",
    "end": "642730"
  },
  {
    "text": "calls MC scan buffer with the buffer and",
    "start": "642730",
    "end": "648089"
  },
  {
    "text": "the length that was calculated so for our purposes MC scan string is the same",
    "start": "648089",
    "end": "655630"
  },
  {
    "text": "as MC scan buffer and as for MC result is malware which we're supposed to use to check if we're supposed to block",
    "start": "655630",
    "end": "661390"
  },
  {
    "text": "content well this is just a macro from MCH just check if its larger than MC result",
    "start": "661390",
    "end": "668410"
  },
  {
    "text": "detected so now that we know how a",
    "start": "668410",
    "end": "675940"
  },
  {
    "text": "developer would go about using MC we need to take a look at how PowerShell",
    "start": "675940",
    "end": "681910"
  },
  {
    "text": "uses MC so let's take a look at PowerShell right PowerShell is where theoretical EMT is most effective",
    "start": "681910",
    "end": "687490"
  },
  {
    "text": "because most of our threats are either in PowerShell or VB script but PowerShell is open source so we can take",
    "start": "687490",
    "end": "692710"
  },
  {
    "text": "a look at the code online and just figure out how it was implemented and there it's gonna be very easy to inspect",
    "start": "692710",
    "end": "699490"
  },
  {
    "text": "how AMC was integrated so I'm gonna open up PowerShell on github and as you can",
    "start": "699490",
    "end": "706810"
  },
  {
    "text": "see we're looking at",
    "start": "706810",
    "end": "709560"
  },
  {
    "text": "at security support that c-sharp",
    "start": "713400",
    "end": "718490"
  },
  {
    "text": "and at the bottom we have a simple class called MC native methods which will",
    "start": "720180",
    "end": "725310"
  },
  {
    "text": "export all the different methods that MC DLL exports so we have MC initialize",
    "start": "725310",
    "end": "731490"
  },
  {
    "text": "uninitialized scan buffer scan string etc this is a very simple thin wrapper around the MC API from MC DLL and if we",
    "start": "731490",
    "end": "740520"
  },
  {
    "text": "look above we have a more thick more high-level wrapper that's called MC utils which has an init function now",
    "start": "740520",
    "end": "748620"
  },
  {
    "text": "this init function is going to call MC initialize and if the initialization process fails we're going to put MC in",
    "start": "748620",
    "end": "755760"
  },
  {
    "text": "it failed equals true this is very important because we're gonna come back to it later now at this point we can",
    "start": "755760",
    "end": "764430"
  },
  {
    "text": "take a look at the function scan content which on UNIX just returns the neutral result not detected but on Windows it",
    "start": "764430",
    "end": "772709"
  },
  {
    "text": "calls win scan content and if we take a look at win scan content we see two things happening the first is we're",
    "start": "772709",
    "end": "778410"
  },
  {
    "text": "checking if the initialization failed and if it failed we will return result not detected so if a scan occurs and it",
    "start": "778410",
    "end": "785790"
  },
  {
    "text": "failed then we're going to say okay well I can't I can't scan so I haven't",
    "start": "785790",
    "end": "792150"
  },
  {
    "text": "detected anything this is the neutral result now the problem here is that we're assuming the PowerShell code is",
    "start": "792150",
    "end": "798360"
  },
  {
    "text": "assuming that whatever the provider answered whether it's a it's a it's a",
    "start": "798360",
    "end": "807050"
  },
  {
    "text": "return a valid return code that says I've scanned it and it's not it's not malicious or I had trouble scanning it",
    "start": "807050",
    "end": "813540"
  },
  {
    "text": "or I couldn't even initialize MC because of some attacker method that we're gonna",
    "start": "813540",
    "end": "818580"
  },
  {
    "text": "see later at this point PowerShell is going to keep going as if an MC didn't exist so MT is like a best-effort thing",
    "start": "818580",
    "end": "825450"
  },
  {
    "text": "but if there's a problem though it's not going to be propagated to to the user okay and then the last thing that",
    "start": "825450",
    "end": "831570"
  },
  {
    "text": "happens in scan content is we call the scan string method and whatever the",
    "start": "831570",
    "end": "839250"
  },
  {
    "text": "result is we return back to the caller and so that is the wrappers of MC in",
    "start": "839250",
    "end": "846779"
  },
  {
    "text": "PowerShell right now we can take a look at the code in",
    "start": "846779",
    "end": "854380"
  },
  {
    "text": "PowerShell that really compiles code and that actually calls these MC wrappers so",
    "start": "854380",
    "end": "862420"
  },
  {
    "text": "as we can see whenever we want to run a command in PowerShell we need to compile",
    "start": "862420",
    "end": "867550"
  },
  {
    "text": "the text into something that can be executed and this function called really compile which is called by other functions is the function that is in",
    "start": "867550",
    "end": "875170"
  },
  {
    "text": "charge of compiling as if you see here we have the call to create the compiler",
    "start": "875170",
    "end": "881589"
  },
  {
    "text": "and the call to the function compile but right before this we have perform",
    "start": "881589",
    "end": "887230"
  },
  {
    "text": "security checks if we take a look at this we can see simply a call to MC",
    "start": "887230",
    "end": "893949"
  },
  {
    "text": "utils as we saw before scan content all right and if the result is result",
    "start": "893949",
    "end": "901089"
  },
  {
    "text": "detected which is malware then we're",
    "start": "901089",
    "end": "906250"
  },
  {
    "text": "going to raise a parse exception saying",
    "start": "906250",
    "end": "911500"
  },
  {
    "text": "that the script contained malicious content but if any other result is",
    "start": "911500",
    "end": "916540"
  },
  {
    "text": "returned whether it be not detected or even a value that's larger than result detected",
    "start": "916540",
    "end": "922930"
  },
  {
    "text": "which according to documentation should be considered malicious PowerShell is",
    "start": "922930",
    "end": "928660"
  },
  {
    "text": "going to ignore that okay so now that we",
    "start": "928660",
    "end": "935199"
  },
  {
    "text": "know how MC works from a developer we saw how it was integrated into PowerShell in its source code we can",
    "start": "935199",
    "end": "942040"
  },
  {
    "text": "take a look at how MC looks from a security providers perspective what we",
    "start": "942040",
    "end": "949720"
  },
  {
    "text": "have here is we have three main interfaces we have the MC stream we have the anti-malware and the anti-malware",
    "start": "949720",
    "end": "955930"
  },
  {
    "text": "provider now the MC stream is a very simple concept it's a wrapper around an",
    "start": "955930",
    "end": "961930"
  },
  {
    "text": "object that needs to be scanned so whenever we want to scan something when everyone will request to scan this our",
    "start": "961930",
    "end": "967389"
  },
  {
    "text": "scanner will receive a MC stream object on which it can perform the scanning now",
    "start": "967389",
    "end": "973240"
  },
  {
    "text": "this is a and this object has a read function and theoretically we're supposed to use this read function in",
    "start": "973240",
    "end": "979480"
  },
  {
    "text": "order to to read the content from the buffer that was requested to be",
    "start": "979480",
    "end": "984639"
  },
  {
    "text": "scanned so when I tried to implement my own provider to kind of learn how this works I was trying to use the read",
    "start": "984639",
    "end": "992829"
  },
  {
    "text": "function and it kept failing again and again so I took a look at with my debugger and I saw that I found the",
    "start": "992829",
    "end": "999999"
  },
  {
    "text": "address of the function that I'm calling the read function which is of a class am c buffer stream and if we take a look at",
    "start": "999999",
    "end": "1008129"
  },
  {
    "text": "this function we can see that not much is going on here there is a logging that takes place and then we return error not",
    "start": "1008129",
    "end": "1016589"
  },
  {
    "text": "implemented so this is a nice little concept it's a documented function it doesn't use any things it's not",
    "start": "1016589",
    "end": "1022949"
  },
  {
    "text": "implemented but there are ways around this now as for anti-malware and anti-malware provider well reading the",
    "start": "1022949",
    "end": "1029038"
  },
  {
    "text": "description on MSDN I really couldn't tell the difference but after looking at a diagram that we're gonna take a look",
    "start": "1029039",
    "end": "1034140"
  },
  {
    "text": "at in a minute I was able to kind of understand what the difference is and then that became much more clear when I",
    "start": "1034140",
    "end": "1039870"
  },
  {
    "text": "looked at the code itself so the",
    "start": "1039870",
    "end": "1046199"
  },
  {
    "text": "anti-malware provider interface that is the one that is actually pretty clear",
    "start": "1046199",
    "end": "1052010"
  },
  {
    "text": "the anti-malware provider is the object that the anti-malware needs to provide",
    "start": "1052010",
    "end": "1057840"
  },
  {
    "text": "the operating system in order to process scans now it needs to export two functions a scan function well that",
    "start": "1057840",
    "end": "1064169"
  },
  {
    "text": "makes sense it needs to scan things and a display name function which I haven't figured out what it's used for but it's",
    "start": "1064169",
    "end": "1069720"
  },
  {
    "text": "there and I forced Windows the defenders MC provider to call its own display name",
    "start": "1069720",
    "end": "1075570"
  },
  {
    "text": "function and the name was Windows Defender big surprise and then we get to",
    "start": "1075570",
    "end": "1084059"
  },
  {
    "start": "1083000",
    "end": "1083000"
  },
  {
    "text": "talk about the architecture after all the pieces are kind of in place let's take a look at the big picture so we",
    "start": "1084059",
    "end": "1090480"
  },
  {
    "text": "have PowerShell right calling a masseuse can buffer or MC scan string and anti",
    "start": "1090480",
    "end": "1097679"
  },
  {
    "text": "scan buffer is can string and also the initialization functions they all work with a class called anti-malware that we",
    "start": "1097679",
    "end": "1103409"
  },
  {
    "text": "saw before now this class is an internal class for for am c and i honestly don't",
    "start": "1103409",
    "end": "1109380"
  },
  {
    "text": "know why it's on MSDN but it's implemented entirely in MC DLL and what this class is in charge of doing is",
    "start": "1109380",
    "end": "1115550"
  },
  {
    "text": "it's in charge of managing all the different all the different providers that are loaded all the different",
    "start": "1115550",
    "end": "1122000"
  },
  {
    "text": "antivirus providers that are loaded because you can have more than one provider that that just processes the",
    "start": "1122000",
    "end": "1127460"
  },
  {
    "text": "requests now this anti-malware will be in charge of loading the various providers and",
    "start": "1127460",
    "end": "1135380"
  },
  {
    "text": "then dispatching the scans to them when the scans arrive and then we finally have the bottom layer which is the",
    "start": "1135380",
    "end": "1140780"
  },
  {
    "text": "provider itself and that layer is for example could be Windows defenders provider or it could be my own and here",
    "start": "1140780",
    "end": "1147860"
  },
  {
    "text": "we also have the diagram of how Windows Defender decided to implement it so the RPC the scan to the service which",
    "start": "1147860",
    "end": "1154880"
  },
  {
    "text": "creates the scan and then finally returns the result back so now we know",
    "start": "1154880",
    "end": "1161780"
  },
  {
    "text": "all the different interfaces the stream the anti-malware and the anti-malware provider now we want to move on to build",
    "start": "1161780",
    "end": "1169850"
  },
  {
    "start": "1168000",
    "end": "1168000"
  },
  {
    "text": "our own provider because first of all it's something that we'd like to be able to do it for security products and",
    "start": "1169850",
    "end": "1175220"
  },
  {
    "text": "second of all it's good to be able to do that in order to try to play around with AMC and to learn how it works and what",
    "start": "1175220",
    "end": "1181040"
  },
  {
    "text": "we can do with it so we know what we need to implement the anti-malware",
    "start": "1181040",
    "end": "1186200"
  },
  {
    "text": "provider the question is how do we implement it well anti-malware provider is a comm interface and Microsoft does",
    "start": "1186200",
    "end": "1193100"
  },
  {
    "text": "provide frameworks or implementing comm interfaces so there's no need to know",
    "start": "1193100",
    "end": "1198430"
  },
  {
    "text": "under the hood how it really works and if you want to go down this road you can use MC IDL from the Windows SDK to",
    "start": "1198430",
    "end": "1204740"
  },
  {
    "text": "create your solution and to implement your own provider and just you have to implement the scan and the display name",
    "start": "1204740",
    "end": "1210200"
  },
  {
    "text": "method and that will work but I do encourage you to forget about the frameworks and implement everything yourself you",
    "start": "1210200",
    "end": "1216800"
  },
  {
    "text": "will learn a lot more I can promise you that and later go back and use the frameworks so the best resource for this",
    "start": "1216800",
    "end": "1222710"
  },
  {
    "text": "by far is this link right here and also I'll be releasing my code samples that",
    "start": "1222710",
    "end": "1228590"
  },
  {
    "text": "you guys can check out and together with both resources I'm sure you can follow along very well so registering a",
    "start": "1228590",
    "end": "1234950"
  },
  {
    "text": "provider well we built our comm object and registered our comm object which is all documented behavior and we know how",
    "start": "1234950",
    "end": "1241370"
  },
  {
    "text": "to do it we now need to register it as an AMC provider but unfortunately MC provider registration",
    "start": "1241370",
    "end": "1248030"
  },
  {
    "text": "is undocumented but that's not going to stop us of course so let's take a look at MC DLL now I've said that MC is an",
    "start": "1248030",
    "end": "1259690"
  },
  {
    "text": "anti-malware class has an anti-malware class that is in charge of loading the providers so the loading is going to",
    "start": "1259690",
    "end": "1266480"
  },
  {
    "text": "take place in the function called final construct right here so let's take a",
    "start": "1266480",
    "end": "1271880"
  },
  {
    "text": "look at this function now as we can see",
    "start": "1271880",
    "end": "1278330"
  },
  {
    "text": "here we can see a call to a function that have labeled MC load providers now",
    "start": "1278330",
    "end": "1284000"
  },
  {
    "text": "this function right here will be passed a list of providers a list of provider",
    "start": "1284000",
    "end": "1291350"
  },
  {
    "text": "Goods and the number of providers and actually these are all output parameters that once this function loads all of the",
    "start": "1291350",
    "end": "1298550"
  },
  {
    "text": "different providers it will return back to me all the different providers that I can then work with inside this",
    "start": "1298550",
    "end": "1305300"
  },
  {
    "text": "anti-malware class now if we take a look at this function the load providers function we can see the first thing is a",
    "start": "1305300",
    "end": "1313370"
  },
  {
    "text": "reference to this string right here which is software Microsoft MC providers this is a pretty encouraging hint that",
    "start": "1313370",
    "end": "1320900"
  },
  {
    "text": "we're in the right place we're looking at the register key where you would register a provider and as you can see",
    "start": "1320900",
    "end": "1329000"
  },
  {
    "text": "here we have a another class that is the gooood enumerator and we're calling it",
    "start": "1329000",
    "end": "1335960"
  },
  {
    "text": "with start enumerator so what this class is in charge of doing it's going to enumerate this registry key that we just",
    "start": "1335960",
    "end": "1341690"
  },
  {
    "text": "talked about and it's going to enumerate all the different goods which are IDs that represent the different providers",
    "start": "1341690",
    "end": "1347330"
  },
  {
    "text": "that are registered underneath the class root read a string key so if we move on",
    "start": "1347330",
    "end": "1354410"
  },
  {
    "text": "down we can see that after the the the initialization takes place we call the",
    "start": "1354410",
    "end": "1361640"
  },
  {
    "text": "function next gooood which will bring the next do it in the list and once we have this good we're going to call a",
    "start": "1361640",
    "end": "1370580"
  },
  {
    "text": "function that I've labeled load provider which receives the gooood to load",
    "start": "1370580",
    "end": "1376090"
  },
  {
    "text": "and the provider that was loaded and if we take a look at load provider well we",
    "start": "1376090",
    "end": "1381340"
  },
  {
    "text": "can see that it does a few simple steps one is to get the string from the class",
    "start": "1381340",
    "end": "1387490"
  },
  {
    "text": "ID so it can convert the GUI to a string and then using string formatting it'll",
    "start": "1387490",
    "end": "1392710"
  },
  {
    "text": "access the registry so it's going to access the class ID and then in proc",
    "start": "1392710",
    "end": "1398890"
  },
  {
    "text": "Server 32 where the path of my provider is going to be stored then we'll",
    "start": "1398890",
    "end": "1405190"
  },
  {
    "text": "actually do the registry access which is the Reg gate value and finally after a",
    "start": "1405190",
    "end": "1411549"
  },
  {
    "text": "bit of processing we're going to call load library on our provider after that",
    "start": "1411549",
    "end": "1417610"
  },
  {
    "text": "we have a bit of common Ischl ization which we're not going to go into but when we go back to the function that's",
    "start": "1417610",
    "end": "1422890"
  },
  {
    "text": "in charge of loading all the different providers then we can see that there are two more things that take place one is",
    "start": "1422890",
    "end": "1432070"
  },
  {
    "text": "to copy the loaded provider into the list of loaded providers and two is",
    "start": "1432070",
    "end": "1439500"
  },
  {
    "text": "increment the number of loaded providers that's pretty simple now this takes this",
    "start": "1439500",
    "end": "1445090"
  },
  {
    "text": "takes place in a loop for each gooood that is enumerated in the registry underneath the MC registry key that we",
    "start": "1445090",
    "end": "1452049"
  },
  {
    "text": "saw before so now we know that registering a provider is broken down",
    "start": "1452049",
    "end": "1459520"
  },
  {
    "text": "into two steps the first step is registering a common object a normal fashion underneath the classes root",
    "start": "1459520",
    "end": "1464529"
  },
  {
    "text": "class ID registry key and the second part is creating a key with our providers good under local machine",
    "start": "1464529",
    "end": "1472120"
  },
  {
    "text": "software Microsoft MC providers now once we do that we can run PowerShell in",
    "start": "1472120",
    "end": "1479130"
  },
  {
    "text": "PowerShell and our provider sorry it was going to receive every single request",
    "start": "1479130",
    "end": "1484630"
  },
  {
    "text": "that PowerShell sends which means every single command that is entered explicitly or implicitly will arrive at",
    "start": "1484630",
    "end": "1491049"
  },
  {
    "text": "our provider for scanning so let's take a look at this",
    "start": "1491049",
    "end": "1496320"
  },
  {
    "text": "so what I have here is a virtual machine right now my provider is not registered",
    "start": "1497090",
    "end": "1502399"
  },
  {
    "text": "I'm going to that's a bit slow what I'm",
    "start": "1502399",
    "end": "1509659"
  },
  {
    "text": "going to do is I'm going to check if my provider is installed with a command line then I'm going to install my",
    "start": "1509659",
    "end": "1516169"
  },
  {
    "text": "provider check that it's installed again and see that it's it's now going to be installed and then we're gonna see it in",
    "start": "1516169",
    "end": "1522919"
  },
  {
    "text": "action working [Music]",
    "start": "1522919",
    "end": "1530200"
  },
  {
    "text": "okay there we go some resolution problems so",
    "start": "1531680",
    "end": "1539039"
  },
  {
    "text": "as you can see we can see the Windows Defender good which starts with two seven and we can see that our gooood was",
    "start": "1539039",
    "end": "1545850"
  },
  {
    "text": "nowhere to be found right so now I'm going to install my provider and now my",
    "start": "1545850",
    "end": "1555360"
  },
  {
    "text": "provider is installed and once I run PowerShell well what my provider does",
    "start": "1555360",
    "end": "1560940"
  },
  {
    "text": "it'll simply debug print all the scan requests so we can see them with the bug view so PowerShell is run and we can see",
    "start": "1560940",
    "end": "1570120"
  },
  {
    "text": "my provider has started printing and that's clear this and if we go for for",
    "start": "1570120",
    "end": "1577019"
  },
  {
    "text": "example we'll type ipconfig we can see IP config right here it's been scanned",
    "start": "1577019",
    "end": "1585179"
  },
  {
    "text": "now if we take a look at what Microsoft calls the AMC test sample then when I",
    "start": "1585179",
    "end": "1592139"
  },
  {
    "text": "try to run this I'm going to do it in two steps I'm going to first load it",
    "start": "1592139",
    "end": "1597870"
  },
  {
    "text": "from Bay 64 right and now this variable here AMC test sample contains the AMC",
    "start": "1597870",
    "end": "1604260"
  },
  {
    "text": "test sample but it hasn't been run yet and as you can see this is the command that was entered and now I'm going to",
    "start": "1604260",
    "end": "1610620"
  },
  {
    "text": "execute the AMC test sample by calling invoke expression so let's delete",
    "start": "1610620",
    "end": "1616590"
  },
  {
    "text": "everything here and enter now you can see that Windows Defender was able to",
    "start": "1616590",
    "end": "1622980"
  },
  {
    "text": "catch the MC test sample and the reason for that is because we have two lines",
    "start": "1622980",
    "end": "1629519"
  },
  {
    "text": "here the first is the invoke expression but the second is what expression I was invoking so I never typed this this is",
    "start": "1629519",
    "end": "1635639"
  },
  {
    "text": "this has been called sort of implicitly but this is the power of MC it allows me to see everything that goes on in",
    "start": "1635639",
    "end": "1642389"
  },
  {
    "text": "PowerShell so",
    "start": "1642389",
    "end": "1646820"
  },
  {
    "text": "now that wasn't very hard to do and why is it such a secret I really don't know",
    "start": "1649070",
    "end": "1654220"
  },
  {
    "text": "Microsoft has decided to keep this undocumented and I would kind of like to know why as force can dispatching we",
    "start": "1654220",
    "end": "1665060"
  },
  {
    "text": "know how MC loads its providers but we haven't seen how MC dispatches its requests can providers fail what happens",
    "start": "1665060",
    "end": "1672980"
  },
  {
    "text": "if they do well we do know that their return error codes in return the error codes can indicate failure so what will",
    "start": "1672980",
    "end": "1678860"
  },
  {
    "text": "happen in case of a failure so back to MC dll we can take a look at the",
    "start": "1678860",
    "end": "1685340"
  },
  {
    "text": "function scan now this function right here will be very simple function what",
    "start": "1685340",
    "end": "1691370"
  },
  {
    "text": "we can see here it'll set the result to be not detected at first and then if nothing changes this will be what will",
    "start": "1691370",
    "end": "1697520"
  },
  {
    "text": "be returned and then we can see that we have a loop here that will create a an",
    "start": "1697520",
    "end": "1704630"
  },
  {
    "text": "MC provider iterator that will iterate through the list of MC providers and for",
    "start": "1704630",
    "end": "1710450"
  },
  {
    "text": "each provider it's going to call its scan method right here and whatever the",
    "start": "1710450",
    "end": "1718970"
  },
  {
    "text": "result is it's going to be stored here in this variable scan return value now",
    "start": "1718970",
    "end": "1724730"
  },
  {
    "text": "if we take a look towards the end of the loop we can see a condition and that condition checks if the return value was",
    "start": "1724730",
    "end": "1731240"
  },
  {
    "text": "s ok now bear in mind here we're not talking about the result of the scan whether it was malicious or not this is",
    "start": "1731240",
    "end": "1737450"
  },
  {
    "text": "did I successfully scan the buffer that was passed to me or not so regardless of",
    "start": "1737450",
    "end": "1742730"
  },
  {
    "text": "the result we're going to we're going to either go right which means the result",
    "start": "1742730",
    "end": "1749510"
  },
  {
    "text": "was ok to stop the loop don't continue to the next provider or we're gonna go",
    "start": "1749510",
    "end": "1754640"
  },
  {
    "text": "left which is the result who is not a success so continue to the next provider",
    "start": "1754640",
    "end": "1761110"
  },
  {
    "start": "1762000",
    "end": "1762000"
  },
  {
    "text": "now a brief summary is that providers are loaded by their goods alphabetically",
    "start": "1763160",
    "end": "1769590"
  },
  {
    "text": "so I can choose what my gooood starts with and a lower good means that my",
    "start": "1769590",
    "end": "1776670"
  },
  {
    "text": "provider will be loaded first so all providers will be stored in some list of providers and whenever a scan request",
    "start": "1776670",
    "end": "1783300"
  },
  {
    "text": "arrives it will dispatch the scan to all the different providers in that list if",
    "start": "1783300",
    "end": "1788490"
  },
  {
    "text": "the scan succeeds we don't continue the next provider and if the scan fails we do continue the next provider so we do",
    "start": "1788490",
    "end": "1796800"
  },
  {
    "text": "know how to register a provider this does require administrator access but if we register a simple provider that",
    "start": "1796800",
    "end": "1802020"
  },
  {
    "text": "always returns s ok and that the result is result clean then defender will never",
    "start": "1802020",
    "end": "1807540"
  },
  {
    "text": "receive the scans because argue it starts with 1 or 0 because we can choose that this will essentially disable MC",
    "start": "1807540",
    "end": "1815280"
  },
  {
    "text": "completely and there will be no indication to the user or to defender so",
    "start": "1815280",
    "end": "1820560"
  },
  {
    "text": "this is a pretty cool trick but I wouldn't go about calling it a bypass because it doesn't require administrator",
    "start": "1820560",
    "end": "1826380"
  },
  {
    "text": "privileges and you are installing a provider so in theory you can also disable MC completely but this is a very",
    "start": "1826380",
    "end": "1834420"
  },
  {
    "text": "nice trick because there will be no indication to defend it or to the user that something took place so now we're",
    "start": "1834420",
    "end": "1841860"
  },
  {
    "start": "1841000",
    "end": "1841000"
  },
  {
    "text": "gonna be talking about bypassing MC and we're gonna see some very cool bypasses",
    "start": "1841860",
    "end": "1848070"
  },
  {
    "text": "that were previously disclosed in the internet and we're gonna see some new things but the crucial thing we must",
    "start": "1848070",
    "end": "1854670"
  },
  {
    "text": "understand is that when trying to bypass MC we need to understand what MC is",
    "start": "1854670",
    "end": "1860670"
  },
  {
    "text": "there to solve so according to the blog post by Microsoft that explains what MC",
    "start": "1860670",
    "end": "1866700"
  },
  {
    "text": "is good for the crux of the issue is that this is that scripting like engines",
    "start": "1866700",
    "end": "1872100"
  },
  {
    "text": "can run code that was generated at run time this is where the new anti-malware scan interface comes in while the",
    "start": "1872100",
    "end": "1877800"
  },
  {
    "text": "malicious script might go through several passes of the up to station it ultimately needs to supply the scripting engine with plain an obfuscated code so",
    "start": "1877800",
    "end": "1884910"
  },
  {
    "text": "MC is a technology created to help in the battle against script based malware MC assumes compromise so if you're",
    "start": "1884910",
    "end": "1892110"
  },
  {
    "text": "running the script you're already infected and MC says I'm to take away the attackers ability to",
    "start": "1892110",
    "end": "1897450"
  },
  {
    "text": "pop you skate code so if I have a known malware and known malicious script no matter what you do before you run the",
    "start": "1897450",
    "end": "1903059"
  },
  {
    "text": "script eventually you have to supply the script to the PowerShell engine which",
    "start": "1903059",
    "end": "1908160"
  },
  {
    "text": "means that I'll be able to scan it without having to understand what kind of procedures and processes and and D",
    "start": "1908160",
    "end": "1914400"
  },
  {
    "text": "obfuscation you're running before then so some of the bypasses we're going to",
    "start": "1914400",
    "end": "1919910"
  },
  {
    "start": "1918000",
    "end": "1918000"
  },
  {
    "text": "discuss are not as troubling because their implementation flaws and basically",
    "start": "1919910",
    "end": "1926400"
  },
  {
    "text": "it's something that the developers of AMC maybe overlooked but these can usually be fixed without much effort so",
    "start": "1926400",
    "end": "1931980"
  },
  {
    "text": "let's see some examples of these so Matt Nelson posted a great blog post and you",
    "start": "1931980",
    "end": "1937169"
  },
  {
    "text": "can check it out in this link right there but what he figured out is that the anti-malware object is loaded as a",
    "start": "1937169",
    "end": "1943980"
  },
  {
    "text": "calm object just like the providers themselves with co-create instance so when he looked at process monitor he was",
    "start": "1943980",
    "end": "1951690"
  },
  {
    "text": "able to see I don't know if you guys can see well but he was able to see that the",
    "start": "1951690",
    "end": "1956820"
  },
  {
    "text": "anti-malware or MC DLL is loaded from the registry under the current user hive",
    "start": "1956820",
    "end": "1963150"
  },
  {
    "text": "the H key current user first and that fails which you can see the name not found over there and at this point you",
    "start": "1963150",
    "end": "1971370"
  },
  {
    "text": "figured okay well I'm just gonna create this this registry key because I can I don't need administrator resistant to",
    "start": "1971370",
    "end": "1976590"
  },
  {
    "text": "write to HK Cu and I'm gonna put a reference to a DLL that doesn't exist",
    "start": "1976590",
    "end": "1982200"
  },
  {
    "text": "and at this point this causes empty to fail and PowerShell continues without",
    "start": "1982200",
    "end": "1988320"
  },
  {
    "start": "1984000",
    "end": "1984000"
  },
  {
    "text": "loading the MC and does not scan anything so this this issue was fixed then another great post by Satoshi tanda",
    "start": "1988320",
    "end": "1996230"
  },
  {
    "text": "also in this blog post what he found out",
    "start": "1996230",
    "end": "2002150"
  },
  {
    "text": "is that as we all saw PowerShell uses MC scan string and AMG's can string assumes",
    "start": "2002150",
    "end": "2008570"
  },
  {
    "text": "that you're passing to it a null terminated strength so that means that if you put a null terminator inside of",
    "start": "2008570",
    "end": "2015770"
  },
  {
    "text": "your script MC will not scan past that null terminator and so what he did was",
    "start": "2015770",
    "end": "2023059"
  },
  {
    "text": "he created a live a command that contains something benign a null terminator and then something",
    "start": "2023059",
    "end": "2029120"
  },
  {
    "text": "delicious and that thing completely bypassed AMC now this also was supposed",
    "start": "2029120",
    "end": "2034640"
  },
  {
    "text": "to be corrected I haven't seen the commits on github but it's I think it's",
    "start": "2034640",
    "end": "2039860"
  },
  {
    "text": "supposed to be fixed another little trick and I don't know who to attribute this to but if you copy PowerShell to a",
    "start": "2039860",
    "end": "2047390"
  },
  {
    "start": "2041000",
    "end": "2041000"
  },
  {
    "text": "different directory and you can do this without administrator access then you can simply run it and it'll try to load",
    "start": "2047390",
    "end": "2055070"
  },
  {
    "text": "MC from that directory MC DLL so if you drop a rope MC DLL in that directory and",
    "start": "2055070",
    "end": "2060500"
  },
  {
    "text": "you can simply just copy the original MC directory and patch it before so it doesn't really really require you to",
    "start": "2060500",
    "end": "2066440"
  },
  {
    "text": "create a DLL of your own and you put that DLL in that directory it will be loaded instead of the original one and",
    "start": "2066440",
    "end": "2073550"
  },
  {
    "text": "this can also effectively disabled MC now if you do have administrator access",
    "start": "2073550",
    "end": "2079330"
  },
  {
    "text": "notice that PowerShell lives in a subdirectory of system 32 which is",
    "start": "2079330",
    "end": "2085370"
  },
  {
    "text": "Windows PowerShell V one point zero so it'll try to load amps e DLL from that",
    "start": "2085370",
    "end": "2090830"
  },
  {
    "text": "directory as well so if you do have administrator access you can simply drop the patched MC DLL",
    "start": "2090830",
    "end": "2096500"
  },
  {
    "text": "in that directory and then run PowerShell and that will work and also disable MC as you can see here in an",
    "start": "2096500",
    "end": "2102020"
  },
  {
    "text": "example that I played with it and I saw that it's actually able to load MC DLL",
    "start": "2102020",
    "end": "2107300"
  },
  {
    "text": "from the PowerShell directory and the operation is success and it does work in mitigating or stopping MC from scanning",
    "start": "2107300",
    "end": "2117250"
  },
  {
    "text": "one second",
    "start": "2117250",
    "end": "2120730"
  },
  {
    "text": "so we talked a lot about PowerShell I wanted to take a look at VB script and",
    "start": "2129150",
    "end": "2134339"
  },
  {
    "text": "JavaScript as well so I took a look at VB script and JavaScript DLL and without",
    "start": "2134339",
    "end": "2140460"
  },
  {
    "text": "going into much detail here we can see that they both contain a class called Oh",
    "start": "2140460",
    "end": "2147089"
  },
  {
    "text": "le script that has an initialize function which we'll call the MC",
    "start": "2147089",
    "end": "2155009"
  },
  {
    "text": "initialize API call and then later on they both have the check dynamic code",
    "start": "2155009",
    "end": "2162839"
  },
  {
    "text": "safety which will be called to check code dynamically and this calls AMC scan",
    "start": "2162839",
    "end": "2169410"
  },
  {
    "text": "string also and when looking at the code",
    "start": "2169410",
    "end": "2175680"
  },
  {
    "text": "I noticed something very very interesting I took a look at one of the functions and I saw that actually a",
    "start": "2175680",
    "end": "2182519"
  },
  {
    "text": "string is being referenced from the registry and that string is MC enable so",
    "start": "2182519",
    "end": "2187859"
  },
  {
    "text": "I figured well this looks like a bypass waiting to happen but I figured well for sure this happens",
    "start": "2187859",
    "end": "2193559"
  },
  {
    "text": "from the local machine where I won't be able to access it as an administrator right no so as we can see it explicitly",
    "start": "2193559",
    "end": "2200249"
  },
  {
    "text": "requests this to be accessed from the current user so I thought okay I can I",
    "start": "2200249",
    "end": "2205829"
  },
  {
    "text": "can write to this and see what happens and I also took a look at what registry Keys being is being accessed and we can",
    "start": "2205829",
    "end": "2211710"
  },
  {
    "text": "see it's software microsoft windows script settings now windows script doesn't exist at least not in my",
    "start": "2211710",
    "end": "2217349"
  },
  {
    "text": "up-to-date version of Windows 10 there's windows script scripts host or scripting host but there's no windows script let",
    "start": "2217349",
    "end": "2223890"
  },
  {
    "text": "alone settings let alone the value inside MC enable so essentially VB",
    "start": "2223890",
    "end": "2231329"
  },
  {
    "start": "2229000",
    "end": "2229000"
  },
  {
    "text": "script will try to access this value but it doesn't exist so it'll just continue as if this value exists it doesn't exist",
    "start": "2231329",
    "end": "2238559"
  },
  {
    "text": "and MC is enabled now if we take a look at a demo of this we can see that here I",
    "start": "2238559",
    "end": "2243960"
  },
  {
    "text": "have a VB script sample that'll load the MC test sample into a variable and we",
    "start": "2243960",
    "end": "2250950"
  },
  {
    "text": "can see here that if I take a look at this register key doesn't exist if I try to look at if this register key also",
    "start": "2250950",
    "end": "2256170"
  },
  {
    "text": "doesn't exist and this this script will have another variable",
    "start": "2256170",
    "end": "2264180"
  },
  {
    "text": "it says should I try to bypass MC using this MC enable trick so first what we're going to do is we're going to disable",
    "start": "2264180",
    "end": "2270029"
  },
  {
    "text": "Windows Defender for demo purposes and",
    "start": "2270029",
    "end": "2275209"
  },
  {
    "text": "now I'm going to run the script",
    "start": "2275209",
    "end": "2279229"
  },
  {
    "text": "and as you can see we have a message box with the MC test sample now when we",
    "start": "2283230",
    "end": "2288930"
  },
  {
    "text": "enable the protection we can double",
    "start": "2288930",
    "end": "2295109"
  },
  {
    "text": "click it and we can see that this time an error occurs we have threats found by",
    "start": "2295109",
    "end": "2301200"
  },
  {
    "text": "Windows Defender and the script contains malicious content and has been blocked by your antivirus software so what we're",
    "start": "2301200",
    "end": "2308099"
  },
  {
    "text": "gonna do now is we're going to leave Windows Defender on and just use this little bypass",
    "start": "2308099",
    "end": "2314339"
  },
  {
    "text": "should bypass MC and this will create the registry key now as you can see the registry key still it doesn't exist right and when we double-click the",
    "start": "2314339",
    "end": "2321270"
  },
  {
    "text": "script it'll pop up the message box and",
    "start": "2321270",
    "end": "2326720"
  },
  {
    "text": "we know that MC was bypassed ok if we",
    "start": "2326720",
    "end": "2332760"
  },
  {
    "text": "take a look at the registry we can see that this value was actually created ok",
    "start": "2332760",
    "end": "2341270"
  },
  {
    "text": "so this is a summary of what we need to do we just need to create a value MC",
    "start": "2341980",
    "end": "2348160"
  },
  {
    "text": "enable to be zero in H key current user software microsoft windows script",
    "start": "2348160",
    "end": "2353470"
  },
  {
    "text": "settings MC enabled sorry without the MCA enable at the end",
    "start": "2353470",
    "end": "2358950"
  },
  {
    "start": "2358000",
    "end": "2358000"
  },
  {
    "text": "so these are all what I like to call implementation issues things that can be easily patched as you see like the",
    "start": "2359640",
    "end": "2365619"
  },
  {
    "text": "previous one was just something that shouldn't be in the code just remove it and Microsoft will fix all of these",
    "start": "2365619",
    "end": "2371920"
  },
  {
    "text": "probably some of them have been fixed already but what if we have fundamental issues in MC like issues that are not",
    "start": "2371920",
    "end": "2379060"
  },
  {
    "start": "2376000",
    "end": "2376000"
  },
  {
    "text": "just implementation flaws something that is not so easy to fix with a patch then we have a more serious problem let's",
    "start": "2379060",
    "end": "2385750"
  },
  {
    "text": "let's take a look at some examples of this so do you guys think that it would be possible to bypass MC with a command",
    "start": "2385750",
    "end": "2392800"
  },
  {
    "start": "2388000",
    "end": "2388000"
  },
  {
    "text": "line that would fit into a single tweet well let's recall the MC in it filled in",
    "start": "2392800",
    "end": "2398440"
  },
  {
    "text": "it in it failed filled from the beginning when we took a look at PowerShell code now what if we can",
    "start": "2398440",
    "end": "2404770"
  },
  {
    "text": "somehow manually set this to true then scans will not be by pet would not be dispatched because as far as PowerShell",
    "start": "2404770",
    "end": "2412359"
  },
  {
    "text": "is concerned the MC initialization process failed now PowerShell is a very very powerful",
    "start": "2412359",
    "end": "2417790"
  },
  {
    "text": "tool so without administrative access mat Graber was able to literally tweet a",
    "start": "2417790",
    "end": "2423400"
  },
  {
    "text": "name an MC bypass and you can check this bypass right here as you can see what he",
    "start": "2423400",
    "end": "2431349"
  },
  {
    "text": "does is he he references the class MC utils he accesses the MC in it failed",
    "start": "2431349",
    "end": "2438480"
  },
  {
    "text": "member and then he sets it to true we",
    "start": "2438480",
    "end": "2444130"
  },
  {
    "text": "can see this also in action and that the interesting thing about",
    "start": "2444130",
    "end": "2451680"
  },
  {
    "text": "this bypass is if we take a look at the date of this tweet it's from May 24th",
    "start": "2451680",
    "end": "2457680"
  },
  {
    "text": "2016 which is nearly two years ago and this bypass still works at least in my",
    "start": "2457680",
    "end": "2463140"
  },
  {
    "text": "experiments even even as it doesn't even have a signature for it in Windows",
    "start": "2463140",
    "end": "2468329"
  },
  {
    "text": "Defender so literally attackers can just use this this command line to bypass MC",
    "start": "2468329",
    "end": "2473940"
  },
  {
    "text": "and completely disable it and the cool thing about it is it doesn't need administrative privileges so in my",
    "start": "2473940",
    "end": "2479640"
  },
  {
    "text": "opinion this is the best MC bypass to date the most original and the most",
    "start": "2479640",
    "end": "2484770"
  },
  {
    "text": "sophisticated so if we copy paste this",
    "start": "2484770",
    "end": "2490109"
  },
  {
    "text": "code here we can see that we were able",
    "start": "2490109",
    "end": "2496050"
  },
  {
    "text": "to create the sample try to execute it Windows Defender says no this script",
    "start": "2496050",
    "end": "2502859"
  },
  {
    "text": "contains malicious code so we disable using Matt's one-liner and execute it",
    "start": "2502859",
    "end": "2509400"
  },
  {
    "text": "and as you can see MC has been disabled so this is pretty cool now one more bypass is that PowerShell",
    "start": "2509400",
    "end": "2519240"
  },
  {
    "text": "allows you to access native API as much as you want using native API calls there",
    "start": "2519240",
    "end": "2524760"
  },
  {
    "text": "are literally numerous ways to bypass MC there was actually a publication by two",
    "start": "2524760",
    "end": "2531540"
  },
  {
    "text": "researchers from cyber-ark describing an MC bypass by loading a native DLL from disk so you drop a deal",
    "start": "2531540",
    "end": "2537240"
  },
  {
    "text": "out to disk and then you load it but let's try to demonstrate a more simple",
    "start": "2537240",
    "end": "2542460"
  },
  {
    "text": "approach to this we know that PowerShell calls eventually MC scan buffer I'm you know that MCC and",
    "start": "2542460",
    "end": "2548940"
  },
  {
    "text": "buffer is in charge of passing scan requests to the the providers themselves",
    "start": "2548940",
    "end": "2554099"
  },
  {
    "text": "so what we're going to try to do is without administrator access we're going to try to patch MC in memory the DLL",
    "start": "2554099",
    "end": "2562109"
  },
  {
    "text": "itself and we're going to replace it with something along the lines of this right here which is move a l1 return",
    "start": "2562109",
    "end": "2569550"
  },
  {
    "text": "which means basically return one now since we expect a scan to return zero which is success this is going to be",
    "start": "2569550",
    "end": "2576300"
  },
  {
    "text": "regarded as an error and it'll allow us to bypass so take a",
    "start": "2576300",
    "end": "2585330"
  },
  {
    "text": "look at this",
    "start": "2585330",
    "end": "2587780"
  },
  {
    "text": "as you can see we're using the the API get procedure address on MC DLL to get",
    "start": "2590700",
    "end": "2599130"
  },
  {
    "text": "the address of MC scan buffer and then we're going to call virtual protect to",
    "start": "2599130",
    "end": "2604320"
  },
  {
    "text": "make that memory writable and then we're going to use mem set to write byte by",
    "start": "2604320",
    "end": "2609990"
  },
  {
    "text": "byte the new app codes that will disable MC so here we have some helper functions",
    "start": "2609990",
    "end": "2621329"
  },
  {
    "text": "that I'll be posting online later but I'm gonna paste them into power so as you can see Windows Defender doesn't",
    "start": "2621329",
    "end": "2627300"
  },
  {
    "text": "mind because these are legitimate functions and then what I'm going to do is I need another helper function which",
    "start": "2627300",
    "end": "2634530"
  },
  {
    "text": "is get win32 functions which will give me the access to virtual protect and mem",
    "start": "2634530",
    "end": "2641040"
  },
  {
    "text": "set and this I copied from another repository on github and when I run this",
    "start": "2641040",
    "end": "2646859"
  },
  {
    "text": "and hit enter now I have a problem with MC it says this is malicious because well I copied it from somewhere that MC",
    "start": "2646859",
    "end": "2653190"
  },
  {
    "text": "was aware of so what I'm going to do is I'm going to bypass this incredibly sophisticated protection by deleting the",
    "start": "2653190",
    "end": "2660119"
  },
  {
    "text": "T in virtual protect and the corresponding T here and this is",
    "start": "2660119",
    "end": "2667500"
  },
  {
    "text": "effectively good enough to bypass the signature and now I'm going to copy the function we saw in the in the slide",
    "start": "2667500",
    "end": "2674069"
  },
  {
    "text": "before all right paste it and create the test sample as",
    "start": "2674069",
    "end": "2681470"
  },
  {
    "text": "we've always been doing now we're going we can test if we are administrators and",
    "start": "2681470",
    "end": "2688609"
  },
  {
    "text": "as we can see we are not administrators",
    "start": "2688609",
    "end": "2693078"
  },
  {
    "text": "we're not administrators",
    "start": "2694090",
    "end": "2697440"
  },
  {
    "text": "and when we tried to execute the sample",
    "start": "2699740",
    "end": "2705190"
  },
  {
    "text": "we have a problem because we haven't disabled it yet so what we're gonna do now is we're gonna call the patch function and then run this again and it",
    "start": "2708880",
    "end": "2718180"
  },
  {
    "text": "works so we we took a look here we tried to run it we had a malicious content",
    "start": "2718180",
    "end": "2725950"
  },
  {
    "text": "error we patched the DLL in memory and then we executed it again and it worked",
    "start": "2725950",
    "end": "2732190"
  },
  {
    "text": "so MC should we keep it should be toss",
    "start": "2732190",
    "end": "2737410"
  },
  {
    "text": "it what should we do with it well the good things about MC is it allows more",
    "start": "2737410",
    "end": "2742720"
  },
  {
    "text": "visibility for anti anti viruses and security products and so I do think that all security products should implement",
    "start": "2742720",
    "end": "2749170"
  },
  {
    "text": "providers as long as we have em see it's better to see something than to see nothing and this can help because not",
    "start": "2749170",
    "end": "2756279"
  },
  {
    "text": "every attack will contain an AMC bypass and the fact that an app developer can",
    "start": "2756279",
    "end": "2763450"
  },
  {
    "text": "take active part and the users protection by actually requesting",
    "start": "2763450",
    "end": "2769509"
  },
  {
    "text": "content to be scanned I think is a good step it's a good idea and the fact that you can do it with any Content opens the",
    "start": "2769509",
    "end": "2774759"
  },
  {
    "text": "door to many other applications and I think this is in general a good idea but the bad thing is as long as PowerShell",
    "start": "2774759",
    "end": "2781599"
  },
  {
    "text": "can do anything in dotnet and access native methods it'll always be like nearly impossible to beat obfuscation",
    "start": "2781599",
    "end": "2788440"
  },
  {
    "text": "and the same issues are going to arise when we try to integrate MC and two other scripting languages such as Python",
    "start": "2788440",
    "end": "2793660"
  },
  {
    "text": "for example because as long as you can control your your own memory address space from the scripting language then",
    "start": "2793660",
    "end": "2799329"
  },
  {
    "text": "you can always mess with this kind of this kind of myth defense mechanism so",
    "start": "2799329",
    "end": "2806049"
  },
  {
    "text": "to sum up what we did is we we talked about script language script language",
    "start": "2806049",
    "end": "2811059"
  },
  {
    "text": "malware and obfuscation we talked about what MC was created for we talked about the internals of MC the design the API",
    "start": "2811059",
    "end": "2818710"
  },
  {
    "text": "the structures the initialization process of the providers the dispatching of scans we talked about how one would",
    "start": "2818710",
    "end": "2825670"
  },
  {
    "text": "go about implementing their own provider and registering it and then we talked about bypassing it we talked about",
    "start": "2825670",
    "end": "2831759"
  },
  {
    "text": "implementation issues the com server hijacking by Matt the null terminator Bob by satoshi the ancien Abel bug and",
    "start": "2831759",
    "end": "2838960"
  },
  {
    "text": "VB script and in JavaScript and we talked about fundamental issues like the one-liner that match out",
    "start": "2838960",
    "end": "2844240"
  },
  {
    "text": "and the in memory games bypassed by using in-memory hot patching so at this",
    "start": "2844240",
    "end": "2849940"
  },
  {
    "text": "point I'd like to thank you all for coming hope you enjoyed and you learn something and I'm here to answer any questions if",
    "start": "2849940",
    "end": "2856329"
  },
  {
    "text": "you haven't well it depends I think that",
    "start": "2856329",
    "end": "2899650"
  },
  {
    "text": "macros use vbscript DLL so in this case some functional functionality will be",
    "start": "2899650",
    "end": "2905079"
  },
  {
    "text": "sent to MC so it could be but whatever is being blocked in your situation could",
    "start": "2905079",
    "end": "2910720"
  },
  {
    "text": "also be something else [Music]",
    "start": "2910720",
    "end": "2916880"
  },
  {
    "text": "mm-hmm I'm not aware of anything",
    "start": "2916880",
    "end": "2923009"
  },
  {
    "text": "specifically but many vendors implement things around the macro because we know that's a sensitive topic so at in silo",
    "start": "2923009",
    "end": "2930660"
  },
  {
    "text": "where I worked we we had something and and I'm sure every other vendor has something there and with Windows",
    "start": "2930660",
    "end": "2935999"
  },
  {
    "text": "Defender so there's probably something to try to block macro content from",
    "start": "2935999",
    "end": "2941849"
  },
  {
    "text": "running malicious stuff and also AMC is there probably because it uses vbscript a DLL so welcome any other questions",
    "start": "2941849",
    "end": "2953930"
  },
  {
    "text": "okay thank you",
    "start": "2954319",
    "end": "2957739"
  }
]