[
  {
    "start": "0",
    "end": "150000"
  },
  {
    "text": "good afternoon everyone welcome to intra process uh intra process memory protection for applications on arm and",
    "start": "80",
    "end": "7639"
  },
  {
    "text": "x86 leveraging elf ABI uh you are in the Jasmine room with your speakers Serge",
    "start": "7639",
    "end": "13839"
  },
  {
    "text": "Brutus Julian bangard and Maxwell uh before we begin um don't",
    "start": "13839",
    "end": "19439"
  },
  {
    "text": "forget to stop by the business Hall located in Bayside A and B during the day for the welcome",
    "start": "19439",
    "end": "25279"
  },
  {
    "text": "reception uh at 5:30 to 7 tonight uh the blackout Arsenal is on the palm forer on",
    "start": "25279",
    "end": "32200"
  },
  {
    "text": "level three thank you for putting your phone uh on vibrate and with that here's",
    "start": "32200",
    "end": "37440"
  },
  {
    "text": "your",
    "start": "37440",
    "end": "39559"
  },
  {
    "text": "speakers hello it's great to be here I'm Sergey bratus uh this is uh Maxwell C",
    "start": "43320",
    "end": "49239"
  },
  {
    "text": "and Julian bangard who as usual did all the work um I am uh uh a researcher at",
    "start": "49239",
    "end": "56199"
  },
  {
    "text": "darkmouth College um uh Max is is uh a researcher at narf Industries uh this",
    "start": "56199",
    "end": "63440"
  },
  {
    "text": "was sponsored um by several sponsors uh including the schwizer engineering",
    "start": "63440",
    "end": "70200"
  },
  {
    "text": "Labs uh let's get right to the problem uh the problem is that uh if your buggy",
    "start": "70200",
    "end": "76680"
  },
  {
    "text": "Library gets into your process memory it can absolutely corrupt uh anything uh",
    "start": "76680",
    "end": "85000"
  },
  {
    "text": "you yes aha",
    "start": "85000",
    "end": "91240"
  },
  {
    "text": "did you guys really have to try out your o day what yeah hey uh uh",
    "start": "91240",
    "end": "98920"
  },
  {
    "text": "keynote keynote well I guess we have just out the slides from scratch ah",
    "start": "98920",
    "end": "105399"
  },
  {
    "text": "hey where is your thing",
    "start": "105399",
    "end": "110560"
  },
  {
    "text": "okay now this is interesting uh my entire presentation over here okay all",
    "start": "110640",
    "end": "118560"
  },
  {
    "text": "right uh well what what what what wait wait what are you doing I'm trying to",
    "start": "118560",
    "end": "123759"
  },
  {
    "text": "find",
    "start": "123759",
    "end": "126079"
  },
  {
    "text": "the yeah hey where is where is it um let's start",
    "start": "129560",
    "end": "136680"
  },
  {
    "text": "the keynote you can't get to the menu easily here we",
    "start": "136680",
    "end": "144120"
  },
  {
    "text": "go oh hey all all",
    "start": "144120",
    "end": "150840"
  },
  {
    "start": "150000",
    "end": "188000"
  },
  {
    "text": "right yeah buggy software Ah that's really a problem and uh the uh specific",
    "start": "150840",
    "end": "158640"
  },
  {
    "text": "problem that your uh standard policies do not protect you from is that uh",
    "start": "158640",
    "end": "164920"
  },
  {
    "text": "anything in your process space owns your entire process space and so you have the",
    "start": "164920",
    "end": "170280"
  },
  {
    "text": "situation when your image parser just stole your private key that was loaded in memory you could have your uh s Linux",
    "start": "170280",
    "end": "177200"
  },
  {
    "text": "going and your process of course had to read that file and it wouldn't help you",
    "start": "177200",
    "end": "182640"
  },
  {
    "text": "any because at that point uh that key is in memory and every Library uh can uh",
    "start": "182640",
    "end": "189040"
  },
  {
    "start": "188000",
    "end": "264000"
  },
  {
    "text": "take it over so then what are we missing software is",
    "start": "189040",
    "end": "194920"
  },
  {
    "text": "already split into Parts you already know which parts are supposed to uh read",
    "start": "194920",
    "end": "201400"
  },
  {
    "text": "which things in memory and which they are not supposed to read like clearly your image parsing Library your lib PNG",
    "start": "201400",
    "end": "208400"
  },
  {
    "text": "is not supposed to look at your Keys clearly your keys are only supposed to be looked at uh by your crypto functions",
    "start": "208400",
    "end": "216560"
  },
  {
    "text": "and all of that information is already there uh and the Linker sees it moreover",
    "start": "216560",
    "end": "222799"
  },
  {
    "text": "the Linker knows about all of these interactions and you can tell a lot by a piece of code of about a piece of Code",
    "start": "222799",
    "end": "230159"
  },
  {
    "text": "by its interactions if it looks at your keys it had better be your crypto Library if it parses your image it had",
    "start": "230159",
    "end": "237159"
  },
  {
    "text": "better be your uh Graphics Library now uh the uh compiler passes it onto the",
    "start": "237159",
    "end": "243879"
  },
  {
    "text": "assembler the assembler passes it to the Linker they all see those parts of the program and then a total catastrophe",
    "start": "243879",
    "end": "250959"
  },
  {
    "text": "happens when the runtime discards this information and all of those separate",
    "start": "250959",
    "end": "257799"
  },
  {
    "text": "sections uh get absolutely forgotten and uh your runtime is this one Big Blob so",
    "start": "257799",
    "end": "265320"
  },
  {
    "start": "264000",
    "end": "304000"
  },
  {
    "text": "the Prototype we built which we call the elf back and you'll moment Cy helps you",
    "start": "265320",
    "end": "271360"
  },
  {
    "text": "describe how parts of your application interact and enforce it uh by way of",
    "start": "271360",
    "end": "278360"
  },
  {
    "text": "having your OS loader be unforgetful not discard this information instead uh",
    "start": "278360",
    "end": "285520"
  },
  {
    "text": "inforce it so your sections are your types your linking is your policy and",
    "start": "285520",
    "end": "292639"
  },
  {
    "text": "you can think of Elf sections as uh these things that are just a love letter",
    "start": "292639",
    "end": "298400"
  },
  {
    "text": "uh of uh a comp to the Linker but in fact there are a lot more and we're",
    "start": "298400",
    "end": "303919"
  },
  {
    "text": "going to argue that so this is going to be the outline of the talk uh first I will argue for using the LBI as a policy",
    "start": "303919",
    "end": "311520"
  },
  {
    "start": "304000",
    "end": "362000"
  },
  {
    "text": "vehicle and this important uh key point of having the loader be unforgetful not",
    "start": "311520",
    "end": "318280"
  },
  {
    "text": "discard all of this information uh then we're going to show you uh what kind of effects this policy produces for open",
    "start": "318280",
    "end": "325680"
  },
  {
    "text": "SSH uh Visa the roaming bug uh which hit us recently and you know 777 such a",
    "start": "325680",
    "end": "332919"
  },
  {
    "text": "Vegas number then we're going to talk about another case study that we did for a uh industrial control system proxy uh",
    "start": "332919",
    "end": "340840"
  },
  {
    "text": "on arm which uh Max uh has ported our system to from x86 and then we're going",
    "start": "340840",
    "end": "348199"
  },
  {
    "text": "to talk about the internals what do we do to the kernel while we do that why it's not act something horrible uh but",
    "start": "348199",
    "end": "355360"
  },
  {
    "text": "rather an extension of an existing pattern uh that the colonel already uses so this is a natural",
    "start": "355360",
    "end": "362240"
  },
  {
    "start": "362000",
    "end": "476000"
  },
  {
    "text": "extension so let's talk about uh the uh background uh what do existing policies",
    "start": "362240",
    "end": "368479"
  },
  {
    "text": "give us well esol Linux is this rather expressive things that controls access",
    "start": "368479",
    "end": "375160"
  },
  {
    "text": "to files but it doesn't help against things like heartbeat at all because what do",
    "start": "375160",
    "end": "382759"
  },
  {
    "text": "you care about files uh when your target is in memory and your compromised uh",
    "start": "382759",
    "end": "387840"
  },
  {
    "text": "unit uh of your process is in memory as well so then you want to separate your",
    "start": "387840",
    "end": "393360"
  },
  {
    "text": "parts somehow and prevent the interactions that are not wanted and you've got a",
    "start": "393360",
    "end": "399639"
  },
  {
    "text": "whole lot of work uh in that direction control flow Integrity data flow Integrity software fault isolations all",
    "start": "399639",
    "end": "406919"
  },
  {
    "text": "of those mitigations except as a programmer you can't tell them anything about what you",
    "start": "406919",
    "end": "413280"
  },
  {
    "text": "intend they derive these things for you and uh what is explicit",
    "start": "413280",
    "end": "420440"
  },
  {
    "text": "there uh is is lost your uh intent that is explicit in your code by breaking",
    "start": "420440",
    "end": "427759"
  },
  {
    "text": "your code into these particular compilation units that is lost as",
    "start": "427759",
    "end": "432960"
  },
  {
    "text": "well but who remembers that who remembered how you decided to split your",
    "start": "432960",
    "end": "438080"
  },
  {
    "text": "program well the elf the uh ABI the binary format it has plenty of",
    "start": "438080",
    "end": "445000"
  },
  {
    "text": "structures that describe the units of your program and all of this is uh helpfully passed down to the very point",
    "start": "445000",
    "end": "453000"
  },
  {
    "text": "where runtime happens if you look at your typical L file you've got 30 sections every section is semantically",
    "start": "453000",
    "end": "460720"
  },
  {
    "text": "distinct and does something special something uh that is its intent and then",
    "start": "460720",
    "end": "466639"
  },
  {
    "text": "again your run time is totally discarded uh by uh your run by your uh loader and",
    "start": "466639",
    "end": "473720"
  },
  {
    "text": "then by your around time let's stop doing that and so you've got this um",
    "start": "473720",
    "end": "480800"
  },
  {
    "start": "476000",
    "end": "603000"
  },
  {
    "text": "choice between having uh some system derive what you intended say clearly you",
    "start": "480800",
    "end": "487599"
  },
  {
    "text": "did not intend uh jumps into the middle of functions clearly you did not intend",
    "start": "487599",
    "end": "492960"
  },
  {
    "text": "as a c programmer returns to non-all sites and so on uh but you also have",
    "start": "492960",
    "end": "501720"
  },
  {
    "text": "explicit intents uh when you put things as static in the single",
    "start": "501720",
    "end": "508120"
  },
  {
    "text": "file uh when you put a thing that is not a symbol in that external uh to the rest",
    "start": "508120",
    "end": "514518"
  },
  {
    "text": "of the program in this file that is your clear intent that this should not be",
    "start": "514519",
    "end": "519959"
  },
  {
    "text": "touched by anyone else this data uh belongs uh with this code and that is",
    "start": "519959",
    "end": "527200"
  },
  {
    "text": "very often ignored uh there is no way uh you can uh you can defend this at around",
    "start": "527200",
    "end": "534560"
  },
  {
    "text": "time so you want to describe what matters",
    "start": "534560",
    "end": "540120"
  },
  {
    "text": "and you want to have to describe only what matters think of as a Linux does",
    "start": "540120",
    "end": "545680"
  },
  {
    "text": "order of operations matter in the process it sure does a process is something that unfolds in time do memory",
    "start": "545680",
    "end": "552839"
  },
  {
    "text": "accesses matter yes uh because once you've",
    "start": "552839",
    "end": "558360"
  },
  {
    "text": "assembled your process uh you know your files are no longer longer relevant but you still want your parts to interact",
    "start": "558360",
    "end": "565279"
  },
  {
    "text": "the way you want it not any other way instead you are made to painstakingly",
    "start": "565279",
    "end": "573560"
  },
  {
    "text": "describe every file access that your system May ever do that's a lot of work",
    "start": "573560",
    "end": "580360"
  },
  {
    "text": "uh that's why in s Linux a politices you actually use tools that derive the flows",
    "start": "580360",
    "end": "586920"
  },
  {
    "text": "instead of specifying them that the existence of the tools that actually do that is um well not a good thing it's",
    "start": "586920",
    "end": "595399"
  },
  {
    "text": "actually indictment of that policy approach right you should be able to say things that you want not have to derive",
    "start": "595399",
    "end": "601560"
  },
  {
    "text": "them from what you had to say so what matters what matters is",
    "start": "601560",
    "end": "607399"
  },
  {
    "start": "603000",
    "end": "639000"
  },
  {
    "text": "composition a process consists of Parts these parts come into play at different",
    "start": "607399",
    "end": "615040"
  },
  {
    "text": "times and they have their exclusive relationships both in polic uh both in",
    "start": "615040",
    "end": "621640"
  },
  {
    "text": "sequence this part comes after this part we call them phases in our policy and in",
    "start": "621640",
    "end": "628240"
  },
  {
    "text": "data accesses this is my data only I can use that says",
    "start": "628240",
    "end": "634160"
  },
  {
    "text": "a code section and it shall be so uh so uh the first thing we introduce",
    "start": "634160",
    "end": "642480"
  },
  {
    "start": "639000",
    "end": "666000"
  },
  {
    "text": "is this idea that uh sections of code follow in a particular order and you",
    "start": "642480",
    "end": "648680"
  },
  {
    "text": "have this uh little uh sequence your State aaton uh that consists of phases",
    "start": "648680",
    "end": "654800"
  },
  {
    "text": "and of course you can tell in which section you are just looking at your uh EIP range and uh seeing in what mapped",
    "start": "654800",
    "end": "663200"
  },
  {
    "text": "section of your L file you are and then you want to uh characterize",
    "start": "663200",
    "end": "670959"
  },
  {
    "text": "code by what data it touches because that's really the intent whatever",
    "start": "670959",
    "end": "677519"
  },
  {
    "text": "touches your keys had better be your authentication routine whatever touches",
    "start": "677519",
    "end": "682720"
  },
  {
    "text": "your parser buffers should better be your parser if something outside of the parser accesses your keys then you",
    "start": "682720",
    "end": "689480"
  },
  {
    "text": "accesses your raw input then you're in trouble your parer should not access your keys your processing your session",
    "start": "689480",
    "end": "696200"
  },
  {
    "text": "data should not access your raw parer buffers because that's probably where",
    "start": "696200",
    "end": "701240"
  },
  {
    "text": "the exploit is right so that observation is going to be very important and it",
    "start": "701240",
    "end": "708120"
  },
  {
    "start": "707000",
    "end": "756000"
  },
  {
    "text": "comes from a elf's standard runtime so as I said there are over 30 sections in",
    "start": "708120",
    "end": "714399"
  },
  {
    "text": "the modern L file most of them have to do with startup and uh run time loading",
    "start": "714399",
    "end": "720079"
  },
  {
    "text": "and linking so you've got the uh process linkage table you've got the global",
    "start": "720079",
    "end": "725720"
  },
  {
    "text": "offset table you've got the constructors chours you've got the init code that",
    "start": "725720",
    "end": "731240"
  },
  {
    "text": "calls them you've got the destructors detours and the Phi codes that calls them and",
    "start": "731240",
    "end": "737800"
  },
  {
    "text": "uh you see those arrows on this diagram from John's livin's linkers and loaders",
    "start": "737800",
    "end": "743639"
  },
  {
    "text": "just about the only book on the topic what a shame and these are the only arrows that",
    "start": "743639",
    "end": "749199"
  },
  {
    "text": "are allowed if your code does something else you should be killing it because this is not the intent of these",
    "start": "749199",
    "end": "755959"
  },
  {
    "text": "sections and how would you do that well here is a great inspiration let's look",
    "start": "755959",
    "end": "761360"
  },
  {
    "start": "756000",
    "end": "823000"
  },
  {
    "text": "at uh GRC packs udre the intent of the kernel data that",
    "start": "761360",
    "end": "768120"
  },
  {
    "text": "it enfor of the kernel that it enforces is that the kernel code all of the kernel code except for the very few",
    "start": "768120",
    "end": "774880"
  },
  {
    "text": "functions has no business looking at user lend data because userland data can",
    "start": "774880",
    "end": "781199"
  },
  {
    "text": "be poisoned by the user after it has been checked uh by the CIS and this is",
    "start": "781199",
    "end": "786839"
  },
  {
    "text": "how you make the colonel uh run the mock so uh",
    "start": "786839",
    "end": "791959"
  },
  {
    "text": "UDF enforces this idea that the kernel code should only touch kernel data",
    "start": "791959",
    "end": "798160"
  },
  {
    "text": "except in very special cases like copy from user uh copy to user uh we can",
    "start": "798160",
    "end": "805040"
  },
  {
    "text": "spread this to uh userland runtime again enforcing the the fact that data and",
    "start": "805040",
    "end": "811959"
  },
  {
    "text": "code units have their exclusive relationships they are meant for each other if they are uh cheating on you",
    "start": "811959",
    "end": "818800"
  },
  {
    "text": "having a relationship on the side then the process is no longer trustworthy and finally uh there is the",
    "start": "818800",
    "end": "825760"
  },
  {
    "start": "823000",
    "end": "874000"
  },
  {
    "text": "qmail which has uh a pretty damn good security record uh where DJ",
    "start": "825760",
    "end": "832959"
  },
  {
    "text": "Bernstein um undertook to rewrite an MTA uh a mail transfer",
    "start": "832959",
    "end": "840320"
  },
  {
    "text": "program isolating everything that could be isolated by splitting it into",
    "start": "840320",
    "end": "846720"
  },
  {
    "text": "processes and the lesson learned was that that as he put it was that the",
    "start": "846720",
    "end": "851880"
  },
  {
    "text": "least privilege was a distraction but isolation worked so you should not be",
    "start": "851880",
    "end": "857720"
  },
  {
    "text": "obsessive about your policy isolate uh uh if enforcing the",
    "start": "857720",
    "end": "863880"
  },
  {
    "text": "minimum uh privilege this is too much work but you should be ating things that",
    "start": "863880",
    "end": "870120"
  },
  {
    "text": "are meant to work on other things uh as much as you can and so you can imagine",
    "start": "870120",
    "end": "877040"
  },
  {
    "start": "874000",
    "end": "897000"
  },
  {
    "text": "uh a policy like this uh where uh you specify code",
    "start": "877040",
    "end": "882880"
  },
  {
    "text": "units and the appropriate data units and their relationships and if any other",
    "start": "882880",
    "end": "889199"
  },
  {
    "text": "errow ever happens in this graph you know that uh you've been pawned and you",
    "start": "889199",
    "end": "895360"
  },
  {
    "text": "have to kill the process so SE are types and linking is",
    "start": "895360",
    "end": "902959"
  },
  {
    "start": "897000",
    "end": "944000"
  },
  {
    "text": "policy uh what you have there is um uh an observation that what is a type",
    "start": "902959",
    "end": "912399"
  },
  {
    "text": "well a type is object with common operations so if some data takes common",
    "start": "912399",
    "end": "919360"
  },
  {
    "text": "operations then well perhaps all that data is of the same type so methods over",
    "start": "919360",
    "end": "924720"
  },
  {
    "text": "a class uh type classes and so on they express this idea it turns out that elf with its exclusive",
    "start": "924720",
    "end": "933360"
  },
  {
    "text": "relationships expresses this idea as well but of course uh linkers Glo things",
    "start": "933360",
    "end": "940959"
  },
  {
    "text": "together and loaders forget and this is what we uh have to",
    "start": "940959",
    "end": "946160"
  },
  {
    "start": "944000",
    "end": "975000"
  },
  {
    "text": "stop uh them from doing uh so the unforgetful loader is a centerpiece of",
    "start": "946160",
    "end": "953000"
  },
  {
    "text": "the implementation so we have to change the uh pageold Handler and the loader in",
    "start": "953000",
    "end": "958480"
  },
  {
    "text": "order to spread this information from L sections and their relationships uh to",
    "start": "958480",
    "end": "963959"
  },
  {
    "text": "runtime and this is what uh uh Julian and Max are going to talk about uh but",
    "start": "963959",
    "end": "970040"
  },
  {
    "text": "uh for now before we do the demo we'll talk through the uh motivating example and to make it more concrete uh",
    "start": "970040",
    "end": "977839"
  },
  {
    "text": "let's start off with a small model example in this case this would be for example how a web application that deals",
    "start": "977839",
    "end": "984000"
  },
  {
    "start": "978000",
    "end": "1050000"
  },
  {
    "text": "with image files would be set up in the when you when you're writing such",
    "start": "984000",
    "end": "989040"
  },
  {
    "text": "application you're thinking of okay you have lip ping or some other untrusted code you might have written it yourself",
    "start": "989040",
    "end": "994440"
  },
  {
    "text": "but it might contain bugs or you might have a third party library and that interacts with some untrusted user input",
    "start": "994440",
    "end": "1000920"
  },
  {
    "text": "and provides a bitmap file somewhere that the rest of the application can then work on however there might be",
    "start": "1000920",
    "end": "1006519"
  },
  {
    "text": "other things in your process and an attacker will in fact see that besides that user controlled ping file there is",
    "start": "1006519",
    "end": "1012519"
  },
  {
    "text": "also going to be an SSL private key for your web server in the same address space and if the attacker then looks at",
    "start": "1012519",
    "end": "1019959"
  },
  {
    "text": "your ping processing code finds some funny code patterns he might send you a special ping file and then your private",
    "start": "1019959",
    "end": "1025480"
  },
  {
    "text": "key is suddenly no longer quite that private or you could have the other use",
    "start": "1025480",
    "end": "1033079"
  },
  {
    "text": "case that for example you running an SSH server and there is a white list of",
    "start": "1033079",
    "end": "1038280"
  },
  {
    "text": "authorized keys somewhere in your address space and a malicious ping file might cause the pulser to overwrite that",
    "start": "1038280",
    "end": "1045079"
  },
  {
    "text": "data with something that's not meant to be there and then the techer can log into your",
    "start": "1045079",
    "end": "1050360"
  },
  {
    "text": "server all of these interactions as Sergey already mentioned map down nicely to the a map down nicely to the ABI we",
    "start": "1050360",
    "end": "1057360"
  },
  {
    "text": "already know in the file formats that we have that there is a region that has that data for lip SSL it's called The",
    "start": "1057360",
    "end": "1063600"
  },
  {
    "text": "Dot data section in uh the Linux executable and loadable format",
    "start": "1063600",
    "end": "1069640"
  },
  {
    "text": "elf and existing programming languages like C already make it rather easy for you to",
    "start": "1069640",
    "end": "1076799"
  },
  {
    "text": "split up split out data into sep SE new elf section so if you want to express that this is untrusted user input you",
    "start": "1076799",
    "end": "1082280"
  },
  {
    "text": "could put that particular variable into a dedicated input section and then be able to treat it differently at least in",
    "start": "1082280",
    "end": "1089120"
  },
  {
    "text": "a Linker loaded time and with our prototype you'll be able to give it a different policy at runtime as well and",
    "start": "1089120",
    "end": "1095039"
  },
  {
    "text": "then if we can enforce these policies then lib uh liping will only be able to",
    "start": "1095039",
    "end": "1102200"
  },
  {
    "text": "read the liping input and only right to Li ping output and it can no longer touch your private Keys mitigating those",
    "start": "1102200",
    "end": "1107280"
  },
  {
    "text": "vulnerabilities and now we'll go over some more concrete case studies of the actual",
    "start": "1107280",
    "end": "1115840"
  },
  {
    "text": "SSH so when we look went to look uh for a program to uh demonstrate these",
    "start": "1115840",
    "end": "1121039"
  },
  {
    "text": "Concepts on the uh one that came to mind was open SSH uh in terms of a program where different data accesses might",
    "start": "1121039",
    "end": "1127120"
  },
  {
    "text": "represent different levels of privilege um so open ass has been attacked before",
    "start": "1127120",
    "end": "1133240"
  },
  {
    "start": "1130000",
    "end": "1169000"
  },
  {
    "text": "with uh crafted inputs so the uh Gobles preo rce back in 2002 and then more recently the roaming mode bug in the SSH",
    "start": "1133240",
    "end": "1140760"
  },
  {
    "text": "client which was an information leak that may disclose your private key uh SSH introduced the uh original",
    "start": "1140760",
    "end": "1147880"
  },
  {
    "text": "privilege drop as a policy primitive uh meaning that fa a uh at a certain point",
    "start": "1147880",
    "end": "1152960"
  },
  {
    "text": "if a if the process requests a privilege operation uh disallow it and kill it uh",
    "start": "1152960",
    "end": "1158480"
  },
  {
    "text": "but access to non uh access to data outside of what your",
    "start": "1158480",
    "end": "1164679"
  },
  {
    "text": "um code should be accessing is also a privilege that uh needs to be addressed",
    "start": "1164679",
    "end": "1170520"
  },
  {
    "start": "1169000",
    "end": "1216000"
  },
  {
    "text": "so more concretely looking at our policy for open SSH uh we have three different states we have an initialization state",
    "start": "1170520",
    "end": "1177200"
  },
  {
    "text": "which uh touches both the packet processor and the crypto uh routines for initialization um it then will transer",
    "start": "1177200",
    "end": "1184559"
  },
  {
    "text": "uh execution to the packet processing um state in order to do things such as uh",
    "start": "1184559",
    "end": "1190120"
  },
  {
    "text": "key exchange which will then call into the crypto routines um however none of these states can uh directly touch",
    "start": "1190120",
    "end": "1197520"
  },
  {
    "text": "buffers such as where your private key is stored only the crypto State can do that and they can only be accessed through uh specific call transitions or",
    "start": "1197520",
    "end": "1204080"
  },
  {
    "text": "EIP values we also split up the Heap for each section into uh separate sections",
    "start": "1204080",
    "end": "1209520"
  },
  {
    "text": "so that uh your HEAP data is segregated addressing uh issues such as the uh",
    "start": "1209520",
    "end": "1215159"
  },
  {
    "text": "roaming bug so we have a quick demo using the POC from the qualis uh write up of CV",
    "start": "1215159",
    "end": "1222480"
  },
  {
    "start": "1216000",
    "end": "1330000"
  },
  {
    "text": "2016 0777 um we have a modified op SSH client",
    "start": "1222480",
    "end": "1227679"
  },
  {
    "text": "which uses a simple segregated heat uh implementation with a bug that large",
    "start": "1227679",
    "end": "1233240"
  },
  {
    "text": "Malo May overwrite into another uh adjacent Arena um allowing disclosure of",
    "start": "1233240",
    "end": "1239520"
  },
  {
    "text": "the private",
    "start": "1239520",
    "end": "1241880"
  },
  {
    "text": "key so we have two different binaries one with uh an alack policy applied and one without uh looking at the segments",
    "start": "1249039",
    "end": "1256559"
  },
  {
    "text": "for the non- alback and abled process you see that there is no special binary",
    "start": "1256559",
    "end": "1261799"
  },
  {
    "text": "segment where we store our policies here we uh run the POC and then run our no",
    "start": "1261799",
    "end": "1267679"
  },
  {
    "text": "elfbc uh SSH client and connect to the malicious",
    "start": "1267679",
    "end": "1273159"
  },
  {
    "text": "server we then see that in the output our private key is",
    "start": "1273159",
    "end": "1279240"
  },
  {
    "text": "leaked looking at the alback version we see that there's an additional segment that contains our policy description",
    "start": "1279279",
    "end": "1288158"
  },
  {
    "text": "that performing the same step with the lback enabled process we see that the private key is not",
    "start": "1295600",
    "end": "1300720"
  },
  {
    "text": "leaked um an lback violation is reported indicating that an access outside of what the policy prescribes was uh has",
    "start": "1300720",
    "end": "1310720"
  },
  {
    "text": "occurred and examining that address we see that in the packet processing State",
    "start": "1312520",
    "end": "1317559"
  },
  {
    "text": "the crypto Arena was attempted to be accessed and it was disallowed and the process was",
    "start": "1317559",
    "end": "1323159"
  },
  {
    "text": "killed and uh here we",
    "start": "1323360",
    "end": "1327039"
  },
  {
    "start": "1330000",
    "end": "1395000"
  },
  {
    "text": "go so we've developed uh policies for both the Open Stage client and server um",
    "start": "1332760",
    "end": "1338120"
  },
  {
    "text": "splitting up the various uh Concepts between them the uh crypto uh State the",
    "start": "1338120",
    "end": "1344640"
  },
  {
    "text": "packet processing States and the uh overall process control States into separate States uh and defining uh",
    "start": "1344640",
    "end": "1350840"
  },
  {
    "text": "transitions between them uh we create separate sections for sensitive data blobs such as the uh uh host Keys uh",
    "start": "1350840",
    "end": "1358120"
  },
  {
    "text": "private keys that sort of thing to uh enable finer grain access control for data which might be touched by multiple",
    "start": "1358120",
    "end": "1363760"
  },
  {
    "text": "sections uh such as the initialization State uh this prevents direct leaking of sensitive data like private keys from uh",
    "start": "1363760",
    "end": "1370720"
  },
  {
    "text": "from information disclosure bugs such as this and um again separate heaps May",
    "start": "1370720",
    "end": "1376039"
  },
  {
    "text": "address portions of what this uh may have addressed this particular vulnerability but in general they would",
    "start": "1376039",
    "end": "1381440"
  },
  {
    "text": "not have uh allowed uh they would not have killed the process they would have allowed to keep running they may not",
    "start": "1381440",
    "end": "1386840"
  },
  {
    "text": "prevented the information disclosure but not um alerted that and disallowed access",
    "start": "1386840",
    "end": "1393120"
  },
  {
    "text": "that occurred so take over so think of this as a different kind of a privilege",
    "start": "1393120",
    "end": "1400559"
  },
  {
    "start": "1395000",
    "end": "1437000"
  },
  {
    "text": "drop now s introduced this amazing concept of if I try to make this",
    "start": "1400559",
    "end": "1407400"
  },
  {
    "text": "privilege call Beyond this point please kill me I am",
    "start": "1407400",
    "end": "1413200"
  },
  {
    "text": "untrustworthy uh you can think of it as uh send boxing but this is actually",
    "start": "1413200",
    "end": "1418799"
  },
  {
    "text": "policy this is expression of intent the same thing goes to touching raw data",
    "start": "1418799",
    "end": "1425159"
  },
  {
    "text": "your parser your exposed parser is the riskiest part and it should not be",
    "start": "1425159",
    "end": "1431760"
  },
  {
    "text": "touching anything but raw data and wherever it's uh putting its well-formed",
    "start": "1431760",
    "end": "1437279"
  },
  {
    "start": "1437000",
    "end": "1505000"
  },
  {
    "text": "P data so we expanded this concept to a scada IC System uh there is a protocol a",
    "start": "1437279",
    "end": "1445559"
  },
  {
    "text": "rather uh nasty and complex protocol called dnp3 it uh chances are it keeps",
    "start": "1445559",
    "end": "1452480"
  },
  {
    "text": "your lights on uh this is very popular in the US power industry and this protocol uh the parsers for that",
    "start": "1452480",
    "end": "1458720"
  },
  {
    "text": "protocol have been uh shown to be extremely vulnerable uh there was a talk about how you can uh take over a master",
    "start": "1458720",
    "end": "1465600"
  },
  {
    "text": "controller device at the control center by Adam Crane and Chris srun and that",
    "start": "1465600",
    "end": "1472120"
  },
  {
    "text": "was a pretty major deal so then uh what can you do well you can isolate the",
    "start": "1472120",
    "end": "1479399"
  },
  {
    "text": "parser and you can have the parser exhaustively inspect your syntax before",
    "start": "1479399",
    "end": "1485200"
  },
  {
    "text": "it lets every anything else uh interact with it now I'm not going to talk about how we structured the parser uh you can",
    "start": "1485200",
    "end": "1493240"
  },
  {
    "text": "find this information at the LC language information uh language uh theoretic uh",
    "start": "1493240",
    "end": "1498640"
  },
  {
    "text": "Security Site uh at this URL uh but the important thing is that we broke the parser",
    "start": "1498640",
    "end": "1504840"
  },
  {
    "text": "out and then we isolated the parser knowing that the raw data buffers are",
    "start": "1504840",
    "end": "1510760"
  },
  {
    "start": "1505000",
    "end": "1542000"
  },
  {
    "text": "likely poison so your parser is really the only thing that should be touching",
    "start": "1510760",
    "end": "1515880"
  },
  {
    "text": "them and your parser is only supposed to write into uh a buffer where it deposits",
    "start": "1515880",
    "end": "1523039"
  },
  {
    "text": "the well typed pared objects and nothing else uh touches uh the par data uh the",
    "start": "1523039",
    "end": "1530360"
  },
  {
    "text": "rest of the code is only allowed to uh look at the WEP typed output of the",
    "start": "1530360",
    "end": "1536720"
  },
  {
    "text": "parser and we implemented that we broke the uh dnp3 proxy out uh we put it on",
    "start": "1536720",
    "end": "1543720"
  },
  {
    "text": "this uh machine this is an industrial computer uh you would find one sitting in a substation and we fuzzed it uh we",
    "start": "1543720",
    "end": "1552840"
  },
  {
    "text": "fuzz the heck out of it using uh both American fuzzy lop and a specialized par",
    "start": "1552840",
    "end": "1558640"
  },
  {
    "text": "F that was written for the protocol uh and it stood up pretty well if you want",
    "start": "1558640",
    "end": "1564039"
  },
  {
    "text": "to look at those demos again look at the URL at the previous slide and here uh is",
    "start": "1564039",
    "end": "1569919"
  },
  {
    "text": "the policy so it was a very simple policy that just isolates the parser from the rest of processing",
    "start": "1569919",
    "end": "1577799"
  },
  {
    "text": "next so this is a similar diagram to what we showed for op SSH uh indicating the sections of code and data which each",
    "start": "1577840",
    "end": "1584720"
  },
  {
    "text": "state can touch uh again we have an initialization state which um controls",
    "start": "1584720",
    "end": "1589919"
  },
  {
    "text": "reading into the input buffer or writing into the input buffer I should say reading from the network writing into",
    "start": "1589919",
    "end": "1595159"
  },
  {
    "text": "the input buffer the Gen transition state to the dmp3 parsing state which uh",
    "start": "1595159",
    "end": "1600880"
  },
  {
    "text": "consumes input from the input buffer and outputs uh well-formed um dmp3 by",
    "start": "1600880",
    "end": "1606679"
  },
  {
    "text": "invoking callbacks in the dmp3 Callback state which uh takes the well type data",
    "start": "1606679",
    "end": "1612600"
  },
  {
    "text": "and reconstructs dmp3 to pass on as a validating proxy and so you have your hardened part",
    "start": "1612600",
    "end": "1618360"
  },
  {
    "text": "or protecting the rest of your data whatever you do with it which is what you really really want to have in the",
    "start": "1618360",
    "end": "1623440"
  },
  {
    "text": "device that keeps your light on uh we went further and we integrated",
    "start": "1623440",
    "end": "1629200"
  },
  {
    "start": "1625000",
    "end": "1723000"
  },
  {
    "text": "our patch uh with the special Dr security packs uh patch for arm IC",
    "start": "1629200",
    "end": "1635159"
  },
  {
    "text": "devices so there is now a GRC packs version of their patch with coordinated",
    "start": "1635159",
    "end": "1643159"
  },
  {
    "text": "features uh that are specifically relevant to IC platforms uh and uh",
    "start": "1643159",
    "end": "1649320"
  },
  {
    "text": "excluding some of the features and breaking them out that are not so relevant to these platforms and we have",
    "start": "1649320",
    "end": "1655320"
  },
  {
    "text": "uh integrated our patches tested it and it it worked so uh uh you can uh if you're",
    "start": "1655320",
    "end": "1663120"
  },
  {
    "text": "interested in this uh this there is the URL uh for that uh GRC variant on",
    "start": "1663120",
    "end": "1669880"
  },
  {
    "text": "arm and so you see uh is does will this",
    "start": "1669880",
    "end": "1674960"
  },
  {
    "text": "solve all the uh problems possibly not right uh and uh there is no Silver",
    "start": "1674960",
    "end": "1680919"
  },
  {
    "text": "Bullet but now you have uh an idea what the components of your program are and",
    "start": "1680919",
    "end": "1688840"
  },
  {
    "text": "it is derived from nothing other than the standard build chain and if you want to throw in a special sections you can",
    "start": "1688840",
    "end": "1696000"
  },
  {
    "text": "easily do that uh with a compiler pragma the uh Linker will happily put those uh",
    "start": "1696000",
    "end": "1702039"
  },
  {
    "text": "into separate sections and our unforgetful loader will happily load it and so uh of course the question is",
    "start": "1702039",
    "end": "1710279"
  },
  {
    "text": "how did we do that and what did we have to do uh to the uh Linux kernel loader",
    "start": "1710279",
    "end": "1715919"
  },
  {
    "text": "uh for this uh accles for those akles between memory regions uh to take place and be enforceable and Julian is going",
    "start": "1715919",
    "end": "1723200"
  },
  {
    "start": "1723000",
    "end": "1727000"
  },
  {
    "text": "to talk about that and this is going to be a deep deep dive yes and I'll start that deep dive",
    "start": "1723200",
    "end": "1729960"
  },
  {
    "text": "by going over the various mechanisms that Linux gridle and in this case an",
    "start": "1729960",
    "end": "1735440"
  },
  {
    "text": "x86 CPU used to run a program and set up memory and then explain where we can hook in to enforce an elf policy",
    "start": "1735440",
    "end": "1745279"
  },
  {
    "text": "neatly so a program starts off as a set of libraries and object files produced",
    "start": "1745279",
    "end": "1752120"
  },
  {
    "start": "1748000",
    "end": "1779000"
  },
  {
    "text": "by your compiler that contain different elf sections as already mentioned by default there'll be sections for code",
    "start": "1752120",
    "end": "1758440"
  },
  {
    "text": "for data various helper structures for dynamic loading Dynamic linking and",
    "start": "1758440",
    "end": "1763559"
  },
  {
    "text": "metadata but you can easily you can add annotations to your program",
    "start": "1763559",
    "end": "1768640"
  },
  {
    "text": "to make to split off different parts of code and data into their own sections as",
    "start": "1768640",
    "end": "1774279"
  },
  {
    "text": "well and that way you can pick and choose a granularity for your policy as",
    "start": "1774279",
    "end": "1779640"
  },
  {
    "start": "1779000",
    "end": "1827000"
  },
  {
    "text": "necessary once you have all of your object files and libraries you pass them off to the Linker which looks at all the",
    "start": "1779640",
    "end": "1785960"
  },
  {
    "text": "sections and groups them very clely into segments so it will take all the",
    "start": "1785960",
    "end": "1791399"
  },
  {
    "text": "different sections you have from every input file see okay here's some that are read only it will combine all of these",
    "start": "1791399",
    "end": "1797679"
  },
  {
    "text": "into readon data here's things that a read write it'll combine all of these into a regular data segment and here's",
    "start": "1797679",
    "end": "1804640"
  },
  {
    "text": "all the code throw it all together concatenate it put it into a text",
    "start": "1804640",
    "end": "1809679"
  },
  {
    "text": "segment which discards a lot of information and the only things that the",
    "start": "1809679",
    "end": "1814840"
  },
  {
    "text": "only intent that is enforced from all this Rich structure that we had before",
    "start": "1814840",
    "end": "1820039"
  },
  {
    "text": "are the three read write and execute bits and even that enforcement has only happened in the last 10 years when",
    "start": "1820039",
    "end": "1825440"
  },
  {
    "text": "people started adding the NX bit when you then want to start your program",
    "start": "1825440",
    "end": "1830960"
  },
  {
    "text": "that you get if your program was statically linked It's relatively straightforward the Linux kernel in the",
    "start": "1830960",
    "end": "1837840"
  },
  {
    "text": "elfl binary format module will read your Elf file do a little bit of passing and",
    "start": "1837840",
    "end": "1843320"
  },
  {
    "text": "look at each of these segments and for every segment in your binary it will perform a me a map system call or the",
    "start": "1843320",
    "end": "1850679"
  },
  {
    "text": "colal internal version of it uh to map that part of the file into your address space and then it causes the user space",
    "start": "1850679",
    "end": "1858480"
  },
  {
    "text": "to jump into that into the entry point of your file if you use any shared",
    "start": "1858480",
    "end": "1863519"
  },
  {
    "text": "libraries it won't load your program straight away but it'll load a statically linked helper binary called",
    "start": "1863519",
    "end": "1868799"
  },
  {
    "text": "ldso which will pulse the elf file again and there's another talk about how many",
    "start": "1868799",
    "end": "1874159"
  },
  {
    "text": "fun bugs you can have when those two pulses disagree uh and the ldso will do",
    "start": "1874159",
    "end": "1879559"
  },
  {
    "text": "essentially the same thing that the kernel does that is it performs one M map system call for every segment and",
    "start": "1879559",
    "end": "1885320"
  },
  {
    "text": "then jumps to the entry point",
    "start": "1885320",
    "end": "1889320"
  },
  {
    "start": "1887000",
    "end": "1935000"
  },
  {
    "text": "the kernel now represents a process with a with a structure called task struct",
    "start": "1890679",
    "end": "1898039"
  },
  {
    "text": "and it has one of these task struct for everything that can execute that is every threat in your process and that",
    "start": "1898039",
    "end": "1903320"
  },
  {
    "text": "task struct contains both a copy of the program's execution context that is for",
    "start": "1903320",
    "end": "1908639"
  },
  {
    "text": "example in what signal Handler you're in what registers you have Etc so that the CPU can switch between different threads",
    "start": "1908639",
    "end": "1915399"
  },
  {
    "text": "and it contains information about the identity of the process such as its P ID uid",
    "start": "1915399",
    "end": "1920760"
  },
  {
    "text": "Etc because uh because the Linux supports multi-threading different tasks in the",
    "start": "1920760",
    "end": "1928039"
  },
  {
    "text": "kernel can share a single address space so there is a data structure to represent an address space called an mm",
    "start": "1928039",
    "end": "1934960"
  },
  {
    "text": "struct and multiple task structs can point to the same mm struct however each",
    "start": "1934960",
    "end": "1940399"
  },
  {
    "start": "1935000",
    "end": "1943000"
  },
  {
    "text": "task can only have a single address space this address space structure in",
    "start": "1940399",
    "end": "1945679"
  },
  {
    "start": "1943000",
    "end": "2011000"
  },
  {
    "text": "turn points to a link list of virtual memory memory area structures each VMA",
    "start": "1945679",
    "end": "1953279"
  },
  {
    "text": "struct uh represents the result of one memory map call essentially that was set up earlier by the Linker or done by the",
    "start": "1953279",
    "end": "1959639"
  },
  {
    "text": "program at runtime and con contains information about some region of virtual memory and points to the internal file",
    "start": "1959639",
    "end": "1967000"
  },
  {
    "text": "system or whatever other storage Linux uses for what data should live at this",
    "start": "1967000",
    "end": "1972120"
  },
  {
    "text": "particular address and what its permissions should be Now link lists are relatively slow to look up so there is",
    "start": "1972120",
    "end": "1977919"
  },
  {
    "text": "also an RB tree that indexes into the same structure and in recent versions of Linux of the Linux colel there's also an",
    "start": "1977919",
    "end": "1984559"
  },
  {
    "text": "L cache to make lookups into the structure even faster now the Intel CPU",
    "start": "1984559",
    "end": "1991080"
  },
  {
    "text": "doesn't know anything about the internals of the Linux kernel and if you say okay here's this tree structure that points to file system pointers the CPU",
    "start": "1991080",
    "end": "1998200"
  },
  {
    "text": "can't really do anything with that so there has to be another structure to tell the CPU which particular pages of",
    "start": "1998200",
    "end": "2005320"
  },
  {
    "text": "actual memory in the RAM chips in your computer are going to be mapped to which virtual address and for that there's",
    "start": "2005320",
    "end": "2012519"
  },
  {
    "start": "2011000",
    "end": "2137000"
  },
  {
    "text": "page tables the page tables also form a tree a fixed depth uh the every",
    "start": "2012519",
    "end": "2021080"
  },
  {
    "text": "virtual address is split up into different pieces and each of these pieces is used to look up uh the next",
    "start": "2021080",
    "end": "2027600"
  },
  {
    "text": "layer of that particular tree so you start off with the the first 16 bits and a 64-bit",
    "start": "2027600",
    "end": "2033919"
  },
  {
    "text": "processor actually have to be the same and discarded the next nine bits then",
    "start": "2033919",
    "end": "2039200"
  },
  {
    "text": "happen to be an index into the first structure the next nine bits after that which gives you another table you can",
    "start": "2039200",
    "end": "2044639"
  },
  {
    "text": "use the next nine bits of your address to look up uh another entry in that next",
    "start": "2044639",
    "end": "2051200"
  },
  {
    "text": "structure and so on and so forth until you finally get the physical memory page",
    "start": "2051200",
    "end": "2056599"
  },
  {
    "text": "that should be mapped to this particular virtual address each of these layers also contains Provisions for various",
    "start": "2056599",
    "end": "2064000"
  },
  {
    "text": "permissions bits such as the no execute bit or new Intel processes uh the supervisor mode execution",
    "start": "2064000",
    "end": "2071480"
  },
  {
    "text": "prevention bits Etc that allow you to perform some level of policy enforcement on the address",
    "start": "2071480",
    "end": "2077679"
  },
  {
    "text": "space now walking the page tables every time you would perform a memory memory read would",
    "start": "2077679",
    "end": "2084000"
  },
  {
    "text": "be very inefficient because you need four meor you need to touch physical memory four times to look up what",
    "start": "2084000",
    "end": "2090520"
  },
  {
    "text": "physical page and actual virtual address belongs to and so you would slow down your memory bandwidth by a factor of",
    "start": "2090520",
    "end": "2096000"
  },
  {
    "text": "five just by introducing that which given that modern processor already memory constrainted is very inefficient",
    "start": "2096000",
    "end": "2102680"
  },
  {
    "text": "therefore at every single layer of this process at every layer of page tables there is a there's a",
    "start": "2102680",
    "end": "2109480"
  },
  {
    "text": "cache and originally these caches would be evicted every time you change between",
    "start": "2109480",
    "end": "2116040"
  },
  {
    "text": "processes or address spaces nowadays the processes actually support tagging these",
    "start": "2116040",
    "end": "2121480"
  },
  {
    "text": "caches so you can have multiple address spaces share the same cache uh which allows frequent switching between",
    "start": "2121480",
    "end": "2128000"
  },
  {
    "text": "different page tables and this is of course a key enabler for",
    "start": "2128000",
    "end": "2133119"
  },
  {
    "text": "us as because otherwise we would not one important observation is that",
    "start": "2133119",
    "end": "2140040"
  },
  {
    "start": "2137000",
    "end": "2196000"
  },
  {
    "text": "these caches aren't dumb but they actually enforce a policy so the common view is that the NX",
    "start": "2140040",
    "end": "2147240"
  },
  {
    "text": "bit is merely a mitigation but it actually happens to be a policy that expresses intent and that policy is",
    "start": "2147240",
    "end": "2154240"
  },
  {
    "text": "checked by the caching mechanism that was originally introduced for performance before there was Hardware support for",
    "start": "2154240",
    "end": "2160079"
  },
  {
    "text": "DNX bit some projects such as uh PX actually simulated DNX bit because they",
    "start": "2160079",
    "end": "2167240"
  },
  {
    "text": "realized that there's separate caching hierarchies for instruction fetching and data accesses and that you could",
    "start": "2167240",
    "end": "2173599"
  },
  {
    "text": "desynchronize these caches which is unintended but allows you to unintentionally use those caching",
    "start": "2173599",
    "end": "2181040"
  },
  {
    "text": "mechanisms to enforce a policy and elfbc will reuse that trick",
    "start": "2181040",
    "end": "2187200"
  },
  {
    "text": "to enforce it to enforce data access policies",
    "start": "2187200",
    "end": "2193599"
  },
  {
    "text": "through different tlbs and PCI IDs and that view that everything the VM",
    "start": "2193599",
    "end": "2200040"
  },
  {
    "start": "2196000",
    "end": "2240000"
  },
  {
    "text": "layer is really about caching also stretches to the other layers that we have for example there is the various",
    "start": "2200040",
    "end": "2206680"
  },
  {
    "text": "layers inside the Linux crle are all caches of each other the page table is really a cache of the VMA",
    "start": "2206680",
    "end": "2213760"
  },
  {
    "text": "structs and each of these layers performs some checks and and of course",
    "start": "2213760",
    "end": "2218880"
  },
  {
    "text": "these checks get semantically less expressive as you get closer to the hardware the hardware can only check three bits whereas the the kernel page",
    "start": "2218880",
    "end": "2225920"
  },
  {
    "text": "fault Handler can perform much more complicated checks",
    "start": "2225920",
    "end": "2231319"
  },
  {
    "text": "and what we're doing in our elf bre prototype is we're just adding another layer of caching in between and using",
    "start": "2231319",
    "end": "2238319"
  },
  {
    "text": "that caching to enforce our policy for example",
    "start": "2238319",
    "end": "2243920"
  },
  {
    "start": "2240000",
    "end": "2299000"
  },
  {
    "text": "the when you have a page fault that is when you try to access some page and somewhere along that",
    "start": "2243920",
    "end": "2250720"
  },
  {
    "text": "hierarchy of page tables this there's a bit set that says okay don't continue here the CPU will raise a page fault and",
    "start": "2250720",
    "end": "2257760"
  },
  {
    "text": "the konel will then look up the VM area struct that I already mentioned earlier",
    "start": "2257760",
    "end": "2263599"
  },
  {
    "text": "uh to find out what whether the access is allowed or not and what physical",
    "start": "2263599",
    "end": "2269119"
  },
  {
    "text": "memory page it should map this to if it and here it inserts a a semantic policy",
    "start": "2269119",
    "end": "2274800"
  },
  {
    "text": "check if that virtual memory address is invalid it will send your processes s uh",
    "start": "2274800",
    "end": "2280400"
  },
  {
    "text": "segmentation violation and kill it similarly it over the time the Linux",
    "start": "2280400",
    "end": "2286160"
  },
  {
    "text": "kernel has acquired many different features that are added in and hooked in on this page fault Handler such as",
    "start": "2286160",
    "end": "2291920"
  },
  {
    "text": "swapping in and out memory doing implementing copy and write and growing stack and heat stacks and",
    "start": "2291920",
    "end": "2299800"
  },
  {
    "start": "2299000",
    "end": "2329000"
  },
  {
    "text": "heats alback changes the data model that I mentioned",
    "start": "2299800",
    "end": "2305599"
  },
  {
    "text": "earlier where there is an end to1 relationship between tasks and address spaces to an NM relationship so suddenly",
    "start": "2305599",
    "end": "2312440"
  },
  {
    "text": "a task can have different address spaces depending on what it's depending on what particular phase of execution it's",
    "start": "2312440",
    "end": "2318960"
  },
  {
    "text": "in and ordinarily because this is a data structure it's very Central to the Linux",
    "start": "2318960",
    "end": "2324400"
  },
  {
    "text": "kernel a lot of different kernel code and a lot of drivers would have to be changed to update all of these M copies",
    "start": "2324400",
    "end": "2330160"
  },
  {
    "text": "however if you think of elfbc as just another caching layer we don't have to modify the rest of the kernel the",
    "start": "2330160",
    "end": "2335680"
  },
  {
    "text": "observation is that each of the different address spaces for different phases of execution of our program are",
    "start": "2335680",
    "end": "2342000"
  },
  {
    "text": "going to be subsets of the same original address space that the programmer has in mind when they're",
    "start": "2342000",
    "end": "2347720"
  },
  {
    "text": "writing so we can keep that we can keep all the original data structures intact",
    "start": "2347720",
    "end": "2353440"
  },
  {
    "text": "and represented Base address space with the existing mm structs and if you squint enough those",
    "start": "2353440",
    "end": "2361160"
  },
  {
    "text": "different subsets that we actually want to enforce act a little bit like a cache",
    "start": "2361160",
    "end": "2367599"
  },
  {
    "text": "and now we only need invalidation of these caching layers instead of the",
    "start": "2367599",
    "end": "2373480"
  },
  {
    "text": "ability to mutate all these different address spaces as we move through execution of our",
    "start": "2373480",
    "end": "2378720"
  },
  {
    "text": "process and because there is already a complicated hierarchy of caching and that has changed a lot while Linux was",
    "start": "2378720",
    "end": "2385560"
  },
  {
    "text": "under development there is a flexible API in the Linux kernel called the mm Notifier plug-in API that allows you to",
    "start": "2385560",
    "end": "2392560"
  },
  {
    "text": "hook in custom invalidation mechanisms for different caches",
    "start": "2392560",
    "end": "2398200"
  },
  {
    "start": "2397000",
    "end": "2502000"
  },
  {
    "text": "we use that an instrument the page fault Handler to then enforce our policies when we",
    "start": "2399880",
    "end": "2407079"
  },
  {
    "text": "encounter a page fault in a process that is using eback we first look at the original page",
    "start": "2407079",
    "end": "2413880"
  },
  {
    "text": "tables that the rest of the kernel still maintains for us and see if it would have caused a",
    "start": "2413880",
    "end": "2419720"
  },
  {
    "text": "fault there in which case you're actually doing something else and you should do and we'll pass it off to the",
    "start": "2419720",
    "end": "2426359"
  },
  {
    "text": "old page fault Handler to for example swap in your process or perform copy of right Etc if that other page fault Handler",
    "start": "2426359",
    "end": "2433560"
  },
  {
    "text": "then performs any changes to the page tables which it usually does it will",
    "start": "2433560",
    "end": "2439800"
  },
  {
    "text": "send an mm Notifier update to us and we in turn will'll in turn invalidate our cach",
    "start": "2439800",
    "end": "2447319"
  },
  {
    "text": "page tables and then allow the user space process to resume execution and",
    "start": "2447319",
    "end": "2453079"
  },
  {
    "text": "the next time hopefully that access should not fail if however ever the memory access",
    "start": "2453079",
    "end": "2459040"
  },
  {
    "text": "that this particular phase of execution would have been a valid access if we hadn't been running elfbc then something",
    "start": "2459040",
    "end": "2465680"
  },
  {
    "text": "is happening that we want to catch with our policy and we look up our alback policy data structure if necessary move",
    "start": "2465680",
    "end": "2472160"
  },
  {
    "text": "our process to a different phase of execution so for example if you detect that you just jumped into code that belongs to a different Library if your",
    "start": "2472160",
    "end": "2479280"
  },
  {
    "text": "passer is done and is now invoking some callback we'll move to that different address",
    "start": "2479280",
    "end": "2485079"
  },
  {
    "text": "space uh if we find out that it would that would that the access wouldn't cause any change to the policy state",
    "start": "2485079",
    "end": "2491680"
  },
  {
    "text": "that we're currently in but should be allowed then we'll copy the page table",
    "start": "2491680",
    "end": "2497480"
  },
  {
    "text": "entry from the original Base address space into the one that's currently loaded in the processor so there's",
    "start": "2497480",
    "end": "2503599"
  },
  {
    "start": "2502000",
    "end": "2539000"
  },
  {
    "text": "different task structures uh that still point to the",
    "start": "2503599",
    "end": "2509240"
  },
  {
    "text": "original Linux kernel memory space which the rest of the kernel sees so we don't have to touch most of the kernel we",
    "start": "2509240",
    "end": "2515440"
  },
  {
    "text": "don't have to touch the millions of drivers that in Linux uh whereas only the eback layer sees that there is this",
    "start": "2515440",
    "end": "2522359"
  },
  {
    "text": "additional caching layer and there's an elfbc policy and we actually have different mm structs for each thread and",
    "start": "2522359",
    "end": "2528880"
  },
  {
    "text": "each thread can have multiple mm structs and these correspond to their own page tables which are actually loaded into",
    "start": "2528880",
    "end": "2535119"
  },
  {
    "text": "the processor and we use the mmu notify API to keep those in",
    "start": "2535119",
    "end": "2540280"
  },
  {
    "start": "2539000",
    "end": "2673000"
  },
  {
    "text": "sync on our x86 prototype that we have our proof of concept",
    "start": "2540280",
    "end": "2546119"
  },
  {
    "text": "implementation we built multiple benchmarks we built an engine X Benchmark and we built a synthetic",
    "start": "2546119",
    "end": "2551440"
  },
  {
    "text": "Benchmark that simulates the motivating example that we had earlier that you decode some images perform some",
    "start": "2551440",
    "end": "2558040"
  },
  {
    "text": "processing on it and then re-encode them as ping on those benchmarks we usually",
    "start": "2558040",
    "end": "2563760"
  },
  {
    "text": "found a performance overhead of about 5% on AMD processors however on Intel processors",
    "start": "2563760",
    "end": "2569760"
  },
  {
    "text": "which have a more sophisticated tlb caching hierarchy uh we found significantly worse performance",
    "start": "2569760",
    "end": "2576880"
  },
  {
    "text": "over heads of up to 30% part of this is because there were",
    "start": "2576880",
    "end": "2582800"
  },
  {
    "text": "our benchmarks are CPU bound and we exercise that switching between address spaces quite a bit and some of the data",
    "start": "2582800",
    "end": "2589280"
  },
  {
    "text": "structures I use in the kernel Etc could be significantly optimized for example for cach",
    "start": "2589280",
    "end": "2595280"
  },
  {
    "text": "Behavior Uh one interesting fact we found is that when you're already running under another virtualization",
    "start": "2595920",
    "end": "2601400"
  },
  {
    "text": "layer performance overhead was only about 15% that's because virtualization layers has",
    "start": "2601400",
    "end": "2607319"
  },
  {
    "text": "already affect virtual memory and people will seem to be willing to take that performance hit and virtual",
    "start": "2607319",
    "end": "2614720"
  },
  {
    "text": "memory uh hypervisors already provide uh more efficient means of switching",
    "start": "2614720",
    "end": "2621040"
  },
  {
    "text": "between different processes and try to optimize virtual memory handling lowering our performance overhead",
    "start": "2621040",
    "end": "2628040"
  },
  {
    "text": "somewhat so I should say that on arm uh we had a much better uh deal because in",
    "start": "2628040",
    "end": "2634400"
  },
  {
    "text": "fact we wrote our program to be bearing uh with its contact switches and its",
    "start": "2634400",
    "end": "2640079"
  },
  {
    "text": "phase switches and so unlike engine X which was written uh with a completely",
    "start": "2640079",
    "end": "2645520"
  },
  {
    "text": "different idea in mind uh we had uh negligible performance loss so uh it",
    "start": "2645520",
    "end": "2652400"
  },
  {
    "text": "really depends on how you plan your code uh but if you co-design it with the idea",
    "start": "2652400",
    "end": "2658480"
  },
  {
    "text": "that you want to runtime separate its components and enforce uh that this code",
    "start": "2658480",
    "end": "2664200"
  },
  {
    "text": "owns this data and only this data and vice versa uh then you can uh get away",
    "start": "2664200",
    "end": "2670280"
  },
  {
    "text": "with very small performance overhead and yes besides the performance",
    "start": "2670280",
    "end": "2676520"
  },
  {
    "start": "2673000",
    "end": "2736000"
  },
  {
    "text": "tuning opportunities that are already mentioned one one missing feature of the",
    "start": "2676520",
    "end": "2683319"
  },
  {
    "text": "x86 prototype is that it could that it currently is a bit clumsy to use with dynamically allocated memory but that's",
    "start": "2683319",
    "end": "2690559"
  },
  {
    "text": "mostly user space issue in that we would need an elf back aware maloc that puts dynamically allocated objects into the",
    "start": "2690559",
    "end": "2696160"
  },
  {
    "text": "right sections automatically without you having to implement your own memory allocator and there's ripe opportunities",
    "start": "2696160",
    "end": "2703319"
  },
  {
    "text": "to integrate it with other system called policy mechanisms like SE Linux and capsicum so that the rest of your",
    "start": "2703319",
    "end": "2709839"
  },
  {
    "text": "security mechanisms know what is actually going on inside your process and a neat feature of elfbc is",
    "start": "2709839",
    "end": "2716760"
  },
  {
    "text": "that these policies that you write can compose so someone who is writing a library can also provide an eback policy",
    "start": "2716760",
    "end": "2723160"
  },
  {
    "text": "that says okay these are the things it should access and of course it it's outstanding to write uh policies for",
    "start": "2723160",
    "end": "2730119"
  },
  {
    "text": "many popular libraries and now off to Max to talk a little bit about arm",
    "start": "2730119",
    "end": "2737160"
  },
  {
    "start": "2736000",
    "end": "2772000"
  },
  {
    "text": "implementation yeah I'll quickly just go over the differences between the arm implementation and the x86 one they're fairly minimal uh they have um similar",
    "start": "2737160",
    "end": "2745520"
  },
  {
    "text": "hook points in the page fa Handler uh in the arm implementation it was more geared towards embedded systems so we",
    "start": "2745520",
    "end": "2751200"
  },
  {
    "text": "focus more on uh the static linking case than the x86 one um the dynamic linking",
    "start": "2751200",
    "end": "2756400"
  },
  {
    "text": "case could be supported by providing a modified ld.so we created tools that",
    "start": "2756400",
    "end": "2761720"
  },
  {
    "text": "generate custom Linker scripts and pack binary policies that we load into a special segment that are parsed by the",
    "start": "2761720",
    "end": "2766880"
  },
  {
    "text": "uh Bin format elf uh loader inside the kernel",
    "start": "2766880",
    "end": "2772920"
  },
  {
    "start": "2772000",
    "end": "2798000"
  },
  {
    "text": "um again the page Handler uh modifications are pretty much the same we don't have an mm struct per state",
    "start": "2772920",
    "end": "2779839"
  },
  {
    "text": "though we uh just copy the page tables which simplifies some of the synchronization between uh VMAs and such",
    "start": "2779839",
    "end": "2784880"
  },
  {
    "text": "in each mm struct um and we use arms ASD support on uh",
    "start": "2784880",
    "end": "2790280"
  },
  {
    "text": "supported platforms to uh be similar to the PC ID uh tag tlb uh support in x86",
    "start": "2790280",
    "end": "2796720"
  },
  {
    "text": "to give us a performance boost and so to wrap up uh you know who",
    "start": "2796720",
    "end": "2802400"
  },
  {
    "start": "2798000",
    "end": "2861000"
  },
  {
    "text": "cares um well every programmer who uh",
    "start": "2802400",
    "end": "2808480"
  },
  {
    "text": "uses C and C++ static scoping to separate uh data from the rest of the",
    "start": "2808480",
    "end": "2815440"
  },
  {
    "text": "program does care uh and uh we should note that C++ took",
    "start": "2815440",
    "end": "2820720"
  },
  {
    "text": "over the world by making enforceable contracts so this is your opportunity by writing in this style to create",
    "start": "2820720",
    "end": "2827520"
  },
  {
    "text": "contracts uh between the uh parts of your application between the parts of your address space that are enforceable",
    "start": "2827520",
    "end": "2834559"
  },
  {
    "text": "at runtime and this is no mean thing uh and uh then of course there are",
    "start": "2834559",
    "end": "2840520"
  },
  {
    "text": "different ways to separate the parts of your program but only those that are enforceable matter",
    "start": "2840520",
    "end": "2848400"
  },
  {
    "text": "and uh well uh we are opening the way we believe uh to make these separations a",
    "start": "2848400",
    "end": "2855040"
  },
  {
    "text": "matter these operations are well understood and now they can be enforced and that's really the takeaway so uh",
    "start": "2855040",
    "end": "2863760"
  },
  {
    "start": "2861000",
    "end": "2908000"
  },
  {
    "text": "your per process beg of permissions is no longer a suitable policy with the",
    "start": "2863760",
    "end": "2869480"
  },
  {
    "text": "software being composed of so many parts uh and uh none of those relationships uh",
    "start": "2869480",
    "end": "2876200"
  },
  {
    "text": "being respect Ed or enforced at runtime instead all of that information is",
    "start": "2876200",
    "end": "2881920"
  },
  {
    "text": "available through the ABI so we just need to tweak the loader to pass it on",
    "start": "2881920",
    "end": "2887680"
  },
  {
    "text": "and to make the information from the elf uh structures available to your mm",
    "start": "2887680",
    "end": "2894520"
  },
  {
    "text": "structs then you can enforce it and then you can provide uh just enough",
    "start": "2894520",
    "end": "2899680"
  },
  {
    "text": "granularity that way uh to capture your intent to capture these special exclusive relationships between your",
    "start": "2899680",
    "end": "2906359"
  },
  {
    "text": "code components and your data components and uh This Is The Sweet",
    "start": "2906359",
    "end": "2912960"
  },
  {
    "start": "2908000",
    "end": "3092000"
  },
  {
    "text": "Spot and would like you to use it and it's on GitHub thank",
    "start": "2912960",
    "end": "2920440"
  },
  {
    "text": "you H questions okay so I have a question um uh I'm also working on the",
    "start": "2928640",
    "end": "2936799"
  },
  {
    "text": "elf sections and while I was looking at the elf section or the uh",
    "start": "2936799",
    "end": "2944240"
  },
  {
    "text": "VMAs uh I find there are many virtual machine areas that is uh Anonymous there",
    "start": "2944240",
    "end": "2951559"
  },
  {
    "text": "is no backing file and that it is not described in the L binaries so do you",
    "start": "2951559",
    "end": "2959040"
  },
  {
    "text": "take care of this Anonymous regions or ranges yeah that's correct so those are",
    "start": "2959040",
    "end": "2964760"
  },
  {
    "text": "the dynamically allocated memory what you can do with them is that you can tag",
    "start": "2964760",
    "end": "2969839"
  },
  {
    "text": "them at runtime by using a special malic this is what we do with our arm port with the IC uh uh proxy or uh you could",
    "start": "2969839",
    "end": "2980359"
  },
  {
    "text": "also derive it in different ways uh but uh yeah I mean where do labels come from",
    "start": "2980359",
    "end": "2986520"
  },
  {
    "text": "you need some rules for labeling them you can uh guess them or you can",
    "start": "2986520",
    "end": "2991839"
  },
  {
    "text": "explicitly uh specify them it's not hard any modern allocator allows you to",
    "start": "2991839",
    "end": "2997559"
  },
  {
    "text": "allocate from a specific Arena so you can have that Arena labeled uh if you care to control the uh Dynamic Anonymous",
    "start": "2997559",
    "end": "3005520"
  },
  {
    "text": "uh mappings as well okay thank you yeah I have a question more",
    "start": "3005520",
    "end": "3013319"
  },
  {
    "text": "questions I I actually like what you guys have presented um but uh when uh a",
    "start": "3013319",
    "end": "3020240"
  },
  {
    "text": "application's being attacked uh it is possible to do the uh system call to change the you know the NX setting to",
    "start": "3020240",
    "end": "3028079"
  },
  {
    "text": "make it uh say a part of the Heap uh writable so how do you I mean it doesn't seem like you could prevent that so we",
    "start": "3028079",
    "end": "3035280"
  },
  {
    "text": "filter system calls uh we have functionality for filtering system calls in the particular process stage uh to",
    "start": "3035280",
    "end": "3042400"
  },
  {
    "text": "the mask uh that is allowed for that phase uh we did not dwell on it in the presentation because this is uh people",
    "start": "3042400",
    "end": "3049880"
  },
  {
    "text": "have done that right this is your basic sandbox okay thank you",
    "start": "3049880",
    "end": "3056839"
  },
  {
    "text": "but what people have not done is tried to express the uh memory uh accles uh",
    "start": "3056839",
    "end": "3062720"
  },
  {
    "text": "between the parts of a program between the notional parts of the program in py uh that we consider our biggest",
    "start": "3062720",
    "end": "3069319"
  },
  {
    "text": "contribution uh hello I also had another question uh thanks for the talk was I'm sorry to interrupt really quickly we're",
    "start": "3069319",
    "end": "3075040"
  },
  {
    "text": "going to have to clear uh get these gentlemen off stage so we're going to take them outside on the side so any",
    "start": "3075040",
    "end": "3080680"
  },
  {
    "text": "additional questions if you want to catch them uh right ah here on the side it' be perfect sorry about that thank",
    "start": "3080680",
    "end": "3086040"
  },
  {
    "text": "you yeah the uh thank you again",
    "start": "3086040",
    "end": "3093000"
  }
]