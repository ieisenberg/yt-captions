[
  {
    "text": "hello everyone welcome to my talk um my name is thisis I come from Greece I work",
    "start": "2520",
    "end": "8880"
  },
  {
    "text": "for census and uh if you're familiar with the uh wimw exploitation uh you may",
    "start": "8880",
    "end": "15799"
  },
  {
    "text": "have heard my name in the past because I gave some uh some uh uh uh presentations few years",
    "start": "15799",
    "end": "23519"
  },
  {
    "text": "ago uh regarding RW exploitation so basically uh today is going to be uh uh",
    "start": "23519",
    "end": "30560"
  },
  {
    "text": "the uh my journey of how I initially approach VMware and how I managed to",
    "start": "30560",
    "end": "36760"
  },
  {
    "text": "find my first bus and how I um uh how I uh uh ultimately managed to",
    "start": "36760",
    "end": "45640"
  },
  {
    "text": "find some exploitation Primitives so my goal initially was to develop a guess to host Escape exploit",
    "start": "45640",
    "end": "52520"
  },
  {
    "text": "for viw workstation 12 and uh basically back then I was already an uh",
    "start": "52520",
    "end": "59120"
  },
  {
    "text": "experienced developer and uh uh exploit developer and I already knew some low-level stuff",
    "start": "59120",
    "end": "66960"
  },
  {
    "text": "but my disadvantage was that I was not familiar with how uh virtual machines work so uh that's why my uh first thing",
    "start": "66960",
    "end": "76400"
  },
  {
    "text": "to do is to actually map the attack surface of uh of VMware and uh mind you",
    "start": "76400",
    "end": "83079"
  },
  {
    "text": "that it's 2017 so that means that uh there are there is not enough literature",
    "start": "83079",
    "end": "88680"
  },
  {
    "text": "of how um uh of regarding VMware exploitation but I managed to find some resources uh",
    "start": "88680",
    "end": "95840"
  },
  {
    "text": "specifically the best resource that I found is actually a a presentation called cloudburst uh presented in black",
    "start": "95840",
    "end": "103320"
  },
  {
    "text": "hat and which was the first public attempt for SVGA exploitation SVGA is",
    "start": "103320",
    "end": "108759"
  },
  {
    "text": "the virtual Graphics device of VMware and uh there's also another attack",
    "start": "108759",
    "end": "113880"
  },
  {
    "text": "surface of uh uh of um uh the rpci",
    "start": "113880",
    "end": "120280"
  },
  {
    "text": "another presentation but I decided to go uh with the uh SVGA",
    "start": "120280",
    "end": "125479"
  },
  {
    "text": "device so before delving with the SVGA details uh let me first uh give you a",
    "start": "125479",
    "end": "131400"
  },
  {
    "text": "brief overview of how uh VMware works so there are in VMware there are three major components uh the first one you",
    "start": "131400",
    "end": "138040"
  },
  {
    "text": "can see on the top left is a uh oops sorry is a userland um application on",
    "start": "138040",
    "end": "145640"
  },
  {
    "text": "the host it's called uh vmx and uh this uh application basically uh implements",
    "start": "145640",
    "end": "152760"
  },
  {
    "text": "all the uh virtual devices and uh the second major uh so for example the SVGA",
    "start": "152760",
    "end": "158920"
  },
  {
    "text": "device or the uh or the uh V virtual network adapter or the virtual uh hard",
    "start": "158920",
    "end": "166280"
  },
  {
    "text": "disk and so on uh the second major component is the",
    "start": "166280",
    "end": "173200"
  },
  {
    "text": "uh the uh uh Kel driver on the uh host operating system which basically uh it",
    "start": "173200",
    "end": "180720"
  },
  {
    "text": "it it acts us intermediary between uh the host user application the vmx and",
    "start": "180720",
    "end": "186120"
  },
  {
    "text": "the hypervisor uh the hypervisor is uh uh the third major component and its",
    "start": "186120",
    "end": "191879"
  },
  {
    "text": "main responsibility is to pass the execution from uh the guest from The Horse to the guest operating system all",
    "start": "191879",
    "end": "198720"
  },
  {
    "text": "these three uh components basically work together uh in order for the um for the",
    "start": "198720",
    "end": "205440"
  },
  {
    "text": "virtual machine to execute properly from an attacker's point of view your main interesting on the vmx application",
    "start": "205440",
    "end": "212280"
  },
  {
    "text": "because uh since it implements the virtual devices that means that it has a lot of uh communication uh from inside",
    "start": "212280",
    "end": "220360"
  },
  {
    "text": "the guest uh operating system so that means that you can send uh input to uh",
    "start": "220360",
    "end": "226599"
  },
  {
    "text": "the vmx application from the guest and hopefully hit a bug for a guest to host",
    "start": "226599",
    "end": "231680"
  },
  {
    "text": "uh Escape exploit so uh svj device and as",
    "start": "231680",
    "end": "237239"
  },
  {
    "text": "mentioned before is the virtual Graphics device of swimware and uh the",
    "start": "237239",
    "end": "242840"
  },
  {
    "text": "communication between the SVGA device implemented on the vmx and the uh guest",
    "start": "242840",
    "end": "248920"
  },
  {
    "text": "operating system happens through some uh shed memory pics uh which are called",
    "start": "248920",
    "end": "254439"
  },
  {
    "text": "SVGA fifo uh there is a a very good paper published by the authors of the",
    "start": "254439",
    "end": "260959"
  },
  {
    "text": "SVGA device uh that describes the internals of the SVGA device and",
    "start": "260959",
    "end": "266759"
  },
  {
    "text": "additionally there is uh they also relate list some U mini operating",
    "start": "266759",
    "end": "272160"
  },
  {
    "text": "systems uh for uh internal svz testing and um uh yeah th those system basically",
    "start": "272160",
    "end": "280160"
  },
  {
    "text": "when I started I I downloaded them I combined them and I run them in order to understand how the uh uh virtual uh the",
    "start": "280160",
    "end": "288759"
  },
  {
    "text": "virtual Graphics device work uh more on this about later so on the vmx",
    "start": "288759",
    "end": "294360"
  },
  {
    "text": "application uh uh there is a dedicated thread called the uh yeah an SV the SVGA",
    "start": "294360",
    "end": "302000"
  },
  {
    "text": "thread which constantly pulls uh the those sh mappings the SVGA fif uh in",
    "start": "302000",
    "end": "309400"
  },
  {
    "text": "order to uh retrieve uh to retrieve commands sent by the guest user and uh",
    "start": "309400",
    "end": "315280"
  },
  {
    "text": "as you can see so uh yeah so as you can see on the",
    "start": "315280",
    "end": "323560"
  },
  {
    "text": "top uh uh on the function there's a function called uh process SVG fif",
    "start": "323560",
    "end": "328960"
  },
  {
    "text": "process fif and this function basically retrieves the command from the guest operating system and then it calls a",
    "start": "328960",
    "end": "335680"
  },
  {
    "text": "function called dispatch Handler uh all of the SVGA commands have this uh SVGA",
    "start": "335680",
    "end": "342280"
  },
  {
    "text": "command header on the top of the source code and this hander basically contains the index field uh and the index",
    "start": "342280",
    "end": "349400"
  },
  {
    "text": "indicates the command that was uh uh that was requested from the guest",
    "start": "349400",
    "end": "354960"
  },
  {
    "text": "operating system so that on the last line of this Source snippet is basically you can see uh you can see that there is",
    "start": "354960",
    "end": "361759"
  },
  {
    "text": "a A dispatch table that uses this index field in order to uh call the",
    "start": "361759",
    "end": "367120"
  },
  {
    "text": "appropriate Handler on the host side in order to service the request so the communication protocol",
    "start": "367120",
    "end": "373880"
  },
  {
    "text": "between the guest operating system and the SVGA device is called SVGA 3D",
    "start": "373880",
    "end": "379000"
  },
  {
    "text": "protocol and uh um it has at least uh five uh primitive SVGA uh objects uh for",
    "start": "379000",
    "end": "388759"
  },
  {
    "text": "example a surface a context Sader and so on uh and uh basically uh the uh there",
    "start": "388759",
    "end": "396199"
  },
  {
    "text": "are at least four different uh uh operations for the svj objects you can",
    "start": "396199",
    "end": "401479"
  },
  {
    "text": "see on the uh right list and uh those are for example you can define a surface",
    "start": "401479",
    "end": "407319"
  },
  {
    "text": "or you can destroy a surface uh memory objects uh or mobs for",
    "start": "407319",
    "end": "412880"
  },
  {
    "text": "short uh is basically the only object that is not uh Graphics related per se",
    "start": "412880",
    "end": "419800"
  },
  {
    "text": "and uh memory objects as used as a mechanism in order for uh to pass input",
    "start": "419800",
    "end": "428560"
  },
  {
    "text": "to pass uh VMware to pass input to the rest of the a SVGA object so for",
    "start": "428560",
    "end": "434039"
  },
  {
    "text": "instance you can bind one SVG object with a mob and the underlying data of",
    "start": "434039",
    "end": "441000"
  },
  {
    "text": "the mob will be used to initialize uh this uh SVG object uh on the other hand",
    "start": "441000",
    "end": "447960"
  },
  {
    "text": "readback the final operation is the last uh is the opposite operation",
    "start": "447960",
    "end": "453120"
  },
  {
    "text": "and that means that when you try to readback for example a surface that means the uh data from the host",
    "start": "453120",
    "end": "460520"
  },
  {
    "text": "operating system uh uh for the for the surface will be uh copied back to the uh",
    "start": "460520",
    "end": "469199"
  },
  {
    "text": "Mob that this surface is bound with so I have an example here for you uh to",
    "start": "469199",
    "end": "475680"
  },
  {
    "text": "understand it uh better uh so so uh on the uh the First",
    "start": "475680",
    "end": "481800"
  },
  {
    "text": "Command you can see this is basically the uh defined surface command uh and uh",
    "start": "481800",
    "end": "488199"
  },
  {
    "text": "uh you must provide for example to define a surface you must provide a surface ID uh and some other Graphics",
    "start": "488199",
    "end": "494639"
  },
  {
    "text": "related stuff such as the time the format of the surface or the dimensions of the surface and uh then you have to",
    "start": "494639",
    "end": "503800"
  },
  {
    "text": "uh also uh Define uh a mob uh and apart from the memory ID you also must Define",
    "start": "503800",
    "end": "510759"
  },
  {
    "text": "uh the PPN which is the uh the base the Third Field uh which is the physical um",
    "start": "510759",
    "end": "517320"
  },
  {
    "text": "page number so this will associate some memory in the guest region with a",
    "start": "517320",
    "end": "522880"
  },
  {
    "text": "specific mob then you can bind uh the next command on the right you can bind a",
    "start": "522880",
    "end": "528360"
  },
  {
    "text": "surface and a and and a mob and this will be used to initialize the contents",
    "start": "528360",
    "end": "533560"
  },
  {
    "text": "of the surface with the uh with the contents of the uh PPN provider provided",
    "start": "533560",
    "end": "539839"
  },
  {
    "text": "in the defined mob command and last one is the uh define surface the readback",
    "start": "539839",
    "end": "545040"
  },
  {
    "text": "operation simply you provide a surface ID and the contents will be uh returned",
    "start": "545040",
    "end": "551000"
  },
  {
    "text": "to the um uh to the PPN of the uh Mob that is uh bound",
    "start": "551000",
    "end": "558640"
  },
  {
    "text": "with okay uh so uh this is uh some Source Snippets",
    "start": "558640",
    "end": "565200"
  },
  {
    "text": "from the uh uh mini operating system that I mentioned before and uh initially in the beginning I was",
    "start": "565200",
    "end": "572880"
  },
  {
    "text": "modifying them and minimize them in order to understand how the SVGA device works and how Graphics work in",
    "start": "572880",
    "end": "581040"
  },
  {
    "text": "general and by accident uh while I was playing with them I copied this line This defined",
    "start": "581040",
    "end": "588399"
  },
  {
    "text": "surface command inside the while loop uh and then I compiled the uh the operating",
    "start": "588399",
    "end": "595720"
  },
  {
    "text": "systems and then I run it against VMware uh to test them and this is what uh was",
    "start": "595720",
    "end": "601000"
  },
  {
    "text": "happened so as you can see this an action access violation B and it basically the CPU tries to read from the",
    "start": "601000",
    "end": "607880"
  },
  {
    "text": "RDX register uh some memory and this memory is unmapped and basically this",
    "start": "607880",
    "end": "615079"
  },
  {
    "text": "happens because uh Windows page hip is enabled on this run so uh this will be",
    "start": "615079",
    "end": "621920"
  },
  {
    "text": "probably some kind of a free uh chunk uh so this uh uh seemed like a use of the",
    "start": "621920",
    "end": "628880"
  },
  {
    "text": "free bug uh immediately I start reverse engineering the VMware in order to",
    "start": "628880",
    "end": "634040"
  },
  {
    "text": "understand the what's the root cause of the problem and uh eventually I uh LD up",
    "start": "634040",
    "end": "639440"
  },
  {
    "text": "into this uh cast viget function and this V function takes a lot of input and",
    "start": "639440",
    "end": "645880"
  },
  {
    "text": "it uses that input to craft a buffer and pass it into a function which is called",
    "start": "645880",
    "end": "650920"
  },
  {
    "text": "key create uh this function will basically uh create a h a unique H and",
    "start": "650920",
    "end": "657079"
  },
  {
    "text": "this will be used next in a function called cast lookup uh which will try to",
    "start": "657079",
    "end": "663639"
  },
  {
    "text": "look up an Associated object with this has in a has table if the object is",
    "start": "663639",
    "end": "669399"
  },
  {
    "text": "found then it will simply return it on the other hand if it is not found it would allocate a new slot for the cast",
    "start": "669399",
    "end": "677519"
  },
  {
    "text": "uh it will then call one of these three functions uh which is basically allocate",
    "start": "677519",
    "end": "683120"
  },
  {
    "text": "a direct X object some graphics object and then it will store it inside the cast slot and then it will call cast",
    "start": "683120",
    "end": "690399"
  },
  {
    "text": "insert the actual problem exist inside the cast insert function because this",
    "start": "690399",
    "end": "696040"
  },
  {
    "text": "function basically tries to keep the uh has table up to a certain amount of size",
    "start": "696040",
    "end": "702600"
  },
  {
    "text": "So eventually as you keep inserting uh objects inside the has table uh it will",
    "start": "702600",
    "end": "708839"
  },
  {
    "text": "start freeing the deallocating the uh least recently used uh objects so and",
    "start": "708839",
    "end": "715440"
  },
  {
    "text": "that would probably create some dangling po pointers inside the uh host application of",
    "start": "715440",
    "end": "721480"
  },
  {
    "text": "inw so now that we analyze the buag let's see how my modification actually triggers it uh on the left this is a",
    "start": "721480",
    "end": "729480"
  },
  {
    "text": "sudo code that I reversed uh from the uh vmx application and basically it",
    "start": "729480",
    "end": "735959"
  },
  {
    "text": "contains all the references of the bagy function and if you notice the last one function it takes as an input in order",
    "start": "735959",
    "end": "742920"
  },
  {
    "text": "to to craft internally uh the H uh the texture state DOT value uh if you look",
    "start": "742920",
    "end": "749920"
  },
  {
    "text": "on the right side again this is the snippet of the uh modified version of",
    "start": "749920",
    "end": "755399"
  },
  {
    "text": "the uh Med operating system and uh uh you can see that it defines a surface",
    "start": "755399",
    "end": "762440"
  },
  {
    "text": "stores the value in a variable name texture surface ID and then it calls an SVGA function called be uh set texture",
    "start": "762440",
    "end": "770160"
  },
  {
    "text": "State and passes this uh texture surface ID as the value and this value is",
    "start": "770160",
    "end": "776120"
  },
  {
    "text": "basically the same as uh the one uh Below on the left so basically due to",
    "start": "776120",
    "end": "782720"
  },
  {
    "text": "the modification that now the defined surface command is inside the loop and",
    "start": "782720",
    "end": "788639"
  },
  {
    "text": "that means that texture surface ID is going to be different in each iteration",
    "start": "788639",
    "end": "793720"
  },
  {
    "text": "so basically the the bagy function will always in its iteration basically it",
    "start": "793720",
    "end": "798760"
  },
  {
    "text": "will called with different arguments and that would uh in um forcing inserting",
    "start": "798760",
    "end": "805079"
  },
  {
    "text": "new objects into the cast and eventually uh free the Le recently uh used objects",
    "start": "805079",
    "end": "811959"
  },
  {
    "text": "and triggering the bag uh on the right you can see this is basically the back trace of the bagy function uh it just",
    "start": "811959",
    "end": "818440"
  },
  {
    "text": "called from the SVG command called Throw Primitives and at that at that point I",
    "start": "818440",
    "end": "823519"
  },
  {
    "text": "wanted to move from the uh mini operating system and develop a realistic",
    "start": "823519",
    "end": "829399"
  },
  {
    "text": "exploit so I wanted to trigger the bag from inside the Windows Virtual Machine that's why I was reversing uh the SVG",
    "start": "829399",
    "end": "836800"
  },
  {
    "text": "handlers the draw Primitives and the function that the drop Primitives calls",
    "start": "836800",
    "end": "841839"
  },
  {
    "text": "in order to understand all the uh requirements to force the execution to go from the uh to call the B function uh",
    "start": "841839",
    "end": "850440"
  },
  {
    "text": "for draw Primitives command I must Define a context beforehand and also declare some vertices and from the sub",
    "start": "850440",
    "end": "858720"
  },
  {
    "text": "whatever command which is called by the draw Primitives I must call the SVGA command sent renderer targets and send",
    "start": "858720",
    "end": "866639"
  },
  {
    "text": "texture State before uh calling drop Primitives so all of this if I uh did",
    "start": "866639",
    "end": "872079"
  },
  {
    "text": "all of that I will able to trigger uh the buag from a Windows Virtual",
    "start": "872079",
    "end": "878279"
  },
  {
    "text": "Machine uh unfortunately uh while I was developing the Windows scel driver to trigger the B from Windows VM I noticed",
    "start": "878279",
    "end": "885399"
  },
  {
    "text": "that uh the mini operating system uh provided by the authors of the SVGA and the new fresh Windows machine have",
    "start": "885399",
    "end": "892639"
  },
  {
    "text": "something which is called uh uh Hardware compatibility which is basically a version inside the configuration of the",
    "start": "892639",
    "end": "898720"
  },
  {
    "text": "virtual machine and uh uh this number basically dictates uh what kind of V",
    "start": "898720",
    "end": "905920"
  },
  {
    "text": "virtual Hardware is going to be used from the uh VMware and uh since the mini",
    "start": "905920",
    "end": "913399"
  },
  {
    "text": "operating system were olded that means the hardware compatibility was also old",
    "start": "913399",
    "end": "918639"
  },
  {
    "text": "and the there was a different a difference in the svz 3D API between the",
    "start": "918639",
    "end": "925600"
  },
  {
    "text": "uh between the uh mini operating system and a fresh new Windows Virtual Machine",
    "start": "925600",
    "end": "932279"
  },
  {
    "text": "so for example drop Primitives command is deprecated and I was not able to uh",
    "start": "932279",
    "end": "937319"
  },
  {
    "text": "call it from uh the uh Windows VM however I managed to find by reversing a",
    "start": "937319",
    "end": "943240"
  },
  {
    "text": "similar command the draw which uh I was happy about that because they make uh the same things and additionally uh also",
    "start": "943240",
    "end": "951000"
  },
  {
    "text": "the set set texture State and set reader targets were also deprecated and I was",
    "start": "951000",
    "end": "956360"
  },
  {
    "text": "not able to call them but luckily I was able to uh meet the requirements in order to trigger the bug from this",
    "start": "956360",
    "end": "963319"
  },
  {
    "text": "defined context command uh so on the uh the on the bullets you can see the four",
    "start": "963319",
    "end": "969720"
  },
  {
    "text": "requirements and uh first uh when I Define a a context then uh which is",
    "start": "969720",
    "end": "976800"
  },
  {
    "text": "basically I meet the first requirement and then when binding uh with a mob this",
    "start": "976800",
    "end": "982120"
  },
  {
    "text": "context and providing the data structure on the right as an input uh you can see",
    "start": "982120",
    "end": "988000"
  },
  {
    "text": "that uh B basically I'm able to uh to also provide the render targets the",
    "start": "988000",
    "end": "994399"
  },
  {
    "text": "vertex uh declarations and the texture State and finally meet all the requirements and Trigger the bag from",
    "start": "994399",
    "end": "1000959"
  },
  {
    "text": "the windows uh virtual machine and this is a s snippet from uh the Windows",
    "start": "1000959",
    "end": "1006639"
  },
  {
    "text": "scannel driver that triggers the bug and I have a function which is called uh init and draw and this function",
    "start": "1006639",
    "end": "1014360"
  },
  {
    "text": "basically will uh do all the preparation that is required in in order for the uh",
    "start": "1014360",
    "end": "1020480"
  },
  {
    "text": "driver to um uh to to trigger to to to call draw command",
    "start": "1020480",
    "end": "1026880"
  },
  {
    "text": "and uh actually trigger the function and in the buy function and insert uh new",
    "start": "1026880",
    "end": "1032880"
  },
  {
    "text": "slots into the H table and eventually uh start creating uh when the H table is",
    "start": "1032880",
    "end": "1039438"
  },
  {
    "text": "full start creating some uh dangling pointers so uh The Next Step that I had",
    "start": "1039439",
    "end": "1046199"
  },
  {
    "text": "to do is uh to uh uh find an interesting use of this uh fre buffer So eventually",
    "start": "1046199",
    "end": "1053919"
  },
  {
    "text": "by reversing the draw command I managed to found uh to found uh a function this",
    "start": "1053919",
    "end": "1060120"
  },
  {
    "text": "is basically the disassembly of the function you can see the first inunction is the uh fre buffer the use of the fre",
    "start": "1060120",
    "end": "1066400"
  },
  {
    "text": "buffer and uh uh it tries to the reference the stored the direct object",
    "start": "1066400",
    "end": "1071679"
  },
  {
    "text": "that is stor inside inside it and since it is a C++ object this means that by",
    "start": "1071679",
    "end": "1077280"
  },
  {
    "text": "the reference it again it will will take the V table and at that point I I I knew",
    "start": "1077280",
    "end": "1082400"
  },
  {
    "text": "that if I somehow managed to reclaim uh that uh hip tank uh and call This And",
    "start": "1082400",
    "end": "1089080"
  },
  {
    "text": "forc to um uh vmx to go from that specific part I would be able to uh jump",
    "start": "1089080",
    "end": "1095559"
  },
  {
    "text": "to an address of my choice uh but again by reversing I",
    "start": "1095559",
    "end": "1100720"
  },
  {
    "text": "managed to find another SVG Handler which was called Sader and uh below you",
    "start": "1100720",
    "end": "1106080"
  },
  {
    "text": "can see uh the revers source code of this Handler and it calls maloc uh and",
    "start": "1106080",
    "end": "1111880"
  },
  {
    "text": "the argument the sizing bites argument of maloc it's uh controlled by the guest",
    "start": "1111880",
    "end": "1117200"
  },
  {
    "text": "and uh the allocate buffer will be used as a destination for M Copy operation",
    "start": "1117200",
    "end": "1122760"
  },
  {
    "text": "and the source or of the M Copy is also fully controlled by the guest uh on top",
    "start": "1122760",
    "end": "1129080"
  },
  {
    "text": "of that uh I'm able to call multiple times this function so allocate many chunks into the hip and also those",
    "start": "1129080",
    "end": "1136480"
  },
  {
    "text": "chunks will stay into the hip until uh the guest user called a destroy",
    "start": "1136480",
    "end": "1141559"
  },
  {
    "text": "command so uh by combining all of this I'm able to jump in an address of my",
    "start": "1141559",
    "end": "1147760"
  },
  {
    "text": "choice but now I have to defeat the aslr in order to provide for example a r uh",
    "start": "1147760",
    "end": "1153799"
  },
  {
    "text": "Gadget uh to jump um so as mentioned in the beginning",
    "start": "1153799",
    "end": "1161640"
  },
  {
    "text": "uh the redback uh mechanism uh is basically uh the mechanism for uh vmx",
    "start": "1161640",
    "end": "1168440"
  },
  {
    "text": "that uh um for VMware that basically copies the contents of the SVGA object back to",
    "start": "1168440",
    "end": "1175520"
  },
  {
    "text": "the guest uh user and uh I thought initially that this would be a good uh",
    "start": "1175520",
    "end": "1181000"
  },
  {
    "text": "surface to look for an infol bug and indeed uh surface the oper the readback operation of surface is pretty complex",
    "start": "1181000",
    "end": "1188679"
  },
  {
    "text": "due to the big number of formats formats for surfaces and additionally that",
    "start": "1188679",
    "end": "1193840"
  },
  {
    "text": "throughout the uh all the Handler of the surface rback operation it performs many",
    "start": "1193840",
    "end": "1199000"
  },
  {
    "text": "mathematical operation using the dimensions of the first the uh of the surface so I thought that this would be",
    "start": "1199000",
    "end": "1205120"
  },
  {
    "text": "the ideal scenario for an infol bag so uh on Windows host surfaces are",
    "start": "1205120",
    "end": "1211600"
  },
  {
    "text": "represented with uh uh with a data structure on the back end which is",
    "start": "1211600",
    "end": "1216760"
  },
  {
    "text": "called resource container and the most interesting thing about this uh data structure is that it contains a buffer",
    "start": "1216760",
    "end": "1224400"
  },
  {
    "text": "in which the contents of the surface uh will be uh stored and on wimw 12 the",
    "start": "1224400",
    "end": "1231559"
  },
  {
    "text": "version that was targeted uh uh there are basically nine different resource",
    "start": "1231559",
    "end": "1236799"
  },
  {
    "text": "container types uh and which type is going to be allocated basically uh it solely depends on the surface uh",
    "start": "1236799",
    "end": "1245280"
  },
  {
    "text": "format uh on the left you can see uh the",
    "start": "1245280",
    "end": "1250440"
  },
  {
    "text": "data structure of a resource container type 9 and you can see that contains uh",
    "start": "1250440",
    "end": "1255640"
  },
  {
    "text": "the type the format Dimension some stuff from from the surface also it contains",
    "start": "1255640",
    "end": "1260720"
  },
  {
    "text": "function pointers which is interesting and finally uh it contains a pointer to",
    "start": "1260720",
    "end": "1266799"
  },
  {
    "text": "buffers that will hold the contents of the surface that will be provided from the guest operating system and on the",
    "start": "1266799",
    "end": "1273919"
  },
  {
    "text": "right you can see the Constructor of the uh uh of the SVGA of um of the resource",
    "start": "1273919",
    "end": "1280640"
  },
  {
    "text": "container uh type 9 and uh basically it has a loop that uh it will calculate it",
    "start": "1280640",
    "end": "1287200"
  },
  {
    "text": "calculate the size of the buffers which are based basically on the dimensions of",
    "start": "1287200",
    "end": "1293240"
  },
  {
    "text": "the surface and then it will call this function called MKS mmgr aloc which is",
    "start": "1293240",
    "end": "1298600"
  },
  {
    "text": "just a simple wrapper on top of Malo in order to allocate the buffer uh if you notice carefully uh it forgot to zero",
    "start": "1298600",
    "end": "1306400"
  },
  {
    "text": "initialize the buffer return from Malo so uh at that point I thought what will",
    "start": "1306400",
    "end": "1312200"
  },
  {
    "text": "happen if I issue a readback operation in this uh surface and this resource",
    "start": "1312200",
    "end": "1318960"
  },
  {
    "text": "container and indeed uh this is again some source code uh taken from my Kel",
    "start": "1318960",
    "end": "1324559"
  },
  {
    "text": "driver and uh at the beginning I will Define uh two surfaces one source and",
    "start": "1324559",
    "end": "1330919"
  },
  {
    "text": "one destination surface then I will call draw command in order for the uh vmx",
    "start": "1330919",
    "end": "1336120"
  },
  {
    "text": "application to uh construct the resource container type then I will bind the",
    "start": "1336120",
    "end": "1342200"
  },
  {
    "text": "destination surface with the um uh with a mob and then I perform a surface copy",
    "start": "1342200",
    "end": "1350159"
  },
  {
    "text": "command and this uh command will take the uh contents from The Source surface",
    "start": "1350159",
    "end": "1357799"
  },
  {
    "text": "since and uh those will be the uninitialized contents of the resource container type 9 and we'll copy them",
    "start": "1357799",
    "end": "1364080"
  },
  {
    "text": "into the uh corresponding resource container of the destination surface and",
    "start": "1364080",
    "end": "1369120"
  },
  {
    "text": "after that immediately I will uh issue a readback operation to the destination",
    "start": "1369120",
    "end": "1374200"
  },
  {
    "text": "surface and that will lead to uh returning um",
    "start": "1374200",
    "end": "1379279"
  },
  {
    "text": "the uh those uninitialized data from uh the destination surface back to the",
    "start": "1379279",
    "end": "1386039"
  },
  {
    "text": "guest operating system so I have an infol link here but now I want to link",
    "start": "1386039",
    "end": "1391720"
  },
  {
    "text": "to link something meaningful in order to uh calculate to basically bypass the",
    "start": "1391720",
    "end": "1398679"
  },
  {
    "text": "aslr of uh of uh VMware and uh that's",
    "start": "1398679",
    "end": "1404600"
  },
  {
    "text": "why I did the following trick uh the first step I spread with with some resource container type is irrelevant",
    "start": "1404600",
    "end": "1411600"
  },
  {
    "text": "here because uh I mainly Focus to lick back um uh function pointers in order to",
    "start": "1411600",
    "end": "1419039"
  },
  {
    "text": "calculate the Base address of vmx uh then the next step I will free",
    "start": "1419039",
    "end": "1424159"
  },
  {
    "text": "all of the uh all of these uh resource containers and then I will allocate a",
    "start": "1424159",
    "end": "1430480"
  },
  {
    "text": "resource container of type 9 and I will be carefully carefully while I calculate",
    "start": "1430480",
    "end": "1436120"
  },
  {
    "text": "the dimensions of this uh resource container type 9 because I want that the",
    "start": "1436120",
    "end": "1442279"
  },
  {
    "text": "uh data buffer that will be allocated when the Constructor of the resource container uh is um created to be equal",
    "start": "1442279",
    "end": "1451880"
  },
  {
    "text": "uh to size as the resource container of the first spray uh this will result into",
    "start": "1451880",
    "end": "1457760"
  },
  {
    "text": "probably reclaiming a a hip tunk from the uh resource containers in the",
    "start": "1457760",
    "end": "1463320"
  },
  {
    "text": "beginning and uh Minds you that those res containers have function pointer and then by performing the readback trick uh",
    "start": "1463320",
    "end": "1471440"
  },
  {
    "text": "I will I'm able to basically uh lead back to the guest operating system those",
    "start": "1471440",
    "end": "1476799"
  },
  {
    "text": "function pointers uh which is like the last chain in the puzzle and uh I'm",
    "start": "1476799",
    "end": "1482600"
  },
  {
    "text": "defeating ASR by uh by this uh lick bag I'm able to trigger the free spray with",
    "start": "1482600",
    "end": "1488960"
  },
  {
    "text": "saders to reclaim the hip Chun and finally execute arbitrary hold uh code on the guest operating",
    "start": "1488960",
    "end": "1495600"
  },
  {
    "text": "system so now uh few few weeks later actually uh",
    "start": "1495600",
    "end": "1502520"
  },
  {
    "text": "VMware released a new version uh of uh VMware Workstation and as it usually",
    "start": "1502520",
    "end": "1510440"
  },
  {
    "text": "happens all of my B uh bags were patched either probably due to some code",
    "start": "1510440",
    "end": "1516399"
  },
  {
    "text": "refactoring or some kind of internal audit of VMware uh but I really wanted to uh",
    "start": "1516399",
    "end": "1523200"
  },
  {
    "text": "develop an escape exploit again and I thought it would take uh it would be a better chance because now I'm already",
    "start": "1523200",
    "end": "1530200"
  },
  {
    "text": "familiar with the internals of VMware I know where to look for bags inside the SVG device and I'm also more experienced",
    "start": "1530200",
    "end": "1538600"
  },
  {
    "text": "with the exploitation techniques uh at that point there was",
    "start": "1538600",
    "end": "1543760"
  },
  {
    "text": "some discussion on blog post and on the internet regarding some bags on the as on the uh",
    "start": "1543760",
    "end": "1549919"
  },
  {
    "text": "sm4 uh bite code parer of VMware SM sm4 stands for uh seder model 4 uh however",
    "start": "1549919",
    "end": "1558440"
  },
  {
    "text": "while I was reversing the draw command for the previous uh exploit I noticed",
    "start": "1558440",
    "end": "1563559"
  },
  {
    "text": "that apart from the sm4 parser there is also an sm3 parser inside the VMware and",
    "start": "1563559",
    "end": "1570080"
  },
  {
    "text": "uh I will confirm that I was able to reach from the guest operating system this parser and I thought that it would",
    "start": "1570080",
    "end": "1577640"
  },
  {
    "text": "be a good idea to try to look a bug over there because basically everybody else",
    "start": "1577640",
    "end": "1584679"
  },
  {
    "text": "in the planet is looking on the uh sm4 parer that it discussed on the internet",
    "start": "1584679",
    "end": "1589799"
  },
  {
    "text": "so I thought the bugs that I will found in the sm3 parser I'll hopefully uh uh",
    "start": "1589799",
    "end": "1595720"
  },
  {
    "text": "stay alive longer so uh without further Ado I started uh reversing the sm3",
    "start": "1595720",
    "end": "1602840"
  },
  {
    "text": "parser located in VMware so on the top uh uh left you can see basically the",
    "start": "1602840",
    "end": "1609919"
  },
  {
    "text": "entry point of the uh parser and it basically contains a loop uh and this",
    "start": "1609919",
    "end": "1616480"
  },
  {
    "text": "Loop will pass the instruction provid it uh into the um into a buffer and uh once",
    "start": "1616480",
    "end": "1624360"
  },
  {
    "text": "the instruction is part is passed it will be it will call this process sm3",
    "start": "1624360",
    "end": "1630159"
  },
  {
    "text": "function uh which basically just a big switch case that it contains and Handler",
    "start": "1630159",
    "end": "1636520"
  },
  {
    "text": "for every uh of the uh bite code op op codes that uh it",
    "start": "1636520",
    "end": "1643640"
  },
  {
    "text": "encounters uh we're mainly interested in the op code 51 in hex and on the bottom",
    "start": "1643640",
    "end": "1650080"
  },
  {
    "text": "left you can see basically this is the Handler which is called from the process sm3 instruction function and after some",
    "start": "1650080",
    "end": "1657600"
  },
  {
    "text": "uh basic checks it will call this function sub whatever and you can see",
    "start": "1657600",
    "end": "1662640"
  },
  {
    "text": "that the PSE sudo code on the right and uh this function will allocate uh using",
    "start": "1662640",
    "end": "1669799"
  },
  {
    "text": "uh uh MKS mmgr allocated with t function which is just again a function on top of",
    "start": "1669799",
    "end": "1675919"
  },
  {
    "text": "Malo a fixed size buffer and will store it inside an object and after that it",
    "start": "1675919",
    "end": "1682159"
  },
  {
    "text": "will store data directly from the um uh",
    "start": "1682159",
    "end": "1688000"
  },
  {
    "text": "from the bite code provided by the guest operating system uh inside that buffer and also it will increase the um value",
    "start": "1688000",
    "end": "1696320"
  },
  {
    "text": "of an offset so if this function is called again then it will uh write at",
    "start": "1696320",
    "end": "1701559"
  },
  {
    "text": "the next slop slot of this uh fix size buffer and uh yeah yeah basically again",
    "start": "1701559",
    "end": "1709200"
  },
  {
    "text": "here there's a ruse buag and the buag is that uh since this is a fix size buffer",
    "start": "1709200",
    "end": "1714679"
  },
  {
    "text": "uh if uh twoo many Encounters of the 51 in heex op code exist on the provided",
    "start": "1714679",
    "end": "1720720"
  },
  {
    "text": "sm3 by code that means that eventually uh there will be I I will be able to",
    "start": "1720720",
    "end": "1726320"
  },
  {
    "text": "write out of the boundaries of the uh of this uh vulnerable buffer so I have a",
    "start": "1726320",
    "end": "1733080"
  },
  {
    "text": "classical hip correction buag with semic Control Data and I use used in order to",
    "start": "1733080",
    "end": "1738919"
  },
  {
    "text": "exploit it I used um a low fragmentation Hep attack metadata attack actually but",
    "start": "1738919",
    "end": "1744000"
  },
  {
    "text": "uh it is out of topic right now so I will not get into details but the result I had I had from this attack was",
    "start": "1744000",
    "end": "1750720"
  },
  {
    "text": "basically that I was able to Leverage The buag from a hip corruption to actually uh write uh uh write",
    "start": "1750720",
    "end": "1759240"
  },
  {
    "text": "um at at the hip chunk of my choice and uh at that point I was thinking since",
    "start": "1759240",
    "end": "1766360"
  },
  {
    "text": "now I have a fully control over the a hiip chunk which Chun should they choose",
    "start": "1766360",
    "end": "1771960"
  },
  {
    "text": "in order to corrupt it and uh have uh arbitrary code execution and that was",
    "start": "1771960",
    "end": "1778200"
  },
  {
    "text": "the point that I realized the potential that resource container have for an",
    "start": "1778200",
    "end": "1783799"
  },
  {
    "text": "exploitation primitive uh and basically uh they have data buffers that are used",
    "start": "1783799",
    "end": "1789240"
  },
  {
    "text": "for copy operations between the guest and the host operating system they have function pointers which I can corrupt",
    "start": "1789240",
    "end": "1796159"
  },
  {
    "text": "them and they are also I can also spray the hip with resource containers and uh",
    "start": "1796159",
    "end": "1802480"
  },
  {
    "text": "it really seems like the ideal data structure for uh uh using it on",
    "start": "1802480",
    "end": "1807679"
  },
  {
    "text": "exploitation uh operations and uh this is how I use the resource container in order to uh",
    "start": "1807679",
    "end": "1813559"
  },
  {
    "text": "trigger the second bag so I sprayed the hip with two different res container types uh the first one is r rc1 or res",
    "start": "1813559",
    "end": "1821799"
  },
  {
    "text": "container one and the second is rc0 and different resource containers basically",
    "start": "1821799",
    "end": "1827480"
  },
  {
    "text": "uh have different sizes so that means that uh uh they will be placed in",
    "start": "1827480",
    "end": "1834760"
  },
  {
    "text": "different user blocks and uh uh I also be was careful enough in order to",
    "start": "1834760",
    "end": "1841640"
  },
  {
    "text": "calculate the dimensions of the resource container type one so the datab buffer",
    "start": "1841640",
    "end": "1846720"
  },
  {
    "text": "that was going to be allocated for the resource container um uh uh of type one",
    "start": "1846720",
    "end": "1852519"
  },
  {
    "text": "would be of the same size as of resource container zero so the would be like as",
    "start": "1852519",
    "end": "1860039"
  },
  {
    "text": "in the figure you can see uh so the data buffers of resource container type one will be in the same",
    "start": "1860039",
    "end": "1866760"
  },
  {
    "text": "user block as resource container zero then I will uh trigger the bug",
    "start": "1866760",
    "end": "1872519"
  },
  {
    "text": "corrupt uh hip uh and use the low fragmentation hip attack to control uh",
    "start": "1872519",
    "end": "1879679"
  },
  {
    "text": "some hip Chun of my choice and then um",
    "start": "1879679",
    "end": "1884720"
  },
  {
    "text": "basically uh my idea was to modify the dimensions of the resource container",
    "start": "1884720",
    "end": "1891440"
  },
  {
    "text": "type one and then trick viw to think that the end of the associate data",
    "start": "1891440",
    "end": "1898279"
  },
  {
    "text": "buffer to the resource container type one is actually bigger than it uh that it uh actually was and then by um uh by",
    "start": "1898279",
    "end": "1908639"
  },
  {
    "text": "performing a readback operation I would be able to leak back to the guest",
    "start": "1908639",
    "end": "1913840"
  },
  {
    "text": "operating system the contents of the uh resource container that is placed after",
    "start": "1913840",
    "end": "1919919"
  },
  {
    "text": "the data buffer as you can see uh in the figure uh and for the uh exploitation uh",
    "start": "1919919",
    "end": "1927399"
  },
  {
    "text": "uh for arbitrary codex so so by doing that I was able to leak uh the function pointers and Def SL SLR basically and",
    "start": "1927399",
    "end": "1934960"
  },
  {
    "text": "once I have defe the SLR then the next step was to corrupt some of the function",
    "start": "1934960",
    "end": "1940679"
  },
  {
    "text": "pointers and um basically to do that uh I could either use the uh metadata",
    "start": "1940679",
    "end": "1947960"
  },
  {
    "text": "attack in order to cor corrupt the function pointers of resource container one or even write to the data buffer",
    "start": "1947960",
    "end": "1957240"
  },
  {
    "text": "actually after the end of the data buffer to rc0 uh which uh uh basically would",
    "start": "1957240",
    "end": "1963679"
  },
  {
    "text": "corrupt the function pointer or rc0 and by already have the fit the SLR",
    "start": "1963679",
    "end": "1970080"
  },
  {
    "text": "and corrupting function pointer pointers I I'm able to calculate the to actually",
    "start": "1970080",
    "end": "1976600"
  },
  {
    "text": "uh uh execute arbitrary code on the guest operating system so to",
    "start": "1976600",
    "end": "1984240"
  },
  {
    "text": "conclude um targeting a cobbling software especially if you're not familiar with it uh can be really really",
    "start": "1984240",
    "end": "1991159"
  },
  {
    "text": "uh frustrating in the beginning but if you have something concrete and something solid solid as I",
    "start": "1991159",
    "end": "1997919"
  },
  {
    "text": "did with the first bag that I discovered by by accident likely uh this can be a",
    "start": "1997919",
    "end": "2004000"
  },
  {
    "text": "huge motivation and uh it can guide you to uh to towards discovering the paths",
    "start": "2004000",
    "end": "2011600"
  },
  {
    "text": "that are necessary to discover in order to understand the core and the",
    "start": "2011600",
    "end": "2016679"
  },
  {
    "text": "architecture of the surface that you are uh looking to for bugs and obviously the",
    "start": "2016679",
    "end": "2022480"
  },
  {
    "text": "more time that you spend on uh on a specific uh surface uh more efficient",
    "start": "2022480",
    "end": "2028679"
  },
  {
    "text": "you will become to uh to find new bags to uh to go through the code faster and",
    "start": "2028679",
    "end": "2035760"
  },
  {
    "text": "uh finally uh most important thing for me is to uh remember to be able to uh",
    "start": "2035760",
    "end": "2043720"
  },
  {
    "text": "recognize reusable exploitation Primitives and techniques uh as they",
    "start": "2043720",
    "end": "2049280"
  },
  {
    "text": "will be uh very uh invaluable in the Rog run for uh the future exploit that you",
    "start": "2049280",
    "end": "2055158"
  },
  {
    "text": "will have a real world example uh are the resource containers that I mentioned throughout the presentation which I",
    "start": "2055159",
    "end": "2062158"
  },
  {
    "text": "discovered a quite a few years ago and I can assure you that they can still be AB",
    "start": "2062159",
    "end": "2067760"
  },
  {
    "text": "used as of today uh that was that was the talk thank you so much for your",
    "start": "2067760",
    "end": "2075000"
  },
  {
    "text": "time uh so I think we have some time for questions uh and I also be at the rap",
    "start": "2079879",
    "end": "2085000"
  },
  {
    "text": "room after uh if you want to talk me in person",
    "start": "2085000",
    "end": "2090760"
  },
  {
    "text": "I can he you using it with esxi uh no basically because uh the bags",
    "start": "2112440",
    "end": "2120960"
  },
  {
    "text": "that I I've looked for are for uh for Windows operating",
    "start": "2120960",
    "end": "2126160"
  },
  {
    "text": "system uh I mean the host I I the host that I want to the the bags are specific",
    "start": "2126160",
    "end": "2133160"
  },
  {
    "text": "on the code of inware that exist on workstation for Windows operating system",
    "start": "2133160",
    "end": "2139599"
  },
  {
    "text": "so the I I I I never looked on it but I would guess that uh the the the same",
    "start": "2139599",
    "end": "2147040"
  },
  {
    "text": "bugs will not be uh will not be uh ex will not exist on sxi however uh I",
    "start": "2147040",
    "end": "2154040"
  },
  {
    "text": "believe that uh the rest of the dog regarding the exploitation primitive and the uh architecture in general would",
    "start": "2154040",
    "end": "2161240"
  },
  {
    "text": "be relevant toi as well yeah so can you talk about more",
    "start": "2161240",
    "end": "2168000"
  },
  {
    "text": "like how did you find that first can you talk on the uh can you talk can you talk",
    "start": "2168000",
    "end": "2174160"
  },
  {
    "text": "about more like what methodology that you used to find the bugs I think first",
    "start": "2174160",
    "end": "2179440"
  },
  {
    "text": "one accidental but you found more bugs right and the second is how did you reconstruct the symbols like the",
    "start": "2179440",
    "end": "2186160"
  },
  {
    "text": "functions name and the structures and all so uh to find more vulnerabilities",
    "start": "2186160",
    "end": "2193480"
  },
  {
    "text": "basically is behind the idea that as you can uh uh you are getting more",
    "start": "2193480",
    "end": "2200200"
  },
  {
    "text": "familiarized with the with the uh assembly basically because it's close Source uh you you you can tell which",
    "start": "2200200",
    "end": "2207880"
  },
  {
    "text": "part of the code are written uh more carefully and which part of the code are more or or maybe which part of the code",
    "start": "2207880",
    "end": "2216720"
  },
  {
    "text": "basically you can provide more input and usually if you are able to provide input you can probably you you will be able to",
    "start": "2216720",
    "end": "2223280"
  },
  {
    "text": "find uh more bugs so for me is actually that uh for example if you take a look",
    "start": "2223280",
    "end": "2230319"
  },
  {
    "text": "at the second bag which is the sm4 bag uh sm3 bug I noticed on the internet",
    "start": "2230319",
    "end": "2236520"
  },
  {
    "text": "that there was some uh sm4 discussion sm4 CVS from VMware and I thought that",
    "start": "2236520",
    "end": "2243040"
  },
  {
    "text": "since they are looking on for Sader bite code then it might be a good idea for me",
    "start": "2243040",
    "end": "2248520"
  },
  {
    "text": "as well to look them and regarding your second question about the symbols all of the symbols that you can see here are",
    "start": "2248520",
    "end": "2255480"
  },
  {
    "text": "basically uh reverse engineered by me so I was reversing VMware I was trying to",
    "start": "2255480",
    "end": "2261599"
  },
  {
    "text": "understand what is was happening and then I concluded into a specific name uh",
    "start": "2261599",
    "end": "2267000"
  },
  {
    "text": "however I I'm aware that is uh at least it used to be you can find it on the",
    "start": "2267000",
    "end": "2272400"
  },
  {
    "text": "internet that there used to be an version of sxi for arm that viw forgot",
    "start": "2272400",
    "end": "2279640"
  },
  {
    "text": "to strip it from symbols so that may be a good starting point uh regarding to",
    "start": "2279640",
    "end": "2285480"
  },
  {
    "text": "start looking for symbols yeah how long did this whole process take you yeah so",
    "start": "2285480",
    "end": "2292319"
  },
  {
    "text": "regarding the first buag was something about uh six seven months I would say",
    "start": "2292319",
    "end": "2297640"
  },
  {
    "text": "because my first time approach as I mentioned my first time time approaching",
    "start": "2297640",
    "end": "2302800"
  },
  {
    "text": "uh VMware and I was not very good at knowing uh how virtual machine works so",
    "start": "2302800",
    "end": "2309560"
  },
  {
    "text": "it took while some time I think it was around 7even months in order to fully develop the uh Escape exploit and for",
    "start": "2309560",
    "end": "2317400"
  },
  {
    "text": "the second bag uh once I F the the the the bag which probably took me about a",
    "start": "2317400",
    "end": "2324680"
  },
  {
    "text": "month or two then after that a month or two uh would be to develop the exploit",
    "start": "2324680",
    "end": "2330920"
  },
  {
    "text": "because I already knew uh the execution flowed inside the vmx and uh already",
    "start": "2330920",
    "end": "2337480"
  },
  {
    "text": "found the tricks uh with exploitation use by abusing the resource uh",
    "start": "2337480",
    "end": "2344838"
  },
  {
    "text": "containers okay uh that's all we are also out of time so thank you so much",
    "start": "2346960",
    "end": "2354640"
  }
]