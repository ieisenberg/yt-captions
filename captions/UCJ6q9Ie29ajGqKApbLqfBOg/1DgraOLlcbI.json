[
  {
    "start": "0",
    "end": "45000"
  },
  {
    "text": "most of you have probably heard the analogy that open source is free as in puppy that is you're responsible for the",
    "start": "719",
    "end": "6720"
  },
  {
    "text": "care and feeding and there's often times a lot more work than you realize when you build software using open",
    "start": "6720",
    "end": "12559"
  },
  {
    "text": "source libraries you get the good along with the bad you get the functionality that you wanted so you don't have to reinvent the",
    "start": "12559",
    "end": "17840"
  },
  {
    "text": "wheel but then you also get all the vulnerabilities that are inherent in that code base",
    "start": "17840",
    "end": "22960"
  },
  {
    "text": "today we're going to talk about software composition analysis specifically what does real world software look like from",
    "start": "22960",
    "end": "28560"
  },
  {
    "text": "the purpose from the perspective of library usage and inherited risk we'll use data science to uncover some",
    "start": "28560",
    "end": "35120"
  },
  {
    "text": "new quantitative insights on how open source libraries impact application risk and we think you'll be surprised by some",
    "start": "35120",
    "end": "41280"
  },
  {
    "text": "of the findings so i'm going to start with a quick preview here are some of the things we're going to show you today",
    "start": "41280",
    "end": "47680"
  },
  {
    "start": "45000",
    "end": "45000"
  },
  {
    "text": "even the smallest library 162 lines of code can introduce flaws into your application and there are a lot of small",
    "start": "47680",
    "end": "53680"
  },
  {
    "text": "libraries in the javascript ecosystem most libraries aren't even directly included but they're actually included",
    "start": "53680",
    "end": "59280"
  },
  {
    "text": "by other libraries in other words one library will include another which may include another and that's something",
    "start": "59280",
    "end": "64878"
  },
  {
    "text": "that developers often don't realize we'll show you that more libraries doesn't always mean more problems",
    "start": "64879",
    "end": "71119"
  },
  {
    "text": "you can actually build an application with hundreds sometimes thousands of libraries without introducing a ton of",
    "start": "71119",
    "end": "77040"
  },
  {
    "text": "vulnerabilities there are a lot better ways to prioritize fixes than by severity alone",
    "start": "77040",
    "end": "83040"
  },
  {
    "text": "so we'll show you a few different techniques that you can use to make sure that you're fixing what matters most",
    "start": "83040",
    "end": "88560"
  },
  {
    "text": "and then finally we'll show you that 81 of patchable vulnerabilities can be fixed with a minor library update and",
    "start": "88560",
    "end": "94479"
  },
  {
    "text": "most updates are small even when one update may introduce a new vulnerability which then you have to patch again it",
    "start": "94479",
    "end": "100000"
  },
  {
    "text": "creates this chain so we'll do some analysis of that as well a little bit about us my co-presenter",
    "start": "100000",
    "end": "106399"
  },
  {
    "text": "ben senior data scientist at scientia spent his whole career in data science i'm chief research officer at veracode",
    "start": "106399",
    "end": "112640"
  },
  {
    "text": "and i've spent my whole career in application security and so that's why we think you should spend the 40 minutes",
    "start": "112640",
    "end": "117680"
  },
  {
    "text": "listening to us today [Music] all the data in this report comes from",
    "start": "117680",
    "end": "123520"
  },
  {
    "start": "120000",
    "end": "120000"
  },
  {
    "text": "the varicode state of software security which is something that we released annually since 2010",
    "start": "123520",
    "end": "130000"
  },
  {
    "text": "we take all the customer data from the scans that we do for our customers we anonymize it and",
    "start": "130000",
    "end": "135280"
  },
  {
    "text": "then we report on trends that we're seeing in application security as that data set has gotten larger and",
    "start": "135280",
    "end": "140879"
  },
  {
    "text": "larger we have teamed up with the scientia institute who is specifically good at doing data science on cyber",
    "start": "140879",
    "end": "148080"
  },
  {
    "text": "security data and so they've helped us with the last few editions of this these reports give us and the readers",
    "start": "148080",
    "end": "154319"
  },
  {
    "text": "insights into industry performance it allows our customers to benchmark themselves against their peers and it",
    "start": "154319",
    "end": "159519"
  },
  {
    "text": "gives security practitioners and developers advice for improving appsec one other note is that this talk",
    "start": "159519",
    "end": "165840"
  },
  {
    "text": "includes more than what's covered in the report we did this update chain analysis which was not in the report so that's going to",
    "start": "165840",
    "end": "172400"
  },
  {
    "text": "be tagged onto the end also we've made a point to tag every chart or figure that we've used that was",
    "start": "172400",
    "end": "178480"
  },
  {
    "text": "from the report so that you can cross-reference it back if you happen to go read the real report",
    "start": "178480",
    "end": "183840"
  },
  {
    "text": "you can grab the report on the varicode website or on the scientia website [Music]",
    "start": "183840",
    "end": "189760"
  },
  {
    "start": "189000",
    "end": "189000"
  },
  {
    "text": "so today's agenda we'll go over the data sources for the study and some inherent biases we'll talk about library usage",
    "start": "189760",
    "end": "196000"
  },
  {
    "text": "both direct and transitive we'll talk about the flaws that we saw in those libraries and some of the patterns that we uncovered",
    "start": "196000",
    "end": "202239"
  },
  {
    "text": "then we'll get into that funnel of fixed prioritization how do you get at that huge amount of fixing and",
    "start": "202239",
    "end": "207920"
  },
  {
    "text": "patching to do in the most appropriate order and then what do those update chains look like when one library patch",
    "start": "207920",
    "end": "213519"
  },
  {
    "text": "introduces a new vulnerability as far as i know this is the largest",
    "start": "213519",
    "end": "219360"
  },
  {
    "start": "217000",
    "end": "217000"
  },
  {
    "text": "known quantitative study of application security findings anywhere out there and it has been since its inception",
    "start": "219360",
    "end": "225440"
  },
  {
    "text": "this particular report covers 12 months and that includes 85 000 unique applications and 351 000 unique",
    "start": "225440",
    "end": "232799"
  },
  {
    "text": "libraries [Music] any report based on data that comes from",
    "start": "232799",
    "end": "238560"
  },
  {
    "start": "235000",
    "end": "235000"
  },
  {
    "text": "an automated testing tool is going to have certain biases in it and so i want to acknowledge those",
    "start": "238560",
    "end": "243680"
  },
  {
    "text": "there are always going to be false positives that's things that the tool finds that are not actually there and",
    "start": "243680",
    "end": "249120"
  },
  {
    "text": "they're always going to be false negatives problems that are there that the is unable to detect",
    "start": "249120",
    "end": "255120"
  },
  {
    "text": "then there's selection bias as i mentioned this data set is based on varicode's customers so",
    "start": "255120",
    "end": "260639"
  },
  {
    "text": "anybody who's not a very good customer or who doesn't take application security seriously enough to be using a tool is",
    "start": "260639",
    "end": "265840"
  },
  {
    "text": "obviously not included customers also choose which applications they want to analyze so that gives a",
    "start": "265840",
    "end": "271280"
  },
  {
    "text": "bias as well finally there's an attribution bias which is more of an interpretation",
    "start": "271280",
    "end": "276639"
  },
  {
    "text": "as you're reading the report as you're watching this presentation you may have the inclination to blame the outcomes",
    "start": "276639",
    "end": "282400"
  },
  {
    "text": "that you see on things that may seem relevant but are not actually the reason why things happened so another way of thinking about this is",
    "start": "282400",
    "end": "289040"
  },
  {
    "text": "that we can tell you about what we see but we can't always tell you why we can speculate on that",
    "start": "289040",
    "end": "294880"
  },
  {
    "text": "so now that the disclaimers are out of the way i'll hand it over to ben to start diving into the data",
    "start": "294880",
    "end": "300560"
  },
  {
    "text": "thanks for that introduction chris i'm really excited to be here this is my first black hat briefing um and",
    "start": "300560",
    "end": "306720"
  },
  {
    "text": "remarkably you know i wish it could be under different circumstances but i'm really excited to talk to you about the",
    "start": "306720",
    "end": "312000"
  },
  {
    "text": "research we have today so the first question we need to ask when we're thinking about library usage",
    "start": "312000",
    "end": "317280"
  },
  {
    "text": "and the security implications of that is exactly how these libraries are being used in applications",
    "start": "317280",
    "end": "324240"
  },
  {
    "text": "and so the most basic question is just how many applica how many libraries get included in an application",
    "start": "324240",
    "end": "330479"
  },
  {
    "start": "327000",
    "end": "327000"
  },
  {
    "text": "so let's look at this first chart here along the horizontal axis we have the number of libraries included in an",
    "start": "330479",
    "end": "336560"
  },
  {
    "text": "application notice that it's on a log scale here so equal distances apart here",
    "start": "336560",
    "end": "342960"
  },
  {
    "text": "imply orders of magnitude gain rather than kind of a constant gain so we do this sometimes so we can have a better",
    "start": "342960",
    "end": "349440"
  },
  {
    "text": "idea of widespread distributions when things get really uh really disparate a lot of variants",
    "start": "349440",
    "end": "355759"
  },
  {
    "text": "and then the dots here represent how many libraries get included in an application at various levels so on the far left",
    "start": "355759",
    "end": "361919"
  },
  {
    "text": "side the blue dots this is the 10th percentile this means that about 10 of",
    "start": "361919",
    "end": "367280"
  },
  {
    "text": "applications have less than that blue dot number for a specific language and the right-hand side the yellow dots",
    "start": "367280",
    "end": "373600"
  },
  {
    "text": "these are uh application this is the top end the 90th percentile so about 10 of applications have",
    "start": "373600",
    "end": "379680"
  },
  {
    "text": "more libraries than this and the middle is the geometric mean you can think about this like the median it gives us a",
    "start": "379680",
    "end": "385280"
  },
  {
    "text": "good idea of kind of the typical application but it's robust to that big variance we",
    "start": "385280",
    "end": "391840"
  },
  {
    "text": "see here so there's a few things we want to point out so first of all there's just a large spread a large",
    "start": "391840",
    "end": "398160"
  },
  {
    "text": "difference among languages so you have languages like javascript where it's typical to have hundreds of libraries",
    "start": "398160",
    "end": "404960"
  },
  {
    "text": "included in an application and on the upper end sometimes thousands i think the top end is something like a",
    "start": "404960",
    "end": "410800"
  },
  {
    "text": "couple thousand libraries get included in a single application um whereas other languages like",
    "start": "410800",
    "end": "415919"
  },
  {
    "text": "python.net these have a couple dozen and so this really",
    "start": "415919",
    "end": "421039"
  },
  {
    "text": "illustrates kind of the philosophy and the culture that's built up around these languages whereas you have javascript",
    "start": "421039",
    "end": "426400"
  },
  {
    "text": "and ruby which kind of have smaller libraries that have single functionality",
    "start": "426400",
    "end": "431440"
  },
  {
    "text": "so they're they're putting in they're wrapping up a single function into a package that gets pulled in whereas",
    "start": "431440",
    "end": "436560"
  },
  {
    "text": "these other languages are kind of more complete you have families of functions together that get",
    "start": "436560",
    "end": "442479"
  },
  {
    "text": "wrapped up in a library that get imported so both of these have security implications so with lots of",
    "start": "442479",
    "end": "448639"
  },
  {
    "text": "small packages you're potentially bringing in lots of code developed by lots of different people increasing that wrist surface",
    "start": "448639",
    "end": "454720"
  },
  {
    "text": "but even with the kind of more unified packages you may be pulling in things that you don't need functionality that exposes that risk",
    "start": "454720",
    "end": "461199"
  },
  {
    "text": "surface potentially so kind of both ends of these things neither is better than the other but they both have their their security",
    "start": "461199",
    "end": "467840"
  },
  {
    "text": "implications now the obverse of this is how popular are some applications how many or",
    "start": "467840",
    "end": "474160"
  },
  {
    "start": "471000",
    "end": "471000"
  },
  {
    "text": "popular some libraries so how many applications use a specific library",
    "start": "474160",
    "end": "479680"
  },
  {
    "text": "so for this visual along the horizontal axis we have the percent of applications that are using any particular library",
    "start": "479680",
    "end": "485520"
  },
  {
    "text": "and the dots here are actually individual libraries the color of the dots indicates kind of",
    "start": "485520",
    "end": "491199"
  },
  {
    "text": "how dangerous they are and chris is going to go into this more a little bit later but the dark blue indicates that there's no known flaws the the kind of",
    "start": "491199",
    "end": "498800"
  },
  {
    "text": "uh gray blue there indicates we know there are some flaws the light blue means there are flaws and",
    "start": "498800",
    "end": "504319"
  },
  {
    "text": "there are proof of concept exploits for those flaws and the yellow means we've actually seen those exploited in the",
    "start": "504319",
    "end": "509840"
  },
  {
    "text": "wild so again we've broken it up by language here javascript the odd duck out here at the",
    "start": "509840",
    "end": "516000"
  },
  {
    "text": "top again we have libraries in javascript that are used in more than 90 of applications which is just really",
    "start": "516000",
    "end": "522320"
  },
  {
    "text": "remarkable that there are libraries out there that's almost guaranteed that it will be included in",
    "start": "522320",
    "end": "527760"
  },
  {
    "text": "an application we're going to talk specifically about what those are because javascript is such a strange",
    "start": "527760",
    "end": "532839"
  },
  {
    "text": "duck and then as we kind of go down we see things like net and swift at the bottom there where even the most popular",
    "start": "532839",
    "end": "539360"
  },
  {
    "text": "libraries aren't even used in half or in the case of swift like a third of applications so there are no must haves",
    "start": "539360",
    "end": "546399"
  },
  {
    "text": "for those but of course you know javascript and ruby in the middle we have lots and lots of",
    "start": "546399",
    "end": "554000"
  },
  {
    "text": "libraries that are used very very commonly and so kind of as an illustration",
    "start": "554000",
    "end": "559920"
  },
  {
    "text": "let's take a minute to talk about javascript because it is so weird we really need to talk about it",
    "start": "559920",
    "end": "566080"
  },
  {
    "text": "and get an idea so on the right hand side here you have the top 10 libraries used in javascript",
    "start": "566080",
    "end": "572399"
  },
  {
    "text": "and notice that top one inherits used in 92.3 percent of applications and even",
    "start": "572399",
    "end": "577760"
  },
  {
    "text": "like the the bottom of the top 10 um is used in 83 of applications almost 84",
    "start": "577760",
    "end": "585200"
  },
  {
    "text": "so uh what we really want to do is kind of dive in and think about these and do a little bit of a case study so as we",
    "start": "585200",
    "end": "590959"
  },
  {
    "text": "know uh javascript applications are incredibly small incredibly numerous i like to think about left pad",
    "start": "590959",
    "end": "597360"
  },
  {
    "text": "that was an incredibly small library all it did was add characters pad out of string",
    "start": "597360",
    "end": "602800"
  },
  {
    "text": "for in javascript um a developer pulled it off github and broke like half of the",
    "start": "602800",
    "end": "607839"
  },
  {
    "text": "internet um and so that's kind of the same thing we're seeing here um really small libraries particularly",
    "start": "607839",
    "end": "614240"
  },
  {
    "text": "the top three all have less than a thousand lines of code each and in fact that top library",
    "start": "614240",
    "end": "619519"
  },
  {
    "text": "inherits only has 36 lines and what all that does is is",
    "start": "619519",
    "end": "625279"
  },
  {
    "text": "replicates some functionality that's in jquery and if it's not available from jquery",
    "start": "625279",
    "end": "631360"
  },
  {
    "text": "natively it re-implements it the other ones have less than a thousand lines of code debug and ms we're going",
    "start": "631360",
    "end": "637279"
  },
  {
    "text": "to talk about them a little bit more in a second is array",
    "start": "637279",
    "end": "642320"
  },
  {
    "text": "which makes this top 10 at six only has four functional lines of code and does",
    "start": "642320",
    "end": "647440"
  },
  {
    "text": "exactly what you think so again these are getting pulled into applications",
    "start": "647440",
    "end": "653279"
  },
  {
    "text": "really frequently so that's not to say that even though they're really small that they're not",
    "start": "653279",
    "end": "658480"
  },
  {
    "text": "prone to flaws in fact the top the two and three libraries debug and ms",
    "start": "658480",
    "end": "664079"
  },
  {
    "text": "have versions that have known flaws with cves uh they're both denial of service cves",
    "start": "664079",
    "end": "670399"
  },
  {
    "text": "and they're both uh you know these are really popular libraries that get pulled in a lot and they have flaws even though",
    "start": "670399",
    "end": "676640"
  },
  {
    "text": "they're only 790 and 162 lines respectively so it is certainly something that we",
    "start": "676640",
    "end": "682079"
  },
  {
    "text": "need to think about that even if you have small functionality that's wrapped up in a package you could be increasing",
    "start": "682079",
    "end": "687360"
  },
  {
    "text": "your risk surface by bringing it in um so when i've been talking about this",
    "start": "687360",
    "end": "692560"
  },
  {
    "text": "so far is the popularity of libraries and and libraries that come into applications",
    "start": "692560",
    "end": "697600"
  },
  {
    "text": "i've been glossing over a big thing which is versioning so on that previous slide i'm treating",
    "start": "697600",
    "end": "704000"
  },
  {
    "start": "700000",
    "end": "700000"
  },
  {
    "text": "all versions that's the same so if any version of is array gets included in an application",
    "start": "704000",
    "end": "709839"
  },
  {
    "text": "uh then we include it in that in that chart so but it's it's instructive to look at",
    "start": "709839",
    "end": "714959"
  },
  {
    "text": "kind of the distribution of versions and see what developers are putting into their applications",
    "start": "714959",
    "end": "721519"
  },
  {
    "text": "so a few things that are just interesting here along the horizontal axis we've got individual version types you can see",
    "start": "721519",
    "end": "728000"
  },
  {
    "text": "labeled there and the vertical axis is the number of libraries that have any particular version uh now just one word",
    "start": "728000",
    "end": "734240"
  },
  {
    "text": "of caution we're all i'm only showing libraries here that we managed to parse the version number is in um developers",
    "start": "734240",
    "end": "741200"
  },
  {
    "text": "do a great job of trying to conform to the semantic versioning",
    "start": "741200",
    "end": "746320"
  },
  {
    "text": "system but they don't always do it you get weird things like 1.2 point",
    "start": "746320",
    "end": "752000"
  },
  {
    "text": "revision 7 which is not actually a good semantic versioning number but",
    "start": "752000",
    "end": "757519"
  },
  {
    "text": "we're able to parse quite a few of them um some interesting takeaways here um",
    "start": "757519",
    "end": "763200"
  },
  {
    "text": "about 18 of libraries that get included in applications use a major version of xero these are these pre-release",
    "start": "763200",
    "end": "769120"
  },
  {
    "text": "versions um we think you know maybe they have are more prone to flaws although we didn't see a lot of evidence of that",
    "start": "769120",
    "end": "775200"
  },
  {
    "text": "um and so you know developers are willing to take a risk if it's got the functionality they've got",
    "start": "775200",
    "end": "781200"
  },
  {
    "text": "um the other thing that i just like about this is it's very uh regular we've got these big spikes at major versions",
    "start": "781200",
    "end": "787120"
  },
  {
    "text": "this kind of exponential decay down to the next major version and then another spike again and those kind of blocks",
    "start": "787120",
    "end": "793360"
  },
  {
    "text": "also decay as we go to the right um so there's more about this in the report you know i encourage you to go",
    "start": "793360",
    "end": "799120"
  },
  {
    "text": "look if you kind of want to dig out your own story so when we're talking about including",
    "start": "799120",
    "end": "805040"
  },
  {
    "text": "libraries in into applications there's really two ways that we can do that",
    "start": "805040",
    "end": "811120"
  },
  {
    "text": "it's either the developer can directly include it or uh they can",
    "start": "811120",
    "end": "816880"
  },
  {
    "text": "or a library can get included because it was part of another library um you know as the saying goes it's turtles all the",
    "start": "816880",
    "end": "823279"
  },
  {
    "start": "821000",
    "end": "821000"
  },
  {
    "text": "way down um and this is uh this is uh pretty obvious right libraries like",
    "start": "823279",
    "end": "828720"
  },
  {
    "text": "applications aren't built in a vacuum developers are going to use those other",
    "start": "828720",
    "end": "833839"
  },
  {
    "text": "libraries that other functionality and bring it in in a way when they need it",
    "start": "833839",
    "end": "838880"
  },
  {
    "text": "so when a developer includes a library an application they're including every library that that uses and so we're",
    "start": "838880",
    "end": "845519"
  },
  {
    "text": "going to talk about there's two different types of dependencies uh one are direct dependencies where",
    "start": "845519",
    "end": "850639"
  },
  {
    "text": "that developer just says yes import this and the other ones are the transitive where it resolves all those",
    "start": "850639",
    "end": "857040"
  },
  {
    "text": "dependencies and brings all those into the application so we wanted to look at different applications and see how they broke down",
    "start": "857040",
    "end": "863920"
  },
  {
    "text": "on this kind of direct versus transitive line so again there's a lot of variation by",
    "start": "863920",
    "end": "870480"
  },
  {
    "start": "867000",
    "end": "867000"
  },
  {
    "text": "language so we broke it up by language to show that um on the top here we've got net",
    "start": "870480",
    "end": "876240"
  },
  {
    "text": "now the blue bars represent applications that have more direct dependencies than",
    "start": "876240",
    "end": "881440"
  },
  {
    "text": "transitive and that means about two-thirds of the inclusions are or two-thirds or more of the inclusions",
    "start": "881440",
    "end": "887199"
  },
  {
    "text": "are direct so about 90 of applications fall in this for net fall into this category that",
    "start": "887199",
    "end": "893600"
  },
  {
    "text": "almost everything is direct we're about only 9.3 which is more than two-thirds of the",
    "start": "893600",
    "end": "898639"
  },
  {
    "text": "application libraries are transitive dependencies and then about one percent are balanced",
    "start": "898639",
    "end": "905600"
  },
  {
    "text": "and so we can see kind of as we go uh down and look at the different languages there's again quite a bit of variation",
    "start": "905600",
    "end": "911519"
  },
  {
    "text": "so swift has this big chunk that are there's a lot of balance where we've got a lot of direct and transient",
    "start": "911519",
    "end": "917199"
  },
  {
    "text": "dependencies and then kind of at the bottom we've got ruby and javascript again these web applications with smaller libraries",
    "start": "917199",
    "end": "923519"
  },
  {
    "text": "where it's mostly transit dependencies so when we saw those applications with 1400 dependencies in",
    "start": "923519",
    "end": "930399"
  },
  {
    "text": "javascript it's likely that most of those were depe were dependencies of libraries not directly things that were",
    "start": "930399",
    "end": "937120"
  },
  {
    "text": "pulled in by the developer and so this is a lot of risk surface a lot of flaws that might be included in",
    "start": "937120",
    "end": "942720"
  },
  {
    "text": "an application that is not directly thought about by the developer it's just pulled in automatically in your build",
    "start": "942720",
    "end": "948880"
  },
  {
    "text": "system so definitely something that we need to be cautious about",
    "start": "948880",
    "end": "954800"
  },
  {
    "text": "and then so what is what's the implication for flaws here so two flaws i'm just and chris is going",
    "start": "954800",
    "end": "961199"
  },
  {
    "start": "959000",
    "end": "959000"
  },
  {
    "text": "to get to this directly after me but as a baseline about 70 of applications have a library",
    "start": "961199",
    "end": "968399"
  },
  {
    "text": "uh with some sort of flaw in it on the first scan um and then if we look at kind of the",
    "start": "968399",
    "end": "973519"
  },
  {
    "text": "breakdown of those uh flaws across the the dependency type more than a plurality 46.6 are",
    "start": "973519",
    "end": "980720"
  },
  {
    "text": "transitive dependencies that is most of the flaws that get included in an application are from these transitive",
    "start": "980720",
    "end": "986480"
  },
  {
    "text": "dependencies uh not direct inclusion of libraries about 42 percent are direct inclusion",
    "start": "986480",
    "end": "992240"
  },
  {
    "text": "and then occasionally we have both so somebody imports the library but it's also included as a transitive dependency",
    "start": "992240",
    "end": "997600"
  },
  {
    "text": "and that has a flaw in it and so this this is i think a really important point is that",
    "start": "997600",
    "end": "1004079"
  },
  {
    "text": "when you're developing your application and you're pulling in libraries you don't just have to worry about the flaws of things you're directly including but",
    "start": "1004079",
    "end": "1010399"
  },
  {
    "text": "you have to worry about things that are pulled in by those library developers those dependencies and so it's really",
    "start": "1010399",
    "end": "1017120"
  },
  {
    "text": "about managing that kind of fan out and those dependencies as it goes",
    "start": "1017120",
    "end": "1022160"
  },
  {
    "text": "so chris is now going to dive into talking about the flaws where they show up in different languages and the types",
    "start": "1022160",
    "end": "1028640"
  },
  {
    "text": "of flaws in in different applications that we've seen now that we understand the library",
    "start": "1028640",
    "end": "1034160"
  },
  {
    "text": "ecosystem let's take a look at the flaws that we inherit by using them",
    "start": "1034160",
    "end": "1039438"
  },
  {
    "start": "1039000",
    "end": "1039000"
  },
  {
    "text": "here we're showing a scatter plot where we compare the number of libraries included in the application on the x-axis",
    "start": "1039439",
    "end": "1045520"
  },
  {
    "text": "with the number of vulnerable libraries on the y-axis one black dot represents one application",
    "start": "1045520",
    "end": "1052240"
  },
  {
    "text": "and when there are lots of them in the same spot we use color to indicate the density or the count of applications so",
    "start": "1052240",
    "end": "1057679"
  },
  {
    "text": "the brighter the color the more data points at that particular location also be aware as you're looking at this",
    "start": "1057679",
    "end": "1063760"
  },
  {
    "text": "that both axes use a log scale so a few interesting notes here for java javascript and python we see a",
    "start": "1063760",
    "end": "1070880"
  },
  {
    "text": "definite scaling relationship the more libraries that are included in the application the more those have flaws",
    "start": "1070880",
    "end": "1077600"
  },
  {
    "text": "and this is the most obvious in the python chart where you see that concentration line the green bright spot trending with a clear path",
    "start": "1077600",
    "end": "1085440"
  },
  {
    "text": "up and towards the right so the more libraries you include the more vulnerabilities you get ruby is kind of a mixed bag you see dots",
    "start": "1085440",
    "end": "1092720"
  },
  {
    "text": "all over the place but you also see a small concentration of apps around the 100 libraries mark where there's about",
    "start": "1092720",
    "end": "1098320"
  },
  {
    "text": "20 of those libraries that are vulnerable there's a little bit of a blue area there now go.net and php are interesting in",
    "start": "1098320",
    "end": "1106320"
  },
  {
    "text": "the sense that most of the concentration is near the bottom of the chart indicating a very small number of flaws",
    "start": "1106320",
    "end": "1113200"
  },
  {
    "text": "even as the number of libraries included increases so this tells us one of two things",
    "start": "1113200",
    "end": "1119120"
  },
  {
    "text": "either the library ecosystem itself is safer or that developers in those languages",
    "start": "1119120",
    "end": "1124400"
  },
  {
    "text": "are actually better at avoiding the bad libraries more on that later so what you take away from this is that",
    "start": "1124400",
    "end": "1130960"
  },
  {
    "text": "in nearly every language there are there are applications with hundreds or even thousands of libraries that still have",
    "start": "1130960",
    "end": "1137440"
  },
  {
    "text": "zero or very few flaws and those are represented by the black dots sort of uh",
    "start": "1137440",
    "end": "1142960"
  },
  {
    "text": "as close to the x axis as possible so it is possible to have those",
    "start": "1142960",
    "end": "1148559"
  },
  {
    "text": "very large applications without introducing a ton of flaws so that's that's nice to know",
    "start": "1148559",
    "end": "1154480"
  },
  {
    "start": "1154000",
    "end": "1154000"
  },
  {
    "text": "just a simpler view but still broken down by language we think the data points shown in blue are the most interesting and illustrating the point",
    "start": "1154480",
    "end": "1160320"
  },
  {
    "text": "that language selection has a real impact on open source risk on the horizontal axis is the percent of",
    "start": "1160320",
    "end": "1166400"
  },
  {
    "text": "libraries in that language that contain at least one flaw on the vertical axis is the flaw density",
    "start": "1166400",
    "end": "1171760"
  },
  {
    "text": "of the average number of flaws per vulnerable library let's start with go go has a high percentage of libraries",
    "start": "1171760",
    "end": "1178240"
  },
  {
    "text": "with flaws but an overall low number of flaws per individual library now compared with go php has an even",
    "start": "1178240",
    "end": "1185039"
  },
  {
    "text": "higher rate of flawed libraries and over double the density of flaws in a given library so if you pick a php library at",
    "start": "1185039",
    "end": "1191679"
  },
  {
    "text": "random there's a better than 50 chance that contains a vulnerability so going back to what we saw in the",
    "start": "1191679",
    "end": "1197120"
  },
  {
    "text": "previous slide it would actually appear that go and php developers are pretty good at picking safer libraries despite",
    "start": "1197120",
    "end": "1203039"
  },
  {
    "text": "these really bad odds swifton.net are both very different ecosystems from the other languages",
    "start": "1203039",
    "end": "1209919"
  },
  {
    "text": "tied to a particular operating system and deployment style both of these languages have a low",
    "start": "1209919",
    "end": "1215600"
  },
  {
    "text": "percentage of flawed libraries and net does better than swift on both metrics despite a library population that's over",
    "start": "1215600",
    "end": "1221600"
  },
  {
    "text": "17 times bigger now instead of language let's look at the types of vulnerabilities that crop",
    "start": "1221600",
    "end": "1227919"
  },
  {
    "start": "1224000",
    "end": "1224000"
  },
  {
    "text": "up most often most people are familiar with the owasp top 10. three of those categories in the owasp",
    "start": "1227919",
    "end": "1234159"
  },
  {
    "text": "top 10 shown in blue account for nearly three-quarters of all the vulnerabilities",
    "start": "1234159",
    "end": "1239919"
  },
  {
    "text": "cross-site scripting is probably not a surprise it's been around forever it's fairly prevalent but the others may be a surprise",
    "start": "1239919",
    "end": "1245679"
  },
  {
    "text": "for example a8 insecure deserialization is number two and when we looked at",
    "start": "1245679",
    "end": "1250960"
  },
  {
    "text": "first party code deserialization came in eighth place but here for third party is second",
    "start": "1250960",
    "end": "1257120"
  },
  {
    "text": "i'd also expected injection to be a lot higher but it shows up only 8.8 which is",
    "start": "1257120",
    "end": "1262320"
  },
  {
    "text": "less than half of what we see for broken access control so it's not exactly what we expected it",
    "start": "1262320",
    "end": "1267760"
  },
  {
    "text": "to be now we take all this data and we break it down by both language and flaw",
    "start": "1267760",
    "end": "1273120"
  },
  {
    "start": "1269000",
    "end": "1269000"
  },
  {
    "text": "category we can actually see where the hot spots are i've put a star by the categories that",
    "start": "1273120",
    "end": "1278240"
  },
  {
    "text": "were in the top three on the previous slide so to read this chart take any row and column say a1 and php",
    "start": "1278240",
    "end": "1285120"
  },
  {
    "text": "and that tells you that 18.6 of php libraries bring along with them at least",
    "start": "1285120",
    "end": "1290559"
  },
  {
    "text": "one injection vulnerability the darker the cell the worse the situation",
    "start": "1290559",
    "end": "1296240"
  },
  {
    "text": "if we look at broken access control and cross-site scripting a5 and a7 we can see they're not only top three overall",
    "start": "1296240",
    "end": "1303280"
  },
  {
    "text": "but they're in the top three regardless of language but looking at the bottom row insecurity",
    "start": "1303280",
    "end": "1309280"
  },
  {
    "text": "serialization is heavily weighted towards java and php and we expect to see a lot of in java",
    "start": "1309280",
    "end": "1315200"
  },
  {
    "text": "because the first really modern talk that brought attention to this category covered zero days in gadget chains in",
    "start": "1315200",
    "end": "1321360"
  },
  {
    "text": "java this was a few years ago apache commons spring groovy some of",
    "start": "1321360",
    "end": "1326480"
  },
  {
    "text": "those but apparently php has a lot of it too so insert insecure deserialization",
    "start": "1326480",
    "end": "1332320"
  },
  {
    "text": "ended up at number two overall almost entirely because of the volume from java and php",
    "start": "1332320",
    "end": "1338320"
  },
  {
    "text": "if you look vertically php just seems to be full of bugs no matter which category you look at",
    "start": "1338320",
    "end": "1346480"
  },
  {
    "text": "so it's easy to look at this data and be overwhelmed with the sheer amount of vulnerable code that we inherit simply",
    "start": "1346480",
    "end": "1351760"
  },
  {
    "text": "by developing software the same way that everybody else does by borrowing functionality so in this section we'll look at some",
    "start": "1351760",
    "end": "1358000"
  },
  {
    "text": "ways to prioritize what's most important to fix there are a few different ways that we can take this huge list of",
    "start": "1358000",
    "end": "1363360"
  },
  {
    "text": "vulnerabilities and filter it down you can think of it like a funnel everything goes in the top and then what",
    "start": "1363360",
    "end": "1369200"
  },
  {
    "text": "we care about most comes out the bottom so the first filter is pretty easy to understand",
    "start": "1369200",
    "end": "1375200"
  },
  {
    "start": "1372000",
    "end": "1372000"
  },
  {
    "text": "not all vulnerabilities have exploits vulnerability reports contain a pretty wide variety of information sometimes a",
    "start": "1375200",
    "end": "1381600"
  },
  {
    "text": "researcher will publish a very detailed advisory with information on how to reproduce the vulnerability or how to",
    "start": "1381600",
    "end": "1387280"
  },
  {
    "text": "exploit it other times a library maintainer will roll the fix into a",
    "start": "1387280",
    "end": "1392320"
  },
  {
    "text": "release that doesn't really give much information about how the attacks might work most people don't have the skill to",
    "start": "1392320",
    "end": "1398080"
  },
  {
    "text": "develop and exploit but there are websites that crowdsource proof of concept exploits for known",
    "start": "1398080",
    "end": "1403120"
  },
  {
    "text": "vulnerabilities exploit db is one of them and then there's some commercial products like metasploit and canvas that",
    "start": "1403120",
    "end": "1408640"
  },
  {
    "text": "provide weaponized exploits which are essentially just more reliable versions of proof of concept exploits",
    "start": "1408640",
    "end": "1414320"
  },
  {
    "text": "so we use some data from kenneth security that cross-reference known vulnerabilities with publicly available",
    "start": "1414320",
    "end": "1420080"
  },
  {
    "text": "exploits which gives us a first cut as to which vulnerabilities are more likely to be exploited",
    "start": "1420080",
    "end": "1425840"
  },
  {
    "text": "so on average the blue vertical line 20.7 20.7 percent of all vulnerable",
    "start": "1425840",
    "end": "1432320"
  },
  {
    "text": "libra libraries have a proof of concept exploit but as you can see it varies widely by",
    "start": "1432320",
    "end": "1437600"
  },
  {
    "text": "language and once again php is that unfortunate leader and when you look at exploit",
    "start": "1437600",
    "end": "1443200"
  },
  {
    "start": "1441000",
    "end": "1441000"
  },
  {
    "text": "availability by owasp top 10 the outliers in the chart are the same three categories that we saw before",
    "start": "1443200",
    "end": "1449679"
  },
  {
    "text": "so not only are they more prevalent they're more likely to be exploited especially a8 and a5",
    "start": "1449679",
    "end": "1457360"
  },
  {
    "text": "now you see that cross-set scripting is a little bit further down only less than 10 of available exploits but oftentimes",
    "start": "1457360",
    "end": "1464000"
  },
  {
    "text": "crosstalk scripting is so easy to exploit that you don't need to release a tool so i would suspect that that number",
    "start": "1464000",
    "end": "1469440"
  },
  {
    "text": "in reality is a little bit underreported and probably a little bit higher",
    "start": "1469440",
    "end": "1474480"
  },
  {
    "text": "in general a skilled attacker can create an exploit for most of these so treat any of these numbers as minimums",
    "start": "1474480",
    "end": "1480799"
  },
  {
    "text": "but still using this chart combined with the previous one you'd probably prioritize",
    "start": "1480799",
    "end": "1486559"
  },
  {
    "text": "patching for a php destrialization bug before a python injection bug right even",
    "start": "1486559",
    "end": "1491919"
  },
  {
    "text": "though they might still have the same high cvss score high impact one represents more risk to the application",
    "start": "1491919",
    "end": "1498080"
  },
  {
    "text": "than the other because of that presence of an exploit [Music]",
    "start": "1498080",
    "end": "1503120"
  },
  {
    "start": "1502000",
    "end": "1502000"
  },
  {
    "text": "now prioritizing the vulnerabilities that have a public proof of concept exploit gets us from 97.4 of applications down",
    "start": "1503120",
    "end": "1510880"
  },
  {
    "text": "to 52.3 percent that's pretty good but there's more let's look at a couple other factors you",
    "start": "1510880",
    "end": "1516799"
  },
  {
    "text": "can use to prioritize even further canada security provided us some additional data that tells us which",
    "start": "1516799",
    "end": "1523039"
  },
  {
    "text": "vulnerabilities are being actively exploited in the wild now they do this by collecting telemetry",
    "start": "1523039",
    "end": "1528720"
  },
  {
    "text": "data from various network security vendors to demonstrate that now obviously it's impossible for any of",
    "start": "1528720",
    "end": "1534000"
  },
  {
    "text": "these tools to detect every attack the accuracy is dependent on having good iocs but it's still something we can use",
    "start": "1534000",
    "end": "1541120"
  },
  {
    "text": "so if you apply that filter now you're down to only 25 percent of applications",
    "start": "1541120",
    "end": "1546720"
  },
  {
    "text": "finally we can look at how the application actually uses the vulnerable library libraries have a lot of code in them",
    "start": "1546720",
    "end": "1553919"
  },
  {
    "text": "aside from those tiny javascript ones in plenty of cases an application may be dependent on a vulnerable library but",
    "start": "1553919",
    "end": "1560720"
  },
  {
    "text": "not actually executing any of the vulnerable code so for example let's say i download a math library",
    "start": "1560720",
    "end": "1566400"
  },
  {
    "text": "because i want to use the square root function and it's a vulnerable library but the vulnerability is in the fourier",
    "start": "1566400",
    "end": "1571679"
  },
  {
    "text": "transform function which is something that i never call so even though i'm using the library it's impossible for an attacker to",
    "start": "1571679",
    "end": "1578080"
  },
  {
    "text": "trigger that vulnerability because i don't use that function so the varicode product where this data",
    "start": "1578080",
    "end": "1583520"
  },
  {
    "text": "comes from looks for an execution path and if it sees one with a high degree of confidence it flags it to say this",
    "start": "1583520",
    "end": "1590240"
  },
  {
    "text": "application is definitely using the vulnerable library function so if we use this as our final filter",
    "start": "1590240",
    "end": "1596480"
  },
  {
    "text": "that gets us down to one percent of applications and this is not to say we should ignore",
    "start": "1596480",
    "end": "1601840"
  },
  {
    "text": "all the other library flaws none of these filters are perfect there's false negatives at every stage",
    "start": "1601840",
    "end": "1607440"
  },
  {
    "text": "but this gives us a framework for prioritizing what's most likely to be exploited and what's most important to",
    "start": "1607440",
    "end": "1613440"
  },
  {
    "text": "fix one more piece of good news is that most fixes are minor",
    "start": "1613440",
    "end": "1619679"
  },
  {
    "start": "1615000",
    "end": "1615000"
  },
  {
    "text": "if you've ever been a developer you know that a library upgrade can have side effects upgrading to a new major version can",
    "start": "1619679",
    "end": "1626559"
  },
  {
    "text": "have a blast radius where stuff breaks unexpectedly so for example an api or a config setting might be deprecated and",
    "start": "1626559",
    "end": "1633600"
  },
  {
    "text": "so that would break other code that you're using that depends on those deprecated things a minor version or patch is usually safe",
    "start": "1633600",
    "end": "1640000"
  },
  {
    "text": "though so if of the 73.8 percent of libraries that do have an update available the",
    "start": "1640000",
    "end": "1646399"
  },
  {
    "text": "vast majority of them 81 percent are a minor version or less minor patch or",
    "start": "1646399",
    "end": "1651679"
  },
  {
    "text": "revision meaning there's a really good chance you're going to be able to apply that update without breaking anything",
    "start": "1651679",
    "end": "1658640"
  },
  {
    "text": "so let's say you're using a vulnerable library and you patch it that's great but oh no now you find out the new",
    "start": "1659840",
    "end": "1666480"
  },
  {
    "text": "version has a different vulnerability so you have to patch again to get rid of that one",
    "start": "1666480",
    "end": "1671520"
  },
  {
    "text": "this could go on forever and ever right well maybe not we wanted to figure this",
    "start": "1671520",
    "end": "1676799"
  },
  {
    "text": "out because otherwise you just have to you know you're in this never-ending cycle so ben did some extra analysis on",
    "start": "1676799",
    "end": "1683600"
  },
  {
    "text": "these scenarios to understand what these update chains actually look like and so i'll hand it back over to him to talk",
    "start": "1683600",
    "end": "1689120"
  },
  {
    "text": "about what he's found okay so as chris said things are never that easy so we really",
    "start": "1689120",
    "end": "1695520"
  },
  {
    "text": "need to look at what these update chains look like so when you go to update a library",
    "start": "1695520",
    "end": "1701919"
  },
  {
    "text": "what's the next step and so before we kind of dig into the statistics and dig into the data and see",
    "start": "1701919",
    "end": "1707440"
  },
  {
    "text": "what it's like it's instructive to think about it ahead of time and think about what possibilities there are",
    "start": "1707440",
    "end": "1713279"
  },
  {
    "text": "um so let's start with the good possibilities um and there's two uh the best would be",
    "start": "1713279",
    "end": "1719039"
  },
  {
    "text": "there's a single update to a known version to a version with no known flaw",
    "start": "1719039",
    "end": "1724399"
  },
  {
    "text": "that is we just kind of move to the next version and it's fantastic the next thing that's maybe less ideal",
    "start": "1724399",
    "end": "1730960"
  },
  {
    "text": "but still good is if we can do multiple updates and get to a version with no known flaw",
    "start": "1730960",
    "end": "1736480"
  },
  {
    "text": "so you can update your library a couple times maybe you have to step through like major or minor versions but you do",
    "start": "1736480",
    "end": "1742240"
  },
  {
    "text": "get to that version with no known flaw now the less ideal version is that there's no update available at",
    "start": "1742240",
    "end": "1748880"
  },
  {
    "text": "the end of that chain and that can either be immediately there's no update available or after multiple steps there's no",
    "start": "1748880",
    "end": "1755600"
  },
  {
    "text": "update available now this isn't exactly the worst thing in the world because if an update is",
    "start": "1755600",
    "end": "1760880"
  },
  {
    "text": "available it may update a person a portion of the library that was flawed that you're using and new",
    "start": "1760880",
    "end": "1768080"
  },
  {
    "text": "flaws that get introduced are not necessarily don't necessarily affect your application they're not on that execution path um or they're in a",
    "start": "1768080",
    "end": "1775440"
  },
  {
    "text": "portion of the application that's never exposed in a way or that you can control in a different way",
    "start": "1775440",
    "end": "1781520"
  },
  {
    "text": "now there is one last possibility that we actually didn't think about ahead of time but found in the data",
    "start": "1781520",
    "end": "1788240"
  },
  {
    "text": "is that the suggested updates are circular so occasionally we'll have a",
    "start": "1788240",
    "end": "1793440"
  },
  {
    "text": "library version update another version update and then we'll get to an end point and it'll say no if you want to",
    "start": "1793440",
    "end": "1799200"
  },
  {
    "text": "avoid this new flaw you should downgrade to a previous version um and so when this happens it's it's not ideal so you",
    "start": "1799200",
    "end": "1806159"
  },
  {
    "text": "kind of have to pick your poison and where in this circle it might be that your flaw is",
    "start": "1806159",
    "end": "1811840"
  },
  {
    "text": "um now that's fine um so we we wanted to look at these all",
    "start": "1811840",
    "end": "1817600"
  },
  {
    "text": "possibilities and see what what it looks like and then ask some questions about what these chains are",
    "start": "1817600",
    "end": "1823440"
  },
  {
    "start": "1823000",
    "end": "1823000"
  },
  {
    "text": "so uh first of all is just what is the proportion of those possibilities where do these end um how many steps occur in",
    "start": "1823440",
    "end": "1830159"
  },
  {
    "text": "that change and are they gonna significantly increase that update size so where we said we had mostly patch and",
    "start": "1830159",
    "end": "1836720"
  },
  {
    "text": "minor versions are we going to have to now move to mostly major versions if we check out the chains",
    "start": "1836720",
    "end": "1842640"
  },
  {
    "text": "and thankfully i mostly have good news for you so how do the chains end",
    "start": "1842640",
    "end": "1848159"
  },
  {
    "start": "1845000",
    "end": "1845000"
  },
  {
    "text": "about a little over two-thirds end in this version that we have has no known flaw uh so about 34 percent get to that",
    "start": "1848159",
    "end": "1856080"
  },
  {
    "text": "multiple steps to a version that's unflawed and then about 33 percent uh it's just a single step so that's good",
    "start": "1856080",
    "end": "1863279"
  },
  {
    "text": "we can still do that on the 26.2 that's what you saw before these are libraries that have no one-step update and then",
    "start": "1863279",
    "end": "1870320"
  },
  {
    "text": "about 6.4 you might have this multiple steps and kind of get stuck and there's nothing to to go to now blessedly these",
    "start": "1870320",
    "end": "1876480"
  },
  {
    "text": "circular updates are where only about half percent of the time so you may have to kind of pick uh the",
    "start": "1876480",
    "end": "1881919"
  },
  {
    "text": "the least the least worst option in those update chains as you go",
    "start": "1881919",
    "end": "1889200"
  },
  {
    "text": "um so that's that's good news for us the next question how long are these chains",
    "start": "1889200",
    "end": "1895039"
  },
  {
    "start": "1893000",
    "end": "1893000"
  },
  {
    "text": "most are relatively short so across the horizontal axis here we've got the update chain length we just looked at",
    "start": "1895039",
    "end": "1900880"
  },
  {
    "text": "all those lengths and we can see that most are length one",
    "start": "1900880",
    "end": "1906000"
  },
  {
    "text": "the colors here is whether the final version has flaws or not the blue is no flaws the yellow has flaws",
    "start": "1906000",
    "end": "1912720"
  },
  {
    "text": "and in fact ninety percent of the chains that end in a version that doesn't have a flaw",
    "start": "1912720",
    "end": "1919519"
  },
  {
    "text": "actually are less than less than or equal to four steps so you only have to do uh three updates uh before you get to",
    "start": "1919519",
    "end": "1925840"
  },
  {
    "text": "that end chain three little jumps um now interestingly enough occasionally",
    "start": "1925840",
    "end": "1931600"
  },
  {
    "text": "we get these really long ones like 33 updates to the final version but again those are blessedly rare um and you know",
    "start": "1931600",
    "end": "1938640"
  },
  {
    "text": "because that ends in a version that still has a known flaw you may be able to pick something else along the way uh that has a flaw that's",
    "start": "1938640",
    "end": "1945679"
  },
  {
    "text": "more amenable to your application is a little safer so it's about managing kind of what those flaw types are",
    "start": "1945679",
    "end": "1952399"
  },
  {
    "text": "now as we've seen over and over again these things vary by language",
    "start": "1952399",
    "end": "1957440"
  },
  {
    "start": "1955000",
    "end": "1955000"
  },
  {
    "text": "and so.net tends to have these really long update chains um and in fact on average has these has about seven steps",
    "start": "1957440",
    "end": "1964720"
  },
  {
    "text": "before you get to an unflawed version or or and the end of the chain um you know on the other end is go which only has about",
    "start": "1964720",
    "end": "1972240"
  },
  {
    "text": "averages about one step interestingly here like this is the one place javascript is in the middle of the",
    "start": "1972240",
    "end": "1978320"
  },
  {
    "text": "pack which about four steps before you get to the the end of the chain um so as always",
    "start": "1978320",
    "end": "1983840"
  },
  {
    "text": "you know the language choice makes a big difference so um this is the last visual i'm going",
    "start": "1983840",
    "end": "1990080"
  },
  {
    "start": "1988000",
    "end": "1988000"
  },
  {
    "text": "to show you and there's a lot going on here so we're just going to take a minute to kind of",
    "start": "1990080",
    "end": "1995200"
  },
  {
    "text": "parse it a little bit and it's actually easier to look at than you think it is so what this is is really kind of a bar",
    "start": "1995200",
    "end": "2000720"
  },
  {
    "text": "chart that shows how the different proportions change across each bar so on the left hand side we have kind of",
    "start": "2000720",
    "end": "2006399"
  },
  {
    "text": "the type of updates we have so we can either have those one-step chains the multi-step chains that end in a nice",
    "start": "2006399",
    "end": "2012159"
  },
  {
    "text": "clean version that can end in a flawed version or there's no update available that's that",
    "start": "2012159",
    "end": "2017440"
  },
  {
    "text": "yellow chunk at the top and then in the middle we can see this like the 73.4 percent of",
    "start": "2017440",
    "end": "2024000"
  },
  {
    "text": "flaws that's the height of the bar um that have any kind of update available just just one step and we get to",
    "start": "2024000",
    "end": "2030000"
  },
  {
    "text": "something that's different has a different type of flaw that you might be able to accept and what we've done is we've colored this",
    "start": "2030000",
    "end": "2036960"
  },
  {
    "text": "by the size of the update so that blue at the bottom is the patch the kind of gray in the middle is the minor version",
    "start": "2036960",
    "end": "2042320"
  },
  {
    "text": "and that lighter gray at the top is in the major and so these are the proportions that we saw in the in the previous chart that",
    "start": "2042320",
    "end": "2048560"
  },
  {
    "text": "chris showed and what we can see is how th how those flow from left to right",
    "start": "2048560",
    "end": "2054960"
  },
  {
    "text": "and how those cha change as we go through these chain updates so in the far right version it shows how",
    "start": "2054960",
    "end": "2061200"
  },
  {
    "text": "those proportions have kind of changed for major minor and patch versions and",
    "start": "2061200",
    "end": "2066560"
  },
  {
    "text": "so what we see here is where we had mostly patch versions on that single update to fix the flaw",
    "start": "2066560",
    "end": "2072158"
  },
  {
    "text": "on the right hand side we have mostly minor versions so that that blue that",
    "start": "2072159",
    "end": "2077440"
  },
  {
    "text": "goes across the minor version it shows you know about a third of them um that were patch updates on that first step",
    "start": "2077440",
    "end": "2083358"
  },
  {
    "text": "end up being minor version updates in that in the chain step um interestingly like most of the patch",
    "start": "2083359",
    "end": "2088878"
  },
  {
    "text": "stays the chain the same um and we see most of the minor versions stay minor versions a few go up to major version",
    "start": "2088879",
    "end": "2095520"
  },
  {
    "text": "updates and then about 10 of those go and don't actually have an update at the end of the chain um so",
    "start": "2095520",
    "end": "2101760"
  },
  {
    "text": "that's what there's kind of different flows show um so this is like a good outcome again",
    "start": "2101760",
    "end": "2107839"
  },
  {
    "text": "about two-thirds of our flaws you know have that that good ending and still most of those about 75",
    "start": "2107839",
    "end": "2115680"
  },
  {
    "text": "are small updates minor versions or less um and so we're in we're in good shape",
    "start": "2115680",
    "end": "2121119"
  },
  {
    "text": "um even though we know that you can do multiple updates we're still going to end up with a clean version most of the",
    "start": "2121119",
    "end": "2126880"
  },
  {
    "text": "time that's going to be a small update um so that's the last visual i have i'm just",
    "start": "2126880",
    "end": "2133280"
  },
  {
    "text": "going to end with a few takeaways and then we can get to some questions that i will answer in a month and a half when i",
    "start": "2133280",
    "end": "2139200"
  },
  {
    "text": "present this on a webinar so the first takeaway is um i i open",
    "start": "2139200",
    "end": "2146720"
  },
  {
    "start": "2142000",
    "end": "2142000"
  },
  {
    "text": "source software has a surprising and surprisingly variable number of types and quantity of software flaws i don't",
    "start": "2146720",
    "end": "2154079"
  },
  {
    "text": "think it would come to a surprise from anybody that yes open source software is flawed um but the extent and the the",
    "start": "2154079",
    "end": "2161440"
  },
  {
    "text": "types and the changes uh were something that's really interesting and pulling those apart and understanding how those",
    "start": "2161440",
    "end": "2166880"
  },
  {
    "text": "interact with applications and their use uh i think led to some surprising results",
    "start": "2166880",
    "end": "2172800"
  },
  {
    "text": "um i think this idea that most of the flaws that come in or come from transit defense dependencies is really important",
    "start": "2172800",
    "end": "2179440"
  },
  {
    "text": "to understand um so when you're writing an application you're pulling in",
    "start": "2179440",
    "end": "2184480"
  },
  {
    "text": "all that data you have to understand you're pulling in all those libraries you have to understand it's not just the",
    "start": "2184480",
    "end": "2190160"
  },
  {
    "text": "libraries you're directly including it's everything that those library user those library developers used and those",
    "start": "2190160",
    "end": "2195599"
  },
  {
    "text": "library developers used and those library developers used so you potentially have to manage you know",
    "start": "2195599",
    "end": "2201440"
  },
  {
    "text": "hundreds of developers when you pull in one library and really it is about management um",
    "start": "2201440",
    "end": "2207760"
  },
  {
    "text": "it's not just the um it's about management prioritization it's not just fix everything update",
    "start": "2207760",
    "end": "2213440"
  },
  {
    "text": "everything it's about fixing the stuff that's important things that have that proof of concept things that have that exploit in",
    "start": "2213440",
    "end": "2219200"
  },
  {
    "text": "the wild things that can be update that can be fixed with just a minor update those are easy things to do and not",
    "start": "2219200",
    "end": "2225280"
  },
  {
    "text": "necessarily they don't mean a huge refactor of the code and then of course language selection",
    "start": "2225280",
    "end": "2230800"
  },
  {
    "text": "does make a difference developers don't always have the luxury of picking the language ahead of time",
    "start": "2230800",
    "end": "2236240"
  },
  {
    "text": "but sometimes they do and if you're worried about security in your application and know kind of what the application",
    "start": "2236240",
    "end": "2242560"
  },
  {
    "text": "you're building is some of this can give you guidance on what language you might want to select",
    "start": "2242560",
    "end": "2247599"
  },
  {
    "text": "versus shy away from and so i think these are all just kind of",
    "start": "2247599",
    "end": "2252720"
  },
  {
    "text": "interesting lessons that we can take away and you know there's lots of interesting questions that get brought up in this",
    "start": "2252720",
    "end": "2258400"
  },
  {
    "text": "research and we're looking forward to working on that in the future but until then i'm excited to hear about",
    "start": "2258400",
    "end": "2263839"
  },
  {
    "text": "your questions um thanks for making my first briefing a memorable one um and uh",
    "start": "2263839",
    "end": "2269280"
  },
  {
    "text": "let's let's talk a little bit",
    "start": "2269280",
    "end": "2273320"
  }
]