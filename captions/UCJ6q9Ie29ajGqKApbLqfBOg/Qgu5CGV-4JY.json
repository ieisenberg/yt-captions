[
  {
    "text": "[Music]",
    "start": "1700",
    "end": "4810"
  },
  {
    "text": "so thank you all for coming out this morning today I'm going to be presenting to you",
    "start": "7400",
    "end": "12780"
  },
  {
    "text": "the results of our group's latest research effort which was to develop memory forensics techniques to let us",
    "start": "12780",
    "end": "18840"
  },
  {
    "text": "automatically detect and analyze malware that monitors Hardware devices",
    "start": "18840",
    "end": "24539"
  },
  {
    "text": "and if you work in the incident response field you likely see this malware all the time we see this targeted at our",
    "start": "24539",
    "end": "30779"
  },
  {
    "text": "clients on a daily basis and if you read the reports from other security vendors it's pretty much Universal that when you",
    "start": "30779",
    "end": "37320"
  },
  {
    "text": "have a motivated threat group targeting an organization whether that's a research group inside the organization",
    "start": "37320",
    "end": "42899"
  },
  {
    "text": "whether it's Executives whether it's down to just an individual person the malware that gets deployed on those",
    "start": "42899",
    "end": "48600"
  },
  {
    "text": "machines are going to leverage access to Hardware devices for truly sensitive information everything that's typed on",
    "start": "48600",
    "end": "55440"
  },
  {
    "text": "the keyboard all of the activity with the mouse you will see the microphones being sampled and then audio shipped out",
    "start": "55440",
    "end": "61199"
  },
  {
    "text": "the video cameras are going to be recorded and whether that's still pictures or video that's produced off of",
    "start": "61199",
    "end": "66840"
  },
  {
    "text": "it all that gets sent back to those attackers and so if you're an individual and you're targeted by a hostile foreign",
    "start": "66840",
    "end": "74100"
  },
  {
    "text": "Nation their intelligent service you probably don't want everything you do within five feet of your laptop shift shift out to those people so that they",
    "start": "74100",
    "end": "81240"
  },
  {
    "text": "can take advantage of it and certainly if you're trying to keep secrets within your your organization having all of",
    "start": "81240",
    "end": "86280"
  },
  {
    "text": "that monitored across your Fleet is going to make that very difficult and then so what we wanted to do was get",
    "start": "86280",
    "end": "92400"
  },
  {
    "text": "it to where our memory forensics algorithms are tools like volatility could just automatically find these rip",
    "start": "92400",
    "end": "97740"
  },
  {
    "text": "these out of memory and make it where attackers know if they're going to use these types of techniques they're going to be caught rather quickly",
    "start": "97740",
    "end": "104340"
  },
  {
    "text": "but unfortunately we knew from our existing work in our existing research that the algorithms that were present",
    "start": "104340",
    "end": "110520"
  },
  {
    "text": "and available before our work were either outdated so they didn't support things like Windows 10 or the latest Mac",
    "start": "110520",
    "end": "116460"
  },
  {
    "text": "they were incomplete so we knew that malware could try variations on existing techniques that wouldn't be caught and",
    "start": "116460",
    "end": "122700"
  },
  {
    "text": "then some of them with the newer ways that malware Works were just non-existent so we could certainly figure these out on our own through",
    "start": "122700",
    "end": "128399"
  },
  {
    "text": "reverse engineering and things like that that's how we knew we were missing stuff but we want to be able to automate things at scale so we need to really",
    "start": "128399",
    "end": "135000"
  },
  {
    "text": "understand how it works so this turned into a pretty significant research project it took us two to three",
    "start": "135000",
    "end": "141660"
  },
  {
    "text": "months to get with a lot of reverse engineering source code analysis get it working but we wanted to do a very",
    "start": "141660",
    "end": "146879"
  },
  {
    "text": "thorough job so we started at the beginning by taking every malware report we had internally as well as all the",
    "start": "146879",
    "end": "153480"
  },
  {
    "text": "ones that we could get online we made a list of the apis and the subsystems that process malware will abuse to get access",
    "start": "153480",
    "end": "160560"
  },
  {
    "text": "to the hardware devices we then spent many many nights and weekends in Ida Pro and other tools figuring out how those",
    "start": "160560",
    "end": "167340"
  },
  {
    "text": "apis are implemented on the system we then developed proof-of-concept applications so exactly what we saw the",
    "start": "167340",
    "end": "173760"
  },
  {
    "text": "malware doing we wanted to implement that on our own in a controlled manner so we knew that our tools were working",
    "start": "173760",
    "end": "179340"
  },
  {
    "text": "we want to make it where we truly never missed this malware in the wild going forward and then we're going to develop",
    "start": "179340",
    "end": "184680"
  },
  {
    "text": "new volatility plugins so that like I said we can do this in an automated way",
    "start": "184680",
    "end": "190080"
  },
  {
    "text": "and if you're in this talk you're probably interested in memory forensics or probably know what it means but if you're not too familiar with it the",
    "start": "190080",
    "end": "196440"
  },
  {
    "text": "reason memory forensics is so important and we spend so much time working on it is when you look at modern attacks and",
    "start": "196440",
    "end": "202620"
  },
  {
    "text": "modern threats the payloads that are used the tool sets that are launched the really important parts or in some case",
    "start": "202620",
    "end": "208200"
  },
  {
    "text": "all the parts are memory only so what that means is nothing is written out to disk if you reboot that machine all your",
    "start": "208200",
    "end": "215040"
  },
  {
    "text": "forensics evidence goes away there's nothing to look at and as you might imagine all the data that's sent from",
    "start": "215040",
    "end": "220440"
  },
  {
    "text": "The Operators is encrypted on the network so even if you're a place that has full pcap that doesn't really help",
    "start": "220440",
    "end": "225659"
  },
  {
    "text": "right so we want to be able to get a sample of memory off a machine and then deeply analyze it to find this type of",
    "start": "225659",
    "end": "232200"
  },
  {
    "text": "malware and this type of malware like I said is used all the times there's other black hat talks throughout the week",
    "start": "232200",
    "end": "237599"
  },
  {
    "text": "where people are showing off their new memory only Frameworks and such but this quote that I have at the bottom or this",
    "start": "237599",
    "end": "243599"
  },
  {
    "text": "screenshot that I have highlighted it was perfect timing this literally came out when I was going through the slides",
    "start": "243599",
    "end": "248819"
  },
  {
    "text": "last week and I added it in Microsoft essentially burned this company out of Australia Australia that sells",
    "start": "248819",
    "end": "255599"
  },
  {
    "text": "commercial spyware and is used by governments across the world and it was really interesting Microsoft just destroyed them like reversed it down to",
    "start": "255599",
    "end": "261660"
  },
  {
    "text": "every bit all the capabilities it had but in the beginning you see what I have highlighted in red all the capabilities",
    "start": "261660",
    "end": "267780"
  },
  {
    "text": "of that tool set that they found and published the one were memory only so it was an example from literally a week ago",
    "start": "267780",
    "end": "273600"
  },
  {
    "text": "when you're targeted by motivated actors you're going to get hit with memory only malware",
    "start": "273600",
    "end": "280160"
  },
  {
    "text": "so again we looked at Windows Linux and Mac we started with Windows because we figured it would take the longest to do",
    "start": "281820",
    "end": "287220"
  },
  {
    "text": "so that's what I'm going to go through first we focused our research on Windows 10. this is what I know not everyone",
    "start": "287220",
    "end": "292680"
  },
  {
    "text": "updates right away and Windows XP lives on forever but we do see Windows 10 in most of our investigations now so we",
    "start": "292680",
    "end": "299100"
  },
  {
    "text": "wanted to make sure our algorithms were up to date for that so we went all the way back to the first stable versions of",
    "start": "299100",
    "end": "304560"
  },
  {
    "text": "Windows 10 through the latest stable release back in March we had our memory collection tools so we could do our",
    "start": "304560",
    "end": "310800"
  },
  {
    "text": "research and then also save out memory samples with those proof of Concepts loaded so that going forward we know",
    "start": "310800",
    "end": "316800"
  },
  {
    "text": "that our tools always work the first API that we looked at that",
    "start": "316800",
    "end": "322080"
  },
  {
    "text": "malware abuses is set Windows hook ex this has been abused by malware for years and years on Windows the idea of",
    "start": "322080",
    "end": "329220"
  },
  {
    "text": "it and the reason it gets abused so much is it's extremely powerful all your malware has to do is call one function",
    "start": "329220",
    "end": "334860"
  },
  {
    "text": "in most cases when it calls that function it's going to pass in the path to a dll on disk that it once injected",
    "start": "334860",
    "end": "341220"
  },
  {
    "text": "into every process and then the malware doesn't have to do anything after that Windows does all the hard work of every",
    "start": "341220",
    "end": "346860"
  },
  {
    "text": "time a process starts that dll gets loaded once an event is triggered it does all the hard work of making sure",
    "start": "346860",
    "end": "352740"
  },
  {
    "text": "the Callback that that dll registers gets triggered so every time a key is pressed every time a mouse is moved and",
    "start": "352740",
    "end": "358800"
  },
  {
    "text": "so on and so again this makes it very nice for malware if you're familiar with code injection with like create remote",
    "start": "358800",
    "end": "364979"
  },
  {
    "text": "thread virtual Alec ex the malware doesn't have to do any of that the operating system does it for it so",
    "start": "364979",
    "end": "371039"
  },
  {
    "text": "inside of volatility we have a plugin called message hooks that's been around for years and years but it was never",
    "start": "371039",
    "end": "377400"
  },
  {
    "text": "never properly updated for Windows 10. and when we really studied the set Windows hook ex usages out in the wild",
    "start": "377400",
    "end": "383819"
  },
  {
    "text": "we realized there were some variations on it that we weren't detecting and one of them that I'll talk about I actually",
    "start": "383819",
    "end": "389940"
  },
  {
    "text": "didn't know don't know anyone in the field who knew about it before um so it's something that wasn't known but we want to detect all of it",
    "start": "389940",
    "end": "397979"
  },
  {
    "text": "so this is a look at set Windows hook ex the parameters that the malware is going to set the first one is you say which",
    "start": "397979",
    "end": "403979"
  },
  {
    "text": "device you want to monitor keyboard mouse and so on and then the last two things that you have to send in are in",
    "start": "403979",
    "end": "411060"
  },
  {
    "text": "most cases you're going to send the path to a dll but we'll see you don't have to do that and then the last parameter the",
    "start": "411060",
    "end": "416520"
  },
  {
    "text": "thread ID says if you want to monitor a specific thread so basically if you want to monitor just one application or if",
    "start": "416520",
    "end": "422759"
  },
  {
    "text": "you want to hook all processes and applications for a specific user and then again you send in what you want to",
    "start": "422759",
    "end": "428880"
  },
  {
    "text": "monitor where your code is that's going to monitor it and then Windows takes care of it for you",
    "start": "428880",
    "end": "435080"
  },
  {
    "text": "this is the proof of concept that we developed for this technique you can see that we have a dll called fakedll.dlo we",
    "start": "435840",
    "end": "443220"
  },
  {
    "text": "have a function that's going to get registered and called every time the mouse is used we're calling set Windows",
    "start": "443220",
    "end": "449160"
  },
  {
    "text": "hook ex with the path to that dll and for the last parameter we're setting zero which is the same thing as null so",
    "start": "449160",
    "end": "454800"
  },
  {
    "text": "this is going to affect every process on that user's desktop at the bottom what we're seeing is this",
    "start": "454800",
    "end": "460680"
  },
  {
    "text": "is the memory sample that we have once our proof of concept was loaded and the",
    "start": "460680",
    "end": "465960"
  },
  {
    "text": "way it works is you launch this malware and then from then on anytime the mouse",
    "start": "465960",
    "end": "471180"
  },
  {
    "text": "is moved in an application in this case the dll is going to get loaded so we ran a notepad we open a notepad instance",
    "start": "471180",
    "end": "477360"
  },
  {
    "text": "move the mouse inside of it took the memory sample and as we would expect that notepad process now has our dll",
    "start": "477360",
    "end": "483660"
  },
  {
    "text": "loaded by the operating system but this isn't enough to automatically detect the",
    "start": "483660",
    "end": "488699"
  },
  {
    "text": "malware there's going to be dozens of dlls in most processes so you can't just look at a dll list we just do this here",
    "start": "488699",
    "end": "495419"
  },
  {
    "text": "to make sure that our back door loaded correctly sorry so to actually detect these hooks",
    "start": "495419",
    "end": "503160"
  },
  {
    "text": "we have to examine the GUI subsystem of Windows as you might imagine this is closed source so when we say examine it",
    "start": "503160",
    "end": "509520"
  },
  {
    "text": "means lots of time reverse engineering the uh the win32k subsystem in the kernel so at a very high level when you",
    "start": "509520",
    "end": "516899"
  },
  {
    "text": "log into a Windows system that will create a session which creates a Windows station and then what you're used to is",
    "start": "516899",
    "end": "522959"
  },
  {
    "text": "you use one or more desktops the one on the local machine you can RDP into a system and associated with that desktops",
    "start": "522959",
    "end": "529620"
  },
  {
    "text": "are two things we need to track down the first one is the atom table which is basically a set of strings associated",
    "start": "529620",
    "end": "535920"
  },
  {
    "text": "with what's occurring on that desktop in this case there's going to be a string for the full path to the dll used to",
    "start": "535920",
    "end": "542339"
  },
  {
    "text": "implement the hook and then you can see down in the bottom in the Black Box there's the set of hooks remember the",
    "start": "542339",
    "end": "547920"
  },
  {
    "text": "name of the API is set Windows hook ex so this is going to store information on all the applications that are monitoring",
    "start": "547920",
    "end": "554220"
  },
  {
    "text": "that desktop so like I said initially the message",
    "start": "554220",
    "end": "560220"
  },
  {
    "text": "hooks plugin was very inconsistent in most case produced no results against windows 10. so the first thing we had to",
    "start": "560220",
    "end": "566339"
  },
  {
    "text": "do was reverse out all the offsets for the different Windows 10 versions but then we noticed that when we did that we",
    "start": "566339",
    "end": "572580"
  },
  {
    "text": "weren't getting the path to the dll back so remember we have our hook what to know which dll is actually implementing",
    "start": "572580",
    "end": "578519"
  },
  {
    "text": "it we have to look in the atoms table this was super frustrating because it worked on literally none of the samples",
    "start": "578519",
    "end": "584279"
  },
  {
    "text": "that we created at first so we were like okay we have to go back to the drawing board fast forward many hours in Ida Pro",
    "start": "584279",
    "end": "590220"
  },
  {
    "text": "later and this is what you're seeing on the bottom of the slide so for every version of Windows going back to XP",
    "start": "590220",
    "end": "596420"
  },
  {
    "text": "until before 10 you had this thing called the user atom table handle that was your table of strings volatility",
    "start": "596420",
    "end": "603180"
  },
  {
    "text": "knew how to find it and then starting in Windows 10 it looks like Microsoft just re-implemented that whole subsystem so",
    "start": "603180",
    "end": "609180"
  },
  {
    "text": "we had to go through and Ida figure that out and now we have this other table that we can inspect so the message hooks",
    "start": "609180",
    "end": "615180"
  },
  {
    "text": "plugin now branches right it knows if it's looking at Windows 7 or Windows 10 and we get those paths back so now just",
    "start": "615180",
    "end": "621600"
  },
  {
    "text": "by running the plugin even on the latest versions of Windows 10 you get the dll placing the hook you get the offset",
    "start": "621600",
    "end": "627300"
  },
  {
    "text": "inside of the dll where that hook is and if you're familiar with volatility you know you can just extract it out at that",
    "start": "627300",
    "end": "632519"
  },
  {
    "text": "point and start reversing it the second variation of set Windows hook",
    "start": "632519",
    "end": "638220"
  },
  {
    "text": "ex and this is the one that is kind of mind-blowing and like I said once once we figured out I pulled a bunch of",
    "start": "638220",
    "end": "644160"
  },
  {
    "text": "people that I would consider experts and like Windows internals and malware no one knew this was possible so the idea",
    "start": "644160",
    "end": "650160"
  },
  {
    "text": "is it only works for the low level keyboard hook so you're hooking the keyboard to low level you are going to",
    "start": "650160",
    "end": "655740"
  },
  {
    "text": "get every keystroke but when you call set Windows hook ex you say I'm not giving you a path to a dll but I still",
    "start": "655740",
    "end": "662160"
  },
  {
    "text": "want to hook every process across the desktop which makes literally no sense so you call it like you see at the top",
    "start": "662160",
    "end": "669000"
  },
  {
    "text": "here you give the dll that you reference is your own executable which is obviously not something that can be",
    "start": "669000",
    "end": "674700"
  },
  {
    "text": "injected into other processes and we found this documentation it wasn't incredibly easy to find but we",
    "start": "674700",
    "end": "680279"
  },
  {
    "text": "eventually found what you see at the bottom of the slide on the msdn and this is where it gets really crazy so what",
    "start": "680279",
    "end": "686640"
  },
  {
    "text": "Microsoft is saying is if you want to have essentially key log every process on the system you don't have to put any",
    "start": "686640",
    "end": "693120"
  },
  {
    "text": "code into those processes you don't have to hook those process is at all you just have your own process running and then",
    "start": "693120",
    "end": "699000"
  },
  {
    "text": "Microsoft or Windows is going to do all the hard work to send your code to keystrokes anyway so if you're used to",
    "start": "699000",
    "end": "704459"
  },
  {
    "text": "doing memory forensics or live forensics on a machine you kind of understand if a process is being key logged if a process",
    "start": "704459",
    "end": "710820"
  },
  {
    "text": "has malicious actions focused on it you can extract the memory of that process you can debug that process and find the",
    "start": "710820",
    "end": "717000"
  },
  {
    "text": "malware in this case all of the processes that are being key logged have literally zero anything you can look at",
    "start": "717000",
    "end": "722940"
  },
  {
    "text": "it's all in this other process on the system so I don't know of any where else this happens it's very strange so we",
    "start": "722940",
    "end": "730260"
  },
  {
    "text": "wanted to be able to make sure we could detect it and this is something where volatility kind of had support before",
    "start": "730260",
    "end": "736079"
  },
  {
    "text": "like once we got it working on Windows 10 but the output was not particularly useful so what we're seeing three blocks",
    "start": "736079",
    "end": "742440"
  },
  {
    "text": "of output here you can see there's spaces between them but the first one is the global information so volatility is",
    "start": "742440",
    "end": "748560"
  },
  {
    "text": "saying hey there's this low-level keyboard hook that's hooking every thread it tells us the address of where",
    "start": "748560",
    "end": "754560"
  },
  {
    "text": "that is but it has no idea which process it's in which is fairly useless right",
    "start": "754560",
    "end": "759660"
  },
  {
    "text": "you say you have 50 processes on a desktop you're not going to go to that address in 50 different processes and",
    "start": "759660",
    "end": "765180"
  },
  {
    "text": "look for malicious code so we went back to reversing for a while and we figured out that on a per thread",
    "start": "765180",
    "end": "772500"
  },
  {
    "text": "basis which When I Say thread just think of process so on a per thread basis there's a flag that set that is set if",
    "start": "772500",
    "end": "779100"
  },
  {
    "text": "that process set the hook so what you're seeing in the second two blocks is for the Powershell one there's a false",
    "start": "779100",
    "end": "785399"
  },
  {
    "text": "printed and then for the GUI tester all process there's a true printed message hooks didn't print that before that's us",
    "start": "785399",
    "end": "791820"
  },
  {
    "text": "that's us parsing that flag to say hey there's a global hook it's not Powershell that said it it's the GUI",
    "start": "791820",
    "end": "797279"
  },
  {
    "text": "tester all which you'll see quite a lot because that was our proof of concept application so again this was a really",
    "start": "797279",
    "end": "802800"
  },
  {
    "text": "strange Edge case it's key logging on the system and memory forensics knew nothing about it before",
    "start": "802800",
    "end": "809600"
  },
  {
    "text": "then the last variation of set Windows hook ex is again you pick whichever device you want to monitor this one",
    "start": "809600",
    "end": "816000"
  },
  {
    "text": "isn't limited to just the keyboard you can send it either a path to a dll or",
    "start": "816000",
    "end": "821100"
  },
  {
    "text": "you can send it no like before but you're going to Target a specific thread which again is a process so if you just",
    "start": "821100",
    "end": "827339"
  },
  {
    "text": "want to key log the web browser the password manager whatever it might be you can pick that and then you don't",
    "start": "827339",
    "end": "833100"
  },
  {
    "text": "have your code going into every process there was literally zero documentation",
    "start": "833100",
    "end": "838200"
  },
  {
    "text": "about this online so again it was more time in Idaho Pro so off of the threads so what we saw on two slides ago where",
    "start": "838200",
    "end": "845339"
  },
  {
    "text": "we saw a Powershell and GUI tester all inside of the data structure in memory that represents that there's another",
    "start": "845339",
    "end": "851700"
  },
  {
    "text": "kind of per thread atom table atom tables and quotes because it's not really a generic atom table it just",
    "start": "851700",
    "end": "858000"
  },
  {
    "text": "stores the dlls associated with that thread but once we were figured that out we were able to update the plugin to",
    "start": "858000",
    "end": "864120"
  },
  {
    "text": "then find this hook variation so like I said before this type of hook",
    "start": "864120",
    "end": "869519"
  },
  {
    "text": "variation was not known to volatility at all when we first got it working when we figured out we had to go deeper into the",
    "start": "869519",
    "end": "875940"
  },
  {
    "text": "thread we have the output that you see up top and the module 7 which is obviously not a path to a dll what that",
    "start": "875940",
    "end": "883440"
  },
  {
    "text": "is saying is I know that the index into the string table is seven but I don't know how to find the string so then we",
    "start": "883440",
    "end": "889800"
  },
  {
    "text": "figured out about that per thread atom table and you can see the updated output at the bottom which we're still able to",
    "start": "889800",
    "end": "895380"
  },
  {
    "text": "recover the dll path so now as far as we know no matter how set Windows hooky X is used to key log systems we can",
    "start": "895380",
    "end": "902160"
  },
  {
    "text": "automatically find it",
    "start": "902160",
    "end": "905300"
  },
  {
    "text": "the second API on Windows that we looked at was is called register raw input devices this is another way to perform",
    "start": "909779",
    "end": "916380"
  },
  {
    "text": "key logging a lot of your EDR systems will look for calls to set Windows hook ex obviously they're not perfect and I'm",
    "start": "916380",
    "end": "922800"
  },
  {
    "text": "well aware that can be bypassed but they do make an effort so malware started using this API instead to achieve",
    "start": "922800",
    "end": "929399"
  },
  {
    "text": "essentially the same goals when you call this API there's some constants you need to use so you",
    "start": "929399",
    "end": "935100"
  },
  {
    "text": "basically just say I want to hook everything and I'm interested in the keyboard it's a little different than just",
    "start": "935100",
    "end": "941100"
  },
  {
    "text": "passing a path to a dll though in this case instead you should tell it which window you want to Target",
    "start": "941100",
    "end": "948320"
  },
  {
    "text": "so if you remember our picture from before we got down to the desktop of the user then we needed to look at the atom",
    "start": "948779",
    "end": "954540"
  },
  {
    "text": "tables and the hooks to figure it out this is a bit different we're not reusing those same data structures and",
    "start": "954540",
    "end": "960300"
  },
  {
    "text": "then what you see at the bottom is part of our proof of concept code we have our callback function or our hooking",
    "start": "960300",
    "end": "965639"
  },
  {
    "text": "function which is called wnd proc we're calling register class and then create Windows with that function Associated so",
    "start": "965639",
    "end": "973260"
  },
  {
    "text": "what that means is every time a message is passed to that window our function is going to be called and once our",
    "start": "973260",
    "end": "978779"
  },
  {
    "text": "keylogger is active you might guess the message information is going going to include the keys that were typed on the",
    "start": "978779",
    "end": "985139"
  },
  {
    "text": "keyboard so this is a partial part of our implementation of that callback function",
    "start": "985139",
    "end": "991440"
  },
  {
    "text": "you can see for WM create when a window is created we're going to say register",
    "start": "991440",
    "end": "996600"
  },
  {
    "text": "raw input devices so from then on every time a window is created on the machine you open Chrome you create a new tab any",
    "start": "996600",
    "end": "1003440"
  },
  {
    "text": "application creating Windows we're automatically going to get to hook it and then when that window starts",
    "start": "1003440",
    "end": "1008660"
  },
  {
    "text": "producing input which again is someone typing on the keyboard we can read out that key and log it or send it across",
    "start": "1008660",
    "end": "1014300"
  },
  {
    "text": "the network there was no memory forensic support for this before so we figured out that off of those same",
    "start": "1014300",
    "end": "1021440"
  },
  {
    "text": "data structures we were getting the thread and process information there was a second set of tables that we could examine and it would tell us all the",
    "start": "1021440",
    "end": "1028339"
  },
  {
    "text": "processes that had used that API and then this is a brand new plugin called raw input device monitors that we",
    "start": "1028339",
    "end": "1035240"
  },
  {
    "text": "wrote to implement what we were just talking about and as you can see it tells us on the desktop in the GUI",
    "start": "1035240",
    "end": "1041058"
  },
  {
    "text": "tester all process and our proof of concept the name of the window was my hidden window just so it would stand out",
    "start": "1041059",
    "end": "1046640"
  },
  {
    "text": "in the output we have the address where that hook is and the process ID again we can extract that executable out of",
    "start": "1046640",
    "end": "1052580"
  },
  {
    "text": "memory and then really start to figure out what happened so we targeted those two functions for",
    "start": "1052580",
    "end": "1059299"
  },
  {
    "text": "Windows the next thing we looked at was Linux we deal with Linux investigations all the time especially in the cloud and",
    "start": "1059299",
    "end": "1065419"
  },
  {
    "text": "something we still see that works which is rather unfortunate is abuse of the debugging facilities so on Linux you",
    "start": "1065419",
    "end": "1071660"
  },
  {
    "text": "have the p-trace facility this is what lets processes do debugging on Linux and",
    "start": "1071660",
    "end": "1077059"
  },
  {
    "text": "then you have S Trace which is a really popular tool to trace system calls that applications make and if you're not",
    "start": "1077059",
    "end": "1083059"
  },
  {
    "text": "familiar with system calls anytime you want to interact with Hardware the network and other process you have to",
    "start": "1083059",
    "end": "1088400"
  },
  {
    "text": "make a system call to do it so obviously by monitoring system calls you can monitor any hardware device",
    "start": "1088400",
    "end": "1095360"
  },
  {
    "text": "whether that's a keyboard mic video camera and so on you can completely disable this feature because it's such a",
    "start": "1095360",
    "end": "1101539"
  },
  {
    "text": "security threat but as you're probably aware security patches aren't universally applied people don't configure things right so we still see",
    "start": "1101539",
    "end": "1108440"
  },
  {
    "text": "this being abused in the wild from a detection standpoint there's two",
    "start": "1108440",
    "end": "1114200"
  },
  {
    "text": "variations we wanted to be able to detect in our plugins with this and this what we're seeing is direct debugging so",
    "start": "1114200",
    "end": "1120380"
  },
  {
    "text": "if you start a process under a debugger which in this case we're starting the cat process under GDB so cat has started",
    "start": "1120380",
    "end": "1127520"
  },
  {
    "text": "under GDB which is the debugger you can see the process IDs are 778 and 780 and",
    "start": "1127520",
    "end": "1133580"
  },
  {
    "text": "then we wrote a new plugin called Linux process P Trace which is going to tell you all the processes that are being",
    "start": "1133580",
    "end": "1138919"
  },
  {
    "text": "debugged and you can see in the output here I have it highlighted we get our GDB and our cat process the flags for",
    "start": "1138919",
    "end": "1145880"
  },
  {
    "text": "cat is p Trace which tells you that it's being traced and then you can see for GDB it's tracing PID 780 which is cat so",
    "start": "1145880",
    "end": "1153260"
  },
  {
    "text": "we automatically report that interaction between the processes now an extremely dangerous form we see",
    "start": "1153260",
    "end": "1160400"
  },
  {
    "text": "of this quite often in the field is using the debug facilities to monitor the SSH Daemon so what we're seeing here",
    "start": "1160400",
    "end": "1167419"
  },
  {
    "text": "is we we're on a Linux system the SSH Daemon is running with PID 436",
    "start": "1167419",
    "end": "1173419"
  },
  {
    "text": "and then we're using S tray s Trace which obviously you have to be root to debug that running SSH Daemon so we're",
    "start": "1173419",
    "end": "1180080"
  },
  {
    "text": "not restarting the Daemon it's not like people who are currently logged in are going to get kicked out we are just dynamically attaching to that running",
    "start": "1180080",
    "end": "1186380"
  },
  {
    "text": "process so once that was running in one terminal I opened the second terminal and I SSH",
    "start": "1186380",
    "end": "1192679"
  },
  {
    "text": "into that machine and what you're seeing is me logging in so the password was secret password exclamation point that",
    "start": "1192679",
    "end": "1199700"
  },
  {
    "text": "gets read directly by the debugger because it in order for the process the SSH process to communicate that",
    "start": "1199700",
    "end": "1206179"
  },
  {
    "text": "information it's going to go through a system call so you steal the password right away then what you see is me",
    "start": "1206179",
    "end": "1211940"
  },
  {
    "text": "typing the netstat command one letter at a time that gets logged you see where netstat is run and then if you're",
    "start": "1211940",
    "end": "1218240"
  },
  {
    "text": "familiar with how netstat works it's going to read some files under procnet to figure out what connections are active and so on so you can see how",
    "start": "1218240",
    "end": "1225380"
  },
  {
    "text": "dangerous this is right if you use SSH Keys you'll get a little reprieve from it but if you're logging with passwords",
    "start": "1225380",
    "end": "1230780"
  },
  {
    "text": "and you have this type of malware your passwords are getting logged in real time every time you log in as well as",
    "start": "1230780",
    "end": "1236179"
  },
  {
    "text": "all the commands you run now making this infinitely worse as you can imagine if ransomware automated this situation with",
    "start": "1236179",
    "end": "1242780"
  },
  {
    "text": "using the passwords and then performing lateral movement and then still not good but not as bad as ransomware is in many",
    "start": "1242780",
    "end": "1249919"
  },
  {
    "text": "environments you you'll have to move through multiple Linux servers to get to your final destination so you go through",
    "start": "1249919",
    "end": "1255740"
  },
  {
    "text": "those jump boxes logging in each time so you can imagine if box one is compromised with malware like this and",
    "start": "1255740",
    "end": "1262220"
  },
  {
    "text": "it gets the password that you logged in with then you go to box two which might be your internal credentials the fact",
    "start": "1262220",
    "end": "1268160"
  },
  {
    "text": "that you're logging into that remote machine is going to be key logged as well and no matter how many hops you're using to try to be secure the malware is",
    "start": "1268160",
    "end": "1275480"
  },
  {
    "text": "just getting access to that data all along the way so this is definitely something we want to be able to detect",
    "start": "1275480",
    "end": "1282200"
  },
  {
    "text": "so that same Linux process P Trace plugin we wrote to cgdb and Cat",
    "start": "1282200",
    "end": "1287480"
  },
  {
    "text": "interacting is going to work for this as well if you remember and it's in the first line of the plugin our SSH Daemon",
    "start": "1287480",
    "end": "1293780"
  },
  {
    "text": "was PID 436. you can see it's listed here and then it's p traced and seized",
    "start": "1293780",
    "end": "1299419"
  },
  {
    "text": "you then see I'm going to skip the SS Trace process for a second you then see more sshd processes those are the",
    "start": "1299419",
    "end": "1306140"
  },
  {
    "text": "children processes that are spawned to handle when someone logs in and then once you successfully authenticate bash",
    "start": "1306140",
    "end": "1312440"
  },
  {
    "text": "or whichever shell you use will get spawned and you can see that's being debugged also so then if we look at the",
    "start": "1312440",
    "end": "1318799"
  },
  {
    "text": "the s-trace process we see it's 11 27 and the tracing column has all the pids",
    "start": "1318799",
    "end": "1324620"
  },
  {
    "text": "that it's attacking right or that it's monitoring and then if we have many SSH sessions going on like on a real server",
    "start": "1324620",
    "end": "1330679"
  },
  {
    "text": "the amount of pids is just going to go on forever and then just if you're not familiar with Linux what sees means it's",
    "start": "1330679",
    "end": "1336679"
  },
  {
    "text": "actually really important in the output that means a process was running and a debugger attached to it while it was",
    "start": "1336679",
    "end": "1342559"
  },
  {
    "text": "still active or when a process started it's basically a victim from the start because its parent process was being",
    "start": "1342559",
    "end": "1348440"
  },
  {
    "text": "debugged so it's definitely something that we want to key in on",
    "start": "1348440",
    "end": "1353440"
  },
  {
    "text": "another place we looked in Linux was input events so this is a really handy feature for legitimate uses it's pretty",
    "start": "1354559",
    "end": "1361159"
  },
  {
    "text": "cool what it makes available but it also gets abused by malware just like everything else so the way this works is",
    "start": "1361159",
    "end": "1367580"
  },
  {
    "text": "if you look in the dev input bypass folder on a Linux machine where this is enabled which if you have like Ubuntu",
    "start": "1367580",
    "end": "1373340"
  },
  {
    "text": "Debian any normal distro it's going to be there and basically it makes a Sim link file out to that physical device so",
    "start": "1373340",
    "end": "1380539"
  },
  {
    "text": "in this case we can see that the keyboard is Sim link to event zero and there's an API you can call that is it's",
    "start": "1380539",
    "end": "1387860"
  },
  {
    "text": "literally like 10 lines of code to read this device constantly and pull that device and then get anything sent to it",
    "start": "1387860",
    "end": "1394159"
  },
  {
    "text": "which it's the keyboard so you're going to be sending keystrokes to it so we wrote a new plugin to detect processes",
    "start": "1394159",
    "end": "1400700"
  },
  {
    "text": "that were using this subsystem it's called Linux input event input events and you're seeing the output here so one",
    "start": "1400700",
    "end": "1407600"
  },
  {
    "text": "thing to be aware of is the login Daemon from systemd is going to use this that's legitimate right it's monitoring your",
    "start": "1407600",
    "end": "1413419"
  },
  {
    "text": "keyboard so you can log into the system so that's expected but then we loaded we",
    "start": "1413419",
    "end": "1418520"
  },
  {
    "text": "didn't really write our own proof of concept for this one there's a project called log keys on GitHub that's like a proof of concept for abusing this",
    "start": "1418520",
    "end": "1425000"
  },
  {
    "text": "subsystem so we loaded that in our VM got the memory sample and then you can see we are reporting it so in a real",
    "start": "1425000",
    "end": "1431780"
  },
  {
    "text": "investigation it would be as simple as filtering out the system Daemon login process which is like I said gonna",
    "start": "1431780",
    "end": "1437240"
  },
  {
    "text": "access your keys so you can log in and then anything else is definitely suspect",
    "start": "1437240",
    "end": "1443799"
  },
  {
    "text": "foreign the next thing we looked at is a feature",
    "start": "1447380",
    "end": "1454159"
  },
  {
    "text": "of Linux that is just mind-blowingly painful from a security perspective so I tried to highlight in the slide just how",
    "start": "1454159",
    "end": "1460520"
  },
  {
    "text": "ridiculous this is so the idea is you have an in and out control call which is",
    "start": "1460520",
    "end": "1465740"
  },
  {
    "text": "a subsystem it exists on Windows and Mac and every other operating system where code so code running in an application",
    "start": "1465740",
    "end": "1472580"
  },
  {
    "text": "can ask a driver to do something for it because you can imagine your process can't just go read the file system or",
    "start": "1472580",
    "end": "1478580"
  },
  {
    "text": "send raw packets so you can use this ability to ask the more privileged driver to do something for you so for",
    "start": "1478580",
    "end": "1484880"
  },
  {
    "text": "whatever reason that doesn't make any sense Linux has one of these requests that you can make that says hey for",
    "start": "1484880",
    "end": "1491419"
  },
  {
    "text": "another terminal that's not mine so someone else logged into the machine I want to inject a character into their",
    "start": "1491419",
    "end": "1498080"
  },
  {
    "text": "terminals input stream which translated from Linux terms means I want to fake keystrokes for them which is like",
    "start": "1498080",
    "end": "1504559"
  },
  {
    "text": "mind-blowingly crazy right so when you Google this instead of getting any documentation on it the first 10 links",
    "start": "1504559",
    "end": "1510679"
  },
  {
    "text": "are about all the vulnerabilities that have been caused by this all of the attacks that were propagated by this and",
    "start": "1510679",
    "end": "1517159"
  },
  {
    "text": "finally open BSD removed it so they didn't even try for backwards compatibility if you make that call on",
    "start": "1517159",
    "end": "1522380"
  },
  {
    "text": "openbsd the call is going to fail but the Linux developers refuse to do it so",
    "start": "1522380",
    "end": "1527779"
  },
  {
    "text": "especially in those shared environments this is a major issue and what's cool from a like a red team",
    "start": "1527779",
    "end": "1535279"
  },
  {
    "text": "perspective is you can use this for a dead simple key logger what you're seeing on the left is the entire source",
    "start": "1535279",
    "end": "1541340"
  },
  {
    "text": "code for our proof of concept we wrote it in Python so it's a little easier to understand what you do is you open a",
    "start": "1541340",
    "end": "1547520"
  },
  {
    "text": "handle to another user's terminal you're then going to set Raw on it which means you want to deal with the raw",
    "start": "1547520",
    "end": "1553640"
  },
  {
    "text": "characters going in and then you're going to read from that terminal right so if you read from someone's terminal",
    "start": "1553640",
    "end": "1559400"
  },
  {
    "text": "and they type a key you're basically going to steal that key out that would be bad because it the user would notice",
    "start": "1559400",
    "end": "1565940"
  },
  {
    "text": "their typing and nothing's happening and nothing's showing up on the screen so what you do is you read the latest",
    "start": "1565940",
    "end": "1570980"
  },
  {
    "text": "character they typed and then you use which you can see in the ioctl call the last thing that's highlighted in the red",
    "start": "1570980",
    "end": "1577220"
  },
  {
    "text": "box we're making that call to say hey take the character I just read and retype it for the user so even if you're",
    "start": "1577220",
    "end": "1584360"
  },
  {
    "text": "a super fast typer you're not going to notice that your character is being stolen and replayed back and forth but",
    "start": "1584360",
    "end": "1589880"
  },
  {
    "text": "we can perfectly key log all of their interactions through SSH or through a physical keyboard on a Linux machine",
    "start": "1589880",
    "end": "1595820"
  },
  {
    "text": "they're getting key log the whole time and they will never notice the difference so again we wanted to be able",
    "start": "1595820",
    "end": "1601279"
  },
  {
    "text": "to detect this in an automated fashion so we wrote a plug-in called Linux TTY",
    "start": "1601279",
    "end": "1607220"
  },
  {
    "text": "handles and what we're seeing here is like like I said our proof of Concepts in Python so we're catching the python",
    "start": "1607220",
    "end": "1614059"
  },
  {
    "text": "process that's doing this and the way our detection works and you'll see it if you read the plug-in source code is we",
    "start": "1614059",
    "end": "1620360"
  },
  {
    "text": "look at the console that our process was spawned on so which user it was spawn for and then we see if it has an open",
    "start": "1620360",
    "end": "1626120"
  },
  {
    "text": "handle to another process and at first we weren't sure like maybe this would have false positives or something like",
    "start": "1626120",
    "end": "1631760"
  },
  {
    "text": "that we ran it over the couple hundred memory samples we had easy access to from the wild and everything there",
    "start": "1631760",
    "end": "1637820"
  },
  {
    "text": "wasn't one false positive because why would you ever you know legitimately want to spy on someone else's terminal so it's a pretty very it's a very nice",
    "start": "1637820",
    "end": "1645440"
  },
  {
    "text": "indicator that something's wrong and then I just ran the PSA ux plugin which",
    "start": "1645440",
    "end": "1650480"
  },
  {
    "text": "shows you the command line arguments because again for the process name we're just seeing python but then if you look",
    "start": "1650480",
    "end": "1655820"
  },
  {
    "text": "at the arguments it's another project on GitHub called SSH keylogger that abuses this facility that that one is kind of",
    "start": "1655820",
    "end": "1663380"
  },
  {
    "text": "complex we we just broke down the functionality so it fit on a slide but we're still key logging there",
    "start": "1663380",
    "end": "1670539"
  },
  {
    "text": "and then the last thing we looked at was Mac on Mac you have what are called event Taps and what this means is you",
    "start": "1678679",
    "end": "1685100"
  },
  {
    "text": "can tap the hardware devices so you can tap the keyboard tap the mouse whatever it is you want to Target it's somewhat",
    "start": "1685100",
    "end": "1691940"
  },
  {
    "text": "similar to set Windows hook EX in that you tell it the function you want to be called when a key is pressed so that you",
    "start": "1691940",
    "end": "1698299"
  },
  {
    "text": "can steal it but this is built into Mac there's a cool tool from Patrick Wardle",
    "start": "1698299",
    "end": "1703400"
  },
  {
    "text": "one of his free security tools that will monitor the live system for when these are registered so I run this on my",
    "start": "1703400",
    "end": "1709159"
  },
  {
    "text": "laptop 24 7 because these are very dangerous but we want to be able to detect it from the memory forensics",
    "start": "1709159",
    "end": "1714500"
  },
  {
    "text": "perspective as well for this proof of concept we used",
    "start": "1714500",
    "end": "1719779"
  },
  {
    "text": "another we took another project from GitHub and modified it to work well in our environment I have the link down",
    "start": "1719779",
    "end": "1725480"
  },
  {
    "text": "here at the bottom to it but what we're doing here is we're getting set up to call the create tap function we're",
    "start": "1725480",
    "end": "1732020"
  },
  {
    "text": "saying that we want to monitor the keyboard and that we want to monitor the flags and the flag the flags are",
    "start": "1732020",
    "end": "1737600"
  },
  {
    "text": "important because that's going to tell you is caps lock one is shift key being held down because if you're trying to steal credentials you need to know that",
    "start": "1737600",
    "end": "1744140"
  },
  {
    "text": "specific information so once our event tab is created we're going to add it to a run Loop which is a",
    "start": "1744140",
    "end": "1750620"
  },
  {
    "text": "very technical part of Mac that just says I want to hook every process so just from this very simple code our",
    "start": "1750620",
    "end": "1756860"
  },
  {
    "text": "keylogger is going to be put into every process that code will be placed into there and then from then on",
    "start": "1756860",
    "end": "1763580"
  },
  {
    "text": "we'll get every keystroke possible now reverse engineering this what was",
    "start": "1763580",
    "end": "1769100"
  },
  {
    "text": "summarized in like two minutes on that slide was extremely difficult one of the most painful reversing tasks I've taken",
    "start": "1769100",
    "end": "1774679"
  },
  {
    "text": "on because Mac works very differently than Windows or Linux Mac in its xnu",
    "start": "1774679",
    "end": "1781039"
  },
  {
    "text": "kernel tries to be like a micro kernel which if you're not familiar with that says the kernel should only do the bare",
    "start": "1781039",
    "end": "1786679"
  },
  {
    "text": "minimal minimum so what's in that privileged space that can access all the hardware should be very very small and",
    "start": "1786679",
    "end": "1792679"
  },
  {
    "text": "this is good from a security perspective but it makes memory of forensics and reversing very strange because instead",
    "start": "1792679",
    "end": "1799100"
  },
  {
    "text": "of being able to just look in the kernel and the process you're analyzing you have to then go look at some other",
    "start": "1799100",
    "end": "1804200"
  },
  {
    "text": "process that's actually doing the hard work and there's no equivalent to that in any other operating system that we",
    "start": "1804200",
    "end": "1810440"
  },
  {
    "text": "deal with so after a good bit of reversing we figured out that when you call the CG event tab create function",
    "start": "1810440",
    "end": "1817120"
  },
  {
    "text": "inside of your process is going to be the Skylight Library so that's what's going to implement a lot of the GUI",
    "start": "1817120",
    "end": "1823100"
  },
  {
    "text": "stuff and then we figured out that that eventually goes to CG replace tab and",
    "start": "1823100",
    "end": "1828140"
  },
  {
    "text": "then inside the kernel all that does it's like two lines of code in either or just a few instructions all it does is",
    "start": "1828140",
    "end": "1834679"
  },
  {
    "text": "call Mac message inside the kernel with a hard-coded value so you're reversing and you have literally no idea what that",
    "start": "1834679",
    "end": "1840559"
  },
  {
    "text": "means it's completely useless to look at that so we had to figure out where is that actually reaching on the other end",
    "start": "1840559",
    "end": "1846860"
  },
  {
    "text": "so then we figured out in the Skylight library that for every underscore CG",
    "start": "1846860",
    "end": "1852080"
  },
  {
    "text": "function which is the one that the processes are going to call so like the key loggers are going to use inside that",
    "start": "1852080",
    "end": "1858020"
  },
  {
    "text": "same library is a companion function that starts with underscore X and as soon as we figured that out which was",
    "start": "1858020",
    "end": "1863240"
  },
  {
    "text": "multiple days later it was very easy to do it because you see the function that's being called and you see the",
    "start": "1863240",
    "end": "1868700"
  },
  {
    "text": "Handler so with that we wrote a plug-in that can see these calls going into",
    "start": "1868700",
    "end": "1874520"
  },
  {
    "text": "Windows server once the Windows server has that registered then every time a key is",
    "start": "1874520",
    "end": "1879980"
  },
  {
    "text": "pressed or the mouse is used whatever it is that the malware was interested in it's going to pass it back through the",
    "start": "1879980",
    "end": "1885500"
  },
  {
    "text": "kernel back to whichever process is doing the key logger so we then realized that was kind of interesting because",
    "start": "1885500",
    "end": "1891200"
  },
  {
    "text": "there's two places we can look to find this type of malware we can look inside the key logger process it's going to",
    "start": "1891200",
    "end": "1897020"
  },
  {
    "text": "have the malicious function it's going to have information on how it registered it hook it's hooked and then we can also",
    "start": "1897020",
    "end": "1903020"
  },
  {
    "text": "look at the Windows Server process just to get a global list of all of the key loggers",
    "start": "1903020",
    "end": "1908840"
  },
  {
    "text": "so instead of showing you assembly I use the decompiler for a quick view but we realized when we found the correct",
    "start": "1908840",
    "end": "1914960"
  },
  {
    "text": "function that X plays tap what happens is memory is allocated I named it cgx",
    "start": "1914960",
    "end": "1920899"
  },
  {
    "text": "event tap because we figured out that's what the data structure was when we were in Ida and then you can see once that",
    "start": "1920899",
    "end": "1925940"
  },
  {
    "text": "new data structure is created it's pointed to a global variable called cgx event tap Master list and then that",
    "start": "1925940",
    "end": "1932840"
  },
  {
    "text": "Master list is getting pointed to the new tab and if you're familiar with programming that's how linked lists are set up and the plugin was",
    "start": "1932840",
    "end": "1939620"
  },
  {
    "text": "straightforward at that point so we have a new plugin called Mac event Taps it looks inside of the Windows Server",
    "start": "1939620",
    "end": "1945380"
  },
  {
    "text": "process it finds this event tap Master list and then it just prints out all the entries and this is another one where on",
    "start": "1945380",
    "end": "1951799"
  },
  {
    "text": "a clean system you shouldn't have any key loggers active or things monitoring other Hardware devices why would you so",
    "start": "1951799",
    "end": "1957799"
  },
  {
    "text": "you can see in this case the plugins reporting the fact that we found a key logger the PID and then what it's",
    "start": "1957799",
    "end": "1962899"
  },
  {
    "text": "looking for so in conclusion we did a pretty",
    "start": "1962899",
    "end": "1968120"
  },
  {
    "text": "thorough analysis on all the malware that will monitor Hardware devices and steal all the data",
    "start": "1968120",
    "end": "1973700"
  },
  {
    "text": "I mentioned it before but if you came in late and I think we were just kind of talking on the side besides the slides",
    "start": "1973700",
    "end": "1979159"
  },
  {
    "text": "where you have some pictures and some data I think they published tomorrow morning you'll have a copy of these",
    "start": "1979159",
    "end": "1984919"
  },
  {
    "text": "slides as well as a white paper that turned out to be like 35 pages of all the Ida screenshots all the really",
    "start": "1984919",
    "end": "1990559"
  },
  {
    "text": "technical details so if you want the full Deep dive on anything I talked about check out the white paper when it",
    "start": "1990559",
    "end": "1996260"
  },
  {
    "text": "goes online so thank you all for coming",
    "start": "1996260",
    "end": "2002460"
  },
  {
    "text": "[Music]",
    "start": "2002460",
    "end": "2005569"
  },
  {
    "text": "[Music]",
    "start": "2009420",
    "end": "2012519"
  }
]