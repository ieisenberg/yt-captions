[
  {
    "start": "0",
    "end": "165000"
  },
  {
    "text": "[Music]",
    "start": "4210",
    "end": "14640"
  },
  {
    "text": "so hi uh thank you for attending our talk this is room for escape scribbling outside the lines of template security",
    "start": "15599",
    "end": "21600"
  },
  {
    "text": "my name is alvaro munoz also known as pontester in the social media i'm a staff security researcher with a",
    "start": "21600",
    "end": "27119"
  },
  {
    "text": "github security lab team and my colleague alexander miros or oleg mirosin in twitter and social media",
    "start": "27119",
    "end": "33040"
  },
  {
    "text": "which is a security researcher with the microfocus fortify team so today we will be talking",
    "start": "33040",
    "end": "39120"
  },
  {
    "text": "about content management systems or cmss and in particular the template systems",
    "start": "39120",
    "end": "44320"
  },
  {
    "text": "that they use to render dynamic content so a cms is an application that is used to manage different",
    "start": "44320",
    "end": "50000"
  },
  {
    "text": "web content and it basically allows multiple users and contributors to create edit and publish content on these",
    "start": "50000",
    "end": "56640"
  },
  {
    "text": "systems so what is important to us is that this content is normally",
    "start": "56640",
    "end": "62239"
  },
  {
    "text": "rendered based on a system of some documents called templates",
    "start": "62239",
    "end": "67280"
  },
  {
    "text": "and these templates are normally mixing both static and dynamic content so for the evaluation of that of those",
    "start": "67280",
    "end": "74159"
  },
  {
    "text": "dynamic parts in the templates these systems are normally using some subset of",
    "start": "74159",
    "end": "79759"
  },
  {
    "text": "some programming language capabilities which are powerful and normally are able to get a remote code execution",
    "start": "79759",
    "end": "86560"
  },
  {
    "text": "so uh these systems are normally sandboxed in order to prevent that so our research will focus",
    "start": "86560",
    "end": "92880"
  },
  {
    "text": "basically on net and java based content management systems because those are normally the languages",
    "start": "92880",
    "end": "99040"
  },
  {
    "text": "that are more used by enterprises and our assumption is that the attacker can control",
    "start": "99040",
    "end": "105119"
  },
  {
    "text": "the contents of a template right so it doesn't matter if it gets control of those templates",
    "start": "105119",
    "end": "110640"
  },
  {
    "text": "through a server-side template injection or maybe they can control it because they have permission uh to do that because they",
    "start": "110640",
    "end": "117600"
  },
  {
    "text": "are author of some different systems or they have for example a user in a sharepoint",
    "start": "117600",
    "end": "123680"
  },
  {
    "text": "or something like that so our goal here is to basically be able to escape those sandboxes and",
    "start": "123680",
    "end": "128959"
  },
  {
    "text": "run arbitrary system commands on the underlying servers so we will divide our talk into",
    "start": "128959",
    "end": "135200"
  },
  {
    "text": "the two different big blocks the first one will be around.net although we will basically focus on",
    "start": "135200",
    "end": "140959"
  },
  {
    "text": "sharepoint and we will show five different ways we were able to break uh the sharepoint sandbox and then we",
    "start": "140959",
    "end": "148400"
  },
  {
    "text": "will move into the java part where we will be uh reviewing 10 different content",
    "start": "148400",
    "end": "153519"
  },
  {
    "text": "management systems and up to four different template engines including the most popular ones free market and",
    "start": "153519",
    "end": "159440"
  },
  {
    "text": "velocity so with that we will wrap up with some takeaways and then we will open the floor for some q a thank you eribara in this",
    "start": "159440",
    "end": "167360"
  },
  {
    "start": "165000",
    "end": "225000"
  },
  {
    "text": "part of our presentation we will see examples of different types of security problems in sharepoint server",
    "start": "167360",
    "end": "173440"
  },
  {
    "text": "but before that we need to explain some basics of sharepoint security",
    "start": "173440",
    "end": "180000"
  },
  {
    "text": "sharepoint has two types of ispx pairs the first type is application page",
    "start": "180000",
    "end": "186000"
  },
  {
    "text": "actually each of these pages is part of sharepoint server and implements some application logic",
    "start": "186000",
    "end": "192239"
  },
  {
    "text": "they are stored in specific folders in file system and of course users are not",
    "start": "192239",
    "end": "198239"
  },
  {
    "text": "able to change them they are regular aspx pages and are processed by the server without any restrictions",
    "start": "198239",
    "end": "205680"
  },
  {
    "text": "in opposite to them there are site pages they are stored in databases and they can be customized even by",
    "start": "205680",
    "end": "213760"
  },
  {
    "text": "users sharepoint parts of them in special mode also known as safe mode actually they",
    "start": "213760",
    "end": "220879"
  },
  {
    "text": "are more like some sort of templates for dynamic content",
    "start": "220879",
    "end": "226000"
  },
  {
    "start": "225000",
    "end": "256000"
  },
  {
    "text": "this slide we can see a diagram how server works with this page virtual provider can fetch content from",
    "start": "226000",
    "end": "233280"
  },
  {
    "text": "file system or database based on the virtual path of the current page sp page parser filter will decide either",
    "start": "233280",
    "end": "242480"
  },
  {
    "text": "it is site page and safe mode should be applied or it is application page and it will be processed without any",
    "start": "242480",
    "end": "249840"
  },
  {
    "text": "restriction so page filter is critical element from security point of view in sharepoint",
    "start": "249840",
    "end": "257919"
  },
  {
    "start": "256000",
    "end": "301000"
  },
  {
    "text": "let's have a look at sample aspx page for our tag we are interesting only in",
    "start": "257919",
    "end": "264080"
  },
  {
    "text": "server side components like directives there are special instruction instructions on how",
    "start": "264080",
    "end": "270080"
  },
  {
    "text": "server should process this page often they have some numbers attributes",
    "start": "270080",
    "end": "275360"
  },
  {
    "text": "with values we can include servers site called either ins special blocks or",
    "start": "275360",
    "end": "281759"
  },
  {
    "text": "as embedded server side code server site controls should have the runout server attribute",
    "start": "281759",
    "end": "288000"
  },
  {
    "text": "server side comments block will be ignored on the server and the last element",
    "start": "288000",
    "end": "293680"
  },
  {
    "text": "server site include directives allow us to include raw content of arbitrary",
    "start": "293680",
    "end": "300240"
  },
  {
    "text": "files now we can better understand what safe mode means",
    "start": "300240",
    "end": "305919"
  },
  {
    "start": "301000",
    "end": "342000"
  },
  {
    "text": "site page will not be compiled so we cannot use server side code here we",
    "start": "305919",
    "end": "312400"
  },
  {
    "text": "are not able to include files from file system we can only use allowed controls this",
    "start": "312400",
    "end": "317680"
  },
  {
    "text": "list is defined in safe control section of web config file page filter also",
    "start": "317680",
    "end": "323600"
  },
  {
    "text": "applies allow list for directives and even for attributes of most of them",
    "start": "323600",
    "end": "329600"
  },
  {
    "text": "there are many other restrictions for example event binding is blocked as well this set of restriction looks quite",
    "start": "329600",
    "end": "336400"
  },
  {
    "text": "impressive but let's look possible type of attacks what we can perform",
    "start": "336400",
    "end": "343440"
  },
  {
    "start": "342000",
    "end": "430000"
  },
  {
    "text": "as we know safe mode is enforced by page filter so our first question was either any",
    "start": "343520",
    "end": "349840"
  },
  {
    "text": "place where sharepoint does not use it and answer yes there are such places",
    "start": "349840",
    "end": "355280"
  },
  {
    "text": "page filter will not be applied for the content argument of the parse control method if it's",
    "start": "355280",
    "end": "360960"
  },
  {
    "text": "called only with one argument or if the second one that actually is named ignore parts filter is true",
    "start": "360960",
    "end": "367440"
  },
  {
    "text": "in addition page filter will be used at rendering time but ignored in design time",
    "start": "367440",
    "end": "374639"
  },
  {
    "text": "but even if page fit is not applied sharepoint uses another way to verify",
    "start": "374639",
    "end": "380960"
  },
  {
    "text": "the input it is verify control on save list method from editing page parse type that aim",
    "start": "380960",
    "end": "388240"
  },
  {
    "text": "to do the same task of the original page filter so what we can do let's",
    "start": "388240",
    "end": "394800"
  },
  {
    "text": "imagine for one second that we are able to bypass either this method or patch",
    "start": "394800",
    "end": "400400"
  },
  {
    "text": "filter by the way each such bypass is separate from an ability we will present them",
    "start": "400400",
    "end": "405759"
  },
  {
    "text": "in a few minutes so how could we get remote code execution after escaping safe mode since pass control",
    "start": "405759",
    "end": "413919"
  },
  {
    "text": "method never cause compilation we are not able to use server side code or perform other",
    "start": "413919",
    "end": "420160"
  },
  {
    "text": "attacks that require such compilation but if we escape safe mode we can use unsafe controls or directors",
    "start": "420160",
    "end": "427599"
  },
  {
    "text": "so let's review a few of them one of the most interesting and safe",
    "start": "427599",
    "end": "432880"
  },
  {
    "start": "430000",
    "end": "453000"
  },
  {
    "text": "controls is object data source it allows us to invoke public method from our bad",
    "start": "432880",
    "end": "438560"
  },
  {
    "text": "arbitrary public type we can see an example of payload that uses the start method",
    "start": "438560",
    "end": "443599"
  },
  {
    "text": "from process type to popup calculator so actually it is arbitrary record execution by definition",
    "start": "443599",
    "end": "449360"
  },
  {
    "text": "game over but let's review a couple other unsafe controls xml data source and xml controls allow",
    "start": "449360",
    "end": "456800"
  },
  {
    "text": "us to get the content of arbitrary xml files the similar results we can get by server",
    "start": "456800",
    "end": "462479"
  },
  {
    "text": "set include directives that return us a content of any text file let's see on the next",
    "start": "462479",
    "end": "470400"
  },
  {
    "text": "slide how we can escalate from arbitrary file read to arbitrary code execution",
    "start": "470400",
    "end": "477680"
  },
  {
    "start": "476000",
    "end": "507000"
  },
  {
    "text": "if we can access the webconfig file we will be able to get value of validation key from machine key",
    "start": "477680",
    "end": "484240"
  },
  {
    "text": "section by the way this value may be present in other places such as internal sharepoint properties you can",
    "start": "484240",
    "end": "490639"
  },
  {
    "text": "find this example in our white paper with validation key we can generate a",
    "start": "490639",
    "end": "495759"
  },
  {
    "text": "valid view state that will execute arbitrary commands on the target",
    "start": "495759",
    "end": "500879"
  },
  {
    "text": "server you can use tools such as user serial.net to generate this payload",
    "start": "500879",
    "end": "509039"
  },
  {
    "start": "507000",
    "end": "544000"
  },
  {
    "text": "now when we know what safe mode is and how we can compromise sharepoint server if it's bypassed",
    "start": "509039",
    "end": "515120"
  },
  {
    "text": "we can move to our next part here we will present five different types of security",
    "start": "515120",
    "end": "520399"
  },
  {
    "text": "problems in content management system we will show examples of each type in sharepoint",
    "start": "520399",
    "end": "526880"
  },
  {
    "text": "we would like to stress here that our target is sharepoint server with default",
    "start": "526880",
    "end": "532000"
  },
  {
    "text": "configuration all vulnerable vulnerability allowed us to execute arbitrary code on the target",
    "start": "532000",
    "end": "539760"
  },
  {
    "text": "all attacks were performed by regular users and no admin rights were needed let's start",
    "start": "539760",
    "end": "547040"
  },
  {
    "start": "544000",
    "end": "564000"
  },
  {
    "text": "the first type of security problems is access to resources with sensitive information it can be",
    "start": "547040",
    "end": "552800"
  },
  {
    "text": "configuration or business information in various files logs database or even process",
    "start": "552800",
    "end": "557920"
  },
  {
    "text": "memory of course a proper sandbox should prevent this problem but it's not always the case we already",
    "start": "557920",
    "end": "566000"
  },
  {
    "start": "564000",
    "end": "604000"
  },
  {
    "text": "mentioned that page filter block server set include directors and verify control on safe list method",
    "start": "566000",
    "end": "572160"
  },
  {
    "text": "should do as well and actually it does but if it's called this false in block",
    "start": "572160",
    "end": "578320"
  },
  {
    "text": "server set includes argument it will not block them we found such usage of this method it",
    "start": "578320",
    "end": "584399"
  },
  {
    "text": "was used for design mode the next building block from for our attack how",
    "start": "584399",
    "end": "590000"
  },
  {
    "text": "can we provide our markup to this mode we can send it in the verb part xml",
    "start": "590000",
    "end": "596720"
  },
  {
    "text": "parameter of the render web part for edit method of the web part page services",
    "start": "596720",
    "end": "601920"
  },
  {
    "text": "so we can try to include web config there here we can see the full payload uh",
    "start": "601920",
    "end": "609279"
  },
  {
    "start": "604000",
    "end": "628000"
  },
  {
    "text": "that will be sent in uh mentioned parameter and address of relevant web service",
    "start": "609279",
    "end": "615440"
  },
  {
    "text": "server returned us the entire web config with validation key we used it for view state based",
    "start": "615440",
    "end": "621360"
  },
  {
    "text": "visualization attack which led us to executing arbitrary os command on the server",
    "start": "621360",
    "end": "628560"
  },
  {
    "start": "628000",
    "end": "646000"
  },
  {
    "text": "time for our next type of security problem allow dangerous element that can be used",
    "start": "629760",
    "end": "635519"
  },
  {
    "text": "for attacks we have found an example in sharepoint safe control list",
    "start": "635519",
    "end": "640720"
  },
  {
    "text": "or should we call it don't show safe control list in this case",
    "start": "640720",
    "end": "647120"
  },
  {
    "start": "646000",
    "end": "684000"
  },
  {
    "text": "it is contact link suggestion micro view control we can see snippet",
    "start": "647120",
    "end": "652720"
  },
  {
    "text": "with interesting call from its implementation where request parameter is passed into",
    "start": "652720",
    "end": "658320"
  },
  {
    "text": "data set read dataset.xml method if we can control input for this method",
    "start": "658320",
    "end": "663680"
  },
  {
    "text": "we can get our data deserialized by xml serialized and be able to control a destination type",
    "start": "663680",
    "end": "671040"
  },
  {
    "text": "we already showed in one of our previous research that in this case we can get a repeat record execution",
    "start": "671040",
    "end": "677920"
  },
  {
    "text": "unfortunately this payload is too big for slides but you can find it in our white paper",
    "start": "677920",
    "end": "685040"
  },
  {
    "start": "684000",
    "end": "705000"
  },
  {
    "text": "the last piece of our puzzle is side page with this dangerous control we",
    "start": "685519",
    "end": "691600"
  },
  {
    "text": "can see it on our slide for unpack we need to place the payload into text box and",
    "start": "691600",
    "end": "699120"
  },
  {
    "text": "click on the submit button and desired command will be executed on the sharepoint server",
    "start": "699120",
    "end": "705839"
  },
  {
    "text": "for art for us the next type of security problems look quite interesting so we will try to",
    "start": "707279",
    "end": "712480"
  },
  {
    "text": "explain it with more details content usually means that we will have",
    "start": "712480",
    "end": "718800"
  },
  {
    "text": "at least read access to some properties or attributes of some objects",
    "start": "718800",
    "end": "723839"
  },
  {
    "text": "for some system like sharia point we can even have right access sandbox should filter out",
    "start": "723839",
    "end": "731200"
  },
  {
    "text": "the access to dangerous properties or attributes",
    "start": "731200",
    "end": "736720"
  },
  {
    "text": "let's review basic types of such filtering the first case is when only one level of properties or attributes is",
    "start": "737519",
    "end": "744160"
  },
  {
    "text": "allowed we can see examples on the slide name property of user object or selected value from menu we can",
    "start": "744160",
    "end": "751440"
  },
  {
    "text": "imagine the object and its property like branch with only lives",
    "start": "751440",
    "end": "757360"
  },
  {
    "text": "if an allow list is applied it is relatively easy to review all elements and after such review we can",
    "start": "757360",
    "end": "763200"
  },
  {
    "text": "make sure that there is no dangerous element what if a block list is used instead",
    "start": "763200",
    "end": "768720"
  },
  {
    "text": "we still need to verify our available objects and it can be a bit difficult so in general we do not consider block",
    "start": "768720",
    "end": "775519"
  },
  {
    "text": "list a safe approach because of potential gaps on them we will see",
    "start": "775519",
    "end": "780560"
  },
  {
    "text": "in java part of our presentation a couple examples of such bypasses",
    "start": "780560",
    "end": "786720"
  },
  {
    "text": "the most interesting case for us is when access to nested property or attributes is allowed",
    "start": "786720",
    "end": "793440"
  },
  {
    "text": "for example request dot auth user dot name or menu dot selected item dot text",
    "start": "793440",
    "end": "800160"
  },
  {
    "text": "because of branch leads leaves analogy many developers may imagine this case as",
    "start": "800160",
    "end": "805839"
  },
  {
    "text": "branch with branches and leaves and they can apply filter only for the first level objects",
    "start": "805839",
    "end": "814079"
  },
  {
    "text": "but it's not tree it is network and we may jump from one branch to another",
    "start": "814079",
    "end": "819600"
  },
  {
    "text": "or even to the trunk for example on the slide we can see how to access application instance",
    "start": "819600",
    "end": "825839"
  },
  {
    "text": "from menu control let's move to our example in sharepoint",
    "start": "825839",
    "end": "831279"
  },
  {
    "start": "827000",
    "end": "869000"
  },
  {
    "text": "it has wiki content web part control it is allowed and will pass our markup into the parse control method",
    "start": "831279",
    "end": "838320"
  },
  {
    "text": "please note it is called this false value in ignore parse filter argument so page filter will not be ignored",
    "start": "838320",
    "end": "846800"
  },
  {
    "text": "the following snippet shows that in this case the virtual path will be created from up relative virtual path property and if",
    "start": "846800",
    "end": "855040"
  },
  {
    "text": "you remember page filter will apply restriction based on this virtual path so if we are able to change it it",
    "start": "855040",
    "end": "863120"
  },
  {
    "text": "we can fool the page filter not to apply restriction at all to our markup",
    "start": "863120",
    "end": "870000"
  },
  {
    "text": "let's try to craft such payload first snippet fails because when aspx parsers try to",
    "start": "870000",
    "end": "876880"
  },
  {
    "text": "assign a new value to our up relative virtual path the page property of our control is not",
    "start": "876880",
    "end": "882560"
  },
  {
    "text": "defined yet so we need to delay this assignment a little bit this can be done using data binding so",
    "start": "882560",
    "end": "889680"
  },
  {
    "text": "by time the property is bound the page property will be already defined",
    "start": "889680",
    "end": "896399"
  },
  {
    "text": "here is our final payload we can notice that our new path points to settings uh",
    "start": "896800",
    "end": "903839"
  },
  {
    "text": "page its application page it is assign it to tool t property and later will be transferred",
    "start": "903839",
    "end": "909680"
  },
  {
    "text": "to up relative retail path so the page filter will think that this is system page and will allow any unsafe",
    "start": "909680",
    "end": "917040"
  },
  {
    "text": "markup for example we can use our object object data source control to pop up calculator",
    "start": "917040",
    "end": "924160"
  },
  {
    "start": "924000",
    "end": "999000"
  },
  {
    "text": "uh let's see how this attack looks on real sharepoint server",
    "start": "924959",
    "end": "930000"
  },
  {
    "text": "oh here is our site page this payload here is passed to the system page",
    "start": "932079",
    "end": "938000"
  },
  {
    "text": "it will be transferred to up relative virtual path here is our unsafe uh markup with object",
    "start": "938000",
    "end": "944240"
  },
  {
    "text": "data source start method process type and calculator uh file name we let's",
    "start": "944240",
    "end": "952480"
  },
  {
    "text": "save it's here for our attack we need to upload this to sharepoint server our target is sharepoint with default",
    "start": "952480",
    "end": "959279"
  },
  {
    "text": "configuration in this configuration regular users usually have access to their own personal site so we can use it",
    "start": "959279",
    "end": "966399"
  },
  {
    "text": "we are attacker it's regular user no admin uh rights so uh here is a",
    "start": "966399",
    "end": "973040"
  },
  {
    "text": "a personal site let's uh upload our page or to trigger our attack we",
    "start": "973040",
    "end": "979519"
  },
  {
    "text": "just need to click on it but before that let's pay attention on the uh other window in the screen it is task",
    "start": "979519",
    "end": "986079"
  },
  {
    "text": "manager so we will on this sharepoint so we will see if a calculator starts actually it starts attack was",
    "start": "986079",
    "end": "994839"
  },
  {
    "text": "successful",
    "start": "994839",
    "end": "997839"
  },
  {
    "start": "999000",
    "end": "1054000"
  },
  {
    "text": "by the way we were able to export read access to nested properties in sharepoint",
    "start": "1000480",
    "end": "1005920"
  },
  {
    "text": "but unfortunately we do not have time to present this vulnerability today you can find all details in our white",
    "start": "1005920",
    "end": "1012800"
  },
  {
    "text": "paper now let's move to the next type of",
    "start": "1012800",
    "end": "1017839"
  },
  {
    "text": "security problems it is connected with our previous work on unsafe decentralization",
    "start": "1017839",
    "end": "1022959"
  },
  {
    "text": "such kind of problem is relevant to when text or binary data is converted to an object",
    "start": "1022959",
    "end": "1028079"
  },
  {
    "text": "and the typo or class of this object is under attacker control also it is not properly limited",
    "start": "1028079",
    "end": "1035678"
  },
  {
    "text": "actually it doesn't really matter what mechanism is used classical the serializer json and",
    "start": "1035679",
    "end": "1040959"
  },
  {
    "text": "marshalls type converters or even some custom approaches all of them are potentially dangerous",
    "start": "1040959",
    "end": "1047438"
  },
  {
    "text": "also for successful exploitation attackers may need to find proper gadget on the target system",
    "start": "1047439",
    "end": "1054559"
  },
  {
    "start": "1054000",
    "end": "1079000"
  },
  {
    "text": "we have found an example of such problem in sharepoint server and were able to perform arbitrary execution attack using it",
    "start": "1055440",
    "end": "1062000"
  },
  {
    "text": "microsoft assigned an cv number to this vulnerability but because this problem affects a few other products",
    "start": "1062000",
    "end": "1068080"
  },
  {
    "text": "microsoft was not able to release fixes for all of them in time so we are going to",
    "start": "1068080",
    "end": "1074000"
  },
  {
    "text": "publish all details of this vulnerability a bit later when all fixes are released",
    "start": "1074000",
    "end": "1080720"
  },
  {
    "start": "1079000",
    "end": "1098000"
  },
  {
    "text": "the last type of security problems in this part is the classical time of check to time of use problems",
    "start": "1080720",
    "end": "1087520"
  },
  {
    "text": "they occur when the server validates some input but it can be later",
    "start": "1087520",
    "end": "1092720"
  },
  {
    "text": "changed before that server is used",
    "start": "1092720",
    "end": "1098240"
  },
  {
    "start": "1098000",
    "end": "1114000"
  },
  {
    "text": "we found such problem in web part editing surface page user input is validated by the already",
    "start": "1098720",
    "end": "1105039"
  },
  {
    "text": "known for us verify control on save this method but later the server may just modify the input and remove some",
    "start": "1105039",
    "end": "1112080"
  },
  {
    "text": "substring from it let's consider the next uh content",
    "start": "1112080",
    "end": "1118400"
  },
  {
    "start": "1114000",
    "end": "1167000"
  },
  {
    "text": "for verify control on save list it is just one server side comment block so it will",
    "start": "1118400",
    "end": "1124160"
  },
  {
    "text": "pass validation but sharepoint removes the yellow substring and parse control will",
    "start": "1124160",
    "end": "1129520"
  },
  {
    "text": "see two comments and some markup node parse control has only one argument so page filter will be ignored",
    "start": "1129520",
    "end": "1139280"
  },
  {
    "text": "time for our payload we can notice here our unsafe object object data source",
    "start": "1139280",
    "end": "1144720"
  },
  {
    "text": "control and calculator of course in all our examples we could change this command to",
    "start": "1144720",
    "end": "1150720"
  },
  {
    "text": "a more interesting one and compromise compromise sharepoint server but it would be another story now let's",
    "start": "1150720",
    "end": "1157919"
  },
  {
    "text": "switch back to alvar and he will present the java part of our research thank you alexander and now we will be",
    "start": "1157919",
    "end": "1164720"
  },
  {
    "text": "focusing on the java part for that we analyze four different uh sandbox java template engines including",
    "start": "1164720",
    "end": "1171679"
  },
  {
    "text": "the most popular ones which are free marker velocity and also gene java and pebble",
    "start": "1171679",
    "end": "1177280"
  },
  {
    "text": "and in order to test our bypasses we will be testing them on different cms-like systems such as",
    "start": "1177280",
    "end": "1184400"
  },
  {
    "text": "life ray alfresco confluence or hubspot just to mention a few",
    "start": "1184400",
    "end": "1190080"
  },
  {
    "start": "1189000",
    "end": "1263000"
  },
  {
    "text": "so a brief introduction into what a content or a template engine is basically um we",
    "start": "1190080",
    "end": "1196000"
  },
  {
    "text": "have a template which is mixing both static and dynamic content and then the template engine is",
    "start": "1196000",
    "end": "1202640"
  },
  {
    "text": "resolving and expanding this dynamic content by using some objects",
    "start": "1202640",
    "end": "1208080"
  },
  {
    "text": "that are available in something that is known as the template context so in this example",
    "start": "1208080",
    "end": "1213200"
  },
  {
    "text": "the user.name expression will be resolved by accessing the user object and then invoking the get name",
    "start": "1213200",
    "end": "1221520"
  },
  {
    "text": "property the get name getter in this object because this invocation is 10 years and can lead to",
    "start": "1221520",
    "end": "1228240"
  },
  {
    "text": "bypasses of or arbitrary code execution then these template engines are normally",
    "start": "1228240",
    "end": "1233360"
  },
  {
    "text": "sandbox in order to prevent further access of methods reflection through reflection that",
    "start": "1233360",
    "end": "1238799"
  },
  {
    "text": "should not be allowed so apart from those objects like users that are directly used in in the",
    "start": "1238799",
    "end": "1245120"
  },
  {
    "text": "template these frameworks and this content management system normally exposed a number of other objects",
    "start": "1245120",
    "end": "1251440"
  },
  {
    "text": "to the template context this is known as the template api and in includes things like the",
    "start": "1251440",
    "end": "1257200"
  },
  {
    "text": "satellite request our response the servlet context just to mention a",
    "start": "1257200",
    "end": "1262640"
  },
  {
    "text": "few so the first kind of bypass that we will be using is",
    "start": "1262640",
    "end": "1268559"
  },
  {
    "start": "1263000",
    "end": "1285000"
  },
  {
    "text": "trying to find objects in this context which can be used to get remote code",
    "start": "1268559",
    "end": "1274720"
  },
  {
    "text": "execution right so these are genetic in the sense that no matter if it's uh we are using jinjaba or free marker those",
    "start": "1274720",
    "end": "1282400"
  },
  {
    "text": "should be working regardless of the engine so first of all we need to see and analyze what is in the context",
    "start": "1282400",
    "end": "1290640"
  },
  {
    "start": "1285000",
    "end": "1340000"
  },
  {
    "text": "right so for that if we get access to the java runtime we can instrument it or debug it and then dump the context",
    "start": "1290640",
    "end": "1297520"
  },
  {
    "text": "and analyze those objects if not we have to read the documentation",
    "start": "1297520",
    "end": "1302559"
  },
  {
    "text": "maybe brute force or guess some common names like request or break or response rest",
    "start": "1302559",
    "end": "1307760"
  },
  {
    "text": "for example and then in some cases like free marker we are able to actually list all the",
    "start": "1307760",
    "end": "1314640"
  },
  {
    "text": "objects in the context through some special variables apart from those objects that are",
    "start": "1314640",
    "end": "1320720"
  },
  {
    "text": "directly exposed we have some indirectly exposed objects like for example if the request",
    "start": "1320720",
    "end": "1326640"
  },
  {
    "text": "is exposed all of the request attributes are exposed as well so same thing with",
    "start": "1326640",
    "end": "1332159"
  },
  {
    "text": "the session and the satellite context and we will be able to find very interesting objects yeah",
    "start": "1332159",
    "end": "1338400"
  },
  {
    "text": "in this set of attributes so let's see an example of how many objects we are able to find in a",
    "start": "1338400",
    "end": "1346960"
  },
  {
    "start": "1340000",
    "end": "1717000"
  },
  {
    "text": "regular content management system like for example life ray that's what we call object dumpster",
    "start": "1346960",
    "end": "1352159"
  },
  {
    "text": "diving and you will see why in few minutes so um this is the template that we will",
    "start": "1352159",
    "end": "1357360"
  },
  {
    "text": "be using first of all we will be listing all the context objects by using the",
    "start": "1357360",
    "end": "1362799"
  },
  {
    "text": "dot data model variable then we will be listing all the attributes in the",
    "start": "1362799",
    "end": "1367840"
  },
  {
    "text": "request and then the attributes in the session and then the attributes in the servlet context",
    "start": "1367840",
    "end": "1372960"
  },
  {
    "text": "and because the selfless context give us access to the spring application context we will also be",
    "start": "1372960",
    "end": "1378960"
  },
  {
    "text": "listing all of the spring bins that are available to us so if we render these",
    "start": "1378960",
    "end": "1387360"
  },
  {
    "text": "this template we will see all of the context objects those are normally exposed by by the",
    "start": "1387360",
    "end": "1393440"
  },
  {
    "text": "framework or cms and those are kind of safe sometimes but apart from that we have",
    "start": "1393440",
    "end": "1400320"
  },
  {
    "text": "access to a bunch of request attributes a bunch of session attributes and a bunch of",
    "start": "1400320",
    "end": "1406400"
  },
  {
    "text": "self-led context attributes including things like this instance manager that we will be using",
    "start": "1406400",
    "end": "1411919"
  },
  {
    "text": "to get through local execution we also have access to the spring web application context as we mentioned",
    "start": "1411919",
    "end": "1418080"
  },
  {
    "text": "which will give us access to all of the spring bins registered in this context which are in the order of hundreds",
    "start": "1418080",
    "end": "1425679"
  },
  {
    "text": "so we get a total of almost 900 um",
    "start": "1425679",
    "end": "1430720"
  },
  {
    "text": "objects available to us and those are objects that expose other objects so we normally get access to",
    "start": "1430720",
    "end": "1437279"
  },
  {
    "text": "thousands of objects so this is why we call it object dumpster diving right because this is",
    "start": "1437279",
    "end": "1442320"
  },
  {
    "text": "how we felt like looking for a few interesting objects in hundreds and thousands and thousands",
    "start": "1442320",
    "end": "1447760"
  },
  {
    "text": "of objects that in most cases should not even be exposed to the template in the first",
    "start": "1447760",
    "end": "1452880"
  },
  {
    "text": "in the first case so we will be reviewing the top three objects that lead to remote execution",
    "start": "1452880",
    "end": "1459120"
  },
  {
    "text": "that we were able to find and the number one will be the class loader which was available in 10 out of",
    "start": "1459120",
    "end": "1464400"
  },
  {
    "text": "the 10 content management systems that we analyzed this is normally available through the class object",
    "start": "1464400",
    "end": "1470559"
  },
  {
    "text": "but since that one is normally blocked you can still get access to it through either the protection domain or self-led",
    "start": "1470559",
    "end": "1476799"
  },
  {
    "text": "context that which are normally not non-blocked uh once that we have access",
    "start": "1476799",
    "end": "1482000"
  },
  {
    "text": "to a class loader we can obviously load arbitrary classes or class path resources from that class",
    "start": "1482000",
    "end": "1488480"
  },
  {
    "text": "loader but we can also read any arbitrary file from the file system by accessing a url",
    "start": "1488480",
    "end": "1494960"
  },
  {
    "text": "object and then pointing the underlying uri to our arbitrary file and then",
    "start": "1494960",
    "end": "1501679"
  },
  {
    "text": "opening a connection and reading the byte from from that connection so because these content management",
    "start": "1501679",
    "end": "1508000"
  },
  {
    "text": "systems are normally deployed on top of an application server or satellite",
    "start": "1508000",
    "end": "1513200"
  },
  {
    "text": "containers then those class loaders that we are going to get access to are normally",
    "start": "1513200",
    "end": "1518480"
  },
  {
    "text": "instances of web application class loaders which expose a number of features and",
    "start": "1518480",
    "end": "1523600"
  },
  {
    "text": "capabilities on top of the regular class loader ones so we were able to abuse those",
    "start": "1523600",
    "end": "1530240"
  },
  {
    "text": "additional methods to get remote code execution in nine out of the ten cms like systems that we analyzed and we",
    "start": "1530240",
    "end": "1537760"
  },
  {
    "text": "don't have time unfortunately to cover them today because they are sometimes complex and and will have time in this",
    "start": "1537760",
    "end": "1543840"
  },
  {
    "text": "40 minutes presentation but they range from being able to upload a website",
    "start": "1543840",
    "end": "1549200"
  },
  {
    "text": "to instantiate arbitrary objects to perform jndi injection attacks or to initialize",
    "start": "1549200",
    "end": "1554960"
  },
  {
    "text": "attacker control classes leading to the execution of the static initializer of that class",
    "start": "1554960",
    "end": "1561760"
  },
  {
    "text": "so the number two object that leads to remote code execution and that we found",
    "start": "1561760",
    "end": "1567120"
  },
  {
    "text": "in nine out of the ten cms cms-like systems that we analyzed is the instance manager so an instance",
    "start": "1567120",
    "end": "1573679"
  },
  {
    "text": "manager is an object that is capable of instantiating arbitrary types",
    "start": "1573679",
    "end": "1579200"
  },
  {
    "text": "you normally find it either as part of the selfless context attributes or through one of these web",
    "start": "1579200",
    "end": "1585679"
  },
  {
    "text": "application class loaders that we mentioned before once that we get access to the instance manager sometimes also called",
    "start": "1585679",
    "end": "1592159"
  },
  {
    "text": "object factory you can instantiate arbitrary types in this case we are instantiating the",
    "start": "1592159",
    "end": "1597360"
  },
  {
    "text": "script engine manager in order to evaluate arbitrary javascript and java code but once that you can instantiate",
    "start": "1597360",
    "end": "1604159"
  },
  {
    "text": "arbitrary types you can get remote code execution through a number of different vectors [Music]",
    "start": "1604159",
    "end": "1610159"
  },
  {
    "text": "the number three object that we found in four out of the ten systems is the spring application context",
    "start": "1610159",
    "end": "1616400"
  },
  {
    "text": "actually the only four systems that were using a spring framework um underneath to manage",
    "start": "1616400",
    "end": "1623120"
  },
  {
    "text": "the the dependency injection so we were able to access the spring application context through",
    "start": "1623120",
    "end": "1629279"
  },
  {
    "text": "these satellite context attributes but also a spring mvc if it's been used will inject a",
    "start": "1629279",
    "end": "1636080"
  },
  {
    "text": "variable called spring macro request context into the template context and you can use that one to get access",
    "start": "1636080",
    "end": "1642960"
  },
  {
    "text": "to the web application context so from there you can get access to the class loader to the environment",
    "start": "1642960",
    "end": "1648720"
  },
  {
    "text": "including things like the environment variables but also the spring properties which will include things like",
    "start": "1648720",
    "end": "1654640"
  },
  {
    "text": "encryption keys and another interesting stuff but probably most interesting is the access to them",
    "start": "1654640",
    "end": "1660480"
  },
  {
    "text": "to the spring bins right as we saw in life ray we get access to hundreds and hundreds of objects",
    "start": "1660480",
    "end": "1666399"
  },
  {
    "text": "which are normally meant to control the application logic right things like",
    "start": "1666399",
    "end": "1671520"
  },
  {
    "text": "creating new users deleting users and creating new transactions and things like that and",
    "start": "1671520",
    "end": "1677760"
  },
  {
    "text": "because these are normally behind the layer of authorization they will give you access to those",
    "start": "1677760",
    "end": "1683919"
  },
  {
    "text": "operations without any further authentication or authorization checks you can also do other interesting stuff",
    "start": "1683919",
    "end": "1690320"
  },
  {
    "text": "like disabling the template engines and box all together and also instantiate arbitrary objects",
    "start": "1690320",
    "end": "1697120"
  },
  {
    "text": "through um things like uh json and martial or xml deserializer so those were like the",
    "start": "1697120",
    "end": "1704880"
  },
  {
    "text": "top three ones and we found other objects leading to remote code execution plenty of them but we don't have time to",
    "start": "1704880",
    "end": "1711200"
  },
  {
    "text": "cover them today again this will be explained and covered in the white paper that we will be",
    "start": "1711200",
    "end": "1716320"
  },
  {
    "text": "releasing so those were generic in the sense that they were dependent on finding objects",
    "start": "1716320",
    "end": "1722960"
  },
  {
    "start": "1717000",
    "end": "2203000"
  },
  {
    "text": "in the context no matter if that was the context of the gene java engine or the free",
    "start": "1722960",
    "end": "1728799"
  },
  {
    "text": "marker one now we will be reviewing some of the specific bypasses that we found for",
    "start": "1728799",
    "end": "1735279"
  },
  {
    "text": "these four different template engines so we will start with free marker",
    "start": "1735279",
    "end": "1740880"
  },
  {
    "text": "it's probably the most popular one also the one that got more attention from the security community",
    "start": "1740880",
    "end": "1746080"
  },
  {
    "text": "starting by james kettle who presented back into 2015 this presentation about um server side",
    "start": "1746080",
    "end": "1752799"
  },
  {
    "text": "template injection actually introducing the whole category type and he found a way of",
    "start": "1752799",
    "end": "1758159"
  },
  {
    "text": "bypassing the sandbox by using an add-on that is was part of the default configuration at that time",
    "start": "1758159",
    "end": "1764480"
  },
  {
    "text": "so uh tonito robert found a different bypass i've been able to instantiate arbitrary objects",
    "start": "1764480",
    "end": "1769679"
  },
  {
    "text": "but this bypass is not universal in the sense that it depends on one of these add-ons that is not part of",
    "start": "1769679",
    "end": "1775679"
  },
  {
    "text": "the default configuration and also being able to access some special fields and some objects in third",
    "start": "1775679",
    "end": "1783279"
  },
  {
    "text": "party libraries which are not part of the free market distribution",
    "start": "1783279",
    "end": "1788960"
  },
  {
    "text": "last but not least ryan hansen at the same time that we were performing this this research published a bypass",
    "start": "1788960",
    "end": "1796080"
  },
  {
    "text": "that works only in tomcat and that leads to remote code execution by uploading our webshell so",
    "start": "1796080",
    "end": "1802080"
  },
  {
    "text": "those were like the ones that we were aware of and then we will be reviewing the sandbox in in free market so this",
    "start": "1802080",
    "end": "1808720"
  },
  {
    "text": "sandbox is based on blocking individual methods like for example the java lang class get",
    "start": "1808720",
    "end": "1814240"
  },
  {
    "text": "class loader method is blocked you cannot invoke it but as we mentioned before we have different ways of getting an",
    "start": "1814240",
    "end": "1820640"
  },
  {
    "text": "instance of a class loader like for example using the self-led context then all the class loader methods are",
    "start": "1820640",
    "end": "1826559"
  },
  {
    "text": "allowed they are not blocked by this block list so if you find an instance of a web application class loader that is already",
    "start": "1826559",
    "end": "1833120"
  },
  {
    "text": "jackpot you can get remote code execution otherwise you can still get access to",
    "start": "1833120",
    "end": "1839679"
  },
  {
    "text": "or get remote execution by accessing public static fields which is also allowed by the block list",
    "start": "1839679",
    "end": "1847279"
  },
  {
    "text": "so in order to do that we found interesting public static fields within the",
    "start": "1847279",
    "end": "1852960"
  },
  {
    "text": "free market library so we use codequill for that if you are not familiar with codeql it's",
    "start": "1852960",
    "end": "1858640"
  },
  {
    "text": "a language that allows you to query source code as you query a database for example using sql",
    "start": "1858640",
    "end": "1866240"
  },
  {
    "text": "and we don't have time to explain the the query here but the idea what we are asking for is",
    "start": "1866240",
    "end": "1871600"
  },
  {
    "text": "okay find me all the public static fields which contain or of a given type which",
    "start": "1871600",
    "end": "1877360"
  },
  {
    "text": "contains a method that allows me to instantiate arbitrary types so running this query on free marker",
    "start": "1877360",
    "end": "1884080"
  },
  {
    "text": "code we found four different results all of them are fields from different",
    "start": "1884080",
    "end": "1890159"
  },
  {
    "text": "interfaces or classes but what they have in common is that all of them extend from the bins wrapper",
    "start": "1890159",
    "end": "1897279"
  },
  {
    "text": "class and this class contains a new instance method which will allow us to instantiate arbitrary",
    "start": "1897279",
    "end": "1902799"
  },
  {
    "text": "types so with that the universal bypass is basically based on getting an",
    "start": "1902799",
    "end": "1910080"
  },
  {
    "text": "instance of the class loader either through the protection domain or through the self-led context and then loading",
    "start": "1910080",
    "end": "1915600"
  },
  {
    "text": "the object wrapper interface and from there grabbing the default wrapper field because this field",
    "start": "1915600",
    "end": "1922559"
  },
  {
    "text": "contains the new instance method we can instantiate arbitrary types and in this case to keep the bypass",
    "start": "1922559",
    "end": "1930080"
  },
  {
    "text": "self-contained in free market libraries we are using the execute class which will allow us to invoke arbitrary system",
    "start": "1930080",
    "end": "1936799"
  },
  {
    "text": "commands so this was fixed in in free market 230 back in march and it's still vulnerable",
    "start": "1936799",
    "end": "1944720"
  },
  {
    "text": "if the legacy access policy is configured but that's not the default",
    "start": "1944720",
    "end": "1950559"
  },
  {
    "text": "so as we mentioned before if you get access to the spring bins you can also disable the sandbox in this",
    "start": "1950559",
    "end": "1957919"
  },
  {
    "text": "case by accessing the free market configuration and then getting the default configuration that is non-sandboxed",
    "start": "1957919",
    "end": "1964480"
  },
  {
    "text": "and getting the class resolver from there and setting that class resolver as the class resolver for the current and",
    "start": "1964480",
    "end": "1970880"
  },
  {
    "text": "sandbox configuration so effectively disabling the sandbox altogether",
    "start": "1970880",
    "end": "1976320"
  },
  {
    "text": "and re-enabling the old payload by james kettle from five years ago so now switching to",
    "start": "1976320",
    "end": "1984159"
  },
  {
    "text": "velocity velocity sandbox is also known as security spectre and is pretty effective in the way that",
    "start": "1984159",
    "end": "1991120"
  },
  {
    "text": "it's not based on individual methods it's blocking whole name spaces and and also classes so for",
    "start": "1991120",
    "end": "1997919"
  },
  {
    "text": "example the java line reflect namespace is blocked so you cannot use",
    "start": "1997919",
    "end": "2003200"
  },
  {
    "text": "java reflection api you cannot use any method on class or on class loader",
    "start": "2003200",
    "end": "2008640"
  },
  {
    "text": "classes for example but we found a flow in the implementation of this sandbox",
    "start": "2008640",
    "end": "2014640"
  },
  {
    "text": "because when they are checking this block list they are not checking the whole hierarchy of the classes for the method being",
    "start": "2014640",
    "end": "2022240"
  },
  {
    "text": "invoked like for example in when we invoke the load class from the class loader",
    "start": "2022240",
    "end": "2027440"
  },
  {
    "text": "we are not checking the whole instance at the whole hierarchy of this object right we are just checking the",
    "start": "2027440",
    "end": "2034480"
  },
  {
    "text": "current type which in this case because it was deployed on top of tonkat it's an instance of parallel web app class",
    "start": "2034480",
    "end": "2040799"
  },
  {
    "text": "loader but what it's important here is it it won't be an instance of the java land",
    "start": "2040799",
    "end": "2046080"
  },
  {
    "text": "class loader that is the only one that is blocked by the uh block list",
    "start": "2046080",
    "end": "2051200"
  },
  {
    "text": "so with that we are able to basically um bypass this limitation and execute",
    "start": "2051200",
    "end": "2056560"
  },
  {
    "text": "arbitrary methods from from class loaders and get remote code execution so this was have fixed in two in version 2.3",
    "start": "2056560",
    "end": "2065760"
  },
  {
    "text": "now moving to the jinjaba sandbox this is based in a very short method based block list which is only",
    "start": "2065760",
    "end": "2073440"
  },
  {
    "text": "blocking nine different methods but it contains a piece of code here at the",
    "start": "2073440",
    "end": "2079040"
  },
  {
    "text": "right which will basically improve the protection by preventing",
    "start": "2079040",
    "end": "2084720"
  },
  {
    "text": "any method from returning an instance of java lang class so if we cannot get an instance of",
    "start": "2084720",
    "end": "2091358"
  },
  {
    "text": "javelin class we cannot instantiate arbitrary types that's normally the case however there was a",
    "start": "2091359",
    "end": "2097359"
  },
  {
    "text": "flow again in this case they are not blocking invocation of methods which return a",
    "start": "2097359",
    "end": "2104880"
  },
  {
    "text": "race of classes or map of classes so that was the first part of the bypass",
    "start": "2104880",
    "end": "2110560"
  },
  {
    "text": "the second part is that they are exposing these secret or hidden keyword called",
    "start": "2110560",
    "end": "2116960"
  },
  {
    "text": "interpreter in in liter speech which will give you access to a bunch of objects including all the objects in",
    "start": "2116960",
    "end": "2123760"
  },
  {
    "text": "the context but also the exposed functions filters and some other objects",
    "start": "2123760",
    "end": "2128960"
  },
  {
    "text": "so putting these two parts together we were able to get the context from the interpreter and",
    "start": "2128960",
    "end": "2135040"
  },
  {
    "text": "then getting all the functions exposed to the context and then getting the underlying",
    "start": "2135040",
    "end": "2140240"
  },
  {
    "text": "method for one of these functions and now we are able to get an instance of the java lung reflect method",
    "start": "2140240",
    "end": "2146800"
  },
  {
    "text": "type from there we can get the we can use the get parameter types which",
    "start": "2146800",
    "end": "2152320"
  },
  {
    "text": "will return an array of classes and then access an individual element of this array in order",
    "start": "2152320",
    "end": "2158079"
  },
  {
    "text": "to get finally an instance of a java land class from then from there you can get an",
    "start": "2158079",
    "end": "2163359"
  },
  {
    "text": "instance of the class loader and launch any class loader based attack so this was fixed in",
    "start": "2163359",
    "end": "2171200"
  },
  {
    "text": "version 254 and that got this cv um so now we will move",
    "start": "2171200",
    "end": "2177839"
  },
  {
    "text": "to pebble which unfortunately unfortunately um we found a couple of bypasses we",
    "start": "2177839",
    "end": "2183839"
  },
  {
    "text": "reported them to the maintainers but they were not fixed on time so we decided not to release um the um",
    "start": "2183839",
    "end": "2192079"
  },
  {
    "text": "the the bypasses so far so with that uh we will",
    "start": "2192079",
    "end": "2199119"
  },
  {
    "text": "switch back to alexander to wrap up with some takeaways thank you alvaro first of all let's",
    "start": "2199119",
    "end": "2205680"
  },
  {
    "start": "2203000",
    "end": "2261000"
  },
  {
    "text": "summarize our results of this research 30 new vulnerabilities were found and",
    "start": "2205680",
    "end": "2212079"
  },
  {
    "text": "reported to the vendors 20 different products are affected you can see their names on this slide",
    "start": "2212079",
    "end": "2220000"
  },
  {
    "text": "based on these results we are able to make the next conclusion",
    "start": "2220000",
    "end": "2225200"
  },
  {
    "text": "content management system should be on the radar of red teams template for dynamic",
    "start": "2225200",
    "end": "2231760"
  },
  {
    "text": "content that can be managed by user is the main target in such systems",
    "start": "2231760",
    "end": "2237040"
  },
  {
    "text": "there are specific areas with higher risk from security point of view it is a good idea to perform security",
    "start": "2237040",
    "end": "2243359"
  },
  {
    "text": "review and testing for such places always try to reduce attack surface as",
    "start": "2243359",
    "end": "2248800"
  },
  {
    "text": "much as you can and stay safe thank you very much for",
    "start": "2248800",
    "end": "2254000"
  },
  {
    "text": "your attention and we hope we still have a couple minutes for the answers on your questions",
    "start": "2254000",
    "end": "2260640"
  },
  {
    "start": "2261000",
    "end": "2361000"
  },
  {
    "text": "hello everybody hello everybody if you have question we will be here in chat window for the next 20",
    "start": "2263839",
    "end": "2270400"
  },
  {
    "text": "minutes and we'll try to answer of them slides and white paper should be published today evening on black hat",
    "start": "2270400",
    "end": "2277359"
  },
  {
    "text": "server so check it out later in the evening",
    "start": "2277359",
    "end": "2282400"
  },
  {
    "text": "also uh we will be hosting a q a session of 30 minutes tomorrow at 10",
    "start": "2282400",
    "end": "2287680"
  },
  {
    "text": "30 a.m pacific time um at the depth conversion of this chat of",
    "start": "2287680",
    "end": "2293119"
  },
  {
    "text": "this talk series so if you have any questions that we were not able to answer today you are very welcome to",
    "start": "2293119",
    "end": "2299200"
  },
  {
    "text": "join our q a session tomorrow and we will be answering all the questions",
    "start": "2299200",
    "end": "2304880"
  },
  {
    "text": "so i think we have a question that is already answered so the white paper will be available in",
    "start": "2307200",
    "end": "2313200"
  },
  {
    "text": "the black hat server in the same page where the talk is",
    "start": "2313200",
    "end": "2318640"
  },
  {
    "text": "announced where the briefing is announced both the slides pdf and the whitepaper pdfs will",
    "start": "2318640",
    "end": "2324720"
  },
  {
    "text": "be published and i think that will be later today or",
    "start": "2324720",
    "end": "2329760"
  },
  {
    "text": "maybe tomorrow",
    "start": "2329760",
    "end": "2340480"
  },
  {
    "text": "so with that i think there are no other questions so we can",
    "start": "2340480",
    "end": "2345599"
  },
  {
    "text": "um thank you all for attending our talk we really hope you liked it and again if",
    "start": "2345599",
    "end": "2352000"
  },
  {
    "text": "you have any questions that we will be hosting this q a session tomorrow",
    "start": "2352000",
    "end": "2357040"
  },
  {
    "text": "thank you thank you",
    "start": "2357040",
    "end": "2363599"
  }
]