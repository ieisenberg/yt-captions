[
  {
    "start": "0",
    "end": "24000"
  },
  {
    "text": "you are currently in room Southside or South Seas GH for session bypass surgery abusing",
    "start": "80",
    "end": "7520"
  },
  {
    "text": "content delivery networks with server side Flash and DNS these are your",
    "start": "7520",
    "end": "13360"
  },
  {
    "text": "speakers Mike Brooks and Matthew",
    "start": "13360",
    "end": "17439"
  },
  {
    "text": "Bryant hello everyone and welcome um yeah this is bypass surgery and we are your",
    "start": "18480",
    "end": "25199"
  },
  {
    "start": "24000",
    "end": "24000"
  },
  {
    "text": "hosts I'm Matthew Bryan I'm a security consultant at Bishop Fox I like to do a lot of we hacking stuff more",
    "start": "25199",
    "end": "31239"
  },
  {
    "text": "specifically they say You're supposed to keep your public Keys public so I have my signal key up there and if you're",
    "start": "31239",
    "end": "38440"
  },
  {
    "text": "texting anybody else about zero days and they don't have that key it's not me so and I'm Mike Brooks I go by Rook",
    "start": "38440",
    "end": "45520"
  },
  {
    "text": "which is my last name without the BS I'm uh an avid participant in stock overflow",
    "start": "45520",
    "end": "50920"
  },
  {
    "text": "and security. Stock Exchange I like these communities and I encourage other Security Professionals to",
    "start": "50920",
    "end": "57359"
  },
  {
    "text": "participate so the modern today you rarely have the situation where you have a company that hosts all of their own",
    "start": "58000",
    "end": "64640"
  },
  {
    "text": "content on their web pages you know they make use of a lot of third party services to deliver their product and",
    "start": "64640",
    "end": "71360"
  },
  {
    "text": "all of these things work invisibly in the background kind of without your knowledge when you visit these web",
    "start": "71360",
    "end": "77560"
  },
  {
    "text": "pages and of course you know more specifically we're talking about content delivery networks so these are networks",
    "start": "77799",
    "end": "83240"
  },
  {
    "start": "78000",
    "end": "78000"
  },
  {
    "text": "that will serve content for other Pages you you get to take advantage of their very fast distributed um you know web",
    "start": "83240",
    "end": "88920"
  },
  {
    "text": "services and when you visit a lot of your sites that you use every day you trust all of these networks kind of",
    "start": "88920",
    "end": "95119"
  },
  {
    "text": "implicitly because these companies use them you actually extend your trust to them so many people kind of think of the",
    "start": "95119",
    "end": "101880"
  },
  {
    "text": "web like this they think you know I type in foxnews.com in my web browser hit enter they think that the request goes",
    "start": "101880",
    "end": "107479"
  },
  {
    "text": "to Fox they return a web page and that's the whole transaction but of course as we know this is not the case Fox News",
    "start": "107479",
    "end": "114600"
  },
  {
    "text": "takes advantage of many third party services to deliver this final product to you their web page they use things like OB analytics maybe to take to take",
    "start": "114600",
    "end": "121920"
  },
  {
    "text": "you know statistics of their current customer base see how they're browsing the site maybe their actual web content",
    "start": "121920",
    "end": "127240"
  },
  {
    "text": "itself is served by akami a big CDN and even stuff like DNS can be used with d",
    "start": "127240",
    "end": "133040"
  },
  {
    "text": "DNS and they will actually provide that for you so you have all these things coming together to deliver the final",
    "start": "133040",
    "end": "138519"
  },
  {
    "text": "product today it's not just all of Fox's own",
    "start": "138519",
    "end": "142840"
  },
  {
    "text": "servers so we're in an interesting position now so we have all of these big websites and internet and we're trusting",
    "start": "144560",
    "end": "151400"
  },
  {
    "text": "just a few cdns with all of this so we've kind of taken all of our eggs and we put them in only a few baskets so",
    "start": "151400",
    "end": "157800"
  },
  {
    "text": "what happens when we have a vulnerability in one of these cdns as it turns out the impact is severe and it's",
    "start": "157800",
    "end": "163720"
  },
  {
    "text": "far-reaching we have an example video this is the raw",
    "start": "163720",
    "end": "170280"
  },
  {
    "text": "flun website we have a user navigating the site as usual and of course rawlin",
    "start": "170280",
    "end": "175640"
  },
  {
    "text": "like any other website makes use of third party services and we noticed that the user browser es to a third party",
    "start": "175640",
    "end": "180959"
  },
  {
    "text": "page after they visited this website and this is this is our attacker payload and",
    "start": "180959",
    "end": "186159"
  },
  {
    "text": "after they visit this payload they notice something odd has happened with the raffler in sight in fact when they",
    "start": "186159",
    "end": "191720"
  },
  {
    "text": "continue navigating they notice that something's been added to their shopping bag and when they go to view that they",
    "start": "191720",
    "end": "198200"
  },
  {
    "text": "notice that a almost $30,000 handbag has been added into their cart without their knowledge um this is an alligator",
    "start": "198200",
    "end": "204400"
  },
  {
    "text": "drawring bag very classy that's one expensive alligator",
    "start": "204400",
    "end": "211280"
  },
  {
    "text": "so before I go on to this next proof of concept I'd just like to give a little shout out um we had Microsoft reached out to us ahead of time they saw our",
    "start": "211280",
    "end": "217640"
  },
  {
    "text": "talk and you know emailed us and said hey are we vulnerable so we were able to help them get things patched up before",
    "start": "217640",
    "end": "223200"
  },
  {
    "text": "this so what you're about to see no longer works because they were proactive actually with their you know incident",
    "start": "223200",
    "end": "228439"
  },
  {
    "text": "response so this proof a concept here we have a user going to an a URL at",
    "start": "228439",
    "end": "235879"
  },
  {
    "text": "live.com so this is Microsoft's official website and they a page that says protect your PC which appears to serve",
    "start": "235879",
    "end": "242519"
  },
  {
    "text": "Microsoft Security Essentials which is is you know expected for Microsoft but when they actually go down to actually",
    "start": "242519",
    "end": "248400"
  },
  {
    "text": "install that software they get command. exe instead now how is this possible why",
    "start": "248400",
    "end": "253519"
  },
  {
    "text": "is Microsoft serving this random file and the answer is a vulnerability that we",
    "start": "253519",
    "end": "260239"
  },
  {
    "text": "found so what happened here um we used an attack chain uh using serers side",
    "start": "260239",
    "end": "265440"
  },
  {
    "start": "261000",
    "end": "261000"
  },
  {
    "text": "request forgery and a remote Swift include now why is attack chaining useful attack chaining is useful because",
    "start": "265440",
    "end": "271360"
  },
  {
    "text": "it allows us to expand the impact and affect more people um as a real world example um let's say you want to break",
    "start": "271360",
    "end": "278000"
  },
  {
    "text": "into a house first you go and uh the gate to their uh backyard is open and",
    "start": "278000",
    "end": "283840"
  },
  {
    "text": "then in the backyard you find a ladder and that ladder you get to the second floor balcony and then the window is",
    "start": "283840",
    "end": "289360"
  },
  {
    "text": "open that is a stack chain to break into a house now how do you break into an ivory Tower when you use an ivory ladder",
    "start": "289360",
    "end": "296720"
  },
  {
    "text": "those poor elephants poor elephants so the first step in our attack is reconnaissance now DNS holds",
    "start": "296720",
    "end": "303080"
  },
  {
    "text": "all the keys it shows us important trust relationships for our Target and um and",
    "start": "303080",
    "end": "308840"
  },
  {
    "text": "that was the first step in this attack so this particular vulnerability uh that",
    "start": "308840",
    "end": "314840"
  },
  {
    "start": "311000",
    "end": "311000"
  },
  {
    "text": "we're talking about has been around for a while and one of the reasons why I think it has gone undiscovered this long",
    "start": "314840",
    "end": "320960"
  },
  {
    "text": "is because of scoping problems in in penetration tests usually in a penetration test we're concerned about",
    "start": "320960",
    "end": "326759"
  },
  {
    "text": "the internal infrastructure we're worried about their load Balan internal HTTP servers databases administrative",
    "start": "326759",
    "end": "332880"
  },
  {
    "text": "interfaces but external supporting services are often let left out of scope",
    "start": "332880",
    "end": "338080"
  },
  {
    "text": "um this include Gmail you know VoIP Services uh CDN and cloud services so",
    "start": "338080",
    "end": "344400"
  },
  {
    "text": "really this vulnerability affects the supporting infrastructure in the system so how do we find how do we map",
    "start": "344400",
    "end": "351639"
  },
  {
    "text": "out the supporting infrastructure for our Target um there are a number of DNS tools out there uh a good one is DNS",
    "start": "351639",
    "end": "357520"
  },
  {
    "text": "dumpster however DNS dumpster has an artificial limitation of only 256 DNS",
    "start": "357520",
    "end": "362560"
  },
  {
    "text": "records 256 records is very small now that might work just fine for a mom and pop website but it's not going to help",
    "start": "362560",
    "end": "368840"
  },
  {
    "text": "for the Alexa top thousand there're also Brute Force tools such as Fierce or gns Recon now these are more old these are",
    "start": "368840",
    "end": "375599"
  },
  {
    "text": "older tools and I I think they're flawed so I wrote a tool subro and we'll talk a",
    "start": "375599",
    "end": "381520"
  },
  {
    "text": "bit about that so I'm the project maintainer for sub and we have about 80 Forks on GitHub I take GPL very",
    "start": "381520",
    "end": "388639"
  },
  {
    "text": "seriously so I go through Forks of my project and I see how they've modified",
    "start": "388639",
    "end": "393919"
  },
  {
    "text": "my tool and I try to add these cool features into the main line the usage is simple uh the most thorough scan would",
    "start": "393919",
    "end": "401160"
  },
  {
    "text": "be running subot in this case against google.com the best- P switch gives you uh uh information about the records or",
    "start": "401160",
    "end": "408599"
  },
  {
    "text": "actually prints out all of the records instead of just the subdomains and- S is uh the the subdomain list to use uh",
    "start": "408599",
    "end": "415720"
  },
  {
    "text": "there's also a very fast option if you use- R it uses open resolvers as a kind of proxy to access the server d r is",
    "start": "415720",
    "end": "423800"
  },
  {
    "text": "pseudo Anonymous in that none of your uh traffic from your system goes directly",
    "start": "423800",
    "end": "428840"
  },
  {
    "text": "to your target it all goes through intermediaries which helps protect your identity so subro is a metac query",
    "start": "428840",
    "end": "435680"
  },
  {
    "text": "spider so what is a meta query so axfr is a meta query type and it is a",
    "start": "435680",
    "end": "441440"
  },
  {
    "text": "transfer a transfer Zone if xfrs are supported by your target then it's the Easy Button you get every DNS record um",
    "start": "441440",
    "end": "449639"
  },
  {
    "text": "but as you may expect it's disabled on the vast majority of websites something like 99% so after xfrs fail against every",
    "start": "449639",
    "end": "457160"
  },
  {
    "text": "authoritative server it'll fall back on the any Med query type now any medic queries return all records for that",
    "start": "457160",
    "end": "463440"
  },
  {
    "text": "given name if you're going through a open resolver and that open resolver doesn't have any records for uh for that",
    "start": "463440",
    "end": "470199"
  },
  {
    "text": "name the records passed on to the authoritative so what is an any query uh",
    "start": "470199",
    "end": "475280"
  },
  {
    "text": "well you can run an any query with dig on the command line so this is an example of running any google.com",
    "start": "475280",
    "end": "480639"
  },
  {
    "text": "against 8.8.8.8 this ref returned 24 records all different types so if you do",
    "start": "480639",
    "end": "485960"
  },
  {
    "text": "an a record a query you'll just get a records in response medic ques return a variety of Records in response so in",
    "start": "485960",
    "end": "492440"
  },
  {
    "text": "this case we get a quadruple a NS and even strange records like type 257 what is Type",
    "start": "492440",
    "end": "499159"
  },
  {
    "text": "257 oh uh now what subro does is it takes uh the this response and uses a",
    "start": "499159",
    "end": "506120"
  },
  {
    "text": "regular expression to match all subdomains now subot is it doesn't care",
    "start": "506120",
    "end": "511560"
  },
  {
    "text": "what the record types are it's future proof it just cares what the data is it matches",
    "start": "511560",
    "end": "517039"
  },
  {
    "text": "subdomains after it matches these domains it recursively crawls them to find new new records now what does this",
    "start": "517039",
    "end": "522959"
  },
  {
    "text": "give us when we run it against google.com we get over 3,000 records in response now as far as I know there is",
    "start": "522959",
    "end": "529560"
  },
  {
    "text": "no other open source tool that can get anywhere near this number of Records on Google and I think that's sad we need",
    "start": "529560",
    "end": "535399"
  },
  {
    "text": "better DNS tools we need improvements to subot and we need more records from Google Google and because we're able to",
    "start": "535399",
    "end": "541200"
  },
  {
    "text": "get this kind of insight into our targets that's how we found this vulnerability to begin with if we have better gns tools I think we'll find more",
    "start": "541200",
    "end": "547160"
  },
  {
    "text": "vulnerabilities like this so a bit of interesting uh uh so Google",
    "start": "547160",
    "end": "552959"
  },
  {
    "text": "overwhelmingly has a records now that's not true for all Targets Google is is specific they're the number one website",
    "start": "552959",
    "end": "559120"
  },
  {
    "text": "in the world and they don't use any other supporting infrastructure they use their own content Delivery Systems they",
    "start": "559120",
    "end": "564160"
  },
  {
    "text": "use their own email infrastructure their own vipe infrastructure now there are other record types returned here SV",
    "start": "564160",
    "end": "569800"
  },
  {
    "text": "records uh no error what is this so type 257 is a shaan fingerprint",
    "start": "569800",
    "end": "577480"
  },
  {
    "text": "of the issuing caert it is a way to prevent malicious Cas from issuing",
    "start": "577480",
    "end": "583000"
  },
  {
    "text": "certificates for Google services and it is an emerging standard now uh type 257 uh the reason",
    "start": "583000",
    "end": "591440"
  },
  {
    "text": "why Google has a type 2557 record is because they're running into trouble with malicious governments that are",
    "start": "591440",
    "end": "597040"
  },
  {
    "text": "issuing uh uh certificates that they should not be so not only does DNS show",
    "start": "597040",
    "end": "602800"
  },
  {
    "text": "us trust relationships it shows that our Target doesn't trust people and that's important now there's another emerging",
    "start": "602800",
    "end": "609519"
  },
  {
    "text": "standard Dane dns-based authentication of named entities this is a system of",
    "start": "609519",
    "end": "615760"
  },
  {
    "text": "public key distribution based on DNS SEC um old browsers have Dane hooks built",
    "start": "615760",
    "end": "621920"
  },
  {
    "text": "into them to switch over to Dane at any time but it's currently disabled also DNS SE has not been widely deployed in",
    "start": "621920",
    "end": "628279"
  },
  {
    "text": "the future I hope that this problem of malicious CA will go away entirely and I think Dane may be the answer to that but",
    "start": "628279",
    "end": "634160"
  },
  {
    "text": "we're not in that future so SRV records there are about 22 SRV records returned on Google what is",
    "start": "634160",
    "end": "640680"
  },
  {
    "start": "636000",
    "end": "636000"
  },
  {
    "text": "an SRV record well SRV records follow a common pattern the first sub domain in",
    "start": "640680",
    "end": "645880"
  },
  {
    "text": "this case _ TCP is the transport layer as you might imagine there are other transport layers uh defined uncore TLS _",
    "start": "645880",
    "end": "653000"
  },
  {
    "text": "UDP and then the uh underneath that in this case cdav that is the actual service being run so caldav is running",
    "start": "653000",
    "end": "660560"
  },
  {
    "text": "on Port 80 and is pointing to calendar. google.com the next service is a jabber client and this is running on Port 5222",
    "start": "660560",
    "end": "667760"
  },
  {
    "text": "and is pointing to the uh a Google Google service there's also ldap here now in Windows environment the ldap",
    "start": "667760",
    "end": "673320"
  },
  {
    "text": "server is the domain controller they're one in the same we can see it's running on port 389 and it can be found at L",
    "start": "673320",
    "end": "678839"
  },
  {
    "text": "dap. goole.com now when we were running the service",
    "start": "678839",
    "end": "684000"
  },
  {
    "text": "against our Target we enumerated cname records and the cname records showed",
    "start": "684000",
    "end": "689519"
  },
  {
    "text": "that um some of our targets subdomains were pointing to EDG Suite um now EDG",
    "start": "689519",
    "end": "695440"
  },
  {
    "text": "Suite uh then pointed to an acemiz service and then finally U pointed via C",
    "start": "695440",
    "end": "701000"
  },
  {
    "text": "name to aiz service and then finally an a record to an aamis server so in this case one of these subdomains U both in",
    "start": "701000",
    "end": "707320"
  },
  {
    "text": "our Target and in this case Facebook um were ultimately pointing to a vulnerable service now when we saw that both our",
    "start": "707320",
    "end": "714399"
  },
  {
    "text": "Target were affected and Facebook was affected we realized that this issue affected everyone",
    "start": "714399",
    "end": "721240"
  },
  {
    "start": "721000",
    "end": "721000"
  },
  {
    "text": "so subot also can be run on internal Network assessments or via post exploitation so and that's why I built",
    "start": "721600",
    "end": "729000"
  },
  {
    "text": "the exe because if you're in a Windows environment so if you run it uh against the an internal Network you'll get",
    "start": "729000",
    "end": "735519"
  },
  {
    "text": "different uh different results uh internal services such as uh such as",
    "start": "735519",
    "end": "740880"
  },
  {
    "text": "ldap will be found I mean how does a Windows system identify its domain controller it uses service records how",
    "start": "740880",
    "end": "747079"
  },
  {
    "text": "do VoIP phones know where its VoIP Gateway are service records so in this case we ran this on a real internal",
    "start": "747079",
    "end": "752440"
  },
  {
    "text": "assessment and we found 19 domain controllers for the system that's a big Network each domain controller was named",
    "start": "752440",
    "end": "758240"
  },
  {
    "text": "after a hockey team Rangers sharks Chinooks um and how much do you want to bet that",
    "start": "758240",
    "end": "765880"
  },
  {
    "text": "one of their passwords was a hockey player name followed by the uniform number the chances were",
    "start": "765880",
    "end": "773760"
  },
  {
    "text": "good um now there's also common misconfigurations in DNS so CW 203 is",
    "start": "773760",
    "end": "780320"
  },
  {
    "text": "information disclosure through discrepancy this is the common weakness the catch all for side uh side Channel",
    "start": "780320",
    "end": "785959"
  },
  {
    "text": "attacks so yes DNS can also suffer from side Channel attacks what does that look like so what sub brutal do is first",
    "start": "785959",
    "end": "793519"
  },
  {
    "text": "tries to look up a domain that it doesn't exist it's some uuid as a subdomain and it records the the the",
    "start": "793519",
    "end": "800000"
  },
  {
    "text": "response so for most servers it'll be NX domain which is effectively no record found but it could be anything it could",
    "start": "800000",
    "end": "806120"
  },
  {
    "text": "be no error it could be uh refused now as it's going through the process of",
    "start": "806120",
    "end": "811160"
  },
  {
    "text": "enumerating other records it keeps track of the response received and if it receives a different response then",
    "start": "811160",
    "end": "816480"
  },
  {
    "text": "there's something going on here it's like when I'm going to The Domain uh when I'm going to the the DNS server and",
    "start": "816480",
    "end": "821920"
  },
  {
    "text": "say hey does unor doain key. legit.com exist and as a server I would say you",
    "start": "821920",
    "end": "827800"
  },
  {
    "text": "know I can't confirm or deny the existence of any of these records but you didn't throw an error when you did",
    "start": "827800",
    "end": "833360"
  },
  {
    "text": "that query so H something suspicious here okay um so underscore domain key",
    "start": "833360",
    "end": "840120"
  },
  {
    "text": "internal Dev these may be interesting targets um let's map them out so subot",
    "start": "840120",
    "end": "845839"
  },
  {
    "start": "844000",
    "end": "844000"
  },
  {
    "text": "takes its output files as input files and it also are is a greable format so",
    "start": "845839",
    "end": "851320"
  },
  {
    "text": "we can cat out the results grep for no error for these strange records and then run subot on these strange records so",
    "start": "851320",
    "end": "858399"
  },
  {
    "text": "what did we find seci is its own domain underneath legit bank.com now seci has",
    "start": "858399",
    "end": "864920"
  },
  {
    "text": "its own domain controller found at ldap uh. sci. legit Bank",
    "start": "864920",
    "end": "870040"
  },
  {
    "text": "and when we resolve the C name chain we get down to an IP address that's on an internal Network this is from the an",
    "start": "870040",
    "end": "877040"
  },
  {
    "text": "external uh attacker we can find the IP address of the internal domain controller that should not happen that",
    "start": "877040",
    "end": "883720"
  },
  {
    "text": "is an information disclosure vulnerability but what else can we find so internal now internal. legit.com this",
    "start": "883720",
    "end": "891000"
  },
  {
    "text": "has uh this definitely sounds interesting now accounting. internal. legit bank.com that would be something",
    "start": "891000",
    "end": "897480"
  },
  {
    "text": "we want to access so so how do we access this service server side request",
    "start": "897480",
    "end": "903920"
  },
  {
    "text": "forgery ssrf is about trust your server your target legit.com needs to trust a",
    "start": "903920",
    "end": "911320"
  },
  {
    "start": "905000",
    "end": "905000"
  },
  {
    "text": "variety of services it may uh trust uh it may be in a virtual private Cloud",
    "start": "911320",
    "end": "916600"
  },
  {
    "text": "environment where there are uh various cloud services that it depends upon there may be internal web services",
    "start": "916600",
    "end": "922399"
  },
  {
    "text": "internal API or internal databases and internal administrative interfaces all which trust legit bank.com and would not",
    "start": "922399",
    "end": "929440"
  },
  {
    "text": "be normally accessible now why does ssrf exist so",
    "start": "929440",
    "end": "934639"
  },
  {
    "start": "932000",
    "end": "932000"
  },
  {
    "text": "one of the reasons one of the ways that ssrf is introduced into an application is via a cross-domain proxy so the same",
    "start": "934639",
    "end": "941600"
  },
  {
    "text": "origin policy May prevent a developer from loading in s uh loading in resources needed to render the page and",
    "start": "941600",
    "end": "948000"
  },
  {
    "text": "they may rely on a cross-domain proxy to fulfill the to uh bypass the same origin",
    "start": "948000",
    "end": "953040"
  },
  {
    "text": "policy intentionally so when I search for cross domain proxy on Google the first two hits are ssrf",
    "start": "953040",
    "end": "959519"
  },
  {
    "text": "now an intentional bypass to a security system can turn into a valuable Link in",
    "start": "959519",
    "end": "964600"
  },
  {
    "text": "an attack chain so what tools do we use for ssrf so there's ncat which is the latest",
    "start": "964600",
    "end": "971279"
  },
  {
    "start": "967000",
    "end": "967000"
  },
  {
    "text": "version of netcat and I recommend updating many people are still using the old NCAP there's also a free service",
    "start": "971279",
    "end": "978279"
  },
  {
    "text": "HTTP bin. org but personally I don't use HTTP bin for my pent tests and the reason why is because I want to keep my",
    "start": "978279",
    "end": "984440"
  },
  {
    "text": "OD days private I don't want a third party to have this information so I",
    "start": "984440",
    "end": "989519"
  },
  {
    "text": "prefer burp collaborator now burp collaborator is a new uh feature of burp in which you're running a server on your",
    "start": "989519",
    "end": "995959"
  },
  {
    "text": "own infrastructure and This Server can accept callbacks from your target this is very useful in not only side Channel",
    "start": "995959",
    "end": "1003120"
  },
  {
    "text": "attacks but also ssrf exploitation so let's go back to one of",
    "start": "1003120",
    "end": "1008360"
  },
  {
    "start": "1007000",
    "end": "1007000"
  },
  {
    "text": "the results from Google was PHP cross domain proxy now this came up on a pentest where proxy PHP was running on",
    "start": "1008360",
    "end": "1015519"
  },
  {
    "text": "our Target and it accepts one parameter CS URL now when we passed CSL Local Host",
    "start": "1015519",
    "end": "1021800"
  },
  {
    "text": "631 we gained access to the cup stamman now the cup stamman runs his route and is only accessible on Local Host what",
    "start": "1021800",
    "end": "1029199"
  },
  {
    "text": "this shows is that ssrf was allow us to break a chest boundary and access a local host system now older versions of",
    "start": "1029199",
    "end": "1035678"
  },
  {
    "text": "Cups were vulnerable to Shell Shock and was exploitable using ssrf which would n you remote route on the system",
    "start": "1035679",
    "end": "1042319"
  },
  {
    "text": "unfortunately cups 153 was not vulnerable to Shell Shock and that did not give us a shell on this assessment",
    "start": "1042319",
    "end": "1048280"
  },
  {
    "text": "so what I did was is I used burp uh Intruder in cluster bomb mode now",
    "start": "1048280",
    "end": "1053520"
  },
  {
    "text": "cluster bomb what it does is in this case we have two insertion points and we give it two lists and it tries every",
    "start": "1053520",
    "end": "1059480"
  },
  {
    "text": "combination of those two lists so this is useful if you're brute forcing usernames and passwords for a login form",
    "start": "1059480",
    "end": "1064640"
  },
  {
    "text": "or in this case turning ssrf into a local a port scanner for the local network so uh we scanned the internal",
    "start": "1064640",
    "end": "1072120"
  },
  {
    "text": "Network and we found that 1921 682011 on Port 80 returned to 200 okay",
    "start": "1072120",
    "end": "1079600"
  },
  {
    "start": "1073000",
    "end": "1073000"
  },
  {
    "text": "when we visit the site we found that it was a Cisco switch and it had a default username and password an all too common",
    "start": "1079600",
    "end": "1085480"
  },
  {
    "text": "finding on an internal Network assessment now what else can we do so",
    "start": "1085480",
    "end": "1090640"
  },
  {
    "text": "legit bank.com is running a uh load balancer now this load balancer",
    "start": "1090640",
    "end": "1095880"
  },
  {
    "text": "specifically was an engine X pass through proxy and it was routing based on host name and path to internal",
    "start": "1095880",
    "end": "1102640"
  },
  {
    "text": "services so when you gave it www.lit.edu one of the HTTP servers",
    "start": "1102640",
    "end": "1109840"
  },
  {
    "text": "hosting this application so what about accounting. internal. legit.com",
    "start": "1109840",
    "end": "1115559"
  },
  {
    "text": "well using burp repeater we established an https connection to legit bank.com a",
    "start": "1115559",
    "end": "1122320"
  },
  {
    "text": "publicly resolvable IP address then we changed the host to accounting. internal. legit.com and lo and behold it",
    "start": "1122320",
    "end": "1130000"
  },
  {
    "text": "gave us access now this particular uh endpoint was a restful web service with",
    "start": "1130000",
    "end": "1135280"
  },
  {
    "text": "a trivial username and password on its internal Network it was segregated from",
    "start": "1135280",
    "end": "1140440"
  },
  {
    "text": "the other systems and uh they were not expecting it to be exposed remotely um",
    "start": "1140440",
    "end": "1146200"
  },
  {
    "text": "literally this service allowed us to move funds between accounts and allowed us to rob the bank",
    "start": "1146200",
    "end": "1151960"
  },
  {
    "text": "blind so yes how many people are looking for ssrf in load balancers well you",
    "start": "1151960",
    "end": "1157480"
  },
  {
    "text": "should start so some questions to ask yourself in ssrf exploitation the root of the",
    "start": "1157480",
    "end": "1163200"
  },
  {
    "start": "1159000",
    "end": "1159000"
  },
  {
    "text": "root question is can I access a protected resource another question can you turn another vulnerability ility",
    "start": "1163200",
    "end": "1169200"
  },
  {
    "text": "into ssrf for example xxe or XML entity",
    "start": "1169200",
    "end": "1174400"
  },
  {
    "text": "external entities can be turned into ssrf by defining a DTD system to make HTTP requests you may be able to make",
    "start": "1174400",
    "end": "1181679"
  },
  {
    "text": "HTTP requests to the internal Network and map out the system or access protected resources um can you identify",
    "start": "1181679",
    "end": "1189200"
  },
  {
    "text": "internal hosts internal IP addresses using subro and can you access those using this vulnerability can you access",
    "start": "1189200",
    "end": "1195960"
  },
  {
    "text": "a virtual private Cloud can you access S3 or mongodb by default mongodb doesn't",
    "start": "1195960",
    "end": "1201440"
  },
  {
    "text": "have a password and you may be able to access uh collections that are not intended um can you also uh also can you",
    "start": "1201440",
    "end": "1209640"
  },
  {
    "text": "access a host that you control can you have a connect back to netcat or um the",
    "start": "1209640",
    "end": "1215480"
  },
  {
    "text": "HTTP client uh may be setting uh an authorization Bearer token in the header",
    "start": "1215480",
    "end": "1221159"
  },
  {
    "text": "or that client may be vulnerable to something like heart bed um you're connecting to an HTTP client and now",
    "start": "1221159",
    "end": "1227280"
  },
  {
    "text": "that client could be exploited potentially but another question can I load arbitrary content such as a malicious",
    "start": "1227280",
    "end": "1233400"
  },
  {
    "text": "Swift on a remote domain so with that handoff we're going",
    "start": "1233400",
    "end": "1239080"
  },
  {
    "text": "to move from ssrf and we're going to talk about Swift include vulnerabilities",
    "start": "1239080",
    "end": "1244400"
  },
  {
    "text": "so flash is an interesting bed for exploitation because of the way that",
    "start": "1244400",
    "end": "1249440"
  },
  {
    "text": "when a flash application executes its origin is actually in the site that hosts it which is different from things",
    "start": "1249440",
    "end": "1255559"
  },
  {
    "text": "like JavaScript before we go into this though I want to give you guys a few tools so",
    "start": "1255559",
    "end": "1260640"
  },
  {
    "text": "when you want to go out and do this you can use these to um you know find vulnerabilities make proof of Concepts",
    "start": "1260640",
    "end": "1266600"
  },
  {
    "text": "one of them is the cross domain XML proof of concept tool this is a flash application which allows you to do cross",
    "start": "1266600",
    "end": "1272679"
  },
  {
    "text": "origin requests in Flash you can type in url parameters and it will tell you did that request work was there a security",
    "start": "1272679",
    "end": "1278799"
  },
  {
    "text": "error and so you can debug these cross- site requests with flash if you don't want to write action script in your",
    "start": "1278799",
    "end": "1284520"
  },
  {
    "text": "proof of concept which I never want to do you can use Flash HTP request which is a bridge with flash that you can call",
    "start": "1284520",
    "end": "1291320"
  },
  {
    "text": "from JavaScript so you can make all of your PC's in JavaScript without touching any action script at all another good",
    "start": "1291320",
    "end": "1297240"
  },
  {
    "text": "tool that was recommended to me by Mike was jpex and jpex is great when it comes",
    "start": "1297240",
    "end": "1302440"
  },
  {
    "text": "to decompiling Swifts in these flash applications it gives you the full source code and in addition you can also",
    "start": "1302440",
    "end": "1309159"
  },
  {
    "text": "modify the source code and you know compile it on the fly so it's very useful for finding flash exploits",
    "start": "1309159",
    "end": "1316039"
  },
  {
    "text": "another great tool is that was made by some of our colleagues is search digity so if you have a vulnerable Swift you",
    "start": "1316039",
    "end": "1321559"
  },
  {
    "text": "can enumerate the endpoints on different services using search engines and so you can kind of take this and figure out",
    "start": "1321559",
    "end": "1326840"
  },
  {
    "text": "who's affected by this vulnerable Swift yeah in 2015 search engine hacking is still alive and well with search digity",
    "start": "1326840",
    "end": "1333600"
  },
  {
    "text": "I recommend checking it out great so we're going to in order to",
    "start": "1333600",
    "end": "1339799"
  },
  {
    "text": "kind of give you an idea of why flash is weird with how it works we're going to compare it to JavaScript and when you",
    "start": "1339799",
    "end": "1345520"
  },
  {
    "text": "include it on a on your own web page so but before we go into that let's touch",
    "start": "1345520",
    "end": "1350799"
  },
  {
    "start": "1349000",
    "end": "1349000"
  },
  {
    "text": "on what's an origin so Origins at a core are actually quite simple they're just a combination of Port scheme and domain",
    "start": "1350799",
    "end": "1357720"
  },
  {
    "text": "and you know why do we have these things in the web the reason is if you had my for example my blog opened up in a tab",
    "start": "1357720",
    "end": "1363679"
  },
  {
    "text": "and you open a new tab and you go and you check your Gmail should my blog be able to reach into that and start",
    "start": "1363679",
    "end": "1368919"
  },
  {
    "text": "reading your emails the answer is of course no and the web doesn't allow you to do this and the reason why is they",
    "start": "1368919",
    "end": "1373960"
  },
  {
    "text": "both have separate Origins and you can't do cross origin requests on the web because that's a same origin policy",
    "start": "1373960",
    "end": "1380440"
  },
  {
    "text": "violation so these are kind of the critical it's kind of a critical component of web Security today same",
    "start": "1380440",
    "end": "1386720"
  },
  {
    "text": "origin policy protects us from all of these web attacks so the differences between",
    "start": "1386720",
    "end": "1392880"
  },
  {
    "start": "1391000",
    "end": "1391000"
  },
  {
    "text": "JavaScript and Flash they're actually pretty much the opposite in the way that they execute so when you have a for an example an external script tag on your",
    "start": "1392880",
    "end": "1399559"
  },
  {
    "text": "page and you Source a piece of JavaScript from a third- party domain when that JavaScript runs on your page",
    "start": "1399559",
    "end": "1405799"
  },
  {
    "text": "it executes in the context of that page not the site that host the JavaScript but on the on the domain that loaded it",
    "start": "1405799",
    "end": "1412520"
  },
  {
    "text": "and Flash completely turns this on its head it's completely the opposite so with flash I may embed a Swift on my own",
    "start": "1412520",
    "end": "1418720"
  },
  {
    "text": "page but when it executes it's not executing in the context of that page it's actually exe executing in the context of that third party domain so to",
    "start": "1418720",
    "end": "1426039"
  },
  {
    "text": "drive this point home we have some examples here is a example HTML page and it sources JavaScript from third",
    "start": "1426039",
    "end": "1433080"
  },
  {
    "text": "party.com this is on you know the homepage of legit bank.com and all this JavaScript has in it is a simple snippet",
    "start": "1433080",
    "end": "1440159"
  },
  {
    "text": "that simply prints the current executing origin so it shows you know what what am I currently executing as and so we we of",
    "start": "1440159",
    "end": "1447320"
  },
  {
    "text": "course open this in a web browser what do we see it's executing in the context of legit bank.com not of the third party",
    "start": "1447320",
    "end": "1453159"
  },
  {
    "text": "that hosted it flash turns this on its head now we have a swift that we're embedding from",
    "start": "1453159",
    "end": "1459360"
  },
  {
    "text": "third party.com on Legit bank.com now in order to show that this is executing in",
    "start": "1459360",
    "end": "1465039"
  },
  {
    "text": "the context of third party we have a secrets. text file that we've hosted on this site so now we've got a short",
    "start": "1465039",
    "end": "1471919"
  },
  {
    "text": "little video here and we use the cross domain proof concept tool we talked about earlier and we enter in the URL",
    "start": "1471919",
    "end": "1477120"
  },
  {
    "text": "for this secrets. text file that's hosted on this third party and of course when we actually go to make this request",
    "start": "1477120",
    "end": "1483039"
  },
  {
    "text": "this is perfectly fine because this flash application is executing in the context of third party not of legit bank",
    "start": "1483039",
    "end": "1489480"
  },
  {
    "text": "so that succeeds just fine now when we go off to do this request to legit",
    "start": "1489480",
    "end": "1495240"
  },
  {
    "text": "bank.com despite it being embedded in that page it doesn't work work because the Swift is not loaded in the context",
    "start": "1495240",
    "end": "1500799"
  },
  {
    "text": "of legit bank.com it's of the third party so this is the difference between the two and this is why flash is so",
    "start": "1500799",
    "end": "1506919"
  },
  {
    "text": "interesting for exploitation when you do hijacking of Swifts so flash also has if you want to",
    "start": "1506919",
    "end": "1513399"
  },
  {
    "text": "allow cross origin requests flashes a way for you to do that they have something called crossdomain.xml and",
    "start": "1513399",
    "end": "1519919"
  },
  {
    "text": "this is a simple XML document that you put in your web root and you specify a list of sites that are allowed to do a",
    "start": "1519919",
    "end": "1525640"
  },
  {
    "text": "cross origin request to your site it's kind of like a bouncer list you know I trust these sites they can grab stuff from my website you know they're all",
    "start": "1525640",
    "end": "1532159"
  },
  {
    "text": "good and unfortunately Wild Card usage is incredibly common place in this space",
    "start": "1532159",
    "end": "1537559"
  },
  {
    "text": "and I'm not sure if this is due to misunderstanding of how these policies work or just you know an effort to get things to work correctly so we have an",
    "start": "1537559",
    "end": "1544919"
  },
  {
    "start": "1544000",
    "end": "1544000"
  },
  {
    "text": "example cross domain policy on Legit bank.com now you look at this initially and you'll say oh well there's only two",
    "start": "1544919",
    "end": "1551320"
  },
  {
    "text": "entries so there's not a lot of surface area for us to attack as hackers and that's not the case this is a very very",
    "start": "1551320",
    "end": "1557880"
  },
  {
    "text": "wide Open Cross domain XML policy any subdomain of either legit bank.com or",
    "start": "1557880",
    "end": "1564039"
  },
  {
    "text": "third party.com if if it has a a swift that an attacker has created on it we can compromise the security of the main",
    "start": "1564039",
    "end": "1570360"
  },
  {
    "text": "website so this could be potentially thousands of subdomains and we only have to compromise just one to compromise the",
    "start": "1570360",
    "end": "1577039"
  },
  {
    "text": "security of the Bas legit bank.com and many people make up statistics but we've actually looked",
    "start": "1577039",
    "end": "1582679"
  },
  {
    "text": "into this we pulled the Alexa top 10,000 and we pulled all of their cross domain files and the ones that had it we",
    "start": "1582679",
    "end": "1588880"
  },
  {
    "text": "checked do they do this subdomain wild carding and we found after taking all of this data that 75% of them",
    "start": "1588880",
    "end": "1596039"
  },
  {
    "text": "do and that's scary to think about so 75% of the Alexa top 10,000 sites that",
    "start": "1596039",
    "end": "1601520"
  },
  {
    "text": "use cross domains are exposing this massive surface area and we'll see how this comes back to bite us when we",
    "start": "1601520",
    "end": "1607120"
  },
  {
    "text": "combine it with other exploits so if you're an attacker and you're looking at that cross demain and",
    "start": "1607120",
    "end": "1612799"
  },
  {
    "text": "you say you know I want to be in this in this white list I want to perform an attack here so how would you do that the",
    "start": "1612799",
    "end": "1618640"
  },
  {
    "text": "answer is with of course subot so you can use subot to enumerate the subdomains of both you know third",
    "start": "1618640",
    "end": "1624159"
  },
  {
    "text": "party.com and legit bank.com you can find all of these end points and try to get your malitia Swift on them and so if",
    "start": "1624159",
    "end": "1630559"
  },
  {
    "text": "you have a malitia Swift on any of these subdomains you've compromised the security of legit",
    "start": "1630559",
    "end": "1636000"
  },
  {
    "text": "bank.com so I talked about hijacking Swifts what does that mean so one example of a flash application that we",
    "start": "1636320",
    "end": "1642640"
  },
  {
    "text": "found is a product called flow player what is flow player it's a flash application that plays videos and it's",
    "start": "1642640",
    "end": "1649640"
  },
  {
    "text": "got some unique functionality to it which allows you to load plugins to kind of customize the functionality the",
    "start": "1649640",
    "end": "1655480"
  },
  {
    "text": "feeling of the player so if you want to you know blend in with your rest of your site layout you can do that by making",
    "start": "1655480",
    "end": "1660799"
  },
  {
    "text": "Flash plugins for the player unfortunately versions of flow",
    "start": "1660799",
    "end": "1665840"
  },
  {
    "text": "player below this 32.16 version allow the loading of arbitrary Swifts from any",
    "start": "1665840",
    "end": "1671919"
  },
  {
    "text": "domain and this is incredibly problematic because what this allows us to do as attackers is embed this Swift",
    "start": "1671919",
    "end": "1677039"
  },
  {
    "text": "on our page specify an arbitrary plugin and we can load that into the Swift and hijack all the functionality of the",
    "start": "1677039",
    "end": "1682960"
  },
  {
    "text": "player now this is a bad deal because as I talked about before this Swift is loading in the context of whatever party",
    "start": "1682960",
    "end": "1688679"
  },
  {
    "text": "that's hosting it so if if a domain has this on their site it can go very very wrong here's just an example you embed",
    "start": "1688679",
    "end": "1696120"
  },
  {
    "text": "the Swift on your page and you kind of declare it with JavaScript like this so you say you know I have a plugin simple hello world and I want to load this",
    "start": "1696120",
    "end": "1701799"
  },
  {
    "text": "arbitrary Swift from this domain so flow player at one point",
    "start": "1701799",
    "end": "1707159"
  },
  {
    "text": "realized this is a really bad deal we need to fix this so they released a new version 3.2.8 and they added a bunch of",
    "start": "1707159",
    "end": "1713720"
  },
  {
    "text": "functionality to check all of these you know plugin URLs that people provide when loading this player and the idea",
    "start": "1713720",
    "end": "1719159"
  },
  {
    "text": "was to make sure that they were either the same domain as the player or that they were trusted so attackers couldn't just really nearly hijack it so this",
    "start": "1719159",
    "end": "1726840"
  },
  {
    "text": "code what it does is it parses the URL of the plugin and the problem problematically with that is when you",
    "start": "1726840",
    "end": "1733039"
  },
  {
    "text": "parse URS it's actually quite a hard thing to do many people think of it as trivial but in fact that's not the case",
    "start": "1733039",
    "end": "1738640"
  },
  {
    "text": "and we actually have an interesting story that goes with this are we there have to talk oh go for um okay so uh",
    "start": "1738640",
    "end": "1746279"
  },
  {
    "text": "when we were hacking this uh flow player I found the code that was checking uh the origin of the plug-in and um",
    "start": "1746279",
    "end": "1755440"
  },
  {
    "text": "well actually I don't think we're there yet anyway um Tangled well yeah I was I was checking the code and I had R I read",
    "start": "1755440",
    "end": "1762559"
  },
  {
    "text": "this book uh tangled web and tangled web has a whole chapter devoted to just how",
    "start": "1762559",
    "end": "1768360"
  },
  {
    "text": "URLs are parsed and I'm like there's likely a bug here and sure enough uh we found not one but multiple bugs so I",
    "start": "1768360",
    "end": "1775360"
  },
  {
    "text": "found one issue and I was like yeah this is this is a great bypass and so I sent a link to the code over to my friend",
    "start": "1775360",
    "end": "1781120"
  },
  {
    "text": "here and um I'm like hey can you find the bypass and uh he's he he came back",
    "start": "1781120",
    "end": "1787080"
  },
  {
    "text": "within like maybe 15 minutes and said like yeah I found the bypass and I'm like no that's that's a new bypass that",
    "start": "1787080",
    "end": "1793080"
  },
  {
    "text": "I did not find that one that one's different so the first bypass",
    "start": "1793080",
    "end": "1799960"
  },
  {
    "start": "1799000",
    "end": "1799000"
  },
  {
    "text": "all right so we found many bypasses so we're just going to talk about three today so this first bypass here if you",
    "start": "1799960",
    "end": "1805120"
  },
  {
    "text": "all look up at this code you could probably see a few issues with it this is in the code that checks the uh plug-in URL and it says you know is this",
    "start": "1805120",
    "end": "1811760"
  },
  {
    "text": "you know a local to this user system if it is we can assume that it's trusted go ahead and load it now there's you can",
    "start": "1811760",
    "end": "1817320"
  },
  {
    "text": "probably see a few here but we're going to highlight this one and what this check does is it says if the plugin URL",
    "start": "1817320",
    "end": "1823559"
  },
  {
    "text": "if the first character is a forward slash then we assume it's trusted it's local uh this is of course problematic",
    "start": "1823559",
    "end": "1829600"
  },
  {
    "text": "because on the web you can do this you can do a double forward slash to denote this it's a special type of URL and how",
    "start": "1829600",
    "end": "1835080"
  },
  {
    "start": "1830000",
    "end": "1830000"
  },
  {
    "text": "this works is whatever you know if it was loaded over HTTP this plugin will be load as HTTP https so it kind of",
    "start": "1835080",
    "end": "1840799"
  },
  {
    "text": "inherits whatever the pages you know protocol is using so we with just two forward slashes we bypassed all the",
    "start": "1840799",
    "end": "1846440"
  },
  {
    "text": "security that they've added into this new version and we can load any arbitrary plugin that we want to hijack this",
    "start": "1846440",
    "end": "1852120"
  },
  {
    "text": "Swift the second check and this is one that was found by Mike uh so this check here is it's trying to find the the",
    "start": "1852120",
    "end": "1858639"
  },
  {
    "text": "beginning of the scheme and where the domain starts um so the vulnerability is in this line here it believes the",
    "start": "1858639",
    "end": "1865039"
  },
  {
    "text": "beginning of the scheme is three forward slashes so we can fool this check by um",
    "start": "1865039",
    "end": "1870840"
  },
  {
    "text": "having our attacker.com domain and then three forward slashes and then the Target that we want to attack in this",
    "start": "1870840",
    "end": "1875880"
  },
  {
    "text": "case legit bank.com and then a DOT do/ to remove it um in this case the code thinks that uh attacker.com is a part of",
    "start": "1875880",
    "end": "1882880"
  },
  {
    "text": "the scheme and it doesn't uh take into consideration that maybe uh maybe it's not",
    "start": "1882880",
    "end": "1888840"
  },
  {
    "text": "so uh another bypass is more uh more general purpose so if there's an open",
    "start": "1888840",
    "end": "1894760"
  },
  {
    "text": "redirect on the on your target uh then you could use an open redirect to fool",
    "start": "1894760",
    "end": "1900399"
  },
  {
    "text": "the origin check and to load in your Swift from a remote host now open redirects are typically a low-risk",
    "start": "1900399",
    "end": "1906200"
  },
  {
    "text": "vulnerability and in this case we're turning this lowrisk vulnerability into something high-risk a full uh origin uh",
    "start": "1906200",
    "end": "1914200"
  },
  {
    "text": "bypass so as we said before there are many more bypasses I'm sure if you took some time and went through the code you",
    "start": "1914720",
    "end": "1920000"
  },
  {
    "text": "could probably find some of your own we're only going to talk about three today because yeah three is a good number another thing I'd like to add we",
    "start": "1920000",
    "end": "1926120"
  },
  {
    "text": "talked to flow player about this issue and they basically told us well flash is dead and we're not fixing these issues",
    "start": "1926120",
    "end": "1931360"
  },
  {
    "text": "so if you ever see a flow player. Swift on an engagement it's a problem it's always a",
    "start": "1931360",
    "end": "1937320"
  },
  {
    "text": "vulnerability so what does this mean for us as attackers what this means is if anybody has any version of this FL",
    "start": "1938600",
    "end": "1945039"
  },
  {
    "text": "player on this website we can hijack that Swift and perform some very interesting attack scenarios so what",
    "start": "1945039",
    "end": "1951200"
  },
  {
    "text": "does that look like we have an example flow here as if we were an attacker trying to attack our victim and we have",
    "start": "1951200",
    "end": "1957600"
  },
  {
    "text": "them logging into legit bank.com so they're going to manage their finances go about their day and sometime after",
    "start": "1957600",
    "end": "1963200"
  },
  {
    "text": "they've logged in they navigate to our attacker page and once they do this our attacker page loads this Swift this",
    "start": "1963200",
    "end": "1970279"
  },
  {
    "text": "vulnerable flow player from legit bank.com and once we load this Swift We will then have it on our page and we use",
    "start": "1970279",
    "end": "1977080"
  },
  {
    "text": "that JavaScript to declare our arbitrary plug-in now what's great about this is we've now hijacked all the functionality",
    "start": "1977080",
    "end": "1982639"
  },
  {
    "text": "of the Swift and it's still executing in the context of legit bank.com so what can we do now we can go right back to",
    "start": "1982639",
    "end": "1989399"
  },
  {
    "text": "legit bank and you know grab users banking information we can send you know money to my friend in Nigeria using",
    "start": "1989399",
    "end": "1995080"
  },
  {
    "text": "their account and we can do all of this perfectly fine it's not a same origin policy violation because this Swift is",
    "start": "1995080",
    "end": "2000720"
  },
  {
    "text": "still executing as if it was from legit.com and these are the kind of exploits that come about when you do",
    "start": "2000720",
    "end": "2006639"
  },
  {
    "text": "Swift hijacking so we're going to move on to hacking",
    "start": "2006639",
    "end": "2012200"
  },
  {
    "text": "websites with eiz Edge Suite but what is edite so edite is a",
    "start": "2012200",
    "end": "2018480"
  },
  {
    "text": "server used in aized content delivery service and it's part of the free flow",
    "start": "2018480",
    "end": "2024000"
  },
  {
    "text": "system so the setup process for this involves you will take a subdomain or your domain and you will make a cname",
    "start": "2024000",
    "end": "2030720"
  },
  {
    "text": "record into eomis Network so now when people hit this domain they don't hit your website you know they hit acemiz",
    "start": "2030720",
    "end": "2036240"
  },
  {
    "text": "Network and they and that and that Network serves the content and this affords you some nice things you know",
    "start": "2036240",
    "end": "2041639"
  },
  {
    "text": "use your site loads faster because you get to take of their diverse Network you know geographically um distributed across the world and so it looks like",
    "start": "2041639",
    "end": "2048679"
  },
  {
    "text": "this in DNS so we have a. example.com that is camed to example.com we.net",
    "start": "2048679",
    "end": "2055960"
  },
  {
    "text": "which is another C name into a.net and we have the IP address of an aami",
    "start": "2055960",
    "end": "2061560"
  },
  {
    "text": "server so why would people do this so we have an example flow here which is a user who wants an HDM of a cat which is",
    "start": "2061560",
    "end": "2068599"
  },
  {
    "text": "kind of my view of internet traffic at large so you know they go off and they go to you know a. example.com and they",
    "start": "2068599",
    "end": "2075560"
  },
  {
    "text": "ask them you know I'd like this image This Server will go on to example.com server and will say hey this user is",
    "start": "2075560",
    "end": "2081878"
  },
  {
    "text": "looking for an image of a cat could I have it that'll return the feline to acomi and that will be returned back to",
    "start": "2081879",
    "end": "2088118"
  },
  {
    "text": "the end user and you'll notice this is kind of an extra hop why do they do this and the reason is next time if anybody",
    "start": "2088119",
    "end": "2093280"
  },
  {
    "text": "comes along and they're looking for the same image of a cat you know AC I will just serve it back without asking so you save all of these extra hits to your own",
    "start": "2093280",
    "end": "2100400"
  },
  {
    "text": "service and save bandwidth and you know you get the speed that comes along with aiz distributed",
    "start": "2100400",
    "end": "2106280"
  },
  {
    "text": "Network so aami has a unique piece of functionality called aami resource",
    "start": "2106280",
    "end": "2111720"
  },
  {
    "text": "locators um they're often abbreviated in documentation as arls and what are these These are",
    "start": "2111720",
    "end": "2117400"
  },
  {
    "text": "special URLs that echi used to use way back in the day and how these work is",
    "start": "2117400",
    "end": "2123000"
  },
  {
    "text": "they're I would like to mention first that they're a deprecated system they're not widely used today but what they did",
    "start": "2123000",
    "end": "2128320"
  },
  {
    "text": "is you could construct the special URL at one of aami's endpoints and you would specify a resource in it and then that",
    "start": "2128320",
    "end": "2134680"
  },
  {
    "text": "the AI would go off grab that file and host it on their network but despite this being you know deprecated it's",
    "start": "2134680",
    "end": "2140400"
  },
  {
    "text": "actually enabled on many endpoints today as we're going to show so how does this work we have an",
    "start": "2140400",
    "end": "2147400"
  },
  {
    "text": "example Swift here and we want to load it onto aiz Network and we want to do this via ARL v1s so we construct this URL and you can",
    "start": "2147400",
    "end": "2155040"
  },
  {
    "text": "see here we have an endpoint of acemi and we have have a few forward slashes is kind of a restful thing and we we",
    "start": "2155040",
    "end": "2160720"
  },
  {
    "text": "pass different options to akimi we say you know what's my client's ID for aimi how long should this thing be storing",
    "start": "2160720",
    "end": "2167200"
  },
  {
    "text": "the content how often should it check back to see if anything's changed and you'll notice we have this URL in it as",
    "start": "2167200",
    "end": "2172319"
  },
  {
    "text": "well so remember Mike mentioned in ssrf this is kind of what you would see you would see you know an arbitrary URL",
    "start": "2172319",
    "end": "2177640"
  },
  {
    "text": "being specified to a web page and you know they would go off and grab that content and return it to you so this is",
    "start": "2177640",
    "end": "2183480"
  },
  {
    "text": "kind of the same flow as ssrf I wonder if there's any vulnerabilities here",
    "start": "2183480",
    "end": "2188680"
  },
  {
    "text": "so this process is known as atomization and it works as I described to you before you know user will visit this URL",
    "start": "2188680",
    "end": "2194440"
  },
  {
    "text": "acomi will go off and it will grab that from this you know from a server and return it to you in the web page with all invisibly without you",
    "start": "2194440",
    "end": "2200680"
  },
  {
    "text": "knowing so if you point ai. example.com using freeflow to this to acemiz service",
    "start": "2200680",
    "end": "2207160"
  },
  {
    "text": "we can host arbitray files on your server well not quite so when we went about doing this we encountered some",
    "start": "2207160",
    "end": "2213560"
  },
  {
    "text": "initial problems one of these things is and we have an example acemi and point right here and we attempt to grab",
    "start": "2213560",
    "end": "2219079"
  },
  {
    "text": "Google's robot. Tex file and kind of load it through this site in an ssrf sort of way and when we do this we get",
    "start": "2219079",
    "end": "2224599"
  },
  {
    "text": "an access denied message so why are we getting that what is there some sort of white list that we have to be in you",
    "start": "2224599",
    "end": "2230880"
  },
  {
    "text": "know how can we get around this we want our content to be loaded and so the way we went about this is we took to",
    "start": "2230880",
    "end": "2236480"
  },
  {
    "text": "enumerating you know what sites are in this white list and of course how did we do this we took edge.net and we started",
    "start": "2236480",
    "end": "2242960"
  },
  {
    "text": "using subot to find all of these subdomains we combined some Google Dorking with it and we came up with this we came up with an actual site that was",
    "start": "2242960",
    "end": "2249240"
  },
  {
    "text": "in this white list this is the site that we",
    "start": "2249240",
    "end": "2255359"
  },
  {
    "text": "found I'm kind of feeling a realization of what's about to come so this is a a",
    "start": "2255359",
    "end": "2261640"
  },
  {
    "text": "server by aami and it hosts all the versions of flow player for backwards compatibility including that 32.16",
    "start": "2261640",
    "end": "2268920"
  },
  {
    "text": "version which allows you to load any plug-in you know from any arbitrary endpoint so what does this mean for us",
    "start": "2268920",
    "end": "2276680"
  },
  {
    "text": "so not only did they host all the vulnerable versions of flow player but now we can you know use these arls to",
    "start": "2276680",
    "end": "2282240"
  },
  {
    "text": "force a swift to be loaded on somebody's website and not just a swift a vulnerable Swift so we can you know kind",
    "start": "2282240",
    "end": "2288400"
  },
  {
    "text": "of bring our attack attack chain together here so here's an example ARL",
    "start": "2288400",
    "end": "2293720"
  },
  {
    "text": "V1 we have i. legit bank.com which is mapped to this free flow service and you know we specify these for/ parameters",
    "start": "2293720",
    "end": "2301079"
  },
  {
    "text": "and we specify the Swift this 32.16 vulnerable version of flow player and of course when you visit this in your web",
    "start": "2301079",
    "end": "2307119"
  },
  {
    "text": "browser you just see this vulnerable Swift being hosted on this person's you know",
    "start": "2307119",
    "end": "2312400"
  },
  {
    "text": "website so what this means for us is if they have any endpoint that is using this free flow service with these arls",
    "start": "2312400",
    "end": "2318680"
  },
  {
    "text": "enabled we can make them vulnerable we can actually introduce a swift that we can then hijack into their",
    "start": "2318680",
    "end": "2324400"
  },
  {
    "text": "environment so this is kind of a long flow we're going to bring it all together here and show you guys what an example attack scenario looks like we",
    "start": "2324400",
    "end": "2330400"
  },
  {
    "start": "2326000",
    "end": "2326000"
  },
  {
    "text": "have the user logging into legit.com and after they do this they navigate to our attacker page what does our attacker",
    "start": "2330400",
    "end": "2336839"
  },
  {
    "text": "page do they use the ARL that I showed you before to load the Swift onto their page an acemi in the background it sees",
    "start": "2336839",
    "end": "2343720"
  },
  {
    "text": "the special URL it parses it out it goes off to Media PM grabs a Swift and returns it as if the site was hosting it",
    "start": "2343720",
    "end": "2350000"
  },
  {
    "text": "itself so once we've loaded the Swift onto our page we can of course hijack it",
    "start": "2350000",
    "end": "2355760"
  },
  {
    "text": "and now this Swift is executing in the context of this legit Bank subdomain in this case e. legit bank.com and remember",
    "start": "2355760",
    "end": "2362720"
  },
  {
    "text": "what I told you guys about before with cross domain files is they often do this you know all subdomains of are trusted",
    "start": "2362720",
    "end": "2368000"
  },
  {
    "text": "via wild cards so what this turns into is we can use this hijack Swift as a",
    "start": "2368000",
    "end": "2373200"
  },
  {
    "text": "bridge to talk to legit bank.com and compromise all of their security so now if users logged in you know we can dump",
    "start": "2373200",
    "end": "2379720"
  },
  {
    "text": "all their financial information you know send money do whatever we want unrestricted because we are trusted by",
    "start": "2379720",
    "end": "2385760"
  },
  {
    "text": "this cross doain file so let's talk a bit more about this I talked about cross doain XML policies",
    "start": "2385760",
    "end": "2392240"
  },
  {
    "text": "before let's see how this turns out so remember I talked before we had two entries but it exposes is a massive",
    "start": "2392240",
    "end": "2398119"
  },
  {
    "text": "attack surface so what this means for us now is if any subdomain of these two",
    "start": "2398119",
    "end": "2404520"
  },
  {
    "text": "domains points to one vulnerable endpoint of aami what this means is",
    "start": "2404520",
    "end": "2410359"
  },
  {
    "text": "their entire security is compromised and this brings in another something else that's quite",
    "start": "2410359",
    "end": "2415400"
  },
  {
    "text": "interesting you don't even have to be using this vulnerable end point you don't even have to be using AI you may",
    "start": "2415400",
    "end": "2421119"
  },
  {
    "text": "have never even heard of eami but you might be trusting them via your crossdomain.xml policy and because of this all of your",
    "start": "2421119",
    "end": "2428440"
  },
  {
    "text": "security is now compromised so we see what happens when we do this wild wild card of trust when we expand our attack",
    "start": "2428440",
    "end": "2434000"
  },
  {
    "text": "service so greatly we open ourselves up to attacks like this so you know who made this mistake",
    "start": "2434000",
    "end": "2441319"
  },
  {
    "text": "was this widespread did a lot of people you know have these cross domain policies so one example that we're going",
    "start": "2441319",
    "end": "2447640"
  },
  {
    "text": "to show and I I just want to point out too all the videos that we show here have been patched so you can't go out and exploit them this is for Verizon",
    "start": "2447640",
    "end": "2454720"
  },
  {
    "text": "Wireless so you know this is the specifically the Verizon Wireless Business site and what this has here is",
    "start": "2454720",
    "end": "2460920"
  },
  {
    "text": "we have you know a casual user perhaps it's a business owner who wants to check on his employees usage he goes and he",
    "start": "2460920",
    "end": "2466400"
  },
  {
    "text": "logs into this Verizon Business website and you know he's you know kind of unaware that in the background what",
    "start": "2466400",
    "end": "2472400"
  },
  {
    "text": "Verizon is doing is they have one of these cross-domain policies and what do they do in that cross-domain policy they do a wild card of all subdomains of",
    "start": "2472400",
    "end": "2479119"
  },
  {
    "text": "Verizon you know Verizon business and so they have this massive surface area exposed so how could that be problematic",
    "start": "2479119",
    "end": "2486359"
  },
  {
    "text": "well as it turns out one of those endpoints of course was mapped to this vulnerable acami endpoint and now when",
    "start": "2486359",
    "end": "2492640"
  },
  {
    "text": "they navigate to a third party site you can see that we can of course load that Swift from that endpoint we can use that",
    "start": "2492640",
    "end": "2499040"
  },
  {
    "text": "Swift to make requests to the Verizon website and this example we're going to dump out all the phone numbers of this",
    "start": "2499040",
    "end": "2504480"
  },
  {
    "text": "person's account we're going to dump out all the Sim information for each device that they have on their account and we can do any action as the currently",
    "start": "2504480",
    "end": "2510760"
  },
  {
    "text": "logged in user so they're completely under our control now and this is all because they made this mistake of doing",
    "start": "2510760",
    "end": "2516800"
  },
  {
    "text": "this while Wild Card of trust do we have any no script users in",
    "start": "2516800",
    "end": "2522319"
  },
  {
    "text": "the crowd and don't lie to me because this is black hat couple all right so one of the",
    "start": "2522319",
    "end": "2529480"
  },
  {
    "text": "things that people don't realize about no script is it actually ships with a very wide white list there are actually many entries that are automatically",
    "start": "2529480",
    "end": "2535839"
  },
  {
    "text": "allowed to bypass no scripts and it's not they have many it's the same way as crossdomain.xml policies so they'll have",
    "start": "2535839",
    "end": "2542520"
  },
  {
    "text": "things like you know google.com and what that really means is all subdomains of google.com as well so this comes back to",
    "start": "2542520",
    "end": "2549079"
  },
  {
    "text": "bite us now we have an example proof of concept video here we just have a casual",
    "start": "2549079",
    "end": "2554240"
  },
  {
    "text": "user who's trying out no script you know they get it from the official addons.mozilla.org",
    "start": "2554240",
    "end": "2560480"
  },
  {
    "text": "this is what the you know add-on is supposed to do this is why it's so useful to people who want to you know be safe from web exploits but when we",
    "start": "2577440",
    "end": "2583920"
  },
  {
    "text": "navigate to an endpoint that's mapped to acami that's also in the white list we bypass all of no script so all the",
    "start": "2583920",
    "end": "2589880"
  },
  {
    "text": "protection that you originally had is completely gone so even if you had no script and you were trying to prevent",
    "start": "2589880",
    "end": "2595160"
  },
  {
    "text": "these exactly the type of exploits we're talking about it doesn't matter because we're actually already in your white list and you already trust us if you",
    "start": "2595160",
    "end": "2601000"
  },
  {
    "text": "haven't you know dumped your white list when you installed the plugin there are some other interesting",
    "start": "2601000",
    "end": "2606440"
  },
  {
    "start": "2605000",
    "end": "2605000"
  },
  {
    "text": "bypasses that this this affords us so HTTP content security policy is kind of a this this awesome way to prevent you",
    "start": "2606440",
    "end": "2613440"
  },
  {
    "text": "know inline script injection it's been preached is you know once we have this it's going to solve a lot of security problems xss will be incredibly hard to",
    "start": "2613440",
    "end": "2619319"
  },
  {
    "text": "do but you know in this attack scenario we're of course not injecting anything to their page we're actually loading the",
    "start": "2619319",
    "end": "2624760"
  },
  {
    "text": "Swift onto our own page and then hijacking it so there's no CSP on my own page we're just loading the resource into it so CSP does not apply to us in",
    "start": "2624760",
    "end": "2632599"
  },
  {
    "text": "this case we go completely around all of that protection and additionally many many sites make the mistake of you know",
    "start": "2632599",
    "end": "2638480"
  },
  {
    "text": "the white list in their CSP they say Okay sources from you know the CDN or this you know Google API uh service that",
    "start": "2638480",
    "end": "2644559"
  },
  {
    "text": "I use they're all trusted we can do that and of course that's problematic because when we have a vulnerability in the CDN",
    "start": "2644559",
    "end": "2650760"
  },
  {
    "text": "we can actually bypass all this [Music] protection so I'm sure I hope I've kind",
    "start": "2650760",
    "end": "2656640"
  },
  {
    "start": "2654000",
    "end": "2654000"
  },
  {
    "text": "of made a good impact on you guys if you are using AA you're kind of wondering to yourself how do I get fixed you know",
    "start": "2656640",
    "end": "2661920"
  },
  {
    "text": "this is this is very worrying to me I want to make sure that I'm protected so in order to address this vulnerability",
    "start": "2661920",
    "end": "2667319"
  },
  {
    "text": "they've actually we've worked with them and they've been very helpful I'm sure all of you know what it's like to you know reach out to a vendor and have them",
    "start": "2667319",
    "end": "2673400"
  },
  {
    "text": "not help you but this is not the case here they came out you know they wanted to know everything about it get things fixed as quickly as possible so in fact",
    "start": "2673400",
    "end": "2680480"
  },
  {
    "text": "you may actually already be patched akami been rolling out these these patches that have in fact a patch was",
    "start": "2680480",
    "end": "2685839"
  },
  {
    "text": "rolled out this morning kind of uh so many people are already fixed but not everyone uh not everyone can be fixed",
    "start": "2685839",
    "end": "2691880"
  },
  {
    "text": "because if they were to roll out a patch um it may cause disruptions",
    "start": "2691880",
    "end": "2697640"
  },
  {
    "text": "yeah so what Mike is referring to is if you actually do make use of arls this kind of older style um you know you may",
    "start": "2697640",
    "end": "2703079"
  },
  {
    "text": "have to have this functionality running and AI does have you know stuff in place to help you out in that situation as",
    "start": "2703079",
    "end": "2708400"
  },
  {
    "text": "well so if you if you're you know incredibly worried and you still want to phone a acami there's support agents actually have a Playbook that they can",
    "start": "2708400",
    "end": "2714960"
  },
  {
    "text": "read through and so um you know they actually are probably going to reach out to you proactively but if you don't want to wait so you can call them at this",
    "start": "2714960",
    "end": "2721040"
  },
  {
    "text": "support number that I have on this slide here or you can email them at this ccare ai.com",
    "start": "2721040",
    "end": "2727440"
  },
  {
    "text": "now if you have public inquiries about this vulnerability you want to say you know what's up back am I you know can you explain a little bit more about this",
    "start": "2727440",
    "end": "2733040"
  },
  {
    "text": "they should have a statement out today to you guys and all public queries can be you know directed to Rob Morton and",
    "start": "2733040",
    "end": "2738839"
  },
  {
    "text": "that's his you know number and his email I I would also like to make note",
    "start": "2738839",
    "end": "2744200"
  },
  {
    "start": "2742000",
    "end": "2742000"
  },
  {
    "text": "that if you are a security researcher like us and you have a vulnerability in their platform or you know any part of their service they they want you to",
    "start": "2744200",
    "end": "2750480"
  },
  {
    "text": "reach out they really want people to help them out they're not going to turn you away if you have a vulnerability they're actually want to work with you and get this ped so if if you do hit",
    "start": "2750480",
    "end": "2757880"
  },
  {
    "text": "them up at security ai.com they have a pgp key on their website if you want to you know make sure that you're talking to the right people and your",
    "start": "2757880",
    "end": "2764119"
  },
  {
    "text": "communication is secure and they wanted to also uh let you guys know that they're hiring folks in security as well",
    "start": "2764119",
    "end": "2769200"
  },
  {
    "text": "and you can see that link right there for that so thank you all so much um you",
    "start": "2769200",
    "end": "2774880"
  },
  {
    "text": "know I'm a penetration tester Mike",
    "start": "2774880",
    "end": "2778799"
  },
  {
    "text": "is",
    "start": "2783079",
    "end": "2786079"
  }
]