[
  {
    "text": "[Music]",
    "start": "230",
    "end": "8530"
  },
  {
    "text": "welcome to black hat briefings held November 21st through the 22nd 2001 in Amsterdam this is videotape number 10B a",
    "start": "23240",
    "end": "32960"
  },
  {
    "text": "continuation processes under Unix now we're actually going to start talking much more in depth about inject so which",
    "start": "37160",
    "end": "43399"
  },
  {
    "text": "which after all is what we're here for okay so a re overview of what exactly we're going to be speaking about in part",
    "start": "43399",
    "end": "48680"
  },
  {
    "text": "two in part two we're initially going to talk about the conceptual differences between the way inject so has to work",
    "start": "48680",
    "end": "54239"
  },
  {
    "text": "because it's under Unix and INB Works under Windows okay then we then we're going to speak about how injecto",
    "start": "54239",
    "end": "60920"
  },
  {
    "text": "actually works in depth we're going to speak about intercepting Dynam Dynamic function calls which is something useful",
    "start": "60920",
    "end": "66640"
  },
  {
    "text": "which injecto can do then we're going to talk about defending against injecto in case you see it as Weaponry but there",
    "start": "66640",
    "end": "72840"
  },
  {
    "text": "isn't really that much to talk about there and then we're then we're going to uh to talk about the future of injecto",
    "start": "72840",
    "end": "78119"
  },
  {
    "text": "and this sort of stuff um whatever okay so uh so just in case",
    "start": "78119",
    "end": "84040"
  },
  {
    "text": "you guys are already incredibly bored with all this dry material the first thing I'm going to do is I'm actually going to quickly show you a basic idea",
    "start": "84040",
    "end": "90200"
  },
  {
    "text": "of what injecto can do um so first thing I'm going to do is I'm just going to show you quick uh like absolutely",
    "start": "90200",
    "end": "96920"
  },
  {
    "text": "trivial lib uh Library okay all it does it's got anit function every Library",
    "start": "96920",
    "end": "102040"
  },
  {
    "text": "when it's loaded it's a nit function is called okay all it does is it prints that it's loaded successfully okay",
    "start": "102040",
    "end": "107479"
  },
  {
    "text": "nothing interesting um but but but to show you the basic idea behind ping sorry basic idea behind injector so uh",
    "start": "107479",
    "end": "114479"
  },
  {
    "text": "I'm going to I get my root password",
    "start": "114479",
    "end": "122560"
  },
  {
    "text": "right okay I'm going to log in okay I'm going to Ping Local Host right and I'm going to use inject so uh to",
    "start": "122640",
    "end": "132200"
  },
  {
    "text": "force that that simple Library which I showed into the remote",
    "start": "132200",
    "end": "139040"
  },
  {
    "text": "process okay so the normal ping okay injector so",
    "start": "141200",
    "end": "148959"
  },
  {
    "text": "no not working oh",
    "start": "151200",
    "end": "154360"
  },
  {
    "text": "well okay so I specify the process which I want to inject into 1310 okay fair",
    "start": "160920",
    "end": "167680"
  },
  {
    "text": "enough so Ping's running as normal okay I want to inject this Library it just runs no error messages and as you can",
    "start": "167680",
    "end": "173560"
  },
  {
    "text": "see uh in the middle of the Ping output the library prints out the fact that it was successfully injected into the",
    "start": "173560",
    "end": "179239"
  },
  {
    "text": "remote process so that's what injecto is all about it injects liaries into remote processes okay so and the real and the",
    "start": "179239",
    "end": "186959"
  },
  {
    "text": "real demos of what you can actually do with this stuff we'll talk about uh shortly okay so that was a simple demo",
    "start": "186959",
    "end": "193360"
  },
  {
    "text": "so injecto versus INB um just let me find myself okay",
    "start": "193360",
    "end": "203720"
  },
  {
    "text": "um uh injecto is basically the same as INB it's got the same idea the same concept same sort of functionality as uh",
    "start": "203720",
    "end": "210879"
  },
  {
    "text": "but for Unix okay it's not for Windows it's for Unix um and the entire process of of injecting a shared object into a",
    "start": "210879",
    "end": "217239"
  },
  {
    "text": "remote process is much much harder under Windows entities sorry under Unix enties on Windows because the operating system",
    "start": "217239",
    "end": "223000"
  },
  {
    "text": "doesn't provide all these groovy features which Windows does to manipulate remote processes um so so if",
    "start": "223000",
    "end": "228799"
  },
  {
    "text": "we remember the description of how INB works we'll remember load Library a which which loads a library okay um that",
    "start": "228799",
    "end": "235200"
  },
  {
    "text": "has a close equivalent under Unix so we're okay there okay open process has a",
    "start": "235200",
    "end": "240239"
  },
  {
    "text": "close equivalent under Unix so we can connect as a debugger under Unix that's no worries virtual alloc X which could",
    "start": "240239",
    "end": "246159"
  },
  {
    "text": "be used to um to allocate memory inside a remote process there's nothing even remotely like it under Unix there's",
    "start": "246159",
    "end": "253280"
  },
  {
    "text": "there's simply no way to allocate memory in a remote process to ask the ask the operating system to allocate memory um",
    "start": "253280",
    "end": "260000"
  },
  {
    "text": "nor is there a way because virtual alloces allowed you to specify the remote process page protection there's",
    "start": "260000",
    "end": "265360"
  },
  {
    "text": "no way to do that either under Enix there's just nothing even like it um write process memory which was used to",
    "start": "265360",
    "end": "271440"
  },
  {
    "text": "write to the remote processes memory that has a close equivalent so we're okay there create remote thread which",
    "start": "271440",
    "end": "277240"
  },
  {
    "text": "literally creates a thread inside a remote process and you can even specify where it starts in an argument there's",
    "start": "277240",
    "end": "283000"
  },
  {
    "text": "like this is an incredible function there's nothing like God nothing that even",
    "start": "283000",
    "end": "288280"
  },
  {
    "text": "vaguely relates under Unix um and Unix and let's be honest anyway Unix and threads aren't the best of friends at at",
    "start": "288280",
    "end": "294000"
  },
  {
    "text": "the best of times anyway um starting a thread inside a process which wasn't designed to be multi-threaded would be a",
    "start": "294000",
    "end": "299080"
  },
  {
    "text": "pretty quick way kill it um so basically in summary of that the two most important functions for INB they have no",
    "start": "299080",
    "end": "305880"
  },
  {
    "text": "Unix equivalent which so we immediately know uh that it's going to be a bastard to implement sorry for sing there but uh",
    "start": "305880",
    "end": "312960"
  },
  {
    "text": "anyway so uh inject so what what are the conceptual steps which we have to do so obviously um we we know that we want to",
    "start": "312960",
    "end": "320280"
  },
  {
    "text": "do the same thing as INB but under Unix but we also know that we're in we're in a very bad position because there's just",
    "start": "320280",
    "end": "325880"
  },
  {
    "text": "nothing which relates to how it works so the way we're going to have to do this is we're going to have to break down the process into conceptual steps and then",
    "start": "325880",
    "end": "332319"
  },
  {
    "text": "find ways to make them happen under Unix or Unix like operating systems okay so",
    "start": "332319",
    "end": "337479"
  },
  {
    "text": "what so what are the conceptual steps which in lib follows well the first step was to one of the steps was to open the",
    "start": "337479",
    "end": "342960"
  },
  {
    "text": "process okay uh the Second Step was was to find the function we were after in the remote process you know the you know",
    "start": "342960",
    "end": "349400"
  },
  {
    "text": "the function which loads the library we needed to find that inside the remote process then we needed to get the remote",
    "start": "349400",
    "end": "354759"
  },
  {
    "text": "process to call that function to load the specified library to load a library which we'd like it to load",
    "start": "354759",
    "end": "360319"
  },
  {
    "text": "uh and for bonus points actually help the library do something useful so so so those are our those are our conceptual",
    "start": "360319",
    "end": "368080"
  },
  {
    "text": "steps okay so so step one looking at this stuff under Unix attaching to a process no problem okay uh INB uses uh",
    "start": "369280",
    "end": "377479"
  },
  {
    "text": "open process which is a Windows API function uh to get a debugger connection to the remote process under Unix we have",
    "start": "377479",
    "end": "384479"
  },
  {
    "text": "we have two almost equivalent functions P trce which is the uh old style way of",
    "start": "384479",
    "end": "390440"
  },
  {
    "text": "debugging processes it's on basically every Unix Lo operating system so that's Linux which has pce and Solaris has proc",
    "start": "390440",
    "end": "397400"
  },
  {
    "text": "fs and some of the bsds have procfs which is a much better way of it's got so many more featur features it's not",
    "start": "397400",
    "end": "403639"
  },
  {
    "text": "funny but uh but but they all have some way of connecting to a remote process um when when we connect to a",
    "start": "403639",
    "end": "410039"
  },
  {
    "text": "remote process um what do we gain what what what functionality do we get by",
    "start": "410039",
    "end": "415479"
  },
  {
    "text": "connecting to the remote process well um the the first bit of functionality which is really important is we get the ability to read and write to the process",
    "start": "415479",
    "end": "421840"
  },
  {
    "text": "memory to the remote processes address base and as we were talking about earlier the page permissions don't apply",
    "start": "421840",
    "end": "427800"
  },
  {
    "text": "the colonel ignores page permissions for when you're connected as a debugger so you can read and write uh whatever you'd",
    "start": "427800",
    "end": "433360"
  },
  {
    "text": "like to inside the remote process uh you can modify the process registers that is you can literally modify its execution",
    "start": "433360",
    "end": "440479"
  },
  {
    "text": "on the CPU so you can modify the way the program is executing um and you can do lots of other really cool stuff under",
    "start": "440479",
    "end": "446919"
  },
  {
    "text": "Solaris but uh using using the procfs features but the basic features are are",
    "start": "446919",
    "end": "452240"
  },
  {
    "text": "the are those top two and th those are what are provided by P trce and uh it would be really nice to have P trce",
    "start": "452240",
    "end": "457800"
  },
  {
    "text": "support so um so basically injecto limits itself to the sort of stuff which can be achieved using p trce even though",
    "start": "457800",
    "end": "465680"
  },
  {
    "text": "it would be would be easier with Brock FS so step two is uh is opening is is to",
    "start": "465680",
    "end": "473960"
  },
  {
    "text": "find the find the library open function okay so we need a way to to open our library inside the remote process",
    "start": "473960",
    "end": "480280"
  },
  {
    "text": "um the the Unix Dynamic loader provides a particular function called DL open which can be used to open a dynamic",
    "start": "480280",
    "end": "486599"
  },
  {
    "text": "library and have it mapped into your memory space um uh and it's exactly the",
    "start": "486599",
    "end": "491680"
  },
  {
    "text": "equivalent of windows's load Library a um uh but under Windows load Library a",
    "start": "491680",
    "end": "497520"
  },
  {
    "text": "is in kernel 32.dll as I specified every process gets kernel 32.dll",
    "start": "497520",
    "end": "502960"
  },
  {
    "text": "uh under Unix DL open the function we were talking about earlier it exists in a in a shared Library called lib L .o uh",
    "start": "502960",
    "end": "510840"
  },
  {
    "text": "which stores a lot of dynamic Linker related routines um but most like this",
    "start": "510840",
    "end": "516240"
  },
  {
    "text": "is not like colel 32. libdl doso is not mapped into every process um it's just a",
    "start": "516240",
    "end": "522240"
  },
  {
    "text": "simple shared Library which you can use if you want it so the question then becomes how can you use functions which aren't loaded I mean obviously injecto",
    "start": "522240",
    "end": "529360"
  },
  {
    "text": "needs to be able to call these functions to get the library loaded but how can you call a function when it's not even",
    "start": "529360",
    "end": "534600"
  },
  {
    "text": "going to be mapped into the remote process um as it turns out the functions in in libdl doso are actually stubs",
    "start": "534600",
    "end": "541839"
  },
  {
    "text": "they're not the real implementation functions um under Linux what these stubs do is they perform error",
    "start": "541839",
    "end": "547120"
  },
  {
    "text": "processing and they call other more fundamental Dynamic Linker routines uh and the real functions in question are",
    "start": "547120",
    "end": "554959"
  },
  {
    "text": "stored inside GBC if you're under Linux and ld.so do1 uh if you're under Solaris",
    "start": "554959",
    "end": "560600"
  },
  {
    "text": "that that GBC actually stores most of the dynamic Linker routines because it's imported into every into every uh uh",
    "start": "560600",
    "end": "568360"
  },
  {
    "text": "executable and L D.S so1 is actually the name of the D Dynamic Linker under under",
    "start": "568360",
    "end": "573839"
  },
  {
    "text": "Solaris so basically uh in in in every every process under either of these",
    "start": "573839",
    "end": "579320"
  },
  {
    "text": "operating systems will always have those those two uh those two Dynamic libraries",
    "start": "579320",
    "end": "585000"
  },
  {
    "text": "now that actually makes a lot of sense because if you think about it the dynamic Linker needs to be able to load libraries doesn't it I mean it needs to",
    "start": "585000",
    "end": "590920"
  },
  {
    "text": "be able to read the DT needed entries and then load libraries so the functionality must be present inside the",
    "start": "590920",
    "end": "595959"
  },
  {
    "text": "executable at runtime otherwise it wouldn't be able to load the initial Library it needs okay so given that um",
    "start": "595959",
    "end": "602519"
  },
  {
    "text": "the dynamic Linker must have access to this functionality and thus every process must have access to this functionality every Dynamic process must",
    "start": "602519",
    "end": "609200"
  },
  {
    "text": "have access to this functionality um which is exactly what I say there um okay so so we're pretty certain",
    "start": "609200",
    "end": "617320"
  },
  {
    "text": "that there there will be the real DL open located somewhere inside the remote process memory um so how do we locate",
    "start": "617320",
    "end": "623360"
  },
  {
    "text": "where this real DL open is inside the remote process um INB what it does is it opens up kernel 32 .dll so it opens a",
    "start": "623360",
    "end": "630760"
  },
  {
    "text": "handle to it in in inside its process memory okay it finds the address of the function and then it assumes that that",
    "start": "630760",
    "end": "637399"
  },
  {
    "text": "that address will be the same in the remote process okay um injects so could",
    "start": "637399",
    "end": "642480"
  },
  {
    "text": "do exactly the same thing it could get a handle to its own uh libc using DL open",
    "start": "642480",
    "end": "647560"
  },
  {
    "text": "and then use DL Sim to work out the address of the real DL open um but does the assumption that that if the address",
    "start": "647560",
    "end": "654040"
  },
  {
    "text": "is at a certain location in my process base it must be at the same in yours really hold um and the absolute and",
    "start": "654040",
    "end": "660959"
  },
  {
    "text": "clear answer under Linux and most of these Unix operating systems is no um that you can't assume that because a",
    "start": "660959",
    "end": "666480"
  },
  {
    "text": "function is at an address inside your process bace it will be at the same Pro same address in someone else's um and",
    "start": "666480",
    "end": "673000"
  },
  {
    "text": "that's because patch is such a common security patches like packs open wall Etc they deliberately randomly map the",
    "start": "673000",
    "end": "679680"
  },
  {
    "text": "shared shared libraries so a shared Library will not be at the same location in two different processes or very",
    "start": "679680",
    "end": "685360"
  },
  {
    "text": "unlikely um so you simply can't make the assumption um so fair enough uh injects so will",
    "start": "685360",
    "end": "692480"
  },
  {
    "text": "obviously still need to know the address of of this function which opens a dynamic Library okay so so how are we",
    "start": "692480",
    "end": "699040"
  },
  {
    "text": "going to find this function well basically we'll duplicate the actions of the dynamic Linker we spoke earlier",
    "start": "699040",
    "end": "704320"
  },
  {
    "text": "about how the dynamic Linker works out where things are okay the first thing it does is is it looks in the link map",
    "start": "704320",
    "end": "709920"
  },
  {
    "text": "which shows where all of the shared libraries are where they're located so we'll open up and we'll Loop through all of the shared libraries in the link map",
    "start": "709920",
    "end": "716760"
  },
  {
    "text": "okay then we'll Loop through each of the exported symbols in each of the shared libraries okay until we eventually find",
    "start": "716760",
    "end": "723200"
  },
  {
    "text": "the matching symbol exactly how the dynamic loader does for print F or something like that um and then and then",
    "start": "723200",
    "end": "729720"
  },
  {
    "text": "because we know where the shared library is and because we know where where the function is inside the shared Library we can work out its absolute address inside",
    "start": "729720",
    "end": "736639"
  },
  {
    "text": "the remote process um so so taking a look at",
    "start": "736639",
    "end": "742760"
  },
  {
    "text": "that uh diagrammatically uh we can see that the",
    "start": "742760",
    "end": "748079"
  },
  {
    "text": "link map provides us a pointer to the Base address of the of the of the loaded shared Library okay it also provides us",
    "start": "748079",
    "end": "754880"
  },
  {
    "text": "a pointer to the um to the dynamic segment of the of the library okay and and in here we have a pointer to the",
    "start": "754880",
    "end": "761279"
  },
  {
    "text": "symbol table of the of the dynamic Library okay uh the symbol table",
    "start": "761279",
    "end": "766320"
  },
  {
    "text": "references the string table so we can look up the names of all of the symbols inside the string table okay so we Loop",
    "start": "766320",
    "end": "772480"
  },
  {
    "text": "through all the symbols look at all the names find the matching function and then we can just follow that uh up into",
    "start": "772480",
    "end": "778320"
  },
  {
    "text": "the real code of the of the loaded object and find the function we're after so we can find DL open inside the remote",
    "start": "778320",
    "end": "784120"
  },
  {
    "text": "process by pretending or following the same process as the dynamic",
    "start": "784120",
    "end": "789279"
  },
  {
    "text": "Linker um so fair enough we we've we've managed to locate the the loader routine",
    "start": "789279",
    "end": "795399"
  },
  {
    "text": "now what um we obviously still need it to be called and to be called with the relevant arguments to load the right",
    "start": "795399",
    "end": "800639"
  },
  {
    "text": "Library um this is much harder under Unix again because um uh because uh because the the the the",
    "start": "800639",
    "end": "809160"
  },
  {
    "text": "way injecto does this sorry the way INB does this is it forces uh it creates a remote thread inside the remote process",
    "start": "809160",
    "end": "815560"
  },
  {
    "text": "and then executes this function um where whereas we don't have the ability to create a remote thread we can't use a",
    "start": "815560",
    "end": "821240"
  },
  {
    "text": "thread here we actually need to force the main process itself to jump to",
    "start": "821240",
    "end": "827720"
  },
  {
    "text": "the to jump to some other code which will somehow call the dynamic loader open function",
    "start": "827720",
    "end": "835040"
  },
  {
    "text": "um so um and and and there are quite a number of issues with that I mean if we're going to modify the remote process",
    "start": "835040",
    "end": "840839"
  },
  {
    "text": "we're going to stop it executing the way it normally is and cause it to execute something else and to load this Library",
    "start": "840839",
    "end": "846360"
  },
  {
    "text": "there are obviously going to be issues because we're fundamentally disturbing the execution of the process um we we",
    "start": "846360",
    "end": "851759"
  },
  {
    "text": "need to restore the process afterwards uh so so once we've made it execute something else we need to get back to",
    "start": "851759",
    "end": "857199"
  },
  {
    "text": "where we were before and restart the process without killing it uh we need to be able to construct the arguments to",
    "start": "857199",
    "end": "862880"
  },
  {
    "text": "whatever code we're going to execute uh inside the remote process and we need to have some way of actually forcing the",
    "start": "862880",
    "end": "869079"
  },
  {
    "text": "extion flow to change to this new code which we want to execute um the first issue there and one",
    "start": "869079",
    "end": "875000"
  },
  {
    "text": "I want to talk about now because it's a big issue with with the way this sort of thing works is uh is CIS call Interruption when when you modify the",
    "start": "875000",
    "end": "882079"
  },
  {
    "text": "execution flow of a remote process but by by attaching to it using using uh debugging uh tools and by forcing it to",
    "start": "882079",
    "end": "889160"
  },
  {
    "text": "go somewhere else you actually interrupt you commonly will interrupt CIS calls a lot of code out there most Services Etc",
    "start": "889160",
    "end": "896480"
  },
  {
    "text": "spend the majority of their time in Waiting CIS calls like they might be waiting for user input on the terminal",
    "start": "896480",
    "end": "901920"
  },
  {
    "text": "they might be waiting for a socket connect they might be in any of these functions like select read connect right",
    "start": "901920",
    "end": "907519"
  },
  {
    "text": "any of these major functions they spend their time just blocked in this in this mode waiting for something to happen um",
    "start": "907519",
    "end": "913639"
  },
  {
    "text": "if if we if we move the execution of the process we'll break that CIS um and breaking a CIS is not a good idea",
    "start": "913639",
    "end": "920079"
  },
  {
    "text": "because it leads to uh all sorts of horrible issues um the most obvious one",
    "start": "920079",
    "end": "925199"
  },
  {
    "text": "of them is that is that when you call a CIS call when you ask the colonel to wait for socket connect or something",
    "start": "925199",
    "end": "930279"
  },
  {
    "text": "like that you put a libc the the libc functions put the arguments to the CIS call in in the system registers so on",
    "start": "930279",
    "end": "937040"
  },
  {
    "text": "the Linux you have eax ebx ECX edx for argument 0 1 2 3 whatever um under spark",
    "start": "937040",
    "end": "944279"
  },
  {
    "text": "you use these ones under well under spark Linux you use those under spark Solaris you use those whatever uh and",
    "start": "944279",
    "end": "950920"
  },
  {
    "text": "the most important one there is is the first argument because the first argument specifies to the colonel what",
    "start": "950920",
    "end": "956240"
  },
  {
    "text": "type of CIS call you're attempting to call okay it's actually the most important one um and when the CIS call",
    "start": "956240",
    "end": "961720"
  },
  {
    "text": "is interrupted uh the the the um colel",
    "start": "961720",
    "end": "966959"
  },
  {
    "text": "breaks the CIS call and then it sets an error number into into the these registers eax o1 and G1 if you notice",
    "start": "966959",
    "end": "974319"
  },
  {
    "text": "you'll see that eax o1 and G1 are the first arguments to to the CIS call um so",
    "start": "974319",
    "end": "980839"
  },
  {
    "text": "so so we get this number written in into the first argument register um and this value is isn't something useful like e",
    "start": "980839",
    "end": "987639"
  },
  {
    "text": "intra or whatever so so if a process actually ends up with one of these weird return codes from from a uh from the",
    "start": "987639",
    "end": "995480"
  },
  {
    "text": "interruption of a CIS call most code won't handle it and it and it'll die this so so if you try and re if you try",
    "start": "995480",
    "end": "1001399"
  },
  {
    "text": "and restart the program where it was and it finds this weird value in the first register it will generally crap out and",
    "start": "1001399",
    "end": "1007079"
  },
  {
    "text": "it won't won't continue to exist okay um so obviously if you if we're going to do this if we need to if we're going to",
    "start": "1007079",
    "end": "1013160"
  },
  {
    "text": "inject the um shared Library we need to be able to restart the CIS call without um causing the death of the death of the",
    "start": "1013160",
    "end": "1019639"
  },
  {
    "text": "target process so the question which then becomes is okay how are we going to do that I mean fair enough we we could",
    "start": "1019639",
    "end": "1025600"
  },
  {
    "text": "set we could restart execution back at the bit which called the CIS call that's fair enough but how are we going to do",
    "start": "1025600",
    "end": "1030959"
  },
  {
    "text": "that when we don't know what the CIS call was because the first argument has been overwritten the first and most important argument has been overwritten",
    "start": "1030959",
    "end": "1037600"
  },
  {
    "text": "um finding the old parameter turns out to be reasonably okay um under Linux uh",
    "start": "1037600",
    "end": "1043038"
  },
  {
    "text": "under sorry Intel Linux it's quite easy because there's a debugger structure specifically designed for the debugger",
    "start": "1043039",
    "end": "1048319"
  },
  {
    "text": "which tells you what the first argument was um under spark Solaris um uh it's",
    "start": "1048319",
    "end": "1055080"
  },
  {
    "text": "also really easy because when you connect as a debugger you don't have to interrupt the CIS call um so you can so",
    "start": "1055080",
    "end": "1060480"
  },
  {
    "text": "you can actually read it out before you break the CIS call um and then UND spark Linux this is incredibly hard and I",
    "start": "1060480",
    "end": "1067360"
  },
  {
    "text": "haven't I still haven't found a clean way of do well I've found a way which works but I haven't found a clean way if anyone knows a clean way and can tell me",
    "start": "1067360",
    "end": "1074080"
  },
  {
    "text": "I'd be extremely grateful it is possible but it but it's um it's not nice nice",
    "start": "1074080",
    "end": "1079520"
  },
  {
    "text": "it's uh the way I had to do it was pretty disgusting actually so if anyone knows a good way that would be I'd love",
    "start": "1079520",
    "end": "1084760"
  },
  {
    "text": "to hear it so anyway so um so the idea of how we're going to do this then is we're going to save the old registers",
    "start": "1084760",
    "end": "1091159"
  },
  {
    "text": "before we go ahead and modify the process okay and then we're going to check was was the process in a CIS call",
    "start": "1091159",
    "end": "1096640"
  },
  {
    "text": "did we interrupt this CIS call okay yep we did okay well what we'll do instead what we'll do now is we're going to fix",
    "start": "1096640",
    "end": "1102880"
  },
  {
    "text": "up the first register and then when we restart this process we'll restart it at the instruction which called the CIS so",
    "start": "1102880",
    "end": "1109360"
  },
  {
    "text": "in other words it will go back into the CIS which it was previously in um so that's fair enough so so we",
    "start": "1109360",
    "end": "1115919"
  },
  {
    "text": "have a way to interrupt the process and make it to other staff then come back so we're okay with that now now what are we",
    "start": "1115919",
    "end": "1121400"
  },
  {
    "text": "actually going to make it do um we need to call this DL open function and get it to open a library for us um so how are",
    "start": "1121400",
    "end": "1128640"
  },
  {
    "text": "we going to do that we need to construct the arguments and call it uh the way INB does this is it copies in a function it",
    "start": "1128640",
    "end": "1134360"
  },
  {
    "text": "it actually has a function inside itself which takes in a parameter which is a pointer to the Rel function and then it",
    "start": "1134360",
    "end": "1139799"
  },
  {
    "text": "just calls it um this won't work on Unix uh it's not a good idea because uh firstly where are we going to put this",
    "start": "1139799",
    "end": "1146039"
  },
  {
    "text": "code we can't allocate memory inside the remote process as we talked about so where are we going to put this new function and even worse we can't",
    "start": "1146039",
    "end": "1152559"
  },
  {
    "text": "actually make the remote memory executable because we can't modify page protections inside the remote",
    "start": "1152559",
    "end": "1157679"
  },
  {
    "text": "executable um so the obvious solution to that becomes okay we'll just use trampolines uh which is what GDB and",
    "start": "1157679",
    "end": "1164679"
  },
  {
    "text": "most debuggers use and we'll just copy some code from ourself onto the process stack inside the remote process and then",
    "start": "1164679",
    "end": "1171520"
  },
  {
    "text": "and then call the function inside the remote process um this is well and truly broken on any machine which has any of",
    "start": "1171520",
    "end": "1177480"
  },
  {
    "text": "these security patches because the stack is made non-executable so packs and open wall and all that sort of stuff they'll",
    "start": "1177480",
    "end": "1183679"
  },
  {
    "text": "kill it um basically uh we find ourselves in a situation where copying remote code into the remote process is",
    "start": "1183679",
    "end": "1190039"
  },
  {
    "text": "hard and it's and and it's really not worth the effort um so trampolines",
    "start": "1190039",
    "end": "1195280"
  },
  {
    "text": "aren't going to work so so what does injects so do in order to avoid needing to inject code into the remote process",
    "start": "1195280",
    "end": "1201720"
  },
  {
    "text": "well the truth of the matter is we don't need to um there is no real reason to have a trampoline inside a remote process what what injecto does is it",
    "start": "1201720",
    "end": "1209120"
  },
  {
    "text": "copies the arguments whatever string arguments there are and some other arguments onto the remote process stack",
    "start": "1209120",
    "end": "1214400"
  },
  {
    "text": "okay that's easy enough fair enough we can extend the stack and then copy on some data okay fair enough and then then",
    "start": "1214400",
    "end": "1220320"
  },
  {
    "text": "we set arguments inside the registers as needed uh because the D open functions are uh fast call calling convention so",
    "start": "1220320",
    "end": "1228240"
  },
  {
    "text": "we set up in the registers the arguments to to DL open okay and then and then we set the saved PC or or the return",
    "start": "1228240",
    "end": "1235280"
  },
  {
    "text": "address uh after the call to this function to be something completely invalid in this case I I chose 41 41 41",
    "start": "1235280",
    "end": "1242480"
  },
  {
    "text": "40 okay and then we we we set the current instruction pointer inside the remote process to to the function DL",
    "start": "1242480",
    "end": "1249799"
  },
  {
    "text": "open so basically we've moved execution to DL open we've set up the arguments uh",
    "start": "1249799",
    "end": "1255360"
  },
  {
    "text": "as though it was called normally and we're just going to we're going to let the function go and and at the end of the function it's going to try and",
    "start": "1255360",
    "end": "1261039"
  },
  {
    "text": "return but it's going to return to a completely invalid um address so that's exactly what we're doing here allow the",
    "start": "1261039",
    "end": "1266600"
  },
  {
    "text": "process to execute and then uh obviously it'll find the invalid address and it will Segal okay when it segals uh we it",
    "start": "1266600",
    "end": "1273640"
  },
  {
    "text": "debugger so we can catch the seg fult and work out that it did seg fult at 41 4140 okay we catch the seg fult restore",
    "start": "1273640",
    "end": "1280960"
  },
  {
    "text": "processing and let the process continue going um uh so so the the obvious",
    "start": "1280960",
    "end": "1287200"
  },
  {
    "text": "advantage of this technique is that there's no executable code injected at all inside the remote process uh well",
    "start": "1287200",
    "end": "1292960"
  },
  {
    "text": "not not using not by injecto but D open obviously loads up some executable code",
    "start": "1292960",
    "end": "1298559"
  },
  {
    "text": "um and there are no permissions issues involved at all because you don't need executable Pages uh all you need to be",
    "start": "1298559",
    "end": "1303840"
  },
  {
    "text": "able to do is to write to the stack and that's always guaranteed so at that point if you've",
    "start": "1303840",
    "end": "1309559"
  },
  {
    "text": "done it right uh the library is loaded um the the the DL open function executes it gets it works out the",
    "start": "1309559",
    "end": "1316520"
  },
  {
    "text": "correct um uh Library it loads the library and the init function is called as normal inside the process and the",
    "start": "1316520",
    "end": "1322919"
  },
  {
    "text": "process continues as though nothing ever happened so um let's let's look at",
    "start": "1322919",
    "end": "1328840"
  },
  {
    "text": "actual our more in-depth demo of um of exactly how this works um",
    "start": "1328840",
    "end": "1335799"
  },
  {
    "text": "yep has has its own signal Handler that's okay um if you're connected as the debugger you will always get the",
    "start": "1338919",
    "end": "1344320"
  },
  {
    "text": "signal first um you have a choice you can you can pass the signal signal on if you'd like to but uh like if you if in G",
    "start": "1344320",
    "end": "1352400"
  },
  {
    "text": "I'm not sure whether you're a big GDB fan but if in GDB you send a signal to a process you're debugging it will stop",
    "start": "1352400",
    "end": "1357799"
  },
  {
    "text": "and say do you want to pass this um signal onto the remote process inject so never does that so uh so it so it gets",
    "start": "1357799",
    "end": "1364480"
  },
  {
    "text": "Sig sag fault uh prevents it from happening and restores the process so the process continues going um so so",
    "start": "1364480",
    "end": "1372360"
  },
  {
    "text": "let's take a look at at our little ping example again because it seems pretty fun um so if we ping The Local Host uh",
    "start": "1372360",
    "end": "1378520"
  },
  {
    "text": "I'm just going to point out exactly uh the functionality of injecto because I'm going to put on its full debugging",
    "start": "1378520",
    "end": "1385600"
  },
  {
    "text": "mode and and and just show you basically how it's doing this stuff exactly what I talked about it does so what am I doing",
    "start": "1387520",
    "end": "1396039"
  },
  {
    "text": "that's the wrong one",
    "start": "1396039",
    "end": "1402600"
  },
  {
    "text": "okay okay um uh so what is inject so doing here fair enough it's uh it's",
    "start": "1403840",
    "end": "1410080"
  },
  {
    "text": "opening up the target executable to get information about the target um uh it's looking through it's",
    "start": "1410080",
    "end": "1416799"
  },
  {
    "text": "looking through the segment types because it needs to find the the the the dynamic segment so that it can work out",
    "start": "1416799",
    "end": "1422320"
  },
  {
    "text": "what libraries are currently mapped into the remote process okay uh and as you can see it works out the various Dynamic",
    "start": "1422320",
    "end": "1428960"
  },
  {
    "text": "linking information um uh so so this is the dynamic segment",
    "start": "1428960",
    "end": "1435080"
  },
  {
    "text": "DT needed entries all that sort of associated stuff it's looking for the DT debug entry which as we know specifies",
    "start": "1435080",
    "end": "1441360"
  },
  {
    "text": "the address of um of of the uh of the link map inside the remote process in",
    "start": "1441360",
    "end": "1446600"
  },
  {
    "text": "the executable when the executable has not yet been loaded it will always be zero but but injecto looks for it to",
    "start": "1446600",
    "end": "1452520"
  },
  {
    "text": "make sure that it's there because if it isn't there then injects so can't do anything uh it also looks for the PLT",
    "start": "1452520",
    "end": "1457640"
  },
  {
    "text": "got entry so that it can be sure that the target executable the PID matches the executable which was specified you",
    "start": "1457640",
    "end": "1463600"
  },
  {
    "text": "can specify an executable file um goes through it checks out that the that the you've specified is a real Library um",
    "start": "1463600",
    "end": "1471159"
  },
  {
    "text": "and now it's connected to the process okay so it's gone uh where are we okay so so it's connected to the remote",
    "start": "1471159",
    "end": "1477320"
  },
  {
    "text": "process it's found the link map in the remote process it's telling us the information about the dynamic Linker inside the remote process uh ignore that",
    "start": "1477320",
    "end": "1484720"
  },
  {
    "text": "that's just a debugging error um okay then it goes so it finds the first library inside the remote process which",
    "start": "1484720",
    "end": "1490360"
  },
  {
    "text": "as we can see in this one is lib resolve the the resolve uh the DNS resolution",
    "start": "1490360",
    "end": "1495600"
  },
  {
    "text": "Library okay so it it finds the damic section in that Library okay it looks through trying to find the symbols okay",
    "start": "1495600",
    "end": "1503000"
  },
  {
    "text": "it finds all the symbols and as you can see it just prints out all of the symbols inside this library inside the remote process okay so it looks through",
    "start": "1503000",
    "end": "1510440"
  },
  {
    "text": "the symbols it's trying to find DL open it's trying to find the real DL open doesn't find it in lib resolve okay it",
    "start": "1510440",
    "end": "1516000"
  },
  {
    "text": "moves on now it gets to lib C okay Loops through again looking for the for the",
    "start": "1516000",
    "end": "1521240"
  },
  {
    "text": "symbols okay there are lots of symbols in libc so just",
    "start": "1521240",
    "end": "1526520"
  },
  {
    "text": "uh excuse me we get through some of",
    "start": "1526520",
    "end": "1532399"
  },
  {
    "text": "this okay um so there we go so so it finds the real DL open this is the real",
    "start": "1532399",
    "end": "1538080"
  },
  {
    "text": "DL open inside libc okay our DL open function is found at that location with a certain size okay it realizes it's",
    "start": "1538080",
    "end": "1545559"
  },
  {
    "text": "interrupted a system call okay and it and it and it restores uh the EIP and the first and the original uh eax",
    "start": "1545559",
    "end": "1552559"
  },
  {
    "text": "argument um so that it will be restarted when when uh when we restore the registers okay",
    "start": "1552559",
    "end": "1558760"
  },
  {
    "text": "um it sets the remote process uh oh anyway yeah okay so it",
    "start": "1558760",
    "end": "1565080"
  },
  {
    "text": "goes through that then the process receives a Sig alarm and I'll talk about that in a second but that's okay um eventually you can see that the EIP of",
    "start": "1565080",
    "end": "1571679"
  },
  {
    "text": "the process ends up as that invalid address I was talking about at that point it knows that the the function has",
    "start": "1571679",
    "end": "1576840"
  },
  {
    "text": "been called okay and that it should restore the restore the thing so that's a seg fault there um so it says that yep",
    "start": "1576840",
    "end": "1583799"
  },
  {
    "text": "it's successfully called the the dynamic Library open routine uh it restores the remote process EIP um there uh restores",
    "start": "1583799",
    "end": "1591440"
  },
  {
    "text": "the target executable State and and detaches from it and that's it and uh and the message has already gone by but",
    "start": "1591440",
    "end": "1597880"
  },
  {
    "text": "that's basically the process so we've successfully injected a library into the remote",
    "start": "1597880",
    "end": "1603480"
  },
  {
    "text": "process okay okay cool um so fair enough what",
    "start": "1604919",
    "end": "1610520"
  },
  {
    "text": "are the issues with this uh one of the things we saw just then is that various different signals can be generated while we're doing what we're trying to do uh",
    "start": "1610520",
    "end": "1617120"
  },
  {
    "text": "in the case of ping uh it's got a timer in it to to to keep sending out the Ping packets and what happened is while while",
    "start": "1617120",
    "end": "1623480"
  },
  {
    "text": "injecto was trying to do its work uh a sigal arm happened in other words the timer went off um and and what and what",
    "start": "1623480",
    "end": "1629880"
  },
  {
    "text": "needs to happen is that is that if these signals happen they need to be stored and later on when the executable is is",
    "start": "1629880",
    "end": "1636000"
  },
  {
    "text": "back in a in an okay State they need to be replayed by injecto um at the moment",
    "start": "1636000",
    "end": "1641679"
  },
  {
    "text": "inject so only replays sigal AR um but that's just because I that's the only",
    "start": "1641679",
    "end": "1647080"
  },
  {
    "text": "one I've implemented but but it would need to replay Sig child and Sig urge and all these other signals which could",
    "start": "1647080",
    "end": "1652159"
  },
  {
    "text": "happen uh and need to be replayed if they do um and obviously this this sort of",
    "start": "1652159",
    "end": "1657880"
  },
  {
    "text": "process uh is dangerous by definition uh when you think about it this sort of stuff you are you really are tinkering",
    "start": "1657880",
    "end": "1663919"
  },
  {
    "text": "with the internals of a remote process which makes it uh you know something dangerous uh particularly when you start",
    "start": "1663919",
    "end": "1669919"
  },
  {
    "text": "doing this ciso restart stuff um but having said that uh I haven't had any problems with inject so for a while I",
    "start": "1669919",
    "end": "1676960"
  },
  {
    "text": "can't make any processes C or anything like that so it's pretty reliable I'd need to do some more stress testing but",
    "start": "1676960",
    "end": "1683200"
  },
  {
    "text": "it works on everything which I tried on basically so fair enough we've got we've got a library inside the remote process",
    "start": "1683200",
    "end": "1689360"
  },
  {
    "text": "what do we do now um and it's the same as with all the other things we can do whatever we want uh the library uh can",
    "start": "1689360",
    "end": "1696320"
  },
  {
    "text": "uh can go ahead and Patch functions or do whatever the hell it wants to um the most useful thing um would be exactly",
    "start": "1696320",
    "end": "1702080"
  },
  {
    "text": "the same thing as we do with uh with with the you know the dynamic Linker",
    "start": "1702080",
    "end": "1707559"
  },
  {
    "text": "tricks where we got our Dynamic Linker in first in that case we we manag to intercept Dynamic function calls and you",
    "start": "1707559",
    "end": "1712679"
  },
  {
    "text": "can do a lot if you do that um so it would be really useful if we could if we could uh get that functionality inside",
    "start": "1712679",
    "end": "1719120"
  },
  {
    "text": "injecto uh because we could then use it to fix most security vulnerabilities at runtime uh and we could also use it for",
    "start": "1719120",
    "end": "1725080"
  },
  {
    "text": "the evil uh use that is um subverting programs at",
    "start": "1725080",
    "end": "1730360"
  },
  {
    "text": "runtime so um so one of the extra extra bits of functionality provided by inject",
    "start": "1730360",
    "end": "1736679"
  },
  {
    "text": "so is that you can ask in so to inject the library and then call a specific function after it's injected the library",
    "start": "1736679",
    "end": "1743679"
  },
  {
    "text": "whatever function you'd like it to call and when it calls that function it provides um the address of the program's",
    "start": "1743679",
    "end": "1749960"
  },
  {
    "text": "Dynamic segment to to that uh to the um the address of the target programs",
    "start": "1749960",
    "end": "1755200"
  },
  {
    "text": "Dynamic segment to the library so that means that the library gets enough information about the about the process",
    "start": "1755200",
    "end": "1760960"
  },
  {
    "text": "in which it exists to go ahead and do whatever it it would like to do um but in but uh but injector so also comes",
    "start": "1760960",
    "end": "1767559"
  },
  {
    "text": "with the util object which is called intercept and intercept intercept is based on on this functionality and it uh",
    "start": "1767559",
    "end": "1774919"
  },
  {
    "text": "it can be compiled into into uh any Library you create uh and then it allows",
    "start": "1774919",
    "end": "1780720"
  },
  {
    "text": "very easy interception of dynamic function calls um so basically what",
    "start": "1780720",
    "end": "1785840"
  },
  {
    "text": "happens with intercept Doo well um the user code specifies the library code specifies a list of functions it would",
    "start": "1785840",
    "end": "1791519"
  },
  {
    "text": "like to override okay The Intercept Doo function intercept begin is called by",
    "start": "1791519",
    "end": "1796799"
  },
  {
    "text": "intercept by injector uh as I said inject so can can be asked to call a specific function okay it then",
    "start": "1796799",
    "end": "1803320"
  },
  {
    "text": "finds the functions which were in the list of functions to be overridden inside the processes PLT and patches",
    "start": "1803320",
    "end": "1809399"
  },
  {
    "text": "them to refer to the replacement versions inside the Library uh and then it provides a pointer and it provides a",
    "start": "1809399",
    "end": "1815440"
  },
  {
    "text": "pointer to the old function uh to the library if it wants to call the old function uh so so what this might look",
    "start": "1815440",
    "end": "1821480"
  },
  {
    "text": "like is that uh if you've got inside this this process your normal print F okay you've got an injected liary which",
    "start": "1821480",
    "end": "1827559"
  },
  {
    "text": "has just been injected uh what intercept Doo allows is is that this PLT entry which normally points here uh intercept",
    "start": "1827559",
    "end": "1834679"
  },
  {
    "text": "o patches it so that instead of pointing there it now points down here and the injected library is uh is given",
    "start": "1834679",
    "end": "1840600"
  },
  {
    "text": "information so so that it can call the old one if it would like I haven't uh drawn that pointer but it's",
    "start": "1840600",
    "end": "1847679"
  },
  {
    "text": "there okay um there are a couple of issues with this on spark it isn't as easy as it sounds but it's quite",
    "start": "1847679",
    "end": "1853960"
  },
  {
    "text": "possible the code works on spark but um it's not as easy and also um as we were",
    "start": "1853960",
    "end": "1859919"
  },
  {
    "text": "talking about functions are normally are lazy are lazily bound normally this pointer is is only this is only patched",
    "start": "1859919",
    "end": "1867840"
  },
  {
    "text": "when when the first call happens um so if you so if you've injected your library before the first call happens um",
    "start": "1867840",
    "end": "1875440"
  },
  {
    "text": "this thing hasn't been properly resolved and and if you and if you call the old function from your intercepted Library",
    "start": "1875440",
    "end": "1881679"
  },
  {
    "text": "the dynamic Linker will reatch this PLT and your function will no longer be called because your patch has been",
    "start": "1881679",
    "end": "1887159"
  },
  {
    "text": "overwritten so basically you you you need to reapply the patch every time you uh every time you come through to be",
    "start": "1887159",
    "end": "1893440"
  },
  {
    "text": "totally certain that it isn't overridden by the by the um Dynamic Linker um so okay so so let's let's give",
    "start": "1893440",
    "end": "1900600"
  },
  {
    "text": "a trivial example of interception um because I'm running out of time I'm actually probably going to skip the",
    "start": "1900600",
    "end": "1905720"
  },
  {
    "text": "trivial example um but basically all it was going to do was it was going to uh",
    "start": "1905720",
    "end": "1911320"
  },
  {
    "text": "again we were going to intercept into ping and we were going to make some of the messages go missing so there was always a failure rate by intercepting",
    "start": "1911320",
    "end": "1917240"
  },
  {
    "text": "the dynamic fun functions but we don't really have time to do that so I'm going to uh I'm going to skip on to the more",
    "start": "1917240",
    "end": "1923799"
  },
  {
    "text": "serious demos okay so so fair enough we can inject the library and we can intercept Dynamic function calls uh what",
    "start": "1923799",
    "end": "1929480"
  },
  {
    "text": "can we do with this well we can do the same things as we could with all the other methods we can protect the running",
    "start": "1929480",
    "end": "1934600"
  },
  {
    "text": "uh running uh executable this way uh and the basic idea is that we'll intercept Dynamic function calls um it catch bad",
    "start": "1934600",
    "end": "1942399"
  },
  {
    "text": "Data before before it makes it to the real program and purify it",
    "start": "1942399",
    "end": "1948080"
  },
  {
    "text": "um so fair enough let's let's uh get on into this [Applause]",
    "start": "1948080",
    "end": "1954519"
  },
  {
    "text": "demo okay so if I wrong one don't need",
    "start": "1954519",
    "end": "1959720"
  },
  {
    "text": "this at the moment okay so if I",
    "start": "1959720",
    "end": "1964840"
  },
  {
    "text": "CD uh I'm not sure how many of you are familiar with uh with the uh who is D",
    "start": "1964840",
    "end": "1971480"
  },
  {
    "text": "demon basically it's written by Network Solutions and it uh and it provides who who is demon uh for most most of the",
    "start": "1971480",
    "end": "1978120"
  },
  {
    "text": "unix's um it has a rather glaring problem which is well known if I turn it",
    "start": "1978120",
    "end": "1984679"
  },
  {
    "text": "to it okay so here's the I who is D demon if I go if I make an S SOA",
    "start": "1984679",
    "end": "1991000"
  },
  {
    "text": "query an invalida query um you can see a trivial format string just let",
    "start": "1991000",
    "end": "1997840"
  },
  {
    "text": "me uh there's a trivial format string vulnerability here if I make Ana query and I put in percentage p uh I get a",
    "start": "1997840",
    "end": "2005360"
  },
  {
    "text": "stack Trace like that stack dump so so this is a completely vulnerable demon um",
    "start": "2005360",
    "end": "2011760"
  },
  {
    "text": "and it's well known and there are publicly available exploits for this um for this thing so uh actually",
    "start": "2011760",
    "end": "2017679"
  },
  {
    "text": "demonstrate one of them if I just go Local Host uh zero okay so so this is a",
    "start": "2017679",
    "end": "2024799"
  },
  {
    "text": "publicly available exploit running against it um it uh as you can see it it",
    "start": "2024799",
    "end": "2030519"
  },
  {
    "text": "connects to the Local Host works out the well the operating system you had to specify by that connects to the who ISD",
    "start": "2030519",
    "end": "2037120"
  },
  {
    "text": "it sends an string to work out uh to work out the structure um so that it always works um uh then U sends over the",
    "start": "2037120",
    "end": "2045120"
  },
  {
    "text": "Shell Code whatever sends the evil format string and you end up logged into the machine so uh so it's your typical",
    "start": "2045120",
    "end": "2052638"
  },
  {
    "text": "uh remote shell exploit thing okay so um",
    "start": "2052639",
    "end": "2058520"
  },
  {
    "text": "so obviously we we would like this to not be here anymore and uh and if we're running me God anyway um if we're",
    "start": "2058520",
    "end": "2066599"
  },
  {
    "text": "running the uh this demon uh this demon is obviously a fairly high-end demon if I'm running a",
    "start": "2066599",
    "end": "2072520"
  },
  {
    "text": "who ISD demon I'm probably a reasonably big provider I'm an ISP of some sort I might even be Network Solutions itself",
    "start": "2072520",
    "end": "2079079"
  },
  {
    "text": "I'm a big company I can't bring down my who is D demon I can't do anything I need to protect it obviously because",
    "start": "2079079",
    "end": "2084638"
  },
  {
    "text": "it's a glaring problem but I can't actually bring the bring it down to fix it I mean so so all of my patching",
    "start": "2084639",
    "end": "2090839"
  },
  {
    "text": "mechanisms whatever I do I have to protect it at runtime while it's still running um so if I uh",
    "start": "2090839",
    "end": "2099640"
  },
  {
    "text": "okay so I'm just going",
    "start": "2101280",
    "end": "2104280"
  },
  {
    "text": "to kill the existing a who is D",
    "start": "2106599",
    "end": "2111520"
  },
  {
    "text": "okay okay and now if if if I do let's just do an L trace of the uh who is d uh",
    "start": "2114040",
    "end": "2121240"
  },
  {
    "text": "to work out what the hell is going on inside it and and what we might be able to do to fix it okay turn at Local Host",
    "start": "2121240",
    "end": "2128200"
  },
  {
    "text": "43 21 okay so fair enough I'm connected star who is D server I'm actually connected to the wrong",
    "start": "2128200",
    "end": "2135800"
  },
  {
    "text": "PID okay so it's thrown a new process so if I connect to that",
    "start": "2136200",
    "end": "2141280"
  },
  {
    "text": "one for my new connection okay if I do an S SOA percentage",
    "start": "2141280",
    "end": "2147079"
  },
  {
    "text": "P it's wrong process",
    "start": "2147079",
    "end": "2151520"
  },
  {
    "text": "still wrong one",
    "start": "2152280",
    "end": "2156480"
  },
  {
    "text": "yep cool um what we can see is we've just got your typical Library call Trace no worries down the bottom here we can",
    "start": "2160160",
    "end": "2165960"
  },
  {
    "text": "see this F gets okay which is which hasn't returned yet okay um if I do",
    "start": "2165960",
    "end": "2174078"
  },
  {
    "text": "this um it's obviously returned because it's gone on and it's processed the new one again so we can see that basically",
    "start": "2174280",
    "end": "2180160"
  },
  {
    "text": "the the the way um the way R ISD is reading from the network is it's calling F gets which is Reading in a string and",
    "start": "2180160",
    "end": "2186119"
  },
  {
    "text": "this string happens to be toxic and uh can be used to exploit the service so what we'll actually do is we'll uh is",
    "start": "2186119",
    "end": "2193520"
  },
  {
    "text": "we're going to try and protect this process and we're going to",
    "start": "2193520",
    "end": "2199920"
  },
  {
    "text": "use this okay this is really really trivial and and it's uh and it's a library which",
    "start": "2201200",
    "end": "2207480"
  },
  {
    "text": "is designed to be injected into the remote process okay um we we can see we",
    "start": "2207480",
    "end": "2213160"
  },
  {
    "text": "we have a function pointed to the old fgs and new fgs so we're going to place fgs this is the stuff which you have to",
    "start": "2213160",
    "end": "2220200"
  },
  {
    "text": "provide for uh to uh to The Intercept object which specifies uh which functions you'd like to intercept I've",
    "start": "2220200",
    "end": "2226640"
  },
  {
    "text": "specified I'd like to intercept fgets I want uh the the I want it to be replaced with my fgets address uh I want the",
    "start": "2226640",
    "end": "2233920"
  },
  {
    "text": "address of the old fgets uh and and and this will actually just store the address of this of this array entry um",
    "start": "2233920",
    "end": "2240960"
  },
  {
    "text": "because it makes it more efficient um so then in in our new fgets which is going to replace the old one we are",
    "start": "2240960",
    "end": "2248280"
  },
  {
    "text": "we we do this we call the old fgets and remember how I said that that you have to reapply the patch after each one so",
    "start": "2248280",
    "end": "2254440"
  },
  {
    "text": "we do that by calling intercept override so we call the old fets we check whether or not it returns an error and if it did",
    "start": "2254440",
    "end": "2260400"
  },
  {
    "text": "we just return an error otherwise we we look through the buffer which was just read in and we try and work out whether",
    "start": "2260400",
    "end": "2265760"
  },
  {
    "text": "it was an SOA request if it was Ana request that then we uh that then we",
    "start": "2265760",
    "end": "2271000"
  },
  {
    "text": "come through we look through looking for percentage symbols if we find them we delete them so basically we're removing",
    "start": "2271000",
    "end": "2276640"
  },
  {
    "text": "all of the percentage marks from ANA request um to to prevent this problem existing",
    "start": "2276640",
    "end": "2282960"
  },
  {
    "text": "um so if I uh so so I've got a running R who is d",
    "start": "2282960",
    "end": "2288960"
  },
  {
    "text": "right all I'm going to do is inject so-",
    "start": "2288960",
    "end": "2294599"
  },
  {
    "text": "c-p is T Libs fix is T okay so I specified I want",
    "start": "2295079",
    "end": "2303319"
  },
  {
    "text": "to inject my fixed Library into the remote R ISD Okay so do that no error",
    "start": "2303319",
    "end": "2309160"
  },
  {
    "text": "messages which means it succeeded um and as you can actually see this was the console I ran uh who is D from and uh",
    "start": "2309160",
    "end": "2315480"
  },
  {
    "text": "and it prints out a little message when the library is loaded successfully so so so the patch library has been inserted",
    "start": "2315480",
    "end": "2320920"
  },
  {
    "text": "in the inside the running R who is D um and what that means now is that when every new connection comes in a new R",
    "start": "2320920",
    "end": "2326760"
  },
  {
    "text": "Who ISD is forked okay so it still picks up the new library still picks up the interceptions so if I turn that to the",
    "start": "2326760",
    "end": "2333000"
  },
  {
    "text": "Local Host I should be completely invulnerable to this problem oh well if I can",
    "start": "2333000",
    "end": "2338560"
  },
  {
    "text": "actually get it right so if I go SOA what previously would give me a",
    "start": "2338560",
    "end": "2345040"
  },
  {
    "text": "stack Trace as you can see uh all of the percentages are stripped and it gives me the invalid Authority area Authority",
    "start": "2345040",
    "end": "2351839"
  },
  {
    "text": "area PP p p so it's no longer vulnerable uh and we can prove that it's no longer vulnerable by running the exploit which",
    "start": "2351839",
    "end": "2359160"
  },
  {
    "text": "previously worked like a charm against it uh I just go",
    "start": "2359160",
    "end": "2368280"
  },
  {
    "text": "what was it okay so if I run the old exploit against it it connects AO ISD it",
    "start": "2368280",
    "end": "2376680"
  },
  {
    "text": "sends the evil string the evil string gets it gets it no response because the format string vulnerability is gone",
    "start": "2376680",
    "end": "2382240"
  },
  {
    "text": "can't read necessary data and it fails so basically you you you have what was previously a completely exploitable",
    "start": "2382240",
    "end": "2387720"
  },
  {
    "text": "demon and in about 10 lines of I don't know 20 lines of code really simple code",
    "start": "2387720",
    "end": "2392920"
  },
  {
    "text": "you fixed it it's no longer vulnerable at runtime okay so so so so that's an",
    "start": "2392920",
    "end": "2398319"
  },
  {
    "text": "example of protecting applications using injecto um now obviously uh where does",
    "start": "2398319",
    "end": "2405160"
  },
  {
    "text": "this lead um it obviously leads that that everything which can be used for good can be used for evil and so",
    "start": "2405160",
    "end": "2410200"
  },
  {
    "text": "something like injecto could obviously also be used to uh to do evil things to a running process um for example you you",
    "start": "2410200",
    "end": "2416760"
  },
  {
    "text": "might backd door a running process you might Magic Shell a running process you might log input and output to a critical",
    "start": "2416760",
    "end": "2422520"
  },
  {
    "text": "service you might do anything any of those evil things um so I",
    "start": "2422520",
    "end": "2428079"
  },
  {
    "text": "uh I would be a little bit it would be a bit remiss of me if I didn't if I didn't cover these uses too um although obviously I'd rather that uh this sort",
    "start": "2428079",
    "end": "2435000"
  },
  {
    "text": "of Technology not be used for that um but anyway so we've seen the good now",
    "start": "2435000",
    "end": "2440200"
  },
  {
    "text": "let's see the bad um let's take a",
    "start": "2440200",
    "end": "2445040"
  },
  {
    "text": "look no where",
    "start": "2445760",
    "end": "2449520"
  },
  {
    "text": "my okay I I have a uh",
    "start": "2452599",
    "end": "2458319"
  },
  {
    "text": "I I have a uh SSH demon running on this machine",
    "start": "2464000",
    "end": "2469560"
  },
  {
    "text": "right so so just your standard run ofth the M um SSH server uh and what we can",
    "start": "2469560",
    "end": "2475640"
  },
  {
    "text": "use this sort of technology to do is to back door a running SSH server um so let's take a look at what",
    "start": "2475640",
    "end": "2482400"
  },
  {
    "text": "we use to do that",
    "start": "2482400",
    "end": "2486160"
  },
  {
    "text": "oh sorry",
    "start": "2492040",
    "end": "2494560"
  },
  {
    "text": "it's okay uh so basically what what what we what we have is this new library which is designed to be injected and it",
    "start": "2497400",
    "end": "2503800"
  },
  {
    "text": "and it actually intercepts a hell of a lot more that than than that shared Library which fixes things uh we have it",
    "start": "2503800",
    "end": "2510359"
  },
  {
    "text": "intercepts right it intercepts read it intercepts get uid um get a uid set uid",
    "start": "2510359",
    "end": "2516680"
  },
  {
    "text": "uh various Pam uh things uh uh and anyway so it just does the normal thing",
    "start": "2516680",
    "end": "2523800"
  },
  {
    "text": "it's got a list of all the functions it wants to intercept uh all of that sort of stuff",
    "start": "2523800",
    "end": "2529640"
  },
  {
    "text": "and we'll probably cover this uh a little bit more after we see what what it actually does um so fair enough so so I've got",
    "start": "2529640",
    "end": "2536200"
  },
  {
    "text": "this running SSH server um uh now what I'm going to do is I'm going to inject",
    "start": "2536200",
    "end": "2541640"
  },
  {
    "text": "this Library into it",
    "start": "2541640",
    "end": "2546200"
  },
  {
    "text": "see okay so I've got I've got my uh Library I'm just going to inject it into",
    "start": "2560240",
    "end": "2566359"
  },
  {
    "text": "SSH if I can get it",
    "start": "2566359",
    "end": "2570000"
  },
  {
    "text": "right okay so cool I've now injected a library into the SSH demon what can I do with this uh I can do anything I like",
    "start": "2573359",
    "end": "2580800"
  },
  {
    "text": "but uh but firstly let's let's really see that it's been injected if I cat proc 382",
    "start": "2580800",
    "end": "2588480"
  },
  {
    "text": "maps you can see uh the library has been mapped in to the running uh",
    "start": "2588480",
    "end": "2594760"
  },
  {
    "text": "executable so what what what what does this evil uh thing do well the first",
    "start": "2594760",
    "end": "2599839"
  },
  {
    "text": "thing it does is is that if I log The Local Host okay uh and just in case",
    "start": "2599839",
    "end": "2605280"
  },
  {
    "text": "anyone's wondering uh the passwords I'm using in this case aren't my real ones so okay so fair enough I've logged in",
    "start": "2605280",
    "end": "2612800"
  },
  {
    "text": "using a normal SSH session uh that was a really bad move because if I",
    "start": "2612800",
    "end": "2618920"
  },
  {
    "text": "tell a file called temp evil you can see that uh it's got",
    "start": "2618920",
    "end": "2624640"
  },
  {
    "text": "Library injected successfully then it's got my username and my password have been logged and then it's got this stuff",
    "start": "2624640",
    "end": "2630559"
  },
  {
    "text": "about automatic login wonder what that is then it's got reads and wres on tdys okay so let's let's first talk",
    "start": "2630559",
    "end": "2637680"
  },
  {
    "text": "about uh one uh the this uh automatic",
    "start": "2637680",
    "end": "2642720"
  },
  {
    "text": "login stuff what's that well what happens if if if if i s log into Local",
    "start": "2642720",
    "end": "2648280"
  },
  {
    "text": "Host uh let's actually not use me let's let's s log into Local Host uh let's use",
    "start": "2648280",
    "end": "2653599"
  },
  {
    "text": "the user bin okay obviously a user which can't log in okay so it's asking me for",
    "start": "2653599",
    "end": "2658800"
  },
  {
    "text": "for the user Bin's password I'm going to use the magic password let me in and uh as you can see it starts a",
    "start": "2658800",
    "end": "2665720"
  },
  {
    "text": "rout sh so uh so the SSH server is uh is is detecting that that this is a magic",
    "start": "2665720",
    "end": "2671960"
  },
  {
    "text": "um login and it's popping a root shell what actually happens here is is that uh We've we've got it logged here the",
    "start": "2671960",
    "end": "2677960"
  },
  {
    "text": "connection uh it comes in and it sees the user bin it sees the response is let me in it works out that that this is a",
    "start": "2677960",
    "end": "2683440"
  },
  {
    "text": "magic response the connection is enabled for automatic login uh automatic login for this user um it denies a set u ID",
    "start": "2683440",
    "end": "2691000"
  },
  {
    "text": "call to bin um so so basically SSH is convinced that this user is really",
    "start": "2691000",
    "end": "2696640"
  },
  {
    "text": "authentic ated it tries to to change down to uh to user one which is user bin uh that's denied because because set uid",
    "start": "2696640",
    "end": "2704040"
  },
  {
    "text": "is intercepted uh and then it checks to see whether it really did successfully change down uh by calling get uid and",
    "start": "2704040",
    "end": "2710599"
  },
  {
    "text": "get euid so the intercepted function really has successfully changed down and that's it and then it th and",
    "start": "2710599",
    "end": "2717319"
  },
  {
    "text": "then SSH logs you in his route um and and possibly the the most Insidious use",
    "start": "2717319",
    "end": "2722720"
  },
  {
    "text": "of this particular thing is that uh",
    "start": "2722720",
    "end": "2728838"
  },
  {
    "text": "okay uh okay is if I tail the evil thing and",
    "start": "2733480",
    "end": "2740680"
  },
  {
    "text": "uh and I log in as me",
    "start": "2740680",
    "end": "2747240"
  },
  {
    "text": "okay okay logged in and now what I'm going to do is I don't know you know it's that sort of day I think I want to",
    "start": "2748480",
    "end": "2753559"
  },
  {
    "text": "change my password Cor my current password what about my new password okay",
    "start": "2753559",
    "end": "2761119"
  },
  {
    "text": "I'll choose something really",
    "start": "2761119",
    "end": "2763960"
  },
  {
    "text": "secure H bugger now I have to really have to pick something hard",
    "start": "2766880",
    "end": "2774040"
  },
  {
    "text": "uh bloody hell",
    "start": "2777119",
    "end": "2781640"
  },
  {
    "text": "oh God can anyone think",
    "start": "2787359",
    "end": "2791640"
  },
  {
    "text": "for oh come",
    "start": "2792520",
    "end": "2796240"
  },
  {
    "text": "on um so I'm going to",
    "start": "2797880",
    "end": "2801720"
  },
  {
    "text": "try I can't think for password which will work on this thing",
    "start": "2805040",
    "end": "2811200"
  },
  {
    "text": "um okay anyway doesn't matter I'm not going to even make it successfully work anyway let's say it had worked can't be",
    "start": "2813760",
    "end": "2819760"
  },
  {
    "text": "bothered um what we notice is all these things okay so we're over this highly encrypted link talking with the SSH over",
    "start": "2819760",
    "end": "2827280"
  },
  {
    "text": "which has been completely destroyed from the inside um and you can see all these reads and wres on TTY that immediately",
    "start": "2827280",
    "end": "2832599"
  },
  {
    "text": "makes you rather suspicious and what we'll see is if uh CD",
    "start": "2832599",
    "end": "2839799"
  },
  {
    "text": "temp uh we can see this file evil uh 171 if I do strings",
    "start": "2841000",
    "end": "2848760"
  },
  {
    "text": "41701 what did I do",
    "start": "2852040",
    "end": "2859760"
  },
  {
    "text": "okay um anyway recognize this this is all the session password",
    "start": "2860720",
    "end": "2867640"
  },
  {
    "text": "it's actually logging all the terminal input and output and all the stupid passwords I tried and none of them worked but if they had of so basically",
    "start": "2867640",
    "end": "2875280"
  },
  {
    "text": "um I it's uh someone was saying uh at breakfast this morning apparently someone well known had a had a saying",
    "start": "2875280",
    "end": "2882200"
  },
  {
    "text": "that using SSL is like using uh using a tank to to transport nuclear weapons between a cardboard box and a Park seat",
    "start": "2882200",
    "end": "2889280"
  },
  {
    "text": "um this is exactly what this is you know um it really it's it's completely uh this is a completely encrypted session",
    "start": "2889280",
    "end": "2895680"
  },
  {
    "text": "I'm completely happy that that everything in between is safe but it doesn't matter because one side's destroyed and uh and obviously you could",
    "start": "2895680",
    "end": "2901960"
  },
  {
    "text": "use you could use this to to do the same to the client or the server or anything you want to to",
    "start": "2901960",
    "end": "2908400"
  },
  {
    "text": "basically so um that's the subversion demo um so",
    "start": "2908400",
    "end": "2914440"
  },
  {
    "text": "so what's cool about injecto uh injecto is simple uh it's well it's simple to use not simple to write but it's simple",
    "start": "2914440",
    "end": "2922000"
  },
  {
    "text": "uh it's very flexible because the library can do anything it wishes and it gets uh and it's quite simple to do that",
    "start": "2922000",
    "end": "2927839"
  },
  {
    "text": "given uh the the ability to intercept Dynamic functions um it",
    "start": "2927839",
    "end": "2933200"
  },
  {
    "text": "uh it doesn't require modifications to the dis binary at all it doesn't require any disk files at all",
    "start": "2933200",
    "end": "2939400"
  },
  {
    "text": "you you can delete the library after it's been injected uh it won't actually disappear but it will be gone from the file system so so you can uh so you",
    "start": "2939400",
    "end": "2946480"
  },
  {
    "text": "don't need any this files the service doesn't need to be restarted if you're protecting a service it will it will be",
    "start": "2946480",
    "end": "2951760"
  },
  {
    "text": "protected immediately um the code is done in C which makes it a hell of a lot easier than doing assembler the code",
    "start": "2951760",
    "end": "2957760"
  },
  {
    "text": "gets relocations free um so so if you want to call uh C functions and stuff",
    "start": "2957760",
    "end": "2962839"
  },
  {
    "text": "you can it's not like you you have to worry about any of that or constructing your own t table of external functions",
    "start": "2962839",
    "end": "2968680"
  },
  {
    "text": "and at this stage I can say that it's mostly safe um I haven't ridiculously stress tested it but it's pretty darn safe and",
    "start": "2968680",
    "end": "2975280"
  },
  {
    "text": "it works on everything I tried it on disadvantages injector so isn't",
    "start": "2975280",
    "end": "2980480"
  },
  {
    "text": "permanent okay you do it once as soon as the process is restarted it's it's it fails to exist um the patch is gone uh",
    "start": "2980480",
    "end": "2988200"
  },
  {
    "text": "and it's complex to use for non for non-dynamic function interception uh Dynamic function interception is obviously made or pretty pretty close to",
    "start": "2988200",
    "end": "2994760"
  },
  {
    "text": "automatic but for anything else you'd have to do it yourself and get into get into all the usual complexities um and",
    "start": "2994760",
    "end": "3002160"
  },
  {
    "text": "one thing which I really thought which I really thought I should should address um it's something that that bothers me a",
    "start": "3002160",
    "end": "3007520"
  },
  {
    "text": "little bit that that uh that this technology is obviously obviously it's uh it's scary uses its evil uses uh are",
    "start": "3007520",
    "end": "3014960"
  },
  {
    "text": "more impressive than it than its protective uses but uh when I when I wrote injecto I wasn't actually",
    "start": "3014960",
    "end": "3020920"
  },
  {
    "text": "particularly interested in its security uses at all it can be used for a lot of things if you're a systems programmer um",
    "start": "3020920",
    "end": "3026000"
  },
  {
    "text": "there are a lot of uses for it um and it's really not an attack um what what as I showed in the first half if you",
    "start": "3026000",
    "end": "3032720"
  },
  {
    "text": "patch an existing executable in memory at runtime you can do everything that injects so does just not as easily and",
    "start": "3032720",
    "end": "3039040"
  },
  {
    "text": "uh and and if some of this stuff is a bit scary and personally I find it a bit scary um I think uh we'd all be kidding",
    "start": "3039040",
    "end": "3044640"
  },
  {
    "text": "ourselves if we didn't suspect that that uh that the black cats the people who are doing the damage already know this",
    "start": "3044640",
    "end": "3050520"
  },
  {
    "text": "stuff and I've already done stuff like it I mean I've never heard of anything uh as as simple as inject so but I have",
    "start": "3050520",
    "end": "3056400"
  },
  {
    "text": "certain certainly heard about uh a variety of of available things which are designed to patch secure servers while",
    "start": "3056400",
    "end": "3063000"
  },
  {
    "text": "they run um so so the basic idea is that if if you're if you're on a machine if",
    "start": "3063000",
    "end": "3068319"
  },
  {
    "text": "your machine is subverted there is nothing that is that remains trustworthy running processes are not trusted if",
    "start": "3068319",
    "end": "3074680"
  },
  {
    "text": "you've got if you have a sign if you have one of those machines which has signage signed executables once that",
    "start": "3074680",
    "end": "3079920"
  },
  {
    "text": "once that executable is loaded it is as vulnerable to this as any other process do do do not trust that a process which",
    "start": "3079920",
    "end": "3086119"
  },
  {
    "text": "is running must be safe if you have an SSH log to some really critical server of yours and and you don't and you don't",
    "start": "3086119",
    "end": "3092559"
  },
  {
    "text": "uh fix up your your box your local machine so you get hacked on your local machine that person could easily use",
    "start": "3092559",
    "end": "3098280"
  },
  {
    "text": "your SSH connection the one which you haven't restarted for 10 years to to take out the remote box too um there is",
    "start": "3098280",
    "end": "3104720"
  },
  {
    "text": "nothing safe once you are hacked injects so is not a new attack um and modifying",
    "start": "3104720",
    "end": "3109960"
  },
  {
    "text": "these processes or binaries all of the techniques I've spoken about they all require privileges so so the only way",
    "start": "3109960",
    "end": "3115760"
  },
  {
    "text": "anyone is going to be able to use this against anyone is is if they are is if their machine is broken into nothing is",
    "start": "3115760",
    "end": "3122400"
  },
  {
    "text": "safe um so fair enough that's injecto um do you have a question yeah",
    "start": "3122400",
    "end": "3128720"
  },
  {
    "text": "cool is it to",
    "start": "3128720",
    "end": "3132440"
  },
  {
    "text": "REM ass you got passw whatever whatever runess yes supposed to",
    "start": "3135280",
    "end": "3144240"
  },
  {
    "text": "or not supposed to R",
    "start": "3144240",
    "end": "3149640"
  },
  {
    "text": "process you you could uh you could write a tool to do so I haven't done so but it",
    "start": "3149760",
    "end": "3155000"
  },
  {
    "text": "will be complex and difficult it's not designed to be done you're not designed to be able to unload libraries which are already existing in a process it gets",
    "start": "3155000",
    "end": "3161520"
  },
  {
    "text": "very hard because you'd have to write trampolines and stuff which could call M unmap and unmap the the existing library",
    "start": "3161520",
    "end": "3166599"
  },
  {
    "text": "and unpatch or the PLT and all that stuff um the dynamic Library doesn't the the dynamic loader doesn't provide a way",
    "start": "3166599",
    "end": "3172319"
  },
  {
    "text": "to do that so so it's complex and difficult uh but it could be done definitely did someone else have a",
    "start": "3172319",
    "end": "3178359"
  },
  {
    "text": "question there y if you want to protect SC atast easily remove the debug",
    "start": "3178359",
    "end": "3187880"
  },
  {
    "text": "functionality that allows process to attach to another one uh that's that's",
    "start": "3187880",
    "end": "3192920"
  },
  {
    "text": "uh that's what a lot of people immediately say um if you if you leave that's if you do do that that's fair",
    "start": "3192920",
    "end": "3198280"
  },
  {
    "text": "enough that that that raises the bar but then immediately uh uh the attacker will just go for proc M if you if you",
    "start": "3198280",
    "end": "3204359"
  },
  {
    "text": "continue to have Dev me which can access all the memory you can do all this stuff um by by uh if you have access to to the",
    "start": "3204359",
    "end": "3212200"
  },
  {
    "text": "remote memory space of another of another process it's gone and uh and you do have access if you've got if you've",
    "start": "3212200",
    "end": "3217480"
  },
  {
    "text": "got Dev M Dev K uh um all of that sort of stuff you're right though though",
    "start": "3217480",
    "end": "3224040"
  },
  {
    "text": "disabling P Trace is a good step but it also kills debugging and frankly uh I find stuff like S trce and L trace and",
    "start": "3224040",
    "end": "3230599"
  },
  {
    "text": "stuff to be invaluable when I'm doing Administration so it would kill them too they would no longer work",
    "start": "3230599",
    "end": "3237319"
  },
  {
    "text": "um so yeah so anyway so so injector so is easy to defend against you can do that you can disable all that sort of",
    "start": "3237319",
    "end": "3242839"
  },
  {
    "text": "stuff you can you can have a you can make the dynamic link and not export the link map you can do all this cool stuff",
    "start": "3242839",
    "end": "3248079"
  },
  {
    "text": "you can prevent injecto from working but all you're doing is raising the bar which is never a bad idea but um but but",
    "start": "3248079",
    "end": "3254760"
  },
  {
    "text": "you can't stop it unless you disable all of this stuff which allows you to interfere with another process or the",
    "start": "3254760",
    "end": "3259880"
  },
  {
    "text": "internals of the operating system so anyway so injects so what's the future for injects so well um uh whatever",
    "start": "3259880",
    "end": "3267079"
  },
  {
    "text": "really uh you can modify the reloc uh modify the relocations instead of patching the PLT which would prevent all",
    "start": "3267079",
    "end": "3272280"
  },
  {
    "text": "the problems we have with where you have to reapply the patch after each call um",
    "start": "3272280",
    "end": "3277400"
  },
  {
    "text": "uh but that has all these issues associated with it if anyone wants to hear about them then I'm more than happy to talk about them um uh other platforms",
    "start": "3277400",
    "end": "3284599"
  },
  {
    "text": "for injecto that would be interesting um it should be relatively easy U most of the core work has been done for injecto",
    "start": "3284599",
    "end": "3290640"
  },
  {
    "text": "uh porting it to other platforms particularly well obviously other Unix platforms should be relatively trivial",
    "start": "3290640",
    "end": "3295760"
  },
  {
    "text": "um additional helpers um so like additions to intercept so that instead of just intercept you can have prologue",
    "start": "3295760",
    "end": "3302240"
  },
  {
    "text": "interception and all the these other core forms of interception um they certainly won't be as easy as Dynamic um",
    "start": "3302240",
    "end": "3307440"
  },
  {
    "text": "function interception but there could be cool other options like that but anyway that basically brings brings me to the",
    "start": "3307440",
    "end": "3313400"
  },
  {
    "text": "end of the presentation I hope you enjoyed uh read well seeing all this stuff and me talking about it um uh if",
    "start": "3313400",
    "end": "3320400"
  },
  {
    "text": "any of you guys have anything you want to talk about any comments on it anything like that uh then I'm more than happy to hear them uh you can come up to",
    "start": "3320400",
    "end": "3327559"
  },
  {
    "text": "me at lunch or something or I'm very happy to discuss all of this stuff but right for the moment does anyone have",
    "start": "3327559",
    "end": "3332880"
  },
  {
    "text": "any questions or anything no okay well uh well thanks",
    "start": "3332880",
    "end": "3340880"
  },
  {
    "text": "very much the the our website is here um uh just just uh in case any of you were",
    "start": "3340880",
    "end": "3346559"
  },
  {
    "text": "wondering injecto isn't currently a release tool it will be um I need to clean it up before I release it anywhere",
    "start": "3346559",
    "end": "3353160"
  },
  {
    "text": "um so if you guys are really interested in it and want to pick it up it will definitely be on our website in the next",
    "start": "3353160",
    "end": "3359039"
  },
  {
    "text": "couple of months or something like that but uh I just don't want to release it when I don't think it's finished um and",
    "start": "3359039",
    "end": "3364559"
  },
  {
    "text": "uh and if you guys want to want to email me or something uh that's my email address but cool thank you very much for",
    "start": "3364559",
    "end": "3370760"
  },
  {
    "text": "your [Applause]",
    "start": "3370760",
    "end": "3378780"
  },
  {
    "text": "time",
    "start": "3385240",
    "end": "3388240"
  },
  {
    "text": "e",
    "start": "3415240",
    "end": "3418240"
  },
  {
    "text": "e",
    "start": "3445160",
    "end": "3448160"
  },
  {
    "text": "e",
    "start": "3475119",
    "end": "3478119"
  },
  {
    "text": "e",
    "start": "3505119",
    "end": "3508119"
  },
  {
    "text": "e",
    "start": "3535039",
    "end": "3538039"
  },
  {
    "text": "e",
    "start": "3565039",
    "end": "3568039"
  },
  {
    "text": "e",
    "start": "3595039",
    "end": "3598039"
  },
  {
    "text": "e",
    "start": "3624960",
    "end": "3627960"
  },
  {
    "text": "e",
    "start": "3654920",
    "end": "3657920"
  },
  {
    "text": "e",
    "start": "3684920",
    "end": "3687920"
  },
  {
    "text": "e",
    "start": "3714839",
    "end": "3717839"
  },
  {
    "text": "e e",
    "start": "3744839",
    "end": "3748880"
  }
]