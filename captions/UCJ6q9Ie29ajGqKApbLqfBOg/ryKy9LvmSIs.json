[
  {
    "text": "today we're gonna talk about breaking malaria through Sarah attacks so and I would like to introduce URI",
    "start": "210",
    "end": "7589"
  },
  {
    "text": "I'm Andrew by the way and also Misha and Alex so this research was done when we",
    "start": "7589",
    "end": "14730"
  },
  {
    "text": "all in one team in inter securities and I demography now Alex and Yuri",
    "start": "14730",
    "end": "21990"
  },
  {
    "text": "represents himself and vietname and Misha represents a McAfee advance research team oh he will be spot can I",
    "start": "21990",
    "end": "29130"
  },
  {
    "text": "have you jump in later ok you what do you thanks Andrew",
    "start": "29130",
    "end": "35280"
  },
  {
    "text": "hey everyone good afternoon thanks",
    "start": "35280",
    "end": "40440"
  },
  {
    "text": "thanks for coming to a listen to our presentation because I know there are quite a few awesome talks going in",
    "start": "40440",
    "end": "46260"
  },
  {
    "text": "parallel at the moment so I hope we'll will deliver so thanks for your time the",
    "start": "46260",
    "end": "52440"
  },
  {
    "text": "talk we will talk about the fractured backbone well in figuratively speaking",
    "start": "52440",
    "end": "57480"
  },
  {
    "text": "of course by now you probably guess that this is not a medical conference so no fractured leg bones literally so we'll",
    "start": "57480",
    "end": "64439"
  },
  {
    "text": "we'll use firmer attacks or exploits to bypass OS always defenses that I have to",
    "start": "64439",
    "end": "75299"
  },
  {
    "text": "put it in the presentation mouth sorry just one second",
    "start": "75299",
    "end": "80330"
  },
  {
    "text": "don't blow it's fine",
    "start": "86140",
    "end": "90630"
  },
  {
    "text": "nope sorry about that just do it",
    "start": "97880",
    "end": "107869"
  },
  {
    "text": "I'll do that alright so yeah we filled it preserve putting it into the",
    "start": "118590",
    "end": "124950"
  },
  {
    "text": "presentation mount anyway so the agenda today thanks Andrew",
    "start": "124950",
    "end": "131069"
  },
  {
    "text": "so the agenda today we'll talk about some of the introduction about into the firmer attacks from from the threats",
    "start": "131069",
    "end": "137310"
  },
  {
    "text": "that we have recently observed and this will set a stage for why why a lot of a",
    "start": "137310",
    "end": "147360"
  },
  {
    "text": "West Metro West vendors introduced a lot of new defenses in the operating systems",
    "start": "147360",
    "end": "153560"
  },
  {
    "text": "specifically the so Microsoft recently added virtualization basic security in",
    "start": "153560",
    "end": "159180"
  },
  {
    "text": "Windows 10 and we'll proceed with describing what it is as well as",
    "start": "159180",
    "end": "165830"
  },
  {
    "text": "attacking it assessing the attack surface as well as showing some of the",
    "start": "165830",
    "end": "171120"
  },
  {
    "text": "some of the attacks against the virtualization base security and bypasses for the features that depend on",
    "start": "171120",
    "end": "177120"
  },
  {
    "text": "that virtualization they see areas such as credential dark we'll we'll talk about the what type of mitigations are",
    "start": "177120",
    "end": "182970"
  },
  {
    "text": "being done today in in Windows as well as the as well as the platform's so",
    "start": "182970",
    "end": "190459"
  },
  {
    "text": "intro to the threats against the EFI",
    "start": "190459",
    "end": "196410"
  },
  {
    "text": "firmer recently we have learned about from WikiLeaks",
    "start": "196410",
    "end": "201750"
  },
  {
    "text": "both seven disclosure we have learned about some of the some of the EFI former",
    "start": "201750",
    "end": "207720"
  },
  {
    "text": "implants that were there pretty",
    "start": "207720",
    "end": "212730"
  },
  {
    "text": "fascinating threats because they have been they have been active at least in",
    "start": "212730",
    "end": "221370"
  },
  {
    "text": "in 2009 so it's a few years ago and even now they're they have pretty fascinating set of capabilities so the the the the",
    "start": "221370",
    "end": "229260"
  },
  {
    "text": "the disclosure included EFI persistent implant called dark matter which is used",
    "start": "229260",
    "end": "234299"
  },
  {
    "text": "by two projects they're Starkey and dark these guys so what the implant does it",
    "start": "234299",
    "end": "242700"
  },
  {
    "text": "it has a set of components infecting firmer which which is able to infect infect firmer",
    "start": "242700",
    "end": "249750"
  },
  {
    "text": "both when the firmer is unlocked fully unlocked but also what's new is that",
    "start": "249750",
    "end": "254820"
  },
  {
    "text": "it's able to infect firmer when it's locked so it's actually using a vulnerability in the firm rating to to",
    "start": "254820",
    "end": "260519"
  },
  {
    "text": "at the implants it also is the kind of a first publicly known implant that have",
    "start": "260519",
    "end": "269040"
  },
  {
    "text": "been reinfecting firmer updates so when the update is is being installed on a",
    "start": "269040",
    "end": "276270"
  },
  {
    "text": "Mac on the Mac system the implant has to keep the ability to you and really inject itself into the into the firm rub",
    "start": "276270",
    "end": "282480"
  },
  {
    "text": "Nate there was another another attack called sonic screwdriver which was using a malicious option ROM basically the",
    "start": "282480",
    "end": "289710"
  },
  {
    "text": "vulnerability that the option roms have have not been validated on they Thunderball to either an ad adapter in",
    "start": "289710",
    "end": "296520"
  },
  {
    "text": "order to allow an attacker to boot off of removable media even when the Mac has",
    "start": "296520",
    "end": "304919"
  },
  {
    "text": "a firmware password enabled so Dark",
    "start": "304919",
    "end": "310080"
  },
  {
    "text": "Matter implant EFI implants it has a several capabilities or several",
    "start": "310080",
    "end": "315600"
  },
  {
    "text": "components in it one of them is a loader component which is actually doing the",
    "start": "315600",
    "end": "321180"
  },
  {
    "text": "main infection mainly a main main legwork on understanding settings and what what the system is it also sets the",
    "start": "321180",
    "end": "328410"
  },
  {
    "text": "stage for for the OS level implant for Mac OS implants and user mode implants",
    "start": "328410",
    "end": "333890"
  },
  {
    "text": "there is a app installer components which launches which determines if the",
    "start": "333890",
    "end": "340229"
  },
  {
    "text": "flash efi flash on Mac has been it is unlocked or locked and depending on that",
    "start": "340229",
    "end": "346500"
  },
  {
    "text": "it loads a specific well next next stage infection components whether it's it's a",
    "start": "346500",
    "end": "353280"
  },
  {
    "text": "verbose installer which is loaded when the flash is unlocked which then infects",
    "start": "353280",
    "end": "360720"
  },
  {
    "text": "the firmer with more components or it's a s 3 sleep component which which is",
    "start": "360720",
    "end": "367020"
  },
  {
    "text": "being loaded by the app installer when the flash is locked down so this is",
    "start": "367020",
    "end": "373020"
  },
  {
    "text": "their three sleep as is the one that actually does the exploitation of the former so the",
    "start": "373020",
    "end": "379720"
  },
  {
    "text": "the s3 sleep after launching an exploit it also injects a component called Pei",
    "start": "379720",
    "end": "386890"
  },
  {
    "text": "unlock it's a PR module that unlocks flesh temporarily by patching the settings in the handout",
    "start": "386890",
    "end": "394360"
  },
  {
    "text": "block between the P I station and and the Dixie stage and so the two",
    "start": "394360",
    "end": "400060"
  },
  {
    "text": "components that are being finally injected into the firmer BPI loader and Dix injector those are P I and Dixie",
    "start": "400060",
    "end": "407290"
  },
  {
    "text": "components they they those are those are the components that reinfect the updates",
    "start": "407290",
    "end": "412440"
  },
  {
    "text": "in addition to that the the implant Dark Matter implants can permanently patch",
    "start": "412440",
    "end": "419710"
  },
  {
    "text": "the Dixie Dixie core components the main kind of a part of the beautify firmer in",
    "start": "419710",
    "end": "425680"
  },
  {
    "text": "order to permanently unlock the flash floor for forever so one of the these",
    "start": "425680",
    "end": "432910"
  },
  {
    "text": "are these are all rather interesting components with rather interesting functionality but one of them is is the",
    "start": "432910",
    "end": "440230"
  },
  {
    "text": "most interesting is the s3 sleep component which actually launches this",
    "start": "440230",
    "end": "446290"
  },
  {
    "text": "dark dream exploit that exploits the protections of EFI firmer on the resume",
    "start": "446290",
    "end": "453250"
  },
  {
    "text": "from s3 sleep state from the suspensive Ram and as you can probably imagine the",
    "start": "453250",
    "end": "461890"
  },
  {
    "text": "name of the exploit is not coincidence so it has something to do with the sleep so dark dream exploit so the the fact",
    "start": "461890",
    "end": "469450"
  },
  {
    "text": "that the s3 sleep component uses the s3 resume indicates that or suggests that",
    "start": "469450",
    "end": "476890"
  },
  {
    "text": "it exploits one of the vulnerabilities one of the s3 resume vulnerabilities",
    "start": "476890",
    "end": "482880"
  },
  {
    "text": "there have there has been a some amount of research over the past couple of",
    "start": "482880",
    "end": "488740"
  },
  {
    "text": "years done by both our team as well as other researchers on the vulnerabilities",
    "start": "488740",
    "end": "494620"
  },
  {
    "text": "during the s3 stage those are called s3 bit script vulnerabilities so Rafal war",
    "start": "494620",
    "end": "501970"
  },
  {
    "text": "choke and quarry kallenberg they have discovered vulnerabilities our team has discovered a number of vulnerabilities",
    "start": "501970",
    "end": "507820"
  },
  {
    "text": "associated with the s3 sleep petrova Luca discovered a one of the",
    "start": "507820",
    "end": "513339"
  },
  {
    "text": "vulnerabilities in Mac related to the astray blade script as well as Metro has",
    "start": "513339",
    "end": "518948"
  },
  {
    "text": "has done a lot of research on exploiting those vulnerabilities so this is one of",
    "start": "518949",
    "end": "525579"
  },
  {
    "text": "the one of the examples of hacking Mac EFI firmer in 2015 using one of those",
    "start": "525579",
    "end": "534430"
  },
  {
    "text": "vulnerabilities we have discovered in the s3 boot script so basically that screenshot indicates that the the",
    "start": "534430",
    "end": "540519"
  },
  {
    "text": "protections of the five permanent that Marik is using have been disabled as a result of that exploit so this this is",
    "start": "540519",
    "end": "548019"
  },
  {
    "text": "probably or likely how Dark Matter exploit might have been exploiting Mac",
    "start": "548019",
    "end": "553420"
  },
  {
    "text": "Mac's in order to install its implants so that that vulnerability has been",
    "start": "553420",
    "end": "559709"
  },
  {
    "text": "patched by Apple in 2016 I believe if",
    "start": "559709",
    "end": "566170"
  },
  {
    "text": "anyone saw security advisory or not on this let me know so how do we it's clear",
    "start": "566170",
    "end": "574480"
  },
  {
    "text": "that even in 2009 there have been significant attacks targeting EFI firmer",
    "start": "574480",
    "end": "583019"
  },
  {
    "text": "today we probably have a lot more sophisticated attacks targeting firmer",
    "start": "583019",
    "end": "589690"
  },
  {
    "text": "both at the Mac EFI level as well as unifying the PCs as well as other firmer",
    "start": "589690",
    "end": "595029"
  },
  {
    "text": "components and in the platforms how do we deal with that how do we detect that we cannot fully rely on the built-in",
    "start": "595029",
    "end": "602110"
  },
  {
    "text": "protections by platform manufacturers such as secure boot or TPM because in a",
    "start": "602110",
    "end": "607779"
  },
  {
    "text": "lot of in a lot of cases when the implant is there they have already bypassed those those protections are",
    "start": "607779",
    "end": "613839"
  },
  {
    "text": "platform based protections so there there isn't a software that is detecting",
    "start": "613839",
    "end": "620709"
  },
  {
    "text": "those implants today on the on the systems at the file level so the way we",
    "start": "620709",
    "end": "629230"
  },
  {
    "text": "we the way one would go about detecting those implants is extract the firmer",
    "start": "629230",
    "end": "634740"
  },
  {
    "text": "parse the file system from the file system extract the executables and check them somehow",
    "start": "634740",
    "end": "640529"
  },
  {
    "text": "it can be done with the hardware tools but unfortunately those are not scalable you cannot do a hardware extraction on",
    "start": "640529",
    "end": "646560"
  },
  {
    "text": "multiple systems and and by the way hardware tool tools also run firmer and often on science so there is a problem",
    "start": "646560",
    "end": "655829"
  },
  {
    "text": "with that or the software tools which is a kind of a also potential method but",
    "start": "655829",
    "end": "661079"
  },
  {
    "text": "maybe a tempered wave by it by the implants in the firmer so today we don't",
    "start": "661079",
    "end": "667740"
  },
  {
    "text": "even have hashes for the permanent components published by the platform",
    "start": "667740",
    "end": "673379"
  },
  {
    "text": "manufacturers so we don't really have even a golden set of things to check against to check firmer against so this",
    "start": "673379",
    "end": "682559"
  },
  {
    "text": "is why we have when we've done is we've created a global whitelist we basically",
    "start": "682559",
    "end": "687709"
  },
  {
    "text": "scraped and downloaded websites of nine platform manufacturers we have",
    "start": "687709",
    "end": "692850"
  },
  {
    "text": "downloaded twenty six thousand images including the firmer update images including the ones that manufacturers",
    "start": "692850",
    "end": "698670"
  },
  {
    "text": "weren't aware that they actually had on the websites we have parsed fourteen over fourteen thousand of those images",
    "start": "698670",
    "end": "705149"
  },
  {
    "text": "which happen to be a UEFI firmware images and we have created a global",
    "start": "705149",
    "end": "710370"
  },
  {
    "text": "whitelist of around two million hashes for the known efi executables and we",
    "start": "710370",
    "end": "716279"
  },
  {
    "text": "have published it and also in addition to that we've developed a tool a module",
    "start": "716279",
    "end": "722519"
  },
  {
    "text": "to the trip site framework that can take that take that wide list of known",
    "start": "722519",
    "end": "728420"
  },
  {
    "text": "executables and basically evaluate your firmware against that whitelist it also",
    "start": "728420",
    "end": "733439"
  },
  {
    "text": "allows you to generate that whitelist on your specific system whenever you need and then check it later so that's",
    "start": "733439",
    "end": "742529"
  },
  {
    "text": "how it works so for this is an example of detecting a hacking team UEFI rootkit they are not devote seven on mac efi but",
    "start": "742529",
    "end": "750629"
  },
  {
    "text": "the hacking team ufi rootkit on the pc systems with the UEFI firmer as you can",
    "start": "750629",
    "end": "756000"
  },
  {
    "text": "see that when checking again the firmware against the whitelist at the",
    "start": "756000",
    "end": "761339"
  },
  {
    "text": "the three extra components have been detected which are implement Auld by the",
    "start": "761339",
    "end": "766589"
  },
  {
    "text": "implant one of them is a rootkit loader the other one is efi application malicious",
    "start": "766589",
    "end": "771930"
  },
  {
    "text": "application and third one is is not really a malicious application that say it's an NTFS stixxay component which is",
    "start": "771930",
    "end": "778740"
  },
  {
    "text": "a very addictive driver for NTFS file system but it wasn't supposed to be present on that particular system that",
    "start": "778740",
    "end": "785250"
  },
  {
    "text": "that component has been brought by the by the rootkit so os's are getting",
    "start": "785250",
    "end": "793350"
  },
  {
    "text": "better and they have been introducing for example Microsoft have been have",
    "start": "793350",
    "end": "798840"
  },
  {
    "text": "introduced a significant change into the security architecture of Windows",
    "start": "798840",
    "end": "803900"
  },
  {
    "text": "starting Windows 10 and specifically in the Enterprise Edition when they've",
    "start": "803900",
    "end": "808920"
  },
  {
    "text": "introduced virtualization based security so in the past before Windows 10 we had a rather simple world we had Hardware",
    "start": "808920",
    "end": "815880"
  },
  {
    "text": "firmer OS kernel and TOS kernel and and use remote applications and they in Kay",
    "start": "815880",
    "end": "821340"
  },
  {
    "text": "then came Windows 10 with the virtualization base security and the world got a little bit more complicated",
    "start": "821340",
    "end": "826740"
  },
  {
    "text": "because the virtualization based security essentially uses hyper-v hypervisor with enabled VBS enabled",
    "start": "826740",
    "end": "833730"
  },
  {
    "text": "hypervisor and it puts your Windows 10 into a separate virtual machine which is",
    "start": "833730",
    "end": "840210"
  },
  {
    "text": "called normal world to our normal virtual machine which runs normal NT OS",
    "start": "840210",
    "end": "845970"
  },
  {
    "text": "kernel as well as user normal and us sorry normal user mode applications and",
    "start": "845970",
    "end": "852660"
  },
  {
    "text": "it also creates another virtual machine which is called secure world or a secure OBM that runs a smaller kernel called",
    "start": "852660",
    "end": "861210"
  },
  {
    "text": "secure kernel as well as running user mode processes called trust let's in so",
    "start": "861210",
    "end": "866880"
  },
  {
    "text": "called isolated user mode it's even it's even a it's even more complex right now",
    "start": "866880",
    "end": "875700"
  },
  {
    "text": "because the the the user mode essentially well the the user mode",
    "start": "875700",
    "end": "882300"
  },
  {
    "text": "within the secure VM runs there's a set of trust LEDs which essentially a second",
    "start": "882300",
    "end": "888480"
  },
  {
    "text": "part of certain processes running in the normal understand but the ones handling secrets",
    "start": "888480",
    "end": "895889"
  },
  {
    "text": "or or so on so for example LLC LS a process has been split into two one of",
    "start": "895889",
    "end": "901919"
  },
  {
    "text": "them is a normal say the other one is a LS a isolated trust let in the secure",
    "start": "901919",
    "end": "906989"
  },
  {
    "text": "tunnel so secure VM runs in a so-called virtual trust level one and the normal",
    "start": "906989",
    "end": "913229"
  },
  {
    "text": "normal Windows 10 runs in a virtual trust level zero so in addition to that",
    "start": "913229",
    "end": "919529"
  },
  {
    "text": "there are certain things that have have to be present in the in the hardware for",
    "start": "919529",
    "end": "926519"
  },
  {
    "text": "example the hardware has to have virtualization supported with the second level address constant translation as",
    "start": "926519",
    "end": "932309"
  },
  {
    "text": "well as the DMA protection through iommu vengeance so the trust model of this new",
    "start": "932309",
    "end": "940829"
  },
  {
    "text": "architecture may be may seem like a traditional hypervisor based trust model",
    "start": "940829",
    "end": "946350"
  },
  {
    "text": "where each virtual machine is isolated from other virtual machines by the way of hypervisor as well as the kind of",
    "start": "946350",
    "end": "953699"
  },
  {
    "text": "virtualization extensions of the processor so in this case your VM is isolated from the normal DM because you",
    "start": "953699",
    "end": "961109"
  },
  {
    "text": "don't want an exploit running in the Windows 10 to affect the trust let's or asker kernel in the secure vm so you",
    "start": "961109",
    "end": "968669"
  },
  {
    "text": "have a hypervisor in the trust model for a security m and you have obviously you have fermer and the hardware within the",
    "start": "968669",
    "end": "975720"
  },
  {
    "text": "trust boundary of of a secure vm so",
    "start": "975720",
    "end": "981109"
  },
  {
    "text": "looks looks as nothing unusual except that you are a normal VM which runs",
    "start": "981109",
    "end": "987749"
  },
  {
    "text": "Windows 10 is not a simple unprivileged guest it's actually root partition and",
    "start": "987749",
    "end": "994139"
  },
  {
    "text": "so the root partition has that property that the hypervisor allows it to access",
    "start": "994139",
    "end": "1000409"
  },
  {
    "text": "to all of the firmer and Hardware almost all of it not not really the same as",
    "start": "1000409",
    "end": "1005720"
  },
  {
    "text": "with partition on top of hyper-v in Prior versions of Windows but almost all",
    "start": "1005720",
    "end": "1010879"
  },
  {
    "text": "of access to to the firmer so which means that a single vulnerability in the",
    "start": "1010879",
    "end": "1018139"
  },
  {
    "text": "former can bypass all of the virtualization basic security protection",
    "start": "1018139",
    "end": "1023430"
  },
  {
    "text": "altogether and in addition to that that single vulnerability and the firmer is",
    "start": "1023430",
    "end": "1028709"
  },
  {
    "text": "exploitable from a normal guest from Windows 10 so in order to bypass all of",
    "start": "1028709",
    "end": "1034890"
  },
  {
    "text": "the VSM and this is what we do in this presentation we we just or an attacker",
    "start": "1034890",
    "end": "1040740"
  },
  {
    "text": "needs to find a vulnerability in the UEFI firmware or in the hardware and trigger that vulnerability from the",
    "start": "1040740",
    "end": "1046170"
  },
  {
    "text": "normal VM so let's examine Hardware protections BBS or virtualization they",
    "start": "1046170",
    "end": "1052470"
  },
  {
    "text": "security relies on one is where the first thing is the protections from the",
    "start": "1052470",
    "end": "1057960"
  },
  {
    "text": "DMA direct memory access attacks by malicious devices or by drivers monitors",
    "start": "1057960",
    "end": "1063900"
  },
  {
    "text": "drivers for devices that have demate capability so the virtualization basic um hyper-v enables iommu",
    "start": "1063900",
    "end": "1072780"
  },
  {
    "text": "and on Intel platforms there are two iommu engines there are two vtd engines want one for graphics and the other one",
    "start": "1072780",
    "end": "1079050"
  },
  {
    "text": "for every other device and so they're basically all enabled so you can see",
    "start": "1079050",
    "end": "1084210"
  },
  {
    "text": "that this is a kind of a screenshot of configuration of a um M you actually D",
    "start": "1084210",
    "end": "1089580"
  },
  {
    "text": "my demon a are a CPI table which shows two engines are enabled and there is a",
    "start": "1089580",
    "end": "1095040"
  },
  {
    "text": "memory mapped i/o space for both of them at the fed nine addresses and so those",
    "start": "1095040",
    "end": "1102620"
  },
  {
    "text": "memory mapped addresses for the BCD engines they have to be protected as well because you don't want a malicious",
    "start": "1102620",
    "end": "1109559"
  },
  {
    "text": "Windows 10 somehow disabled DMA a",
    "start": "1109559",
    "end": "1115140"
  },
  {
    "text": "protections or somehow tamper with them so they have to be protected and they are so the the two pages responsible for",
    "start": "1115140",
    "end": "1122220"
  },
  {
    "text": "configuring vtd engines in in Windows 10 with VBS they are not mapped where",
    "start": "1122220",
    "end": "1131250"
  },
  {
    "text": "actually they're mapped as read-only to the windows 10 and they're not really",
    "start": "1131250",
    "end": "1136860"
  },
  {
    "text": "mapped directly to the 2d vtd and why oh they are mapped to some emulated",
    "start": "1136860",
    "end": "1142650"
  },
  {
    "text": "memories so basically there is a way for BBS to emulate configuration of BTD so",
    "start": "1142650",
    "end": "1148200"
  },
  {
    "text": "which which means that BTL zero which is normal guest doesn't really have access to",
    "start": "1148200",
    "end": "1153660"
  },
  {
    "text": "configuration of the VTT engine so that's good what about all the other mio because every platform has lots of",
    "start": "1153660",
    "end": "1159870"
  },
  {
    "text": "configuration for lots of devices and including all the other memory mapped i/o ranges all of them are read writable",
    "start": "1159870",
    "end": "1167400"
  },
  {
    "text": "and mapped one to one identity mapping to windows them so which means that your",
    "start": "1167400",
    "end": "1174540"
  },
  {
    "text": "normal Windows 10 has full access to all of the MMI oh except the BCD one example",
    "start": "1174540",
    "end": "1181140"
  },
  {
    "text": "is the actual addresses vtd ranges and Maya ranges are stored in other mio they",
    "start": "1181140",
    "end": "1188100"
  },
  {
    "text": "have to be there for the vs relies on the hardware infirmary to lock them down",
    "start": "1188100",
    "end": "1193110"
  },
  {
    "text": "so that the software within the Windows 10 cannot relocate v TDM of Maya ranges",
    "start": "1193110",
    "end": "1199160"
  },
  {
    "text": "so what if firmer forgets to do that obviously there will be problems with",
    "start": "1199160",
    "end": "1206000"
  },
  {
    "text": "providing full access to my active windows down what about the PCI",
    "start": "1206000",
    "end": "1211110"
  },
  {
    "text": "configuration so you need to configure the PCI Express devices and that is done",
    "start": "1211110",
    "end": "1216180"
  },
  {
    "text": "through either legacy Ione mechanism through a CF HCFC ports or through",
    "start": "1216180",
    "end": "1221280"
  },
  {
    "text": "memory mapped PCI configuration space both are open except that the ports are actually intercepted by the VBS",
    "start": "1221280",
    "end": "1227730"
  },
  {
    "text": "hypervisor but it doesn't really do any filtering or blocking so basically it",
    "start": "1227730",
    "end": "1233520"
  },
  {
    "text": "allows you to configure PCI Express devices in the way you want and also the",
    "start": "1233520",
    "end": "1239430"
  },
  {
    "text": "the memory mapped PCI configuration mechanism is also opened and what",
    "start": "1239430",
    "end": "1246030"
  },
  {
    "text": "Windows 10 exploit within Windows 10 can reconfigure any device so why is it it is interesting I'll explain it in a few",
    "start": "1246030",
    "end": "1253350"
  },
  {
    "text": "moments but Rafal nastier also found that the memory map BC a configuration",
    "start": "1253350",
    "end": "1259350"
  },
  {
    "text": "is open in Windows 10 so how do we go about attacking this new architecture",
    "start": "1259350",
    "end": "1266060"
  },
  {
    "text": "well essentially like a like I said we just need to find a some vulnerability a",
    "start": "1266060",
    "end": "1271920"
  },
  {
    "text": "vulnerability exploitable from within the BTL 0 and the firmware so we decided",
    "start": "1271920",
    "end": "1278160"
  },
  {
    "text": "to use one of the vulnerabilities that I described it beginning of the presentation the one",
    "start": "1278160",
    "end": "1283570"
  },
  {
    "text": "that have been used by both seven dark matter makya eye implants we just use it",
    "start": "1283570",
    "end": "1290109"
  },
  {
    "text": "on PC platform with Windows 10 and it's a it's an s3 bit script vulnerability so",
    "start": "1290109",
    "end": "1297159"
  },
  {
    "text": "obviously we we use often we use chip",
    "start": "1297159",
    "end": "1302710"
  },
  {
    "text": "sack to find vulnerabilities or to investigate or to develop proof of concept so in this particular case the",
    "start": "1302710",
    "end": "1310779"
  },
  {
    "text": "bit script and I'll explain what it is the boot script is found in memory this",
    "start": "1310779",
    "end": "1316960"
  },
  {
    "text": "is the pointer to to that boot script structure in memory which has also happened to be mapped as readwrite to",
    "start": "1316960",
    "end": "1324729"
  },
  {
    "text": "the normal guest VT l0 v TL v TL 0 code",
    "start": "1324729",
    "end": "1330099"
  },
  {
    "text": "in the in the v TL 0 extended page tables that indicates that the Windows",
    "start": "1330099",
    "end": "1337749"
  },
  {
    "text": "10 can have access to it so what can happen in this case we know how to",
    "start": "1337749",
    "end": "1343779"
  },
  {
    "text": "exploit that vulnerability we way we have done that so basically they will in",
    "start": "1343779",
    "end": "1349450"
  },
  {
    "text": "order to exploit that vulnerability from within Windows 10 the Windows 10 the",
    "start": "1349450",
    "end": "1355989"
  },
  {
    "text": "malicious code needs to modify that structure in memory modify it and that",
    "start": "1355989",
    "end": "1361149"
  },
  {
    "text": "structure contains a set of up codes that will be executed by the firmer and",
    "start": "1361149",
    "end": "1366940"
  },
  {
    "text": "modify one of the up codes or adds one over one of the up codes with the payload that will get executed by the",
    "start": "1366940",
    "end": "1373269"
  },
  {
    "text": "firmer when the firmer resumes from sleep state from suspend to RAM why this",
    "start": "1373269",
    "end": "1379269"
  },
  {
    "text": "boot script is used by the firmer it's it's used by most of the fiber based firmer today",
    "start": "1379269",
    "end": "1385629"
  },
  {
    "text": "the reason the firmer uses it is because when you boot the system from scratch you need to configure your platform and",
    "start": "1385629",
    "end": "1392710"
  },
  {
    "text": "you need to log it do a lot of configuration and that takes long and so in order to speed up that process when",
    "start": "1392710",
    "end": "1398049"
  },
  {
    "text": "you go to sleep to suspense your RAM and then resume from sleep the firmer records all of those actions into that",
    "start": "1398049",
    "end": "1404139"
  },
  {
    "text": "boot script table and puts that in memory so when the system resumes from sleep it actually reads that structure",
    "start": "1404139",
    "end": "1410889"
  },
  {
    "text": "in read set and execute every app code from within that structure including up coats that allow firmer and to execute",
    "start": "1410889",
    "end": "1416930"
  },
  {
    "text": "arbitrary code so that's what we do essentially we modify the bit script",
    "start": "1416930",
    "end": "1422150"
  },
  {
    "text": "table we add the up code that executes our malicious payload and after resuming",
    "start": "1422150",
    "end": "1427730"
  },
  {
    "text": "from sleep the the firmer eggs gets our payload that does something so what",
    "start": "1427730",
    "end": "1433700"
  },
  {
    "text": "exactly we could do in that payload so at that point because we are executing before hypervisor will with all of the",
    "start": "1433700",
    "end": "1440510"
  },
  {
    "text": "hypervisor and secure VM and all the secrets in memory we can directly access that memory of a scurvy em or scare",
    "start": "1440510",
    "end": "1447320"
  },
  {
    "text": "kernel where isolated user mode trust let's anything we could we could do that from within the payload executing at the",
    "start": "1447320",
    "end": "1452900"
  },
  {
    "text": "permanent level but that's that that's writing a lot of code in the payload at the Fermi level so that's a little bit",
    "start": "1452900",
    "end": "1459140"
  },
  {
    "text": "more complex so instead what we do is we in the payload we find second level",
    "start": "1459140",
    "end": "1466340"
  },
  {
    "text": "again adjust some translation structures in memory and we find virtual machine control structures in memory for both",
    "start": "1466340",
    "end": "1473260"
  },
  {
    "text": "Windows 10 VM as well as the secure VM and we add entries to the normal windows",
    "start": "1473260",
    "end": "1481700"
  },
  {
    "text": "10 extended page table hierarchy we add entries that map all of the memory what",
    "start": "1481700",
    "end": "1487160"
  },
  {
    "text": "that means or what that gives us is when the system finishes booting malware executing within Windows 10 has full",
    "start": "1487160",
    "end": "1494300"
  },
  {
    "text": "access to memory including to the memory of the hypervisor and to the memory of the secure VM so from that point on we",
    "start": "1494300",
    "end": "1502580"
  },
  {
    "text": "can do exploits from within Windows 10 we don't have to write an exploit at the",
    "start": "1502580",
    "end": "1508430"
  },
  {
    "text": "Fermi level so what exactly we would do we need to understand how the memory is",
    "start": "1508430",
    "end": "1514640"
  },
  {
    "text": "partitioned by the hypervisor first in order to even find structures or code in",
    "start": "1514640",
    "end": "1519920"
  },
  {
    "text": "the secure VM because there was a those are coding in a different virtual machine we don't we have no visibility",
    "start": "1519920",
    "end": "1525470"
  },
  {
    "text": "well we don't know where those structures are we need to find them so in order to do we need to reconstruct",
    "start": "1525470",
    "end": "1531410"
  },
  {
    "text": "all this memory map we could do we could do that in two approaches one and we've",
    "start": "1531410",
    "end": "1536930"
  },
  {
    "text": "we've done with both approaches both work have disadvantages and and and good",
    "start": "1536930",
    "end": "1544330"
  },
  {
    "text": "things about the but both approaches so one of them is a top-to-bottom approach where we find both be tl0 and VTL one",
    "start": "1544330",
    "end": "1550570"
  },
  {
    "text": "virtual machine control structures in memory and we find pointers to the second level address translation",
    "start": "1550570",
    "end": "1557230"
  },
  {
    "text": "structures from within those virtual machine control structures so that",
    "start": "1557230",
    "end": "1562539"
  },
  {
    "text": "didn't work all the time and also it only finds virtual machine control structures for active guests not for the",
    "start": "1562539",
    "end": "1568809"
  },
  {
    "text": "ones that have been before so there is another approach called the bottom-to-top approach where we",
    "start": "1568809",
    "end": "1575049"
  },
  {
    "text": "essentially find all of the extended page table hierarchy from the first EPT",
    "start": "1575049",
    "end": "1581440"
  },
  {
    "text": "entries by doing sanity checking on EPT entry let's say address bits or reserved",
    "start": "1581440",
    "end": "1587260"
  },
  {
    "text": "bits we find all the pages containing those EPT entries and then we find pointers to inside pages inside page",
    "start": "1587260",
    "end": "1594880"
  },
  {
    "text": "directory pages and then up to the actual EPT pointer and from that apt",
    "start": "1594880",
    "end": "1601419"
  },
  {
    "text": "pointer we can find vm control structures as well so kind of the the other way around the benefit of that",
    "start": "1601419",
    "end": "1607990"
  },
  {
    "text": "approach is that you don't we don't just find active EPT hierarchies for two",
    "start": "1607990",
    "end": "1613990"
  },
  {
    "text": "active guests but we actually find more EPT hierarchies that might have been used by the hypervisor before so for",
    "start": "1613990",
    "end": "1620740"
  },
  {
    "text": "example the hypervisor could be switching paging for the same guests depending on certain conditions so yeah",
    "start": "1620740",
    "end": "1629710"
  },
  {
    "text": "so then one once we recover all the memory map for the for the PBS how EBS",
    "start": "1629710",
    "end": "1637659"
  },
  {
    "text": "partitions memory we can find a secure kernel so secure kernel is loaded at let's say address X it's a host physical",
    "start": "1637659",
    "end": "1644740"
  },
  {
    "text": "address that real physical address and our payload mapped entire physical",
    "start": "1644740",
    "end": "1650200"
  },
  {
    "text": "memory but it didn't map it from 0 edges that mapped it from 256 gigabyte addresses in the guest physical memory",
    "start": "1650200",
    "end": "1657130"
  },
  {
    "text": "of Windows 10 BM so this is where we try to look for a secure kernel we're just looking for the signature of the secure",
    "start": "1657130",
    "end": "1663549"
  },
  {
    "text": "kernel dot exe and we find it in in",
    "start": "1663549",
    "end": "1668840"
  },
  {
    "text": "at a specific address which is 256 gigabyte Plus that X so then we can map",
    "start": "1668840",
    "end": "1674870"
  },
  {
    "text": "we can we can see which apt hierarchy contains that address and basically",
    "start": "1674870",
    "end": "1680930"
  },
  {
    "text": "understand where which VM the secure kernel ability exhibit longs to and not",
    "start": "1680930",
    "end": "1686210"
  },
  {
    "text": "surprisingly the the security secur Colonel eggsy binary is mapped into a",
    "start": "1686210",
    "end": "1695020"
  },
  {
    "text": "two megabyte page of secure VM and it's",
    "start": "1695020",
    "end": "1701390"
  },
  {
    "text": "also mapped as read write executable so secure VM has full access free write and execute access to to the kernel binary",
    "start": "1701390",
    "end": "1708940"
  },
  {
    "text": "in addition to that because we have full access now to use a secure kernel we also can modify it and you can see that",
    "start": "1708940",
    "end": "1715250"
  },
  {
    "text": "we have just changed just for demo purposes we just changed some of the some of the up codes in the in the",
    "start": "1715250",
    "end": "1721040"
  },
  {
    "text": "secure kernel with a TR string so at that point we have everything but we",
    "start": "1721040",
    "end": "1727370"
  },
  {
    "text": "don't have a anything beyond so we haven't recovered credentials so you may",
    "start": "1727370",
    "end": "1735350"
  },
  {
    "text": "ask but this is a bit scrip for mobility so newer systems started fixing the bit",
    "start": "1735350",
    "end": "1742550"
  },
  {
    "text": "script owner abilities and the firmer so does that mean that we're actually living in that perfect world where firm",
    "start": "1742550",
    "end": "1750320"
  },
  {
    "text": "is protected so what we've done recently as I mentioned we've downloaded 26,000",
    "start": "1750320",
    "end": "1758810"
  },
  {
    "text": "images with parsed 14,000 images and so what we found is that we have also",
    "start": "1758810",
    "end": "1765380"
  },
  {
    "text": "scanned those images for specific vulnerabilities and what we found is that there are certain manufacturers",
    "start": "1765380",
    "end": "1772370"
  },
  {
    "text": "that have thousands of images indicating that the models those images correspond",
    "start": "1772370",
    "end": "1779000"
  },
  {
    "text": "to the the systems that those images are intended for our are actually don't have",
    "start": "1779000",
    "end": "1785540"
  },
  {
    "text": "any protection of the firmware or for a sign firm update so basically we found",
    "start": "1785540",
    "end": "1791060"
  },
  {
    "text": "that MSI for example has almost 1500 firmware update images corresponding to",
    "start": "1791060",
    "end": "1797510"
  },
  {
    "text": "almost hundred modal's that lack basic memory protection gigabyte same thing almost 250 models",
    "start": "1797510",
    "end": "1805570"
  },
  {
    "text": "that lack basic former protections even the most recent systems so the bit crepe",
    "start": "1805570",
    "end": "1813860"
  },
  {
    "text": "is not everything there are still a lot of vulnerabilities a lot of vulnerabilities in the firmer including",
    "start": "1813860",
    "end": "1819529"
  },
  {
    "text": "on the most recent systems so with that I'm switching 300 to explain other",
    "start": "1819529",
    "end": "1826549"
  },
  {
    "text": "attack vectors against VBS so what other vulnerabilities could we use to get the",
    "start": "1826549",
    "end": "1834200"
  },
  {
    "text": "access to the memory how bad bad mentor pointers and particularly SMI pointers",
    "start": "1834200",
    "end": "1841700"
  },
  {
    "text": "so maybe a threats the Cal 0 access to the b2 port an i/o trap ports so it can",
    "start": "1841700",
    "end": "1850460"
  },
  {
    "text": "say video 0 can generate software SM eyes system management interrupt so it",
    "start": "1850460",
    "end": "1856909"
  },
  {
    "text": "can exploit a vulnerability in SMI handler to bypass the protections so",
    "start": "1856909",
    "end": "1866750"
  },
  {
    "text": "it's particularly on systems B's relocatable SMM connect communication",
    "start": "1866750",
    "end": "1872750"
  },
  {
    "text": "buffer or the normal world has access to",
    "start": "1872750",
    "end": "1880460"
  },
  {
    "text": "the cpt tables and can directly call",
    "start": "1880460",
    "end": "1884980"
  },
  {
    "text": "trigger SMI drops so can change the communication buffer pointer inspect a",
    "start": "1885970",
    "end": "1893179"
  },
  {
    "text": "book in just apply the pointer to the parameter to the handler and the hell well know nothing about the hypervisor",
    "start": "1893179",
    "end": "1901880"
  },
  {
    "text": "or skewer VM and it will be happy to read the right memory layer so please",
    "start": "1901880",
    "end": "1910929"
  },
  {
    "text": "similar issue is my bar so as you said say Express config space is open to",
    "start": "1912070",
    "end": "1917809"
  },
  {
    "text": "normal world so many devices we use a memory bars are so and remote can",
    "start": "1917809",
    "end": "1925250"
  },
  {
    "text": "reprogram them to relocate my bars over web there is a European memory or hypervisor",
    "start": "1925250",
    "end": "1931460"
  },
  {
    "text": "memory and again invoking as a my family that is communicating to the device will",
    "start": "1931460",
    "end": "1937149"
  },
  {
    "text": "trigger it to read or write memory location so we do have a read/write",
    "start": "1937149",
    "end": "1942619"
  },
  {
    "text": "primitive to access memory this one was described by a foul in his",
    "start": "1942619",
    "end": "1949850"
  },
  {
    "text": "research published last year so this is awakened early which see used when sis",
    "start": "1949850",
    "end": "1957440"
  },
  {
    "text": "system wakes up from the s3 sleep state and it's the first call that's executed",
    "start": "1957440",
    "end": "1965139"
  },
  {
    "text": "after the firmware so and some sister he found that some systems actually caches",
    "start": "1966309",
    "end": "1974059"
  },
  {
    "text": "the pointer from the CPI table where it's normally located to some memory that is as well accessible to the normal",
    "start": "1974059",
    "end": "1982789"
  },
  {
    "text": "world and use that pointer instead so the normal world can change this is the",
    "start": "1982789",
    "end": "1988279"
  },
  {
    "text": "pointer to its own malicious code that we will do like a stuff even before as a",
    "start": "1988279",
    "end": "1995119"
  },
  {
    "text": "hypervisor either gets control so effectively bypassing all the protection",
    "start": "1995119",
    "end": "2001109"
  },
  {
    "text": "introduced by hypervisor and you find my rules so normal wall has also access to",
    "start": "2001109",
    "end": "2010989"
  },
  {
    "text": "the in five variables runtime interface so can read and write",
    "start": "2010989",
    "end": "2017049"
  },
  {
    "text": "random variables again we found that some service",
    "start": "2017049",
    "end": "2022830"
  },
  {
    "text": "store printers to memory in the variables and they stole therefore",
    "start": "2022830",
    "end": "2029710"
  },
  {
    "text": "reason so they read the write memory and our follow us found that the VBS itself",
    "start": "2029710",
    "end": "2036220"
  },
  {
    "text": "uses if I variable to store the encryption key for the hibernation file on the system where there is no TPM",
    "start": "2036220",
    "end": "2042159"
  },
  {
    "text": "available so you can extract the key gets a reputation file and decrypt the",
    "start": "2042159",
    "end": "2047470"
  },
  {
    "text": "memory and get all the secrets mmm what's strange enough whose paper wiser",
    "start": "2047470",
    "end": "2053500"
  },
  {
    "text": "doesn't allow you some more access so the status register tells us that tomorrow",
    "start": "2053500",
    "end": "2058898"
  },
  {
    "text": "are supported but when you try to assess any similar MSR you'll get an exception",
    "start": "2058899",
    "end": "2064358"
  },
  {
    "text": "and we implemented a background for that inch IPSec so what can we do next yeah",
    "start": "2064359",
    "end": "2076929"
  },
  {
    "text": "so that I'm walking over tomorrow is a little bit confusing because more it",
    "start": "2076929",
    "end": "2082299"
  },
  {
    "text": "feels more like blocking Calgary easier so that the exploits cannot find where",
    "start": "2082299",
    "end": "2089108"
  },
  {
    "text": "the SMM memory is but there are so many ways to find where as memory is so that it's good",
    "start": "2089109",
    "end": "2094569"
  },
  {
    "text": "it doesn't really protect anything so what exactly can we do next well now we have full access to virtual to the",
    "start": "2094569",
    "end": "2100809"
  },
  {
    "text": "secure virtual machine where the secure kernel we can patch trust let's and we have explored how to find your kernel in",
    "start": "2100809",
    "end": "2108130"
  },
  {
    "text": "memory and so on so what else can we do well obviously we can we can bypass device guard with kernel code integrity",
    "start": "2108130",
    "end": "2115059"
  },
  {
    "text": "hypervisor based code integrity and we can modify arbitrary kernel structures and we understand there's nothing that",
    "start": "2115059",
    "end": "2121299"
  },
  {
    "text": "we cannot do within the stem kernel at this point we can install a hypervisor",
    "start": "2121299",
    "end": "2126339"
  },
  {
    "text": "backdoor rootkit in the hyper-v so kind of like blue pill on Windows 10 we can",
    "start": "2126339",
    "end": "2132670"
  },
  {
    "text": "also allow rogue devices or compromise devices to do DMA at that point and we",
    "start": "2132670",
    "end": "2138010"
  },
  {
    "text": "can backdoor a software based virtual TPM trust LEDs which is an exercise for on Windows servers which is an exercise",
    "start": "2138010",
    "end": "2144849"
  },
  {
    "text": "for future but so let's get you the real world what we actually can do at this",
    "start": "2144849",
    "end": "2151000"
  },
  {
    "text": "point that would impact the actual security of the systems so one of the one of the things that virtualization",
    "start": "2151000",
    "end": "2157960"
  },
  {
    "text": "based security introduces is a protection of ntlm domain credentials so",
    "start": "2157960",
    "end": "2163450"
  },
  {
    "text": "that the more when it infects your enterprise system it cannot do the lateral movements in the enterprise it",
    "start": "2163450",
    "end": "2169180"
  },
  {
    "text": "cannot recover those credentials so they are protected by the I'll say isolated trust layer in the secure kernel so what",
    "start": "2169180",
    "end": "2177190"
  },
  {
    "text": "we did first is we actually try to find all of the NT hashes in memory so in in",
    "start": "2177190",
    "end": "2183910"
  },
  {
    "text": "this case we've we've scanned all of the all of the memory of the scarecrow",
    "start": "2183910",
    "end": "2190789"
  },
  {
    "text": "and we found the known and T hash for our known credentials we found how its",
    "start": "2190789",
    "end": "2196819"
  },
  {
    "text": "allocated within the secure VM and also found which IBM it maps to so not",
    "start": "2196819",
    "end": "2204199"
  },
  {
    "text": "surprisingly it maps to the secure secure VM in the EPT is at the bottom and we cannot directly access it from",
    "start": "2204199",
    "end": "2210439"
  },
  {
    "text": "within the windows town so the screenshot at the at the at the at the very bottom shows that we don't have",
    "start": "2210439",
    "end": "2216259"
  },
  {
    "text": "access so through chipset we've tried to access that address with where the NT",
    "start": "2216259",
    "end": "2221299"
  },
  {
    "text": "hash is and we couldn't so it got blocked so because we have actually known that credentials we could we could",
    "start": "2221299",
    "end": "2227630"
  },
  {
    "text": "find it but how would we do the attacker doesn't know the credentials its what the attacker needs to get so how would",
    "start": "2227630",
    "end": "2233630"
  },
  {
    "text": "they do that so we've implemented a an interesting strategy so we've first we've searched",
    "start": "2233630",
    "end": "2240339"
  },
  {
    "text": "BMC SVM control structures we've recovered all the extended page tables for VTL 0 and ETL 1 for both secure VM",
    "start": "2240339",
    "end": "2248029"
  },
  {
    "text": "and as well as Windows 10 p.m. and we subtracted sub sorry sub we subtracted",
    "start": "2248029",
    "end": "2253429"
  },
  {
    "text": "the VTL one we bgl zero pages from VTL 1 pages essentially leaving us with only",
    "start": "2253429",
    "end": "2262339"
  },
  {
    "text": "about 50 to 60 megabytes of pages that we need to scan instead of gigabytes of",
    "start": "2262339",
    "end": "2268699"
  },
  {
    "text": "pages that we would need to scan and those are pages mapped only to the secure VM so then we've implemented a",
    "start": "2268699",
    "end": "2275989"
  },
  {
    "text": "very simple kind of heuristic search strategy we've been looking for high",
    "start": "2275989",
    "end": "2281239"
  },
  {
    "text": "entropy 16 bytes 16 byte sequences surrounded by a specific 0 fixed bytes",
    "start": "2281239",
    "end": "2288369"
  },
  {
    "text": "as we've observed in in this Oh as we've",
    "start": "2288369",
    "end": "2294079"
  },
  {
    "text": "observed how secure kernel allocates that a specific chunk where it stores an",
    "start": "2294079",
    "end": "2299419"
  },
  {
    "text": "T hash and so the that search gave us about 60 candidates candidates of NT",
    "start": "2299419",
    "end": "2308539"
  },
  {
    "text": "hashes that will candidate and in C hashes and notice that we we're not really reading any persistent storage",
    "start": "2308539",
    "end": "2315799"
  },
  {
    "text": "here so we're not extracting any hashes from file system or from registry we're",
    "start": "2315799",
    "end": "2321289"
  },
  {
    "text": "actually extracting and is directly from memory where they were just left off for a few seconds or",
    "start": "2321289",
    "end": "2326600"
  },
  {
    "text": "sometimes few minutes by the by the secure kernel and we can find not just in T hash we can find in CL MV - hashes",
    "start": "2326600",
    "end": "2333560"
  },
  {
    "text": "as well but those were stored but for much shorter period of time if we don't see the hash then we can force that hash",
    "start": "2333560",
    "end": "2341420"
  },
  {
    "text": "into memory by just doing that use from from Windows 10 and that would essentially force the Windows 10 to log",
    "start": "2341420",
    "end": "2348560"
  },
  {
    "text": "into the main chair and and would force the secure VM to allocate a chunk of memory and put the NC hash into that",
    "start": "2348560",
    "end": "2355640"
  },
  {
    "text": "memory so we can find so once once we found those approximately 60 candidate",
    "start": "2355640",
    "end": "2361010"
  },
  {
    "text": "and T hashes we can just brute force them and try to log in to the domain resource with every candidate and not",
    "start": "2361010",
    "end": "2368900"
  },
  {
    "text": "surprisingly that actually that actually strategy that works so this is this is",
    "start": "2368900",
    "end": "2377390"
  },
  {
    "text": "the the actual search we find we and we run the search in multiple iterations so",
    "start": "2377390",
    "end": "2384020"
  },
  {
    "text": "first we find 63 candidates then we find you the the one more candidate that is",
    "start": "2384020",
    "end": "2390020"
  },
  {
    "text": "not part of those 63-62 for total candidates and then we try to brute force with SMD plan from core security",
    "start": "2390020",
    "end": "2397609"
  },
  {
    "text": "we try to brute force there were 64 candidate hashes and login to the to the",
    "start": "2397609",
    "end": "2402980"
  },
  {
    "text": "domain domain chair and not surprisingly we actually are able to do that but",
    "start": "2402980",
    "end": "2410350"
  },
  {
    "text": "brute forcing hashes is not really the best strategy so can we do a a better",
    "start": "2410350",
    "end": "2416600"
  },
  {
    "text": "exploit can we actually recover everything offline because everything we need is on that system and we have full",
    "start": "2416600",
    "end": "2422330"
  },
  {
    "text": "access to it so it's a matter of technique to just find where the keys are and then create a decrypted blobs",
    "start": "2422330",
    "end": "2427940"
  },
  {
    "text": "and so on so can we do that offline so this is a andrey will just describe how we do that next run dominicans it",
    "start": "2427940",
    "end": "2438920"
  },
  {
    "text": "actually doesn't help because it has credentials and people that it doesn't know what to do is that so then we",
    "start": "2438920",
    "end": "2445850"
  },
  {
    "text": "decided to use our superpower debug the other side across that so",
    "start": "2445850",
    "end": "2455230"
  },
  {
    "text": "surface can be debunked at the same way as a normal user mode applications but there is a policy embedded into the",
    "start": "2455230",
    "end": "2462290"
  },
  {
    "text": "image and image silence so that defines as a image these rocks can be in a debug announcer so for this process it's the",
    "start": "2462290",
    "end": "2470270"
  },
  {
    "text": "debug is not allowed but there is a function that insecure criminals that",
    "start": "2470270",
    "end": "2475640"
  },
  {
    "text": "checks the policy and tells the system is the process can be a wall so what we",
    "start": "2475640",
    "end": "2481100"
  },
  {
    "text": "did we found this function in Carol I can write treat and we replace just a",
    "start": "2481100",
    "end": "2487340"
  },
  {
    "text": "few bytes there so instead of returns a result on one all the time so the back",
    "start": "2487340",
    "end": "2494060"
  },
  {
    "text": "is always allowed and after that we can connect the debugger to tested process",
    "start": "2494060",
    "end": "2500840"
  },
  {
    "text": "and we found this interesting function that's it's actually the function that had decrypts their credentials and as",
    "start": "2500840",
    "end": "2508490"
  },
  {
    "text": "you can see there's an input buffers the",
    "start": "2508490",
    "end": "2513710"
  },
  {
    "text": "first parameter and I've set at offset to a where is a some data data blob it",
    "start": "2513710",
    "end": "2519950"
  },
  {
    "text": "corresponds to the data set mimikatz shows us so so quick demo just be run so",
    "start": "2519950",
    "end": "2533060"
  },
  {
    "text": "i've in DB g and try to debug the process right away and we got 79 because",
    "start": "2533060",
    "end": "2538970"
  },
  {
    "text": "we're not allowed to do it then we run the script that will find a functional",
    "start": "2538970",
    "end": "2545720"
  },
  {
    "text": "memory in patches and after that we try the second time and this time it can",
    "start": "2545720",
    "end": "2553880"
  },
  {
    "text": "connect but the process doesn't respond to the debugging attempt so we need to wait for 30 seconds so after that we",
    "start": "2553880",
    "end": "2562190"
  },
  {
    "text": "will set up a breakpoint to that function I will see",
    "start": "2562190",
    "end": "2568300"
  },
  {
    "text": "how the data is decrypted and without that actual decryption is done not in",
    "start": "2569039",
    "end": "2576069"
  },
  {
    "text": "the trust wet but in Colonel so finally the function calls the system service",
    "start": "2576069",
    "end": "2581799"
  },
  {
    "text": "that goes into trust into secure kernel and secure cargo holds a key so here we",
    "start": "2581799",
    "end": "2587380"
  },
  {
    "text": "set a breakpoint then we go outside to",
    "start": "2587380",
    "end": "2594729"
  },
  {
    "text": "share the source the credentials we need to authenticate the request so we go to this function that you actually decrypt",
    "start": "2594729",
    "end": "2603009"
  },
  {
    "text": "the credentials and gives us the data it's a encrypted blob then we do some",
    "start": "2603009",
    "end": "2609579"
  },
  {
    "text": "windbg magic to store the memory pointer to the temporary variable so we can use",
    "start": "2609579",
    "end": "2615430"
  },
  {
    "text": "it later to check the buffer how changed",
    "start": "2615430",
    "end": "2619140"
  },
  {
    "text": "so the store then we check that we store the as the right one down the same",
    "start": "2621239",
    "end": "2626950"
  },
  {
    "text": "memory again then step over the function so the function is executed and check",
    "start": "2626950",
    "end": "2632380"
  },
  {
    "text": "the memory and we have the decrypted NT cache and not a line of zeros we will",
    "start": "2632380",
    "end": "2640299"
  },
  {
    "text": "have the sha-1 hash of the password so",
    "start": "2640299",
    "end": "2646229"
  },
  {
    "text": "okay now we have you know house it's the cryptid so we need to go to the kernel",
    "start": "2646979",
    "end": "2653019"
  },
  {
    "text": "and analyze what's house encryption works so what we found this structure the mobs that are stored in the normal",
    "start": "2653019",
    "end": "2660400"
  },
  {
    "text": "water and the dispatch to the functions are defeated so in yellow it's a KDF",
    "start": "2660400",
    "end": "2665769"
  },
  {
    "text": "context it's say two random bytes that's used to derive a key it's actually used to decrypt the credentials",
    "start": "2665769",
    "end": "2672549"
  },
  {
    "text": "authentication pack is a tag produced by the authentication authenticated encryption kernel is complicated",
    "start": "2672549",
    "end": "2680170"
  },
  {
    "text": "direction so it's it doesn't just encrypt data it's it also produces tags",
    "start": "2680170",
    "end": "2686079"
  },
  {
    "text": "that can be used to control the integrity of the data and the authenticated that data which has some",
    "start": "2686079",
    "end": "2692380"
  },
  {
    "text": "flexed secuence and strings which also into the",
    "start": "2692380",
    "end": "2697420"
  },
  {
    "text": "application tag and decrypt the data you saw it so the encryption key the encryption key",
    "start": "2697420",
    "end": "2703540"
  },
  {
    "text": "is derived from the master key or boot key because in generated every time system starts in just a 32 random bytes",
    "start": "2703540",
    "end": "2711360"
  },
  {
    "text": "then the key deviation function SP 800 108 EC used H max sha 256 is used as a",
    "start": "2711360",
    "end": "2719590"
  },
  {
    "text": "pseudo-random function in its encounter mod so here you can see that this PDF",
    "start": "2719590",
    "end": "2725500"
  },
  {
    "text": "context is used every time so you have every time you have the different key",
    "start": "2725500",
    "end": "2730870"
  },
  {
    "text": "from the at master key and this recovered algorithm that is used to",
    "start": "2730870",
    "end": "2739120"
  },
  {
    "text": "actually generate the key second caption key and which is later used in the SGC M",
    "start": "2739120",
    "end": "2746800"
  },
  {
    "text": "authenticated encryption as a career",
    "start": "2746800",
    "end": "2752320"
  },
  {
    "text": "criminal use nonce and IV all zeros they all 12 bytes of zeros so the supplies",
    "start": "2752320",
    "end": "2761290"
  },
  {
    "text": "the dedicated data the tag all the stuff to the different function I won't miss",
    "start": "2761290",
    "end": "2767470"
  },
  {
    "text": "the key the encrypted data and after that it tells us if it's encrypted",
    "start": "2767470",
    "end": "2774250"
  },
  {
    "text": "correctly it calculates a new tag compares to the original tag if ever",
    "start": "2774250",
    "end": "2779470"
  },
  {
    "text": "since file will get data it's not with just to get an error so how we can find",
    "start": "2779470",
    "end": "2785860"
  },
  {
    "text": "the boot key we did the same way as we enter hashes we just get the dedicated",
    "start": "2785860",
    "end": "2792400"
  },
  {
    "text": "memory to VTA one search for the 32 byte",
    "start": "2792400",
    "end": "2798540"
  },
  {
    "text": "Hydra P sequences like the found around",
    "start": "2798540",
    "end": "2803940"
  },
  {
    "text": "50,000 of them and then just try to decrypt the blobs that we got from",
    "start": "2803940",
    "end": "2809200"
  },
  {
    "text": "maquettes here is demo so we have a",
    "start": "2809200",
    "end": "2814360"
  },
  {
    "text": "autist machine it's a personally in the domain with a recent",
    "start": "2814360",
    "end": "2821310"
  },
  {
    "text": "Windows 10 Enterprise RS true installed so first we need to exploit the",
    "start": "2821310",
    "end": "2826800"
  },
  {
    "text": "vulnerability it's an s3 or no secular but firstly your are Democrats to get",
    "start": "2826800",
    "end": "2833100"
  },
  {
    "text": "that show actually the boss so we have the two why not use it so it's so we can",
    "start": "2833100",
    "end": "2841470"
  },
  {
    "text": "spy produces a work files that we will use later so you can see the robots of",
    "start": "2841470",
    "end": "2852030"
  },
  {
    "text": "encrypting blobs here so despite the fact that we see a lot of European data",
    "start": "2852030",
    "end": "2857940"
  },
  {
    "text": "as a plain text data is actually quite a few so because they use a different key",
    "start": "2857940",
    "end": "2865080"
  },
  {
    "text": "every time you have different blocks for all the same plaintext data so after",
    "start": "2865080",
    "end": "2873270"
  },
  {
    "text": "that living around the s3 boo script exploit to open up the physical memory",
    "start": "2873270",
    "end": "2879390"
  },
  {
    "text": "to the guest does normal world it's also",
    "start": "2879390",
    "end": "2884400"
  },
  {
    "text": "quite the soup is modified so we will have go to sleep their makeup",
    "start": "2884400",
    "end": "2892730"
  },
  {
    "text": "so our payload gets executed it opens up",
    "start": "2901059",
    "end": "2907119"
  },
  {
    "text": "the memory so we run another script that actually we recovers a memory mapping and you get all the key candidates and",
    "start": "2907119",
    "end": "2916390"
  },
  {
    "text": "try to decrypt the data",
    "start": "2916390",
    "end": "2919199"
  },
  {
    "text": "so now it recovers all the memory man so yeah it found to be MCS structures for",
    "start": "2941410",
    "end": "2946510"
  },
  {
    "text": "video 100 0 now it tries to do the reverse memory mapping took out the",
    "start": "2946510",
    "end": "2952720"
  },
  {
    "text": "memory map and find the memory and after",
    "start": "2952720",
    "end": "2960730"
  },
  {
    "text": "that it parses a work file produced by maquettes and trying to find their the key take",
    "start": "2960730",
    "end": "2974860"
  },
  {
    "text": "some time but not too much",
    "start": "2974860",
    "end": "2978150"
  },
  {
    "text": "so now it's surgeons are planned to be strings so you can say we found the password the one string that's probably",
    "start": "2983520",
    "end": "2990750"
  },
  {
    "text": "the password for the domenica machine Dominica and we and the last one is hashes NT cash and sha-1 hash so we",
    "start": "2990750",
    "end": "2999570"
  },
  {
    "text": "attack on stage sorry so and medications okay I don't have",
    "start": "2999570",
    "end": "3010010"
  },
  {
    "text": "time to do that to talk about the indeed so alright so so yeah thank you guys",
    "start": "3010010",
    "end": "3017150"
  },
  {
    "text": "if anyone has questions find us there the question Q&A room we'll be able to",
    "start": "3017150",
    "end": "3022369"
  },
  {
    "text": "answer or try it thank you",
    "start": "3022369",
    "end": "3027250"
  }
]