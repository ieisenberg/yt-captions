[
  {
    "start": "0",
    "end": "49000"
  },
  {
    "text": "okay good afternoon but thank you for coming to our talk we talk about crypto but that don't be scared there's not you",
    "start": "30",
    "end": "5970"
  },
  {
    "text": "know no questions no not scary stuff so I'm super happy to be here in black",
    "start": "5970",
    "end": "10980"
  },
  {
    "text": "again it's very quickly about us he done us we come from Sweden gopher company",
    "start": "10980",
    "end": "17520"
  },
  {
    "text": "called school√≠s key security and we do control stuff with research consulting code review so you might know me for",
    "start": "17520",
    "end": "23189"
  },
  {
    "text": "some quit up crypto stuff I did I talked at blackhat last year and they've been infiltrated and I'm here with yo lon I",
    "start": "23189",
    "end": "30029"
  },
  {
    "text": "would heed his master status with me and it's his very first conference talk so he's been doing a good job in his",
    "start": "30029",
    "end": "35489"
  },
  {
    "text": "master's days I'm sure he could do a good job today again so it's very small",
    "start": "35489",
    "end": "40920"
  },
  {
    "text": "commercial plug here is a book recently it's the paper cup is not out yet but you can order it on no starch just an",
    "start": "40920",
    "end": "48780"
  },
  {
    "text": "amazing editor by the way okay so today we've start about you know saying what",
    "start": "48780",
    "end": "55559"
  },
  {
    "start": "49000",
    "end": "49000"
  },
  {
    "text": "what does it mean to test cryptography cryptographic software select software",
    "start": "55559",
    "end": "61230"
  },
  {
    "text": "but there are some you know particularities specific to the crypto and with personally what we call",
    "start": "61230",
    "end": "66479"
  },
  {
    "text": "differential for things so that's a terms I introduced like maybe a year ago I turned out a bit differently than what",
    "start": "66479",
    "end": "71520"
  },
  {
    "text": "I expected but I will give you all the details and then we'll present a tour the tool that we are going to release",
    "start": "71520",
    "end": "77189"
  },
  {
    "text": "today that which you just already radius car was a bit lazy right we didn't get up like one hour ago ice called CDF for",
    "start": "77189",
    "end": "84270"
  },
  {
    "text": "crypto a differential fuzzing will tell you how it works that kind of tested doors and will do a small demo before talking about the",
    "start": "84270",
    "end": "90750"
  },
  {
    "start": "90000",
    "end": "90000"
  },
  {
    "text": "issues we found so well what does it mean to test cryptography so like any piece of software you want to test two",
    "start": "90750",
    "end": "96990"
  },
  {
    "text": "things you want to test functionality meaning that when you send a valid input to your cipher or hash function or are",
    "start": "96990",
    "end": "104009"
  },
  {
    "text": "say whatever you want to get D valid output survived means conformant with the specification and",
    "start": "104009",
    "end": "110509"
  },
  {
    "text": "you want invalid inputs to be rejected so you want your function to give you to send you an exception or an error code",
    "start": "110509",
    "end": "116880"
  },
  {
    "text": "so that the color the user can understand that something is going wrong with that there's an invalid input so",
    "start": "116880",
    "end": "123149"
  },
  {
    "text": "you also want to test the security of the software obviously so the program should not be abused by attackers you",
    "start": "123149",
    "end": "129030"
  },
  {
    "text": "should not have any you know memory corruption or them your stuff and what specific decrypter",
    "start": "129030",
    "end": "135640"
  },
  {
    "text": "is that you want to avoid a leakage of secrets are rough private keys of plain text is saying it means not only leaks",
    "start": "135640",
    "end": "142719"
  },
  {
    "text": "for example memory terms but also leaks in terms of side channels typically in terms of timing leaks okay so what do",
    "start": "142719",
    "end": "151329"
  },
  {
    "start": "148000",
    "end": "148000"
  },
  {
    "text": "you test against well there's two basic cases the first one you test code against code so let's say you have a",
    "start": "151329",
    "end": "157480"
  },
  {
    "text": "baseline reference implementation of your cipher and you want to create a new one it may be in a new language or with",
    "start": "157480",
    "end": "163780"
  },
  {
    "text": "a different optimization target so this is the ideal case because you can have as many debug values as you want has",
    "start": "163780",
    "end": "169840"
  },
  {
    "text": "many test vectors as you want and it's pretty easy to find the bugs in your new implementation and to in to fix them the",
    "start": "169840",
    "end": "176980"
  },
  {
    "text": "second case is much harder is when you only have like a specification a bunch",
    "start": "176980",
    "end": "182349"
  },
  {
    "text": "of a4 documents which tells you how it works but many time it will not tell you",
    "start": "182349",
    "end": "189129"
  },
  {
    "text": "like the internal intermediate values it will only give you a bunch of test vectors and you have to fix and debug",
    "start": "189129",
    "end": "195489"
  },
  {
    "text": "your own code until you match the test vectors what's even harder is that sometimes the specs is not complete it's",
    "start": "195489",
    "end": "201009"
  },
  {
    "text": "not you know comprehensive that sometimes happen in in pay TV it's very annoying",
    "start": "201009",
    "end": "206470"
  },
  {
    "start": "205000",
    "end": "205000"
  },
  {
    "text": "so today we're going to talk about the first case course against code know about automation automated testing",
    "start": "206470",
    "end": "213030"
  },
  {
    "text": "there's many types of tools the simplest one is static analyzers for example the",
    "start": "213030",
    "end": "219129"
  },
  {
    "text": "analyzers int long which will report issues about you software security but",
    "start": "219129",
    "end": "225519"
  },
  {
    "text": "not about the corrective correctness of the crypto obviously the test vectors on the other end they will tell you whether",
    "start": "225519",
    "end": "231220"
  },
  {
    "text": "or not your code is is correct in terms of functionality but it will not tell",
    "start": "231220",
    "end": "236259"
  },
  {
    "text": "you if the software is secure if there's any Burgaw undefined behavior now here may be more advanced tools like",
    "start": "236259",
    "end": "243310"
  },
  {
    "text": "you know what we call dumb fuzzing frightened by a face pretty smart but it's still in the gutter grab them",
    "start": "243310",
    "end": "248680"
  },
  {
    "text": "professors it doesn't know what it's testing is just trying to be as small as possible in order to maximize the code",
    "start": "248680",
    "end": "254019"
  },
  {
    "text": "coverage and you will typically look for crashes so most people use a file to look for crashes you can look for all",
    "start": "254019",
    "end": "259719"
  },
  {
    "text": "the kind of programs so that's useful for crypto but that will not you know help you in finding the decrypted pure",
    "start": "259719",
    "end": "265730"
  },
  {
    "text": "krypter bugs now you have the smart phrasing so typically the kind of further that is aware of the API is",
    "start": "265730",
    "end": "272120"
  },
  {
    "text": "testing for example your first and we know that it's testing for example Piggy's pkcs 11 parser or is testing RSA",
    "start": "272120",
    "end": "278720"
  },
  {
    "text": "or IP so then they will know which kind of input to send to maximize the code coverage and to maximize the number",
    "start": "278720",
    "end": "285320"
  },
  {
    "text": "number of bugs found and now the more powerful approach is verification form of verification which can for example",
    "start": "285320",
    "end": "292370"
  },
  {
    "text": "prove mathematically that when implementation is functionally equivalent to one another or it can also",
    "start": "292370",
    "end": "298010"
  },
  {
    "text": "prove some security properties of your protocol for example it's been used to",
    "start": "298010",
    "end": "303200"
  },
  {
    "text": "prove them for secrecy and other properties of the weather guard VPN software so the question is you know how",
    "start": "303200",
    "end": "310550"
  },
  {
    "text": "to maximize efficiency static lies are pretty easy to use but not super fluid from formal verification very powerful",
    "start": "310550",
    "end": "316520"
  },
  {
    "text": "but very hard to use so in terms of perdition see you have the the red area here where you have smart fitting and",
    "start": "316520",
    "end": "322910"
  },
  {
    "text": "formal verification the test vectors is much you know lower on the curve so we'd",
    "start": "322910",
    "end": "328070"
  },
  {
    "text": "like to be you know at the level of the other question mark get a good return on an investment",
    "start": "328070",
    "end": "334510"
  },
  {
    "text": "moreover the method I mentioned they're not they're not perfect they will most",
    "start": "334510",
    "end": "340580"
  },
  {
    "text": "of the time not check the quality of the randomness so randomness is very important in crypto cat it's if it's",
    "start": "340580",
    "end": "346310"
  },
  {
    "text": "incorrect and everything is insecure they will most of the time not check for techniques you have some variant plugins",
    "start": "346310",
    "end": "353900"
  },
  {
    "text": "that try to do this but very special case and like I said it is backed off most of the time you get this vectors",
    "start": "353900",
    "end": "360230"
  },
  {
    "text": "for the valid inputs not for the invalid ones okay and they will only look at for example a default version for example",
    "start": "360230",
    "end": "366110"
  },
  {
    "text": "RSA 2k but not all the possible versions of a pharisee right so how to actually",
    "start": "366110",
    "end": "374360"
  },
  {
    "start": "371000",
    "end": "371000"
  },
  {
    "text": "better with a new tool specifically decrypted demolitions so what we call differential fighting is not very new",
    "start": "374360",
    "end": "380510"
  },
  {
    "start": "376000",
    "end": "376000"
  },
  {
    "text": "it's just the idea of you know comparing two implementations but in a kind of automatic way so people done this before",
    "start": "380510",
    "end": "387590"
  },
  {
    "text": "for example a designer try to test his new information 24 by",
    "start": "387590",
    "end": "393100"
  },
  {
    "text": "comparing it to I think the open cell version frog from leap sodium",
    "start": "393100",
    "end": "398800"
  },
  {
    "text": "did something similar but in these two cases there were only specific to their",
    "start": "398800",
    "end": "403900"
  },
  {
    "text": "to their own due to their own software so we went some to make something that's generic that not only asked and used but that anyone can use in their own",
    "start": "403900",
    "end": "409990"
  },
  {
    "text": "software something that is agnostic of the language of the API and of the the",
    "start": "409990",
    "end": "415180"
  },
  {
    "start": "415000",
    "end": "415000"
  },
  {
    "text": "platform so to give you a concrete idea of what it does is pretty stupid let's",
    "start": "415180",
    "end": "420280"
  },
  {
    "text": "say you you want to test hash function so hash function is crypto it's a black box something that takes an input of",
    "start": "420280",
    "end": "426870"
  },
  {
    "text": "arbitrary size can be one bit it can be one gigabyte and it will get you a small output of let's say 256 bits which",
    "start": "426870",
    "end": "435070"
  },
  {
    "text": "should look random to be six euro so now you have frostburn p1 which is a hash function for example now a2 and you have",
    "start": "435070",
    "end": "441340"
  },
  {
    "text": "p2 which is another information of satu so your program your footer will try to",
    "start": "441340",
    "end": "447099"
  },
  {
    "text": "generate as many input as possible that maximize the gut coverage for your hash function and they will check that p1 of",
    "start": "447099",
    "end": "454000"
  },
  {
    "text": "X is equal of p2 of X that for some input you get the same the same outputs that's pretty stupid it's a bit less",
    "start": "454000",
    "end": "461440"
  },
  {
    "start": "459000",
    "end": "459000"
  },
  {
    "text": "stupid for encryption so here the input generation is not just a message it's a message plus a public key plus a private",
    "start": "461440",
    "end": "467590"
  },
  {
    "text": "key that matches the public key so p1 and p2 in this case are not doing the same thing p1 is encrypting the input X",
    "start": "467590",
    "end": "475570"
  },
  {
    "text": "and P 2 will decrypt so you encrypt using the public key and you decrypt using the private key and at the end you",
    "start": "475570",
    "end": "482949"
  },
  {
    "text": "want to check that after decrypting the ciphertext you get the same input that you started with so find signature it's pretty much",
    "start": "482949",
    "end": "489789"
  },
  {
    "text": "similar you get a message an idea and you want to check that your signature on these messages is valid ok now let's",
    "start": "489789",
    "end": "497830"
  },
  {
    "start": "496000",
    "end": "496000"
  },
  {
    "text": "talk about on YouTube all right so CDF is a tool we developed",
    "start": "497830",
    "end": "504789"
  },
  {
    "text": "to use that approach of testing so we wanted to do cryptic crypto differential",
    "start": "504789",
    "end": "510909"
  },
  {
    "start": "508000",
    "end": "508000"
  },
  {
    "text": "phasing so we decided to implement it in a way which was completely able to test",
    "start": "510909",
    "end": "518880"
  },
  {
    "text": "executable in a black box patient so know instrumenting no compiling no",
    "start": "518880",
    "end": "526300"
  },
  {
    "text": "nothing you just get an exact table so we did it in go so we got",
    "start": "526300",
    "end": "531780"
  },
  {
    "text": "cdf executable which can support many tests at once concurrently which is",
    "start": "531780",
    "end": "537840"
  },
  {
    "text": "completely language agnostic as GPS a and we can test go code C code Python",
    "start": "537840",
    "end": "546000"
  },
  {
    "text": "code Java code whatever with it so the bottleneck won't be our tool it will",
    "start": "546000",
    "end": "552870"
  },
  {
    "text": "always be the tested implementation because those are the one doing the actual complete computations we well GP",
    "start": "552870",
    "end": "561270"
  },
  {
    "text": "started working on CDF in May and I arrived in September and we mostly",
    "start": "561270",
    "end": "568440"
  },
  {
    "text": "finished the software in March so why would you use CDF well CDF will do",
    "start": "568440",
    "end": "577250"
  },
  {
    "text": "differential phasing and implementation you get but it won't test just",
    "start": "577250",
    "end": "583950"
  },
  {
    "text": "functionality it will test functionality through the differential fitting approach but it will also do a bit more",
    "start": "583950",
    "end": "590640"
  },
  {
    "text": "so we decided to also test correctness and security of the implementation",
    "start": "590640",
    "end": "596100"
  },
  {
    "text": "through unit tests so we got a bunch of unit tests which will be run against",
    "start": "596100",
    "end": "602040"
  },
  {
    "text": "both implementation and you can compare the outcome for both so we check for",
    "start": "602040",
    "end": "608270"
  },
  {
    "text": "insecure parameters non-compliance with standards and other edge cases which are",
    "start": "608270",
    "end": "615750"
  },
  {
    "text": "interesting so we won't replace formal verification at all it's not really not",
    "start": "615750",
    "end": "622530"
  },
  {
    "text": "the goals or the goal is to replace unit tests and do a bit more than unit tests",
    "start": "622530",
    "end": "627930"
  },
  {
    "text": "and it will also test interoperability science its differential so you",
    "start": "627930",
    "end": "633900"
  },
  {
    "text": "certainly heard of another project which is about unit testing it's which proof by a team of researcher at Google they",
    "start": "633900",
    "end": "641790"
  },
  {
    "text": "got really nice unit tests for the Java common crypto interface and they found a",
    "start": "641790",
    "end": "649650"
  },
  {
    "text": "lot of bags so that's a really interesting approach in its completely complimentary to ours so we could",
    "start": "649650",
    "end": "656910"
  },
  {
    "text": "typically take the unit test and run them in a differential way against",
    "start": "656910",
    "end": "662100"
  },
  {
    "text": "implementation we test we do yet but we typically plan to do that",
    "start": "662100",
    "end": "667550"
  },
  {
    "text": "later so really interesting projects so Oh does CDF work so say you want to test",
    "start": "667550",
    "end": "676400"
  },
  {
    "start": "673000",
    "end": "673000"
  },
  {
    "text": "ECDSA you've got open SSL and TLS boochi castle a lot of libraries implementing",
    "start": "676400",
    "end": "682940"
  },
  {
    "text": "ECDSA and what you want to be to do is testing your implementation against one",
    "start": "682940",
    "end": "689180"
  },
  {
    "text": "of those but those won't have the same API we don't have a common crypto API",
    "start": "689180",
    "end": "695330"
  },
  {
    "text": "for all libraries it's not standardized yet it's a shame but that's the case so",
    "start": "695330",
    "end": "701660"
  },
  {
    "text": "how do you deal with that we decided to deal with that through what we call interfaces so for example if you want to",
    "start": "701660",
    "end": "708830"
  },
  {
    "start": "703000",
    "end": "703000"
  },
  {
    "text": "test an ECDSA program you will have to well it's just a implementation you will",
    "start": "708830",
    "end": "714950"
  },
  {
    "text": "have to code a little program which will work as a proxy between your API and our",
    "start": "714950",
    "end": "721070"
  },
  {
    "text": "API so currently or API is only on common line arguments so CDF will",
    "start": "721070",
    "end": "727670"
  },
  {
    "text": "basically doing be doing exact calls on the implementation at hand with the",
    "start": "727670",
    "end": "734510"
  },
  {
    "text": "arguments in yeah come online so for",
    "start": "734510",
    "end": "739580"
  },
  {
    "text": "example for ECDSA if you want to sign something you will just need to get the public key coordinates x and y the",
    "start": "739580",
    "end": "747710"
  },
  {
    "text": "private key D and the message and your program should output the signature or",
    "start": "747710",
    "end": "755150"
  },
  {
    "text": "an S if your program does just that then you can use CDF to test it which is",
    "start": "755150",
    "end": "761270"
  },
  {
    "text": "really easy to code so for example in Python it's like 35 line of code to do a",
    "start": "761270",
    "end": "767690"
  },
  {
    "text": "proxy between a cryptography that I only worry here you might ask a question why",
    "start": "767690",
    "end": "773150"
  },
  {
    "text": "do you with the public key for signing because in some implementations they need only private key but they need more",
    "start": "773150",
    "end": "780200"
  },
  {
    "text": "stuff than what you actually need so we need to to be as flexible as possible to",
    "start": "780200",
    "end": "785990"
  },
  {
    "text": "support as many inflammation as as possible yeah exactly so some time to implement yeah to get a private key you",
    "start": "785990",
    "end": "793400"
  },
  {
    "text": "need the public key into private key a dependent yeah so the CDF interface or really",
    "start": "793400",
    "end": "800130"
  },
  {
    "start": "797000",
    "end": "797000"
  },
  {
    "text": "generic api's in common line we will do something more AFL like later with file",
    "start": "800130",
    "end": "806610"
  },
  {
    "text": "based API but it's not Zura yet it's completely black box so you don't need",
    "start": "806610",
    "end": "812340"
  },
  {
    "text": "to instrument your execute tables and yeah it's really it's really silly the",
    "start": "812340",
    "end": "819450"
  },
  {
    "text": "interfaces they you won't do anything fancy so for example there you've got",
    "start": "819450",
    "end": "825210"
  },
  {
    "text": "CDF on tap that's a binary or program and it will try to communicate with your",
    "start": "825210",
    "end": "832590"
  },
  {
    "text": "library and the button through the proxy interface programs so if you get I don't",
    "start": "832590",
    "end": "839700"
  },
  {
    "text": "know an open SSL implementation you make a little program to just proxies open",
    "start": "839700",
    "end": "846450"
  },
  {
    "text": "SSL API calls to our API and you do the same for yours and you can compare them",
    "start": "846450",
    "end": "853170"
  },
  {
    "text": "it's really easy so there is an example that's a full code of proxy program for",
    "start": "853170",
    "end": "860030"
  },
  {
    "text": "ECDSA in python 35 lines of code it's really quick but you can test a lot of",
    "start": "860030",
    "end": "867510"
  },
  {
    "text": "features with just that that's the same for go so it's a bit longer because",
    "start": "867510",
    "end": "872820"
  },
  {
    "text": "actually xur we support one more additional flag it's a detail you can",
    "start": "872820",
    "end": "878370"
  },
  {
    "text": "read you can read it on the github page later if you want but yeah and in open",
    "start": "878370",
    "end": "884550"
  },
  {
    "text": "ssl you've got all the pointers you need to clear stuff so it's a bit more line of code but it's still fairly easy so",
    "start": "884550",
    "end": "892010"
  },
  {
    "text": "now very few examples of that again there's nothing complicated we try to be",
    "start": "892010",
    "end": "898830"
  },
  {
    "text": "as simple as possible here you can take all these days you know in your code so very again the simplest case is that of",
    "start": "898830",
    "end": "905670"
  },
  {
    "start": "899000",
    "end": "899000"
  },
  {
    "text": "a hash function or a keyed hash function so keyed hash function is like hash function but you have a secret key a",
    "start": "905670",
    "end": "911040"
  },
  {
    "text": "secret parameter so you can only compute the output if you know a secret key so PRF of silly random hash function",
    "start": "911040",
    "end": "917250"
  },
  {
    "text": "children function or Mac they're essentially keyed hash function so we a p1 and p2 they do exactly the same thing",
    "start": "917250",
    "end": "923430"
  },
  {
    "text": "so you're supposed to get the same output on a some input so what we'll try to do is in very simple",
    "start": "923430",
    "end": "929680"
  },
  {
    "text": "send different inputs with different values but with different sizes for example the DMT input or input for your",
    "start": "929680",
    "end": "935560"
  },
  {
    "text": "very long or some input aligned with the block size or it's not aligned with the block size it's kind of thing and",
    "start": "935560",
    "end": "941920"
  },
  {
    "text": "sometimes you will find there are some specific behavior for example if you look at the H mark H mark it supports",
    "start": "941920",
    "end": "948310"
  },
  {
    "text": "different sizes of keys so let's say you have the key 1 2 3 with the bite 1 by 20",
    "start": "948310",
    "end": "954760"
  },
  {
    "text": "by 3 and you have the key 1 2 3 0 then these two keys will be here we have identically you will get the same output",
    "start": "954760",
    "end": "961540"
  },
  {
    "text": "for the same input even though the keys have different sizes it's not the burgh as a feature but you should know that",
    "start": "961540",
    "end": "968770"
  },
  {
    "text": "it's works like this now it's not ideal it's not insecure but if I were to design a new mark I will not do it like",
    "start": "968770",
    "end": "975130"
  },
  {
    "text": "this for ECDSA again without all the details so here ascription is different the",
    "start": "975130",
    "end": "982420"
  },
  {
    "text": "first program would sign will issue signature and Sigyn one will verify in the signature so if you create a legit",
    "start": "982420",
    "end": "988630"
  },
  {
    "text": "signature and it should be verified successfully by the verifier so now we will in some some libraries sometimes",
    "start": "988630",
    "end": "996310"
  },
  {
    "text": "you will give them they will accept the message and the function ECDSA sign whatever they will take this message of",
    "start": "996310",
    "end": "1002760"
  },
  {
    "text": "inside they will hash it they will get the hash value and they will sign this hash value in some other libraries do it",
    "start": "1002760",
    "end": "1009060"
  },
  {
    "text": "a bit differently they accept a hash and assigned a hash so they will not they",
    "start": "1009060",
    "end": "1014610"
  },
  {
    "text": "will not touch the message for you but sometimes if you give them something you know larger than the hash they would",
    "start": "1014610",
    "end": "1020550"
  },
  {
    "text": "just you know just truncate it and take the first 32 bytes or so and sign this",
    "start": "1020550",
    "end": "1026069"
  },
  {
    "text": "in knowing the rest so I did it would be nice if they tell you oh you sent me something that's too long I need to",
    "start": "1026069",
    "end": "1031589"
  },
  {
    "text": "ignore the last bytes but not all libraries do we do this we also check",
    "start": "1031589",
    "end": "1036688"
  },
  {
    "text": "you know for the your very um normal the generate test cases things that should not happen and that are insecure for example if the",
    "start": "1036689",
    "end": "1043678"
  },
  {
    "text": "public key is 0 so if your public key if your a particular point is 0 then you know bad things can happen if the",
    "start": "1043679",
    "end": "1049530"
  },
  {
    "text": "private key 0 as well or if the hash function or the hash value our message that you send is 0 and then what happens",
    "start": "1049530",
    "end": "1056940"
  },
  {
    "text": "I'm not going to digitize but you can guess what what can go wrong here so here you",
    "start": "1056940",
    "end": "1063510"
  },
  {
    "start": "1060000",
    "end": "1060000"
  },
  {
    "text": "- to the gutter guard letter understand it but it just gives you an example of test that we do for a CD essay so here",
    "start": "1063510",
    "end": "1071700"
  },
  {
    "text": "the name of the function is yeah that's infinite loop here so it tests whether",
    "start": "1071700",
    "end": "1077570"
  },
  {
    "text": "you SDS a sine function will enter an infinite infinite loop if you send special web parameters okay",
    "start": "1077570",
    "end": "1087450"
  },
  {
    "start": "1086000",
    "end": "1086000"
  },
  {
    "text": "now for RSA so we've been talking about ECDSA which is sinusoid or ism when RSA",
    "start": "1087450",
    "end": "1092850"
  },
  {
    "text": "encryption will encrypt obviously so again here p1 encrypts and B to decrypt will try different size of messages and",
    "start": "1092850",
    "end": "1100460"
  },
  {
    "text": "actually in RSA you can have you know different size of modulus which is essentially proportional to the size on",
    "start": "1100460",
    "end": "1107310"
  },
  {
    "text": "a message use to sign you write a number to the power of the public exponent so",
    "start": "1107310",
    "end": "1115170"
  },
  {
    "text": "the public exponent it should normally be small start you know the encryption",
    "start": "1115170",
    "end": "1120570"
  },
  {
    "text": "is faster but the decryption exponent which is usually denoted D it should be",
    "start": "1120570",
    "end": "1125970"
  },
  {
    "text": "very large because it should be value totally and predictable so normally you should not have a big e you should not",
    "start": "1125970",
    "end": "1133170"
  },
  {
    "text": "have a big public exponent actually you should not have a small D if your D is very small and something's definitely",
    "start": "1133170",
    "end": "1138540"
  },
  {
    "text": "wrong so you can test if whether or not your library will will do this check or",
    "start": "1138540",
    "end": "1143850"
  },
  {
    "text": "not and you can also see what happens if you send a message bigger than what",
    "start": "1143850",
    "end": "1149190"
  },
  {
    "text": "the function expects okay what rules are trying to do is are trying to detect timing leaks but we're talking about",
    "start": "1149190",
    "end": "1154470"
  },
  {
    "start": "1153000",
    "end": "1153000"
  },
  {
    "text": "this yeah in this slide stemming leaks it's very hard to detect because it's",
    "start": "1154470",
    "end": "1159720"
  },
  {
    "text": "usually no hazama Hammond how much power you how much time you allowed to test to",
    "start": "1159720",
    "end": "1166110"
  },
  {
    "text": "find a signal so we do not reinvent the wheel there's very nice piece of software software called direct by √≥scar",
    "start": "1166110",
    "end": "1173190"
  },
  {
    "text": "tab√°rez and these colleagues I think it's written in C right and we just spotted it in go to integrate it in CDF it's",
    "start": "1173190",
    "end": "1181860"
  },
  {
    "text": "very powerful we were able to use it to find no leaks of two nanoseconds and",
    "start": "1181860",
    "end": "1187040"
  },
  {
    "text": "well episode there was at all we have Dominic oh that's great then try to exploit it and we found out",
    "start": "1187040",
    "end": "1194010"
  },
  {
    "text": "to exploit it we need to wait too many samples but still we found that there was some",
    "start": "1194010",
    "end": "1199200"
  },
  {
    "text": "actual dynamic demo time so first time we do the demo hope it works okay that's",
    "start": "1199200",
    "end": "1205980"
  },
  {
    "text": "it I just tried to hide this thing okay all right so zero okay you can comment",
    "start": "1205980",
    "end": "1214139"
  },
  {
    "text": "on this yeah what happen what happens there is that we in the first part we tested the ECDSA interface so we",
    "start": "1214139",
    "end": "1222539"
  },
  {
    "text": "specified its its ECDSA so CDF is aware of what it's testing so it can't use and",
    "start": "1222539",
    "end": "1229470"
  },
  {
    "text": "define interface so there are we tested it against crypto PP and imbed tell us",
    "start": "1229470",
    "end": "1236309"
  },
  {
    "text": "and as you can see nothing wrong if you send a zero private key both or",
    "start": "1236309",
    "end": "1242629"
  },
  {
    "text": "rejecting it with an hour and if hey it was fast in this case I Italy it went",
    "start": "1242629",
    "end": "1247799"
  },
  {
    "text": "really fast actually we're gonna set it amid the next really fast let me hit play tower well now if you if you try again with oh",
    "start": "1247799",
    "end": "1254730"
  },
  {
    "text": "no less now yeah there you can see something fishy is going on right so",
    "start": "1254730",
    "end": "1260759"
  },
  {
    "text": "what happened is that the ended TLS implementation accepted zero gravity key",
    "start": "1260759",
    "end": "1265799"
  },
  {
    "text": "as a valid key and signed the message without any error so that's really bad",
    "start": "1265799",
    "end": "1272429"
  },
  {
    "text": "because the resulting signature won't be secure at all",
    "start": "1272429",
    "end": "1278490"
  },
  {
    "text": "so we are continuing so if we if we go on we can test something else so it's",
    "start": "1278490",
    "end": "1286529"
  },
  {
    "text": "really interesting if you try the open SSL an MPLS easy des implementation and",
    "start": "1286529",
    "end": "1292830"
  },
  {
    "text": "you try to provide the hashes directly so it's not a message anymore they won't do the hashing they will directly take",
    "start": "1292830",
    "end": "1299850"
  },
  {
    "text": "the hashes you're providing what happens is that if you get a zero valued hash a",
    "start": "1299850",
    "end": "1306120"
  },
  {
    "text": "media embed TLS won't sign it may cause it to the zero value so it's completely",
    "start": "1306120",
    "end": "1314059"
  },
  {
    "text": "screwing the multiplication but open SSL Widow except to signatory to do opposite",
    "start": "1314059",
    "end": "1320759"
  },
  {
    "text": "bashing here at onea so that's an interesting are say and also there are",
    "start": "1320759",
    "end": "1326940"
  },
  {
    "text": "what we can see is that embed didn't run into an infinite loop but",
    "start": "1326940",
    "end": "1332269"
  },
  {
    "text": "OpenSSL actually did run into an infinite loop and malformed parameters so that means you can do as OpenSSL if",
    "start": "1332269",
    "end": "1341779"
  },
  {
    "text": "you can provide the parameter so that's not something which should happen but who knows",
    "start": "1341779",
    "end": "1348940"
  },
  {
    "text": "no yeah if we try again against RSA Oh a EP nothing wrong there if we try with a",
    "start": "1349179",
    "end": "1359029"
  },
  {
    "text": "go one what you can see there is that the go implementation won't accept a",
    "start": "1359029",
    "end": "1364549"
  },
  {
    "text": "larger expand than 32-bit so that means it's an integer but that's actually not",
    "start": "1364549",
    "end": "1371629"
  },
  {
    "text": "a bag it's a feature because your team decided I didn't want it to have two big",
    "start": "1371629",
    "end": "1378309"
  },
  {
    "text": "public integrity cuz it's bad for preferences it's not really good for security and so on so they explicitly",
    "start": "1378309",
    "end": "1385629"
  },
  {
    "text": "made it an integer so you can't use big hints and exponents there she wants in",
    "start": "1385629",
    "end": "1392539"
  },
  {
    "text": "here that many ApS don't behave consistently sometimes they would be very conservative and sometimes it would",
    "start": "1392539",
    "end": "1398869"
  },
  {
    "text": "be very lacks in what kind of input they accept yes so both the libraries are not",
    "start": "1398869",
    "end": "1404570"
  },
  {
    "text": "interoperable in that regards by the way so if you have a big int exponent you",
    "start": "1404570",
    "end": "1409610"
  },
  {
    "text": "won't be able to use a go implementation to do whatsoever you want to do and now we are testing your timing link sir",
    "start": "1409610",
    "end": "1416419"
  },
  {
    "text": "so I mean right it takes 10 minutes yeah timing leaks are really expensive to",
    "start": "1416419",
    "end": "1423019"
  },
  {
    "text": "test because you need to do thousands of tracy's to get reliable statistics so",
    "start": "1423019",
    "end": "1429409"
  },
  {
    "text": "that's really slow but you get results",
    "start": "1429409",
    "end": "1435740"
  },
  {
    "text": "and you can see that's not really meaningful to you I guess but those are",
    "start": "1435740",
    "end": "1441649"
  },
  {
    "text": "metrics and if we get past a certain point like 5 for the max tau value for",
    "start": "1441649",
    "end": "1448789"
  },
  {
    "text": "the max T value then that means you really go to timing leak if you get 1.8",
    "start": "1448789",
    "end": "1454490"
  },
  {
    "text": "like you get there maybe not maybe yes so you have to run it for way longer too",
    "start": "1454490",
    "end": "1460640"
  },
  {
    "text": "actually get anything meaningful okay she's found so yeah what kind of issues",
    "start": "1460640",
    "end": "1467150"
  },
  {
    "start": "1462000",
    "end": "1462000"
  },
  {
    "text": "did we found so here you can see we tested OAP ECDSA and yesterday and",
    "start": "1467150",
    "end": "1474740"
  },
  {
    "start": "1468000",
    "end": "1468000"
  },
  {
    "text": "multiple largely used liberalism and for",
    "start": "1474740",
    "end": "1480440"
  },
  {
    "text": "DSA it's really bad both libras are not testing the main parameters they are not",
    "start": "1480440",
    "end": "1487460"
  },
  {
    "text": "testing the boundaries or not testing a lot of stuff so you can provide invalid parameters and do yeah crazy stuff like",
    "start": "1487460",
    "end": "1495080"
  },
  {
    "text": "remote us signer at an invalid parameters crypto P P was really good in",
    "start": "1495080",
    "end": "1502880"
  },
  {
    "text": "that regard we weren't able to fold it it doesn't mean it's better or worse",
    "start": "1502880",
    "end": "1508700"
  },
  {
    "text": "than the other it just yeah thank you a small warning it doesn't mean that Goa crypto sucks it",
    "start": "1508700",
    "end": "1514310"
  },
  {
    "text": "so yeah they true they made some design choices well what the consequence is",
    "start": "1514310",
    "end": "1521360"
  },
  {
    "text": "that they did try to accept parameters that they do not accept I mean krypter",
    "start": "1521360",
    "end": "1527510"
  },
  {
    "text": "krypter plus plus first pretty well here because they know paranoid yeah but you",
    "start": "1527510",
    "end": "1533480"
  },
  {
    "text": "ask you see good good if you fix some stuff that we'd yeah so we reported some of the problems for so for example for a",
    "start": "1533480",
    "end": "1539690"
  },
  {
    "text": "DSA as you can see here if you provide invalid parameters to the signer it can",
    "start": "1539690",
    "end": "1547070"
  },
  {
    "text": "fall in infinite loops or it can provide always valid signatures which is something completely silly I mean if the",
    "start": "1547070",
    "end": "1554270"
  },
  {
    "text": "senator is it for any message why will you sign it yeah why would you want it so so here is a picture from the",
    "start": "1554270",
    "end": "1564950"
  },
  {
    "text": "standard ESS so digital signature standard which is saying the decree that",
    "start": "1564950",
    "end": "1570050"
  },
  {
    "text": "prior to signing you should obtain assurance of domain parameter validity",
    "start": "1570050",
    "end": "1575480"
  },
  {
    "text": "so that's clearly clearly stated in the standard and that's also true upon verification prior to verifying anything",
    "start": "1575480",
    "end": "1584090"
  },
  {
    "text": "you should obtain a sphere runs of domain parameter validity otherwise you can't answer anything you can validate",
    "start": "1584090",
    "end": "1590000"
  },
  {
    "text": "the signatures so that all liberals are doing that for",
    "start": "1590000",
    "end": "1596540"
  },
  {
    "text": "example heard this is a signing process Rodya say it's somewhat summarized but",
    "start": "1596540",
    "end": "1604760"
  },
  {
    "text": "basically you will generate a random k value between 1 and Q you will generate",
    "start": "1604760",
    "end": "1610820"
  },
  {
    "text": "you will compute R which is a generator of K to the K G to the K mod P mod Q and",
    "start": "1610820",
    "end": "1617929"
  },
  {
    "text": "if R is 0 then no lag you get a K which is a multiple of Q for example so you",
    "start": "1617929",
    "end": "1625190"
  },
  {
    "text": "you just pick another K and the probability of getting another one which",
    "start": "1625190",
    "end": "1630590"
  },
  {
    "text": "is again a multiple of Q is very low so it shouldn't be 0 again but if it's here",
    "start": "1630590",
    "end": "1636110"
  },
  {
    "text": "again you retry but that's a problem if G is 0 for example if G is 0 you can",
    "start": "1636110",
    "end": "1642080"
  },
  {
    "text": "make 0 to whatever you want it will get 0 most of the time always so you get an",
    "start": "1642080",
    "end": "1648140"
  },
  {
    "text": "infinite loop sir so it's explicitly stated in the standard that the generator shouldn't be 0 but what if it",
    "start": "1648140",
    "end": "1655790"
  },
  {
    "text": "is well some liberals go and open SSL for instance won't check that so we",
    "start": "1655790",
    "end": "1661549"
  },
  {
    "text": "report into problem tables this is a GUI implementation it's a for",
    "start": "1661549",
    "end": "1667850"
  },
  {
    "text": "loop which will always generate a new K as long as R is 0 so they fix the",
    "start": "1667850",
    "end": "1674450"
  },
  {
    "text": "problem by limiting the number of attempts so if you make more than 10",
    "start": "1674450",
    "end": "1680120"
  },
  {
    "text": "attempt then it's not valid parameter that's a good direction but that's not",
    "start": "1680120",
    "end": "1686210"
  },
  {
    "text": "best fixed because you don't you are not checking the domain parameters you are just mitigating the problem so we also",
    "start": "1686210",
    "end": "1695720"
  },
  {
    "text": "were able to confirm timing leak in RSA",
    "start": "1695720",
    "end": "1700730"
  },
  {
    "text": "oep thanks to the direct implementation but and that's a bad thing because every",
    "start": "1700730",
    "end": "1707840"
  },
  {
    "text": "CoAP if you get timing leaks you can get timing attacks and you can basically decrypt the message using a rake rake",
    "start": "1707840",
    "end": "1717260"
  },
  {
    "text": "hell decrypt timing Oracle's but immediate luck it's not not as well known as the blush in Bihar attack on",
    "start": "1717260",
    "end": "1722480"
  },
  {
    "text": "because a 1.5 mm ciphertext attack but so actually power for instance that just by using time in",
    "start": "1722480",
    "end": "1729230"
  },
  {
    "text": "Mexican yeah exactly so mongers attack it's cold it's really powerful and we actually implemented it in goes among",
    "start": "1729230",
    "end": "1735860"
  },
  {
    "text": "girls attack so if you want to play with it you can too and we were we were not",
    "start": "1735860",
    "end": "1741140"
  },
  {
    "text": "able to use it against the everything implementation because the noise of the operating system is so big and the",
    "start": "1741140",
    "end": "1747680"
  },
  {
    "text": "signer the signal is so slow that you need really too many traces to do any",
    "start": "1747680",
    "end": "1753140"
  },
  {
    "text": "attack Euler so generally we observe",
    "start": "1753140",
    "end": "1758660"
  },
  {
    "start": "1754000",
    "end": "1754000"
  },
  {
    "text": "that most critically breweries are really concerned about practical attacks practical problems but they won't really",
    "start": "1758660",
    "end": "1766400"
  },
  {
    "text": "care about no domain parameters boundaries and such details so if you",
    "start": "1766400",
    "end": "1773690"
  },
  {
    "text": "can't prove that it's a practical attack they might not fix it on my b-roll reluctant to do it but it's it's sad",
    "start": "1773690",
    "end": "1781700"
  },
  {
    "text": "because it's not a good difference in depth so they most of them support with",
    "start": "1781700",
    "end": "1786830"
  },
  {
    "text": "parameters they won't really conform yeah not a good state okay now it's very",
    "start": "1786830",
    "end": "1794090"
  },
  {
    "start": "1791000",
    "end": "1791000"
  },
  {
    "text": "time to conclude we have time for questions simmers we have this neutral CDF it has",
    "start": "1794090",
    "end": "1800090"
  },
  {
    "text": "correctness and security of crypto software it's only for crypto stuff it's",
    "start": "1800090",
    "end": "1805280"
  },
  {
    "text": "an in go because go it's yeah what nice language straight for our to cross",
    "start": "1805280",
    "end": "1810980"
  },
  {
    "text": "compiler and portable and we rely on this approach of comparing the behavior of different implementations so you have",
    "start": "1810980",
    "end": "1817040"
  },
  {
    "text": "you need to have an inflammation you trust in the first place on with to implement that you don't trust a well",
    "start": "1817040",
    "end": "1822620"
  },
  {
    "text": "but you just want to see you know how differently they behave or just see if they can you know work together and we",
    "start": "1822620",
    "end": "1828890"
  },
  {
    "text": "found couple issues not so many but we we focused on on what we believe to be",
    "start": "1828890",
    "end": "1836630"
  },
  {
    "text": "the most secure libraries and the most widely use features so we're not look",
    "start": "1836630",
    "end": "1841670"
  },
  {
    "text": "for the low-hanging fruits but instead for the hottest ones there's still a lot",
    "start": "1841670",
    "end": "1846710"
  },
  {
    "text": "of a lot more work to be done we need more interfaces in other word we need to test to be able to test more",
    "start": "1846710",
    "end": "1852020"
  },
  {
    "text": "stuff because we don't even test the here man or SDH which is like use",
    "start": "1852020",
    "end": "1857360"
  },
  {
    "text": "everywhere we need to do more tests so if you look at Google's Tuesday in do you know many",
    "start": "1857360",
    "end": "1862619"
  },
  {
    "text": "more tests and than we do but they don't do this you know you know different sure why and again you will need to test more",
    "start": "1862619",
    "end": "1870179"
  },
  {
    "text": "libraries you will just look at maybe four or five different ones the one that are actually the most used ones but",
    "start": "1870179",
    "end": "1876929"
  },
  {
    "text": "maybe you want to test your own stuff okay and also we want to well test on software because that's probably a lot",
    "start": "1876929",
    "end": "1883589"
  },
  {
    "text": "of bugs that crept in so yeah so you can find to the f at this address on github",
    "start": "1883589",
    "end": "1888690"
  },
  {
    "text": "get up quickly security is DF and if you have any question you can possibly in",
    "start": "1888690",
    "end": "1895349"
  },
  {
    "text": "the issue tracker we happy to take requests and come to us if you have any",
    "start": "1895349",
    "end": "1901049"
  },
  {
    "text": "any comment yeah thank you so questions",
    "start": "1901049",
    "end": "1913049"
  },
  {
    "text": "maybe yeah yeah go to the meat",
    "start": "1913049",
    "end": "1921330"
  },
  {
    "text": "so is this designed just to test crypto primitives like would you use this to",
    "start": "1924900",
    "end": "1932590"
  },
  {
    "text": "test an arbitrary protocol that you know you might make up yourself for your",
    "start": "1932590",
    "end": "1938799"
  },
  {
    "text": "particular application we don't support you this one does 3 yet and it could be way more complicated one of the reasons",
    "start": "1938799",
    "end": "1946000"
  },
  {
    "text": "is that we're completely stateless for example if you want to test hash function you will call the function once",
    "start": "1946000",
    "end": "1952600"
  },
  {
    "text": "you're gonna do the update update finish and for testing for example a more",
    "start": "1952600",
    "end": "1957669"
  },
  {
    "text": "complex product but like like TLS for instance you will need something more",
    "start": "1957669",
    "end": "1962770"
  },
  {
    "text": "complex to to do some useful tests and while being state to stateless we can",
    "start": "1962770",
    "end": "1967929"
  },
  {
    "text": "only do stateful system but it would be a more warning so as we we should",
    "start": "1967929",
    "end": "1974200"
  },
  {
    "text": "basically use your results rather than your software in particular right because like you wouldn't I would I",
    "start": "1974200",
    "end": "1983049"
  },
  {
    "text": "would never actually implement my my own ECD s-e-c BSA from scratch yeah yeah I",
    "start": "1983049",
    "end": "1989260"
  },
  {
    "text": "should I should only see your results to see which one implements it better yeah yeah you observe that if you don't",
    "start": "1989260",
    "end": "1996520"
  },
  {
    "text": "implement your own crypto which I don't recommend that you do if you don't have to then there is a offer to of getting",
    "start": "1996520",
    "end": "2002940"
  },
  {
    "text": "it be useful to to get an idea of how these are persons how these libraries",
    "start": "2002940",
    "end": "2007950"
  },
  {
    "text": "behave and what security they did you provide it thank you",
    "start": "2007950",
    "end": "2013100"
  },
  {
    "text": "yeah you mentioned that DSA standard says you should test the parameters of",
    "start": "2014660",
    "end": "2021720"
  },
  {
    "text": "DSA is it specific about what to test because like this parameter testing is",
    "start": "2021720",
    "end": "2027990"
  },
  {
    "text": "kind of a tricky issue like for example I know one of the numbers in the DSA parameters is a prime and you can test",
    "start": "2027990",
    "end": "2034559"
  },
  {
    "text": "whether it's prime but that's pretty expensive to do during a signature operation like it's similar with",
    "start": "2034559",
    "end": "2040380"
  },
  {
    "text": "diffie-hellman indie-film and you have you have these parameters from the server and TLS and you could in theory",
    "start": "2040380",
    "end": "2046710"
  },
  {
    "text": "test them but it would be really slow to do that so yeah like this thing if it's a primer well that's true that some tests can be",
    "start": "2046710",
    "end": "2054330"
  },
  {
    "text": "expensive but what you need to do is obtain as two runs once that the key is",
    "start": "2054330",
    "end": "2059520"
  },
  {
    "text": "secure once you've got it you can sign as many messages as you want so you can just if you are maintaining a liberal",
    "start": "2059520",
    "end": "2066658"
  },
  {
    "text": "redoing that you can just imagine for a global heading a function to test so validity of key and once you've got the",
    "start": "2066659",
    "end": "2074128"
  },
  {
    "text": "function the user must call it when you need it but it doesn't need to be at each signature yeah but I can tell you",
    "start": "2074129",
    "end": "2081990"
  },
  {
    "text": "that a for example browser would never implement a test that would take one second before you can make connection",
    "start": "2081990",
    "end": "2087858"
  },
  {
    "text": "yes let's go trade off here yes that's true that DSA is hopefully known no",
    "start": "2087859",
    "end": "2093450"
  },
  {
    "text": "longer in browsers so but if you have an S and it's very sure I was just I mean",
    "start": "2093450",
    "end": "2101070"
  },
  {
    "text": "my questions sort of a I'm in the middle here yeah I get it it's sort of like",
    "start": "2101070",
    "end": "2108990"
  },
  {
    "text": "that first question but I unfortunately am in a position where I need to",
    "start": "2108990",
    "end": "2114420"
  },
  {
    "text": "implement some of my own crypto for SRP and while I understand you're not doing",
    "start": "2114420",
    "end": "2119670"
  },
  {
    "text": "the whole protocol keeping state the individual components of it and I'm just wondering well I'm hoping you already",
    "start": "2119670",
    "end": "2127920"
  },
  {
    "text": "have that in there but I'm guessing you don't and in a sense how easy is it to",
    "start": "2127920",
    "end": "2136410"
  },
  {
    "text": "add new things to test yeah that's a good question actually we build CDF in a",
    "start": "2136410",
    "end": "2142730"
  },
  {
    "text": "completely modular way so you really can had new interfaces new tests really",
    "start": "2142730",
    "end": "2148730"
  },
  {
    "text": "easily so here's a good question great thank you I need this iterate some",
    "start": "2148730",
    "end": "2154040"
  },
  {
    "text": "go god yeah it's in go but that's one reason we can go and not see PP or us because it's generally parsley that's",
    "start": "2154040",
    "end": "2160400"
  },
  {
    "text": "easier to do code for no crypt of our first so not very good developers usually yes if there's no more questions",
    "start": "2160400",
    "end": "2169250"
  },
  {
    "text": "then thank you guys and uh yeah we'll be at this dog again besides in one hour so if you like this ok thank you",
    "start": "2169250",
    "end": "2178250"
  },
  {
    "text": "[Applause]",
    "start": "2178250",
    "end": "2182309"
  }
]