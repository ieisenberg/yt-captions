[
  {
    "text": "welcome to zombie ant farming practical tips for playing hide-and-seek with Linux EDRs",
    "start": "30",
    "end": "5730"
  },
  {
    "text": "you're in breakers GHI here to listen to dimitri schnitz cough before we begin",
    "start": "5730",
    "end": "12719"
  },
  {
    "text": "just a few brief notes please stop by the business hall located in Mandalay Bay Oceanside and Shore learn shoreline",
    "start": "12719",
    "end": "18779"
  },
  {
    "text": "ballrooms on level 2 also don't forget the black hat Arsenal is in the business hall on level 2 of course turn off your",
    "start": "18779",
    "end": "25859"
  },
  {
    "text": "phones welcome to be true thank you everybody",
    "start": "25859",
    "end": "31140"
  },
  {
    "text": "and I really appreciate you guys coming here you have choices appreciate that so",
    "start": "31140",
    "end": "36930"
  },
  {
    "text": "my name is Demetrius Nash Cove I am the red team operator 4x4 shred and as part",
    "start": "36930",
    "end": "43860"
  },
  {
    "text": "of my work duties I help my team with tooling testing and doing some research",
    "start": "43860",
    "end": "50039"
  },
  {
    "text": "and I'm interested in all things offensive and this talk is going to be from the perspective of the red team",
    "start": "50039",
    "end": "56340"
  },
  {
    "text": "operator we're going to look at what challenges red team operators have when they evade EDRs on Linux we're gonna",
    "start": "56340",
    "end": "63359"
  },
  {
    "text": "talk about the technology we're gonna give you some practical tools tips and",
    "start": "63359",
    "end": "68939"
  },
  {
    "text": "we're gonna release a toolkit that will help you to do the same but I really",
    "start": "68939",
    "end": "74280"
  },
  {
    "text": "wanted to start with setting the server like a context of our talk we're",
    "start": "74280",
    "end": "80970"
  },
  {
    "text": "focusing on Linux because it matters the reality of today's deployment and data",
    "start": "80970",
    "end": "85979"
  },
  {
    "text": "centers the data and other things just point us to the fact that Linux runs",
    "start": "85979",
    "end": "92880"
  },
  {
    "text": "about 90% of cloud more clothes and no matter what you do you're probably gonna touch as an attacker is the right team",
    "start": "92880",
    "end": "99420"
  },
  {
    "text": "of operator you can touch Linux at some point the attackers and Red Team",
    "start": "99420",
    "end": "104820"
  },
  {
    "text": "operators that do adversarial emulation they follow the path to our why",
    "start": "104820",
    "end": "112860"
  },
  {
    "text": "essential they need to get data and a lot of times the data is on Linux and so",
    "start": "112860",
    "end": "118500"
  },
  {
    "text": "we're gonna make our focus there now because attacker ends up on Linux",
    "start": "118500",
    "end": "127590"
  },
  {
    "text": "obviously the defense also follows the attacker and we've seen the resurgence",
    "start": "127590",
    "end": "132690"
  },
  {
    "text": "of endpoint action and response technology in Linux operating systems and that's what our",
    "start": "132690",
    "end": "138780"
  },
  {
    "text": "focus is we as operators will have to respond to that challenge so imagine",
    "start": "138780",
    "end": "144960"
  },
  {
    "text": "that you as an operator and end up being on Linux machine you drop there and",
    "start": "144960",
    "end": "150120"
  },
  {
    "text": "let's say everything is ok you are not caught you sit quiet and tight and",
    "start": "150120",
    "end": "155640"
  },
  {
    "text": "figure out what's going on and in 15 minutes your payload doesn't work you're evacuated and you're pretty much boot",
    "start": "155640",
    "end": "163700"
  },
  {
    "text": "booted you're you're booted out of the system your research from what happened",
    "start": "163700",
    "end": "169380"
  },
  {
    "text": "starts right there was that the EDR was a divided listing solution that prevented you from doing that",
    "start": "169380",
    "end": "175920"
  },
  {
    "text": "was it just a mix of deployment patch management automation scripts anything that has to do with DLP some humph",
    "start": "175920",
    "end": "182850"
  },
  {
    "text": "homegrown automation was it manual health threat hunting we do not know and",
    "start": "182850",
    "end": "188520"
  },
  {
    "text": "the state of Linux EDR state of winners defense is a little bit more sporadic",
    "start": "188520",
    "end": "194070"
  },
  {
    "text": "right we do not know if it's a pure play EDR if it's something else so and",
    "start": "194070",
    "end": "199560"
  },
  {
    "text": "obviously we have to contend with that as operators we have to address our initial foothold mechanisms we have to",
    "start": "199560",
    "end": "206880"
  },
  {
    "text": "figure out the media detection capabilities of the defense and try to avoid them and we have to contend with",
    "start": "206880",
    "end": "214350"
  },
  {
    "text": "persistent readiness right we need to make sure that we're staying on that box we're operating on that box or pivoting",
    "start": "214350",
    "end": "221550"
  },
  {
    "text": "out to another machine on the same network while still being persistent there and lately we also have to contend",
    "start": "221550",
    "end": "229380"
  },
  {
    "text": "with so called proactive supervision contacts what that means is quiet boxes",
    "start": "229380",
    "end": "235250"
  },
  {
    "text": "instrumented operating systems and whitelisting and so before we move into",
    "start": "235250",
    "end": "244260"
  },
  {
    "text": "specifics let's talk strategically about what we can do as red team operators to",
    "start": "244260",
    "end": "249360"
  },
  {
    "text": "counter that that state of affairs well EDRs are sort of you know very",
    "start": "249360",
    "end": "256410"
  },
  {
    "text": "sophisticated piece of software that a lot of that pretty much do analysis of behavior of system binaries that run in",
    "start": "256410",
    "end": "263729"
  },
  {
    "text": "it and they build a story they build a story out of the intake Gators have compromised and the story is",
    "start": "263729",
    "end": "269280"
  },
  {
    "text": "built and if the story tells that that's malware they shut it down how can we go",
    "start": "269280",
    "end": "275099"
  },
  {
    "text": "against that technology well one thing that we can do is we can actually attack the EDR itself we can shut it down we",
    "start": "275099",
    "end": "281669"
  },
  {
    "text": "can blindside it we can affect the operation of EDR itself we can actually",
    "start": "281669",
    "end": "288120"
  },
  {
    "text": "affect the logging or event monitoring of the EDR right but that's not because",
    "start": "288120",
    "end": "294479"
  },
  {
    "text": "that's not the the focus of our talk before the the other scenario is to target the execution behavior of the",
    "start": "294479",
    "end": "302840"
  },
  {
    "text": "programs that we actually bring on the Box can we confuse EDRs with our own",
    "start": "302840",
    "end": "308880"
  },
  {
    "text": "execution can we bypass the IDR detection by pretty much executing",
    "start": "308880",
    "end": "314729"
  },
  {
    "text": "commands in a different way maybe we can even deflect the artifact discovery when",
    "start": "314729",
    "end": "321630"
  },
  {
    "text": "the manual threat hunting is happening and we can still be persistent on that box let's see what we can do so",
    "start": "321630",
    "end": "329099"
  },
  {
    "text": "strategically we basically need a viable path to build Linux malware in the face",
    "start": "329099",
    "end": "334979"
  },
  {
    "text": "of those EDRs we have to contend with a lot of different things that we do not",
    "start": "334979",
    "end": "341849"
  },
  {
    "text": "know on the Box we do not know what they do on the Box you have several choices",
    "start": "341849",
    "end": "348620"
  },
  {
    "text": "commonly you can either drop your offensive tools on the target right away again you do not know what's what's",
    "start": "348620",
    "end": "356009"
  },
  {
    "text": "going on with that target you do not know what you're going against you may be right I'll try detected the issue of",
    "start": "356009",
    "end": "362759"
  },
  {
    "text": "the unknown unknown right the second choice is to try to develop your offensive tools right on the box",
    "start": "362759",
    "end": "368490"
  },
  {
    "text": "well your mileage may vary because you can have compilers or you may not have compilers you may have some form of",
    "start": "368490",
    "end": "375270"
  },
  {
    "text": "lockdown box that doesn't allow you to do that and the third choice is to use",
    "start": "375270",
    "end": "380880"
  },
  {
    "text": "whatever is available on the box so called principle of utilization you take what the system gives you and you just",
    "start": "380880",
    "end": "388199"
  },
  {
    "text": "work with that well in proactive context it's very limited right and again you're",
    "start": "388199",
    "end": "394199"
  },
  {
    "text": "on the box you do not know what you're actually seeing there now",
    "start": "394199",
    "end": "399510"
  },
  {
    "text": "what if we take a different approach what if we assemble the attack right on the box we basically have you know all",
    "start": "399510",
    "end": "408390"
  },
  {
    "text": "three things that we are talking about we're living of the land we are dropping some tooling on a machine and we're",
    "start": "408390",
    "end": "414600"
  },
  {
    "text": "using the facilities of that operating system to go against EDRs a couple of",
    "start": "414600",
    "end": "420300"
  },
  {
    "text": "ideas first idea is to bring in instrumented small malware cradles and",
    "start": "420300",
    "end": "426810"
  },
  {
    "text": "then build iterative capabilities on top of them so what are cradles cradles are just boost your code just very small",
    "start": "426810",
    "end": "434480"
  },
  {
    "text": "piece of software that is not malicious in its intent but it has capabilities to",
    "start": "434480",
    "end": "440070"
  },
  {
    "text": "either grow in its malicious intent or load capabilities into each other or other systems on the machine and so the",
    "start": "440070",
    "end": "447480"
  },
  {
    "text": "second idea is to maybe take the good binaries on the system that has been whitelisted perhaps right or EDRs have",
    "start": "447480",
    "end": "455550"
  },
  {
    "text": "run profile on it they they're deemed to be trusted and turn them to service our",
    "start": "455550",
    "end": "462180"
  },
  {
    "text": "needs turn into Trojan horses into decoys of our malware operations those",
    "start": "462180",
    "end": "468540"
  },
  {
    "text": "are the two ideas that we're gonna explore here so so we're going to talk",
    "start": "468540",
    "end": "474570"
  },
  {
    "text": "about two stages the first stage is we're gonna try to build offensive primitives on the box",
    "start": "474570",
    "end": "479850"
  },
  {
    "text": "those are recipes tips and things that will help you to retool directly on the",
    "start": "479850",
    "end": "485880"
  },
  {
    "text": "machine so we're gonna use loader Linux loader and linker in order to do that",
    "start": "485880",
    "end": "491880"
  },
  {
    "text": "we're gonna try to see how we can blindside the ided art from behavioral perspective and we're going to talk",
    "start": "491880",
    "end": "500250"
  },
  {
    "text": "about prototyping and rapid iteration of your malware capabilities on the machine and the second stage is going to be the",
    "start": "500250",
    "end": "507420"
  },
  {
    "text": "actual weaponization and operationalization of those infested offensive capability that that we build",
    "start": "507420",
    "end": "514140"
  },
  {
    "text": "or bring in on a machine which means we're gonna try to hide from EDRs we're gonna use preloader as a service",
    "start": "514140",
    "end": "522510"
  },
  {
    "text": "we're gonna build it right here and showcases capabilities and we're gonna",
    "start": "522510",
    "end": "528210"
  },
  {
    "text": "try to achieve some form of mimicry on the machine so the EDRs are fooled a little bit more so let's begin stage one offensive",
    "start": "528210",
    "end": "535810"
  },
  {
    "text": "primitives before we move into we have",
    "start": "535810",
    "end": "541120"
  },
  {
    "text": "to take a little stroll down memory lane and talk about the elf format elf format",
    "start": "541120",
    "end": "547660"
  },
  {
    "text": "is the executable format on Linux machines it is much like pee on windows",
    "start": "547660",
    "end": "553150"
  },
  {
    "text": "it can be instrumented it runs through a loader and it has capabilities to load",
    "start": "553150",
    "end": "559870"
  },
  {
    "text": "other things in its sections so there are two views there is a linking section",
    "start": "559870",
    "end": "565270"
  },
  {
    "text": "for the executable and there is an execution view some of it is on a disk the other when you load it into the",
    "start": "565270",
    "end": "571300"
  },
  {
    "text": "memory the linker basically patches the memory locations does the relocation of",
    "start": "571300",
    "end": "576340"
  },
  {
    "text": "the memory and it starts the process and elf is very interesting format because",
    "start": "576340",
    "end": "581530"
  },
  {
    "text": "there are a lot of different English interesting sections in it and we're going to use or make use of them in our",
    "start": "581530",
    "end": "589260"
  },
  {
    "text": "efforts here so from common execution the loader essentially tries to find",
    "start": "589260",
    "end": "597420"
  },
  {
    "text": "libraries that the executable depends on in common scenario when you launch an",
    "start": "597420",
    "end": "602470"
  },
  {
    "text": "executable on linux and if it doesn't find its dependencies it crashes it says I cannot find it and when you start",
    "start": "602470",
    "end": "609040"
  },
  {
    "text": "researching what it is that it's trying to find you have tools that should be able to tell you that oh it's fine it's",
    "start": "609040",
    "end": "615580"
  },
  {
    "text": "trying to find this library because it's linking table is telling it to do so",
    "start": "615580",
    "end": "620770"
  },
  {
    "text": "right that's where its functionality is and cannot find it and then when the dependency is actually resolved you can",
    "start": "620770",
    "end": "627910"
  },
  {
    "text": "move on with the execution of that same program everything is ok and you've gained your functionality so keep that",
    "start": "627910",
    "end": "635320"
  },
  {
    "text": "mental picture in mind as we go through that effort that we're trying to make the other thing about elves and",
    "start": "635320",
    "end": "643920"
  },
  {
    "text": "execution of execution of programs on Linux is that in order for you to",
    "start": "643920",
    "end": "649270"
  },
  {
    "text": "introduce new capability into binary without having the code is to do so a so-called hooking of the elf right it's",
    "start": "649270",
    "end": "657220"
  },
  {
    "text": "a very simple thing to do essentially Linux allows you to seek for functionality for features for functions",
    "start": "657220",
    "end": "664480"
  },
  {
    "text": "for variables in the occasions of the libraries as well as executables and depending on the load",
    "start": "664480",
    "end": "672269"
  },
  {
    "text": "preference you should be able to find this function or crash and if you do",
    "start": "672269",
    "end": "677739"
  },
  {
    "text": "find the the function in the in the application elsewhere outside of the",
    "start": "677739",
    "end": "683259"
  },
  {
    "text": "executable you can hook it essentially you're executing a detour of the function that is being encoded and",
    "start": "683259",
    "end": "689499"
  },
  {
    "text": "executable by using your library that's achieved through the LD preload it's a",
    "start": "689499",
    "end": "694899"
  },
  {
    "text": "feature it's a facility of the operating system to be able to load dynamic libraries now there are issues with",
    "start": "694899",
    "end": "702399"
  },
  {
    "text": "dynamic library loading right how do we use this for offensive tools well if you",
    "start": "702399",
    "end": "707799"
  },
  {
    "text": "drop down the box and you need to preload the binary that you want with some of your malware you have to know",
    "start": "707799",
    "end": "714730"
  },
  {
    "text": "the API in this case F open for example it's a very known API it's from the",
    "start": "714730",
    "end": "720879"
  },
  {
    "text": "Lipsy you can preload it pretty easily but what if you dropped on the box and you're trying to backdoor and executable",
    "start": "720879",
    "end": "727089"
  },
  {
    "text": "that you do not know anything about and you cannot instrument it in any way so",
    "start": "727089",
    "end": "732369"
  },
  {
    "text": "that presents an issue how do we bypass knowing what that executable does and",
    "start": "732369",
    "end": "738369"
  },
  {
    "text": "use it for decoy so let's move on and see what we can do here well one tip and",
    "start": "738369",
    "end": "744249"
  },
  {
    "text": "one idea would be is to try to not understand what that executable does but",
    "start": "744249",
    "end": "750999"
  },
  {
    "text": "just preload it in the generic way I do not care or should not care what executable I'm targeting to hide my",
    "start": "750999",
    "end": "758049"
  },
  {
    "text": "malware I should take any system executable and be able to promote that one thing to notice it on Linux you have",
    "start": "758049",
    "end": "765869"
  },
  {
    "text": "parent-child relationship and so if you're the parent of the process you're spawning or starting then you likely own",
    "start": "765869",
    "end": "772989"
  },
  {
    "text": "that process you likely can introspect that process and that's your child or",
    "start": "772989",
    "end": "778889"
  },
  {
    "text": "parent-child relationship between the two processes so we can use that relationship to you know to our",
    "start": "778889",
    "end": "785949"
  },
  {
    "text": "advantage conceptually from what what do we gain",
    "start": "785949",
    "end": "791079"
  },
  {
    "text": "for for ETR evasion we load malware into a library and then we basically",
    "start": "791079",
    "end": "797879"
  },
  {
    "text": "instrument and such way that it picks up that malware as it loads into the memory EDRs",
    "start": "797879",
    "end": "803980"
  },
  {
    "text": "should be able to lose the trace should not be able to introspect our binaries and if they do so they should not be",
    "start": "803980",
    "end": "810100"
  },
  {
    "text": "able to see the entire payload so we're gonna use a scatter and assemble approach for our payload taking bits and",
    "start": "810100",
    "end": "816670"
  },
  {
    "text": "pieces from from the payload and assemble them on the Box one curious",
    "start": "816670",
    "end": "822220"
  },
  {
    "text": "thing that you may know is that the Linux because you have parent-child relationship between the processes that",
    "start": "822220",
    "end": "828490"
  },
  {
    "text": "you launch is that it owns resources of the of the child right the parent always",
    "start": "828490",
    "end": "834310"
  },
  {
    "text": "knows what the child can't do so what do we actually want we want to take a",
    "start": "834310",
    "end": "840130"
  },
  {
    "text": "target process unknown executable on the box that is white listed and turn it into a malicious executable by various",
    "start": "840130",
    "end": "847240"
  },
  {
    "text": "means one way of doing it is to use sections that are available in elf for",
    "start": "847240",
    "end": "853930"
  },
  {
    "text": "example in it Feenie and we can build arrays of code if we can bring our own",
    "start": "853930",
    "end": "859470"
  },
  {
    "text": "little executables and just preload them with memory with with malware we can",
    "start": "859470",
    "end": "864579"
  },
  {
    "text": "compile it in such a way that we can take a little and take advantage of those sections in elf the curious part",
    "start": "864579",
    "end": "871810"
  },
  {
    "text": "about is that those sections in it and if any are executed irrespective of the",
    "start": "871810",
    "end": "877750"
  },
  {
    "text": "main of the of the mission of the program right they load the for domain and they execute after the main is",
    "start": "877750",
    "end": "884260"
  },
  {
    "text": "accident the second tip is we can hope the the Lib C library itself Lib C",
    "start": "884260",
    "end": "890829"
  },
  {
    "text": "library is nothing more than just a set of routines that sets of execution for a",
    "start": "890829",
    "end": "896019"
  },
  {
    "text": "Linux process and so we can dynamically preload an executable by choosing and",
    "start": "896019",
    "end": "901779"
  },
  {
    "text": "looking for a leap C and we can we can do it this way but is it optimal notice",
    "start": "901779",
    "end": "908050"
  },
  {
    "text": "that we're using a dynamic loading capabilities we're looking for symbols well ers can look for symbols too they",
    "start": "908050",
    "end": "915639"
  },
  {
    "text": "can disable Gale Simon we have to contend with that the other thing that",
    "start": "915639",
    "end": "920649"
  },
  {
    "text": "contains move that the Souls at issue is that we can use weak references our",
    "start": "920649",
    "end": "925990"
  },
  {
    "text": "compiler allows you to to create to expose functionality features and global",
    "start": "925990",
    "end": "932889"
  },
  {
    "text": "variables out of your library in such a way that the dynamic loading of that",
    "start": "932889",
    "end": "938769"
  },
  {
    "text": "symbol and lookup of that symbol at runtime is not depending on the functionality that you can find so",
    "start": "938769",
    "end": "943989"
  },
  {
    "text": "essentially if you do not find the function it doesn't crash the the process if before we were able to load a",
    "start": "943989",
    "end": "950819"
  },
  {
    "text": "executable with the library and if it's missing the library the process would crash in this case we're basically",
    "start": "950819",
    "end": "957459"
  },
  {
    "text": "saying okay well can I resolve this debug to variable can I find this",
    "start": "957459",
    "end": "963879"
  },
  {
    "text": "feature or not if I can't I'll keep going why is it useful well if you're in",
    "start": "963879",
    "end": "969519"
  },
  {
    "text": "the sandbox as an operator you can check for presence of some defensive toolkit and not even load the functionality even",
    "start": "969519",
    "end": "976989"
  },
  {
    "text": "if it's available for you so EDR does not know where you're loading your malware from the next iteration of weak",
    "start": "976989",
    "end": "982839"
  },
  {
    "text": "graphs is that we can find for and weak reps if for example you're not bringing your malware cradle but you're actually",
    "start": "982839",
    "end": "989470"
  },
  {
    "text": "trying to find the executable on the box to in fact and so you can search for",
    "start": "989470",
    "end": "994899"
  },
  {
    "text": "weak references right there every executable on Linux pretty much has the",
    "start": "994899",
    "end": "1000239"
  },
  {
    "text": "two sections cxa finalized and gimon start and so you can use any of those to",
    "start": "1000239",
    "end": "1005999"
  },
  {
    "text": "hook irrespective of what your malware trying to do and obviously the chain we",
    "start": "1005999",
    "end": "1012329"
  },
  {
    "text": "graphs allow you to to split your payload into two or more libraries and",
    "start": "1012329",
    "end": "1018119"
  },
  {
    "text": "so when you're when ETR is looking at the memory footprint it only sees a part of it one functionality can come from chain",
    "start": "1018119",
    "end": "1025980"
  },
  {
    "text": "one the other functionality can come from chain two the other thing is that you can actually create pre constructors",
    "start": "1025980",
    "end": "1033899"
  },
  {
    "text": "of your of your cradle or or executable essentially you're loading a constructor",
    "start": "1033899",
    "end": "1039720"
  },
  {
    "text": "into indiscriminate program and you say slash bin slash LS will gain a new constructor which will execute my code",
    "start": "1039720",
    "end": "1046019"
  },
  {
    "text": "as a malware writer I can be as much generic as I want to I can even counter",
    "start": "1046019",
    "end": "1051870"
  },
  {
    "text": "the counter to this when EDRs know about that and they say okay I'm gonna create",
    "start": "1051870",
    "end": "1057059"
  },
  {
    "text": "the generic constructor in order for you the malware writer not being able to to",
    "start": "1057059",
    "end": "1062429"
  },
  {
    "text": "load it well it turns out that there are priorities to constructors and we take the high priority on the",
    "start": "1062429",
    "end": "1068010"
  },
  {
    "text": "constructor we should be able to bypass Lydia now",
    "start": "1068010",
    "end": "1073200"
  },
  {
    "text": "the other tip that you can do is you can actually fool EDR and blind their detection by switching in and out of",
    "start": "1073200",
    "end": "1079950"
  },
  {
    "text": "band of signals you can send signals to yourself and you execute handlers within",
    "start": "1079950",
    "end": "1085740"
  },
  {
    "text": "the code and so the you basically prevent DDR to build a consistent flow",
    "start": "1085740",
    "end": "1090960"
  },
  {
    "text": "of logic execution because it's an interrupt and because it is in interrupts EDRs do not handle it really",
    "start": "1090960",
    "end": "1097530"
  },
  {
    "text": "well so essentially you divide by zero but you recover from it in this case right and that that is very useful and so then",
    "start": "1097530",
    "end": "1106650"
  },
  {
    "text": "you can start protecting your payloads that you bring in in you know throughout your libraries that you shine to",
    "start": "1106650",
    "end": "1111930"
  },
  {
    "text": "instrument you can remove LD preload from environmental variables you can do encryption of the memory you can do",
    "start": "1111930",
    "end": "1118260"
  },
  {
    "text": "situational checks you can do anything you want if you load it prior to execution in with LD load with",
    "start": "1118260",
    "end": "1125310"
  },
  {
    "text": "constructors with elf sections and so on and so forth you can even change the loader LD dot s so is not the only",
    "start": "1125310",
    "end": "1132840"
  },
  {
    "text": "loader they can load the executables so you can stuff your lawyer into the section interpreter on the elf right and",
    "start": "1132840",
    "end": "1141060"
  },
  {
    "text": "so if ETRS instrumenting the loader that will not see your execution and so what",
    "start": "1141060",
    "end": "1147420"
  },
  {
    "text": "can we do with this let's move a little further let's hide from things right like let's expand our foothold now you",
    "start": "1147420",
    "end": "1157260"
  },
  {
    "text": "can use LD I mentioned the LD - data so as a loader you can use that in",
    "start": "1157260",
    "end": "1163410"
  },
  {
    "text": "conjunction with other utilities on the Box directly right you can bounce off of",
    "start": "1163410",
    "end": "1169350"
  },
  {
    "text": "the LD loader you can bounce off of the busy box executable and you can basically execute code directly without",
    "start": "1169350",
    "end": "1175230"
  },
  {
    "text": "having any tools on the box let's look at the examples of how that's done very contrived example but essentially we are",
    "start": "1175230",
    "end": "1182610"
  },
  {
    "text": "chaining execution of the loader to the busy box and then we're basically saying",
    "start": "1182610",
    "end": "1187710"
  },
  {
    "text": "okay well ET our trace that you know the whole thing you jump from three executables at the same time perhaps you",
    "start": "1187710",
    "end": "1194100"
  },
  {
    "text": "escaped into VI which switches the terminal mode which gives you tty preferences and then you switch out of a",
    "start": "1194100",
    "end": "1200130"
  },
  {
    "text": "deck you think's so essentially the idea is that for us is to break that trust and break that story that EDR is trying to",
    "start": "1200130",
    "end": "1206519"
  },
  {
    "text": "make now there are more things that we can do we can evade ADR in better ways",
    "start": "1206519",
    "end": "1214890"
  },
  {
    "text": "we can evade into reflection what what does that mean well some stacks that",
    "start": "1214890",
    "end": "1220649"
  },
  {
    "text": "execute on the bonnie box may have its own virtual machines and for example if you're switching technical stacks within",
    "start": "1220649",
    "end": "1227309"
  },
  {
    "text": "the same program you're calling a goal language you call in python maybe call some other things with common were",
    "start": "1227309",
    "end": "1234690"
  },
  {
    "text": "foreign foreign function interface then edr gets confused and it needs to it",
    "start": "1234690",
    "end": "1241500"
  },
  {
    "text": "cannot follow its own chain right how do you switch the VM you know the representation of the virtual memory",
    "start": "1241500",
    "end": "1247649"
  },
  {
    "text": "addresses is completely different and so that helps you as well let's look at how that's done well you can you know your",
    "start": "1247649",
    "end": "1256019"
  },
  {
    "text": "your your libraries can be preload pre-loaded in such a way that you can actually create a contract with FFI for",
    "start": "1256019",
    "end": "1264299"
  },
  {
    "text": "example in this case go you can invoke its library and before it gets to mean it has to go through the go runtime and",
    "start": "1264299",
    "end": "1271639"
  },
  {
    "text": "digital forensics will have to contend with about 2,000 plus functions to reverse engineer until it actually gets",
    "start": "1271639",
    "end": "1278909"
  },
  {
    "text": "to main execution so that's very useful the other thing is you can you can actually compiled statically your",
    "start": "1278909",
    "end": "1285350"
  },
  {
    "text": "interpreter language inside of the library that you're promoting right it's very useful because again we're",
    "start": "1285350",
    "end": "1291240"
  },
  {
    "text": "switching virtual machines were switching how we execute and we break in the story of things just an abstraction",
    "start": "1291240",
    "end": "1298169"
  },
  {
    "text": "level that you can follow this is another tip for you so what we've done",
    "start": "1298169",
    "end": "1303299"
  },
  {
    "text": "right now is we've taken a an executable /bin slash LS or little tiny sliver of",
    "start": "1303299",
    "end": "1309510"
  },
  {
    "text": "our code our cradle our bootstrap and essentially we create this monster of different things that you can actually",
    "start": "1309510",
    "end": "1315570"
  },
  {
    "text": "do with this executable right we do not ask what elf can do for you but you ask",
    "start": "1315570",
    "end": "1320909"
  },
  {
    "text": "what you can do to that elf right and then we can just run with that now in",
    "start": "1320909",
    "end": "1327149"
  },
  {
    "text": "the stage - let's talk about weaponization because this is while we have all these concepts and tools and",
    "start": "1327149",
    "end": "1333070"
  },
  {
    "text": "and tips of how you're gonna create your malware how do you actually weaponize",
    "start": "1333070",
    "end": "1338380"
  },
  {
    "text": "things on the box well the way you can do this is you can start creating your uber pre loaders we now know that we can",
    "start": "1338380",
    "end": "1346179"
  },
  {
    "text": "actually use LD preload to load our malware but how do we actually do this how do we deploy that preloader to the",
    "start": "1346179",
    "end": "1353139"
  },
  {
    "text": "defense to the target box well executing / bit / LS is really easy",
    "start": "1353139",
    "end": "1359409"
  },
  {
    "text": "right we've talked about the loading library before it starts but how you account for the fact that LS takes an",
    "start": "1359409",
    "end": "1367659"
  },
  {
    "text": "argument the argument gets eaten by LS itself and you should not be able to you know do anything useful for it well it",
    "start": "1367659",
    "end": "1375159"
  },
  {
    "text": "turns out that we can actually solve that issue by moving back in the in our",
    "start": "1375159",
    "end": "1382299"
  },
  {
    "text": "uber preloader via environmental variables are outside of of the realm of",
    "start": "1382299",
    "end": "1388750"
  },
  {
    "text": "the executable arguments into environmental variables and taking things from there so essentially in this",
    "start": "1388750",
    "end": "1395500"
  },
  {
    "text": "case we're executing slash bin slash LS and we're loading it with let's say",
    "start": "1395500",
    "end": "1401620"
  },
  {
    "text": "malware right but we also load more things other marginal in our malware and",
    "start": "1401620",
    "end": "1406840"
  },
  {
    "text": "we're basically saying okay LS runs but against all this functionality and",
    "start": "1406840",
    "end": "1412629"
  },
  {
    "text": "features from our preloader right so we can solve that that issue now let's dive",
    "start": "1412629",
    "end": "1420879"
  },
  {
    "text": "deeper into pre loaders those chains that we're talking about you know the",
    "start": "1420879",
    "end": "1426610"
  },
  {
    "text": "chain that basically loads multiple libraries it can do anything you know",
    "start": "1426610",
    "end": "1432580"
  },
  {
    "text": "regular executable can because you're promoting at the constructor level you're loading up at the elf level",
    "start": "1432580",
    "end": "1437980"
  },
  {
    "text": "sometimes or are you loading it in in delayed fashion for example at a signal that you send to the target executable",
    "start": "1437980",
    "end": "1444539"
  },
  {
    "text": "well you know you can start cleaning up your stack by basically toggling two FFI",
    "start": "1444539",
    "end": "1451629"
  },
  {
    "text": "right the Google I'm sorry the the go link that we're talking about we can switch IPC mechanisms we can type things",
    "start": "1451629",
    "end": "1458230"
  },
  {
    "text": "in and out of that executable but using shared memory we can use sockets we can basically create a very elaborate",
    "start": "1458230",
    "end": "1465639"
  },
  {
    "text": "preloader that way so one small issue with that",
    "start": "1465639",
    "end": "1471879"
  },
  {
    "text": "as you may notice we're executing from the disk so essentially at some point",
    "start": "1471879",
    "end": "1477249"
  },
  {
    "text": "you still need to drop some form of an executable or a library into the machine and that's a problem because the the",
    "start": "1477249",
    "end": "1484629"
  },
  {
    "text": "disk is being watched right EDRs are saying well is this a malware they just ended up being on the box we talked",
    "start": "1484629",
    "end": "1489789"
  },
  {
    "text": "about proactive execution context where you are basically acquiescing in the box",
    "start": "1489789",
    "end": "1497320"
  },
  {
    "text": "and saying okay should that executable be there should it not that's done on disk right so if",
    "start": "1497320",
    "end": "1502389"
  },
  {
    "text": "you drop it it's an issue now so what's the solution the solution is to execute",
    "start": "1502389",
    "end": "1508690"
  },
  {
    "text": "everything in memory right well you can load code in memory and and you know",
    "start": "1508690",
    "end": "1515019"
  },
  {
    "text": "your operating system is gonna be really happy there are facilities to do so but once you start talking about executing",
    "start": "1515019",
    "end": "1520809"
  },
  {
    "text": "things from memory this is where your operating system is going to fight you right it does not like doing that",
    "start": "1520809",
    "end": "1526600"
  },
  {
    "text": "certainly let's make that happen right let's let's try to overcome that there",
    "start": "1526600",
    "end": "1532149"
  },
  {
    "text": "are facilities and Linux to to execute things from memory that historical there",
    "start": "1532149",
    "end": "1537610"
  },
  {
    "text": "have been a few of them shared memory through def s hm you can also M map your",
    "start": "1537610",
    "end": "1543909"
  },
  {
    "text": "a library into memory space of the process but as of kernel 3.7 you get a",
    "start": "1543909",
    "end": "1551019"
  },
  {
    "text": "specific system call Cisco a system call of 256 slash 319 depending whether",
    "start": "1551019",
    "end": "1556779"
  },
  {
    "text": "you're running 32-bit or 64-bit and essentially what it does it basically says all right I'm going to map a piece",
    "start": "1556779",
    "end": "1565960"
  },
  {
    "text": "of memory into memory process into the memory of the process right and I'm going to send you a persistent",
    "start": "1565960",
    "end": "1573600"
  },
  {
    "text": "descriptor and you can use that descriptor to execute whatever is there",
    "start": "1573600",
    "end": "1578679"
  },
  {
    "text": "how does this even work well first you create the descriptor through MFG create and then you",
    "start": "1578679",
    "end": "1586029"
  },
  {
    "text": "basically Iran in exact on it that's not a new technique it's been used before but what's valuable here is you're",
    "start": "1586029",
    "end": "1592659"
  },
  {
    "text": "gaining exposure to a proc self file descriptor right when you load the",
    "start": "1592659",
    "end": "1598419"
  },
  {
    "text": "things in memory and you're actually that that description descriptor out",
    "start": "1598419",
    "end": "1603619"
  },
  {
    "text": "let's see how we can use that feature or that side-effect of execution or mapping",
    "start": "1603619",
    "end": "1610350"
  },
  {
    "text": "the the memory through a memory create look what happens here we're taking our",
    "start": "1610350",
    "end": "1617539"
  },
  {
    "text": "uber preloaded pre-loaded that we've created before we're still executing",
    "start": "1617539",
    "end": "1622739"
  },
  {
    "text": "/bin slash LS we're still losing the we're still using the modules we're still using all the facilities of the",
    "start": "1622739",
    "end": "1630480"
  },
  {
    "text": "preloader but instead of loading the module from disk in this case is shin",
    "start": "1630480",
    "end": "1636029"
  },
  {
    "text": "data so you're loading it from a memory location by a descriptor and the only",
    "start": "1636029",
    "end": "1644399"
  },
  {
    "text": "question that you have to ask how in the world does this process interact with that descriptor how does it find it what",
    "start": "1644399",
    "end": "1650850"
  },
  {
    "text": "is it how do I actually invoke memory space of a different process I have boundaries right I have to have some",
    "start": "1650850",
    "end": "1658769"
  },
  {
    "text": "relationship to invoke and to find this descriptor in some other memory process",
    "start": "1658769",
    "end": "1663960"
  },
  {
    "text": "here so let's talk about that a little bit and before we do that a little side",
    "start": "1663960",
    "end": "1670259"
  },
  {
    "text": "note this talk is called zombie ants zombie and farming and the inspiration",
    "start": "1670259",
    "end": "1675330"
  },
  {
    "text": "for this technique actually came from natural phenomenon where there's a species of carpenter carpenter ants that",
    "start": "1675330",
    "end": "1683249"
  },
  {
    "text": "get really bad well they can get infected by a virus",
    "start": "1683249",
    "end": "1689369"
  },
  {
    "text": "and that virus essentially what it does it uses the and it's a paradise the",
    "start": "1689369",
    "end": "1696629"
  },
  {
    "text": "parrot parasite and its uses the ant as its host right and what it does it basically compels the ant to go up climb",
    "start": "1696629",
    "end": "1705059"
  },
  {
    "text": "up the vegetation bite on a leaf and then it releases it to die right and",
    "start": "1705059",
    "end": "1710549"
  },
  {
    "text": "then so basically the the spores fly out and it starts in the invading other ants",
    "start": "1710549",
    "end": "1717269"
  },
  {
    "text": "that are under in the understory of that force the curious part about it about",
    "start": "1717269",
    "end": "1724109"
  },
  {
    "text": "this whole cycle is that obviously we do not like killed ants but the one thing",
    "start": "1724109",
    "end": "1729809"
  },
  {
    "text": "that we like about that is the fact that specific virus does not kill the ant",
    "start": "1729809",
    "end": "1735289"
  },
  {
    "text": "directly it does not affect its nervous system what it does it actually takes",
    "start": "1735289",
    "end": "1740369"
  },
  {
    "text": "control of the muscles so essentially you are turning our chorus a pastor is is turning the ant",
    "start": "1740369",
    "end": "1747179"
  },
  {
    "text": "into a zombie and then the ant starts climbing just by pure muscle movement so",
    "start": "1747179",
    "end": "1753090"
  },
  {
    "text": "this is specifically what we're gonna do here moving forward we're gonna use the system libraries of binaries as decoys",
    "start": "1753090",
    "end": "1759659"
  },
  {
    "text": "and we're gonna compel them to execute what we want in a more generic fashion now enter zombie ant farm zombie ant",
    "start": "1759659",
    "end": "1767730"
  },
  {
    "text": "farm is an out of target warehouse and broker for your payloads that runs in a",
    "start": "1767730",
    "end": "1774539"
  },
  {
    "text": "completely different memory space and it exposes its memory space to processes",
    "start": "1774539",
    "end": "1780779"
  },
  {
    "text": "for interaction we talked about the proc FG descriptors and this is what we're",
    "start": "1780779",
    "end": "1787470"
  },
  {
    "text": "gonna do here and accept the commands and then basically use this cross process memory to infect other other",
    "start": "1787470",
    "end": "1793830"
  },
  {
    "text": "other hosts on the other programs on that host let's see how that works well",
    "start": "1793830",
    "end": "1799769"
  },
  {
    "text": "you know in order for you to do this you have to understand that go back to this",
    "start": "1799769",
    "end": "1805200"
  },
  {
    "text": "parent and child relationship and Linux your parent can know the child products",
    "start": "1805200",
    "end": "1812909"
  },
  {
    "text": "system right it can introspect the file descriptors and the child also can refer to the parent back and say hey parent",
    "start": "1812909",
    "end": "1819809"
  },
  {
    "text": "what are you running what descriptors do you have available so we can use that specific effort in this case we what",
    "start": "1819809",
    "end": "1829169"
  },
  {
    "text": "we're doing is we're taking our SF zombie ant farm and we're launching it into the memory",
    "start": "1829169",
    "end": "1835799"
  },
  {
    "text": "and then somehow we get the malware into that process but the preloader that uber",
    "start": "1835799",
    "end": "1841679"
  },
  {
    "text": "preloader that we're targeting is referencing its parent or any other relationship that it has with the other",
    "start": "1841679",
    "end": "1848190"
  },
  {
    "text": "process to find the descriptors where that malware is located and loaded",
    "start": "1848190",
    "end": "1853440"
  },
  {
    "text": "through mam FD create and so what happens is an LD module weren't what it",
    "start": "1853440",
    "end": "1858629"
  },
  {
    "text": "tries to find the malware it instead of going to the disk it says his off fetch me a malware and by the way",
    "start": "1858629",
    "end": "1866220"
  },
  {
    "text": "do not stream the malware to me but just simply expose where you're storing it give me a pointer to your memory space",
    "start": "1866220",
    "end": "1873120"
  },
  {
    "text": "and I'm gonna use it this is what that specific PID is on Linux and that's how",
    "start": "1873120",
    "end": "1878880"
  },
  {
    "text": "we're able to separate the broker and the payload from the executor from the",
    "start": "1878880",
    "end": "1884309"
  },
  {
    "text": "EGR perspective again we're keeping in the back of our mind is that we have to break the story for the EDR now we're",
    "start": "1884309",
    "end": "1890220"
  },
  {
    "text": "working with two processes in EGR has to make sense of both sides and has to make sense of the transfer of the payload the",
    "start": "1890220",
    "end": "1897210"
  },
  {
    "text": "malware between the two processes it's very hard for them to do at the moment and so the big picture of Zef broker is",
    "start": "1897210",
    "end": "1905250"
  },
  {
    "text": "that it it launches into the memory uber",
    "start": "1905250",
    "end": "1910470"
  },
  {
    "text": "pelo / preload asks go fetch me a payload from elsewhere it doesn't matter",
    "start": "1910470",
    "end": "1916740"
  },
  {
    "text": "whether it's networks target anywhere or maybe it's any other memory space because you can chain them out as well",
    "start": "1916740",
    "end": "1922110"
  },
  {
    "text": "but using the same methods as we've discussed and by the way that preload",
    "start": "1922110",
    "end": "1927929"
  },
  {
    "text": "that uber preloader is going to instrument a victim write executable for",
    "start": "1927929",
    "end": "1935010"
  },
  {
    "text": "example slash bin slash LS to do is bidding right - to basically do whatever it needs to do so slash bin slash LS",
    "start": "1935010",
    "end": "1942710"
  },
  {
    "text": "whitelisted executable gets infected it gets loaded with malware and by the way",
    "start": "1942710",
    "end": "1950580"
  },
  {
    "text": "the small work comes from something that EDR does not see okay now we can even go",
    "start": "1950580",
    "end": "1957870"
  },
  {
    "text": "one step further how do we get zeph on the box it's also an executable or it's",
    "start": "1957870",
    "end": "1963299"
  },
  {
    "text": "a dynamic library how do we deal with this right we're we're we're paint catch and we were playing catch-22 you can't",
    "start": "1963299",
    "end": "1969360"
  },
  {
    "text": "get one binary on the box because it gets detected to get other box other binary on the box because it gets",
    "start": "1969360",
    "end": "1975870"
  },
  {
    "text": "detected and so on so forth well memorably create is also available for",
    "start": "1975870",
    "end": "1981840"
  },
  {
    "text": "scripting through the for example in Python that's available through foreign function interface so you can easily",
    "start": "1981840",
    "end": "1989130"
  },
  {
    "text": "just drop a interpreter script which is just piece of text on any Linux box that",
    "start": "1989130",
    "end": "1994409"
  },
  {
    "text": "has Python support and you can actually load Zef itself into the memory by",
    "start": "1994409",
    "end": "1999929"
  },
  {
    "text": "okay I go fetch me from fetch it from some URL and all I'm bringing in is just a piece of text which is my Python",
    "start": "1999929",
    "end": "2006289"
  },
  {
    "text": "script which is really powerful and so I called PI preload essentially what it",
    "start": "2006289",
    "end": "2013399"
  },
  {
    "text": "does it says go fetch me a shared object or executable from a remote location and",
    "start": "2013399",
    "end": "2019190"
  },
  {
    "text": "by the way as you're starting in you know use a decoy for example call yourself a bash and execute slash bin",
    "start": "2019190",
    "end": "2026090"
  },
  {
    "text": "slash LS preloaded with that payload okay so what defense sees is that it",
    "start": "2026090",
    "end": "2031220"
  },
  {
    "text": "sees bash executing a little LS without anything external anything living on the",
    "start": "2031220",
    "end": "2037070"
  },
  {
    "text": "disk right everything is done in memory so we do not use any batch functionality per se or just because we're just using",
    "start": "2037070",
    "end": "2043519"
  },
  {
    "text": "it as a decoy as mimicry so it looks good for the threat hunters and so you",
    "start": "2043519",
    "end": "2050540"
  },
  {
    "text": "know the mechanism of loading Zeff is exactly the same instead of loading a library from external location we can",
    "start": "2050540",
    "end": "2057440"
  },
  {
    "text": "use PI preload is a piece of Python script to load Zef into the memory and then it itself will start unraveling the",
    "start": "2057440",
    "end": "2064099"
  },
  {
    "text": "chain of infection for all the executables that you guys want to do",
    "start": "2064099",
    "end": "2070628"
  },
  {
    "text": "visual of it is is such that for example PI preload goes out and says load miss F",
    "start": "2070720",
    "end": "2077888"
  },
  {
    "text": "load it into the memory have a broker into the memory that we can go to and",
    "start": "2077889",
    "end": "2084349"
  },
  {
    "text": "ask for malware the the uber preloader says okay go get me the malware from",
    "start": "2084349",
    "end": "2090559"
  },
  {
    "text": "another location store it in your memory give me the process ID and give me the location the process descriptor and I'm",
    "start": "2090559",
    "end": "2097819"
  },
  {
    "text": "going to use them to to infect other things so we create this elaborate elaborate farm where we're basically",
    "start": "2097819",
    "end": "2105700"
  },
  {
    "text": "generating and trying to work with system executables that are whitelisted or something that is innocuous and we're",
    "start": "2105700",
    "end": "2112400"
  },
  {
    "text": "trying to basically instrument in such a way that they are executing what we want yet EDR does not see that so let's do a",
    "start": "2112400",
    "end": "2121400"
  },
  {
    "text": "little demo here of that functionality as we go through the demo keep this",
    "start": "2121400",
    "end": "2130369"
  },
  {
    "text": "mental picture in mind where the PI promoter gear Zef and then it gets loaded into memory",
    "start": "2130369",
    "end": "2135690"
  },
  {
    "text": "and then all the things that we've talked about the first order of business",
    "start": "2135690",
    "end": "2144720"
  },
  {
    "text": "is to fetch the remote binary and execute it from memory the way you do this your essential let's watch that",
    "start": "2144720",
    "end": "2151740"
  },
  {
    "text": "nothing gets dropped down the box then what we can do we can start the simple HTTP URL server and then we are",
    "start": "2151740",
    "end": "2160680"
  },
  {
    "text": "basically going to it and fetching the malicious LS through pipe reload that",
    "start": "2160680",
    "end": "2166230"
  },
  {
    "text": "gets LS into the memory it gets executed notice the proc location what gives goes",
    "start": "2166230",
    "end": "2171840"
  },
  {
    "text": "from it execute it in memory nothing is dropped on the box on the other screen so we're running in the memory LS",
    "start": "2171840",
    "end": "2178890"
  },
  {
    "text": "basically says I'm good now we're gonna load the remote library inject it and do",
    "start": "2178890",
    "end": "2185220"
  },
  {
    "text": "exactly the same thing so LD preload in the regular iteration it takes a library",
    "start": "2185220",
    "end": "2191280"
  },
  {
    "text": "and basically preloaded into LS and we can see that then we're watching our disk again and then we're starting in",
    "start": "2191280",
    "end": "2198720"
  },
  {
    "text": "the the web server to fetch the payload in this case it's it's library we notify",
    "start": "2198720",
    "end": "2204600"
  },
  {
    "text": "pipe reload that's library we are notifying what we're gonna decorate it as and what we're gonna run it and then",
    "start": "2204600",
    "end": "2211830"
  },
  {
    "text": "maybe we can send some some some things to LS itself right that runs on about so essentially you are executing the",
    "start": "2211830",
    "end": "2219030"
  },
  {
    "text": "preload that gets your malware executed on the box yet LS actually works and it",
    "start": "2219030",
    "end": "2225090"
  },
  {
    "text": "executes as well you can kill LS but you don't have to and then the other thing",
    "start": "2225090",
    "end": "2230670"
  },
  {
    "text": "is to actually do the same thing with zev that load that broker into the memory and then start unraveling that",
    "start": "2230670",
    "end": "2237300"
  },
  {
    "text": "chain let's see how that works here same process starting the HTTP server we're",
    "start": "2237300",
    "end": "2245280"
  },
  {
    "text": "loading Zeff specified as a binary we're going to decorate this bash now we have",
    "start": "2245280",
    "end": "2250530"
  },
  {
    "text": "a memory footprint for Zef it runs as a process we can see that it has a socket",
    "start": "2250530",
    "end": "2256320"
  },
  {
    "text": "open to to get our commands we can actually ask for it to load malware and then we have like like a little script",
    "start": "2256320",
    "end": "2264270"
  },
  {
    "text": "that basically says hey they have go and get me a malicious last from elsewhere and then when we do",
    "start": "2264270",
    "end": "2270610"
  },
  {
    "text": "that we can actually list the modules that Zev SF has in its memory space and",
    "start": "2270610",
    "end": "2276780"
  },
  {
    "text": "we'll see that LS is loaded as a specific file descriptor which is f is",
    "start": "2276780",
    "end": "2282640"
  },
  {
    "text": "exposing through its memory space that's mmm FG create that we're talking about",
    "start": "2282640",
    "end": "2288630"
  },
  {
    "text": "okay and then so now instead of executing disk binary what we're doing",
    "start": "2288630",
    "end": "2295810"
  },
  {
    "text": "we're executing a specific descriptor that is exposed to the throws F right",
    "start": "2295810",
    "end": "2300970"
  },
  {
    "text": "essentially what we're doing we're going to its memory process and we're saying okay well eg are go try to figure that",
    "start": "2300970",
    "end": "2307450"
  },
  {
    "text": "out and then the other thing is that we can we can actually start chaining",
    "start": "2307450",
    "end": "2315460"
  },
  {
    "text": "things same same thing here started the",
    "start": "2315460",
    "end": "2321430"
  },
  {
    "text": "server we still have our MFG with LS and",
    "start": "2321430",
    "end": "2328920"
  },
  {
    "text": "we're asking to load a library that's not an executable just a dynamic library that we can you know do anything with",
    "start": "2328920",
    "end": "2335800"
  },
  {
    "text": "and it opens up another descriptor number seven for example in zaps memory process and then essentially we are",
    "start": "2335800",
    "end": "2344050"
  },
  {
    "text": "doing LD preload with a proc just like the executional in this case we're actually going one step further and",
    "start": "2344050",
    "end": "2350140"
  },
  {
    "text": "we're executing system LS with LD",
    "start": "2350140",
    "end": "2355330"
  },
  {
    "text": "pre-loaded library from remote location and you can kind of see that there are",
    "start": "2355330",
    "end": "2360970"
  },
  {
    "text": "two modules that are loaded and self split of functionality the broker the",
    "start": "2360970",
    "end": "2366190"
  },
  {
    "text": "executor the preloader the binary that we're trying to in fact",
    "start": "2366190",
    "end": "2373440"
  },
  {
    "text": "[Applause]",
    "start": "2373440",
    "end": "2378740"
  },
  {
    "text": "okay so let's go back and let's see what",
    "start": "2378740",
    "end": "2388920"
  },
  {
    "text": "else we can do some other thing that you know that is being researched right now and we're trying to move the needle",
    "start": "2388920",
    "end": "2395700"
  },
  {
    "text": "further in to counter the ER detection is that we can work with a random with a",
    "start": "2395700",
    "end": "2403800"
  },
  {
    "text": "SLR a SLR on Linux basically it says okay well it's address and address memory space rather than randomization",
    "start": "2403800",
    "end": "2411000"
  },
  {
    "text": "when library is loaded from remote location gets launched into the memory process they they get assigned a memory",
    "start": "2411000",
    "end": "2417780"
  },
  {
    "text": "location and that memory location changes every time the binary started right so any time you run up in LS with",
    "start": "2417780",
    "end": "2424830"
  },
  {
    "text": "pre-loaded library that library is going to be at a different memory location that is the feature secure security",
    "start": "2424830",
    "end": "2430590"
  },
  {
    "text": "feature of Linux operating system of the loader now can we disable a SLR that's the",
    "start": "2430590",
    "end": "2437550"
  },
  {
    "text": "question why would we want to do this well because we can predict memory locations why do we need to predict",
    "start": "2437550",
    "end": "2442860"
  },
  {
    "text": "memory locations because we can even delay the loading of payloads and acts and exploits into the binaries that we",
    "start": "2442860",
    "end": "2452060"
  },
  {
    "text": "pretty much bring in like cradles for example we bring in a very very clean cradle and defer gets against the binary",
    "start": "2452060",
    "end": "2460020"
  },
  {
    "text": "reverse engineers there is no payload there is no shared object there is no nothing there but it has a very curious",
    "start": "2460020",
    "end": "2467360"
  },
  {
    "text": "space of a buffer for example 400 bytes that gets allocated to zeros and there's",
    "start": "2467360",
    "end": "2472650"
  },
  {
    "text": "nothing going on with it now normally we cannot target that memory location because we do not know what that memory",
    "start": "2472650",
    "end": "2479100"
  },
  {
    "text": "location is at the runtime because it changes because a SLR so what we do with we can weaken the executable we can",
    "start": "2479100",
    "end": "2485580"
  },
  {
    "text": "actually change its personality but using a flag on set personality call",
    "start": "2485580",
    "end": "2493350"
  },
  {
    "text": "called address no randomize and because the child and parent relationship still stays what we do we fork the process we",
    "start": "2493350",
    "end": "2502290"
  },
  {
    "text": "change the personality then we exact the process with the SLR disabled and we",
    "start": "2502290",
    "end": "2507900"
  },
  {
    "text": "launch it in memory with the code cave that should be able to receive some formula a right from our",
    "start": "2507900",
    "end": "2514479"
  },
  {
    "text": "third party process elsewhere and we do this with a feature called first memory",
    "start": "2514479",
    "end": "2520119"
  },
  {
    "text": "attached right it's it's a it's an address it's an address to address user",
    "start": "2520119",
    "end": "2525789"
  },
  {
    "text": "space right from one process to another visually that looks like this right if",
    "start": "2525789",
    "end": "2531130"
  },
  {
    "text": "with ASL are enabled any time you launch a process it gets a different memory",
    "start": "2531130",
    "end": "2536739"
  },
  {
    "text": "space location but with ASL are disabled together exactly the same memory location for the buffer that you're",
    "start": "2536739",
    "end": "2542890"
  },
  {
    "text": "trying to - right - right then you can do this exactly again with parent and",
    "start": "2542890",
    "end": "2548410"
  },
  {
    "text": "child relationship you the parent Forks the child changes the personality and then it executes it by overriding its",
    "start": "2548410",
    "end": "2555459"
  },
  {
    "text": "memory space and then the Divya the process VM right is at our preloader",
    "start": "2555459",
    "end": "2561729"
  },
  {
    "text": "or Zeb or anything else that we talked about before it basically starts writing into the memory space and then",
    "start": "2561729",
    "end": "2567849"
  },
  {
    "text": "populating the the victim which has no SLR protection anymore with exploit that",
    "start": "2567849",
    "end": "2574329"
  },
  {
    "text": "we want right the number can use perhaps a signal to jump to location that we",
    "start": "2574329",
    "end": "2579819"
  },
  {
    "text": "already know to start the execution of the of the code that we're promoting so",
    "start": "2579819",
    "end": "2586229"
  },
  {
    "text": "the idea here is to give the Red Team operators or basically tools to be able",
    "start": "2586229",
    "end": "2594670"
  },
  {
    "text": "to evade EDR and from EDR technology and defenders to look at how things work so",
    "start": "2594670",
    "end": "2600339"
  },
  {
    "text": "they can actually pick up some ideas and start implementing defense in it so what",
    "start": "2600339",
    "end": "2607180"
  },
  {
    "text": "is the offensive summary here as we can see the pre-loading is really really viable evasion for system executables",
    "start": "2607180",
    "end": "2613989"
  },
  {
    "text": "okay you can bring in a sliver of code and then you can grow to proportions that",
    "start": "2613989",
    "end": "2619420"
  },
  {
    "text": "edr will not be able to deal with at least at the moment you can even in fact any system executable that you can start",
    "start": "2619420",
    "end": "2626170"
  },
  {
    "text": "with all these things that we talked about you can bring you can execute the",
    "start": "2626170",
    "end": "2632440"
  },
  {
    "text": "blended approach by assembling the attack right on the box but without having potentially compilers without",
    "start": "2632440",
    "end": "2638739"
  },
  {
    "text": "having all the introspection tools for destination executables that you're",
    "start": "2638739",
    "end": "2643930"
  },
  {
    "text": "trying to in fact you just take a vanilla /bin slash a last top CD whatever you want and do this we have split the",
    "start": "2643930",
    "end": "2650800"
  },
  {
    "text": "functionality of payload delivery in in two memory processes and we can actually toggle between them which is really",
    "start": "2650800",
    "end": "2657270"
  },
  {
    "text": "powerful because now we can do a customer service to malware writers to",
    "start": "2657270",
    "end": "2662680"
  },
  {
    "text": "give me the payload I'm gonna execute it we do want to use C foreign function interface to switch between VM stack and",
    "start": "2662680",
    "end": "2670780"
  },
  {
    "text": "technical stack as we go along to confuse EDRs even further defense please take note and for the red team operators",
    "start": "2670780",
    "end": "2679090"
  },
  {
    "text": "even though you have all these tools do not execute everything do not burn your",
    "start": "2679090",
    "end": "2684120"
  },
  {
    "text": "pillows do not burn your mechanisms if you do not need to this is done purely",
    "start": "2684120",
    "end": "2689800"
  },
  {
    "text": "to enhance the security of this space for EDRs to learn and for you to tell us",
    "start": "2689800",
    "end": "2695170"
  },
  {
    "text": "that and then from the malware writers and the red team operators I guess is that the takeaway is that you need to",
    "start": "2695170",
    "end": "2701650"
  },
  {
    "text": "protect your payloads and that's one of the ways of doing that because if you lose a payload that means you may lose",
    "start": "2701650",
    "end": "2707290"
  },
  {
    "text": "persistence you may lose a future opportunity to stay in a box all this code and all the examples the zombie ant",
    "start": "2707290",
    "end": "2715900"
  },
  {
    "text": "farm and pipe reloader and other things are available at this location will github it's open source you guys are",
    "start": "2715900",
    "end": "2723160"
  },
  {
    "text": "welcome to download and play with it it's it's also gonna be on Twitter if",
    "start": "2723160",
    "end": "2729970"
  },
  {
    "text": "you want to I can I can do that as well and so what can defense do right you",
    "start": "2729970",
    "end": "2736450"
  },
  {
    "text": "guys need to start implementing Linux capabilities B&L ass should not be launching sockets been LS should not be",
    "start": "2736450",
    "end": "2742390"
  },
  {
    "text": "listening to any my PC it's not what it's designed to do so do lock it down",
    "start": "2742390",
    "end": "2748200"
  },
  {
    "text": "define clearly what EDRs do for you in this environment they can do they cannot do everything it's a great technology",
    "start": "2748200",
    "end": "2754000"
  },
  {
    "text": "but use it cautiously and augment your efforts with other things defense please",
    "start": "2754000",
    "end": "2760180"
  },
  {
    "text": "provide a please provide objects into proc please do introspection into",
    "start": "2760180",
    "end": "2765550"
  },
  {
    "text": "dynamic loading please watch over IPC and please provide objects to process",
    "start": "2765550",
    "end": "2772060"
  },
  {
    "text": "library load this is very very important as you can see everything is done in memory right now and unless you do that",
    "start": "2772060",
    "end": "2778060"
  },
  {
    "text": "you're not going to be to see this and then Thursday and start thinking about quiescent gearboxes and",
    "start": "2778060",
    "end": "2783530"
  },
  {
    "text": "and and and doing prevention on you know things that should not be there even a single script as you've seen a Python",
    "start": "2783530",
    "end": "2790280"
  },
  {
    "text": "script can bring in the entire thing that will unravel the security of your",
    "start": "2790280",
    "end": "2795890"
  },
  {
    "text": "machine so with that I want to thank you for coming here and listen to my talk",
    "start": "2795890",
    "end": "2801560"
  },
  {
    "text": "and I can take questions",
    "start": "2801560",
    "end": "2804640"
  },
  {
    "text": "[Applause]",
    "start": "2806870",
    "end": "2810090"
  }
]