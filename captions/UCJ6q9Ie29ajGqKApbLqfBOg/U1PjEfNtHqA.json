[
  {
    "text": "[Music]",
    "start": "3750",
    "end": "16400"
  },
  {
    "text": "greetings everyone welcome to the talk portable document flaws 101",
    "start": "16400",
    "end": "21439"
  },
  {
    "text": "at a virtual blackhead conference in strange times",
    "start": "21439",
    "end": "26800"
  },
  {
    "text": "so my name is jens miller i'm a phd candidate at the university of bochum in germany and",
    "start": "27840",
    "end": "34160"
  },
  {
    "text": "today i'm going to give you an introduction to our current research which is a joint work from bohom on dangerous",
    "start": "34160",
    "end": "42320"
  },
  {
    "text": "features of pdf so in this briefing we will together",
    "start": "42320",
    "end": "47520"
  },
  {
    "text": "dive deep into the less known features of the pdf specification which can lead to",
    "start": "47520",
    "end": "53680"
  },
  {
    "text": "serious security flaws so in 45 minutes you may say well i didn't know that pdf",
    "start": "53680",
    "end": "60000"
  },
  {
    "text": "can actually do that okay so let's put on our",
    "start": "60000",
    "end": "66479"
  },
  {
    "text": "las vegas sunglasses and let's get started",
    "start": "66479",
    "end": "72400"
  },
  {
    "text": "also i'm introducing a new rule for this talk so whenever i'm going to show you a demo",
    "start": "72400",
    "end": "79280"
  },
  {
    "text": "we are all going to have a drink or a beer together and there's really going to be a lot of",
    "start": "79280",
    "end": "85439"
  },
  {
    "text": "demos in this briefing okay so here's an outline of today's",
    "start": "85439",
    "end": "90560"
  },
  {
    "text": "talk first i'm going to give you some background information on the pdf document structure and features so",
    "start": "90560",
    "end": "97920"
  },
  {
    "text": "you'll get a better understanding of the attacks to follow then i'm going to introduce",
    "start": "97920",
    "end": "104240"
  },
  {
    "text": "our four attack classes based on malicious documents that basically lead to denial of service",
    "start": "104240",
    "end": "111439"
  },
  {
    "text": "affecting the host on which the document is processed information disclosure attacks licking",
    "start": "111439",
    "end": "116719"
  },
  {
    "text": "personal data out of the victim's computer manipulation of data and even code",
    "start": "116719",
    "end": "122320"
  },
  {
    "text": "execution on the victim's machine and finally i'm going to provide an emulation",
    "start": "122320",
    "end": "128080"
  },
  {
    "text": "of those attacks on 28 popular pdf viewers as well as countermeasures for",
    "start": "128080",
    "end": "133760"
  },
  {
    "text": "developers okay let's start with some technical background",
    "start": "133760",
    "end": "138879"
  },
  {
    "text": "on pdf i guess we are all more or less familiar with the portable",
    "start": "138879",
    "end": "144879"
  },
  {
    "text": "document format which is basically a de facto standard for electronic",
    "start": "144879",
    "end": "150160"
  },
  {
    "text": "document exchange so pdf was developed in the early 90s by adobe and it's an iso",
    "start": "150160",
    "end": "156640"
  },
  {
    "text": "standard since 2008 with the current version being pdf 2.0",
    "start": "156640",
    "end": "162560"
  },
  {
    "text": "according to adobe 250 billion pdf documents have been opened in their product in one single year so i guess it's fair to",
    "start": "162560",
    "end": "170239"
  },
  {
    "text": "say that pdf is used in almost every company and institution out there",
    "start": "170239",
    "end": "177200"
  },
  {
    "text": "and it's definitely worse having a deeper look at the capabilities of potentially",
    "start": "177200",
    "end": "183280"
  },
  {
    "text": "malicious documents okay let's first have a look at a simple pdf",
    "start": "183280",
    "end": "190239"
  },
  {
    "text": "document so here's a minimal hello world pdf file opened in adobe reader however you can",
    "start": "190239",
    "end": "197680"
  },
  {
    "text": "also open this very same file using a text editor like vi for example and as you can see",
    "start": "197680",
    "end": "204480"
  },
  {
    "text": "here we can actually read and edit the document there may be some some binary parts like",
    "start": "204480",
    "end": "211200"
  },
  {
    "text": "graphics or compressed data streams but the structure of a pdf file is basically plain text so you can read",
    "start": "211200",
    "end": "218159"
  },
  {
    "text": "strings maybe like hello world on an abstract level each pdf document",
    "start": "218159",
    "end": "224239"
  },
  {
    "text": "consists of four parts first of all it's a header which is only one line",
    "start": "224239",
    "end": "229760"
  },
  {
    "text": "containing the pdf version of the document like 1.7",
    "start": "229760",
    "end": "235439"
  },
  {
    "text": "a cross reference sorry a body which contains a definition of pages of the document and and the actual",
    "start": "235439",
    "end": "242959"
  },
  {
    "text": "content this is the most important part also a cross reference section which contains an index table",
    "start": "242959",
    "end": "249920"
  },
  {
    "text": "defining the offsets of all the documents of all the objects within that document",
    "start": "249920",
    "end": "255599"
  },
  {
    "text": "and finally a trailer which contains some more information such as a reference to the root element of",
    "start": "255599",
    "end": "261600"
  },
  {
    "text": "the document so pdf documents they are actually processed from the bottom to the top",
    "start": "261600",
    "end": "269600"
  },
  {
    "text": "now let's have a look at some related work so in the past when talking about pdf",
    "start": "269600",
    "end": "275360"
  },
  {
    "text": "security we have seen various things like for example we've seen the recent attacks on pdf",
    "start": "275360",
    "end": "281040"
  },
  {
    "text": "encryption and also on pdf signatures which we both demonstrated",
    "start": "281040",
    "end": "286320"
  },
  {
    "text": "last year but also in the context of pdf what happens very often is that companies and",
    "start": "286320",
    "end": "293520"
  },
  {
    "text": "institutions they publish pdf documents that are somewhat poorly redacted",
    "start": "293520",
    "end": "298639"
  },
  {
    "text": "and thereby reveal sensitive information this happens very often because content",
    "start": "298639",
    "end": "305039"
  },
  {
    "text": "objects are usually not deleted if the file is edited they're simply not referenced",
    "start": "305039",
    "end": "311199"
  },
  {
    "text": "anymore and then this allows you to recover previous revisions of a document",
    "start": "311199",
    "end": "316960"
  },
  {
    "text": "a comprehensive study was for example performed by simon garfield by simon garfinkel and by many others",
    "start": "316960",
    "end": "325280"
  },
  {
    "text": "also we have seen some metadata issues that reveal the original author of a document which is",
    "start": "325280",
    "end": "331120"
  },
  {
    "text": "not always desired so such issues they were presented for example",
    "start": "331120",
    "end": "336560"
  },
  {
    "text": "at black blackhead 2008 by shema alonso and finally we have seen a lot of",
    "start": "336560",
    "end": "342080"
  },
  {
    "text": "research on polycloth pdf files that are also valid images or other file types because",
    "start": "342080",
    "end": "348320"
  },
  {
    "text": "the pdf header does not have to start at the beginning of a file",
    "start": "348320",
    "end": "353360"
  },
  {
    "text": "as demonstrated for example by orange albertini",
    "start": "353360",
    "end": "358720"
  },
  {
    "text": "now in this talk we'll focus on insecure features of pdf and when you study the pdf",
    "start": "358720",
    "end": "365600"
  },
  {
    "text": "specification for interesting features you will quickly stumble upon pdf actions",
    "start": "365600",
    "end": "373440"
  },
  {
    "text": "which are used for various purposes such as for external links",
    "start": "373440",
    "end": "378880"
  },
  {
    "text": "or to navigate for example to a certain page within the document and even",
    "start": "378880",
    "end": "385440"
  },
  {
    "text": "javascript within pdf is actually defined as a pdf action now all those actions that can be",
    "start": "385440",
    "end": "392639"
  },
  {
    "text": "triggered using native pdf events for example when opening closing or in printing the document",
    "start": "392639",
    "end": "401520"
  },
  {
    "text": "and most actions they can have a pdf file specification as a target which could be for example a",
    "start": "401680",
    "end": "408080"
  },
  {
    "text": "ul in order to define a hyperlink",
    "start": "408080",
    "end": "412960"
  },
  {
    "text": "okay so we systematically started the pdf specification for pdf actions and",
    "start": "414080",
    "end": "420479"
  },
  {
    "text": "for events that can trigger them and then we try to visualize um all those findings",
    "start": "420479",
    "end": "427360"
  },
  {
    "text": "resulting in my whiteboard being filled up with a complete mess",
    "start": "427360",
    "end": "433520"
  },
  {
    "text": "so here's a more clean representation and this is basically the most important",
    "start": "433840",
    "end": "440960"
  },
  {
    "text": "slide of the talk which will follow us over and over again",
    "start": "440960",
    "end": "446080"
  },
  {
    "text": "so we identified four special objects which allow you to call arbitrary actions",
    "start": "446080",
    "end": "452240"
  },
  {
    "text": "which is page annotations fields and catalog as shown in the upper part",
    "start": "452240",
    "end": "457599"
  },
  {
    "text": "we call those events now for calling an action most objects they offer multiple",
    "start": "457599",
    "end": "463520"
  },
  {
    "text": "alternatives for example here the catalog object defines the open action event",
    "start": "463520",
    "end": "469520"
  },
  {
    "text": "but also an additional action aas events",
    "start": "469520",
    "end": "474639"
  },
  {
    "text": "and each event can now launch any sequence of pdf actions which are depicted in the",
    "start": "474639",
    "end": "481280"
  },
  {
    "text": "middle part the meaning of the action will come to that later",
    "start": "481280",
    "end": "486560"
  },
  {
    "text": "and the target of an action can be a file handle or to be more technical a pdf",
    "start": "486720",
    "end": "493120"
  },
  {
    "text": "file specification which is a multi-purpose object that can be either an embedded",
    "start": "493120",
    "end": "498960"
  },
  {
    "text": "file so a data stream within the document a local file on disk",
    "start": "498960",
    "end": "504560"
  },
  {
    "text": "a remote url or even a network share depending on the parameters and the",
    "start": "504560",
    "end": "509759"
  },
  {
    "text": "context now if a pass from an event over an",
    "start": "509759",
    "end": "515279"
  },
  {
    "text": "action to a file handle and exists and is not explicitly blocked by the application",
    "start": "515279",
    "end": "520399"
  },
  {
    "text": "opening the document this may result for example in file system access or in ul",
    "start": "520399",
    "end": "526720"
  },
  {
    "text": "invocation as we'll see later but before coming to the actual attacks",
    "start": "526720",
    "end": "533200"
  },
  {
    "text": "let me introduce our attacker model so our attack scenario is as follows all the victim has to do",
    "start": "533200",
    "end": "541600"
  },
  {
    "text": "is to open a malicious document provided by the attacker",
    "start": "541600",
    "end": "546640"
  },
  {
    "text": "this is a realistic scenario because pdf is generally considered as relatively safe and even sophisticated",
    "start": "546640",
    "end": "553600"
  },
  {
    "text": "uses they download and open pdf files from untrusted sources like email attachments or the internet",
    "start": "553600",
    "end": "560480"
  },
  {
    "text": "for example invoices placket slides blackhead whitepapers and so on are provided as pdf files",
    "start": "560480",
    "end": "568160"
  },
  {
    "text": "now once this document which we denote as the malicious document is opened bad sayings happen depending on the",
    "start": "568480",
    "end": "576160"
  },
  {
    "text": "actual attack so for example denial of service attacks they would cause the pdf viewer or maybe even the operating",
    "start": "576160",
    "end": "582320"
  },
  {
    "text": "system to consume all available system resources or cause them to crash",
    "start": "582320",
    "end": "588959"
  },
  {
    "text": "note that no user interaction other than opening the document is required for any of the attacks so in",
    "start": "589120",
    "end": "595680"
  },
  {
    "text": "case a pdf application would display a confirmation dialog before performing a certain action we do",
    "start": "595680",
    "end": "602240"
  },
  {
    "text": "not classify this as vulnerable",
    "start": "602240",
    "end": "606480"
  },
  {
    "text": "okay let me come to the attacks so our methodology in finding the",
    "start": "607920",
    "end": "613120"
  },
  {
    "text": "attacks was pretty simple we systematically started the pdf standard for",
    "start": "613120",
    "end": "618640"
  },
  {
    "text": "legitimate features that are critical from a security point of view and which can be abused",
    "start": "618640",
    "end": "624959"
  },
  {
    "text": "for attacks so let's start having some fun with the portable document",
    "start": "624959",
    "end": "631519"
  },
  {
    "text": "format resulting in denial of service let's start with how to create a pdf",
    "start": "631519",
    "end": "638000"
  },
  {
    "text": "infinite loop so for this let's first have a look on",
    "start": "638000",
    "end": "644320"
  },
  {
    "text": "how the pages object of a pdf document is defined so a document can have",
    "start": "644320",
    "end": "650880"
  },
  {
    "text": "multiple or one or multiple pages or no page at all and this is usually done using the pages",
    "start": "650880",
    "end": "658079"
  },
  {
    "text": "special object within the document catalog and the pages object has a kids entry",
    "start": "658079",
    "end": "664480"
  },
  {
    "text": "containing a reference to each page in the document",
    "start": "664480",
    "end": "670079"
  },
  {
    "text": "or as the standard phrases it the kids entry contains an area of indirect references",
    "start": "670079",
    "end": "675760"
  },
  {
    "text": "to immediate children of this node now interestingly the children may be",
    "start": "675760",
    "end": "681360"
  },
  {
    "text": "page objects or other page tree notes",
    "start": "681360",
    "end": "686959"
  },
  {
    "text": "oh wait okay interestingly in other words the kids entry of a pages object can",
    "start": "686959",
    "end": "694320"
  },
  {
    "text": "reference to a pages object itself",
    "start": "694320",
    "end": "698959"
  },
  {
    "text": "so basically to itself thereby creating a cycle and this is a no problem of the",
    "start": "699360",
    "end": "705680"
  },
  {
    "text": "specification when parsing pdf files it was already addressed in 2007.",
    "start": "705680",
    "end": "712560"
  },
  {
    "text": "so we thought maybe maybe there are some more issues in the specification maybe there are more examples let's have",
    "start": "712560",
    "end": "719279"
  },
  {
    "text": "a deeper look and study the specification for elements for objects that allow",
    "start": "719279",
    "end": "724959"
  },
  {
    "text": "self referencing recursion and other constructs that may somehow lead to infinite loops",
    "start": "724959",
    "end": "732800"
  },
  {
    "text": "so we came up with the following attack variants",
    "start": "732800",
    "end": "737680"
  },
  {
    "text": "so pf actions they allow you to specify an array of next actions to be performed",
    "start": "738399",
    "end": "746079"
  },
  {
    "text": "and basically this can easily result in action cycles",
    "start": "746079",
    "end": "751760"
  },
  {
    "text": "let me show you a demo demos always means we have to drink",
    "start": "751839",
    "end": "760079"
  },
  {
    "text": "what you can see here was an event an open action that triggers object number seven",
    "start": "763600",
    "end": "768720"
  },
  {
    "text": "which is an action that goes to a certain page in a document now there is an entry next action which",
    "start": "768720",
    "end": "775360"
  },
  {
    "text": "refers to object number seven again and thereby we have a cycle right and then also there's there are two more",
    "start": "775360",
    "end": "781519"
  },
  {
    "text": "object numbers object 8 and object 9 and they also once again have a next",
    "start": "781519",
    "end": "787680"
  },
  {
    "text": "entry once again referencing to object number seven and then again we have another",
    "start": "787680",
    "end": "793040"
  },
  {
    "text": "cycle okay let's open this document in adobe reader for example",
    "start": "793040",
    "end": "800079"
  },
  {
    "text": "what you can see here is while parsing the document it jumps from page to page",
    "start": "800079",
    "end": "807360"
  },
  {
    "text": "and you can't close it anymore and the cpu goes up which is somewhat annoying",
    "start": "807360",
    "end": "814079"
  },
  {
    "text": "it's not really bad but it's somewhat annoying",
    "start": "814079",
    "end": "818079"
  },
  {
    "text": "okay and there's lots of other variants without without any actions so",
    "start": "819680",
    "end": "826240"
  },
  {
    "text": "using pure structural elements like object stream loops so pdf object streams they may extend",
    "start": "826240",
    "end": "833680"
  },
  {
    "text": "other objects object streams and thereby once again allowing to craft a document with cycles or for example",
    "start": "833680",
    "end": "842880"
  },
  {
    "text": "you have probably seen pdf documents that contain an outline and the entries of an outline",
    "start": "842880",
    "end": "850959"
  },
  {
    "text": "they can reference to themselves or to each other and then once again you can craft the",
    "start": "850959",
    "end": "856160"
  },
  {
    "text": "pdf file that when processed creates or parses all cycles",
    "start": "856160",
    "end": "861760"
  },
  {
    "text": "and results in an infinite loop also pdf defines type 4 calculator",
    "start": "861760",
    "end": "869920"
  },
  {
    "text": "functions for example to transform colors and this may once again allow us to define",
    "start": "869920",
    "end": "875760"
  },
  {
    "text": "an infinite loop by defining a recursive function",
    "start": "875760",
    "end": "881120"
  },
  {
    "text": "and finally in case the pdf application supports javascript within documents",
    "start": "881920",
    "end": "888240"
  },
  {
    "text": "well then infinite loops are super easy to introduce right",
    "start": "888240",
    "end": "893440"
  },
  {
    "text": "okay so the takeaway here is that there's lots of lots of options to keep the pdf processing application busy",
    "start": "893440",
    "end": "900880"
  },
  {
    "text": "by forcing it into an invade loop thereby consuming all available cpu",
    "start": "900880",
    "end": "908079"
  },
  {
    "text": "can we also exhaust all available memory sure we can so most of you",
    "start": "908480",
    "end": "916480"
  },
  {
    "text": "are probably aware of the problem of sip bombs so data amplification attacks based on",
    "start": "916480",
    "end": "923040"
  },
  {
    "text": "malicious tip archives so the first publicly documented denial",
    "start": "923040",
    "end": "929440"
  },
  {
    "text": "of service attack using a sip bomb was conducted back in 1997",
    "start": "929440",
    "end": "934639"
  },
  {
    "text": "against a feed.net mailbox operator but not only zip files but also",
    "start": "934639",
    "end": "940800"
  },
  {
    "text": "stream objects within pdf documents that can be compressed using various algorithms such as deflate",
    "start": "940800",
    "end": "948399"
  },
  {
    "text": "in order to reduce the overall file size of the document",
    "start": "948399",
    "end": "954720"
  },
  {
    "text": "now such compressed pdf streams they are absolutely standard and they are contained in most pdf",
    "start": "954720",
    "end": "961519"
  },
  {
    "text": "documents in the wild and now processing applications they must first decompress",
    "start": "961519",
    "end": "967199"
  },
  {
    "text": "those streams in order to display their content right",
    "start": "967199",
    "end": "972240"
  },
  {
    "text": "which raises the question if compression bombs based on malicious pdf documents can be built",
    "start": "972240",
    "end": "980320"
  },
  {
    "text": "okay here's basically our hello world example again let's change this let's craft a valid",
    "start": "981199",
    "end": "987120"
  },
  {
    "text": "pdf file containing a very long string of 10 gigabyte of repeated characters aaa and so on",
    "start": "987120",
    "end": "995519"
  },
  {
    "text": "to be displayed so this results in 10 gigabyte on disk",
    "start": "995519",
    "end": "1003440"
  },
  {
    "text": "resulting in 10 gigabyte in memory which is no gain for the attacker yet",
    "start": "1003440",
    "end": "1011759"
  },
  {
    "text": "let's now compress this content stream so in pdf the fleet flight decode filter",
    "start": "1011759",
    "end": "1018560"
  },
  {
    "text": "indicates that the stream must be decompressed before being displayed",
    "start": "1018560",
    "end": "1024319"
  },
  {
    "text": "and this results now in a compression ratio of 1 to 1023 which is unfortunately the maximum",
    "start": "1024319",
    "end": "1031760"
  },
  {
    "text": "compression ratio that can be achieved with the deflate algorithm",
    "start": "1031760",
    "end": "1037600"
  },
  {
    "text": "however audi pdf file size can be further reduced by concatenating multiple compression",
    "start": "1037600",
    "end": "1043839"
  },
  {
    "text": "filters which is totally pdf standard to concatenate multiple filters",
    "start": "1043839",
    "end": "1051679"
  },
  {
    "text": "and we can only even do this for a third time which then results in around 600 bytes on disk",
    "start": "1051679",
    "end": "1058720"
  },
  {
    "text": "being decompressed into 10 gigabyte in memory so we have a compression ratio",
    "start": "1058720",
    "end": "1066000"
  },
  {
    "text": "of 1 to 18 million which is quite good let's have",
    "start": "1066000",
    "end": "1072320"
  },
  {
    "text": "a demo on linux this time",
    "start": "1072320",
    "end": "1080640"
  },
  {
    "text": "this is our standard hello world file but you can see that the content is compressed using a triple deflate filter",
    "start": "1080640",
    "end": "1088480"
  },
  {
    "text": "the length is around 600 bytes",
    "start": "1088480",
    "end": "1094000"
  },
  {
    "text": "let's open this file in events the default pdf ufo gnome and it's loading and loading trying to",
    "start": "1094000",
    "end": "1100160"
  },
  {
    "text": "display the content and what you can see here is that memory goes up and up and up",
    "start": "1100160",
    "end": "1107039"
  },
  {
    "text": "now actually this is not a virtual machine it's my my laptop it only has eight gigabyte of ram so i do now have",
    "start": "1107600",
    "end": "1114480"
  },
  {
    "text": "to manually interrupt this uh process otherwise my whole operating system will freeze",
    "start": "1114480",
    "end": "1121120"
  },
  {
    "text": "and i don't want that and interestingly you don't even have to",
    "start": "1121120",
    "end": "1126640"
  },
  {
    "text": "open the file um so it it's enough to open the contained directory in",
    "start": "1126640",
    "end": "1132559"
  },
  {
    "text": "nautilus in the in the gnome file manager or even in windows explorer to trigger deflate",
    "start": "1132559",
    "end": "1138799"
  },
  {
    "text": "bumps now this may be problematic a bit more",
    "start": "1138799",
    "end": "1146080"
  },
  {
    "text": "problematic than the infinite loop right because we can potentially freeze the whole operating",
    "start": "1146080",
    "end": "1152320"
  },
  {
    "text": "system depending on resource limitation mechanisms of course",
    "start": "1152320",
    "end": "1158080"
  },
  {
    "text": "it's it's still not that bad because because the impact of course of denial of service is somewhat limited for end users",
    "start": "1158080",
    "end": "1165919"
  },
  {
    "text": "but it can lead to severe business impairment if the document is processed on a server",
    "start": "1165919",
    "end": "1171280"
  },
  {
    "text": "for example evinced actually uses popular in the background which is a",
    "start": "1171280",
    "end": "1176559"
  },
  {
    "text": "really popular pdf library which is vulnerability to deflate bombs",
    "start": "1176559",
    "end": "1181840"
  },
  {
    "text": "and is used by various web applications to process or convert uploaded pdf files on the",
    "start": "1181840",
    "end": "1188480"
  },
  {
    "text": "server side okay that's out of scope in this talk but this can be really bad",
    "start": "1188480",
    "end": "1195840"
  },
  {
    "text": "okay so um let's now proceed with information disclosure attacks that leak",
    "start": "1195919",
    "end": "1202480"
  },
  {
    "text": "personal data out of the victim's computer to the attacker such as for example pdf document form data local files on",
    "start": "1202480",
    "end": "1210080"
  },
  {
    "text": "disk or ntlm user credentials",
    "start": "1210080",
    "end": "1215360"
  },
  {
    "text": "let's start with how pdf documents can silently phone home",
    "start": "1216880",
    "end": "1223039"
  },
  {
    "text": "so at blackhead 2008 eric fillio showed how to use an open",
    "start": "1224480",
    "end": "1230400"
  },
  {
    "text": "action event to trigger a ui action thereby resulting in ui invocation in",
    "start": "1230400",
    "end": "1237919"
  },
  {
    "text": "adobe reader now this path was quickly blocked in most pdf implementations",
    "start": "1237919",
    "end": "1244720"
  },
  {
    "text": "which will now ask you for user content before resolving the ui",
    "start": "1244720",
    "end": "1252240"
  },
  {
    "text": "but what if we just try another parse using this path by calling the ui action from a different event",
    "start": "1252559",
    "end": "1259760"
  },
  {
    "text": "like from the additional actions of a page object we can bypass existing protection",
    "start": "1259760",
    "end": "1266240"
  },
  {
    "text": "mechanisms for example in perfect pdf reader we can also use",
    "start": "1266240",
    "end": "1271520"
  },
  {
    "text": "a completely different action such as the launch action which we'll have a closer look later to",
    "start": "1271520",
    "end": "1277679"
  },
  {
    "text": "trigger a url so this path actually describes a clickable link in a pdf document but what firefox does",
    "start": "1277679",
    "end": "1285919"
  },
  {
    "text": "is it prefetches the url which was not intended by the developers because it results in request forgery",
    "start": "1285919",
    "end": "1292000"
  },
  {
    "text": "right so in the context of of the web of course request 43 can lead",
    "start": "1292000",
    "end": "1297440"
  },
  {
    "text": "to further web security related weaknesses for example a malicious document that's",
    "start": "1297440",
    "end": "1304640"
  },
  {
    "text": "uploaded to cloud storage that could uh trigger at least same site",
    "start": "1304640",
    "end": "1310000"
  },
  {
    "text": "requests and this could be exported maybe to perform actions in the context of the user's account in case that only",
    "start": "1310000",
    "end": "1317039"
  },
  {
    "text": "same-side cookies are used to protect against cross-site request rotary",
    "start": "1317039",
    "end": "1323679"
  },
  {
    "text": "okay so i guess it's obvious what we need to do here we need to test all possible passes systematically",
    "start": "1323679",
    "end": "1331440"
  },
  {
    "text": "so this means all possible events all possible pdf actions and we use the ul as a file",
    "start": "1331440",
    "end": "1338880"
  },
  {
    "text": "specification target and if you do this really systematically craft a lot of test cases",
    "start": "1338880",
    "end": "1346240"
  },
  {
    "text": "then what happens is if we test them in 28 popular pdf application applications",
    "start": "1346240",
    "end": "1353039"
  },
  {
    "text": "or 16 of them will resolve the ui the ul in the background without any",
    "start": "1353039",
    "end": "1359360"
  },
  {
    "text": "without asking for any user content and this can definitely be considered as",
    "start": "1359360",
    "end": "1364960"
  },
  {
    "text": "privacy invasive right so it could be used for example to de-anonymize users like journalists or",
    "start": "1364960",
    "end": "1371120"
  },
  {
    "text": "activists behind a shared mailbox we don't want that",
    "start": "1371120",
    "end": "1376400"
  },
  {
    "text": "okay next i will show how user input in pdf forms can be leaked to an",
    "start": "1376880",
    "end": "1383520"
  },
  {
    "text": "attacker controlled server so pdf documents that can contain forms",
    "start": "1383520",
    "end": "1389440"
  },
  {
    "text": "to be filled out by the user this is a feature used on a daily basis",
    "start": "1389440",
    "end": "1394559"
  },
  {
    "text": "um for example for for many office tasks like vacation requests and so on",
    "start": "1394559",
    "end": "1400320"
  },
  {
    "text": "and depending of the nature of the form of course this user input can certainly be sensitive it can can",
    "start": "1400320",
    "end": "1407280"
  },
  {
    "text": "contain data like financial or medical records and so on and therefore the question arises",
    "start": "1407280",
    "end": "1413280"
  },
  {
    "text": "if an attack can summer access and leak such information so",
    "start": "1413280",
    "end": "1420240"
  },
  {
    "text": "the idea of the attack is as follows the victim downloads a form so a pdf",
    "start": "1420240",
    "end": "1426159"
  },
  {
    "text": "document which contains form fields from an attacker controlled source and fills it out on screen for example",
    "start": "1426159",
    "end": "1434320"
  },
  {
    "text": "in order to print it note that there are legitimate cases where a form is obtained",
    "start": "1434320",
    "end": "1440480"
  },
  {
    "text": "from a third party while the user input should not be revealed to this party are for",
    "start": "1440480",
    "end": "1446799"
  },
  {
    "text": "example text forms they can be downloaded from all over the web",
    "start": "1446799",
    "end": "1451840"
  },
  {
    "text": "even so you do not want arbitrary websites to see their input data for a text form",
    "start": "1451840",
    "end": "1458720"
  },
  {
    "text": "and also they have to be manually signed anyway to be accepted by the iis right",
    "start": "1458720",
    "end": "1465520"
  },
  {
    "text": "now what if this text form is manipulated in such a way that it suddenly in the",
    "start": "1465520",
    "end": "1471919"
  },
  {
    "text": "background exfiltrates of data without the user noticing and sends the user input data to the",
    "start": "1471919",
    "end": "1478720"
  },
  {
    "text": "attacker's server how could we do this",
    "start": "1478720",
    "end": "1484399"
  },
  {
    "text": "well this can be done by combining the by combining the did print and the page",
    "start": "1484960",
    "end": "1491039"
  },
  {
    "text": "closed events of the catalog and annotation objects within",
    "start": "1491039",
    "end": "1496240"
  },
  {
    "text": "a document together with a submit form action thereby all form data all user",
    "start": "1496240",
    "end": "1503360"
  },
  {
    "text": "input is sent to the attacker's web server once the document is either printed or closed",
    "start": "1503360",
    "end": "1512158"
  },
  {
    "text": "another option of course would be if supported to use javascript to submit the form",
    "start": "1513440",
    "end": "1519600"
  },
  {
    "text": "or you could all use other functions defined in the adobe pdf javascript reference to",
    "start": "1519600",
    "end": "1526159"
  },
  {
    "text": "extrudrate pdf form values maybe i should show you a demo here",
    "start": "1526159",
    "end": "1534960"
  },
  {
    "text": "so what you can see here is that did print is object number five which is an action",
    "start": "1541360",
    "end": "1548080"
  },
  {
    "text": "which means after printing a form should be submitted to evil.com port 8080.",
    "start": "1548080",
    "end": "1557840"
  },
  {
    "text": "let's start our netcat on port 8080 of evo.com",
    "start": "1558480",
    "end": "1564240"
  },
  {
    "text": "and open the file with perfect pdf premium for example and this is now a minimum minimal",
    "start": "1564240",
    "end": "1571440"
  },
  {
    "text": "example for a pdf a form where the user would enter some maybe sensitive information like i",
    "start": "1571440",
    "end": "1578000"
  },
  {
    "text": "don't know hello blackhead and if the user prints a document in",
    "start": "1578000",
    "end": "1583600"
  },
  {
    "text": "this example we print to some system printer what happens is that in the background",
    "start": "1583600",
    "end": "1588640"
  },
  {
    "text": "the all user input like help blackhead is suddenly sent to our server",
    "start": "1588640",
    "end": "1598960"
  },
  {
    "text": "which is definitely not intended like this okay next let me show you how pdf",
    "start": "1598960",
    "end": "1606880"
  },
  {
    "text": "documents can silently exfiltrate even arbitrary files on disk",
    "start": "1606880",
    "end": "1612559"
  },
  {
    "text": "we do this by chaining multiple legitimate pdf futures together",
    "start": "1612559",
    "end": "1619760"
  },
  {
    "text": "so how could we achieve this we do not only have to leak data to the",
    "start": "1620320",
    "end": "1628240"
  },
  {
    "text": "internet which we have already seen we also need to read from local files right",
    "start": "1628240",
    "end": "1634320"
  },
  {
    "text": "and to achieve this maybe let's have a closer look at the pdf standard",
    "start": "1634320",
    "end": "1640640"
  },
  {
    "text": "so we've already seen pdf forms that can auto submit themselves",
    "start": "1640640",
    "end": "1646399"
  },
  {
    "text": "however now the data to be submitted cannot only be a pdf form field value",
    "start": "1646399",
    "end": "1653279"
  },
  {
    "text": "it can be a reference to arbitrary stream objects",
    "start": "1653279",
    "end": "1659039"
  },
  {
    "text": "now if you study the pdf reference further you will find a part where it says every pdf stream on",
    "start": "1661120",
    "end": "1668320"
  },
  {
    "text": "its part can reference to an external file okay you see where this goes basically",
    "start": "1668320",
    "end": "1675440"
  },
  {
    "text": "we embed files on disk into the document and then exfiltrate them using the submit form",
    "start": "1675440",
    "end": "1682000"
  },
  {
    "text": "action or using javascript to some external ul let me show you once",
    "start": "1682000",
    "end": "1689279"
  },
  {
    "text": "again a demo",
    "start": "1689279",
    "end": "1692320"
  },
  {
    "text": "in this example we have an embedded file that actually refers to an external file",
    "start": "1695760",
    "end": "1702080"
  },
  {
    "text": "on disk sieve in our spin in here which is you know the windows um standard windows system file let's open",
    "start": "1702080",
    "end": "1709520"
  },
  {
    "text": "the document in nuance power pdf for example and once the document is opened silently",
    "start": "1709520",
    "end": "1716480"
  },
  {
    "text": "the content of that file on disk is leaked to our server evil.com which is pretty bad",
    "start": "1716480",
    "end": "1725120"
  },
  {
    "text": "and this also works for other pdf viewers",
    "start": "1725120",
    "end": "1729679"
  },
  {
    "text": "okay next one let me show you how pdf documents can leak ntlm hashes for windows user credentials",
    "start": "1730720",
    "end": "1738799"
  },
  {
    "text": "and and why this works until today so in 1997 artist bangladesh posted a",
    "start": "1738799",
    "end": "1746320"
  },
  {
    "text": "vulnerability in windows nt on the backtrack mailing list which can be summarized as follows any",
    "start": "1746320",
    "end": "1753679"
  },
  {
    "text": "client program can trigger a connection to a malicious windows smb server",
    "start": "1753679",
    "end": "1760080"
  },
  {
    "text": "now if the server requests authentication the windows client will automatically try to log on with a hash of the current",
    "start": "1760080",
    "end": "1768799"
  },
  {
    "text": "user's credentials and this is a well-known design problem in the windows operating system",
    "start": "1768799",
    "end": "1774559"
  },
  {
    "text": "i guess most of you are aware of this and what can be done with it while such",
    "start": "1774559",
    "end": "1780480"
  },
  {
    "text": "cup captured ntm version 2 hashes which is the current version they allow for efficient offline",
    "start": "1780480",
    "end": "1787120"
  },
  {
    "text": "cracking of the user password for example using using hashcat and also if you use",
    "start": "1787120",
    "end": "1793039"
  },
  {
    "text": "or support previous versions of ntlm they are actually trivial to",
    "start": "1793039",
    "end": "1798960"
  },
  {
    "text": "crack and they can be considered as broken anyway as shown by moxie modern spike and badass",
    "start": "1798960",
    "end": "1806240"
  },
  {
    "text": "or you can also use ntlm hashes to perform relay attacks and authenticate under the user's",
    "start": "1806240",
    "end": "1811840"
  },
  {
    "text": "identity as shown by ashora and tamo of course it's up to the configuration",
    "start": "1811840",
    "end": "1817360"
  },
  {
    "text": "of the victims setup like password strengths and security policy if such attacks are actually feasible",
    "start": "1817360",
    "end": "1825039"
  },
  {
    "text": "ok now in april 2018 checkpoint research showed that similar attacks can be",
    "start": "1825760",
    "end": "1831360"
  },
  {
    "text": "performed with malicious pdf files and they found that the target of a",
    "start": "1831360",
    "end": "1837200"
  },
  {
    "text": "go-to action can be set to a network share and thereby leaking credentials in the form",
    "start": "1837200",
    "end": "1842960"
  },
  {
    "text": "of ntm hashes and this issue was actually quickly fixed in adobe and foxhead",
    "start": "1842960",
    "end": "1851440"
  },
  {
    "text": "let's see if we can find some bypasses what do we need to do we need to systematically test all possible passes",
    "start": "1851440",
    "end": "1858960"
  },
  {
    "text": "okay all possible events",
    "start": "1858960",
    "end": "1864000"
  },
  {
    "text": "so for example by using various techniques to access a network share like by including it as an external",
    "start": "1864000",
    "end": "1870159"
  },
  {
    "text": "content stream or by using all possible pdf actions that allow a file",
    "start": "1870159",
    "end": "1875919"
  },
  {
    "text": "specification and and then use a network share as the string for file",
    "start": "1875919",
    "end": "1881200"
  },
  {
    "text": "specification this may allow us to basically bypass protection mechanisms which works",
    "start": "1881200",
    "end": "1887279"
  },
  {
    "text": "on a lot of years let me show you a demo for fox it",
    "start": "1887279",
    "end": "1893279"
  },
  {
    "text": "okay trivial open action event and action number five which would usually be blocked by fox",
    "start": "1896080",
    "end": "1902399"
  },
  {
    "text": "set but if you say the file is not going to be open but to print it",
    "start": "1902399",
    "end": "1908559"
  },
  {
    "text": "then this network share will silently be opened in the background um by foxhead let's",
    "start": "1908559",
    "end": "1915360"
  },
  {
    "text": "use responder as a malicious smb server to see if we get any incoming user",
    "start": "1915360",
    "end": "1922240"
  },
  {
    "text": "credentials and here we go if we open the file and fox it we will see the hash of the user's",
    "start": "1922240",
    "end": "1930880"
  },
  {
    "text": "password that's not too good either right our",
    "start": "1932840",
    "end": "1937919"
  },
  {
    "text": "next class of attacks is data manipulation with lots of sub attacks once again that",
    "start": "1937919",
    "end": "1944559"
  },
  {
    "text": "allow an attacker to modify pdf form values write local files",
    "start": "1944559",
    "end": "1949679"
  },
  {
    "text": "on on the host file system or master display content of a document based on the",
    "start": "1949679",
    "end": "1955840"
  },
  {
    "text": "opening application let's start with phone modification so",
    "start": "1955840",
    "end": "1962559"
  },
  {
    "text": "our goal here is to create a pdf document that manipulates itself",
    "start": "1962559",
    "end": "1967840"
  },
  {
    "text": "or to be more precisely its form values so the idea of this attack is as follows",
    "start": "1967840",
    "end": "1976960"
  },
  {
    "text": "similar to form data leakage as described earlier the victim obtains a harmlessly looking pdf",
    "start": "1976960",
    "end": "1983279"
  },
  {
    "text": "document from an attacker controlled source for example a text document and the goal of the",
    "start": "1983279",
    "end": "1990880"
  },
  {
    "text": "attacker is now to dynamically and without knowledge of the victim manipulate",
    "start": "1990880",
    "end": "1996080"
  },
  {
    "text": "form field data what's the impact well this could be",
    "start": "1996080",
    "end": "2001200"
  },
  {
    "text": "abused to for example um get the victim into big trouble",
    "start": "2001200",
    "end": "2007039"
  },
  {
    "text": "by making some some wrong fields and and get the victim into trouble of tax fraud suspicion",
    "start": "2007039",
    "end": "2013840"
  },
  {
    "text": "but also maybe to gain a financial advantage for example by adding the attacker as",
    "start": "2013840",
    "end": "2020159"
  },
  {
    "text": "recipient of a tax refund okay there are two ways to achieve this",
    "start": "2020159",
    "end": "2027440"
  },
  {
    "text": "firstly we can use on the import data action so um form field values that",
    "start": "2027440",
    "end": "2034799"
  },
  {
    "text": "can be set in a document using the import data action which basically imports",
    "start": "2034799",
    "end": "2040799"
  },
  {
    "text": "form data from an external source like a url or from an embedded file and overwrites",
    "start": "2040799",
    "end": "2048720"
  },
  {
    "text": "existing document form data and this action this could be triggered immediately maybe before printing using",
    "start": "2048720",
    "end": "2056000"
  },
  {
    "text": "the catalogs will print event and if javascript is supported you can",
    "start": "2056000",
    "end": "2063520"
  },
  {
    "text": "use javascript functions to set the content of specific form fields well this method",
    "start": "2063520",
    "end": "2071440"
  },
  {
    "text": "has an advantage because you can first back up the old value and then later on restore",
    "start": "2071440",
    "end": "2079440"
  },
  {
    "text": "the um the old value so the victim will not even realize that something has been changed",
    "start": "2079440",
    "end": "2086158"
  },
  {
    "text": "let me show you a demo",
    "start": "2086159",
    "end": "2089838"
  },
  {
    "text": "we have a will print and i did print event and both of them reference to",
    "start": "2093839",
    "end": "2099920"
  },
  {
    "text": "javascript actions and first of all they back up the old form field value and then we set",
    "start": "2099920",
    "end": "2108320"
  },
  {
    "text": "the value to to a new string and after printing we will",
    "start": "2108320",
    "end": "2116480"
  },
  {
    "text": "restore the backed up value okay let's do this in adobe",
    "start": "2116480",
    "end": "2125760"
  },
  {
    "text": "and we have the original value we it in this case we print it to to fox it",
    "start": "2125760",
    "end": "2131680"
  },
  {
    "text": "so as a system printer so you can easily see the result and what we will see here is that when",
    "start": "2131680",
    "end": "2138400"
  },
  {
    "text": "printed the modified string",
    "start": "2138400",
    "end": "2145838"
  },
  {
    "text": "the modified string is contained in that document or in the printed version which can be",
    "start": "2146640",
    "end": "2153680"
  },
  {
    "text": "bad in case of for example text forms",
    "start": "2153680",
    "end": "2159440"
  },
  {
    "text": "can we do some more now let me show how pdf documents how they can write you and override arbitrary files on disk",
    "start": "2159440",
    "end": "2168320"
  },
  {
    "text": "how to achieve this so as previously described the pdf standard enables",
    "start": "2168320",
    "end": "2175359"
  },
  {
    "text": "documents to or to submit form data to external web service",
    "start": "2175359",
    "end": "2181680"
  },
  {
    "text": "but technically the web service url is defined using a pdf file specification and this can also be",
    "start": "2181680",
    "end": "2189280"
  },
  {
    "text": "a local file on disk so this ambiguity in the standard may be",
    "start": "2189280",
    "end": "2196160"
  },
  {
    "text": "interpreted by implementations in such a way that they enable documents to submit",
    "start": "2196160",
    "end": "2202000"
  },
  {
    "text": "pdf form data to a local file and thereby writing to this file on disk",
    "start": "2202000",
    "end": "2209359"
  },
  {
    "text": "furthermore there are various javascript functions which are defined in the",
    "start": "2210000",
    "end": "2215200"
  },
  {
    "text": "reference which allowed to write two local files so if successful this feature",
    "start": "2215200",
    "end": "2220320"
  },
  {
    "text": "can be used to overwrite arbitrary files on the victim's file system and thereby purge their",
    "start": "2220320",
    "end": "2227119"
  },
  {
    "text": "content demo time",
    "start": "2227119",
    "end": "2233119"
  },
  {
    "text": "okay we have basically an on close action",
    "start": "2237599",
    "end": "2244640"
  },
  {
    "text": "um and what it does it is submits a form to drive e with the file name blackhead.evil",
    "start": "2244720",
    "end": "2252240"
  },
  {
    "text": "on drive e we don't have any file yet let's try to do this in master pdf let's",
    "start": "2252240",
    "end": "2258560"
  },
  {
    "text": "close our malicious document again and then let's see if the submitted form",
    "start": "2258560",
    "end": "2263680"
  },
  {
    "text": "was submitted to a local file on disk okay you cannot write arbitrary content but you can control",
    "start": "2263680",
    "end": "2270000"
  },
  {
    "text": "parts of the content by changing the form field values and you can of course",
    "start": "2270000",
    "end": "2276720"
  },
  {
    "text": "overwrite existing content which could be bad okay",
    "start": "2276720",
    "end": "2285520"
  },
  {
    "text": "so the last attack in this attack class is content masking",
    "start": "2285520",
    "end": "2290560"
  },
  {
    "text": "now i will craft a document that renders different content in different pdf viewers",
    "start": "2290560",
    "end": "2298320"
  },
  {
    "text": "this can be used for example to show different content to multiple reviewers of an academic paper",
    "start": "2298320",
    "end": "2304720"
  },
  {
    "text": "or to trick content filters and and search engines which now index a different text than",
    "start": "2304720",
    "end": "2310640"
  },
  {
    "text": "the one that is shown when opening the document",
    "start": "2310640",
    "end": "2315520"
  },
  {
    "text": "to achieve this we systematically studied the pdf standard for ambiguities",
    "start": "2315920",
    "end": "2323520"
  },
  {
    "text": "ambiguities at various levels at the syntax and structural level that lead to different parts of",
    "start": "2324800",
    "end": "2331119"
  },
  {
    "text": "the document actually being processed by different pdf implementations",
    "start": "2331119",
    "end": "2337280"
  },
  {
    "text": "for example pdf objects before the pdf header or after any end of",
    "start": "2337280",
    "end": "2343920"
  },
  {
    "text": "filemarker they may not be processed by certain applications or a pdf file can contain yet another",
    "start": "2343920",
    "end": "2351280"
  },
  {
    "text": "document as an embedded file and then using some tricks it may become unclear which one actually to show",
    "start": "2351280",
    "end": "2359920"
  },
  {
    "text": "or what about objects um with with duplicate object numbers or",
    "start": "2359920",
    "end": "2365839"
  },
  {
    "text": "objects that are not listed in a cross reference table also it's unclear how content streams should be parsed if",
    "start": "2365839",
    "end": "2372160"
  },
  {
    "text": "their length value does not match the offset of the end stream marker i will show an",
    "start": "2372160",
    "end": "2377200"
  },
  {
    "text": "example in a second and finally there are some edge cases on the syntax level of content streams like",
    "start": "2377200",
    "end": "2383920"
  },
  {
    "text": "uppercase lowercase and so on so those attacks or",
    "start": "2383920",
    "end": "2391760"
  },
  {
    "text": "those edge cases they lead to 33 single edge case variants",
    "start": "2391760",
    "end": "2397920"
  },
  {
    "text": "and each of them renders differently in different viewers just let me give you one example",
    "start": "2397920",
    "end": "2406000"
  },
  {
    "text": "so a pdf stream usually or has to start with the keyboard stream and has to end with the delimiter",
    "start": "2406000",
    "end": "2412720"
  },
  {
    "text": "and stream higher the stream lengths must also be defined which can lead to ambiguities should i",
    "start": "2412720",
    "end": "2420640"
  },
  {
    "text": "display the red text or the blue text okay so in this example half of the tested viewers they respect",
    "start": "2420640",
    "end": "2428240"
  },
  {
    "text": "the delimiter and show the red content stream while the other half of the tested viewers they showed the",
    "start": "2428240",
    "end": "2434560"
  },
  {
    "text": "blue content stream based on the length and now we found 62 further edge cases that i said",
    "start": "2434560",
    "end": "2442720"
  },
  {
    "text": "lead to different content being shown by different viewers",
    "start": "2442720",
    "end": "2448800"
  },
  {
    "text": "and in some cases only one viewer shows a certain content",
    "start": "2448800",
    "end": "2453839"
  },
  {
    "text": "however note that it's also possible to to chain those edge cases together within one single document to achieve",
    "start": "2453839",
    "end": "2461200"
  },
  {
    "text": "the same effect okay demo time",
    "start": "2461200",
    "end": "2468720"
  },
  {
    "text": "so we have some edge case examples um in this case um for adobe and you see",
    "start": "2470400",
    "end": "2478160"
  },
  {
    "text": "a different string and a different color basically for adobe compared to foxy or or pdf",
    "start": "2478160",
    "end": "2485839"
  },
  {
    "text": "exchange or nitro reader which can be problematic in the context",
    "start": "2485839",
    "end": "2493680"
  },
  {
    "text": "where we assume that a pdf document renders exactly the same content and not",
    "start": "2493680",
    "end": "2499040"
  },
  {
    "text": "something completely different so for example in the case of a business contract",
    "start": "2499040",
    "end": "2505599"
  },
  {
    "text": "okay this is what you have been waiting for our last class of attacks is the execution of arbitrary code on the",
    "start": "2507040",
    "end": "2514240"
  },
  {
    "text": "victim's machine basically by silently launching an executable from the malicious",
    "start": "2514240",
    "end": "2520839"
  },
  {
    "text": "document we do this using the launch action now what is the launch action the launch",
    "start": "2520839",
    "end": "2528720"
  },
  {
    "text": "action is a somewhat special pdf action that according to the standard",
    "start": "2528720",
    "end": "2533839"
  },
  {
    "text": "launches an application or opens or prints a document that sounds interesting right",
    "start": "2533839",
    "end": "2540880"
  },
  {
    "text": "descender does not provide any security considerations regarding this obviously dangerous feature and it even",
    "start": "2540880",
    "end": "2547200"
  },
  {
    "text": "specifies how to pass command line parameters to the launched application",
    "start": "2547200",
    "end": "2552400"
  },
  {
    "text": "therefore it's somewhat fair to say that pdf offers code execution by design",
    "start": "2552400",
    "end": "2558560"
  },
  {
    "text": "if the standard is implemented in a straightforward manner",
    "start": "2558560",
    "end": "2565280"
  },
  {
    "text": "so how to test for this once again we use all possible pdf events",
    "start": "2565280",
    "end": "2571760"
  },
  {
    "text": "this time to call a launch action with the open parameter",
    "start": "2571760",
    "end": "2578800"
  },
  {
    "text": "and our target here is an executable which is either embedded within the pdf document or provided as a local file",
    "start": "2578800",
    "end": "2587280"
  },
  {
    "text": "so let's see if in 2020 we still find pdf used that do not ask the user",
    "start": "2587280",
    "end": "2592319"
  },
  {
    "text": "before launching arbitrary executables this is your last time to drink so make",
    "start": "2592319",
    "end": "2597760"
  },
  {
    "text": "it double",
    "start": "2597760",
    "end": "2600240"
  },
  {
    "text": "as you can see simple code execution a by design in a neutral pdf",
    "start": "2603280",
    "end": "2609920"
  },
  {
    "text": "reader in neutral pro in pdf studio viewer pdf studio pro and also in some older",
    "start": "2609920",
    "end": "2616640"
  },
  {
    "text": "versions of pdf architect um so yeah life can be simple right no",
    "start": "2616640",
    "end": "2622400"
  },
  {
    "text": "power overflows no nothing simply abusing legitimate features",
    "start": "2622400",
    "end": "2628720"
  },
  {
    "text": "okay let me come to an evolution so you can see which attacks are actually possible on which pdf view is",
    "start": "2629680",
    "end": "2637839"
  },
  {
    "text": "so we tested 28 popular pdf processing applications basically all pdf",
    "start": "2637839",
    "end": "2643200"
  },
  {
    "text": "applications for the major platforms windows mac os linux and web browsers because they can also",
    "start": "2643200",
    "end": "2649520"
  },
  {
    "text": "view and display pdf documents natively and if a fewer version like adobe reader",
    "start": "2649520",
    "end": "2656319"
  },
  {
    "text": "and an agita version like adobe pro was available we tested both because the support is somewhat",
    "start": "2656319",
    "end": "2661359"
  },
  {
    "text": "different feature set okay now our evaluation shows that 26",
    "start": "2661359",
    "end": "2667839"
  },
  {
    "text": "out of 28 tested applications are vulnerable to at least one attack so for example infinite loops",
    "start": "2667839",
    "end": "2676960"
  },
  {
    "text": "in one variant or another they were possible in almost any reader resulting in the application",
    "start": "2676960",
    "end": "2683839"
  },
  {
    "text": "either to hang or to crash and the same holds for deflate bombs",
    "start": "2683839",
    "end": "2690319"
  },
  {
    "text": "which are somewhat hard to protect against if you do not have any strict resource limitations",
    "start": "2690319",
    "end": "2696720"
  },
  {
    "text": "and using very various techniques we could craft pdf documents that suddenly phone home",
    "start": "2696720",
    "end": "2702640"
  },
  {
    "text": "once the document is being opened in 16 of the tested readers",
    "start": "2702640",
    "end": "2708319"
  },
  {
    "text": "user input in pdf forms can be silently leaked to an attacker controlled server for 11",
    "start": "2708319",
    "end": "2714480"
  },
  {
    "text": "of the tested applications we were able to silently exfiltrate",
    "start": "2714480",
    "end": "2721119"
  },
  {
    "text": "files on disk by chaining together legitimate pdf features in six applications for three",
    "start": "2721119",
    "end": "2727599"
  },
  {
    "text": "of them however there are some limitations regarding the file type 12 applications they suddenly leaked the",
    "start": "2727599",
    "end": "2734880"
  },
  {
    "text": "user's ntrm hashes so we found various bypasses to existing patches for example for foxit",
    "start": "2734880",
    "end": "2743520"
  },
  {
    "text": "now forms that manipulate themselves using the import action for example or javascript by changing their form",
    "start": "2744079",
    "end": "2751680"
  },
  {
    "text": "values uh for example when printed they were supported only by four readers even so this is",
    "start": "2751680",
    "end": "2757440"
  },
  {
    "text": "actually a standard pdf ingredient but it didn't work very often okay",
    "start": "2757440",
    "end": "2764960"
  },
  {
    "text": "but file system access or file right access so writing to arbitrary files on disk worked for two",
    "start": "2764960",
    "end": "2772160"
  },
  {
    "text": "applications which is pretty bad and for six viewers we could craft a document that renders different content in each",
    "start": "2772160",
    "end": "2779920"
  },
  {
    "text": "and every other pdf viewer for the others you basically have to",
    "start": "2779920",
    "end": "2784960"
  },
  {
    "text": "chain edge cases together to achieve the same effect and in four applications we had",
    "start": "2784960",
    "end": "2790960"
  },
  {
    "text": "straightforward call execution based on the launch action for another three linux based viewers this works only",
    "start": "2790960",
    "end": "2797520"
  },
  {
    "text": "in the case of mono executables so the impact is a bit limited",
    "start": "2797520",
    "end": "2803520"
  },
  {
    "text": "okay now the takeaway here is that virtually all tested pdf applications to have at",
    "start": "2803520",
    "end": "2810400"
  },
  {
    "text": "least some issues right and pdf viewers that only implement a minimal subset of the",
    "start": "2810400",
    "end": "2816880"
  },
  {
    "text": "pdf standard they're usually less vulnerable so such a subset without any fancy features that's usually enough to",
    "start": "2816880",
    "end": "2824880"
  },
  {
    "text": "simply display a document as shown for example by the pdf implementations for",
    "start": "2824880",
    "end": "2830400"
  },
  {
    "text": "mac os and linux but also web browsers okay we reported all those issues to the",
    "start": "2830400",
    "end": "2837440"
  },
  {
    "text": "affected vendors back in january some of them are fixed and some of them work until today",
    "start": "2837440",
    "end": "2845838"
  },
  {
    "text": "now how would you fix those issues so i would say to counter infant loops",
    "start": "2846480",
    "end": "2853760"
  },
  {
    "text": "on constructs that lead to cycles or to recursion they must be prohibited in",
    "start": "2853760",
    "end": "2859200"
  },
  {
    "text": "implementations and also ambiguous formulations that should be removed from the standard which could also help",
    "start": "2859200",
    "end": "2865680"
  },
  {
    "text": "to prevent content masking attacks also why not limiting the resources a",
    "start": "2865680",
    "end": "2872559"
  },
  {
    "text": "single document is allowed to consume similar to a website in a modern web browser thereby a",
    "start": "2872559",
    "end": "2880160"
  },
  {
    "text": "malicious document would not affect the whole application or the whole operating system anymore",
    "start": "2880160",
    "end": "2887599"
  },
  {
    "text": "now while our attacks do not depend on javascript a lot of native pdf feature features",
    "start": "2887599",
    "end": "2893920"
  },
  {
    "text": "they are redundantly implemented in javascript thereby providing an even larger attack",
    "start": "2893920",
    "end": "2900240"
  },
  {
    "text": "surface so let's let's remove or restrict javascript and also given that",
    "start": "2900240",
    "end": "2905280"
  },
  {
    "text": "pdf is supposed to be a format for portable documents we'd argue that the need to embed really",
    "start": "2905280",
    "end": "2912000"
  },
  {
    "text": "a full programming language is somewhat debatable now finally and most importantly secure",
    "start": "2912000",
    "end": "2918800"
  },
  {
    "text": "pdf processing applications they should identify and cut the dangerous paths in malicious documents",
    "start": "2918800",
    "end": "2926160"
  },
  {
    "text": "so most of our attacks they took a pass from an event down to a file handle and if this path",
    "start": "2926160",
    "end": "2932480"
  },
  {
    "text": "was not blocked or required user content the attack was successful now many applications they blocked",
    "start": "2932480",
    "end": "2939200"
  },
  {
    "text": "particular passes but they failed to block them all because they were not if there was no",
    "start": "2939200",
    "end": "2944559"
  },
  {
    "text": "systematic protection approach okay let me come to a conclusion",
    "start": "2944559",
    "end": "2952240"
  },
  {
    "text": "so pdf is more than a simple document format pdf is really really complex and it's got a",
    "start": "2952240",
    "end": "2958319"
  },
  {
    "text": "lot of dangerous features applications that blindly implement the",
    "start": "2958319",
    "end": "2963760"
  },
  {
    "text": "standard they're somewhat flawed by design so if you're the developer of a pdf",
    "start": "2963760",
    "end": "2969119"
  },
  {
    "text": "application be careful which standard features you actually want to include",
    "start": "2969119",
    "end": "2975920"
  },
  {
    "text": "also even in 2020 you can get code execution based on pure logic chain exportation",
    "start": "2976319",
    "end": "2985119"
  },
  {
    "text": "okay thank you you can find all the exploit files on github as well as a comprehensive test suite",
    "start": "2985119",
    "end": "2991599"
  },
  {
    "text": "in order to test further pdf implementations for vulnerabilities i really really",
    "start": "2991599",
    "end": "2998960"
  },
  {
    "text": "really hope to see you all next year in vegas",
    "start": "2998960",
    "end": "3004960"
  }
]