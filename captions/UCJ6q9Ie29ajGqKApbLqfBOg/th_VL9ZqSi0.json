[
  {
    "text": "e e",
    "start": "58920",
    "end": "62960"
  },
  {
    "text": "all right the talk basically consists of three parts the first part deals with um",
    "start": "96479",
    "end": "101880"
  },
  {
    "text": "comparing two binaries by um using their structural properties using the graphs within the binaries instead of using the",
    "start": "101880",
    "end": "108079"
  },
  {
    "text": "instructions and um that is quite beneficial for doing first of all um",
    "start": "108079",
    "end": "113479"
  },
  {
    "text": "diffing of binaries if somebody releases a security update and you want to know what the bug was what are they changing in the new version of the binary you can",
    "start": "113479",
    "end": "120360"
  },
  {
    "text": "use this to find out what they changed secondly um it's useful if you have an a",
    "start": "120360",
    "end": "125799"
  },
  {
    "text": "version of the binary for which you have names for the functions of which you have disassembled already and you would",
    "start": "125799",
    "end": "131200"
  },
  {
    "text": "like those names to be used in another version of the same same executable you can use the graphs later on to Port that",
    "start": "131200",
    "end": "138120"
  },
  {
    "text": "information from one binary to the next one this is quite useful if you have for example an old version of checkpoint",
    "start": "138120",
    "end": "144000"
  },
  {
    "text": "firewall where they left the the symbols in two or three years ago and you would like to use those symbols in your as",
    "start": "144000",
    "end": "150360"
  },
  {
    "text": "well because it does simplify the process of looking through the binary a lot um the second part will be about",
    "start": "150360",
    "end": "156440"
  },
  {
    "text": "navigating through unknown binaries binaries are not exactly the the nicest place to be uh in terms of there you",
    "start": "156440",
    "end": "163280"
  },
  {
    "text": "don't have any names you don't really know where you are where you're going and um I'll speak a little about restructuring the the flow graphs of a",
    "start": "163280",
    "end": "170040"
  },
  {
    "text": "binary in order to actually understand what's going on I'll speak a little bit about um hooking the graphs into a",
    "start": "170040",
    "end": "176080"
  },
  {
    "text": "debugger and painting colors into the graph to visualize things better um and",
    "start": "176080",
    "end": "181920"
  },
  {
    "text": "then I'll speak a little bit about this might like what properties in the graph you might use for focusing what code you",
    "start": "181920",
    "end": "188280"
  },
  {
    "text": "should be auditing first when you are looking for bugs and at the very end I'll speak a little bit about well it's",
    "start": "188280",
    "end": "193959"
  },
  {
    "text": "not really speaking about I'll show um some interprocedural data flow analysis which I've been doing and um that's",
    "start": "193959",
    "end": "201200"
  },
  {
    "text": "basically using a graph to answer questions like which apis exported from msas And1 dll eventually pass an",
    "start": "201200",
    "end": "206920"
  },
  {
    "text": "argument to a memory allocator and do an addition before forand so we can do fun",
    "start": "206920",
    "end": "212879"
  },
  {
    "text": "things all right so let's start about binary diffing um the security patch",
    "start": "212879",
    "end": "218280"
  },
  {
    "text": "analysis process became really interesting with lsd's decom bug publication because we had the situation that everybody knew there's a bug but",
    "start": "218280",
    "end": "225239"
  },
  {
    "text": "the details were all kept quiet so everybody wanted to start finding out what the bug actually",
    "start": "225239",
    "end": "230879"
  },
  {
    "text": "was now um in the general case very few organizations install patches really",
    "start": "230879",
    "end": "236120"
  },
  {
    "text": "quickly actually in Germany there's a weird really weird law where Financial institutions are disallowed from",
    "start": "236120",
    "end": "241280"
  },
  {
    "text": "installing patches on critical systems without testing them for at least a week which is a fantastic legislation love",
    "start": "241280",
    "end": "247799"
  },
  {
    "text": "your law um well in the general case the agreement is that not publishing any",
    "start": "247799",
    "end": "253879"
  },
  {
    "text": "information concerning the vulnerability when you releases a patch buys the customer time to install patches this is",
    "start": "253879",
    "end": "259400"
  },
  {
    "text": "the reason why Microsoft wants all the security people that actually give them information about a bug to keep quiet",
    "start": "259400",
    "end": "265440"
  },
  {
    "text": "about it until they have had time to release the patch and install the patch and Microsoft thinks they buying time for their",
    "start": "265440",
    "end": "272479"
  },
  {
    "text": "customers um this comes from the fact that there's an asymmetry between the problem of like reverse engineering",
    "start": "272479",
    "end": "278479"
  },
  {
    "text": "program and just recompiling it making the change in recomp recompiling the is really easy whereas reverse engineering",
    "start": "278479",
    "end": "285680"
  },
  {
    "text": "it is really timec consuming the general assumption is that the reverse engineering has to reanalyze the entire application and then start comparing the",
    "start": "285680",
    "end": "292960"
  },
  {
    "text": "the different functions in order to find out what changed um both software vendors and high level language virus",
    "start": "292960",
    "end": "298440"
  },
  {
    "text": "authors try to exploit this as high level language virus authors want to buy time but like from having",
    "start": "298440",
    "end": "306199"
  },
  {
    "text": "antivirus signatures and so on and having the antivirus team really know what's going on and software vendors",
    "start": "306199",
    "end": "311680"
  },
  {
    "text": "just want to buy time for their customers now diffing executables on an",
    "start": "311680",
    "end": "318560"
  },
  {
    "text": "instruction level is really difficult a very small change in the source can trigger significant changes in the executable adding a structure member",
    "start": "318560",
    "end": "325479"
  },
  {
    "text": "will change all the immediate offsets which deal with that structure if you have a structure of I 16 members and you",
    "start": "325479",
    "end": "331520"
  },
  {
    "text": "add a member in front of it all access to that structure in the binary will change like the the immediate values for",
    "start": "331520",
    "end": "337360"
  },
  {
    "text": "using for addressing the members of the structure will change um adding a few lines of code will have well can have",
    "start": "337360",
    "end": "345199"
  },
  {
    "text": "drastically different register assignments as a result because the compiler will always use what which",
    "start": "345199",
    "end": "350639"
  },
  {
    "text": "register is free and it's when it's compiling and as such if you just change a few things it can lead to being like",
    "start": "350639",
    "end": "357880"
  },
  {
    "text": "completely different registers used throughout the the entire function um other things or another problem is that",
    "start": "357880",
    "end": "365319"
  },
  {
    "text": "many compilers these days or many linkers try to arrange the basic blocks of every function in an optimal way having everything aligned having",
    "start": "365319",
    "end": "371800"
  },
  {
    "text": "everything in place so growing one of those basic blocks can trigger a change throughout the entire binary where all",
    "start": "371800",
    "end": "377479"
  },
  {
    "text": "basic blocks are rearranged and if you're dealing with Microsoft executables they have weird aggressive",
    "start": "377479",
    "end": "383039"
  },
  {
    "text": "runtime Linker optimizing thing they call it um profiling based linking",
    "start": "383039",
    "end": "388800"
  },
  {
    "text": "optimization or whatever ever it's going to be part of Visual Studio 2003 or or four I don't know like the next version",
    "start": "388800",
    "end": "394120"
  },
  {
    "text": "of visual studio is supposed to have it and Microsoft has been using this for a few years where they basically create",
    "start": "394120",
    "end": "399680"
  },
  {
    "text": "profiling information about every basic block in the application and then they know all the regular trodden paths so um",
    "start": "399680",
    "end": "406280"
  },
  {
    "text": "if you have a function or you have an application which has error handlers I mean a significant part of any application is error handlers those will",
    "start": "406280",
    "end": "413199"
  },
  {
    "text": "not be executed all that often so Microsoft takes all the basic blocks which are not executed often and puts",
    "start": "413199",
    "end": "418879"
  },
  {
    "text": "them on a different page than those that are executed often this leads to better performance with uh well due to the",
    "start": "418879",
    "end": "424840"
  },
  {
    "text": "prefetching stuff it definitely leads to a lot better paging behavior of applications because the operating system can page out lots of code Pages",
    "start": "424840",
    "end": "432360"
  },
  {
    "text": "which are not not used all the time now the overwhelming majority of the",
    "start": "432360",
    "end": "437520"
  },
  {
    "text": "instruction changes in a binary are Irrelevant for us as a security analyst because um well we don't care about",
    "start": "437520",
    "end": "444639"
  },
  {
    "text": "immediate Chang INF for structure access and we don't care all that much about a different register being assigned mind",
    "start": "444639",
    "end": "449960"
  },
  {
    "text": "we care about bugs and we care about logic changes so we have to start making a tradeoff um can we risk more well can",
    "start": "449960",
    "end": "457840"
  },
  {
    "text": "we reduce the number of false positives by risking that we have a false negative at",
    "start": "457840",
    "end": "463840"
  },
  {
    "text": "times now the the main thing that I'm doing is um or what what my makes my",
    "start": "463840",
    "end": "469840"
  },
  {
    "text": "Approach different from many others is you regard a binary as a graph of graphs meaning um we're looking well first of",
    "start": "469840",
    "end": "477240"
  },
  {
    "text": "all we're looking only for changes in program logic we're not looking for constant change or whatever so um we're",
    "start": "477240",
    "end": "483400"
  },
  {
    "text": "looking at the the program as a graph of graphs meaning you have one large graph which contains all the relations the",
    "start": "483400",
    "end": "489919"
  },
  {
    "text": "function have to each other function a calls function B function B calls function C function a can also call",
    "start": "489919",
    "end": "495560"
  },
  {
    "text": "function C that's the large graph now every single function in itself is a graph as well which is the flow graph of",
    "start": "495560",
    "end": "501960"
  },
  {
    "text": "the function which has the all the basic blocks and the if blocks and so on so the program logic is more or less",
    "start": "501960",
    "end": "507960"
  },
  {
    "text": "encoded in these two graphs if you add a single if inside of a function you'll trigger a change in its F graph if you",
    "start": "507960",
    "end": "515479"
  },
  {
    "text": "add or change a function call from string copy to sdn copy you will change the call graph so that the program logic",
    "start": "515479",
    "end": "522719"
  },
  {
    "text": "is more or less encoded in these these other graphs now what I'm doing is I'm trying",
    "start": "522719",
    "end": "529680"
  },
  {
    "text": "to find the changes by comparing the flow graphs only and um this this",
    "start": "529680",
    "end": "535880"
  },
  {
    "text": "actually should detect all logic changes as soon as somebody adds an if he will will be changing a fla graph and I",
    "start": "535880",
    "end": "541320"
  },
  {
    "text": "should see it so in theory this comparison should be false positive free I should only get changes that actually",
    "start": "541320",
    "end": "547440"
  },
  {
    "text": "change the logic of a program because well if somebody just or if the compiler just do does rearrangements he can't",
    "start": "547440",
    "end": "554480"
  },
  {
    "text": "change the logic of the the flow graph too much so um well there should not be",
    "start": "554480",
    "end": "559720"
  },
  {
    "text": "a false positive in reality um there are a few false positives occasionally",
    "start": "559720",
    "end": "565160"
  },
  {
    "text": "because um well some Modern compilers inline entire functions if they feel like it and so on so false positives can",
    "start": "565160",
    "end": "572040"
  },
  {
    "text": "occur but uh there're significantly like there's very few of them um the big",
    "start": "572040",
    "end": "578440"
  },
  {
    "text": "disadvantage of using the graphs only is that the comparison will not be false negative free meaning if somebody just",
    "start": "578440",
    "end": "583839"
  },
  {
    "text": "changes a buffer size or well constant I will not see it because I'm never",
    "start": "583839",
    "end": "589240"
  },
  {
    "text": "looking at any immediates at all I'm just looking at the graphs so um then again um I mean the usual way",
    "start": "589240",
    "end": "597800"
  },
  {
    "text": "that security vulnerabilities are fixed as not by somebody enlarging a buffer if there's insufficient size checking you",
    "start": "597800",
    "end": "603160"
  },
  {
    "text": "add an extra check normally you don't start enlarging buffers and I'm have some ideas about how to how to go about",
    "start": "603160",
    "end": "610880"
  },
  {
    "text": "um not missing that as many problems as I'm missing now or not missing stuff when people are enlarging buffers now",
    "start": "610880",
    "end": "617680"
  },
  {
    "text": "the general question is how can you compare two graph graphs of graphs um the problem is that if you",
    "start": "617680",
    "end": "623519"
  },
  {
    "text": "have well showing the two undirected graphs are are isomorphic math speak for eal um is really damn expensive so um",
    "start": "623519",
    "end": "633399"
  },
  {
    "text": "well fortunately for us we don't have an undirected graph and we can do a lot of other things first of all first of all",
    "start": "633399",
    "end": "640600"
  },
  {
    "text": "we have a directed graph the called graph is directed all program execution is always directed in a way and the",
    "start": "640600",
    "end": "646720"
  },
  {
    "text": "other thing is um the showing that two graphs are the same gets a lot cheaper if you have a large number or a number",
    "start": "646720",
    "end": "653399"
  },
  {
    "text": "of fixed points meaning two nodes in like a node in a graph each like one",
    "start": "653399",
    "end": "658760"
  },
  {
    "text": "node in the left graph one note on the right graph and you know those are definitely the same that allows you to",
    "start": "658760",
    "end": "663920"
  },
  {
    "text": "to try to show the graph ofis in a lot cheaper manner than than usually so um",
    "start": "663920",
    "end": "671200"
  },
  {
    "text": "when you're analyzing programs we have the entry points of the executable meaning okay function main is called you",
    "start": "671200",
    "end": "676959"
  },
  {
    "text": "can startup and uh you have certain function names which have been exported because of importing dl's or whatever so",
    "start": "676959",
    "end": "683920"
  },
  {
    "text": "we do have a bunch of fixed points to start with and um unfortunately this is usually not enough to just start with",
    "start": "683920",
    "end": "689880"
  },
  {
    "text": "these so having more would be desirable so um I'm a horrible mathematician which",
    "start": "689880",
    "end": "696120"
  },
  {
    "text": "means I'm not coming up with a sound way of finding more fix points I came up with a relatively stupid ristic to to",
    "start": "696120",
    "end": "701800"
  },
  {
    "text": "find these things which seems to work fairly decently in practice you generate a signature for every function",
    "start": "701800",
    "end": "707760"
  },
  {
    "text": "consisting of its number of basic blocks its number of edges and the number of functions called from this function and",
    "start": "707760",
    "end": "714480"
  },
  {
    "text": "um before you generate the signature you have to do some restructuring if the compiler has chopped off some things but",
    "start": "714480",
    "end": "720040"
  },
  {
    "text": "um we won't go into this too much um so the signature in a function like this",
    "start": "720040",
    "end": "725079"
  },
  {
    "text": "here would consist of five for five nodes six for six",
    "start": "725079",
    "end": "730200"
  },
  {
    "text": "links and six for six subfunction graphs so we get a tuple of three small",
    "start": "730200",
    "end": "737000"
  },
  {
    "text": "integers or integers describing the graph and then we're left with like",
    "start": "737000",
    "end": "742839"
  },
  {
    "text": "after we when we compare to to executables we have these two big sets of tupal and now we try to find tups",
    "start": "742839",
    "end": "749800"
  },
  {
    "text": "that are unique in each of these sets so for example the Tuple 3966 33 is unique",
    "start": "749800",
    "end": "756360"
  },
  {
    "text": "in both executables so we assume that this is a fixed Point these two are the same then we remove them from the set",
    "start": "756360",
    "end": "763800"
  },
  {
    "text": "and we continue with this 18 32 23 is unique until we run out of unique",
    "start": "763800",
    "end": "771760"
  },
  {
    "text": "matches and once we're left with matches that are not unique anymore we use the information from the fixed points to",
    "start": "771760",
    "end": "777720"
  },
  {
    "text": "match other ones which have collisions like you will get a lot of collisions especially for small functions meaning",
    "start": "777720",
    "end": "783560"
  },
  {
    "text": "if you're if you're counting nodes and links for example if you have a function consisting of two nodes or three nodes",
    "start": "783560",
    "end": "789600"
  },
  {
    "text": "or four there's not that many ways you can arrange those four nodes with the different branches so the smaller the",
    "start": "789600",
    "end": "794839"
  },
  {
    "text": "function is the more likely it is for you to have a collision now in order to resolve these collisions we use the C",
    "start": "794839",
    "end": "800839"
  },
  {
    "text": "graph if we know that the 1297 node is a fixed Point like we have",
    "start": "800839",
    "end": "806079"
  },
  {
    "text": "a fixed point for the 1297 node then then we look at the subsets in the two sets of the functions that are called",
    "start": "806079",
    "end": "813320"
  },
  {
    "text": "from the fixed point so we iterate over all fixed points and improve the the mapping by looking at the children",
    "start": "813320",
    "end": "818680"
  },
  {
    "text": "called from a function and then see whether if you only look at the small set these match like there's a unique",
    "start": "818680",
    "end": "825120"
  },
  {
    "text": "match this uh well obviously if the set if the sets you're comparing are smaller than the the probability of you having a",
    "start": "825120",
    "end": "831519"
  },
  {
    "text": "collision is a lot lower so in our case here we have a a fix point for the 1297",
    "start": "831519",
    "end": "836680"
  },
  {
    "text": "node and um we look at the the children like the the the children of this node in the graph and if you look at the",
    "start": "836680",
    "end": "843800"
  },
  {
    "text": "children it's clear that the 221 node is unique in both sets of children so we can match the",
    "start": "843800",
    "end": "850120"
  },
  {
    "text": "2:1 and now as we have the one two to1 matched we have resolved the collision and we can match the other two to one",
    "start": "850120",
    "end": "856120"
  },
  {
    "text": "because all of a sudden it's Unique all right so let's get into a",
    "start": "856120",
    "end": "861240"
  },
  {
    "text": "small example",
    "start": "861240",
    "end": "864480"
  },
  {
    "text": "all",
    "start": "884920",
    "end": "887199"
  },
  {
    "text": "right here we go so um here we have Microsoft's h323",
    "start": "890759",
    "end": "897199"
  },
  {
    "text": "ASN 1.do which um well Microsoft published a patch for Isa server at the beginning of",
    "start": "897199",
    "end": "902560"
  },
  {
    "text": "this year I think or at some point in the past and um they were patching a vulnerability in h323 which some people",
    "start": "902560",
    "end": "909079"
  },
  {
    "text": "from the British government had found and nobody really published what the the problem was and um while doing the",
    "start": "909079",
    "end": "916680"
  },
  {
    "text": "binary diff we get this window here which tells us which function is associated with",
    "start": "916680",
    "end": "922440"
  },
  {
    "text": "which other function like the 42 ed12 function in one binary is the same as the 42 ebfa function in the other binary",
    "start": "922440",
    "end": "928720"
  },
  {
    "text": "and on the left side you see over here whether the function did change or",
    "start": "928720",
    "end": "934120"
  },
  {
    "text": "not and we're left with a very small number of changes",
    "start": "934120",
    "end": "939440"
  },
  {
    "text": "here and then we look at the two graphs of the functions and try to find out what the changes between them was",
    "start": "939440",
    "end": "947680"
  },
  {
    "text": "so we can see that this function looks relatively similar and I currently am working on a",
    "start": "947680",
    "end": "954560"
  },
  {
    "text": "euristic that tries to highlight what actually changed in the graph which is a bit of a hard problem so we see the old",
    "start": "954560",
    "end": "960720"
  },
  {
    "text": "function here does a call to as in1 per deck u32",
    "start": "960720",
    "end": "966279"
  },
  {
    "text": "value read an attack supplied 32bit value all",
    "start": "966279",
    "end": "973399"
  },
  {
    "text": "right same thing in the other one and all of a sudden the other one",
    "start": "973399",
    "end": "979279"
  },
  {
    "text": "has a change here this block is not the same as this block because there's some comparison of the decoded value to OE to",
    "start": "979279",
    "end": "987880"
  },
  {
    "text": "OE hex and if that decoded value is larger than OE hex then e x is zero out and the",
    "start": "987880",
    "end": "995800"
  },
  {
    "text": "function returns so what's happening here is they are",
    "start": "995800",
    "end": "1002160"
  },
  {
    "text": "introducing a range check on a variable taken from a packet and if we look down here the graph has Loops highlighted",
    "start": "1002160",
    "end": "1007639"
  },
  {
    "text": "which means the green thing is an entry point to a loop and the blue thing is an exit point to a loop you see that they're decoding 16bit",
    "start": "1007639",
    "end": "1014800"
  },
  {
    "text": "values into a buffer and in the old version they were just taking these six bit 16 bit values from the from the",
    "start": "1014800",
    "end": "1022279"
  },
  {
    "text": "packets or from the asn1 stream and they were not checking the number of 16 bit things they would be decoding so you",
    "start": "1022279",
    "end": "1028360"
  },
  {
    "text": "tell oh please decode me 20 megabytes of 16 bit bits which I'm supplying so you",
    "start": "1028360",
    "end": "1033520"
  },
  {
    "text": "can smash the buffer with any data you want to so this was one of the things they",
    "start": "1033520",
    "end": "1038799"
  },
  {
    "text": "fixed that was interesting but not quite as interesting as in the next",
    "start": "1039319",
    "end": "1044480"
  },
  {
    "text": "one let's look at the next one",
    "start": "1046480",
    "end": "1050840"
  },
  {
    "text": "what do we have here again we have the as1 pr decode",
    "start": "1057640",
    "end": "1065640"
  },
  {
    "text": "unsigned 32 value which we have over here as well in",
    "start": "1065640",
    "end": "1071400"
  },
  {
    "text": "the old graph",
    "start": "1071400",
    "end": "1074760"
  },
  {
    "text": "down here so they're decoding then they call Deck alignment",
    "start": "1079280",
    "end": "1085559"
  },
  {
    "text": "and then the old version they just go straight to deck zero table charring no aloc without checking the value from the",
    "start": "1085559",
    "end": "1092640"
  },
  {
    "text": "packet and in the new version they're checking whether the value from the packet is smaller than 81 hex before",
    "start": "1092640",
    "end": "1097760"
  },
  {
    "text": "they jump over here to as one p de deck",
    "start": "1097760",
    "end": "1103480"
  },
  {
    "text": "table Char string no aloc so something is fishy with this as1 PR deck zero table string no AOC because obviously if",
    "start": "1103480",
    "end": "1111440"
  },
  {
    "text": "you don't check your arguments going into it something is going to blow up and um if you actually look at the",
    "start": "1111440",
    "end": "1117320"
  },
  {
    "text": "function you have a nice integer rep and Heap corruption afterwards so um they introduced a l checks and Isa server to",
    "start": "1117320",
    "end": "1124760"
  },
  {
    "text": "um prevent a bug in Ms asn1 like the integer rep itself the function they're calling is is an MS asn1 to surface this",
    "start": "1124760",
    "end": "1132240"
  },
  {
    "text": "is quite interesting because you would think that You' fix a bug at the library level but I think the way most software",
    "start": "1132240",
    "end": "1137840"
  },
  {
    "text": "organizations works there product group and there's a library group and the product group gets reported your application is crashing fix this so they",
    "start": "1137840",
    "end": "1144440"
  },
  {
    "text": "fix it and still fixing the library the interesting part is that there's other applications us using that library and",
    "start": "1144440",
    "end": "1149919"
  },
  {
    "text": "now we know of a new Buck class Yoo and you just grab your hard disk for",
    "start": "1149919",
    "end": "1155200"
  },
  {
    "text": "another use of this um well another use of this function and",
    "start": "1155200",
    "end": "1161600"
  },
  {
    "text": "get a free net meting remote um that was fixed a few months like I don't know what two months ago or something they",
    "start": "1161600",
    "end": "1167600"
  },
  {
    "text": "fixed a net meeting remote so they basically when they patched the ISA server they gave everybody the net meeting remote and when they finally",
    "start": "1167600",
    "end": "1173520"
  },
  {
    "text": "figured it out they fixed it uh two or three months later binary diffing makes you lazy you",
    "start": "1173520",
    "end": "1180520"
  },
  {
    "text": "quit auditing because they give you bucks for free all right um another thing s",
    "start": "1180520",
    "end": "1187480"
  },
  {
    "text": "Channel now we all remember that they published uh some overflow in s Channel",
    "start": "1187480",
    "end": "1192520"
  },
  {
    "text": "SSL paing PCT pausing and the only information they gave is there's a bug in PCT pausing so let's go over",
    "start": "1192520",
    "end": "1200520"
  },
  {
    "text": "here and let's diff the prepatch msas one to the post patch msas",
    "start": "1200520",
    "end": "1207480"
  },
  {
    "text": "one one second",
    "start": "1209679",
    "end": "1213880"
  },
  {
    "text": "H damn it one second",
    "start": "1229760",
    "end": "1233159"
  },
  {
    "text": "please I'm getting a little confused",
    "start": "1237720",
    "end": "1245640"
  },
  {
    "text": "what please stand by oh here we",
    "start": "1246600",
    "end": "1253320"
  },
  {
    "text": "go all right MSA in one post patch",
    "start": "1255280",
    "end": "1260480"
  },
  {
    "text": "and let's def it against msas in",
    "start": "1260480",
    "end": "1266960"
  },
  {
    "text": "one no we were not in Ms we're speaking about s Channel I'm completely confused",
    "start": "1266960",
    "end": "1272039"
  },
  {
    "text": "sorry for a second all",
    "start": "1272039",
    "end": "1277960"
  },
  {
    "text": "right not here just demoed it before I went into this room so that's",
    "start": "1282880",
    "end": "1289440"
  },
  {
    "text": "the phun okay s Channel all right so we load the new s",
    "start": "1289440",
    "end": "1295000"
  },
  {
    "text": "Channel run the diff we select the old s",
    "start": "1295000",
    "end": "1301080"
  },
  {
    "text": "Channel spawns an Ida database in the background to create all the signatures and all the graphs and then runs through",
    "start": "1301320",
    "end": "1307400"
  },
  {
    "text": "creating those fix points this might take a minute or two um depending on the size of the",
    "start": "1307400",
    "end": "1313600"
  },
  {
    "text": "application it might actually take a lot longer as well um I recently diffed a Cisco image on",
    "start": "1313600",
    "end": "1319799"
  },
  {
    "text": "and that was it was fairly massive but it took all night as well so was like an 8 or 10 megab executable you're not",
    "start": "1319799",
    "end": "1327480"
  },
  {
    "text": "usually dealing with 10 megab executables unless you're dealing with rear router",
    "start": "1327480",
    "end": "1334080"
  },
  {
    "text": "ROMs all right",
    "start": "1338600",
    "end": "1342799"
  },
  {
    "text": "here we go so we have a whole bunch of changes in",
    "start": "1361640",
    "end": "1367720"
  },
  {
    "text": "the new s channel so they changed more than just one thing but they did say that the bug was in PCT parsing so we",
    "start": "1367720",
    "end": "1374559"
  },
  {
    "text": "scroll down to the one only function that has PCT in its name",
    "start": "1374559",
    "end": "1380240"
  },
  {
    "text": "and have a look at it and well let's look at the graphs",
    "start": "1381799",
    "end": "1387640"
  },
  {
    "text": "next to each other so this node is obviously the same as this this is the same as this this is the same as this",
    "start": "1387640",
    "end": "1393840"
  },
  {
    "text": "this is the same as this but this is not the same as this so something they they did something with this node",
    "start": "1393840",
    "end": "1400720"
  },
  {
    "text": "here so what's going on here we have a loop down here and we",
    "start": "1402240",
    "end": "1408760"
  },
  {
    "text": "have some string coping up here and",
    "start": "1408760",
    "end": "1414600"
  },
  {
    "text": "now we have the loop the string copying down here in the loop but before that we have a size check for 32 bytes for 20",
    "start": "1419320",
    "end": "1426000"
  },
  {
    "text": "hex so what they're doing well what this Loop here does is basically they take some string which comes from the",
    "start": "1426000",
    "end": "1432039"
  },
  {
    "text": "attacker and then they knot it and invert it and pin it to itself that's something they do in the PC protocol for",
    "start": "1432039",
    "end": "1437760"
  },
  {
    "text": "some reason and um well in the old version they don't check size in the new version they",
    "start": "1437760",
    "end": "1444720"
  },
  {
    "text": "do simply enough the nice thing is you can override EIP with anything you like including",
    "start": "1444720",
    "end": "1450039"
  },
  {
    "text": "nobes and um the total time when the patch came out to uh diff it and",
    "start": "1450039",
    "end": "1456480"
  },
  {
    "text": "understand what the heck was going on was less than an hour so after like one hour after receiving the patch we could",
    "start": "1456480",
    "end": "1461600"
  },
  {
    "text": "start writing the X point and uh that was a lot of fun um if you're interested",
    "start": "1461600",
    "end": "1467600"
  },
  {
    "text": "in this sort of topic and you want to read like a more in-depth paper describing all the the",
    "start": "1467600",
    "end": "1472960"
  },
  {
    "text": "stupid math behind it and stuff um there's a URL on the screen right now you can download the paper it's been",
    "start": "1472960",
    "end": "1478840"
  },
  {
    "text": "published in the lecture notes of informatics um as part of the dmva 2004 conference",
    "start": "1478840",
    "end": "1485919"
  },
  {
    "text": "proceedings can I flip over to the next slide all right",
    "start": "1486760",
    "end": "1492440"
  },
  {
    "text": "so oh back all",
    "start": "1492440",
    "end": "1499480"
  },
  {
    "text": "all right now that must be enough part two",
    "start": "1502080",
    "end": "1509159"
  },
  {
    "text": "navigating binaries now um when driving a car a frequent problem",
    "start": "1509159",
    "end": "1515320"
  },
  {
    "text": "is to get from the current location to another location we all know that problem now we have a similar problem",
    "start": "1515320",
    "end": "1520840"
  },
  {
    "text": "when we're dealing with or when we're trying to trigger a certain bug or go to a certain location in the binary we know",
    "start": "1520840",
    "end": "1526600"
  },
  {
    "text": "like we have one location where we are and then we want to get to another location um this happens for example if",
    "start": "1526600",
    "end": "1533720"
  },
  {
    "text": "you want to reach a location where you've just beeni and found out that they fixed a bug or um you have a static",
    "start": "1533720",
    "end": "1540240"
  },
  {
    "text": "analysis tool that finds you bugs and you want to get to a certain location where you can trigger it and both cases the problem of finding way from point A",
    "start": "1540240",
    "end": "1546480"
  },
  {
    "text": "to point B has to be solved now for some reason we when we auditing code use a",
    "start": "1546480",
    "end": "1552240"
  },
  {
    "text": "textual representation that's kind of like okay how do I get from downtown Las Vegas to Mr tell's house in New York and",
    "start": "1552240",
    "end": "1560279"
  },
  {
    "text": "somebody tells you well okay first you go out of the house and you take a ride and then you go for 500 yards and you",
    "start": "1560279",
    "end": "1566559"
  },
  {
    "text": "take a left and he describes it all the way from Las Vegas to New York to the specific door by describing every",
    "start": "1566559",
    "end": "1574480"
  },
  {
    "text": "turn so and now one of those roads is blocked what do you do you need a new description and you're all confused",
    "start": "1574480",
    "end": "1580679"
  },
  {
    "text": "there's a reason why humans started inventing Maps a few thousand years back and um there's no reason why we're not",
    "start": "1580679",
    "end": "1586840"
  },
  {
    "text": "using maps to navigate code properly so um the general thing is visualizing",
    "start": "1586840",
    "end": "1594720"
  },
  {
    "text": "programs or having maps for programs is really important programs nowadays though are really huge and they're not",
    "start": "1594720",
    "end": "1600200"
  },
  {
    "text": "easily understood and um your brain is not built to read code I mean code has",
    "start": "1600200",
    "end": "1605960"
  },
  {
    "text": "been around for I don't know perhaps I let's let's be very very um what do you",
    "start": "1605960",
    "end": "1611799"
  },
  {
    "text": "call it like uh let's just take a big number and say round about 100 years now the human brain didn't have all that",
    "start": "1611799",
    "end": "1617159"
  },
  {
    "text": "much time to evolve on that that period so we're all not optimized for reading code we're optimizing for seeing there's a rabbit running away",
    "start": "1617159",
    "end": "1622919"
  },
  {
    "text": "from us or there's a a big animal running towards us um which means",
    "start": "1622919",
    "end": "1628440"
  },
  {
    "text": "recognition tasks are significantly faster for humans to do than memorization tasks where you read",
    "start": "1628440",
    "end": "1634039"
  },
  {
    "text": "something you have to understand it so um many many problems are not really problems but visualization problems and",
    "start": "1634039",
    "end": "1641360"
  },
  {
    "text": "um if you can visualize functional interdependencies better it'll yield better program understanding and if you",
    "start": "1641360",
    "end": "1647159"
  },
  {
    "text": "understand the program better you'll find more bugs now I used the analogy of of road",
    "start": "1647159",
    "end": "1652520"
  },
  {
    "text": "maps before and analogies for many things really suck because roads and P",
    "start": "1652520",
    "end": "1659120"
  },
  {
    "text": "trees are really not the same like even if you have a road crossing you rarely ever have more than four roads",
    "start": "1659120",
    "end": "1664480"
  },
  {
    "text": "intersecting at any point um it is quite usual to have uh a function calling much",
    "start": "1664480",
    "end": "1670640"
  },
  {
    "text": "more or many more than just four functions Road Crossings um well in general roads are relatively sparse and",
    "start": "1670640",
    "end": "1677240"
  },
  {
    "text": "they run parallel and don't have every road to well in France you do you have every road going to anywhere in the",
    "start": "1677240",
    "end": "1682760"
  },
  {
    "text": "country going through Paris but um normally you don't have like one place where everybody's going through and you",
    "start": "1682760",
    "end": "1688960"
  },
  {
    "text": "don't have one place where you have to go through five times a day in order to get to a completely different place so",
    "start": "1688960",
    "end": "1695600"
  },
  {
    "text": "um we need to well we need to be careful with the analogy of road map because",
    "start": "1695600",
    "end": "1701679"
  },
  {
    "text": "quite clearly programs are not quite like roads so um the first first thing we",
    "start": "1701679",
    "end": "1709120"
  },
  {
    "text": "would like to do at times is restructuring call graphs the main point is that um we have lots of Library",
    "start": "1709120",
    "end": "1714559"
  },
  {
    "text": "functions and with a graph we would like to visualize the the interplay between",
    "start": "1714559",
    "end": "1719600"
  },
  {
    "text": "the functions and which call function calls which other and what their relations is and how they're logically",
    "start": "1719600",
    "end": "1724840"
  },
  {
    "text": "dependent on each other now if you have a li Library function like Malo which is virtually called by every other function",
    "start": "1724840",
    "end": "1730080"
  },
  {
    "text": "then all of a sudden you're tying together logically separate parts of the graph into one big mess and that makes",
    "start": "1730080",
    "end": "1735640"
  },
  {
    "text": "things really really ugly to look at now if you remove Library functions",
    "start": "1735640",
    "end": "1741120"
  },
  {
    "text": "automatically then you get a much nicer nicer graph um first of all Library",
    "start": "1741120",
    "end": "1746960"
  },
  {
    "text": "functions have a lot of edges going into them so you just remove a lot of edges and edges are ugly in the graph you",
    "start": "1746960",
    "end": "1752880"
  },
  {
    "text": "don't like you want to remove as many edges as possible um the other thing is that the graph layout algorithms Will",
    "start": "1752880",
    "end": "1758720"
  },
  {
    "text": "Group connected nodes closer together than disconnected nodes so if you're disconnecting logically SE disparate",
    "start": "1758720",
    "end": "1764080"
  },
  {
    "text": "parts of the program you get a much more accurate layout so um the thing is how",
    "start": "1764080",
    "end": "1770200"
  },
  {
    "text": "do you remove Library functions now the first idea most people will have is have a blacklist oh I just remove everything",
    "start": "1770200",
    "end": "1775799"
  },
  {
    "text": "that's called Malo but the thing is everybody will have rappers around Malo and everybody will build their own Library functions and we're graph people",
    "start": "1775799",
    "end": "1783200"
  },
  {
    "text": "we're not people who like string tables so what we're going to do is we're going to remove nodes based on the characteristics on the graph meaning a",
    "start": "1783200",
    "end": "1789919"
  },
  {
    "text": "library function will have a high IND degree will be called from many locations and will call relatively few others",
    "start": "1789919",
    "end": "1796760"
  },
  {
    "text": "so right this on the slides but it's changed",
    "start": "1796760",
    "end": "1802480"
  },
  {
    "text": "so please hold on it's",
    "start": "1821039",
    "end": "1824840"
  },
  {
    "text": "Java all right so what we're going to do is we're going",
    "start": "1826679",
    "end": "1831720"
  },
  {
    "text": "to take a reasonably sized mail server and this is the initial map you get these are all the nodes and all the",
    "start": "1831720",
    "end": "1838080"
  },
  {
    "text": "edges between them obviously this is not too nice to look at if you're a cat and like playing with yarn balls that might be but um this just",
    "start": "1838080",
    "end": "1846720"
  },
  {
    "text": "ain't okay now we can select nodes based on minimum or on ingree and out degree",
    "start": "1846720",
    "end": "1852519"
  },
  {
    "text": "so we're going to select nodes that have a very high IND degree and just strip strip them from",
    "start": "1852519",
    "end": "1858799"
  },
  {
    "text": "the graph and the graph gets simpler and we do this again and the graph gets even simpler",
    "start": "1858799",
    "end": "1866159"
  },
  {
    "text": "they can oops they can relay out and actually get something that tells you something about the interation of these",
    "start": "1866159",
    "end": "1872240"
  },
  {
    "text": "functions we kind of have to be careful though because the more you remove the more likely you're to going to disconnect parts that actually belong",
    "start": "1872240",
    "end": "1878360"
  },
  {
    "text": "together so um well just don't go nuts even though the graph looks really nice",
    "start": "1878360",
    "end": "1886360"
  },
  {
    "text": "okay so we have kind of started attacking the problem of getting some",
    "start": "1888519",
    "end": "1893799"
  },
  {
    "text": "sort of bearings within the binary or like getting a map of the binary now a map really doesn't help you all that",
    "start": "1893799",
    "end": "1899559"
  },
  {
    "text": "much when you don't know where you are on that map so we need to find some way of putting ourselves on the map and the",
    "start": "1899559",
    "end": "1906960"
  },
  {
    "text": "the simplest way of doing this is setting Echo break points Echo break points is a break like you write a small debuger that sets a break point on every",
    "start": "1906960",
    "end": "1913279"
  },
  {
    "text": "node of the graph and whenever it gets hit it just sends the the address of the break that just gets hit over the",
    "start": "1913279",
    "end": "1919760"
  },
  {
    "text": "network and continues running the program so you get a program trace of which function was was executed at which",
    "start": "1919760",
    "end": "1927240"
  },
  {
    "text": "point um this is basically the same concept I presented at blackhead Vegas 2002 and um you can visualize the",
    "start": "1927600",
    "end": "1934880"
  },
  {
    "text": "results on graph afterwards first of all we have to get some",
    "start": "1934880",
    "end": "1939158"
  },
  {
    "text": "results all right",
    "start": "1940600",
    "end": "1944799"
  },
  {
    "text": "start the",
    "start": "1950799",
    "end": "1953240"
  },
  {
    "text": "service",
    "start": "1955840",
    "end": "1958840"
  },
  {
    "text": "380 all right so we have a de now attached to the mail",
    "start": "1962440",
    "end": "1967760"
  },
  {
    "text": "server and we open up a new window because we would like to have the full",
    "start": "1967760",
    "end": "1975600"
  },
  {
    "text": "graph and we start setting a breakpoint on each and every function in this",
    "start": "1976200",
    "end": "1983000"
  },
  {
    "text": "graph and then we start talking to the mail server just have to find a window where I have can do",
    "start": "1983000",
    "end": "1991000"
  },
  {
    "text": "this all right and then we quit collecting all those back points",
    "start": "1998679",
    "end": "2004480"
  },
  {
    "text": "because there's no need to collect more than necessary and what we can then do is we can take the functions that we",
    "start": "2004480",
    "end": "2012840"
  },
  {
    "text": "hit and delete everything that we didn't hit which gives us a layout of the",
    "start": "2013399",
    "end": "2020960"
  },
  {
    "text": "functions that we actually were able to to trigger we can then play back the events in the graph to see at which",
    "start": "2020960",
    "end": "2027600"
  },
  {
    "text": "point which function was called and what the order of the calling is and so",
    "start": "2027600",
    "end": "2033480"
  },
  {
    "text": "on all right oh and we have lots of different visualization modes as well so this is",
    "start": "2035080",
    "end": "2040679"
  },
  {
    "text": "information pornography um uh it feels kind of dirty having all",
    "start": "2040679",
    "end": "2046600"
  },
  {
    "text": "these funny colors on screen but all right",
    "start": "2046600",
    "end": "2051919"
  },
  {
    "text": "um where were we all right",
    "start": "2052200",
    "end": "2058800"
  },
  {
    "text": "now while you can do do other things as well you can um use these things to I",
    "start": "2058800",
    "end": "2064040"
  },
  {
    "text": "know let's take another window",
    "start": "2064040",
    "end": "2067879"
  },
  {
    "text": "let's select an arbitrary function somewhere like a library function that we know gets hit",
    "start": "2072560",
    "end": "2078919"
  },
  {
    "text": "somewhere what might be",
    "start": "2080720",
    "end": "2084240"
  },
  {
    "text": "interesting blah blah",
    "start": "2087839",
    "end": "2091280"
  },
  {
    "text": "blah okay let's take as in printf and please give me only those notes that end",
    "start": "2094440",
    "end": "2100160"
  },
  {
    "text": "up calling as inff and remove everything",
    "start": "2100160",
    "end": "2105280"
  },
  {
    "text": "else oh all right so well yeah this is great for impressing",
    "start": "2105280",
    "end": "2112400"
  },
  {
    "text": "people okay so what else is all this ingree out degree stuff good for actually um Library functions are not",
    "start": "2112400",
    "end": "2119160"
  },
  {
    "text": "only good for cluttering up your graph they're also interesting for another reason because Library functions are",
    "start": "2119160",
    "end": "2124240"
  },
  {
    "text": "where bugs happen usually because many bugs come from semantic issue of there being a desynchronization between what",
    "start": "2124240",
    "end": "2130800"
  },
  {
    "text": "the programmer does and what well what the programmer thinks a function does and what actually does so Library",
    "start": "2130800",
    "end": "2136800"
  },
  {
    "text": "functions are where things go bad the first thing is Library functions give you the most punch for your money if you",
    "start": "2136800",
    "end": "2142000"
  },
  {
    "text": "find a bug on them because Library functions are C from many locations which means it's quite likely that if",
    "start": "2142000",
    "end": "2147720"
  },
  {
    "text": "you have a bug in a library function you will be able to reach that Library function as well the other thing is that most bugs have to do with somebody um",
    "start": "2147720",
    "end": "2155119"
  },
  {
    "text": "not properly like not not knowing all the side conditions of all the inputs for a library function like U I don't",
    "start": "2155119",
    "end": "2162319"
  },
  {
    "text": "know a Moc that runs up the the programmer doesn't know that if you pass in a too large value it'll just corrupt",
    "start": "2162319",
    "end": "2167760"
  },
  {
    "text": "the Heap so if you have many locations at which the library function or which a function is called then obviously you'll",
    "start": "2167760",
    "end": "2174960"
  },
  {
    "text": "have greater odds of one of them being screwed up so being able to detect Library function is useful on its",
    "start": "2174960",
    "end": "2183200"
  },
  {
    "text": "own so um to show that this is not just pretty but useful um I'll show how we",
    "start": "2183200",
    "end": "2188319"
  },
  {
    "text": "used something like this in order to quickly build exp an exploit for the PCT bug after it was",
    "start": "2188319",
    "end": "2195800"
  },
  {
    "text": "released",
    "start": "2196319",
    "end": "2199319"
  },
  {
    "text": "okay so let's look at the first graph we know that the bug was in um",
    "start": "2207680",
    "end": "2213640"
  },
  {
    "text": "pct1 surf handle blah blah blah thing so we look at the note that actually calls",
    "start": "2213640",
    "end": "2220720"
  },
  {
    "text": "there this node here calls PCT one serve handle blah hello what we do is we set",
    "start": "2220720",
    "end": "2226359"
  },
  {
    "text": "breakpoints on every part of this function collect them and color them into the graph now back then I didn't",
    "start": "2226359",
    "end": "2232800"
  },
  {
    "text": "have the nice Java interface yet so I had to do it all with python python script Python scripts God bless the",
    "start": "2232800",
    "end": "2240920"
  },
  {
    "text": "th all right so this was the code path that was actually taken and now we know",
    "start": "2240920",
    "end": "2246760"
  },
  {
    "text": "that if you look at the this this map here we know that we took a wrong Branch up here because we want to get here here here and we took the wrong",
    "start": "2246760",
    "end": "2254240"
  },
  {
    "text": "Branch here so we zoom in and yeah is being subtracted f8 if",
    "start": "2254240",
    "end": "2261000"
  },
  {
    "text": "it's zero it goes where we want to go so we keep in mind f8 we add six we add one",
    "start": "2261000",
    "end": "2266839"
  },
  {
    "text": "we add one we add one we add F oh no yeah we add F",
    "start": "2266839",
    "end": "2272119"
  },
  {
    "text": "ffd and we go to the beginning of the function or we just look at the slide",
    "start": "2272119",
    "end": "2278880"
  },
  {
    "text": "um and we know that AR like the the value in Arc zero member four at the",
    "start": "2278880",
    "end": "2284000"
  },
  {
    "text": "beginning of this function Arc Z is as a structure pointer has to be 1 z0",
    "start": "2284000",
    "end": "2289960"
  },
  {
    "text": "Fe so we know that we have to set a global St State variable from the structure to one Z Fe",
    "start": "2290520",
    "end": "2300200"
  },
  {
    "text": "and then we just search through the binary for functions setting anything to Fe and lo and behold we find a function",
    "start": "2300200",
    "end": "2307240"
  },
  {
    "text": "here and we've colored all the notes that do the Fe stuff red so there's three of",
    "start": "2307240",
    "end": "2314960"
  },
  {
    "text": "them there's one of them here one of them here and one of them here so these",
    "start": "2314960",
    "end": "2321079"
  },
  {
    "text": "two both end up in the ssl3 protocol Handler where we don't want to go there's only one which leads to PCT",
    "start": "2321079",
    "end": "2326520"
  },
  {
    "text": "server protocol Handler down here so we know that instead of taking the path that was taken which is along this P",
    "start": "2326520",
    "end": "2332839"
  },
  {
    "text": "path here from this red Noe we want to Branch right here right",
    "start": "2332839",
    "end": "2338040"
  },
  {
    "text": "here and then just go through this call tree until we reach the location and",
    "start": "2338040",
    "end": "2344200"
  },
  {
    "text": "this was quite nice because um after we received the patch the turn like the time we had to spend like about an hour",
    "start": "2344200",
    "end": "2350960"
  },
  {
    "text": "later we knew what the bug was about 6 hours later we had EIP successfully overwritten and about 12 hours later we",
    "start": "2350960",
    "end": "2356599"
  },
  {
    "text": "had a fully working exploit which was a a decent turnover for Rapid exploit",
    "start": "2356599",
    "end": "2363160"
  },
  {
    "text": "development all right um so enough of all this um this is not what I",
    "start": "2364040",
    "end": "2370200"
  },
  {
    "text": "usually talk about I usually talk about the big program I'm building which never gets finished which I've been building for any number of years um if you've",
    "start": "2370200",
    "end": "2377440"
  },
  {
    "text": "seen my black at Amsterdam talk I tried to explain some of the concepts which didn't all work and uh it's one of those",
    "start": "2377440",
    "end": "2383079"
  },
  {
    "text": "things where you think you're going to be done in two two months and then three years go by and uh H you all know the",
    "start": "2383079",
    "end": "2388560"
  },
  {
    "text": "feeling I guess yeah well so um the last part of my talk will be about automatically",
    "start": "2388560",
    "end": "2394520"
  },
  {
    "text": "answering the question where does the certain certain value come from or where does a certain value go to which is",
    "start": "2394520",
    "end": "2400640"
  },
  {
    "text": "really interesting for for auditing code and those questions are really hard to answer especially if you have a language",
    "start": "2400640",
    "end": "2406480"
  },
  {
    "text": "which allows you to do pointer manipulation and pointer arithmetic and especially if you don't have any type information because if you have type",
    "start": "2406480",
    "end": "2412960"
  },
  {
    "text": "information you can at least infer okay the types are being held most of the time and we can infer from the types",
    "start": "2412960",
    "end": "2418000"
  },
  {
    "text": "where things are going we have nether in the binary um so we have to do some stunts which I explained in the black at",
    "start": "2418000",
    "end": "2424480"
  },
  {
    "text": "Amsterdam 2003 talk um I have a little bit of it implemented",
    "start": "2424480",
    "end": "2429640"
  },
  {
    "text": "actually let's load msas in",
    "start": "2429640",
    "end": "2433599"
  },
  {
    "text": "one all right I'll have to quit ID and restart",
    "start": "2435920",
    "end": "2441160"
  },
  {
    "text": "it so we go to msas one",
    "start": "2451920",
    "end": "2457838"
  },
  {
    "text": "and we go to a function calling local aloc which is their the changed maloc where they actually added the check for",
    "start": "2460599",
    "end": "2465880"
  },
  {
    "text": "the Overflow within the aloc and now we'd like to answer the question please give me a list of all the exported",
    "start": "2465880",
    "end": "2471240"
  },
  {
    "text": "functions in msas and one that pass a user like a pass an input value into maloc and then we can look at those",
    "start": "2471240",
    "end": "2477839"
  },
  {
    "text": "functions and see whether they do an addition or a shift left or something similarly ridic ridiculous for this we",
    "start": "2477839",
    "end": "2484640"
  },
  {
    "text": "run the data flow analysis",
    "start": "2484640",
    "end": "2488760"
  },
  {
    "text": "and we wait two minutes for it to run because it generates about 150 megabytes of debugging uh debug logs because I",
    "start": "2489800",
    "end": "2497200"
  },
  {
    "text": "don't have a debugger to attach so I have to debug by prti and uh that just slows the execution down having 150",
    "start": "2497200",
    "end": "2504520"
  },
  {
    "text": "megabytes of CP being written through a hard disk so um while we're waiting for the program to finish are there any",
    "start": "2504520",
    "end": "2509720"
  },
  {
    "text": "questions concerning the first two halves of the the T yes",
    "start": "2509720",
    "end": "2516400"
  },
  {
    "text": "well I'm building the graph based oh the question is whether I'm using process tracing to to build the",
    "start": "2523920",
    "end": "2531400"
  },
  {
    "text": "graph well not I'm using Ida Pro to generate the graph and then I'm using uh",
    "start": "2531400",
    "end": "2537440"
  },
  {
    "text": "network based debugger in order to to collect the the events",
    "start": "2537440",
    "end": "2544960"
  },
  {
    "text": "yeah well you will at some Library CS but as I mentioned before there's rappers around Malo and the like so",
    "start": "2545440",
    "end": "2551760"
  },
  {
    "text": "using the graph is usually a safer way of going going about it because you can have a reer on Melo and then Melo will",
    "start": "2551760",
    "end": "2558440"
  },
  {
    "text": "be removed and you still have the node above it thing called 250 times",
    "start": "2558440",
    "end": "2563838"
  },
  {
    "text": "so yes please uh which",
    "start": "2564359",
    "end": "2569880"
  },
  {
    "text": "one uh yes it is um I'm actually partnering with",
    "start": "2569880",
    "end": "2574960"
  },
  {
    "text": "immunity SEC and blackhe hat to sell it so you can uh look at it on the website",
    "start": "2574960",
    "end": "2580800"
  },
  {
    "text": "uh you know the the URL for the paper beforehand there's a website where you can look at sales material woohoo and um",
    "start": "2580800",
    "end": "2587800"
  },
  {
    "text": "if you want to buy it you can talk to the blackhead folks or to the immunity folks and uh yeah ah it's",
    "start": "2587800",
    "end": "2596480"
  },
  {
    "text": "done contrary to the other plugins which I'm showing the binary diff is actually done and working which is a a refreshing",
    "start": "2597040",
    "end": "2604400"
  },
  {
    "text": "change if you're spending a lot of time with nonworking programs which you running so this is uh the data flow sorry this",
    "start": "2604400",
    "end": "2609839"
  },
  {
    "text": "is a data flow graph of all the the things going into the allocation in the end it's not really pretty to read yet",
    "start": "2609839",
    "end": "2615480"
  },
  {
    "text": "so you uh just have to trust me when I tell you what we're going to do now we're going to to the very top and if",
    "start": "2615480",
    "end": "2622200"
  },
  {
    "text": "you don't recognize this Assembly Language this is because uh it's an intermediate language which I build up one time and we're not going to look at",
    "start": "2622200",
    "end": "2628960"
  },
  {
    "text": "this note here one two three one two",
    "start": "2628960",
    "end": "2636720"
  },
  {
    "text": "three four five six seven",
    "start": "2637559",
    "end": "2642880"
  },
  {
    "text": "eight nine all right so what we have here is we have this node which um well",
    "start": "2647040",
    "end": "2654200"
  },
  {
    "text": "from the Define fffs SP you can see that this is the beginning of a function uh just trust me on this and up here you",
    "start": "2654200",
    "end": "2660040"
  },
  {
    "text": "can see that my program has determined that at this point the value that later on gets passed into the aloc is the",
    "start": "2660040",
    "end": "2667240"
  },
  {
    "text": "input register one uh it's like a it's a simplified or a beautified version of spark in mute language so input register",
    "start": "2667240",
    "end": "2674079"
  },
  {
    "text": "one means the second argument to a function input register n it's the first argument",
    "start": "2674079",
    "end": "2679960"
  },
  {
    "text": "so let's go to the address 76 2",
    "start": "2679960",
    "end": "2686559"
  },
  {
    "text": "A 4d2 F this thing is called asn1 per deck",
    "start": "2686559",
    "end": "2692119"
  },
  {
    "text": "table CH 32 string well we knew that per had some weird issues",
    "start": "2692119",
    "end": "2697839"
  },
  {
    "text": "and we know that argument four here is corresponding to input register zero uh input register one then we scroll down a",
    "start": "2697839",
    "end": "2705200"
  },
  {
    "text": "little bit and we see a shift left here so they're shifting it left by two bits and they're passing it",
    "start": "2705200",
    "end": "2712520"
  },
  {
    "text": "into something that looks suspiciously like Malo so we have a shift before the maloc",
    "start": "2712520",
    "end": "2720280"
  },
  {
    "text": "which uh might be useful if somebody calls gets the idea of calling this function here um with value that user",
    "start": "2720280",
    "end": "2728160"
  },
  {
    "text": "might have supplied such things tend to happen asm1 and um that's pretty much already",
    "start": "2728160",
    "end": "2735599"
  },
  {
    "text": "it I guess any",
    "start": "2735599",
    "end": "2741839"
  },
  {
    "text": "questions uh the binary diff uh the question is how much some",
    "start": "2742880",
    "end": "2748000"
  },
  {
    "text": "what the binary diff cost €750 which is roughly $900 single seat",
    "start": "2748000",
    "end": "2753640"
  },
  {
    "text": "license right and uh a for giving this uh half South pitch thing I feel kind of",
    "start": "2753640",
    "end": "2760839"
  },
  {
    "text": "uncomfortable standing here any other questions",
    "start": "2760839",
    "end": "2768280"
  },
  {
    "text": "yes um how the question is how much overhead there is involved with doing the runtime analysis this depends on",
    "start": "2770839",
    "end": "2776640"
  },
  {
    "text": "what you're doing you mean just setting break points on every function and removing it well the thing is you can you can automatically remove the break",
    "start": "2776640",
    "end": "2782760"
  },
  {
    "text": "points once they were hit so that's quite useful for doing fast coverage analysis",
    "start": "2782760",
    "end": "2788920"
  },
  {
    "text": "yes um the question is how much the bar me changes between two compiler versions I have no",
    "start": "2799119",
    "end": "2804760"
  },
  {
    "text": "idea any other questions",
    "start": "2804760",
    "end": "2810000"
  },
  {
    "text": "yes come in please",
    "start": "2813720",
    "end": "2818160"
  },
  {
    "text": "if you if you want to do a tech",
    "start": "2824920",
    "end": "2828200"
  },
  {
    "text": "analysis oh well definitely you can patch the compiler to to obate code but the",
    "start": "2835280",
    "end": "2842440"
  },
  {
    "text": "experience with code ofation is that a cat and mouse game and uh never needs anywhere so any other",
    "start": "2842440",
    "end": "2850839"
  },
  {
    "text": "questions then uh since everybody's oh yeah",
    "start": "2850839",
    "end": "2856720"
  },
  {
    "text": "uh to be quite honest I'm quite glad if nobody's paying attention any more",
    "start": "2878319",
    "end": "2885119"
  },
  {
    "text": "questions all right uh then thanks everybody has already",
    "start": "2885119",
    "end": "2889960"
  },
  {
    "text": "left",
    "start": "2905760",
    "end": "2908760"
  },
  {
    "text": "e",
    "start": "2935720",
    "end": "2938720"
  },
  {
    "text": "e",
    "start": "2965720",
    "end": "2968720"
  },
  {
    "text": "e",
    "start": "2995640",
    "end": "2998640"
  },
  {
    "text": "e",
    "start": "3025640",
    "end": "3028640"
  },
  {
    "text": "e",
    "start": "3055640",
    "end": "3058640"
  },
  {
    "text": "e",
    "start": "3085559",
    "end": "3088559"
  },
  {
    "text": "e",
    "start": "3115520",
    "end": "3118520"
  },
  {
    "text": "e",
    "start": "3145520",
    "end": "3148520"
  },
  {
    "text": "e",
    "start": "3175440",
    "end": "3178440"
  },
  {
    "text": "e",
    "start": "3205440",
    "end": "3208440"
  },
  {
    "text": "e",
    "start": "3235440",
    "end": "3238440"
  },
  {
    "text": "e",
    "start": "3265359",
    "end": "3268359"
  },
  {
    "text": "e",
    "start": "3295319",
    "end": "3298319"
  },
  {
    "text": "e",
    "start": "3325319",
    "end": "3328319"
  },
  {
    "text": "e",
    "start": "3355240",
    "end": "3358240"
  },
  {
    "text": "e",
    "start": "3385240",
    "end": "3388240"
  },
  {
    "text": "e",
    "start": "3415240",
    "end": "3418240"
  },
  {
    "text": "e",
    "start": "3445160",
    "end": "3448160"
  },
  {
    "text": "e",
    "start": "3475119",
    "end": "3478119"
  },
  {
    "text": "e",
    "start": "3505119",
    "end": "3508119"
  },
  {
    "text": "e",
    "start": "3535039",
    "end": "3538039"
  },
  {
    "text": "e",
    "start": "3565039",
    "end": "3568039"
  },
  {
    "text": "e",
    "start": "3595039",
    "end": "3598039"
  },
  {
    "text": "e",
    "start": "3624960",
    "end": "3627960"
  },
  {
    "text": "e",
    "start": "3654920",
    "end": "3657920"
  },
  {
    "text": "e",
    "start": "3684920",
    "end": "3687920"
  },
  {
    "text": "e e",
    "start": "3714839",
    "end": "3718880"
  }
]