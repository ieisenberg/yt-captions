[
  {
    "text": "welcome to inside the Apple tea - this is the Jasmine room this speakers today",
    "start": "60",
    "end": "7140"
  },
  {
    "text": "are Michael David off and Jeremy Erickson a couple of notes for you",
    "start": "7140",
    "end": "12509"
  },
  {
    "text": "before we begin the first one is to stop by the business hall located in Mandalay Bay Oceanside and shoreline ballrooms on",
    "start": "12509",
    "end": "19080"
  },
  {
    "text": "level two also the blackout Arsenal is in the business hall on level two I'd",
    "start": "19080",
    "end": "24119"
  },
  {
    "text": "like to thank you for putting your phone on vibrate it makes it easier for the rest of us to ignore it so with that I'd",
    "start": "24119",
    "end": "29880"
  },
  {
    "text": "like you to welcome more speakers to the stage thank you alright",
    "start": "29880",
    "end": "46129"
  },
  {
    "text": "well hello everybody I'm Michaela David often this is Jeremy Erickson we're both",
    "start": "46129",
    "end": "51239"
  },
  {
    "text": "researchers on duas advanced research team dual labs do labs is a team of hackers researchers and engineers",
    "start": "51239",
    "end": "57809"
  },
  {
    "text": "dedicated to protecting the public by identifying and fixing security vulnerabilities on a broad scale we do",
    "start": "57809",
    "end": "64920"
  },
  {
    "text": "this by prototyping new products and conducting research into security systems used by the broader security",
    "start": "64920",
    "end": "71070"
  },
  {
    "text": "community I've been working in the information security space for over a decade as a security researcher and",
    "start": "71070",
    "end": "77009"
  },
  {
    "text": "consultant I primarily focus on vulnerability discovery exploit development and reverse engineering hi",
    "start": "77009",
    "end": "83580"
  },
  {
    "text": "I'm Jeremy Erickson I've also been working in the information security space for about a decade I tend to work more on early prototyping",
    "start": "83580",
    "end": "90570"
  },
  {
    "text": "of networks and systems but I occasionally like to go and see how things work on the inside we're here",
    "start": "90570",
    "end": "100140"
  },
  {
    "text": "today to talk about the teacher chip the t2 is the successor to the t1 but the t1",
    "start": "100140",
    "end": "106439"
  },
  {
    "text": "ship was the chip that powered the touch bar and touch ID on previous generations MacBooks",
    "start": "106439",
    "end": "111450"
  },
  {
    "text": "and the t2 is the next evolution of that platform one of the new key aspects of",
    "start": "111450",
    "end": "117060"
  },
  {
    "text": "the t2 is the greatly increased role that it plays in platform integrity and system security here today we're gonna",
    "start": "117060",
    "end": "123899"
  },
  {
    "text": "discuss what the objectives the t2 are the t2 system architecture how to get started analyzing t2 firmware and the",
    "start": "123899",
    "end": "131009"
  },
  {
    "text": "embedded ua Phi images how the secure boot flow has changed in t2 systems what accessible communication",
    "start": "131009",
    "end": "137060"
  },
  {
    "text": "channels exist between the t2 and Mac OS how to directly communicate and interface with expose t2 services and",
    "start": "137060",
    "end": "143720"
  },
  {
    "text": "share with you some tooling to make this process a little bit easier so based on",
    "start": "143720",
    "end": "150050"
  },
  {
    "text": "our research we developed an understanding of what some of the t2s design objectives were one of the main",
    "start": "150050",
    "end": "156530"
  },
  {
    "text": "ones was to enhance privacy controls by providing Hardware disconnects to certain peripherals like the built-in",
    "start": "156530",
    "end": "162080"
  },
  {
    "text": "microphone and camera this allows Apple to prevent malware from being able to leverage those peripherals in scenarios",
    "start": "162080",
    "end": "168020"
  },
  {
    "text": "such as when the laptop lid is closed or the screen is locked additionally they were aiming to better",
    "start": "168020",
    "end": "173960"
  },
  {
    "text": "protect data at rest in a much greater capacity than has previously been done on Mac OS platforms by mixing in key",
    "start": "173960",
    "end": "179690"
  },
  {
    "text": "material only available to the t2 Apple was preventing offline attacks in scenarios where the physical SSD flash",
    "start": "179690",
    "end": "185360"
  },
  {
    "text": "chips are removed as the process of mixing in a password to ripe key with",
    "start": "185360",
    "end": "191180"
  },
  {
    "text": "the t2 secret happens directly on the t2 it allows Apple to throttle brute-force decryption attempts finally one of the",
    "start": "191180",
    "end": "198440"
  },
  {
    "text": "most important design objectives of the t2 was to bring the same level of security and integrity protection available on iOS devices to the Mac OS",
    "start": "198440",
    "end": "205970"
  },
  {
    "text": "ecosystem so why are we an",
    "start": "205970",
    "end": "211160"
  },
  {
    "text": "authentication company looking at the t2 in the first place well I do olabs we believe in the concept of democratizing",
    "start": "211160",
    "end": "217700"
  },
  {
    "text": "security we strive to enable other researchers to leverage our work to further the field understanding the",
    "start": "217700",
    "end": "223910"
  },
  {
    "text": "security underpinnings of a system is critical to being able to trust it and the more eyes there are on any critical",
    "start": "223910",
    "end": "230180"
  },
  {
    "text": "piece of technology the more latent vulnerabilities will be uncovered and can be fixed the t2 is one of those leap",
    "start": "230180",
    "end": "237050"
  },
  {
    "text": "ahead technologies that enables new endpoint centric enterprise security models and more on significant",
    "start": "237050",
    "end": "242180"
  },
  {
    "text": "investigation now that we understand some of the objectives of the t2 and why",
    "start": "242180",
    "end": "247970"
  },
  {
    "text": "we're looking at it let's look what at what the t2 actually is so in the Intel",
    "start": "247970",
    "end": "254000"
  },
  {
    "text": "world the t2 is referred to as an embedded controller most of you're likely familiar with the concept of a",
    "start": "254000",
    "end": "259609"
  },
  {
    "text": "base board management controller or BMC BMC is allow for remote an administration of a system there very",
    "start": "259609",
    "end": "265760"
  },
  {
    "text": "commonly found in server architectures and are utilized heavily by the bare metal cloud industry",
    "start": "265760",
    "end": "270770"
  },
  {
    "text": "to reset systems to a pristine state before provisioning new customers to them the t2 is essentially a BMC - the",
    "start": "270770",
    "end": "279499"
  },
  {
    "text": "remote management stack embedded controllers are responsible for orchestrating various tasks on the platform such as the very initial power",
    "start": "279499",
    "end": "286069"
  },
  {
    "text": "sequencing thermal management power state transitioning and interfacing with various onboard peripherals the t2 is",
    "start": "286069",
    "end": "294889"
  },
  {
    "text": "comprised of several components primarily it's an arm 64 core based off of Apple's a10 design internally it has",
    "start": "294889",
    "end": "302180"
  },
  {
    "text": "a flash controller that deals with AES and storage of data on the raw SSD flash",
    "start": "302180",
    "end": "307759"
  },
  {
    "text": "chips that are present on t2 supported platforms one interesting note about this is that the SSDs that are present",
    "start": "307759",
    "end": "314900"
  },
  {
    "text": "lack their own controllers and are just raw flash chips different functionalities such as wear leveling and block allocation to t2 you can't",
    "start": "314900",
    "end": "322520"
  },
  {
    "text": "just unplug these drives stick of in another computer and expect to actually be able to read them out there is also",
    "start": "322520",
    "end": "328310"
  },
  {
    "text": "some internal storage areas for storing things like the t2 filesystem the UEFI firmware and other variables",
    "start": "328310",
    "end": "334839"
  },
  {
    "text": "finally there's what Apple calls a secure Enclave processor or SEP which handle things such as encryption keys",
    "start": "334839",
    "end": "341659"
  },
  {
    "text": "and touch ID to get authentication the t2 is connected to the rest of the platform via several common interfaces",
    "start": "341659",
    "end": "347569"
  },
  {
    "text": "such as PCIe mipi PDM and east by which we will get into later but this",
    "start": "347569",
    "end": "353479"
  },
  {
    "text": "architecture can be simplified to basically this highly privileged DMA",
    "start": "353479",
    "end": "358729"
  },
  {
    "text": "capable Apple watch soldered to the motherboard that orchestrates and control some of the most basic platform",
    "start": "358729",
    "end": "364009"
  },
  {
    "text": "functionalities now that we understand a bit about what the t2 is let's talk",
    "start": "364009",
    "end": "370099"
  },
  {
    "text": "about what's actually running on top of it the teacher kernel and operating system collectively called bridge OS are",
    "start": "370099",
    "end": "376009"
  },
  {
    "text": "closely related to the watch OS stack and inherit many properties from it say",
    "start": "376009",
    "end": "383210"
  },
  {
    "text": "you want to actually look at this stuff yourself as brick u.s. is a derivative",
    "start": "383210",
    "end": "388669"
  },
  {
    "text": "watch OS and by virtue is a lot of the same iOS reverse engineering tools also",
    "start": "388669",
    "end": "393710"
  },
  {
    "text": "apply here you can go to the apples hopper catalog and download bundled t2 firmware update packages or pulled",
    "start": "393710",
    "end": "399860"
  },
  {
    "text": "directly out of a local system cache you can extract these update packages with combination of freely available tools a",
    "start": "399860",
    "end": "407360"
  },
  {
    "text": "walkthrough of the extraction process and most the tooling is provided by Jonathon Leben and it's linked over here",
    "start": "407360",
    "end": "413439"
  },
  {
    "text": "if you extract and decompress the update packages you will inside will be an",
    "start": "413439",
    "end": "419030"
  },
  {
    "text": "update bundle a zip file which contains the root filesystem a collection of kernel caches which are the base kernel",
    "start": "419030",
    "end": "426139"
  },
  {
    "text": "and all the kernel extensions baked into a single large file and a similar set of golden UEFI images while they are",
    "start": "426139",
    "end": "433639"
  },
  {
    "text": "bundled the iboot and SEP firmware images are encrypted like they are on another platform so they're not as easy",
    "start": "433639",
    "end": "438860"
  },
  {
    "text": "to actually examine the slash boot / firmware directory inside the update",
    "start": "438860",
    "end": "445039"
  },
  {
    "text": "bundle contains image for archives containing signed golden UEFI firmware images you can use image for tool to",
    "start": "445039",
    "end": "451610"
  },
  {
    "text": "extract the single section out of these but do note that these images actually do end up getting hot patched by the t2",
    "start": "451610",
    "end": "457729"
  },
  {
    "text": "during the loading process as we'll see you later as these t to update bundles are meant",
    "start": "457729",
    "end": "465409"
  },
  {
    "text": "for multiple product lines they contain multiple firmer images differentiated by internal Apple product names for",
    "start": "465409",
    "end": "471680"
  },
  {
    "text": "instance the iMac Pro is the j1 37 and our t2 enabled MacBook Pro is the J 680",
    "start": "471680",
    "end": "479050"
  },
  {
    "text": "googling around for model information we got some clues as to what the J 174 and J 140k are that leaves us the remaining",
    "start": "479050",
    "end": "487789"
  },
  {
    "text": "J 780 and J 132 as likely candidates for the Mac Pro and the MacBook Air model",
    "start": "487789",
    "end": "496159"
  },
  {
    "text": "specific kernel caches are relatively easily accessible after decoding them with the joker tool from there you can",
    "start": "496159",
    "end": "502849"
  },
  {
    "text": "throw them into Ida and start your traditional arm 64 darwin kernel analysis I also highly recommend using",
    "start": "502849",
    "end": "510080"
  },
  {
    "text": "the Ida kernel cache extension as it makes reconstructing i/o kit types fairly trivial the base t2 file system",
    "start": "510080",
    "end": "518360"
  },
  {
    "text": "is split up into multiple parts in the update bundle and they need to be individually decompressed and extracted",
    "start": "518360",
    "end": "524060"
  },
  {
    "text": "with the OTA tool after extraction you will be greeted with a very familiar Mac",
    "start": "524060",
    "end": "529220"
  },
  {
    "text": "file system so the combination of those three",
    "start": "529220",
    "end": "535470"
  },
  {
    "text": "firmware parts form the basis of our analysis but before we show how the t2 attempts to improve on secure boot we",
    "start": "535470",
    "end": "542070"
  },
  {
    "text": "have to understand what was wrong with the prior state-of-the-art so here's",
    "start": "542070",
    "end": "549600"
  },
  {
    "text": "everyone's favorite diagram when dealing with UEFI right this outlines the seven boot phases that a UEFI platform goes",
    "start": "549600",
    "end": "555570"
  },
  {
    "text": "through the the code that implements this is the very UEFI firmware that Apple aims to protect and was",
    "start": "555570",
    "end": "561180"
  },
  {
    "text": "traditionally stored in a spy flash chip at the very left side you have what's",
    "start": "561180",
    "end": "566610"
  },
  {
    "text": "called the security phase it's pointed out by the system reset vector it's the very first bit of x86 code that gets",
    "start": "566610",
    "end": "573360"
  },
  {
    "text": "executed by the CPU when transitioning from a low-power state such as sleep and hibernate or the very initial power on",
    "start": "573360",
    "end": "579900"
  },
  {
    "text": "it starts off in 16-bit real mode does initialization and then switches over to protect mode before hitting up execution",
    "start": "579900",
    "end": "586410"
  },
  {
    "text": "to the pre initialization environment and onward to locate and boot the operating system if you as an attacker",
    "start": "586410",
    "end": "594810"
  },
  {
    "text": "are actually able to gain execution in this initial security phase you can effectively take control the entire",
    "start": "594810",
    "end": "600360"
  },
  {
    "text": "system even if the security phases did perform all integrity checking it was supposed to who was there to check the",
    "start": "600360",
    "end": "607260"
  },
  {
    "text": "integrity of the security phase once",
    "start": "607260",
    "end": "612420"
  },
  {
    "text": "you're able to run code in this phase of execution you can patch everything going forward and in fact the final operating",
    "start": "612420",
    "end": "618390"
  },
  {
    "text": "system kernel and do whatever you would like so how is this infection process",
    "start": "618390",
    "end": "625080"
  },
  {
    "text": "typically done in practice traditionally on the motherboard you have your chipset",
    "start": "625080",
    "end": "631410"
  },
  {
    "text": "attached to a spy flash device which holds the UEFI firmware and other configuration variables attacks are",
    "start": "631410",
    "end": "637260"
  },
  {
    "text": "performed either through purely software means if the platform is misconfigured or through harbor based attacks the",
    "start": "637260",
    "end": "643170"
  },
  {
    "text": "popular evil hotel maid scenario comes to mind where a malicious actor gains physical access to your computer opens",
    "start": "643170",
    "end": "649290"
  },
  {
    "text": "it uses a chip clip to attach to the flash device and over writes the UEFI firmware where payload with an infected",
    "start": "649290",
    "end": "655560"
  },
  {
    "text": "Berrien wanted to mitigate this and for them the solution was to get rid of that",
    "start": "655560",
    "end": "660930"
  },
  {
    "text": "vulnerable flash chip altogether the enhance",
    "start": "660930",
    "end": "666550"
  },
  {
    "text": "serial peripheral interface or East by is until spiritual successor to the lope in count bus and it's used to",
    "start": "666550",
    "end": "673060"
  },
  {
    "text": "communicate with embedded controllers and BMC's it was recently extended on Intel Xeon platforms with a new feature",
    "start": "673060",
    "end": "680080"
  },
  {
    "text": "called slave attached flash this allows ECS and BMC s to manage all flash at",
    "start": "680080",
    "end": "685480"
  },
  {
    "text": "flash access operations again the main reason why this is important feature is if you think about a bare-metal cloud",
    "start": "685480",
    "end": "692140"
  },
  {
    "text": "environment you need a wipe the machine before you hand it off to a new tenant and this functionality allows the BMC's",
    "start": "692140",
    "end": "698410"
  },
  {
    "text": "to quickly reset the ufi firmware or perform remote upgrades the t2 utilizes",
    "start": "698410",
    "end": "704260"
  },
  {
    "text": "functionality to try to enhance secure boot typically the slave attached functionality slave attach flash",
    "start": "704260",
    "end": "710440"
  },
  {
    "text": "functionality is only found on xeon chipsets but as apple is a very special",
    "start": "710440",
    "end": "715450"
  },
  {
    "text": "partner they got that functionality enabled for their non xeon lines like the MacBook Pros so the t2 utilizes",
    "start": "715450",
    "end": "724300"
  },
  {
    "text": "functionality to enhance secure boot we're gonna go from the model on the left where the chipset talks to a flash",
    "start": "724300",
    "end": "730450"
  },
  {
    "text": "device over spy to the model on the right where the chipset talks the t2 over east by the t2 then becomes the",
    "start": "730450",
    "end": "737589"
  },
  {
    "text": "arbiter of all flash access operations which sounds great right of course yeah",
    "start": "737589",
    "end": "742770"
  },
  {
    "text": "so now that we understand a bit more about secure boot and how the t2 is",
    "start": "742770",
    "end": "748630"
  },
  {
    "text": "wired to the rest of the platform let's talk about the actual boot process everything gets kicked off way before",
    "start": "748630",
    "end": "753880"
  },
  {
    "text": "the power button is pressed in a process Apple refers to as early boot here I'm",
    "start": "753880",
    "end": "759190"
  },
  {
    "text": "gonna describe the process as I understood it in bridge OS 2.0 Apple has since released some new revisions since",
    "start": "759190",
    "end": "766000"
  },
  {
    "text": "since then but the broad-strokes should still remain the same the t2 utilizes",
    "start": "766000",
    "end": "774279"
  },
  {
    "text": "the same integrity protection features that are found on the iPhone and the Apple watch on the chip itself there is",
    "start": "774279",
    "end": "781149"
  },
  {
    "text": "an area called a masked ROM the the masked ROM is comprised of software instructions and data that has been",
    "start": "781149",
    "end": "786970"
  },
  {
    "text": "physically hardwired on the die and is completely immutable there's no way to change it at all this is the basis for",
    "start": "786970",
    "end": "793720"
  },
  {
    "text": "what is referred to as a hardware root of trust the the maps roms purpose itself is to locate the t2 boo",
    "start": "793720",
    "end": "800540"
  },
  {
    "text": "loader which is by boot and in our case verified its signature against the apple",
    "start": "800540",
    "end": "805730"
  },
  {
    "text": "root CA which is co located inside of the mass ROM itself and transfer execution to it the boot locate the boot",
    "start": "805730",
    "end": "813350"
  },
  {
    "text": "loader locates the bridge OS kernel cryptographically verifies it configures its execution environment and transfers",
    "start": "813350",
    "end": "819440"
  },
  {
    "text": "control to it finally the kernel sets up the using LAN environment and launches",
    "start": "819440",
    "end": "824750"
  },
  {
    "text": "the root process commonly referred to as pit zero or launch D from this the user land services and processes are started",
    "start": "824750",
    "end": "833529"
  },
  {
    "text": "launch D has an internal manifest which specifies which services are started on",
    "start": "834190",
    "end": "839300"
  },
  {
    "text": "the t2 this includes remote exbc service demons which we'll talk about later filesystem checkers upgrade and recovery",
    "start": "839300",
    "end": "846170"
  },
  {
    "text": "agents and many many others the one we are most interested in is mac efi util",
    "start": "846170",
    "end": "853730"
  },
  {
    "text": "Mackay youth by util is the main t2 user LAN interface for managing UEFI firmware",
    "start": "853730",
    "end": "859340"
  },
  {
    "text": "and non-volatile variables it also has some additional functionality to dump and restore certain Intel ami related",
    "start": "859340",
    "end": "865580"
  },
  {
    "text": "regions out of loaded Burma images we'll be focusing on the main initialization process here today Maki if I utila",
    "start": "865580",
    "end": "875060"
  },
  {
    "text": "starts off by examining the device tree to validate that the platform is actually slave attached flash capable",
    "start": "875060",
    "end": "881330"
  },
  {
    "text": "then it grabs a signed image for binary off of the t2 filesystem which contains",
    "start": "881330",
    "end": "886460"
  },
  {
    "text": "the ufi firmware and loads it into a memory buffer this memory buffer then",
    "start": "886460",
    "end": "892070"
  },
  {
    "text": "gets Marshall to the t2 kernel where the makya fine manager kernel extension takes over the loading process the efi",
    "start": "892070",
    "end": "899030"
  },
  {
    "text": "manager implements all the functionality exposed from mac efi util it manages and vram variables the UEFI loading process",
    "start": "899030",
    "end": "906380"
  },
  {
    "text": "as well as it contains a number of state machines to keep track of various boot",
    "start": "906380",
    "end": "912110"
  },
  {
    "text": "float so you wouldn't want to for instance change the ufi firmware out from underneath a running system the",
    "start": "912110",
    "end": "918320"
  },
  {
    "text": "first thing that the efi manager does is it checks to see if the ufi firmware has",
    "start": "918320",
    "end": "923450"
  },
  {
    "text": "already been initialized if so it bails out quickly now it's important to note that the actual loading of the UEFI",
    "start": "923450",
    "end": "930740"
  },
  {
    "text": "firmware happens fairly rarely once it's loaded successful is stored in a durable storage media and",
    "start": "930740",
    "end": "937709"
  },
  {
    "text": "has only changed if the firmware update is available or the t to itself resets",
    "start": "937709",
    "end": "944209"
  },
  {
    "text": "once the decision has been made to actually load the firmware the efi manager reaches out to the apple",
    "start": "945470",
    "end": "951959"
  },
  {
    "text": "firmware update kernel extension which verifies the cryptographic signature of the firmware package against the apple",
    "start": "951959",
    "end": "957600"
  },
  {
    "text": "root CA key if this checks of seats then the UF I payload is copied over to a",
    "start": "957600",
    "end": "963420"
  },
  {
    "text": "storage region inside of the t2 then something really peculiar happens the fi",
    "start": "963420",
    "end": "969869"
  },
  {
    "text": "manager checks to see whether the t2 has had its production mode fuses blown and depending on the state of that and an",
    "start": "969869",
    "end": "976199"
  },
  {
    "text": "overriding T to boot argument it writes one of two 64-bit indicators into the",
    "start": "976199",
    "end": "981360"
  },
  {
    "text": "loaded ufi firmware image what these indicator values actually do is yet to be fully understood but at the moment",
    "start": "981360",
    "end": "987839"
  },
  {
    "text": "that the firmware is being provided to the actual system it invalidates its own cryptographic signatures so once this is",
    "start": "987839",
    "end": "999420"
  },
  {
    "text": "done the efi manager configures a bit of internal hardware we call the east by sleeve attached flash dma engine through",
    "start": "999420",
    "end": "1006470"
  },
  {
    "text": "a series of memory map configuration and status registers this configuration",
    "start": "1006470",
    "end": "1012249"
  },
  {
    "text": "redirects east by slave attached flash read and write operations to the internal storage area now it's important",
    "start": "1012249",
    "end": "1019549"
  },
  {
    "text": "to highlight that this includes write operations the traditional spy flash chip is used as a durable mutable",
    "start": "1019549",
    "end": "1025639"
  },
  {
    "text": "storage media many low level subsystems such as the Intel ME utilize it for storing configuration and state and as",
    "start": "1025639",
    "end": "1032240"
  },
  {
    "text": "such it must be a bi-directional interface y'all can probably guess where this is going but more on that a little",
    "start": "1032240",
    "end": "1038089"
  },
  {
    "text": "bit after the DMA engine is configured control flow returns back to the user",
    "start": "1038089",
    "end": "1044538"
  },
  {
    "text": "land mac efi util which informs the SMC by way of a couple other kernel extensions that the firmware is actually",
    "start": "1044539",
    "end": "1050929"
  },
  {
    "text": "you're ready to boot then it lets the t2 go into a low-power sleep state which is akin to turning off",
    "start": "1050929",
    "end": "1056870"
  },
  {
    "text": "the screen of your phone",
    "start": "1056870",
    "end": "1059860"
  },
  {
    "text": "at this point the system is finally actually ready to start booting you press the power button that triggers a",
    "start": "1061950",
    "end": "1067350"
  },
  {
    "text": "notification from the system state manager kernel extension which then notifies the EFI manager so we can",
    "start": "1067350",
    "end": "1073170"
  },
  {
    "text": "update it its internal state after that completes it sends do s0 message to the",
    "start": "1073170",
    "end": "1078750"
  },
  {
    "text": "SMC where as zero is the fully honest happy power state this effectively turns on the x86 side of the house this brings",
    "start": "1078750",
    "end": "1087780"
  },
  {
    "text": "the x86 CPU out of a reset hold state and allows it to begin booting the verified ufi firmware image out of the",
    "start": "1087780",
    "end": "1095040"
  },
  {
    "text": "t2 by way of that slave attached flash dma engine ostensibly closing the gap of an unverified pre verifier so we end up",
    "start": "1095040",
    "end": "1107340"
  },
  {
    "text": "with a functional flow of this how can someone leverage the properties that we have learned to actually take",
    "start": "1107340",
    "end": "1113130"
  },
  {
    "text": "control the secure boot process well as we discussed earlier the chipset not",
    "start": "1113130",
    "end": "1118710"
  },
  {
    "text": "only reads data out of the storage area but also writes to it as it's used as a mutable storage area by DME and other",
    "start": "1118710",
    "end": "1125100"
  },
  {
    "text": "systems and the firmer validation initialization is only done on rare",
    "start": "1125100",
    "end": "1131520"
  },
  {
    "text": "occasions either when the system well either when there is a system upgrade or the t2 crashes and reboots housing the",
    "start": "1131520",
    "end": "1139290"
  },
  {
    "text": "t2 actually reboots by itself is not known to us but I speculate that it's actually a fairly rare occurrence and",
    "start": "1139290",
    "end": "1145290"
  },
  {
    "text": "betterback systems like the MacBook so from a hardware perspective the t2 is",
    "start": "1145290",
    "end": "1152520"
  },
  {
    "text": "attached to the chipset by a series of wire traces the this means that if an attacker can locate those traces and get",
    "start": "1152520",
    "end": "1159420"
  },
  {
    "text": "on that East by bus they'll be able to overwrite the UEFI firmware stored internal to the t2 in a manner similar",
    "start": "1159420",
    "end": "1165630"
  },
  {
    "text": "to the chip clip approach that we saw earlier and they evil may attack in theory this would only give limited",
    "start": "1165630",
    "end": "1171180"
  },
  {
    "text": "persistence until the next upgrade cycle but the infected mac OS kernel could prevent that upgrade process from ever",
    "start": "1171180",
    "end": "1177300"
  },
  {
    "text": "running or at least until the t2 reboots or if we can actually compromise the t2",
    "start": "1177300",
    "end": "1185640"
  },
  {
    "text": "kernel we could overwrite the internal storage from the inside without having to resort to physical attacks on the",
    "start": "1185640",
    "end": "1191520"
  },
  {
    "text": "platform and have actual true persistence but for that to happen we need a way to actually target and interface with it",
    "start": "1191520",
    "end": "1198720"
  },
  {
    "text": "the t2 exposes many services to the mac OS operating system that may provide a",
    "start": "1198720",
    "end": "1204090"
  },
  {
    "text": "beachhead for exploitation to explore this area further I'm going to hand it up to Jeremy to talk about these",
    "start": "1204090",
    "end": "1209309"
  },
  {
    "text": "services and actually how to communicate with them thanks thanks Miguel",
    "start": "1209309",
    "end": "1214880"
  },
  {
    "text": "so the t2 chip runs a number of services on behalf of your Mac these are things",
    "start": "1214880",
    "end": "1220440"
  },
  {
    "text": "like biometrics such as touch ID find my device feature which you may be more",
    "start": "1220440",
    "end": "1225450"
  },
  {
    "text": "familiar with on your iPhone speech recording for Siri as well as system diagnostics I'm sure already that we'll",
    "start": "1225450",
    "end": "1232440"
  },
  {
    "text": "talk about a little bit later and if it's possible to communicate with these services it may be possible to exploit",
    "start": "1232440",
    "end": "1239340"
  },
  {
    "text": "these services and if we could combine an exploit that gives us remote code execution on the t2 with a bridge OS",
    "start": "1239340",
    "end": "1245940"
  },
  {
    "text": "kernel vulnerability we may be able to overwrite that vulnerable flash purely",
    "start": "1245940",
    "end": "1251760"
  },
  {
    "text": "through software which would be really cool so the majority of the rest of this talk is going to focus on what does this",
    "start": "1251760",
    "end": "1258690"
  },
  {
    "text": "interface look like that the t2 chip exposes to the Mac OS host luckily for",
    "start": "1258690",
    "end": "1265410"
  },
  {
    "text": "us as researchers Mac OS comes with this nifty utility called remote CTL remote",
    "start": "1265410",
    "end": "1270450"
  },
  {
    "text": "CTL provides a variety of different functions for us to talk to the t2 chip starting off with the list command we",
    "start": "1270450",
    "end": "1277140"
  },
  {
    "text": "can list the t1 or t2 device that's attached to our Mac OS host it shows up",
    "start": "1277140",
    "end": "1283080"
  },
  {
    "text": "as local bridge and if we use the show command we can print out a variety of different properties about the t2 chip",
    "start": "1283080",
    "end": "1288390"
  },
  {
    "text": "including a list of the services that are running on that t2 chip that are available for us to communicate with we",
    "start": "1288390",
    "end": "1295110"
  },
  {
    "text": "can then turn to the netcat or the relay sub commands to actually communicate with these processes netcat will open or",
    "start": "1295110",
    "end": "1303360"
  },
  {
    "text": "will allow us to use standard input and standard output relay will actually open a listening socket on the Mac OS host",
    "start": "1303360",
    "end": "1309929"
  },
  {
    "text": "that we can then attach to with our own process and send traffic to the service",
    "start": "1309929",
    "end": "1316650"
  },
  {
    "text": "that we've targeted but before we get into talking with the t2 chip directly",
    "start": "1316650",
    "end": "1321870"
  },
  {
    "text": "let's step back and look at what the communication channel with the t2 actually looks like",
    "start": "1321870",
    "end": "1327840"
  },
  {
    "text": "the t2 uses apples proprietary IPC protocol X keys and the X PCR at the",
    "start": "1327840",
    "end": "1334680"
  },
  {
    "text": "remote xdc library to communicate with the mac OS host this protocol has a",
    "start": "1334680",
    "end": "1341010"
  },
  {
    "text": "programmer API but doesn't the actual message format is proprietary probably",
    "start": "1341010",
    "end": "1347910"
  },
  {
    "text": "because Apple wants the ability to change it whenever that may be warranted",
    "start": "1347910",
    "end": "1353790"
  },
  {
    "text": "without causing people to have have things break under them but it makes",
    "start": "1353790",
    "end": "1360090"
  },
  {
    "text": "things a little bit trickier when we're going to be looking at some network traffic later and we don't know what that format looks like the t2 exposes",
    "start": "1360090",
    "end": "1367980"
  },
  {
    "text": "itself to the Mac OS host as a USB Attached network interface over the PCIe",
    "start": "1367980",
    "end": "1373530"
  },
  {
    "text": "bus called en6 and this interface is protected by sip system integrity",
    "start": "1373530",
    "end": "1379920"
  },
  {
    "text": "protection so we can neither read nor write it it's also worth noting that the",
    "start": "1379920",
    "end": "1386870"
  },
  {
    "text": "the t2 chip and the Mac OS host over this interface have static fixed ipv6",
    "start": "1386870",
    "end": "1393990"
  },
  {
    "text": "addresses and static MAC addresses we found this to be common on various systems that we tested now at the time",
    "start": "1393990",
    "end": "1402390"
  },
  {
    "text": "we originally did this research it was not required to disable sip or use route",
    "start": "1402390",
    "end": "1407550"
  },
  {
    "text": "to use the remote CTL relay command however as of 10 dot 14.3 remote CTL",
    "start": "1407550",
    "end": "1414830"
  },
  {
    "text": "needs a little bit of help to work and we'll will go into that a little bit later in the talk if we do disable sip a",
    "start": "1414830",
    "end": "1422220"
  },
  {
    "text": "new interface becomes available for us to use the VHC 128 interface behaves",
    "start": "1422220",
    "end": "1429180"
  },
  {
    "text": "like a span port for the en 6 interface that means that all the network traffic",
    "start": "1429180",
    "end": "1434550"
  },
  {
    "text": "that would normally traverse the en 6 interface becomes available it becomes",
    "start": "1434550",
    "end": "1440310"
  },
  {
    "text": "replicated on the VHC 128 interface and if we turn to our favorite aquatic packet capture tool such as TCP dump or",
    "start": "1440310",
    "end": "1447510"
  },
  {
    "text": "you know Wireshark we can then start capturing some that traffic and taking a look at what it looks like directly so",
    "start": "1447510",
    "end": "1455700"
  },
  {
    "text": "you'll see here there's some low-level USB based traffic there's TCP protocol there's",
    "start": "1455700",
    "end": "1460890"
  },
  {
    "text": "HTTP to waste traffic and if we dig into some of that HTTP to base traffic and we",
    "start": "1460890",
    "end": "1467250"
  },
  {
    "text": "look at some data packets we can see some information here mostly a lot of",
    "start": "1467250",
    "end": "1473010"
  },
  {
    "text": "dots because this is all binary encoded data we do see a small substring request",
    "start": "1473010",
    "end": "1478290"
  },
  {
    "text": "underscore type but that doesn't really mean anything to us at this point so",
    "start": "1478290",
    "end": "1484350"
  },
  {
    "text": "we're going to continue before we before we talk about interfacing of the t2 ship",
    "start": "1484350",
    "end": "1489420"
  },
  {
    "text": "again we're gonna take a moment to figure out what it is the t2 chip is saying as a way to build some tooling",
    "start": "1489420",
    "end": "1495780"
  },
  {
    "text": "that will allow us to interface with the t2 chip later this is these are all the",
    "start": "1495780",
    "end": "1501840"
  },
  {
    "text": "different layers that the t2 chip traverses our packets these are the",
    "start": "1501840",
    "end": "1507360"
  },
  {
    "text": "different layers that make up packets that the t2 chip uses to communicate with the Mac OS host we're gonna start",
    "start": "1507360",
    "end": "1513090"
  },
  {
    "text": "over on the left with the mm layer now end them layer if you're not familiar with it I wasn't before we were working",
    "start": "1513090",
    "end": "1518880"
  },
  {
    "text": "on this project is a USB based network layer that encapsulates multiple",
    "start": "1518880",
    "end": "1524670"
  },
  {
    "text": "Ethernet packets for transit over USB based network interface it's interesting",
    "start": "1524670",
    "end": "1531510"
  },
  {
    "text": "that in many cases for large data transfers the the information will be",
    "start": "1531510",
    "end": "1537720"
  },
  {
    "text": "split up into multiple MTU size chunks at the TCP layer only to Berrian capsulated into one giant packet at the",
    "start": "1537720",
    "end": "1544650"
  },
  {
    "text": "MM layer the Ethernet IP and TCP layers are nothing special so we're not going",
    "start": "1544650",
    "end": "1549840"
  },
  {
    "text": "to go into them but at the HTTP 2 layer there is something worth noting now for",
    "start": "1549840",
    "end": "1554880"
  },
  {
    "text": "those of you who are not familiar with HTTP 2 I'm going to give a very brief crash course on how it works so an HTTP",
    "start": "1554880",
    "end": "1561360"
  },
  {
    "text": "1 well you have a client in the server and the client such as a web browser will make a request to the server to",
    "start": "1561360",
    "end": "1567900"
  },
  {
    "text": "retrieve some page contents and in the process of doing this it will make a tea it'll perform a TCP handshake probably",
    "start": "1567900",
    "end": "1573870"
  },
  {
    "text": "these days a TLS handshake and it will then make a requests to retrieve the data pull down that data and then it",
    "start": "1573870",
    "end": "1580560"
  },
  {
    "text": "will discover upon retrieving the page data there are a bunch more resources that I have to make new requests to go",
    "start": "1580560",
    "end": "1585960"
  },
  {
    "text": "up to that web server and so you having to go through more TCP handshake smart TLS handshake set Sarah this is very",
    "start": "1585960",
    "end": "1592410"
  },
  {
    "text": "cumbersome very slow we want something more efficient so http/2 is designed to build a single",
    "start": "1592410",
    "end": "1599130"
  },
  {
    "text": "persistent connection upon which multiple page requests or other kinds of",
    "start": "1599130",
    "end": "1604800"
  },
  {
    "text": "requests can be multiplexed to avoid having to do all these TCP and TLS handshakes",
    "start": "1604800",
    "end": "1610850"
  },
  {
    "text": "so in htv-2 we have this new concept of a stream and a stream is roughly",
    "start": "1610850",
    "end": "1616800"
  },
  {
    "text": "analogous to one of the old HTTP 1 connections a stream can be opened by sending a header spring and over in the",
    "start": "1616800",
    "end": "1624120"
  },
  {
    "text": "headers frame typically you would ask HTTP headers once a stream is opened you",
    "start": "1624120",
    "end": "1630270"
  },
  {
    "text": "can send data bi-directionally to either the client or the server through the use of data frames now Apple uses this in a",
    "start": "1630270",
    "end": "1638610"
  },
  {
    "text": "non-standard way when they open new streams with issue via HTTP to headers",
    "start": "1638610",
    "end": "1643860"
  },
  {
    "text": "frames they don't actually put any HTTP headers in them this actually breaks the issue to spec and was a little bit of a",
    "start": "1643860",
    "end": "1652560"
  },
  {
    "text": "surprise for us when we were reversing this because it meant that the standard HTTP two libraries don't work so we had",
    "start": "1652560",
    "end": "1659610"
  },
  {
    "text": "to make some changes and then we could move on so we'll talk a little bit more",
    "start": "1659610",
    "end": "1666780"
  },
  {
    "text": "about that a little bit about the HTTP 2 layer is a new layer that we haven't",
    "start": "1666780",
    "end": "1672720"
  },
  {
    "text": "seen referenced in any of the other exbc third party documentation before for lack of a better term we're calling this",
    "start": "1672720",
    "end": "1678930"
  },
  {
    "text": "the X PC wrapper because it tends to wrap exbc objects the xvc wrapper has a",
    "start": "1678930",
    "end": "1685470"
  },
  {
    "text": "four byte editor magic bytes field a four byte Flags field now these were the",
    "start": "1685470",
    "end": "1691980"
  },
  {
    "text": "flags that we observed this is a 32 bit field and so there are likely many many more flags hopefully you will discover",
    "start": "1691980",
    "end": "1700650"
  },
  {
    "text": "some and share them with the community as well follow that there's an 8 byte length field for the payload that comes",
    "start": "1700650",
    "end": "1706620"
  },
  {
    "text": "after followed by an 8 byte message ID field the message ID field is often incremented between requests and",
    "start": "1706620",
    "end": "1713310"
  },
  {
    "text": "response it the use of it differs between the different application protocols so we've also seen it being",
    "start": "1713310",
    "end": "1719910"
  },
  {
    "text": "used for signaling to identify which requests a particular response refers to",
    "start": "1719910",
    "end": "1727160"
  },
  {
    "text": "moving on the last thing in this layer is the actual X PC objects themselves",
    "start": "1728470",
    "end": "1733520"
  },
  {
    "text": "and this will end up being sort of the meat of the reversing of this protocol",
    "start": "1733520",
    "end": "1738530"
  },
  {
    "text": "that we did now there's relatively little third party documentation on this X PC serialization",
    "start": "1738530",
    "end": "1745400"
  },
  {
    "text": "format so when we started off we did what many people do and we tried to",
    "start": "1745400",
    "end": "1752150"
  },
  {
    "text": "serialize some objects ourselves now Apple does publish a programming API for X PC and so we were able to create a",
    "start": "1752150",
    "end": "1758330"
  },
  {
    "text": "little toy example application some of which we'll show here where we can create an X PC connection object then",
    "start": "1758330",
    "end": "1765020"
  },
  {
    "text": "create an X PC dictionary the dictionary being the base class that all X PC",
    "start": "1765020",
    "end": "1770750"
  },
  {
    "text": "messages must be made from and then we",
    "start": "1770750",
    "end": "1776450"
  },
  {
    "text": "can send that message over the wire and you can see here how we can insert additional data into that base",
    "start": "1776450",
    "end": "1781730"
  },
  {
    "text": "dictionary object that may be data that we want to send over the wire so we here",
    "start": "1781730",
    "end": "1788180"
  },
  {
    "text": "we're in sending a pool and into a UN 64 and if we pay special attention just for a moment to this this inserted value",
    "start": "1788180",
    "end": "1796040"
  },
  {
    "text": "with a dictionary key of UN 64 and a value at dead beef when we step through",
    "start": "1796040",
    "end": "1802400"
  },
  {
    "text": "in our debugger to see how this is actually serialized we can then find that flag UN 64 that that string un 64",
    "start": "1802400",
    "end": "1810530"
  },
  {
    "text": "and we can begin to uncover how these messages are actually serialized out don't worry about this slide in",
    "start": "1810530",
    "end": "1817310"
  },
  {
    "text": "particular there will be more examples in a minute now every X PC object starts",
    "start": "1817310",
    "end": "1823670"
  },
  {
    "text": "with an X X PC header before the main base dictionary object this X PC header",
    "start": "1823670",
    "end": "1828680"
  },
  {
    "text": "is made up before for magic bytes followed by for byte version number it's interesting that the version number is",
    "start": "1828680",
    "end": "1835510"
  },
  {
    "text": "at least from what we noticed is a version number five which is the same as",
    "start": "1835510",
    "end": "1841430"
  },
  {
    "text": "what's shown in Jonathan Levin's Saro s internals but the magic bytes appear to",
    "start": "1841430",
    "end": "1848180"
  },
  {
    "text": "be different from any other known use of X PC now before we get into how these X",
    "start": "1848180",
    "end": "1855740"
  },
  {
    "text": "PC objects are actually composed every X PC object we'll start off with a four bites type",
    "start": "1855740",
    "end": "1861230"
  },
  {
    "text": "field and initially we were able to retrieve some of these and figure out you know a limited set of them just",
    "start": "1861230",
    "end": "1868010"
  },
  {
    "text": "based on observing various objects but there were lots of holes for instance an",
    "start": "1868010",
    "end": "1873320"
  },
  {
    "text": "X PC array is either 0 0 and in twos 0 3",
    "start": "1873320",
    "end": "1879740"
  },
  {
    "text": "0 0 0 we didn't have all of the types in",
    "start": "1879740",
    "end": "1884960"
  },
  {
    "text": "between them so we turned to the remote X PC library and a little bit of data",
    "start": "1884960",
    "end": "1890720"
  },
  {
    "text": "mining and we ended up getting this entire list and the X BC types shown",
    "start": "1890720",
    "end": "1897590"
  },
  {
    "text": "here in green were either the X PC types that we were able to serialize ourselves or X BC types that we were able to",
    "start": "1897590",
    "end": "1903980"
  },
  {
    "text": "observe in the communication between the T 2 chip and Mac OS and so we were able to decode how these X PC types were",
    "start": "1903980",
    "end": "1911980"
  },
  {
    "text": "constructed the type shown in red were either objects that we weren't able to observe for which no programming API was",
    "start": "1911980",
    "end": "1919960"
  },
  {
    "text": "available or they were types that maybe are not serializable at all such as an X",
    "start": "1919960",
    "end": "1925850"
  },
  {
    "text": "PC connection object now for these next",
    "start": "1925850",
    "end": "1931010"
  },
  {
    "text": "three slides we're going to cover three different general categories of how these X PC objects are constructed the",
    "start": "1931010",
    "end": "1937580"
  },
  {
    "text": "first of these categories is fixed size objects such as boolean x' integers etc so in this case as a fixed size object a",
    "start": "1937580",
    "end": "1945380"
  },
  {
    "text": "u n 64 has a known length of 8 bytes and so this is relatively simple we have our",
    "start": "1945380",
    "end": "1951320"
  },
  {
    "text": "4 byte type field followed by our 8 byte known length value field moving on to",
    "start": "1951320",
    "end": "1958460"
  },
  {
    "text": "the next general category these are our variable length types such as strings and it will look pretty similar except",
    "start": "1958460",
    "end": "1965299"
  },
  {
    "text": "for the inclusion of a new four byte length field so for our example string do a labs exclamation point it's",
    "start": "1965299",
    "end": "1971210"
  },
  {
    "text": "important to note that strings have to be null terminated so the null character at the end of the string bringing it up",
    "start": "1971210",
    "end": "1977990"
  },
  {
    "text": "to nine characters is reflected in that for byte length field now another",
    "start": "1977990",
    "end": "1983120"
  },
  {
    "text": "property of exbc objects is that they have every field within the next PC object has to be four by two lined so in",
    "start": "1983120",
    "end": "1989210"
  },
  {
    "text": "addition to it being nine bytes in the length field it's actually going to take it's gonna be padded by three bites and",
    "start": "1989210",
    "end": "1995220"
  },
  {
    "text": "take up 12 full bites the third category",
    "start": "1995220",
    "end": "2000380"
  },
  {
    "text": "of exbc objects are compound objects things like dictionaries and arrays and again this will be similar to the",
    "start": "2000380",
    "end": "2007280"
  },
  {
    "text": "variable length objects but within an additional field here so we have our four byte type field our four by length",
    "start": "2007280",
    "end": "2014390"
  },
  {
    "text": "field the length field reflecting the number of bytes for everything after the length field and then a new field number",
    "start": "2014390",
    "end": "2020750"
  },
  {
    "text": "of entries and this is what allows us to parse through the compound object and",
    "start": "2020750",
    "end": "2026890"
  },
  {
    "text": "determine what its recursive sub objects are after that comes a concatenated list",
    "start": "2026890",
    "end": "2034700"
  },
  {
    "text": "of all of the other objects within this compound object now dictionaries are a little bit of a special case because in",
    "start": "2034700",
    "end": "2040520"
  },
  {
    "text": "addition to the values of those objects we also need keys and keys are very similar to the string object that we saw",
    "start": "2040520",
    "end": "2047150"
  },
  {
    "text": "in the last slide except they don't have their own type in length field so there are no term innate adrims padded out to",
    "start": "2047150",
    "end": "2053690"
  },
  {
    "text": "be a multiple of four bytes so you can see here we have our our three type length and number of entries fields",
    "start": "2053690",
    "end": "2060888"
  },
  {
    "text": "followed by our first objects key and then the value of that object and then our second objects key followed by the",
    "start": "2060889",
    "end": "2067940"
  },
  {
    "text": "value of that object now there are other exbc object types that we aren't going",
    "start": "2067940",
    "end": "2073429"
  },
  {
    "text": "to go into in this talk mostly due to the fact that they tend to be unique and so I'd be going over specifics for a",
    "start": "2073429",
    "end": "2080810"
  },
  {
    "text": "particular object type we do have more details about these in our whitepaper so",
    "start": "2080810",
    "end": "2089990"
  },
  {
    "text": "at this point we understand how all the different network layers work we understand how to decode and encode xpz",
    "start": "2089990",
    "end": "2097490"
  },
  {
    "text": "objects so let's go back and listen in on that t2 communication that we saw before for this we're going to use the",
    "start": "2097490",
    "end": "2105470"
  },
  {
    "text": "Cystic notes utility as a case study the system assists diagnose utility if you're not familiar with it is a tool",
    "start": "2105470",
    "end": "2111770"
  },
  {
    "text": "that a lot that goes and collects a bunch of metadata about your Mac and six in a target GZ file for later perusing",
    "start": "2111770",
    "end": "2119300"
  },
  {
    "text": "and if you pass this utility to - C flag it will also send a message to the T -",
    "start": "2119300",
    "end": "2124400"
  },
  {
    "text": "chip which will ask the T - chip to metadata and send it back to be included",
    "start": "2124400",
    "end": "2129800"
  },
  {
    "text": "in the sysadmin target GZ file so we can",
    "start": "2129800",
    "end": "2136340"
  },
  {
    "text": "use this as an easy way to generate some traffic to look at over the VHD 128 interface and so this is what we were",
    "start": "2136340",
    "end": "2143510"
  },
  {
    "text": "looking at before and just as a reminder this is what we were seeing in Wireshark that was about as far as Wireshark could take us and with the tooling that we",
    "start": "2143510",
    "end": "2151370"
  },
  {
    "text": "built based on understanding how these X PC objects are formed in all the different layers this is now what we can",
    "start": "2151370",
    "end": "2158120"
  },
  {
    "text": "see with this simple sniffer utility we can see all of the fields available in the x pz wrapper as well as the fields",
    "start": "2158120",
    "end": "2164600"
  },
  {
    "text": "that are actually contained within the X PC objects themselves so now that we",
    "start": "2164600",
    "end": "2170660"
  },
  {
    "text": "understand this sis diagnosed looks pretty simple there's a simple message request type equals one sent from the",
    "start": "2170660",
    "end": "2176900"
  },
  {
    "text": "client to the T to the T two sends back a message saying response type equals one and then a few seconds later sends",
    "start": "2176900",
    "end": "2183170"
  },
  {
    "text": "back a big data transfer that is the diagnosed heart G Z so now what if we",
    "start": "2183170",
    "end": "2191090"
  },
  {
    "text": "wanted to talk to the T to chip ourselves specifically this is diagnosed server running on the t2 chip could we",
    "start": "2191090",
    "end": "2197360"
  },
  {
    "text": "write our own Mac OS client that at least initially just replicates the",
    "start": "2197360",
    "end": "2203330"
  },
  {
    "text": "functionality of this of this diagnose chip are the cysts a ghost utility for",
    "start": "2203330",
    "end": "2208760"
  },
  {
    "text": "that we're going to turn back to our friend remote CTL so oh I think it sorry",
    "start": "2208760",
    "end": "2215900"
  },
  {
    "text": "it went too far the remote CTL real a utility again will open a connection to",
    "start": "2215900",
    "end": "2223340"
  },
  {
    "text": "a service on on the t2 chip and then open a listening socket on the Mac OS host which you can see here with net",
    "start": "2223340",
    "end": "2229850"
  },
  {
    "text": "stat that we can then connect to with our own application we initially tried to do this using scape II and that",
    "start": "2229850",
    "end": "2237380"
  },
  {
    "text": "didn't work so well because it turns out scape you slow and as the t2 chip is on your own device it expects round-trip",
    "start": "2237380",
    "end": "2245150"
  },
  {
    "text": "times to be on the order of you know one or two milliseconds so we needed",
    "start": "2245150",
    "end": "2250580"
  },
  {
    "text": "something more performant so we turned to the twisted library and use the hyper h2 library to handle the HTTP to layer",
    "start": "2250580",
    "end": "2256670"
  },
  {
    "text": "and then we built our system those client on top of that at the time we were originally",
    "start": "2256670",
    "end": "2261730"
  },
  {
    "text": "performing this research it's important to note that root access was not required sip could be enabled any",
    "start": "2261730",
    "end": "2268060"
  },
  {
    "text": "unprivileged process running on the device could communicate with the tea to chip or with the services running on the",
    "start": "2268060",
    "end": "2273880"
  },
  {
    "text": "tea to ship directly unfortunately if you try this now even with SIP disabled even with root",
    "start": "2273880",
    "end": "2280750"
  },
  {
    "text": "access you're more likely to run into an error message that looks like this no such process now as security researchers",
    "start": "2280750",
    "end": "2288130"
  },
  {
    "text": "this is really unfortunate because we'd like to be able to continue poking around at the tea to ship and we'd like",
    "start": "2288130",
    "end": "2293470"
  },
  {
    "text": "to enable you all to continue to build upon this this research so we're gonna",
    "start": "2293470",
    "end": "2298990"
  },
  {
    "text": "step aside from our normally scheduled talk for a moment we're gonna show you",
    "start": "2298990",
    "end": "2304480"
  },
  {
    "text": "how you can get remote CTL to work again if you would like the remote CTL relay",
    "start": "2304480",
    "end": "2310930"
  },
  {
    "text": "sub-command specifically is is gated by a new entitlement in 10.14 3 and onward",
    "start": "2310930",
    "end": "2318310"
  },
  {
    "text": "it's the combat Apple dot private network in Chico proc that restricted entitlement and using Jonathan Levin's",
    "start": "2318310",
    "end": "2325630"
  },
  {
    "text": "really cool J tool utility you can take the remote CTL binary and add this",
    "start": "2325630",
    "end": "2332440"
  },
  {
    "text": "entitlement to it and then Reese I knit with your own certificate now in doing",
    "start": "2332440",
    "end": "2337840"
  },
  {
    "text": "this the antfee daemon is going to be very upset if you try to run the this",
    "start": "2337840",
    "end": "2342880"
  },
  {
    "text": "new self-signed remote CDL binary and so",
    "start": "2342880",
    "end": "2348070"
  },
  {
    "text": "you'll need to disable that as well but once you do you have a remote CTL functionality that you can use again so",
    "start": "2348070",
    "end": "2354910"
  },
  {
    "text": "we have to disable sip run it as root disable MPD and self-signed the remote",
    "start": "2354910",
    "end": "2361300"
  },
  {
    "text": "CTL binary but once you do that it's easy back to the sysadmin style so with our",
    "start": "2361300",
    "end": "2370210"
  },
  {
    "text": "initial sista our with the original assist diagnose - see you can see that the messages get sent is request type",
    "start": "2370210",
    "end": "2376420"
  },
  {
    "text": "equals 1 and the response ends up looking like response type equals 1 some metadata about the file transfer that's",
    "start": "2376420",
    "end": "2382300"
  },
  {
    "text": "going to come back and then the file name if we we noticed that if you pass",
    "start": "2382300",
    "end": "2387370"
  },
  {
    "text": "some additional parameters the cystitis utility it puts more things on the wire it sends more",
    "start": "2387370",
    "end": "2393710"
  },
  {
    "text": "the t2 chip and so we wonder what other parameters can be sent to the t2 chip and for that we went we looked at the",
    "start": "2393710",
    "end": "2400250"
  },
  {
    "text": "firmware images that were extracted that we showed you how to extract earlier in the talk and we went and we grabbed the",
    "start": "2400250",
    "end": "2405830"
  },
  {
    "text": "binary for the T 2's diagnose server and we were able to pull out all the",
    "start": "2405830",
    "end": "2412820"
  },
  {
    "text": "different parameters that this particular server would be responsive to and if you look at just the archive name",
    "start": "2412820",
    "end": "2420320"
  },
  {
    "text": "probably the simplest example if we then use our customs to segment to pass this",
    "start": "2420320",
    "end": "2425599"
  },
  {
    "text": "archive name parameter we can see that we get a new archive name just as a",
    "start": "2425599",
    "end": "2431599"
  },
  {
    "text": "proof of concept here now this is as far as we've gone and we're unlikely to",
    "start": "2431599",
    "end": "2437630"
  },
  {
    "text": "revisit this work anytime soon so there are a lot of really cool things that can",
    "start": "2437630",
    "end": "2443810"
  },
  {
    "text": "still be done here there are lots more services to be explored fuzzing some of these services",
    "start": "2443810",
    "end": "2449180"
  },
  {
    "text": "would be a great next step and as the t2 chip is arguably the most secure boot",
    "start": "2449180",
    "end": "2454820"
  },
  {
    "text": "process or lends itself to the most secure boot process currently out there this work is very valuable to the",
    "start": "2454820",
    "end": "2464060"
  },
  {
    "text": "community to validate this process and in the effort to democratize security we",
    "start": "2464060",
    "end": "2471080"
  },
  {
    "text": "are open sourcing all of our tooling both the sniffer utility and sis diagnose client as referenced examples",
    "start": "2471080",
    "end": "2476420"
  },
  {
    "text": "for how to listen and speak to the t2 chip as well as under all the underlying",
    "start": "2476420",
    "end": "2481640"
  },
  {
    "text": "libraries that allow you to decode the message layers decode and encode exbc objects and make it all possible our our",
    "start": "2481640",
    "end": "2490970"
  },
  {
    "text": "papers are here at the short links shown if you have any questions we'll take",
    "start": "2490970",
    "end": "2496160"
  },
  {
    "text": "them out and thank you all for coming to our talk [Applause]",
    "start": "2496160",
    "end": "2502929"
  },
  {
    "text": "oh and if everybody can use the",
    "start": "2503720",
    "end": "2509750"
  },
  {
    "text": "microphone oh you're at the microphone sorry about that hey thank you for the great talk could",
    "start": "2509750",
    "end": "2514760"
  },
  {
    "text": "you elaborate on if and how the party operating systems could interact the 32",
    "start": "2514760",
    "end": "2519829"
  },
  {
    "text": "chip this is just a matter of implementation or is there a give Technic restriction how the Mac OS",
    "start": "2519829",
    "end": "2527990"
  },
  {
    "text": "system of third-party operating system and how they could interact with tt-to",
    "start": "2527990",
    "end": "2533540"
  },
  {
    "text": "chip yes so to get their party operating systems like Windows to boot on T to",
    "start": "2533540",
    "end": "2538550"
  },
  {
    "text": "naval platforms makya Phi manager has some additional flows in there to defer various keys to be Microsoft's as",
    "start": "2538550",
    "end": "2546650"
  },
  {
    "text": "opposed to Apple's internally so their their specific whitelists internally for Windows there they don't exist for Linux",
    "start": "2546650",
    "end": "2555400"
  },
  {
    "text": "can they also interact with the do should be the same way that Mac OS can using these messages I mean it's I have",
    "start": "2555760",
    "end": "2563119"
  },
  {
    "text": "not tried directly but I can't imagine be very different as it's exposed through USB to the host operating system",
    "start": "2563119",
    "end": "2569480"
  },
  {
    "text": "but I'd imagine you might be able to get something akin to the en6 interface under windows hi can you explain more",
    "start": "2569480",
    "end": "2580460"
  },
  {
    "text": "about the exploitation integration there are in dt2 like that execution provision is Laura canary is there anything like",
    "start": "2580460",
    "end": "2587270"
  },
  {
    "text": "that there sorry could you repeat that one more time what our decks rotation integration in de t2 SLR that execution",
    "start": "2587270",
    "end": "2595280"
  },
  {
    "text": "prevention stack Canaries or anything over there yeah absolutely all those mitigations are in place it's it's",
    "start": "2595280",
    "end": "2601640"
  },
  {
    "text": "basically an apple watch on your motherboard so all the typical things you would find on an iPhone or watch OS",
    "start": "2601640",
    "end": "2606920"
  },
  {
    "text": "you're you're gonna find on the t2 itself so with with the a-10 you're not gonna have like PAC enabled but you're",
    "start": "2606920",
    "end": "2615020"
  },
  {
    "text": "gonna find everything else I think this",
    "start": "2615020",
    "end": "2621260"
  },
  {
    "text": "side either what components have you found are they're necessary to communicate with the t2 directly I mean",
    "start": "2621260",
    "end": "2627430"
  },
  {
    "text": "on the iPhone you have the EEPROM that needs to be signed with the actual CPU",
    "start": "2627430",
    "end": "2634490"
  },
  {
    "text": "is the t2 encapsulated all the components physically but the t2 is",
    "start": "2634490",
    "end": "2640280"
  },
  {
    "text": "in capitalist Li encapsulating all those components the the spy flash trip is no longer present on the board outside of",
    "start": "2640280",
    "end": "2645380"
  },
  {
    "text": "the iMac pro it has a separate spy flash chip for graphics card firmware but",
    "start": "2645380",
    "end": "2650390"
  },
  {
    "text": "there UEFI is all being provided dynamically by the t2 okay does the touch ID for example need to be",
    "start": "2650390",
    "end": "2657110"
  },
  {
    "text": "physically that same exact touch ID to be able to communicate with the t2 to",
    "start": "2657110",
    "end": "2662750"
  },
  {
    "text": "boot up and be able to see the data so we didn't specifically look at touch ID but the touch ID should be handled by",
    "start": "2662750",
    "end": "2668480"
  },
  {
    "text": "the t2 except that is internal to that okay all right thank you so the spy flash replacement issue you",
    "start": "2668480",
    "end": "2676550"
  },
  {
    "text": "guys highlighted it shouldn't Intel's Meo so address that through its secure boot process if so what does the T to",
    "start": "2676550",
    "end": "2682640"
  },
  {
    "text": "bring on top of that for secure boot since it tells them he also has on Shibu ROM as well as crypto key store right yeah so so we didn't see any signs of",
    "start": "2682640",
    "end": "2691100"
  },
  {
    "text": "boot guard being utilized anywhere and Apple seems to be invalidate their own",
    "start": "2691100",
    "end": "2696290"
  },
  {
    "text": "firmware signatures immediately upon loading so I'm not sure how much that would help outside of doing individual",
    "start": "2696290",
    "end": "2702830"
  },
  {
    "text": "like UEFI partition checks all right",
    "start": "2702830",
    "end": "2708860"
  },
  {
    "text": "well thank you so much thank you [Applause]",
    "start": "2708860",
    "end": "2715419"
  }
]