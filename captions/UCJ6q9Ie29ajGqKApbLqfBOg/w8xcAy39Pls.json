[
  {
    "text": "[Music]",
    "start": "1130",
    "end": "14690"
  },
  {
    "text": "hello everyone today it's my pleasure to be here to present our work with the title",
    "start": "16240",
    "end": "22880"
  },
  {
    "text": "mining and exploiting mobile payment credential leaks in the wild",
    "start": "22880",
    "end": "28080"
  },
  {
    "text": "i'm sean chen and we are researchers from the chinese university of hong kong",
    "start": "28080",
    "end": "34719"
  },
  {
    "text": "my talk will be organized as follows first i will give a",
    "start": "34719",
    "end": "40480"
  },
  {
    "text": "brief introduction to the third party payment service for mobile apps",
    "start": "40480",
    "end": "45760"
  },
  {
    "text": "including the involved parties and as general workflow next i will talk about the credentials",
    "start": "45760",
    "end": "53280"
  },
  {
    "text": "used in mobile payments which will help you to better understand",
    "start": "53280",
    "end": "58640"
  },
  {
    "text": "the exploits discussed later after that i will introduce the possible",
    "start": "58640",
    "end": "64320"
  },
  {
    "text": "leaking sources of payment credentials as well as the potential exploits with the leaked payment",
    "start": "64320",
    "end": "71439"
  },
  {
    "text": "credentials then i will present our automatic tool",
    "start": "71439",
    "end": "76479"
  },
  {
    "text": "to discover the payment credentials leaked in the world also i will discuss how to identify",
    "start": "76479",
    "end": "85520"
  },
  {
    "text": "the leaking merchant apps from their credentials finally i will give some",
    "start": "85520",
    "end": "91360"
  },
  {
    "text": "suggestions for fixing the payment credential leak issue",
    "start": "91360",
    "end": "96479"
  },
  {
    "text": "to conclude this talk so first let's talk about what is third party",
    "start": "96479",
    "end": "104720"
  },
  {
    "text": "mobile payment service in mobile payment there are three",
    "start": "104720",
    "end": "111520"
  },
  {
    "text": "parties involved namely the cashier the merchant",
    "start": "111520",
    "end": "116960"
  },
  {
    "text": "and the user notably the cashier and merchant heroes stand for their backend servers",
    "start": "116960",
    "end": "125280"
  },
  {
    "text": "while the user is represented by the casual app and merchant app installed on his",
    "start": "125280",
    "end": "133040"
  },
  {
    "text": "smartphone the target of the mobile payment protocol is for the user to pay the",
    "start": "133040",
    "end": "139920"
  },
  {
    "text": "merchant app through the cashier so first",
    "start": "139920",
    "end": "145120"
  },
  {
    "text": "the user needs to log into the merchant app in step 1",
    "start": "145120",
    "end": "150400"
  },
  {
    "text": "which can be conducted through the single sound service that may be provided by the same service",
    "start": "150400",
    "end": "157440"
  },
  {
    "text": "provider or cashier after the user shops and choose to check",
    "start": "157440",
    "end": "165360"
  },
  {
    "text": "out with the third party cashier the merchant app generates an order",
    "start": "165360",
    "end": "172560"
  },
  {
    "text": "request to a server in step 2 then the merchant server will respond",
    "start": "172560",
    "end": "179360"
  },
  {
    "text": "with a payment order in step 3 which contains app information",
    "start": "179360",
    "end": "185599"
  },
  {
    "text": "and other other information the app information here includes an important parameter",
    "start": "185599",
    "end": "193840"
  },
  {
    "text": "called notify uil and we will use it later",
    "start": "193840",
    "end": "199040"
  },
  {
    "text": "then the merchant app forwards the payment order to the cashier app",
    "start": "199040",
    "end": "204640"
  },
  {
    "text": "in step 4 while the cashier app will present the payment details",
    "start": "204640",
    "end": "209920"
  },
  {
    "text": "such as the total amount to the user for authorization",
    "start": "209920",
    "end": "215599"
  },
  {
    "text": "once the user authorizes the payment the cashier will generate a payment",
    "start": "215599",
    "end": "221440"
  },
  {
    "text": "request to a server or just the cashier server in step five",
    "start": "221440",
    "end": "230959"
  },
  {
    "text": "after processing the payment the cashier server will send two types of instant payment",
    "start": "231280",
    "end": "238000"
  },
  {
    "text": "notifications to the merchant namely the signals notification and a singleness",
    "start": "238000",
    "end": "244239"
  },
  {
    "text": "notification the single the synchronous notification or step 6a",
    "start": "244239",
    "end": "250879"
  },
  {
    "text": "as the immediate response to the payment request which goes through the user device in",
    "start": "250879",
    "end": "258479"
  },
  {
    "text": "step 7 and arrives at the merchant server in step 8",
    "start": "258479",
    "end": "265040"
  },
  {
    "text": "in contrast the synchronous notification of step 6b",
    "start": "265040",
    "end": "270800"
  },
  {
    "text": "is sent to the merchant server",
    "start": "270800",
    "end": "274720"
  },
  {
    "text": "from the cashier server directly according to the notify url specified in the payment order in step",
    "start": "276080",
    "end": "284080"
  },
  {
    "text": "three also the customers usually provide other",
    "start": "284080",
    "end": "290160"
  },
  {
    "text": "management interfaces to their merchants which can operate on the cash account",
    "start": "290160",
    "end": "298080"
  },
  {
    "text": "of the merchant app for example the merchant server may send requests",
    "start": "298080",
    "end": "304560"
  },
  {
    "text": "to the cashier server directly in step 9 to perform some transactions such as",
    "start": "304560",
    "end": "310720"
  },
  {
    "text": "refunding the paid orders",
    "start": "310720",
    "end": "314240"
  },
  {
    "text": "then let's talk about the credentials used in mobile appointments [Music]",
    "start": "316240",
    "end": "321840"
  },
  {
    "text": "in the workflow below almost all the payment related messages except for step 2 are protected",
    "start": "321840",
    "end": "329680"
  },
  {
    "text": "cryptographically since there is no unifying standard for mobile payment",
    "start": "329680",
    "end": "337199"
  },
  {
    "text": "the caches or define their own credentials in this work",
    "start": "337199",
    "end": "342639"
  },
  {
    "text": "we studied the credential leak issue for four first-year third-party customers",
    "start": "342639",
    "end": "349360"
  },
  {
    "text": "this consists of of one billion end users globally however according to the requests",
    "start": "349360",
    "end": "356240"
  },
  {
    "text": "from these caches after our responsible disclosure we will not release their names and just",
    "start": "356240",
    "end": "363759"
  },
  {
    "text": "use cash 1 to cashew 4 to donate them in the following slides",
    "start": "363759",
    "end": "370639"
  },
  {
    "text": "so the payment credentials can be categorized into two types",
    "start": "370880",
    "end": "376720"
  },
  {
    "text": "and the first type is the payment key which is used to generate the digital",
    "start": "376720",
    "end": "381759"
  },
  {
    "text": "signature or hmac then the merchant can choose item method",
    "start": "381759",
    "end": "388080"
  },
  {
    "text": "to protect the payment messenger meanwhile none of the study captures",
    "start": "388080",
    "end": "394000"
  },
  {
    "text": "required encryption on the payment messenger so that these messages becomes readable",
    "start": "394000",
    "end": "400720"
  },
  {
    "text": "to the normal user or even the attacker on the other hand the security setting",
    "start": "400720",
    "end": "407840"
  },
  {
    "text": "of payment keys are different across the questions for example",
    "start": "407840",
    "end": "414000"
  },
  {
    "text": "some caches were generated key and assigned to the merchants",
    "start": "414000",
    "end": "419199"
  },
  {
    "text": "which is instead user defined in the other cases in the case of digital signatures",
    "start": "419199",
    "end": "426720"
  },
  {
    "text": "both the merchant and the customer need to maintain a pair of asymmetric key",
    "start": "426720",
    "end": "432479"
  },
  {
    "text": "and share their public keys to validate the incoming messages however the publicity of the cashier",
    "start": "432479",
    "end": "440160"
  },
  {
    "text": "tends to be global across the merchant apps these security settings can cause some",
    "start": "440160",
    "end": "446880"
  },
  {
    "text": "security issues and i will talk about the corresponding drawback later",
    "start": "446880",
    "end": "454319"
  },
  {
    "text": "apart from the payment keys there are two other credentials defined",
    "start": "456160",
    "end": "463120"
  },
  {
    "text": "by the caches in order to provide better security",
    "start": "463120",
    "end": "469360"
  },
  {
    "text": "the first one is the android signing key when the cachers app received a payment order in step 4",
    "start": "470560",
    "end": "478960"
  },
  {
    "text": "cashier 2 and cash 4 will authorizate their merchant app by checking as",
    "start": "478960",
    "end": "484960"
  },
  {
    "text": "package signature against a per registered value thus the merchants must keep",
    "start": "484960",
    "end": "492720"
  },
  {
    "text": "the associated android signing keys private",
    "start": "492720",
    "end": "497759"
  },
  {
    "text": "also cashier to issues client certificates to their merchants which are used for",
    "start": "500240",
    "end": "507280"
  },
  {
    "text": "separate authentication on the network layer in the management",
    "start": "507280",
    "end": "512399"
  },
  {
    "text": "interfaces in step 9 for example refining the paid orders",
    "start": "512399",
    "end": "518640"
  },
  {
    "text": "in such requests the merchant server needs to present as client certificate",
    "start": "518640",
    "end": "524720"
  },
  {
    "text": "to the cashier server to authenticate itself now let's discuss where the payment",
    "start": "524720",
    "end": "531440"
  },
  {
    "text": "credentials can be leaked in the world in summary there are three potential",
    "start": "531440",
    "end": "537600"
  },
  {
    "text": "leaking sources and i will go through them one by one the first leaking source is the public",
    "start": "537600",
    "end": "545360"
  },
  {
    "text": "get repositories such as github such leaks in github",
    "start": "545360",
    "end": "551200"
  },
  {
    "text": "has been known before and have been studied by many previous works despite this known finding we also find",
    "start": "551200",
    "end": "558959"
  },
  {
    "text": "some websites which set up their own github service",
    "start": "558959",
    "end": "564959"
  },
  {
    "text": "on public ip addresses and make their report trades public",
    "start": "564959",
    "end": "570399"
  },
  {
    "text": "which may also contain the active payment credentials",
    "start": "570399",
    "end": "575600"
  },
  {
    "text": "the second leaking source is mobile apps because many app developers may deploy",
    "start": "575600",
    "end": "582000"
  },
  {
    "text": "the server side projects in the front end in this works we mainly focus on the",
    "start": "582000",
    "end": "588640"
  },
  {
    "text": "android apps because their installation packages or apks can be easily obtained",
    "start": "588640",
    "end": "595600"
  },
  {
    "text": "from the third party app market also in our preliminary",
    "start": "595600",
    "end": "602079"
  },
  {
    "text": "study we find some credentials only accessed in old mobile app versions",
    "start": "602079",
    "end": "609120"
  },
  {
    "text": "many of these app developers have tried to hide a leak issue by pushing new",
    "start": "609120",
    "end": "614160"
  },
  {
    "text": "versions of mobile apps however the leaked credentials",
    "start": "614160",
    "end": "619760"
  },
  {
    "text": "are still valid and can be uncovered by the attacker",
    "start": "619760",
    "end": "625680"
  },
  {
    "text": "out of our expectation we find the merchant server can be another leaking",
    "start": "626480",
    "end": "632240"
  },
  {
    "text": "source which has not been studied before such leaks are caused by two major",
    "start": "632240",
    "end": "640079"
  },
  {
    "text": "reasons namely the flood backhand sdks from the caches",
    "start": "640079",
    "end": "646000"
  },
  {
    "text": "and the insecure access control setting by the merchant unless server",
    "start": "646000",
    "end": "653839"
  },
  {
    "text": "here we give a concrete example for better registration the figure here shows the structure of a",
    "start": "653839",
    "end": "661200"
  },
  {
    "text": "flawed sdk to be specific the scrap file notify uil.php",
    "start": "661200",
    "end": "669519"
  },
  {
    "text": "as responsible for processing the single nodes notification mentioned above",
    "start": "669519",
    "end": "675279"
  },
  {
    "text": "meanwhile the configuration file name like paymentconfig.php",
    "start": "675279",
    "end": "681760"
  },
  {
    "text": "sets the payment key to a static file in other words",
    "start": "681760",
    "end": "687680"
  },
  {
    "text": "pm what's due this sdk does not restrict the access to",
    "start": "687680",
    "end": "693839"
  },
  {
    "text": "this static key file by default as such",
    "start": "693839",
    "end": "699680"
  },
  {
    "text": "the attacker may guess the url endpoint of the credential file based on the",
    "start": "699680",
    "end": "705440"
  },
  {
    "text": "value of notify url as well as the sdk structure then that then the attacker can student",
    "start": "705440",
    "end": "712959"
  },
  {
    "text": "payment credential file directly after merchant server does not forbid",
    "start": "712959",
    "end": "718240"
  },
  {
    "text": "the access to it",
    "start": "718240",
    "end": "721519"
  },
  {
    "text": "then i will present four types of exploits enabled by the leaked payment",
    "start": "723680",
    "end": "728959"
  },
  {
    "text": "credentials as we will see these leaked payment credentials can affect other innocent merchant apps",
    "start": "728959",
    "end": "737120"
  },
  {
    "text": "without leaks or even another third-party service for mobile apps",
    "start": "737120",
    "end": "745519"
  },
  {
    "text": "so first with the leaked payment credentials the attack may impress nate the benign",
    "start": "745519",
    "end": "752160"
  },
  {
    "text": "merchants and virtual requests to the cashier server for some critical",
    "start": "752160",
    "end": "757360"
  },
  {
    "text": "operations which include downloading transaction records and refining paid orders",
    "start": "757360",
    "end": "764560"
  },
  {
    "text": "in some cases the attacker may even steal money from the merchant's cash account",
    "start": "764560",
    "end": "771519"
  },
  {
    "text": "by crafting many transferring requests even if",
    "start": "771519",
    "end": "776800"
  },
  {
    "text": "remember that cashier 2 requires the client certificate in these",
    "start": "776800",
    "end": "783680"
  },
  {
    "text": "management interfaces we have detected over 3000 leaked client",
    "start": "783680",
    "end": "788880"
  },
  {
    "text": "certificates which enable the merchant implementation attack",
    "start": "788880",
    "end": "794639"
  },
  {
    "text": "such a such an exploit will cause both privacy violation and financial",
    "start": "794639",
    "end": "802000"
  },
  {
    "text": "loss to the merchant apps as well as their end users",
    "start": "802000",
    "end": "808399"
  },
  {
    "text": "on the other hand some careless app developers push their home",
    "start": "808399",
    "end": "814399"
  },
  {
    "text": "front-end code online which includes their private android signing keys",
    "start": "814399",
    "end": "820959"
  },
  {
    "text": "as a result the attacker can change several lines of code in the original code base and the",
    "start": "820959",
    "end": "828399"
  },
  {
    "text": "package of malaysia's merchant app by replacing the payment order in step 4",
    "start": "828399",
    "end": "834560"
  },
  {
    "text": "the vactime user can be checked into paying for the attacker's order",
    "start": "834560",
    "end": "840480"
  },
  {
    "text": "overall we have detected over 400 weighted android signing keys",
    "start": "840480",
    "end": "846800"
  },
  {
    "text": "and the 10 of the related android apps have over 1 million downloads",
    "start": "846800",
    "end": "853600"
  },
  {
    "text": "the third type of type of exploit is related to the single cell service",
    "start": "855600",
    "end": "863680"
  },
  {
    "text": "actually some caches also provide third-party authentication service",
    "start": "864000",
    "end": "869519"
  },
  {
    "text": "through single cell in other words some mobile apps can integrate the",
    "start": "869519",
    "end": "877279"
  },
  {
    "text": "single sound and the payments of it from the same service provider",
    "start": "877279",
    "end": "882880"
  },
  {
    "text": "however these caches may not separate payment and single cell d2 service properly",
    "start": "882880",
    "end": "891199"
  },
  {
    "text": "which makes sure the same set of user ids enabling the so-called profile exploit",
    "start": "891199",
    "end": "899600"
  },
  {
    "text": "in single file in profile exploit the merchant server trusts the user id from the user device",
    "start": "899600",
    "end": "908320"
  },
  {
    "text": "by wrong but miss the token request to the service",
    "start": "908320",
    "end": "913760"
  },
  {
    "text": "provider okay as a result the attacker may modify the value of",
    "start": "913760",
    "end": "919680"
  },
  {
    "text": "user id in his device to skew the victim's account although the cashiers usually set the",
    "start": "919680",
    "end": "926959"
  },
  {
    "text": "user id to be private the attacker can use the leaked payment",
    "start": "926959",
    "end": "932000"
  },
  {
    "text": "credential to launch the implementation attack",
    "start": "932000",
    "end": "937120"
  },
  {
    "text": "and get the user ids of all paying users from the related transaction records",
    "start": "937120",
    "end": "944399"
  },
  {
    "text": "consequently the attacker can hijack the original accounts of",
    "start": "944399",
    "end": "950320"
  },
  {
    "text": "victim users in the merchant apps besides we find that some developers reduce the values",
    "start": "950320",
    "end": "958240"
  },
  {
    "text": "of their payment keys to be the single cell secret",
    "start": "958240",
    "end": "963839"
  },
  {
    "text": "which amplifies the impact of payment credential leaks to",
    "start": "963839",
    "end": "969440"
  },
  {
    "text": "single cell according to our test two percent of the payment keys also",
    "start": "969440",
    "end": "975759"
  },
  {
    "text": "work as the single cell secret",
    "start": "975759",
    "end": "980079"
  },
  {
    "text": "the first type of exploit is so-called cross-app notification forgery",
    "start": "981040",
    "end": "986560"
  },
  {
    "text": "which enables the attacker to cheat other innocent merchant apps that do not",
    "start": "986560",
    "end": "992160"
  },
  {
    "text": "leak their credentials as i mentioned above the cushions public",
    "start": "992160",
    "end": "997360"
  },
  {
    "text": "key tends to be shared across the merchant app in the case",
    "start": "997360",
    "end": "1003519"
  },
  {
    "text": "of digital signature thus the attacker may",
    "start": "1003519",
    "end": "1008560"
  },
  {
    "text": "treat the casual server as the signing oracle and pro and control the value of",
    "start": "1008560",
    "end": "1014800"
  },
  {
    "text": "notify uio in his crafted payment order to forge some cryptocurrency",
    "start": "1014800",
    "end": "1022240"
  },
  {
    "text": "correct payment notifications then he may send these foreign messages",
    "start": "1022240",
    "end": "1027839"
  },
  {
    "text": "to the vector merchants",
    "start": "1027839",
    "end": "1031199"
  },
  {
    "text": "once the merchant server overlooks the app identifier inside",
    "start": "1033199",
    "end": "1039438"
  },
  {
    "text": "such as the parameter merchant in the given example it will be cheated and enable the",
    "start": "1039439",
    "end": "1046319"
  },
  {
    "text": "attacker to shop for free then i will present our automatic tool",
    "start": "1046319",
    "end": "1054080"
  },
  {
    "text": "to discover the payment credentials leaked in the world as well as the",
    "start": "1054080",
    "end": "1059600"
  },
  {
    "text": "empirical testing results in short we develop a tool called pk",
    "start": "1059600",
    "end": "1065679"
  },
  {
    "text": "miner to enable the large-scale mining for payment credentials leaked in the",
    "start": "1065679",
    "end": "1072240"
  },
  {
    "text": "public get repositories android apks and merchant servers",
    "start": "1072240",
    "end": "1077760"
  },
  {
    "text": "the tool is made up of three modules namely crawler scanner and detector and i will go",
    "start": "1077760",
    "end": "1085200"
  },
  {
    "text": "through them one by one in the following slides so the crawler will first identify the",
    "start": "1085200",
    "end": "1092000"
  },
  {
    "text": "payment rated get repositories with the help of get hub search api and four search",
    "start": "1092000",
    "end": "1099600"
  },
  {
    "text": "engines including google towards this end we summarize three types of environment",
    "start": "1099600",
    "end": "1106880"
  },
  {
    "text": "in the integration of mobile payment to construct the customer specific query",
    "start": "1106880",
    "end": "1113280"
  },
  {
    "text": "strings search environment can be either data",
    "start": "1113280",
    "end": "1118320"
  },
  {
    "text": "code or file name for example the public key of caution 3 is global and assured",
    "start": "1118320",
    "end": "1125679"
  },
  {
    "text": "among its merchant apps so we constructed the segment of its public",
    "start": "1125679",
    "end": "1131360"
  },
  {
    "text": "as one of our currency",
    "start": "1131360",
    "end": "1135559"
  },
  {
    "text": "as to the android apps we collect apks in various versions",
    "start": "1136400",
    "end": "1142160"
  },
  {
    "text": "from third-party app market to set up a full single database because some leaked credentials may only",
    "start": "1142160",
    "end": "1149440"
  },
  {
    "text": "exist in old versions the tool will then process these apks to",
    "start": "1149440",
    "end": "1154799"
  },
  {
    "text": "check whether they use the third party payment function here our tool relies on two heuristics",
    "start": "1154799",
    "end": "1163200"
  },
  {
    "text": "first the merchant app must use official front and sdk to send the payment order",
    "start": "1163200",
    "end": "1172080"
  },
  {
    "text": "in step four also the cashier always requires merchants to register graduates from",
    "start": "1172080",
    "end": "1178640"
  },
  {
    "text": "certain activities in androidmanifest.xml xml2 received a single synchronous",
    "start": "1178640",
    "end": "1186559"
  },
  {
    "text": "modification in step 7. the table below shows the screening",
    "start": "1186559",
    "end": "1193200"
  },
  {
    "text": "result where overall 1 million apks have been tested by our pk miner",
    "start": "1193200",
    "end": "1202000"
  },
  {
    "text": "among the four studied cultures pressure 2 as the most popular and used by almost",
    "start": "1202000",
    "end": "1208240"
  },
  {
    "text": "one fifth of the test app the second module in pk miner is called",
    "start": "1208240",
    "end": "1216799"
  },
  {
    "text": "scanner which recognized all potential payment credentials from the crawler",
    "start": "1216799",
    "end": "1222320"
  },
  {
    "text": "output to a given get repository or android apk",
    "start": "1222320",
    "end": "1227919"
  },
  {
    "text": "the tool will perform whiteboard scanning because we can check",
    "start": "1227919",
    "end": "1233600"
  },
  {
    "text": "their code directly to be specific the tool will trace back",
    "start": "1233600",
    "end": "1238880"
  },
  {
    "text": "the history first because some leaks only occur in old versions",
    "start": "1238880",
    "end": "1244799"
  },
  {
    "text": "then our tool can get the potential payment credentials use either text-based patentmention",
    "start": "1244799",
    "end": "1252640"
  },
  {
    "text": "for payment keys or file format filtering for other credential files",
    "start": "1252640",
    "end": "1259600"
  },
  {
    "text": "the scanner also performed the black box scanning on the merchant server here",
    "start": "1260960",
    "end": "1266960"
  },
  {
    "text": "according to our study many merchant apps hardcoded the values",
    "start": "1266960",
    "end": "1272400"
  },
  {
    "text": "of their notify urls thus our tool can extract them out from their apks",
    "start": "1272400",
    "end": "1280080"
  },
  {
    "text": "then our tool or the scanner can construct and pop the urls and",
    "start": "1280080",
    "end": "1286559"
  },
  {
    "text": "points that may point to the credential files that exposed",
    "start": "1286559",
    "end": "1292640"
  },
  {
    "text": "in the merchant servers finally the detector module validates",
    "start": "1292640",
    "end": "1300080"
  },
  {
    "text": "the potential payment credentials as the scanner only performs pattern matching on payment keys",
    "start": "1300080",
    "end": "1307520"
  },
  {
    "text": "and overlocks other contacts information some output from the scanner at force",
    "start": "1307520",
    "end": "1313360"
  },
  {
    "text": "positive or noise which is caused by some stored data",
    "start": "1313360",
    "end": "1318480"
  },
  {
    "text": "such as system blocks because some developers may backup their home server code on github",
    "start": "1318480",
    "end": "1326400"
  },
  {
    "text": "source a machine learning based classifier to distinguish",
    "start": "1326400",
    "end": "1333919"
  },
  {
    "text": "configuration files from stored files to speed up the validation and our test",
    "start": "1333919",
    "end": "1339280"
  },
  {
    "text": "key also some payment keys are generated by",
    "start": "1339280",
    "end": "1344400"
  },
  {
    "text": "the cashier and [Music] this case may have pop similar channel",
    "start": "1344400",
    "end": "1350480"
  },
  {
    "text": "entropy so that we use an entropy filter to remove the false positives",
    "start": "1350480",
    "end": "1357120"
  },
  {
    "text": "on the other hand the credential files such as client certificates",
    "start": "1357120",
    "end": "1362640"
  },
  {
    "text": "king capture 2 and android signing keys are password protected",
    "start": "1362640",
    "end": "1368880"
  },
  {
    "text": "and we use different strategies to correct them locally for example the",
    "start": "1368880",
    "end": "1373919"
  },
  {
    "text": "suggested password for pfx certificates in cash 3 is a six digit",
    "start": "1373919",
    "end": "1381039"
  },
  {
    "text": "so that we use john refer to brute force them offline while the success rate is over 99",
    "start": "1381039",
    "end": "1388370"
  },
  {
    "text": "[Music] in contrast the password for the android signing key is user defined without any",
    "start": "1388370",
    "end": "1395600"
  },
  {
    "text": "guideline so that the detector will go back to the",
    "start": "1395600",
    "end": "1400720"
  },
  {
    "text": "original get repository and try to unlock the site android signing key file",
    "start": "1400720",
    "end": "1406720"
  },
  {
    "text": "with all the strings string values inside such an approach gives a success rate of",
    "start": "1406720",
    "end": "1413280"
  },
  {
    "text": "over 60 percent meanwhile the activeness of a given and",
    "start": "1413280",
    "end": "1418480"
  },
  {
    "text": "returning key can be checked by the detector here",
    "start": "1418480",
    "end": "1423840"
  },
  {
    "text": "to be specific the tool will try to find the android package name from the original get",
    "start": "1423840",
    "end": "1429840"
  },
  {
    "text": "repository download the associated apk and compare the hash values to complete the check",
    "start": "1429840",
    "end": "1437679"
  },
  {
    "text": "in short we have detected over 400 active android sign keys so far",
    "start": "1437679",
    "end": "1445840"
  },
  {
    "text": "finally we use an online approach to validate the refined",
    "start": "1446080",
    "end": "1452000"
  },
  {
    "text": "payment credentials the detector will use the suspected payment credentials to prepare a male",
    "start": "1452000",
    "end": "1459039"
  },
  {
    "text": "formed order query request to the cashier which will definitely trigger some error",
    "start": "1459039",
    "end": "1465279"
  },
  {
    "text": "code for example illegal site in the example means that",
    "start": "1465279",
    "end": "1470720"
  },
  {
    "text": "the payment key is not correct while chart not accessed indicates that",
    "start": "1470720",
    "end": "1476320"
  },
  {
    "text": "the key is valid based on the difference in the returned error code from the cash server",
    "start": "1476320",
    "end": "1483279"
  },
  {
    "text": "pk miner can then validate the payment credentials to avoid affecting the normal protection",
    "start": "1483279",
    "end": "1489360"
  },
  {
    "text": "of the cashier we can show the interval between two requests to two seconds",
    "start": "1489360",
    "end": "1495440"
  },
  {
    "text": "overall it takes pk minor around 300 seconds to test each input",
    "start": "1495440",
    "end": "1502880"
  },
  {
    "text": "then comes the test results in summary about 20 000 unique payment credentials",
    "start": "1504080",
    "end": "1512000"
  },
  {
    "text": "have been detected from these three leaking sources including",
    "start": "1512000",
    "end": "1518080"
  },
  {
    "text": "public get repositories android apk and merchant servers",
    "start": "1518080",
    "end": "1524000"
  },
  {
    "text": "in these four studied cultures in terms of leaking sources most payment credentials",
    "start": "1524000",
    "end": "1531360"
  },
  {
    "text": "are detected from public github and android pk on the other hand most credential leaks",
    "start": "1531360",
    "end": "1538240"
  },
  {
    "text": "happen in cashier 2 which is consistent with its widespread integration",
    "start": "1538240",
    "end": "1544400"
  },
  {
    "text": "in mobile apps",
    "start": "1544400",
    "end": "1547440"
  },
  {
    "text": "now let's discuss the results from three leaking sources one by one here",
    "start": "1549760",
    "end": "1556640"
  },
  {
    "text": "in terms of the public gate repositories we have tested around 140 000 input",
    "start": "1556640",
    "end": "1564640"
  },
  {
    "text": "from various sources well 10.3 percent of the leak at least one valid payment",
    "start": "1564640",
    "end": "1571679"
  },
  {
    "text": "credential meanwhile seven point eight percent of the payment credentials only exist in",
    "start": "1571679",
    "end": "1579200"
  },
  {
    "text": "all the get commits that indicate that some developers have noticed a leak issue",
    "start": "1579200",
    "end": "1586080"
  },
  {
    "text": "but fixed wrongly by pushing new get commits instead of updating their",
    "start": "1586080",
    "end": "1591760"
  },
  {
    "text": "payment credentials on average it takes 51 days for the",
    "start": "1591760",
    "end": "1597520"
  },
  {
    "text": "developers to take such wrong fixings besides",
    "start": "1597520",
    "end": "1602880"
  },
  {
    "text": "among the results we find 712 payment credentials",
    "start": "1602880",
    "end": "1609279"
  },
  {
    "text": "data related to ios apps another interesting finding is that",
    "start": "1609279",
    "end": "1614880"
  },
  {
    "text": "most of the public get repositories belong to some outsourcing companies",
    "start": "1614880",
    "end": "1620960"
  },
  {
    "text": "these companies are only responsible for development but not maintenance so that",
    "start": "1620960",
    "end": "1626640"
  },
  {
    "text": "they may not care much about the security issue",
    "start": "1626640",
    "end": "1631600"
  },
  {
    "text": "in the case of android apks around 5000 payment keys are detected",
    "start": "1631760",
    "end": "1637840"
  },
  {
    "text": "from over 7000 apks besides three apps embed the client certificates in cashier",
    "start": "1637840",
    "end": "1645120"
  },
  {
    "text": "2 where these merchant apps use these certificates to request the cashier server",
    "start": "1645120",
    "end": "1652000"
  },
  {
    "text": "for some management interfaces such as refunding",
    "start": "1652000",
    "end": "1657440"
  },
  {
    "text": "also 31.9 percent of the keys only exist",
    "start": "1657440",
    "end": "1663919"
  },
  {
    "text": "in older versions there are two other interesting findings when we studied the result from android",
    "start": "1663919",
    "end": "1669919"
  },
  {
    "text": "apk first we studied the leaking locations of these payment credentials and",
    "start": "1669919",
    "end": "1676010"
  },
  {
    "text": "[Music] find that around 2000 keys are from the same location or android activity",
    "start": "1676010",
    "end": "1683760"
  },
  {
    "text": "this activity actually belongs to the official front and demo project provided by one certain",
    "start": "1683760",
    "end": "1690880"
  },
  {
    "text": "customer although these cache claims that the project is only for demo use and gives a",
    "start": "1690880",
    "end": "1698240"
  },
  {
    "text": "strong warning about the leak issue in this level many merchant apps still reuse that for",
    "start": "1698240",
    "end": "1704559"
  },
  {
    "text": "their own base payment service meanwhile we find when certain payments",
    "start": "1704559",
    "end": "1709679"
  },
  {
    "text": "keep appearing in hundreds of merchant apps which actually belongs to a payment",
    "start": "1709679",
    "end": "1715919"
  },
  {
    "text": "aggregator the so-called payment aggregator works as the proxy between the real",
    "start": "1715919",
    "end": "1722320"
  },
  {
    "text": "merchant server and the cache server however this payment aggregator leaks at key",
    "start": "1722320",
    "end": "1729580"
  },
  {
    "text": "[Music] in the front end sdk and affects all the",
    "start": "1729580",
    "end": "1734799"
  },
  {
    "text": "related merchant app now let's turn to the results from",
    "start": "1734799",
    "end": "1740399"
  },
  {
    "text": "merchant servers our tool have recovered around",
    "start": "1740399",
    "end": "1745840"
  },
  {
    "text": "885 urls or merchant servers from android apks the other",
    "start": "1745840",
    "end": "1753440"
  },
  {
    "text": "apps do not embed their notified url while as value is still visible in",
    "start": "1753440",
    "end": "1759520"
  },
  {
    "text": "runtime notably seven percent of these tested servers",
    "start": "1759520",
    "end": "1765520"
  },
  {
    "text": "are valiable meaning that they use the flawed backhand sdk provided by the caches and",
    "start": "1765520",
    "end": "1773360"
  },
  {
    "text": "do not forbid access to their credential files as the backhand sdks are the same for",
    "start": "1773360",
    "end": "1781200"
  },
  {
    "text": "either android or ios apps the ios apps can make the same mistake",
    "start": "1781200",
    "end": "1787600"
  },
  {
    "text": "and we have found such cases manually in the collected github repositories",
    "start": "1787600",
    "end": "1795720"
  },
  {
    "text": "we have reported our findings to the related caches besides after our initial testing we send two",
    "start": "1796000",
    "end": "1803679"
  },
  {
    "text": "caches over 3000 leaked keys according to the cashiers they would",
    "start": "1803679",
    "end": "1809200"
  },
  {
    "text": "allot and urge the related merchants to change their payment keys",
    "start": "1809200",
    "end": "1814559"
  },
  {
    "text": "meanwhile we conduct regular monitoring on the related github repositories to",
    "start": "1814559",
    "end": "1820799"
  },
  {
    "text": "study the responses from these leaking merchants to sum up there are five types of",
    "start": "1820799",
    "end": "1827600"
  },
  {
    "text": "responses by the merchants first some merchants choose to update",
    "start": "1827600",
    "end": "1833440"
  },
  {
    "text": "their payment key which has the correct fixing however some merchants choose to hide or",
    "start": "1833440",
    "end": "1840559"
  },
  {
    "text": "remove their github repositories while the other merchants tend to remove",
    "start": "1840559",
    "end": "1846159"
  },
  {
    "text": "the related get commits or push nuget commits instead",
    "start": "1846159",
    "end": "1851200"
  },
  {
    "text": "on the other hand many leaking merchants have not made any responses",
    "start": "1851200",
    "end": "1856399"
  },
  {
    "text": "so far the table below shows the situation when we retested this when we retested",
    "start": "1856399",
    "end": "1863919"
  },
  {
    "text": "these leaking repositories 12 months after our first report",
    "start": "1863919",
    "end": "1869600"
  },
  {
    "text": "unfortunately as we can see only 16 of the reported key",
    "start": "1869600",
    "end": "1876320"
  },
  {
    "text": "had been updated by that time while the others were still ready",
    "start": "1876320",
    "end": "1883360"
  },
  {
    "text": "now i will talk about how to find the leaking merchant apps that are related to the detected payment credentials",
    "start": "1883360",
    "end": "1892480"
  },
  {
    "text": "some credentials are called from the server code in github repositories so that we cannot find the",
    "start": "1892480",
    "end": "1899919"
  },
  {
    "text": "associated merchant apps directly [Music] thus we developed a foreign three",
    "start": "1899919",
    "end": "1905919"
  },
  {
    "text": "approach for this target first some payment credentials also work",
    "start": "1905919",
    "end": "1911120"
  },
  {
    "text": "for websites so that we can craft the corresponding payment request and send",
    "start": "1911120",
    "end": "1916880"
  },
  {
    "text": "it to the control server since the site of the app information will just appear in the response from",
    "start": "1916880",
    "end": "1924000"
  },
  {
    "text": "the customer server we automate this approach and have identified around",
    "start": "1924000",
    "end": "1930360"
  },
  {
    "text": "1500 apps on the other hand the client certificates are usually leaked along",
    "start": "1930360",
    "end": "1937600"
  },
  {
    "text": "with the related payment keys in cash 2. besides the appeal information is",
    "start": "1937600",
    "end": "1944000"
  },
  {
    "text": "available after we unlocked the client certificate",
    "start": "1944000",
    "end": "1949039"
  },
  {
    "text": "we automate this approach and have identified around 3000 leaking merchant",
    "start": "1949039",
    "end": "1954559"
  },
  {
    "text": "apps the last approach is to hook the casual app",
    "start": "1954559",
    "end": "1960240"
  },
  {
    "text": "we find when certain cache app will extract the information of merchant app",
    "start": "1960240",
    "end": "1965360"
  },
  {
    "text": "from a server in each payment as a result we can hook such a function",
    "start": "1965360",
    "end": "1971279"
  },
  {
    "text": "in the cache app to get the identity of the leaking matching app",
    "start": "1971279",
    "end": "1976640"
  },
  {
    "text": "we have completed the proof of concept for this approach but have not automated",
    "start": "1976640",
    "end": "1982799"
  },
  {
    "text": "it so far finally i will give some suggestions in",
    "start": "1982799",
    "end": "1988000"
  },
  {
    "text": "fixing the payment credential leaks to conclude this talk",
    "start": "1988000",
    "end": "1993279"
  },
  {
    "text": "first the cushion should warn their merchants about the serious consequences",
    "start": "1993279",
    "end": "1998399"
  },
  {
    "text": "of payment credential leaks next the cashiers should timely fix their insecure implementations such as",
    "start": "1998399",
    "end": "2006000"
  },
  {
    "text": "the flawed backhand sdks and misleading front-end demo project",
    "start": "2006000",
    "end": "2011519"
  },
  {
    "text": "also the caches should contact proactive scanning on the leaked",
    "start": "2011519",
    "end": "2017200"
  },
  {
    "text": "credentials and the revoke the meantime well to the merchants they should",
    "start": "2017200",
    "end": "2022399"
  },
  {
    "text": "periodically update their credentials which may be leaked in some unknown but",
    "start": "2022399",
    "end": "2029279"
  },
  {
    "text": "public places",
    "start": "2029279",
    "end": "2033159"
  },
  {
    "text": "we have released a white paper where you may find more details and that's",
    "start": "2035039",
    "end": "2041120"
  },
  {
    "text": "that at the end of my presentation thank you",
    "start": "2041120",
    "end": "2047000"
  }
]