[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "good afternoon blackhead um thanks for being here um so yeah obligatory",
    "start": "80",
    "end": "5240"
  },
  {
    "text": "background slide uh if you don't know me I work for Google on the project zero research team specializing in Windows",
    "start": "5240",
    "end": "12759"
  },
  {
    "text": "mainly privilege escalation sort of vulnerabilities mainly because I like logical vulnerabilities and and rather",
    "start": "12759",
    "end": "19600"
  },
  {
    "text": "than memory corruption so I find that quite often in these sort of types of",
    "start": "19600",
    "end": "25599"
  },
  {
    "text": "things so what exactly am I going to talk about so this will be quite a technical talk it's a talk for people",
    "start": "25599",
    "end": "32078"
  },
  {
    "text": "who want to hunt for bugs in the windows kernel and it's specifically related to",
    "start": "32079",
    "end": "38000"
  },
  {
    "text": "the Windows security access security mechanisms and how it relates to how kernel code and kernel drivers may",
    "start": "38000",
    "end": "44680"
  },
  {
    "text": "actually interact with the Windows security mechanism to verify a user's",
    "start": "44680",
    "end": "51160"
  },
  {
    "text": "identity now Windows is actually a reasonably complicated um sort of security architecture um but you can",
    "start": "51160",
    "end": "57399"
  },
  {
    "start": "52000",
    "end": "52000"
  },
  {
    "text": "actually sort of break it down to sort of three main parts the first part is each resource say a",
    "start": "57399",
    "end": "63120"
  },
  {
    "text": "file or a process has some sort of uh security associated with it which defines who is allowed to access it and",
    "start": "63120",
    "end": "70080"
  },
  {
    "text": "what they're allowed to do once they do access it this is stored in something called a security descriptor and",
    "start": "70080",
    "end": "75720"
  },
  {
    "text": "contains various bits of information about the securable resource and what you're allowed to do with",
    "start": "75720",
    "end": "81360"
  },
  {
    "text": "it the next component is the process and specifically its Associated access token",
    "start": "81360",
    "end": "87680"
  },
  {
    "text": "and the access token is the your user identity effectively it provides the identity to the operating",
    "start": "87680",
    "end": "94159"
  },
  {
    "text": "system and these two combine when you do system calls or other kernel and Driver",
    "start": "94159",
    "end": "99200"
  },
  {
    "text": "code gets gets involved and talks to something called the security reference Monitor and the security reference monitor is responsible for actually",
    "start": "99200",
    "end": "106119"
  },
  {
    "text": "enforcing the security of the system and providing security decisions so you can find documentation",
    "start": "106119",
    "end": "112280"
  },
  {
    "start": "110000",
    "end": "110000"
  },
  {
    "text": "about the SRM security reference monitor um basically if you're doing kernel mode",
    "start": "112280",
    "end": "117759"
  },
  {
    "text": "code if the function starts with prefix SE that means it's something related to",
    "start": "117759",
    "end": "125000"
  },
  {
    "text": "security Now the real core of pretty much all security decisions is the access check and this is done through a",
    "start": "125159",
    "end": "131200"
  },
  {
    "text": "usually through a function called SE access check and effectively it's just sort of taking your your token and",
    "start": "131200",
    "end": "137800"
  },
  {
    "text": "applying it to your security descriptor and making a decision on whether I'm going to give you access or",
    "start": "137800",
    "end": "143360"
  },
  {
    "text": "not so there's a few different steps um the first step being checking the what",
    "start": "143360",
    "end": "148760"
  },
  {
    "text": "is called the Integrity level and the intive level is something they added in Vista which determines it's like a",
    "start": "148760",
    "end": "154239"
  },
  {
    "text": "mandatory Access Control mechanism it's simply a number your access token has a",
    "start": "154239",
    "end": "159720"
  },
  {
    "text": "number the resource has a number and if you are above or equal to the resource",
    "start": "159720",
    "end": "165480"
  },
  {
    "text": "number you're allowed access otherwise it can tell you to go away then it goes into things like owner",
    "start": "165480",
    "end": "171360"
  },
  {
    "text": "check but then the daa check is the most important part this is where it determines what you can actually do with",
    "start": "171360",
    "end": "176480"
  },
  {
    "text": "that resource if that succeeds you've got access if it doesn't it'll tell you to go",
    "start": "176480",
    "end": "182879"
  },
  {
    "text": "away now the access token is actually pretty complicated structure so if you",
    "start": "182879",
    "end": "188239"
  },
  {
    "text": "think of a sort of traditional Unix system you may have had user IDs or group IDs just sort of simple simple",
    "start": "188239",
    "end": "194400"
  },
  {
    "text": "numeric values the access token in in Windows uses something called the",
    "start": "194400",
    "end": "199480"
  },
  {
    "text": "security identifier which is actually a sort of more complicated uh structure this is this s and and multiple sort of",
    "start": "199480",
    "end": "205400"
  },
  {
    "text": "numbers after it now it also things like your group so",
    "start": "205400",
    "end": "210879"
  },
  {
    "text": "you have your user it has your groups it has your mandatory label this is your integrity level and it also has",
    "start": "210879",
    "end": "216319"
  },
  {
    "text": "privileges which I'll go into a little bit briefly at the end because it has important consequences",
    "start": "216319",
    "end": "222760"
  },
  {
    "text": "elsewhere but fundamentally your access tokens just another kernel object it's",
    "start": "222760",
    "end": "228519"
  },
  {
    "text": "just another allocated buffer in memory allocated structure in kernel memory which has some values in it and",
    "start": "228519",
    "end": "235480"
  },
  {
    "text": "obviously it has then a similar association with all other sort of types of Kern objects including it can",
    "start": "235480",
    "end": "241319"
  },
  {
    "text": "actually be securable it can have its own security descriptor and access control list and which defines who can",
    "start": "241319",
    "end": "247239"
  },
  {
    "text": "access that token information now it wouldn't be obviously",
    "start": "247239",
    "end": "252799"
  },
  {
    "start": "249000",
    "end": "249000"
  },
  {
    "text": "it's it's too simple if it was just a single type of token because obviously there's many sort of scenarios in which",
    "start": "252799",
    "end": "258560"
  },
  {
    "text": "you may find yourself so I've kind of broken this down into sort of four main types of tokens there's Pro you could",
    "start": "258560",
    "end": "264919"
  },
  {
    "text": "probably argue for different sort of categorization but the sort of main one you would normally see the normal token",
    "start": "264919",
    "end": "270639"
  },
  {
    "text": "is just the one you would run as a normal user you'd have your normal um basic token now when you get UAC",
    "start": "270639",
    "end": "277160"
  },
  {
    "text": "involved user account control you may also have something called a linked token and this is just a a to another",
    "start": "277160",
    "end": "283759"
  },
  {
    "text": "token which is associated with the same token so for example your you could have an administrated token linked to your",
    "start": "283759",
    "end": "290120"
  },
  {
    "text": "normal user token and potentially you can switch between them by talking to the appropriate",
    "start": "290120",
    "end": "296320"
  },
  {
    "text": "service now underneath uh normal tokens you have two um system calls which allow",
    "start": "296320",
    "end": "302479"
  },
  {
    "text": "you to create uh sort of new tokens with new security properties uh you have",
    "start": "302479",
    "end": "307720"
  },
  {
    "text": "first enti filter token this creates what is called a filter token and you",
    "start": "307720",
    "end": "312880"
  },
  {
    "text": "actually also see this referred to as a restricted token because of the win32 API cause it the crate restricted token",
    "start": "312880",
    "end": "320800"
  },
  {
    "text": "now in Windows 8 to support app containers and um the sort of immersive",
    "start": "320800",
    "end": "327120"
  },
  {
    "text": "applications a new type of token was created the low boox token and then as an appropriate function to call but both",
    "start": "327120",
    "end": "333360"
  },
  {
    "text": "of those functions take an existing token and effectively copy some of its security information and imply new sort",
    "start": "333360",
    "end": "339400"
  },
  {
    "text": "of security categorizations so there's loads of important Fields you need to bear in",
    "start": "339400",
    "end": "345360"
  },
  {
    "text": "mind when sort of thinking about token token security obviously you got your groups your user but you also got things",
    "start": "345360",
    "end": "351479"
  },
  {
    "text": "like your token ID which is a unique 64-bit number it's basically an incrementing number which is assigned to",
    "start": "351479",
    "end": "358479"
  },
  {
    "text": "each token it's only Al unique but that's all that matters counterpart to that you have the",
    "start": "358479",
    "end": "364639"
  },
  {
    "text": "parent token ID and this is used sometimes for security decisions and just reflects say when you you're doing",
    "start": "364639",
    "end": "370360"
  },
  {
    "text": "a filtered token reflects which token you created that token from and then",
    "start": "370360",
    "end": "375520"
  },
  {
    "text": "various other sort of things in there now in common with all um kernel",
    "start": "375520",
    "end": "383280"
  },
  {
    "text": "objects or pretty much all kernel objects you can actually access it from user mode there are system calls to get",
    "start": "383280",
    "end": "390199"
  },
  {
    "text": "hold of access tokens and manipulate them so when you do that you get hold of",
    "start": "390199",
    "end": "395840"
  },
  {
    "text": "a handle to that kernel object because obviously user mode can't talk to it appointed directly and it has certain",
    "start": "395840",
    "end": "401840"
  },
  {
    "text": "access rights which you can get access to and these are sort of the important ones to bear in mind when you're you're",
    "start": "401840",
    "end": "408000"
  },
  {
    "text": "sort of looking at token work things like can I duplicate the token can I assign it as a a new token for a new",
    "start": "408000",
    "end": "414840"
  },
  {
    "text": "process or can I impersonate that token and if you don't have the rights then",
    "start": "414840",
    "end": "420599"
  },
  {
    "text": "you can't actually perform that action and that can become quite important for certain sort of um",
    "start": "420599",
    "end": "428160"
  },
  {
    "text": "events now I categorized four sort of types of tokens but of course that's",
    "start": "428680",
    "end": "434800"
  },
  {
    "text": "still not the end of end of the story there's actually two types of each type of token um they're just simple values",
    "start": "434800",
    "end": "442720"
  },
  {
    "text": "which are part of the token structure itself and the first type is the primary token this is the token you assign to to",
    "start": "442720",
    "end": "449840"
  },
  {
    "text": "a process the main token for that process the other token is impersonation",
    "start": "449840",
    "end": "455440"
  },
  {
    "text": "tokens and impersonation tokens are used to allow for impersonating another user",
    "start": "455440",
    "end": "461800"
  },
  {
    "text": "and you can think of impersonation in the sort of context of a a secure service like a high privileged service",
    "start": "461800",
    "end": "467800"
  },
  {
    "text": "may want to do something on behalf of that user which is calling it which will probably be just a normal user now it",
    "start": "467800",
    "end": "474120"
  },
  {
    "text": "could go through some convoluted process pulling out your username manually verifying you're allowed to access the",
    "start": "474120",
    "end": "480479"
  },
  {
    "text": "resource but it'd be far easier to just actually say I'm going to pretend to be you for a few minutes or a few seconds",
    "start": "480479",
    "end": "488520"
  },
  {
    "text": "and I'm going to perform those actions as if I was you and this is where impersonation tokens come in they're",
    "start": "488520",
    "end": "494759"
  },
  {
    "text": "assigned to a a single thread so when you're running in that thread it can potentially perform any action that that",
    "start": "494759",
    "end": "501840"
  },
  {
    "text": "user would normally be a able to do and the impersonation token when set actually takes Primacy over the primary",
    "start": "501840",
    "end": "507919"
  },
  {
    "text": "token so it will actually ignore your current",
    "start": "507919",
    "end": "512839"
  },
  {
    "start": "512000",
    "end": "512000"
  },
  {
    "text": "token now impersonation tokens then have four kind of categories of of token so",
    "start": "513320",
    "end": "519959"
  },
  {
    "text": "we've got even more tokens and this is related to the impersonation level and this is something which basically sort",
    "start": "519959",
    "end": "526160"
  },
  {
    "text": "of um determines what you're allowed to do with that token so the top two delegate delegation",
    "start": "526160",
    "end": "533720"
  },
  {
    "text": "and impersonation are from a local perspective exactly the same thing there's no actual difference between",
    "start": "533720",
    "end": "539440"
  },
  {
    "text": "between the two but what actually happens is if you've got delegation or impersonation level you can pretend to",
    "start": "539440",
    "end": "546279"
  },
  {
    "text": "be that user from security perspective however if you've got less than that if you got say identification",
    "start": "546279",
    "end": "552959"
  },
  {
    "text": "level all you can do is sort of read out the information about that that user and",
    "start": "552959",
    "end": "558680"
  },
  {
    "text": "that token but you can't actually use it for security work you can't open a file",
    "start": "558680",
    "end": "563880"
  },
  {
    "text": "under that user's context it just won't allow you to do it now the the reason that there is a",
    "start": "563880",
    "end": "569560"
  },
  {
    "text": "between delegation and impersonation but not locally is delegation is used for allowing delegating your credentials to",
    "start": "569560",
    "end": "574839"
  },
  {
    "text": "remote systems but you have to set that up you're usually in a domain so we don't actually have to care about",
    "start": "574839",
    "end": "581160"
  },
  {
    "text": "it now when you want to convert between a primary token and an impersonation token one thing you can do is is",
    "start": "581399",
    "end": "587560"
  },
  {
    "text": "duplicate that token and there's a system call to do this for you um you need the token duplicate access right",
    "start": "587560",
    "end": "594079"
  },
  {
    "text": "but one thing you can do if you have access to a primary token you can always convert it to an equivalent",
    "start": "594079",
    "end": "599600"
  },
  {
    "text": "impersonation token however for security reasons you can't convert back unless",
    "start": "599600",
    "end": "606000"
  },
  {
    "text": "the level is greater or equal to impersonate and you can kind of understand why if you could convert an identification token back then you could",
    "start": "606000",
    "end": "613959"
  },
  {
    "text": "potentially create a new process as that user and pretend to be that user and you don't want that to",
    "start": "613959",
    "end": "619680"
  },
  {
    "text": "happen and also each new token you get gets created with a new unique identifier so it's worth keeping track",
    "start": "619680",
    "end": "626720"
  },
  {
    "text": "of that so you can set it in various ious ways there's a direct setting mechanism sort of an implic explicit",
    "start": "626720",
    "end": "633360"
  },
  {
    "text": "setting where you actually have a handle to a thre uh to a token and you say set",
    "start": "633360",
    "end": "638480"
  },
  {
    "text": "this token on this thread but there's also indirect mechanisms so this is where effectively",
    "start": "638480",
    "end": "644240"
  },
  {
    "text": "the konel has some sort of reference to a security context say a named pipe",
    "start": "644240",
    "end": "650680"
  },
  {
    "text": "client or a RPC client and you say I want to impersonate the person who called my service and so that this",
    "start": "650680",
    "end": "657480"
  },
  {
    "text": "allows you to sort of um Transit security credentials between two different processes and then the kernel",
    "start": "657480",
    "end": "663519"
  },
  {
    "text": "has a few extra functions to do basically the same thing now it would be a real problem if",
    "start": "663519",
    "end": "671720"
  },
  {
    "text": "normal users could impersonate any other user if they just had a handled a token they could pretend to be local system",
    "start": "671720",
    "end": "678200"
  },
  {
    "text": "that would be bad so there is actually some security involved so prior to Windows 2000 this thing didn't really",
    "start": "678200",
    "end": "684240"
  },
  {
    "text": "exist but after that a new privilege was added impersonate privilege and unless",
    "start": "684240",
    "end": "689880"
  },
  {
    "text": "you have that you're very restricted on what type of token you can impersonate",
    "start": "689880",
    "end": "695720"
  },
  {
    "text": "specifically you can't impersonate a token which has a higher Integrity level than you are because that would be a",
    "start": "695720",
    "end": "701160"
  },
  {
    "text": "security problem you also can only impersonate a token which has the same user ID as you seems",
    "start": "701160",
    "end": "708560"
  },
  {
    "text": "reasonable but crucially it's this is not a hard fail when you call set Fred token it doesn't",
    "start": "708560",
    "end": "715480"
  },
  {
    "text": "just say access denied instead it will actually still set the token but it will",
    "start": "715480",
    "end": "721720"
  },
  {
    "text": "recreate it and set it to identification level and this is actually quite important for the sort of topic of my",
    "start": "721720",
    "end": "729040"
  },
  {
    "text": "talk so there's a few things you can do with that you can do your normal access checks um there is system calls to do",
    "start": "729040",
    "end": "735199"
  },
  {
    "text": "access checks which work with identification tokens but in the kernel it should never ever treat an",
    "start": "735199",
    "end": "740519"
  },
  {
    "text": "identification token as valid so this is why I call it social",
    "start": "740519",
    "end": "745800"
  },
  {
    "text": "engineering effectively you are taking it's really easy to get hold of this identification token for all intensive",
    "start": "745800",
    "end": "752760"
  },
  {
    "text": "purposes and from a kernel perspective it looks almost exactly the same is",
    "start": "752760",
    "end": "758720"
  },
  {
    "text": "there like only two bits difference between a a actual valid impersonation",
    "start": "758720",
    "end": "764040"
  },
  {
    "text": "token and an identification token so if you can get a hold of these tokens maybe",
    "start": "764040",
    "end": "769480"
  },
  {
    "text": "you can actually pretend to be someone you're not and if the gatekeeper the guy",
    "start": "769480",
    "end": "774560"
  },
  {
    "text": "in the Kel who's actually like verifying your identity doesn't check correctly",
    "start": "774560",
    "end": "779800"
  },
  {
    "text": "your token maybe you can do something more serious okay so if you need to actually",
    "start": "779800",
    "end": "786079"
  },
  {
    "text": "exploit token vulnerabilities the first thing you need to do is be able to capture them in the first place and that",
    "start": "786079",
    "end": "791920"
  },
  {
    "text": "might seem actually quite a difficult thing to do but it turns out it's actually pretty easy you can go the log on user route so",
    "start": "791920",
    "end": "798839"
  },
  {
    "text": "there's a function to log on a user if you know their password you can just log them on but of course if you do that you already know their password and you can",
    "start": "798839",
    "end": "804959"
  },
  {
    "text": "probably do more serious stuff if you're using UAC and your the vulnerability you find",
    "start": "804959",
    "end": "811399"
  },
  {
    "text": "requires an administrated token there's a system call to just get you back an identification level impersonation token",
    "start": "811399",
    "end": "818519"
  },
  {
    "text": "for the UAC user and I'll just return you and you can do that from any privilege level even like sort of super",
    "start": "818519",
    "end": "824839"
  },
  {
    "text": "sbox Chrome renderer you can still call this system call and get back a token which represents the",
    "start": "824839",
    "end": "832279"
  },
  {
    "start": "832000",
    "end": "832000"
  },
  {
    "text": "admin a classic attack is named pipes so if You' read any of the work of things",
    "start": "832279",
    "end": "837680"
  },
  {
    "text": "like um token kidnapp or um access to um like pre Windows 2000",
    "start": "837680",
    "end": "843759"
  },
  {
    "text": "privilege escalation name pipes come up quite a lot because they're really easy and default by default will always",
    "start": "843759",
    "end": "851120"
  },
  {
    "text": "open like they'll usually allow you to get a a impersonation token of them if someone at a higher privilege level or a",
    "start": "851120",
    "end": "858120"
  },
  {
    "text": "different user opens that named pipen point so we can get say Windows Defender",
    "start": "858120",
    "end": "863360"
  },
  {
    "text": "to scan our pipe name it doesn't know any better it calls it as local system",
    "start": "863360",
    "end": "868399"
  },
  {
    "text": "and we've got our loal system identification token similar with RPC and dcom dcom",
    "start": "868399",
    "end": "874600"
  },
  {
    "text": "especially because it has loads of callback mechanisms and there's a function to get impersonation there um",
    "start": "874600",
    "end": "881240"
  },
  {
    "start": "880000",
    "end": "880000"
  },
  {
    "text": "another interesting one is nlm negotiation nlm it has system calls on the on the",
    "start": "881240",
    "end": "887040"
  },
  {
    "text": "machine to negotiate a impersonation token if you can get a local service to",
    "start": "887040",
    "end": "892440"
  },
  {
    "text": "negotiate say webdav to you you can then do ntlm and you can get a local system",
    "start": "892440",
    "end": "898120"
  },
  {
    "text": "token that way and finally my sort of my favorite one like just because it seems so ridiculous",
    "start": "898120",
    "end": "905120"
  },
  {
    "start": "900000",
    "end": "900000"
  },
  {
    "text": "is there's a there's a system called services for user and this is kind of for Kerber Ro support it basically",
    "start": "905120",
    "end": "911320"
  },
  {
    "text": "allows you to create like Services Under certain user accounts and it turns out at least on Windows 8.1 you can call a",
    "start": "911320",
    "end": "918399"
  },
  {
    "text": "function to create this specify any local or even domain user and it will",
    "start": "918399",
    "end": "923800"
  },
  {
    "text": "hand you back an identification token of that user kind that's kind of useful of",
    "start": "923800",
    "end": "929319"
  },
  {
    "text": "course you can't get a full impersonation token but an identification token could be could be",
    "start": "929319",
    "end": "935079"
  },
  {
    "text": "sufficient so I'm going to show you a little demo of a tool I've written which",
    "start": "935079",
    "end": "940440"
  },
  {
    "text": "I hope to uh release after the conference um which actually just does a",
    "start": "940440",
    "end": "946600"
  },
  {
    "text": "few sort of like playing around with tokens viewing token information so let me",
    "start": "946600",
    "end": "952399"
  },
  {
    "text": "just run that yeah okay",
    "start": "952399",
    "end": "959399"
  },
  {
    "text": "okay so for example you can look at just like processes so there's loads of like",
    "start": "959399",
    "end": "965360"
  },
  {
    "text": "existing processes you can open and it will show you like obviously your your user Sid your",
    "start": "965360",
    "end": "971920"
  },
  {
    "text": "token type your so in this case it's obviously primary token because it's coming off a",
    "start": "971920",
    "end": "977959"
  },
  {
    "text": "process oops but obviously we want to do sort of fun stuff like this so we can I've",
    "start": "978480",
    "end": "985920"
  },
  {
    "text": "enabled the administrator account on the local machine I don't know his password because I'm not the administrator",
    "start": "985920",
    "end": "991240"
  },
  {
    "text": "obviously so as long as I can type his name correctly I should be able to create",
    "start": "991240",
    "end": "997600"
  },
  {
    "text": "that and I get the local administrator with an identification token it just says here",
    "start": "997600",
    "end": "1003839"
  },
  {
    "text": "we go have your token and so there's a few others for",
    "start": "1003839",
    "end": "1009839"
  },
  {
    "text": "example if I want to get a local system token I can use the Comm reflection tricks basically one of them I use is um",
    "start": "1009839",
    "end": "1016959"
  },
  {
    "text": "the bit service which is used for HTP transfers you click that and you get",
    "start": "1016959",
    "end": "1022040"
  },
  {
    "text": "obviously local system identification token out of it and using common reflection and stuff",
    "start": "1022040",
    "end": "1028600"
  },
  {
    "text": "okay so now let's actually go into sort of examples of vulnerabilities I've found",
    "start": "1028600",
    "end": "1034480"
  },
  {
    "text": "or other people have found which you can actually if you if you can find these types of bugs you can actually exploit",
    "start": "1034480",
    "end": "1041038"
  },
  {
    "text": "them using this fake ID this this identification token tricks",
    "start": "1041039",
    "end": "1047199"
  },
  {
    "start": "1046000",
    "end": "1046000"
  },
  {
    "text": "oops so the first thing before you can actually look for these bugs is is understand how kernel mode code and the",
    "start": "1047199",
    "end": "1053440"
  },
  {
    "text": "kernel itself interacts with tokens so there's various process and frad manager calls such as reference primary token",
    "start": "1053440",
    "end": "1059880"
  },
  {
    "text": "reference impersonation token and they take like a pointed to the process or pointed to a thread and return you back",
    "start": "1059880",
    "end": "1067039"
  },
  {
    "text": "that information there's also system calls which are supposed to be used from user mode but can be used from kernel",
    "start": "1067039",
    "end": "1072200"
  },
  {
    "text": "mode if you like and if you're the kernel itself obviously this isn't recommended if you're a driver you can",
    "start": "1072200",
    "end": "1077320"
  },
  {
    "text": "actually just access the the token data directly via its um thread pointer or",
    "start": "1077320",
    "end": "1083120"
  },
  {
    "text": "its its process pointer and finally the io manager will actually capture uh the security context",
    "start": "1083120",
    "end": "1090720"
  },
  {
    "text": "of which it's being called when you try and open say a device or a file and it will actually get hand that to you as as",
    "start": "1090720",
    "end": "1096559"
  },
  {
    "text": "part of the um ILP um crate call so this is the first probably most",
    "start": "1096559",
    "end": "1104200"
  },
  {
    "start": "1101000",
    "end": "1101000"
  },
  {
    "text": "obvious bug you can think of we've got this identification mechanism um we've got this this impersonation level what",
    "start": "1104200",
    "end": "1111559"
  },
  {
    "text": "if um the code forgets to check the impersonation level that would be an",
    "start": "1111559",
    "end": "1117559"
  },
  {
    "text": "obvious bug okay so in this case when you actually do an SE access",
    "start": "1117559",
    "end": "1124159"
  },
  {
    "text": "check there's a special structure called a security subject context which is normally used which contains both uh a",
    "start": "1124159",
    "end": "1130679"
  },
  {
    "text": "reference to the the current Fred token if there is one or it's null or the primary token and the primary token",
    "start": "1130679",
    "end": "1137000"
  },
  {
    "text": "should always be there now now as part of the the sort of n uh",
    "start": "1137000",
    "end": "1143000"
  },
  {
    "text": "driver development kit headers there's then a Define called ET query subject context token which just does a simple",
    "start": "1143000",
    "end": "1149919"
  },
  {
    "text": "sort of uh if statement it says if we got a client token return client token",
    "start": "1149919",
    "end": "1155200"
  },
  {
    "text": "otherwise return primary token but the trouble with this is it it really hides the sort of context of the um the actual",
    "start": "1155200",
    "end": "1164440"
  },
  {
    "text": "token operation which token you're looking at so if code just does this blind blly and it may forget that it",
    "start": "1164440",
    "end": "1171640"
  },
  {
    "text": "could actually be getting the impersonation token not the primary token and therefore needs to check the",
    "start": "1171640",
    "end": "1177400"
  },
  {
    "text": "impersonation level and there's a few variants of this using some of the other functions you",
    "start": "1177400",
    "end": "1182640"
  },
  {
    "text": "can uh you can find but they're um basically the same bug so a real example was this so this",
    "start": "1182640",
    "end": "1190200"
  },
  {
    "text": "is in the application help cache um it was actually a Windows 8.1 specific vulnerability or Windows 8 specific",
    "start": "1190200",
    "end": "1196720"
  },
  {
    "text": "vulnerability and it was doing a check to whether the current caller was an",
    "start": "1196720",
    "end": "1201919"
  },
  {
    "text": "administrator or it was local system and literally all it did was it got the impersonation token and forgot to check",
    "start": "1201919",
    "end": "1209360"
  },
  {
    "text": "the impersonation level so as long as I could get a local system token at an identification level which I've just",
    "start": "1209360",
    "end": "1215760"
  },
  {
    "text": "demonstrated I can do very easily you could pretend to be an administrator and",
    "start": "1215760",
    "end": "1221400"
  },
  {
    "text": "that allowed you to then fill up the application uh compatibility cach with some malicious uh entries which then",
    "start": "1221400",
    "end": "1228240"
  },
  {
    "text": "allowed you to do a sort of privilege escalation attack now there was a second function",
    "start": "1228240",
    "end": "1233960"
  },
  {
    "text": "there this SE token is admin and actually turns out that prior to Windows 8 this also does not actually do any",
    "start": "1233960",
    "end": "1241159"
  },
  {
    "text": "verification of the token you pass it so if you pass an identification token to this function and this isn't documented",
    "start": "1241159",
    "end": "1247960"
  },
  {
    "text": "mind it will actually say yeah well it has the admin group so it must be an",
    "start": "1247960",
    "end": "1254080"
  },
  {
    "text": "administrator in Windows 8.1 possibly is something to do with the app container support it actually does a verification",
    "start": "1254080",
    "end": "1260039"
  },
  {
    "text": "check on the impersonation level now so this would be vulnerable on win 7 but not on win",
    "start": "1260039",
    "end": "1266360"
  },
  {
    "start": "1266000",
    "end": "1266000"
  },
  {
    "text": "8 now another bug is related to that security subject context in a different",
    "start": "1266360",
    "end": "1271799"
  },
  {
    "text": "way I showed at the start there was like a token uh class token structure which",
    "start": "1271799",
    "end": "1277080"
  },
  {
    "text": "represented the the token kernel object now that's actually obviously internal to Windows internal to the kernel and is",
    "start": "1277080",
    "end": "1283720"
  },
  {
    "text": "not exposed through the development kit at all instead it refers to access",
    "start": "1283720",
    "end": "1289600"
  },
  {
    "text": "tokens us this P access token pointer and it's just an opaque pointer at this point but security subject context isn't",
    "start": "1289600",
    "end": "1296039"
  },
  {
    "text": "an opaque pointer it has to be a defined structure because you have to actually access its",
    "start": "1296039",
    "end": "1302200"
  },
  {
    "text": "members so if you're trying to call a function like SE access check and you need this subject context but you've",
    "start": "1302200",
    "end": "1308320"
  },
  {
    "text": "only got a handle to a token maybe you'll just go well we can just munge them in and it'll be fine like it all",
    "start": "1308320",
    "end": "1315279"
  },
  {
    "text": "work so if you set the primary token here it it basically screws SE access checks",
    "start": "1315279",
    "end": "1321799"
  },
  {
    "text": "logic it can't it doesn't it never checks the impersonation level because it never thinks you're actually",
    "start": "1321799",
    "end": "1327760"
  },
  {
    "text": "impersonating and because the two tokens are almost exactly the same no one ever then verifies that you've not passed it",
    "start": "1327760",
    "end": "1334240"
  },
  {
    "text": "in impersonation token incorrectly so you can bypass it that so this is a simple example in Windows 8 kernel um",
    "start": "1334240",
    "end": "1341919"
  },
  {
    "text": "it's allowing access to an atom uh if you're running in a low box and it just crafts a subject context and does an",
    "start": "1341919",
    "end": "1348840"
  },
  {
    "text": "access check and potentially you can bypass this I'm not actually G I'm not really I've not reported this to",
    "start": "1348840",
    "end": "1354640"
  },
  {
    "text": "Microsoft cuz I don't think there's actually a security implication this is something to bear in mind with these bugs just because you",
    "start": "1354640",
    "end": "1360679"
  },
  {
    "text": "can bypass a check doesn't mean you can actually do something useful with",
    "start": "1360679",
    "end": "1366200"
  },
  {
    "start": "1366000",
    "end": "1366000"
  },
  {
    "text": "it so a few others so system threed impersonation I showed that impersonation works if you um have",
    "start": "1366559",
    "end": "1374080"
  },
  {
    "text": "impersonation privilege um but if you uh if you the code spins up say a worker",
    "start": "1374080",
    "end": "1380240"
  },
  {
    "text": "Fred in the system process that implicitly has impersonate privilege so you can impersonate tokens that you",
    "start": "1380240",
    "end": "1385400"
  },
  {
    "text": "shouldn't normally be able to access and potentially get a system worker thread to do actions under say local",
    "start": "1385400",
    "end": "1393640"
  },
  {
    "start": "1393000",
    "end": "1393000"
  },
  {
    "text": "system and by far I think one of the most interesting bugs I found was what I",
    "start": "1394360",
    "end": "1399919"
  },
  {
    "text": "refer to as leaky tokens so leaky so a token as I've said is just another kernel object there's nothing stopping",
    "start": "1399919",
    "end": "1407039"
  },
  {
    "text": "some other kernel component getting a reference to the pointer to that kernel object and handing back",
    "start": "1407039",
    "end": "1413159"
  },
  {
    "text": "arbitary to arbitary handles to it which shouldn't normally happen but it obviously can and if you",
    "start": "1413159",
    "end": "1420760"
  },
  {
    "text": "can find this you can potentially get access to tokens you really should not be able to access so an example I found",
    "start": "1420760",
    "end": "1427120"
  },
  {
    "text": "in Wind 32k um in Windows I think it was Windows",
    "start": "1427120",
    "end": "1432520"
  },
  {
    "text": "8.1 they introduced this new system core and let's face it wi 32k needs all all",
    "start": "1432520",
    "end": "1437720"
  },
  {
    "text": "the more vulnerable system calls it can get because it doesn't have enough already um it it has this user get clipboard",
    "start": "1437720",
    "end": "1445120"
  },
  {
    "text": "token call and what it does is the last person the last process to write to the",
    "start": "1445120",
    "end": "1450360"
  },
  {
    "text": "clipboard it will capture its subject context it will capture the access token used in that scenario and then another",
    "start": "1450360",
    "end": "1457679"
  },
  {
    "text": "process can ask for it back and get a handle to it and this has an interest",
    "start": "1457679",
    "end": "1462799"
  },
  {
    "text": "some interesting implications because",
    "start": "1462799",
    "end": "1468559"
  },
  {
    "text": "the way in which the Integrity level mechanism works I can't open a process if I have a lower Integrity level than",
    "start": "1468559",
    "end": "1475159"
  },
  {
    "text": "the process has so I can't read out its primary token and that's just a",
    "start": "1475159",
    "end": "1480640"
  },
  {
    "text": "byproduct of processes you're not allowed read accesses to processes however you can get read access to",
    "start": "1480640",
    "end": "1486919"
  },
  {
    "text": "tokens because no one assumed you can get access to a token outside of opening the process in the first place so you",
    "start": "1486919",
    "end": "1494520"
  },
  {
    "text": "can open it for read access and read access gives you token duplicate access that's right at which point you can",
    "start": "1494520",
    "end": "1500000"
  },
  {
    "text": "convert this into any other token you like gain other any other privileges if you lower the ilil you can then do some",
    "start": "1500000",
    "end": "1505720"
  },
  {
    "text": "fun stuff impersonate that token and and do some um privilege",
    "start": "1505720",
    "end": "1510919"
  },
  {
    "text": "escalation so I'm going to quickly demo this",
    "start": "1510919",
    "end": "1515960"
  },
  {
    "text": "um so if I bring up say notepad and just type some stuff in and",
    "start": "1516080",
    "end": "1522200"
  },
  {
    "text": "copy it so when 32k has now captured notepads",
    "start": "1522200",
    "end": "1527480"
  },
  {
    "text": "primary token and I can see that by going into here and I've just got a button to to bring that up so that's",
    "start": "1527480",
    "end": "1534320"
  },
  {
    "text": "that you can trust me that is notepads primary token but I itself doesn't sound",
    "start": "1534320",
    "end": "1539840"
  },
  {
    "text": "actually that useful um but what if for example we had um UAC",
    "start": "1539840",
    "end": "1546760"
  },
  {
    "text": "getting involved so let's say we close that down yep let's create notepad as",
    "start": "1546760",
    "end": "1554559"
  },
  {
    "text": "administrator",
    "start": "1554559",
    "end": "1557559"
  },
  {
    "text": "okay so we type some stuff you copy that and we click this",
    "start": "1560919",
    "end": "1567960"
  },
  {
    "text": "again and we now see we have the primary token of the administrator because it's",
    "start": "1567960",
    "end": "1574159"
  },
  {
    "text": "running at high integrity level and we actually we can see in the groups that it's got administrator group okay and",
    "start": "1574159",
    "end": "1580279"
  },
  {
    "text": "this is actually like the the actual primary token so we got a reference to a administrator's primary token which we",
    "start": "1580279",
    "end": "1585520"
  },
  {
    "text": "shouldn't normally be able to do but we can't obviously use that say for",
    "start": "1585520",
    "end": "1590919"
  },
  {
    "text": "example we have this so I've just got a little sort of test it impersonates the the token tries to create a file if I",
    "start": "1590919",
    "end": "1598200"
  },
  {
    "text": "try that it's going to tell me access tonight or in this case you haven't got the right required impersonation level",
    "start": "1598200",
    "end": "1604200"
  },
  {
    "text": "because we failed that can I assign this impersonation token test and so it's it's dropped it back to an",
    "start": "1604200",
    "end": "1610200"
  },
  {
    "text": "identification token however we can duplicate it we",
    "start": "1610200",
    "end": "1616000"
  },
  {
    "text": "have read access so we can actually change this token so we can create an",
    "start": "1616000",
    "end": "1621080"
  },
  {
    "text": "impersonation token but change the ilil to medium and based on our security the",
    "start": "1621080",
    "end": "1626679"
  },
  {
    "text": "only thing we need to do is bypass that because the user still the same user because this is UAC so we duplicate that",
    "start": "1626679",
    "end": "1633440"
  },
  {
    "text": "we've now we can see it says medium impersonation now if we go into this",
    "start": "1633440",
    "end": "1638840"
  },
  {
    "text": "operation um so hello black hat we can click create and we have",
    "start": "1638840",
    "end": "1646320"
  },
  {
    "text": "success because we we've impersonated that token at medium which is which is fine",
    "start": "1646320",
    "end": "1654159"
  },
  {
    "text": "and we've got the administrators group so we should have test. text and that actually",
    "start": "1654159",
    "end": "1660760"
  },
  {
    "text": "they've not so that Microsoft did fix this but only from if you're going from low Integrity to medium Integrity not",
    "start": "1660760",
    "end": "1667960"
  },
  {
    "text": "from medium to high because it's a UAC bypass and therefore it's not going to get",
    "start": "1667960",
    "end": "1673360"
  },
  {
    "text": "fixed that's why I can do it on Windows 10 us see",
    "start": "1673360",
    "end": "1678840"
  },
  {
    "start": "1677000",
    "end": "1677000"
  },
  {
    "text": "so there there's there's there's many more sort of different types of bugs you can find if you actually go looking and",
    "start": "1679200",
    "end": "1685320"
  },
  {
    "text": "this one was something related to duplication in the kernel when you call n duplicate token to to duplicate a new",
    "start": "1685320",
    "end": "1693080"
  },
  {
    "text": "copy of a token um it does a check to make sure that the token you're you're",
    "start": "1693080",
    "end": "1698440"
  },
  {
    "text": "passing is valid to convert into that other token type so this comes down to the you can't take an identification",
    "start": "1698440",
    "end": "1705080"
  },
  {
    "text": "token convert to a primary token but if kernel code calls the internal uh",
    "start": "1705080",
    "end": "1712240"
  },
  {
    "text": "duplicate to duplicate token function SCP duplicate token that check is",
    "start": "1712240",
    "end": "1717279"
  },
  {
    "text": "bypassed this is only in like the sort of user level sort of like um exposed functionality but if the kernel does it",
    "start": "1717279",
    "end": "1724159"
  },
  {
    "text": "it can convert it to any token you like so a real world example is this one",
    "start": "1724159",
    "end": "1730120"
  },
  {
    "text": "it's um abusing create processes user so create processes user allows you to create a new process with a different",
    "start": "1730120",
    "end": "1736559"
  },
  {
    "text": "primary token and if you read the documentation it explicitly pretty much says you need a handle to the primary",
    "start": "1736559",
    "end": "1741960"
  },
  {
    "text": "token um in order to create this new process so if you actually go digging it",
    "start": "1741960",
    "end": "1748039"
  },
  {
    "text": "turns out that when it opens the handle you just need token assigned primary privilege and strangely enough even",
    "start": "1748039",
    "end": "1754559"
  },
  {
    "text": "though you've got an impers say you've got an identification token even though it's not a primary token you can still",
    "start": "1754559",
    "end": "1760799"
  },
  {
    "text": "get token assigned primary privileged in in your handle which so you can bypass",
    "start": "1760799",
    "end": "1766480"
  },
  {
    "text": "this check and then when it actually goes to create it it calls this internal duplicate",
    "start": "1766480",
    "end": "1772840"
  },
  {
    "text": "function but no one ever verified that this token was compatible to convert",
    "start": "1772840",
    "end": "1778440"
  },
  {
    "text": "back into a primary token so we've got a problem we can potentially spawn",
    "start": "1778440",
    "end": "1783720"
  },
  {
    "text": "processes using only identification",
    "start": "1783720",
    "end": "1788559"
  },
  {
    "text": "tokens now the actual limit of exploitability depends on who you are if you're a system service you've probably",
    "start": "1788799",
    "end": "1795440"
  },
  {
    "text": "got um assigned primary token privilege that means you're going to assign any token so you can use it in the old sort",
    "start": "1795440",
    "end": "1802200"
  },
  {
    "text": "of token kidnapping tricks you get an identification token you can't impersonate it to elevate to that user",
    "start": "1802200",
    "end": "1808480"
  },
  {
    "text": "but you can create a new process as local system but you can also do it from",
    "start": "1808480",
    "end": "1813760"
  },
  {
    "text": "lower privilege processes and to understand why you have to kind of see how it determines whether",
    "start": "1813760",
    "end": "1820279"
  },
  {
    "text": "you're allowed to assign a a token or not to a process and it's actually based on",
    "start": "1820279",
    "end": "1825960"
  },
  {
    "text": "either a parental or sibling relationship ship between the tokens when you create say a filtered token the",
    "start": "1825960",
    "end": "1832880"
  },
  {
    "text": "uh the token ID is copied into the new tokens parent token ID and if you've got",
    "start": "1832880",
    "end": "1838240"
  },
  {
    "text": "that relationship between the current process token and the new token you're trying to assign it will allow it",
    "start": "1838240",
    "end": "1844159"
  },
  {
    "text": "otherwise if it's a sibling token if it's both crafted from the same token",
    "start": "1844159",
    "end": "1849960"
  },
  {
    "text": "and within the same authentication ID so the same login session it will also allow it and this is the case for",
    "start": "1849960",
    "end": "1855760"
  },
  {
    "text": "duplicate token or create low boox token to and the low boox token thing is quite important because what it means is you",
    "start": "1855760",
    "end": "1862639"
  },
  {
    "text": "can use it to effectively break out of enhanced protective mode in iie because iie um uses the low boox token to secure",
    "start": "1862639",
    "end": "1870639"
  },
  {
    "text": "its its um its rendering processes if you can do things like a",
    "start": "1870639",
    "end": "1875960"
  },
  {
    "text": "named pipe attack you can get the identification token for the normal user and as far as the kernel is concerned",
    "start": "1875960",
    "end": "1883080"
  },
  {
    "text": "the normal user is the normal user token isn't is a sibling of the IE EPM low boox",
    "start": "1883080",
    "end": "1891399"
  },
  {
    "text": "token so even though you've only got identification level you can create a new process and the only thing you got",
    "start": "1891399",
    "end": "1897159"
  },
  {
    "text": "to do is drop the Integrity level so eff you get a new process running at low but",
    "start": "1897159",
    "end": "1902399"
  },
  {
    "text": "outside of EPM and Microsoft again don't particularly consider the equivalent of",
    "start": "1902399",
    "end": "1907480"
  },
  {
    "text": "IE protective mode which isn't generally considered to be a security boundary so effectively you can get out of a partial",
    "start": "1907480",
    "end": "1913399"
  },
  {
    "text": "break of the sandbox and then you can potentially do something else to break fully break out the sandbox",
    "start": "1913399",
    "end": "1919518"
  },
  {
    "text": "now one of the sort of more surprising um bugs is relating to sort of timer check time of use because impersonation",
    "start": "1921840",
    "end": "1929279"
  },
  {
    "text": "tokens are assigned to Freds but unless that Fred object is locked you can change the token while",
    "start": "1929279",
    "end": "1936679"
  },
  {
    "text": "the colel is doing operations so you can get it to do one check and then actually",
    "start": "1936679",
    "end": "1942679"
  },
  {
    "text": "change the token in another thread and then get it to do another check and this can be while it's still running inside",
    "start": "1942679",
    "end": "1948159"
  },
  {
    "text": "kernel mode um and it's kind of a a simple simple trick to do you can also",
    "start": "1948159",
    "end": "1953960"
  },
  {
    "text": "do it in scenarios such as the io manager so the io manager only verifies the security of the caller when you open",
    "start": "1953960",
    "end": "1961519"
  },
  {
    "text": "the file not when you do things like device IO control so you can actually open a file with one user context call",
    "start": "1961519",
    "end": "1968639"
  },
  {
    "text": "device IO control with a different user context and it gets confused and an example of that is this one in the",
    "start": "1968639",
    "end": "1975399"
  },
  {
    "text": "webdav driver which basically allows you to um access functionality",
    "start": "1975399",
    "end": "1982240"
  },
  {
    "text": "which you shouldn't normally be able to do and all you need to do again is get a",
    "start": "1982240",
    "end": "1987360"
  },
  {
    "text": "local system impersonation token identification token and that's all you need to do well it make it sound so",
    "start": "1987360",
    "end": "1995320"
  },
  {
    "text": "simple so yeah because webdav is actually more implemented in user mode",
    "start": "1995320",
    "end": "2000840"
  },
  {
    "text": "the kernel mode component actually only acts as a bridge between UNCC pass UNC",
    "start": "2000840",
    "end": "2006600"
  },
  {
    "text": "shares and and the user mode service which is actually doing things like the web requests and things like that so",
    "start": "2006600",
    "end": "2013399"
  },
  {
    "text": "this is why you can actually abuse this and pretend to be the webd service um",
    "start": "2013399",
    "end": "2018919"
  },
  {
    "text": "and get it to do things that the windows kernel doesn't actually expect to be able to",
    "start": "2018919",
    "end": "2025240"
  },
  {
    "text": "do and I think the final actual bug is be very mindful if you see any kernel",
    "start": "2025320",
    "end": "2031919"
  },
  {
    "text": "code opening um Fred tokens using the system core variance so this two",
    "start": "2031919",
    "end": "2038000"
  },
  {
    "text": "versions of these system calls there's the normal open frad token and then there the open Fred token ex and the ex",
    "start": "2038000",
    "end": "2045279"
  },
  {
    "text": "variant I think was introduced in Windows 2000 because there was actually a really fundamental bug from a kernel",
    "start": "2045279",
    "end": "2050679"
  },
  {
    "text": "perspective in these functions and that bug was basically there's no way of specifying you want to open a kernel",
    "start": "2050679",
    "end": "2058000"
  },
  {
    "text": "handle instead of a user handle so if you find a driver which opens a token",
    "start": "2058000",
    "end": "2064158"
  },
  {
    "text": "using one of these calls inside the context of your process it will create a",
    "start": "2064159",
    "end": "2069599"
  },
  {
    "text": "handle to that token which you may not normally be able to access because the ZW system calls affectively bypass",
    "start": "2069599",
    "end": "2078000"
  },
  {
    "text": "security now you shouldn't see them but I actually did um a runr of so what what",
    "start": "2078000",
    "end": "2085158"
  },
  {
    "text": "I actually did when I did my my research for this I actually went on virus total and I have an account on virus total",
    "start": "2085159",
    "end": "2091118"
  },
  {
    "text": "which allowed me to get say the top 10,000 Windows drivers out of varus",
    "start": "2091119",
    "end": "2096240"
  },
  {
    "text": "total obviously non- malicious I didn't want to actually look at at clearly malicious code but supposedly benign",
    "start": "2096240",
    "end": "2102359"
  },
  {
    "text": "Windows drivers and then I wrote some stat basic static analysis tools to go hunting for these function CS these sort",
    "start": "2102359",
    "end": "2108760"
  },
  {
    "text": "of U kernel interactions with tokens and quite a few uh drivers still ended up",
    "start": "2108760",
    "end": "2115119"
  },
  {
    "text": "with these tokens being there and actually trying to open tokens within user context and you shouldn't be",
    "start": "2115119",
    "end": "2120599"
  },
  {
    "text": "allowed to do it but apparently people still do",
    "start": "2120599",
    "end": "2125920"
  },
  {
    "text": "so coming towards the end I'm going to talk about some changes so obviously I",
    "start": "2127760",
    "end": "2133200"
  },
  {
    "text": "found these bugs uh as part of project zero um also at the same time somehow",
    "start": "2133200",
    "end": "2138800"
  },
  {
    "text": "coincidentally Alex escu started finding similar bugs in token handling completely like not talking to each",
    "start": "2138800",
    "end": "2145760"
  },
  {
    "text": "other about it at all and somehow came to the sort of same conclusion there was probably problems with token",
    "start": "2145760",
    "end": "2152200"
  },
  {
    "text": "handling so I think Microsoft have been doing some various fixes various changes to different components of of the",
    "start": "2152200",
    "end": "2158200"
  },
  {
    "text": "operating system in the kernel to make it a bit more robust in these sort of scenarios um so I'm just going to go",
    "start": "2158200",
    "end": "2165480"
  },
  {
    "text": "through a few things which have changed specifically mainly focusing on Windows 10 because there's some interesting",
    "start": "2165480",
    "end": "2171480"
  },
  {
    "text": "changes in there which may affect some of the sort of demonstrations I've already already",
    "start": "2171480",
    "end": "2177200"
  },
  {
    "text": "done now the first one is SE token is admin has been fixed in Windows 7 this",
    "start": "2177200",
    "end": "2183040"
  },
  {
    "text": "is something I did not expect because it's kind of a",
    "start": "2183040",
    "end": "2188240"
  },
  {
    "text": "it's like backporting like security fixes which have been in Windows 8 so they they've actually backported it now",
    "start": "2188240",
    "end": "2194040"
  },
  {
    "text": "I think it wasn't necessarily my bugs which I I sent them which uh actually",
    "start": "2194040",
    "end": "2199400"
  },
  {
    "text": "prompted them to fix it I actually found a bug in the Nvidia display driver like",
    "start": "2199400",
    "end": "2205400"
  },
  {
    "text": "that classic get the um reference the impersonation token if not reference the",
    "start": "2205400",
    "end": "2210480"
  },
  {
    "text": "primary token token is admin and basically it was using it as an access check for whether you're allowed to do",
    "start": "2210480",
    "end": "2216280"
  },
  {
    "text": "administrative functions in the driver now I'm probably I'm of the suspecting",
    "start": "2216280",
    "end": "2221480"
  },
  {
    "text": "belief that they may have influenced Microsoft more to fix this down level in Windows 7 than I probably did but that",
    "start": "2221480",
    "end": "2228240"
  },
  {
    "text": "of course is speculation now Windows 10 introduces",
    "start": "2228240",
    "end": "2235760"
  },
  {
    "start": "2232000",
    "end": "2232000"
  },
  {
    "text": "some interesting changes to the um the actual security function which determines whether you're allowed",
    "start": "2235760",
    "end": "2241640"
  },
  {
    "text": "to impersonate a token and strangely enough out of the two things they added",
    "start": "2241640",
    "end": "2246880"
  },
  {
    "text": "one of them is actually sort of almost weakening impersonation they've added new mechanisms to determine whether",
    "start": "2246880",
    "end": "2253480"
  },
  {
    "text": "you're allowed to impersonate a token or not but on the other hand there's a check in there which would actually mitigate that demonstration I actually",
    "start": "2253480",
    "end": "2260319"
  },
  {
    "text": "uh I actually showed where you could impersonate A administrative token so yeah the first one is they've added a",
    "start": "2260319",
    "end": "2266680"
  },
  {
    "text": "new capability this is either through uh a user group or a low boox token",
    "start": "2266680",
    "end": "2272560"
  },
  {
    "text": "capability Sid which determines whether you're allowed to um impersonate certain",
    "start": "2272560",
    "end": "2280440"
  },
  {
    "text": "tokens the probably the most interesting one is is the sort of the first one in that list basically it says if you've",
    "start": "2280440",
    "end": "2286599"
  },
  {
    "text": "got this group and crucially a kernel flag has been set you can impersonate any process to any",
    "start": "2286599",
    "end": "2293640"
  },
  {
    "text": "token at the same I level in the same session as you and you kind of could do",
    "start": "2293640",
    "end": "2299720"
  },
  {
    "text": "that anyway but this kind of adds a new sort of um variant that if if a different user ends up on your session",
    "start": "2299720",
    "end": "2306000"
  },
  {
    "text": "potentially you can still in person that that user but fortunately it's guarded behind the group and the only way to get",
    "start": "2306000",
    "end": "2312480"
  },
  {
    "text": "that group is to have admin access to add you to the group which allows you to potentially get admin access so it's",
    "start": "2312480",
    "end": "2318359"
  },
  {
    "text": "obviously it's not likely to be exploited but I suppose you never know if it's something which is valuable to",
    "start": "2318359",
    "end": "2325040"
  },
  {
    "text": "uh Enterprise administrator he may enable it for everyone in the domain because why not I'm sure it'll be fine",
    "start": "2325040",
    "end": "2332480"
  },
  {
    "text": "now there's a few different known ones you can do sort of um related to low boox tokens so low boox",
    "start": "2332480",
    "end": "2338359"
  },
  {
    "text": "as I say is the app container model and it allows you to effectively add capabilities to uh applications in the",
    "start": "2338359",
    "end": "2346040"
  },
  {
    "text": "Windows store which says they can actually do impersonation of certain types of tokens that's kind of",
    "start": "2346040",
    "end": "2352480"
  },
  {
    "text": "interesting but I've not actually seen this used anywhere so I'm not actually really sure why it's there yet I'm sure",
    "start": "2352480",
    "end": "2359040"
  },
  {
    "text": "at some point it will be documented or there'll be some sort of demonstration of why we're actually using this but",
    "start": "2359040",
    "end": "2365440"
  },
  {
    "text": "until that point I just don't know now the only other other difference is",
    "start": "2365440",
    "end": "2372040"
  },
  {
    "start": "2368000",
    "end": "2368000"
  },
  {
    "text": "elevated token protection so my demonstration was as long as I could get access to say the",
    "start": "2372040",
    "end": "2378800"
  },
  {
    "text": "primary token from a administ administrator level process I could",
    "start": "2378800",
    "end": "2384400"
  },
  {
    "text": "lower the IL level quite easily and impersonate that user and get admin",
    "start": "2384400",
    "end": "2390560"
  },
  {
    "text": "rights now when you get that token there's a flag which says I am the elevated token and is a function in the",
    "start": "2390560",
    "end": "2398160"
  },
  {
    "text": "kernel SE token is elevated to tell you whether an access token you've got happens to be elevated or not so",
    "start": "2398160",
    "end": "2405079"
  },
  {
    "text": "effectively all this check does is it says is is there a mismatch between the",
    "start": "2405079",
    "end": "2411720"
  },
  {
    "text": "token you're trying to impersonate and the primary token of your process and if",
    "start": "2411720",
    "end": "2416880"
  },
  {
    "text": "there is this mismatch it's going to return you privilege not held it's going to tell you you're not allowed to access",
    "start": "2416880",
    "end": "2422760"
  },
  {
    "text": "that at which point it will downgrade to an identification token but that's roughly equivalent to not allowing you",
    "start": "2422760",
    "end": "2428680"
  },
  {
    "text": "impersonation but strangely enough it's actually guarded behind a compatibility flag unless you set the",
    "start": "2428680",
    "end": "2435680"
  },
  {
    "text": "kernel flag in the registry to enable this support it will actually not protect by default that's obviously why",
    "start": "2435680",
    "end": "2442040"
  },
  {
    "text": "I could still demonstrate on Windows 10 that same attack because it's not actually on by",
    "start": "2442040",
    "end": "2447440"
  },
  {
    "text": "default but it's interesting thinking like obviously it's an interesting attack Vector but obviously it's it's",
    "start": "2447440",
    "end": "2453640"
  },
  {
    "text": "UAC UAC is not usually considered a problem security B worth defending so I",
    "start": "2453640",
    "end": "2459640"
  },
  {
    "text": "suppose it it may get turned on eventually I don't",
    "start": "2459640",
    "end": "2465078"
  },
  {
    "start": "2465000",
    "end": "2465000"
  },
  {
    "text": "know so this is the sort of end of my talk so just some sort of basic conclusions the first thing to bear in",
    "start": "2465599",
    "end": "2471880"
  },
  {
    "text": "mind is it it is Trivial to get an identification token and if you use things like services for User it's",
    "start": "2471880",
    "end": "2478079"
  },
  {
    "text": "almost trivial to get an impersonation identification token for any user on the entire domain that you're you're",
    "start": "2478079",
    "end": "2484720"
  },
  {
    "text": "connected to that's that's pretty pretty powerful primitive if you can find the",
    "start": "2484720",
    "end": "2490440"
  },
  {
    "text": "bugs the appropriate bugs to um actually exploit if you're actually going hunting",
    "start": "2490440",
    "end": "2497599"
  },
  {
    "text": "for stuff if you find a driver which it which opens access tokens it calls",
    "start": "2497599",
    "end": "2504040"
  },
  {
    "text": "capture subject context it calls reference impersonation token or reference primary token if you see those",
    "start": "2504040",
    "end": "2510720"
  },
  {
    "text": "calls it's obviously doing some sort of personal check Security checks now if",
    "start": "2510720",
    "end": "2516200"
  },
  {
    "text": "you do not see SE access check imported you would be right to be suspicious",
    "start": "2516200",
    "end": "2521599"
  },
  {
    "text": "there may be something of use there now sometimes you'll see this and it is",
    "start": "2521599",
    "end": "2527240"
  },
  {
    "text": "completely benign for example uh I think the process monitors driver does this",
    "start": "2527240",
    "end": "2532359"
  },
  {
    "text": "but it's only doing it so it can record who is supposedly opening that file so",
    "start": "2532359",
    "end": "2538480"
  },
  {
    "text": "it uses this to basically extract your user identity and determine that you are you Bob Smith that's all it does it for",
    "start": "2538480",
    "end": "2545200"
  },
  {
    "text": "now of course you could spoof that but you shouldn't be relying on process monitor as your security um security",
    "start": "2545200",
    "end": "2551559"
  },
  {
    "text": "auditing solution for your Enterprise but it's possible that there",
    "start": "2551559",
    "end": "2557280"
  },
  {
    "text": "is a more serious bug there and finally like never forget about time of check",
    "start": "2557280",
    "end": "2563599"
  },
  {
    "text": "time of use even on the same thread because you can switch threads arbitrarily and there's a good sort of",
    "start": "2563599",
    "end": "2569240"
  },
  {
    "text": "bug I think in the project zero tracker if you go hunt for it where basically I could change a token during a registry",
    "start": "2569240",
    "end": "2575880"
  },
  {
    "text": "open call and get it to right to the wrong registry Hive because basically it sort of redirected it to a different user's Hive and actually do uh privileg",
    "start": "2575880",
    "end": "2583440"
  },
  {
    "text": "escal in that way so thanks very much for uh listening through uh my talk and",
    "start": "2583440",
    "end": "2589559"
  },
  {
    "text": "um yeah thanks very much",
    "start": "2589559",
    "end": "2594319"
  }
]