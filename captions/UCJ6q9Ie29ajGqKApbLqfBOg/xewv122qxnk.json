[
  {
    "text": "good morning welcome to processing detection techniques gotta catch them all in south CCDF with its cutler and",
    "start": "30",
    "end": "7890"
  },
  {
    "text": "amid climb before weekend I have a few brief notes stop by the business hall located in Manoa Bay Oceanside and",
    "start": "7890",
    "end": "14820"
  },
  {
    "text": "shoreline ballrooms on level 2 during the day and for the Welcome Reception at 5:30 p.m. tonight",
    "start": "14820",
    "end": "20760"
  },
  {
    "text": "the blackhead arsenal is in the business hall on level 2 lunch will be served in",
    "start": "20760",
    "end": "25980"
  },
  {
    "text": "Bayside a bee from 1 p.m. until 2:30 p.m. don't forget to merchandise store",
    "start": "25980",
    "end": "31830"
  },
  {
    "text": "on level 2 as well and thank you for putting your phones on vibrate we're ready to get started thank you Thank You",
    "start": "31830",
    "end": "41640"
  },
  {
    "text": "Lena and welcome to our presentation about process injection techniques and we have itsy Cutler here and this is",
    "start": "41640",
    "end": "49320"
  },
  {
    "text": "some words about it sick and my name is amit klein and you can read a bit about me there and we started researching",
    "start": "49320",
    "end": "57960"
  },
  {
    "text": "process injection techniques back in late 2018 we wanted to explore this area",
    "start": "57960",
    "end": "65280"
  },
  {
    "text": "and see if we can find a new techniques and something interesting to say about this and pretty much pretty soon we",
    "start": "65280",
    "end": "72330"
  },
  {
    "text": "discovered that there is actually no comprehensive collection or catalog or compendium of process injection techniques moreover there was no",
    "start": "72330",
    "end": "79259"
  },
  {
    "text": "separation of what we call a true process injection techniques from a more",
    "start": "79259",
    "end": "84450"
  },
  {
    "text": "liberal approach taken by some authors to this term where in the lamp into",
    "start": "84450",
    "end": "90540"
  },
  {
    "text": "process injection some related but not true process injection techniques like Halloween or spawning we did not find",
    "start": "90540",
    "end": "99090"
  },
  {
    "text": "any categorization system for describing",
    "start": "99090",
    "end": "104790"
  },
  {
    "text": "the differences between the sub techniques such as memory location memory writing and them and code",
    "start": "104790",
    "end": "110909"
  },
  {
    "text": "execution there was no analysis in comparison between the various techniques out there and there was no",
    "start": "110909",
    "end": "116820"
  },
  {
    "text": "update for Windows 10 as several techniques are pretty old from the back from the Windows XP days and the 32-bit",
    "start": "116820",
    "end": "124770"
  },
  {
    "text": "architecture and it was not clear to us whether they can be ported as is to Windows 10 with its new security",
    "start": "124770",
    "end": "130160"
  },
  {
    "text": "mechanisms and their 64-bit architecture before we proceed let me do some kudos",
    "start": "130160",
    "end": "138640"
  },
  {
    "text": "and give some kudos to the individuals and companies for inventing and developing documenting and puttin and",
    "start": "138640",
    "end": "144819"
  },
  {
    "text": "providing proof of concept to many many process injection techniques among them",
    "start": "144819",
    "end": "149830"
  },
  {
    "text": "are atom of hexa corn or John the people at the in silo and except it's also",
    "start": "149830",
    "end": "156640"
  },
  {
    "text": "known as the evil bit in there of course many many more authors and contributors and of course head tipped to endgame for",
    "start": "156640",
    "end": "163959"
  },
  {
    "text": "providing the first compilation of injection techniques although not all of them were true process injection",
    "start": "163959",
    "end": "169239"
  },
  {
    "text": "techniques so how do we how do we define true true process injection its",
    "start": "169239",
    "end": "176370"
  },
  {
    "text": "injecting code or logic from one live user space process which is typically malware to another live user space",
    "start": "176370",
    "end": "183430"
  },
  {
    "text": "process which the target of the injection which is typically a benign or a legitimate process this is in contrast",
    "start": "183430",
    "end": "190720"
  },
  {
    "text": "off and contrast to a process spawning and hollowing also some other pre",
    "start": "190720",
    "end": "195879"
  },
  {
    "text": "execution techniques like DLL hijacking a a PP cert a PP need less people riders",
    "start": "195879",
    "end": "201400"
  },
  {
    "text": "image file execution options etc what's so interesting about Windows 10 and 60",
    "start": "201400",
    "end": "207910"
  },
  {
    "text": "64-bit architecture well in Windows 10 there were several new security mechanisms introduced to",
    "start": "207910",
    "end": "214389"
  },
  {
    "text": "mitigate remote process exploitation but they also have a significant impact on",
    "start": "214389",
    "end": "221139"
  },
  {
    "text": "process injection on local process injection specifically safety control",
    "start": "221139",
    "end": "226569"
  },
  {
    "text": "flow guard prevents indirect calls to non improved addresses and the c IG the",
    "start": "226569",
    "end": "231910"
  },
  {
    "text": "code integrity guard only allows modules or DLL signed by Microsoft or Microsoft",
    "start": "231910",
    "end": "237010"
  },
  {
    "text": "or W hql to be loaded into the process memory and they we will explain exactly how this effects process injection the",
    "start": "237010",
    "end": "244900"
  },
  {
    "text": "x64 architecture as opposed to x86 32-bit architecture has a different",
    "start": "244900",
    "end": "251859"
  },
  {
    "text": "column convention where in the first four arguments are stored in volatile registers r6 RDX r8 and r9",
    "start": "251859",
    "end": "258729"
  },
  {
    "text": "so in invoking functions for example from Rob gadget or from other mechanisms",
    "start": "258729",
    "end": "264900"
  },
  {
    "text": "necessitate control over some or all these registers which is sometimes hard to come by",
    "start": "264900",
    "end": "270110"
  },
  {
    "text": "also in x64 there is no pop or registers so this makes it difficult to populate",
    "start": "270110",
    "end": "276650"
  },
  {
    "text": "registered with desired values in rock gadgets and so forth we found a lot of",
    "start": "276650",
    "end": "283550"
  },
  {
    "text": "proof of concepts for project process injection out there they were excellent proof of concepts in the sense that they",
    "start": "283550",
    "end": "290510"
  },
  {
    "text": "were not not just good proof of concepts they were excellent ones and because",
    "start": "290510",
    "end": "297380"
  },
  {
    "text": "they were excellent ones because they checked for error conditions and exceptions they handled both 32-bit",
    "start": "297380",
    "end": "304669"
  },
  {
    "text": "architecture and 64-bit architecture in fact when they wanted to demonstrate a specific say memorizing technique they",
    "start": "304669",
    "end": "312260"
  },
  {
    "text": "coupled with some execution technique to provide an end-to-end process injection demonstration including in this case a",
    "start": "312260",
    "end": "319630"
  },
  {
    "text": "an arbitrary executing arbitrary code a user chosen arbitrary code this made a",
    "start": "319630",
    "end": "326300"
  },
  {
    "text": "proof of concept pretty large in this case if you can read it it's a fifteen hundred lines of code and for a",
    "start": "326300",
    "end": "333740"
  },
  {
    "text": "researcher to try to figure out what exactly is the innovation here where what is the essence of the technique it",
    "start": "333740",
    "end": "339860"
  },
  {
    "text": "becomes very difficult as opposed to what we would what we had in mind is something like the right hand side where",
    "start": "339860",
    "end": "345770"
  },
  {
    "text": "I knew there are five there are three lines actually they show up as 5 because the we have a word wrapping here",
    "start": "345770",
    "end": "352450"
  },
  {
    "text": "detailing the exact writing technique and that's what we were missing",
    "start": "352450",
    "end": "357950"
  },
  {
    "text": "in the proof of concept or the discussions that that existed to date so",
    "start": "357950",
    "end": "364820"
  },
  {
    "text": "the scope of our research is therefore true process injection running a sequence of logical commands in the",
    "start": "364820",
    "end": "370640"
  },
  {
    "text": "target process as opposed to making that target process spawn another process which is far less interesting recent",
    "start": "370640",
    "end": "378289"
  },
  {
    "text": "Windows 10 less a version 1803 and above 64-bit in injecting process 64-bit",
    "start": "378289",
    "end": "385070"
  },
  {
    "text": "target process both medium integrity non no requirement for administrative rights",
    "start": "385070",
    "end": "390350"
  },
  {
    "text": "and we wanted to in value 8 the process injection techniques against Windows 10",
    "start": "390350",
    "end": "396080"
  },
  {
    "text": "protection specifically CFG in CAG with respect to CFG what we had in mind",
    "start": "396080",
    "end": "402169"
  },
  {
    "text": "or what we discovered that there are two the three story strategies for handling CFG either the attacker the malware",
    "start": "402169",
    "end": "409639"
  },
  {
    "text": "disable CFG in the target process which is possible through a standard windows api set process valid hole targets",
    "start": "409639",
    "end": "415240"
  },
  {
    "text": "however if you think about it this invocation is in itself quite suspicious for one process to inflict on another",
    "start": "415240",
    "end": "423139"
  },
  {
    "text": "and also it may be disabled or restricted in the future by Microsoft because it because it may be too potent",
    "start": "423139",
    "end": "429919"
  },
  {
    "text": "and then we can do we can allocate or set the executable memory thereby making",
    "start": "429919",
    "end": "438080"
  },
  {
    "text": "all the location CFG valid this is an using virtual okie X virtual protecta X",
    "start": "438080",
    "end": "444470"
  },
  {
    "text": "and others however what we have here is one process allocating executable pages",
    "start": "444470",
    "end": "450800"
  },
  {
    "text": "in another process and we all understand what's going to happen next so this is extremely suspicious activity so an",
    "start": "450800",
    "end": "457220"
  },
  {
    "text": "attacker probably wants to avoid that one as well which leaves us with the third option which is the most difficult and most in",
    "start": "457220",
    "end": "464000"
  },
  {
    "text": "hardest to come by and therefore most interesting which is playing by the rules so what we what attacker needs to",
    "start": "464000",
    "end": "469910"
  },
  {
    "text": "do is write in non-executable data's is typically a rope chain and then use some",
    "start": "469910",
    "end": "475580"
  },
  {
    "text": "CFG agnostic execution method to run a stack Peapod and start executing the Rope gadget and that the emphasis is on",
    "start": "475580",
    "end": "483440"
  },
  {
    "text": "CFG agnostic execution method which is the rare man or minority of the",
    "start": "483440",
    "end": "488860"
  },
  {
    "text": "execution methods as we'll see later regarding other defenses including CI G",
    "start": "488860",
    "end": "496270"
  },
  {
    "text": "they could be turned off by used by invoking locally set process mitigation",
    "start": "496270",
    "end": "502099"
  },
  {
    "text": "policy which takes three arguments and therefore could be used with empty queue a PC thread to execute at the target",
    "start": "502099",
    "end": "508160"
  },
  {
    "text": "process however this as of 1809 does not work among those protection mechanisms",
    "start": "508160",
    "end": "515060"
  },
  {
    "text": "CAG is the most painful for process injection because it prevents loading of arbitrary dll's so what are the typical",
    "start": "515060",
    "end": "522620"
  },
  {
    "text": "process injection building blocks we have memory allocation which may be",
    "start": "522620",
    "end": "527959"
  },
  {
    "text": "implicit if we use a code cave or stack or or or Hiep location we need to consider page",
    "start": "527959",
    "end": "533750"
  },
  {
    "text": "permission issues is it can we allocate executable pages or not what control we",
    "start": "533750",
    "end": "539750"
  },
  {
    "text": "have over the location address and whether the addresses are CFG valid then",
    "start": "539750",
    "end": "545300"
  },
  {
    "text": "we need to write something useful into that memory and the question who when and with memory writing technique the",
    "start": "545300",
    "end": "551000"
  },
  {
    "text": "questions are what what we can write can we write arbitrary data or is it restricted in size when character set",
    "start": "551000",
    "end": "556430"
  },
  {
    "text": "and whether the right is atomic or not finally there's the execution third technique and the questions are whether",
    "start": "556430",
    "end": "563240"
  },
  {
    "text": "the target has to be a CFG valid address what control do we have over the registers and what limitations or",
    "start": "563240",
    "end": "569630"
  },
  {
    "text": "prerequisites there are for this execution technique and there are a lot of techniques that are quite restricted",
    "start": "569630",
    "end": "576370"
  },
  {
    "text": "so without much ado let's go over to process injection techniques I'm going",
    "start": "576370",
    "end": "582140"
  },
  {
    "text": "to describe some interesting some known and then some interesting and",
    "start": "582140",
    "end": "587390"
  },
  {
    "text": "lesser-known techniques and and try to and try to analyze and and provide some insights",
    "start": "587390",
    "end": "592700"
  },
  {
    "text": "about them so we start with the classic memory allocation technique in which we",
    "start": "592700",
    "end": "598670"
  },
  {
    "text": "allocate a memory in the target process using virtual Allah key X as we and as",
    "start": "598670",
    "end": "603769"
  },
  {
    "text": "we all know we can allocate executable pages by simply by requesting the page execute property fled and for such",
    "start": "603769",
    "end": "611480"
  },
  {
    "text": "executable pages windows conveniently automatically sets all the region to be CFG valid comes in very handy as a",
    "start": "611480",
    "end": "618829"
  },
  {
    "text": "variant we can allocate only read write pages and then add the execution executable flag using virtual protecta X",
    "start": "618829",
    "end": "625519"
  },
  {
    "text": "in that case as well windows automatically sets all the region to be safety aware and then we have the",
    "start": "625519",
    "end": "631910"
  },
  {
    "text": "classic write process memory memory writing technique you will Freud process",
    "start": "631910",
    "end": "637130"
  },
  {
    "text": "memory there are no restrictions and no limitations address is fully controlled by us and if g if the allocation is sets",
    "start": "637130",
    "end": "643670"
  },
  {
    "text": "the execution privileges then all we know already that all the region is CFG evaluators so which makes us very happy",
    "start": "643670",
    "end": "649730"
  },
  {
    "text": "and cg has no impact because we are not talking about DLL 0 and finally does the",
    "start": "649730",
    "end": "654860"
  },
  {
    "text": "classic execution technique using creative mode thread has no prerequisites",
    "start": "654860",
    "end": "659959"
  },
  {
    "text": "no impact for C ig4 for safety the target execution",
    "start": "659959",
    "end": "664960"
  },
  {
    "text": "be a valid CFG target meaning windows will check at the remote process if the address is CFG valid and if it's not it",
    "start": "664960",
    "end": "672010"
  },
  {
    "text": "will crash and as for registers we'll only control a single register or six so",
    "start": "672010",
    "end": "677410"
  },
  {
    "text": "whatever we invoke here has to take up to one argument we also have classic DLL",
    "start": "677410",
    "end": "686020"
  },
  {
    "text": "injection execution techniques one of them would be using create remote thread again assuming that we already have the",
    "start": "686020",
    "end": "693670"
  },
  {
    "text": "DLL pass in memory using one of their using a writing technique then you we",
    "start": "693670",
    "end": "701980"
  },
  {
    "text": "can invoke create a MOSFET that invokes load library a with the single argument",
    "start": "701980",
    "end": "707050"
  },
  {
    "text": "being a pointer to this to the memory that we filled with the DLL path as a",
    "start": "707050",
    "end": "713350"
  },
  {
    "text": "pro the prerequisites are pretty obvious the DLL should be on this we should we need to have a writing technique to",
    "start": "713350",
    "end": "719410"
  },
  {
    "text": "write the DLL path to the target process interestingly the execution occurs because the loader law the loader runs",
    "start": "719410",
    "end": "726399"
  },
  {
    "text": "DLL main during the deal during loading the loading of the DLL and this DLL main",
    "start": "726399",
    "end": "733600"
  },
  {
    "text": "function is restricted because it's executed under the loader lock so there",
    "start": "733600",
    "end": "739330"
  },
  {
    "text": "are several restrictions away there's a URL now paper show that provides",
    "start": "739330",
    "end": "744400"
  },
  {
    "text": "information from Microsoft what those restrictions are nevertheless it's still very useful as if G has no impact on",
    "start": "744400",
    "end": "752080"
  },
  {
    "text": "this technique because the load library a is obviously as if G valid address in",
    "start": "752080",
    "end": "758709"
  },
  {
    "text": "the target process however CAG will block this technique assuming that this DLL is not signed by Microsoft and",
    "start": "758709",
    "end": "765430"
  },
  {
    "text": "unless you have the Microsoft code signing key the CAG will block this this",
    "start": "765430",
    "end": "770740"
  },
  {
    "text": "execution method I want to note that this variant can there are variants using queue user ABC and empty queue a",
    "start": "770740",
    "end": "777670"
  },
  {
    "text": "piece is coming which end up with the same conditions more or less another",
    "start": "777670",
    "end": "784420"
  },
  {
    "text": "classic DLL injection technique is using set windows hook X in which case the",
    "start": "784420",
    "end": "790180"
  },
  {
    "text": "idea here is that this deal that we put our provides windows with a dll to be",
    "start": "790180",
    "end": "796180"
  },
  {
    "text": "loaded whenever a specific event is triggered in the in the target process and",
    "start": "796180",
    "end": "804500"
  },
  {
    "text": "following this set windows hook acts we trigger we artificially trigger this",
    "start": "804500",
    "end": "810360"
  },
  {
    "text": "condition this this event in the target thread and so that it forces loading our",
    "start": "810360",
    "end": "817589"
  },
  {
    "text": "DLL executing the event handler function in this DLL of course the prerequisite",
    "start": "817589",
    "end": "823080"
  },
  {
    "text": "is that there's the little disk and it exports a required function which is obviously under the attackers control no",
    "start": "823080",
    "end": "829110"
  },
  {
    "text": "problems there and again see IG will block this technique we are moving to",
    "start": "829110",
    "end": "835589"
  },
  {
    "text": "the classic ADC execution technique which uses q user if you see the windows",
    "start": "835589",
    "end": "841230"
  },
  {
    "text": "API standard function or the internal function NT q a PC thread which is more",
    "start": "841230",
    "end": "846959"
  },
  {
    "text": "flexible the prerequisites here starts to be start becoming interesting because",
    "start": "846959",
    "end": "852180"
  },
  {
    "text": "we here we acquire that the thread must be in an alert able state and I'll explain this that in the next slide and",
    "start": "852180",
    "end": "859020"
  },
  {
    "text": "Sergey has of course no impact and the CNC FG requires that the target execution be a valid CFG target as for",
    "start": "859020",
    "end": "866910"
  },
  {
    "text": "registers you can see that in Q user a PC will only control our six one register one one argument function",
    "start": "866910",
    "end": "872580"
  },
  {
    "text": "whereas in NT qu q a PC thread will control our six RDX and the lower half",
    "start": "872580",
    "end": "877980"
  },
  {
    "text": "of our eight so we have control over two and a half registers so what is is a lot",
    "start": "877980",
    "end": "887400"
  },
  {
    "text": "about what does it mean for a third to be in a logical state well taking it straight for Microsoft documentation it",
    "start": "887400",
    "end": "893670"
  },
  {
    "text": "means that the thread is inside one of the is running is a this is not just an",
    "start": "893670",
    "end": "900209"
  },
  {
    "text": "idling in one of the five next functions sleepy X wait for single object X wait",
    "start": "900209",
    "end": "905880"
  },
  {
    "text": "for multiple objects its signal object and wait and real MSG wait for multiple",
    "start": "905880",
    "end": "911339"
  },
  {
    "text": "objects X and actually for a complex enough software like office software",
    "start": "911339",
    "end": "917100"
  },
  {
    "text": "Explorer browsers it's quite common to find at least one thread in an alert about state",
    "start": "917100",
    "end": "924900"
  },
  {
    "text": "if you think about it and any thread that waits for an object wait for a signal and",
    "start": "924900",
    "end": "930070"
  },
  {
    "text": "actually is in an alert about state and also of importance here and I don't",
    "start": "930070",
    "end": "935080"
  },
  {
    "text": "think that this is a documented elsewhere is that it's quite easy to detect this alert about that the third",
    "start": "935080",
    "end": "941470"
  },
  {
    "text": "is in an in an alert about state because all those internal functions in which the thread is actually parking it will",
    "start": "941470",
    "end": "949660"
  },
  {
    "text": "be at the function entry plus hex 40",
    "start": "949660",
    "end": "955780"
  },
  {
    "text": "which is right which is the our IP right after the Cisco all those five internal",
    "start": "955780",
    "end": "960940"
  },
  {
    "text": "functions share the same structure and it's always a Cisco and at the end of",
    "start": "960940",
    "end": "967000"
  },
  {
    "text": "the Cisco it's a hex 14 so if you see the RFP for thread in in sleepy XA plus",
    "start": "967000",
    "end": "974590"
  },
  {
    "text": "say a hex 14 or in signal object and white plus hex 14 it means that the thread is in an alert about state",
    "start": "974590",
    "end": "981160"
  },
  {
    "text": "otherwise it is not in an ineligible state moving to the yeah so that was the",
    "start": "981160",
    "end": "992670"
  },
  {
    "text": "APC style execution and now moving to a classic thread hijacking execution",
    "start": "992670",
    "end": "997810"
  },
  {
    "text": "technique suspend inject and resume as IR for short again the naive",
    "start": "997810",
    "end": "1005120"
  },
  {
    "text": "representation of this attack is opening the thread suspending the thread and",
    "start": "1005120",
    "end": "1011150"
  },
  {
    "text": "then using set thread context with with our IP pointing at our desired location",
    "start": "1011150",
    "end": "1019350"
  },
  {
    "text": "and resume thread and the third of the zoom with the our IP in our desired location and start executing our code",
    "start": "1019350",
    "end": "1027170"
  },
  {
    "text": "now there are no prerequisites actually to this technique CFG surprisingly",
    "start": "1027170",
    "end": "1033420"
  },
  {
    "text": "enough has no impact except for RSP which is restricted to the if we choose to change the RSP value",
    "start": "1033420",
    "end": "1041490"
  },
  {
    "text": "it has to remain within the stack region as for control of registers here's a",
    "start": "1041490",
    "end": "1046650"
  },
  {
    "text": "puzzle in some processes we could exert control over all registers using set",
    "start": "1046650",
    "end": "1054240"
  },
  {
    "text": "thread context in other processes more interesting processes I admit we could",
    "start": "1054240",
    "end": "1059610"
  },
  {
    "text": "not modify we could not control the volatile registers RA our six our X and our eight to our 11",
    "start": "1059610",
    "end": "1066029"
  },
  {
    "text": "the reason why something some processes are more controllable and some are less",
    "start": "1066029",
    "end": "1073649"
  },
  {
    "text": "control is somewhat of a puzzle to me and probably requires more research or maybe there's something I'm missing",
    "start": "1073649",
    "end": "1081830"
  },
  {
    "text": "at any rate our assumption is that we have no control over the volatile registers and as I mentioned earlier",
    "start": "1081830",
    "end": "1088139"
  },
  {
    "text": "control over RSP is limited to stock reservation if our - if we do not have",
    "start": "1088139",
    "end": "1094289"
  },
  {
    "text": "the ability to write executable code pages into the target process we can use",
    "start": "1094289",
    "end": "1099479"
  },
  {
    "text": "we can use data there as rob chain in",
    "start": "1099479",
    "end": "1104820"
  },
  {
    "text": "which case we set the are IP of the thread to a stack pivot gadget to set",
    "start": "1104820",
    "end": "1110519"
  },
  {
    "text": "the RSP to the control memory and and the return command will start executing",
    "start": "1110519",
    "end": "1116009"
  },
  {
    "text": "the rope chain instead of running a native code here's a less known but very",
    "start": "1116009",
    "end": "1124349"
  },
  {
    "text": "impressive technique from I think 2007 called ghost writing it's a monolithic technique in the sense",
    "start": "1124349",
    "end": "1130769"
  },
  {
    "text": "that it provide it allows writing it combines writing and execution it",
    "start": "1130769",
    "end": "1137519"
  },
  {
    "text": "similar to thread hijacking but it has the built-in memory writing part so",
    "start": "1137519",
    "end": "1143190"
  },
  {
    "text": "memory writing is achieved in in steps in writing one key word in each step and",
    "start": "1143190",
    "end": "1149659"
  },
  {
    "text": "using set thread context to set the registers and at the end of each step the thread is is locked in an infinite",
    "start": "1149659",
    "end": "1157349"
  },
  {
    "text": "loop which is a success marker for us telling us we can move to the next step so the required Rob gadgets are we have",
    "start": "1157349",
    "end": "1164519"
  },
  {
    "text": "a sink gadget this infinite loop as simple as a jump - - so it looks forever",
    "start": "1164519",
    "end": "1171409"
  },
  {
    "text": "then we also have need to have a write budget something like move to the address in RDI",
    "start": "1171409",
    "end": "1177719"
  },
  {
    "text": "the contents of our BX and do a return later and the stack we vote for something clever equivalent and the",
    "start": "1177719",
    "end": "1184739"
  },
  {
    "text": "first step we just write the write the onto the stack the address of the",
    "start": "1184739",
    "end": "1190769"
  },
  {
    "text": "infinite loop and return to that so the infinite loops are running once we detect that we again",
    "start": "1190769",
    "end": "1198429"
  },
  {
    "text": "set the thread context to say to into writing arbitrary keywords using our di",
    "start": "1198429",
    "end": "1205450"
  },
  {
    "text": "and our BX and setting our speed one step one step back so that when they",
    "start": "1205450",
    "end": "1211539"
  },
  {
    "text": "write a write gadget we finish with return it will jump back to the infinite",
    "start": "1211539",
    "end": "1217359"
  },
  {
    "text": "loop and once we have built the memory",
    "start": "1217359",
    "end": "1222460"
  },
  {
    "text": "to our desire we can move to the execution by executing a stack without using sets read context again some tips",
    "start": "1222460",
    "end": "1232419"
  },
  {
    "text": "about regarding unused stack as memory which we we can use in this technique as",
    "start": "1232419",
    "end": "1238149"
  },
  {
    "text": "well in the stack bombing technique that will describe in a moment it's we can",
    "start": "1238149",
    "end": "1245169"
  },
  {
    "text": "maintain we need to maintain distance from the official top of stack so in order to leave room for win API call",
    "start": "1245169",
    "end": "1252369"
  },
  {
    "text": "stack meaning we need to allow the stack to grow a bit when some internal",
    "start": "1252369",
    "end": "1259629"
  },
  {
    "text": "functions are invoked otherwise if we do not do that if we write if we use the",
    "start": "1259629",
    "end": "1265029"
  },
  {
    "text": "stack right right behind TOS it will get mangled or wiped by invoking internal",
    "start": "1265029",
    "end": "1273309"
  },
  {
    "text": "functions and so no good so needs to keep some distance we mean we can't go",
    "start": "1273309",
    "end": "1278350"
  },
  {
    "text": "too far because the stack is limited to one megabyte typically and so in order",
    "start": "1278350",
    "end": "1284049"
  },
  {
    "text": "to achieve those goals we need to grow the stack by touching memory page size",
    "start": "1284049",
    "end": "1289059"
  },
  {
    "text": "intervals because if we if we do once we touch this if want to touch the a guard",
    "start": "1289059",
    "end": "1297669"
  },
  {
    "text": "page the stack grows accordingly also in",
    "start": "1297669",
    "end": "1303009"
  },
  {
    "text": "writing code use when writing code using this new stack location - the alignment",
    "start": "1303009",
    "end": "1310299"
  },
  {
    "text": "required from stack which is 16 bytes so back to analyzing ghost writing the",
    "start": "1310299",
    "end": "1316899"
  },
  {
    "text": "prerequisite is simply that we have writable memory as we can",
    "start": "1316899",
    "end": "1321960"
  },
  {
    "text": "as as hinted before we can use the this unused the unused part of the stack and",
    "start": "1321960",
    "end": "1328440"
  },
  {
    "text": "see if G has no impact except ours except for the restriction over RS be CAG obviously has no impact and we have",
    "start": "1328440",
    "end": "1336929"
  },
  {
    "text": "for control over it it says there's no guaranteed control over Hotel registers as I mentioned before and as I said",
    "start": "1336929",
    "end": "1343340"
  },
  {
    "text": "control over our space limited another",
    "start": "1343340",
    "end": "1350399"
  },
  {
    "text": "interesting writing technique is assuming that there is a shared memory section in the target process in such",
    "start": "1350399",
    "end": "1359460"
  },
  {
    "text": "case assuming that we know this shared memory name assured now section name and",
    "start": "1359460",
    "end": "1367799"
  },
  {
    "text": "size which could we can easily find out assuming back at home assuming that we",
    "start": "1367799",
    "end": "1372840"
  },
  {
    "text": "know which software we target and which build it is these things don't change a lot with we open this shared memory map",
    "start": "1372840",
    "end": "1381659"
  },
  {
    "text": "this shared memory to the malware process we write our payload at the end of this shared memory section and",
    "start": "1381659",
    "end": "1389520"
  },
  {
    "text": "finally we we search we opened up the target process and we search for",
    "start": "1389520",
    "end": "1394640"
  },
  {
    "text": "sections that are for memory regions that have the same properties as the",
    "start": "1394640",
    "end": "1400710"
  },
  {
    "text": "shared memory in terms of size and in flags and if once we find that we all we",
    "start": "1400710",
    "end": "1408480"
  },
  {
    "text": "read the last bytes of those of that shipment of that memory area in the",
    "start": "1408480",
    "end": "1413909"
  },
  {
    "text": "target process we compare it to our payload and if it's indeed they shared memory region then our then this then",
    "start": "1413909",
    "end": "1421919"
  },
  {
    "text": "we'll find a match and we will what we have at hand at this moment is our payload at a known location at a known",
    "start": "1421919",
    "end": "1429240"
  },
  {
    "text": "address in the target process and then we can proceed to do whatever you like with this with this data so the",
    "start": "1429240",
    "end": "1437039"
  },
  {
    "text": "prerequisites are obviously the target process has readwrite shared memory that a conductor attacker knows this name the",
    "start": "1437039",
    "end": "1443100"
  },
  {
    "text": "name and size of this session memory CFG is not interesting this is right a",
    "start": "1443100",
    "end": "1449429"
  },
  {
    "text": "memory writing technique and CAG has no impact we're not dealing with the LS here",
    "start": "1449429",
    "end": "1455270"
  },
  {
    "text": "moving to the atom bombing writing technique so as I as we saw earlier the",
    "start": "1455270",
    "end": "1462480"
  },
  {
    "text": "full proof of concept in 1500 lines of code but the essence of the technique assuming some simplifications here like",
    "start": "1462480",
    "end": "1472860"
  },
  {
    "text": "we let's say the payload length is is smaller than 256 bytes and assuming that",
    "start": "1472860",
    "end": "1478620"
  },
  {
    "text": "there are no Nullah bytes in the payload except terminating now bytes what we simply need to do in the mallow process",
    "start": "1478620",
    "end": "1485160"
  },
  {
    "text": "is define an atom object for Windows with this payload as the content and",
    "start": "1485160",
    "end": "1491010"
  },
  {
    "text": "then using anti q a PC thread which can invoke any function in the target",
    "start": "1491010",
    "end": "1496710"
  },
  {
    "text": "process up to with up to three arguments we invoke the global get atom name a",
    "start": "1496710",
    "end": "1502010"
  },
  {
    "text": "with this item name the target a address for the for the payload and the size and",
    "start": "1502010",
    "end": "1510360"
  },
  {
    "text": "the size of the payload and and it will run global get atom in name a in the",
    "start": "1510360",
    "end": "1517790"
  },
  {
    "text": "target process which will copy the item data the payload into the desired",
    "start": "1517790",
    "end": "1522990"
  },
  {
    "text": "address which is very neat the original paper does not right now bytes they",
    "start": "1522990",
    "end": "1530430"
  },
  {
    "text": "assume that the the target memory is zeroed out because they use a code cave",
    "start": "1530430",
    "end": "1536690"
  },
  {
    "text": "and we devised a technique to right now bytes it's all in our paper if you're interested the prerequisites here B is",
    "start": "1536690",
    "end": "1543300"
  },
  {
    "text": "because we use a PC execution technique the thread must be in an alert able to",
    "start": "1543300",
    "end": "1549180"
  },
  {
    "text": "stay but that's not typically a problem and this is a writing technique so",
    "start": "1549180",
    "end": "1555090"
  },
  {
    "text": "there's no impact for c FG + 4 c IG is Iravan because it's not a dll and",
    "start": "1555090",
    "end": "1563090"
  },
  {
    "text": "another interesting location + writing technically lumped together in this in",
    "start": "1563180",
    "end": "1570720"
  },
  {
    "text": "this one is the forcing mapping of section on the target process in this",
    "start": "1570720",
    "end": "1577650"
  },
  {
    "text": "case we define a section in the in them our we fill it with our data and then we",
    "start": "1577650",
    "end": "1585390"
  },
  {
    "text": "forcefully map it into the target process using empty map view of section which also allocates a they allocate the",
    "start": "1585390",
    "end": "1593280"
  },
  {
    "text": "memory in the target section and if we ask for page execute it will also set",
    "start": "1593280",
    "end": "1598410"
  },
  {
    "text": "the whole memory region to be safe JaVale it the downside is that it cannot",
    "start": "1598410",
    "end": "1605160"
  },
  {
    "text": "be used for an already allocated nor so this one cannot be used to say write data on the stack as for CFG as I",
    "start": "1605160",
    "end": "1614940"
  },
  {
    "text": "mentioned earlier the memory allocated with page execution privileges become becomes a valid CFG target which is very",
    "start": "1614940",
    "end": "1621300"
  },
  {
    "text": "neat and here is a cute execution technique it's what we call a map +",
    "start": "1621300",
    "end": "1628440"
  },
  {
    "text": "rewrite in which we we and map a prominent DLL in the target process",
    "start": "1628440",
    "end": "1636650"
  },
  {
    "text": "specifically anti DLL is of course a probably ideal choice what we need to do",
    "start": "1636650",
    "end": "1645870"
  },
  {
    "text": "is to add up this this DLL and then and then map a mapper section back exactly",
    "start": "1645870",
    "end": "1654630"
  },
  {
    "text": "in the same size to the exact address of the original anti DLL in the target process and so the execute with so next",
    "start": "1654630",
    "end": "1663480"
  },
  {
    "text": "time whenever an nth ideal function is involved our own code will run the way",
    "start": "1663480",
    "end": "1669000"
  },
  {
    "text": "to do it is a bit more tricky and requires a attention to details first of course the process the whole process the",
    "start": "1669000",
    "end": "1675210"
  },
  {
    "text": "whole target process needs to be suspended otherwise if someone if some thread will",
    "start": "1675210",
    "end": "1680520"
  },
  {
    "text": "invoke function at ntdll once anti DLL is unmapped but before our code is there",
    "start": "1680520",
    "end": "1686970"
  },
  {
    "text": "it will obviously crash the process then we can just write data there we need to",
    "start": "1686970",
    "end": "1694410"
  },
  {
    "text": "return retain the the context of many s internal variable and ntdll variables to",
    "start": "1694410",
    "end": "1702660"
  },
  {
    "text": "do so what we need to do is copy the original content of the whole ant idle",
    "start": "1702660",
    "end": "1708600"
  },
  {
    "text": "region today malware process then patch some",
    "start": "1708600",
    "end": "1714190"
  },
  {
    "text": "functions of anti DLL I can t close and then write this data back to the to the",
    "start": "1714190",
    "end": "1721270"
  },
  {
    "text": "target process instead of the origin once we hung up the original anti DLL",
    "start": "1721270",
    "end": "1726430"
  },
  {
    "text": "otherwise if we don't do that it will the process is very likely to crash",
    "start": "1726430",
    "end": "1731770"
  },
  {
    "text": "because of inconsistencies and of course we need to flush the instruction cache",
    "start": "1731770",
    "end": "1736810"
  },
  {
    "text": "in order to tell the CPU not to use the old any old code from the old Oh aunt",
    "start": "1736810",
    "end": "1742510"
  },
  {
    "text": "ideally it cached since all the some",
    "start": "1742510",
    "end": "1751060"
  },
  {
    "text": "since the memory that we allocate in inside the target process replaces the",
    "start": "1751060",
    "end": "1758950"
  },
  {
    "text": "old ntdll any all entry points in mt dll all functions in MTD lab must be CFG",
    "start": "1758950",
    "end": "1765100"
  },
  {
    "text": "valid fortunately if we use either virtual lk x or NT map your section this is taken care of and then there is a",
    "start": "1765100",
    "end": "1778510"
  },
  {
    "text": "bunch of callback override execution techniques what we call i lumped",
    "start": "1778510",
    "end": "1784540"
  },
  {
    "text": "together a whole lot of execution techniques starting with set window long",
    "start": "1784540",
    "end": "1789910"
  },
  {
    "text": "PTR propagate control inject lp/cd W&F",
    "start": "1789910",
    "end": "1795280"
  },
  {
    "text": "and the whole shuttle like techniques together because they share the same",
    "start": "1795280",
    "end": "1800320"
  },
  {
    "text": "concept what they do is they write the target code or logic into the in the",
    "start": "1800320",
    "end": "1808900"
  },
  {
    "text": "desired process and then the execution revolves around finding or obtaining a",
    "start": "1808900",
    "end": "1814210"
  },
  {
    "text": "memory address of an object of a virtual table specific object or specific callback function of specific function",
    "start": "1814210",
    "end": "1821290"
  },
  {
    "text": "table which in itself may be tricky because the object may may or may not be",
    "start": "1821290",
    "end": "1826450"
  },
  {
    "text": "there depending on the nature of the process for example whether the process uses a LPC or not whether the core",
    "start": "1826450",
    "end": "1832450"
  },
  {
    "text": "process is in console application or not whether the process has a private clipboard or not it's not it's not a",
    "start": "1832450",
    "end": "1839830"
  },
  {
    "text": "very generic approach is what I'm saying",
    "start": "1839830",
    "end": "1844990"
  },
  {
    "text": "this finding / obtaining can be done either via a standard windows API like",
    "start": "1844990",
    "end": "1850870"
  },
  {
    "text": "get window long PDR over a memory search which is the case for a PC that they",
    "start": "1850870",
    "end": "1856540"
  },
  {
    "text": "opposite attack once this object is found we replace the object or the",
    "start": "1856540",
    "end": "1862540"
  },
  {
    "text": "callback function using one of the writing techniques or using the standard API if it applies like a set window hook",
    "start": "1862540",
    "end": "1869530"
  },
  {
    "text": "acts as a sorry set a window long PDR to point at the at our choice",
    "start": "1869530",
    "end": "1875320"
  },
  {
    "text": "show is chosen functional code and this this for all such techniques must be CFG",
    "start": "1875320",
    "end": "1882850"
  },
  {
    "text": "valid target and it also it may require some object or code adjustments in order",
    "start": "1882850",
    "end": "1890110"
  },
  {
    "text": "to make the process stable not crash finally we trigger the execution again",
    "start": "1890110",
    "end": "1897400"
  },
  {
    "text": "this may be tricky in some technical some approaches as the as the triggering",
    "start": "1897400",
    "end": "1903970"
  },
  {
    "text": "event may or may not be deterministic and post exposed",
    "start": "1903970",
    "end": "1910110"
  },
  {
    "text": "injection we need to restore the original object or callback here's an",
    "start": "1910110",
    "end": "1915160"
  },
  {
    "text": "example of very concise and simplified example and using controlling jet as an",
    "start": "1915160",
    "end": "1921430"
  },
  {
    "text": "example the idea here is that a console",
    "start": "1921430",
    "end": "1926770"
  },
  {
    "text": "application mind you this is now have quite a restricted set of processes a console application stores a handler for",
    "start": "1926770",
    "end": "1935950"
  },
  {
    "text": "the control inject event in its kernel base single handler variable there's a",
    "start": "1935950",
    "end": "1944290"
  },
  {
    "text": "bit of a complication here because the the pointer store there is encoded fortunately we can use we can use the",
    "start": "1944290",
    "end": "1953110"
  },
  {
    "text": "function our tail and code remote pointer from within them our process itself to encode our target our target",
    "start": "1953110",
    "end": "1962620"
  },
  {
    "text": "code location using the same using the encoding schemers in the key of the",
    "start": "1962620",
    "end": "1968650"
  },
  {
    "text": "target process so once we do that we copy this address the",
    "start": "1968650",
    "end": "1974080"
  },
  {
    "text": "copy the data they encoded a pointer to kernel-based single handler at the",
    "start": "1974080",
    "end": "1979480"
  },
  {
    "text": "target process using any memory writing technique technique we like and and of",
    "start": "1979480",
    "end": "1985779"
  },
  {
    "text": "course we have our code they're already using any memory writing technique we",
    "start": "1985779",
    "end": "1991179"
  },
  {
    "text": "like and finally what remains to do is to for us to do is to trigger the",
    "start": "1991179",
    "end": "1996490"
  },
  {
    "text": "execution and we do that by simulating the control see event first we say we",
    "start": "1996490",
    "end": "2002309"
  },
  {
    "text": "simulate pressing control using send input and then we simulate pressing the",
    "start": "2002309",
    "end": "2009090"
  },
  {
    "text": "C character with post message and that's once that happens this function is",
    "start": "2009090",
    "end": "2014789"
  },
  {
    "text": "involved and code starts running our code starts running in the target process and now finally we move to our",
    "start": "2014789",
    "end": "2026370"
  },
  {
    "text": "own little set of new techniques we",
    "start": "2026370",
    "end": "2031860"
  },
  {
    "text": "first describe a memory writing technique using a memset or memo which has some very interesting properties",
    "start": "2031860",
    "end": "2040669"
  },
  {
    "text": "what we do here is assuming that we write our our data to the destination to",
    "start": "2040669",
    "end": "2047370"
  },
  {
    "text": "the target process bite by by using memset and invoking memset in the target",
    "start": "2047370",
    "end": "2054540"
  },
  {
    "text": "process using empty queue a pc thread now remember it takes it it can invoke",
    "start": "2054540",
    "end": "2059940"
  },
  {
    "text": "function a function of 3 argument fortunately memset uses exactly 3 arguments the destination address which",
    "start": "2059940",
    "end": "2066570"
  },
  {
    "text": "we control the one by data and the length which for us the interesting",
    "start": "2066570",
    "end": "2072270"
  },
  {
    "text": "length is the useful length is 1 this way we invoke memset once and write a",
    "start": "2072270",
    "end": "2077280"
  },
  {
    "text": "single byte in any desired address in the target process we can do a loop over",
    "start": "2077280",
    "end": "2082858"
  },
  {
    "text": "and write whatever we like and write arbitrary data to arbitrary memory location in memory locations in the",
    "start": "2082859",
    "end": "2089638"
  },
  {
    "text": "process in the target process and finally we can make it atomic by by",
    "start": "2089639",
    "end": "2095970"
  },
  {
    "text": "writing the data to some temporary address not in use temporary buffer not in use and then copying the buffer",
    "start": "2095970",
    "end": "2104568"
  },
  {
    "text": "in a single atomic step using man moves which allows us to move to it to to",
    "start": "2104750",
    "end": "2111530"
  },
  {
    "text": "using again empty queue a PC thread with man moved and taking three arguments",
    "start": "2111530",
    "end": "2117990"
  },
  {
    "text": "destination addresses source address and length thereby we can achieve atomic",
    "start": "2117990",
    "end": "2123930"
  },
  {
    "text": "memory writing safety note that although",
    "start": "2123930",
    "end": "2130680"
  },
  {
    "text": "we evoke a empty queue a piece is read as if G has no effect on us because the",
    "start": "2130680",
    "end": "2136500"
  },
  {
    "text": "target functions the MM set and memo are of course safe G valid and we can write",
    "start": "2136500",
    "end": "2143070"
  },
  {
    "text": "to any address in fact the only purpose it is that the thread must be in an alert able state and the memory should",
    "start": "2143070",
    "end": "2149370"
  },
  {
    "text": "be allocated which are not not as serious problems and finally we describe",
    "start": "2149370",
    "end": "2155310"
  },
  {
    "text": "here our stack bombing execution technique which is a new execution technique in this case the idea is",
    "start": "2155310",
    "end": "2162720"
  },
  {
    "text": "pretty simple we are using get thread context to obtain the threads",
    "start": "2162720",
    "end": "2170690"
  },
  {
    "text": "top of stack the threads are SP and if",
    "start": "2170690",
    "end": "2175950"
  },
  {
    "text": "the thread is in an alert able state is I'm taking a simple example here it means that when the thread resumes from",
    "start": "2175950",
    "end": "2183180"
  },
  {
    "text": "it's a lot about state as well as we see here it will immediately after the Sisko",
    "start": "2183180",
    "end": "2190650"
  },
  {
    "text": "it will immediately return there is no manipulation of the stack there is no manipulation of registers which is very",
    "start": "2190650",
    "end": "2197040"
  },
  {
    "text": "handy so once this if the stack if the target thread is in an alert of all",
    "start": "2197040",
    "end": "2202080"
  },
  {
    "text": "state it means that if we now write the address of the list of the destination",
    "start": "2202080",
    "end": "2209310"
  },
  {
    "text": "code in the in a in the others of",
    "start": "2209310",
    "end": "2215840"
  },
  {
    "text": "pointed by our SP the thread will will actually branch the return in the thread",
    "start": "2215840",
    "end": "2222990"
  },
  {
    "text": "will immediately branch to our own code and that's essentially the idea we're in",
    "start": "2222990",
    "end": "2228990"
  },
  {
    "text": "our POC in the white paper in we will see this we will see that we'll",
    "start": "2228990",
    "end": "2236390"
  },
  {
    "text": "see how we implemented this using the unused stack as an additional memory we",
    "start": "2236390",
    "end": "2242240"
  },
  {
    "text": "built their Rock gadget and we have this the thread actually running running",
    "start": "2242240",
    "end": "2249010"
  },
  {
    "text": "stack people into the rock gadget and start executing our Rob gadget and all",
    "start": "2249010",
    "end": "2254600"
  },
  {
    "text": "this without resorting to allocating executable memory in the target process",
    "start": "2254600",
    "end": "2262990"
  },
  {
    "text": "[Music] so the per acquisition is our that that",
    "start": "2265580",
    "end": "2271940"
  },
  {
    "text": "is in a lot of a state there's no impact over CFG and as I mentioned the paper",
    "start": "2271940",
    "end": "2277190"
  },
  {
    "text": "injector includes the fully functional code we we also looked at three two we",
    "start": "2277190",
    "end": "2284450"
  },
  {
    "text": "also discovered two methods with no longer work if anyone if anyone can provide us with a working example will",
    "start": "2284450",
    "end": "2292280"
  },
  {
    "text": "be much delighted and to summarize we've seen several writing techniques actually",
    "start": "2292280",
    "end": "2299840"
  },
  {
    "text": "file them and these are prepared their properties we've seen a lot over 20",
    "start": "2299840",
    "end": "2304940"
  },
  {
    "text": "execution techniques but only four of them are safety agnostic the thread",
    "start": "2304940",
    "end": "2310340"
  },
  {
    "text": "execution hijacking suspending jack resume ghost writing and override and",
    "start": "2310340",
    "end": "2315560"
  },
  {
    "text": "our own stack bombing if you're interested in loading a DLL into the",
    "start": "2315560",
    "end": "2322790"
  },
  {
    "text": "target process without writing a system deal without writing its name first fortune we have a nice trick for you you",
    "start": "2322790",
    "end": "2329630"
  },
  {
    "text": "can use a kernel base it contains a list of over 1,000 system DLL names including",
    "start": "2329630",
    "end": "2336680"
  },
  {
    "text": "MS HTML shell 32 and we 98.2 ll so if your favorite web gadget happens to be",
    "start": "2336680",
    "end": "2342350"
  },
  {
    "text": "there and the dealer is not already loaded is a nifty way of loading your system DLL into a target process and now",
    "start": "2342350",
    "end": "2350570"
  },
  {
    "text": "I'm handing it over to Itzik Thank You Amit okay so as Amit mentioned in addition to the theory that we did",
    "start": "2350570",
    "end": "2357859"
  },
  {
    "text": "and the research we're going to release the tool today called inject bra injector implements all the different",
    "start": "2357859",
    "end": "2363230"
  },
  {
    "text": "techniques that the meat is just detailed as well as the bombing technique that we have introduced so you can go right now to",
    "start": "2363230",
    "end": "2370369"
  },
  {
    "text": "get up and download your copy it's free it's open source let's talk about what",
    "start": "2370369",
    "end": "2376400"
  },
  {
    "text": "the high-level structure of conject bra a little bit about the philosophy of the design before it soap injector is a",
    "start": "2376400",
    "end": "2382400"
  },
  {
    "text": "visual studio solution that contains four projects as Amit mentioned some of the attacks required dll artifacts so we",
    "start": "2382400",
    "end": "2389540"
  },
  {
    "text": "provide those out-of-the-box let's account for the first two and then we have the pin director tool itself it",
    "start": "2389540",
    "end": "2395210"
  },
  {
    "text": "contains the demo and the techniques and for your convenience we also include the test process Adamic program that in",
    "start": "2395210",
    "end": "2402410"
  },
  {
    "text": "sometimes will also put the the thread in the alert able state as Amit mention",
    "start": "2402410",
    "end": "2407420"
  },
  {
    "text": "itself prerequisites for some of the techniques so conveniently the program will do it for you as well now stepping",
    "start": "2407420",
    "end": "2413720"
  },
  {
    "text": "back a little bit about what's the philosophy behind conject run so as a mid mentioned the research took a lot of effort collecting different scripts and",
    "start": "2413720",
    "end": "2420650"
  },
  {
    "text": "organized them together into a framework we decided to take it to the next step and we basically utilize C in C++ static",
    "start": "2420650",
    "end": "2428180"
  },
  {
    "text": "type system to create and break Stickley break down the concept into through different classes types that together",
    "start": "2428180",
    "end": "2435230"
  },
  {
    "text": "can combine into a process injection execution so how does it look like so",
    "start": "2435230",
    "end": "2440810"
  },
  {
    "text": "here is the first example of how you implement stack bombing with injector ax the first class is providing the code",
    "start": "2440810",
    "end": "2448010"
  },
  {
    "text": "execution and again this is a thread suspending Jack to resume not to be confused with the other technique that",
    "start": "2448010",
    "end": "2453560"
  },
  {
    "text": "emitters presented this is just a conceptual logic of what's going to happen and then the second class is the",
    "start": "2453560",
    "end": "2460640"
  },
  {
    "text": "actual writing to the memory as you can see net QA PC trade with memset and the",
    "start": "2460640",
    "end": "2466040"
  },
  {
    "text": "third class is actually the implementation of the payload so as you can see you can easily mix and match you",
    "start": "2466040",
    "end": "2471920"
  },
  {
    "text": "can take every different class and you can prototype existing techniques and expand them or you can try different",
    "start": "2471920",
    "end": "2478040"
  },
  {
    "text": "components and now let's have a demo",
    "start": "2478040",
    "end": "2482830"
  },
  {
    "text": "okay so what do we see here there's two seam these windows one of them is a green that's going to be the victim the",
    "start": "2492039",
    "end": "2498019"
  },
  {
    "text": "other one's gonna be the red that's gonna be the attacker process first we launch the test program as you can see",
    "start": "2498019",
    "end": "2504949"
  },
  {
    "text": "it will print for your convenience the PABT ad and put the threads into an eligible state then we're going to",
    "start": "2504949",
    "end": "2519650"
  },
  {
    "text": "switch into pink egg drop we're going to run it without any arguments we're gonna get the usage usage due to all the",
    "start": "2519650",
    "end": "2525589"
  },
  {
    "text": "different techniques in combination again just the demo tool not limiting the a possibility just common frequency",
    "start": "2525589",
    "end": "2532039"
  },
  {
    "text": "combinations and then once we choose the right combination we enter the details of the process ID and the thread ID and",
    "start": "2532039",
    "end": "2539359"
  },
  {
    "text": "the injection will happen the payload right now that the program is designed to run with is a simple hello world pop",
    "start": "2539359",
    "end": "2545420"
  },
  {
    "text": "box that you can see the just popped here that's essentially the completion and the visual indicator that the",
    "start": "2545420",
    "end": "2552140"
  },
  {
    "text": "injection was successful moving on to",
    "start": "2552140",
    "end": "2561859"
  },
  {
    "text": "the second technique as Amit mentioned the growth writing it's very exotic very interesting to implement as you can see",
    "start": "2561859",
    "end": "2568369"
  },
  {
    "text": "again the first top class control D code execution second class control the actual writing here we implemented the",
    "start": "2568369",
    "end": "2574999"
  },
  {
    "text": "go for in technique and another a different payload that matched together and let's see how it works",
    "start": "2574999",
    "end": "2583180"
  },
  {
    "text": "again we invoke the test program",
    "start": "2588279",
    "end": "2592269"
  },
  {
    "text": "I'm sure it's running yep going back into the reject row again we will Bryant",
    "start": "2599270",
    "end": "2605810"
  },
  {
    "text": "again just to see all the different options again the payload here is a",
    "start": "2605810",
    "end": "2621650"
  },
  {
    "text": "visual indication of the other word box again another successful process injection okay so for the for the quick",
    "start": "2621650",
    "end": "2633140"
  },
  {
    "text": "ones you can see that this first class is already been used in the past so if you look at the process of spending",
    "start": "2633140",
    "end": "2639290"
  },
  {
    "text": "checked and resumed complex that's the same class that we use for the stack bombing again the concept of the",
    "start": "2639290",
    "end": "2644900"
  },
  {
    "text": "mix-and-match and reusable components really starts to give back at this point here we only need to implement the uh",
    "start": "2644900",
    "end": "2651290"
  },
  {
    "text": "map and map using a specific writer which is the combination of the create file map do file and map and then view",
    "start": "2651290",
    "end": "2658640"
  },
  {
    "text": "it again and again this combination together with the payload that has been passed specifically will result in a",
    "start": "2658640",
    "end": "2666560"
  },
  {
    "text": "process injection technique so again this is just how easy it is to either prototype a new technique or using an",
    "start": "2666560",
    "end": "2673040"
  },
  {
    "text": "existing one here as a mid mention it",
    "start": "2673040",
    "end": "2683240"
  },
  {
    "text": "requires a program that has multiple different functionalities and complexity to actually be using it so this in this",
    "start": "2683240",
    "end": "2690650"
  },
  {
    "text": "example we're not going to actually use our test process we're going to use Explorer process as a result that's a",
    "start": "2690650",
    "end": "2696619"
  },
  {
    "text": "quick batch script just to find out the PID of Explorer now we're going to",
    "start": "2696619",
    "end": "2701900"
  },
  {
    "text": "attack the Explorer process in the computer we're going to enter the PID",
    "start": "2701900",
    "end": "2710060"
  },
  {
    "text": "and then touching the taskbar we'll get the job done here with this",
    "start": "2710060",
    "end": "2720070"
  },
  {
    "text": "and there's but not at least actually what before the last we have been",
    "start": "2722349",
    "end": "2727880"
  },
  {
    "text": "setting the long pointer here again you can see the complexity of the framework comes into play we're using a specific",
    "start": "2727880",
    "end": "2734119"
  },
  {
    "text": "code execution and then we're using a convertible to actually reuse a very primitive writing technique which is a",
    "start": "2734119",
    "end": "2740809"
  },
  {
    "text": "combination of virtual allocate and write process together with the payload and that's all combined nicely into",
    "start": "2740809",
    "end": "2747020"
  },
  {
    "text": "these one huge instance of a class and then invoking it with the inject method at the the bottom will get the job done",
    "start": "2747020",
    "end": "2755260"
  },
  {
    "text": "so here's a quick demo it's important to",
    "start": "2755260",
    "end": "2761029"
  },
  {
    "text": "note that since as Amit explained there's a specific structure that requires to be retrieved and changed in",
    "start": "2761029",
    "end": "2767089"
  },
  {
    "text": "this particular case we're not using a test process the actual conjecture does the location of the PID and retrieves",
    "start": "2767089",
    "end": "2774500"
  },
  {
    "text": "the relevant abstract for you so this is going to be all things extra doing zero",
    "start": "2774500",
    "end": "2780380"
  },
  {
    "text": "zero indicating no actual process ID needs to be specified and last but not",
    "start": "2780380",
    "end": "2788569"
  },
  {
    "text": "least it's the atomic bonding implementation in projector here again you can see the Q user eighty-three",
    "start": "2788569",
    "end": "2794809"
  },
  {
    "text": "being the code execution class and then a combination of open thread open process virtual allocation and global",
    "start": "2794809",
    "end": "2801349"
  },
  {
    "text": "IDI atom to complete the actual writing and as you can see you can control the payload the different flags and you can",
    "start": "2801349",
    "end": "2807799"
  },
  {
    "text": "experiment with different variation",
    "start": "2807799",
    "end": "2811390"
  },
  {
    "text": "again we will be using the Explorer as a test process",
    "start": "2815740",
    "end": "2821559"
  },
  {
    "text": "and here with this excellent well that would be the left them of the day to",
    "start": "2832970",
    "end": "2839660"
  },
  {
    "text": "meet back to you thank you it's sick so to summarize what we what we have you is",
    "start": "2839660",
    "end": "2846290"
  },
  {
    "text": "the a map of the vast territory of true process injection and we provide an",
    "start": "2846290",
    "end": "2851960"
  },
  {
    "text": "analysis and comparison in a single collection and posit Ori available in our github we also provide you of course",
    "start": "2851960",
    "end": "2859609"
  },
  {
    "text": "the library ejector for the mix-and-match generation of process injection attacks which is a mighty",
    "start": "2859609",
    "end": "2865849"
  },
  {
    "text": "mighty important because this mix and match allows us to cover various combinations that are not provided in",
    "start": "2865849",
    "end": "2872230"
  },
  {
    "text": "imposes a today and we described a new safe Diagnostics execution technique the",
    "start": "2872230",
    "end": "2878480"
  },
  {
    "text": "stack bomb being technique and memory in a memorizing technique coupled with it based on memset and move over APC thank",
    "start": "2878480",
    "end": "2888770"
  },
  {
    "text": "you very much I believe we have time for a few questions you can use it just step",
    "start": "2888770",
    "end": "2893960"
  },
  {
    "text": "up to the microphone step up to the microphone please",
    "start": "2893960",
    "end": "2898359"
  },
  {
    "text": "oh okay thank you [Applause]",
    "start": "2904970",
    "end": "2911760"
  }
]