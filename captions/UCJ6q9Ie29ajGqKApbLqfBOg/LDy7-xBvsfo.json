[
  {
    "text": "good morning and welcome to listen to The Whispers web timing attacks that actually",
    "start": "3000",
    "end": "8679"
  },
  {
    "text": "work first off I'd like to apologize because this talk was meant to be in",
    "start": "8679",
    "end": "14639"
  },
  {
    "text": "person rather than virtual uh the reason it's virtual is that my baby daughter",
    "start": "14639",
    "end": "22279"
  },
  {
    "text": "was born yesterday morning 6 weeks earlier than expected so this wasn't the",
    "start": "22279",
    "end": "29519"
  },
  {
    "text": "ideal time to get on a plane to Las Vegas uh thankfully everyone is healthy",
    "start": "29519",
    "end": "36280"
  },
  {
    "text": "uh I'm being well looked after so I've got a little time to talk to you lot about timing",
    "start": "36280",
    "end": "43239"
  },
  {
    "text": "attacks timing attacks can evoke some strong emotions they take you into this",
    "start": "43640",
    "end": "50079"
  },
  {
    "text": "world where everything is possible in theory and nothing seems to work in",
    "start": "50079",
    "end": "57199"
  },
  {
    "text": "reality they leave you asking how can some something be this powerful and this",
    "start": "57199",
    "end": "62359"
  },
  {
    "text": "useless at the same time how can there be so much research on this topic and so",
    "start": "62359",
    "end": "67960"
  },
  {
    "text": "few people applying it daytoday it must be some kind of research",
    "start": "67960",
    "end": "73720"
  },
  {
    "text": "trap and after 10 years of personally avoiding this trap I cracked decided to",
    "start": "73720",
    "end": "80799"
  },
  {
    "text": "step on it and see what happens the result was painful timing",
    "start": "80799",
    "end": "87360"
  },
  {
    "text": "attacks are about answering difficult questions and I started this research with one question in mind does the",
    "start": "87360",
    "end": "94280"
  },
  {
    "text": "website I'm trying to hack contain a database cell with a password reset",
    "start": "94280",
    "end": "102119"
  },
  {
    "text": "token with a specific prefix in theory if I try to guess a password reset token",
    "start": "102119",
    "end": "108680"
  },
  {
    "text": "then the time the application takes to compare my guess with the genuine token in the database should be measurably",
    "start": "108680",
    "end": "115600"
  },
  {
    "text": "different depending on how many characters I got correct and so using",
    "start": "115600",
    "end": "120880"
  },
  {
    "text": "those measurements I should be able to guess the secret token one character at a time hijack arbitrary accounts on",
    "start": "120880",
    "end": "127719"
  },
  {
    "text": "nearly any website and generally have a good time now I'd seen a write up using this",
    "start": "127719",
    "end": "134920"
  },
  {
    "text": "technique on a real website but when I tried to replicate it I discovered the",
    "start": "134920",
    "end": "140720"
  },
  {
    "text": "write up was actually completely theoretical they never made a proof of concept to test if it really",
    "start": "140720",
    "end": "147680"
  },
  {
    "text": "worked so I think I I thought okay I'm going to build my own vulnerable system and hack that instead and I built the",
    "start": "147680",
    "end": "154800"
  },
  {
    "text": "system just fine but the attack just would not work and so I went hunting and",
    "start": "154800",
    "end": "160640"
  },
  {
    "text": "I found a lab that had been built by someone else to demonstrate this timing attack and the attack worked really well",
    "start": "160640",
    "end": "167760"
  },
  {
    "text": "on their lab in fact it worked so well that I became a little bit suspicious",
    "start": "167760",
    "end": "173760"
  },
  {
    "text": "and I decided to have a look at their source code and discovered that their string comparison fun function was not",
    "start": "173760",
    "end": "181200"
  },
  {
    "text": "very realistic the only reason that the attack worked was that they had injected",
    "start": "181200",
    "end": "186440"
  },
  {
    "text": "this artificial sleep Stam so at this point I'd still gone nowhere and as a",
    "start": "186440",
    "end": "194360"
  },
  {
    "text": "last result I decided to cheat as much as possible and build a local Benchmark",
    "start": "194360",
    "end": "200319"
  },
  {
    "text": "that took tens of millions of measurements on my own system and the",
    "start": "200319",
    "end": "206519"
  },
  {
    "text": "attack still failed so that seriously didn't work out but what it",
    "start": "206519",
    "end": "213680"
  },
  {
    "text": "did do was hammering this concept of the timing divide the gap between the",
    "start": "213680",
    "end": "220400"
  },
  {
    "text": "theoretical threat and the real threat between the techniques that work inside someone's head the techniques that work",
    "start": "220400",
    "end": "227439"
  },
  {
    "text": "in a academic lab environment and the techniques that actually work in the",
    "start": "227439",
    "end": "233280"
  },
  {
    "text": "wild no other web attack class has this kind massive dramatic split between the",
    "start": "233280",
    "end": "239879"
  },
  {
    "text": "theoretical and the Practical and the most interesting part of this split is",
    "start": "239879",
    "end": "245599"
  },
  {
    "text": "the boundary between the two if we zoom in on this boundary then we can see that",
    "start": "245599",
    "end": "251840"
  },
  {
    "text": "there's this huge gap full of well potentially full of undiscovered viable",
    "start": "251840",
    "end": "258440"
  },
  {
    "text": "techniques we know there's a cut off somewhere in this range below which techniques don't work because the timing",
    "start": "258440",
    "end": "264639"
  },
  {
    "text": "Gap that they trigger is too small to measure but where is that cut off well",
    "start": "264639",
    "end": "270280"
  },
  {
    "text": "during this piece of research the smallest time difference that led me to a real finding on a live system",
    "start": "270280",
    "end": "277680"
  },
  {
    "text": "was 200 microsc that's 0.2 milliseconds",
    "start": "277680",
    "end": "282960"
  },
  {
    "text": "or 0.2 seconds so we've got a lot to",
    "start": "282960",
    "end": "289639"
  },
  {
    "text": "cover I'm going to start by showing how to make timing attacks that work everywhere targeting one system is okay",
    "start": "289639",
    "end": "296520"
  },
  {
    "text": "but targeting arbitrary systems with no configuration required is a lot more fun then I'm going to",
    "start": "296520",
    "end": "302960"
  },
  {
    "text": "introduce three novel timing attack techniques Each of which has been tested on tens of thousands of live websites",
    "start": "302960",
    "end": "309600"
  },
  {
    "text": "that have bug Bounty programs they're all proven with real life case studies from those targets and they're all",
    "start": "309600",
    "end": "315440"
  },
  {
    "text": "accompanied with automated open-source tooling leaving you equipped to apply",
    "start": "315440",
    "end": "321400"
  },
  {
    "text": "all these techniques for yourself next time you look at a website after that I'll launch the CTF uh chat defense and",
    "start": "321400",
    "end": "329319"
  },
  {
    "text": "then up leaving 5 minutes for questions so how do you make timing",
    "start": "329319",
    "end": "335160"
  },
  {
    "text": "attacks that work everywhere well timing attack success comes down to the balance",
    "start": "335160",
    "end": "341199"
  },
  {
    "text": "between two variables the signal which is the size of the delay that you're trying to measure and noise which is",
    "start": "341199",
    "end": "348720"
  },
  {
    "text": "everything else that affects the response type if the signal is too quiet relative to the background noise you",
    "start": "348720",
    "end": "355000"
  },
  {
    "text": "won't hear it and the attack will fail now you can split noise into two",
    "start": "355000",
    "end": "360680"
  },
  {
    "text": "parts Network Jitter and internal Jitter Network Jitter is already absolutely",
    "start": "360680",
    "end": "368120"
  },
  {
    "text": "notorious for making timing attacks fail when someone sees a timing attack demonstrated against a local system and",
    "start": "368120",
    "end": "374840"
  },
  {
    "text": "says that will never work on a real remote Target they're basically saying network Jitter will make that attack",
    "start": "374840",
    "end": "382280"
  },
  {
    "text": "Impossible and five years ago that might have been true but with http2 network",
    "start": "382280",
    "end": "388919"
  },
  {
    "text": "Jitter is debt web timing attacks are effectively now local because in 2020 a",
    "start": "388919",
    "end": "395199"
  },
  {
    "text": "paper called Timeless timing attacks showed that hp2 concurrency features mean you can place two requests into a",
    "start": "395199",
    "end": "401960"
  },
  {
    "text": "single TCP packet and they'll get processed at the same time effectively eliminating the harmful impact of",
    "start": "401960",
    "end": "409560"
  },
  {
    "text": "network Jitter on timing attacks that by itself is absolutely",
    "start": "409560",
    "end": "416759"
  },
  {
    "text": "huge but during this research I realized we can do even better because there is",
    "start": "416759",
    "end": "421919"
  },
  {
    "text": "one catch with that technique and it's called the sticky ordering problem",
    "start": "421919",
    "end": "427000"
  },
  {
    "text": "because both requests are on one t TLS stram one of them has to come before the",
    "start": "427000",
    "end": "432440"
  },
  {
    "text": "other and virtually all websites and all web servers have a bias towards processing and responding to the first",
    "start": "432440",
    "end": "439440"
  },
  {
    "text": "request first the authors addressed this by adding extra query parameters to the",
    "start": "439440",
    "end": "446000"
  },
  {
    "text": "first request so that it takes longer to process that one and in theory things get back in sync but this approach has",
    "start": "446000",
    "end": "454440"
  },
  {
    "text": "issues which make it unsuitable for use on many Targets in the wild what we need",
    "start": "454440",
    "end": "461199"
  },
  {
    "text": "is a universal solution and we almost already have one because last year I",
    "start": "461199",
    "end": "467520"
  },
  {
    "text": "developed a single packet attack which withholds a tiny fragment of each request and places that in the final",
    "start": "467520",
    "end": "474120"
  },
  {
    "text": "packet the idea is that last packet is what triggers processing and and by only",
    "start": "474120",
    "end": "480520"
  },
  {
    "text": "putting a tiny fragment there you can complete 20 requests with the final packet which is great for triggering",
    "start": "480520",
    "end": "485759"
  },
  {
    "text": "race conditions but coincidentally if you only put two requests fragments in",
    "start": "485759",
    "end": "492599"
  },
  {
    "text": "the final packet that makes it really small which means the TS decryption size",
    "start": "492599",
    "end": "498960"
  },
  {
    "text": "is reduced and that helps fix the sticky ordering problem unfortunately this technique is",
    "start": "498960",
    "end": "506039"
  },
  {
    "text": "not quite generic because some major web servers like engine X start processing",
    "start": "506039",
    "end": "511599"
  },
  {
    "text": "request fragments the moment that they see the HTTP headers and what that does is it",
    "start": "511599",
    "end": "519080"
  },
  {
    "text": "completely makes this technique behave terribly on those targets some of these web servers will even reply to your",
    "start": "519080",
    "end": "525720"
  },
  {
    "text": "request before you finished sending it to handle these systems equally well",
    "start": "525720",
    "end": "531560"
  },
  {
    "text": "what we need to do is Coes all the request headers into a single packet as well so this way we've got two",
    "start": "531560",
    "end": "537839"
  },
  {
    "text": "synchronized packets and whether the server waits for the last one or starts",
    "start": "537839",
    "end": "543120"
  },
  {
    "text": "processing on the first one we get synchronized execution and a high",
    "start": "543120",
    "end": "548279"
  },
  {
    "text": "accuracy timing attack making this happen turned out to",
    "start": "548279",
    "end": "553320"
  },
  {
    "text": "be extremely easy all you have to do is take what we've got here which is the algorithm for the original single packet",
    "start": "553320",
    "end": "560480"
  },
  {
    "text": "attack and add an extra ping freame this initial sacrificial packet which uh yeah",
    "start": "560480",
    "end": "567440"
  },
  {
    "text": "I found this by accident as you can probably guess uh what it does is it acts as a clue to",
    "start": "567440",
    "end": "573040"
  },
  {
    "text": "the operating system that will be sending a bunch of packets imminently and it's time to start coalescing things",
    "start": "573040",
    "end": "580920"
  },
  {
    "text": "this simple change made the technique twice as accurate on my engine X test bed and this enhanced version is already",
    "start": "580920",
    "end": "588320"
  },
  {
    "text": "available in burp Suite in the free and pro versions and I'm working with the maintainer of the open- source",
    "start": "588320",
    "end": "594640"
  },
  {
    "text": "alternative H2 SpaceX to get it there and I think it will be published there this",
    "start": "594640",
    "end": "600720"
  },
  {
    "text": "week so now we've solved Network noise that just leaves server noise which",
    "start": "600720",
    "end": "606560"
  },
  {
    "text": "should not be underestimated this can come from many places including load on the target server load on other systems",
    "start": "606560",
    "end": "613760"
  },
  {
    "text": "the target is interacting with and even other virtual systems running on the same physical Hardware which is super",
    "start": "613760",
    "end": "620399"
  },
  {
    "text": "common in Cloud environments the best way to tackle server noise is to accept it it's just",
    "start": "620399",
    "end": "627920"
  },
  {
    "text": "going to be there and amplify the signal so that the signal still stands out for",
    "start": "627920",
    "end": "634079"
  },
  {
    "text": "example say that you want to use that string comparison attack concept to test if there's a header name starting with",
    "start": "634079",
    "end": "641600"
  },
  {
    "text": "uh X hyphen U then instead of sending that header prefix once send it a few",
    "start": "641600",
    "end": "647959"
  },
  {
    "text": "hundred times with the same prefix and that will cause a delay that several hundred times easier to detect and that",
    "start": "647959",
    "end": "654639"
  },
  {
    "text": "might actually work on a real server and you can take things even",
    "start": "654639",
    "end": "660720"
  },
  {
    "text": "further than that and adopt a denial of service mindset using techniques like",
    "start": "660720",
    "end": "666320"
  },
  {
    "text": "nested XML entities and graph cure Bing and regular expression denial of service",
    "start": "666320",
    "end": "671360"
  },
  {
    "text": "to create a massive signal that will stand out through any server noise",
    "start": "671360",
    "end": "676800"
  },
  {
    "text": "ultimately a denial of service is just a really easy timing attack on the flip side you can try to",
    "start": "676800",
    "end": "684760"
  },
  {
    "text": "reduce the noise on the server this is less effective in general but it works",
    "start": "684760",
    "end": "691320"
  },
  {
    "text": "sometimes and the approach that I found that tends to work is embracing performance features like",
    "start": "691320",
    "end": "699079"
  },
  {
    "text": "caching the concept here is that the less time the server spends processing your request the less time it has to",
    "start": "699079",
    "end": "707480"
  },
  {
    "text": "accumulate noise that will then make your measurement fail to reveal anything",
    "start": "707480",
    "end": "712720"
  },
  {
    "text": "useful so if you send requests uh if you send the same values in requests multiple times that can trigger caching",
    "start": "712720",
    "end": "719240"
  },
  {
    "text": "which can help uh and you can also try to shorten the code path by doing things like chopping out session session",
    "start": "719240",
    "end": "726120"
  },
  {
    "text": "cookies if they're not required or in some cases you might even add things like hypothetically if you add a do not",
    "start": "726120",
    "end": "733480"
  },
  {
    "text": "track header that might bypass some analytics code on the server uh thereby",
    "start": "733480",
    "end": "738800"
  },
  {
    "text": "making your tack more accurate uh of course we all know everyone ignores that",
    "start": "738800",
    "end": "744720"
  },
  {
    "text": "header so those techniques make timing attacks reliable and also fast I only",
    "start": "744720",
    "end": "753160"
  },
  {
    "text": "sent five request pairs to most targets for each technique in this research going up to 50 to comp to compare to",
    "start": "753160",
    "end": "759639"
  },
  {
    "text": "confirm promising findings as far as the actual response order and response timing analysis goes",
    "start": "759639",
    "end": "767120"
  },
  {
    "text": "uh pram Miner will take care of everything for you but if you prefer to",
    "start": "767120",
    "end": "773160"
  },
  {
    "text": "experiment you can do that with turbo Intruder which will give you output that looks something like this uh the main",
    "start": "773160",
    "end": "779320"
  },
  {
    "text": "thing to to note is here uh when you're using hp2 with a single packet attack",
    "start": "779320",
    "end": "784720"
  },
  {
    "text": "you want to be looking at the response order uh and when you're using hp1 that",
    "start": "784720",
    "end": "789839"
  },
  {
    "text": "you're just going to be using the timing so you need to look at the response ranges",
    "start": "789839",
    "end": "795199"
  },
  {
    "text": "these uh the other thing to note here is that these two attacks were both trying to spot the same 0.5 millisecond delay",
    "start": "795199",
    "end": "802800"
  },
  {
    "text": "on the same server and as you can see the single packet attack detected it very very comfortably whereas the time",
    "start": "802800",
    "end": "810240"
  },
  {
    "text": "analysis failed spectacularly so obviously whenever they support hb2 the single packet attack is the way to",
    "start": "810240",
    "end": "817959"
  },
  {
    "text": "go that is the foundation of timing attacks that work everywhere the part",
    "start": "817959",
    "end": "824440"
  },
  {
    "text": "that there's no formula for is choosing the question that you want to answer I started my research by using",
    "start": "824440",
    "end": "833079"
  },
  {
    "text": "timing for parameter Discovery vulnerabilities often lurk out of sight in overlooked or forgotten features that",
    "start": "833079",
    "end": "840160"
  },
  {
    "text": "can only be accessed via hidden parameters to discover those you might use a tool like Ram minor which guesses",
    "start": "840160",
    "end": "847279"
  },
  {
    "text": "parameter names or header names and then looks at the response to see if they did",
    "start": "847279",
    "end": "853320"
  },
  {
    "text": "anything that means if a valid parameter doesn't change the response you won't detect it and you'll miss the exploit so",
    "start": "853320",
    "end": "860880"
  },
  {
    "text": "for my first bulk timing attack I decided to fix this by making param minor look at the response time as well",
    "start": "860880",
    "end": "868480"
  },
  {
    "text": "as the response contents and then I just ran that on the pipeline of 20,000",
    "start": "868480",
    "end": "875680"
  },
  {
    "text": "sites and to my surprise this really worked it revealed tons of parameters",
    "start": "875959",
    "end": "883120"
  },
  {
    "text": "and headers that I would never have found otherwise including some completely Crazy Ones like a web server",
    "start": "883120",
    "end": "889240"
  },
  {
    "text": "that takes a HTTP header called common config and it that's revealed by a 5",
    "start": "889240",
    "end": "895199"
  },
  {
    "text": "millisecond delay which is triggered by adding the header unless the header value is valid Json on another site I",
    "start": "895199",
    "end": "903160"
  },
  {
    "text": "was able to detect a header even though they never actually sent me a response ever they always reset my connection but",
    "start": "903160",
    "end": "910560"
  },
  {
    "text": "they took longer to reset the connection if I sent a certain header which I think it might have been authorization but I",
    "start": "910560",
    "end": "917320"
  },
  {
    "text": "didn't write down the header name at the time so I'm not sure it also detects some really useful",
    "start": "917320",
    "end": "922759"
  },
  {
    "text": "things and here's one of them uh what do you think what do you think is happening here",
    "start": "922759",
    "end": "929480"
  },
  {
    "text": "when you see a massive time Gap like this that can indicate a cash so in this",
    "start": "929480",
    "end": "936319"
  },
  {
    "text": "example we can see changing the value of the ID parameter is causing a cache Miss",
    "start": "936319",
    "end": "941440"
  },
  {
    "text": "and changing the value of arbitrary other parameter is not we're getting a cash hit and a fast response that tells",
    "start": "941440",
    "end": "948319"
  },
  {
    "text": "us that they're only including certain parameters in the cash key which means",
    "start": "948319",
    "end": "953399"
  },
  {
    "text": "two things one they're really likely to be vulnerable to cash poisoning V",
    "start": "953399",
    "end": "958959"
  },
  {
    "text": "vulnerabilities because this type of configuration is extremely dangerous and",
    "start": "958959",
    "end": "964440"
  },
  {
    "text": "hard to get right secondly clearly they've added the ID parameter to this key explicitly so",
    "start": "964440",
    "end": "973360"
  },
  {
    "text": "that means it's highly likely that that website supports an parameter called ID somewhere on that site in other words",
    "start": "973360",
    "end": "981839"
  },
  {
    "text": "with timing you can sometimes detect parameters on different",
    "start": "981839",
    "end": "987120"
  },
  {
    "text": "pages the challenge in this research came from somewhere completely",
    "start": "987120",
    "end": "992160"
  },
  {
    "text": "unexpected it's that time analysis is too powerful because almost everything",
    "start": "992160",
    "end": "999279"
  },
  {
    "text": "causes a time difference it's really easy to let your own assumptions lead",
    "start": "999279",
    "end": "1004360"
  },
  {
    "text": "you to the wrong conclusion and to illustrate this because you might find that hard to",
    "start": "1004360",
    "end": "1010600"
  },
  {
    "text": "believe I'm going to do a live demo and in the spirit of this presentation I'm",
    "start": "1010600",
    "end": "1015959"
  },
  {
    "text": "targeting a live remote system uh so",
    "start": "1015959",
    "end": "1022440"
  },
  {
    "text": "here as you can see we've got a request to a website that I have redacted",
    "start": "1022440",
    "end": "1028600"
  },
  {
    "text": "because it's a live system I don't control it I don't even know what country it's in and if we send this a",
    "start": "1028600",
    "end": "1034160"
  },
  {
    "text": "few times so I'm going to read out the time that's in the bottom right here because it's probably too small for you",
    "start": "1034160",
    "end": "1039400"
  },
  {
    "text": "to see so we're getting this response in about 160 milliseconds about 165 average",
    "start": "1039400",
    "end": "1047160"
  },
  {
    "text": "now what Pam Miner noticed is that if you send a parameter called",
    "start": "1047160",
    "end": "1052960"
  },
  {
    "text": "exec and you send that then the response now takes about 175 milliseconds it's",
    "start": "1052960",
    "end": "1059400"
  },
  {
    "text": "taking about 10 milliseconds longer to send us this response so at first glance you might",
    "start": "1059400",
    "end": "1066679"
  },
  {
    "text": "think that maybe this target has a little back door and it's trying to execute that as a shell command and",
    "start": "1066679",
    "end": "1073520"
  },
  {
    "text": "we've got unauthenticated remote code execution on This Server however that is sadly not the",
    "start": "1073520",
    "end": "1081039"
  },
  {
    "text": "case uh one clue is that if you try to send a payload like this uh old school",
    "start": "1081039",
    "end": "1087360"
  },
  {
    "text": "shell shock payload here the server oh the server resets the",
    "start": "1087360",
    "end": "1093240"
  },
  {
    "text": "connection uh it may reset the connection it's not responding that's not supposed to happen",
    "start": "1093240",
    "end": "1099919"
  },
  {
    "text": "anyway you get the gist there's something funny happening when we send this payload right uh I wonder what",
    "start": "1099919",
    "end": "1105720"
  },
  {
    "text": "happens if I do it again who knows anyway so I hope that server hasn't just",
    "start": "1105720",
    "end": "1112360"
  },
  {
    "text": "gone down uh so that's one clue the other clue that something a bit funny is",
    "start": "1112360",
    "end": "1118679"
  },
  {
    "text": "happening is that we also see this time delay with certain other parameter names like eval so what's actually happened",
    "start": "1118679",
    "end": "1126760"
  },
  {
    "text": "here is this is a web application firewall and what's happening is when it",
    "start": "1126760",
    "end": "1133000"
  },
  {
    "text": "sees a parameter called exec it thinks that looks suspicious and I'm going to do some extra processing on this request",
    "start": "1133000",
    "end": "1138440"
  },
  {
    "text": "and that that's what's causing the delay that we observed uh I'm just going to send one more request to see if this",
    "start": "1138440",
    "end": "1144400"
  },
  {
    "text": "targets up it is great okay so you might think okay it's a false positive let's",
    "start": "1144400",
    "end": "1150320"
  },
  {
    "text": "give up on this Target and move on but personally I was intrigued I wanted to know well okay if we send this once and",
    "start": "1150320",
    "end": "1158600"
  },
  {
    "text": "they do each figure is a delay what happens if we send it 10 times and the",
    "start": "1158600",
    "end": "1165159"
  },
  {
    "text": "answer is this response is now taking 300 Mill seconds to come back so we've",
    "start": "1165159",
    "end": "1170200"
  },
  {
    "text": "slowed it down by like an extra 200 milliseconds so the next logical",
    "start": "1170200",
    "end": "1175679"
  },
  {
    "text": "question from here is well how many times can we specify this right because presumably they're thrashing their CPU",
    "start": "1175679",
    "end": "1182400"
  },
  {
    "text": "analyzing this request and if we specify it quite a few times then maybe we can",
    "start": "1182400",
    "end": "1189360"
  },
  {
    "text": "trigger a denial of service uh so if I send this you will see this does in fact",
    "start": "1189360",
    "end": "1195159"
  },
  {
    "text": "take a very long time for the server to apply so it took just under 3 seconds so I'll just",
    "start": "1195159",
    "end": "1204679"
  },
  {
    "text": "send this a couple more times so we add 2.8 seconds 3.1 seconds",
    "start": "1204679",
    "end": "1211280"
  },
  {
    "text": "and 3.1 seconds so now great that's a",
    "start": "1211280",
    "end": "1216799"
  },
  {
    "text": "nice denial of service Vector but there's something even more interesting here because if I just add this",
    "start": "1216799",
    "end": "1222760"
  },
  {
    "text": "parameter a couple of extra times and then send it again then the response has",
    "start": "1222760",
    "end": "1228880"
  },
  {
    "text": "come back in 2.6 milliseconds the response has come back 300 milliseconds",
    "start": "1228880",
    "end": "1234240"
  },
  {
    "text": "faster so now just through timing we've learned something else which is that",
    "start": "1234240",
    "end": "1239679"
  },
  {
    "text": "when we add this extra couple of parameters we go over some kind of threshold and clearly we've hit some",
    "start": "1239679",
    "end": "1246360"
  },
  {
    "text": "kind of different code path so the next logical question now is well if they're responding faster maybe they're doing",
    "start": "1246360",
    "end": "1253640"
  },
  {
    "text": "less analysis on our request so maybe if we put this payload here that just",
    "start": "1253640",
    "end": "1260120"
  },
  {
    "text": "causes a connection reset or makes the server timeout they will the pay maybe the",
    "start": "1260120",
    "end": "1266400"
  },
  {
    "text": "payload will get through uh it did when I practiced",
    "start": "1266400",
    "end": "1272360"
  },
  {
    "text": "this there we go so using nothing but timing analysis we found a complete",
    "start": "1273200",
    "end": "1281159"
  },
  {
    "text": "bypass for this web application file uh that's that's really quite powerful and",
    "start": "1281159",
    "end": "1288320"
  },
  {
    "text": "it shows how you can use timing to reverse uh to to reverse engineer the",
    "start": "1288320",
    "end": "1295960"
  },
  {
    "text": "service operation uh now after I found that technique it was discovered by some",
    "start": "1295960",
    "end": "1303159"
  },
  {
    "text": "other people uh and it has been made uh it's been integrated into a cool tool",
    "start": "1303159",
    "end": "1309600"
  },
  {
    "text": "called NOA pleas so go check that out but that detour although it ended with a",
    "start": "1309600",
    "end": "1315640"
  },
  {
    "text": "nice finding it left me wondering how many of my findings were genuine parameters exposing real Attack surface",
    "start": "1315640",
    "end": "1323240"
  },
  {
    "text": "so I did a kind of a case study to try and confirm this issue better I decided",
    "start": "1323240",
    "end": "1328320"
  },
  {
    "text": "to focus on HTP headers that enable IP sping so here's an",
    "start": "1328320",
    "end": "1334840"
  },
  {
    "text": "example uh detection and you can see here when we send true client IP with a domain name the response comes back 5",
    "start": "1334840",
    "end": "1341960"
  },
  {
    "text": "milliseconds slower but if we Replay that request it comes back fast again",
    "start": "1341960",
    "end": "1347720"
  },
  {
    "text": "and that is evidence of DNS caching that 5 millisecond delay that you only get",
    "start": "1347720",
    "end": "1353080"
  },
  {
    "text": "the first time is the web server that we're targeting sending a DNS lookup all",
    "start": "1353080",
    "end": "1358520"
  },
  {
    "text": "the way to the authoritative server for example.com uh their operating system is",
    "start": "1358520",
    "end": "1364559"
  },
  {
    "text": "saving that response in the DNS cache so the second time round the network round",
    "start": "1364559",
    "end": "1370120"
  },
  {
    "text": "trip is skipped and the response comes back faster so by looking for this",
    "start": "1370120",
    "end": "1375480"
  },
  {
    "text": "header and then doing a follow-up test for DNS caching I found that of my targets about over",
    "start": "1375480",
    "end": "1381080"
  },
  {
    "text": "the majority had visible audible DNS caching uh I was also able to confirm",
    "start": "1381080",
    "end": "1388440"
  },
  {
    "text": "them with an out of band technique uh which is looking to see if changing the",
    "start": "1388440",
    "end": "1393799"
  },
  {
    "text": "domain to a domain eye control causes a DNS ping back to reach my server and",
    "start": "1393799",
    "end": "1399600"
  },
  {
    "text": "virtually all the targets that had visible DNS caching also caused a DNS",
    "start": "1399600",
    "end": "1404960"
  },
  {
    "text": "ping ping back so we can see that technique is reliable but what about the other 170 findings",
    "start": "1404960",
    "end": "1412279"
  },
  {
    "text": "well those are pretty legit from the manual samping that I did here's one",
    "start": "1412279",
    "end": "1419559"
  },
  {
    "text": "example what do you think might be causing this delay when I spoof an IP",
    "start": "1419559",
    "end": "1425159"
  },
  {
    "text": "address instead of a host name here's a clue when you log into the",
    "start": "1425159",
    "end": "1431760"
  },
  {
    "text": "site and view your login history they include your IP address and the location",
    "start": "1431760",
    "end": "1437360"
  },
  {
    "text": "associated with that IP so I think this delay is being caused by my IP getting",
    "start": "1437360",
    "end": "1443919"
  },
  {
    "text": "passed to a third- party geol lookup service and when I pass in a domain name",
    "start": "1443919",
    "end": "1449760"
  },
  {
    "text": "that's failing the IP address validation on the server and it's bypassing this",
    "start": "1449760",
    "end": "1455200"
  },
  {
    "text": "network roundtrip and making the response come back faster I got a bounty for that one but the real value there",
    "start": "1455200",
    "end": "1462520"
  },
  {
    "text": "was in the takeaway which is that time analysis is really good at revealing control flow changes",
    "start": "1462520",
    "end": "1469000"
  },
  {
    "text": "like exceptions and that realization set me up for the next phase of This research",
    "start": "1469000",
    "end": "1475799"
  },
  {
    "text": "triggering and spotting exceptions is a core part of testing for server side injection vulnerabilities and with",
    "start": "1475799",
    "end": "1482880"
  },
  {
    "text": "timing we can do it better here's my first finding you probably recognize",
    "start": "1482880",
    "end": "1488320"
  },
  {
    "text": "this classic SQL injection payow pair but the response is completely static",
    "start": "1488320",
    "end": "1495000"
  },
  {
    "text": "it's the response time that gives the game away I confirmed that issue and unfortunately when I reported it someone",
    "start": "1495000",
    "end": "1501520"
  },
  {
    "text": "else had found it first and you can probably guess why plenty of people look",
    "start": "1501520",
    "end": "1507440"
  },
  {
    "text": "for SEL injection using sleep statements and that doesn't require advanced timing",
    "start": "1507440",
    "end": "1513760"
  },
  {
    "text": "analysis so overall we can infer timing is a bad fit for detecting injection",
    "start": "1513760",
    "end": "1519760"
  },
  {
    "text": "into sleep capable languages unless the target has a web application file or",
    "start": "1519760",
    "end": "1525000"
  },
  {
    "text": "such like that's just blocking sleep keywords but what about less powerful injections",
    "start": "1525000",
    "end": "1531880"
  },
  {
    "text": "well it's seriously good for that here's one example this is a blind serde Json",
    "start": "1531880",
    "end": "1539880"
  },
  {
    "text": "injection detected thanks to a 0.2 millisecond difference in the response",
    "start": "1539880",
    "end": "1545960"
  },
  {
    "text": "time the hard part with this finding and findings like this is gaining enough",
    "start": "1545960",
    "end": "1551039"
  },
  {
    "text": "understanding to actually exploit them here we can see that there's also a client side Json injection in the",
    "start": "1551039",
    "end": "1557840"
  },
  {
    "text": "response to us and that seems like a bit of a coincidence and exploring it I saw that",
    "start": "1557840",
    "end": "1564039"
  },
  {
    "text": "if I sent a Long Key then the payload that I was sending to them got got",
    "start": "1564039",
    "end": "1569799"
  },
  {
    "text": "redacted in the reflection back to me and crucially that redaction made the",
    "start": "1569799",
    "end": "1576559"
  },
  {
    "text": "response timing signal revert and go away so by combining that visible",
    "start": "1576559",
    "end": "1582960"
  },
  {
    "text": "information with that timing data we can infer that something on the server is",
    "start": "1582960",
    "end": "1588679"
  },
  {
    "text": "paing the same response that gets sent to us and that's where their serde",
    "start": "1588679",
    "end": "1593880"
  },
  {
    "text": "injection is occurring so it's potentially plug in analytic software or",
    "start": "1593880",
    "end": "1598960"
  },
  {
    "text": "something like that ultimately I couldn't build an exploit for this target so I had to give up and move on",
    "start": "1598960",
    "end": "1605000"
  },
  {
    "text": "but at least we got some understanding of what was happening my most successful injection",
    "start": "1605000",
    "end": "1610520"
  },
  {
    "text": "probe was for blind server side parameter pollution which worked by looking at the response time for",
    "start": "1610520",
    "end": "1616080"
  },
  {
    "text": "reserved characters like hash and non-reserved characters like exclamation marks but once again to build an exploit",
    "start": "1616080",
    "end": "1623919"
  },
  {
    "text": "you almost need to know what to expect something I found helped with",
    "start": "1623919",
    "end": "1629039"
  },
  {
    "text": "this is the concept of bug uple gangers which is non-blind variations of the same",
    "start": "1629039",
    "end": "1635640"
  },
  {
    "text": "vulnerability in summary timing analysis will reveal plenty of servici side",
    "start": "1635640",
    "end": "1640760"
  },
  {
    "text": "injection but the stuff it finds can be really quite hard to",
    "start": "1640760",
    "end": "1645919"
  },
  {
    "text": "exploit the majority of my valid exp points during this research came from the third and final phase when I",
    "start": "1645919",
    "end": "1652640"
  },
  {
    "text": "realized you could use time analysis to detect a vulnerability class that had seemed almost undetectable to me for the",
    "start": "1652640",
    "end": "1659679"
  },
  {
    "text": "last 7 years back in 2017 I explored and overlooked type of server side request",
    "start": "1659679",
    "end": "1667120"
  },
  {
    "text": "forgery I sent a bunch of websites of requests that said please forward this to my server by placing my domain in the",
    "start": "1667120",
    "end": "1674600"
  },
  {
    "text": "host header in the request sent to their site if this request then actually arrived at my site that meant I'd found",
    "start": "1674600",
    "end": "1681399"
  },
  {
    "text": "a misconfigured reverse proxy which I could then use to plunder their internal Network I had a lot of fun with that",
    "start": "1681399",
    "end": "1688919"
  },
  {
    "text": "research and even ended up exploiting my own ISP by accident because they were man in the middling me uh which was rude",
    "start": "1688919",
    "end": "1695960"
  },
  {
    "text": "of them uh but I knew that this had a blind spot it won't detect scoped ssrf",
    "start": "1695960",
    "end": "1703880"
  },
  {
    "text": "which is where the reverse proxy will only access subdomains of the target",
    "start": "1703880",
    "end": "1710159"
  },
  {
    "text": "company there's a bunch of ways this can happen but the result is the same it",
    "start": "1710159",
    "end": "1715679"
  },
  {
    "text": "can't you've just got a bug that's almost as powerful as regular server side request forgery but can't be",
    "start": "1715679",
    "end": "1722039"
  },
  {
    "text": "detected using DNS pingbacks because they either won't be triggered or they won't make their way out of the target",
    "start": "1722039",
    "end": "1727919"
  },
  {
    "text": "Network to the attacker server detecting this is really quite",
    "start": "1727919",
    "end": "1733880"
  },
  {
    "text": "hard to take this response sample here we can see they're doing host had of validation but we don't know if they're trying to",
    "start": "1733880",
    "end": "1740760"
  },
  {
    "text": "connect to the specified hosting to detect scoped ssrf we need to",
    "start": "1740760",
    "end": "1746120"
  },
  {
    "text": "answer the question are they trying to connect to the host name in The Host header and timing is perfectly suited",
    "start": "1746120",
    "end": "1753200"
  },
  {
    "text": "for this thanks to the DNS caching behavior that we saw earlier it's that",
    "start": "1753200",
    "end": "1758840"
  },
  {
    "text": "easy well almost because some targets don't support DNS caching or don't cach failed DNS lookups but there's an",
    "start": "1758840",
    "end": "1765880"
  },
  {
    "text": "alternative way DNS have a maximum length and if you go one",
    "start": "1765880",
    "end": "1770919"
  },
  {
    "text": "character over that the DNS the DNS client will either refuse to send the query and the response will come back",
    "start": "1770919",
    "end": "1778159"
  },
  {
    "text": "faster or they will just time out and the response will take ages to come back",
    "start": "1778159",
    "end": "1783440"
  },
  {
    "text": "so by combining these two techniques we can reliably detect almost every scoped",
    "start": "1783440",
    "end": "1788559"
  },
  {
    "text": "ssrf vulnerability in existence as usual this looks kind of",
    "start": "1788559",
    "end": "1794880"
  },
  {
    "text": "obvious uh in retrospect now I put it on a slide but it exposed a lot of vulnerable servers",
    "start": "1794880",
    "end": "1801240"
  },
  {
    "text": "uh it exposed hundreds of reverse proxies which in turn exposed thousands of internal domains so I decided to",
    "start": "1801240",
    "end": "1808840"
  },
  {
    "text": "automate the follow-up step of finding valuable internal targets and in in",
    "start": "1808840",
    "end": "1815519"
  },
  {
    "text": "pamina you can run this for yourself using the option exploit scoped ssrf what this does is it looks up every",
    "start": "1815519",
    "end": "1822919"
  },
  {
    "text": "known subdomain and it tries to access them twice once directly like a normal",
    "start": "1822919",
    "end": "1828399"
  },
  {
    "text": "user would and once through the proxy and then it will flag if it sees any significant differences in the two",
    "start": "1828399",
    "end": "1834919"
  },
  {
    "text": "responses such as a missing header that header might not look like much but what it means is we found a",
    "start": "1834919",
    "end": "1843360"
  },
  {
    "text": "different route to this destination and that's where things are going to get interesting shortly on the service this",
    "start": "1843360",
    "end": "1850960"
  },
  {
    "text": "host headed guessing strategy is really quite similar to Virtual host brute forcing but the outcomes and opportun",
    "start": "1850960",
    "end": "1858080"
  },
  {
    "text": "ities it gives us are very different the findings fell into four main categories",
    "start": "1858080",
    "end": "1863480"
  },
  {
    "text": "and the first three are hilariously easy to exploit the simplest exploit is where",
    "start": "1863480",
    "end": "1869639"
  },
  {
    "text": "you can see the target from outside but can't directly access it for example on",
    "start": "1869639",
    "end": "1874799"
  },
  {
    "text": "one target you could see the DNS record pointing at their sonar Cube installation but the firewall would just",
    "start": "1874799",
    "end": "1880720"
  },
  {
    "text": "reset your connection but using the reverse proxy I was able to defeat the firewall by going round it that's the",
    "start": "1880720",
    "end": "1887919"
  },
  {
    "text": "the key use of reverse proxies you see the defense then you go around there's a",
    "start": "1887919",
    "end": "1894080"
  },
  {
    "text": "common variation where the internal system doesn't have a public DNS record",
    "start": "1894080",
    "end": "1899360"
  },
  {
    "text": "but it does have a private one which the reverse proxy can access there's a huge",
    "start": "1899360",
    "end": "1905240"
  },
  {
    "text": "number of pre-prod environments exposed to anyone using this technique but the most interesting targets I found during",
    "start": "1905240",
    "end": "1912480"
  },
  {
    "text": "this research were pre-launch systems that were still under construction",
    "start": "1912480",
    "end": "1918080"
  },
  {
    "text": "in particular I discovered an Administration consult with apparently",
    "start": "1918080",
    "end": "1923480"
  },
  {
    "text": "Public Access on a seriously cool looking US government system which I'm",
    "start": "1923480",
    "end": "1930120"
  },
  {
    "text": "gutted I can't provide any additional details about uh I reported that issue",
    "start": "1930120",
    "end": "1935880"
  },
  {
    "text": "and this when the system went live a few months later the admin console was nowhere in sight so it looks fixed I",
    "start": "1935880",
    "end": "1943919"
  },
  {
    "text": "found a similar issue in Red Bull which is mainly notable because they paid me in cans rather than",
    "start": "1943919",
    "end": "1951240"
  },
  {
    "text": "cash other valuable targets are publicly accessible but sit behind front in servers which enforce inconvenient",
    "start": "1951240",
    "end": "1958360"
  },
  {
    "text": "security rules that block attacks or restrict access to valuable endpoints on",
    "start": "1958360",
    "end": "1963399"
  },
  {
    "text": "one target there was an internal admin console that just gave a 403 but by going round that front end I could",
    "start": "1963399",
    "end": "1969639"
  },
  {
    "text": "access the system and log in as a normal user the final and most subtle category",
    "start": "1969639",
    "end": "1976519"
  },
  {
    "text": "is front end in person personation attacks front-end servers often add internal HTTP headers onto requests",
    "start": "1976519",
    "end": "1983840"
  },
  {
    "text": "before forwarding them to the back end and the back ends trust these implicitly which enables a type of attack that's",
    "start": "1983840",
    "end": "1991360"
  },
  {
    "text": "kind of known in pieces but not appreciated as a full Standalone bug class everyone knows that you can spoof",
    "start": "1991360",
    "end": "1998919"
  },
  {
    "text": "IP address using headers but few people are paying attention to what else gets",
    "start": "1998919",
    "end": "2004000"
  },
  {
    "text": "transmitted in these headers and yes that's two real examples from New Relic",
    "start": "2004000",
    "end": "2009639"
  },
  {
    "text": "in theory this header behavior is safe right because if an attacker spoofs a",
    "start": "2009639",
    "end": "2015200"
  },
  {
    "text": "header the front end will just overwrite it but with a reverse proxy we can just",
    "start": "2015200",
    "end": "2021159"
  },
  {
    "text": "go round the front end bypass the header overwrite impersonate the front end to",
    "start": "2021159",
    "end": "2026200"
  },
  {
    "text": "the back end and exploit this trust relationship in addition to being exploitable via reverse proxies you can",
    "start": "2026200",
    "end": "2033559"
  },
  {
    "text": "also exploit this via unintended direct access to the back end or with request smuggling which is how I exploited New",
    "start": "2033559",
    "end": "2040399"
  },
  {
    "text": "Relic in the example on the previous slide a while back or with header masking or mutation techniques front-end",
    "start": "2040399",
    "end": "2047360"
  },
  {
    "text": "impersonation attacks are really powerful and the only hard part is guessing the names of the internal",
    "start": "2047360",
    "end": "2053200"
  },
  {
    "text": "headers which is something that timing can help with so that's all the techniques I've",
    "start": "2053200",
    "end": "2059480"
  },
  {
    "text": "got for you we've seen timing analysis is useful for Recon reverse engineering and finding exploits if you'd like to",
    "start": "2059480",
    "end": "2066560"
  },
  {
    "text": "try those techniques out for your yourself I've made a small CTF at listen tothe Whispers",
    "start": "2066560",
    "end": "2072040"
  },
  {
    "text": "Donnet for me this research is only a success if people actually start using",
    "start": "2072040",
    "end": "2077599"
  },
  {
    "text": "timing attacks dayto day uh I had planned to spend a month after this presentation improving the tooling uh",
    "start": "2077599",
    "end": "2085040"
  },
  {
    "text": "but obviously I've got other plans now uh but at some point I am going to do this so if you have any issues with",
    "start": "2085040",
    "end": "2091720"
  },
  {
    "text": "these tools uh please let me know uh and I'll take a look and I'd love to hear feature requests for them too as far as",
    "start": "2091720",
    "end": "2099760"
  },
  {
    "text": "further research I think the most valuable thing you can do at this point with the least",
    "start": "2099760",
    "end": "2105359"
  },
  {
    "text": "amount of effort is finding valuable questions that time analysis can be used to answer and also looking at specific",
    "start": "2105359",
    "end": "2112280"
  },
  {
    "text": "Frameworks and service to to find widespread signal amplification techniques which may make things like",
    "start": "2112280",
    "end": "2118880"
  },
  {
    "text": "that string comparison attack actually possible on those targets for defense uh don't use Wild",
    "start": "2118880",
    "end": "2126160"
  },
  {
    "text": "Card routing in Reverse proxy uh it's not a good idea uh in general basically",
    "start": "2126160",
    "end": "2133000"
  },
  {
    "text": "when you're coding an application assume attackers have full visibility on your server side execution flight they can't",
    "start": "2133000",
    "end": "2141240"
  },
  {
    "text": "read your variables but they can see which branches your code is taken and maybe things like how many iterations",
    "start": "2141240",
    "end": "2147160"
  },
  {
    "text": "each Loop is going through if someone reports uh proof of concept using only",
    "start": "2147160",
    "end": "2152599"
  },
  {
    "text": "timing based evidence then well yeah ask for evidence but",
    "start": "2152599",
    "end": "2160400"
  },
  {
    "text": "patch it anyway because your server your security should not rely on noise and if",
    "start": "2160400",
    "end": "2165640"
  },
  {
    "text": "you're configuring a server you can break the single packet attack using a micro throttle as a defense in depth",
    "start": "2165640",
    "end": "2171960"
  },
  {
    "text": "measure there's lots of further reading available if you just go to the white paper on ports. net resesarch that",
    "start": "2171960",
    "end": "2178720"
  },
  {
    "text": "contains all the other links on this page if you enjoyed this talk you may",
    "start": "2178720",
    "end": "2184160"
  },
  {
    "text": "also like the following two talks from my colleagues Gareth is talking this afternoon and his talk will leave you",
    "start": "2184160",
    "end": "2189599"
  },
  {
    "text": "terrified of email addresses and Martin's talk tomorrow is going to cause",
    "start": "2189599",
    "end": "2195040"
  },
  {
    "text": "some Panic among certain CDN vendors the three key things to remember",
    "start": "2195040",
    "end": "2201440"
  },
  {
    "text": "are the web timing attacks and answer some seriously difficult questions the",
    "start": "2201440",
    "end": "2206960"
  },
  {
    "text": "single packet attack makes them local Universal and feasible and the murmurs",
    "start": "2206960",
    "end": "2212560"
  },
  {
    "text": "are always there they're just waiting for you to listen I'm going to take a",
    "start": "2212560",
    "end": "2217839"
  },
  {
    "text": "couple of minutes of questions now and if you have any more after that feel free to Chuck me and email uh don't",
    "start": "2217839",
    "end": "2224440"
  },
  {
    "text": "forget to follow me on X thank you for",
    "start": "2224440",
    "end": "2229078"
  },
  {
    "text": "listening folks we do have a couple minutes for questions if anyone has any um make a single file line on all the",
    "start": "2234400",
    "end": "2240480"
  },
  {
    "text": "three microphones and uh should be able to hear",
    "start": "2240480",
    "end": "2245720"
  },
  {
    "text": "you for",
    "start": "2246520",
    "end": "2250520"
  },
  {
    "text": "James can you hear him yeah I can't hear any questions no test yep thanks for the presentation",
    "start": "2295160",
    "end": "2303680"
  },
  {
    "text": "and uh congratulations on the addition to your family I'm wondering about the",
    "start": "2303680",
    "end": "2308800"
  },
  {
    "text": "Waf bypass that you had discovered were you able to identify the vendor and let",
    "start": "2308800",
    "end": "2313839"
  },
  {
    "text": "them know and is there a fix in works or what what's the deal with that uh so I",
    "start": "2313839",
    "end": "2319560"
  },
  {
    "text": "believe that server was a big IP uh I was planning to notify them but uh this",
    "start": "2319560",
    "end": "2327160"
  },
  {
    "text": "technique was published uh by someone else um couple of months ago and",
    "start": "2327160",
    "end": "2333599"
  },
  {
    "text": "basically it works on a lot of web application firewall uh if you Google",
    "start": "2333599",
    "end": "2338920"
  },
  {
    "text": "that tool no W please you'll find it works on virtually all of them uh it's absolutely crazy uh yeah if you're using",
    "start": "2338920",
    "end": "2347040"
  },
  {
    "text": "any firewalls uh I would recommend taking a look deep into the settings and seeing if you can find this this request",
    "start": "2347040",
    "end": "2353680"
  },
  {
    "text": "an an analysis limit uh and maximize it or switch it off",
    "start": "2353680",
    "end": "2361040"
  }
]