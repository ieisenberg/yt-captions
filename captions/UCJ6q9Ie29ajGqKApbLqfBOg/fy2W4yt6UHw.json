[
  {
    "start": "0",
    "end": "38000"
  },
  {
    "text": "[Music]",
    "start": "3140",
    "end": "14939"
  },
  {
    "text": "[Music] welcome to black hat briefings 2001 held July 11th through the 12th in Los Vegas",
    "start": "17910",
    "end": "24439"
  },
  {
    "text": "Nevada this is videotape number 12 hit them where it hurts finding holes in Coots",
    "start": "24439",
    "end": "31480"
  },
  {
    "text": "[Music]",
    "start": "31480",
    "end": "38559"
  },
  {
    "start": "38000",
    "end": "125000"
  },
  {
    "text": "software okay so um hello I hope you had a good lunch and I hope you're not too",
    "start": "38559",
    "end": "44719"
  },
  {
    "text": "sleepy after lunch because my speech will be boring us enough as it is and my",
    "start": "44719",
    "end": "49800"
  },
  {
    "text": "name is halvar I'm a reverse engineer for blackhead Consulting and well I'm going to speak about how to find",
    "start": "49800",
    "end": "56199"
  },
  {
    "text": "security vulnerabilities in close sourced software um and um this this",
    "start": "56199",
    "end": "61600"
  },
  {
    "text": "entire speech will be pretty long and therefore it's been split into two halves and the first half will begin",
    "start": "61600",
    "end": "68560"
  },
  {
    "text": "with some legal mumbo jumbo concerning reverse engineering because technically",
    "start": "68560",
    "end": "74040"
  },
  {
    "text": "when you do reverse engineer you're well not exactly threading on safe grounds so",
    "start": "74040",
    "end": "80640"
  },
  {
    "text": "um you have to be aware of a few issues concerning this be because you can get your suit you can get your ass suit off",
    "start": "80640",
    "end": "88759"
  },
  {
    "text": "when you do it unless you live in a nice thr country like Thailand Asia somewhere",
    "start": "88759",
    "end": "94040"
  },
  {
    "text": "they don't really have stringent laws concerning this so it's a nice place to move",
    "start": "94040",
    "end": "99920"
  },
  {
    "text": "anyways all right after I've gone over the law crap",
    "start": "100640",
    "end": "107640"
  },
  {
    "text": "I'll move on to the introduction to the topic of analyzing close S software for security vulnerabilities and",
    "start": "107640",
    "end": "113680"
  },
  {
    "text": "reliability and cover the various approaches that are used these days to well get an idea of how good software is",
    "start": "113680",
    "end": "120799"
  },
  {
    "text": "or even find Z zero day so as soon as we're done with the",
    "start": "120799",
    "end": "127039"
  },
  {
    "text": "different approaches I'll cover the various or the most common cc++ programming mistakes that are being made",
    "start": "127039",
    "end": "133599"
  },
  {
    "text": "over and over again all the time and that are those that we are on the lookout for because they will give us",
    "start": "133599",
    "end": "139519"
  },
  {
    "text": "the well capability of executing arbitrary code on somebody else's computer and that's always a fun thing",
    "start": "139519",
    "end": "145080"
  },
  {
    "text": "to do I'll then move on in uh well to the",
    "start": "145080",
    "end": "151160"
  },
  {
    "text": "process of spotting these things in the binary where no sources available specifically in the x86",
    "start": "151160",
    "end": "158280"
  },
  {
    "text": "disassembly afterwards I'll demonstrate how to find a buffer overrun or well yeah find find a vulnerability in a",
    "start": "159200",
    "end": "166120"
  },
  {
    "text": "piece of crap software",
    "start": "166120",
    "end": "172200"
  },
  {
    "text": "and then we'll all need a break especially me so this is the video splitter",
    "start": "172200",
    "end": "181720"
  },
  {
    "text": "um I think it's coming out here this is a split uh like a",
    "start": "182800",
    "end": "189519"
  },
  {
    "text": "switch well the output is",
    "start": "189519",
    "end": "193560"
  },
  {
    "text": "here well yeah I want a splitter in here and we put these two on",
    "start": "197640",
    "end": "203920"
  },
  {
    "text": "there no splitter for me yet",
    "start": "207840",
    "end": "211760"
  },
  {
    "text": "who's playing with the",
    "start": "214840",
    "end": "217560"
  },
  {
    "text": "lights okay so after we've all had our coffee and uh try to wake up during the",
    "start": "222439",
    "end": "228480"
  },
  {
    "text": "break I'll continue with how to patch the binaries in case your vendor is not",
    "start": "228480",
    "end": "234720"
  },
  {
    "text": "as responsive as you'd like him to be",
    "start": "234720",
    "end": "239280"
  },
  {
    "text": "I'll then well go over the theory of dealing with runtime encrypted binaries because you sometimes stumble over those",
    "start": "240079",
    "end": "246040"
  },
  {
    "text": "uh I'll not go into the the real hands on with that because that's something that can easily take about a week and",
    "start": "246040",
    "end": "253200"
  },
  {
    "text": "furthermore Microsoft always wants me to speak about um digital Rights Management and reverse engineering and stuff and",
    "start": "253200",
    "end": "258280"
  },
  {
    "text": "I'm not going to do that so I'll then go into the process of",
    "start": "258280",
    "end": "264720"
  },
  {
    "text": "automating the boring stuff um staring at a disassembly is nobody's favorite pastime not even mine",
    "start": "264720",
    "end": "270720"
  },
  {
    "text": "and it's well always good if you can have a script do your work and you go off to lunch so um I'll cover how I",
    "start": "270720",
    "end": "278880"
  },
  {
    "text": "wrote a script to scan for suspicious Sprint FS Sprint FS that can potentially to buffer overruns contrary to what the",
    "start": "278880",
    "end": "285479"
  },
  {
    "text": "slide says I'm not going to cover um how to automatically scan for srn copies",
    "start": "285479",
    "end": "290639"
  },
  {
    "text": "because the script is so buggy that I'm a bit afraid it will BL up on me if I show it",
    "start": "290639",
    "end": "295800"
  },
  {
    "text": "so I will cover uh automated scanning performance string bux in firewall",
    "start": "295800",
    "end": "302280"
  },
  {
    "text": "one um afterwards I'll go into the process of reconstructing structures automatically which you will need to do",
    "start": "302280",
    "end": "309160"
  },
  {
    "text": "in order to analyze more complex software which uses lots of",
    "start": "309160",
    "end": "315080"
  },
  {
    "text": "structures and then I'll speak a bit about how to extend this to oop code how",
    "start": "315080",
    "end": "320160"
  },
  {
    "text": "to analyze stuff like IIs which is a pain in the rear to reverse engineer without being able to reconstruct",
    "start": "320160",
    "end": "325880"
  },
  {
    "text": "classes because oop code is really ugly when disassembled and unless you can reconstruct class data",
    "start": "325880",
    "end": "333720"
  },
  {
    "text": "structures what kind of joke is",
    "start": "337000",
    "end": "341080"
  },
  {
    "text": "this hey",
    "start": "345000",
    "end": "348240"
  },
  {
    "start": "351000",
    "end": "389000"
  },
  {
    "text": "there all right all right okay all is normal um well and after I'm done with",
    "start": "351319",
    "end": "358000"
  },
  {
    "text": "the um C++ o stuff I'll have free time to answer any questions but actually if",
    "start": "358000",
    "end": "363440"
  },
  {
    "text": "you have any questions during the speech just yell I'll gladly interrupt the speech and answer any questions you",
    "start": "363440",
    "end": "368800"
  },
  {
    "text": "might have as as long as they're not in relation to digital Rights",
    "start": "368800",
    "end": "374720"
  },
  {
    "text": "Management okay turn it",
    "start": "375400",
    "end": "380759"
  },
  {
    "text": "off well uh it's not really me who's uh in charge of the PA here",
    "start": "380759",
    "end": "388520"
  },
  {
    "start": "389000",
    "end": "430000"
  },
  {
    "text": "I'll just continue talking it's the legal stuff now anyways so okay so when you engineer then you're",
    "start": "389919",
    "end": "398160"
  },
  {
    "text": "basically breaking the license agreement that comes with the software and you're always obliged to click on it when you",
    "start": "398160",
    "end": "403680"
  },
  {
    "text": "install it so basically by breaking this contract you become liable for any",
    "start": "403680",
    "end": "408759"
  },
  {
    "text": "damages you cause this is bad because if you find some nice format string bug in a",
    "start": "408759",
    "end": "415000"
  },
  {
    "text": "high-profile e-commerce application or wherever and some kitties go out and own a server",
    "start": "415000",
    "end": "420280"
  },
  {
    "text": "well format the hard drive a bit afterwards and um the company suffers image loss and all that thing all those",
    "start": "420280",
    "end": "427080"
  },
  {
    "text": "things um you can get sued for quite insane",
    "start": "427080",
    "end": "433240"
  },
  {
    "start": "430000",
    "end": "525000"
  },
  {
    "text": "amounts of money so you don't really want to do that fortunately there are a few laws that do permit reverse",
    "start": "433240",
    "end": "440120"
  },
  {
    "text": "engineering for certain purposes unfortunately these laws do not really cover you",
    "start": "440120",
    "end": "447199"
  },
  {
    "text": "so now depending where you're living these laws are different in the EU there are a few laws in the US there are a few",
    "start": "447199",
    "end": "453440"
  },
  {
    "text": "laws in Asia there's no law so um I'll cover the European Union stuff",
    "start": "453440",
    "end": "460199"
  },
  {
    "text": "first um there is a 1991 European Union directive covering the legal protection",
    "start": "460199",
    "end": "466440"
  },
  {
    "text": "of computer programs now this is not a law it's a directive so a directive is",
    "start": "466440",
    "end": "472680"
  },
  {
    "text": "not a law it just tells courts to act in a certain way but does not force courts to act in a certain way you don't have",
    "start": "472680",
    "end": "478840"
  },
  {
    "text": "to understand understand this I for sure don't but um",
    "start": "478840",
    "end": "484039"
  },
  {
    "text": "this directive gives a reverse engineer the right to decompilation for interoperability and for error",
    "start": "484039",
    "end": "491000"
  },
  {
    "text": "correction now if you read the fine print or read what's not written there",
    "start": "491000",
    "end": "496759"
  },
  {
    "text": "it does not give you the right for error detection so um once you know there's a",
    "start": "496759",
    "end": "502479"
  },
  {
    "text": "bug you're allowed to reverse engineer to fix it but you're not allowed to find it in the first place using reverse",
    "start": "502479",
    "end": "508960"
  },
  {
    "text": "engineering so if you post something to backra hey I found this while I was digging around on the disassembly you can get",
    "start": "508960",
    "end": "517279"
  },
  {
    "text": "screwed so if you do reverse engineering in Europe and you find some neat zero",
    "start": "517760",
    "end": "523120"
  },
  {
    "text": "day keep it private okay um in the USA we have the",
    "start": "523120",
    "end": "528640"
  },
  {
    "start": "525000",
    "end": "644000"
  },
  {
    "text": "dmca and everybody loves the dmca actually in this case don't you",
    "start": "528640",
    "end": "535399"
  },
  {
    "text": "know the song d e MCA",
    "start": "535399",
    "end": "539320"
  },
  {
    "text": "so unless you get sued for copyright infringement all right um anyways the",
    "start": "543760",
    "end": "550839"
  },
  {
    "text": "dmca does have some good parts it grants you the right for reverse engineering for interoperability encryption research",
    "start": "550839",
    "end": "557200"
  },
  {
    "text": "and security testing so you would think that what we're doing is security testing well it's right and you have the",
    "start": "557200",
    "end": "562519"
  },
  {
    "text": "right to reverse engineer unfortunately the dmca also grants the author of the",
    "start": "562519",
    "end": "567720"
  },
  {
    "text": "program the full um intellectual property rights to his product so any knowledge you gain from reverse",
    "start": "567720",
    "end": "573800"
  },
  {
    "text": "engineering is his intellectual property so if you publish bugs he can claim intellectual ownership of that bug and",
    "start": "573800",
    "end": "580240"
  },
  {
    "text": "sue you hey this is not a joke he can sue you that way and you can get screwed",
    "start": "580240",
    "end": "586360"
  },
  {
    "text": "that way so if you're in the US and you find something using reverse engineering keep it",
    "start": "586360",
    "end": "591440"
  },
  {
    "text": "private so I think I'm pretty much done with the legal stuff hey I do have a switch didn't notice that I have a",
    "start": "591440",
    "end": "598240"
  },
  {
    "text": "second screen yet so okay the various approaches that exist to um analyzing the reliability of",
    "start": "598240",
    "end": "605959"
  },
  {
    "text": "software these days the first one is stress testing basically what you do is",
    "start": "605959",
    "end": "611040"
  },
  {
    "text": "you create a lot of long and malformed strings and send them at an application",
    "start": "611040",
    "end": "616360"
  },
  {
    "text": "there have been a few um well academic attempts to do this with the fuz project",
    "start": "616360",
    "end": "621720"
  },
  {
    "text": "and so on and there are a lot of pearl scripts like about a million of them who do this and then there is um Advanced",
    "start": "621720",
    "end": "628760"
  },
  {
    "text": "artificial intelligence um scanners like EI e retina who features the same",
    "start": "628760",
    "end": "635120"
  },
  {
    "text": "Advanced artificial intelligence as Pearl and um",
    "start": "635120",
    "end": "642010"
  },
  {
    "text": "[Applause] well so um that program will do the same",
    "start": "642010",
    "end": "647680"
  },
  {
    "text": "job if you're um more into clicking stuff than writing Pearl code anyways there are certain",
    "start": "647680",
    "end": "655040"
  },
  {
    "text": "advantages to this first off the process is very automatic so you fire off the stress testing script go to lunch go to",
    "start": "655040",
    "end": "661160"
  },
  {
    "text": "Party come back and hopefully you found a buffer overrun or hopefully you've not found a buffer overrun depending from",
    "start": "661160",
    "end": "666680"
  },
  {
    "text": "where you're coming so um secondly you don't need a really Specialized or skilled person to",
    "start": "666680",
    "end": "672240"
  },
  {
    "text": "use these things I mean everybody can write Pearl and I would presume everybody and his dog can use",
    "start": "672240",
    "end": "678760"
  },
  {
    "text": "ratina so um it's not like you have to pay some highly skilled expensive person",
    "start": "678760",
    "end": "684399"
  },
  {
    "text": "like me kidding all right um the stress",
    "start": "684399",
    "end": "689760"
  },
  {
    "text": "testing tool is in theory reusable for any given protocol so if you're stress testing semt or whatever you can use",
    "start": "689760",
    "end": "696839"
  },
  {
    "text": "that stressing tool on all SMTP servers you know like exchange and Domino and so",
    "start": "696839",
    "end": "702920"
  },
  {
    "text": "on now this is only a theoretical Pro because in reality nobody really well",
    "start": "702920",
    "end": "710320"
  },
  {
    "text": "aderes to the RFC I mean offre arin's entire work is based on people being incapable of following",
    "start": "710320",
    "end": "715639"
  },
  {
    "text": "rfc's and don't expect mail servers to follow the RFC so every mail server is basically talking a slightly different",
    "start": "715639",
    "end": "722480"
  },
  {
    "text": "dialect of SMTP and if your stress testing tool happens not to know that or not to know the particularities of a",
    "start": "722480",
    "end": "728639"
  },
  {
    "text": "dialect it will not find important things because it misses entire code branches okay so the cons of this",
    "start": "728639",
    "end": "735120"
  },
  {
    "text": "approach are first off you have to know the protocol and as I mentioned before that is not always the case and",
    "start": "735120",
    "end": "740320"
  },
  {
    "text": "especially with some proprietary software with some proprietary software then well you're screwed because they",
    "start": "740320",
    "end": "746839"
  },
  {
    "text": "don't have any documentation in the first place second disadvantage is you will miss complex conditions involving",
    "start": "746839",
    "end": "752519"
  },
  {
    "text": "more than one factor as soon as two factors are involved stress testing will not do it anymore because the complexity",
    "start": "752519",
    "end": "758639"
  },
  {
    "text": "of testing all variations of two factors assuming you have a string of like well you want to send two strings with all",
    "start": "758639",
    "end": "765519"
  },
  {
    "text": "possible combinations from size one to size 1,24 the complexity increases",
    "start": "765519",
    "end": "771000"
  },
  {
    "text": "exponentially so the more factors which are involved in a given vulnerability the more complex it is to find these",
    "start": "771000",
    "end": "777040"
  },
  {
    "text": "with stress testing I would think that that um some of the more complex conditions have probably the complexity",
    "start": "777040",
    "end": "782959"
  },
  {
    "text": "that you will not find them until the universe has gone cold and dead using stress testing okay another problem with",
    "start": "782959",
    "end": "790720"
  },
  {
    "text": "stress testing is application Level exception handling you have this under VMS you have this under NT and under",
    "start": "790720",
    "end": "797519"
  },
  {
    "text": "certain C++ libraries you might have this as well where the application handles all exceptions and just kills",
    "start": "797519",
    "end": "802839"
  },
  {
    "text": "the threat so the stress testing tool will never know what happens just know that the server doesn't respond in a way",
    "start": "802839",
    "end": "808480"
  },
  {
    "text": "it's supposed to but you will not have a SE fold you will have not have any signals whatever you",
    "start": "808480",
    "end": "814320"
  },
  {
    "text": "just don't know what's going on actually that's what happens when um you try to use a format string back in fire one1 to",
    "start": "814320",
    "end": "820000"
  },
  {
    "text": "crash it um well it just sits there and does nothing because it does application",
    "start": "820000",
    "end": "825800"
  },
  {
    "text": "Level or application site exception handling the final problem with um",
    "start": "825800",
    "end": "832320"
  },
  {
    "start": "829000",
    "end": "1184000"
  },
  {
    "text": "stress testing is that you will not find funky stuff like MOG overrides because these things well depend on the data",
    "start": "832320",
    "end": "839519"
  },
  {
    "text": "which overrides your buffer having certain bits set in certain places at a certain time and as I said stress",
    "start": "839519",
    "end": "845839"
  },
  {
    "text": "testing doesn't know what's going on program internally so you'll miss all of this okay second approach is tracing",
    "start": "845839",
    "end": "853680"
  },
  {
    "text": "input this is what Joey demonstrated in Asia about one and a half years ago",
    "start": "853680",
    "end": "858959"
  },
  {
    "text": "where you basically disassemble an application and then identify where the data is coming in and read from there",
    "start": "858959",
    "end": "864920"
  },
  {
    "text": "and figure out how this data is being handled now um this does has the advantage of spotting even incredibly",
    "start": "864920",
    "end": "872440"
  },
  {
    "text": "complex problems because you have a re human actually reading all the code that the program well that handles user",
    "start": "872440",
    "end": "879399"
  },
  {
    "text": "input so um that's one of the main main advantages of this unfortunately with",
    "start": "879399",
    "end": "886480"
  },
  {
    "text": "large programs there are so many ways that um data can come come in that you will have",
    "start": "886480",
    "end": "893279"
  },
  {
    "text": "trouble identifying which code is the data Handler take a firewall for example",
    "start": "893279",
    "end": "899040"
  },
  {
    "text": "takes data from all kinds of sources takes data from the various application proxies it has then from the",
    "start": "899040",
    "end": "904920"
  },
  {
    "text": "administrative client whatever so um this is really only an option for cgis",
    "start": "904920",
    "end": "910120"
  },
  {
    "text": "and small programs where you can quickly get an overview of what's going on and you have a clearly defined way of",
    "start": "910120",
    "end": "916079"
  },
  {
    "text": "putting data in there so the cons are also that you need somebody like Joey to",
    "start": "916079",
    "end": "921120"
  },
  {
    "text": "do it and that's expensive and secondly it's nearly",
    "start": "921120",
    "end": "926480"
  },
  {
    "text": "infeasible for large applications that you'll be tracing down so many annoying code tentacles or even dead code so um",
    "start": "926480",
    "end": "934759"
  },
  {
    "text": "you'll grow old before you've looked through a decent size",
    "start": "934759",
    "end": "940120"
  },
  {
    "text": "application well mentioned that already okay third approach is what I use I'm a",
    "start": "940480",
    "end": "945600"
  },
  {
    "text": "lazy bastard so I figured a way to make things more easy for me basically I Define a bunch of common mistakes that",
    "start": "945600",
    "end": "952560"
  },
  {
    "text": "apparently all closed Source programmers repeatedly make and when I analyze or I",
    "start": "952560",
    "end": "957680"
  },
  {
    "text": "scan for them in the binary I look for them in the binary identify the suspicious constructs first and then I know that there's a bug and then I read",
    "start": "957680",
    "end": "964880"
  },
  {
    "text": "the code backwards to see how the program actually came to this point this does have a few",
    "start": "964880",
    "end": "970560"
  },
  {
    "text": "advantages first off it's a lot less timec consuming than approach B I'm by a lot less I mean um Factor 10 Factor 20",
    "start": "970560",
    "end": "978560"
  },
  {
    "text": "less and I don't really enjoy staring at a this this at this assembly well for a",
    "start": "978560",
    "end": "984800"
  },
  {
    "text": "long time and actually I do enjoy being outside a lot more than St stand in here",
    "start": "984800",
    "end": "990360"
  },
  {
    "text": "and um I'm not the kind of person that would spend like 40 hours in front of a screen a week so any kind of well saving",
    "start": "990360",
    "end": "997079"
  },
  {
    "text": "time in front of the screen is good and that's why I'm not reading too much of",
    "start": "997079",
    "end": "1002600"
  },
  {
    "text": "it uh the second point is you can automate the detection of suspicious constructs and automation will well just",
    "start": "1002600",
    "end": "1009720"
  },
  {
    "text": "do wonders for your productivity because you're not bothered with a boring stuff anymore computers are there for doing",
    "start": "1009720",
    "end": "1014800"
  },
  {
    "text": "boring stuff so you automate the boring parts of the detection process and you",
    "start": "1014800",
    "end": "1020600"
  },
  {
    "text": "only do the interesting stuff so that is something that really drives up complex or productivity on your",
    "start": "1020600",
    "end": "1027360"
  },
  {
    "text": "side all right next Advantage is that you'll even find comp fairly complex conditions involving many factors so",
    "start": "1027360",
    "end": "1035000"
  },
  {
    "text": "you'll find a lot of zero day the con to this approach is that you",
    "start": "1035000",
    "end": "1040038"
  },
  {
    "text": "will miss vulnerabilities you will miss vulnerabilities because you're not reading all the code you're only reading",
    "start": "1040039",
    "end": "1046038"
  },
  {
    "text": "the code that is relevant and that has anything to do with suspicious constructs now if there are",
    "start": "1046039",
    "end": "1051400"
  },
  {
    "text": "vulnerabilities that the programmer well programmers have hand created like they roll their own base 640 coding engine",
    "start": "1051400",
    "end": "1058000"
  },
  {
    "text": "which does not do size checking and they don't use any standard Library functions of which you know that they are dangerous you will miss all problems",
    "start": "1058000",
    "end": "1064919"
  },
  {
    "text": "involving this as you're only looking for the standard function functions to cause problems so if you can well live",
    "start": "1064919",
    "end": "1072480"
  },
  {
    "text": "with missing a few vulnerabilities then this is all right but still it's a can't",
    "start": "1072480",
    "end": "1077600"
  },
  {
    "text": "you can't really secure system using this but who would want that all right",
    "start": "1077600",
    "end": "1082880"
  },
  {
    "text": "you need a highly specialized auditor to do it in the first place so um you need somebody with a lot of reverse",
    "start": "1082880",
    "end": "1089000"
  },
  {
    "text": "engineering experience with a lot I mean like at least two years so it's not",
    "start": "1089000",
    "end": "1094200"
  },
  {
    "text": "really like you can quickly pick this up at least that's what I like to think",
    "start": "1094200",
    "end": "1100400"
  },
  {
    "text": "so okay another main problem is you'll find mostly obscure and esoteric conditions you'll find a lot of stuff",
    "start": "1100400",
    "end": "1106720"
  },
  {
    "text": "which is not really relevant or not really exploitable because you look for bugs but you don't look whether you can",
    "start": "1106720",
    "end": "1112200"
  },
  {
    "text": "put data in there so you'll have quite a few frustrating moments um last New Year",
    "start": "1112200",
    "end": "1117760"
  },
  {
    "text": "I was in Berlin at the CCC Congress and a friend of me and me we analyzed the Linux ftpd andc ftpd for format string",
    "start": "1117760",
    "end": "1125120"
  },
  {
    "text": "bugs and we found a few unfortunately you have to be rude to write to the files where the data is being read from",
    "start": "1125120",
    "end": "1130520"
  },
  {
    "text": "anyways so you're like hey I found this format string back and half half an hour later you're okay move on and that",
    "start": "1130520",
    "end": "1137760"
  },
  {
    "text": "happens all the time you find tremendous amounts of bugs and a lot of them are not relevant to you take IIs for an",
    "start": "1137760",
    "end": "1144919"
  },
  {
    "text": "example I have had a look at the Microsoft FTP server last week for an hour and identified a few format string",
    "start": "1144919",
    "end": "1150280"
  },
  {
    "text": "bugs but they are in dead code which is never reached which is quite amazing because 30% of IIs are dead code which",
    "start": "1150280",
    "end": "1157159"
  },
  {
    "text": "is never reached you don't really know why this",
    "start": "1157159",
    "end": "1163440"
  },
  {
    "text": "is the case but it's quite amazing so um is Microsoft running a debug compile of Microsoft TP somewhere because it seems",
    "start": "1163440",
    "end": "1170840"
  },
  {
    "text": "that many of those for string bugs are only present in the debug compile well is anyone here from",
    "start": "1170840",
    "end": "1176440"
  },
  {
    "text": "Microsoft who can answer that question rooster no",
    "start": "1176440",
    "end": "1182360"
  },
  {
    "text": "okay all right um so I mentioned before that um you can't really secure systems",
    "start": "1182360",
    "end": "1187880"
  },
  {
    "start": "1184000",
    "end": "1309000"
  },
  {
    "text": "using the approach that I do it's more of a blackhead technique in a way because the blackhead wants the fastest",
    "start": "1187880",
    "end": "1194200"
  },
  {
    "text": "way to find a vulnerability and he doesn't care if he misses problems as long as he gets in",
    "start": "1194200",
    "end": "1199400"
  },
  {
    "text": "he only needs one vulnerability to own the server so he wants to save time he",
    "start": "1199400",
    "end": "1205360"
  },
  {
    "text": "wants to get in quickly and get back on IRC",
    "start": "1205360",
    "end": "1211320"
  },
  {
    "text": "so um and once he has found something as he's a reverse engineer and is not allowed to publish it anyways if he",
    "start": "1211320",
    "end": "1216840"
  },
  {
    "text": "doesn't want to get sued he keeps it private so he doesn't have to repeat this boring process of reading",
    "start": "1216840",
    "end": "1222720"
  },
  {
    "text": "disassembly until somebody actually finds this bug and makes it public and it gets fixed so the blackhead can have",
    "start": "1222720",
    "end": "1228159"
  },
  {
    "text": "a stack of zero day exploit sitting somewhere for years and um well lie at",
    "start": "1228159",
    "end": "1234360"
  },
  {
    "text": "the pool or be on IRC all day and still have his achieved his goals while the Whitehead is in a way worse position he",
    "start": "1234360",
    "end": "1242480"
  },
  {
    "text": "wants security so he has to read all the code and as a disassembly of an application can easily exceed 8",
    "start": "1242480",
    "end": "1248280"
  },
  {
    "text": "megabytes and I have not yet seen a human which is capable of reading 8 megabytes of this",
    "start": "1248280",
    "end": "1253520"
  },
  {
    "text": "assembly um well you're in trouble secondly you have to repeat the process",
    "start": "1253520",
    "end": "1259720"
  },
  {
    "text": "with every upgrade because you don't really know what the W what the vendor has added and if you found that you have",
    "start": "1259720",
    "end": "1266240"
  },
  {
    "text": "to see how it interacts with the rest of the application and so on so um while the blackhe hat is partying somewhere",
    "start": "1266240",
    "end": "1272120"
  },
  {
    "text": "with nice girls and everything you're sitting in front of the screen doing nothing",
    "start": "1272120",
    "end": "1278640"
  },
  {
    "text": "so and the white hat does have to continue even after he has found something he's not done the blackhe hat",
    "start": "1278880",
    "end": "1284679"
  },
  {
    "text": "is done so you can see why blackhe hats are usually more relaxed than and white",
    "start": "1284679",
    "end": "1290880"
  },
  {
    "text": "hats all right well okay are there",
    "start": "1291960",
    "end": "1300320"
  },
  {
    "text": "any never mind it's a joke between friends he's from",
    "start": "1301159",
    "end": "1307799"
  },
  {
    "text": "checkpoint anyways um the tools you need as an auditor or as a binary auditor um",
    "start": "1308000",
    "end": "1314480"
  },
  {
    "start": "1309000",
    "end": "1431000"
  },
  {
    "text": "that really depends but one tool you will not want to live without is Ida Pro by a crazy Russian named IL gilfanov who",
    "start": "1314480",
    "end": "1321440"
  },
  {
    "text": "lives in Belgium now and actually the feature list is a lot longer by now it",
    "start": "1321440",
    "end": "1326720"
  },
  {
    "text": "grows so fast that I can't adjust the slides properly so um basically Ida can",
    "start": "1326720",
    "end": "1332320"
  },
  {
    "text": "disassemble everything your cell phone my toaster your PlayStation I64 itanium",
    "start": "1332320",
    "end": "1338279"
  },
  {
    "text": "um whatever you check at it pretty much uh Intel 960 as well all the DSL modem",
    "start": "1338279",
    "end": "1343799"
  },
  {
    "text": "code is running on that then it includes a powerful scripting language which is very good if if you're lazy it can",
    "start": "1343799",
    "end": "1350320"
  },
  {
    "text": "recognize statically linked Library calls so you don't have to go around identifying string copies um it features a powerful plug-in",
    "start": "1350320",
    "end": "1357880"
  },
  {
    "text": "interface which is very very cool because you can well have full access to the disassembly database using C or um",
    "start": "1357880",
    "end": "1365279"
  },
  {
    "text": "if you feel like a real programmer C++ um it automatically reconstructs",
    "start": "1365279",
    "end": "1371400"
  },
  {
    "text": "arguments to standard Library calls you feed it a c header file and it generates defines so you can well replace stupid",
    "start": "1371400",
    "end": "1378520"
  },
  {
    "text": "TX values in the disassembly with real text very nice um it does feature a",
    "start": "1378520",
    "end": "1384320"
  },
  {
    "text": "graphing plugin which gives you flowcharts of disassemblies which is very cool to impress your management um",
    "start": "1384320",
    "end": "1390480"
  },
  {
    "text": "and the really cool thing is the technical support because you're actually communicating with the main developer and um I have to speak for",
    "start": "1390480",
    "end": "1397960"
  },
  {
    "text": "myself he has added at least four features in Ida just for me I constantly kept crashing the internal scripting",
    "start": "1397960",
    "end": "1403440"
  },
  {
    "text": "language because it was not intended to use recursion and um he added quite a few",
    "start": "1403440",
    "end": "1408600"
  },
  {
    "text": "things for that so um it's just he's a very cool guy the software is not that",
    "start": "1408600",
    "end": "1413679"
  },
  {
    "text": "expensive compared to um other things and for the it costs around 500 us I think so for the stuff you're getting",
    "start": "1413679",
    "end": "1420919"
  },
  {
    "text": "for it it's definitely worth it and he's a cool guy too so support",
    "start": "1420919",
    "end": "1425960"
  },
  {
    "text": "him uh no I'm not paid by data rescue okay any questions so far no nice",
    "start": "1425960",
    "end": "1435080"
  },
  {
    "start": "1431000",
    "end": "1582000"
  },
  {
    "text": "we'll move on to C C++ auditing are the usual programming mistakes which",
    "start": "1435080",
    "end": "1441320"
  },
  {
    "text": "everybody seems to make I don't think I'm telling anyone",
    "start": "1441320",
    "end": "1446840"
  },
  {
    "text": "anything new when I tell you string copy and string catch might be bad so basically if you have a string",
    "start": "1446840",
    "end": "1454400"
  },
  {
    "text": "copy or a string cat which copies stuff that is not enclosed in double quotes",
    "start": "1454400",
    "end": "1459440"
  },
  {
    "text": "into a buffer you might have a problem and you should probably look at this a bit more",
    "start": "1459440",
    "end": "1465278"
  },
  {
    "text": "closely I told you that my speech is boring Ive moving on to sprintf um sprintf is uh dangerous as",
    "start": "1465919",
    "end": "1473640"
  },
  {
    "text": "well if people do not use the built-in size checking so if they expand user",
    "start": "1473640",
    "end": "1480200"
  },
  {
    "text": "data or untrusted data data which is not enclosed in double quotes using a for or",
    "start": "1480200",
    "end": "1485279"
  },
  {
    "text": "format string which contains a percent s well then it's probably dangerous this",
    "start": "1485279",
    "end": "1491159"
  },
  {
    "text": "goes for all functions which have sprintf like functionality using the vprint F function as well",
    "start": "1491159",
    "end": "1498960"
  },
  {
    "text": "okay scanf sorry scanf is um well basically",
    "start": "1499039",
    "end": "1504559"
  },
  {
    "text": "broken as a prototype so any scanf well scanf always parses untrusted data",
    "start": "1504559",
    "end": "1511159"
  },
  {
    "text": "there's no use to SC use there's no wait a second there's no sense in using scanf to par trusted data so um",
    "start": "1511159",
    "end": "1520240"
  },
  {
    "text": "basically whenever you see a scanf with a percent s in the format string you know this is dangerous and furthermore",
    "start": "1520240",
    "end": "1527840"
  },
  {
    "text": "even if you do use the built-in size checking in scanf um you have to pay attention where it null terminates",
    "start": "1527840",
    "end": "1533679"
  },
  {
    "text": "because this seems to depend from compiler to compil so um well I got",
    "start": "1533679",
    "end": "1539480"
  },
  {
    "text": "burned pretty badly with this because in my class which I was teaching here I had an example program which was supposed to",
    "start": "1539480",
    "end": "1545240"
  },
  {
    "text": "contain all the usual bugs unfortunately what I didn't know is that well my scanf",
    "start": "1545240",
    "end": "1551120"
  },
  {
    "text": "implementation would if I use size checking like percent 200 S to pars 200 bytes in a buffer would terminate that",
    "start": "1551120",
    "end": "1559000"
  },
  {
    "text": "buffer behind its end so there were like unintentional bugs in my program as",
    "start": "1559000",
    "end": "1565600"
  },
  {
    "text": "well which is bad so don't trust me to write secure code anyways scanf is broken from front",
    "start": "1565600",
    "end": "1574159"
  },
  {
    "text": "to back and even if you're paing stuff like numbers be careful because a hacker might put a negative sign in front of it",
    "start": "1574159",
    "end": "1581399"
  },
  {
    "text": "so scan if is bad Str strn cpy the supposedly safe prototype for tapping",
    "start": "1581399",
    "end": "1589120"
  },
  {
    "text": "strings um which has the problem that it will not null terminate properly if the",
    "start": "1589120",
    "end": "1594600"
  },
  {
    "text": "size of the destination buffer is equal to the maximum length parameter another problem it does have is that it will",
    "start": "1594600",
    "end": "1601000"
  },
  {
    "text": "Zero out the entire rest of the buffer so if you are Str strn copying with a very large buffer uh you might have a",
    "start": "1601000",
    "end": "1607840"
  },
  {
    "text": "severe performance impact because it keeps on adding zeros until the very end of the buffer okay so um if you ever see",
    "start": "1607840",
    "end": "1615640"
  },
  {
    "text": "an S strn copy with the maximum length parameter being equal to the size of the destination buffer you know that this",
    "start": "1615640",
    "end": "1622760"
  },
  {
    "text": "does not n terminate and this can lead to very funky problems just to make things a bit more",
    "start": "1622760",
    "end": "1628720"
  },
  {
    "text": "visual you have the source string with a terminating null BTE and then arbitrary data behind it and then you copy this",
    "start": "1628720",
    "end": "1636080"
  },
  {
    "text": "stuff into a smaller buffer without properly n terminating so you have the destination string and arbitrary data",
    "start": "1636080",
    "end": "1642640"
  },
  {
    "text": "behind it and every string operation which operates on the destination string now will operate on the data behind the",
    "start": "1642640",
    "end": "1649399"
  },
  {
    "text": "original string as well this has very cool effects from time to what was",
    "start": "1649399",
    "end": "1655000"
  },
  {
    "text": "this oh thank you it's not me um anyways",
    "start": "1655000",
    "end": "1660640"
  },
  {
    "text": "um you'll have some this is weird you'll have some quite interesting",
    "start": "1660640",
    "end": "1667519"
  },
  {
    "text": "effects because it can happen that um an application Echoes back its own stack to you things like that when they just",
    "start": "1667519",
    "end": "1674000"
  },
  {
    "text": "printing that out or sending stuff straight back to the user and um it can have more severe effects because you can",
    "start": "1674000",
    "end": "1680559"
  },
  {
    "text": "people can do a string or like a character replace on that destination string and replace well a bites inside a",
    "start": "1680559",
    "end": "1687240"
  },
  {
    "text": "return address or whatever and it can have the straight boring impact of a buff overrun later on so SN copy is not",
    "start": "1687240",
    "end": "1695679"
  },
  {
    "text": "that risk-free sdrn cat this is my personal favorite because nobody seems",
    "start": "1695679",
    "end": "1700880"
  },
  {
    "text": "to be using it correctly or hardly anybody um to make things nice and consistent and easy for the programmer",
    "start": "1700880",
    "end": "1707840"
  },
  {
    "text": "to REM remember in contrast to sdrn copy sdrn cat always n terminates but behind",
    "start": "1707840",
    "end": "1714360"
  },
  {
    "text": "your original buffer if you use size of destination buffer so s strncat",
    "start": "1714360",
    "end": "1719880"
  },
  {
    "text": "terminates after it has written up to maxan bytes so um there's the famous off by",
    "start": "1719880",
    "end": "1728399"
  },
  {
    "text": "one exploits which come from this if you override the frame pointer on the stack in unoptimized code things look a bit",
    "start": "1728399",
    "end": "1735200"
  },
  {
    "text": "like this um",
    "start": "1735200",
    "end": "1740039"
  },
  {
    "text": "now you have to all get up and stand upside down like stand on your head because in my diagram the stack R",
    "start": "1740960",
    "end": "1747480"
  },
  {
    "text": "upwards sorry didn't notice that until I was done okay so here we go we have the",
    "start": "1747480",
    "end": "1753840"
  },
  {
    "text": "stack in blue we have the buffer to which we append in white we have the safed um frame pointer and in red we",
    "start": "1753840",
    "end": "1761679"
  },
  {
    "text": "have the saved EIP which normally we would overwrite but in this case we don't so we append to our buffer",
    "start": "1761679",
    "end": "1769080"
  },
  {
    "text": "and a pend whoa hit once too often sorry how do I go backwards",
    "start": "1769080",
    "end": "1776279"
  },
  {
    "text": "here okay uh all right okay so we're",
    "start": "1776279",
    "end": "1781480"
  },
  {
    "text": "overriding ebps or the saved ebps lowest order bike with a null so when the function epilog of the",
    "start": "1781480",
    "end": "1788720"
  },
  {
    "text": "function we're in executes it will move the current register EBP into ESP thus erasing all",
    "start": "1788720",
    "end": "1795480"
  },
  {
    "text": "local variables it will then pass EBP our modified EBP value into",
    "start": "1795480",
    "end": "1801519"
  },
  {
    "text": "EBP and then return regularly so our frame pointer has now been modified what",
    "start": "1801519",
    "end": "1808080"
  },
  {
    "text": "happens now is when the next function returns it executes the same epilog again so it moves EBP into",
    "start": "1808080",
    "end": "1816039"
  },
  {
    "text": "ESP so instead of the snack pointer pointing where it should point it slides",
    "start": "1816039",
    "end": "1822799"
  },
  {
    "text": "upwards in the diagram into user Supply data and when the function returns",
    "start": "1822799",
    "end": "1828000"
  },
  {
    "text": "returns it will pop the return address out of the user Supply data instead of",
    "start": "1828000",
    "end": "1833120"
  },
  {
    "text": "from where it's supposed to come so at this point you get full control and this is one one of the reason why I love sdrn",
    "start": "1833120",
    "end": "1839960"
  },
  {
    "text": "cat the other reason why I love sdrn cat is that it has to deal with Dynamic",
    "start": "1839960",
    "end": "1846080"
  },
  {
    "text": "values for the maximum length parameter Dynamic values are evil in a way that",
    "start": "1846080",
    "end": "1851360"
  },
  {
    "text": "programmers tend to neglect the fact that beneath null or beneath zero",
    "start": "1851360",
    "end": "1857159"
  },
  {
    "text": "there's 4 G or 4 billion so um if you have code like",
    "start": "1857159",
    "end": "1863200"
  },
  {
    "text": "this the sdrn copy will fill the buffer completely so that the string length of",
    "start": "1863200",
    "end": "1869200"
  },
  {
    "text": "the buffer equals the size of the buffer and when the S strn cat executes",
    "start": "1869200",
    "end": "1875159"
  },
  {
    "text": "afterwards wait a second as size of the buffer is equal to",
    "start": "1875159",
    "end": "1881080"
  },
  {
    "text": "the string length of the buffer this evaluates to null or to zero so if you",
    "start": "1881080",
    "end": "1886279"
  },
  {
    "text": "subtract one from that you you get uh 4 billion which is a pretty long string to",
    "start": "1886279",
    "end": "1892880"
  },
  {
    "text": "append cast drops these I love most because people",
    "start": "1892919",
    "end": "1899240"
  },
  {
    "text": "who write security well oriented code seem to always make them um this is code",
    "start": "1899240",
    "end": "1905240"
  },
  {
    "text": "from the LOF from anti- sniff uh it is pretty old by now so they have fixed it",
    "start": "1905240",
    "end": "1910360"
  },
  {
    "text": "about a year ago or so friend of mine from a German Group teso found this one",
    "start": "1910360",
    "end": "1915440"
  },
  {
    "text": "does anybody spot the mistake you got the um anybody who has not seen this presentation before so if anybody who I",
    "start": "1915440",
    "end": "1921919"
  },
  {
    "text": "don't recognize sponsor the mistake he'll get a",
    "start": "1921919",
    "end": "1926278"
  },
  {
    "text": "book the data at DNS label is user supplied",
    "start": "1928880",
    "end": "1934399"
  },
  {
    "start": "1954000",
    "end": "2027000"
  },
  {
    "text": "so uh DNS label is user supplied it can be anything",
    "start": "1959960",
    "end": "1965080"
  },
  {
    "text": "yeah sorry yeah there is an applied cast and what",
    "start": "1965360",
    "end": "1970799"
  },
  {
    "text": "happens well it could be anything and what's the consequence of that",
    "start": "1970799",
    "end": "1976679"
  },
  {
    "text": "sorry could you try to speak a bit more uh yeah but can you explain more",
    "start": "1980080",
    "end": "1986240"
  },
  {
    "text": "what is happening or well it's clear there's going to be",
    "start": "1986240",
    "end": "1992639"
  },
  {
    "text": "an um actually no you see there's an Str strn",
    "start": "1995200",
    "end": "2000518"
  },
  {
    "text": "cat so yeah",
    "start": "2000880",
    "end": "2006960"
  },
  {
    "text": "good and what happens then well that's essentially the point so I think you've won a book but can you",
    "start": "2011919",
    "end": "2019960"
  },
  {
    "text": "catch all",
    "start": "2019960",
    "end": "2023158"
  },
  {
    "text": "right so what happens here is that the data at DNS label is user supplied so",
    "start": "2026919",
    "end": "2031960"
  },
  {
    "text": "let's assume somebody supplies the character 80 hex there which is minus 128 remember Char is signed and S is int",
    "start": "2031960",
    "end": "2040799"
  },
  {
    "text": "int and Char do have signs so this value is being cast to the int count where",
    "start": "2040799",
    "end": "2048480"
  },
  {
    "text": "it's extended to f f f f f80 which is minus 128 now you see this calculation here um",
    "start": "2048480",
    "end": "2057440"
  },
  {
    "text": "count plus the string length of buffer has to be smaller than size of buffer minus one now count is- 128 the string",
    "start": "2057440",
    "end": "2068118"
  },
  {
    "text": "length of buffer is probably around 300 bytes or something so you basically",
    "start": "2068119",
    "end": "2073839"
  },
  {
    "text": "subtract 128 from this string length of buffer and um while pass the signed",
    "start": "2073839",
    "end": "2080240"
  },
  {
    "text": "comparison and what happens then is Boom you append an arbitrary or a print",
    "start": "2080240",
    "end": "2087158"
  },
  {
    "text": "buffer which is way larger than 256 so um these things are a bit subtle",
    "start": "2087159",
    "end": "2093800"
  },
  {
    "text": "to spot in the source and they're not really easier to spot in the binary so well only if you feel very brave look",
    "start": "2093800",
    "end": "2100920"
  },
  {
    "text": "for them um on the other hand it's really fun because um all the or many of the",
    "start": "2100920",
    "end": "2106640"
  },
  {
    "text": "security conscious people do these kind of mistakes um are the current Editor in Chief of Frack route um had one of those",
    "start": "2106640",
    "end": "2114359"
  },
  {
    "text": "in his update to gopher demon where he was supposed to fix a bug and Loft fixed",
    "start": "2114359",
    "end": "2119680"
  },
  {
    "text": "this one twice before they got it right so they are fun in a",
    "start": "2119680",
    "end": "2125440"
  },
  {
    "text": "way and it's always good to be the guy who um is analyzing the code instead of the guy who's writing the",
    "start": "2125720",
    "end": "2132480"
  },
  {
    "text": "code okay formed string vulnerabilities these have pretty much been covered to death for the last year um they have",
    "start": "2133800",
    "end": "2141359"
  },
  {
    "text": "been known to certain people from France probably for a few years before they got public um knowledge about these has",
    "start": "2141359",
    "end": "2148000"
  },
  {
    "text": "circulated in certain circles for a long time and they got public last year and",
    "start": "2148000",
    "end": "2154480"
  },
  {
    "text": "for all of a sudden everything was vulnerable which is is fun but unfortunately they're all getting fixed",
    "start": "2154480",
    "end": "2160720"
  },
  {
    "text": "because they're so easy to find at least in open source software uh in Clos Source that's an entirely different",
    "start": "2160720",
    "end": "2166400"
  },
  {
    "text": "story close Source programmers can't use",
    "start": "2166400",
    "end": "2170760"
  },
  {
    "text": "grap okay you can rine print or format string bugs as an argument deficiency a",
    "start": "2171800",
    "end": "2178599"
  },
  {
    "text": "valid call to a print family function has at least two arguments the format string and the stuff you're",
    "start": "2178599",
    "end": "2185440"
  },
  {
    "text": "expanding so um whenever you have one argument too few then you should be on the lookout",
    "start": "2185440",
    "end": "2191599"
  },
  {
    "text": "and if that format string is then not static like not enclosed in double quotes you definitely have a format",
    "start": "2191599",
    "end": "2197520"
  },
  {
    "text": "string bug and you should look really closely um actually these are very very",
    "start": "2197520",
    "end": "2202599"
  },
  {
    "text": "incredibly easy to spot there are compiler patches which will effectively flag all the format string bugs they can",
    "start": "2202599",
    "end": "2208599"
  },
  {
    "text": "be scanned like this in the binary it's really amazing to see them still around",
    "start": "2208599",
    "end": "2213680"
  },
  {
    "text": "well um I guess that's what people are saying about buffer overruns all the time anyways but format string",
    "start": "2213680",
    "end": "2220520"
  },
  {
    "text": "bugs really are easy to find but for over can be very subtle format string bugs are not so have fun with them while",
    "start": "2220520",
    "end": "2228359"
  },
  {
    "text": "they're still here for string bugs think",
    "start": "2228359",
    "end": "2235559"
  },
  {
    "text": "so well then just patch the damn",
    "start": "2236760",
    "end": "2241520"
  },
  {
    "text": "compiler all right so um I'll quickly go over the theory of",
    "start": "2243720",
    "end": "2250680"
  },
  {
    "start": "2244000",
    "end": "2709000"
  },
  {
    "text": "exploiting format string bugs if you want to I can even make a small demonstration but um if not not is this",
    "start": "2250680",
    "end": "2258079"
  },
  {
    "text": "is there any interested in doing a demonstration on how you write to arbitrary addresses using format",
    "start": "2258079",
    "end": "2263720"
  },
  {
    "text": "strings yes okay so I'll first go over the theory and then switch screens and",
    "start": "2263720",
    "end": "2269000"
  },
  {
    "text": "stuff okay now normally what happens during a print F family function call is",
    "start": "2269000",
    "end": "2274880"
  },
  {
    "text": "you have the format characters and the arguments and for every format character",
    "start": "2274880",
    "end": "2280680"
  },
  {
    "text": "the printer family function parses it slides up in the stack to look for the parameter for Varun it slides up once to",
    "start": "2280680",
    "end": "2288920"
  },
  {
    "text": "look it up for buff it slides up one to look it up and for v2 it slides up one",
    "start": "2288920",
    "end": "2295640"
  },
  {
    "text": "to look it up so when you're dealing with a format",
    "start": "2295640",
    "end": "2301079"
  },
  {
    "text": "string bug somebody is just print or just does a print if stuff and if a",
    "start": "2301079",
    "end": "2306599"
  },
  {
    "text": "malicious attacker put stuff in here something like percent 200 LX percent",
    "start": "2306599",
    "end": "2312760"
  },
  {
    "text": "n%c 40 LX perc n then what will happen",
    "start": "2312760",
    "end": "2317920"
  },
  {
    "text": "is this is a bit simplified now but what will happen is that the printer will print 200 characters from the first",
    "start": "2317920",
    "end": "2324680"
  },
  {
    "text": "double word it takes from the stack there and it will then move on to take the person n format string",
    "start": "2324680",
    "end": "2333119"
  },
  {
    "text": "character which will write the length of the string which which has been outputed so so far to the location pointed to On",
    "start": "2333119",
    "end": "2339880"
  },
  {
    "text": "The Stack so if this data which down there is a attacker supplied we're now",
    "start": "2339880",
    "end": "2345400"
  },
  {
    "text": "writing the value 200 to any location in memory where he well wants to write",
    "start": "2345400",
    "end": "2352000"
  },
  {
    "text": "to we then output 40 more bytes and then we write the value 240",
    "start": "2352000",
    "end": "2359839"
  },
  {
    "text": "somewhere and well that way you can pretty much write anything anywhere",
    "start": "2359839",
    "end": "2365359"
  },
  {
    "text": "anytime I'll just try to get the screen switched and a simple example working here",
    "start": "2365359",
    "end": "2373359"
  },
  {
    "text": "okay let's see whether the switch",
    "start": "2398280",
    "end": "2401720"
  },
  {
    "text": "works ah okay um this is a very very extreme simple example of a small format",
    "start": "2405400",
    "end": "2411480"
  },
  {
    "text": "string bug it creates a buffer on the stack and then does a faulty print F",
    "start": "2411480",
    "end": "2420079"
  },
  {
    "text": "so what happens when you execute this is first no wait a second I got to put this",
    "start": "2420079",
    "end": "2426119"
  },
  {
    "text": "microphone somewhere",
    "start": "2426119",
    "end": "2429318"
  },
  {
    "text": "okay it just Echo stuff back first of all so what we'll now do is",
    "start": "2443480",
    "end": "2452319"
  },
  {
    "text": "so you see that we're reading stuff from the stack there the 41s 41s 41s is our",
    "start": "2459520",
    "end": "2464640"
  },
  {
    "text": "user Supply data so at this point we know that we can write well to the",
    "start": "2464640",
    "end": "2470160"
  },
  {
    "text": "location 41 414141 and if we change those A's to other values we can write",
    "start": "2470160",
    "end": "2476760"
  },
  {
    "text": "to any location I'll demonstrate that a bit hey um something that I don't didn't know before was that NT has something",
    "start": "2476760",
    "end": "2483680"
  },
  {
    "text": "like gb.com in the good old dos days it has something like a command line debugger thanks to the",
    "start": "2483680",
    "end": "2489599"
  },
  {
    "text": "Microsoft guys who I talked to told me",
    "start": "2489599",
    "end": "2493400"
  },
  {
    "text": "that I'll just switch this off for a second",
    "start": "2495000",
    "end": "2501680"
  },
  {
    "text": "okay um we've now sent or used the the argument a AA percent LX or percent 100",
    "start": "2535280",
    "end": "2543400"
  },
  {
    "text": "LX percent n as you can see now we we have a secal here or an access",
    "start": "2543400",
    "end": "2551359"
  },
  {
    "text": "violation oh no I don't think so wait a",
    "start": "2552119",
    "end": "2557599"
  },
  {
    "text": "second well maximizing it will not help with",
    "start": "2558640",
    "end": "2563160"
  },
  {
    "text": "it is this more readable okay all right um so you can see the",
    "start": "2564520",
    "end": "2571680"
  },
  {
    "text": "assembly down there move eax or move the value in ECX to the location point to at",
    "start": "2571680",
    "end": "2578200"
  },
  {
    "text": "eax we have supplied eax here right here and we're moving the",
    "start": "2578200",
    "end": "2584440"
  },
  {
    "text": "value in ECX which is the current length of the string into that",
    "start": "2584440",
    "end": "2589880"
  },
  {
    "text": "location so we'll quit this",
    "start": "2589880",
    "end": "2594480"
  },
  {
    "text": "first and you can see that the value we are writing",
    "start": "2603920",
    "end": "2610920"
  },
  {
    "text": "what there we go we can see that the value ECX uh in ECX has increased by 20",
    "start": "2620520",
    "end": "2626720"
  },
  {
    "text": "as we just added 20 more to the percent 100 LX so we can put pretty much any",
    "start": "2626720",
    "end": "2632559"
  },
  {
    "text": "value in ECX and write it to any location and um well that's pretty much",
    "start": "2632559",
    "end": "2637599"
  },
  {
    "text": "the way you do format string exploitation it's not really hard in fact it's a lot easier than buffer overruns in many cases",
    "start": "2637599",
    "end": "2643800"
  },
  {
    "text": "so um another thing which is nice about format string bugs is as you're writing to arbitrary locations you cannot only",
    "start": "2643800",
    "end": "2650559"
  },
  {
    "text": "um well override stuff like return addresses but you can like manipulate the internal logic of a program now",
    "start": "2650559",
    "end": "2657599"
  },
  {
    "text": "assuming that we have a switch to I64 or whatever and that well platform would",
    "start": "2657599",
    "end": "2664200"
  },
  {
    "text": "allow us to have pages in memory or which are readable and writable but not",
    "start": "2664200",
    "end": "2669960"
  },
  {
    "text": "executable so at this point it is theoretically possible to create an operating system which prevents illicit",
    "start": "2669960",
    "end": "2676800"
  },
  {
    "text": "code execution completely because the attacker cannot put code somewhere in memory which he is allowed to",
    "start": "2676800",
    "end": "2683079"
  },
  {
    "text": "execute so um what the format string bugs allow us then is to manipulate",
    "start": "2683079",
    "end": "2688280"
  },
  {
    "text": "variables so even if we get an operating system which allows us not to execute un",
    "start": "2688280",
    "end": "2694200"
  },
  {
    "text": "or illicit code we can still manipulate the L IC of the program and that's well",
    "start": "2694200",
    "end": "2699520"
  },
  {
    "text": "that can still have devastating effects so we quit this and move",
    "start": "2699520",
    "end": "2707960"
  },
  {
    "text": "on okay so x86 assembly recap um for",
    "start": "2708839",
    "end": "2713960"
  },
  {
    "start": "2709000",
    "end": "3099000"
  },
  {
    "text": "those that have not spent hours in front of the dis disassembler recently um quick recap we're mostly",
    "start": "2713960",
    "end": "2721119"
  },
  {
    "text": "dealing with standard C declaration calls and in standard C declaration calls on an x86 platform the nth push",
    "start": "2721119",
    "end": "2728280"
  },
  {
    "text": "before the call corresponds to the nth argument to the call so in this case",
    "start": "2728280",
    "end": "2734119"
  },
  {
    "text": "first argument first push second argument second push third argument",
    "start": "2734119",
    "end": "2739599"
  },
  {
    "text": "third",
    "start": "2739599",
    "end": "2741920"
  },
  {
    "text": "push okay an example of a dangerous",
    "start": "2745839",
    "end": "2750960"
  },
  {
    "text": "string copy or string cat call in the disassembly we can see that we're targeting or that we don't have a",
    "start": "2750960",
    "end": "2758240"
  },
  {
    "text": "dynamic I don't have a static source so it's not enclosed in double quotes and therefore it is potentially",
    "start": "2758240",
    "end": "2765000"
  },
  {
    "text": "untrusted secondly we have a Target as or our Target is a stack buffer of about",
    "start": "2765000",
    "end": "2771599"
  },
  {
    "text": "th by size so this is potentially dangerous and should be investigated",
    "start": "2771599",
    "end": "2778240"
  },
  {
    "text": "further secondly um Sprint F and V Sprint F calls um well in this case",
    "start": "2778240",
    "end": "2787280"
  },
  {
    "text": "we have a stack buffer as a target of fixed size and then we have untrusted data not",
    "start": "2787280",
    "end": "2794880"
  },
  {
    "text": "which is not enclosed in double quotes which is being expanded using no size checking in percent",
    "start": "2794880",
    "end": "2801040"
  },
  {
    "text": "s so this has to be considered dangerous as well scan",
    "start": "2801040",
    "end": "2808880"
  },
  {
    "text": "app there's a person s in the format string and we're paring into stack",
    "start": "2808880",
    "end": "2815520"
  },
  {
    "text": "buffers or into buffers of fixed size and the source is potentially",
    "start": "2815520",
    "end": "2821040"
  },
  {
    "text": "untrusted s strn copy sdn cat well we know that any sdrn copy or sdrn cat call",
    "start": "2821040",
    "end": "2829280"
  },
  {
    "text": "where the source buffer well where the maximum parameter is of equal length to the destination buffer or is equal to",
    "start": "2829280",
    "end": "2837079"
  },
  {
    "text": "the length of the destination buffer English grammar is hard um is dangerous so we copy",
    "start": "2837079",
    "end": "2846119"
  },
  {
    "text": "untrusted data in a fixed size buffer again and we know that if the source or",
    "start": "2846119",
    "end": "2853160"
  },
  {
    "text": "if the destination buffer is equal to 4,000 this has to be considered dangerous so we open up the stack window",
    "start": "2853160",
    "end": "2859520"
  },
  {
    "text": "in our disassembler and it tells you the size",
    "start": "2859520",
    "end": "2865440"
  },
  {
    "text": "of the target buffer which is 4,000 so this call would be considered dangerous",
    "start": "2865440",
    "end": "2870520"
  },
  {
    "text": "as well okay another Sr n Cat printall I",
    "start": "2870520",
    "end": "2878240"
  },
  {
    "text": "mentioned before that you have to pay close attention to um wraparounds in the maximum length parameter in sdrn",
    "start": "2878240",
    "end": "2885720"
  },
  {
    "text": "cat so in this case something is subtracted right before the maximum",
    "start": "2885720",
    "end": "2892240"
  },
  {
    "text": "parameter is getting pasted and well you learn in first first grade I think that",
    "start": "2892240",
    "end": "2897800"
  },
  {
    "text": "subtractions can lead to negative results or to null and negative results",
    "start": "2897800",
    "end": "2903000"
  },
  {
    "text": "are bad in a double word meaning okay cast scrubs um we already found out",
    "start": "2903000",
    "end": "2909720"
  },
  {
    "text": "that these can be pretty annoying to detect in the source they get even more annoying to detect in the binary um",
    "start": "2909720",
    "end": "2916559"
  },
  {
    "text": "first off you should create a list of all functions that use a size T parameter to copy data s strn Cat s strn",
    "start": "2916559",
    "end": "2924559"
  },
  {
    "text": "copy fgs receive send all these things um secondly when you analyze",
    "start": "2924559",
    "end": "2931760"
  },
  {
    "text": "these functions you check first if the size T is dynamic or static if it is static hardwired you're not in danger",
    "start": "2931760",
    "end": "2938640"
  },
  {
    "text": "there's no way the programmer can screw up that if it's Dynamic you should have a close look at it either is it accessed",
    "start": "2938640",
    "end": "2945640"
  },
  {
    "text": "before or loaded before using the move SX instruction move with sign extend or",
    "start": "2945640",
    "end": "2951599"
  },
  {
    "text": "has it been subtracted right before so these are two things to look out for another thing to look out for is",
    "start": "2951599",
    "end": "2958000"
  },
  {
    "text": "incorrect um usage of signed things or signed values in loops and comparisons",
    "start": "2958000",
    "end": "2964440"
  },
  {
    "text": "so if in the disassembly you're encountering comparisons and conditional jumps remember that jump above and jump",
    "start": "2964440",
    "end": "2971160"
  },
  {
    "text": "below are signed values and um jump lower and jump greater are the unsigned",
    "start": "2971160",
    "end": "2977319"
  },
  {
    "text": "equivalents so it's usually a good idea to look for those as well all right so we mentioned or I mentioned",
    "start": "2977319",
    "end": "2985839"
  },
  {
    "text": "before that format string bugs can be redefined as argument efficiencies and in the non-optimized x86 world you have",
    "start": "2985839",
    "end": "2992960"
  },
  {
    "text": "the great advantage of something called stack correction after function has been called it has to well pop the stuff it",
    "start": "2992960",
    "end": "2999720"
  },
  {
    "text": "has put on the stack off the stack so after the call you usually have",
    "start": "2999720",
    "end": "3005359"
  },
  {
    "text": "something like at ESP something and this at ESP tells you how many arguments a",
    "start": "3005359",
    "end": "3012000"
  },
  {
    "text": "certain call had so um at this point we can determine that we have an argument",
    "start": "3012000",
    "end": "3017960"
  },
  {
    "text": "deficiency the current or correct number of arguments to sprintf is three Target",
    "start": "3017960",
    "end": "3023119"
  },
  {
    "text": "buffer format string stuff expanded in the format string so if you divide the stack correction by four you get the",
    "start": "3023119",
    "end": "3030240"
  },
  {
    "text": "amount of parameters or the number of parameters in this case we're missing one as we only have two parameters so",
    "start": "3030240",
    "end": "3036280"
  },
  {
    "text": "this would be dangerous after we determined that we",
    "start": "3036280",
    "end": "3041680"
  },
  {
    "text": "have an argument deficiency we have to check whether the format string is static or dynamic because you don't want",
    "start": "3041680",
    "end": "3047040"
  },
  {
    "text": "to flag something like print F hello world as dangerous so in this case the",
    "start": "3047040",
    "end": "3053240"
  },
  {
    "text": "format string is dynamic so it might be dangerous okay so I'm now supposed to demonstrate",
    "start": "3053240",
    "end": "3060280"
  },
  {
    "text": "how to find these vulnerabilities for this I'll switch",
    "start": "3060280",
    "end": "3065680"
  },
  {
    "text": "over oops that was one too",
    "start": "3067240",
    "end": "3071880"
  },
  {
    "text": "far hello",
    "start": "3073400",
    "end": "3077400"
  },
  {
    "start": "3099000",
    "end": "3599000"
  },
  {
    "text": "so I mentioned before that I was going to find a bug in a piece of crab software um the piece of crab software",
    "start": "3102160",
    "end": "3108359"
  },
  {
    "text": "of the day is called CSM proxy Pro or proxy Plus or whatever and it's a proxy",
    "start": "3108359",
    "end": "3114400"
  },
  {
    "text": "server um well it's a shareware proxy server which can be found at CSM usa.net",
    "start": "3114400",
    "end": "3121280"
  },
  {
    "text": "or CSM usa.com or whatever and uh the reason why I chose this is because I",
    "start": "3121280",
    "end": "3127520"
  },
  {
    "text": "know the programmers are really bad and um I've I've looked at the web",
    "start": "3127520",
    "end": "3133440"
  },
  {
    "text": "server before and um it started out with parsing every request every HTTP request",
    "start": "3133440",
    "end": "3139640"
  },
  {
    "text": "using scanf person s into 400 by buffers so after I had a look at their at their",
    "start": "3139640",
    "end": "3147079"
  },
  {
    "text": "web server actually the web server was the first overflow I ever found I was small kid and Blasting long strings at",
    "start": "3147079",
    "end": "3152559"
  },
  {
    "text": "it and it died so when I was looking for easy target kind of remembered that",
    "start": "3152559",
    "end": "3157599"
  },
  {
    "text": "company and um actually when we told that company about the 40 web server they said hey um we don't support that",
    "start": "3157599",
    "end": "3163680"
  },
  {
    "text": "product anymore you're on your own so um I thought let's have a look at this one",
    "start": "3163680",
    "end": "3169640"
  },
  {
    "text": "and as we know the programmers can't use scanf we're going to look for scanf first",
    "start": "3169640",
    "end": "3176319"
  },
  {
    "text": "so let's hope I don't get feedback here it's too",
    "start": "3177400",
    "end": "3183640"
  },
  {
    "text": "small my microphone is too large",
    "start": "3183640",
    "end": "3188480"
  },
  {
    "text": "this okay can everybody hear",
    "start": "3207920",
    "end": "3214200"
  },
  {
    "text": "me can everybody can everybody hear me",
    "start": "3214200",
    "end": "3220920"
  },
  {
    "text": "okay all right um this is the scanf function inside um",
    "start": "3222240",
    "end": "3230200"
  },
  {
    "text": "the executable which the disassembler has um identified so I hit contr X to",
    "start": "3230200",
    "end": "3236200"
  },
  {
    "text": "see see how many CS to scanf we have in total here it's 29 and um you will now get a good idea",
    "start": "3236200",
    "end": "3245640"
  },
  {
    "text": "of um why I wrote those scripts because doing this manually is incredibly boring",
    "start": "3245640",
    "end": "3251640"
  },
  {
    "text": "and um yeah is something",
    "start": "3251640",
    "end": "3256880"
  },
  {
    "text": "wrong um trying to turn this has this",
    "start": "3256880",
    "end": "3262599"
  },
  {
    "text": "oh all right let's just move on um okay so um this is incredibly boring because",
    "start": "3262599",
    "end": "3269680"
  },
  {
    "text": "we have to check a lot of scanf calls now let's check the first scanf we have a forance string with percent D we want",
    "start": "3269680",
    "end": "3276720"
  },
  {
    "text": "a percent s this is not interesting not",
    "start": "3276720",
    "end": "3282760"
  },
  {
    "text": "interesting not interesting not interesting not",
    "start": "3282760",
    "end": "3289400"
  },
  {
    "text": "interesting not interesting not",
    "start": "3289400",
    "end": "3295079"
  },
  {
    "text": "interesting not interesting not",
    "start": "3295079",
    "end": "3300599"
  },
  {
    "text": "interesting not interesting scripting is cool not",
    "start": "3300599",
    "end": "3306880"
  },
  {
    "text": "interesting not interesting not interesting not",
    "start": "3306880",
    "end": "3313480"
  },
  {
    "text": "interesting not interesting not interesting",
    "start": "3313480",
    "end": "3319040"
  },
  {
    "text": "whoa nice so um once you found something that looks fishy you have first to do",
    "start": "3319040",
    "end": "3326039"
  },
  {
    "text": "some buffer sici arithmetics because sometimes there's programming bugs or frequently you'll find programming bugs",
    "start": "3326039",
    "end": "3333160"
  },
  {
    "text": "that don't really have a security impact because you're not overwriting anything useful so in this",
    "start": "3333160",
    "end": "3339039"
  },
  {
    "text": "case we can see that we're paring data from a 1,24 byte buffer into three",
    "start": "3339039",
    "end": "3347760"
  },
  {
    "text": "whoops three 128 byte buffers on the stack our return address",
    "start": "3347760",
    "end": "3354240"
  },
  {
    "text": "sits here our frame p for pointer sits here the source is here and the buffer",
    "start": "3354240",
    "end": "3361280"
  },
  {
    "text": "closest to the return address is here so even if we try to overflow this buffer using 1,24 bytes we will completely",
    "start": "3361280",
    "end": "3369359"
  },
  {
    "text": "overflow it we'll override VAR 404 and we'll get stuck somewhere here before",
    "start": "3369359",
    "end": "3374920"
  },
  {
    "text": "the end of the source buffer so um unless the program does",
    "start": "3374920",
    "end": "3380359"
  },
  {
    "text": "something really fishy with v 404 we don't have or we haven't gained anything from this so we try to figure out what's",
    "start": "3380359",
    "end": "3387960"
  },
  {
    "text": "going on with v 404 and um as you can see down here V 44",
    "start": "3387960",
    "end": "3395880"
  },
  {
    "text": "gets overwritten right after the scanf call so whatever value we put in here",
    "start": "3395880",
    "end": "3402920"
  },
  {
    "text": "it's gone by this line so um basically we're back to not",
    "start": "3402920",
    "end": "3411520"
  },
  {
    "text": "interesting not interesting not interesting oh okay another percent",
    "start": "3412680",
    "end": "3421839"
  },
  {
    "text": "s we're targeting a 128 bite buffer which is right next to the stack or",
    "start": "3421839",
    "end": "3427440"
  },
  {
    "text": "right next to the return address here and basically the source is",
    "start": "3427440",
    "end": "3433480"
  },
  {
    "text": "a pointer which is the first argument to the function we're in Ida names the arguments to a function in a way that",
    "start": "3433480",
    "end": "3440200"
  },
  {
    "text": "Arc zero is the first one Arc four is the second one and so on so we scroll to the very top of this function and see",
    "start": "3440200",
    "end": "3448839"
  },
  {
    "text": "where that comes from and here we go this is the first argument it's a",
    "start": "3448839",
    "end": "3456720"
  },
  {
    "text": "buffer which is inside some kind of structure as Arc four is a structure pointer and this buffer sits at offset",
    "start": "3456720",
    "end": "3464000"
  },
  {
    "text": "12 of that structure so we scroll up a bit to see where this is coming from um",
    "start": "3464000",
    "end": "3469359"
  },
  {
    "text": "the names you see here like do IMAP connection um they are not supposed to be there apparently the author um left",
    "start": "3469359",
    "end": "3475559"
  },
  {
    "text": "debug information in their current build hey that happens quite a lot actually um the Netscape guys I fixed",
    "start": "3475559",
    "end": "3482839"
  },
  {
    "text": "the format string bu in one of their um shtml parsing libraries and they were nice enough to send me like oh we fixed",
    "start": "3482839",
    "end": "3488839"
  },
  {
    "text": "it here it is test that version and full debug info was in there all right sure",
    "start": "3488839",
    "end": "3494400"
  },
  {
    "text": "come checkpoint do that",
    "start": "3494400",
    "end": "3497359"
  },
  {
    "text": "once all right um up here we have the receive IMAP command now this is really nice now because we know pretty much",
    "start": "3500119",
    "end": "3506440"
  },
  {
    "text": "what's going on so it receives an IMAP command and as you can see",
    "start": "3506440",
    "end": "3512160"
  },
  {
    "text": "here it's passing the buffer as one of the arguments to this so we can safely assume that",
    "start": "3512160",
    "end": "3520200"
  },
  {
    "text": "receive IMAP command leads",
    "start": "3520200",
    "end": "3525440"
  },
  {
    "text": "to a receive call down here well that's a",
    "start": "3525440",
    "end": "3530839"
  },
  {
    "text": "bit Ah here it is so basically we scroll up a bit more and",
    "start": "3530839",
    "end": "3538160"
  },
  {
    "text": "see what's going on and here we go we got the function do",
    "start": "3538160",
    "end": "3544160"
  },
  {
    "text": "IMAP connection or IMAP connection and the program generates a",
    "start": "3544160",
    "end": "3551000"
  },
  {
    "text": "nice Banner here using",
    "start": "3551000",
    "end": "3556200"
  },
  {
    "text": "sprintf then sends it off to the guy who just",
    "start": "3556200",
    "end": "3561680"
  },
  {
    "text": "connected then receives up to 16 th000 bytes from the",
    "start": "3562319",
    "end": "3569119"
  },
  {
    "text": "user and passes it on to split IMAP command remember we only need 128 bytes",
    "start": "3570839",
    "end": "3576799"
  },
  {
    "text": "to fill our buffer and um 136 bytes to smash the stack so",
    "start": "3576799",
    "end": "3583960"
  },
  {
    "text": "hypothetically we' think that we just connect send 136 bytes and we would have",
    "start": "3583960",
    "end": "3589319"
  },
  {
    "text": "a clear stack smash so I have already configured the proxy to enable IM connections",
    "start": "3589319",
    "end": "3597960"
  },
  {
    "text": "no wonder they Nam their product",
    "start": "3599119",
    "end": "3602359"
  },
  {
    "text": "Sesame okay so we connect to the IMAP",
    "start": "3617640",
    "end": "3624160"
  },
  {
    "text": "Port start sending data",
    "start": "3624160",
    "end": "3627960"
  },
  {
    "text": "80 bytes 90",
    "start": "3629440",
    "end": "3634480"
  },
  {
    "text": "bytes 100 bytes I'm just trying to make it more",
    "start": "3634480",
    "end": "3639839"
  },
  {
    "text": "dramatic 110",
    "start": "3639839",
    "end": "3646760"
  },
  {
    "text": "120",
    "start": "3646760",
    "end": "3649760"
  },
  {
    "text": "128 frame pointer return address and let's just hope they didn't make a mistake",
    "start": "3652039",
    "end": "3658319"
  },
  {
    "text": "counting whoops perhaps you should start a debugger perhaps you'll catch the exception most likely you'll not but",
    "start": "3658319",
    "end": "3664520"
  },
  {
    "text": "we'll",
    "start": "3664520",
    "end": "3666839"
  },
  {
    "text": "see well soft us usually doesn't catch exceptions to too well so it doesn't oh",
    "start": "3671680",
    "end": "3678720"
  },
  {
    "text": "here we go oh I I made a mistake counting so you can see that our EIP has",
    "start": "3678720",
    "end": "3685039"
  },
  {
    "text": "been completely taken um but apparently I had one a too much",
    "start": "3685039",
    "end": "3691960"
  },
  {
    "text": "so at this point we have a complete stack Smash and complete control and I",
    "start": "3691960",
    "end": "3697160"
  },
  {
    "text": "think um we found a vulnerability",
    "start": "3697160",
    "end": "3702240"
  },
  {
    "text": "okay so um does anybody know the exact time do I still have time to show how to",
    "start": "3702240",
    "end": "3708440"
  },
  {
    "text": "fix this vulnerability before before we're supposed to break I got one minute okay then I'm not fixing this",
    "start": "3708440",
    "end": "3716119"
  },
  {
    "text": "all right let's break thank [Applause]",
    "start": "3716119",
    "end": "3728420"
  },
  {
    "text": "you",
    "start": "3744839",
    "end": "3747839"
  },
  {
    "text": "e",
    "start": "3774839",
    "end": "3777839"
  },
  {
    "text": "e",
    "start": "3804760",
    "end": "3807760"
  },
  {
    "text": "e",
    "start": "3834720",
    "end": "3837720"
  },
  {
    "text": "e",
    "start": "3864720",
    "end": "3867720"
  },
  {
    "text": "e",
    "start": "3894640",
    "end": "3897640"
  },
  {
    "text": "e",
    "start": "3924640",
    "end": "3927640"
  },
  {
    "text": "e",
    "start": "3954640",
    "end": "3957640"
  },
  {
    "text": "e",
    "start": "3984559",
    "end": "3987559"
  },
  {
    "text": "e",
    "start": "4014520",
    "end": "4017520"
  },
  {
    "text": "e",
    "start": "4044520",
    "end": "4047520"
  },
  {
    "text": "e",
    "start": "4074440",
    "end": "4077440"
  },
  {
    "text": "e",
    "start": "4104440",
    "end": "4107440"
  },
  {
    "text": "e",
    "start": "4134440",
    "end": "4137440"
  },
  {
    "text": "e",
    "start": "4164359",
    "end": "4167359"
  },
  {
    "text": "e",
    "start": "4194320",
    "end": "4197320"
  },
  {
    "text": "e",
    "start": "4224320",
    "end": "4227320"
  },
  {
    "text": "e",
    "start": "4254239",
    "end": "4257239"
  },
  {
    "text": "e",
    "start": "4284239",
    "end": "4287239"
  },
  {
    "text": "e",
    "start": "4314239",
    "end": "4317239"
  },
  {
    "text": "e",
    "start": "4344159",
    "end": "4347159"
  },
  {
    "text": "e e",
    "start": "4374120",
    "end": "4378159"
  }
]