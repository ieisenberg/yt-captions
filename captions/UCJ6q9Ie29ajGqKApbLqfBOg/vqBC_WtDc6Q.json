[
  {
    "text": "hello everyone Welcome to our talk Ling door hidden attack service in the",
    "start": "2560",
    "end": "8280"
  },
  {
    "text": "Android nink kernel modules uh in this talk we will discuss",
    "start": "8280",
    "end": "14759"
  },
  {
    "text": "the nink attack service buried deep in the Android",
    "start": "14759",
    "end": "21279"
  },
  {
    "text": "ecosystem uh first of all let me introduce ourselves we all confirm by do",
    "start": "21320",
    "end": "27359"
  },
  {
    "text": "aot security team I'm cha I focus on the Android and Linux",
    "start": "27359",
    "end": "34520"
  },
  {
    "text": "B hunting and exploit it and have already found more than 100",
    "start": "34520",
    "end": "40440"
  },
  {
    "text": "vulnerabilities in the last eight months uh you moreing n kernel C medium",
    "start": "40440",
    "end": "48239"
  },
  {
    "text": "Tech and so on H is more interested in I iot and platform",
    "start": "48239",
    "end": "55680"
  },
  {
    "text": "security he was a blackhead USA speaker team sh is our leader he focus on the",
    "start": "55680",
    "end": "63000"
  },
  {
    "text": "system and the software Security Solutions and there was a pack and the",
    "start": "63000",
    "end": "68119"
  },
  {
    "text": "HB speaker uh okay next we will first",
    "start": "68119",
    "end": "73840"
  },
  {
    "text": "introduce the concept of n link you will learn what the net link is in this",
    "start": "73840",
    "end": "79840"
  },
  {
    "text": "section and then we will analyze the attack surface of n link you will",
    "start": "79840",
    "end": "85720"
  },
  {
    "text": "understand the underlying principles behind the formation of of net link",
    "start": "85720",
    "end": "92759"
  },
  {
    "text": "vulnerabilities uh next we will show you four typical vulnerabilities scenarios",
    "start": "92759",
    "end": "98360"
  },
  {
    "text": "you will get the vulnerability mly methologies in the real",
    "start": "98360",
    "end": "103880"
  },
  {
    "text": "world after that the POC template and solutions to Common vulnerability",
    "start": "103880",
    "end": "109719"
  },
  {
    "text": "verification programs will be given finally we will provider vendors with",
    "start": "109719",
    "end": "115680"
  },
  {
    "text": "some security suggestions for customizing Network that",
    "start": "115680",
    "end": "121840"
  },
  {
    "text": "link uh okay let's start with uh the",
    "start": "121840",
    "end": "127399"
  },
  {
    "text": "introduction uh so what are the local attack services in the Linux kernel the",
    "start": "127399",
    "end": "133599"
  },
  {
    "text": "possible answer may be operations such as our controller read right uh device",
    "start": "133599",
    "end": "139519"
  },
  {
    "text": "files system files process files and so on uh but today we will introduce a",
    "start": "139519",
    "end": "146959"
  },
  {
    "text": "commonly overlooked tag service nni the link is often described as an out",
    "start": "146959",
    "end": "154040"
  },
  {
    "text": "control out controller replacement which meanly used for bidirectional",
    "start": "154040",
    "end": "160280"
  },
  {
    "text": "communication between the kernel and the user space processes uh cly communication between",
    "start": "160280",
    "end": "167640"
  },
  {
    "text": "user space processes is also applicable that link has some features that are",
    "start": "167640",
    "end": "173599"
  },
  {
    "text": "different from our controller such as for duplex asron and the multicast just",
    "start": "173599",
    "end": "181879"
  },
  {
    "text": "like the finger below uh we divider thenni into two",
    "start": "181879",
    "end": "188760"
  },
  {
    "text": "categories according to its usage classic n and generic n as sh in",
    "start": "188760",
    "end": "196120"
  },
  {
    "text": "the right finger the generic partical ID is",
    "start": "196120",
    "end": "202879"
  },
  {
    "text": "16 okay is 16 and uh uh the others are",
    "start": "203200",
    "end": "210760"
  },
  {
    "text": "classic nink IDs classic nink socket or nink socket",
    "start": "210760",
    "end": "217400"
  },
  {
    "text": "is spot eer since 1999 with Linux 2.2 as shown in the following finger it",
    "start": "217400",
    "end": "225599"
  },
  {
    "text": "is a socket family so it's user space programming model uses the Linux socket",
    "start": "225599",
    "end": "232239"
  },
  {
    "text": "API due to the feature of for duplex communication n transform has two",
    "start": "232239",
    "end": "239040"
  },
  {
    "text": "directions top down and the Buton up uh in the left finger we can see the land",
    "start": "239040",
    "end": "246680"
  },
  {
    "text": "link kernel create function will register the input function the input function is to pass the message received",
    "start": "246680",
    "end": "254840"
  },
  {
    "text": "from user space it receives H SKB as the input parameter uh the SKB contains the",
    "start": "254840",
    "end": "263759"
  },
  {
    "text": "N link transform message uh in the right finger the",
    "start": "263759",
    "end": "269360"
  },
  {
    "text": "message unic or message multic function is to send the building message to user",
    "start": "269360",
    "end": "277000"
  },
  {
    "text": "space okay uh the programming model of classic seems to be perfect but why was",
    "start": "277000",
    "end": "285080"
  },
  {
    "text": "generic n introduced later let's take a look at the classic n kernel",
    "start": "285080",
    "end": "292199"
  },
  {
    "text": "registration function n kernel create uh in the right figure uh it's",
    "start": "292199",
    "end": "298560"
  },
  {
    "text": "the second parameter is unit uh which represents the N protal ID if we want to",
    "start": "298560",
    "end": "306960"
  },
  {
    "text": "custom customize a classic nni we need to add a new protal ID in the Linux",
    "start": "306960",
    "end": "314840"
  },
  {
    "text": "kernel the maximum number of partical ID is",
    "start": "314840",
    "end": "320400"
  },
  {
    "text": "32 and the kernel has already occupied 22 so the kernel Lees only 10 for",
    "start": "320400",
    "end": "327400"
  },
  {
    "text": "customized usage of course we can enight the max ninks but this",
    "start": "327400",
    "end": "333600"
  },
  {
    "text": "doesn't seem a good idea in addition classic nni is more complex to use",
    "start": "333600",
    "end": "340080"
  },
  {
    "text": "because it requires passing the net link message by ourselves the passing mro in",
    "start": "340080",
    "end": "346520"
  },
  {
    "text": "the wrer Buton figure uh therefore the generic n come",
    "start": "346520",
    "end": "353160"
  },
  {
    "text": "into it exence exence okay uh generic link soet is spoted",
    "start": "353160",
    "end": "361120"
  },
  {
    "text": "since 2006 with Linux 2.6.5 all the customized usage can share",
    "start": "361120",
    "end": "369199"
  },
  {
    "text": "a single partical id16 when passing the user space messages uh we only need to",
    "start": "369199",
    "end": "377120"
  },
  {
    "text": "focus on the payload also KNN as attributes in the left",
    "start": "377120",
    "end": "383680"
  },
  {
    "text": "finger uh we can see that the junior register family function will register",
    "start": "383680",
    "end": "389759"
  },
  {
    "text": "the Ops and small Ops the difference between them is that the small Ops",
    "start": "389759",
    "end": "395759"
  },
  {
    "text": "provides few messure handling functions and is simpar uh both Ops and small Ops",
    "start": "395759",
    "end": "403759"
  },
  {
    "text": "uh contain the do it function uh the do it function is to",
    "start": "403759",
    "end": "408960"
  },
  {
    "text": "pass the attributes received from user space uh it receives a SKB and an infer",
    "start": "408960",
    "end": "417039"
  },
  {
    "text": "as the input parameters uh the info contains the user payload or attributes",
    "start": "417039",
    "end": "423800"
  },
  {
    "text": "in the right finger four functions is to send the building attributes to user",
    "start": "423800",
    "end": "431319"
  },
  {
    "text": "space okay after introducing the Net linkers usage let's analyze that attack",
    "start": "431319",
    "end": "437599"
  },
  {
    "text": "surface in deeps uh first of all let's take a look",
    "start": "437599",
    "end": "443160"
  },
  {
    "text": "at the nink architecture in user space and application can directly call or",
    "start": "443160",
    "end": "450080"
  },
  {
    "text": "indirectly use liver and a to call the Linux socket API to send the net link",
    "start": "450080",
    "end": "458080"
  },
  {
    "text": "message to the kernel space uh after receiving the message the",
    "start": "458080",
    "end": "465080"
  },
  {
    "text": "kernel will root it to the N Linker sub system uh the N the sub system will",
    "start": "465080",
    "end": "471599"
  },
  {
    "text": "handle it according to its usage category next we we will focus on the",
    "start": "471599",
    "end": "477479"
  },
  {
    "text": "messenger handling me using of the Linux sub",
    "start": "477479",
    "end": "483400"
  },
  {
    "text": "system a classic nink Transformer May consists of multiple net link messages",
    "start": "483400",
    "end": "491599"
  },
  {
    "text": "you can see it uh in the first line each message contains a net link message",
    "start": "491599",
    "end": "498560"
  },
  {
    "text": "header uh use payload and the pendings uh the head size and payload size should",
    "start": "498560",
    "end": "504960"
  },
  {
    "text": "be four byes andl the M mure header structure contains consists of five",
    "start": "504960",
    "end": "512360"
  },
  {
    "text": "Fields message lens content type additional Flag sequence number and the",
    "start": "512360",
    "end": "519279"
  },
  {
    "text": "process Port ID uh the message lens is the total size",
    "start": "519279",
    "end": "525440"
  },
  {
    "text": "of a then link message the port ID is usually set to the process",
    "start": "525440",
    "end": "532839"
  },
  {
    "text": "ID and the classic nink transform messager is sent from user space to k",
    "start": "533200",
    "end": "539240"
  },
  {
    "text": "space by send to or send message function the SKB will contain the",
    "start": "539240",
    "end": "544920"
  },
  {
    "text": "transform messager it is an input parameter of the input function the",
    "start": "544920",
    "end": "550880"
  },
  {
    "text": "input function registered by n kernel create function where pass this",
    "start": "550880",
    "end": "556200"
  },
  {
    "text": "transform message we can get the transform message from the xb's",
    "start": "556200",
    "end": "562640"
  },
  {
    "text": "data uh the question is uh what checks do the nin kernal net link subsystem do",
    "start": "562640",
    "end": "569560"
  },
  {
    "text": "on the transfer message the answer is",
    "start": "569560",
    "end": "574720"
  },
  {
    "text": "chei uh what which means we need to check the land link message Header by",
    "start": "574720",
    "end": "580600"
  },
  {
    "text": "ourselves uh it is a dangerous be Behavior to leave the checking to the",
    "start": "580600",
    "end": "587360"
  },
  {
    "text": "developers uh so uh how should we securely pass the top down transform",
    "start": "587360",
    "end": "592959"
  },
  {
    "text": "message not knowing the attack not knowing the defenses uh we summarize the",
    "start": "592959",
    "end": "599399"
  },
  {
    "text": "three possible attack vectors the first is the developers don't have a create",
    "start": "599399",
    "end": "604800"
  },
  {
    "text": "understanding of the relationship between skb's lens message lens and message head lens",
    "start": "604800",
    "end": "614720"
  },
  {
    "text": "mro so they don't do any checks at all uh the SK SKB is transform mes total",
    "start": "614720",
    "end": "624320"
  },
  {
    "text": "size it may consist of multiple ning messages lens",
    "start": "624320",
    "end": "631320"
  },
  {
    "text": "uh the is messager length is one messager total size the message header",
    "start": "631320",
    "end": "639560"
  },
  {
    "text": "header lens macro is one messageer header size it is a fixed",
    "start": "639560",
    "end": "646079"
  },
  {
    "text": "value um a convenient way is that we can",
    "start": "646079",
    "end": "651399"
  },
  {
    "text": "do those checks by the message okay macro the second attack Vector is the",
    "start": "651399",
    "end": "658079"
  },
  {
    "text": "Developers start passing the payload structure without checking the payload",
    "start": "658079",
    "end": "664120"
  },
  {
    "text": "lens and the third attack Vector is the developers don't fully check the",
    "start": "664120",
    "end": "669480"
  },
  {
    "text": "validity of the payload content uh in contrast do uh how do we",
    "start": "669480",
    "end": "677120"
  },
  {
    "text": "attack the building of classic nck masser ascending to user space all we",
    "start": "677120",
    "end": "683160"
  },
  {
    "text": "think we can think of is combining it with other kernel attack surfaces such",
    "start": "683160",
    "end": "689399"
  },
  {
    "text": "as find operations socket and so on we can reverse deduce The Source through",
    "start": "689399",
    "end": "696639"
  },
  {
    "text": "the Classic nni Building message and then we do we can do vulnerability",
    "start": "696639",
    "end": "705120"
  },
  {
    "text": "Ming after analyzing the attex surface of classic neic let's continue continue",
    "start": "705120",
    "end": "711760"
  },
  {
    "text": "to analyze the generic n link the first for the message format of",
    "start": "711760",
    "end": "718880"
  },
  {
    "text": "generic gener nni is as shown in the finger below we can see that the generic",
    "start": "718880",
    "end": "724800"
  },
  {
    "text": "nni is created based on classic n because the uh General message format is",
    "start": "724800",
    "end": "732200"
  },
  {
    "text": "the same you can see the first line the difference is that the payload",
    "start": "732200",
    "end": "739959"
  },
  {
    "text": "composition uh which contains a generic n message header a family header uh",
    "start": "739959",
    "end": "746399"
  },
  {
    "text": "attributes and the pending each attribute contains a n link attribute",
    "start": "746399",
    "end": "751800"
  },
  {
    "text": "header and attribute payload and z",
    "start": "751800",
    "end": "757040"
  },
  {
    "text": "pendings uh the family header is optional and customized so let's focus on the generic",
    "start": "757040",
    "end": "764279"
  },
  {
    "text": "Ling mess header and attribute header the junior mure header structure con",
    "start": "764279",
    "end": "771000"
  },
  {
    "text": "consists of three Fields a commander version and reserved the commander field",
    "start": "771000",
    "end": "777680"
  },
  {
    "text": "will instruct the current to call which do it function the M attribute structure",
    "start": "777680",
    "end": "785079"
  },
  {
    "text": "consists of two Fields then link attribute lens and the type together",
    "start": "785079",
    "end": "790160"
  },
  {
    "text": "with the attribute payload they form the tlv structure the net link attribute",
    "start": "790160",
    "end": "796959"
  },
  {
    "text": "length is the total size of an attribute including the size of net link attribute",
    "start": "796959",
    "end": "803760"
  },
  {
    "text": "header the N link attribute type is the index of attributes are",
    "start": "803760",
    "end": "811440"
  },
  {
    "text": "real uh the generic Nal transform Messer is also sent from us space to con Space",
    "start": "812639",
    "end": "818920"
  },
  {
    "text": "by send to our send message function uh the info will contain the transfer",
    "start": "818920",
    "end": "825079"
  },
  {
    "text": "message it is an input parameter of the do it function the do it function",
    "start": "825079",
    "end": "831440"
  },
  {
    "text": "registered by genor reest reest Family Function where pass this transform",
    "start": "831440",
    "end": "837839"
  },
  {
    "text": "message we can get the transform message from the inverse attributes",
    "start": "837839",
    "end": "843440"
  },
  {
    "text": "field uh the same question is what checks does the N kernal net subsystem",
    "start": "843440",
    "end": "850199"
  },
  {
    "text": "do on the attributes the answer is uh check by n",
    "start": "850199",
    "end": "857639"
  },
  {
    "text": "policy the N policy namely n attribute policy is registered in the junior",
    "start": "857639",
    "end": "865680"
  },
  {
    "text": "family structure or Junior Ops uh structure the junior Ops uh policy Tes takes",
    "start": "865680",
    "end": "873839"
  },
  {
    "text": "precedence over the junior family's policy we can see uh the N policy",
    "start": "873839",
    "end": "880680"
  },
  {
    "text": "contains an attribute type lens uh Union and so on the attribute type here uh is",
    "start": "880680",
    "end": "889639"
  },
  {
    "text": "the data type of the attribute pad the length has different means depend on the",
    "start": "889639",
    "end": "896160"
  },
  {
    "text": "attribute type for example if the the type is n string the length is the",
    "start": "896160",
    "end": "903160"
  },
  {
    "text": "maximum L of the attribute payload the union is also used to check the validity",
    "start": "903160",
    "end": "910040"
  },
  {
    "text": "based on validation type all checks on the attributes I down",
    "start": "910040",
    "end": "916279"
  },
  {
    "text": "in the validator function uh so and does the top down",
    "start": "916279",
    "end": "924720"
  },
  {
    "text": "generic land link transform maure passing have no security issues of",
    "start": "924720",
    "end": "930079"
  },
  {
    "text": "course not uh let's take a look at some attack Victors due to developer",
    "start": "930079",
    "end": "936360"
  },
  {
    "text": "oversight uh the first is that the developers neither don't set a policy at",
    "start": "936360",
    "end": "941920"
  },
  {
    "text": "all or set a set an increate uh policy during the policy uh registration phase",
    "start": "941920",
    "end": "950399"
  },
  {
    "text": "the second the second attack vctor is the developers uh don't check if the",
    "start": "950399",
    "end": "955839"
  },
  {
    "text": "attribute is long during the attrib passing fees uh the third one is uh",
    "start": "955839",
    "end": "963079"
  },
  {
    "text": "developers don't fully check the validate validity of the attribute P",
    "start": "963079",
    "end": "969399"
  },
  {
    "text": "contain during the attributes passing",
    "start": "969399",
    "end": "974639"
  },
  {
    "text": "phase uh in contrast how do we attack the building of generic ning messager",
    "start": "976880",
    "end": "984360"
  },
  {
    "text": "send send to user space same with class classic nni we can combine it with other",
    "start": "984360",
    "end": "991240"
  },
  {
    "text": "colal attack surfaces such as fire so and so on we can reversely deduce The",
    "start": "991240",
    "end": "998959"
  },
  {
    "text": "Source through the generic nink building message and then do vulnerability",
    "start": "998959",
    "end": "1006319"
  },
  {
    "text": "Mary uh okay uh from the preview section we can conclude that both classic and",
    "start": "1007319",
    "end": "1014639"
  },
  {
    "text": "generic nni have some possible security three",
    "start": "1014639",
    "end": "1020040"
  },
  {
    "text": "uh now let's take a look at some typical Le vulnerability scenarios in the real",
    "start": "1020040",
    "end": "1028319"
  },
  {
    "text": "world okay uh based on the attack service we uh",
    "start": "1028600",
    "end": "1034600"
  },
  {
    "text": "investigated uh nink related Cel modules from four wellknown vendors and",
    "start": "1034600",
    "end": "1041880"
  },
  {
    "text": "discovered 138 vulnerabilities and obtained 19 cvds um all the",
    "start": "1041880",
    "end": "1049200"
  },
  {
    "text": "vulnerabilities have have been fixed by",
    "start": "1049200",
    "end": "1054760"
  },
  {
    "text": "vendors uh in the left finger we can see that there are more vulnerabilities",
    "start": "1054760",
    "end": "1061400"
  },
  {
    "text": "related related to Classic n and Zi also more",
    "start": "1061400",
    "end": "1067480"
  },
  {
    "text": "several it suggests that we should consider using generic n for",
    "start": "1067480",
    "end": "1075080"
  },
  {
    "text": "customization instead of classic n in the right finger we can see that both",
    "start": "1075080",
    "end": "1081720"
  },
  {
    "text": "the upstream and downstream kernel may have vulnerabilities uh but the downstream",
    "start": "1081720",
    "end": "1088400"
  },
  {
    "text": "kernel is more likely to generate netlink related",
    "start": "1088400",
    "end": "1094679"
  },
  {
    "text": "vulnerabilities uh let's take a look at the first case the first case is",
    "start": "1095799",
    "end": "1101159"
  },
  {
    "text": "attacking the passing of classic n message uh in this scenario the classic",
    "start": "1101159",
    "end": "1109480"
  },
  {
    "text": "message is sent is sent to Kernel Space by sent to M sent to function uh the",
    "start": "1109480",
    "end": "1117200"
  },
  {
    "text": "kernel will invoke input function to pass in this message as sh in the right",
    "start": "1117200",
    "end": "1123960"
  },
  {
    "text": "finger uh mtk gaug ning Handler function",
    "start": "1123960",
    "end": "1129000"
  },
  {
    "text": "is registed as the input function by net L kernel create",
    "start": "1129000",
    "end": "1135240"
  },
  {
    "text": "function uh when receiving a messager it call mtk uh battery ning Handler",
    "start": "1135240",
    "end": "1142400"
  },
  {
    "text": "function for further processing uh the mtk uh battery net",
    "start": "1142400",
    "end": "1148880"
  },
  {
    "text": "link Handler function get get the net link header namely n from skb's data fi",
    "start": "1148880",
    "end": "1156280"
  },
  {
    "text": "first then it gets the user payload namely data",
    "start": "1156280",
    "end": "1162000"
  },
  {
    "text": "from the date will be passed into mtk battery demon Handler function this",
    "start": "1162000",
    "end": "1170039"
  },
  {
    "text": "function will further pass the payload content namely",
    "start": "1170039",
    "end": "1175720"
  },
  {
    "text": "message it will mem copy the messages and fgd date field to another variable",
    "start": "1175720",
    "end": "1184080"
  },
  {
    "text": "the question is how many security vulnerabilities exist",
    "start": "1184080",
    "end": "1191600"
  },
  {
    "text": "here uh based on the attack vectors we preview we previews",
    "start": "1191679",
    "end": "1199440"
  },
  {
    "text": "summarized this case has at least two vulnerabilities the first one is that uh",
    "start": "1199440",
    "end": "1206480"
  },
  {
    "text": "it accesses then link header without checking the the head lens the second",
    "start": "1206480",
    "end": "1214200"
  },
  {
    "text": "one is that it accesses net link payload without checking the payload lens both",
    "start": "1214200",
    "end": "1220919"
  },
  {
    "text": "vulnerabilities will result in out out bonds read uh for the second",
    "start": "1220919",
    "end": "1229000"
  },
  {
    "text": "all all the O read data located in the receive buffer the answer is not",
    "start": "1229000",
    "end": "1236880"
  },
  {
    "text": "necessar uh there are two ways that may result in O read outside the receive",
    "start": "1236880",
    "end": "1245120"
  },
  {
    "text": "buffer the first method is calling set socket option a function to set or",
    "start": "1245120",
    "end": "1253240"
  },
  {
    "text": "minimize the receive buer size the minim receive buer size is typically a few",
    "start": "1253240",
    "end": "1260559"
  },
  {
    "text": "kilo bytes uh the second method is carefully",
    "start": "1260559",
    "end": "1266320"
  },
  {
    "text": "constructing p ps that precisely fills",
    "start": "1266320",
    "end": "1271400"
  },
  {
    "text": "the receive buffer this can cause the uh outon read data to be the receive buffer",
    "start": "1271400",
    "end": "1278919"
  },
  {
    "text": "outside just like showing in the right botom",
    "start": "1278919",
    "end": "1284880"
  },
  {
    "text": "finger the second case is taking the building of a classic n message the",
    "start": "1285000",
    "end": "1291880"
  },
  {
    "text": "vulnerability minding method is transing the message s sending to user space as",
    "start": "1291880",
    "end": "1298480"
  },
  {
    "text": "shown in the finger below we first locate the message sending function on",
    "start": "1298480",
    "end": "1304559"
  },
  {
    "text": "message unic uh then we can describe the entire",
    "start": "1304559",
    "end": "1310279"
  },
  {
    "text": "life cycle of this message uh first and user space process sending uh send uh de",
    "start": "1310279",
    "end": "1318720"
  },
  {
    "text": "K encrypt dek request to colel space by our controller",
    "start": "1318720",
    "end": "1325640"
  },
  {
    "text": "function after receiving the our controller request the kernel allocate a",
    "start": "1325640",
    "end": "1331600"
  },
  {
    "text": "request and send the request to user Space by mure uni C function uh then it",
    "start": "1331600",
    "end": "1339120"
  },
  {
    "text": "will wa for the processing result after receiving the request from the user from",
    "start": "1339120",
    "end": "1346880"
  },
  {
    "text": "the kernel space the user space process will handle it and send the processing",
    "start": "1346880",
    "end": "1352960"
  },
  {
    "text": "result to the kernel through classic n link uh the Kel will call input function",
    "start": "1352960",
    "end": "1360880"
  },
  {
    "text": "to cancel the we then the request will be",
    "start": "1360880",
    "end": "1366559"
  },
  {
    "text": "released uh now we understand the entire process flow uh let's take a look at the",
    "start": "1366559",
    "end": "1373080"
  },
  {
    "text": "implementation of the input function uh we can see is that before",
    "start": "1373080",
    "end": "1379840"
  },
  {
    "text": "canceling the V uh it will find this request from the global variable gpub",
    "start": "1379840",
    "end": "1387320"
  },
  {
    "text": "crypto controller and uh copies the processing result to the request uh the",
    "start": "1387320",
    "end": "1395120"
  },
  {
    "text": "problem is that the uh request isn't protected in any way uh which means we",
    "start": "1395120",
    "end": "1402279"
  },
  {
    "text": "may still access this request even if it has already been deleted released in",
    "start": "1402279",
    "end": "1409720"
  },
  {
    "text": "another thre finally and use after three vulnerabilities is",
    "start": "1409720",
    "end": "1416480"
  },
  {
    "text": "triggered uh this case combines classic nni and our controller function the root",
    "start": "1416480",
    "end": "1422559"
  },
  {
    "text": "cause is a protected the global",
    "start": "1422559",
    "end": "1428000"
  },
  {
    "text": "variable um the third case is attacking the passing of generic n inor attributes",
    "start": "1429799",
    "end": "1437200"
  },
  {
    "text": "kmbd is a Linux kernel server uh which implements uh SAR 3 partical in kernel",
    "start": "1437200",
    "end": "1445760"
  },
  {
    "text": "space for sharing files over L Network in this scenario um the input is uh TCP",
    "start": "1445760",
    "end": "1455320"
  },
  {
    "text": "request the request will be proceeded by kmbd IPC read function uh the K smbd IPC",
    "start": "1455320",
    "end": "1464200"
  },
  {
    "text": "read function will call gen message uni C to send a request to user space and",
    "start": "1464200",
    "end": "1471679"
  },
  {
    "text": "then it will with for the response the user space process receives",
    "start": "1471679",
    "end": "1478279"
  },
  {
    "text": "and handers the request then it will send the response to the kernel by the",
    "start": "1478279",
    "end": "1484159"
  },
  {
    "text": "generic nink uh the kernel will call to it function to cancel the weight then the",
    "start": "1484159",
    "end": "1491240"
  },
  {
    "text": "member copy will be performed uh now we understand the an",
    "start": "1491240",
    "end": "1496679"
  },
  {
    "text": "process flow next's take a look at the implementation of the do it",
    "start": "1496679",
    "end": "1503480"
  },
  {
    "text": "function the do it function is the implemented as hander generic event",
    "start": "1503480",
    "end": "1509880"
  },
  {
    "text": "function it will pass the attribute payload and the payload size from the",
    "start": "1509880",
    "end": "1515080"
  },
  {
    "text": "info variable and then call hander response function the the hander",
    "start": "1515080",
    "end": "1522000"
  },
  {
    "text": "response function will copy the attribute payload to the response and",
    "start": "1522000",
    "end": "1527559"
  },
  {
    "text": "then caner the WID uh once the WID is considered the",
    "start": "1527559",
    "end": "1534279"
  },
  {
    "text": "kmbd IPC read function will return uh the response will be passed to the IPC",
    "start": "1534279",
    "end": "1542720"
  },
  {
    "text": "response payloader and is size however the size of IPC response payloader uh",
    "start": "1542720",
    "end": "1549200"
  },
  {
    "text": "doesn't be checked which mean lead to an O reader occurring in memory copy function uh",
    "start": "1549200",
    "end": "1557399"
  },
  {
    "text": "this case combines generic L and TCP its root cause is developers don't check the",
    "start": "1557399",
    "end": "1565760"
  },
  {
    "text": "validity of the attribute payload contain uh the last case is attacking",
    "start": "1565760",
    "end": "1573120"
  },
  {
    "text": "the building of generic n attributes uh similar to Classic n the vulnerability",
    "start": "1573120",
    "end": "1580760"
  },
  {
    "text": "mining method is Ching the attributes sending to user space as sh in the uh",
    "start": "1580760",
    "end": "1587960"
  },
  {
    "text": "fing below uh we first locate the attributes sending function jior message",
    "start": "1587960",
    "end": "1595039"
  },
  {
    "text": "unit Cur then we can describe the entire life cycle of those attributes as sh in",
    "start": "1595039",
    "end": "1602840"
  },
  {
    "text": "the left finger firstly um and US space process we send a right request to con Space by right",
    "start": "1602840",
    "end": "1612360"
  },
  {
    "text": "function then the receiving uh function FP right will be uh handle the writer",
    "start": "1612360",
    "end": "1619720"
  },
  {
    "text": "request and send the result to user Space by jior message unest function as",
    "start": "1619720",
    "end": "1627840"
  },
  {
    "text": "sh in the right finger uh let's take a look at the",
    "start": "1627840",
    "end": "1633600"
  },
  {
    "text": "request processing function FP WR uh the header parameter is copied",
    "start": "1633600",
    "end": "1641520"
  },
  {
    "text": "from the user space the um get date from MCU function doesn't check the validity",
    "start": "1641520",
    "end": "1649200"
  },
  {
    "text": "of the lens from the header which may lead to an O read to",
    "start": "1649200",
    "end": "1655600"
  },
  {
    "text": "the haer during memory copy this case combines generic n and right function as",
    "start": "1655600",
    "end": "1663600"
  },
  {
    "text": "root CA is developers don't check the validity of the writing",
    "start": "1663600",
    "end": "1671240"
  },
  {
    "text": "payload okay uh now we have understand understood the four vulnerability",
    "start": "1671600",
    "end": "1677559"
  },
  {
    "text": "scenario in the real world the question is how do we verify and exploit uh those",
    "start": "1677559",
    "end": "1687240"
  },
  {
    "text": "vulnerabilities the first thing is verification when we want to trigger a",
    "start": "1687559",
    "end": "1692600"
  },
  {
    "text": "risk condition we often encount The Source part occupation problem uh the",
    "start": "1692600",
    "end": "1699519"
  },
  {
    "text": "solution is simple neither use the process ID as put in multiprocess or try",
    "start": "1699519",
    "end": "1707720"
  },
  {
    "text": "uh avable port to bend in multi stre uh the P template of classic n is",
    "start": "1707720",
    "end": "1715640"
  },
  {
    "text": "sh on the right finger um we need to fill in a message",
    "start": "1715640",
    "end": "1721200"
  },
  {
    "text": "header and payload by ourselves uh for generic nink in order",
    "start": "1721200",
    "end": "1728600"
  },
  {
    "text": "to verify the vulnerability the first thing is solve the family ID acquisition",
    "start": "1728600",
    "end": "1736320"
  },
  {
    "text": "problem because all customer uh customer generic n lers",
    "start": "1736320",
    "end": "1742320"
  },
  {
    "text": "shares a partical ID 16 they are distinguished by the family name we can",
    "start": "1742320",
    "end": "1749760"
  },
  {
    "text": "get uh family ID by sending the message on the left",
    "start": "1749760",
    "end": "1755440"
  },
  {
    "text": "finger uh we need to fill in message header Junior message header",
    "start": "1755440",
    "end": "1761720"
  },
  {
    "text": "and attribute by ourselves the right finger is the PC template of generic",
    "start": "1761720",
    "end": "1769000"
  },
  {
    "text": "anic we need to pay attention to three functions uh jius uh send message",
    "start": "1769000",
    "end": "1777200"
  },
  {
    "text": "function is used to build and send generic net link message uh the junior",
    "start": "1777200",
    "end": "1783200"
  },
  {
    "text": "get family ID function is to get family ID by calling Junior send send message",
    "start": "1783200",
    "end": "1790720"
  },
  {
    "text": "function the junor receive message function is used to receive generic ning",
    "start": "1790720",
    "end": "1797200"
  },
  {
    "text": "message uh how we use and um how we use and um",
    "start": "1797200",
    "end": "1805240"
  },
  {
    "text": "arbitary read vulnerability and right worldw vulnerability to obtain privilege",
    "start": "1805240",
    "end": "1812799"
  },
  {
    "text": "escalation the exploitation is very simple firstly we use the arbitrary rate",
    "start": "1812799",
    "end": "1820159"
  },
  {
    "text": "vulnerability to obtain the address of credential then we can um modify the uh",
    "start": "1820159",
    "end": "1828200"
  },
  {
    "text": "credential by using the WR whatw vulnerability last but not least how are",
    "start": "1828200",
    "end": "1836880"
  },
  {
    "text": "net link related vulnerabilities mitigated for the androider system we",
    "start": "1836880",
    "end": "1843399"
  },
  {
    "text": "can set the target class net link soet permission by SE Linux",
    "start": "1843399",
    "end": "1850320"
  },
  {
    "text": "rulers for the Linux platform we can check the capet admin permission by then",
    "start": "1850320",
    "end": "1857159"
  },
  {
    "text": "iner B function uh through the ab an analysis",
    "start": "1857159",
    "end": "1865480"
  },
  {
    "text": "we can can uh conclude that nink is a hidden attack",
    "start": "1865480",
    "end": "1871960"
  },
  {
    "text": "surface um buried deep in the Android ecosystem",
    "start": "1871960",
    "end": "1877679"
  },
  {
    "text": "uh when C customizing classic n the Kel will do no checks on then messages uh",
    "start": "1877679",
    "end": "1886120"
  },
  {
    "text": "when we uh customize generic nni the colel will do checks by",
    "start": "1886120",
    "end": "1892600"
  },
  {
    "text": "attribute policy uh generic nni doesn't uh does more than does more than classic",
    "start": "1892600",
    "end": "1900559"
  },
  {
    "text": "n but it also introduce uh new secur secur",
    "start": "1900559",
    "end": "1907120"
  },
  {
    "text": "reads uh we have also prepared some suggestions for vendors uh the first one",
    "start": "1907120",
    "end": "1913880"
  },
  {
    "text": "is trying to customization using generic instead of classic nni uh the second one",
    "start": "1913880",
    "end": "1922279"
  },
  {
    "text": "is understanding understander um n",
    "start": "1922279",
    "end": "1927480"
  },
  {
    "text": "mechanism and ipis before using them uh that's all uh thank you for your",
    "start": "1927480",
    "end": "1934000"
  },
  {
    "text": "listening any question please tell me or you can also contact with me on SP card",
    "start": "1934000",
    "end": "1940200"
  },
  {
    "text": "thank you very much [Applause]",
    "start": "1940200",
    "end": "1945680"
  }
]