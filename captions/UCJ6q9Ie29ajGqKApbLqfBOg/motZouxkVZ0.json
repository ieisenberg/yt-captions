[
  {
    "text": "[Music]",
    "start": "1180",
    "end": "14730"
  },
  {
    "text": "hello everyone i'll be speaking today about oauth token",
    "start": "15759",
    "end": "20800"
  },
  {
    "text": "hijacking in google cloud my name is janko wong i'm currently a",
    "start": "20800",
    "end": "26640"
  },
  {
    "text": "security researcher at netscope and i've spent my career in a variety of",
    "start": "26640",
    "end": "32160"
  },
  {
    "text": "security areas at startups in engineering and product roles",
    "start": "32160",
    "end": "38320"
  },
  {
    "text": "covering some of these areas and topics so in this talk i'll be covering how",
    "start": "38320",
    "end": "45760"
  },
  {
    "text": "session tokens on a gcp admins client environment can be hijacked to gain access to that",
    "start": "45760",
    "end": "51360"
  },
  {
    "text": "users gcp environments we'll also cover other risk areas like compute instances and service accounts",
    "start": "51360",
    "end": "57199"
  },
  {
    "text": "that are both attack opportunities as well as concerns from the defensive side and certainly",
    "start": "57199",
    "end": "63440"
  },
  {
    "text": "we'll end up trying to determine what defensive measures work or don't work",
    "start": "63440",
    "end": "69040"
  },
  {
    "text": "from a practical perspective across prevention detection and remediation",
    "start": "69040",
    "end": "75840"
  },
  {
    "text": "so why do we care well essentially",
    "start": "75840",
    "end": "80880"
  },
  {
    "text": "hijacking of session tokens in gcp just provides additional attack vectors",
    "start": "80880",
    "end": "86320"
  },
  {
    "text": "for persistence as well as evasion oauth is used everywhere",
    "start": "86320",
    "end": "92320"
  },
  {
    "text": "in gcp authentication both user accounts service accounts browsers and sdk",
    "start": "92320",
    "end": "98840"
  },
  {
    "text": "sessions externally for client access such as cli",
    "start": "98840",
    "end": "104079"
  },
  {
    "text": "as well as internal to gcp environment with compute instances",
    "start": "104079",
    "end": "111600"
  },
  {
    "text": "particularly it's problematic because they're cached and that allows an attacker access",
    "start": "111600",
    "end": "118560"
  },
  {
    "text": "to essentially existing authenticated sessions to",
    "start": "118560",
    "end": "124399"
  },
  {
    "text": "environments without actually having to authenticate from a defensive viewpoint some of the",
    "start": "124399",
    "end": "130720"
  },
  {
    "text": "stricter authenticated authentication controls such as mfa don't help which could be",
    "start": "130720",
    "end": "135760"
  },
  {
    "text": "counter-intuitive the options for prevention detection remediation",
    "start": "135760",
    "end": "141360"
  },
  {
    "text": "can be limiting confusing too numerous in some sense some areas",
    "start": "141360",
    "end": "148160"
  },
  {
    "text": "and they also differ between what you might expect based on permanent credentials they differ with",
    "start": "148160",
    "end": "155040"
  },
  {
    "text": "temporary session tokens and all of this can lead to confusion",
    "start": "155040",
    "end": "160560"
  },
  {
    "text": "and it may mean operations playbooks and scripts are out of date or have gaps",
    "start": "160560",
    "end": "168000"
  },
  {
    "text": "so really quickly let's touch on oauth many of us are are exposed to oauth as",
    "start": "168879",
    "end": "175760"
  },
  {
    "text": "internet users you might be granting access to google drive access or",
    "start": "175760",
    "end": "182080"
  },
  {
    "text": "requests you might be approving payments such as paypal",
    "start": "182080",
    "end": "187920"
  },
  {
    "text": "to third-party apps from our perspective because google's chosen it there are",
    "start": "187920",
    "end": "193760"
  },
  {
    "text": "oauth flows everywhere underneath the hood we don't see it all the time but we do see",
    "start": "193760",
    "end": "198800"
  },
  {
    "text": "some of it the first time you use a cli with a configured account it may prompt you to pop open a browser",
    "start": "198800",
    "end": "205360"
  },
  {
    "text": "and approve a certain set of privileges and you have to type in a code and so on",
    "start": "205360",
    "end": "211920"
  },
  {
    "text": "and so forth and then your cli will work so the first step is",
    "start": "211920",
    "end": "217200"
  },
  {
    "text": "whatever's requesting access in this case it's the cli requests a token which really means an",
    "start": "217200",
    "end": "223360"
  },
  {
    "text": "access session token and a refresh token we'll cover how those are used later",
    "start": "223360",
    "end": "228480"
  },
  {
    "text": "but the access token sometimes called a bearer token is passed in the http header",
    "start": "228480",
    "end": "235920"
  },
  {
    "text": "for an actual rest api call after an hour it expires at least that's its default timeout and",
    "start": "235920",
    "end": "242319"
  },
  {
    "text": "then the refresh tokens used to uh uh receive or create a new",
    "start": "242319",
    "end": "247920"
  },
  {
    "text": "uh fresh access token that can be used most of this is just done underneath the hood",
    "start": "247920",
    "end": "252959"
  },
  {
    "text": "by say the gcloud cli and you don't see that as a user except",
    "start": "252959",
    "end": "258560"
  },
  {
    "text": "for the very initial approval and authentication step",
    "start": "258560",
    "end": "263840"
  },
  {
    "text": "we're going to now look at an attack scenario which is what i describe as bulk copying of",
    "start": "263840",
    "end": "269759"
  },
  {
    "text": "credentials and using them quickly and easily within the cli",
    "start": "269759",
    "end": "275759"
  },
  {
    "text": "this does assume that we have compromised an endpoint in this case a gcp admin user",
    "start": "275759",
    "end": "283840"
  },
  {
    "text": "that i'll posit is feasible enough that it's an okay starting point we can",
    "start": "284080",
    "end": "290880"
  },
  {
    "text": "find gcp users easily on the internet we can find companies that host in gcp",
    "start": "290880",
    "end": "297360"
  },
  {
    "text": "we can deliver various payload say wrapped up in open source utilities",
    "start": "297360",
    "end": "304400"
  },
  {
    "text": "so if you will let's use this as a starting point um since i won't be focusing on the actual",
    "start": "304400",
    "end": "310000"
  },
  {
    "text": "compromise but more what happens once you have access to that client machine",
    "start": "310000",
    "end": "316160"
  },
  {
    "text": "well what we'll show is that it's straightforward to access any cached accounts and gcp environments",
    "start": "316160",
    "end": "323120"
  },
  {
    "text": "it's also easy to copy those credentials in bulk to off board to a",
    "start": "323120",
    "end": "330080"
  },
  {
    "text": "another host that's controlled by the attacker and then access those same accounts",
    "start": "330080",
    "end": "337280"
  },
  {
    "text": "so let's go through that i have a screen with two sort of split windows two host",
    "start": "337280",
    "end": "343840"
  },
  {
    "text": "sessions one on the left is uh the target host or the victim's host where the gcp admin",
    "start": "343840",
    "end": "350400"
  },
  {
    "text": "does work with the cli the right host is controlled by the attacker different hosts that we'll use",
    "start": "350400",
    "end": "356720"
  },
  {
    "text": "later so as we go through this um first thing you'll note is i'm",
    "start": "356720",
    "end": "362960"
  },
  {
    "text": "checking with gcloud off list what configured accounts there are there's two accounts",
    "start": "362960",
    "end": "368080"
  },
  {
    "text": "production account as well as a dev account so just a quick note on the session this is a recorded",
    "start": "368080",
    "end": "374880"
  },
  {
    "text": "session but these were live environments configured with reasonable security policies in this",
    "start": "374880",
    "end": "381360"
  },
  {
    "text": "case mfa was on both and hardware mfa on the production environment",
    "start": "381360",
    "end": "388000"
  },
  {
    "text": "uh also any output has been scrubbed for pii so there's just remapped account ids",
    "start": "388479",
    "end": "393840"
  },
  {
    "text": "names tokens etc so i'm going to switch accounts to that",
    "start": "393840",
    "end": "399680"
  },
  {
    "text": "admin prod account okay you can see that in the output of gcloud auth list",
    "start": "399680",
    "end": "405440"
  },
  {
    "text": "that the asterisk shows what's active and now i'm going to take a look at what i can access",
    "start": "405440",
    "end": "411280"
  },
  {
    "text": "remember i'm on the victims machine i've compromised it i have at least their user privileges and yes",
    "start": "411280",
    "end": "417280"
  },
  {
    "text": "it makes sense that i could execute gcloud commands i can see the project one of the",
    "start": "417280",
    "end": "422319"
  },
  {
    "text": "projects here i can also list the buckets",
    "start": "422319",
    "end": "428960"
  },
  {
    "text": "within that project and then list items in that bucket okay so that was",
    "start": "428960",
    "end": "435840"
  },
  {
    "text": "really easy let's continue on to our next step",
    "start": "435840",
    "end": "441520"
  },
  {
    "text": "that was step one of just reusing the credential cache on the victim's",
    "start": "441520",
    "end": "446880"
  },
  {
    "text": "machine but now what i want to do is i want to go to the credential cache",
    "start": "446880",
    "end": "453039"
  },
  {
    "text": "and copy it to a different machine on the right side my attacker machine in the home directory",
    "start": "453039",
    "end": "458800"
  },
  {
    "text": "and dot config gcloud is the credential clash cache excuse me we'll cover the details of those files",
    "start": "458800",
    "end": "466639"
  },
  {
    "text": "later i'm just going to tarball it up and then scp it over then on the right side continue on",
    "start": "466639",
    "end": "475759"
  },
  {
    "text": "and i'm going to find that tarball i'm going to cd here",
    "start": "476840",
    "end": "482879"
  },
  {
    "text": "in the bottom right to my own.config all right",
    "start": "482879",
    "end": "488479"
  },
  {
    "text": "notice as well that i did check that there were no nothing pre-configured gcloud auth list returned",
    "start": "488479",
    "end": "495039"
  },
  {
    "text": "nothing now i'm going to untar that credential cache in my own.config directory",
    "start": "495039",
    "end": "502560"
  },
  {
    "text": "and now i check again with gcloud auth list and suddenly my configuration is changed",
    "start": "502560",
    "end": "507840"
  },
  {
    "text": "to match what's in that tarball which is the two accounts prod end up and that was pretty",
    "start": "507840",
    "end": "513360"
  },
  {
    "text": "easy let's see if they actually work so i'm going to switch accounts let's pick that production account and",
    "start": "513360",
    "end": "520159"
  },
  {
    "text": "i'm going to use gsutil which uses the same credential cache as gcloud to list uh the sensitive",
    "start": "520159",
    "end": "526720"
  },
  {
    "text": "bucket and boom i get results right away so that was easy",
    "start": "526720",
    "end": "532080"
  },
  {
    "text": "the point here is that there's no encryption there's no signing there's no tying of",
    "start": "532080",
    "end": "539360"
  },
  {
    "text": "the credential cache to a particular host i was able to move it off board and reuse it just",
    "start": "539360",
    "end": "546000"
  },
  {
    "text": "as easily as on the victim's host",
    "start": "546000",
    "end": "549839"
  },
  {
    "text": "now a variation of that attack is to actually peel back the layers of the credential cache and extract",
    "start": "552080",
    "end": "558640"
  },
  {
    "text": "oauth tokens and so we'll use some sql like commands",
    "start": "558640",
    "end": "564560"
  },
  {
    "text": "we'll then perform the oauth flow by and request a new access token",
    "start": "564560",
    "end": "570399"
  },
  {
    "text": "which will be good for an hour then we'll make api calls so let's see what that",
    "start": "570399",
    "end": "576000"
  },
  {
    "text": "flow looks like so i'm going to move back to the victims machine",
    "start": "576000",
    "end": "581440"
  },
  {
    "text": "and bear with me i'm going to list the contents of the dot config",
    "start": "581440",
    "end": "588720"
  },
  {
    "text": "gcloud directory where the credential cache is and i see a bunch of files and directories of which the db files",
    "start": "588720",
    "end": "595279"
  },
  {
    "text": "are sqlite files database files i'm going to actually use the sql lite",
    "start": "595279",
    "end": "602079"
  },
  {
    "text": "command line to access one of the database files the access tokens database file",
    "start": "602079",
    "end": "607279"
  },
  {
    "text": "has one table in it and as its name implies it has access tokens and i can extract",
    "start": "607279",
    "end": "613040"
  },
  {
    "text": "the access token for the admin user in the prod environment",
    "start": "613040",
    "end": "619839"
  },
  {
    "text": "i'm going to now look at sorry give me one moment to back up i'm going to",
    "start": "620160",
    "end": "628480"
  },
  {
    "text": "look at the other sqlite database file the db and here i have more information i'm",
    "start": "628480",
    "end": "634480"
  },
  {
    "text": "also going to query for the admin user in the product environment i get a bunch of json including a client id and secret",
    "start": "634480",
    "end": "641680"
  },
  {
    "text": "which is oauth information that's needed to perform the oauth flow which is what",
    "start": "641680",
    "end": "648000"
  },
  {
    "text": "we're going to do in this scenario i have the refresh token also needed and i also have the access token",
    "start": "648000",
    "end": "653120"
  },
  {
    "text": "so this is actually much more complete information and useful",
    "start": "653120",
    "end": "658720"
  },
  {
    "text": "so i'm going to just make sure i parse out the refresh token here at the bottom",
    "start": "659519",
    "end": "666480"
  },
  {
    "text": "i'm then going to use that in a rest api call to get a new fresh access token",
    "start": "666480",
    "end": "673360"
  },
  {
    "text": "let me pause this i know there's a lot here so i'm going to point out in the middle",
    "start": "673360",
    "end": "678720"
  },
  {
    "text": "my curl command is right here where my cursor is i pass in the refresh token and what i",
    "start": "678720",
    "end": "684399"
  },
  {
    "text": "get at the bottom is some json that includes a new newly generated access token",
    "start": "684399",
    "end": "690560"
  },
  {
    "text": "that expires in one hour and my scopes are are part of the request and they're also",
    "start": "690560",
    "end": "696320"
  },
  {
    "text": "returned as with my results okay now that i have an access token i",
    "start": "696320",
    "end": "702880"
  },
  {
    "text": "can now execute api call so i'll do a bucket call and we'll pause in a moment to",
    "start": "702880",
    "end": "708160"
  },
  {
    "text": "take a look at that call the point here is all these commands are curl commands",
    "start": "708160",
    "end": "714079"
  },
  {
    "text": "pretty straightforward way to do simple rest api calls here is",
    "start": "714079",
    "end": "719519"
  },
  {
    "text": "the curl command i'm passing in the new access token as a header i'm hitting an end point",
    "start": "719519",
    "end": "726560"
  },
  {
    "text": "and listing the contents of the bucket called sensitive bucket which is the same bucket we accessed in the first scenario and",
    "start": "726560",
    "end": "733120"
  },
  {
    "text": "you can see from the output that i can i'm getting credit cards as a subdirectory",
    "start": "733120",
    "end": "739200"
  },
  {
    "text": "and i can see all the same information that i'd seen",
    "start": "739200",
    "end": "746240"
  },
  {
    "text": "with the gcloud cli so that's how easy it is to actually",
    "start": "746240",
    "end": "754320"
  },
  {
    "text": "peel back the layers we can query those sqlite database cache files extract tokens",
    "start": "754320",
    "end": "759680"
  },
  {
    "text": "the refresh token is the most important [Music] i can generate new access tokens and go",
    "start": "759680",
    "end": "765680"
  },
  {
    "text": "from there it's more general functionally similar to the cli but it's more general because i can use",
    "start": "765680",
    "end": "770880"
  },
  {
    "text": "a custom api code to do what i need to do",
    "start": "770880",
    "end": "776240"
  },
  {
    "text": "there are other tech opportunities as well as concerns so we need to be aware of service",
    "start": "776560",
    "end": "782240"
  },
  {
    "text": "accounts service accounts can be configured in the gcloud cli just like user accounts sometimes",
    "start": "782240",
    "end": "789760"
  },
  {
    "text": "administrators want to perform tasks as service accounts they would download an api key file",
    "start": "789760",
    "end": "797600"
  },
  {
    "text": "with actual credentials and then they would configure the cli with that account information normally",
    "start": "797600",
    "end": "803200"
  },
  {
    "text": "attacker would first look for the key file since it has the permanent credential in it but there are reasons why they would",
    "start": "803200",
    "end": "810480"
  },
  {
    "text": "still go after the credential cache the sqlite database",
    "start": "810480",
    "end": "815600"
  },
  {
    "text": "one it's another attack vector but two some of the remediation steps",
    "start": "815600",
    "end": "821920"
  },
  {
    "text": "with session tokens are more difficult or more confusing than with permanent",
    "start": "821920",
    "end": "829120"
  },
  {
    "text": "accounts service accounts or keys meaning if you use that session token",
    "start": "829120",
    "end": "835920"
  },
  {
    "text": "it can be more difficult to defend against it does have potentially an expiration",
    "start": "835920",
    "end": "841040"
  },
  {
    "text": "time if it's been set but at a minimum it's one hour and that is plenty of time to do damage or",
    "start": "841040",
    "end": "847680"
  },
  {
    "text": "install back doors so service accounts have to have to be kept in mind even",
    "start": "847680",
    "end": "854839"
  },
  {
    "text": "though people think about oauth tokens as very much an interactive kind of",
    "start": "854839",
    "end": "860079"
  },
  {
    "text": "authentication flow compute instances use service accounts there's default service",
    "start": "860079",
    "end": "865839"
  },
  {
    "text": "accounts and you can use your own there's no credential cash",
    "start": "865839",
    "end": "870959"
  },
  {
    "text": "per se but there's a metadata service that returns the current access token and that's",
    "start": "870959",
    "end": "878160"
  },
  {
    "text": "often the target for once a compute instance is compromised that's the target",
    "start": "878160",
    "end": "884160"
  },
  {
    "text": "in order to get a credential to move laterally within the environment so that has to be thought about it's an opportunity to attack and it's a",
    "start": "884160",
    "end": "892240"
  },
  {
    "text": "an area of concern to defend against the commands to do that one to query",
    "start": "892240",
    "end": "899040"
  },
  {
    "text": "this actual metadata service is pretty straightforward it can be done with a",
    "start": "899040",
    "end": "904079"
  },
  {
    "text": "curl command on the run run on the actual compute instance and you can see that the access",
    "start": "904079",
    "end": "909360"
  },
  {
    "text": "token highlighted in blue is returned and then you can do a",
    "start": "909360",
    "end": "914399"
  },
  {
    "text": "real api call with that access token and you are now executing a command as",
    "start": "914399",
    "end": "920160"
  },
  {
    "text": "the service account that the compute instance runs under and this one i just ran a bucket listing",
    "start": "920160",
    "end": "925680"
  },
  {
    "text": "again a different environment but i get actual files back",
    "start": "925680",
    "end": "931519"
  },
  {
    "text": "so speaking of compute instances we started the tax scenarios with",
    "start": "931519",
    "end": "936639"
  },
  {
    "text": "external client environments external to gcp certainly compute instances that have",
    "start": "936639",
    "end": "942000"
  },
  {
    "text": "google cloud installed have the same issues that we've talked about so everything applies",
    "start": "942000",
    "end": "948079"
  },
  {
    "text": "so additional attack opportunities are compute instances where the cli is",
    "start": "948079",
    "end": "954240"
  },
  {
    "text": "installed the thing that may not be on the radar for many is gcp managed compute instances",
    "start": "954240",
    "end": "961360"
  },
  {
    "text": "that have sdk installed very specifically cloud shell environments part of its value is it's pre-installed",
    "start": "961360",
    "end": "968720"
  },
  {
    "text": "you don't have to worry about it manage it and part of the opportunity is it inherits any potential issues",
    "start": "968720",
    "end": "975120"
  },
  {
    "text": "such as session token hijacking juan berner wrote a good article about",
    "start": "975120",
    "end": "980639"
  },
  {
    "text": "persistent gcp backdoors i encourage you to read it and he talks",
    "start": "980639",
    "end": "986079"
  },
  {
    "text": "about hijacking the credential cache through a persistent backdoor on google cloud shell environments",
    "start": "986079",
    "end": "995360"
  },
  {
    "text": "so let's talk about prevention number one you do want to set an",
    "start": "995680",
    "end": "1002240"
  },
  {
    "text": "expiration time for google cloud sdk sessions which",
    "start": "1002240",
    "end": "1007759"
  },
  {
    "text": "um really means cli and api sessions by default there is no expiration and",
    "start": "1007759",
    "end": "1013279"
  },
  {
    "text": "that was the case with environments in the tax scenario they were for months",
    "start": "1013279",
    "end": "1018880"
  },
  {
    "text": "um cashed accounts were accessible from that victim",
    "start": "1018880",
    "end": "1025839"
  },
  {
    "text": "environment you can set the expiration time we'll go through that you should also see if you can",
    "start": "1025839",
    "end": "1033199"
  },
  {
    "text": "implement ip allow allow or whitelist and if you have expiration time set mfa",
    "start": "1033199",
    "end": "1041038"
  },
  {
    "text": "increases the security of the reauthentication step",
    "start": "1041039",
    "end": "1047678"
  },
  {
    "text": "and when you go through ip allow lists don't forget to think about compute",
    "start": "1047679",
    "end": "1054080"
  },
  {
    "text": "instances as well as enforcement so let's talk about these in more detail so",
    "start": "1054080",
    "end": "1059120"
  },
  {
    "text": "the cloud session duration is set on the g suite admin side and i want to raise that as a bit of a flag",
    "start": "1059120",
    "end": "1064320"
  },
  {
    "text": "yellow flag that it's a different product different set of apis than the gcp suite it's in the identity side",
    "start": "1064320",
    "end": "1072559"
  },
  {
    "text": "by default it's set to never expire expire but you can set the session",
    "start": "1072559",
    "end": "1077840"
  },
  {
    "text": "duration to one hour up to 24 hours",
    "start": "1077840",
    "end": "1082400"
  },
  {
    "text": "once the session expires you can specify the re-authentication method hardware security key or password",
    "start": "1083120",
    "end": "1091120"
  },
  {
    "text": "if you happen to have an authentication method that uses software-based mfa then you'll",
    "start": "1091120",
    "end": "1096720"
  },
  {
    "text": "have to choose password um so it's a little bit less secure but in general you want to set these um",
    "start": "1096720",
    "end": "1103840"
  },
  {
    "text": "there's no reason not to the default is not that secure",
    "start": "1103840",
    "end": "1109840"
  },
  {
    "text": "how do we set up ip allow lists create an access level with ips or site",
    "start": "1109919",
    "end": "1116000"
  },
  {
    "text": "ranges in the access content context manager in gcp",
    "start": "1116000",
    "end": "1121360"
  },
  {
    "text": "console or the api create a vpc service control so that we",
    "start": "1121360",
    "end": "1127520"
  },
  {
    "text": "can set up a boundary that references that same access level",
    "start": "1127520",
    "end": "1132880"
  },
  {
    "text": "and then apply it to the right vpc and the next time someone tries to execute an api call",
    "start": "1132880",
    "end": "1138400"
  },
  {
    "text": "against resources within that boundary they'll get a 403 error so that works as",
    "start": "1138400",
    "end": "1145200"
  },
  {
    "text": "you'd expect but there's more involvement if you have",
    "start": "1145200",
    "end": "1150480"
  },
  {
    "text": "vm instances you have to worry about those ip addresses if they're executing uh api calls remember they have",
    "start": "1150480",
    "end": "1157919"
  },
  {
    "text": "potential compromise of oauth tokens or session tokens you know on vm instances so ipl allows",
    "start": "1157919",
    "end": "1165200"
  },
  {
    "text": "have to include the ips of those vms so if you",
    "start": "1165200",
    "end": "1170400"
  },
  {
    "text": "have a small number of vms a small environment that has static ips",
    "start": "1170400",
    "end": "1176000"
  },
  {
    "text": "you can probably hard code the ips and maintain your ip less it's more problematic if you have a",
    "start": "1176000",
    "end": "1182960"
  },
  {
    "text": "larger number of vms more dynamic environment with a lot of ip dynamic ips in that case you may have to",
    "start": "1182960",
    "end": "1192320"
  },
  {
    "text": "figure out how to automatically maintain the ipl allow lists by hooking into the startup or",
    "start": "1192320",
    "end": "1199280"
  },
  {
    "text": "provisioning process of vms that is overhead that is work but could",
    "start": "1199280",
    "end": "1206240"
  },
  {
    "text": "very well be worth it to gain the benefit of the ip white listening there's been some",
    "start": "1206240",
    "end": "1214080"
  },
  {
    "text": "related work for aws not gcp by the netflix security team",
    "start": "1214080",
    "end": "1219200"
  },
  {
    "text": "and i encourage people to read that for good ideas for approaching they could be applied to",
    "start": "1219200",
    "end": "1225039"
  },
  {
    "text": "gcp ipl allow lists do have to be enforced",
    "start": "1225039",
    "end": "1231760"
  },
  {
    "text": "and checked so through the cli or api you could roll your own checks essentially to make sure that the",
    "start": "1231760",
    "end": "1238400"
  },
  {
    "text": "definitions of the access levels have the right cider ranges and aren't drifting",
    "start": "1238400",
    "end": "1243919"
  },
  {
    "text": "that they are included in the right vpc service control definition",
    "start": "1243919",
    "end": "1250960"
  },
  {
    "text": "and that ultimately that service control is also applied to the right resources or vpc",
    "start": "1250960",
    "end": "1257600"
  },
  {
    "text": "mfa highly encouraged to use that if you can manage it it's on",
    "start": "1257919",
    "end": "1265440"
  },
  {
    "text": "the g suite admin side so again note there and it governs or will govern the re-authentication",
    "start": "1265440",
    "end": "1272799"
  },
  {
    "text": "step so it only applies if you have session duration timeouts",
    "start": "1272799",
    "end": "1278400"
  },
  {
    "text": "set my tech scenarios that was not set which is why we never encountered mfa but once you set it mfa will apply to",
    "start": "1278400",
    "end": "1286559"
  },
  {
    "text": "the reauthentication once something times out now let's talk about detection behavioral detection",
    "start": "1286559",
    "end": "1294320"
  },
  {
    "text": "is difficult and compromised credentials is essentially a behavioral problem try",
    "start": "1294320",
    "end": "1300480"
  },
  {
    "text": "to distinguish activity from the you know the actor who has the",
    "start": "1300480",
    "end": "1306400"
  },
  {
    "text": "compromise credential versus the valid user who got compromised",
    "start": "1306400",
    "end": "1312400"
  },
  {
    "text": "and having a general solution there is is difficult which is why a lot of the ml",
    "start": "1312640",
    "end": "1317919"
  },
  {
    "text": "approaches have very specific use cases so instead i'm going to suggest maybe one or two simpler and hopefully more achievable",
    "start": "1317919",
    "end": "1326559"
  },
  {
    "text": "ways to improve detection one is really work hard to use ip allow lists in the prevention stage",
    "start": "1326559",
    "end": "1333440"
  },
  {
    "text": "if you do then you could set up detections against failures",
    "start": "1333440",
    "end": "1339280"
  },
  {
    "text": "in authentication from ips that aren't in that list so any failures due to the ipl",
    "start": "1339280",
    "end": "1344400"
  },
  {
    "text": "allow list could be good indicators of credential",
    "start": "1344400",
    "end": "1350559"
  },
  {
    "text": "compromise there is a chance of course of false positives it depends on your user base",
    "start": "1350559",
    "end": "1357120"
  },
  {
    "text": "and your ability to maintain the ipl list so if you can shrink your allowed ips to a",
    "start": "1357120",
    "end": "1364000"
  },
  {
    "text": "smaller range that might include requiring vpn access or proxy access",
    "start": "1364000",
    "end": "1369360"
  },
  {
    "text": "to access your gcp environments then that ipl list might be a smaller set of static",
    "start": "1369360",
    "end": "1376320"
  },
  {
    "text": "ranges and it may make detection against that list",
    "start": "1376320",
    "end": "1383840"
  },
  {
    "text": "reliable with lower false positives you may need to train users but it's although it comes with overhead",
    "start": "1383840",
    "end": "1390159"
  },
  {
    "text": "it's definitely worth considering on the right is what you would expect but you will get",
    "start": "1390159",
    "end": "1395919"
  },
  {
    "text": "clear error messages in stackdriver from failed failures against the ipl",
    "start": "1395919",
    "end": "1401679"
  },
  {
    "text": "alice another step that i think is worth entertaining",
    "start": "1401679",
    "end": "1407200"
  },
  {
    "text": "is to populate fake accounts or breadcrumbs in the credential cache essentially",
    "start": "1407200",
    "end": "1414080"
  },
  {
    "text": "provide an easy way to configure fake accounts attacker most likely will cycle through",
    "start": "1414080",
    "end": "1419280"
  },
  {
    "text": "all accounts should should they compromise the machine and look at this vector",
    "start": "1419280",
    "end": "1425440"
  },
  {
    "text": "and in trying every account they'll try the fake account and that has a much better chance of low",
    "start": "1425440",
    "end": "1432240"
  },
  {
    "text": "false positives and those could be easily detected and",
    "start": "1432240",
    "end": "1437600"
  },
  {
    "text": "alerted upon and there is some provisioning",
    "start": "1437600",
    "end": "1443039"
  },
  {
    "text": "maintenance overhead but since a sqlite database let's turn that",
    "start": "1443039",
    "end": "1448640"
  },
  {
    "text": "into an advantage it'd be easy to have a simple script you could have a three-line shell script that inserts a",
    "start": "1448640",
    "end": "1456320"
  },
  {
    "text": "fake credential into every um credential cache it just has to be run",
    "start": "1456320",
    "end": "1462880"
  },
  {
    "text": "once uh train your users not to use it or or delete it um and it'll survive upgrades of the",
    "start": "1462880",
    "end": "1471200"
  },
  {
    "text": "g-cloud sdk so consider that as a higher fidelity detection on compromise",
    "start": "1471200",
    "end": "1477760"
  },
  {
    "text": "credentials let's spend some time on remediation options since this is both complicated",
    "start": "1477760",
    "end": "1484000"
  },
  {
    "text": "and confusing there are a multitude of options that we'll go through but what i want to point out up front",
    "start": "1484000",
    "end": "1490000"
  },
  {
    "text": "is there are two dimensions to worry about user accounts are different in behavior in the service accounts",
    "start": "1490000",
    "end": "1495520"
  },
  {
    "text": "remember remediation viewpoint so we have to look at them separately we also have two steps to worry about locking out an account",
    "start": "1495520",
    "end": "1501679"
  },
  {
    "text": "that is locking out an attacker from future access to an account is one step but also revoking their",
    "start": "1501679",
    "end": "1507520"
  },
  {
    "text": "current access their current sessions is very important",
    "start": "1507520",
    "end": "1513278"
  },
  {
    "text": "so let's go through this matrix um here are the three basic steps that most people are aware of for",
    "start": "1513760",
    "end": "1520240"
  },
  {
    "text": "dealing with account uh locking out account access for user accounts",
    "start": "1520240",
    "end": "1526000"
  },
  {
    "text": "in g suite admin i'm highlighting that user account management is in the g suite side",
    "start": "1526000",
    "end": "1533679"
  },
  {
    "text": "you can find those options and they're also available in the apis for g suite admin [Music]",
    "start": "1533679",
    "end": "1539919"
  },
  {
    "text": "and so the bottom line is they all work let's suggest that the lowest impact",
    "start": "1539919",
    "end": "1546400"
  },
  {
    "text": "which is reset password is our suggested remediation option nothing wrong with that",
    "start": "1546400",
    "end": "1553120"
  },
  {
    "text": "how about for service accounts well similarly there are three options",
    "start": "1553440",
    "end": "1559679"
  },
  {
    "text": "they're found in the ui under iem service accounts in the gcp console so remember service accounts are managed",
    "start": "1559679",
    "end": "1566640"
  },
  {
    "text": "in gcp user accounts in g suite you can disable service count delete that",
    "start": "1566640",
    "end": "1572400"
  },
  {
    "text": "actual key and of course delete the service count itself they all work",
    "start": "1572400",
    "end": "1578799"
  },
  {
    "text": "but we'll favor the least impactful one which is deletion of api keys both of these are pretty standard let's",
    "start": "1578799",
    "end": "1585600"
  },
  {
    "text": "say in terms of practices they work and there shouldn't be any",
    "start": "1585600",
    "end": "1591360"
  },
  {
    "text": "confusion where it does get confusing is how to remote current sessions",
    "start": "1591360",
    "end": "1596840"
  },
  {
    "text": "potentially the same lockout procedures may revoke sessions and we need to test",
    "start": "1596840",
    "end": "1602240"
  },
  {
    "text": "that but there are also session specific functionality that i listed first reset sign-in cookie",
    "start": "1602240",
    "end": "1608159"
  },
  {
    "text": "cli apis that need to be investigated so",
    "start": "1608159",
    "end": "1613200"
  },
  {
    "text": "thankfully i tested you may be aware of this but let's see if we can learn from my",
    "start": "1613200",
    "end": "1619120"
  },
  {
    "text": "trials and tribulations reset sign-in cookies exist in g suite",
    "start": "1619120",
    "end": "1624840"
  },
  {
    "text": "admin does this work unfortunately no it does work for web",
    "start": "1624840",
    "end": "1630400"
  },
  {
    "text": "browser sessions it does not work for sdk sessions so it doesn't help our cli",
    "start": "1630400",
    "end": "1635919"
  },
  {
    "text": "vector what there is a cli command auth revoke where you pass in an account",
    "start": "1635919",
    "end": "1643039"
  },
  {
    "text": "name as well as an api where you pass in the token they do work but not quite",
    "start": "1643039",
    "end": "1651840"
  },
  {
    "text": "uh fully and they're not viable why what this cli command does underneath is",
    "start": "1651840",
    "end": "1658480"
  },
  {
    "text": "it looks up the account in the local credential cache the cli same one we've been talking about it finds the oauth session token",
    "start": "1658480",
    "end": "1665360"
  },
  {
    "text": "it calls api which then revokes the session token as well as the refresh token however",
    "start": "1665360",
    "end": "1673039"
  },
  {
    "text": "those session tokens only exist on the client machine which is the victim or compromise machine and because it's",
    "start": "1673039",
    "end": "1680159"
  },
  {
    "text": "compromised we can't trust it and further an attacker can easily manipulate that and delete that token entry preventing",
    "start": "1680159",
    "end": "1688240"
  },
  {
    "text": "remediation using this path the ap sorry the api call suffers from the same issue that token",
    "start": "1688240",
    "end": "1695279"
  },
  {
    "text": "that is required for the api call is only in existence on the client",
    "start": "1695279",
    "end": "1700399"
  },
  {
    "text": "machine it's not logged it obviously exists on the gcp",
    "start": "1700399",
    "end": "1706559"
  },
  {
    "text": "backend side but it's not exposed to users through any api so it can be manipulated",
    "start": "1706559",
    "end": "1712799"
  },
  {
    "text": "it's on a compromised machine it doesn't help us so why do these even exist and why did i mention them well i mentioned because they exist but",
    "start": "1712799",
    "end": "1719840"
  },
  {
    "text": "they're really self-serve steps for users to clean up their own credential cache",
    "start": "1719840",
    "end": "1727279"
  },
  {
    "text": "so what about our lockout account steps resetting a password does not",
    "start": "1727520",
    "end": "1735120"
  },
  {
    "text": "revoke sessions so doesn't help us suspending and deleting a user account",
    "start": "1735120",
    "end": "1741919"
  },
  {
    "text": "does invalidate sessions but it's only during the suspension time if you",
    "start": "1741919",
    "end": "1749919"
  },
  {
    "text": "re-enable the user account those session tokens start to work again until they they expire which is not the",
    "start": "1749919",
    "end": "1757679"
  },
  {
    "text": "default deleting user account does work the sessions are revoked forever permanently it's just",
    "start": "1757679",
    "end": "1765279"
  },
  {
    "text": "high impact so these last two we could make work possibly but there's a better",
    "start": "1765279",
    "end": "1773679"
  },
  {
    "text": "almost ideal solution which is in the g suite admin side",
    "start": "1773679",
    "end": "1779120"
  },
  {
    "text": "there is a listing for each user of the connected oauth applications it just means it's a list",
    "start": "1779120",
    "end": "1784559"
  },
  {
    "text": "of applications the user has approved authenticated and approved including the google cloud sdk",
    "start": "1784559",
    "end": "1791520"
  },
  {
    "text": "we've all seen this when you grant access you know to google docs and suite",
    "start": "1791520",
    "end": "1797919"
  },
  {
    "text": "this is the version for g suite admin when i delete this it immediately",
    "start": "1797919",
    "end": "1803120"
  },
  {
    "text": "revokes all sessions and this is not a permanent um",
    "start": "1803120",
    "end": "1808399"
  },
  {
    "text": "action with with uh permanent ramifications it just means the next",
    "start": "1808399",
    "end": "1814000"
  },
  {
    "text": "time that the user needs to use the sdk say the cli they'll be prompted to re-authenticate and then the application",
    "start": "1814000",
    "end": "1821279"
  },
  {
    "text": "will list will be listed here once again so bottom line is this works this is the recommended",
    "start": "1821279",
    "end": "1827440"
  },
  {
    "text": "remediation step but caveat is it lives in the g suite admin side and this is a bit confusing",
    "start": "1827440",
    "end": "1832960"
  },
  {
    "text": "if you're not familiar with oauth so that's the recommended step how about",
    "start": "1832960",
    "end": "1840320"
  },
  {
    "text": "service accounts",
    "start": "1840320",
    "end": "1843120"
  },
  {
    "text": "well let's jump right into it you think it's similar to user accounts",
    "start": "1847279",
    "end": "1852880"
  },
  {
    "text": "so it is in some respects the cli and the api call do not work they provide more explicit errors some",
    "start": "1852880",
    "end": "1860640"
  },
  {
    "text": "of those errors are misleading filed bugs and they are now",
    "start": "1860640",
    "end": "1866559"
  },
  {
    "text": "partially corrected but the bottom line is they were not made to work for service",
    "start": "1866559",
    "end": "1871600"
  },
  {
    "text": "accounts and that's usually the error you get and no matter what they don't revoke current sessions so they",
    "start": "1871600",
    "end": "1877600"
  },
  {
    "text": "they're not useful and they require access to the compromised client machine which can't be trusted and swells can be spoofed by",
    "start": "1877600",
    "end": "1886080"
  },
  {
    "text": "manipulated by the attacker how about the lockout steps for service accounts",
    "start": "1886080",
    "end": "1892880"
  },
  {
    "text": "deleting api key does not affect current sessions disliking disabling and deleting the",
    "start": "1892880",
    "end": "1898720"
  },
  {
    "text": "service account does work but once again we run into this temporary nature so once the service",
    "start": "1898720",
    "end": "1904000"
  },
  {
    "text": "account is re-enabled the tokens were so how do we make this work and we're going to try to make this work",
    "start": "1904000",
    "end": "1910080"
  },
  {
    "text": "because there's no similar delete connected app functionality for service accounts",
    "start": "1910080",
    "end": "1918000"
  },
  {
    "text": "you can make this work by by ensuring you have a cloud session duration which is a timeout on sessions",
    "start": "1918000",
    "end": "1923760"
  },
  {
    "text": "and you could suspend for a time period greater than that timeout so let's say it's set to one",
    "start": "1923760",
    "end": "1929360"
  },
  {
    "text": "hour to time out you suspend a service account you wait an hour when you re-enable it any current sessions will have been",
    "start": "1929360",
    "end": "1936559"
  },
  {
    "text": "timed out and invalidated and of course during the suspension you change uh",
    "start": "1936559",
    "end": "1942399"
  },
  {
    "text": "api keys sound confusing that's because it is",
    "start": "1942399",
    "end": "1948000"
  },
  {
    "text": "how about deleting service gun it works just like deleting a user account it just has high impact so the bottom",
    "start": "1948000",
    "end": "1953840"
  },
  {
    "text": "line is the best option it depends on you",
    "start": "1953840",
    "end": "1962480"
  },
  {
    "text": "can you recover from a disabled service account versus a deleted service account",
    "start": "1962480",
    "end": "1967600"
  },
  {
    "text": "reliably and quickly which one gives you the fastest path to availability knowing that service",
    "start": "1967600",
    "end": "1974480"
  },
  {
    "text": "accounts may be widely used by compute instances not necessarily right answer at a minimum you have to disable",
    "start": "1974480",
    "end": "1980480"
  },
  {
    "text": "the service account for at least an hour or whatever your cloud session duration is if you set to eight hours you'd have to",
    "start": "1980480",
    "end": "1985919"
  },
  {
    "text": "be down for eight hours it could potentially be recovered quicker with the deletion of service account but",
    "start": "1985919",
    "end": "1991440"
  },
  {
    "text": "only if you're good at provisioning and keep up-to-date track of permissions and",
    "start": "1991440",
    "end": "1997840"
  },
  {
    "text": "roles and everything else",
    "start": "1997840",
    "end": "2001360"
  },
  {
    "text": "so in conclusion we've gone through sort of five",
    "start": "2003039",
    "end": "2008080"
  },
  {
    "text": "different tax scenarios external clients where the sdks installed both user accounts and service",
    "start": "2008080",
    "end": "2013440"
  },
  {
    "text": "accounts internal environments like compute engines where the sdk is installed",
    "start": "2013440",
    "end": "2020880"
  },
  {
    "text": "but also the cloud shell environments which are managed by google itself but also have cloud sdk",
    "start": "2020880",
    "end": "2028799"
  },
  {
    "text": "and within compute engines outside of an sdk installed there's a more",
    "start": "2028799",
    "end": "2033919"
  },
  {
    "text": "general problem where service account access tokens are available through the metadata",
    "start": "2033919",
    "end": "2039440"
  },
  {
    "text": "service so these are all opportunities in different vectors to",
    "start": "2039440",
    "end": "2044480"
  },
  {
    "text": "attack and they're also different areas that need to be considered and defended against the defensive measures",
    "start": "2044480",
    "end": "2052079"
  },
  {
    "text": "in all cases tend to revolve around this and so this is a consolidated summary definitely set session time out",
    "start": "2052079",
    "end": "2060878"
  },
  {
    "text": "implement iplo lists use mfa so that after a timeout you have a higher level",
    "start": "2060879",
    "end": "2067280"
  },
  {
    "text": "of authentication controls in place detect",
    "start": "2067280",
    "end": "2072560"
  },
  {
    "text": "failed authorizations due to your ip white listing as well as try to be proactive and",
    "start": "2072560",
    "end": "2080240"
  },
  {
    "text": "install fake accounts or breadcrumbs in every cli install by just manipulating the",
    "start": "2080240",
    "end": "2086878"
  },
  {
    "text": "credential cache directly and for remediation sort through all the",
    "start": "2086879",
    "end": "2091919"
  },
  {
    "text": "multitude of options and focus on the ones that work especially for the current",
    "start": "2091919",
    "end": "2098560"
  },
  {
    "text": "session access delete connected applications in g suite is key",
    "start": "2098560",
    "end": "2104240"
  },
  {
    "text": "and then determine whether disabling or deleting service accounts",
    "start": "2104240",
    "end": "2109359"
  },
  {
    "text": "is more reliable or quicker for you and in terms of takeaways hijacking",
    "start": "2109440",
    "end": "2115760"
  },
  {
    "text": "authentication is not new but cloud sessions is relatively new",
    "start": "2115760",
    "end": "2121839"
  },
  {
    "text": "and it's also easy to do and just because they're temporary doesn't mean they're secure you have to do the work",
    "start": "2121839",
    "end": "2129440"
  },
  {
    "text": "to actually defend against that unfortunately cloud vendors have done a poor job",
    "start": "2129440",
    "end": "2134720"
  },
  {
    "text": "in tracking temporary tokens or allowing clean replication of these temporary",
    "start": "2134720",
    "end": "2140560"
  },
  {
    "text": "credentials and they really need to provide better support for prevention detection",
    "start": "2140560",
    "end": "2145839"
  },
  {
    "text": "from a defensive viewpoint though there are concrete things we can do session timeouts ipo a lot less things",
    "start": "2145839",
    "end": "2151599"
  },
  {
    "text": "that we just discussed on the previous slide but focus on low false positive kinds of",
    "start": "2151599",
    "end": "2157119"
  },
  {
    "text": "failures for detection and test test tests on the remediation side where there's often",
    "start": "2157119",
    "end": "2162320"
  },
  {
    "text": "many options and if you can be organized within change management procedures it",
    "start": "2162320",
    "end": "2168480"
  },
  {
    "text": "will certainly help a great deal in the remediation area",
    "start": "2168480",
    "end": "2173599"
  },
  {
    "text": "because you can at the worst case delete and recreate resources to deal with current access",
    "start": "2173599",
    "end": "2181200"
  },
  {
    "text": "and just be very aware that within google g suite versus gcp",
    "start": "2181200",
    "end": "2187839"
  },
  {
    "text": "they split responsibility for various security functions that are very important when you're in",
    "start": "2187839",
    "end": "2193760"
  },
  {
    "text": "the middle of an incident and that access and roles and responsibilities need to be sorted out clearly",
    "start": "2193760",
    "end": "2201440"
  },
  {
    "text": "prior to any incident thank you and now i think we have some time for",
    "start": "2201440",
    "end": "2208760"
  },
  {
    "text": "questions",
    "start": "2208760",
    "end": "2211760"
  }
]