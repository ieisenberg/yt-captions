[
  {
    "start": "0",
    "end": "37000"
  },
  {
    "text": "[Music]",
    "start": "2740",
    "end": "12539"
  },
  {
    "text": "my name is allison",
    "start": "13360",
    "end": "17920"
  },
  {
    "text": "hi my name's dylan we've been researching gcp for the last",
    "start": "18400",
    "end": "25119"
  },
  {
    "text": "year and a half and we've come up with some effective ways that compromise most gcp organizations all the ones we've looked at anyway",
    "start": "25119",
    "end": "30960"
  },
  {
    "text": "these techniques involve moving laterally with service accounts and cloud apis we have a lot of ground to cover so let's get to it",
    "start": "30960",
    "end": "45840"
  },
  {
    "start": "37000",
    "end": "402000"
  },
  {
    "text": "[Music] i think everyone has a slightly different reaction when they first start",
    "start": "47140",
    "end": "52320"
  },
  {
    "text": "learning about gcp iam what the the one common thing i've",
    "start": "52320",
    "end": "57360"
  },
  {
    "text": "observed is people often compare it to aws iam but there are some pretty key differences between gcp and aws iam",
    "start": "57360",
    "end": "63600"
  },
  {
    "text": "so let's talk about some of those differences first in aws we have user identities and those user",
    "start": "63600",
    "end": "69200"
  },
  {
    "text": "identities can be exported in the form of credentials which looks something like this in gcp",
    "start": "69200",
    "end": "76000"
  },
  {
    "text": "the equivalent is a service account and service accounts can also be exported in credentials that",
    "start": "76000",
    "end": "81920"
  },
  {
    "text": "look a little bit differently they look like this and in both cases we have owners of",
    "start": "81920",
    "end": "87680"
  },
  {
    "text": "these identities but where things get a little bit different is when you start to ask the question what can my identity access in the world",
    "start": "87680",
    "end": "94799"
  },
  {
    "text": "of aws you basically have a policy that determines all the different things that the identity",
    "start": "94799",
    "end": "100000"
  },
  {
    "text": "can access and the person who can create re update delete that policy is the same",
    "start": "100000",
    "end": "105280"
  },
  {
    "text": "person who owns the identity so here's an example of what that looks like",
    "start": "105280",
    "end": "110320"
  },
  {
    "text": "in gcp though this is where things start getting really different instead of having a centralized policy for a given",
    "start": "110320",
    "end": "115759"
  },
  {
    "text": "identity we have policies for resources so in this case we've got a bucket and a bucket owner and that bucket has a",
    "start": "115759",
    "end": "122320"
  },
  {
    "text": "policy the bucket owner controls who can create read update or delete that policy and",
    "start": "122320",
    "end": "127920"
  },
  {
    "text": "that policy applies to whatever identity the bucket owner wants it to so here's an example of what that looks",
    "start": "127920",
    "end": "133920"
  },
  {
    "text": "like for storage what's interesting here is that the owner of the service account",
    "start": "133920",
    "end": "140480"
  },
  {
    "text": "actually doesn't have any insight into this policy they can't view it they can't update it they don't even",
    "start": "140480",
    "end": "147280"
  },
  {
    "text": "know that their service account was given access to this bucket instead the bucket owner controls this",
    "start": "147280",
    "end": "152640"
  },
  {
    "text": "and if the owner of the service account doesn't have im list on the bucket then they won't be able to even see that",
    "start": "152640",
    "end": "158720"
  },
  {
    "text": "that policy was granted and i think this is one of the harder concepts it was for me personally to",
    "start": "158720",
    "end": "164800"
  },
  {
    "text": "wrap my head around in gcp is if you have an identity in gcp like a user or a surface account",
    "start": "164800",
    "end": "170080"
  },
  {
    "text": "as the owner of that identity you can't actually know what that identity has access to in fact",
    "start": "170080",
    "end": "175440"
  },
  {
    "text": "no one can answer the question what does a service account have access to instead resource owners control what",
    "start": "175440",
    "end": "181120"
  },
  {
    "text": "the policy is for a given resource so you can answer questions like who has access to this bucket but you",
    "start": "181120",
    "end": "186319"
  },
  {
    "text": "can answer questions like how many buckets does the service account have access to or what buckets does the service account have access to",
    "start": "186319",
    "end": "192640"
  },
  {
    "text": "those questions are unanswerable by design in gcp likewise we can have other resources like bigquery for example and we have an",
    "start": "192640",
    "end": "199280"
  },
  {
    "text": "owner for the bigquery and a policy for the bigquery and the owner of the bigquery can again grant access to any identity they want",
    "start": "199280",
    "end": "206159"
  },
  {
    "text": "however the owner of the service account has no control over this and can't see this one thing you might be wondering is before",
    "start": "206159",
    "end": "212400"
  },
  {
    "text": "when i mentioned that the owner of a service account can't fully answer the question what does the service account have access to",
    "start": "212400",
    "end": "217599"
  },
  {
    "text": "you might be thinking well if you own an organization can't you just get the iem policies of all the resources in the",
    "start": "217599",
    "end": "223200"
  },
  {
    "text": "organization well someone outside your organization can still grant your service account access to their resources",
    "start": "223200",
    "end": "228640"
  },
  {
    "text": "so when i said before you can't actually answer the question what does your service account have access to it's true you cannot get the",
    "start": "228640",
    "end": "234799"
  },
  {
    "text": "answer to the question because people outside your organization can also grant access to their resources",
    "start": "234799",
    "end": "239840"
  },
  {
    "text": "we'll come back to that later and explain what an organization is and how it's structured but for now i figured i'd just mention that in case you were",
    "start": "239840",
    "end": "245760"
  },
  {
    "text": "wondering as you might imagine not having control or visibility into what your service accounts can or can't access comes with some",
    "start": "245760",
    "end": "252319"
  },
  {
    "text": "challenges and one particular place i think those challenges manifest themselves is in a multi-tenant kubernetes environment",
    "start": "252319",
    "end": "257519"
  },
  {
    "text": "google has a managed kubernetes engine that's often shorthanded gke if you're familiar with kubernetes you",
    "start": "257519",
    "end": "263040"
  },
  {
    "text": "have a bunch of nodes and within those nodes you have workloads in gke those nodes are powered by vms",
    "start": "263040",
    "end": "269040"
  },
  {
    "text": "and those vms have service accounts attached to them if we take a look at console we can see a kubernetes cluster here that's powered",
    "start": "269040",
    "end": "275520"
  },
  {
    "text": "by four underlying nodes then if we hop over to compute engine",
    "start": "275520",
    "end": "281040"
  },
  {
    "text": "and click on vm instances we'll see the same four instances and if we click into one of them we'll see that we have a service account",
    "start": "281040",
    "end": "286720"
  },
  {
    "text": "that's attached to it we talked a little bit about how workloads interact with the service account in our b-side san francisco talk this year so",
    "start": "286720",
    "end": "292960"
  },
  {
    "text": "feel free to check that out but in short anything running on the node can access this identity so it's a",
    "start": "292960",
    "end": "298639"
  },
  {
    "text": "good idea to de-scope it and not give it many privileges but let's think about what that actually means we have a kubernetes admin that",
    "start": "298639",
    "end": "304400"
  },
  {
    "text": "runs the nodes and the service account powering the nodes and then we have a bunch of developers that run the workloads on the",
    "start": "304400",
    "end": "310160"
  },
  {
    "text": "kubernetes engine those developers may be on separate teams and may be in control of separate resources from each",
    "start": "310160",
    "end": "315199"
  },
  {
    "text": "other and from the kubernetes admin so you can imagine in this case we have dev1 and dev2 that have both deployed",
    "start": "315199",
    "end": "320560"
  },
  {
    "text": "workloads workload 1 and workload 2. likewise they both control resources in this case we'll say that they both own a bucket and they want",
    "start": "320560",
    "end": "327120"
  },
  {
    "text": "their workloads to be able to access that bucket one really easy way to do that is to just give the service account",
    "start": "327120",
    "end": "332720"
  },
  {
    "text": "on the node access to the bucket but the downside to doing that is instead of just giving their workload access",
    "start": "332720",
    "end": "338000"
  },
  {
    "text": "to the bucket they'll give every workload access to the bucket the developers in this case control this story they control what the service",
    "start": "338000",
    "end": "344080"
  },
  {
    "text": "account has access to because they're the resource owners the kubernetes admin does not control this and cannot see that this even",
    "start": "344080",
    "end": "350240"
  },
  {
    "text": "happened so you can imagine in a situation where you have a small team of kubernetes admins that",
    "start": "350240",
    "end": "355520"
  },
  {
    "text": "are trying to maintain a cluster that want to open it up to give many developers the ability to deploy workloads to this cluster it can be",
    "start": "355520",
    "end": "362080"
  },
  {
    "text": "difficult to secure because they can't control with the service account attached to the notes has access to and",
    "start": "362080",
    "end": "367440"
  },
  {
    "text": "some developers may want to just give that service account access to resources rather than using something like",
    "start": "367440",
    "end": "372800"
  },
  {
    "text": "kubernetes secrets or vault to pass credentials to those workloads they may choose to just give the service",
    "start": "372800",
    "end": "378800"
  },
  {
    "text": "account attached to the underlying node access to their resources but when they do that they give all workloads access",
    "start": "378800",
    "end": "385440"
  },
  {
    "text": "to their resources not just one workload and so you end up in a situation where a kubernetes admin who wants to",
    "start": "385440",
    "end": "392160"
  },
  {
    "text": "onboard developers into their cluster inadvertently gives every new workload access to a bunch of resources even",
    "start": "392160",
    "end": "398639"
  },
  {
    "text": "though they can't even see that or have any control over it",
    "start": "398639",
    "end": "409440"
  },
  {
    "start": "402000",
    "end": "743000"
  },
  {
    "text": "[Music] okay now before we go any further it's",
    "start": "409440",
    "end": "415440"
  },
  {
    "text": "important to point out that up until this point i've kind of implied that resources are like these standalone",
    "start": "415440",
    "end": "420479"
  },
  {
    "text": "entities that receive single role bindings directly to them and while resources definitely can operate that way",
    "start": "420479",
    "end": "426240"
  },
  {
    "text": "most of the time they're actually bundled together into groupings and there's a role binding that goes to the entire group of stuff so instead of",
    "start": "426240",
    "end": "432479"
  },
  {
    "text": "getting a role directly to a bucket you'd instead get a role to a collection of buckets so fundamentally there are",
    "start": "432479",
    "end": "437599"
  },
  {
    "text": "four nodes resource nodes within gcp there's an organization node which is the parent",
    "start": "437599",
    "end": "442880"
  },
  {
    "text": "node this is generally associated with your domain or cloud identity service there are folders and projects all of these different top",
    "start": "442880",
    "end": "450720"
  },
  {
    "text": "level nodes are mostly used for iam and something that's important to note within the resource hierarchy is the",
    "start": "450720",
    "end": "456560"
  },
  {
    "text": "concept of i am inheritance where wherever you have an i am binding to one of these top level nodes your i",
    "start": "456560",
    "end": "463599"
  },
  {
    "text": "am binding is also going to be inherited to all subsequent or child resources within this hierarchy so",
    "start": "463599",
    "end": "470479"
  },
  {
    "text": "if i have a role binding at the organization i have access to all subsequent resources that are created within the environment",
    "start": "470479",
    "end": "476479"
  },
  {
    "text": "same at the folder and project level generally users mostly interact with resources at the",
    "start": "476479",
    "end": "481599"
  },
  {
    "text": "project level that's where services like buckets compute and general services that you may interact",
    "start": "481599",
    "end": "487599"
  },
  {
    "text": "with on a day-to-day basis are now let's dig into a few different im workflows and try to understand why",
    "start": "487599",
    "end": "492639"
  },
  {
    "text": "project level im bindings are so prevalent in gcp if we navigate to iam and we go to grant",
    "start": "492639",
    "end": "498319"
  },
  {
    "text": "a member access to our resources what we're doing here is we're actually creating a project level role binding which will give this member access to",
    "start": "498319",
    "end": "504800"
  },
  {
    "text": "all resources within our project if we wanted to create a resource level im binding we would actually need to",
    "start": "504800",
    "end": "509840"
  },
  {
    "text": "interact with the resource specific api and set the iam binding there",
    "start": "509840",
    "end": "515599"
  },
  {
    "text": "another im workflow where a user is prompted to create a project level role binding is when you create a service account when",
    "start": "516000",
    "end": "521599"
  },
  {
    "text": "we create a service account we'll actually be prompted to set a project level i am binding that will grant this service account access",
    "start": "521599",
    "end": "528080"
  },
  {
    "text": "again to all resources within our project so we can see that when you go through general im workflows you are",
    "start": "528080",
    "end": "533680"
  },
  {
    "text": "going to always be setting a project level i am binding your im binding is also going to be inherited to all subsequent",
    "start": "533680",
    "end": "540480"
  },
  {
    "text": "or child resources within this project here we can also see something called",
    "start": "540480",
    "end": "546560"
  },
  {
    "text": "conditionals this is an advanced feature within the im service that does enable you to set more granular im policies",
    "start": "546560",
    "end": "553200"
  },
  {
    "text": "but also at the project level within your environment so i think that's really interesting that the main iam button in the ui",
    "start": "553200",
    "end": "559519"
  },
  {
    "text": "actually takes you to the project level bindings a lot of people don't even realize that you can do resource level bindings because you have to actually",
    "start": "559519",
    "end": "565839"
  },
  {
    "text": "click through into the resource to see that there are im settings there and a lot of people just assume that if they go to the i am",
    "start": "565839",
    "end": "571600"
  },
  {
    "text": "page they get the whole iam story so when we backtrack a little bit to when we were talking about resource owners and service account owners",
    "start": "571600",
    "end": "577120"
  },
  {
    "text": "realistically what would actually happen is you would have project owners and within those projects you would have resources and service accounts so before",
    "start": "577120",
    "end": "584240"
  },
  {
    "text": "we were talking about role bindings we mentioned this idea of kubernetes nodes having service accounts attached to them and",
    "start": "584240",
    "end": "589440"
  },
  {
    "text": "developers deploying workloads to the kubernetes cluster and granting them access to resources but more realistically what that would",
    "start": "589440",
    "end": "595519"
  },
  {
    "text": "look like is they would grant that node access to their entire project because again im bindings are typically done at the project level so instead of",
    "start": "595519",
    "end": "602079"
  },
  {
    "text": "granting the node access to a single bucket they would granted access to all buckets within a given project now this isn't always the case sometimes",
    "start": "602079",
    "end": "608480"
  },
  {
    "text": "developers do resource level role binding and it should also be noted that the ui isn't the only way to apply these role",
    "start": "608480",
    "end": "613920"
  },
  {
    "text": "bindings you can also apply them via terraform or via cli it's pretty common for developers to do",
    "start": "613920",
    "end": "619040"
  },
  {
    "text": "it at the project level because most of their first exposure actually comes through the ui okay so if we recapped the earlier",
    "start": "619040",
    "end": "624720"
  },
  {
    "text": "section you might remember when we talked about service account owners we mentioned that the service account owner can't actually know what access",
    "start": "624720",
    "end": "630720"
  },
  {
    "text": "their service accounts have well it's not really the whole story really what we have is a project owner and then that project owner has a bunch of service",
    "start": "630720",
    "end": "636399"
  },
  {
    "text": "accounts in their project and then those service accounts have access to stuff and the project owner doesn't really have the whole story of",
    "start": "636399",
    "end": "642000"
  },
  {
    "text": "what their service accounts have access to and so you might imagine how that can start to become dangerous is when i hand over",
    "start": "642000",
    "end": "647200"
  },
  {
    "text": "access of my project to someone else i don't really know how much access i'm handing over because again i don't even know how much access my",
    "start": "647200",
    "end": "653279"
  },
  {
    "text": "service accounts have in my project so if i hand that over to someone else i'm handing over an unknown amount of access",
    "start": "653279",
    "end": "658480"
  },
  {
    "text": "so what is an example of this look like well we have a project owner that knows the email address of a different project",
    "start": "658480",
    "end": "664320"
  },
  {
    "text": "service account they can then give that service account access to their project through an im binding and then that service account",
    "start": "664320",
    "end": "671200"
  },
  {
    "text": "has access to their project's resources now one question you might be asking yourself is why you would even need a",
    "start": "671200",
    "end": "676480"
  },
  {
    "text": "cross project role binding but when you think about it when you have two projects they're not particularly useful unless they have some way to talk to",
    "start": "676480",
    "end": "682399"
  },
  {
    "text": "each other and one common way to do that is through google cloud services like pub sub or storage and so it makes sense that we",
    "start": "682399",
    "end": "688320"
  },
  {
    "text": "would want to share some resources between projects but again where things sort of start to become more dangerous is if we share service account access",
    "start": "688320",
    "end": "694800"
  },
  {
    "text": "between projects because again project owners don't really know what access their service accounts have so we're missing out on some important",
    "start": "694800",
    "end": "700240"
  },
  {
    "text": "existential questions like how interconnected our projects actually are because again we can answer questions like who has access to a resource but we",
    "start": "700240",
    "end": "706800"
  },
  {
    "text": "really can't answer questions like what does a service account have access to so we came up with a solution that let us sort of answer this question within our",
    "start": "706800",
    "end": "713440"
  },
  {
    "text": "own organization we can't actually get the complete answer of the question again because of these things called cross",
    "start": "713440",
    "end": "718560"
  },
  {
    "text": "organizational bindings but at least within our org we can get the answer for cross project bindings by just introspecting every individual project",
    "start": "718560",
    "end": "725279"
  },
  {
    "text": "that we own and pulling all the iem policies we then took all that information and we made a graph out of it we",
    "start": "725279",
    "end": "730560"
  },
  {
    "text": "actually went over to github and we crawled a bunch of im policies that people either intentionally or accidentally committed",
    "start": "730560",
    "end": "736720"
  },
  {
    "text": "and we took all those policies and we kind of compiled this pseudo-org",
    "start": "736720",
    "end": "742399"
  },
  {
    "text": "generator [Music]",
    "start": "742839",
    "end": "756190"
  },
  {
    "start": "743000",
    "end": "956000"
  },
  {
    "text": "so let's take a look at one of the graphs we ended up with as you can see there are two different colored nodes there are red nodes and there are blue",
    "start": "756240",
    "end": "762480"
  },
  {
    "text": "nodes what the red nodes represent are projects and what the blue nodes represent are service accounts",
    "start": "762480",
    "end": "768000"
  },
  {
    "text": "those are the only two things we're graphing here then there are two different types of edges there are contains edges and there are",
    "start": "768000",
    "end": "773279"
  },
  {
    "text": "bindings edges a contains edge is basically when a service account lives in a given project and the binding",
    "start": "773279",
    "end": "779040"
  },
  {
    "text": "edge is when that service account has a role binding to that project most of the time a service account has a",
    "start": "779040",
    "end": "784160"
  },
  {
    "text": "role binding to the project that it's contained in but every once in a while we'll end up with a service account that has a role",
    "start": "784160",
    "end": "789360"
  },
  {
    "text": "binding to a different project across project binding so in this case we have a service account that's contained in project",
    "start": "789360",
    "end": "794959"
  },
  {
    "text": "number 67 and it has a role binding into project number 57. if we zoom out we get the",
    "start": "794959",
    "end": "800160"
  },
  {
    "text": "view of the entire organization we have all the different projects here on a map and we have all the relationships of the service accounts within the org that are",
    "start": "800160",
    "end": "806639"
  },
  {
    "text": "contained within these projects now we're not looking at organization level bindings in this graph or resource level bindings we're only",
    "start": "806639",
    "end": "812800"
  },
  {
    "text": "looking at the project level bindings and we're mapping these relationships so because we based this off of real im",
    "start": "812800",
    "end": "817920"
  },
  {
    "text": "policies that were able to pull off github we could say with some level of confidence that this is an accurate representation of what a sufficiently",
    "start": "817920",
    "end": "824240"
  },
  {
    "text": "large company might look like we can also say with a little bit of personal experience based on the large companies that we've looked at this is an accurate",
    "start": "824240",
    "end": "830639"
  },
  {
    "text": "representation of what a sufficiently large company looks like now again most of the time a developer is just going to be the owner of a single project and",
    "start": "830639",
    "end": "836880"
  },
  {
    "text": "they won't really see the whole picture all they'll see is sort of tunnel vision for the one project that they have control over",
    "start": "836880",
    "end": "842399"
  },
  {
    "text": "and so they'll see the service accounts that belong to their project and they'll see what has role bindings into their project but they won't know where their",
    "start": "842399",
    "end": "848959"
  },
  {
    "text": "service accounts have role bindings out of their project and so when they hand off access to their project to",
    "start": "848959",
    "end": "854000"
  },
  {
    "text": "another developer they won't actually know how many additional projects they're handing off and they themselves may not have a good",
    "start": "854000",
    "end": "859279"
  },
  {
    "text": "understanding of how many projects that they have access to through their service accounts one other interesting thing that we found here is that there are certain",
    "start": "859279",
    "end": "865839"
  },
  {
    "text": "projects that have seemingly disproportionate large numbers of role bindings and resources in them we found",
    "start": "865839",
    "end": "871199"
  },
  {
    "text": "this was a pretty consistent story at multiple companies that we looked at and so in the center here you can see there",
    "start": "871199",
    "end": "876560"
  },
  {
    "text": "are a bunch of projects that have really tightly bound role bindings and then at the bottom we have smaller projects that",
    "start": "876560",
    "end": "881680"
  },
  {
    "text": "only have one or two service accounts that may not be connected to the broader web and then we have a bunch of projects that have no service accounts what we",
    "start": "881680",
    "end": "888160"
  },
  {
    "text": "found is that most of the sensitive data or sensitive workloads are in the interconnected projects that's where",
    "start": "888160",
    "end": "893680"
  },
  {
    "text": "most of the development is happening and so it makes sense that it would have most of the iem roll bindings connecting",
    "start": "893680",
    "end": "898880"
  },
  {
    "text": "it with other projects so when we first started building these graphs we were thinking to ourselves oh gosh these projects are supposed to be",
    "start": "898880",
    "end": "905279"
  },
  {
    "text": "isolated boundaries are they really this interconnected and the more we dug into it and the more we thought about how",
    "start": "905279",
    "end": "911199"
  },
  {
    "text": "project owners can't actually see the role bindings their service accounts have been granted we realized this is a",
    "start": "911199",
    "end": "916399"
  },
  {
    "text": "problem that's really remained invisible and it really takes this org level introspection to even see it now there's",
    "start": "916399",
    "end": "922079"
  },
  {
    "text": "one final piece here that we haven't talked about yet and that's when a developer actually does hand over access to their project to another",
    "start": "922079",
    "end": "927199"
  },
  {
    "text": "developer pieces of that might be okay it might be okay to share storage for example but things start to become really dangerous if you share access to",
    "start": "927199",
    "end": "933600"
  },
  {
    "text": "service accounts because again that's where the problem is hidden where the owner of the project doesn't actually know what access their service accounts",
    "start": "933600",
    "end": "939839"
  },
  {
    "text": "have and so if we share that unknown access that's where things can start to go astray so we'll come back to what roles and permissions are actually",
    "start": "939839",
    "end": "946399"
  },
  {
    "text": "required to hand over that level of access and we'll talk about how common that is so far we've talked a lot about roles",
    "start": "946399",
    "end": "952000"
  },
  {
    "text": "and mentioned that some are more dangerous than others so now let's dig into that a little bit more within gcp there are three distinct",
    "start": "952000",
    "end": "958480"
  },
  {
    "start": "956000",
    "end": "1313000"
  },
  {
    "text": "types of roles that you can use primitive which have been around since before cloud im that we know today",
    "start": "958480",
    "end": "964000"
  },
  {
    "text": "predefined rules which are curated by gcp and service specific and custom roles that enable developers",
    "start": "964000",
    "end": "970320"
  },
  {
    "text": "to specify any permission that they would like that is supported to fit their services needs let's focus",
    "start": "970320",
    "end": "975600"
  },
  {
    "text": "on primitive rules within primitive roles there is an owner role which provides",
    "start": "975600",
    "end": "980639"
  },
  {
    "text": "all of the different permissions that are available within the platform an editor role which closely resembles",
    "start": "980639",
    "end": "986480"
  },
  {
    "text": "the owner role but excludes a few different things for administrative capabilities and that just might not be supported yet",
    "start": "986480",
    "end": "993120"
  },
  {
    "text": "one thing in particular that's excluded is the ability to set project level role bindings and the viewer role which is exactly",
    "start": "993120",
    "end": "999360"
  },
  {
    "text": "what it sounds like it allows you to view resources but not perform any state changing actions",
    "start": "999360",
    "end": "1004639"
  },
  {
    "text": "how are these primitive roles used well earlier we saw that when you go to cloud im through the ui these",
    "start": "1004639",
    "end": "1011120"
  },
  {
    "text": "primitive roles are what are first suggested to users there's another way that these primitive",
    "start": "1011120",
    "end": "1016240"
  },
  {
    "text": "roles manifest themselves within your gcp project and that's through default i am role bindings whatever identity creates a",
    "start": "1016240",
    "end": "1023199"
  },
  {
    "text": "project will automatically be granted a project level role binding using the owner role",
    "start": "1023199",
    "end": "1028720"
  },
  {
    "text": "so we know that the owner role contains all of the different permissions that are available but what about the editor rule well the",
    "start": "1028720",
    "end": "1035839"
  },
  {
    "text": "editor role contains at the time of this talk 2576 distinct permissions",
    "start": "1035839",
    "end": "1043918"
  },
  {
    "text": "that's a lot this means that with the editor role you can for example access all buckets all databases all vms",
    "start": "1045839",
    "end": "1053120"
  },
  {
    "text": "and much more within your project out of these permissions that we talked",
    "start": "1053120",
    "end": "1058799"
  },
  {
    "text": "about earlier which of these roles actually enable user to manage service accounts well both the owner and the editor role",
    "start": "1058799",
    "end": "1065120"
  },
  {
    "text": "do while the editor role does not enable you to create new service accounts or apply",
    "start": "1065120",
    "end": "1071120"
  },
  {
    "text": "project level role bindings for service accounts it does allow you to manage service accounts in two",
    "start": "1071120",
    "end": "1077440"
  },
  {
    "text": "different ways and that's by creating keys or credentials for a given service account that already exists",
    "start": "1077440",
    "end": "1083760"
  },
  {
    "text": "and by associating a service account with a resource so if a user can create a resource",
    "start": "1083760",
    "end": "1089919"
  },
  {
    "text": "specify a service account gcp will go and check does this user have the im service accounts act as",
    "start": "1089919",
    "end": "1096080"
  },
  {
    "text": "permission on the service account that they are attempting to associate with the resource if so it gets attached and then that",
    "start": "1096080",
    "end": "1102320"
  },
  {
    "text": "user can interact with gcp services and apis as that service account identity and its",
    "start": "1102320",
    "end": "1107520"
  },
  {
    "text": "associated role so how common are these i am roles in gcp projects there's another way that gcp",
    "start": "1107520",
    "end": "1114400"
  },
  {
    "text": "creates automatic role bindings for identities and this way is a little bit different when you enable a specific service",
    "start": "1114400",
    "end": "1120320"
  },
  {
    "text": "such as google compute engine it will go and create a default service account in your",
    "start": "1120320",
    "end": "1126000"
  },
  {
    "text": "project and then grant that service account a project level role binding using the primitive editor role that we chatted",
    "start": "1126000",
    "end": "1132880"
  },
  {
    "text": "about earlier this also happens with another service when a user enables the app engine service",
    "start": "1132880",
    "end": "1138320"
  },
  {
    "text": "a service account called the app spot service account is created in your project and also granted a project level editor role binding now as",
    "start": "1138320",
    "end": "1145440"
  },
  {
    "text": "we discussed earlier that editor role contains a permission that enables identities to associate service accounts with",
    "start": "1145440",
    "end": "1151919"
  },
  {
    "text": "resources so that means that both of these default service accounts the compute engine and the app spot service account are",
    "start": "1151919",
    "end": "1158320"
  },
  {
    "text": "able to associate any service account within its gcp project to a resource so where are these",
    "start": "1158320",
    "end": "1164559"
  },
  {
    "text": "service accounts used the default compute service count is associated with gce vms by default",
    "start": "1164559",
    "end": "1172240"
  },
  {
    "text": "so whenever you create a vm the default compute service account is automatically associated with the vm there's one thing to note",
    "start": "1172240",
    "end": "1180400"
  },
  {
    "text": "about service counts and the way that they are authorized to interact with services from a vm there is the role that they",
    "start": "1180400",
    "end": "1186880"
  },
  {
    "text": "have as well as something called scopes and scopes define from within the vm",
    "start": "1186880",
    "end": "1192799"
  },
  {
    "text": "what services and apis can that identity interact with regardless of the role binding that they",
    "start": "1192799",
    "end": "1198320"
  },
  {
    "text": "have by default for vms scopes are restricted to only a few particular",
    "start": "1198320",
    "end": "1203600"
  },
  {
    "text": "services like storage but from what we have observed developers will commonly open these",
    "start": "1203600",
    "end": "1208720"
  },
  {
    "text": "scopes up so that they can interact with many different services and how are the app spot service accounts used cloud functions",
    "start": "1208720",
    "end": "1215120"
  },
  {
    "text": "are google server list offerings which are similar to aws lambdas they're meant to just be lightweight",
    "start": "1215120",
    "end": "1220880"
  },
  {
    "text": "ephemeral small chunks of code that run fast and exit once they're done if the app engine service is enabled",
    "start": "1220880",
    "end": "1227120"
  },
  {
    "text": "within your project when a developer goes to create a cloud function that default appspot service account",
    "start": "1227120",
    "end": "1233280"
  },
  {
    "text": "with the editor role binding will be associated with cloud functions by default when you create a cloud",
    "start": "1233280",
    "end": "1238559"
  },
  {
    "text": "function you actually do not have the ability to specify to set it without an identity you always have to associate an identity",
    "start": "1238559",
    "end": "1245280"
  },
  {
    "text": "with the cloud function so if you don't know to create a new service account and associate with your cloud function",
    "start": "1245280",
    "end": "1251039"
  },
  {
    "text": "you'll always be using the default app spot service account that has that editor role binding cloud functions do",
    "start": "1251039",
    "end": "1256080"
  },
  {
    "text": "not have scopes and get all the permissions of the editor role and coming back to the vms a lot of",
    "start": "1256080",
    "end": "1262640"
  },
  {
    "text": "managed services leverage vms as their underlying infrastructure things like gke dataproc dataflow they",
    "start": "1262640",
    "end": "1270240"
  },
  {
    "text": "also get this default compute engine service account associated with them in aws when you spin up something like a",
    "start": "1270240",
    "end": "1276080"
  },
  {
    "text": "vm or a lambda it defaults to having no access there are no roles attached but in gcp",
    "start": "1276080",
    "end": "1281679"
  },
  {
    "text": "things default to having thousands of permissions earlier we talked about cross-project role bindings",
    "start": "1281679",
    "end": "1287600"
  },
  {
    "text": "the ability to leverage service accounts in a project to get access to other service accounts",
    "start": "1287600",
    "end": "1292640"
  },
  {
    "text": "and potentially move laterally across gcp projects we talked about developers potentially not knowing what access their service",
    "start": "1292640",
    "end": "1299039"
  },
  {
    "text": "accounts have we mentioned the idea of handing off access and what this realistically looks like is the",
    "start": "1299039",
    "end": "1305039"
  },
  {
    "text": "developer applies a role binding with the act as permission like the editor role let's look at what",
    "start": "1305039",
    "end": "1310240"
  },
  {
    "text": "that could look like no it's demo time",
    "start": "1310240",
    "end": "1319840"
  },
  {
    "start": "1313000",
    "end": "1618000"
  },
  {
    "text": "to help understand how to exploit the act as permission we built a framework called gsplate to start out we need a base identity",
    "start": "1320240",
    "end": "1326880"
  },
  {
    "text": "there are a number of different ways to get a base identity one way for example is you could oauth fish a developer that has project level",
    "start": "1326880",
    "end": "1332960"
  },
  {
    "text": "editor access another way is maybe a developer accidentally uploaded a service account key to github or pastebin",
    "start": "1332960",
    "end": "1339200"
  },
  {
    "text": "and that surface account has a editor level role binding because the primitive roles are the first thing that are suggested to you on the iam page or",
    "start": "1339200",
    "end": "1346000"
  },
  {
    "text": "maybe the most likely maybe the base identity comes from exploiting a service and because most services run with project editor by",
    "start": "1346000",
    "end": "1352320"
  },
  {
    "text": "default maybe that's how you get your first foothold in any case in this case we've simulated this by just starting with the service",
    "start": "1352320",
    "end": "1358000"
  },
  {
    "text": "account credential we can see this credential here and we can see that it starts in the project bbs 2. next we'll run the list operation",
    "start": "1358000",
    "end": "1366000"
  },
  {
    "text": "on the g supply tool we can see that there's no output the reason there's no output is the list operation lists all the service accounts",
    "start": "1366000",
    "end": "1373039"
  },
  {
    "text": "that you've managed to take control of and it doesn't count the base identity we'll run the gcloud command projects list on the base identity to see what",
    "start": "1373039",
    "end": "1379840"
  },
  {
    "text": "project we have access to it looks like we have access to bbs2",
    "start": "1379840",
    "end": "1385280"
  },
  {
    "text": "next we'll try an act as exploit on this project and we'll target every service account in the project",
    "start": "1385280",
    "end": "1392158"
  },
  {
    "text": "let's unpack what's happening now keep in mind the editor role has two ways to take control of all the service accounts",
    "start": "1393760",
    "end": "1398960"
  },
  {
    "text": "in a project the first is through creating tokens and the second is through provisioning resources there's another role that we haven't",
    "start": "1398960",
    "end": "1404880"
  },
  {
    "text": "talked about yet and that's the service account user role this role is also pretty common and is often given to users and service",
    "start": "1404880",
    "end": "1410720"
  },
  {
    "text": "accounts that are meant to provision resources because some things like cloud functions require service accounts to be attached",
    "start": "1410720",
    "end": "1416400"
  },
  {
    "text": "to them this is the role that's usually granted to do that so because the service account user role",
    "start": "1416400",
    "end": "1421919"
  },
  {
    "text": "and the editor role both have the act as permission we'll use that to take control of the service accounts because it casts a little bit wider of a",
    "start": "1421919",
    "end": "1428240"
  },
  {
    "text": "net than the token creator permission which is only in the editor role so what gsploit is actually doing under the hood",
    "start": "1428240",
    "end": "1433360"
  },
  {
    "text": "here is first it's running the service account list operation to get a list of all the service accounts in the project and then it's spinning up a cloud",
    "start": "1433360",
    "end": "1439600"
  },
  {
    "text": "function for each one of those service accounts then we keep a database of all the cloud functions we've harvested each which has",
    "start": "1439600",
    "end": "1445279"
  },
  {
    "text": "its own underlying service account attached to it this gives us access to all the service accounts in the project through",
    "start": "1445279",
    "end": "1450559"
  },
  {
    "text": "the cloud functions that we spun up we control the code that lands on the cloud function so we'll just deploy code",
    "start": "1450559",
    "end": "1455600"
  },
  {
    "text": "that allows us to run whatever g-cloud commands we want it takes about two minutes to spin up each cloud function so we'll just speed through this really",
    "start": "1455600",
    "end": "1462000"
  },
  {
    "text": "quick and now when we run the list command again we can see all the new service",
    "start": "1462000",
    "end": "1468480"
  },
  {
    "text": "accounts that we now have access to one of them says owner that service account actually has an owner-level role",
    "start": "1468480",
    "end": "1473520"
  },
  {
    "text": "binding to the project that we started in that means we now have full control of the project through this service account if we wanted to we could use this service",
    "start": "1473520",
    "end": "1480000"
  },
  {
    "text": "account to add ourselves as owners to the project so just to pause and think about that for a second what that means is if you ever have a service account",
    "start": "1480000",
    "end": "1486480"
  },
  {
    "text": "that has editor level access and another service account that has owner level access the editor level service account can",
    "start": "1486480",
    "end": "1492480"
  },
  {
    "text": "always privilege escalate itself to owner that's the same with developers if you grant developer editor level access to a",
    "start": "1492480",
    "end": "1498159"
  },
  {
    "text": "project but you happen to have a service account in that project that has owner level access that developer can privilege escalate",
    "start": "1498159",
    "end": "1503440"
  },
  {
    "text": "themselves to owner through that service account okay let's take another look at those service accounts that we have there's one here that's kind of interesting that",
    "start": "1503440",
    "end": "1509440"
  },
  {
    "text": "says do nothing it might not sound interesting but keep in mind that the developer that created that service account in this project",
    "start": "1509440",
    "end": "1515360"
  },
  {
    "text": "although they didn't intend to give it any role bindings again the owner of the service accounts can't control the role bindings and so it's possible that a",
    "start": "1515360",
    "end": "1521919"
  },
  {
    "text": "different project gave it a role binding so let's run the project list command from this service account that we've compromised",
    "start": "1521919",
    "end": "1527520"
  },
  {
    "text": "something interesting here that the base project bbs 2 doesn't actually show up when we run this command this is because the service account has",
    "start": "1527520",
    "end": "1533600"
  },
  {
    "text": "no role minings there the developer didn't want to have any role bindings but bbs 3 this new project we haven't",
    "start": "1533600",
    "end": "1538720"
  },
  {
    "text": "looked at shows up what happened here is a developer in another project granted this service account and editor role binding into",
    "start": "1538720",
    "end": "1544640"
  },
  {
    "text": "their project so let's run the act as exploit one more time this time from this do nothing serves account into bbs3",
    "start": "1544640",
    "end": "1551360"
  },
  {
    "text": "and see how many service accounts we can harvest in bbs3 again this process takes a little while so we're gonna fast forward through this",
    "start": "1551360",
    "end": "1559200"
  },
  {
    "text": "and now we can see a whole bunch of new service accounts in the bbs3 project service accounts that we didn't have access to before that we were able to",
    "start": "1562080",
    "end": "1568480"
  },
  {
    "text": "get strictly through lateral movement there's a couple of service accounts in here that look interesting there's one that's labeled networking that maybe",
    "start": "1568480",
    "end": "1574159"
  },
  {
    "text": "controls networking for the organization but probably most interesting is this one that's labeled organizational admin",
    "start": "1574159",
    "end": "1579760"
  },
  {
    "text": "if while you're moving laterally through projects you happen to land on a service account that has an org level binding through inheritance you get access to",
    "start": "1579760",
    "end": "1586240"
  },
  {
    "text": "the entire org that way so to recap we started with the base identity in bbs2 that had act as on the",
    "start": "1586240",
    "end": "1592000"
  },
  {
    "text": "project we then used that permission to gain access to every service account in this project via cloud functions one of the",
    "start": "1592000",
    "end": "1598080"
  },
  {
    "text": "service accounts in bbs2 had an owner role which allowed us to elevate privileges in the bbs2 project a different service",
    "start": "1598080",
    "end": "1604159"
  },
  {
    "text": "account had a role binding into bbs3 this allowed us to use act as to take control of all the service accounts in",
    "start": "1604159",
    "end": "1609679"
  },
  {
    "text": "bbs3 one of the service accounts we found in bbs3 had an organizational role binding and this allowed us to take",
    "start": "1609679",
    "end": "1615200"
  },
  {
    "text": "control of the entire org",
    "start": "1615200",
    "end": "1627840"
  },
  {
    "start": "1618000",
    "end": "1823000"
  },
  {
    "text": "[Music] so we talked about when you provision resources when you attach service",
    "start": "1631420",
    "end": "1636880"
  },
  {
    "text": "accounts to those resources gcp will check to make sure that you have the act as permission first before allowing you to provision the resource",
    "start": "1636880",
    "end": "1643120"
  },
  {
    "text": "because some apis like cloud functions require that you have identities to power them this leads to a lot of people getting the act as permission",
    "start": "1643120",
    "end": "1649520"
  },
  {
    "text": "well it turns out that some apis will actually allow you to provision resources with a service account attached to them without the need for",
    "start": "1649520",
    "end": "1655120"
  },
  {
    "text": "the actas permission these include the dataproc dataflow and composer apis",
    "start": "1655120",
    "end": "1660159"
  },
  {
    "text": "let's talk about the dataproc api the dataproc api is google's data processing api",
    "start": "1660159",
    "end": "1665520"
  },
  {
    "text": "among other things it includes managed apache hadoop and managed apache spark when you spin up a data proc cluster",
    "start": "1665520",
    "end": "1671520"
  },
  {
    "text": "like a lot of things in gcp it will default to using the default compute engine service account this means by default your spark jobs",
    "start": "1671520",
    "end": "1678320"
  },
  {
    "text": "will run as project editor you only need the permission dataproc cluster create to spin up this cluster you don't actually need the act as",
    "start": "1678320",
    "end": "1684960"
  },
  {
    "text": "permission on the default service account because of this anyone who has the data cluster create permission",
    "start": "1684960",
    "end": "1690720"
  },
  {
    "text": "can actually make use of the default editor service account put another way service accounts that are only intended to be able to spin up",
    "start": "1690720",
    "end": "1696880"
  },
  {
    "text": "data proc clusters can privilege escalate themselves to project editor and then they can make use of that act",
    "start": "1696880",
    "end": "1702080"
  },
  {
    "text": "as permission to take control of the rest of the service accounts in the project we built support for this into g-split",
    "start": "1702080",
    "end": "1707440"
  },
  {
    "text": "so let's take a look and see what it looks like if we take another look at the list of service accounts we've compromised there's one here that says dataproc",
    "start": "1707440",
    "end": "1714000"
  },
  {
    "text": "let's run the gcloud projects list on this service account and see what projects it has access to",
    "start": "1714000",
    "end": "1725120"
  },
  {
    "text": "looks like it has access to a bbs4 now let's run the dataproc exploit on vbs4",
    "start": "1725120",
    "end": "1730159"
  },
  {
    "text": "through the dataproc service account we have to spin up a whole dataproc cluster to do this and that takes a little bit",
    "start": "1730159",
    "end": "1735279"
  },
  {
    "text": "of time and then we delete it afterwards so that we're not billed too long so we'll fast forward to this part but at the end of it when we run gcloud list",
    "start": "1735279",
    "end": "1742080"
  },
  {
    "text": "again we can see a new service account has been added and that's the default service account in the bbs4 project we were able to get this service",
    "start": "1742080",
    "end": "1748640"
  },
  {
    "text": "account by spinning up a dataproc cluster in vbs4 and then running a spark job on that cluster which enabled us to grab the",
    "start": "1748640",
    "end": "1754960"
  },
  {
    "text": "credential off the instance because our dataproc service account credential had the ability to spin the cluster up it also controlled the scopes",
    "start": "1754960",
    "end": "1761679"
  },
  {
    "text": "for that cluster and so we just defined the scopes for this cluster to be wide open next since we have a default editor service account",
    "start": "1761679",
    "end": "1767840"
  },
  {
    "text": "credential at this point we can run the act as exploit on this project",
    "start": "1767840",
    "end": "1772880"
  },
  {
    "text": "we'll again fast forward to this process",
    "start": "1775760",
    "end": "1781840"
  },
  {
    "text": "and finally if we run the gcode list one more time we can see a whole bunch of new service accounts that we now have access to in the bbs4 project so just to",
    "start": "1781840",
    "end": "1788799"
  },
  {
    "text": "recap some apis in gcp do not require the act as permission to spin up resources and",
    "start": "1788799",
    "end": "1793840"
  },
  {
    "text": "attach the default service accounts to them the identities that can spin those resources up can also control the scopes",
    "start": "1793840",
    "end": "1799120"
  },
  {
    "text": "so effectively in cases like dataproc and dataflow and composer any identity that's granted permissions",
    "start": "1799120",
    "end": "1804799"
  },
  {
    "text": "to those apis can privilege escalate themselves to project editor one last thing to note here is because this data proc rule binding was actually",
    "start": "1804799",
    "end": "1811440"
  },
  {
    "text": "cross project this allowed us to again compromise the new project bbs4 and because the default service accounts",
    "start": "1811440",
    "end": "1817600"
  },
  {
    "text": "are in every project this allows us to take control of all the service accounts in the new project",
    "start": "1817600",
    "end": "1823840"
  },
  {
    "start": "1823000",
    "end": "1939000"
  },
  {
    "text": "[Music]",
    "start": "1824380",
    "end": "1839039"
  },
  {
    "text": "google has a new feature in their asset inventory api called the iem analyzer we worked with google on this feature",
    "start": "1839039",
    "end": "1845120"
  },
  {
    "text": "and one of the user stories actually came from us we came up with a list of dangerous",
    "start": "1845120",
    "end": "1851039"
  },
  {
    "text": "roles and permissions that can be used to take control of all the service accounts in the project these can be seen here we won't demo data flow and",
    "start": "1851039",
    "end": "1857360"
  },
  {
    "text": "composer but you can think of them as working the same way as data proc using the iam analyzer and the dangerous",
    "start": "1857360",
    "end": "1862559"
  },
  {
    "text": "permissions that we're able to find we're able to run a bfs search on a base identity without the need to spin up expensive resources exploiting services",
    "start": "1862559",
    "end": "1870159"
  },
  {
    "text": "as you can see from the output here we get the same list of service accounts from the same base identity as we did exploiting things",
    "start": "1870159",
    "end": "1875919"
  },
  {
    "text": "except this was much faster we didn't have to spin anything up you need an org binding to use this so this is a tool for defenders to be",
    "start": "1875919",
    "end": "1882480"
  },
  {
    "text": "able to get quick answers to how an attacker might be able to move laterally through the organization if we cut back to our mock graph",
    "start": "1882480",
    "end": "1888720"
  },
  {
    "text": "let's zoom into a seemingly innocent base identity this service account guadvcl was meant to only run spark jobs",
    "start": "1888720",
    "end": "1894559"
  },
  {
    "text": "in its base project 14. it only has the dataproc editor role now run a bfs search from the starting",
    "start": "1894559",
    "end": "1899840"
  },
  {
    "text": "identity and highlight the path in blue as you can see this allowed us to compromise all the service accounts in the starting project through the default",
    "start": "1899840",
    "end": "1906240"
  },
  {
    "text": "editor role on our spark job most of these service accounts have benign roles like storage or pub sub and most of them are not cross project",
    "start": "1906240",
    "end": "1912960"
  },
  {
    "text": "that said some like this one have dangerous role bindings that are cross project in this case the dataflow developer role",
    "start": "1912960",
    "end": "1919200"
  },
  {
    "text": "these allow us to take full controlled service accounts in different projects as we start to zoom out we can begin to see the whole picture we've managed to",
    "start": "1919200",
    "end": "1925840"
  },
  {
    "text": "compromise most of the service accounts in the org with a few notable project exceptions that just don't have any dangerous role",
    "start": "1925840",
    "end": "1931360"
  },
  {
    "text": "bindings to them we're only looking at project level bindings in this graph so if any of these surface accounts have org level",
    "start": "1931360",
    "end": "1937039"
  },
  {
    "text": "bindings it's not reflected here so we just saw some really interesting techniques around privilege escalation",
    "start": "1937039",
    "end": "1943279"
  },
  {
    "text": "and lateral movement but we also wanted to provide a way to detect this so we fingerprinted this tooling and",
    "start": "1943279",
    "end": "1948799"
  },
  {
    "text": "we'll be releasing monitoring and alerting to detect the behavior of this tool in your environment i think one of the nice things about",
    "start": "1948799",
    "end": "1954880"
  },
  {
    "text": "doing security work in the cloud is how much help you get from your upstream provider if we were doing work on a web",
    "start": "1954880",
    "end": "1960000"
  },
  {
    "text": "application or a binary we'd kind of be left to our own vices to fix the problems we found but because we had a",
    "start": "1960000",
    "end": "1965120"
  },
  {
    "text": "close partnership with google we were able to work with them to roll out some new features that help with the security story of some of these problems",
    "start": "1965120",
    "end": "1970880"
  },
  {
    "text": "one of the people that helped us do that is a security engineer named bakanov and we gave him an invitation to do a brief cameo and talk about some of the new",
    "start": "1970880",
    "end": "1977120"
  },
  {
    "text": "features that we helped google roll out hello black hat",
    "start": "1977120",
    "end": "1981919"
  },
  {
    "text": "i had the privilege of working with alison and dylan as a result of our collaboration with google cloud launched several",
    "start": "1984080",
    "end": "1990559"
  },
  {
    "text": "features that help customers address concerns on the prevention side of things we now have an org policy",
    "start": "1990559",
    "end": "1996480"
  },
  {
    "text": "constraint that prevents the editor grant to the default service accounts for",
    "start": "1996480",
    "end": "2001519"
  },
  {
    "text": "compute engine and app engine and we advise customers to turn around we recommend that customers create",
    "start": "2001519",
    "end": "2007279"
  },
  {
    "text": "custom service accounts with the necessary set of permissions on the target resources",
    "start": "2007279",
    "end": "2012320"
  },
  {
    "text": "as opposed to the broad project level editor grants allison and dylan briefly touched upon",
    "start": "2012320",
    "end": "2017679"
  },
  {
    "text": "the investigative iem analyzer tool as you saw we built im analyzer to be able to address the use",
    "start": "2017679",
    "end": "2024559"
  },
  {
    "text": "case of finding resources which are granted access to any specific identity the",
    "start": "2024559",
    "end": "2030000"
  },
  {
    "text": "other investigative feature available is the iam recommender it uses machine learning to evaluate the permissions",
    "start": "2030000",
    "end": "2036640"
  },
  {
    "text": "granted to an identity against actual activities performed by the identity it's a great way to find overly generous",
    "start": "2036640",
    "end": "2043120"
  },
  {
    "text": "permission grants and to identify the actual permissions that are needed for the workload i spent many years working",
    "start": "2043120",
    "end": "2048960"
  },
  {
    "text": "with all major cloud providers and this statement is generally true for all of them starter cloud uis",
    "start": "2048960",
    "end": "2055200"
  },
  {
    "text": "those flows are optimized for ease of onboarding and so the fundamental challenge for",
    "start": "2055200",
    "end": "2060398"
  },
  {
    "text": "large organizations is to make available insanely secured defaults as well as preventative guardrails for",
    "start": "2060399",
    "end": "2066878"
  },
  {
    "text": "their developers those are usually in the shape of cloud foundation code bases such as infrastructures called samples",
    "start": "2066879",
    "end": "2073839"
  },
  {
    "text": "that are built with security in mind policy has called evaluations as part of the build and release pipelines",
    "start": "2073839",
    "end": "2079599"
  },
  {
    "text": "and preventative controls exposed by the cloud providers such as org policy constraints on gcp if",
    "start": "2079599",
    "end": "2085760"
  },
  {
    "text": "we're leaving developers to the mercy of those starter ui flows on the cloud providers",
    "start": "2085760",
    "end": "2091200"
  },
  {
    "text": "or stack overflow code snippets we're gonna end up in a bad place if you're a google cloud customer and",
    "start": "2091200",
    "end": "2096638"
  },
  {
    "text": "are looking for guidance in this area you should try to engage your account team so that we can help out allison and",
    "start": "2096639",
    "end": "2102880"
  },
  {
    "text": "dylan on behalf of everyone at google cloud we are very grateful for the collaboration",
    "start": "2102880",
    "end": "2108320"
  },
  {
    "text": "on improving our customers experience on the platform and for the opportunity to have a cameo appearance in this talk",
    "start": "2108320",
    "end": "2114079"
  },
  {
    "text": "i'm hoping that blackout 2021 happens in person and we can share stories in the face-to-face setting",
    "start": "2114079",
    "end": "2119520"
  },
  {
    "text": "until then please wear face masks and don't forget to turn on two-factor authentication wherever possible",
    "start": "2119520",
    "end": "2130960"
  },
  {
    "text": "thank you thank you bach we also wanted to provide some context and a little bit more insight and let",
    "start": "2130960",
    "end": "2136800"
  },
  {
    "start": "2132000",
    "end": "2408000"
  },
  {
    "text": "you know a few of the limitations or constraints to these tools so one of the main limitations to the organization policy services you",
    "start": "2136800",
    "end": "2143520"
  },
  {
    "text": "actually have to have an organization resource either through cloud identity or g suite to be able to use",
    "start": "2143520",
    "end": "2149359"
  },
  {
    "text": "the organization policy service if you only have projects you won't actually be able to leverage any of the constraints that are available",
    "start": "2149359",
    "end": "2155119"
  },
  {
    "text": "another limitation within the organization policy service is that constraints are not retroactive so when the policy is applied all",
    "start": "2155119",
    "end": "2162400"
  },
  {
    "text": "resources will be affected by the policy or evaluated by the policy after it is enabled but existing",
    "start": "2162400",
    "end": "2168240"
  },
  {
    "text": "resources will not be modified to match or meet the requirements of a given constraint",
    "start": "2168240",
    "end": "2173359"
  },
  {
    "text": "another thing to note is that for the new disable automatic im grants for default service accounts that constraint will only enforce",
    "start": "2173359",
    "end": "2181200"
  },
  {
    "text": "that when the apis are initially enabled for new projects that the default service accounts are not granted",
    "start": "2181200",
    "end": "2187280"
  },
  {
    "text": "editor level role bindings at the time of the apis being enabled but there is no enforcement mechanism",
    "start": "2187280",
    "end": "2192800"
  },
  {
    "text": "to ensure that the default service accounts are not granted a project level binding or other binding",
    "start": "2192800",
    "end": "2199040"
  },
  {
    "text": "there's also no way to restrict the cross project bindings that we talked about previously",
    "start": "2199040",
    "end": "2204720"
  },
  {
    "text": "where if a user knows the name of your service account they could still give the service account access to their",
    "start": "2204720",
    "end": "2210079"
  },
  {
    "text": "project or project's resources so the im recommender is very powerful some of the limitations on the tool is that you have",
    "start": "2210079",
    "end": "2216240"
  },
  {
    "text": "to have a 90-day period where the policies or behavior of a given identity",
    "start": "2216240",
    "end": "2221280"
  },
  {
    "text": "are evaluated so that you can have a recommendation be made and there may be more im bindings that you may not be aware of",
    "start": "2221280",
    "end": "2227359"
  },
  {
    "text": "like the cross project bindings the im analyzer can provide a lot of context into the",
    "start": "2227359",
    "end": "2232720"
  },
  {
    "text": "i am bindings or associations for a given identity and in order to use this auditing tool you",
    "start": "2232720",
    "end": "2238800"
  },
  {
    "text": "have to have administrative capabilities in an organization to be able to see the policies that are being analyzed",
    "start": "2238800",
    "end": "2245280"
  },
  {
    "text": "so in order to use this tool to the fullest extent you need administrative capabilities in your organization",
    "start": "2245280",
    "end": "2251040"
  },
  {
    "text": "as well as within g suite if you want to expand group membership to know who has access to a given service account that",
    "start": "2251040",
    "end": "2258160"
  },
  {
    "text": "is in a group earlier we talked about how kubernetes workloads have access to the underlying",
    "start": "2258160",
    "end": "2263760"
  },
  {
    "text": "service count that's attached to the node and the suggested way to harden your clusters is to use a",
    "start": "2263760",
    "end": "2269920"
  },
  {
    "text": "service called workload identity and workload identity allows you to associate a kubernetes service account",
    "start": "2269920",
    "end": "2275920"
  },
  {
    "text": "with a cloud identity and this is how you can harden your cluster as well as have a one-to-one mapping of",
    "start": "2275920",
    "end": "2281680"
  },
  {
    "text": "kubernetes service accounts to cloud identity service accounts we brought up earlier to ensure default service accounts are",
    "start": "2281680",
    "end": "2287680"
  },
  {
    "text": "not granted project level role bindings or other role bindings after the disable automatic im grants for default",
    "start": "2287680",
    "end": "2293920"
  },
  {
    "text": "service accounts constraint is enabled that you require additional tooling and to demonstrate a way",
    "start": "2293920",
    "end": "2299760"
  },
  {
    "text": "that you can enforce these configurations we will be releasing a terraform enterprise sentinel policy set",
    "start": "2299760",
    "end": "2305920"
  },
  {
    "text": "that can demonstrate enforcing that default service accounts are not granted project level role bindings",
    "start": "2305920",
    "end": "2311200"
  },
  {
    "text": "or that roles that enable service account takeover or management of service accounts cannot",
    "start": "2311200",
    "end": "2317280"
  },
  {
    "text": "be applied at the project level sentinel policies are terraform enterprise policy configuration language that enable you",
    "start": "2317280",
    "end": "2324480"
  },
  {
    "text": "to either restrict or alert on specific configurations in your runs so just to recap some of the key",
    "start": "2324480",
    "end": "2331200"
  },
  {
    "text": "takeaways im in gcp is very resource centric meaning that if you are a service counselor you may not be aware of the",
    "start": "2331200",
    "end": "2337599"
  },
  {
    "text": "configurations that are associated with that service count or how it may be used across a gcp organization this can lead to projects",
    "start": "2337599",
    "end": "2344400"
  },
  {
    "text": "being interconnected and many different ways that you may not be able to see role bindings are often done at the project level and can grant more access",
    "start": "2344400",
    "end": "2351920"
  },
  {
    "text": "than a user intends to a lot of managed services and general resource provisioning operations can hand off access to your",
    "start": "2351920",
    "end": "2359359"
  },
  {
    "text": "project's resources and im that you may not be aware of this kind of access that's granted through",
    "start": "2359359",
    "end": "2364720"
  },
  {
    "text": "resource creation can lead to privilege escalation and lateral movements within your environments",
    "start": "2364720",
    "end": "2370160"
  },
  {
    "text": "another thing we covered is that default service accounts are granted administrative roles within your project",
    "start": "2370160",
    "end": "2375920"
  },
  {
    "text": "automatically and that's with the editor role unless you're using the disable automatic im grants for default service",
    "start": "2375920",
    "end": "2381760"
  },
  {
    "text": "accounts organization constraint reduce usage of default service accounts where possible by creating service specific service",
    "start": "2381760",
    "end": "2388000"
  },
  {
    "text": "accounts with im roles that are scoped to your services needs there are a few new cool tools in the",
    "start": "2388000",
    "end": "2393200"
  },
  {
    "text": "platform that have been released to assist you in understanding who has access to your service accounts",
    "start": "2393200",
    "end": "2398480"
  },
  {
    "text": "such as the im analyzer which can also be really helpful for understanding im dependencies and access within your",
    "start": "2398480",
    "end": "2407039"
  },
  {
    "start": "2408000",
    "end": "2452000"
  },
  {
    "text": "environments",
    "start": "2408839",
    "end": "2411839"
  },
  {
    "text": "i remember my dreams",
    "start": "2418079",
    "end": "2425839"
  },
  {
    "text": "[Music] hey folks i just want to thank everybody",
    "start": "2426730",
    "end": "2432000"
  },
  {
    "text": "for watching our talk and i'll be posting a link in the live chat for folks who said they wanted to take",
    "start": "2432000",
    "end": "2438560"
  },
  {
    "text": "notes and get a second viewing",
    "start": "2438560",
    "end": "2444640"
  },
  {
    "text": "yeah thanks for watching and hope you enjoyed it and we're able to learn something",
    "start": "2445920",
    "end": "2453839"
  }
]