[
  {
    "start": "0",
    "end": "62000"
  },
  {
    "text": "[Music]",
    "start": "1130",
    "end": "13920"
  },
  {
    "text": "hello everyone so thank you for being here uh welcome to this virtual talk about graybox program synthesis",
    "start": "13920",
    "end": "21439"
  },
  {
    "text": "um [Music] so just few words about me i'm robin david i'm a software security engineer",
    "start": "21439",
    "end": "27599"
  },
  {
    "text": "at quarks lab a french cyber security company and i'm working on obfuscation and",
    "start": "27599",
    "end": "33440"
  },
  {
    "text": "especially the obfuscations and many ways to automate bug discovery",
    "start": "33440",
    "end": "39920"
  },
  {
    "text": "okay so what is the agenda of today i'm first going to get some definitions about obfuscation and synthesis",
    "start": "39920",
    "end": "46879"
  },
  {
    "text": "then i'm going to describe our gray box synthesis algorithms that we use for the obfuscations",
    "start": "46879",
    "end": "53360"
  },
  {
    "text": "and then i'm going to describe the implementations and the use cases on which we applied",
    "start": "53360",
    "end": "60640"
  },
  {
    "text": "this approach okay let's jump straight to obfuscation",
    "start": "60640",
    "end": "67200"
  },
  {
    "start": "62000",
    "end": "308000"
  },
  {
    "text": "what is obfuscation we usually refer it to the the means of transforming a program into a",
    "start": "67200",
    "end": "73680"
  },
  {
    "text": "semantically equivalent program but which is meant to be harder to understand",
    "start": "73680",
    "end": "79840"
  },
  {
    "text": "why we do that mostly to protect intellectual property so we do find a presentation also in",
    "start": "79840",
    "end": "86320"
  },
  {
    "text": "malware but most of the time uh we find it in",
    "start": "86320",
    "end": "91840"
  },
  {
    "text": "mobile applications softwares from completely legitimate companies and so on so",
    "start": "91840",
    "end": "98960"
  },
  {
    "text": "we less often see it in malware so how we do that",
    "start": "98960",
    "end": "104720"
  },
  {
    "text": "so the idea is to within the program you want to protect the valuable assets",
    "start": "104720",
    "end": "110000"
  },
  {
    "text": "and what are the valuable assets in the program usually it's the program logics or the algorithms",
    "start": "110000",
    "end": "117040"
  },
  {
    "text": "or the data the data can be strings constant although all these kind of things",
    "start": "117040",
    "end": "123360"
  },
  {
    "text": "so we usually uh separate obfuscation into three categories the",
    "start": "124000",
    "end": "130959"
  },
  {
    "text": "first one is the control flow observations where the goal is to hide the logic the",
    "start": "130959",
    "end": "136879"
  },
  {
    "text": "logic of the flow of execution so at the bottom you see a small cfg of",
    "start": "136879",
    "end": "142480"
  },
  {
    "text": "functions and on the right the obfuscated versions of the exact same functions",
    "start": "142480",
    "end": "148319"
  },
  {
    "text": "so there's plenty of applications for doing so like virtualization flattening or pack predicates and so on",
    "start": "148319",
    "end": "156160"
  },
  {
    "text": "and otherwise you have the second category which is data flow applications which aims at adding",
    "start": "156160",
    "end": "162640"
  },
  {
    "text": "constant strings keys and so on and for that there is also plenty of",
    "start": "162640",
    "end": "168080"
  },
  {
    "text": "different obfuscation techniques like data encoding mba that we are going to discuss white",
    "start": "168080",
    "end": "173440"
  },
  {
    "text": "boxes encoding and so on",
    "start": "173440",
    "end": "177840"
  },
  {
    "text": "so in this talk we are going to focus on data obfuscations and more especially on mba which is mixed boolean arithmetic",
    "start": "179120",
    "end": "187680"
  },
  {
    "text": "what is mixed boolean arithmetic is the mean of scrambling expressions using",
    "start": "187680",
    "end": "194720"
  },
  {
    "text": "so bitwise operators like xor and r and so on and arithmetic operators like plus",
    "start": "194720",
    "end": "201200"
  },
  {
    "text": "minus and so on so here is the so we have a small a plus b expression",
    "start": "201200",
    "end": "207680"
  },
  {
    "text": "uh and on sophisticated we transform it with a semantically equivalent",
    "start": "207680",
    "end": "212879"
  },
  {
    "text": "expressions but that is more difficult to understand so the questions from a reverse",
    "start": "212879",
    "end": "218959"
  },
  {
    "text": "engineering point of view is how do we get back the original expressions",
    "start": "218959",
    "end": "224560"
  },
  {
    "text": "and that is the difficult questions because unlike control flow obfuscations the the answer",
    "start": "224560",
    "end": "231200"
  },
  {
    "text": "is not boolean uh with control flow observations you sometimes want to negate branches make",
    "start": "231200",
    "end": "238080"
  },
  {
    "text": "sure uh check that some of them are dead or so on but here you really want to recover",
    "start": "238080",
    "end": "244400"
  },
  {
    "text": "the original expression and that is difficult so",
    "start": "244400",
    "end": "250239"
  },
  {
    "text": "obfuscations yields two distinct research problem the first one is",
    "start": "250239",
    "end": "257040"
  },
  {
    "text": "locating the data that you want to deficit and that's highly dependent on the",
    "start": "257040",
    "end": "262479"
  },
  {
    "text": "targets that you are looking at what you are looking for into the programs what you want to attack or",
    "start": "262479",
    "end": "269280"
  },
  {
    "text": "retrieve so this is mostly manual and this is also distinct for each target",
    "start": "269280",
    "end": "277280"
  },
  {
    "text": "and the second problems when you're the obfuscating programs it's the the deal fiscation itself so you",
    "start": "277280",
    "end": "284240"
  },
  {
    "text": "it's um once you've found found uh the data that you want to diffuse get so how",
    "start": "284240",
    "end": "290880"
  },
  {
    "text": "do you deal with this kit do you have to skate it and synthesis in a only address this",
    "start": "290880",
    "end": "296080"
  },
  {
    "text": "second issue so you first have to find the data register or memory that you",
    "start": "296080",
    "end": "301759"
  },
  {
    "text": "want to duplicate so i wanted to highlight these two different issues in the obfuscation",
    "start": "301759",
    "end": "309840"
  },
  {
    "start": "308000",
    "end": "517000"
  },
  {
    "text": "now i'm going to describe what is synthesis so synthesis is the mean of",
    "start": "309840",
    "end": "315840"
  },
  {
    "text": "deriving creating a program given high level specifications and some additional",
    "start": "315840",
    "end": "322160"
  },
  {
    "text": "constraints over it for combination it can be faster program",
    "start": "322160",
    "end": "327199"
  },
  {
    "text": "for the authentication it could be smaller or more readable program so",
    "start": "327199",
    "end": "333360"
  },
  {
    "text": "for program synthesis so you usually have a programming input and that program is the specifications it encodes",
    "start": "333360",
    "end": "340400"
  },
  {
    "text": "the semantic the behavior that you want to preserve throughout the synthesis",
    "start": "340400",
    "end": "345919"
  },
  {
    "text": "so you give it a synthesizer that optimizes some constraints like speed size or whatever",
    "start": "345919",
    "end": "353199"
  },
  {
    "text": "and then you obtain the new program which satisfy your specifications so semantic and the",
    "start": "353199",
    "end": "359440"
  },
  {
    "text": "constraints so there is two main use cases for program synthesis the",
    "start": "359440",
    "end": "366240"
  },
  {
    "text": "first one is optimizations and people doing opinion optimization with synthesis you usually call it",
    "start": "366240",
    "end": "372720"
  },
  {
    "text": "superior optimization and there's two nice works for that i",
    "start": "372720",
    "end": "378160"
  },
  {
    "text": "recommend the super work made by john reger and some folks",
    "start": "378160",
    "end": "383919"
  },
  {
    "text": "at google and also stock and but we are going to focus on the",
    "start": "383919",
    "end": "389440"
  },
  {
    "text": "observation in this talk but but as one might notice this is basically the same issue at the core",
    "start": "389440",
    "end": "396319"
  },
  {
    "text": "level you have a program and you want to make it more more small more efficient",
    "start": "396319",
    "end": "402080"
  },
  {
    "text": "so the you're basically solving the same issues um with both optimization and the obfuscation",
    "start": "402080",
    "end": "408560"
  },
  {
    "text": "okay so for the obfuscation through synthesis there is multiple approaches existing",
    "start": "408560",
    "end": "414639"
  },
  {
    "text": "templates stochastic search based enumerative and so on i'll give you a small uh overview of the",
    "start": "414639",
    "end": "423120"
  },
  {
    "text": "work that has been done in the past so the first works i've found about this",
    "start": "423120",
    "end": "428560"
  },
  {
    "text": "is the work performed by royal frauds um in 2014",
    "start": "428560",
    "end": "433680"
  },
  {
    "text": "is truly a pioneer in this field then there is the works by nino eros",
    "start": "433680",
    "end": "439520"
  },
  {
    "text": "which was at crosslab at that time about spam so spam is not truly synthesis it's more like patterns and",
    "start": "439520",
    "end": "446800"
  },
  {
    "text": "rewriting rules but yeah that's one of the first works targeting",
    "start": "446800",
    "end": "453440"
  },
  {
    "text": "um mbas and giving some implementations for for it",
    "start": "453440",
    "end": "459680"
  },
  {
    "text": "then in 2017 you have the work of cynthia that has been published at",
    "start": "459680",
    "end": "464960"
  },
  {
    "text": "usenix and they use the stochastic approach using monte carlo search tree i'm not going to describe that approach",
    "start": "464960",
    "end": "471199"
  },
  {
    "text": "but it does it's really interesting approach lately in 2020 we did published some",
    "start": "471199",
    "end": "479039"
  },
  {
    "text": "academic results in an academic venue about our approach that we called q",
    "start": "479039",
    "end": "484160"
  },
  {
    "text": "synth which is based on the name enumerative search",
    "start": "484160",
    "end": "490479"
  },
  {
    "text": "and lately this year there is some interest for mbas and synthesis so there",
    "start": "490479",
    "end": "497520"
  },
  {
    "text": "is more works that have been published in xintia msint which is basically the implementations",
    "start": "497520",
    "end": "503680"
  },
  {
    "text": "and implementation of kucints using miasma by the same people of cynthia",
    "start": "503680",
    "end": "509680"
  },
  {
    "text": "and loki which is more oriented than making obfuscation more resilient to",
    "start": "509680",
    "end": "515919"
  },
  {
    "text": "synthesis okay so what is gray box synthesis i'm",
    "start": "515919",
    "end": "521200"
  },
  {
    "start": "517000",
    "end": "752000"
  },
  {
    "text": "going to describe the algorithm so our approach um",
    "start": "521200",
    "end": "526560"
  },
  {
    "text": "use two components uh a symbolic executions and a synthesizer so the",
    "start": "526560",
    "end": "532320"
  },
  {
    "text": "basic workflow is that you have a program you execute it symbolically then you obtain some expressions that",
    "start": "532320",
    "end": "538880"
  },
  {
    "text": "you want to simplify you give it to the synthesizer and hopefully you obtain some synthesized expressions",
    "start": "538880",
    "end": "546000"
  },
  {
    "text": "so we only use symbolic execution as a mean to obtain some data from",
    "start": "546000",
    "end": "551040"
  },
  {
    "text": "expressions if you're able to retrieve uh expressions that comes from with a different approach that's",
    "start": "551040",
    "end": "557360"
  },
  {
    "text": "perfectly fine for us because this is not the main of the algorithms we just want to have",
    "start": "557360",
    "end": "563200"
  },
  {
    "text": "expressions that we want to simplify in practice we can we do our symbolic execution statically or dynamically on",
    "start": "563200",
    "end": "569920"
  },
  {
    "text": "the trace that works the same and so to give you a little overview of",
    "start": "569920",
    "end": "576640"
  },
  {
    "text": "how it works so here is a small mba at assembly level",
    "start": "576640",
    "end": "581680"
  },
  {
    "text": "if you execute it with a symbolic executor it will lift it to an intermediate representation",
    "start": "581680",
    "end": "588800"
  },
  {
    "text": "encoding the semantic and let's say that you want to have the area x5 at the end here",
    "start": "588800",
    "end": "595519"
  },
  {
    "text": "what you are going to obtain is an abstract syntax tree of",
    "start": "595519",
    "end": "600959"
  },
  {
    "text": "representing the area x5 value",
    "start": "600959",
    "end": "606160"
  },
  {
    "text": "at that location so",
    "start": "606160",
    "end": "611279"
  },
  {
    "text": "our graybox synthesizer takes asts of expression as input that's really the input of the synthesizer we",
    "start": "611279",
    "end": "618959"
  },
  {
    "text": "want you we have a huge st and we want to obtain something which is smaller",
    "start": "618959",
    "end": "624079"
  },
  {
    "text": "and it's based on two components the input output oracle which is our main contributions in terms",
    "start": "624079",
    "end": "631200"
  },
  {
    "text": "of synthesis so that's the black box components i'm going to describe it",
    "start": "631200",
    "end": "636399"
  },
  {
    "text": "and we also have the ast simplification algorithms which is the white box component",
    "start": "636399",
    "end": "641760"
  },
  {
    "text": "and so the id is the following you have your expressions you try to synthesize from the root node",
    "start": "641760",
    "end": "647839"
  },
  {
    "text": "if you do not does not succeed you're just going to iterate through the subnodes",
    "start": "647839",
    "end": "653040"
  },
  {
    "text": "trying to simplify opportunistically sub sub expressions",
    "start": "653040",
    "end": "658079"
  },
  {
    "text": "and that's why you are going to have in and outs between the black box oracle and the ast simplification algorithm",
    "start": "658079",
    "end": "665839"
  },
  {
    "text": "um so the black box purely black box approach when we say black box it's um",
    "start": "665839",
    "end": "671760"
  },
  {
    "text": "usually referring at the comparing the input and output behavior of the program",
    "start": "671760",
    "end": "678800"
  },
  {
    "text": "so you're not considering the semantics so that's a good thing when you're dealing",
    "start": "678800",
    "end": "684000"
  },
  {
    "text": "with obfuscations but you have a huge search space to to look for and the boolean is uh",
    "start": "684000",
    "end": "692079"
  },
  {
    "text": "the result is boolean because um either you synthesize it all at once or",
    "start": "692079",
    "end": "698399"
  },
  {
    "text": "it does not synthesis it at all and on the other hand when we refer to",
    "start": "698399",
    "end": "704240"
  },
  {
    "text": "the white white box aspects it works for symbolic execution fading and things like this",
    "start": "704240",
    "end": "709760"
  },
  {
    "text": "white box is manipulating the semantic of the expressions through",
    "start": "709760",
    "end": "714880"
  },
  {
    "text": "its syntactic representation which is usually the ir and in our context it means that you are",
    "start": "714880",
    "end": "722240"
  },
  {
    "text": "going to manipulate the ast itself and the expressions the operators that are have been are being",
    "start": "722240",
    "end": "728800"
  },
  {
    "text": "used and so on so the good point is that you consider the exact semantic",
    "start": "728800",
    "end": "735040"
  },
  {
    "text": "of the expressions but as we are dealing with obfuscation we are hindered by the syntactic",
    "start": "735040",
    "end": "741360"
  },
  {
    "text": "complexity of the expressions so balancing between the two is really",
    "start": "741360",
    "end": "747279"
  },
  {
    "text": "um a good choice from our point of view",
    "start": "747279",
    "end": "752560"
  },
  {
    "start": "752000",
    "end": "1078000"
  },
  {
    "text": "so now i'm going to describe a bit the input output synthesis oracle so let's",
    "start": "752560",
    "end": "758720"
  },
  {
    "text": "consider here that you have a plus b an expression that is known and a black box for which you want to know",
    "start": "758720",
    "end": "765440"
  },
  {
    "text": "what is his behavior what you are going to do is to",
    "start": "765440",
    "end": "770560"
  },
  {
    "text": "generate some uh input vectors that give some valuation for a and b and you're going to",
    "start": "770560",
    "end": "776720"
  },
  {
    "text": "give them to the expressions you're going to evaluate the expressions with those inputs",
    "start": "776720",
    "end": "782959"
  },
  {
    "text": "and then you obtain an output vector and if at some point",
    "start": "782959",
    "end": "788240"
  },
  {
    "text": "the values are all the same what you can deduce is that um",
    "start": "788240",
    "end": "794160"
  },
  {
    "text": "the black box here is indeed doing an a plus b operation so that's the basic",
    "start": "794160",
    "end": "799760"
  },
  {
    "text": "idea behind black box input output synthesis",
    "start": "799760",
    "end": "804720"
  },
  {
    "text": "and what we do to perform some such computations",
    "start": "805200",
    "end": "810240"
  },
  {
    "text": "and this is the three-inch strength of our approach is that we are going to pre-compute",
    "start": "810240",
    "end": "817600"
  },
  {
    "text": "uh all the possible expressions if you can say so we take a grammar with some operators and variables and",
    "start": "817600",
    "end": "824639"
  },
  {
    "text": "what we are going to generate all the possible expressions up to a given bound of view obviously",
    "start": "824639",
    "end": "831199"
  },
  {
    "text": "and we are going to evaluate those expressions on the the input vector to obtain the output vector",
    "start": "831199",
    "end": "838160"
  },
  {
    "text": "and that gives us this mapping of output vector to the associated expressions",
    "start": "838160",
    "end": "844880"
  },
  {
    "text": "and so when you want to evaluate to perform the synthesis of a given black box here for instance you're going to",
    "start": "844880",
    "end": "851040"
  },
  {
    "text": "evaluate it you obtain the output vector and if you find it in our in your table",
    "start": "851040",
    "end": "857360"
  },
  {
    "text": "you know which expression it's encoding and so the strength here is that you",
    "start": "857360",
    "end": "862800"
  },
  {
    "text": "generate this table only once offline and then you're going to use it when you",
    "start": "862800",
    "end": "869680"
  },
  {
    "text": "are go you are synthesizing the perf the the output vector this",
    "start": "869680",
    "end": "875199"
  },
  {
    "text": "approach is basically unsound because if the vector is too small you might",
    "start": "875199",
    "end": "880240"
  },
  {
    "text": "miss some behaviors but you can also check the equivalence to make sure that you're synthesizing",
    "start": "880240",
    "end": "886240"
  },
  {
    "text": "something equivalent but the question here is",
    "start": "886240",
    "end": "891279"
  },
  {
    "text": "what happens if you cannot synthesize the root node and that this is where",
    "start": "891279",
    "end": "897360"
  },
  {
    "text": "the white box ast search is going to come into place and the idea of iterating through the",
    "start": "897360",
    "end": "904160"
  },
  {
    "text": "sub nodes is to be able to synthesize",
    "start": "904160",
    "end": "909279"
  },
  {
    "text": "obtain a partial synthesis of the expression and here is the the original strategy",
    "start": "909279",
    "end": "916480"
  },
  {
    "text": "that we've implemented so you we were in iterating the the st and",
    "start": "916480",
    "end": "921839"
  },
  {
    "text": "replacing things that we've been able to synthesize and at the end we substitute all of them",
    "start": "921839",
    "end": "927360"
  },
  {
    "text": "and we obtained the resulting [Music] de-obfuscated expressions",
    "start": "927360",
    "end": "933120"
  },
  {
    "text": "some of you might have noticed here that we have some complexity issues because we are restarting from the root node at",
    "start": "933120",
    "end": "939279"
  },
  {
    "text": "each iterations to iterate through the whole ast so on huge",
    "start": "939279",
    "end": "944720"
  },
  {
    "text": "ast that might be kind of complicated",
    "start": "944720",
    "end": "949680"
  },
  {
    "text": "we also experimented a few other strategies that was fixing those",
    "start": "950000",
    "end": "955040"
  },
  {
    "text": "complexity issues so the first one was a top-down approach",
    "start": "955040",
    "end": "961680"
  },
  {
    "text": "where we ether it through the ast only once so it's like a divide and conquer and as we go we simplify the nodes that",
    "start": "961680",
    "end": "969120"
  },
  {
    "text": "we are able to to synthesize it's not the optimal um algorithm but",
    "start": "969120",
    "end": "975279"
  },
  {
    "text": "this is the fastest and then we had the top down and bottom up approach which was also replacing",
    "start": "975279",
    "end": "981600"
  },
  {
    "text": "with placeholder variables so v1 was the placeholders and you do it recursively",
    "start": "981600",
    "end": "987360"
  },
  {
    "text": "so the algorithm is more efficient and you obtain something which is more",
    "start": "987360",
    "end": "993120"
  },
  {
    "text": "smaller than the simple divide and conquer algorithm so we experimented with all these",
    "start": "993120",
    "end": "999519"
  },
  {
    "text": "strategies there's probably others to to implement",
    "start": "999519",
    "end": "1005600"
  },
  {
    "text": "and the questions that we we had in mind is how much how many",
    "start": "1006480",
    "end": "1011680"
  },
  {
    "text": "sub expressions we were able to synthesize on the whole big ast and so we made a small",
    "start": "1011680",
    "end": "1018320"
  },
  {
    "text": "visualization of the algorithms to to look at it and as you can see even though you're",
    "start": "1018320",
    "end": "1023360"
  },
  {
    "text": "not we are not able to synthesize the whole ast at least we are able to synthesize",
    "start": "1023360",
    "end": "1028558"
  },
  {
    "text": "many many uh sub expressions within this big asd",
    "start": "1028559",
    "end": "1034720"
  },
  {
    "text": "and that this is where the gray box combinations helps",
    "start": "1034720",
    "end": "1041280"
  },
  {
    "text": "synthesizing expressions",
    "start": "1041280",
    "end": "1045120"
  },
  {
    "text": "we have some other examples here here are the top left you have like uh",
    "start": "1047120",
    "end": "1052799"
  },
  {
    "text": "ns ast which is uh something like uh hundred thousands of nodes big",
    "start": "1052799",
    "end": "1059600"
  },
  {
    "text": "and as you can see we are able to synthesize many at many locations and we reduce its size",
    "start": "1059600",
    "end": "1065280"
  },
  {
    "text": "like significantly",
    "start": "1065280",
    "end": "1069679"
  },
  {
    "text": "and here is the result as a graphics okay so",
    "start": "1075360",
    "end": "1080400"
  },
  {
    "start": "1078000",
    "end": "1372000"
  },
  {
    "text": "now i'd just like to discuss the table generation process which is also a critical part of our",
    "start": "1080400",
    "end": "1087120"
  },
  {
    "text": "uh algorithm so when you do generate all those tables you have to evaluate millions of",
    "start": "1087120",
    "end": "1093360"
  },
  {
    "text": "expressions in order to create this mapping from outputs to expressions",
    "start": "1093360",
    "end": "1099520"
  },
  {
    "text": "so what we did is two [Music] interesting thing is memorizations of the intermediate values so",
    "start": "1099520",
    "end": "1106720"
  },
  {
    "text": "for instance a plus b will be only evaluated once and then the result will be recombined",
    "start": "1106720",
    "end": "1112960"
  },
  {
    "text": "with all the other operators and expressions to to improve it but we kept keep it in",
    "start": "1112960",
    "end": "1119760"
  },
  {
    "text": "memory and we're also using jiting to evaluate the expressions at native speed",
    "start": "1119760",
    "end": "1126480"
  },
  {
    "text": "because our implementation is in python but all the evaluation is made in c",
    "start": "1126480",
    "end": "1131919"
  },
  {
    "text": "so what we have been able to reach is like 25 000 expressions per seconds in terms of throughput",
    "start": "1131919",
    "end": "1138960"
  },
  {
    "text": "and we now have tables of 375 million entries which is",
    "start": "1138960",
    "end": "1145440"
  },
  {
    "text": "kind of satisfying um where does we store them",
    "start": "1145440",
    "end": "1152320"
  },
  {
    "text": "at the beginning we were using pickle files uh one year ago but",
    "start": "1152320",
    "end": "1157440"
  },
  {
    "text": "it's only works for like one million entries um because it takes time to to deserialize",
    "start": "1157440",
    "end": "1164880"
  },
  {
    "text": "a pickle object so it was not sufficient then we tried like a relational model",
    "start": "1164880",
    "end": "1173039"
  },
  {
    "text": "of database but we either have the insertions or the lookup to be linear in the number of",
    "start": "1173039",
    "end": "1180559"
  },
  {
    "text": "entries so when you have millions and millions of entries it does not work so we ended up using leveldb which is a",
    "start": "1180559",
    "end": "1188240"
  },
  {
    "text": "key value database made by google and that's working like a charm",
    "start": "1188240",
    "end": "1193679"
  },
  {
    "text": "and that ensures um logarithmic lookup and that's really that was a constraint that we wanted to",
    "start": "1193679",
    "end": "1200240"
  },
  {
    "text": "make sure to have and we have so the lookup in db here is like",
    "start": "1200240",
    "end": "1208240"
  },
  {
    "text": "um in average like 122 microseconds and if you realize that's really the",
    "start": "1208240",
    "end": "1216320"
  },
  {
    "text": "the synthesis time the the input the so you compute the output vector and the synthesis time is only",
    "start": "1216320",
    "end": "1222640"
  },
  {
    "text": "like 100 microseconds um",
    "start": "1222640",
    "end": "1228880"
  },
  {
    "text": "then you make we made some experiments to try improving the [Music] representativity of tables that we were",
    "start": "1228880",
    "end": "1236000"
  },
  {
    "text": "generating and as mixing variables with operators is",
    "start": "1236000",
    "end": "1241280"
  },
  {
    "text": "really done in a combinatorial way",
    "start": "1241280",
    "end": "1246559"
  },
  {
    "text": "sometimes expressions generated and are not optimal and so here you can see",
    "start": "1246559",
    "end": "1252400"
  },
  {
    "text": "the kind of operation expressions that we do generate and we tried using simpy to perform some",
    "start": "1252400",
    "end": "1259360"
  },
  {
    "text": "linearizations of equation of expressions and what we obtain is the things on the right",
    "start": "1259360",
    "end": "1265360"
  },
  {
    "text": "so that's really great to further improve the size of expressions but",
    "start": "1265360",
    "end": "1271600"
  },
  {
    "text": "it completely kills the generation performances and it has some other issues that makes it very difficult to",
    "start": "1271600",
    "end": "1278559"
  },
  {
    "text": "use it in practice so in practice we don't use it unfortunately",
    "start": "1278559",
    "end": "1283760"
  },
  {
    "text": "but that was a good trial the second thing that we do",
    "start": "1283760",
    "end": "1288880"
  },
  {
    "text": "is expression learning and that was based on some weird uh",
    "start": "1288880",
    "end": "1294960"
  },
  {
    "text": "observations that we made during our experiment sometimes we were giving the synthesizer",
    "start": "1294960",
    "end": "1300720"
  },
  {
    "text": "and expressions on what was coming out is an expressions which was bigger than",
    "start": "1300720",
    "end": "1306240"
  },
  {
    "text": "the input one so we were like what the what the is going on",
    "start": "1306240",
    "end": "1311280"
  },
  {
    "text": "so when we looked at uh at these expressions it was actually",
    "start": "1311280",
    "end": "1316880"
  },
  {
    "text": "expressions involving things that were not in our tables so mostly constant",
    "start": "1316880",
    "end": "1324080"
  },
  {
    "text": "so this was our inputs and this was our outputs",
    "start": "1324080",
    "end": "1329840"
  },
  {
    "text": "so what we can do with that is basically we can update the table with the new expression",
    "start": "1330840",
    "end": "1337919"
  },
  {
    "text": "that we have just learned so we have not been able to synthesize the expressions but at least we have improved our table that improve constant",
    "start": "1337919",
    "end": "1346000"
  },
  {
    "text": "uh and did mean that over time tables can theoretically",
    "start": "1346000",
    "end": "1351520"
  },
  {
    "text": "become better and better so that's great and by the way it's for like generic",
    "start": "1351520",
    "end": "1358559"
  },
  {
    "text": "constant like one and so on we now introduce them in our table generation process but",
    "start": "1358559",
    "end": "1364720"
  },
  {
    "text": "um we cannot animate all the constants so we we still can learn the new expression",
    "start": "1364720",
    "end": "1374159"
  },
  {
    "start": "1372000",
    "end": "1473000"
  },
  {
    "text": "so let's talk about benchmarks so these were these were are the benchmark that",
    "start": "1374159",
    "end": "1380320"
  },
  {
    "text": "we did um for academic publications we",
    "start": "1380320",
    "end": "1386000"
  },
  {
    "text": "targeted the binaries sophisticated with tigress and we did compared against ctf",
    "start": "1386000",
    "end": "1391679"
  },
  {
    "text": "against which we had like really good result and since then",
    "start": "1391679",
    "end": "1398000"
  },
  {
    "text": "we kept improving our algorithm and implementations so",
    "start": "1398000",
    "end": "1404960"
  },
  {
    "text": "we still use the four data sets which are available online um",
    "start": "1405360",
    "end": "1410799"
  },
  {
    "text": "we used so ea is encode arithmetic so it's basically mbas we also mixed",
    "start": "1410799",
    "end": "1417240"
  },
  {
    "text": "virtualizations and mbas and on mbas and encode data which are",
    "start": "1417240",
    "end": "1423440"
  },
  {
    "text": "all uh tigress transformations and so we have four benchmarks",
    "start": "1423440",
    "end": "1428720"
  },
  {
    "text": "the first line is the paper results and as you can see we kept improving things",
    "start": "1428720",
    "end": "1434000"
  },
  {
    "text": "over time and now we really have good even better if you can say results",
    "start": "1434000",
    "end": "1441279"
  },
  {
    "text": "for instance on the last data sets we obtained like 90 percent improvements in terms of",
    "start": "1441279",
    "end": "1447279"
  },
  {
    "text": "exp synthesized expression size and in terms of speed",
    "start": "1447279",
    "end": "1453600"
  },
  {
    "text": "for some of them we have like up to 67 persons improvements i think it's the",
    "start": "1453600",
    "end": "1458799"
  },
  {
    "text": "second one here we we turn to two minutes 49 seconds to",
    "start": "1458799",
    "end": "1464080"
  },
  {
    "text": "55 seconds so that's great and here we are talking about like 500 obfuscated expressions to",
    "start": "1464080",
    "end": "1471600"
  },
  {
    "text": "the of skate implementations we implemented that into",
    "start": "1471600",
    "end": "1477760"
  },
  {
    "start": "1473000",
    "end": "1718000"
  },
  {
    "text": "the q synthesis utility which is our own implementations that we are releasing for",
    "start": "1477760",
    "end": "1484720"
  },
  {
    "text": "this talk q synthesis is based on multiple order",
    "start": "1484720",
    "end": "1490799"
  },
  {
    "text": "frameworks um the most significant one is triton which is doing the symbolic executions for us",
    "start": "1490799",
    "end": "1497919"
  },
  {
    "text": "we also integrated it into trace which uh which is our own time travel debugger",
    "start": "1497919",
    "end": "1503600"
  },
  {
    "text": "that we use internally at quarks lab um which is unfortunately not open source at the moment",
    "start": "1503600",
    "end": "1510480"
  },
  {
    "text": "and as i already mentioned we use dragon ffe which is also developed at quartzlab for the editing of expressions we use",
    "start": "1510480",
    "end": "1517039"
  },
  {
    "text": "leveldb for the storage we also integrated q synthesis to ida",
    "start": "1517039",
    "end": "1523120"
  },
  {
    "text": "pro we use fastappy to serve the tables to be able to perform some lookups as",
    "start": "1523120",
    "end": "1529360"
  },
  {
    "text": "with a rest api and i did not mentioned it explicitly but what we wanted to have is",
    "start": "1529360",
    "end": "1536880"
  },
  {
    "text": "once you have the obfuscated expression you want to have like to re-obtained uh",
    "start": "1536880",
    "end": "1543120"
  },
  {
    "text": "the final code executable code and for that we use arribo which is also developed quarks lab which is open",
    "start": "1543120",
    "end": "1549279"
  },
  {
    "text": "source and that takes inputs triton expressions translate them to llvm and through lvm",
    "start": "1549279",
    "end": "1557039"
  },
  {
    "text": "lite we are able to recompile the the obfuscated expressions",
    "start": "1557039",
    "end": "1563440"
  },
  {
    "text": "and then i'm going to show you the integrations into ida that we've performed so it will",
    "start": "1564480",
    "end": "1570320"
  },
  {
    "text": "give you a great overview of how all that works",
    "start": "1570320",
    "end": "1575278"
  },
  {
    "text": "so here we have a small functions which is basically a mba that we want to simplify",
    "start": "1575760",
    "end": "1583200"
  },
  {
    "text": "we are going to load launch queue synthesis and we are going to has to synthesize",
    "start": "1583200",
    "end": "1588720"
  },
  {
    "text": "from here uh to the end of the basic block we ask here to synthesize the register array x",
    "start": "1588720",
    "end": "1599480"
  },
  {
    "text": "we are going to load the tables that we want to use",
    "start": "1600240",
    "end": "1605679"
  },
  {
    "text": "then we just run triton the symbolic execution to obtain the expressions so here the expression is 124 nodes",
    "start": "1606080",
    "end": "1614159"
  },
  {
    "text": "big and contains three different inputs like rdi rcx and rdx",
    "start": "1614159",
    "end": "1619840"
  },
  {
    "text": "we can highlight the dependencies to and we can see here that all the instructions are involved in the",
    "start": "1619840",
    "end": "1626080"
  },
  {
    "text": "computations of the array x value at the end we can look at the ast that we obtained",
    "start": "1626080",
    "end": "1634158"
  },
  {
    "text": "which is not that big actually and then we just have to run the synthesis and that's almost instant here",
    "start": "1635440",
    "end": "1642240"
  },
  {
    "text": "you can see that this is the resulting expressions uh we reduce this size by 92",
    "start": "1642240",
    "end": "1647440"
  },
  {
    "text": "percent and we can visualize the asd",
    "start": "1647440",
    "end": "1654200"
  },
  {
    "text": "which is kind of small and so what we want to do here is basically we want to",
    "start": "1654880",
    "end": "1660260"
  },
  {
    "text": "[Music] to reassemble the expericated expressions back to assembly",
    "start": "1660260",
    "end": "1666000"
  },
  {
    "text": "and this is exactly what we are going to do here so we are going to call arribo which is going to call llvm lite which is a",
    "start": "1666000",
    "end": "1673120"
  },
  {
    "text": "binding for llvm so we recompile the expressions and we obtain",
    "start": "1673120",
    "end": "1678159"
  },
  {
    "text": "compiled code so here we are going to patch the function bytes shrink the functions because it's only in a single basic",
    "start": "1678159",
    "end": "1684640"
  },
  {
    "text": "block and we can do it",
    "start": "1684640",
    "end": "1687679"
  },
  {
    "text": "and there it is we just patched back the instructions only the instructions that are involved in the",
    "start": "1692000",
    "end": "1699200"
  },
  {
    "text": "computation so we keep the prologue and ep log and here you can see",
    "start": "1699200",
    "end": "1705440"
  },
  {
    "text": "the expressions with the xor add and we charge the difficulty the expression",
    "start": "1705440",
    "end": "1713200"
  },
  {
    "text": "so that was for the demo um showing you how how do we do use it",
    "start": "1713200",
    "end": "1719600"
  },
  {
    "start": "1718000",
    "end": "2035000"
  },
  {
    "text": "and now we are going to discuss the use cases on which we are we tried",
    "start": "1719600",
    "end": "1724960"
  },
  {
    "text": "uh our implementation so we first tried on yanzo llvm which is",
    "start": "1724960",
    "end": "1730960"
  },
  {
    "text": "an obfuscator llvm derivatives that was published last year and that is actually",
    "start": "1730960",
    "end": "1736480"
  },
  {
    "text": "really a decent obfuscator the obfuscations are kind of great",
    "start": "1736480",
    "end": "1742559"
  },
  {
    "text": "there's multiple of them and but we are going to focus on the vm and the obfuscate constants",
    "start": "1742559",
    "end": "1750000"
  },
  {
    "text": "so the vm is basically going to replace um arithmetic operations and bitwise",
    "start": "1750000",
    "end": "1755679"
  },
  {
    "text": "operations with calls to functions that are going to do them so you can see here",
    "start": "1755679",
    "end": "1760720"
  },
  {
    "text": "the the handler for the ad and for synthesis is like almost instant",
    "start": "1760720",
    "end": "1766960"
  },
  {
    "text": "in this case we can just synthesize it and what we obtained in our case is the functions which is basically",
    "start": "1766960",
    "end": "1773760"
  },
  {
    "text": "uh le rex rci plus rdi and red so yeah that's pretty straightforward",
    "start": "1773760",
    "end": "1781440"
  },
  {
    "text": "for the synthesizer they use multiple mbas and they also use",
    "start": "1781440",
    "end": "1788720"
  },
  {
    "text": "mbas to obfuscate constant and so i would like to give some precisions",
    "start": "1788720",
    "end": "1795279"
  },
  {
    "text": "on constant so there is two two two cases uh either you have expressions that are using",
    "start": "1795279",
    "end": "1801760"
  },
  {
    "text": "constant like a and that beef uh we cannot synthesize such expressions",
    "start": "1801760",
    "end": "1807600"
  },
  {
    "text": "unless you have this ex this constant in your in your tables",
    "start": "1807600",
    "end": "1813120"
  },
  {
    "text": "but as you cannot enumerate all the possible constants you probably don't have this constant and you're not going",
    "start": "1813120",
    "end": "1819039"
  },
  {
    "text": "to be able to synthesize the expressions once it's diversified",
    "start": "1819039",
    "end": "1824640"
  },
  {
    "text": "but what we can do is that we can synthesize constants themselves",
    "start": "1824640",
    "end": "1830480"
  },
  {
    "text": "so opaque constant is going to take a constant and to introduce some spurious variables and",
    "start": "1830480",
    "end": "1837360"
  },
  {
    "text": "perform some mbas and to compute the the constant but that we can synthesize it",
    "start": "1837360",
    "end": "1845120"
  },
  {
    "text": "and this is a small example that we have generated through yarns or lvm",
    "start": "1845120",
    "end": "1851679"
  },
  {
    "text": "and the idea from a synthesis point of view is that you take the expression if you evaluate",
    "start": "1851679",
    "end": "1858399"
  },
  {
    "text": "it on all the inputs and you always obtain the same output it means that the",
    "start": "1858399",
    "end": "1864080"
  },
  {
    "text": "inputs does not performs any modifications on the resulting value",
    "start": "1864080",
    "end": "1871120"
  },
  {
    "text": "and that means that they are not used and that you are basically encoding a constant",
    "start": "1871120",
    "end": "1878840"
  },
  {
    "text": "so in during the synthesis process if the output happens to be always the same for",
    "start": "1879039",
    "end": "1884960"
  },
  {
    "text": "all the inputs we know that we are on a constant and we can just evaluate it to obtain the associated constant",
    "start": "1884960",
    "end": "1893360"
  },
  {
    "text": "in this case it's just zero and the second use case that we've looked at is uh",
    "start": "1893360",
    "end": "1900080"
  },
  {
    "text": "the windows kernel and especially some patchwork functions",
    "start": "1900080",
    "end": "1905120"
  },
  {
    "text": "so these those functions in the kernel are known to be obfuscated with a framework",
    "start": "1905120",
    "end": "1912399"
  },
  {
    "text": "called warbird so i've not looked into details into into that but",
    "start": "1912399",
    "end": "1918320"
  },
  {
    "text": "it's a colleague pinpointing me that does this function and i'm i've looked at the code on it",
    "start": "1918320",
    "end": "1924240"
  },
  {
    "text": "it's true that it seems to contain like uh weird arithmetic operations",
    "start": "1924240",
    "end": "1929600"
  },
  {
    "text": "that could probably be simplified i don't know whether it's mba",
    "start": "1929600",
    "end": "1935919"
  },
  {
    "text": "or or not but but we can do a few things about this",
    "start": "1935919",
    "end": "1942960"
  },
  {
    "text": "and here is a small example of the result in the ida plugin",
    "start": "1942960",
    "end": "1949279"
  },
  {
    "text": "so we executed some this basic block for instance which was yielding this ast and we were",
    "start": "1949279",
    "end": "1955840"
  },
  {
    "text": "able to synthesize it to something smaller which the resulting assembly is the",
    "start": "1955840",
    "end": "1962159"
  },
  {
    "text": "following so i've not looked that much into details but um i recommend you to",
    "start": "1962159",
    "end": "1969440"
  },
  {
    "text": "to look at the two links that are on the slide if you want to know more about this obfuscator",
    "start": "1969440",
    "end": "1976679"
  },
  {
    "text": "and then the last use case that we've looked at is some messaging application",
    "start": "1977279",
    "end": "1983840"
  },
  {
    "text": "that are being used by youngsters mostly to send ephemeral",
    "start": "1983840",
    "end": "1990080"
  },
  {
    "text": "messages and it does contain the lots of mbas and that's good for us and we can try to",
    "start": "1990080",
    "end": "1996640"
  },
  {
    "text": "rejuvenate them and actually so here is a small example",
    "start": "1996640",
    "end": "2002640"
  },
  {
    "text": "for arm 64 where it generates like a huge ast with",
    "start": "2002640",
    "end": "2009600"
  },
  {
    "text": "5000 nodes with one inputs and it's actually",
    "start": "2009600",
    "end": "2015039"
  },
  {
    "text": "encoding a constant like 0x 0x7 b2 so we are kind of happy with that",
    "start": "2015039",
    "end": "2022480"
  },
  {
    "text": "we've been able to synthesize multiple of them um but yeah once again it would require",
    "start": "2022480",
    "end": "2028799"
  },
  {
    "text": "like a more in-depth uh research to to know what these mbas were used for",
    "start": "2028799",
    "end": "2037278"
  },
  {
    "start": "2035000",
    "end": "2160000"
  },
  {
    "text": "okay uh quick conclusions so our grey box algorithms it's like a good balance",
    "start": "2037360",
    "end": "2042799"
  },
  {
    "text": "between the black box and white box aspect because we can opportunistically",
    "start": "2042799",
    "end": "2047840"
  },
  {
    "text": "synthesize sub-expressions while pure black box cannot",
    "start": "2047840",
    "end": "2052960"
  },
  {
    "text": "we still have issues that most approaches have like to target the",
    "start": "2053200",
    "end": "2058320"
  },
  {
    "text": "expressions using constant but we do have ideas on how to",
    "start": "2058320",
    "end": "2063919"
  },
  {
    "text": "to address them um and as takeaways so breaking",
    "start": "2063919",
    "end": "2069760"
  },
  {
    "text": "notification is still crucial it's still the first step that you have to do before",
    "start": "2069760",
    "end": "2075118"
  },
  {
    "text": "doing further reversing um synthesis only address a certain part",
    "start": "2075119",
    "end": "2081520"
  },
  {
    "text": "of the division process mean meaning that it's able to synthesize to simplify",
    "start": "2081520",
    "end": "2087440"
  },
  {
    "text": "expressions once you've located them into the program so you first have to solve the first issue which is",
    "start": "2087440",
    "end": "2093839"
  },
  {
    "text": "finding what you want to diffuse within the program and that's always the most difficult part",
    "start": "2093839",
    "end": "2102000"
  },
  {
    "text": "we also use it to synthesis to assess our horn of the skeleton which is called quarksep shield",
    "start": "2102000",
    "end": "2108000"
  },
  {
    "text": "and that allows us to continuously improve it to make sure it's the obfuscation we generate is resilient",
    "start": "2108000",
    "end": "2116320"
  },
  {
    "text": "and of the like like usual uh what makes a notification post potent is",
    "start": "2116320",
    "end": "2122480"
  },
  {
    "text": "carefully mixing it with other transformations an mba taken alone can usually be broken",
    "start": "2122480",
    "end": "2131839"
  },
  {
    "text": "and last i would just want to do some acknowledgement to luigi coniglio kickstarted that approach in our dynamic",
    "start": "2131920",
    "end": "2138400"
  },
  {
    "text": "tracing framework and jonathan sarwan then with whom we tweaked",
    "start": "2138400",
    "end": "2143599"
  },
  {
    "text": "to to make it more efficient on this kind of use cases and that's all for me",
    "start": "2143599",
    "end": "2150400"
  },
  {
    "text": "if you have any questions does not hesitate to to ask feel free to ping me i would be happy to",
    "start": "2150400",
    "end": "2155920"
  },
  {
    "text": "answer any of your questions so thank you very much",
    "start": "2155920",
    "end": "2161880"
  }
]