[
  {
    "start": "0",
    "end": "32000"
  },
  {
    "text": "this talk is the memory sinkhole unleashing an x86 design flaw allowing",
    "start": "120",
    "end": "5680"
  },
  {
    "text": "for Universal privilege escalation with our speaker Christopher",
    "start": "5680",
    "end": "11120"
  },
  {
    "text": "domas",
    "start": "11120",
    "end": "14120"
  },
  {
    "text": "thanks all right uh good morning everyone thanks for coming out my name is Christopher domus I'm a cyber",
    "start": "16680",
    "end": "22000"
  },
  {
    "text": "security researcher at a group called The Batel Memorial Institute it's a pretty cool place to work gives me a chance to do a lot of research Into The",
    "start": "22000",
    "end": "28560"
  },
  {
    "text": "Fringe areas of cyber security that I wouldn't otherwise get to see but I what what I wanted to talk to you about today",
    "start": "28560",
    "end": "34239"
  },
  {
    "start": "32000",
    "end": "32000"
  },
  {
    "text": "is um something I've been tinkering with in my free time for the last couple of months it's actually an x86 architectural vulnerability that allows",
    "start": "34239",
    "end": "40920"
  },
  {
    "text": "privilege escalation it's been hidden on these processors for the last 20 years without anybody noticing it what it",
    "start": "40920",
    "end": "47039"
  },
  {
    "text": "effectively does is open up an entirely new class of exploits on these processors and I want to talk about",
    "start": "47039",
    "end": "52879"
  },
  {
    "start": "52000",
    "end": "52000"
  },
  {
    "text": "exactly how that's going to work but first I want to give a demonstration in order to sort of frame what we're going to see today so um this Dem is a little",
    "start": "52879",
    "end": "60480"
  },
  {
    "text": "bit risky so instead of doing this on my actual presentation laptop I've got this little Netbook over here I love doing this deep vulnerability research on",
    "start": "60480",
    "end": "67280"
  },
  {
    "text": "these netbooks because I can brick these things all day long and just not feel bad about it and just in case something",
    "start": "67280",
    "end": "72360"
  },
  {
    "text": "does go very bad um I've got an entire stack of backups here so we should be prepared so um so I'm sshed into this uh",
    "start": "72360",
    "end": "80880"
  },
  {
    "text": "into this Netbook that's the prompt that we uh see here and I'm just sshed in as some boring unprivileged user who can do",
    "start": "80880",
    "end": "87680"
  },
  {
    "text": "boring unprivileged things but one of the things a boring unprivileged user can do is they can run boring",
    "start": "87680",
    "end": "93320"
  },
  {
    "text": "unprivileged programs so I've got this simple little C program here that doesn't really do anything interesting",
    "start": "93320",
    "end": "99200"
  },
  {
    "text": "all it does is create a couple of 64-bit variables it's got this um sort of cluess here that I'll fix later on this",
    "start": "99200",
    "end": "105439"
  },
  {
    "text": "ensures that the process is going to be scheduled on core zero of the processor right now this exploit is only going to",
    "start": "105439",
    "end": "111119"
  },
  {
    "text": "work on core zero I can fix that later but then we do something very very simple we just sit in a loop for a",
    "start": "111119",
    "end": "116399"
  },
  {
    "text": "couple million iterations and all we do in this Loop is write the 64-bit value out to memory um read it back in from",
    "start": "116399",
    "end": "124000"
  },
  {
    "text": "memory into the processor registers and then write that back out to memory again we do that over and over and over again so this isn't row Hammer this is",
    "start": "124000",
    "end": "129920"
  },
  {
    "text": "literally just reading a 64-bit value under the processor registers um for a very very long time and after that's",
    "start": "129920",
    "end": "136200"
  },
  {
    "text": "done we're going to um exec B shell hoping that maybe um we cause something",
    "start": "136200",
    "end": "141640"
  },
  {
    "text": "to happen by using this magic 64-bit number so I'm going to go ahead and",
    "start": "141640",
    "end": "147080"
  },
  {
    "text": "compile this uh simple c pro here and one more time before I run this double",
    "start": "147080",
    "end": "152680"
  },
  {
    "text": "check who I am I am user right now then we're going to go ahead and run this little C program here and hopefully",
    "start": "152680",
    "end": "158400"
  },
  {
    "text": "maybe um something will actually happen so we run this and it sits in that Loop and it it didn't work we still have that",
    "start": "158400",
    "end": "165319"
  },
  {
    "text": "dollar sign which means if we check who I am I'm I'm still user so of course it",
    "start": "165319",
    "end": "170879"
  },
  {
    "text": "didn't work uh you can't escalate privileges by loading a 64-bit number into the processor registers um that's",
    "start": "170879",
    "end": "176879"
  },
  {
    "text": "kind of silly but um maybe maybe you can um maybe if we find the right 64-bit",
    "start": "176879",
    "end": "183400"
  },
  {
    "text": "number uh we can do that so I'm going to change that last three in the 64-bit number it's going to become a four um",
    "start": "183400",
    "end": "189360"
  },
  {
    "text": "instead and we're going to retry um this attack we'll recompile the program one more time verify that we're just",
    "start": "189360",
    "end": "195680"
  },
  {
    "text": "user and run the program and all of a sudden something",
    "start": "195680",
    "end": "202159"
  },
  {
    "text": "changed um so we're going to spend the rest of the hour figuring out how this thing works um but I got to warn you",
    "start": "206080",
    "end": "212560"
  },
  {
    "text": "it's it's flashier than it actually seems there is absolutely nothing special about that 64bit value if you",
    "start": "212560",
    "end": "218400"
  },
  {
    "text": "run this exact same code on your computers absolutely nothing will happen exactly as you would expect um all that",
    "start": "218400",
    "end": "224360"
  },
  {
    "text": "64-bit number really was was a signal to something running much much deeper on",
    "start": "224360",
    "end": "229640"
  },
  {
    "text": "the processor it was something running so deep that our process couldn't see it in fact even the kernel running in ring",
    "start": "229640",
    "end": "234799"
  },
  {
    "text": "zero couldn't see the piece of code that just gave us that rot access in fact you could this system apart to the last",
    "start": "234799",
    "end": "241040"
  },
  {
    "text": "piece and do a forensic analysis on here and not be able to see the piece of code that just gave us that root access so",
    "start": "241040",
    "end": "247760"
  },
  {
    "text": "what we're really going to find out is exactly how to get something running so deeply on the processor that nothing else can see it there what we're going",
    "start": "247760",
    "end": "254840"
  },
  {
    "text": "to see today is an architectural solution for ring minus 2 privilege escalation so in order to understand how",
    "start": "254840",
    "end": "261120"
  },
  {
    "text": "this work we need we need a little bit of background information on the x86 privilege model so x86 divides privilege",
    "start": "261120",
    "end": "266639"
  },
  {
    "text": "into different rings so at the top is ring three where we really can't do anything useful that's where all our user land code runs inside of ring three",
    "start": "266639",
    "end": "273800"
  },
  {
    "text": "just doing boring uninteresting things we've got ring two and ring one below that nobody really uses those anymore",
    "start": "273800",
    "end": "278960"
  },
  {
    "text": "but ring zero is where the real magic happens where the kernel lives that's where we can finally start doing some interesting things on the processor and",
    "start": "278960",
    "end": "285320"
  },
  {
    "text": "usually if you want to do something really interesting in an exploit you try to go from ring three down to um ring",
    "start": "285320",
    "end": "291680"
  },
  {
    "text": "zero but it doesn't stop there it goes much much deeper than that over the course of evolution of the x86 processor",
    "start": "291680",
    "end": "298320"
  },
  {
    "start": "294000",
    "end": "294000"
  },
  {
    "text": "we sort of found out that something are so important that ring zero shouldn't have access to them so we created",
    "start": "298320",
    "end": "305039"
  },
  {
    "text": "additional levels of privilege deeper on the processor so we invented this ring minus one which is more commonly known",
    "start": "305039",
    "end": "310800"
  },
  {
    "text": "as simply the hypervisor but as we found out eventually um some things are still",
    "start": "310800",
    "end": "316000"
  },
  {
    "text": "so important that even the hypervisor shouldn't be able to access it so we created another level on the processor",
    "start": "316000",
    "end": "323039"
  },
  {
    "text": "what we call ring minus 2 or system management mode so system management mode started out Simply enough it was",
    "start": "323039",
    "end": "328800"
  },
  {
    "text": "just what if we have this mode of execution that's invisible to the operating system why would we want",
    "start": "328800",
    "end": "334440"
  },
  {
    "text": "something like that well originally it was pretty simple we just wanted to be able to do power management without the operating system having to worry about",
    "start": "334440",
    "end": "340840"
  },
  {
    "text": "it that was a simple goal for system management mode but it evolved from there over the course of time system",
    "start": "340840",
    "end": "346919"
  },
  {
    "text": "management mode sort of became this dumping grounds for all these miscellaneous things that we didn't want the operating system to have to worry",
    "start": "346919",
    "end": "353199"
  },
  {
    "text": "about and then all of a sudden came a big wine we dumped platform security into system management mode and why not",
    "start": "353199",
    "end": "359639"
  },
  {
    "text": "platform security is really really important and ring zero could be compromised if we put platform security",
    "start": "359639",
    "end": "365360"
  },
  {
    "text": "into ring minus two all of a sudden we don't have to worry about Ring zero compromises anymore but this really",
    "start": "365360",
    "end": "370720"
  },
  {
    "text": "opened up a whole Pandora's Box for what system management mode can do it's now in charge of an alarming number of very",
    "start": "370720",
    "end": "377160"
  },
  {
    "start": "371000",
    "end": "371000"
  },
  {
    "text": "important things on the processor like cryptographically authenticated variables signature verifications",
    "start": "377160",
    "end": "382560"
  },
  {
    "text": "Hardware locks TPM Communications it controls a platform lockbox on that system and it's actually the interface",
    "start": "382560",
    "end": "387919"
  },
  {
    "text": "to the root of Trust on the system because syst management mode alone can um modify the very first instruction",
    "start": "387919",
    "end": "393520"
  },
  {
    "text": "that the processor will ever execute when it turns on so um basically what we've seen over",
    "start": "393520",
    "end": "401520"
  },
  {
    "text": "the evolution of smm is that whenever we had anything that was so important that we didn't want the kernel to screw it up",
    "start": "401520",
    "end": "407960"
  },
  {
    "text": "or so secret that it needed to be hidden from the OS and dma axises or so sensitive that it should never be",
    "start": "407960",
    "end": "413919"
  },
  {
    "text": "touched by anyone we just toss that into system management mode so on Modern processors this is really what our",
    "start": "413919",
    "end": "419879"
  },
  {
    "text": "privilege model looks like at the highest level least privilege is just our ring three code and sitting just below ring three is ring zero where the",
    "start": "419879",
    "end": "426560"
  },
  {
    "text": "kernel executes but much deeper than ring zero is the hypervisor and there's a Chasm that separates the hypervisor",
    "start": "426560",
    "end": "433160"
  },
  {
    "text": "from system management mode and ring minus two so ultimately ring minus 2 is what's really in control of the",
    "start": "433160",
    "end": "439319"
  },
  {
    "text": "processor so if you think that you own a system when you get down to ring zero um you're really not even close because",
    "start": "439319",
    "end": "445800"
  },
  {
    "text": "there are layers and layers of uh separation between ring zero and the",
    "start": "445800",
    "end": "450879"
  },
  {
    "text": "actual processors on Modern systems ring zero is simply not in control ring minus",
    "start": "450879",
    "end": "455919"
  },
  {
    "text": "2 is what controls the hardware the firmware and all the most critical Security checks so if we want to do something interesting we need to find a",
    "start": "455919",
    "end": "461800"
  },
  {
    "text": "way to get deeper than ring zero but in order to figure out how to do that we need to understand how the privilege",
    "start": "461800",
    "end": "467199"
  },
  {
    "text": "model for smm Works how can smm be something invisible to the operating system how can ring zero not see",
    "start": "467199",
    "end": "474039"
  },
  {
    "text": "something um sitting in memory well the idea behind system management mode is that it's going to execute from a",
    "start": "474039",
    "end": "479720"
  },
  {
    "text": "special region of memory called system management Ram or SM RAM and that's region of memory is only going to be",
    "start": "479720",
    "end": "485319"
  },
  {
    "text": "accessible to smm code so the idea is that the processor will see receive",
    "start": "485319",
    "end": "490720"
  },
  {
    "text": "what's called a system management interrupt an SMI that's going to switch the processor over to system management mode and that's going to unlock SM Ram",
    "start": "490720",
    "end": "498280"
  },
  {
    "text": "system management mode is going to execute from SM RAM and when it's done it's going to issue the resume instruction which is going to leave",
    "start": "498280",
    "end": "503360"
  },
  {
    "text": "system management mode and relock SM Ram so with this model system management Ram is only ever visible to M code that's",
    "start": "503360",
    "end": "510720"
  },
  {
    "text": "how we hide it from ring zero so if you're sitting in ring zero and you try to read from SM Ram so on the specific",
    "start": "510720",
    "end": "516680"
  },
  {
    "text": "system I was looking at SM Ram started at 1.8 megabytes if we try to read from that address from ring zero um we're",
    "start": "516680",
    "end": "523800"
  },
  {
    "text": "just going to get a bunch of garbage a bunch of Fs in this case uh we can't actually see what's there but but how",
    "start": "523800",
    "end": "529680"
  },
  {
    "start": "528000",
    "end": "528000"
  },
  {
    "text": "does that work how is it possible that ring zero can't see memory that's physically on the system well that's the",
    "start": "529680",
    "end": "535120"
  },
  {
    "text": "memory controller hub's job it's job is to separate SM Ram from ring zero and it's ultimately in in charge of",
    "start": "535120",
    "end": "541600"
  },
  {
    "text": "enforcing smm security so this is sort of the layout that we have um for smm security we've got the processor on the",
    "start": "541600",
    "end": "547920"
  },
  {
    "text": "left and the memory controller Hub sitting in between the processor and memory and SM Ram sitting somewhere in",
    "start": "547920",
    "end": "553079"
  },
  {
    "text": "memory so if we're in smm and we try to read from a memory address inside of SM",
    "start": "553079",
    "end": "558120"
  },
  {
    "text": "Ram the memory controller Hub looks at that address sees that it's in SM Ram it looks at what mode we're in it sees that",
    "start": "558120",
    "end": "563320"
  },
  {
    "text": "we're in smm so it allows us to access um that memory it returns to us some real values on the other hand if we were",
    "start": "563320",
    "end": "569680"
  },
  {
    "text": "in ring zero and we tried to issue that exact same instruction that address goes over to the memory controller Hub the",
    "start": "569680",
    "end": "574839"
  },
  {
    "text": "memory controller Hub says no you're not in smm you can't access this memory here's a bunch of FS instead so that's",
    "start": "574839",
    "end": "580800"
  },
  {
    "text": "sort of how smm security is designed but who's to say we can't modify the memory controller Hub why can't we just go",
    "start": "580800",
    "end": "586600"
  },
  {
    "text": "around this I mean we're ring zero code after all we should be able to set this stuff up turns out that there are layers",
    "start": "586600",
    "end": "592000"
  },
  {
    "text": "and layers of protections built around SM Ram to keep us from ever seeing what's inside of that memory from ever",
    "start": "592000",
    "end": "598480"
  },
  {
    "text": "modifying system management mode code so we've got ways to configure c seg h seg tseg the different regions of SM Ram",
    "start": "598480",
    "end": "604920"
  },
  {
    "text": "we've got ways to lock SM Ram down we've got ways to lock the locks down we've got ways to enforce cache coherency on",
    "start": "604920",
    "end": "611240"
  },
  {
    "text": "the processor we've got ways of preventing remapping the memory controller Hub configuration we have",
    "start": "611240",
    "end": "616440"
  },
  {
    "text": "locks and locks and locks and locks and locks on this processor keeping us out",
    "start": "616440",
    "end": "621519"
  },
  {
    "text": "of system management RAM and this thing is better protected than ring zero is and it is a daunting task to try to get",
    "start": "621519",
    "end": "628519"
  },
  {
    "text": "past all of these things things so a lot of these locks um well some of these locks are on the processor themselves",
    "start": "628519",
    "end": "635320"
  },
  {
    "text": "itself but most of these locks exist in the memory controller Hub so as far as how we can get around these things there's a lot of really really cool",
    "start": "635320",
    "end": "641480"
  },
  {
    "text": "research going on right now and how to circumvent these Protections in order to dive into ring minus 2 code so um",
    "start": "641480",
    "end": "648160"
  },
  {
    "text": "there's ways of attacking the fringes of the memory controller Hub ways of exploiting misconfigurations in the firmware and smm code so if you're",
    "start": "648160",
    "end": "655040"
  },
  {
    "text": "interested in that kind of thing you should check out the research from legore and itl and ATR some really cool stuff going on here um I want to present",
    "start": "655040",
    "end": "662079"
  },
  {
    "text": "something a little bit different because there is a way to simultaneously circumvent every single one of these",
    "start": "662079",
    "end": "667519"
  },
  {
    "text": "protections and it's built into the architecture itself in order to",
    "start": "667519",
    "end": "672720"
  },
  {
    "text": "understand how that works we need to step back in time and look at something completely unrelated to system management mode a while back some 20",
    "start": "672720",
    "end": "680240"
  },
  {
    "text": "years ago we had something called the local apic so the local apic and the x86 architecture is in charge of receiving",
    "start": "680240",
    "end": "685480"
  },
  {
    "text": "interrupt events from things happening on that system and sending those over to the processor and it used to be that the",
    "start": "685480",
    "end": "690839"
  },
  {
    "text": "local apic was a physically separate chip on the chip set and it sent things over to the processor but that was sort",
    "start": "690839",
    "end": "696440"
  },
  {
    "start": "695000",
    "end": "695000"
  },
  {
    "text": "of an inefficient design so um 20 some years ago Intel moved the local apic onto the processor itself it moved the",
    "start": "696440",
    "end": "703000"
  },
  {
    "text": "local apic into the actual silicon that the processor was using and that had a lot of benefits it's way more efficient and cheaper to manufacture things uh",
    "start": "703000",
    "end": "709560"
  },
  {
    "text": "this way and it also opened up a unique opportunity um we no longer have to use IO instructions to communicate with the",
    "start": "709560",
    "end": "715920"
  },
  {
    "text": "local apic we can now use mmio memory mapped IO for communicating with the local apic which means we can configure",
    "start": "715920",
    "end": "722240"
  },
  {
    "text": "and communicate with the apic way way faster than we ever would have been able to before so with the P5 generation of",
    "start": "722240",
    "end": "728880"
  },
  {
    "text": "micro architectures um Intel reserved this region of memory this 4 kilobyte region starting at Fe megabytes and they",
    "start": "728880",
    "end": "735720"
  },
  {
    "text": "said whenever you try to access this region of memory instead of being sent out of the processor that memory address is going to be accepted by the local",
    "start": "735720",
    "end": "742040"
  },
  {
    "text": "apic and you're going to be accessing the apic registers instead so for example let's say you wanted to quickly",
    "start": "742040",
    "end": "748160"
  },
  {
    "text": "access apic register 280 what you would really do is issue what looks like a memory read instruction accessing 280",
    "start": "748160",
    "end": "754639"
  },
  {
    "text": "offset from Fe megabytes you'd move that into one of your registers so the Apex is going to catch that memory access and",
    "start": "754639",
    "end": "761320"
  },
  {
    "text": "then um give you back one of its own registers this caused a problem for Intel Intel doesn't like to break things",
    "start": "761320",
    "end": "768839"
  },
  {
    "text": "when they release uh a new processor and that makes sense um but this broke something this model um namely there",
    "start": "768839",
    "end": "775519"
  },
  {
    "text": "were some old Legacy systems that were already using that memory range for something else if they then drop in one",
    "start": "775519",
    "end": "781279"
  },
  {
    "text": "of these new processors that expects that memory range to go to the apic uh that's going to break things so they",
    "start": "781279",
    "end": "786440"
  },
  {
    "text": "could have fixed their stuff but instead Intel decided to fix their processors instead so with the p P6 generation of",
    "start": "786440",
    "end": "793279"
  },
  {
    "text": "uh microarchitectures um they changed things a little bit so if you dig out the 1997 version of the Intel software",
    "start": "793279",
    "end": "799600"
  },
  {
    "text": "developer manual you'll find this blur buried in there the P6 family of processors permit the starting address",
    "start": "799600",
    "end": "804880"
  },
  {
    "text": "of the apic registers to be relocated from Fe megabytes to another physical address this extension of the apic",
    "start": "804880",
    "end": "811120"
  },
  {
    "text": "architecture is provided to help resolve conflicts with the memory maps of existing systems so that's really uh so",
    "start": "811120",
    "end": "817720"
  },
  {
    "text": "this is how that's going to work um in its default configuration the apic accepts axises within this memory range",
    "start": "817720",
    "end": "825079"
  },
  {
    "text": "so if we were to issue a memory request within that memory range the apic is going to catch that first and it's going",
    "start": "825079",
    "end": "830720"
  },
  {
    "text": "to give us back one of its registers in this case register 280 on the other hand if we try to access something just one",
    "start": "830720",
    "end": "836279"
  },
  {
    "text": "megabyte below that that looks similar that's not in the apic range the apic is going to look at that and be like well that's not in my range so it's going to",
    "start": "836279",
    "end": "842240"
  },
  {
    "text": "send that out on the System bus and you're actually going to fetch RAM for memory instead um but with this new new uh",
    "start": "842240",
    "end": "849720"
  },
  {
    "text": "addition to the P6 generation of micro architectures they let us move where the apic is so we can issue a couple of",
    "start": "849720",
    "end": "855720"
  },
  {
    "text": "assembly instructions and a WR MSR instruction in order to change where the apic window is located so now um I just",
    "start": "855720",
    "end": "863399"
  },
  {
    "text": "moved the Apex so that it's located at feed megabytes instead of Fe megabytes if I issue those same exact two",
    "start": "863399",
    "end": "868639"
  },
  {
    "text": "instructions now Fe goes out onto the system bus and fetches from um RAM and fed is accepted",
    "start": "868639",
    "end": "875880"
  },
  {
    "text": "by the apic so that we access an apic register so um seems trivial it's it's a vestigial feature to fix um some things",
    "start": "875880",
    "end": "883839"
  },
  {
    "text": "that occurred a long time ago uh it's largely been forgotten nobody really uses this anymore in fact the um",
    "start": "883839",
    "end": "889480"
  },
  {
    "text": "software manuals almost universally assumed that the Apex are located at Fe megabytes it's it's really just a",
    "start": "889480",
    "end": "896279"
  },
  {
    "text": "forgotten patch to fix a forgotten problem on some tiny number of Legacy systems some 20 years ago but",
    "start": "896279",
    "end": "903160"
  },
  {
    "text": "incidentally um this opens up an incredible vulnerability on an entirely unrelated piece of the processor",
    "start": "903160",
    "end": "909279"
  },
  {
    "text": "today so we can actually use this relocatable apic feature um from 20",
    "start": "909279",
    "end": "914800"
  },
  {
    "start": "910000",
    "end": "910000"
  },
  {
    "text": "years ago to attack modern system management mode code and here's how we would do that if we look at the standard",
    "start": "914800",
    "end": "921199"
  },
  {
    "text": "configuration for the processor if we're sitting in ring zero and we try to read something out of SM Ram um that address",
    "start": "921199",
    "end": "928079"
  },
  {
    "text": "is going to be sent out to the memory controller Hub and the memory controller Hub is going to say you're not an smm you can't access SM Ram it's going to",
    "start": "928079",
    "end": "934319"
  },
  {
    "text": "give us back a bunch of FS can't do anything on the other hand if we did that that exact same thing from smm that",
    "start": "934319",
    "end": "940440"
  },
  {
    "text": "address is going to be sent out to the memory controller Hub it's going to allow us to access SM Ram it's going to give us back an actual value in that",
    "start": "940440",
    "end": "947040"
  },
  {
    "text": "situation but what if we're in ring zero code and we move the apic we put the apic so that it overlaps the SM Ram",
    "start": "947040",
    "end": "954240"
  },
  {
    "text": "region instead all of a sudden we've changed the view of our memory so from ring Z we issue that exact same",
    "start": "954240",
    "end": "960120"
  },
  {
    "text": "instruction that we just tried to issue where before we got back a bunch of FS now that address never makes it out of",
    "start": "960120",
    "end": "965480"
  },
  {
    "text": "the processor the apic accepts that address now and it gives us back one of its registers instead that's not really",
    "start": "965480",
    "end": "971560"
  },
  {
    "text": "interesting it doesn't matter if we can modify our view of memory um in ring zero the interesting part is this allows",
    "start": "971560",
    "end": "977120"
  },
  {
    "text": "us to modify smms view of memory so now if smm tries to uh fetch a value from SM",
    "start": "977120",
    "end": "983680"
  },
  {
    "text": "Ram instead of getting what it actually expected to see the apex's going to grab that memory access in and give us back a",
    "start": "983680",
    "end": "989800"
  },
  {
    "text": "register instead so um the MCH in this situation never actually received the",
    "start": "989800",
    "end": "995959"
  },
  {
    "text": "memory request meaning that the primary enforcer of ring minus 2 security has just been removed from the picture so",
    "start": "995959",
    "end": "1002560"
  },
  {
    "text": "through this Legacy apic base feature ring zero can manipulate the apic mm",
    "start": "1002560",
    "end": "1008120"
  },
  {
    "text": "range and intercept ring -2 aises to SM Ram so how could we actually use this to",
    "start": "1008120",
    "end": "1014240"
  },
  {
    "start": "1012000",
    "end": "1012000"
  },
  {
    "text": "attack ring minus 2 from ring zero and try to infiltrate this most privileged realm of execution on the processor uh",
    "start": "1014240",
    "end": "1021240"
  },
  {
    "text": "well the concept is that SM ramort of acts as as a safe haven for smm code it's where smm lives it's in SM RAM and",
    "start": "1021240",
    "end": "1028319"
  },
  {
    "text": "as long as smm code stays inside of SM Ram we can never see it from ring zero we can't touch it we can't modify it in",
    "start": "1028319",
    "end": "1034480"
  },
  {
    "text": "any way but if we could get smm to step outside of its hiding spot if we could get it to leave SM RAM and go into",
    "start": "1034480",
    "end": "1041199"
  },
  {
    "text": "normal memory then we could hijack its execution and gain SMN privileges for",
    "start": "1041199",
    "end": "1046280"
  },
  {
    "text": "ourselves so the first version of this attack is um really pretty straightforward uh the idea is to move",
    "start": "1046280",
    "end": "1052039"
  },
  {
    "text": "the apic over SM Ram let the system switch over to system management mode um it's going to fault because it's",
    "start": "1052039",
    "end": "1057960"
  },
  {
    "text": "breeding a bunch of data that it didn't expect to have there and when it faults it's going to try to figure out how to",
    "start": "1057960",
    "end": "1063480"
  },
  {
    "text": "handle that exception it's going to look up an exception Handler in the interrupt Des scriptor table and that Handler is",
    "start": "1063480",
    "end": "1068960"
  },
  {
    "text": "under our control our Handler is then going to execute with SMN context so pretty simple idea for an attack",
    "start": "1068960",
    "end": "1074440"
  },
  {
    "start": "1073000",
    "end": "1073000"
  },
  {
    "text": "unfortunately it fails there's an undocumented security feature on these processors when this processor switches over to system management mode it zeros",
    "start": "1074440",
    "end": "1080960"
  },
  {
    "text": "out the IDR limit field effectively disabling interrupt handling when that happens if you trigger an exception in",
    "start": "1080960",
    "end": "1086840"
  },
  {
    "text": "system management mode the system does what we call Triple fating uh it's essentially a reset of the system so if",
    "start": "1086840",
    "end": "1092880"
  },
  {
    "text": "we try this attack from ring zero we can triple fault the system in system management mode but what good does it do",
    "start": "1092880",
    "end": "1098919"
  },
  {
    "text": "is to Simply reset the system from ring zero we could have done that anyways so we've got to find a much much more",
    "start": "1098919",
    "end": "1104159"
  },
  {
    "start": "1102000",
    "end": "1102000"
  },
  {
    "text": "elaborate version of this attack so here's what we're going to do instead we're going to over play that apic mm",
    "start": "1104159",
    "end": "1110039"
  },
  {
    "text": "range at the SMI entry point so when the system first switches over to system management mode the very first thing it",
    "start": "1110039",
    "end": "1115120"
  },
  {
    "text": "tries to execute we're going to put the apic right over that location then we're going to load up our apic with a payload",
    "start": "1115120",
    "end": "1121559"
  },
  {
    "text": "that we want the processor to be executing inside of system management mode we're going to trigger an SMI a system management interrupt to switch",
    "start": "1121559",
    "end": "1127039"
  },
  {
    "text": "the system over to system management mode and that's going to allow us to hijack execution when smm begins executing our payload directly out of",
    "start": "1127039",
    "end": "1133559"
  },
  {
    "text": "the apic so that looks something like this in normal situation when the processor receives a system management",
    "start": "1133559",
    "end": "1138760"
  },
  {
    "text": "interupt it tries to fetch the first SMI or system management mode instruction from a fixed address it sends that",
    "start": "1138760",
    "end": "1145280"
  },
  {
    "text": "address out to the MCH the MCH recre that instruction from SM Ram gives it back to the processor to execute simple",
    "start": "1145280",
    "end": "1151320"
  },
  {
    "text": "enough but if in ring zero we decided to move the apig range so that it exactly overlapped the SMI entry point we've all",
    "start": "1151320",
    "end": "1158840"
  },
  {
    "text": "all of a sudden taken control of which instructions the processor is going to be fetching when it switches to system management mode so from ring zero then",
    "start": "1158840",
    "end": "1165720"
  },
  {
    "text": "we can trigger an SMI by writing to the B2 ports which is going to transition the processor to system management mode",
    "start": "1165720",
    "end": "1171400"
  },
  {
    "text": "only now when it tries to fetch the first smm instruction it's going to fetch it out of the apic registers",
    "start": "1171400",
    "end": "1176840"
  },
  {
    "text": "instead of out of SM Ram so Apex is going to return one of its registers and the processor is going to try to execute",
    "start": "1176840",
    "end": "1182480"
  },
  {
    "text": "that as if it was an instruction so if we could store Shell Code in the apic registers then we could gain control of",
    "start": "1182480",
    "end": "1189360"
  },
  {
    "text": "the processor within smm it turns out to be really really hard to do the challenge is that the apic registers",
    "start": "1189360",
    "end": "1195720"
  },
  {
    "text": "have to be 4K aligned meaning that we have no real way and how we place this apic memory window we have to put it",
    "start": "1195720",
    "end": "1202039"
  },
  {
    "text": "exactly at the SMI entry point we've got 4096 bytes available inside of the apic",
    "start": "1202039",
    "end": "1207240"
  },
  {
    "text": "that we can use for our Shell Code um unfortunately for us only those bites are actually writable and only a few",
    "start": "1207240",
    "end": "1213480"
  },
  {
    "text": "bits of each of those bites are writable that's not a lot of control over this Shell Code complicating matters this is",
    "start": "1213480",
    "end": "1220480"
  },
  {
    "text": "actually an invalid instruction so the um smm is going to begin executing these registers from the top but when it hits",
    "start": "1220480",
    "end": "1226200"
  },
  {
    "text": "this invalid instruction that's what we call Triple ing it's going to reset the system our attacks over at that point we",
    "start": "1226200",
    "end": "1232280"
  },
  {
    "text": "have control over exactly 17 bits um before that happens so our black white registers in",
    "start": "1232280",
    "end": "1238919"
  },
  {
    "text": "this diagram are largely hardwired um to zero so if we try to disassemble",
    "start": "1238919",
    "end": "1244320"
  },
  {
    "text": "00000000 as um an assembly instruction that's just an add instruction it doesn't do anything useful but it's also",
    "start": "1244320",
    "end": "1250400"
  },
  {
    "text": "not harmful which means the attack can continue so this is what our Shell Code ends up looking like it's mostly just a",
    "start": "1250400",
    "end": "1256080"
  },
  {
    "text": "bunch of AD instructions that we have no control over and every once in a while a couple of bits that we can actually",
    "start": "1256080",
    "end": "1261400"
  },
  {
    "text": "modify where we have to try to do something useful unfortunately eventually we're going to hit this region where we can't change it and",
    "start": "1261400",
    "end": "1268760"
  },
  {
    "text": "that's not a valid instruction it's going to um trigger a fault and reset the system we need to make something",
    "start": "1268760",
    "end": "1274039"
  },
  {
    "start": "1274000",
    "end": "1274000"
  },
  {
    "text": "useful happen before that occurs so these are the exact apic registers we have control over um in this region and",
    "start": "1274039",
    "end": "1280159"
  },
  {
    "text": "when I say control I mean that word very Loosely because some of these registers we can't actually direct directly write",
    "start": "1280159",
    "end": "1285440"
  },
  {
    "text": "to they're actually pulled from other things um on the processor and on the system so getting those registers set to",
    "start": "1285440",
    "end": "1291600"
  },
  {
    "text": "the right value involves setting the system up to a very specific State just so that those are read as the instruction that we want them to be",
    "start": "1291600",
    "end": "1298520"
  },
  {
    "text": "turns out this is pretty hard to work with if you Tinker with these registers for a really really long time try to",
    "start": "1298520",
    "end": "1303799"
  },
  {
    "text": "make them into something useful um what you're eventually going to find is that the best instructions you can possibly get into these registers um do nothing",
    "start": "1303799",
    "end": "1311880"
  },
  {
    "text": "uh but the bad instructions the ones you don't want to use crash the system so you end up wasting most of your 17 bits",
    "start": "1311880",
    "end": "1317640"
  },
  {
    "text": "just trying to keep the system alive trying to keep it from resetting when it's executing out of the apic but if you do that just right you can get it to",
    "start": "1317640",
    "end": "1324559"
  },
  {
    "text": "Not Crash by the time it hits your last bite so that last bite is our last chance that's the spous interrup vector",
    "start": "1324559",
    "end": "1330799"
  },
  {
    "text": "register inside of the apic if you look up the documentation on this it'll tell you that the low nibble bits 0 through",
    "start": "1330799",
    "end": "1335960"
  },
  {
    "text": "three are hardwired to one the high nibble is actually writable that means if we're trying to pick an instruction to place into that register it's got to",
    "start": "1335960",
    "end": "1342600"
  },
  {
    "text": "end in FS that gives us four bits left to try to take control of the most privileged mode of execution on the",
    "start": "1342600",
    "end": "1348919"
  },
  {
    "text": "processor so we need to figure out what instruction could we possibly put into the spirous inup vector to make this",
    "start": "1348919",
    "end": "1354320"
  },
  {
    "text": "thing do something useful before the system crashes if you consult an OP code map our choices are pretty slim um we've",
    "start": "1354320",
    "end": "1360480"
  },
  {
    "text": "got prefixed bites that don't do anything some ways of modifying the stack a bunch of instructions that shouldn't even exist in this",
    "start": "1360480",
    "end": "1366200"
  },
  {
    "text": "architecture none of these do anything for us but all of a sudden right about when we're out of possible op codes to",
    "start": "1366200",
    "end": "1371799"
  },
  {
    "text": "place into that register um we hit a small miracle in irat instruction that's a return from interrupt routine and",
    "start": "1371799",
    "end": "1378000"
  },
  {
    "text": "iat's got return pop a return value off the top of the stack and jump to that address that'll give us a way to escape",
    "start": "1378000",
    "end": "1384279"
  },
  {
    "text": "this horrible apic and jump to some code that we actually have reasonable control over so by placing an irat instruction",
    "start": "1384279",
    "end": "1390320"
  },
  {
    "text": "into that spirus intra Vector register and then configuring the stack to support this irat instruction we could",
    "start": "1390320",
    "end": "1395400"
  },
  {
    "text": "then remap the apic um trigger an SMI and take control of the processor so this is what our apic payload attack",
    "start": "1395400",
    "end": "1402159"
  },
  {
    "text": "looks like we set up that irat instruction set up a stack set up a payload to jump to um Rema the apic and",
    "start": "1402159",
    "end": "1408799"
  },
  {
    "text": "then trigger an SMI this is really really cool I was really excited to find this so I launched that payload out of",
    "start": "1408799",
    "end": "1413960"
  },
  {
    "text": "processor and it doesn't work that was depressing um I spent 40 hours debugging",
    "start": "1413960",
    "end": "1419760"
  },
  {
    "text": "this thing trying to figure out why it doesn't work and it turns out that instruction fetches actually bypass the apic window that's not the kind of thing",
    "start": "1419760",
    "end": "1426559"
  },
  {
    "text": "they they documents um nobody was ever supposed to try to execute code out of the apic registers um turns out only",
    "start": "1426559",
    "end": "1434039"
  },
  {
    "text": "data fetches actually hit that window this attack is is useless at this point um just got a whole whole lot harder so",
    "start": "1434039",
    "end": "1441520"
  },
  {
    "start": "1441000",
    "end": "1441000"
  },
  {
    "text": "um I was kind of despairing at this point this was a real vulnerability I could influence the view of SM Ram but",
    "start": "1441520",
    "end": "1447840"
  },
  {
    "text": "it doesn't do us any good if we can't actually take control of the system but I I tried to reason about it and started thinking well we can't execute from the",
    "start": "1447840",
    "end": "1453919"
  },
  {
    "text": "apic we don't have control of the instructions we're going to have to take control of smm through data accesses",
    "start": "1453919",
    "end": "1459480"
  },
  {
    "text": "alone and suddenly that started to sound like something um rather rather familiar um there's other common situations where",
    "start": "1459480",
    "end": "1466279"
  },
  {
    "text": "we don't have control over our instructions but we do have control over data and we try to get the system to do something useful so maybe we could do",
    "start": "1466279",
    "end": "1472320"
  },
  {
    "text": "something like apic roing in order to circumvent this this execution limitations um we can sort of do that uh",
    "start": "1472320",
    "end": "1479159"
  },
  {
    "text": "but it turns out to be way way more difficult than I imagined because if we fault the system the system resets the",
    "start": "1479159",
    "end": "1484720"
  },
  {
    "text": "attack is over um SM Ram is invisible we can't even see the thing we're trying to attack 99.5% of the apic bits are",
    "start": "1484720",
    "end": "1491679"
  },
  {
    "text": "hardwired to zero we have no control over the data that we're using in this attack and the apic has to be 4K aligned",
    "start": "1491679",
    "end": "1497200"
  },
  {
    "text": "and it's 4K large um that makes it really really unwieldy so this is more like blind dropping with this enormous",
    "start": "1497200",
    "end": "1504039"
  },
  {
    "text": "unwieldy payload of zeros but if we're open-minded um we can maybe make this",
    "start": "1504039",
    "end": "1509080"
  },
  {
    "text": "work so that's the memory Syle attack that we're going to see um essentially from ring Zero by moving that apic we",
    "start": "1509080",
    "end": "1515720"
  },
  {
    "start": "1510000",
    "end": "1510000"
  },
  {
    "text": "can sinkhole a single page of ring minus two memory so that reads from that memory return zero because most of those",
    "start": "1515720",
    "end": "1522720"
  },
  {
    "text": "registers are wired to zero and rights are completely lost since those registers are hardwired any rights are",
    "start": "1522720",
    "end": "1528480"
  },
  {
    "text": "simply discarded so that's the syn Cole effect for this smm attack the challenge",
    "start": "1528480",
    "end": "1533840"
  },
  {
    "text": "then is how do we attack code when our only control is the ability to disable a page of memory that's not a whole lot of",
    "start": "1533840",
    "end": "1539120"
  },
  {
    "text": "control but if we use our imagination maybe we can find some ways to do this but our ultimate goal needs to be to",
    "start": "1539120",
    "end": "1544399"
  },
  {
    "text": "cover as many systems as we possibly can so in order to do that we need to understand a little bit about where smm",
    "start": "1544399",
    "end": "1550039"
  },
  {
    "text": "code comes from um smm code is actually installed by your system firmware so if we want to make a very broad attack we",
    "start": "1550039",
    "end": "1556559"
  },
  {
    "text": "need to understand the firmware ecosystem a little bit so firmware starts with Intel Intel writes what they",
    "start": "1556559",
    "end": "1562120"
  },
  {
    "start": "1557000",
    "end": "1557000"
  },
  {
    "text": "call the EFI template code it's sort of a skeleton firmware for other people to adapt from and they give that template",
    "start": "1562120",
    "end": "1568120"
  },
  {
    "text": "code to the independent bios vendors the ibvs the ibvs add their own modifications to the template code and",
    "start": "1568120",
    "end": "1573600"
  },
  {
    "text": "sell it to the oems things like HP and Dell they add their own modifications to the template code and then adapt it for",
    "start": "1573600",
    "end": "1579520"
  },
  {
    "text": "each of the individual um models of computers that they sell so you end up with really really really diverse system",
    "start": "1579520",
    "end": "1585600"
  },
  {
    "text": "management mode code by the time you get down to the end of idual systems so we could try to attack that OEM code the",
    "start": "1585600",
    "end": "1591600"
  },
  {
    "text": "stuff they added but um even if you find an exploit in that code it's really only going to affect one system if we attack",
    "start": "1591600",
    "end": "1598799"
  },
  {
    "text": "the code that the ibvs wrote we' do a little bit better but if we really want a universal attack we have to go after",
    "start": "1598799",
    "end": "1604120"
  },
  {
    "text": "that template code that code that everybody is using um it's hard to attack but one exploit will allow you to",
    "start": "1604120",
    "end": "1610559"
  },
  {
    "text": "attack almost any system out there so it just so happens that the EFI template code um is actually responsible for the",
    "start": "1610559",
    "end": "1617840"
  },
  {
    "start": "1612000",
    "end": "1612000"
  },
  {
    "text": "smm entry point and that's what that entry point looks like this is a little bit hard to decipher if you're not",
    "start": "1617840",
    "end": "1623320"
  },
  {
    "text": "familiar um with uh the smm execution environment um but this is the entry",
    "start": "1623320",
    "end": "1628720"
  },
  {
    "text": "point for smm on nearly every modern system because it comes from that template code so execution in smm starts",
    "start": "1628720",
    "end": "1635320"
  },
  {
    "text": "in what we colloquially called uh unreal mode and it's executing from high memory which as it turns out is a really really",
    "start": "1635320",
    "end": "1641559"
  },
  {
    "text": "complicated environment to try to write code for so the very first thing that this smm Handler tries to do is it tries",
    "start": "1641559",
    "end": "1647640"
  },
  {
    "text": "to set up some kind of reasonable execution environment for the rest of the smm code um and it's going to do that by building up segment descriptors",
    "start": "1647640",
    "end": "1654159"
  },
  {
    "text": "transitioning the processor to protected mode and then transitioning the processor to Long mode and the pieces of",
    "start": "1654159",
    "end": "1659399"
  },
  {
    "text": "that of this that are really important for that process are these little pieces um right here so with a little work we",
    "start": "1659399",
    "end": "1665000"
  },
  {
    "text": "can reverse engineer this and understand exactly how it's operating the very first thing this smm code is going to",
    "start": "1665000",
    "end": "1670919"
  },
  {
    "text": "try to do is it's going to try to set up um a gdt descriptor that's a global descriptor table which is basically",
    "start": "1670919",
    "end": "1676120"
  },
  {
    "text": "going to define the memory mappings to use and the rest of smm so the first thing it does for setting up this gdt",
    "start": "1676120",
    "end": "1682159"
  },
  {
    "text": "descriptor is it reads the size of the gdt out of memory and stores that into the descriptor then it reads the",
    "start": "1682159",
    "end": "1687960"
  },
  {
    "text": "location of the gdt out of memory and stores that into into the descriptor it's going to use a little",
    "start": "1687960",
    "end": "1693440"
  },
  {
    "text": "self-modifying code here um we've got an upcoming far jump that far jump is going to transition us from 16bit protected",
    "start": "1693440",
    "end": "1699320"
  },
  {
    "text": "mode to 32-bit protected mode it's going to use self modifying code to write out a selector into this far jump um writes",
    "start": "1699320",
    "end": "1706120"
  },
  {
    "text": "out selector 10 for that and then some more self modifying code to write out the offset um that it's going to jump to",
    "start": "1706120",
    "end": "1711399"
  },
  {
    "text": "for this far jump finally we hit this far jump what the far jump does is it",
    "start": "1711399",
    "end": "1716440"
  },
  {
    "text": "looks at the global descriptor table um looks up its location and memory and then accesses that Global descriptor",
    "start": "1716440",
    "end": "1722240"
  },
  {
    "text": "table it then moves to offset 10 in the global descriptor table to figure out which segment of memory it's about to be",
    "start": "1722240",
    "end": "1728120"
  },
  {
    "text": "jumping to so segment two happens to be at offset 10 inside of this table it fetches information about that segment",
    "start": "1728120",
    "end": "1734880"
  },
  {
    "text": "and then it jumps to this offset within that segment so that's how execution is supposed to work and if we look at that",
    "start": "1734880",
    "end": "1740799"
  },
  {
    "text": "code in a little bit more depth what you're going to find is that all of that information that it loaded out of memory is being read from one large structure",
    "start": "1740799",
    "end": "1747399"
  },
  {
    "text": "called the dsse structure the template smm Handler uses this single structure for storing all of its most critical",
    "start": "1747399",
    "end": "1753600"
  },
  {
    "text": "environment information things like the global descriptor table information the segment selector information the memory mappings that it's going to use inside",
    "start": "1753600",
    "end": "1759880"
  },
  {
    "text": "of system management mode are all stored inside of this one structure um so syncing this structure that has all the",
    "start": "1759880",
    "end": "1766840"
  },
  {
    "text": "most important information for smm would be devastating for the processor so I figured let's see what happens when we",
    "start": "1766840",
    "end": "1772240"
  },
  {
    "text": "do that so from ring zero we try to Syle that DSC structure by moving the apic",
    "start": "1772240",
    "end": "1777919"
  },
  {
    "text": "over its location and then triggering an SMI to um transition the system to system management mode we can um watch",
    "start": "1777919",
    "end": "1785080"
  },
  {
    "text": "what exactly happens on uh on this system we don't have control over the processor anymore at that point it switches to system management mode and",
    "start": "1785080",
    "end": "1791240"
  },
  {
    "text": "then it's out of our hands any exception is going to reset the system but maybe maybe it'll do something that'll let us",
    "start": "1791240",
    "end": "1796880"
  },
  {
    "text": "um hijack execution before it resets so these are the pieces of memory out of that same region that we just uh looked",
    "start": "1796880",
    "end": "1803039"
  },
  {
    "text": "at these are now the memory axises that are going to be syn hold by our attack each of these is going to read a zero",
    "start": "1803039",
    "end": "1809039"
  },
  {
    "text": "out of the apic registers instead of what it intended to read out of SM Ram so once again it's going to try to set",
    "start": "1809039",
    "end": "1814880"
  },
  {
    "text": "up a global descriptor table um descriptor in order to Define its memory mappings and the very first thing it's",
    "start": "1814880",
    "end": "1820559"
  },
  {
    "text": "going to try to do is it's going to try to load up the size of that Global descriptor table but it accesses um the",
    "start": "1820559",
    "end": "1826720"
  },
  {
    "text": "uh memory syn hole reading a zero for the size that would kill our attack right there if you have a zero size for",
    "start": "1826720",
    "end": "1832519"
  },
  {
    "text": "your descriptor table that means you have no memory mappings on the system it's going to Triple fault and reset but",
    "start": "1832519",
    "end": "1837799"
  },
  {
    "text": "we've got this miraculous instruction in here that just happens to save us they decrement that size so instead of being",
    "start": "1837799",
    "end": "1843519"
  },
  {
    "text": "zero it becomes fffff the largest possible descriptor table size we could possibly have and then they store that",
    "start": "1843519",
    "end": "1849120"
  },
  {
    "text": "into the global descriptor um table register the next thing they need to figure out is where's the global",
    "start": "1849120",
    "end": "1854640"
  },
  {
    "text": "descriptor table located again they read that out of the sinkhole and then that into this gdt descriptor uh and again",
    "start": "1854640",
    "end": "1860919"
  },
  {
    "text": "it's miscalculated now as being at address zero so we just successfully tainted the entire um Global descriptor",
    "start": "1860919",
    "end": "1867519"
  },
  {
    "text": "table uh descriptor that they constructed here that's going to help us a lot in some upcoming code this little",
    "start": "1867519",
    "end": "1873039"
  },
  {
    "text": "chunk is not especially relevant they end up doing some more self-modifying code for an upcoming instruction because they're reading that information out of",
    "start": "1873039",
    "end": "1879200"
  },
  {
    "text": "the sinkle they end up corrupting that upcoming instruction so if we get this far if we get down here um past this",
    "start": "1879200",
    "end": "1885399"
  },
  {
    "text": "jump the system's going to Triple fault because of this corruption and reset and our attack will be over fortunately we",
    "start": "1885399",
    "end": "1891159"
  },
  {
    "text": "never make it that far so once again they do some self-modifying code they write out that selector 10 into the",
    "start": "1891159",
    "end": "1896200"
  },
  {
    "text": "upcoming far jump they try to uh set up the offset to use for that far jump that's going to be miscalculated again",
    "start": "1896200",
    "end": "1902279"
  },
  {
    "text": "because of the sync Co so we managed to Tain that far jump value as well so when it hits the far jump now it's going to",
    "start": "1902279",
    "end": "1907559"
  },
  {
    "text": "try to figure out where's the global descriptor table located what memory mappings am I using what segment of memory am I going to so it's going to",
    "start": "1907559",
    "end": "1914399"
  },
  {
    "text": "fetch that Global descriptor table from address zero address Zer is now outside of SM Ram that's something we have",
    "start": "1914399",
    "end": "1920159"
  },
  {
    "text": "control over from ring zero so we successfully got it to um fetch some data that we can actually influence at",
    "start": "1920159",
    "end": "1927519"
  },
  {
    "text": "this point so it's going to look up a global descriptor table at address zero and it's going to move to offset 10",
    "start": "1927519",
    "end": "1932679"
  },
  {
    "text": "inside of that table and read a segment selector out of that offset so the segment selector now since this is in a",
    "start": "1932679",
    "end": "1939120"
  },
  {
    "text": "gdt that we control is also a selector we control that means we control which memory mappings it's going to be using",
    "start": "1939120",
    "end": "1945159"
  },
  {
    "text": "um the memory segment it's about to jump to is now under control it's going to add its offset to that memory segment",
    "start": "1945159",
    "end": "1951440"
  },
  {
    "text": "base and it's going to jump to that region so that far jump caused smm to load a protective mode memory mapping",
    "start": "1951440",
    "end": "1957320"
  },
  {
    "text": "from the gdt under our control and if we were to preemptively configure a malicious Global descriptor table and",
    "start": "1957320",
    "end": "1962919"
  },
  {
    "text": "place it right at address zero um then we could control exactly where this jump is about to go we could force it to jump",
    "start": "1962919",
    "end": "1969840"
  },
  {
    "text": "outside of SM Ram to code that we control to hijack the processor in ring minus 2 so this is what our payload",
    "start": "1969840",
    "end": "1976960"
  },
  {
    "text": "looks like in this situation and it seems a little bit complex but after pre-processing it boils down to just",
    "start": "1976960",
    "end": "1982000"
  },
  {
    "text": "these instructions flushing the cache setting up um a descriptor entry in low",
    "start": "1982000",
    "end": "1987039"
  },
  {
    "text": "memory for it to uh use um then moving the apic registers to syn call that DSE",
    "start": "1987039",
    "end": "1992440"
  },
  {
    "text": "structure and then simply looping in place simply waiting for a periodic SMI to transition the system to system",
    "start": "1992440",
    "end": "1998200"
  },
  {
    "text": "management mode so that we can take control of the processor when we do that we fire it at the uh the processor we",
    "start": "1998200",
    "end": "2004960"
  },
  {
    "text": "wait and it works this time around so I was extremely ecstatic to see that this thing worked because with eight lines of",
    "start": "2004960",
    "end": "2011240"
  },
  {
    "text": "code we now successfully exploited a huge number of features on this processor we exploit Hardware remappings",
    "start": "2011240",
    "end": "2017919"
  },
  {
    "text": "descriptor cache configurations instruction and data cache properties the processor is going to go through four execution modes and four different",
    "start": "2017919",
    "end": "2024480"
  },
  {
    "text": "memory models before it actually hits that far jump that we tainted and jumps to code under our control so that we can",
    "start": "2024480",
    "end": "2030000"
  },
  {
    "text": "successfully infiltrate the most privilege mode of execution on the x86 processor and the coolest thing about",
    "start": "2030000",
    "end": "2035679"
  },
  {
    "text": "this whole thing is that is that that template SMI Handler had no vulnerability in it there was absolutely",
    "start": "2035679",
    "end": "2041200"
  },
  {
    "text": "nothing wrong with that code we managed to attack it through this flaw in the x86 architecture and like I mentioned",
    "start": "2041200",
    "end": "2047480"
  },
  {
    "start": "2045000",
    "end": "2045000"
  },
  {
    "text": "earlier this opens up an entirely new class of exploits against ring minus 2 we can start looking for other things",
    "start": "2047480",
    "end": "2053040"
  },
  {
    "text": "that we could apply the sinkhole against so for example this is the firmware that I pulled off of the the MacBook that",
    "start": "2053040",
    "end": "2058358"
  },
  {
    "text": "I've got up here for this demonstration this is how the Mac handles interrupts in system management mode they have this",
    "start": "2058359",
    "end": "2064440"
  },
  {
    "text": "table of function pointers over here then they're going to use this call instru to call into one of these function pointers if you were to synold",
    "start": "2064440",
    "end": "2070960"
  },
  {
    "text": "this table of function pointers that call instruction is going to fetch a zero as the address that it's supposed",
    "start": "2070960",
    "end": "2076000"
  },
  {
    "text": "to Branch to forcing smm to jump outside of SM Ram to where we can hijack it um",
    "start": "2076000",
    "end": "2081800"
  },
  {
    "text": "alternatively the smm stack is another fantastic place to apply the sync hole all smm code is going to try to set up a",
    "start": "2081800",
    "end": "2087800"
  },
  {
    "text": "stack to use when it's executing inside of system management mode so if we were to apply the sinkhole over the stack",
    "start": "2087800",
    "end": "2094280"
  },
  {
    "text": "then every call instruction inside of smm is going to try to push return address onto the stack that return",
    "start": "2094280",
    "end": "2100440"
  },
  {
    "text": "address is going to get consumed by the sinkhole and just completely lost but but when it issues a return instruction",
    "start": "2100440",
    "end": "2106440"
  },
  {
    "text": "it's going to try to pop a return address off of the stack it's going to read a zero out of the sinkhole and",
    "start": "2106440",
    "end": "2111640"
  },
  {
    "text": "Branch to address zero um under our control so there are just a tremendous number of things we can apply this to",
    "start": "2111640",
    "end": "2117599"
  },
  {
    "text": "it's really whatever you can imagine so the question then is what do we actually do with this capability okay we've got",
    "start": "2117599",
    "end": "2123280"
  },
  {
    "text": "ring minus 2 control uh how do we use that well we can unlock Hardware that wasn't available to us in ring zero we",
    "start": "2123280",
    "end": "2129520"
  },
  {
    "text": "can disable the cryptographic checks on the system we could break the system if we wanted to since system management mode is in charge of thermal regulation",
    "start": "2129520",
    "end": "2135720"
  },
  {
    "text": "on many systems we could just Halt and Catch Fire we could open the lock box on the system um or we could just install a",
    "start": "2135720",
    "end": "2142359"
  },
  {
    "text": "really really nasty root kit so that's the route I took um the normal",
    "start": "2142359",
    "end": "2147680"
  },
  {
    "start": "2144000",
    "end": "2144000"
  },
  {
    "text": "demonstration for when you gain um system management mode access on a system is to Simply brick the system and",
    "start": "2147680",
    "end": "2153359"
  },
  {
    "text": "it's a really cool demonstration um but it's not necessarily the most practical attack I thought it be way way more",
    "start": "2153359",
    "end": "2158560"
  },
  {
    "text": "interesting to actually install a system management mode root kit using the memory syn hole attack um so that's what",
    "start": "2158560",
    "end": "2164400"
  },
  {
    "text": "we do here um we deploy this rootkit through the memory syn Cole once the rootkit has control in system management",
    "start": "2164400",
    "end": "2170000"
  },
  {
    "text": "mode that means it can preempt the hypervisor it can periodically intercept um ring zero code it can filter ring",
    "start": "2170000",
    "end": "2175280"
  },
  {
    "text": "zero IO accesses it can modify any memory on that system it can escalate process privilege levels it and it can",
    "start": "2175280",
    "end": "2181760"
  },
  {
    "text": "do all of this completely invisible to the operating system to ring zero to anti virus technology and to the hyperv",
    "start": "2181760",
    "end": "2187960"
  },
  {
    "text": "our rootkit at this point once it's placed in SM Ram is entirely undetectable on that system so um for",
    "start": "2187960",
    "end": "2195480"
  },
  {
    "text": "this demonstration I hacked together um some code created by this uh guy crash who made a really really cool robust smm",
    "start": "2195480",
    "end": "2203079"
  },
  {
    "text": "root kit so I adapted some of his code for this demonstration what we do is we signal that root kit by some magic",
    "start": "2203079",
    "end": "2208960"
  },
  {
    "text": "64-bit number in user land when the smm rootkit sees that magic 64-bit number it",
    "start": "2208960",
    "end": "2214760"
  },
  {
    "text": "knows that some process is secretly requesting to escalated in its privileges so the smm rot kit then",
    "start": "2214760",
    "end": "2220680"
  },
  {
    "text": "parses that processes page tables locates the process credentials and gives it root access to the system so if",
    "start": "2220680",
    "end": "2226880"
  },
  {
    "text": "we revisit um the attack that we Illustrated uh early on the way this really",
    "start": "2226880",
    "end": "2233560"
  },
  {
    "text": "worked um so we have this uh attack driver code",
    "start": "2233560",
    "end": "2238880"
  },
  {
    "text": "the attack driver is what's in charge of using the memory syn hole exploit in order to actually install a root kit",
    "start": "2238880",
    "end": "2245160"
  },
  {
    "text": "onto the processor so the attack driver is actually not too complex it simply installs a hook into low memory that's",
    "start": "2245160",
    "end": "2250800"
  },
  {
    "text": "what uh smm is accidentally going to Branch to um copies the actual root kit that we want to use into memory um for",
    "start": "2250800",
    "end": "2257560"
  },
  {
    "text": "later reference then it has some inline assembly here to actually apply uh the sinkhole attack so in this specific",
    "start": "2257560",
    "end": "2263160"
  },
  {
    "text": "situation I was tinkering with using the sinkhole attack against the smm stack so we sinkhole their stack forcing them to",
    "start": "2263160",
    "end": "2269640"
  },
  {
    "text": "Branch to address zero where our hook will take control and install the rootkit into system management Ram um",
    "start": "2269640",
    "end": "2276640"
  },
  {
    "text": "our rootkit itself like I said adapted from a crash's source code also not especially complicated um all it's going to be",
    "start": "2276640",
    "end": "2283440"
  },
  {
    "text": "doing is reading a couple of register values out of What's called the state save map basically it's going to look at",
    "start": "2283440",
    "end": "2288880"
  },
  {
    "text": "what process it interrupted and if it sees these magic um this magic 64-bit",
    "start": "2288880",
    "end": "2295000"
  },
  {
    "text": "values in those registers then it knows that a process is secretly requesting privilege escalation so it calls the",
    "start": "2295000",
    "end": "2300720"
  },
  {
    "text": "privilege escalation function for that process the privilege escalation function Pro parses that processes page",
    "start": "2300720",
    "end": "2306920"
  },
  {
    "text": "tables locates its credentials and assigns it root privileges",
    "start": "2306920",
    "end": "2312000"
  },
  {
    "text": "here so going back to the actual um escalation attack when we run",
    "start": "2312000",
    "end": "2318720"
  },
  {
    "text": "the escalation attack all it's really doing is loading those um couple of 32-bit values into the registers to",
    "start": "2318720",
    "end": "2324400"
  },
  {
    "text": "signal to um the rootkit running on the system now uh if we uh remember to",
    "start": "2324400",
    "end": "2329760"
  },
  {
    "text": "actually install the root kit so when when we run the SLE scri",
    "start": "2329760",
    "end": "2336000"
  },
  {
    "text": "script it'll use that driver to install our rootkit into system management mode where it can no longer be seen so that",
    "start": "2336000",
    "end": "2342400"
  },
  {
    "text": "now um when we run our escalate process uh we surreptitiously gain",
    "start": "2342400",
    "end": "2350680"
  },
  {
    "text": "access uh to root so the impact of this is fairly",
    "start": "2350680",
    "end": "2356079"
  },
  {
    "start": "2354000",
    "end": "2354000"
  },
  {
    "text": "large um we simultaneously just circumvented every single ring minus 2 protection in place on this processor",
    "start": "2356079",
    "end": "2363000"
  },
  {
    "start": "2362000",
    "end": "2362000"
  },
  {
    "text": "and the mitigations um don't look great uh could we do a firmware update to fix this kind of thing uh maybe move the",
    "start": "2363000",
    "end": "2369800"
  },
  {
    "text": "apic back to the proper location inside of the system management mode code uh you can try that um the problem is by",
    "start": "2369800",
    "end": "2375400"
  },
  {
    "text": "the time you're able to do that you have probably already been synold by the attack so it doesn't really work very",
    "start": "2375400",
    "end": "2380800"
  },
  {
    "text": "well could you do a micro code update uh probably not um this is too deeply ingrained in the processor it's not",
    "start": "2380800",
    "end": "2386240"
  },
  {
    "text": "something you can easily reconfigure really this is unpatchable um the only real mitigation to this attack is to",
    "start": "2386240",
    "end": "2392800"
  },
  {
    "text": "build new processors uh unfortunately for me um that's exactly what Intel did",
    "start": "2392800",
    "end": "2397839"
  },
  {
    "text": "somebody at Intel discovered this uh shortly before I did and this problem is fixed on their latest generations of",
    "start": "2397839",
    "end": "2403400"
  },
  {
    "text": "processors so starting with Sandy bridge and atom 2013 processors um what they have are some undocumented internal",
    "start": "2403400",
    "end": "2409599"
  },
  {
    "text": "checks against what are called the system management range registers when you try to relocate the apic and if you try to put the apic over SM Ram they're",
    "start": "2409599",
    "end": "2416359"
  },
  {
    "text": "going to block that from happening um the good news from an attacker's perspective is that still requires the",
    "start": "2416359",
    "end": "2421960"
  },
  {
    "text": "smrs to be properly configured which an alarming number of systems are still not doing um as far as AMD goes I haven't",
    "start": "2421960",
    "end": "2429680"
  },
  {
    "text": "had enough time to thoroughly research AMD I'm still analyzing that and I'll keep people posted on what I find as far",
    "start": "2429680",
    "end": "2435520"
  },
  {
    "text": "as AMD is concerned what I can tell you for now is AMD doesn't have these SMR R registers they never needed them for the",
    "start": "2435520",
    "end": "2441920"
  },
  {
    "text": "same reason that Intel did so this fix um on Intel processors won't work on AMD",
    "start": "2441920",
    "end": "2447040"
  },
  {
    "text": "processors on top of that AMD tends to document their stuff really really well which is actually incredibly helpful",
    "start": "2447040",
    "end": "2452839"
  },
  {
    "text": "from an attacker's point of view so AMD actually has buried in their developer manuals of lurb stating that the apic",
    "start": "2452839",
    "end": "2458760"
  },
  {
    "text": "window takes precedence over the SM Ram window meaning that the apic attack should work on AMD processors um and I",
    "start": "2458760",
    "end": "2465839"
  },
  {
    "text": "don't know for certain but I suspect these are very vulnerable to this attack um but these mitigations only work if",
    "start": "2465839",
    "end": "2472480"
  },
  {
    "text": "every single one of these other uh security mechanisms is properly configured and even when that's the case",
    "start": "2472480",
    "end": "2478240"
  },
  {
    "text": "there are hundreds of millions of processors out there right now in which this can't be fixed so I'm working on",
    "start": "2478240",
    "end": "2483920"
  },
  {
    "text": "getting a cve number from this if you're interested interested in Intel's um perspective on the uh problem and what",
    "start": "2483920",
    "end": "2489480"
  },
  {
    "text": "they're doing to mitigate the issue you can go to intel.com security and see they're right up right now so I coordinated this disclosure with Intel",
    "start": "2489480",
    "end": "2496560"
  },
  {
    "text": "um I got to tell you they have been fantastic to work with they were really interested in keeping their processor secure they instantly started working on",
    "start": "2496560",
    "end": "2503119"
  },
  {
    "text": "mitigations wherever it was architecturally feasible um they're working on their most recently vulnerable processors and working their",
    "start": "2503119",
    "end": "2509400"
  },
  {
    "text": "way backwards it will take a little bit of time for their updates to trickle down so in the meantime um just be",
    "start": "2509400",
    "end": "2514720"
  },
  {
    "text": "careful so looking forward for the future of this attack uh as far as I know this is actually only the second",
    "start": "2514720",
    "end": "2519839"
  },
  {
    "start": "2515000",
    "end": "2515000"
  },
  {
    "text": "architectural privilege escalation vulnerability on the x86 processor and that's behind the original smm cache",
    "start": "2519839",
    "end": "2526560"
  },
  {
    "text": "poisoning attack discovered by um def flat and invisible things uh a couple years back so there have been exploits",
    "start": "2526560",
    "end": "2532599"
  },
  {
    "text": "against uh the chipset configuration um vulnerabilities in the firmware and software you've even had dram um",
    "start": "2532599",
    "end": "2540200"
  },
  {
    "text": "corruption errors but the processor itself has actually been surprisingly resilient to attack um throughout its",
    "start": "2540200",
    "end": "2546440"
  },
  {
    "text": "long history but it x86 is an immensely complex architecture with 40 Years of",
    "start": "2546440",
    "end": "2552440"
  },
  {
    "text": "evolution behind it so I think what we're going to keep on finding is that there are a multitude of pieces that are",
    "start": "2552440",
    "end": "2557720"
  },
  {
    "text": "individually secure but maybe collectively vulnerable as was this case where the smm was Secure um the apic was",
    "start": "2557720",
    "end": "2565440"
  },
  {
    "text": "Secure but when you combine those two things um it introduced an interesting vulnerability so I really think we're just beginning to scratch the surface in",
    "start": "2565440",
    "end": "2572359"
  },
  {
    "text": "terms of these style of attacks so a lot of people went into uh helping this work either Direct IR ly or indirectly so I",
    "start": "2572359",
    "end": "2578280"
  },
  {
    "text": "wanted to make sure to acknowledge my co-worker Scott Lee a bunch of fantastic researchers in this field um the teams",
    "start": "2578280",
    "end": "2584280"
  },
  {
    "text": "at Intel and uh crash who created that smm rootkit which I was able to deploy",
    "start": "2584280",
    "end": "2589319"
  },
  {
    "text": "uh with this attack so if you're interested in looking at some proof of concept code for this in a little bit more depth you can check out uh my",
    "start": "2589319",
    "end": "2595359"
  },
  {
    "start": "2590000",
    "end": "2590000"
  },
  {
    "text": "GitHub page um you can also um follow me on Twitter for more updates on this attack as I do more research it's xor",
    "start": "2595359",
    "end": "2602040"
  },
  {
    "text": "eax eex eax or you can email me at the same address and I've got a few minutes left so um I wanted to diverge a little",
    "start": "2602040",
    "end": "2609319"
  },
  {
    "text": "bit and talk about a side project of mine since I'm at blackhead and I'm talking about weird x86 things I also",
    "start": "2609319",
    "end": "2616240"
  },
  {
    "text": "thought it'd be a a good opportunity to um release another weird x86 project I've been working on so if you saw me",
    "start": "2616240",
    "end": "2622720"
  },
  {
    "text": "speak at Recon a couple months ago I talked about this weird x86 fact in that",
    "start": "2622720",
    "end": "2628440"
  },
  {
    "text": "the move instruction is itself touring complete so what that meant from our perspective is that you could write",
    "start": "2628440",
    "end": "2634119"
  },
  {
    "text": "entire programs using only the move instruction which is really cool and as a proof of concept for that um I made this compiler",
    "start": "2634119",
    "end": "2641480"
  },
  {
    "text": "that compiled code from this really really awful language called brain yuck into only move instructions so we could",
    "start": "2641480",
    "end": "2647520"
  },
  {
    "text": "actually run move only uh programs which was neat but writing code like this isn't the most practical thing in the",
    "start": "2647520",
    "end": "2653760"
  },
  {
    "text": "world so I I promised an alteration um to that compiler uh so today in the next",
    "start": "2653760",
    "end": "2660079"
  },
  {
    "text": "um hour if you check out the GitHub page I'll post what I think is the world's first single instruction uh C compiler",
    "start": "2660079",
    "end": "2667119"
  },
  {
    "text": "so it's got a little shell script there after you download the source code it'll help you build everything um and then it'll help you actually run through this",
    "start": "2667119",
    "end": "2673319"
  },
  {
    "text": "to see how the single instruction C compiler actually works so I call this thing the mafas skater when you uh do a",
    "start": "2673319",
    "end": "2679280"
  },
  {
    "text": "git clone you'll get this check script and it's going to download an open source implementation of the AES algorithm it's then going to compile it",
    "start": "2679280",
    "end": "2685960"
  },
  {
    "text": "with the mafas skater and dump out the assembly results so what you see is just a absolutely monstrous number of",
    "start": "2685960",
    "end": "2693079"
  },
  {
    "text": "unconditional move instructions used to implement this C program and sometime today this is actually going to finish",
    "start": "2693079",
    "end": "2698800"
  },
  {
    "text": "dumping out and when it does we'll be able to actually see this program run um and and run the program exactly as you",
    "start": "2698800",
    "end": "2705119"
  },
  {
    "text": "would expect it to run so this was sort of an exercise or a thought experiment",
    "start": "2705119",
    "end": "2710240"
  },
  {
    "text": "in anti-reverse engineering or code op fisc but mostly I just thought it was funny so when it's done it'll actually",
    "start": "2710240",
    "end": "2716599"
  },
  {
    "text": "run this program and it'll do all of AES using only move instructions so I think",
    "start": "2716599",
    "end": "2721839"
  },
  {
    "text": "it's a really cool kind of neat tool um I would love to get some feedback on it so I'd love it if uh people were interested in um checking that out so if",
    "start": "2721839",
    "end": "2728440"
  },
  {
    "text": "you're interested in weird x86 things uh I'll be talking a little bit more about that at uh Defcon um but more",
    "start": "2728440",
    "end": "2735040"
  },
  {
    "text": "importantly at Defcon I wanted to illustrate another um side project I've been working on that's a way of",
    "start": "2735040",
    "end": "2741280"
  },
  {
    "text": "manipulating um control flow graphs in assembly code um by manipulating your",
    "start": "2741280",
    "end": "2746319"
  },
  {
    "text": "control flow graphs very carefully I found that you could do really groundbreaking revolutionary things like",
    "start": "2746319",
    "end": "2753000"
  },
  {
    "text": "um take a selfie in Ida so um I leas some source code for doing that too um",
    "start": "2753000",
    "end": "2760160"
  },
  {
    "text": "check that out at deathcon if if you're more interested in",
    "start": "2760160",
    "end": "2765599"
  },
  {
    "text": "Practical things um the memory Syle is practical and you can find that Source",
    "start": "2765599",
    "end": "2770720"
  },
  {
    "text": "on GitHub as soon as I post that in about an hour but I appreciate everyone's time here today I think I'm out of time um for uh questions although",
    "start": "2770720",
    "end": "2778880"
  },
  {
    "text": "I'm not sure about that uh but if anyone wanted to talk to me about this um offline i' would love to answer any",
    "start": "2778880",
    "end": "2784240"
  },
  {
    "text": "questions or discuss this further so thank you again [Applause]",
    "start": "2784240",
    "end": "2794849"
  }
]