[
  {
    "text": "[Music]",
    "start": "27890",
    "end": "44879"
  },
  {
    "text": "speak about graph based binary",
    "start": "51760",
    "end": "55079"
  },
  {
    "text": "analysis first off I'll give you a short overview what the talk will will consist about or consist of and what it'll be",
    "start": "57239",
    "end": "64518"
  },
  {
    "text": "about first off I'll give a short introd introduction in or or in terms of what",
    "start": "64519",
    "end": "69880"
  },
  {
    "text": "are graphs and um what kind of graphs I'm talking about and why I'm talking about these graphs and why I think",
    "start": "69880",
    "end": "75960"
  },
  {
    "text": "they're particularly useful um the second part will well",
    "start": "75960",
    "end": "82119"
  },
  {
    "text": "discuss simple flow graphing which is pretty much just taking a sequential bit of code and um creating a graph which",
    "start": "82119",
    "end": "89320"
  },
  {
    "text": "clarifies the interdependencies and the code flow um I specifically address some problems you'll encounter with when",
    "start": "89320",
    "end": "96079"
  },
  {
    "text": "dealing with Microsoft's optimization or ways of optimizing code these days secondly I'll I'll talk about",
    "start": "96079",
    "end": "103840"
  },
  {
    "text": "um reducing flow graphs step by step or um gradually to um allow you for manual",
    "start": "103840",
    "end": "110479"
  },
  {
    "text": "decompilation basically graphs can be very useful if you have to create C code from",
    "start": "110479",
    "end": "116039"
  },
  {
    "text": "assembly and I'll finally talk a little bit about um using these flow graphs to",
    "start": "116039",
    "end": "121880"
  },
  {
    "text": "improve fast testing stress testing tools and um to get a better idea of um",
    "start": "121880",
    "end": "127520"
  },
  {
    "text": "how much code you're covering and so on afterwards I'll speak about structure and object reconstruction um usually or",
    "start": "127520",
    "end": "135560"
  },
  {
    "text": "specifically these things structure and object reconstruction can be achieved by creating certain graphs um which track",
    "start": "135560",
    "end": "143400"
  },
  {
    "text": "the control well they're basically forwards data flow graphs um they track which bit of code in the program has",
    "start": "143400",
    "end": "150519"
  },
  {
    "text": "control of a certain pointer at a certain point on time um I'll then speak a little bit about vtable pausing to um",
    "start": "150519",
    "end": "158200"
  },
  {
    "text": "improve object reconstruction and finally um I'll speak about variable control graphing",
    "start": "158200",
    "end": "164879"
  },
  {
    "text": "basically that would be inverse data flow um well if you find a pointer",
    "start": "164879",
    "end": "170959"
  },
  {
    "text": "somewhere in a program and you want to find out where this pointer came from that would be a buffer definition graph",
    "start": "170959",
    "end": "176680"
  },
  {
    "text": "or inverse data flow or whatever you want to call it",
    "start": "176680",
    "end": "181840"
  },
  {
    "text": "now um there might be the question what this has to do with security I've gotten",
    "start": "182159",
    "end": "187599"
  },
  {
    "text": "this question before so I'll try to explain why I think these things are",
    "start": "187599",
    "end": "192840"
  },
  {
    "text": "interesting first off um the part second part about um decompilation and manual audits um code graphs like simple flow",
    "start": "192840",
    "end": "201640"
  },
  {
    "text": "graphs help massively in decompiling stuff and help massively in understanding code better so this",
    "start": "201640",
    "end": "207480"
  },
  {
    "text": "improves the efficiency when you have to do stuff like manually finding bugs in software or alternatively if you ever",
    "start": "207480",
    "end": "214200"
  },
  {
    "text": "have to decompile stuff for somebody like I don't know there's people who can't read Assembly Language then you",
    "start": "214200",
    "end": "219560"
  },
  {
    "text": "have to give them C code or whatever it'll massively increase your efficiency and um make you less error prone in your",
    "start": "219560",
    "end": "227640"
  },
  {
    "text": "work um the third part about object inst structure reconstruction pretty much um",
    "start": "227640",
    "end": "233280"
  },
  {
    "text": "well the slide says it speeds up manual binary audits but to be honest it just makes them feasible at first because um",
    "start": "233280",
    "end": "240640"
  },
  {
    "text": "reconstructing structures and object objects manually would take forever in a day so before you ever get to to finding",
    "start": "240640",
    "end": "246840"
  },
  {
    "text": "bugs you would be reconstructing structures and objects for weeks and months um secondly the the pointer",
    "start": "246840",
    "end": "254120"
  },
  {
    "text": "control flow graphing can be used for massively more sophisticated automatic",
    "start": "254120",
    "end": "259359"
  },
  {
    "text": "analysis at some point in time um I don't think I'll speak too much about the the more sophisticated um things you",
    "start": "259359",
    "end": "266960"
  },
  {
    "text": "could do with these um graphs that might be something I'll be covering next year",
    "start": "266960",
    "end": "273120"
  },
  {
    "text": "or at Devcon this year I don't know we'll see um and finally the inverse variable",
    "start": "273120",
    "end": "279039"
  },
  {
    "text": "tracking is relatively useful if you have to manually audit code and you want to do buffer size arithmetics for example you have the string copy call",
    "start": "279039",
    "end": "286000"
  },
  {
    "text": "and you want to find out what size all buffers which go into this call are for example is the the target buffer larger",
    "start": "286000",
    "end": "293479"
  },
  {
    "text": "than the The Source buffer every for every possible combination of calls or every possible code path you want",
    "start": "293479",
    "end": "299960"
  },
  {
    "text": "inverse variable tracking because the string copy will probably take a CH pointer which has been passed by a Target uh by by a well calling function",
    "start": "299960",
    "end": "308120"
  },
  {
    "text": "and that has gotten three CH pointers by its calling functions and so on so in the end you got 20 or 15 different CH",
    "start": "308120",
    "end": "314720"
  },
  {
    "text": "pointers going in there and you want to estimate the buffer sizes of every single one of them okay so what is a graph the graphs",
    "start": "314720",
    "end": "322919"
  },
  {
    "text": "I'm speaking about are just simple flow graphs they consist of nodes of sequential code and um the links between",
    "start": "322919",
    "end": "330600"
  },
  {
    "text": "these nodes why should one use graphs well",
    "start": "330600",
    "end": "337960"
  },
  {
    "text": "first off graphs make code understanding a lot easier um well computer code while",
    "start": "337960",
    "end": "344280"
  },
  {
    "text": "being sequential in memory is not really sequential in execution I mean we have large blocks which are being skipped and",
    "start": "344280",
    "end": "350400"
  },
  {
    "text": "so on so it doesn't really make sense for human being who tries to understand in working of the code to read it in a",
    "start": "350400",
    "end": "355560"
  },
  {
    "text": "sequential manner you want to know the interdependencies you want to know which part parts are being skipped if a certain part is executed and so on so",
    "start": "355560",
    "end": "363039"
  },
  {
    "text": "graphs make code understanding a lot easier human beings are not particularly suited for for reading large amounts of",
    "start": "363039",
    "end": "369560"
  },
  {
    "text": "sequential code but they're very very visually oriented so everybody loves flowcharts because they make things a",
    "start": "369560",
    "end": "374720"
  },
  {
    "text": "lot more visual a lot more easier understandable um complex issues can be",
    "start": "374720",
    "end": "380000"
  },
  {
    "text": "qualifi uh clarified quite a bit by by graphs if you've ever had to deal with multiple nested Loops in the disassembly",
    "start": "380000",
    "end": "387199"
  },
  {
    "text": "it is quite annoying you'll see that later on with the with the decompilation that using graphs and reducing them",
    "start": "387199",
    "end": "393000"
  },
  {
    "text": "slowly will give you quite of an advantage um well furthermore graphs",
    "start": "393000",
    "end": "400240"
  },
  {
    "text": "directed graphs are the only valid abstraction for single threaded computer code now having a valid abstraction for",
    "start": "400240",
    "end": "406000"
  },
  {
    "text": "something is relatively valuable because you can start doing more sophisticated analysis on it um which means without",
    "start": "406000",
    "end": "412919"
  },
  {
    "text": "the abstraction you can't really do stuff like automatically find bugs and abstraction is the first step to to more",
    "start": "412919",
    "end": "419639"
  },
  {
    "text": "research and grph specifically have been studied quite a bit so you got a whole Library full of relatively um",
    "start": "419639",
    "end": "426479"
  },
  {
    "text": "well-designed or well thought out algorithms which you can use on paths on on graphs for example exhaustive path",
    "start": "426479",
    "end": "433160"
  },
  {
    "text": "path search to see whether there's a path between two nodes and so on and so on um well last but not least graphs are",
    "start": "433160",
    "end": "441960"
  },
  {
    "text": "really easy to generate and well there's lots of tools which display graphs",
    "start": "441960",
    "end": "447120"
  },
  {
    "text": "therefore um you don't need to write too much software on your",
    "start": "447120",
    "end": "451800"
  },
  {
    "text": "own now we'll get to simple flow graphs as I explained before they're pretty much just taking a sequential function",
    "start": "452680",
    "end": "459280"
  },
  {
    "text": "and splitting it up into its control blocks and then drawing ARS arrows between those um",
    "start": "459280",
    "end": "466479"
  },
  {
    "text": "they simplify code understanding they clarify code interdependence and um what I find them",
    "start": "466479",
    "end": "472720"
  },
  {
    "text": "particularly useful for is um the gradual manual decompilation I frequently have to to give people who",
    "start": "472720",
    "end": "478759"
  },
  {
    "text": "are not capable of reading reading the functions themselves um decompiled code",
    "start": "478759",
    "end": "484360"
  },
  {
    "text": "and decompilation is uh well when you do it manually a freaking night Nightmare",
    "start": "484360",
    "end": "489960"
  },
  {
    "text": "and when you do it automatically it's probably even more of a nightmare so",
    "start": "489960",
    "end": "495319"
  },
  {
    "text": "um well we'll play a bit with these first um IDI 4.17 and higher include a",
    "start": "495319",
    "end": "501960"
  },
  {
    "text": "built-in flow graphic plugin which is on the F12 key um unfortunately it does",
    "start": "501960",
    "end": "507879"
  },
  {
    "text": "have um a few disadvantages first of the outputs like the graphs that they",
    "start": "507879",
    "end": "513039"
  },
  {
    "text": "generate are being exported into a file so it's not like you can write a plugin which directly gets the data structure",
    "start": "513039",
    "end": "519320"
  },
  {
    "text": "from Ida and and works with the graph secondly the file is temporary and hard to find so um they're not really very",
    "start": "519320",
    "end": "526200"
  },
  {
    "text": "friendly in telling you where the the file is at um there's more problems with",
    "start": "526200",
    "end": "531800"
  },
  {
    "text": "IDs built in flow graphing engine specifically when it comes to Microsoft's",
    "start": "531800",
    "end": "537560"
  },
  {
    "text": "code but like luckily for us building a function flow graph is really easy you pretty much start by at the beginning of",
    "start": "538000",
    "end": "545200"
  },
  {
    "text": "a function you trace the code downwards and whenever you encounter a local branch like a jump a conditional jump or",
    "start": "545200",
    "end": "552519"
  },
  {
    "text": "a an instruction which was Target of a jump you split the the the um the graph",
    "start": "552519",
    "end": "558560"
  },
  {
    "text": "which means you have a sequential bit of code you pars it down you encounter graph so now there's two ways you could",
    "start": "558560",
    "end": "564839"
  },
  {
    "text": "follow so now you follow both two ways recursively and just go on and on and um",
    "start": "564839",
    "end": "572399"
  },
  {
    "text": "just continue until you find a node which does not have any further down links um you might have to handle switch",
    "start": "572399",
    "end": "578760"
  },
  {
    "text": "cases um well separately because switch cases kind of divert from this normal",
    "start": "578760",
    "end": "584079"
  },
  {
    "text": "scheme you could normally make the Assumption about about computer code that there's always like every note in",
    "start": "584079",
    "end": "589720"
  },
  {
    "text": "the graph only has two down downward errors because it's all only Branch taken or Branch not taken but in the",
    "start": "589720",
    "end": "596800"
  },
  {
    "text": "case of switch statements you have in basically an index into a jump table so all of a sudden you have a node which",
    "start": "596800",
    "end": "602880"
  },
  {
    "text": "can have an arbitary number of of further down links oh well I'll just we all know",
    "start": "602880",
    "end": "610680"
  },
  {
    "text": "these these graphs more or less ideas built in flow graph look something like",
    "start": "610680",
    "end": "617200"
  },
  {
    "text": "this which is a bit nicer to read and um I've built my own graphing",
    "start": "617200",
    "end": "623880"
  },
  {
    "text": "engine which um",
    "start": "623880",
    "end": "629440"
  },
  {
    "text": "has a few advantages uh amongst other syntax highlightening which pretty much does the same thing so",
    "start": "629440",
    "end": "636519"
  },
  {
    "text": "function flow graphs are relatively simple things now Microsoft",
    "start": "636519",
    "end": "642920"
  },
  {
    "text": "um has come up with a relatively original way of optimizing the binaries um recently GCC has started to",
    "start": "642920",
    "end": "650440"
  },
  {
    "text": "do similar things I'll explain that in a minute basically the the idea is that starting from the Pentium 3 it becomes",
    "start": "650440",
    "end": "656600"
  },
  {
    "text": "relatively important that um well well the the pro well the Pentium 3 itself",
    "start": "656600",
    "end": "662120"
  },
  {
    "text": "would cage memory with instructions so it became important that you have as much memory memory as you actually",
    "start": "662120",
    "end": "669040"
  },
  {
    "text": "execute as possible in one spot which means you do not want the the usual way a function looks like anymore I'll",
    "start": "669040",
    "end": "675839"
  },
  {
    "text": "explain this you at the beginning of the function then it jumps over some kind of code into the regular code of itself and",
    "start": "675839",
    "end": "683680"
  },
  {
    "text": "finally finally returns and in between like intermingled with the code that almost always gets executed you have",
    "start": "683680",
    "end": "690519"
  },
  {
    "text": "error handling routines if something goes wrong do this so you got pieces of",
    "start": "690519",
    "end": "696279"
  },
  {
    "text": "code that hardly ever get executed and which are in the same place or which are in the sequential block of the function",
    "start": "696279",
    "end": "702720"
  },
  {
    "text": "so what Microsoft does is they start um generating graphs and set break points on every every graph node and then they",
    "start": "702720",
    "end": "710399"
  },
  {
    "text": "start collecting profiling information which means um they'll see what the usual way the code will go is and if you",
    "start": "710399",
    "end": "718079"
  },
  {
    "text": "have well in thousand executions execute the the regular code instead of the error Handler they decide that you don't",
    "start": "718079",
    "end": "724680"
  },
  {
    "text": "need the error Handler at this location so they cut it out of the function now this is the the length of the function",
    "start": "724680",
    "end": "730240"
  },
  {
    "text": "before their optimization they cut out of the function and move it to a different page so the less trodden path",
    "start": "730240",
    "end": "736720"
  },
  {
    "text": "the path that is usually not taken is moved somewhere completely else and the function itself has shrunk so we got",
    "start": "736720",
    "end": "744120"
  },
  {
    "text": "simp well pages in memory which only contain code which which usually it's",
    "start": "744120",
    "end": "749560"
  },
  {
    "text": "executed which improves the the paging performance of the operating system because you don't have to well page in",
    "start": "749560",
    "end": "755320"
  },
  {
    "text": "and out quite as much and um well improves caging in a in a big way um",
    "start": "755320",
    "end": "761079"
  },
  {
    "text": "recently GCC has started to do similar things where they they start merging blocks of functions basically what the",
    "start": "761079",
    "end": "767800"
  },
  {
    "text": "the compiler does is they analyze all the functions that uh they're generating while compiling and functions um well",
    "start": "767800",
    "end": "775440"
  },
  {
    "text": "all functions have a standard epilogue usually so if there's two functions which at a certain point in their graph",
    "start": "775440",
    "end": "781639"
  },
  {
    "text": "are identical usually at the very end they will merge the code blocks so that",
    "start": "781639",
    "end": "787440"
  },
  {
    "text": "multiple functions have the same bit of code to execute at the end which looks relatively funny",
    "start": "787440",
    "end": "793920"
  },
  {
    "text": "um oh well the the problem with with these um kinds of optimization is they",
    "start": "793920",
    "end": "799600"
  },
  {
    "text": "will totally screw up Ida Ida in its internal engine makes the assumption that functions are sequential bits of",
    "start": "799600",
    "end": "806199"
  },
  {
    "text": "code or sequential pieces of code and that is so deeply into the Ida inside",
    "start": "806199",
    "end": "811800"
  },
  {
    "text": "the Ida kernel that ilac is really dreading to change this and really does not want to do it and um therefore in",
    "start": "811800",
    "end": "819560"
  },
  {
    "text": "these fragmented functions you get neither stack variable tracking you get uh can't even graph them in the first",
    "start": "819560",
    "end": "824880"
  },
  {
    "text": "place with with Ida so there's massive massive problems and it doesn't seem like if",
    "start": "824880",
    "end": "832519"
  },
  {
    "text": "like makes it much of a priority right now I'll demonstrate the problems we have with graphing functions",
    "start": "832519",
    "end": "839880"
  },
  {
    "text": "here we have the the RTL free Heap function in XP and it is fragmented as you see down",
    "start": "839880",
    "end": "847600"
  },
  {
    "text": "there you have multiple well normal function flow graph would would have well um would look like this more or",
    "start": "847600",
    "end": "854160"
  },
  {
    "text": "less would have one point of entry then it would Branch out into many many complex bits of code and then slowly",
    "start": "854160",
    "end": "859839"
  },
  {
    "text": "converge against the return instruction so what we see here is we have the",
    "start": "859839",
    "end": "865000"
  },
  {
    "text": "usually trodden path of code here",
    "start": "865000",
    "end": "871040"
  },
  {
    "text": "and all other Paths of code have been moved elsewhere you have a jump somewhere in the",
    "start": "871800",
    "end": "878839"
  },
  {
    "text": "binary and the grapher really can't deal with this this and Ida can't either so",
    "start": "878839",
    "end": "885600"
  },
  {
    "text": "um this is massively annoying when you have to to decompile like for example a",
    "start": "885600",
    "end": "891680"
  },
  {
    "text": "heap implementation which is something that is uh relatively useful for",
    "start": "891680",
    "end": "896880"
  },
  {
    "text": "exploitation or or finding bugs or similar things so um my graphing engine does",
    "start": "896880",
    "end": "905040"
  },
  {
    "text": "deal with this and by just not making the assumption that a function is",
    "start": "905040",
    "end": "910880"
  },
  {
    "text": "sequential wait a",
    "start": "910880",
    "end": "914199"
  },
  {
    "text": "second I get a nice and complete flow graph of the entire",
    "start": "916440",
    "end": "921800"
  },
  {
    "text": "function which is a bit nicer and um well massively more useful",
    "start": "923199",
    "end": "930480"
  },
  {
    "text": "okay so um I spoke before about the the fact that um simple flow graphs are",
    "start": "938040",
    "end": "943600"
  },
  {
    "text": "useful for manual decompilation manual decompilation is really really really tedious it takes forever it'll burn you",
    "start": "943600",
    "end": "950560"
  },
  {
    "text": "out easily um and the problem is that you need to have a very good",
    "start": "950560",
    "end": "955839"
  },
  {
    "text": "understanding of the structure of the function which you're decompiling so um frequently when you do the sequential",
    "start": "955839",
    "end": "961160"
  },
  {
    "text": "decompilation stuff in in sequential code you make this assumption like oh I'll look at that Branch later and then",
    "start": "961160",
    "end": "967240"
  },
  {
    "text": "you go downwards and this Branch would have changed the entire structure of the function you have to rewrite the decompilation and it all gets messy and",
    "start": "967240",
    "end": "973759"
  },
  {
    "text": "messed up and you have well no clue what's going on anymore secondly it's really hard to track progress with with",
    "start": "973759",
    "end": "980279"
  },
  {
    "text": "de compilation if you do it sequentially because you start reading the code the function seems huge to you and until",
    "start": "980279",
    "end": "985440"
  },
  {
    "text": "you're done you have no clue how far you've progressed so far so this really smashes your motivation in terms of Jesus Christ I've spent two days on this",
    "start": "985440",
    "end": "992480"
  },
  {
    "text": "and I haven't gotten anywhere while in fact you've covered like 90% of the code but you don't know it yet because you haven't reached the end um furthermore",
    "start": "992480",
    "end": "1000519"
  },
  {
    "text": "I'm in the the situation that I have probably a total of about 12 to 13 weeks a year which I can devote to computers",
    "start": "1000519",
    "end": "1008000"
  },
  {
    "text": "um which means in the meantime I'm constantly doing something else which means every time I start something I'll",
    "start": "1008000",
    "end": "1013880"
  },
  {
    "text": "be interrupted and then I'll have to get back to this later like a week later or two weeks later so if you're decompiling",
    "start": "1013880",
    "end": "1018959"
  },
  {
    "text": "something you're really screwed because you start reading this huge function then you have to stop and two weeks later oh did I look at this Branch",
    "start": "1018959",
    "end": "1025480"
  },
  {
    "text": "already have I covered this and sorry it's like I I've have lost so much",
    "start": "1025480",
    "end": "1031438"
  },
  {
    "text": "work for for stopping for a few days and then have having to restart it's not funny anymore um well at that point I",
    "start": "1031439",
    "end": "1039640"
  },
  {
    "text": "got so annoyed that I thought of um using those graphs as a as a visual aid",
    "start": "1039640",
    "end": "1045880"
  },
  {
    "text": "um not the kind of visual aid you think a visual aid would be uh never mind all right so um you what",
    "start": "1045880",
    "end": "1054080"
  },
  {
    "text": "you basically do is you start reading the code and whenever you've understand a certain sorry whenever you've",
    "start": "1054080",
    "end": "1059799"
  },
  {
    "text": "understood a certain um certain bit of code you color the graph blue or whatever you color the graph at that",
    "start": "1059799",
    "end": "1065160"
  },
  {
    "text": "point so the graph will slowly get colored and you see I've taken this branch and so on um and what you do",
    "start": "1065160",
    "end": "1071679"
  },
  {
    "text": "after a while is you basically decompile like you peel an orange um the way the",
    "start": "1071679",
    "end": "1076960"
  },
  {
    "text": "the graph layouting Works graph layouting algorithms will put the more complex bits in the middle of the graph while the simpler paths will be arranged",
    "start": "1076960",
    "end": "1083960"
  },
  {
    "text": "on the outside so something like if condition is wrong return zero will be a",
    "start": "1083960",
    "end": "1089760"
  },
  {
    "text": "path on the very very outer side so you start by peeling this graph you take the outermost branch decompile that one",
    "start": "1089760",
    "end": "1096159"
  },
  {
    "text": "remove it take the outmost branch and so on so by this the graph gets gradually simpler so complex situation lose the",
    "start": "1096159",
    "end": "1103400"
  },
  {
    "text": "the impact they have on you and um it's really really good to see that your progress because you'll see that you're",
    "start": "1103400",
    "end": "1109559"
  },
  {
    "text": "not as slow in decompilation as you think you are because you're actually covering quite a bit of code um as an",
    "start": "1109559",
    "end": "1115360"
  },
  {
    "text": "example we got the the RL fre Heap function in 2K and um it kind of looks messy at",
    "start": "1115360",
    "end": "1123480"
  },
  {
    "text": "first glance I mean I can't really I wouldn't know what kind of C code would generate all that crap in the middle there not right away so I started the",
    "start": "1123480",
    "end": "1131000"
  },
  {
    "text": "first node so we got the the standard function prologue of um well antl functions for",
    "start": "1131000",
    "end": "1138799"
  },
  {
    "text": "for most of this block at the very end they they move some variables around and",
    "start": "1138799",
    "end": "1144360"
  },
  {
    "text": "then they test whether the second AR the third argument to the RTL free Heap is zero or not the third argument to the",
    "start": "1144360",
    "end": "1150400"
  },
  {
    "text": "RTL free Heap is the pointer to the block that's supposed to be freed and if that is a n pointer the well he the free",
    "start": "1150400",
    "end": "1157080"
  },
  {
    "text": "call is not supposed to do anything but just return success",
    "start": "1157080",
    "end": "1163159"
  },
  {
    "text": "so if it is zero it'll Branch to the outermost layer uh node on the very very",
    "start": "1163159",
    "end": "1168960"
  },
  {
    "text": "right side and move al1 which means return",
    "start": "1168960",
    "end": "1174840"
  },
  {
    "text": "success more or less because it move one into eax and then return so we've understood our first bit",
    "start": "1174840",
    "end": "1182360"
  },
  {
    "text": "of code and write it down and then we remove those two nodes which we just",
    "start": "1182360",
    "end": "1188480"
  },
  {
    "text": "covered um well the next node um takes the the pointer to the Heap well the the",
    "start": "1188480",
    "end": "1194120"
  },
  {
    "text": "Heap handle add something to it orse together a few Flags test whether they're their set and if not jumps to",
    "start": "1194120",
    "end": "1201559"
  },
  {
    "text": "the node on the far right the node on the far right does nothing but call arter at free Heap slowly with the same",
    "start": "1201559",
    "end": "1207240"
  },
  {
    "text": "argument as RL fre Heap was called and returns so you decompile that as well which is very",
    "start": "1207240",
    "end": "1212720"
  },
  {
    "text": "simple if Flags or together with the flags in the Heap anded with a certain",
    "start": "1212720",
    "end": "1218640"
  },
  {
    "text": "flag mask have any bit set return AR of fre Heap slowly and then you remove that",
    "start": "1218640",
    "end": "1223960"
  },
  {
    "text": "from the graph as well and it gets simpler you just iterate this over and over again",
    "start": "1223960",
    "end": "1230120"
  },
  {
    "text": "um so graph coloring helps massively to see your progress um it have helps massively to",
    "start": "1230120",
    "end": "1237320"
  },
  {
    "text": "keep track of the amount of code you've covered and make sure you don't miss code branches because what was what happened to me frequently is I was",
    "start": "1237320",
    "end": "1244240"
  },
  {
    "text": "skipping over a branch and telling myself I'll look at this Branch Branch later and then I forgot about it and",
    "start": "1244240",
    "end": "1249760"
  },
  {
    "text": "something important was happening in that branch and I was like hey this isn't my decompiled code what's the matter so um another nice side effect is",
    "start": "1249760",
    "end": "1257760"
  },
  {
    "text": "you can show results because usually if you're spending a lot of time decompiling um the people who are giving you the order to decompile or",
    "start": "1257760",
    "end": "1265480"
  },
  {
    "text": "whatever will not really understand what you're doing you show them nicely colored graphs they will be very",
    "start": "1265480",
    "end": "1272480"
  },
  {
    "text": "happy um another thing is um well the reduction the reduction of the graph",
    "start": "1272480",
    "end": "1279159"
  },
  {
    "text": "really helps coping with with Annoying annoyingly complex situations because the structure of a function can look or",
    "start": "1279159",
    "end": "1285960"
  },
  {
    "text": "can be relatively unobvious at in the beginning um well then the graph redirection helps",
    "start": "1285960",
    "end": "1291400"
  },
  {
    "text": "you in in keeping your morale up in terms of hey I only got six notes to go it's it'll pay off to spend one hour",
    "start": "1291400",
    "end": "1297279"
  },
  {
    "text": "more now and finish this and um it'll make sure that you're working fairly",
    "start": "1297279",
    "end": "1302559"
  },
  {
    "text": "complete as well so as an example I pretty much decompiled AIO free Heap up until um all the nodes which are colored",
    "start": "1302559",
    "end": "1310000"
  },
  {
    "text": "red at which point I I have this situation down there whoa I'm G to make sure I don't",
    "start": "1310000",
    "end": "1315360"
  },
  {
    "text": "trip down here I didn't really know what was going on anymore because I had two",
    "start": "1315360",
    "end": "1320600"
  },
  {
    "text": "branches and they were merging somewhere down there so I decided I'll",
    "start": "1320600",
    "end": "1326360"
  },
  {
    "text": "just reduce the graph and this is what the the new out was like and um the new",
    "start": "1326360",
    "end": "1332799"
  },
  {
    "text": "layout was like whatever and I could just continue working on this it got simpler and simpler over time and um it",
    "start": "1332799",
    "end": "1340400"
  },
  {
    "text": "really helped another application for um for",
    "start": "1340400",
    "end": "1346360"
  },
  {
    "text": "graphs is fuz coverage analysis first off um I have to warn you up front Dave",
    "start": "1346360",
    "end": "1351600"
  },
  {
    "text": "iel and me always have uh well discussions about whether fuz testing is worth",
    "start": "1351600",
    "end": "1357200"
  },
  {
    "text": "anything um I know that like most bugs in close Source software are found using bug fuz testing these days I'm really",
    "start": "1357200",
    "end": "1364279"
  },
  {
    "text": "not much of a fan of the approach of throwing U well trying to boot Force an",
    "start": "1364279",
    "end": "1369679"
  },
  {
    "text": "exponential problem which fuz testing is in its core so um fuzz testing itself is",
    "start": "1369679",
    "end": "1375039"
  },
  {
    "text": "highly inefficient um the problem is if your fuzz tester does not speak exactly the same protocol as your your the",
    "start": "1375039",
    "end": "1381080"
  },
  {
    "text": "application you're you're fuzzing it fail or for example if you have let's say you have two double words a simple",
    "start": "1381080",
    "end": "1388039"
  },
  {
    "text": "protocol we just submit two double words to a server so normally you'd have um",
    "start": "1388039",
    "end": "1393760"
  },
  {
    "text": "two to 64 different variations of arranging all bits in these these double words now if you don't know the protocol",
    "start": "1393760",
    "end": "1401039"
  },
  {
    "text": "correctly or if you don't know that the server will discard your message if the second double word is larger than five",
    "start": "1401039",
    "end": "1408679"
  },
  {
    "text": "brute force all the 2 to 64 to the^ 64 variations while in fact you would only",
    "start": "1408679",
    "end": "1414320"
  },
  {
    "text": "need to do um well Brute Force two to the power of 37 or something now so um",
    "start": "1414320",
    "end": "1421919"
  },
  {
    "text": "that is one problem secondly you'll never find undocumented features or badly documented features and um one",
    "start": "1421919",
    "end": "1429640"
  },
  {
    "text": "would be surprised how many non-documented features there are IIs had a almost completely undocumented remote administr remote Administration",
    "start": "1429640",
    "end": "1436840"
  },
  {
    "text": "language called h HR remember the HDR plus bug a few years ago was actually",
    "start": "1436840",
    "end": "1442559"
  },
  {
    "text": "fairly funny because um what they did is the I web server would decide oh this",
    "start": "1442559",
    "end": "1447640"
  },
  {
    "text": "request has a do HDR at the end and if it has a do HDR at the end we're going to um well throw it into the the HDR",
    "start": "1447640",
    "end": "1455080"
  },
  {
    "text": "paer the HDR parer would take the request and scan for the first argument",
    "start": "1455080",
    "end": "1460279"
  },
  {
    "text": "by scanning for a plus in the string and then execute the file before the plus so by requesting some file. TX",
    "start": "1460279",
    "end": "1468679"
  },
  {
    "text": "plus. HTR you could execute an arbitrary file in the web directory as a remote Administration script the remote",
    "start": "1468679",
    "end": "1474640"
  },
  {
    "text": "Administration scripting language was um relatively powerful and not documented was a freaking pain to",
    "start": "1474640",
    "end": "1480840"
  },
  {
    "text": "disassemble um another problem with f testers is it's really hard to compare them I mean there's lots of people trying to make money off those things",
    "start": "1480840",
    "end": "1488320"
  },
  {
    "text": "these days EI um I don't know I think hel storm is another one so how do you",
    "start": "1488320",
    "end": "1494200"
  },
  {
    "text": "compare products I mean they do black magic they throw large amounts of uh crap at an",
    "start": "1494200",
    "end": "1499760"
  },
  {
    "text": "application um so an analogy a good analogy for for fuzz testing pretty much",
    "start": "1499760",
    "end": "1505360"
  },
  {
    "text": "would be you're trying to shooting bats in a dark apartment and you never know whether you're actually standing in",
    "start": "1505360",
    "end": "1511039"
  },
  {
    "text": "front of a wall or whether you're aiming into the room because it's completely dark so you might be standing in front of the wall and shooting the wall for",
    "start": "1511039",
    "end": "1517159"
  },
  {
    "text": "hours without hitting anything and um we can use graphs to at least um well make",
    "start": "1517159",
    "end": "1524679"
  },
  {
    "text": "you know or make you have a a map of the the dark room so or of the dark apartment so what",
    "start": "1524679",
    "end": "1531080"
  },
  {
    "text": "we're going to do is we're going to do something similar to what Microsoft did we're going to generate a flow graph we're going to set break points on every",
    "start": "1531080",
    "end": "1536640"
  },
  {
    "text": "graph node and then we're going to fuzz the application and whenever our our break points are being hit we're going to color the node so we see which which",
    "start": "1536640",
    "end": "1544640"
  },
  {
    "text": "pieces of code have been touched and which pieces of code have been fed okay so this will have um massive",
    "start": "1544640",
    "end": "1553200"
  },
  {
    "text": "advantages to Conventional fuzz first off um you can measure the amount of code that you've actually covered so you can pair products secondly you can",
    "start": "1553200",
    "end": "1560399"
  },
  {
    "text": "dynamically adjust your your fuzzing mechanisms your scripts or whatever to um cover more code so if you see oh I'm",
    "start": "1560399",
    "end": "1566559"
  },
  {
    "text": "I've sent 20,000 um requests to this application and I have not even touched one more bit of code you just have to",
    "start": "1566559",
    "end": "1573600"
  },
  {
    "text": "look where the branches are and you can determine why certain parts of code are never being touched so",
    "start": "1573600",
    "end": "1580840"
  },
  {
    "text": "um well it's still I still don't like fuz testing and um but it looks nice let's",
    "start": "1580840",
    "end": "1588000"
  },
  {
    "text": "say this way I'll show um",
    "start": "1588000",
    "end": "1594200"
  },
  {
    "text": "so what we have here is a flow graph of the the main user input Handler of an SMTP",
    "start": "1624520",
    "end": "1632640"
  },
  {
    "text": "server and um well the the fact that all lines are blue comes from the fact that",
    "start": "1632640",
    "end": "1638240"
  },
  {
    "text": "my my small debugger which um attaches to the process and pauses the graph and so on tells me it is there and it is",
    "start": "1638240",
    "end": "1645039"
  },
  {
    "text": "attached to this graph and to the application by coloring the blue so what we're going to do now is we're going to",
    "start": "1645039",
    "end": "1651720"
  },
  {
    "text": "connect to part 25 and try a few",
    "start": "1651720",
    "end": "1657679"
  },
  {
    "text": "things and we can see which nodes have been touched",
    "start": "1662679",
    "end": "1668399"
  },
  {
    "text": "we see that the graph gets Bluer and Bluer over time",
    "start": "1686080",
    "end": "1691240"
  },
  {
    "text": "all right so that's pretty much",
    "start": "1709279",
    "end": "1713679"
  },
  {
    "text": "it any questions so far",
    "start": "1715760",
    "end": "1723720"
  },
  {
    "text": "okay all right let's move on to something more interesting um pointer and control flow",
    "start": "1725640",
    "end": "1731760"
  },
  {
    "text": "graphs um well one of the problems when you're dealing with automated binary analysis is that lot of information from",
    "start": "1731760",
    "end": "1739120"
  },
  {
    "text": "the compilation process is being lost specifically all information about structure data layout now um most",
    "start": "1739120",
    "end": "1745919"
  },
  {
    "text": "overruns or most data is not stored in the stack somewhere but in in some kind",
    "start": "1745919",
    "end": "1751440"
  },
  {
    "text": "of dynamically allocated Heap structure and there's buffers in Heap structures and pointers in Heap structures and so on so if you look for buffer overuns",
    "start": "1751440",
    "end": "1758320"
  },
  {
    "text": "you'll have to do Heap like or buffer size arithmetics you need to check whether well the The Source buffer of",
    "start": "1758320",
    "end": "1763640"
  },
  {
    "text": "the string copy is larger than the target buffer and all these kind of things so without knowing",
    "start": "1763640",
    "end": "1768880"
  },
  {
    "text": "the size of individual structure members you'll have a relatively hard time of of doing anything useful so um normally one",
    "start": "1768880",
    "end": "1777200"
  },
  {
    "text": "would need to reconstruct these structures manually and I actually two years ago I was still doing that more or less not two well two and a half years",
    "start": "1777200",
    "end": "1783799"
  },
  {
    "text": "ago and I spent literally weeks reconstructing structures in applications I'd identify a pointer",
    "start": "1783799",
    "end": "1789480"
  },
  {
    "text": "structure and then I'd walk forwards through the application seeing where this pointer goes and while adding",
    "start": "1789480",
    "end": "1795000"
  },
  {
    "text": "structure members in Ida and it took forever and then while once I was done the next update was out and structure",
    "start": "1795000",
    "end": "1801440"
  },
  {
    "text": "changed subtly and I'd have to do it again so um when can use specialized",
    "start": "1801440",
    "end": "1807159"
  },
  {
    "text": "graphs to to solve this problem pretty",
    "start": "1807159",
    "end": "1810919"
  },
  {
    "text": "nicely um first off we need to identify a pointer to a structure identifying a",
    "start": "1813519",
    "end": "1819480"
  },
  {
    "text": "pointer to a structure is really not hard there have some pointer where there's a positive offset from it um",
    "start": "1819480",
    "end": "1825360"
  },
  {
    "text": "somebody's either accessing uh a specific spe member or a specific um index into an array or a structure but",
    "start": "1825360",
    "end": "1832960"
  },
  {
    "text": "for all practical practical Pur purposes an array is a structure as well it's just a structure with well the same",
    "start": "1832960",
    "end": "1839440"
  },
  {
    "text": "structure members over and over so whenever you see a positive offset from from a pointer you know you most likely",
    "start": "1839440",
    "end": "1846039"
  },
  {
    "text": "have some kind of structure so the only thing you need to do is well identify a",
    "start": "1846039",
    "end": "1851159"
  },
  {
    "text": "pointer and then follow it wherever it goes um which is the the more work",
    "start": "1851159",
    "end": "1856720"
  },
  {
    "text": "intense part but if you follow it to all the locations in the in the in the program",
    "start": "1856720",
    "end": "1862600"
  },
  {
    "text": "where a bit of code has control of this pointer and then identify all positive offset from this pointer you have a",
    "start": "1862600",
    "end": "1868039"
  },
  {
    "text": "relatively accurate um description or or representation of what the structure would have looked",
    "start": "1868039",
    "end": "1874760"
  },
  {
    "text": "like so um building these pointer control flow graphs is not that hard either um more or less you start",
    "start": "1874760",
    "end": "1881760"
  },
  {
    "text": "tracking code at a certain location and for example start tracking a specific register e or whatever so you trace the",
    "start": "1881760",
    "end": "1889120"
  },
  {
    "text": "code downwards until you reach either local branch or read or write access to",
    "start": "1889120",
    "end": "1894399"
  },
  {
    "text": "your variable or optionally a far Branch meaning a call into a sub function you might want to recurse into the",
    "start": "1894399",
    "end": "1899760"
  },
  {
    "text": "subfunction subfunctions but I'll explain that in a few",
    "start": "1899760",
    "end": "1906398"
  },
  {
    "text": "minutes so if you encounter any of the above situations um you'll need to do",
    "start": "1907080",
    "end": "1914360"
  },
  {
    "text": "different things in case of a local branch you don't really care you do the same thing as you do with the flow graph",
    "start": "1914360",
    "end": "1920799"
  },
  {
    "text": "because you want your data flow analysis to be um well flow sensitive you want to know um well if there's a branch and a",
    "start": "1920799",
    "end": "1928799"
  },
  {
    "text": "certain bit of code is being skipped and so on now you just do the same as with a normal graphs in that case secondly if",
    "start": "1928799",
    "end": "1935840"
  },
  {
    "text": "you have a right to your register um you bought the tracing because the pointer you're tracking is no longer there it",
    "start": "1935840",
    "end": "1941399"
  },
  {
    "text": "has been overr um in case you have a read from your from the variable or register",
    "start": "1941399",
    "end": "1946799"
  },
  {
    "text": "you're tracking you split the graph and now you follow both the target of the read and the source of the read which",
    "start": "1946799",
    "end": "1953480"
  },
  {
    "text": "means if I if I trace e and I see an instruction like move ebx e I'll have to",
    "start": "1953480",
    "end": "1958840"
  },
  {
    "text": "trace both ebx and eex afterwards um if I see a move to a structure I'll have to trace both the",
    "start": "1958840",
    "end": "1965679"
  },
  {
    "text": "new structure variable which it was moved into and E afterwards if I see a move or a push I'll have to take care of",
    "start": "1965679",
    "end": "1973039"
  },
  {
    "text": "that as well and in case of a nonlocal branch of a far branch more or less into",
    "start": "1973039",
    "end": "1978480"
  },
  {
    "text": "a sub function you might want to decide or you'll have to decide whether you want to recurse or",
    "start": "1978480",
    "end": "1984039"
  },
  {
    "text": "not um tracking passing of arguments into sub functions on x86 can be a bit",
    "start": "1984039",
    "end": "1989240"
  },
  {
    "text": "annoying due to the x86 way of passing arguments namely on the stack so you have to track quite a bit there the code",
    "start": "1989240",
    "end": "1996320"
  },
  {
    "text": "gets really really annoying oh wait I'm going to far",
    "start": "1996320",
    "end": "2005000"
  },
  {
    "text": "so going back to the the SMTP server which we have this is the the main user",
    "start": "2011000",
    "end": "2016240"
  },
  {
    "text": "Handler which we just um colored in the graph and um down",
    "start": "2016240",
    "end": "2023638"
  },
  {
    "text": "here is that readable well um down here we see that Arc four is being well um",
    "start": "2024320",
    "end": "2031279"
  },
  {
    "text": "loaded then an positive offset from Ark four is being added to it to calculate an address of a buffer inside the",
    "start": "2031279",
    "end": "2037200"
  },
  {
    "text": "structure and then s strr CHR is being called on it so um somebody is looking",
    "start": "2037200",
    "end": "2042760"
  },
  {
    "text": "for a new line character in that buffer which is inside of a structure so you",
    "start": "2042760",
    "end": "2048720"
  },
  {
    "text": "already think that this will be a structure and down here we see um see even more positive aises from",
    "start": "2048720",
    "end": "2056079"
  },
  {
    "text": "the pointer in ar4 ar4 Lo in edx positive offset some values being moved there so um in the old days one would",
    "start": "2056079",
    "end": "2064878"
  },
  {
    "text": "start now by going into the structures we know window of Ida creating a new",
    "start": "2064879",
    "end": "2070839"
  },
  {
    "text": "structure start adding a structure member namely at offset what was it",
    "start": "2070839",
    "end": "2076599"
  },
  {
    "text": "again um b8x which is",
    "start": "2076599",
    "end": "2082720"
  },
  {
    "text": "2824 so we first generate an area of 28 to four bytes and the next structure",
    "start": "2082720",
    "end": "2088638"
  },
  {
    "text": "member would be or the next one would be RS so we then go back hit",
    "start": "2088639",
    "end": "2095398"
  },
  {
    "text": "T make it a structure member scroll down see the next one 4872 so we go to the structures",
    "start": "2095399",
    "end": "2102760"
  },
  {
    "text": "window do the calculation 4872 minus 2 28 to4 and at the next one and we'd",
    "start": "2102760",
    "end": "2109119"
  },
  {
    "text": "repeat that for ever and ever and if this pointer gets me gets passed into sub functions into a sub function we'd",
    "start": "2109119",
    "end": "2114880"
  },
  {
    "text": "need to track that as well and we'd grow old and wrinkly and um we' never get",
    "start": "2114880",
    "end": "2122200"
  },
  {
    "text": "anywhere so um well I've written a plugin about",
    "start": "2122200",
    "end": "2129119"
  },
  {
    "text": "a long time ago I can remember working on the plugin on 911 because I was sitting on my desk when my flat Knight",
    "start": "2129119",
    "end": "2135400"
  },
  {
    "text": "came in never mind so um I think I was done sometime around that point well",
    "start": "2135400",
    "end": "2141960"
  },
  {
    "text": "it's old that's what I wanted to say um so you run it in Ida you hit alt one you",
    "start": "2141960",
    "end": "2147640"
  },
  {
    "text": "get this nice dialogue which tells you at which location to start tracking something you tell it the name of the structure you want to",
    "start": "2147640",
    "end": "2154880"
  },
  {
    "text": "create you tell it which stack variable or register to trace in our case it's",
    "start": "2154880",
    "end": "2160480"
  },
  {
    "text": "arc4 and you tell it push recursion which means um please recurs into sub",
    "start": "2160480",
    "end": "2166440"
  },
  {
    "text": "functions but only C declar declaration this plugin supports um both tracking",
    "start": "2166440",
    "end": "2172160"
  },
  {
    "text": "into sub functions through registers and On The Stack because um in C++ code for",
    "start": "2172160",
    "end": "2177280"
  },
  {
    "text": "example the this pointer to an object will be passed and register most likely while all arguments to a method will be",
    "start": "2177280",
    "end": "2182760"
  },
  {
    "text": "passed on the stack and you will want to be able to parse both so full recursion would mean",
    "start": "2182760",
    "end": "2188359"
  },
  {
    "text": "P like PS both um in our case we have a c declaration program no C++ code no",
    "start": "2188359",
    "end": "2194400"
  },
  {
    "text": "fast call calling convention so no register is being used to pass arguments which means we can use push push",
    "start": "2194400",
    "end": "2201079"
  },
  {
    "text": "recursion so we hit enter uh wait a second we'll go for no recursion",
    "start": "2201079",
    "end": "2206960"
  },
  {
    "text": "first which runs through and generates the first approximation of the structure",
    "start": "2206960",
    "end": "2216079"
  },
  {
    "text": "which is already not that",
    "start": "2219680",
    "end": "2222760"
  },
  {
    "text": "bad as you can see we just saved ourselves quite a bit of",
    "start": "2226599",
    "end": "2232078"
  },
  {
    "text": "work and we see typical sizes that would be actually used in the structure 128 bytes 248 256 bytes and so on",
    "start": "2232359",
    "end": "2242599"
  },
  {
    "text": "so we've now more or less reconstructed the structure and the nice thing is we",
    "start": "2242599",
    "end": "2247640"
  },
  {
    "text": "to the fact Ida works we get cross references for structure members as well",
    "start": "2247640",
    "end": "2252680"
  },
  {
    "text": "which is relatively useful if you're tracking pointers backwards um I'll see whe I can find one",
    "start": "2252680",
    "end": "2258680"
  },
  {
    "text": "of the the graphs which it generated in the way on the",
    "start": "2258680",
    "end": "2264319"
  },
  {
    "text": "way oh no that's not it we'll have to do this again to see",
    "start": "2270079",
    "end": "2277079"
  },
  {
    "text": "what there's",
    "start": "2277079",
    "end": "2279440"
  },
  {
    "text": "graph oh no my mistake sorry got to do it again",
    "start": "2284680",
    "end": "2292680"
  },
  {
    "text": "H I'm a bit confused right now I'll be better in a",
    "start": "2308680",
    "end": "2313760"
  },
  {
    "text": "minute ah oh I hope the program will be able to",
    "start": "2324640",
    "end": "2333400"
  },
  {
    "text": "display the graph because it's gotten relatively large",
    "start": "2333400",
    "end": "2339440"
  },
  {
    "text": "H okay um let's say it this way 300K graphs are most likely not easily displayed the problem is that um the the",
    "start": "2342280",
    "end": "2350520"
  },
  {
    "text": "main handling function does quite a bit of of ACC or does quite a bit of passing through this pointer or give it to",
    "start": "2350520",
    "end": "2356280"
  },
  {
    "text": "structures and so on and so on so the graph is massively more complex than a regular flow graph because it",
    "start": "2356280",
    "end": "2362240"
  },
  {
    "text": "incorporates both the information from the regular flow and additionally the information from which register",
    "start": "2362240",
    "end": "2368200"
  },
  {
    "text": "keeps it at this point in time if you have the the same variable being passed into three registers in the course of",
    "start": "2368200",
    "end": "2373680"
  },
  {
    "text": "time and used throughout most of the function your graph Grows by factor three as well because every flow is",
    "start": "2373680",
    "end": "2380040"
  },
  {
    "text": "being duplicated all right um doesn't really",
    "start": "2380040",
    "end": "2385800"
  },
  {
    "text": "matter we'll just delete this here and delete this as",
    "start": "2387119",
    "end": "2392280"
  },
  {
    "text": "well and then we'll run the the plugin again this time with full recursion down or with full p",
    "start": "2392280",
    "end": "2399319"
  },
  {
    "text": "recursion which should get give us a better approximation than the one we originally",
    "start": "2401359",
    "end": "2410200"
  },
  {
    "text": "had we see that oh we'll first collapse everything and then we'll",
    "start": "2416480",
    "end": "2423200"
  },
  {
    "text": "see we can see that the more code we we cover the more accurate our representation gets as um if you cover",
    "start": "2425160",
    "end": "2432400"
  },
  {
    "text": "pretty much all code in the application which uses this particular pointer or which uses this uh the structure in",
    "start": "2432400",
    "end": "2438359"
  },
  {
    "text": "general you can be relatively sure that you haven't missed much because I mean what sense would it make to have",
    "start": "2438359",
    "end": "2444640"
  },
  {
    "text": "structures of which you don't use the members or which doesn't mean that it doesn't",
    "start": "2444640",
    "end": "2451880"
  },
  {
    "text": "happen but um well anyhow this is uh massively",
    "start": "2451880",
    "end": "2458200"
  },
  {
    "text": "better representation than the one we had above and it means that the quality",
    "start": "2458200",
    "end": "2464119"
  },
  {
    "text": "of your reconstruction improves with the amount of code you cover so um let's speak a little bit",
    "start": "2464119",
    "end": "2470160"
  },
  {
    "text": "about class reconstruction um basically what is a Class A Class is nothing but a data",
    "start": "2470160",
    "end": "2475599"
  },
  {
    "text": "structure associated with a bunch of methods which are a bunch of functions so more or less if you just pars all",
    "start": "2475599",
    "end": "2481760"
  },
  {
    "text": "these functions or pars a bunch of functions you can reconstruct the class as well like the class data layout and",
    "start": "2481760",
    "end": "2486839"
  },
  {
    "text": "all function have the pointer to the like all methods have the pointer to the fun to the structure in the this pointer",
    "start": "2486839",
    "end": "2493000"
  },
  {
    "text": "which is on a visual C ECX usually and or on on GCC the first argument on the",
    "start": "2493000",
    "end": "2498760"
  },
  {
    "text": "stack so um we'll I'll demonstrate this at the",
    "start": "2498760",
    "end": "2503839"
  },
  {
    "text": "with the HTTP request",
    "start": "2503839",
    "end": "2508520"
  },
  {
    "text": "Constructor all right so this is the Constructor to the HTTP request and um what we can see here",
    "start": "2509800",
    "end": "2516560"
  },
  {
    "text": "first off the HTTP request is directly derived from HTTP request base because the Constructor just chains through to",
    "start": "2516560",
    "end": "2522839"
  },
  {
    "text": "http request base and then afterwards adds a adds a few initialization things",
    "start": "2522839",
    "end": "2528960"
  },
  {
    "text": "for its um for its own variables which the base version or the the basic",
    "start": "2528960",
    "end": "2535000"
  },
  {
    "text": "version didn't have so what you're going to do or what we're going to do is run the plugin for",
    "start": "2535000",
    "end": "2541400"
  },
  {
    "text": "now with no recursion and um",
    "start": "2541400",
    "end": "2547760"
  },
  {
    "text": "uh that's just the graph L program that died in the background and we're going to track",
    "start": "2547760",
    "end": "2553720"
  },
  {
    "text": "ECX so we see we've reconstructed this part",
    "start": "2553720",
    "end": "2560000"
  },
  {
    "text": "here and we can also see whoops I'm delete",
    "start": "2560000",
    "end": "2565838"
  },
  {
    "text": "this okay we got to run this again sorry call it HTP request run it with",
    "start": "2570760",
    "end": "2578960"
  },
  {
    "text": "ECX hit enter and look at the structure and",
    "start": "2578960",
    "end": "2584680"
  },
  {
    "text": "um from this point we can already see what the size of HTP request base more or less is because our structure looks",
    "start": "2584680",
    "end": "2592000"
  },
  {
    "text": "like this in the Constructor which indicates that there's",
    "start": "2592000",
    "end": "2599240"
  },
  {
    "text": "um the HTP request base of size 2656 and then a bunch of other things",
    "start": "2599240",
    "end": "2605319"
  },
  {
    "text": "like variables which the original structure of which or the original class of which this class is derived does not",
    "start": "2605319",
    "end": "2610480"
  },
  {
    "text": "have so yeah that's pretty much one thing we can look at the graph",
    "start": "2610480",
    "end": "2617760"
  },
  {
    "text": "which was generated which looks like this I'll flip back to",
    "start": "2617760",
    "end": "2623559"
  },
  {
    "text": "aa oh the address aren't quite right so we'll have to look at the this one",
    "start": "2624040",
    "end": "2630319"
  },
  {
    "text": "here okay so this is the pointer control flow graph generated for this this small",
    "start": "2630319",
    "end": "2636400"
  },
  {
    "text": "Constructor basically tells us that from 65 d52 a 5B to do uh 65 d52 a 5e the",
    "start": "2636400",
    "end": "2646480"
  },
  {
    "text": "register ECX is the only register which holds the pointer to our class we can verify this from here to",
    "start": "2646480",
    "end": "2654800"
  },
  {
    "text": "here ECX is the only register which holds the pointer then we have a move ESI ECX which means ECX is being moved",
    "start": "2654800",
    "end": "2661000"
  },
  {
    "text": "into SII which means um we now have two registers holding it so from 65 d52 a60",
    "start": "2661000",
    "end": "2669119"
  },
  {
    "text": "to 65 d52 a7a that um it's in the register",
    "start": "2669119",
    "end": "2677160"
  },
  {
    "text": "ECX from 60 to 7A where ECX gets overwritten down",
    "start": "2677480",
    "end": "2686640"
  },
  {
    "text": "here um well and from 60 to D4 which means 60 up here D4 is way at the bottom",
    "start": "2688240",
    "end": "2696319"
  },
  {
    "text": "it is an SI I where it gets moved into eex where the the the last split at the",
    "start": "2696319",
    "end": "2702079"
  },
  {
    "text": "very bottom and the graph comes from so just to to illustrate on what is the",
    "start": "2702079",
    "end": "2707160"
  },
  {
    "text": "underlying methodology under the the object reconstructor okay now other interesting",
    "start": "2707160",
    "end": "2714839"
  },
  {
    "text": "things we can do is um well I'll get to that later um right",
    "start": "2714839",
    "end": "2721599"
  },
  {
    "text": "now we're going to reconstruct the entire class not just the the top Mouse class but we're going to reconstruct the",
    "start": "2721599",
    "end": "2727960"
  },
  {
    "text": "well we're going to recurse into all Sub sub functions which means we're not only reconstructing HP request but HP request",
    "start": "2727960",
    "end": "2735079"
  },
  {
    "text": "base in one one big swoop so we just check full recursion call it HTP request",
    "start": "2735079",
    "end": "2742319"
  },
  {
    "text": "or call HP rig to let it run it'll take a while because it has a little bit more",
    "start": "2742319",
    "end": "2748880"
  },
  {
    "text": "code to cover and I'm getting entangled in all these cables here",
    "start": "2748880",
    "end": "2755078"
  },
  {
    "text": "jeez now not a dance dance act on stage all",
    "start": "2755760",
    "end": "2762160"
  },
  {
    "text": "right and here we go and we see",
    "start": "2762160",
    "end": "2767400"
  },
  {
    "text": "that the structure is fairly accurately reconstructed we see it",
    "start": "2767400",
    "end": "2774079"
  },
  {
    "text": "mostly contains",
    "start": "2774079",
    "end": "2776760"
  },
  {
    "text": "pointers with a few buffers in",
    "start": "2779520",
    "end": "2783400"
  },
  {
    "text": "between all right so we just can continue or we'll just continue for a",
    "start": "2785359",
    "end": "2792599"
  },
  {
    "text": "bit",
    "start": "2792599",
    "end": "2794880"
  },
  {
    "text": "here oh well okay so so much for for single function or",
    "start": "2813839",
    "end": "2820160"
  },
  {
    "text": "Constructor class where construction generally it's a good idea to to start with a Constructor because by very",
    "start": "2820160",
    "end": "2825680"
  },
  {
    "text": "definition a programmer should initialize all class members in the Constructor because otherwise things",
    "start": "2825680",
    "end": "2833160"
  },
  {
    "text": "will get very dangerous later on when certain methods are being called without the the class members being initialized um therefore it is a good",
    "start": "2833160",
    "end": "2840440"
  },
  {
    "text": "idea to start with the Constructor because if it has to access all structure or all class members therefore",
    "start": "2840440",
    "end": "2846160"
  },
  {
    "text": "we'll get relatively good representation um now the next thing you",
    "start": "2846160",
    "end": "2852200"
  },
  {
    "text": "can do is um oh wait just an example of how ugly a",
    "start": "2852200",
    "end": "2857920"
  },
  {
    "text": "graph can get this is a graph of um well the the this pointer all the way through the entire HTTP request Constructor",
    "start": "2857920",
    "end": "2865680"
  },
  {
    "text": "so uh yeah it's ugly so the next thing you can do is vtable pausing V tables are tables in",
    "start": "2865680",
    "end": "2873880"
  },
  {
    "text": "which all virtual methods of uh class are being being stored which is good for us because it's a well basically an",
    "start": "2873880",
    "end": "2879960"
  },
  {
    "text": "array of functions which all operate on the same data structure and which all have the pointer to the stucture in the",
    "start": "2879960",
    "end": "2885359"
  },
  {
    "text": "same register so by pausing the entire V table we get a very very accurate",
    "start": "2885359",
    "end": "2891079"
  },
  {
    "text": "representation um this will work like this we look for uh the HTP request V",
    "start": "2891079",
    "end": "2899240"
  },
  {
    "text": "table here it",
    "start": "2905760",
    "end": "2909079"
  },
  {
    "text": "is and we check the vtable paing mode which means the plugin will call every",
    "start": "2914960",
    "end": "2921160"
  },
  {
    "text": "function in the vtable with the same settings as this so you don't have to manually go on every function and so on",
    "start": "2921160",
    "end": "2927000"
  },
  {
    "text": "so you just hit enter let run ignore all the warning messages it",
    "start": "2927000",
    "end": "2934240"
  },
  {
    "text": "turns out and",
    "start": "2934240",
    "end": "2938280"
  },
  {
    "text": "one second and you get this reconstruction",
    "start": "2941480",
    "end": "2948559"
  },
  {
    "text": "here which is most likely about as accurate if not more or well about as accurate as the The",
    "start": "2950760",
    "end": "2957680"
  },
  {
    "text": "Constructor now what you can use this for is automatic detection of some bugs already because you can automatically",
    "start": "2957680",
    "end": "2964319"
  },
  {
    "text": "detect now whether all structure members have been initialized properly um basically you do it by like",
    "start": "2964319",
    "end": "2970640"
  },
  {
    "text": "this you you start reconstructing the structure once using the Constructor and then once using the V table and if the",
    "start": "2970640",
    "end": "2976960"
  },
  {
    "text": "structure Rec construction which you got from the V table has structure members defined which the one from the Constructor didn't you know there's",
    "start": "2976960",
    "end": "2983640"
  },
  {
    "text": "members in this class which have not been properly initialized in the Constructor so um just as a need thing",
    "start": "2983640",
    "end": "2990960"
  },
  {
    "text": "to do so to sum this part of the talk up um",
    "start": "2990960",
    "end": "2999240"
  },
  {
    "text": "well we can automatically uh automatically reconstruct data layouts of structures and classes by doing well",
    "start": "2999240",
    "end": "3006760"
  },
  {
    "text": "by doing forward data flow through the application um we can get graphs which",
    "start": "3006760",
    "end": "3012040"
  },
  {
    "text": "will crash the graph displaying program um now another interesting thing is RPC interfaces such as com dcom com plus um",
    "start": "3012040",
    "end": "3022000"
  },
  {
    "text": "pretty much export something called interfaces interfaces are nothing but VTS",
    "start": "3022000",
    "end": "3027319"
  },
  {
    "text": "so we can very very reliably automatically reconstruct com objects and decom objects which is very",
    "start": "3027319",
    "end": "3033920"
  },
  {
    "text": "nice um something which I want to do in the future which is down there in blue is um well after the Reconstruction I'm",
    "start": "3033920",
    "end": "3042000"
  },
  {
    "text": "going to use the type info from the binary to reconstruct the type of the the the individual structure members",
    "start": "3042000",
    "end": "3047839"
  },
  {
    "text": "which means if you have a string copy for example being called on a structure member I know this structure member is a",
    "start": "3047839",
    "end": "3052920"
  },
  {
    "text": "buffer a Char array or if I have a pointer in the structure on which which",
    "start": "3052920",
    "end": "3058040"
  },
  {
    "text": "is being passed into a string copy I know this is a chart pointer and so on and so on so you don't only get the the",
    "start": "3058040",
    "end": "3063160"
  },
  {
    "text": "data layout but you get the data types as well um this will not be done on on",
    "start": "3063160",
    "end": "3068359"
  },
  {
    "text": "this code though because I'll show at the end of the the talk I'm working on something to make the the object",
    "start": "3068359",
    "end": "3074640"
  },
  {
    "text": "construction CPU independent so it'll work not only on x86 but on spark PA risk and power PC as",
    "start": "3074640",
    "end": "3081640"
  },
  {
    "text": "well any questions concerning this so far",
    "start": "3081760",
    "end": "3087040"
  },
  {
    "text": "none can't believe I'm that",
    "start": "3089640",
    "end": "3093440"
  },
  {
    "text": "clear all right um last part of the talk buffer definition",
    "start": "3097480",
    "end": "3103319"
  },
  {
    "text": "graphs um the problem is well the problem which prompted me or which I was",
    "start": "3103319",
    "end": "3108400"
  },
  {
    "text": "prompted with to to come up with this was I need to do buffer siiz arithmetics and I had string copy calls and other",
    "start": "3108400",
    "end": "3114599"
  },
  {
    "text": "calls and I didn't know where the pointers which are being passed into this call came from so I had to manually",
    "start": "3114599",
    "end": "3120480"
  },
  {
    "text": "Trace upwards which is a bit like the forwards tracing of the pointer for for the object reconstruction where you um",
    "start": "3120480",
    "end": "3127040"
  },
  {
    "text": "Oh there's uh the first argument to this function is being passed into the string copy so you look at the 50 different",
    "start": "3127040",
    "end": "3132799"
  },
  {
    "text": "locations where this function is being called and start tracing from every of the 50 locations upwards what the first",
    "start": "3132799",
    "end": "3137920"
  },
  {
    "text": "argument was and all those 50 locations are being called from another three locations which um all take another or",
    "start": "3137920",
    "end": "3145920"
  },
  {
    "text": "which all give you a different CH pointer and order to verify that this string copy truly is not dangerous I had",
    "start": "3145920",
    "end": "3150960"
  },
  {
    "text": "to verify whether um for all given all possible code paths there's no way that",
    "start": "3150960",
    "end": "3156359"
  },
  {
    "text": "a smaller buffer is being used as a t well is being passed into than the target buffer than the source buffer",
    "start": "3156359",
    "end": "3162079"
  },
  {
    "text": "sorry so um basically you need uh some kind of inverse data flow to find out where the",
    "start": "3162079",
    "end": "3169599"
  },
  {
    "text": "data which is being passed into problematic functions is coming from again we have specialized graphs which",
    "start": "3169599",
    "end": "3176720"
  },
  {
    "text": "might help um the the building of these graphs of the in inverse data flow",
    "start": "3176720",
    "end": "3184480"
  },
  {
    "text": "graphs is very very similar to the to the forward data flow you trace upwards",
    "start": "3184480",
    "end": "3189760"
  },
  {
    "text": "until you encounter either an instruction which gos Target of a branch or an instruction um which writes",
    "start": "3189760",
    "end": "3197160"
  },
  {
    "text": "to your current register or an an instruction which loads from your current register or until you get um",
    "start": "3197160",
    "end": "3205680"
  },
  {
    "text": "well a call and your current register is like eax so the return value of the function",
    "start": "3205680",
    "end": "3212839"
  },
  {
    "text": "so basically um if your current instruction was the target of a branch",
    "start": "3212839",
    "end": "3219040"
  },
  {
    "text": "you've pretty much um found the inverse of the normal branch which means if you take the normal flow graph which we had",
    "start": "3219040",
    "end": "3225119"
  },
  {
    "text": "before and flip it upside down all of a sudden all the the down errors become up errors now if you flip all the errors in",
    "start": "3225119",
    "end": "3231040"
  },
  {
    "text": "direction as well all the instructions which are targets of a branch are being are actually the the down links in the",
    "start": "3231040",
    "end": "3238359"
  },
  {
    "text": "graph which means um if I'm tracing upwards in the code and there's an instruction which is the target of a",
    "start": "3238359",
    "end": "3243799"
  },
  {
    "text": "branch I of course have multiple ways of reaching this location because it's the normal normal code flow which is",
    "start": "3243799",
    "end": "3249680"
  },
  {
    "text": "sequential and then the target of the branch so I split the graph in the way I I do with with the forward graphing um",
    "start": "3249680",
    "end": "3257599"
  },
  {
    "text": "if my current register is written to from another variable I just go to the other variable and Trace upwards from",
    "start": "3257599",
    "end": "3262640"
  },
  {
    "text": "there like if um eax is being tracked and it's being written from ebx I take",
    "start": "3262640",
    "end": "3268160"
  },
  {
    "text": "ebx and Trace upwards um if my current register is loaded with something I have to analyze",
    "start": "3268160",
    "end": "3273839"
  },
  {
    "text": "the situation and see what's going on there for example if I have an load effective address of some buffer then",
    "start": "3273839",
    "end": "3280680"
  },
  {
    "text": "obviously I found the buffer definition so I'm done I color the Note blue hey",
    "start": "3280680",
    "end": "3286160"
  },
  {
    "text": "I'm done and um quit tracking um well if the current register is the return value",
    "start": "3286160",
    "end": "3292720"
  },
  {
    "text": "of a function you have two two options basically the the register being the return value of a function is the",
    "start": "3292720",
    "end": "3298880"
  },
  {
    "text": "equivalent well or is the inverse of the function being or an argument being passed into a sub function it's just the",
    "start": "3298880",
    "end": "3305319"
  },
  {
    "text": "argument is coming out of a sub function now or the the value has been coming out of Sub sub function so you can decide to",
    "start": "3305319",
    "end": "3311280"
  },
  {
    "text": "either POS into the function which returns this value which I'm not doing right now or alternatively just stop",
    "start": "3311280",
    "end": "3317680"
  },
  {
    "text": "problem problem is that if you have a function like the Str strr CHR um if you try to trace upwards",
    "start": "3317680",
    "end": "3324200"
  },
  {
    "text": "through the through this function um you'll very easily get lost so it's a",
    "start": "3324200",
    "end": "3329960"
  },
  {
    "text": "more clever idea to just quit at a certain point and color the node red and um well rely on the users to",
    "start": "3329960",
    "end": "3337599"
  },
  {
    "text": "something such a graph would look kind of like this we're tracking from a certain location and it finds four",
    "start": "3337599",
    "end": "3343119"
  },
  {
    "text": "buffer definitions for a given CH pointer I'll demonstrate that",
    "start": "3343119",
    "end": "3350920"
  },
  {
    "text": "okay what we have here is a call to string copy we have a buffer as a source",
    "start": "3361720",
    "end": "3368200"
  },
  {
    "text": "of 512 bytes and a pointer for the Target and we do not know where this pointer is",
    "start": "3368200",
    "end": "3374200"
  },
  {
    "text": "coming from it is the first argument to this function so normally we need to trace upwards all this code to the",
    "start": "3374200",
    "end": "3380960"
  },
  {
    "text": "beginning of the function then see where this function is been called from and iterate for every cross reference to",
    "start": "3380960",
    "end": "3386359"
  },
  {
    "text": "this function and find out where it's coming from so instead I'll run this",
    "start": "3386359",
    "end": "3391799"
  },
  {
    "text": "plugin and tell it to track backwards namely register e at the current",
    "start": "3391799",
    "end": "3398079"
  },
  {
    "text": "location the plugin generates such a graph here",
    "start": "3398079",
    "end": "3407720"
  },
  {
    "text": "and tells me the first argument is defined at 40601 e which is here and we",
    "start": "3416559",
    "end": "3423000"
  },
  {
    "text": "see that the buffer is 1,24 bytes",
    "start": "3423000",
    "end": "3427760"
  },
  {
    "text": "large so 512 as a source 1,24 as a Target is not",
    "start": "3428559",
    "end": "3435319"
  },
  {
    "text": "problematic the second buffer definition is at",
    "start": "3435319",
    "end": "3439720"
  },
  {
    "text": "40609 again 1,24 bytes not problematic the next definition is at 40626",
    "start": "3442319",
    "end": "3450558"
  },
  {
    "text": "F which is again 1,24 bytes so no problem now let's have another",
    "start": "3452359",
    "end": "3460680"
  },
  {
    "text": "example again we have a string copy this time with a Target buffer of 10,24 bytes",
    "start": "3460680",
    "end": "3465720"
  },
  {
    "text": "and a pointer which is a local variable of which we don't know where it's being set or reset and so on so normally we",
    "start": "3465720",
    "end": "3472160"
  },
  {
    "text": "need now to trace upwards in the code and see where this this variable was being set last here it's loaded and",
    "start": "3472160",
    "end": "3479640"
  },
  {
    "text": "then some stuff is um is added to it and some stuff is being read from it and so on this gets quite",
    "start": "3479640",
    "end": "3485119"
  },
  {
    "text": "annoying no need to do it yourself you generate a",
    "start": "3485119",
    "end": "3492000"
  },
  {
    "text": "graph and we see that the the data flow for this variable is a bit more complex than the last one the last one was",
    "start": "3493480",
    "end": "3498520"
  },
  {
    "text": "pretty much just three different calls and this this time we got a weird Loop in there which at some point",
    "start": "3498520",
    "end": "3506440"
  },
  {
    "text": "leads to this location",
    "start": "3506440",
    "end": "3510280"
  },
  {
    "text": "457a at which we have a buffer of 248 bytes so we know now 1024 and 248 this",
    "start": "3512119",
    "end": "3520520"
  },
  {
    "text": "might be problematic yet another",
    "start": "3520520",
    "end": "3527599"
  },
  {
    "text": "example 1,24 by Target buffer some string we don't know where it's coming",
    "start": "3527599",
    "end": "3533640"
  },
  {
    "text": "from and another graph this time the plugin reported that it couldn't finish",
    "start": "3534640",
    "end": "3539920"
  },
  {
    "text": "the tracking so it colored the last note blue 40 F3",
    "start": "3539920",
    "end": "3545400"
  },
  {
    "text": "FD Str strr CHR so um the application is looking for a new line charact or a",
    "start": "3547359",
    "end": "3554280"
  },
  {
    "text": "carriage return character in a buffer of 4,096 bytes and what it returns from",
    "start": "3554280",
    "end": "3560359"
  },
  {
    "text": "there is the stuff being passed into the string copy here so this pointer here",
    "start": "3560359",
    "end": "3566200"
  },
  {
    "text": "point to a buffer of a maxximum of 496 bytes length if you have the the courage return at the very beginning so this",
    "start": "3566200",
    "end": "3572280"
  },
  {
    "text": "might be a problem as well and one final",
    "start": "3572280",
    "end": "3577960"
  },
  {
    "text": "example yet another string copy 512 bytes Target a string where we don't",
    "start": "3578119",
    "end": "3584520"
  },
  {
    "text": "know where it's coming",
    "start": "3584520",
    "end": "3587240"
  },
  {
    "text": "from and a relatively complex data flow here actually this function was quite annoying this function was what prompted",
    "start": "3589799",
    "end": "3596640"
  },
  {
    "text": "me originally to write this plugin because it's recursive at some point so you start tracking",
    "start": "3596640",
    "end": "3601680"
  },
  {
    "text": "upwards and um after about half an hour you notice hey I've read this code before and um you're reading the same",
    "start": "3601680",
    "end": "3609039"
  },
  {
    "text": "code over and over again and um well yeah so I decide I'm not going to do",
    "start": "3609039",
    "end": "3616240"
  },
  {
    "text": "this manually anymore 413 f",
    "start": "3616240",
    "end": "3620920"
  },
  {
    "text": "f74 a 256 by buffer oh no it's double words ha got so it's 1,24 bytes",
    "start": "3624960",
    "end": "3633119"
  },
  {
    "text": "buffer and the target is 512 43",
    "start": "3633119",
    "end": "3639599"
  },
  {
    "text": "4314 some structure member which is being loaded of size 8,000",
    "start": "3641599",
    "end": "3647599"
  },
  {
    "text": "bytes 43 4661",
    "start": "3650039",
    "end": "3654559"
  },
  {
    "text": "another structure member being loaded here of size 8,000 or same structure",
    "start": "3656160",
    "end": "3661720"
  },
  {
    "text": "member at that point and the last one down",
    "start": "3661720",
    "end": "3668079"
  },
  {
    "text": "here 411",
    "start": "3668079",
    "end": "3671760"
  },
  {
    "text": "f8 yet another SDR CHR this time operating on LP string two",
    "start": "3675920",
    "end": "3682720"
  },
  {
    "text": "which we'd have to check backwards further which I'm not going to do now I think you've all seen that um this",
    "start": "3682720",
    "end": "3688960"
  },
  {
    "text": "massively speeds up the the analysis of of simple functions I mean beforehand you'd have to track every single pointer",
    "start": "3688960",
    "end": "3695200"
  },
  {
    "text": "backwards and you'd waste 20 minutes for tracking backwards just to finding out what the buffer sizes are so um this is",
    "start": "3695200",
    "end": "3702440"
  },
  {
    "text": "truly helpful um any questions concerning this so far or the inverse variable",
    "start": "3702440",
    "end": "3710480"
  },
  {
    "text": "tracking okay um I'm almost at the very end of my speech I'll PR pretty much",
    "start": "3710480",
    "end": "3715520"
  },
  {
    "text": "just um talk a little bit about what I'm doing right now um as you might have noticed this talk is almost a year old",
    "start": "3715520",
    "end": "3721640"
  },
  {
    "text": "by now at least uh gave this talk last summer already more or less um the last",
    "start": "3721640",
    "end": "3727880"
  },
  {
    "text": "six months were spent on well making all this this flow analysis CPU Independent",
    "start": "3727880",
    "end": "3734240"
  },
  {
    "text": "by writing an or by designing an abstract Assembly Language which is um basically a superet of um most other",
    "start": "3734240",
    "end": "3741880"
  },
  {
    "text": "assembly languages very risk- likee very simple in in its instructions to faciliate the analysis code for example",
    "start": "3741880",
    "end": "3748520"
  },
  {
    "text": "with with x86 you got these insane ways of addressing stuff you can have something like um movex EBP plus e um or",
    "start": "3748520",
    "end": "3756279"
  },
  {
    "text": "EBP plus ECX * 8 plus 258 all in one instruction so um analyzing this becomes",
    "start": "3756279",
    "end": "3763960"
  },
  {
    "text": "really really really annoying and at some point my my inverse data flow code became so hard to manage that decided no",
    "start": "3763960",
    "end": "3770760"
  },
  {
    "text": "this is not worth it do a clean start um generate like you don't need to I need",
    "start": "3770760",
    "end": "3776119"
  },
  {
    "text": "to cope with with the Assembly Language of X6 directly in the in the analysis layer it's much clean to get an",
    "start": "3776119",
    "end": "3781200"
  },
  {
    "text": "abstraction layer first so um I thought hey you just write a a translator from one language to your abstract language",
    "start": "3781200",
    "end": "3788559"
  },
  {
    "text": "which took a bit longer than expected um but it is pretty much done and it is fairly stable by now so um I",
    "start": "3788559",
    "end": "3797400"
  },
  {
    "text": "expect to to have the inverse data flow and the for data flow done for for the abstract language and then I can add",
    "start": "3797400",
    "end": "3803559"
  },
  {
    "text": "more abstract languages so far I get only the 86 to The Meta assembly translation but the Met assembly is very",
    "start": "3803559",
    "end": "3809079"
  },
  {
    "text": "very spark like therefore spark will not be much of a problem I think power PC will be relatively okay n PA risk so I",
    "start": "3809079",
    "end": "3815400"
  },
  {
    "text": "hope that by the end of the year I'll have forwards and inverse data flow analysis for four different",
    "start": "3815400",
    "end": "3821760"
  },
  {
    "text": "architectures um I'll show the translation process for a second for example we take this function",
    "start": "3821760",
    "end": "3828920"
  },
  {
    "text": "here we generate a regular flow graph of",
    "start": "3828920",
    "end": "3833318"
  },
  {
    "text": "it all right and then we run the translation doesn't find or doesn't",
    "start": "3834119",
    "end": "3839880"
  },
  {
    "text": "encounter any problems and now we have the the",
    "start": "3839880",
    "end": "3846599"
  },
  {
    "text": "translated code here which is functionally equivalent to to this one",
    "start": "3846599",
    "end": "3852359"
  },
  {
    "text": "here um we see that it stores the frame pointer in the temporary register",
    "start": "3852359",
    "end": "3857839"
  },
  {
    "text": "instead of doing push EBP I kind of rationalized the or I got rid of the stack as I um think stack makes data",
    "start": "3857839",
    "end": "3864440"
  },
  {
    "text": "flow analysis relative ly annoying so instead of pushing on the stack they're storing it in temporary registers the",
    "start": "3864440",
    "end": "3869680"
  },
  {
    "text": "nice thing about a virtual CPU which never has to be built is I have unlimited number of registers um",
    "start": "3869680",
    "end": "3876760"
  },
  {
    "text": "so yeah and um it's actually quite nice um does a lot of interesting things",
    "start": "3876760",
    "end": "3882720"
  },
  {
    "text": "concerning um for example under under NT or NT under x86 you got a rep",
    "start": "3882720",
    "end": "3888119"
  },
  {
    "text": "move SD which is basically a loop in one instruction so um as my meta language doesn't have that de optimizes this Loop",
    "start": "3888119",
    "end": "3894920"
  },
  {
    "text": "there's a whole bunch of optimization things against uh strange things that compilers do um specifically if this",
    "start": "3894920",
    "end": "3901400"
  },
  {
    "text": "compiler admits the the frame pointer this will de well de optimize it and um",
    "start": "3901400",
    "end": "3909720"
  },
  {
    "text": "well I'm I'm quite quite happy with it so far because um I can translate large amounts of relatively optimized code",
    "start": "3909720",
    "end": "3916480"
  },
  {
    "text": "still has a few problems with the fragmented functions which um Microsoft is building right now because it relies",
    "start": "3916480",
    "end": "3921760"
  },
  {
    "text": "at some point on idas information if Ida screws up so badly um my layer doesn't quite work but I'll be",
    "start": "3921760",
    "end": "3927880"
  },
  {
    "text": "writing a function reassembler which basically takes the fragmented functions and reassembles them into sequential",
    "start": "3927880",
    "end": "3933559"
  },
  {
    "text": "blocks soon I guess semester break is coming up so I might have some time um",
    "start": "3933559",
    "end": "3939319"
  },
  {
    "text": "any",
    "start": "3939319",
    "end": "3941559"
  },
  {
    "text": "questions varable at all H good question I've not tried um what do you mean",
    "start": "3948839",
    "end": "3958240"
  },
  {
    "text": "specifically well that would be that would be useful but it's kind of what I already did with the graph coloring I",
    "start": "3970200",
    "end": "3975359"
  },
  {
    "text": "mean it is a runtime debugger I mean I I can't color the can't see which graphs I've well which notes I've touched",
    "start": "3975359",
    "end": "3981680"
  },
  {
    "text": "without having a debugging interface um but yeah I mean graphs are always nice data flow graphs for example",
    "start": "3981680",
    "end": "3987799"
  },
  {
    "text": "in the debugger would be nice I have to admit that I'm really not much of a fan of of dynamic approaches because I want",
    "start": "3987799",
    "end": "3993559"
  },
  {
    "text": "to do some ROM disassembly I want to do um I want to do I want to have a static analyzer more or less so um I don't know",
    "start": "3993559",
    "end": "4001200"
  },
  {
    "text": "whether I'm the right person to ask on what to do dynamically furthermore dynamically you don't have the the infrastructure which",
    "start": "4001200",
    "end": "4007480"
  },
  {
    "text": "ID provides you for with like the the graphing and so on so you need to do the combination of Ida and the dynamic",
    "start": "4007480",
    "end": "4013520"
  },
  {
    "text": "debugger and the graphs because well I don't feel like writing my own disassembly engine to generate the",
    "start": "4013520",
    "end": "4019760"
  },
  {
    "text": "graphs from memory I just use idas and therefore um you need a dis a",
    "start": "4019760",
    "end": "4025039"
  },
  {
    "text": "very very good disassembly engine in your in your debug and if you want to do data flow analysis you're pretty much",
    "start": "4025039",
    "end": "4031240"
  },
  {
    "text": "screwed because you need a really really good disassembly disassembly language which has to keep track of stacks um of",
    "start": "4031240",
    "end": "4038640"
  },
  {
    "text": "structures and so on any other",
    "start": "4038640",
    "end": "4043119"
  },
  {
    "text": "questions you the results verify the results um and how",
    "start": "4044000",
    "end": "4051279"
  },
  {
    "text": "far I verify the correctness of the translation or well with correctness of the trans translation I",
    "start": "4051279",
    "end": "4056920"
  },
  {
    "text": "don't um the only way to to get the the translation from the X6 language through",
    "start": "4056920",
    "end": "4062000"
  },
  {
    "text": "the meta language provably correct would be to have a bjective mapping between the two which means I'd um translate x86",
    "start": "4062000",
    "end": "4068559"
  },
  {
    "text": "code to the meta language and translate it back to x86 again and would be identical all the time and then it would",
    "start": "4068559",
    "end": "4075559"
  },
  {
    "text": "only be like provably correct from the direct translation not be provably correct from the semantics perspective",
    "start": "4075559",
    "end": "4081400"
  },
  {
    "text": "so um all my analysis I do on top of the the x or on top of the that meta",
    "start": "4081400",
    "end": "4086599"
  },
  {
    "text": "language is um assumes that the the translation is",
    "start": "4086599",
    "end": "4091960"
  },
  {
    "text": "perfect well I mean I got to assume something um any other",
    "start": "4091960",
    "end": "4100639"
  },
  {
    "text": "questions well then thanks and if you want to or if you have any more questions feel free free to catch me",
    "start": "4100759",
    "end": "4106679"
  },
  {
    "text": "over coffee somewhere or oh yeah um a few of the the the plugins are available at blackhe Hat's website the the object",
    "start": "4106679",
    "end": "4113000"
  },
  {
    "text": "reconstructor the x86 graph and I'm making another plugin public which is uh the the new fun grapher function grapher",
    "start": "4113000",
    "end": "4120318"
  },
  {
    "text": "pretty much I have two two graphing engines the first one which I used for the the graph coloring is something I",
    "start": "4120319",
    "end": "4126679"
  },
  {
    "text": "taught myself C++ with uh one and a half years ago and is really really bad and",
    "start": "4126679",
    "end": "4133440"
  },
  {
    "text": "uh I pretty much for for the transl I I had to develop a new graphing engine I ripped that graphing engine out and",
    "start": "4133440",
    "end": "4139318"
  },
  {
    "text": "added a nice output with syntax highlighting and all the crap and the the syntax highlighting flow graer I'll",
    "start": "4139319",
    "end": "4144359"
  },
  {
    "text": "show it again um that should be on the website",
    "start": "4144359",
    "end": "4151278"
  },
  {
    "text": "within a few days or weeks as well so all right thanks a lot and see you",
    "start": "4151279",
    "end": "4159838"
  },
  {
    "text": "[Applause] around e",
    "start": "4162189",
    "end": "4168359"
  }
]