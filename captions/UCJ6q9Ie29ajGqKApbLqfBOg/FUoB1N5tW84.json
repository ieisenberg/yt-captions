[
  {
    "text": "okay I'd like to thank everyone coming this morning sorry getting",
    "start": "1000",
    "end": "6720"
  },
  {
    "text": "some feedback",
    "start": "6720",
    "end": "10280"
  },
  {
    "text": "here you still getting feedback no um we're probably going to",
    "start": "12000",
    "end": "18039"
  },
  {
    "text": "run uh a little bit over time so I apologize to those uh caffeine",
    "start": "18039",
    "end": "23320"
  },
  {
    "text": "enthusiasts out there because you'll you know you'll probably lose a wee bit of your coffee break okay today we're going to be",
    "start": "23320",
    "end": "31000"
  },
  {
    "text": "talking about Windows Heap overflows my name is David Lichfield um I work for a company called NGS software uh we're",
    "start": "31000",
    "end": "38719"
  },
  {
    "text": "based out of the [Music] UK",
    "start": "38719",
    "end": "44280"
  },
  {
    "text": "so the reason behind this talk is essentially because Windows Heap overflows have not been well",
    "start": "44280",
    "end": "52039"
  },
  {
    "text": "documented Matt conova wrote an excellent paper on Heap overflows on the",
    "start": "52039",
    "end": "57160"
  },
  {
    "text": "Linux platform we W on Heap overflows but on",
    "start": "57160",
    "end": "62280"
  },
  {
    "text": "Windows it's been less well documented halar flake uh one of the presenters here I'm not sure if he's in the",
    "start": "62280",
    "end": "67880"
  },
  {
    "text": "audience at the moment um a couple of years ago in his third generation exploits uh for for for Windows uh",
    "start": "67880",
    "end": "74960"
  },
  {
    "text": "touched on Heap overflows and examine some of the the more interesting things",
    "start": "74960",
    "end": "80040"
  },
  {
    "text": "and we we'll be discussing some of those aspects later on but essentially this is more this uh presentation is more to put",
    "start": "80040",
    "end": "88680"
  },
  {
    "text": "out what else is there uh to do with Heap over flows out there on the on the Windows uh",
    "start": "88680",
    "end": "96600"
  },
  {
    "text": "platform so too many people out there essentially think that heat buffers um are safe to",
    "start": "96600",
    "end": "105399"
  },
  {
    "text": "use you know with dumb uh functions such as striat stri copy um in fact there was",
    "start": "105399",
    "end": "112479"
  },
  {
    "text": "one paper out there on secure coding that suggested to solve the problem of Stack based Heap uh buffer overflows was",
    "start": "112479",
    "end": "119640"
  },
  {
    "text": "to move all the buffers to the Heat and uh you know it was still safe to call things like strick out and strick offe",
    "start": "119640",
    "end": "125840"
  },
  {
    "text": "and so on uh and obviously uh that is not the",
    "start": "125840",
    "end": "131520"
  },
  {
    "text": "case so what is the Heap first off the Heap is an area of memory used for",
    "start": "131520",
    "end": "137440"
  },
  {
    "text": "storage of dynamic data so let's think about a web server for",
    "start": "137440",
    "end": "143080"
  },
  {
    "text": "example someone is going to be making a request to the web server and there'll be a query string in that request",
    "start": "143080",
    "end": "148920"
  },
  {
    "text": "probably now before that request is made the the the designer of the the web Ser",
    "start": "148920",
    "end": "154160"
  },
  {
    "text": "is not going to be sure how long that cow string could potentially be so rather than having a static size buffer",
    "start": "154160",
    "end": "159959"
  },
  {
    "text": "stored on the stack they'll allocate memory as and when needed and that will come from the",
    "start": "159959",
    "end": "165360"
  },
  {
    "text": "heat now every process has a a default process heat but of course developers",
    "start": "165360",
    "end": "171760"
  },
  {
    "text": "can use their own private Heats we'll be looking you know further at this later on space when is needed is",
    "start": "171760",
    "end": "182000"
  },
  {
    "text": "allocated and when it's finished with is freed so these are some of the the Wind",
    "start": "182000",
    "end": "188640"
  },
  {
    "text": "32 um function calls dealing with the Heat global Alec local Alec are a",
    "start": "188640",
    "end": "195360"
  },
  {
    "text": "throwback from the wind 16 days when heaps you had local heaps and Global",
    "start": "195360",
    "end": "201920"
  },
  {
    "text": "heaps uh and for backwards compatibility they' have been left left in the you",
    "start": "201920",
    "end": "207080"
  },
  {
    "text": "know the modern win32 API uh and palic is obviously the more recent one but",
    "start": "207080",
    "end": "212280"
  },
  {
    "text": "essentially they all forward to RTL allocate Heap within ntdll.dll",
    "start": "212280",
    "end": "219560"
  },
  {
    "text": "obviously when you're freeing you would do the you know the opposite with global free local free and Heat free and so",
    "start": "220200",
    "end": "228959"
  },
  {
    "text": "on now before we can actually look at exploiting Heap overflows we have to",
    "start": "228959",
    "end": "235760"
  },
  {
    "text": "understand the design of the Heap first off well at the of each heat there is a",
    "start": "235760",
    "end": "240959"
  },
  {
    "text": "structure at the at the at the very start um this structure amongst other kind of data contains an array of",
    "start": "240959",
    "end": "249560"
  },
  {
    "text": "128 list entry structures if you look in Winn t.h you'll see the format for a",
    "start": "249560",
    "end": "255760"
  },
  {
    "text": "list entry structure essentially it contains two pointers a forward link and",
    "start": "255760",
    "end": "260919"
  },
  {
    "text": "a back link or a Flink and a blink this list list entry array can be",
    "start": "260919",
    "end": "268720"
  },
  {
    "text": "found 178 bytes that's hex by the way 178 hex bytes into the Heap structure",
    "start": "268720",
    "end": "275520"
  },
  {
    "text": "and for this for the purposes of this talk we'll call it the free list array now when a heap is first created",
    "start": "275520",
    "end": "284280"
  },
  {
    "text": "there are two pointers that point to the first free block of memory that's going",
    "start": "284280",
    "end": "289759"
  },
  {
    "text": "to be available for allocation in free list zero so free list blink and Flink",
    "start": "289759",
    "end": "296560"
  },
  {
    "text": "free list zero blink and Flink will have a pointer to the first block of available memory for allocation so",
    "start": "296560",
    "end": "303479"
  },
  {
    "text": "assuming we have a heat base of an address of 00",
    "start": "303479",
    "end": "309360"
  },
  {
    "text": "350000 then the first available block of memory will be found at",
    "start": "309360",
    "end": "315039"
  },
  {
    "text": "35688 so when we look at a fresh new heat sorry did we have a uh laser",
    "start": "315039",
    "end": "321880"
  },
  {
    "text": "pointer by the way no",
    "start": "321880",
    "end": "327440"
  },
  {
    "text": "okay so free list zero this is the top line here is is that legible by the way",
    "start": "327600",
    "end": "333759"
  },
  {
    "text": "can people read that from with with that color Okay fre z f",
    "start": "333759",
    "end": "340600"
  },
  {
    "text": "link equals 356 88 and that's the first free Block",
    "start": "340600",
    "end": "348520"
  },
  {
    "text": "free list zero blink is again the same so both of those are pointing to the",
    "start": "348520",
    "end": "353680"
  },
  {
    "text": "first available block for allocation if we look at that address we can find 2 point",
    "start": "353680",
    "end": "360160"
  },
  {
    "text": "that point back to free list zero so address 35688 we have a pointer back to we we we",
    "start": "360160",
    "end": "369160"
  },
  {
    "text": "have a pointer that points back to freelist zero now when allocations occur these pointers are updated accordingly",
    "start": "369160",
    "end": "376319"
  },
  {
    "text": "so when the first block of memory is allocated the heat control structure that goes at the end of that will then",
    "start": "376319",
    "end": "382240"
  },
  {
    "text": "point back into free lists into the free list array and so on and as allocation more allocations and free occur these",
    "start": "382240",
    "end": "390720"
  },
  {
    "text": "um these allocations and frees are are tracked in a w link list",
    "start": "390720",
    "end": "396000"
  },
  {
    "text": "essentially now so where's the the problem in all of this well when a heat",
    "start": "396000",
    "end": "401080"
  },
  {
    "text": "based buffer is overflowed the control information is overwritten so this stuff",
    "start": "401080",
    "end": "407720"
  },
  {
    "text": "here if this gets squashed when it comes to freeing or reallocating",
    "start": "407720",
    "end": "413440"
  },
  {
    "text": "then the pointer updates essentially are are going to be screwed so",
    "start": "413440",
    "end": "421520"
  },
  {
    "text": "if we take a look at the code",
    "start": "422199",
    "end": "429280"
  },
  {
    "text": "here this is an example of a a",
    "start": "429280",
    "end": "435319"
  },
  {
    "text": "vulnerable console app that basically suffers from a heap",
    "start": "435319",
    "end": "441000"
  },
  {
    "text": "overflow so here we're creating a a private",
    "start": "441000",
    "end": "446240"
  },
  {
    "text": "Heap we allocate space from that Heap",
    "start": "446240",
    "end": "451520"
  },
  {
    "text": "print out some debugging information about that Heap just you know for our own elucidation here's where the Overflow",
    "start": "454520",
    "end": "460720"
  },
  {
    "text": "occurs this buff by the way is the command line",
    "start": "460720",
    "end": "466400"
  },
  {
    "text": "argument here Argy one when we call the F function and we overflow the buffer when",
    "start": "466720",
    "end": "474520"
  },
  {
    "text": "we come to do a reallocation we have an overflow so if I",
    "start": "474520",
    "end": "481000"
  },
  {
    "text": "run [Music]",
    "start": "481000",
    "end": "486089"
  },
  {
    "text": "this and we do buug",
    "start": "494479",
    "end": "498240"
  },
  {
    "text": "this let me uh move this up",
    "start": "501280",
    "end": "506319"
  },
  {
    "text": "sorry I'm just trying to get the uh where's the disassembly [Music]",
    "start": "517560",
    "end": "524010"
  },
  {
    "text": "window right it must be here somewhere",
    "start": "527399",
    "end": "532320"
  },
  {
    "text": "well whilst I'm trying to find this this here we go",
    "start": "542279",
    "end": "548920"
  },
  {
    "text": "okay these are the this is where we're access violating we're moving ECX",
    "start": "549440",
    "end": "556519"
  },
  {
    "text": "into the the address pointed to by eax now if we look at eax it's 42 42",
    "start": "556519",
    "end": "564120"
  },
  {
    "text": "4242 and ECX again is 42 42 4242 now that in when you when you",
    "start": "564120",
    "end": "571720"
  },
  {
    "text": "convert 42 into um uh an as character it's b a capital B so what we can see is",
    "start": "571720",
    "end": "579880"
  },
  {
    "text": "we've overflowed the buffer and when the reallocation comes you know uh",
    "start": "579880",
    "end": "585800"
  },
  {
    "text": "occurs we have a situation whereby we control what goes into ECX and eax",
    "start": "585800",
    "end": "595360"
  },
  {
    "text": "and this allows us essentially to override a the contents our 32-bit address with a",
    "start": "595360",
    "end": "603360"
  },
  {
    "text": "32bit value of our choosing so here we go we have an access",
    "start": "603360",
    "end": "612519"
  },
  {
    "text": "violation again it's the same code move eax into the uh address pointer to by",
    "start": "612640",
    "end": "618800"
  },
  {
    "text": "ECX and then immediately after that we have move in move ECX into the dword",
    "start": "618800",
    "end": "625560"
  },
  {
    "text": "pointer eax plus4 now we own both of these registers so this allows us an",
    "start": "625560",
    "end": "630720"
  },
  {
    "text": "arbitary dwide override so this is where the problem lies because we have a situation whereby",
    "start": "630720",
    "end": "638120"
  },
  {
    "text": "we can overwrite um a value at any address with",
    "start": "638120",
    "end": "643639"
  },
  {
    "text": "a value of our choosing providing its writeable memory of course um we could for example overwrite um a save return",
    "start": "643639",
    "end": "652360"
  },
  {
    "text": "address on the stack so when the function returns where this free is all going up we could land wherever we you",
    "start": "652360",
    "end": "658440"
  },
  {
    "text": "know so wish um that would not be the easiest way of",
    "start": "658440",
    "end": "664040"
  },
  {
    "text": "exploiting a a heat based overflow on a Windows platform however invariably what",
    "start": "664040",
    "end": "669160"
  },
  {
    "text": "you find is an access violation W cut because you've screwed with the heat so",
    "start": "669160",
    "end": "674720"
  },
  {
    "text": "one of the easiest mechanisms for exploiting heat based overflow heat based overflows on on the Windows",
    "start": "674720",
    "end": "680200"
  },
  {
    "text": "platform is to go after the exception handling stuff",
    "start": "680200",
    "end": "686320"
  },
  {
    "text": "so we'll be looking at repairing the Heat using the dword arbitrary dword",
    "start": "686320",
    "end": "692800"
  },
  {
    "text": "overwrite to overwrite the unhandled exception filter which was first put forward as a method by",
    "start": "692800",
    "end": "699120"
  },
  {
    "text": "halar within the PB the process environment block there is a a a",
    "start": "699120",
    "end": "704200"
  },
  {
    "text": "function pointer which we we'll be looking at um if we overwrite that with our arbitary dword overwrite we can gain",
    "start": "704200",
    "end": "711200"
  },
  {
    "text": "control new with Windows XP and Windows 2003 we have Vector exception handling",
    "start": "711200",
    "end": "717839"
  },
  {
    "text": "which we can abuse as a method to gain control and also within the thread environment block there's a pointer to",
    "start": "717839",
    "end": "724720"
  },
  {
    "text": "the first except exception registration structure on the stack which again we can abuse again a method put forward by",
    "start": "724720",
    "end": "732079"
  },
  {
    "text": "halvar the latter one there so because we screwed with the",
    "start": "732079",
    "end": "739480"
  },
  {
    "text": "heat um it's going to be corrupt basically after the Overflow so before we can do anything useful invariably",
    "start": "739480",
    "end": "745720"
  },
  {
    "text": "we'll need to is that oh cool excuse me before we can do anything useful we're going to need to repair the heat the",
    "start": "745720",
    "end": "754240"
  },
  {
    "text": "reason being is because many windows API functions use the default process Heap",
    "start": "754240",
    "end": "760360"
  },
  {
    "text": "and if it's corrupt we're going to access violate of course if the the Heap overflowing occurs in a private heat",
    "start": "760360",
    "end": "765760"
  },
  {
    "text": "then this isn't so much of there isn't so much of an urgency to to to fix the heat but certainly if it's in the",
    "start": "765760",
    "end": "771079"
  },
  {
    "text": "default process heat we need to fix it because we we'll lose the the process in in terms of uh running our own exploit",
    "start": "771079",
    "end": "778880"
  },
  {
    "text": "code so approaches to repairing the heat we",
    "start": "778880",
    "end": "784279"
  },
  {
    "text": "could do it on a per vulnerability per exploit basis but this is timec consuming and could run into problems on",
    "start": "784279",
    "end": "790639"
  },
  {
    "text": "you know it might work against this machine but when you do it against this machine it then fails so we need a gen a",
    "start": "790639",
    "end": "796320"
  },
  {
    "text": "generic way basically to to look at repairing the heat which is going to be effective through all exploits you know",
    "start": "796320",
    "end": "801959"
  },
  {
    "text": "once it's written uh we can then reuse it multiple times",
    "start": "801959",
    "end": "808120"
  },
  {
    "text": "so I played around with it for a while and I the best method I could come up with with repairing the Heap in a",
    "start": "808120",
    "end": "814120"
  },
  {
    "text": "generic fashion was simply to reset the Heap to make it appear as if it's a fresh new Heap but you're not so much",
    "start": "814120",
    "end": "821360"
  },
  {
    "text": "doing you're not making it a fresh Heap you're not resetting all the pointers like in free list z uh free lists um in",
    "start": "821360",
    "end": "827959"
  },
  {
    "text": "the free list array back to what they were in in its original state we're just essentially making a peir as if it's a",
    "start": "827959",
    "end": "834839"
  },
  {
    "text": "fresh new Heap so this way um any data which is on the Heap already remains intact it's not going to be",
    "start": "834839",
    "end": "841519"
  },
  {
    "text": "overwritten um so any uh function CS for example if you",
    "start": "841519",
    "end": "847079"
  },
  {
    "text": "call wsa St that will use the the default process Heap and and stored data there by resetting the Heap to make it",
    "start": "847079",
    "end": "853839"
  },
  {
    "text": "look as if it's a fresh new Heap we keep that data intact but we we can still go ahead and allow fresh uh",
    "start": "853839",
    "end": "861720"
  },
  {
    "text": "allocations so the way we're going to go about this basically is",
    "start": "861720",
    "end": "867399"
  },
  {
    "text": "to once we've over overflowed the the Heap control structure we when we",
    "start": "867399",
    "end": "873240"
  },
  {
    "text": "overflow it we we set the the heat do total free size we we get that information set the flags to",
    "start": "873240",
    "end": "880320"
  },
  {
    "text": "14 uh the these are the flags in the the heat control structure by the way and and then set Heat you know the the free",
    "start": "880320",
    "end": "887040"
  },
  {
    "text": "lists array zero in the in heat structure the F link and the B link to start to our fake control structure so",
    "start": "887040",
    "end": "894600"
  },
  {
    "text": "if we look at code listing B by the way this um if you have ACC to the the",
    "start": "894600",
    "end": "899959"
  },
  {
    "text": "wireless thing and and you want the code in front of you on your laptop you should be able to get this off of the the black hat website",
    "start": "899959",
    "end": "906600"
  },
  {
    "text": "now",
    "start": "906600",
    "end": "909600"
  },
  {
    "text": "so okay once we we've overflowed the buffer uh and we'll see how we get back",
    "start": "911800",
    "end": "917959"
  },
  {
    "text": "into you know um back into the point where we're running arbitary code we have just",
    "start": "917959",
    "end": "925320"
  },
  {
    "text": "landed basically in our buffer after a call to a dwor EDI plus 74 we'll come",
    "start": "925320",
    "end": "930360"
  },
  {
    "text": "into that later on um this therefore is our pointer to the Heap control control",
    "start": "930360",
    "end": "935560"
  },
  {
    "text": "structure so we move into so we move this into edx um and we're going to be putting some values in there",
    "start": "935560",
    "end": "942240"
  },
  {
    "text": "basically um some other systems such as Windows 2000 the uh the pointers will",
    "start": "942240",
    "end": "948399"
  },
  {
    "text": "change we're going to push 18 onto the stack and pop it into ebx this way we can get a pointer to the",
    "start": "948399",
    "end": "957120"
  },
  {
    "text": "thread environment book let me shift this so you can see it",
    "start": "957120",
    "end": "961880"
  },
  {
    "text": "better so we move into eax a pointer to the thread information block or the",
    "start": "963240",
    "end": "968560"
  },
  {
    "text": "thread environment block from there we get a pointer to the process environment",
    "start": "968560",
    "end": "974130"
  },
  {
    "text": "[Music] block and from the process environment",
    "start": "974130",
    "end": "980079"
  },
  {
    "text": "block we get a pointer to the default process [Music]",
    "start": "980079",
    "end": "986480"
  },
  {
    "text": "heat now the heat will be of the format Ox 0000",
    "start": "986480",
    "end": "992319"
  },
  {
    "text": "NN 00000000 invariably this may change but for for the sake of this talk this this",
    "start": "992319",
    "end": "999480"
  },
  {
    "text": "is good enough it's going to be uh rare a rare occasion indeed when you you run",
    "start": "999480",
    "end": "1005000"
  },
  {
    "text": "into heat uh with a base address not of this format we adjust this",
    "start": "1005000",
    "end": "1011560"
  },
  {
    "text": "pointer by 28 to point to the total free size dword",
    "start": "1011560",
    "end": "1017959"
  },
  {
    "text": "within the Heap structure we then move into",
    "start": "1017959",
    "end": "1023319"
  },
  {
    "text": "SI whatever word is pointed to by eax that's the total free size um dword so",
    "start": "1023319",
    "end": "1030558"
  },
  {
    "text": "we now have in si that value we then need to write this into",
    "start": "1030559",
    "end": "1036678"
  },
  {
    "text": "our heat control structure can you see that down the Bottom by the way let me move it",
    "start": "1036679",
    "end": "1042640"
  },
  {
    "text": "up we need we need to move SI which is our total fre size into our heat control",
    "start": "1042839",
    "end": "1050520"
  },
  {
    "text": "structure which is obviously after our you know after our buffer we then adjust edx by",
    "start": "1050520",
    "end": "1056440"
  },
  {
    "text": "two and set the previous size to eight essentially set some flags and so",
    "start": "1056440",
    "end": "1064840"
  },
  {
    "text": "on now we need to adjust eax basically to point to fre list z f",
    "start": "1067240",
    "end": "1075919"
  },
  {
    "text": "link do that there and we're writing edx into free list zero f",
    "start": "1076480",
    "end": "1084440"
  },
  {
    "text": "link um making it appear as if the first free Block available for allocation is",
    "start": "1084440",
    "end": "1092480"
  },
  {
    "text": "after our you know after our code basically after our allocated buffer",
    "start": "1092480",
    "end": "1097919"
  },
  {
    "text": "which has just been freed or re reallo we then write the same thing into free",
    "start": "1097919",
    "end": "1103039"
  },
  {
    "text": "list zero blink so we we've set the the poters",
    "start": "1103039",
    "end": "1108520"
  },
  {
    "text": "Accord accordingly and then we set the pointers at the end of our block to",
    "start": "1108520",
    "end": "1113799"
  },
  {
    "text": "point to free back to to free list zero essentially so if that's the first bit",
    "start": "1113799",
    "end": "1119159"
  },
  {
    "text": "of code we execute once we we get into our you know into our user suppi buffer",
    "start": "1119159",
    "end": "1125320"
  },
  {
    "text": "then we we we set the stack in a state whereby data is still intact and new",
    "start": "1125320",
    "end": "1132880"
  },
  {
    "text": "allocations can take place so that all begs the question how",
    "start": "1132880",
    "end": "1139200"
  },
  {
    "text": "do we get this arbitary code to to execute well one of the methods and this is probably the most common method is to",
    "start": "1139200",
    "end": "1145960"
  },
  {
    "text": "use the unhandled exception filter method the U the unhandled exception",
    "start": "1145960",
    "end": "1152360"
  },
  {
    "text": "filter is the last ditch effort exception Handler so essentially when an",
    "start": "1152360",
    "end": "1158000"
  },
  {
    "text": "exception occurs a the the developer can essentially code up their own exception",
    "start": "1158000",
    "end": "1163480"
  },
  {
    "text": "handlers if they dispatch with the exception then the the the unhandled",
    "start": "1163480",
    "end": "1168880"
  },
  {
    "text": "exception filter is is never called because the the exceptions been dealt with if there are no exception handlers",
    "start": "1168880",
    "end": "1175320"
  },
  {
    "text": "well there's always one in in any given thread anyway um that basically will pass on to the",
    "start": "1175320",
    "end": "1182440"
  },
  {
    "text": "unhandled exception vill and and it's eventually called now you know when a when a bug occurs uh or a problem occurs",
    "start": "1182440",
    "end": "1189880"
  },
  {
    "text": "and you see this message popping up on your screen saying would you like to report this bug to Microsoft that's",
    "start": "1189880",
    "end": "1194960"
  },
  {
    "text": "essentially the unhandled exception filter stuff you know kicking in",
    "start": "1194960",
    "end": "1202559"
  },
  {
    "text": "basically the location B basically the unhandled um exception filter there is in the data",
    "start": "1202559",
    "end": "1210320"
  },
  {
    "text": "section of Kel 32.dll there is a pointer to the code that is that handles the um",
    "start": "1210320",
    "end": "1218320"
  },
  {
    "text": "the unhandled exception stuff basically now the location of this this uh pointer",
    "start": "1218320",
    "end": "1223880"
  },
  {
    "text": "varies from OS to OS you know it's going to be different on Windows nt4 to Windows 2000 to XP to 2003 and it varies",
    "start": "1223880",
    "end": "1231799"
  },
  {
    "text": "from Service Pack to Service Pack oh yeah ex",
    "start": "1231799",
    "end": "1237520"
  },
  {
    "text": "me so for a given OS the best way to to find it you know where this pointer is",
    "start": "1237520",
    "end": "1244400"
  },
  {
    "text": "is to disassemble the set unhandled exception filter function so I I'm I'm really sorry I",
    "start": "1244400",
    "end": "1250760"
  },
  {
    "text": "chose a really crap color here for you know slides um essentially what we have",
    "start": "1250760",
    "end": "1256480"
  },
  {
    "text": "here is you can't highlight can",
    "start": "1256480",
    "end": "1262600"
  },
  {
    "text": "you essentially the unhandled exception filter uh pointer is at 77 Ed 73 B4 on",
    "start": "1262600",
    "end": "1270200"
  },
  {
    "text": "XP Service Pack 1 and as I said this will vary from system to system",
    "start": "1270200",
    "end": "1276080"
  },
  {
    "text": "so if we look at when an unhandled exception occurs the following block of code is executed we move into",
    "start": "1276080",
    "end": "1283480"
  },
  {
    "text": "eax the the value uh stored at 77 Ed 73 B4",
    "start": "1283480",
    "end": "1289240"
  },
  {
    "text": "we check if it's zero with a compare eax with ESI ESI being zero if it's equal to",
    "start": "1289240",
    "end": "1294919"
  },
  {
    "text": "zero jump elsewhere if not in other words if the pointer is set if the function pointer",
    "start": "1294919",
    "end": "1300360"
  },
  {
    "text": "is set push EDI and we'll come back to that push EDI because it's important in a minute and then call eax so because we",
    "start": "1300360",
    "end": "1307559"
  },
  {
    "text": "have our arbitary DDE overwrite essentially what we could do is go to this address here and overwrite the",
    "start": "1307559",
    "end": "1315039"
  },
  {
    "text": "value at that address with a a a pointer so uh with a with the address of an",
    "start": "1315039",
    "end": "1320559"
  },
  {
    "text": "instruction which will get us back to our our code so what would we",
    "start": "1320559",
    "end": "1325919"
  },
  {
    "text": "use well remember that EDI was pushed onto the stack just before the unhandled",
    "start": "1325919",
    "end": "1332440"
  },
  {
    "text": "exception filter was called if we look at the state of the stack before that 78",
    "start": "1332440",
    "end": "1338600"
  },
  {
    "text": "bytes past EDI there is a pointer to the end of our buffer just before the heat management control",
    "start": "1338600",
    "end": "1345400"
  },
  {
    "text": "stuff so if we overwrite the unhandled exception",
    "start": "1345400",
    "end": "1350600"
  },
  {
    "text": "filter with an address that points to a CO dword pointer EDI plus",
    "start": "1350600",
    "end": "1356400"
  },
  {
    "text": "x78 then when the unhandled exception occurs basically that's going to drop us",
    "start": "1356400",
    "end": "1362080"
  },
  {
    "text": "back at the the start of the the end of our Buffet just before the start of the the the Heap Control Management stuff um",
    "start": "1362080",
    "end": "1370159"
  },
  {
    "text": "which we can then you know jump backwards and then um do our arbitary",
    "start": "1370159",
    "end": "1376720"
  },
  {
    "text": "stuff our arbitary code whatever we wish to execute there are quite a few examples of this instruction here we can",
    "start": "1376720",
    "end": "1383640"
  },
  {
    "text": "find many inet API 32.dll user 32.dll RP RPC rt4 D for",
    "start": "1383640",
    "end": "1390030"
  },
  {
    "text": "[Music] example a couple of notes on this on",
    "start": "1390030",
    "end": "1395919"
  },
  {
    "text": "other os's it might not be EDI for example Windows 2000 we can find a a",
    "start": "1395919",
    "end": "1402000"
  },
  {
    "text": "useful pointner at ESI plus 4C and EBP plus 74 so instead of using C DW point",
    "start": "1402000",
    "end": "1409279"
  },
  {
    "text": "to EDI plus 74 we would choose for example C DW point to ESI plus",
    "start": "1409279",
    "end": "1414880"
  },
  {
    "text": "4C using this method we need to know the target system I.E what OS is it and what",
    "start": "1414880",
    "end": "1420960"
  },
  {
    "text": "Service Pack level simply because the the location of the unhandled exception",
    "start": "1420960",
    "end": "1426360"
  },
  {
    "text": "filter is you know it it varies from system to system",
    "start": "1426360",
    "end": "1433559"
  },
  {
    "text": "so here is an example of",
    "start": "1434120",
    "end": "1439880"
  },
  {
    "text": "a vulnerable console app again it's very similar to the other",
    "start": "1439880",
    "end": "1446640"
  },
  {
    "text": "one in fact it is the other one um which we've already seen so again here is the",
    "start": "1446640",
    "end": "1452240"
  },
  {
    "text": "Heap overflow",
    "start": "1452240",
    "end": "1457480"
  },
  {
    "text": "now in terms of exploiting this and again you should be able to get this up the um blackout",
    "start": "1457480",
    "end": "1463700"
  },
  {
    "text": "[Music] website after we've called",
    "start": "1463700",
    "end": "1469039"
  },
  {
    "text": "the uh over once we've overwritten the unhandled exception fil by the way with our cor dwor Point EDI plus",
    "start": "1469039",
    "end": "1475480"
  },
  {
    "text": "74 we we land basically um we we've got four bites to play with so if we set",
    "start": "1475480",
    "end": "1481440"
  },
  {
    "text": "that to uh a short jump forwards then with the e14 that jumped",
    "start": "1481440",
    "end": "1488720"
  },
  {
    "text": "us over you know uh where we've had to overwrite the",
    "start": "1488720",
    "end": "1494600"
  },
  {
    "text": "um our 2 dword that are used in the arbitary DW overr right so we get rid of that",
    "start": "1494600",
    "end": "1500760"
  },
  {
    "text": "crud um this here is the value we're going to",
    "start": "1500760",
    "end": "1507120"
  },
  {
    "text": "be setting uh the unhandled exception filter to 77 c3bb a that is in net API",
    "start": "1507120",
    "end": "1514960"
  },
  {
    "text": "32. dlm andet XP sp1 which contains uh which points to a CO DW Point EDI plus",
    "start": "1514960",
    "end": "1522880"
  },
  {
    "text": "74 this here is the pointer to the unhandled exception filter",
    "start": "1522880",
    "end": "1529640"
  },
  {
    "text": "and basically we're going to execute that",
    "start": "1529640",
    "end": "1536200"
  },
  {
    "text": "so uh what are we working on yeah he uef is the vulnerable program um and basically we're going to",
    "start": "1536200",
    "end": "1543840"
  },
  {
    "text": "exploit that with this one here and it's basically all the export does is calls",
    "start": "1543840",
    "end": "1549880"
  },
  {
    "text": "Cal you know uh call system for Cal so we get Cal opening this here um is we're",
    "start": "1549880",
    "end": "1557720"
  },
  {
    "text": "executing the you know the Heat Program uh this is the allocation stuff our uh",
    "start": "1557720",
    "end": "1564919"
  },
  {
    "text": "first available block of memory which has been allocated at uh",
    "start": "1564919",
    "end": "1570200"
  },
  {
    "text": "35688 um and the address for that can be found there so if we get rid of that so it's it's quite a useful method",
    "start": "1570200",
    "end": "1579120"
  },
  {
    "text": "um providing you know um the location of the unhandled exception",
    "start": "1579120",
    "end": "1584760"
  },
  {
    "text": "filter which means knowing the OS and Service Pack level and to a certain",
    "start": "1584760",
    "end": "1589840"
  },
  {
    "text": "degree the uh in certain cases the hot fix level as",
    "start": "1589840",
    "end": "1595360"
  },
  {
    "text": "well a new method which I have I don't think has been discussed before is using",
    "start": "1595919",
    "end": "1602600"
  },
  {
    "text": "um vectored exception handling um to to gain",
    "start": "1602600",
    "end": "1608679"
  },
  {
    "text": "control Vector exception handling is new as of Windows XP uh we also find it in Windows uh 2003",
    "start": "1608679",
    "end": "1617159"
  },
  {
    "text": "as well now unlike traditional frame based exception handling where we have an exception registration structure",
    "start": "1617159",
    "end": "1623399"
  },
  {
    "text": "stored on the stack which is basically a link list of you know appointed to the next except exception registration",
    "start": "1623399",
    "end": "1629720"
  },
  {
    "text": "structure um and appointed to the actual Handler itself um information about vectored exception handlers are stored",
    "start": "1629720",
    "end": "1636480"
  },
  {
    "text": "in the Heap a poed to the first Vector I can't",
    "start": "1636480",
    "end": "1641679"
  },
  {
    "text": "say this Vector exception Handler it's a tongue twister is stored at 77 FC 3210",
    "start": "1641679",
    "end": "1648679"
  },
  {
    "text": "this points to our first our top level Vector exception node here's the",
    "start": "1648679",
    "end": "1654480"
  },
  {
    "text": "structure basically we have a pointer to the next node a pointer to the previous",
    "start": "1654480",
    "end": "1660600"
  },
  {
    "text": "node and a pointer to the actual Handler [Music]",
    "start": "1660600",
    "end": "1665840"
  },
  {
    "text": "itself now the good thing um about Vector exception handlers are they're",
    "start": "1665840",
    "end": "1671480"
  },
  {
    "text": "called before any frame based handlers and you know and consequently before the",
    "start": "1671480",
    "end": "1676600"
  },
  {
    "text": "unhandled exception filter is well so if there are no Vector exception handlers",
    "start": "1676600",
    "end": "1682960"
  },
  {
    "text": "in in the program but the they do have a frame base Handler",
    "start": "1682960",
    "end": "1688120"
  },
  {
    "text": "which is going to actually dispatch with the the exception then we can still gain",
    "start": "1688120",
    "end": "1693480"
  },
  {
    "text": "control simply by using vector vector exception handling and even if they have registered their own vector vector",
    "start": "1693480",
    "end": "1700039"
  },
  {
    "text": "exception handlers by replacing the pointer at 77 FC 3210 as is going to be",
    "start": "1700039",
    "end": "1706480"
  },
  {
    "text": "the first to execute so essentially what we're going to do is um overwrite the",
    "start": "1706480",
    "end": "1712679"
  },
  {
    "text": "the pointer to the first vector vector exception node here with a point to our own fake uh Vector exception",
    "start": "1712679",
    "end": "1721559"
  },
  {
    "text": "node so if we look at the code behind um the calling of a vector exception",
    "start": "1721559",
    "end": "1728960"
  },
  {
    "text": "Handler what happens is we move into ESI uh the the value stored at 77 FC",
    "start": "1728960",
    "end": "1736760"
  },
  {
    "text": "3210 jump down here uh compare EDI and ESI EDI is zero",
    "start": "1736760",
    "end": "1744799"
  },
  {
    "text": "by the way at this stage if it's um zero then you know we we go up elsewhere but",
    "start": "1744799",
    "end": "1751399"
  },
  {
    "text": "if it if ESI actually has a value in other words a point that has been set in other words there's a a point to a",
    "start": "1751399",
    "end": "1757760"
  },
  {
    "text": "vector exception node we jump back here um and eventually we call DW point to ESI Plus 8",
    "start": "1757760",
    "end": "1765880"
  },
  {
    "text": "so what we what using this method um essentially",
    "start": "1765880",
    "end": "1771399"
  },
  {
    "text": "involves finding a pointer to um our buffer on the stack now if it's",
    "start": "1771399",
    "end": "1777919"
  },
  {
    "text": "a um if someone's calling Heap free well that's being passed as one of the arguments to the Heap free function",
    "start": "1777919",
    "end": "1785000"
  },
  {
    "text": "anyway um so we will find a point to our buffer on the stack essentially so assume it can be found at uh 0012 ff50",
    "start": "1785000",
    "end": "1793880"
  },
  {
    "text": "well this becomes our pointer to the actual Handler for the the the vect the",
    "start": "1793880",
    "end": "1800480"
  },
  {
    "text": "vector exception Handler so if we're wanting a fake uh pseudo um Vector",
    "start": "1800480",
    "end": "1807240"
  },
  {
    "text": "exception node you know we we take eight off that basically giving us um a point",
    "start": "1807240",
    "end": "1812399"
  },
  {
    "text": "to our pseudo Vector exception node at 12 ff48 so when we come to overwrite the",
    "start": "1812399",
    "end": "1822399"
  },
  {
    "text": "um when we get our arbitary DW overwrite with this block of code here you know in the in the uh",
    "start": "1822399",
    "end": "1828799"
  },
  {
    "text": "the reallocation on the free what we're going to do is set eax essentially to",
    "start": "1828799",
    "end": "1834000"
  },
  {
    "text": "77f c320 C which is four less than where we find the the point to the first um",
    "start": "1834000",
    "end": "1842039"
  },
  {
    "text": "Vector the exception Handler and ECX to this so essentially what happens is",
    "start": "1842039",
    "end": "1849039"
  },
  {
    "text": "um this value here is moved into ECX so that's going to be um this value here is",
    "start": "1849039",
    "end": "1856360"
  },
  {
    "text": "going to be moved into um 00124 ff48 and then the next line in essentially is",
    "start": "1856360",
    "end": "1863519"
  },
  {
    "text": "going to move ECX this value here into 77 FC 320c plus4 which happens to be 77",
    "start": "1863519",
    "end": "1870279"
  },
  {
    "text": "FC 32 uh 1 1 1 0 where we can find our",
    "start": "1870279",
    "end": "1875360"
  },
  {
    "text": "uh point to the first Vector exception uh",
    "start": "1875360",
    "end": "1880399"
  },
  {
    "text": "node which I'll just explain there so when yeah so once we we've",
    "start": "1880559",
    "end": "1888120"
  },
  {
    "text": "written that that pointer when it comes to doing the uh the called dword pointer ESI Plus 8 well that's the pointer to",
    "start": "1888120",
    "end": "1894880"
  },
  {
    "text": "our buffer remember so before we look at an example of this",
    "start": "1894880",
    "end": "1901240"
  },
  {
    "text": "if the location of the stack and that's the the point to our buffer is is is moving then this method can be",
    "start": "1901240",
    "end": "1907360"
  },
  {
    "text": "unreliable um so if we take a look at an example",
    "start": "1907360",
    "end": "1913440"
  },
  {
    "text": "now so again it's pretty much the same Heap overflow uh as it happens we've got",
    "start": "1915880",
    "end": "1922240"
  },
  {
    "text": "a frame based Handler in there uh which is somewhat relevant it's more to the point to show that um the",
    "start": "1922240",
    "end": "1930080"
  },
  {
    "text": "uh the vector exception handler comes kicks in first before the the frame base Handler and this here is the um code",
    "start": "1930080",
    "end": "1938960"
  },
  {
    "text": "listing f is the uh the exploit to demonstrate that so the the core of it",
    "start": "1938960",
    "end": "1946639"
  },
  {
    "text": "is",
    "start": "1946639",
    "end": "1949639"
  },
  {
    "text": "here 77 FC 3210 contains the point to our first Vector exception",
    "start": "1952880",
    "end": "1958519"
  },
  {
    "text": "structure um but remember we're doing it the other way around we're subtracting throwing it and it's going to go in",
    "start": "1958519",
    "end": "1964279"
  },
  {
    "text": "afterwards and then uh our buffer our pointed to our buffer can be found at",
    "start": "1964279",
    "end": "1969360"
  },
  {
    "text": "address 0012 ff48 well actually 5 Z rather but because we want it to point",
    "start": "1969360",
    "end": "1975120"
  },
  {
    "text": "to um our pseudo Vector exception node instead uh we don't want to be overwriting this the points to our",
    "start": "1975120",
    "end": "1981880"
  },
  {
    "text": "buffer so we have to drop it eight back so uh let's give it a while",
    "start": "1981880",
    "end": "1989500"
  },
  {
    "text": "[Music] so this is the the vulnerable program",
    "start": "1989500",
    "end": "1995840"
  },
  {
    "text": "here and this is the uh the program now because",
    "start": "1995840",
    "end": "2003960"
  },
  {
    "text": "uh because I'm not cleaning up after myself here um um what's going to happen",
    "start": "2003960",
    "end": "2009080"
  },
  {
    "text": "is the the vector exception handle is just going to keep on kicking over and over and over again so we're going to",
    "start": "2009080",
    "end": "2014240"
  },
  {
    "text": "get loads [Music] of until you eventually kick it in the",
    "start": "2014240",
    "end": "2020799"
  },
  {
    "text": "head like that so um obviously cleaning up after yourself um is uh you know a",
    "start": "2020799",
    "end": "2029080"
  },
  {
    "text": "good thing to do especially if you don't want to dust the Box",
    "start": "2029080",
    "end": "2034279"
  },
  {
    "text": "okay another way of exploiting heat based overflows on Windows platform um",
    "start": "2039000",
    "end": "2044919"
  },
  {
    "text": "within the the process environment block there is a pointer to RTL enter critical",
    "start": "2044919",
    "end": "2050599"
  },
  {
    "text": "section now each process contains a structure known as the process",
    "start": "2050599",
    "end": "2055679"
  },
  {
    "text": "environment block or PEB for short the PB can be referenced from the thread environment block which we can use uh",
    "start": "2055679",
    "end": "2063520"
  },
  {
    "text": "fs0 basically uh has a pointed to the TB uh um so we get a pointed to the PB",
    "start": "2063520",
    "end": "2070599"
  },
  {
    "text": "basically um by moving into eax dword poter FS 030 which is the The Base",
    "start": "2070599",
    "end": "2077280"
  },
  {
    "text": "address of the thread environment block itself and from there we uh plus 18 we get the the the process of environment",
    "start": "2077280",
    "end": "2084599"
  },
  {
    "text": "block well as well as containing um you know process specific data the the PB",
    "start": "2084599",
    "end": "2091280"
  },
  {
    "text": "contains a couple of pointers RTL enter critical section and RTL leave critical section now these pointers are actually",
    "start": "2091280",
    "end": "2097160"
  },
  {
    "text": "referenced from RTL acquir PB lock and RTL release p pb lock RTL acquir PB lock",
    "start": "2097160",
    "end": "2104880"
  },
  {
    "text": "is actually called from uh exit process for example it's not that's not strictly",
    "start": "2104880",
    "end": "2110079"
  },
  {
    "text": "speaking the case CU exit process calls ldr unload uh dll which actually calls",
    "start": "2110079",
    "end": "2116400"
  },
  {
    "text": "RTL um acquired P lock but one of the exit Parts uh one of the uh common parts",
    "start": "2116400",
    "end": "2122720"
  },
  {
    "text": "we'll see is from exit process uh so we'll see these point is being referenced uh when you you call exit",
    "start": "2122720",
    "end": "2128320"
  },
  {
    "text": "process so in in those cases where someone set up um an exception Handler",
    "start": "2128320",
    "end": "2133520"
  },
  {
    "text": "for example that just calls exit process uh we can abuse this method quite comfortably um to do this to to to to",
    "start": "2133520",
    "end": "2142160"
  },
  {
    "text": "gain control now one of the the good methods one of the good points about this method",
    "start": "2142160",
    "end": "2147320"
  },
  {
    "text": "is the location of the the PV is stable across Windows N4 200000 and XP and thus",
    "start": "2147320",
    "end": "2153599"
  },
  {
    "text": "the pointer to RTL critical section can be found at the same address within the PEB and it happens to be 7 ffdf 020",
    "start": "2153599",
    "end": "2162680"
  },
  {
    "text": "whilst the PE can be found at the same address in Windows 2003 we no longer have these pointers um in Windows 2003",
    "start": "2162680",
    "end": "2171040"
  },
  {
    "text": "so this method won't work on a on a a wind 2K3 box so the method simply involves",
    "start": "2171040",
    "end": "2178640"
  },
  {
    "text": "overwriting the pointer to RTL and critical section in the PB with the address of an instruction that will",
    "start": "2178640",
    "end": "2183720"
  },
  {
    "text": "return us to our buffer so if we look at code listing G",
    "start": "2183720",
    "end": "2189559"
  },
  {
    "text": "this one here has an exception Handler which calls exit",
    "start": "2191000",
    "end": "2197720"
  },
  {
    "text": "process there you know on on the event of an exception",
    "start": "2197720",
    "end": "2203680"
  },
  {
    "text": "occurring here again is our overflow which is triggered with this allocation",
    "start": "2203760",
    "end": "2211240"
  },
  {
    "text": "here and this here is a um an exploit",
    "start": "2213280",
    "end": "2219800"
  },
  {
    "text": "for it crucial thing",
    "start": "2219800",
    "end": "2225960"
  },
  {
    "text": "here this is where we can find our pointer to um the pointer to RT into critical",
    "start": "2227119",
    "end": "2234680"
  },
  {
    "text": "section in the PB minus 4 again we we're doing it the other way around so when it",
    "start": "2234680",
    "end": "2240520"
  },
  {
    "text": "comes to move uh into d word point to ECX plus 4 we have four to the 1 C and",
    "start": "2240520",
    "end": "2246400"
  },
  {
    "text": "that brings us up to our 20 obviously if there's a you know 20 in um in HEX in in",
    "start": "2246400",
    "end": "2252760"
  },
  {
    "text": "asy rather is a space so by doing it this way around we avoid the problem of of having a space and messing around",
    "start": "2252760",
    "end": "2258720"
  },
  {
    "text": "with arguments and so on",
    "start": "2258720",
    "end": "2263319"
  },
  {
    "text": "um and then let's fire it",
    "start": "2263760",
    "end": "2268319"
  },
  {
    "text": "off this here uh is the one heat PB is the one",
    "start": "2269280",
    "end": "2274839"
  },
  {
    "text": "being executed and this here is",
    "start": "2274839",
    "end": "2280000"
  },
  {
    "text": "the and then we get it so as you can see we're actually if",
    "start": "2287319",
    "end": "2294200"
  },
  {
    "text": "I uh get rid of that for a minute we're actually in the exception",
    "start": "2294440",
    "end": "2300960"
  },
  {
    "text": "Handler exit process is being called but in the process of calling exit process",
    "start": "2300960",
    "end": "2306920"
  },
  {
    "text": "well that ldr on load DL which references the pointer to RTL into critical section which we which we own",
    "start": "2306920",
    "end": "2313800"
  },
  {
    "text": "so we call you know an arbitary address essentially so that's that",
    "start": "2313800",
    "end": "2319680"
  },
  {
    "text": "one now another method is uh using the uh pointer to the frame",
    "start": "2319680",
    "end": "2329160"
  },
  {
    "text": "the first except frame based exception handle within the the thread environment block uh this again was this this method",
    "start": "2329160",
    "end": "2336000"
  },
  {
    "text": "was uh put for by halvar um in his uh third generation exploits for for",
    "start": "2336000",
    "end": "2342520"
  },
  {
    "text": "Windows of we Walo so essentially each thread environment block contains a poter to the FR first frame based",
    "start": "2342520",
    "end": "2349160"
  },
  {
    "text": "exception Handler the first thread in any process has a TB uh with a base",
    "start": "2349160",
    "end": "2355240"
  },
  {
    "text": "address of 7f FD e0 um and each new thread is assigned",
    "start": "2355240",
    "end": "2362319"
  },
  {
    "text": "and address growing towards address zero but when threads are created and exit um",
    "start": "2362319",
    "end": "2368839"
  },
  {
    "text": "then essentially what happens is uh a space uh for a TB which has just been uh",
    "start": "2368839",
    "end": "2376920"
  },
  {
    "text": "sort of essentially freed up will be reused so we can't guarantee the location of a given uh TB for a given",
    "start": "2376920",
    "end": "2386920"
  },
  {
    "text": "thread uh this can lead obviously to a massive TB table um and can make this",
    "start": "2386920",
    "end": "2392760"
  },
  {
    "text": "method uncertain especially in in uh processes where there are you know",
    "start": "2392760",
    "end": "2397920"
  },
  {
    "text": "multiple threads in a single threaded situation then it's completely reliable",
    "start": "2397920",
    "end": "2404190"
  },
  {
    "text": "[Music] um so essentially what is going to go on",
    "start": "2404190",
    "end": "2410119"
  },
  {
    "text": "here is the method involves simply overwriting the pointer to the first exception the frame the first frame",
    "start": "2410119",
    "end": "2415640"
  },
  {
    "text": "based exception Handler um in the in the thread environment block with an address that",
    "start": "2415640",
    "end": "2421040"
  },
  {
    "text": "points to an instruction that will get us back to our buffer",
    "start": "2421040",
    "end": "2426079"
  },
  {
    "text": "um okay other ways of exploiting Heap",
    "start": "2426079",
    "end": "2431800"
  },
  {
    "text": "overflows um to uh execute arbitri code in a in a way similar to returning",
    "start": "2431800",
    "end": "2441240"
  },
  {
    "text": "to to lip SE style attacks um with with stack overflows you're not necessarily",
    "start": "2441240",
    "end": "2447079"
  },
  {
    "text": "it's it's an arbitrate code ex exploit essentially because you you're running um you know arbitary commands to a",
    "start": "2447079",
    "end": "2454040"
  },
  {
    "text": "certain degree um but but you you can use your return to LY attack to defeat",
    "start": "2454040",
    "end": "2460480"
  },
  {
    "text": "uh non-executable Stacks in the same way if we have a heat which is nonexecutable",
    "start": "2460480",
    "end": "2465839"
  },
  {
    "text": "we can use um points of sub uh subversion um to to gain control and run",
    "start": "2465839",
    "end": "2473599"
  },
  {
    "text": "arbitrary code essentially so assuming we have a process with the heat which is",
    "start": "2473599",
    "end": "2478920"
  },
  {
    "text": "marked as non-executable uh we can use point point subversion to do this now an example of this can be found in The",
    "start": "2478920",
    "end": "2486119"
  },
  {
    "text": "Fault reporting function answer the unhandled exception filter function so when a processor is on the way out it's",
    "start": "2486119",
    "end": "2492079"
  },
  {
    "text": "dying because of uh uh you know the process Act is violated um code within",
    "start": "2492079",
    "end": "2498599"
  },
  {
    "text": "the unhandled exception filter uh may be called now if we look at the code behind this theault reporting code calls get",
    "start": "2498599",
    "end": "2506280"
  },
  {
    "text": "system directory W to which you essentially pass that a buffer and the buffer you know it's filled with a point",
    "start": "2506280",
    "end": "2512400"
  },
  {
    "text": "to like C Bess Windows Bess system 32 uh to this buff for fult rep. DL is",
    "start": "2512400",
    "end": "2518440"
  },
  {
    "text": "concatenated and this library is then loaded and the report fault function is called so with our",
    "start": "2518440",
    "end": "2525160"
  },
  {
    "text": "AR with our arbitary dword overwrite what we could do well let's look at gu",
    "start": "2525160",
    "end": "2530640"
  },
  {
    "text": "get system directory W first off this essentially references a pointer in the data section of Kernel 32.dll that",
    "start": "2530640",
    "end": "2536880"
  },
  {
    "text": "points to um a wi character string to where the windows uh system directory",
    "start": "2536880",
    "end": "2542160"
  },
  {
    "text": "can be found and this pointer can be located at 77 Ed 73 BC",
    "start": "2542160",
    "end": "2547839"
  },
  {
    "text": "so on the Heap overflow if it's Unicode in nature essentially what we could attempt to do is um this actually",
    "start": "2547839",
    "end": "2555359"
  },
  {
    "text": "requires uh two buffers in in this respect first off we need uh a Unicode buffer that points to our our um where",
    "start": "2555359",
    "end": "2562839"
  },
  {
    "text": "we're going to fill that's we're going to fill with our own fake um Windows",
    "start": "2562839",
    "end": "2569599"
  },
  {
    "text": "system 32 directory it could even be a UNCC path um and when we get the Heap overflow we're essentially going to",
    "start": "2569599",
    "end": "2576160"
  },
  {
    "text": "overwrite the point uh that can be located here with the point to our fake um Windows system 32",
    "start": "2576160",
    "end": "2583440"
  },
  {
    "text": "directory so when um get system directory W is called it's",
    "start": "2583440",
    "end": "2590680"
  },
  {
    "text": "going to get our Windows system 32 directory where we stick in our own fault rep. DL export our own function",
    "start": "2590680",
    "end": "2597319"
  },
  {
    "text": "report fault so when the unhandled exception filter function is called we can execute arbitary code and as I said",
    "start": "2597319",
    "end": "2603359"
  },
  {
    "text": "this will work over a UNC path as well",
    "start": "2603359",
    "end": "2607838"
  },
  {
    "text": "um once the code paths are finite within within a given process I'd argue that",
    "start": "2610079",
    "end": "2616520"
  },
  {
    "text": "the possibilities of what can actually be done in terms of exploiting Heap overflows in in different ways is more",
    "start": "2616520",
    "end": "2622559"
  },
  {
    "text": "limited to the imagination and not by the finite code Parts essentially um",
    "start": "2622559",
    "end": "2627920"
  },
  {
    "text": "there's still lots of areas to explore in in this um and uh you know new new",
    "start": "2627920",
    "end": "2636160"
  },
  {
    "text": "things are coming out all all the time essentially new new new new methods to exploit Heap overflows",
    "start": "2636160",
    "end": "2642559"
  },
  {
    "text": "so so I've hope we demonstrated that Heap overflows are dangerous I mean most",
    "start": "2642559",
    "end": "2649119"
  },
  {
    "text": "people in this room will probably know that he Heap overflows are dangerous anyway but the message hasn't really",
    "start": "2649119",
    "end": "2654400"
  },
  {
    "text": "gotten across for the development Community yet that um they they shouldn't treat them as benign",
    "start": "2654400",
    "end": "2659520"
  },
  {
    "text": "essentially okay well that's that so are there any questions at",
    "start": "2659520",
    "end": "2665359"
  },
  {
    "text": "all sure",
    "start": "2665359",
    "end": "2669039"
  },
  {
    "text": "[Music] sorry could you say",
    "start": "2673400",
    "end": "2680280"
  },
  {
    "text": "again on on a free uh we're getting the same thing on on the Windows platform whether it's a free or a reallocate",
    "start": "2683319",
    "end": "2689359"
  },
  {
    "text": "basically we're still getting the ARB DW overrate so no it it it happens at different",
    "start": "2689359",
    "end": "2696760"
  },
  {
    "text": "location in code and it all depends on whether um the the two things you're",
    "start": "2696760",
    "end": "2702000"
  },
  {
    "text": "providing are you know both rable or not because then you end up access violating in other places and stuff like that but",
    "start": "2702000",
    "end": "2708839"
  },
  {
    "text": "essentially um the the free and the the the realloc",
    "start": "2708839",
    "end": "2715280"
  },
  {
    "text": "kind of thing do happen in in different locations but we're still getting this arbitary dwide override so",
    "start": "2715280",
    "end": "2721280"
  },
  {
    "text": "to uh for the most part it's it's somewhat irrelevant well that's that's in my",
    "start": "2721280",
    "end": "2727400"
  },
  {
    "text": "experience",
    "start": "2727400",
    "end": "2729838"
  },
  {
    "text": "anyway any other questions no okay well thanks very much",
    "start": "2733960",
    "end": "2739839"
  },
  {
    "text": "for coming oh sorry",
    "start": "2739839",
    "end": "2742839"
  },
  {
    "text": "John well and anything which um calls ldr unload dll because that's really the",
    "start": "2749599",
    "end": "2756599"
  },
  {
    "text": "function that's calling um RTL acquire PB log so anything which you know free",
    "start": "2756599",
    "end": "2762440"
  },
  {
    "text": "library for example we call ldr unload Library so the there will be other",
    "start": "2762440",
    "end": "2767680"
  },
  {
    "text": "things but exit process is a common example for an exception Handler so what",
    "start": "2767680",
    "end": "2772760"
  },
  {
    "text": "I I the point I was demonstrating was that even if someone's calling exit process we can still gain control you",
    "start": "2772760",
    "end": "2778319"
  },
  {
    "text": "know and abuse that uh functionality cool well thanks very much",
    "start": "2778319",
    "end": "2783680"
  },
  {
    "text": "everybody for coming and enjoy the rest of the show [Applause]",
    "start": "2783680",
    "end": "2795929"
  },
  {
    "text": "he",
    "start": "2815839",
    "end": "2818839"
  },
  {
    "text": "I",
    "start": "2845839",
    "end": "2848839"
  },
  {
    "text": "I",
    "start": "2875839",
    "end": "2878839"
  },
  {
    "text": "I",
    "start": "2905760",
    "end": "2908760"
  },
  {
    "text": "I",
    "start": "2935720",
    "end": "2938720"
  },
  {
    "text": "I",
    "start": "2965720",
    "end": "2968720"
  },
  {
    "text": "I",
    "start": "2995640",
    "end": "2998640"
  },
  {
    "text": "I",
    "start": "3025640",
    "end": "3028640"
  },
  {
    "text": "I",
    "start": "3055640",
    "end": "3058640"
  },
  {
    "text": "I",
    "start": "3085559",
    "end": "3088559"
  },
  {
    "text": "I",
    "start": "3115520",
    "end": "3118520"
  },
  {
    "text": "I",
    "start": "3145520",
    "end": "3148520"
  },
  {
    "text": "e",
    "start": "3175440",
    "end": "3178440"
  },
  {
    "text": "I",
    "start": "3205440",
    "end": "3208440"
  },
  {
    "text": "I",
    "start": "3235440",
    "end": "3238440"
  },
  {
    "text": "I",
    "start": "3265359",
    "end": "3268359"
  },
  {
    "text": "I",
    "start": "3295319",
    "end": "3298319"
  },
  {
    "text": "I",
    "start": "3325319",
    "end": "3328319"
  },
  {
    "text": "I",
    "start": "3355240",
    "end": "3358240"
  },
  {
    "text": "I",
    "start": "3385240",
    "end": "3388240"
  },
  {
    "text": "I",
    "start": "3415240",
    "end": "3418240"
  },
  {
    "text": "I",
    "start": "3445160",
    "end": "3448160"
  },
  {
    "text": "I",
    "start": "3475119",
    "end": "3478119"
  },
  {
    "text": "I",
    "start": "3505119",
    "end": "3508119"
  },
  {
    "text": "I",
    "start": "3535039",
    "end": "3538039"
  },
  {
    "text": "e",
    "start": "3565039",
    "end": "3568039"
  },
  {
    "text": "I",
    "start": "3595039",
    "end": "3598039"
  },
  {
    "text": "I",
    "start": "3624960",
    "end": "3627960"
  },
  {
    "text": "I",
    "start": "3654920",
    "end": "3657920"
  },
  {
    "text": "e",
    "start": "3684920",
    "end": "3687920"
  },
  {
    "text": "I",
    "start": "3714839",
    "end": "3717839"
  },
  {
    "text": "I",
    "start": "3744839",
    "end": "3747839"
  },
  {
    "text": "I",
    "start": "3774839",
    "end": "3777839"
  },
  {
    "text": "I",
    "start": "3804760",
    "end": "3807760"
  },
  {
    "text": "I",
    "start": "3834720",
    "end": "3837720"
  },
  {
    "text": "I",
    "start": "3864720",
    "end": "3867720"
  },
  {
    "text": "I",
    "start": "3894640",
    "end": "3897640"
  },
  {
    "text": "I",
    "start": "3924640",
    "end": "3927640"
  },
  {
    "text": "I",
    "start": "3954640",
    "end": "3957640"
  },
  {
    "text": "I",
    "start": "3984559",
    "end": "3987559"
  },
  {
    "text": "I",
    "start": "4014520",
    "end": "4017520"
  },
  {
    "text": "e",
    "start": "4044520",
    "end": "4047520"
  },
  {
    "text": "I",
    "start": "4074440",
    "end": "4077440"
  },
  {
    "text": "I",
    "start": "4104440",
    "end": "4107440"
  },
  {
    "text": "I",
    "start": "4134440",
    "end": "4137440"
  },
  {
    "text": "I",
    "start": "4164359",
    "end": "4167359"
  },
  {
    "text": "I",
    "start": "4194320",
    "end": "4197320"
  },
  {
    "text": "I",
    "start": "4224320",
    "end": "4227320"
  },
  {
    "text": "I",
    "start": "4254239",
    "end": "4257239"
  },
  {
    "text": "I",
    "start": "4284239",
    "end": "4287239"
  },
  {
    "text": "I",
    "start": "4314239",
    "end": "4317239"
  },
  {
    "text": "I",
    "start": "4344159",
    "end": "4347159"
  },
  {
    "text": "I",
    "start": "4374120",
    "end": "4377120"
  },
  {
    "text": "I",
    "start": "4404120",
    "end": "4407120"
  },
  {
    "text": "I",
    "start": "4434040",
    "end": "4437040"
  },
  {
    "text": "I",
    "start": "4464040",
    "end": "4467040"
  },
  {
    "text": "e",
    "start": "4494000",
    "end": "4497000"
  },
  {
    "text": "I",
    "start": "4523960",
    "end": "4526960"
  },
  {
    "text": "I",
    "start": "4553920",
    "end": "4556920"
  },
  {
    "text": "I",
    "start": "4583920",
    "end": "4586920"
  },
  {
    "text": "I",
    "start": "4613840",
    "end": "4616840"
  },
  {
    "text": "I",
    "start": "4643840",
    "end": "4646840"
  },
  {
    "text": "I",
    "start": "4673840",
    "end": "4676840"
  },
  {
    "text": "I",
    "start": "4703760",
    "end": "4706760"
  },
  {
    "text": "I",
    "start": "4733719",
    "end": "4736719"
  },
  {
    "text": "I",
    "start": "4763719",
    "end": "4766719"
  },
  {
    "text": "I",
    "start": "4793639",
    "end": "4796639"
  },
  {
    "text": "I",
    "start": "4823639",
    "end": "4826639"
  },
  {
    "text": "e",
    "start": "4853639",
    "end": "4856639"
  },
  {
    "text": "I",
    "start": "4883560",
    "end": "4886560"
  },
  {
    "text": "e",
    "start": "4913520",
    "end": "4916520"
  },
  {
    "text": "I",
    "start": "4943520",
    "end": "4946520"
  },
  {
    "text": "I",
    "start": "4973440",
    "end": "4976440"
  },
  {
    "text": "I",
    "start": "5003440",
    "end": "5006440"
  },
  {
    "text": "I",
    "start": "5033440",
    "end": "5036440"
  },
  {
    "text": "I",
    "start": "5063320",
    "end": "5066320"
  },
  {
    "text": "I",
    "start": "5093320",
    "end": "5096320"
  },
  {
    "text": "I",
    "start": "5123320",
    "end": "5126320"
  },
  {
    "text": "I",
    "start": "5153239",
    "end": "5156239"
  },
  {
    "text": "I",
    "start": "5183239",
    "end": "5186239"
  },
  {
    "text": "I",
    "start": "5213239",
    "end": "5216239"
  },
  {
    "text": "I",
    "start": "5243119",
    "end": "5246119"
  },
  {
    "text": "I",
    "start": "5273119",
    "end": "5276119"
  },
  {
    "text": "e",
    "start": "5303119",
    "end": "5306119"
  },
  {
    "text": "I",
    "start": "5333040",
    "end": "5336040"
  },
  {
    "text": "I",
    "start": "5363040",
    "end": "5366040"
  },
  {
    "text": "e",
    "start": "5393040",
    "end": "5396040"
  },
  {
    "text": "I",
    "start": "5422960",
    "end": "5425960"
  },
  {
    "text": "I",
    "start": "5452920",
    "end": "5455920"
  },
  {
    "text": "I",
    "start": "5482920",
    "end": "5485920"
  },
  {
    "text": "I I",
    "start": "5512840",
    "end": "5516880"
  },
  {
    "text": "I",
    "start": "5544040",
    "end": "5547040"
  }
]